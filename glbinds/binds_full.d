// WTFPL or Public Domain, on your choice
module iv.glbinds.binds_full;

// lazy loading
version = glbind_lazy_load;

// show loaded functions
//version = glbind_debug;


//public import arsd.simpledisplay;


// ////////////////////////////////////////////////////////////////////////// //
extern(System) nothrow @nogc {

version(Windows) {
  pragma(lib, "opengl32");
  private void* glbindGetProcAddress (const(char)* name) {
    import core.sys.windows.wingdi : wglGetProcAddress;
    void* res = wglGetProcAddress(name);
    if (res is null) {
      import core.sys.windows.windef, core.sys.windows.winbase;
      static HINSTANCE dll = null;
      if (dll is null) {
        dll = LoadLibraryA("opengl32.dll");
        if (dll is null) return null; // <32, but idc
      }
      return GetProcAddress(dll, name);
    }
    return res;
  }
} else {
  pragma(lib, "GL");
  void* glXGetProcAddress (const(char)* name);
  alias glbindGetProcAddress = glXGetProcAddress;
}

public bool glHasFunction (const(char)[] name) {
  if (name.length == 0 || name.length > 255) return false; // arbitrary limit
  char[256] xname = 0;
  xname[0..name.length] = name[];
  return (glbindGetProcAddress(xname.ptr) !is null);
}

// convenient template checker
public bool glHasFunc(string name) () {
  static int flag = -1;
  if (flag < 0) flag = (glHasFunction(name) ? 1 : 0);
  return (flag == 1);
}


alias GLvoid = void;
alias GLintptr = ptrdiff_t;
alias GLsizei = int;
alias GLchar = char;
alias GLcharARB = byte;
alias GLushort = ushort;
alias GLint64EXT = long;
alias GLshort = short;
alias GLuint64 = ulong;
alias GLhalfARB = ushort;
alias GLubyte = ubyte;
alias GLdouble = double;
alias GLhandleARB = uint;
alias GLint64 = long;
alias GLenum = uint;
alias GLeglImageOES = void*;
alias GLintptrARB = ptrdiff_t;
alias GLsizeiptr = ptrdiff_t;
alias GLint = int;
alias GLboolean = ubyte;
alias GLbitfield = uint;
alias GLsizeiptrARB = ptrdiff_t;
alias GLfloat = float;
alias GLuint64EXT = ulong;
alias GLclampf = float;
alias GLbyte = byte;
alias GLclampd = double;
alias GLuint = uint;
alias GLvdpauSurfaceNV = ptrdiff_t;
alias GLfixed = int;
alias GLhalf = ushort;
alias GLclampx = int;
alias GLhalfNV = ushort;
//struct ___GLsync; alias __GLsync = ___GLsync*;
//alias GLsync = __GLsync*;
//struct __cl_context; alias _cl_context = __cl_context*;
//struct __cl_event; alias _cl_event = __cl_event*;

enum ubyte GL_FALSE = 0;
enum ubyte GL_TRUE = 1;
enum uint GL_NO_ERROR = 0;
enum uint GL_NONE = 0;
enum uint GL_ZERO = 0;
enum uint GL_ONE = 1;
enum uint GL_NONE_OES = 0;
enum uint GL_INVALID_INDEX = 0xFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
enum uint GL_VERSION_ES_CL_1_0 = 1;
enum uint GL_VERSION_ES_CM_1_1 = 1;
enum uint GL_VERSION_ES_CL_1_1 = 1;
enum uint GL_DEPTH_BUFFER_BIT = 0x00000100;
enum uint GL_STENCIL_BUFFER_BIT = 0x00000400;
enum uint GL_COLOR_BUFFER_BIT = 0x00004000;
enum uint GL_POINTS = 0x0000;
enum uint GL_LINES = 0x0001;
enum uint GL_LINE_LOOP = 0x0002;
enum uint GL_LINE_STRIP = 0x0003;
enum uint GL_TRIANGLES = 0x0004;
enum uint GL_TRIANGLE_STRIP = 0x0005;
enum uint GL_TRIANGLE_FAN = 0x0006;
enum uint GL_QUADS = 0x0007;
enum uint GL_NEVER = 0x0200;
enum uint GL_LESS = 0x0201;
enum uint GL_EQUAL = 0x0202;
enum uint GL_LEQUAL = 0x0203;
enum uint GL_GREATER = 0x0204;
enum uint GL_NOTEQUAL = 0x0205;
enum uint GL_GEQUAL = 0x0206;
enum uint GL_ALWAYS = 0x0207;
enum uint GL_SRC_COLOR = 0x0300;
enum uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum uint GL_SRC_ALPHA = 0x0302;
enum uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum uint GL_DST_ALPHA = 0x0304;
enum uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum uint GL_DST_COLOR = 0x0306;
enum uint GL_ONE_MINUS_DST_COLOR = 0x0307;
enum uint GL_SRC_ALPHA_SATURATE = 0x0308;
enum uint GL_FRONT_LEFT = 0x0400;
enum uint GL_FRONT_RIGHT = 0x0401;
enum uint GL_BACK_LEFT = 0x0402;
enum uint GL_BACK_RIGHT = 0x0403;
enum uint GL_FRONT = 0x0404;
enum uint GL_BACK = 0x0405;
enum uint GL_LEFT = 0x0406;
enum uint GL_RIGHT = 0x0407;
enum uint GL_FRONT_AND_BACK = 0x0408;
enum uint GL_INVALID_ENUM = 0x0500;
enum uint GL_INVALID_VALUE = 0x0501;
enum uint GL_INVALID_OPERATION = 0x0502;
enum uint GL_OUT_OF_MEMORY = 0x0505;
enum uint GL_CW = 0x0900;
enum uint GL_CCW = 0x0901;
enum uint GL_POINT_SIZE = 0x0B11;
enum uint GL_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_LINE_SMOOTH = 0x0B20;
enum uint GL_LINE_WIDTH = 0x0B21;
enum uint GL_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_POLYGON_MODE = 0x0B40;
enum uint GL_POLYGON_SMOOTH = 0x0B41;
enum uint GL_CULL_FACE = 0x0B44;
enum uint GL_CULL_FACE_MODE = 0x0B45;
enum uint GL_FRONT_FACE = 0x0B46;
enum uint GL_DEPTH_RANGE = 0x0B70;
enum uint GL_DEPTH_TEST = 0x0B71;
enum uint GL_DEPTH_WRITEMASK = 0x0B72;
enum uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum uint GL_DEPTH_FUNC = 0x0B74;
enum uint GL_STENCIL_TEST = 0x0B90;
enum uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum uint GL_STENCIL_FUNC = 0x0B92;
enum uint GL_STENCIL_VALUE_MASK = 0x0B93;
enum uint GL_STENCIL_FAIL = 0x0B94;
enum uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum uint GL_STENCIL_REF = 0x0B97;
enum uint GL_STENCIL_WRITEMASK = 0x0B98;
enum uint GL_VIEWPORT = 0x0BA2;
enum uint GL_DITHER = 0x0BD0;
enum uint GL_BLEND_DST = 0x0BE0;
enum uint GL_BLEND_SRC = 0x0BE1;
enum uint GL_BLEND = 0x0BE2;
enum uint GL_LOGIC_OP_MODE = 0x0BF0;
enum uint GL_COLOR_LOGIC_OP = 0x0BF2;
enum uint GL_DRAW_BUFFER = 0x0C01;
enum uint GL_READ_BUFFER = 0x0C02;
enum uint GL_SCISSOR_BOX = 0x0C10;
enum uint GL_SCISSOR_TEST = 0x0C11;
enum uint GL_COLOR_CLEAR_VALUE = 0x0C22;
enum uint GL_COLOR_WRITEMASK = 0x0C23;
enum uint GL_DOUBLEBUFFER = 0x0C32;
enum uint GL_STEREO = 0x0C33;
enum uint GL_LINE_SMOOTH_HINT = 0x0C52;
enum uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
enum uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
enum uint GL_UNPACK_LSB_FIRST = 0x0CF1;
enum uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum uint GL_UNPACK_ALIGNMENT = 0x0CF5;
enum uint GL_PACK_SWAP_BYTES = 0x0D00;
enum uint GL_PACK_LSB_FIRST = 0x0D01;
enum uint GL_PACK_ROW_LENGTH = 0x0D02;
enum uint GL_PACK_SKIP_ROWS = 0x0D03;
enum uint GL_PACK_SKIP_PIXELS = 0x0D04;
enum uint GL_PACK_ALIGNMENT = 0x0D05;
enum uint GL_MAX_TEXTURE_SIZE = 0x0D33;
enum uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum uint GL_SUBPIXEL_BITS = 0x0D50;
enum uint GL_TEXTURE_1D = 0x0DE0;
enum uint GL_TEXTURE_2D = 0x0DE1;
enum uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum uint GL_POLYGON_OFFSET_POINT = 0x2A01;
enum uint GL_POLYGON_OFFSET_LINE = 0x2A02;
enum uint GL_POLYGON_OFFSET_FILL = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum uint GL_TEXTURE_BINDING_1D = 0x8068;
enum uint GL_TEXTURE_BINDING_2D = 0x8069;
enum uint GL_TEXTURE_WIDTH = 0x1000;
enum uint GL_TEXTURE_HEIGHT = 0x1001;
enum uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum uint GL_TEXTURE_BORDER_COLOR = 0x1004;
enum uint GL_TEXTURE_RED_SIZE = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum uint GL_DONT_CARE = 0x1100;
enum uint GL_FASTEST = 0x1101;
enum uint GL_NICEST = 0x1102;
enum uint GL_BYTE = 0x1400;
enum uint GL_UNSIGNED_BYTE = 0x1401;
enum uint GL_SHORT = 0x1402;
enum uint GL_UNSIGNED_SHORT = 0x1403;
enum uint GL_INT = 0x1404;
enum uint GL_UNSIGNED_INT = 0x1405;
enum uint GL_FLOAT = 0x1406;
enum uint GL_DOUBLE = 0x140A;
enum uint GL_STACK_OVERFLOW = 0x0503;
enum uint GL_STACK_UNDERFLOW = 0x0504;
enum uint GL_CLEAR = 0x1500;
enum uint GL_AND = 0x1501;
enum uint GL_AND_REVERSE = 0x1502;
enum uint GL_COPY = 0x1503;
enum uint GL_AND_INVERTED = 0x1504;
enum uint GL_NOOP = 0x1505;
enum uint GL_XOR = 0x1506;
enum uint GL_OR = 0x1507;
enum uint GL_NOR = 0x1508;
enum uint GL_EQUIV = 0x1509;
enum uint GL_INVERT = 0x150A;
enum uint GL_OR_REVERSE = 0x150B;
enum uint GL_COPY_INVERTED = 0x150C;
enum uint GL_OR_INVERTED = 0x150D;
enum uint GL_NAND = 0x150E;
enum uint GL_SET = 0x150F;
enum uint GL_TEXTURE = 0x1702;
enum uint GL_COLOR = 0x1800;
enum uint GL_DEPTH = 0x1801;
enum uint GL_STENCIL = 0x1802;
enum uint GL_STENCIL_INDEX = 0x1901;
enum uint GL_DEPTH_COMPONENT = 0x1902;
enum uint GL_RED = 0x1903;
enum uint GL_GREEN = 0x1904;
enum uint GL_BLUE = 0x1905;
enum uint GL_ALPHA = 0x1906;
enum uint GL_RGB = 0x1907;
enum uint GL_RGBA = 0x1908;
enum uint GL_POINT = 0x1B00;
enum uint GL_LINE = 0x1B01;
enum uint GL_FILL = 0x1B02;
enum uint GL_KEEP = 0x1E00;
enum uint GL_REPLACE = 0x1E01;
enum uint GL_INCR = 0x1E02;
enum uint GL_DECR = 0x1E03;
enum uint GL_VENDOR = 0x1F00;
enum uint GL_RENDERER = 0x1F01;
enum uint GL_VERSION = 0x1F02;
enum uint GL_EXTENSIONS = 0x1F03;
enum uint GL_NEAREST = 0x2600;
enum uint GL_LINEAR = 0x2601;
enum uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum uint GL_TEXTURE_MAG_FILTER = 0x2800;
enum uint GL_TEXTURE_MIN_FILTER = 0x2801;
enum uint GL_TEXTURE_WRAP_S = 0x2802;
enum uint GL_TEXTURE_WRAP_T = 0x2803;
enum uint GL_PROXY_TEXTURE_1D = 0x8063;
enum uint GL_PROXY_TEXTURE_2D = 0x8064;
enum uint GL_REPEAT = 0x2901;
enum uint GL_R3_G3_B2 = 0x2A10;
enum uint GL_RGB4 = 0x804F;
enum uint GL_RGB5 = 0x8050;
enum uint GL_RGB8 = 0x8051;
enum uint GL_RGB10 = 0x8052;
enum uint GL_RGB12 = 0x8053;
enum uint GL_RGB16 = 0x8054;
enum uint GL_RGBA2 = 0x8055;
enum uint GL_RGBA4 = 0x8056;
enum uint GL_RGB5_A1 = 0x8057;
enum uint GL_RGBA8 = 0x8058;
enum uint GL_RGB10_A2 = 0x8059;
enum uint GL_RGBA12 = 0x805A;
enum uint GL_RGBA16 = 0x805B;
enum uint GL_CURRENT_BIT = 0x00000001;
enum uint GL_POINT_BIT = 0x00000002;
enum uint GL_LINE_BIT = 0x00000004;
enum uint GL_POLYGON_BIT = 0x00000008;
enum uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
enum uint GL_PIXEL_MODE_BIT = 0x00000020;
enum uint GL_LIGHTING_BIT = 0x00000040;
enum uint GL_FOG_BIT = 0x00000080;
enum uint GL_ACCUM_BUFFER_BIT = 0x00000200;
enum uint GL_VIEWPORT_BIT = 0x00000800;
enum uint GL_TRANSFORM_BIT = 0x00001000;
enum uint GL_ENABLE_BIT = 0x00002000;
enum uint GL_HINT_BIT = 0x00008000;
enum uint GL_EVAL_BIT = 0x00010000;
enum uint GL_LIST_BIT = 0x00020000;
enum uint GL_TEXTURE_BIT = 0x00040000;
enum uint GL_SCISSOR_BIT = 0x00080000;
enum uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
enum uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
enum uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_QUAD_STRIP = 0x0008;
enum uint GL_POLYGON = 0x0009;
enum uint GL_ACCUM = 0x0100;
enum uint GL_LOAD = 0x0101;
enum uint GL_RETURN = 0x0102;
enum uint GL_MULT = 0x0103;
enum uint GL_ADD = 0x0104;
enum uint GL_AUX0 = 0x0409;
enum uint GL_AUX1 = 0x040A;
enum uint GL_AUX2 = 0x040B;
enum uint GL_AUX3 = 0x040C;
enum uint GL_2D = 0x0600;
enum uint GL_3D = 0x0601;
enum uint GL_3D_COLOR = 0x0602;
enum uint GL_3D_COLOR_TEXTURE = 0x0603;
enum uint GL_4D_COLOR_TEXTURE = 0x0604;
enum uint GL_PASS_THROUGH_TOKEN = 0x0700;
enum uint GL_POINT_TOKEN = 0x0701;
enum uint GL_LINE_TOKEN = 0x0702;
enum uint GL_POLYGON_TOKEN = 0x0703;
enum uint GL_BITMAP_TOKEN = 0x0704;
enum uint GL_DRAW_PIXEL_TOKEN = 0x0705;
enum uint GL_COPY_PIXEL_TOKEN = 0x0706;
enum uint GL_LINE_RESET_TOKEN = 0x0707;
enum uint GL_EXP = 0x0800;
enum uint GL_EXP2 = 0x0801;
enum uint GL_COEFF = 0x0A00;
enum uint GL_ORDER = 0x0A01;
enum uint GL_DOMAIN = 0x0A02;
enum uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
enum uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
enum uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
enum uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
enum uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
enum uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
enum uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
enum uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
enum uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
enum uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
enum uint GL_VERTEX_ARRAY_POINTER = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
enum uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
enum uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
enum uint GL_CURRENT_COLOR = 0x0B00;
enum uint GL_CURRENT_INDEX = 0x0B01;
enum uint GL_CURRENT_NORMAL = 0x0B02;
enum uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
enum uint GL_CURRENT_RASTER_COLOR = 0x0B04;
enum uint GL_CURRENT_RASTER_INDEX = 0x0B05;
enum uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
enum uint GL_CURRENT_RASTER_POSITION = 0x0B07;
enum uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
enum uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
enum uint GL_POINT_SMOOTH = 0x0B10;
enum uint GL_LINE_STIPPLE = 0x0B24;
enum uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
enum uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
enum uint GL_LIST_MODE = 0x0B30;
enum uint GL_MAX_LIST_NESTING = 0x0B31;
enum uint GL_LIST_BASE = 0x0B32;
enum uint GL_LIST_INDEX = 0x0B33;
enum uint GL_POLYGON_STIPPLE = 0x0B42;
enum uint GL_EDGE_FLAG = 0x0B43;
enum uint GL_LIGHTING = 0x0B50;
enum uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
enum uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
enum uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
enum uint GL_SHADE_MODEL = 0x0B54;
enum uint GL_COLOR_MATERIAL_FACE = 0x0B55;
enum uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
enum uint GL_COLOR_MATERIAL = 0x0B57;
enum uint GL_FOG = 0x0B60;
enum uint GL_FOG_INDEX = 0x0B61;
enum uint GL_FOG_DENSITY = 0x0B62;
enum uint GL_FOG_START = 0x0B63;
enum uint GL_FOG_END = 0x0B64;
enum uint GL_FOG_MODE = 0x0B65;
enum uint GL_FOG_COLOR = 0x0B66;
enum uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
enum uint GL_MATRIX_MODE = 0x0BA0;
enum uint GL_NORMALIZE = 0x0BA1;
enum uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
enum uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
enum uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
enum uint GL_MODELVIEW_MATRIX = 0x0BA6;
enum uint GL_PROJECTION_MATRIX = 0x0BA7;
enum uint GL_TEXTURE_MATRIX = 0x0BA8;
enum uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
enum uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
enum uint GL_ALPHA_TEST = 0x0BC0;
enum uint GL_ALPHA_TEST_FUNC = 0x0BC1;
enum uint GL_ALPHA_TEST_REF = 0x0BC2;
enum uint GL_INDEX_LOGIC_OP = 0x0BF1;
enum uint GL_LOGIC_OP = 0x0BF1;
enum uint GL_AUX_BUFFERS = 0x0C00;
enum uint GL_INDEX_CLEAR_VALUE = 0x0C20;
enum uint GL_INDEX_WRITEMASK = 0x0C21;
enum uint GL_INDEX_MODE = 0x0C30;
enum uint GL_RGBA_MODE = 0x0C31;
enum uint GL_RENDER_MODE = 0x0C40;
enum uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
enum uint GL_POINT_SMOOTH_HINT = 0x0C51;
enum uint GL_FOG_HINT = 0x0C54;
enum uint GL_TEXTURE_GEN_S = 0x0C60;
enum uint GL_TEXTURE_GEN_T = 0x0C61;
enum uint GL_TEXTURE_GEN_R = 0x0C62;
enum uint GL_TEXTURE_GEN_Q = 0x0C63;
enum uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
enum uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
enum uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
enum uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
enum uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
enum uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
enum uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
enum uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
enum uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
enum uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
enum uint GL_MAP_COLOR = 0x0D10;
enum uint GL_MAP_STENCIL = 0x0D11;
enum uint GL_INDEX_SHIFT = 0x0D12;
enum uint GL_INDEX_OFFSET = 0x0D13;
enum uint GL_RED_SCALE = 0x0D14;
enum uint GL_RED_BIAS = 0x0D15;
enum uint GL_ZOOM_X = 0x0D16;
enum uint GL_ZOOM_Y = 0x0D17;
enum uint GL_GREEN_SCALE = 0x0D18;
enum uint GL_GREEN_BIAS = 0x0D19;
enum uint GL_BLUE_SCALE = 0x0D1A;
enum uint GL_BLUE_BIAS = 0x0D1B;
enum uint GL_ALPHA_SCALE = 0x0D1C;
enum uint GL_ALPHA_BIAS = 0x0D1D;
enum uint GL_DEPTH_SCALE = 0x0D1E;
enum uint GL_DEPTH_BIAS = 0x0D1F;
enum uint GL_MAX_EVAL_ORDER = 0x0D30;
enum uint GL_MAX_LIGHTS = 0x0D31;
enum uint GL_MAX_CLIP_PLANES = 0x0D32;
enum uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
enum uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
enum uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
enum uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
enum uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
enum uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
enum uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
enum uint GL_INDEX_BITS = 0x0D51;
enum uint GL_RED_BITS = 0x0D52;
enum uint GL_GREEN_BITS = 0x0D53;
enum uint GL_BLUE_BITS = 0x0D54;
enum uint GL_ALPHA_BITS = 0x0D55;
enum uint GL_DEPTH_BITS = 0x0D56;
enum uint GL_STENCIL_BITS = 0x0D57;
enum uint GL_ACCUM_RED_BITS = 0x0D58;
enum uint GL_ACCUM_GREEN_BITS = 0x0D59;
enum uint GL_ACCUM_BLUE_BITS = 0x0D5A;
enum uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
enum uint GL_NAME_STACK_DEPTH = 0x0D70;
enum uint GL_AUTO_NORMAL = 0x0D80;
enum uint GL_MAP1_COLOR_4 = 0x0D90;
enum uint GL_MAP1_INDEX = 0x0D91;
enum uint GL_MAP1_NORMAL = 0x0D92;
enum uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
enum uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
enum uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
enum uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
enum uint GL_MAP1_VERTEX_3 = 0x0D97;
enum uint GL_MAP1_VERTEX_4 = 0x0D98;
enum uint GL_MAP2_COLOR_4 = 0x0DB0;
enum uint GL_MAP2_INDEX = 0x0DB1;
enum uint GL_MAP2_NORMAL = 0x0DB2;
enum uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
enum uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
enum uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
enum uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
enum uint GL_MAP2_VERTEX_3 = 0x0DB7;
enum uint GL_MAP2_VERTEX_4 = 0x0DB8;
enum uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
enum uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
enum uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
enum uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
enum uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
enum uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
enum uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
enum uint GL_VERTEX_ARRAY = 0x8074;
enum uint GL_NORMAL_ARRAY = 0x8075;
enum uint GL_COLOR_ARRAY = 0x8076;
enum uint GL_INDEX_ARRAY = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
enum uint GL_NORMAL_ARRAY_TYPE = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
enum uint GL_COLOR_ARRAY_SIZE = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE = 0x8083;
enum uint GL_INDEX_ARRAY_TYPE = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE = 0x8086;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
enum uint GL_TEXTURE_COMPONENTS = 0x1003;
enum uint GL_TEXTURE_BORDER = 0x1005;
enum uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
enum uint GL_TEXTURE_PRIORITY = 0x8066;
enum uint GL_TEXTURE_RESIDENT = 0x8067;
enum uint GL_AMBIENT = 0x1200;
enum uint GL_DIFFUSE = 0x1201;
enum uint GL_SPECULAR = 0x1202;
enum uint GL_POSITION = 0x1203;
enum uint GL_SPOT_DIRECTION = 0x1204;
enum uint GL_SPOT_EXPONENT = 0x1205;
enum uint GL_SPOT_CUTOFF = 0x1206;
enum uint GL_CONSTANT_ATTENUATION = 0x1207;
enum uint GL_LINEAR_ATTENUATION = 0x1208;
enum uint GL_QUADRATIC_ATTENUATION = 0x1209;
enum uint GL_COMPILE = 0x1300;
enum uint GL_COMPILE_AND_EXECUTE = 0x1301;
enum uint GL_2_BYTES = 0x1407;
enum uint GL_3_BYTES = 0x1408;
enum uint GL_4_BYTES = 0x1409;
enum uint GL_EMISSION = 0x1600;
enum uint GL_SHININESS = 0x1601;
enum uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
enum uint GL_COLOR_INDEXES = 0x1603;
enum uint GL_MODELVIEW = 0x1700;
enum uint GL_PROJECTION = 0x1701;
enum uint GL_COLOR_INDEX = 0x1900;
enum uint GL_LUMINANCE = 0x1909;
enum uint GL_LUMINANCE_ALPHA = 0x190A;
enum uint GL_BITMAP = 0x1A00;
enum uint GL_RENDER = 0x1C00;
enum uint GL_FEEDBACK = 0x1C01;
enum uint GL_SELECT = 0x1C02;
enum uint GL_FLAT = 0x1D00;
enum uint GL_SMOOTH = 0x1D01;
enum uint GL_S = 0x2000;
enum uint GL_T = 0x2001;
enum uint GL_R = 0x2002;
enum uint GL_Q = 0x2003;
enum uint GL_MODULATE = 0x2100;
enum uint GL_DECAL = 0x2101;
enum uint GL_TEXTURE_ENV_MODE = 0x2200;
enum uint GL_TEXTURE_ENV_COLOR = 0x2201;
enum uint GL_TEXTURE_ENV = 0x2300;
enum uint GL_EYE_LINEAR = 0x2400;
enum uint GL_OBJECT_LINEAR = 0x2401;
enum uint GL_SPHERE_MAP = 0x2402;
enum uint GL_TEXTURE_GEN_MODE = 0x2500;
enum uint GL_OBJECT_PLANE = 0x2501;
enum uint GL_EYE_PLANE = 0x2502;
enum uint GL_CLAMP = 0x2900;
enum uint GL_ALPHA4 = 0x803B;
enum uint GL_ALPHA8 = 0x803C;
enum uint GL_ALPHA12 = 0x803D;
enum uint GL_ALPHA16 = 0x803E;
enum uint GL_LUMINANCE4 = 0x803F;
enum uint GL_LUMINANCE8 = 0x8040;
enum uint GL_LUMINANCE12 = 0x8041;
enum uint GL_LUMINANCE16 = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4 = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2 = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8 = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4 = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12 = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16 = 0x8048;
enum uint GL_INTENSITY = 0x8049;
enum uint GL_INTENSITY4 = 0x804A;
enum uint GL_INTENSITY8 = 0x804B;
enum uint GL_INTENSITY12 = 0x804C;
enum uint GL_INTENSITY16 = 0x804D;
enum uint GL_V2F = 0x2A20;
enum uint GL_V3F = 0x2A21;
enum uint GL_C4UB_V2F = 0x2A22;
enum uint GL_C4UB_V3F = 0x2A23;
enum uint GL_C3F_V3F = 0x2A24;
enum uint GL_N3F_V3F = 0x2A25;
enum uint GL_C4F_N3F_V3F = 0x2A26;
enum uint GL_T2F_V3F = 0x2A27;
enum uint GL_T4F_V4F = 0x2A28;
enum uint GL_T2F_C4UB_V3F = 0x2A29;
enum uint GL_T2F_C3F_V3F = 0x2A2A;
enum uint GL_T2F_N3F_V3F = 0x2A2B;
enum uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
enum uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
enum uint GL_CLIP_PLANE0 = 0x3000;
enum uint GL_CLIP_PLANE1 = 0x3001;
enum uint GL_CLIP_PLANE2 = 0x3002;
enum uint GL_CLIP_PLANE3 = 0x3003;
enum uint GL_CLIP_PLANE4 = 0x3004;
enum uint GL_CLIP_PLANE5 = 0x3005;
enum uint GL_LIGHT0 = 0x4000;
enum uint GL_LIGHT1 = 0x4001;
enum uint GL_LIGHT2 = 0x4002;
enum uint GL_LIGHT3 = 0x4003;
enum uint GL_LIGHT4 = 0x4004;
enum uint GL_LIGHT5 = 0x4005;
enum uint GL_LIGHT6 = 0x4006;
enum uint GL_LIGHT7 = 0x4007;
enum uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
enum uint GL_TEXTURE_BINDING_3D = 0x806A;
enum uint GL_PACK_SKIP_IMAGES = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum uint GL_TEXTURE_3D = 0x806F;
enum uint GL_PROXY_TEXTURE_3D = 0x8070;
enum uint GL_TEXTURE_DEPTH = 0x8071;
enum uint GL_TEXTURE_WRAP_R = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
enum uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
enum uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
enum uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
enum uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum uint GL_BGR = 0x80E0;
enum uint GL_BGRA = 0x80E1;
enum uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum uint GL_CLAMP_TO_EDGE = 0x812F;
enum uint GL_TEXTURE_MIN_LOD = 0x813A;
enum uint GL_TEXTURE_MAX_LOD = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL = 0x813D;
enum uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
enum uint GL_RESCALE_NORMAL = 0x803A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
enum uint GL_SINGLE_COLOR = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
enum uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
enum uint GL_TEXTURE0 = 0x84C0;
enum uint GL_TEXTURE1 = 0x84C1;
enum uint GL_TEXTURE2 = 0x84C2;
enum uint GL_TEXTURE3 = 0x84C3;
enum uint GL_TEXTURE4 = 0x84C4;
enum uint GL_TEXTURE5 = 0x84C5;
enum uint GL_TEXTURE6 = 0x84C6;
enum uint GL_TEXTURE7 = 0x84C7;
enum uint GL_TEXTURE8 = 0x84C8;
enum uint GL_TEXTURE9 = 0x84C9;
enum uint GL_TEXTURE10 = 0x84CA;
enum uint GL_TEXTURE11 = 0x84CB;
enum uint GL_TEXTURE12 = 0x84CC;
enum uint GL_TEXTURE13 = 0x84CD;
enum uint GL_TEXTURE14 = 0x84CE;
enum uint GL_TEXTURE15 = 0x84CF;
enum uint GL_TEXTURE16 = 0x84D0;
enum uint GL_TEXTURE17 = 0x84D1;
enum uint GL_TEXTURE18 = 0x84D2;
enum uint GL_TEXTURE19 = 0x84D3;
enum uint GL_TEXTURE20 = 0x84D4;
enum uint GL_TEXTURE21 = 0x84D5;
enum uint GL_TEXTURE22 = 0x84D6;
enum uint GL_TEXTURE23 = 0x84D7;
enum uint GL_TEXTURE24 = 0x84D8;
enum uint GL_TEXTURE25 = 0x84D9;
enum uint GL_TEXTURE26 = 0x84DA;
enum uint GL_TEXTURE27 = 0x84DB;
enum uint GL_TEXTURE28 = 0x84DC;
enum uint GL_TEXTURE29 = 0x84DD;
enum uint GL_TEXTURE30 = 0x84DE;
enum uint GL_TEXTURE31 = 0x84DF;
enum uint GL_ACTIVE_TEXTURE = 0x84E0;
enum uint GL_MULTISAMPLE = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
enum uint GL_SAMPLE_COVERAGE = 0x80A0;
enum uint GL_SAMPLE_BUFFERS = 0x80A8;
enum uint GL_SAMPLES = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum uint GL_TEXTURE_CUBE_MAP = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum uint GL_COMPRESSED_RGB = 0x84ED;
enum uint GL_COMPRESSED_RGBA = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum uint GL_CLAMP_TO_BORDER = 0x812D;
enum uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS = 0x84E2;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
enum uint GL_MULTISAMPLE_BIT = 0x20000000;
enum uint GL_NORMAL_MAP = 0x8511;
enum uint GL_REFLECTION_MAP = 0x8512;
enum uint GL_COMPRESSED_ALPHA = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY = 0x84EC;
enum uint GL_COMBINE = 0x8570;
enum uint GL_COMBINE_RGB = 0x8571;
enum uint GL_COMBINE_ALPHA = 0x8572;
enum uint GL_SOURCE0_RGB = 0x8580;
enum uint GL_SOURCE1_RGB = 0x8581;
enum uint GL_SOURCE2_RGB = 0x8582;
enum uint GL_SOURCE0_ALPHA = 0x8588;
enum uint GL_SOURCE1_ALPHA = 0x8589;
enum uint GL_SOURCE2_ALPHA = 0x858A;
enum uint GL_OPERAND0_RGB = 0x8590;
enum uint GL_OPERAND1_RGB = 0x8591;
enum uint GL_OPERAND2_RGB = 0x8592;
enum uint GL_OPERAND0_ALPHA = 0x8598;
enum uint GL_OPERAND1_ALPHA = 0x8599;
enum uint GL_OPERAND2_ALPHA = 0x859A;
enum uint GL_RGB_SCALE = 0x8573;
enum uint GL_ADD_SIGNED = 0x8574;
enum uint GL_INTERPOLATE = 0x8575;
enum uint GL_SUBTRACT = 0x84E7;
enum uint GL_CONSTANT = 0x8576;
enum uint GL_PRIMARY_COLOR = 0x8577;
enum uint GL_PREVIOUS = 0x8578;
enum uint GL_DOT3_RGB = 0x86AE;
enum uint GL_DOT3_RGBA = 0x86AF;
enum uint GL_BLEND_DST_RGB = 0x80C8;
enum uint GL_BLEND_SRC_RGB = 0x80C9;
enum uint GL_BLEND_DST_ALPHA = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA = 0x80CB;
enum uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
enum uint GL_DEPTH_COMPONENT16 = 0x81A5;
enum uint GL_DEPTH_COMPONENT24 = 0x81A6;
enum uint GL_DEPTH_COMPONENT32 = 0x81A7;
enum uint GL_MIRRORED_REPEAT = 0x8370;
enum uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum uint GL_TEXTURE_LOD_BIAS = 0x8501;
enum uint GL_INCR_WRAP = 0x8507;
enum uint GL_DECR_WRAP = 0x8508;
enum uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum uint GL_TEXTURE_COMPARE_MODE = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
enum uint GL_POINT_SIZE_MIN = 0x8126;
enum uint GL_POINT_SIZE_MAX = 0x8127;
enum uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
enum uint GL_GENERATE_MIPMAP = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT = 0x8192;
enum uint GL_FOG_COORDINATE_SOURCE = 0x8450;
enum uint GL_FOG_COORDINATE = 0x8451;
enum uint GL_FRAGMENT_DEPTH = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY = 0x8457;
enum uint GL_COLOR_SUM = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY = 0x845E;
enum uint GL_TEXTURE_FILTER_CONTROL = 0x8500;
enum uint GL_DEPTH_TEXTURE_MODE = 0x884B;
enum uint GL_COMPARE_R_TO_TEXTURE = 0x884E;
enum uint GL_FUNC_ADD = 0x8006;
enum uint GL_FUNC_SUBTRACT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
enum uint GL_MIN = 0x8007;
enum uint GL_MAX = 0x8008;
enum uint GL_CONSTANT_COLOR = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum uint GL_CONSTANT_ALPHA = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
enum uint GL_BUFFER_SIZE = 0x8764;
enum uint GL_BUFFER_USAGE = 0x8765;
enum uint GL_QUERY_COUNTER_BITS = 0x8864;
enum uint GL_CURRENT_QUERY = 0x8865;
enum uint GL_QUERY_RESULT = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum uint GL_ARRAY_BUFFER = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum uint GL_READ_ONLY = 0x88B8;
enum uint GL_WRITE_ONLY = 0x88B9;
enum uint GL_READ_WRITE = 0x88BA;
enum uint GL_BUFFER_ACCESS = 0x88BB;
enum uint GL_BUFFER_MAPPED = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER = 0x88BD;
enum uint GL_STREAM_DRAW = 0x88E0;
enum uint GL_STREAM_READ = 0x88E1;
enum uint GL_STREAM_COPY = 0x88E2;
enum uint GL_STATIC_DRAW = 0x88E4;
enum uint GL_STATIC_READ = 0x88E5;
enum uint GL_STATIC_COPY = 0x88E6;
enum uint GL_DYNAMIC_DRAW = 0x88E8;
enum uint GL_DYNAMIC_READ = 0x88E9;
enum uint GL_DYNAMIC_COPY = 0x88EA;
enum uint GL_SAMPLES_PASSED = 0x8914;
enum uint GL_SRC1_ALPHA = 0x8589;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
enum uint GL_FOG_COORD_SRC = 0x8450;
enum uint GL_FOG_COORD = 0x8451;
enum uint GL_CURRENT_FOG_COORD = 0x8453;
enum uint GL_FOG_COORD_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORD_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORD_ARRAY = 0x8457;
enum uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_SRC0_RGB = 0x8580;
enum uint GL_SRC1_RGB = 0x8581;
enum uint GL_SRC2_RGB = 0x8582;
enum uint GL_SRC0_ALPHA = 0x8588;
enum uint GL_SRC2_ALPHA = 0x858A;
enum uint GL_BLEND_EQUATION_RGB = 0x8009;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum uint GL_STENCIL_BACK_FUNC = 0x8800;
enum uint GL_STENCIL_BACK_FAIL = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum uint GL_MAX_DRAW_BUFFERS = 0x8824;
enum uint GL_DRAW_BUFFER0 = 0x8825;
enum uint GL_DRAW_BUFFER1 = 0x8826;
enum uint GL_DRAW_BUFFER2 = 0x8827;
enum uint GL_DRAW_BUFFER3 = 0x8828;
enum uint GL_DRAW_BUFFER4 = 0x8829;
enum uint GL_DRAW_BUFFER5 = 0x882A;
enum uint GL_DRAW_BUFFER6 = 0x882B;
enum uint GL_DRAW_BUFFER7 = 0x882C;
enum uint GL_DRAW_BUFFER8 = 0x882D;
enum uint GL_DRAW_BUFFER9 = 0x882E;
enum uint GL_DRAW_BUFFER10 = 0x882F;
enum uint GL_DRAW_BUFFER11 = 0x8830;
enum uint GL_DRAW_BUFFER12 = 0x8831;
enum uint GL_DRAW_BUFFER13 = 0x8832;
enum uint GL_DRAW_BUFFER14 = 0x8833;
enum uint GL_DRAW_BUFFER15 = 0x8834;
enum uint GL_BLEND_EQUATION_ALPHA = 0x883D;
enum uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum uint GL_FRAGMENT_SHADER = 0x8B30;
enum uint GL_VERTEX_SHADER = 0x8B31;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum uint GL_SHADER_TYPE = 0x8B4F;
enum uint GL_FLOAT_VEC2 = 0x8B50;
enum uint GL_FLOAT_VEC3 = 0x8B51;
enum uint GL_FLOAT_VEC4 = 0x8B52;
enum uint GL_INT_VEC2 = 0x8B53;
enum uint GL_INT_VEC3 = 0x8B54;
enum uint GL_INT_VEC4 = 0x8B55;
enum uint GL_BOOL = 0x8B56;
enum uint GL_BOOL_VEC2 = 0x8B57;
enum uint GL_BOOL_VEC3 = 0x8B58;
enum uint GL_BOOL_VEC4 = 0x8B59;
enum uint GL_FLOAT_MAT2 = 0x8B5A;
enum uint GL_FLOAT_MAT3 = 0x8B5B;
enum uint GL_FLOAT_MAT4 = 0x8B5C;
enum uint GL_SAMPLER_1D = 0x8B5D;
enum uint GL_SAMPLER_2D = 0x8B5E;
enum uint GL_SAMPLER_3D = 0x8B5F;
enum uint GL_SAMPLER_CUBE = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW = 0x8B62;
enum uint GL_DELETE_STATUS = 0x8B80;
enum uint GL_COMPILE_STATUS = 0x8B81;
enum uint GL_LINK_STATUS = 0x8B82;
enum uint GL_VALIDATE_STATUS = 0x8B83;
enum uint GL_INFO_LOG_LENGTH = 0x8B84;
enum uint GL_ATTACHED_SHADERS = 0x8B85;
enum uint GL_ACTIVE_UNIFORMS = 0x8B86;
enum uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum uint GL_CURRENT_PROGRAM = 0x8B8D;
enum uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
enum uint GL_LOWER_LEFT = 0x8CA1;
enum uint GL_UPPER_LEFT = 0x8CA2;
enum uint GL_STENCIL_BACK_REF = 0x8CA3;
enum uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
enum uint GL_POINT_SPRITE = 0x8861;
enum uint GL_COORD_REPLACE = 0x8862;
enum uint GL_MAX_TEXTURE_COORDS = 0x8871;
enum uint GL_PIXEL_PACK_BUFFER = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum uint GL_FLOAT_MAT2x3 = 0x8B65;
enum uint GL_FLOAT_MAT2x4 = 0x8B66;
enum uint GL_FLOAT_MAT3x2 = 0x8B67;
enum uint GL_FLOAT_MAT3x4 = 0x8B68;
enum uint GL_FLOAT_MAT4x2 = 0x8B69;
enum uint GL_FLOAT_MAT4x3 = 0x8B6A;
enum uint GL_SRGB = 0x8C40;
enum uint GL_SRGB8 = 0x8C41;
enum uint GL_SRGB_ALPHA = 0x8C42;
enum uint GL_SRGB8_ALPHA8 = 0x8C43;
enum uint GL_COMPRESSED_SRGB = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
enum uint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
enum uint GL_SLUMINANCE_ALPHA = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
enum uint GL_SLUMINANCE = 0x8C46;
enum uint GL_SLUMINANCE8 = 0x8C47;
enum uint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
enum uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum uint GL_CLIP_DISTANCE0 = 0x3000;
enum uint GL_CLIP_DISTANCE1 = 0x3001;
enum uint GL_CLIP_DISTANCE2 = 0x3002;
enum uint GL_CLIP_DISTANCE3 = 0x3003;
enum uint GL_CLIP_DISTANCE4 = 0x3004;
enum uint GL_CLIP_DISTANCE5 = 0x3005;
enum uint GL_CLIP_DISTANCE6 = 0x3006;
enum uint GL_CLIP_DISTANCE7 = 0x3007;
enum uint GL_MAX_CLIP_DISTANCES = 0x0D32;
enum uint GL_MAJOR_VERSION = 0x821B;
enum uint GL_MINOR_VERSION = 0x821C;
enum uint GL_NUM_EXTENSIONS = 0x821D;
enum uint GL_CONTEXT_FLAGS = 0x821E;
enum uint GL_COMPRESSED_RED = 0x8225;
enum uint GL_COMPRESSED_RG = 0x8226;
enum uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
enum uint GL_RGBA32F = 0x8814;
enum uint GL_RGB32F = 0x8815;
enum uint GL_RGBA16F = 0x881A;
enum uint GL_RGB16F = 0x881B;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum uint GL_CLAMP_READ_COLOR = 0x891C;
enum uint GL_FIXED_ONLY = 0x891D;
enum uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum uint GL_TEXTURE_1D_ARRAY = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum uint GL_R11F_G11F_B10F = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum uint GL_RGB9_E5 = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum uint GL_PRIMITIVES_GENERATED = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum uint GL_RASTERIZER_DISCARD = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum uint GL_RGBA32UI = 0x8D70;
enum uint GL_RGB32UI = 0x8D71;
enum uint GL_RGBA16UI = 0x8D76;
enum uint GL_RGB16UI = 0x8D77;
enum uint GL_RGBA8UI = 0x8D7C;
enum uint GL_RGB8UI = 0x8D7D;
enum uint GL_RGBA32I = 0x8D82;
enum uint GL_RGB32I = 0x8D83;
enum uint GL_RGBA16I = 0x8D88;
enum uint GL_RGB16I = 0x8D89;
enum uint GL_RGBA8I = 0x8D8E;
enum uint GL_RGB8I = 0x8D8F;
enum uint GL_RED_INTEGER = 0x8D94;
enum uint GL_GREEN_INTEGER = 0x8D95;
enum uint GL_BLUE_INTEGER = 0x8D96;
enum uint GL_RGB_INTEGER = 0x8D98;
enum uint GL_RGBA_INTEGER = 0x8D99;
enum uint GL_BGR_INTEGER = 0x8D9A;
enum uint GL_BGRA_INTEGER = 0x8D9B;
enum uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum uint GL_INT_SAMPLER_1D = 0x8DC9;
enum uint GL_INT_SAMPLER_2D = 0x8DCA;
enum uint GL_INT_SAMPLER_3D = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE = 0x8DCC;
enum uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum uint GL_QUERY_WAIT = 0x8E13;
enum uint GL_QUERY_NO_WAIT = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
enum uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum uint GL_BUFFER_MAP_LENGTH = 0x9120;
enum uint GL_BUFFER_MAP_OFFSET = 0x9121;
enum uint GL_DEPTH_COMPONENT32F = 0x8CAC;
enum uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum uint GL_DEPTH_STENCIL = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8 = 0x84FA;
enum uint GL_DEPTH24_STENCIL8 = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum uint GL_TEXTURE_RED_TYPE = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED = 0x8C17;
enum uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING = 0x8CA7;
enum uint GL_READ_FRAMEBUFFER = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13 = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum uint GL_COLOR_ATTACHMENT16 = 0x8CF0;
enum uint GL_COLOR_ATTACHMENT17 = 0x8CF1;
enum uint GL_COLOR_ATTACHMENT18 = 0x8CF2;
enum uint GL_COLOR_ATTACHMENT19 = 0x8CF3;
enum uint GL_COLOR_ATTACHMENT20 = 0x8CF4;
enum uint GL_COLOR_ATTACHMENT21 = 0x8CF5;
enum uint GL_COLOR_ATTACHMENT22 = 0x8CF6;
enum uint GL_COLOR_ATTACHMENT23 = 0x8CF7;
enum uint GL_COLOR_ATTACHMENT24 = 0x8CF8;
enum uint GL_COLOR_ATTACHMENT25 = 0x8CF9;
enum uint GL_COLOR_ATTACHMENT26 = 0x8CFA;
enum uint GL_COLOR_ATTACHMENT27 = 0x8CFB;
enum uint GL_COLOR_ATTACHMENT28 = 0x8CFC;
enum uint GL_COLOR_ATTACHMENT29 = 0x8CFD;
enum uint GL_COLOR_ATTACHMENT30 = 0x8CFE;
enum uint GL_COLOR_ATTACHMENT31 = 0x8CFF;
enum uint GL_DEPTH_ATTACHMENT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT = 0x8D20;
enum uint GL_FRAMEBUFFER = 0x8D40;
enum uint GL_RENDERBUFFER = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum uint GL_STENCIL_INDEX1 = 0x8D46;
enum uint GL_STENCIL_INDEX4 = 0x8D47;
enum uint GL_STENCIL_INDEX8 = 0x8D48;
enum uint GL_STENCIL_INDEX16 = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum uint GL_MAX_SAMPLES = 0x8D57;
enum uint GL_INDEX = 0x8222;
enum uint GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
enum uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
enum uint GL_HALF_FLOAT = 0x140B;
enum uint GL_MAP_READ_BIT = 0x0001;
enum uint GL_MAP_WRITE_BIT = 0x0002;
enum uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
enum uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
enum uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
enum uint GL_RG = 0x8227;
enum uint GL_RG_INTEGER = 0x8228;
enum uint GL_R8 = 0x8229;
enum uint GL_R16 = 0x822A;
enum uint GL_RG8 = 0x822B;
enum uint GL_RG16 = 0x822C;
enum uint GL_R16F = 0x822D;
enum uint GL_R32F = 0x822E;
enum uint GL_RG16F = 0x822F;
enum uint GL_RG32F = 0x8230;
enum uint GL_R8I = 0x8231;
enum uint GL_R8UI = 0x8232;
enum uint GL_R16I = 0x8233;
enum uint GL_R16UI = 0x8234;
enum uint GL_R32I = 0x8235;
enum uint GL_R32UI = 0x8236;
enum uint GL_RG8I = 0x8237;
enum uint GL_RG8UI = 0x8238;
enum uint GL_RG16I = 0x8239;
enum uint GL_RG16UI = 0x823A;
enum uint GL_RG32I = 0x823B;
enum uint GL_RG32UI = 0x823C;
enum uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
enum uint GL_CLAMP_VERTEX_COLOR = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR = 0x891B;
enum uint GL_ALPHA_INTEGER = 0x8D97;
enum uint GL_SAMPLER_2D_RECT = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
enum uint GL_SAMPLER_BUFFER = 0x8DC2;
enum uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
enum uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
enum uint GL_TEXTURE_BUFFER = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
enum uint GL_TEXTURE_RECTANGLE = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
enum uint GL_R8_SNORM = 0x8F94;
enum uint GL_RG8_SNORM = 0x8F95;
enum uint GL_RGB8_SNORM = 0x8F96;
enum uint GL_RGBA8_SNORM = 0x8F97;
enum uint GL_R16_SNORM = 0x8F98;
enum uint GL_RG16_SNORM = 0x8F99;
enum uint GL_RGB16_SNORM = 0x8F9A;
enum uint GL_RGBA16_SNORM = 0x8F9B;
enum uint GL_SIGNED_NORMALIZED = 0x8F9C;
enum uint GL_PRIMITIVE_RESTART = 0x8F9D;
enum uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
enum uint GL_COPY_READ_BUFFER = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER = 0x8F37;
enum uint GL_UNIFORM_BUFFER = 0x8A11;
enum uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum uint GL_UNIFORM_BUFFER_START = 0x8A29;
enum uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
enum uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
enum uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum uint GL_UNIFORM_TYPE = 0x8A37;
enum uint GL_UNIFORM_SIZE = 0x8A38;
enum uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum uint GL_UNIFORM_OFFSET = 0x8A3B;
enum uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
enum uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
enum uint GL_LINES_ADJACENCY = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
enum uint GL_GEOMETRY_SHADER = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
enum uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
enum uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
enum uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
enum uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
enum uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum uint GL_CONTEXT_PROFILE_MASK = 0x9126;
enum uint GL_DEPTH_CLAMP = 0x864F;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
enum uint GL_PROVOKING_VERTEX = 0x8E4F;
enum uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
enum uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum uint GL_OBJECT_TYPE = 0x9112;
enum uint GL_SYNC_CONDITION = 0x9113;
enum uint GL_SYNC_STATUS = 0x9114;
enum uint GL_SYNC_FLAGS = 0x9115;
enum uint GL_SYNC_FENCE = 0x9116;
enum uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum uint GL_UNSIGNALED = 0x9118;
enum uint GL_SIGNALED = 0x9119;
enum uint GL_ALREADY_SIGNALED = 0x911A;
enum uint GL_TIMEOUT_EXPIRED = 0x911B;
enum uint GL_CONDITION_SATISFIED = 0x911C;
enum uint GL_WAIT_FAILED = 0x911D;
enum uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum uint GL_SAMPLE_POSITION = 0x8E50;
enum uint GL_SAMPLE_MASK = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE = 0x8E52;
enum uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
enum uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
enum uint GL_TEXTURE_SAMPLES = 0x9106;
enum uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
enum uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum uint GL_MAX_INTEGER_SAMPLES = 0x9110;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
enum uint GL_SRC1_COLOR = 0x88F9;
enum uint GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
enum uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
enum uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
enum uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
enum uint GL_SAMPLER_BINDING = 0x8919;
enum uint GL_RGB10_A2UI = 0x906F;
enum uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
enum uint GL_TIME_ELAPSED = 0x88BF;
enum uint GL_TIMESTAMP = 0x8E28;
enum uint GL_INT_2_10_10_10_REV = 0x8D9F;
enum uint GL_SAMPLE_SHADING = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
enum uint GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
enum uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
enum uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
enum uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
enum uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
enum uint GL_MAX_VERTEX_STREAMS = 0x8E71;
enum uint GL_DOUBLE_VEC2 = 0x8FFC;
enum uint GL_DOUBLE_VEC3 = 0x8FFD;
enum uint GL_DOUBLE_VEC4 = 0x8FFE;
enum uint GL_DOUBLE_MAT2 = 0x8F46;
enum uint GL_DOUBLE_MAT3 = 0x8F47;
enum uint GL_DOUBLE_MAT4 = 0x8F48;
enum uint GL_DOUBLE_MAT2x3 = 0x8F49;
enum uint GL_DOUBLE_MAT2x4 = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2 = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4 = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2 = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3 = 0x8F4E;
enum uint GL_ACTIVE_SUBROUTINES = 0x8DE5;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
enum uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
enum uint GL_MAX_SUBROUTINES = 0x8DE7;
enum uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
enum uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
enum uint GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
enum uint GL_PATCHES = 0x000E;
enum uint GL_PATCH_VERTICES = 0x8E72;
enum uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
enum uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
enum uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
enum uint GL_TESS_GEN_MODE = 0x8E76;
enum uint GL_TESS_GEN_SPACING = 0x8E77;
enum uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
enum uint GL_TESS_GEN_POINT_MODE = 0x8E79;
enum uint GL_ISOLINES = 0x8E7A;
enum uint GL_FRACTIONAL_ODD = 0x8E7B;
enum uint GL_FRACTIONAL_EVEN = 0x8E7C;
enum uint GL_MAX_PATCH_VERTICES = 0x8E7D;
enum uint GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
enum uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
enum uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
enum uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
enum uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
enum uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
enum uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
enum uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
enum uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
enum uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
enum uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
enum uint GL_TESS_EVALUATION_SHADER = 0x8E87;
enum uint GL_TESS_CONTROL_SHADER = 0x8E88;
enum uint GL_TRANSFORM_FEEDBACK = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
enum uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
enum uint GL_FIXED = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
enum uint GL_LOW_FLOAT = 0x8DF0;
enum uint GL_MEDIUM_FLOAT = 0x8DF1;
enum uint GL_HIGH_FLOAT = 0x8DF2;
enum uint GL_LOW_INT = 0x8DF3;
enum uint GL_MEDIUM_INT = 0x8DF4;
enum uint GL_HIGH_INT = 0x8DF5;
enum uint GL_SHADER_COMPILER = 0x8DFA;
enum uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
enum uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
enum uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
enum uint GL_MAX_VARYING_VECTORS = 0x8DFC;
enum uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
enum uint GL_RGB565 = 0x8D62;
enum uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
enum uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
enum uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
enum uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
enum uint GL_VERTEX_SHADER_BIT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT = 0x00000002;
enum uint GL_GEOMETRY_SHADER_BIT = 0x00000004;
enum uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
enum uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
enum uint GL_ALL_SHADER_BITS = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE = 0x8258;
enum uint GL_ACTIVE_PROGRAM = 0x8259;
enum uint GL_PROGRAM_PIPELINE_BINDING = 0x825A;
enum uint GL_MAX_VIEWPORTS = 0x825B;
enum uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
enum uint GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
enum uint GL_LAYER_PROVOKING_VERTEX = 0x825E;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
enum uint GL_UNDEFINED_VERTEX = 0x8260;
enum uint GL_COPY_READ_BUFFER_BINDING = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
enum uint GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
enum uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
enum uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
enum uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
enum uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
enum uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
enum uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
enum uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
enum uint GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
enum uint GL_NUM_SAMPLE_COUNTS = 0x9380;
enum uint GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
enum uint GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
enum uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
enum uint GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
enum uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
enum uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
enum uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
enum uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
enum uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
enum uint GL_MAX_IMAGE_UNITS = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS = 0x8F3E;
enum uint GL_IMAGE_1D = 0x904C;
enum uint GL_IMAGE_2D = 0x904D;
enum uint GL_IMAGE_3D = 0x904E;
enum uint GL_IMAGE_2D_RECT = 0x904F;
enum uint GL_IMAGE_CUBE = 0x9050;
enum uint GL_IMAGE_BUFFER = 0x9051;
enum uint GL_IMAGE_1D_ARRAY = 0x9052;
enum uint GL_IMAGE_2D_ARRAY = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
enum uint GL_INT_IMAGE_1D = 0x9057;
enum uint GL_INT_IMAGE_2D = 0x9058;
enum uint GL_INT_IMAGE_3D = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT = 0x905A;
enum uint GL_INT_IMAGE_CUBE = 0x905B;
enum uint GL_INT_IMAGE_BUFFER = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT = 0x906E;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
enum uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
enum uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
enum uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
enum uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
enum uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
enum uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
enum uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
enum uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
enum uint GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
enum uint GL_COMPRESSED_RGB8_ETC2 = 0x9274;
enum uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
enum uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
enum uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
enum uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
enum uint GL_COMPRESSED_R11_EAC = 0x9270;
enum uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
enum uint GL_COMPRESSED_RG11_EAC = 0x9272;
enum uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
enum uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
enum uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
enum uint GL_MAX_ELEMENT_INDEX = 0x8D6B;
enum uint GL_COMPUTE_SHADER = 0x91B9;
enum uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
enum uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
enum uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
enum uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
enum uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
enum uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
enum uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
enum uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
enum uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
enum uint GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
enum uint GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
enum uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
enum uint GL_COMPUTE_SHADER_BIT = 0x00000020;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
enum uint GL_DEBUG_SOURCE_API = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW = 0x9148;
enum uint GL_DEBUG_TYPE_MARKER = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
enum uint GL_BUFFER = 0x82E0;
enum uint GL_SHADER = 0x82E1;
enum uint GL_PROGRAM = 0x82E2;
enum uint GL_QUERY = 0x82E3;
enum uint GL_PROGRAM_PIPELINE = 0x82E4;
enum uint GL_SAMPLER = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH = 0x82E8;
enum uint GL_DEBUG_OUTPUT = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
enum uint GL_MAX_UNIFORM_LOCATIONS = 0x826E;
enum uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
enum uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
enum uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
enum uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
enum uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
enum uint GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
enum uint GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
enum uint GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
enum uint GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
enum uint GL_INTERNALFORMAT_SUPPORTED = 0x826F;
enum uint GL_INTERNALFORMAT_PREFERRED = 0x8270;
enum uint GL_INTERNALFORMAT_RED_SIZE = 0x8271;
enum uint GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
enum uint GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
enum uint GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
enum uint GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
enum uint GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
enum uint GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
enum uint GL_INTERNALFORMAT_RED_TYPE = 0x8278;
enum uint GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
enum uint GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
enum uint GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
enum uint GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
enum uint GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
enum uint GL_MAX_WIDTH = 0x827E;
enum uint GL_MAX_HEIGHT = 0x827F;
enum uint GL_MAX_DEPTH = 0x8280;
enum uint GL_MAX_LAYERS = 0x8281;
enum uint GL_MAX_COMBINED_DIMENSIONS = 0x8282;
enum uint GL_COLOR_COMPONENTS = 0x8283;
enum uint GL_DEPTH_COMPONENTS = 0x8284;
enum uint GL_STENCIL_COMPONENTS = 0x8285;
enum uint GL_COLOR_RENDERABLE = 0x8286;
enum uint GL_DEPTH_RENDERABLE = 0x8287;
enum uint GL_STENCIL_RENDERABLE = 0x8288;
enum uint GL_FRAMEBUFFER_RENDERABLE = 0x8289;
enum uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
enum uint GL_FRAMEBUFFER_BLEND = 0x828B;
enum uint GL_READ_PIXELS = 0x828C;
enum uint GL_READ_PIXELS_FORMAT = 0x828D;
enum uint GL_READ_PIXELS_TYPE = 0x828E;
enum uint GL_TEXTURE_IMAGE_FORMAT = 0x828F;
enum uint GL_TEXTURE_IMAGE_TYPE = 0x8290;
enum uint GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
enum uint GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
enum uint GL_MIPMAP = 0x8293;
enum uint GL_MANUAL_GENERATE_MIPMAP = 0x8294;
enum uint GL_AUTO_GENERATE_MIPMAP = 0x8295;
enum uint GL_COLOR_ENCODING = 0x8296;
enum uint GL_SRGB_READ = 0x8297;
enum uint GL_SRGB_WRITE = 0x8298;
enum uint GL_FILTER = 0x829A;
enum uint GL_VERTEX_TEXTURE = 0x829B;
enum uint GL_TESS_CONTROL_TEXTURE = 0x829C;
enum uint GL_TESS_EVALUATION_TEXTURE = 0x829D;
enum uint GL_GEOMETRY_TEXTURE = 0x829E;
enum uint GL_FRAGMENT_TEXTURE = 0x829F;
enum uint GL_COMPUTE_TEXTURE = 0x82A0;
enum uint GL_TEXTURE_SHADOW = 0x82A1;
enum uint GL_TEXTURE_GATHER = 0x82A2;
enum uint GL_TEXTURE_GATHER_SHADOW = 0x82A3;
enum uint GL_SHADER_IMAGE_LOAD = 0x82A4;
enum uint GL_SHADER_IMAGE_STORE = 0x82A5;
enum uint GL_SHADER_IMAGE_ATOMIC = 0x82A6;
enum uint GL_IMAGE_TEXEL_SIZE = 0x82A7;
enum uint GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
enum uint GL_IMAGE_PIXEL_FORMAT = 0x82A9;
enum uint GL_IMAGE_PIXEL_TYPE = 0x82AA;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
enum uint GL_CLEAR_BUFFER = 0x82B4;
enum uint GL_TEXTURE_VIEW = 0x82B5;
enum uint GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
enum uint GL_FULL_SUPPORT = 0x82B7;
enum uint GL_CAVEAT_SUPPORT = 0x82B8;
enum uint GL_IMAGE_CLASS_4_X_32 = 0x82B9;
enum uint GL_IMAGE_CLASS_2_X_32 = 0x82BA;
enum uint GL_IMAGE_CLASS_1_X_32 = 0x82BB;
enum uint GL_IMAGE_CLASS_4_X_16 = 0x82BC;
enum uint GL_IMAGE_CLASS_2_X_16 = 0x82BD;
enum uint GL_IMAGE_CLASS_1_X_16 = 0x82BE;
enum uint GL_IMAGE_CLASS_4_X_8 = 0x82BF;
enum uint GL_IMAGE_CLASS_2_X_8 = 0x82C0;
enum uint GL_IMAGE_CLASS_1_X_8 = 0x82C1;
enum uint GL_IMAGE_CLASS_11_11_10 = 0x82C2;
enum uint GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
enum uint GL_VIEW_CLASS_128_BITS = 0x82C4;
enum uint GL_VIEW_CLASS_96_BITS = 0x82C5;
enum uint GL_VIEW_CLASS_64_BITS = 0x82C6;
enum uint GL_VIEW_CLASS_48_BITS = 0x82C7;
enum uint GL_VIEW_CLASS_32_BITS = 0x82C8;
enum uint GL_VIEW_CLASS_24_BITS = 0x82C9;
enum uint GL_VIEW_CLASS_16_BITS = 0x82CA;
enum uint GL_VIEW_CLASS_8_BITS = 0x82CB;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
enum uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
enum uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
enum uint GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
enum uint GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
enum uint GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
enum uint GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
enum uint GL_UNIFORM = 0x92E1;
enum uint GL_UNIFORM_BLOCK = 0x92E2;
enum uint GL_PROGRAM_INPUT = 0x92E3;
enum uint GL_PROGRAM_OUTPUT = 0x92E4;
enum uint GL_BUFFER_VARIABLE = 0x92E5;
enum uint GL_SHADER_STORAGE_BLOCK = 0x92E6;
enum uint GL_VERTEX_SUBROUTINE = 0x92E8;
enum uint GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
enum uint GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
enum uint GL_GEOMETRY_SUBROUTINE = 0x92EB;
enum uint GL_FRAGMENT_SUBROUTINE = 0x92EC;
enum uint GL_COMPUTE_SUBROUTINE = 0x92ED;
enum uint GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
enum uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
enum uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
enum uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
enum uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
enum uint GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
enum uint GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
enum uint GL_ACTIVE_RESOURCES = 0x92F5;
enum uint GL_MAX_NAME_LENGTH = 0x92F6;
enum uint GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
enum uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
enum uint GL_NAME_LENGTH = 0x92F9;
enum uint GL_TYPE = 0x92FA;
enum uint GL_ARRAY_SIZE = 0x92FB;
enum uint GL_OFFSET = 0x92FC;
enum uint GL_BLOCK_INDEX = 0x92FD;
enum uint GL_ARRAY_STRIDE = 0x92FE;
enum uint GL_MATRIX_STRIDE = 0x92FF;
enum uint GL_IS_ROW_MAJOR = 0x9300;
enum uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
enum uint GL_BUFFER_BINDING = 0x9302;
enum uint GL_BUFFER_DATA_SIZE = 0x9303;
enum uint GL_NUM_ACTIVE_VARIABLES = 0x9304;
enum uint GL_ACTIVE_VARIABLES = 0x9305;
enum uint GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
enum uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
enum uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
enum uint GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
enum uint GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
enum uint GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
enum uint GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
enum uint GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
enum uint GL_LOCATION = 0x930E;
enum uint GL_LOCATION_INDEX = 0x930F;
enum uint GL_IS_PER_PATCH = 0x92E7;
enum uint GL_SHADER_STORAGE_BUFFER = 0x90D2;
enum uint GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
enum uint GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
enum uint GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
enum uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
enum uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
enum uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
enum uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
enum uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
enum uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
enum uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
enum uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
enum uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
enum uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
enum uint GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
enum uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
enum uint GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
enum uint GL_TEXTURE_BUFFER_OFFSET = 0x919D;
enum uint GL_TEXTURE_BUFFER_SIZE = 0x919E;
enum uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
enum uint GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
enum uint GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
enum uint GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
enum uint GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
enum uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
enum uint GL_VERTEX_ATTRIB_BINDING = 0x82D4;
enum uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
enum uint GL_VERTEX_BINDING_DIVISOR = 0x82D6;
enum uint GL_VERTEX_BINDING_OFFSET = 0x82D7;
enum uint GL_VERTEX_BINDING_STRIDE = 0x82D8;
enum uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
enum uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
enum uint GL_VERTEX_BINDING_BUFFER = 0x8F4F;
enum uint GL_DISPLAY_LIST = 0x82E7;
enum uint GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
enum uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
enum uint GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
enum uint GL_MAP_PERSISTENT_BIT = 0x0040;
enum uint GL_MAP_COHERENT_BIT = 0x0080;
enum uint GL_DYNAMIC_STORAGE_BIT = 0x0100;
enum uint GL_CLIENT_STORAGE_BIT = 0x0200;
enum uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
enum uint GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
enum uint GL_BUFFER_STORAGE_FLAGS = 0x8220;
enum uint GL_CLEAR_TEXTURE = 0x9365;
enum uint GL_LOCATION_COMPONENT = 0x934A;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
enum uint GL_QUERY_BUFFER = 0x9192;
enum uint GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
enum uint GL_QUERY_BUFFER_BINDING = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT = 0x9194;
enum uint GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
enum uint GL_CONTEXT_LOST = 0x0507;
enum uint GL_NEGATIVE_ONE_TO_ONE = 0x935E;
enum uint GL_ZERO_TO_ONE = 0x935F;
enum uint GL_CLIP_ORIGIN = 0x935C;
enum uint GL_CLIP_DEPTH_MODE = 0x935D;
enum uint GL_QUERY_WAIT_INVERTED = 0x8E17;
enum uint GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
enum uint GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
enum uint GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
enum uint GL_MAX_CULL_DISTANCES = 0x82F9;
enum uint GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
enum uint GL_TEXTURE_TARGET = 0x1006;
enum uint GL_QUERY_TARGET = 0x82EA;
enum uint GL_GUILTY_CONTEXT_RESET = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
enum uint GL_LOSE_CONTEXT_ON_RESET = 0x8252;
enum uint GL_NO_RESET_NOTIFICATION = 0x8261;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
enum uint GL_MULTISAMPLE_3DFX = 0x86B2;
enum uint GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
enum uint GL_SAMPLES_3DFX = 0x86B4;
enum uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
enum uint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
enum uint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
enum uint GL_FACTOR_MIN_AMD = 0x901C;
enum uint GL_FACTOR_MAX_AMD = 0x901D;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
enum uint GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
enum uint GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
enum uint GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
enum uint GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
enum uint GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
enum uint GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
enum uint GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
enum uint GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
enum uint GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
enum uint GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
enum uint GL_INT64_NV = 0x140E;
enum uint GL_UNSIGNED_INT64_NV = 0x140F;
enum uint GL_INT8_NV = 0x8FE0;
enum uint GL_INT8_VEC2_NV = 0x8FE1;
enum uint GL_INT8_VEC3_NV = 0x8FE2;
enum uint GL_INT8_VEC4_NV = 0x8FE3;
enum uint GL_INT16_NV = 0x8FE4;
enum uint GL_INT16_VEC2_NV = 0x8FE5;
enum uint GL_INT16_VEC3_NV = 0x8FE6;
enum uint GL_INT16_VEC4_NV = 0x8FE7;
enum uint GL_INT64_VEC2_NV = 0x8FE9;
enum uint GL_INT64_VEC3_NV = 0x8FEA;
enum uint GL_INT64_VEC4_NV = 0x8FEB;
enum uint GL_UNSIGNED_INT8_NV = 0x8FEC;
enum uint GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
enum uint GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
enum uint GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
enum uint GL_UNSIGNED_INT16_NV = 0x8FF0;
enum uint GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
enum uint GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
enum uint GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
enum uint GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
enum uint GL_FLOAT16_NV = 0x8FF8;
enum uint GL_FLOAT16_VEC2_NV = 0x8FF9;
enum uint GL_FLOAT16_VEC3_NV = 0x8FFA;
enum uint GL_FLOAT16_VEC4_NV = 0x8FFB;
enum uint GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
enum uint GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
enum uint GL_DATA_BUFFER_AMD = 0x9151;
enum uint GL_PERFORMANCE_MONITOR_AMD = 0x9152;
enum uint GL_QUERY_OBJECT_AMD = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
enum uint GL_SAMPLER_OBJECT_AMD = 0x9155;
enum uint GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
enum uint GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
enum uint GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
enum uint GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
enum uint GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
enum uint GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
enum uint GL_COUNTER_TYPE_AMD = 0x8BC0;
enum uint GL_COUNTER_RANGE_AMD = 0x8BC1;
enum uint GL_UNSIGNED_INT64_AMD = 0x8BC2;
enum uint GL_PERCENTAGE_AMD = 0x8BC3;
enum uint GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
enum uint GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
enum uint GL_PERFMON_RESULT_AMD = 0x8BC6;
enum uint GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
enum uint GL_QUERY_BUFFER_AMD = 0x9192;
enum uint GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
enum uint GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
enum uint GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
enum uint GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
enum uint GL_MIN_LOD_WARNING_AMD = 0x919C;
enum uint GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
enum uint GL_SET_AMD = 0x874A;
enum uint GL_REPLACE_VALUE_AMD = 0x874B;
enum uint GL_STENCIL_OP_VALUE_AMD = 0x874C;
enum uint GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
enum uint GL_STREAM_RASTERIZATION_AMD = 0x91A0;
enum uint GL_SAMPLER_BUFFER_AMD = 0x9001;
enum uint GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
enum uint GL_TESSELLATION_MODE_AMD = 0x9004;
enum uint GL_TESSELLATION_FACTOR_AMD = 0x9005;
enum uint GL_DISCRETE_AMD = 0x9006;
enum uint GL_CONTINUOUS_AMD = 0x9007;
enum uint GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
enum uint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
enum uint GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
enum uint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
enum uint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
enum uint GL_DRAW_PIXELS_APPLE = 0x8A0A;
enum uint GL_FENCE_APPLE = 0x8A0B;
enum uint GL_HALF_APPLE = 0x140B;
enum uint GL_RGBA_FLOAT32_APPLE = 0x8814;
enum uint GL_RGB_FLOAT32_APPLE = 0x8815;
enum uint GL_ALPHA_FLOAT32_APPLE = 0x8816;
enum uint GL_INTENSITY_FLOAT32_APPLE = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
enum uint GL_RGBA_FLOAT16_APPLE = 0x881A;
enum uint GL_RGB_FLOAT16_APPLE = 0x881B;
enum uint GL_ALPHA_FLOAT16_APPLE = 0x881C;
enum uint GL_INTENSITY_FLOAT16_APPLE = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
enum uint GL_COLOR_FLOAT_APPLE = 0x8A0F;
enum uint GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
enum uint GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
enum uint GL_BUFFER_OBJECT_APPLE = 0x85B3;
enum uint GL_RELEASED_APPLE = 0x8A19;
enum uint GL_VOLATILE_APPLE = 0x8A1A;
enum uint GL_RETAINED_APPLE = 0x8A1B;
enum uint GL_UNDEFINED_APPLE = 0x8A1C;
enum uint GL_PURGEABLE_APPLE = 0x8A1D;
enum uint GL_RGB_422_APPLE = 0x8A1F;
enum uint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
enum uint GL_RGB_RAW_422_APPLE = 0x8A51;
enum uint GL_PACK_ROW_BYTES_APPLE = 0x8A15;
enum uint GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
enum uint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
enum uint GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
enum uint GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
enum uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
enum uint GL_STORAGE_PRIVATE_APPLE = 0x85BD;
enum uint GL_STORAGE_CACHED_APPLE = 0x85BE;
enum uint GL_STORAGE_SHARED_APPLE = 0x85BF;
enum uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
enum uint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
enum uint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
enum uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
enum uint GL_STORAGE_CLIENT_APPLE = 0x85B4;
enum uint GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
enum uint GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
enum uint GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
enum uint GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
enum uint GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
enum uint GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
enum uint GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
enum uint GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
enum uint GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
enum uint GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
enum uint GL_YCBCR_422_APPLE = 0x85B9;
enum uint GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
enum uint GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
enum uint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
enum uint GL_UNSIGNED_INT64_ARB = 0x140F;
enum uint GL_SYNC_CL_EVENT_ARB = 0x8240;
enum uint GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
enum uint GL_RGBA_FLOAT_MODE_ARB = 0x8820;
enum uint GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
enum uint GL_CLAMP_READ_COLOR_ARB = 0x891C;
enum uint GL_FIXED_ONLY_ARB = 0x891D;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
enum uint GL_DEBUG_SOURCE_API_ARB = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
enum uint GL_DEPTH_COMPONENT16_ARB = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_ARB = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_ARB = 0x81A7;
enum uint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
enum uint GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
enum uint GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
enum uint GL_DRAW_BUFFER0_ARB = 0x8825;
enum uint GL_DRAW_BUFFER1_ARB = 0x8826;
enum uint GL_DRAW_BUFFER2_ARB = 0x8827;
enum uint GL_DRAW_BUFFER3_ARB = 0x8828;
enum uint GL_DRAW_BUFFER4_ARB = 0x8829;
enum uint GL_DRAW_BUFFER5_ARB = 0x882A;
enum uint GL_DRAW_BUFFER6_ARB = 0x882B;
enum uint GL_DRAW_BUFFER7_ARB = 0x882C;
enum uint GL_DRAW_BUFFER8_ARB = 0x882D;
enum uint GL_DRAW_BUFFER9_ARB = 0x882E;
enum uint GL_DRAW_BUFFER10_ARB = 0x882F;
enum uint GL_DRAW_BUFFER11_ARB = 0x8830;
enum uint GL_DRAW_BUFFER12_ARB = 0x8831;
enum uint GL_DRAW_BUFFER13_ARB = 0x8832;
enum uint GL_DRAW_BUFFER14_ARB = 0x8833;
enum uint GL_DRAW_BUFFER15_ARB = 0x8834;
enum uint GL_FRAGMENT_PROGRAM_ARB = 0x8804;
enum uint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
enum uint GL_PROGRAM_LENGTH_ARB = 0x8627;
enum uint GL_PROGRAM_FORMAT_ARB = 0x8876;
enum uint GL_PROGRAM_BINDING_ARB = 0x8677;
enum uint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
enum uint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
enum uint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
enum uint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
enum uint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
enum uint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
enum uint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
enum uint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
enum uint GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
enum uint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
enum uint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
enum uint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
enum uint GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
enum uint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
enum uint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
enum uint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
enum uint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
enum uint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
enum uint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
enum uint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
enum uint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
enum uint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
enum uint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
enum uint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
enum uint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
enum uint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
enum uint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
enum uint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
enum uint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
enum uint GL_PROGRAM_STRING_ARB = 0x8628;
enum uint GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
enum uint GL_CURRENT_MATRIX_ARB = 0x8641;
enum uint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
enum uint GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
enum uint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
enum uint GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
enum uint GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
enum uint GL_MATRIX0_ARB = 0x88C0;
enum uint GL_MATRIX1_ARB = 0x88C1;
enum uint GL_MATRIX2_ARB = 0x88C2;
enum uint GL_MATRIX3_ARB = 0x88C3;
enum uint GL_MATRIX4_ARB = 0x88C4;
enum uint GL_MATRIX5_ARB = 0x88C5;
enum uint GL_MATRIX6_ARB = 0x88C6;
enum uint GL_MATRIX7_ARB = 0x88C7;
enum uint GL_MATRIX8_ARB = 0x88C8;
enum uint GL_MATRIX9_ARB = 0x88C9;
enum uint GL_MATRIX10_ARB = 0x88CA;
enum uint GL_MATRIX11_ARB = 0x88CB;
enum uint GL_MATRIX12_ARB = 0x88CC;
enum uint GL_MATRIX13_ARB = 0x88CD;
enum uint GL_MATRIX14_ARB = 0x88CE;
enum uint GL_MATRIX15_ARB = 0x88CF;
enum uint GL_MATRIX16_ARB = 0x88D0;
enum uint GL_MATRIX17_ARB = 0x88D1;
enum uint GL_MATRIX18_ARB = 0x88D2;
enum uint GL_MATRIX19_ARB = 0x88D3;
enum uint GL_MATRIX20_ARB = 0x88D4;
enum uint GL_MATRIX21_ARB = 0x88D5;
enum uint GL_MATRIX22_ARB = 0x88D6;
enum uint GL_MATRIX23_ARB = 0x88D7;
enum uint GL_MATRIX24_ARB = 0x88D8;
enum uint GL_MATRIX25_ARB = 0x88D9;
enum uint GL_MATRIX26_ARB = 0x88DA;
enum uint GL_MATRIX27_ARB = 0x88DB;
enum uint GL_MATRIX28_ARB = 0x88DC;
enum uint GL_MATRIX29_ARB = 0x88DD;
enum uint GL_MATRIX30_ARB = 0x88DE;
enum uint GL_MATRIX31_ARB = 0x88DF;
enum uint GL_FRAGMENT_SHADER_ARB = 0x8B30;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
enum uint GL_LINES_ADJACENCY_ARB = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
enum uint GL_GEOMETRY_SHADER_ARB = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
enum uint GL_INT64_ARB = 0x140E;
enum uint GL_INT64_VEC2_ARB = 0x8FE9;
enum uint GL_INT64_VEC3_ARB = 0x8FEA;
enum uint GL_INT64_VEC4_ARB = 0x8FEB;
enum uint GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
enum uint GL_HALF_FLOAT_ARB = 0x140B;
enum uint GL_BLEND_COLOR = 0x8005;
enum uint GL_BLEND_EQUATION = 0x8009;
enum uint GL_CONVOLUTION_1D = 0x8010;
enum uint GL_CONVOLUTION_2D = 0x8011;
enum uint GL_SEPARABLE_2D = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS = 0x8015;
enum uint GL_REDUCE = 0x8016;
enum uint GL_CONVOLUTION_FORMAT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
enum uint GL_HISTOGRAM = 0x8024;
enum uint GL_PROXY_HISTOGRAM = 0x8025;
enum uint GL_HISTOGRAM_WIDTH = 0x8026;
enum uint GL_HISTOGRAM_FORMAT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
enum uint GL_HISTOGRAM_SINK = 0x802D;
enum uint GL_MINMAX = 0x802E;
enum uint GL_MINMAX_FORMAT = 0x802F;
enum uint GL_MINMAX_SINK = 0x8030;
enum uint GL_TABLE_TOO_LARGE = 0x8031;
enum uint GL_COLOR_MATRIX = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
enum uint GL_COLOR_TABLE = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
enum uint GL_CONSTANT_BORDER = 0x8151;
enum uint GL_REPLICATE_BORDER = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR = 0x8154;
enum uint GL_PARAMETER_BUFFER_ARB = 0x80EE;
enum uint GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
enum uint GL_SRGB_DECODE_ARB = 0x8299;
enum uint GL_MATRIX_PALETTE_ARB = 0x8840;
enum uint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
enum uint GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
enum uint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
enum uint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
enum uint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
enum uint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
enum uint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
enum uint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
enum uint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
enum uint GL_MULTISAMPLE_ARB = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
enum uint GL_SAMPLE_COVERAGE_ARB = 0x80A0;
enum uint GL_SAMPLE_BUFFERS_ARB = 0x80A8;
enum uint GL_SAMPLES_ARB = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
enum uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
enum uint GL_TEXTURE0_ARB = 0x84C0;
enum uint GL_TEXTURE1_ARB = 0x84C1;
enum uint GL_TEXTURE2_ARB = 0x84C2;
enum uint GL_TEXTURE3_ARB = 0x84C3;
enum uint GL_TEXTURE4_ARB = 0x84C4;
enum uint GL_TEXTURE5_ARB = 0x84C5;
enum uint GL_TEXTURE6_ARB = 0x84C6;
enum uint GL_TEXTURE7_ARB = 0x84C7;
enum uint GL_TEXTURE8_ARB = 0x84C8;
enum uint GL_TEXTURE9_ARB = 0x84C9;
enum uint GL_TEXTURE10_ARB = 0x84CA;
enum uint GL_TEXTURE11_ARB = 0x84CB;
enum uint GL_TEXTURE12_ARB = 0x84CC;
enum uint GL_TEXTURE13_ARB = 0x84CD;
enum uint GL_TEXTURE14_ARB = 0x84CE;
enum uint GL_TEXTURE15_ARB = 0x84CF;
enum uint GL_TEXTURE16_ARB = 0x84D0;
enum uint GL_TEXTURE17_ARB = 0x84D1;
enum uint GL_TEXTURE18_ARB = 0x84D2;
enum uint GL_TEXTURE19_ARB = 0x84D3;
enum uint GL_TEXTURE20_ARB = 0x84D4;
enum uint GL_TEXTURE21_ARB = 0x84D5;
enum uint GL_TEXTURE22_ARB = 0x84D6;
enum uint GL_TEXTURE23_ARB = 0x84D7;
enum uint GL_TEXTURE24_ARB = 0x84D8;
enum uint GL_TEXTURE25_ARB = 0x84D9;
enum uint GL_TEXTURE26_ARB = 0x84DA;
enum uint GL_TEXTURE27_ARB = 0x84DB;
enum uint GL_TEXTURE28_ARB = 0x84DC;
enum uint GL_TEXTURE29_ARB = 0x84DD;
enum uint GL_TEXTURE30_ARB = 0x84DE;
enum uint GL_TEXTURE31_ARB = 0x84DF;
enum uint GL_ACTIVE_TEXTURE_ARB = 0x84E0;
enum uint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
enum uint GL_QUERY_COUNTER_BITS_ARB = 0x8864;
enum uint GL_CURRENT_QUERY_ARB = 0x8865;
enum uint GL_QUERY_RESULT_ARB = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
enum uint GL_SAMPLES_PASSED_ARB = 0x8914;
enum uint GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
enum uint GL_COMPLETION_STATUS_ARB = 0x91B1;
enum uint GL_VERTICES_SUBMITTED_ARB = 0x82EE;
enum uint GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
enum uint GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
enum uint GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
enum uint GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
enum uint GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
enum uint GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
enum uint GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
enum uint GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
enum uint GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
enum uint GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
enum uint GL_POINT_SIZE_MIN_ARB = 0x8126;
enum uint GL_POINT_SIZE_MAX_ARB = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
enum uint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
enum uint GL_POINT_SPRITE_ARB = 0x8861;
enum uint GL_COORD_REPLACE_ARB = 0x8862;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
enum uint GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
enum uint GL_SAMPLE_LOCATION_ARB = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
enum uint GL_SAMPLE_SHADING_ARB = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
enum uint GL_PROGRAM_OBJECT_ARB = 0x8B40;
enum uint GL_SHADER_OBJECT_ARB = 0x8B48;
enum uint GL_OBJECT_TYPE_ARB = 0x8B4E;
enum uint GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
enum uint GL_FLOAT_VEC2_ARB = 0x8B50;
enum uint GL_FLOAT_VEC3_ARB = 0x8B51;
enum uint GL_FLOAT_VEC4_ARB = 0x8B52;
enum uint GL_INT_VEC2_ARB = 0x8B53;
enum uint GL_INT_VEC3_ARB = 0x8B54;
enum uint GL_INT_VEC4_ARB = 0x8B55;
enum uint GL_BOOL_ARB = 0x8B56;
enum uint GL_BOOL_VEC2_ARB = 0x8B57;
enum uint GL_BOOL_VEC3_ARB = 0x8B58;
enum uint GL_BOOL_VEC4_ARB = 0x8B59;
enum uint GL_FLOAT_MAT2_ARB = 0x8B5A;
enum uint GL_FLOAT_MAT3_ARB = 0x8B5B;
enum uint GL_FLOAT_MAT4_ARB = 0x8B5C;
enum uint GL_SAMPLER_1D_ARB = 0x8B5D;
enum uint GL_SAMPLER_2D_ARB = 0x8B5E;
enum uint GL_SAMPLER_3D_ARB = 0x8B5F;
enum uint GL_SAMPLER_CUBE_ARB = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
enum uint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
enum uint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
enum uint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
enum uint GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
enum uint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
enum uint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
enum uint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
enum uint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
enum uint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
enum uint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
enum uint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
enum uint GL_SHADER_INCLUDE_ARB = 0x8DAE;
enum uint GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
enum uint GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
enum uint GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
enum uint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
enum uint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
enum uint GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
enum uint GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
enum uint GL_TEXTURE_SPARSE_ARB = 0x91A6;
enum uint GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
enum uint GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
enum uint GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
enum uint GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
enum uint GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
enum uint GL_CLAMP_TO_BORDER_ARB = 0x812D;
enum uint GL_TEXTURE_BUFFER_ARB = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
enum uint GL_COMPRESSED_ALPHA_ARB = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
enum uint GL_COMPRESSED_RGB_ARB = 0x84ED;
enum uint GL_COMPRESSED_RGBA_ARB = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
enum uint GL_NORMAL_MAP_ARB = 0x8511;
enum uint GL_REFLECTION_MAP_ARB = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
enum uint GL_COMBINE_ARB = 0x8570;
enum uint GL_COMBINE_RGB_ARB = 0x8571;
enum uint GL_COMBINE_ALPHA_ARB = 0x8572;
enum uint GL_SOURCE0_RGB_ARB = 0x8580;
enum uint GL_SOURCE1_RGB_ARB = 0x8581;
enum uint GL_SOURCE2_RGB_ARB = 0x8582;
enum uint GL_SOURCE0_ALPHA_ARB = 0x8588;
enum uint GL_SOURCE1_ALPHA_ARB = 0x8589;
enum uint GL_SOURCE2_ALPHA_ARB = 0x858A;
enum uint GL_OPERAND0_RGB_ARB = 0x8590;
enum uint GL_OPERAND1_RGB_ARB = 0x8591;
enum uint GL_OPERAND2_RGB_ARB = 0x8592;
enum uint GL_OPERAND0_ALPHA_ARB = 0x8598;
enum uint GL_OPERAND1_ALPHA_ARB = 0x8599;
enum uint GL_OPERAND2_ALPHA_ARB = 0x859A;
enum uint GL_RGB_SCALE_ARB = 0x8573;
enum uint GL_ADD_SIGNED_ARB = 0x8574;
enum uint GL_INTERPOLATE_ARB = 0x8575;
enum uint GL_SUBTRACT_ARB = 0x84E7;
enum uint GL_CONSTANT_ARB = 0x8576;
enum uint GL_PRIMARY_COLOR_ARB = 0x8577;
enum uint GL_PREVIOUS_ARB = 0x8578;
enum uint GL_DOT3_RGB_ARB = 0x86AE;
enum uint GL_DOT3_RGBA_ARB = 0x86AF;
enum uint GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
enum uint GL_WEIGHTED_AVERAGE_ARB = 0x9367;
enum uint GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
enum uint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
enum uint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
enum uint GL_RGBA32F_ARB = 0x8814;
enum uint GL_RGB32F_ARB = 0x8815;
enum uint GL_ALPHA32F_ARB = 0x8816;
enum uint GL_INTENSITY32F_ARB = 0x8817;
enum uint GL_LUMINANCE32F_ARB = 0x8818;
enum uint GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
enum uint GL_RGBA16F_ARB = 0x881A;
enum uint GL_RGB16F_ARB = 0x881B;
enum uint GL_ALPHA16F_ARB = 0x881C;
enum uint GL_INTENSITY16F_ARB = 0x881D;
enum uint GL_LUMINANCE16F_ARB = 0x881E;
enum uint GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
enum uint GL_MIRRORED_REPEAT_ARB = 0x8370;
enum uint GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
enum uint GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
enum uint GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
enum uint GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
enum uint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
enum uint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
enum uint GL_VERTEX_BLEND_ARB = 0x86A7;
enum uint GL_CURRENT_WEIGHT_ARB = 0x86A8;
enum uint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
enum uint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
enum uint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
enum uint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
enum uint GL_WEIGHT_ARRAY_ARB = 0x86AD;
enum uint GL_MODELVIEW0_ARB = 0x1700;
enum uint GL_MODELVIEW1_ARB = 0x850A;
enum uint GL_MODELVIEW2_ARB = 0x8722;
enum uint GL_MODELVIEW3_ARB = 0x8723;
enum uint GL_MODELVIEW4_ARB = 0x8724;
enum uint GL_MODELVIEW5_ARB = 0x8725;
enum uint GL_MODELVIEW6_ARB = 0x8726;
enum uint GL_MODELVIEW7_ARB = 0x8727;
enum uint GL_MODELVIEW8_ARB = 0x8728;
enum uint GL_MODELVIEW9_ARB = 0x8729;
enum uint GL_MODELVIEW10_ARB = 0x872A;
enum uint GL_MODELVIEW11_ARB = 0x872B;
enum uint GL_MODELVIEW12_ARB = 0x872C;
enum uint GL_MODELVIEW13_ARB = 0x872D;
enum uint GL_MODELVIEW14_ARB = 0x872E;
enum uint GL_MODELVIEW15_ARB = 0x872F;
enum uint GL_MODELVIEW16_ARB = 0x8730;
enum uint GL_MODELVIEW17_ARB = 0x8731;
enum uint GL_MODELVIEW18_ARB = 0x8732;
enum uint GL_MODELVIEW19_ARB = 0x8733;
enum uint GL_MODELVIEW20_ARB = 0x8734;
enum uint GL_MODELVIEW21_ARB = 0x8735;
enum uint GL_MODELVIEW22_ARB = 0x8736;
enum uint GL_MODELVIEW23_ARB = 0x8737;
enum uint GL_MODELVIEW24_ARB = 0x8738;
enum uint GL_MODELVIEW25_ARB = 0x8739;
enum uint GL_MODELVIEW26_ARB = 0x873A;
enum uint GL_MODELVIEW27_ARB = 0x873B;
enum uint GL_MODELVIEW28_ARB = 0x873C;
enum uint GL_MODELVIEW29_ARB = 0x873D;
enum uint GL_MODELVIEW30_ARB = 0x873E;
enum uint GL_MODELVIEW31_ARB = 0x873F;
enum uint GL_BUFFER_SIZE_ARB = 0x8764;
enum uint GL_BUFFER_USAGE_ARB = 0x8765;
enum uint GL_ARRAY_BUFFER_ARB = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
enum uint GL_READ_ONLY_ARB = 0x88B8;
enum uint GL_WRITE_ONLY_ARB = 0x88B9;
enum uint GL_READ_WRITE_ARB = 0x88BA;
enum uint GL_BUFFER_ACCESS_ARB = 0x88BB;
enum uint GL_BUFFER_MAPPED_ARB = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
enum uint GL_STREAM_DRAW_ARB = 0x88E0;
enum uint GL_STREAM_READ_ARB = 0x88E1;
enum uint GL_STREAM_COPY_ARB = 0x88E2;
enum uint GL_STATIC_DRAW_ARB = 0x88E4;
enum uint GL_STATIC_READ_ARB = 0x88E5;
enum uint GL_STATIC_COPY_ARB = 0x88E6;
enum uint GL_DYNAMIC_DRAW_ARB = 0x88E8;
enum uint GL_DYNAMIC_READ_ARB = 0x88E9;
enum uint GL_DYNAMIC_COPY_ARB = 0x88EA;
enum uint GL_COLOR_SUM_ARB = 0x8458;
enum uint GL_VERTEX_PROGRAM_ARB = 0x8620;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
enum uint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
enum uint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
enum uint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
enum uint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
enum uint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
enum uint GL_VERTEX_SHADER_ARB = 0x8B31;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
enum uint GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
enum uint GL_DRAW_BUFFER0_ATI = 0x8825;
enum uint GL_DRAW_BUFFER1_ATI = 0x8826;
enum uint GL_DRAW_BUFFER2_ATI = 0x8827;
enum uint GL_DRAW_BUFFER3_ATI = 0x8828;
enum uint GL_DRAW_BUFFER4_ATI = 0x8829;
enum uint GL_DRAW_BUFFER5_ATI = 0x882A;
enum uint GL_DRAW_BUFFER6_ATI = 0x882B;
enum uint GL_DRAW_BUFFER7_ATI = 0x882C;
enum uint GL_DRAW_BUFFER8_ATI = 0x882D;
enum uint GL_DRAW_BUFFER9_ATI = 0x882E;
enum uint GL_DRAW_BUFFER10_ATI = 0x882F;
enum uint GL_DRAW_BUFFER11_ATI = 0x8830;
enum uint GL_DRAW_BUFFER12_ATI = 0x8831;
enum uint GL_DRAW_BUFFER13_ATI = 0x8832;
enum uint GL_DRAW_BUFFER14_ATI = 0x8833;
enum uint GL_DRAW_BUFFER15_ATI = 0x8834;
enum uint GL_ELEMENT_ARRAY_ATI = 0x8768;
enum uint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
enum uint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
enum uint GL_BUMP_ROT_MATRIX_ATI = 0x8775;
enum uint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
enum uint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
enum uint GL_BUMP_TEX_UNITS_ATI = 0x8778;
enum uint GL_DUDV_ATI = 0x8779;
enum uint GL_DU8DV8_ATI = 0x877A;
enum uint GL_BUMP_ENVMAP_ATI = 0x877B;
enum uint GL_BUMP_TARGET_ATI = 0x877C;
enum uint GL_FRAGMENT_SHADER_ATI = 0x8920;
enum uint GL_REG_0_ATI = 0x8921;
enum uint GL_REG_1_ATI = 0x8922;
enum uint GL_REG_2_ATI = 0x8923;
enum uint GL_REG_3_ATI = 0x8924;
enum uint GL_REG_4_ATI = 0x8925;
enum uint GL_REG_5_ATI = 0x8926;
enum uint GL_REG_6_ATI = 0x8927;
enum uint GL_REG_7_ATI = 0x8928;
enum uint GL_REG_8_ATI = 0x8929;
enum uint GL_REG_9_ATI = 0x892A;
enum uint GL_REG_10_ATI = 0x892B;
enum uint GL_REG_11_ATI = 0x892C;
enum uint GL_REG_12_ATI = 0x892D;
enum uint GL_REG_13_ATI = 0x892E;
enum uint GL_REG_14_ATI = 0x892F;
enum uint GL_REG_15_ATI = 0x8930;
enum uint GL_REG_16_ATI = 0x8931;
enum uint GL_REG_17_ATI = 0x8932;
enum uint GL_REG_18_ATI = 0x8933;
enum uint GL_REG_19_ATI = 0x8934;
enum uint GL_REG_20_ATI = 0x8935;
enum uint GL_REG_21_ATI = 0x8936;
enum uint GL_REG_22_ATI = 0x8937;
enum uint GL_REG_23_ATI = 0x8938;
enum uint GL_REG_24_ATI = 0x8939;
enum uint GL_REG_25_ATI = 0x893A;
enum uint GL_REG_26_ATI = 0x893B;
enum uint GL_REG_27_ATI = 0x893C;
enum uint GL_REG_28_ATI = 0x893D;
enum uint GL_REG_29_ATI = 0x893E;
enum uint GL_REG_30_ATI = 0x893F;
enum uint GL_REG_31_ATI = 0x8940;
enum uint GL_CON_0_ATI = 0x8941;
enum uint GL_CON_1_ATI = 0x8942;
enum uint GL_CON_2_ATI = 0x8943;
enum uint GL_CON_3_ATI = 0x8944;
enum uint GL_CON_4_ATI = 0x8945;
enum uint GL_CON_5_ATI = 0x8946;
enum uint GL_CON_6_ATI = 0x8947;
enum uint GL_CON_7_ATI = 0x8948;
enum uint GL_CON_8_ATI = 0x8949;
enum uint GL_CON_9_ATI = 0x894A;
enum uint GL_CON_10_ATI = 0x894B;
enum uint GL_CON_11_ATI = 0x894C;
enum uint GL_CON_12_ATI = 0x894D;
enum uint GL_CON_13_ATI = 0x894E;
enum uint GL_CON_14_ATI = 0x894F;
enum uint GL_CON_15_ATI = 0x8950;
enum uint GL_CON_16_ATI = 0x8951;
enum uint GL_CON_17_ATI = 0x8952;
enum uint GL_CON_18_ATI = 0x8953;
enum uint GL_CON_19_ATI = 0x8954;
enum uint GL_CON_20_ATI = 0x8955;
enum uint GL_CON_21_ATI = 0x8956;
enum uint GL_CON_22_ATI = 0x8957;
enum uint GL_CON_23_ATI = 0x8958;
enum uint GL_CON_24_ATI = 0x8959;
enum uint GL_CON_25_ATI = 0x895A;
enum uint GL_CON_26_ATI = 0x895B;
enum uint GL_CON_27_ATI = 0x895C;
enum uint GL_CON_28_ATI = 0x895D;
enum uint GL_CON_29_ATI = 0x895E;
enum uint GL_CON_30_ATI = 0x895F;
enum uint GL_CON_31_ATI = 0x8960;
enum uint GL_MOV_ATI = 0x8961;
enum uint GL_ADD_ATI = 0x8963;
enum uint GL_MUL_ATI = 0x8964;
enum uint GL_SUB_ATI = 0x8965;
enum uint GL_DOT3_ATI = 0x8966;
enum uint GL_DOT4_ATI = 0x8967;
enum uint GL_MAD_ATI = 0x8968;
enum uint GL_LERP_ATI = 0x8969;
enum uint GL_CND_ATI = 0x896A;
enum uint GL_CND0_ATI = 0x896B;
enum uint GL_DOT2_ADD_ATI = 0x896C;
enum uint GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
enum uint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
enum uint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
enum uint GL_NUM_PASSES_ATI = 0x8970;
enum uint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
enum uint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
enum uint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
enum uint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
enum uint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
enum uint GL_SWIZZLE_STR_ATI = 0x8976;
enum uint GL_SWIZZLE_STQ_ATI = 0x8977;
enum uint GL_SWIZZLE_STR_DR_ATI = 0x8978;
enum uint GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
enum uint GL_SWIZZLE_STRQ_ATI = 0x897A;
enum uint GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
enum uint GL_RED_BIT_ATI = 0x00000001;
enum uint GL_GREEN_BIT_ATI = 0x00000002;
enum uint GL_BLUE_BIT_ATI = 0x00000004;
enum uint GL_2X_BIT_ATI = 0x00000001;
enum uint GL_4X_BIT_ATI = 0x00000002;
enum uint GL_8X_BIT_ATI = 0x00000004;
enum uint GL_HALF_BIT_ATI = 0x00000008;
enum uint GL_QUARTER_BIT_ATI = 0x00000010;
enum uint GL_EIGHTH_BIT_ATI = 0x00000020;
enum uint GL_SATURATE_BIT_ATI = 0x00000040;
enum uint GL_COMP_BIT_ATI = 0x00000002;
enum uint GL_NEGATE_BIT_ATI = 0x00000004;
enum uint GL_BIAS_BIT_ATI = 0x00000008;
enum uint GL_VBO_FREE_MEMORY_ATI = 0x87FB;
enum uint GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
enum uint GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
enum uint GL_RGBA_FLOAT_MODE_ATI = 0x8820;
enum uint GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
enum uint GL_PN_TRIANGLES_ATI = 0x87F0;
enum uint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
enum uint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
enum uint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
enum uint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
enum uint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
enum uint GL_STENCIL_BACK_FUNC_ATI = 0x8800;
enum uint GL_STENCIL_BACK_FAIL_ATI = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
enum uint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
enum uint GL_MODULATE_ADD_ATI = 0x8744;
enum uint GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
enum uint GL_MODULATE_SUBTRACT_ATI = 0x8746;
enum uint GL_RGBA_FLOAT32_ATI = 0x8814;
enum uint GL_RGB_FLOAT32_ATI = 0x8815;
enum uint GL_ALPHA_FLOAT32_ATI = 0x8816;
enum uint GL_INTENSITY_FLOAT32_ATI = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_ATI = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
enum uint GL_RGBA_FLOAT16_ATI = 0x881A;
enum uint GL_RGB_FLOAT16_ATI = 0x881B;
enum uint GL_ALPHA_FLOAT16_ATI = 0x881C;
enum uint GL_INTENSITY_FLOAT16_ATI = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_ATI = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
enum uint GL_MIRROR_CLAMP_ATI = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
enum uint GL_STATIC_ATI = 0x8760;
enum uint GL_DYNAMIC_ATI = 0x8761;
enum uint GL_PRESERVE_ATI = 0x8762;
enum uint GL_DISCARD_ATI = 0x8763;
enum uint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
enum uint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
enum uint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
enum uint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
enum uint GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
enum uint GL_VERTEX_STREAM0_ATI = 0x876C;
enum uint GL_VERTEX_STREAM1_ATI = 0x876D;
enum uint GL_VERTEX_STREAM2_ATI = 0x876E;
enum uint GL_VERTEX_STREAM3_ATI = 0x876F;
enum uint GL_VERTEX_STREAM4_ATI = 0x8770;
enum uint GL_VERTEX_STREAM5_ATI = 0x8771;
enum uint GL_VERTEX_STREAM6_ATI = 0x8772;
enum uint GL_VERTEX_STREAM7_ATI = 0x8773;
enum uint GL_VERTEX_SOURCE_ATI = 0x8774;
enum uint GL_422_EXT = 0x80CC;
enum uint GL_422_REV_EXT = 0x80CD;
enum uint GL_422_AVERAGE_EXT = 0x80CE;
enum uint GL_422_REV_AVERAGE_EXT = 0x80CF;
enum uint GL_ABGR_EXT = 0x8000;
enum uint GL_BGR_EXT = 0x80E0;
enum uint GL_BGRA_EXT = 0x80E1;
enum uint GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
enum uint GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
enum uint GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
enum uint GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
enum uint GL_UNIFORM_BUFFER_EXT = 0x8DEE;
enum uint GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
enum uint GL_CONSTANT_COLOR_EXT = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
enum uint GL_CONSTANT_ALPHA_EXT = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
enum uint GL_BLEND_COLOR_EXT = 0x8005;
enum uint GL_BLEND_EQUATION_RGB_EXT = 0x8009;
enum uint GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
enum uint GL_BLEND_DST_RGB_EXT = 0x80C8;
enum uint GL_BLEND_SRC_RGB_EXT = 0x80C9;
enum uint GL_BLEND_DST_ALPHA_EXT = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
enum uint GL_MIN_EXT = 0x8007;
enum uint GL_MAX_EXT = 0x8008;
enum uint GL_FUNC_ADD_EXT = 0x8006;
enum uint GL_BLEND_EQUATION_EXT = 0x8009;
enum uint GL_FUNC_SUBTRACT_EXT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
enum uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
enum uint GL_CMYK_EXT = 0x800C;
enum uint GL_CMYKA_EXT = 0x800D;
enum uint GL_PACK_CMYK_HINT_EXT = 0x800E;
enum uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
enum uint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
enum uint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
enum uint GL_CONVOLUTION_1D_EXT = 0x8010;
enum uint GL_CONVOLUTION_2D_EXT = 0x8011;
enum uint GL_SEPARABLE_2D_EXT = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
enum uint GL_REDUCE_EXT = 0x8016;
enum uint GL_CONVOLUTION_FORMAT_EXT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH_EXT = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
enum uint GL_TANGENT_ARRAY_EXT = 0x8439;
enum uint GL_BINORMAL_ARRAY_EXT = 0x843A;
enum uint GL_CURRENT_TANGENT_EXT = 0x843B;
enum uint GL_CURRENT_BINORMAL_EXT = 0x843C;
enum uint GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
enum uint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
enum uint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
enum uint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
enum uint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
enum uint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
enum uint GL_MAP1_TANGENT_EXT = 0x8444;
enum uint GL_MAP2_TANGENT_EXT = 0x8445;
enum uint GL_MAP1_BINORMAL_EXT = 0x8446;
enum uint GL_MAP2_BINORMAL_EXT = 0x8447;
enum uint GL_CULL_VERTEX_EXT = 0x81AA;
enum uint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
enum uint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
enum uint GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
enum uint GL_PROGRAM_OBJECT_EXT = 0x8B40;
enum uint GL_SHADER_OBJECT_EXT = 0x8B48;
enum uint GL_BUFFER_OBJECT_EXT = 0x9151;
enum uint GL_QUERY_OBJECT_EXT = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
enum uint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
enum uint GL_DEPTH_BOUNDS_EXT = 0x8891;
enum uint GL_PROGRAM_MATRIX_EXT = 0x8E2D;
enum uint GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
enum uint GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
enum uint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
enum uint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
enum uint GL_FOG_COORDINATE_EXT = 0x8451;
enum uint GL_FRAGMENT_DEPTH_EXT = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
enum uint GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
enum uint GL_MAX_SAMPLES_EXT = 0x8D57;
enum uint GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
enum uint GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
enum uint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
enum uint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
enum uint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
enum uint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
enum uint GL_FRAMEBUFFER_EXT = 0x8D40;
enum uint GL_RENDERBUFFER_EXT = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
enum uint GL_STENCIL_INDEX1_EXT = 0x8D46;
enum uint GL_STENCIL_INDEX4_EXT = 0x8D47;
enum uint GL_STENCIL_INDEX8_EXT = 0x8D48;
enum uint GL_STENCIL_INDEX16_EXT = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
enum uint GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
enum uint GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
enum uint GL_GEOMETRY_SHADER_EXT = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
enum uint GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
enum uint GL_LINES_ADJACENCY_EXT = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
enum uint GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
enum uint GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
enum uint GL_SAMPLER_BUFFER_EXT = 0x8DC2;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
enum uint GL_INT_SAMPLER_1D_EXT = 0x8DC9;
enum uint GL_INT_SAMPLER_2D_EXT = 0x8DCA;
enum uint GL_INT_SAMPLER_3D_EXT = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
enum uint GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
enum uint GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
enum uint GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
enum uint GL_HISTOGRAM_EXT = 0x8024;
enum uint GL_PROXY_HISTOGRAM_EXT = 0x8025;
enum uint GL_HISTOGRAM_WIDTH_EXT = 0x8026;
enum uint GL_HISTOGRAM_FORMAT_EXT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
enum uint GL_HISTOGRAM_SINK_EXT = 0x802D;
enum uint GL_MINMAX_EXT = 0x802E;
enum uint GL_MINMAX_FORMAT_EXT = 0x802F;
enum uint GL_MINMAX_SINK_EXT = 0x8030;
enum uint GL_TABLE_TOO_LARGE_EXT = 0x8031;
enum uint GL_IUI_V2F_EXT = 0x81AD;
enum uint GL_IUI_V3F_EXT = 0x81AE;
enum uint GL_IUI_N3F_V2F_EXT = 0x81AF;
enum uint GL_IUI_N3F_V3F_EXT = 0x81B0;
enum uint GL_T2F_IUI_V2F_EXT = 0x81B1;
enum uint GL_T2F_IUI_V3F_EXT = 0x81B2;
enum uint GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
enum uint GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
enum uint GL_INDEX_TEST_EXT = 0x81B5;
enum uint GL_INDEX_TEST_FUNC_EXT = 0x81B6;
enum uint GL_INDEX_TEST_REF_EXT = 0x81B7;
enum uint GL_INDEX_MATERIAL_EXT = 0x81B8;
enum uint GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
enum uint GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
enum uint GL_FRAGMENT_MATERIAL_EXT = 0x8349;
enum uint GL_FRAGMENT_NORMAL_EXT = 0x834A;
enum uint GL_FRAGMENT_COLOR_EXT = 0x834C;
enum uint GL_ATTENUATION_EXT = 0x834D;
enum uint GL_SHADOW_ATTENUATION_EXT = 0x834E;
enum uint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
enum uint GL_TEXTURE_LIGHT_EXT = 0x8350;
enum uint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
enum uint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
enum uint GL_MULTISAMPLE_EXT = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
enum uint GL_SAMPLE_MASK_EXT = 0x80A0;
enum uint GL_1PASS_EXT = 0x80A1;
enum uint GL_2PASS_0_EXT = 0x80A2;
enum uint GL_2PASS_1_EXT = 0x80A3;
enum uint GL_4PASS_0_EXT = 0x80A4;
enum uint GL_4PASS_1_EXT = 0x80A5;
enum uint GL_4PASS_2_EXT = 0x80A6;
enum uint GL_4PASS_3_EXT = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_EXT = 0x80A8;
enum uint GL_SAMPLES_EXT = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
enum uint GL_SAMPLE_PATTERN_EXT = 0x80AC;
enum uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
enum uint GL_DEPTH_STENCIL_EXT = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
enum uint GL_DEPTH24_STENCIL8_EXT = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
enum uint GL_R11F_G11F_B10F_EXT = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
enum uint GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
enum uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
enum uint GL_COLOR_INDEX1_EXT = 0x80E2;
enum uint GL_COLOR_INDEX2_EXT = 0x80E3;
enum uint GL_COLOR_INDEX4_EXT = 0x80E4;
enum uint GL_COLOR_INDEX8_EXT = 0x80E5;
enum uint GL_COLOR_INDEX12_EXT = 0x80E6;
enum uint GL_COLOR_INDEX16_EXT = 0x80E7;
enum uint GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
enum uint GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
enum uint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
enum uint GL_PIXEL_MAG_FILTER_EXT = 0x8331;
enum uint GL_PIXEL_MIN_FILTER_EXT = 0x8332;
enum uint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
enum uint GL_CUBIC_EXT = 0x8334;
enum uint GL_AVERAGE_EXT = 0x8335;
enum uint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
enum uint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
enum uint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
enum uint GL_POINT_SIZE_MIN_EXT = 0x8126;
enum uint GL_POINT_SIZE_MAX_EXT = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_EXT = 0x8129;
enum uint GL_POLYGON_OFFSET_EXT = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
enum uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
enum uint GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
enum uint GL_PROVOKING_VERTEX_EXT = 0x8E4F;
enum uint GL_RASTER_MULTISAMPLE_EXT = 0x9327;
enum uint GL_RASTER_SAMPLES_EXT = 0x9328;
enum uint GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
enum uint GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
enum uint GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
enum uint GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
enum uint GL_RESCALE_NORMAL_EXT = 0x803A;
enum uint GL_COLOR_SUM_EXT = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
enum uint GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
enum uint GL_VERTEX_SHADER_BIT_EXT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002;
enum uint GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE_EXT = 0x8258;
enum uint GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
enum uint GL_SINGLE_COLOR_EXT = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
enum uint GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
enum uint GL_IMAGE_1D_EXT = 0x904C;
enum uint GL_IMAGE_2D_EXT = 0x904D;
enum uint GL_IMAGE_3D_EXT = 0x904E;
enum uint GL_IMAGE_2D_RECT_EXT = 0x904F;
enum uint GL_IMAGE_CUBE_EXT = 0x9050;
enum uint GL_IMAGE_BUFFER_EXT = 0x9051;
enum uint GL_IMAGE_1D_ARRAY_EXT = 0x9052;
enum uint GL_IMAGE_2D_ARRAY_EXT = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
enum uint GL_INT_IMAGE_1D_EXT = 0x9057;
enum uint GL_INT_IMAGE_2D_EXT = 0x9058;
enum uint GL_INT_IMAGE_3D_EXT = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
enum uint GL_INT_IMAGE_CUBE_EXT = 0x905B;
enum uint GL_INT_IMAGE_BUFFER_EXT = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
enum uint GL_STENCIL_TAG_BITS_EXT = 0x88F2;
enum uint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
enum uint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
enum uint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
enum uint GL_INCR_WRAP_EXT = 0x8507;
enum uint GL_DECR_WRAP_EXT = 0x8508;
enum uint GL_ALPHA4_EXT = 0x803B;
enum uint GL_ALPHA8_EXT = 0x803C;
enum uint GL_ALPHA12_EXT = 0x803D;
enum uint GL_ALPHA16_EXT = 0x803E;
enum uint GL_LUMINANCE4_EXT = 0x803F;
enum uint GL_LUMINANCE8_EXT = 0x8040;
enum uint GL_LUMINANCE12_EXT = 0x8041;
enum uint GL_LUMINANCE16_EXT = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
enum uint GL_INTENSITY_EXT = 0x8049;
enum uint GL_INTENSITY4_EXT = 0x804A;
enum uint GL_INTENSITY8_EXT = 0x804B;
enum uint GL_INTENSITY12_EXT = 0x804C;
enum uint GL_INTENSITY16_EXT = 0x804D;
enum uint GL_RGB2_EXT = 0x804E;
enum uint GL_RGB4_EXT = 0x804F;
enum uint GL_RGB5_EXT = 0x8050;
enum uint GL_RGB8_EXT = 0x8051;
enum uint GL_RGB10_EXT = 0x8052;
enum uint GL_RGB12_EXT = 0x8053;
enum uint GL_RGB16_EXT = 0x8054;
enum uint GL_RGBA2_EXT = 0x8055;
enum uint GL_RGBA4_EXT = 0x8056;
enum uint GL_RGB5_A1_EXT = 0x8057;
enum uint GL_RGBA8_EXT = 0x8058;
enum uint GL_RGB10_A2_EXT = 0x8059;
enum uint GL_RGBA12_EXT = 0x805A;
enum uint GL_RGBA16_EXT = 0x805B;
enum uint GL_TEXTURE_RED_SIZE_EXT = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
enum uint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
enum uint GL_REPLACE_EXT = 0x8062;
enum uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
enum uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
enum uint GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
enum uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
enum uint GL_TEXTURE_3D_EXT = 0x806F;
enum uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
enum uint GL_TEXTURE_DEPTH_EXT = 0x8071;
enum uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
enum uint GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
enum uint GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
enum uint GL_TEXTURE_BUFFER_EXT = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
enum uint GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
enum uint GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
enum uint GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
enum uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
enum uint GL_NORMAL_MAP_EXT = 0x8511;
enum uint GL_REFLECTION_MAP_EXT = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
enum uint GL_COMBINE_EXT = 0x8570;
enum uint GL_COMBINE_RGB_EXT = 0x8571;
enum uint GL_COMBINE_ALPHA_EXT = 0x8572;
enum uint GL_RGB_SCALE_EXT = 0x8573;
enum uint GL_ADD_SIGNED_EXT = 0x8574;
enum uint GL_INTERPOLATE_EXT = 0x8575;
enum uint GL_CONSTANT_EXT = 0x8576;
enum uint GL_PRIMARY_COLOR_EXT = 0x8577;
enum uint GL_PREVIOUS_EXT = 0x8578;
enum uint GL_SOURCE0_RGB_EXT = 0x8580;
enum uint GL_SOURCE1_RGB_EXT = 0x8581;
enum uint GL_SOURCE2_RGB_EXT = 0x8582;
enum uint GL_SOURCE0_ALPHA_EXT = 0x8588;
enum uint GL_SOURCE1_ALPHA_EXT = 0x8589;
enum uint GL_SOURCE2_ALPHA_EXT = 0x858A;
enum uint GL_OPERAND0_RGB_EXT = 0x8590;
enum uint GL_OPERAND1_RGB_EXT = 0x8591;
enum uint GL_OPERAND2_RGB_EXT = 0x8592;
enum uint GL_OPERAND0_ALPHA_EXT = 0x8598;
enum uint GL_OPERAND1_ALPHA_EXT = 0x8599;
enum uint GL_OPERAND2_ALPHA_EXT = 0x859A;
enum uint GL_DOT3_RGB_EXT = 0x8740;
enum uint GL_DOT3_RGBA_EXT = 0x8741;
enum uint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
enum uint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
enum uint GL_RGBA32UI_EXT = 0x8D70;
enum uint GL_RGB32UI_EXT = 0x8D71;
enum uint GL_ALPHA32UI_EXT = 0x8D72;
enum uint GL_INTENSITY32UI_EXT = 0x8D73;
enum uint GL_LUMINANCE32UI_EXT = 0x8D74;
enum uint GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
enum uint GL_RGBA16UI_EXT = 0x8D76;
enum uint GL_RGB16UI_EXT = 0x8D77;
enum uint GL_ALPHA16UI_EXT = 0x8D78;
enum uint GL_INTENSITY16UI_EXT = 0x8D79;
enum uint GL_LUMINANCE16UI_EXT = 0x8D7A;
enum uint GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
enum uint GL_RGBA8UI_EXT = 0x8D7C;
enum uint GL_RGB8UI_EXT = 0x8D7D;
enum uint GL_ALPHA8UI_EXT = 0x8D7E;
enum uint GL_INTENSITY8UI_EXT = 0x8D7F;
enum uint GL_LUMINANCE8UI_EXT = 0x8D80;
enum uint GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
enum uint GL_RGBA32I_EXT = 0x8D82;
enum uint GL_RGB32I_EXT = 0x8D83;
enum uint GL_ALPHA32I_EXT = 0x8D84;
enum uint GL_INTENSITY32I_EXT = 0x8D85;
enum uint GL_LUMINANCE32I_EXT = 0x8D86;
enum uint GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
enum uint GL_RGBA16I_EXT = 0x8D88;
enum uint GL_RGB16I_EXT = 0x8D89;
enum uint GL_ALPHA16I_EXT = 0x8D8A;
enum uint GL_INTENSITY16I_EXT = 0x8D8B;
enum uint GL_LUMINANCE16I_EXT = 0x8D8C;
enum uint GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
enum uint GL_RGBA8I_EXT = 0x8D8E;
enum uint GL_RGB8I_EXT = 0x8D8F;
enum uint GL_ALPHA8I_EXT = 0x8D90;
enum uint GL_INTENSITY8I_EXT = 0x8D91;
enum uint GL_LUMINANCE8I_EXT = 0x8D92;
enum uint GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
enum uint GL_RED_INTEGER_EXT = 0x8D94;
enum uint GL_GREEN_INTEGER_EXT = 0x8D95;
enum uint GL_BLUE_INTEGER_EXT = 0x8D96;
enum uint GL_ALPHA_INTEGER_EXT = 0x8D97;
enum uint GL_RGB_INTEGER_EXT = 0x8D98;
enum uint GL_RGBA_INTEGER_EXT = 0x8D99;
enum uint GL_BGR_INTEGER_EXT = 0x8D9A;
enum uint GL_BGRA_INTEGER_EXT = 0x8D9B;
enum uint GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
enum uint GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
enum uint GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
enum uint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
enum uint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
enum uint GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
enum uint GL_MIRROR_CLAMP_EXT = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
enum uint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
enum uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
enum uint GL_TEXTURE_RESIDENT_EXT = 0x8067;
enum uint GL_TEXTURE_1D_BINDING_EXT = 0x8068;
enum uint GL_TEXTURE_2D_BINDING_EXT = 0x8069;
enum uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
enum uint GL_PERTURB_EXT = 0x85AE;
enum uint GL_TEXTURE_NORMAL_EXT = 0x85AF;
enum uint GL_SRGB_EXT = 0x8C40;
enum uint GL_SRGB8_EXT = 0x8C41;
enum uint GL_SRGB_ALPHA_EXT = 0x8C42;
enum uint GL_SRGB8_ALPHA8_EXT = 0x8C43;
enum uint GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
enum uint GL_SLUMINANCE_EXT = 0x8C46;
enum uint GL_SLUMINANCE8_EXT = 0x8C47;
enum uint GL_COMPRESSED_SRGB_EXT = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
enum uint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
enum uint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
enum uint GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
enum uint GL_DECODE_EXT = 0x8A49;
enum uint GL_SKIP_DECODE_EXT = 0x8A4A;
enum uint GL_RGB9_E5_EXT = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
enum uint GL_ALPHA_SNORM = 0x9010;
enum uint GL_LUMINANCE_SNORM = 0x9011;
enum uint GL_LUMINANCE_ALPHA_SNORM = 0x9012;
enum uint GL_INTENSITY_SNORM = 0x9013;
enum uint GL_ALPHA8_SNORM = 0x9014;
enum uint GL_LUMINANCE8_SNORM = 0x9015;
enum uint GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
enum uint GL_INTENSITY8_SNORM = 0x9017;
enum uint GL_ALPHA16_SNORM = 0x9018;
enum uint GL_LUMINANCE16_SNORM = 0x9019;
enum uint GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
enum uint GL_INTENSITY16_SNORM = 0x901B;
enum uint GL_RED_SNORM = 0x8F90;
enum uint GL_RG_SNORM = 0x8F91;
enum uint GL_RGB_SNORM = 0x8F92;
enum uint GL_RGBA_SNORM = 0x8F93;
enum uint GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
enum uint GL_TIME_ELAPSED_EXT = 0x88BF;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
enum uint GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
enum uint GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_EXT = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
enum uint GL_VERTEX_ARRAY_EXT = 0x8074;
enum uint GL_NORMAL_ARRAY_EXT = 0x8075;
enum uint GL_COLOR_ARRAY_EXT = 0x8076;
enum uint GL_INDEX_ARRAY_EXT = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
enum uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
enum uint GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
enum uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
enum uint GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
enum uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
enum uint GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
enum uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
enum uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
enum uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
enum uint GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
enum uint GL_DOUBLE_VEC2_EXT = 0x8FFC;
enum uint GL_DOUBLE_VEC3_EXT = 0x8FFD;
enum uint GL_DOUBLE_VEC4_EXT = 0x8FFE;
enum uint GL_DOUBLE_MAT2_EXT = 0x8F46;
enum uint GL_DOUBLE_MAT3_EXT = 0x8F47;
enum uint GL_DOUBLE_MAT4_EXT = 0x8F48;
enum uint GL_DOUBLE_MAT2x3_EXT = 0x8F49;
enum uint GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
enum uint GL_VERTEX_SHADER_EXT = 0x8780;
enum uint GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
enum uint GL_OP_INDEX_EXT = 0x8782;
enum uint GL_OP_NEGATE_EXT = 0x8783;
enum uint GL_OP_DOT3_EXT = 0x8784;
enum uint GL_OP_DOT4_EXT = 0x8785;
enum uint GL_OP_MUL_EXT = 0x8786;
enum uint GL_OP_ADD_EXT = 0x8787;
enum uint GL_OP_MADD_EXT = 0x8788;
enum uint GL_OP_FRAC_EXT = 0x8789;
enum uint GL_OP_MAX_EXT = 0x878A;
enum uint GL_OP_MIN_EXT = 0x878B;
enum uint GL_OP_SET_GE_EXT = 0x878C;
enum uint GL_OP_SET_LT_EXT = 0x878D;
enum uint GL_OP_CLAMP_EXT = 0x878E;
enum uint GL_OP_FLOOR_EXT = 0x878F;
enum uint GL_OP_ROUND_EXT = 0x8790;
enum uint GL_OP_EXP_BASE_2_EXT = 0x8791;
enum uint GL_OP_LOG_BASE_2_EXT = 0x8792;
enum uint GL_OP_POWER_EXT = 0x8793;
enum uint GL_OP_RECIP_EXT = 0x8794;
enum uint GL_OP_RECIP_SQRT_EXT = 0x8795;
enum uint GL_OP_SUB_EXT = 0x8796;
enum uint GL_OP_CROSS_PRODUCT_EXT = 0x8797;
enum uint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
enum uint GL_OP_MOV_EXT = 0x8799;
enum uint GL_OUTPUT_VERTEX_EXT = 0x879A;
enum uint GL_OUTPUT_COLOR0_EXT = 0x879B;
enum uint GL_OUTPUT_COLOR1_EXT = 0x879C;
enum uint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
enum uint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
enum uint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
enum uint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
enum uint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
enum uint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
enum uint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
enum uint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
enum uint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
enum uint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
enum uint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
enum uint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
enum uint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
enum uint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
enum uint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
enum uint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
enum uint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
enum uint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
enum uint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
enum uint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
enum uint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
enum uint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
enum uint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
enum uint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
enum uint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
enum uint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
enum uint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
enum uint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
enum uint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
enum uint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
enum uint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
enum uint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
enum uint GL_OUTPUT_FOG_EXT = 0x87BD;
enum uint GL_SCALAR_EXT = 0x87BE;
enum uint GL_VECTOR_EXT = 0x87BF;
enum uint GL_MATRIX_EXT = 0x87C0;
enum uint GL_VARIANT_EXT = 0x87C1;
enum uint GL_INVARIANT_EXT = 0x87C2;
enum uint GL_LOCAL_CONSTANT_EXT = 0x87C3;
enum uint GL_LOCAL_EXT = 0x87C4;
enum uint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
enum uint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
enum uint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
enum uint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
enum uint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
enum uint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
enum uint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
enum uint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
enum uint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
enum uint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
enum uint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
enum uint GL_X_EXT = 0x87D5;
enum uint GL_Y_EXT = 0x87D6;
enum uint GL_Z_EXT = 0x87D7;
enum uint GL_W_EXT = 0x87D8;
enum uint GL_NEGATIVE_X_EXT = 0x87D9;
enum uint GL_NEGATIVE_Y_EXT = 0x87DA;
enum uint GL_NEGATIVE_Z_EXT = 0x87DB;
enum uint GL_NEGATIVE_W_EXT = 0x87DC;
enum uint GL_ZERO_EXT = 0x87DD;
enum uint GL_ONE_EXT = 0x87DE;
enum uint GL_NEGATIVE_ONE_EXT = 0x87DF;
enum uint GL_NORMALIZED_RANGE_EXT = 0x87E0;
enum uint GL_FULL_RANGE_EXT = 0x87E1;
enum uint GL_CURRENT_VERTEX_EXT = 0x87E2;
enum uint GL_MVP_MATRIX_EXT = 0x87E3;
enum uint GL_VARIANT_VALUE_EXT = 0x87E4;
enum uint GL_VARIANT_DATATYPE_EXT = 0x87E5;
enum uint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
enum uint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
enum uint GL_VARIANT_ARRAY_EXT = 0x87E8;
enum uint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
enum uint GL_INVARIANT_VALUE_EXT = 0x87EA;
enum uint GL_INVARIANT_DATATYPE_EXT = 0x87EB;
enum uint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
enum uint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
enum uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
enum uint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
enum uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
enum uint GL_MODELVIEW1_MATRIX_EXT = 0x8506;
enum uint GL_VERTEX_WEIGHTING_EXT = 0x8509;
enum uint GL_MODELVIEW0_EXT = 0x1700;
enum uint GL_MODELVIEW1_EXT = 0x850A;
enum uint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
enum uint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
enum uint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
enum uint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
enum uint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
enum uint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
enum uint GL_SYNC_X11_FENCE_EXT = 0x90E1;
enum uint GL_IGNORE_BORDER_HP = 0x8150;
enum uint GL_CONSTANT_BORDER_HP = 0x8151;
enum uint GL_REPLICATE_BORDER_HP = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
enum uint GL_IMAGE_SCALE_X_HP = 0x8155;
enum uint GL_IMAGE_SCALE_Y_HP = 0x8156;
enum uint GL_IMAGE_TRANSLATE_X_HP = 0x8157;
enum uint GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
enum uint GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
enum uint GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
enum uint GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
enum uint GL_IMAGE_MAG_FILTER_HP = 0x815C;
enum uint GL_IMAGE_MIN_FILTER_HP = 0x815D;
enum uint GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
enum uint GL_CUBIC_HP = 0x815F;
enum uint GL_AVERAGE_HP = 0x8160;
enum uint GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
enum uint GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
enum uint GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
enum uint GL_OCCLUSION_TEST_HP = 0x8165;
enum uint GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
enum uint GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
enum uint GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
enum uint GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
enum uint GL_CULL_VERTEX_IBM = 103050;
enum uint GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
enum uint GL_ALL_STATIC_DATA_IBM = 103060;
enum uint GL_STATIC_VERTEX_ARRAY_IBM = 103061;
enum uint GL_MIRRORED_REPEAT_IBM = 0x8370;
enum uint GL_VERTEX_ARRAY_LIST_IBM = 103070;
enum uint GL_NORMAL_ARRAY_LIST_IBM = 103071;
enum uint GL_COLOR_ARRAY_LIST_IBM = 103072;
enum uint GL_INDEX_ARRAY_LIST_IBM = 103073;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
enum uint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
enum uint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
enum uint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
enum uint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
enum uint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
enum uint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
enum uint GL_RED_MIN_CLAMP_INGR = 0x8560;
enum uint GL_GREEN_MIN_CLAMP_INGR = 0x8561;
enum uint GL_BLUE_MIN_CLAMP_INGR = 0x8562;
enum uint GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
enum uint GL_RED_MAX_CLAMP_INGR = 0x8564;
enum uint GL_GREEN_MAX_CLAMP_INGR = 0x8565;
enum uint GL_BLUE_MAX_CLAMP_INGR = 0x8566;
enum uint GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
enum uint GL_INTERLACE_READ_INGR = 0x8568;
enum uint GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
enum uint GL_LAYOUT_DEFAULT_INTEL = 0;
enum uint GL_LAYOUT_LINEAR_INTEL = 1;
enum uint GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
enum uint GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
enum uint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
enum uint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
enum uint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
enum uint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
enum uint GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
enum uint GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
enum uint GL_PERFQUERY_WAIT_INTEL = 0x83FB;
enum uint GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
enum uint GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
enum uint GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
enum uint GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
enum uint GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
enum uint GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
enum uint GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
enum uint GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
enum uint GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
enum uint GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
enum uint GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
enum uint GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
enum uint GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
enum uint GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
enum uint GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
enum uint GL_MULTIPLY_KHR = 0x9294;
enum uint GL_SCREEN_KHR = 0x9295;
enum uint GL_OVERLAY_KHR = 0x9296;
enum uint GL_DARKEN_KHR = 0x9297;
enum uint GL_LIGHTEN_KHR = 0x9298;
enum uint GL_COLORDODGE_KHR = 0x9299;
enum uint GL_COLORBURN_KHR = 0x929A;
enum uint GL_HARDLIGHT_KHR = 0x929B;
enum uint GL_SOFTLIGHT_KHR = 0x929C;
enum uint GL_DIFFERENCE_KHR = 0x929E;
enum uint GL_EXCLUSION_KHR = 0x92A0;
enum uint GL_HSL_HUE_KHR = 0x92AD;
enum uint GL_HSL_SATURATION_KHR = 0x92AE;
enum uint GL_HSL_COLOR_KHR = 0x92AF;
enum uint GL_HSL_LUMINOSITY_KHR = 0x92B0;
enum uint GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
enum uint GL_DEBUG_SOURCE_API_KHR = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_KHR = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_KHR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_KHR = 0x8251;
enum uint GL_DEBUG_TYPE_MARKER_KHR = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
enum uint GL_BUFFER_KHR = 0x82E0;
enum uint GL_SHADER_KHR = 0x82E1;
enum uint GL_PROGRAM_KHR = 0x82E2;
enum uint GL_VERTEX_ARRAY_KHR = 0x8074;
enum uint GL_QUERY_KHR = 0x82E3;
enum uint GL_PROGRAM_PIPELINE_KHR = 0x82E4;
enum uint GL_SAMPLER_KHR = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH_KHR = 0x82E8;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_KHR = 0x9148;
enum uint GL_DEBUG_OUTPUT_KHR = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
enum uint GL_STACK_OVERFLOW_KHR = 0x0503;
enum uint GL_STACK_UNDERFLOW_KHR = 0x0504;
enum uint GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
enum uint GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
enum uint GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
enum uint GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_KHR = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_KHR = 0x8261;
enum uint GL_CONTEXT_LOST_KHR = 0x0507;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
enum uint GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
enum uint GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
enum uint GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
enum uint GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
enum uint GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
enum uint GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
enum uint GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
enum uint GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
enum uint GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
enum uint GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
enum uint GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
enum uint GL_TEXTURE_1D_STACK_MESAX = 0x8759;
enum uint GL_TEXTURE_2D_STACK_MESAX = 0x875A;
enum uint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
enum uint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
enum uint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
enum uint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
enum uint GL_PACK_INVERT_MESA = 0x8758;
enum uint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
enum uint GL_YCBCR_MESA = 0x8757;
enum uint GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
enum uint GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
enum uint GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
enum uint GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
enum uint GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
enum uint GL_BLEND_OVERLAP_NV = 0x9281;
enum uint GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
enum uint GL_BLUE_NV = 0x1905;
enum uint GL_COLORBURN_NV = 0x929A;
enum uint GL_COLORDODGE_NV = 0x9299;
enum uint GL_CONJOINT_NV = 0x9284;
enum uint GL_CONTRAST_NV = 0x92A1;
enum uint GL_DARKEN_NV = 0x9297;
enum uint GL_DIFFERENCE_NV = 0x929E;
enum uint GL_DISJOINT_NV = 0x9283;
enum uint GL_DST_ATOP_NV = 0x928F;
enum uint GL_DST_IN_NV = 0x928B;
enum uint GL_DST_NV = 0x9287;
enum uint GL_DST_OUT_NV = 0x928D;
enum uint GL_DST_OVER_NV = 0x9289;
enum uint GL_EXCLUSION_NV = 0x92A0;
enum uint GL_GREEN_NV = 0x1904;
enum uint GL_HARDLIGHT_NV = 0x929B;
enum uint GL_HARDMIX_NV = 0x92A9;
enum uint GL_HSL_COLOR_NV = 0x92AF;
enum uint GL_HSL_HUE_NV = 0x92AD;
enum uint GL_HSL_LUMINOSITY_NV = 0x92B0;
enum uint GL_HSL_SATURATION_NV = 0x92AE;
enum uint GL_INVERT_OVG_NV = 0x92B4;
enum uint GL_INVERT_RGB_NV = 0x92A3;
enum uint GL_LIGHTEN_NV = 0x9298;
enum uint GL_LINEARBURN_NV = 0x92A5;
enum uint GL_LINEARDODGE_NV = 0x92A4;
enum uint GL_LINEARLIGHT_NV = 0x92A7;
enum uint GL_MINUS_CLAMPED_NV = 0x92B3;
enum uint GL_MINUS_NV = 0x929F;
enum uint GL_MULTIPLY_NV = 0x9294;
enum uint GL_OVERLAY_NV = 0x9296;
enum uint GL_PINLIGHT_NV = 0x92A8;
enum uint GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
enum uint GL_PLUS_CLAMPED_NV = 0x92B1;
enum uint GL_PLUS_DARKER_NV = 0x9292;
enum uint GL_PLUS_NV = 0x9291;
enum uint GL_RED_NV = 0x1903;
enum uint GL_SCREEN_NV = 0x9295;
enum uint GL_SOFTLIGHT_NV = 0x929C;
enum uint GL_SRC_ATOP_NV = 0x928E;
enum uint GL_SRC_IN_NV = 0x928A;
enum uint GL_SRC_NV = 0x9286;
enum uint GL_SRC_OUT_NV = 0x928C;
enum uint GL_SRC_OVER_NV = 0x9288;
enum uint GL_UNCORRELATED_NV = 0x9282;
enum uint GL_VIVIDLIGHT_NV = 0x92A6;
enum uint GL_XOR_NV = 0x1506;
enum uint GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
enum uint GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
enum uint GL_NOP_COMMAND_NV = 0x0001;
enum uint GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
enum uint GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
enum uint GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
enum uint GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
enum uint GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
enum uint GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
enum uint GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
enum uint GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
enum uint GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
enum uint GL_BLEND_COLOR_COMMAND_NV = 0x000B;
enum uint GL_STENCIL_REF_COMMAND_NV = 0x000C;
enum uint GL_LINE_WIDTH_COMMAND_NV = 0x000D;
enum uint GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
enum uint GL_ALPHA_REF_COMMAND_NV = 0x000F;
enum uint GL_VIEWPORT_COMMAND_NV = 0x0010;
enum uint GL_SCISSOR_COMMAND_NV = 0x0011;
enum uint GL_FRONT_FACE_COMMAND_NV = 0x0012;
enum uint GL_COMPUTE_PROGRAM_NV = 0x90FB;
enum uint GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
enum uint GL_QUERY_WAIT_NV = 0x8E13;
enum uint GL_QUERY_NO_WAIT_NV = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
enum uint GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
enum uint GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
enum uint GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
enum uint GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
enum uint GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
enum uint GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
enum uint GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
enum uint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
enum uint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
enum uint GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
enum uint GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
enum uint GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
enum uint GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
enum uint GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
enum uint GL_DEPTH_CLAMP_NV = 0x864F;
enum uint GL_EVAL_2D_NV = 0x86C0;
enum uint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
enum uint GL_MAP_TESSELLATION_NV = 0x86C2;
enum uint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
enum uint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
enum uint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
enum uint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
enum uint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
enum uint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
enum uint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
enum uint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
enum uint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
enum uint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
enum uint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
enum uint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
enum uint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
enum uint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
enum uint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
enum uint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
enum uint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
enum uint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
enum uint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
enum uint GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
enum uint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
enum uint GL_SAMPLE_POSITION_NV = 0x8E50;
enum uint GL_SAMPLE_MASK_NV = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
enum uint GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
enum uint GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
enum uint GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
enum uint GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
enum uint GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
enum uint GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
enum uint GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
enum uint GL_ALL_COMPLETED_NV = 0x84F2;
enum uint GL_FENCE_STATUS_NV = 0x84F3;
enum uint GL_FENCE_CONDITION_NV = 0x84F4;
enum uint GL_FILL_RECTANGLE_NV = 0x933C;
enum uint GL_FLOAT_R_NV = 0x8880;
enum uint GL_FLOAT_RG_NV = 0x8881;
enum uint GL_FLOAT_RGB_NV = 0x8882;
enum uint GL_FLOAT_RGBA_NV = 0x8883;
enum uint GL_FLOAT_R16_NV = 0x8884;
enum uint GL_FLOAT_R32_NV = 0x8885;
enum uint GL_FLOAT_RG16_NV = 0x8886;
enum uint GL_FLOAT_RG32_NV = 0x8887;
enum uint GL_FLOAT_RGB16_NV = 0x8888;
enum uint GL_FLOAT_RGB32_NV = 0x8889;
enum uint GL_FLOAT_RGBA16_NV = 0x888A;
enum uint GL_FLOAT_RGBA32_NV = 0x888B;
enum uint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
enum uint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
enum uint GL_FLOAT_RGBA_MODE_NV = 0x888E;
enum uint GL_FOG_DISTANCE_MODE_NV = 0x855A;
enum uint GL_EYE_RADIAL_NV = 0x855B;
enum uint GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
enum uint GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
enum uint GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
enum uint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
enum uint GL_FRAGMENT_PROGRAM_NV = 0x8870;
enum uint GL_MAX_TEXTURE_COORDS_NV = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
enum uint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
enum uint GL_PROGRAM_ERROR_STRING_NV = 0x8874;
enum uint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
enum uint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
enum uint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
enum uint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
enum uint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
enum uint GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
enum uint GL_COLOR_SAMPLES_NV = 0x8E20;
enum uint GL_DEPTH_SAMPLES_NV = 0x932D;
enum uint GL_STENCIL_SAMPLES_NV = 0x932E;
enum uint GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
enum uint GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
enum uint GL_COVERAGE_MODULATION_NV = 0x9332;
enum uint GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
enum uint GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
enum uint GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
enum uint GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
enum uint GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
enum uint GL_GEOMETRY_PROGRAM_NV = 0x8C26;
enum uint GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
enum uint GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
enum uint GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
enum uint GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
enum uint GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
enum uint GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
enum uint GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
enum uint GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
enum uint GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
enum uint GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
enum uint GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
enum uint GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
enum uint GL_HALF_FLOAT_NV = 0x140B;
enum uint GL_MULTISAMPLES_NV = 0x9371;
enum uint GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
enum uint GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
enum uint GL_CONFORMANT_NV = 0x9374;
enum uint GL_MAX_SHININESS_NV = 0x8504;
enum uint GL_MAX_SPOT_EXPONENT_NV = 0x8505;
enum uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
enum uint GL_PIXEL_COUNTER_BITS_NV = 0x8864;
enum uint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
enum uint GL_PIXEL_COUNT_NV = 0x8866;
enum uint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
enum uint GL_DEPTH_STENCIL_NV = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_NV = 0x84FA;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
enum uint GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
enum uint GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
enum uint GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
enum uint GL_PATH_FORMAT_SVG_NV = 0x9070;
enum uint GL_PATH_FORMAT_PS_NV = 0x9071;
enum uint GL_STANDARD_FONT_NAME_NV = 0x9072;
enum uint GL_SYSTEM_FONT_NAME_NV = 0x9073;
enum uint GL_FILE_NAME_NV = 0x9074;
enum uint GL_PATH_STROKE_WIDTH_NV = 0x9075;
enum uint GL_PATH_END_CAPS_NV = 0x9076;
enum uint GL_PATH_INITIAL_END_CAP_NV = 0x9077;
enum uint GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
enum uint GL_PATH_JOIN_STYLE_NV = 0x9079;
enum uint GL_PATH_MITER_LIMIT_NV = 0x907A;
enum uint GL_PATH_DASH_CAPS_NV = 0x907B;
enum uint GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
enum uint GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
enum uint GL_PATH_DASH_OFFSET_NV = 0x907E;
enum uint GL_PATH_CLIENT_LENGTH_NV = 0x907F;
enum uint GL_PATH_FILL_MODE_NV = 0x9080;
enum uint GL_PATH_FILL_MASK_NV = 0x9081;
enum uint GL_PATH_FILL_COVER_MODE_NV = 0x9082;
enum uint GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
enum uint GL_PATH_STROKE_MASK_NV = 0x9084;
enum uint GL_COUNT_UP_NV = 0x9088;
enum uint GL_COUNT_DOWN_NV = 0x9089;
enum uint GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
enum uint GL_CONVEX_HULL_NV = 0x908B;
enum uint GL_BOUNDING_BOX_NV = 0x908D;
enum uint GL_TRANSLATE_X_NV = 0x908E;
enum uint GL_TRANSLATE_Y_NV = 0x908F;
enum uint GL_TRANSLATE_2D_NV = 0x9090;
enum uint GL_TRANSLATE_3D_NV = 0x9091;
enum uint GL_AFFINE_2D_NV = 0x9092;
enum uint GL_AFFINE_3D_NV = 0x9094;
enum uint GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
enum uint GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
enum uint GL_UTF8_NV = 0x909A;
enum uint GL_UTF16_NV = 0x909B;
enum uint GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
enum uint GL_PATH_COMMAND_COUNT_NV = 0x909D;
enum uint GL_PATH_COORD_COUNT_NV = 0x909E;
enum uint GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
enum uint GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
enum uint GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
enum uint GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
enum uint GL_SQUARE_NV = 0x90A3;
enum uint GL_ROUND_NV = 0x90A4;
enum uint GL_TRIANGULAR_NV = 0x90A5;
enum uint GL_BEVEL_NV = 0x90A6;
enum uint GL_MITER_REVERT_NV = 0x90A7;
enum uint GL_MITER_TRUNCATE_NV = 0x90A8;
enum uint GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
enum uint GL_USE_MISSING_GLYPH_NV = 0x90AA;
enum uint GL_PATH_ERROR_POSITION_NV = 0x90AB;
enum uint GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
enum uint GL_ADJACENT_PAIRS_NV = 0x90AE;
enum uint GL_FIRST_TO_REST_NV = 0x90AF;
enum uint GL_PATH_GEN_MODE_NV = 0x90B0;
enum uint GL_PATH_GEN_COEFF_NV = 0x90B1;
enum uint GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
enum uint GL_PATH_STENCIL_FUNC_NV = 0x90B7;
enum uint GL_PATH_STENCIL_REF_NV = 0x90B8;
enum uint GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
enum uint GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
enum uint GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
enum uint GL_MOVE_TO_RESETS_NV = 0x90B5;
enum uint GL_MOVE_TO_CONTINUES_NV = 0x90B6;
enum uint GL_CLOSE_PATH_NV = 0x00;
enum uint GL_MOVE_TO_NV = 0x02;
enum uint GL_RELATIVE_MOVE_TO_NV = 0x03;
enum uint GL_LINE_TO_NV = 0x04;
enum uint GL_RELATIVE_LINE_TO_NV = 0x05;
enum uint GL_HORIZONTAL_LINE_TO_NV = 0x06;
enum uint GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
enum uint GL_VERTICAL_LINE_TO_NV = 0x08;
enum uint GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
enum uint GL_QUADRATIC_CURVE_TO_NV = 0x0A;
enum uint GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
enum uint GL_CUBIC_CURVE_TO_NV = 0x0C;
enum uint GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
enum uint GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
enum uint GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
enum uint GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
enum uint GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
enum uint GL_SMALL_CCW_ARC_TO_NV = 0x12;
enum uint GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
enum uint GL_SMALL_CW_ARC_TO_NV = 0x14;
enum uint GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
enum uint GL_LARGE_CCW_ARC_TO_NV = 0x16;
enum uint GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
enum uint GL_LARGE_CW_ARC_TO_NV = 0x18;
enum uint GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
enum uint GL_RESTART_PATH_NV = 0xF0;
enum uint GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
enum uint GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
enum uint GL_RECT_NV = 0xF6;
enum uint GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
enum uint GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
enum uint GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
enum uint GL_ARC_TO_NV = 0xFE;
enum uint GL_RELATIVE_ARC_TO_NV = 0xFF;
enum uint GL_BOLD_BIT_NV = 0x01;
enum uint GL_ITALIC_BIT_NV = 0x02;
enum uint GL_GLYPH_WIDTH_BIT_NV = 0x01;
enum uint GL_GLYPH_HEIGHT_BIT_NV = 0x02;
enum uint GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
enum uint GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
enum uint GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
enum uint GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
enum uint GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
enum uint GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
enum uint GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
enum uint GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
enum uint GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
enum uint GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
enum uint GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
enum uint GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
enum uint GL_FONT_ASCENDER_BIT_NV = 0x00200000;
enum uint GL_FONT_DESCENDER_BIT_NV = 0x00400000;
enum uint GL_FONT_HEIGHT_BIT_NV = 0x00800000;
enum uint GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
enum uint GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
enum uint GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
enum uint GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
enum uint GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
enum uint GL_ROUNDED_RECT_NV = 0xE8;
enum uint GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
enum uint GL_ROUNDED_RECT2_NV = 0xEA;
enum uint GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
enum uint GL_ROUNDED_RECT4_NV = 0xEC;
enum uint GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
enum uint GL_ROUNDED_RECT8_NV = 0xEE;
enum uint GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
enum uint GL_RELATIVE_RECT_NV = 0xF7;
enum uint GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
enum uint GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
enum uint GL_FONT_UNAVAILABLE_NV = 0x936A;
enum uint GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
enum uint GL_CONIC_CURVE_TO_NV = 0x1A;
enum uint GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
enum uint GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
enum uint GL_STANDARD_FONT_FORMAT_NV = 0x936C;
enum uint GL_2_BYTES_NV = 0x1407;
enum uint GL_3_BYTES_NV = 0x1408;
enum uint GL_4_BYTES_NV = 0x1409;
enum uint GL_EYE_LINEAR_NV = 0x2400;
enum uint GL_OBJECT_LINEAR_NV = 0x2401;
enum uint GL_CONSTANT_NV = 0x8576;
enum uint GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
enum uint GL_PRIMARY_COLOR_NV = 0x852C;
enum uint GL_SECONDARY_COLOR_NV = 0x852D;
enum uint GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
enum uint GL_PATH_PROJECTION_NV = 0x1701;
enum uint GL_PATH_MODELVIEW_NV = 0x1700;
enum uint GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
enum uint GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
enum uint GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
enum uint GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
enum uint GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
enum uint GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
enum uint GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
enum uint GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
enum uint GL_FRAGMENT_INPUT_NV = 0x936D;
enum uint GL_SHARED_EDGE_NV = 0xC0;
enum uint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
enum uint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
enum uint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
enum uint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
enum uint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
enum uint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
enum uint GL_POINT_SPRITE_NV = 0x8861;
enum uint GL_COORD_REPLACE_NV = 0x8862;
enum uint GL_POINT_SPRITE_R_MODE_NV = 0x8863;
enum uint GL_FRAME_NV = 0x8E26;
enum uint GL_FIELDS_NV = 0x8E27;
enum uint GL_CURRENT_TIME_NV = 0x8E28;
enum uint GL_NUM_FILL_STREAMS_NV = 0x8E29;
enum uint GL_PRESENT_TIME_NV = 0x8E2A;
enum uint GL_PRESENT_DURATION_NV = 0x8E2B;
enum uint GL_PRIMITIVE_RESTART_NV = 0x8558;
enum uint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
enum uint GL_REGISTER_COMBINERS_NV = 0x8522;
enum uint GL_VARIABLE_A_NV = 0x8523;
enum uint GL_VARIABLE_B_NV = 0x8524;
enum uint GL_VARIABLE_C_NV = 0x8525;
enum uint GL_VARIABLE_D_NV = 0x8526;
enum uint GL_VARIABLE_E_NV = 0x8527;
enum uint GL_VARIABLE_F_NV = 0x8528;
enum uint GL_VARIABLE_G_NV = 0x8529;
enum uint GL_CONSTANT_COLOR0_NV = 0x852A;
enum uint GL_CONSTANT_COLOR1_NV = 0x852B;
enum uint GL_SPARE0_NV = 0x852E;
enum uint GL_SPARE1_NV = 0x852F;
enum uint GL_DISCARD_NV = 0x8530;
enum uint GL_E_TIMES_F_NV = 0x8531;
enum uint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
enum uint GL_UNSIGNED_IDENTITY_NV = 0x8536;
enum uint GL_UNSIGNED_INVERT_NV = 0x8537;
enum uint GL_EXPAND_NORMAL_NV = 0x8538;
enum uint GL_EXPAND_NEGATE_NV = 0x8539;
enum uint GL_HALF_BIAS_NORMAL_NV = 0x853A;
enum uint GL_HALF_BIAS_NEGATE_NV = 0x853B;
enum uint GL_SIGNED_IDENTITY_NV = 0x853C;
enum uint GL_SIGNED_NEGATE_NV = 0x853D;
enum uint GL_SCALE_BY_TWO_NV = 0x853E;
enum uint GL_SCALE_BY_FOUR_NV = 0x853F;
enum uint GL_SCALE_BY_ONE_HALF_NV = 0x8540;
enum uint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
enum uint GL_COMBINER_INPUT_NV = 0x8542;
enum uint GL_COMBINER_MAPPING_NV = 0x8543;
enum uint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
enum uint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
enum uint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
enum uint GL_COMBINER_MUX_SUM_NV = 0x8547;
enum uint GL_COMBINER_SCALE_NV = 0x8548;
enum uint GL_COMBINER_BIAS_NV = 0x8549;
enum uint GL_COMBINER_AB_OUTPUT_NV = 0x854A;
enum uint GL_COMBINER_CD_OUTPUT_NV = 0x854B;
enum uint GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
enum uint GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
enum uint GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
enum uint GL_COLOR_SUM_CLAMP_NV = 0x854F;
enum uint GL_COMBINER0_NV = 0x8550;
enum uint GL_COMBINER1_NV = 0x8551;
enum uint GL_COMBINER2_NV = 0x8552;
enum uint GL_COMBINER3_NV = 0x8553;
enum uint GL_COMBINER4_NV = 0x8554;
enum uint GL_COMBINER5_NV = 0x8555;
enum uint GL_COMBINER6_NV = 0x8556;
enum uint GL_COMBINER7_NV = 0x8557;
enum uint GL_PER_STAGE_CONSTANTS_NV = 0x8535;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
enum uint GL_SAMPLE_LOCATION_NV = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
enum uint GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
enum uint GL_GPU_ADDRESS_NV = 0x8F34;
enum uint GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
enum uint GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
enum uint GL_WARP_SIZE_NV = 0x9339;
enum uint GL_WARPS_PER_SM_NV = 0x933A;
enum uint GL_SM_COUNT_NV = 0x933B;
enum uint GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
enum uint GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
enum uint GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
enum uint GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
enum uint GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
enum uint GL_EMBOSS_LIGHT_NV = 0x855D;
enum uint GL_EMBOSS_CONSTANT_NV = 0x855E;
enum uint GL_EMBOSS_MAP_NV = 0x855F;
enum uint GL_NORMAL_MAP_NV = 0x8511;
enum uint GL_REFLECTION_MAP_NV = 0x8512;
enum uint GL_COMBINE4_NV = 0x8503;
enum uint GL_SOURCE3_RGB_NV = 0x8583;
enum uint GL_SOURCE3_ALPHA_NV = 0x858B;
enum uint GL_OPERAND3_RGB_NV = 0x8593;
enum uint GL_OPERAND3_ALPHA_NV = 0x859B;
enum uint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
enum uint GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
enum uint GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
enum uint GL_TEXTURE_RECTANGLE_NV = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
enum uint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
enum uint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
enum uint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
enum uint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
enum uint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
enum uint GL_SHADER_CONSISTENT_NV = 0x86DD;
enum uint GL_TEXTURE_SHADER_NV = 0x86DE;
enum uint GL_SHADER_OPERATION_NV = 0x86DF;
enum uint GL_CULL_MODES_NV = 0x86E0;
enum uint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
enum uint GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
enum uint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
enum uint GL_CONST_EYE_NV = 0x86E5;
enum uint GL_PASS_THROUGH_NV = 0x86E6;
enum uint GL_CULL_FRAGMENT_NV = 0x86E7;
enum uint GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
enum uint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
enum uint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
enum uint GL_DOT_PRODUCT_NV = 0x86EC;
enum uint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
enum uint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
enum uint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
enum uint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
enum uint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
enum uint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
enum uint GL_HILO_NV = 0x86F4;
enum uint GL_DSDT_NV = 0x86F5;
enum uint GL_DSDT_MAG_NV = 0x86F6;
enum uint GL_DSDT_MAG_VIB_NV = 0x86F7;
enum uint GL_HILO16_NV = 0x86F8;
enum uint GL_SIGNED_HILO_NV = 0x86F9;
enum uint GL_SIGNED_HILO16_NV = 0x86FA;
enum uint GL_SIGNED_RGBA_NV = 0x86FB;
enum uint GL_SIGNED_RGBA8_NV = 0x86FC;
enum uint GL_SIGNED_RGB_NV = 0x86FE;
enum uint GL_SIGNED_RGB8_NV = 0x86FF;
enum uint GL_SIGNED_LUMINANCE_NV = 0x8701;
enum uint GL_SIGNED_LUMINANCE8_NV = 0x8702;
enum uint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
enum uint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
enum uint GL_SIGNED_ALPHA_NV = 0x8705;
enum uint GL_SIGNED_ALPHA8_NV = 0x8706;
enum uint GL_SIGNED_INTENSITY_NV = 0x8707;
enum uint GL_SIGNED_INTENSITY8_NV = 0x8708;
enum uint GL_DSDT8_NV = 0x8709;
enum uint GL_DSDT8_MAG8_NV = 0x870A;
enum uint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
enum uint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
enum uint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
enum uint GL_HI_SCALE_NV = 0x870E;
enum uint GL_LO_SCALE_NV = 0x870F;
enum uint GL_DS_SCALE_NV = 0x8710;
enum uint GL_DT_SCALE_NV = 0x8711;
enum uint GL_MAGNITUDE_SCALE_NV = 0x8712;
enum uint GL_VIBRANCE_SCALE_NV = 0x8713;
enum uint GL_HI_BIAS_NV = 0x8714;
enum uint GL_LO_BIAS_NV = 0x8715;
enum uint GL_DS_BIAS_NV = 0x8716;
enum uint GL_DT_BIAS_NV = 0x8717;
enum uint GL_MAGNITUDE_BIAS_NV = 0x8718;
enum uint GL_VIBRANCE_BIAS_NV = 0x8719;
enum uint GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
enum uint GL_TEXTURE_HI_SIZE_NV = 0x871B;
enum uint GL_TEXTURE_LO_SIZE_NV = 0x871C;
enum uint GL_TEXTURE_DS_SIZE_NV = 0x871D;
enum uint GL_TEXTURE_DT_SIZE_NV = 0x871E;
enum uint GL_TEXTURE_MAG_SIZE_NV = 0x871F;
enum uint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
enum uint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
enum uint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
enum uint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
enum uint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
enum uint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
enum uint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
enum uint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
enum uint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
enum uint GL_HILO8_NV = 0x885E;
enum uint GL_SIGNED_HILO8_NV = 0x885F;
enum uint GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
enum uint GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
enum uint GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
enum uint GL_TEXTURE_COORD_NV = 0x8C79;
enum uint GL_CLIP_DISTANCE_NV = 0x8C7A;
enum uint GL_VERTEX_ID_NV = 0x8C7B;
enum uint GL_PRIMITIVE_ID_NV = 0x8C7C;
enum uint GL_GENERIC_ATTRIB_NV = 0x8C7D;
enum uint GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
enum uint GL_ACTIVE_VARYINGS_NV = 0x8C81;
enum uint GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
enum uint GL_PRIMITIVES_GENERATED_NV = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_NV = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
enum uint GL_LAYER_NV = 0x8DAA;
enum uint GL_NEXT_BUFFER_NV = -2;
enum uint GL_SKIP_COMPONENTS4_NV = -3;
enum uint GL_SKIP_COMPONENTS3_NV = -4;
enum uint GL_SKIP_COMPONENTS2_NV = -5;
enum uint GL_SKIP_COMPONENTS1_NV = -6;
enum uint GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
enum uint GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
enum uint GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
enum uint GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
enum uint GL_SURFACE_STATE_NV = 0x86EB;
enum uint GL_SURFACE_REGISTERED_NV = 0x86FD;
enum uint GL_SURFACE_MAPPED_NV = 0x8700;
enum uint GL_WRITE_DISCARD_NV = 0x88BE;
enum uint GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
enum uint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
enum uint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
enum uint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
enum uint GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
enum uint GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
enum uint GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
enum uint GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
enum uint GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
enum uint GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
enum uint GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
enum uint GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
enum uint GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
enum uint GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
enum uint GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
enum uint GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
enum uint GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
enum uint GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
enum uint GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
enum uint GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
enum uint GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
enum uint GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
enum uint GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
enum uint GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
enum uint GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
enum uint GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
enum uint GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
enum uint GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
enum uint GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
enum uint GL_VERTEX_PROGRAM_NV = 0x8620;
enum uint GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
enum uint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
enum uint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
enum uint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
enum uint GL_CURRENT_ATTRIB_NV = 0x8626;
enum uint GL_PROGRAM_LENGTH_NV = 0x8627;
enum uint GL_PROGRAM_STRING_NV = 0x8628;
enum uint GL_MODELVIEW_PROJECTION_NV = 0x8629;
enum uint GL_IDENTITY_NV = 0x862A;
enum uint GL_INVERSE_NV = 0x862B;
enum uint GL_TRANSPOSE_NV = 0x862C;
enum uint GL_INVERSE_TRANSPOSE_NV = 0x862D;
enum uint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
enum uint GL_MAX_TRACK_MATRICES_NV = 0x862F;
enum uint GL_MATRIX0_NV = 0x8630;
enum uint GL_MATRIX1_NV = 0x8631;
enum uint GL_MATRIX2_NV = 0x8632;
enum uint GL_MATRIX3_NV = 0x8633;
enum uint GL_MATRIX4_NV = 0x8634;
enum uint GL_MATRIX5_NV = 0x8635;
enum uint GL_MATRIX6_NV = 0x8636;
enum uint GL_MATRIX7_NV = 0x8637;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
enum uint GL_CURRENT_MATRIX_NV = 0x8641;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
enum uint GL_PROGRAM_PARAMETER_NV = 0x8644;
enum uint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
enum uint GL_PROGRAM_TARGET_NV = 0x8646;
enum uint GL_PROGRAM_RESIDENT_NV = 0x8647;
enum uint GL_TRACK_MATRIX_NV = 0x8648;
enum uint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
enum uint GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
enum uint GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
enum uint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
enum uint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
enum uint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
enum uint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
enum uint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
enum uint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
enum uint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
enum uint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
enum uint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
enum uint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
enum uint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
enum uint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
enum uint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
enum uint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
enum uint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
enum uint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
enum uint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
enum uint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
enum uint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
enum uint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
enum uint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
enum uint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
enum uint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
enum uint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
enum uint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
enum uint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
enum uint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
enum uint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
enum uint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
enum uint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
enum uint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
enum uint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
enum uint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
enum uint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
enum uint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
enum uint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
enum uint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
enum uint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
enum uint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
enum uint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
enum uint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
enum uint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
enum uint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
enum uint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
enum uint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
enum uint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
enum uint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
enum uint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
enum uint GL_VIDEO_BUFFER_NV = 0x9020;
enum uint GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
enum uint GL_FIELD_UPPER_NV = 0x9022;
enum uint GL_FIELD_LOWER_NV = 0x9023;
enum uint GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
enum uint GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
enum uint GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
enum uint GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
enum uint GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
enum uint GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
enum uint GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
enum uint GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
enum uint GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
enum uint GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
enum uint GL_PARTIAL_SUCCESS_NV = 0x902E;
enum uint GL_SUCCESS_NV = 0x902F;
enum uint GL_FAILURE_NV = 0x9030;
enum uint GL_YCBYCR8_422_NV = 0x9031;
enum uint GL_YCBAYCR8A_4224_NV = 0x9032;
enum uint GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
enum uint GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
enum uint GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
enum uint GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
enum uint GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
enum uint GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
enum uint GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
enum uint GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
enum uint GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
enum uint GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
enum uint GL_PALETTE4_RGB8_OES = 0x8B90;
enum uint GL_PALETTE4_RGBA8_OES = 0x8B91;
enum uint GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
enum uint GL_PALETTE4_RGBA4_OES = 0x8B93;
enum uint GL_PALETTE4_RGB5_A1_OES = 0x8B94;
enum uint GL_PALETTE8_RGB8_OES = 0x8B95;
enum uint GL_PALETTE8_RGBA8_OES = 0x8B96;
enum uint GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
enum uint GL_PALETTE8_RGBA4_OES = 0x8B98;
enum uint GL_PALETTE8_RGB5_A1_OES = 0x8B99;
enum uint GL_FIXED_OES = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
enum uint GL_INTERLACE_OML = 0x8980;
enum uint GL_INTERLACE_READ_OML = 0x8981;
enum uint GL_PACK_RESAMPLE_OML = 0x8984;
enum uint GL_UNPACK_RESAMPLE_OML = 0x8985;
enum uint GL_RESAMPLE_REPLICATE_OML = 0x8986;
enum uint GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
enum uint GL_RESAMPLE_AVERAGE_OML = 0x8988;
enum uint GL_RESAMPLE_DECIMATE_OML = 0x8989;
enum uint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
enum uint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
enum uint GL_MAX_VIEWS_OVR = 0x9631;
enum uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
enum uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
enum uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
enum uint GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
enum uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
enum uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
enum uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
enum uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
enum uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
enum uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
enum uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
enum uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
enum uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
enum uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
enum uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
enum uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
enum uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
enum uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
enum uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
enum uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
enum uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
enum uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
enum uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
enum uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
enum uint GL_COLOR3_BIT_PGI = 0x00010000;
enum uint GL_COLOR4_BIT_PGI = 0x00020000;
enum uint GL_EDGEFLAG_BIT_PGI = 0x00040000;
enum uint GL_INDEX_BIT_PGI = 0x00080000;
enum uint GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
enum uint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
enum uint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
enum uint GL_MAT_EMISSION_BIT_PGI = 0x00800000;
enum uint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
enum uint GL_MAT_SHININESS_BIT_PGI = 0x02000000;
enum uint GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
enum uint GL_NORMAL_BIT_PGI = 0x08000000;
enum uint GL_TEXCOORD1_BIT_PGI = 0x10000000;
enum uint GL_TEXCOORD2_BIT_PGI = 0x20000000;
enum uint GL_TEXCOORD3_BIT_PGI = 0x40000000;
enum uint GL_TEXCOORD4_BIT_PGI = 0x80000000;
enum uint GL_VERTEX23_BIT_PGI = 0x00000004;
enum uint GL_VERTEX4_BIT_PGI = 0x00000008;
enum uint GL_SCREEN_COORDINATES_REND = 0x8490;
enum uint GL_INVERTED_SCREEN_W_REND = 0x8491;
enum uint GL_RGB_S3TC = 0x83A0;
enum uint GL_RGB4_S3TC = 0x83A1;
enum uint GL_RGBA_S3TC = 0x83A2;
enum uint GL_RGBA4_S3TC = 0x83A3;
enum uint GL_RGBA_DXT5_S3TC = 0x83A4;
enum uint GL_RGBA4_DXT5_S3TC = 0x83A5;
enum uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
enum uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
enum uint GL_LINEAR_DETAIL_SGIS = 0x8097;
enum uint GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
enum uint GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
enum uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
enum uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
enum uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
enum uint GL_FOG_FUNC_SGIS = 0x812A;
enum uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
enum uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
enum uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
enum uint GL_MULTISAMPLE_SGIS = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
enum uint GL_SAMPLE_MASK_SGIS = 0x80A0;
enum uint GL_1PASS_SGIS = 0x80A1;
enum uint GL_2PASS_0_SGIS = 0x80A2;
enum uint GL_2PASS_1_SGIS = 0x80A3;
enum uint GL_4PASS_0_SGIS = 0x80A4;
enum uint GL_4PASS_1_SGIS = 0x80A5;
enum uint GL_4PASS_2_SGIS = 0x80A6;
enum uint GL_4PASS_3_SGIS = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
enum uint GL_SAMPLES_SGIS = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
enum uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
enum uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
enum uint GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
enum uint GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
enum uint GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
enum uint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
enum uint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
enum uint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
enum uint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
enum uint GL_EYE_POINT_SGIS = 0x81F4;
enum uint GL_OBJECT_POINT_SGIS = 0x81F5;
enum uint GL_EYE_LINE_SGIS = 0x81F6;
enum uint GL_OBJECT_LINE_SGIS = 0x81F7;
enum uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
enum uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
enum uint GL_LINEAR_SHARPEN_SGIS = 0x80AD;
enum uint GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
enum uint GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
enum uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
enum uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
enum uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
enum uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
enum uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
enum uint GL_TEXTURE_4D_SGIS = 0x8134;
enum uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
enum uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
enum uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
enum uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
enum uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
enum uint GL_CLAMP_TO_BORDER_SGIS = 0x812D;
enum uint GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
enum uint GL_CLAMP_TO_EDGE_SGIS = 0x812F;
enum uint GL_FILTER4_SGIS = 0x8146;
enum uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
enum uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
enum uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
enum uint GL_DUAL_ALPHA4_SGIS = 0x8110;
enum uint GL_DUAL_ALPHA8_SGIS = 0x8111;
enum uint GL_DUAL_ALPHA12_SGIS = 0x8112;
enum uint GL_DUAL_ALPHA16_SGIS = 0x8113;
enum uint GL_DUAL_LUMINANCE4_SGIS = 0x8114;
enum uint GL_DUAL_LUMINANCE8_SGIS = 0x8115;
enum uint GL_DUAL_LUMINANCE12_SGIS = 0x8116;
enum uint GL_DUAL_LUMINANCE16_SGIS = 0x8117;
enum uint GL_DUAL_INTENSITY4_SGIS = 0x8118;
enum uint GL_DUAL_INTENSITY8_SGIS = 0x8119;
enum uint GL_DUAL_INTENSITY12_SGIS = 0x811A;
enum uint GL_DUAL_INTENSITY16_SGIS = 0x811B;
enum uint GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
enum uint GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
enum uint GL_QUAD_ALPHA4_SGIS = 0x811E;
enum uint GL_QUAD_ALPHA8_SGIS = 0x811F;
enum uint GL_QUAD_LUMINANCE4_SGIS = 0x8120;
enum uint GL_QUAD_LUMINANCE8_SGIS = 0x8121;
enum uint GL_QUAD_INTENSITY4_SGIS = 0x8122;
enum uint GL_QUAD_INTENSITY8_SGIS = 0x8123;
enum uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
enum uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
enum uint GL_ASYNC_MARKER_SGIX = 0x8329;
enum uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
enum uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
enum uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
enum uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
enum uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
enum uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
enum uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
enum uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
enum uint GL_ALPHA_MIN_SGIX = 0x8320;
enum uint GL_ALPHA_MAX_SGIX = 0x8321;
enum uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
enum uint GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
enum uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
enum uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
enum uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
enum uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
enum uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
enum uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
enum uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
enum uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
enum uint GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
enum uint GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
enum uint GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
enum uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
enum uint GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
enum uint GL_FOG_OFFSET_SGIX = 0x8198;
enum uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
enum uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
enum uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
enum uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
enum uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
enum uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
enum uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
enum uint GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
enum uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
enum uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
enum uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
enum uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
enum uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
enum uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
enum uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
enum uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
enum uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
enum uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
enum uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
enum uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
enum uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
enum uint GL_FRAMEZOOM_SGIX = 0x818B;
enum uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
enum uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
enum uint GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
enum uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
enum uint GL_INTERLACE_SGIX = 0x8094;
enum uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
enum uint GL_LIST_PRIORITY_SGIX = 0x8182;
enum uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
enum uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
enum uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
enum uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
enum uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
enum uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
enum uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
enum uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
enum uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
enum uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
enum uint GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
enum uint GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
enum uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
enum uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
enum uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
enum uint GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
enum uint GL_REFERENCE_PLANE_SGIX = 0x817D;
enum uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
enum uint GL_PACK_RESAMPLE_SGIX = 0x842E;
enum uint GL_UNPACK_RESAMPLE_SGIX = 0x842F;
enum uint GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
enum uint GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
enum uint GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
enum uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
enum uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
enum uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
enum uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
enum uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
enum uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
enum uint GL_SPRITE_SGIX = 0x8148;
enum uint GL_SPRITE_MODE_SGIX = 0x8149;
enum uint GL_SPRITE_AXIS_SGIX = 0x814A;
enum uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
enum uint GL_SPRITE_AXIAL_SGIX = 0x814C;
enum uint GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
enum uint GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
enum uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
enum uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
enum uint GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
enum uint GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
enum uint GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
enum uint GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
enum uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
enum uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
enum uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
enum uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
enum uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
enum uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
enum uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
enum uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
enum uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
enum uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
enum uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
enum uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
enum uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
enum uint GL_YCRCB_422_SGIX = 0x81BB;
enum uint GL_YCRCB_444_SGIX = 0x81BC;
enum uint GL_YCRCB_SGIX = 0x8318;
enum uint GL_YCRCBA_SGIX = 0x8319;
enum uint GL_COLOR_MATRIX_SGI = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
enum uint GL_COLOR_TABLE_SGI = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
enum uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
enum uint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
enum uint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
enum uint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
enum uint GL_WRAP_BORDER_SUN = 0x81D4;
enum uint GL_GLOBAL_ALPHA_SUN = 0x81D9;
enum uint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
enum uint GL_QUAD_MESH_SUN = 0x8614;
enum uint GL_TRIANGLE_MESH_SUN = 0x8615;
enum uint GL_SLICE_ACCUM_SUN = 0x85CC;
enum uint GL_RESTART_SUN = 0x0001;
enum uint GL_REPLACE_MIDDLE_SUN = 0x0002;
enum uint GL_REPLACE_OLDEST_SUN = 0x0003;
enum uint GL_TRIANGLE_LIST_SUN = 0x81D7;
enum uint GL_REPLACEMENT_CODE_SUN = 0x81D8;
enum uint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
enum uint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
enum uint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
enum uint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
enum uint GL_R1UI_V3F_SUN = 0x85C4;
enum uint GL_R1UI_C4UB_V3F_SUN = 0x85C5;
enum uint GL_R1UI_C3F_V3F_SUN = 0x85C6;
enum uint GL_R1UI_N3F_V3F_SUN = 0x85C7;
enum uint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
enum uint GL_R1UI_T2F_V3F_SUN = 0x85C9;
enum uint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
enum uint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
enum uint GL_PHONG_WIN = 0x80EA;
enum uint GL_PHONG_HINT_WIN = 0x80EB;
enum uint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;

alias glbfn_glCullFace = void function(GLenum);
alias glbfn_glFrontFace = void function(GLenum);
alias glbfn_glHint = void function(GLenum, GLenum);
alias glbfn_glLineWidth = void function(GLfloat);
alias glbfn_glPointSize = void function(GLfloat);
alias glbfn_glPolygonMode = void function(GLenum, GLenum);
alias glbfn_glScissor = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glTexParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexImage1D = void function(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage2D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glDrawBuffer = void function(GLenum);
alias glbfn_glClear = void function(GLbitfield);
alias glbfn_glClearColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearStencil = void function(GLint);
alias glbfn_glClearDepth = void function(GLdouble);
alias glbfn_glStencilMask = void function(GLuint);
alias glbfn_glColorMask = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDepthMask = void function(GLboolean);
alias glbfn_glDisable = void function(GLenum);
alias glbfn_glEnable = void function(GLenum);
alias glbfn_glFinish = void function();
alias glbfn_glFlush = void function();
alias glbfn_glBlendFunc = void function(GLenum, GLenum);
alias glbfn_glLogicOp = void function(GLenum);
alias glbfn_glStencilFunc = void function(GLenum, GLint, GLuint);
alias glbfn_glStencilOp = void function(GLenum, GLenum, GLenum);
alias glbfn_glDepthFunc = void function(GLenum);
alias glbfn_glPixelStoref = void function(GLenum, GLfloat);
alias glbfn_glPixelStorei = void function(GLenum, GLint);
alias glbfn_glReadBuffer = void function(GLenum);
alias glbfn_glReadPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*);
alias glbfn_glGetBooleanv = void function(GLenum, GLboolean*);
alias glbfn_glGetDoublev = void function(GLenum, GLdouble*);
alias glbfn_glGetError = GLenum function();
alias glbfn_glGetFloatv = void function(GLenum, GLfloat*);
alias glbfn_glGetIntegerv = void function(GLenum, GLint*);
alias glbfn_glGetString = const(char)* function(GLenum);
alias glbfn_glGetTexImage = void function(GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTexParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexLevelParameterfv = void function(GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTexLevelParameteriv = void function(GLenum, GLint, GLenum, GLint*);
alias glbfn_glIsEnabled = GLboolean function(GLenum);
alias glbfn_glDepthRange = void function(GLdouble, GLdouble);
alias glbfn_glViewport = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glNewList = void function(GLuint, GLenum);
alias glbfn_glEndList = void function();
alias glbfn_glCallList = void function(GLuint);
alias glbfn_glCallLists = void function(GLsizei, GLenum, const(void)*);
alias glbfn_glDeleteLists = void function(GLuint, GLsizei);
alias glbfn_glGenLists = GLuint function(GLsizei);
alias glbfn_glListBase = void function(GLuint);
alias glbfn_glBegin = void function(GLenum);
alias glbfn_glBitmap = void function(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const(GLubyte)*);
alias glbfn_glColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glColor3bv = void function(const(GLbyte)*);
alias glbfn_glColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glColor3dv = void function(const(GLdouble)*);
alias glbfn_glColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fv = void function(const(GLfloat)*);
alias glbfn_glColor3i = void function(GLint, GLint, GLint);
alias glbfn_glColor3iv = void function(const(GLint)*);
alias glbfn_glColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glColor3sv = void function(const(GLshort)*);
alias glbfn_glColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glColor3ubv = void function(const(GLubyte)*);
alias glbfn_glColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glColor3uiv = void function(const(GLuint)*);
alias glbfn_glColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glColor3usv = void function(const(GLushort)*);
alias glbfn_glColor4b = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glColor4bv = void function(const(GLbyte)*);
alias glbfn_glColor4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glColor4dv = void function(const(GLdouble)*);
alias glbfn_glColor4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fv = void function(const(GLfloat)*);
alias glbfn_glColor4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glColor4iv = void function(const(GLint)*);
alias glbfn_glColor4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glColor4sv = void function(const(GLshort)*);
alias glbfn_glColor4ub = void function(GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glColor4ubv = void function(const(GLubyte)*);
alias glbfn_glColor4ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColor4uiv = void function(const(GLuint)*);
alias glbfn_glColor4us = void function(GLushort, GLushort, GLushort, GLushort);
alias glbfn_glColor4usv = void function(const(GLushort)*);
alias glbfn_glEdgeFlag = void function(GLboolean);
alias glbfn_glEdgeFlagv = void function(const(GLboolean)*);
alias glbfn_glEnd = void function();
alias glbfn_glIndexd = void function(GLdouble);
alias glbfn_glIndexdv = void function(const(GLdouble)*);
alias glbfn_glIndexf = void function(GLfloat);
alias glbfn_glIndexfv = void function(const(GLfloat)*);
alias glbfn_glIndexi = void function(GLint);
alias glbfn_glIndexiv = void function(const(GLint)*);
alias glbfn_glIndexs = void function(GLshort);
alias glbfn_glIndexsv = void function(const(GLshort)*);
alias glbfn_glNormal3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glNormal3bv = void function(const(GLbyte)*);
alias glbfn_glNormal3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glNormal3dv = void function(const(GLdouble)*);
alias glbfn_glNormal3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fv = void function(const(GLfloat)*);
alias glbfn_glNormal3i = void function(GLint, GLint, GLint);
alias glbfn_glNormal3iv = void function(const(GLint)*);
alias glbfn_glNormal3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glNormal3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos2d = void function(GLdouble, GLdouble);
alias glbfn_glRasterPos2dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos2f = void function(GLfloat, GLfloat);
alias glbfn_glRasterPos2fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos2i = void function(GLint, GLint);
alias glbfn_glRasterPos2iv = void function(const(GLint)*);
alias glbfn_glRasterPos2s = void function(GLshort, GLshort);
alias glbfn_glRasterPos2sv = void function(const(GLshort)*);
alias glbfn_glRasterPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos3dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos3fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos3i = void function(GLint, GLint, GLint);
alias glbfn_glRasterPos3iv = void function(const(GLint)*);
alias glbfn_glRasterPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glRasterPos3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos4dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos4fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRasterPos4iv = void function(const(GLint)*);
alias glbfn_glRasterPos4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRasterPos4sv = void function(const(GLshort)*);
alias glbfn_glRectd = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRectdv = void function(const(GLdouble)*, const(GLdouble)*);
alias glbfn_glRectf = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRectfv = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glRecti = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRectiv = void function(const(GLint)*, const(GLint)*);
alias glbfn_glRects = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRectsv = void function(const(GLshort)*, const(GLshort)*);
alias glbfn_glTexCoord1d = void function(GLdouble);
alias glbfn_glTexCoord1dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord1f = void function(GLfloat);
alias glbfn_glTexCoord1fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord1i = void function(GLint);
alias glbfn_glTexCoord1iv = void function(const(GLint)*);
alias glbfn_glTexCoord1s = void function(GLshort);
alias glbfn_glTexCoord1sv = void function(const(GLshort)*);
alias glbfn_glTexCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glTexCoord2dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glTexCoord2fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord2i = void function(GLint, GLint);
alias glbfn_glTexCoord2iv = void function(const(GLint)*);
alias glbfn_glTexCoord2s = void function(GLshort, GLshort);
alias glbfn_glTexCoord2sv = void function(const(GLshort)*);
alias glbfn_glTexCoord3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord3dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord3fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord3i = void function(GLint, GLint, GLint);
alias glbfn_glTexCoord3iv = void function(const(GLint)*);
alias glbfn_glTexCoord3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glTexCoord3sv = void function(const(GLshort)*);
alias glbfn_glTexCoord4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord4dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glTexCoord4iv = void function(const(GLint)*);
alias glbfn_glTexCoord4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glTexCoord4sv = void function(const(GLshort)*);
alias glbfn_glVertex2d = void function(GLdouble, GLdouble);
alias glbfn_glVertex2dv = void function(const(GLdouble)*);
alias glbfn_glVertex2f = void function(GLfloat, GLfloat);
alias glbfn_glVertex2fv = void function(const(GLfloat)*);
alias glbfn_glVertex2i = void function(GLint, GLint);
alias glbfn_glVertex2iv = void function(const(GLint)*);
alias glbfn_glVertex2s = void function(GLshort, GLshort);
alias glbfn_glVertex2sv = void function(const(GLshort)*);
alias glbfn_glVertex3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex3dv = void function(const(GLdouble)*);
alias glbfn_glVertex3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex3fv = void function(const(GLfloat)*);
alias glbfn_glVertex3i = void function(GLint, GLint, GLint);
alias glbfn_glVertex3iv = void function(const(GLint)*);
alias glbfn_glVertex3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glVertex3sv = void function(const(GLshort)*);
alias glbfn_glVertex4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex4dv = void function(const(GLdouble)*);
alias glbfn_glVertex4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex4fv = void function(const(GLfloat)*);
alias glbfn_glVertex4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glVertex4iv = void function(const(GLint)*);
alias glbfn_glVertex4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertex4sv = void function(const(GLshort)*);
alias glbfn_glClipPlane = void function(GLenum, const(GLdouble)*);
alias glbfn_glColorMaterial = void function(GLenum, GLenum);
alias glbfn_glFogf = void function(GLenum, GLfloat);
alias glbfn_glFogfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glFogi = void function(GLenum, GLint);
alias glbfn_glFogiv = void function(GLenum, const(GLint)*);
alias glbfn_glLightf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glLightfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glLighti = void function(GLenum, GLenum, GLint);
alias glbfn_glLightiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glLightModelf = void function(GLenum, GLfloat);
alias glbfn_glLightModelfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glLightModeli = void function(GLenum, GLint);
alias glbfn_glLightModeliv = void function(GLenum, const(GLint)*);
alias glbfn_glLineStipple = void function(GLint, GLushort);
alias glbfn_glMaterialf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glMaterialfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMateriali = void function(GLenum, GLenum, GLint);
alias glbfn_glMaterialiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPolygonStipple = void function(const(GLubyte)*);
alias glbfn_glShadeModel = void function(GLenum);
alias glbfn_glTexEnvf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexEnvfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexEnvi = void function(GLenum, GLenum, GLint);
alias glbfn_glTexEnviv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexGend = void function(GLenum, GLenum, GLdouble);
alias glbfn_glTexGendv = void function(GLenum, GLenum, const(GLdouble)*);
alias glbfn_glTexGenf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexGenfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexGeni = void function(GLenum, GLenum, GLint);
alias glbfn_glTexGeniv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFeedbackBuffer = void function(GLsizei, GLenum, GLfloat*);
alias glbfn_glSelectBuffer = void function(GLsizei, GLuint*);
alias glbfn_glRenderMode = GLint function(GLenum);
alias glbfn_glInitNames = void function();
alias glbfn_glLoadName = void function(GLuint);
alias glbfn_glPassThrough = void function(GLfloat);
alias glbfn_glPopName = void function();
alias glbfn_glPushName = void function(GLuint);
alias glbfn_glClearAccum = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearIndex = void function(GLfloat);
alias glbfn_glIndexMask = void function(GLuint);
alias glbfn_glAccum = void function(GLenum, GLfloat);
alias glbfn_glPopAttrib = void function();
alias glbfn_glPushAttrib = void function(GLbitfield);
alias glbfn_glMap1d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap1f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMap2d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap2f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapGrid1d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid1f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glMapGrid2d = void function(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid2f = void function(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
alias glbfn_glEvalCoord1d = void function(GLdouble);
alias glbfn_glEvalCoord1dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord1f = void function(GLfloat);
alias glbfn_glEvalCoord1fv = void function(const(GLfloat)*);
alias glbfn_glEvalCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glEvalCoord2dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glEvalCoord2fv = void function(const(GLfloat)*);
alias glbfn_glEvalMesh1 = void function(GLenum, GLint, GLint);
alias glbfn_glEvalPoint1 = void function(GLint);
alias glbfn_glEvalMesh2 = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glEvalPoint2 = void function(GLint, GLint);
alias glbfn_glAlphaFunc = void function(GLenum, GLfloat);
alias glbfn_glPixelZoom = void function(GLfloat, GLfloat);
alias glbfn_glPixelTransferf = void function(GLenum, GLfloat);
alias glbfn_glPixelTransferi = void function(GLenum, GLint);
alias glbfn_glPixelMapfv = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glPixelMapuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glPixelMapusv = void function(GLenum, GLsizei, const(GLushort)*);
alias glbfn_glCopyPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum);
alias glbfn_glDrawPixels = void function(GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetClipPlane = void function(GLenum, GLdouble*);
alias glbfn_glGetLightfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetLightiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapdv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetMapfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMaterialfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMaterialiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelMapfv = void function(GLenum, GLfloat*);
alias glbfn_glGetPixelMapuiv = void function(GLenum, GLuint*);
alias glbfn_glGetPixelMapusv = void function(GLenum, GLushort*);
alias glbfn_glGetPolygonStipple = void function(GLubyte*);
alias glbfn_glGetTexEnvfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexEnviv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexGendv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetTexGenfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexGeniv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsList = GLboolean function(GLuint);
alias glbfn_glFrustum = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glLoadIdentity = void function();
alias glbfn_glLoadMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadMatrixd = void function(const(GLdouble)*);
alias glbfn_glMatrixMode = void function(GLenum);
alias glbfn_glMultMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultMatrixd = void function(const(GLdouble)*);
alias glbfn_glOrtho = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glPopMatrix = void function();
alias glbfn_glPushMatrix = void function();
alias glbfn_glRotated = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRotatef = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glScaled = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glScalef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTranslated = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTranslatef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glDrawArrays = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawElements = void function(GLenum, GLsizei, GLenum, const(void)*);
alias glbfn_glGetPointerv = void function(GLenum, void**);
alias glbfn_glPolygonOffset = void function(GLfloat, GLfloat);
alias glbfn_glCopyTexImage1D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindTexture = void function(GLenum, GLuint);
alias glbfn_glDeleteTextures = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTextures = void function(GLsizei, GLuint*);
alias glbfn_glIsTexture = GLboolean function(GLuint);
alias glbfn_glArrayElement = void function(GLint);
alias glbfn_glColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glDisableClientState = void function(GLenum);
alias glbfn_glEdgeFlagPointer = void function(GLsizei, const(void)*);
alias glbfn_glEnableClientState = void function(GLenum);
alias glbfn_glIndexPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glInterleavedArrays = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glNormalPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glTexCoordPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glAreTexturesResident = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glPrioritizeTextures = void function(GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glIndexub = void function(GLubyte);
alias glbfn_glIndexubv = void function(const(GLubyte)*);
alias glbfn_glPopClientAttrib = void function();
alias glbfn_glPushClientAttrib = void function(GLbitfield);
alias glbfn_glDrawRangeElements = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glTexImage3D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glActiveTexture = void function(GLenum);
alias glbfn_glSampleCoverage = void function(GLfloat, GLboolean);
alias glbfn_glCompressedTexImage3D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1D = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImage = void function(GLenum, GLint, void*);
alias glbfn_glClientActiveTexture = void function(GLenum);
alias glbfn_glMultiTexCoord1d = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1f = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1i = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1s = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2d = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2f = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2i = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2s = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3d = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3f = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3i = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3s = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4d = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4f = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4i = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4s = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4sv = void function(GLenum, const(GLshort)*);
alias glbfn_glLoadTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glBlendFuncSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glMultiDrawArrays = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElements = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glPointParameterf = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glPointParameteri = void function(GLenum, GLint);
alias glbfn_glPointParameteriv = void function(GLenum, const(GLint)*);
alias glbfn_glFogCoordf = void function(GLfloat);
alias glbfn_glFogCoordfv = void function(const(GLfloat)*);
alias glbfn_glFogCoordd = void function(GLdouble);
alias glbfn_glFogCoorddv = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glSecondaryColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bv = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dv = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fv = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3i = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3iv = void function(const(GLint)*);
alias glbfn_glSecondaryColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3sv = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubv = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uiv = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usv = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glWindowPos2d = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos2f = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos2i = void function(GLint, GLint);
alias glbfn_glWindowPos2iv = void function(const(GLint)*);
alias glbfn_glWindowPos2s = void function(GLshort, GLshort);
alias glbfn_glWindowPos2sv = void function(const(GLshort)*);
alias glbfn_glWindowPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos3i = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3iv = void function(const(GLint)*);
alias glbfn_glWindowPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3sv = void function(const(GLshort)*);
alias glbfn_glBlendColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquation = void function(GLenum);
alias glbfn_glGenQueries = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueries = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQuery = GLboolean function(GLuint);
alias glbfn_glBeginQuery = void function(GLenum, GLuint);
alias glbfn_glEndQuery = void function(GLenum);
alias glbfn_glGetQueryiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBindBuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffers = void function(GLsizei, GLuint*);
alias glbfn_glIsBuffer = GLboolean function(GLuint);
alias glbfn_glBufferData = void function(GLenum, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glGetBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, void*);
alias glbfn_glMapBuffer = void* function(GLenum, GLenum);
alias glbfn_glUnmapBuffer = GLboolean function(GLenum);
alias glbfn_glGetBufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointerv = void function(GLenum, GLenum, void**);
alias glbfn_glBlendEquationSeparate = void function(GLenum, GLenum);
alias glbfn_glDrawBuffers = void function(GLsizei, const(GLenum)*);
alias glbfn_glStencilOpSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparate = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glStencilMaskSeparate = void function(GLenum, GLuint);
alias glbfn_glAttachShader = void function(GLuint, GLuint);
alias glbfn_glBindAttribLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glCompileShader = void function(GLuint);
alias glbfn_glCreateProgram = GLuint function();
alias glbfn_glCreateShader = GLuint function(GLenum);
alias glbfn_glDeleteProgram = void function(GLuint);
alias glbfn_glDeleteShader = void function(GLuint);
alias glbfn_glDetachShader = void function(GLuint, GLuint);
alias glbfn_glDisableVertexAttribArray = void function(GLuint);
alias glbfn_glEnableVertexAttribArray = void function(GLuint);
alias glbfn_glGetActiveAttrib = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetActiveUniform = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetAttachedShaders = void function(GLuint, GLsizei, GLsizei*, GLuint*);
alias glbfn_glGetAttribLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetProgramiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetShaderInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderSource = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetUniformfv = void function(GLuint, GLint, GLfloat*);
alias glbfn_glGetUniformiv = void function(GLuint, GLint, GLint*);
alias glbfn_glGetVertexAttribdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgram = GLboolean function(GLuint);
alias glbfn_glIsShader = GLboolean function(GLuint);
alias glbfn_glLinkProgram = void function(GLuint);
alias glbfn_glShaderSource = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glUseProgram = void function(GLuint);
alias glbfn_glUniform1f = void function(GLint, GLfloat);
alias glbfn_glUniform2f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3f = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4f = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1i = void function(GLint, GLint);
alias glbfn_glUniform2i = void function(GLint, GLint, GLint);
alias glbfn_glUniform3i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4i = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glValidateProgram = void function(GLuint);
alias glbfn_glVertexAttrib1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1f = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1s = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2f = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2s = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3f = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3s = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nbv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4Niv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4Nsv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nub = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4Nubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4Nuiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4Nusv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4f = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4s = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointer = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glUniformMatrix2x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix2x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glColorMaski = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetBooleani_v = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glGetIntegeri_v = void function(GLenum, GLuint, GLint*);
alias glbfn_glEnablei = void function(GLenum, GLuint);
alias glbfn_glDisablei = void function(GLenum, GLuint);
alias glbfn_glIsEnabledi = GLboolean function(GLenum, GLuint);
alias glbfn_glBeginTransformFeedback = void function(GLenum);
alias glbfn_glEndTransformFeedback = void function();
alias glbfn_glBindBufferRange = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferBase = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryings = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVarying = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glClampColor = void function(GLenum, GLenum);
alias glbfn_glBeginConditionalRender = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRender = void function();
alias glbfn_glVertexAttribIPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glVertexAttribI1i = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2i = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1ui = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4ui = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glGetUniformuiv = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1ui = void function(GLint, GLuint);
alias glbfn_glUniform2ui = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3ui = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4ui = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glTexParameterIiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuiv = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearBufferiv = void function(GLenum, GLint, const(GLint)*);
alias glbfn_glClearBufferuiv = void function(GLenum, GLint, const(GLuint)*);
alias glbfn_glClearBufferfv = void function(GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearBufferfi = void function(GLenum, GLint, GLfloat, GLint);
alias glbfn_glGetStringi = const(char)* function(GLenum, GLuint);
alias glbfn_glIsRenderbuffer = GLboolean function(GLuint);
alias glbfn_glBindRenderbuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorage = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebuffer = GLboolean function(GLuint);
alias glbfn_glBindFramebuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatus = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3D = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbuffer = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameteriv = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmap = void function(GLenum);
alias glbfn_glBlitFramebuffer = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glFramebufferTextureLayer = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glMapBufferRange = void* function(GLenum, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedBufferRange = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glBindVertexArray = void function(GLuint);
alias glbfn_glDeleteVertexArrays = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArray = GLboolean function(GLuint);
alias glbfn_glDrawArraysInstanced = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstanced = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glTexBuffer = void function(GLenum, GLenum, GLuint);
alias glbfn_glPrimitiveRestartIndex = void function(GLuint);
alias glbfn_glCopyBufferSubData = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glGetUniformIndices = void function(GLuint, GLsizei, const(GLchar*)*, GLuint*);
alias glbfn_glGetActiveUniformsiv = void function(GLuint, GLsizei, const(GLuint)*, GLenum, GLint*);
alias glbfn_glGetActiveUniformName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformBlockIndex = GLuint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveUniformBlockiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveUniformBlockName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glDrawElementsBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawRangeElementsBaseVertex = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawElementsInstancedBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint);
alias glbfn_glMultiDrawElementsBaseVertex = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei, const(GLint)*);
alias glbfn_glProvokingVertex = void function(GLenum);
//alias glbfn_glFenceSync = GLsync function(GLenum, GLbitfield);
//alias glbfn_glIsSync = GLboolean function(GLsync);
//alias glbfn_glDeleteSync = void function(GLsync);
//alias glbfn_glClientWaitSync = GLenum function(GLsync, GLbitfield, GLuint64);
//alias glbfn_glWaitSync = void function(GLsync, GLbitfield, GLuint64);
alias glbfn_glGetInteger64v = void function(GLenum, GLint64*);
//alias glbfn_glGetSynciv = void function(GLsync, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetInteger64i_v = void function(GLenum, GLuint, GLint64*);
alias glbfn_glGetBufferParameteri64v = void function(GLenum, GLenum, GLint64*);
alias glbfn_glFramebufferTexture = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glTexImage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glGetMultisamplefv = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaski = void function(GLuint, GLbitfield);
alias glbfn_glBindFragDataLocationIndexed = void function(GLuint, GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataIndex = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGenSamplers = void function(GLsizei, GLuint*);
alias glbfn_glDeleteSamplers = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsSampler = GLboolean function(GLuint);
alias glbfn_glBindSampler = void function(GLuint, GLuint);
alias glbfn_glSamplerParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glSamplerParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glSamplerParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glSamplerParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glGetSamplerParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetSamplerParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glQueryCounter = void function(GLuint, GLenum);
alias glbfn_glGetQueryObjecti64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64v = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glVertexAttribDivisor = void function(GLuint, GLuint);
alias glbfn_glVertexAttribP1ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP1uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP2ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP2uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP3ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP3uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP4ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP4uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexP2ui = void function(GLenum, GLuint);
alias glbfn_glVertexP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP3ui = void function(GLenum, GLuint);
alias glbfn_glVertexP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP4ui = void function(GLenum, GLuint);
alias glbfn_glVertexP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP1ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP1uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP2ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP3ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP4ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP1ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP1uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP2ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP2uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP3ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP3uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP4ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP4uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glNormalP3ui = void function(GLenum, GLuint);
alias glbfn_glNormalP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP3ui = void function(GLenum, GLuint);
alias glbfn_glColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP4ui = void function(GLenum, GLuint);
alias glbfn_glColorP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glSecondaryColorP3ui = void function(GLenum, GLuint);
alias glbfn_glSecondaryColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMinSampleShading = void function(GLfloat);
alias glbfn_glBlendEquationi = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparatei = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunci = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparatei = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysIndirect = void function(GLenum, const(void)*);
alias glbfn_glDrawElementsIndirect = void function(GLenum, GLenum, const(void)*);
alias glbfn_glUniform1d = void function(GLint, GLdouble);
alias glbfn_glUniform2d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glUniform3d = void function(GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform4d = void function(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform1dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform2dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform3dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform4dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniformMatrix2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glGetUniformdv = void function(GLuint, GLint, GLdouble*);
alias glbfn_glGetSubroutineUniformLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetSubroutineIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetActiveSubroutineUniformiv = void function(GLuint, GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveSubroutineUniformName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetActiveSubroutineName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformSubroutinesuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetUniformSubroutineuiv = void function(GLenum, GLint, GLuint*);
alias glbfn_glGetProgramStageiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glPatchParameteri = void function(GLenum, GLint);
alias glbfn_glPatchParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glBindTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacks = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedback = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedback = void function();
alias glbfn_glResumeTransformFeedback = void function();
alias glbfn_glDrawTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDrawTransformFeedbackStream = void function(GLenum, GLuint, GLuint);
alias glbfn_glBeginQueryIndexed = void function(GLenum, GLuint, GLuint);
alias glbfn_glEndQueryIndexed = void function(GLenum, GLuint);
alias glbfn_glGetQueryIndexediv = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glReleaseShaderCompiler = void function();
alias glbfn_glShaderBinary = void function(GLsizei, const(GLuint)*, GLenum, const(void)*, GLsizei);
alias glbfn_glGetShaderPrecisionFormat = void function(GLenum, GLenum, GLint*, GLint*);
alias glbfn_glDepthRangef = void function(GLfloat, GLfloat);
alias glbfn_glClearDepthf = void function(GLfloat);
alias glbfn_glGetProgramBinary = void function(GLuint, GLsizei, GLsizei*, GLenum*, void*);
alias glbfn_glProgramBinary = void function(GLuint, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glUseProgramStages = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glActiveShaderProgram = void function(GLuint, GLuint);
alias glbfn_glCreateShaderProgramv = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glBindProgramPipeline = void function(GLuint);
alias glbfn_glDeleteProgramPipelines = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glIsProgramPipeline = GLboolean function(GLuint);
alias glbfn_glGetProgramPipelineiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1i = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform1iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform1f = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform1fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1d = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform1dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform1ui = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform1uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform2iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2f = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform2fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2d = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform2dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2ui = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform2uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3ui = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4i = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4ui = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniformMatrix2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glValidateProgramPipeline = void function(GLuint);
alias glbfn_glGetProgramPipelineInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glVertexAttribL1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glViewportArrayv = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glViewportIndexedf = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glViewportIndexedfv = void function(GLuint, const(GLfloat)*);
alias glbfn_glScissorArrayv = void function(GLuint, GLsizei, const(GLint)*);
alias glbfn_glScissorIndexed = void function(GLuint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glScissorIndexedv = void function(GLuint, const(GLint)*);
alias glbfn_glDepthRangeArrayv = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glDepthRangeIndexed = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glGetFloati_v = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_v = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glDrawArraysInstancedBaseInstance = void function(GLenum, GLint, GLsizei, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseVertexBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint, GLuint);
alias glbfn_glGetInternalformativ = void function(GLenum, GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetActiveAtomicCounterBufferiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glBindImageTexture = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
alias glbfn_glMemoryBarrier = void function(GLbitfield);
alias glbfn_glTexStorage1D = void function(GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTexStorage2D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTexStorage3D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glDrawTransformFeedbackInstanced = void function(GLenum, GLuint, GLsizei);
alias glbfn_glDrawTransformFeedbackStreamInstanced = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glClearBufferData = void function(GLenum, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearBufferSubData = void function(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glDispatchCompute = void function(GLuint, GLuint, GLuint);
alias glbfn_glDispatchComputeIndirect = void function(GLintptr);
alias glbfn_glCopyImageSubData = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glFramebufferParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glGetFramebufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetInternalformati64v = void function(GLenum, GLenum, GLenum, GLsizei, GLint64*);
alias glbfn_glInvalidateTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glInvalidateTexImage = void function(GLuint, GLint);
alias glbfn_glInvalidateBufferSubData = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glInvalidateBufferData = void function(GLuint);
alias glbfn_glInvalidateFramebuffer = void function(GLenum, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateSubFramebuffer = void function(GLenum, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glMultiDrawArraysIndirect = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirect = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGetProgramInterfaceiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetProgramResourceIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramResourceiv = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetProgramResourceLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceLocationIndex = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glShaderStorageBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glTexBufferRange = void function(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTexStorage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexStorage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureView = void function(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glBindVertexBuffer = void function(GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexAttribFormat = void function(GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribIFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribLFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribBinding = void function(GLuint, GLuint);
alias glbfn_glVertexBindingDivisor = void function(GLuint, GLuint);
alias glbfn_glDebugMessageControl = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsert = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallback = void function(GLDEBUGPROC, const(void)*);
alias glbfn_glGetDebugMessageLog = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroup = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroup = void function();
alias glbfn_glObjectLabel = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabel = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabel = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabel = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glBufferStorage = void function(GLenum, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearTexImage = void function(GLuint, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glClearTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindBuffersBase = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindBuffersRange = void function(GLenum, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizeiptr)*);
alias glbfn_glBindTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindSamplers = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindImageTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindVertexBuffers = void function(GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glClipControl = void function(GLenum, GLenum);
alias glbfn_glCreateTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glTransformFeedbackBufferBase = void function(GLuint, GLuint, GLuint);
alias glbfn_glTransformFeedbackBufferRange = void function(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetTransformFeedbackiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTransformFeedbacki_v = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetTransformFeedbacki64_v = void function(GLuint, GLenum, GLuint, GLint64*);
alias glbfn_glCreateBuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedBufferStorage = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glNamedBufferData = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glCopyNamedBufferSubData = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glClearNamedBufferData = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubData = void function(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glMapNamedBuffer = void* function(GLuint, GLenum);
alias glbfn_glMapNamedBufferRange = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glUnmapNamedBuffer = GLboolean function(GLuint);
alias glbfn_glFlushMappedNamedBufferRange = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetNamedBufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferParameteri64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetNamedBufferPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glCreateFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedFramebufferRenderbuffer = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glNamedFramebufferParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glNamedFramebufferTexture = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayer = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferDrawBuffer = void function(GLuint, GLenum);
alias glbfn_glNamedFramebufferDrawBuffers = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glNamedFramebufferReadBuffer = void function(GLuint, GLenum);
alias glbfn_glInvalidateNamedFramebufferData = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateNamedFramebufferSubData = void function(GLuint, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glClearNamedFramebufferiv = void function(GLuint, GLenum, GLint, const(GLint)*);
alias glbfn_glClearNamedFramebufferuiv = void function(GLuint, GLenum, GLint, const(GLuint)*);
alias glbfn_glClearNamedFramebufferfv = void function(GLuint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearNamedFramebufferfi = void function(GLuint, GLenum, GLint, GLfloat, GLint);
alias glbfn_glBlitNamedFramebuffer = void function(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glCheckNamedFramebufferStatus = GLenum function(GLuint, GLenum);
alias glbfn_glGetNamedFramebufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedFramebufferAttachmentParameteriv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glCreateRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedRenderbufferStorage = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateTextures = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glTextureBuffer = void function(GLuint, GLenum, GLuint);
alias glbfn_glTextureBufferRange = void function(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1D = void function(GLuint, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCompressedTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTextureSubImage1D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTextureParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glTextureParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glTextureParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glTextureParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glGenerateTextureMipmap = void function(GLuint);
alias glbfn_glBindTextureUnit = void function(GLuint, GLuint);
alias glbfn_glGetTextureImage = void function(GLuint, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureImage = void function(GLuint, GLint, GLsizei, void*);
alias glbfn_glGetTextureLevelParameterfv = void function(GLuint, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameteriv = void function(GLuint, GLint, GLenum, GLint*);
alias glbfn_glGetTextureParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetTextureParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glDisableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glEnableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glVertexArrayElementBuffer = void function(GLuint, GLuint);
alias glbfn_glVertexArrayVertexBuffer = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexBuffers = void function(GLuint, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glVertexArrayAttribBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayAttribFormat = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayAttribIFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayAttribLFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayBindingDivisor = void function(GLuint, GLuint, GLuint);
alias glbfn_glGetVertexArrayiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexediv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexed64iv = void function(GLuint, GLuint, GLenum, GLint64*);
alias glbfn_glCreateSamplers = void function(GLsizei, GLuint*);
alias glbfn_glCreateProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glCreateQueries = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetQueryBufferObjecti64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectui64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectuiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glMemoryBarrierByRegion = void function(GLbitfield);
alias glbfn_glGetTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void*);
alias glbfn_glGetGraphicsResetStatus = GLenum function();
alias glbfn_glGetnCompressedTexImage = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnTexImage = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformdv = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnUniformfv = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformiv = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuiv = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glReadnPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMapdv = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfv = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapiv = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfv = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuiv = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusv = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStipple = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTable = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogram = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmax = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glTextureBarrier = void function();

// ////////////////////////////////////////////////////////////////////////// //
alias glbfn_glTbufferMask3DFX = void function(GLuint);
alias glbfn_glDebugMessageEnableAMD = void function(GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertAMD = void function(GLenum, GLenum, GLuint, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackAMD = void function(GLDEBUGPROCAMD, void*);
alias glbfn_glGetDebugMessageLogAMD = GLuint function(GLuint, GLsizei, GLenum*, GLuint*, GLuint*, GLsizei*, GLchar*);
alias glbfn_glBlendFuncIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateIndexedAMD = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationIndexedAMD = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glUniform1i64NV = void function(GLint, GLint64EXT);
alias glbfn_glUniform2i64NV = void function(GLint, GLint64EXT, GLint64EXT);
alias glbfn_glUniform3i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform4i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform1i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform2i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform3i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform4i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform1ui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniform2ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform3ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform4ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform1ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform2ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform3ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform4ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glGetUniformi64vNV = void function(GLuint, GLint, GLint64EXT*);
alias glbfn_glGetUniformui64vNV = void function(GLuint, GLint, GLuint64EXT*);
alias glbfn_glProgramUniform1i64NV = void function(GLuint, GLint, GLint64EXT);
alias glbfn_glProgramUniform2i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform3i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform4i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform1i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform2i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform3i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform4i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform1ui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniform2ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform3ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform4ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform1ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform2ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform3ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform4ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glVertexAttribParameteriAMD = void function(GLuint, GLenum, GLint);
alias glbfn_glMultiDrawArraysIndirectAMD = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectAMD = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGenNamesAMD = void function(GLenum, GLuint, GLuint*);
alias glbfn_glDeleteNamesAMD = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glIsNameAMD = GLboolean function(GLenum, GLuint);
alias glbfn_glQueryObjectParameteruiAMD = void function(GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetPerfMonitorGroupsAMD = void function(GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorCountersAMD = void function(GLuint, GLint*, GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorGroupStringAMD = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterStringAMD = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterInfoAMD = void function(GLuint, GLuint, GLenum, void*);
alias glbfn_glGenPerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glDeletePerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glSelectPerfMonitorCountersAMD = void function(GLuint, GLboolean, GLuint, GLint, GLuint*);
alias glbfn_glBeginPerfMonitorAMD = void function(GLuint);
alias glbfn_glEndPerfMonitorAMD = void function(GLuint);
alias glbfn_glGetPerfMonitorCounterDataAMD = void function(GLuint, GLenum, GLsizei, GLuint*, GLint*);
alias glbfn_glSetMultisamplefvAMD = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glTexStorageSparseAMD = void function(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glTextureStorageSparseAMD = void function(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glStencilOpValueAMD = void function(GLenum, GLuint);
alias glbfn_glTessellationFactorAMD = void function(GLfloat);
alias glbfn_glTessellationModeAMD = void function(GLenum);
alias glbfn_glElementPointerAPPLE = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayAPPLE = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, GLint, GLsizei);
alias glbfn_glMultiDrawElementArrayAPPLE = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glGenFencesAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glDeleteFencesAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glSetFenceAPPLE = void function(GLuint);
alias glbfn_glIsFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glTestFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glFinishFenceAPPLE = void function(GLuint);
alias glbfn_glTestObjectAPPLE = GLboolean function(GLenum, GLuint);
alias glbfn_glFinishObjectAPPLE = void function(GLenum, GLint);
alias glbfn_glBufferParameteriAPPLE = void function(GLenum, GLenum, GLint);
alias glbfn_glFlushMappedBufferRangeAPPLE = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glObjectPurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glObjectUnpurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glGetObjectParameterivAPPLE = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glTextureRangeAPPLE = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glGetTexParameterPointervAPPLE = void function(GLenum, GLenum, void**);
alias glbfn_glBindVertexArrayAPPLE = void function(GLuint);
alias glbfn_glDeleteVertexArraysAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArraysAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArrayAPPLE = GLboolean function(GLuint);
alias glbfn_glVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glFlushVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glVertexArrayParameteriAPPLE = void function(GLenum, GLint);
alias glbfn_glEnableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glDisableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glIsVertexAttribEnabledAPPLE = GLboolean function(GLuint, GLenum);
alias glbfn_glMapVertexAttrib1dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib1fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapVertexAttrib2dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib2fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glPrimitiveBoundingBoxARB = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetTextureHandleARB = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleARB = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentARB = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentARB = void function(GLuint64);
alias glbfn_glGetImageHandleARB = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentARB = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentARB = void function(GLuint64);
alias glbfn_glUniformHandleui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glVertexAttribL1ui64ARB = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vARB = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLui64vARB = void function(GLuint, GLenum, GLuint64EXT*);
//alias glbfn_glCreateSyncFromCLeventARB = GLsync function(_cl_context*, _cl_event*, GLbitfield);
alias glbfn_glClampColorARB = void function(GLenum, GLenum);
alias glbfn_glDispatchComputeGroupSizeARB = void function(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glDebugMessageControlARB = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertARB = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackARB = void function(GLDEBUGPROCARB, const(void)*);
alias glbfn_glGetDebugMessageLogARB = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glDrawBuffersARB = void function(GLsizei, const(GLenum)*);
alias glbfn_glBlendEquationiARB = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateiARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunciARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateiARB = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysInstancedARB = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedARB = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramStringARB = void function(GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glBindProgramARB = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramsARB = void function(GLsizei, GLuint*);
alias glbfn_glProgramEnvParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramEnvParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramEnvParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramEnvParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramLocalParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramLocalParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramLocalParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramLocalParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetProgramEnvParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramEnvParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramLocalParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramLocalParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetProgramStringARB = void function(GLenum, GLenum, void*);
alias glbfn_glIsProgramARB = GLboolean function(GLuint);
alias glbfn_glProgramParameteriARB = void function(GLuint, GLenum, GLint);
alias glbfn_glFramebufferTextureARB = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureLayerARB = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferTextureFaceARB = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glUniform1i64ARB = void function(GLint, GLint64);
alias glbfn_glUniform2i64ARB = void function(GLint, GLint64, GLint64);
alias glbfn_glUniform3i64ARB = void function(GLint, GLint64, GLint64, GLint64);
alias glbfn_glUniform4i64ARB = void function(GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glUniform1i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform2i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform3i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform4i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform1ui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniform2ui64ARB = void function(GLint, GLuint64, GLuint64);
alias glbfn_glUniform3ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform4ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform1ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform2ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform3ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform4ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glGetUniformi64vARB = void function(GLuint, GLint, GLint64*);
alias glbfn_glGetUniformui64vARB = void function(GLuint, GLint, GLuint64*);
alias glbfn_glGetnUniformi64vARB = void function(GLuint, GLint, GLsizei, GLint64*);
alias glbfn_glGetnUniformui64vARB = void function(GLuint, GLint, GLsizei, GLuint64*);
alias glbfn_glProgramUniform1i64ARB = void function(GLuint, GLint, GLint64);
alias glbfn_glProgramUniform2i64ARB = void function(GLuint, GLint, GLint64, GLint64);
alias glbfn_glProgramUniform3i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform4i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform1i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform2i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform3i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform4i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform1ui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniform2ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64);
alias glbfn_glProgramUniform3ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform4ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform1ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform2ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform3ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform4ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glColorTable = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTable = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTable = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glColorSubTable = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTable = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glConvolutionFilter1D = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1D = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2D = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilter = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilter = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glGetHistogram = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmax = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogram = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmax = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogram = void function(GLenum);
alias glbfn_glResetMinmax = void function(GLenum);
alias glbfn_glMultiDrawArraysIndirectCountARB = void function(GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectCountARB = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glVertexAttribDivisorARB = void function(GLuint, GLuint);
alias glbfn_glCurrentPaletteMatrixARB = void function(GLint);
alias glbfn_glMatrixIndexubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glMatrixIndexusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glMatrixIndexuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glMatrixIndexPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glSampleCoverageARB = void function(GLfloat, GLboolean);
alias glbfn_glActiveTextureARB = void function(GLenum);
alias glbfn_glClientActiveTextureARB = void function(GLenum);
alias glbfn_glMultiTexCoord1dARB = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1fARB = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1iARB = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1sARB = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2dARB = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2fARB = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2iARB = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2sARB = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3dARB = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3fARB = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3iARB = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3sARB = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4dARB = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4fARB = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4iARB = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4sARB = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glGenQueriesARB = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueriesARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQueryARB = GLboolean function(GLuint);
alias glbfn_glBeginQueryARB = void function(GLenum, GLuint);
alias glbfn_glEndQueryARB = void function(GLenum);
alias glbfn_glGetQueryivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuivARB = void function(GLuint, GLenum, GLuint*);
alias glbfn_glMaxShaderCompilerThreadsARB = void function(GLuint);
alias glbfn_glPointParameterfARB = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetGraphicsResetStatusARB = GLenum function();
alias glbfn_glGetnTexImageARB = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glReadnPixelsARB = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnCompressedTexImageARB = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnUniformfvARB = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivARB = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivARB = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glGetnUniformdvARB = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnMapdvARB = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfvARB = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapivARB = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfvARB = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuivARB = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusvARB = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStippleARB = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTableARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogramARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmaxARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glFramebufferSampleLocationsfvARB = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvARB = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glEvaluateDepthValuesARB = void function();
alias glbfn_glMinSampleShadingARB = void function(GLfloat);
alias glbfn_glDeleteObjectARB = void function(GLhandleARB);
alias glbfn_glGetHandleARB = GLhandleARB function(GLenum);
alias glbfn_glDetachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glCreateShaderObjectARB = GLhandleARB function(GLenum);
alias glbfn_glShaderSourceARB = void function(GLhandleARB, GLsizei, const(GLcharARB*)*, const(GLint)*);
alias glbfn_glCompileShaderARB = void function(GLhandleARB);
alias glbfn_glCreateProgramObjectARB = GLhandleARB function();
alias glbfn_glAttachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glLinkProgramARB = void function(GLhandleARB);
alias glbfn_glUseProgramObjectARB = void function(GLhandleARB);
alias glbfn_glValidateProgramARB = void function(GLhandleARB);
alias glbfn_glUniform1fARB = void function(GLint, GLfloat);
alias glbfn_glUniform2fARB = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3fARB = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4fARB = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1iARB = void function(GLint, GLint);
alias glbfn_glUniform2iARB = void function(GLint, GLint, GLint);
alias glbfn_glUniform3iARB = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4iARB = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glGetObjectParameterfvARB = void function(GLhandleARB, GLenum, GLfloat*);
alias glbfn_glGetObjectParameterivARB = void function(GLhandleARB, GLenum, GLint*);
alias glbfn_glGetInfoLogARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glGetAttachedObjectsARB = void function(GLhandleARB, GLsizei, GLsizei*, GLhandleARB*);
alias glbfn_glGetUniformLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glGetActiveUniformARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetUniformfvARB = void function(GLhandleARB, GLint, GLfloat*);
alias glbfn_glGetUniformivARB = void function(GLhandleARB, GLint, GLint*);
alias glbfn_glGetShaderSourceARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glNamedStringARB = void function(GLenum, GLint, const(GLchar)*, GLint, const(GLchar)*);
alias glbfn_glDeleteNamedStringARB = void function(GLint, const(GLchar)*);
alias glbfn_glCompileShaderIncludeARB = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glIsNamedStringARB = GLboolean function(GLint, const(GLchar)*);
alias glbfn_glGetNamedStringARB = void function(GLint, const(GLchar)*, GLsizei, GLint*, GLchar*);
alias glbfn_glGetNamedStringivARB = void function(GLint, const(GLchar)*, GLenum, GLint*);
alias glbfn_glBufferPageCommitmentARB = void function(GLenum, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentEXT = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentARB = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glTexPageCommitmentARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexBufferARB = void function(GLenum, GLenum, GLuint);
alias glbfn_glCompressedTexImage3DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1DARB = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3DARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2DARB = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1DARB = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImageARB = void function(GLenum, GLint, void*);
alias glbfn_glLoadTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glWeightbvARB = void function(GLint, const(GLbyte)*);
alias glbfn_glWeightsvARB = void function(GLint, const(GLshort)*);
alias glbfn_glWeightivARB = void function(GLint, const(GLint)*);
alias glbfn_glWeightfvARB = void function(GLint, const(GLfloat)*);
alias glbfn_glWeightdvARB = void function(GLint, const(GLdouble)*);
alias glbfn_glWeightubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glWeightusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glWeightuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glWeightPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexBlendARB = void function(GLint);
alias glbfn_glBindBufferARB = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffersARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffersARB = void function(GLsizei, GLuint*);
alias glbfn_glIsBufferARB = GLboolean function(GLuint);
alias glbfn_glBufferDataARB = void function(GLenum, GLsizeiptrARB, const(void)*, GLenum);
alias glbfn_glBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, const(void)*);
alias glbfn_glGetBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, void*);
alias glbfn_glMapBufferARB = void* function(GLenum, GLenum);
alias glbfn_glUnmapBufferARB = GLboolean function(GLenum);
alias glbfn_glGetBufferParameterivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointervARB = void function(GLenum, GLenum, void**);
alias glbfn_glVertexAttrib1dARB = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fARB = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sARB = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dARB = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fARB = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sARB = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dARB = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fARB = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sARB = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NbvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4NivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4NsvARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NubARB = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4NubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4NuivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4NusvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4dARB = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fARB = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4ivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4sARB = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointerARB = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glEnableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glDisableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glGetVertexAttribdvARB = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvARB = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervARB = void function(GLuint, GLenum, void**);
alias glbfn_glBindAttribLocationARB = void function(GLhandleARB, GLuint, const(GLcharARB)*);
alias glbfn_glGetActiveAttribARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetAttribLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glWindowPos2dARB = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fARB = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iARB = void function(GLint, GLint);
alias glbfn_glWindowPos2ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos2sARB = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svARB = void function(const(GLshort)*);
alias glbfn_glWindowPos3dARB = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fARB = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iARB = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos3sARB = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svARB = void function(const(GLshort)*);
alias glbfn_glDrawBuffersATI = void function(GLsizei, const(GLenum)*);
alias glbfn_glElementPointerATI = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayATI = void function(GLenum, GLsizei);
alias glbfn_glDrawRangeElementArrayATI = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glTexBumpParameterivATI = void function(GLenum, const(GLint)*);
alias glbfn_glTexBumpParameterfvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetTexBumpParameterivATI = void function(GLenum, GLint*);
alias glbfn_glGetTexBumpParameterfvATI = void function(GLenum, GLfloat*);
alias glbfn_glGenFragmentShadersATI = GLuint function(GLuint);
alias glbfn_glBindFragmentShaderATI = void function(GLuint);
alias glbfn_glDeleteFragmentShaderATI = void function(GLuint);
alias glbfn_glBeginFragmentShaderATI = void function();
alias glbfn_glEndFragmentShaderATI = void function();
alias glbfn_glPassTexCoordATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glSampleMapATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glColorFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSetFragmentShaderConstantATI = void function(GLuint, const(GLfloat)*);
alias glbfn_glMapObjectBufferATI = void* function(GLuint);
alias glbfn_glUnmapObjectBufferATI = void function(GLuint);
alias glbfn_glPNTrianglesiATI = void function(GLenum, GLint);
alias glbfn_glPNTrianglesfATI = void function(GLenum, GLfloat);
alias glbfn_glStencilOpSeparateATI = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparateATI = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glNewObjectBufferATI = GLuint function(GLsizei, const(void)*, GLenum);
alias glbfn_glIsObjectBufferATI = GLboolean function(GLuint);
alias glbfn_glUpdateObjectBufferATI = void function(GLuint, GLuint, GLsizei, const(void)*, GLenum);
alias glbfn_glGetObjectBufferfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetObjectBufferivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glFreeObjectBufferATI = void function(GLuint);
alias glbfn_glArrayObjectATI = void function(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetArrayObjectfvATI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetArrayObjectivATI = void function(GLenum, GLenum, GLint*);
alias glbfn_glVariantArrayObjectATI = void function(GLuint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetVariantArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexAttribArrayObjectATI = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
alias glbfn_glGetVertexAttribArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexStream1sATI = void function(GLenum, GLshort);
alias glbfn_glVertexStream1svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream1iATI = void function(GLenum, GLint);
alias glbfn_glVertexStream1ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream1fATI = void function(GLenum, GLfloat);
alias glbfn_glVertexStream1fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream1dATI = void function(GLenum, GLdouble);
alias glbfn_glVertexStream1dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream2sATI = void function(GLenum, GLshort, GLshort);
alias glbfn_glVertexStream2svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream2iATI = void function(GLenum, GLint, GLint);
alias glbfn_glVertexStream2ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream2fATI = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glVertexStream2fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream2dATI = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glVertexStream2dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glVertexStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream4sATI = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream4svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream4iATI = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glVertexStream4ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream4fATI = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream4fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream4dATI = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream4dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glNormalStream3bATI = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glNormalStream3bvATI = void function(GLenum, const(GLbyte)*);
alias glbfn_glNormalStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glNormalStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glNormalStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glNormalStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glNormalStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormalStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glNormalStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glNormalStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glClientActiveVertexStreamATI = void function(GLenum);
alias glbfn_glVertexBlendEnviATI = void function(GLenum, GLint);
alias glbfn_glVertexBlendEnvfATI = void function(GLenum, GLfloat);
alias glbfn_glUniformBufferEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glGetUniformBufferSizeEXT = GLint function(GLuint, GLint);
alias glbfn_glGetUniformOffsetEXT = GLintptr function(GLuint, GLint);
alias glbfn_glBlendColorEXT = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquationSeparateEXT = void function(GLenum, GLenum);
alias glbfn_glBlendFuncSeparateEXT = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationEXT = void function(GLenum);
alias glbfn_glColorSubTableEXT = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTableEXT = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glLockArraysEXT = void function(GLint, GLsizei);
alias glbfn_glUnlockArraysEXT = void function();
alias glbfn_glConvolutionFilter1DEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilterEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilterEXT = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glTangent3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTangent3bvEXT = void function(const(GLbyte)*);
alias glbfn_glTangent3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTangent3dvEXT = void function(const(GLdouble)*);
alias glbfn_glTangent3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTangent3fvEXT = void function(const(GLfloat)*);
alias glbfn_glTangent3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glTangent3ivEXT = void function(const(GLint)*);
alias glbfn_glTangent3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glTangent3svEXT = void function(const(GLshort)*);
alias glbfn_glBinormal3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glBinormal3bvEXT = void function(const(GLbyte)*);
alias glbfn_glBinormal3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glBinormal3dvEXT = void function(const(GLdouble)*);
alias glbfn_glBinormal3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glBinormal3fvEXT = void function(const(GLfloat)*);
alias glbfn_glBinormal3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glBinormal3ivEXT = void function(const(GLint)*);
alias glbfn_glBinormal3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glBinormal3svEXT = void function(const(GLshort)*);
alias glbfn_glTangentPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBinormalPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTexImage1DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCullParameterdvEXT = void function(GLenum, GLdouble*);
alias glbfn_glCullParameterfvEXT = void function(GLenum, GLfloat*);
alias glbfn_glLabelObjectEXT = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelEXT = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glInsertEventMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPushGroupMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPopGroupMarkerEXT = void function();
alias glbfn_glDepthBoundsEXT = void function(GLclampd, GLclampd);
alias glbfn_glMatrixLoadfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoaddEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultdEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixLoadIdentityEXT = void function(GLenum);
alias glbfn_glMatrixRotatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixRotatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixScalefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixScaledEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixTranslatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixTranslatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixFrustumEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixOrthoEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixPopEXT = void function(GLenum);
alias glbfn_glMatrixPushEXT = void function(GLenum);
alias glbfn_glClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glPushClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glTextureParameterfEXT = void function(GLuint, GLenum, GLenum, GLfloat);
alias glbfn_glTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteriEXT = void function(GLuint, GLenum, GLenum, GLint);
alias glbfn_glTextureParameterivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetTextureImageEXT = void function(GLuint, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureLevelParameterfvEXT = void function(GLuint, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameterivEXT = void function(GLuint, GLenum, GLint, GLenum, GLint*);
alias glbfn_glTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glBindMultiTextureEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordPointerEXT = void function(GLenum, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glMultiTexEnvfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexEnviEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexGendEXT = void function(GLenum, GLenum, GLenum, GLdouble);
alias glbfn_glMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexGenfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexGeniEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glGetMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, GLdouble*);
alias glbfn_glGetMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glMultiTexParameteriEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetMultiTexImageEXT = void function(GLenum, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexLevelParameterfvEXT = void function(GLenum, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetMultiTexLevelParameterivEXT = void function(GLenum, GLenum, GLint, GLenum, GLint*);
alias glbfn_glMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glEnableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloatIndexedvEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoubleIndexedvEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointerIndexedvEXT = void function(GLenum, GLuint, void**);
alias glbfn_glEnableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glIsEnabledIndexedEXT = GLboolean function(GLenum, GLuint);
alias glbfn_glGetIntegerIndexedvEXT = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetBooleanIndexedvEXT = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glCompressedTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTextureImageEXT = void function(GLuint, GLenum, GLint, void*);
alias glbfn_glCompressedMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedMultiTexImageEXT = void function(GLenum, GLenum, GLint, void*);
alias glbfn_glMatrixLoadTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glNamedBufferDataEXT = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glMapNamedBufferEXT = void* function(GLuint, GLenum);
alias glbfn_glUnmapNamedBufferEXT = GLboolean function(GLuint);
alias glbfn_glGetNamedBufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glProgramUniform1fEXT = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform2fEXT = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform1iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform2iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform1fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniformMatrix2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glTextureBufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glMultiTexBufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, GLuint*);
alias glbfn_glMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, GLuint*);
alias glbfn_glProgramUniform1uiEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform2uiEXT = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform1uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glNamedProgramLocalParameters4fvEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedProgramLocalParameterI4iEXT = void function(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glNamedProgramLocalParameterI4ivEXT = void function(GLuint, GLenum, GLuint, const(GLint)*);
alias glbfn_glNamedProgramLocalParametersI4ivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glNamedProgramLocalParameterI4uiEXT = void function(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glNamedProgramLocalParameterI4uivEXT = void function(GLuint, GLenum, GLuint, const(GLuint)*);
alias glbfn_glNamedProgramLocalParametersI4uivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetNamedProgramLocalParameterIivEXT = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetNamedProgramLocalParameterIuivEXT = void function(GLuint, GLenum, GLuint, GLuint*);
alias glbfn_glEnableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloati_vEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_vEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointeri_vEXT = void function(GLenum, GLuint, void**);
alias glbfn_glNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glNamedProgramLocalParameter4dEXT = void function(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glNamedProgramLocalParameter4dvEXT = void function(GLuint, GLenum, GLuint, const(GLdouble)*);
alias glbfn_glNamedProgramLocalParameter4fEXT = void function(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNamedProgramLocalParameter4fvEXT = void function(GLuint, GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetNamedProgramLocalParameterdvEXT = void function(GLuint, GLenum, GLuint, GLdouble*);
alias glbfn_glGetNamedProgramLocalParameterfvEXT = void function(GLuint, GLenum, GLuint, GLfloat*);
alias glbfn_glGetNamedProgramivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, void*);
alias glbfn_glNamedRenderbufferStorageEXT = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedRenderbufferStorageMultisampleEXT = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT = void function(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glCheckNamedFramebufferStatusEXT = GLenum function(GLuint, GLenum);
alias glbfn_glNamedFramebufferTexture1DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture2DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture3DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferRenderbufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glGetNamedFramebufferAttachmentParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGenerateTextureMipmapEXT = void function(GLuint, GLenum);
alias glbfn_glGenerateMultiTexMipmapEXT = void function(GLenum, GLenum);
alias glbfn_glFramebufferDrawBufferEXT = void function(GLuint, GLenum);
alias glbfn_glFramebufferDrawBuffersEXT = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glFramebufferReadBufferEXT = void function(GLuint, GLenum);
alias glbfn_glGetFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedCopyBufferSubDataEXT = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glNamedFramebufferTextureEXT = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayerEXT = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferTextureFaceEXT = void function(GLuint, GLenum, GLuint, GLint, GLenum);
alias glbfn_glTextureRenderbufferEXT = void function(GLuint, GLenum, GLuint);
alias glbfn_glMultiTexRenderbufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glVertexArrayVertexOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayEdgeFlagOffsetEXT = void function(GLuint, GLuint, GLsizei, GLintptr);
alias glbfn_glVertexArrayIndexOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayNormalOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayTexCoordOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayMultiTexCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayFogCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArraySecondaryColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribIOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glEnableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glDisableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glEnableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glDisableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glGetVertexArrayIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetVertexArrayIntegeri_vEXT = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointeri_vEXT = void function(GLuint, GLuint, GLenum, void**);
alias glbfn_glMapNamedBufferRangeEXT = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedNamedBufferRangeEXT = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glNamedBufferStorageEXT = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearNamedBufferDataEXT = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubDataEXT = void function(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glNamedFramebufferParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glGetNamedFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1dEXT = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform2dEXT = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform1dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glTextureBufferRangeEXT = void function(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayBindVertexBufferEXT = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexAttribFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayVertexAttribIFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribLFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribBindingEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexBindingDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexAttribLOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glTexturePageCommitmentEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayVertexAttribDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glColorMaskIndexedEXT = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDrawArraysInstancedEXT = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedEXT = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glDrawRangeElementsEXT = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glFogCoordfEXT = void function(GLfloat);
alias glbfn_glFogCoordfvEXT = void function(const(GLfloat)*);
alias glbfn_glFogCoorddEXT = void function(GLdouble);
alias glbfn_glFogCoorddvEXT = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBlitFramebufferEXT = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisampleEXT = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glIsRenderbufferEXT = GLboolean function(GLuint);
alias glbfn_glBindRenderbufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorageEXT = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebufferEXT = GLboolean function(GLuint);
alias glbfn_glBindFramebufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatusEXT = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmapEXT = void function(GLenum);
alias glbfn_glProgramParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glProgramEnvParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramLocalParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glGetUniformuivEXT = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocationEXT = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocationEXT = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1uiEXT = void function(GLint, GLuint);
alias glbfn_glUniform2uiEXT = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3uiEXT = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4uiEXT = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glGetHistogramEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmaxEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogramEXT = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmaxEXT = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogramEXT = void function(GLenum);
alias glbfn_glResetMinmaxEXT = void function(GLenum);
alias glbfn_glIndexFuncEXT = void function(GLenum, GLclampf);
alias glbfn_glIndexMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glApplyTextureEXT = void function(GLenum);
alias glbfn_glTextureLightEXT = void function(GLenum);
alias glbfn_glTextureMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glMultiDrawArraysEXT = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElementsEXT = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glSampleMaskEXT = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternEXT = void function(GLenum);
alias glbfn_glColorTableEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetColorTableEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetColorTableParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelTransformParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glPixelTransformParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glPixelTransformParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPixelTransformParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTransformParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelTransformParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPointParameterfEXT = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glPolygonOffsetEXT = void function(GLfloat, GLfloat);
alias glbfn_glPolygonOffsetClampEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glProvokingVertexEXT = void function(GLenum);
alias glbfn_glRasterSamplesEXT = void function(GLuint, GLboolean);
alias glbfn_glSecondaryColor3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bvEXT = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dvEXT = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fvEXT = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3ivEXT = void function(const(GLint)*);
alias glbfn_glSecondaryColor3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3svEXT = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ubEXT = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubvEXT = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uivEXT = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3usEXT = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usvEXT = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glUseShaderProgramEXT = void function(GLenum, GLuint);
alias glbfn_glActiveProgramEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramEXT = GLuint function(GLenum, const(GLchar)*);
alias glbfn_glActiveShaderProgramEXT = void function(GLuint, GLuint);
alias glbfn_glBindProgramPipelineEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramvEXT = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glDeleteProgramPipelinesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelinesEXT = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramPipelineInfoLogEXT = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramPipelineivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glIsProgramPipelineEXT = GLboolean function(GLuint);
alias glbfn_glUseProgramStagesEXT = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glValidateProgramPipelineEXT = void function(GLuint);
alias glbfn_glBindImageTextureEXT = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
alias glbfn_glMemoryBarrierEXT = void function(GLbitfield);
alias glbfn_glStencilClearTagEXT = void function(GLsizei, GLuint);
alias glbfn_glActiveStencilFaceEXT = void function(GLenum);
alias glbfn_glTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage3DEXT = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glFramebufferTextureLayerEXT = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glTexBufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glTexParameterIivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuivEXT = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuivEXT = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearColorIiEXT = void function(GLint, GLint, GLint, GLint);
alias glbfn_glClearColorIuiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAreTexturesResidentEXT = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindTextureEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteTexturesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTexturesEXT = void function(GLsizei, GLuint*);
alias glbfn_glIsTextureEXT = GLboolean function(GLuint);
alias glbfn_glPrioritizeTexturesEXT = void function(GLsizei, const(GLuint)*, const(GLclampf)*);
alias glbfn_glTextureNormalEXT = void function(GLenum);
alias glbfn_glGetQueryObjecti64vEXT = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64vEXT = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glBeginTransformFeedbackEXT = void function(GLenum);
alias glbfn_glEndTransformFeedbackEXT = void function();
alias glbfn_glBindBufferRangeEXT = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetEXT = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseEXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsEXT = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVaryingEXT = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glArrayElementEXT = void function(GLint);
alias glbfn_glColorPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glDrawArraysEXT = void function(GLenum, GLint, GLsizei);
alias glbfn_glEdgeFlagPointerEXT = void function(GLsizei, GLsizei, const(GLboolean)*);
alias glbfn_glGetPointervEXT = void function(GLenum, void**);
alias glbfn_glIndexPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glNormalPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glTexCoordPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexAttribL1dEXT = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2dEXT = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdvEXT = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glBeginVertexShaderEXT = void function();
alias glbfn_glEndVertexShaderEXT = void function();
alias glbfn_glBindVertexShaderEXT = void function(GLuint);
alias glbfn_glGenVertexShadersEXT = GLuint function(GLuint);
alias glbfn_glDeleteVertexShaderEXT = void function(GLuint);
alias glbfn_glShaderOp1EXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glShaderOp2EXT = void function(GLenum, GLuint, GLuint, GLuint);
alias glbfn_glShaderOp3EXT = void function(GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSwizzleEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glWriteMaskEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glInsertComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glExtractComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glGenSymbolsEXT = GLuint function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glSetInvariantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glSetLocalConstantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glVariantbvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVariantsvEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVariantivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVariantfvEXT = void function(GLuint, const(GLfloat)*);
alias glbfn_glVariantdvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVariantubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVariantusvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVariantuivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVariantPointerEXT = void function(GLuint, GLenum, GLuint, const(void)*);
alias glbfn_glEnableVariantClientStateEXT = void function(GLuint);
alias glbfn_glDisableVariantClientStateEXT = void function(GLuint);
alias glbfn_glBindLightParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindMaterialParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindTexGenParameterEXT = GLuint function(GLenum, GLenum, GLenum);
alias glbfn_glBindTextureUnitParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindParameterEXT = GLuint function(GLenum);
alias glbfn_glIsVariantEnabledEXT = GLboolean function(GLuint, GLenum);
alias glbfn_glGetVariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetVariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetInvariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetInvariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetInvariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetLocalConstantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetLocalConstantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetLocalConstantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glVertexWeightfEXT = void function(GLfloat);
alias glbfn_glVertexWeightfvEXT = void function(const(GLfloat)*);
alias glbfn_glVertexWeightPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
//alias glbfn_glImportSyncEXT = GLsync function(GLenum, GLintptr, GLbitfield);
alias glbfn_glFrameTerminatorGREMEDY = void function();
alias glbfn_glStringMarkerGREMEDY = void function(GLsizei, const(void)*);
alias glbfn_glImageTransformParameteriHP = void function(GLenum, GLenum, GLint);
alias glbfn_glImageTransformParameterfHP = void function(GLenum, GLenum, GLfloat);
alias glbfn_glImageTransformParameterivHP = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glImageTransformParameterfvHP = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetImageTransformParameterivHP = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetImageTransformParameterfvHP = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glMultiModeDrawArraysIBM = void function(const(GLenum)*, const(GLint)*, const(GLsizei)*, GLsizei, GLint);
alias glbfn_glMultiModeDrawElementsIBM = void function(const(GLenum)*, const(GLsizei)*, GLenum, const(void*)*, GLsizei, GLint);
alias glbfn_glFlushStaticDataIBM = void function(GLenum);
alias glbfn_glColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glSecondaryColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glEdgeFlagPointerListIBM = void function(GLint, const(GLboolean*)*, GLint);
alias glbfn_glFogCoordPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glIndexPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glNormalPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glTexCoordPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glVertexPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glBlendFuncSeparateINGR = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glApplyFramebufferAttachmentCMAAINTEL = void function();
alias glbfn_glSyncTextureINTEL = void function(GLuint);
alias glbfn_glUnmapTexture2DINTEL = void function(GLuint, GLint);
alias glbfn_glMapTexture2DINTEL = void* function(GLuint, GLint, GLbitfield, GLint*, GLenum*);
alias glbfn_glVertexPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glNormalPointervINTEL = void function(GLenum, const(void*)*);
alias glbfn_glColorPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glTexCoordPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glBeginPerfQueryINTEL = void function(GLuint);
alias glbfn_glCreatePerfQueryINTEL = void function(GLuint, GLuint*);
alias glbfn_glDeletePerfQueryINTEL = void function(GLuint);
alias glbfn_glEndPerfQueryINTEL = void function(GLuint);
alias glbfn_glGetFirstPerfQueryIdINTEL = void function(GLuint*);
alias glbfn_glGetNextPerfQueryIdINTEL = void function(GLuint, GLuint*);
alias glbfn_glGetPerfCounterInfoINTEL = void function(GLuint, GLuint, GLuint, GLchar*, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*, GLuint64*);
alias glbfn_glGetPerfQueryDataINTEL = void function(GLuint, GLuint, GLsizei, GLvoid*, GLuint*);
alias glbfn_glGetPerfQueryIdByNameINTEL = void function(GLchar*, GLuint*);
alias glbfn_glGetPerfQueryInfoINTEL = void function(GLuint, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*);
alias glbfn_glBlendBarrierKHR = void function();
alias glbfn_glDebugMessageControlKHR = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertKHR = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackKHR = void function(GLDEBUGPROCKHR, const(void)*);
alias glbfn_glGetDebugMessageLogKHR = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroupKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroupKHR = void function();
alias glbfn_glObjectLabelKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelKHR = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabelKHR = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabelKHR = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPointervKHR = void function(GLenum, void**);
alias glbfn_glGetGraphicsResetStatusKHR = GLenum function();
alias glbfn_glReadnPixelsKHR = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformfvKHR = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivKHR = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivKHR = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glResizeBuffersMESA = void function();
alias glbfn_glWindowPos2dMESA = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fMESA = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iMESA = void function(GLint, GLint);
alias glbfn_glWindowPos2ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos2sMESA = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos3dMESA = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fMESA = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iMESA = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos3sMESA = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos4dMESA = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos4dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos4fMESA = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos4fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos4iMESA = void function(GLint, GLint, GLint, GLint);
alias glbfn_glWindowPos4ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos4sMESA = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glWindowPos4svMESA = void function(const(GLshort)*);
alias glbfn_glBeginConditionalRenderNVX = void function(GLuint);
alias glbfn_glEndConditionalRenderNVX = void function();
alias glbfn_glMultiDrawArraysIndirectBindlessNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawArraysIndirectBindlessCountNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessCountNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glGetTextureHandleNV = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleNV = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentNV = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentNV = void function(GLuint64);
alias glbfn_glGetImageHandleNV = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentNV = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentNV = void function(GLuint64);
alias glbfn_glUniformHandleui64NV = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vNV = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64NV = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glBlendParameteriNV = void function(GLenum, GLint);
alias glbfn_glBlendBarrierNV = void function();
alias glbfn_glCreateStatesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteStatesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsStateNV = GLboolean function(GLuint);
alias glbfn_glStateCaptureNV = void function(GLuint, GLenum);
alias glbfn_glGetCommandHeaderNV = GLuint function(GLenum, GLuint);
alias glbfn_glGetStageIndexNV = GLushort function(GLenum);
alias glbfn_glDrawCommandsNV = void function(GLenum, GLuint, const(GLintptr)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsAddressNV = void function(GLenum, const(GLuint64)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsStatesNV = void function(GLuint, const(GLintptr)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glDrawCommandsStatesAddressNV = void function(const(GLuint64)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCreateCommandListsNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteCommandListsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsCommandListNV = GLboolean function(GLuint);
alias glbfn_glListDrawCommandsStatesClientNV = void function(GLuint, GLuint, const(void*)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCommandListSegmentsNV = void function(GLuint, GLuint);
alias glbfn_glCompileCommandListNV = void function(GLuint);
alias glbfn_glCallCommandListNV = void function(GLuint);
alias glbfn_glBeginConditionalRenderNV = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRenderNV = void function();
alias glbfn_glSubpixelPrecisionBiasNV = void function(GLuint, GLuint);
alias glbfn_glConservativeRasterParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCopyImageSubDataNV = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glDepthRangedNV = void function(GLdouble, GLdouble);
alias glbfn_glClearDepthdNV = void function(GLdouble);
alias glbfn_glDepthBoundsdNV = void function(GLdouble, GLdouble);
alias glbfn_glDrawTextureNV = void function(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const(void)*);
alias glbfn_glMapParameterivNV = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glMapParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void*);
alias glbfn_glGetMapParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapAttribParameterivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetMapAttribParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glEvalMapsNV = void function(GLenum, GLenum);
alias glbfn_glGetMultisamplefvNV = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaskIndexedNV = void function(GLuint, GLbitfield);
alias glbfn_glTexRenderbufferNV = void function(GLenum, GLuint);
alias glbfn_glDeleteFencesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFencesNV = void function(GLsizei, GLuint*);
alias glbfn_glIsFenceNV = GLboolean function(GLuint);
alias glbfn_glTestFenceNV = GLboolean function(GLuint);
alias glbfn_glGetFenceivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glFinishFenceNV = void function(GLuint);
alias glbfn_glSetFenceNV = void function(GLuint, GLenum);
alias glbfn_glFragmentCoverageColorNV = void function(GLuint);
alias glbfn_glProgramNamedParameter4fNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramNamedParameter4fvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glProgramNamedParameter4dNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramNamedParameter4dvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLdouble)*);
alias glbfn_glGetProgramNamedParameterfvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat*);
alias glbfn_glGetProgramNamedParameterdvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble*);
alias glbfn_glCoverageModulationTableNV = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetCoverageModulationTableNV = void function(GLsizei, GLfloat*);
alias glbfn_glCoverageModulationNV = void function(GLenum);
alias glbfn_glRenderbufferStorageMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glProgramVertexLimitNV = void function(GLenum, GLint);
alias glbfn_glFramebufferTextureEXT = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureFaceEXT = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glProgramLocalParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramLocalParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramLocalParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramLocalParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramLocalParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramLocalParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glProgramEnvParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramEnvParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramEnvParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramEnvParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramEnvParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramEnvParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramLocalParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramLocalParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glGetProgramEnvParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramEnvParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glProgramSubroutineParametersuivNV = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramSubroutineParameteruivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glVertex2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glVertex2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glNormal3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glNormal3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord1hNV = void function(GLhalfNV);
alias glbfn_glTexCoord1hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glMultiTexCoord1hNV = void function(GLenum, GLhalfNV);
alias glbfn_glMultiTexCoord1hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord2hNV = void function(GLenum, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord2hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord3hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord3hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord4hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord4hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glFogCoordhNV = void function(GLhalfNV);
alias glbfn_glFogCoordhvNV = void function(const(GLhalfNV)*);
alias glbfn_glSecondaryColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glSecondaryColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexWeighthNV = void function(GLhalfNV);
alias glbfn_glVertexWeighthvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexAttrib1hNV = void function(GLuint, GLhalfNV);
alias glbfn_glVertexAttrib1hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib2hNV = void function(GLuint, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib2hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib3hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib3hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib4hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib4hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttribs1hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs2hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs3hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs4hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glGetInternalformatSampleivNV = void function(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint*);
alias glbfn_glGenOcclusionQueriesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteOcclusionQueriesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsOcclusionQueryNV = GLboolean function(GLuint);
alias glbfn_glBeginOcclusionQueryNV = void function(GLuint);
alias glbfn_glEndOcclusionQueryNV = void function();
alias glbfn_glGetOcclusionQueryivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetOcclusionQueryuivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glProgramBufferParametersfvNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramBufferParametersIivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramBufferParametersIuivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGenPathsNV = GLuint function(GLsizei);
alias glbfn_glDeletePathsNV = void function(GLuint, GLsizei);
alias glbfn_glIsPathNV = GLboolean function(GLuint);
alias glbfn_glPathCommandsNV = void function(GLuint, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathCoordsNV = void function(GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCommandsNV = void function(GLuint, GLsizei, GLsizei, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCoordsNV = void function(GLuint, GLsizei, GLsizei, GLenum, const(void)*);
alias glbfn_glPathStringNV = void function(GLuint, GLenum, GLsizei, const(void)*);
alias glbfn_glPathGlyphsNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLsizei, GLenum, const(void)*, GLenum, GLuint, GLfloat);
alias glbfn_glPathGlyphRangeNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
alias glbfn_glWeightPathsNV = void function(GLuint, GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glCopyPathNV = void function(GLuint, GLuint);
alias glbfn_glInterpolatePathsNV = void function(GLuint, GLuint, GLuint, GLfloat);
alias glbfn_glTransformPathNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterivNV = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPathParameteriNV = void function(GLuint, GLenum, GLint);
alias glbfn_glPathParameterfvNV = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterfNV = void function(GLuint, GLenum, GLfloat);
alias glbfn_glPathDashArrayNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glPathStencilFuncNV = void function(GLenum, GLint, GLuint);
alias glbfn_glPathStencilDepthOffsetNV = void function(GLfloat, GLfloat);
alias glbfn_glStencilFillPathNV = void function(GLuint, GLenum, GLuint);
alias glbfn_glStencilStrokePathNV = void function(GLuint, GLint, GLuint);
alias glbfn_glStencilFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glStencilStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathCoverDepthFuncNV = void function(GLenum);
alias glbfn_glCoverFillPathNV = void function(GLuint, GLenum);
alias glbfn_glCoverStrokePathNV = void function(GLuint, GLenum);
alias glbfn_glCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPathParameterivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetPathParameterfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetPathCommandsNV = void function(GLuint, GLubyte*);
alias glbfn_glGetPathCoordsNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathDashArrayNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathMetricsNV = void function(GLbitfield, GLsizei, GLenum, const(void)*, GLuint, GLsizei, GLfloat*);
alias glbfn_glGetPathMetricRangeNV = void function(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat*);
alias glbfn_glGetPathSpacingNV = void function(GLenum, GLsizei, GLenum, const(void)*, GLuint, GLfloat, GLfloat, GLenum, GLfloat*);
alias glbfn_glIsPointInFillPathNV = GLboolean function(GLuint, GLuint, GLfloat, GLfloat);
alias glbfn_glIsPointInStrokePathNV = GLboolean function(GLuint, GLfloat, GLfloat);
alias glbfn_glGetPathLengthNV = GLfloat function(GLuint, GLsizei, GLsizei);
alias glbfn_glPointAlongPathNV = GLboolean function(GLuint, GLsizei, GLsizei, GLfloat, GLfloat*, GLfloat*, GLfloat*, GLfloat*);
alias glbfn_glMatrixLoad3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoad3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverFillPathNV = void function(GLuint, GLenum, GLuint, GLenum);
alias glbfn_glStencilThenCoverStrokePathNV = void function(GLuint, GLint, GLuint, GLenum);
alias glbfn_glStencilThenCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathGlyphIndexRangeNV = GLenum function(GLenum, const(void)*, GLbitfield, GLuint, GLfloat, GLuint*);
alias glbfn_glPathGlyphIndexArrayNV = GLenum function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glPathMemoryGlyphIndexArrayNV = GLenum function(GLuint, GLenum, GLsizeiptr, const(void)*, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glProgramPathFragmentInputGenNV = void function(GLuint, GLint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glGetProgramResourcefvNV = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLfloat*);
alias glbfn_glPathColorGenNV = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathTexGenNV = void function(GLenum, GLenum, GLint, const(GLfloat)*);
alias glbfn_glPathFogGenNV = void function(GLenum);
alias glbfn_glGetPathColorGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathColorGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetPathTexGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathTexGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelDataRangeNV = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glFlushPixelDataRangeNV = void function(GLenum);
alias glbfn_glPointParameteriNV = void function(GLenum, GLint);
alias glbfn_glPointParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glPresentFrameKeyedNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
alias glbfn_glPresentFrameDualFillNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetVideoivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideouivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetVideoi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVideoui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glPrimitiveRestartNV = void function();
alias glbfn_glPrimitiveRestartIndexNV = void function(GLuint);
alias glbfn_glCombinerParameterfvNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glCombinerParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCombinerParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glCombinerParameteriNV = void function(GLenum, GLint);
alias glbfn_glCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glCombinerOutputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
alias glbfn_glFinalCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glGetCombinerInputParameterfvNV = void function(GLenum, GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerInputParameterivNV = void function(GLenum, GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetCombinerOutputParameterfvNV = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerOutputParameterivNV = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetFinalCombinerInputParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFinalCombinerInputParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glCombinerStageParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetCombinerStageParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glFramebufferSampleLocationsfvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvNV = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glResolveDepthValuesNV = void function();
alias glbfn_glMakeBufferResidentNV = void function(GLenum, GLenum);
alias glbfn_glMakeBufferNonResidentNV = void function(GLenum);
alias glbfn_glIsBufferResidentNV = GLboolean function(GLenum);
alias glbfn_glMakeNamedBufferResidentNV = void function(GLuint, GLenum);
alias glbfn_glMakeNamedBufferNonResidentNV = void function(GLuint);
alias glbfn_glIsNamedBufferResidentNV = GLboolean function(GLuint);
alias glbfn_glGetBufferParameterui64vNV = void function(GLenum, GLenum, GLuint64EXT*);
alias glbfn_glGetNamedBufferParameterui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glGetIntegerui64vNV = void function(GLenum, GLuint64EXT*);
alias glbfn_glUniformui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniformui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniformui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniformui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glTextureBarrierNV = void function();
alias glbfn_glTexImage2DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glBeginTransformFeedbackNV = void function(GLenum);
alias glbfn_glEndTransformFeedbackNV = void function();
alias glbfn_glTransformFeedbackAttribsNV = void function(GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindBufferRangeNV = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetNV = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseNV = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsNV = void function(GLuint, GLsizei, const(GLint)*, GLenum);
alias glbfn_glActiveVaryingNV = void function(GLuint, const(GLchar)*);
alias glbfn_glGetVaryingLocationNV = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveVaryingNV = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glGetTransformFeedbackVaryingNV = void function(GLuint, GLuint, GLint*);
alias glbfn_glTransformFeedbackStreamAttribsNV = void function(GLsizei, const(GLint)*, GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacksNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacksNV = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedbackNV = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedbackNV = void function();
alias glbfn_glResumeTransformFeedbackNV = void function();
alias glbfn_glDrawTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glVDPAUInitNV = void function(const(void)*, const(void)*);
alias glbfn_glVDPAUFiniNV = void function();
alias glbfn_glVDPAURegisterVideoSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAURegisterOutputSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAUIsSurfaceNV = GLboolean function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUUnregisterSurfaceNV = void function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUGetSurfaceivNV = void function(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glVDPAUSurfaceAccessNV = void function(GLvdpauSurfaceNV, GLenum);
alias glbfn_glVDPAUMapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glVDPAUUnmapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glFlushVertexArrayRangeNV = void function();
alias glbfn_glVertexArrayRangeNV = void function(GLsizei, const(void)*);
alias glbfn_glVertexAttribL1i64NV = void function(GLuint, GLint64EXT);
alias glbfn_glVertexAttribL2i64NV = void function(GLuint, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL3i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL4i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL1i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL2i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL3i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL4i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL1ui64NV = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL2ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL3ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL4ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL2ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL3ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL4ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVertexAttribLui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glVertexAttribLFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glBufferAddressRangeNV = void function(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
alias glbfn_glVertexFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glNormalFormatNV = void function(GLenum, GLsizei);
alias glbfn_glColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glIndexFormatNV = void function(GLenum, GLsizei);
alias glbfn_glTexCoordFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glEdgeFlagFormatNV = void function(GLsizei);
alias glbfn_glSecondaryColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glFogCoordFormatNV = void function(GLenum, GLsizei);
alias glbfn_glVertexAttribFormatNV = void function(GLuint, GLint, GLenum, GLboolean, GLsizei);
alias glbfn_glVertexAttribIFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glGetIntegerui64i_vNV = void function(GLenum, GLuint, GLuint64EXT*);
alias glbfn_glAreProgramsResidentNV = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindProgramNV = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glExecuteProgramNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGenProgramsNV = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramParameterdvNV = void function(GLenum, GLuint, GLenum, GLdouble*);
alias glbfn_glGetProgramParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glGetProgramivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramStringNV = void function(GLuint, GLenum, GLubyte*);
alias glbfn_glGetTrackMatrixivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribdvNV = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervNV = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgramNV = GLboolean function(GLuint);
alias glbfn_glLoadProgramNV = void function(GLenum, GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glProgramParameter4dNV = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramParameter4dvNV = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramParameter4fNV = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramParameter4fvNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramParameters4dvNV = void function(GLenum, GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramParameters4fvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glRequestResidentProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glTrackMatrixNV = void function(GLenum, GLuint, GLenum, GLenum);
alias glbfn_glVertexAttribPointerNV = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexAttrib1dNV = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fNV = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sNV = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dNV = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fNV = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sNV = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dNV = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fNV = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sNV = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4dNV = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fNV = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4sNV = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubNV = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4ubvNV = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribs1dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs1fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs1svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs2dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs2fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs2svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs3dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs3fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs3svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs4fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs4svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4ubvNV = void function(GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glVertexAttribI1iEXT = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1uiEXT = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3uiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4uiEXT = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4svEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribIPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuivEXT = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBeginVideoCaptureNV = void function(GLuint);
alias glbfn_glBindVideoCaptureStreamBufferNV = void function(GLuint, GLuint, GLenum, GLintptrARB);
alias glbfn_glBindVideoCaptureStreamTextureNV = void function(GLuint, GLuint, GLenum, GLenum, GLuint);
alias glbfn_glEndVideoCaptureNV = void function(GLuint);
alias glbfn_glGetVideoCaptureivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamivNV = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamfvNV = void function(GLuint, GLuint, GLenum, GLfloat*);
alias glbfn_glGetVideoCaptureStreamdvNV = void function(GLuint, GLuint, GLenum, GLdouble*);
alias glbfn_glVideoCaptureNV = GLenum function(GLuint, GLuint*, GLuint64EXT*);
alias glbfn_glVideoCaptureStreamParameterivNV = void function(GLuint, GLuint, GLenum, const(GLint)*);
alias glbfn_glVideoCaptureStreamParameterfvNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glVideoCaptureStreamParameterdvNV = void function(GLuint, GLuint, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1bOES = void function(GLenum, GLbyte);
alias glbfn_glMultiTexCoord1bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord2bOES = void function(GLenum, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord2bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord3bOES = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord3bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord4bOES = void function(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord4bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glTexCoord1bOES = void function(GLbyte);
alias glbfn_glTexCoord1bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord2bOES = void function(GLbyte, GLbyte);
alias glbfn_glTexCoord2bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord3bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord4bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex2bOES = void function(GLbyte, GLbyte);
alias glbfn_glVertex2bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex3bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex4bvOES = void function(const(GLbyte)*);
alias glbfn_glAlphaFuncxOES = void function(GLenum, GLfixed);
alias glbfn_glClearColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearDepthxOES = void function(GLfixed);
alias glbfn_glClipPlanexOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glColor4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glDepthRangexOES = void function(GLfixed, GLfixed);
alias glbfn_glFogxOES = void function(GLenum, GLfixed);
alias glbfn_glFogxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glFrustumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glGetClipPlanexOES = void function(GLenum, GLfixed*);
alias glbfn_glGetFixedvOES = void function(GLenum, GLfixed*);
alias glbfn_glGetTexEnvxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glLightModelxOES = void function(GLenum, GLfixed);
alias glbfn_glLightModelxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glLightxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glLightxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glLineWidthxOES = void function(GLfixed);
alias glbfn_glLoadMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glMaterialxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glMultMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord4xOES = void function(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glNormal3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glOrthoxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glPointParameterxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glPointSizexOES = void function(GLfixed);
alias glbfn_glPolygonOffsetxOES = void function(GLfixed, GLfixed);
alias glbfn_glRotatexOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glScalexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexEnvxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexEnvxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTexParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTranslatexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glGetLightxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glPointParameterxOES = void function(GLenum, GLfixed);
alias glbfn_glSampleCoveragexOES = void function(GLclampx, GLboolean);
alias glbfn_glAccumxOES = void function(GLenum, GLfixed);
alias glbfn_glBitmapxOES = void function(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const(GLubyte)*);
alias glbfn_glBlendColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearAccumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xvOES = void function(const(GLfixed)*);
alias glbfn_glColor4xvOES = void function(const(GLfixed)*);
alias glbfn_glConvolutionParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glConvolutionParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glEvalCoord1xOES = void function(GLfixed);
alias glbfn_glEvalCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glEvalCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glEvalCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glFeedbackBufferxOES = void function(GLsizei, GLenum, const(GLfixed)*);
alias glbfn_glGetConvolutionParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetHistogramParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetLightxOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMapxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glGetPixelMapxv = void function(GLenum, GLint, GLfixed*);
alias glbfn_glGetTexGenxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexLevelParameterxvOES = void function(GLenum, GLint, GLenum, GLfixed*);
alias glbfn_glIndexxOES = void function(GLfixed);
alias glbfn_glIndexxvOES = void function(const(GLfixed)*);
alias glbfn_glLoadTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMap1xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMap2xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMapGrid1xOES = void function(GLint, GLfixed, GLfixed);
alias glbfn_glMapGrid2xOES = void function(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord1xOES = void function(GLenum, GLfixed);
alias glbfn_glMultiTexCoord1xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord2xOES = void function(GLenum, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord2xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord3xOES = void function(GLenum, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord3xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord4xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glNormal3xvOES = void function(const(GLfixed)*);
alias glbfn_glPassThroughxOES = void function(GLfixed);
alias glbfn_glPixelMapx = void function(GLenum, GLint, const(GLfixed)*);
alias glbfn_glPixelStorex = void function(GLenum, GLfixed);
alias glbfn_glPixelTransferxOES = void function(GLenum, GLfixed);
alias glbfn_glPixelZoomxOES = void function(GLfixed, GLfixed);
alias glbfn_glPrioritizeTexturesxOES = void function(GLsizei, const(GLuint)*, const(GLfixed)*);
alias glbfn_glRasterPos2xOES = void function(GLfixed, GLfixed);
alias glbfn_glRasterPos2xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos3xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos4xvOES = void function(const(GLfixed)*);
alias glbfn_glRectxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRectxvOES = void function(const(GLfixed)*, const(GLfixed)*);
alias glbfn_glTexCoord1xOES = void function(GLfixed);
alias glbfn_glTexCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glTexCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord3xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord4xvOES = void function(const(GLfixed)*);
alias glbfn_glTexGenxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexGenxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glVertex2xOES = void function(GLfixed);
alias glbfn_glVertex2xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex3xOES = void function(GLfixed, GLfixed);
alias glbfn_glVertex3xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex4xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glVertex4xvOES = void function(const(GLfixed)*);
alias glbfn_glQueryMatrixxOES = GLbitfield function(GLfixed*, GLint*);
alias glbfn_glClearDepthfOES = void function(GLclampf);
alias glbfn_glClipPlanefOES = void function(GLenum, const(GLfloat)*);
alias glbfn_glDepthRangefOES = void function(GLclampf, GLclampf);
alias glbfn_glFrustumfOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetClipPlanefOES = void function(GLenum, GLfloat*);
alias glbfn_glOrthofOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glFramebufferTextureMultiviewOVR = void function(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
alias glbfn_glHintPGI = void function(GLenum, GLint);
alias glbfn_glDetailTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetDetailTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glFogFuncSGIS = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetFogFuncSGIS = void function(GLfloat*);
alias glbfn_glSampleMaskSGIS = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternSGIS = void function(GLenum);
alias glbfn_glPixelTexGenParameteriSGIS = void function(GLenum, GLint);
alias glbfn_glPixelTexGenParameterivSGIS = void function(GLenum, const(GLint)*);
alias glbfn_glPixelTexGenParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPixelTexGenParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTexGenParameterivSGIS = void function(GLenum, GLint*);
alias glbfn_glGetPixelTexGenParameterfvSGIS = void function(GLenum, GLfloat*);
alias glbfn_glPointParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glSharpenTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetSharpenTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glTexImage4DSGIS = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage4DSGIS = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureColorMaskSGIS = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetTexFilterFuncSGIS = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glTexFilterFuncSGIS = void function(GLenum, GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glAsyncMarkerSGIX = void function(GLuint);
alias glbfn_glFinishAsyncSGIX = GLint function(GLuint*);
alias glbfn_glPollAsyncSGIX = GLint function(GLuint*);
alias glbfn_glGenAsyncMarkersSGIX = GLuint function(GLsizei);
alias glbfn_glDeleteAsyncMarkersSGIX = void function(GLuint, GLsizei);
alias glbfn_glIsAsyncMarkerSGIX = GLboolean function(GLuint);
alias glbfn_glFlushRasterSGIX = void function();
alias glbfn_glFragmentColorMaterialSGIX = void function(GLenum, GLenum);
alias glbfn_glFragmentLightfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentLightfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentLightivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFragmentLightModelfSGIX = void function(GLenum, GLfloat);
alias glbfn_glFragmentLightModelfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightModeliSGIX = void function(GLenum, GLint);
alias glbfn_glFragmentLightModelivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glFragmentMaterialfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentMaterialfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentMaterialiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentMaterialivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glGetFragmentLightfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentLightivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetFragmentMaterialfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentMaterialivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glLightEnviSGIX = void function(GLenum, GLint);
alias glbfn_glFrameZoomSGIX = void function(GLint);
alias glbfn_glIglooInterfaceSGIX = void function(GLenum, const(void)*);
alias glbfn_glGetInstrumentsSGIX = GLint function();
alias glbfn_glInstrumentsBufferSGIX = void function(GLsizei, GLint*);
alias glbfn_glPollInstrumentsSGIX = GLint function(GLint*);
alias glbfn_glReadInstrumentsSGIX = void function(GLint);
alias glbfn_glStartInstrumentsSGIX = void function();
alias glbfn_glStopInstrumentsSGIX = void function(GLint);
alias glbfn_glGetListParameterfvSGIX = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetListParameterivSGIX = void function(GLuint, GLenum, GLint*);
alias glbfn_glListParameterfSGIX = void function(GLuint, GLenum, GLfloat);
alias glbfn_glListParameterfvSGIX = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glListParameteriSGIX = void function(GLuint, GLenum, GLint);
alias glbfn_glListParameterivSGIX = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPixelTexGenSGIX = void function(GLenum);
alias glbfn_glDeformationMap3dSGIX = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glDeformationMap3fSGIX = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glDeformSGIX = void function(GLbitfield);
alias glbfn_glLoadIdentityDeformationMapSGIX = void function(GLbitfield);
alias glbfn_glReferencePlaneSGIX = void function(const(GLdouble)*);
alias glbfn_glSpriteParameterfSGIX = void function(GLenum, GLfloat);
alias glbfn_glSpriteParameterfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glSpriteParameteriSGIX = void function(GLenum, GLint);
alias glbfn_glSpriteParameterivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glTagSampleBufferSGIX = void function();
alias glbfn_glColorTableSGI = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfvSGI = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameterivSGI = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTableSGI = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTableSGI = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfvSGI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameterivSGI = void function(GLenum, GLenum, GLint*);
alias glbfn_glFinishTextureSUNX = void function();
alias glbfn_glGlobalAlphaFactorbSUN = void function(GLbyte);
alias glbfn_glGlobalAlphaFactorsSUN = void function(GLshort);
alias glbfn_glGlobalAlphaFactoriSUN = void function(GLint);
alias glbfn_glGlobalAlphaFactorfSUN = void function(GLfloat);
alias glbfn_glGlobalAlphaFactordSUN = void function(GLdouble);
alias glbfn_glGlobalAlphaFactorubSUN = void function(GLubyte);
alias glbfn_glGlobalAlphaFactorusSUN = void function(GLushort);
alias glbfn_glGlobalAlphaFactoruiSUN = void function(GLuint);
alias glbfn_glDrawMeshArraysSUN = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glReplacementCodeuiSUN = void function(GLuint);
alias glbfn_glReplacementCodeusSUN = void function(GLushort);
alias glbfn_glReplacementCodeubSUN = void function(GLubyte);
alias glbfn_glReplacementCodeuivSUN = void function(const(GLuint)*);
alias glbfn_glReplacementCodeusvSUN = void function(const(GLushort)*);
alias glbfn_glReplacementCodeubvSUN = void function(const(GLubyte)*);
alias glbfn_glReplacementCodePointerSUN = void function(GLenum, GLsizei, const(void*)*);
alias glbfn_glColor4ubVertex2fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex2fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor4ubVertex3fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex3fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4ubVertex3fSUN = void function(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4ubVertex3fvSUN = void function(const(GLfloat)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4ubVertex3fSUN = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4ubVertex3fvSUN = void function(const(GLuint)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
}


__gshared glbfn_glCullFace glCullFace = function void (uint a0) nothrow @nogc {
  glbfn_glCullFace_loader(a0,);
};
private auto glbfn_glCullFace_loader (uint a0) nothrow @nogc {
  glCullFace = cast(glbfn_glCullFace)glbindGetProcAddress(`glCullFace`);
  if (glCullFace is null) assert(0, `OpenGL function 'glCullFace' not found!`);
  glCullFace(a0,);
}
__gshared glbfn_glFrontFace glFrontFace = function void (uint a0) nothrow @nogc {
  glbfn_glFrontFace_loader(a0,);
};
private auto glbfn_glFrontFace_loader (uint a0) nothrow @nogc {
  glFrontFace = cast(glbfn_glFrontFace)glbindGetProcAddress(`glFrontFace`);
  if (glFrontFace is null) assert(0, `OpenGL function 'glFrontFace' not found!`);
  glFrontFace(a0,);
}
__gshared glbfn_glHint glHint = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glHint_loader(a0,a1,);
};
private auto glbfn_glHint_loader (uint a0, uint a1) nothrow @nogc {
  glHint = cast(glbfn_glHint)glbindGetProcAddress(`glHint`);
  if (glHint is null) assert(0, `OpenGL function 'glHint' not found!`);
  glHint(a0,a1,);
}
__gshared glbfn_glLineWidth glLineWidth = function void (float a0) nothrow @nogc {
  glbfn_glLineWidth_loader(a0,);
};
private auto glbfn_glLineWidth_loader (float a0) nothrow @nogc {
  glLineWidth = cast(glbfn_glLineWidth)glbindGetProcAddress(`glLineWidth`);
  if (glLineWidth is null) assert(0, `OpenGL function 'glLineWidth' not found!`);
  glLineWidth(a0,);
}
__gshared glbfn_glPointSize glPointSize = function void (float a0) nothrow @nogc {
  glbfn_glPointSize_loader(a0,);
};
private auto glbfn_glPointSize_loader (float a0) nothrow @nogc {
  glPointSize = cast(glbfn_glPointSize)glbindGetProcAddress(`glPointSize`);
  if (glPointSize is null) assert(0, `OpenGL function 'glPointSize' not found!`);
  glPointSize(a0,);
}
__gshared glbfn_glPolygonMode glPolygonMode = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glPolygonMode_loader(a0,a1,);
};
private auto glbfn_glPolygonMode_loader (uint a0, uint a1) nothrow @nogc {
  glPolygonMode = cast(glbfn_glPolygonMode)glbindGetProcAddress(`glPolygonMode`);
  if (glPolygonMode is null) assert(0, `OpenGL function 'glPolygonMode' not found!`);
  glPolygonMode(a0,a1,);
}
__gshared glbfn_glScissor glScissor = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glScissor_loader(a0,a1,a2,a3,);
};
private auto glbfn_glScissor_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glScissor = cast(glbfn_glScissor)glbindGetProcAddress(`glScissor`);
  if (glScissor is null) assert(0, `OpenGL function 'glScissor' not found!`);
  glScissor(a0,a1,a2,a3,);
}
__gshared glbfn_glTexParameterf glTexParameterf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glTexParameterf_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glTexParameterf = cast(glbfn_glTexParameterf)glbindGetProcAddress(`glTexParameterf`);
  if (glTexParameterf is null) assert(0, `OpenGL function 'glTexParameterf' not found!`);
  glTexParameterf(a0,a1,a2,);
}
__gshared glbfn_glTexParameterfv glTexParameterfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glTexParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glTexParameterfv = cast(glbfn_glTexParameterfv)glbindGetProcAddress(`glTexParameterfv`);
  if (glTexParameterfv is null) assert(0, `OpenGL function 'glTexParameterfv' not found!`);
  glTexParameterfv(a0,a1,a2,);
}
__gshared glbfn_glTexParameteri glTexParameteri = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTexParameteri_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameteri_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glTexParameteri = cast(glbfn_glTexParameteri)glbindGetProcAddress(`glTexParameteri`);
  if (glTexParameteri is null) assert(0, `OpenGL function 'glTexParameteri' not found!`);
  glTexParameteri(a0,a1,a2,);
}
__gshared glbfn_glTexParameteriv glTexParameteriv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameteriv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexParameteriv = cast(glbfn_glTexParameteriv)glbindGetProcAddress(`glTexParameteriv`);
  if (glTexParameteriv is null) assert(0, `OpenGL function 'glTexParameteriv' not found!`);
  glTexParameteriv(a0,a1,a2,);
}
__gshared glbfn_glTexImage1D glTexImage1D = function void (uint a0, int a1, int a2, int a3, int a4, uint a5, uint a6, const(void)* a7) nothrow @nogc {
  glbfn_glTexImage1D_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTexImage1D_loader (uint a0, int a1, int a2, int a3, int a4, uint a5, uint a6, const(void)* a7) nothrow @nogc {
  glTexImage1D = cast(glbfn_glTexImage1D)glbindGetProcAddress(`glTexImage1D`);
  if (glTexImage1D is null) assert(0, `OpenGL function 'glTexImage1D' not found!`);
  glTexImage1D(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTexImage2D glTexImage2D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glbfn_glTexImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTexImage2D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glTexImage2D = cast(glbfn_glTexImage2D)glbindGetProcAddress(`glTexImage2D`);
  if (glTexImage2D is null) assert(0, `OpenGL function 'glTexImage2D' not found!`);
  glTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glDrawBuffer glDrawBuffer = function void (uint a0) nothrow @nogc {
  glbfn_glDrawBuffer_loader(a0,);
};
private auto glbfn_glDrawBuffer_loader (uint a0) nothrow @nogc {
  glDrawBuffer = cast(glbfn_glDrawBuffer)glbindGetProcAddress(`glDrawBuffer`);
  if (glDrawBuffer is null) assert(0, `OpenGL function 'glDrawBuffer' not found!`);
  glDrawBuffer(a0,);
}
__gshared glbfn_glClear glClear = function void (uint a0) nothrow @nogc {
  glbfn_glClear_loader(a0,);
};
private auto glbfn_glClear_loader (uint a0) nothrow @nogc {
  glClear = cast(glbfn_glClear)glbindGetProcAddress(`glClear`);
  if (glClear is null) assert(0, `OpenGL function 'glClear' not found!`);
  glClear(a0,);
}
__gshared glbfn_glClearColor glClearColor = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glClearColor_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearColor_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glClearColor = cast(glbfn_glClearColor)glbindGetProcAddress(`glClearColor`);
  if (glClearColor is null) assert(0, `OpenGL function 'glClearColor' not found!`);
  glClearColor(a0,a1,a2,a3,);
}
__gshared glbfn_glClearStencil glClearStencil = function void (int a0) nothrow @nogc {
  glbfn_glClearStencil_loader(a0,);
};
private auto glbfn_glClearStencil_loader (int a0) nothrow @nogc {
  glClearStencil = cast(glbfn_glClearStencil)glbindGetProcAddress(`glClearStencil`);
  if (glClearStencil is null) assert(0, `OpenGL function 'glClearStencil' not found!`);
  glClearStencil(a0,);
}
__gshared glbfn_glClearDepth glClearDepth = function void (double a0) nothrow @nogc {
  glbfn_glClearDepth_loader(a0,);
};
private auto glbfn_glClearDepth_loader (double a0) nothrow @nogc {
  glClearDepth = cast(glbfn_glClearDepth)glbindGetProcAddress(`glClearDepth`);
  if (glClearDepth is null) assert(0, `OpenGL function 'glClearDepth' not found!`);
  glClearDepth(a0,);
}
__gshared glbfn_glStencilMask glStencilMask = function void (uint a0) nothrow @nogc {
  glbfn_glStencilMask_loader(a0,);
};
private auto glbfn_glStencilMask_loader (uint a0) nothrow @nogc {
  glStencilMask = cast(glbfn_glStencilMask)glbindGetProcAddress(`glStencilMask`);
  if (glStencilMask is null) assert(0, `OpenGL function 'glStencilMask' not found!`);
  glStencilMask(a0,);
}
__gshared glbfn_glColorMask glColorMask = function void (ubyte a0, ubyte a1, ubyte a2, ubyte a3) nothrow @nogc {
  glbfn_glColorMask_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColorMask_loader (ubyte a0, ubyte a1, ubyte a2, ubyte a3) nothrow @nogc {
  glColorMask = cast(glbfn_glColorMask)glbindGetProcAddress(`glColorMask`);
  if (glColorMask is null) assert(0, `OpenGL function 'glColorMask' not found!`);
  glColorMask(a0,a1,a2,a3,);
}
__gshared glbfn_glDepthMask glDepthMask = function void (ubyte a0) nothrow @nogc {
  glbfn_glDepthMask_loader(a0,);
};
private auto glbfn_glDepthMask_loader (ubyte a0) nothrow @nogc {
  glDepthMask = cast(glbfn_glDepthMask)glbindGetProcAddress(`glDepthMask`);
  if (glDepthMask is null) assert(0, `OpenGL function 'glDepthMask' not found!`);
  glDepthMask(a0,);
}
__gshared glbfn_glDisable glDisable = function void (uint a0) nothrow @nogc {
  glbfn_glDisable_loader(a0,);
};
private auto glbfn_glDisable_loader (uint a0) nothrow @nogc {
  glDisable = cast(glbfn_glDisable)glbindGetProcAddress(`glDisable`);
  if (glDisable is null) assert(0, `OpenGL function 'glDisable' not found!`);
  glDisable(a0,);
}
__gshared glbfn_glEnable glEnable = function void (uint a0) nothrow @nogc {
  glbfn_glEnable_loader(a0,);
};
private auto glbfn_glEnable_loader (uint a0) nothrow @nogc {
  glEnable = cast(glbfn_glEnable)glbindGetProcAddress(`glEnable`);
  if (glEnable is null) assert(0, `OpenGL function 'glEnable' not found!`);
  glEnable(a0,);
}
__gshared glbfn_glFinish glFinish = function void () nothrow @nogc {
  glbfn_glFinish_loader();
};
private auto glbfn_glFinish_loader () nothrow @nogc {
  glFinish = cast(glbfn_glFinish)glbindGetProcAddress(`glFinish`);
  if (glFinish is null) assert(0, `OpenGL function 'glFinish' not found!`);
  glFinish();
}
__gshared glbfn_glFlush glFlush = function void () nothrow @nogc {
  glbfn_glFlush_loader();
};
private auto glbfn_glFlush_loader () nothrow @nogc {
  glFlush = cast(glbfn_glFlush)glbindGetProcAddress(`glFlush`);
  if (glFlush is null) assert(0, `OpenGL function 'glFlush' not found!`);
  glFlush();
}
__gshared glbfn_glBlendFunc glBlendFunc = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBlendFunc_loader(a0,a1,);
};
private auto glbfn_glBlendFunc_loader (uint a0, uint a1) nothrow @nogc {
  glBlendFunc = cast(glbfn_glBlendFunc)glbindGetProcAddress(`glBlendFunc`);
  if (glBlendFunc is null) assert(0, `OpenGL function 'glBlendFunc' not found!`);
  glBlendFunc(a0,a1,);
}
__gshared glbfn_glLogicOp glLogicOp = function void (uint a0) nothrow @nogc {
  glbfn_glLogicOp_loader(a0,);
};
private auto glbfn_glLogicOp_loader (uint a0) nothrow @nogc {
  glLogicOp = cast(glbfn_glLogicOp)glbindGetProcAddress(`glLogicOp`);
  if (glLogicOp is null) assert(0, `OpenGL function 'glLogicOp' not found!`);
  glLogicOp(a0,);
}
__gshared glbfn_glStencilFunc glStencilFunc = function void (uint a0, int a1, uint a2) nothrow @nogc {
  glbfn_glStencilFunc_loader(a0,a1,a2,);
};
private auto glbfn_glStencilFunc_loader (uint a0, int a1, uint a2) nothrow @nogc {
  glStencilFunc = cast(glbfn_glStencilFunc)glbindGetProcAddress(`glStencilFunc`);
  if (glStencilFunc is null) assert(0, `OpenGL function 'glStencilFunc' not found!`);
  glStencilFunc(a0,a1,a2,);
}
__gshared glbfn_glStencilOp glStencilOp = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glStencilOp_loader(a0,a1,a2,);
};
private auto glbfn_glStencilOp_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glStencilOp = cast(glbfn_glStencilOp)glbindGetProcAddress(`glStencilOp`);
  if (glStencilOp is null) assert(0, `OpenGL function 'glStencilOp' not found!`);
  glStencilOp(a0,a1,a2,);
}
__gshared glbfn_glDepthFunc glDepthFunc = function void (uint a0) nothrow @nogc {
  glbfn_glDepthFunc_loader(a0,);
};
private auto glbfn_glDepthFunc_loader (uint a0) nothrow @nogc {
  glDepthFunc = cast(glbfn_glDepthFunc)glbindGetProcAddress(`glDepthFunc`);
  if (glDepthFunc is null) assert(0, `OpenGL function 'glDepthFunc' not found!`);
  glDepthFunc(a0,);
}
__gshared glbfn_glPixelStoref glPixelStoref = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPixelStoref_loader(a0,a1,);
};
private auto glbfn_glPixelStoref_loader (uint a0, float a1) nothrow @nogc {
  glPixelStoref = cast(glbfn_glPixelStoref)glbindGetProcAddress(`glPixelStoref`);
  if (glPixelStoref is null) assert(0, `OpenGL function 'glPixelStoref' not found!`);
  glPixelStoref(a0,a1,);
}
__gshared glbfn_glPixelStorei glPixelStorei = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPixelStorei_loader(a0,a1,);
};
private auto glbfn_glPixelStorei_loader (uint a0, int a1) nothrow @nogc {
  glPixelStorei = cast(glbfn_glPixelStorei)glbindGetProcAddress(`glPixelStorei`);
  if (glPixelStorei is null) assert(0, `OpenGL function 'glPixelStorei' not found!`);
  glPixelStorei(a0,a1,);
}
__gshared glbfn_glReadBuffer glReadBuffer = function void (uint a0) nothrow @nogc {
  glbfn_glReadBuffer_loader(a0,);
};
private auto glbfn_glReadBuffer_loader (uint a0) nothrow @nogc {
  glReadBuffer = cast(glbfn_glReadBuffer)glbindGetProcAddress(`glReadBuffer`);
  if (glReadBuffer is null) assert(0, `OpenGL function 'glReadBuffer' not found!`);
  glReadBuffer(a0,);
}
__gshared glbfn_glReadPixels glReadPixels = function void (int a0, int a1, int a2, int a3, uint a4, uint a5, void* a6) nothrow @nogc {
  glbfn_glReadPixels_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glReadPixels_loader (int a0, int a1, int a2, int a3, uint a4, uint a5, void* a6) nothrow @nogc {
  glReadPixels = cast(glbfn_glReadPixels)glbindGetProcAddress(`glReadPixels`);
  if (glReadPixels is null) assert(0, `OpenGL function 'glReadPixels' not found!`);
  glReadPixels(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetBooleanv glGetBooleanv = function void (uint a0, ubyte* a1) nothrow @nogc {
  glbfn_glGetBooleanv_loader(a0,a1,);
};
private auto glbfn_glGetBooleanv_loader (uint a0, ubyte* a1) nothrow @nogc {
  glGetBooleanv = cast(glbfn_glGetBooleanv)glbindGetProcAddress(`glGetBooleanv`);
  if (glGetBooleanv is null) assert(0, `OpenGL function 'glGetBooleanv' not found!`);
  glGetBooleanv(a0,a1,);
}
__gshared glbfn_glGetDoublev glGetDoublev = function void (uint a0, double* a1) nothrow @nogc {
  glbfn_glGetDoublev_loader(a0,a1,);
};
private auto glbfn_glGetDoublev_loader (uint a0, double* a1) nothrow @nogc {
  glGetDoublev = cast(glbfn_glGetDoublev)glbindGetProcAddress(`glGetDoublev`);
  if (glGetDoublev is null) assert(0, `OpenGL function 'glGetDoublev' not found!`);
  glGetDoublev(a0,a1,);
}
__gshared glbfn_glGetError glGetError = function uint () nothrow @nogc {
  return glbfn_glGetError_loader();
};
private auto glbfn_glGetError_loader () nothrow @nogc {
  glGetError = cast(glbfn_glGetError)glbindGetProcAddress(`glGetError`);
  if (glGetError is null) assert(0, `OpenGL function 'glGetError' not found!`);
  return glGetError();
}
__gshared glbfn_glGetFloatv glGetFloatv = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetFloatv_loader(a0,a1,);
};
private auto glbfn_glGetFloatv_loader (uint a0, float* a1) nothrow @nogc {
  glGetFloatv = cast(glbfn_glGetFloatv)glbindGetProcAddress(`glGetFloatv`);
  if (glGetFloatv is null) assert(0, `OpenGL function 'glGetFloatv' not found!`);
  glGetFloatv(a0,a1,);
}
__gshared glbfn_glGetIntegerv glGetIntegerv = function void (uint a0, int* a1) nothrow @nogc {
  glbfn_glGetIntegerv_loader(a0,a1,);
};
private auto glbfn_glGetIntegerv_loader (uint a0, int* a1) nothrow @nogc {
  glGetIntegerv = cast(glbfn_glGetIntegerv)glbindGetProcAddress(`glGetIntegerv`);
  if (glGetIntegerv is null) assert(0, `OpenGL function 'glGetIntegerv' not found!`);
  glGetIntegerv(a0,a1,);
}
__gshared glbfn_glGetString glGetString = function const(char)* (uint a0) nothrow @nogc {
  return glbfn_glGetString_loader(a0,);
};
private auto glbfn_glGetString_loader (uint a0) nothrow @nogc {
  glGetString = cast(glbfn_glGetString)glbindGetProcAddress(`glGetString`);
  if (glGetString is null) assert(0, `OpenGL function 'glGetString' not found!`);
  return glGetString(a0,);
}
__gshared glbfn_glGetTexImage glGetTexImage = function void (uint a0, int a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glbfn_glGetTexImage_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetTexImage_loader (uint a0, int a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glGetTexImage = cast(glbfn_glGetTexImage)glbindGetProcAddress(`glGetTexImage`);
  if (glGetTexImage is null) assert(0, `OpenGL function 'glGetTexImage' not found!`);
  glGetTexImage(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetTexParameterfv glGetTexParameterfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetTexParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameterfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetTexParameterfv = cast(glbfn_glGetTexParameterfv)glbindGetProcAddress(`glGetTexParameterfv`);
  if (glGetTexParameterfv is null) assert(0, `OpenGL function 'glGetTexParameterfv' not found!`);
  glGetTexParameterfv(a0,a1,a2,);
}
__gshared glbfn_glGetTexParameteriv glGetTexParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexParameteriv = cast(glbfn_glGetTexParameteriv)glbindGetProcAddress(`glGetTexParameteriv`);
  if (glGetTexParameteriv is null) assert(0, `OpenGL function 'glGetTexParameteriv' not found!`);
  glGetTexParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetTexLevelParameterfv glGetTexLevelParameterfv = function void (uint a0, int a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetTexLevelParameterfv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTexLevelParameterfv_loader (uint a0, int a1, uint a2, float* a3) nothrow @nogc {
  glGetTexLevelParameterfv = cast(glbfn_glGetTexLevelParameterfv)glbindGetProcAddress(`glGetTexLevelParameterfv`);
  if (glGetTexLevelParameterfv is null) assert(0, `OpenGL function 'glGetTexLevelParameterfv' not found!`);
  glGetTexLevelParameterfv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTexLevelParameteriv glGetTexLevelParameteriv = function void (uint a0, int a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetTexLevelParameteriv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTexLevelParameteriv_loader (uint a0, int a1, uint a2, int* a3) nothrow @nogc {
  glGetTexLevelParameteriv = cast(glbfn_glGetTexLevelParameteriv)glbindGetProcAddress(`glGetTexLevelParameteriv`);
  if (glGetTexLevelParameteriv is null) assert(0, `OpenGL function 'glGetTexLevelParameteriv' not found!`);
  glGetTexLevelParameteriv(a0,a1,a2,a3,);
}
__gshared glbfn_glIsEnabled glIsEnabled = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsEnabled_loader(a0,);
};
private auto glbfn_glIsEnabled_loader (uint a0) nothrow @nogc {
  glIsEnabled = cast(glbfn_glIsEnabled)glbindGetProcAddress(`glIsEnabled`);
  if (glIsEnabled is null) assert(0, `OpenGL function 'glIsEnabled' not found!`);
  return glIsEnabled(a0,);
}
__gshared glbfn_glDepthRange glDepthRange = function void (double a0, double a1) nothrow @nogc {
  glbfn_glDepthRange_loader(a0,a1,);
};
private auto glbfn_glDepthRange_loader (double a0, double a1) nothrow @nogc {
  glDepthRange = cast(glbfn_glDepthRange)glbindGetProcAddress(`glDepthRange`);
  if (glDepthRange is null) assert(0, `OpenGL function 'glDepthRange' not found!`);
  glDepthRange(a0,a1,);
}
__gshared glbfn_glViewport glViewport = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glViewport_loader(a0,a1,a2,a3,);
};
private auto glbfn_glViewport_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glViewport = cast(glbfn_glViewport)glbindGetProcAddress(`glViewport`);
  if (glViewport is null) assert(0, `OpenGL function 'glViewport' not found!`);
  glViewport(a0,a1,a2,a3,);
}
__gshared glbfn_glNewList glNewList = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glNewList_loader(a0,a1,);
};
private auto glbfn_glNewList_loader (uint a0, uint a1) nothrow @nogc {
  glNewList = cast(glbfn_glNewList)glbindGetProcAddress(`glNewList`);
  if (glNewList is null) assert(0, `OpenGL function 'glNewList' not found!`);
  glNewList(a0,a1,);
}
__gshared glbfn_glEndList glEndList = function void () nothrow @nogc {
  glbfn_glEndList_loader();
};
private auto glbfn_glEndList_loader () nothrow @nogc {
  glEndList = cast(glbfn_glEndList)glbindGetProcAddress(`glEndList`);
  if (glEndList is null) assert(0, `OpenGL function 'glEndList' not found!`);
  glEndList();
}
__gshared glbfn_glCallList glCallList = function void (uint a0) nothrow @nogc {
  glbfn_glCallList_loader(a0,);
};
private auto glbfn_glCallList_loader (uint a0) nothrow @nogc {
  glCallList = cast(glbfn_glCallList)glbindGetProcAddress(`glCallList`);
  if (glCallList is null) assert(0, `OpenGL function 'glCallList' not found!`);
  glCallList(a0,);
}
__gshared glbfn_glCallLists glCallLists = function void (int a0, uint a1, const(void)* a2) nothrow @nogc {
  glbfn_glCallLists_loader(a0,a1,a2,);
};
private auto glbfn_glCallLists_loader (int a0, uint a1, const(void)* a2) nothrow @nogc {
  glCallLists = cast(glbfn_glCallLists)glbindGetProcAddress(`glCallLists`);
  if (glCallLists is null) assert(0, `OpenGL function 'glCallLists' not found!`);
  glCallLists(a0,a1,a2,);
}
__gshared glbfn_glDeleteLists glDeleteLists = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glDeleteLists_loader(a0,a1,);
};
private auto glbfn_glDeleteLists_loader (uint a0, int a1) nothrow @nogc {
  glDeleteLists = cast(glbfn_glDeleteLists)glbindGetProcAddress(`glDeleteLists`);
  if (glDeleteLists is null) assert(0, `OpenGL function 'glDeleteLists' not found!`);
  glDeleteLists(a0,a1,);
}
__gshared glbfn_glGenLists glGenLists = function uint (int a0) nothrow @nogc {
  return glbfn_glGenLists_loader(a0,);
};
private auto glbfn_glGenLists_loader (int a0) nothrow @nogc {
  glGenLists = cast(glbfn_glGenLists)glbindGetProcAddress(`glGenLists`);
  if (glGenLists is null) assert(0, `OpenGL function 'glGenLists' not found!`);
  return glGenLists(a0,);
}
__gshared glbfn_glListBase glListBase = function void (uint a0) nothrow @nogc {
  glbfn_glListBase_loader(a0,);
};
private auto glbfn_glListBase_loader (uint a0) nothrow @nogc {
  glListBase = cast(glbfn_glListBase)glbindGetProcAddress(`glListBase`);
  if (glListBase is null) assert(0, `OpenGL function 'glListBase' not found!`);
  glListBase(a0,);
}
__gshared glbfn_glBegin glBegin = function void (uint a0) nothrow @nogc {
  glbfn_glBegin_loader(a0,);
};
private auto glbfn_glBegin_loader (uint a0) nothrow @nogc {
  glBegin = cast(glbfn_glBegin)glbindGetProcAddress(`glBegin`);
  if (glBegin is null) assert(0, `OpenGL function 'glBegin' not found!`);
  glBegin(a0,);
}
__gshared glbfn_glBitmap glBitmap = function void (int a0, int a1, float a2, float a3, float a4, float a5, const(ubyte)* a6) nothrow @nogc {
  glbfn_glBitmap_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glBitmap_loader (int a0, int a1, float a2, float a3, float a4, float a5, const(ubyte)* a6) nothrow @nogc {
  glBitmap = cast(glbfn_glBitmap)glbindGetProcAddress(`glBitmap`);
  if (glBitmap is null) assert(0, `OpenGL function 'glBitmap' not found!`);
  glBitmap(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glColor3b glColor3b = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glColor3b_loader(a0,a1,a2,);
};
private auto glbfn_glColor3b_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glColor3b = cast(glbfn_glColor3b)glbindGetProcAddress(`glColor3b`);
  if (glColor3b is null) assert(0, `OpenGL function 'glColor3b' not found!`);
  glColor3b(a0,a1,a2,);
}
__gshared glbfn_glColor3bv glColor3bv = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glColor3bv_loader(a0,);
};
private auto glbfn_glColor3bv_loader (const(byte)* a0) nothrow @nogc {
  glColor3bv = cast(glbfn_glColor3bv)glbindGetProcAddress(`glColor3bv`);
  if (glColor3bv is null) assert(0, `OpenGL function 'glColor3bv' not found!`);
  glColor3bv(a0,);
}
__gshared glbfn_glColor3d glColor3d = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glColor3d_loader(a0,a1,a2,);
};
private auto glbfn_glColor3d_loader (double a0, double a1, double a2) nothrow @nogc {
  glColor3d = cast(glbfn_glColor3d)glbindGetProcAddress(`glColor3d`);
  if (glColor3d is null) assert(0, `OpenGL function 'glColor3d' not found!`);
  glColor3d(a0,a1,a2,);
}
__gshared glbfn_glColor3dv glColor3dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glColor3dv_loader(a0,);
};
private auto glbfn_glColor3dv_loader (const(double)* a0) nothrow @nogc {
  glColor3dv = cast(glbfn_glColor3dv)glbindGetProcAddress(`glColor3dv`);
  if (glColor3dv is null) assert(0, `OpenGL function 'glColor3dv' not found!`);
  glColor3dv(a0,);
}
__gshared glbfn_glColor3f glColor3f = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glColor3f_loader(a0,a1,a2,);
};
private auto glbfn_glColor3f_loader (float a0, float a1, float a2) nothrow @nogc {
  glColor3f = cast(glbfn_glColor3f)glbindGetProcAddress(`glColor3f`);
  if (glColor3f is null) assert(0, `OpenGL function 'glColor3f' not found!`);
  glColor3f(a0,a1,a2,);
}
__gshared glbfn_glColor3fv glColor3fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glColor3fv_loader(a0,);
};
private auto glbfn_glColor3fv_loader (const(float)* a0) nothrow @nogc {
  glColor3fv = cast(glbfn_glColor3fv)glbindGetProcAddress(`glColor3fv`);
  if (glColor3fv is null) assert(0, `OpenGL function 'glColor3fv' not found!`);
  glColor3fv(a0,);
}
__gshared glbfn_glColor3i glColor3i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glColor3i_loader(a0,a1,a2,);
};
private auto glbfn_glColor3i_loader (int a0, int a1, int a2) nothrow @nogc {
  glColor3i = cast(glbfn_glColor3i)glbindGetProcAddress(`glColor3i`);
  if (glColor3i is null) assert(0, `OpenGL function 'glColor3i' not found!`);
  glColor3i(a0,a1,a2,);
}
__gshared glbfn_glColor3iv glColor3iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glColor3iv_loader(a0,);
};
private auto glbfn_glColor3iv_loader (const(int)* a0) nothrow @nogc {
  glColor3iv = cast(glbfn_glColor3iv)glbindGetProcAddress(`glColor3iv`);
  if (glColor3iv is null) assert(0, `OpenGL function 'glColor3iv' not found!`);
  glColor3iv(a0,);
}
__gshared glbfn_glColor3s glColor3s = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glColor3s_loader(a0,a1,a2,);
};
private auto glbfn_glColor3s_loader (short a0, short a1, short a2) nothrow @nogc {
  glColor3s = cast(glbfn_glColor3s)glbindGetProcAddress(`glColor3s`);
  if (glColor3s is null) assert(0, `OpenGL function 'glColor3s' not found!`);
  glColor3s(a0,a1,a2,);
}
__gshared glbfn_glColor3sv glColor3sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glColor3sv_loader(a0,);
};
private auto glbfn_glColor3sv_loader (const(short)* a0) nothrow @nogc {
  glColor3sv = cast(glbfn_glColor3sv)glbindGetProcAddress(`glColor3sv`);
  if (glColor3sv is null) assert(0, `OpenGL function 'glColor3sv' not found!`);
  glColor3sv(a0,);
}
__gshared glbfn_glColor3ub glColor3ub = function void (ubyte a0, ubyte a1, ubyte a2) nothrow @nogc {
  glbfn_glColor3ub_loader(a0,a1,a2,);
};
private auto glbfn_glColor3ub_loader (ubyte a0, ubyte a1, ubyte a2) nothrow @nogc {
  glColor3ub = cast(glbfn_glColor3ub)glbindGetProcAddress(`glColor3ub`);
  if (glColor3ub is null) assert(0, `OpenGL function 'glColor3ub' not found!`);
  glColor3ub(a0,a1,a2,);
}
__gshared glbfn_glColor3ubv glColor3ubv = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glColor3ubv_loader(a0,);
};
private auto glbfn_glColor3ubv_loader (const(ubyte)* a0) nothrow @nogc {
  glColor3ubv = cast(glbfn_glColor3ubv)glbindGetProcAddress(`glColor3ubv`);
  if (glColor3ubv is null) assert(0, `OpenGL function 'glColor3ubv' not found!`);
  glColor3ubv(a0,);
}
__gshared glbfn_glColor3ui glColor3ui = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glColor3ui_loader(a0,a1,a2,);
};
private auto glbfn_glColor3ui_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glColor3ui = cast(glbfn_glColor3ui)glbindGetProcAddress(`glColor3ui`);
  if (glColor3ui is null) assert(0, `OpenGL function 'glColor3ui' not found!`);
  glColor3ui(a0,a1,a2,);
}
__gshared glbfn_glColor3uiv glColor3uiv = function void (const(uint)* a0) nothrow @nogc {
  glbfn_glColor3uiv_loader(a0,);
};
private auto glbfn_glColor3uiv_loader (const(uint)* a0) nothrow @nogc {
  glColor3uiv = cast(glbfn_glColor3uiv)glbindGetProcAddress(`glColor3uiv`);
  if (glColor3uiv is null) assert(0, `OpenGL function 'glColor3uiv' not found!`);
  glColor3uiv(a0,);
}
__gshared glbfn_glColor3us glColor3us = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glColor3us_loader(a0,a1,a2,);
};
private auto glbfn_glColor3us_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glColor3us = cast(glbfn_glColor3us)glbindGetProcAddress(`glColor3us`);
  if (glColor3us is null) assert(0, `OpenGL function 'glColor3us' not found!`);
  glColor3us(a0,a1,a2,);
}
__gshared glbfn_glColor3usv glColor3usv = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glColor3usv_loader(a0,);
};
private auto glbfn_glColor3usv_loader (const(ushort)* a0) nothrow @nogc {
  glColor3usv = cast(glbfn_glColor3usv)glbindGetProcAddress(`glColor3usv`);
  if (glColor3usv is null) assert(0, `OpenGL function 'glColor3usv' not found!`);
  glColor3usv(a0,);
}
__gshared glbfn_glColor4b glColor4b = function void (byte a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glbfn_glColor4b_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4b_loader (byte a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glColor4b = cast(glbfn_glColor4b)glbindGetProcAddress(`glColor4b`);
  if (glColor4b is null) assert(0, `OpenGL function 'glColor4b' not found!`);
  glColor4b(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4bv glColor4bv = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glColor4bv_loader(a0,);
};
private auto glbfn_glColor4bv_loader (const(byte)* a0) nothrow @nogc {
  glColor4bv = cast(glbfn_glColor4bv)glbindGetProcAddress(`glColor4bv`);
  if (glColor4bv is null) assert(0, `OpenGL function 'glColor4bv' not found!`);
  glColor4bv(a0,);
}
__gshared glbfn_glColor4d glColor4d = function void (double a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glColor4d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4d_loader (double a0, double a1, double a2, double a3) nothrow @nogc {
  glColor4d = cast(glbfn_glColor4d)glbindGetProcAddress(`glColor4d`);
  if (glColor4d is null) assert(0, `OpenGL function 'glColor4d' not found!`);
  glColor4d(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4dv glColor4dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glColor4dv_loader(a0,);
};
private auto glbfn_glColor4dv_loader (const(double)* a0) nothrow @nogc {
  glColor4dv = cast(glbfn_glColor4dv)glbindGetProcAddress(`glColor4dv`);
  if (glColor4dv is null) assert(0, `OpenGL function 'glColor4dv' not found!`);
  glColor4dv(a0,);
}
__gshared glbfn_glColor4f glColor4f = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glColor4f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4f_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glColor4f = cast(glbfn_glColor4f)glbindGetProcAddress(`glColor4f`);
  if (glColor4f is null) assert(0, `OpenGL function 'glColor4f' not found!`);
  glColor4f(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4fv glColor4fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glColor4fv_loader(a0,);
};
private auto glbfn_glColor4fv_loader (const(float)* a0) nothrow @nogc {
  glColor4fv = cast(glbfn_glColor4fv)glbindGetProcAddress(`glColor4fv`);
  if (glColor4fv is null) assert(0, `OpenGL function 'glColor4fv' not found!`);
  glColor4fv(a0,);
}
__gshared glbfn_glColor4i glColor4i = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glColor4i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4i_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glColor4i = cast(glbfn_glColor4i)glbindGetProcAddress(`glColor4i`);
  if (glColor4i is null) assert(0, `OpenGL function 'glColor4i' not found!`);
  glColor4i(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4iv glColor4iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glColor4iv_loader(a0,);
};
private auto glbfn_glColor4iv_loader (const(int)* a0) nothrow @nogc {
  glColor4iv = cast(glbfn_glColor4iv)glbindGetProcAddress(`glColor4iv`);
  if (glColor4iv is null) assert(0, `OpenGL function 'glColor4iv' not found!`);
  glColor4iv(a0,);
}
__gshared glbfn_glColor4s glColor4s = function void (short a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glColor4s_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4s_loader (short a0, short a1, short a2, short a3) nothrow @nogc {
  glColor4s = cast(glbfn_glColor4s)glbindGetProcAddress(`glColor4s`);
  if (glColor4s is null) assert(0, `OpenGL function 'glColor4s' not found!`);
  glColor4s(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4sv glColor4sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glColor4sv_loader(a0,);
};
private auto glbfn_glColor4sv_loader (const(short)* a0) nothrow @nogc {
  glColor4sv = cast(glbfn_glColor4sv)glbindGetProcAddress(`glColor4sv`);
  if (glColor4sv is null) assert(0, `OpenGL function 'glColor4sv' not found!`);
  glColor4sv(a0,);
}
__gshared glbfn_glColor4ub glColor4ub = function void (ubyte a0, ubyte a1, ubyte a2, ubyte a3) nothrow @nogc {
  glbfn_glColor4ub_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4ub_loader (ubyte a0, ubyte a1, ubyte a2, ubyte a3) nothrow @nogc {
  glColor4ub = cast(glbfn_glColor4ub)glbindGetProcAddress(`glColor4ub`);
  if (glColor4ub is null) assert(0, `OpenGL function 'glColor4ub' not found!`);
  glColor4ub(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4ubv glColor4ubv = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glColor4ubv_loader(a0,);
};
private auto glbfn_glColor4ubv_loader (const(ubyte)* a0) nothrow @nogc {
  glColor4ubv = cast(glbfn_glColor4ubv)glbindGetProcAddress(`glColor4ubv`);
  if (glColor4ubv is null) assert(0, `OpenGL function 'glColor4ubv' not found!`);
  glColor4ubv(a0,);
}
__gshared glbfn_glColor4ui glColor4ui = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glColor4ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4ui_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glColor4ui = cast(glbfn_glColor4ui)glbindGetProcAddress(`glColor4ui`);
  if (glColor4ui is null) assert(0, `OpenGL function 'glColor4ui' not found!`);
  glColor4ui(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4uiv glColor4uiv = function void (const(uint)* a0) nothrow @nogc {
  glbfn_glColor4uiv_loader(a0,);
};
private auto glbfn_glColor4uiv_loader (const(uint)* a0) nothrow @nogc {
  glColor4uiv = cast(glbfn_glColor4uiv)glbindGetProcAddress(`glColor4uiv`);
  if (glColor4uiv is null) assert(0, `OpenGL function 'glColor4uiv' not found!`);
  glColor4uiv(a0,);
}
__gshared glbfn_glColor4us glColor4us = function void (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glbfn_glColor4us_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4us_loader (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glColor4us = cast(glbfn_glColor4us)glbindGetProcAddress(`glColor4us`);
  if (glColor4us is null) assert(0, `OpenGL function 'glColor4us' not found!`);
  glColor4us(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4usv glColor4usv = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glColor4usv_loader(a0,);
};
private auto glbfn_glColor4usv_loader (const(ushort)* a0) nothrow @nogc {
  glColor4usv = cast(glbfn_glColor4usv)glbindGetProcAddress(`glColor4usv`);
  if (glColor4usv is null) assert(0, `OpenGL function 'glColor4usv' not found!`);
  glColor4usv(a0,);
}
__gshared glbfn_glEdgeFlag glEdgeFlag = function void (ubyte a0) nothrow @nogc {
  glbfn_glEdgeFlag_loader(a0,);
};
private auto glbfn_glEdgeFlag_loader (ubyte a0) nothrow @nogc {
  glEdgeFlag = cast(glbfn_glEdgeFlag)glbindGetProcAddress(`glEdgeFlag`);
  if (glEdgeFlag is null) assert(0, `OpenGL function 'glEdgeFlag' not found!`);
  glEdgeFlag(a0,);
}
__gshared glbfn_glEdgeFlagv glEdgeFlagv = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glEdgeFlagv_loader(a0,);
};
private auto glbfn_glEdgeFlagv_loader (const(ubyte)* a0) nothrow @nogc {
  glEdgeFlagv = cast(glbfn_glEdgeFlagv)glbindGetProcAddress(`glEdgeFlagv`);
  if (glEdgeFlagv is null) assert(0, `OpenGL function 'glEdgeFlagv' not found!`);
  glEdgeFlagv(a0,);
}
__gshared glbfn_glEnd glEnd = function void () nothrow @nogc {
  glbfn_glEnd_loader();
};
private auto glbfn_glEnd_loader () nothrow @nogc {
  glEnd = cast(glbfn_glEnd)glbindGetProcAddress(`glEnd`);
  if (glEnd is null) assert(0, `OpenGL function 'glEnd' not found!`);
  glEnd();
}
__gshared glbfn_glIndexd glIndexd = function void (double a0) nothrow @nogc {
  glbfn_glIndexd_loader(a0,);
};
private auto glbfn_glIndexd_loader (double a0) nothrow @nogc {
  glIndexd = cast(glbfn_glIndexd)glbindGetProcAddress(`glIndexd`);
  if (glIndexd is null) assert(0, `OpenGL function 'glIndexd' not found!`);
  glIndexd(a0,);
}
__gshared glbfn_glIndexdv glIndexdv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glIndexdv_loader(a0,);
};
private auto glbfn_glIndexdv_loader (const(double)* a0) nothrow @nogc {
  glIndexdv = cast(glbfn_glIndexdv)glbindGetProcAddress(`glIndexdv`);
  if (glIndexdv is null) assert(0, `OpenGL function 'glIndexdv' not found!`);
  glIndexdv(a0,);
}
__gshared glbfn_glIndexf glIndexf = function void (float a0) nothrow @nogc {
  glbfn_glIndexf_loader(a0,);
};
private auto glbfn_glIndexf_loader (float a0) nothrow @nogc {
  glIndexf = cast(glbfn_glIndexf)glbindGetProcAddress(`glIndexf`);
  if (glIndexf is null) assert(0, `OpenGL function 'glIndexf' not found!`);
  glIndexf(a0,);
}
__gshared glbfn_glIndexfv glIndexfv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glIndexfv_loader(a0,);
};
private auto glbfn_glIndexfv_loader (const(float)* a0) nothrow @nogc {
  glIndexfv = cast(glbfn_glIndexfv)glbindGetProcAddress(`glIndexfv`);
  if (glIndexfv is null) assert(0, `OpenGL function 'glIndexfv' not found!`);
  glIndexfv(a0,);
}
__gshared glbfn_glIndexi glIndexi = function void (int a0) nothrow @nogc {
  glbfn_glIndexi_loader(a0,);
};
private auto glbfn_glIndexi_loader (int a0) nothrow @nogc {
  glIndexi = cast(glbfn_glIndexi)glbindGetProcAddress(`glIndexi`);
  if (glIndexi is null) assert(0, `OpenGL function 'glIndexi' not found!`);
  glIndexi(a0,);
}
__gshared glbfn_glIndexiv glIndexiv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glIndexiv_loader(a0,);
};
private auto glbfn_glIndexiv_loader (const(int)* a0) nothrow @nogc {
  glIndexiv = cast(glbfn_glIndexiv)glbindGetProcAddress(`glIndexiv`);
  if (glIndexiv is null) assert(0, `OpenGL function 'glIndexiv' not found!`);
  glIndexiv(a0,);
}
__gshared glbfn_glIndexs glIndexs = function void (short a0) nothrow @nogc {
  glbfn_glIndexs_loader(a0,);
};
private auto glbfn_glIndexs_loader (short a0) nothrow @nogc {
  glIndexs = cast(glbfn_glIndexs)glbindGetProcAddress(`glIndexs`);
  if (glIndexs is null) assert(0, `OpenGL function 'glIndexs' not found!`);
  glIndexs(a0,);
}
__gshared glbfn_glIndexsv glIndexsv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glIndexsv_loader(a0,);
};
private auto glbfn_glIndexsv_loader (const(short)* a0) nothrow @nogc {
  glIndexsv = cast(glbfn_glIndexsv)glbindGetProcAddress(`glIndexsv`);
  if (glIndexsv is null) assert(0, `OpenGL function 'glIndexsv' not found!`);
  glIndexsv(a0,);
}
__gshared glbfn_glNormal3b glNormal3b = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glNormal3b_loader(a0,a1,a2,);
};
private auto glbfn_glNormal3b_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glNormal3b = cast(glbfn_glNormal3b)glbindGetProcAddress(`glNormal3b`);
  if (glNormal3b is null) assert(0, `OpenGL function 'glNormal3b' not found!`);
  glNormal3b(a0,a1,a2,);
}
__gshared glbfn_glNormal3bv glNormal3bv = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glNormal3bv_loader(a0,);
};
private auto glbfn_glNormal3bv_loader (const(byte)* a0) nothrow @nogc {
  glNormal3bv = cast(glbfn_glNormal3bv)glbindGetProcAddress(`glNormal3bv`);
  if (glNormal3bv is null) assert(0, `OpenGL function 'glNormal3bv' not found!`);
  glNormal3bv(a0,);
}
__gshared glbfn_glNormal3d glNormal3d = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glNormal3d_loader(a0,a1,a2,);
};
private auto glbfn_glNormal3d_loader (double a0, double a1, double a2) nothrow @nogc {
  glNormal3d = cast(glbfn_glNormal3d)glbindGetProcAddress(`glNormal3d`);
  if (glNormal3d is null) assert(0, `OpenGL function 'glNormal3d' not found!`);
  glNormal3d(a0,a1,a2,);
}
__gshared glbfn_glNormal3dv glNormal3dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glNormal3dv_loader(a0,);
};
private auto glbfn_glNormal3dv_loader (const(double)* a0) nothrow @nogc {
  glNormal3dv = cast(glbfn_glNormal3dv)glbindGetProcAddress(`glNormal3dv`);
  if (glNormal3dv is null) assert(0, `OpenGL function 'glNormal3dv' not found!`);
  glNormal3dv(a0,);
}
__gshared glbfn_glNormal3f glNormal3f = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glNormal3f_loader(a0,a1,a2,);
};
private auto glbfn_glNormal3f_loader (float a0, float a1, float a2) nothrow @nogc {
  glNormal3f = cast(glbfn_glNormal3f)glbindGetProcAddress(`glNormal3f`);
  if (glNormal3f is null) assert(0, `OpenGL function 'glNormal3f' not found!`);
  glNormal3f(a0,a1,a2,);
}
__gshared glbfn_glNormal3fv glNormal3fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glNormal3fv_loader(a0,);
};
private auto glbfn_glNormal3fv_loader (const(float)* a0) nothrow @nogc {
  glNormal3fv = cast(glbfn_glNormal3fv)glbindGetProcAddress(`glNormal3fv`);
  if (glNormal3fv is null) assert(0, `OpenGL function 'glNormal3fv' not found!`);
  glNormal3fv(a0,);
}
__gshared glbfn_glNormal3i glNormal3i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glNormal3i_loader(a0,a1,a2,);
};
private auto glbfn_glNormal3i_loader (int a0, int a1, int a2) nothrow @nogc {
  glNormal3i = cast(glbfn_glNormal3i)glbindGetProcAddress(`glNormal3i`);
  if (glNormal3i is null) assert(0, `OpenGL function 'glNormal3i' not found!`);
  glNormal3i(a0,a1,a2,);
}
__gshared glbfn_glNormal3iv glNormal3iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glNormal3iv_loader(a0,);
};
private auto glbfn_glNormal3iv_loader (const(int)* a0) nothrow @nogc {
  glNormal3iv = cast(glbfn_glNormal3iv)glbindGetProcAddress(`glNormal3iv`);
  if (glNormal3iv is null) assert(0, `OpenGL function 'glNormal3iv' not found!`);
  glNormal3iv(a0,);
}
__gshared glbfn_glNormal3s glNormal3s = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glNormal3s_loader(a0,a1,a2,);
};
private auto glbfn_glNormal3s_loader (short a0, short a1, short a2) nothrow @nogc {
  glNormal3s = cast(glbfn_glNormal3s)glbindGetProcAddress(`glNormal3s`);
  if (glNormal3s is null) assert(0, `OpenGL function 'glNormal3s' not found!`);
  glNormal3s(a0,a1,a2,);
}
__gshared glbfn_glNormal3sv glNormal3sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glNormal3sv_loader(a0,);
};
private auto glbfn_glNormal3sv_loader (const(short)* a0) nothrow @nogc {
  glNormal3sv = cast(glbfn_glNormal3sv)glbindGetProcAddress(`glNormal3sv`);
  if (glNormal3sv is null) assert(0, `OpenGL function 'glNormal3sv' not found!`);
  glNormal3sv(a0,);
}
__gshared glbfn_glRasterPos2d glRasterPos2d = function void (double a0, double a1) nothrow @nogc {
  glbfn_glRasterPos2d_loader(a0,a1,);
};
private auto glbfn_glRasterPos2d_loader (double a0, double a1) nothrow @nogc {
  glRasterPos2d = cast(glbfn_glRasterPos2d)glbindGetProcAddress(`glRasterPos2d`);
  if (glRasterPos2d is null) assert(0, `OpenGL function 'glRasterPos2d' not found!`);
  glRasterPos2d(a0,a1,);
}
__gshared glbfn_glRasterPos2dv glRasterPos2dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glRasterPos2dv_loader(a0,);
};
private auto glbfn_glRasterPos2dv_loader (const(double)* a0) nothrow @nogc {
  glRasterPos2dv = cast(glbfn_glRasterPos2dv)glbindGetProcAddress(`glRasterPos2dv`);
  if (glRasterPos2dv is null) assert(0, `OpenGL function 'glRasterPos2dv' not found!`);
  glRasterPos2dv(a0,);
}
__gshared glbfn_glRasterPos2f glRasterPos2f = function void (float a0, float a1) nothrow @nogc {
  glbfn_glRasterPos2f_loader(a0,a1,);
};
private auto glbfn_glRasterPos2f_loader (float a0, float a1) nothrow @nogc {
  glRasterPos2f = cast(glbfn_glRasterPos2f)glbindGetProcAddress(`glRasterPos2f`);
  if (glRasterPos2f is null) assert(0, `OpenGL function 'glRasterPos2f' not found!`);
  glRasterPos2f(a0,a1,);
}
__gshared glbfn_glRasterPos2fv glRasterPos2fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glRasterPos2fv_loader(a0,);
};
private auto glbfn_glRasterPos2fv_loader (const(float)* a0) nothrow @nogc {
  glRasterPos2fv = cast(glbfn_glRasterPos2fv)glbindGetProcAddress(`glRasterPos2fv`);
  if (glRasterPos2fv is null) assert(0, `OpenGL function 'glRasterPos2fv' not found!`);
  glRasterPos2fv(a0,);
}
__gshared glbfn_glRasterPos2i glRasterPos2i = function void (int a0, int a1) nothrow @nogc {
  glbfn_glRasterPos2i_loader(a0,a1,);
};
private auto glbfn_glRasterPos2i_loader (int a0, int a1) nothrow @nogc {
  glRasterPos2i = cast(glbfn_glRasterPos2i)glbindGetProcAddress(`glRasterPos2i`);
  if (glRasterPos2i is null) assert(0, `OpenGL function 'glRasterPos2i' not found!`);
  glRasterPos2i(a0,a1,);
}
__gshared glbfn_glRasterPos2iv glRasterPos2iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glRasterPos2iv_loader(a0,);
};
private auto glbfn_glRasterPos2iv_loader (const(int)* a0) nothrow @nogc {
  glRasterPos2iv = cast(glbfn_glRasterPos2iv)glbindGetProcAddress(`glRasterPos2iv`);
  if (glRasterPos2iv is null) assert(0, `OpenGL function 'glRasterPos2iv' not found!`);
  glRasterPos2iv(a0,);
}
__gshared glbfn_glRasterPos2s glRasterPos2s = function void (short a0, short a1) nothrow @nogc {
  glbfn_glRasterPos2s_loader(a0,a1,);
};
private auto glbfn_glRasterPos2s_loader (short a0, short a1) nothrow @nogc {
  glRasterPos2s = cast(glbfn_glRasterPos2s)glbindGetProcAddress(`glRasterPos2s`);
  if (glRasterPos2s is null) assert(0, `OpenGL function 'glRasterPos2s' not found!`);
  glRasterPos2s(a0,a1,);
}
__gshared glbfn_glRasterPos2sv glRasterPos2sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glRasterPos2sv_loader(a0,);
};
private auto glbfn_glRasterPos2sv_loader (const(short)* a0) nothrow @nogc {
  glRasterPos2sv = cast(glbfn_glRasterPos2sv)glbindGetProcAddress(`glRasterPos2sv`);
  if (glRasterPos2sv is null) assert(0, `OpenGL function 'glRasterPos2sv' not found!`);
  glRasterPos2sv(a0,);
}
__gshared glbfn_glRasterPos3d glRasterPos3d = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glRasterPos3d_loader(a0,a1,a2,);
};
private auto glbfn_glRasterPos3d_loader (double a0, double a1, double a2) nothrow @nogc {
  glRasterPos3d = cast(glbfn_glRasterPos3d)glbindGetProcAddress(`glRasterPos3d`);
  if (glRasterPos3d is null) assert(0, `OpenGL function 'glRasterPos3d' not found!`);
  glRasterPos3d(a0,a1,a2,);
}
__gshared glbfn_glRasterPos3dv glRasterPos3dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glRasterPos3dv_loader(a0,);
};
private auto glbfn_glRasterPos3dv_loader (const(double)* a0) nothrow @nogc {
  glRasterPos3dv = cast(glbfn_glRasterPos3dv)glbindGetProcAddress(`glRasterPos3dv`);
  if (glRasterPos3dv is null) assert(0, `OpenGL function 'glRasterPos3dv' not found!`);
  glRasterPos3dv(a0,);
}
__gshared glbfn_glRasterPos3f glRasterPos3f = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glRasterPos3f_loader(a0,a1,a2,);
};
private auto glbfn_glRasterPos3f_loader (float a0, float a1, float a2) nothrow @nogc {
  glRasterPos3f = cast(glbfn_glRasterPos3f)glbindGetProcAddress(`glRasterPos3f`);
  if (glRasterPos3f is null) assert(0, `OpenGL function 'glRasterPos3f' not found!`);
  glRasterPos3f(a0,a1,a2,);
}
__gshared glbfn_glRasterPos3fv glRasterPos3fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glRasterPos3fv_loader(a0,);
};
private auto glbfn_glRasterPos3fv_loader (const(float)* a0) nothrow @nogc {
  glRasterPos3fv = cast(glbfn_glRasterPos3fv)glbindGetProcAddress(`glRasterPos3fv`);
  if (glRasterPos3fv is null) assert(0, `OpenGL function 'glRasterPos3fv' not found!`);
  glRasterPos3fv(a0,);
}
__gshared glbfn_glRasterPos3i glRasterPos3i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glRasterPos3i_loader(a0,a1,a2,);
};
private auto glbfn_glRasterPos3i_loader (int a0, int a1, int a2) nothrow @nogc {
  glRasterPos3i = cast(glbfn_glRasterPos3i)glbindGetProcAddress(`glRasterPos3i`);
  if (glRasterPos3i is null) assert(0, `OpenGL function 'glRasterPos3i' not found!`);
  glRasterPos3i(a0,a1,a2,);
}
__gshared glbfn_glRasterPos3iv glRasterPos3iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glRasterPos3iv_loader(a0,);
};
private auto glbfn_glRasterPos3iv_loader (const(int)* a0) nothrow @nogc {
  glRasterPos3iv = cast(glbfn_glRasterPos3iv)glbindGetProcAddress(`glRasterPos3iv`);
  if (glRasterPos3iv is null) assert(0, `OpenGL function 'glRasterPos3iv' not found!`);
  glRasterPos3iv(a0,);
}
__gshared glbfn_glRasterPos3s glRasterPos3s = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glRasterPos3s_loader(a0,a1,a2,);
};
private auto glbfn_glRasterPos3s_loader (short a0, short a1, short a2) nothrow @nogc {
  glRasterPos3s = cast(glbfn_glRasterPos3s)glbindGetProcAddress(`glRasterPos3s`);
  if (glRasterPos3s is null) assert(0, `OpenGL function 'glRasterPos3s' not found!`);
  glRasterPos3s(a0,a1,a2,);
}
__gshared glbfn_glRasterPos3sv glRasterPos3sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glRasterPos3sv_loader(a0,);
};
private auto glbfn_glRasterPos3sv_loader (const(short)* a0) nothrow @nogc {
  glRasterPos3sv = cast(glbfn_glRasterPos3sv)glbindGetProcAddress(`glRasterPos3sv`);
  if (glRasterPos3sv is null) assert(0, `OpenGL function 'glRasterPos3sv' not found!`);
  glRasterPos3sv(a0,);
}
__gshared glbfn_glRasterPos4d glRasterPos4d = function void (double a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glRasterPos4d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRasterPos4d_loader (double a0, double a1, double a2, double a3) nothrow @nogc {
  glRasterPos4d = cast(glbfn_glRasterPos4d)glbindGetProcAddress(`glRasterPos4d`);
  if (glRasterPos4d is null) assert(0, `OpenGL function 'glRasterPos4d' not found!`);
  glRasterPos4d(a0,a1,a2,a3,);
}
__gshared glbfn_glRasterPos4dv glRasterPos4dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glRasterPos4dv_loader(a0,);
};
private auto glbfn_glRasterPos4dv_loader (const(double)* a0) nothrow @nogc {
  glRasterPos4dv = cast(glbfn_glRasterPos4dv)glbindGetProcAddress(`glRasterPos4dv`);
  if (glRasterPos4dv is null) assert(0, `OpenGL function 'glRasterPos4dv' not found!`);
  glRasterPos4dv(a0,);
}
__gshared glbfn_glRasterPos4f glRasterPos4f = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glRasterPos4f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRasterPos4f_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glRasterPos4f = cast(glbfn_glRasterPos4f)glbindGetProcAddress(`glRasterPos4f`);
  if (glRasterPos4f is null) assert(0, `OpenGL function 'glRasterPos4f' not found!`);
  glRasterPos4f(a0,a1,a2,a3,);
}
__gshared glbfn_glRasterPos4fv glRasterPos4fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glRasterPos4fv_loader(a0,);
};
private auto glbfn_glRasterPos4fv_loader (const(float)* a0) nothrow @nogc {
  glRasterPos4fv = cast(glbfn_glRasterPos4fv)glbindGetProcAddress(`glRasterPos4fv`);
  if (glRasterPos4fv is null) assert(0, `OpenGL function 'glRasterPos4fv' not found!`);
  glRasterPos4fv(a0,);
}
__gshared glbfn_glRasterPos4i glRasterPos4i = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glRasterPos4i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRasterPos4i_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glRasterPos4i = cast(glbfn_glRasterPos4i)glbindGetProcAddress(`glRasterPos4i`);
  if (glRasterPos4i is null) assert(0, `OpenGL function 'glRasterPos4i' not found!`);
  glRasterPos4i(a0,a1,a2,a3,);
}
__gshared glbfn_glRasterPos4iv glRasterPos4iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glRasterPos4iv_loader(a0,);
};
private auto glbfn_glRasterPos4iv_loader (const(int)* a0) nothrow @nogc {
  glRasterPos4iv = cast(glbfn_glRasterPos4iv)glbindGetProcAddress(`glRasterPos4iv`);
  if (glRasterPos4iv is null) assert(0, `OpenGL function 'glRasterPos4iv' not found!`);
  glRasterPos4iv(a0,);
}
__gshared glbfn_glRasterPos4s glRasterPos4s = function void (short a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glRasterPos4s_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRasterPos4s_loader (short a0, short a1, short a2, short a3) nothrow @nogc {
  glRasterPos4s = cast(glbfn_glRasterPos4s)glbindGetProcAddress(`glRasterPos4s`);
  if (glRasterPos4s is null) assert(0, `OpenGL function 'glRasterPos4s' not found!`);
  glRasterPos4s(a0,a1,a2,a3,);
}
__gshared glbfn_glRasterPos4sv glRasterPos4sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glRasterPos4sv_loader(a0,);
};
private auto glbfn_glRasterPos4sv_loader (const(short)* a0) nothrow @nogc {
  glRasterPos4sv = cast(glbfn_glRasterPos4sv)glbindGetProcAddress(`glRasterPos4sv`);
  if (glRasterPos4sv is null) assert(0, `OpenGL function 'glRasterPos4sv' not found!`);
  glRasterPos4sv(a0,);
}
__gshared glbfn_glRectd glRectd = function void (double a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glRectd_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRectd_loader (double a0, double a1, double a2, double a3) nothrow @nogc {
  glRectd = cast(glbfn_glRectd)glbindGetProcAddress(`glRectd`);
  if (glRectd is null) assert(0, `OpenGL function 'glRectd' not found!`);
  glRectd(a0,a1,a2,a3,);
}
__gshared glbfn_glRectdv glRectdv = function void (const(double)* a0, const(double)* a1) nothrow @nogc {
  glbfn_glRectdv_loader(a0,a1,);
};
private auto glbfn_glRectdv_loader (const(double)* a0, const(double)* a1) nothrow @nogc {
  glRectdv = cast(glbfn_glRectdv)glbindGetProcAddress(`glRectdv`);
  if (glRectdv is null) assert(0, `OpenGL function 'glRectdv' not found!`);
  glRectdv(a0,a1,);
}
__gshared glbfn_glRectf glRectf = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glRectf_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRectf_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glRectf = cast(glbfn_glRectf)glbindGetProcAddress(`glRectf`);
  if (glRectf is null) assert(0, `OpenGL function 'glRectf' not found!`);
  glRectf(a0,a1,a2,a3,);
}
__gshared glbfn_glRectfv glRectfv = function void (const(float)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glRectfv_loader(a0,a1,);
};
private auto glbfn_glRectfv_loader (const(float)* a0, const(float)* a1) nothrow @nogc {
  glRectfv = cast(glbfn_glRectfv)glbindGetProcAddress(`glRectfv`);
  if (glRectfv is null) assert(0, `OpenGL function 'glRectfv' not found!`);
  glRectfv(a0,a1,);
}
__gshared glbfn_glRecti glRecti = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glRecti_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRecti_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glRecti = cast(glbfn_glRecti)glbindGetProcAddress(`glRecti`);
  if (glRecti is null) assert(0, `OpenGL function 'glRecti' not found!`);
  glRecti(a0,a1,a2,a3,);
}
__gshared glbfn_glRectiv glRectiv = function void (const(int)* a0, const(int)* a1) nothrow @nogc {
  glbfn_glRectiv_loader(a0,a1,);
};
private auto glbfn_glRectiv_loader (const(int)* a0, const(int)* a1) nothrow @nogc {
  glRectiv = cast(glbfn_glRectiv)glbindGetProcAddress(`glRectiv`);
  if (glRectiv is null) assert(0, `OpenGL function 'glRectiv' not found!`);
  glRectiv(a0,a1,);
}
__gshared glbfn_glRects glRects = function void (short a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glRects_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRects_loader (short a0, short a1, short a2, short a3) nothrow @nogc {
  glRects = cast(glbfn_glRects)glbindGetProcAddress(`glRects`);
  if (glRects is null) assert(0, `OpenGL function 'glRects' not found!`);
  glRects(a0,a1,a2,a3,);
}
__gshared glbfn_glRectsv glRectsv = function void (const(short)* a0, const(short)* a1) nothrow @nogc {
  glbfn_glRectsv_loader(a0,a1,);
};
private auto glbfn_glRectsv_loader (const(short)* a0, const(short)* a1) nothrow @nogc {
  glRectsv = cast(glbfn_glRectsv)glbindGetProcAddress(`glRectsv`);
  if (glRectsv is null) assert(0, `OpenGL function 'glRectsv' not found!`);
  glRectsv(a0,a1,);
}
__gshared glbfn_glTexCoord1d glTexCoord1d = function void (double a0) nothrow @nogc {
  glbfn_glTexCoord1d_loader(a0,);
};
private auto glbfn_glTexCoord1d_loader (double a0) nothrow @nogc {
  glTexCoord1d = cast(glbfn_glTexCoord1d)glbindGetProcAddress(`glTexCoord1d`);
  if (glTexCoord1d is null) assert(0, `OpenGL function 'glTexCoord1d' not found!`);
  glTexCoord1d(a0,);
}
__gshared glbfn_glTexCoord1dv glTexCoord1dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glTexCoord1dv_loader(a0,);
};
private auto glbfn_glTexCoord1dv_loader (const(double)* a0) nothrow @nogc {
  glTexCoord1dv = cast(glbfn_glTexCoord1dv)glbindGetProcAddress(`glTexCoord1dv`);
  if (glTexCoord1dv is null) assert(0, `OpenGL function 'glTexCoord1dv' not found!`);
  glTexCoord1dv(a0,);
}
__gshared glbfn_glTexCoord1f glTexCoord1f = function void (float a0) nothrow @nogc {
  glbfn_glTexCoord1f_loader(a0,);
};
private auto glbfn_glTexCoord1f_loader (float a0) nothrow @nogc {
  glTexCoord1f = cast(glbfn_glTexCoord1f)glbindGetProcAddress(`glTexCoord1f`);
  if (glTexCoord1f is null) assert(0, `OpenGL function 'glTexCoord1f' not found!`);
  glTexCoord1f(a0,);
}
__gshared glbfn_glTexCoord1fv glTexCoord1fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glTexCoord1fv_loader(a0,);
};
private auto glbfn_glTexCoord1fv_loader (const(float)* a0) nothrow @nogc {
  glTexCoord1fv = cast(glbfn_glTexCoord1fv)glbindGetProcAddress(`glTexCoord1fv`);
  if (glTexCoord1fv is null) assert(0, `OpenGL function 'glTexCoord1fv' not found!`);
  glTexCoord1fv(a0,);
}
__gshared glbfn_glTexCoord1i glTexCoord1i = function void (int a0) nothrow @nogc {
  glbfn_glTexCoord1i_loader(a0,);
};
private auto glbfn_glTexCoord1i_loader (int a0) nothrow @nogc {
  glTexCoord1i = cast(glbfn_glTexCoord1i)glbindGetProcAddress(`glTexCoord1i`);
  if (glTexCoord1i is null) assert(0, `OpenGL function 'glTexCoord1i' not found!`);
  glTexCoord1i(a0,);
}
__gshared glbfn_glTexCoord1iv glTexCoord1iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord1iv_loader(a0,);
};
private auto glbfn_glTexCoord1iv_loader (const(int)* a0) nothrow @nogc {
  glTexCoord1iv = cast(glbfn_glTexCoord1iv)glbindGetProcAddress(`glTexCoord1iv`);
  if (glTexCoord1iv is null) assert(0, `OpenGL function 'glTexCoord1iv' not found!`);
  glTexCoord1iv(a0,);
}
__gshared glbfn_glTexCoord1s glTexCoord1s = function void (short a0) nothrow @nogc {
  glbfn_glTexCoord1s_loader(a0,);
};
private auto glbfn_glTexCoord1s_loader (short a0) nothrow @nogc {
  glTexCoord1s = cast(glbfn_glTexCoord1s)glbindGetProcAddress(`glTexCoord1s`);
  if (glTexCoord1s is null) assert(0, `OpenGL function 'glTexCoord1s' not found!`);
  glTexCoord1s(a0,);
}
__gshared glbfn_glTexCoord1sv glTexCoord1sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glTexCoord1sv_loader(a0,);
};
private auto glbfn_glTexCoord1sv_loader (const(short)* a0) nothrow @nogc {
  glTexCoord1sv = cast(glbfn_glTexCoord1sv)glbindGetProcAddress(`glTexCoord1sv`);
  if (glTexCoord1sv is null) assert(0, `OpenGL function 'glTexCoord1sv' not found!`);
  glTexCoord1sv(a0,);
}
__gshared glbfn_glTexCoord2d glTexCoord2d = function void (double a0, double a1) nothrow @nogc {
  glbfn_glTexCoord2d_loader(a0,a1,);
};
private auto glbfn_glTexCoord2d_loader (double a0, double a1) nothrow @nogc {
  glTexCoord2d = cast(glbfn_glTexCoord2d)glbindGetProcAddress(`glTexCoord2d`);
  if (glTexCoord2d is null) assert(0, `OpenGL function 'glTexCoord2d' not found!`);
  glTexCoord2d(a0,a1,);
}
__gshared glbfn_glTexCoord2dv glTexCoord2dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glTexCoord2dv_loader(a0,);
};
private auto glbfn_glTexCoord2dv_loader (const(double)* a0) nothrow @nogc {
  glTexCoord2dv = cast(glbfn_glTexCoord2dv)glbindGetProcAddress(`glTexCoord2dv`);
  if (glTexCoord2dv is null) assert(0, `OpenGL function 'glTexCoord2dv' not found!`);
  glTexCoord2dv(a0,);
}
__gshared glbfn_glTexCoord2f glTexCoord2f = function void (float a0, float a1) nothrow @nogc {
  glbfn_glTexCoord2f_loader(a0,a1,);
};
private auto glbfn_glTexCoord2f_loader (float a0, float a1) nothrow @nogc {
  glTexCoord2f = cast(glbfn_glTexCoord2f)glbindGetProcAddress(`glTexCoord2f`);
  if (glTexCoord2f is null) assert(0, `OpenGL function 'glTexCoord2f' not found!`);
  glTexCoord2f(a0,a1,);
}
__gshared glbfn_glTexCoord2fv glTexCoord2fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glTexCoord2fv_loader(a0,);
};
private auto glbfn_glTexCoord2fv_loader (const(float)* a0) nothrow @nogc {
  glTexCoord2fv = cast(glbfn_glTexCoord2fv)glbindGetProcAddress(`glTexCoord2fv`);
  if (glTexCoord2fv is null) assert(0, `OpenGL function 'glTexCoord2fv' not found!`);
  glTexCoord2fv(a0,);
}
__gshared glbfn_glTexCoord2i glTexCoord2i = function void (int a0, int a1) nothrow @nogc {
  glbfn_glTexCoord2i_loader(a0,a1,);
};
private auto glbfn_glTexCoord2i_loader (int a0, int a1) nothrow @nogc {
  glTexCoord2i = cast(glbfn_glTexCoord2i)glbindGetProcAddress(`glTexCoord2i`);
  if (glTexCoord2i is null) assert(0, `OpenGL function 'glTexCoord2i' not found!`);
  glTexCoord2i(a0,a1,);
}
__gshared glbfn_glTexCoord2iv glTexCoord2iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord2iv_loader(a0,);
};
private auto glbfn_glTexCoord2iv_loader (const(int)* a0) nothrow @nogc {
  glTexCoord2iv = cast(glbfn_glTexCoord2iv)glbindGetProcAddress(`glTexCoord2iv`);
  if (glTexCoord2iv is null) assert(0, `OpenGL function 'glTexCoord2iv' not found!`);
  glTexCoord2iv(a0,);
}
__gshared glbfn_glTexCoord2s glTexCoord2s = function void (short a0, short a1) nothrow @nogc {
  glbfn_glTexCoord2s_loader(a0,a1,);
};
private auto glbfn_glTexCoord2s_loader (short a0, short a1) nothrow @nogc {
  glTexCoord2s = cast(glbfn_glTexCoord2s)glbindGetProcAddress(`glTexCoord2s`);
  if (glTexCoord2s is null) assert(0, `OpenGL function 'glTexCoord2s' not found!`);
  glTexCoord2s(a0,a1,);
}
__gshared glbfn_glTexCoord2sv glTexCoord2sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glTexCoord2sv_loader(a0,);
};
private auto glbfn_glTexCoord2sv_loader (const(short)* a0) nothrow @nogc {
  glTexCoord2sv = cast(glbfn_glTexCoord2sv)glbindGetProcAddress(`glTexCoord2sv`);
  if (glTexCoord2sv is null) assert(0, `OpenGL function 'glTexCoord2sv' not found!`);
  glTexCoord2sv(a0,);
}
__gshared glbfn_glTexCoord3d glTexCoord3d = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glTexCoord3d_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord3d_loader (double a0, double a1, double a2) nothrow @nogc {
  glTexCoord3d = cast(glbfn_glTexCoord3d)glbindGetProcAddress(`glTexCoord3d`);
  if (glTexCoord3d is null) assert(0, `OpenGL function 'glTexCoord3d' not found!`);
  glTexCoord3d(a0,a1,a2,);
}
__gshared glbfn_glTexCoord3dv glTexCoord3dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glTexCoord3dv_loader(a0,);
};
private auto glbfn_glTexCoord3dv_loader (const(double)* a0) nothrow @nogc {
  glTexCoord3dv = cast(glbfn_glTexCoord3dv)glbindGetProcAddress(`glTexCoord3dv`);
  if (glTexCoord3dv is null) assert(0, `OpenGL function 'glTexCoord3dv' not found!`);
  glTexCoord3dv(a0,);
}
__gshared glbfn_glTexCoord3f glTexCoord3f = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glTexCoord3f_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord3f_loader (float a0, float a1, float a2) nothrow @nogc {
  glTexCoord3f = cast(glbfn_glTexCoord3f)glbindGetProcAddress(`glTexCoord3f`);
  if (glTexCoord3f is null) assert(0, `OpenGL function 'glTexCoord3f' not found!`);
  glTexCoord3f(a0,a1,a2,);
}
__gshared glbfn_glTexCoord3fv glTexCoord3fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glTexCoord3fv_loader(a0,);
};
private auto glbfn_glTexCoord3fv_loader (const(float)* a0) nothrow @nogc {
  glTexCoord3fv = cast(glbfn_glTexCoord3fv)glbindGetProcAddress(`glTexCoord3fv`);
  if (glTexCoord3fv is null) assert(0, `OpenGL function 'glTexCoord3fv' not found!`);
  glTexCoord3fv(a0,);
}
__gshared glbfn_glTexCoord3i glTexCoord3i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glTexCoord3i_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord3i_loader (int a0, int a1, int a2) nothrow @nogc {
  glTexCoord3i = cast(glbfn_glTexCoord3i)glbindGetProcAddress(`glTexCoord3i`);
  if (glTexCoord3i is null) assert(0, `OpenGL function 'glTexCoord3i' not found!`);
  glTexCoord3i(a0,a1,a2,);
}
__gshared glbfn_glTexCoord3iv glTexCoord3iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord3iv_loader(a0,);
};
private auto glbfn_glTexCoord3iv_loader (const(int)* a0) nothrow @nogc {
  glTexCoord3iv = cast(glbfn_glTexCoord3iv)glbindGetProcAddress(`glTexCoord3iv`);
  if (glTexCoord3iv is null) assert(0, `OpenGL function 'glTexCoord3iv' not found!`);
  glTexCoord3iv(a0,);
}
__gshared glbfn_glTexCoord3s glTexCoord3s = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glTexCoord3s_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord3s_loader (short a0, short a1, short a2) nothrow @nogc {
  glTexCoord3s = cast(glbfn_glTexCoord3s)glbindGetProcAddress(`glTexCoord3s`);
  if (glTexCoord3s is null) assert(0, `OpenGL function 'glTexCoord3s' not found!`);
  glTexCoord3s(a0,a1,a2,);
}
__gshared glbfn_glTexCoord3sv glTexCoord3sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glTexCoord3sv_loader(a0,);
};
private auto glbfn_glTexCoord3sv_loader (const(short)* a0) nothrow @nogc {
  glTexCoord3sv = cast(glbfn_glTexCoord3sv)glbindGetProcAddress(`glTexCoord3sv`);
  if (glTexCoord3sv is null) assert(0, `OpenGL function 'glTexCoord3sv' not found!`);
  glTexCoord3sv(a0,);
}
__gshared glbfn_glTexCoord4d glTexCoord4d = function void (double a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glTexCoord4d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4d_loader (double a0, double a1, double a2, double a3) nothrow @nogc {
  glTexCoord4d = cast(glbfn_glTexCoord4d)glbindGetProcAddress(`glTexCoord4d`);
  if (glTexCoord4d is null) assert(0, `OpenGL function 'glTexCoord4d' not found!`);
  glTexCoord4d(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4dv glTexCoord4dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glTexCoord4dv_loader(a0,);
};
private auto glbfn_glTexCoord4dv_loader (const(double)* a0) nothrow @nogc {
  glTexCoord4dv = cast(glbfn_glTexCoord4dv)glbindGetProcAddress(`glTexCoord4dv`);
  if (glTexCoord4dv is null) assert(0, `OpenGL function 'glTexCoord4dv' not found!`);
  glTexCoord4dv(a0,);
}
__gshared glbfn_glTexCoord4f glTexCoord4f = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glTexCoord4f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4f_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glTexCoord4f = cast(glbfn_glTexCoord4f)glbindGetProcAddress(`glTexCoord4f`);
  if (glTexCoord4f is null) assert(0, `OpenGL function 'glTexCoord4f' not found!`);
  glTexCoord4f(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4fv glTexCoord4fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glTexCoord4fv_loader(a0,);
};
private auto glbfn_glTexCoord4fv_loader (const(float)* a0) nothrow @nogc {
  glTexCoord4fv = cast(glbfn_glTexCoord4fv)glbindGetProcAddress(`glTexCoord4fv`);
  if (glTexCoord4fv is null) assert(0, `OpenGL function 'glTexCoord4fv' not found!`);
  glTexCoord4fv(a0,);
}
__gshared glbfn_glTexCoord4i glTexCoord4i = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glTexCoord4i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4i_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glTexCoord4i = cast(glbfn_glTexCoord4i)glbindGetProcAddress(`glTexCoord4i`);
  if (glTexCoord4i is null) assert(0, `OpenGL function 'glTexCoord4i' not found!`);
  glTexCoord4i(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4iv glTexCoord4iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord4iv_loader(a0,);
};
private auto glbfn_glTexCoord4iv_loader (const(int)* a0) nothrow @nogc {
  glTexCoord4iv = cast(glbfn_glTexCoord4iv)glbindGetProcAddress(`glTexCoord4iv`);
  if (glTexCoord4iv is null) assert(0, `OpenGL function 'glTexCoord4iv' not found!`);
  glTexCoord4iv(a0,);
}
__gshared glbfn_glTexCoord4s glTexCoord4s = function void (short a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glTexCoord4s_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4s_loader (short a0, short a1, short a2, short a3) nothrow @nogc {
  glTexCoord4s = cast(glbfn_glTexCoord4s)glbindGetProcAddress(`glTexCoord4s`);
  if (glTexCoord4s is null) assert(0, `OpenGL function 'glTexCoord4s' not found!`);
  glTexCoord4s(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4sv glTexCoord4sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glTexCoord4sv_loader(a0,);
};
private auto glbfn_glTexCoord4sv_loader (const(short)* a0) nothrow @nogc {
  glTexCoord4sv = cast(glbfn_glTexCoord4sv)glbindGetProcAddress(`glTexCoord4sv`);
  if (glTexCoord4sv is null) assert(0, `OpenGL function 'glTexCoord4sv' not found!`);
  glTexCoord4sv(a0,);
}
__gshared glbfn_glVertex2d glVertex2d = function void (double a0, double a1) nothrow @nogc {
  glbfn_glVertex2d_loader(a0,a1,);
};
private auto glbfn_glVertex2d_loader (double a0, double a1) nothrow @nogc {
  glVertex2d = cast(glbfn_glVertex2d)glbindGetProcAddress(`glVertex2d`);
  if (glVertex2d is null) assert(0, `OpenGL function 'glVertex2d' not found!`);
  glVertex2d(a0,a1,);
}
__gshared glbfn_glVertex2dv glVertex2dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glVertex2dv_loader(a0,);
};
private auto glbfn_glVertex2dv_loader (const(double)* a0) nothrow @nogc {
  glVertex2dv = cast(glbfn_glVertex2dv)glbindGetProcAddress(`glVertex2dv`);
  if (glVertex2dv is null) assert(0, `OpenGL function 'glVertex2dv' not found!`);
  glVertex2dv(a0,);
}
__gshared glbfn_glVertex2f glVertex2f = function void (float a0, float a1) nothrow @nogc {
  glbfn_glVertex2f_loader(a0,a1,);
};
private auto glbfn_glVertex2f_loader (float a0, float a1) nothrow @nogc {
  glVertex2f = cast(glbfn_glVertex2f)glbindGetProcAddress(`glVertex2f`);
  if (glVertex2f is null) assert(0, `OpenGL function 'glVertex2f' not found!`);
  glVertex2f(a0,a1,);
}
__gshared glbfn_glVertex2fv glVertex2fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glVertex2fv_loader(a0,);
};
private auto glbfn_glVertex2fv_loader (const(float)* a0) nothrow @nogc {
  glVertex2fv = cast(glbfn_glVertex2fv)glbindGetProcAddress(`glVertex2fv`);
  if (glVertex2fv is null) assert(0, `OpenGL function 'glVertex2fv' not found!`);
  glVertex2fv(a0,);
}
__gshared glbfn_glVertex2i glVertex2i = function void (int a0, int a1) nothrow @nogc {
  glbfn_glVertex2i_loader(a0,a1,);
};
private auto glbfn_glVertex2i_loader (int a0, int a1) nothrow @nogc {
  glVertex2i = cast(glbfn_glVertex2i)glbindGetProcAddress(`glVertex2i`);
  if (glVertex2i is null) assert(0, `OpenGL function 'glVertex2i' not found!`);
  glVertex2i(a0,a1,);
}
__gshared glbfn_glVertex2iv glVertex2iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glVertex2iv_loader(a0,);
};
private auto glbfn_glVertex2iv_loader (const(int)* a0) nothrow @nogc {
  glVertex2iv = cast(glbfn_glVertex2iv)glbindGetProcAddress(`glVertex2iv`);
  if (glVertex2iv is null) assert(0, `OpenGL function 'glVertex2iv' not found!`);
  glVertex2iv(a0,);
}
__gshared glbfn_glVertex2s glVertex2s = function void (short a0, short a1) nothrow @nogc {
  glbfn_glVertex2s_loader(a0,a1,);
};
private auto glbfn_glVertex2s_loader (short a0, short a1) nothrow @nogc {
  glVertex2s = cast(glbfn_glVertex2s)glbindGetProcAddress(`glVertex2s`);
  if (glVertex2s is null) assert(0, `OpenGL function 'glVertex2s' not found!`);
  glVertex2s(a0,a1,);
}
__gshared glbfn_glVertex2sv glVertex2sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glVertex2sv_loader(a0,);
};
private auto glbfn_glVertex2sv_loader (const(short)* a0) nothrow @nogc {
  glVertex2sv = cast(glbfn_glVertex2sv)glbindGetProcAddress(`glVertex2sv`);
  if (glVertex2sv is null) assert(0, `OpenGL function 'glVertex2sv' not found!`);
  glVertex2sv(a0,);
}
__gshared glbfn_glVertex3d glVertex3d = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glVertex3d_loader(a0,a1,a2,);
};
private auto glbfn_glVertex3d_loader (double a0, double a1, double a2) nothrow @nogc {
  glVertex3d = cast(glbfn_glVertex3d)glbindGetProcAddress(`glVertex3d`);
  if (glVertex3d is null) assert(0, `OpenGL function 'glVertex3d' not found!`);
  glVertex3d(a0,a1,a2,);
}
__gshared glbfn_glVertex3dv glVertex3dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glVertex3dv_loader(a0,);
};
private auto glbfn_glVertex3dv_loader (const(double)* a0) nothrow @nogc {
  glVertex3dv = cast(glbfn_glVertex3dv)glbindGetProcAddress(`glVertex3dv`);
  if (glVertex3dv is null) assert(0, `OpenGL function 'glVertex3dv' not found!`);
  glVertex3dv(a0,);
}
__gshared glbfn_glVertex3f glVertex3f = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glVertex3f_loader(a0,a1,a2,);
};
private auto glbfn_glVertex3f_loader (float a0, float a1, float a2) nothrow @nogc {
  glVertex3f = cast(glbfn_glVertex3f)glbindGetProcAddress(`glVertex3f`);
  if (glVertex3f is null) assert(0, `OpenGL function 'glVertex3f' not found!`);
  glVertex3f(a0,a1,a2,);
}
__gshared glbfn_glVertex3fv glVertex3fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glVertex3fv_loader(a0,);
};
private auto glbfn_glVertex3fv_loader (const(float)* a0) nothrow @nogc {
  glVertex3fv = cast(glbfn_glVertex3fv)glbindGetProcAddress(`glVertex3fv`);
  if (glVertex3fv is null) assert(0, `OpenGL function 'glVertex3fv' not found!`);
  glVertex3fv(a0,);
}
__gshared glbfn_glVertex3i glVertex3i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glVertex3i_loader(a0,a1,a2,);
};
private auto glbfn_glVertex3i_loader (int a0, int a1, int a2) nothrow @nogc {
  glVertex3i = cast(glbfn_glVertex3i)glbindGetProcAddress(`glVertex3i`);
  if (glVertex3i is null) assert(0, `OpenGL function 'glVertex3i' not found!`);
  glVertex3i(a0,a1,a2,);
}
__gshared glbfn_glVertex3iv glVertex3iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glVertex3iv_loader(a0,);
};
private auto glbfn_glVertex3iv_loader (const(int)* a0) nothrow @nogc {
  glVertex3iv = cast(glbfn_glVertex3iv)glbindGetProcAddress(`glVertex3iv`);
  if (glVertex3iv is null) assert(0, `OpenGL function 'glVertex3iv' not found!`);
  glVertex3iv(a0,);
}
__gshared glbfn_glVertex3s glVertex3s = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glVertex3s_loader(a0,a1,a2,);
};
private auto glbfn_glVertex3s_loader (short a0, short a1, short a2) nothrow @nogc {
  glVertex3s = cast(glbfn_glVertex3s)glbindGetProcAddress(`glVertex3s`);
  if (glVertex3s is null) assert(0, `OpenGL function 'glVertex3s' not found!`);
  glVertex3s(a0,a1,a2,);
}
__gshared glbfn_glVertex3sv glVertex3sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glVertex3sv_loader(a0,);
};
private auto glbfn_glVertex3sv_loader (const(short)* a0) nothrow @nogc {
  glVertex3sv = cast(glbfn_glVertex3sv)glbindGetProcAddress(`glVertex3sv`);
  if (glVertex3sv is null) assert(0, `OpenGL function 'glVertex3sv' not found!`);
  glVertex3sv(a0,);
}
__gshared glbfn_glVertex4d glVertex4d = function void (double a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glVertex4d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertex4d_loader (double a0, double a1, double a2, double a3) nothrow @nogc {
  glVertex4d = cast(glbfn_glVertex4d)glbindGetProcAddress(`glVertex4d`);
  if (glVertex4d is null) assert(0, `OpenGL function 'glVertex4d' not found!`);
  glVertex4d(a0,a1,a2,a3,);
}
__gshared glbfn_glVertex4dv glVertex4dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glVertex4dv_loader(a0,);
};
private auto glbfn_glVertex4dv_loader (const(double)* a0) nothrow @nogc {
  glVertex4dv = cast(glbfn_glVertex4dv)glbindGetProcAddress(`glVertex4dv`);
  if (glVertex4dv is null) assert(0, `OpenGL function 'glVertex4dv' not found!`);
  glVertex4dv(a0,);
}
__gshared glbfn_glVertex4f glVertex4f = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glVertex4f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertex4f_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glVertex4f = cast(glbfn_glVertex4f)glbindGetProcAddress(`glVertex4f`);
  if (glVertex4f is null) assert(0, `OpenGL function 'glVertex4f' not found!`);
  glVertex4f(a0,a1,a2,a3,);
}
__gshared glbfn_glVertex4fv glVertex4fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glVertex4fv_loader(a0,);
};
private auto glbfn_glVertex4fv_loader (const(float)* a0) nothrow @nogc {
  glVertex4fv = cast(glbfn_glVertex4fv)glbindGetProcAddress(`glVertex4fv`);
  if (glVertex4fv is null) assert(0, `OpenGL function 'glVertex4fv' not found!`);
  glVertex4fv(a0,);
}
__gshared glbfn_glVertex4i glVertex4i = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glVertex4i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertex4i_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glVertex4i = cast(glbfn_glVertex4i)glbindGetProcAddress(`glVertex4i`);
  if (glVertex4i is null) assert(0, `OpenGL function 'glVertex4i' not found!`);
  glVertex4i(a0,a1,a2,a3,);
}
__gshared glbfn_glVertex4iv glVertex4iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glVertex4iv_loader(a0,);
};
private auto glbfn_glVertex4iv_loader (const(int)* a0) nothrow @nogc {
  glVertex4iv = cast(glbfn_glVertex4iv)glbindGetProcAddress(`glVertex4iv`);
  if (glVertex4iv is null) assert(0, `OpenGL function 'glVertex4iv' not found!`);
  glVertex4iv(a0,);
}
__gshared glbfn_glVertex4s glVertex4s = function void (short a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glVertex4s_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertex4s_loader (short a0, short a1, short a2, short a3) nothrow @nogc {
  glVertex4s = cast(glbfn_glVertex4s)glbindGetProcAddress(`glVertex4s`);
  if (glVertex4s is null) assert(0, `OpenGL function 'glVertex4s' not found!`);
  glVertex4s(a0,a1,a2,a3,);
}
__gshared glbfn_glVertex4sv glVertex4sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glVertex4sv_loader(a0,);
};
private auto glbfn_glVertex4sv_loader (const(short)* a0) nothrow @nogc {
  glVertex4sv = cast(glbfn_glVertex4sv)glbindGetProcAddress(`glVertex4sv`);
  if (glVertex4sv is null) assert(0, `OpenGL function 'glVertex4sv' not found!`);
  glVertex4sv(a0,);
}
__gshared glbfn_glClipPlane glClipPlane = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glClipPlane_loader(a0,a1,);
};
private auto glbfn_glClipPlane_loader (uint a0, const(double)* a1) nothrow @nogc {
  glClipPlane = cast(glbfn_glClipPlane)glbindGetProcAddress(`glClipPlane`);
  if (glClipPlane is null) assert(0, `OpenGL function 'glClipPlane' not found!`);
  glClipPlane(a0,a1,);
}
__gshared glbfn_glColorMaterial glColorMaterial = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glColorMaterial_loader(a0,a1,);
};
private auto glbfn_glColorMaterial_loader (uint a0, uint a1) nothrow @nogc {
  glColorMaterial = cast(glbfn_glColorMaterial)glbindGetProcAddress(`glColorMaterial`);
  if (glColorMaterial is null) assert(0, `OpenGL function 'glColorMaterial' not found!`);
  glColorMaterial(a0,a1,);
}
__gshared glbfn_glFogf glFogf = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glFogf_loader(a0,a1,);
};
private auto glbfn_glFogf_loader (uint a0, float a1) nothrow @nogc {
  glFogf = cast(glbfn_glFogf)glbindGetProcAddress(`glFogf`);
  if (glFogf is null) assert(0, `OpenGL function 'glFogf' not found!`);
  glFogf(a0,a1,);
}
__gshared glbfn_glFogfv glFogfv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glFogfv_loader(a0,a1,);
};
private auto glbfn_glFogfv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glFogfv = cast(glbfn_glFogfv)glbindGetProcAddress(`glFogfv`);
  if (glFogfv is null) assert(0, `OpenGL function 'glFogfv' not found!`);
  glFogfv(a0,a1,);
}
__gshared glbfn_glFogi glFogi = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glFogi_loader(a0,a1,);
};
private auto glbfn_glFogi_loader (uint a0, int a1) nothrow @nogc {
  glFogi = cast(glbfn_glFogi)glbindGetProcAddress(`glFogi`);
  if (glFogi is null) assert(0, `OpenGL function 'glFogi' not found!`);
  glFogi(a0,a1,);
}
__gshared glbfn_glFogiv glFogiv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glFogiv_loader(a0,a1,);
};
private auto glbfn_glFogiv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glFogiv = cast(glbfn_glFogiv)glbindGetProcAddress(`glFogiv`);
  if (glFogiv is null) assert(0, `OpenGL function 'glFogiv' not found!`);
  glFogiv(a0,a1,);
}
__gshared glbfn_glLightf glLightf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glLightf_loader(a0,a1,a2,);
};
private auto glbfn_glLightf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glLightf = cast(glbfn_glLightf)glbindGetProcAddress(`glLightf`);
  if (glLightf is null) assert(0, `OpenGL function 'glLightf' not found!`);
  glLightf(a0,a1,a2,);
}
__gshared glbfn_glLightfv glLightfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glLightfv_loader(a0,a1,a2,);
};
private auto glbfn_glLightfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glLightfv = cast(glbfn_glLightfv)glbindGetProcAddress(`glLightfv`);
  if (glLightfv is null) assert(0, `OpenGL function 'glLightfv' not found!`);
  glLightfv(a0,a1,a2,);
}
__gshared glbfn_glLighti glLighti = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glLighti_loader(a0,a1,a2,);
};
private auto glbfn_glLighti_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glLighti = cast(glbfn_glLighti)glbindGetProcAddress(`glLighti`);
  if (glLighti is null) assert(0, `OpenGL function 'glLighti' not found!`);
  glLighti(a0,a1,a2,);
}
__gshared glbfn_glLightiv glLightiv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glLightiv_loader(a0,a1,a2,);
};
private auto glbfn_glLightiv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glLightiv = cast(glbfn_glLightiv)glbindGetProcAddress(`glLightiv`);
  if (glLightiv is null) assert(0, `OpenGL function 'glLightiv' not found!`);
  glLightiv(a0,a1,a2,);
}
__gshared glbfn_glLightModelf glLightModelf = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glLightModelf_loader(a0,a1,);
};
private auto glbfn_glLightModelf_loader (uint a0, float a1) nothrow @nogc {
  glLightModelf = cast(glbfn_glLightModelf)glbindGetProcAddress(`glLightModelf`);
  if (glLightModelf is null) assert(0, `OpenGL function 'glLightModelf' not found!`);
  glLightModelf(a0,a1,);
}
__gshared glbfn_glLightModelfv glLightModelfv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glLightModelfv_loader(a0,a1,);
};
private auto glbfn_glLightModelfv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glLightModelfv = cast(glbfn_glLightModelfv)glbindGetProcAddress(`glLightModelfv`);
  if (glLightModelfv is null) assert(0, `OpenGL function 'glLightModelfv' not found!`);
  glLightModelfv(a0,a1,);
}
__gshared glbfn_glLightModeli glLightModeli = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glLightModeli_loader(a0,a1,);
};
private auto glbfn_glLightModeli_loader (uint a0, int a1) nothrow @nogc {
  glLightModeli = cast(glbfn_glLightModeli)glbindGetProcAddress(`glLightModeli`);
  if (glLightModeli is null) assert(0, `OpenGL function 'glLightModeli' not found!`);
  glLightModeli(a0,a1,);
}
__gshared glbfn_glLightModeliv glLightModeliv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glLightModeliv_loader(a0,a1,);
};
private auto glbfn_glLightModeliv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glLightModeliv = cast(glbfn_glLightModeliv)glbindGetProcAddress(`glLightModeliv`);
  if (glLightModeliv is null) assert(0, `OpenGL function 'glLightModeliv' not found!`);
  glLightModeliv(a0,a1,);
}
__gshared glbfn_glLineStipple glLineStipple = function void (int a0, ushort a1) nothrow @nogc {
  glbfn_glLineStipple_loader(a0,a1,);
};
private auto glbfn_glLineStipple_loader (int a0, ushort a1) nothrow @nogc {
  glLineStipple = cast(glbfn_glLineStipple)glbindGetProcAddress(`glLineStipple`);
  if (glLineStipple is null) assert(0, `OpenGL function 'glLineStipple' not found!`);
  glLineStipple(a0,a1,);
}
__gshared glbfn_glMaterialf glMaterialf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glMaterialf_loader(a0,a1,a2,);
};
private auto glbfn_glMaterialf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glMaterialf = cast(glbfn_glMaterialf)glbindGetProcAddress(`glMaterialf`);
  if (glMaterialf is null) assert(0, `OpenGL function 'glMaterialf' not found!`);
  glMaterialf(a0,a1,a2,);
}
__gshared glbfn_glMaterialfv glMaterialfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glMaterialfv_loader(a0,a1,a2,);
};
private auto glbfn_glMaterialfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glMaterialfv = cast(glbfn_glMaterialfv)glbindGetProcAddress(`glMaterialfv`);
  if (glMaterialfv is null) assert(0, `OpenGL function 'glMaterialfv' not found!`);
  glMaterialfv(a0,a1,a2,);
}
__gshared glbfn_glMateriali glMateriali = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glMateriali_loader(a0,a1,a2,);
};
private auto glbfn_glMateriali_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glMateriali = cast(glbfn_glMateriali)glbindGetProcAddress(`glMateriali`);
  if (glMateriali is null) assert(0, `OpenGL function 'glMateriali' not found!`);
  glMateriali(a0,a1,a2,);
}
__gshared glbfn_glMaterialiv glMaterialiv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glMaterialiv_loader(a0,a1,a2,);
};
private auto glbfn_glMaterialiv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glMaterialiv = cast(glbfn_glMaterialiv)glbindGetProcAddress(`glMaterialiv`);
  if (glMaterialiv is null) assert(0, `OpenGL function 'glMaterialiv' not found!`);
  glMaterialiv(a0,a1,a2,);
}
__gshared glbfn_glPolygonStipple glPolygonStipple = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glPolygonStipple_loader(a0,);
};
private auto glbfn_glPolygonStipple_loader (const(ubyte)* a0) nothrow @nogc {
  glPolygonStipple = cast(glbfn_glPolygonStipple)glbindGetProcAddress(`glPolygonStipple`);
  if (glPolygonStipple is null) assert(0, `OpenGL function 'glPolygonStipple' not found!`);
  glPolygonStipple(a0,);
}
__gshared glbfn_glShadeModel glShadeModel = function void (uint a0) nothrow @nogc {
  glbfn_glShadeModel_loader(a0,);
};
private auto glbfn_glShadeModel_loader (uint a0) nothrow @nogc {
  glShadeModel = cast(glbfn_glShadeModel)glbindGetProcAddress(`glShadeModel`);
  if (glShadeModel is null) assert(0, `OpenGL function 'glShadeModel' not found!`);
  glShadeModel(a0,);
}
__gshared glbfn_glTexEnvf glTexEnvf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glTexEnvf_loader(a0,a1,a2,);
};
private auto glbfn_glTexEnvf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glTexEnvf = cast(glbfn_glTexEnvf)glbindGetProcAddress(`glTexEnvf`);
  if (glTexEnvf is null) assert(0, `OpenGL function 'glTexEnvf' not found!`);
  glTexEnvf(a0,a1,a2,);
}
__gshared glbfn_glTexEnvfv glTexEnvfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glTexEnvfv_loader(a0,a1,a2,);
};
private auto glbfn_glTexEnvfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glTexEnvfv = cast(glbfn_glTexEnvfv)glbindGetProcAddress(`glTexEnvfv`);
  if (glTexEnvfv is null) assert(0, `OpenGL function 'glTexEnvfv' not found!`);
  glTexEnvfv(a0,a1,a2,);
}
__gshared glbfn_glTexEnvi glTexEnvi = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTexEnvi_loader(a0,a1,a2,);
};
private auto glbfn_glTexEnvi_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glTexEnvi = cast(glbfn_glTexEnvi)glbindGetProcAddress(`glTexEnvi`);
  if (glTexEnvi is null) assert(0, `OpenGL function 'glTexEnvi' not found!`);
  glTexEnvi(a0,a1,a2,);
}
__gshared glbfn_glTexEnviv glTexEnviv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexEnviv_loader(a0,a1,a2,);
};
private auto glbfn_glTexEnviv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexEnviv = cast(glbfn_glTexEnviv)glbindGetProcAddress(`glTexEnviv`);
  if (glTexEnviv is null) assert(0, `OpenGL function 'glTexEnviv' not found!`);
  glTexEnviv(a0,a1,a2,);
}
__gshared glbfn_glTexGend glTexGend = function void (uint a0, uint a1, double a2) nothrow @nogc {
  glbfn_glTexGend_loader(a0,a1,a2,);
};
private auto glbfn_glTexGend_loader (uint a0, uint a1, double a2) nothrow @nogc {
  glTexGend = cast(glbfn_glTexGend)glbindGetProcAddress(`glTexGend`);
  if (glTexGend is null) assert(0, `OpenGL function 'glTexGend' not found!`);
  glTexGend(a0,a1,a2,);
}
__gshared glbfn_glTexGendv glTexGendv = function void (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glbfn_glTexGendv_loader(a0,a1,a2,);
};
private auto glbfn_glTexGendv_loader (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glTexGendv = cast(glbfn_glTexGendv)glbindGetProcAddress(`glTexGendv`);
  if (glTexGendv is null) assert(0, `OpenGL function 'glTexGendv' not found!`);
  glTexGendv(a0,a1,a2,);
}
__gshared glbfn_glTexGenf glTexGenf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glTexGenf_loader(a0,a1,a2,);
};
private auto glbfn_glTexGenf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glTexGenf = cast(glbfn_glTexGenf)glbindGetProcAddress(`glTexGenf`);
  if (glTexGenf is null) assert(0, `OpenGL function 'glTexGenf' not found!`);
  glTexGenf(a0,a1,a2,);
}
__gshared glbfn_glTexGenfv glTexGenfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glTexGenfv_loader(a0,a1,a2,);
};
private auto glbfn_glTexGenfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glTexGenfv = cast(glbfn_glTexGenfv)glbindGetProcAddress(`glTexGenfv`);
  if (glTexGenfv is null) assert(0, `OpenGL function 'glTexGenfv' not found!`);
  glTexGenfv(a0,a1,a2,);
}
__gshared glbfn_glTexGeni glTexGeni = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTexGeni_loader(a0,a1,a2,);
};
private auto glbfn_glTexGeni_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glTexGeni = cast(glbfn_glTexGeni)glbindGetProcAddress(`glTexGeni`);
  if (glTexGeni is null) assert(0, `OpenGL function 'glTexGeni' not found!`);
  glTexGeni(a0,a1,a2,);
}
__gshared glbfn_glTexGeniv glTexGeniv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexGeniv_loader(a0,a1,a2,);
};
private auto glbfn_glTexGeniv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexGeniv = cast(glbfn_glTexGeniv)glbindGetProcAddress(`glTexGeniv`);
  if (glTexGeniv is null) assert(0, `OpenGL function 'glTexGeniv' not found!`);
  glTexGeniv(a0,a1,a2,);
}
__gshared glbfn_glFeedbackBuffer glFeedbackBuffer = function void (int a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glFeedbackBuffer_loader(a0,a1,a2,);
};
private auto glbfn_glFeedbackBuffer_loader (int a0, uint a1, float* a2) nothrow @nogc {
  glFeedbackBuffer = cast(glbfn_glFeedbackBuffer)glbindGetProcAddress(`glFeedbackBuffer`);
  if (glFeedbackBuffer is null) assert(0, `OpenGL function 'glFeedbackBuffer' not found!`);
  glFeedbackBuffer(a0,a1,a2,);
}
__gshared glbfn_glSelectBuffer glSelectBuffer = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glSelectBuffer_loader(a0,a1,);
};
private auto glbfn_glSelectBuffer_loader (int a0, uint* a1) nothrow @nogc {
  glSelectBuffer = cast(glbfn_glSelectBuffer)glbindGetProcAddress(`glSelectBuffer`);
  if (glSelectBuffer is null) assert(0, `OpenGL function 'glSelectBuffer' not found!`);
  glSelectBuffer(a0,a1,);
}
__gshared glbfn_glRenderMode glRenderMode = function int (uint a0) nothrow @nogc {
  return glbfn_glRenderMode_loader(a0,);
};
private auto glbfn_glRenderMode_loader (uint a0) nothrow @nogc {
  glRenderMode = cast(glbfn_glRenderMode)glbindGetProcAddress(`glRenderMode`);
  if (glRenderMode is null) assert(0, `OpenGL function 'glRenderMode' not found!`);
  return glRenderMode(a0,);
}
__gshared glbfn_glInitNames glInitNames = function void () nothrow @nogc {
  glbfn_glInitNames_loader();
};
private auto glbfn_glInitNames_loader () nothrow @nogc {
  glInitNames = cast(glbfn_glInitNames)glbindGetProcAddress(`glInitNames`);
  if (glInitNames is null) assert(0, `OpenGL function 'glInitNames' not found!`);
  glInitNames();
}
__gshared glbfn_glLoadName glLoadName = function void (uint a0) nothrow @nogc {
  glbfn_glLoadName_loader(a0,);
};
private auto glbfn_glLoadName_loader (uint a0) nothrow @nogc {
  glLoadName = cast(glbfn_glLoadName)glbindGetProcAddress(`glLoadName`);
  if (glLoadName is null) assert(0, `OpenGL function 'glLoadName' not found!`);
  glLoadName(a0,);
}
__gshared glbfn_glPassThrough glPassThrough = function void (float a0) nothrow @nogc {
  glbfn_glPassThrough_loader(a0,);
};
private auto glbfn_glPassThrough_loader (float a0) nothrow @nogc {
  glPassThrough = cast(glbfn_glPassThrough)glbindGetProcAddress(`glPassThrough`);
  if (glPassThrough is null) assert(0, `OpenGL function 'glPassThrough' not found!`);
  glPassThrough(a0,);
}
__gshared glbfn_glPopName glPopName = function void () nothrow @nogc {
  glbfn_glPopName_loader();
};
private auto glbfn_glPopName_loader () nothrow @nogc {
  glPopName = cast(glbfn_glPopName)glbindGetProcAddress(`glPopName`);
  if (glPopName is null) assert(0, `OpenGL function 'glPopName' not found!`);
  glPopName();
}
__gshared glbfn_glPushName glPushName = function void (uint a0) nothrow @nogc {
  glbfn_glPushName_loader(a0,);
};
private auto glbfn_glPushName_loader (uint a0) nothrow @nogc {
  glPushName = cast(glbfn_glPushName)glbindGetProcAddress(`glPushName`);
  if (glPushName is null) assert(0, `OpenGL function 'glPushName' not found!`);
  glPushName(a0,);
}
__gshared glbfn_glClearAccum glClearAccum = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glClearAccum_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearAccum_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glClearAccum = cast(glbfn_glClearAccum)glbindGetProcAddress(`glClearAccum`);
  if (glClearAccum is null) assert(0, `OpenGL function 'glClearAccum' not found!`);
  glClearAccum(a0,a1,a2,a3,);
}
__gshared glbfn_glClearIndex glClearIndex = function void (float a0) nothrow @nogc {
  glbfn_glClearIndex_loader(a0,);
};
private auto glbfn_glClearIndex_loader (float a0) nothrow @nogc {
  glClearIndex = cast(glbfn_glClearIndex)glbindGetProcAddress(`glClearIndex`);
  if (glClearIndex is null) assert(0, `OpenGL function 'glClearIndex' not found!`);
  glClearIndex(a0,);
}
__gshared glbfn_glIndexMask glIndexMask = function void (uint a0) nothrow @nogc {
  glbfn_glIndexMask_loader(a0,);
};
private auto glbfn_glIndexMask_loader (uint a0) nothrow @nogc {
  glIndexMask = cast(glbfn_glIndexMask)glbindGetProcAddress(`glIndexMask`);
  if (glIndexMask is null) assert(0, `OpenGL function 'glIndexMask' not found!`);
  glIndexMask(a0,);
}
__gshared glbfn_glAccum glAccum = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glAccum_loader(a0,a1,);
};
private auto glbfn_glAccum_loader (uint a0, float a1) nothrow @nogc {
  glAccum = cast(glbfn_glAccum)glbindGetProcAddress(`glAccum`);
  if (glAccum is null) assert(0, `OpenGL function 'glAccum' not found!`);
  glAccum(a0,a1,);
}
__gshared glbfn_glPopAttrib glPopAttrib = function void () nothrow @nogc {
  glbfn_glPopAttrib_loader();
};
private auto glbfn_glPopAttrib_loader () nothrow @nogc {
  glPopAttrib = cast(glbfn_glPopAttrib)glbindGetProcAddress(`glPopAttrib`);
  if (glPopAttrib is null) assert(0, `OpenGL function 'glPopAttrib' not found!`);
  glPopAttrib();
}
__gshared glbfn_glPushAttrib glPushAttrib = function void (uint a0) nothrow @nogc {
  glbfn_glPushAttrib_loader(a0,);
};
private auto glbfn_glPushAttrib_loader (uint a0) nothrow @nogc {
  glPushAttrib = cast(glbfn_glPushAttrib)glbindGetProcAddress(`glPushAttrib`);
  if (glPushAttrib is null) assert(0, `OpenGL function 'glPushAttrib' not found!`);
  glPushAttrib(a0,);
}
__gshared glbfn_glMap1d glMap1d = function void (uint a0, double a1, double a2, int a3, int a4, const(double)* a5) nothrow @nogc {
  glbfn_glMap1d_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMap1d_loader (uint a0, double a1, double a2, int a3, int a4, const(double)* a5) nothrow @nogc {
  glMap1d = cast(glbfn_glMap1d)glbindGetProcAddress(`glMap1d`);
  if (glMap1d is null) assert(0, `OpenGL function 'glMap1d' not found!`);
  glMap1d(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glMap1f glMap1f = function void (uint a0, float a1, float a2, int a3, int a4, const(float)* a5) nothrow @nogc {
  glbfn_glMap1f_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMap1f_loader (uint a0, float a1, float a2, int a3, int a4, const(float)* a5) nothrow @nogc {
  glMap1f = cast(glbfn_glMap1f)glbindGetProcAddress(`glMap1f`);
  if (glMap1f is null) assert(0, `OpenGL function 'glMap1f' not found!`);
  glMap1f(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glMap2d glMap2d = function void (uint a0, double a1, double a2, int a3, int a4, double a5, double a6, int a7, int a8, const(double)* a9) nothrow @nogc {
  glbfn_glMap2d_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glMap2d_loader (uint a0, double a1, double a2, int a3, int a4, double a5, double a6, int a7, int a8, const(double)* a9) nothrow @nogc {
  glMap2d = cast(glbfn_glMap2d)glbindGetProcAddress(`glMap2d`);
  if (glMap2d is null) assert(0, `OpenGL function 'glMap2d' not found!`);
  glMap2d(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glMap2f glMap2f = function void (uint a0, float a1, float a2, int a3, int a4, float a5, float a6, int a7, int a8, const(float)* a9) nothrow @nogc {
  glbfn_glMap2f_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glMap2f_loader (uint a0, float a1, float a2, int a3, int a4, float a5, float a6, int a7, int a8, const(float)* a9) nothrow @nogc {
  glMap2f = cast(glbfn_glMap2f)glbindGetProcAddress(`glMap2f`);
  if (glMap2f is null) assert(0, `OpenGL function 'glMap2f' not found!`);
  glMap2f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glMapGrid1d glMapGrid1d = function void (int a0, double a1, double a2) nothrow @nogc {
  glbfn_glMapGrid1d_loader(a0,a1,a2,);
};
private auto glbfn_glMapGrid1d_loader (int a0, double a1, double a2) nothrow @nogc {
  glMapGrid1d = cast(glbfn_glMapGrid1d)glbindGetProcAddress(`glMapGrid1d`);
  if (glMapGrid1d is null) assert(0, `OpenGL function 'glMapGrid1d' not found!`);
  glMapGrid1d(a0,a1,a2,);
}
__gshared glbfn_glMapGrid1f glMapGrid1f = function void (int a0, float a1, float a2) nothrow @nogc {
  glbfn_glMapGrid1f_loader(a0,a1,a2,);
};
private auto glbfn_glMapGrid1f_loader (int a0, float a1, float a2) nothrow @nogc {
  glMapGrid1f = cast(glbfn_glMapGrid1f)glbindGetProcAddress(`glMapGrid1f`);
  if (glMapGrid1f is null) assert(0, `OpenGL function 'glMapGrid1f' not found!`);
  glMapGrid1f(a0,a1,a2,);
}
__gshared glbfn_glMapGrid2d glMapGrid2d = function void (int a0, double a1, double a2, int a3, double a4, double a5) nothrow @nogc {
  glbfn_glMapGrid2d_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMapGrid2d_loader (int a0, double a1, double a2, int a3, double a4, double a5) nothrow @nogc {
  glMapGrid2d = cast(glbfn_glMapGrid2d)glbindGetProcAddress(`glMapGrid2d`);
  if (glMapGrid2d is null) assert(0, `OpenGL function 'glMapGrid2d' not found!`);
  glMapGrid2d(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glMapGrid2f glMapGrid2f = function void (int a0, float a1, float a2, int a3, float a4, float a5) nothrow @nogc {
  glbfn_glMapGrid2f_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMapGrid2f_loader (int a0, float a1, float a2, int a3, float a4, float a5) nothrow @nogc {
  glMapGrid2f = cast(glbfn_glMapGrid2f)glbindGetProcAddress(`glMapGrid2f`);
  if (glMapGrid2f is null) assert(0, `OpenGL function 'glMapGrid2f' not found!`);
  glMapGrid2f(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glEvalCoord1d glEvalCoord1d = function void (double a0) nothrow @nogc {
  glbfn_glEvalCoord1d_loader(a0,);
};
private auto glbfn_glEvalCoord1d_loader (double a0) nothrow @nogc {
  glEvalCoord1d = cast(glbfn_glEvalCoord1d)glbindGetProcAddress(`glEvalCoord1d`);
  if (glEvalCoord1d is null) assert(0, `OpenGL function 'glEvalCoord1d' not found!`);
  glEvalCoord1d(a0,);
}
__gshared glbfn_glEvalCoord1dv glEvalCoord1dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glEvalCoord1dv_loader(a0,);
};
private auto glbfn_glEvalCoord1dv_loader (const(double)* a0) nothrow @nogc {
  glEvalCoord1dv = cast(glbfn_glEvalCoord1dv)glbindGetProcAddress(`glEvalCoord1dv`);
  if (glEvalCoord1dv is null) assert(0, `OpenGL function 'glEvalCoord1dv' not found!`);
  glEvalCoord1dv(a0,);
}
__gshared glbfn_glEvalCoord1f glEvalCoord1f = function void (float a0) nothrow @nogc {
  glbfn_glEvalCoord1f_loader(a0,);
};
private auto glbfn_glEvalCoord1f_loader (float a0) nothrow @nogc {
  glEvalCoord1f = cast(glbfn_glEvalCoord1f)glbindGetProcAddress(`glEvalCoord1f`);
  if (glEvalCoord1f is null) assert(0, `OpenGL function 'glEvalCoord1f' not found!`);
  glEvalCoord1f(a0,);
}
__gshared glbfn_glEvalCoord1fv glEvalCoord1fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glEvalCoord1fv_loader(a0,);
};
private auto glbfn_glEvalCoord1fv_loader (const(float)* a0) nothrow @nogc {
  glEvalCoord1fv = cast(glbfn_glEvalCoord1fv)glbindGetProcAddress(`glEvalCoord1fv`);
  if (glEvalCoord1fv is null) assert(0, `OpenGL function 'glEvalCoord1fv' not found!`);
  glEvalCoord1fv(a0,);
}
__gshared glbfn_glEvalCoord2d glEvalCoord2d = function void (double a0, double a1) nothrow @nogc {
  glbfn_glEvalCoord2d_loader(a0,a1,);
};
private auto glbfn_glEvalCoord2d_loader (double a0, double a1) nothrow @nogc {
  glEvalCoord2d = cast(glbfn_glEvalCoord2d)glbindGetProcAddress(`glEvalCoord2d`);
  if (glEvalCoord2d is null) assert(0, `OpenGL function 'glEvalCoord2d' not found!`);
  glEvalCoord2d(a0,a1,);
}
__gshared glbfn_glEvalCoord2dv glEvalCoord2dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glEvalCoord2dv_loader(a0,);
};
private auto glbfn_glEvalCoord2dv_loader (const(double)* a0) nothrow @nogc {
  glEvalCoord2dv = cast(glbfn_glEvalCoord2dv)glbindGetProcAddress(`glEvalCoord2dv`);
  if (glEvalCoord2dv is null) assert(0, `OpenGL function 'glEvalCoord2dv' not found!`);
  glEvalCoord2dv(a0,);
}
__gshared glbfn_glEvalCoord2f glEvalCoord2f = function void (float a0, float a1) nothrow @nogc {
  glbfn_glEvalCoord2f_loader(a0,a1,);
};
private auto glbfn_glEvalCoord2f_loader (float a0, float a1) nothrow @nogc {
  glEvalCoord2f = cast(glbfn_glEvalCoord2f)glbindGetProcAddress(`glEvalCoord2f`);
  if (glEvalCoord2f is null) assert(0, `OpenGL function 'glEvalCoord2f' not found!`);
  glEvalCoord2f(a0,a1,);
}
__gshared glbfn_glEvalCoord2fv glEvalCoord2fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glEvalCoord2fv_loader(a0,);
};
private auto glbfn_glEvalCoord2fv_loader (const(float)* a0) nothrow @nogc {
  glEvalCoord2fv = cast(glbfn_glEvalCoord2fv)glbindGetProcAddress(`glEvalCoord2fv`);
  if (glEvalCoord2fv is null) assert(0, `OpenGL function 'glEvalCoord2fv' not found!`);
  glEvalCoord2fv(a0,);
}
__gshared glbfn_glEvalMesh1 glEvalMesh1 = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glEvalMesh1_loader(a0,a1,a2,);
};
private auto glbfn_glEvalMesh1_loader (uint a0, int a1, int a2) nothrow @nogc {
  glEvalMesh1 = cast(glbfn_glEvalMesh1)glbindGetProcAddress(`glEvalMesh1`);
  if (glEvalMesh1 is null) assert(0, `OpenGL function 'glEvalMesh1' not found!`);
  glEvalMesh1(a0,a1,a2,);
}
__gshared glbfn_glEvalPoint1 glEvalPoint1 = function void (int a0) nothrow @nogc {
  glbfn_glEvalPoint1_loader(a0,);
};
private auto glbfn_glEvalPoint1_loader (int a0) nothrow @nogc {
  glEvalPoint1 = cast(glbfn_glEvalPoint1)glbindGetProcAddress(`glEvalPoint1`);
  if (glEvalPoint1 is null) assert(0, `OpenGL function 'glEvalPoint1' not found!`);
  glEvalPoint1(a0,);
}
__gshared glbfn_glEvalMesh2 glEvalMesh2 = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glEvalMesh2_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glEvalMesh2_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glEvalMesh2 = cast(glbfn_glEvalMesh2)glbindGetProcAddress(`glEvalMesh2`);
  if (glEvalMesh2 is null) assert(0, `OpenGL function 'glEvalMesh2' not found!`);
  glEvalMesh2(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glEvalPoint2 glEvalPoint2 = function void (int a0, int a1) nothrow @nogc {
  glbfn_glEvalPoint2_loader(a0,a1,);
};
private auto glbfn_glEvalPoint2_loader (int a0, int a1) nothrow @nogc {
  glEvalPoint2 = cast(glbfn_glEvalPoint2)glbindGetProcAddress(`glEvalPoint2`);
  if (glEvalPoint2 is null) assert(0, `OpenGL function 'glEvalPoint2' not found!`);
  glEvalPoint2(a0,a1,);
}
__gshared glbfn_glAlphaFunc glAlphaFunc = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glAlphaFunc_loader(a0,a1,);
};
private auto glbfn_glAlphaFunc_loader (uint a0, float a1) nothrow @nogc {
  glAlphaFunc = cast(glbfn_glAlphaFunc)glbindGetProcAddress(`glAlphaFunc`);
  if (glAlphaFunc is null) assert(0, `OpenGL function 'glAlphaFunc' not found!`);
  glAlphaFunc(a0,a1,);
}
__gshared glbfn_glPixelZoom glPixelZoom = function void (float a0, float a1) nothrow @nogc {
  glbfn_glPixelZoom_loader(a0,a1,);
};
private auto glbfn_glPixelZoom_loader (float a0, float a1) nothrow @nogc {
  glPixelZoom = cast(glbfn_glPixelZoom)glbindGetProcAddress(`glPixelZoom`);
  if (glPixelZoom is null) assert(0, `OpenGL function 'glPixelZoom' not found!`);
  glPixelZoom(a0,a1,);
}
__gshared glbfn_glPixelTransferf glPixelTransferf = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPixelTransferf_loader(a0,a1,);
};
private auto glbfn_glPixelTransferf_loader (uint a0, float a1) nothrow @nogc {
  glPixelTransferf = cast(glbfn_glPixelTransferf)glbindGetProcAddress(`glPixelTransferf`);
  if (glPixelTransferf is null) assert(0, `OpenGL function 'glPixelTransferf' not found!`);
  glPixelTransferf(a0,a1,);
}
__gshared glbfn_glPixelTransferi glPixelTransferi = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPixelTransferi_loader(a0,a1,);
};
private auto glbfn_glPixelTransferi_loader (uint a0, int a1) nothrow @nogc {
  glPixelTransferi = cast(glbfn_glPixelTransferi)glbindGetProcAddress(`glPixelTransferi`);
  if (glPixelTransferi is null) assert(0, `OpenGL function 'glPixelTransferi' not found!`);
  glPixelTransferi(a0,a1,);
}
__gshared glbfn_glPixelMapfv glPixelMapfv = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glPixelMapfv_loader(a0,a1,a2,);
};
private auto glbfn_glPixelMapfv_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glPixelMapfv = cast(glbfn_glPixelMapfv)glbindGetProcAddress(`glPixelMapfv`);
  if (glPixelMapfv is null) assert(0, `OpenGL function 'glPixelMapfv' not found!`);
  glPixelMapfv(a0,a1,a2,);
}
__gshared glbfn_glPixelMapuiv glPixelMapuiv = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glPixelMapuiv_loader(a0,a1,a2,);
};
private auto glbfn_glPixelMapuiv_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glPixelMapuiv = cast(glbfn_glPixelMapuiv)glbindGetProcAddress(`glPixelMapuiv`);
  if (glPixelMapuiv is null) assert(0, `OpenGL function 'glPixelMapuiv' not found!`);
  glPixelMapuiv(a0,a1,a2,);
}
__gshared glbfn_glPixelMapusv glPixelMapusv = function void (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glbfn_glPixelMapusv_loader(a0,a1,a2,);
};
private auto glbfn_glPixelMapusv_loader (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glPixelMapusv = cast(glbfn_glPixelMapusv)glbindGetProcAddress(`glPixelMapusv`);
  if (glPixelMapusv is null) assert(0, `OpenGL function 'glPixelMapusv' not found!`);
  glPixelMapusv(a0,a1,a2,);
}
__gshared glbfn_glCopyPixels glCopyPixels = function void (int a0, int a1, int a2, int a3, uint a4) nothrow @nogc {
  glbfn_glCopyPixels_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glCopyPixels_loader (int a0, int a1, int a2, int a3, uint a4) nothrow @nogc {
  glCopyPixels = cast(glbfn_glCopyPixels)glbindGetProcAddress(`glCopyPixels`);
  if (glCopyPixels is null) assert(0, `OpenGL function 'glCopyPixels' not found!`);
  glCopyPixels(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawPixels glDrawPixels = function void (int a0, int a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glbfn_glDrawPixels_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawPixels_loader (int a0, int a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glDrawPixels = cast(glbfn_glDrawPixels)glbindGetProcAddress(`glDrawPixels`);
  if (glDrawPixels is null) assert(0, `OpenGL function 'glDrawPixels' not found!`);
  glDrawPixels(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetClipPlane glGetClipPlane = function void (uint a0, double* a1) nothrow @nogc {
  glbfn_glGetClipPlane_loader(a0,a1,);
};
private auto glbfn_glGetClipPlane_loader (uint a0, double* a1) nothrow @nogc {
  glGetClipPlane = cast(glbfn_glGetClipPlane)glbindGetProcAddress(`glGetClipPlane`);
  if (glGetClipPlane is null) assert(0, `OpenGL function 'glGetClipPlane' not found!`);
  glGetClipPlane(a0,a1,);
}
__gshared glbfn_glGetLightfv glGetLightfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetLightfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetLightfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetLightfv = cast(glbfn_glGetLightfv)glbindGetProcAddress(`glGetLightfv`);
  if (glGetLightfv is null) assert(0, `OpenGL function 'glGetLightfv' not found!`);
  glGetLightfv(a0,a1,a2,);
}
__gshared glbfn_glGetLightiv glGetLightiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetLightiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetLightiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetLightiv = cast(glbfn_glGetLightiv)glbindGetProcAddress(`glGetLightiv`);
  if (glGetLightiv is null) assert(0, `OpenGL function 'glGetLightiv' not found!`);
  glGetLightiv(a0,a1,a2,);
}
__gshared glbfn_glGetMapdv glGetMapdv = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetMapdv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMapdv_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetMapdv = cast(glbfn_glGetMapdv)glbindGetProcAddress(`glGetMapdv`);
  if (glGetMapdv is null) assert(0, `OpenGL function 'glGetMapdv' not found!`);
  glGetMapdv(a0,a1,a2,);
}
__gshared glbfn_glGetMapfv glGetMapfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetMapfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMapfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetMapfv = cast(glbfn_glGetMapfv)glbindGetProcAddress(`glGetMapfv`);
  if (glGetMapfv is null) assert(0, `OpenGL function 'glGetMapfv' not found!`);
  glGetMapfv(a0,a1,a2,);
}
__gshared glbfn_glGetMapiv glGetMapiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetMapiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMapiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetMapiv = cast(glbfn_glGetMapiv)glbindGetProcAddress(`glGetMapiv`);
  if (glGetMapiv is null) assert(0, `OpenGL function 'glGetMapiv' not found!`);
  glGetMapiv(a0,a1,a2,);
}
__gshared glbfn_glGetMaterialfv glGetMaterialfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetMaterialfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMaterialfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetMaterialfv = cast(glbfn_glGetMaterialfv)glbindGetProcAddress(`glGetMaterialfv`);
  if (glGetMaterialfv is null) assert(0, `OpenGL function 'glGetMaterialfv' not found!`);
  glGetMaterialfv(a0,a1,a2,);
}
__gshared glbfn_glGetMaterialiv glGetMaterialiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetMaterialiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMaterialiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetMaterialiv = cast(glbfn_glGetMaterialiv)glbindGetProcAddress(`glGetMaterialiv`);
  if (glGetMaterialiv is null) assert(0, `OpenGL function 'glGetMaterialiv' not found!`);
  glGetMaterialiv(a0,a1,a2,);
}
__gshared glbfn_glGetPixelMapfv glGetPixelMapfv = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetPixelMapfv_loader(a0,a1,);
};
private auto glbfn_glGetPixelMapfv_loader (uint a0, float* a1) nothrow @nogc {
  glGetPixelMapfv = cast(glbfn_glGetPixelMapfv)glbindGetProcAddress(`glGetPixelMapfv`);
  if (glGetPixelMapfv is null) assert(0, `OpenGL function 'glGetPixelMapfv' not found!`);
  glGetPixelMapfv(a0,a1,);
}
__gshared glbfn_glGetPixelMapuiv glGetPixelMapuiv = function void (uint a0, uint* a1) nothrow @nogc {
  glbfn_glGetPixelMapuiv_loader(a0,a1,);
};
private auto glbfn_glGetPixelMapuiv_loader (uint a0, uint* a1) nothrow @nogc {
  glGetPixelMapuiv = cast(glbfn_glGetPixelMapuiv)glbindGetProcAddress(`glGetPixelMapuiv`);
  if (glGetPixelMapuiv is null) assert(0, `OpenGL function 'glGetPixelMapuiv' not found!`);
  glGetPixelMapuiv(a0,a1,);
}
__gshared glbfn_glGetPixelMapusv glGetPixelMapusv = function void (uint a0, ushort* a1) nothrow @nogc {
  glbfn_glGetPixelMapusv_loader(a0,a1,);
};
private auto glbfn_glGetPixelMapusv_loader (uint a0, ushort* a1) nothrow @nogc {
  glGetPixelMapusv = cast(glbfn_glGetPixelMapusv)glbindGetProcAddress(`glGetPixelMapusv`);
  if (glGetPixelMapusv is null) assert(0, `OpenGL function 'glGetPixelMapusv' not found!`);
  glGetPixelMapusv(a0,a1,);
}
__gshared glbfn_glGetPolygonStipple glGetPolygonStipple = function void (ubyte* a0) nothrow @nogc {
  glbfn_glGetPolygonStipple_loader(a0,);
};
private auto glbfn_glGetPolygonStipple_loader (ubyte* a0) nothrow @nogc {
  glGetPolygonStipple = cast(glbfn_glGetPolygonStipple)glbindGetProcAddress(`glGetPolygonStipple`);
  if (glGetPolygonStipple is null) assert(0, `OpenGL function 'glGetPolygonStipple' not found!`);
  glGetPolygonStipple(a0,);
}
__gshared glbfn_glGetTexEnvfv glGetTexEnvfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetTexEnvfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexEnvfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetTexEnvfv = cast(glbfn_glGetTexEnvfv)glbindGetProcAddress(`glGetTexEnvfv`);
  if (glGetTexEnvfv is null) assert(0, `OpenGL function 'glGetTexEnvfv' not found!`);
  glGetTexEnvfv(a0,a1,a2,);
}
__gshared glbfn_glGetTexEnviv glGetTexEnviv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexEnviv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexEnviv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexEnviv = cast(glbfn_glGetTexEnviv)glbindGetProcAddress(`glGetTexEnviv`);
  if (glGetTexEnviv is null) assert(0, `OpenGL function 'glGetTexEnviv' not found!`);
  glGetTexEnviv(a0,a1,a2,);
}
__gshared glbfn_glGetTexGendv glGetTexGendv = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetTexGendv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexGendv_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetTexGendv = cast(glbfn_glGetTexGendv)glbindGetProcAddress(`glGetTexGendv`);
  if (glGetTexGendv is null) assert(0, `OpenGL function 'glGetTexGendv' not found!`);
  glGetTexGendv(a0,a1,a2,);
}
__gshared glbfn_glGetTexGenfv glGetTexGenfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetTexGenfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexGenfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetTexGenfv = cast(glbfn_glGetTexGenfv)glbindGetProcAddress(`glGetTexGenfv`);
  if (glGetTexGenfv is null) assert(0, `OpenGL function 'glGetTexGenfv' not found!`);
  glGetTexGenfv(a0,a1,a2,);
}
__gshared glbfn_glGetTexGeniv glGetTexGeniv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexGeniv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexGeniv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexGeniv = cast(glbfn_glGetTexGeniv)glbindGetProcAddress(`glGetTexGeniv`);
  if (glGetTexGeniv is null) assert(0, `OpenGL function 'glGetTexGeniv' not found!`);
  glGetTexGeniv(a0,a1,a2,);
}
__gshared glbfn_glIsList glIsList = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsList_loader(a0,);
};
private auto glbfn_glIsList_loader (uint a0) nothrow @nogc {
  glIsList = cast(glbfn_glIsList)glbindGetProcAddress(`glIsList`);
  if (glIsList is null) assert(0, `OpenGL function 'glIsList' not found!`);
  return glIsList(a0,);
}
__gshared glbfn_glFrustum glFrustum = function void (double a0, double a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glbfn_glFrustum_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glFrustum_loader (double a0, double a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glFrustum = cast(glbfn_glFrustum)glbindGetProcAddress(`glFrustum`);
  if (glFrustum is null) assert(0, `OpenGL function 'glFrustum' not found!`);
  glFrustum(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glLoadIdentity glLoadIdentity = function void () nothrow @nogc {
  glbfn_glLoadIdentity_loader();
};
private auto glbfn_glLoadIdentity_loader () nothrow @nogc {
  glLoadIdentity = cast(glbfn_glLoadIdentity)glbindGetProcAddress(`glLoadIdentity`);
  if (glLoadIdentity is null) assert(0, `OpenGL function 'glLoadIdentity' not found!`);
  glLoadIdentity();
}
__gshared glbfn_glLoadMatrixf glLoadMatrixf = function void (const(float)* a0) nothrow @nogc {
  glbfn_glLoadMatrixf_loader(a0,);
};
private auto glbfn_glLoadMatrixf_loader (const(float)* a0) nothrow @nogc {
  glLoadMatrixf = cast(glbfn_glLoadMatrixf)glbindGetProcAddress(`glLoadMatrixf`);
  if (glLoadMatrixf is null) assert(0, `OpenGL function 'glLoadMatrixf' not found!`);
  glLoadMatrixf(a0,);
}
__gshared glbfn_glLoadMatrixd glLoadMatrixd = function void (const(double)* a0) nothrow @nogc {
  glbfn_glLoadMatrixd_loader(a0,);
};
private auto glbfn_glLoadMatrixd_loader (const(double)* a0) nothrow @nogc {
  glLoadMatrixd = cast(glbfn_glLoadMatrixd)glbindGetProcAddress(`glLoadMatrixd`);
  if (glLoadMatrixd is null) assert(0, `OpenGL function 'glLoadMatrixd' not found!`);
  glLoadMatrixd(a0,);
}
__gshared glbfn_glMatrixMode glMatrixMode = function void (uint a0) nothrow @nogc {
  glbfn_glMatrixMode_loader(a0,);
};
private auto glbfn_glMatrixMode_loader (uint a0) nothrow @nogc {
  glMatrixMode = cast(glbfn_glMatrixMode)glbindGetProcAddress(`glMatrixMode`);
  if (glMatrixMode is null) assert(0, `OpenGL function 'glMatrixMode' not found!`);
  glMatrixMode(a0,);
}
__gshared glbfn_glMultMatrixf glMultMatrixf = function void (const(float)* a0) nothrow @nogc {
  glbfn_glMultMatrixf_loader(a0,);
};
private auto glbfn_glMultMatrixf_loader (const(float)* a0) nothrow @nogc {
  glMultMatrixf = cast(glbfn_glMultMatrixf)glbindGetProcAddress(`glMultMatrixf`);
  if (glMultMatrixf is null) assert(0, `OpenGL function 'glMultMatrixf' not found!`);
  glMultMatrixf(a0,);
}
__gshared glbfn_glMultMatrixd glMultMatrixd = function void (const(double)* a0) nothrow @nogc {
  glbfn_glMultMatrixd_loader(a0,);
};
private auto glbfn_glMultMatrixd_loader (const(double)* a0) nothrow @nogc {
  glMultMatrixd = cast(glbfn_glMultMatrixd)glbindGetProcAddress(`glMultMatrixd`);
  if (glMultMatrixd is null) assert(0, `OpenGL function 'glMultMatrixd' not found!`);
  glMultMatrixd(a0,);
}
__gshared glbfn_glOrtho glOrtho = function void (double a0, double a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glbfn_glOrtho_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glOrtho_loader (double a0, double a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glOrtho = cast(glbfn_glOrtho)glbindGetProcAddress(`glOrtho`);
  if (glOrtho is null) assert(0, `OpenGL function 'glOrtho' not found!`);
  glOrtho(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glPopMatrix glPopMatrix = function void () nothrow @nogc {
  glbfn_glPopMatrix_loader();
};
private auto glbfn_glPopMatrix_loader () nothrow @nogc {
  glPopMatrix = cast(glbfn_glPopMatrix)glbindGetProcAddress(`glPopMatrix`);
  if (glPopMatrix is null) assert(0, `OpenGL function 'glPopMatrix' not found!`);
  glPopMatrix();
}
__gshared glbfn_glPushMatrix glPushMatrix = function void () nothrow @nogc {
  glbfn_glPushMatrix_loader();
};
private auto glbfn_glPushMatrix_loader () nothrow @nogc {
  glPushMatrix = cast(glbfn_glPushMatrix)glbindGetProcAddress(`glPushMatrix`);
  if (glPushMatrix is null) assert(0, `OpenGL function 'glPushMatrix' not found!`);
  glPushMatrix();
}
__gshared glbfn_glRotated glRotated = function void (double a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glRotated_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRotated_loader (double a0, double a1, double a2, double a3) nothrow @nogc {
  glRotated = cast(glbfn_glRotated)glbindGetProcAddress(`glRotated`);
  if (glRotated is null) assert(0, `OpenGL function 'glRotated' not found!`);
  glRotated(a0,a1,a2,a3,);
}
__gshared glbfn_glRotatef glRotatef = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glRotatef_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRotatef_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glRotatef = cast(glbfn_glRotatef)glbindGetProcAddress(`glRotatef`);
  if (glRotatef is null) assert(0, `OpenGL function 'glRotatef' not found!`);
  glRotatef(a0,a1,a2,a3,);
}
__gshared glbfn_glScaled glScaled = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glScaled_loader(a0,a1,a2,);
};
private auto glbfn_glScaled_loader (double a0, double a1, double a2) nothrow @nogc {
  glScaled = cast(glbfn_glScaled)glbindGetProcAddress(`glScaled`);
  if (glScaled is null) assert(0, `OpenGL function 'glScaled' not found!`);
  glScaled(a0,a1,a2,);
}
__gshared glbfn_glScalef glScalef = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glScalef_loader(a0,a1,a2,);
};
private auto glbfn_glScalef_loader (float a0, float a1, float a2) nothrow @nogc {
  glScalef = cast(glbfn_glScalef)glbindGetProcAddress(`glScalef`);
  if (glScalef is null) assert(0, `OpenGL function 'glScalef' not found!`);
  glScalef(a0,a1,a2,);
}
__gshared glbfn_glTranslated glTranslated = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glTranslated_loader(a0,a1,a2,);
};
private auto glbfn_glTranslated_loader (double a0, double a1, double a2) nothrow @nogc {
  glTranslated = cast(glbfn_glTranslated)glbindGetProcAddress(`glTranslated`);
  if (glTranslated is null) assert(0, `OpenGL function 'glTranslated' not found!`);
  glTranslated(a0,a1,a2,);
}
__gshared glbfn_glTranslatef glTranslatef = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glTranslatef_loader(a0,a1,a2,);
};
private auto glbfn_glTranslatef_loader (float a0, float a1, float a2) nothrow @nogc {
  glTranslatef = cast(glbfn_glTranslatef)glbindGetProcAddress(`glTranslatef`);
  if (glTranslatef is null) assert(0, `OpenGL function 'glTranslatef' not found!`);
  glTranslatef(a0,a1,a2,);
}
__gshared glbfn_glDrawArrays glDrawArrays = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glDrawArrays_loader(a0,a1,a2,);
};
private auto glbfn_glDrawArrays_loader (uint a0, int a1, int a2) nothrow @nogc {
  glDrawArrays = cast(glbfn_glDrawArrays)glbindGetProcAddress(`glDrawArrays`);
  if (glDrawArrays is null) assert(0, `OpenGL function 'glDrawArrays' not found!`);
  glDrawArrays(a0,a1,a2,);
}
__gshared glbfn_glDrawElements glDrawElements = function void (uint a0, int a1, uint a2, const(void)* a3) nothrow @nogc {
  glbfn_glDrawElements_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawElements_loader (uint a0, int a1, uint a2, const(void)* a3) nothrow @nogc {
  glDrawElements = cast(glbfn_glDrawElements)glbindGetProcAddress(`glDrawElements`);
  if (glDrawElements is null) assert(0, `OpenGL function 'glDrawElements' not found!`);
  glDrawElements(a0,a1,a2,a3,);
}
__gshared glbfn_glGetPointerv glGetPointerv = function void (uint a0, void** a1) nothrow @nogc {
  glbfn_glGetPointerv_loader(a0,a1,);
};
private auto glbfn_glGetPointerv_loader (uint a0, void** a1) nothrow @nogc {
  glGetPointerv = cast(glbfn_glGetPointerv)glbindGetProcAddress(`glGetPointerv`);
  if (glGetPointerv is null) assert(0, `OpenGL function 'glGetPointerv' not found!`);
  glGetPointerv(a0,a1,);
}
__gshared glbfn_glPolygonOffset glPolygonOffset = function void (float a0, float a1) nothrow @nogc {
  glbfn_glPolygonOffset_loader(a0,a1,);
};
private auto glbfn_glPolygonOffset_loader (float a0, float a1) nothrow @nogc {
  glPolygonOffset = cast(glbfn_glPolygonOffset)glbindGetProcAddress(`glPolygonOffset`);
  if (glPolygonOffset is null) assert(0, `OpenGL function 'glPolygonOffset' not found!`);
  glPolygonOffset(a0,a1,);
}
__gshared glbfn_glCopyTexImage1D glCopyTexImage1D = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glCopyTexImage1D_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCopyTexImage1D_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glCopyTexImage1D = cast(glbfn_glCopyTexImage1D)glbindGetProcAddress(`glCopyTexImage1D`);
  if (glCopyTexImage1D is null) assert(0, `OpenGL function 'glCopyTexImage1D' not found!`);
  glCopyTexImage1D(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCopyTexImage2D glCopyTexImage2D = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glCopyTexImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCopyTexImage2D_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glCopyTexImage2D = cast(glbfn_glCopyTexImage2D)glbindGetProcAddress(`glCopyTexImage2D`);
  if (glCopyTexImage2D is null) assert(0, `OpenGL function 'glCopyTexImage2D' not found!`);
  glCopyTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCopyTexSubImage1D glCopyTexSubImage1D = function void (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glCopyTexSubImage1D_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glCopyTexSubImage1D_loader (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glCopyTexSubImage1D = cast(glbfn_glCopyTexSubImage1D)glbindGetProcAddress(`glCopyTexSubImage1D`);
  if (glCopyTexSubImage1D is null) assert(0, `OpenGL function 'glCopyTexSubImage1D' not found!`);
  glCopyTexSubImage1D(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glCopyTexSubImage2D glCopyTexSubImage2D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glCopyTexSubImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCopyTexSubImage2D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glCopyTexSubImage2D = cast(glbfn_glCopyTexSubImage2D)glbindGetProcAddress(`glCopyTexSubImage2D`);
  if (glCopyTexSubImage2D is null) assert(0, `OpenGL function 'glCopyTexSubImage2D' not found!`);
  glCopyTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTexSubImage1D glTexSubImage1D = function void (uint a0, int a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glTexSubImage1D_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTexSubImage1D_loader (uint a0, int a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glTexSubImage1D = cast(glbfn_glTexSubImage1D)glbindGetProcAddress(`glTexSubImage1D`);
  if (glTexSubImage1D is null) assert(0, `OpenGL function 'glTexSubImage1D' not found!`);
  glTexSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTexSubImage2D glTexSubImage2D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glbfn_glTexSubImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTexSubImage2D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glTexSubImage2D = cast(glbfn_glTexSubImage2D)glbindGetProcAddress(`glTexSubImage2D`);
  if (glTexSubImage2D is null) assert(0, `OpenGL function 'glTexSubImage2D' not found!`);
  glTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glBindTexture glBindTexture = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindTexture_loader(a0,a1,);
};
private auto glbfn_glBindTexture_loader (uint a0, uint a1) nothrow @nogc {
  glBindTexture = cast(glbfn_glBindTexture)glbindGetProcAddress(`glBindTexture`);
  if (glBindTexture is null) assert(0, `OpenGL function 'glBindTexture' not found!`);
  glBindTexture(a0,a1,);
}
__gshared glbfn_glDeleteTextures glDeleteTextures = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteTextures_loader(a0,a1,);
};
private auto glbfn_glDeleteTextures_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteTextures = cast(glbfn_glDeleteTextures)glbindGetProcAddress(`glDeleteTextures`);
  if (glDeleteTextures is null) assert(0, `OpenGL function 'glDeleteTextures' not found!`);
  glDeleteTextures(a0,a1,);
}
__gshared glbfn_glGenTextures glGenTextures = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenTextures_loader(a0,a1,);
};
private auto glbfn_glGenTextures_loader (int a0, uint* a1) nothrow @nogc {
  glGenTextures = cast(glbfn_glGenTextures)glbindGetProcAddress(`glGenTextures`);
  if (glGenTextures is null) assert(0, `OpenGL function 'glGenTextures' not found!`);
  glGenTextures(a0,a1,);
}
__gshared glbfn_glIsTexture glIsTexture = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsTexture_loader(a0,);
};
private auto glbfn_glIsTexture_loader (uint a0) nothrow @nogc {
  glIsTexture = cast(glbfn_glIsTexture)glbindGetProcAddress(`glIsTexture`);
  if (glIsTexture is null) assert(0, `OpenGL function 'glIsTexture' not found!`);
  return glIsTexture(a0,);
}
__gshared glbfn_glArrayElement glArrayElement = function void (int a0) nothrow @nogc {
  glbfn_glArrayElement_loader(a0,);
};
private auto glbfn_glArrayElement_loader (int a0) nothrow @nogc {
  glArrayElement = cast(glbfn_glArrayElement)glbindGetProcAddress(`glArrayElement`);
  if (glArrayElement is null) assert(0, `OpenGL function 'glArrayElement' not found!`);
  glArrayElement(a0,);
}
__gshared glbfn_glColorPointer glColorPointer = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glColorPointer_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColorPointer_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glColorPointer = cast(glbfn_glColorPointer)glbindGetProcAddress(`glColorPointer`);
  if (glColorPointer is null) assert(0, `OpenGL function 'glColorPointer' not found!`);
  glColorPointer(a0,a1,a2,a3,);
}
__gshared glbfn_glDisableClientState glDisableClientState = function void (uint a0) nothrow @nogc {
  glbfn_glDisableClientState_loader(a0,);
};
private auto glbfn_glDisableClientState_loader (uint a0) nothrow @nogc {
  glDisableClientState = cast(glbfn_glDisableClientState)glbindGetProcAddress(`glDisableClientState`);
  if (glDisableClientState is null) assert(0, `OpenGL function 'glDisableClientState' not found!`);
  glDisableClientState(a0,);
}
__gshared glbfn_glEdgeFlagPointer glEdgeFlagPointer = function void (int a0, const(void)* a1) nothrow @nogc {
  glbfn_glEdgeFlagPointer_loader(a0,a1,);
};
private auto glbfn_glEdgeFlagPointer_loader (int a0, const(void)* a1) nothrow @nogc {
  glEdgeFlagPointer = cast(glbfn_glEdgeFlagPointer)glbindGetProcAddress(`glEdgeFlagPointer`);
  if (glEdgeFlagPointer is null) assert(0, `OpenGL function 'glEdgeFlagPointer' not found!`);
  glEdgeFlagPointer(a0,a1,);
}
__gshared glbfn_glEnableClientState glEnableClientState = function void (uint a0) nothrow @nogc {
  glbfn_glEnableClientState_loader(a0,);
};
private auto glbfn_glEnableClientState_loader (uint a0) nothrow @nogc {
  glEnableClientState = cast(glbfn_glEnableClientState)glbindGetProcAddress(`glEnableClientState`);
  if (glEnableClientState is null) assert(0, `OpenGL function 'glEnableClientState' not found!`);
  glEnableClientState(a0,);
}
__gshared glbfn_glIndexPointer glIndexPointer = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glIndexPointer_loader(a0,a1,a2,);
};
private auto glbfn_glIndexPointer_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glIndexPointer = cast(glbfn_glIndexPointer)glbindGetProcAddress(`glIndexPointer`);
  if (glIndexPointer is null) assert(0, `OpenGL function 'glIndexPointer' not found!`);
  glIndexPointer(a0,a1,a2,);
}
__gshared glbfn_glInterleavedArrays glInterleavedArrays = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glInterleavedArrays_loader(a0,a1,a2,);
};
private auto glbfn_glInterleavedArrays_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glInterleavedArrays = cast(glbfn_glInterleavedArrays)glbindGetProcAddress(`glInterleavedArrays`);
  if (glInterleavedArrays is null) assert(0, `OpenGL function 'glInterleavedArrays' not found!`);
  glInterleavedArrays(a0,a1,a2,);
}
__gshared glbfn_glNormalPointer glNormalPointer = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glNormalPointer_loader(a0,a1,a2,);
};
private auto glbfn_glNormalPointer_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glNormalPointer = cast(glbfn_glNormalPointer)glbindGetProcAddress(`glNormalPointer`);
  if (glNormalPointer is null) assert(0, `OpenGL function 'glNormalPointer' not found!`);
  glNormalPointer(a0,a1,a2,);
}
__gshared glbfn_glTexCoordPointer glTexCoordPointer = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glTexCoordPointer_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoordPointer_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glTexCoordPointer = cast(glbfn_glTexCoordPointer)glbindGetProcAddress(`glTexCoordPointer`);
  if (glTexCoordPointer is null) assert(0, `OpenGL function 'glTexCoordPointer' not found!`);
  glTexCoordPointer(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexPointer glVertexPointer = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glVertexPointer_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexPointer_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glVertexPointer = cast(glbfn_glVertexPointer)glbindGetProcAddress(`glVertexPointer`);
  if (glVertexPointer is null) assert(0, `OpenGL function 'glVertexPointer' not found!`);
  glVertexPointer(a0,a1,a2,a3,);
}
__gshared glbfn_glAreTexturesResident glAreTexturesResident = function ubyte (int a0, const(uint)* a1, ubyte* a2) nothrow @nogc {
  return glbfn_glAreTexturesResident_loader(a0,a1,a2,);
};
private auto glbfn_glAreTexturesResident_loader (int a0, const(uint)* a1, ubyte* a2) nothrow @nogc {
  glAreTexturesResident = cast(glbfn_glAreTexturesResident)glbindGetProcAddress(`glAreTexturesResident`);
  if (glAreTexturesResident is null) assert(0, `OpenGL function 'glAreTexturesResident' not found!`);
  return glAreTexturesResident(a0,a1,a2,);
}
__gshared glbfn_glPrioritizeTextures glPrioritizeTextures = function void (int a0, const(uint)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glPrioritizeTextures_loader(a0,a1,a2,);
};
private auto glbfn_glPrioritizeTextures_loader (int a0, const(uint)* a1, const(float)* a2) nothrow @nogc {
  glPrioritizeTextures = cast(glbfn_glPrioritizeTextures)glbindGetProcAddress(`glPrioritizeTextures`);
  if (glPrioritizeTextures is null) assert(0, `OpenGL function 'glPrioritizeTextures' not found!`);
  glPrioritizeTextures(a0,a1,a2,);
}
__gshared glbfn_glIndexub glIndexub = function void (ubyte a0) nothrow @nogc {
  glbfn_glIndexub_loader(a0,);
};
private auto glbfn_glIndexub_loader (ubyte a0) nothrow @nogc {
  glIndexub = cast(glbfn_glIndexub)glbindGetProcAddress(`glIndexub`);
  if (glIndexub is null) assert(0, `OpenGL function 'glIndexub' not found!`);
  glIndexub(a0,);
}
__gshared glbfn_glIndexubv glIndexubv = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glIndexubv_loader(a0,);
};
private auto glbfn_glIndexubv_loader (const(ubyte)* a0) nothrow @nogc {
  glIndexubv = cast(glbfn_glIndexubv)glbindGetProcAddress(`glIndexubv`);
  if (glIndexubv is null) assert(0, `OpenGL function 'glIndexubv' not found!`);
  glIndexubv(a0,);
}
__gshared glbfn_glPopClientAttrib glPopClientAttrib = function void () nothrow @nogc {
  glbfn_glPopClientAttrib_loader();
};
private auto glbfn_glPopClientAttrib_loader () nothrow @nogc {
  glPopClientAttrib = cast(glbfn_glPopClientAttrib)glbindGetProcAddress(`glPopClientAttrib`);
  if (glPopClientAttrib is null) assert(0, `OpenGL function 'glPopClientAttrib' not found!`);
  glPopClientAttrib();
}
__gshared glbfn_glPushClientAttrib glPushClientAttrib = function void (uint a0) nothrow @nogc {
  glbfn_glPushClientAttrib_loader(a0,);
};
private auto glbfn_glPushClientAttrib_loader (uint a0) nothrow @nogc {
  glPushClientAttrib = cast(glbfn_glPushClientAttrib)glbindGetProcAddress(`glPushClientAttrib`);
  if (glPushClientAttrib is null) assert(0, `OpenGL function 'glPushClientAttrib' not found!`);
  glPushClientAttrib(a0,);
}
__gshared glbfn_glDrawRangeElements glDrawRangeElements = function void (uint a0, uint a1, uint a2, int a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glDrawRangeElements_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDrawRangeElements_loader (uint a0, uint a1, uint a2, int a3, uint a4, const(void)* a5) nothrow @nogc {
  glDrawRangeElements = cast(glbfn_glDrawRangeElements)glbindGetProcAddress(`glDrawRangeElements`);
  if (glDrawRangeElements is null) assert(0, `OpenGL function 'glDrawRangeElements' not found!`);
  glDrawRangeElements(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTexImage3D glTexImage3D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glbfn_glTexImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glTexImage3D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glTexImage3D = cast(glbfn_glTexImage3D)glbindGetProcAddress(`glTexImage3D`);
  if (glTexImage3D is null) assert(0, `OpenGL function 'glTexImage3D' not found!`);
  glTexImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glTexSubImage3D glTexSubImage3D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glbfn_glTexSubImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glTexSubImage3D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glTexSubImage3D = cast(glbfn_glTexSubImage3D)glbindGetProcAddress(`glTexSubImage3D`);
  if (glTexSubImage3D is null) assert(0, `OpenGL function 'glTexSubImage3D' not found!`);
  glTexSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glCopyTexSubImage3D glCopyTexSubImage3D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glbfn_glCopyTexSubImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCopyTexSubImage3D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glCopyTexSubImage3D = cast(glbfn_glCopyTexSubImage3D)glbindGetProcAddress(`glCopyTexSubImage3D`);
  if (glCopyTexSubImage3D is null) assert(0, `OpenGL function 'glCopyTexSubImage3D' not found!`);
  glCopyTexSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glActiveTexture glActiveTexture = function void (uint a0) nothrow @nogc {
  glbfn_glActiveTexture_loader(a0,);
};
private auto glbfn_glActiveTexture_loader (uint a0) nothrow @nogc {
  glActiveTexture = cast(glbfn_glActiveTexture)glbindGetProcAddress(`glActiveTexture`);
  if (glActiveTexture is null) assert(0, `OpenGL function 'glActiveTexture' not found!`);
  glActiveTexture(a0,);
}
__gshared glbfn_glSampleCoverage glSampleCoverage = function void (float a0, ubyte a1) nothrow @nogc {
  glbfn_glSampleCoverage_loader(a0,a1,);
};
private auto glbfn_glSampleCoverage_loader (float a0, ubyte a1) nothrow @nogc {
  glSampleCoverage = cast(glbfn_glSampleCoverage)glbindGetProcAddress(`glSampleCoverage`);
  if (glSampleCoverage is null) assert(0, `OpenGL function 'glSampleCoverage' not found!`);
  glSampleCoverage(a0,a1,);
}
__gshared glbfn_glCompressedTexImage3D glCompressedTexImage3D = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glbfn_glCompressedTexImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCompressedTexImage3D_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glCompressedTexImage3D = cast(glbfn_glCompressedTexImage3D)glbindGetProcAddress(`glCompressedTexImage3D`);
  if (glCompressedTexImage3D is null) assert(0, `OpenGL function 'glCompressedTexImage3D' not found!`);
  glCompressedTexImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCompressedTexImage2D glCompressedTexImage2D = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glbfn_glCompressedTexImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCompressedTexImage2D_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glCompressedTexImage2D = cast(glbfn_glCompressedTexImage2D)glbindGetProcAddress(`glCompressedTexImage2D`);
  if (glCompressedTexImage2D is null) assert(0, `OpenGL function 'glCompressedTexImage2D' not found!`);
  glCompressedTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCompressedTexImage1D glCompressedTexImage1D = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, const(void)* a6) nothrow @nogc {
  glbfn_glCompressedTexImage1D_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCompressedTexImage1D_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, const(void)* a6) nothrow @nogc {
  glCompressedTexImage1D = cast(glbfn_glCompressedTexImage1D)glbindGetProcAddress(`glCompressedTexImage1D`);
  if (glCompressedTexImage1D is null) assert(0, `OpenGL function 'glCompressedTexImage1D' not found!`);
  glCompressedTexImage1D(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCompressedTexSubImage3D glCompressedTexSubImage3D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, int a9, const(void)* a10) nothrow @nogc {
  glbfn_glCompressedTexSubImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glCompressedTexSubImage3D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, int a9, const(void)* a10) nothrow @nogc {
  glCompressedTexSubImage3D = cast(glbfn_glCompressedTexSubImage3D)glbindGetProcAddress(`glCompressedTexSubImage3D`);
  if (glCompressedTexSubImage3D is null) assert(0, `OpenGL function 'glCompressedTexSubImage3D' not found!`);
  glCompressedTexSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glCompressedTexSubImage2D glCompressedTexSubImage2D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, int a7, const(void)* a8) nothrow @nogc {
  glbfn_glCompressedTexSubImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCompressedTexSubImage2D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, int a7, const(void)* a8) nothrow @nogc {
  glCompressedTexSubImage2D = cast(glbfn_glCompressedTexSubImage2D)glbindGetProcAddress(`glCompressedTexSubImage2D`);
  if (glCompressedTexSubImage2D is null) assert(0, `OpenGL function 'glCompressedTexSubImage2D' not found!`);
  glCompressedTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCompressedTexSubImage1D glCompressedTexSubImage1D = function void (uint a0, int a1, int a2, int a3, uint a4, int a5, const(void)* a6) nothrow @nogc {
  glbfn_glCompressedTexSubImage1D_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCompressedTexSubImage1D_loader (uint a0, int a1, int a2, int a3, uint a4, int a5, const(void)* a6) nothrow @nogc {
  glCompressedTexSubImage1D = cast(glbfn_glCompressedTexSubImage1D)glbindGetProcAddress(`glCompressedTexSubImage1D`);
  if (glCompressedTexSubImage1D is null) assert(0, `OpenGL function 'glCompressedTexSubImage1D' not found!`);
  glCompressedTexSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetCompressedTexImage glGetCompressedTexImage = function void (uint a0, int a1, void* a2) nothrow @nogc {
  glbfn_glGetCompressedTexImage_loader(a0,a1,a2,);
};
private auto glbfn_glGetCompressedTexImage_loader (uint a0, int a1, void* a2) nothrow @nogc {
  glGetCompressedTexImage = cast(glbfn_glGetCompressedTexImage)glbindGetProcAddress(`glGetCompressedTexImage`);
  if (glGetCompressedTexImage is null) assert(0, `OpenGL function 'glGetCompressedTexImage' not found!`);
  glGetCompressedTexImage(a0,a1,a2,);
}
__gshared glbfn_glClientActiveTexture glClientActiveTexture = function void (uint a0) nothrow @nogc {
  glbfn_glClientActiveTexture_loader(a0,);
};
private auto glbfn_glClientActiveTexture_loader (uint a0) nothrow @nogc {
  glClientActiveTexture = cast(glbfn_glClientActiveTexture)glbindGetProcAddress(`glClientActiveTexture`);
  if (glClientActiveTexture is null) assert(0, `OpenGL function 'glClientActiveTexture' not found!`);
  glClientActiveTexture(a0,);
}
__gshared glbfn_glMultiTexCoord1d glMultiTexCoord1d = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glMultiTexCoord1d_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1d_loader (uint a0, double a1) nothrow @nogc {
  glMultiTexCoord1d = cast(glbfn_glMultiTexCoord1d)glbindGetProcAddress(`glMultiTexCoord1d`);
  if (glMultiTexCoord1d is null) assert(0, `OpenGL function 'glMultiTexCoord1d' not found!`);
  glMultiTexCoord1d(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1dv glMultiTexCoord1dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1dv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord1dv = cast(glbfn_glMultiTexCoord1dv)glbindGetProcAddress(`glMultiTexCoord1dv`);
  if (glMultiTexCoord1dv is null) assert(0, `OpenGL function 'glMultiTexCoord1dv' not found!`);
  glMultiTexCoord1dv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1f glMultiTexCoord1f = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glMultiTexCoord1f_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1f_loader (uint a0, float a1) nothrow @nogc {
  glMultiTexCoord1f = cast(glbfn_glMultiTexCoord1f)glbindGetProcAddress(`glMultiTexCoord1f`);
  if (glMultiTexCoord1f is null) assert(0, `OpenGL function 'glMultiTexCoord1f' not found!`);
  glMultiTexCoord1f(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1fv glMultiTexCoord1fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1fv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord1fv = cast(glbfn_glMultiTexCoord1fv)glbindGetProcAddress(`glMultiTexCoord1fv`);
  if (glMultiTexCoord1fv is null) assert(0, `OpenGL function 'glMultiTexCoord1fv' not found!`);
  glMultiTexCoord1fv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1i glMultiTexCoord1i = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glMultiTexCoord1i_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1i_loader (uint a0, int a1) nothrow @nogc {
  glMultiTexCoord1i = cast(glbfn_glMultiTexCoord1i)glbindGetProcAddress(`glMultiTexCoord1i`);
  if (glMultiTexCoord1i is null) assert(0, `OpenGL function 'glMultiTexCoord1i' not found!`);
  glMultiTexCoord1i(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1iv glMultiTexCoord1iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1iv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord1iv = cast(glbfn_glMultiTexCoord1iv)glbindGetProcAddress(`glMultiTexCoord1iv`);
  if (glMultiTexCoord1iv is null) assert(0, `OpenGL function 'glMultiTexCoord1iv' not found!`);
  glMultiTexCoord1iv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1s glMultiTexCoord1s = function void (uint a0, short a1) nothrow @nogc {
  glbfn_glMultiTexCoord1s_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1s_loader (uint a0, short a1) nothrow @nogc {
  glMultiTexCoord1s = cast(glbfn_glMultiTexCoord1s)glbindGetProcAddress(`glMultiTexCoord1s`);
  if (glMultiTexCoord1s is null) assert(0, `OpenGL function 'glMultiTexCoord1s' not found!`);
  glMultiTexCoord1s(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1sv glMultiTexCoord1sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1sv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord1sv = cast(glbfn_glMultiTexCoord1sv)glbindGetProcAddress(`glMultiTexCoord1sv`);
  if (glMultiTexCoord1sv is null) assert(0, `OpenGL function 'glMultiTexCoord1sv' not found!`);
  glMultiTexCoord1sv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2d glMultiTexCoord2d = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glMultiTexCoord2d_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2d_loader (uint a0, double a1, double a2) nothrow @nogc {
  glMultiTexCoord2d = cast(glbfn_glMultiTexCoord2d)glbindGetProcAddress(`glMultiTexCoord2d`);
  if (glMultiTexCoord2d is null) assert(0, `OpenGL function 'glMultiTexCoord2d' not found!`);
  glMultiTexCoord2d(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2dv glMultiTexCoord2dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2dv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord2dv = cast(glbfn_glMultiTexCoord2dv)glbindGetProcAddress(`glMultiTexCoord2dv`);
  if (glMultiTexCoord2dv is null) assert(0, `OpenGL function 'glMultiTexCoord2dv' not found!`);
  glMultiTexCoord2dv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2f glMultiTexCoord2f = function void (uint a0, float a1, float a2) nothrow @nogc {
  glbfn_glMultiTexCoord2f_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2f_loader (uint a0, float a1, float a2) nothrow @nogc {
  glMultiTexCoord2f = cast(glbfn_glMultiTexCoord2f)glbindGetProcAddress(`glMultiTexCoord2f`);
  if (glMultiTexCoord2f is null) assert(0, `OpenGL function 'glMultiTexCoord2f' not found!`);
  glMultiTexCoord2f(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2fv glMultiTexCoord2fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2fv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord2fv = cast(glbfn_glMultiTexCoord2fv)glbindGetProcAddress(`glMultiTexCoord2fv`);
  if (glMultiTexCoord2fv is null) assert(0, `OpenGL function 'glMultiTexCoord2fv' not found!`);
  glMultiTexCoord2fv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2i glMultiTexCoord2i = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glMultiTexCoord2i_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2i_loader (uint a0, int a1, int a2) nothrow @nogc {
  glMultiTexCoord2i = cast(glbfn_glMultiTexCoord2i)glbindGetProcAddress(`glMultiTexCoord2i`);
  if (glMultiTexCoord2i is null) assert(0, `OpenGL function 'glMultiTexCoord2i' not found!`);
  glMultiTexCoord2i(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2iv glMultiTexCoord2iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2iv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord2iv = cast(glbfn_glMultiTexCoord2iv)glbindGetProcAddress(`glMultiTexCoord2iv`);
  if (glMultiTexCoord2iv is null) assert(0, `OpenGL function 'glMultiTexCoord2iv' not found!`);
  glMultiTexCoord2iv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2s glMultiTexCoord2s = function void (uint a0, short a1, short a2) nothrow @nogc {
  glbfn_glMultiTexCoord2s_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2s_loader (uint a0, short a1, short a2) nothrow @nogc {
  glMultiTexCoord2s = cast(glbfn_glMultiTexCoord2s)glbindGetProcAddress(`glMultiTexCoord2s`);
  if (glMultiTexCoord2s is null) assert(0, `OpenGL function 'glMultiTexCoord2s' not found!`);
  glMultiTexCoord2s(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2sv glMultiTexCoord2sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2sv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord2sv = cast(glbfn_glMultiTexCoord2sv)glbindGetProcAddress(`glMultiTexCoord2sv`);
  if (glMultiTexCoord2sv is null) assert(0, `OpenGL function 'glMultiTexCoord2sv' not found!`);
  glMultiTexCoord2sv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3d glMultiTexCoord3d = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glMultiTexCoord3d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3d_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glMultiTexCoord3d = cast(glbfn_glMultiTexCoord3d)glbindGetProcAddress(`glMultiTexCoord3d`);
  if (glMultiTexCoord3d is null) assert(0, `OpenGL function 'glMultiTexCoord3d' not found!`);
  glMultiTexCoord3d(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3dv glMultiTexCoord3dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3dv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord3dv = cast(glbfn_glMultiTexCoord3dv)glbindGetProcAddress(`glMultiTexCoord3dv`);
  if (glMultiTexCoord3dv is null) assert(0, `OpenGL function 'glMultiTexCoord3dv' not found!`);
  glMultiTexCoord3dv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3f glMultiTexCoord3f = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glMultiTexCoord3f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3f_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glMultiTexCoord3f = cast(glbfn_glMultiTexCoord3f)glbindGetProcAddress(`glMultiTexCoord3f`);
  if (glMultiTexCoord3f is null) assert(0, `OpenGL function 'glMultiTexCoord3f' not found!`);
  glMultiTexCoord3f(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3fv glMultiTexCoord3fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3fv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord3fv = cast(glbfn_glMultiTexCoord3fv)glbindGetProcAddress(`glMultiTexCoord3fv`);
  if (glMultiTexCoord3fv is null) assert(0, `OpenGL function 'glMultiTexCoord3fv' not found!`);
  glMultiTexCoord3fv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3i glMultiTexCoord3i = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glMultiTexCoord3i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3i_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glMultiTexCoord3i = cast(glbfn_glMultiTexCoord3i)glbindGetProcAddress(`glMultiTexCoord3i`);
  if (glMultiTexCoord3i is null) assert(0, `OpenGL function 'glMultiTexCoord3i' not found!`);
  glMultiTexCoord3i(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3iv glMultiTexCoord3iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3iv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord3iv = cast(glbfn_glMultiTexCoord3iv)glbindGetProcAddress(`glMultiTexCoord3iv`);
  if (glMultiTexCoord3iv is null) assert(0, `OpenGL function 'glMultiTexCoord3iv' not found!`);
  glMultiTexCoord3iv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3s glMultiTexCoord3s = function void (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glMultiTexCoord3s_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3s_loader (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glMultiTexCoord3s = cast(glbfn_glMultiTexCoord3s)glbindGetProcAddress(`glMultiTexCoord3s`);
  if (glMultiTexCoord3s is null) assert(0, `OpenGL function 'glMultiTexCoord3s' not found!`);
  glMultiTexCoord3s(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3sv glMultiTexCoord3sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3sv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord3sv = cast(glbfn_glMultiTexCoord3sv)glbindGetProcAddress(`glMultiTexCoord3sv`);
  if (glMultiTexCoord3sv is null) assert(0, `OpenGL function 'glMultiTexCoord3sv' not found!`);
  glMultiTexCoord3sv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4d glMultiTexCoord4d = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glMultiTexCoord4d_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4d_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glMultiTexCoord4d = cast(glbfn_glMultiTexCoord4d)glbindGetProcAddress(`glMultiTexCoord4d`);
  if (glMultiTexCoord4d is null) assert(0, `OpenGL function 'glMultiTexCoord4d' not found!`);
  glMultiTexCoord4d(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4dv glMultiTexCoord4dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4dv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord4dv = cast(glbfn_glMultiTexCoord4dv)glbindGetProcAddress(`glMultiTexCoord4dv`);
  if (glMultiTexCoord4dv is null) assert(0, `OpenGL function 'glMultiTexCoord4dv' not found!`);
  glMultiTexCoord4dv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4f glMultiTexCoord4f = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glMultiTexCoord4f_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4f_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glMultiTexCoord4f = cast(glbfn_glMultiTexCoord4f)glbindGetProcAddress(`glMultiTexCoord4f`);
  if (glMultiTexCoord4f is null) assert(0, `OpenGL function 'glMultiTexCoord4f' not found!`);
  glMultiTexCoord4f(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4fv glMultiTexCoord4fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4fv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord4fv = cast(glbfn_glMultiTexCoord4fv)glbindGetProcAddress(`glMultiTexCoord4fv`);
  if (glMultiTexCoord4fv is null) assert(0, `OpenGL function 'glMultiTexCoord4fv' not found!`);
  glMultiTexCoord4fv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4i glMultiTexCoord4i = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiTexCoord4i_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4i_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glMultiTexCoord4i = cast(glbfn_glMultiTexCoord4i)glbindGetProcAddress(`glMultiTexCoord4i`);
  if (glMultiTexCoord4i is null) assert(0, `OpenGL function 'glMultiTexCoord4i' not found!`);
  glMultiTexCoord4i(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4iv glMultiTexCoord4iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4iv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord4iv = cast(glbfn_glMultiTexCoord4iv)glbindGetProcAddress(`glMultiTexCoord4iv`);
  if (glMultiTexCoord4iv is null) assert(0, `OpenGL function 'glMultiTexCoord4iv' not found!`);
  glMultiTexCoord4iv(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4s glMultiTexCoord4s = function void (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glbfn_glMultiTexCoord4s_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4s_loader (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glMultiTexCoord4s = cast(glbfn_glMultiTexCoord4s)glbindGetProcAddress(`glMultiTexCoord4s`);
  if (glMultiTexCoord4s is null) assert(0, `OpenGL function 'glMultiTexCoord4s' not found!`);
  glMultiTexCoord4s(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4sv glMultiTexCoord4sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4sv_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord4sv = cast(glbfn_glMultiTexCoord4sv)glbindGetProcAddress(`glMultiTexCoord4sv`);
  if (glMultiTexCoord4sv is null) assert(0, `OpenGL function 'glMultiTexCoord4sv' not found!`);
  glMultiTexCoord4sv(a0,a1,);
}
__gshared glbfn_glLoadTransposeMatrixf glLoadTransposeMatrixf = function void (const(float)* a0) nothrow @nogc {
  glbfn_glLoadTransposeMatrixf_loader(a0,);
};
private auto glbfn_glLoadTransposeMatrixf_loader (const(float)* a0) nothrow @nogc {
  glLoadTransposeMatrixf = cast(glbfn_glLoadTransposeMatrixf)glbindGetProcAddress(`glLoadTransposeMatrixf`);
  if (glLoadTransposeMatrixf is null) assert(0, `OpenGL function 'glLoadTransposeMatrixf' not found!`);
  glLoadTransposeMatrixf(a0,);
}
__gshared glbfn_glLoadTransposeMatrixd glLoadTransposeMatrixd = function void (const(double)* a0) nothrow @nogc {
  glbfn_glLoadTransposeMatrixd_loader(a0,);
};
private auto glbfn_glLoadTransposeMatrixd_loader (const(double)* a0) nothrow @nogc {
  glLoadTransposeMatrixd = cast(glbfn_glLoadTransposeMatrixd)glbindGetProcAddress(`glLoadTransposeMatrixd`);
  if (glLoadTransposeMatrixd is null) assert(0, `OpenGL function 'glLoadTransposeMatrixd' not found!`);
  glLoadTransposeMatrixd(a0,);
}
__gshared glbfn_glMultTransposeMatrixf glMultTransposeMatrixf = function void (const(float)* a0) nothrow @nogc {
  glbfn_glMultTransposeMatrixf_loader(a0,);
};
private auto glbfn_glMultTransposeMatrixf_loader (const(float)* a0) nothrow @nogc {
  glMultTransposeMatrixf = cast(glbfn_glMultTransposeMatrixf)glbindGetProcAddress(`glMultTransposeMatrixf`);
  if (glMultTransposeMatrixf is null) assert(0, `OpenGL function 'glMultTransposeMatrixf' not found!`);
  glMultTransposeMatrixf(a0,);
}
__gshared glbfn_glMultTransposeMatrixd glMultTransposeMatrixd = function void (const(double)* a0) nothrow @nogc {
  glbfn_glMultTransposeMatrixd_loader(a0,);
};
private auto glbfn_glMultTransposeMatrixd_loader (const(double)* a0) nothrow @nogc {
  glMultTransposeMatrixd = cast(glbfn_glMultTransposeMatrixd)glbindGetProcAddress(`glMultTransposeMatrixd`);
  if (glMultTransposeMatrixd is null) assert(0, `OpenGL function 'glMultTransposeMatrixd' not found!`);
  glMultTransposeMatrixd(a0,);
}
__gshared glbfn_glBlendFuncSeparate glBlendFuncSeparate = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glBlendFuncSeparate_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBlendFuncSeparate_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glBlendFuncSeparate = cast(glbfn_glBlendFuncSeparate)glbindGetProcAddress(`glBlendFuncSeparate`);
  if (glBlendFuncSeparate is null) assert(0, `OpenGL function 'glBlendFuncSeparate' not found!`);
  glBlendFuncSeparate(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiDrawArrays glMultiDrawArrays = function void (uint a0, const(int)* a1, const(int)* a2, int a3) nothrow @nogc {
  glbfn_glMultiDrawArrays_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiDrawArrays_loader (uint a0, const(int)* a1, const(int)* a2, int a3) nothrow @nogc {
  glMultiDrawArrays = cast(glbfn_glMultiDrawArrays)glbindGetProcAddress(`glMultiDrawArrays`);
  if (glMultiDrawArrays is null) assert(0, `OpenGL function 'glMultiDrawArrays' not found!`);
  glMultiDrawArrays(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiDrawElements glMultiDrawElements = function void (uint a0, const(int)* a1, uint a2, const(void*)* a3, int a4) nothrow @nogc {
  glbfn_glMultiDrawElements_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiDrawElements_loader (uint a0, const(int)* a1, uint a2, const(void*)* a3, int a4) nothrow @nogc {
  glMultiDrawElements = cast(glbfn_glMultiDrawElements)glbindGetProcAddress(`glMultiDrawElements`);
  if (glMultiDrawElements is null) assert(0, `OpenGL function 'glMultiDrawElements' not found!`);
  glMultiDrawElements(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glPointParameterf glPointParameterf = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPointParameterf_loader(a0,a1,);
};
private auto glbfn_glPointParameterf_loader (uint a0, float a1) nothrow @nogc {
  glPointParameterf = cast(glbfn_glPointParameterf)glbindGetProcAddress(`glPointParameterf`);
  if (glPointParameterf is null) assert(0, `OpenGL function 'glPointParameterf' not found!`);
  glPointParameterf(a0,a1,);
}
__gshared glbfn_glPointParameterfv glPointParameterfv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glPointParameterfv_loader(a0,a1,);
};
private auto glbfn_glPointParameterfv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glPointParameterfv = cast(glbfn_glPointParameterfv)glbindGetProcAddress(`glPointParameterfv`);
  if (glPointParameterfv is null) assert(0, `OpenGL function 'glPointParameterfv' not found!`);
  glPointParameterfv(a0,a1,);
}
__gshared glbfn_glPointParameteri glPointParameteri = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPointParameteri_loader(a0,a1,);
};
private auto glbfn_glPointParameteri_loader (uint a0, int a1) nothrow @nogc {
  glPointParameteri = cast(glbfn_glPointParameteri)glbindGetProcAddress(`glPointParameteri`);
  if (glPointParameteri is null) assert(0, `OpenGL function 'glPointParameteri' not found!`);
  glPointParameteri(a0,a1,);
}
__gshared glbfn_glPointParameteriv glPointParameteriv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glPointParameteriv_loader(a0,a1,);
};
private auto glbfn_glPointParameteriv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glPointParameteriv = cast(glbfn_glPointParameteriv)glbindGetProcAddress(`glPointParameteriv`);
  if (glPointParameteriv is null) assert(0, `OpenGL function 'glPointParameteriv' not found!`);
  glPointParameteriv(a0,a1,);
}
__gshared glbfn_glFogCoordf glFogCoordf = function void (float a0) nothrow @nogc {
  glbfn_glFogCoordf_loader(a0,);
};
private auto glbfn_glFogCoordf_loader (float a0) nothrow @nogc {
  glFogCoordf = cast(glbfn_glFogCoordf)glbindGetProcAddress(`glFogCoordf`);
  if (glFogCoordf is null) assert(0, `OpenGL function 'glFogCoordf' not found!`);
  glFogCoordf(a0,);
}
__gshared glbfn_glFogCoordfv glFogCoordfv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glFogCoordfv_loader(a0,);
};
private auto glbfn_glFogCoordfv_loader (const(float)* a0) nothrow @nogc {
  glFogCoordfv = cast(glbfn_glFogCoordfv)glbindGetProcAddress(`glFogCoordfv`);
  if (glFogCoordfv is null) assert(0, `OpenGL function 'glFogCoordfv' not found!`);
  glFogCoordfv(a0,);
}
__gshared glbfn_glFogCoordd glFogCoordd = function void (double a0) nothrow @nogc {
  glbfn_glFogCoordd_loader(a0,);
};
private auto glbfn_glFogCoordd_loader (double a0) nothrow @nogc {
  glFogCoordd = cast(glbfn_glFogCoordd)glbindGetProcAddress(`glFogCoordd`);
  if (glFogCoordd is null) assert(0, `OpenGL function 'glFogCoordd' not found!`);
  glFogCoordd(a0,);
}
__gshared glbfn_glFogCoorddv glFogCoorddv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glFogCoorddv_loader(a0,);
};
private auto glbfn_glFogCoorddv_loader (const(double)* a0) nothrow @nogc {
  glFogCoorddv = cast(glbfn_glFogCoorddv)glbindGetProcAddress(`glFogCoorddv`);
  if (glFogCoorddv is null) assert(0, `OpenGL function 'glFogCoorddv' not found!`);
  glFogCoorddv(a0,);
}
__gshared glbfn_glFogCoordPointer glFogCoordPointer = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glFogCoordPointer_loader(a0,a1,a2,);
};
private auto glbfn_glFogCoordPointer_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glFogCoordPointer = cast(glbfn_glFogCoordPointer)glbindGetProcAddress(`glFogCoordPointer`);
  if (glFogCoordPointer is null) assert(0, `OpenGL function 'glFogCoordPointer' not found!`);
  glFogCoordPointer(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3b glSecondaryColor3b = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glSecondaryColor3b_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3b_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glSecondaryColor3b = cast(glbfn_glSecondaryColor3b)glbindGetProcAddress(`glSecondaryColor3b`);
  if (glSecondaryColor3b is null) assert(0, `OpenGL function 'glSecondaryColor3b' not found!`);
  glSecondaryColor3b(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3bv glSecondaryColor3bv = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3bv_loader(a0,);
};
private auto glbfn_glSecondaryColor3bv_loader (const(byte)* a0) nothrow @nogc {
  glSecondaryColor3bv = cast(glbfn_glSecondaryColor3bv)glbindGetProcAddress(`glSecondaryColor3bv`);
  if (glSecondaryColor3bv is null) assert(0, `OpenGL function 'glSecondaryColor3bv' not found!`);
  glSecondaryColor3bv(a0,);
}
__gshared glbfn_glSecondaryColor3d glSecondaryColor3d = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glSecondaryColor3d_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3d_loader (double a0, double a1, double a2) nothrow @nogc {
  glSecondaryColor3d = cast(glbfn_glSecondaryColor3d)glbindGetProcAddress(`glSecondaryColor3d`);
  if (glSecondaryColor3d is null) assert(0, `OpenGL function 'glSecondaryColor3d' not found!`);
  glSecondaryColor3d(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3dv glSecondaryColor3dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3dv_loader(a0,);
};
private auto glbfn_glSecondaryColor3dv_loader (const(double)* a0) nothrow @nogc {
  glSecondaryColor3dv = cast(glbfn_glSecondaryColor3dv)glbindGetProcAddress(`glSecondaryColor3dv`);
  if (glSecondaryColor3dv is null) assert(0, `OpenGL function 'glSecondaryColor3dv' not found!`);
  glSecondaryColor3dv(a0,);
}
__gshared glbfn_glSecondaryColor3f glSecondaryColor3f = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glSecondaryColor3f_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3f_loader (float a0, float a1, float a2) nothrow @nogc {
  glSecondaryColor3f = cast(glbfn_glSecondaryColor3f)glbindGetProcAddress(`glSecondaryColor3f`);
  if (glSecondaryColor3f is null) assert(0, `OpenGL function 'glSecondaryColor3f' not found!`);
  glSecondaryColor3f(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3fv glSecondaryColor3fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3fv_loader(a0,);
};
private auto glbfn_glSecondaryColor3fv_loader (const(float)* a0) nothrow @nogc {
  glSecondaryColor3fv = cast(glbfn_glSecondaryColor3fv)glbindGetProcAddress(`glSecondaryColor3fv`);
  if (glSecondaryColor3fv is null) assert(0, `OpenGL function 'glSecondaryColor3fv' not found!`);
  glSecondaryColor3fv(a0,);
}
__gshared glbfn_glSecondaryColor3i glSecondaryColor3i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glSecondaryColor3i_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3i_loader (int a0, int a1, int a2) nothrow @nogc {
  glSecondaryColor3i = cast(glbfn_glSecondaryColor3i)glbindGetProcAddress(`glSecondaryColor3i`);
  if (glSecondaryColor3i is null) assert(0, `OpenGL function 'glSecondaryColor3i' not found!`);
  glSecondaryColor3i(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3iv glSecondaryColor3iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3iv_loader(a0,);
};
private auto glbfn_glSecondaryColor3iv_loader (const(int)* a0) nothrow @nogc {
  glSecondaryColor3iv = cast(glbfn_glSecondaryColor3iv)glbindGetProcAddress(`glSecondaryColor3iv`);
  if (glSecondaryColor3iv is null) assert(0, `OpenGL function 'glSecondaryColor3iv' not found!`);
  glSecondaryColor3iv(a0,);
}
__gshared glbfn_glSecondaryColor3s glSecondaryColor3s = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glSecondaryColor3s_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3s_loader (short a0, short a1, short a2) nothrow @nogc {
  glSecondaryColor3s = cast(glbfn_glSecondaryColor3s)glbindGetProcAddress(`glSecondaryColor3s`);
  if (glSecondaryColor3s is null) assert(0, `OpenGL function 'glSecondaryColor3s' not found!`);
  glSecondaryColor3s(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3sv glSecondaryColor3sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3sv_loader(a0,);
};
private auto glbfn_glSecondaryColor3sv_loader (const(short)* a0) nothrow @nogc {
  glSecondaryColor3sv = cast(glbfn_glSecondaryColor3sv)glbindGetProcAddress(`glSecondaryColor3sv`);
  if (glSecondaryColor3sv is null) assert(0, `OpenGL function 'glSecondaryColor3sv' not found!`);
  glSecondaryColor3sv(a0,);
}
__gshared glbfn_glSecondaryColor3ub glSecondaryColor3ub = function void (ubyte a0, ubyte a1, ubyte a2) nothrow @nogc {
  glbfn_glSecondaryColor3ub_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3ub_loader (ubyte a0, ubyte a1, ubyte a2) nothrow @nogc {
  glSecondaryColor3ub = cast(glbfn_glSecondaryColor3ub)glbindGetProcAddress(`glSecondaryColor3ub`);
  if (glSecondaryColor3ub is null) assert(0, `OpenGL function 'glSecondaryColor3ub' not found!`);
  glSecondaryColor3ub(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3ubv glSecondaryColor3ubv = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3ubv_loader(a0,);
};
private auto glbfn_glSecondaryColor3ubv_loader (const(ubyte)* a0) nothrow @nogc {
  glSecondaryColor3ubv = cast(glbfn_glSecondaryColor3ubv)glbindGetProcAddress(`glSecondaryColor3ubv`);
  if (glSecondaryColor3ubv is null) assert(0, `OpenGL function 'glSecondaryColor3ubv' not found!`);
  glSecondaryColor3ubv(a0,);
}
__gshared glbfn_glSecondaryColor3ui glSecondaryColor3ui = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glSecondaryColor3ui_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3ui_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glSecondaryColor3ui = cast(glbfn_glSecondaryColor3ui)glbindGetProcAddress(`glSecondaryColor3ui`);
  if (glSecondaryColor3ui is null) assert(0, `OpenGL function 'glSecondaryColor3ui' not found!`);
  glSecondaryColor3ui(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3uiv glSecondaryColor3uiv = function void (const(uint)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3uiv_loader(a0,);
};
private auto glbfn_glSecondaryColor3uiv_loader (const(uint)* a0) nothrow @nogc {
  glSecondaryColor3uiv = cast(glbfn_glSecondaryColor3uiv)glbindGetProcAddress(`glSecondaryColor3uiv`);
  if (glSecondaryColor3uiv is null) assert(0, `OpenGL function 'glSecondaryColor3uiv' not found!`);
  glSecondaryColor3uiv(a0,);
}
__gshared glbfn_glSecondaryColor3us glSecondaryColor3us = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glSecondaryColor3us_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3us_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glSecondaryColor3us = cast(glbfn_glSecondaryColor3us)glbindGetProcAddress(`glSecondaryColor3us`);
  if (glSecondaryColor3us is null) assert(0, `OpenGL function 'glSecondaryColor3us' not found!`);
  glSecondaryColor3us(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3usv glSecondaryColor3usv = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3usv_loader(a0,);
};
private auto glbfn_glSecondaryColor3usv_loader (const(ushort)* a0) nothrow @nogc {
  glSecondaryColor3usv = cast(glbfn_glSecondaryColor3usv)glbindGetProcAddress(`glSecondaryColor3usv`);
  if (glSecondaryColor3usv is null) assert(0, `OpenGL function 'glSecondaryColor3usv' not found!`);
  glSecondaryColor3usv(a0,);
}
__gshared glbfn_glSecondaryColorPointer glSecondaryColorPointer = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glSecondaryColorPointer_loader(a0,a1,a2,a3,);
};
private auto glbfn_glSecondaryColorPointer_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glSecondaryColorPointer = cast(glbfn_glSecondaryColorPointer)glbindGetProcAddress(`glSecondaryColorPointer`);
  if (glSecondaryColorPointer is null) assert(0, `OpenGL function 'glSecondaryColorPointer' not found!`);
  glSecondaryColorPointer(a0,a1,a2,a3,);
}
__gshared glbfn_glWindowPos2d glWindowPos2d = function void (double a0, double a1) nothrow @nogc {
  glbfn_glWindowPos2d_loader(a0,a1,);
};
private auto glbfn_glWindowPos2d_loader (double a0, double a1) nothrow @nogc {
  glWindowPos2d = cast(glbfn_glWindowPos2d)glbindGetProcAddress(`glWindowPos2d`);
  if (glWindowPos2d is null) assert(0, `OpenGL function 'glWindowPos2d' not found!`);
  glWindowPos2d(a0,a1,);
}
__gshared glbfn_glWindowPos2dv glWindowPos2dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glWindowPos2dv_loader(a0,);
};
private auto glbfn_glWindowPos2dv_loader (const(double)* a0) nothrow @nogc {
  glWindowPos2dv = cast(glbfn_glWindowPos2dv)glbindGetProcAddress(`glWindowPos2dv`);
  if (glWindowPos2dv is null) assert(0, `OpenGL function 'glWindowPos2dv' not found!`);
  glWindowPos2dv(a0,);
}
__gshared glbfn_glWindowPos2f glWindowPos2f = function void (float a0, float a1) nothrow @nogc {
  glbfn_glWindowPos2f_loader(a0,a1,);
};
private auto glbfn_glWindowPos2f_loader (float a0, float a1) nothrow @nogc {
  glWindowPos2f = cast(glbfn_glWindowPos2f)glbindGetProcAddress(`glWindowPos2f`);
  if (glWindowPos2f is null) assert(0, `OpenGL function 'glWindowPos2f' not found!`);
  glWindowPos2f(a0,a1,);
}
__gshared glbfn_glWindowPos2fv glWindowPos2fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glWindowPos2fv_loader(a0,);
};
private auto glbfn_glWindowPos2fv_loader (const(float)* a0) nothrow @nogc {
  glWindowPos2fv = cast(glbfn_glWindowPos2fv)glbindGetProcAddress(`glWindowPos2fv`);
  if (glWindowPos2fv is null) assert(0, `OpenGL function 'glWindowPos2fv' not found!`);
  glWindowPos2fv(a0,);
}
__gshared glbfn_glWindowPos2i glWindowPos2i = function void (int a0, int a1) nothrow @nogc {
  glbfn_glWindowPos2i_loader(a0,a1,);
};
private auto glbfn_glWindowPos2i_loader (int a0, int a1) nothrow @nogc {
  glWindowPos2i = cast(glbfn_glWindowPos2i)glbindGetProcAddress(`glWindowPos2i`);
  if (glWindowPos2i is null) assert(0, `OpenGL function 'glWindowPos2i' not found!`);
  glWindowPos2i(a0,a1,);
}
__gshared glbfn_glWindowPos2iv glWindowPos2iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glWindowPos2iv_loader(a0,);
};
private auto glbfn_glWindowPos2iv_loader (const(int)* a0) nothrow @nogc {
  glWindowPos2iv = cast(glbfn_glWindowPos2iv)glbindGetProcAddress(`glWindowPos2iv`);
  if (glWindowPos2iv is null) assert(0, `OpenGL function 'glWindowPos2iv' not found!`);
  glWindowPos2iv(a0,);
}
__gshared glbfn_glWindowPos2s glWindowPos2s = function void (short a0, short a1) nothrow @nogc {
  glbfn_glWindowPos2s_loader(a0,a1,);
};
private auto glbfn_glWindowPos2s_loader (short a0, short a1) nothrow @nogc {
  glWindowPos2s = cast(glbfn_glWindowPos2s)glbindGetProcAddress(`glWindowPos2s`);
  if (glWindowPos2s is null) assert(0, `OpenGL function 'glWindowPos2s' not found!`);
  glWindowPos2s(a0,a1,);
}
__gshared glbfn_glWindowPos2sv glWindowPos2sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glWindowPos2sv_loader(a0,);
};
private auto glbfn_glWindowPos2sv_loader (const(short)* a0) nothrow @nogc {
  glWindowPos2sv = cast(glbfn_glWindowPos2sv)glbindGetProcAddress(`glWindowPos2sv`);
  if (glWindowPos2sv is null) assert(0, `OpenGL function 'glWindowPos2sv' not found!`);
  glWindowPos2sv(a0,);
}
__gshared glbfn_glWindowPos3d glWindowPos3d = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glWindowPos3d_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3d_loader (double a0, double a1, double a2) nothrow @nogc {
  glWindowPos3d = cast(glbfn_glWindowPos3d)glbindGetProcAddress(`glWindowPos3d`);
  if (glWindowPos3d is null) assert(0, `OpenGL function 'glWindowPos3d' not found!`);
  glWindowPos3d(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3dv glWindowPos3dv = function void (const(double)* a0) nothrow @nogc {
  glbfn_glWindowPos3dv_loader(a0,);
};
private auto glbfn_glWindowPos3dv_loader (const(double)* a0) nothrow @nogc {
  glWindowPos3dv = cast(glbfn_glWindowPos3dv)glbindGetProcAddress(`glWindowPos3dv`);
  if (glWindowPos3dv is null) assert(0, `OpenGL function 'glWindowPos3dv' not found!`);
  glWindowPos3dv(a0,);
}
__gshared glbfn_glWindowPos3f glWindowPos3f = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glWindowPos3f_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3f_loader (float a0, float a1, float a2) nothrow @nogc {
  glWindowPos3f = cast(glbfn_glWindowPos3f)glbindGetProcAddress(`glWindowPos3f`);
  if (glWindowPos3f is null) assert(0, `OpenGL function 'glWindowPos3f' not found!`);
  glWindowPos3f(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3fv glWindowPos3fv = function void (const(float)* a0) nothrow @nogc {
  glbfn_glWindowPos3fv_loader(a0,);
};
private auto glbfn_glWindowPos3fv_loader (const(float)* a0) nothrow @nogc {
  glWindowPos3fv = cast(glbfn_glWindowPos3fv)glbindGetProcAddress(`glWindowPos3fv`);
  if (glWindowPos3fv is null) assert(0, `OpenGL function 'glWindowPos3fv' not found!`);
  glWindowPos3fv(a0,);
}
__gshared glbfn_glWindowPos3i glWindowPos3i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glWindowPos3i_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3i_loader (int a0, int a1, int a2) nothrow @nogc {
  glWindowPos3i = cast(glbfn_glWindowPos3i)glbindGetProcAddress(`glWindowPos3i`);
  if (glWindowPos3i is null) assert(0, `OpenGL function 'glWindowPos3i' not found!`);
  glWindowPos3i(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3iv glWindowPos3iv = function void (const(int)* a0) nothrow @nogc {
  glbfn_glWindowPos3iv_loader(a0,);
};
private auto glbfn_glWindowPos3iv_loader (const(int)* a0) nothrow @nogc {
  glWindowPos3iv = cast(glbfn_glWindowPos3iv)glbindGetProcAddress(`glWindowPos3iv`);
  if (glWindowPos3iv is null) assert(0, `OpenGL function 'glWindowPos3iv' not found!`);
  glWindowPos3iv(a0,);
}
__gshared glbfn_glWindowPos3s glWindowPos3s = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glWindowPos3s_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3s_loader (short a0, short a1, short a2) nothrow @nogc {
  glWindowPos3s = cast(glbfn_glWindowPos3s)glbindGetProcAddress(`glWindowPos3s`);
  if (glWindowPos3s is null) assert(0, `OpenGL function 'glWindowPos3s' not found!`);
  glWindowPos3s(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3sv glWindowPos3sv = function void (const(short)* a0) nothrow @nogc {
  glbfn_glWindowPos3sv_loader(a0,);
};
private auto glbfn_glWindowPos3sv_loader (const(short)* a0) nothrow @nogc {
  glWindowPos3sv = cast(glbfn_glWindowPos3sv)glbindGetProcAddress(`glWindowPos3sv`);
  if (glWindowPos3sv is null) assert(0, `OpenGL function 'glWindowPos3sv' not found!`);
  glWindowPos3sv(a0,);
}
__gshared glbfn_glBlendColor glBlendColor = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glBlendColor_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBlendColor_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glBlendColor = cast(glbfn_glBlendColor)glbindGetProcAddress(`glBlendColor`);
  if (glBlendColor is null) assert(0, `OpenGL function 'glBlendColor' not found!`);
  glBlendColor(a0,a1,a2,a3,);
}
__gshared glbfn_glBlendEquation glBlendEquation = function void (uint a0) nothrow @nogc {
  glbfn_glBlendEquation_loader(a0,);
};
private auto glbfn_glBlendEquation_loader (uint a0) nothrow @nogc {
  glBlendEquation = cast(glbfn_glBlendEquation)glbindGetProcAddress(`glBlendEquation`);
  if (glBlendEquation is null) assert(0, `OpenGL function 'glBlendEquation' not found!`);
  glBlendEquation(a0,);
}
__gshared glbfn_glGenQueries glGenQueries = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenQueries_loader(a0,a1,);
};
private auto glbfn_glGenQueries_loader (int a0, uint* a1) nothrow @nogc {
  glGenQueries = cast(glbfn_glGenQueries)glbindGetProcAddress(`glGenQueries`);
  if (glGenQueries is null) assert(0, `OpenGL function 'glGenQueries' not found!`);
  glGenQueries(a0,a1,);
}
__gshared glbfn_glDeleteQueries glDeleteQueries = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteQueries_loader(a0,a1,);
};
private auto glbfn_glDeleteQueries_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteQueries = cast(glbfn_glDeleteQueries)glbindGetProcAddress(`glDeleteQueries`);
  if (glDeleteQueries is null) assert(0, `OpenGL function 'glDeleteQueries' not found!`);
  glDeleteQueries(a0,a1,);
}
__gshared glbfn_glIsQuery glIsQuery = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsQuery_loader(a0,);
};
private auto glbfn_glIsQuery_loader (uint a0) nothrow @nogc {
  glIsQuery = cast(glbfn_glIsQuery)glbindGetProcAddress(`glIsQuery`);
  if (glIsQuery is null) assert(0, `OpenGL function 'glIsQuery' not found!`);
  return glIsQuery(a0,);
}
__gshared glbfn_glBeginQuery glBeginQuery = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBeginQuery_loader(a0,a1,);
};
private auto glbfn_glBeginQuery_loader (uint a0, uint a1) nothrow @nogc {
  glBeginQuery = cast(glbfn_glBeginQuery)glbindGetProcAddress(`glBeginQuery`);
  if (glBeginQuery is null) assert(0, `OpenGL function 'glBeginQuery' not found!`);
  glBeginQuery(a0,a1,);
}
__gshared glbfn_glEndQuery glEndQuery = function void (uint a0) nothrow @nogc {
  glbfn_glEndQuery_loader(a0,);
};
private auto glbfn_glEndQuery_loader (uint a0) nothrow @nogc {
  glEndQuery = cast(glbfn_glEndQuery)glbindGetProcAddress(`glEndQuery`);
  if (glEndQuery is null) assert(0, `OpenGL function 'glEndQuery' not found!`);
  glEndQuery(a0,);
}
__gshared glbfn_glGetQueryiv glGetQueryiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetQueryiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetQueryiv = cast(glbfn_glGetQueryiv)glbindGetProcAddress(`glGetQueryiv`);
  if (glGetQueryiv is null) assert(0, `OpenGL function 'glGetQueryiv' not found!`);
  glGetQueryiv(a0,a1,a2,);
}
__gshared glbfn_glGetQueryObjectiv glGetQueryObjectiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetQueryObjectiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjectiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetQueryObjectiv = cast(glbfn_glGetQueryObjectiv)glbindGetProcAddress(`glGetQueryObjectiv`);
  if (glGetQueryObjectiv is null) assert(0, `OpenGL function 'glGetQueryObjectiv' not found!`);
  glGetQueryObjectiv(a0,a1,a2,);
}
__gshared glbfn_glGetQueryObjectuiv glGetQueryObjectuiv = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetQueryObjectuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjectuiv_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetQueryObjectuiv = cast(glbfn_glGetQueryObjectuiv)glbindGetProcAddress(`glGetQueryObjectuiv`);
  if (glGetQueryObjectuiv is null) assert(0, `OpenGL function 'glGetQueryObjectuiv' not found!`);
  glGetQueryObjectuiv(a0,a1,a2,);
}
__gshared glbfn_glBindBuffer glBindBuffer = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindBuffer_loader(a0,a1,);
};
private auto glbfn_glBindBuffer_loader (uint a0, uint a1) nothrow @nogc {
  glBindBuffer = cast(glbfn_glBindBuffer)glbindGetProcAddress(`glBindBuffer`);
  if (glBindBuffer is null) assert(0, `OpenGL function 'glBindBuffer' not found!`);
  glBindBuffer(a0,a1,);
}
__gshared glbfn_glDeleteBuffers glDeleteBuffers = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteBuffers_loader(a0,a1,);
};
private auto glbfn_glDeleteBuffers_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteBuffers = cast(glbfn_glDeleteBuffers)glbindGetProcAddress(`glDeleteBuffers`);
  if (glDeleteBuffers is null) assert(0, `OpenGL function 'glDeleteBuffers' not found!`);
  glDeleteBuffers(a0,a1,);
}
__gshared glbfn_glGenBuffers glGenBuffers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenBuffers_loader(a0,a1,);
};
private auto glbfn_glGenBuffers_loader (int a0, uint* a1) nothrow @nogc {
  glGenBuffers = cast(glbfn_glGenBuffers)glbindGetProcAddress(`glGenBuffers`);
  if (glGenBuffers is null) assert(0, `OpenGL function 'glGenBuffers' not found!`);
  glGenBuffers(a0,a1,);
}
__gshared glbfn_glIsBuffer glIsBuffer = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsBuffer_loader(a0,);
};
private auto glbfn_glIsBuffer_loader (uint a0) nothrow @nogc {
  glIsBuffer = cast(glbfn_glIsBuffer)glbindGetProcAddress(`glIsBuffer`);
  if (glIsBuffer is null) assert(0, `OpenGL function 'glIsBuffer' not found!`);
  return glIsBuffer(a0,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glBufferData glBufferData = function void (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glbfn_glBufferData_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glBufferData_loader (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glBufferData = cast(glbfn_glBufferData)glbindGetProcAddress(`glBufferData`);
  if (glBufferData is null) assert(0, `OpenGL function 'glBufferData' not found!`);
  glBufferData(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glBufferSubData glBufferSubData = function void (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glBufferSubData_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glBufferSubData_loader (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glBufferSubData = cast(glbfn_glBufferSubData)glbindGetProcAddress(`glBufferSubData`);
  if (glBufferSubData is null) assert(0, `OpenGL function 'glBufferSubData' not found!`);
  glBufferSubData(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glGetBufferSubData glGetBufferSubData = function void (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetBufferSubData_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glGetBufferSubData_loader (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glGetBufferSubData = cast(glbfn_glGetBufferSubData)glbindGetProcAddress(`glGetBufferSubData`);
  if (glGetBufferSubData is null) assert(0, `OpenGL function 'glGetBufferSubData' not found!`);
  glGetBufferSubData(a0,a1,a2,a3,);
}
__gshared glbfn_glMapBuffer glMapBuffer = function void* (uint a0, uint a1) nothrow @nogc {
  return glbfn_glMapBuffer_loader(a0,a1,);
};
private auto glbfn_glMapBuffer_loader (uint a0, uint a1) nothrow @nogc {
  glMapBuffer = cast(glbfn_glMapBuffer)glbindGetProcAddress(`glMapBuffer`);
  if (glMapBuffer is null) assert(0, `OpenGL function 'glMapBuffer' not found!`);
  return glMapBuffer(a0,a1,);
}
__gshared glbfn_glUnmapBuffer glUnmapBuffer = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glUnmapBuffer_loader(a0,);
};
private auto glbfn_glUnmapBuffer_loader (uint a0) nothrow @nogc {
  glUnmapBuffer = cast(glbfn_glUnmapBuffer)glbindGetProcAddress(`glUnmapBuffer`);
  if (glUnmapBuffer is null) assert(0, `OpenGL function 'glUnmapBuffer' not found!`);
  return glUnmapBuffer(a0,);
}
__gshared glbfn_glGetBufferParameteriv glGetBufferParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetBufferParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetBufferParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetBufferParameteriv = cast(glbfn_glGetBufferParameteriv)glbindGetProcAddress(`glGetBufferParameteriv`);
  if (glGetBufferParameteriv is null) assert(0, `OpenGL function 'glGetBufferParameteriv' not found!`);
  glGetBufferParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetBufferPointerv glGetBufferPointerv = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetBufferPointerv_loader(a0,a1,a2,);
};
private auto glbfn_glGetBufferPointerv_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetBufferPointerv = cast(glbfn_glGetBufferPointerv)glbindGetProcAddress(`glGetBufferPointerv`);
  if (glGetBufferPointerv is null) assert(0, `OpenGL function 'glGetBufferPointerv' not found!`);
  glGetBufferPointerv(a0,a1,a2,);
}
__gshared glbfn_glBlendEquationSeparate glBlendEquationSeparate = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBlendEquationSeparate_loader(a0,a1,);
};
private auto glbfn_glBlendEquationSeparate_loader (uint a0, uint a1) nothrow @nogc {
  glBlendEquationSeparate = cast(glbfn_glBlendEquationSeparate)glbindGetProcAddress(`glBlendEquationSeparate`);
  if (glBlendEquationSeparate is null) assert(0, `OpenGL function 'glBlendEquationSeparate' not found!`);
  glBlendEquationSeparate(a0,a1,);
}
__gshared glbfn_glDrawBuffers glDrawBuffers = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDrawBuffers_loader(a0,a1,);
};
private auto glbfn_glDrawBuffers_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDrawBuffers = cast(glbfn_glDrawBuffers)glbindGetProcAddress(`glDrawBuffers`);
  if (glDrawBuffers is null) assert(0, `OpenGL function 'glDrawBuffers' not found!`);
  glDrawBuffers(a0,a1,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glStencilOpSeparate glStencilOpSeparate = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glStencilOpSeparate_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glStencilOpSeparate_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glStencilOpSeparate = cast(glbfn_glStencilOpSeparate)glbindGetProcAddress(`glStencilOpSeparate`);
  if (glStencilOpSeparate is null) assert(0, `OpenGL function 'glStencilOpSeparate' not found!`);
  glStencilOpSeparate(a0,a1,a2,a3,);
}
__gshared glbfn_glStencilFuncSeparate glStencilFuncSeparate = function void (uint a0, uint a1, int a2, uint a3) nothrow @nogc {
  glbfn_glStencilFuncSeparate_loader(a0,a1,a2,a3,);
};
private auto glbfn_glStencilFuncSeparate_loader (uint a0, uint a1, int a2, uint a3) nothrow @nogc {
  glStencilFuncSeparate = cast(glbfn_glStencilFuncSeparate)glbindGetProcAddress(`glStencilFuncSeparate`);
  if (glStencilFuncSeparate is null) assert(0, `OpenGL function 'glStencilFuncSeparate' not found!`);
  glStencilFuncSeparate(a0,a1,a2,a3,);
}
__gshared glbfn_glStencilMaskSeparate glStencilMaskSeparate = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glStencilMaskSeparate_loader(a0,a1,);
};
private auto glbfn_glStencilMaskSeparate_loader (uint a0, uint a1) nothrow @nogc {
  glStencilMaskSeparate = cast(glbfn_glStencilMaskSeparate)glbindGetProcAddress(`glStencilMaskSeparate`);
  if (glStencilMaskSeparate is null) assert(0, `OpenGL function 'glStencilMaskSeparate' not found!`);
  glStencilMaskSeparate(a0,a1,);
}
__gshared glbfn_glAttachShader glAttachShader = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glAttachShader_loader(a0,a1,);
};
private auto glbfn_glAttachShader_loader (uint a0, uint a1) nothrow @nogc {
  glAttachShader = cast(glbfn_glAttachShader)glbindGetProcAddress(`glAttachShader`);
  if (glAttachShader is null) assert(0, `OpenGL function 'glAttachShader' not found!`);
  glAttachShader(a0,a1,);
}
__gshared glbfn_glBindAttribLocation glBindAttribLocation = function void (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glbfn_glBindAttribLocation_loader(a0,a1,a2,);
};
private auto glbfn_glBindAttribLocation_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glBindAttribLocation = cast(glbfn_glBindAttribLocation)glbindGetProcAddress(`glBindAttribLocation`);
  if (glBindAttribLocation is null) assert(0, `OpenGL function 'glBindAttribLocation' not found!`);
  glBindAttribLocation(a0,a1,a2,);
}
__gshared glbfn_glCompileShader glCompileShader = function void (uint a0) nothrow @nogc {
  glbfn_glCompileShader_loader(a0,);
};
private auto glbfn_glCompileShader_loader (uint a0) nothrow @nogc {
  glCompileShader = cast(glbfn_glCompileShader)glbindGetProcAddress(`glCompileShader`);
  if (glCompileShader is null) assert(0, `OpenGL function 'glCompileShader' not found!`);
  glCompileShader(a0,);
}
__gshared glbfn_glCreateProgram glCreateProgram = function uint () nothrow @nogc {
  return glbfn_glCreateProgram_loader();
};
private auto glbfn_glCreateProgram_loader () nothrow @nogc {
  glCreateProgram = cast(glbfn_glCreateProgram)glbindGetProcAddress(`glCreateProgram`);
  if (glCreateProgram is null) assert(0, `OpenGL function 'glCreateProgram' not found!`);
  return glCreateProgram();
}
__gshared glbfn_glCreateShader glCreateShader = function uint (uint a0) nothrow @nogc {
  return glbfn_glCreateShader_loader(a0,);
};
private auto glbfn_glCreateShader_loader (uint a0) nothrow @nogc {
  glCreateShader = cast(glbfn_glCreateShader)glbindGetProcAddress(`glCreateShader`);
  if (glCreateShader is null) assert(0, `OpenGL function 'glCreateShader' not found!`);
  return glCreateShader(a0,);
}
__gshared glbfn_glDeleteProgram glDeleteProgram = function void (uint a0) nothrow @nogc {
  glbfn_glDeleteProgram_loader(a0,);
};
private auto glbfn_glDeleteProgram_loader (uint a0) nothrow @nogc {
  glDeleteProgram = cast(glbfn_glDeleteProgram)glbindGetProcAddress(`glDeleteProgram`);
  if (glDeleteProgram is null) assert(0, `OpenGL function 'glDeleteProgram' not found!`);
  glDeleteProgram(a0,);
}
__gshared glbfn_glDeleteShader glDeleteShader = function void (uint a0) nothrow @nogc {
  glbfn_glDeleteShader_loader(a0,);
};
private auto glbfn_glDeleteShader_loader (uint a0) nothrow @nogc {
  glDeleteShader = cast(glbfn_glDeleteShader)glbindGetProcAddress(`glDeleteShader`);
  if (glDeleteShader is null) assert(0, `OpenGL function 'glDeleteShader' not found!`);
  glDeleteShader(a0,);
}
__gshared glbfn_glDetachShader glDetachShader = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDetachShader_loader(a0,a1,);
};
private auto glbfn_glDetachShader_loader (uint a0, uint a1) nothrow @nogc {
  glDetachShader = cast(glbfn_glDetachShader)glbindGetProcAddress(`glDetachShader`);
  if (glDetachShader is null) assert(0, `OpenGL function 'glDetachShader' not found!`);
  glDetachShader(a0,a1,);
}
__gshared glbfn_glDisableVertexAttribArray glDisableVertexAttribArray = function void (uint a0) nothrow @nogc {
  glbfn_glDisableVertexAttribArray_loader(a0,);
};
private auto glbfn_glDisableVertexAttribArray_loader (uint a0) nothrow @nogc {
  glDisableVertexAttribArray = cast(glbfn_glDisableVertexAttribArray)glbindGetProcAddress(`glDisableVertexAttribArray`);
  if (glDisableVertexAttribArray is null) assert(0, `OpenGL function 'glDisableVertexAttribArray' not found!`);
  glDisableVertexAttribArray(a0,);
}
__gshared glbfn_glEnableVertexAttribArray glEnableVertexAttribArray = function void (uint a0) nothrow @nogc {
  glbfn_glEnableVertexAttribArray_loader(a0,);
};
private auto glbfn_glEnableVertexAttribArray_loader (uint a0) nothrow @nogc {
  glEnableVertexAttribArray = cast(glbfn_glEnableVertexAttribArray)glbindGetProcAddress(`glEnableVertexAttribArray`);
  if (glEnableVertexAttribArray is null) assert(0, `OpenGL function 'glEnableVertexAttribArray' not found!`);
  glEnableVertexAttribArray(a0,);
}
__gshared glbfn_glGetActiveAttrib glGetActiveAttrib = function void (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glbfn_glGetActiveAttrib_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetActiveAttrib_loader (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glGetActiveAttrib = cast(glbfn_glGetActiveAttrib)glbindGetProcAddress(`glGetActiveAttrib`);
  if (glGetActiveAttrib is null) assert(0, `OpenGL function 'glGetActiveAttrib' not found!`);
  glGetActiveAttrib(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetActiveUniform glGetActiveUniform = function void (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glbfn_glGetActiveUniform_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetActiveUniform_loader (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glGetActiveUniform = cast(glbfn_glGetActiveUniform)glbindGetProcAddress(`glGetActiveUniform`);
  if (glGetActiveUniform is null) assert(0, `OpenGL function 'glGetActiveUniform' not found!`);
  glGetActiveUniform(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetAttachedShaders glGetAttachedShaders = function void (uint a0, int a1, int* a2, uint* a3) nothrow @nogc {
  glbfn_glGetAttachedShaders_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetAttachedShaders_loader (uint a0, int a1, int* a2, uint* a3) nothrow @nogc {
  glGetAttachedShaders = cast(glbfn_glGetAttachedShaders)glbindGetProcAddress(`glGetAttachedShaders`);
  if (glGetAttachedShaders is null) assert(0, `OpenGL function 'glGetAttachedShaders' not found!`);
  glGetAttachedShaders(a0,a1,a2,a3,);
}
__gshared glbfn_glGetAttribLocation glGetAttribLocation = function int (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glGetAttribLocation_loader(a0,a1,);
};
private auto glbfn_glGetAttribLocation_loader (uint a0, const(char)* a1) nothrow @nogc {
  glGetAttribLocation = cast(glbfn_glGetAttribLocation)glbindGetProcAddress(`glGetAttribLocation`);
  if (glGetAttribLocation is null) assert(0, `OpenGL function 'glGetAttribLocation' not found!`);
  return glGetAttribLocation(a0,a1,);
}
__gshared glbfn_glGetProgramiv glGetProgramiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetProgramiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetProgramiv = cast(glbfn_glGetProgramiv)glbindGetProcAddress(`glGetProgramiv`);
  if (glGetProgramiv is null) assert(0, `OpenGL function 'glGetProgramiv' not found!`);
  glGetProgramiv(a0,a1,a2,);
}
__gshared glbfn_glGetProgramInfoLog glGetProgramInfoLog = function void (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetProgramInfoLog_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramInfoLog_loader (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetProgramInfoLog = cast(glbfn_glGetProgramInfoLog)glbindGetProcAddress(`glGetProgramInfoLog`);
  if (glGetProgramInfoLog is null) assert(0, `OpenGL function 'glGetProgramInfoLog' not found!`);
  glGetProgramInfoLog(a0,a1,a2,a3,);
}
__gshared glbfn_glGetShaderiv glGetShaderiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetShaderiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetShaderiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetShaderiv = cast(glbfn_glGetShaderiv)glbindGetProcAddress(`glGetShaderiv`);
  if (glGetShaderiv is null) assert(0, `OpenGL function 'glGetShaderiv' not found!`);
  glGetShaderiv(a0,a1,a2,);
}
__gshared glbfn_glGetShaderInfoLog glGetShaderInfoLog = function void (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetShaderInfoLog_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetShaderInfoLog_loader (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetShaderInfoLog = cast(glbfn_glGetShaderInfoLog)glbindGetProcAddress(`glGetShaderInfoLog`);
  if (glGetShaderInfoLog is null) assert(0, `OpenGL function 'glGetShaderInfoLog' not found!`);
  glGetShaderInfoLog(a0,a1,a2,a3,);
}
__gshared glbfn_glGetShaderSource glGetShaderSource = function void (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetShaderSource_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetShaderSource_loader (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetShaderSource = cast(glbfn_glGetShaderSource)glbindGetProcAddress(`glGetShaderSource`);
  if (glGetShaderSource is null) assert(0, `OpenGL function 'glGetShaderSource' not found!`);
  glGetShaderSource(a0,a1,a2,a3,);
}
__gshared glbfn_glGetUniformLocation glGetUniformLocation = function int (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glGetUniformLocation_loader(a0,a1,);
};
private auto glbfn_glGetUniformLocation_loader (uint a0, const(char)* a1) nothrow @nogc {
  glGetUniformLocation = cast(glbfn_glGetUniformLocation)glbindGetProcAddress(`glGetUniformLocation`);
  if (glGetUniformLocation is null) assert(0, `OpenGL function 'glGetUniformLocation' not found!`);
  return glGetUniformLocation(a0,a1,);
}
__gshared glbfn_glGetUniformfv glGetUniformfv = function void (uint a0, int a1, float* a2) nothrow @nogc {
  glbfn_glGetUniformfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformfv_loader (uint a0, int a1, float* a2) nothrow @nogc {
  glGetUniformfv = cast(glbfn_glGetUniformfv)glbindGetProcAddress(`glGetUniformfv`);
  if (glGetUniformfv is null) assert(0, `OpenGL function 'glGetUniformfv' not found!`);
  glGetUniformfv(a0,a1,a2,);
}
__gshared glbfn_glGetUniformiv glGetUniformiv = function void (uint a0, int a1, int* a2) nothrow @nogc {
  glbfn_glGetUniformiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformiv_loader (uint a0, int a1, int* a2) nothrow @nogc {
  glGetUniformiv = cast(glbfn_glGetUniformiv)glbindGetProcAddress(`glGetUniformiv`);
  if (glGetUniformiv is null) assert(0, `OpenGL function 'glGetUniformiv' not found!`);
  glGetUniformiv(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribdv glGetVertexAttribdv = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetVertexAttribdv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribdv_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetVertexAttribdv = cast(glbfn_glGetVertexAttribdv)glbindGetProcAddress(`glGetVertexAttribdv`);
  if (glGetVertexAttribdv is null) assert(0, `OpenGL function 'glGetVertexAttribdv' not found!`);
  glGetVertexAttribdv(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribfv glGetVertexAttribfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetVertexAttribfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetVertexAttribfv = cast(glbfn_glGetVertexAttribfv)glbindGetProcAddress(`glGetVertexAttribfv`);
  if (glGetVertexAttribfv is null) assert(0, `OpenGL function 'glGetVertexAttribfv' not found!`);
  glGetVertexAttribfv(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribiv glGetVertexAttribiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexAttribiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexAttribiv = cast(glbfn_glGetVertexAttribiv)glbindGetProcAddress(`glGetVertexAttribiv`);
  if (glGetVertexAttribiv is null) assert(0, `OpenGL function 'glGetVertexAttribiv' not found!`);
  glGetVertexAttribiv(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribPointerv glGetVertexAttribPointerv = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetVertexAttribPointerv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribPointerv_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetVertexAttribPointerv = cast(glbfn_glGetVertexAttribPointerv)glbindGetProcAddress(`glGetVertexAttribPointerv`);
  if (glGetVertexAttribPointerv is null) assert(0, `OpenGL function 'glGetVertexAttribPointerv' not found!`);
  glGetVertexAttribPointerv(a0,a1,a2,);
}
__gshared glbfn_glIsProgram glIsProgram = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsProgram_loader(a0,);
};
private auto glbfn_glIsProgram_loader (uint a0) nothrow @nogc {
  glIsProgram = cast(glbfn_glIsProgram)glbindGetProcAddress(`glIsProgram`);
  if (glIsProgram is null) assert(0, `OpenGL function 'glIsProgram' not found!`);
  return glIsProgram(a0,);
}
__gshared glbfn_glIsShader glIsShader = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsShader_loader(a0,);
};
private auto glbfn_glIsShader_loader (uint a0) nothrow @nogc {
  glIsShader = cast(glbfn_glIsShader)glbindGetProcAddress(`glIsShader`);
  if (glIsShader is null) assert(0, `OpenGL function 'glIsShader' not found!`);
  return glIsShader(a0,);
}
__gshared glbfn_glLinkProgram glLinkProgram = function void (uint a0) nothrow @nogc {
  glbfn_glLinkProgram_loader(a0,);
};
private auto glbfn_glLinkProgram_loader (uint a0) nothrow @nogc {
  glLinkProgram = cast(glbfn_glLinkProgram)glbindGetProcAddress(`glLinkProgram`);
  if (glLinkProgram is null) assert(0, `OpenGL function 'glLinkProgram' not found!`);
  glLinkProgram(a0,);
}
__gshared glbfn_glShaderSource glShaderSource = function void (uint a0, int a1, const(char*)* a2, const(int)* a3) nothrow @nogc {
  glbfn_glShaderSource_loader(a0,a1,a2,a3,);
};
private auto glbfn_glShaderSource_loader (uint a0, int a1, const(char*)* a2, const(int)* a3) nothrow @nogc {
  glShaderSource = cast(glbfn_glShaderSource)glbindGetProcAddress(`glShaderSource`);
  if (glShaderSource is null) assert(0, `OpenGL function 'glShaderSource' not found!`);
  glShaderSource(a0,a1,a2,a3,);
}
__gshared glbfn_glUseProgram glUseProgram = function void (uint a0) nothrow @nogc {
  glbfn_glUseProgram_loader(a0,);
};
private auto glbfn_glUseProgram_loader (uint a0) nothrow @nogc {
  glUseProgram = cast(glbfn_glUseProgram)glbindGetProcAddress(`glUseProgram`);
  if (glUseProgram is null) assert(0, `OpenGL function 'glUseProgram' not found!`);
  glUseProgram(a0,);
}
__gshared glbfn_glUniform1f glUniform1f = function void (int a0, float a1) nothrow @nogc {
  glbfn_glUniform1f_loader(a0,a1,);
};
private auto glbfn_glUniform1f_loader (int a0, float a1) nothrow @nogc {
  glUniform1f = cast(glbfn_glUniform1f)glbindGetProcAddress(`glUniform1f`);
  if (glUniform1f is null) assert(0, `OpenGL function 'glUniform1f' not found!`);
  glUniform1f(a0,a1,);
}
__gshared glbfn_glUniform2f glUniform2f = function void (int a0, float a1, float a2) nothrow @nogc {
  glbfn_glUniform2f_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2f_loader (int a0, float a1, float a2) nothrow @nogc {
  glUniform2f = cast(glbfn_glUniform2f)glbindGetProcAddress(`glUniform2f`);
  if (glUniform2f is null) assert(0, `OpenGL function 'glUniform2f' not found!`);
  glUniform2f(a0,a1,a2,);
}
__gshared glbfn_glUniform3f glUniform3f = function void (int a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glUniform3f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3f_loader (int a0, float a1, float a2, float a3) nothrow @nogc {
  glUniform3f = cast(glbfn_glUniform3f)glbindGetProcAddress(`glUniform3f`);
  if (glUniform3f is null) assert(0, `OpenGL function 'glUniform3f' not found!`);
  glUniform3f(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4f glUniform4f = function void (int a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glUniform4f_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4f_loader (int a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glUniform4f = cast(glbfn_glUniform4f)glbindGetProcAddress(`glUniform4f`);
  if (glUniform4f is null) assert(0, `OpenGL function 'glUniform4f' not found!`);
  glUniform4f(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1i glUniform1i = function void (int a0, int a1) nothrow @nogc {
  glbfn_glUniform1i_loader(a0,a1,);
};
private auto glbfn_glUniform1i_loader (int a0, int a1) nothrow @nogc {
  glUniform1i = cast(glbfn_glUniform1i)glbindGetProcAddress(`glUniform1i`);
  if (glUniform1i is null) assert(0, `OpenGL function 'glUniform1i' not found!`);
  glUniform1i(a0,a1,);
}
__gshared glbfn_glUniform2i glUniform2i = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glUniform2i_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2i_loader (int a0, int a1, int a2) nothrow @nogc {
  glUniform2i = cast(glbfn_glUniform2i)glbindGetProcAddress(`glUniform2i`);
  if (glUniform2i is null) assert(0, `OpenGL function 'glUniform2i' not found!`);
  glUniform2i(a0,a1,a2,);
}
__gshared glbfn_glUniform3i glUniform3i = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glUniform3i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3i_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glUniform3i = cast(glbfn_glUniform3i)glbindGetProcAddress(`glUniform3i`);
  if (glUniform3i is null) assert(0, `OpenGL function 'glUniform3i' not found!`);
  glUniform3i(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4i glUniform4i = function void (int a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glUniform4i_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4i_loader (int a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glUniform4i = cast(glbfn_glUniform4i)glbindGetProcAddress(`glUniform4i`);
  if (glUniform4i is null) assert(0, `OpenGL function 'glUniform4i' not found!`);
  glUniform4i(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1fv glUniform1fv = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform1fv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1fv_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform1fv = cast(glbfn_glUniform1fv)glbindGetProcAddress(`glUniform1fv`);
  if (glUniform1fv is null) assert(0, `OpenGL function 'glUniform1fv' not found!`);
  glUniform1fv(a0,a1,a2,);
}
__gshared glbfn_glUniform2fv glUniform2fv = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform2fv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2fv_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform2fv = cast(glbfn_glUniform2fv)glbindGetProcAddress(`glUniform2fv`);
  if (glUniform2fv is null) assert(0, `OpenGL function 'glUniform2fv' not found!`);
  glUniform2fv(a0,a1,a2,);
}
__gshared glbfn_glUniform3fv glUniform3fv = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform3fv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3fv_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform3fv = cast(glbfn_glUniform3fv)glbindGetProcAddress(`glUniform3fv`);
  if (glUniform3fv is null) assert(0, `OpenGL function 'glUniform3fv' not found!`);
  glUniform3fv(a0,a1,a2,);
}
__gshared glbfn_glUniform4fv glUniform4fv = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform4fv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4fv_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform4fv = cast(glbfn_glUniform4fv)glbindGetProcAddress(`glUniform4fv`);
  if (glUniform4fv is null) assert(0, `OpenGL function 'glUniform4fv' not found!`);
  glUniform4fv(a0,a1,a2,);
}
__gshared glbfn_glUniform1iv glUniform1iv = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform1iv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1iv_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform1iv = cast(glbfn_glUniform1iv)glbindGetProcAddress(`glUniform1iv`);
  if (glUniform1iv is null) assert(0, `OpenGL function 'glUniform1iv' not found!`);
  glUniform1iv(a0,a1,a2,);
}
__gshared glbfn_glUniform2iv glUniform2iv = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform2iv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2iv_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform2iv = cast(glbfn_glUniform2iv)glbindGetProcAddress(`glUniform2iv`);
  if (glUniform2iv is null) assert(0, `OpenGL function 'glUniform2iv' not found!`);
  glUniform2iv(a0,a1,a2,);
}
__gshared glbfn_glUniform3iv glUniform3iv = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform3iv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3iv_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform3iv = cast(glbfn_glUniform3iv)glbindGetProcAddress(`glUniform3iv`);
  if (glUniform3iv is null) assert(0, `OpenGL function 'glUniform3iv' not found!`);
  glUniform3iv(a0,a1,a2,);
}
__gshared glbfn_glUniform4iv glUniform4iv = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform4iv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4iv_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform4iv = cast(glbfn_glUniform4iv)glbindGetProcAddress(`glUniform4iv`);
  if (glUniform4iv is null) assert(0, `OpenGL function 'glUniform4iv' not found!`);
  glUniform4iv(a0,a1,a2,);
}
__gshared glbfn_glUniformMatrix2fv glUniformMatrix2fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix2fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix2fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix2fv = cast(glbfn_glUniformMatrix2fv)glbindGetProcAddress(`glUniformMatrix2fv`);
  if (glUniformMatrix2fv is null) assert(0, `OpenGL function 'glUniformMatrix2fv' not found!`);
  glUniformMatrix2fv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix3fv glUniformMatrix3fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix3fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix3fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix3fv = cast(glbfn_glUniformMatrix3fv)glbindGetProcAddress(`glUniformMatrix3fv`);
  if (glUniformMatrix3fv is null) assert(0, `OpenGL function 'glUniformMatrix3fv' not found!`);
  glUniformMatrix3fv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix4fv glUniformMatrix4fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix4fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix4fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix4fv = cast(glbfn_glUniformMatrix4fv)glbindGetProcAddress(`glUniformMatrix4fv`);
  if (glUniformMatrix4fv is null) assert(0, `OpenGL function 'glUniformMatrix4fv' not found!`);
  glUniformMatrix4fv(a0,a1,a2,a3,);
}
__gshared glbfn_glValidateProgram glValidateProgram = function void (uint a0) nothrow @nogc {
  glbfn_glValidateProgram_loader(a0,);
};
private auto glbfn_glValidateProgram_loader (uint a0) nothrow @nogc {
  glValidateProgram = cast(glbfn_glValidateProgram)glbindGetProcAddress(`glValidateProgram`);
  if (glValidateProgram is null) assert(0, `OpenGL function 'glValidateProgram' not found!`);
  glValidateProgram(a0,);
}
__gshared glbfn_glVertexAttrib1d glVertexAttrib1d = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glVertexAttrib1d_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1d_loader (uint a0, double a1) nothrow @nogc {
  glVertexAttrib1d = cast(glbfn_glVertexAttrib1d)glbindGetProcAddress(`glVertexAttrib1d`);
  if (glVertexAttrib1d is null) assert(0, `OpenGL function 'glVertexAttrib1d' not found!`);
  glVertexAttrib1d(a0,a1,);
}
__gshared glbfn_glVertexAttrib1dv glVertexAttrib1dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib1dv = cast(glbfn_glVertexAttrib1dv)glbindGetProcAddress(`glVertexAttrib1dv`);
  if (glVertexAttrib1dv is null) assert(0, `OpenGL function 'glVertexAttrib1dv' not found!`);
  glVertexAttrib1dv(a0,a1,);
}
__gshared glbfn_glVertexAttrib1f glVertexAttrib1f = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glVertexAttrib1f_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1f_loader (uint a0, float a1) nothrow @nogc {
  glVertexAttrib1f = cast(glbfn_glVertexAttrib1f)glbindGetProcAddress(`glVertexAttrib1f`);
  if (glVertexAttrib1f is null) assert(0, `OpenGL function 'glVertexAttrib1f' not found!`);
  glVertexAttrib1f(a0,a1,);
}
__gshared glbfn_glVertexAttrib1fv glVertexAttrib1fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1fv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib1fv = cast(glbfn_glVertexAttrib1fv)glbindGetProcAddress(`glVertexAttrib1fv`);
  if (glVertexAttrib1fv is null) assert(0, `OpenGL function 'glVertexAttrib1fv' not found!`);
  glVertexAttrib1fv(a0,a1,);
}
__gshared glbfn_glVertexAttrib1s glVertexAttrib1s = function void (uint a0, short a1) nothrow @nogc {
  glbfn_glVertexAttrib1s_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1s_loader (uint a0, short a1) nothrow @nogc {
  glVertexAttrib1s = cast(glbfn_glVertexAttrib1s)glbindGetProcAddress(`glVertexAttrib1s`);
  if (glVertexAttrib1s is null) assert(0, `OpenGL function 'glVertexAttrib1s' not found!`);
  glVertexAttrib1s(a0,a1,);
}
__gshared glbfn_glVertexAttrib1sv glVertexAttrib1sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1sv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib1sv = cast(glbfn_glVertexAttrib1sv)glbindGetProcAddress(`glVertexAttrib1sv`);
  if (glVertexAttrib1sv is null) assert(0, `OpenGL function 'glVertexAttrib1sv' not found!`);
  glVertexAttrib1sv(a0,a1,);
}
__gshared glbfn_glVertexAttrib2d glVertexAttrib2d = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glVertexAttrib2d_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2d_loader (uint a0, double a1, double a2) nothrow @nogc {
  glVertexAttrib2d = cast(glbfn_glVertexAttrib2d)glbindGetProcAddress(`glVertexAttrib2d`);
  if (glVertexAttrib2d is null) assert(0, `OpenGL function 'glVertexAttrib2d' not found!`);
  glVertexAttrib2d(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2dv glVertexAttrib2dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib2dv = cast(glbfn_glVertexAttrib2dv)glbindGetProcAddress(`glVertexAttrib2dv`);
  if (glVertexAttrib2dv is null) assert(0, `OpenGL function 'glVertexAttrib2dv' not found!`);
  glVertexAttrib2dv(a0,a1,);
}
__gshared glbfn_glVertexAttrib2f glVertexAttrib2f = function void (uint a0, float a1, float a2) nothrow @nogc {
  glbfn_glVertexAttrib2f_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2f_loader (uint a0, float a1, float a2) nothrow @nogc {
  glVertexAttrib2f = cast(glbfn_glVertexAttrib2f)glbindGetProcAddress(`glVertexAttrib2f`);
  if (glVertexAttrib2f is null) assert(0, `OpenGL function 'glVertexAttrib2f' not found!`);
  glVertexAttrib2f(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2fv glVertexAttrib2fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2fv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib2fv = cast(glbfn_glVertexAttrib2fv)glbindGetProcAddress(`glVertexAttrib2fv`);
  if (glVertexAttrib2fv is null) assert(0, `OpenGL function 'glVertexAttrib2fv' not found!`);
  glVertexAttrib2fv(a0,a1,);
}
__gshared glbfn_glVertexAttrib2s glVertexAttrib2s = function void (uint a0, short a1, short a2) nothrow @nogc {
  glbfn_glVertexAttrib2s_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2s_loader (uint a0, short a1, short a2) nothrow @nogc {
  glVertexAttrib2s = cast(glbfn_glVertexAttrib2s)glbindGetProcAddress(`glVertexAttrib2s`);
  if (glVertexAttrib2s is null) assert(0, `OpenGL function 'glVertexAttrib2s' not found!`);
  glVertexAttrib2s(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2sv glVertexAttrib2sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2sv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib2sv = cast(glbfn_glVertexAttrib2sv)glbindGetProcAddress(`glVertexAttrib2sv`);
  if (glVertexAttrib2sv is null) assert(0, `OpenGL function 'glVertexAttrib2sv' not found!`);
  glVertexAttrib2sv(a0,a1,);
}
__gshared glbfn_glVertexAttrib3d glVertexAttrib3d = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glVertexAttrib3d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3d_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glVertexAttrib3d = cast(glbfn_glVertexAttrib3d)glbindGetProcAddress(`glVertexAttrib3d`);
  if (glVertexAttrib3d is null) assert(0, `OpenGL function 'glVertexAttrib3d' not found!`);
  glVertexAttrib3d(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3dv glVertexAttrib3dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib3dv = cast(glbfn_glVertexAttrib3dv)glbindGetProcAddress(`glVertexAttrib3dv`);
  if (glVertexAttrib3dv is null) assert(0, `OpenGL function 'glVertexAttrib3dv' not found!`);
  glVertexAttrib3dv(a0,a1,);
}
__gshared glbfn_glVertexAttrib3f glVertexAttrib3f = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glVertexAttrib3f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3f_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glVertexAttrib3f = cast(glbfn_glVertexAttrib3f)glbindGetProcAddress(`glVertexAttrib3f`);
  if (glVertexAttrib3f is null) assert(0, `OpenGL function 'glVertexAttrib3f' not found!`);
  glVertexAttrib3f(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3fv glVertexAttrib3fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3fv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib3fv = cast(glbfn_glVertexAttrib3fv)glbindGetProcAddress(`glVertexAttrib3fv`);
  if (glVertexAttrib3fv is null) assert(0, `OpenGL function 'glVertexAttrib3fv' not found!`);
  glVertexAttrib3fv(a0,a1,);
}
__gshared glbfn_glVertexAttrib3s glVertexAttrib3s = function void (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glVertexAttrib3s_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3s_loader (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glVertexAttrib3s = cast(glbfn_glVertexAttrib3s)glbindGetProcAddress(`glVertexAttrib3s`);
  if (glVertexAttrib3s is null) assert(0, `OpenGL function 'glVertexAttrib3s' not found!`);
  glVertexAttrib3s(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3sv glVertexAttrib3sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3sv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib3sv = cast(glbfn_glVertexAttrib3sv)glbindGetProcAddress(`glVertexAttrib3sv`);
  if (glVertexAttrib3sv is null) assert(0, `OpenGL function 'glVertexAttrib3sv' not found!`);
  glVertexAttrib3sv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4Nbv glVertexAttrib4Nbv = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4Nbv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4Nbv_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glVertexAttrib4Nbv = cast(glbfn_glVertexAttrib4Nbv)glbindGetProcAddress(`glVertexAttrib4Nbv`);
  if (glVertexAttrib4Nbv is null) assert(0, `OpenGL function 'glVertexAttrib4Nbv' not found!`);
  glVertexAttrib4Nbv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4Niv glVertexAttrib4Niv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4Niv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4Niv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttrib4Niv = cast(glbfn_glVertexAttrib4Niv)glbindGetProcAddress(`glVertexAttrib4Niv`);
  if (glVertexAttrib4Niv is null) assert(0, `OpenGL function 'glVertexAttrib4Niv' not found!`);
  glVertexAttrib4Niv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4Nsv glVertexAttrib4Nsv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4Nsv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4Nsv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib4Nsv = cast(glbfn_glVertexAttrib4Nsv)glbindGetProcAddress(`glVertexAttrib4Nsv`);
  if (glVertexAttrib4Nsv is null) assert(0, `OpenGL function 'glVertexAttrib4Nsv' not found!`);
  glVertexAttrib4Nsv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4Nub glVertexAttrib4Nub = function void (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glbfn_glVertexAttrib4Nub_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4Nub_loader (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glVertexAttrib4Nub = cast(glbfn_glVertexAttrib4Nub)glbindGetProcAddress(`glVertexAttrib4Nub`);
  if (glVertexAttrib4Nub is null) assert(0, `OpenGL function 'glVertexAttrib4Nub' not found!`);
  glVertexAttrib4Nub(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4Nubv glVertexAttrib4Nubv = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4Nubv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4Nubv_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVertexAttrib4Nubv = cast(glbfn_glVertexAttrib4Nubv)glbindGetProcAddress(`glVertexAttrib4Nubv`);
  if (glVertexAttrib4Nubv is null) assert(0, `OpenGL function 'glVertexAttrib4Nubv' not found!`);
  glVertexAttrib4Nubv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4Nuiv glVertexAttrib4Nuiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4Nuiv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4Nuiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttrib4Nuiv = cast(glbfn_glVertexAttrib4Nuiv)glbindGetProcAddress(`glVertexAttrib4Nuiv`);
  if (glVertexAttrib4Nuiv is null) assert(0, `OpenGL function 'glVertexAttrib4Nuiv' not found!`);
  glVertexAttrib4Nuiv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4Nusv glVertexAttrib4Nusv = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4Nusv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4Nusv_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib4Nusv = cast(glbfn_glVertexAttrib4Nusv)glbindGetProcAddress(`glVertexAttrib4Nusv`);
  if (glVertexAttrib4Nusv is null) assert(0, `OpenGL function 'glVertexAttrib4Nusv' not found!`);
  glVertexAttrib4Nusv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4bv glVertexAttrib4bv = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4bv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4bv_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glVertexAttrib4bv = cast(glbfn_glVertexAttrib4bv)glbindGetProcAddress(`glVertexAttrib4bv`);
  if (glVertexAttrib4bv is null) assert(0, `OpenGL function 'glVertexAttrib4bv' not found!`);
  glVertexAttrib4bv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4d glVertexAttrib4d = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glVertexAttrib4d_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4d_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glVertexAttrib4d = cast(glbfn_glVertexAttrib4d)glbindGetProcAddress(`glVertexAttrib4d`);
  if (glVertexAttrib4d is null) assert(0, `OpenGL function 'glVertexAttrib4d' not found!`);
  glVertexAttrib4d(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4dv glVertexAttrib4dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib4dv = cast(glbfn_glVertexAttrib4dv)glbindGetProcAddress(`glVertexAttrib4dv`);
  if (glVertexAttrib4dv is null) assert(0, `OpenGL function 'glVertexAttrib4dv' not found!`);
  glVertexAttrib4dv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4f glVertexAttrib4f = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glVertexAttrib4f_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4f_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glVertexAttrib4f = cast(glbfn_glVertexAttrib4f)glbindGetProcAddress(`glVertexAttrib4f`);
  if (glVertexAttrib4f is null) assert(0, `OpenGL function 'glVertexAttrib4f' not found!`);
  glVertexAttrib4f(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4fv glVertexAttrib4fv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4fv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4fv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib4fv = cast(glbfn_glVertexAttrib4fv)glbindGetProcAddress(`glVertexAttrib4fv`);
  if (glVertexAttrib4fv is null) assert(0, `OpenGL function 'glVertexAttrib4fv' not found!`);
  glVertexAttrib4fv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4iv glVertexAttrib4iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4iv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttrib4iv = cast(glbfn_glVertexAttrib4iv)glbindGetProcAddress(`glVertexAttrib4iv`);
  if (glVertexAttrib4iv is null) assert(0, `OpenGL function 'glVertexAttrib4iv' not found!`);
  glVertexAttrib4iv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4s glVertexAttrib4s = function void (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glbfn_glVertexAttrib4s_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4s_loader (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glVertexAttrib4s = cast(glbfn_glVertexAttrib4s)glbindGetProcAddress(`glVertexAttrib4s`);
  if (glVertexAttrib4s is null) assert(0, `OpenGL function 'glVertexAttrib4s' not found!`);
  glVertexAttrib4s(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4sv glVertexAttrib4sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4sv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib4sv = cast(glbfn_glVertexAttrib4sv)glbindGetProcAddress(`glVertexAttrib4sv`);
  if (glVertexAttrib4sv is null) assert(0, `OpenGL function 'glVertexAttrib4sv' not found!`);
  glVertexAttrib4sv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4ubv glVertexAttrib4ubv = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4ubv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4ubv_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVertexAttrib4ubv = cast(glbfn_glVertexAttrib4ubv)glbindGetProcAddress(`glVertexAttrib4ubv`);
  if (glVertexAttrib4ubv is null) assert(0, `OpenGL function 'glVertexAttrib4ubv' not found!`);
  glVertexAttrib4ubv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4uiv glVertexAttrib4uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4uiv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttrib4uiv = cast(glbfn_glVertexAttrib4uiv)glbindGetProcAddress(`glVertexAttrib4uiv`);
  if (glVertexAttrib4uiv is null) assert(0, `OpenGL function 'glVertexAttrib4uiv' not found!`);
  glVertexAttrib4uiv(a0,a1,);
}
__gshared glbfn_glVertexAttrib4usv glVertexAttrib4usv = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4usv_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4usv_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib4usv = cast(glbfn_glVertexAttrib4usv)glbindGetProcAddress(`glVertexAttrib4usv`);
  if (glVertexAttrib4usv is null) assert(0, `OpenGL function 'glVertexAttrib4usv' not found!`);
  glVertexAttrib4usv(a0,a1,);
}
__gshared glbfn_glVertexAttribPointer glVertexAttribPointer = function void (uint a0, int a1, uint a2, ubyte a3, int a4, const(void)* a5) nothrow @nogc {
  glbfn_glVertexAttribPointer_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexAttribPointer_loader (uint a0, int a1, uint a2, ubyte a3, int a4, const(void)* a5) nothrow @nogc {
  glVertexAttribPointer = cast(glbfn_glVertexAttribPointer)glbindGetProcAddress(`glVertexAttribPointer`);
  if (glVertexAttribPointer is null) assert(0, `OpenGL function 'glVertexAttribPointer' not found!`);
  glVertexAttribPointer(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glUniformMatrix2x3fv glUniformMatrix2x3fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix2x3fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix2x3fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix2x3fv = cast(glbfn_glUniformMatrix2x3fv)glbindGetProcAddress(`glUniformMatrix2x3fv`);
  if (glUniformMatrix2x3fv is null) assert(0, `OpenGL function 'glUniformMatrix2x3fv' not found!`);
  glUniformMatrix2x3fv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix3x2fv glUniformMatrix3x2fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix3x2fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix3x2fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix3x2fv = cast(glbfn_glUniformMatrix3x2fv)glbindGetProcAddress(`glUniformMatrix3x2fv`);
  if (glUniformMatrix3x2fv is null) assert(0, `OpenGL function 'glUniformMatrix3x2fv' not found!`);
  glUniformMatrix3x2fv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix2x4fv glUniformMatrix2x4fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix2x4fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix2x4fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix2x4fv = cast(glbfn_glUniformMatrix2x4fv)glbindGetProcAddress(`glUniformMatrix2x4fv`);
  if (glUniformMatrix2x4fv is null) assert(0, `OpenGL function 'glUniformMatrix2x4fv' not found!`);
  glUniformMatrix2x4fv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix4x2fv glUniformMatrix4x2fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix4x2fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix4x2fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix4x2fv = cast(glbfn_glUniformMatrix4x2fv)glbindGetProcAddress(`glUniformMatrix4x2fv`);
  if (glUniformMatrix4x2fv is null) assert(0, `OpenGL function 'glUniformMatrix4x2fv' not found!`);
  glUniformMatrix4x2fv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix3x4fv glUniformMatrix3x4fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix3x4fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix3x4fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix3x4fv = cast(glbfn_glUniformMatrix3x4fv)glbindGetProcAddress(`glUniformMatrix3x4fv`);
  if (glUniformMatrix3x4fv is null) assert(0, `OpenGL function 'glUniformMatrix3x4fv' not found!`);
  glUniformMatrix3x4fv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix4x3fv glUniformMatrix4x3fv = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix4x3fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix4x3fv_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix4x3fv = cast(glbfn_glUniformMatrix4x3fv)glbindGetProcAddress(`glUniformMatrix4x3fv`);
  if (glUniformMatrix4x3fv is null) assert(0, `OpenGL function 'glUniformMatrix4x3fv' not found!`);
  glUniformMatrix4x3fv(a0,a1,a2,a3,);
}
__gshared glbfn_glColorMaski glColorMaski = function void (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glbfn_glColorMaski_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glColorMaski_loader (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glColorMaski = cast(glbfn_glColorMaski)glbindGetProcAddress(`glColorMaski`);
  if (glColorMaski is null) assert(0, `OpenGL function 'glColorMaski' not found!`);
  glColorMaski(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetBooleani_v glGetBooleani_v = function void (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glbfn_glGetBooleani_v_loader(a0,a1,a2,);
};
private auto glbfn_glGetBooleani_v_loader (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glGetBooleani_v = cast(glbfn_glGetBooleani_v)glbindGetProcAddress(`glGetBooleani_v`);
  if (glGetBooleani_v is null) assert(0, `OpenGL function 'glGetBooleani_v' not found!`);
  glGetBooleani_v(a0,a1,a2,);
}
__gshared glbfn_glGetIntegeri_v glGetIntegeri_v = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetIntegeri_v_loader(a0,a1,a2,);
};
private auto glbfn_glGetIntegeri_v_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetIntegeri_v = cast(glbfn_glGetIntegeri_v)glbindGetProcAddress(`glGetIntegeri_v`);
  if (glGetIntegeri_v is null) assert(0, `OpenGL function 'glGetIntegeri_v' not found!`);
  glGetIntegeri_v(a0,a1,a2,);
}
__gshared glbfn_glEnablei glEnablei = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnablei_loader(a0,a1,);
};
private auto glbfn_glEnablei_loader (uint a0, uint a1) nothrow @nogc {
  glEnablei = cast(glbfn_glEnablei)glbindGetProcAddress(`glEnablei`);
  if (glEnablei is null) assert(0, `OpenGL function 'glEnablei' not found!`);
  glEnablei(a0,a1,);
}
__gshared glbfn_glDisablei glDisablei = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisablei_loader(a0,a1,);
};
private auto glbfn_glDisablei_loader (uint a0, uint a1) nothrow @nogc {
  glDisablei = cast(glbfn_glDisablei)glbindGetProcAddress(`glDisablei`);
  if (glDisablei is null) assert(0, `OpenGL function 'glDisablei' not found!`);
  glDisablei(a0,a1,);
}
__gshared glbfn_glIsEnabledi glIsEnabledi = function ubyte (uint a0, uint a1) nothrow @nogc {
  return glbfn_glIsEnabledi_loader(a0,a1,);
};
private auto glbfn_glIsEnabledi_loader (uint a0, uint a1) nothrow @nogc {
  glIsEnabledi = cast(glbfn_glIsEnabledi)glbindGetProcAddress(`glIsEnabledi`);
  if (glIsEnabledi is null) assert(0, `OpenGL function 'glIsEnabledi' not found!`);
  return glIsEnabledi(a0,a1,);
}
__gshared glbfn_glBeginTransformFeedback glBeginTransformFeedback = function void (uint a0) nothrow @nogc {
  glbfn_glBeginTransformFeedback_loader(a0,);
};
private auto glbfn_glBeginTransformFeedback_loader (uint a0) nothrow @nogc {
  glBeginTransformFeedback = cast(glbfn_glBeginTransformFeedback)glbindGetProcAddress(`glBeginTransformFeedback`);
  if (glBeginTransformFeedback is null) assert(0, `OpenGL function 'glBeginTransformFeedback' not found!`);
  glBeginTransformFeedback(a0,);
}
__gshared glbfn_glEndTransformFeedback glEndTransformFeedback = function void () nothrow @nogc {
  glbfn_glEndTransformFeedback_loader();
};
private auto glbfn_glEndTransformFeedback_loader () nothrow @nogc {
  glEndTransformFeedback = cast(glbfn_glEndTransformFeedback)glbindGetProcAddress(`glEndTransformFeedback`);
  if (glEndTransformFeedback is null) assert(0, `OpenGL function 'glEndTransformFeedback' not found!`);
  glEndTransformFeedback();
}
static if (size_t.sizeof == 4)
__gshared glbfn_glBindBufferRange glBindBufferRange = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glBindBufferRange_loader(a0,a1,a2,a3,a4,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glBindBufferRange_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glBindBufferRange = cast(glbfn_glBindBufferRange)glbindGetProcAddress(`glBindBufferRange`);
  if (glBindBufferRange is null) assert(0, `OpenGL function 'glBindBufferRange' not found!`);
  glBindBufferRange(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBindBufferBase glBindBufferBase = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBindBufferBase_loader(a0,a1,a2,);
};
private auto glbfn_glBindBufferBase_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBindBufferBase = cast(glbfn_glBindBufferBase)glbindGetProcAddress(`glBindBufferBase`);
  if (glBindBufferBase is null) assert(0, `OpenGL function 'glBindBufferBase' not found!`);
  glBindBufferBase(a0,a1,a2,);
}
__gshared glbfn_glTransformFeedbackVaryings glTransformFeedbackVaryings = function void (uint a0, int a1, const(char*)* a2, uint a3) nothrow @nogc {
  glbfn_glTransformFeedbackVaryings_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTransformFeedbackVaryings_loader (uint a0, int a1, const(char*)* a2, uint a3) nothrow @nogc {
  glTransformFeedbackVaryings = cast(glbfn_glTransformFeedbackVaryings)glbindGetProcAddress(`glTransformFeedbackVaryings`);
  if (glTransformFeedbackVaryings is null) assert(0, `OpenGL function 'glTransformFeedbackVaryings' not found!`);
  glTransformFeedbackVaryings(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTransformFeedbackVarying glGetTransformFeedbackVarying = function void (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glbfn_glGetTransformFeedbackVarying_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetTransformFeedbackVarying_loader (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glGetTransformFeedbackVarying = cast(glbfn_glGetTransformFeedbackVarying)glbindGetProcAddress(`glGetTransformFeedbackVarying`);
  if (glGetTransformFeedbackVarying is null) assert(0, `OpenGL function 'glGetTransformFeedbackVarying' not found!`);
  glGetTransformFeedbackVarying(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glClampColor glClampColor = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glClampColor_loader(a0,a1,);
};
private auto glbfn_glClampColor_loader (uint a0, uint a1) nothrow @nogc {
  glClampColor = cast(glbfn_glClampColor)glbindGetProcAddress(`glClampColor`);
  if (glClampColor is null) assert(0, `OpenGL function 'glClampColor' not found!`);
  glClampColor(a0,a1,);
}
__gshared glbfn_glBeginConditionalRender glBeginConditionalRender = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBeginConditionalRender_loader(a0,a1,);
};
private auto glbfn_glBeginConditionalRender_loader (uint a0, uint a1) nothrow @nogc {
  glBeginConditionalRender = cast(glbfn_glBeginConditionalRender)glbindGetProcAddress(`glBeginConditionalRender`);
  if (glBeginConditionalRender is null) assert(0, `OpenGL function 'glBeginConditionalRender' not found!`);
  glBeginConditionalRender(a0,a1,);
}
__gshared glbfn_glEndConditionalRender glEndConditionalRender = function void () nothrow @nogc {
  glbfn_glEndConditionalRender_loader();
};
private auto glbfn_glEndConditionalRender_loader () nothrow @nogc {
  glEndConditionalRender = cast(glbfn_glEndConditionalRender)glbindGetProcAddress(`glEndConditionalRender`);
  if (glEndConditionalRender is null) assert(0, `OpenGL function 'glEndConditionalRender' not found!`);
  glEndConditionalRender();
}
__gshared glbfn_glVertexAttribIPointer glVertexAttribIPointer = function void (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glVertexAttribIPointer_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribIPointer_loader (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glVertexAttribIPointer = cast(glbfn_glVertexAttribIPointer)glbindGetProcAddress(`glVertexAttribIPointer`);
  if (glVertexAttribIPointer is null) assert(0, `OpenGL function 'glVertexAttribIPointer' not found!`);
  glVertexAttribIPointer(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetVertexAttribIiv glGetVertexAttribIiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexAttribIiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribIiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexAttribIiv = cast(glbfn_glGetVertexAttribIiv)glbindGetProcAddress(`glGetVertexAttribIiv`);
  if (glGetVertexAttribIiv is null) assert(0, `OpenGL function 'glGetVertexAttribIiv' not found!`);
  glGetVertexAttribIiv(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribIuiv glGetVertexAttribIuiv = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetVertexAttribIuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribIuiv_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetVertexAttribIuiv = cast(glbfn_glGetVertexAttribIuiv)glbindGetProcAddress(`glGetVertexAttribIuiv`);
  if (glGetVertexAttribIuiv is null) assert(0, `OpenGL function 'glGetVertexAttribIuiv' not found!`);
  glGetVertexAttribIuiv(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribI1i glVertexAttribI1i = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glVertexAttribI1i_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1i_loader (uint a0, int a1) nothrow @nogc {
  glVertexAttribI1i = cast(glbfn_glVertexAttribI1i)glbindGetProcAddress(`glVertexAttribI1i`);
  if (glVertexAttribI1i is null) assert(0, `OpenGL function 'glVertexAttribI1i' not found!`);
  glVertexAttribI1i(a0,a1,);
}
__gshared glbfn_glVertexAttribI2i glVertexAttribI2i = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glVertexAttribI2i_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribI2i_loader (uint a0, int a1, int a2) nothrow @nogc {
  glVertexAttribI2i = cast(glbfn_glVertexAttribI2i)glbindGetProcAddress(`glVertexAttribI2i`);
  if (glVertexAttribI2i is null) assert(0, `OpenGL function 'glVertexAttribI2i' not found!`);
  glVertexAttribI2i(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribI3i glVertexAttribI3i = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glVertexAttribI3i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribI3i_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glVertexAttribI3i = cast(glbfn_glVertexAttribI3i)glbindGetProcAddress(`glVertexAttribI3i`);
  if (glVertexAttribI3i is null) assert(0, `OpenGL function 'glVertexAttribI3i' not found!`);
  glVertexAttribI3i(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribI4i glVertexAttribI4i = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexAttribI4i_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribI4i_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glVertexAttribI4i = cast(glbfn_glVertexAttribI4i)glbindGetProcAddress(`glVertexAttribI4i`);
  if (glVertexAttribI4i is null) assert(0, `OpenGL function 'glVertexAttribI4i' not found!`);
  glVertexAttribI4i(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribI1ui glVertexAttribI1ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexAttribI1ui_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1ui_loader (uint a0, uint a1) nothrow @nogc {
  glVertexAttribI1ui = cast(glbfn_glVertexAttribI1ui)glbindGetProcAddress(`glVertexAttribI1ui`);
  if (glVertexAttribI1ui is null) assert(0, `OpenGL function 'glVertexAttribI1ui' not found!`);
  glVertexAttribI1ui(a0,a1,);
}
__gshared glbfn_glVertexAttribI2ui glVertexAttribI2ui = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glVertexAttribI2ui_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribI2ui_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glVertexAttribI2ui = cast(glbfn_glVertexAttribI2ui)glbindGetProcAddress(`glVertexAttribI2ui`);
  if (glVertexAttribI2ui is null) assert(0, `OpenGL function 'glVertexAttribI2ui' not found!`);
  glVertexAttribI2ui(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribI3ui glVertexAttribI3ui = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribI3ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribI3ui_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glVertexAttribI3ui = cast(glbfn_glVertexAttribI3ui)glbindGetProcAddress(`glVertexAttribI3ui`);
  if (glVertexAttribI3ui is null) assert(0, `OpenGL function 'glVertexAttribI3ui' not found!`);
  glVertexAttribI3ui(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribI4ui glVertexAttribI4ui = function void (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glVertexAttribI4ui_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribI4ui_loader (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glVertexAttribI4ui = cast(glbfn_glVertexAttribI4ui)glbindGetProcAddress(`glVertexAttribI4ui`);
  if (glVertexAttribI4ui is null) assert(0, `OpenGL function 'glVertexAttribI4ui' not found!`);
  glVertexAttribI4ui(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribI1iv glVertexAttribI1iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI1iv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI1iv = cast(glbfn_glVertexAttribI1iv)glbindGetProcAddress(`glVertexAttribI1iv`);
  if (glVertexAttribI1iv is null) assert(0, `OpenGL function 'glVertexAttribI1iv' not found!`);
  glVertexAttribI1iv(a0,a1,);
}
__gshared glbfn_glVertexAttribI2iv glVertexAttribI2iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI2iv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI2iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI2iv = cast(glbfn_glVertexAttribI2iv)glbindGetProcAddress(`glVertexAttribI2iv`);
  if (glVertexAttribI2iv is null) assert(0, `OpenGL function 'glVertexAttribI2iv' not found!`);
  glVertexAttribI2iv(a0,a1,);
}
__gshared glbfn_glVertexAttribI3iv glVertexAttribI3iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI3iv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI3iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI3iv = cast(glbfn_glVertexAttribI3iv)glbindGetProcAddress(`glVertexAttribI3iv`);
  if (glVertexAttribI3iv is null) assert(0, `OpenGL function 'glVertexAttribI3iv' not found!`);
  glVertexAttribI3iv(a0,a1,);
}
__gshared glbfn_glVertexAttribI4iv glVertexAttribI4iv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4iv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4iv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI4iv = cast(glbfn_glVertexAttribI4iv)glbindGetProcAddress(`glVertexAttribI4iv`);
  if (glVertexAttribI4iv is null) assert(0, `OpenGL function 'glVertexAttribI4iv' not found!`);
  glVertexAttribI4iv(a0,a1,);
}
__gshared glbfn_glVertexAttribI1uiv glVertexAttribI1uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI1uiv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI1uiv = cast(glbfn_glVertexAttribI1uiv)glbindGetProcAddress(`glVertexAttribI1uiv`);
  if (glVertexAttribI1uiv is null) assert(0, `OpenGL function 'glVertexAttribI1uiv' not found!`);
  glVertexAttribI1uiv(a0,a1,);
}
__gshared glbfn_glVertexAttribI2uiv glVertexAttribI2uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI2uiv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI2uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI2uiv = cast(glbfn_glVertexAttribI2uiv)glbindGetProcAddress(`glVertexAttribI2uiv`);
  if (glVertexAttribI2uiv is null) assert(0, `OpenGL function 'glVertexAttribI2uiv' not found!`);
  glVertexAttribI2uiv(a0,a1,);
}
__gshared glbfn_glVertexAttribI3uiv glVertexAttribI3uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI3uiv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI3uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI3uiv = cast(glbfn_glVertexAttribI3uiv)glbindGetProcAddress(`glVertexAttribI3uiv`);
  if (glVertexAttribI3uiv is null) assert(0, `OpenGL function 'glVertexAttribI3uiv' not found!`);
  glVertexAttribI3uiv(a0,a1,);
}
__gshared glbfn_glVertexAttribI4uiv glVertexAttribI4uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4uiv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI4uiv = cast(glbfn_glVertexAttribI4uiv)glbindGetProcAddress(`glVertexAttribI4uiv`);
  if (glVertexAttribI4uiv is null) assert(0, `OpenGL function 'glVertexAttribI4uiv' not found!`);
  glVertexAttribI4uiv(a0,a1,);
}
__gshared glbfn_glVertexAttribI4bv glVertexAttribI4bv = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4bv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4bv_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glVertexAttribI4bv = cast(glbfn_glVertexAttribI4bv)glbindGetProcAddress(`glVertexAttribI4bv`);
  if (glVertexAttribI4bv is null) assert(0, `OpenGL function 'glVertexAttribI4bv' not found!`);
  glVertexAttribI4bv(a0,a1,);
}
__gshared glbfn_glVertexAttribI4sv glVertexAttribI4sv = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4sv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4sv_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttribI4sv = cast(glbfn_glVertexAttribI4sv)glbindGetProcAddress(`glVertexAttribI4sv`);
  if (glVertexAttribI4sv is null) assert(0, `OpenGL function 'glVertexAttribI4sv' not found!`);
  glVertexAttribI4sv(a0,a1,);
}
__gshared glbfn_glVertexAttribI4ubv glVertexAttribI4ubv = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4ubv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4ubv_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVertexAttribI4ubv = cast(glbfn_glVertexAttribI4ubv)glbindGetProcAddress(`glVertexAttribI4ubv`);
  if (glVertexAttribI4ubv is null) assert(0, `OpenGL function 'glVertexAttribI4ubv' not found!`);
  glVertexAttribI4ubv(a0,a1,);
}
__gshared glbfn_glVertexAttribI4usv glVertexAttribI4usv = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4usv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4usv_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttribI4usv = cast(glbfn_glVertexAttribI4usv)glbindGetProcAddress(`glVertexAttribI4usv`);
  if (glVertexAttribI4usv is null) assert(0, `OpenGL function 'glVertexAttribI4usv' not found!`);
  glVertexAttribI4usv(a0,a1,);
}
__gshared glbfn_glGetUniformuiv glGetUniformuiv = function void (uint a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glGetUniformuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformuiv_loader (uint a0, int a1, uint* a2) nothrow @nogc {
  glGetUniformuiv = cast(glbfn_glGetUniformuiv)glbindGetProcAddress(`glGetUniformuiv`);
  if (glGetUniformuiv is null) assert(0, `OpenGL function 'glGetUniformuiv' not found!`);
  glGetUniformuiv(a0,a1,a2,);
}
__gshared glbfn_glBindFragDataLocation glBindFragDataLocation = function void (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glbfn_glBindFragDataLocation_loader(a0,a1,a2,);
};
private auto glbfn_glBindFragDataLocation_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glBindFragDataLocation = cast(glbfn_glBindFragDataLocation)glbindGetProcAddress(`glBindFragDataLocation`);
  if (glBindFragDataLocation is null) assert(0, `OpenGL function 'glBindFragDataLocation' not found!`);
  glBindFragDataLocation(a0,a1,a2,);
}
__gshared glbfn_glGetFragDataLocation glGetFragDataLocation = function int (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glGetFragDataLocation_loader(a0,a1,);
};
private auto glbfn_glGetFragDataLocation_loader (uint a0, const(char)* a1) nothrow @nogc {
  glGetFragDataLocation = cast(glbfn_glGetFragDataLocation)glbindGetProcAddress(`glGetFragDataLocation`);
  if (glGetFragDataLocation is null) assert(0, `OpenGL function 'glGetFragDataLocation' not found!`);
  return glGetFragDataLocation(a0,a1,);
}
__gshared glbfn_glUniform1ui glUniform1ui = function void (int a0, uint a1) nothrow @nogc {
  glbfn_glUniform1ui_loader(a0,a1,);
};
private auto glbfn_glUniform1ui_loader (int a0, uint a1) nothrow @nogc {
  glUniform1ui = cast(glbfn_glUniform1ui)glbindGetProcAddress(`glUniform1ui`);
  if (glUniform1ui is null) assert(0, `OpenGL function 'glUniform1ui' not found!`);
  glUniform1ui(a0,a1,);
}
__gshared glbfn_glUniform2ui glUniform2ui = function void (int a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glUniform2ui_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2ui_loader (int a0, uint a1, uint a2) nothrow @nogc {
  glUniform2ui = cast(glbfn_glUniform2ui)glbindGetProcAddress(`glUniform2ui`);
  if (glUniform2ui is null) assert(0, `OpenGL function 'glUniform2ui' not found!`);
  glUniform2ui(a0,a1,a2,);
}
__gshared glbfn_glUniform3ui glUniform3ui = function void (int a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glUniform3ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3ui_loader (int a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glUniform3ui = cast(glbfn_glUniform3ui)glbindGetProcAddress(`glUniform3ui`);
  if (glUniform3ui is null) assert(0, `OpenGL function 'glUniform3ui' not found!`);
  glUniform3ui(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4ui glUniform4ui = function void (int a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glUniform4ui_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4ui_loader (int a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glUniform4ui = cast(glbfn_glUniform4ui)glbindGetProcAddress(`glUniform4ui`);
  if (glUniform4ui is null) assert(0, `OpenGL function 'glUniform4ui' not found!`);
  glUniform4ui(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1uiv glUniform1uiv = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform1uiv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1uiv_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform1uiv = cast(glbfn_glUniform1uiv)glbindGetProcAddress(`glUniform1uiv`);
  if (glUniform1uiv is null) assert(0, `OpenGL function 'glUniform1uiv' not found!`);
  glUniform1uiv(a0,a1,a2,);
}
__gshared glbfn_glUniform2uiv glUniform2uiv = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform2uiv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2uiv_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform2uiv = cast(glbfn_glUniform2uiv)glbindGetProcAddress(`glUniform2uiv`);
  if (glUniform2uiv is null) assert(0, `OpenGL function 'glUniform2uiv' not found!`);
  glUniform2uiv(a0,a1,a2,);
}
__gshared glbfn_glUniform3uiv glUniform3uiv = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform3uiv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3uiv_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform3uiv = cast(glbfn_glUniform3uiv)glbindGetProcAddress(`glUniform3uiv`);
  if (glUniform3uiv is null) assert(0, `OpenGL function 'glUniform3uiv' not found!`);
  glUniform3uiv(a0,a1,a2,);
}
__gshared glbfn_glUniform4uiv glUniform4uiv = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform4uiv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4uiv_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform4uiv = cast(glbfn_glUniform4uiv)glbindGetProcAddress(`glUniform4uiv`);
  if (glUniform4uiv is null) assert(0, `OpenGL function 'glUniform4uiv' not found!`);
  glUniform4uiv(a0,a1,a2,);
}
__gshared glbfn_glTexParameterIiv glTexParameterIiv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexParameterIiv_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterIiv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexParameterIiv = cast(glbfn_glTexParameterIiv)glbindGetProcAddress(`glTexParameterIiv`);
  if (glTexParameterIiv is null) assert(0, `OpenGL function 'glTexParameterIiv' not found!`);
  glTexParameterIiv(a0,a1,a2,);
}
__gshared glbfn_glTexParameterIuiv glTexParameterIuiv = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glTexParameterIuiv_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterIuiv_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glTexParameterIuiv = cast(glbfn_glTexParameterIuiv)glbindGetProcAddress(`glTexParameterIuiv`);
  if (glTexParameterIuiv is null) assert(0, `OpenGL function 'glTexParameterIuiv' not found!`);
  glTexParameterIuiv(a0,a1,a2,);
}
__gshared glbfn_glGetTexParameterIiv glGetTexParameterIiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexParameterIiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameterIiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexParameterIiv = cast(glbfn_glGetTexParameterIiv)glbindGetProcAddress(`glGetTexParameterIiv`);
  if (glGetTexParameterIiv is null) assert(0, `OpenGL function 'glGetTexParameterIiv' not found!`);
  glGetTexParameterIiv(a0,a1,a2,);
}
__gshared glbfn_glGetTexParameterIuiv glGetTexParameterIuiv = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetTexParameterIuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameterIuiv_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetTexParameterIuiv = cast(glbfn_glGetTexParameterIuiv)glbindGetProcAddress(`glGetTexParameterIuiv`);
  if (glGetTexParameterIuiv is null) assert(0, `OpenGL function 'glGetTexParameterIuiv' not found!`);
  glGetTexParameterIuiv(a0,a1,a2,);
}
__gshared glbfn_glClearBufferiv glClearBufferiv = function void (uint a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glClearBufferiv_loader(a0,a1,a2,);
};
private auto glbfn_glClearBufferiv_loader (uint a0, int a1, const(int)* a2) nothrow @nogc {
  glClearBufferiv = cast(glbfn_glClearBufferiv)glbindGetProcAddress(`glClearBufferiv`);
  if (glClearBufferiv is null) assert(0, `OpenGL function 'glClearBufferiv' not found!`);
  glClearBufferiv(a0,a1,a2,);
}
__gshared glbfn_glClearBufferuiv glClearBufferuiv = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glClearBufferuiv_loader(a0,a1,a2,);
};
private auto glbfn_glClearBufferuiv_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glClearBufferuiv = cast(glbfn_glClearBufferuiv)glbindGetProcAddress(`glClearBufferuiv`);
  if (glClearBufferuiv is null) assert(0, `OpenGL function 'glClearBufferuiv' not found!`);
  glClearBufferuiv(a0,a1,a2,);
}
__gshared glbfn_glClearBufferfv glClearBufferfv = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glClearBufferfv_loader(a0,a1,a2,);
};
private auto glbfn_glClearBufferfv_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glClearBufferfv = cast(glbfn_glClearBufferfv)glbindGetProcAddress(`glClearBufferfv`);
  if (glClearBufferfv is null) assert(0, `OpenGL function 'glClearBufferfv' not found!`);
  glClearBufferfv(a0,a1,a2,);
}
__gshared glbfn_glClearBufferfi glClearBufferfi = function void (uint a0, int a1, float a2, int a3) nothrow @nogc {
  glbfn_glClearBufferfi_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearBufferfi_loader (uint a0, int a1, float a2, int a3) nothrow @nogc {
  glClearBufferfi = cast(glbfn_glClearBufferfi)glbindGetProcAddress(`glClearBufferfi`);
  if (glClearBufferfi is null) assert(0, `OpenGL function 'glClearBufferfi' not found!`);
  glClearBufferfi(a0,a1,a2,a3,);
}
__gshared glbfn_glGetStringi glGetStringi = function const(char)* (uint a0, uint a1) nothrow @nogc {
  return glbfn_glGetStringi_loader(a0,a1,);
};
private auto glbfn_glGetStringi_loader (uint a0, uint a1) nothrow @nogc {
  glGetStringi = cast(glbfn_glGetStringi)glbindGetProcAddress(`glGetStringi`);
  if (glGetStringi is null) assert(0, `OpenGL function 'glGetStringi' not found!`);
  return glGetStringi(a0,a1,);
}
__gshared glbfn_glIsRenderbuffer glIsRenderbuffer = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsRenderbuffer_loader(a0,);
};
private auto glbfn_glIsRenderbuffer_loader (uint a0) nothrow @nogc {
  glIsRenderbuffer = cast(glbfn_glIsRenderbuffer)glbindGetProcAddress(`glIsRenderbuffer`);
  if (glIsRenderbuffer is null) assert(0, `OpenGL function 'glIsRenderbuffer' not found!`);
  return glIsRenderbuffer(a0,);
}
__gshared glbfn_glBindRenderbuffer glBindRenderbuffer = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindRenderbuffer_loader(a0,a1,);
};
private auto glbfn_glBindRenderbuffer_loader (uint a0, uint a1) nothrow @nogc {
  glBindRenderbuffer = cast(glbfn_glBindRenderbuffer)glbindGetProcAddress(`glBindRenderbuffer`);
  if (glBindRenderbuffer is null) assert(0, `OpenGL function 'glBindRenderbuffer' not found!`);
  glBindRenderbuffer(a0,a1,);
}
__gshared glbfn_glDeleteRenderbuffers glDeleteRenderbuffers = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteRenderbuffers_loader(a0,a1,);
};
private auto glbfn_glDeleteRenderbuffers_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteRenderbuffers = cast(glbfn_glDeleteRenderbuffers)glbindGetProcAddress(`glDeleteRenderbuffers`);
  if (glDeleteRenderbuffers is null) assert(0, `OpenGL function 'glDeleteRenderbuffers' not found!`);
  glDeleteRenderbuffers(a0,a1,);
}
__gshared glbfn_glGenRenderbuffers glGenRenderbuffers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenRenderbuffers_loader(a0,a1,);
};
private auto glbfn_glGenRenderbuffers_loader (int a0, uint* a1) nothrow @nogc {
  glGenRenderbuffers = cast(glbfn_glGenRenderbuffers)glbindGetProcAddress(`glGenRenderbuffers`);
  if (glGenRenderbuffers is null) assert(0, `OpenGL function 'glGenRenderbuffers' not found!`);
  glGenRenderbuffers(a0,a1,);
}
__gshared glbfn_glRenderbufferStorage glRenderbufferStorage = function void (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glbfn_glRenderbufferStorage_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRenderbufferStorage_loader (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glRenderbufferStorage = cast(glbfn_glRenderbufferStorage)glbindGetProcAddress(`glRenderbufferStorage`);
  if (glRenderbufferStorage is null) assert(0, `OpenGL function 'glRenderbufferStorage' not found!`);
  glRenderbufferStorage(a0,a1,a2,a3,);
}
__gshared glbfn_glGetRenderbufferParameteriv glGetRenderbufferParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetRenderbufferParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetRenderbufferParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetRenderbufferParameteriv = cast(glbfn_glGetRenderbufferParameteriv)glbindGetProcAddress(`glGetRenderbufferParameteriv`);
  if (glGetRenderbufferParameteriv is null) assert(0, `OpenGL function 'glGetRenderbufferParameteriv' not found!`);
  glGetRenderbufferParameteriv(a0,a1,a2,);
}
__gshared glbfn_glIsFramebuffer glIsFramebuffer = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsFramebuffer_loader(a0,);
};
private auto glbfn_glIsFramebuffer_loader (uint a0) nothrow @nogc {
  glIsFramebuffer = cast(glbfn_glIsFramebuffer)glbindGetProcAddress(`glIsFramebuffer`);
  if (glIsFramebuffer is null) assert(0, `OpenGL function 'glIsFramebuffer' not found!`);
  return glIsFramebuffer(a0,);
}
__gshared glbfn_glBindFramebuffer glBindFramebuffer = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindFramebuffer_loader(a0,a1,);
};
private auto glbfn_glBindFramebuffer_loader (uint a0, uint a1) nothrow @nogc {
  glBindFramebuffer = cast(glbfn_glBindFramebuffer)glbindGetProcAddress(`glBindFramebuffer`);
  if (glBindFramebuffer is null) assert(0, `OpenGL function 'glBindFramebuffer' not found!`);
  glBindFramebuffer(a0,a1,);
}
__gshared glbfn_glDeleteFramebuffers glDeleteFramebuffers = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteFramebuffers_loader(a0,a1,);
};
private auto glbfn_glDeleteFramebuffers_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteFramebuffers = cast(glbfn_glDeleteFramebuffers)glbindGetProcAddress(`glDeleteFramebuffers`);
  if (glDeleteFramebuffers is null) assert(0, `OpenGL function 'glDeleteFramebuffers' not found!`);
  glDeleteFramebuffers(a0,a1,);
}
__gshared glbfn_glGenFramebuffers glGenFramebuffers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenFramebuffers_loader(a0,a1,);
};
private auto glbfn_glGenFramebuffers_loader (int a0, uint* a1) nothrow @nogc {
  glGenFramebuffers = cast(glbfn_glGenFramebuffers)glbindGetProcAddress(`glGenFramebuffers`);
  if (glGenFramebuffers is null) assert(0, `OpenGL function 'glGenFramebuffers' not found!`);
  glGenFramebuffers(a0,a1,);
}
__gshared glbfn_glCheckFramebufferStatus glCheckFramebufferStatus = function uint (uint a0) nothrow @nogc {
  return glbfn_glCheckFramebufferStatus_loader(a0,);
};
private auto glbfn_glCheckFramebufferStatus_loader (uint a0) nothrow @nogc {
  glCheckFramebufferStatus = cast(glbfn_glCheckFramebufferStatus)glbindGetProcAddress(`glCheckFramebufferStatus`);
  if (glCheckFramebufferStatus is null) assert(0, `OpenGL function 'glCheckFramebufferStatus' not found!`);
  return glCheckFramebufferStatus(a0,);
}
__gshared glbfn_glFramebufferTexture1D glFramebufferTexture1D = function void (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glbfn_glFramebufferTexture1D_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTexture1D_loader (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glFramebufferTexture1D = cast(glbfn_glFramebufferTexture1D)glbindGetProcAddress(`glFramebufferTexture1D`);
  if (glFramebufferTexture1D is null) assert(0, `OpenGL function 'glFramebufferTexture1D' not found!`);
  glFramebufferTexture1D(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glFramebufferTexture2D glFramebufferTexture2D = function void (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glbfn_glFramebufferTexture2D_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTexture2D_loader (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glFramebufferTexture2D = cast(glbfn_glFramebufferTexture2D)glbindGetProcAddress(`glFramebufferTexture2D`);
  if (glFramebufferTexture2D is null) assert(0, `OpenGL function 'glFramebufferTexture2D' not found!`);
  glFramebufferTexture2D(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glFramebufferTexture3D glFramebufferTexture3D = function void (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glFramebufferTexture3D_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glFramebufferTexture3D_loader (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glFramebufferTexture3D = cast(glbfn_glFramebufferTexture3D)glbindGetProcAddress(`glFramebufferTexture3D`);
  if (glFramebufferTexture3D is null) assert(0, `OpenGL function 'glFramebufferTexture3D' not found!`);
  glFramebufferTexture3D(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glFramebufferRenderbuffer glFramebufferRenderbuffer = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glFramebufferRenderbuffer_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFramebufferRenderbuffer_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glFramebufferRenderbuffer = cast(glbfn_glFramebufferRenderbuffer)glbindGetProcAddress(`glFramebufferRenderbuffer`);
  if (glFramebufferRenderbuffer is null) assert(0, `OpenGL function 'glFramebufferRenderbuffer' not found!`);
  glFramebufferRenderbuffer(a0,a1,a2,a3,);
}
__gshared glbfn_glGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetFramebufferAttachmentParameteriv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetFramebufferAttachmentParameteriv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetFramebufferAttachmentParameteriv = cast(glbfn_glGetFramebufferAttachmentParameteriv)glbindGetProcAddress(`glGetFramebufferAttachmentParameteriv`);
  if (glGetFramebufferAttachmentParameteriv is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameteriv' not found!`);
  glGetFramebufferAttachmentParameteriv(a0,a1,a2,a3,);
}
__gshared glbfn_glGenerateMipmap glGenerateMipmap = function void (uint a0) nothrow @nogc {
  glbfn_glGenerateMipmap_loader(a0,);
};
private auto glbfn_glGenerateMipmap_loader (uint a0) nothrow @nogc {
  glGenerateMipmap = cast(glbfn_glGenerateMipmap)glbindGetProcAddress(`glGenerateMipmap`);
  if (glGenerateMipmap is null) assert(0, `OpenGL function 'glGenerateMipmap' not found!`);
  glGenerateMipmap(a0,);
}
__gshared glbfn_glBlitFramebuffer glBlitFramebuffer = function void (int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9) nothrow @nogc {
  glbfn_glBlitFramebuffer_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glBlitFramebuffer_loader (int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9) nothrow @nogc {
  glBlitFramebuffer = cast(glbfn_glBlitFramebuffer)glbindGetProcAddress(`glBlitFramebuffer`);
  if (glBlitFramebuffer is null) assert(0, `OpenGL function 'glBlitFramebuffer' not found!`);
  glBlitFramebuffer(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glRenderbufferStorageMultisample glRenderbufferStorageMultisample = function void (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glRenderbufferStorageMultisample_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glRenderbufferStorageMultisample_loader (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glRenderbufferStorageMultisample = cast(glbfn_glRenderbufferStorageMultisample)glbindGetProcAddress(`glRenderbufferStorageMultisample`);
  if (glRenderbufferStorageMultisample is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisample' not found!`);
  glRenderbufferStorageMultisample(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glFramebufferTextureLayer glFramebufferTextureLayer = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glFramebufferTextureLayer_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTextureLayer_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glFramebufferTextureLayer = cast(glbfn_glFramebufferTextureLayer)glbindGetProcAddress(`glFramebufferTextureLayer`);
  if (glFramebufferTextureLayer is null) assert(0, `OpenGL function 'glFramebufferTextureLayer' not found!`);
  glFramebufferTextureLayer(a0,a1,a2,a3,a4,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glMapBufferRange glMapBufferRange = function void* (uint a0, int a1, int a2, uint a3) nothrow @nogc {
  return glbfn_glMapBufferRange_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glMapBufferRange_loader (uint a0, int a1, int a2, uint a3) nothrow @nogc {
  glMapBufferRange = cast(glbfn_glMapBufferRange)glbindGetProcAddress(`glMapBufferRange`);
  if (glMapBufferRange is null) assert(0, `OpenGL function 'glMapBufferRange' not found!`);
  return glMapBufferRange(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glFlushMappedBufferRange glFlushMappedBufferRange = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glFlushMappedBufferRange_loader(a0,a1,a2,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glFlushMappedBufferRange_loader (uint a0, int a1, int a2) nothrow @nogc {
  glFlushMappedBufferRange = cast(glbfn_glFlushMappedBufferRange)glbindGetProcAddress(`glFlushMappedBufferRange`);
  if (glFlushMappedBufferRange is null) assert(0, `OpenGL function 'glFlushMappedBufferRange' not found!`);
  glFlushMappedBufferRange(a0,a1,a2,);
}
__gshared glbfn_glBindVertexArray glBindVertexArray = function void (uint a0) nothrow @nogc {
  glbfn_glBindVertexArray_loader(a0,);
};
private auto glbfn_glBindVertexArray_loader (uint a0) nothrow @nogc {
  glBindVertexArray = cast(glbfn_glBindVertexArray)glbindGetProcAddress(`glBindVertexArray`);
  if (glBindVertexArray is null) assert(0, `OpenGL function 'glBindVertexArray' not found!`);
  glBindVertexArray(a0,);
}
__gshared glbfn_glDeleteVertexArrays glDeleteVertexArrays = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteVertexArrays_loader(a0,a1,);
};
private auto glbfn_glDeleteVertexArrays_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteVertexArrays = cast(glbfn_glDeleteVertexArrays)glbindGetProcAddress(`glDeleteVertexArrays`);
  if (glDeleteVertexArrays is null) assert(0, `OpenGL function 'glDeleteVertexArrays' not found!`);
  glDeleteVertexArrays(a0,a1,);
}
__gshared glbfn_glGenVertexArrays glGenVertexArrays = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenVertexArrays_loader(a0,a1,);
};
private auto glbfn_glGenVertexArrays_loader (int a0, uint* a1) nothrow @nogc {
  glGenVertexArrays = cast(glbfn_glGenVertexArrays)glbindGetProcAddress(`glGenVertexArrays`);
  if (glGenVertexArrays is null) assert(0, `OpenGL function 'glGenVertexArrays' not found!`);
  glGenVertexArrays(a0,a1,);
}
__gshared glbfn_glIsVertexArray glIsVertexArray = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsVertexArray_loader(a0,);
};
private auto glbfn_glIsVertexArray_loader (uint a0) nothrow @nogc {
  glIsVertexArray = cast(glbfn_glIsVertexArray)glbindGetProcAddress(`glIsVertexArray`);
  if (glIsVertexArray is null) assert(0, `OpenGL function 'glIsVertexArray' not found!`);
  return glIsVertexArray(a0,);
}
__gshared glbfn_glDrawArraysInstanced glDrawArraysInstanced = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glDrawArraysInstanced_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawArraysInstanced_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glDrawArraysInstanced = cast(glbfn_glDrawArraysInstanced)glbindGetProcAddress(`glDrawArraysInstanced`);
  if (glDrawArraysInstanced is null) assert(0, `OpenGL function 'glDrawArraysInstanced' not found!`);
  glDrawArraysInstanced(a0,a1,a2,a3,);
}
__gshared glbfn_glDrawElementsInstanced glDrawElementsInstanced = function void (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glbfn_glDrawElementsInstanced_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawElementsInstanced_loader (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glDrawElementsInstanced = cast(glbfn_glDrawElementsInstanced)glbindGetProcAddress(`glDrawElementsInstanced`);
  if (glDrawElementsInstanced is null) assert(0, `OpenGL function 'glDrawElementsInstanced' not found!`);
  glDrawElementsInstanced(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTexBuffer glTexBuffer = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glTexBuffer_loader(a0,a1,a2,);
};
private auto glbfn_glTexBuffer_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glTexBuffer = cast(glbfn_glTexBuffer)glbindGetProcAddress(`glTexBuffer`);
  if (glTexBuffer is null) assert(0, `OpenGL function 'glTexBuffer' not found!`);
  glTexBuffer(a0,a1,a2,);
}
__gshared glbfn_glPrimitiveRestartIndex glPrimitiveRestartIndex = function void (uint a0) nothrow @nogc {
  glbfn_glPrimitiveRestartIndex_loader(a0,);
};
private auto glbfn_glPrimitiveRestartIndex_loader (uint a0) nothrow @nogc {
  glPrimitiveRestartIndex = cast(glbfn_glPrimitiveRestartIndex)glbindGetProcAddress(`glPrimitiveRestartIndex`);
  if (glPrimitiveRestartIndex is null) assert(0, `OpenGL function 'glPrimitiveRestartIndex' not found!`);
  glPrimitiveRestartIndex(a0,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glCopyBufferSubData glCopyBufferSubData = function void (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyBufferSubData_loader(a0,a1,a2,a3,a4,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glCopyBufferSubData_loader (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyBufferSubData = cast(glbfn_glCopyBufferSubData)glbindGetProcAddress(`glCopyBufferSubData`);
  if (glCopyBufferSubData is null) assert(0, `OpenGL function 'glCopyBufferSubData' not found!`);
  glCopyBufferSubData(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetUniformIndices glGetUniformIndices = function void (uint a0, int a1, const(char*)* a2, uint* a3) nothrow @nogc {
  glbfn_glGetUniformIndices_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetUniformIndices_loader (uint a0, int a1, const(char*)* a2, uint* a3) nothrow @nogc {
  glGetUniformIndices = cast(glbfn_glGetUniformIndices)glbindGetProcAddress(`glGetUniformIndices`);
  if (glGetUniformIndices is null) assert(0, `OpenGL function 'glGetUniformIndices' not found!`);
  glGetUniformIndices(a0,a1,a2,a3,);
}
__gshared glbfn_glGetActiveUniformsiv glGetActiveUniformsiv = function void (uint a0, int a1, const(uint)* a2, uint a3, int* a4) nothrow @nogc {
  glbfn_glGetActiveUniformsiv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetActiveUniformsiv_loader (uint a0, int a1, const(uint)* a2, uint a3, int* a4) nothrow @nogc {
  glGetActiveUniformsiv = cast(glbfn_glGetActiveUniformsiv)glbindGetProcAddress(`glGetActiveUniformsiv`);
  if (glGetActiveUniformsiv is null) assert(0, `OpenGL function 'glGetActiveUniformsiv' not found!`);
  glGetActiveUniformsiv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetActiveUniformName glGetActiveUniformName = function void (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glbfn_glGetActiveUniformName_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetActiveUniformName_loader (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glGetActiveUniformName = cast(glbfn_glGetActiveUniformName)glbindGetProcAddress(`glGetActiveUniformName`);
  if (glGetActiveUniformName is null) assert(0, `OpenGL function 'glGetActiveUniformName' not found!`);
  glGetActiveUniformName(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetUniformBlockIndex glGetUniformBlockIndex = function uint (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glGetUniformBlockIndex_loader(a0,a1,);
};
private auto glbfn_glGetUniformBlockIndex_loader (uint a0, const(char)* a1) nothrow @nogc {
  glGetUniformBlockIndex = cast(glbfn_glGetUniformBlockIndex)glbindGetProcAddress(`glGetUniformBlockIndex`);
  if (glGetUniformBlockIndex is null) assert(0, `OpenGL function 'glGetUniformBlockIndex' not found!`);
  return glGetUniformBlockIndex(a0,a1,);
}
__gshared glbfn_glGetActiveUniformBlockiv glGetActiveUniformBlockiv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetActiveUniformBlockiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetActiveUniformBlockiv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetActiveUniformBlockiv = cast(glbfn_glGetActiveUniformBlockiv)glbindGetProcAddress(`glGetActiveUniformBlockiv`);
  if (glGetActiveUniformBlockiv is null) assert(0, `OpenGL function 'glGetActiveUniformBlockiv' not found!`);
  glGetActiveUniformBlockiv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetActiveUniformBlockName glGetActiveUniformBlockName = function void (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glbfn_glGetActiveUniformBlockName_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetActiveUniformBlockName_loader (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glGetActiveUniformBlockName = cast(glbfn_glGetActiveUniformBlockName)glbindGetProcAddress(`glGetActiveUniformBlockName`);
  if (glGetActiveUniformBlockName is null) assert(0, `OpenGL function 'glGetActiveUniformBlockName' not found!`);
  glGetActiveUniformBlockName(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniformBlockBinding glUniformBlockBinding = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glUniformBlockBinding_loader(a0,a1,a2,);
};
private auto glbfn_glUniformBlockBinding_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glUniformBlockBinding = cast(glbfn_glUniformBlockBinding)glbindGetProcAddress(`glUniformBlockBinding`);
  if (glUniformBlockBinding is null) assert(0, `OpenGL function 'glUniformBlockBinding' not found!`);
  glUniformBlockBinding(a0,a1,a2,);
}
__gshared glbfn_glDrawElementsBaseVertex glDrawElementsBaseVertex = function void (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glbfn_glDrawElementsBaseVertex_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawElementsBaseVertex_loader (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glDrawElementsBaseVertex = cast(glbfn_glDrawElementsBaseVertex)glbindGetProcAddress(`glDrawElementsBaseVertex`);
  if (glDrawElementsBaseVertex is null) assert(0, `OpenGL function 'glDrawElementsBaseVertex' not found!`);
  glDrawElementsBaseVertex(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex = function void (uint a0, uint a1, uint a2, int a3, uint a4, const(void)* a5, int a6) nothrow @nogc {
  glbfn_glDrawRangeElementsBaseVertex_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glDrawRangeElementsBaseVertex_loader (uint a0, uint a1, uint a2, int a3, uint a4, const(void)* a5, int a6) nothrow @nogc {
  glDrawRangeElementsBaseVertex = cast(glbfn_glDrawRangeElementsBaseVertex)glbindGetProcAddress(`glDrawRangeElementsBaseVertex`);
  if (glDrawRangeElementsBaseVertex is null) assert(0, `OpenGL function 'glDrawRangeElementsBaseVertex' not found!`);
  glDrawRangeElementsBaseVertex(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex = function void (uint a0, int a1, uint a2, const(void)* a3, int a4, int a5) nothrow @nogc {
  glbfn_glDrawElementsInstancedBaseVertex_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDrawElementsInstancedBaseVertex_loader (uint a0, int a1, uint a2, const(void)* a3, int a4, int a5) nothrow @nogc {
  glDrawElementsInstancedBaseVertex = cast(glbfn_glDrawElementsInstancedBaseVertex)glbindGetProcAddress(`glDrawElementsInstancedBaseVertex`);
  if (glDrawElementsInstancedBaseVertex is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertex' not found!`);
  glDrawElementsInstancedBaseVertex(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex = function void (uint a0, const(int)* a1, uint a2, const(void*)* a3, int a4, const(int)* a5) nothrow @nogc {
  glbfn_glMultiDrawElementsBaseVertex_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMultiDrawElementsBaseVertex_loader (uint a0, const(int)* a1, uint a2, const(void*)* a3, int a4, const(int)* a5) nothrow @nogc {
  glMultiDrawElementsBaseVertex = cast(glbfn_glMultiDrawElementsBaseVertex)glbindGetProcAddress(`glMultiDrawElementsBaseVertex`);
  if (glMultiDrawElementsBaseVertex is null) assert(0, `OpenGL function 'glMultiDrawElementsBaseVertex' not found!`);
  glMultiDrawElementsBaseVertex(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProvokingVertex glProvokingVertex = function void (uint a0) nothrow @nogc {
  glbfn_glProvokingVertex_loader(a0,);
};
private auto glbfn_glProvokingVertex_loader (uint a0) nothrow @nogc {
  glProvokingVertex = cast(glbfn_glProvokingVertex)glbindGetProcAddress(`glProvokingVertex`);
  if (glProvokingVertex is null) assert(0, `OpenGL function 'glProvokingVertex' not found!`);
  glProvokingVertex(a0,);
}
__gshared glbfn_glGetInteger64v glGetInteger64v = function void (uint a0, long* a1) nothrow @nogc {
  glbfn_glGetInteger64v_loader(a0,a1,);
};
private auto glbfn_glGetInteger64v_loader (uint a0, long* a1) nothrow @nogc {
  glGetInteger64v = cast(glbfn_glGetInteger64v)glbindGetProcAddress(`glGetInteger64v`);
  if (glGetInteger64v is null) assert(0, `OpenGL function 'glGetInteger64v' not found!`);
  glGetInteger64v(a0,a1,);
}
__gshared glbfn_glGetInteger64i_v glGetInteger64i_v = function void (uint a0, uint a1, long* a2) nothrow @nogc {
  glbfn_glGetInteger64i_v_loader(a0,a1,a2,);
};
private auto glbfn_glGetInteger64i_v_loader (uint a0, uint a1, long* a2) nothrow @nogc {
  glGetInteger64i_v = cast(glbfn_glGetInteger64i_v)glbindGetProcAddress(`glGetInteger64i_v`);
  if (glGetInteger64i_v is null) assert(0, `OpenGL function 'glGetInteger64i_v' not found!`);
  glGetInteger64i_v(a0,a1,a2,);
}
__gshared glbfn_glGetBufferParameteri64v glGetBufferParameteri64v = function void (uint a0, uint a1, long* a2) nothrow @nogc {
  glbfn_glGetBufferParameteri64v_loader(a0,a1,a2,);
};
private auto glbfn_glGetBufferParameteri64v_loader (uint a0, uint a1, long* a2) nothrow @nogc {
  glGetBufferParameteri64v = cast(glbfn_glGetBufferParameteri64v)glbindGetProcAddress(`glGetBufferParameteri64v`);
  if (glGetBufferParameteri64v is null) assert(0, `OpenGL function 'glGetBufferParameteri64v' not found!`);
  glGetBufferParameteri64v(a0,a1,a2,);
}
__gshared glbfn_glFramebufferTexture glFramebufferTexture = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glFramebufferTexture_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFramebufferTexture_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glFramebufferTexture = cast(glbfn_glFramebufferTexture)glbindGetProcAddress(`glFramebufferTexture`);
  if (glFramebufferTexture is null) assert(0, `OpenGL function 'glFramebufferTexture' not found!`);
  glFramebufferTexture(a0,a1,a2,a3,);
}
__gshared glbfn_glTexImage2DMultisample glTexImage2DMultisample = function void (uint a0, int a1, uint a2, int a3, int a4, ubyte a5) nothrow @nogc {
  glbfn_glTexImage2DMultisample_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glTexImage2DMultisample_loader (uint a0, int a1, uint a2, int a3, int a4, ubyte a5) nothrow @nogc {
  glTexImage2DMultisample = cast(glbfn_glTexImage2DMultisample)glbindGetProcAddress(`glTexImage2DMultisample`);
  if (glTexImage2DMultisample is null) assert(0, `OpenGL function 'glTexImage2DMultisample' not found!`);
  glTexImage2DMultisample(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTexImage3DMultisample glTexImage3DMultisample = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glbfn_glTexImage3DMultisample_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTexImage3DMultisample_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glTexImage3DMultisample = cast(glbfn_glTexImage3DMultisample)glbindGetProcAddress(`glTexImage3DMultisample`);
  if (glTexImage3DMultisample is null) assert(0, `OpenGL function 'glTexImage3DMultisample' not found!`);
  glTexImage3DMultisample(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetMultisamplefv glGetMultisamplefv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetMultisamplefv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMultisamplefv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetMultisamplefv = cast(glbfn_glGetMultisamplefv)glbindGetProcAddress(`glGetMultisamplefv`);
  if (glGetMultisamplefv is null) assert(0, `OpenGL function 'glGetMultisamplefv' not found!`);
  glGetMultisamplefv(a0,a1,a2,);
}
__gshared glbfn_glSampleMaski glSampleMaski = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glSampleMaski_loader(a0,a1,);
};
private auto glbfn_glSampleMaski_loader (uint a0, uint a1) nothrow @nogc {
  glSampleMaski = cast(glbfn_glSampleMaski)glbindGetProcAddress(`glSampleMaski`);
  if (glSampleMaski is null) assert(0, `OpenGL function 'glSampleMaski' not found!`);
  glSampleMaski(a0,a1,);
}
__gshared glbfn_glBindFragDataLocationIndexed glBindFragDataLocationIndexed = function void (uint a0, uint a1, uint a2, const(char)* a3) nothrow @nogc {
  glbfn_glBindFragDataLocationIndexed_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBindFragDataLocationIndexed_loader (uint a0, uint a1, uint a2, const(char)* a3) nothrow @nogc {
  glBindFragDataLocationIndexed = cast(glbfn_glBindFragDataLocationIndexed)glbindGetProcAddress(`glBindFragDataLocationIndexed`);
  if (glBindFragDataLocationIndexed is null) assert(0, `OpenGL function 'glBindFragDataLocationIndexed' not found!`);
  glBindFragDataLocationIndexed(a0,a1,a2,a3,);
}
__gshared glbfn_glGetFragDataIndex glGetFragDataIndex = function int (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glGetFragDataIndex_loader(a0,a1,);
};
private auto glbfn_glGetFragDataIndex_loader (uint a0, const(char)* a1) nothrow @nogc {
  glGetFragDataIndex = cast(glbfn_glGetFragDataIndex)glbindGetProcAddress(`glGetFragDataIndex`);
  if (glGetFragDataIndex is null) assert(0, `OpenGL function 'glGetFragDataIndex' not found!`);
  return glGetFragDataIndex(a0,a1,);
}
__gshared glbfn_glGenSamplers glGenSamplers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenSamplers_loader(a0,a1,);
};
private auto glbfn_glGenSamplers_loader (int a0, uint* a1) nothrow @nogc {
  glGenSamplers = cast(glbfn_glGenSamplers)glbindGetProcAddress(`glGenSamplers`);
  if (glGenSamplers is null) assert(0, `OpenGL function 'glGenSamplers' not found!`);
  glGenSamplers(a0,a1,);
}
__gshared glbfn_glDeleteSamplers glDeleteSamplers = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteSamplers_loader(a0,a1,);
};
private auto glbfn_glDeleteSamplers_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteSamplers = cast(glbfn_glDeleteSamplers)glbindGetProcAddress(`glDeleteSamplers`);
  if (glDeleteSamplers is null) assert(0, `OpenGL function 'glDeleteSamplers' not found!`);
  glDeleteSamplers(a0,a1,);
}
__gshared glbfn_glIsSampler glIsSampler = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsSampler_loader(a0,);
};
private auto glbfn_glIsSampler_loader (uint a0) nothrow @nogc {
  glIsSampler = cast(glbfn_glIsSampler)glbindGetProcAddress(`glIsSampler`);
  if (glIsSampler is null) assert(0, `OpenGL function 'glIsSampler' not found!`);
  return glIsSampler(a0,);
}
__gshared glbfn_glBindSampler glBindSampler = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindSampler_loader(a0,a1,);
};
private auto glbfn_glBindSampler_loader (uint a0, uint a1) nothrow @nogc {
  glBindSampler = cast(glbfn_glBindSampler)glbindGetProcAddress(`glBindSampler`);
  if (glBindSampler is null) assert(0, `OpenGL function 'glBindSampler' not found!`);
  glBindSampler(a0,a1,);
}
__gshared glbfn_glSamplerParameteri glSamplerParameteri = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glSamplerParameteri_loader(a0,a1,a2,);
};
private auto glbfn_glSamplerParameteri_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glSamplerParameteri = cast(glbfn_glSamplerParameteri)glbindGetProcAddress(`glSamplerParameteri`);
  if (glSamplerParameteri is null) assert(0, `OpenGL function 'glSamplerParameteri' not found!`);
  glSamplerParameteri(a0,a1,a2,);
}
__gshared glbfn_glSamplerParameteriv glSamplerParameteriv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glSamplerParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glSamplerParameteriv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glSamplerParameteriv = cast(glbfn_glSamplerParameteriv)glbindGetProcAddress(`glSamplerParameteriv`);
  if (glSamplerParameteriv is null) assert(0, `OpenGL function 'glSamplerParameteriv' not found!`);
  glSamplerParameteriv(a0,a1,a2,);
}
__gshared glbfn_glSamplerParameterf glSamplerParameterf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glSamplerParameterf_loader(a0,a1,a2,);
};
private auto glbfn_glSamplerParameterf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glSamplerParameterf = cast(glbfn_glSamplerParameterf)glbindGetProcAddress(`glSamplerParameterf`);
  if (glSamplerParameterf is null) assert(0, `OpenGL function 'glSamplerParameterf' not found!`);
  glSamplerParameterf(a0,a1,a2,);
}
__gshared glbfn_glSamplerParameterfv glSamplerParameterfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glSamplerParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glSamplerParameterfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glSamplerParameterfv = cast(glbfn_glSamplerParameterfv)glbindGetProcAddress(`glSamplerParameterfv`);
  if (glSamplerParameterfv is null) assert(0, `OpenGL function 'glSamplerParameterfv' not found!`);
  glSamplerParameterfv(a0,a1,a2,);
}
__gshared glbfn_glSamplerParameterIiv glSamplerParameterIiv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glSamplerParameterIiv_loader(a0,a1,a2,);
};
private auto glbfn_glSamplerParameterIiv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glSamplerParameterIiv = cast(glbfn_glSamplerParameterIiv)glbindGetProcAddress(`glSamplerParameterIiv`);
  if (glSamplerParameterIiv is null) assert(0, `OpenGL function 'glSamplerParameterIiv' not found!`);
  glSamplerParameterIiv(a0,a1,a2,);
}
__gshared glbfn_glSamplerParameterIuiv glSamplerParameterIuiv = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glSamplerParameterIuiv_loader(a0,a1,a2,);
};
private auto glbfn_glSamplerParameterIuiv_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glSamplerParameterIuiv = cast(glbfn_glSamplerParameterIuiv)glbindGetProcAddress(`glSamplerParameterIuiv`);
  if (glSamplerParameterIuiv is null) assert(0, `OpenGL function 'glSamplerParameterIuiv' not found!`);
  glSamplerParameterIuiv(a0,a1,a2,);
}
__gshared glbfn_glGetSamplerParameteriv glGetSamplerParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetSamplerParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetSamplerParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetSamplerParameteriv = cast(glbfn_glGetSamplerParameteriv)glbindGetProcAddress(`glGetSamplerParameteriv`);
  if (glGetSamplerParameteriv is null) assert(0, `OpenGL function 'glGetSamplerParameteriv' not found!`);
  glGetSamplerParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetSamplerParameterIiv glGetSamplerParameterIiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetSamplerParameterIiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetSamplerParameterIiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetSamplerParameterIiv = cast(glbfn_glGetSamplerParameterIiv)glbindGetProcAddress(`glGetSamplerParameterIiv`);
  if (glGetSamplerParameterIiv is null) assert(0, `OpenGL function 'glGetSamplerParameterIiv' not found!`);
  glGetSamplerParameterIiv(a0,a1,a2,);
}
__gshared glbfn_glGetSamplerParameterfv glGetSamplerParameterfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetSamplerParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetSamplerParameterfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetSamplerParameterfv = cast(glbfn_glGetSamplerParameterfv)glbindGetProcAddress(`glGetSamplerParameterfv`);
  if (glGetSamplerParameterfv is null) assert(0, `OpenGL function 'glGetSamplerParameterfv' not found!`);
  glGetSamplerParameterfv(a0,a1,a2,);
}
__gshared glbfn_glGetSamplerParameterIuiv glGetSamplerParameterIuiv = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetSamplerParameterIuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetSamplerParameterIuiv_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetSamplerParameterIuiv = cast(glbfn_glGetSamplerParameterIuiv)glbindGetProcAddress(`glGetSamplerParameterIuiv`);
  if (glGetSamplerParameterIuiv is null) assert(0, `OpenGL function 'glGetSamplerParameterIuiv' not found!`);
  glGetSamplerParameterIuiv(a0,a1,a2,);
}
__gshared glbfn_glQueryCounter glQueryCounter = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glQueryCounter_loader(a0,a1,);
};
private auto glbfn_glQueryCounter_loader (uint a0, uint a1) nothrow @nogc {
  glQueryCounter = cast(glbfn_glQueryCounter)glbindGetProcAddress(`glQueryCounter`);
  if (glQueryCounter is null) assert(0, `OpenGL function 'glQueryCounter' not found!`);
  glQueryCounter(a0,a1,);
}
__gshared glbfn_glGetQueryObjecti64v glGetQueryObjecti64v = function void (uint a0, uint a1, long* a2) nothrow @nogc {
  glbfn_glGetQueryObjecti64v_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjecti64v_loader (uint a0, uint a1, long* a2) nothrow @nogc {
  glGetQueryObjecti64v = cast(glbfn_glGetQueryObjecti64v)glbindGetProcAddress(`glGetQueryObjecti64v`);
  if (glGetQueryObjecti64v is null) assert(0, `OpenGL function 'glGetQueryObjecti64v' not found!`);
  glGetQueryObjecti64v(a0,a1,a2,);
}
__gshared glbfn_glGetQueryObjectui64v glGetQueryObjectui64v = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetQueryObjectui64v_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjectui64v_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetQueryObjectui64v = cast(glbfn_glGetQueryObjectui64v)glbindGetProcAddress(`glGetQueryObjectui64v`);
  if (glGetQueryObjectui64v is null) assert(0, `OpenGL function 'glGetQueryObjectui64v' not found!`);
  glGetQueryObjectui64v(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribDivisor glVertexAttribDivisor = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexAttribDivisor_loader(a0,a1,);
};
private auto glbfn_glVertexAttribDivisor_loader (uint a0, uint a1) nothrow @nogc {
  glVertexAttribDivisor = cast(glbfn_glVertexAttribDivisor)glbindGetProcAddress(`glVertexAttribDivisor`);
  if (glVertexAttribDivisor is null) assert(0, `OpenGL function 'glVertexAttribDivisor' not found!`);
  glVertexAttribDivisor(a0,a1,);
}
__gshared glbfn_glVertexAttribP1ui glVertexAttribP1ui = function void (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribP1ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP1ui_loader (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glVertexAttribP1ui = cast(glbfn_glVertexAttribP1ui)glbindGetProcAddress(`glVertexAttribP1ui`);
  if (glVertexAttribP1ui is null) assert(0, `OpenGL function 'glVertexAttribP1ui' not found!`);
  glVertexAttribP1ui(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribP1uiv glVertexAttribP1uiv = function void (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glbfn_glVertexAttribP1uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP1uiv_loader (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glVertexAttribP1uiv = cast(glbfn_glVertexAttribP1uiv)glbindGetProcAddress(`glVertexAttribP1uiv`);
  if (glVertexAttribP1uiv is null) assert(0, `OpenGL function 'glVertexAttribP1uiv' not found!`);
  glVertexAttribP1uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribP2ui glVertexAttribP2ui = function void (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribP2ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP2ui_loader (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glVertexAttribP2ui = cast(glbfn_glVertexAttribP2ui)glbindGetProcAddress(`glVertexAttribP2ui`);
  if (glVertexAttribP2ui is null) assert(0, `OpenGL function 'glVertexAttribP2ui' not found!`);
  glVertexAttribP2ui(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribP2uiv glVertexAttribP2uiv = function void (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glbfn_glVertexAttribP2uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP2uiv_loader (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glVertexAttribP2uiv = cast(glbfn_glVertexAttribP2uiv)glbindGetProcAddress(`glVertexAttribP2uiv`);
  if (glVertexAttribP2uiv is null) assert(0, `OpenGL function 'glVertexAttribP2uiv' not found!`);
  glVertexAttribP2uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribP3ui glVertexAttribP3ui = function void (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribP3ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP3ui_loader (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glVertexAttribP3ui = cast(glbfn_glVertexAttribP3ui)glbindGetProcAddress(`glVertexAttribP3ui`);
  if (glVertexAttribP3ui is null) assert(0, `OpenGL function 'glVertexAttribP3ui' not found!`);
  glVertexAttribP3ui(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribP3uiv glVertexAttribP3uiv = function void (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glbfn_glVertexAttribP3uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP3uiv_loader (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glVertexAttribP3uiv = cast(glbfn_glVertexAttribP3uiv)glbindGetProcAddress(`glVertexAttribP3uiv`);
  if (glVertexAttribP3uiv is null) assert(0, `OpenGL function 'glVertexAttribP3uiv' not found!`);
  glVertexAttribP3uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribP4ui glVertexAttribP4ui = function void (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribP4ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP4ui_loader (uint a0, uint a1, ubyte a2, uint a3) nothrow @nogc {
  glVertexAttribP4ui = cast(glbfn_glVertexAttribP4ui)glbindGetProcAddress(`glVertexAttribP4ui`);
  if (glVertexAttribP4ui is null) assert(0, `OpenGL function 'glVertexAttribP4ui' not found!`);
  glVertexAttribP4ui(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribP4uiv glVertexAttribP4uiv = function void (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glbfn_glVertexAttribP4uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribP4uiv_loader (uint a0, uint a1, ubyte a2, const(uint)* a3) nothrow @nogc {
  glVertexAttribP4uiv = cast(glbfn_glVertexAttribP4uiv)glbindGetProcAddress(`glVertexAttribP4uiv`);
  if (glVertexAttribP4uiv is null) assert(0, `OpenGL function 'glVertexAttribP4uiv' not found!`);
  glVertexAttribP4uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexP2ui glVertexP2ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexP2ui_loader(a0,a1,);
};
private auto glbfn_glVertexP2ui_loader (uint a0, uint a1) nothrow @nogc {
  glVertexP2ui = cast(glbfn_glVertexP2ui)glbindGetProcAddress(`glVertexP2ui`);
  if (glVertexP2ui is null) assert(0, `OpenGL function 'glVertexP2ui' not found!`);
  glVertexP2ui(a0,a1,);
}
__gshared glbfn_glVertexP2uiv glVertexP2uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexP2uiv_loader(a0,a1,);
};
private auto glbfn_glVertexP2uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexP2uiv = cast(glbfn_glVertexP2uiv)glbindGetProcAddress(`glVertexP2uiv`);
  if (glVertexP2uiv is null) assert(0, `OpenGL function 'glVertexP2uiv' not found!`);
  glVertexP2uiv(a0,a1,);
}
__gshared glbfn_glVertexP3ui glVertexP3ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexP3ui_loader(a0,a1,);
};
private auto glbfn_glVertexP3ui_loader (uint a0, uint a1) nothrow @nogc {
  glVertexP3ui = cast(glbfn_glVertexP3ui)glbindGetProcAddress(`glVertexP3ui`);
  if (glVertexP3ui is null) assert(0, `OpenGL function 'glVertexP3ui' not found!`);
  glVertexP3ui(a0,a1,);
}
__gshared glbfn_glVertexP3uiv glVertexP3uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexP3uiv_loader(a0,a1,);
};
private auto glbfn_glVertexP3uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexP3uiv = cast(glbfn_glVertexP3uiv)glbindGetProcAddress(`glVertexP3uiv`);
  if (glVertexP3uiv is null) assert(0, `OpenGL function 'glVertexP3uiv' not found!`);
  glVertexP3uiv(a0,a1,);
}
__gshared glbfn_glVertexP4ui glVertexP4ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexP4ui_loader(a0,a1,);
};
private auto glbfn_glVertexP4ui_loader (uint a0, uint a1) nothrow @nogc {
  glVertexP4ui = cast(glbfn_glVertexP4ui)glbindGetProcAddress(`glVertexP4ui`);
  if (glVertexP4ui is null) assert(0, `OpenGL function 'glVertexP4ui' not found!`);
  glVertexP4ui(a0,a1,);
}
__gshared glbfn_glVertexP4uiv glVertexP4uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexP4uiv_loader(a0,a1,);
};
private auto glbfn_glVertexP4uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexP4uiv = cast(glbfn_glVertexP4uiv)glbindGetProcAddress(`glVertexP4uiv`);
  if (glVertexP4uiv is null) assert(0, `OpenGL function 'glVertexP4uiv' not found!`);
  glVertexP4uiv(a0,a1,);
}
__gshared glbfn_glTexCoordP1ui glTexCoordP1ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glTexCoordP1ui_loader(a0,a1,);
};
private auto glbfn_glTexCoordP1ui_loader (uint a0, uint a1) nothrow @nogc {
  glTexCoordP1ui = cast(glbfn_glTexCoordP1ui)glbindGetProcAddress(`glTexCoordP1ui`);
  if (glTexCoordP1ui is null) assert(0, `OpenGL function 'glTexCoordP1ui' not found!`);
  glTexCoordP1ui(a0,a1,);
}
__gshared glbfn_glTexCoordP1uiv glTexCoordP1uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glTexCoordP1uiv_loader(a0,a1,);
};
private auto glbfn_glTexCoordP1uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glTexCoordP1uiv = cast(glbfn_glTexCoordP1uiv)glbindGetProcAddress(`glTexCoordP1uiv`);
  if (glTexCoordP1uiv is null) assert(0, `OpenGL function 'glTexCoordP1uiv' not found!`);
  glTexCoordP1uiv(a0,a1,);
}
__gshared glbfn_glTexCoordP2ui glTexCoordP2ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glTexCoordP2ui_loader(a0,a1,);
};
private auto glbfn_glTexCoordP2ui_loader (uint a0, uint a1) nothrow @nogc {
  glTexCoordP2ui = cast(glbfn_glTexCoordP2ui)glbindGetProcAddress(`glTexCoordP2ui`);
  if (glTexCoordP2ui is null) assert(0, `OpenGL function 'glTexCoordP2ui' not found!`);
  glTexCoordP2ui(a0,a1,);
}
__gshared glbfn_glTexCoordP2uiv glTexCoordP2uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glTexCoordP2uiv_loader(a0,a1,);
};
private auto glbfn_glTexCoordP2uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glTexCoordP2uiv = cast(glbfn_glTexCoordP2uiv)glbindGetProcAddress(`glTexCoordP2uiv`);
  if (glTexCoordP2uiv is null) assert(0, `OpenGL function 'glTexCoordP2uiv' not found!`);
  glTexCoordP2uiv(a0,a1,);
}
__gshared glbfn_glTexCoordP3ui glTexCoordP3ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glTexCoordP3ui_loader(a0,a1,);
};
private auto glbfn_glTexCoordP3ui_loader (uint a0, uint a1) nothrow @nogc {
  glTexCoordP3ui = cast(glbfn_glTexCoordP3ui)glbindGetProcAddress(`glTexCoordP3ui`);
  if (glTexCoordP3ui is null) assert(0, `OpenGL function 'glTexCoordP3ui' not found!`);
  glTexCoordP3ui(a0,a1,);
}
__gshared glbfn_glTexCoordP3uiv glTexCoordP3uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glTexCoordP3uiv_loader(a0,a1,);
};
private auto glbfn_glTexCoordP3uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glTexCoordP3uiv = cast(glbfn_glTexCoordP3uiv)glbindGetProcAddress(`glTexCoordP3uiv`);
  if (glTexCoordP3uiv is null) assert(0, `OpenGL function 'glTexCoordP3uiv' not found!`);
  glTexCoordP3uiv(a0,a1,);
}
__gshared glbfn_glTexCoordP4ui glTexCoordP4ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glTexCoordP4ui_loader(a0,a1,);
};
private auto glbfn_glTexCoordP4ui_loader (uint a0, uint a1) nothrow @nogc {
  glTexCoordP4ui = cast(glbfn_glTexCoordP4ui)glbindGetProcAddress(`glTexCoordP4ui`);
  if (glTexCoordP4ui is null) assert(0, `OpenGL function 'glTexCoordP4ui' not found!`);
  glTexCoordP4ui(a0,a1,);
}
__gshared glbfn_glTexCoordP4uiv glTexCoordP4uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glTexCoordP4uiv_loader(a0,a1,);
};
private auto glbfn_glTexCoordP4uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glTexCoordP4uiv = cast(glbfn_glTexCoordP4uiv)glbindGetProcAddress(`glTexCoordP4uiv`);
  if (glTexCoordP4uiv is null) assert(0, `OpenGL function 'glTexCoordP4uiv' not found!`);
  glTexCoordP4uiv(a0,a1,);
}
__gshared glbfn_glMultiTexCoordP1ui glMultiTexCoordP1ui = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glMultiTexCoordP1ui_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP1ui_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glMultiTexCoordP1ui = cast(glbfn_glMultiTexCoordP1ui)glbindGetProcAddress(`glMultiTexCoordP1ui`);
  if (glMultiTexCoordP1ui is null) assert(0, `OpenGL function 'glMultiTexCoordP1ui' not found!`);
  glMultiTexCoordP1ui(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordP1uiv glMultiTexCoordP1uiv = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glMultiTexCoordP1uiv_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP1uiv_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glMultiTexCoordP1uiv = cast(glbfn_glMultiTexCoordP1uiv)glbindGetProcAddress(`glMultiTexCoordP1uiv`);
  if (glMultiTexCoordP1uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP1uiv' not found!`);
  glMultiTexCoordP1uiv(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordP2ui glMultiTexCoordP2ui = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glMultiTexCoordP2ui_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP2ui_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glMultiTexCoordP2ui = cast(glbfn_glMultiTexCoordP2ui)glbindGetProcAddress(`glMultiTexCoordP2ui`);
  if (glMultiTexCoordP2ui is null) assert(0, `OpenGL function 'glMultiTexCoordP2ui' not found!`);
  glMultiTexCoordP2ui(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordP2uiv glMultiTexCoordP2uiv = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glMultiTexCoordP2uiv_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP2uiv_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glMultiTexCoordP2uiv = cast(glbfn_glMultiTexCoordP2uiv)glbindGetProcAddress(`glMultiTexCoordP2uiv`);
  if (glMultiTexCoordP2uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP2uiv' not found!`);
  glMultiTexCoordP2uiv(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordP3ui glMultiTexCoordP3ui = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glMultiTexCoordP3ui_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP3ui_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glMultiTexCoordP3ui = cast(glbfn_glMultiTexCoordP3ui)glbindGetProcAddress(`glMultiTexCoordP3ui`);
  if (glMultiTexCoordP3ui is null) assert(0, `OpenGL function 'glMultiTexCoordP3ui' not found!`);
  glMultiTexCoordP3ui(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordP3uiv glMultiTexCoordP3uiv = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glMultiTexCoordP3uiv_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP3uiv_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glMultiTexCoordP3uiv = cast(glbfn_glMultiTexCoordP3uiv)glbindGetProcAddress(`glMultiTexCoordP3uiv`);
  if (glMultiTexCoordP3uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP3uiv' not found!`);
  glMultiTexCoordP3uiv(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordP4ui glMultiTexCoordP4ui = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glMultiTexCoordP4ui_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP4ui_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glMultiTexCoordP4ui = cast(glbfn_glMultiTexCoordP4ui)glbindGetProcAddress(`glMultiTexCoordP4ui`);
  if (glMultiTexCoordP4ui is null) assert(0, `OpenGL function 'glMultiTexCoordP4ui' not found!`);
  glMultiTexCoordP4ui(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordP4uiv glMultiTexCoordP4uiv = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glMultiTexCoordP4uiv_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoordP4uiv_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glMultiTexCoordP4uiv = cast(glbfn_glMultiTexCoordP4uiv)glbindGetProcAddress(`glMultiTexCoordP4uiv`);
  if (glMultiTexCoordP4uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP4uiv' not found!`);
  glMultiTexCoordP4uiv(a0,a1,a2,);
}
__gshared glbfn_glNormalP3ui glNormalP3ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glNormalP3ui_loader(a0,a1,);
};
private auto glbfn_glNormalP3ui_loader (uint a0, uint a1) nothrow @nogc {
  glNormalP3ui = cast(glbfn_glNormalP3ui)glbindGetProcAddress(`glNormalP3ui`);
  if (glNormalP3ui is null) assert(0, `OpenGL function 'glNormalP3ui' not found!`);
  glNormalP3ui(a0,a1,);
}
__gshared glbfn_glNormalP3uiv glNormalP3uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glNormalP3uiv_loader(a0,a1,);
};
private auto glbfn_glNormalP3uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glNormalP3uiv = cast(glbfn_glNormalP3uiv)glbindGetProcAddress(`glNormalP3uiv`);
  if (glNormalP3uiv is null) assert(0, `OpenGL function 'glNormalP3uiv' not found!`);
  glNormalP3uiv(a0,a1,);
}
__gshared glbfn_glColorP3ui glColorP3ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glColorP3ui_loader(a0,a1,);
};
private auto glbfn_glColorP3ui_loader (uint a0, uint a1) nothrow @nogc {
  glColorP3ui = cast(glbfn_glColorP3ui)glbindGetProcAddress(`glColorP3ui`);
  if (glColorP3ui is null) assert(0, `OpenGL function 'glColorP3ui' not found!`);
  glColorP3ui(a0,a1,);
}
__gshared glbfn_glColorP3uiv glColorP3uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glColorP3uiv_loader(a0,a1,);
};
private auto glbfn_glColorP3uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glColorP3uiv = cast(glbfn_glColorP3uiv)glbindGetProcAddress(`glColorP3uiv`);
  if (glColorP3uiv is null) assert(0, `OpenGL function 'glColorP3uiv' not found!`);
  glColorP3uiv(a0,a1,);
}
__gshared glbfn_glColorP4ui glColorP4ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glColorP4ui_loader(a0,a1,);
};
private auto glbfn_glColorP4ui_loader (uint a0, uint a1) nothrow @nogc {
  glColorP4ui = cast(glbfn_glColorP4ui)glbindGetProcAddress(`glColorP4ui`);
  if (glColorP4ui is null) assert(0, `OpenGL function 'glColorP4ui' not found!`);
  glColorP4ui(a0,a1,);
}
__gshared glbfn_glColorP4uiv glColorP4uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glColorP4uiv_loader(a0,a1,);
};
private auto glbfn_glColorP4uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glColorP4uiv = cast(glbfn_glColorP4uiv)glbindGetProcAddress(`glColorP4uiv`);
  if (glColorP4uiv is null) assert(0, `OpenGL function 'glColorP4uiv' not found!`);
  glColorP4uiv(a0,a1,);
}
__gshared glbfn_glSecondaryColorP3ui glSecondaryColorP3ui = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glSecondaryColorP3ui_loader(a0,a1,);
};
private auto glbfn_glSecondaryColorP3ui_loader (uint a0, uint a1) nothrow @nogc {
  glSecondaryColorP3ui = cast(glbfn_glSecondaryColorP3ui)glbindGetProcAddress(`glSecondaryColorP3ui`);
  if (glSecondaryColorP3ui is null) assert(0, `OpenGL function 'glSecondaryColorP3ui' not found!`);
  glSecondaryColorP3ui(a0,a1,);
}
__gshared glbfn_glSecondaryColorP3uiv glSecondaryColorP3uiv = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glSecondaryColorP3uiv_loader(a0,a1,);
};
private auto glbfn_glSecondaryColorP3uiv_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glSecondaryColorP3uiv = cast(glbfn_glSecondaryColorP3uiv)glbindGetProcAddress(`glSecondaryColorP3uiv`);
  if (glSecondaryColorP3uiv is null) assert(0, `OpenGL function 'glSecondaryColorP3uiv' not found!`);
  glSecondaryColorP3uiv(a0,a1,);
}
__gshared glbfn_glMinSampleShading glMinSampleShading = function void (float a0) nothrow @nogc {
  glbfn_glMinSampleShading_loader(a0,);
};
private auto glbfn_glMinSampleShading_loader (float a0) nothrow @nogc {
  glMinSampleShading = cast(glbfn_glMinSampleShading)glbindGetProcAddress(`glMinSampleShading`);
  if (glMinSampleShading is null) assert(0, `OpenGL function 'glMinSampleShading' not found!`);
  glMinSampleShading(a0,);
}
__gshared glbfn_glBlendEquationi glBlendEquationi = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBlendEquationi_loader(a0,a1,);
};
private auto glbfn_glBlendEquationi_loader (uint a0, uint a1) nothrow @nogc {
  glBlendEquationi = cast(glbfn_glBlendEquationi)glbindGetProcAddress(`glBlendEquationi`);
  if (glBlendEquationi is null) assert(0, `OpenGL function 'glBlendEquationi' not found!`);
  glBlendEquationi(a0,a1,);
}
__gshared glbfn_glBlendEquationSeparatei glBlendEquationSeparatei = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBlendEquationSeparatei_loader(a0,a1,a2,);
};
private auto glbfn_glBlendEquationSeparatei_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBlendEquationSeparatei = cast(glbfn_glBlendEquationSeparatei)glbindGetProcAddress(`glBlendEquationSeparatei`);
  if (glBlendEquationSeparatei is null) assert(0, `OpenGL function 'glBlendEquationSeparatei' not found!`);
  glBlendEquationSeparatei(a0,a1,a2,);
}
__gshared glbfn_glBlendFunci glBlendFunci = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBlendFunci_loader(a0,a1,a2,);
};
private auto glbfn_glBlendFunci_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBlendFunci = cast(glbfn_glBlendFunci)glbindGetProcAddress(`glBlendFunci`);
  if (glBlendFunci is null) assert(0, `OpenGL function 'glBlendFunci' not found!`);
  glBlendFunci(a0,a1,a2,);
}
__gshared glbfn_glBlendFuncSeparatei glBlendFuncSeparatei = function void (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glBlendFuncSeparatei_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glBlendFuncSeparatei_loader (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glBlendFuncSeparatei = cast(glbfn_glBlendFuncSeparatei)glbindGetProcAddress(`glBlendFuncSeparatei`);
  if (glBlendFuncSeparatei is null) assert(0, `OpenGL function 'glBlendFuncSeparatei' not found!`);
  glBlendFuncSeparatei(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawArraysIndirect glDrawArraysIndirect = function void (uint a0, const(void)* a1) nothrow @nogc {
  glbfn_glDrawArraysIndirect_loader(a0,a1,);
};
private auto glbfn_glDrawArraysIndirect_loader (uint a0, const(void)* a1) nothrow @nogc {
  glDrawArraysIndirect = cast(glbfn_glDrawArraysIndirect)glbindGetProcAddress(`glDrawArraysIndirect`);
  if (glDrawArraysIndirect is null) assert(0, `OpenGL function 'glDrawArraysIndirect' not found!`);
  glDrawArraysIndirect(a0,a1,);
}
__gshared glbfn_glDrawElementsIndirect glDrawElementsIndirect = function void (uint a0, uint a1, const(void)* a2) nothrow @nogc {
  glbfn_glDrawElementsIndirect_loader(a0,a1,a2,);
};
private auto glbfn_glDrawElementsIndirect_loader (uint a0, uint a1, const(void)* a2) nothrow @nogc {
  glDrawElementsIndirect = cast(glbfn_glDrawElementsIndirect)glbindGetProcAddress(`glDrawElementsIndirect`);
  if (glDrawElementsIndirect is null) assert(0, `OpenGL function 'glDrawElementsIndirect' not found!`);
  glDrawElementsIndirect(a0,a1,a2,);
}
__gshared glbfn_glUniform1d glUniform1d = function void (int a0, double a1) nothrow @nogc {
  glbfn_glUniform1d_loader(a0,a1,);
};
private auto glbfn_glUniform1d_loader (int a0, double a1) nothrow @nogc {
  glUniform1d = cast(glbfn_glUniform1d)glbindGetProcAddress(`glUniform1d`);
  if (glUniform1d is null) assert(0, `OpenGL function 'glUniform1d' not found!`);
  glUniform1d(a0,a1,);
}
__gshared glbfn_glUniform2d glUniform2d = function void (int a0, double a1, double a2) nothrow @nogc {
  glbfn_glUniform2d_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2d_loader (int a0, double a1, double a2) nothrow @nogc {
  glUniform2d = cast(glbfn_glUniform2d)glbindGetProcAddress(`glUniform2d`);
  if (glUniform2d is null) assert(0, `OpenGL function 'glUniform2d' not found!`);
  glUniform2d(a0,a1,a2,);
}
__gshared glbfn_glUniform3d glUniform3d = function void (int a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glUniform3d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3d_loader (int a0, double a1, double a2, double a3) nothrow @nogc {
  glUniform3d = cast(glbfn_glUniform3d)glbindGetProcAddress(`glUniform3d`);
  if (glUniform3d is null) assert(0, `OpenGL function 'glUniform3d' not found!`);
  glUniform3d(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4d glUniform4d = function void (int a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glUniform4d_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4d_loader (int a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glUniform4d = cast(glbfn_glUniform4d)glbindGetProcAddress(`glUniform4d`);
  if (glUniform4d is null) assert(0, `OpenGL function 'glUniform4d' not found!`);
  glUniform4d(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1dv glUniform1dv = function void (int a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glUniform1dv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1dv_loader (int a0, int a1, const(double)* a2) nothrow @nogc {
  glUniform1dv = cast(glbfn_glUniform1dv)glbindGetProcAddress(`glUniform1dv`);
  if (glUniform1dv is null) assert(0, `OpenGL function 'glUniform1dv' not found!`);
  glUniform1dv(a0,a1,a2,);
}
__gshared glbfn_glUniform2dv glUniform2dv = function void (int a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glUniform2dv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2dv_loader (int a0, int a1, const(double)* a2) nothrow @nogc {
  glUniform2dv = cast(glbfn_glUniform2dv)glbindGetProcAddress(`glUniform2dv`);
  if (glUniform2dv is null) assert(0, `OpenGL function 'glUniform2dv' not found!`);
  glUniform2dv(a0,a1,a2,);
}
__gshared glbfn_glUniform3dv glUniform3dv = function void (int a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glUniform3dv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3dv_loader (int a0, int a1, const(double)* a2) nothrow @nogc {
  glUniform3dv = cast(glbfn_glUniform3dv)glbindGetProcAddress(`glUniform3dv`);
  if (glUniform3dv is null) assert(0, `OpenGL function 'glUniform3dv' not found!`);
  glUniform3dv(a0,a1,a2,);
}
__gshared glbfn_glUniform4dv glUniform4dv = function void (int a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glUniform4dv_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4dv_loader (int a0, int a1, const(double)* a2) nothrow @nogc {
  glUniform4dv = cast(glbfn_glUniform4dv)glbindGetProcAddress(`glUniform4dv`);
  if (glUniform4dv is null) assert(0, `OpenGL function 'glUniform4dv' not found!`);
  glUniform4dv(a0,a1,a2,);
}
__gshared glbfn_glUniformMatrix2dv glUniformMatrix2dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix2dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix2dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix2dv = cast(glbfn_glUniformMatrix2dv)glbindGetProcAddress(`glUniformMatrix2dv`);
  if (glUniformMatrix2dv is null) assert(0, `OpenGL function 'glUniformMatrix2dv' not found!`);
  glUniformMatrix2dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix3dv glUniformMatrix3dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix3dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix3dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix3dv = cast(glbfn_glUniformMatrix3dv)glbindGetProcAddress(`glUniformMatrix3dv`);
  if (glUniformMatrix3dv is null) assert(0, `OpenGL function 'glUniformMatrix3dv' not found!`);
  glUniformMatrix3dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix4dv glUniformMatrix4dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix4dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix4dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix4dv = cast(glbfn_glUniformMatrix4dv)glbindGetProcAddress(`glUniformMatrix4dv`);
  if (glUniformMatrix4dv is null) assert(0, `OpenGL function 'glUniformMatrix4dv' not found!`);
  glUniformMatrix4dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix2x3dv glUniformMatrix2x3dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix2x3dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix2x3dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix2x3dv = cast(glbfn_glUniformMatrix2x3dv)glbindGetProcAddress(`glUniformMatrix2x3dv`);
  if (glUniformMatrix2x3dv is null) assert(0, `OpenGL function 'glUniformMatrix2x3dv' not found!`);
  glUniformMatrix2x3dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix2x4dv glUniformMatrix2x4dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix2x4dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix2x4dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix2x4dv = cast(glbfn_glUniformMatrix2x4dv)glbindGetProcAddress(`glUniformMatrix2x4dv`);
  if (glUniformMatrix2x4dv is null) assert(0, `OpenGL function 'glUniformMatrix2x4dv' not found!`);
  glUniformMatrix2x4dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix3x2dv glUniformMatrix3x2dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix3x2dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix3x2dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix3x2dv = cast(glbfn_glUniformMatrix3x2dv)glbindGetProcAddress(`glUniformMatrix3x2dv`);
  if (glUniformMatrix3x2dv is null) assert(0, `OpenGL function 'glUniformMatrix3x2dv' not found!`);
  glUniformMatrix3x2dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix3x4dv glUniformMatrix3x4dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix3x4dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix3x4dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix3x4dv = cast(glbfn_glUniformMatrix3x4dv)glbindGetProcAddress(`glUniformMatrix3x4dv`);
  if (glUniformMatrix3x4dv is null) assert(0, `OpenGL function 'glUniformMatrix3x4dv' not found!`);
  glUniformMatrix3x4dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix4x2dv glUniformMatrix4x2dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix4x2dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix4x2dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix4x2dv = cast(glbfn_glUniformMatrix4x2dv)glbindGetProcAddress(`glUniformMatrix4x2dv`);
  if (glUniformMatrix4x2dv is null) assert(0, `OpenGL function 'glUniformMatrix4x2dv' not found!`);
  glUniformMatrix4x2dv(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix4x3dv glUniformMatrix4x3dv = function void (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glbfn_glUniformMatrix4x3dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix4x3dv_loader (int a0, int a1, ubyte a2, const(double)* a3) nothrow @nogc {
  glUniformMatrix4x3dv = cast(glbfn_glUniformMatrix4x3dv)glbindGetProcAddress(`glUniformMatrix4x3dv`);
  if (glUniformMatrix4x3dv is null) assert(0, `OpenGL function 'glUniformMatrix4x3dv' not found!`);
  glUniformMatrix4x3dv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetUniformdv glGetUniformdv = function void (uint a0, int a1, double* a2) nothrow @nogc {
  glbfn_glGetUniformdv_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformdv_loader (uint a0, int a1, double* a2) nothrow @nogc {
  glGetUniformdv = cast(glbfn_glGetUniformdv)glbindGetProcAddress(`glGetUniformdv`);
  if (glGetUniformdv is null) assert(0, `OpenGL function 'glGetUniformdv' not found!`);
  glGetUniformdv(a0,a1,a2,);
}
__gshared glbfn_glGetSubroutineUniformLocation glGetSubroutineUniformLocation = function int (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  return glbfn_glGetSubroutineUniformLocation_loader(a0,a1,a2,);
};
private auto glbfn_glGetSubroutineUniformLocation_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glGetSubroutineUniformLocation = cast(glbfn_glGetSubroutineUniformLocation)glbindGetProcAddress(`glGetSubroutineUniformLocation`);
  if (glGetSubroutineUniformLocation is null) assert(0, `OpenGL function 'glGetSubroutineUniformLocation' not found!`);
  return glGetSubroutineUniformLocation(a0,a1,a2,);
}
__gshared glbfn_glGetSubroutineIndex glGetSubroutineIndex = function uint (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  return glbfn_glGetSubroutineIndex_loader(a0,a1,a2,);
};
private auto glbfn_glGetSubroutineIndex_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glGetSubroutineIndex = cast(glbfn_glGetSubroutineIndex)glbindGetProcAddress(`glGetSubroutineIndex`);
  if (glGetSubroutineIndex is null) assert(0, `OpenGL function 'glGetSubroutineIndex' not found!`);
  return glGetSubroutineIndex(a0,a1,a2,);
}
__gshared glbfn_glGetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv = function void (uint a0, uint a1, uint a2, uint a3, int* a4) nothrow @nogc {
  glbfn_glGetActiveSubroutineUniformiv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetActiveSubroutineUniformiv_loader (uint a0, uint a1, uint a2, uint a3, int* a4) nothrow @nogc {
  glGetActiveSubroutineUniformiv = cast(glbfn_glGetActiveSubroutineUniformiv)glbindGetProcAddress(`glGetActiveSubroutineUniformiv`);
  if (glGetActiveSubroutineUniformiv is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformiv' not found!`);
  glGetActiveSubroutineUniformiv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetActiveSubroutineUniformName glGetActiveSubroutineUniformName = function void (uint a0, uint a1, uint a2, int a3, int* a4, char* a5) nothrow @nogc {
  glbfn_glGetActiveSubroutineUniformName_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetActiveSubroutineUniformName_loader (uint a0, uint a1, uint a2, int a3, int* a4, char* a5) nothrow @nogc {
  glGetActiveSubroutineUniformName = cast(glbfn_glGetActiveSubroutineUniformName)glbindGetProcAddress(`glGetActiveSubroutineUniformName`);
  if (glGetActiveSubroutineUniformName is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformName' not found!`);
  glGetActiveSubroutineUniformName(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetActiveSubroutineName glGetActiveSubroutineName = function void (uint a0, uint a1, uint a2, int a3, int* a4, char* a5) nothrow @nogc {
  glbfn_glGetActiveSubroutineName_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetActiveSubroutineName_loader (uint a0, uint a1, uint a2, int a3, int* a4, char* a5) nothrow @nogc {
  glGetActiveSubroutineName = cast(glbfn_glGetActiveSubroutineName)glbindGetProcAddress(`glGetActiveSubroutineName`);
  if (glGetActiveSubroutineName is null) assert(0, `OpenGL function 'glGetActiveSubroutineName' not found!`);
  glGetActiveSubroutineName(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glUniformSubroutinesuiv glUniformSubroutinesuiv = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniformSubroutinesuiv_loader(a0,a1,a2,);
};
private auto glbfn_glUniformSubroutinesuiv_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniformSubroutinesuiv = cast(glbfn_glUniformSubroutinesuiv)glbindGetProcAddress(`glUniformSubroutinesuiv`);
  if (glUniformSubroutinesuiv is null) assert(0, `OpenGL function 'glUniformSubroutinesuiv' not found!`);
  glUniformSubroutinesuiv(a0,a1,a2,);
}
__gshared glbfn_glGetUniformSubroutineuiv glGetUniformSubroutineuiv = function void (uint a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glGetUniformSubroutineuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformSubroutineuiv_loader (uint a0, int a1, uint* a2) nothrow @nogc {
  glGetUniformSubroutineuiv = cast(glbfn_glGetUniformSubroutineuiv)glbindGetProcAddress(`glGetUniformSubroutineuiv`);
  if (glGetUniformSubroutineuiv is null) assert(0, `OpenGL function 'glGetUniformSubroutineuiv' not found!`);
  glGetUniformSubroutineuiv(a0,a1,a2,);
}
__gshared glbfn_glGetProgramStageiv glGetProgramStageiv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetProgramStageiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramStageiv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetProgramStageiv = cast(glbfn_glGetProgramStageiv)glbindGetProcAddress(`glGetProgramStageiv`);
  if (glGetProgramStageiv is null) assert(0, `OpenGL function 'glGetProgramStageiv' not found!`);
  glGetProgramStageiv(a0,a1,a2,a3,);
}
__gshared glbfn_glPatchParameteri glPatchParameteri = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPatchParameteri_loader(a0,a1,);
};
private auto glbfn_glPatchParameteri_loader (uint a0, int a1) nothrow @nogc {
  glPatchParameteri = cast(glbfn_glPatchParameteri)glbindGetProcAddress(`glPatchParameteri`);
  if (glPatchParameteri is null) assert(0, `OpenGL function 'glPatchParameteri' not found!`);
  glPatchParameteri(a0,a1,);
}
__gshared glbfn_glPatchParameterfv glPatchParameterfv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glPatchParameterfv_loader(a0,a1,);
};
private auto glbfn_glPatchParameterfv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glPatchParameterfv = cast(glbfn_glPatchParameterfv)glbindGetProcAddress(`glPatchParameterfv`);
  if (glPatchParameterfv is null) assert(0, `OpenGL function 'glPatchParameterfv' not found!`);
  glPatchParameterfv(a0,a1,);
}
__gshared glbfn_glBindTransformFeedback glBindTransformFeedback = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindTransformFeedback_loader(a0,a1,);
};
private auto glbfn_glBindTransformFeedback_loader (uint a0, uint a1) nothrow @nogc {
  glBindTransformFeedback = cast(glbfn_glBindTransformFeedback)glbindGetProcAddress(`glBindTransformFeedback`);
  if (glBindTransformFeedback is null) assert(0, `OpenGL function 'glBindTransformFeedback' not found!`);
  glBindTransformFeedback(a0,a1,);
}
__gshared glbfn_glDeleteTransformFeedbacks glDeleteTransformFeedbacks = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteTransformFeedbacks_loader(a0,a1,);
};
private auto glbfn_glDeleteTransformFeedbacks_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteTransformFeedbacks = cast(glbfn_glDeleteTransformFeedbacks)glbindGetProcAddress(`glDeleteTransformFeedbacks`);
  if (glDeleteTransformFeedbacks is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacks' not found!`);
  glDeleteTransformFeedbacks(a0,a1,);
}
__gshared glbfn_glGenTransformFeedbacks glGenTransformFeedbacks = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenTransformFeedbacks_loader(a0,a1,);
};
private auto glbfn_glGenTransformFeedbacks_loader (int a0, uint* a1) nothrow @nogc {
  glGenTransformFeedbacks = cast(glbfn_glGenTransformFeedbacks)glbindGetProcAddress(`glGenTransformFeedbacks`);
  if (glGenTransformFeedbacks is null) assert(0, `OpenGL function 'glGenTransformFeedbacks' not found!`);
  glGenTransformFeedbacks(a0,a1,);
}
__gshared glbfn_glIsTransformFeedback glIsTransformFeedback = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsTransformFeedback_loader(a0,);
};
private auto glbfn_glIsTransformFeedback_loader (uint a0) nothrow @nogc {
  glIsTransformFeedback = cast(glbfn_glIsTransformFeedback)glbindGetProcAddress(`glIsTransformFeedback`);
  if (glIsTransformFeedback is null) assert(0, `OpenGL function 'glIsTransformFeedback' not found!`);
  return glIsTransformFeedback(a0,);
}
__gshared glbfn_glPauseTransformFeedback glPauseTransformFeedback = function void () nothrow @nogc {
  glbfn_glPauseTransformFeedback_loader();
};
private auto glbfn_glPauseTransformFeedback_loader () nothrow @nogc {
  glPauseTransformFeedback = cast(glbfn_glPauseTransformFeedback)glbindGetProcAddress(`glPauseTransformFeedback`);
  if (glPauseTransformFeedback is null) assert(0, `OpenGL function 'glPauseTransformFeedback' not found!`);
  glPauseTransformFeedback();
}
__gshared glbfn_glResumeTransformFeedback glResumeTransformFeedback = function void () nothrow @nogc {
  glbfn_glResumeTransformFeedback_loader();
};
private auto glbfn_glResumeTransformFeedback_loader () nothrow @nogc {
  glResumeTransformFeedback = cast(glbfn_glResumeTransformFeedback)glbindGetProcAddress(`glResumeTransformFeedback`);
  if (glResumeTransformFeedback is null) assert(0, `OpenGL function 'glResumeTransformFeedback' not found!`);
  glResumeTransformFeedback();
}
__gshared glbfn_glDrawTransformFeedback glDrawTransformFeedback = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDrawTransformFeedback_loader(a0,a1,);
};
private auto glbfn_glDrawTransformFeedback_loader (uint a0, uint a1) nothrow @nogc {
  glDrawTransformFeedback = cast(glbfn_glDrawTransformFeedback)glbindGetProcAddress(`glDrawTransformFeedback`);
  if (glDrawTransformFeedback is null) assert(0, `OpenGL function 'glDrawTransformFeedback' not found!`);
  glDrawTransformFeedback(a0,a1,);
}
__gshared glbfn_glDrawTransformFeedbackStream glDrawTransformFeedbackStream = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glDrawTransformFeedbackStream_loader(a0,a1,a2,);
};
private auto glbfn_glDrawTransformFeedbackStream_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glDrawTransformFeedbackStream = cast(glbfn_glDrawTransformFeedbackStream)glbindGetProcAddress(`glDrawTransformFeedbackStream`);
  if (glDrawTransformFeedbackStream is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStream' not found!`);
  glDrawTransformFeedbackStream(a0,a1,a2,);
}
__gshared glbfn_glBeginQueryIndexed glBeginQueryIndexed = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBeginQueryIndexed_loader(a0,a1,a2,);
};
private auto glbfn_glBeginQueryIndexed_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBeginQueryIndexed = cast(glbfn_glBeginQueryIndexed)glbindGetProcAddress(`glBeginQueryIndexed`);
  if (glBeginQueryIndexed is null) assert(0, `OpenGL function 'glBeginQueryIndexed' not found!`);
  glBeginQueryIndexed(a0,a1,a2,);
}
__gshared glbfn_glEndQueryIndexed glEndQueryIndexed = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEndQueryIndexed_loader(a0,a1,);
};
private auto glbfn_glEndQueryIndexed_loader (uint a0, uint a1) nothrow @nogc {
  glEndQueryIndexed = cast(glbfn_glEndQueryIndexed)glbindGetProcAddress(`glEndQueryIndexed`);
  if (glEndQueryIndexed is null) assert(0, `OpenGL function 'glEndQueryIndexed' not found!`);
  glEndQueryIndexed(a0,a1,);
}
__gshared glbfn_glGetQueryIndexediv glGetQueryIndexediv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetQueryIndexediv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetQueryIndexediv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetQueryIndexediv = cast(glbfn_glGetQueryIndexediv)glbindGetProcAddress(`glGetQueryIndexediv`);
  if (glGetQueryIndexediv is null) assert(0, `OpenGL function 'glGetQueryIndexediv' not found!`);
  glGetQueryIndexediv(a0,a1,a2,a3,);
}
__gshared glbfn_glReleaseShaderCompiler glReleaseShaderCompiler = function void () nothrow @nogc {
  glbfn_glReleaseShaderCompiler_loader();
};
private auto glbfn_glReleaseShaderCompiler_loader () nothrow @nogc {
  glReleaseShaderCompiler = cast(glbfn_glReleaseShaderCompiler)glbindGetProcAddress(`glReleaseShaderCompiler`);
  if (glReleaseShaderCompiler is null) assert(0, `OpenGL function 'glReleaseShaderCompiler' not found!`);
  glReleaseShaderCompiler();
}
__gshared glbfn_glShaderBinary glShaderBinary = function void (int a0, const(uint)* a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glbfn_glShaderBinary_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glShaderBinary_loader (int a0, const(uint)* a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glShaderBinary = cast(glbfn_glShaderBinary)glbindGetProcAddress(`glShaderBinary`);
  if (glShaderBinary is null) assert(0, `OpenGL function 'glShaderBinary' not found!`);
  glShaderBinary(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetShaderPrecisionFormat glGetShaderPrecisionFormat = function void (uint a0, uint a1, int* a2, int* a3) nothrow @nogc {
  glbfn_glGetShaderPrecisionFormat_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetShaderPrecisionFormat_loader (uint a0, uint a1, int* a2, int* a3) nothrow @nogc {
  glGetShaderPrecisionFormat = cast(glbfn_glGetShaderPrecisionFormat)glbindGetProcAddress(`glGetShaderPrecisionFormat`);
  if (glGetShaderPrecisionFormat is null) assert(0, `OpenGL function 'glGetShaderPrecisionFormat' not found!`);
  glGetShaderPrecisionFormat(a0,a1,a2,a3,);
}
__gshared glbfn_glDepthRangef glDepthRangef = function void (float a0, float a1) nothrow @nogc {
  glbfn_glDepthRangef_loader(a0,a1,);
};
private auto glbfn_glDepthRangef_loader (float a0, float a1) nothrow @nogc {
  glDepthRangef = cast(glbfn_glDepthRangef)glbindGetProcAddress(`glDepthRangef`);
  if (glDepthRangef is null) assert(0, `OpenGL function 'glDepthRangef' not found!`);
  glDepthRangef(a0,a1,);
}
__gshared glbfn_glClearDepthf glClearDepthf = function void (float a0) nothrow @nogc {
  glbfn_glClearDepthf_loader(a0,);
};
private auto glbfn_glClearDepthf_loader (float a0) nothrow @nogc {
  glClearDepthf = cast(glbfn_glClearDepthf)glbindGetProcAddress(`glClearDepthf`);
  if (glClearDepthf is null) assert(0, `OpenGL function 'glClearDepthf' not found!`);
  glClearDepthf(a0,);
}
__gshared glbfn_glGetProgramBinary glGetProgramBinary = function void (uint a0, int a1, int* a2, uint* a3, void* a4) nothrow @nogc {
  glbfn_glGetProgramBinary_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetProgramBinary_loader (uint a0, int a1, int* a2, uint* a3, void* a4) nothrow @nogc {
  glGetProgramBinary = cast(glbfn_glGetProgramBinary)glbindGetProcAddress(`glGetProgramBinary`);
  if (glGetProgramBinary is null) assert(0, `OpenGL function 'glGetProgramBinary' not found!`);
  glGetProgramBinary(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramBinary glProgramBinary = function void (uint a0, uint a1, const(void)* a2, int a3) nothrow @nogc {
  glbfn_glProgramBinary_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramBinary_loader (uint a0, uint a1, const(void)* a2, int a3) nothrow @nogc {
  glProgramBinary = cast(glbfn_glProgramBinary)glbindGetProcAddress(`glProgramBinary`);
  if (glProgramBinary is null) assert(0, `OpenGL function 'glProgramBinary' not found!`);
  glProgramBinary(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramParameteri glProgramParameteri = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glProgramParameteri_loader(a0,a1,a2,);
};
private auto glbfn_glProgramParameteri_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glProgramParameteri = cast(glbfn_glProgramParameteri)glbindGetProcAddress(`glProgramParameteri`);
  if (glProgramParameteri is null) assert(0, `OpenGL function 'glProgramParameteri' not found!`);
  glProgramParameteri(a0,a1,a2,);
}
__gshared glbfn_glUseProgramStages glUseProgramStages = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glUseProgramStages_loader(a0,a1,a2,);
};
private auto glbfn_glUseProgramStages_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glUseProgramStages = cast(glbfn_glUseProgramStages)glbindGetProcAddress(`glUseProgramStages`);
  if (glUseProgramStages is null) assert(0, `OpenGL function 'glUseProgramStages' not found!`);
  glUseProgramStages(a0,a1,a2,);
}
__gshared glbfn_glActiveShaderProgram glActiveShaderProgram = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glActiveShaderProgram_loader(a0,a1,);
};
private auto glbfn_glActiveShaderProgram_loader (uint a0, uint a1) nothrow @nogc {
  glActiveShaderProgram = cast(glbfn_glActiveShaderProgram)glbindGetProcAddress(`glActiveShaderProgram`);
  if (glActiveShaderProgram is null) assert(0, `OpenGL function 'glActiveShaderProgram' not found!`);
  glActiveShaderProgram(a0,a1,);
}
__gshared glbfn_glCreateShaderProgramv glCreateShaderProgramv = function uint (uint a0, int a1, const(char*)* a2) nothrow @nogc {
  return glbfn_glCreateShaderProgramv_loader(a0,a1,a2,);
};
private auto glbfn_glCreateShaderProgramv_loader (uint a0, int a1, const(char*)* a2) nothrow @nogc {
  glCreateShaderProgramv = cast(glbfn_glCreateShaderProgramv)glbindGetProcAddress(`glCreateShaderProgramv`);
  if (glCreateShaderProgramv is null) assert(0, `OpenGL function 'glCreateShaderProgramv' not found!`);
  return glCreateShaderProgramv(a0,a1,a2,);
}
__gshared glbfn_glBindProgramPipeline glBindProgramPipeline = function void (uint a0) nothrow @nogc {
  glbfn_glBindProgramPipeline_loader(a0,);
};
private auto glbfn_glBindProgramPipeline_loader (uint a0) nothrow @nogc {
  glBindProgramPipeline = cast(glbfn_glBindProgramPipeline)glbindGetProcAddress(`glBindProgramPipeline`);
  if (glBindProgramPipeline is null) assert(0, `OpenGL function 'glBindProgramPipeline' not found!`);
  glBindProgramPipeline(a0,);
}
__gshared glbfn_glDeleteProgramPipelines glDeleteProgramPipelines = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteProgramPipelines_loader(a0,a1,);
};
private auto glbfn_glDeleteProgramPipelines_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteProgramPipelines = cast(glbfn_glDeleteProgramPipelines)glbindGetProcAddress(`glDeleteProgramPipelines`);
  if (glDeleteProgramPipelines is null) assert(0, `OpenGL function 'glDeleteProgramPipelines' not found!`);
  glDeleteProgramPipelines(a0,a1,);
}
__gshared glbfn_glGenProgramPipelines glGenProgramPipelines = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenProgramPipelines_loader(a0,a1,);
};
private auto glbfn_glGenProgramPipelines_loader (int a0, uint* a1) nothrow @nogc {
  glGenProgramPipelines = cast(glbfn_glGenProgramPipelines)glbindGetProcAddress(`glGenProgramPipelines`);
  if (glGenProgramPipelines is null) assert(0, `OpenGL function 'glGenProgramPipelines' not found!`);
  glGenProgramPipelines(a0,a1,);
}
__gshared glbfn_glIsProgramPipeline glIsProgramPipeline = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsProgramPipeline_loader(a0,);
};
private auto glbfn_glIsProgramPipeline_loader (uint a0) nothrow @nogc {
  glIsProgramPipeline = cast(glbfn_glIsProgramPipeline)glbindGetProcAddress(`glIsProgramPipeline`);
  if (glIsProgramPipeline is null) assert(0, `OpenGL function 'glIsProgramPipeline' not found!`);
  return glIsProgramPipeline(a0,);
}
__gshared glbfn_glGetProgramPipelineiv glGetProgramPipelineiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetProgramPipelineiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramPipelineiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetProgramPipelineiv = cast(glbfn_glGetProgramPipelineiv)glbindGetProcAddress(`glGetProgramPipelineiv`);
  if (glGetProgramPipelineiv is null) assert(0, `OpenGL function 'glGetProgramPipelineiv' not found!`);
  glGetProgramPipelineiv(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform1i glProgramUniform1i = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glProgramUniform1i_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1i_loader (uint a0, int a1, int a2) nothrow @nogc {
  glProgramUniform1i = cast(glbfn_glProgramUniform1i)glbindGetProcAddress(`glProgramUniform1i`);
  if (glProgramUniform1i is null) assert(0, `OpenGL function 'glProgramUniform1i' not found!`);
  glProgramUniform1i(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform1iv glProgramUniform1iv = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform1iv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1iv_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform1iv = cast(glbfn_glProgramUniform1iv)glbindGetProcAddress(`glProgramUniform1iv`);
  if (glProgramUniform1iv is null) assert(0, `OpenGL function 'glProgramUniform1iv' not found!`);
  glProgramUniform1iv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1f glProgramUniform1f = function void (uint a0, int a1, float a2) nothrow @nogc {
  glbfn_glProgramUniform1f_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1f_loader (uint a0, int a1, float a2) nothrow @nogc {
  glProgramUniform1f = cast(glbfn_glProgramUniform1f)glbindGetProcAddress(`glProgramUniform1f`);
  if (glProgramUniform1f is null) assert(0, `OpenGL function 'glProgramUniform1f' not found!`);
  glProgramUniform1f(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform1fv glProgramUniform1fv = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform1fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1fv_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform1fv = cast(glbfn_glProgramUniform1fv)glbindGetProcAddress(`glProgramUniform1fv`);
  if (glProgramUniform1fv is null) assert(0, `OpenGL function 'glProgramUniform1fv' not found!`);
  glProgramUniform1fv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1d glProgramUniform1d = function void (uint a0, int a1, double a2) nothrow @nogc {
  glbfn_glProgramUniform1d_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1d_loader (uint a0, int a1, double a2) nothrow @nogc {
  glProgramUniform1d = cast(glbfn_glProgramUniform1d)glbindGetProcAddress(`glProgramUniform1d`);
  if (glProgramUniform1d is null) assert(0, `OpenGL function 'glProgramUniform1d' not found!`);
  glProgramUniform1d(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform1dv glProgramUniform1dv = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform1dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1dv_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform1dv = cast(glbfn_glProgramUniform1dv)glbindGetProcAddress(`glProgramUniform1dv`);
  if (glProgramUniform1dv is null) assert(0, `OpenGL function 'glProgramUniform1dv' not found!`);
  glProgramUniform1dv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1ui glProgramUniform1ui = function void (uint a0, int a1, uint a2) nothrow @nogc {
  glbfn_glProgramUniform1ui_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1ui_loader (uint a0, int a1, uint a2) nothrow @nogc {
  glProgramUniform1ui = cast(glbfn_glProgramUniform1ui)glbindGetProcAddress(`glProgramUniform1ui`);
  if (glProgramUniform1ui is null) assert(0, `OpenGL function 'glProgramUniform1ui' not found!`);
  glProgramUniform1ui(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform1uiv glProgramUniform1uiv = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform1uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1uiv_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform1uiv = cast(glbfn_glProgramUniform1uiv)glbindGetProcAddress(`glProgramUniform1uiv`);
  if (glProgramUniform1uiv is null) assert(0, `OpenGL function 'glProgramUniform1uiv' not found!`);
  glProgramUniform1uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2i glProgramUniform2i = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glProgramUniform2i_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2i_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glProgramUniform2i = cast(glbfn_glProgramUniform2i)glbindGetProcAddress(`glProgramUniform2i`);
  if (glProgramUniform2i is null) assert(0, `OpenGL function 'glProgramUniform2i' not found!`);
  glProgramUniform2i(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2iv glProgramUniform2iv = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform2iv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2iv_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform2iv = cast(glbfn_glProgramUniform2iv)glbindGetProcAddress(`glProgramUniform2iv`);
  if (glProgramUniform2iv is null) assert(0, `OpenGL function 'glProgramUniform2iv' not found!`);
  glProgramUniform2iv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2f glProgramUniform2f = function void (uint a0, int a1, float a2, float a3) nothrow @nogc {
  glbfn_glProgramUniform2f_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2f_loader (uint a0, int a1, float a2, float a3) nothrow @nogc {
  glProgramUniform2f = cast(glbfn_glProgramUniform2f)glbindGetProcAddress(`glProgramUniform2f`);
  if (glProgramUniform2f is null) assert(0, `OpenGL function 'glProgramUniform2f' not found!`);
  glProgramUniform2f(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2fv glProgramUniform2fv = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform2fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2fv_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform2fv = cast(glbfn_glProgramUniform2fv)glbindGetProcAddress(`glProgramUniform2fv`);
  if (glProgramUniform2fv is null) assert(0, `OpenGL function 'glProgramUniform2fv' not found!`);
  glProgramUniform2fv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2d glProgramUniform2d = function void (uint a0, int a1, double a2, double a3) nothrow @nogc {
  glbfn_glProgramUniform2d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2d_loader (uint a0, int a1, double a2, double a3) nothrow @nogc {
  glProgramUniform2d = cast(glbfn_glProgramUniform2d)glbindGetProcAddress(`glProgramUniform2d`);
  if (glProgramUniform2d is null) assert(0, `OpenGL function 'glProgramUniform2d' not found!`);
  glProgramUniform2d(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2dv glProgramUniform2dv = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform2dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2dv_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform2dv = cast(glbfn_glProgramUniform2dv)glbindGetProcAddress(`glProgramUniform2dv`);
  if (glProgramUniform2dv is null) assert(0, `OpenGL function 'glProgramUniform2dv' not found!`);
  glProgramUniform2dv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2ui glProgramUniform2ui = function void (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glProgramUniform2ui_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2ui_loader (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glProgramUniform2ui = cast(glbfn_glProgramUniform2ui)glbindGetProcAddress(`glProgramUniform2ui`);
  if (glProgramUniform2ui is null) assert(0, `OpenGL function 'glProgramUniform2ui' not found!`);
  glProgramUniform2ui(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2uiv glProgramUniform2uiv = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform2uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2uiv_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform2uiv = cast(glbfn_glProgramUniform2uiv)glbindGetProcAddress(`glProgramUniform2uiv`);
  if (glProgramUniform2uiv is null) assert(0, `OpenGL function 'glProgramUniform2uiv' not found!`);
  glProgramUniform2uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3i glProgramUniform3i = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glProgramUniform3i_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3i_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glProgramUniform3i = cast(glbfn_glProgramUniform3i)glbindGetProcAddress(`glProgramUniform3i`);
  if (glProgramUniform3i is null) assert(0, `OpenGL function 'glProgramUniform3i' not found!`);
  glProgramUniform3i(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform3iv glProgramUniform3iv = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform3iv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3iv_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform3iv = cast(glbfn_glProgramUniform3iv)glbindGetProcAddress(`glProgramUniform3iv`);
  if (glProgramUniform3iv is null) assert(0, `OpenGL function 'glProgramUniform3iv' not found!`);
  glProgramUniform3iv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3f glProgramUniform3f = function void (uint a0, int a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glProgramUniform3f_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3f_loader (uint a0, int a1, float a2, float a3, float a4) nothrow @nogc {
  glProgramUniform3f = cast(glbfn_glProgramUniform3f)glbindGetProcAddress(`glProgramUniform3f`);
  if (glProgramUniform3f is null) assert(0, `OpenGL function 'glProgramUniform3f' not found!`);
  glProgramUniform3f(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform3fv glProgramUniform3fv = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform3fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3fv_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform3fv = cast(glbfn_glProgramUniform3fv)glbindGetProcAddress(`glProgramUniform3fv`);
  if (glProgramUniform3fv is null) assert(0, `OpenGL function 'glProgramUniform3fv' not found!`);
  glProgramUniform3fv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3d glProgramUniform3d = function void (uint a0, int a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glProgramUniform3d_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3d_loader (uint a0, int a1, double a2, double a3, double a4) nothrow @nogc {
  glProgramUniform3d = cast(glbfn_glProgramUniform3d)glbindGetProcAddress(`glProgramUniform3d`);
  if (glProgramUniform3d is null) assert(0, `OpenGL function 'glProgramUniform3d' not found!`);
  glProgramUniform3d(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform3dv glProgramUniform3dv = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform3dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3dv_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform3dv = cast(glbfn_glProgramUniform3dv)glbindGetProcAddress(`glProgramUniform3dv`);
  if (glProgramUniform3dv is null) assert(0, `OpenGL function 'glProgramUniform3dv' not found!`);
  glProgramUniform3dv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3ui glProgramUniform3ui = function void (uint a0, int a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glProgramUniform3ui_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3ui_loader (uint a0, int a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glProgramUniform3ui = cast(glbfn_glProgramUniform3ui)glbindGetProcAddress(`glProgramUniform3ui`);
  if (glProgramUniform3ui is null) assert(0, `OpenGL function 'glProgramUniform3ui' not found!`);
  glProgramUniform3ui(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform3uiv glProgramUniform3uiv = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform3uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3uiv_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform3uiv = cast(glbfn_glProgramUniform3uiv)glbindGetProcAddress(`glProgramUniform3uiv`);
  if (glProgramUniform3uiv is null) assert(0, `OpenGL function 'glProgramUniform3uiv' not found!`);
  glProgramUniform3uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4i glProgramUniform4i = function void (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glProgramUniform4i_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4i_loader (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glProgramUniform4i = cast(glbfn_glProgramUniform4i)glbindGetProcAddress(`glProgramUniform4i`);
  if (glProgramUniform4i is null) assert(0, `OpenGL function 'glProgramUniform4i' not found!`);
  glProgramUniform4i(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform4iv glProgramUniform4iv = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform4iv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4iv_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform4iv = cast(glbfn_glProgramUniform4iv)glbindGetProcAddress(`glProgramUniform4iv`);
  if (glProgramUniform4iv is null) assert(0, `OpenGL function 'glProgramUniform4iv' not found!`);
  glProgramUniform4iv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4f glProgramUniform4f = function void (uint a0, int a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glProgramUniform4f_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4f_loader (uint a0, int a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glProgramUniform4f = cast(glbfn_glProgramUniform4f)glbindGetProcAddress(`glProgramUniform4f`);
  if (glProgramUniform4f is null) assert(0, `OpenGL function 'glProgramUniform4f' not found!`);
  glProgramUniform4f(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform4fv glProgramUniform4fv = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform4fv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4fv_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform4fv = cast(glbfn_glProgramUniform4fv)glbindGetProcAddress(`glProgramUniform4fv`);
  if (glProgramUniform4fv is null) assert(0, `OpenGL function 'glProgramUniform4fv' not found!`);
  glProgramUniform4fv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4d glProgramUniform4d = function void (uint a0, int a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glbfn_glProgramUniform4d_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4d_loader (uint a0, int a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glProgramUniform4d = cast(glbfn_glProgramUniform4d)glbindGetProcAddress(`glProgramUniform4d`);
  if (glProgramUniform4d is null) assert(0, `OpenGL function 'glProgramUniform4d' not found!`);
  glProgramUniform4d(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform4dv glProgramUniform4dv = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform4dv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4dv_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform4dv = cast(glbfn_glProgramUniform4dv)glbindGetProcAddress(`glProgramUniform4dv`);
  if (glProgramUniform4dv is null) assert(0, `OpenGL function 'glProgramUniform4dv' not found!`);
  glProgramUniform4dv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4ui glProgramUniform4ui = function void (uint a0, int a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glProgramUniform4ui_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4ui_loader (uint a0, int a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glProgramUniform4ui = cast(glbfn_glProgramUniform4ui)glbindGetProcAddress(`glProgramUniform4ui`);
  if (glProgramUniform4ui is null) assert(0, `OpenGL function 'glProgramUniform4ui' not found!`);
  glProgramUniform4ui(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform4uiv glProgramUniform4uiv = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform4uiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4uiv_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform4uiv = cast(glbfn_glProgramUniform4uiv)glbindGetProcAddress(`glProgramUniform4uiv`);
  if (glProgramUniform4uiv is null) assert(0, `OpenGL function 'glProgramUniform4uiv' not found!`);
  glProgramUniform4uiv(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniformMatrix2fv glProgramUniformMatrix2fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix2fv = cast(glbfn_glProgramUniformMatrix2fv)glbindGetProcAddress(`glProgramUniformMatrix2fv`);
  if (glProgramUniformMatrix2fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fv' not found!`);
  glProgramUniformMatrix2fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3fv glProgramUniformMatrix3fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix3fv = cast(glbfn_glProgramUniformMatrix3fv)glbindGetProcAddress(`glProgramUniformMatrix3fv`);
  if (glProgramUniformMatrix3fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fv' not found!`);
  glProgramUniformMatrix3fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4fv glProgramUniformMatrix4fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix4fv = cast(glbfn_glProgramUniformMatrix4fv)glbindGetProcAddress(`glProgramUniformMatrix4fv`);
  if (glProgramUniformMatrix4fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fv' not found!`);
  glProgramUniformMatrix4fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2dv glProgramUniformMatrix2dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix2dv = cast(glbfn_glProgramUniformMatrix2dv)glbindGetProcAddress(`glProgramUniformMatrix2dv`);
  if (glProgramUniformMatrix2dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dv' not found!`);
  glProgramUniformMatrix2dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3dv glProgramUniformMatrix3dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix3dv = cast(glbfn_glProgramUniformMatrix3dv)glbindGetProcAddress(`glProgramUniformMatrix3dv`);
  if (glProgramUniformMatrix3dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dv' not found!`);
  glProgramUniformMatrix3dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4dv glProgramUniformMatrix4dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix4dv = cast(glbfn_glProgramUniformMatrix4dv)glbindGetProcAddress(`glProgramUniformMatrix4dv`);
  if (glProgramUniformMatrix4dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dv' not found!`);
  glProgramUniformMatrix4dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x3fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x3fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix2x3fv = cast(glbfn_glProgramUniformMatrix2x3fv)glbindGetProcAddress(`glProgramUniformMatrix2x3fv`);
  if (glProgramUniformMatrix2x3fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fv' not found!`);
  glProgramUniformMatrix2x3fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x2fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x2fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix3x2fv = cast(glbfn_glProgramUniformMatrix3x2fv)glbindGetProcAddress(`glProgramUniformMatrix3x2fv`);
  if (glProgramUniformMatrix3x2fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fv' not found!`);
  glProgramUniformMatrix3x2fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x4fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x4fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix2x4fv = cast(glbfn_glProgramUniformMatrix2x4fv)glbindGetProcAddress(`glProgramUniformMatrix2x4fv`);
  if (glProgramUniformMatrix2x4fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fv' not found!`);
  glProgramUniformMatrix2x4fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x2fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x2fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix4x2fv = cast(glbfn_glProgramUniformMatrix4x2fv)glbindGetProcAddress(`glProgramUniformMatrix4x2fv`);
  if (glProgramUniformMatrix4x2fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fv' not found!`);
  glProgramUniformMatrix4x2fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x4fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x4fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix3x4fv = cast(glbfn_glProgramUniformMatrix3x4fv)glbindGetProcAddress(`glProgramUniformMatrix3x4fv`);
  if (glProgramUniformMatrix3x4fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fv' not found!`);
  glProgramUniformMatrix3x4fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x3fv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x3fv_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix4x3fv = cast(glbfn_glProgramUniformMatrix4x3fv)glbindGetProcAddress(`glProgramUniformMatrix4x3fv`);
  if (glProgramUniformMatrix4x3fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fv' not found!`);
  glProgramUniformMatrix4x3fv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x3dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x3dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix2x3dv = cast(glbfn_glProgramUniformMatrix2x3dv)glbindGetProcAddress(`glProgramUniformMatrix2x3dv`);
  if (glProgramUniformMatrix2x3dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dv' not found!`);
  glProgramUniformMatrix2x3dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x2dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x2dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix3x2dv = cast(glbfn_glProgramUniformMatrix3x2dv)glbindGetProcAddress(`glProgramUniformMatrix3x2dv`);
  if (glProgramUniformMatrix3x2dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dv' not found!`);
  glProgramUniformMatrix3x2dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x4dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x4dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix2x4dv = cast(glbfn_glProgramUniformMatrix2x4dv)glbindGetProcAddress(`glProgramUniformMatrix2x4dv`);
  if (glProgramUniformMatrix2x4dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dv' not found!`);
  glProgramUniformMatrix2x4dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x2dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x2dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix4x2dv = cast(glbfn_glProgramUniformMatrix4x2dv)glbindGetProcAddress(`glProgramUniformMatrix4x2dv`);
  if (glProgramUniformMatrix4x2dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dv' not found!`);
  glProgramUniformMatrix4x2dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x4dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x4dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix3x4dv = cast(glbfn_glProgramUniformMatrix3x4dv)glbindGetProcAddress(`glProgramUniformMatrix3x4dv`);
  if (glProgramUniformMatrix3x4dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dv' not found!`);
  glProgramUniformMatrix3x4dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x3dv_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x3dv_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix4x3dv = cast(glbfn_glProgramUniformMatrix4x3dv)glbindGetProcAddress(`glProgramUniformMatrix4x3dv`);
  if (glProgramUniformMatrix4x3dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dv' not found!`);
  glProgramUniformMatrix4x3dv(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glValidateProgramPipeline glValidateProgramPipeline = function void (uint a0) nothrow @nogc {
  glbfn_glValidateProgramPipeline_loader(a0,);
};
private auto glbfn_glValidateProgramPipeline_loader (uint a0) nothrow @nogc {
  glValidateProgramPipeline = cast(glbfn_glValidateProgramPipeline)glbindGetProcAddress(`glValidateProgramPipeline`);
  if (glValidateProgramPipeline is null) assert(0, `OpenGL function 'glValidateProgramPipeline' not found!`);
  glValidateProgramPipeline(a0,);
}
__gshared glbfn_glGetProgramPipelineInfoLog glGetProgramPipelineInfoLog = function void (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetProgramPipelineInfoLog_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramPipelineInfoLog_loader (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetProgramPipelineInfoLog = cast(glbfn_glGetProgramPipelineInfoLog)glbindGetProcAddress(`glGetProgramPipelineInfoLog`);
  if (glGetProgramPipelineInfoLog is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLog' not found!`);
  glGetProgramPipelineInfoLog(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribL1d glVertexAttribL1d = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glVertexAttribL1d_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1d_loader (uint a0, double a1) nothrow @nogc {
  glVertexAttribL1d = cast(glbfn_glVertexAttribL1d)glbindGetProcAddress(`glVertexAttribL1d`);
  if (glVertexAttribL1d is null) assert(0, `OpenGL function 'glVertexAttribL1d' not found!`);
  glVertexAttribL1d(a0,a1,);
}
__gshared glbfn_glVertexAttribL2d glVertexAttribL2d = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glVertexAttribL2d_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribL2d_loader (uint a0, double a1, double a2) nothrow @nogc {
  glVertexAttribL2d = cast(glbfn_glVertexAttribL2d)glbindGetProcAddress(`glVertexAttribL2d`);
  if (glVertexAttribL2d is null) assert(0, `OpenGL function 'glVertexAttribL2d' not found!`);
  glVertexAttribL2d(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribL3d glVertexAttribL3d = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glVertexAttribL3d_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribL3d_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glVertexAttribL3d = cast(glbfn_glVertexAttribL3d)glbindGetProcAddress(`glVertexAttribL3d`);
  if (glVertexAttribL3d is null) assert(0, `OpenGL function 'glVertexAttribL3d' not found!`);
  glVertexAttribL3d(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribL4d glVertexAttribL4d = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glVertexAttribL4d_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribL4d_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glVertexAttribL4d = cast(glbfn_glVertexAttribL4d)glbindGetProcAddress(`glVertexAttribL4d`);
  if (glVertexAttribL4d is null) assert(0, `OpenGL function 'glVertexAttribL4d' not found!`);
  glVertexAttribL4d(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribL1dv glVertexAttribL1dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL1dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL1dv = cast(glbfn_glVertexAttribL1dv)glbindGetProcAddress(`glVertexAttribL1dv`);
  if (glVertexAttribL1dv is null) assert(0, `OpenGL function 'glVertexAttribL1dv' not found!`);
  glVertexAttribL1dv(a0,a1,);
}
__gshared glbfn_glVertexAttribL2dv glVertexAttribL2dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL2dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL2dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL2dv = cast(glbfn_glVertexAttribL2dv)glbindGetProcAddress(`glVertexAttribL2dv`);
  if (glVertexAttribL2dv is null) assert(0, `OpenGL function 'glVertexAttribL2dv' not found!`);
  glVertexAttribL2dv(a0,a1,);
}
__gshared glbfn_glVertexAttribL3dv glVertexAttribL3dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL3dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL3dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL3dv = cast(glbfn_glVertexAttribL3dv)glbindGetProcAddress(`glVertexAttribL3dv`);
  if (glVertexAttribL3dv is null) assert(0, `OpenGL function 'glVertexAttribL3dv' not found!`);
  glVertexAttribL3dv(a0,a1,);
}
__gshared glbfn_glVertexAttribL4dv glVertexAttribL4dv = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL4dv_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL4dv_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL4dv = cast(glbfn_glVertexAttribL4dv)glbindGetProcAddress(`glVertexAttribL4dv`);
  if (glVertexAttribL4dv is null) assert(0, `OpenGL function 'glVertexAttribL4dv' not found!`);
  glVertexAttribL4dv(a0,a1,);
}
__gshared glbfn_glVertexAttribLPointer glVertexAttribLPointer = function void (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glVertexAttribLPointer_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribLPointer_loader (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glVertexAttribLPointer = cast(glbfn_glVertexAttribLPointer)glbindGetProcAddress(`glVertexAttribLPointer`);
  if (glVertexAttribLPointer is null) assert(0, `OpenGL function 'glVertexAttribLPointer' not found!`);
  glVertexAttribLPointer(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetVertexAttribLdv glGetVertexAttribLdv = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetVertexAttribLdv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribLdv_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetVertexAttribLdv = cast(glbfn_glGetVertexAttribLdv)glbindGetProcAddress(`glGetVertexAttribLdv`);
  if (glGetVertexAttribLdv is null) assert(0, `OpenGL function 'glGetVertexAttribLdv' not found!`);
  glGetVertexAttribLdv(a0,a1,a2,);
}
__gshared glbfn_glViewportArrayv glViewportArrayv = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glViewportArrayv_loader(a0,a1,a2,);
};
private auto glbfn_glViewportArrayv_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glViewportArrayv = cast(glbfn_glViewportArrayv)glbindGetProcAddress(`glViewportArrayv`);
  if (glViewportArrayv is null) assert(0, `OpenGL function 'glViewportArrayv' not found!`);
  glViewportArrayv(a0,a1,a2,);
}
__gshared glbfn_glViewportIndexedf glViewportIndexedf = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glViewportIndexedf_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glViewportIndexedf_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glViewportIndexedf = cast(glbfn_glViewportIndexedf)glbindGetProcAddress(`glViewportIndexedf`);
  if (glViewportIndexedf is null) assert(0, `OpenGL function 'glViewportIndexedf' not found!`);
  glViewportIndexedf(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glViewportIndexedfv glViewportIndexedfv = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glViewportIndexedfv_loader(a0,a1,);
};
private auto glbfn_glViewportIndexedfv_loader (uint a0, const(float)* a1) nothrow @nogc {
  glViewportIndexedfv = cast(glbfn_glViewportIndexedfv)glbindGetProcAddress(`glViewportIndexedfv`);
  if (glViewportIndexedfv is null) assert(0, `OpenGL function 'glViewportIndexedfv' not found!`);
  glViewportIndexedfv(a0,a1,);
}
__gshared glbfn_glScissorArrayv glScissorArrayv = function void (uint a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glScissorArrayv_loader(a0,a1,a2,);
};
private auto glbfn_glScissorArrayv_loader (uint a0, int a1, const(int)* a2) nothrow @nogc {
  glScissorArrayv = cast(glbfn_glScissorArrayv)glbindGetProcAddress(`glScissorArrayv`);
  if (glScissorArrayv is null) assert(0, `OpenGL function 'glScissorArrayv' not found!`);
  glScissorArrayv(a0,a1,a2,);
}
__gshared glbfn_glScissorIndexed glScissorIndexed = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glScissorIndexed_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glScissorIndexed_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glScissorIndexed = cast(glbfn_glScissorIndexed)glbindGetProcAddress(`glScissorIndexed`);
  if (glScissorIndexed is null) assert(0, `OpenGL function 'glScissorIndexed' not found!`);
  glScissorIndexed(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glScissorIndexedv glScissorIndexedv = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glScissorIndexedv_loader(a0,a1,);
};
private auto glbfn_glScissorIndexedv_loader (uint a0, const(int)* a1) nothrow @nogc {
  glScissorIndexedv = cast(glbfn_glScissorIndexedv)glbindGetProcAddress(`glScissorIndexedv`);
  if (glScissorIndexedv is null) assert(0, `OpenGL function 'glScissorIndexedv' not found!`);
  glScissorIndexedv(a0,a1,);
}
__gshared glbfn_glDepthRangeArrayv glDepthRangeArrayv = function void (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glDepthRangeArrayv_loader(a0,a1,a2,);
};
private auto glbfn_glDepthRangeArrayv_loader (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glDepthRangeArrayv = cast(glbfn_glDepthRangeArrayv)glbindGetProcAddress(`glDepthRangeArrayv`);
  if (glDepthRangeArrayv is null) assert(0, `OpenGL function 'glDepthRangeArrayv' not found!`);
  glDepthRangeArrayv(a0,a1,a2,);
}
__gshared glbfn_glDepthRangeIndexed glDepthRangeIndexed = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glDepthRangeIndexed_loader(a0,a1,a2,);
};
private auto glbfn_glDepthRangeIndexed_loader (uint a0, double a1, double a2) nothrow @nogc {
  glDepthRangeIndexed = cast(glbfn_glDepthRangeIndexed)glbindGetProcAddress(`glDepthRangeIndexed`);
  if (glDepthRangeIndexed is null) assert(0, `OpenGL function 'glDepthRangeIndexed' not found!`);
  glDepthRangeIndexed(a0,a1,a2,);
}
__gshared glbfn_glGetFloati_v glGetFloati_v = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetFloati_v_loader(a0,a1,a2,);
};
private auto glbfn_glGetFloati_v_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetFloati_v = cast(glbfn_glGetFloati_v)glbindGetProcAddress(`glGetFloati_v`);
  if (glGetFloati_v is null) assert(0, `OpenGL function 'glGetFloati_v' not found!`);
  glGetFloati_v(a0,a1,a2,);
}
__gshared glbfn_glGetDoublei_v glGetDoublei_v = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetDoublei_v_loader(a0,a1,a2,);
};
private auto glbfn_glGetDoublei_v_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetDoublei_v = cast(glbfn_glGetDoublei_v)glbindGetProcAddress(`glGetDoublei_v`);
  if (glGetDoublei_v is null) assert(0, `OpenGL function 'glGetDoublei_v' not found!`);
  glGetDoublei_v(a0,a1,a2,);
}
__gshared glbfn_glDrawArraysInstancedBaseInstance glDrawArraysInstancedBaseInstance = function void (uint a0, int a1, int a2, int a3, uint a4) nothrow @nogc {
  glbfn_glDrawArraysInstancedBaseInstance_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawArraysInstancedBaseInstance_loader (uint a0, int a1, int a2, int a3, uint a4) nothrow @nogc {
  glDrawArraysInstancedBaseInstance = cast(glbfn_glDrawArraysInstancedBaseInstance)glbindGetProcAddress(`glDrawArraysInstancedBaseInstance`);
  if (glDrawArraysInstancedBaseInstance is null) assert(0, `OpenGL function 'glDrawArraysInstancedBaseInstance' not found!`);
  glDrawArraysInstancedBaseInstance(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawElementsInstancedBaseInstance glDrawElementsInstancedBaseInstance = function void (uint a0, int a1, uint a2, const(void)* a3, int a4, uint a5) nothrow @nogc {
  glbfn_glDrawElementsInstancedBaseInstance_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDrawElementsInstancedBaseInstance_loader (uint a0, int a1, uint a2, const(void)* a3, int a4, uint a5) nothrow @nogc {
  glDrawElementsInstancedBaseInstance = cast(glbfn_glDrawElementsInstancedBaseInstance)glbindGetProcAddress(`glDrawElementsInstancedBaseInstance`);
  if (glDrawElementsInstancedBaseInstance is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseInstance' not found!`);
  glDrawElementsInstancedBaseInstance(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glDrawElementsInstancedBaseVertexBaseInstance glDrawElementsInstancedBaseVertexBaseInstance = function void (uint a0, int a1, uint a2, const(void)* a3, int a4, int a5, uint a6) nothrow @nogc {
  glbfn_glDrawElementsInstancedBaseVertexBaseInstance_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glDrawElementsInstancedBaseVertexBaseInstance_loader (uint a0, int a1, uint a2, const(void)* a3, int a4, int a5, uint a6) nothrow @nogc {
  glDrawElementsInstancedBaseVertexBaseInstance = cast(glbfn_glDrawElementsInstancedBaseVertexBaseInstance)glbindGetProcAddress(`glDrawElementsInstancedBaseVertexBaseInstance`);
  if (glDrawElementsInstancedBaseVertexBaseInstance is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertexBaseInstance' not found!`);
  glDrawElementsInstancedBaseVertexBaseInstance(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetInternalformativ glGetInternalformativ = function void (uint a0, uint a1, uint a2, int a3, int* a4) nothrow @nogc {
  glbfn_glGetInternalformativ_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetInternalformativ_loader (uint a0, uint a1, uint a2, int a3, int* a4) nothrow @nogc {
  glGetInternalformativ = cast(glbfn_glGetInternalformativ)glbindGetProcAddress(`glGetInternalformativ`);
  if (glGetInternalformativ is null) assert(0, `OpenGL function 'glGetInternalformativ' not found!`);
  glGetInternalformativ(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetActiveAtomicCounterBufferiv glGetActiveAtomicCounterBufferiv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetActiveAtomicCounterBufferiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetActiveAtomicCounterBufferiv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetActiveAtomicCounterBufferiv = cast(glbfn_glGetActiveAtomicCounterBufferiv)glbindGetProcAddress(`glGetActiveAtomicCounterBufferiv`);
  if (glGetActiveAtomicCounterBufferiv is null) assert(0, `OpenGL function 'glGetActiveAtomicCounterBufferiv' not found!`);
  glGetActiveAtomicCounterBufferiv(a0,a1,a2,a3,);
}
__gshared glbfn_glBindImageTexture glBindImageTexture = function void (uint a0, uint a1, int a2, ubyte a3, int a4, uint a5, uint a6) nothrow @nogc {
  glbfn_glBindImageTexture_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glBindImageTexture_loader (uint a0, uint a1, int a2, ubyte a3, int a4, uint a5, uint a6) nothrow @nogc {
  glBindImageTexture = cast(glbfn_glBindImageTexture)glbindGetProcAddress(`glBindImageTexture`);
  if (glBindImageTexture is null) assert(0, `OpenGL function 'glBindImageTexture' not found!`);
  glBindImageTexture(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMemoryBarrier glMemoryBarrier = function void (uint a0) nothrow @nogc {
  glbfn_glMemoryBarrier_loader(a0,);
};
private auto glbfn_glMemoryBarrier_loader (uint a0) nothrow @nogc {
  glMemoryBarrier = cast(glbfn_glMemoryBarrier)glbindGetProcAddress(`glMemoryBarrier`);
  if (glMemoryBarrier is null) assert(0, `OpenGL function 'glMemoryBarrier' not found!`);
  glMemoryBarrier(a0,);
}
__gshared glbfn_glTexStorage1D glTexStorage1D = function void (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glbfn_glTexStorage1D_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexStorage1D_loader (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glTexStorage1D = cast(glbfn_glTexStorage1D)glbindGetProcAddress(`glTexStorage1D`);
  if (glTexStorage1D is null) assert(0, `OpenGL function 'glTexStorage1D' not found!`);
  glTexStorage1D(a0,a1,a2,a3,);
}
__gshared glbfn_glTexStorage2D glTexStorage2D = function void (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glTexStorage2D_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTexStorage2D_loader (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glTexStorage2D = cast(glbfn_glTexStorage2D)glbindGetProcAddress(`glTexStorage2D`);
  if (glTexStorage2D is null) assert(0, `OpenGL function 'glTexStorage2D' not found!`);
  glTexStorage2D(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTexStorage3D glTexStorage3D = function void (uint a0, int a1, uint a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glTexStorage3D_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glTexStorage3D_loader (uint a0, int a1, uint a2, int a3, int a4, int a5) nothrow @nogc {
  glTexStorage3D = cast(glbfn_glTexStorage3D)glbindGetProcAddress(`glTexStorage3D`);
  if (glTexStorage3D is null) assert(0, `OpenGL function 'glTexStorage3D' not found!`);
  glTexStorage3D(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glDrawTransformFeedbackInstanced glDrawTransformFeedbackInstanced = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glDrawTransformFeedbackInstanced_loader(a0,a1,a2,);
};
private auto glbfn_glDrawTransformFeedbackInstanced_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glDrawTransformFeedbackInstanced = cast(glbfn_glDrawTransformFeedbackInstanced)glbindGetProcAddress(`glDrawTransformFeedbackInstanced`);
  if (glDrawTransformFeedbackInstanced is null) assert(0, `OpenGL function 'glDrawTransformFeedbackInstanced' not found!`);
  glDrawTransformFeedbackInstanced(a0,a1,a2,);
}
__gshared glbfn_glDrawTransformFeedbackStreamInstanced glDrawTransformFeedbackStreamInstanced = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glDrawTransformFeedbackStreamInstanced_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawTransformFeedbackStreamInstanced_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glDrawTransformFeedbackStreamInstanced = cast(glbfn_glDrawTransformFeedbackStreamInstanced)glbindGetProcAddress(`glDrawTransformFeedbackStreamInstanced`);
  if (glDrawTransformFeedbackStreamInstanced is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStreamInstanced' not found!`);
  glDrawTransformFeedbackStreamInstanced(a0,a1,a2,a3,);
}
__gshared glbfn_glClearBufferData glClearBufferData = function void (uint a0, uint a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glbfn_glClearBufferData_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glClearBufferData_loader (uint a0, uint a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glClearBufferData = cast(glbfn_glClearBufferData)glbindGetProcAddress(`glClearBufferData`);
  if (glClearBufferData is null) assert(0, `OpenGL function 'glClearBufferData' not found!`);
  glClearBufferData(a0,a1,a2,a3,a4,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glClearBufferSubData glClearBufferSubData = function void (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glClearBufferSubData_loader(a0,a1,a2,a3,a4,a5,a6,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glClearBufferSubData_loader (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glClearBufferSubData = cast(glbfn_glClearBufferSubData)glbindGetProcAddress(`glClearBufferSubData`);
  if (glClearBufferSubData is null) assert(0, `OpenGL function 'glClearBufferSubData' not found!`);
  glClearBufferSubData(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glDispatchCompute glDispatchCompute = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glDispatchCompute_loader(a0,a1,a2,);
};
private auto glbfn_glDispatchCompute_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glDispatchCompute = cast(glbfn_glDispatchCompute)glbindGetProcAddress(`glDispatchCompute`);
  if (glDispatchCompute is null) assert(0, `OpenGL function 'glDispatchCompute' not found!`);
  glDispatchCompute(a0,a1,a2,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glDispatchComputeIndirect glDispatchComputeIndirect = function void (int a0) nothrow @nogc {
  glbfn_glDispatchComputeIndirect_loader(a0,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glDispatchComputeIndirect_loader (int a0) nothrow @nogc {
  glDispatchComputeIndirect = cast(glbfn_glDispatchComputeIndirect)glbindGetProcAddress(`glDispatchComputeIndirect`);
  if (glDispatchComputeIndirect is null) assert(0, `OpenGL function 'glDispatchComputeIndirect' not found!`);
  glDispatchComputeIndirect(a0,);
}
__gshared glbfn_glCopyImageSubData glCopyImageSubData = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14) nothrow @nogc {
  glbfn_glCopyImageSubData_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
};
private auto glbfn_glCopyImageSubData_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14) nothrow @nogc {
  glCopyImageSubData = cast(glbfn_glCopyImageSubData)glbindGetProcAddress(`glCopyImageSubData`);
  if (glCopyImageSubData is null) assert(0, `OpenGL function 'glCopyImageSubData' not found!`);
  glCopyImageSubData(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
}
__gshared glbfn_glFramebufferParameteri glFramebufferParameteri = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glFramebufferParameteri_loader(a0,a1,a2,);
};
private auto glbfn_glFramebufferParameteri_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glFramebufferParameteri = cast(glbfn_glFramebufferParameteri)glbindGetProcAddress(`glFramebufferParameteri`);
  if (glFramebufferParameteri is null) assert(0, `OpenGL function 'glFramebufferParameteri' not found!`);
  glFramebufferParameteri(a0,a1,a2,);
}
__gshared glbfn_glGetFramebufferParameteriv glGetFramebufferParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetFramebufferParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetFramebufferParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetFramebufferParameteriv = cast(glbfn_glGetFramebufferParameteriv)glbindGetProcAddress(`glGetFramebufferParameteriv`);
  if (glGetFramebufferParameteriv is null) assert(0, `OpenGL function 'glGetFramebufferParameteriv' not found!`);
  glGetFramebufferParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetInternalformati64v glGetInternalformati64v = function void (uint a0, uint a1, uint a2, int a3, long* a4) nothrow @nogc {
  glbfn_glGetInternalformati64v_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetInternalformati64v_loader (uint a0, uint a1, uint a2, int a3, long* a4) nothrow @nogc {
  glGetInternalformati64v = cast(glbfn_glGetInternalformati64v)glbindGetProcAddress(`glGetInternalformati64v`);
  if (glGetInternalformati64v is null) assert(0, `OpenGL function 'glGetInternalformati64v' not found!`);
  glGetInternalformati64v(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glInvalidateTexSubImage glInvalidateTexSubImage = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glInvalidateTexSubImage_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glInvalidateTexSubImage_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glInvalidateTexSubImage = cast(glbfn_glInvalidateTexSubImage)glbindGetProcAddress(`glInvalidateTexSubImage`);
  if (glInvalidateTexSubImage is null) assert(0, `OpenGL function 'glInvalidateTexSubImage' not found!`);
  glInvalidateTexSubImage(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glInvalidateTexImage glInvalidateTexImage = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glInvalidateTexImage_loader(a0,a1,);
};
private auto glbfn_glInvalidateTexImage_loader (uint a0, int a1) nothrow @nogc {
  glInvalidateTexImage = cast(glbfn_glInvalidateTexImage)glbindGetProcAddress(`glInvalidateTexImage`);
  if (glInvalidateTexImage is null) assert(0, `OpenGL function 'glInvalidateTexImage' not found!`);
  glInvalidateTexImage(a0,a1,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glInvalidateBufferSubData glInvalidateBufferSubData = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glInvalidateBufferSubData_loader(a0,a1,a2,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glInvalidateBufferSubData_loader (uint a0, int a1, int a2) nothrow @nogc {
  glInvalidateBufferSubData = cast(glbfn_glInvalidateBufferSubData)glbindGetProcAddress(`glInvalidateBufferSubData`);
  if (glInvalidateBufferSubData is null) assert(0, `OpenGL function 'glInvalidateBufferSubData' not found!`);
  glInvalidateBufferSubData(a0,a1,a2,);
}
__gshared glbfn_glInvalidateBufferData glInvalidateBufferData = function void (uint a0) nothrow @nogc {
  glbfn_glInvalidateBufferData_loader(a0,);
};
private auto glbfn_glInvalidateBufferData_loader (uint a0) nothrow @nogc {
  glInvalidateBufferData = cast(glbfn_glInvalidateBufferData)glbindGetProcAddress(`glInvalidateBufferData`);
  if (glInvalidateBufferData is null) assert(0, `OpenGL function 'glInvalidateBufferData' not found!`);
  glInvalidateBufferData(a0,);
}
__gshared glbfn_glInvalidateFramebuffer glInvalidateFramebuffer = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glInvalidateFramebuffer_loader(a0,a1,a2,);
};
private auto glbfn_glInvalidateFramebuffer_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glInvalidateFramebuffer = cast(glbfn_glInvalidateFramebuffer)glbindGetProcAddress(`glInvalidateFramebuffer`);
  if (glInvalidateFramebuffer is null) assert(0, `OpenGL function 'glInvalidateFramebuffer' not found!`);
  glInvalidateFramebuffer(a0,a1,a2,);
}
__gshared glbfn_glInvalidateSubFramebuffer glInvalidateSubFramebuffer = function void (uint a0, int a1, const(uint)* a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glInvalidateSubFramebuffer_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glInvalidateSubFramebuffer_loader (uint a0, int a1, const(uint)* a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glInvalidateSubFramebuffer = cast(glbfn_glInvalidateSubFramebuffer)glbindGetProcAddress(`glInvalidateSubFramebuffer`);
  if (glInvalidateSubFramebuffer is null) assert(0, `OpenGL function 'glInvalidateSubFramebuffer' not found!`);
  glInvalidateSubFramebuffer(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMultiDrawArraysIndirect glMultiDrawArraysIndirect = function void (uint a0, const(void)* a1, int a2, int a3) nothrow @nogc {
  glbfn_glMultiDrawArraysIndirect_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiDrawArraysIndirect_loader (uint a0, const(void)* a1, int a2, int a3) nothrow @nogc {
  glMultiDrawArraysIndirect = cast(glbfn_glMultiDrawArraysIndirect)glbindGetProcAddress(`glMultiDrawArraysIndirect`);
  if (glMultiDrawArraysIndirect is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirect' not found!`);
  glMultiDrawArraysIndirect(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiDrawElementsIndirect glMultiDrawElementsIndirect = function void (uint a0, uint a1, const(void)* a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiDrawElementsIndirect_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiDrawElementsIndirect_loader (uint a0, uint a1, const(void)* a2, int a3, int a4) nothrow @nogc {
  glMultiDrawElementsIndirect = cast(glbfn_glMultiDrawElementsIndirect)glbindGetProcAddress(`glMultiDrawElementsIndirect`);
  if (glMultiDrawElementsIndirect is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirect' not found!`);
  glMultiDrawElementsIndirect(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetProgramInterfaceiv glGetProgramInterfaceiv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetProgramInterfaceiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramInterfaceiv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetProgramInterfaceiv = cast(glbfn_glGetProgramInterfaceiv)glbindGetProcAddress(`glGetProgramInterfaceiv`);
  if (glGetProgramInterfaceiv is null) assert(0, `OpenGL function 'glGetProgramInterfaceiv' not found!`);
  glGetProgramInterfaceiv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetProgramResourceIndex glGetProgramResourceIndex = function uint (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  return glbfn_glGetProgramResourceIndex_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramResourceIndex_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glGetProgramResourceIndex = cast(glbfn_glGetProgramResourceIndex)glbindGetProcAddress(`glGetProgramResourceIndex`);
  if (glGetProgramResourceIndex is null) assert(0, `OpenGL function 'glGetProgramResourceIndex' not found!`);
  return glGetProgramResourceIndex(a0,a1,a2,);
}
__gshared glbfn_glGetProgramResourceName glGetProgramResourceName = function void (uint a0, uint a1, uint a2, int a3, int* a4, char* a5) nothrow @nogc {
  glbfn_glGetProgramResourceName_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetProgramResourceName_loader (uint a0, uint a1, uint a2, int a3, int* a4, char* a5) nothrow @nogc {
  glGetProgramResourceName = cast(glbfn_glGetProgramResourceName)glbindGetProcAddress(`glGetProgramResourceName`);
  if (glGetProgramResourceName is null) assert(0, `OpenGL function 'glGetProgramResourceName' not found!`);
  glGetProgramResourceName(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetProgramResourceiv glGetProgramResourceiv = function void (uint a0, uint a1, uint a2, int a3, const(uint)* a4, int a5, int* a6, int* a7) nothrow @nogc {
  glbfn_glGetProgramResourceiv_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glGetProgramResourceiv_loader (uint a0, uint a1, uint a2, int a3, const(uint)* a4, int a5, int* a6, int* a7) nothrow @nogc {
  glGetProgramResourceiv = cast(glbfn_glGetProgramResourceiv)glbindGetProcAddress(`glGetProgramResourceiv`);
  if (glGetProgramResourceiv is null) assert(0, `OpenGL function 'glGetProgramResourceiv' not found!`);
  glGetProgramResourceiv(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetProgramResourceLocation glGetProgramResourceLocation = function int (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  return glbfn_glGetProgramResourceLocation_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramResourceLocation_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glGetProgramResourceLocation = cast(glbfn_glGetProgramResourceLocation)glbindGetProcAddress(`glGetProgramResourceLocation`);
  if (glGetProgramResourceLocation is null) assert(0, `OpenGL function 'glGetProgramResourceLocation' not found!`);
  return glGetProgramResourceLocation(a0,a1,a2,);
}
__gshared glbfn_glGetProgramResourceLocationIndex glGetProgramResourceLocationIndex = function int (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  return glbfn_glGetProgramResourceLocationIndex_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramResourceLocationIndex_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glGetProgramResourceLocationIndex = cast(glbfn_glGetProgramResourceLocationIndex)glbindGetProcAddress(`glGetProgramResourceLocationIndex`);
  if (glGetProgramResourceLocationIndex is null) assert(0, `OpenGL function 'glGetProgramResourceLocationIndex' not found!`);
  return glGetProgramResourceLocationIndex(a0,a1,a2,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glShaderStorageBlockBinding glShaderStorageBlockBinding = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glShaderStorageBlockBinding_loader(a0,a1,a2,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glShaderStorageBlockBinding_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glShaderStorageBlockBinding = cast(glbfn_glShaderStorageBlockBinding)glbindGetProcAddress(`glShaderStorageBlockBinding`);
  if (glShaderStorageBlockBinding is null) assert(0, `OpenGL function 'glShaderStorageBlockBinding' not found!`);
  glShaderStorageBlockBinding(a0,a1,a2,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glTexBufferRange glTexBufferRange = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glTexBufferRange_loader(a0,a1,a2,a3,a4,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glTexBufferRange_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glTexBufferRange = cast(glbfn_glTexBufferRange)glbindGetProcAddress(`glTexBufferRange`);
  if (glTexBufferRange is null) assert(0, `OpenGL function 'glTexBufferRange' not found!`);
  glTexBufferRange(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTexStorage2DMultisample glTexStorage2DMultisample = function void (uint a0, int a1, uint a2, int a3, int a4, ubyte a5) nothrow @nogc {
  glbfn_glTexStorage2DMultisample_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glTexStorage2DMultisample_loader (uint a0, int a1, uint a2, int a3, int a4, ubyte a5) nothrow @nogc {
  glTexStorage2DMultisample = cast(glbfn_glTexStorage2DMultisample)glbindGetProcAddress(`glTexStorage2DMultisample`);
  if (glTexStorage2DMultisample is null) assert(0, `OpenGL function 'glTexStorage2DMultisample' not found!`);
  glTexStorage2DMultisample(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTexStorage3DMultisample glTexStorage3DMultisample = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glbfn_glTexStorage3DMultisample_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTexStorage3DMultisample_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glTexStorage3DMultisample = cast(glbfn_glTexStorage3DMultisample)glbindGetProcAddress(`glTexStorage3DMultisample`);
  if (glTexStorage3DMultisample is null) assert(0, `OpenGL function 'glTexStorage3DMultisample' not found!`);
  glTexStorage3DMultisample(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTextureView glTextureView = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7) nothrow @nogc {
  glbfn_glTextureView_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTextureView_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7) nothrow @nogc {
  glTextureView = cast(glbfn_glTextureView)glbindGetProcAddress(`glTextureView`);
  if (glTextureView is null) assert(0, `OpenGL function 'glTextureView' not found!`);
  glTextureView(a0,a1,a2,a3,a4,a5,a6,a7,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glBindVertexBuffer glBindVertexBuffer = function void (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glbfn_glBindVertexBuffer_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glBindVertexBuffer_loader (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glBindVertexBuffer = cast(glbfn_glBindVertexBuffer)glbindGetProcAddress(`glBindVertexBuffer`);
  if (glBindVertexBuffer is null) assert(0, `OpenGL function 'glBindVertexBuffer' not found!`);
  glBindVertexBuffer(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribFormat glVertexAttribFormat = function void (uint a0, int a1, uint a2, ubyte a3, uint a4) nothrow @nogc {
  glbfn_glVertexAttribFormat_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribFormat_loader (uint a0, int a1, uint a2, ubyte a3, uint a4) nothrow @nogc {
  glVertexAttribFormat = cast(glbfn_glVertexAttribFormat)glbindGetProcAddress(`glVertexAttribFormat`);
  if (glVertexAttribFormat is null) assert(0, `OpenGL function 'glVertexAttribFormat' not found!`);
  glVertexAttribFormat(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribIFormat glVertexAttribIFormat = function void (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribIFormat_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribIFormat_loader (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glVertexAttribIFormat = cast(glbfn_glVertexAttribIFormat)glbindGetProcAddress(`glVertexAttribIFormat`);
  if (glVertexAttribIFormat is null) assert(0, `OpenGL function 'glVertexAttribIFormat' not found!`);
  glVertexAttribIFormat(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribLFormat glVertexAttribLFormat = function void (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribLFormat_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribLFormat_loader (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glVertexAttribLFormat = cast(glbfn_glVertexAttribLFormat)glbindGetProcAddress(`glVertexAttribLFormat`);
  if (glVertexAttribLFormat is null) assert(0, `OpenGL function 'glVertexAttribLFormat' not found!`);
  glVertexAttribLFormat(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribBinding glVertexAttribBinding = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexAttribBinding_loader(a0,a1,);
};
private auto glbfn_glVertexAttribBinding_loader (uint a0, uint a1) nothrow @nogc {
  glVertexAttribBinding = cast(glbfn_glVertexAttribBinding)glbindGetProcAddress(`glVertexAttribBinding`);
  if (glVertexAttribBinding is null) assert(0, `OpenGL function 'glVertexAttribBinding' not found!`);
  glVertexAttribBinding(a0,a1,);
}
__gshared glbfn_glVertexBindingDivisor glVertexBindingDivisor = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexBindingDivisor_loader(a0,a1,);
};
private auto glbfn_glVertexBindingDivisor_loader (uint a0, uint a1) nothrow @nogc {
  glVertexBindingDivisor = cast(glbfn_glVertexBindingDivisor)glbindGetProcAddress(`glVertexBindingDivisor`);
  if (glVertexBindingDivisor is null) assert(0, `OpenGL function 'glVertexBindingDivisor' not found!`);
  glVertexBindingDivisor(a0,a1,);
}
__gshared glbfn_glDebugMessageControl glDebugMessageControl = function void (uint a0, uint a1, uint a2, int a3, const(uint)* a4, ubyte a5) nothrow @nogc {
  glbfn_glDebugMessageControl_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDebugMessageControl_loader (uint a0, uint a1, uint a2, int a3, const(uint)* a4, ubyte a5) nothrow @nogc {
  glDebugMessageControl = cast(glbfn_glDebugMessageControl)glbindGetProcAddress(`glDebugMessageControl`);
  if (glDebugMessageControl is null) assert(0, `OpenGL function 'glDebugMessageControl' not found!`);
  glDebugMessageControl(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glDebugMessageInsert glDebugMessageInsert = function void (uint a0, uint a1, uint a2, uint a3, int a4, const(char)* a5) nothrow @nogc {
  glbfn_glDebugMessageInsert_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDebugMessageInsert_loader (uint a0, uint a1, uint a2, uint a3, int a4, const(char)* a5) nothrow @nogc {
  glDebugMessageInsert = cast(glbfn_glDebugMessageInsert)glbindGetProcAddress(`glDebugMessageInsert`);
  if (glDebugMessageInsert is null) assert(0, `OpenGL function 'glDebugMessageInsert' not found!`);
  glDebugMessageInsert(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetDebugMessageLog glGetDebugMessageLog = function uint (uint a0, int a1, uint* a2, uint* a3, uint* a4, uint* a5, int* a6, char* a7) nothrow @nogc {
  return glbfn_glGetDebugMessageLog_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glGetDebugMessageLog_loader (uint a0, int a1, uint* a2, uint* a3, uint* a4, uint* a5, int* a6, char* a7) nothrow @nogc {
  glGetDebugMessageLog = cast(glbfn_glGetDebugMessageLog)glbindGetProcAddress(`glGetDebugMessageLog`);
  if (glGetDebugMessageLog is null) assert(0, `OpenGL function 'glGetDebugMessageLog' not found!`);
  return glGetDebugMessageLog(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glPushDebugGroup glPushDebugGroup = function void (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glbfn_glPushDebugGroup_loader(a0,a1,a2,a3,);
};
private auto glbfn_glPushDebugGroup_loader (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glPushDebugGroup = cast(glbfn_glPushDebugGroup)glbindGetProcAddress(`glPushDebugGroup`);
  if (glPushDebugGroup is null) assert(0, `OpenGL function 'glPushDebugGroup' not found!`);
  glPushDebugGroup(a0,a1,a2,a3,);
}
__gshared glbfn_glPopDebugGroup glPopDebugGroup = function void () nothrow @nogc {
  glbfn_glPopDebugGroup_loader();
};
private auto glbfn_glPopDebugGroup_loader () nothrow @nogc {
  glPopDebugGroup = cast(glbfn_glPopDebugGroup)glbindGetProcAddress(`glPopDebugGroup`);
  if (glPopDebugGroup is null) assert(0, `OpenGL function 'glPopDebugGroup' not found!`);
  glPopDebugGroup();
}
__gshared glbfn_glObjectLabel glObjectLabel = function void (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glbfn_glObjectLabel_loader(a0,a1,a2,a3,);
};
private auto glbfn_glObjectLabel_loader (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glObjectLabel = cast(glbfn_glObjectLabel)glbindGetProcAddress(`glObjectLabel`);
  if (glObjectLabel is null) assert(0, `OpenGL function 'glObjectLabel' not found!`);
  glObjectLabel(a0,a1,a2,a3,);
}
__gshared glbfn_glGetObjectLabel glGetObjectLabel = function void (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glbfn_glGetObjectLabel_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetObjectLabel_loader (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glGetObjectLabel = cast(glbfn_glGetObjectLabel)glbindGetProcAddress(`glGetObjectLabel`);
  if (glGetObjectLabel is null) assert(0, `OpenGL function 'glGetObjectLabel' not found!`);
  glGetObjectLabel(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glObjectPtrLabel glObjectPtrLabel = function void (const(void)* a0, int a1, const(char)* a2) nothrow @nogc {
  glbfn_glObjectPtrLabel_loader(a0,a1,a2,);
};
private auto glbfn_glObjectPtrLabel_loader (const(void)* a0, int a1, const(char)* a2) nothrow @nogc {
  glObjectPtrLabel = cast(glbfn_glObjectPtrLabel)glbindGetProcAddress(`glObjectPtrLabel`);
  if (glObjectPtrLabel is null) assert(0, `OpenGL function 'glObjectPtrLabel' not found!`);
  glObjectPtrLabel(a0,a1,a2,);
}
__gshared glbfn_glGetObjectPtrLabel glGetObjectPtrLabel = function void (const(void)* a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetObjectPtrLabel_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetObjectPtrLabel_loader (const(void)* a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetObjectPtrLabel = cast(glbfn_glGetObjectPtrLabel)glbindGetProcAddress(`glGetObjectPtrLabel`);
  if (glGetObjectPtrLabel is null) assert(0, `OpenGL function 'glGetObjectPtrLabel' not found!`);
  glGetObjectPtrLabel(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glBufferStorage glBufferStorage = function void (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glbfn_glBufferStorage_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glBufferStorage_loader (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glBufferStorage = cast(glbfn_glBufferStorage)glbindGetProcAddress(`glBufferStorage`);
  if (glBufferStorage is null) assert(0, `OpenGL function 'glBufferStorage' not found!`);
  glBufferStorage(a0,a1,a2,a3,);
}
__gshared glbfn_glClearTexImage glClearTexImage = function void (uint a0, int a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glbfn_glClearTexImage_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glClearTexImage_loader (uint a0, int a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glClearTexImage = cast(glbfn_glClearTexImage)glbindGetProcAddress(`glClearTexImage`);
  if (glClearTexImage is null) assert(0, `OpenGL function 'glClearTexImage' not found!`);
  glClearTexImage(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glClearTexSubImage glClearTexSubImage = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glbfn_glClearTexSubImage_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glClearTexSubImage_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glClearTexSubImage = cast(glbfn_glClearTexSubImage)glbindGetProcAddress(`glClearTexSubImage`);
  if (glClearTexSubImage is null) assert(0, `OpenGL function 'glClearTexSubImage' not found!`);
  glClearTexSubImage(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glBindBuffersBase glBindBuffersBase = function void (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glBindBuffersBase_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBindBuffersBase_loader (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glBindBuffersBase = cast(glbfn_glBindBuffersBase)glbindGetProcAddress(`glBindBuffersBase`);
  if (glBindBuffersBase is null) assert(0, `OpenGL function 'glBindBuffersBase' not found!`);
  glBindBuffersBase(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glBindBuffersRange glBindBuffersRange = function void (uint a0, uint a1, int a2, const(uint)* a3, const(int)* a4, const(int)* a5) nothrow @nogc {
  glbfn_glBindBuffersRange_loader(a0,a1,a2,a3,a4,a5,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glBindBuffersRange_loader (uint a0, uint a1, int a2, const(uint)* a3, const(int)* a4, const(int)* a5) nothrow @nogc {
  glBindBuffersRange = cast(glbfn_glBindBuffersRange)glbindGetProcAddress(`glBindBuffersRange`);
  if (glBindBuffersRange is null) assert(0, `OpenGL function 'glBindBuffersRange' not found!`);
  glBindBuffersRange(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glBindTextures glBindTextures = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glBindTextures_loader(a0,a1,a2,);
};
private auto glbfn_glBindTextures_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glBindTextures = cast(glbfn_glBindTextures)glbindGetProcAddress(`glBindTextures`);
  if (glBindTextures is null) assert(0, `OpenGL function 'glBindTextures' not found!`);
  glBindTextures(a0,a1,a2,);
}
__gshared glbfn_glBindSamplers glBindSamplers = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glBindSamplers_loader(a0,a1,a2,);
};
private auto glbfn_glBindSamplers_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glBindSamplers = cast(glbfn_glBindSamplers)glbindGetProcAddress(`glBindSamplers`);
  if (glBindSamplers is null) assert(0, `OpenGL function 'glBindSamplers' not found!`);
  glBindSamplers(a0,a1,a2,);
}
__gshared glbfn_glBindImageTextures glBindImageTextures = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glBindImageTextures_loader(a0,a1,a2,);
};
private auto glbfn_glBindImageTextures_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glBindImageTextures = cast(glbfn_glBindImageTextures)glbindGetProcAddress(`glBindImageTextures`);
  if (glBindImageTextures is null) assert(0, `OpenGL function 'glBindImageTextures' not found!`);
  glBindImageTextures(a0,a1,a2,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glBindVertexBuffers glBindVertexBuffers = function void (uint a0, int a1, const(uint)* a2, const(int)* a3, const(int)* a4) nothrow @nogc {
  glbfn_glBindVertexBuffers_loader(a0,a1,a2,a3,a4,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glBindVertexBuffers_loader (uint a0, int a1, const(uint)* a2, const(int)* a3, const(int)* a4) nothrow @nogc {
  glBindVertexBuffers = cast(glbfn_glBindVertexBuffers)glbindGetProcAddress(`glBindVertexBuffers`);
  if (glBindVertexBuffers is null) assert(0, `OpenGL function 'glBindVertexBuffers' not found!`);
  glBindVertexBuffers(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glClipControl glClipControl = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glClipControl_loader(a0,a1,);
};
private auto glbfn_glClipControl_loader (uint a0, uint a1) nothrow @nogc {
  glClipControl = cast(glbfn_glClipControl)glbindGetProcAddress(`glClipControl`);
  if (glClipControl is null) assert(0, `OpenGL function 'glClipControl' not found!`);
  glClipControl(a0,a1,);
}
__gshared glbfn_glCreateTransformFeedbacks glCreateTransformFeedbacks = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateTransformFeedbacks_loader(a0,a1,);
};
private auto glbfn_glCreateTransformFeedbacks_loader (int a0, uint* a1) nothrow @nogc {
  glCreateTransformFeedbacks = cast(glbfn_glCreateTransformFeedbacks)glbindGetProcAddress(`glCreateTransformFeedbacks`);
  if (glCreateTransformFeedbacks is null) assert(0, `OpenGL function 'glCreateTransformFeedbacks' not found!`);
  glCreateTransformFeedbacks(a0,a1,);
}
__gshared glbfn_glTransformFeedbackBufferBase glTransformFeedbackBufferBase = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glTransformFeedbackBufferBase_loader(a0,a1,a2,);
};
private auto glbfn_glTransformFeedbackBufferBase_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glTransformFeedbackBufferBase = cast(glbfn_glTransformFeedbackBufferBase)glbindGetProcAddress(`glTransformFeedbackBufferBase`);
  if (glTransformFeedbackBufferBase is null) assert(0, `OpenGL function 'glTransformFeedbackBufferBase' not found!`);
  glTransformFeedbackBufferBase(a0,a1,a2,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glTransformFeedbackBufferRange glTransformFeedbackBufferRange = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glTransformFeedbackBufferRange_loader(a0,a1,a2,a3,a4,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glTransformFeedbackBufferRange_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glTransformFeedbackBufferRange = cast(glbfn_glTransformFeedbackBufferRange)glbindGetProcAddress(`glTransformFeedbackBufferRange`);
  if (glTransformFeedbackBufferRange is null) assert(0, `OpenGL function 'glTransformFeedbackBufferRange' not found!`);
  glTransformFeedbackBufferRange(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetTransformFeedbackiv glGetTransformFeedbackiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTransformFeedbackiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTransformFeedbackiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTransformFeedbackiv = cast(glbfn_glGetTransformFeedbackiv)glbindGetProcAddress(`glGetTransformFeedbackiv`);
  if (glGetTransformFeedbackiv is null) assert(0, `OpenGL function 'glGetTransformFeedbackiv' not found!`);
  glGetTransformFeedbackiv(a0,a1,a2,);
}
__gshared glbfn_glGetTransformFeedbacki_v glGetTransformFeedbacki_v = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetTransformFeedbacki_v_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTransformFeedbacki_v_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetTransformFeedbacki_v = cast(glbfn_glGetTransformFeedbacki_v)glbindGetProcAddress(`glGetTransformFeedbacki_v`);
  if (glGetTransformFeedbacki_v is null) assert(0, `OpenGL function 'glGetTransformFeedbacki_v' not found!`);
  glGetTransformFeedbacki_v(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTransformFeedbacki64_v glGetTransformFeedbacki64_v = function void (uint a0, uint a1, uint a2, long* a3) nothrow @nogc {
  glbfn_glGetTransformFeedbacki64_v_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTransformFeedbacki64_v_loader (uint a0, uint a1, uint a2, long* a3) nothrow @nogc {
  glGetTransformFeedbacki64_v = cast(glbfn_glGetTransformFeedbacki64_v)glbindGetProcAddress(`glGetTransformFeedbacki64_v`);
  if (glGetTransformFeedbacki64_v is null) assert(0, `OpenGL function 'glGetTransformFeedbacki64_v' not found!`);
  glGetTransformFeedbacki64_v(a0,a1,a2,a3,);
}
__gshared glbfn_glCreateBuffers glCreateBuffers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateBuffers_loader(a0,a1,);
};
private auto glbfn_glCreateBuffers_loader (int a0, uint* a1) nothrow @nogc {
  glCreateBuffers = cast(glbfn_glCreateBuffers)glbindGetProcAddress(`glCreateBuffers`);
  if (glCreateBuffers is null) assert(0, `OpenGL function 'glCreateBuffers' not found!`);
  glCreateBuffers(a0,a1,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glNamedBufferStorage glNamedBufferStorage = function void (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glbfn_glNamedBufferStorage_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glNamedBufferStorage_loader (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glNamedBufferStorage = cast(glbfn_glNamedBufferStorage)glbindGetProcAddress(`glNamedBufferStorage`);
  if (glNamedBufferStorage is null) assert(0, `OpenGL function 'glNamedBufferStorage' not found!`);
  glNamedBufferStorage(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glNamedBufferData glNamedBufferData = function void (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glbfn_glNamedBufferData_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glNamedBufferData_loader (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glNamedBufferData = cast(glbfn_glNamedBufferData)glbindGetProcAddress(`glNamedBufferData`);
  if (glNamedBufferData is null) assert(0, `OpenGL function 'glNamedBufferData' not found!`);
  glNamedBufferData(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glNamedBufferSubData glNamedBufferSubData = function void (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glNamedBufferSubData_loader(a0,a1,a2,a3,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glNamedBufferSubData_loader (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glNamedBufferSubData = cast(glbfn_glNamedBufferSubData)glbindGetProcAddress(`glNamedBufferSubData`);
  if (glNamedBufferSubData is null) assert(0, `OpenGL function 'glNamedBufferSubData' not found!`);
  glNamedBufferSubData(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4)
__gshared glbfn_glCopyNamedBufferSubData glCopyNamedBufferSubData = function void (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyNamedBufferSubData_loader(a0,a1,a2,a3,a4,);
};
static if (size_t.sizeof == 4)
private auto glbfn_glCopyNamedBufferSubData_loader (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyNamedBufferSubData = cast(glbfn_glCopyNamedBufferSubData)glbindGetProcAddress(`glCopyNamedBufferSubData`);
  if (glCopyNamedBufferSubData is null) assert(0, `OpenGL function 'glCopyNamedBufferSubData' not found!`);
  glCopyNamedBufferSubData(a0,a1,a2,a3,a4,);
}
static if (size_t.sizeof == 4) {
// fuck off, x86_64
__gshared glbfn_glClearNamedBufferData glClearNamedBufferData = function void (uint a0, uint a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glbfn_glClearNamedBufferData_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glClearNamedBufferData_loader (uint a0, uint a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glClearNamedBufferData = cast(glbfn_glClearNamedBufferData)glbindGetProcAddress(`glClearNamedBufferData`);
  if (glClearNamedBufferData is null) assert(0, `OpenGL function 'glClearNamedBufferData' not found!`);
  glClearNamedBufferData(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glClearNamedBufferSubData glClearNamedBufferSubData = function void (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glClearNamedBufferSubData_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glClearNamedBufferSubData_loader (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glClearNamedBufferSubData = cast(glbfn_glClearNamedBufferSubData)glbindGetProcAddress(`glClearNamedBufferSubData`);
  if (glClearNamedBufferSubData is null) assert(0, `OpenGL function 'glClearNamedBufferSubData' not found!`);
  glClearNamedBufferSubData(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMapNamedBuffer glMapNamedBuffer = function void* (uint a0, uint a1) nothrow @nogc {
  return glbfn_glMapNamedBuffer_loader(a0,a1,);
};
private auto glbfn_glMapNamedBuffer_loader (uint a0, uint a1) nothrow @nogc {
  glMapNamedBuffer = cast(glbfn_glMapNamedBuffer)glbindGetProcAddress(`glMapNamedBuffer`);
  if (glMapNamedBuffer is null) assert(0, `OpenGL function 'glMapNamedBuffer' not found!`);
  return glMapNamedBuffer(a0,a1,);
}
__gshared glbfn_glMapNamedBufferRange glMapNamedBufferRange = function void* (uint a0, int a1, int a2, uint a3) nothrow @nogc {
  return glbfn_glMapNamedBufferRange_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMapNamedBufferRange_loader (uint a0, int a1, int a2, uint a3) nothrow @nogc {
  glMapNamedBufferRange = cast(glbfn_glMapNamedBufferRange)glbindGetProcAddress(`glMapNamedBufferRange`);
  if (glMapNamedBufferRange is null) assert(0, `OpenGL function 'glMapNamedBufferRange' not found!`);
  return glMapNamedBufferRange(a0,a1,a2,a3,);
}
__gshared glbfn_glUnmapNamedBuffer glUnmapNamedBuffer = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glUnmapNamedBuffer_loader(a0,);
};
private auto glbfn_glUnmapNamedBuffer_loader (uint a0) nothrow @nogc {
  glUnmapNamedBuffer = cast(glbfn_glUnmapNamedBuffer)glbindGetProcAddress(`glUnmapNamedBuffer`);
  if (glUnmapNamedBuffer is null) assert(0, `OpenGL function 'glUnmapNamedBuffer' not found!`);
  return glUnmapNamedBuffer(a0,);
}
__gshared glbfn_glFlushMappedNamedBufferRange glFlushMappedNamedBufferRange = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glFlushMappedNamedBufferRange_loader(a0,a1,a2,);
};
private auto glbfn_glFlushMappedNamedBufferRange_loader (uint a0, int a1, int a2) nothrow @nogc {
  glFlushMappedNamedBufferRange = cast(glbfn_glFlushMappedNamedBufferRange)glbindGetProcAddress(`glFlushMappedNamedBufferRange`);
  if (glFlushMappedNamedBufferRange is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRange' not found!`);
  glFlushMappedNamedBufferRange(a0,a1,a2,);
}
__gshared glbfn_glGetNamedBufferParameteriv glGetNamedBufferParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetNamedBufferParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedBufferParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetNamedBufferParameteriv = cast(glbfn_glGetNamedBufferParameteriv)glbindGetProcAddress(`glGetNamedBufferParameteriv`);
  if (glGetNamedBufferParameteriv is null) assert(0, `OpenGL function 'glGetNamedBufferParameteriv' not found!`);
  glGetNamedBufferParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetNamedBufferParameteri64v glGetNamedBufferParameteri64v = function void (uint a0, uint a1, long* a2) nothrow @nogc {
  glbfn_glGetNamedBufferParameteri64v_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedBufferParameteri64v_loader (uint a0, uint a1, long* a2) nothrow @nogc {
  glGetNamedBufferParameteri64v = cast(glbfn_glGetNamedBufferParameteri64v)glbindGetProcAddress(`glGetNamedBufferParameteri64v`);
  if (glGetNamedBufferParameteri64v is null) assert(0, `OpenGL function 'glGetNamedBufferParameteri64v' not found!`);
  glGetNamedBufferParameteri64v(a0,a1,a2,);
}
__gshared glbfn_glGetNamedBufferPointerv glGetNamedBufferPointerv = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetNamedBufferPointerv_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedBufferPointerv_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetNamedBufferPointerv = cast(glbfn_glGetNamedBufferPointerv)glbindGetProcAddress(`glGetNamedBufferPointerv`);
  if (glGetNamedBufferPointerv is null) assert(0, `OpenGL function 'glGetNamedBufferPointerv' not found!`);
  glGetNamedBufferPointerv(a0,a1,a2,);
}
__gshared glbfn_glGetNamedBufferSubData glGetNamedBufferSubData = function void (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetNamedBufferSubData_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedBufferSubData_loader (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glGetNamedBufferSubData = cast(glbfn_glGetNamedBufferSubData)glbindGetProcAddress(`glGetNamedBufferSubData`);
  if (glGetNamedBufferSubData is null) assert(0, `OpenGL function 'glGetNamedBufferSubData' not found!`);
  glGetNamedBufferSubData(a0,a1,a2,a3,);
}
__gshared glbfn_glCreateFramebuffers glCreateFramebuffers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateFramebuffers_loader(a0,a1,);
};
private auto glbfn_glCreateFramebuffers_loader (int a0, uint* a1) nothrow @nogc {
  glCreateFramebuffers = cast(glbfn_glCreateFramebuffers)glbindGetProcAddress(`glCreateFramebuffers`);
  if (glCreateFramebuffers is null) assert(0, `OpenGL function 'glCreateFramebuffers' not found!`);
  glCreateFramebuffers(a0,a1,);
}
__gshared glbfn_glNamedFramebufferRenderbuffer glNamedFramebufferRenderbuffer = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glNamedFramebufferRenderbuffer_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedFramebufferRenderbuffer_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glNamedFramebufferRenderbuffer = cast(glbfn_glNamedFramebufferRenderbuffer)glbindGetProcAddress(`glNamedFramebufferRenderbuffer`);
  if (glNamedFramebufferRenderbuffer is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbuffer' not found!`);
  glNamedFramebufferRenderbuffer(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedFramebufferParameteri glNamedFramebufferParameteri = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glNamedFramebufferParameteri_loader(a0,a1,a2,);
};
private auto glbfn_glNamedFramebufferParameteri_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glNamedFramebufferParameteri = cast(glbfn_glNamedFramebufferParameteri)glbindGetProcAddress(`glNamedFramebufferParameteri`);
  if (glNamedFramebufferParameteri is null) assert(0, `OpenGL function 'glNamedFramebufferParameteri' not found!`);
  glNamedFramebufferParameteri(a0,a1,a2,);
}
__gshared glbfn_glNamedFramebufferTexture glNamedFramebufferTexture = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glNamedFramebufferTexture_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedFramebufferTexture_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glNamedFramebufferTexture = cast(glbfn_glNamedFramebufferTexture)glbindGetProcAddress(`glNamedFramebufferTexture`);
  if (glNamedFramebufferTexture is null) assert(0, `OpenGL function 'glNamedFramebufferTexture' not found!`);
  glNamedFramebufferTexture(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedFramebufferTextureLayer glNamedFramebufferTextureLayer = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glNamedFramebufferTextureLayer_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedFramebufferTextureLayer_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glNamedFramebufferTextureLayer = cast(glbfn_glNamedFramebufferTextureLayer)glbindGetProcAddress(`glNamedFramebufferTextureLayer`);
  if (glNamedFramebufferTextureLayer is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayer' not found!`);
  glNamedFramebufferTextureLayer(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedFramebufferDrawBuffer glNamedFramebufferDrawBuffer = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glNamedFramebufferDrawBuffer_loader(a0,a1,);
};
private auto glbfn_glNamedFramebufferDrawBuffer_loader (uint a0, uint a1) nothrow @nogc {
  glNamedFramebufferDrawBuffer = cast(glbfn_glNamedFramebufferDrawBuffer)glbindGetProcAddress(`glNamedFramebufferDrawBuffer`);
  if (glNamedFramebufferDrawBuffer is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffer' not found!`);
  glNamedFramebufferDrawBuffer(a0,a1,);
}
__gshared glbfn_glNamedFramebufferDrawBuffers glNamedFramebufferDrawBuffers = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glNamedFramebufferDrawBuffers_loader(a0,a1,a2,);
};
private auto glbfn_glNamedFramebufferDrawBuffers_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glNamedFramebufferDrawBuffers = cast(glbfn_glNamedFramebufferDrawBuffers)glbindGetProcAddress(`glNamedFramebufferDrawBuffers`);
  if (glNamedFramebufferDrawBuffers is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffers' not found!`);
  glNamedFramebufferDrawBuffers(a0,a1,a2,);
}
__gshared glbfn_glNamedFramebufferReadBuffer glNamedFramebufferReadBuffer = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glNamedFramebufferReadBuffer_loader(a0,a1,);
};
private auto glbfn_glNamedFramebufferReadBuffer_loader (uint a0, uint a1) nothrow @nogc {
  glNamedFramebufferReadBuffer = cast(glbfn_glNamedFramebufferReadBuffer)glbindGetProcAddress(`glNamedFramebufferReadBuffer`);
  if (glNamedFramebufferReadBuffer is null) assert(0, `OpenGL function 'glNamedFramebufferReadBuffer' not found!`);
  glNamedFramebufferReadBuffer(a0,a1,);
}
__gshared glbfn_glInvalidateNamedFramebufferData glInvalidateNamedFramebufferData = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glInvalidateNamedFramebufferData_loader(a0,a1,a2,);
};
private auto glbfn_glInvalidateNamedFramebufferData_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glInvalidateNamedFramebufferData = cast(glbfn_glInvalidateNamedFramebufferData)glbindGetProcAddress(`glInvalidateNamedFramebufferData`);
  if (glInvalidateNamedFramebufferData is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferData' not found!`);
  glInvalidateNamedFramebufferData(a0,a1,a2,);
}
__gshared glbfn_glInvalidateNamedFramebufferSubData glInvalidateNamedFramebufferSubData = function void (uint a0, int a1, const(uint)* a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glInvalidateNamedFramebufferSubData_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glInvalidateNamedFramebufferSubData_loader (uint a0, int a1, const(uint)* a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glInvalidateNamedFramebufferSubData = cast(glbfn_glInvalidateNamedFramebufferSubData)glbindGetProcAddress(`glInvalidateNamedFramebufferSubData`);
  if (glInvalidateNamedFramebufferSubData is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferSubData' not found!`);
  glInvalidateNamedFramebufferSubData(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glClearNamedFramebufferiv glClearNamedFramebufferiv = function void (uint a0, uint a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glClearNamedFramebufferiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearNamedFramebufferiv_loader (uint a0, uint a1, int a2, const(int)* a3) nothrow @nogc {
  glClearNamedFramebufferiv = cast(glbfn_glClearNamedFramebufferiv)glbindGetProcAddress(`glClearNamedFramebufferiv`);
  if (glClearNamedFramebufferiv is null) assert(0, `OpenGL function 'glClearNamedFramebufferiv' not found!`);
  glClearNamedFramebufferiv(a0,a1,a2,a3,);
}
__gshared glbfn_glClearNamedFramebufferuiv glClearNamedFramebufferuiv = function void (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glClearNamedFramebufferuiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearNamedFramebufferuiv_loader (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glClearNamedFramebufferuiv = cast(glbfn_glClearNamedFramebufferuiv)glbindGetProcAddress(`glClearNamedFramebufferuiv`);
  if (glClearNamedFramebufferuiv is null) assert(0, `OpenGL function 'glClearNamedFramebufferuiv' not found!`);
  glClearNamedFramebufferuiv(a0,a1,a2,a3,);
}
__gshared glbfn_glClearNamedFramebufferfv glClearNamedFramebufferfv = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glClearNamedFramebufferfv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearNamedFramebufferfv_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glClearNamedFramebufferfv = cast(glbfn_glClearNamedFramebufferfv)glbindGetProcAddress(`glClearNamedFramebufferfv`);
  if (glClearNamedFramebufferfv is null) assert(0, `OpenGL function 'glClearNamedFramebufferfv' not found!`);
  glClearNamedFramebufferfv(a0,a1,a2,a3,);
}
__gshared glbfn_glClearNamedFramebufferfi glClearNamedFramebufferfi = function void (uint a0, uint a1, int a2, float a3, int a4) nothrow @nogc {
  glbfn_glClearNamedFramebufferfi_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glClearNamedFramebufferfi_loader (uint a0, uint a1, int a2, float a3, int a4) nothrow @nogc {
  glClearNamedFramebufferfi = cast(glbfn_glClearNamedFramebufferfi)glbindGetProcAddress(`glClearNamedFramebufferfi`);
  if (glClearNamedFramebufferfi is null) assert(0, `OpenGL function 'glClearNamedFramebufferfi' not found!`);
  glClearNamedFramebufferfi(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBlitNamedFramebuffer glBlitNamedFramebuffer = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint a10, uint a11) nothrow @nogc {
  glbfn_glBlitNamedFramebuffer_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glBlitNamedFramebuffer_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint a10, uint a11) nothrow @nogc {
  glBlitNamedFramebuffer = cast(glbfn_glBlitNamedFramebuffer)glbindGetProcAddress(`glBlitNamedFramebuffer`);
  if (glBlitNamedFramebuffer is null) assert(0, `OpenGL function 'glBlitNamedFramebuffer' not found!`);
  glBlitNamedFramebuffer(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glCheckNamedFramebufferStatus glCheckNamedFramebufferStatus = function uint (uint a0, uint a1) nothrow @nogc {
  return glbfn_glCheckNamedFramebufferStatus_loader(a0,a1,);
};
private auto glbfn_glCheckNamedFramebufferStatus_loader (uint a0, uint a1) nothrow @nogc {
  glCheckNamedFramebufferStatus = cast(glbfn_glCheckNamedFramebufferStatus)glbindGetProcAddress(`glCheckNamedFramebufferStatus`);
  if (glCheckNamedFramebufferStatus is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatus' not found!`);
  return glCheckNamedFramebufferStatus(a0,a1,);
}
__gshared glbfn_glGetNamedFramebufferParameteriv glGetNamedFramebufferParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetNamedFramebufferParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedFramebufferParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetNamedFramebufferParameteriv = cast(glbfn_glGetNamedFramebufferParameteriv)glbindGetProcAddress(`glGetNamedFramebufferParameteriv`);
  if (glGetNamedFramebufferParameteriv is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameteriv' not found!`);
  glGetNamedFramebufferParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetNamedFramebufferAttachmentParameteriv glGetNamedFramebufferAttachmentParameteriv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetNamedFramebufferAttachmentParameteriv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedFramebufferAttachmentParameteriv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetNamedFramebufferAttachmentParameteriv = cast(glbfn_glGetNamedFramebufferAttachmentParameteriv)glbindGetProcAddress(`glGetNamedFramebufferAttachmentParameteriv`);
  if (glGetNamedFramebufferAttachmentParameteriv is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameteriv' not found!`);
  glGetNamedFramebufferAttachmentParameteriv(a0,a1,a2,a3,);
}
__gshared glbfn_glCreateRenderbuffers glCreateRenderbuffers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateRenderbuffers_loader(a0,a1,);
};
private auto glbfn_glCreateRenderbuffers_loader (int a0, uint* a1) nothrow @nogc {
  glCreateRenderbuffers = cast(glbfn_glCreateRenderbuffers)glbindGetProcAddress(`glCreateRenderbuffers`);
  if (glCreateRenderbuffers is null) assert(0, `OpenGL function 'glCreateRenderbuffers' not found!`);
  glCreateRenderbuffers(a0,a1,);
}
__gshared glbfn_glNamedRenderbufferStorage glNamedRenderbufferStorage = function void (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glbfn_glNamedRenderbufferStorage_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedRenderbufferStorage_loader (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glNamedRenderbufferStorage = cast(glbfn_glNamedRenderbufferStorage)glbindGetProcAddress(`glNamedRenderbufferStorage`);
  if (glNamedRenderbufferStorage is null) assert(0, `OpenGL function 'glNamedRenderbufferStorage' not found!`);
  glNamedRenderbufferStorage(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedRenderbufferStorageMultisample glNamedRenderbufferStorageMultisample = function void (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glNamedRenderbufferStorageMultisample_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedRenderbufferStorageMultisample_loader (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glNamedRenderbufferStorageMultisample = cast(glbfn_glNamedRenderbufferStorageMultisample)glbindGetProcAddress(`glNamedRenderbufferStorageMultisample`);
  if (glNamedRenderbufferStorageMultisample is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisample' not found!`);
  glNamedRenderbufferStorageMultisample(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetNamedRenderbufferParameteriv glGetNamedRenderbufferParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetNamedRenderbufferParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedRenderbufferParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetNamedRenderbufferParameteriv = cast(glbfn_glGetNamedRenderbufferParameteriv)glbindGetProcAddress(`glGetNamedRenderbufferParameteriv`);
  if (glGetNamedRenderbufferParameteriv is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameteriv' not found!`);
  glGetNamedRenderbufferParameteriv(a0,a1,a2,);
}
__gshared glbfn_glCreateTextures glCreateTextures = function void (uint a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glCreateTextures_loader(a0,a1,a2,);
};
private auto glbfn_glCreateTextures_loader (uint a0, int a1, uint* a2) nothrow @nogc {
  glCreateTextures = cast(glbfn_glCreateTextures)glbindGetProcAddress(`glCreateTextures`);
  if (glCreateTextures is null) assert(0, `OpenGL function 'glCreateTextures' not found!`);
  glCreateTextures(a0,a1,a2,);
}
__gshared glbfn_glTextureBuffer glTextureBuffer = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glTextureBuffer_loader(a0,a1,a2,);
};
private auto glbfn_glTextureBuffer_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glTextureBuffer = cast(glbfn_glTextureBuffer)glbindGetProcAddress(`glTextureBuffer`);
  if (glTextureBuffer is null) assert(0, `OpenGL function 'glTextureBuffer' not found!`);
  glTextureBuffer(a0,a1,a2,);
}
__gshared glbfn_glTextureBufferRange glTextureBufferRange = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glTextureBufferRange_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTextureBufferRange_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glTextureBufferRange = cast(glbfn_glTextureBufferRange)glbindGetProcAddress(`glTextureBufferRange`);
  if (glTextureBufferRange is null) assert(0, `OpenGL function 'glTextureBufferRange' not found!`);
  glTextureBufferRange(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTextureStorage1D glTextureStorage1D = function void (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glbfn_glTextureStorage1D_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureStorage1D_loader (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glTextureStorage1D = cast(glbfn_glTextureStorage1D)glbindGetProcAddress(`glTextureStorage1D`);
  if (glTextureStorage1D is null) assert(0, `OpenGL function 'glTextureStorage1D' not found!`);
  glTextureStorage1D(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureStorage2D glTextureStorage2D = function void (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glTextureStorage2D_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTextureStorage2D_loader (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glTextureStorage2D = cast(glbfn_glTextureStorage2D)glbindGetProcAddress(`glTextureStorage2D`);
  if (glTextureStorage2D is null) assert(0, `OpenGL function 'glTextureStorage2D' not found!`);
  glTextureStorage2D(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTextureStorage3D glTextureStorage3D = function void (uint a0, int a1, uint a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glTextureStorage3D_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glTextureStorage3D_loader (uint a0, int a1, uint a2, int a3, int a4, int a5) nothrow @nogc {
  glTextureStorage3D = cast(glbfn_glTextureStorage3D)glbindGetProcAddress(`glTextureStorage3D`);
  if (glTextureStorage3D is null) assert(0, `OpenGL function 'glTextureStorage3D' not found!`);
  glTextureStorage3D(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTextureStorage2DMultisample glTextureStorage2DMultisample = function void (uint a0, int a1, uint a2, int a3, int a4, ubyte a5) nothrow @nogc {
  glbfn_glTextureStorage2DMultisample_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glTextureStorage2DMultisample_loader (uint a0, int a1, uint a2, int a3, int a4, ubyte a5) nothrow @nogc {
  glTextureStorage2DMultisample = cast(glbfn_glTextureStorage2DMultisample)glbindGetProcAddress(`glTextureStorage2DMultisample`);
  if (glTextureStorage2DMultisample is null) assert(0, `OpenGL function 'glTextureStorage2DMultisample' not found!`);
  glTextureStorage2DMultisample(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTextureStorage3DMultisample glTextureStorage3DMultisample = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glbfn_glTextureStorage3DMultisample_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTextureStorage3DMultisample_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glTextureStorage3DMultisample = cast(glbfn_glTextureStorage3DMultisample)glbindGetProcAddress(`glTextureStorage3DMultisample`);
  if (glTextureStorage3DMultisample is null) assert(0, `OpenGL function 'glTextureStorage3DMultisample' not found!`);
  glTextureStorage3DMultisample(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTextureSubImage1D glTextureSubImage1D = function void (uint a0, int a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glTextureSubImage1D_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTextureSubImage1D_loader (uint a0, int a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glTextureSubImage1D = cast(glbfn_glTextureSubImage1D)glbindGetProcAddress(`glTextureSubImage1D`);
  if (glTextureSubImage1D is null) assert(0, `OpenGL function 'glTextureSubImage1D' not found!`);
  glTextureSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTextureSubImage2D glTextureSubImage2D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glbfn_glTextureSubImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTextureSubImage2D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glTextureSubImage2D = cast(glbfn_glTextureSubImage2D)glbindGetProcAddress(`glTextureSubImage2D`);
  if (glTextureSubImage2D is null) assert(0, `OpenGL function 'glTextureSubImage2D' not found!`);
  glTextureSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glTextureSubImage3D glTextureSubImage3D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glbfn_glTextureSubImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glTextureSubImage3D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glTextureSubImage3D = cast(glbfn_glTextureSubImage3D)glbindGetProcAddress(`glTextureSubImage3D`);
  if (glTextureSubImage3D is null) assert(0, `OpenGL function 'glTextureSubImage3D' not found!`);
  glTextureSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glCompressedTextureSubImage1D glCompressedTextureSubImage1D = function void (uint a0, int a1, int a2, int a3, uint a4, int a5, const(void)* a6) nothrow @nogc {
  glbfn_glCompressedTextureSubImage1D_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCompressedTextureSubImage1D_loader (uint a0, int a1, int a2, int a3, uint a4, int a5, const(void)* a6) nothrow @nogc {
  glCompressedTextureSubImage1D = cast(glbfn_glCompressedTextureSubImage1D)glbindGetProcAddress(`glCompressedTextureSubImage1D`);
  if (glCompressedTextureSubImage1D is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1D' not found!`);
  glCompressedTextureSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCompressedTextureSubImage2D glCompressedTextureSubImage2D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, int a7, const(void)* a8) nothrow @nogc {
  glbfn_glCompressedTextureSubImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCompressedTextureSubImage2D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, int a7, const(void)* a8) nothrow @nogc {
  glCompressedTextureSubImage2D = cast(glbfn_glCompressedTextureSubImage2D)glbindGetProcAddress(`glCompressedTextureSubImage2D`);
  if (glCompressedTextureSubImage2D is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2D' not found!`);
  glCompressedTextureSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCompressedTextureSubImage3D glCompressedTextureSubImage3D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, int a9, const(void)* a10) nothrow @nogc {
  glbfn_glCompressedTextureSubImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glCompressedTextureSubImage3D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, int a9, const(void)* a10) nothrow @nogc {
  glCompressedTextureSubImage3D = cast(glbfn_glCompressedTextureSubImage3D)glbindGetProcAddress(`glCompressedTextureSubImage3D`);
  if (glCompressedTextureSubImage3D is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3D' not found!`);
  glCompressedTextureSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glCopyTextureSubImage1D glCopyTextureSubImage1D = function void (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glCopyTextureSubImage1D_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glCopyTextureSubImage1D_loader (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glCopyTextureSubImage1D = cast(glbfn_glCopyTextureSubImage1D)glbindGetProcAddress(`glCopyTextureSubImage1D`);
  if (glCopyTextureSubImage1D is null) assert(0, `OpenGL function 'glCopyTextureSubImage1D' not found!`);
  glCopyTextureSubImage1D(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glCopyTextureSubImage2D glCopyTextureSubImage2D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glCopyTextureSubImage2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCopyTextureSubImage2D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glCopyTextureSubImage2D = cast(glbfn_glCopyTextureSubImage2D)glbindGetProcAddress(`glCopyTextureSubImage2D`);
  if (glCopyTextureSubImage2D is null) assert(0, `OpenGL function 'glCopyTextureSubImage2D' not found!`);
  glCopyTextureSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCopyTextureSubImage3D glCopyTextureSubImage3D = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glbfn_glCopyTextureSubImage3D_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCopyTextureSubImage3D_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glCopyTextureSubImage3D = cast(glbfn_glCopyTextureSubImage3D)glbindGetProcAddress(`glCopyTextureSubImage3D`);
  if (glCopyTextureSubImage3D is null) assert(0, `OpenGL function 'glCopyTextureSubImage3D' not found!`);
  glCopyTextureSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glTextureParameterf glTextureParameterf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glTextureParameterf_loader(a0,a1,a2,);
};
private auto glbfn_glTextureParameterf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glTextureParameterf = cast(glbfn_glTextureParameterf)glbindGetProcAddress(`glTextureParameterf`);
  if (glTextureParameterf is null) assert(0, `OpenGL function 'glTextureParameterf' not found!`);
  glTextureParameterf(a0,a1,a2,);
}
__gshared glbfn_glTextureParameterfv glTextureParameterfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glTextureParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glTextureParameterfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glTextureParameterfv = cast(glbfn_glTextureParameterfv)glbindGetProcAddress(`glTextureParameterfv`);
  if (glTextureParameterfv is null) assert(0, `OpenGL function 'glTextureParameterfv' not found!`);
  glTextureParameterfv(a0,a1,a2,);
}
__gshared glbfn_glTextureParameteri glTextureParameteri = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTextureParameteri_loader(a0,a1,a2,);
};
private auto glbfn_glTextureParameteri_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glTextureParameteri = cast(glbfn_glTextureParameteri)glbindGetProcAddress(`glTextureParameteri`);
  if (glTextureParameteri is null) assert(0, `OpenGL function 'glTextureParameteri' not found!`);
  glTextureParameteri(a0,a1,a2,);
}
__gshared glbfn_glTextureParameterIiv glTextureParameterIiv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTextureParameterIiv_loader(a0,a1,a2,);
};
private auto glbfn_glTextureParameterIiv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTextureParameterIiv = cast(glbfn_glTextureParameterIiv)glbindGetProcAddress(`glTextureParameterIiv`);
  if (glTextureParameterIiv is null) assert(0, `OpenGL function 'glTextureParameterIiv' not found!`);
  glTextureParameterIiv(a0,a1,a2,);
}
__gshared glbfn_glTextureParameterIuiv glTextureParameterIuiv = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glTextureParameterIuiv_loader(a0,a1,a2,);
};
private auto glbfn_glTextureParameterIuiv_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glTextureParameterIuiv = cast(glbfn_glTextureParameterIuiv)glbindGetProcAddress(`glTextureParameterIuiv`);
  if (glTextureParameterIuiv is null) assert(0, `OpenGL function 'glTextureParameterIuiv' not found!`);
  glTextureParameterIuiv(a0,a1,a2,);
}
__gshared glbfn_glTextureParameteriv glTextureParameteriv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTextureParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glTextureParameteriv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTextureParameteriv = cast(glbfn_glTextureParameteriv)glbindGetProcAddress(`glTextureParameteriv`);
  if (glTextureParameteriv is null) assert(0, `OpenGL function 'glTextureParameteriv' not found!`);
  glTextureParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGenerateTextureMipmap glGenerateTextureMipmap = function void (uint a0) nothrow @nogc {
  glbfn_glGenerateTextureMipmap_loader(a0,);
};
private auto glbfn_glGenerateTextureMipmap_loader (uint a0) nothrow @nogc {
  glGenerateTextureMipmap = cast(glbfn_glGenerateTextureMipmap)glbindGetProcAddress(`glGenerateTextureMipmap`);
  if (glGenerateTextureMipmap is null) assert(0, `OpenGL function 'glGenerateTextureMipmap' not found!`);
  glGenerateTextureMipmap(a0,);
}
__gshared glbfn_glBindTextureUnit glBindTextureUnit = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindTextureUnit_loader(a0,a1,);
};
private auto glbfn_glBindTextureUnit_loader (uint a0, uint a1) nothrow @nogc {
  glBindTextureUnit = cast(glbfn_glBindTextureUnit)glbindGetProcAddress(`glBindTextureUnit`);
  if (glBindTextureUnit is null) assert(0, `OpenGL function 'glBindTextureUnit' not found!`);
  glBindTextureUnit(a0,a1,);
}
__gshared glbfn_glGetTextureImage glGetTextureImage = function void (uint a0, int a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glbfn_glGetTextureImage_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetTextureImage_loader (uint a0, int a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glGetTextureImage = cast(glbfn_glGetTextureImage)glbindGetProcAddress(`glGetTextureImage`);
  if (glGetTextureImage is null) assert(0, `OpenGL function 'glGetTextureImage' not found!`);
  glGetTextureImage(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetCompressedTextureImage glGetCompressedTextureImage = function void (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetCompressedTextureImage_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetCompressedTextureImage_loader (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glGetCompressedTextureImage = cast(glbfn_glGetCompressedTextureImage)glbindGetProcAddress(`glGetCompressedTextureImage`);
  if (glGetCompressedTextureImage is null) assert(0, `OpenGL function 'glGetCompressedTextureImage' not found!`);
  glGetCompressedTextureImage(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTextureLevelParameterfv glGetTextureLevelParameterfv = function void (uint a0, int a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetTextureLevelParameterfv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTextureLevelParameterfv_loader (uint a0, int a1, uint a2, float* a3) nothrow @nogc {
  glGetTextureLevelParameterfv = cast(glbfn_glGetTextureLevelParameterfv)glbindGetProcAddress(`glGetTextureLevelParameterfv`);
  if (glGetTextureLevelParameterfv is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfv' not found!`);
  glGetTextureLevelParameterfv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTextureLevelParameteriv glGetTextureLevelParameteriv = function void (uint a0, int a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetTextureLevelParameteriv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTextureLevelParameteriv_loader (uint a0, int a1, uint a2, int* a3) nothrow @nogc {
  glGetTextureLevelParameteriv = cast(glbfn_glGetTextureLevelParameteriv)glbindGetProcAddress(`glGetTextureLevelParameteriv`);
  if (glGetTextureLevelParameteriv is null) assert(0, `OpenGL function 'glGetTextureLevelParameteriv' not found!`);
  glGetTextureLevelParameteriv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTextureParameterfv glGetTextureParameterfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetTextureParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTextureParameterfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetTextureParameterfv = cast(glbfn_glGetTextureParameterfv)glbindGetProcAddress(`glGetTextureParameterfv`);
  if (glGetTextureParameterfv is null) assert(0, `OpenGL function 'glGetTextureParameterfv' not found!`);
  glGetTextureParameterfv(a0,a1,a2,);
}
__gshared glbfn_glGetTextureParameterIiv glGetTextureParameterIiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTextureParameterIiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTextureParameterIiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTextureParameterIiv = cast(glbfn_glGetTextureParameterIiv)glbindGetProcAddress(`glGetTextureParameterIiv`);
  if (glGetTextureParameterIiv is null) assert(0, `OpenGL function 'glGetTextureParameterIiv' not found!`);
  glGetTextureParameterIiv(a0,a1,a2,);
}
__gshared glbfn_glGetTextureParameterIuiv glGetTextureParameterIuiv = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetTextureParameterIuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTextureParameterIuiv_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetTextureParameterIuiv = cast(glbfn_glGetTextureParameterIuiv)glbindGetProcAddress(`glGetTextureParameterIuiv`);
  if (glGetTextureParameterIuiv is null) assert(0, `OpenGL function 'glGetTextureParameterIuiv' not found!`);
  glGetTextureParameterIuiv(a0,a1,a2,);
}
__gshared glbfn_glGetTextureParameteriv glGetTextureParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTextureParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetTextureParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTextureParameteriv = cast(glbfn_glGetTextureParameteriv)glbindGetProcAddress(`glGetTextureParameteriv`);
  if (glGetTextureParameteriv is null) assert(0, `OpenGL function 'glGetTextureParameteriv' not found!`);
  glGetTextureParameteriv(a0,a1,a2,);
}
__gshared glbfn_glCreateVertexArrays glCreateVertexArrays = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateVertexArrays_loader(a0,a1,);
};
private auto glbfn_glCreateVertexArrays_loader (int a0, uint* a1) nothrow @nogc {
  glCreateVertexArrays = cast(glbfn_glCreateVertexArrays)glbindGetProcAddress(`glCreateVertexArrays`);
  if (glCreateVertexArrays is null) assert(0, `OpenGL function 'glCreateVertexArrays' not found!`);
  glCreateVertexArrays(a0,a1,);
}
__gshared glbfn_glDisableVertexArrayAttrib glDisableVertexArrayAttrib = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisableVertexArrayAttrib_loader(a0,a1,);
};
private auto glbfn_glDisableVertexArrayAttrib_loader (uint a0, uint a1) nothrow @nogc {
  glDisableVertexArrayAttrib = cast(glbfn_glDisableVertexArrayAttrib)glbindGetProcAddress(`glDisableVertexArrayAttrib`);
  if (glDisableVertexArrayAttrib is null) assert(0, `OpenGL function 'glDisableVertexArrayAttrib' not found!`);
  glDisableVertexArrayAttrib(a0,a1,);
}
__gshared glbfn_glEnableVertexArrayAttrib glEnableVertexArrayAttrib = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnableVertexArrayAttrib_loader(a0,a1,);
};
private auto glbfn_glEnableVertexArrayAttrib_loader (uint a0, uint a1) nothrow @nogc {
  glEnableVertexArrayAttrib = cast(glbfn_glEnableVertexArrayAttrib)glbindGetProcAddress(`glEnableVertexArrayAttrib`);
  if (glEnableVertexArrayAttrib is null) assert(0, `OpenGL function 'glEnableVertexArrayAttrib' not found!`);
  glEnableVertexArrayAttrib(a0,a1,);
}
__gshared glbfn_glVertexArrayElementBuffer glVertexArrayElementBuffer = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexArrayElementBuffer_loader(a0,a1,);
};
private auto glbfn_glVertexArrayElementBuffer_loader (uint a0, uint a1) nothrow @nogc {
  glVertexArrayElementBuffer = cast(glbfn_glVertexArrayElementBuffer)glbindGetProcAddress(`glVertexArrayElementBuffer`);
  if (glVertexArrayElementBuffer is null) assert(0, `OpenGL function 'glVertexArrayElementBuffer' not found!`);
  glVertexArrayElementBuffer(a0,a1,);
}
__gshared glbfn_glVertexArrayVertexBuffer glVertexArrayVertexBuffer = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexArrayVertexBuffer_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayVertexBuffer_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glVertexArrayVertexBuffer = cast(glbfn_glVertexArrayVertexBuffer)glbindGetProcAddress(`glVertexArrayVertexBuffer`);
  if (glVertexArrayVertexBuffer is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffer' not found!`);
  glVertexArrayVertexBuffer(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayVertexBuffers glVertexArrayVertexBuffers = function void (uint a0, uint a1, int a2, const(uint)* a3, const(int)* a4, const(int)* a5) nothrow @nogc {
  glbfn_glVertexArrayVertexBuffers_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexArrayVertexBuffers_loader (uint a0, uint a1, int a2, const(uint)* a3, const(int)* a4, const(int)* a5) nothrow @nogc {
  glVertexArrayVertexBuffers = cast(glbfn_glVertexArrayVertexBuffers)glbindGetProcAddress(`glVertexArrayVertexBuffers`);
  if (glVertexArrayVertexBuffers is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffers' not found!`);
  glVertexArrayVertexBuffers(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glVertexArrayAttribBinding glVertexArrayAttribBinding = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glVertexArrayAttribBinding_loader(a0,a1,a2,);
};
private auto glbfn_glVertexArrayAttribBinding_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glVertexArrayAttribBinding = cast(glbfn_glVertexArrayAttribBinding)glbindGetProcAddress(`glVertexArrayAttribBinding`);
  if (glVertexArrayAttribBinding is null) assert(0, `OpenGL function 'glVertexArrayAttribBinding' not found!`);
  glVertexArrayAttribBinding(a0,a1,a2,);
}
__gshared glbfn_glVertexArrayAttribFormat glVertexArrayAttribFormat = function void (uint a0, uint a1, int a2, uint a3, ubyte a4, uint a5) nothrow @nogc {
  glbfn_glVertexArrayAttribFormat_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexArrayAttribFormat_loader (uint a0, uint a1, int a2, uint a3, ubyte a4, uint a5) nothrow @nogc {
  glVertexArrayAttribFormat = cast(glbfn_glVertexArrayAttribFormat)glbindGetProcAddress(`glVertexArrayAttribFormat`);
  if (glVertexArrayAttribFormat is null) assert(0, `OpenGL function 'glVertexArrayAttribFormat' not found!`);
  glVertexArrayAttribFormat(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glVertexArrayAttribIFormat glVertexArrayAttribIFormat = function void (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glVertexArrayAttribIFormat_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayAttribIFormat_loader (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glVertexArrayAttribIFormat = cast(glbfn_glVertexArrayAttribIFormat)glbindGetProcAddress(`glVertexArrayAttribIFormat`);
  if (glVertexArrayAttribIFormat is null) assert(0, `OpenGL function 'glVertexArrayAttribIFormat' not found!`);
  glVertexArrayAttribIFormat(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayAttribLFormat glVertexArrayAttribLFormat = function void (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glVertexArrayAttribLFormat_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayAttribLFormat_loader (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glVertexArrayAttribLFormat = cast(glbfn_glVertexArrayAttribLFormat)glbindGetProcAddress(`glVertexArrayAttribLFormat`);
  if (glVertexArrayAttribLFormat is null) assert(0, `OpenGL function 'glVertexArrayAttribLFormat' not found!`);
  glVertexArrayAttribLFormat(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayBindingDivisor glVertexArrayBindingDivisor = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glVertexArrayBindingDivisor_loader(a0,a1,a2,);
};
private auto glbfn_glVertexArrayBindingDivisor_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glVertexArrayBindingDivisor = cast(glbfn_glVertexArrayBindingDivisor)glbindGetProcAddress(`glVertexArrayBindingDivisor`);
  if (glVertexArrayBindingDivisor is null) assert(0, `OpenGL function 'glVertexArrayBindingDivisor' not found!`);
  glVertexArrayBindingDivisor(a0,a1,a2,);
}
__gshared glbfn_glGetVertexArrayiv glGetVertexArrayiv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexArrayiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexArrayiv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexArrayiv = cast(glbfn_glGetVertexArrayiv)glbindGetProcAddress(`glGetVertexArrayiv`);
  if (glGetVertexArrayiv is null) assert(0, `OpenGL function 'glGetVertexArrayiv' not found!`);
  glGetVertexArrayiv(a0,a1,a2,);
}
__gshared glbfn_glGetVertexArrayIndexediv glGetVertexArrayIndexediv = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetVertexArrayIndexediv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetVertexArrayIndexediv_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetVertexArrayIndexediv = cast(glbfn_glGetVertexArrayIndexediv)glbindGetProcAddress(`glGetVertexArrayIndexediv`);
  if (glGetVertexArrayIndexediv is null) assert(0, `OpenGL function 'glGetVertexArrayIndexediv' not found!`);
  glGetVertexArrayIndexediv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetVertexArrayIndexed64iv glGetVertexArrayIndexed64iv = function void (uint a0, uint a1, uint a2, long* a3) nothrow @nogc {
  glbfn_glGetVertexArrayIndexed64iv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetVertexArrayIndexed64iv_loader (uint a0, uint a1, uint a2, long* a3) nothrow @nogc {
  glGetVertexArrayIndexed64iv = cast(glbfn_glGetVertexArrayIndexed64iv)glbindGetProcAddress(`glGetVertexArrayIndexed64iv`);
  if (glGetVertexArrayIndexed64iv is null) assert(0, `OpenGL function 'glGetVertexArrayIndexed64iv' not found!`);
  glGetVertexArrayIndexed64iv(a0,a1,a2,a3,);
}
__gshared glbfn_glCreateSamplers glCreateSamplers = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateSamplers_loader(a0,a1,);
};
private auto glbfn_glCreateSamplers_loader (int a0, uint* a1) nothrow @nogc {
  glCreateSamplers = cast(glbfn_glCreateSamplers)glbindGetProcAddress(`glCreateSamplers`);
  if (glCreateSamplers is null) assert(0, `OpenGL function 'glCreateSamplers' not found!`);
  glCreateSamplers(a0,a1,);
}
__gshared glbfn_glCreateProgramPipelines glCreateProgramPipelines = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateProgramPipelines_loader(a0,a1,);
};
private auto glbfn_glCreateProgramPipelines_loader (int a0, uint* a1) nothrow @nogc {
  glCreateProgramPipelines = cast(glbfn_glCreateProgramPipelines)glbindGetProcAddress(`glCreateProgramPipelines`);
  if (glCreateProgramPipelines is null) assert(0, `OpenGL function 'glCreateProgramPipelines' not found!`);
  glCreateProgramPipelines(a0,a1,);
}
__gshared glbfn_glCreateQueries glCreateQueries = function void (uint a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glCreateQueries_loader(a0,a1,a2,);
};
private auto glbfn_glCreateQueries_loader (uint a0, int a1, uint* a2) nothrow @nogc {
  glCreateQueries = cast(glbfn_glCreateQueries)glbindGetProcAddress(`glCreateQueries`);
  if (glCreateQueries is null) assert(0, `OpenGL function 'glCreateQueries' not found!`);
  glCreateQueries(a0,a1,a2,);
}
__gshared glbfn_glGetQueryBufferObjecti64v glGetQueryBufferObjecti64v = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glGetQueryBufferObjecti64v_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetQueryBufferObjecti64v_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glGetQueryBufferObjecti64v = cast(glbfn_glGetQueryBufferObjecti64v)glbindGetProcAddress(`glGetQueryBufferObjecti64v`);
  if (glGetQueryBufferObjecti64v is null) assert(0, `OpenGL function 'glGetQueryBufferObjecti64v' not found!`);
  glGetQueryBufferObjecti64v(a0,a1,a2,a3,);
}
__gshared glbfn_glGetQueryBufferObjectiv glGetQueryBufferObjectiv = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glGetQueryBufferObjectiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetQueryBufferObjectiv_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glGetQueryBufferObjectiv = cast(glbfn_glGetQueryBufferObjectiv)glbindGetProcAddress(`glGetQueryBufferObjectiv`);
  if (glGetQueryBufferObjectiv is null) assert(0, `OpenGL function 'glGetQueryBufferObjectiv' not found!`);
  glGetQueryBufferObjectiv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetQueryBufferObjectui64v glGetQueryBufferObjectui64v = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glGetQueryBufferObjectui64v_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetQueryBufferObjectui64v_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glGetQueryBufferObjectui64v = cast(glbfn_glGetQueryBufferObjectui64v)glbindGetProcAddress(`glGetQueryBufferObjectui64v`);
  if (glGetQueryBufferObjectui64v is null) assert(0, `OpenGL function 'glGetQueryBufferObjectui64v' not found!`);
  glGetQueryBufferObjectui64v(a0,a1,a2,a3,);
}
__gshared glbfn_glGetQueryBufferObjectuiv glGetQueryBufferObjectuiv = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glGetQueryBufferObjectuiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetQueryBufferObjectuiv_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glGetQueryBufferObjectuiv = cast(glbfn_glGetQueryBufferObjectuiv)glbindGetProcAddress(`glGetQueryBufferObjectuiv`);
  if (glGetQueryBufferObjectuiv is null) assert(0, `OpenGL function 'glGetQueryBufferObjectuiv' not found!`);
  glGetQueryBufferObjectuiv(a0,a1,a2,a3,);
}
}
__gshared glbfn_glMemoryBarrierByRegion glMemoryBarrierByRegion = function void (uint a0) nothrow @nogc {
  glbfn_glMemoryBarrierByRegion_loader(a0,);
};
private auto glbfn_glMemoryBarrierByRegion_loader (uint a0) nothrow @nogc {
  glMemoryBarrierByRegion = cast(glbfn_glMemoryBarrierByRegion)glbindGetProcAddress(`glMemoryBarrierByRegion`);
  if (glMemoryBarrierByRegion is null) assert(0, `OpenGL function 'glMemoryBarrierByRegion' not found!`);
  glMemoryBarrierByRegion(a0,);
}
__gshared glbfn_glGetTextureSubImage glGetTextureSubImage = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, int a10, void* a11) nothrow @nogc {
  glbfn_glGetTextureSubImage_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glGetTextureSubImage_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, int a10, void* a11) nothrow @nogc {
  glGetTextureSubImage = cast(glbfn_glGetTextureSubImage)glbindGetProcAddress(`glGetTextureSubImage`);
  if (glGetTextureSubImage is null) assert(0, `OpenGL function 'glGetTextureSubImage' not found!`);
  glGetTextureSubImage(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glGetCompressedTextureSubImage glGetCompressedTextureSubImage = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void* a9) nothrow @nogc {
  glbfn_glGetCompressedTextureSubImage_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glGetCompressedTextureSubImage_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void* a9) nothrow @nogc {
  glGetCompressedTextureSubImage = cast(glbfn_glGetCompressedTextureSubImage)glbindGetProcAddress(`glGetCompressedTextureSubImage`);
  if (glGetCompressedTextureSubImage is null) assert(0, `OpenGL function 'glGetCompressedTextureSubImage' not found!`);
  glGetCompressedTextureSubImage(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glGetGraphicsResetStatus glGetGraphicsResetStatus = function uint () nothrow @nogc {
  return glbfn_glGetGraphicsResetStatus_loader();
};
private auto glbfn_glGetGraphicsResetStatus_loader () nothrow @nogc {
  glGetGraphicsResetStatus = cast(glbfn_glGetGraphicsResetStatus)glbindGetProcAddress(`glGetGraphicsResetStatus`);
  if (glGetGraphicsResetStatus is null) assert(0, `OpenGL function 'glGetGraphicsResetStatus' not found!`);
  return glGetGraphicsResetStatus();
}
__gshared glbfn_glGetnCompressedTexImage glGetnCompressedTexImage = function void (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetnCompressedTexImage_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnCompressedTexImage_loader (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glGetnCompressedTexImage = cast(glbfn_glGetnCompressedTexImage)glbindGetProcAddress(`glGetnCompressedTexImage`);
  if (glGetnCompressedTexImage is null) assert(0, `OpenGL function 'glGetnCompressedTexImage' not found!`);
  glGetnCompressedTexImage(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnTexImage glGetnTexImage = function void (uint a0, int a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glbfn_glGetnTexImage_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetnTexImage_loader (uint a0, int a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glGetnTexImage = cast(glbfn_glGetnTexImage)glbindGetProcAddress(`glGetnTexImage`);
  if (glGetnTexImage is null) assert(0, `OpenGL function 'glGetnTexImage' not found!`);
  glGetnTexImage(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetnUniformdv glGetnUniformdv = function void (uint a0, int a1, int a2, double* a3) nothrow @nogc {
  glbfn_glGetnUniformdv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformdv_loader (uint a0, int a1, int a2, double* a3) nothrow @nogc {
  glGetnUniformdv = cast(glbfn_glGetnUniformdv)glbindGetProcAddress(`glGetnUniformdv`);
  if (glGetnUniformdv is null) assert(0, `OpenGL function 'glGetnUniformdv' not found!`);
  glGetnUniformdv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformfv glGetnUniformfv = function void (uint a0, int a1, int a2, float* a3) nothrow @nogc {
  glbfn_glGetnUniformfv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformfv_loader (uint a0, int a1, int a2, float* a3) nothrow @nogc {
  glGetnUniformfv = cast(glbfn_glGetnUniformfv)glbindGetProcAddress(`glGetnUniformfv`);
  if (glGetnUniformfv is null) assert(0, `OpenGL function 'glGetnUniformfv' not found!`);
  glGetnUniformfv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformiv glGetnUniformiv = function void (uint a0, int a1, int a2, int* a3) nothrow @nogc {
  glbfn_glGetnUniformiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformiv_loader (uint a0, int a1, int a2, int* a3) nothrow @nogc {
  glGetnUniformiv = cast(glbfn_glGetnUniformiv)glbindGetProcAddress(`glGetnUniformiv`);
  if (glGetnUniformiv is null) assert(0, `OpenGL function 'glGetnUniformiv' not found!`);
  glGetnUniformiv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformuiv glGetnUniformuiv = function void (uint a0, int a1, int a2, uint* a3) nothrow @nogc {
  glbfn_glGetnUniformuiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformuiv_loader (uint a0, int a1, int a2, uint* a3) nothrow @nogc {
  glGetnUniformuiv = cast(glbfn_glGetnUniformuiv)glbindGetProcAddress(`glGetnUniformuiv`);
  if (glGetnUniformuiv is null) assert(0, `OpenGL function 'glGetnUniformuiv' not found!`);
  glGetnUniformuiv(a0,a1,a2,a3,);
}
__gshared glbfn_glReadnPixels glReadnPixels = function void (int a0, int a1, int a2, int a3, uint a4, uint a5, int a6, void* a7) nothrow @nogc {
  glbfn_glReadnPixels_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glReadnPixels_loader (int a0, int a1, int a2, int a3, uint a4, uint a5, int a6, void* a7) nothrow @nogc {
  glReadnPixels = cast(glbfn_glReadnPixels)glbindGetProcAddress(`glReadnPixels`);
  if (glReadnPixels is null) assert(0, `OpenGL function 'glReadnPixels' not found!`);
  glReadnPixels(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetnMapdv glGetnMapdv = function void (uint a0, uint a1, int a2, double* a3) nothrow @nogc {
  glbfn_glGetnMapdv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnMapdv_loader (uint a0, uint a1, int a2, double* a3) nothrow @nogc {
  glGetnMapdv = cast(glbfn_glGetnMapdv)glbindGetProcAddress(`glGetnMapdv`);
  if (glGetnMapdv is null) assert(0, `OpenGL function 'glGetnMapdv' not found!`);
  glGetnMapdv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnMapfv glGetnMapfv = function void (uint a0, uint a1, int a2, float* a3) nothrow @nogc {
  glbfn_glGetnMapfv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnMapfv_loader (uint a0, uint a1, int a2, float* a3) nothrow @nogc {
  glGetnMapfv = cast(glbfn_glGetnMapfv)glbindGetProcAddress(`glGetnMapfv`);
  if (glGetnMapfv is null) assert(0, `OpenGL function 'glGetnMapfv' not found!`);
  glGetnMapfv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnMapiv glGetnMapiv = function void (uint a0, uint a1, int a2, int* a3) nothrow @nogc {
  glbfn_glGetnMapiv_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnMapiv_loader (uint a0, uint a1, int a2, int* a3) nothrow @nogc {
  glGetnMapiv = cast(glbfn_glGetnMapiv)glbindGetProcAddress(`glGetnMapiv`);
  if (glGetnMapiv is null) assert(0, `OpenGL function 'glGetnMapiv' not found!`);
  glGetnMapiv(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnPixelMapfv glGetnPixelMapfv = function void (uint a0, int a1, float* a2) nothrow @nogc {
  glbfn_glGetnPixelMapfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetnPixelMapfv_loader (uint a0, int a1, float* a2) nothrow @nogc {
  glGetnPixelMapfv = cast(glbfn_glGetnPixelMapfv)glbindGetProcAddress(`glGetnPixelMapfv`);
  if (glGetnPixelMapfv is null) assert(0, `OpenGL function 'glGetnPixelMapfv' not found!`);
  glGetnPixelMapfv(a0,a1,a2,);
}
__gshared glbfn_glGetnPixelMapuiv glGetnPixelMapuiv = function void (uint a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glGetnPixelMapuiv_loader(a0,a1,a2,);
};
private auto glbfn_glGetnPixelMapuiv_loader (uint a0, int a1, uint* a2) nothrow @nogc {
  glGetnPixelMapuiv = cast(glbfn_glGetnPixelMapuiv)glbindGetProcAddress(`glGetnPixelMapuiv`);
  if (glGetnPixelMapuiv is null) assert(0, `OpenGL function 'glGetnPixelMapuiv' not found!`);
  glGetnPixelMapuiv(a0,a1,a2,);
}
__gshared glbfn_glGetnPixelMapusv glGetnPixelMapusv = function void (uint a0, int a1, ushort* a2) nothrow @nogc {
  glbfn_glGetnPixelMapusv_loader(a0,a1,a2,);
};
private auto glbfn_glGetnPixelMapusv_loader (uint a0, int a1, ushort* a2) nothrow @nogc {
  glGetnPixelMapusv = cast(glbfn_glGetnPixelMapusv)glbindGetProcAddress(`glGetnPixelMapusv`);
  if (glGetnPixelMapusv is null) assert(0, `OpenGL function 'glGetnPixelMapusv' not found!`);
  glGetnPixelMapusv(a0,a1,a2,);
}
__gshared glbfn_glGetnPolygonStipple glGetnPolygonStipple = function void (int a0, ubyte* a1) nothrow @nogc {
  glbfn_glGetnPolygonStipple_loader(a0,a1,);
};
private auto glbfn_glGetnPolygonStipple_loader (int a0, ubyte* a1) nothrow @nogc {
  glGetnPolygonStipple = cast(glbfn_glGetnPolygonStipple)glbindGetProcAddress(`glGetnPolygonStipple`);
  if (glGetnPolygonStipple is null) assert(0, `OpenGL function 'glGetnPolygonStipple' not found!`);
  glGetnPolygonStipple(a0,a1,);
}
__gshared glbfn_glGetnColorTable glGetnColorTable = function void (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glbfn_glGetnColorTable_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetnColorTable_loader (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glGetnColorTable = cast(glbfn_glGetnColorTable)glbindGetProcAddress(`glGetnColorTable`);
  if (glGetnColorTable is null) assert(0, `OpenGL function 'glGetnColorTable' not found!`);
  glGetnColorTable(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetnConvolutionFilter glGetnConvolutionFilter = function void (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glbfn_glGetnConvolutionFilter_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetnConvolutionFilter_loader (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glGetnConvolutionFilter = cast(glbfn_glGetnConvolutionFilter)glbindGetProcAddress(`glGetnConvolutionFilter`);
  if (glGetnConvolutionFilter is null) assert(0, `OpenGL function 'glGetnConvolutionFilter' not found!`);
  glGetnConvolutionFilter(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetnSeparableFilter glGetnSeparableFilter = function void (uint a0, uint a1, uint a2, int a3, void* a4, int a5, void* a6, void* a7) nothrow @nogc {
  glbfn_glGetnSeparableFilter_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glGetnSeparableFilter_loader (uint a0, uint a1, uint a2, int a3, void* a4, int a5, void* a6, void* a7) nothrow @nogc {
  glGetnSeparableFilter = cast(glbfn_glGetnSeparableFilter)glbindGetProcAddress(`glGetnSeparableFilter`);
  if (glGetnSeparableFilter is null) assert(0, `OpenGL function 'glGetnSeparableFilter' not found!`);
  glGetnSeparableFilter(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetnHistogram glGetnHistogram = function void (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glbfn_glGetnHistogram_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetnHistogram_loader (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glGetnHistogram = cast(glbfn_glGetnHistogram)glbindGetProcAddress(`glGetnHistogram`);
  if (glGetnHistogram is null) assert(0, `OpenGL function 'glGetnHistogram' not found!`);
  glGetnHistogram(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetnMinmax glGetnMinmax = function void (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glbfn_glGetnMinmax_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetnMinmax_loader (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glGetnMinmax = cast(glbfn_glGetnMinmax)glbindGetProcAddress(`glGetnMinmax`);
  if (glGetnMinmax is null) assert(0, `OpenGL function 'glGetnMinmax' not found!`);
  glGetnMinmax(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTextureBarrier glTextureBarrier = function void () nothrow @nogc {
  glbfn_glTextureBarrier_loader();
};
private auto glbfn_glTextureBarrier_loader () nothrow @nogc {
  glTextureBarrier = cast(glbfn_glTextureBarrier)glbindGetProcAddress(`glTextureBarrier`);
  if (glTextureBarrier is null) assert(0, `OpenGL function 'glTextureBarrier' not found!`);
  glTextureBarrier();
}
static if (size_t.sizeof == 4) {
__gshared glbfn_glTbufferMask3DFX glTbufferMask3DFX = function void (uint a0) nothrow @nogc {
  glbfn_glTbufferMask3DFX_loader(a0,);
};
private auto glbfn_glTbufferMask3DFX_loader (uint a0) nothrow @nogc {
  glTbufferMask3DFX = cast(glbfn_glTbufferMask3DFX)glbindGetProcAddress(`glTbufferMask3DFX`);
  if (glTbufferMask3DFX is null) assert(0, `OpenGL function 'glTbufferMask3DFX' not found!`);
  glTbufferMask3DFX(a0,);
}
__gshared glbfn_glDebugMessageEnableAMD glDebugMessageEnableAMD = function void (uint a0, uint a1, int a2, const(uint)* a3, ubyte a4) nothrow @nogc {
  glbfn_glDebugMessageEnableAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDebugMessageEnableAMD_loader (uint a0, uint a1, int a2, const(uint)* a3, ubyte a4) nothrow @nogc {
  glDebugMessageEnableAMD = cast(glbfn_glDebugMessageEnableAMD)glbindGetProcAddress(`glDebugMessageEnableAMD`);
  if (glDebugMessageEnableAMD is null) assert(0, `OpenGL function 'glDebugMessageEnableAMD' not found!`);
  glDebugMessageEnableAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDebugMessageInsertAMD glDebugMessageInsertAMD = function void (uint a0, uint a1, uint a2, int a3, const(char)* a4) nothrow @nogc {
  glbfn_glDebugMessageInsertAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDebugMessageInsertAMD_loader (uint a0, uint a1, uint a2, int a3, const(char)* a4) nothrow @nogc {
  glDebugMessageInsertAMD = cast(glbfn_glDebugMessageInsertAMD)glbindGetProcAddress(`glDebugMessageInsertAMD`);
  if (glDebugMessageInsertAMD is null) assert(0, `OpenGL function 'glDebugMessageInsertAMD' not found!`);
  glDebugMessageInsertAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetDebugMessageLogAMD glGetDebugMessageLogAMD = function uint (uint a0, int a1, uint* a2, uint* a3, uint* a4, int* a5, char* a6) nothrow @nogc {
  return glbfn_glGetDebugMessageLogAMD_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetDebugMessageLogAMD_loader (uint a0, int a1, uint* a2, uint* a3, uint* a4, int* a5, char* a6) nothrow @nogc {
  glGetDebugMessageLogAMD = cast(glbfn_glGetDebugMessageLogAMD)glbindGetProcAddress(`glGetDebugMessageLogAMD`);
  if (glGetDebugMessageLogAMD is null) assert(0, `OpenGL function 'glGetDebugMessageLogAMD' not found!`);
  return glGetDebugMessageLogAMD(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glBlendFuncIndexedAMD glBlendFuncIndexedAMD = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBlendFuncIndexedAMD_loader(a0,a1,a2,);
};
private auto glbfn_glBlendFuncIndexedAMD_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBlendFuncIndexedAMD = cast(glbfn_glBlendFuncIndexedAMD)glbindGetProcAddress(`glBlendFuncIndexedAMD`);
  if (glBlendFuncIndexedAMD is null) assert(0, `OpenGL function 'glBlendFuncIndexedAMD' not found!`);
  glBlendFuncIndexedAMD(a0,a1,a2,);
}
__gshared glbfn_glBlendFuncSeparateIndexedAMD glBlendFuncSeparateIndexedAMD = function void (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glBlendFuncSeparateIndexedAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glBlendFuncSeparateIndexedAMD_loader (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glBlendFuncSeparateIndexedAMD = cast(glbfn_glBlendFuncSeparateIndexedAMD)glbindGetProcAddress(`glBlendFuncSeparateIndexedAMD`);
  if (glBlendFuncSeparateIndexedAMD is null) assert(0, `OpenGL function 'glBlendFuncSeparateIndexedAMD' not found!`);
  glBlendFuncSeparateIndexedAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBlendEquationIndexedAMD glBlendEquationIndexedAMD = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBlendEquationIndexedAMD_loader(a0,a1,);
};
private auto glbfn_glBlendEquationIndexedAMD_loader (uint a0, uint a1) nothrow @nogc {
  glBlendEquationIndexedAMD = cast(glbfn_glBlendEquationIndexedAMD)glbindGetProcAddress(`glBlendEquationIndexedAMD`);
  if (glBlendEquationIndexedAMD is null) assert(0, `OpenGL function 'glBlendEquationIndexedAMD' not found!`);
  glBlendEquationIndexedAMD(a0,a1,);
}
__gshared glbfn_glBlendEquationSeparateIndexedAMD glBlendEquationSeparateIndexedAMD = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBlendEquationSeparateIndexedAMD_loader(a0,a1,a2,);
};
private auto glbfn_glBlendEquationSeparateIndexedAMD_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBlendEquationSeparateIndexedAMD = cast(glbfn_glBlendEquationSeparateIndexedAMD)glbindGetProcAddress(`glBlendEquationSeparateIndexedAMD`);
  if (glBlendEquationSeparateIndexedAMD is null) assert(0, `OpenGL function 'glBlendEquationSeparateIndexedAMD' not found!`);
  glBlendEquationSeparateIndexedAMD(a0,a1,a2,);
}
__gshared glbfn_glUniform1i64NV glUniform1i64NV = function void (int a0, long a1) nothrow @nogc {
  glbfn_glUniform1i64NV_loader(a0,a1,);
};
private auto glbfn_glUniform1i64NV_loader (int a0, long a1) nothrow @nogc {
  glUniform1i64NV = cast(glbfn_glUniform1i64NV)glbindGetProcAddress(`glUniform1i64NV`);
  if (glUniform1i64NV is null) assert(0, `OpenGL function 'glUniform1i64NV' not found!`);
  glUniform1i64NV(a0,a1,);
}
__gshared glbfn_glUniform2i64NV glUniform2i64NV = function void (int a0, long a1, long a2) nothrow @nogc {
  glbfn_glUniform2i64NV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2i64NV_loader (int a0, long a1, long a2) nothrow @nogc {
  glUniform2i64NV = cast(glbfn_glUniform2i64NV)glbindGetProcAddress(`glUniform2i64NV`);
  if (glUniform2i64NV is null) assert(0, `OpenGL function 'glUniform2i64NV' not found!`);
  glUniform2i64NV(a0,a1,a2,);
}
__gshared glbfn_glUniform3i64NV glUniform3i64NV = function void (int a0, long a1, long a2, long a3) nothrow @nogc {
  glbfn_glUniform3i64NV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3i64NV_loader (int a0, long a1, long a2, long a3) nothrow @nogc {
  glUniform3i64NV = cast(glbfn_glUniform3i64NV)glbindGetProcAddress(`glUniform3i64NV`);
  if (glUniform3i64NV is null) assert(0, `OpenGL function 'glUniform3i64NV' not found!`);
  glUniform3i64NV(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4i64NV glUniform4i64NV = function void (int a0, long a1, long a2, long a3, long a4) nothrow @nogc {
  glbfn_glUniform4i64NV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4i64NV_loader (int a0, long a1, long a2, long a3, long a4) nothrow @nogc {
  glUniform4i64NV = cast(glbfn_glUniform4i64NV)glbindGetProcAddress(`glUniform4i64NV`);
  if (glUniform4i64NV is null) assert(0, `OpenGL function 'glUniform4i64NV' not found!`);
  glUniform4i64NV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1i64vNV glUniform1i64vNV = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform1i64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1i64vNV_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform1i64vNV = cast(glbfn_glUniform1i64vNV)glbindGetProcAddress(`glUniform1i64vNV`);
  if (glUniform1i64vNV is null) assert(0, `OpenGL function 'glUniform1i64vNV' not found!`);
  glUniform1i64vNV(a0,a1,a2,);
}
__gshared glbfn_glUniform2i64vNV glUniform2i64vNV = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform2i64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2i64vNV_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform2i64vNV = cast(glbfn_glUniform2i64vNV)glbindGetProcAddress(`glUniform2i64vNV`);
  if (glUniform2i64vNV is null) assert(0, `OpenGL function 'glUniform2i64vNV' not found!`);
  glUniform2i64vNV(a0,a1,a2,);
}
__gshared glbfn_glUniform3i64vNV glUniform3i64vNV = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform3i64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3i64vNV_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform3i64vNV = cast(glbfn_glUniform3i64vNV)glbindGetProcAddress(`glUniform3i64vNV`);
  if (glUniform3i64vNV is null) assert(0, `OpenGL function 'glUniform3i64vNV' not found!`);
  glUniform3i64vNV(a0,a1,a2,);
}
__gshared glbfn_glUniform4i64vNV glUniform4i64vNV = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform4i64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4i64vNV_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform4i64vNV = cast(glbfn_glUniform4i64vNV)glbindGetProcAddress(`glUniform4i64vNV`);
  if (glUniform4i64vNV is null) assert(0, `OpenGL function 'glUniform4i64vNV' not found!`);
  glUniform4i64vNV(a0,a1,a2,);
}
__gshared glbfn_glUniform1ui64NV glUniform1ui64NV = function void (int a0, ulong a1) nothrow @nogc {
  glbfn_glUniform1ui64NV_loader(a0,a1,);
};
private auto glbfn_glUniform1ui64NV_loader (int a0, ulong a1) nothrow @nogc {
  glUniform1ui64NV = cast(glbfn_glUniform1ui64NV)glbindGetProcAddress(`glUniform1ui64NV`);
  if (glUniform1ui64NV is null) assert(0, `OpenGL function 'glUniform1ui64NV' not found!`);
  glUniform1ui64NV(a0,a1,);
}
__gshared glbfn_glUniform2ui64NV glUniform2ui64NV = function void (int a0, ulong a1, ulong a2) nothrow @nogc {
  glbfn_glUniform2ui64NV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2ui64NV_loader (int a0, ulong a1, ulong a2) nothrow @nogc {
  glUniform2ui64NV = cast(glbfn_glUniform2ui64NV)glbindGetProcAddress(`glUniform2ui64NV`);
  if (glUniform2ui64NV is null) assert(0, `OpenGL function 'glUniform2ui64NV' not found!`);
  glUniform2ui64NV(a0,a1,a2,);
}
__gshared glbfn_glUniform3ui64NV glUniform3ui64NV = function void (int a0, ulong a1, ulong a2, ulong a3) nothrow @nogc {
  glbfn_glUniform3ui64NV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3ui64NV_loader (int a0, ulong a1, ulong a2, ulong a3) nothrow @nogc {
  glUniform3ui64NV = cast(glbfn_glUniform3ui64NV)glbindGetProcAddress(`glUniform3ui64NV`);
  if (glUniform3ui64NV is null) assert(0, `OpenGL function 'glUniform3ui64NV' not found!`);
  glUniform3ui64NV(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4ui64NV glUniform4ui64NV = function void (int a0, ulong a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glbfn_glUniform4ui64NV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4ui64NV_loader (int a0, ulong a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glUniform4ui64NV = cast(glbfn_glUniform4ui64NV)glbindGetProcAddress(`glUniform4ui64NV`);
  if (glUniform4ui64NV is null) assert(0, `OpenGL function 'glUniform4ui64NV' not found!`);
  glUniform4ui64NV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1ui64vNV glUniform1ui64vNV = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform1ui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1ui64vNV_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform1ui64vNV = cast(glbfn_glUniform1ui64vNV)glbindGetProcAddress(`glUniform1ui64vNV`);
  if (glUniform1ui64vNV is null) assert(0, `OpenGL function 'glUniform1ui64vNV' not found!`);
  glUniform1ui64vNV(a0,a1,a2,);
}
__gshared glbfn_glUniform2ui64vNV glUniform2ui64vNV = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform2ui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2ui64vNV_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform2ui64vNV = cast(glbfn_glUniform2ui64vNV)glbindGetProcAddress(`glUniform2ui64vNV`);
  if (glUniform2ui64vNV is null) assert(0, `OpenGL function 'glUniform2ui64vNV' not found!`);
  glUniform2ui64vNV(a0,a1,a2,);
}
__gshared glbfn_glUniform3ui64vNV glUniform3ui64vNV = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform3ui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3ui64vNV_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform3ui64vNV = cast(glbfn_glUniform3ui64vNV)glbindGetProcAddress(`glUniform3ui64vNV`);
  if (glUniform3ui64vNV is null) assert(0, `OpenGL function 'glUniform3ui64vNV' not found!`);
  glUniform3ui64vNV(a0,a1,a2,);
}
__gshared glbfn_glUniform4ui64vNV glUniform4ui64vNV = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform4ui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4ui64vNV_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform4ui64vNV = cast(glbfn_glUniform4ui64vNV)glbindGetProcAddress(`glUniform4ui64vNV`);
  if (glUniform4ui64vNV is null) assert(0, `OpenGL function 'glUniform4ui64vNV' not found!`);
  glUniform4ui64vNV(a0,a1,a2,);
}
__gshared glbfn_glGetUniformi64vNV glGetUniformi64vNV = function void (uint a0, int a1, long* a2) nothrow @nogc {
  glbfn_glGetUniformi64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformi64vNV_loader (uint a0, int a1, long* a2) nothrow @nogc {
  glGetUniformi64vNV = cast(glbfn_glGetUniformi64vNV)glbindGetProcAddress(`glGetUniformi64vNV`);
  if (glGetUniformi64vNV is null) assert(0, `OpenGL function 'glGetUniformi64vNV' not found!`);
  glGetUniformi64vNV(a0,a1,a2,);
}
__gshared glbfn_glGetUniformui64vNV glGetUniformui64vNV = function void (uint a0, int a1, ulong* a2) nothrow @nogc {
  glbfn_glGetUniformui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformui64vNV_loader (uint a0, int a1, ulong* a2) nothrow @nogc {
  glGetUniformui64vNV = cast(glbfn_glGetUniformui64vNV)glbindGetProcAddress(`glGetUniformui64vNV`);
  if (glGetUniformui64vNV is null) assert(0, `OpenGL function 'glGetUniformui64vNV' not found!`);
  glGetUniformui64vNV(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform1i64NV glProgramUniform1i64NV = function void (uint a0, int a1, long a2) nothrow @nogc {
  glbfn_glProgramUniform1i64NV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1i64NV_loader (uint a0, int a1, long a2) nothrow @nogc {
  glProgramUniform1i64NV = cast(glbfn_glProgramUniform1i64NV)glbindGetProcAddress(`glProgramUniform1i64NV`);
  if (glProgramUniform1i64NV is null) assert(0, `OpenGL function 'glProgramUniform1i64NV' not found!`);
  glProgramUniform1i64NV(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2i64NV glProgramUniform2i64NV = function void (uint a0, int a1, long a2, long a3) nothrow @nogc {
  glbfn_glProgramUniform2i64NV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2i64NV_loader (uint a0, int a1, long a2, long a3) nothrow @nogc {
  glProgramUniform2i64NV = cast(glbfn_glProgramUniform2i64NV)glbindGetProcAddress(`glProgramUniform2i64NV`);
  if (glProgramUniform2i64NV is null) assert(0, `OpenGL function 'glProgramUniform2i64NV' not found!`);
  glProgramUniform2i64NV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3i64NV glProgramUniform3i64NV = function void (uint a0, int a1, long a2, long a3, long a4) nothrow @nogc {
  glbfn_glProgramUniform3i64NV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3i64NV_loader (uint a0, int a1, long a2, long a3, long a4) nothrow @nogc {
  glProgramUniform3i64NV = cast(glbfn_glProgramUniform3i64NV)glbindGetProcAddress(`glProgramUniform3i64NV`);
  if (glProgramUniform3i64NV is null) assert(0, `OpenGL function 'glProgramUniform3i64NV' not found!`);
  glProgramUniform3i64NV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4i64NV glProgramUniform4i64NV = function void (uint a0, int a1, long a2, long a3, long a4, long a5) nothrow @nogc {
  glbfn_glProgramUniform4i64NV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4i64NV_loader (uint a0, int a1, long a2, long a3, long a4, long a5) nothrow @nogc {
  glProgramUniform4i64NV = cast(glbfn_glProgramUniform4i64NV)glbindGetProcAddress(`glProgramUniform4i64NV`);
  if (glProgramUniform4i64NV is null) assert(0, `OpenGL function 'glProgramUniform4i64NV' not found!`);
  glProgramUniform4i64NV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1i64vNV glProgramUniform1i64vNV = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform1i64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1i64vNV_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform1i64vNV = cast(glbfn_glProgramUniform1i64vNV)glbindGetProcAddress(`glProgramUniform1i64vNV`);
  if (glProgramUniform1i64vNV is null) assert(0, `OpenGL function 'glProgramUniform1i64vNV' not found!`);
  glProgramUniform1i64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2i64vNV glProgramUniform2i64vNV = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform2i64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2i64vNV_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform2i64vNV = cast(glbfn_glProgramUniform2i64vNV)glbindGetProcAddress(`glProgramUniform2i64vNV`);
  if (glProgramUniform2i64vNV is null) assert(0, `OpenGL function 'glProgramUniform2i64vNV' not found!`);
  glProgramUniform2i64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3i64vNV glProgramUniform3i64vNV = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform3i64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3i64vNV_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform3i64vNV = cast(glbfn_glProgramUniform3i64vNV)glbindGetProcAddress(`glProgramUniform3i64vNV`);
  if (glProgramUniform3i64vNV is null) assert(0, `OpenGL function 'glProgramUniform3i64vNV' not found!`);
  glProgramUniform3i64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4i64vNV glProgramUniform4i64vNV = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform4i64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4i64vNV_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform4i64vNV = cast(glbfn_glProgramUniform4i64vNV)glbindGetProcAddress(`glProgramUniform4i64vNV`);
  if (glProgramUniform4i64vNV is null) assert(0, `OpenGL function 'glProgramUniform4i64vNV' not found!`);
  glProgramUniform4i64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1ui64NV glProgramUniform1ui64NV = function void (uint a0, int a1, ulong a2) nothrow @nogc {
  glbfn_glProgramUniform1ui64NV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1ui64NV_loader (uint a0, int a1, ulong a2) nothrow @nogc {
  glProgramUniform1ui64NV = cast(glbfn_glProgramUniform1ui64NV)glbindGetProcAddress(`glProgramUniform1ui64NV`);
  if (glProgramUniform1ui64NV is null) assert(0, `OpenGL function 'glProgramUniform1ui64NV' not found!`);
  glProgramUniform1ui64NV(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2ui64NV glProgramUniform2ui64NV = function void (uint a0, int a1, ulong a2, ulong a3) nothrow @nogc {
  glbfn_glProgramUniform2ui64NV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2ui64NV_loader (uint a0, int a1, ulong a2, ulong a3) nothrow @nogc {
  glProgramUniform2ui64NV = cast(glbfn_glProgramUniform2ui64NV)glbindGetProcAddress(`glProgramUniform2ui64NV`);
  if (glProgramUniform2ui64NV is null) assert(0, `OpenGL function 'glProgramUniform2ui64NV' not found!`);
  glProgramUniform2ui64NV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3ui64NV glProgramUniform3ui64NV = function void (uint a0, int a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glbfn_glProgramUniform3ui64NV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3ui64NV_loader (uint a0, int a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glProgramUniform3ui64NV = cast(glbfn_glProgramUniform3ui64NV)glbindGetProcAddress(`glProgramUniform3ui64NV`);
  if (glProgramUniform3ui64NV is null) assert(0, `OpenGL function 'glProgramUniform3ui64NV' not found!`);
  glProgramUniform3ui64NV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4ui64NV glProgramUniform4ui64NV = function void (uint a0, int a1, ulong a2, ulong a3, ulong a4, ulong a5) nothrow @nogc {
  glbfn_glProgramUniform4ui64NV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4ui64NV_loader (uint a0, int a1, ulong a2, ulong a3, ulong a4, ulong a5) nothrow @nogc {
  glProgramUniform4ui64NV = cast(glbfn_glProgramUniform4ui64NV)glbindGetProcAddress(`glProgramUniform4ui64NV`);
  if (glProgramUniform4ui64NV is null) assert(0, `OpenGL function 'glProgramUniform4ui64NV' not found!`);
  glProgramUniform4ui64NV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1ui64vNV glProgramUniform1ui64vNV = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform1ui64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1ui64vNV_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform1ui64vNV = cast(glbfn_glProgramUniform1ui64vNV)glbindGetProcAddress(`glProgramUniform1ui64vNV`);
  if (glProgramUniform1ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform1ui64vNV' not found!`);
  glProgramUniform1ui64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2ui64vNV glProgramUniform2ui64vNV = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform2ui64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2ui64vNV_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform2ui64vNV = cast(glbfn_glProgramUniform2ui64vNV)glbindGetProcAddress(`glProgramUniform2ui64vNV`);
  if (glProgramUniform2ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform2ui64vNV' not found!`);
  glProgramUniform2ui64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3ui64vNV glProgramUniform3ui64vNV = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform3ui64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3ui64vNV_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform3ui64vNV = cast(glbfn_glProgramUniform3ui64vNV)glbindGetProcAddress(`glProgramUniform3ui64vNV`);
  if (glProgramUniform3ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform3ui64vNV' not found!`);
  glProgramUniform3ui64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4ui64vNV glProgramUniform4ui64vNV = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform4ui64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4ui64vNV_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform4ui64vNV = cast(glbfn_glProgramUniform4ui64vNV)glbindGetProcAddress(`glProgramUniform4ui64vNV`);
  if (glProgramUniform4ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform4ui64vNV' not found!`);
  glProgramUniform4ui64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribParameteriAMD glVertexAttribParameteriAMD = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glVertexAttribParameteriAMD_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribParameteriAMD_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glVertexAttribParameteriAMD = cast(glbfn_glVertexAttribParameteriAMD)glbindGetProcAddress(`glVertexAttribParameteriAMD`);
  if (glVertexAttribParameteriAMD is null) assert(0, `OpenGL function 'glVertexAttribParameteriAMD' not found!`);
  glVertexAttribParameteriAMD(a0,a1,a2,);
}
__gshared glbfn_glMultiDrawArraysIndirectAMD glMultiDrawArraysIndirectAMD = function void (uint a0, const(void)* a1, int a2, int a3) nothrow @nogc {
  glbfn_glMultiDrawArraysIndirectAMD_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiDrawArraysIndirectAMD_loader (uint a0, const(void)* a1, int a2, int a3) nothrow @nogc {
  glMultiDrawArraysIndirectAMD = cast(glbfn_glMultiDrawArraysIndirectAMD)glbindGetProcAddress(`glMultiDrawArraysIndirectAMD`);
  if (glMultiDrawArraysIndirectAMD is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectAMD' not found!`);
  glMultiDrawArraysIndirectAMD(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiDrawElementsIndirectAMD glMultiDrawElementsIndirectAMD = function void (uint a0, uint a1, const(void)* a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiDrawElementsIndirectAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiDrawElementsIndirectAMD_loader (uint a0, uint a1, const(void)* a2, int a3, int a4) nothrow @nogc {
  glMultiDrawElementsIndirectAMD = cast(glbfn_glMultiDrawElementsIndirectAMD)glbindGetProcAddress(`glMultiDrawElementsIndirectAMD`);
  if (glMultiDrawElementsIndirectAMD is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectAMD' not found!`);
  glMultiDrawElementsIndirectAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGenNamesAMD glGenNamesAMD = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGenNamesAMD_loader(a0,a1,a2,);
};
private auto glbfn_glGenNamesAMD_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGenNamesAMD = cast(glbfn_glGenNamesAMD)glbindGetProcAddress(`glGenNamesAMD`);
  if (glGenNamesAMD is null) assert(0, `OpenGL function 'glGenNamesAMD' not found!`);
  glGenNamesAMD(a0,a1,a2,);
}
__gshared glbfn_glDeleteNamesAMD glDeleteNamesAMD = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glDeleteNamesAMD_loader(a0,a1,a2,);
};
private auto glbfn_glDeleteNamesAMD_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glDeleteNamesAMD = cast(glbfn_glDeleteNamesAMD)glbindGetProcAddress(`glDeleteNamesAMD`);
  if (glDeleteNamesAMD is null) assert(0, `OpenGL function 'glDeleteNamesAMD' not found!`);
  glDeleteNamesAMD(a0,a1,a2,);
}
__gshared glbfn_glIsNameAMD glIsNameAMD = function ubyte (uint a0, uint a1) nothrow @nogc {
  return glbfn_glIsNameAMD_loader(a0,a1,);
};
private auto glbfn_glIsNameAMD_loader (uint a0, uint a1) nothrow @nogc {
  glIsNameAMD = cast(glbfn_glIsNameAMD)glbindGetProcAddress(`glIsNameAMD`);
  if (glIsNameAMD is null) assert(0, `OpenGL function 'glIsNameAMD' not found!`);
  return glIsNameAMD(a0,a1,);
}
__gshared glbfn_glQueryObjectParameteruiAMD glQueryObjectParameteruiAMD = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glQueryObjectParameteruiAMD_loader(a0,a1,a2,a3,);
};
private auto glbfn_glQueryObjectParameteruiAMD_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glQueryObjectParameteruiAMD = cast(glbfn_glQueryObjectParameteruiAMD)glbindGetProcAddress(`glQueryObjectParameteruiAMD`);
  if (glQueryObjectParameteruiAMD is null) assert(0, `OpenGL function 'glQueryObjectParameteruiAMD' not found!`);
  glQueryObjectParameteruiAMD(a0,a1,a2,a3,);
}
__gshared glbfn_glGetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD = function void (int* a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glGetPerfMonitorGroupsAMD_loader(a0,a1,a2,);
};
private auto glbfn_glGetPerfMonitorGroupsAMD_loader (int* a0, int a1, uint* a2) nothrow @nogc {
  glGetPerfMonitorGroupsAMD = cast(glbfn_glGetPerfMonitorGroupsAMD)glbindGetProcAddress(`glGetPerfMonitorGroupsAMD`);
  if (glGetPerfMonitorGroupsAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupsAMD' not found!`);
  glGetPerfMonitorGroupsAMD(a0,a1,a2,);
}
__gshared glbfn_glGetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD = function void (uint a0, int* a1, int* a2, int a3, uint* a4) nothrow @nogc {
  glbfn_glGetPerfMonitorCountersAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetPerfMonitorCountersAMD_loader (uint a0, int* a1, int* a2, int a3, uint* a4) nothrow @nogc {
  glGetPerfMonitorCountersAMD = cast(glbfn_glGetPerfMonitorCountersAMD)glbindGetProcAddress(`glGetPerfMonitorCountersAMD`);
  if (glGetPerfMonitorCountersAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCountersAMD' not found!`);
  glGetPerfMonitorCountersAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD = function void (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetPerfMonitorGroupStringAMD_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetPerfMonitorGroupStringAMD_loader (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetPerfMonitorGroupStringAMD = cast(glbfn_glGetPerfMonitorGroupStringAMD)glbindGetProcAddress(`glGetPerfMonitorGroupStringAMD`);
  if (glGetPerfMonitorGroupStringAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupStringAMD' not found!`);
  glGetPerfMonitorGroupStringAMD(a0,a1,a2,a3,);
}
__gshared glbfn_glGetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD = function void (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glbfn_glGetPerfMonitorCounterStringAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetPerfMonitorCounterStringAMD_loader (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glGetPerfMonitorCounterStringAMD = cast(glbfn_glGetPerfMonitorCounterStringAMD)glbindGetProcAddress(`glGetPerfMonitorCounterStringAMD`);
  if (glGetPerfMonitorCounterStringAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterStringAMD' not found!`);
  glGetPerfMonitorCounterStringAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD = function void (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glbfn_glGetPerfMonitorCounterInfoAMD_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetPerfMonitorCounterInfoAMD_loader (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glGetPerfMonitorCounterInfoAMD = cast(glbfn_glGetPerfMonitorCounterInfoAMD)glbindGetProcAddress(`glGetPerfMonitorCounterInfoAMD`);
  if (glGetPerfMonitorCounterInfoAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterInfoAMD' not found!`);
  glGetPerfMonitorCounterInfoAMD(a0,a1,a2,a3,);
}
__gshared glbfn_glGenPerfMonitorsAMD glGenPerfMonitorsAMD = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenPerfMonitorsAMD_loader(a0,a1,);
};
private auto glbfn_glGenPerfMonitorsAMD_loader (int a0, uint* a1) nothrow @nogc {
  glGenPerfMonitorsAMD = cast(glbfn_glGenPerfMonitorsAMD)glbindGetProcAddress(`glGenPerfMonitorsAMD`);
  if (glGenPerfMonitorsAMD is null) assert(0, `OpenGL function 'glGenPerfMonitorsAMD' not found!`);
  glGenPerfMonitorsAMD(a0,a1,);
}
__gshared glbfn_glDeletePerfMonitorsAMD glDeletePerfMonitorsAMD = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glDeletePerfMonitorsAMD_loader(a0,a1,);
};
private auto glbfn_glDeletePerfMonitorsAMD_loader (int a0, uint* a1) nothrow @nogc {
  glDeletePerfMonitorsAMD = cast(glbfn_glDeletePerfMonitorsAMD)glbindGetProcAddress(`glDeletePerfMonitorsAMD`);
  if (glDeletePerfMonitorsAMD is null) assert(0, `OpenGL function 'glDeletePerfMonitorsAMD' not found!`);
  glDeletePerfMonitorsAMD(a0,a1,);
}
__gshared glbfn_glSelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD = function void (uint a0, ubyte a1, uint a2, int a3, uint* a4) nothrow @nogc {
  glbfn_glSelectPerfMonitorCountersAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glSelectPerfMonitorCountersAMD_loader (uint a0, ubyte a1, uint a2, int a3, uint* a4) nothrow @nogc {
  glSelectPerfMonitorCountersAMD = cast(glbfn_glSelectPerfMonitorCountersAMD)glbindGetProcAddress(`glSelectPerfMonitorCountersAMD`);
  if (glSelectPerfMonitorCountersAMD is null) assert(0, `OpenGL function 'glSelectPerfMonitorCountersAMD' not found!`);
  glSelectPerfMonitorCountersAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBeginPerfMonitorAMD glBeginPerfMonitorAMD = function void (uint a0) nothrow @nogc {
  glbfn_glBeginPerfMonitorAMD_loader(a0,);
};
private auto glbfn_glBeginPerfMonitorAMD_loader (uint a0) nothrow @nogc {
  glBeginPerfMonitorAMD = cast(glbfn_glBeginPerfMonitorAMD)glbindGetProcAddress(`glBeginPerfMonitorAMD`);
  if (glBeginPerfMonitorAMD is null) assert(0, `OpenGL function 'glBeginPerfMonitorAMD' not found!`);
  glBeginPerfMonitorAMD(a0,);
}
__gshared glbfn_glEndPerfMonitorAMD glEndPerfMonitorAMD = function void (uint a0) nothrow @nogc {
  glbfn_glEndPerfMonitorAMD_loader(a0,);
};
private auto glbfn_glEndPerfMonitorAMD_loader (uint a0) nothrow @nogc {
  glEndPerfMonitorAMD = cast(glbfn_glEndPerfMonitorAMD)glbindGetProcAddress(`glEndPerfMonitorAMD`);
  if (glEndPerfMonitorAMD is null) assert(0, `OpenGL function 'glEndPerfMonitorAMD' not found!`);
  glEndPerfMonitorAMD(a0,);
}
__gshared glbfn_glGetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD = function void (uint a0, uint a1, int a2, uint* a3, int* a4) nothrow @nogc {
  glbfn_glGetPerfMonitorCounterDataAMD_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetPerfMonitorCounterDataAMD_loader (uint a0, uint a1, int a2, uint* a3, int* a4) nothrow @nogc {
  glGetPerfMonitorCounterDataAMD = cast(glbfn_glGetPerfMonitorCounterDataAMD)glbindGetProcAddress(`glGetPerfMonitorCounterDataAMD`);
  if (glGetPerfMonitorCounterDataAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterDataAMD' not found!`);
  glGetPerfMonitorCounterDataAMD(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glSetMultisamplefvAMD glSetMultisamplefvAMD = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glSetMultisamplefvAMD_loader(a0,a1,a2,);
};
private auto glbfn_glSetMultisamplefvAMD_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glSetMultisamplefvAMD = cast(glbfn_glSetMultisamplefvAMD)glbindGetProcAddress(`glSetMultisamplefvAMD`);
  if (glSetMultisamplefvAMD is null) assert(0, `OpenGL function 'glSetMultisamplefvAMD' not found!`);
  glSetMultisamplefvAMD(a0,a1,a2,);
}
__gshared glbfn_glTexStorageSparseAMD glTexStorageSparseAMD = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6) nothrow @nogc {
  glbfn_glTexStorageSparseAMD_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTexStorageSparseAMD_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6) nothrow @nogc {
  glTexStorageSparseAMD = cast(glbfn_glTexStorageSparseAMD)glbindGetProcAddress(`glTexStorageSparseAMD`);
  if (glTexStorageSparseAMD is null) assert(0, `OpenGL function 'glTexStorageSparseAMD' not found!`);
  glTexStorageSparseAMD(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTextureStorageSparseAMD glTextureStorageSparseAMD = function void (uint a0, uint a1, uint a2, int a3, int a4, int a5, int a6, uint a7) nothrow @nogc {
  glbfn_glTextureStorageSparseAMD_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTextureStorageSparseAMD_loader (uint a0, uint a1, uint a2, int a3, int a4, int a5, int a6, uint a7) nothrow @nogc {
  glTextureStorageSparseAMD = cast(glbfn_glTextureStorageSparseAMD)glbindGetProcAddress(`glTextureStorageSparseAMD`);
  if (glTextureStorageSparseAMD is null) assert(0, `OpenGL function 'glTextureStorageSparseAMD' not found!`);
  glTextureStorageSparseAMD(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glStencilOpValueAMD glStencilOpValueAMD = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glStencilOpValueAMD_loader(a0,a1,);
};
private auto glbfn_glStencilOpValueAMD_loader (uint a0, uint a1) nothrow @nogc {
  glStencilOpValueAMD = cast(glbfn_glStencilOpValueAMD)glbindGetProcAddress(`glStencilOpValueAMD`);
  if (glStencilOpValueAMD is null) assert(0, `OpenGL function 'glStencilOpValueAMD' not found!`);
  glStencilOpValueAMD(a0,a1,);
}
__gshared glbfn_glTessellationFactorAMD glTessellationFactorAMD = function void (float a0) nothrow @nogc {
  glbfn_glTessellationFactorAMD_loader(a0,);
};
private auto glbfn_glTessellationFactorAMD_loader (float a0) nothrow @nogc {
  glTessellationFactorAMD = cast(glbfn_glTessellationFactorAMD)glbindGetProcAddress(`glTessellationFactorAMD`);
  if (glTessellationFactorAMD is null) assert(0, `OpenGL function 'glTessellationFactorAMD' not found!`);
  glTessellationFactorAMD(a0,);
}
__gshared glbfn_glTessellationModeAMD glTessellationModeAMD = function void (uint a0) nothrow @nogc {
  glbfn_glTessellationModeAMD_loader(a0,);
};
private auto glbfn_glTessellationModeAMD_loader (uint a0) nothrow @nogc {
  glTessellationModeAMD = cast(glbfn_glTessellationModeAMD)glbindGetProcAddress(`glTessellationModeAMD`);
  if (glTessellationModeAMD is null) assert(0, `OpenGL function 'glTessellationModeAMD' not found!`);
  glTessellationModeAMD(a0,);
}
__gshared glbfn_glElementPointerAPPLE glElementPointerAPPLE = function void (uint a0, const(void)* a1) nothrow @nogc {
  glbfn_glElementPointerAPPLE_loader(a0,a1,);
};
private auto glbfn_glElementPointerAPPLE_loader (uint a0, const(void)* a1) nothrow @nogc {
  glElementPointerAPPLE = cast(glbfn_glElementPointerAPPLE)glbindGetProcAddress(`glElementPointerAPPLE`);
  if (glElementPointerAPPLE is null) assert(0, `OpenGL function 'glElementPointerAPPLE' not found!`);
  glElementPointerAPPLE(a0,a1,);
}
__gshared glbfn_glDrawElementArrayAPPLE glDrawElementArrayAPPLE = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glDrawElementArrayAPPLE_loader(a0,a1,a2,);
};
private auto glbfn_glDrawElementArrayAPPLE_loader (uint a0, int a1, int a2) nothrow @nogc {
  glDrawElementArrayAPPLE = cast(glbfn_glDrawElementArrayAPPLE)glbindGetProcAddress(`glDrawElementArrayAPPLE`);
  if (glDrawElementArrayAPPLE is null) assert(0, `OpenGL function 'glDrawElementArrayAPPLE' not found!`);
  glDrawElementArrayAPPLE(a0,a1,a2,);
}
__gshared glbfn_glDrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glDrawRangeElementArrayAPPLE_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawRangeElementArrayAPPLE_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glDrawRangeElementArrayAPPLE = cast(glbfn_glDrawRangeElementArrayAPPLE)glbindGetProcAddress(`glDrawRangeElementArrayAPPLE`);
  if (glDrawRangeElementArrayAPPLE is null) assert(0, `OpenGL function 'glDrawRangeElementArrayAPPLE' not found!`);
  glDrawRangeElementArrayAPPLE(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE = function void (uint a0, const(int)* a1, const(int)* a2, int a3) nothrow @nogc {
  glbfn_glMultiDrawElementArrayAPPLE_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiDrawElementArrayAPPLE_loader (uint a0, const(int)* a1, const(int)* a2, int a3) nothrow @nogc {
  glMultiDrawElementArrayAPPLE = cast(glbfn_glMultiDrawElementArrayAPPLE)glbindGetProcAddress(`glMultiDrawElementArrayAPPLE`);
  if (glMultiDrawElementArrayAPPLE is null) assert(0, `OpenGL function 'glMultiDrawElementArrayAPPLE' not found!`);
  glMultiDrawElementArrayAPPLE(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE = function void (uint a0, uint a1, uint a2, const(int)* a3, const(int)* a4, int a5) nothrow @nogc {
  glbfn_glMultiDrawRangeElementArrayAPPLE_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMultiDrawRangeElementArrayAPPLE_loader (uint a0, uint a1, uint a2, const(int)* a3, const(int)* a4, int a5) nothrow @nogc {
  glMultiDrawRangeElementArrayAPPLE = cast(glbfn_glMultiDrawRangeElementArrayAPPLE)glbindGetProcAddress(`glMultiDrawRangeElementArrayAPPLE`);
  if (glMultiDrawRangeElementArrayAPPLE is null) assert(0, `OpenGL function 'glMultiDrawRangeElementArrayAPPLE' not found!`);
  glMultiDrawRangeElementArrayAPPLE(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGenFencesAPPLE glGenFencesAPPLE = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenFencesAPPLE_loader(a0,a1,);
};
private auto glbfn_glGenFencesAPPLE_loader (int a0, uint* a1) nothrow @nogc {
  glGenFencesAPPLE = cast(glbfn_glGenFencesAPPLE)glbindGetProcAddress(`glGenFencesAPPLE`);
  if (glGenFencesAPPLE is null) assert(0, `OpenGL function 'glGenFencesAPPLE' not found!`);
  glGenFencesAPPLE(a0,a1,);
}
__gshared glbfn_glDeleteFencesAPPLE glDeleteFencesAPPLE = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteFencesAPPLE_loader(a0,a1,);
};
private auto glbfn_glDeleteFencesAPPLE_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteFencesAPPLE = cast(glbfn_glDeleteFencesAPPLE)glbindGetProcAddress(`glDeleteFencesAPPLE`);
  if (glDeleteFencesAPPLE is null) assert(0, `OpenGL function 'glDeleteFencesAPPLE' not found!`);
  glDeleteFencesAPPLE(a0,a1,);
}
__gshared glbfn_glSetFenceAPPLE glSetFenceAPPLE = function void (uint a0) nothrow @nogc {
  glbfn_glSetFenceAPPLE_loader(a0,);
};
private auto glbfn_glSetFenceAPPLE_loader (uint a0) nothrow @nogc {
  glSetFenceAPPLE = cast(glbfn_glSetFenceAPPLE)glbindGetProcAddress(`glSetFenceAPPLE`);
  if (glSetFenceAPPLE is null) assert(0, `OpenGL function 'glSetFenceAPPLE' not found!`);
  glSetFenceAPPLE(a0,);
}
__gshared glbfn_glIsFenceAPPLE glIsFenceAPPLE = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsFenceAPPLE_loader(a0,);
};
private auto glbfn_glIsFenceAPPLE_loader (uint a0) nothrow @nogc {
  glIsFenceAPPLE = cast(glbfn_glIsFenceAPPLE)glbindGetProcAddress(`glIsFenceAPPLE`);
  if (glIsFenceAPPLE is null) assert(0, `OpenGL function 'glIsFenceAPPLE' not found!`);
  return glIsFenceAPPLE(a0,);
}
__gshared glbfn_glTestFenceAPPLE glTestFenceAPPLE = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glTestFenceAPPLE_loader(a0,);
};
private auto glbfn_glTestFenceAPPLE_loader (uint a0) nothrow @nogc {
  glTestFenceAPPLE = cast(glbfn_glTestFenceAPPLE)glbindGetProcAddress(`glTestFenceAPPLE`);
  if (glTestFenceAPPLE is null) assert(0, `OpenGL function 'glTestFenceAPPLE' not found!`);
  return glTestFenceAPPLE(a0,);
}
__gshared glbfn_glFinishFenceAPPLE glFinishFenceAPPLE = function void (uint a0) nothrow @nogc {
  glbfn_glFinishFenceAPPLE_loader(a0,);
};
private auto glbfn_glFinishFenceAPPLE_loader (uint a0) nothrow @nogc {
  glFinishFenceAPPLE = cast(glbfn_glFinishFenceAPPLE)glbindGetProcAddress(`glFinishFenceAPPLE`);
  if (glFinishFenceAPPLE is null) assert(0, `OpenGL function 'glFinishFenceAPPLE' not found!`);
  glFinishFenceAPPLE(a0,);
}
__gshared glbfn_glTestObjectAPPLE glTestObjectAPPLE = function ubyte (uint a0, uint a1) nothrow @nogc {
  return glbfn_glTestObjectAPPLE_loader(a0,a1,);
};
private auto glbfn_glTestObjectAPPLE_loader (uint a0, uint a1) nothrow @nogc {
  glTestObjectAPPLE = cast(glbfn_glTestObjectAPPLE)glbindGetProcAddress(`glTestObjectAPPLE`);
  if (glTestObjectAPPLE is null) assert(0, `OpenGL function 'glTestObjectAPPLE' not found!`);
  return glTestObjectAPPLE(a0,a1,);
}
__gshared glbfn_glFinishObjectAPPLE glFinishObjectAPPLE = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glFinishObjectAPPLE_loader(a0,a1,);
};
private auto glbfn_glFinishObjectAPPLE_loader (uint a0, int a1) nothrow @nogc {
  glFinishObjectAPPLE = cast(glbfn_glFinishObjectAPPLE)glbindGetProcAddress(`glFinishObjectAPPLE`);
  if (glFinishObjectAPPLE is null) assert(0, `OpenGL function 'glFinishObjectAPPLE' not found!`);
  glFinishObjectAPPLE(a0,a1,);
}
__gshared glbfn_glBufferParameteriAPPLE glBufferParameteriAPPLE = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glBufferParameteriAPPLE_loader(a0,a1,a2,);
};
private auto glbfn_glBufferParameteriAPPLE_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glBufferParameteriAPPLE = cast(glbfn_glBufferParameteriAPPLE)glbindGetProcAddress(`glBufferParameteriAPPLE`);
  if (glBufferParameteriAPPLE is null) assert(0, `OpenGL function 'glBufferParameteriAPPLE' not found!`);
  glBufferParameteriAPPLE(a0,a1,a2,);
}
__gshared glbfn_glFlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glFlushMappedBufferRangeAPPLE_loader(a0,a1,a2,);
};
private auto glbfn_glFlushMappedBufferRangeAPPLE_loader (uint a0, int a1, int a2) nothrow @nogc {
  glFlushMappedBufferRangeAPPLE = cast(glbfn_glFlushMappedBufferRangeAPPLE)glbindGetProcAddress(`glFlushMappedBufferRangeAPPLE`);
  if (glFlushMappedBufferRangeAPPLE is null) assert(0, `OpenGL function 'glFlushMappedBufferRangeAPPLE' not found!`);
  glFlushMappedBufferRangeAPPLE(a0,a1,a2,);
}
__gshared glbfn_glObjectPurgeableAPPLE glObjectPurgeableAPPLE = function uint (uint a0, uint a1, uint a2) nothrow @nogc {
  return glbfn_glObjectPurgeableAPPLE_loader(a0,a1,a2,);
};
private auto glbfn_glObjectPurgeableAPPLE_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glObjectPurgeableAPPLE = cast(glbfn_glObjectPurgeableAPPLE)glbindGetProcAddress(`glObjectPurgeableAPPLE`);
  if (glObjectPurgeableAPPLE is null) assert(0, `OpenGL function 'glObjectPurgeableAPPLE' not found!`);
  return glObjectPurgeableAPPLE(a0,a1,a2,);
}
__gshared glbfn_glObjectUnpurgeableAPPLE glObjectUnpurgeableAPPLE = function uint (uint a0, uint a1, uint a2) nothrow @nogc {
  return glbfn_glObjectUnpurgeableAPPLE_loader(a0,a1,a2,);
};
private auto glbfn_glObjectUnpurgeableAPPLE_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glObjectUnpurgeableAPPLE = cast(glbfn_glObjectUnpurgeableAPPLE)glbindGetProcAddress(`glObjectUnpurgeableAPPLE`);
  if (glObjectUnpurgeableAPPLE is null) assert(0, `OpenGL function 'glObjectUnpurgeableAPPLE' not found!`);
  return glObjectUnpurgeableAPPLE(a0,a1,a2,);
}
__gshared glbfn_glGetObjectParameterivAPPLE glGetObjectParameterivAPPLE = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetObjectParameterivAPPLE_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetObjectParameterivAPPLE_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetObjectParameterivAPPLE = cast(glbfn_glGetObjectParameterivAPPLE)glbindGetProcAddress(`glGetObjectParameterivAPPLE`);
  if (glGetObjectParameterivAPPLE is null) assert(0, `OpenGL function 'glGetObjectParameterivAPPLE' not found!`);
  glGetObjectParameterivAPPLE(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureRangeAPPLE glTextureRangeAPPLE = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glTextureRangeAPPLE_loader(a0,a1,a2,);
};
private auto glbfn_glTextureRangeAPPLE_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glTextureRangeAPPLE = cast(glbfn_glTextureRangeAPPLE)glbindGetProcAddress(`glTextureRangeAPPLE`);
  if (glTextureRangeAPPLE is null) assert(0, `OpenGL function 'glTextureRangeAPPLE' not found!`);
  glTextureRangeAPPLE(a0,a1,a2,);
}
__gshared glbfn_glGetTexParameterPointervAPPLE glGetTexParameterPointervAPPLE = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetTexParameterPointervAPPLE_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameterPointervAPPLE_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetTexParameterPointervAPPLE = cast(glbfn_glGetTexParameterPointervAPPLE)glbindGetProcAddress(`glGetTexParameterPointervAPPLE`);
  if (glGetTexParameterPointervAPPLE is null) assert(0, `OpenGL function 'glGetTexParameterPointervAPPLE' not found!`);
  glGetTexParameterPointervAPPLE(a0,a1,a2,);
}
__gshared glbfn_glBindVertexArrayAPPLE glBindVertexArrayAPPLE = function void (uint a0) nothrow @nogc {
  glbfn_glBindVertexArrayAPPLE_loader(a0,);
};
private auto glbfn_glBindVertexArrayAPPLE_loader (uint a0) nothrow @nogc {
  glBindVertexArrayAPPLE = cast(glbfn_glBindVertexArrayAPPLE)glbindGetProcAddress(`glBindVertexArrayAPPLE`);
  if (glBindVertexArrayAPPLE is null) assert(0, `OpenGL function 'glBindVertexArrayAPPLE' not found!`);
  glBindVertexArrayAPPLE(a0,);
}
__gshared glbfn_glDeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteVertexArraysAPPLE_loader(a0,a1,);
};
private auto glbfn_glDeleteVertexArraysAPPLE_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteVertexArraysAPPLE = cast(glbfn_glDeleteVertexArraysAPPLE)glbindGetProcAddress(`glDeleteVertexArraysAPPLE`);
  if (glDeleteVertexArraysAPPLE is null) assert(0, `OpenGL function 'glDeleteVertexArraysAPPLE' not found!`);
  glDeleteVertexArraysAPPLE(a0,a1,);
}
__gshared glbfn_glGenVertexArraysAPPLE glGenVertexArraysAPPLE = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenVertexArraysAPPLE_loader(a0,a1,);
};
private auto glbfn_glGenVertexArraysAPPLE_loader (int a0, uint* a1) nothrow @nogc {
  glGenVertexArraysAPPLE = cast(glbfn_glGenVertexArraysAPPLE)glbindGetProcAddress(`glGenVertexArraysAPPLE`);
  if (glGenVertexArraysAPPLE is null) assert(0, `OpenGL function 'glGenVertexArraysAPPLE' not found!`);
  glGenVertexArraysAPPLE(a0,a1,);
}
__gshared glbfn_glIsVertexArrayAPPLE glIsVertexArrayAPPLE = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsVertexArrayAPPLE_loader(a0,);
};
private auto glbfn_glIsVertexArrayAPPLE_loader (uint a0) nothrow @nogc {
  glIsVertexArrayAPPLE = cast(glbfn_glIsVertexArrayAPPLE)glbindGetProcAddress(`glIsVertexArrayAPPLE`);
  if (glIsVertexArrayAPPLE is null) assert(0, `OpenGL function 'glIsVertexArrayAPPLE' not found!`);
  return glIsVertexArrayAPPLE(a0,);
}
__gshared glbfn_glVertexArrayRangeAPPLE glVertexArrayRangeAPPLE = function void (int a0, void* a1) nothrow @nogc {
  glbfn_glVertexArrayRangeAPPLE_loader(a0,a1,);
};
private auto glbfn_glVertexArrayRangeAPPLE_loader (int a0, void* a1) nothrow @nogc {
  glVertexArrayRangeAPPLE = cast(glbfn_glVertexArrayRangeAPPLE)glbindGetProcAddress(`glVertexArrayRangeAPPLE`);
  if (glVertexArrayRangeAPPLE is null) assert(0, `OpenGL function 'glVertexArrayRangeAPPLE' not found!`);
  glVertexArrayRangeAPPLE(a0,a1,);
}
__gshared glbfn_glFlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE = function void (int a0, void* a1) nothrow @nogc {
  glbfn_glFlushVertexArrayRangeAPPLE_loader(a0,a1,);
};
private auto glbfn_glFlushVertexArrayRangeAPPLE_loader (int a0, void* a1) nothrow @nogc {
  glFlushVertexArrayRangeAPPLE = cast(glbfn_glFlushVertexArrayRangeAPPLE)glbindGetProcAddress(`glFlushVertexArrayRangeAPPLE`);
  if (glFlushVertexArrayRangeAPPLE is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeAPPLE' not found!`);
  glFlushVertexArrayRangeAPPLE(a0,a1,);
}
__gshared glbfn_glVertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glVertexArrayParameteriAPPLE_loader(a0,a1,);
};
private auto glbfn_glVertexArrayParameteriAPPLE_loader (uint a0, int a1) nothrow @nogc {
  glVertexArrayParameteriAPPLE = cast(glbfn_glVertexArrayParameteriAPPLE)glbindGetProcAddress(`glVertexArrayParameteriAPPLE`);
  if (glVertexArrayParameteriAPPLE is null) assert(0, `OpenGL function 'glVertexArrayParameteriAPPLE' not found!`);
  glVertexArrayParameteriAPPLE(a0,a1,);
}
__gshared glbfn_glEnableVertexAttribAPPLE glEnableVertexAttribAPPLE = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnableVertexAttribAPPLE_loader(a0,a1,);
};
private auto glbfn_glEnableVertexAttribAPPLE_loader (uint a0, uint a1) nothrow @nogc {
  glEnableVertexAttribAPPLE = cast(glbfn_glEnableVertexAttribAPPLE)glbindGetProcAddress(`glEnableVertexAttribAPPLE`);
  if (glEnableVertexAttribAPPLE is null) assert(0, `OpenGL function 'glEnableVertexAttribAPPLE' not found!`);
  glEnableVertexAttribAPPLE(a0,a1,);
}
__gshared glbfn_glDisableVertexAttribAPPLE glDisableVertexAttribAPPLE = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisableVertexAttribAPPLE_loader(a0,a1,);
};
private auto glbfn_glDisableVertexAttribAPPLE_loader (uint a0, uint a1) nothrow @nogc {
  glDisableVertexAttribAPPLE = cast(glbfn_glDisableVertexAttribAPPLE)glbindGetProcAddress(`glDisableVertexAttribAPPLE`);
  if (glDisableVertexAttribAPPLE is null) assert(0, `OpenGL function 'glDisableVertexAttribAPPLE' not found!`);
  glDisableVertexAttribAPPLE(a0,a1,);
}
__gshared glbfn_glIsVertexAttribEnabledAPPLE glIsVertexAttribEnabledAPPLE = function ubyte (uint a0, uint a1) nothrow @nogc {
  return glbfn_glIsVertexAttribEnabledAPPLE_loader(a0,a1,);
};
private auto glbfn_glIsVertexAttribEnabledAPPLE_loader (uint a0, uint a1) nothrow @nogc {
  glIsVertexAttribEnabledAPPLE = cast(glbfn_glIsVertexAttribEnabledAPPLE)glbindGetProcAddress(`glIsVertexAttribEnabledAPPLE`);
  if (glIsVertexAttribEnabledAPPLE is null) assert(0, `OpenGL function 'glIsVertexAttribEnabledAPPLE' not found!`);
  return glIsVertexAttribEnabledAPPLE(a0,a1,);
}
__gshared glbfn_glMapVertexAttrib1dAPPLE glMapVertexAttrib1dAPPLE = function void (uint a0, uint a1, double a2, double a3, int a4, int a5, const(double)* a6) nothrow @nogc {
  glbfn_glMapVertexAttrib1dAPPLE_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glMapVertexAttrib1dAPPLE_loader (uint a0, uint a1, double a2, double a3, int a4, int a5, const(double)* a6) nothrow @nogc {
  glMapVertexAttrib1dAPPLE = cast(glbfn_glMapVertexAttrib1dAPPLE)glbindGetProcAddress(`glMapVertexAttrib1dAPPLE`);
  if (glMapVertexAttrib1dAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib1dAPPLE' not found!`);
  glMapVertexAttrib1dAPPLE(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMapVertexAttrib1fAPPLE glMapVertexAttrib1fAPPLE = function void (uint a0, uint a1, float a2, float a3, int a4, int a5, const(float)* a6) nothrow @nogc {
  glbfn_glMapVertexAttrib1fAPPLE_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glMapVertexAttrib1fAPPLE_loader (uint a0, uint a1, float a2, float a3, int a4, int a5, const(float)* a6) nothrow @nogc {
  glMapVertexAttrib1fAPPLE = cast(glbfn_glMapVertexAttrib1fAPPLE)glbindGetProcAddress(`glMapVertexAttrib1fAPPLE`);
  if (glMapVertexAttrib1fAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib1fAPPLE' not found!`);
  glMapVertexAttrib1fAPPLE(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMapVertexAttrib2dAPPLE glMapVertexAttrib2dAPPLE = function void (uint a0, uint a1, double a2, double a3, int a4, int a5, double a6, double a7, int a8, int a9, const(double)* a10) nothrow @nogc {
  glbfn_glMapVertexAttrib2dAPPLE_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glMapVertexAttrib2dAPPLE_loader (uint a0, uint a1, double a2, double a3, int a4, int a5, double a6, double a7, int a8, int a9, const(double)* a10) nothrow @nogc {
  glMapVertexAttrib2dAPPLE = cast(glbfn_glMapVertexAttrib2dAPPLE)glbindGetProcAddress(`glMapVertexAttrib2dAPPLE`);
  if (glMapVertexAttrib2dAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib2dAPPLE' not found!`);
  glMapVertexAttrib2dAPPLE(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
}
__gshared glbfn_glMapVertexAttrib2fAPPLE glMapVertexAttrib2fAPPLE = function void (uint a0, uint a1, float a2, float a3, int a4, int a5, float a6, float a7, int a8, int a9, const(float)* a10) nothrow @nogc {
  glbfn_glMapVertexAttrib2fAPPLE_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glMapVertexAttrib2fAPPLE_loader (uint a0, uint a1, float a2, float a3, int a4, int a5, float a6, float a7, int a8, int a9, const(float)* a10) nothrow @nogc {
  glMapVertexAttrib2fAPPLE = cast(glbfn_glMapVertexAttrib2fAPPLE)glbindGetProcAddress(`glMapVertexAttrib2fAPPLE`);
  if (glMapVertexAttrib2fAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib2fAPPLE' not found!`);
  glMapVertexAttrib2fAPPLE(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glPrimitiveBoundingBoxARB glPrimitiveBoundingBoxARB = function void (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glbfn_glPrimitiveBoundingBoxARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glPrimitiveBoundingBoxARB_loader (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glPrimitiveBoundingBoxARB = cast(glbfn_glPrimitiveBoundingBoxARB)glbindGetProcAddress(`glPrimitiveBoundingBoxARB`);
  if (glPrimitiveBoundingBoxARB is null) assert(0, `OpenGL function 'glPrimitiveBoundingBoxARB' not found!`);
  glPrimitiveBoundingBoxARB(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetTextureHandleARB glGetTextureHandleARB = function ulong (uint a0) nothrow @nogc {
  return glbfn_glGetTextureHandleARB_loader(a0,);
};
private auto glbfn_glGetTextureHandleARB_loader (uint a0) nothrow @nogc {
  glGetTextureHandleARB = cast(glbfn_glGetTextureHandleARB)glbindGetProcAddress(`glGetTextureHandleARB`);
  if (glGetTextureHandleARB is null) assert(0, `OpenGL function 'glGetTextureHandleARB' not found!`);
  return glGetTextureHandleARB(a0,);
}
__gshared glbfn_glGetTextureSamplerHandleARB glGetTextureSamplerHandleARB = function ulong (uint a0, uint a1) nothrow @nogc {
  return glbfn_glGetTextureSamplerHandleARB_loader(a0,a1,);
};
private auto glbfn_glGetTextureSamplerHandleARB_loader (uint a0, uint a1) nothrow @nogc {
  glGetTextureSamplerHandleARB = cast(glbfn_glGetTextureSamplerHandleARB)glbindGetProcAddress(`glGetTextureSamplerHandleARB`);
  if (glGetTextureSamplerHandleARB is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleARB' not found!`);
  return glGetTextureSamplerHandleARB(a0,a1,);
}
__gshared glbfn_glMakeTextureHandleResidentARB glMakeTextureHandleResidentARB = function void (ulong a0) nothrow @nogc {
  glbfn_glMakeTextureHandleResidentARB_loader(a0,);
};
private auto glbfn_glMakeTextureHandleResidentARB_loader (ulong a0) nothrow @nogc {
  glMakeTextureHandleResidentARB = cast(glbfn_glMakeTextureHandleResidentARB)glbindGetProcAddress(`glMakeTextureHandleResidentARB`);
  if (glMakeTextureHandleResidentARB is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentARB' not found!`);
  glMakeTextureHandleResidentARB(a0,);
}
__gshared glbfn_glMakeTextureHandleNonResidentARB glMakeTextureHandleNonResidentARB = function void (ulong a0) nothrow @nogc {
  glbfn_glMakeTextureHandleNonResidentARB_loader(a0,);
};
private auto glbfn_glMakeTextureHandleNonResidentARB_loader (ulong a0) nothrow @nogc {
  glMakeTextureHandleNonResidentARB = cast(glbfn_glMakeTextureHandleNonResidentARB)glbindGetProcAddress(`glMakeTextureHandleNonResidentARB`);
  if (glMakeTextureHandleNonResidentARB is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentARB' not found!`);
  glMakeTextureHandleNonResidentARB(a0,);
}
__gshared glbfn_glGetImageHandleARB glGetImageHandleARB = function ulong (uint a0, int a1, ubyte a2, int a3, uint a4) nothrow @nogc {
  return glbfn_glGetImageHandleARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetImageHandleARB_loader (uint a0, int a1, ubyte a2, int a3, uint a4) nothrow @nogc {
  glGetImageHandleARB = cast(glbfn_glGetImageHandleARB)glbindGetProcAddress(`glGetImageHandleARB`);
  if (glGetImageHandleARB is null) assert(0, `OpenGL function 'glGetImageHandleARB' not found!`);
  return glGetImageHandleARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMakeImageHandleResidentARB glMakeImageHandleResidentARB = function void (ulong a0, uint a1) nothrow @nogc {
  glbfn_glMakeImageHandleResidentARB_loader(a0,a1,);
};
private auto glbfn_glMakeImageHandleResidentARB_loader (ulong a0, uint a1) nothrow @nogc {
  glMakeImageHandleResidentARB = cast(glbfn_glMakeImageHandleResidentARB)glbindGetProcAddress(`glMakeImageHandleResidentARB`);
  if (glMakeImageHandleResidentARB is null) assert(0, `OpenGL function 'glMakeImageHandleResidentARB' not found!`);
  glMakeImageHandleResidentARB(a0,a1,);
}
__gshared glbfn_glMakeImageHandleNonResidentARB glMakeImageHandleNonResidentARB = function void (ulong a0) nothrow @nogc {
  glbfn_glMakeImageHandleNonResidentARB_loader(a0,);
};
private auto glbfn_glMakeImageHandleNonResidentARB_loader (ulong a0) nothrow @nogc {
  glMakeImageHandleNonResidentARB = cast(glbfn_glMakeImageHandleNonResidentARB)glbindGetProcAddress(`glMakeImageHandleNonResidentARB`);
  if (glMakeImageHandleNonResidentARB is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentARB' not found!`);
  glMakeImageHandleNonResidentARB(a0,);
}
__gshared glbfn_glUniformHandleui64ARB glUniformHandleui64ARB = function void (int a0, ulong a1) nothrow @nogc {
  glbfn_glUniformHandleui64ARB_loader(a0,a1,);
};
private auto glbfn_glUniformHandleui64ARB_loader (int a0, ulong a1) nothrow @nogc {
  glUniformHandleui64ARB = cast(glbfn_glUniformHandleui64ARB)glbindGetProcAddress(`glUniformHandleui64ARB`);
  if (glUniformHandleui64ARB is null) assert(0, `OpenGL function 'glUniformHandleui64ARB' not found!`);
  glUniformHandleui64ARB(a0,a1,);
}
__gshared glbfn_glUniformHandleui64vARB glUniformHandleui64vARB = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniformHandleui64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniformHandleui64vARB_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniformHandleui64vARB = cast(glbfn_glUniformHandleui64vARB)glbindGetProcAddress(`glUniformHandleui64vARB`);
  if (glUniformHandleui64vARB is null) assert(0, `OpenGL function 'glUniformHandleui64vARB' not found!`);
  glUniformHandleui64vARB(a0,a1,a2,);
}
__gshared glbfn_glProgramUniformHandleui64ARB glProgramUniformHandleui64ARB = function void (uint a0, int a1, ulong a2) nothrow @nogc {
  glbfn_glProgramUniformHandleui64ARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniformHandleui64ARB_loader (uint a0, int a1, ulong a2) nothrow @nogc {
  glProgramUniformHandleui64ARB = cast(glbfn_glProgramUniformHandleui64ARB)glbindGetProcAddress(`glProgramUniformHandleui64ARB`);
  if (glProgramUniformHandleui64ARB is null) assert(0, `OpenGL function 'glProgramUniformHandleui64ARB' not found!`);
  glProgramUniformHandleui64ARB(a0,a1,a2,);
}
__gshared glbfn_glProgramUniformHandleui64vARB glProgramUniformHandleui64vARB = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniformHandleui64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniformHandleui64vARB_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniformHandleui64vARB = cast(glbfn_glProgramUniformHandleui64vARB)glbindGetProcAddress(`glProgramUniformHandleui64vARB`);
  if (glProgramUniformHandleui64vARB is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vARB' not found!`);
  glProgramUniformHandleui64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glIsTextureHandleResidentARB glIsTextureHandleResidentARB = function ubyte (ulong a0) nothrow @nogc {
  return glbfn_glIsTextureHandleResidentARB_loader(a0,);
};
private auto glbfn_glIsTextureHandleResidentARB_loader (ulong a0) nothrow @nogc {
  glIsTextureHandleResidentARB = cast(glbfn_glIsTextureHandleResidentARB)glbindGetProcAddress(`glIsTextureHandleResidentARB`);
  if (glIsTextureHandleResidentARB is null) assert(0, `OpenGL function 'glIsTextureHandleResidentARB' not found!`);
  return glIsTextureHandleResidentARB(a0,);
}
__gshared glbfn_glIsImageHandleResidentARB glIsImageHandleResidentARB = function ubyte (ulong a0) nothrow @nogc {
  return glbfn_glIsImageHandleResidentARB_loader(a0,);
};
private auto glbfn_glIsImageHandleResidentARB_loader (ulong a0) nothrow @nogc {
  glIsImageHandleResidentARB = cast(glbfn_glIsImageHandleResidentARB)glbindGetProcAddress(`glIsImageHandleResidentARB`);
  if (glIsImageHandleResidentARB is null) assert(0, `OpenGL function 'glIsImageHandleResidentARB' not found!`);
  return glIsImageHandleResidentARB(a0,);
}
__gshared glbfn_glVertexAttribL1ui64ARB glVertexAttribL1ui64ARB = function void (uint a0, ulong a1) nothrow @nogc {
  glbfn_glVertexAttribL1ui64ARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1ui64ARB_loader (uint a0, ulong a1) nothrow @nogc {
  glVertexAttribL1ui64ARB = cast(glbfn_glVertexAttribL1ui64ARB)glbindGetProcAddress(`glVertexAttribL1ui64ARB`);
  if (glVertexAttribL1ui64ARB is null) assert(0, `OpenGL function 'glVertexAttribL1ui64ARB' not found!`);
  glVertexAttribL1ui64ARB(a0,a1,);
}
__gshared glbfn_glVertexAttribL1ui64vARB glVertexAttribL1ui64vARB = function void (uint a0, const(ulong)* a1) nothrow @nogc {
  glbfn_glVertexAttribL1ui64vARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1ui64vARB_loader (uint a0, const(ulong)* a1) nothrow @nogc {
  glVertexAttribL1ui64vARB = cast(glbfn_glVertexAttribL1ui64vARB)glbindGetProcAddress(`glVertexAttribL1ui64vARB`);
  if (glVertexAttribL1ui64vARB is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vARB' not found!`);
  glVertexAttribL1ui64vARB(a0,a1,);
}
__gshared glbfn_glGetVertexAttribLui64vARB glGetVertexAttribLui64vARB = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetVertexAttribLui64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribLui64vARB_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetVertexAttribLui64vARB = cast(glbfn_glGetVertexAttribLui64vARB)glbindGetProcAddress(`glGetVertexAttribLui64vARB`);
  if (glGetVertexAttribLui64vARB is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vARB' not found!`);
  glGetVertexAttribLui64vARB(a0,a1,a2,);
}
__gshared glbfn_glClampColorARB glClampColorARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glClampColorARB_loader(a0,a1,);
};
private auto glbfn_glClampColorARB_loader (uint a0, uint a1) nothrow @nogc {
  glClampColorARB = cast(glbfn_glClampColorARB)glbindGetProcAddress(`glClampColorARB`);
  if (glClampColorARB is null) assert(0, `OpenGL function 'glClampColorARB' not found!`);
  glClampColorARB(a0,a1,);
}
__gshared glbfn_glDispatchComputeGroupSizeARB glDispatchComputeGroupSizeARB = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glDispatchComputeGroupSizeARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDispatchComputeGroupSizeARB_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glDispatchComputeGroupSizeARB = cast(glbfn_glDispatchComputeGroupSizeARB)glbindGetProcAddress(`glDispatchComputeGroupSizeARB`);
  if (glDispatchComputeGroupSizeARB is null) assert(0, `OpenGL function 'glDispatchComputeGroupSizeARB' not found!`);
  glDispatchComputeGroupSizeARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glDebugMessageControlARB glDebugMessageControlARB = function void (uint a0, uint a1, uint a2, int a3, const(uint)* a4, ubyte a5) nothrow @nogc {
  glbfn_glDebugMessageControlARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDebugMessageControlARB_loader (uint a0, uint a1, uint a2, int a3, const(uint)* a4, ubyte a5) nothrow @nogc {
  glDebugMessageControlARB = cast(glbfn_glDebugMessageControlARB)glbindGetProcAddress(`glDebugMessageControlARB`);
  if (glDebugMessageControlARB is null) assert(0, `OpenGL function 'glDebugMessageControlARB' not found!`);
  glDebugMessageControlARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glDebugMessageInsertARB glDebugMessageInsertARB = function void (uint a0, uint a1, uint a2, uint a3, int a4, const(char)* a5) nothrow @nogc {
  glbfn_glDebugMessageInsertARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDebugMessageInsertARB_loader (uint a0, uint a1, uint a2, uint a3, int a4, const(char)* a5) nothrow @nogc {
  glDebugMessageInsertARB = cast(glbfn_glDebugMessageInsertARB)glbindGetProcAddress(`glDebugMessageInsertARB`);
  if (glDebugMessageInsertARB is null) assert(0, `OpenGL function 'glDebugMessageInsertARB' not found!`);
  glDebugMessageInsertARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetDebugMessageLogARB glGetDebugMessageLogARB = function uint (uint a0, int a1, uint* a2, uint* a3, uint* a4, uint* a5, int* a6, char* a7) nothrow @nogc {
  return glbfn_glGetDebugMessageLogARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glGetDebugMessageLogARB_loader (uint a0, int a1, uint* a2, uint* a3, uint* a4, uint* a5, int* a6, char* a7) nothrow @nogc {
  glGetDebugMessageLogARB = cast(glbfn_glGetDebugMessageLogARB)glbindGetProcAddress(`glGetDebugMessageLogARB`);
  if (glGetDebugMessageLogARB is null) assert(0, `OpenGL function 'glGetDebugMessageLogARB' not found!`);
  return glGetDebugMessageLogARB(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glDrawBuffersARB glDrawBuffersARB = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDrawBuffersARB_loader(a0,a1,);
};
private auto glbfn_glDrawBuffersARB_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDrawBuffersARB = cast(glbfn_glDrawBuffersARB)glbindGetProcAddress(`glDrawBuffersARB`);
  if (glDrawBuffersARB is null) assert(0, `OpenGL function 'glDrawBuffersARB' not found!`);
  glDrawBuffersARB(a0,a1,);
}
__gshared glbfn_glBlendEquationiARB glBlendEquationiARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBlendEquationiARB_loader(a0,a1,);
};
private auto glbfn_glBlendEquationiARB_loader (uint a0, uint a1) nothrow @nogc {
  glBlendEquationiARB = cast(glbfn_glBlendEquationiARB)glbindGetProcAddress(`glBlendEquationiARB`);
  if (glBlendEquationiARB is null) assert(0, `OpenGL function 'glBlendEquationiARB' not found!`);
  glBlendEquationiARB(a0,a1,);
}
__gshared glbfn_glBlendEquationSeparateiARB glBlendEquationSeparateiARB = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBlendEquationSeparateiARB_loader(a0,a1,a2,);
};
private auto glbfn_glBlendEquationSeparateiARB_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBlendEquationSeparateiARB = cast(glbfn_glBlendEquationSeparateiARB)glbindGetProcAddress(`glBlendEquationSeparateiARB`);
  if (glBlendEquationSeparateiARB is null) assert(0, `OpenGL function 'glBlendEquationSeparateiARB' not found!`);
  glBlendEquationSeparateiARB(a0,a1,a2,);
}
__gshared glbfn_glBlendFunciARB glBlendFunciARB = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBlendFunciARB_loader(a0,a1,a2,);
};
private auto glbfn_glBlendFunciARB_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBlendFunciARB = cast(glbfn_glBlendFunciARB)glbindGetProcAddress(`glBlendFunciARB`);
  if (glBlendFunciARB is null) assert(0, `OpenGL function 'glBlendFunciARB' not found!`);
  glBlendFunciARB(a0,a1,a2,);
}
__gshared glbfn_glBlendFuncSeparateiARB glBlendFuncSeparateiARB = function void (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glBlendFuncSeparateiARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glBlendFuncSeparateiARB_loader (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glBlendFuncSeparateiARB = cast(glbfn_glBlendFuncSeparateiARB)glbindGetProcAddress(`glBlendFuncSeparateiARB`);
  if (glBlendFuncSeparateiARB is null) assert(0, `OpenGL function 'glBlendFuncSeparateiARB' not found!`);
  glBlendFuncSeparateiARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawArraysInstancedARB glDrawArraysInstancedARB = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glDrawArraysInstancedARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawArraysInstancedARB_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glDrawArraysInstancedARB = cast(glbfn_glDrawArraysInstancedARB)glbindGetProcAddress(`glDrawArraysInstancedARB`);
  if (glDrawArraysInstancedARB is null) assert(0, `OpenGL function 'glDrawArraysInstancedARB' not found!`);
  glDrawArraysInstancedARB(a0,a1,a2,a3,);
}
__gshared glbfn_glDrawElementsInstancedARB glDrawElementsInstancedARB = function void (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glbfn_glDrawElementsInstancedARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawElementsInstancedARB_loader (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glDrawElementsInstancedARB = cast(glbfn_glDrawElementsInstancedARB)glbindGetProcAddress(`glDrawElementsInstancedARB`);
  if (glDrawElementsInstancedARB is null) assert(0, `OpenGL function 'glDrawElementsInstancedARB' not found!`);
  glDrawElementsInstancedARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramStringARB glProgramStringARB = function void (uint a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glProgramStringARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramStringARB_loader (uint a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glProgramStringARB = cast(glbfn_glProgramStringARB)glbindGetProcAddress(`glProgramStringARB`);
  if (glProgramStringARB is null) assert(0, `OpenGL function 'glProgramStringARB' not found!`);
  glProgramStringARB(a0,a1,a2,a3,);
}
__gshared glbfn_glBindProgramARB glBindProgramARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindProgramARB_loader(a0,a1,);
};
private auto glbfn_glBindProgramARB_loader (uint a0, uint a1) nothrow @nogc {
  glBindProgramARB = cast(glbfn_glBindProgramARB)glbindGetProcAddress(`glBindProgramARB`);
  if (glBindProgramARB is null) assert(0, `OpenGL function 'glBindProgramARB' not found!`);
  glBindProgramARB(a0,a1,);
}
__gshared glbfn_glDeleteProgramsARB glDeleteProgramsARB = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteProgramsARB_loader(a0,a1,);
};
private auto glbfn_glDeleteProgramsARB_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteProgramsARB = cast(glbfn_glDeleteProgramsARB)glbindGetProcAddress(`glDeleteProgramsARB`);
  if (glDeleteProgramsARB is null) assert(0, `OpenGL function 'glDeleteProgramsARB' not found!`);
  glDeleteProgramsARB(a0,a1,);
}
__gshared glbfn_glGenProgramsARB glGenProgramsARB = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenProgramsARB_loader(a0,a1,);
};
private auto glbfn_glGenProgramsARB_loader (int a0, uint* a1) nothrow @nogc {
  glGenProgramsARB = cast(glbfn_glGenProgramsARB)glbindGetProcAddress(`glGenProgramsARB`);
  if (glGenProgramsARB is null) assert(0, `OpenGL function 'glGenProgramsARB' not found!`);
  glGenProgramsARB(a0,a1,);
}
__gshared glbfn_glProgramEnvParameter4dARB glProgramEnvParameter4dARB = function void (uint a0, uint a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glbfn_glProgramEnvParameter4dARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramEnvParameter4dARB_loader (uint a0, uint a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glProgramEnvParameter4dARB = cast(glbfn_glProgramEnvParameter4dARB)glbindGetProcAddress(`glProgramEnvParameter4dARB`);
  if (glProgramEnvParameter4dARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4dARB' not found!`);
  glProgramEnvParameter4dARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramEnvParameter4dvARB glProgramEnvParameter4dvARB = function void (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glbfn_glProgramEnvParameter4dvARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramEnvParameter4dvARB_loader (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glProgramEnvParameter4dvARB = cast(glbfn_glProgramEnvParameter4dvARB)glbindGetProcAddress(`glProgramEnvParameter4dvARB`);
  if (glProgramEnvParameter4dvARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4dvARB' not found!`);
  glProgramEnvParameter4dvARB(a0,a1,a2,);
}
__gshared glbfn_glProgramEnvParameter4fARB glProgramEnvParameter4fARB = function void (uint a0, uint a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glProgramEnvParameter4fARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramEnvParameter4fARB_loader (uint a0, uint a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glProgramEnvParameter4fARB = cast(glbfn_glProgramEnvParameter4fARB)glbindGetProcAddress(`glProgramEnvParameter4fARB`);
  if (glProgramEnvParameter4fARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4fARB' not found!`);
  glProgramEnvParameter4fARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramEnvParameter4fvARB glProgramEnvParameter4fvARB = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glProgramEnvParameter4fvARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramEnvParameter4fvARB_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glProgramEnvParameter4fvARB = cast(glbfn_glProgramEnvParameter4fvARB)glbindGetProcAddress(`glProgramEnvParameter4fvARB`);
  if (glProgramEnvParameter4fvARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4fvARB' not found!`);
  glProgramEnvParameter4fvARB(a0,a1,a2,);
}
__gshared glbfn_glProgramLocalParameter4dARB glProgramLocalParameter4dARB = function void (uint a0, uint a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glbfn_glProgramLocalParameter4dARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramLocalParameter4dARB_loader (uint a0, uint a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glProgramLocalParameter4dARB = cast(glbfn_glProgramLocalParameter4dARB)glbindGetProcAddress(`glProgramLocalParameter4dARB`);
  if (glProgramLocalParameter4dARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4dARB' not found!`);
  glProgramLocalParameter4dARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramLocalParameter4dvARB glProgramLocalParameter4dvARB = function void (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glbfn_glProgramLocalParameter4dvARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramLocalParameter4dvARB_loader (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glProgramLocalParameter4dvARB = cast(glbfn_glProgramLocalParameter4dvARB)glbindGetProcAddress(`glProgramLocalParameter4dvARB`);
  if (glProgramLocalParameter4dvARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4dvARB' not found!`);
  glProgramLocalParameter4dvARB(a0,a1,a2,);
}
__gshared glbfn_glProgramLocalParameter4fARB glProgramLocalParameter4fARB = function void (uint a0, uint a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glProgramLocalParameter4fARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramLocalParameter4fARB_loader (uint a0, uint a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glProgramLocalParameter4fARB = cast(glbfn_glProgramLocalParameter4fARB)glbindGetProcAddress(`glProgramLocalParameter4fARB`);
  if (glProgramLocalParameter4fARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4fARB' not found!`);
  glProgramLocalParameter4fARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramLocalParameter4fvARB glProgramLocalParameter4fvARB = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glProgramLocalParameter4fvARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramLocalParameter4fvARB_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glProgramLocalParameter4fvARB = cast(glbfn_glProgramLocalParameter4fvARB)glbindGetProcAddress(`glProgramLocalParameter4fvARB`);
  if (glProgramLocalParameter4fvARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4fvARB' not found!`);
  glProgramLocalParameter4fvARB(a0,a1,a2,);
}
__gshared glbfn_glGetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetProgramEnvParameterdvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramEnvParameterdvARB_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetProgramEnvParameterdvARB = cast(glbfn_glGetProgramEnvParameterdvARB)glbindGetProcAddress(`glGetProgramEnvParameterdvARB`);
  if (glGetProgramEnvParameterdvARB is null) assert(0, `OpenGL function 'glGetProgramEnvParameterdvARB' not found!`);
  glGetProgramEnvParameterdvARB(a0,a1,a2,);
}
__gshared glbfn_glGetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetProgramEnvParameterfvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramEnvParameterfvARB_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetProgramEnvParameterfvARB = cast(glbfn_glGetProgramEnvParameterfvARB)glbindGetProcAddress(`glGetProgramEnvParameterfvARB`);
  if (glGetProgramEnvParameterfvARB is null) assert(0, `OpenGL function 'glGetProgramEnvParameterfvARB' not found!`);
  glGetProgramEnvParameterfvARB(a0,a1,a2,);
}
__gshared glbfn_glGetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetProgramLocalParameterdvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramLocalParameterdvARB_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetProgramLocalParameterdvARB = cast(glbfn_glGetProgramLocalParameterdvARB)glbindGetProcAddress(`glGetProgramLocalParameterdvARB`);
  if (glGetProgramLocalParameterdvARB is null) assert(0, `OpenGL function 'glGetProgramLocalParameterdvARB' not found!`);
  glGetProgramLocalParameterdvARB(a0,a1,a2,);
}
__gshared glbfn_glGetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetProgramLocalParameterfvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramLocalParameterfvARB_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetProgramLocalParameterfvARB = cast(glbfn_glGetProgramLocalParameterfvARB)glbindGetProcAddress(`glGetProgramLocalParameterfvARB`);
  if (glGetProgramLocalParameterfvARB is null) assert(0, `OpenGL function 'glGetProgramLocalParameterfvARB' not found!`);
  glGetProgramLocalParameterfvARB(a0,a1,a2,);
}
__gshared glbfn_glGetProgramivARB glGetProgramivARB = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetProgramivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramivARB_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetProgramivARB = cast(glbfn_glGetProgramivARB)glbindGetProcAddress(`glGetProgramivARB`);
  if (glGetProgramivARB is null) assert(0, `OpenGL function 'glGetProgramivARB' not found!`);
  glGetProgramivARB(a0,a1,a2,);
}
__gshared glbfn_glGetProgramStringARB glGetProgramStringARB = function void (uint a0, uint a1, void* a2) nothrow @nogc {
  glbfn_glGetProgramStringARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramStringARB_loader (uint a0, uint a1, void* a2) nothrow @nogc {
  glGetProgramStringARB = cast(glbfn_glGetProgramStringARB)glbindGetProcAddress(`glGetProgramStringARB`);
  if (glGetProgramStringARB is null) assert(0, `OpenGL function 'glGetProgramStringARB' not found!`);
  glGetProgramStringARB(a0,a1,a2,);
}
__gshared glbfn_glIsProgramARB glIsProgramARB = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsProgramARB_loader(a0,);
};
private auto glbfn_glIsProgramARB_loader (uint a0) nothrow @nogc {
  glIsProgramARB = cast(glbfn_glIsProgramARB)glbindGetProcAddress(`glIsProgramARB`);
  if (glIsProgramARB is null) assert(0, `OpenGL function 'glIsProgramARB' not found!`);
  return glIsProgramARB(a0,);
}
__gshared glbfn_glProgramParameteriARB glProgramParameteriARB = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glProgramParameteriARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramParameteriARB_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glProgramParameteriARB = cast(glbfn_glProgramParameteriARB)glbindGetProcAddress(`glProgramParameteriARB`);
  if (glProgramParameteriARB is null) assert(0, `OpenGL function 'glProgramParameteriARB' not found!`);
  glProgramParameteriARB(a0,a1,a2,);
}
__gshared glbfn_glFramebufferTextureARB glFramebufferTextureARB = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glFramebufferTextureARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFramebufferTextureARB_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glFramebufferTextureARB = cast(glbfn_glFramebufferTextureARB)glbindGetProcAddress(`glFramebufferTextureARB`);
  if (glFramebufferTextureARB is null) assert(0, `OpenGL function 'glFramebufferTextureARB' not found!`);
  glFramebufferTextureARB(a0,a1,a2,a3,);
}
__gshared glbfn_glFramebufferTextureLayerARB glFramebufferTextureLayerARB = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glFramebufferTextureLayerARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTextureLayerARB_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glFramebufferTextureLayerARB = cast(glbfn_glFramebufferTextureLayerARB)glbindGetProcAddress(`glFramebufferTextureLayerARB`);
  if (glFramebufferTextureLayerARB is null) assert(0, `OpenGL function 'glFramebufferTextureLayerARB' not found!`);
  glFramebufferTextureLayerARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glFramebufferTextureFaceARB glFramebufferTextureFaceARB = function void (uint a0, uint a1, uint a2, int a3, uint a4) nothrow @nogc {
  glbfn_glFramebufferTextureFaceARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTextureFaceARB_loader (uint a0, uint a1, uint a2, int a3, uint a4) nothrow @nogc {
  glFramebufferTextureFaceARB = cast(glbfn_glFramebufferTextureFaceARB)glbindGetProcAddress(`glFramebufferTextureFaceARB`);
  if (glFramebufferTextureFaceARB is null) assert(0, `OpenGL function 'glFramebufferTextureFaceARB' not found!`);
  glFramebufferTextureFaceARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1i64ARB glUniform1i64ARB = function void (int a0, long a1) nothrow @nogc {
  glbfn_glUniform1i64ARB_loader(a0,a1,);
};
private auto glbfn_glUniform1i64ARB_loader (int a0, long a1) nothrow @nogc {
  glUniform1i64ARB = cast(glbfn_glUniform1i64ARB)glbindGetProcAddress(`glUniform1i64ARB`);
  if (glUniform1i64ARB is null) assert(0, `OpenGL function 'glUniform1i64ARB' not found!`);
  glUniform1i64ARB(a0,a1,);
}
__gshared glbfn_glUniform2i64ARB glUniform2i64ARB = function void (int a0, long a1, long a2) nothrow @nogc {
  glbfn_glUniform2i64ARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2i64ARB_loader (int a0, long a1, long a2) nothrow @nogc {
  glUniform2i64ARB = cast(glbfn_glUniform2i64ARB)glbindGetProcAddress(`glUniform2i64ARB`);
  if (glUniform2i64ARB is null) assert(0, `OpenGL function 'glUniform2i64ARB' not found!`);
  glUniform2i64ARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3i64ARB glUniform3i64ARB = function void (int a0, long a1, long a2, long a3) nothrow @nogc {
  glbfn_glUniform3i64ARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3i64ARB_loader (int a0, long a1, long a2, long a3) nothrow @nogc {
  glUniform3i64ARB = cast(glbfn_glUniform3i64ARB)glbindGetProcAddress(`glUniform3i64ARB`);
  if (glUniform3i64ARB is null) assert(0, `OpenGL function 'glUniform3i64ARB' not found!`);
  glUniform3i64ARB(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4i64ARB glUniform4i64ARB = function void (int a0, long a1, long a2, long a3, long a4) nothrow @nogc {
  glbfn_glUniform4i64ARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4i64ARB_loader (int a0, long a1, long a2, long a3, long a4) nothrow @nogc {
  glUniform4i64ARB = cast(glbfn_glUniform4i64ARB)glbindGetProcAddress(`glUniform4i64ARB`);
  if (glUniform4i64ARB is null) assert(0, `OpenGL function 'glUniform4i64ARB' not found!`);
  glUniform4i64ARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1i64vARB glUniform1i64vARB = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform1i64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1i64vARB_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform1i64vARB = cast(glbfn_glUniform1i64vARB)glbindGetProcAddress(`glUniform1i64vARB`);
  if (glUniform1i64vARB is null) assert(0, `OpenGL function 'glUniform1i64vARB' not found!`);
  glUniform1i64vARB(a0,a1,a2,);
}
__gshared glbfn_glUniform2i64vARB glUniform2i64vARB = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform2i64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2i64vARB_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform2i64vARB = cast(glbfn_glUniform2i64vARB)glbindGetProcAddress(`glUniform2i64vARB`);
  if (glUniform2i64vARB is null) assert(0, `OpenGL function 'glUniform2i64vARB' not found!`);
  glUniform2i64vARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3i64vARB glUniform3i64vARB = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform3i64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3i64vARB_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform3i64vARB = cast(glbfn_glUniform3i64vARB)glbindGetProcAddress(`glUniform3i64vARB`);
  if (glUniform3i64vARB is null) assert(0, `OpenGL function 'glUniform3i64vARB' not found!`);
  glUniform3i64vARB(a0,a1,a2,);
}
__gshared glbfn_glUniform4i64vARB glUniform4i64vARB = function void (int a0, int a1, const(long)* a2) nothrow @nogc {
  glbfn_glUniform4i64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4i64vARB_loader (int a0, int a1, const(long)* a2) nothrow @nogc {
  glUniform4i64vARB = cast(glbfn_glUniform4i64vARB)glbindGetProcAddress(`glUniform4i64vARB`);
  if (glUniform4i64vARB is null) assert(0, `OpenGL function 'glUniform4i64vARB' not found!`);
  glUniform4i64vARB(a0,a1,a2,);
}
__gshared glbfn_glUniform1ui64ARB glUniform1ui64ARB = function void (int a0, ulong a1) nothrow @nogc {
  glbfn_glUniform1ui64ARB_loader(a0,a1,);
};
private auto glbfn_glUniform1ui64ARB_loader (int a0, ulong a1) nothrow @nogc {
  glUniform1ui64ARB = cast(glbfn_glUniform1ui64ARB)glbindGetProcAddress(`glUniform1ui64ARB`);
  if (glUniform1ui64ARB is null) assert(0, `OpenGL function 'glUniform1ui64ARB' not found!`);
  glUniform1ui64ARB(a0,a1,);
}
__gshared glbfn_glUniform2ui64ARB glUniform2ui64ARB = function void (int a0, ulong a1, ulong a2) nothrow @nogc {
  glbfn_glUniform2ui64ARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2ui64ARB_loader (int a0, ulong a1, ulong a2) nothrow @nogc {
  glUniform2ui64ARB = cast(glbfn_glUniform2ui64ARB)glbindGetProcAddress(`glUniform2ui64ARB`);
  if (glUniform2ui64ARB is null) assert(0, `OpenGL function 'glUniform2ui64ARB' not found!`);
  glUniform2ui64ARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3ui64ARB glUniform3ui64ARB = function void (int a0, ulong a1, ulong a2, ulong a3) nothrow @nogc {
  glbfn_glUniform3ui64ARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3ui64ARB_loader (int a0, ulong a1, ulong a2, ulong a3) nothrow @nogc {
  glUniform3ui64ARB = cast(glbfn_glUniform3ui64ARB)glbindGetProcAddress(`glUniform3ui64ARB`);
  if (glUniform3ui64ARB is null) assert(0, `OpenGL function 'glUniform3ui64ARB' not found!`);
  glUniform3ui64ARB(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4ui64ARB glUniform4ui64ARB = function void (int a0, ulong a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glbfn_glUniform4ui64ARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4ui64ARB_loader (int a0, ulong a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glUniform4ui64ARB = cast(glbfn_glUniform4ui64ARB)glbindGetProcAddress(`glUniform4ui64ARB`);
  if (glUniform4ui64ARB is null) assert(0, `OpenGL function 'glUniform4ui64ARB' not found!`);
  glUniform4ui64ARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1ui64vARB glUniform1ui64vARB = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform1ui64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1ui64vARB_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform1ui64vARB = cast(glbfn_glUniform1ui64vARB)glbindGetProcAddress(`glUniform1ui64vARB`);
  if (glUniform1ui64vARB is null) assert(0, `OpenGL function 'glUniform1ui64vARB' not found!`);
  glUniform1ui64vARB(a0,a1,a2,);
}
__gshared glbfn_glUniform2ui64vARB glUniform2ui64vARB = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform2ui64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2ui64vARB_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform2ui64vARB = cast(glbfn_glUniform2ui64vARB)glbindGetProcAddress(`glUniform2ui64vARB`);
  if (glUniform2ui64vARB is null) assert(0, `OpenGL function 'glUniform2ui64vARB' not found!`);
  glUniform2ui64vARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3ui64vARB glUniform3ui64vARB = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform3ui64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3ui64vARB_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform3ui64vARB = cast(glbfn_glUniform3ui64vARB)glbindGetProcAddress(`glUniform3ui64vARB`);
  if (glUniform3ui64vARB is null) assert(0, `OpenGL function 'glUniform3ui64vARB' not found!`);
  glUniform3ui64vARB(a0,a1,a2,);
}
__gshared glbfn_glUniform4ui64vARB glUniform4ui64vARB = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniform4ui64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4ui64vARB_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniform4ui64vARB = cast(glbfn_glUniform4ui64vARB)glbindGetProcAddress(`glUniform4ui64vARB`);
  if (glUniform4ui64vARB is null) assert(0, `OpenGL function 'glUniform4ui64vARB' not found!`);
  glUniform4ui64vARB(a0,a1,a2,);
}
__gshared glbfn_glGetUniformi64vARB glGetUniformi64vARB = function void (uint a0, int a1, long* a2) nothrow @nogc {
  glbfn_glGetUniformi64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformi64vARB_loader (uint a0, int a1, long* a2) nothrow @nogc {
  glGetUniformi64vARB = cast(glbfn_glGetUniformi64vARB)glbindGetProcAddress(`glGetUniformi64vARB`);
  if (glGetUniformi64vARB is null) assert(0, `OpenGL function 'glGetUniformi64vARB' not found!`);
  glGetUniformi64vARB(a0,a1,a2,);
}
__gshared glbfn_glGetUniformui64vARB glGetUniformui64vARB = function void (uint a0, int a1, ulong* a2) nothrow @nogc {
  glbfn_glGetUniformui64vARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformui64vARB_loader (uint a0, int a1, ulong* a2) nothrow @nogc {
  glGetUniformui64vARB = cast(glbfn_glGetUniformui64vARB)glbindGetProcAddress(`glGetUniformui64vARB`);
  if (glGetUniformui64vARB is null) assert(0, `OpenGL function 'glGetUniformui64vARB' not found!`);
  glGetUniformui64vARB(a0,a1,a2,);
}
__gshared glbfn_glGetnUniformi64vARB glGetnUniformi64vARB = function void (uint a0, int a1, int a2, long* a3) nothrow @nogc {
  glbfn_glGetnUniformi64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformi64vARB_loader (uint a0, int a1, int a2, long* a3) nothrow @nogc {
  glGetnUniformi64vARB = cast(glbfn_glGetnUniformi64vARB)glbindGetProcAddress(`glGetnUniformi64vARB`);
  if (glGetnUniformi64vARB is null) assert(0, `OpenGL function 'glGetnUniformi64vARB' not found!`);
  glGetnUniformi64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformui64vARB glGetnUniformui64vARB = function void (uint a0, int a1, int a2, ulong* a3) nothrow @nogc {
  glbfn_glGetnUniformui64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformui64vARB_loader (uint a0, int a1, int a2, ulong* a3) nothrow @nogc {
  glGetnUniformui64vARB = cast(glbfn_glGetnUniformui64vARB)glbindGetProcAddress(`glGetnUniformui64vARB`);
  if (glGetnUniformui64vARB is null) assert(0, `OpenGL function 'glGetnUniformui64vARB' not found!`);
  glGetnUniformui64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1i64ARB glProgramUniform1i64ARB = function void (uint a0, int a1, long a2) nothrow @nogc {
  glbfn_glProgramUniform1i64ARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1i64ARB_loader (uint a0, int a1, long a2) nothrow @nogc {
  glProgramUniform1i64ARB = cast(glbfn_glProgramUniform1i64ARB)glbindGetProcAddress(`glProgramUniform1i64ARB`);
  if (glProgramUniform1i64ARB is null) assert(0, `OpenGL function 'glProgramUniform1i64ARB' not found!`);
  glProgramUniform1i64ARB(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2i64ARB glProgramUniform2i64ARB = function void (uint a0, int a1, long a2, long a3) nothrow @nogc {
  glbfn_glProgramUniform2i64ARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2i64ARB_loader (uint a0, int a1, long a2, long a3) nothrow @nogc {
  glProgramUniform2i64ARB = cast(glbfn_glProgramUniform2i64ARB)glbindGetProcAddress(`glProgramUniform2i64ARB`);
  if (glProgramUniform2i64ARB is null) assert(0, `OpenGL function 'glProgramUniform2i64ARB' not found!`);
  glProgramUniform2i64ARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3i64ARB glProgramUniform3i64ARB = function void (uint a0, int a1, long a2, long a3, long a4) nothrow @nogc {
  glbfn_glProgramUniform3i64ARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3i64ARB_loader (uint a0, int a1, long a2, long a3, long a4) nothrow @nogc {
  glProgramUniform3i64ARB = cast(glbfn_glProgramUniform3i64ARB)glbindGetProcAddress(`glProgramUniform3i64ARB`);
  if (glProgramUniform3i64ARB is null) assert(0, `OpenGL function 'glProgramUniform3i64ARB' not found!`);
  glProgramUniform3i64ARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4i64ARB glProgramUniform4i64ARB = function void (uint a0, int a1, long a2, long a3, long a4, long a5) nothrow @nogc {
  glbfn_glProgramUniform4i64ARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4i64ARB_loader (uint a0, int a1, long a2, long a3, long a4, long a5) nothrow @nogc {
  glProgramUniform4i64ARB = cast(glbfn_glProgramUniform4i64ARB)glbindGetProcAddress(`glProgramUniform4i64ARB`);
  if (glProgramUniform4i64ARB is null) assert(0, `OpenGL function 'glProgramUniform4i64ARB' not found!`);
  glProgramUniform4i64ARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1i64vARB glProgramUniform1i64vARB = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform1i64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1i64vARB_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform1i64vARB = cast(glbfn_glProgramUniform1i64vARB)glbindGetProcAddress(`glProgramUniform1i64vARB`);
  if (glProgramUniform1i64vARB is null) assert(0, `OpenGL function 'glProgramUniform1i64vARB' not found!`);
  glProgramUniform1i64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2i64vARB glProgramUniform2i64vARB = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform2i64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2i64vARB_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform2i64vARB = cast(glbfn_glProgramUniform2i64vARB)glbindGetProcAddress(`glProgramUniform2i64vARB`);
  if (glProgramUniform2i64vARB is null) assert(0, `OpenGL function 'glProgramUniform2i64vARB' not found!`);
  glProgramUniform2i64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3i64vARB glProgramUniform3i64vARB = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform3i64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3i64vARB_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform3i64vARB = cast(glbfn_glProgramUniform3i64vARB)glbindGetProcAddress(`glProgramUniform3i64vARB`);
  if (glProgramUniform3i64vARB is null) assert(0, `OpenGL function 'glProgramUniform3i64vARB' not found!`);
  glProgramUniform3i64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4i64vARB glProgramUniform4i64vARB = function void (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glbfn_glProgramUniform4i64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4i64vARB_loader (uint a0, int a1, int a2, const(long)* a3) nothrow @nogc {
  glProgramUniform4i64vARB = cast(glbfn_glProgramUniform4i64vARB)glbindGetProcAddress(`glProgramUniform4i64vARB`);
  if (glProgramUniform4i64vARB is null) assert(0, `OpenGL function 'glProgramUniform4i64vARB' not found!`);
  glProgramUniform4i64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1ui64ARB glProgramUniform1ui64ARB = function void (uint a0, int a1, ulong a2) nothrow @nogc {
  glbfn_glProgramUniform1ui64ARB_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1ui64ARB_loader (uint a0, int a1, ulong a2) nothrow @nogc {
  glProgramUniform1ui64ARB = cast(glbfn_glProgramUniform1ui64ARB)glbindGetProcAddress(`glProgramUniform1ui64ARB`);
  if (glProgramUniform1ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform1ui64ARB' not found!`);
  glProgramUniform1ui64ARB(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2ui64ARB glProgramUniform2ui64ARB = function void (uint a0, int a1, ulong a2, ulong a3) nothrow @nogc {
  glbfn_glProgramUniform2ui64ARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2ui64ARB_loader (uint a0, int a1, ulong a2, ulong a3) nothrow @nogc {
  glProgramUniform2ui64ARB = cast(glbfn_glProgramUniform2ui64ARB)glbindGetProcAddress(`glProgramUniform2ui64ARB`);
  if (glProgramUniform2ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform2ui64ARB' not found!`);
  glProgramUniform2ui64ARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3ui64ARB glProgramUniform3ui64ARB = function void (uint a0, int a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glbfn_glProgramUniform3ui64ARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3ui64ARB_loader (uint a0, int a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glProgramUniform3ui64ARB = cast(glbfn_glProgramUniform3ui64ARB)glbindGetProcAddress(`glProgramUniform3ui64ARB`);
  if (glProgramUniform3ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform3ui64ARB' not found!`);
  glProgramUniform3ui64ARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4ui64ARB glProgramUniform4ui64ARB = function void (uint a0, int a1, ulong a2, ulong a3, ulong a4, ulong a5) nothrow @nogc {
  glbfn_glProgramUniform4ui64ARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4ui64ARB_loader (uint a0, int a1, ulong a2, ulong a3, ulong a4, ulong a5) nothrow @nogc {
  glProgramUniform4ui64ARB = cast(glbfn_glProgramUniform4ui64ARB)glbindGetProcAddress(`glProgramUniform4ui64ARB`);
  if (glProgramUniform4ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform4ui64ARB' not found!`);
  glProgramUniform4ui64ARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1ui64vARB glProgramUniform1ui64vARB = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform1ui64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1ui64vARB_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform1ui64vARB = cast(glbfn_glProgramUniform1ui64vARB)glbindGetProcAddress(`glProgramUniform1ui64vARB`);
  if (glProgramUniform1ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform1ui64vARB' not found!`);
  glProgramUniform1ui64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2ui64vARB glProgramUniform2ui64vARB = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform2ui64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2ui64vARB_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform2ui64vARB = cast(glbfn_glProgramUniform2ui64vARB)glbindGetProcAddress(`glProgramUniform2ui64vARB`);
  if (glProgramUniform2ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform2ui64vARB' not found!`);
  glProgramUniform2ui64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3ui64vARB glProgramUniform3ui64vARB = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform3ui64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3ui64vARB_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform3ui64vARB = cast(glbfn_glProgramUniform3ui64vARB)glbindGetProcAddress(`glProgramUniform3ui64vARB`);
  if (glProgramUniform3ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform3ui64vARB' not found!`);
  glProgramUniform3ui64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4ui64vARB glProgramUniform4ui64vARB = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniform4ui64vARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4ui64vARB_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniform4ui64vARB = cast(glbfn_glProgramUniform4ui64vARB)glbindGetProcAddress(`glProgramUniform4ui64vARB`);
  if (glProgramUniform4ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform4ui64vARB' not found!`);
  glProgramUniform4ui64vARB(a0,a1,a2,a3,);
}
__gshared glbfn_glColorTable glColorTable = function void (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glColorTable_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glColorTable_loader (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glColorTable = cast(glbfn_glColorTable)glbindGetProcAddress(`glColorTable`);
  if (glColorTable is null) assert(0, `OpenGL function 'glColorTable' not found!`);
  glColorTable(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glColorTableParameterfv glColorTableParameterfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glColorTableParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glColorTableParameterfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glColorTableParameterfv = cast(glbfn_glColorTableParameterfv)glbindGetProcAddress(`glColorTableParameterfv`);
  if (glColorTableParameterfv is null) assert(0, `OpenGL function 'glColorTableParameterfv' not found!`);
  glColorTableParameterfv(a0,a1,a2,);
}
__gshared glbfn_glColorTableParameteriv glColorTableParameteriv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glColorTableParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glColorTableParameteriv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glColorTableParameteriv = cast(glbfn_glColorTableParameteriv)glbindGetProcAddress(`glColorTableParameteriv`);
  if (glColorTableParameteriv is null) assert(0, `OpenGL function 'glColorTableParameteriv' not found!`);
  glColorTableParameteriv(a0,a1,a2,);
}
__gshared glbfn_glCopyColorTable glCopyColorTable = function void (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyColorTable_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glCopyColorTable_loader (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyColorTable = cast(glbfn_glCopyColorTable)glbindGetProcAddress(`glCopyColorTable`);
  if (glCopyColorTable is null) assert(0, `OpenGL function 'glCopyColorTable' not found!`);
  glCopyColorTable(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetColorTable glGetColorTable = function void (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glbfn_glGetColorTable_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetColorTable_loader (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glGetColorTable = cast(glbfn_glGetColorTable)glbindGetProcAddress(`glGetColorTable`);
  if (glGetColorTable is null) assert(0, `OpenGL function 'glGetColorTable' not found!`);
  glGetColorTable(a0,a1,a2,a3,);
}
__gshared glbfn_glGetColorTableParameterfv glGetColorTableParameterfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetColorTableParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetColorTableParameterfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetColorTableParameterfv = cast(glbfn_glGetColorTableParameterfv)glbindGetProcAddress(`glGetColorTableParameterfv`);
  if (glGetColorTableParameterfv is null) assert(0, `OpenGL function 'glGetColorTableParameterfv' not found!`);
  glGetColorTableParameterfv(a0,a1,a2,);
}
__gshared glbfn_glGetColorTableParameteriv glGetColorTableParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetColorTableParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetColorTableParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetColorTableParameteriv = cast(glbfn_glGetColorTableParameteriv)glbindGetProcAddress(`glGetColorTableParameteriv`);
  if (glGetColorTableParameteriv is null) assert(0, `OpenGL function 'glGetColorTableParameteriv' not found!`);
  glGetColorTableParameteriv(a0,a1,a2,);
}
__gshared glbfn_glColorSubTable glColorSubTable = function void (uint a0, int a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glColorSubTable_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glColorSubTable_loader (uint a0, int a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glColorSubTable = cast(glbfn_glColorSubTable)glbindGetProcAddress(`glColorSubTable`);
  if (glColorSubTable is null) assert(0, `OpenGL function 'glColorSubTable' not found!`);
  glColorSubTable(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glCopyColorSubTable glCopyColorSubTable = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyColorSubTable_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glCopyColorSubTable_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyColorSubTable = cast(glbfn_glCopyColorSubTable)glbindGetProcAddress(`glCopyColorSubTable`);
  if (glCopyColorSubTable is null) assert(0, `OpenGL function 'glCopyColorSubTable' not found!`);
  glCopyColorSubTable(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glConvolutionFilter1D glConvolutionFilter1D = function void (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glConvolutionFilter1D_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glConvolutionFilter1D_loader (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glConvolutionFilter1D = cast(glbfn_glConvolutionFilter1D)glbindGetProcAddress(`glConvolutionFilter1D`);
  if (glConvolutionFilter1D is null) assert(0, `OpenGL function 'glConvolutionFilter1D' not found!`);
  glConvolutionFilter1D(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glConvolutionFilter2D glConvolutionFilter2D = function void (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glConvolutionFilter2D_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glConvolutionFilter2D_loader (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glConvolutionFilter2D = cast(glbfn_glConvolutionFilter2D)glbindGetProcAddress(`glConvolutionFilter2D`);
  if (glConvolutionFilter2D is null) assert(0, `OpenGL function 'glConvolutionFilter2D' not found!`);
  glConvolutionFilter2D(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glConvolutionParameterf glConvolutionParameterf = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glConvolutionParameterf_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameterf_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glConvolutionParameterf = cast(glbfn_glConvolutionParameterf)glbindGetProcAddress(`glConvolutionParameterf`);
  if (glConvolutionParameterf is null) assert(0, `OpenGL function 'glConvolutionParameterf' not found!`);
  glConvolutionParameterf(a0,a1,a2,);
}
__gshared glbfn_glConvolutionParameterfv glConvolutionParameterfv = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glConvolutionParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameterfv_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glConvolutionParameterfv = cast(glbfn_glConvolutionParameterfv)glbindGetProcAddress(`glConvolutionParameterfv`);
  if (glConvolutionParameterfv is null) assert(0, `OpenGL function 'glConvolutionParameterfv' not found!`);
  glConvolutionParameterfv(a0,a1,a2,);
}
__gshared glbfn_glConvolutionParameteri glConvolutionParameteri = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glConvolutionParameteri_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameteri_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glConvolutionParameteri = cast(glbfn_glConvolutionParameteri)glbindGetProcAddress(`glConvolutionParameteri`);
  if (glConvolutionParameteri is null) assert(0, `OpenGL function 'glConvolutionParameteri' not found!`);
  glConvolutionParameteri(a0,a1,a2,);
}
__gshared glbfn_glConvolutionParameteriv glConvolutionParameteriv = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glConvolutionParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameteriv_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glConvolutionParameteriv = cast(glbfn_glConvolutionParameteriv)glbindGetProcAddress(`glConvolutionParameteriv`);
  if (glConvolutionParameteriv is null) assert(0, `OpenGL function 'glConvolutionParameteriv' not found!`);
  glConvolutionParameteriv(a0,a1,a2,);
}
__gshared glbfn_glCopyConvolutionFilter1D glCopyConvolutionFilter1D = function void (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyConvolutionFilter1D_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glCopyConvolutionFilter1D_loader (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyConvolutionFilter1D = cast(glbfn_glCopyConvolutionFilter1D)glbindGetProcAddress(`glCopyConvolutionFilter1D`);
  if (glCopyConvolutionFilter1D is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1D' not found!`);
  glCopyConvolutionFilter1D(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glCopyConvolutionFilter2D glCopyConvolutionFilter2D = function void (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glCopyConvolutionFilter2D_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glCopyConvolutionFilter2D_loader (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glCopyConvolutionFilter2D = cast(glbfn_glCopyConvolutionFilter2D)glbindGetProcAddress(`glCopyConvolutionFilter2D`);
  if (glCopyConvolutionFilter2D is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2D' not found!`);
  glCopyConvolutionFilter2D(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetConvolutionFilter glGetConvolutionFilter = function void (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glbfn_glGetConvolutionFilter_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetConvolutionFilter_loader (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glGetConvolutionFilter = cast(glbfn_glGetConvolutionFilter)glbindGetProcAddress(`glGetConvolutionFilter`);
  if (glGetConvolutionFilter is null) assert(0, `OpenGL function 'glGetConvolutionFilter' not found!`);
  glGetConvolutionFilter(a0,a1,a2,a3,);
}
__gshared glbfn_glGetConvolutionParameterfv glGetConvolutionParameterfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetConvolutionParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetConvolutionParameterfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetConvolutionParameterfv = cast(glbfn_glGetConvolutionParameterfv)glbindGetProcAddress(`glGetConvolutionParameterfv`);
  if (glGetConvolutionParameterfv is null) assert(0, `OpenGL function 'glGetConvolutionParameterfv' not found!`);
  glGetConvolutionParameterfv(a0,a1,a2,);
}
__gshared glbfn_glGetConvolutionParameteriv glGetConvolutionParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetConvolutionParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetConvolutionParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetConvolutionParameteriv = cast(glbfn_glGetConvolutionParameteriv)glbindGetProcAddress(`glGetConvolutionParameteriv`);
  if (glGetConvolutionParameteriv is null) assert(0, `OpenGL function 'glGetConvolutionParameteriv' not found!`);
  glGetConvolutionParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetSeparableFilter glGetSeparableFilter = function void (uint a0, uint a1, uint a2, void* a3, void* a4, void* a5) nothrow @nogc {
  glbfn_glGetSeparableFilter_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetSeparableFilter_loader (uint a0, uint a1, uint a2, void* a3, void* a4, void* a5) nothrow @nogc {
  glGetSeparableFilter = cast(glbfn_glGetSeparableFilter)glbindGetProcAddress(`glGetSeparableFilter`);
  if (glGetSeparableFilter is null) assert(0, `OpenGL function 'glGetSeparableFilter' not found!`);
  glGetSeparableFilter(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glSeparableFilter2D glSeparableFilter2D = function void (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6, const(void)* a7) nothrow @nogc {
  glbfn_glSeparableFilter2D_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glSeparableFilter2D_loader (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6, const(void)* a7) nothrow @nogc {
  glSeparableFilter2D = cast(glbfn_glSeparableFilter2D)glbindGetProcAddress(`glSeparableFilter2D`);
  if (glSeparableFilter2D is null) assert(0, `OpenGL function 'glSeparableFilter2D' not found!`);
  glSeparableFilter2D(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetHistogram glGetHistogram = function void (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glbfn_glGetHistogram_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetHistogram_loader (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glGetHistogram = cast(glbfn_glGetHistogram)glbindGetProcAddress(`glGetHistogram`);
  if (glGetHistogram is null) assert(0, `OpenGL function 'glGetHistogram' not found!`);
  glGetHistogram(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetHistogramParameterfv glGetHistogramParameterfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetHistogramParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetHistogramParameterfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetHistogramParameterfv = cast(glbfn_glGetHistogramParameterfv)glbindGetProcAddress(`glGetHistogramParameterfv`);
  if (glGetHistogramParameterfv is null) assert(0, `OpenGL function 'glGetHistogramParameterfv' not found!`);
  glGetHistogramParameterfv(a0,a1,a2,);
}
__gshared glbfn_glGetHistogramParameteriv glGetHistogramParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetHistogramParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetHistogramParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetHistogramParameteriv = cast(glbfn_glGetHistogramParameteriv)glbindGetProcAddress(`glGetHistogramParameteriv`);
  if (glGetHistogramParameteriv is null) assert(0, `OpenGL function 'glGetHistogramParameteriv' not found!`);
  glGetHistogramParameteriv(a0,a1,a2,);
}
__gshared glbfn_glGetMinmax glGetMinmax = function void (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glbfn_glGetMinmax_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetMinmax_loader (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glGetMinmax = cast(glbfn_glGetMinmax)glbindGetProcAddress(`glGetMinmax`);
  if (glGetMinmax is null) assert(0, `OpenGL function 'glGetMinmax' not found!`);
  glGetMinmax(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetMinmaxParameterfv glGetMinmaxParameterfv = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetMinmaxParameterfv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMinmaxParameterfv_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetMinmaxParameterfv = cast(glbfn_glGetMinmaxParameterfv)glbindGetProcAddress(`glGetMinmaxParameterfv`);
  if (glGetMinmaxParameterfv is null) assert(0, `OpenGL function 'glGetMinmaxParameterfv' not found!`);
  glGetMinmaxParameterfv(a0,a1,a2,);
}
__gshared glbfn_glGetMinmaxParameteriv glGetMinmaxParameteriv = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetMinmaxParameteriv_loader(a0,a1,a2,);
};
private auto glbfn_glGetMinmaxParameteriv_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetMinmaxParameteriv = cast(glbfn_glGetMinmaxParameteriv)glbindGetProcAddress(`glGetMinmaxParameteriv`);
  if (glGetMinmaxParameteriv is null) assert(0, `OpenGL function 'glGetMinmaxParameteriv' not found!`);
  glGetMinmaxParameteriv(a0,a1,a2,);
}
__gshared glbfn_glHistogram glHistogram = function void (uint a0, int a1, uint a2, ubyte a3) nothrow @nogc {
  glbfn_glHistogram_loader(a0,a1,a2,a3,);
};
private auto glbfn_glHistogram_loader (uint a0, int a1, uint a2, ubyte a3) nothrow @nogc {
  glHistogram = cast(glbfn_glHistogram)glbindGetProcAddress(`glHistogram`);
  if (glHistogram is null) assert(0, `OpenGL function 'glHistogram' not found!`);
  glHistogram(a0,a1,a2,a3,);
}
__gshared glbfn_glMinmax glMinmax = function void (uint a0, uint a1, ubyte a2) nothrow @nogc {
  glbfn_glMinmax_loader(a0,a1,a2,);
};
private auto glbfn_glMinmax_loader (uint a0, uint a1, ubyte a2) nothrow @nogc {
  glMinmax = cast(glbfn_glMinmax)glbindGetProcAddress(`glMinmax`);
  if (glMinmax is null) assert(0, `OpenGL function 'glMinmax' not found!`);
  glMinmax(a0,a1,a2,);
}
__gshared glbfn_glResetHistogram glResetHistogram = function void (uint a0) nothrow @nogc {
  glbfn_glResetHistogram_loader(a0,);
};
private auto glbfn_glResetHistogram_loader (uint a0) nothrow @nogc {
  glResetHistogram = cast(glbfn_glResetHistogram)glbindGetProcAddress(`glResetHistogram`);
  if (glResetHistogram is null) assert(0, `OpenGL function 'glResetHistogram' not found!`);
  glResetHistogram(a0,);
}
__gshared glbfn_glResetMinmax glResetMinmax = function void (uint a0) nothrow @nogc {
  glbfn_glResetMinmax_loader(a0,);
};
private auto glbfn_glResetMinmax_loader (uint a0) nothrow @nogc {
  glResetMinmax = cast(glbfn_glResetMinmax)glbindGetProcAddress(`glResetMinmax`);
  if (glResetMinmax is null) assert(0, `OpenGL function 'glResetMinmax' not found!`);
  glResetMinmax(a0,);
}
static if (size_t.sizeof == 4) {
__gshared glbfn_glMultiDrawArraysIndirectCountARB glMultiDrawArraysIndirectCountARB = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiDrawArraysIndirectCountARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiDrawArraysIndirectCountARB_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glMultiDrawArraysIndirectCountARB = cast(glbfn_glMultiDrawArraysIndirectCountARB)glbindGetProcAddress(`glMultiDrawArraysIndirectCountARB`);
  if (glMultiDrawArraysIndirectCountARB is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectCountARB' not found!`);
  glMultiDrawArraysIndirectCountARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiDrawElementsIndirectCountARB glMultiDrawElementsIndirectCountARB = function void (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glMultiDrawElementsIndirectCountARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMultiDrawElementsIndirectCountARB_loader (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glMultiDrawElementsIndirectCountARB = cast(glbfn_glMultiDrawElementsIndirectCountARB)glbindGetProcAddress(`glMultiDrawElementsIndirectCountARB`);
  if (glMultiDrawElementsIndirectCountARB is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectCountARB' not found!`);
  glMultiDrawElementsIndirectCountARB(a0,a1,a2,a3,a4,a5,);
}
}
__gshared glbfn_glVertexAttribDivisorARB glVertexAttribDivisorARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexAttribDivisorARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttribDivisorARB_loader (uint a0, uint a1) nothrow @nogc {
  glVertexAttribDivisorARB = cast(glbfn_glVertexAttribDivisorARB)glbindGetProcAddress(`glVertexAttribDivisorARB`);
  if (glVertexAttribDivisorARB is null) assert(0, `OpenGL function 'glVertexAttribDivisorARB' not found!`);
  glVertexAttribDivisorARB(a0,a1,);
}
__gshared glbfn_glCurrentPaletteMatrixARB glCurrentPaletteMatrixARB = function void (int a0) nothrow @nogc {
  glbfn_glCurrentPaletteMatrixARB_loader(a0,);
};
private auto glbfn_glCurrentPaletteMatrixARB_loader (int a0) nothrow @nogc {
  glCurrentPaletteMatrixARB = cast(glbfn_glCurrentPaletteMatrixARB)glbindGetProcAddress(`glCurrentPaletteMatrixARB`);
  if (glCurrentPaletteMatrixARB is null) assert(0, `OpenGL function 'glCurrentPaletteMatrixARB' not found!`);
  glCurrentPaletteMatrixARB(a0,);
}
__gshared glbfn_glMatrixIndexubvARB glMatrixIndexubvARB = function void (int a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glMatrixIndexubvARB_loader(a0,a1,);
};
private auto glbfn_glMatrixIndexubvARB_loader (int a0, const(ubyte)* a1) nothrow @nogc {
  glMatrixIndexubvARB = cast(glbfn_glMatrixIndexubvARB)glbindGetProcAddress(`glMatrixIndexubvARB`);
  if (glMatrixIndexubvARB is null) assert(0, `OpenGL function 'glMatrixIndexubvARB' not found!`);
  glMatrixIndexubvARB(a0,a1,);
}
__gshared glbfn_glMatrixIndexusvARB glMatrixIndexusvARB = function void (int a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glMatrixIndexusvARB_loader(a0,a1,);
};
private auto glbfn_glMatrixIndexusvARB_loader (int a0, const(ushort)* a1) nothrow @nogc {
  glMatrixIndexusvARB = cast(glbfn_glMatrixIndexusvARB)glbindGetProcAddress(`glMatrixIndexusvARB`);
  if (glMatrixIndexusvARB is null) assert(0, `OpenGL function 'glMatrixIndexusvARB' not found!`);
  glMatrixIndexusvARB(a0,a1,);
}
__gshared glbfn_glMatrixIndexuivARB glMatrixIndexuivARB = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glMatrixIndexuivARB_loader(a0,a1,);
};
private auto glbfn_glMatrixIndexuivARB_loader (int a0, const(uint)* a1) nothrow @nogc {
  glMatrixIndexuivARB = cast(glbfn_glMatrixIndexuivARB)glbindGetProcAddress(`glMatrixIndexuivARB`);
  if (glMatrixIndexuivARB is null) assert(0, `OpenGL function 'glMatrixIndexuivARB' not found!`);
  glMatrixIndexuivARB(a0,a1,);
}
__gshared glbfn_glMatrixIndexPointerARB glMatrixIndexPointerARB = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glMatrixIndexPointerARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMatrixIndexPointerARB_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glMatrixIndexPointerARB = cast(glbfn_glMatrixIndexPointerARB)glbindGetProcAddress(`glMatrixIndexPointerARB`);
  if (glMatrixIndexPointerARB is null) assert(0, `OpenGL function 'glMatrixIndexPointerARB' not found!`);
  glMatrixIndexPointerARB(a0,a1,a2,a3,);
}
__gshared glbfn_glSampleCoverageARB glSampleCoverageARB = function void (float a0, ubyte a1) nothrow @nogc {
  glbfn_glSampleCoverageARB_loader(a0,a1,);
};
private auto glbfn_glSampleCoverageARB_loader (float a0, ubyte a1) nothrow @nogc {
  glSampleCoverageARB = cast(glbfn_glSampleCoverageARB)glbindGetProcAddress(`glSampleCoverageARB`);
  if (glSampleCoverageARB is null) assert(0, `OpenGL function 'glSampleCoverageARB' not found!`);
  glSampleCoverageARB(a0,a1,);
}
__gshared glbfn_glActiveTextureARB glActiveTextureARB = function void (uint a0) nothrow @nogc {
  glbfn_glActiveTextureARB_loader(a0,);
};
private auto glbfn_glActiveTextureARB_loader (uint a0) nothrow @nogc {
  glActiveTextureARB = cast(glbfn_glActiveTextureARB)glbindGetProcAddress(`glActiveTextureARB`);
  if (glActiveTextureARB is null) assert(0, `OpenGL function 'glActiveTextureARB' not found!`);
  glActiveTextureARB(a0,);
}
__gshared glbfn_glClientActiveTextureARB glClientActiveTextureARB = function void (uint a0) nothrow @nogc {
  glbfn_glClientActiveTextureARB_loader(a0,);
};
private auto glbfn_glClientActiveTextureARB_loader (uint a0) nothrow @nogc {
  glClientActiveTextureARB = cast(glbfn_glClientActiveTextureARB)glbindGetProcAddress(`glClientActiveTextureARB`);
  if (glClientActiveTextureARB is null) assert(0, `OpenGL function 'glClientActiveTextureARB' not found!`);
  glClientActiveTextureARB(a0,);
}
__gshared glbfn_glMultiTexCoord1dARB glMultiTexCoord1dARB = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glMultiTexCoord1dARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1dARB_loader (uint a0, double a1) nothrow @nogc {
  glMultiTexCoord1dARB = cast(glbfn_glMultiTexCoord1dARB)glbindGetProcAddress(`glMultiTexCoord1dARB`);
  if (glMultiTexCoord1dARB is null) assert(0, `OpenGL function 'glMultiTexCoord1dARB' not found!`);
  glMultiTexCoord1dARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1dvARB glMultiTexCoord1dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1dvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord1dvARB = cast(glbfn_glMultiTexCoord1dvARB)glbindGetProcAddress(`glMultiTexCoord1dvARB`);
  if (glMultiTexCoord1dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord1dvARB' not found!`);
  glMultiTexCoord1dvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1fARB glMultiTexCoord1fARB = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glMultiTexCoord1fARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1fARB_loader (uint a0, float a1) nothrow @nogc {
  glMultiTexCoord1fARB = cast(glbfn_glMultiTexCoord1fARB)glbindGetProcAddress(`glMultiTexCoord1fARB`);
  if (glMultiTexCoord1fARB is null) assert(0, `OpenGL function 'glMultiTexCoord1fARB' not found!`);
  glMultiTexCoord1fARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1fvARB glMultiTexCoord1fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1fvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord1fvARB = cast(glbfn_glMultiTexCoord1fvARB)glbindGetProcAddress(`glMultiTexCoord1fvARB`);
  if (glMultiTexCoord1fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord1fvARB' not found!`);
  glMultiTexCoord1fvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1iARB glMultiTexCoord1iARB = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glMultiTexCoord1iARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1iARB_loader (uint a0, int a1) nothrow @nogc {
  glMultiTexCoord1iARB = cast(glbfn_glMultiTexCoord1iARB)glbindGetProcAddress(`glMultiTexCoord1iARB`);
  if (glMultiTexCoord1iARB is null) assert(0, `OpenGL function 'glMultiTexCoord1iARB' not found!`);
  glMultiTexCoord1iARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1ivARB glMultiTexCoord1ivARB = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1ivARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1ivARB_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord1ivARB = cast(glbfn_glMultiTexCoord1ivARB)glbindGetProcAddress(`glMultiTexCoord1ivARB`);
  if (glMultiTexCoord1ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord1ivARB' not found!`);
  glMultiTexCoord1ivARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1sARB glMultiTexCoord1sARB = function void (uint a0, short a1) nothrow @nogc {
  glbfn_glMultiTexCoord1sARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1sARB_loader (uint a0, short a1) nothrow @nogc {
  glMultiTexCoord1sARB = cast(glbfn_glMultiTexCoord1sARB)glbindGetProcAddress(`glMultiTexCoord1sARB`);
  if (glMultiTexCoord1sARB is null) assert(0, `OpenGL function 'glMultiTexCoord1sARB' not found!`);
  glMultiTexCoord1sARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1svARB glMultiTexCoord1svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1svARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord1svARB = cast(glbfn_glMultiTexCoord1svARB)glbindGetProcAddress(`glMultiTexCoord1svARB`);
  if (glMultiTexCoord1svARB is null) assert(0, `OpenGL function 'glMultiTexCoord1svARB' not found!`);
  glMultiTexCoord1svARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2dARB glMultiTexCoord2dARB = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glMultiTexCoord2dARB_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2dARB_loader (uint a0, double a1, double a2) nothrow @nogc {
  glMultiTexCoord2dARB = cast(glbfn_glMultiTexCoord2dARB)glbindGetProcAddress(`glMultiTexCoord2dARB`);
  if (glMultiTexCoord2dARB is null) assert(0, `OpenGL function 'glMultiTexCoord2dARB' not found!`);
  glMultiTexCoord2dARB(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2dvARB glMultiTexCoord2dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2dvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord2dvARB = cast(glbfn_glMultiTexCoord2dvARB)glbindGetProcAddress(`glMultiTexCoord2dvARB`);
  if (glMultiTexCoord2dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord2dvARB' not found!`);
  glMultiTexCoord2dvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2fARB glMultiTexCoord2fARB = function void (uint a0, float a1, float a2) nothrow @nogc {
  glbfn_glMultiTexCoord2fARB_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2fARB_loader (uint a0, float a1, float a2) nothrow @nogc {
  glMultiTexCoord2fARB = cast(glbfn_glMultiTexCoord2fARB)glbindGetProcAddress(`glMultiTexCoord2fARB`);
  if (glMultiTexCoord2fARB is null) assert(0, `OpenGL function 'glMultiTexCoord2fARB' not found!`);
  glMultiTexCoord2fARB(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2fvARB glMultiTexCoord2fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2fvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord2fvARB = cast(glbfn_glMultiTexCoord2fvARB)glbindGetProcAddress(`glMultiTexCoord2fvARB`);
  if (glMultiTexCoord2fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord2fvARB' not found!`);
  glMultiTexCoord2fvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2iARB glMultiTexCoord2iARB = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glMultiTexCoord2iARB_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2iARB_loader (uint a0, int a1, int a2) nothrow @nogc {
  glMultiTexCoord2iARB = cast(glbfn_glMultiTexCoord2iARB)glbindGetProcAddress(`glMultiTexCoord2iARB`);
  if (glMultiTexCoord2iARB is null) assert(0, `OpenGL function 'glMultiTexCoord2iARB' not found!`);
  glMultiTexCoord2iARB(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2ivARB glMultiTexCoord2ivARB = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2ivARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2ivARB_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord2ivARB = cast(glbfn_glMultiTexCoord2ivARB)glbindGetProcAddress(`glMultiTexCoord2ivARB`);
  if (glMultiTexCoord2ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord2ivARB' not found!`);
  glMultiTexCoord2ivARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2sARB glMultiTexCoord2sARB = function void (uint a0, short a1, short a2) nothrow @nogc {
  glbfn_glMultiTexCoord2sARB_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2sARB_loader (uint a0, short a1, short a2) nothrow @nogc {
  glMultiTexCoord2sARB = cast(glbfn_glMultiTexCoord2sARB)glbindGetProcAddress(`glMultiTexCoord2sARB`);
  if (glMultiTexCoord2sARB is null) assert(0, `OpenGL function 'glMultiTexCoord2sARB' not found!`);
  glMultiTexCoord2sARB(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2svARB glMultiTexCoord2svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2svARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord2svARB = cast(glbfn_glMultiTexCoord2svARB)glbindGetProcAddress(`glMultiTexCoord2svARB`);
  if (glMultiTexCoord2svARB is null) assert(0, `OpenGL function 'glMultiTexCoord2svARB' not found!`);
  glMultiTexCoord2svARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3dARB glMultiTexCoord3dARB = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glMultiTexCoord3dARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3dARB_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glMultiTexCoord3dARB = cast(glbfn_glMultiTexCoord3dARB)glbindGetProcAddress(`glMultiTexCoord3dARB`);
  if (glMultiTexCoord3dARB is null) assert(0, `OpenGL function 'glMultiTexCoord3dARB' not found!`);
  glMultiTexCoord3dARB(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3dvARB glMultiTexCoord3dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3dvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord3dvARB = cast(glbfn_glMultiTexCoord3dvARB)glbindGetProcAddress(`glMultiTexCoord3dvARB`);
  if (glMultiTexCoord3dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord3dvARB' not found!`);
  glMultiTexCoord3dvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3fARB glMultiTexCoord3fARB = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glMultiTexCoord3fARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3fARB_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glMultiTexCoord3fARB = cast(glbfn_glMultiTexCoord3fARB)glbindGetProcAddress(`glMultiTexCoord3fARB`);
  if (glMultiTexCoord3fARB is null) assert(0, `OpenGL function 'glMultiTexCoord3fARB' not found!`);
  glMultiTexCoord3fARB(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3fvARB glMultiTexCoord3fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3fvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord3fvARB = cast(glbfn_glMultiTexCoord3fvARB)glbindGetProcAddress(`glMultiTexCoord3fvARB`);
  if (glMultiTexCoord3fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord3fvARB' not found!`);
  glMultiTexCoord3fvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3iARB glMultiTexCoord3iARB = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glMultiTexCoord3iARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3iARB_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glMultiTexCoord3iARB = cast(glbfn_glMultiTexCoord3iARB)glbindGetProcAddress(`glMultiTexCoord3iARB`);
  if (glMultiTexCoord3iARB is null) assert(0, `OpenGL function 'glMultiTexCoord3iARB' not found!`);
  glMultiTexCoord3iARB(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3ivARB glMultiTexCoord3ivARB = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3ivARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3ivARB_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord3ivARB = cast(glbfn_glMultiTexCoord3ivARB)glbindGetProcAddress(`glMultiTexCoord3ivARB`);
  if (glMultiTexCoord3ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord3ivARB' not found!`);
  glMultiTexCoord3ivARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3sARB glMultiTexCoord3sARB = function void (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glMultiTexCoord3sARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3sARB_loader (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glMultiTexCoord3sARB = cast(glbfn_glMultiTexCoord3sARB)glbindGetProcAddress(`glMultiTexCoord3sARB`);
  if (glMultiTexCoord3sARB is null) assert(0, `OpenGL function 'glMultiTexCoord3sARB' not found!`);
  glMultiTexCoord3sARB(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3svARB glMultiTexCoord3svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3svARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord3svARB = cast(glbfn_glMultiTexCoord3svARB)glbindGetProcAddress(`glMultiTexCoord3svARB`);
  if (glMultiTexCoord3svARB is null) assert(0, `OpenGL function 'glMultiTexCoord3svARB' not found!`);
  glMultiTexCoord3svARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4dARB glMultiTexCoord4dARB = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glMultiTexCoord4dARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4dARB_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glMultiTexCoord4dARB = cast(glbfn_glMultiTexCoord4dARB)glbindGetProcAddress(`glMultiTexCoord4dARB`);
  if (glMultiTexCoord4dARB is null) assert(0, `OpenGL function 'glMultiTexCoord4dARB' not found!`);
  glMultiTexCoord4dARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4dvARB glMultiTexCoord4dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4dvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMultiTexCoord4dvARB = cast(glbfn_glMultiTexCoord4dvARB)glbindGetProcAddress(`glMultiTexCoord4dvARB`);
  if (glMultiTexCoord4dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord4dvARB' not found!`);
  glMultiTexCoord4dvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4fARB glMultiTexCoord4fARB = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glMultiTexCoord4fARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4fARB_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glMultiTexCoord4fARB = cast(glbfn_glMultiTexCoord4fARB)glbindGetProcAddress(`glMultiTexCoord4fARB`);
  if (glMultiTexCoord4fARB is null) assert(0, `OpenGL function 'glMultiTexCoord4fARB' not found!`);
  glMultiTexCoord4fARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4fvARB glMultiTexCoord4fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4fvARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMultiTexCoord4fvARB = cast(glbfn_glMultiTexCoord4fvARB)glbindGetProcAddress(`glMultiTexCoord4fvARB`);
  if (glMultiTexCoord4fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord4fvARB' not found!`);
  glMultiTexCoord4fvARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4iARB glMultiTexCoord4iARB = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiTexCoord4iARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4iARB_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glMultiTexCoord4iARB = cast(glbfn_glMultiTexCoord4iARB)glbindGetProcAddress(`glMultiTexCoord4iARB`);
  if (glMultiTexCoord4iARB is null) assert(0, `OpenGL function 'glMultiTexCoord4iARB' not found!`);
  glMultiTexCoord4iARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4ivARB glMultiTexCoord4ivARB = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4ivARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4ivARB_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord4ivARB = cast(glbfn_glMultiTexCoord4ivARB)glbindGetProcAddress(`glMultiTexCoord4ivARB`);
  if (glMultiTexCoord4ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord4ivARB' not found!`);
  glMultiTexCoord4ivARB(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4sARB glMultiTexCoord4sARB = function void (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glbfn_glMultiTexCoord4sARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4sARB_loader (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glMultiTexCoord4sARB = cast(glbfn_glMultiTexCoord4sARB)glbindGetProcAddress(`glMultiTexCoord4sARB`);
  if (glMultiTexCoord4sARB is null) assert(0, `OpenGL function 'glMultiTexCoord4sARB' not found!`);
  glMultiTexCoord4sARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4svARB glMultiTexCoord4svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4svARB_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glMultiTexCoord4svARB = cast(glbfn_glMultiTexCoord4svARB)glbindGetProcAddress(`glMultiTexCoord4svARB`);
  if (glMultiTexCoord4svARB is null) assert(0, `OpenGL function 'glMultiTexCoord4svARB' not found!`);
  glMultiTexCoord4svARB(a0,a1,);
}
__gshared glbfn_glGenQueriesARB glGenQueriesARB = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenQueriesARB_loader(a0,a1,);
};
private auto glbfn_glGenQueriesARB_loader (int a0, uint* a1) nothrow @nogc {
  glGenQueriesARB = cast(glbfn_glGenQueriesARB)glbindGetProcAddress(`glGenQueriesARB`);
  if (glGenQueriesARB is null) assert(0, `OpenGL function 'glGenQueriesARB' not found!`);
  glGenQueriesARB(a0,a1,);
}
__gshared glbfn_glDeleteQueriesARB glDeleteQueriesARB = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteQueriesARB_loader(a0,a1,);
};
private auto glbfn_glDeleteQueriesARB_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteQueriesARB = cast(glbfn_glDeleteQueriesARB)glbindGetProcAddress(`glDeleteQueriesARB`);
  if (glDeleteQueriesARB is null) assert(0, `OpenGL function 'glDeleteQueriesARB' not found!`);
  glDeleteQueriesARB(a0,a1,);
}
__gshared glbfn_glIsQueryARB glIsQueryARB = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsQueryARB_loader(a0,);
};
private auto glbfn_glIsQueryARB_loader (uint a0) nothrow @nogc {
  glIsQueryARB = cast(glbfn_glIsQueryARB)glbindGetProcAddress(`glIsQueryARB`);
  if (glIsQueryARB is null) assert(0, `OpenGL function 'glIsQueryARB' not found!`);
  return glIsQueryARB(a0,);
}
__gshared glbfn_glBeginQueryARB glBeginQueryARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBeginQueryARB_loader(a0,a1,);
};
private auto glbfn_glBeginQueryARB_loader (uint a0, uint a1) nothrow @nogc {
  glBeginQueryARB = cast(glbfn_glBeginQueryARB)glbindGetProcAddress(`glBeginQueryARB`);
  if (glBeginQueryARB is null) assert(0, `OpenGL function 'glBeginQueryARB' not found!`);
  glBeginQueryARB(a0,a1,);
}
__gshared glbfn_glEndQueryARB glEndQueryARB = function void (uint a0) nothrow @nogc {
  glbfn_glEndQueryARB_loader(a0,);
};
private auto glbfn_glEndQueryARB_loader (uint a0) nothrow @nogc {
  glEndQueryARB = cast(glbfn_glEndQueryARB)glbindGetProcAddress(`glEndQueryARB`);
  if (glEndQueryARB is null) assert(0, `OpenGL function 'glEndQueryARB' not found!`);
  glEndQueryARB(a0,);
}
__gshared glbfn_glGetQueryivARB glGetQueryivARB = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetQueryivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryivARB_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetQueryivARB = cast(glbfn_glGetQueryivARB)glbindGetProcAddress(`glGetQueryivARB`);
  if (glGetQueryivARB is null) assert(0, `OpenGL function 'glGetQueryivARB' not found!`);
  glGetQueryivARB(a0,a1,a2,);
}
__gshared glbfn_glGetQueryObjectivARB glGetQueryObjectivARB = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetQueryObjectivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjectivARB_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetQueryObjectivARB = cast(glbfn_glGetQueryObjectivARB)glbindGetProcAddress(`glGetQueryObjectivARB`);
  if (glGetQueryObjectivARB is null) assert(0, `OpenGL function 'glGetQueryObjectivARB' not found!`);
  glGetQueryObjectivARB(a0,a1,a2,);
}
__gshared glbfn_glGetQueryObjectuivARB glGetQueryObjectuivARB = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetQueryObjectuivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjectuivARB_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetQueryObjectuivARB = cast(glbfn_glGetQueryObjectuivARB)glbindGetProcAddress(`glGetQueryObjectuivARB`);
  if (glGetQueryObjectuivARB is null) assert(0, `OpenGL function 'glGetQueryObjectuivARB' not found!`);
  glGetQueryObjectuivARB(a0,a1,a2,);
}
__gshared glbfn_glMaxShaderCompilerThreadsARB glMaxShaderCompilerThreadsARB = function void (uint a0) nothrow @nogc {
  glbfn_glMaxShaderCompilerThreadsARB_loader(a0,);
};
private auto glbfn_glMaxShaderCompilerThreadsARB_loader (uint a0) nothrow @nogc {
  glMaxShaderCompilerThreadsARB = cast(glbfn_glMaxShaderCompilerThreadsARB)glbindGetProcAddress(`glMaxShaderCompilerThreadsARB`);
  if (glMaxShaderCompilerThreadsARB is null) assert(0, `OpenGL function 'glMaxShaderCompilerThreadsARB' not found!`);
  glMaxShaderCompilerThreadsARB(a0,);
}
__gshared glbfn_glPointParameterfARB glPointParameterfARB = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPointParameterfARB_loader(a0,a1,);
};
private auto glbfn_glPointParameterfARB_loader (uint a0, float a1) nothrow @nogc {
  glPointParameterfARB = cast(glbfn_glPointParameterfARB)glbindGetProcAddress(`glPointParameterfARB`);
  if (glPointParameterfARB is null) assert(0, `OpenGL function 'glPointParameterfARB' not found!`);
  glPointParameterfARB(a0,a1,);
}
__gshared glbfn_glPointParameterfvARB glPointParameterfvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glPointParameterfvARB_loader(a0,a1,);
};
private auto glbfn_glPointParameterfvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glPointParameterfvARB = cast(glbfn_glPointParameterfvARB)glbindGetProcAddress(`glPointParameterfvARB`);
  if (glPointParameterfvARB is null) assert(0, `OpenGL function 'glPointParameterfvARB' not found!`);
  glPointParameterfvARB(a0,a1,);
}
__gshared glbfn_glGetGraphicsResetStatusARB glGetGraphicsResetStatusARB = function uint () nothrow @nogc {
  return glbfn_glGetGraphicsResetStatusARB_loader();
};
private auto glbfn_glGetGraphicsResetStatusARB_loader () nothrow @nogc {
  glGetGraphicsResetStatusARB = cast(glbfn_glGetGraphicsResetStatusARB)glbindGetProcAddress(`glGetGraphicsResetStatusARB`);
  if (glGetGraphicsResetStatusARB is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusARB' not found!`);
  return glGetGraphicsResetStatusARB();
}
__gshared glbfn_glGetnTexImageARB glGetnTexImageARB = function void (uint a0, int a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glbfn_glGetnTexImageARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetnTexImageARB_loader (uint a0, int a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glGetnTexImageARB = cast(glbfn_glGetnTexImageARB)glbindGetProcAddress(`glGetnTexImageARB`);
  if (glGetnTexImageARB is null) assert(0, `OpenGL function 'glGetnTexImageARB' not found!`);
  glGetnTexImageARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glReadnPixelsARB glReadnPixelsARB = function void (int a0, int a1, int a2, int a3, uint a4, uint a5, int a6, void* a7) nothrow @nogc {
  glbfn_glReadnPixelsARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glReadnPixelsARB_loader (int a0, int a1, int a2, int a3, uint a4, uint a5, int a6, void* a7) nothrow @nogc {
  glReadnPixelsARB = cast(glbfn_glReadnPixelsARB)glbindGetProcAddress(`glReadnPixelsARB`);
  if (glReadnPixelsARB is null) assert(0, `OpenGL function 'glReadnPixelsARB' not found!`);
  glReadnPixelsARB(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetnCompressedTexImageARB glGetnCompressedTexImageARB = function void (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetnCompressedTexImageARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnCompressedTexImageARB_loader (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glGetnCompressedTexImageARB = cast(glbfn_glGetnCompressedTexImageARB)glbindGetProcAddress(`glGetnCompressedTexImageARB`);
  if (glGetnCompressedTexImageARB is null) assert(0, `OpenGL function 'glGetnCompressedTexImageARB' not found!`);
  glGetnCompressedTexImageARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformfvARB glGetnUniformfvARB = function void (uint a0, int a1, int a2, float* a3) nothrow @nogc {
  glbfn_glGetnUniformfvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformfvARB_loader (uint a0, int a1, int a2, float* a3) nothrow @nogc {
  glGetnUniformfvARB = cast(glbfn_glGetnUniformfvARB)glbindGetProcAddress(`glGetnUniformfvARB`);
  if (glGetnUniformfvARB is null) assert(0, `OpenGL function 'glGetnUniformfvARB' not found!`);
  glGetnUniformfvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformivARB glGetnUniformivARB = function void (uint a0, int a1, int a2, int* a3) nothrow @nogc {
  glbfn_glGetnUniformivARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformivARB_loader (uint a0, int a1, int a2, int* a3) nothrow @nogc {
  glGetnUniformivARB = cast(glbfn_glGetnUniformivARB)glbindGetProcAddress(`glGetnUniformivARB`);
  if (glGetnUniformivARB is null) assert(0, `OpenGL function 'glGetnUniformivARB' not found!`);
  glGetnUniformivARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformuivARB glGetnUniformuivARB = function void (uint a0, int a1, int a2, uint* a3) nothrow @nogc {
  glbfn_glGetnUniformuivARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformuivARB_loader (uint a0, int a1, int a2, uint* a3) nothrow @nogc {
  glGetnUniformuivARB = cast(glbfn_glGetnUniformuivARB)glbindGetProcAddress(`glGetnUniformuivARB`);
  if (glGetnUniformuivARB is null) assert(0, `OpenGL function 'glGetnUniformuivARB' not found!`);
  glGetnUniformuivARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformdvARB glGetnUniformdvARB = function void (uint a0, int a1, int a2, double* a3) nothrow @nogc {
  glbfn_glGetnUniformdvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformdvARB_loader (uint a0, int a1, int a2, double* a3) nothrow @nogc {
  glGetnUniformdvARB = cast(glbfn_glGetnUniformdvARB)glbindGetProcAddress(`glGetnUniformdvARB`);
  if (glGetnUniformdvARB is null) assert(0, `OpenGL function 'glGetnUniformdvARB' not found!`);
  glGetnUniformdvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnMapdvARB glGetnMapdvARB = function void (uint a0, uint a1, int a2, double* a3) nothrow @nogc {
  glbfn_glGetnMapdvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnMapdvARB_loader (uint a0, uint a1, int a2, double* a3) nothrow @nogc {
  glGetnMapdvARB = cast(glbfn_glGetnMapdvARB)glbindGetProcAddress(`glGetnMapdvARB`);
  if (glGetnMapdvARB is null) assert(0, `OpenGL function 'glGetnMapdvARB' not found!`);
  glGetnMapdvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnMapfvARB glGetnMapfvARB = function void (uint a0, uint a1, int a2, float* a3) nothrow @nogc {
  glbfn_glGetnMapfvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnMapfvARB_loader (uint a0, uint a1, int a2, float* a3) nothrow @nogc {
  glGetnMapfvARB = cast(glbfn_glGetnMapfvARB)glbindGetProcAddress(`glGetnMapfvARB`);
  if (glGetnMapfvARB is null) assert(0, `OpenGL function 'glGetnMapfvARB' not found!`);
  glGetnMapfvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnMapivARB glGetnMapivARB = function void (uint a0, uint a1, int a2, int* a3) nothrow @nogc {
  glbfn_glGetnMapivARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnMapivARB_loader (uint a0, uint a1, int a2, int* a3) nothrow @nogc {
  glGetnMapivARB = cast(glbfn_glGetnMapivARB)glbindGetProcAddress(`glGetnMapivARB`);
  if (glGetnMapivARB is null) assert(0, `OpenGL function 'glGetnMapivARB' not found!`);
  glGetnMapivARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnPixelMapfvARB glGetnPixelMapfvARB = function void (uint a0, int a1, float* a2) nothrow @nogc {
  glbfn_glGetnPixelMapfvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetnPixelMapfvARB_loader (uint a0, int a1, float* a2) nothrow @nogc {
  glGetnPixelMapfvARB = cast(glbfn_glGetnPixelMapfvARB)glbindGetProcAddress(`glGetnPixelMapfvARB`);
  if (glGetnPixelMapfvARB is null) assert(0, `OpenGL function 'glGetnPixelMapfvARB' not found!`);
  glGetnPixelMapfvARB(a0,a1,a2,);
}
__gshared glbfn_glGetnPixelMapuivARB glGetnPixelMapuivARB = function void (uint a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glGetnPixelMapuivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetnPixelMapuivARB_loader (uint a0, int a1, uint* a2) nothrow @nogc {
  glGetnPixelMapuivARB = cast(glbfn_glGetnPixelMapuivARB)glbindGetProcAddress(`glGetnPixelMapuivARB`);
  if (glGetnPixelMapuivARB is null) assert(0, `OpenGL function 'glGetnPixelMapuivARB' not found!`);
  glGetnPixelMapuivARB(a0,a1,a2,);
}
__gshared glbfn_glGetnPixelMapusvARB glGetnPixelMapusvARB = function void (uint a0, int a1, ushort* a2) nothrow @nogc {
  glbfn_glGetnPixelMapusvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetnPixelMapusvARB_loader (uint a0, int a1, ushort* a2) nothrow @nogc {
  glGetnPixelMapusvARB = cast(glbfn_glGetnPixelMapusvARB)glbindGetProcAddress(`glGetnPixelMapusvARB`);
  if (glGetnPixelMapusvARB is null) assert(0, `OpenGL function 'glGetnPixelMapusvARB' not found!`);
  glGetnPixelMapusvARB(a0,a1,a2,);
}
__gshared glbfn_glGetnPolygonStippleARB glGetnPolygonStippleARB = function void (int a0, ubyte* a1) nothrow @nogc {
  glbfn_glGetnPolygonStippleARB_loader(a0,a1,);
};
private auto glbfn_glGetnPolygonStippleARB_loader (int a0, ubyte* a1) nothrow @nogc {
  glGetnPolygonStippleARB = cast(glbfn_glGetnPolygonStippleARB)glbindGetProcAddress(`glGetnPolygonStippleARB`);
  if (glGetnPolygonStippleARB is null) assert(0, `OpenGL function 'glGetnPolygonStippleARB' not found!`);
  glGetnPolygonStippleARB(a0,a1,);
}
__gshared glbfn_glGetnColorTableARB glGetnColorTableARB = function void (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glbfn_glGetnColorTableARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetnColorTableARB_loader (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glGetnColorTableARB = cast(glbfn_glGetnColorTableARB)glbindGetProcAddress(`glGetnColorTableARB`);
  if (glGetnColorTableARB is null) assert(0, `OpenGL function 'glGetnColorTableARB' not found!`);
  glGetnColorTableARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetnConvolutionFilterARB glGetnConvolutionFilterARB = function void (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glbfn_glGetnConvolutionFilterARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetnConvolutionFilterARB_loader (uint a0, uint a1, uint a2, int a3, void* a4) nothrow @nogc {
  glGetnConvolutionFilterARB = cast(glbfn_glGetnConvolutionFilterARB)glbindGetProcAddress(`glGetnConvolutionFilterARB`);
  if (glGetnConvolutionFilterARB is null) assert(0, `OpenGL function 'glGetnConvolutionFilterARB' not found!`);
  glGetnConvolutionFilterARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetnSeparableFilterARB glGetnSeparableFilterARB = function void (uint a0, uint a1, uint a2, int a3, void* a4, int a5, void* a6, void* a7) nothrow @nogc {
  glbfn_glGetnSeparableFilterARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glGetnSeparableFilterARB_loader (uint a0, uint a1, uint a2, int a3, void* a4, int a5, void* a6, void* a7) nothrow @nogc {
  glGetnSeparableFilterARB = cast(glbfn_glGetnSeparableFilterARB)glbindGetProcAddress(`glGetnSeparableFilterARB`);
  if (glGetnSeparableFilterARB is null) assert(0, `OpenGL function 'glGetnSeparableFilterARB' not found!`);
  glGetnSeparableFilterARB(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetnHistogramARB glGetnHistogramARB = function void (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glbfn_glGetnHistogramARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetnHistogramARB_loader (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glGetnHistogramARB = cast(glbfn_glGetnHistogramARB)glbindGetProcAddress(`glGetnHistogramARB`);
  if (glGetnHistogramARB is null) assert(0, `OpenGL function 'glGetnHistogramARB' not found!`);
  glGetnHistogramARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetnMinmaxARB glGetnMinmaxARB = function void (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glbfn_glGetnMinmaxARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetnMinmaxARB_loader (uint a0, ubyte a1, uint a2, uint a3, int a4, void* a5) nothrow @nogc {
  glGetnMinmaxARB = cast(glbfn_glGetnMinmaxARB)glbindGetProcAddress(`glGetnMinmaxARB`);
  if (glGetnMinmaxARB is null) assert(0, `OpenGL function 'glGetnMinmaxARB' not found!`);
  glGetnMinmaxARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glFramebufferSampleLocationsfvARB glFramebufferSampleLocationsfvARB = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glFramebufferSampleLocationsfvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFramebufferSampleLocationsfvARB_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glFramebufferSampleLocationsfvARB = cast(glbfn_glFramebufferSampleLocationsfvARB)glbindGetProcAddress(`glFramebufferSampleLocationsfvARB`);
  if (glFramebufferSampleLocationsfvARB is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvARB' not found!`);
  glFramebufferSampleLocationsfvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedFramebufferSampleLocationsfvARB glNamedFramebufferSampleLocationsfvARB = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glNamedFramebufferSampleLocationsfvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedFramebufferSampleLocationsfvARB_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glNamedFramebufferSampleLocationsfvARB = cast(glbfn_glNamedFramebufferSampleLocationsfvARB)glbindGetProcAddress(`glNamedFramebufferSampleLocationsfvARB`);
  if (glNamedFramebufferSampleLocationsfvARB is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvARB' not found!`);
  glNamedFramebufferSampleLocationsfvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glEvaluateDepthValuesARB glEvaluateDepthValuesARB = function void () nothrow @nogc {
  glbfn_glEvaluateDepthValuesARB_loader();
};
private auto glbfn_glEvaluateDepthValuesARB_loader () nothrow @nogc {
  glEvaluateDepthValuesARB = cast(glbfn_glEvaluateDepthValuesARB)glbindGetProcAddress(`glEvaluateDepthValuesARB`);
  if (glEvaluateDepthValuesARB is null) assert(0, `OpenGL function 'glEvaluateDepthValuesARB' not found!`);
  glEvaluateDepthValuesARB();
}
__gshared glbfn_glMinSampleShadingARB glMinSampleShadingARB = function void (float a0) nothrow @nogc {
  glbfn_glMinSampleShadingARB_loader(a0,);
};
private auto glbfn_glMinSampleShadingARB_loader (float a0) nothrow @nogc {
  glMinSampleShadingARB = cast(glbfn_glMinSampleShadingARB)glbindGetProcAddress(`glMinSampleShadingARB`);
  if (glMinSampleShadingARB is null) assert(0, `OpenGL function 'glMinSampleShadingARB' not found!`);
  glMinSampleShadingARB(a0,);
}
__gshared glbfn_glDeleteObjectARB glDeleteObjectARB = function void (uint a0) nothrow @nogc {
  glbfn_glDeleteObjectARB_loader(a0,);
};
private auto glbfn_glDeleteObjectARB_loader (uint a0) nothrow @nogc {
  glDeleteObjectARB = cast(glbfn_glDeleteObjectARB)glbindGetProcAddress(`glDeleteObjectARB`);
  if (glDeleteObjectARB is null) assert(0, `OpenGL function 'glDeleteObjectARB' not found!`);
  glDeleteObjectARB(a0,);
}
__gshared glbfn_glGetHandleARB glGetHandleARB = function uint (uint a0) nothrow @nogc {
  return glbfn_glGetHandleARB_loader(a0,);
};
private auto glbfn_glGetHandleARB_loader (uint a0) nothrow @nogc {
  glGetHandleARB = cast(glbfn_glGetHandleARB)glbindGetProcAddress(`glGetHandleARB`);
  if (glGetHandleARB is null) assert(0, `OpenGL function 'glGetHandleARB' not found!`);
  return glGetHandleARB(a0,);
}
__gshared glbfn_glDetachObjectARB glDetachObjectARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDetachObjectARB_loader(a0,a1,);
};
private auto glbfn_glDetachObjectARB_loader (uint a0, uint a1) nothrow @nogc {
  glDetachObjectARB = cast(glbfn_glDetachObjectARB)glbindGetProcAddress(`glDetachObjectARB`);
  if (glDetachObjectARB is null) assert(0, `OpenGL function 'glDetachObjectARB' not found!`);
  glDetachObjectARB(a0,a1,);
}
__gshared glbfn_glCreateShaderObjectARB glCreateShaderObjectARB = function uint (uint a0) nothrow @nogc {
  return glbfn_glCreateShaderObjectARB_loader(a0,);
};
private auto glbfn_glCreateShaderObjectARB_loader (uint a0) nothrow @nogc {
  glCreateShaderObjectARB = cast(glbfn_glCreateShaderObjectARB)glbindGetProcAddress(`glCreateShaderObjectARB`);
  if (glCreateShaderObjectARB is null) assert(0, `OpenGL function 'glCreateShaderObjectARB' not found!`);
  return glCreateShaderObjectARB(a0,);
}
__gshared glbfn_glShaderSourceARB glShaderSourceARB = function void (uint a0, int a1, const(byte*)* a2, const(int)* a3) nothrow @nogc {
  glbfn_glShaderSourceARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glShaderSourceARB_loader (uint a0, int a1, const(byte*)* a2, const(int)* a3) nothrow @nogc {
  glShaderSourceARB = cast(glbfn_glShaderSourceARB)glbindGetProcAddress(`glShaderSourceARB`);
  if (glShaderSourceARB is null) assert(0, `OpenGL function 'glShaderSourceARB' not found!`);
  glShaderSourceARB(a0,a1,a2,a3,);
}
__gshared glbfn_glCompileShaderARB glCompileShaderARB = function void (uint a0) nothrow @nogc {
  glbfn_glCompileShaderARB_loader(a0,);
};
private auto glbfn_glCompileShaderARB_loader (uint a0) nothrow @nogc {
  glCompileShaderARB = cast(glbfn_glCompileShaderARB)glbindGetProcAddress(`glCompileShaderARB`);
  if (glCompileShaderARB is null) assert(0, `OpenGL function 'glCompileShaderARB' not found!`);
  glCompileShaderARB(a0,);
}
__gshared glbfn_glCreateProgramObjectARB glCreateProgramObjectARB = function uint () nothrow @nogc {
  return glbfn_glCreateProgramObjectARB_loader();
};
private auto glbfn_glCreateProgramObjectARB_loader () nothrow @nogc {
  glCreateProgramObjectARB = cast(glbfn_glCreateProgramObjectARB)glbindGetProcAddress(`glCreateProgramObjectARB`);
  if (glCreateProgramObjectARB is null) assert(0, `OpenGL function 'glCreateProgramObjectARB' not found!`);
  return glCreateProgramObjectARB();
}
__gshared glbfn_glAttachObjectARB glAttachObjectARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glAttachObjectARB_loader(a0,a1,);
};
private auto glbfn_glAttachObjectARB_loader (uint a0, uint a1) nothrow @nogc {
  glAttachObjectARB = cast(glbfn_glAttachObjectARB)glbindGetProcAddress(`glAttachObjectARB`);
  if (glAttachObjectARB is null) assert(0, `OpenGL function 'glAttachObjectARB' not found!`);
  glAttachObjectARB(a0,a1,);
}
__gshared glbfn_glLinkProgramARB glLinkProgramARB = function void (uint a0) nothrow @nogc {
  glbfn_glLinkProgramARB_loader(a0,);
};
private auto glbfn_glLinkProgramARB_loader (uint a0) nothrow @nogc {
  glLinkProgramARB = cast(glbfn_glLinkProgramARB)glbindGetProcAddress(`glLinkProgramARB`);
  if (glLinkProgramARB is null) assert(0, `OpenGL function 'glLinkProgramARB' not found!`);
  glLinkProgramARB(a0,);
}
__gshared glbfn_glUseProgramObjectARB glUseProgramObjectARB = function void (uint a0) nothrow @nogc {
  glbfn_glUseProgramObjectARB_loader(a0,);
};
private auto glbfn_glUseProgramObjectARB_loader (uint a0) nothrow @nogc {
  glUseProgramObjectARB = cast(glbfn_glUseProgramObjectARB)glbindGetProcAddress(`glUseProgramObjectARB`);
  if (glUseProgramObjectARB is null) assert(0, `OpenGL function 'glUseProgramObjectARB' not found!`);
  glUseProgramObjectARB(a0,);
}
__gshared glbfn_glValidateProgramARB glValidateProgramARB = function void (uint a0) nothrow @nogc {
  glbfn_glValidateProgramARB_loader(a0,);
};
private auto glbfn_glValidateProgramARB_loader (uint a0) nothrow @nogc {
  glValidateProgramARB = cast(glbfn_glValidateProgramARB)glbindGetProcAddress(`glValidateProgramARB`);
  if (glValidateProgramARB is null) assert(0, `OpenGL function 'glValidateProgramARB' not found!`);
  glValidateProgramARB(a0,);
}
__gshared glbfn_glUniform1fARB glUniform1fARB = function void (int a0, float a1) nothrow @nogc {
  glbfn_glUniform1fARB_loader(a0,a1,);
};
private auto glbfn_glUniform1fARB_loader (int a0, float a1) nothrow @nogc {
  glUniform1fARB = cast(glbfn_glUniform1fARB)glbindGetProcAddress(`glUniform1fARB`);
  if (glUniform1fARB is null) assert(0, `OpenGL function 'glUniform1fARB' not found!`);
  glUniform1fARB(a0,a1,);
}
__gshared glbfn_glUniform2fARB glUniform2fARB = function void (int a0, float a1, float a2) nothrow @nogc {
  glbfn_glUniform2fARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2fARB_loader (int a0, float a1, float a2) nothrow @nogc {
  glUniform2fARB = cast(glbfn_glUniform2fARB)glbindGetProcAddress(`glUniform2fARB`);
  if (glUniform2fARB is null) assert(0, `OpenGL function 'glUniform2fARB' not found!`);
  glUniform2fARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3fARB glUniform3fARB = function void (int a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glUniform3fARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3fARB_loader (int a0, float a1, float a2, float a3) nothrow @nogc {
  glUniform3fARB = cast(glbfn_glUniform3fARB)glbindGetProcAddress(`glUniform3fARB`);
  if (glUniform3fARB is null) assert(0, `OpenGL function 'glUniform3fARB' not found!`);
  glUniform3fARB(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4fARB glUniform4fARB = function void (int a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glUniform4fARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4fARB_loader (int a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glUniform4fARB = cast(glbfn_glUniform4fARB)glbindGetProcAddress(`glUniform4fARB`);
  if (glUniform4fARB is null) assert(0, `OpenGL function 'glUniform4fARB' not found!`);
  glUniform4fARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1iARB glUniform1iARB = function void (int a0, int a1) nothrow @nogc {
  glbfn_glUniform1iARB_loader(a0,a1,);
};
private auto glbfn_glUniform1iARB_loader (int a0, int a1) nothrow @nogc {
  glUniform1iARB = cast(glbfn_glUniform1iARB)glbindGetProcAddress(`glUniform1iARB`);
  if (glUniform1iARB is null) assert(0, `OpenGL function 'glUniform1iARB' not found!`);
  glUniform1iARB(a0,a1,);
}
__gshared glbfn_glUniform2iARB glUniform2iARB = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glUniform2iARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2iARB_loader (int a0, int a1, int a2) nothrow @nogc {
  glUniform2iARB = cast(glbfn_glUniform2iARB)glbindGetProcAddress(`glUniform2iARB`);
  if (glUniform2iARB is null) assert(0, `OpenGL function 'glUniform2iARB' not found!`);
  glUniform2iARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3iARB glUniform3iARB = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glUniform3iARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3iARB_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glUniform3iARB = cast(glbfn_glUniform3iARB)glbindGetProcAddress(`glUniform3iARB`);
  if (glUniform3iARB is null) assert(0, `OpenGL function 'glUniform3iARB' not found!`);
  glUniform3iARB(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4iARB glUniform4iARB = function void (int a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glUniform4iARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4iARB_loader (int a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glUniform4iARB = cast(glbfn_glUniform4iARB)glbindGetProcAddress(`glUniform4iARB`);
  if (glUniform4iARB is null) assert(0, `OpenGL function 'glUniform4iARB' not found!`);
  glUniform4iARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1fvARB glUniform1fvARB = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform1fvARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1fvARB_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform1fvARB = cast(glbfn_glUniform1fvARB)glbindGetProcAddress(`glUniform1fvARB`);
  if (glUniform1fvARB is null) assert(0, `OpenGL function 'glUniform1fvARB' not found!`);
  glUniform1fvARB(a0,a1,a2,);
}
__gshared glbfn_glUniform2fvARB glUniform2fvARB = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform2fvARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2fvARB_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform2fvARB = cast(glbfn_glUniform2fvARB)glbindGetProcAddress(`glUniform2fvARB`);
  if (glUniform2fvARB is null) assert(0, `OpenGL function 'glUniform2fvARB' not found!`);
  glUniform2fvARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3fvARB glUniform3fvARB = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform3fvARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3fvARB_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform3fvARB = cast(glbfn_glUniform3fvARB)glbindGetProcAddress(`glUniform3fvARB`);
  if (glUniform3fvARB is null) assert(0, `OpenGL function 'glUniform3fvARB' not found!`);
  glUniform3fvARB(a0,a1,a2,);
}
__gshared glbfn_glUniform4fvARB glUniform4fvARB = function void (int a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glUniform4fvARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4fvARB_loader (int a0, int a1, const(float)* a2) nothrow @nogc {
  glUniform4fvARB = cast(glbfn_glUniform4fvARB)glbindGetProcAddress(`glUniform4fvARB`);
  if (glUniform4fvARB is null) assert(0, `OpenGL function 'glUniform4fvARB' not found!`);
  glUniform4fvARB(a0,a1,a2,);
}
__gshared glbfn_glUniform1ivARB glUniform1ivARB = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform1ivARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1ivARB_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform1ivARB = cast(glbfn_glUniform1ivARB)glbindGetProcAddress(`glUniform1ivARB`);
  if (glUniform1ivARB is null) assert(0, `OpenGL function 'glUniform1ivARB' not found!`);
  glUniform1ivARB(a0,a1,a2,);
}
__gshared glbfn_glUniform2ivARB glUniform2ivARB = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform2ivARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2ivARB_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform2ivARB = cast(glbfn_glUniform2ivARB)glbindGetProcAddress(`glUniform2ivARB`);
  if (glUniform2ivARB is null) assert(0, `OpenGL function 'glUniform2ivARB' not found!`);
  glUniform2ivARB(a0,a1,a2,);
}
__gshared glbfn_glUniform3ivARB glUniform3ivARB = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform3ivARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3ivARB_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform3ivARB = cast(glbfn_glUniform3ivARB)glbindGetProcAddress(`glUniform3ivARB`);
  if (glUniform3ivARB is null) assert(0, `OpenGL function 'glUniform3ivARB' not found!`);
  glUniform3ivARB(a0,a1,a2,);
}
__gshared glbfn_glUniform4ivARB glUniform4ivARB = function void (int a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glUniform4ivARB_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4ivARB_loader (int a0, int a1, const(int)* a2) nothrow @nogc {
  glUniform4ivARB = cast(glbfn_glUniform4ivARB)glbindGetProcAddress(`glUniform4ivARB`);
  if (glUniform4ivARB is null) assert(0, `OpenGL function 'glUniform4ivARB' not found!`);
  glUniform4ivARB(a0,a1,a2,);
}
__gshared glbfn_glUniformMatrix2fvARB glUniformMatrix2fvARB = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix2fvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix2fvARB_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix2fvARB = cast(glbfn_glUniformMatrix2fvARB)glbindGetProcAddress(`glUniformMatrix2fvARB`);
  if (glUniformMatrix2fvARB is null) assert(0, `OpenGL function 'glUniformMatrix2fvARB' not found!`);
  glUniformMatrix2fvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix3fvARB glUniformMatrix3fvARB = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix3fvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix3fvARB_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix3fvARB = cast(glbfn_glUniformMatrix3fvARB)glbindGetProcAddress(`glUniformMatrix3fvARB`);
  if (glUniformMatrix3fvARB is null) assert(0, `OpenGL function 'glUniformMatrix3fvARB' not found!`);
  glUniformMatrix3fvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glUniformMatrix4fvARB glUniformMatrix4fvARB = function void (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glbfn_glUniformMatrix4fvARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniformMatrix4fvARB_loader (int a0, int a1, ubyte a2, const(float)* a3) nothrow @nogc {
  glUniformMatrix4fvARB = cast(glbfn_glUniformMatrix4fvARB)glbindGetProcAddress(`glUniformMatrix4fvARB`);
  if (glUniformMatrix4fvARB is null) assert(0, `OpenGL function 'glUniformMatrix4fvARB' not found!`);
  glUniformMatrix4fvARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetObjectParameterfvARB glGetObjectParameterfvARB = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetObjectParameterfvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetObjectParameterfvARB_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetObjectParameterfvARB = cast(glbfn_glGetObjectParameterfvARB)glbindGetProcAddress(`glGetObjectParameterfvARB`);
  if (glGetObjectParameterfvARB is null) assert(0, `OpenGL function 'glGetObjectParameterfvARB' not found!`);
  glGetObjectParameterfvARB(a0,a1,a2,);
}
__gshared glbfn_glGetObjectParameterivARB glGetObjectParameterivARB = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetObjectParameterivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetObjectParameterivARB_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetObjectParameterivARB = cast(glbfn_glGetObjectParameterivARB)glbindGetProcAddress(`glGetObjectParameterivARB`);
  if (glGetObjectParameterivARB is null) assert(0, `OpenGL function 'glGetObjectParameterivARB' not found!`);
  glGetObjectParameterivARB(a0,a1,a2,);
}
__gshared glbfn_glGetInfoLogARB glGetInfoLogARB = function void (uint a0, int a1, int* a2, byte* a3) nothrow @nogc {
  glbfn_glGetInfoLogARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetInfoLogARB_loader (uint a0, int a1, int* a2, byte* a3) nothrow @nogc {
  glGetInfoLogARB = cast(glbfn_glGetInfoLogARB)glbindGetProcAddress(`glGetInfoLogARB`);
  if (glGetInfoLogARB is null) assert(0, `OpenGL function 'glGetInfoLogARB' not found!`);
  glGetInfoLogARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetAttachedObjectsARB glGetAttachedObjectsARB = function void (uint a0, int a1, int* a2, uint* a3) nothrow @nogc {
  glbfn_glGetAttachedObjectsARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetAttachedObjectsARB_loader (uint a0, int a1, int* a2, uint* a3) nothrow @nogc {
  glGetAttachedObjectsARB = cast(glbfn_glGetAttachedObjectsARB)glbindGetProcAddress(`glGetAttachedObjectsARB`);
  if (glGetAttachedObjectsARB is null) assert(0, `OpenGL function 'glGetAttachedObjectsARB' not found!`);
  glGetAttachedObjectsARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetUniformLocationARB glGetUniformLocationARB = function int (uint a0, const(byte)* a1) nothrow @nogc {
  return glbfn_glGetUniformLocationARB_loader(a0,a1,);
};
private auto glbfn_glGetUniformLocationARB_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glGetUniformLocationARB = cast(glbfn_glGetUniformLocationARB)glbindGetProcAddress(`glGetUniformLocationARB`);
  if (glGetUniformLocationARB is null) assert(0, `OpenGL function 'glGetUniformLocationARB' not found!`);
  return glGetUniformLocationARB(a0,a1,);
}
__gshared glbfn_glGetActiveUniformARB glGetActiveUniformARB = function void (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, byte* a6) nothrow @nogc {
  glbfn_glGetActiveUniformARB_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetActiveUniformARB_loader (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, byte* a6) nothrow @nogc {
  glGetActiveUniformARB = cast(glbfn_glGetActiveUniformARB)glbindGetProcAddress(`glGetActiveUniformARB`);
  if (glGetActiveUniformARB is null) assert(0, `OpenGL function 'glGetActiveUniformARB' not found!`);
  glGetActiveUniformARB(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetUniformfvARB glGetUniformfvARB = function void (uint a0, int a1, float* a2) nothrow @nogc {
  glbfn_glGetUniformfvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformfvARB_loader (uint a0, int a1, float* a2) nothrow @nogc {
  glGetUniformfvARB = cast(glbfn_glGetUniformfvARB)glbindGetProcAddress(`glGetUniformfvARB`);
  if (glGetUniformfvARB is null) assert(0, `OpenGL function 'glGetUniformfvARB' not found!`);
  glGetUniformfvARB(a0,a1,a2,);
}
__gshared glbfn_glGetUniformivARB glGetUniformivARB = function void (uint a0, int a1, int* a2) nothrow @nogc {
  glbfn_glGetUniformivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformivARB_loader (uint a0, int a1, int* a2) nothrow @nogc {
  glGetUniformivARB = cast(glbfn_glGetUniformivARB)glbindGetProcAddress(`glGetUniformivARB`);
  if (glGetUniformivARB is null) assert(0, `OpenGL function 'glGetUniformivARB' not found!`);
  glGetUniformivARB(a0,a1,a2,);
}
__gshared glbfn_glGetShaderSourceARB glGetShaderSourceARB = function void (uint a0, int a1, int* a2, byte* a3) nothrow @nogc {
  glbfn_glGetShaderSourceARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetShaderSourceARB_loader (uint a0, int a1, int* a2, byte* a3) nothrow @nogc {
  glGetShaderSourceARB = cast(glbfn_glGetShaderSourceARB)glbindGetProcAddress(`glGetShaderSourceARB`);
  if (glGetShaderSourceARB is null) assert(0, `OpenGL function 'glGetShaderSourceARB' not found!`);
  glGetShaderSourceARB(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedStringARB glNamedStringARB = function void (uint a0, int a1, const(char)* a2, int a3, const(char)* a4) nothrow @nogc {
  glbfn_glNamedStringARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedStringARB_loader (uint a0, int a1, const(char)* a2, int a3, const(char)* a4) nothrow @nogc {
  glNamedStringARB = cast(glbfn_glNamedStringARB)glbindGetProcAddress(`glNamedStringARB`);
  if (glNamedStringARB is null) assert(0, `OpenGL function 'glNamedStringARB' not found!`);
  glNamedStringARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDeleteNamedStringARB glDeleteNamedStringARB = function void (int a0, const(char)* a1) nothrow @nogc {
  glbfn_glDeleteNamedStringARB_loader(a0,a1,);
};
private auto glbfn_glDeleteNamedStringARB_loader (int a0, const(char)* a1) nothrow @nogc {
  glDeleteNamedStringARB = cast(glbfn_glDeleteNamedStringARB)glbindGetProcAddress(`glDeleteNamedStringARB`);
  if (glDeleteNamedStringARB is null) assert(0, `OpenGL function 'glDeleteNamedStringARB' not found!`);
  glDeleteNamedStringARB(a0,a1,);
}
__gshared glbfn_glCompileShaderIncludeARB glCompileShaderIncludeARB = function void (uint a0, int a1, const(char*)* a2, const(int)* a3) nothrow @nogc {
  glbfn_glCompileShaderIncludeARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glCompileShaderIncludeARB_loader (uint a0, int a1, const(char*)* a2, const(int)* a3) nothrow @nogc {
  glCompileShaderIncludeARB = cast(glbfn_glCompileShaderIncludeARB)glbindGetProcAddress(`glCompileShaderIncludeARB`);
  if (glCompileShaderIncludeARB is null) assert(0, `OpenGL function 'glCompileShaderIncludeARB' not found!`);
  glCompileShaderIncludeARB(a0,a1,a2,a3,);
}
__gshared glbfn_glIsNamedStringARB glIsNamedStringARB = function ubyte (int a0, const(char)* a1) nothrow @nogc {
  return glbfn_glIsNamedStringARB_loader(a0,a1,);
};
private auto glbfn_glIsNamedStringARB_loader (int a0, const(char)* a1) nothrow @nogc {
  glIsNamedStringARB = cast(glbfn_glIsNamedStringARB)glbindGetProcAddress(`glIsNamedStringARB`);
  if (glIsNamedStringARB is null) assert(0, `OpenGL function 'glIsNamedStringARB' not found!`);
  return glIsNamedStringARB(a0,a1,);
}
__gshared glbfn_glGetNamedStringARB glGetNamedStringARB = function void (int a0, const(char)* a1, int a2, int* a3, char* a4) nothrow @nogc {
  glbfn_glGetNamedStringARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetNamedStringARB_loader (int a0, const(char)* a1, int a2, int* a3, char* a4) nothrow @nogc {
  glGetNamedStringARB = cast(glbfn_glGetNamedStringARB)glbindGetProcAddress(`glGetNamedStringARB`);
  if (glGetNamedStringARB is null) assert(0, `OpenGL function 'glGetNamedStringARB' not found!`);
  glGetNamedStringARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetNamedStringivARB glGetNamedStringivARB = function void (int a0, const(char)* a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetNamedStringivARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedStringivARB_loader (int a0, const(char)* a1, uint a2, int* a3) nothrow @nogc {
  glGetNamedStringivARB = cast(glbfn_glGetNamedStringivARB)glbindGetProcAddress(`glGetNamedStringivARB`);
  if (glGetNamedStringivARB is null) assert(0, `OpenGL function 'glGetNamedStringivARB' not found!`);
  glGetNamedStringivARB(a0,a1,a2,a3,);
}
static if (size_t.sizeof == 4) {
__gshared glbfn_glBufferPageCommitmentARB glBufferPageCommitmentARB = function void (uint a0, int a1, int a2, ubyte a3) nothrow @nogc {
  glbfn_glBufferPageCommitmentARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBufferPageCommitmentARB_loader (uint a0, int a1, int a2, ubyte a3) nothrow @nogc {
  glBufferPageCommitmentARB = cast(glbfn_glBufferPageCommitmentARB)glbindGetProcAddress(`glBufferPageCommitmentARB`);
  if (glBufferPageCommitmentARB is null) assert(0, `OpenGL function 'glBufferPageCommitmentARB' not found!`);
  glBufferPageCommitmentARB(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedBufferPageCommitmentEXT glNamedBufferPageCommitmentEXT = function void (uint a0, int a1, int a2, ubyte a3) nothrow @nogc {
  glbfn_glNamedBufferPageCommitmentEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedBufferPageCommitmentEXT_loader (uint a0, int a1, int a2, ubyte a3) nothrow @nogc {
  glNamedBufferPageCommitmentEXT = cast(glbfn_glNamedBufferPageCommitmentEXT)glbindGetProcAddress(`glNamedBufferPageCommitmentEXT`);
  if (glNamedBufferPageCommitmentEXT is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentEXT' not found!`);
  glNamedBufferPageCommitmentEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedBufferPageCommitmentARB glNamedBufferPageCommitmentARB = function void (uint a0, int a1, int a2, ubyte a3) nothrow @nogc {
  glbfn_glNamedBufferPageCommitmentARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedBufferPageCommitmentARB_loader (uint a0, int a1, int a2, ubyte a3) nothrow @nogc {
  glNamedBufferPageCommitmentARB = cast(glbfn_glNamedBufferPageCommitmentARB)glbindGetProcAddress(`glNamedBufferPageCommitmentARB`);
  if (glNamedBufferPageCommitmentARB is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentARB' not found!`);
  glNamedBufferPageCommitmentARB(a0,a1,a2,a3,);
}
__gshared glbfn_glTexPageCommitmentARB glTexPageCommitmentARB = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, ubyte a8) nothrow @nogc {
  glbfn_glTexPageCommitmentARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTexPageCommitmentARB_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, ubyte a8) nothrow @nogc {
  glTexPageCommitmentARB = cast(glbfn_glTexPageCommitmentARB)glbindGetProcAddress(`glTexPageCommitmentARB`);
  if (glTexPageCommitmentARB is null) assert(0, `OpenGL function 'glTexPageCommitmentARB' not found!`);
  glTexPageCommitmentARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glTexBufferARB glTexBufferARB = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glTexBufferARB_loader(a0,a1,a2,);
};
private auto glbfn_glTexBufferARB_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glTexBufferARB = cast(glbfn_glTexBufferARB)glbindGetProcAddress(`glTexBufferARB`);
  if (glTexBufferARB is null) assert(0, `OpenGL function 'glTexBufferARB' not found!`);
  glTexBufferARB(a0,a1,a2,);
}
__gshared glbfn_glCompressedTexImage3DARB glCompressedTexImage3DARB = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glbfn_glCompressedTexImage3DARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCompressedTexImage3DARB_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glCompressedTexImage3DARB = cast(glbfn_glCompressedTexImage3DARB)glbindGetProcAddress(`glCompressedTexImage3DARB`);
  if (glCompressedTexImage3DARB is null) assert(0, `OpenGL function 'glCompressedTexImage3DARB' not found!`);
  glCompressedTexImage3DARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCompressedTexImage2DARB glCompressedTexImage2DARB = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glbfn_glCompressedTexImage2DARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCompressedTexImage2DARB_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glCompressedTexImage2DARB = cast(glbfn_glCompressedTexImage2DARB)glbindGetProcAddress(`glCompressedTexImage2DARB`);
  if (glCompressedTexImage2DARB is null) assert(0, `OpenGL function 'glCompressedTexImage2DARB' not found!`);
  glCompressedTexImage2DARB(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCompressedTexImage1DARB glCompressedTexImage1DARB = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, const(void)* a6) nothrow @nogc {
  glbfn_glCompressedTexImage1DARB_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCompressedTexImage1DARB_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, const(void)* a6) nothrow @nogc {
  glCompressedTexImage1DARB = cast(glbfn_glCompressedTexImage1DARB)glbindGetProcAddress(`glCompressedTexImage1DARB`);
  if (glCompressedTexImage1DARB is null) assert(0, `OpenGL function 'glCompressedTexImage1DARB' not found!`);
  glCompressedTexImage1DARB(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCompressedTexSubImage3DARB glCompressedTexSubImage3DARB = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, int a9, const(void)* a10) nothrow @nogc {
  glbfn_glCompressedTexSubImage3DARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glCompressedTexSubImage3DARB_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, int a9, const(void)* a10) nothrow @nogc {
  glCompressedTexSubImage3DARB = cast(glbfn_glCompressedTexSubImage3DARB)glbindGetProcAddress(`glCompressedTexSubImage3DARB`);
  if (glCompressedTexSubImage3DARB is null) assert(0, `OpenGL function 'glCompressedTexSubImage3DARB' not found!`);
  glCompressedTexSubImage3DARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glCompressedTexSubImage2DARB glCompressedTexSubImage2DARB = function void (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, int a7, const(void)* a8) nothrow @nogc {
  glbfn_glCompressedTexSubImage2DARB_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCompressedTexSubImage2DARB_loader (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, int a7, const(void)* a8) nothrow @nogc {
  glCompressedTexSubImage2DARB = cast(glbfn_glCompressedTexSubImage2DARB)glbindGetProcAddress(`glCompressedTexSubImage2DARB`);
  if (glCompressedTexSubImage2DARB is null) assert(0, `OpenGL function 'glCompressedTexSubImage2DARB' not found!`);
  glCompressedTexSubImage2DARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCompressedTexSubImage1DARB glCompressedTexSubImage1DARB = function void (uint a0, int a1, int a2, int a3, uint a4, int a5, const(void)* a6) nothrow @nogc {
  glbfn_glCompressedTexSubImage1DARB_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCompressedTexSubImage1DARB_loader (uint a0, int a1, int a2, int a3, uint a4, int a5, const(void)* a6) nothrow @nogc {
  glCompressedTexSubImage1DARB = cast(glbfn_glCompressedTexSubImage1DARB)glbindGetProcAddress(`glCompressedTexSubImage1DARB`);
  if (glCompressedTexSubImage1DARB is null) assert(0, `OpenGL function 'glCompressedTexSubImage1DARB' not found!`);
  glCompressedTexSubImage1DARB(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetCompressedTexImageARB glGetCompressedTexImageARB = function void (uint a0, int a1, void* a2) nothrow @nogc {
  glbfn_glGetCompressedTexImageARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetCompressedTexImageARB_loader (uint a0, int a1, void* a2) nothrow @nogc {
  glGetCompressedTexImageARB = cast(glbfn_glGetCompressedTexImageARB)glbindGetProcAddress(`glGetCompressedTexImageARB`);
  if (glGetCompressedTexImageARB is null) assert(0, `OpenGL function 'glGetCompressedTexImageARB' not found!`);
  glGetCompressedTexImageARB(a0,a1,a2,);
}
__gshared glbfn_glLoadTransposeMatrixfARB glLoadTransposeMatrixfARB = function void (const(float)* a0) nothrow @nogc {
  glbfn_glLoadTransposeMatrixfARB_loader(a0,);
};
private auto glbfn_glLoadTransposeMatrixfARB_loader (const(float)* a0) nothrow @nogc {
  glLoadTransposeMatrixfARB = cast(glbfn_glLoadTransposeMatrixfARB)glbindGetProcAddress(`glLoadTransposeMatrixfARB`);
  if (glLoadTransposeMatrixfARB is null) assert(0, `OpenGL function 'glLoadTransposeMatrixfARB' not found!`);
  glLoadTransposeMatrixfARB(a0,);
}
__gshared glbfn_glLoadTransposeMatrixdARB glLoadTransposeMatrixdARB = function void (const(double)* a0) nothrow @nogc {
  glbfn_glLoadTransposeMatrixdARB_loader(a0,);
};
private auto glbfn_glLoadTransposeMatrixdARB_loader (const(double)* a0) nothrow @nogc {
  glLoadTransposeMatrixdARB = cast(glbfn_glLoadTransposeMatrixdARB)glbindGetProcAddress(`glLoadTransposeMatrixdARB`);
  if (glLoadTransposeMatrixdARB is null) assert(0, `OpenGL function 'glLoadTransposeMatrixdARB' not found!`);
  glLoadTransposeMatrixdARB(a0,);
}
__gshared glbfn_glMultTransposeMatrixfARB glMultTransposeMatrixfARB = function void (const(float)* a0) nothrow @nogc {
  glbfn_glMultTransposeMatrixfARB_loader(a0,);
};
private auto glbfn_glMultTransposeMatrixfARB_loader (const(float)* a0) nothrow @nogc {
  glMultTransposeMatrixfARB = cast(glbfn_glMultTransposeMatrixfARB)glbindGetProcAddress(`glMultTransposeMatrixfARB`);
  if (glMultTransposeMatrixfARB is null) assert(0, `OpenGL function 'glMultTransposeMatrixfARB' not found!`);
  glMultTransposeMatrixfARB(a0,);
}
__gshared glbfn_glMultTransposeMatrixdARB glMultTransposeMatrixdARB = function void (const(double)* a0) nothrow @nogc {
  glbfn_glMultTransposeMatrixdARB_loader(a0,);
};
private auto glbfn_glMultTransposeMatrixdARB_loader (const(double)* a0) nothrow @nogc {
  glMultTransposeMatrixdARB = cast(glbfn_glMultTransposeMatrixdARB)glbindGetProcAddress(`glMultTransposeMatrixdARB`);
  if (glMultTransposeMatrixdARB is null) assert(0, `OpenGL function 'glMultTransposeMatrixdARB' not found!`);
  glMultTransposeMatrixdARB(a0,);
}
__gshared glbfn_glWeightbvARB glWeightbvARB = function void (int a0, const(byte)* a1) nothrow @nogc {
  glbfn_glWeightbvARB_loader(a0,a1,);
};
private auto glbfn_glWeightbvARB_loader (int a0, const(byte)* a1) nothrow @nogc {
  glWeightbvARB = cast(glbfn_glWeightbvARB)glbindGetProcAddress(`glWeightbvARB`);
  if (glWeightbvARB is null) assert(0, `OpenGL function 'glWeightbvARB' not found!`);
  glWeightbvARB(a0,a1,);
}
__gshared glbfn_glWeightsvARB glWeightsvARB = function void (int a0, const(short)* a1) nothrow @nogc {
  glbfn_glWeightsvARB_loader(a0,a1,);
};
private auto glbfn_glWeightsvARB_loader (int a0, const(short)* a1) nothrow @nogc {
  glWeightsvARB = cast(glbfn_glWeightsvARB)glbindGetProcAddress(`glWeightsvARB`);
  if (glWeightsvARB is null) assert(0, `OpenGL function 'glWeightsvARB' not found!`);
  glWeightsvARB(a0,a1,);
}
__gshared glbfn_glWeightivARB glWeightivARB = function void (int a0, const(int)* a1) nothrow @nogc {
  glbfn_glWeightivARB_loader(a0,a1,);
};
private auto glbfn_glWeightivARB_loader (int a0, const(int)* a1) nothrow @nogc {
  glWeightivARB = cast(glbfn_glWeightivARB)glbindGetProcAddress(`glWeightivARB`);
  if (glWeightivARB is null) assert(0, `OpenGL function 'glWeightivARB' not found!`);
  glWeightivARB(a0,a1,);
}
__gshared glbfn_glWeightfvARB glWeightfvARB = function void (int a0, const(float)* a1) nothrow @nogc {
  glbfn_glWeightfvARB_loader(a0,a1,);
};
private auto glbfn_glWeightfvARB_loader (int a0, const(float)* a1) nothrow @nogc {
  glWeightfvARB = cast(glbfn_glWeightfvARB)glbindGetProcAddress(`glWeightfvARB`);
  if (glWeightfvARB is null) assert(0, `OpenGL function 'glWeightfvARB' not found!`);
  glWeightfvARB(a0,a1,);
}
__gshared glbfn_glWeightdvARB glWeightdvARB = function void (int a0, const(double)* a1) nothrow @nogc {
  glbfn_glWeightdvARB_loader(a0,a1,);
};
private auto glbfn_glWeightdvARB_loader (int a0, const(double)* a1) nothrow @nogc {
  glWeightdvARB = cast(glbfn_glWeightdvARB)glbindGetProcAddress(`glWeightdvARB`);
  if (glWeightdvARB is null) assert(0, `OpenGL function 'glWeightdvARB' not found!`);
  glWeightdvARB(a0,a1,);
}
__gshared glbfn_glWeightubvARB glWeightubvARB = function void (int a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glWeightubvARB_loader(a0,a1,);
};
private auto glbfn_glWeightubvARB_loader (int a0, const(ubyte)* a1) nothrow @nogc {
  glWeightubvARB = cast(glbfn_glWeightubvARB)glbindGetProcAddress(`glWeightubvARB`);
  if (glWeightubvARB is null) assert(0, `OpenGL function 'glWeightubvARB' not found!`);
  glWeightubvARB(a0,a1,);
}
__gshared glbfn_glWeightusvARB glWeightusvARB = function void (int a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glWeightusvARB_loader(a0,a1,);
};
private auto glbfn_glWeightusvARB_loader (int a0, const(ushort)* a1) nothrow @nogc {
  glWeightusvARB = cast(glbfn_glWeightusvARB)glbindGetProcAddress(`glWeightusvARB`);
  if (glWeightusvARB is null) assert(0, `OpenGL function 'glWeightusvARB' not found!`);
  glWeightusvARB(a0,a1,);
}
__gshared glbfn_glWeightuivARB glWeightuivARB = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glWeightuivARB_loader(a0,a1,);
};
private auto glbfn_glWeightuivARB_loader (int a0, const(uint)* a1) nothrow @nogc {
  glWeightuivARB = cast(glbfn_glWeightuivARB)glbindGetProcAddress(`glWeightuivARB`);
  if (glWeightuivARB is null) assert(0, `OpenGL function 'glWeightuivARB' not found!`);
  glWeightuivARB(a0,a1,);
}
__gshared glbfn_glWeightPointerARB glWeightPointerARB = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glWeightPointerARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glWeightPointerARB_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glWeightPointerARB = cast(glbfn_glWeightPointerARB)glbindGetProcAddress(`glWeightPointerARB`);
  if (glWeightPointerARB is null) assert(0, `OpenGL function 'glWeightPointerARB' not found!`);
  glWeightPointerARB(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexBlendARB glVertexBlendARB = function void (int a0) nothrow @nogc {
  glbfn_glVertexBlendARB_loader(a0,);
};
private auto glbfn_glVertexBlendARB_loader (int a0) nothrow @nogc {
  glVertexBlendARB = cast(glbfn_glVertexBlendARB)glbindGetProcAddress(`glVertexBlendARB`);
  if (glVertexBlendARB is null) assert(0, `OpenGL function 'glVertexBlendARB' not found!`);
  glVertexBlendARB(a0,);
}
__gshared glbfn_glBindBufferARB glBindBufferARB = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindBufferARB_loader(a0,a1,);
};
private auto glbfn_glBindBufferARB_loader (uint a0, uint a1) nothrow @nogc {
  glBindBufferARB = cast(glbfn_glBindBufferARB)glbindGetProcAddress(`glBindBufferARB`);
  if (glBindBufferARB is null) assert(0, `OpenGL function 'glBindBufferARB' not found!`);
  glBindBufferARB(a0,a1,);
}
__gshared glbfn_glDeleteBuffersARB glDeleteBuffersARB = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteBuffersARB_loader(a0,a1,);
};
private auto glbfn_glDeleteBuffersARB_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteBuffersARB = cast(glbfn_glDeleteBuffersARB)glbindGetProcAddress(`glDeleteBuffersARB`);
  if (glDeleteBuffersARB is null) assert(0, `OpenGL function 'glDeleteBuffersARB' not found!`);
  glDeleteBuffersARB(a0,a1,);
}
__gshared glbfn_glGenBuffersARB glGenBuffersARB = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenBuffersARB_loader(a0,a1,);
};
private auto glbfn_glGenBuffersARB_loader (int a0, uint* a1) nothrow @nogc {
  glGenBuffersARB = cast(glbfn_glGenBuffersARB)glbindGetProcAddress(`glGenBuffersARB`);
  if (glGenBuffersARB is null) assert(0, `OpenGL function 'glGenBuffersARB' not found!`);
  glGenBuffersARB(a0,a1,);
}
__gshared glbfn_glIsBufferARB glIsBufferARB = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsBufferARB_loader(a0,);
};
private auto glbfn_glIsBufferARB_loader (uint a0) nothrow @nogc {
  glIsBufferARB = cast(glbfn_glIsBufferARB)glbindGetProcAddress(`glIsBufferARB`);
  if (glIsBufferARB is null) assert(0, `OpenGL function 'glIsBufferARB' not found!`);
  return glIsBufferARB(a0,);
}
__gshared glbfn_glBufferDataARB glBufferDataARB = function void (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glbfn_glBufferDataARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBufferDataARB_loader (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glBufferDataARB = cast(glbfn_glBufferDataARB)glbindGetProcAddress(`glBufferDataARB`);
  if (glBufferDataARB is null) assert(0, `OpenGL function 'glBufferDataARB' not found!`);
  glBufferDataARB(a0,a1,a2,a3,);
}
__gshared glbfn_glBufferSubDataARB glBufferSubDataARB = function void (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glBufferSubDataARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBufferSubDataARB_loader (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glBufferSubDataARB = cast(glbfn_glBufferSubDataARB)glbindGetProcAddress(`glBufferSubDataARB`);
  if (glBufferSubDataARB is null) assert(0, `OpenGL function 'glBufferSubDataARB' not found!`);
  glBufferSubDataARB(a0,a1,a2,a3,);
}
__gshared glbfn_glGetBufferSubDataARB glGetBufferSubDataARB = function void (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetBufferSubDataARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetBufferSubDataARB_loader (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glGetBufferSubDataARB = cast(glbfn_glGetBufferSubDataARB)glbindGetProcAddress(`glGetBufferSubDataARB`);
  if (glGetBufferSubDataARB is null) assert(0, `OpenGL function 'glGetBufferSubDataARB' not found!`);
  glGetBufferSubDataARB(a0,a1,a2,a3,);
}
}
__gshared glbfn_glMapBufferARB glMapBufferARB = function void* (uint a0, uint a1) nothrow @nogc {
  return glbfn_glMapBufferARB_loader(a0,a1,);
};
private auto glbfn_glMapBufferARB_loader (uint a0, uint a1) nothrow @nogc {
  glMapBufferARB = cast(glbfn_glMapBufferARB)glbindGetProcAddress(`glMapBufferARB`);
  if (glMapBufferARB is null) assert(0, `OpenGL function 'glMapBufferARB' not found!`);
  return glMapBufferARB(a0,a1,);
}
__gshared glbfn_glUnmapBufferARB glUnmapBufferARB = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glUnmapBufferARB_loader(a0,);
};
private auto glbfn_glUnmapBufferARB_loader (uint a0) nothrow @nogc {
  glUnmapBufferARB = cast(glbfn_glUnmapBufferARB)glbindGetProcAddress(`glUnmapBufferARB`);
  if (glUnmapBufferARB is null) assert(0, `OpenGL function 'glUnmapBufferARB' not found!`);
  return glUnmapBufferARB(a0,);
}
__gshared glbfn_glGetBufferParameterivARB glGetBufferParameterivARB = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetBufferParameterivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetBufferParameterivARB_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetBufferParameterivARB = cast(glbfn_glGetBufferParameterivARB)glbindGetProcAddress(`glGetBufferParameterivARB`);
  if (glGetBufferParameterivARB is null) assert(0, `OpenGL function 'glGetBufferParameterivARB' not found!`);
  glGetBufferParameterivARB(a0,a1,a2,);
}
__gshared glbfn_glGetBufferPointervARB glGetBufferPointervARB = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetBufferPointervARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetBufferPointervARB_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetBufferPointervARB = cast(glbfn_glGetBufferPointervARB)glbindGetProcAddress(`glGetBufferPointervARB`);
  if (glGetBufferPointervARB is null) assert(0, `OpenGL function 'glGetBufferPointervARB' not found!`);
  glGetBufferPointervARB(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib1dARB glVertexAttrib1dARB = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glVertexAttrib1dARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1dARB_loader (uint a0, double a1) nothrow @nogc {
  glVertexAttrib1dARB = cast(glbfn_glVertexAttrib1dARB)glbindGetProcAddress(`glVertexAttrib1dARB`);
  if (glVertexAttrib1dARB is null) assert(0, `OpenGL function 'glVertexAttrib1dARB' not found!`);
  glVertexAttrib1dARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib1dvARB glVertexAttrib1dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1dvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib1dvARB = cast(glbfn_glVertexAttrib1dvARB)glbindGetProcAddress(`glVertexAttrib1dvARB`);
  if (glVertexAttrib1dvARB is null) assert(0, `OpenGL function 'glVertexAttrib1dvARB' not found!`);
  glVertexAttrib1dvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib1fARB glVertexAttrib1fARB = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glVertexAttrib1fARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1fARB_loader (uint a0, float a1) nothrow @nogc {
  glVertexAttrib1fARB = cast(glbfn_glVertexAttrib1fARB)glbindGetProcAddress(`glVertexAttrib1fARB`);
  if (glVertexAttrib1fARB is null) assert(0, `OpenGL function 'glVertexAttrib1fARB' not found!`);
  glVertexAttrib1fARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib1fvARB glVertexAttrib1fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1fvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib1fvARB = cast(glbfn_glVertexAttrib1fvARB)glbindGetProcAddress(`glVertexAttrib1fvARB`);
  if (glVertexAttrib1fvARB is null) assert(0, `OpenGL function 'glVertexAttrib1fvARB' not found!`);
  glVertexAttrib1fvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib1sARB glVertexAttrib1sARB = function void (uint a0, short a1) nothrow @nogc {
  glbfn_glVertexAttrib1sARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1sARB_loader (uint a0, short a1) nothrow @nogc {
  glVertexAttrib1sARB = cast(glbfn_glVertexAttrib1sARB)glbindGetProcAddress(`glVertexAttrib1sARB`);
  if (glVertexAttrib1sARB is null) assert(0, `OpenGL function 'glVertexAttrib1sARB' not found!`);
  glVertexAttrib1sARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib1svARB glVertexAttrib1svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1svARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib1svARB = cast(glbfn_glVertexAttrib1svARB)glbindGetProcAddress(`glVertexAttrib1svARB`);
  if (glVertexAttrib1svARB is null) assert(0, `OpenGL function 'glVertexAttrib1svARB' not found!`);
  glVertexAttrib1svARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib2dARB glVertexAttrib2dARB = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glVertexAttrib2dARB_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2dARB_loader (uint a0, double a1, double a2) nothrow @nogc {
  glVertexAttrib2dARB = cast(glbfn_glVertexAttrib2dARB)glbindGetProcAddress(`glVertexAttrib2dARB`);
  if (glVertexAttrib2dARB is null) assert(0, `OpenGL function 'glVertexAttrib2dARB' not found!`);
  glVertexAttrib2dARB(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2dvARB glVertexAttrib2dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2dvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib2dvARB = cast(glbfn_glVertexAttrib2dvARB)glbindGetProcAddress(`glVertexAttrib2dvARB`);
  if (glVertexAttrib2dvARB is null) assert(0, `OpenGL function 'glVertexAttrib2dvARB' not found!`);
  glVertexAttrib2dvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib2fARB glVertexAttrib2fARB = function void (uint a0, float a1, float a2) nothrow @nogc {
  glbfn_glVertexAttrib2fARB_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2fARB_loader (uint a0, float a1, float a2) nothrow @nogc {
  glVertexAttrib2fARB = cast(glbfn_glVertexAttrib2fARB)glbindGetProcAddress(`glVertexAttrib2fARB`);
  if (glVertexAttrib2fARB is null) assert(0, `OpenGL function 'glVertexAttrib2fARB' not found!`);
  glVertexAttrib2fARB(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2fvARB glVertexAttrib2fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2fvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib2fvARB = cast(glbfn_glVertexAttrib2fvARB)glbindGetProcAddress(`glVertexAttrib2fvARB`);
  if (glVertexAttrib2fvARB is null) assert(0, `OpenGL function 'glVertexAttrib2fvARB' not found!`);
  glVertexAttrib2fvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib2sARB glVertexAttrib2sARB = function void (uint a0, short a1, short a2) nothrow @nogc {
  glbfn_glVertexAttrib2sARB_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2sARB_loader (uint a0, short a1, short a2) nothrow @nogc {
  glVertexAttrib2sARB = cast(glbfn_glVertexAttrib2sARB)glbindGetProcAddress(`glVertexAttrib2sARB`);
  if (glVertexAttrib2sARB is null) assert(0, `OpenGL function 'glVertexAttrib2sARB' not found!`);
  glVertexAttrib2sARB(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2svARB glVertexAttrib2svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2svARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib2svARB = cast(glbfn_glVertexAttrib2svARB)glbindGetProcAddress(`glVertexAttrib2svARB`);
  if (glVertexAttrib2svARB is null) assert(0, `OpenGL function 'glVertexAttrib2svARB' not found!`);
  glVertexAttrib2svARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib3dARB glVertexAttrib3dARB = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glVertexAttrib3dARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3dARB_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glVertexAttrib3dARB = cast(glbfn_glVertexAttrib3dARB)glbindGetProcAddress(`glVertexAttrib3dARB`);
  if (glVertexAttrib3dARB is null) assert(0, `OpenGL function 'glVertexAttrib3dARB' not found!`);
  glVertexAttrib3dARB(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3dvARB glVertexAttrib3dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3dvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib3dvARB = cast(glbfn_glVertexAttrib3dvARB)glbindGetProcAddress(`glVertexAttrib3dvARB`);
  if (glVertexAttrib3dvARB is null) assert(0, `OpenGL function 'glVertexAttrib3dvARB' not found!`);
  glVertexAttrib3dvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib3fARB glVertexAttrib3fARB = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glVertexAttrib3fARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3fARB_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glVertexAttrib3fARB = cast(glbfn_glVertexAttrib3fARB)glbindGetProcAddress(`glVertexAttrib3fARB`);
  if (glVertexAttrib3fARB is null) assert(0, `OpenGL function 'glVertexAttrib3fARB' not found!`);
  glVertexAttrib3fARB(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3fvARB glVertexAttrib3fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3fvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib3fvARB = cast(glbfn_glVertexAttrib3fvARB)glbindGetProcAddress(`glVertexAttrib3fvARB`);
  if (glVertexAttrib3fvARB is null) assert(0, `OpenGL function 'glVertexAttrib3fvARB' not found!`);
  glVertexAttrib3fvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib3sARB glVertexAttrib3sARB = function void (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glVertexAttrib3sARB_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3sARB_loader (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glVertexAttrib3sARB = cast(glbfn_glVertexAttrib3sARB)glbindGetProcAddress(`glVertexAttrib3sARB`);
  if (glVertexAttrib3sARB is null) assert(0, `OpenGL function 'glVertexAttrib3sARB' not found!`);
  glVertexAttrib3sARB(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3svARB glVertexAttrib3svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3svARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib3svARB = cast(glbfn_glVertexAttrib3svARB)glbindGetProcAddress(`glVertexAttrib3svARB`);
  if (glVertexAttrib3svARB is null) assert(0, `OpenGL function 'glVertexAttrib3svARB' not found!`);
  glVertexAttrib3svARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4NbvARB glVertexAttrib4NbvARB = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4NbvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4NbvARB_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glVertexAttrib4NbvARB = cast(glbfn_glVertexAttrib4NbvARB)glbindGetProcAddress(`glVertexAttrib4NbvARB`);
  if (glVertexAttrib4NbvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NbvARB' not found!`);
  glVertexAttrib4NbvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4NivARB glVertexAttrib4NivARB = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4NivARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4NivARB_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttrib4NivARB = cast(glbfn_glVertexAttrib4NivARB)glbindGetProcAddress(`glVertexAttrib4NivARB`);
  if (glVertexAttrib4NivARB is null) assert(0, `OpenGL function 'glVertexAttrib4NivARB' not found!`);
  glVertexAttrib4NivARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4NsvARB glVertexAttrib4NsvARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4NsvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4NsvARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib4NsvARB = cast(glbfn_glVertexAttrib4NsvARB)glbindGetProcAddress(`glVertexAttrib4NsvARB`);
  if (glVertexAttrib4NsvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NsvARB' not found!`);
  glVertexAttrib4NsvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4NubARB glVertexAttrib4NubARB = function void (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glbfn_glVertexAttrib4NubARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4NubARB_loader (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glVertexAttrib4NubARB = cast(glbfn_glVertexAttrib4NubARB)glbindGetProcAddress(`glVertexAttrib4NubARB`);
  if (glVertexAttrib4NubARB is null) assert(0, `OpenGL function 'glVertexAttrib4NubARB' not found!`);
  glVertexAttrib4NubARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4NubvARB glVertexAttrib4NubvARB = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4NubvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4NubvARB_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVertexAttrib4NubvARB = cast(glbfn_glVertexAttrib4NubvARB)glbindGetProcAddress(`glVertexAttrib4NubvARB`);
  if (glVertexAttrib4NubvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NubvARB' not found!`);
  glVertexAttrib4NubvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4NuivARB glVertexAttrib4NuivARB = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4NuivARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4NuivARB_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttrib4NuivARB = cast(glbfn_glVertexAttrib4NuivARB)glbindGetProcAddress(`glVertexAttrib4NuivARB`);
  if (glVertexAttrib4NuivARB is null) assert(0, `OpenGL function 'glVertexAttrib4NuivARB' not found!`);
  glVertexAttrib4NuivARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4NusvARB glVertexAttrib4NusvARB = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4NusvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4NusvARB_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib4NusvARB = cast(glbfn_glVertexAttrib4NusvARB)glbindGetProcAddress(`glVertexAttrib4NusvARB`);
  if (glVertexAttrib4NusvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NusvARB' not found!`);
  glVertexAttrib4NusvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4bvARB glVertexAttrib4bvARB = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4bvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4bvARB_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glVertexAttrib4bvARB = cast(glbfn_glVertexAttrib4bvARB)glbindGetProcAddress(`glVertexAttrib4bvARB`);
  if (glVertexAttrib4bvARB is null) assert(0, `OpenGL function 'glVertexAttrib4bvARB' not found!`);
  glVertexAttrib4bvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4dARB glVertexAttrib4dARB = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glVertexAttrib4dARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4dARB_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glVertexAttrib4dARB = cast(glbfn_glVertexAttrib4dARB)glbindGetProcAddress(`glVertexAttrib4dARB`);
  if (glVertexAttrib4dARB is null) assert(0, `OpenGL function 'glVertexAttrib4dARB' not found!`);
  glVertexAttrib4dARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4dvARB glVertexAttrib4dvARB = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4dvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4dvARB_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib4dvARB = cast(glbfn_glVertexAttrib4dvARB)glbindGetProcAddress(`glVertexAttrib4dvARB`);
  if (glVertexAttrib4dvARB is null) assert(0, `OpenGL function 'glVertexAttrib4dvARB' not found!`);
  glVertexAttrib4dvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4fARB glVertexAttrib4fARB = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glVertexAttrib4fARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4fARB_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glVertexAttrib4fARB = cast(glbfn_glVertexAttrib4fARB)glbindGetProcAddress(`glVertexAttrib4fARB`);
  if (glVertexAttrib4fARB is null) assert(0, `OpenGL function 'glVertexAttrib4fARB' not found!`);
  glVertexAttrib4fARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4fvARB glVertexAttrib4fvARB = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4fvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4fvARB_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib4fvARB = cast(glbfn_glVertexAttrib4fvARB)glbindGetProcAddress(`glVertexAttrib4fvARB`);
  if (glVertexAttrib4fvARB is null) assert(0, `OpenGL function 'glVertexAttrib4fvARB' not found!`);
  glVertexAttrib4fvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4ivARB glVertexAttrib4ivARB = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4ivARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4ivARB_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttrib4ivARB = cast(glbfn_glVertexAttrib4ivARB)glbindGetProcAddress(`glVertexAttrib4ivARB`);
  if (glVertexAttrib4ivARB is null) assert(0, `OpenGL function 'glVertexAttrib4ivARB' not found!`);
  glVertexAttrib4ivARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4sARB glVertexAttrib4sARB = function void (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glbfn_glVertexAttrib4sARB_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4sARB_loader (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glVertexAttrib4sARB = cast(glbfn_glVertexAttrib4sARB)glbindGetProcAddress(`glVertexAttrib4sARB`);
  if (glVertexAttrib4sARB is null) assert(0, `OpenGL function 'glVertexAttrib4sARB' not found!`);
  glVertexAttrib4sARB(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4svARB glVertexAttrib4svARB = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4svARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4svARB_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib4svARB = cast(glbfn_glVertexAttrib4svARB)glbindGetProcAddress(`glVertexAttrib4svARB`);
  if (glVertexAttrib4svARB is null) assert(0, `OpenGL function 'glVertexAttrib4svARB' not found!`);
  glVertexAttrib4svARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4ubvARB glVertexAttrib4ubvARB = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4ubvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4ubvARB_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVertexAttrib4ubvARB = cast(glbfn_glVertexAttrib4ubvARB)glbindGetProcAddress(`glVertexAttrib4ubvARB`);
  if (glVertexAttrib4ubvARB is null) assert(0, `OpenGL function 'glVertexAttrib4ubvARB' not found!`);
  glVertexAttrib4ubvARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4uivARB glVertexAttrib4uivARB = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4uivARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4uivARB_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttrib4uivARB = cast(glbfn_glVertexAttrib4uivARB)glbindGetProcAddress(`glVertexAttrib4uivARB`);
  if (glVertexAttrib4uivARB is null) assert(0, `OpenGL function 'glVertexAttrib4uivARB' not found!`);
  glVertexAttrib4uivARB(a0,a1,);
}
__gshared glbfn_glVertexAttrib4usvARB glVertexAttrib4usvARB = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4usvARB_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4usvARB_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib4usvARB = cast(glbfn_glVertexAttrib4usvARB)glbindGetProcAddress(`glVertexAttrib4usvARB`);
  if (glVertexAttrib4usvARB is null) assert(0, `OpenGL function 'glVertexAttrib4usvARB' not found!`);
  glVertexAttrib4usvARB(a0,a1,);
}
__gshared glbfn_glVertexAttribPointerARB glVertexAttribPointerARB = function void (uint a0, int a1, uint a2, ubyte a3, int a4, const(void)* a5) nothrow @nogc {
  glbfn_glVertexAttribPointerARB_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexAttribPointerARB_loader (uint a0, int a1, uint a2, ubyte a3, int a4, const(void)* a5) nothrow @nogc {
  glVertexAttribPointerARB = cast(glbfn_glVertexAttribPointerARB)glbindGetProcAddress(`glVertexAttribPointerARB`);
  if (glVertexAttribPointerARB is null) assert(0, `OpenGL function 'glVertexAttribPointerARB' not found!`);
  glVertexAttribPointerARB(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glEnableVertexAttribArrayARB glEnableVertexAttribArrayARB = function void (uint a0) nothrow @nogc {
  glbfn_glEnableVertexAttribArrayARB_loader(a0,);
};
private auto glbfn_glEnableVertexAttribArrayARB_loader (uint a0) nothrow @nogc {
  glEnableVertexAttribArrayARB = cast(glbfn_glEnableVertexAttribArrayARB)glbindGetProcAddress(`glEnableVertexAttribArrayARB`);
  if (glEnableVertexAttribArrayARB is null) assert(0, `OpenGL function 'glEnableVertexAttribArrayARB' not found!`);
  glEnableVertexAttribArrayARB(a0,);
}
__gshared glbfn_glDisableVertexAttribArrayARB glDisableVertexAttribArrayARB = function void (uint a0) nothrow @nogc {
  glbfn_glDisableVertexAttribArrayARB_loader(a0,);
};
private auto glbfn_glDisableVertexAttribArrayARB_loader (uint a0) nothrow @nogc {
  glDisableVertexAttribArrayARB = cast(glbfn_glDisableVertexAttribArrayARB)glbindGetProcAddress(`glDisableVertexAttribArrayARB`);
  if (glDisableVertexAttribArrayARB is null) assert(0, `OpenGL function 'glDisableVertexAttribArrayARB' not found!`);
  glDisableVertexAttribArrayARB(a0,);
}
__gshared glbfn_glGetVertexAttribdvARB glGetVertexAttribdvARB = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetVertexAttribdvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribdvARB_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetVertexAttribdvARB = cast(glbfn_glGetVertexAttribdvARB)glbindGetProcAddress(`glGetVertexAttribdvARB`);
  if (glGetVertexAttribdvARB is null) assert(0, `OpenGL function 'glGetVertexAttribdvARB' not found!`);
  glGetVertexAttribdvARB(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribfvARB glGetVertexAttribfvARB = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetVertexAttribfvARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribfvARB_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetVertexAttribfvARB = cast(glbfn_glGetVertexAttribfvARB)glbindGetProcAddress(`glGetVertexAttribfvARB`);
  if (glGetVertexAttribfvARB is null) assert(0, `OpenGL function 'glGetVertexAttribfvARB' not found!`);
  glGetVertexAttribfvARB(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribivARB glGetVertexAttribivARB = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexAttribivARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribivARB_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexAttribivARB = cast(glbfn_glGetVertexAttribivARB)glbindGetProcAddress(`glGetVertexAttribivARB`);
  if (glGetVertexAttribivARB is null) assert(0, `OpenGL function 'glGetVertexAttribivARB' not found!`);
  glGetVertexAttribivARB(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribPointervARB glGetVertexAttribPointervARB = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetVertexAttribPointervARB_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribPointervARB_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetVertexAttribPointervARB = cast(glbfn_glGetVertexAttribPointervARB)glbindGetProcAddress(`glGetVertexAttribPointervARB`);
  if (glGetVertexAttribPointervARB is null) assert(0, `OpenGL function 'glGetVertexAttribPointervARB' not found!`);
  glGetVertexAttribPointervARB(a0,a1,a2,);
}
__gshared glbfn_glBindAttribLocationARB glBindAttribLocationARB = function void (uint a0, uint a1, const(byte)* a2) nothrow @nogc {
  glbfn_glBindAttribLocationARB_loader(a0,a1,a2,);
};
private auto glbfn_glBindAttribLocationARB_loader (uint a0, uint a1, const(byte)* a2) nothrow @nogc {
  glBindAttribLocationARB = cast(glbfn_glBindAttribLocationARB)glbindGetProcAddress(`glBindAttribLocationARB`);
  if (glBindAttribLocationARB is null) assert(0, `OpenGL function 'glBindAttribLocationARB' not found!`);
  glBindAttribLocationARB(a0,a1,a2,);
}
__gshared glbfn_glGetActiveAttribARB glGetActiveAttribARB = function void (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, byte* a6) nothrow @nogc {
  glbfn_glGetActiveAttribARB_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetActiveAttribARB_loader (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, byte* a6) nothrow @nogc {
  glGetActiveAttribARB = cast(glbfn_glGetActiveAttribARB)glbindGetProcAddress(`glGetActiveAttribARB`);
  if (glGetActiveAttribARB is null) assert(0, `OpenGL function 'glGetActiveAttribARB' not found!`);
  glGetActiveAttribARB(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetAttribLocationARB glGetAttribLocationARB = function int (uint a0, const(byte)* a1) nothrow @nogc {
  return glbfn_glGetAttribLocationARB_loader(a0,a1,);
};
private auto glbfn_glGetAttribLocationARB_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glGetAttribLocationARB = cast(glbfn_glGetAttribLocationARB)glbindGetProcAddress(`glGetAttribLocationARB`);
  if (glGetAttribLocationARB is null) assert(0, `OpenGL function 'glGetAttribLocationARB' not found!`);
  return glGetAttribLocationARB(a0,a1,);
}
__gshared glbfn_glWindowPos2dARB glWindowPos2dARB = function void (double a0, double a1) nothrow @nogc {
  glbfn_glWindowPos2dARB_loader(a0,a1,);
};
private auto glbfn_glWindowPos2dARB_loader (double a0, double a1) nothrow @nogc {
  glWindowPos2dARB = cast(glbfn_glWindowPos2dARB)glbindGetProcAddress(`glWindowPos2dARB`);
  if (glWindowPos2dARB is null) assert(0, `OpenGL function 'glWindowPos2dARB' not found!`);
  glWindowPos2dARB(a0,a1,);
}
__gshared glbfn_glWindowPos2dvARB glWindowPos2dvARB = function void (const(double)* a0) nothrow @nogc {
  glbfn_glWindowPos2dvARB_loader(a0,);
};
private auto glbfn_glWindowPos2dvARB_loader (const(double)* a0) nothrow @nogc {
  glWindowPos2dvARB = cast(glbfn_glWindowPos2dvARB)glbindGetProcAddress(`glWindowPos2dvARB`);
  if (glWindowPos2dvARB is null) assert(0, `OpenGL function 'glWindowPos2dvARB' not found!`);
  glWindowPos2dvARB(a0,);
}
__gshared glbfn_glWindowPos2fARB glWindowPos2fARB = function void (float a0, float a1) nothrow @nogc {
  glbfn_glWindowPos2fARB_loader(a0,a1,);
};
private auto glbfn_glWindowPos2fARB_loader (float a0, float a1) nothrow @nogc {
  glWindowPos2fARB = cast(glbfn_glWindowPos2fARB)glbindGetProcAddress(`glWindowPos2fARB`);
  if (glWindowPos2fARB is null) assert(0, `OpenGL function 'glWindowPos2fARB' not found!`);
  glWindowPos2fARB(a0,a1,);
}
__gshared glbfn_glWindowPos2fvARB glWindowPos2fvARB = function void (const(float)* a0) nothrow @nogc {
  glbfn_glWindowPos2fvARB_loader(a0,);
};
private auto glbfn_glWindowPos2fvARB_loader (const(float)* a0) nothrow @nogc {
  glWindowPos2fvARB = cast(glbfn_glWindowPos2fvARB)glbindGetProcAddress(`glWindowPos2fvARB`);
  if (glWindowPos2fvARB is null) assert(0, `OpenGL function 'glWindowPos2fvARB' not found!`);
  glWindowPos2fvARB(a0,);
}
__gshared glbfn_glWindowPos2iARB glWindowPos2iARB = function void (int a0, int a1) nothrow @nogc {
  glbfn_glWindowPos2iARB_loader(a0,a1,);
};
private auto glbfn_glWindowPos2iARB_loader (int a0, int a1) nothrow @nogc {
  glWindowPos2iARB = cast(glbfn_glWindowPos2iARB)glbindGetProcAddress(`glWindowPos2iARB`);
  if (glWindowPos2iARB is null) assert(0, `OpenGL function 'glWindowPos2iARB' not found!`);
  glWindowPos2iARB(a0,a1,);
}
__gshared glbfn_glWindowPos2ivARB glWindowPos2ivARB = function void (const(int)* a0) nothrow @nogc {
  glbfn_glWindowPos2ivARB_loader(a0,);
};
private auto glbfn_glWindowPos2ivARB_loader (const(int)* a0) nothrow @nogc {
  glWindowPos2ivARB = cast(glbfn_glWindowPos2ivARB)glbindGetProcAddress(`glWindowPos2ivARB`);
  if (glWindowPos2ivARB is null) assert(0, `OpenGL function 'glWindowPos2ivARB' not found!`);
  glWindowPos2ivARB(a0,);
}
__gshared glbfn_glWindowPos2sARB glWindowPos2sARB = function void (short a0, short a1) nothrow @nogc {
  glbfn_glWindowPos2sARB_loader(a0,a1,);
};
private auto glbfn_glWindowPos2sARB_loader (short a0, short a1) nothrow @nogc {
  glWindowPos2sARB = cast(glbfn_glWindowPos2sARB)glbindGetProcAddress(`glWindowPos2sARB`);
  if (glWindowPos2sARB is null) assert(0, `OpenGL function 'glWindowPos2sARB' not found!`);
  glWindowPos2sARB(a0,a1,);
}
__gshared glbfn_glWindowPos2svARB glWindowPos2svARB = function void (const(short)* a0) nothrow @nogc {
  glbfn_glWindowPos2svARB_loader(a0,);
};
private auto glbfn_glWindowPos2svARB_loader (const(short)* a0) nothrow @nogc {
  glWindowPos2svARB = cast(glbfn_glWindowPos2svARB)glbindGetProcAddress(`glWindowPos2svARB`);
  if (glWindowPos2svARB is null) assert(0, `OpenGL function 'glWindowPos2svARB' not found!`);
  glWindowPos2svARB(a0,);
}
__gshared glbfn_glWindowPos3dARB glWindowPos3dARB = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glWindowPos3dARB_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3dARB_loader (double a0, double a1, double a2) nothrow @nogc {
  glWindowPos3dARB = cast(glbfn_glWindowPos3dARB)glbindGetProcAddress(`glWindowPos3dARB`);
  if (glWindowPos3dARB is null) assert(0, `OpenGL function 'glWindowPos3dARB' not found!`);
  glWindowPos3dARB(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3dvARB glWindowPos3dvARB = function void (const(double)* a0) nothrow @nogc {
  glbfn_glWindowPos3dvARB_loader(a0,);
};
private auto glbfn_glWindowPos3dvARB_loader (const(double)* a0) nothrow @nogc {
  glWindowPos3dvARB = cast(glbfn_glWindowPos3dvARB)glbindGetProcAddress(`glWindowPos3dvARB`);
  if (glWindowPos3dvARB is null) assert(0, `OpenGL function 'glWindowPos3dvARB' not found!`);
  glWindowPos3dvARB(a0,);
}
__gshared glbfn_glWindowPos3fARB glWindowPos3fARB = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glWindowPos3fARB_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3fARB_loader (float a0, float a1, float a2) nothrow @nogc {
  glWindowPos3fARB = cast(glbfn_glWindowPos3fARB)glbindGetProcAddress(`glWindowPos3fARB`);
  if (glWindowPos3fARB is null) assert(0, `OpenGL function 'glWindowPos3fARB' not found!`);
  glWindowPos3fARB(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3fvARB glWindowPos3fvARB = function void (const(float)* a0) nothrow @nogc {
  glbfn_glWindowPos3fvARB_loader(a0,);
};
private auto glbfn_glWindowPos3fvARB_loader (const(float)* a0) nothrow @nogc {
  glWindowPos3fvARB = cast(glbfn_glWindowPos3fvARB)glbindGetProcAddress(`glWindowPos3fvARB`);
  if (glWindowPos3fvARB is null) assert(0, `OpenGL function 'glWindowPos3fvARB' not found!`);
  glWindowPos3fvARB(a0,);
}
__gshared glbfn_glWindowPos3iARB glWindowPos3iARB = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glWindowPos3iARB_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3iARB_loader (int a0, int a1, int a2) nothrow @nogc {
  glWindowPos3iARB = cast(glbfn_glWindowPos3iARB)glbindGetProcAddress(`glWindowPos3iARB`);
  if (glWindowPos3iARB is null) assert(0, `OpenGL function 'glWindowPos3iARB' not found!`);
  glWindowPos3iARB(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3ivARB glWindowPos3ivARB = function void (const(int)* a0) nothrow @nogc {
  glbfn_glWindowPos3ivARB_loader(a0,);
};
private auto glbfn_glWindowPos3ivARB_loader (const(int)* a0) nothrow @nogc {
  glWindowPos3ivARB = cast(glbfn_glWindowPos3ivARB)glbindGetProcAddress(`glWindowPos3ivARB`);
  if (glWindowPos3ivARB is null) assert(0, `OpenGL function 'glWindowPos3ivARB' not found!`);
  glWindowPos3ivARB(a0,);
}
__gshared glbfn_glWindowPos3sARB glWindowPos3sARB = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glWindowPos3sARB_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3sARB_loader (short a0, short a1, short a2) nothrow @nogc {
  glWindowPos3sARB = cast(glbfn_glWindowPos3sARB)glbindGetProcAddress(`glWindowPos3sARB`);
  if (glWindowPos3sARB is null) assert(0, `OpenGL function 'glWindowPos3sARB' not found!`);
  glWindowPos3sARB(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3svARB glWindowPos3svARB = function void (const(short)* a0) nothrow @nogc {
  glbfn_glWindowPos3svARB_loader(a0,);
};
private auto glbfn_glWindowPos3svARB_loader (const(short)* a0) nothrow @nogc {
  glWindowPos3svARB = cast(glbfn_glWindowPos3svARB)glbindGetProcAddress(`glWindowPos3svARB`);
  if (glWindowPos3svARB is null) assert(0, `OpenGL function 'glWindowPos3svARB' not found!`);
  glWindowPos3svARB(a0,);
}
__gshared glbfn_glDrawBuffersATI glDrawBuffersATI = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDrawBuffersATI_loader(a0,a1,);
};
private auto glbfn_glDrawBuffersATI_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDrawBuffersATI = cast(glbfn_glDrawBuffersATI)glbindGetProcAddress(`glDrawBuffersATI`);
  if (glDrawBuffersATI is null) assert(0, `OpenGL function 'glDrawBuffersATI' not found!`);
  glDrawBuffersATI(a0,a1,);
}
__gshared glbfn_glElementPointerATI glElementPointerATI = function void (uint a0, const(void)* a1) nothrow @nogc {
  glbfn_glElementPointerATI_loader(a0,a1,);
};
private auto glbfn_glElementPointerATI_loader (uint a0, const(void)* a1) nothrow @nogc {
  glElementPointerATI = cast(glbfn_glElementPointerATI)glbindGetProcAddress(`glElementPointerATI`);
  if (glElementPointerATI is null) assert(0, `OpenGL function 'glElementPointerATI' not found!`);
  glElementPointerATI(a0,a1,);
}
__gshared glbfn_glDrawElementArrayATI glDrawElementArrayATI = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glDrawElementArrayATI_loader(a0,a1,);
};
private auto glbfn_glDrawElementArrayATI_loader (uint a0, int a1) nothrow @nogc {
  glDrawElementArrayATI = cast(glbfn_glDrawElementArrayATI)glbindGetProcAddress(`glDrawElementArrayATI`);
  if (glDrawElementArrayATI is null) assert(0, `OpenGL function 'glDrawElementArrayATI' not found!`);
  glDrawElementArrayATI(a0,a1,);
}
__gshared glbfn_glDrawRangeElementArrayATI glDrawRangeElementArrayATI = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glDrawRangeElementArrayATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawRangeElementArrayATI_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glDrawRangeElementArrayATI = cast(glbfn_glDrawRangeElementArrayATI)glbindGetProcAddress(`glDrawRangeElementArrayATI`);
  if (glDrawRangeElementArrayATI is null) assert(0, `OpenGL function 'glDrawRangeElementArrayATI' not found!`);
  glDrawRangeElementArrayATI(a0,a1,a2,a3,);
}
__gshared glbfn_glTexBumpParameterivATI glTexBumpParameterivATI = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glTexBumpParameterivATI_loader(a0,a1,);
};
private auto glbfn_glTexBumpParameterivATI_loader (uint a0, const(int)* a1) nothrow @nogc {
  glTexBumpParameterivATI = cast(glbfn_glTexBumpParameterivATI)glbindGetProcAddress(`glTexBumpParameterivATI`);
  if (glTexBumpParameterivATI is null) assert(0, `OpenGL function 'glTexBumpParameterivATI' not found!`);
  glTexBumpParameterivATI(a0,a1,);
}
__gshared glbfn_glTexBumpParameterfvATI glTexBumpParameterfvATI = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glTexBumpParameterfvATI_loader(a0,a1,);
};
private auto glbfn_glTexBumpParameterfvATI_loader (uint a0, const(float)* a1) nothrow @nogc {
  glTexBumpParameterfvATI = cast(glbfn_glTexBumpParameterfvATI)glbindGetProcAddress(`glTexBumpParameterfvATI`);
  if (glTexBumpParameterfvATI is null) assert(0, `OpenGL function 'glTexBumpParameterfvATI' not found!`);
  glTexBumpParameterfvATI(a0,a1,);
}
__gshared glbfn_glGetTexBumpParameterivATI glGetTexBumpParameterivATI = function void (uint a0, int* a1) nothrow @nogc {
  glbfn_glGetTexBumpParameterivATI_loader(a0,a1,);
};
private auto glbfn_glGetTexBumpParameterivATI_loader (uint a0, int* a1) nothrow @nogc {
  glGetTexBumpParameterivATI = cast(glbfn_glGetTexBumpParameterivATI)glbindGetProcAddress(`glGetTexBumpParameterivATI`);
  if (glGetTexBumpParameterivATI is null) assert(0, `OpenGL function 'glGetTexBumpParameterivATI' not found!`);
  glGetTexBumpParameterivATI(a0,a1,);
}
__gshared glbfn_glGetTexBumpParameterfvATI glGetTexBumpParameterfvATI = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetTexBumpParameterfvATI_loader(a0,a1,);
};
private auto glbfn_glGetTexBumpParameterfvATI_loader (uint a0, float* a1) nothrow @nogc {
  glGetTexBumpParameterfvATI = cast(glbfn_glGetTexBumpParameterfvATI)glbindGetProcAddress(`glGetTexBumpParameterfvATI`);
  if (glGetTexBumpParameterfvATI is null) assert(0, `OpenGL function 'glGetTexBumpParameterfvATI' not found!`);
  glGetTexBumpParameterfvATI(a0,a1,);
}
__gshared glbfn_glGenFragmentShadersATI glGenFragmentShadersATI = function uint (uint a0) nothrow @nogc {
  return glbfn_glGenFragmentShadersATI_loader(a0,);
};
private auto glbfn_glGenFragmentShadersATI_loader (uint a0) nothrow @nogc {
  glGenFragmentShadersATI = cast(glbfn_glGenFragmentShadersATI)glbindGetProcAddress(`glGenFragmentShadersATI`);
  if (glGenFragmentShadersATI is null) assert(0, `OpenGL function 'glGenFragmentShadersATI' not found!`);
  return glGenFragmentShadersATI(a0,);
}
__gshared glbfn_glBindFragmentShaderATI glBindFragmentShaderATI = function void (uint a0) nothrow @nogc {
  glbfn_glBindFragmentShaderATI_loader(a0,);
};
private auto glbfn_glBindFragmentShaderATI_loader (uint a0) nothrow @nogc {
  glBindFragmentShaderATI = cast(glbfn_glBindFragmentShaderATI)glbindGetProcAddress(`glBindFragmentShaderATI`);
  if (glBindFragmentShaderATI is null) assert(0, `OpenGL function 'glBindFragmentShaderATI' not found!`);
  glBindFragmentShaderATI(a0,);
}
__gshared glbfn_glDeleteFragmentShaderATI glDeleteFragmentShaderATI = function void (uint a0) nothrow @nogc {
  glbfn_glDeleteFragmentShaderATI_loader(a0,);
};
private auto glbfn_glDeleteFragmentShaderATI_loader (uint a0) nothrow @nogc {
  glDeleteFragmentShaderATI = cast(glbfn_glDeleteFragmentShaderATI)glbindGetProcAddress(`glDeleteFragmentShaderATI`);
  if (glDeleteFragmentShaderATI is null) assert(0, `OpenGL function 'glDeleteFragmentShaderATI' not found!`);
  glDeleteFragmentShaderATI(a0,);
}
__gshared glbfn_glBeginFragmentShaderATI glBeginFragmentShaderATI = function void () nothrow @nogc {
  glbfn_glBeginFragmentShaderATI_loader();
};
private auto glbfn_glBeginFragmentShaderATI_loader () nothrow @nogc {
  glBeginFragmentShaderATI = cast(glbfn_glBeginFragmentShaderATI)glbindGetProcAddress(`glBeginFragmentShaderATI`);
  if (glBeginFragmentShaderATI is null) assert(0, `OpenGL function 'glBeginFragmentShaderATI' not found!`);
  glBeginFragmentShaderATI();
}
__gshared glbfn_glEndFragmentShaderATI glEndFragmentShaderATI = function void () nothrow @nogc {
  glbfn_glEndFragmentShaderATI_loader();
};
private auto glbfn_glEndFragmentShaderATI_loader () nothrow @nogc {
  glEndFragmentShaderATI = cast(glbfn_glEndFragmentShaderATI)glbindGetProcAddress(`glEndFragmentShaderATI`);
  if (glEndFragmentShaderATI is null) assert(0, `OpenGL function 'glEndFragmentShaderATI' not found!`);
  glEndFragmentShaderATI();
}
__gshared glbfn_glPassTexCoordATI glPassTexCoordATI = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glPassTexCoordATI_loader(a0,a1,a2,);
};
private auto glbfn_glPassTexCoordATI_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glPassTexCoordATI = cast(glbfn_glPassTexCoordATI)glbindGetProcAddress(`glPassTexCoordATI`);
  if (glPassTexCoordATI is null) assert(0, `OpenGL function 'glPassTexCoordATI' not found!`);
  glPassTexCoordATI(a0,a1,a2,);
}
__gshared glbfn_glSampleMapATI glSampleMapATI = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glSampleMapATI_loader(a0,a1,a2,);
};
private auto glbfn_glSampleMapATI_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glSampleMapATI = cast(glbfn_glSampleMapATI)glbindGetProcAddress(`glSampleMapATI`);
  if (glSampleMapATI is null) assert(0, `OpenGL function 'glSampleMapATI' not found!`);
  glSampleMapATI(a0,a1,a2,);
}
__gshared glbfn_glColorFragmentOp1ATI glColorFragmentOp1ATI = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6) nothrow @nogc {
  glbfn_glColorFragmentOp1ATI_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glColorFragmentOp1ATI_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6) nothrow @nogc {
  glColorFragmentOp1ATI = cast(glbfn_glColorFragmentOp1ATI)glbindGetProcAddress(`glColorFragmentOp1ATI`);
  if (glColorFragmentOp1ATI is null) assert(0, `OpenGL function 'glColorFragmentOp1ATI' not found!`);
  glColorFragmentOp1ATI(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glColorFragmentOp2ATI glColorFragmentOp2ATI = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9) nothrow @nogc {
  glbfn_glColorFragmentOp2ATI_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glColorFragmentOp2ATI_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9) nothrow @nogc {
  glColorFragmentOp2ATI = cast(glbfn_glColorFragmentOp2ATI)glbindGetProcAddress(`glColorFragmentOp2ATI`);
  if (glColorFragmentOp2ATI is null) assert(0, `OpenGL function 'glColorFragmentOp2ATI' not found!`);
  glColorFragmentOp2ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glColorFragmentOp3ATI glColorFragmentOp3ATI = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10, uint a11, uint a12) nothrow @nogc {
  glbfn_glColorFragmentOp3ATI_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
private auto glbfn_glColorFragmentOp3ATI_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10, uint a11, uint a12) nothrow @nogc {
  glColorFragmentOp3ATI = cast(glbfn_glColorFragmentOp3ATI)glbindGetProcAddress(`glColorFragmentOp3ATI`);
  if (glColorFragmentOp3ATI is null) assert(0, `OpenGL function 'glColorFragmentOp3ATI' not found!`);
  glColorFragmentOp3ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
}
__gshared glbfn_glAlphaFragmentOp1ATI glAlphaFragmentOp1ATI = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glAlphaFragmentOp1ATI_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glAlphaFragmentOp1ATI_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glAlphaFragmentOp1ATI = cast(glbfn_glAlphaFragmentOp1ATI)glbindGetProcAddress(`glAlphaFragmentOp1ATI`);
  if (glAlphaFragmentOp1ATI is null) assert(0, `OpenGL function 'glAlphaFragmentOp1ATI' not found!`);
  glAlphaFragmentOp1ATI(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glAlphaFragmentOp2ATI glAlphaFragmentOp2ATI = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8) nothrow @nogc {
  glbfn_glAlphaFragmentOp2ATI_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glAlphaFragmentOp2ATI_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8) nothrow @nogc {
  glAlphaFragmentOp2ATI = cast(glbfn_glAlphaFragmentOp2ATI)glbindGetProcAddress(`glAlphaFragmentOp2ATI`);
  if (glAlphaFragmentOp2ATI is null) assert(0, `OpenGL function 'glAlphaFragmentOp2ATI' not found!`);
  glAlphaFragmentOp2ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glAlphaFragmentOp3ATI glAlphaFragmentOp3ATI = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10, uint a11) nothrow @nogc {
  glbfn_glAlphaFragmentOp3ATI_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glAlphaFragmentOp3ATI_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10, uint a11) nothrow @nogc {
  glAlphaFragmentOp3ATI = cast(glbfn_glAlphaFragmentOp3ATI)glbindGetProcAddress(`glAlphaFragmentOp3ATI`);
  if (glAlphaFragmentOp3ATI is null) assert(0, `OpenGL function 'glAlphaFragmentOp3ATI' not found!`);
  glAlphaFragmentOp3ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glSetFragmentShaderConstantATI glSetFragmentShaderConstantATI = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glSetFragmentShaderConstantATI_loader(a0,a1,);
};
private auto glbfn_glSetFragmentShaderConstantATI_loader (uint a0, const(float)* a1) nothrow @nogc {
  glSetFragmentShaderConstantATI = cast(glbfn_glSetFragmentShaderConstantATI)glbindGetProcAddress(`glSetFragmentShaderConstantATI`);
  if (glSetFragmentShaderConstantATI is null) assert(0, `OpenGL function 'glSetFragmentShaderConstantATI' not found!`);
  glSetFragmentShaderConstantATI(a0,a1,);
}
__gshared glbfn_glMapObjectBufferATI glMapObjectBufferATI = function void* (uint a0) nothrow @nogc {
  return glbfn_glMapObjectBufferATI_loader(a0,);
};
private auto glbfn_glMapObjectBufferATI_loader (uint a0) nothrow @nogc {
  glMapObjectBufferATI = cast(glbfn_glMapObjectBufferATI)glbindGetProcAddress(`glMapObjectBufferATI`);
  if (glMapObjectBufferATI is null) assert(0, `OpenGL function 'glMapObjectBufferATI' not found!`);
  return glMapObjectBufferATI(a0,);
}
__gshared glbfn_glUnmapObjectBufferATI glUnmapObjectBufferATI = function void (uint a0) nothrow @nogc {
  glbfn_glUnmapObjectBufferATI_loader(a0,);
};
private auto glbfn_glUnmapObjectBufferATI_loader (uint a0) nothrow @nogc {
  glUnmapObjectBufferATI = cast(glbfn_glUnmapObjectBufferATI)glbindGetProcAddress(`glUnmapObjectBufferATI`);
  if (glUnmapObjectBufferATI is null) assert(0, `OpenGL function 'glUnmapObjectBufferATI' not found!`);
  glUnmapObjectBufferATI(a0,);
}
__gshared glbfn_glPNTrianglesiATI glPNTrianglesiATI = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPNTrianglesiATI_loader(a0,a1,);
};
private auto glbfn_glPNTrianglesiATI_loader (uint a0, int a1) nothrow @nogc {
  glPNTrianglesiATI = cast(glbfn_glPNTrianglesiATI)glbindGetProcAddress(`glPNTrianglesiATI`);
  if (glPNTrianglesiATI is null) assert(0, `OpenGL function 'glPNTrianglesiATI' not found!`);
  glPNTrianglesiATI(a0,a1,);
}
__gshared glbfn_glPNTrianglesfATI glPNTrianglesfATI = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPNTrianglesfATI_loader(a0,a1,);
};
private auto glbfn_glPNTrianglesfATI_loader (uint a0, float a1) nothrow @nogc {
  glPNTrianglesfATI = cast(glbfn_glPNTrianglesfATI)glbindGetProcAddress(`glPNTrianglesfATI`);
  if (glPNTrianglesfATI is null) assert(0, `OpenGL function 'glPNTrianglesfATI' not found!`);
  glPNTrianglesfATI(a0,a1,);
}
__gshared glbfn_glStencilOpSeparateATI glStencilOpSeparateATI = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glStencilOpSeparateATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glStencilOpSeparateATI_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glStencilOpSeparateATI = cast(glbfn_glStencilOpSeparateATI)glbindGetProcAddress(`glStencilOpSeparateATI`);
  if (glStencilOpSeparateATI is null) assert(0, `OpenGL function 'glStencilOpSeparateATI' not found!`);
  glStencilOpSeparateATI(a0,a1,a2,a3,);
}
__gshared glbfn_glStencilFuncSeparateATI glStencilFuncSeparateATI = function void (uint a0, uint a1, int a2, uint a3) nothrow @nogc {
  glbfn_glStencilFuncSeparateATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glStencilFuncSeparateATI_loader (uint a0, uint a1, int a2, uint a3) nothrow @nogc {
  glStencilFuncSeparateATI = cast(glbfn_glStencilFuncSeparateATI)glbindGetProcAddress(`glStencilFuncSeparateATI`);
  if (glStencilFuncSeparateATI is null) assert(0, `OpenGL function 'glStencilFuncSeparateATI' not found!`);
  glStencilFuncSeparateATI(a0,a1,a2,a3,);
}
__gshared glbfn_glNewObjectBufferATI glNewObjectBufferATI = function uint (int a0, const(void)* a1, uint a2) nothrow @nogc {
  return glbfn_glNewObjectBufferATI_loader(a0,a1,a2,);
};
private auto glbfn_glNewObjectBufferATI_loader (int a0, const(void)* a1, uint a2) nothrow @nogc {
  glNewObjectBufferATI = cast(glbfn_glNewObjectBufferATI)glbindGetProcAddress(`glNewObjectBufferATI`);
  if (glNewObjectBufferATI is null) assert(0, `OpenGL function 'glNewObjectBufferATI' not found!`);
  return glNewObjectBufferATI(a0,a1,a2,);
}
__gshared glbfn_glIsObjectBufferATI glIsObjectBufferATI = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsObjectBufferATI_loader(a0,);
};
private auto glbfn_glIsObjectBufferATI_loader (uint a0) nothrow @nogc {
  glIsObjectBufferATI = cast(glbfn_glIsObjectBufferATI)glbindGetProcAddress(`glIsObjectBufferATI`);
  if (glIsObjectBufferATI is null) assert(0, `OpenGL function 'glIsObjectBufferATI' not found!`);
  return glIsObjectBufferATI(a0,);
}
__gshared glbfn_glUpdateObjectBufferATI glUpdateObjectBufferATI = function void (uint a0, uint a1, int a2, const(void)* a3, uint a4) nothrow @nogc {
  glbfn_glUpdateObjectBufferATI_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUpdateObjectBufferATI_loader (uint a0, uint a1, int a2, const(void)* a3, uint a4) nothrow @nogc {
  glUpdateObjectBufferATI = cast(glbfn_glUpdateObjectBufferATI)glbindGetProcAddress(`glUpdateObjectBufferATI`);
  if (glUpdateObjectBufferATI is null) assert(0, `OpenGL function 'glUpdateObjectBufferATI' not found!`);
  glUpdateObjectBufferATI(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetObjectBufferfvATI glGetObjectBufferfvATI = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetObjectBufferfvATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetObjectBufferfvATI_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetObjectBufferfvATI = cast(glbfn_glGetObjectBufferfvATI)glbindGetProcAddress(`glGetObjectBufferfvATI`);
  if (glGetObjectBufferfvATI is null) assert(0, `OpenGL function 'glGetObjectBufferfvATI' not found!`);
  glGetObjectBufferfvATI(a0,a1,a2,);
}
__gshared glbfn_glGetObjectBufferivATI glGetObjectBufferivATI = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetObjectBufferivATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetObjectBufferivATI_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetObjectBufferivATI = cast(glbfn_glGetObjectBufferivATI)glbindGetProcAddress(`glGetObjectBufferivATI`);
  if (glGetObjectBufferivATI is null) assert(0, `OpenGL function 'glGetObjectBufferivATI' not found!`);
  glGetObjectBufferivATI(a0,a1,a2,);
}
__gshared glbfn_glFreeObjectBufferATI glFreeObjectBufferATI = function void (uint a0) nothrow @nogc {
  glbfn_glFreeObjectBufferATI_loader(a0,);
};
private auto glbfn_glFreeObjectBufferATI_loader (uint a0) nothrow @nogc {
  glFreeObjectBufferATI = cast(glbfn_glFreeObjectBufferATI)glbindGetProcAddress(`glFreeObjectBufferATI`);
  if (glFreeObjectBufferATI is null) assert(0, `OpenGL function 'glFreeObjectBufferATI' not found!`);
  glFreeObjectBufferATI(a0,);
}
__gshared glbfn_glArrayObjectATI glArrayObjectATI = function void (uint a0, int a1, uint a2, int a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glArrayObjectATI_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glArrayObjectATI_loader (uint a0, int a1, uint a2, int a3, uint a4, uint a5) nothrow @nogc {
  glArrayObjectATI = cast(glbfn_glArrayObjectATI)glbindGetProcAddress(`glArrayObjectATI`);
  if (glArrayObjectATI is null) assert(0, `OpenGL function 'glArrayObjectATI' not found!`);
  glArrayObjectATI(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetArrayObjectfvATI glGetArrayObjectfvATI = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetArrayObjectfvATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetArrayObjectfvATI_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetArrayObjectfvATI = cast(glbfn_glGetArrayObjectfvATI)glbindGetProcAddress(`glGetArrayObjectfvATI`);
  if (glGetArrayObjectfvATI is null) assert(0, `OpenGL function 'glGetArrayObjectfvATI' not found!`);
  glGetArrayObjectfvATI(a0,a1,a2,);
}
__gshared glbfn_glGetArrayObjectivATI glGetArrayObjectivATI = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetArrayObjectivATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetArrayObjectivATI_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetArrayObjectivATI = cast(glbfn_glGetArrayObjectivATI)glbindGetProcAddress(`glGetArrayObjectivATI`);
  if (glGetArrayObjectivATI is null) assert(0, `OpenGL function 'glGetArrayObjectivATI' not found!`);
  glGetArrayObjectivATI(a0,a1,a2,);
}
__gshared glbfn_glVariantArrayObjectATI glVariantArrayObjectATI = function void (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glVariantArrayObjectATI_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVariantArrayObjectATI_loader (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glVariantArrayObjectATI = cast(glbfn_glVariantArrayObjectATI)glbindGetProcAddress(`glVariantArrayObjectATI`);
  if (glVariantArrayObjectATI is null) assert(0, `OpenGL function 'glVariantArrayObjectATI' not found!`);
  glVariantArrayObjectATI(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetVariantArrayObjectfvATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetVariantArrayObjectfvATI_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetVariantArrayObjectfvATI = cast(glbfn_glGetVariantArrayObjectfvATI)glbindGetProcAddress(`glGetVariantArrayObjectfvATI`);
  if (glGetVariantArrayObjectfvATI is null) assert(0, `OpenGL function 'glGetVariantArrayObjectfvATI' not found!`);
  glGetVariantArrayObjectfvATI(a0,a1,a2,);
}
__gshared glbfn_glGetVariantArrayObjectivATI glGetVariantArrayObjectivATI = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVariantArrayObjectivATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetVariantArrayObjectivATI_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVariantArrayObjectivATI = cast(glbfn_glGetVariantArrayObjectivATI)glbindGetProcAddress(`glGetVariantArrayObjectivATI`);
  if (glGetVariantArrayObjectivATI is null) assert(0, `OpenGL function 'glGetVariantArrayObjectivATI' not found!`);
  glGetVariantArrayObjectivATI(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribArrayObjectATI glVertexAttribArrayObjectATI = function void (uint a0, int a1, uint a2, ubyte a3, int a4, uint a5, uint a6) nothrow @nogc {
  glbfn_glVertexAttribArrayObjectATI_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glVertexAttribArrayObjectATI_loader (uint a0, int a1, uint a2, ubyte a3, int a4, uint a5, uint a6) nothrow @nogc {
  glVertexAttribArrayObjectATI = cast(glbfn_glVertexAttribArrayObjectATI)glbindGetProcAddress(`glVertexAttribArrayObjectATI`);
  if (glVertexAttribArrayObjectATI is null) assert(0, `OpenGL function 'glVertexAttribArrayObjectATI' not found!`);
  glVertexAttribArrayObjectATI(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetVertexAttribArrayObjectfvATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribArrayObjectfvATI_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetVertexAttribArrayObjectfvATI = cast(glbfn_glGetVertexAttribArrayObjectfvATI)glbindGetProcAddress(`glGetVertexAttribArrayObjectfvATI`);
  if (glGetVertexAttribArrayObjectfvATI is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectfvATI' not found!`);
  glGetVertexAttribArrayObjectfvATI(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexAttribArrayObjectivATI_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribArrayObjectivATI_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexAttribArrayObjectivATI = cast(glbfn_glGetVertexAttribArrayObjectivATI)glbindGetProcAddress(`glGetVertexAttribArrayObjectivATI`);
  if (glGetVertexAttribArrayObjectivATI is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectivATI' not found!`);
  glGetVertexAttribArrayObjectivATI(a0,a1,a2,);
}
__gshared glbfn_glVertexStream1sATI glVertexStream1sATI = function void (uint a0, short a1) nothrow @nogc {
  glbfn_glVertexStream1sATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1sATI_loader (uint a0, short a1) nothrow @nogc {
  glVertexStream1sATI = cast(glbfn_glVertexStream1sATI)glbindGetProcAddress(`glVertexStream1sATI`);
  if (glVertexStream1sATI is null) assert(0, `OpenGL function 'glVertexStream1sATI' not found!`);
  glVertexStream1sATI(a0,a1,);
}
__gshared glbfn_glVertexStream1svATI glVertexStream1svATI = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexStream1svATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1svATI_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexStream1svATI = cast(glbfn_glVertexStream1svATI)glbindGetProcAddress(`glVertexStream1svATI`);
  if (glVertexStream1svATI is null) assert(0, `OpenGL function 'glVertexStream1svATI' not found!`);
  glVertexStream1svATI(a0,a1,);
}
__gshared glbfn_glVertexStream1iATI glVertexStream1iATI = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glVertexStream1iATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1iATI_loader (uint a0, int a1) nothrow @nogc {
  glVertexStream1iATI = cast(glbfn_glVertexStream1iATI)glbindGetProcAddress(`glVertexStream1iATI`);
  if (glVertexStream1iATI is null) assert(0, `OpenGL function 'glVertexStream1iATI' not found!`);
  glVertexStream1iATI(a0,a1,);
}
__gshared glbfn_glVertexStream1ivATI glVertexStream1ivATI = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexStream1ivATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1ivATI_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexStream1ivATI = cast(glbfn_glVertexStream1ivATI)glbindGetProcAddress(`glVertexStream1ivATI`);
  if (glVertexStream1ivATI is null) assert(0, `OpenGL function 'glVertexStream1ivATI' not found!`);
  glVertexStream1ivATI(a0,a1,);
}
__gshared glbfn_glVertexStream1fATI glVertexStream1fATI = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glVertexStream1fATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1fATI_loader (uint a0, float a1) nothrow @nogc {
  glVertexStream1fATI = cast(glbfn_glVertexStream1fATI)glbindGetProcAddress(`glVertexStream1fATI`);
  if (glVertexStream1fATI is null) assert(0, `OpenGL function 'glVertexStream1fATI' not found!`);
  glVertexStream1fATI(a0,a1,);
}
__gshared glbfn_glVertexStream1fvATI glVertexStream1fvATI = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexStream1fvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1fvATI_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexStream1fvATI = cast(glbfn_glVertexStream1fvATI)glbindGetProcAddress(`glVertexStream1fvATI`);
  if (glVertexStream1fvATI is null) assert(0, `OpenGL function 'glVertexStream1fvATI' not found!`);
  glVertexStream1fvATI(a0,a1,);
}
__gshared glbfn_glVertexStream1dATI glVertexStream1dATI = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glVertexStream1dATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1dATI_loader (uint a0, double a1) nothrow @nogc {
  glVertexStream1dATI = cast(glbfn_glVertexStream1dATI)glbindGetProcAddress(`glVertexStream1dATI`);
  if (glVertexStream1dATI is null) assert(0, `OpenGL function 'glVertexStream1dATI' not found!`);
  glVertexStream1dATI(a0,a1,);
}
__gshared glbfn_glVertexStream1dvATI glVertexStream1dvATI = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexStream1dvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream1dvATI_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexStream1dvATI = cast(glbfn_glVertexStream1dvATI)glbindGetProcAddress(`glVertexStream1dvATI`);
  if (glVertexStream1dvATI is null) assert(0, `OpenGL function 'glVertexStream1dvATI' not found!`);
  glVertexStream1dvATI(a0,a1,);
}
__gshared glbfn_glVertexStream2sATI glVertexStream2sATI = function void (uint a0, short a1, short a2) nothrow @nogc {
  glbfn_glVertexStream2sATI_loader(a0,a1,a2,);
};
private auto glbfn_glVertexStream2sATI_loader (uint a0, short a1, short a2) nothrow @nogc {
  glVertexStream2sATI = cast(glbfn_glVertexStream2sATI)glbindGetProcAddress(`glVertexStream2sATI`);
  if (glVertexStream2sATI is null) assert(0, `OpenGL function 'glVertexStream2sATI' not found!`);
  glVertexStream2sATI(a0,a1,a2,);
}
__gshared glbfn_glVertexStream2svATI glVertexStream2svATI = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexStream2svATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream2svATI_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexStream2svATI = cast(glbfn_glVertexStream2svATI)glbindGetProcAddress(`glVertexStream2svATI`);
  if (glVertexStream2svATI is null) assert(0, `OpenGL function 'glVertexStream2svATI' not found!`);
  glVertexStream2svATI(a0,a1,);
}
__gshared glbfn_glVertexStream2iATI glVertexStream2iATI = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glVertexStream2iATI_loader(a0,a1,a2,);
};
private auto glbfn_glVertexStream2iATI_loader (uint a0, int a1, int a2) nothrow @nogc {
  glVertexStream2iATI = cast(glbfn_glVertexStream2iATI)glbindGetProcAddress(`glVertexStream2iATI`);
  if (glVertexStream2iATI is null) assert(0, `OpenGL function 'glVertexStream2iATI' not found!`);
  glVertexStream2iATI(a0,a1,a2,);
}
__gshared glbfn_glVertexStream2ivATI glVertexStream2ivATI = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexStream2ivATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream2ivATI_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexStream2ivATI = cast(glbfn_glVertexStream2ivATI)glbindGetProcAddress(`glVertexStream2ivATI`);
  if (glVertexStream2ivATI is null) assert(0, `OpenGL function 'glVertexStream2ivATI' not found!`);
  glVertexStream2ivATI(a0,a1,);
}
__gshared glbfn_glVertexStream2fATI glVertexStream2fATI = function void (uint a0, float a1, float a2) nothrow @nogc {
  glbfn_glVertexStream2fATI_loader(a0,a1,a2,);
};
private auto glbfn_glVertexStream2fATI_loader (uint a0, float a1, float a2) nothrow @nogc {
  glVertexStream2fATI = cast(glbfn_glVertexStream2fATI)glbindGetProcAddress(`glVertexStream2fATI`);
  if (glVertexStream2fATI is null) assert(0, `OpenGL function 'glVertexStream2fATI' not found!`);
  glVertexStream2fATI(a0,a1,a2,);
}
__gshared glbfn_glVertexStream2fvATI glVertexStream2fvATI = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexStream2fvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream2fvATI_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexStream2fvATI = cast(glbfn_glVertexStream2fvATI)glbindGetProcAddress(`glVertexStream2fvATI`);
  if (glVertexStream2fvATI is null) assert(0, `OpenGL function 'glVertexStream2fvATI' not found!`);
  glVertexStream2fvATI(a0,a1,);
}
__gshared glbfn_glVertexStream2dATI glVertexStream2dATI = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glVertexStream2dATI_loader(a0,a1,a2,);
};
private auto glbfn_glVertexStream2dATI_loader (uint a0, double a1, double a2) nothrow @nogc {
  glVertexStream2dATI = cast(glbfn_glVertexStream2dATI)glbindGetProcAddress(`glVertexStream2dATI`);
  if (glVertexStream2dATI is null) assert(0, `OpenGL function 'glVertexStream2dATI' not found!`);
  glVertexStream2dATI(a0,a1,a2,);
}
__gshared glbfn_glVertexStream2dvATI glVertexStream2dvATI = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexStream2dvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream2dvATI_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexStream2dvATI = cast(glbfn_glVertexStream2dvATI)glbindGetProcAddress(`glVertexStream2dvATI`);
  if (glVertexStream2dvATI is null) assert(0, `OpenGL function 'glVertexStream2dvATI' not found!`);
  glVertexStream2dvATI(a0,a1,);
}
__gshared glbfn_glVertexStream3sATI glVertexStream3sATI = function void (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glVertexStream3sATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexStream3sATI_loader (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glVertexStream3sATI = cast(glbfn_glVertexStream3sATI)glbindGetProcAddress(`glVertexStream3sATI`);
  if (glVertexStream3sATI is null) assert(0, `OpenGL function 'glVertexStream3sATI' not found!`);
  glVertexStream3sATI(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexStream3svATI glVertexStream3svATI = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexStream3svATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream3svATI_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexStream3svATI = cast(glbfn_glVertexStream3svATI)glbindGetProcAddress(`glVertexStream3svATI`);
  if (glVertexStream3svATI is null) assert(0, `OpenGL function 'glVertexStream3svATI' not found!`);
  glVertexStream3svATI(a0,a1,);
}
__gshared glbfn_glVertexStream3iATI glVertexStream3iATI = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glVertexStream3iATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexStream3iATI_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glVertexStream3iATI = cast(glbfn_glVertexStream3iATI)glbindGetProcAddress(`glVertexStream3iATI`);
  if (glVertexStream3iATI is null) assert(0, `OpenGL function 'glVertexStream3iATI' not found!`);
  glVertexStream3iATI(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexStream3ivATI glVertexStream3ivATI = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexStream3ivATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream3ivATI_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexStream3ivATI = cast(glbfn_glVertexStream3ivATI)glbindGetProcAddress(`glVertexStream3ivATI`);
  if (glVertexStream3ivATI is null) assert(0, `OpenGL function 'glVertexStream3ivATI' not found!`);
  glVertexStream3ivATI(a0,a1,);
}
__gshared glbfn_glVertexStream3fATI glVertexStream3fATI = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glVertexStream3fATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexStream3fATI_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glVertexStream3fATI = cast(glbfn_glVertexStream3fATI)glbindGetProcAddress(`glVertexStream3fATI`);
  if (glVertexStream3fATI is null) assert(0, `OpenGL function 'glVertexStream3fATI' not found!`);
  glVertexStream3fATI(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexStream3fvATI glVertexStream3fvATI = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexStream3fvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream3fvATI_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexStream3fvATI = cast(glbfn_glVertexStream3fvATI)glbindGetProcAddress(`glVertexStream3fvATI`);
  if (glVertexStream3fvATI is null) assert(0, `OpenGL function 'glVertexStream3fvATI' not found!`);
  glVertexStream3fvATI(a0,a1,);
}
__gshared glbfn_glVertexStream3dATI glVertexStream3dATI = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glVertexStream3dATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexStream3dATI_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glVertexStream3dATI = cast(glbfn_glVertexStream3dATI)glbindGetProcAddress(`glVertexStream3dATI`);
  if (glVertexStream3dATI is null) assert(0, `OpenGL function 'glVertexStream3dATI' not found!`);
  glVertexStream3dATI(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexStream3dvATI glVertexStream3dvATI = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexStream3dvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream3dvATI_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexStream3dvATI = cast(glbfn_glVertexStream3dvATI)glbindGetProcAddress(`glVertexStream3dvATI`);
  if (glVertexStream3dvATI is null) assert(0, `OpenGL function 'glVertexStream3dvATI' not found!`);
  glVertexStream3dvATI(a0,a1,);
}
__gshared glbfn_glVertexStream4sATI glVertexStream4sATI = function void (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glbfn_glVertexStream4sATI_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexStream4sATI_loader (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glVertexStream4sATI = cast(glbfn_glVertexStream4sATI)glbindGetProcAddress(`glVertexStream4sATI`);
  if (glVertexStream4sATI is null) assert(0, `OpenGL function 'glVertexStream4sATI' not found!`);
  glVertexStream4sATI(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexStream4svATI glVertexStream4svATI = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexStream4svATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream4svATI_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexStream4svATI = cast(glbfn_glVertexStream4svATI)glbindGetProcAddress(`glVertexStream4svATI`);
  if (glVertexStream4svATI is null) assert(0, `OpenGL function 'glVertexStream4svATI' not found!`);
  glVertexStream4svATI(a0,a1,);
}
__gshared glbfn_glVertexStream4iATI glVertexStream4iATI = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexStream4iATI_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexStream4iATI_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glVertexStream4iATI = cast(glbfn_glVertexStream4iATI)glbindGetProcAddress(`glVertexStream4iATI`);
  if (glVertexStream4iATI is null) assert(0, `OpenGL function 'glVertexStream4iATI' not found!`);
  glVertexStream4iATI(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexStream4ivATI glVertexStream4ivATI = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexStream4ivATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream4ivATI_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexStream4ivATI = cast(glbfn_glVertexStream4ivATI)glbindGetProcAddress(`glVertexStream4ivATI`);
  if (glVertexStream4ivATI is null) assert(0, `OpenGL function 'glVertexStream4ivATI' not found!`);
  glVertexStream4ivATI(a0,a1,);
}
__gshared glbfn_glVertexStream4fATI glVertexStream4fATI = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glVertexStream4fATI_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexStream4fATI_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glVertexStream4fATI = cast(glbfn_glVertexStream4fATI)glbindGetProcAddress(`glVertexStream4fATI`);
  if (glVertexStream4fATI is null) assert(0, `OpenGL function 'glVertexStream4fATI' not found!`);
  glVertexStream4fATI(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexStream4fvATI glVertexStream4fvATI = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexStream4fvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream4fvATI_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexStream4fvATI = cast(glbfn_glVertexStream4fvATI)glbindGetProcAddress(`glVertexStream4fvATI`);
  if (glVertexStream4fvATI is null) assert(0, `OpenGL function 'glVertexStream4fvATI' not found!`);
  glVertexStream4fvATI(a0,a1,);
}
__gshared glbfn_glVertexStream4dATI glVertexStream4dATI = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glVertexStream4dATI_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexStream4dATI_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glVertexStream4dATI = cast(glbfn_glVertexStream4dATI)glbindGetProcAddress(`glVertexStream4dATI`);
  if (glVertexStream4dATI is null) assert(0, `OpenGL function 'glVertexStream4dATI' not found!`);
  glVertexStream4dATI(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexStream4dvATI glVertexStream4dvATI = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexStream4dvATI_loader(a0,a1,);
};
private auto glbfn_glVertexStream4dvATI_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexStream4dvATI = cast(glbfn_glVertexStream4dvATI)glbindGetProcAddress(`glVertexStream4dvATI`);
  if (glVertexStream4dvATI is null) assert(0, `OpenGL function 'glVertexStream4dvATI' not found!`);
  glVertexStream4dvATI(a0,a1,);
}
__gshared glbfn_glNormalStream3bATI glNormalStream3bATI = function void (uint a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glbfn_glNormalStream3bATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNormalStream3bATI_loader (uint a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glNormalStream3bATI = cast(glbfn_glNormalStream3bATI)glbindGetProcAddress(`glNormalStream3bATI`);
  if (glNormalStream3bATI is null) assert(0, `OpenGL function 'glNormalStream3bATI' not found!`);
  glNormalStream3bATI(a0,a1,a2,a3,);
}
__gshared glbfn_glNormalStream3bvATI glNormalStream3bvATI = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glNormalStream3bvATI_loader(a0,a1,);
};
private auto glbfn_glNormalStream3bvATI_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glNormalStream3bvATI = cast(glbfn_glNormalStream3bvATI)glbindGetProcAddress(`glNormalStream3bvATI`);
  if (glNormalStream3bvATI is null) assert(0, `OpenGL function 'glNormalStream3bvATI' not found!`);
  glNormalStream3bvATI(a0,a1,);
}
__gshared glbfn_glNormalStream3sATI glNormalStream3sATI = function void (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glNormalStream3sATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNormalStream3sATI_loader (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glNormalStream3sATI = cast(glbfn_glNormalStream3sATI)glbindGetProcAddress(`glNormalStream3sATI`);
  if (glNormalStream3sATI is null) assert(0, `OpenGL function 'glNormalStream3sATI' not found!`);
  glNormalStream3sATI(a0,a1,a2,a3,);
}
__gshared glbfn_glNormalStream3svATI glNormalStream3svATI = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glNormalStream3svATI_loader(a0,a1,);
};
private auto glbfn_glNormalStream3svATI_loader (uint a0, const(short)* a1) nothrow @nogc {
  glNormalStream3svATI = cast(glbfn_glNormalStream3svATI)glbindGetProcAddress(`glNormalStream3svATI`);
  if (glNormalStream3svATI is null) assert(0, `OpenGL function 'glNormalStream3svATI' not found!`);
  glNormalStream3svATI(a0,a1,);
}
__gshared glbfn_glNormalStream3iATI glNormalStream3iATI = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glNormalStream3iATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNormalStream3iATI_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glNormalStream3iATI = cast(glbfn_glNormalStream3iATI)glbindGetProcAddress(`glNormalStream3iATI`);
  if (glNormalStream3iATI is null) assert(0, `OpenGL function 'glNormalStream3iATI' not found!`);
  glNormalStream3iATI(a0,a1,a2,a3,);
}
__gshared glbfn_glNormalStream3ivATI glNormalStream3ivATI = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glNormalStream3ivATI_loader(a0,a1,);
};
private auto glbfn_glNormalStream3ivATI_loader (uint a0, const(int)* a1) nothrow @nogc {
  glNormalStream3ivATI = cast(glbfn_glNormalStream3ivATI)glbindGetProcAddress(`glNormalStream3ivATI`);
  if (glNormalStream3ivATI is null) assert(0, `OpenGL function 'glNormalStream3ivATI' not found!`);
  glNormalStream3ivATI(a0,a1,);
}
__gshared glbfn_glNormalStream3fATI glNormalStream3fATI = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glNormalStream3fATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNormalStream3fATI_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glNormalStream3fATI = cast(glbfn_glNormalStream3fATI)glbindGetProcAddress(`glNormalStream3fATI`);
  if (glNormalStream3fATI is null) assert(0, `OpenGL function 'glNormalStream3fATI' not found!`);
  glNormalStream3fATI(a0,a1,a2,a3,);
}
__gshared glbfn_glNormalStream3fvATI glNormalStream3fvATI = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glNormalStream3fvATI_loader(a0,a1,);
};
private auto glbfn_glNormalStream3fvATI_loader (uint a0, const(float)* a1) nothrow @nogc {
  glNormalStream3fvATI = cast(glbfn_glNormalStream3fvATI)glbindGetProcAddress(`glNormalStream3fvATI`);
  if (glNormalStream3fvATI is null) assert(0, `OpenGL function 'glNormalStream3fvATI' not found!`);
  glNormalStream3fvATI(a0,a1,);
}
__gshared glbfn_glNormalStream3dATI glNormalStream3dATI = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glNormalStream3dATI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNormalStream3dATI_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glNormalStream3dATI = cast(glbfn_glNormalStream3dATI)glbindGetProcAddress(`glNormalStream3dATI`);
  if (glNormalStream3dATI is null) assert(0, `OpenGL function 'glNormalStream3dATI' not found!`);
  glNormalStream3dATI(a0,a1,a2,a3,);
}
__gshared glbfn_glNormalStream3dvATI glNormalStream3dvATI = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glNormalStream3dvATI_loader(a0,a1,);
};
private auto glbfn_glNormalStream3dvATI_loader (uint a0, const(double)* a1) nothrow @nogc {
  glNormalStream3dvATI = cast(glbfn_glNormalStream3dvATI)glbindGetProcAddress(`glNormalStream3dvATI`);
  if (glNormalStream3dvATI is null) assert(0, `OpenGL function 'glNormalStream3dvATI' not found!`);
  glNormalStream3dvATI(a0,a1,);
}
__gshared glbfn_glClientActiveVertexStreamATI glClientActiveVertexStreamATI = function void (uint a0) nothrow @nogc {
  glbfn_glClientActiveVertexStreamATI_loader(a0,);
};
private auto glbfn_glClientActiveVertexStreamATI_loader (uint a0) nothrow @nogc {
  glClientActiveVertexStreamATI = cast(glbfn_glClientActiveVertexStreamATI)glbindGetProcAddress(`glClientActiveVertexStreamATI`);
  if (glClientActiveVertexStreamATI is null) assert(0, `OpenGL function 'glClientActiveVertexStreamATI' not found!`);
  glClientActiveVertexStreamATI(a0,);
}
__gshared glbfn_glVertexBlendEnviATI glVertexBlendEnviATI = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glVertexBlendEnviATI_loader(a0,a1,);
};
private auto glbfn_glVertexBlendEnviATI_loader (uint a0, int a1) nothrow @nogc {
  glVertexBlendEnviATI = cast(glbfn_glVertexBlendEnviATI)glbindGetProcAddress(`glVertexBlendEnviATI`);
  if (glVertexBlendEnviATI is null) assert(0, `OpenGL function 'glVertexBlendEnviATI' not found!`);
  glVertexBlendEnviATI(a0,a1,);
}
__gshared glbfn_glVertexBlendEnvfATI glVertexBlendEnvfATI = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glVertexBlendEnvfATI_loader(a0,a1,);
};
private auto glbfn_glVertexBlendEnvfATI_loader (uint a0, float a1) nothrow @nogc {
  glVertexBlendEnvfATI = cast(glbfn_glVertexBlendEnvfATI)glbindGetProcAddress(`glVertexBlendEnvfATI`);
  if (glVertexBlendEnvfATI is null) assert(0, `OpenGL function 'glVertexBlendEnvfATI' not found!`);
  glVertexBlendEnvfATI(a0,a1,);
}
__gshared glbfn_glUniformBufferEXT glUniformBufferEXT = function void (uint a0, int a1, uint a2) nothrow @nogc {
  glbfn_glUniformBufferEXT_loader(a0,a1,a2,);
};
private auto glbfn_glUniformBufferEXT_loader (uint a0, int a1, uint a2) nothrow @nogc {
  glUniformBufferEXT = cast(glbfn_glUniformBufferEXT)glbindGetProcAddress(`glUniformBufferEXT`);
  if (glUniformBufferEXT is null) assert(0, `OpenGL function 'glUniformBufferEXT' not found!`);
  glUniformBufferEXT(a0,a1,a2,);
}
__gshared glbfn_glGetUniformBufferSizeEXT glGetUniformBufferSizeEXT = function int (uint a0, int a1) nothrow @nogc {
  return glbfn_glGetUniformBufferSizeEXT_loader(a0,a1,);
};
private auto glbfn_glGetUniformBufferSizeEXT_loader (uint a0, int a1) nothrow @nogc {
  glGetUniformBufferSizeEXT = cast(glbfn_glGetUniformBufferSizeEXT)glbindGetProcAddress(`glGetUniformBufferSizeEXT`);
  if (glGetUniformBufferSizeEXT is null) assert(0, `OpenGL function 'glGetUniformBufferSizeEXT' not found!`);
  return glGetUniformBufferSizeEXT(a0,a1,);
}
static if (size_t.sizeof == 4) {
__gshared glbfn_glGetUniformOffsetEXT glGetUniformOffsetEXT = function int (uint a0, int a1) nothrow @nogc {
  return glbfn_glGetUniformOffsetEXT_loader(a0,a1,);
};
private auto glbfn_glGetUniformOffsetEXT_loader (uint a0, int a1) nothrow @nogc {
  glGetUniformOffsetEXT = cast(glbfn_glGetUniformOffsetEXT)glbindGetProcAddress(`glGetUniformOffsetEXT`);
  if (glGetUniformOffsetEXT is null) assert(0, `OpenGL function 'glGetUniformOffsetEXT' not found!`);
  return glGetUniformOffsetEXT(a0,a1,);
}
}
__gshared glbfn_glBlendColorEXT glBlendColorEXT = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glBlendColorEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBlendColorEXT_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glBlendColorEXT = cast(glbfn_glBlendColorEXT)glbindGetProcAddress(`glBlendColorEXT`);
  if (glBlendColorEXT is null) assert(0, `OpenGL function 'glBlendColorEXT' not found!`);
  glBlendColorEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glBlendEquationSeparateEXT glBlendEquationSeparateEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBlendEquationSeparateEXT_loader(a0,a1,);
};
private auto glbfn_glBlendEquationSeparateEXT_loader (uint a0, uint a1) nothrow @nogc {
  glBlendEquationSeparateEXT = cast(glbfn_glBlendEquationSeparateEXT)glbindGetProcAddress(`glBlendEquationSeparateEXT`);
  if (glBlendEquationSeparateEXT is null) assert(0, `OpenGL function 'glBlendEquationSeparateEXT' not found!`);
  glBlendEquationSeparateEXT(a0,a1,);
}
__gshared glbfn_glBlendFuncSeparateEXT glBlendFuncSeparateEXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glBlendFuncSeparateEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBlendFuncSeparateEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glBlendFuncSeparateEXT = cast(glbfn_glBlendFuncSeparateEXT)glbindGetProcAddress(`glBlendFuncSeparateEXT`);
  if (glBlendFuncSeparateEXT is null) assert(0, `OpenGL function 'glBlendFuncSeparateEXT' not found!`);
  glBlendFuncSeparateEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glBlendEquationEXT glBlendEquationEXT = function void (uint a0) nothrow @nogc {
  glbfn_glBlendEquationEXT_loader(a0,);
};
private auto glbfn_glBlendEquationEXT_loader (uint a0) nothrow @nogc {
  glBlendEquationEXT = cast(glbfn_glBlendEquationEXT)glbindGetProcAddress(`glBlendEquationEXT`);
  if (glBlendEquationEXT is null) assert(0, `OpenGL function 'glBlendEquationEXT' not found!`);
  glBlendEquationEXT(a0,);
}
__gshared glbfn_glColorSubTableEXT glColorSubTableEXT = function void (uint a0, int a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glColorSubTableEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glColorSubTableEXT_loader (uint a0, int a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glColorSubTableEXT = cast(glbfn_glColorSubTableEXT)glbindGetProcAddress(`glColorSubTableEXT`);
  if (glColorSubTableEXT is null) assert(0, `OpenGL function 'glColorSubTableEXT' not found!`);
  glColorSubTableEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glCopyColorSubTableEXT glCopyColorSubTableEXT = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyColorSubTableEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glCopyColorSubTableEXT_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyColorSubTableEXT = cast(glbfn_glCopyColorSubTableEXT)glbindGetProcAddress(`glCopyColorSubTableEXT`);
  if (glCopyColorSubTableEXT is null) assert(0, `OpenGL function 'glCopyColorSubTableEXT' not found!`);
  glCopyColorSubTableEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glLockArraysEXT glLockArraysEXT = function void (int a0, int a1) nothrow @nogc {
  glbfn_glLockArraysEXT_loader(a0,a1,);
};
private auto glbfn_glLockArraysEXT_loader (int a0, int a1) nothrow @nogc {
  glLockArraysEXT = cast(glbfn_glLockArraysEXT)glbindGetProcAddress(`glLockArraysEXT`);
  if (glLockArraysEXT is null) assert(0, `OpenGL function 'glLockArraysEXT' not found!`);
  glLockArraysEXT(a0,a1,);
}
__gshared glbfn_glUnlockArraysEXT glUnlockArraysEXT = function void () nothrow @nogc {
  glbfn_glUnlockArraysEXT_loader();
};
private auto glbfn_glUnlockArraysEXT_loader () nothrow @nogc {
  glUnlockArraysEXT = cast(glbfn_glUnlockArraysEXT)glbindGetProcAddress(`glUnlockArraysEXT`);
  if (glUnlockArraysEXT is null) assert(0, `OpenGL function 'glUnlockArraysEXT' not found!`);
  glUnlockArraysEXT();
}
__gshared glbfn_glConvolutionFilter1DEXT glConvolutionFilter1DEXT = function void (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glConvolutionFilter1DEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glConvolutionFilter1DEXT_loader (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glConvolutionFilter1DEXT = cast(glbfn_glConvolutionFilter1DEXT)glbindGetProcAddress(`glConvolutionFilter1DEXT`);
  if (glConvolutionFilter1DEXT is null) assert(0, `OpenGL function 'glConvolutionFilter1DEXT' not found!`);
  glConvolutionFilter1DEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glConvolutionFilter2DEXT glConvolutionFilter2DEXT = function void (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glConvolutionFilter2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glConvolutionFilter2DEXT_loader (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glConvolutionFilter2DEXT = cast(glbfn_glConvolutionFilter2DEXT)glbindGetProcAddress(`glConvolutionFilter2DEXT`);
  if (glConvolutionFilter2DEXT is null) assert(0, `OpenGL function 'glConvolutionFilter2DEXT' not found!`);
  glConvolutionFilter2DEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glConvolutionParameterfEXT glConvolutionParameterfEXT = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glConvolutionParameterfEXT_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameterfEXT_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glConvolutionParameterfEXT = cast(glbfn_glConvolutionParameterfEXT)glbindGetProcAddress(`glConvolutionParameterfEXT`);
  if (glConvolutionParameterfEXT is null) assert(0, `OpenGL function 'glConvolutionParameterfEXT' not found!`);
  glConvolutionParameterfEXT(a0,a1,a2,);
}
__gshared glbfn_glConvolutionParameterfvEXT glConvolutionParameterfvEXT = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glConvolutionParameterfvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameterfvEXT_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glConvolutionParameterfvEXT = cast(glbfn_glConvolutionParameterfvEXT)glbindGetProcAddress(`glConvolutionParameterfvEXT`);
  if (glConvolutionParameterfvEXT is null) assert(0, `OpenGL function 'glConvolutionParameterfvEXT' not found!`);
  glConvolutionParameterfvEXT(a0,a1,a2,);
}
__gshared glbfn_glConvolutionParameteriEXT glConvolutionParameteriEXT = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glConvolutionParameteriEXT_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameteriEXT_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glConvolutionParameteriEXT = cast(glbfn_glConvolutionParameteriEXT)glbindGetProcAddress(`glConvolutionParameteriEXT`);
  if (glConvolutionParameteriEXT is null) assert(0, `OpenGL function 'glConvolutionParameteriEXT' not found!`);
  glConvolutionParameteriEXT(a0,a1,a2,);
}
__gshared glbfn_glConvolutionParameterivEXT glConvolutionParameterivEXT = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glConvolutionParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameterivEXT_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glConvolutionParameterivEXT = cast(glbfn_glConvolutionParameterivEXT)glbindGetProcAddress(`glConvolutionParameterivEXT`);
  if (glConvolutionParameterivEXT is null) assert(0, `OpenGL function 'glConvolutionParameterivEXT' not found!`);
  glConvolutionParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glCopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyConvolutionFilter1DEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glCopyConvolutionFilter1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyConvolutionFilter1DEXT = cast(glbfn_glCopyConvolutionFilter1DEXT)glbindGetProcAddress(`glCopyConvolutionFilter1DEXT`);
  if (glCopyConvolutionFilter1DEXT is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1DEXT' not found!`);
  glCopyConvolutionFilter1DEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glCopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glCopyConvolutionFilter2DEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glCopyConvolutionFilter2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glCopyConvolutionFilter2DEXT = cast(glbfn_glCopyConvolutionFilter2DEXT)glbindGetProcAddress(`glCopyConvolutionFilter2DEXT`);
  if (glCopyConvolutionFilter2DEXT is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2DEXT' not found!`);
  glCopyConvolutionFilter2DEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetConvolutionFilterEXT glGetConvolutionFilterEXT = function void (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glbfn_glGetConvolutionFilterEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetConvolutionFilterEXT_loader (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glGetConvolutionFilterEXT = cast(glbfn_glGetConvolutionFilterEXT)glbindGetProcAddress(`glGetConvolutionFilterEXT`);
  if (glGetConvolutionFilterEXT is null) assert(0, `OpenGL function 'glGetConvolutionFilterEXT' not found!`);
  glGetConvolutionFilterEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetConvolutionParameterfvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetConvolutionParameterfvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetConvolutionParameterfvEXT = cast(glbfn_glGetConvolutionParameterfvEXT)glbindGetProcAddress(`glGetConvolutionParameterfvEXT`);
  if (glGetConvolutionParameterfvEXT is null) assert(0, `OpenGL function 'glGetConvolutionParameterfvEXT' not found!`);
  glGetConvolutionParameterfvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetConvolutionParameterivEXT glGetConvolutionParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetConvolutionParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetConvolutionParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetConvolutionParameterivEXT = cast(glbfn_glGetConvolutionParameterivEXT)glbindGetProcAddress(`glGetConvolutionParameterivEXT`);
  if (glGetConvolutionParameterivEXT is null) assert(0, `OpenGL function 'glGetConvolutionParameterivEXT' not found!`);
  glGetConvolutionParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetSeparableFilterEXT glGetSeparableFilterEXT = function void (uint a0, uint a1, uint a2, void* a3, void* a4, void* a5) nothrow @nogc {
  glbfn_glGetSeparableFilterEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetSeparableFilterEXT_loader (uint a0, uint a1, uint a2, void* a3, void* a4, void* a5) nothrow @nogc {
  glGetSeparableFilterEXT = cast(glbfn_glGetSeparableFilterEXT)glbindGetProcAddress(`glGetSeparableFilterEXT`);
  if (glGetSeparableFilterEXT is null) assert(0, `OpenGL function 'glGetSeparableFilterEXT' not found!`);
  glGetSeparableFilterEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glSeparableFilter2DEXT glSeparableFilter2DEXT = function void (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6, const(void)* a7) nothrow @nogc {
  glbfn_glSeparableFilter2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glSeparableFilter2DEXT_loader (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6, const(void)* a7) nothrow @nogc {
  glSeparableFilter2DEXT = cast(glbfn_glSeparableFilter2DEXT)glbindGetProcAddress(`glSeparableFilter2DEXT`);
  if (glSeparableFilter2DEXT is null) assert(0, `OpenGL function 'glSeparableFilter2DEXT' not found!`);
  glSeparableFilter2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTangent3bEXT glTangent3bEXT = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glTangent3bEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTangent3bEXT_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glTangent3bEXT = cast(glbfn_glTangent3bEXT)glbindGetProcAddress(`glTangent3bEXT`);
  if (glTangent3bEXT is null) assert(0, `OpenGL function 'glTangent3bEXT' not found!`);
  glTangent3bEXT(a0,a1,a2,);
}
__gshared glbfn_glTangent3bvEXT glTangent3bvEXT = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glTangent3bvEXT_loader(a0,);
};
private auto glbfn_glTangent3bvEXT_loader (const(byte)* a0) nothrow @nogc {
  glTangent3bvEXT = cast(glbfn_glTangent3bvEXT)glbindGetProcAddress(`glTangent3bvEXT`);
  if (glTangent3bvEXT is null) assert(0, `OpenGL function 'glTangent3bvEXT' not found!`);
  glTangent3bvEXT(a0,);
}
__gshared glbfn_glTangent3dEXT glTangent3dEXT = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glTangent3dEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTangent3dEXT_loader (double a0, double a1, double a2) nothrow @nogc {
  glTangent3dEXT = cast(glbfn_glTangent3dEXT)glbindGetProcAddress(`glTangent3dEXT`);
  if (glTangent3dEXT is null) assert(0, `OpenGL function 'glTangent3dEXT' not found!`);
  glTangent3dEXT(a0,a1,a2,);
}
__gshared glbfn_glTangent3dvEXT glTangent3dvEXT = function void (const(double)* a0) nothrow @nogc {
  glbfn_glTangent3dvEXT_loader(a0,);
};
private auto glbfn_glTangent3dvEXT_loader (const(double)* a0) nothrow @nogc {
  glTangent3dvEXT = cast(glbfn_glTangent3dvEXT)glbindGetProcAddress(`glTangent3dvEXT`);
  if (glTangent3dvEXT is null) assert(0, `OpenGL function 'glTangent3dvEXT' not found!`);
  glTangent3dvEXT(a0,);
}
__gshared glbfn_glTangent3fEXT glTangent3fEXT = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glTangent3fEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTangent3fEXT_loader (float a0, float a1, float a2) nothrow @nogc {
  glTangent3fEXT = cast(glbfn_glTangent3fEXT)glbindGetProcAddress(`glTangent3fEXT`);
  if (glTangent3fEXT is null) assert(0, `OpenGL function 'glTangent3fEXT' not found!`);
  glTangent3fEXT(a0,a1,a2,);
}
__gshared glbfn_glTangent3fvEXT glTangent3fvEXT = function void (const(float)* a0) nothrow @nogc {
  glbfn_glTangent3fvEXT_loader(a0,);
};
private auto glbfn_glTangent3fvEXT_loader (const(float)* a0) nothrow @nogc {
  glTangent3fvEXT = cast(glbfn_glTangent3fvEXT)glbindGetProcAddress(`glTangent3fvEXT`);
  if (glTangent3fvEXT is null) assert(0, `OpenGL function 'glTangent3fvEXT' not found!`);
  glTangent3fvEXT(a0,);
}
__gshared glbfn_glTangent3iEXT glTangent3iEXT = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glTangent3iEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTangent3iEXT_loader (int a0, int a1, int a2) nothrow @nogc {
  glTangent3iEXT = cast(glbfn_glTangent3iEXT)glbindGetProcAddress(`glTangent3iEXT`);
  if (glTangent3iEXT is null) assert(0, `OpenGL function 'glTangent3iEXT' not found!`);
  glTangent3iEXT(a0,a1,a2,);
}
__gshared glbfn_glTangent3ivEXT glTangent3ivEXT = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTangent3ivEXT_loader(a0,);
};
private auto glbfn_glTangent3ivEXT_loader (const(int)* a0) nothrow @nogc {
  glTangent3ivEXT = cast(glbfn_glTangent3ivEXT)glbindGetProcAddress(`glTangent3ivEXT`);
  if (glTangent3ivEXT is null) assert(0, `OpenGL function 'glTangent3ivEXT' not found!`);
  glTangent3ivEXT(a0,);
}
__gshared glbfn_glTangent3sEXT glTangent3sEXT = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glTangent3sEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTangent3sEXT_loader (short a0, short a1, short a2) nothrow @nogc {
  glTangent3sEXT = cast(glbfn_glTangent3sEXT)glbindGetProcAddress(`glTangent3sEXT`);
  if (glTangent3sEXT is null) assert(0, `OpenGL function 'glTangent3sEXT' not found!`);
  glTangent3sEXT(a0,a1,a2,);
}
__gshared glbfn_glTangent3svEXT glTangent3svEXT = function void (const(short)* a0) nothrow @nogc {
  glbfn_glTangent3svEXT_loader(a0,);
};
private auto glbfn_glTangent3svEXT_loader (const(short)* a0) nothrow @nogc {
  glTangent3svEXT = cast(glbfn_glTangent3svEXT)glbindGetProcAddress(`glTangent3svEXT`);
  if (glTangent3svEXT is null) assert(0, `OpenGL function 'glTangent3svEXT' not found!`);
  glTangent3svEXT(a0,);
}
__gshared glbfn_glBinormal3bEXT glBinormal3bEXT = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glBinormal3bEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBinormal3bEXT_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glBinormal3bEXT = cast(glbfn_glBinormal3bEXT)glbindGetProcAddress(`glBinormal3bEXT`);
  if (glBinormal3bEXT is null) assert(0, `OpenGL function 'glBinormal3bEXT' not found!`);
  glBinormal3bEXT(a0,a1,a2,);
}
__gshared glbfn_glBinormal3bvEXT glBinormal3bvEXT = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glBinormal3bvEXT_loader(a0,);
};
private auto glbfn_glBinormal3bvEXT_loader (const(byte)* a0) nothrow @nogc {
  glBinormal3bvEXT = cast(glbfn_glBinormal3bvEXT)glbindGetProcAddress(`glBinormal3bvEXT`);
  if (glBinormal3bvEXT is null) assert(0, `OpenGL function 'glBinormal3bvEXT' not found!`);
  glBinormal3bvEXT(a0,);
}
__gshared glbfn_glBinormal3dEXT glBinormal3dEXT = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glBinormal3dEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBinormal3dEXT_loader (double a0, double a1, double a2) nothrow @nogc {
  glBinormal3dEXT = cast(glbfn_glBinormal3dEXT)glbindGetProcAddress(`glBinormal3dEXT`);
  if (glBinormal3dEXT is null) assert(0, `OpenGL function 'glBinormal3dEXT' not found!`);
  glBinormal3dEXT(a0,a1,a2,);
}
__gshared glbfn_glBinormal3dvEXT glBinormal3dvEXT = function void (const(double)* a0) nothrow @nogc {
  glbfn_glBinormal3dvEXT_loader(a0,);
};
private auto glbfn_glBinormal3dvEXT_loader (const(double)* a0) nothrow @nogc {
  glBinormal3dvEXT = cast(glbfn_glBinormal3dvEXT)glbindGetProcAddress(`glBinormal3dvEXT`);
  if (glBinormal3dvEXT is null) assert(0, `OpenGL function 'glBinormal3dvEXT' not found!`);
  glBinormal3dvEXT(a0,);
}
__gshared glbfn_glBinormal3fEXT glBinormal3fEXT = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glBinormal3fEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBinormal3fEXT_loader (float a0, float a1, float a2) nothrow @nogc {
  glBinormal3fEXT = cast(glbfn_glBinormal3fEXT)glbindGetProcAddress(`glBinormal3fEXT`);
  if (glBinormal3fEXT is null) assert(0, `OpenGL function 'glBinormal3fEXT' not found!`);
  glBinormal3fEXT(a0,a1,a2,);
}
__gshared glbfn_glBinormal3fvEXT glBinormal3fvEXT = function void (const(float)* a0) nothrow @nogc {
  glbfn_glBinormal3fvEXT_loader(a0,);
};
private auto glbfn_glBinormal3fvEXT_loader (const(float)* a0) nothrow @nogc {
  glBinormal3fvEXT = cast(glbfn_glBinormal3fvEXT)glbindGetProcAddress(`glBinormal3fvEXT`);
  if (glBinormal3fvEXT is null) assert(0, `OpenGL function 'glBinormal3fvEXT' not found!`);
  glBinormal3fvEXT(a0,);
}
__gshared glbfn_glBinormal3iEXT glBinormal3iEXT = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glBinormal3iEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBinormal3iEXT_loader (int a0, int a1, int a2) nothrow @nogc {
  glBinormal3iEXT = cast(glbfn_glBinormal3iEXT)glbindGetProcAddress(`glBinormal3iEXT`);
  if (glBinormal3iEXT is null) assert(0, `OpenGL function 'glBinormal3iEXT' not found!`);
  glBinormal3iEXT(a0,a1,a2,);
}
__gshared glbfn_glBinormal3ivEXT glBinormal3ivEXT = function void (const(int)* a0) nothrow @nogc {
  glbfn_glBinormal3ivEXT_loader(a0,);
};
private auto glbfn_glBinormal3ivEXT_loader (const(int)* a0) nothrow @nogc {
  glBinormal3ivEXT = cast(glbfn_glBinormal3ivEXT)glbindGetProcAddress(`glBinormal3ivEXT`);
  if (glBinormal3ivEXT is null) assert(0, `OpenGL function 'glBinormal3ivEXT' not found!`);
  glBinormal3ivEXT(a0,);
}
__gshared glbfn_glBinormal3sEXT glBinormal3sEXT = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glBinormal3sEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBinormal3sEXT_loader (short a0, short a1, short a2) nothrow @nogc {
  glBinormal3sEXT = cast(glbfn_glBinormal3sEXT)glbindGetProcAddress(`glBinormal3sEXT`);
  if (glBinormal3sEXT is null) assert(0, `OpenGL function 'glBinormal3sEXT' not found!`);
  glBinormal3sEXT(a0,a1,a2,);
}
__gshared glbfn_glBinormal3svEXT glBinormal3svEXT = function void (const(short)* a0) nothrow @nogc {
  glbfn_glBinormal3svEXT_loader(a0,);
};
private auto glbfn_glBinormal3svEXT_loader (const(short)* a0) nothrow @nogc {
  glBinormal3svEXT = cast(glbfn_glBinormal3svEXT)glbindGetProcAddress(`glBinormal3svEXT`);
  if (glBinormal3svEXT is null) assert(0, `OpenGL function 'glBinormal3svEXT' not found!`);
  glBinormal3svEXT(a0,);
}
__gshared glbfn_glTangentPointerEXT glTangentPointerEXT = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glTangentPointerEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTangentPointerEXT_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glTangentPointerEXT = cast(glbfn_glTangentPointerEXT)glbindGetProcAddress(`glTangentPointerEXT`);
  if (glTangentPointerEXT is null) assert(0, `OpenGL function 'glTangentPointerEXT' not found!`);
  glTangentPointerEXT(a0,a1,a2,);
}
__gshared glbfn_glBinormalPointerEXT glBinormalPointerEXT = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glBinormalPointerEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBinormalPointerEXT_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glBinormalPointerEXT = cast(glbfn_glBinormalPointerEXT)glbindGetProcAddress(`glBinormalPointerEXT`);
  if (glBinormalPointerEXT is null) assert(0, `OpenGL function 'glBinormalPointerEXT' not found!`);
  glBinormalPointerEXT(a0,a1,a2,);
}
__gshared glbfn_glCopyTexImage1DEXT glCopyTexImage1DEXT = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glCopyTexImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCopyTexImage1DEXT_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glCopyTexImage1DEXT = cast(glbfn_glCopyTexImage1DEXT)glbindGetProcAddress(`glCopyTexImage1DEXT`);
  if (glCopyTexImage1DEXT is null) assert(0, `OpenGL function 'glCopyTexImage1DEXT' not found!`);
  glCopyTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCopyTexImage2DEXT glCopyTexImage2DEXT = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glCopyTexImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCopyTexImage2DEXT_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glCopyTexImage2DEXT = cast(glbfn_glCopyTexImage2DEXT)glbindGetProcAddress(`glCopyTexImage2DEXT`);
  if (glCopyTexImage2DEXT is null) assert(0, `OpenGL function 'glCopyTexImage2DEXT' not found!`);
  glCopyTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCopyTexSubImage1DEXT glCopyTexSubImage1DEXT = function void (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glCopyTexSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glCopyTexSubImage1DEXT_loader (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glCopyTexSubImage1DEXT = cast(glbfn_glCopyTexSubImage1DEXT)glbindGetProcAddress(`glCopyTexSubImage1DEXT`);
  if (glCopyTexSubImage1DEXT is null) assert(0, `OpenGL function 'glCopyTexSubImage1DEXT' not found!`);
  glCopyTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glCopyTexSubImage2DEXT glCopyTexSubImage2DEXT = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glCopyTexSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCopyTexSubImage2DEXT_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glCopyTexSubImage2DEXT = cast(glbfn_glCopyTexSubImage2DEXT)glbindGetProcAddress(`glCopyTexSubImage2DEXT`);
  if (glCopyTexSubImage2DEXT is null) assert(0, `OpenGL function 'glCopyTexSubImage2DEXT' not found!`);
  glCopyTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCopyTexSubImage3DEXT glCopyTexSubImage3DEXT = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glbfn_glCopyTexSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCopyTexSubImage3DEXT_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glCopyTexSubImage3DEXT = cast(glbfn_glCopyTexSubImage3DEXT)glbindGetProcAddress(`glCopyTexSubImage3DEXT`);
  if (glCopyTexSubImage3DEXT is null) assert(0, `OpenGL function 'glCopyTexSubImage3DEXT' not found!`);
  glCopyTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCullParameterdvEXT glCullParameterdvEXT = function void (uint a0, double* a1) nothrow @nogc {
  glbfn_glCullParameterdvEXT_loader(a0,a1,);
};
private auto glbfn_glCullParameterdvEXT_loader (uint a0, double* a1) nothrow @nogc {
  glCullParameterdvEXT = cast(glbfn_glCullParameterdvEXT)glbindGetProcAddress(`glCullParameterdvEXT`);
  if (glCullParameterdvEXT is null) assert(0, `OpenGL function 'glCullParameterdvEXT' not found!`);
  glCullParameterdvEXT(a0,a1,);
}
__gshared glbfn_glCullParameterfvEXT glCullParameterfvEXT = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glCullParameterfvEXT_loader(a0,a1,);
};
private auto glbfn_glCullParameterfvEXT_loader (uint a0, float* a1) nothrow @nogc {
  glCullParameterfvEXT = cast(glbfn_glCullParameterfvEXT)glbindGetProcAddress(`glCullParameterfvEXT`);
  if (glCullParameterfvEXT is null) assert(0, `OpenGL function 'glCullParameterfvEXT' not found!`);
  glCullParameterfvEXT(a0,a1,);
}
__gshared glbfn_glLabelObjectEXT glLabelObjectEXT = function void (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glbfn_glLabelObjectEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glLabelObjectEXT_loader (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glLabelObjectEXT = cast(glbfn_glLabelObjectEXT)glbindGetProcAddress(`glLabelObjectEXT`);
  if (glLabelObjectEXT is null) assert(0, `OpenGL function 'glLabelObjectEXT' not found!`);
  glLabelObjectEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetObjectLabelEXT glGetObjectLabelEXT = function void (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glbfn_glGetObjectLabelEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetObjectLabelEXT_loader (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glGetObjectLabelEXT = cast(glbfn_glGetObjectLabelEXT)glbindGetProcAddress(`glGetObjectLabelEXT`);
  if (glGetObjectLabelEXT is null) assert(0, `OpenGL function 'glGetObjectLabelEXT' not found!`);
  glGetObjectLabelEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glInsertEventMarkerEXT glInsertEventMarkerEXT = function void (int a0, const(char)* a1) nothrow @nogc {
  glbfn_glInsertEventMarkerEXT_loader(a0,a1,);
};
private auto glbfn_glInsertEventMarkerEXT_loader (int a0, const(char)* a1) nothrow @nogc {
  glInsertEventMarkerEXT = cast(glbfn_glInsertEventMarkerEXT)glbindGetProcAddress(`glInsertEventMarkerEXT`);
  if (glInsertEventMarkerEXT is null) assert(0, `OpenGL function 'glInsertEventMarkerEXT' not found!`);
  glInsertEventMarkerEXT(a0,a1,);
}
__gshared glbfn_glPushGroupMarkerEXT glPushGroupMarkerEXT = function void (int a0, const(char)* a1) nothrow @nogc {
  glbfn_glPushGroupMarkerEXT_loader(a0,a1,);
};
private auto glbfn_glPushGroupMarkerEXT_loader (int a0, const(char)* a1) nothrow @nogc {
  glPushGroupMarkerEXT = cast(glbfn_glPushGroupMarkerEXT)glbindGetProcAddress(`glPushGroupMarkerEXT`);
  if (glPushGroupMarkerEXT is null) assert(0, `OpenGL function 'glPushGroupMarkerEXT' not found!`);
  glPushGroupMarkerEXT(a0,a1,);
}
__gshared glbfn_glPopGroupMarkerEXT glPopGroupMarkerEXT = function void () nothrow @nogc {
  glbfn_glPopGroupMarkerEXT_loader();
};
private auto glbfn_glPopGroupMarkerEXT_loader () nothrow @nogc {
  glPopGroupMarkerEXT = cast(glbfn_glPopGroupMarkerEXT)glbindGetProcAddress(`glPopGroupMarkerEXT`);
  if (glPopGroupMarkerEXT is null) assert(0, `OpenGL function 'glPopGroupMarkerEXT' not found!`);
  glPopGroupMarkerEXT();
}
__gshared glbfn_glDepthBoundsEXT glDepthBoundsEXT = function void (double a0, double a1) nothrow @nogc {
  glbfn_glDepthBoundsEXT_loader(a0,a1,);
};
private auto glbfn_glDepthBoundsEXT_loader (double a0, double a1) nothrow @nogc {
  glDepthBoundsEXT = cast(glbfn_glDepthBoundsEXT)glbindGetProcAddress(`glDepthBoundsEXT`);
  if (glDepthBoundsEXT is null) assert(0, `OpenGL function 'glDepthBoundsEXT' not found!`);
  glDepthBoundsEXT(a0,a1,);
}
__gshared glbfn_glMatrixLoadfEXT glMatrixLoadfEXT = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixLoadfEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixLoadfEXT_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixLoadfEXT = cast(glbfn_glMatrixLoadfEXT)glbindGetProcAddress(`glMatrixLoadfEXT`);
  if (glMatrixLoadfEXT is null) assert(0, `OpenGL function 'glMatrixLoadfEXT' not found!`);
  glMatrixLoadfEXT(a0,a1,);
}
__gshared glbfn_glMatrixLoaddEXT glMatrixLoaddEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMatrixLoaddEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixLoaddEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMatrixLoaddEXT = cast(glbfn_glMatrixLoaddEXT)glbindGetProcAddress(`glMatrixLoaddEXT`);
  if (glMatrixLoaddEXT is null) assert(0, `OpenGL function 'glMatrixLoaddEXT' not found!`);
  glMatrixLoaddEXT(a0,a1,);
}
__gshared glbfn_glMatrixMultfEXT glMatrixMultfEXT = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixMultfEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixMultfEXT_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixMultfEXT = cast(glbfn_glMatrixMultfEXT)glbindGetProcAddress(`glMatrixMultfEXT`);
  if (glMatrixMultfEXT is null) assert(0, `OpenGL function 'glMatrixMultfEXT' not found!`);
  glMatrixMultfEXT(a0,a1,);
}
__gshared glbfn_glMatrixMultdEXT glMatrixMultdEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMatrixMultdEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixMultdEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMatrixMultdEXT = cast(glbfn_glMatrixMultdEXT)glbindGetProcAddress(`glMatrixMultdEXT`);
  if (glMatrixMultdEXT is null) assert(0, `OpenGL function 'glMatrixMultdEXT' not found!`);
  glMatrixMultdEXT(a0,a1,);
}
__gshared glbfn_glMatrixLoadIdentityEXT glMatrixLoadIdentityEXT = function void (uint a0) nothrow @nogc {
  glbfn_glMatrixLoadIdentityEXT_loader(a0,);
};
private auto glbfn_glMatrixLoadIdentityEXT_loader (uint a0) nothrow @nogc {
  glMatrixLoadIdentityEXT = cast(glbfn_glMatrixLoadIdentityEXT)glbindGetProcAddress(`glMatrixLoadIdentityEXT`);
  if (glMatrixLoadIdentityEXT is null) assert(0, `OpenGL function 'glMatrixLoadIdentityEXT' not found!`);
  glMatrixLoadIdentityEXT(a0,);
}
__gshared glbfn_glMatrixRotatefEXT glMatrixRotatefEXT = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glMatrixRotatefEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMatrixRotatefEXT_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glMatrixRotatefEXT = cast(glbfn_glMatrixRotatefEXT)glbindGetProcAddress(`glMatrixRotatefEXT`);
  if (glMatrixRotatefEXT is null) assert(0, `OpenGL function 'glMatrixRotatefEXT' not found!`);
  glMatrixRotatefEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMatrixRotatedEXT glMatrixRotatedEXT = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glMatrixRotatedEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMatrixRotatedEXT_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glMatrixRotatedEXT = cast(glbfn_glMatrixRotatedEXT)glbindGetProcAddress(`glMatrixRotatedEXT`);
  if (glMatrixRotatedEXT is null) assert(0, `OpenGL function 'glMatrixRotatedEXT' not found!`);
  glMatrixRotatedEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMatrixScalefEXT glMatrixScalefEXT = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glMatrixScalefEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMatrixScalefEXT_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glMatrixScalefEXT = cast(glbfn_glMatrixScalefEXT)glbindGetProcAddress(`glMatrixScalefEXT`);
  if (glMatrixScalefEXT is null) assert(0, `OpenGL function 'glMatrixScalefEXT' not found!`);
  glMatrixScalefEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMatrixScaledEXT glMatrixScaledEXT = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glMatrixScaledEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMatrixScaledEXT_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glMatrixScaledEXT = cast(glbfn_glMatrixScaledEXT)glbindGetProcAddress(`glMatrixScaledEXT`);
  if (glMatrixScaledEXT is null) assert(0, `OpenGL function 'glMatrixScaledEXT' not found!`);
  glMatrixScaledEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMatrixTranslatefEXT glMatrixTranslatefEXT = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glMatrixTranslatefEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMatrixTranslatefEXT_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glMatrixTranslatefEXT = cast(glbfn_glMatrixTranslatefEXT)glbindGetProcAddress(`glMatrixTranslatefEXT`);
  if (glMatrixTranslatefEXT is null) assert(0, `OpenGL function 'glMatrixTranslatefEXT' not found!`);
  glMatrixTranslatefEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMatrixTranslatedEXT glMatrixTranslatedEXT = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glMatrixTranslatedEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMatrixTranslatedEXT_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glMatrixTranslatedEXT = cast(glbfn_glMatrixTranslatedEXT)glbindGetProcAddress(`glMatrixTranslatedEXT`);
  if (glMatrixTranslatedEXT is null) assert(0, `OpenGL function 'glMatrixTranslatedEXT' not found!`);
  glMatrixTranslatedEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMatrixFrustumEXT glMatrixFrustumEXT = function void (uint a0, double a1, double a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glbfn_glMatrixFrustumEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glMatrixFrustumEXT_loader (uint a0, double a1, double a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glMatrixFrustumEXT = cast(glbfn_glMatrixFrustumEXT)glbindGetProcAddress(`glMatrixFrustumEXT`);
  if (glMatrixFrustumEXT is null) assert(0, `OpenGL function 'glMatrixFrustumEXT' not found!`);
  glMatrixFrustumEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMatrixOrthoEXT glMatrixOrthoEXT = function void (uint a0, double a1, double a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glbfn_glMatrixOrthoEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glMatrixOrthoEXT_loader (uint a0, double a1, double a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glMatrixOrthoEXT = cast(glbfn_glMatrixOrthoEXT)glbindGetProcAddress(`glMatrixOrthoEXT`);
  if (glMatrixOrthoEXT is null) assert(0, `OpenGL function 'glMatrixOrthoEXT' not found!`);
  glMatrixOrthoEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMatrixPopEXT glMatrixPopEXT = function void (uint a0) nothrow @nogc {
  glbfn_glMatrixPopEXT_loader(a0,);
};
private auto glbfn_glMatrixPopEXT_loader (uint a0) nothrow @nogc {
  glMatrixPopEXT = cast(glbfn_glMatrixPopEXT)glbindGetProcAddress(`glMatrixPopEXT`);
  if (glMatrixPopEXT is null) assert(0, `OpenGL function 'glMatrixPopEXT' not found!`);
  glMatrixPopEXT(a0,);
}
__gshared glbfn_glMatrixPushEXT glMatrixPushEXT = function void (uint a0) nothrow @nogc {
  glbfn_glMatrixPushEXT_loader(a0,);
};
private auto glbfn_glMatrixPushEXT_loader (uint a0) nothrow @nogc {
  glMatrixPushEXT = cast(glbfn_glMatrixPushEXT)glbindGetProcAddress(`glMatrixPushEXT`);
  if (glMatrixPushEXT is null) assert(0, `OpenGL function 'glMatrixPushEXT' not found!`);
  glMatrixPushEXT(a0,);
}
__gshared glbfn_glClientAttribDefaultEXT glClientAttribDefaultEXT = function void (uint a0) nothrow @nogc {
  glbfn_glClientAttribDefaultEXT_loader(a0,);
};
private auto glbfn_glClientAttribDefaultEXT_loader (uint a0) nothrow @nogc {
  glClientAttribDefaultEXT = cast(glbfn_glClientAttribDefaultEXT)glbindGetProcAddress(`glClientAttribDefaultEXT`);
  if (glClientAttribDefaultEXT is null) assert(0, `OpenGL function 'glClientAttribDefaultEXT' not found!`);
  glClientAttribDefaultEXT(a0,);
}
__gshared glbfn_glPushClientAttribDefaultEXT glPushClientAttribDefaultEXT = function void (uint a0) nothrow @nogc {
  glbfn_glPushClientAttribDefaultEXT_loader(a0,);
};
private auto glbfn_glPushClientAttribDefaultEXT_loader (uint a0) nothrow @nogc {
  glPushClientAttribDefaultEXT = cast(glbfn_glPushClientAttribDefaultEXT)glbindGetProcAddress(`glPushClientAttribDefaultEXT`);
  if (glPushClientAttribDefaultEXT is null) assert(0, `OpenGL function 'glPushClientAttribDefaultEXT' not found!`);
  glPushClientAttribDefaultEXT(a0,);
}
__gshared glbfn_glTextureParameterfEXT glTextureParameterfEXT = function void (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glbfn_glTextureParameterfEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureParameterfEXT_loader (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glTextureParameterfEXT = cast(glbfn_glTextureParameterfEXT)glbindGetProcAddress(`glTextureParameterfEXT`);
  if (glTextureParameterfEXT is null) assert(0, `OpenGL function 'glTextureParameterfEXT' not found!`);
  glTextureParameterfEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureParameterfvEXT glTextureParameterfvEXT = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glTextureParameterfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureParameterfvEXT_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glTextureParameterfvEXT = cast(glbfn_glTextureParameterfvEXT)glbindGetProcAddress(`glTextureParameterfvEXT`);
  if (glTextureParameterfvEXT is null) assert(0, `OpenGL function 'glTextureParameterfvEXT' not found!`);
  glTextureParameterfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureParameteriEXT glTextureParameteriEXT = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glTextureParameteriEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureParameteriEXT_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glTextureParameteriEXT = cast(glbfn_glTextureParameteriEXT)glbindGetProcAddress(`glTextureParameteriEXT`);
  if (glTextureParameteriEXT is null) assert(0, `OpenGL function 'glTextureParameteriEXT' not found!`);
  glTextureParameteriEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureParameterivEXT glTextureParameterivEXT = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glTextureParameterivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureParameterivEXT_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glTextureParameterivEXT = cast(glbfn_glTextureParameterivEXT)glbindGetProcAddress(`glTextureParameterivEXT`);
  if (glTextureParameterivEXT is null) assert(0, `OpenGL function 'glTextureParameterivEXT' not found!`);
  glTextureParameterivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureImage1DEXT glTextureImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glbfn_glTextureImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTextureImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glTextureImage1DEXT = cast(glbfn_glTextureImage1DEXT)glbindGetProcAddress(`glTextureImage1DEXT`);
  if (glTextureImage1DEXT is null) assert(0, `OpenGL function 'glTextureImage1DEXT' not found!`);
  glTextureImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glTextureImage2DEXT glTextureImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glbfn_glTextureImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glTextureImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glTextureImage2DEXT = cast(glbfn_glTextureImage2DEXT)glbindGetProcAddress(`glTextureImage2DEXT`);
  if (glTextureImage2DEXT is null) assert(0, `OpenGL function 'glTextureImage2DEXT' not found!`);
  glTextureImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glTextureSubImage1DEXT glTextureSubImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, uint a5, uint a6, const(void)* a7) nothrow @nogc {
  glbfn_glTextureSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTextureSubImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, uint a5, uint a6, const(void)* a7) nothrow @nogc {
  glTextureSubImage1DEXT = cast(glbfn_glTextureSubImage1DEXT)glbindGetProcAddress(`glTextureSubImage1DEXT`);
  if (glTextureSubImage1DEXT is null) assert(0, `OpenGL function 'glTextureSubImage1DEXT' not found!`);
  glTextureSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTextureSubImage2DEXT glTextureSubImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glbfn_glTextureSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glTextureSubImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glTextureSubImage2DEXT = cast(glbfn_glTextureSubImage2DEXT)glbindGetProcAddress(`glTextureSubImage2DEXT`);
  if (glTextureSubImage2DEXT is null) assert(0, `OpenGL function 'glTextureSubImage2DEXT' not found!`);
  glTextureSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glCopyTextureImage1DEXT glCopyTextureImage1DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glCopyTextureImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCopyTextureImage1DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glCopyTextureImage1DEXT = cast(glbfn_glCopyTextureImage1DEXT)glbindGetProcAddress(`glCopyTextureImage1DEXT`);
  if (glCopyTextureImage1DEXT is null) assert(0, `OpenGL function 'glCopyTextureImage1DEXT' not found!`);
  glCopyTextureImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCopyTextureImage2DEXT glCopyTextureImage2DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glbfn_glCopyTextureImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCopyTextureImage2DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glCopyTextureImage2DEXT = cast(glbfn_glCopyTextureImage2DEXT)glbindGetProcAddress(`glCopyTextureImage2DEXT`);
  if (glCopyTextureImage2DEXT is null) assert(0, `OpenGL function 'glCopyTextureImage2DEXT' not found!`);
  glCopyTextureImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glCopyTextureSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCopyTextureSubImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glCopyTextureSubImage1DEXT = cast(glbfn_glCopyTextureSubImage1DEXT)glbindGetProcAddress(`glCopyTextureSubImage1DEXT`);
  if (glCopyTextureSubImage1DEXT is null) assert(0, `OpenGL function 'glCopyTextureSubImage1DEXT' not found!`);
  glCopyTextureSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glbfn_glCopyTextureSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCopyTextureSubImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glCopyTextureSubImage2DEXT = cast(glbfn_glCopyTextureSubImage2DEXT)glbindGetProcAddress(`glCopyTextureSubImage2DEXT`);
  if (glCopyTextureSubImage2DEXT is null) assert(0, `OpenGL function 'glCopyTextureSubImage2DEXT' not found!`);
  glCopyTextureSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glGetTextureImageEXT glGetTextureImageEXT = function void (uint a0, uint a1, int a2, uint a3, uint a4, void* a5) nothrow @nogc {
  glbfn_glGetTextureImageEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetTextureImageEXT_loader (uint a0, uint a1, int a2, uint a3, uint a4, void* a5) nothrow @nogc {
  glGetTextureImageEXT = cast(glbfn_glGetTextureImageEXT)glbindGetProcAddress(`glGetTextureImageEXT`);
  if (glGetTextureImageEXT is null) assert(0, `OpenGL function 'glGetTextureImageEXT' not found!`);
  glGetTextureImageEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetTextureParameterfvEXT glGetTextureParameterfvEXT = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetTextureParameterfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTextureParameterfvEXT_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetTextureParameterfvEXT = cast(glbfn_glGetTextureParameterfvEXT)glbindGetProcAddress(`glGetTextureParameterfvEXT`);
  if (glGetTextureParameterfvEXT is null) assert(0, `OpenGL function 'glGetTextureParameterfvEXT' not found!`);
  glGetTextureParameterfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTextureParameterivEXT glGetTextureParameterivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetTextureParameterivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTextureParameterivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetTextureParameterivEXT = cast(glbfn_glGetTextureParameterivEXT)glbindGetProcAddress(`glGetTextureParameterivEXT`);
  if (glGetTextureParameterivEXT is null) assert(0, `OpenGL function 'glGetTextureParameterivEXT' not found!`);
  glGetTextureParameterivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT = function void (uint a0, uint a1, int a2, uint a3, float* a4) nothrow @nogc {
  glbfn_glGetTextureLevelParameterfvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetTextureLevelParameterfvEXT_loader (uint a0, uint a1, int a2, uint a3, float* a4) nothrow @nogc {
  glGetTextureLevelParameterfvEXT = cast(glbfn_glGetTextureLevelParameterfvEXT)glbindGetProcAddress(`glGetTextureLevelParameterfvEXT`);
  if (glGetTextureLevelParameterfvEXT is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfvEXT' not found!`);
  glGetTextureLevelParameterfvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT = function void (uint a0, uint a1, int a2, uint a3, int* a4) nothrow @nogc {
  glbfn_glGetTextureLevelParameterivEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetTextureLevelParameterivEXT_loader (uint a0, uint a1, int a2, uint a3, int* a4) nothrow @nogc {
  glGetTextureLevelParameterivEXT = cast(glbfn_glGetTextureLevelParameterivEXT)glbindGetProcAddress(`glGetTextureLevelParameterivEXT`);
  if (glGetTextureLevelParameterivEXT is null) assert(0, `OpenGL function 'glGetTextureLevelParameterivEXT' not found!`);
  glGetTextureLevelParameterivEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTextureImage3DEXT glTextureImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glbfn_glTextureImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glTextureImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glTextureImage3DEXT = cast(glbfn_glTextureImage3DEXT)glbindGetProcAddress(`glTextureImage3DEXT`);
  if (glTextureImage3DEXT is null) assert(0, `OpenGL function 'glTextureImage3DEXT' not found!`);
  glTextureImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glTextureSubImage3DEXT glTextureSubImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, uint a10, const(void)* a11) nothrow @nogc {
  glbfn_glTextureSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glTextureSubImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, uint a10, const(void)* a11) nothrow @nogc {
  glTextureSubImage3DEXT = cast(glbfn_glTextureSubImage3DEXT)glbindGetProcAddress(`glTextureSubImage3DEXT`);
  if (glTextureSubImage3DEXT is null) assert(0, `OpenGL function 'glTextureSubImage3DEXT' not found!`);
  glTextureSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glCopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) nothrow @nogc {
  glbfn_glCopyTextureSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glCopyTextureSubImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) nothrow @nogc {
  glCopyTextureSubImage3DEXT = cast(glbfn_glCopyTextureSubImage3DEXT)glbindGetProcAddress(`glCopyTextureSubImage3DEXT`);
  if (glCopyTextureSubImage3DEXT is null) assert(0, `OpenGL function 'glCopyTextureSubImage3DEXT' not found!`);
  glCopyTextureSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glBindMultiTextureEXT glBindMultiTextureEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBindMultiTextureEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBindMultiTextureEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBindMultiTextureEXT = cast(glbfn_glBindMultiTextureEXT)glbindGetProcAddress(`glBindMultiTextureEXT`);
  if (glBindMultiTextureEXT is null) assert(0, `OpenGL function 'glBindMultiTextureEXT' not found!`);
  glBindMultiTextureEXT(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoordPointerEXT glMultiTexCoordPointerEXT = function void (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glMultiTexCoordPointerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoordPointerEXT_loader (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glMultiTexCoordPointerEXT = cast(glbfn_glMultiTexCoordPointerEXT)glbindGetProcAddress(`glMultiTexCoordPointerEXT`);
  if (glMultiTexCoordPointerEXT is null) assert(0, `OpenGL function 'glMultiTexCoordPointerEXT' not found!`);
  glMultiTexCoordPointerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexEnvfEXT glMultiTexEnvfEXT = function void (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glbfn_glMultiTexEnvfEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexEnvfEXT_loader (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glMultiTexEnvfEXT = cast(glbfn_glMultiTexEnvfEXT)glbindGetProcAddress(`glMultiTexEnvfEXT`);
  if (glMultiTexEnvfEXT is null) assert(0, `OpenGL function 'glMultiTexEnvfEXT' not found!`);
  glMultiTexEnvfEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexEnvfvEXT glMultiTexEnvfvEXT = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glMultiTexEnvfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexEnvfvEXT_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glMultiTexEnvfvEXT = cast(glbfn_glMultiTexEnvfvEXT)glbindGetProcAddress(`glMultiTexEnvfvEXT`);
  if (glMultiTexEnvfvEXT is null) assert(0, `OpenGL function 'glMultiTexEnvfvEXT' not found!`);
  glMultiTexEnvfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexEnviEXT glMultiTexEnviEXT = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glMultiTexEnviEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexEnviEXT_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glMultiTexEnviEXT = cast(glbfn_glMultiTexEnviEXT)glbindGetProcAddress(`glMultiTexEnviEXT`);
  if (glMultiTexEnviEXT is null) assert(0, `OpenGL function 'glMultiTexEnviEXT' not found!`);
  glMultiTexEnviEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexEnvivEXT glMultiTexEnvivEXT = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glMultiTexEnvivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexEnvivEXT_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glMultiTexEnvivEXT = cast(glbfn_glMultiTexEnvivEXT)glbindGetProcAddress(`glMultiTexEnvivEXT`);
  if (glMultiTexEnvivEXT is null) assert(0, `OpenGL function 'glMultiTexEnvivEXT' not found!`);
  glMultiTexEnvivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexGendEXT glMultiTexGendEXT = function void (uint a0, uint a1, uint a2, double a3) nothrow @nogc {
  glbfn_glMultiTexGendEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexGendEXT_loader (uint a0, uint a1, uint a2, double a3) nothrow @nogc {
  glMultiTexGendEXT = cast(glbfn_glMultiTexGendEXT)glbindGetProcAddress(`glMultiTexGendEXT`);
  if (glMultiTexGendEXT is null) assert(0, `OpenGL function 'glMultiTexGendEXT' not found!`);
  glMultiTexGendEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexGendvEXT glMultiTexGendvEXT = function void (uint a0, uint a1, uint a2, const(double)* a3) nothrow @nogc {
  glbfn_glMultiTexGendvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexGendvEXT_loader (uint a0, uint a1, uint a2, const(double)* a3) nothrow @nogc {
  glMultiTexGendvEXT = cast(glbfn_glMultiTexGendvEXT)glbindGetProcAddress(`glMultiTexGendvEXT`);
  if (glMultiTexGendvEXT is null) assert(0, `OpenGL function 'glMultiTexGendvEXT' not found!`);
  glMultiTexGendvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexGenfEXT glMultiTexGenfEXT = function void (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glbfn_glMultiTexGenfEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexGenfEXT_loader (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glMultiTexGenfEXT = cast(glbfn_glMultiTexGenfEXT)glbindGetProcAddress(`glMultiTexGenfEXT`);
  if (glMultiTexGenfEXT is null) assert(0, `OpenGL function 'glMultiTexGenfEXT' not found!`);
  glMultiTexGenfEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexGenfvEXT glMultiTexGenfvEXT = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glMultiTexGenfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexGenfvEXT_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glMultiTexGenfvEXT = cast(glbfn_glMultiTexGenfvEXT)glbindGetProcAddress(`glMultiTexGenfvEXT`);
  if (glMultiTexGenfvEXT is null) assert(0, `OpenGL function 'glMultiTexGenfvEXT' not found!`);
  glMultiTexGenfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexGeniEXT glMultiTexGeniEXT = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glMultiTexGeniEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexGeniEXT_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glMultiTexGeniEXT = cast(glbfn_glMultiTexGeniEXT)glbindGetProcAddress(`glMultiTexGeniEXT`);
  if (glMultiTexGeniEXT is null) assert(0, `OpenGL function 'glMultiTexGeniEXT' not found!`);
  glMultiTexGeniEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexGenivEXT glMultiTexGenivEXT = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glMultiTexGenivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexGenivEXT_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glMultiTexGenivEXT = cast(glbfn_glMultiTexGenivEXT)glbindGetProcAddress(`glMultiTexGenivEXT`);
  if (glMultiTexGenivEXT is null) assert(0, `OpenGL function 'glMultiTexGenivEXT' not found!`);
  glMultiTexGenivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetMultiTexEnvfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexEnvfvEXT_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetMultiTexEnvfvEXT = cast(glbfn_glGetMultiTexEnvfvEXT)glbindGetProcAddress(`glGetMultiTexEnvfvEXT`);
  if (glGetMultiTexEnvfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexEnvfvEXT' not found!`);
  glGetMultiTexEnvfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexEnvivEXT glGetMultiTexEnvivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetMultiTexEnvivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexEnvivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetMultiTexEnvivEXT = cast(glbfn_glGetMultiTexEnvivEXT)glbindGetProcAddress(`glGetMultiTexEnvivEXT`);
  if (glGetMultiTexEnvivEXT is null) assert(0, `OpenGL function 'glGetMultiTexEnvivEXT' not found!`);
  glGetMultiTexEnvivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexGendvEXT glGetMultiTexGendvEXT = function void (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glbfn_glGetMultiTexGendvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexGendvEXT_loader (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glGetMultiTexGendvEXT = cast(glbfn_glGetMultiTexGendvEXT)glbindGetProcAddress(`glGetMultiTexGendvEXT`);
  if (glGetMultiTexGendvEXT is null) assert(0, `OpenGL function 'glGetMultiTexGendvEXT' not found!`);
  glGetMultiTexGendvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexGenfvEXT glGetMultiTexGenfvEXT = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetMultiTexGenfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexGenfvEXT_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetMultiTexGenfvEXT = cast(glbfn_glGetMultiTexGenfvEXT)glbindGetProcAddress(`glGetMultiTexGenfvEXT`);
  if (glGetMultiTexGenfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexGenfvEXT' not found!`);
  glGetMultiTexGenfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexGenivEXT glGetMultiTexGenivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetMultiTexGenivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexGenivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetMultiTexGenivEXT = cast(glbfn_glGetMultiTexGenivEXT)glbindGetProcAddress(`glGetMultiTexGenivEXT`);
  if (glGetMultiTexGenivEXT is null) assert(0, `OpenGL function 'glGetMultiTexGenivEXT' not found!`);
  glGetMultiTexGenivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexParameteriEXT glMultiTexParameteriEXT = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glMultiTexParameteriEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexParameteriEXT_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glMultiTexParameteriEXT = cast(glbfn_glMultiTexParameteriEXT)glbindGetProcAddress(`glMultiTexParameteriEXT`);
  if (glMultiTexParameteriEXT is null) assert(0, `OpenGL function 'glMultiTexParameteriEXT' not found!`);
  glMultiTexParameteriEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexParameterivEXT glMultiTexParameterivEXT = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glMultiTexParameterivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexParameterivEXT_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glMultiTexParameterivEXT = cast(glbfn_glMultiTexParameterivEXT)glbindGetProcAddress(`glMultiTexParameterivEXT`);
  if (glMultiTexParameterivEXT is null) assert(0, `OpenGL function 'glMultiTexParameterivEXT' not found!`);
  glMultiTexParameterivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexParameterfEXT glMultiTexParameterfEXT = function void (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glbfn_glMultiTexParameterfEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexParameterfEXT_loader (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glMultiTexParameterfEXT = cast(glbfn_glMultiTexParameterfEXT)glbindGetProcAddress(`glMultiTexParameterfEXT`);
  if (glMultiTexParameterfEXT is null) assert(0, `OpenGL function 'glMultiTexParameterfEXT' not found!`);
  glMultiTexParameterfEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexParameterfvEXT glMultiTexParameterfvEXT = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glMultiTexParameterfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexParameterfvEXT_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glMultiTexParameterfvEXT = cast(glbfn_glMultiTexParameterfvEXT)glbindGetProcAddress(`glMultiTexParameterfvEXT`);
  if (glMultiTexParameterfvEXT is null) assert(0, `OpenGL function 'glMultiTexParameterfvEXT' not found!`);
  glMultiTexParameterfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexImage1DEXT glMultiTexImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glbfn_glMultiTexImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glMultiTexImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glMultiTexImage1DEXT = cast(glbfn_glMultiTexImage1DEXT)glbindGetProcAddress(`glMultiTexImage1DEXT`);
  if (glMultiTexImage1DEXT is null) assert(0, `OpenGL function 'glMultiTexImage1DEXT' not found!`);
  glMultiTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glMultiTexImage2DEXT glMultiTexImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glbfn_glMultiTexImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glMultiTexImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glMultiTexImage2DEXT = cast(glbfn_glMultiTexImage2DEXT)glbindGetProcAddress(`glMultiTexImage2DEXT`);
  if (glMultiTexImage2DEXT is null) assert(0, `OpenGL function 'glMultiTexImage2DEXT' not found!`);
  glMultiTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glMultiTexSubImage1DEXT glMultiTexSubImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, uint a5, uint a6, const(void)* a7) nothrow @nogc {
  glbfn_glMultiTexSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glMultiTexSubImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, uint a5, uint a6, const(void)* a7) nothrow @nogc {
  glMultiTexSubImage1DEXT = cast(glbfn_glMultiTexSubImage1DEXT)glbindGetProcAddress(`glMultiTexSubImage1DEXT`);
  if (glMultiTexSubImage1DEXT is null) assert(0, `OpenGL function 'glMultiTexSubImage1DEXT' not found!`);
  glMultiTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glMultiTexSubImage2DEXT glMultiTexSubImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glbfn_glMultiTexSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glMultiTexSubImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glMultiTexSubImage2DEXT = cast(glbfn_glMultiTexSubImage2DEXT)glbindGetProcAddress(`glMultiTexSubImage2DEXT`);
  if (glMultiTexSubImage2DEXT is null) assert(0, `OpenGL function 'glMultiTexSubImage2DEXT' not found!`);
  glMultiTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glCopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glbfn_glCopyMultiTexImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCopyMultiTexImage1DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7) nothrow @nogc {
  glCopyMultiTexImage1DEXT = cast(glbfn_glCopyMultiTexImage1DEXT)glbindGetProcAddress(`glCopyMultiTexImage1DEXT`);
  if (glCopyMultiTexImage1DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexImage1DEXT' not found!`);
  glCopyMultiTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glbfn_glCopyMultiTexImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCopyMultiTexImage2DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glCopyMultiTexImage2DEXT = cast(glbfn_glCopyMultiTexImage2DEXT)glbindGetProcAddress(`glCopyMultiTexImage2DEXT`);
  if (glCopyMultiTexImage2DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexImage2DEXT' not found!`);
  glCopyMultiTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glCopyMultiTexSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCopyMultiTexSubImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glCopyMultiTexSubImage1DEXT = cast(glbfn_glCopyMultiTexSubImage1DEXT)glbindGetProcAddress(`glCopyMultiTexSubImage1DEXT`);
  if (glCopyMultiTexSubImage1DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage1DEXT' not found!`);
  glCopyMultiTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glbfn_glCopyMultiTexSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCopyMultiTexSubImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) nothrow @nogc {
  glCopyMultiTexSubImage2DEXT = cast(glbfn_glCopyMultiTexSubImage2DEXT)glbindGetProcAddress(`glCopyMultiTexSubImage2DEXT`);
  if (glCopyMultiTexSubImage2DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage2DEXT' not found!`);
  glCopyMultiTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glGetMultiTexImageEXT glGetMultiTexImageEXT = function void (uint a0, uint a1, int a2, uint a3, uint a4, void* a5) nothrow @nogc {
  glbfn_glGetMultiTexImageEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetMultiTexImageEXT_loader (uint a0, uint a1, int a2, uint a3, uint a4, void* a5) nothrow @nogc {
  glGetMultiTexImageEXT = cast(glbfn_glGetMultiTexImageEXT)glbindGetProcAddress(`glGetMultiTexImageEXT`);
  if (glGetMultiTexImageEXT is null) assert(0, `OpenGL function 'glGetMultiTexImageEXT' not found!`);
  glGetMultiTexImageEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetMultiTexParameterfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexParameterfvEXT_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetMultiTexParameterfvEXT = cast(glbfn_glGetMultiTexParameterfvEXT)glbindGetProcAddress(`glGetMultiTexParameterfvEXT`);
  if (glGetMultiTexParameterfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterfvEXT' not found!`);
  glGetMultiTexParameterfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexParameterivEXT glGetMultiTexParameterivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetMultiTexParameterivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexParameterivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetMultiTexParameterivEXT = cast(glbfn_glGetMultiTexParameterivEXT)glbindGetProcAddress(`glGetMultiTexParameterivEXT`);
  if (glGetMultiTexParameterivEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterivEXT' not found!`);
  glGetMultiTexParameterivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT = function void (uint a0, uint a1, int a2, uint a3, float* a4) nothrow @nogc {
  glbfn_glGetMultiTexLevelParameterfvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetMultiTexLevelParameterfvEXT_loader (uint a0, uint a1, int a2, uint a3, float* a4) nothrow @nogc {
  glGetMultiTexLevelParameterfvEXT = cast(glbfn_glGetMultiTexLevelParameterfvEXT)glbindGetProcAddress(`glGetMultiTexLevelParameterfvEXT`);
  if (glGetMultiTexLevelParameterfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterfvEXT' not found!`);
  glGetMultiTexLevelParameterfvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT = function void (uint a0, uint a1, int a2, uint a3, int* a4) nothrow @nogc {
  glbfn_glGetMultiTexLevelParameterivEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetMultiTexLevelParameterivEXT_loader (uint a0, uint a1, int a2, uint a3, int* a4) nothrow @nogc {
  glGetMultiTexLevelParameterivEXT = cast(glbfn_glGetMultiTexLevelParameterivEXT)glbindGetProcAddress(`glGetMultiTexLevelParameterivEXT`);
  if (glGetMultiTexLevelParameterivEXT is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterivEXT' not found!`);
  glGetMultiTexLevelParameterivEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexImage3DEXT glMultiTexImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glbfn_glMultiTexImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glMultiTexImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glMultiTexImage3DEXT = cast(glbfn_glMultiTexImage3DEXT)glbindGetProcAddress(`glMultiTexImage3DEXT`);
  if (glMultiTexImage3DEXT is null) assert(0, `OpenGL function 'glMultiTexImage3DEXT' not found!`);
  glMultiTexImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glMultiTexSubImage3DEXT glMultiTexSubImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, uint a10, const(void)* a11) nothrow @nogc {
  glbfn_glMultiTexSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glMultiTexSubImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, uint a10, const(void)* a11) nothrow @nogc {
  glMultiTexSubImage3DEXT = cast(glbfn_glMultiTexSubImage3DEXT)glbindGetProcAddress(`glMultiTexSubImage3DEXT`);
  if (glMultiTexSubImage3DEXT is null) assert(0, `OpenGL function 'glMultiTexSubImage3DEXT' not found!`);
  glMultiTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glCopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) nothrow @nogc {
  glbfn_glCopyMultiTexSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glCopyMultiTexSubImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) nothrow @nogc {
  glCopyMultiTexSubImage3DEXT = cast(glbfn_glCopyMultiTexSubImage3DEXT)glbindGetProcAddress(`glCopyMultiTexSubImage3DEXT`);
  if (glCopyMultiTexSubImage3DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage3DEXT' not found!`);
  glCopyMultiTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glEnableClientStateIndexedEXT glEnableClientStateIndexedEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnableClientStateIndexedEXT_loader(a0,a1,);
};
private auto glbfn_glEnableClientStateIndexedEXT_loader (uint a0, uint a1) nothrow @nogc {
  glEnableClientStateIndexedEXT = cast(glbfn_glEnableClientStateIndexedEXT)glbindGetProcAddress(`glEnableClientStateIndexedEXT`);
  if (glEnableClientStateIndexedEXT is null) assert(0, `OpenGL function 'glEnableClientStateIndexedEXT' not found!`);
  glEnableClientStateIndexedEXT(a0,a1,);
}
__gshared glbfn_glDisableClientStateIndexedEXT glDisableClientStateIndexedEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisableClientStateIndexedEXT_loader(a0,a1,);
};
private auto glbfn_glDisableClientStateIndexedEXT_loader (uint a0, uint a1) nothrow @nogc {
  glDisableClientStateIndexedEXT = cast(glbfn_glDisableClientStateIndexedEXT)glbindGetProcAddress(`glDisableClientStateIndexedEXT`);
  if (glDisableClientStateIndexedEXT is null) assert(0, `OpenGL function 'glDisableClientStateIndexedEXT' not found!`);
  glDisableClientStateIndexedEXT(a0,a1,);
}
__gshared glbfn_glGetFloatIndexedvEXT glGetFloatIndexedvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetFloatIndexedvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetFloatIndexedvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetFloatIndexedvEXT = cast(glbfn_glGetFloatIndexedvEXT)glbindGetProcAddress(`glGetFloatIndexedvEXT`);
  if (glGetFloatIndexedvEXT is null) assert(0, `OpenGL function 'glGetFloatIndexedvEXT' not found!`);
  glGetFloatIndexedvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetDoubleIndexedvEXT glGetDoubleIndexedvEXT = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetDoubleIndexedvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetDoubleIndexedvEXT_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetDoubleIndexedvEXT = cast(glbfn_glGetDoubleIndexedvEXT)glbindGetProcAddress(`glGetDoubleIndexedvEXT`);
  if (glGetDoubleIndexedvEXT is null) assert(0, `OpenGL function 'glGetDoubleIndexedvEXT' not found!`);
  glGetDoubleIndexedvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetPointerIndexedvEXT glGetPointerIndexedvEXT = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetPointerIndexedvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetPointerIndexedvEXT_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetPointerIndexedvEXT = cast(glbfn_glGetPointerIndexedvEXT)glbindGetProcAddress(`glGetPointerIndexedvEXT`);
  if (glGetPointerIndexedvEXT is null) assert(0, `OpenGL function 'glGetPointerIndexedvEXT' not found!`);
  glGetPointerIndexedvEXT(a0,a1,a2,);
}
__gshared glbfn_glEnableIndexedEXT glEnableIndexedEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnableIndexedEXT_loader(a0,a1,);
};
private auto glbfn_glEnableIndexedEXT_loader (uint a0, uint a1) nothrow @nogc {
  glEnableIndexedEXT = cast(glbfn_glEnableIndexedEXT)glbindGetProcAddress(`glEnableIndexedEXT`);
  if (glEnableIndexedEXT is null) assert(0, `OpenGL function 'glEnableIndexedEXT' not found!`);
  glEnableIndexedEXT(a0,a1,);
}
__gshared glbfn_glDisableIndexedEXT glDisableIndexedEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisableIndexedEXT_loader(a0,a1,);
};
private auto glbfn_glDisableIndexedEXT_loader (uint a0, uint a1) nothrow @nogc {
  glDisableIndexedEXT = cast(glbfn_glDisableIndexedEXT)glbindGetProcAddress(`glDisableIndexedEXT`);
  if (glDisableIndexedEXT is null) assert(0, `OpenGL function 'glDisableIndexedEXT' not found!`);
  glDisableIndexedEXT(a0,a1,);
}
__gshared glbfn_glIsEnabledIndexedEXT glIsEnabledIndexedEXT = function ubyte (uint a0, uint a1) nothrow @nogc {
  return glbfn_glIsEnabledIndexedEXT_loader(a0,a1,);
};
private auto glbfn_glIsEnabledIndexedEXT_loader (uint a0, uint a1) nothrow @nogc {
  glIsEnabledIndexedEXT = cast(glbfn_glIsEnabledIndexedEXT)glbindGetProcAddress(`glIsEnabledIndexedEXT`);
  if (glIsEnabledIndexedEXT is null) assert(0, `OpenGL function 'glIsEnabledIndexedEXT' not found!`);
  return glIsEnabledIndexedEXT(a0,a1,);
}
__gshared glbfn_glGetIntegerIndexedvEXT glGetIntegerIndexedvEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetIntegerIndexedvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetIntegerIndexedvEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetIntegerIndexedvEXT = cast(glbfn_glGetIntegerIndexedvEXT)glbindGetProcAddress(`glGetIntegerIndexedvEXT`);
  if (glGetIntegerIndexedvEXT is null) assert(0, `OpenGL function 'glGetIntegerIndexedvEXT' not found!`);
  glGetIntegerIndexedvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetBooleanIndexedvEXT glGetBooleanIndexedvEXT = function void (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glbfn_glGetBooleanIndexedvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetBooleanIndexedvEXT_loader (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glGetBooleanIndexedvEXT = cast(glbfn_glGetBooleanIndexedvEXT)glbindGetProcAddress(`glGetBooleanIndexedvEXT`);
  if (glGetBooleanIndexedvEXT is null) assert(0, `OpenGL function 'glGetBooleanIndexedvEXT' not found!`);
  glGetBooleanIndexedvEXT(a0,a1,a2,);
}
__gshared glbfn_glCompressedTextureImage3DEXT glCompressedTextureImage3DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8, const(void)* a9) nothrow @nogc {
  glbfn_glCompressedTextureImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glCompressedTextureImage3DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8, const(void)* a9) nothrow @nogc {
  glCompressedTextureImage3DEXT = cast(glbfn_glCompressedTextureImage3DEXT)glbindGetProcAddress(`glCompressedTextureImage3DEXT`);
  if (glCompressedTextureImage3DEXT is null) assert(0, `OpenGL function 'glCompressedTextureImage3DEXT' not found!`);
  glCompressedTextureImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glCompressedTextureImage2DEXT glCompressedTextureImage2DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glbfn_glCompressedTextureImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCompressedTextureImage2DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glCompressedTextureImage2DEXT = cast(glbfn_glCompressedTextureImage2DEXT)glbindGetProcAddress(`glCompressedTextureImage2DEXT`);
  if (glCompressedTextureImage2DEXT is null) assert(0, `OpenGL function 'glCompressedTextureImage2DEXT' not found!`);
  glCompressedTextureImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCompressedTextureImage1DEXT glCompressedTextureImage1DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glbfn_glCompressedTextureImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCompressedTextureImage1DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glCompressedTextureImage1DEXT = cast(glbfn_glCompressedTextureImage1DEXT)glbindGetProcAddress(`glCompressedTextureImage1DEXT`);
  if (glCompressedTextureImage1DEXT is null) assert(0, `OpenGL function 'glCompressedTextureImage1DEXT' not found!`);
  glCompressedTextureImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, int a10, const(void)* a11) nothrow @nogc {
  glbfn_glCompressedTextureSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glCompressedTextureSubImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, int a10, const(void)* a11) nothrow @nogc {
  glCompressedTextureSubImage3DEXT = cast(glbfn_glCompressedTextureSubImage3DEXT)glbindGetProcAddress(`glCompressedTextureSubImage3DEXT`);
  if (glCompressedTextureSubImage3DEXT is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3DEXT' not found!`);
  glCompressedTextureSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glCompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, int a8, const(void)* a9) nothrow @nogc {
  glbfn_glCompressedTextureSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glCompressedTextureSubImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, int a8, const(void)* a9) nothrow @nogc {
  glCompressedTextureSubImage2DEXT = cast(glbfn_glCompressedTextureSubImage2DEXT)glbindGetProcAddress(`glCompressedTextureSubImage2DEXT`);
  if (glCompressedTextureSubImage2DEXT is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2DEXT' not found!`);
  glCompressedTextureSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glCompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, uint a5, int a6, const(void)* a7) nothrow @nogc {
  glbfn_glCompressedTextureSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCompressedTextureSubImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, uint a5, int a6, const(void)* a7) nothrow @nogc {
  glCompressedTextureSubImage1DEXT = cast(glbfn_glCompressedTextureSubImage1DEXT)glbindGetProcAddress(`glCompressedTextureSubImage1DEXT`);
  if (glCompressedTextureSubImage1DEXT is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1DEXT' not found!`);
  glCompressedTextureSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetCompressedTextureImageEXT glGetCompressedTextureImageEXT = function void (uint a0, uint a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetCompressedTextureImageEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetCompressedTextureImageEXT_loader (uint a0, uint a1, int a2, void* a3) nothrow @nogc {
  glGetCompressedTextureImageEXT = cast(glbfn_glGetCompressedTextureImageEXT)glbindGetProcAddress(`glGetCompressedTextureImageEXT`);
  if (glGetCompressedTextureImageEXT is null) assert(0, `OpenGL function 'glGetCompressedTextureImageEXT' not found!`);
  glGetCompressedTextureImageEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glCompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8, const(void)* a9) nothrow @nogc {
  glbfn_glCompressedMultiTexImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glCompressedMultiTexImage3DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, int a8, const(void)* a9) nothrow @nogc {
  glCompressedMultiTexImage3DEXT = cast(glbfn_glCompressedMultiTexImage3DEXT)glbindGetProcAddress(`glCompressedMultiTexImage3DEXT`);
  if (glCompressedMultiTexImage3DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexImage3DEXT' not found!`);
  glCompressedMultiTexImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glCompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glbfn_glCompressedMultiTexImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glCompressedMultiTexImage2DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, int a7, const(void)* a8) nothrow @nogc {
  glCompressedMultiTexImage2DEXT = cast(glbfn_glCompressedMultiTexImage2DEXT)glbindGetProcAddress(`glCompressedMultiTexImage2DEXT`);
  if (glCompressedMultiTexImage2DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexImage2DEXT' not found!`);
  glCompressedMultiTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glCompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glbfn_glCompressedMultiTexImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCompressedMultiTexImage1DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, const(void)* a7) nothrow @nogc {
  glCompressedMultiTexImage1DEXT = cast(glbfn_glCompressedMultiTexImage1DEXT)glbindGetProcAddress(`glCompressedMultiTexImage1DEXT`);
  if (glCompressedMultiTexImage1DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexImage1DEXT' not found!`);
  glCompressedMultiTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glCompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, int a10, const(void)* a11) nothrow @nogc {
  glbfn_glCompressedMultiTexSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glCompressedMultiTexSubImage3DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint a9, int a10, const(void)* a11) nothrow @nogc {
  glCompressedMultiTexSubImage3DEXT = cast(glbfn_glCompressedMultiTexSubImage3DEXT)glbindGetProcAddress(`glCompressedMultiTexSubImage3DEXT`);
  if (glCompressedMultiTexSubImage3DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage3DEXT' not found!`);
  glCompressedMultiTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glCompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, int a8, const(void)* a9) nothrow @nogc {
  glbfn_glCompressedMultiTexSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glCompressedMultiTexSubImage2DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, uint a7, int a8, const(void)* a9) nothrow @nogc {
  glCompressedMultiTexSubImage2DEXT = cast(glbfn_glCompressedMultiTexSubImage2DEXT)glbindGetProcAddress(`glCompressedMultiTexSubImage2DEXT`);
  if (glCompressedMultiTexSubImage2DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage2DEXT' not found!`);
  glCompressedMultiTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT = function void (uint a0, uint a1, int a2, int a3, int a4, uint a5, int a6, const(void)* a7) nothrow @nogc {
  glbfn_glCompressedMultiTexSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glCompressedMultiTexSubImage1DEXT_loader (uint a0, uint a1, int a2, int a3, int a4, uint a5, int a6, const(void)* a7) nothrow @nogc {
  glCompressedMultiTexSubImage1DEXT = cast(glbfn_glCompressedMultiTexSubImage1DEXT)glbindGetProcAddress(`glCompressedMultiTexSubImage1DEXT`);
  if (glCompressedMultiTexSubImage1DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage1DEXT' not found!`);
  glCompressedMultiTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT = function void (uint a0, uint a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetCompressedMultiTexImageEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetCompressedMultiTexImageEXT_loader (uint a0, uint a1, int a2, void* a3) nothrow @nogc {
  glGetCompressedMultiTexImageEXT = cast(glbfn_glGetCompressedMultiTexImageEXT)glbindGetProcAddress(`glGetCompressedMultiTexImageEXT`);
  if (glGetCompressedMultiTexImageEXT is null) assert(0, `OpenGL function 'glGetCompressedMultiTexImageEXT' not found!`);
  glGetCompressedMultiTexImageEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMatrixLoadTransposefEXT glMatrixLoadTransposefEXT = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixLoadTransposefEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixLoadTransposefEXT_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixLoadTransposefEXT = cast(glbfn_glMatrixLoadTransposefEXT)glbindGetProcAddress(`glMatrixLoadTransposefEXT`);
  if (glMatrixLoadTransposefEXT is null) assert(0, `OpenGL function 'glMatrixLoadTransposefEXT' not found!`);
  glMatrixLoadTransposefEXT(a0,a1,);
}
__gshared glbfn_glMatrixLoadTransposedEXT glMatrixLoadTransposedEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMatrixLoadTransposedEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixLoadTransposedEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMatrixLoadTransposedEXT = cast(glbfn_glMatrixLoadTransposedEXT)glbindGetProcAddress(`glMatrixLoadTransposedEXT`);
  if (glMatrixLoadTransposedEXT is null) assert(0, `OpenGL function 'glMatrixLoadTransposedEXT' not found!`);
  glMatrixLoadTransposedEXT(a0,a1,);
}
__gshared glbfn_glMatrixMultTransposefEXT glMatrixMultTransposefEXT = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixMultTransposefEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixMultTransposefEXT_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixMultTransposefEXT = cast(glbfn_glMatrixMultTransposefEXT)glbindGetProcAddress(`glMatrixMultTransposefEXT`);
  if (glMatrixMultTransposefEXT is null) assert(0, `OpenGL function 'glMatrixMultTransposefEXT' not found!`);
  glMatrixMultTransposefEXT(a0,a1,);
}
__gshared glbfn_glMatrixMultTransposedEXT glMatrixMultTransposedEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glMatrixMultTransposedEXT_loader(a0,a1,);
};
private auto glbfn_glMatrixMultTransposedEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glMatrixMultTransposedEXT = cast(glbfn_glMatrixMultTransposedEXT)glbindGetProcAddress(`glMatrixMultTransposedEXT`);
  if (glMatrixMultTransposedEXT is null) assert(0, `OpenGL function 'glMatrixMultTransposedEXT' not found!`);
  glMatrixMultTransposedEXT(a0,a1,);
}
static if (size_t.sizeof == 4) {
__gshared glbfn_glNamedBufferDataEXT glNamedBufferDataEXT = function void (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glbfn_glNamedBufferDataEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedBufferDataEXT_loader (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glNamedBufferDataEXT = cast(glbfn_glNamedBufferDataEXT)glbindGetProcAddress(`glNamedBufferDataEXT`);
  if (glNamedBufferDataEXT is null) assert(0, `OpenGL function 'glNamedBufferDataEXT' not found!`);
  glNamedBufferDataEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedBufferSubDataEXT glNamedBufferSubDataEXT = function void (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glNamedBufferSubDataEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedBufferSubDataEXT_loader (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glNamedBufferSubDataEXT = cast(glbfn_glNamedBufferSubDataEXT)glbindGetProcAddress(`glNamedBufferSubDataEXT`);
  if (glNamedBufferSubDataEXT is null) assert(0, `OpenGL function 'glNamedBufferSubDataEXT' not found!`);
  glNamedBufferSubDataEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMapNamedBufferEXT glMapNamedBufferEXT = function void* (uint a0, uint a1) nothrow @nogc {
  return glbfn_glMapNamedBufferEXT_loader(a0,a1,);
};
private auto glbfn_glMapNamedBufferEXT_loader (uint a0, uint a1) nothrow @nogc {
  glMapNamedBufferEXT = cast(glbfn_glMapNamedBufferEXT)glbindGetProcAddress(`glMapNamedBufferEXT`);
  if (glMapNamedBufferEXT is null) assert(0, `OpenGL function 'glMapNamedBufferEXT' not found!`);
  return glMapNamedBufferEXT(a0,a1,);
}
__gshared glbfn_glUnmapNamedBufferEXT glUnmapNamedBufferEXT = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glUnmapNamedBufferEXT_loader(a0,);
};
private auto glbfn_glUnmapNamedBufferEXT_loader (uint a0) nothrow @nogc {
  glUnmapNamedBufferEXT = cast(glbfn_glUnmapNamedBufferEXT)glbindGetProcAddress(`glUnmapNamedBufferEXT`);
  if (glUnmapNamedBufferEXT is null) assert(0, `OpenGL function 'glUnmapNamedBufferEXT' not found!`);
  return glUnmapNamedBufferEXT(a0,);
}
__gshared glbfn_glGetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetNamedBufferParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedBufferParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetNamedBufferParameterivEXT = cast(glbfn_glGetNamedBufferParameterivEXT)glbindGetProcAddress(`glGetNamedBufferParameterivEXT`);
  if (glGetNamedBufferParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedBufferParameterivEXT' not found!`);
  glGetNamedBufferParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetNamedBufferPointervEXT glGetNamedBufferPointervEXT = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetNamedBufferPointervEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedBufferPointervEXT_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetNamedBufferPointervEXT = cast(glbfn_glGetNamedBufferPointervEXT)glbindGetProcAddress(`glGetNamedBufferPointervEXT`);
  if (glGetNamedBufferPointervEXT is null) assert(0, `OpenGL function 'glGetNamedBufferPointervEXT' not found!`);
  glGetNamedBufferPointervEXT(a0,a1,a2,);
}
__gshared glbfn_glGetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT = function void (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glbfn_glGetNamedBufferSubDataEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedBufferSubDataEXT_loader (uint a0, int a1, int a2, void* a3) nothrow @nogc {
  glGetNamedBufferSubDataEXT = cast(glbfn_glGetNamedBufferSubDataEXT)glbindGetProcAddress(`glGetNamedBufferSubDataEXT`);
  if (glGetNamedBufferSubDataEXT is null) assert(0, `OpenGL function 'glGetNamedBufferSubDataEXT' not found!`);
  glGetNamedBufferSubDataEXT(a0,a1,a2,a3,);
}
}
__gshared glbfn_glProgramUniform1fEXT glProgramUniform1fEXT = function void (uint a0, int a1, float a2) nothrow @nogc {
  glbfn_glProgramUniform1fEXT_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1fEXT_loader (uint a0, int a1, float a2) nothrow @nogc {
  glProgramUniform1fEXT = cast(glbfn_glProgramUniform1fEXT)glbindGetProcAddress(`glProgramUniform1fEXT`);
  if (glProgramUniform1fEXT is null) assert(0, `OpenGL function 'glProgramUniform1fEXT' not found!`);
  glProgramUniform1fEXT(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2fEXT glProgramUniform2fEXT = function void (uint a0, int a1, float a2, float a3) nothrow @nogc {
  glbfn_glProgramUniform2fEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2fEXT_loader (uint a0, int a1, float a2, float a3) nothrow @nogc {
  glProgramUniform2fEXT = cast(glbfn_glProgramUniform2fEXT)glbindGetProcAddress(`glProgramUniform2fEXT`);
  if (glProgramUniform2fEXT is null) assert(0, `OpenGL function 'glProgramUniform2fEXT' not found!`);
  glProgramUniform2fEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3fEXT glProgramUniform3fEXT = function void (uint a0, int a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glProgramUniform3fEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3fEXT_loader (uint a0, int a1, float a2, float a3, float a4) nothrow @nogc {
  glProgramUniform3fEXT = cast(glbfn_glProgramUniform3fEXT)glbindGetProcAddress(`glProgramUniform3fEXT`);
  if (glProgramUniform3fEXT is null) assert(0, `OpenGL function 'glProgramUniform3fEXT' not found!`);
  glProgramUniform3fEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4fEXT glProgramUniform4fEXT = function void (uint a0, int a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glProgramUniform4fEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4fEXT_loader (uint a0, int a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glProgramUniform4fEXT = cast(glbfn_glProgramUniform4fEXT)glbindGetProcAddress(`glProgramUniform4fEXT`);
  if (glProgramUniform4fEXT is null) assert(0, `OpenGL function 'glProgramUniform4fEXT' not found!`);
  glProgramUniform4fEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1iEXT glProgramUniform1iEXT = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glProgramUniform1iEXT_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1iEXT_loader (uint a0, int a1, int a2) nothrow @nogc {
  glProgramUniform1iEXT = cast(glbfn_glProgramUniform1iEXT)glbindGetProcAddress(`glProgramUniform1iEXT`);
  if (glProgramUniform1iEXT is null) assert(0, `OpenGL function 'glProgramUniform1iEXT' not found!`);
  glProgramUniform1iEXT(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2iEXT glProgramUniform2iEXT = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glProgramUniform2iEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2iEXT_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glProgramUniform2iEXT = cast(glbfn_glProgramUniform2iEXT)glbindGetProcAddress(`glProgramUniform2iEXT`);
  if (glProgramUniform2iEXT is null) assert(0, `OpenGL function 'glProgramUniform2iEXT' not found!`);
  glProgramUniform2iEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3iEXT glProgramUniform3iEXT = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glProgramUniform3iEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3iEXT_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glProgramUniform3iEXT = cast(glbfn_glProgramUniform3iEXT)glbindGetProcAddress(`glProgramUniform3iEXT`);
  if (glProgramUniform3iEXT is null) assert(0, `OpenGL function 'glProgramUniform3iEXT' not found!`);
  glProgramUniform3iEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4iEXT glProgramUniform4iEXT = function void (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glProgramUniform4iEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4iEXT_loader (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glProgramUniform4iEXT = cast(glbfn_glProgramUniform4iEXT)glbindGetProcAddress(`glProgramUniform4iEXT`);
  if (glProgramUniform4iEXT is null) assert(0, `OpenGL function 'glProgramUniform4iEXT' not found!`);
  glProgramUniform4iEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1fvEXT glProgramUniform1fvEXT = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform1fvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1fvEXT_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform1fvEXT = cast(glbfn_glProgramUniform1fvEXT)glbindGetProcAddress(`glProgramUniform1fvEXT`);
  if (glProgramUniform1fvEXT is null) assert(0, `OpenGL function 'glProgramUniform1fvEXT' not found!`);
  glProgramUniform1fvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2fvEXT glProgramUniform2fvEXT = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform2fvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2fvEXT_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform2fvEXT = cast(glbfn_glProgramUniform2fvEXT)glbindGetProcAddress(`glProgramUniform2fvEXT`);
  if (glProgramUniform2fvEXT is null) assert(0, `OpenGL function 'glProgramUniform2fvEXT' not found!`);
  glProgramUniform2fvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3fvEXT glProgramUniform3fvEXT = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform3fvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3fvEXT_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform3fvEXT = cast(glbfn_glProgramUniform3fvEXT)glbindGetProcAddress(`glProgramUniform3fvEXT`);
  if (glProgramUniform3fvEXT is null) assert(0, `OpenGL function 'glProgramUniform3fvEXT' not found!`);
  glProgramUniform3fvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4fvEXT glProgramUniform4fvEXT = function void (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramUniform4fvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4fvEXT_loader (uint a0, int a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramUniform4fvEXT = cast(glbfn_glProgramUniform4fvEXT)glbindGetProcAddress(`glProgramUniform4fvEXT`);
  if (glProgramUniform4fvEXT is null) assert(0, `OpenGL function 'glProgramUniform4fvEXT' not found!`);
  glProgramUniform4fvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1ivEXT glProgramUniform1ivEXT = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform1ivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1ivEXT_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform1ivEXT = cast(glbfn_glProgramUniform1ivEXT)glbindGetProcAddress(`glProgramUniform1ivEXT`);
  if (glProgramUniform1ivEXT is null) assert(0, `OpenGL function 'glProgramUniform1ivEXT' not found!`);
  glProgramUniform1ivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2ivEXT glProgramUniform2ivEXT = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform2ivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2ivEXT_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform2ivEXT = cast(glbfn_glProgramUniform2ivEXT)glbindGetProcAddress(`glProgramUniform2ivEXT`);
  if (glProgramUniform2ivEXT is null) assert(0, `OpenGL function 'glProgramUniform2ivEXT' not found!`);
  glProgramUniform2ivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3ivEXT glProgramUniform3ivEXT = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform3ivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3ivEXT_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform3ivEXT = cast(glbfn_glProgramUniform3ivEXT)glbindGetProcAddress(`glProgramUniform3ivEXT`);
  if (glProgramUniform3ivEXT is null) assert(0, `OpenGL function 'glProgramUniform3ivEXT' not found!`);
  glProgramUniform3ivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4ivEXT glProgramUniform4ivEXT = function void (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramUniform4ivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4ivEXT_loader (uint a0, int a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramUniform4ivEXT = cast(glbfn_glProgramUniform4ivEXT)glbindGetProcAddress(`glProgramUniform4ivEXT`);
  if (glProgramUniform4ivEXT is null) assert(0, `OpenGL function 'glProgramUniform4ivEXT' not found!`);
  glProgramUniform4ivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix2fvEXT = cast(glbfn_glProgramUniformMatrix2fvEXT)glbindGetProcAddress(`glProgramUniformMatrix2fvEXT`);
  if (glProgramUniformMatrix2fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fvEXT' not found!`);
  glProgramUniformMatrix2fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix3fvEXT = cast(glbfn_glProgramUniformMatrix3fvEXT)glbindGetProcAddress(`glProgramUniformMatrix3fvEXT`);
  if (glProgramUniformMatrix3fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fvEXT' not found!`);
  glProgramUniformMatrix3fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix4fvEXT = cast(glbfn_glProgramUniformMatrix4fvEXT)glbindGetProcAddress(`glProgramUniformMatrix4fvEXT`);
  if (glProgramUniformMatrix4fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fvEXT' not found!`);
  glProgramUniformMatrix4fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x3fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x3fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix2x3fvEXT = cast(glbfn_glProgramUniformMatrix2x3fvEXT)glbindGetProcAddress(`glProgramUniformMatrix2x3fvEXT`);
  if (glProgramUniformMatrix2x3fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fvEXT' not found!`);
  glProgramUniformMatrix2x3fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x2fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x2fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix3x2fvEXT = cast(glbfn_glProgramUniformMatrix3x2fvEXT)glbindGetProcAddress(`glProgramUniformMatrix3x2fvEXT`);
  if (glProgramUniformMatrix3x2fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fvEXT' not found!`);
  glProgramUniformMatrix3x2fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x4fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x4fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix2x4fvEXT = cast(glbfn_glProgramUniformMatrix2x4fvEXT)glbindGetProcAddress(`glProgramUniformMatrix2x4fvEXT`);
  if (glProgramUniformMatrix2x4fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fvEXT' not found!`);
  glProgramUniformMatrix2x4fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x2fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x2fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix4x2fvEXT = cast(glbfn_glProgramUniformMatrix4x2fvEXT)glbindGetProcAddress(`glProgramUniformMatrix4x2fvEXT`);
  if (glProgramUniformMatrix4x2fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fvEXT' not found!`);
  glProgramUniformMatrix4x2fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x4fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x4fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix3x4fvEXT = cast(glbfn_glProgramUniformMatrix3x4fvEXT)glbindGetProcAddress(`glProgramUniformMatrix3x4fvEXT`);
  if (glProgramUniformMatrix3x4fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fvEXT' not found!`);
  glProgramUniformMatrix3x4fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x3fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x3fvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(float)* a4) nothrow @nogc {
  glProgramUniformMatrix4x3fvEXT = cast(glbfn_glProgramUniformMatrix4x3fvEXT)glbindGetProcAddress(`glProgramUniformMatrix4x3fvEXT`);
  if (glProgramUniformMatrix4x3fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fvEXT' not found!`);
  glProgramUniformMatrix4x3fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTextureBufferEXT glTextureBufferEXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glTextureBufferEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureBufferEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glTextureBufferEXT = cast(glbfn_glTextureBufferEXT)glbindGetProcAddress(`glTextureBufferEXT`);
  if (glTextureBufferEXT is null) assert(0, `OpenGL function 'glTextureBufferEXT' not found!`);
  glTextureBufferEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexBufferEXT glMultiTexBufferEXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glMultiTexBufferEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexBufferEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glMultiTexBufferEXT = cast(glbfn_glMultiTexBufferEXT)glbindGetProcAddress(`glMultiTexBufferEXT`);
  if (glMultiTexBufferEXT is null) assert(0, `OpenGL function 'glMultiTexBufferEXT' not found!`);
  glMultiTexBufferEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureParameterIivEXT glTextureParameterIivEXT = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glTextureParameterIivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureParameterIivEXT_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glTextureParameterIivEXT = cast(glbfn_glTextureParameterIivEXT)glbindGetProcAddress(`glTextureParameterIivEXT`);
  if (glTextureParameterIivEXT is null) assert(0, `OpenGL function 'glTextureParameterIivEXT' not found!`);
  glTextureParameterIivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureParameterIuivEXT glTextureParameterIuivEXT = function void (uint a0, uint a1, uint a2, const(uint)* a3) nothrow @nogc {
  glbfn_glTextureParameterIuivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureParameterIuivEXT_loader (uint a0, uint a1, uint a2, const(uint)* a3) nothrow @nogc {
  glTextureParameterIuivEXT = cast(glbfn_glTextureParameterIuivEXT)glbindGetProcAddress(`glTextureParameterIuivEXT`);
  if (glTextureParameterIuivEXT is null) assert(0, `OpenGL function 'glTextureParameterIuivEXT' not found!`);
  glTextureParameterIuivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTextureParameterIivEXT glGetTextureParameterIivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetTextureParameterIivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTextureParameterIivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetTextureParameterIivEXT = cast(glbfn_glGetTextureParameterIivEXT)glbindGetProcAddress(`glGetTextureParameterIivEXT`);
  if (glGetTextureParameterIivEXT is null) assert(0, `OpenGL function 'glGetTextureParameterIivEXT' not found!`);
  glGetTextureParameterIivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTextureParameterIuivEXT glGetTextureParameterIuivEXT = function void (uint a0, uint a1, uint a2, uint* a3) nothrow @nogc {
  glbfn_glGetTextureParameterIuivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTextureParameterIuivEXT_loader (uint a0, uint a1, uint a2, uint* a3) nothrow @nogc {
  glGetTextureParameterIuivEXT = cast(glbfn_glGetTextureParameterIuivEXT)glbindGetProcAddress(`glGetTextureParameterIuivEXT`);
  if (glGetTextureParameterIuivEXT is null) assert(0, `OpenGL function 'glGetTextureParameterIuivEXT' not found!`);
  glGetTextureParameterIuivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexParameterIivEXT glMultiTexParameterIivEXT = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glMultiTexParameterIivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexParameterIivEXT_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glMultiTexParameterIivEXT = cast(glbfn_glMultiTexParameterIivEXT)glbindGetProcAddress(`glMultiTexParameterIivEXT`);
  if (glMultiTexParameterIivEXT is null) assert(0, `OpenGL function 'glMultiTexParameterIivEXT' not found!`);
  glMultiTexParameterIivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexParameterIuivEXT glMultiTexParameterIuivEXT = function void (uint a0, uint a1, uint a2, const(uint)* a3) nothrow @nogc {
  glbfn_glMultiTexParameterIuivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexParameterIuivEXT_loader (uint a0, uint a1, uint a2, const(uint)* a3) nothrow @nogc {
  glMultiTexParameterIuivEXT = cast(glbfn_glMultiTexParameterIuivEXT)glbindGetProcAddress(`glMultiTexParameterIuivEXT`);
  if (glMultiTexParameterIuivEXT is null) assert(0, `OpenGL function 'glMultiTexParameterIuivEXT' not found!`);
  glMultiTexParameterIuivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetMultiTexParameterIivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexParameterIivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetMultiTexParameterIivEXT = cast(glbfn_glGetMultiTexParameterIivEXT)glbindGetProcAddress(`glGetMultiTexParameterIivEXT`);
  if (glGetMultiTexParameterIivEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterIivEXT' not found!`);
  glGetMultiTexParameterIivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT = function void (uint a0, uint a1, uint a2, uint* a3) nothrow @nogc {
  glbfn_glGetMultiTexParameterIuivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMultiTexParameterIuivEXT_loader (uint a0, uint a1, uint a2, uint* a3) nothrow @nogc {
  glGetMultiTexParameterIuivEXT = cast(glbfn_glGetMultiTexParameterIuivEXT)glbindGetProcAddress(`glGetMultiTexParameterIuivEXT`);
  if (glGetMultiTexParameterIuivEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterIuivEXT' not found!`);
  glGetMultiTexParameterIuivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform1uiEXT glProgramUniform1uiEXT = function void (uint a0, int a1, uint a2) nothrow @nogc {
  glbfn_glProgramUniform1uiEXT_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1uiEXT_loader (uint a0, int a1, uint a2) nothrow @nogc {
  glProgramUniform1uiEXT = cast(glbfn_glProgramUniform1uiEXT)glbindGetProcAddress(`glProgramUniform1uiEXT`);
  if (glProgramUniform1uiEXT is null) assert(0, `OpenGL function 'glProgramUniform1uiEXT' not found!`);
  glProgramUniform1uiEXT(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2uiEXT glProgramUniform2uiEXT = function void (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glProgramUniform2uiEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2uiEXT_loader (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glProgramUniform2uiEXT = cast(glbfn_glProgramUniform2uiEXT)glbindGetProcAddress(`glProgramUniform2uiEXT`);
  if (glProgramUniform2uiEXT is null) assert(0, `OpenGL function 'glProgramUniform2uiEXT' not found!`);
  glProgramUniform2uiEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3uiEXT glProgramUniform3uiEXT = function void (uint a0, int a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glProgramUniform3uiEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3uiEXT_loader (uint a0, int a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glProgramUniform3uiEXT = cast(glbfn_glProgramUniform3uiEXT)glbindGetProcAddress(`glProgramUniform3uiEXT`);
  if (glProgramUniform3uiEXT is null) assert(0, `OpenGL function 'glProgramUniform3uiEXT' not found!`);
  glProgramUniform3uiEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4uiEXT glProgramUniform4uiEXT = function void (uint a0, int a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glProgramUniform4uiEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4uiEXT_loader (uint a0, int a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glProgramUniform4uiEXT = cast(glbfn_glProgramUniform4uiEXT)glbindGetProcAddress(`glProgramUniform4uiEXT`);
  if (glProgramUniform4uiEXT is null) assert(0, `OpenGL function 'glProgramUniform4uiEXT' not found!`);
  glProgramUniform4uiEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1uivEXT glProgramUniform1uivEXT = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform1uivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1uivEXT_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform1uivEXT = cast(glbfn_glProgramUniform1uivEXT)glbindGetProcAddress(`glProgramUniform1uivEXT`);
  if (glProgramUniform1uivEXT is null) assert(0, `OpenGL function 'glProgramUniform1uivEXT' not found!`);
  glProgramUniform1uivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2uivEXT glProgramUniform2uivEXT = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform2uivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2uivEXT_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform2uivEXT = cast(glbfn_glProgramUniform2uivEXT)glbindGetProcAddress(`glProgramUniform2uivEXT`);
  if (glProgramUniform2uivEXT is null) assert(0, `OpenGL function 'glProgramUniform2uivEXT' not found!`);
  glProgramUniform2uivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3uivEXT glProgramUniform3uivEXT = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform3uivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3uivEXT_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform3uivEXT = cast(glbfn_glProgramUniform3uivEXT)glbindGetProcAddress(`glProgramUniform3uivEXT`);
  if (glProgramUniform3uivEXT is null) assert(0, `OpenGL function 'glProgramUniform3uivEXT' not found!`);
  glProgramUniform3uivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4uivEXT glProgramUniform4uivEXT = function void (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramUniform4uivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4uivEXT_loader (uint a0, int a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramUniform4uivEXT = cast(glbfn_glProgramUniform4uivEXT)glbindGetProcAddress(`glProgramUniform4uivEXT`);
  if (glProgramUniform4uivEXT is null) assert(0, `OpenGL function 'glProgramUniform4uivEXT' not found!`);
  glProgramUniform4uivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT = function void (uint a0, uint a1, uint a2, int a3, const(float)* a4) nothrow @nogc {
  glbfn_glNamedProgramLocalParameters4fvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedProgramLocalParameters4fvEXT_loader (uint a0, uint a1, uint a2, int a3, const(float)* a4) nothrow @nogc {
  glNamedProgramLocalParameters4fvEXT = cast(glbfn_glNamedProgramLocalParameters4fvEXT)glbindGetProcAddress(`glNamedProgramLocalParameters4fvEXT`);
  if (glNamedProgramLocalParameters4fvEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameters4fvEXT' not found!`);
  glNamedProgramLocalParameters4fvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT = function void (uint a0, uint a1, uint a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glNamedProgramLocalParameterI4iEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glNamedProgramLocalParameterI4iEXT_loader (uint a0, uint a1, uint a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glNamedProgramLocalParameterI4iEXT = cast(glbfn_glNamedProgramLocalParameterI4iEXT)glbindGetProcAddress(`glNamedProgramLocalParameterI4iEXT`);
  if (glNamedProgramLocalParameterI4iEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4iEXT' not found!`);
  glNamedProgramLocalParameterI4iEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glNamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glNamedProgramLocalParameterI4ivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedProgramLocalParameterI4ivEXT_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glNamedProgramLocalParameterI4ivEXT = cast(glbfn_glNamedProgramLocalParameterI4ivEXT)glbindGetProcAddress(`glNamedProgramLocalParameterI4ivEXT`);
  if (glNamedProgramLocalParameterI4ivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4ivEXT' not found!`);
  glNamedProgramLocalParameterI4ivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT = function void (uint a0, uint a1, uint a2, int a3, const(int)* a4) nothrow @nogc {
  glbfn_glNamedProgramLocalParametersI4ivEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedProgramLocalParametersI4ivEXT_loader (uint a0, uint a1, uint a2, int a3, const(int)* a4) nothrow @nogc {
  glNamedProgramLocalParametersI4ivEXT = cast(glbfn_glNamedProgramLocalParametersI4ivEXT)glbindGetProcAddress(`glNamedProgramLocalParametersI4ivEXT`);
  if (glNamedProgramLocalParametersI4ivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4ivEXT' not found!`);
  glNamedProgramLocalParametersI4ivEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6) nothrow @nogc {
  glbfn_glNamedProgramLocalParameterI4uiEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glNamedProgramLocalParameterI4uiEXT_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6) nothrow @nogc {
  glNamedProgramLocalParameterI4uiEXT = cast(glbfn_glNamedProgramLocalParameterI4uiEXT)glbindGetProcAddress(`glNamedProgramLocalParameterI4uiEXT`);
  if (glNamedProgramLocalParameterI4uiEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uiEXT' not found!`);
  glNamedProgramLocalParameterI4uiEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT = function void (uint a0, uint a1, uint a2, const(uint)* a3) nothrow @nogc {
  glbfn_glNamedProgramLocalParameterI4uivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedProgramLocalParameterI4uivEXT_loader (uint a0, uint a1, uint a2, const(uint)* a3) nothrow @nogc {
  glNamedProgramLocalParameterI4uivEXT = cast(glbfn_glNamedProgramLocalParameterI4uivEXT)glbindGetProcAddress(`glNamedProgramLocalParameterI4uivEXT`);
  if (glNamedProgramLocalParameterI4uivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uivEXT' not found!`);
  glNamedProgramLocalParameterI4uivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT = function void (uint a0, uint a1, uint a2, int a3, const(uint)* a4) nothrow @nogc {
  glbfn_glNamedProgramLocalParametersI4uivEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedProgramLocalParametersI4uivEXT_loader (uint a0, uint a1, uint a2, int a3, const(uint)* a4) nothrow @nogc {
  glNamedProgramLocalParametersI4uivEXT = cast(glbfn_glNamedProgramLocalParametersI4uivEXT)glbindGetProcAddress(`glNamedProgramLocalParametersI4uivEXT`);
  if (glNamedProgramLocalParametersI4uivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4uivEXT' not found!`);
  glNamedProgramLocalParametersI4uivEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetNamedProgramLocalParameterIivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedProgramLocalParameterIivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetNamedProgramLocalParameterIivEXT = cast(glbfn_glGetNamedProgramLocalParameterIivEXT)glbindGetProcAddress(`glGetNamedProgramLocalParameterIivEXT`);
  if (glGetNamedProgramLocalParameterIivEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIivEXT' not found!`);
  glGetNamedProgramLocalParameterIivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT = function void (uint a0, uint a1, uint a2, uint* a3) nothrow @nogc {
  glbfn_glGetNamedProgramLocalParameterIuivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedProgramLocalParameterIuivEXT_loader (uint a0, uint a1, uint a2, uint* a3) nothrow @nogc {
  glGetNamedProgramLocalParameterIuivEXT = cast(glbfn_glGetNamedProgramLocalParameterIuivEXT)glbindGetProcAddress(`glGetNamedProgramLocalParameterIuivEXT`);
  if (glGetNamedProgramLocalParameterIuivEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIuivEXT' not found!`);
  glGetNamedProgramLocalParameterIuivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glEnableClientStateiEXT glEnableClientStateiEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnableClientStateiEXT_loader(a0,a1,);
};
private auto glbfn_glEnableClientStateiEXT_loader (uint a0, uint a1) nothrow @nogc {
  glEnableClientStateiEXT = cast(glbfn_glEnableClientStateiEXT)glbindGetProcAddress(`glEnableClientStateiEXT`);
  if (glEnableClientStateiEXT is null) assert(0, `OpenGL function 'glEnableClientStateiEXT' not found!`);
  glEnableClientStateiEXT(a0,a1,);
}
__gshared glbfn_glDisableClientStateiEXT glDisableClientStateiEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisableClientStateiEXT_loader(a0,a1,);
};
private auto glbfn_glDisableClientStateiEXT_loader (uint a0, uint a1) nothrow @nogc {
  glDisableClientStateiEXT = cast(glbfn_glDisableClientStateiEXT)glbindGetProcAddress(`glDisableClientStateiEXT`);
  if (glDisableClientStateiEXT is null) assert(0, `OpenGL function 'glDisableClientStateiEXT' not found!`);
  glDisableClientStateiEXT(a0,a1,);
}
__gshared glbfn_glGetFloati_vEXT glGetFloati_vEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetFloati_vEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetFloati_vEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetFloati_vEXT = cast(glbfn_glGetFloati_vEXT)glbindGetProcAddress(`glGetFloati_vEXT`);
  if (glGetFloati_vEXT is null) assert(0, `OpenGL function 'glGetFloati_vEXT' not found!`);
  glGetFloati_vEXT(a0,a1,a2,);
}
__gshared glbfn_glGetDoublei_vEXT glGetDoublei_vEXT = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetDoublei_vEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetDoublei_vEXT_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetDoublei_vEXT = cast(glbfn_glGetDoublei_vEXT)glbindGetProcAddress(`glGetDoublei_vEXT`);
  if (glGetDoublei_vEXT is null) assert(0, `OpenGL function 'glGetDoublei_vEXT' not found!`);
  glGetDoublei_vEXT(a0,a1,a2,);
}
__gshared glbfn_glGetPointeri_vEXT glGetPointeri_vEXT = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetPointeri_vEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetPointeri_vEXT_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetPointeri_vEXT = cast(glbfn_glGetPointeri_vEXT)glbindGetProcAddress(`glGetPointeri_vEXT`);
  if (glGetPointeri_vEXT is null) assert(0, `OpenGL function 'glGetPointeri_vEXT' not found!`);
  glGetPointeri_vEXT(a0,a1,a2,);
}
__gshared glbfn_glNamedProgramStringEXT glNamedProgramStringEXT = function void (uint a0, uint a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glNamedProgramStringEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedProgramStringEXT_loader (uint a0, uint a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glNamedProgramStringEXT = cast(glbfn_glNamedProgramStringEXT)glbindGetProcAddress(`glNamedProgramStringEXT`);
  if (glNamedProgramStringEXT is null) assert(0, `OpenGL function 'glNamedProgramStringEXT' not found!`);
  glNamedProgramStringEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT = function void (uint a0, uint a1, uint a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glbfn_glNamedProgramLocalParameter4dEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glNamedProgramLocalParameter4dEXT_loader (uint a0, uint a1, uint a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glNamedProgramLocalParameter4dEXT = cast(glbfn_glNamedProgramLocalParameter4dEXT)glbindGetProcAddress(`glNamedProgramLocalParameter4dEXT`);
  if (glNamedProgramLocalParameter4dEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dEXT' not found!`);
  glNamedProgramLocalParameter4dEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT = function void (uint a0, uint a1, uint a2, const(double)* a3) nothrow @nogc {
  glbfn_glNamedProgramLocalParameter4dvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedProgramLocalParameter4dvEXT_loader (uint a0, uint a1, uint a2, const(double)* a3) nothrow @nogc {
  glNamedProgramLocalParameter4dvEXT = cast(glbfn_glNamedProgramLocalParameter4dvEXT)glbindGetProcAddress(`glNamedProgramLocalParameter4dvEXT`);
  if (glNamedProgramLocalParameter4dvEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dvEXT' not found!`);
  glNamedProgramLocalParameter4dvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT = function void (uint a0, uint a1, uint a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glbfn_glNamedProgramLocalParameter4fEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glNamedProgramLocalParameter4fEXT_loader (uint a0, uint a1, uint a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glNamedProgramLocalParameter4fEXT = cast(glbfn_glNamedProgramLocalParameter4fEXT)glbindGetProcAddress(`glNamedProgramLocalParameter4fEXT`);
  if (glNamedProgramLocalParameter4fEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fEXT' not found!`);
  glNamedProgramLocalParameter4fEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glNamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glNamedProgramLocalParameter4fvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedProgramLocalParameter4fvEXT_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glNamedProgramLocalParameter4fvEXT = cast(glbfn_glNamedProgramLocalParameter4fvEXT)glbindGetProcAddress(`glNamedProgramLocalParameter4fvEXT`);
  if (glNamedProgramLocalParameter4fvEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fvEXT' not found!`);
  glNamedProgramLocalParameter4fvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT = function void (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glbfn_glGetNamedProgramLocalParameterdvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedProgramLocalParameterdvEXT_loader (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glGetNamedProgramLocalParameterdvEXT = cast(glbfn_glGetNamedProgramLocalParameterdvEXT)glbindGetProcAddress(`glGetNamedProgramLocalParameterdvEXT`);
  if (glGetNamedProgramLocalParameterdvEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterdvEXT' not found!`);
  glGetNamedProgramLocalParameterdvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetNamedProgramLocalParameterfvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedProgramLocalParameterfvEXT_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetNamedProgramLocalParameterfvEXT = cast(glbfn_glGetNamedProgramLocalParameterfvEXT)glbindGetProcAddress(`glGetNamedProgramLocalParameterfvEXT`);
  if (glGetNamedProgramLocalParameterfvEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterfvEXT' not found!`);
  glGetNamedProgramLocalParameterfvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetNamedProgramivEXT glGetNamedProgramivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetNamedProgramivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedProgramivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetNamedProgramivEXT = cast(glbfn_glGetNamedProgramivEXT)glbindGetProcAddress(`glGetNamedProgramivEXT`);
  if (glGetNamedProgramivEXT is null) assert(0, `OpenGL function 'glGetNamedProgramivEXT' not found!`);
  glGetNamedProgramivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetNamedProgramStringEXT glGetNamedProgramStringEXT = function void (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glbfn_glGetNamedProgramStringEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedProgramStringEXT_loader (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glGetNamedProgramStringEXT = cast(glbfn_glGetNamedProgramStringEXT)glbindGetProcAddress(`glGetNamedProgramStringEXT`);
  if (glGetNamedProgramStringEXT is null) assert(0, `OpenGL function 'glGetNamedProgramStringEXT' not found!`);
  glGetNamedProgramStringEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT = function void (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glbfn_glNamedRenderbufferStorageEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedRenderbufferStorageEXT_loader (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glNamedRenderbufferStorageEXT = cast(glbfn_glNamedRenderbufferStorageEXT)glbindGetProcAddress(`glNamedRenderbufferStorageEXT`);
  if (glNamedRenderbufferStorageEXT is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageEXT' not found!`);
  glNamedRenderbufferStorageEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetNamedRenderbufferParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedRenderbufferParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetNamedRenderbufferParameterivEXT = cast(glbfn_glGetNamedRenderbufferParameterivEXT)glbindGetProcAddress(`glGetNamedRenderbufferParameterivEXT`);
  if (glGetNamedRenderbufferParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameterivEXT' not found!`);
  glGetNamedRenderbufferParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glNamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT = function void (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glNamedRenderbufferStorageMultisampleEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedRenderbufferStorageMultisampleEXT_loader (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glNamedRenderbufferStorageMultisampleEXT = cast(glbfn_glNamedRenderbufferStorageMultisampleEXT)glbindGetProcAddress(`glNamedRenderbufferStorageMultisampleEXT`);
  if (glNamedRenderbufferStorageMultisampleEXT is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleEXT' not found!`);
  glNamedRenderbufferStorageMultisampleEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT = function void (uint a0, int a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT_loader (uint a0, int a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glNamedRenderbufferStorageMultisampleCoverageEXT = cast(glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT)glbindGetProcAddress(`glNamedRenderbufferStorageMultisampleCoverageEXT`);
  if (glNamedRenderbufferStorageMultisampleCoverageEXT is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleCoverageEXT' not found!`);
  glNamedRenderbufferStorageMultisampleCoverageEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glCheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT = function uint (uint a0, uint a1) nothrow @nogc {
  return glbfn_glCheckNamedFramebufferStatusEXT_loader(a0,a1,);
};
private auto glbfn_glCheckNamedFramebufferStatusEXT_loader (uint a0, uint a1) nothrow @nogc {
  glCheckNamedFramebufferStatusEXT = cast(glbfn_glCheckNamedFramebufferStatusEXT)glbindGetProcAddress(`glCheckNamedFramebufferStatusEXT`);
  if (glCheckNamedFramebufferStatusEXT is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatusEXT' not found!`);
  return glCheckNamedFramebufferStatusEXT(a0,a1,);
}
__gshared glbfn_glNamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT = function void (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glbfn_glNamedFramebufferTexture1DEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedFramebufferTexture1DEXT_loader (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glNamedFramebufferTexture1DEXT = cast(glbfn_glNamedFramebufferTexture1DEXT)glbindGetProcAddress(`glNamedFramebufferTexture1DEXT`);
  if (glNamedFramebufferTexture1DEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTexture1DEXT' not found!`);
  glNamedFramebufferTexture1DEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT = function void (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glbfn_glNamedFramebufferTexture2DEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedFramebufferTexture2DEXT_loader (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glNamedFramebufferTexture2DEXT = cast(glbfn_glNamedFramebufferTexture2DEXT)glbindGetProcAddress(`glNamedFramebufferTexture2DEXT`);
  if (glNamedFramebufferTexture2DEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTexture2DEXT' not found!`);
  glNamedFramebufferTexture2DEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT = function void (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glNamedFramebufferTexture3DEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glNamedFramebufferTexture3DEXT_loader (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glNamedFramebufferTexture3DEXT = cast(glbfn_glNamedFramebufferTexture3DEXT)glbindGetProcAddress(`glNamedFramebufferTexture3DEXT`);
  if (glNamedFramebufferTexture3DEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTexture3DEXT' not found!`);
  glNamedFramebufferTexture3DEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glNamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glNamedFramebufferRenderbufferEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedFramebufferRenderbufferEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glNamedFramebufferRenderbufferEXT = cast(glbfn_glNamedFramebufferRenderbufferEXT)glbindGetProcAddress(`glNamedFramebufferRenderbufferEXT`);
  if (glNamedFramebufferRenderbufferEXT is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbufferEXT' not found!`);
  glNamedFramebufferRenderbufferEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetNamedFramebufferAttachmentParameterivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetNamedFramebufferAttachmentParameterivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetNamedFramebufferAttachmentParameterivEXT = cast(glbfn_glGetNamedFramebufferAttachmentParameterivEXT)glbindGetProcAddress(`glGetNamedFramebufferAttachmentParameterivEXT`);
  if (glGetNamedFramebufferAttachmentParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameterivEXT' not found!`);
  glGetNamedFramebufferAttachmentParameterivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGenerateTextureMipmapEXT glGenerateTextureMipmapEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glGenerateTextureMipmapEXT_loader(a0,a1,);
};
private auto glbfn_glGenerateTextureMipmapEXT_loader (uint a0, uint a1) nothrow @nogc {
  glGenerateTextureMipmapEXT = cast(glbfn_glGenerateTextureMipmapEXT)glbindGetProcAddress(`glGenerateTextureMipmapEXT`);
  if (glGenerateTextureMipmapEXT is null) assert(0, `OpenGL function 'glGenerateTextureMipmapEXT' not found!`);
  glGenerateTextureMipmapEXT(a0,a1,);
}
__gshared glbfn_glGenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glGenerateMultiTexMipmapEXT_loader(a0,a1,);
};
private auto glbfn_glGenerateMultiTexMipmapEXT_loader (uint a0, uint a1) nothrow @nogc {
  glGenerateMultiTexMipmapEXT = cast(glbfn_glGenerateMultiTexMipmapEXT)glbindGetProcAddress(`glGenerateMultiTexMipmapEXT`);
  if (glGenerateMultiTexMipmapEXT is null) assert(0, `OpenGL function 'glGenerateMultiTexMipmapEXT' not found!`);
  glGenerateMultiTexMipmapEXT(a0,a1,);
}
__gshared glbfn_glFramebufferDrawBufferEXT glFramebufferDrawBufferEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glFramebufferDrawBufferEXT_loader(a0,a1,);
};
private auto glbfn_glFramebufferDrawBufferEXT_loader (uint a0, uint a1) nothrow @nogc {
  glFramebufferDrawBufferEXT = cast(glbfn_glFramebufferDrawBufferEXT)glbindGetProcAddress(`glFramebufferDrawBufferEXT`);
  if (glFramebufferDrawBufferEXT is null) assert(0, `OpenGL function 'glFramebufferDrawBufferEXT' not found!`);
  glFramebufferDrawBufferEXT(a0,a1,);
}
__gshared glbfn_glFramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glFramebufferDrawBuffersEXT_loader(a0,a1,a2,);
};
private auto glbfn_glFramebufferDrawBuffersEXT_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glFramebufferDrawBuffersEXT = cast(glbfn_glFramebufferDrawBuffersEXT)glbindGetProcAddress(`glFramebufferDrawBuffersEXT`);
  if (glFramebufferDrawBuffersEXT is null) assert(0, `OpenGL function 'glFramebufferDrawBuffersEXT' not found!`);
  glFramebufferDrawBuffersEXT(a0,a1,a2,);
}
__gshared glbfn_glFramebufferReadBufferEXT glFramebufferReadBufferEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glFramebufferReadBufferEXT_loader(a0,a1,);
};
private auto glbfn_glFramebufferReadBufferEXT_loader (uint a0, uint a1) nothrow @nogc {
  glFramebufferReadBufferEXT = cast(glbfn_glFramebufferReadBufferEXT)glbindGetProcAddress(`glFramebufferReadBufferEXT`);
  if (glFramebufferReadBufferEXT is null) assert(0, `OpenGL function 'glFramebufferReadBufferEXT' not found!`);
  glFramebufferReadBufferEXT(a0,a1,);
}
__gshared glbfn_glGetFramebufferParameterivEXT glGetFramebufferParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetFramebufferParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetFramebufferParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetFramebufferParameterivEXT = cast(glbfn_glGetFramebufferParameterivEXT)glbindGetProcAddress(`glGetFramebufferParameterivEXT`);
  if (glGetFramebufferParameterivEXT is null) assert(0, `OpenGL function 'glGetFramebufferParameterivEXT' not found!`);
  glGetFramebufferParameterivEXT(a0,a1,a2,);
}
static if (size_t.sizeof == 4) {
__gshared glbfn_glNamedCopyBufferSubDataEXT glNamedCopyBufferSubDataEXT = function void (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glNamedCopyBufferSubDataEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedCopyBufferSubDataEXT_loader (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glNamedCopyBufferSubDataEXT = cast(glbfn_glNamedCopyBufferSubDataEXT)glbindGetProcAddress(`glNamedCopyBufferSubDataEXT`);
  if (glNamedCopyBufferSubDataEXT is null) assert(0, `OpenGL function 'glNamedCopyBufferSubDataEXT' not found!`);
  glNamedCopyBufferSubDataEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedFramebufferTextureEXT glNamedFramebufferTextureEXT = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glNamedFramebufferTextureEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedFramebufferTextureEXT_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glNamedFramebufferTextureEXT = cast(glbfn_glNamedFramebufferTextureEXT)glbindGetProcAddress(`glNamedFramebufferTextureEXT`);
  if (glNamedFramebufferTextureEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTextureEXT' not found!`);
  glNamedFramebufferTextureEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glNamedFramebufferTextureLayerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedFramebufferTextureLayerEXT_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glNamedFramebufferTextureLayerEXT = cast(glbfn_glNamedFramebufferTextureLayerEXT)glbindGetProcAddress(`glNamedFramebufferTextureLayerEXT`);
  if (glNamedFramebufferTextureLayerEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayerEXT' not found!`);
  glNamedFramebufferTextureLayerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT = function void (uint a0, uint a1, uint a2, int a3, uint a4) nothrow @nogc {
  glbfn_glNamedFramebufferTextureFaceEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glNamedFramebufferTextureFaceEXT_loader (uint a0, uint a1, uint a2, int a3, uint a4) nothrow @nogc {
  glNamedFramebufferTextureFaceEXT = cast(glbfn_glNamedFramebufferTextureFaceEXT)glbindGetProcAddress(`glNamedFramebufferTextureFaceEXT`);
  if (glNamedFramebufferTextureFaceEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTextureFaceEXT' not found!`);
  glNamedFramebufferTextureFaceEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTextureRenderbufferEXT glTextureRenderbufferEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glTextureRenderbufferEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTextureRenderbufferEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glTextureRenderbufferEXT = cast(glbfn_glTextureRenderbufferEXT)glbindGetProcAddress(`glTextureRenderbufferEXT`);
  if (glTextureRenderbufferEXT is null) assert(0, `OpenGL function 'glTextureRenderbufferEXT' not found!`);
  glTextureRenderbufferEXT(a0,a1,a2,);
}
__gshared glbfn_glMultiTexRenderbufferEXT glMultiTexRenderbufferEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glMultiTexRenderbufferEXT_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexRenderbufferEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glMultiTexRenderbufferEXT = cast(glbfn_glMultiTexRenderbufferEXT)glbindGetProcAddress(`glMultiTexRenderbufferEXT`);
  if (glMultiTexRenderbufferEXT is null) assert(0, `OpenGL function 'glMultiTexRenderbufferEXT' not found!`);
  glMultiTexRenderbufferEXT(a0,a1,a2,);
}
__gshared glbfn_glVertexArrayVertexOffsetEXT glVertexArrayVertexOffsetEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glVertexArrayVertexOffsetEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexArrayVertexOffsetEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glVertexArrayVertexOffsetEXT = cast(glbfn_glVertexArrayVertexOffsetEXT)glbindGetProcAddress(`glVertexArrayVertexOffsetEXT`);
  if (glVertexArrayVertexOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexOffsetEXT' not found!`);
  glVertexArrayVertexOffsetEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glVertexArrayColorOffsetEXT glVertexArrayColorOffsetEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glVertexArrayColorOffsetEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexArrayColorOffsetEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glVertexArrayColorOffsetEXT = cast(glbfn_glVertexArrayColorOffsetEXT)glbindGetProcAddress(`glVertexArrayColorOffsetEXT`);
  if (glVertexArrayColorOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayColorOffsetEXT' not found!`);
  glVertexArrayColorOffsetEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glVertexArrayEdgeFlagOffsetEXT glVertexArrayEdgeFlagOffsetEXT = function void (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glbfn_glVertexArrayEdgeFlagOffsetEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexArrayEdgeFlagOffsetEXT_loader (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glVertexArrayEdgeFlagOffsetEXT = cast(glbfn_glVertexArrayEdgeFlagOffsetEXT)glbindGetProcAddress(`glVertexArrayEdgeFlagOffsetEXT`);
  if (glVertexArrayEdgeFlagOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayEdgeFlagOffsetEXT' not found!`);
  glVertexArrayEdgeFlagOffsetEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexArrayIndexOffsetEXT glVertexArrayIndexOffsetEXT = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexArrayIndexOffsetEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayIndexOffsetEXT_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glVertexArrayIndexOffsetEXT = cast(glbfn_glVertexArrayIndexOffsetEXT)glbindGetProcAddress(`glVertexArrayIndexOffsetEXT`);
  if (glVertexArrayIndexOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayIndexOffsetEXT' not found!`);
  glVertexArrayIndexOffsetEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayNormalOffsetEXT glVertexArrayNormalOffsetEXT = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexArrayNormalOffsetEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayNormalOffsetEXT_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glVertexArrayNormalOffsetEXT = cast(glbfn_glVertexArrayNormalOffsetEXT)glbindGetProcAddress(`glVertexArrayNormalOffsetEXT`);
  if (glVertexArrayNormalOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayNormalOffsetEXT' not found!`);
  glVertexArrayNormalOffsetEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayTexCoordOffsetEXT glVertexArrayTexCoordOffsetEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glVertexArrayTexCoordOffsetEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexArrayTexCoordOffsetEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glVertexArrayTexCoordOffsetEXT = cast(glbfn_glVertexArrayTexCoordOffsetEXT)glbindGetProcAddress(`glVertexArrayTexCoordOffsetEXT`);
  if (glVertexArrayTexCoordOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayTexCoordOffsetEXT' not found!`);
  glVertexArrayTexCoordOffsetEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glVertexArrayMultiTexCoordOffsetEXT glVertexArrayMultiTexCoordOffsetEXT = function void (uint a0, uint a1, uint a2, int a3, uint a4, int a5, int a6) nothrow @nogc {
  glbfn_glVertexArrayMultiTexCoordOffsetEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glVertexArrayMultiTexCoordOffsetEXT_loader (uint a0, uint a1, uint a2, int a3, uint a4, int a5, int a6) nothrow @nogc {
  glVertexArrayMultiTexCoordOffsetEXT = cast(glbfn_glVertexArrayMultiTexCoordOffsetEXT)glbindGetProcAddress(`glVertexArrayMultiTexCoordOffsetEXT`);
  if (glVertexArrayMultiTexCoordOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayMultiTexCoordOffsetEXT' not found!`);
  glVertexArrayMultiTexCoordOffsetEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glVertexArrayFogCoordOffsetEXT glVertexArrayFogCoordOffsetEXT = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexArrayFogCoordOffsetEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayFogCoordOffsetEXT_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glVertexArrayFogCoordOffsetEXT = cast(glbfn_glVertexArrayFogCoordOffsetEXT)glbindGetProcAddress(`glVertexArrayFogCoordOffsetEXT`);
  if (glVertexArrayFogCoordOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayFogCoordOffsetEXT' not found!`);
  glVertexArrayFogCoordOffsetEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArraySecondaryColorOffsetEXT glVertexArraySecondaryColorOffsetEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glVertexArraySecondaryColorOffsetEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexArraySecondaryColorOffsetEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glVertexArraySecondaryColorOffsetEXT = cast(glbfn_glVertexArraySecondaryColorOffsetEXT)glbindGetProcAddress(`glVertexArraySecondaryColorOffsetEXT`);
  if (glVertexArraySecondaryColorOffsetEXT is null) assert(0, `OpenGL function 'glVertexArraySecondaryColorOffsetEXT' not found!`);
  glVertexArraySecondaryColorOffsetEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glVertexArrayVertexAttribOffsetEXT glVertexArrayVertexAttribOffsetEXT = function void (uint a0, uint a1, uint a2, int a3, uint a4, ubyte a5, int a6, int a7) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribOffsetEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glVertexArrayVertexAttribOffsetEXT_loader (uint a0, uint a1, uint a2, int a3, uint a4, ubyte a5, int a6, int a7) nothrow @nogc {
  glVertexArrayVertexAttribOffsetEXT = cast(glbfn_glVertexArrayVertexAttribOffsetEXT)glbindGetProcAddress(`glVertexArrayVertexAttribOffsetEXT`);
  if (glVertexArrayVertexAttribOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribOffsetEXT' not found!`);
  glVertexArrayVertexAttribOffsetEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glVertexArrayVertexAttribIOffsetEXT glVertexArrayVertexAttribIOffsetEXT = function void (uint a0, uint a1, uint a2, int a3, uint a4, int a5, int a6) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribIOffsetEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glVertexArrayVertexAttribIOffsetEXT_loader (uint a0, uint a1, uint a2, int a3, uint a4, int a5, int a6) nothrow @nogc {
  glVertexArrayVertexAttribIOffsetEXT = cast(glbfn_glVertexArrayVertexAttribIOffsetEXT)glbindGetProcAddress(`glVertexArrayVertexAttribIOffsetEXT`);
  if (glVertexArrayVertexAttribIOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIOffsetEXT' not found!`);
  glVertexArrayVertexAttribIOffsetEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glEnableVertexArrayEXT glEnableVertexArrayEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnableVertexArrayEXT_loader(a0,a1,);
};
private auto glbfn_glEnableVertexArrayEXT_loader (uint a0, uint a1) nothrow @nogc {
  glEnableVertexArrayEXT = cast(glbfn_glEnableVertexArrayEXT)glbindGetProcAddress(`glEnableVertexArrayEXT`);
  if (glEnableVertexArrayEXT is null) assert(0, `OpenGL function 'glEnableVertexArrayEXT' not found!`);
  glEnableVertexArrayEXT(a0,a1,);
}
__gshared glbfn_glDisableVertexArrayEXT glDisableVertexArrayEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisableVertexArrayEXT_loader(a0,a1,);
};
private auto glbfn_glDisableVertexArrayEXT_loader (uint a0, uint a1) nothrow @nogc {
  glDisableVertexArrayEXT = cast(glbfn_glDisableVertexArrayEXT)glbindGetProcAddress(`glDisableVertexArrayEXT`);
  if (glDisableVertexArrayEXT is null) assert(0, `OpenGL function 'glDisableVertexArrayEXT' not found!`);
  glDisableVertexArrayEXT(a0,a1,);
}
__gshared glbfn_glEnableVertexArrayAttribEXT glEnableVertexArrayAttribEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEnableVertexArrayAttribEXT_loader(a0,a1,);
};
private auto glbfn_glEnableVertexArrayAttribEXT_loader (uint a0, uint a1) nothrow @nogc {
  glEnableVertexArrayAttribEXT = cast(glbfn_glEnableVertexArrayAttribEXT)glbindGetProcAddress(`glEnableVertexArrayAttribEXT`);
  if (glEnableVertexArrayAttribEXT is null) assert(0, `OpenGL function 'glEnableVertexArrayAttribEXT' not found!`);
  glEnableVertexArrayAttribEXT(a0,a1,);
}
__gshared glbfn_glDisableVertexArrayAttribEXT glDisableVertexArrayAttribEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDisableVertexArrayAttribEXT_loader(a0,a1,);
};
private auto glbfn_glDisableVertexArrayAttribEXT_loader (uint a0, uint a1) nothrow @nogc {
  glDisableVertexArrayAttribEXT = cast(glbfn_glDisableVertexArrayAttribEXT)glbindGetProcAddress(`glDisableVertexArrayAttribEXT`);
  if (glDisableVertexArrayAttribEXT is null) assert(0, `OpenGL function 'glDisableVertexArrayAttribEXT' not found!`);
  glDisableVertexArrayAttribEXT(a0,a1,);
}
__gshared glbfn_glGetVertexArrayIntegervEXT glGetVertexArrayIntegervEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexArrayIntegervEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexArrayIntegervEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexArrayIntegervEXT = cast(glbfn_glGetVertexArrayIntegervEXT)glbindGetProcAddress(`glGetVertexArrayIntegervEXT`);
  if (glGetVertexArrayIntegervEXT is null) assert(0, `OpenGL function 'glGetVertexArrayIntegervEXT' not found!`);
  glGetVertexArrayIntegervEXT(a0,a1,a2,);
}
__gshared glbfn_glGetVertexArrayPointervEXT glGetVertexArrayPointervEXT = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetVertexArrayPointervEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexArrayPointervEXT_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetVertexArrayPointervEXT = cast(glbfn_glGetVertexArrayPointervEXT)glbindGetProcAddress(`glGetVertexArrayPointervEXT`);
  if (glGetVertexArrayPointervEXT is null) assert(0, `OpenGL function 'glGetVertexArrayPointervEXT' not found!`);
  glGetVertexArrayPointervEXT(a0,a1,a2,);
}
__gshared glbfn_glGetVertexArrayIntegeri_vEXT glGetVertexArrayIntegeri_vEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetVertexArrayIntegeri_vEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetVertexArrayIntegeri_vEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetVertexArrayIntegeri_vEXT = cast(glbfn_glGetVertexArrayIntegeri_vEXT)glbindGetProcAddress(`glGetVertexArrayIntegeri_vEXT`);
  if (glGetVertexArrayIntegeri_vEXT is null) assert(0, `OpenGL function 'glGetVertexArrayIntegeri_vEXT' not found!`);
  glGetVertexArrayIntegeri_vEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetVertexArrayPointeri_vEXT glGetVertexArrayPointeri_vEXT = function void (uint a0, uint a1, uint a2, void** a3) nothrow @nogc {
  glbfn_glGetVertexArrayPointeri_vEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetVertexArrayPointeri_vEXT_loader (uint a0, uint a1, uint a2, void** a3) nothrow @nogc {
  glGetVertexArrayPointeri_vEXT = cast(glbfn_glGetVertexArrayPointeri_vEXT)glbindGetProcAddress(`glGetVertexArrayPointeri_vEXT`);
  if (glGetVertexArrayPointeri_vEXT is null) assert(0, `OpenGL function 'glGetVertexArrayPointeri_vEXT' not found!`);
  glGetVertexArrayPointeri_vEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMapNamedBufferRangeEXT glMapNamedBufferRangeEXT = function void* (uint a0, int a1, int a2, uint a3) nothrow @nogc {
  return glbfn_glMapNamedBufferRangeEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMapNamedBufferRangeEXT_loader (uint a0, int a1, int a2, uint a3) nothrow @nogc {
  glMapNamedBufferRangeEXT = cast(glbfn_glMapNamedBufferRangeEXT)glbindGetProcAddress(`glMapNamedBufferRangeEXT`);
  if (glMapNamedBufferRangeEXT is null) assert(0, `OpenGL function 'glMapNamedBufferRangeEXT' not found!`);
  return glMapNamedBufferRangeEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glFlushMappedNamedBufferRangeEXT glFlushMappedNamedBufferRangeEXT = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glFlushMappedNamedBufferRangeEXT_loader(a0,a1,a2,);
};
private auto glbfn_glFlushMappedNamedBufferRangeEXT_loader (uint a0, int a1, int a2) nothrow @nogc {
  glFlushMappedNamedBufferRangeEXT = cast(glbfn_glFlushMappedNamedBufferRangeEXT)glbindGetProcAddress(`glFlushMappedNamedBufferRangeEXT`);
  if (glFlushMappedNamedBufferRangeEXT is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRangeEXT' not found!`);
  glFlushMappedNamedBufferRangeEXT(a0,a1,a2,);
}
__gshared glbfn_glNamedBufferStorageEXT glNamedBufferStorageEXT = function void (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glbfn_glNamedBufferStorageEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedBufferStorageEXT_loader (uint a0, int a1, const(void)* a2, uint a3) nothrow @nogc {
  glNamedBufferStorageEXT = cast(glbfn_glNamedBufferStorageEXT)glbindGetProcAddress(`glNamedBufferStorageEXT`);
  if (glNamedBufferStorageEXT is null) assert(0, `OpenGL function 'glNamedBufferStorageEXT' not found!`);
  glNamedBufferStorageEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glClearNamedBufferDataEXT glClearNamedBufferDataEXT = function void (uint a0, uint a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glbfn_glClearNamedBufferDataEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glClearNamedBufferDataEXT_loader (uint a0, uint a1, uint a2, uint a3, const(void)* a4) nothrow @nogc {
  glClearNamedBufferDataEXT = cast(glbfn_glClearNamedBufferDataEXT)glbindGetProcAddress(`glClearNamedBufferDataEXT`);
  if (glClearNamedBufferDataEXT is null) assert(0, `OpenGL function 'glClearNamedBufferDataEXT' not found!`);
  glClearNamedBufferDataEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glClearNamedBufferSubDataEXT glClearNamedBufferSubDataEXT = function void (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glClearNamedBufferSubDataEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glClearNamedBufferSubDataEXT_loader (uint a0, uint a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glClearNamedBufferSubDataEXT = cast(glbfn_glClearNamedBufferSubDataEXT)glbindGetProcAddress(`glClearNamedBufferSubDataEXT`);
  if (glClearNamedBufferSubDataEXT is null) assert(0, `OpenGL function 'glClearNamedBufferSubDataEXT' not found!`);
  glClearNamedBufferSubDataEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glNamedFramebufferParameteriEXT glNamedFramebufferParameteriEXT = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glNamedFramebufferParameteriEXT_loader(a0,a1,a2,);
};
private auto glbfn_glNamedFramebufferParameteriEXT_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glNamedFramebufferParameteriEXT = cast(glbfn_glNamedFramebufferParameteriEXT)glbindGetProcAddress(`glNamedFramebufferParameteriEXT`);
  if (glNamedFramebufferParameteriEXT is null) assert(0, `OpenGL function 'glNamedFramebufferParameteriEXT' not found!`);
  glNamedFramebufferParameteriEXT(a0,a1,a2,);
}
__gshared glbfn_glGetNamedFramebufferParameterivEXT glGetNamedFramebufferParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetNamedFramebufferParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedFramebufferParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetNamedFramebufferParameterivEXT = cast(glbfn_glGetNamedFramebufferParameterivEXT)glbindGetProcAddress(`glGetNamedFramebufferParameterivEXT`);
  if (glGetNamedFramebufferParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameterivEXT' not found!`);
  glGetNamedFramebufferParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform1dEXT glProgramUniform1dEXT = function void (uint a0, int a1, double a2) nothrow @nogc {
  glbfn_glProgramUniform1dEXT_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniform1dEXT_loader (uint a0, int a1, double a2) nothrow @nogc {
  glProgramUniform1dEXT = cast(glbfn_glProgramUniform1dEXT)glbindGetProcAddress(`glProgramUniform1dEXT`);
  if (glProgramUniform1dEXT is null) assert(0, `OpenGL function 'glProgramUniform1dEXT' not found!`);
  glProgramUniform1dEXT(a0,a1,a2,);
}
__gshared glbfn_glProgramUniform2dEXT glProgramUniform2dEXT = function void (uint a0, int a1, double a2, double a3) nothrow @nogc {
  glbfn_glProgramUniform2dEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2dEXT_loader (uint a0, int a1, double a2, double a3) nothrow @nogc {
  glProgramUniform2dEXT = cast(glbfn_glProgramUniform2dEXT)glbindGetProcAddress(`glProgramUniform2dEXT`);
  if (glProgramUniform2dEXT is null) assert(0, `OpenGL function 'glProgramUniform2dEXT' not found!`);
  glProgramUniform2dEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3dEXT glProgramUniform3dEXT = function void (uint a0, int a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glProgramUniform3dEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniform3dEXT_loader (uint a0, int a1, double a2, double a3, double a4) nothrow @nogc {
  glProgramUniform3dEXT = cast(glbfn_glProgramUniform3dEXT)glbindGetProcAddress(`glProgramUniform3dEXT`);
  if (glProgramUniform3dEXT is null) assert(0, `OpenGL function 'glProgramUniform3dEXT' not found!`);
  glProgramUniform3dEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniform4dEXT glProgramUniform4dEXT = function void (uint a0, int a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glbfn_glProgramUniform4dEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramUniform4dEXT_loader (uint a0, int a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glProgramUniform4dEXT = cast(glbfn_glProgramUniform4dEXT)glbindGetProcAddress(`glProgramUniform4dEXT`);
  if (glProgramUniform4dEXT is null) assert(0, `OpenGL function 'glProgramUniform4dEXT' not found!`);
  glProgramUniform4dEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramUniform1dvEXT glProgramUniform1dvEXT = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform1dvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform1dvEXT_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform1dvEXT = cast(glbfn_glProgramUniform1dvEXT)glbindGetProcAddress(`glProgramUniform1dvEXT`);
  if (glProgramUniform1dvEXT is null) assert(0, `OpenGL function 'glProgramUniform1dvEXT' not found!`);
  glProgramUniform1dvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform2dvEXT glProgramUniform2dvEXT = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform2dvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform2dvEXT_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform2dvEXT = cast(glbfn_glProgramUniform2dvEXT)glbindGetProcAddress(`glProgramUniform2dvEXT`);
  if (glProgramUniform2dvEXT is null) assert(0, `OpenGL function 'glProgramUniform2dvEXT' not found!`);
  glProgramUniform2dvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform3dvEXT glProgramUniform3dvEXT = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform3dvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform3dvEXT_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform3dvEXT = cast(glbfn_glProgramUniform3dvEXT)glbindGetProcAddress(`glProgramUniform3dvEXT`);
  if (glProgramUniform3dvEXT is null) assert(0, `OpenGL function 'glProgramUniform3dvEXT' not found!`);
  glProgramUniform3dvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniform4dvEXT glProgramUniform4dvEXT = function void (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramUniform4dvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniform4dvEXT_loader (uint a0, int a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramUniform4dvEXT = cast(glbfn_glProgramUniform4dvEXT)glbindGetProcAddress(`glProgramUniform4dvEXT`);
  if (glProgramUniform4dvEXT is null) assert(0, `OpenGL function 'glProgramUniform4dvEXT' not found!`);
  glProgramUniform4dvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramUniformMatrix2dvEXT glProgramUniformMatrix2dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix2dvEXT = cast(glbfn_glProgramUniformMatrix2dvEXT)glbindGetProcAddress(`glProgramUniformMatrix2dvEXT`);
  if (glProgramUniformMatrix2dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dvEXT' not found!`);
  glProgramUniformMatrix2dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3dvEXT glProgramUniformMatrix3dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix3dvEXT = cast(glbfn_glProgramUniformMatrix3dvEXT)glbindGetProcAddress(`glProgramUniformMatrix3dvEXT`);
  if (glProgramUniformMatrix3dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dvEXT' not found!`);
  glProgramUniformMatrix3dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4dvEXT glProgramUniformMatrix4dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix4dvEXT = cast(glbfn_glProgramUniformMatrix4dvEXT)glbindGetProcAddress(`glProgramUniformMatrix4dvEXT`);
  if (glProgramUniformMatrix4dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dvEXT' not found!`);
  glProgramUniformMatrix4dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x3dvEXT glProgramUniformMatrix2x3dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x3dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x3dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix2x3dvEXT = cast(glbfn_glProgramUniformMatrix2x3dvEXT)glbindGetProcAddress(`glProgramUniformMatrix2x3dvEXT`);
  if (glProgramUniformMatrix2x3dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dvEXT' not found!`);
  glProgramUniformMatrix2x3dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix2x4dvEXT glProgramUniformMatrix2x4dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix2x4dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix2x4dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix2x4dvEXT = cast(glbfn_glProgramUniformMatrix2x4dvEXT)glbindGetProcAddress(`glProgramUniformMatrix2x4dvEXT`);
  if (glProgramUniformMatrix2x4dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dvEXT' not found!`);
  glProgramUniformMatrix2x4dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x2dvEXT glProgramUniformMatrix3x2dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x2dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x2dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix3x2dvEXT = cast(glbfn_glProgramUniformMatrix3x2dvEXT)glbindGetProcAddress(`glProgramUniformMatrix3x2dvEXT`);
  if (glProgramUniformMatrix3x2dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dvEXT' not found!`);
  glProgramUniformMatrix3x2dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix3x4dvEXT glProgramUniformMatrix3x4dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix3x4dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix3x4dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix3x4dvEXT = cast(glbfn_glProgramUniformMatrix3x4dvEXT)glbindGetProcAddress(`glProgramUniformMatrix3x4dvEXT`);
  if (glProgramUniformMatrix3x4dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dvEXT' not found!`);
  glProgramUniformMatrix3x4dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x2dvEXT glProgramUniformMatrix4x2dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x2dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x2dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix4x2dvEXT = cast(glbfn_glProgramUniformMatrix4x2dvEXT)glbindGetProcAddress(`glProgramUniformMatrix4x2dvEXT`);
  if (glProgramUniformMatrix4x2dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dvEXT' not found!`);
  glProgramUniformMatrix4x2dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramUniformMatrix4x3dvEXT glProgramUniformMatrix4x3dvEXT = function void (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glbfn_glProgramUniformMatrix4x3dvEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramUniformMatrix4x3dvEXT_loader (uint a0, int a1, int a2, ubyte a3, const(double)* a4) nothrow @nogc {
  glProgramUniformMatrix4x3dvEXT = cast(glbfn_glProgramUniformMatrix4x3dvEXT)glbindGetProcAddress(`glProgramUniformMatrix4x3dvEXT`);
  if (glProgramUniformMatrix4x3dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dvEXT' not found!`);
  glProgramUniformMatrix4x3dvEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTextureBufferRangeEXT glTextureBufferRangeEXT = function void (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glTextureBufferRangeEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glTextureBufferRangeEXT_loader (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glTextureBufferRangeEXT = cast(glbfn_glTextureBufferRangeEXT)glbindGetProcAddress(`glTextureBufferRangeEXT`);
  if (glTextureBufferRangeEXT is null) assert(0, `OpenGL function 'glTextureBufferRangeEXT' not found!`);
  glTextureBufferRangeEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTextureStorage1DEXT glTextureStorage1DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4) nothrow @nogc {
  glbfn_glTextureStorage1DEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTextureStorage1DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4) nothrow @nogc {
  glTextureStorage1DEXT = cast(glbfn_glTextureStorage1DEXT)glbindGetProcAddress(`glTextureStorage1DEXT`);
  if (glTextureStorage1DEXT is null) assert(0, `OpenGL function 'glTextureStorage1DEXT' not found!`);
  glTextureStorage1DEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTextureStorage2DEXT glTextureStorage2DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glTextureStorage2DEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glTextureStorage2DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glTextureStorage2DEXT = cast(glbfn_glTextureStorage2DEXT)glbindGetProcAddress(`glTextureStorage2DEXT`);
  if (glTextureStorage2DEXT is null) assert(0, `OpenGL function 'glTextureStorage2DEXT' not found!`);
  glTextureStorage2DEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glTextureStorage3DEXT glTextureStorage3DEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glTextureStorage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTextureStorage3DEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6) nothrow @nogc {
  glTextureStorage3DEXT = cast(glbfn_glTextureStorage3DEXT)glbindGetProcAddress(`glTextureStorage3DEXT`);
  if (glTextureStorage3DEXT is null) assert(0, `OpenGL function 'glTextureStorage3DEXT' not found!`);
  glTextureStorage3DEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTextureStorage2DMultisampleEXT glTextureStorage2DMultisampleEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glbfn_glTextureStorage2DMultisampleEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTextureStorage2DMultisampleEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glTextureStorage2DMultisampleEXT = cast(glbfn_glTextureStorage2DMultisampleEXT)glbindGetProcAddress(`glTextureStorage2DMultisampleEXT`);
  if (glTextureStorage2DMultisampleEXT is null) assert(0, `OpenGL function 'glTextureStorage2DMultisampleEXT' not found!`);
  glTextureStorage2DMultisampleEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTextureStorage3DMultisampleEXT glTextureStorage3DMultisampleEXT = function void (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glbfn_glTextureStorage3DMultisampleEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTextureStorage3DMultisampleEXT_loader (uint a0, uint a1, int a2, uint a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glTextureStorage3DMultisampleEXT = cast(glbfn_glTextureStorage3DMultisampleEXT)glbindGetProcAddress(`glTextureStorage3DMultisampleEXT`);
  if (glTextureStorage3DMultisampleEXT is null) assert(0, `OpenGL function 'glTextureStorage3DMultisampleEXT' not found!`);
  glTextureStorage3DMultisampleEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glVertexArrayBindVertexBufferEXT glVertexArrayBindVertexBufferEXT = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexArrayBindVertexBufferEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayBindVertexBufferEXT_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glVertexArrayBindVertexBufferEXT = cast(glbfn_glVertexArrayBindVertexBufferEXT)glbindGetProcAddress(`glVertexArrayBindVertexBufferEXT`);
  if (glVertexArrayBindVertexBufferEXT is null) assert(0, `OpenGL function 'glVertexArrayBindVertexBufferEXT' not found!`);
  glVertexArrayBindVertexBufferEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayVertexAttribFormatEXT glVertexArrayVertexAttribFormatEXT = function void (uint a0, uint a1, int a2, uint a3, ubyte a4, uint a5) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribFormatEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glVertexArrayVertexAttribFormatEXT_loader (uint a0, uint a1, int a2, uint a3, ubyte a4, uint a5) nothrow @nogc {
  glVertexArrayVertexAttribFormatEXT = cast(glbfn_glVertexArrayVertexAttribFormatEXT)glbindGetProcAddress(`glVertexArrayVertexAttribFormatEXT`);
  if (glVertexArrayVertexAttribFormatEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribFormatEXT' not found!`);
  glVertexArrayVertexAttribFormatEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glVertexArrayVertexAttribIFormatEXT glVertexArrayVertexAttribIFormatEXT = function void (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribIFormatEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayVertexAttribIFormatEXT_loader (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glVertexArrayVertexAttribIFormatEXT = cast(glbfn_glVertexArrayVertexAttribIFormatEXT)glbindGetProcAddress(`glVertexArrayVertexAttribIFormatEXT`);
  if (glVertexArrayVertexAttribIFormatEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIFormatEXT' not found!`);
  glVertexArrayVertexAttribIFormatEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayVertexAttribLFormatEXT glVertexArrayVertexAttribLFormatEXT = function void (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribLFormatEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexArrayVertexAttribLFormatEXT_loader (uint a0, uint a1, int a2, uint a3, uint a4) nothrow @nogc {
  glVertexArrayVertexAttribLFormatEXT = cast(glbfn_glVertexArrayVertexAttribLFormatEXT)glbindGetProcAddress(`glVertexArrayVertexAttribLFormatEXT`);
  if (glVertexArrayVertexAttribLFormatEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLFormatEXT' not found!`);
  glVertexArrayVertexAttribLFormatEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexArrayVertexAttribBindingEXT glVertexArrayVertexAttribBindingEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribBindingEXT_loader(a0,a1,a2,);
};
private auto glbfn_glVertexArrayVertexAttribBindingEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glVertexArrayVertexAttribBindingEXT = cast(glbfn_glVertexArrayVertexAttribBindingEXT)glbindGetProcAddress(`glVertexArrayVertexAttribBindingEXT`);
  if (glVertexArrayVertexAttribBindingEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribBindingEXT' not found!`);
  glVertexArrayVertexAttribBindingEXT(a0,a1,a2,);
}
__gshared glbfn_glVertexArrayVertexBindingDivisorEXT glVertexArrayVertexBindingDivisorEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glVertexArrayVertexBindingDivisorEXT_loader(a0,a1,a2,);
};
private auto glbfn_glVertexArrayVertexBindingDivisorEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glVertexArrayVertexBindingDivisorEXT = cast(glbfn_glVertexArrayVertexBindingDivisorEXT)glbindGetProcAddress(`glVertexArrayVertexBindingDivisorEXT`);
  if (glVertexArrayVertexBindingDivisorEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexBindingDivisorEXT' not found!`);
  glVertexArrayVertexBindingDivisorEXT(a0,a1,a2,);
}
__gshared glbfn_glVertexArrayVertexAttribLOffsetEXT glVertexArrayVertexAttribLOffsetEXT = function void (uint a0, uint a1, uint a2, int a3, uint a4, int a5, int a6) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribLOffsetEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glVertexArrayVertexAttribLOffsetEXT_loader (uint a0, uint a1, uint a2, int a3, uint a4, int a5, int a6) nothrow @nogc {
  glVertexArrayVertexAttribLOffsetEXT = cast(glbfn_glVertexArrayVertexAttribLOffsetEXT)glbindGetProcAddress(`glVertexArrayVertexAttribLOffsetEXT`);
  if (glVertexArrayVertexAttribLOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLOffsetEXT' not found!`);
  glVertexArrayVertexAttribLOffsetEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTexturePageCommitmentEXT glTexturePageCommitmentEXT = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, ubyte a8) nothrow @nogc {
  glbfn_glTexturePageCommitmentEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTexturePageCommitmentEXT_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, ubyte a8) nothrow @nogc {
  glTexturePageCommitmentEXT = cast(glbfn_glTexturePageCommitmentEXT)glbindGetProcAddress(`glTexturePageCommitmentEXT`);
  if (glTexturePageCommitmentEXT is null) assert(0, `OpenGL function 'glTexturePageCommitmentEXT' not found!`);
  glTexturePageCommitmentEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glVertexArrayVertexAttribDivisorEXT glVertexArrayVertexAttribDivisorEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glVertexArrayVertexAttribDivisorEXT_loader(a0,a1,a2,);
};
private auto glbfn_glVertexArrayVertexAttribDivisorEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glVertexArrayVertexAttribDivisorEXT = cast(glbfn_glVertexArrayVertexAttribDivisorEXT)glbindGetProcAddress(`glVertexArrayVertexAttribDivisorEXT`);
  if (glVertexArrayVertexAttribDivisorEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribDivisorEXT' not found!`);
  glVertexArrayVertexAttribDivisorEXT(a0,a1,a2,);
}
__gshared glbfn_glColorMaskIndexedEXT glColorMaskIndexedEXT = function void (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glbfn_glColorMaskIndexedEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glColorMaskIndexedEXT_loader (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glColorMaskIndexedEXT = cast(glbfn_glColorMaskIndexedEXT)glbindGetProcAddress(`glColorMaskIndexedEXT`);
  if (glColorMaskIndexedEXT is null) assert(0, `OpenGL function 'glColorMaskIndexedEXT' not found!`);
  glColorMaskIndexedEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawArraysInstancedEXT glDrawArraysInstancedEXT = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glDrawArraysInstancedEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawArraysInstancedEXT_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glDrawArraysInstancedEXT = cast(glbfn_glDrawArraysInstancedEXT)glbindGetProcAddress(`glDrawArraysInstancedEXT`);
  if (glDrawArraysInstancedEXT is null) assert(0, `OpenGL function 'glDrawArraysInstancedEXT' not found!`);
  glDrawArraysInstancedEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glDrawElementsInstancedEXT glDrawElementsInstancedEXT = function void (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glbfn_glDrawElementsInstancedEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawElementsInstancedEXT_loader (uint a0, int a1, uint a2, const(void)* a3, int a4) nothrow @nogc {
  glDrawElementsInstancedEXT = cast(glbfn_glDrawElementsInstancedEXT)glbindGetProcAddress(`glDrawElementsInstancedEXT`);
  if (glDrawElementsInstancedEXT is null) assert(0, `OpenGL function 'glDrawElementsInstancedEXT' not found!`);
  glDrawElementsInstancedEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawRangeElementsEXT glDrawRangeElementsEXT = function void (uint a0, uint a1, uint a2, int a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glDrawRangeElementsEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDrawRangeElementsEXT_loader (uint a0, uint a1, uint a2, int a3, uint a4, const(void)* a5) nothrow @nogc {
  glDrawRangeElementsEXT = cast(glbfn_glDrawRangeElementsEXT)glbindGetProcAddress(`glDrawRangeElementsEXT`);
  if (glDrawRangeElementsEXT is null) assert(0, `OpenGL function 'glDrawRangeElementsEXT' not found!`);
  glDrawRangeElementsEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glFogCoordfEXT glFogCoordfEXT = function void (float a0) nothrow @nogc {
  glbfn_glFogCoordfEXT_loader(a0,);
};
private auto glbfn_glFogCoordfEXT_loader (float a0) nothrow @nogc {
  glFogCoordfEXT = cast(glbfn_glFogCoordfEXT)glbindGetProcAddress(`glFogCoordfEXT`);
  if (glFogCoordfEXT is null) assert(0, `OpenGL function 'glFogCoordfEXT' not found!`);
  glFogCoordfEXT(a0,);
}
__gshared glbfn_glFogCoordfvEXT glFogCoordfvEXT = function void (const(float)* a0) nothrow @nogc {
  glbfn_glFogCoordfvEXT_loader(a0,);
};
private auto glbfn_glFogCoordfvEXT_loader (const(float)* a0) nothrow @nogc {
  glFogCoordfvEXT = cast(glbfn_glFogCoordfvEXT)glbindGetProcAddress(`glFogCoordfvEXT`);
  if (glFogCoordfvEXT is null) assert(0, `OpenGL function 'glFogCoordfvEXT' not found!`);
  glFogCoordfvEXT(a0,);
}
__gshared glbfn_glFogCoorddEXT glFogCoorddEXT = function void (double a0) nothrow @nogc {
  glbfn_glFogCoorddEXT_loader(a0,);
};
private auto glbfn_glFogCoorddEXT_loader (double a0) nothrow @nogc {
  glFogCoorddEXT = cast(glbfn_glFogCoorddEXT)glbindGetProcAddress(`glFogCoorddEXT`);
  if (glFogCoorddEXT is null) assert(0, `OpenGL function 'glFogCoorddEXT' not found!`);
  glFogCoorddEXT(a0,);
}
__gshared glbfn_glFogCoorddvEXT glFogCoorddvEXT = function void (const(double)* a0) nothrow @nogc {
  glbfn_glFogCoorddvEXT_loader(a0,);
};
private auto glbfn_glFogCoorddvEXT_loader (const(double)* a0) nothrow @nogc {
  glFogCoorddvEXT = cast(glbfn_glFogCoorddvEXT)glbindGetProcAddress(`glFogCoorddvEXT`);
  if (glFogCoorddvEXT is null) assert(0, `OpenGL function 'glFogCoorddvEXT' not found!`);
  glFogCoorddvEXT(a0,);
}
__gshared glbfn_glFogCoordPointerEXT glFogCoordPointerEXT = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glFogCoordPointerEXT_loader(a0,a1,a2,);
};
private auto glbfn_glFogCoordPointerEXT_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glFogCoordPointerEXT = cast(glbfn_glFogCoordPointerEXT)glbindGetProcAddress(`glFogCoordPointerEXT`);
  if (glFogCoordPointerEXT is null) assert(0, `OpenGL function 'glFogCoordPointerEXT' not found!`);
  glFogCoordPointerEXT(a0,a1,a2,);
}
__gshared glbfn_glBlitFramebufferEXT glBlitFramebufferEXT = function void (int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9) nothrow @nogc {
  glbfn_glBlitFramebufferEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glBlitFramebufferEXT_loader (int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9) nothrow @nogc {
  glBlitFramebufferEXT = cast(glbfn_glBlitFramebufferEXT)glbindGetProcAddress(`glBlitFramebufferEXT`);
  if (glBlitFramebufferEXT is null) assert(0, `OpenGL function 'glBlitFramebufferEXT' not found!`);
  glBlitFramebufferEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glRenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT = function void (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glRenderbufferStorageMultisampleEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glRenderbufferStorageMultisampleEXT_loader (uint a0, int a1, uint a2, int a3, int a4) nothrow @nogc {
  glRenderbufferStorageMultisampleEXT = cast(glbfn_glRenderbufferStorageMultisampleEXT)glbindGetProcAddress(`glRenderbufferStorageMultisampleEXT`);
  if (glRenderbufferStorageMultisampleEXT is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleEXT' not found!`);
  glRenderbufferStorageMultisampleEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glIsRenderbufferEXT glIsRenderbufferEXT = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsRenderbufferEXT_loader(a0,);
};
private auto glbfn_glIsRenderbufferEXT_loader (uint a0) nothrow @nogc {
  glIsRenderbufferEXT = cast(glbfn_glIsRenderbufferEXT)glbindGetProcAddress(`glIsRenderbufferEXT`);
  if (glIsRenderbufferEXT is null) assert(0, `OpenGL function 'glIsRenderbufferEXT' not found!`);
  return glIsRenderbufferEXT(a0,);
}
__gshared glbfn_glBindRenderbufferEXT glBindRenderbufferEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindRenderbufferEXT_loader(a0,a1,);
};
private auto glbfn_glBindRenderbufferEXT_loader (uint a0, uint a1) nothrow @nogc {
  glBindRenderbufferEXT = cast(glbfn_glBindRenderbufferEXT)glbindGetProcAddress(`glBindRenderbufferEXT`);
  if (glBindRenderbufferEXT is null) assert(0, `OpenGL function 'glBindRenderbufferEXT' not found!`);
  glBindRenderbufferEXT(a0,a1,);
}
__gshared glbfn_glDeleteRenderbuffersEXT glDeleteRenderbuffersEXT = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteRenderbuffersEXT_loader(a0,a1,);
};
private auto glbfn_glDeleteRenderbuffersEXT_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteRenderbuffersEXT = cast(glbfn_glDeleteRenderbuffersEXT)glbindGetProcAddress(`glDeleteRenderbuffersEXT`);
  if (glDeleteRenderbuffersEXT is null) assert(0, `OpenGL function 'glDeleteRenderbuffersEXT' not found!`);
  glDeleteRenderbuffersEXT(a0,a1,);
}
__gshared glbfn_glGenRenderbuffersEXT glGenRenderbuffersEXT = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenRenderbuffersEXT_loader(a0,a1,);
};
private auto glbfn_glGenRenderbuffersEXT_loader (int a0, uint* a1) nothrow @nogc {
  glGenRenderbuffersEXT = cast(glbfn_glGenRenderbuffersEXT)glbindGetProcAddress(`glGenRenderbuffersEXT`);
  if (glGenRenderbuffersEXT is null) assert(0, `OpenGL function 'glGenRenderbuffersEXT' not found!`);
  glGenRenderbuffersEXT(a0,a1,);
}
__gshared glbfn_glRenderbufferStorageEXT glRenderbufferStorageEXT = function void (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glbfn_glRenderbufferStorageEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRenderbufferStorageEXT_loader (uint a0, uint a1, int a2, int a3) nothrow @nogc {
  glRenderbufferStorageEXT = cast(glbfn_glRenderbufferStorageEXT)glbindGetProcAddress(`glRenderbufferStorageEXT`);
  if (glRenderbufferStorageEXT is null) assert(0, `OpenGL function 'glRenderbufferStorageEXT' not found!`);
  glRenderbufferStorageEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetRenderbufferParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetRenderbufferParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetRenderbufferParameterivEXT = cast(glbfn_glGetRenderbufferParameterivEXT)glbindGetProcAddress(`glGetRenderbufferParameterivEXT`);
  if (glGetRenderbufferParameterivEXT is null) assert(0, `OpenGL function 'glGetRenderbufferParameterivEXT' not found!`);
  glGetRenderbufferParameterivEXT(a0,a1,a2,);
}
}
__gshared glbfn_glIsFramebufferEXT glIsFramebufferEXT = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsFramebufferEXT_loader(a0,);
};
private auto glbfn_glIsFramebufferEXT_loader (uint a0) nothrow @nogc {
  glIsFramebufferEXT = cast(glbfn_glIsFramebufferEXT)glbindGetProcAddress(`glIsFramebufferEXT`);
  if (glIsFramebufferEXT is null) assert(0, `OpenGL function 'glIsFramebufferEXT' not found!`);
  return glIsFramebufferEXT(a0,);
}
__gshared glbfn_glBindFramebufferEXT glBindFramebufferEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindFramebufferEXT_loader(a0,a1,);
};
private auto glbfn_glBindFramebufferEXT_loader (uint a0, uint a1) nothrow @nogc {
  glBindFramebufferEXT = cast(glbfn_glBindFramebufferEXT)glbindGetProcAddress(`glBindFramebufferEXT`);
  if (glBindFramebufferEXT is null) assert(0, `OpenGL function 'glBindFramebufferEXT' not found!`);
  glBindFramebufferEXT(a0,a1,);
}
__gshared glbfn_glDeleteFramebuffersEXT glDeleteFramebuffersEXT = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteFramebuffersEXT_loader(a0,a1,);
};
private auto glbfn_glDeleteFramebuffersEXT_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteFramebuffersEXT = cast(glbfn_glDeleteFramebuffersEXT)glbindGetProcAddress(`glDeleteFramebuffersEXT`);
  if (glDeleteFramebuffersEXT is null) assert(0, `OpenGL function 'glDeleteFramebuffersEXT' not found!`);
  glDeleteFramebuffersEXT(a0,a1,);
}
static if (size_t.sizeof == 4) {
__gshared glbfn_glGenFramebuffersEXT glGenFramebuffersEXT = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenFramebuffersEXT_loader(a0,a1,);
};
private auto glbfn_glGenFramebuffersEXT_loader (int a0, uint* a1) nothrow @nogc {
  glGenFramebuffersEXT = cast(glbfn_glGenFramebuffersEXT)glbindGetProcAddress(`glGenFramebuffersEXT`);
  if (glGenFramebuffersEXT is null) assert(0, `OpenGL function 'glGenFramebuffersEXT' not found!`);
  glGenFramebuffersEXT(a0,a1,);
}
__gshared glbfn_glCheckFramebufferStatusEXT glCheckFramebufferStatusEXT = function uint (uint a0) nothrow @nogc {
  return glbfn_glCheckFramebufferStatusEXT_loader(a0,);
};
private auto glbfn_glCheckFramebufferStatusEXT_loader (uint a0) nothrow @nogc {
  glCheckFramebufferStatusEXT = cast(glbfn_glCheckFramebufferStatusEXT)glbindGetProcAddress(`glCheckFramebufferStatusEXT`);
  if (glCheckFramebufferStatusEXT is null) assert(0, `OpenGL function 'glCheckFramebufferStatusEXT' not found!`);
  return glCheckFramebufferStatusEXT(a0,);
}
__gshared glbfn_glFramebufferTexture1DEXT glFramebufferTexture1DEXT = function void (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glbfn_glFramebufferTexture1DEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTexture1DEXT_loader (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glFramebufferTexture1DEXT = cast(glbfn_glFramebufferTexture1DEXT)glbindGetProcAddress(`glFramebufferTexture1DEXT`);
  if (glFramebufferTexture1DEXT is null) assert(0, `OpenGL function 'glFramebufferTexture1DEXT' not found!`);
  glFramebufferTexture1DEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glFramebufferTexture2DEXT glFramebufferTexture2DEXT = function void (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glbfn_glFramebufferTexture2DEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTexture2DEXT_loader (uint a0, uint a1, uint a2, uint a3, int a4) nothrow @nogc {
  glFramebufferTexture2DEXT = cast(glbfn_glFramebufferTexture2DEXT)glbindGetProcAddress(`glFramebufferTexture2DEXT`);
  if (glFramebufferTexture2DEXT is null) assert(0, `OpenGL function 'glFramebufferTexture2DEXT' not found!`);
  glFramebufferTexture2DEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glFramebufferTexture3DEXT glFramebufferTexture3DEXT = function void (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glFramebufferTexture3DEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glFramebufferTexture3DEXT_loader (uint a0, uint a1, uint a2, uint a3, int a4, int a5) nothrow @nogc {
  glFramebufferTexture3DEXT = cast(glbfn_glFramebufferTexture3DEXT)glbindGetProcAddress(`glFramebufferTexture3DEXT`);
  if (glFramebufferTexture3DEXT is null) assert(0, `OpenGL function 'glFramebufferTexture3DEXT' not found!`);
  glFramebufferTexture3DEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glFramebufferRenderbufferEXT glFramebufferRenderbufferEXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glFramebufferRenderbufferEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFramebufferRenderbufferEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glFramebufferRenderbufferEXT = cast(glbfn_glFramebufferRenderbufferEXT)glbindGetProcAddress(`glFramebufferRenderbufferEXT`);
  if (glFramebufferRenderbufferEXT is null) assert(0, `OpenGL function 'glFramebufferRenderbufferEXT' not found!`);
  glFramebufferRenderbufferEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetFramebufferAttachmentParameterivEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetFramebufferAttachmentParameterivEXT_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetFramebufferAttachmentParameterivEXT = cast(glbfn_glGetFramebufferAttachmentParameterivEXT)glbindGetProcAddress(`glGetFramebufferAttachmentParameterivEXT`);
  if (glGetFramebufferAttachmentParameterivEXT is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameterivEXT' not found!`);
  glGetFramebufferAttachmentParameterivEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGenerateMipmapEXT glGenerateMipmapEXT = function void (uint a0) nothrow @nogc {
  glbfn_glGenerateMipmapEXT_loader(a0,);
};
private auto glbfn_glGenerateMipmapEXT_loader (uint a0) nothrow @nogc {
  glGenerateMipmapEXT = cast(glbfn_glGenerateMipmapEXT)glbindGetProcAddress(`glGenerateMipmapEXT`);
  if (glGenerateMipmapEXT is null) assert(0, `OpenGL function 'glGenerateMipmapEXT' not found!`);
  glGenerateMipmapEXT(a0,);
}
__gshared glbfn_glProgramParameteriEXT glProgramParameteriEXT = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glProgramParameteriEXT_loader(a0,a1,a2,);
};
private auto glbfn_glProgramParameteriEXT_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glProgramParameteriEXT = cast(glbfn_glProgramParameteriEXT)glbindGetProcAddress(`glProgramParameteriEXT`);
  if (glProgramParameteriEXT is null) assert(0, `OpenGL function 'glProgramParameteriEXT' not found!`);
  glProgramParameteriEXT(a0,a1,a2,);
}
__gshared glbfn_glProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramEnvParameters4fvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramEnvParameters4fvEXT_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramEnvParameters4fvEXT = cast(glbfn_glProgramEnvParameters4fvEXT)glbindGetProcAddress(`glProgramEnvParameters4fvEXT`);
  if (glProgramEnvParameters4fvEXT is null) assert(0, `OpenGL function 'glProgramEnvParameters4fvEXT' not found!`);
  glProgramEnvParameters4fvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramLocalParameters4fvEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramLocalParameters4fvEXT_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramLocalParameters4fvEXT = cast(glbfn_glProgramLocalParameters4fvEXT)glbindGetProcAddress(`glProgramLocalParameters4fvEXT`);
  if (glProgramLocalParameters4fvEXT is null) assert(0, `OpenGL function 'glProgramLocalParameters4fvEXT' not found!`);
  glProgramLocalParameters4fvEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetUniformuivEXT glGetUniformuivEXT = function void (uint a0, int a1, uint* a2) nothrow @nogc {
  glbfn_glGetUniformuivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetUniformuivEXT_loader (uint a0, int a1, uint* a2) nothrow @nogc {
  glGetUniformuivEXT = cast(glbfn_glGetUniformuivEXT)glbindGetProcAddress(`glGetUniformuivEXT`);
  if (glGetUniformuivEXT is null) assert(0, `OpenGL function 'glGetUniformuivEXT' not found!`);
  glGetUniformuivEXT(a0,a1,a2,);
}
__gshared glbfn_glBindFragDataLocationEXT glBindFragDataLocationEXT = function void (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glbfn_glBindFragDataLocationEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBindFragDataLocationEXT_loader (uint a0, uint a1, const(char)* a2) nothrow @nogc {
  glBindFragDataLocationEXT = cast(glbfn_glBindFragDataLocationEXT)glbindGetProcAddress(`glBindFragDataLocationEXT`);
  if (glBindFragDataLocationEXT is null) assert(0, `OpenGL function 'glBindFragDataLocationEXT' not found!`);
  glBindFragDataLocationEXT(a0,a1,a2,);
}
__gshared glbfn_glGetFragDataLocationEXT glGetFragDataLocationEXT = function int (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glGetFragDataLocationEXT_loader(a0,a1,);
};
private auto glbfn_glGetFragDataLocationEXT_loader (uint a0, const(char)* a1) nothrow @nogc {
  glGetFragDataLocationEXT = cast(glbfn_glGetFragDataLocationEXT)glbindGetProcAddress(`glGetFragDataLocationEXT`);
  if (glGetFragDataLocationEXT is null) assert(0, `OpenGL function 'glGetFragDataLocationEXT' not found!`);
  return glGetFragDataLocationEXT(a0,a1,);
}
__gshared glbfn_glUniform1uiEXT glUniform1uiEXT = function void (int a0, uint a1) nothrow @nogc {
  glbfn_glUniform1uiEXT_loader(a0,a1,);
};
private auto glbfn_glUniform1uiEXT_loader (int a0, uint a1) nothrow @nogc {
  glUniform1uiEXT = cast(glbfn_glUniform1uiEXT)glbindGetProcAddress(`glUniform1uiEXT`);
  if (glUniform1uiEXT is null) assert(0, `OpenGL function 'glUniform1uiEXT' not found!`);
  glUniform1uiEXT(a0,a1,);
}
__gshared glbfn_glUniform2uiEXT glUniform2uiEXT = function void (int a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glUniform2uiEXT_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2uiEXT_loader (int a0, uint a1, uint a2) nothrow @nogc {
  glUniform2uiEXT = cast(glbfn_glUniform2uiEXT)glbindGetProcAddress(`glUniform2uiEXT`);
  if (glUniform2uiEXT is null) assert(0, `OpenGL function 'glUniform2uiEXT' not found!`);
  glUniform2uiEXT(a0,a1,a2,);
}
__gshared glbfn_glUniform3uiEXT glUniform3uiEXT = function void (int a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glUniform3uiEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glUniform3uiEXT_loader (int a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glUniform3uiEXT = cast(glbfn_glUniform3uiEXT)glbindGetProcAddress(`glUniform3uiEXT`);
  if (glUniform3uiEXT is null) assert(0, `OpenGL function 'glUniform3uiEXT' not found!`);
  glUniform3uiEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glUniform4uiEXT glUniform4uiEXT = function void (int a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glUniform4uiEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glUniform4uiEXT_loader (int a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glUniform4uiEXT = cast(glbfn_glUniform4uiEXT)glbindGetProcAddress(`glUniform4uiEXT`);
  if (glUniform4uiEXT is null) assert(0, `OpenGL function 'glUniform4uiEXT' not found!`);
  glUniform4uiEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glUniform1uivEXT glUniform1uivEXT = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform1uivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glUniform1uivEXT_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform1uivEXT = cast(glbfn_glUniform1uivEXT)glbindGetProcAddress(`glUniform1uivEXT`);
  if (glUniform1uivEXT is null) assert(0, `OpenGL function 'glUniform1uivEXT' not found!`);
  glUniform1uivEXT(a0,a1,a2,);
}
__gshared glbfn_glUniform2uivEXT glUniform2uivEXT = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform2uivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glUniform2uivEXT_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform2uivEXT = cast(glbfn_glUniform2uivEXT)glbindGetProcAddress(`glUniform2uivEXT`);
  if (glUniform2uivEXT is null) assert(0, `OpenGL function 'glUniform2uivEXT' not found!`);
  glUniform2uivEXT(a0,a1,a2,);
}
__gshared glbfn_glUniform3uivEXT glUniform3uivEXT = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform3uivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glUniform3uivEXT_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform3uivEXT = cast(glbfn_glUniform3uivEXT)glbindGetProcAddress(`glUniform3uivEXT`);
  if (glUniform3uivEXT is null) assert(0, `OpenGL function 'glUniform3uivEXT' not found!`);
  glUniform3uivEXT(a0,a1,a2,);
}
__gshared glbfn_glUniform4uivEXT glUniform4uivEXT = function void (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glUniform4uivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glUniform4uivEXT_loader (int a0, int a1, const(uint)* a2) nothrow @nogc {
  glUniform4uivEXT = cast(glbfn_glUniform4uivEXT)glbindGetProcAddress(`glUniform4uivEXT`);
  if (glUniform4uivEXT is null) assert(0, `OpenGL function 'glUniform4uivEXT' not found!`);
  glUniform4uivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetHistogramEXT glGetHistogramEXT = function void (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glbfn_glGetHistogramEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetHistogramEXT_loader (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glGetHistogramEXT = cast(glbfn_glGetHistogramEXT)glbindGetProcAddress(`glGetHistogramEXT`);
  if (glGetHistogramEXT is null) assert(0, `OpenGL function 'glGetHistogramEXT' not found!`);
  glGetHistogramEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetHistogramParameterfvEXT glGetHistogramParameterfvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetHistogramParameterfvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetHistogramParameterfvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetHistogramParameterfvEXT = cast(glbfn_glGetHistogramParameterfvEXT)glbindGetProcAddress(`glGetHistogramParameterfvEXT`);
  if (glGetHistogramParameterfvEXT is null) assert(0, `OpenGL function 'glGetHistogramParameterfvEXT' not found!`);
  glGetHistogramParameterfvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetHistogramParameterivEXT glGetHistogramParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetHistogramParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetHistogramParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetHistogramParameterivEXT = cast(glbfn_glGetHistogramParameterivEXT)glbindGetProcAddress(`glGetHistogramParameterivEXT`);
  if (glGetHistogramParameterivEXT is null) assert(0, `OpenGL function 'glGetHistogramParameterivEXT' not found!`);
  glGetHistogramParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetMinmaxEXT glGetMinmaxEXT = function void (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glbfn_glGetMinmaxEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetMinmaxEXT_loader (uint a0, ubyte a1, uint a2, uint a3, void* a4) nothrow @nogc {
  glGetMinmaxEXT = cast(glbfn_glGetMinmaxEXT)glbindGetProcAddress(`glGetMinmaxEXT`);
  if (glGetMinmaxEXT is null) assert(0, `OpenGL function 'glGetMinmaxEXT' not found!`);
  glGetMinmaxEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetMinmaxParameterfvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetMinmaxParameterfvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetMinmaxParameterfvEXT = cast(glbfn_glGetMinmaxParameterfvEXT)glbindGetProcAddress(`glGetMinmaxParameterfvEXT`);
  if (glGetMinmaxParameterfvEXT is null) assert(0, `OpenGL function 'glGetMinmaxParameterfvEXT' not found!`);
  glGetMinmaxParameterfvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetMinmaxParameterivEXT glGetMinmaxParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetMinmaxParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetMinmaxParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetMinmaxParameterivEXT = cast(glbfn_glGetMinmaxParameterivEXT)glbindGetProcAddress(`glGetMinmaxParameterivEXT`);
  if (glGetMinmaxParameterivEXT is null) assert(0, `OpenGL function 'glGetMinmaxParameterivEXT' not found!`);
  glGetMinmaxParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glHistogramEXT glHistogramEXT = function void (uint a0, int a1, uint a2, ubyte a3) nothrow @nogc {
  glbfn_glHistogramEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glHistogramEXT_loader (uint a0, int a1, uint a2, ubyte a3) nothrow @nogc {
  glHistogramEXT = cast(glbfn_glHistogramEXT)glbindGetProcAddress(`glHistogramEXT`);
  if (glHistogramEXT is null) assert(0, `OpenGL function 'glHistogramEXT' not found!`);
  glHistogramEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMinmaxEXT glMinmaxEXT = function void (uint a0, uint a1, ubyte a2) nothrow @nogc {
  glbfn_glMinmaxEXT_loader(a0,a1,a2,);
};
private auto glbfn_glMinmaxEXT_loader (uint a0, uint a1, ubyte a2) nothrow @nogc {
  glMinmaxEXT = cast(glbfn_glMinmaxEXT)glbindGetProcAddress(`glMinmaxEXT`);
  if (glMinmaxEXT is null) assert(0, `OpenGL function 'glMinmaxEXT' not found!`);
  glMinmaxEXT(a0,a1,a2,);
}
__gshared glbfn_glResetHistogramEXT glResetHistogramEXT = function void (uint a0) nothrow @nogc {
  glbfn_glResetHistogramEXT_loader(a0,);
};
private auto glbfn_glResetHistogramEXT_loader (uint a0) nothrow @nogc {
  glResetHistogramEXT = cast(glbfn_glResetHistogramEXT)glbindGetProcAddress(`glResetHistogramEXT`);
  if (glResetHistogramEXT is null) assert(0, `OpenGL function 'glResetHistogramEXT' not found!`);
  glResetHistogramEXT(a0,);
}
__gshared glbfn_glResetMinmaxEXT glResetMinmaxEXT = function void (uint a0) nothrow @nogc {
  glbfn_glResetMinmaxEXT_loader(a0,);
};
private auto glbfn_glResetMinmaxEXT_loader (uint a0) nothrow @nogc {
  glResetMinmaxEXT = cast(glbfn_glResetMinmaxEXT)glbindGetProcAddress(`glResetMinmaxEXT`);
  if (glResetMinmaxEXT is null) assert(0, `OpenGL function 'glResetMinmaxEXT' not found!`);
  glResetMinmaxEXT(a0,);
}
__gshared glbfn_glIndexFuncEXT glIndexFuncEXT = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glIndexFuncEXT_loader(a0,a1,);
};
private auto glbfn_glIndexFuncEXT_loader (uint a0, float a1) nothrow @nogc {
  glIndexFuncEXT = cast(glbfn_glIndexFuncEXT)glbindGetProcAddress(`glIndexFuncEXT`);
  if (glIndexFuncEXT is null) assert(0, `OpenGL function 'glIndexFuncEXT' not found!`);
  glIndexFuncEXT(a0,a1,);
}
__gshared glbfn_glIndexMaterialEXT glIndexMaterialEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glIndexMaterialEXT_loader(a0,a1,);
};
private auto glbfn_glIndexMaterialEXT_loader (uint a0, uint a1) nothrow @nogc {
  glIndexMaterialEXT = cast(glbfn_glIndexMaterialEXT)glbindGetProcAddress(`glIndexMaterialEXT`);
  if (glIndexMaterialEXT is null) assert(0, `OpenGL function 'glIndexMaterialEXT' not found!`);
  glIndexMaterialEXT(a0,a1,);
}
__gshared glbfn_glApplyTextureEXT glApplyTextureEXT = function void (uint a0) nothrow @nogc {
  glbfn_glApplyTextureEXT_loader(a0,);
};
private auto glbfn_glApplyTextureEXT_loader (uint a0) nothrow @nogc {
  glApplyTextureEXT = cast(glbfn_glApplyTextureEXT)glbindGetProcAddress(`glApplyTextureEXT`);
  if (glApplyTextureEXT is null) assert(0, `OpenGL function 'glApplyTextureEXT' not found!`);
  glApplyTextureEXT(a0,);
}
__gshared glbfn_glTextureLightEXT glTextureLightEXT = function void (uint a0) nothrow @nogc {
  glbfn_glTextureLightEXT_loader(a0,);
};
private auto glbfn_glTextureLightEXT_loader (uint a0) nothrow @nogc {
  glTextureLightEXT = cast(glbfn_glTextureLightEXT)glbindGetProcAddress(`glTextureLightEXT`);
  if (glTextureLightEXT is null) assert(0, `OpenGL function 'glTextureLightEXT' not found!`);
  glTextureLightEXT(a0,);
}
__gshared glbfn_glTextureMaterialEXT glTextureMaterialEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glTextureMaterialEXT_loader(a0,a1,);
};
private auto glbfn_glTextureMaterialEXT_loader (uint a0, uint a1) nothrow @nogc {
  glTextureMaterialEXT = cast(glbfn_glTextureMaterialEXT)glbindGetProcAddress(`glTextureMaterialEXT`);
  if (glTextureMaterialEXT is null) assert(0, `OpenGL function 'glTextureMaterialEXT' not found!`);
  glTextureMaterialEXT(a0,a1,);
}
__gshared glbfn_glMultiDrawArraysEXT glMultiDrawArraysEXT = function void (uint a0, const(int)* a1, const(int)* a2, int a3) nothrow @nogc {
  glbfn_glMultiDrawArraysEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiDrawArraysEXT_loader (uint a0, const(int)* a1, const(int)* a2, int a3) nothrow @nogc {
  glMultiDrawArraysEXT = cast(glbfn_glMultiDrawArraysEXT)glbindGetProcAddress(`glMultiDrawArraysEXT`);
  if (glMultiDrawArraysEXT is null) assert(0, `OpenGL function 'glMultiDrawArraysEXT' not found!`);
  glMultiDrawArraysEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiDrawElementsEXT glMultiDrawElementsEXT = function void (uint a0, const(int)* a1, uint a2, const(void*)* a3, int a4) nothrow @nogc {
  glbfn_glMultiDrawElementsEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiDrawElementsEXT_loader (uint a0, const(int)* a1, uint a2, const(void*)* a3, int a4) nothrow @nogc {
  glMultiDrawElementsEXT = cast(glbfn_glMultiDrawElementsEXT)glbindGetProcAddress(`glMultiDrawElementsEXT`);
  if (glMultiDrawElementsEXT is null) assert(0, `OpenGL function 'glMultiDrawElementsEXT' not found!`);
  glMultiDrawElementsEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glSampleMaskEXT glSampleMaskEXT = function void (float a0, ubyte a1) nothrow @nogc {
  glbfn_glSampleMaskEXT_loader(a0,a1,);
};
private auto glbfn_glSampleMaskEXT_loader (float a0, ubyte a1) nothrow @nogc {
  glSampleMaskEXT = cast(glbfn_glSampleMaskEXT)glbindGetProcAddress(`glSampleMaskEXT`);
  if (glSampleMaskEXT is null) assert(0, `OpenGL function 'glSampleMaskEXT' not found!`);
  glSampleMaskEXT(a0,a1,);
}
__gshared glbfn_glSamplePatternEXT glSamplePatternEXT = function void (uint a0) nothrow @nogc {
  glbfn_glSamplePatternEXT_loader(a0,);
};
private auto glbfn_glSamplePatternEXT_loader (uint a0) nothrow @nogc {
  glSamplePatternEXT = cast(glbfn_glSamplePatternEXT)glbindGetProcAddress(`glSamplePatternEXT`);
  if (glSamplePatternEXT is null) assert(0, `OpenGL function 'glSamplePatternEXT' not found!`);
  glSamplePatternEXT(a0,);
}
__gshared glbfn_glColorTableEXT glColorTableEXT = function void (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glColorTableEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glColorTableEXT_loader (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glColorTableEXT = cast(glbfn_glColorTableEXT)glbindGetProcAddress(`glColorTableEXT`);
  if (glColorTableEXT is null) assert(0, `OpenGL function 'glColorTableEXT' not found!`);
  glColorTableEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetColorTableEXT glGetColorTableEXT = function void (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glbfn_glGetColorTableEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetColorTableEXT_loader (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glGetColorTableEXT = cast(glbfn_glGetColorTableEXT)glbindGetProcAddress(`glGetColorTableEXT`);
  if (glGetColorTableEXT is null) assert(0, `OpenGL function 'glGetColorTableEXT' not found!`);
  glGetColorTableEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetColorTableParameterivEXT glGetColorTableParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetColorTableParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetColorTableParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetColorTableParameterivEXT = cast(glbfn_glGetColorTableParameterivEXT)glbindGetProcAddress(`glGetColorTableParameterivEXT`);
  if (glGetColorTableParameterivEXT is null) assert(0, `OpenGL function 'glGetColorTableParameterivEXT' not found!`);
  glGetColorTableParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetColorTableParameterfvEXT glGetColorTableParameterfvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetColorTableParameterfvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetColorTableParameterfvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetColorTableParameterfvEXT = cast(glbfn_glGetColorTableParameterfvEXT)glbindGetProcAddress(`glGetColorTableParameterfvEXT`);
  if (glGetColorTableParameterfvEXT is null) assert(0, `OpenGL function 'glGetColorTableParameterfvEXT' not found!`);
  glGetColorTableParameterfvEXT(a0,a1,a2,);
}
__gshared glbfn_glPixelTransformParameteriEXT glPixelTransformParameteriEXT = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glPixelTransformParameteriEXT_loader(a0,a1,a2,);
};
private auto glbfn_glPixelTransformParameteriEXT_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glPixelTransformParameteriEXT = cast(glbfn_glPixelTransformParameteriEXT)glbindGetProcAddress(`glPixelTransformParameteriEXT`);
  if (glPixelTransformParameteriEXT is null) assert(0, `OpenGL function 'glPixelTransformParameteriEXT' not found!`);
  glPixelTransformParameteriEXT(a0,a1,a2,);
}
__gshared glbfn_glPixelTransformParameterfEXT glPixelTransformParameterfEXT = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glPixelTransformParameterfEXT_loader(a0,a1,a2,);
};
private auto glbfn_glPixelTransformParameterfEXT_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glPixelTransformParameterfEXT = cast(glbfn_glPixelTransformParameterfEXT)glbindGetProcAddress(`glPixelTransformParameterfEXT`);
  if (glPixelTransformParameterfEXT is null) assert(0, `OpenGL function 'glPixelTransformParameterfEXT' not found!`);
  glPixelTransformParameterfEXT(a0,a1,a2,);
}
__gshared glbfn_glPixelTransformParameterivEXT glPixelTransformParameterivEXT = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glPixelTransformParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glPixelTransformParameterivEXT_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glPixelTransformParameterivEXT = cast(glbfn_glPixelTransformParameterivEXT)glbindGetProcAddress(`glPixelTransformParameterivEXT`);
  if (glPixelTransformParameterivEXT is null) assert(0, `OpenGL function 'glPixelTransformParameterivEXT' not found!`);
  glPixelTransformParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glPixelTransformParameterfvEXT glPixelTransformParameterfvEXT = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glPixelTransformParameterfvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glPixelTransformParameterfvEXT_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glPixelTransformParameterfvEXT = cast(glbfn_glPixelTransformParameterfvEXT)glbindGetProcAddress(`glPixelTransformParameterfvEXT`);
  if (glPixelTransformParameterfvEXT is null) assert(0, `OpenGL function 'glPixelTransformParameterfvEXT' not found!`);
  glPixelTransformParameterfvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetPixelTransformParameterivEXT glGetPixelTransformParameterivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetPixelTransformParameterivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetPixelTransformParameterivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetPixelTransformParameterivEXT = cast(glbfn_glGetPixelTransformParameterivEXT)glbindGetProcAddress(`glGetPixelTransformParameterivEXT`);
  if (glGetPixelTransformParameterivEXT is null) assert(0, `OpenGL function 'glGetPixelTransformParameterivEXT' not found!`);
  glGetPixelTransformParameterivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetPixelTransformParameterfvEXT glGetPixelTransformParameterfvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetPixelTransformParameterfvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetPixelTransformParameterfvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetPixelTransformParameterfvEXT = cast(glbfn_glGetPixelTransformParameterfvEXT)glbindGetProcAddress(`glGetPixelTransformParameterfvEXT`);
  if (glGetPixelTransformParameterfvEXT is null) assert(0, `OpenGL function 'glGetPixelTransformParameterfvEXT' not found!`);
  glGetPixelTransformParameterfvEXT(a0,a1,a2,);
}
__gshared glbfn_glPointParameterfEXT glPointParameterfEXT = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPointParameterfEXT_loader(a0,a1,);
};
private auto glbfn_glPointParameterfEXT_loader (uint a0, float a1) nothrow @nogc {
  glPointParameterfEXT = cast(glbfn_glPointParameterfEXT)glbindGetProcAddress(`glPointParameterfEXT`);
  if (glPointParameterfEXT is null) assert(0, `OpenGL function 'glPointParameterfEXT' not found!`);
  glPointParameterfEXT(a0,a1,);
}
__gshared glbfn_glPointParameterfvEXT glPointParameterfvEXT = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glPointParameterfvEXT_loader(a0,a1,);
};
private auto glbfn_glPointParameterfvEXT_loader (uint a0, const(float)* a1) nothrow @nogc {
  glPointParameterfvEXT = cast(glbfn_glPointParameterfvEXT)glbindGetProcAddress(`glPointParameterfvEXT`);
  if (glPointParameterfvEXT is null) assert(0, `OpenGL function 'glPointParameterfvEXT' not found!`);
  glPointParameterfvEXT(a0,a1,);
}
__gshared glbfn_glPolygonOffsetEXT glPolygonOffsetEXT = function void (float a0, float a1) nothrow @nogc {
  glbfn_glPolygonOffsetEXT_loader(a0,a1,);
};
private auto glbfn_glPolygonOffsetEXT_loader (float a0, float a1) nothrow @nogc {
  glPolygonOffsetEXT = cast(glbfn_glPolygonOffsetEXT)glbindGetProcAddress(`glPolygonOffsetEXT`);
  if (glPolygonOffsetEXT is null) assert(0, `OpenGL function 'glPolygonOffsetEXT' not found!`);
  glPolygonOffsetEXT(a0,a1,);
}
__gshared glbfn_glPolygonOffsetClampEXT glPolygonOffsetClampEXT = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glPolygonOffsetClampEXT_loader(a0,a1,a2,);
};
private auto glbfn_glPolygonOffsetClampEXT_loader (float a0, float a1, float a2) nothrow @nogc {
  glPolygonOffsetClampEXT = cast(glbfn_glPolygonOffsetClampEXT)glbindGetProcAddress(`glPolygonOffsetClampEXT`);
  if (glPolygonOffsetClampEXT is null) assert(0, `OpenGL function 'glPolygonOffsetClampEXT' not found!`);
  glPolygonOffsetClampEXT(a0,a1,a2,);
}
__gshared glbfn_glProvokingVertexEXT glProvokingVertexEXT = function void (uint a0) nothrow @nogc {
  glbfn_glProvokingVertexEXT_loader(a0,);
};
private auto glbfn_glProvokingVertexEXT_loader (uint a0) nothrow @nogc {
  glProvokingVertexEXT = cast(glbfn_glProvokingVertexEXT)glbindGetProcAddress(`glProvokingVertexEXT`);
  if (glProvokingVertexEXT is null) assert(0, `OpenGL function 'glProvokingVertexEXT' not found!`);
  glProvokingVertexEXT(a0,);
}
__gshared glbfn_glRasterSamplesEXT glRasterSamplesEXT = function void (uint a0, ubyte a1) nothrow @nogc {
  glbfn_glRasterSamplesEXT_loader(a0,a1,);
};
private auto glbfn_glRasterSamplesEXT_loader (uint a0, ubyte a1) nothrow @nogc {
  glRasterSamplesEXT = cast(glbfn_glRasterSamplesEXT)glbindGetProcAddress(`glRasterSamplesEXT`);
  if (glRasterSamplesEXT is null) assert(0, `OpenGL function 'glRasterSamplesEXT' not found!`);
  glRasterSamplesEXT(a0,a1,);
}
__gshared glbfn_glSecondaryColor3bEXT glSecondaryColor3bEXT = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glSecondaryColor3bEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3bEXT_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glSecondaryColor3bEXT = cast(glbfn_glSecondaryColor3bEXT)glbindGetProcAddress(`glSecondaryColor3bEXT`);
  if (glSecondaryColor3bEXT is null) assert(0, `OpenGL function 'glSecondaryColor3bEXT' not found!`);
  glSecondaryColor3bEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3bvEXT glSecondaryColor3bvEXT = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3bvEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3bvEXT_loader (const(byte)* a0) nothrow @nogc {
  glSecondaryColor3bvEXT = cast(glbfn_glSecondaryColor3bvEXT)glbindGetProcAddress(`glSecondaryColor3bvEXT`);
  if (glSecondaryColor3bvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3bvEXT' not found!`);
  glSecondaryColor3bvEXT(a0,);
}
__gshared glbfn_glSecondaryColor3dEXT glSecondaryColor3dEXT = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glSecondaryColor3dEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3dEXT_loader (double a0, double a1, double a2) nothrow @nogc {
  glSecondaryColor3dEXT = cast(glbfn_glSecondaryColor3dEXT)glbindGetProcAddress(`glSecondaryColor3dEXT`);
  if (glSecondaryColor3dEXT is null) assert(0, `OpenGL function 'glSecondaryColor3dEXT' not found!`);
  glSecondaryColor3dEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3dvEXT glSecondaryColor3dvEXT = function void (const(double)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3dvEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3dvEXT_loader (const(double)* a0) nothrow @nogc {
  glSecondaryColor3dvEXT = cast(glbfn_glSecondaryColor3dvEXT)glbindGetProcAddress(`glSecondaryColor3dvEXT`);
  if (glSecondaryColor3dvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3dvEXT' not found!`);
  glSecondaryColor3dvEXT(a0,);
}
__gshared glbfn_glSecondaryColor3fEXT glSecondaryColor3fEXT = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glSecondaryColor3fEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3fEXT_loader (float a0, float a1, float a2) nothrow @nogc {
  glSecondaryColor3fEXT = cast(glbfn_glSecondaryColor3fEXT)glbindGetProcAddress(`glSecondaryColor3fEXT`);
  if (glSecondaryColor3fEXT is null) assert(0, `OpenGL function 'glSecondaryColor3fEXT' not found!`);
  glSecondaryColor3fEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3fvEXT glSecondaryColor3fvEXT = function void (const(float)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3fvEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3fvEXT_loader (const(float)* a0) nothrow @nogc {
  glSecondaryColor3fvEXT = cast(glbfn_glSecondaryColor3fvEXT)glbindGetProcAddress(`glSecondaryColor3fvEXT`);
  if (glSecondaryColor3fvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3fvEXT' not found!`);
  glSecondaryColor3fvEXT(a0,);
}
__gshared glbfn_glSecondaryColor3iEXT glSecondaryColor3iEXT = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glSecondaryColor3iEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3iEXT_loader (int a0, int a1, int a2) nothrow @nogc {
  glSecondaryColor3iEXT = cast(glbfn_glSecondaryColor3iEXT)glbindGetProcAddress(`glSecondaryColor3iEXT`);
  if (glSecondaryColor3iEXT is null) assert(0, `OpenGL function 'glSecondaryColor3iEXT' not found!`);
  glSecondaryColor3iEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3ivEXT glSecondaryColor3ivEXT = function void (const(int)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3ivEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3ivEXT_loader (const(int)* a0) nothrow @nogc {
  glSecondaryColor3ivEXT = cast(glbfn_glSecondaryColor3ivEXT)glbindGetProcAddress(`glSecondaryColor3ivEXT`);
  if (glSecondaryColor3ivEXT is null) assert(0, `OpenGL function 'glSecondaryColor3ivEXT' not found!`);
  glSecondaryColor3ivEXT(a0,);
}
__gshared glbfn_glSecondaryColor3sEXT glSecondaryColor3sEXT = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glSecondaryColor3sEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3sEXT_loader (short a0, short a1, short a2) nothrow @nogc {
  glSecondaryColor3sEXT = cast(glbfn_glSecondaryColor3sEXT)glbindGetProcAddress(`glSecondaryColor3sEXT`);
  if (glSecondaryColor3sEXT is null) assert(0, `OpenGL function 'glSecondaryColor3sEXT' not found!`);
  glSecondaryColor3sEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3svEXT glSecondaryColor3svEXT = function void (const(short)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3svEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3svEXT_loader (const(short)* a0) nothrow @nogc {
  glSecondaryColor3svEXT = cast(glbfn_glSecondaryColor3svEXT)glbindGetProcAddress(`glSecondaryColor3svEXT`);
  if (glSecondaryColor3svEXT is null) assert(0, `OpenGL function 'glSecondaryColor3svEXT' not found!`);
  glSecondaryColor3svEXT(a0,);
}
__gshared glbfn_glSecondaryColor3ubEXT glSecondaryColor3ubEXT = function void (ubyte a0, ubyte a1, ubyte a2) nothrow @nogc {
  glbfn_glSecondaryColor3ubEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3ubEXT_loader (ubyte a0, ubyte a1, ubyte a2) nothrow @nogc {
  glSecondaryColor3ubEXT = cast(glbfn_glSecondaryColor3ubEXT)glbindGetProcAddress(`glSecondaryColor3ubEXT`);
  if (glSecondaryColor3ubEXT is null) assert(0, `OpenGL function 'glSecondaryColor3ubEXT' not found!`);
  glSecondaryColor3ubEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3ubvEXT glSecondaryColor3ubvEXT = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3ubvEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3ubvEXT_loader (const(ubyte)* a0) nothrow @nogc {
  glSecondaryColor3ubvEXT = cast(glbfn_glSecondaryColor3ubvEXT)glbindGetProcAddress(`glSecondaryColor3ubvEXT`);
  if (glSecondaryColor3ubvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3ubvEXT' not found!`);
  glSecondaryColor3ubvEXT(a0,);
}
__gshared glbfn_glSecondaryColor3uiEXT glSecondaryColor3uiEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glSecondaryColor3uiEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3uiEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glSecondaryColor3uiEXT = cast(glbfn_glSecondaryColor3uiEXT)glbindGetProcAddress(`glSecondaryColor3uiEXT`);
  if (glSecondaryColor3uiEXT is null) assert(0, `OpenGL function 'glSecondaryColor3uiEXT' not found!`);
  glSecondaryColor3uiEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3uivEXT glSecondaryColor3uivEXT = function void (const(uint)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3uivEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3uivEXT_loader (const(uint)* a0) nothrow @nogc {
  glSecondaryColor3uivEXT = cast(glbfn_glSecondaryColor3uivEXT)glbindGetProcAddress(`glSecondaryColor3uivEXT`);
  if (glSecondaryColor3uivEXT is null) assert(0, `OpenGL function 'glSecondaryColor3uivEXT' not found!`);
  glSecondaryColor3uivEXT(a0,);
}
__gshared glbfn_glSecondaryColor3usEXT glSecondaryColor3usEXT = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glSecondaryColor3usEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3usEXT_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glSecondaryColor3usEXT = cast(glbfn_glSecondaryColor3usEXT)glbindGetProcAddress(`glSecondaryColor3usEXT`);
  if (glSecondaryColor3usEXT is null) assert(0, `OpenGL function 'glSecondaryColor3usEXT' not found!`);
  glSecondaryColor3usEXT(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3usvEXT glSecondaryColor3usvEXT = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3usvEXT_loader(a0,);
};
private auto glbfn_glSecondaryColor3usvEXT_loader (const(ushort)* a0) nothrow @nogc {
  glSecondaryColor3usvEXT = cast(glbfn_glSecondaryColor3usvEXT)glbindGetProcAddress(`glSecondaryColor3usvEXT`);
  if (glSecondaryColor3usvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3usvEXT' not found!`);
  glSecondaryColor3usvEXT(a0,);
}
__gshared glbfn_glSecondaryColorPointerEXT glSecondaryColorPointerEXT = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glSecondaryColorPointerEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glSecondaryColorPointerEXT_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glSecondaryColorPointerEXT = cast(glbfn_glSecondaryColorPointerEXT)glbindGetProcAddress(`glSecondaryColorPointerEXT`);
  if (glSecondaryColorPointerEXT is null) assert(0, `OpenGL function 'glSecondaryColorPointerEXT' not found!`);
  glSecondaryColorPointerEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glUseShaderProgramEXT glUseShaderProgramEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glUseShaderProgramEXT_loader(a0,a1,);
};
private auto glbfn_glUseShaderProgramEXT_loader (uint a0, uint a1) nothrow @nogc {
  glUseShaderProgramEXT = cast(glbfn_glUseShaderProgramEXT)glbindGetProcAddress(`glUseShaderProgramEXT`);
  if (glUseShaderProgramEXT is null) assert(0, `OpenGL function 'glUseShaderProgramEXT' not found!`);
  glUseShaderProgramEXT(a0,a1,);
}
__gshared glbfn_glActiveProgramEXT glActiveProgramEXT = function void (uint a0) nothrow @nogc {
  glbfn_glActiveProgramEXT_loader(a0,);
};
private auto glbfn_glActiveProgramEXT_loader (uint a0) nothrow @nogc {
  glActiveProgramEXT = cast(glbfn_glActiveProgramEXT)glbindGetProcAddress(`glActiveProgramEXT`);
  if (glActiveProgramEXT is null) assert(0, `OpenGL function 'glActiveProgramEXT' not found!`);
  glActiveProgramEXT(a0,);
}
__gshared glbfn_glCreateShaderProgramEXT glCreateShaderProgramEXT = function uint (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glCreateShaderProgramEXT_loader(a0,a1,);
};
private auto glbfn_glCreateShaderProgramEXT_loader (uint a0, const(char)* a1) nothrow @nogc {
  glCreateShaderProgramEXT = cast(glbfn_glCreateShaderProgramEXT)glbindGetProcAddress(`glCreateShaderProgramEXT`);
  if (glCreateShaderProgramEXT is null) assert(0, `OpenGL function 'glCreateShaderProgramEXT' not found!`);
  return glCreateShaderProgramEXT(a0,a1,);
}
__gshared glbfn_glActiveShaderProgramEXT glActiveShaderProgramEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glActiveShaderProgramEXT_loader(a0,a1,);
};
private auto glbfn_glActiveShaderProgramEXT_loader (uint a0, uint a1) nothrow @nogc {
  glActiveShaderProgramEXT = cast(glbfn_glActiveShaderProgramEXT)glbindGetProcAddress(`glActiveShaderProgramEXT`);
  if (glActiveShaderProgramEXT is null) assert(0, `OpenGL function 'glActiveShaderProgramEXT' not found!`);
  glActiveShaderProgramEXT(a0,a1,);
}
__gshared glbfn_glBindProgramPipelineEXT glBindProgramPipelineEXT = function void (uint a0) nothrow @nogc {
  glbfn_glBindProgramPipelineEXT_loader(a0,);
};
private auto glbfn_glBindProgramPipelineEXT_loader (uint a0) nothrow @nogc {
  glBindProgramPipelineEXT = cast(glbfn_glBindProgramPipelineEXT)glbindGetProcAddress(`glBindProgramPipelineEXT`);
  if (glBindProgramPipelineEXT is null) assert(0, `OpenGL function 'glBindProgramPipelineEXT' not found!`);
  glBindProgramPipelineEXT(a0,);
}
__gshared glbfn_glCreateShaderProgramvEXT glCreateShaderProgramvEXT = function uint (uint a0, int a1, const(char*)* a2) nothrow @nogc {
  return glbfn_glCreateShaderProgramvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glCreateShaderProgramvEXT_loader (uint a0, int a1, const(char*)* a2) nothrow @nogc {
  glCreateShaderProgramvEXT = cast(glbfn_glCreateShaderProgramvEXT)glbindGetProcAddress(`glCreateShaderProgramvEXT`);
  if (glCreateShaderProgramvEXT is null) assert(0, `OpenGL function 'glCreateShaderProgramvEXT' not found!`);
  return glCreateShaderProgramvEXT(a0,a1,a2,);
}
__gshared glbfn_glDeleteProgramPipelinesEXT glDeleteProgramPipelinesEXT = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteProgramPipelinesEXT_loader(a0,a1,);
};
private auto glbfn_glDeleteProgramPipelinesEXT_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteProgramPipelinesEXT = cast(glbfn_glDeleteProgramPipelinesEXT)glbindGetProcAddress(`glDeleteProgramPipelinesEXT`);
  if (glDeleteProgramPipelinesEXT is null) assert(0, `OpenGL function 'glDeleteProgramPipelinesEXT' not found!`);
  glDeleteProgramPipelinesEXT(a0,a1,);
}
__gshared glbfn_glGenProgramPipelinesEXT glGenProgramPipelinesEXT = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenProgramPipelinesEXT_loader(a0,a1,);
};
private auto glbfn_glGenProgramPipelinesEXT_loader (int a0, uint* a1) nothrow @nogc {
  glGenProgramPipelinesEXT = cast(glbfn_glGenProgramPipelinesEXT)glbindGetProcAddress(`glGenProgramPipelinesEXT`);
  if (glGenProgramPipelinesEXT is null) assert(0, `OpenGL function 'glGenProgramPipelinesEXT' not found!`);
  glGenProgramPipelinesEXT(a0,a1,);
}
__gshared glbfn_glGetProgramPipelineInfoLogEXT glGetProgramPipelineInfoLogEXT = function void (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetProgramPipelineInfoLogEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramPipelineInfoLogEXT_loader (uint a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetProgramPipelineInfoLogEXT = cast(glbfn_glGetProgramPipelineInfoLogEXT)glbindGetProcAddress(`glGetProgramPipelineInfoLogEXT`);
  if (glGetProgramPipelineInfoLogEXT is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLogEXT' not found!`);
  glGetProgramPipelineInfoLogEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetProgramPipelineivEXT glGetProgramPipelineivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetProgramPipelineivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramPipelineivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetProgramPipelineivEXT = cast(glbfn_glGetProgramPipelineivEXT)glbindGetProcAddress(`glGetProgramPipelineivEXT`);
  if (glGetProgramPipelineivEXT is null) assert(0, `OpenGL function 'glGetProgramPipelineivEXT' not found!`);
  glGetProgramPipelineivEXT(a0,a1,a2,);
}
__gshared glbfn_glIsProgramPipelineEXT glIsProgramPipelineEXT = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsProgramPipelineEXT_loader(a0,);
};
private auto glbfn_glIsProgramPipelineEXT_loader (uint a0) nothrow @nogc {
  glIsProgramPipelineEXT = cast(glbfn_glIsProgramPipelineEXT)glbindGetProcAddress(`glIsProgramPipelineEXT`);
  if (glIsProgramPipelineEXT is null) assert(0, `OpenGL function 'glIsProgramPipelineEXT' not found!`);
  return glIsProgramPipelineEXT(a0,);
}
__gshared glbfn_glUseProgramStagesEXT glUseProgramStagesEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glUseProgramStagesEXT_loader(a0,a1,a2,);
};
private auto glbfn_glUseProgramStagesEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glUseProgramStagesEXT = cast(glbfn_glUseProgramStagesEXT)glbindGetProcAddress(`glUseProgramStagesEXT`);
  if (glUseProgramStagesEXT is null) assert(0, `OpenGL function 'glUseProgramStagesEXT' not found!`);
  glUseProgramStagesEXT(a0,a1,a2,);
}
__gshared glbfn_glValidateProgramPipelineEXT glValidateProgramPipelineEXT = function void (uint a0) nothrow @nogc {
  glbfn_glValidateProgramPipelineEXT_loader(a0,);
};
private auto glbfn_glValidateProgramPipelineEXT_loader (uint a0) nothrow @nogc {
  glValidateProgramPipelineEXT = cast(glbfn_glValidateProgramPipelineEXT)glbindGetProcAddress(`glValidateProgramPipelineEXT`);
  if (glValidateProgramPipelineEXT is null) assert(0, `OpenGL function 'glValidateProgramPipelineEXT' not found!`);
  glValidateProgramPipelineEXT(a0,);
}
__gshared glbfn_glBindImageTextureEXT glBindImageTextureEXT = function void (uint a0, uint a1, int a2, ubyte a3, int a4, uint a5, int a6) nothrow @nogc {
  glbfn_glBindImageTextureEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glBindImageTextureEXT_loader (uint a0, uint a1, int a2, ubyte a3, int a4, uint a5, int a6) nothrow @nogc {
  glBindImageTextureEXT = cast(glbfn_glBindImageTextureEXT)glbindGetProcAddress(`glBindImageTextureEXT`);
  if (glBindImageTextureEXT is null) assert(0, `OpenGL function 'glBindImageTextureEXT' not found!`);
  glBindImageTextureEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glMemoryBarrierEXT glMemoryBarrierEXT = function void (uint a0) nothrow @nogc {
  glbfn_glMemoryBarrierEXT_loader(a0,);
};
private auto glbfn_glMemoryBarrierEXT_loader (uint a0) nothrow @nogc {
  glMemoryBarrierEXT = cast(glbfn_glMemoryBarrierEXT)glbindGetProcAddress(`glMemoryBarrierEXT`);
  if (glMemoryBarrierEXT is null) assert(0, `OpenGL function 'glMemoryBarrierEXT' not found!`);
  glMemoryBarrierEXT(a0,);
}
__gshared glbfn_glStencilClearTagEXT glStencilClearTagEXT = function void (int a0, uint a1) nothrow @nogc {
  glbfn_glStencilClearTagEXT_loader(a0,a1,);
};
private auto glbfn_glStencilClearTagEXT_loader (int a0, uint a1) nothrow @nogc {
  glStencilClearTagEXT = cast(glbfn_glStencilClearTagEXT)glbindGetProcAddress(`glStencilClearTagEXT`);
  if (glStencilClearTagEXT is null) assert(0, `OpenGL function 'glStencilClearTagEXT' not found!`);
  glStencilClearTagEXT(a0,a1,);
}
__gshared glbfn_glActiveStencilFaceEXT glActiveStencilFaceEXT = function void (uint a0) nothrow @nogc {
  glbfn_glActiveStencilFaceEXT_loader(a0,);
};
private auto glbfn_glActiveStencilFaceEXT_loader (uint a0) nothrow @nogc {
  glActiveStencilFaceEXT = cast(glbfn_glActiveStencilFaceEXT)glbindGetProcAddress(`glActiveStencilFaceEXT`);
  if (glActiveStencilFaceEXT is null) assert(0, `OpenGL function 'glActiveStencilFaceEXT' not found!`);
  glActiveStencilFaceEXT(a0,);
}
__gshared glbfn_glTexSubImage1DEXT glTexSubImage1DEXT = function void (uint a0, int a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glbfn_glTexSubImage1DEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTexSubImage1DEXT_loader (uint a0, int a1, int a2, int a3, uint a4, uint a5, const(void)* a6) nothrow @nogc {
  glTexSubImage1DEXT = cast(glbfn_glTexSubImage1DEXT)glbindGetProcAddress(`glTexSubImage1DEXT`);
  if (glTexSubImage1DEXT is null) assert(0, `OpenGL function 'glTexSubImage1DEXT' not found!`);
  glTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTexSubImage2DEXT glTexSubImage2DEXT = function void (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glbfn_glTexSubImage2DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTexSubImage2DEXT_loader (uint a0, int a1, int a2, int a3, int a4, int a5, uint a6, uint a7, const(void)* a8) nothrow @nogc {
  glTexSubImage2DEXT = cast(glbfn_glTexSubImage2DEXT)glbindGetProcAddress(`glTexSubImage2DEXT`);
  if (glTexSubImage2DEXT is null) assert(0, `OpenGL function 'glTexSubImage2DEXT' not found!`);
  glTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glTexImage3DEXT glTexImage3DEXT = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glbfn_glTexImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glTexImage3DEXT_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, uint a7, uint a8, const(void)* a9) nothrow @nogc {
  glTexImage3DEXT = cast(glbfn_glTexImage3DEXT)glbindGetProcAddress(`glTexImage3DEXT`);
  if (glTexImage3DEXT is null) assert(0, `OpenGL function 'glTexImage3DEXT' not found!`);
  glTexImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glTexSubImage3DEXT glTexSubImage3DEXT = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glbfn_glTexSubImage3DEXT_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glTexSubImage3DEXT_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glTexSubImage3DEXT = cast(glbfn_glTexSubImage3DEXT)glbindGetProcAddress(`glTexSubImage3DEXT`);
  if (glTexSubImage3DEXT is null) assert(0, `OpenGL function 'glTexSubImage3DEXT' not found!`);
  glTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glFramebufferTextureLayerEXT glFramebufferTextureLayerEXT = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glFramebufferTextureLayerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTextureLayerEXT_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glFramebufferTextureLayerEXT = cast(glbfn_glFramebufferTextureLayerEXT)glbindGetProcAddress(`glFramebufferTextureLayerEXT`);
  if (glFramebufferTextureLayerEXT is null) assert(0, `OpenGL function 'glFramebufferTextureLayerEXT' not found!`);
  glFramebufferTextureLayerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTexBufferEXT glTexBufferEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glTexBufferEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTexBufferEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glTexBufferEXT = cast(glbfn_glTexBufferEXT)glbindGetProcAddress(`glTexBufferEXT`);
  if (glTexBufferEXT is null) assert(0, `OpenGL function 'glTexBufferEXT' not found!`);
  glTexBufferEXT(a0,a1,a2,);
}
__gshared glbfn_glTexParameterIivEXT glTexParameterIivEXT = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexParameterIivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterIivEXT_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexParameterIivEXT = cast(glbfn_glTexParameterIivEXT)glbindGetProcAddress(`glTexParameterIivEXT`);
  if (glTexParameterIivEXT is null) assert(0, `OpenGL function 'glTexParameterIivEXT' not found!`);
  glTexParameterIivEXT(a0,a1,a2,);
}
__gshared glbfn_glTexParameterIuivEXT glTexParameterIuivEXT = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glTexParameterIuivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterIuivEXT_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glTexParameterIuivEXT = cast(glbfn_glTexParameterIuivEXT)glbindGetProcAddress(`glTexParameterIuivEXT`);
  if (glTexParameterIuivEXT is null) assert(0, `OpenGL function 'glTexParameterIuivEXT' not found!`);
  glTexParameterIuivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetTexParameterIivEXT glGetTexParameterIivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexParameterIivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameterIivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexParameterIivEXT = cast(glbfn_glGetTexParameterIivEXT)glbindGetProcAddress(`glGetTexParameterIivEXT`);
  if (glGetTexParameterIivEXT is null) assert(0, `OpenGL function 'glGetTexParameterIivEXT' not found!`);
  glGetTexParameterIivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetTexParameterIuivEXT glGetTexParameterIuivEXT = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetTexParameterIuivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameterIuivEXT_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetTexParameterIuivEXT = cast(glbfn_glGetTexParameterIuivEXT)glbindGetProcAddress(`glGetTexParameterIuivEXT`);
  if (glGetTexParameterIuivEXT is null) assert(0, `OpenGL function 'glGetTexParameterIuivEXT' not found!`);
  glGetTexParameterIuivEXT(a0,a1,a2,);
}
__gshared glbfn_glClearColorIiEXT glClearColorIiEXT = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glClearColorIiEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearColorIiEXT_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glClearColorIiEXT = cast(glbfn_glClearColorIiEXT)glbindGetProcAddress(`glClearColorIiEXT`);
  if (glClearColorIiEXT is null) assert(0, `OpenGL function 'glClearColorIiEXT' not found!`);
  glClearColorIiEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glClearColorIuiEXT glClearColorIuiEXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glClearColorIuiEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearColorIuiEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glClearColorIuiEXT = cast(glbfn_glClearColorIuiEXT)glbindGetProcAddress(`glClearColorIuiEXT`);
  if (glClearColorIuiEXT is null) assert(0, `OpenGL function 'glClearColorIuiEXT' not found!`);
  glClearColorIuiEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glAreTexturesResidentEXT glAreTexturesResidentEXT = function ubyte (int a0, const(uint)* a1, ubyte* a2) nothrow @nogc {
  return glbfn_glAreTexturesResidentEXT_loader(a0,a1,a2,);
};
private auto glbfn_glAreTexturesResidentEXT_loader (int a0, const(uint)* a1, ubyte* a2) nothrow @nogc {
  glAreTexturesResidentEXT = cast(glbfn_glAreTexturesResidentEXT)glbindGetProcAddress(`glAreTexturesResidentEXT`);
  if (glAreTexturesResidentEXT is null) assert(0, `OpenGL function 'glAreTexturesResidentEXT' not found!`);
  return glAreTexturesResidentEXT(a0,a1,a2,);
}
__gshared glbfn_glBindTextureEXT glBindTextureEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindTextureEXT_loader(a0,a1,);
};
private auto glbfn_glBindTextureEXT_loader (uint a0, uint a1) nothrow @nogc {
  glBindTextureEXT = cast(glbfn_glBindTextureEXT)glbindGetProcAddress(`glBindTextureEXT`);
  if (glBindTextureEXT is null) assert(0, `OpenGL function 'glBindTextureEXT' not found!`);
  glBindTextureEXT(a0,a1,);
}
__gshared glbfn_glDeleteTexturesEXT glDeleteTexturesEXT = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteTexturesEXT_loader(a0,a1,);
};
private auto glbfn_glDeleteTexturesEXT_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteTexturesEXT = cast(glbfn_glDeleteTexturesEXT)glbindGetProcAddress(`glDeleteTexturesEXT`);
  if (glDeleteTexturesEXT is null) assert(0, `OpenGL function 'glDeleteTexturesEXT' not found!`);
  glDeleteTexturesEXT(a0,a1,);
}
__gshared glbfn_glGenTexturesEXT glGenTexturesEXT = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenTexturesEXT_loader(a0,a1,);
};
private auto glbfn_glGenTexturesEXT_loader (int a0, uint* a1) nothrow @nogc {
  glGenTexturesEXT = cast(glbfn_glGenTexturesEXT)glbindGetProcAddress(`glGenTexturesEXT`);
  if (glGenTexturesEXT is null) assert(0, `OpenGL function 'glGenTexturesEXT' not found!`);
  glGenTexturesEXT(a0,a1,);
}
__gshared glbfn_glIsTextureEXT glIsTextureEXT = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsTextureEXT_loader(a0,);
};
private auto glbfn_glIsTextureEXT_loader (uint a0) nothrow @nogc {
  glIsTextureEXT = cast(glbfn_glIsTextureEXT)glbindGetProcAddress(`glIsTextureEXT`);
  if (glIsTextureEXT is null) assert(0, `OpenGL function 'glIsTextureEXT' not found!`);
  return glIsTextureEXT(a0,);
}
__gshared glbfn_glPrioritizeTexturesEXT glPrioritizeTexturesEXT = function void (int a0, const(uint)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glPrioritizeTexturesEXT_loader(a0,a1,a2,);
};
private auto glbfn_glPrioritizeTexturesEXT_loader (int a0, const(uint)* a1, const(float)* a2) nothrow @nogc {
  glPrioritizeTexturesEXT = cast(glbfn_glPrioritizeTexturesEXT)glbindGetProcAddress(`glPrioritizeTexturesEXT`);
  if (glPrioritizeTexturesEXT is null) assert(0, `OpenGL function 'glPrioritizeTexturesEXT' not found!`);
  glPrioritizeTexturesEXT(a0,a1,a2,);
}
__gshared glbfn_glTextureNormalEXT glTextureNormalEXT = function void (uint a0) nothrow @nogc {
  glbfn_glTextureNormalEXT_loader(a0,);
};
private auto glbfn_glTextureNormalEXT_loader (uint a0) nothrow @nogc {
  glTextureNormalEXT = cast(glbfn_glTextureNormalEXT)glbindGetProcAddress(`glTextureNormalEXT`);
  if (glTextureNormalEXT is null) assert(0, `OpenGL function 'glTextureNormalEXT' not found!`);
  glTextureNormalEXT(a0,);
}
__gshared glbfn_glGetQueryObjecti64vEXT glGetQueryObjecti64vEXT = function void (uint a0, uint a1, long* a2) nothrow @nogc {
  glbfn_glGetQueryObjecti64vEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjecti64vEXT_loader (uint a0, uint a1, long* a2) nothrow @nogc {
  glGetQueryObjecti64vEXT = cast(glbfn_glGetQueryObjecti64vEXT)glbindGetProcAddress(`glGetQueryObjecti64vEXT`);
  if (glGetQueryObjecti64vEXT is null) assert(0, `OpenGL function 'glGetQueryObjecti64vEXT' not found!`);
  glGetQueryObjecti64vEXT(a0,a1,a2,);
}
__gshared glbfn_glGetQueryObjectui64vEXT glGetQueryObjectui64vEXT = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetQueryObjectui64vEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetQueryObjectui64vEXT_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetQueryObjectui64vEXT = cast(glbfn_glGetQueryObjectui64vEXT)glbindGetProcAddress(`glGetQueryObjectui64vEXT`);
  if (glGetQueryObjectui64vEXT is null) assert(0, `OpenGL function 'glGetQueryObjectui64vEXT' not found!`);
  glGetQueryObjectui64vEXT(a0,a1,a2,);
}
__gshared glbfn_glBeginTransformFeedbackEXT glBeginTransformFeedbackEXT = function void (uint a0) nothrow @nogc {
  glbfn_glBeginTransformFeedbackEXT_loader(a0,);
};
private auto glbfn_glBeginTransformFeedbackEXT_loader (uint a0) nothrow @nogc {
  glBeginTransformFeedbackEXT = cast(glbfn_glBeginTransformFeedbackEXT)glbindGetProcAddress(`glBeginTransformFeedbackEXT`);
  if (glBeginTransformFeedbackEXT is null) assert(0, `OpenGL function 'glBeginTransformFeedbackEXT' not found!`);
  glBeginTransformFeedbackEXT(a0,);
}
__gshared glbfn_glEndTransformFeedbackEXT glEndTransformFeedbackEXT = function void () nothrow @nogc {
  glbfn_glEndTransformFeedbackEXT_loader();
};
private auto glbfn_glEndTransformFeedbackEXT_loader () nothrow @nogc {
  glEndTransformFeedbackEXT = cast(glbfn_glEndTransformFeedbackEXT)glbindGetProcAddress(`glEndTransformFeedbackEXT`);
  if (glEndTransformFeedbackEXT is null) assert(0, `OpenGL function 'glEndTransformFeedbackEXT' not found!`);
  glEndTransformFeedbackEXT();
}
__gshared glbfn_glBindBufferRangeEXT glBindBufferRangeEXT = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glBindBufferRangeEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glBindBufferRangeEXT_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glBindBufferRangeEXT = cast(glbfn_glBindBufferRangeEXT)glbindGetProcAddress(`glBindBufferRangeEXT`);
  if (glBindBufferRangeEXT is null) assert(0, `OpenGL function 'glBindBufferRangeEXT' not found!`);
  glBindBufferRangeEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBindBufferOffsetEXT glBindBufferOffsetEXT = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glBindBufferOffsetEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBindBufferOffsetEXT_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glBindBufferOffsetEXT = cast(glbfn_glBindBufferOffsetEXT)glbindGetProcAddress(`glBindBufferOffsetEXT`);
  if (glBindBufferOffsetEXT is null) assert(0, `OpenGL function 'glBindBufferOffsetEXT' not found!`);
  glBindBufferOffsetEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glBindBufferBaseEXT glBindBufferBaseEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBindBufferBaseEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBindBufferBaseEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBindBufferBaseEXT = cast(glbfn_glBindBufferBaseEXT)glbindGetProcAddress(`glBindBufferBaseEXT`);
  if (glBindBufferBaseEXT is null) assert(0, `OpenGL function 'glBindBufferBaseEXT' not found!`);
  glBindBufferBaseEXT(a0,a1,a2,);
}
__gshared glbfn_glTransformFeedbackVaryingsEXT glTransformFeedbackVaryingsEXT = function void (uint a0, int a1, const(char*)* a2, uint a3) nothrow @nogc {
  glbfn_glTransformFeedbackVaryingsEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTransformFeedbackVaryingsEXT_loader (uint a0, int a1, const(char*)* a2, uint a3) nothrow @nogc {
  glTransformFeedbackVaryingsEXT = cast(glbfn_glTransformFeedbackVaryingsEXT)glbindGetProcAddress(`glTransformFeedbackVaryingsEXT`);
  if (glTransformFeedbackVaryingsEXT is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsEXT' not found!`);
  glTransformFeedbackVaryingsEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTransformFeedbackVaryingEXT glGetTransformFeedbackVaryingEXT = function void (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glbfn_glGetTransformFeedbackVaryingEXT_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetTransformFeedbackVaryingEXT_loader (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glGetTransformFeedbackVaryingEXT = cast(glbfn_glGetTransformFeedbackVaryingEXT)glbindGetProcAddress(`glGetTransformFeedbackVaryingEXT`);
  if (glGetTransformFeedbackVaryingEXT is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingEXT' not found!`);
  glGetTransformFeedbackVaryingEXT(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glArrayElementEXT glArrayElementEXT = function void (int a0) nothrow @nogc {
  glbfn_glArrayElementEXT_loader(a0,);
};
private auto glbfn_glArrayElementEXT_loader (int a0) nothrow @nogc {
  glArrayElementEXT = cast(glbfn_glArrayElementEXT)glbindGetProcAddress(`glArrayElementEXT`);
  if (glArrayElementEXT is null) assert(0, `OpenGL function 'glArrayElementEXT' not found!`);
  glArrayElementEXT(a0,);
}
__gshared glbfn_glColorPointerEXT glColorPointerEXT = function void (int a0, uint a1, int a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glColorPointerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glColorPointerEXT_loader (int a0, uint a1, int a2, int a3, const(void)* a4) nothrow @nogc {
  glColorPointerEXT = cast(glbfn_glColorPointerEXT)glbindGetProcAddress(`glColorPointerEXT`);
  if (glColorPointerEXT is null) assert(0, `OpenGL function 'glColorPointerEXT' not found!`);
  glColorPointerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawArraysEXT glDrawArraysEXT = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glDrawArraysEXT_loader(a0,a1,a2,);
};
private auto glbfn_glDrawArraysEXT_loader (uint a0, int a1, int a2) nothrow @nogc {
  glDrawArraysEXT = cast(glbfn_glDrawArraysEXT)glbindGetProcAddress(`glDrawArraysEXT`);
  if (glDrawArraysEXT is null) assert(0, `OpenGL function 'glDrawArraysEXT' not found!`);
  glDrawArraysEXT(a0,a1,a2,);
}
__gshared glbfn_glEdgeFlagPointerEXT glEdgeFlagPointerEXT = function void (int a0, int a1, const(ubyte)* a2) nothrow @nogc {
  glbfn_glEdgeFlagPointerEXT_loader(a0,a1,a2,);
};
private auto glbfn_glEdgeFlagPointerEXT_loader (int a0, int a1, const(ubyte)* a2) nothrow @nogc {
  glEdgeFlagPointerEXT = cast(glbfn_glEdgeFlagPointerEXT)glbindGetProcAddress(`glEdgeFlagPointerEXT`);
  if (glEdgeFlagPointerEXT is null) assert(0, `OpenGL function 'glEdgeFlagPointerEXT' not found!`);
  glEdgeFlagPointerEXT(a0,a1,a2,);
}
__gshared glbfn_glGetPointervEXT glGetPointervEXT = function void (uint a0, void** a1) nothrow @nogc {
  glbfn_glGetPointervEXT_loader(a0,a1,);
};
private auto glbfn_glGetPointervEXT_loader (uint a0, void** a1) nothrow @nogc {
  glGetPointervEXT = cast(glbfn_glGetPointervEXT)glbindGetProcAddress(`glGetPointervEXT`);
  if (glGetPointervEXT is null) assert(0, `OpenGL function 'glGetPointervEXT' not found!`);
  glGetPointervEXT(a0,a1,);
}
__gshared glbfn_glIndexPointerEXT glIndexPointerEXT = function void (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glIndexPointerEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glIndexPointerEXT_loader (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glIndexPointerEXT = cast(glbfn_glIndexPointerEXT)glbindGetProcAddress(`glIndexPointerEXT`);
  if (glIndexPointerEXT is null) assert(0, `OpenGL function 'glIndexPointerEXT' not found!`);
  glIndexPointerEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glNormalPointerEXT glNormalPointerEXT = function void (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glNormalPointerEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNormalPointerEXT_loader (uint a0, int a1, int a2, const(void)* a3) nothrow @nogc {
  glNormalPointerEXT = cast(glbfn_glNormalPointerEXT)glbindGetProcAddress(`glNormalPointerEXT`);
  if (glNormalPointerEXT is null) assert(0, `OpenGL function 'glNormalPointerEXT' not found!`);
  glNormalPointerEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoordPointerEXT glTexCoordPointerEXT = function void (int a0, uint a1, int a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glTexCoordPointerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTexCoordPointerEXT_loader (int a0, uint a1, int a2, int a3, const(void)* a4) nothrow @nogc {
  glTexCoordPointerEXT = cast(glbfn_glTexCoordPointerEXT)glbindGetProcAddress(`glTexCoordPointerEXT`);
  if (glTexCoordPointerEXT is null) assert(0, `OpenGL function 'glTexCoordPointerEXT' not found!`);
  glTexCoordPointerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexPointerEXT glVertexPointerEXT = function void (int a0, uint a1, int a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glVertexPointerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexPointerEXT_loader (int a0, uint a1, int a2, int a3, const(void)* a4) nothrow @nogc {
  glVertexPointerEXT = cast(glbfn_glVertexPointerEXT)glbindGetProcAddress(`glVertexPointerEXT`);
  if (glVertexPointerEXT is null) assert(0, `OpenGL function 'glVertexPointerEXT' not found!`);
  glVertexPointerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribL1dEXT glVertexAttribL1dEXT = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glVertexAttribL1dEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1dEXT_loader (uint a0, double a1) nothrow @nogc {
  glVertexAttribL1dEXT = cast(glbfn_glVertexAttribL1dEXT)glbindGetProcAddress(`glVertexAttribL1dEXT`);
  if (glVertexAttribL1dEXT is null) assert(0, `OpenGL function 'glVertexAttribL1dEXT' not found!`);
  glVertexAttribL1dEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribL2dEXT glVertexAttribL2dEXT = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glVertexAttribL2dEXT_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribL2dEXT_loader (uint a0, double a1, double a2) nothrow @nogc {
  glVertexAttribL2dEXT = cast(glbfn_glVertexAttribL2dEXT)glbindGetProcAddress(`glVertexAttribL2dEXT`);
  if (glVertexAttribL2dEXT is null) assert(0, `OpenGL function 'glVertexAttribL2dEXT' not found!`);
  glVertexAttribL2dEXT(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribL3dEXT glVertexAttribL3dEXT = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glVertexAttribL3dEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribL3dEXT_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glVertexAttribL3dEXT = cast(glbfn_glVertexAttribL3dEXT)glbindGetProcAddress(`glVertexAttribL3dEXT`);
  if (glVertexAttribL3dEXT is null) assert(0, `OpenGL function 'glVertexAttribL3dEXT' not found!`);
  glVertexAttribL3dEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribL4dEXT glVertexAttribL4dEXT = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glVertexAttribL4dEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribL4dEXT_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glVertexAttribL4dEXT = cast(glbfn_glVertexAttribL4dEXT)glbindGetProcAddress(`glVertexAttribL4dEXT`);
  if (glVertexAttribL4dEXT is null) assert(0, `OpenGL function 'glVertexAttribL4dEXT' not found!`);
  glVertexAttribL4dEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribL1dvEXT glVertexAttribL1dvEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL1dvEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1dvEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL1dvEXT = cast(glbfn_glVertexAttribL1dvEXT)glbindGetProcAddress(`glVertexAttribL1dvEXT`);
  if (glVertexAttribL1dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL1dvEXT' not found!`);
  glVertexAttribL1dvEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribL2dvEXT glVertexAttribL2dvEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL2dvEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL2dvEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL2dvEXT = cast(glbfn_glVertexAttribL2dvEXT)glbindGetProcAddress(`glVertexAttribL2dvEXT`);
  if (glVertexAttribL2dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL2dvEXT' not found!`);
  glVertexAttribL2dvEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribL3dvEXT glVertexAttribL3dvEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL3dvEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL3dvEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL3dvEXT = cast(glbfn_glVertexAttribL3dvEXT)glbindGetProcAddress(`glVertexAttribL3dvEXT`);
  if (glVertexAttribL3dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL3dvEXT' not found!`);
  glVertexAttribL3dvEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribL4dvEXT glVertexAttribL4dvEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttribL4dvEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL4dvEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttribL4dvEXT = cast(glbfn_glVertexAttribL4dvEXT)glbindGetProcAddress(`glVertexAttribL4dvEXT`);
  if (glVertexAttribL4dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL4dvEXT' not found!`);
  glVertexAttribL4dvEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribLPointerEXT glVertexAttribLPointerEXT = function void (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glVertexAttribLPointerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribLPointerEXT_loader (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glVertexAttribLPointerEXT = cast(glbfn_glVertexAttribLPointerEXT)glbindGetProcAddress(`glVertexAttribLPointerEXT`);
  if (glVertexAttribLPointerEXT is null) assert(0, `OpenGL function 'glVertexAttribLPointerEXT' not found!`);
  glVertexAttribLPointerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetVertexAttribLdvEXT glGetVertexAttribLdvEXT = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetVertexAttribLdvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribLdvEXT_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetVertexAttribLdvEXT = cast(glbfn_glGetVertexAttribLdvEXT)glbindGetProcAddress(`glGetVertexAttribLdvEXT`);
  if (glGetVertexAttribLdvEXT is null) assert(0, `OpenGL function 'glGetVertexAttribLdvEXT' not found!`);
  glGetVertexAttribLdvEXT(a0,a1,a2,);
}
__gshared glbfn_glBeginVertexShaderEXT glBeginVertexShaderEXT = function void () nothrow @nogc {
  glbfn_glBeginVertexShaderEXT_loader();
};
private auto glbfn_glBeginVertexShaderEXT_loader () nothrow @nogc {
  glBeginVertexShaderEXT = cast(glbfn_glBeginVertexShaderEXT)glbindGetProcAddress(`glBeginVertexShaderEXT`);
  if (glBeginVertexShaderEXT is null) assert(0, `OpenGL function 'glBeginVertexShaderEXT' not found!`);
  glBeginVertexShaderEXT();
}
__gshared glbfn_glEndVertexShaderEXT glEndVertexShaderEXT = function void () nothrow @nogc {
  glbfn_glEndVertexShaderEXT_loader();
};
private auto glbfn_glEndVertexShaderEXT_loader () nothrow @nogc {
  glEndVertexShaderEXT = cast(glbfn_glEndVertexShaderEXT)glbindGetProcAddress(`glEndVertexShaderEXT`);
  if (glEndVertexShaderEXT is null) assert(0, `OpenGL function 'glEndVertexShaderEXT' not found!`);
  glEndVertexShaderEXT();
}
__gshared glbfn_glBindVertexShaderEXT glBindVertexShaderEXT = function void (uint a0) nothrow @nogc {
  glbfn_glBindVertexShaderEXT_loader(a0,);
};
private auto glbfn_glBindVertexShaderEXT_loader (uint a0) nothrow @nogc {
  glBindVertexShaderEXT = cast(glbfn_glBindVertexShaderEXT)glbindGetProcAddress(`glBindVertexShaderEXT`);
  if (glBindVertexShaderEXT is null) assert(0, `OpenGL function 'glBindVertexShaderEXT' not found!`);
  glBindVertexShaderEXT(a0,);
}
__gshared glbfn_glGenVertexShadersEXT glGenVertexShadersEXT = function uint (uint a0) nothrow @nogc {
  return glbfn_glGenVertexShadersEXT_loader(a0,);
};
private auto glbfn_glGenVertexShadersEXT_loader (uint a0) nothrow @nogc {
  glGenVertexShadersEXT = cast(glbfn_glGenVertexShadersEXT)glbindGetProcAddress(`glGenVertexShadersEXT`);
  if (glGenVertexShadersEXT is null) assert(0, `OpenGL function 'glGenVertexShadersEXT' not found!`);
  return glGenVertexShadersEXT(a0,);
}
__gshared glbfn_glDeleteVertexShaderEXT glDeleteVertexShaderEXT = function void (uint a0) nothrow @nogc {
  glbfn_glDeleteVertexShaderEXT_loader(a0,);
};
private auto glbfn_glDeleteVertexShaderEXT_loader (uint a0) nothrow @nogc {
  glDeleteVertexShaderEXT = cast(glbfn_glDeleteVertexShaderEXT)glbindGetProcAddress(`glDeleteVertexShaderEXT`);
  if (glDeleteVertexShaderEXT is null) assert(0, `OpenGL function 'glDeleteVertexShaderEXT' not found!`);
  glDeleteVertexShaderEXT(a0,);
}
__gshared glbfn_glShaderOp1EXT glShaderOp1EXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glShaderOp1EXT_loader(a0,a1,a2,);
};
private auto glbfn_glShaderOp1EXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glShaderOp1EXT = cast(glbfn_glShaderOp1EXT)glbindGetProcAddress(`glShaderOp1EXT`);
  if (glShaderOp1EXT is null) assert(0, `OpenGL function 'glShaderOp1EXT' not found!`);
  glShaderOp1EXT(a0,a1,a2,);
}
__gshared glbfn_glShaderOp2EXT glShaderOp2EXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glShaderOp2EXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glShaderOp2EXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glShaderOp2EXT = cast(glbfn_glShaderOp2EXT)glbindGetProcAddress(`glShaderOp2EXT`);
  if (glShaderOp2EXT is null) assert(0, `OpenGL function 'glShaderOp2EXT' not found!`);
  glShaderOp2EXT(a0,a1,a2,a3,);
}
__gshared glbfn_glShaderOp3EXT glShaderOp3EXT = function void (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glShaderOp3EXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glShaderOp3EXT_loader (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glShaderOp3EXT = cast(glbfn_glShaderOp3EXT)glbindGetProcAddress(`glShaderOp3EXT`);
  if (glShaderOp3EXT is null) assert(0, `OpenGL function 'glShaderOp3EXT' not found!`);
  glShaderOp3EXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glSwizzleEXT glSwizzleEXT = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glSwizzleEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glSwizzleEXT_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glSwizzleEXT = cast(glbfn_glSwizzleEXT)glbindGetProcAddress(`glSwizzleEXT`);
  if (glSwizzleEXT is null) assert(0, `OpenGL function 'glSwizzleEXT' not found!`);
  glSwizzleEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glWriteMaskEXT glWriteMaskEXT = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glWriteMaskEXT_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glWriteMaskEXT_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glWriteMaskEXT = cast(glbfn_glWriteMaskEXT)glbindGetProcAddress(`glWriteMaskEXT`);
  if (glWriteMaskEXT is null) assert(0, `OpenGL function 'glWriteMaskEXT' not found!`);
  glWriteMaskEXT(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glInsertComponentEXT glInsertComponentEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glInsertComponentEXT_loader(a0,a1,a2,);
};
private auto glbfn_glInsertComponentEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glInsertComponentEXT = cast(glbfn_glInsertComponentEXT)glbindGetProcAddress(`glInsertComponentEXT`);
  if (glInsertComponentEXT is null) assert(0, `OpenGL function 'glInsertComponentEXT' not found!`);
  glInsertComponentEXT(a0,a1,a2,);
}
__gshared glbfn_glExtractComponentEXT glExtractComponentEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glExtractComponentEXT_loader(a0,a1,a2,);
};
private auto glbfn_glExtractComponentEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glExtractComponentEXT = cast(glbfn_glExtractComponentEXT)glbindGetProcAddress(`glExtractComponentEXT`);
  if (glExtractComponentEXT is null) assert(0, `OpenGL function 'glExtractComponentEXT' not found!`);
  glExtractComponentEXT(a0,a1,a2,);
}
__gshared glbfn_glGenSymbolsEXT glGenSymbolsEXT = function uint (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  return glbfn_glGenSymbolsEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGenSymbolsEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glGenSymbolsEXT = cast(glbfn_glGenSymbolsEXT)glbindGetProcAddress(`glGenSymbolsEXT`);
  if (glGenSymbolsEXT is null) assert(0, `OpenGL function 'glGenSymbolsEXT' not found!`);
  return glGenSymbolsEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glSetInvariantEXT glSetInvariantEXT = function void (uint a0, uint a1, const(void)* a2) nothrow @nogc {
  glbfn_glSetInvariantEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSetInvariantEXT_loader (uint a0, uint a1, const(void)* a2) nothrow @nogc {
  glSetInvariantEXT = cast(glbfn_glSetInvariantEXT)glbindGetProcAddress(`glSetInvariantEXT`);
  if (glSetInvariantEXT is null) assert(0, `OpenGL function 'glSetInvariantEXT' not found!`);
  glSetInvariantEXT(a0,a1,a2,);
}
__gshared glbfn_glSetLocalConstantEXT glSetLocalConstantEXT = function void (uint a0, uint a1, const(void)* a2) nothrow @nogc {
  glbfn_glSetLocalConstantEXT_loader(a0,a1,a2,);
};
private auto glbfn_glSetLocalConstantEXT_loader (uint a0, uint a1, const(void)* a2) nothrow @nogc {
  glSetLocalConstantEXT = cast(glbfn_glSetLocalConstantEXT)glbindGetProcAddress(`glSetLocalConstantEXT`);
  if (glSetLocalConstantEXT is null) assert(0, `OpenGL function 'glSetLocalConstantEXT' not found!`);
  glSetLocalConstantEXT(a0,a1,a2,);
}
__gshared glbfn_glVariantbvEXT glVariantbvEXT = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glVariantbvEXT_loader(a0,a1,);
};
private auto glbfn_glVariantbvEXT_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glVariantbvEXT = cast(glbfn_glVariantbvEXT)glbindGetProcAddress(`glVariantbvEXT`);
  if (glVariantbvEXT is null) assert(0, `OpenGL function 'glVariantbvEXT' not found!`);
  glVariantbvEXT(a0,a1,);
}
__gshared glbfn_glVariantsvEXT glVariantsvEXT = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVariantsvEXT_loader(a0,a1,);
};
private auto glbfn_glVariantsvEXT_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVariantsvEXT = cast(glbfn_glVariantsvEXT)glbindGetProcAddress(`glVariantsvEXT`);
  if (glVariantsvEXT is null) assert(0, `OpenGL function 'glVariantsvEXT' not found!`);
  glVariantsvEXT(a0,a1,);
}
__gshared glbfn_glVariantivEXT glVariantivEXT = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVariantivEXT_loader(a0,a1,);
};
private auto glbfn_glVariantivEXT_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVariantivEXT = cast(glbfn_glVariantivEXT)glbindGetProcAddress(`glVariantivEXT`);
  if (glVariantivEXT is null) assert(0, `OpenGL function 'glVariantivEXT' not found!`);
  glVariantivEXT(a0,a1,);
}
__gshared glbfn_glVariantfvEXT glVariantfvEXT = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVariantfvEXT_loader(a0,a1,);
};
private auto glbfn_glVariantfvEXT_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVariantfvEXT = cast(glbfn_glVariantfvEXT)glbindGetProcAddress(`glVariantfvEXT`);
  if (glVariantfvEXT is null) assert(0, `OpenGL function 'glVariantfvEXT' not found!`);
  glVariantfvEXT(a0,a1,);
}
__gshared glbfn_glVariantdvEXT glVariantdvEXT = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVariantdvEXT_loader(a0,a1,);
};
private auto glbfn_glVariantdvEXT_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVariantdvEXT = cast(glbfn_glVariantdvEXT)glbindGetProcAddress(`glVariantdvEXT`);
  if (glVariantdvEXT is null) assert(0, `OpenGL function 'glVariantdvEXT' not found!`);
  glVariantdvEXT(a0,a1,);
}
__gshared glbfn_glVariantubvEXT glVariantubvEXT = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVariantubvEXT_loader(a0,a1,);
};
private auto glbfn_glVariantubvEXT_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVariantubvEXT = cast(glbfn_glVariantubvEXT)glbindGetProcAddress(`glVariantubvEXT`);
  if (glVariantubvEXT is null) assert(0, `OpenGL function 'glVariantubvEXT' not found!`);
  glVariantubvEXT(a0,a1,);
}
__gshared glbfn_glVariantusvEXT glVariantusvEXT = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVariantusvEXT_loader(a0,a1,);
};
private auto glbfn_glVariantusvEXT_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVariantusvEXT = cast(glbfn_glVariantusvEXT)glbindGetProcAddress(`glVariantusvEXT`);
  if (glVariantusvEXT is null) assert(0, `OpenGL function 'glVariantusvEXT' not found!`);
  glVariantusvEXT(a0,a1,);
}
__gshared glbfn_glVariantuivEXT glVariantuivEXT = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVariantuivEXT_loader(a0,a1,);
};
private auto glbfn_glVariantuivEXT_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVariantuivEXT = cast(glbfn_glVariantuivEXT)glbindGetProcAddress(`glVariantuivEXT`);
  if (glVariantuivEXT is null) assert(0, `OpenGL function 'glVariantuivEXT' not found!`);
  glVariantuivEXT(a0,a1,);
}
__gshared glbfn_glVariantPointerEXT glVariantPointerEXT = function void (uint a0, uint a1, uint a2, const(void)* a3) nothrow @nogc {
  glbfn_glVariantPointerEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVariantPointerEXT_loader (uint a0, uint a1, uint a2, const(void)* a3) nothrow @nogc {
  glVariantPointerEXT = cast(glbfn_glVariantPointerEXT)glbindGetProcAddress(`glVariantPointerEXT`);
  if (glVariantPointerEXT is null) assert(0, `OpenGL function 'glVariantPointerEXT' not found!`);
  glVariantPointerEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glEnableVariantClientStateEXT glEnableVariantClientStateEXT = function void (uint a0) nothrow @nogc {
  glbfn_glEnableVariantClientStateEXT_loader(a0,);
};
private auto glbfn_glEnableVariantClientStateEXT_loader (uint a0) nothrow @nogc {
  glEnableVariantClientStateEXT = cast(glbfn_glEnableVariantClientStateEXT)glbindGetProcAddress(`glEnableVariantClientStateEXT`);
  if (glEnableVariantClientStateEXT is null) assert(0, `OpenGL function 'glEnableVariantClientStateEXT' not found!`);
  glEnableVariantClientStateEXT(a0,);
}
__gshared glbfn_glDisableVariantClientStateEXT glDisableVariantClientStateEXT = function void (uint a0) nothrow @nogc {
  glbfn_glDisableVariantClientStateEXT_loader(a0,);
};
private auto glbfn_glDisableVariantClientStateEXT_loader (uint a0) nothrow @nogc {
  glDisableVariantClientStateEXT = cast(glbfn_glDisableVariantClientStateEXT)glbindGetProcAddress(`glDisableVariantClientStateEXT`);
  if (glDisableVariantClientStateEXT is null) assert(0, `OpenGL function 'glDisableVariantClientStateEXT' not found!`);
  glDisableVariantClientStateEXT(a0,);
}
__gshared glbfn_glBindLightParameterEXT glBindLightParameterEXT = function uint (uint a0, uint a1) nothrow @nogc {
  return glbfn_glBindLightParameterEXT_loader(a0,a1,);
};
private auto glbfn_glBindLightParameterEXT_loader (uint a0, uint a1) nothrow @nogc {
  glBindLightParameterEXT = cast(glbfn_glBindLightParameterEXT)glbindGetProcAddress(`glBindLightParameterEXT`);
  if (glBindLightParameterEXT is null) assert(0, `OpenGL function 'glBindLightParameterEXT' not found!`);
  return glBindLightParameterEXT(a0,a1,);
}
__gshared glbfn_glBindMaterialParameterEXT glBindMaterialParameterEXT = function uint (uint a0, uint a1) nothrow @nogc {
  return glbfn_glBindMaterialParameterEXT_loader(a0,a1,);
};
private auto glbfn_glBindMaterialParameterEXT_loader (uint a0, uint a1) nothrow @nogc {
  glBindMaterialParameterEXT = cast(glbfn_glBindMaterialParameterEXT)glbindGetProcAddress(`glBindMaterialParameterEXT`);
  if (glBindMaterialParameterEXT is null) assert(0, `OpenGL function 'glBindMaterialParameterEXT' not found!`);
  return glBindMaterialParameterEXT(a0,a1,);
}
__gshared glbfn_glBindTexGenParameterEXT glBindTexGenParameterEXT = function uint (uint a0, uint a1, uint a2) nothrow @nogc {
  return glbfn_glBindTexGenParameterEXT_loader(a0,a1,a2,);
};
private auto glbfn_glBindTexGenParameterEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBindTexGenParameterEXT = cast(glbfn_glBindTexGenParameterEXT)glbindGetProcAddress(`glBindTexGenParameterEXT`);
  if (glBindTexGenParameterEXT is null) assert(0, `OpenGL function 'glBindTexGenParameterEXT' not found!`);
  return glBindTexGenParameterEXT(a0,a1,a2,);
}
__gshared glbfn_glBindTextureUnitParameterEXT glBindTextureUnitParameterEXT = function uint (uint a0, uint a1) nothrow @nogc {
  return glbfn_glBindTextureUnitParameterEXT_loader(a0,a1,);
};
private auto glbfn_glBindTextureUnitParameterEXT_loader (uint a0, uint a1) nothrow @nogc {
  glBindTextureUnitParameterEXT = cast(glbfn_glBindTextureUnitParameterEXT)glbindGetProcAddress(`glBindTextureUnitParameterEXT`);
  if (glBindTextureUnitParameterEXT is null) assert(0, `OpenGL function 'glBindTextureUnitParameterEXT' not found!`);
  return glBindTextureUnitParameterEXT(a0,a1,);
}
__gshared glbfn_glBindParameterEXT glBindParameterEXT = function uint (uint a0) nothrow @nogc {
  return glbfn_glBindParameterEXT_loader(a0,);
};
private auto glbfn_glBindParameterEXT_loader (uint a0) nothrow @nogc {
  glBindParameterEXT = cast(glbfn_glBindParameterEXT)glbindGetProcAddress(`glBindParameterEXT`);
  if (glBindParameterEXT is null) assert(0, `OpenGL function 'glBindParameterEXT' not found!`);
  return glBindParameterEXT(a0,);
}
__gshared glbfn_glIsVariantEnabledEXT glIsVariantEnabledEXT = function ubyte (uint a0, uint a1) nothrow @nogc {
  return glbfn_glIsVariantEnabledEXT_loader(a0,a1,);
};
private auto glbfn_glIsVariantEnabledEXT_loader (uint a0, uint a1) nothrow @nogc {
  glIsVariantEnabledEXT = cast(glbfn_glIsVariantEnabledEXT)glbindGetProcAddress(`glIsVariantEnabledEXT`);
  if (glIsVariantEnabledEXT is null) assert(0, `OpenGL function 'glIsVariantEnabledEXT' not found!`);
  return glIsVariantEnabledEXT(a0,a1,);
}
__gshared glbfn_glGetVariantBooleanvEXT glGetVariantBooleanvEXT = function void (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glbfn_glGetVariantBooleanvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVariantBooleanvEXT_loader (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glGetVariantBooleanvEXT = cast(glbfn_glGetVariantBooleanvEXT)glbindGetProcAddress(`glGetVariantBooleanvEXT`);
  if (glGetVariantBooleanvEXT is null) assert(0, `OpenGL function 'glGetVariantBooleanvEXT' not found!`);
  glGetVariantBooleanvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetVariantIntegervEXT glGetVariantIntegervEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVariantIntegervEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVariantIntegervEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVariantIntegervEXT = cast(glbfn_glGetVariantIntegervEXT)glbindGetProcAddress(`glGetVariantIntegervEXT`);
  if (glGetVariantIntegervEXT is null) assert(0, `OpenGL function 'glGetVariantIntegervEXT' not found!`);
  glGetVariantIntegervEXT(a0,a1,a2,);
}
__gshared glbfn_glGetVariantFloatvEXT glGetVariantFloatvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetVariantFloatvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVariantFloatvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetVariantFloatvEXT = cast(glbfn_glGetVariantFloatvEXT)glbindGetProcAddress(`glGetVariantFloatvEXT`);
  if (glGetVariantFloatvEXT is null) assert(0, `OpenGL function 'glGetVariantFloatvEXT' not found!`);
  glGetVariantFloatvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetVariantPointervEXT glGetVariantPointervEXT = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetVariantPointervEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVariantPointervEXT_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetVariantPointervEXT = cast(glbfn_glGetVariantPointervEXT)glbindGetProcAddress(`glGetVariantPointervEXT`);
  if (glGetVariantPointervEXT is null) assert(0, `OpenGL function 'glGetVariantPointervEXT' not found!`);
  glGetVariantPointervEXT(a0,a1,a2,);
}
__gshared glbfn_glGetInvariantBooleanvEXT glGetInvariantBooleanvEXT = function void (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glbfn_glGetInvariantBooleanvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetInvariantBooleanvEXT_loader (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glGetInvariantBooleanvEXT = cast(glbfn_glGetInvariantBooleanvEXT)glbindGetProcAddress(`glGetInvariantBooleanvEXT`);
  if (glGetInvariantBooleanvEXT is null) assert(0, `OpenGL function 'glGetInvariantBooleanvEXT' not found!`);
  glGetInvariantBooleanvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetInvariantIntegervEXT glGetInvariantIntegervEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetInvariantIntegervEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetInvariantIntegervEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetInvariantIntegervEXT = cast(glbfn_glGetInvariantIntegervEXT)glbindGetProcAddress(`glGetInvariantIntegervEXT`);
  if (glGetInvariantIntegervEXT is null) assert(0, `OpenGL function 'glGetInvariantIntegervEXT' not found!`);
  glGetInvariantIntegervEXT(a0,a1,a2,);
}
__gshared glbfn_glGetInvariantFloatvEXT glGetInvariantFloatvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetInvariantFloatvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetInvariantFloatvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetInvariantFloatvEXT = cast(glbfn_glGetInvariantFloatvEXT)glbindGetProcAddress(`glGetInvariantFloatvEXT`);
  if (glGetInvariantFloatvEXT is null) assert(0, `OpenGL function 'glGetInvariantFloatvEXT' not found!`);
  glGetInvariantFloatvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT = function void (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glbfn_glGetLocalConstantBooleanvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetLocalConstantBooleanvEXT_loader (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glGetLocalConstantBooleanvEXT = cast(glbfn_glGetLocalConstantBooleanvEXT)glbindGetProcAddress(`glGetLocalConstantBooleanvEXT`);
  if (glGetLocalConstantBooleanvEXT is null) assert(0, `OpenGL function 'glGetLocalConstantBooleanvEXT' not found!`);
  glGetLocalConstantBooleanvEXT(a0,a1,a2,);
}
__gshared glbfn_glGetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetLocalConstantIntegervEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetLocalConstantIntegervEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetLocalConstantIntegervEXT = cast(glbfn_glGetLocalConstantIntegervEXT)glbindGetProcAddress(`glGetLocalConstantIntegervEXT`);
  if (glGetLocalConstantIntegervEXT is null) assert(0, `OpenGL function 'glGetLocalConstantIntegervEXT' not found!`);
  glGetLocalConstantIntegervEXT(a0,a1,a2,);
}
__gshared glbfn_glGetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetLocalConstantFloatvEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetLocalConstantFloatvEXT_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetLocalConstantFloatvEXT = cast(glbfn_glGetLocalConstantFloatvEXT)glbindGetProcAddress(`glGetLocalConstantFloatvEXT`);
  if (glGetLocalConstantFloatvEXT is null) assert(0, `OpenGL function 'glGetLocalConstantFloatvEXT' not found!`);
  glGetLocalConstantFloatvEXT(a0,a1,a2,);
}
__gshared glbfn_glVertexWeightfEXT glVertexWeightfEXT = function void (float a0) nothrow @nogc {
  glbfn_glVertexWeightfEXT_loader(a0,);
};
private auto glbfn_glVertexWeightfEXT_loader (float a0) nothrow @nogc {
  glVertexWeightfEXT = cast(glbfn_glVertexWeightfEXT)glbindGetProcAddress(`glVertexWeightfEXT`);
  if (glVertexWeightfEXT is null) assert(0, `OpenGL function 'glVertexWeightfEXT' not found!`);
  glVertexWeightfEXT(a0,);
}
__gshared glbfn_glVertexWeightfvEXT glVertexWeightfvEXT = function void (const(float)* a0) nothrow @nogc {
  glbfn_glVertexWeightfvEXT_loader(a0,);
};
private auto glbfn_glVertexWeightfvEXT_loader (const(float)* a0) nothrow @nogc {
  glVertexWeightfvEXT = cast(glbfn_glVertexWeightfvEXT)glbindGetProcAddress(`glVertexWeightfvEXT`);
  if (glVertexWeightfvEXT is null) assert(0, `OpenGL function 'glVertexWeightfvEXT' not found!`);
  glVertexWeightfvEXT(a0,);
}
__gshared glbfn_glVertexWeightPointerEXT glVertexWeightPointerEXT = function void (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glVertexWeightPointerEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexWeightPointerEXT_loader (int a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glVertexWeightPointerEXT = cast(glbfn_glVertexWeightPointerEXT)glbindGetProcAddress(`glVertexWeightPointerEXT`);
  if (glVertexWeightPointerEXT is null) assert(0, `OpenGL function 'glVertexWeightPointerEXT' not found!`);
  glVertexWeightPointerEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glFrameTerminatorGREMEDY glFrameTerminatorGREMEDY = function void () nothrow @nogc {
  glbfn_glFrameTerminatorGREMEDY_loader();
};
private auto glbfn_glFrameTerminatorGREMEDY_loader () nothrow @nogc {
  glFrameTerminatorGREMEDY = cast(glbfn_glFrameTerminatorGREMEDY)glbindGetProcAddress(`glFrameTerminatorGREMEDY`);
  if (glFrameTerminatorGREMEDY is null) assert(0, `OpenGL function 'glFrameTerminatorGREMEDY' not found!`);
  glFrameTerminatorGREMEDY();
}
__gshared glbfn_glStringMarkerGREMEDY glStringMarkerGREMEDY = function void (int a0, const(void)* a1) nothrow @nogc {
  glbfn_glStringMarkerGREMEDY_loader(a0,a1,);
};
private auto glbfn_glStringMarkerGREMEDY_loader (int a0, const(void)* a1) nothrow @nogc {
  glStringMarkerGREMEDY = cast(glbfn_glStringMarkerGREMEDY)glbindGetProcAddress(`glStringMarkerGREMEDY`);
  if (glStringMarkerGREMEDY is null) assert(0, `OpenGL function 'glStringMarkerGREMEDY' not found!`);
  glStringMarkerGREMEDY(a0,a1,);
}
__gshared glbfn_glImageTransformParameteriHP glImageTransformParameteriHP = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glImageTransformParameteriHP_loader(a0,a1,a2,);
};
private auto glbfn_glImageTransformParameteriHP_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glImageTransformParameteriHP = cast(glbfn_glImageTransformParameteriHP)glbindGetProcAddress(`glImageTransformParameteriHP`);
  if (glImageTransformParameteriHP is null) assert(0, `OpenGL function 'glImageTransformParameteriHP' not found!`);
  glImageTransformParameteriHP(a0,a1,a2,);
}
__gshared glbfn_glImageTransformParameterfHP glImageTransformParameterfHP = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glImageTransformParameterfHP_loader(a0,a1,a2,);
};
private auto glbfn_glImageTransformParameterfHP_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glImageTransformParameterfHP = cast(glbfn_glImageTransformParameterfHP)glbindGetProcAddress(`glImageTransformParameterfHP`);
  if (glImageTransformParameterfHP is null) assert(0, `OpenGL function 'glImageTransformParameterfHP' not found!`);
  glImageTransformParameterfHP(a0,a1,a2,);
}
__gshared glbfn_glImageTransformParameterivHP glImageTransformParameterivHP = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glImageTransformParameterivHP_loader(a0,a1,a2,);
};
private auto glbfn_glImageTransformParameterivHP_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glImageTransformParameterivHP = cast(glbfn_glImageTransformParameterivHP)glbindGetProcAddress(`glImageTransformParameterivHP`);
  if (glImageTransformParameterivHP is null) assert(0, `OpenGL function 'glImageTransformParameterivHP' not found!`);
  glImageTransformParameterivHP(a0,a1,a2,);
}
__gshared glbfn_glImageTransformParameterfvHP glImageTransformParameterfvHP = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glImageTransformParameterfvHP_loader(a0,a1,a2,);
};
private auto glbfn_glImageTransformParameterfvHP_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glImageTransformParameterfvHP = cast(glbfn_glImageTransformParameterfvHP)glbindGetProcAddress(`glImageTransformParameterfvHP`);
  if (glImageTransformParameterfvHP is null) assert(0, `OpenGL function 'glImageTransformParameterfvHP' not found!`);
  glImageTransformParameterfvHP(a0,a1,a2,);
}
__gshared glbfn_glGetImageTransformParameterivHP glGetImageTransformParameterivHP = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetImageTransformParameterivHP_loader(a0,a1,a2,);
};
private auto glbfn_glGetImageTransformParameterivHP_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetImageTransformParameterivHP = cast(glbfn_glGetImageTransformParameterivHP)glbindGetProcAddress(`glGetImageTransformParameterivHP`);
  if (glGetImageTransformParameterivHP is null) assert(0, `OpenGL function 'glGetImageTransformParameterivHP' not found!`);
  glGetImageTransformParameterivHP(a0,a1,a2,);
}
__gshared glbfn_glGetImageTransformParameterfvHP glGetImageTransformParameterfvHP = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetImageTransformParameterfvHP_loader(a0,a1,a2,);
};
private auto glbfn_glGetImageTransformParameterfvHP_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetImageTransformParameterfvHP = cast(glbfn_glGetImageTransformParameterfvHP)glbindGetProcAddress(`glGetImageTransformParameterfvHP`);
  if (glGetImageTransformParameterfvHP is null) assert(0, `OpenGL function 'glGetImageTransformParameterfvHP' not found!`);
  glGetImageTransformParameterfvHP(a0,a1,a2,);
}
__gshared glbfn_glMultiModeDrawArraysIBM glMultiModeDrawArraysIBM = function void (const(uint)* a0, const(int)* a1, const(int)* a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiModeDrawArraysIBM_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiModeDrawArraysIBM_loader (const(uint)* a0, const(int)* a1, const(int)* a2, int a3, int a4) nothrow @nogc {
  glMultiModeDrawArraysIBM = cast(glbfn_glMultiModeDrawArraysIBM)glbindGetProcAddress(`glMultiModeDrawArraysIBM`);
  if (glMultiModeDrawArraysIBM is null) assert(0, `OpenGL function 'glMultiModeDrawArraysIBM' not found!`);
  glMultiModeDrawArraysIBM(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiModeDrawElementsIBM glMultiModeDrawElementsIBM = function void (const(uint)* a0, const(int)* a1, uint a2, const(void*)* a3, int a4, int a5) nothrow @nogc {
  glbfn_glMultiModeDrawElementsIBM_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMultiModeDrawElementsIBM_loader (const(uint)* a0, const(int)* a1, uint a2, const(void*)* a3, int a4, int a5) nothrow @nogc {
  glMultiModeDrawElementsIBM = cast(glbfn_glMultiModeDrawElementsIBM)glbindGetProcAddress(`glMultiModeDrawElementsIBM`);
  if (glMultiModeDrawElementsIBM is null) assert(0, `OpenGL function 'glMultiModeDrawElementsIBM' not found!`);
  glMultiModeDrawElementsIBM(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glFlushStaticDataIBM glFlushStaticDataIBM = function void (uint a0) nothrow @nogc {
  glbfn_glFlushStaticDataIBM_loader(a0,);
};
private auto glbfn_glFlushStaticDataIBM_loader (uint a0) nothrow @nogc {
  glFlushStaticDataIBM = cast(glbfn_glFlushStaticDataIBM)glbindGetProcAddress(`glFlushStaticDataIBM`);
  if (glFlushStaticDataIBM is null) assert(0, `OpenGL function 'glFlushStaticDataIBM' not found!`);
  glFlushStaticDataIBM(a0,);
}
__gshared glbfn_glColorPointerListIBM glColorPointerListIBM = function void (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glbfn_glColorPointerListIBM_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glColorPointerListIBM_loader (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glColorPointerListIBM = cast(glbfn_glColorPointerListIBM)glbindGetProcAddress(`glColorPointerListIBM`);
  if (glColorPointerListIBM is null) assert(0, `OpenGL function 'glColorPointerListIBM' not found!`);
  glColorPointerListIBM(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glSecondaryColorPointerListIBM glSecondaryColorPointerListIBM = function void (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glbfn_glSecondaryColorPointerListIBM_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glSecondaryColorPointerListIBM_loader (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glSecondaryColorPointerListIBM = cast(glbfn_glSecondaryColorPointerListIBM)glbindGetProcAddress(`glSecondaryColorPointerListIBM`);
  if (glSecondaryColorPointerListIBM is null) assert(0, `OpenGL function 'glSecondaryColorPointerListIBM' not found!`);
  glSecondaryColorPointerListIBM(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glEdgeFlagPointerListIBM glEdgeFlagPointerListIBM = function void (int a0, const(ubyte*)* a1, int a2) nothrow @nogc {
  glbfn_glEdgeFlagPointerListIBM_loader(a0,a1,a2,);
};
private auto glbfn_glEdgeFlagPointerListIBM_loader (int a0, const(ubyte*)* a1, int a2) nothrow @nogc {
  glEdgeFlagPointerListIBM = cast(glbfn_glEdgeFlagPointerListIBM)glbindGetProcAddress(`glEdgeFlagPointerListIBM`);
  if (glEdgeFlagPointerListIBM is null) assert(0, `OpenGL function 'glEdgeFlagPointerListIBM' not found!`);
  glEdgeFlagPointerListIBM(a0,a1,a2,);
}
__gshared glbfn_glFogCoordPointerListIBM glFogCoordPointerListIBM = function void (uint a0, int a1, const(void*)* a2, int a3) nothrow @nogc {
  glbfn_glFogCoordPointerListIBM_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFogCoordPointerListIBM_loader (uint a0, int a1, const(void*)* a2, int a3) nothrow @nogc {
  glFogCoordPointerListIBM = cast(glbfn_glFogCoordPointerListIBM)glbindGetProcAddress(`glFogCoordPointerListIBM`);
  if (glFogCoordPointerListIBM is null) assert(0, `OpenGL function 'glFogCoordPointerListIBM' not found!`);
  glFogCoordPointerListIBM(a0,a1,a2,a3,);
}
__gshared glbfn_glIndexPointerListIBM glIndexPointerListIBM = function void (uint a0, int a1, const(void*)* a2, int a3) nothrow @nogc {
  glbfn_glIndexPointerListIBM_loader(a0,a1,a2,a3,);
};
private auto glbfn_glIndexPointerListIBM_loader (uint a0, int a1, const(void*)* a2, int a3) nothrow @nogc {
  glIndexPointerListIBM = cast(glbfn_glIndexPointerListIBM)glbindGetProcAddress(`glIndexPointerListIBM`);
  if (glIndexPointerListIBM is null) assert(0, `OpenGL function 'glIndexPointerListIBM' not found!`);
  glIndexPointerListIBM(a0,a1,a2,a3,);
}
__gshared glbfn_glNormalPointerListIBM glNormalPointerListIBM = function void (uint a0, int a1, const(void*)* a2, int a3) nothrow @nogc {
  glbfn_glNormalPointerListIBM_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNormalPointerListIBM_loader (uint a0, int a1, const(void*)* a2, int a3) nothrow @nogc {
  glNormalPointerListIBM = cast(glbfn_glNormalPointerListIBM)glbindGetProcAddress(`glNormalPointerListIBM`);
  if (glNormalPointerListIBM is null) assert(0, `OpenGL function 'glNormalPointerListIBM' not found!`);
  glNormalPointerListIBM(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoordPointerListIBM glTexCoordPointerListIBM = function void (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glbfn_glTexCoordPointerListIBM_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTexCoordPointerListIBM_loader (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glTexCoordPointerListIBM = cast(glbfn_glTexCoordPointerListIBM)glbindGetProcAddress(`glTexCoordPointerListIBM`);
  if (glTexCoordPointerListIBM is null) assert(0, `OpenGL function 'glTexCoordPointerListIBM' not found!`);
  glTexCoordPointerListIBM(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexPointerListIBM glVertexPointerListIBM = function void (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glbfn_glVertexPointerListIBM_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexPointerListIBM_loader (int a0, uint a1, int a2, const(void*)* a3, int a4) nothrow @nogc {
  glVertexPointerListIBM = cast(glbfn_glVertexPointerListIBM)glbindGetProcAddress(`glVertexPointerListIBM`);
  if (glVertexPointerListIBM is null) assert(0, `OpenGL function 'glVertexPointerListIBM' not found!`);
  glVertexPointerListIBM(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBlendFuncSeparateINGR glBlendFuncSeparateINGR = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glBlendFuncSeparateINGR_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBlendFuncSeparateINGR_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glBlendFuncSeparateINGR = cast(glbfn_glBlendFuncSeparateINGR)glbindGetProcAddress(`glBlendFuncSeparateINGR`);
  if (glBlendFuncSeparateINGR is null) assert(0, `OpenGL function 'glBlendFuncSeparateINGR' not found!`);
  glBlendFuncSeparateINGR(a0,a1,a2,a3,);
}
__gshared glbfn_glApplyFramebufferAttachmentCMAAINTEL glApplyFramebufferAttachmentCMAAINTEL = function void () nothrow @nogc {
  glbfn_glApplyFramebufferAttachmentCMAAINTEL_loader();
};
private auto glbfn_glApplyFramebufferAttachmentCMAAINTEL_loader () nothrow @nogc {
  glApplyFramebufferAttachmentCMAAINTEL = cast(glbfn_glApplyFramebufferAttachmentCMAAINTEL)glbindGetProcAddress(`glApplyFramebufferAttachmentCMAAINTEL`);
  if (glApplyFramebufferAttachmentCMAAINTEL is null) assert(0, `OpenGL function 'glApplyFramebufferAttachmentCMAAINTEL' not found!`);
  glApplyFramebufferAttachmentCMAAINTEL();
}
__gshared glbfn_glSyncTextureINTEL glSyncTextureINTEL = function void (uint a0) nothrow @nogc {
  glbfn_glSyncTextureINTEL_loader(a0,);
};
private auto glbfn_glSyncTextureINTEL_loader (uint a0) nothrow @nogc {
  glSyncTextureINTEL = cast(glbfn_glSyncTextureINTEL)glbindGetProcAddress(`glSyncTextureINTEL`);
  if (glSyncTextureINTEL is null) assert(0, `OpenGL function 'glSyncTextureINTEL' not found!`);
  glSyncTextureINTEL(a0,);
}
__gshared glbfn_glUnmapTexture2DINTEL glUnmapTexture2DINTEL = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glUnmapTexture2DINTEL_loader(a0,a1,);
};
private auto glbfn_glUnmapTexture2DINTEL_loader (uint a0, int a1) nothrow @nogc {
  glUnmapTexture2DINTEL = cast(glbfn_glUnmapTexture2DINTEL)glbindGetProcAddress(`glUnmapTexture2DINTEL`);
  if (glUnmapTexture2DINTEL is null) assert(0, `OpenGL function 'glUnmapTexture2DINTEL' not found!`);
  glUnmapTexture2DINTEL(a0,a1,);
}
__gshared glbfn_glMapTexture2DINTEL glMapTexture2DINTEL = function void* (uint a0, int a1, uint a2, int* a3, uint* a4) nothrow @nogc {
  return glbfn_glMapTexture2DINTEL_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMapTexture2DINTEL_loader (uint a0, int a1, uint a2, int* a3, uint* a4) nothrow @nogc {
  glMapTexture2DINTEL = cast(glbfn_glMapTexture2DINTEL)glbindGetProcAddress(`glMapTexture2DINTEL`);
  if (glMapTexture2DINTEL is null) assert(0, `OpenGL function 'glMapTexture2DINTEL' not found!`);
  return glMapTexture2DINTEL(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexPointervINTEL glVertexPointervINTEL = function void (int a0, uint a1, const(void*)* a2) nothrow @nogc {
  glbfn_glVertexPointervINTEL_loader(a0,a1,a2,);
};
private auto glbfn_glVertexPointervINTEL_loader (int a0, uint a1, const(void*)* a2) nothrow @nogc {
  glVertexPointervINTEL = cast(glbfn_glVertexPointervINTEL)glbindGetProcAddress(`glVertexPointervINTEL`);
  if (glVertexPointervINTEL is null) assert(0, `OpenGL function 'glVertexPointervINTEL' not found!`);
  glVertexPointervINTEL(a0,a1,a2,);
}
__gshared glbfn_glNormalPointervINTEL glNormalPointervINTEL = function void (uint a0, const(void*)* a1) nothrow @nogc {
  glbfn_glNormalPointervINTEL_loader(a0,a1,);
};
private auto glbfn_glNormalPointervINTEL_loader (uint a0, const(void*)* a1) nothrow @nogc {
  glNormalPointervINTEL = cast(glbfn_glNormalPointervINTEL)glbindGetProcAddress(`glNormalPointervINTEL`);
  if (glNormalPointervINTEL is null) assert(0, `OpenGL function 'glNormalPointervINTEL' not found!`);
  glNormalPointervINTEL(a0,a1,);
}
__gshared glbfn_glColorPointervINTEL glColorPointervINTEL = function void (int a0, uint a1, const(void*)* a2) nothrow @nogc {
  glbfn_glColorPointervINTEL_loader(a0,a1,a2,);
};
private auto glbfn_glColorPointervINTEL_loader (int a0, uint a1, const(void*)* a2) nothrow @nogc {
  glColorPointervINTEL = cast(glbfn_glColorPointervINTEL)glbindGetProcAddress(`glColorPointervINTEL`);
  if (glColorPointervINTEL is null) assert(0, `OpenGL function 'glColorPointervINTEL' not found!`);
  glColorPointervINTEL(a0,a1,a2,);
}
__gshared glbfn_glTexCoordPointervINTEL glTexCoordPointervINTEL = function void (int a0, uint a1, const(void*)* a2) nothrow @nogc {
  glbfn_glTexCoordPointervINTEL_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoordPointervINTEL_loader (int a0, uint a1, const(void*)* a2) nothrow @nogc {
  glTexCoordPointervINTEL = cast(glbfn_glTexCoordPointervINTEL)glbindGetProcAddress(`glTexCoordPointervINTEL`);
  if (glTexCoordPointervINTEL is null) assert(0, `OpenGL function 'glTexCoordPointervINTEL' not found!`);
  glTexCoordPointervINTEL(a0,a1,a2,);
}
__gshared glbfn_glBeginPerfQueryINTEL glBeginPerfQueryINTEL = function void (uint a0) nothrow @nogc {
  glbfn_glBeginPerfQueryINTEL_loader(a0,);
};
private auto glbfn_glBeginPerfQueryINTEL_loader (uint a0) nothrow @nogc {
  glBeginPerfQueryINTEL = cast(glbfn_glBeginPerfQueryINTEL)glbindGetProcAddress(`glBeginPerfQueryINTEL`);
  if (glBeginPerfQueryINTEL is null) assert(0, `OpenGL function 'glBeginPerfQueryINTEL' not found!`);
  glBeginPerfQueryINTEL(a0,);
}
__gshared glbfn_glCreatePerfQueryINTEL glCreatePerfQueryINTEL = function void (uint a0, uint* a1) nothrow @nogc {
  glbfn_glCreatePerfQueryINTEL_loader(a0,a1,);
};
private auto glbfn_glCreatePerfQueryINTEL_loader (uint a0, uint* a1) nothrow @nogc {
  glCreatePerfQueryINTEL = cast(glbfn_glCreatePerfQueryINTEL)glbindGetProcAddress(`glCreatePerfQueryINTEL`);
  if (glCreatePerfQueryINTEL is null) assert(0, `OpenGL function 'glCreatePerfQueryINTEL' not found!`);
  glCreatePerfQueryINTEL(a0,a1,);
}
__gshared glbfn_glDeletePerfQueryINTEL glDeletePerfQueryINTEL = function void (uint a0) nothrow @nogc {
  glbfn_glDeletePerfQueryINTEL_loader(a0,);
};
private auto glbfn_glDeletePerfQueryINTEL_loader (uint a0) nothrow @nogc {
  glDeletePerfQueryINTEL = cast(glbfn_glDeletePerfQueryINTEL)glbindGetProcAddress(`glDeletePerfQueryINTEL`);
  if (glDeletePerfQueryINTEL is null) assert(0, `OpenGL function 'glDeletePerfQueryINTEL' not found!`);
  glDeletePerfQueryINTEL(a0,);
}
__gshared glbfn_glEndPerfQueryINTEL glEndPerfQueryINTEL = function void (uint a0) nothrow @nogc {
  glbfn_glEndPerfQueryINTEL_loader(a0,);
};
private auto glbfn_glEndPerfQueryINTEL_loader (uint a0) nothrow @nogc {
  glEndPerfQueryINTEL = cast(glbfn_glEndPerfQueryINTEL)glbindGetProcAddress(`glEndPerfQueryINTEL`);
  if (glEndPerfQueryINTEL is null) assert(0, `OpenGL function 'glEndPerfQueryINTEL' not found!`);
  glEndPerfQueryINTEL(a0,);
}
__gshared glbfn_glGetFirstPerfQueryIdINTEL glGetFirstPerfQueryIdINTEL = function void (uint* a0) nothrow @nogc {
  glbfn_glGetFirstPerfQueryIdINTEL_loader(a0,);
};
private auto glbfn_glGetFirstPerfQueryIdINTEL_loader (uint* a0) nothrow @nogc {
  glGetFirstPerfQueryIdINTEL = cast(glbfn_glGetFirstPerfQueryIdINTEL)glbindGetProcAddress(`glGetFirstPerfQueryIdINTEL`);
  if (glGetFirstPerfQueryIdINTEL is null) assert(0, `OpenGL function 'glGetFirstPerfQueryIdINTEL' not found!`);
  glGetFirstPerfQueryIdINTEL(a0,);
}
__gshared glbfn_glGetNextPerfQueryIdINTEL glGetNextPerfQueryIdINTEL = function void (uint a0, uint* a1) nothrow @nogc {
  glbfn_glGetNextPerfQueryIdINTEL_loader(a0,a1,);
};
private auto glbfn_glGetNextPerfQueryIdINTEL_loader (uint a0, uint* a1) nothrow @nogc {
  glGetNextPerfQueryIdINTEL = cast(glbfn_glGetNextPerfQueryIdINTEL)glbindGetProcAddress(`glGetNextPerfQueryIdINTEL`);
  if (glGetNextPerfQueryIdINTEL is null) assert(0, `OpenGL function 'glGetNextPerfQueryIdINTEL' not found!`);
  glGetNextPerfQueryIdINTEL(a0,a1,);
}
__gshared glbfn_glGetPerfCounterInfoINTEL glGetPerfCounterInfoINTEL = function void (uint a0, uint a1, uint a2, char* a3, uint a4, char* a5, uint* a6, uint* a7, uint* a8, uint* a9, ulong* a10) nothrow @nogc {
  glbfn_glGetPerfCounterInfoINTEL_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glGetPerfCounterInfoINTEL_loader (uint a0, uint a1, uint a2, char* a3, uint a4, char* a5, uint* a6, uint* a7, uint* a8, uint* a9, ulong* a10) nothrow @nogc {
  glGetPerfCounterInfoINTEL = cast(glbfn_glGetPerfCounterInfoINTEL)glbindGetProcAddress(`glGetPerfCounterInfoINTEL`);
  if (glGetPerfCounterInfoINTEL is null) assert(0, `OpenGL function 'glGetPerfCounterInfoINTEL' not found!`);
  glGetPerfCounterInfoINTEL(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glGetPerfQueryDataINTEL glGetPerfQueryDataINTEL = function void (uint a0, uint a1, int a2, void* a3, uint* a4) nothrow @nogc {
  glbfn_glGetPerfQueryDataINTEL_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetPerfQueryDataINTEL_loader (uint a0, uint a1, int a2, void* a3, uint* a4) nothrow @nogc {
  glGetPerfQueryDataINTEL = cast(glbfn_glGetPerfQueryDataINTEL)glbindGetProcAddress(`glGetPerfQueryDataINTEL`);
  if (glGetPerfQueryDataINTEL is null) assert(0, `OpenGL function 'glGetPerfQueryDataINTEL' not found!`);
  glGetPerfQueryDataINTEL(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetPerfQueryIdByNameINTEL glGetPerfQueryIdByNameINTEL = function void (char* a0, uint* a1) nothrow @nogc {
  glbfn_glGetPerfQueryIdByNameINTEL_loader(a0,a1,);
};
private auto glbfn_glGetPerfQueryIdByNameINTEL_loader (char* a0, uint* a1) nothrow @nogc {
  glGetPerfQueryIdByNameINTEL = cast(glbfn_glGetPerfQueryIdByNameINTEL)glbindGetProcAddress(`glGetPerfQueryIdByNameINTEL`);
  if (glGetPerfQueryIdByNameINTEL is null) assert(0, `OpenGL function 'glGetPerfQueryIdByNameINTEL' not found!`);
  glGetPerfQueryIdByNameINTEL(a0,a1,);
}
__gshared glbfn_glGetPerfQueryInfoINTEL glGetPerfQueryInfoINTEL = function void (uint a0, uint a1, char* a2, uint* a3, uint* a4, uint* a5, uint* a6) nothrow @nogc {
  glbfn_glGetPerfQueryInfoINTEL_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetPerfQueryInfoINTEL_loader (uint a0, uint a1, char* a2, uint* a3, uint* a4, uint* a5, uint* a6) nothrow @nogc {
  glGetPerfQueryInfoINTEL = cast(glbfn_glGetPerfQueryInfoINTEL)glbindGetProcAddress(`glGetPerfQueryInfoINTEL`);
  if (glGetPerfQueryInfoINTEL is null) assert(0, `OpenGL function 'glGetPerfQueryInfoINTEL' not found!`);
  glGetPerfQueryInfoINTEL(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glBlendBarrierKHR glBlendBarrierKHR = function void () nothrow @nogc {
  glbfn_glBlendBarrierKHR_loader();
};
private auto glbfn_glBlendBarrierKHR_loader () nothrow @nogc {
  glBlendBarrierKHR = cast(glbfn_glBlendBarrierKHR)glbindGetProcAddress(`glBlendBarrierKHR`);
  if (glBlendBarrierKHR is null) assert(0, `OpenGL function 'glBlendBarrierKHR' not found!`);
  glBlendBarrierKHR();
}
__gshared glbfn_glDebugMessageControlKHR glDebugMessageControlKHR = function void (uint a0, uint a1, uint a2, int a3, const(uint)* a4, ubyte a5) nothrow @nogc {
  glbfn_glDebugMessageControlKHR_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDebugMessageControlKHR_loader (uint a0, uint a1, uint a2, int a3, const(uint)* a4, ubyte a5) nothrow @nogc {
  glDebugMessageControlKHR = cast(glbfn_glDebugMessageControlKHR)glbindGetProcAddress(`glDebugMessageControlKHR`);
  if (glDebugMessageControlKHR is null) assert(0, `OpenGL function 'glDebugMessageControlKHR' not found!`);
  glDebugMessageControlKHR(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glDebugMessageInsertKHR glDebugMessageInsertKHR = function void (uint a0, uint a1, uint a2, uint a3, int a4, const(char)* a5) nothrow @nogc {
  glbfn_glDebugMessageInsertKHR_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDebugMessageInsertKHR_loader (uint a0, uint a1, uint a2, uint a3, int a4, const(char)* a5) nothrow @nogc {
  glDebugMessageInsertKHR = cast(glbfn_glDebugMessageInsertKHR)glbindGetProcAddress(`glDebugMessageInsertKHR`);
  if (glDebugMessageInsertKHR is null) assert(0, `OpenGL function 'glDebugMessageInsertKHR' not found!`);
  glDebugMessageInsertKHR(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetDebugMessageLogKHR glGetDebugMessageLogKHR = function uint (uint a0, int a1, uint* a2, uint* a3, uint* a4, uint* a5, int* a6, char* a7) nothrow @nogc {
  return glbfn_glGetDebugMessageLogKHR_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glGetDebugMessageLogKHR_loader (uint a0, int a1, uint* a2, uint* a3, uint* a4, uint* a5, int* a6, char* a7) nothrow @nogc {
  glGetDebugMessageLogKHR = cast(glbfn_glGetDebugMessageLogKHR)glbindGetProcAddress(`glGetDebugMessageLogKHR`);
  if (glGetDebugMessageLogKHR is null) assert(0, `OpenGL function 'glGetDebugMessageLogKHR' not found!`);
  return glGetDebugMessageLogKHR(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glPushDebugGroupKHR glPushDebugGroupKHR = function void (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glbfn_glPushDebugGroupKHR_loader(a0,a1,a2,a3,);
};
private auto glbfn_glPushDebugGroupKHR_loader (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glPushDebugGroupKHR = cast(glbfn_glPushDebugGroupKHR)glbindGetProcAddress(`glPushDebugGroupKHR`);
  if (glPushDebugGroupKHR is null) assert(0, `OpenGL function 'glPushDebugGroupKHR' not found!`);
  glPushDebugGroupKHR(a0,a1,a2,a3,);
}
__gshared glbfn_glPopDebugGroupKHR glPopDebugGroupKHR = function void () nothrow @nogc {
  glbfn_glPopDebugGroupKHR_loader();
};
private auto glbfn_glPopDebugGroupKHR_loader () nothrow @nogc {
  glPopDebugGroupKHR = cast(glbfn_glPopDebugGroupKHR)glbindGetProcAddress(`glPopDebugGroupKHR`);
  if (glPopDebugGroupKHR is null) assert(0, `OpenGL function 'glPopDebugGroupKHR' not found!`);
  glPopDebugGroupKHR();
}
__gshared glbfn_glObjectLabelKHR glObjectLabelKHR = function void (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glbfn_glObjectLabelKHR_loader(a0,a1,a2,a3,);
};
private auto glbfn_glObjectLabelKHR_loader (uint a0, uint a1, int a2, const(char)* a3) nothrow @nogc {
  glObjectLabelKHR = cast(glbfn_glObjectLabelKHR)glbindGetProcAddress(`glObjectLabelKHR`);
  if (glObjectLabelKHR is null) assert(0, `OpenGL function 'glObjectLabelKHR' not found!`);
  glObjectLabelKHR(a0,a1,a2,a3,);
}
__gshared glbfn_glGetObjectLabelKHR glGetObjectLabelKHR = function void (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glbfn_glGetObjectLabelKHR_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetObjectLabelKHR_loader (uint a0, uint a1, int a2, int* a3, char* a4) nothrow @nogc {
  glGetObjectLabelKHR = cast(glbfn_glGetObjectLabelKHR)glbindGetProcAddress(`glGetObjectLabelKHR`);
  if (glGetObjectLabelKHR is null) assert(0, `OpenGL function 'glGetObjectLabelKHR' not found!`);
  glGetObjectLabelKHR(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glObjectPtrLabelKHR glObjectPtrLabelKHR = function void (const(void)* a0, int a1, const(char)* a2) nothrow @nogc {
  glbfn_glObjectPtrLabelKHR_loader(a0,a1,a2,);
};
private auto glbfn_glObjectPtrLabelKHR_loader (const(void)* a0, int a1, const(char)* a2) nothrow @nogc {
  glObjectPtrLabelKHR = cast(glbfn_glObjectPtrLabelKHR)glbindGetProcAddress(`glObjectPtrLabelKHR`);
  if (glObjectPtrLabelKHR is null) assert(0, `OpenGL function 'glObjectPtrLabelKHR' not found!`);
  glObjectPtrLabelKHR(a0,a1,a2,);
}
__gshared glbfn_glGetObjectPtrLabelKHR glGetObjectPtrLabelKHR = function void (const(void)* a0, int a1, int* a2, char* a3) nothrow @nogc {
  glbfn_glGetObjectPtrLabelKHR_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetObjectPtrLabelKHR_loader (const(void)* a0, int a1, int* a2, char* a3) nothrow @nogc {
  glGetObjectPtrLabelKHR = cast(glbfn_glGetObjectPtrLabelKHR)glbindGetProcAddress(`glGetObjectPtrLabelKHR`);
  if (glGetObjectPtrLabelKHR is null) assert(0, `OpenGL function 'glGetObjectPtrLabelKHR' not found!`);
  glGetObjectPtrLabelKHR(a0,a1,a2,a3,);
}
__gshared glbfn_glGetPointervKHR glGetPointervKHR = function void (uint a0, void** a1) nothrow @nogc {
  glbfn_glGetPointervKHR_loader(a0,a1,);
};
private auto glbfn_glGetPointervKHR_loader (uint a0, void** a1) nothrow @nogc {
  glGetPointervKHR = cast(glbfn_glGetPointervKHR)glbindGetProcAddress(`glGetPointervKHR`);
  if (glGetPointervKHR is null) assert(0, `OpenGL function 'glGetPointervKHR' not found!`);
  glGetPointervKHR(a0,a1,);
}
__gshared glbfn_glGetGraphicsResetStatusKHR glGetGraphicsResetStatusKHR = function uint () nothrow @nogc {
  return glbfn_glGetGraphicsResetStatusKHR_loader();
};
private auto glbfn_glGetGraphicsResetStatusKHR_loader () nothrow @nogc {
  glGetGraphicsResetStatusKHR = cast(glbfn_glGetGraphicsResetStatusKHR)glbindGetProcAddress(`glGetGraphicsResetStatusKHR`);
  if (glGetGraphicsResetStatusKHR is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusKHR' not found!`);
  return glGetGraphicsResetStatusKHR();
}
__gshared glbfn_glReadnPixelsKHR glReadnPixelsKHR = function void (int a0, int a1, int a2, int a3, uint a4, uint a5, int a6, void* a7) nothrow @nogc {
  glbfn_glReadnPixelsKHR_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glReadnPixelsKHR_loader (int a0, int a1, int a2, int a3, uint a4, uint a5, int a6, void* a7) nothrow @nogc {
  glReadnPixelsKHR = cast(glbfn_glReadnPixelsKHR)glbindGetProcAddress(`glReadnPixelsKHR`);
  if (glReadnPixelsKHR is null) assert(0, `OpenGL function 'glReadnPixelsKHR' not found!`);
  glReadnPixelsKHR(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glGetnUniformfvKHR glGetnUniformfvKHR = function void (uint a0, int a1, int a2, float* a3) nothrow @nogc {
  glbfn_glGetnUniformfvKHR_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformfvKHR_loader (uint a0, int a1, int a2, float* a3) nothrow @nogc {
  glGetnUniformfvKHR = cast(glbfn_glGetnUniformfvKHR)glbindGetProcAddress(`glGetnUniformfvKHR`);
  if (glGetnUniformfvKHR is null) assert(0, `OpenGL function 'glGetnUniformfvKHR' not found!`);
  glGetnUniformfvKHR(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformivKHR glGetnUniformivKHR = function void (uint a0, int a1, int a2, int* a3) nothrow @nogc {
  glbfn_glGetnUniformivKHR_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformivKHR_loader (uint a0, int a1, int a2, int* a3) nothrow @nogc {
  glGetnUniformivKHR = cast(glbfn_glGetnUniformivKHR)glbindGetProcAddress(`glGetnUniformivKHR`);
  if (glGetnUniformivKHR is null) assert(0, `OpenGL function 'glGetnUniformivKHR' not found!`);
  glGetnUniformivKHR(a0,a1,a2,a3,);
}
__gshared glbfn_glGetnUniformuivKHR glGetnUniformuivKHR = function void (uint a0, int a1, int a2, uint* a3) nothrow @nogc {
  glbfn_glGetnUniformuivKHR_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetnUniformuivKHR_loader (uint a0, int a1, int a2, uint* a3) nothrow @nogc {
  glGetnUniformuivKHR = cast(glbfn_glGetnUniformuivKHR)glbindGetProcAddress(`glGetnUniformuivKHR`);
  if (glGetnUniformuivKHR is null) assert(0, `OpenGL function 'glGetnUniformuivKHR' not found!`);
  glGetnUniformuivKHR(a0,a1,a2,a3,);
}
__gshared glbfn_glResizeBuffersMESA glResizeBuffersMESA = function void () nothrow @nogc {
  glbfn_glResizeBuffersMESA_loader();
};
private auto glbfn_glResizeBuffersMESA_loader () nothrow @nogc {
  glResizeBuffersMESA = cast(glbfn_glResizeBuffersMESA)glbindGetProcAddress(`glResizeBuffersMESA`);
  if (glResizeBuffersMESA is null) assert(0, `OpenGL function 'glResizeBuffersMESA' not found!`);
  glResizeBuffersMESA();
}
__gshared glbfn_glWindowPos2dMESA glWindowPos2dMESA = function void (double a0, double a1) nothrow @nogc {
  glbfn_glWindowPos2dMESA_loader(a0,a1,);
};
private auto glbfn_glWindowPos2dMESA_loader (double a0, double a1) nothrow @nogc {
  glWindowPos2dMESA = cast(glbfn_glWindowPos2dMESA)glbindGetProcAddress(`glWindowPos2dMESA`);
  if (glWindowPos2dMESA is null) assert(0, `OpenGL function 'glWindowPos2dMESA' not found!`);
  glWindowPos2dMESA(a0,a1,);
}
__gshared glbfn_glWindowPos2dvMESA glWindowPos2dvMESA = function void (const(double)* a0) nothrow @nogc {
  glbfn_glWindowPos2dvMESA_loader(a0,);
};
private auto glbfn_glWindowPos2dvMESA_loader (const(double)* a0) nothrow @nogc {
  glWindowPos2dvMESA = cast(glbfn_glWindowPos2dvMESA)glbindGetProcAddress(`glWindowPos2dvMESA`);
  if (glWindowPos2dvMESA is null) assert(0, `OpenGL function 'glWindowPos2dvMESA' not found!`);
  glWindowPos2dvMESA(a0,);
}
__gshared glbfn_glWindowPos2fMESA glWindowPos2fMESA = function void (float a0, float a1) nothrow @nogc {
  glbfn_glWindowPos2fMESA_loader(a0,a1,);
};
private auto glbfn_glWindowPos2fMESA_loader (float a0, float a1) nothrow @nogc {
  glWindowPos2fMESA = cast(glbfn_glWindowPos2fMESA)glbindGetProcAddress(`glWindowPos2fMESA`);
  if (glWindowPos2fMESA is null) assert(0, `OpenGL function 'glWindowPos2fMESA' not found!`);
  glWindowPos2fMESA(a0,a1,);
}
__gshared glbfn_glWindowPos2fvMESA glWindowPos2fvMESA = function void (const(float)* a0) nothrow @nogc {
  glbfn_glWindowPos2fvMESA_loader(a0,);
};
private auto glbfn_glWindowPos2fvMESA_loader (const(float)* a0) nothrow @nogc {
  glWindowPos2fvMESA = cast(glbfn_glWindowPos2fvMESA)glbindGetProcAddress(`glWindowPos2fvMESA`);
  if (glWindowPos2fvMESA is null) assert(0, `OpenGL function 'glWindowPos2fvMESA' not found!`);
  glWindowPos2fvMESA(a0,);
}
__gshared glbfn_glWindowPos2iMESA glWindowPos2iMESA = function void (int a0, int a1) nothrow @nogc {
  glbfn_glWindowPos2iMESA_loader(a0,a1,);
};
private auto glbfn_glWindowPos2iMESA_loader (int a0, int a1) nothrow @nogc {
  glWindowPos2iMESA = cast(glbfn_glWindowPos2iMESA)glbindGetProcAddress(`glWindowPos2iMESA`);
  if (glWindowPos2iMESA is null) assert(0, `OpenGL function 'glWindowPos2iMESA' not found!`);
  glWindowPos2iMESA(a0,a1,);
}
__gshared glbfn_glWindowPos2ivMESA glWindowPos2ivMESA = function void (const(int)* a0) nothrow @nogc {
  glbfn_glWindowPos2ivMESA_loader(a0,);
};
private auto glbfn_glWindowPos2ivMESA_loader (const(int)* a0) nothrow @nogc {
  glWindowPos2ivMESA = cast(glbfn_glWindowPos2ivMESA)glbindGetProcAddress(`glWindowPos2ivMESA`);
  if (glWindowPos2ivMESA is null) assert(0, `OpenGL function 'glWindowPos2ivMESA' not found!`);
  glWindowPos2ivMESA(a0,);
}
__gshared glbfn_glWindowPos2sMESA glWindowPos2sMESA = function void (short a0, short a1) nothrow @nogc {
  glbfn_glWindowPos2sMESA_loader(a0,a1,);
};
private auto glbfn_glWindowPos2sMESA_loader (short a0, short a1) nothrow @nogc {
  glWindowPos2sMESA = cast(glbfn_glWindowPos2sMESA)glbindGetProcAddress(`glWindowPos2sMESA`);
  if (glWindowPos2sMESA is null) assert(0, `OpenGL function 'glWindowPos2sMESA' not found!`);
  glWindowPos2sMESA(a0,a1,);
}
__gshared glbfn_glWindowPos2svMESA glWindowPos2svMESA = function void (const(short)* a0) nothrow @nogc {
  glbfn_glWindowPos2svMESA_loader(a0,);
};
private auto glbfn_glWindowPos2svMESA_loader (const(short)* a0) nothrow @nogc {
  glWindowPos2svMESA = cast(glbfn_glWindowPos2svMESA)glbindGetProcAddress(`glWindowPos2svMESA`);
  if (glWindowPos2svMESA is null) assert(0, `OpenGL function 'glWindowPos2svMESA' not found!`);
  glWindowPos2svMESA(a0,);
}
__gshared glbfn_glWindowPos3dMESA glWindowPos3dMESA = function void (double a0, double a1, double a2) nothrow @nogc {
  glbfn_glWindowPos3dMESA_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3dMESA_loader (double a0, double a1, double a2) nothrow @nogc {
  glWindowPos3dMESA = cast(glbfn_glWindowPos3dMESA)glbindGetProcAddress(`glWindowPos3dMESA`);
  if (glWindowPos3dMESA is null) assert(0, `OpenGL function 'glWindowPos3dMESA' not found!`);
  glWindowPos3dMESA(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3dvMESA glWindowPos3dvMESA = function void (const(double)* a0) nothrow @nogc {
  glbfn_glWindowPos3dvMESA_loader(a0,);
};
private auto glbfn_glWindowPos3dvMESA_loader (const(double)* a0) nothrow @nogc {
  glWindowPos3dvMESA = cast(glbfn_glWindowPos3dvMESA)glbindGetProcAddress(`glWindowPos3dvMESA`);
  if (glWindowPos3dvMESA is null) assert(0, `OpenGL function 'glWindowPos3dvMESA' not found!`);
  glWindowPos3dvMESA(a0,);
}
__gshared glbfn_glWindowPos3fMESA glWindowPos3fMESA = function void (float a0, float a1, float a2) nothrow @nogc {
  glbfn_glWindowPos3fMESA_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3fMESA_loader (float a0, float a1, float a2) nothrow @nogc {
  glWindowPos3fMESA = cast(glbfn_glWindowPos3fMESA)glbindGetProcAddress(`glWindowPos3fMESA`);
  if (glWindowPos3fMESA is null) assert(0, `OpenGL function 'glWindowPos3fMESA' not found!`);
  glWindowPos3fMESA(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3fvMESA glWindowPos3fvMESA = function void (const(float)* a0) nothrow @nogc {
  glbfn_glWindowPos3fvMESA_loader(a0,);
};
private auto glbfn_glWindowPos3fvMESA_loader (const(float)* a0) nothrow @nogc {
  glWindowPos3fvMESA = cast(glbfn_glWindowPos3fvMESA)glbindGetProcAddress(`glWindowPos3fvMESA`);
  if (glWindowPos3fvMESA is null) assert(0, `OpenGL function 'glWindowPos3fvMESA' not found!`);
  glWindowPos3fvMESA(a0,);
}
__gshared glbfn_glWindowPos3iMESA glWindowPos3iMESA = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glWindowPos3iMESA_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3iMESA_loader (int a0, int a1, int a2) nothrow @nogc {
  glWindowPos3iMESA = cast(glbfn_glWindowPos3iMESA)glbindGetProcAddress(`glWindowPos3iMESA`);
  if (glWindowPos3iMESA is null) assert(0, `OpenGL function 'glWindowPos3iMESA' not found!`);
  glWindowPos3iMESA(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3ivMESA glWindowPos3ivMESA = function void (const(int)* a0) nothrow @nogc {
  glbfn_glWindowPos3ivMESA_loader(a0,);
};
private auto glbfn_glWindowPos3ivMESA_loader (const(int)* a0) nothrow @nogc {
  glWindowPos3ivMESA = cast(glbfn_glWindowPos3ivMESA)glbindGetProcAddress(`glWindowPos3ivMESA`);
  if (glWindowPos3ivMESA is null) assert(0, `OpenGL function 'glWindowPos3ivMESA' not found!`);
  glWindowPos3ivMESA(a0,);
}
__gshared glbfn_glWindowPos3sMESA glWindowPos3sMESA = function void (short a0, short a1, short a2) nothrow @nogc {
  glbfn_glWindowPos3sMESA_loader(a0,a1,a2,);
};
private auto glbfn_glWindowPos3sMESA_loader (short a0, short a1, short a2) nothrow @nogc {
  glWindowPos3sMESA = cast(glbfn_glWindowPos3sMESA)glbindGetProcAddress(`glWindowPos3sMESA`);
  if (glWindowPos3sMESA is null) assert(0, `OpenGL function 'glWindowPos3sMESA' not found!`);
  glWindowPos3sMESA(a0,a1,a2,);
}
__gshared glbfn_glWindowPos3svMESA glWindowPos3svMESA = function void (const(short)* a0) nothrow @nogc {
  glbfn_glWindowPos3svMESA_loader(a0,);
};
private auto glbfn_glWindowPos3svMESA_loader (const(short)* a0) nothrow @nogc {
  glWindowPos3svMESA = cast(glbfn_glWindowPos3svMESA)glbindGetProcAddress(`glWindowPos3svMESA`);
  if (glWindowPos3svMESA is null) assert(0, `OpenGL function 'glWindowPos3svMESA' not found!`);
  glWindowPos3svMESA(a0,);
}
__gshared glbfn_glWindowPos4dMESA glWindowPos4dMESA = function void (double a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glWindowPos4dMESA_loader(a0,a1,a2,a3,);
};
private auto glbfn_glWindowPos4dMESA_loader (double a0, double a1, double a2, double a3) nothrow @nogc {
  glWindowPos4dMESA = cast(glbfn_glWindowPos4dMESA)glbindGetProcAddress(`glWindowPos4dMESA`);
  if (glWindowPos4dMESA is null) assert(0, `OpenGL function 'glWindowPos4dMESA' not found!`);
  glWindowPos4dMESA(a0,a1,a2,a3,);
}
__gshared glbfn_glWindowPos4dvMESA glWindowPos4dvMESA = function void (const(double)* a0) nothrow @nogc {
  glbfn_glWindowPos4dvMESA_loader(a0,);
};
private auto glbfn_glWindowPos4dvMESA_loader (const(double)* a0) nothrow @nogc {
  glWindowPos4dvMESA = cast(glbfn_glWindowPos4dvMESA)glbindGetProcAddress(`glWindowPos4dvMESA`);
  if (glWindowPos4dvMESA is null) assert(0, `OpenGL function 'glWindowPos4dvMESA' not found!`);
  glWindowPos4dvMESA(a0,);
}
__gshared glbfn_glWindowPos4fMESA glWindowPos4fMESA = function void (float a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glWindowPos4fMESA_loader(a0,a1,a2,a3,);
};
private auto glbfn_glWindowPos4fMESA_loader (float a0, float a1, float a2, float a3) nothrow @nogc {
  glWindowPos4fMESA = cast(glbfn_glWindowPos4fMESA)glbindGetProcAddress(`glWindowPos4fMESA`);
  if (glWindowPos4fMESA is null) assert(0, `OpenGL function 'glWindowPos4fMESA' not found!`);
  glWindowPos4fMESA(a0,a1,a2,a3,);
}
__gshared glbfn_glWindowPos4fvMESA glWindowPos4fvMESA = function void (const(float)* a0) nothrow @nogc {
  glbfn_glWindowPos4fvMESA_loader(a0,);
};
private auto glbfn_glWindowPos4fvMESA_loader (const(float)* a0) nothrow @nogc {
  glWindowPos4fvMESA = cast(glbfn_glWindowPos4fvMESA)glbindGetProcAddress(`glWindowPos4fvMESA`);
  if (glWindowPos4fvMESA is null) assert(0, `OpenGL function 'glWindowPos4fvMESA' not found!`);
  glWindowPos4fvMESA(a0,);
}
__gshared glbfn_glWindowPos4iMESA glWindowPos4iMESA = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glWindowPos4iMESA_loader(a0,a1,a2,a3,);
};
private auto glbfn_glWindowPos4iMESA_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glWindowPos4iMESA = cast(glbfn_glWindowPos4iMESA)glbindGetProcAddress(`glWindowPos4iMESA`);
  if (glWindowPos4iMESA is null) assert(0, `OpenGL function 'glWindowPos4iMESA' not found!`);
  glWindowPos4iMESA(a0,a1,a2,a3,);
}
__gshared glbfn_glWindowPos4ivMESA glWindowPos4ivMESA = function void (const(int)* a0) nothrow @nogc {
  glbfn_glWindowPos4ivMESA_loader(a0,);
};
private auto glbfn_glWindowPos4ivMESA_loader (const(int)* a0) nothrow @nogc {
  glWindowPos4ivMESA = cast(glbfn_glWindowPos4ivMESA)glbindGetProcAddress(`glWindowPos4ivMESA`);
  if (glWindowPos4ivMESA is null) assert(0, `OpenGL function 'glWindowPos4ivMESA' not found!`);
  glWindowPos4ivMESA(a0,);
}
__gshared glbfn_glWindowPos4sMESA glWindowPos4sMESA = function void (short a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glWindowPos4sMESA_loader(a0,a1,a2,a3,);
};
private auto glbfn_glWindowPos4sMESA_loader (short a0, short a1, short a2, short a3) nothrow @nogc {
  glWindowPos4sMESA = cast(glbfn_glWindowPos4sMESA)glbindGetProcAddress(`glWindowPos4sMESA`);
  if (glWindowPos4sMESA is null) assert(0, `OpenGL function 'glWindowPos4sMESA' not found!`);
  glWindowPos4sMESA(a0,a1,a2,a3,);
}
__gshared glbfn_glWindowPos4svMESA glWindowPos4svMESA = function void (const(short)* a0) nothrow @nogc {
  glbfn_glWindowPos4svMESA_loader(a0,);
};
private auto glbfn_glWindowPos4svMESA_loader (const(short)* a0) nothrow @nogc {
  glWindowPos4svMESA = cast(glbfn_glWindowPos4svMESA)glbindGetProcAddress(`glWindowPos4svMESA`);
  if (glWindowPos4svMESA is null) assert(0, `OpenGL function 'glWindowPos4svMESA' not found!`);
  glWindowPos4svMESA(a0,);
}
__gshared glbfn_glBeginConditionalRenderNVX glBeginConditionalRenderNVX = function void (uint a0) nothrow @nogc {
  glbfn_glBeginConditionalRenderNVX_loader(a0,);
};
private auto glbfn_glBeginConditionalRenderNVX_loader (uint a0) nothrow @nogc {
  glBeginConditionalRenderNVX = cast(glbfn_glBeginConditionalRenderNVX)glbindGetProcAddress(`glBeginConditionalRenderNVX`);
  if (glBeginConditionalRenderNVX is null) assert(0, `OpenGL function 'glBeginConditionalRenderNVX' not found!`);
  glBeginConditionalRenderNVX(a0,);
}
__gshared glbfn_glEndConditionalRenderNVX glEndConditionalRenderNVX = function void () nothrow @nogc {
  glbfn_glEndConditionalRenderNVX_loader();
};
private auto glbfn_glEndConditionalRenderNVX_loader () nothrow @nogc {
  glEndConditionalRenderNVX = cast(glbfn_glEndConditionalRenderNVX)glbindGetProcAddress(`glEndConditionalRenderNVX`);
  if (glEndConditionalRenderNVX is null) assert(0, `OpenGL function 'glEndConditionalRenderNVX' not found!`);
  glEndConditionalRenderNVX();
}
__gshared glbfn_glMultiDrawArraysIndirectBindlessNV glMultiDrawArraysIndirectBindlessNV = function void (uint a0, const(void)* a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiDrawArraysIndirectBindlessNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiDrawArraysIndirectBindlessNV_loader (uint a0, const(void)* a1, int a2, int a3, int a4) nothrow @nogc {
  glMultiDrawArraysIndirectBindlessNV = cast(glbfn_glMultiDrawArraysIndirectBindlessNV)glbindGetProcAddress(`glMultiDrawArraysIndirectBindlessNV`);
  if (glMultiDrawArraysIndirectBindlessNV is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessNV' not found!`);
  glMultiDrawArraysIndirectBindlessNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiDrawElementsIndirectBindlessNV glMultiDrawElementsIndirectBindlessNV = function void (uint a0, uint a1, const(void)* a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glMultiDrawElementsIndirectBindlessNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMultiDrawElementsIndirectBindlessNV_loader (uint a0, uint a1, const(void)* a2, int a3, int a4, int a5) nothrow @nogc {
  glMultiDrawElementsIndirectBindlessNV = cast(glbfn_glMultiDrawElementsIndirectBindlessNV)glbindGetProcAddress(`glMultiDrawElementsIndirectBindlessNV`);
  if (glMultiDrawElementsIndirectBindlessNV is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessNV' not found!`);
  glMultiDrawElementsIndirectBindlessNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glMultiDrawArraysIndirectBindlessCountNV glMultiDrawArraysIndirectBindlessCountNV = function void (uint a0, const(void)* a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glMultiDrawArraysIndirectBindlessCountNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMultiDrawArraysIndirectBindlessCountNV_loader (uint a0, const(void)* a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glMultiDrawArraysIndirectBindlessCountNV = cast(glbfn_glMultiDrawArraysIndirectBindlessCountNV)glbindGetProcAddress(`glMultiDrawArraysIndirectBindlessCountNV`);
  if (glMultiDrawArraysIndirectBindlessCountNV is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessCountNV' not found!`);
  glMultiDrawArraysIndirectBindlessCountNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glMultiDrawElementsIndirectBindlessCountNV glMultiDrawElementsIndirectBindlessCountNV = function void (uint a0, uint a1, const(void)* a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glbfn_glMultiDrawElementsIndirectBindlessCountNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glMultiDrawElementsIndirectBindlessCountNV_loader (uint a0, uint a1, const(void)* a2, int a3, int a4, int a5, int a6) nothrow @nogc {
  glMultiDrawElementsIndirectBindlessCountNV = cast(glbfn_glMultiDrawElementsIndirectBindlessCountNV)glbindGetProcAddress(`glMultiDrawElementsIndirectBindlessCountNV`);
  if (glMultiDrawElementsIndirectBindlessCountNV is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessCountNV' not found!`);
  glMultiDrawElementsIndirectBindlessCountNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetTextureHandleNV glGetTextureHandleNV = function ulong (uint a0) nothrow @nogc {
  return glbfn_glGetTextureHandleNV_loader(a0,);
};
private auto glbfn_glGetTextureHandleNV_loader (uint a0) nothrow @nogc {
  glGetTextureHandleNV = cast(glbfn_glGetTextureHandleNV)glbindGetProcAddress(`glGetTextureHandleNV`);
  if (glGetTextureHandleNV is null) assert(0, `OpenGL function 'glGetTextureHandleNV' not found!`);
  return glGetTextureHandleNV(a0,);
}
__gshared glbfn_glGetTextureSamplerHandleNV glGetTextureSamplerHandleNV = function ulong (uint a0, uint a1) nothrow @nogc {
  return glbfn_glGetTextureSamplerHandleNV_loader(a0,a1,);
};
private auto glbfn_glGetTextureSamplerHandleNV_loader (uint a0, uint a1) nothrow @nogc {
  glGetTextureSamplerHandleNV = cast(glbfn_glGetTextureSamplerHandleNV)glbindGetProcAddress(`glGetTextureSamplerHandleNV`);
  if (glGetTextureSamplerHandleNV is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleNV' not found!`);
  return glGetTextureSamplerHandleNV(a0,a1,);
}
__gshared glbfn_glMakeTextureHandleResidentNV glMakeTextureHandleResidentNV = function void (ulong a0) nothrow @nogc {
  glbfn_glMakeTextureHandleResidentNV_loader(a0,);
};
private auto glbfn_glMakeTextureHandleResidentNV_loader (ulong a0) nothrow @nogc {
  glMakeTextureHandleResidentNV = cast(glbfn_glMakeTextureHandleResidentNV)glbindGetProcAddress(`glMakeTextureHandleResidentNV`);
  if (glMakeTextureHandleResidentNV is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentNV' not found!`);
  glMakeTextureHandleResidentNV(a0,);
}
__gshared glbfn_glMakeTextureHandleNonResidentNV glMakeTextureHandleNonResidentNV = function void (ulong a0) nothrow @nogc {
  glbfn_glMakeTextureHandleNonResidentNV_loader(a0,);
};
private auto glbfn_glMakeTextureHandleNonResidentNV_loader (ulong a0) nothrow @nogc {
  glMakeTextureHandleNonResidentNV = cast(glbfn_glMakeTextureHandleNonResidentNV)glbindGetProcAddress(`glMakeTextureHandleNonResidentNV`);
  if (glMakeTextureHandleNonResidentNV is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentNV' not found!`);
  glMakeTextureHandleNonResidentNV(a0,);
}
__gshared glbfn_glGetImageHandleNV glGetImageHandleNV = function ulong (uint a0, int a1, ubyte a2, int a3, uint a4) nothrow @nogc {
  return glbfn_glGetImageHandleNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetImageHandleNV_loader (uint a0, int a1, ubyte a2, int a3, uint a4) nothrow @nogc {
  glGetImageHandleNV = cast(glbfn_glGetImageHandleNV)glbindGetProcAddress(`glGetImageHandleNV`);
  if (glGetImageHandleNV is null) assert(0, `OpenGL function 'glGetImageHandleNV' not found!`);
  return glGetImageHandleNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMakeImageHandleResidentNV glMakeImageHandleResidentNV = function void (ulong a0, uint a1) nothrow @nogc {
  glbfn_glMakeImageHandleResidentNV_loader(a0,a1,);
};
private auto glbfn_glMakeImageHandleResidentNV_loader (ulong a0, uint a1) nothrow @nogc {
  glMakeImageHandleResidentNV = cast(glbfn_glMakeImageHandleResidentNV)glbindGetProcAddress(`glMakeImageHandleResidentNV`);
  if (glMakeImageHandleResidentNV is null) assert(0, `OpenGL function 'glMakeImageHandleResidentNV' not found!`);
  glMakeImageHandleResidentNV(a0,a1,);
}
__gshared glbfn_glMakeImageHandleNonResidentNV glMakeImageHandleNonResidentNV = function void (ulong a0) nothrow @nogc {
  glbfn_glMakeImageHandleNonResidentNV_loader(a0,);
};
private auto glbfn_glMakeImageHandleNonResidentNV_loader (ulong a0) nothrow @nogc {
  glMakeImageHandleNonResidentNV = cast(glbfn_glMakeImageHandleNonResidentNV)glbindGetProcAddress(`glMakeImageHandleNonResidentNV`);
  if (glMakeImageHandleNonResidentNV is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentNV' not found!`);
  glMakeImageHandleNonResidentNV(a0,);
}
__gshared glbfn_glUniformHandleui64NV glUniformHandleui64NV = function void (int a0, ulong a1) nothrow @nogc {
  glbfn_glUniformHandleui64NV_loader(a0,a1,);
};
private auto glbfn_glUniformHandleui64NV_loader (int a0, ulong a1) nothrow @nogc {
  glUniformHandleui64NV = cast(glbfn_glUniformHandleui64NV)glbindGetProcAddress(`glUniformHandleui64NV`);
  if (glUniformHandleui64NV is null) assert(0, `OpenGL function 'glUniformHandleui64NV' not found!`);
  glUniformHandleui64NV(a0,a1,);
}
__gshared glbfn_glUniformHandleui64vNV glUniformHandleui64vNV = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniformHandleui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniformHandleui64vNV_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniformHandleui64vNV = cast(glbfn_glUniformHandleui64vNV)glbindGetProcAddress(`glUniformHandleui64vNV`);
  if (glUniformHandleui64vNV is null) assert(0, `OpenGL function 'glUniformHandleui64vNV' not found!`);
  glUniformHandleui64vNV(a0,a1,a2,);
}
__gshared glbfn_glProgramUniformHandleui64NV glProgramUniformHandleui64NV = function void (uint a0, int a1, ulong a2) nothrow @nogc {
  glbfn_glProgramUniformHandleui64NV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniformHandleui64NV_loader (uint a0, int a1, ulong a2) nothrow @nogc {
  glProgramUniformHandleui64NV = cast(glbfn_glProgramUniformHandleui64NV)glbindGetProcAddress(`glProgramUniformHandleui64NV`);
  if (glProgramUniformHandleui64NV is null) assert(0, `OpenGL function 'glProgramUniformHandleui64NV' not found!`);
  glProgramUniformHandleui64NV(a0,a1,a2,);
}
__gshared glbfn_glProgramUniformHandleui64vNV glProgramUniformHandleui64vNV = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniformHandleui64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniformHandleui64vNV_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniformHandleui64vNV = cast(glbfn_glProgramUniformHandleui64vNV)glbindGetProcAddress(`glProgramUniformHandleui64vNV`);
  if (glProgramUniformHandleui64vNV is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vNV' not found!`);
  glProgramUniformHandleui64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glIsTextureHandleResidentNV glIsTextureHandleResidentNV = function ubyte (ulong a0) nothrow @nogc {
  return glbfn_glIsTextureHandleResidentNV_loader(a0,);
};
private auto glbfn_glIsTextureHandleResidentNV_loader (ulong a0) nothrow @nogc {
  glIsTextureHandleResidentNV = cast(glbfn_glIsTextureHandleResidentNV)glbindGetProcAddress(`glIsTextureHandleResidentNV`);
  if (glIsTextureHandleResidentNV is null) assert(0, `OpenGL function 'glIsTextureHandleResidentNV' not found!`);
  return glIsTextureHandleResidentNV(a0,);
}
__gshared glbfn_glIsImageHandleResidentNV glIsImageHandleResidentNV = function ubyte (ulong a0) nothrow @nogc {
  return glbfn_glIsImageHandleResidentNV_loader(a0,);
};
private auto glbfn_glIsImageHandleResidentNV_loader (ulong a0) nothrow @nogc {
  glIsImageHandleResidentNV = cast(glbfn_glIsImageHandleResidentNV)glbindGetProcAddress(`glIsImageHandleResidentNV`);
  if (glIsImageHandleResidentNV is null) assert(0, `OpenGL function 'glIsImageHandleResidentNV' not found!`);
  return glIsImageHandleResidentNV(a0,);
}
__gshared glbfn_glBlendParameteriNV glBlendParameteriNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glBlendParameteriNV_loader(a0,a1,);
};
private auto glbfn_glBlendParameteriNV_loader (uint a0, int a1) nothrow @nogc {
  glBlendParameteriNV = cast(glbfn_glBlendParameteriNV)glbindGetProcAddress(`glBlendParameteriNV`);
  if (glBlendParameteriNV is null) assert(0, `OpenGL function 'glBlendParameteriNV' not found!`);
  glBlendParameteriNV(a0,a1,);
}
__gshared glbfn_glBlendBarrierNV glBlendBarrierNV = function void () nothrow @nogc {
  glbfn_glBlendBarrierNV_loader();
};
private auto glbfn_glBlendBarrierNV_loader () nothrow @nogc {
  glBlendBarrierNV = cast(glbfn_glBlendBarrierNV)glbindGetProcAddress(`glBlendBarrierNV`);
  if (glBlendBarrierNV is null) assert(0, `OpenGL function 'glBlendBarrierNV' not found!`);
  glBlendBarrierNV();
}
__gshared glbfn_glCreateStatesNV glCreateStatesNV = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateStatesNV_loader(a0,a1,);
};
private auto glbfn_glCreateStatesNV_loader (int a0, uint* a1) nothrow @nogc {
  glCreateStatesNV = cast(glbfn_glCreateStatesNV)glbindGetProcAddress(`glCreateStatesNV`);
  if (glCreateStatesNV is null) assert(0, `OpenGL function 'glCreateStatesNV' not found!`);
  glCreateStatesNV(a0,a1,);
}
__gshared glbfn_glDeleteStatesNV glDeleteStatesNV = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteStatesNV_loader(a0,a1,);
};
private auto glbfn_glDeleteStatesNV_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteStatesNV = cast(glbfn_glDeleteStatesNV)glbindGetProcAddress(`glDeleteStatesNV`);
  if (glDeleteStatesNV is null) assert(0, `OpenGL function 'glDeleteStatesNV' not found!`);
  glDeleteStatesNV(a0,a1,);
}
__gshared glbfn_glIsStateNV glIsStateNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsStateNV_loader(a0,);
};
private auto glbfn_glIsStateNV_loader (uint a0) nothrow @nogc {
  glIsStateNV = cast(glbfn_glIsStateNV)glbindGetProcAddress(`glIsStateNV`);
  if (glIsStateNV is null) assert(0, `OpenGL function 'glIsStateNV' not found!`);
  return glIsStateNV(a0,);
}
__gshared glbfn_glStateCaptureNV glStateCaptureNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glStateCaptureNV_loader(a0,a1,);
};
private auto glbfn_glStateCaptureNV_loader (uint a0, uint a1) nothrow @nogc {
  glStateCaptureNV = cast(glbfn_glStateCaptureNV)glbindGetProcAddress(`glStateCaptureNV`);
  if (glStateCaptureNV is null) assert(0, `OpenGL function 'glStateCaptureNV' not found!`);
  glStateCaptureNV(a0,a1,);
}
__gshared glbfn_glGetCommandHeaderNV glGetCommandHeaderNV = function uint (uint a0, uint a1) nothrow @nogc {
  return glbfn_glGetCommandHeaderNV_loader(a0,a1,);
};
private auto glbfn_glGetCommandHeaderNV_loader (uint a0, uint a1) nothrow @nogc {
  glGetCommandHeaderNV = cast(glbfn_glGetCommandHeaderNV)glbindGetProcAddress(`glGetCommandHeaderNV`);
  if (glGetCommandHeaderNV is null) assert(0, `OpenGL function 'glGetCommandHeaderNV' not found!`);
  return glGetCommandHeaderNV(a0,a1,);
}
__gshared glbfn_glGetStageIndexNV glGetStageIndexNV = function ushort (uint a0) nothrow @nogc {
  return glbfn_glGetStageIndexNV_loader(a0,);
};
private auto glbfn_glGetStageIndexNV_loader (uint a0) nothrow @nogc {
  glGetStageIndexNV = cast(glbfn_glGetStageIndexNV)glbindGetProcAddress(`glGetStageIndexNV`);
  if (glGetStageIndexNV is null) assert(0, `OpenGL function 'glGetStageIndexNV' not found!`);
  return glGetStageIndexNV(a0,);
}
__gshared glbfn_glDrawCommandsNV glDrawCommandsNV = function void (uint a0, uint a1, const(int)* a2, const(int)* a3, uint a4) nothrow @nogc {
  glbfn_glDrawCommandsNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawCommandsNV_loader (uint a0, uint a1, const(int)* a2, const(int)* a3, uint a4) nothrow @nogc {
  glDrawCommandsNV = cast(glbfn_glDrawCommandsNV)glbindGetProcAddress(`glDrawCommandsNV`);
  if (glDrawCommandsNV is null) assert(0, `OpenGL function 'glDrawCommandsNV' not found!`);
  glDrawCommandsNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glDrawCommandsAddressNV glDrawCommandsAddressNV = function void (uint a0, const(ulong)* a1, const(int)* a2, uint a3) nothrow @nogc {
  glbfn_glDrawCommandsAddressNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawCommandsAddressNV_loader (uint a0, const(ulong)* a1, const(int)* a2, uint a3) nothrow @nogc {
  glDrawCommandsAddressNV = cast(glbfn_glDrawCommandsAddressNV)glbindGetProcAddress(`glDrawCommandsAddressNV`);
  if (glDrawCommandsAddressNV is null) assert(0, `OpenGL function 'glDrawCommandsAddressNV' not found!`);
  glDrawCommandsAddressNV(a0,a1,a2,a3,);
}
__gshared glbfn_glDrawCommandsStatesNV glDrawCommandsStatesNV = function void (uint a0, const(int)* a1, const(int)* a2, const(uint)* a3, const(uint)* a4, uint a5) nothrow @nogc {
  glbfn_glDrawCommandsStatesNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glDrawCommandsStatesNV_loader (uint a0, const(int)* a1, const(int)* a2, const(uint)* a3, const(uint)* a4, uint a5) nothrow @nogc {
  glDrawCommandsStatesNV = cast(glbfn_glDrawCommandsStatesNV)glbindGetProcAddress(`glDrawCommandsStatesNV`);
  if (glDrawCommandsStatesNV is null) assert(0, `OpenGL function 'glDrawCommandsStatesNV' not found!`);
  glDrawCommandsStatesNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glDrawCommandsStatesAddressNV glDrawCommandsStatesAddressNV = function void (const(ulong)* a0, const(int)* a1, const(uint)* a2, const(uint)* a3, uint a4) nothrow @nogc {
  glbfn_glDrawCommandsStatesAddressNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glDrawCommandsStatesAddressNV_loader (const(ulong)* a0, const(int)* a1, const(uint)* a2, const(uint)* a3, uint a4) nothrow @nogc {
  glDrawCommandsStatesAddressNV = cast(glbfn_glDrawCommandsStatesAddressNV)glbindGetProcAddress(`glDrawCommandsStatesAddressNV`);
  if (glDrawCommandsStatesAddressNV is null) assert(0, `OpenGL function 'glDrawCommandsStatesAddressNV' not found!`);
  glDrawCommandsStatesAddressNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glCreateCommandListsNV glCreateCommandListsNV = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glCreateCommandListsNV_loader(a0,a1,);
};
private auto glbfn_glCreateCommandListsNV_loader (int a0, uint* a1) nothrow @nogc {
  glCreateCommandListsNV = cast(glbfn_glCreateCommandListsNV)glbindGetProcAddress(`glCreateCommandListsNV`);
  if (glCreateCommandListsNV is null) assert(0, `OpenGL function 'glCreateCommandListsNV' not found!`);
  glCreateCommandListsNV(a0,a1,);
}
__gshared glbfn_glDeleteCommandListsNV glDeleteCommandListsNV = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteCommandListsNV_loader(a0,a1,);
};
private auto glbfn_glDeleteCommandListsNV_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteCommandListsNV = cast(glbfn_glDeleteCommandListsNV)glbindGetProcAddress(`glDeleteCommandListsNV`);
  if (glDeleteCommandListsNV is null) assert(0, `OpenGL function 'glDeleteCommandListsNV' not found!`);
  glDeleteCommandListsNV(a0,a1,);
}
__gshared glbfn_glIsCommandListNV glIsCommandListNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsCommandListNV_loader(a0,);
};
private auto glbfn_glIsCommandListNV_loader (uint a0) nothrow @nogc {
  glIsCommandListNV = cast(glbfn_glIsCommandListNV)glbindGetProcAddress(`glIsCommandListNV`);
  if (glIsCommandListNV is null) assert(0, `OpenGL function 'glIsCommandListNV' not found!`);
  return glIsCommandListNV(a0,);
}
__gshared glbfn_glListDrawCommandsStatesClientNV glListDrawCommandsStatesClientNV = function void (uint a0, uint a1, const(void*)* a2, const(int)* a3, const(uint)* a4, const(uint)* a5, uint a6) nothrow @nogc {
  glbfn_glListDrawCommandsStatesClientNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glListDrawCommandsStatesClientNV_loader (uint a0, uint a1, const(void*)* a2, const(int)* a3, const(uint)* a4, const(uint)* a5, uint a6) nothrow @nogc {
  glListDrawCommandsStatesClientNV = cast(glbfn_glListDrawCommandsStatesClientNV)glbindGetProcAddress(`glListDrawCommandsStatesClientNV`);
  if (glListDrawCommandsStatesClientNV is null) assert(0, `OpenGL function 'glListDrawCommandsStatesClientNV' not found!`);
  glListDrawCommandsStatesClientNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCommandListSegmentsNV glCommandListSegmentsNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glCommandListSegmentsNV_loader(a0,a1,);
};
private auto glbfn_glCommandListSegmentsNV_loader (uint a0, uint a1) nothrow @nogc {
  glCommandListSegmentsNV = cast(glbfn_glCommandListSegmentsNV)glbindGetProcAddress(`glCommandListSegmentsNV`);
  if (glCommandListSegmentsNV is null) assert(0, `OpenGL function 'glCommandListSegmentsNV' not found!`);
  glCommandListSegmentsNV(a0,a1,);
}
__gshared glbfn_glCompileCommandListNV glCompileCommandListNV = function void (uint a0) nothrow @nogc {
  glbfn_glCompileCommandListNV_loader(a0,);
};
private auto glbfn_glCompileCommandListNV_loader (uint a0) nothrow @nogc {
  glCompileCommandListNV = cast(glbfn_glCompileCommandListNV)glbindGetProcAddress(`glCompileCommandListNV`);
  if (glCompileCommandListNV is null) assert(0, `OpenGL function 'glCompileCommandListNV' not found!`);
  glCompileCommandListNV(a0,);
}
__gshared glbfn_glCallCommandListNV glCallCommandListNV = function void (uint a0) nothrow @nogc {
  glbfn_glCallCommandListNV_loader(a0,);
};
private auto glbfn_glCallCommandListNV_loader (uint a0) nothrow @nogc {
  glCallCommandListNV = cast(glbfn_glCallCommandListNV)glbindGetProcAddress(`glCallCommandListNV`);
  if (glCallCommandListNV is null) assert(0, `OpenGL function 'glCallCommandListNV' not found!`);
  glCallCommandListNV(a0,);
}
__gshared glbfn_glBeginConditionalRenderNV glBeginConditionalRenderNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBeginConditionalRenderNV_loader(a0,a1,);
};
private auto glbfn_glBeginConditionalRenderNV_loader (uint a0, uint a1) nothrow @nogc {
  glBeginConditionalRenderNV = cast(glbfn_glBeginConditionalRenderNV)glbindGetProcAddress(`glBeginConditionalRenderNV`);
  if (glBeginConditionalRenderNV is null) assert(0, `OpenGL function 'glBeginConditionalRenderNV' not found!`);
  glBeginConditionalRenderNV(a0,a1,);
}
__gshared glbfn_glEndConditionalRenderNV glEndConditionalRenderNV = function void () nothrow @nogc {
  glbfn_glEndConditionalRenderNV_loader();
};
private auto glbfn_glEndConditionalRenderNV_loader () nothrow @nogc {
  glEndConditionalRenderNV = cast(glbfn_glEndConditionalRenderNV)glbindGetProcAddress(`glEndConditionalRenderNV`);
  if (glEndConditionalRenderNV is null) assert(0, `OpenGL function 'glEndConditionalRenderNV' not found!`);
  glEndConditionalRenderNV();
}
__gshared glbfn_glSubpixelPrecisionBiasNV glSubpixelPrecisionBiasNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glSubpixelPrecisionBiasNV_loader(a0,a1,);
};
private auto glbfn_glSubpixelPrecisionBiasNV_loader (uint a0, uint a1) nothrow @nogc {
  glSubpixelPrecisionBiasNV = cast(glbfn_glSubpixelPrecisionBiasNV)glbindGetProcAddress(`glSubpixelPrecisionBiasNV`);
  if (glSubpixelPrecisionBiasNV is null) assert(0, `OpenGL function 'glSubpixelPrecisionBiasNV' not found!`);
  glSubpixelPrecisionBiasNV(a0,a1,);
}
__gshared glbfn_glConservativeRasterParameterfNV glConservativeRasterParameterfNV = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glConservativeRasterParameterfNV_loader(a0,a1,);
};
private auto glbfn_glConservativeRasterParameterfNV_loader (uint a0, float a1) nothrow @nogc {
  glConservativeRasterParameterfNV = cast(glbfn_glConservativeRasterParameterfNV)glbindGetProcAddress(`glConservativeRasterParameterfNV`);
  if (glConservativeRasterParameterfNV is null) assert(0, `OpenGL function 'glConservativeRasterParameterfNV' not found!`);
  glConservativeRasterParameterfNV(a0,a1,);
}
__gshared glbfn_glCopyImageSubDataNV glCopyImageSubDataNV = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14) nothrow @nogc {
  glbfn_glCopyImageSubDataNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
};
private auto glbfn_glCopyImageSubDataNV_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, uint a6, uint a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14) nothrow @nogc {
  glCopyImageSubDataNV = cast(glbfn_glCopyImageSubDataNV)glbindGetProcAddress(`glCopyImageSubDataNV`);
  if (glCopyImageSubDataNV is null) assert(0, `OpenGL function 'glCopyImageSubDataNV' not found!`);
  glCopyImageSubDataNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
}
__gshared glbfn_glDepthRangedNV glDepthRangedNV = function void (double a0, double a1) nothrow @nogc {
  glbfn_glDepthRangedNV_loader(a0,a1,);
};
private auto glbfn_glDepthRangedNV_loader (double a0, double a1) nothrow @nogc {
  glDepthRangedNV = cast(glbfn_glDepthRangedNV)glbindGetProcAddress(`glDepthRangedNV`);
  if (glDepthRangedNV is null) assert(0, `OpenGL function 'glDepthRangedNV' not found!`);
  glDepthRangedNV(a0,a1,);
}
__gshared glbfn_glClearDepthdNV glClearDepthdNV = function void (double a0) nothrow @nogc {
  glbfn_glClearDepthdNV_loader(a0,);
};
private auto glbfn_glClearDepthdNV_loader (double a0) nothrow @nogc {
  glClearDepthdNV = cast(glbfn_glClearDepthdNV)glbindGetProcAddress(`glClearDepthdNV`);
  if (glClearDepthdNV is null) assert(0, `OpenGL function 'glClearDepthdNV' not found!`);
  glClearDepthdNV(a0,);
}
__gshared glbfn_glDepthBoundsdNV glDepthBoundsdNV = function void (double a0, double a1) nothrow @nogc {
  glbfn_glDepthBoundsdNV_loader(a0,a1,);
};
private auto glbfn_glDepthBoundsdNV_loader (double a0, double a1) nothrow @nogc {
  glDepthBoundsdNV = cast(glbfn_glDepthBoundsdNV)glbindGetProcAddress(`glDepthBoundsdNV`);
  if (glDepthBoundsdNV is null) assert(0, `OpenGL function 'glDepthBoundsdNV' not found!`);
  glDepthBoundsdNV(a0,a1,);
}
__gshared glbfn_glDrawTextureNV glDrawTextureNV = function void (uint a0, uint a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10) nothrow @nogc {
  glbfn_glDrawTextureNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glDrawTextureNV_loader (uint a0, uint a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10) nothrow @nogc {
  glDrawTextureNV = cast(glbfn_glDrawTextureNV)glbindGetProcAddress(`glDrawTextureNV`);
  if (glDrawTextureNV is null) assert(0, `OpenGL function 'glDrawTextureNV' not found!`);
  glDrawTextureNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glMapControlPointsNV glMapControlPointsNV = function void (uint a0, uint a1, uint a2, int a3, int a4, int a5, int a6, ubyte a7, const(void)* a8) nothrow @nogc {
  glbfn_glMapControlPointsNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glMapControlPointsNV_loader (uint a0, uint a1, uint a2, int a3, int a4, int a5, int a6, ubyte a7, const(void)* a8) nothrow @nogc {
  glMapControlPointsNV = cast(glbfn_glMapControlPointsNV)glbindGetProcAddress(`glMapControlPointsNV`);
  if (glMapControlPointsNV is null) assert(0, `OpenGL function 'glMapControlPointsNV' not found!`);
  glMapControlPointsNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glMapParameterivNV glMapParameterivNV = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glMapParameterivNV_loader(a0,a1,a2,);
};
private auto glbfn_glMapParameterivNV_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glMapParameterivNV = cast(glbfn_glMapParameterivNV)glbindGetProcAddress(`glMapParameterivNV`);
  if (glMapParameterivNV is null) assert(0, `OpenGL function 'glMapParameterivNV' not found!`);
  glMapParameterivNV(a0,a1,a2,);
}
__gshared glbfn_glMapParameterfvNV glMapParameterfvNV = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glMapParameterfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glMapParameterfvNV_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glMapParameterfvNV = cast(glbfn_glMapParameterfvNV)glbindGetProcAddress(`glMapParameterfvNV`);
  if (glMapParameterfvNV is null) assert(0, `OpenGL function 'glMapParameterfvNV' not found!`);
  glMapParameterfvNV(a0,a1,a2,);
}
__gshared glbfn_glGetMapControlPointsNV glGetMapControlPointsNV = function void (uint a0, uint a1, uint a2, int a3, int a4, ubyte a5, void* a6) nothrow @nogc {
  glbfn_glGetMapControlPointsNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetMapControlPointsNV_loader (uint a0, uint a1, uint a2, int a3, int a4, ubyte a5, void* a6) nothrow @nogc {
  glGetMapControlPointsNV = cast(glbfn_glGetMapControlPointsNV)glbindGetProcAddress(`glGetMapControlPointsNV`);
  if (glGetMapControlPointsNV is null) assert(0, `OpenGL function 'glGetMapControlPointsNV' not found!`);
  glGetMapControlPointsNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetMapParameterivNV glGetMapParameterivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetMapParameterivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetMapParameterivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetMapParameterivNV = cast(glbfn_glGetMapParameterivNV)glbindGetProcAddress(`glGetMapParameterivNV`);
  if (glGetMapParameterivNV is null) assert(0, `OpenGL function 'glGetMapParameterivNV' not found!`);
  glGetMapParameterivNV(a0,a1,a2,);
}
__gshared glbfn_glGetMapParameterfvNV glGetMapParameterfvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetMapParameterfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetMapParameterfvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetMapParameterfvNV = cast(glbfn_glGetMapParameterfvNV)glbindGetProcAddress(`glGetMapParameterfvNV`);
  if (glGetMapParameterfvNV is null) assert(0, `OpenGL function 'glGetMapParameterfvNV' not found!`);
  glGetMapParameterfvNV(a0,a1,a2,);
}
__gshared glbfn_glGetMapAttribParameterivNV glGetMapAttribParameterivNV = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetMapAttribParameterivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMapAttribParameterivNV_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetMapAttribParameterivNV = cast(glbfn_glGetMapAttribParameterivNV)glbindGetProcAddress(`glGetMapAttribParameterivNV`);
  if (glGetMapAttribParameterivNV is null) assert(0, `OpenGL function 'glGetMapAttribParameterivNV' not found!`);
  glGetMapAttribParameterivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetMapAttribParameterfvNV glGetMapAttribParameterfvNV = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetMapAttribParameterfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetMapAttribParameterfvNV_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetMapAttribParameterfvNV = cast(glbfn_glGetMapAttribParameterfvNV)glbindGetProcAddress(`glGetMapAttribParameterfvNV`);
  if (glGetMapAttribParameterfvNV is null) assert(0, `OpenGL function 'glGetMapAttribParameterfvNV' not found!`);
  glGetMapAttribParameterfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glEvalMapsNV glEvalMapsNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glEvalMapsNV_loader(a0,a1,);
};
private auto glbfn_glEvalMapsNV_loader (uint a0, uint a1) nothrow @nogc {
  glEvalMapsNV = cast(glbfn_glEvalMapsNV)glbindGetProcAddress(`glEvalMapsNV`);
  if (glEvalMapsNV is null) assert(0, `OpenGL function 'glEvalMapsNV' not found!`);
  glEvalMapsNV(a0,a1,);
}
__gshared glbfn_glGetMultisamplefvNV glGetMultisamplefvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetMultisamplefvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetMultisamplefvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetMultisamplefvNV = cast(glbfn_glGetMultisamplefvNV)glbindGetProcAddress(`glGetMultisamplefvNV`);
  if (glGetMultisamplefvNV is null) assert(0, `OpenGL function 'glGetMultisamplefvNV' not found!`);
  glGetMultisamplefvNV(a0,a1,a2,);
}
__gshared glbfn_glSampleMaskIndexedNV glSampleMaskIndexedNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glSampleMaskIndexedNV_loader(a0,a1,);
};
private auto glbfn_glSampleMaskIndexedNV_loader (uint a0, uint a1) nothrow @nogc {
  glSampleMaskIndexedNV = cast(glbfn_glSampleMaskIndexedNV)glbindGetProcAddress(`glSampleMaskIndexedNV`);
  if (glSampleMaskIndexedNV is null) assert(0, `OpenGL function 'glSampleMaskIndexedNV' not found!`);
  glSampleMaskIndexedNV(a0,a1,);
}
__gshared glbfn_glTexRenderbufferNV glTexRenderbufferNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glTexRenderbufferNV_loader(a0,a1,);
};
private auto glbfn_glTexRenderbufferNV_loader (uint a0, uint a1) nothrow @nogc {
  glTexRenderbufferNV = cast(glbfn_glTexRenderbufferNV)glbindGetProcAddress(`glTexRenderbufferNV`);
  if (glTexRenderbufferNV is null) assert(0, `OpenGL function 'glTexRenderbufferNV' not found!`);
  glTexRenderbufferNV(a0,a1,);
}
__gshared glbfn_glDeleteFencesNV glDeleteFencesNV = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteFencesNV_loader(a0,a1,);
};
private auto glbfn_glDeleteFencesNV_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteFencesNV = cast(glbfn_glDeleteFencesNV)glbindGetProcAddress(`glDeleteFencesNV`);
  if (glDeleteFencesNV is null) assert(0, `OpenGL function 'glDeleteFencesNV' not found!`);
  glDeleteFencesNV(a0,a1,);
}
__gshared glbfn_glGenFencesNV glGenFencesNV = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenFencesNV_loader(a0,a1,);
};
private auto glbfn_glGenFencesNV_loader (int a0, uint* a1) nothrow @nogc {
  glGenFencesNV = cast(glbfn_glGenFencesNV)glbindGetProcAddress(`glGenFencesNV`);
  if (glGenFencesNV is null) assert(0, `OpenGL function 'glGenFencesNV' not found!`);
  glGenFencesNV(a0,a1,);
}
__gshared glbfn_glIsFenceNV glIsFenceNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsFenceNV_loader(a0,);
};
private auto glbfn_glIsFenceNV_loader (uint a0) nothrow @nogc {
  glIsFenceNV = cast(glbfn_glIsFenceNV)glbindGetProcAddress(`glIsFenceNV`);
  if (glIsFenceNV is null) assert(0, `OpenGL function 'glIsFenceNV' not found!`);
  return glIsFenceNV(a0,);
}
__gshared glbfn_glTestFenceNV glTestFenceNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glTestFenceNV_loader(a0,);
};
private auto glbfn_glTestFenceNV_loader (uint a0) nothrow @nogc {
  glTestFenceNV = cast(glbfn_glTestFenceNV)glbindGetProcAddress(`glTestFenceNV`);
  if (glTestFenceNV is null) assert(0, `OpenGL function 'glTestFenceNV' not found!`);
  return glTestFenceNV(a0,);
}
__gshared glbfn_glGetFenceivNV glGetFenceivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetFenceivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetFenceivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetFenceivNV = cast(glbfn_glGetFenceivNV)glbindGetProcAddress(`glGetFenceivNV`);
  if (glGetFenceivNV is null) assert(0, `OpenGL function 'glGetFenceivNV' not found!`);
  glGetFenceivNV(a0,a1,a2,);
}
__gshared glbfn_glFinishFenceNV glFinishFenceNV = function void (uint a0) nothrow @nogc {
  glbfn_glFinishFenceNV_loader(a0,);
};
private auto glbfn_glFinishFenceNV_loader (uint a0) nothrow @nogc {
  glFinishFenceNV = cast(glbfn_glFinishFenceNV)glbindGetProcAddress(`glFinishFenceNV`);
  if (glFinishFenceNV is null) assert(0, `OpenGL function 'glFinishFenceNV' not found!`);
  glFinishFenceNV(a0,);
}
__gshared glbfn_glSetFenceNV glSetFenceNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glSetFenceNV_loader(a0,a1,);
};
private auto glbfn_glSetFenceNV_loader (uint a0, uint a1) nothrow @nogc {
  glSetFenceNV = cast(glbfn_glSetFenceNV)glbindGetProcAddress(`glSetFenceNV`);
  if (glSetFenceNV is null) assert(0, `OpenGL function 'glSetFenceNV' not found!`);
  glSetFenceNV(a0,a1,);
}
__gshared glbfn_glFragmentCoverageColorNV glFragmentCoverageColorNV = function void (uint a0) nothrow @nogc {
  glbfn_glFragmentCoverageColorNV_loader(a0,);
};
private auto glbfn_glFragmentCoverageColorNV_loader (uint a0) nothrow @nogc {
  glFragmentCoverageColorNV = cast(glbfn_glFragmentCoverageColorNV)glbindGetProcAddress(`glFragmentCoverageColorNV`);
  if (glFragmentCoverageColorNV is null) assert(0, `OpenGL function 'glFragmentCoverageColorNV' not found!`);
  glFragmentCoverageColorNV(a0,);
}
__gshared glbfn_glProgramNamedParameter4fNV glProgramNamedParameter4fNV = function void (uint a0, int a1, const(ubyte)* a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glbfn_glProgramNamedParameter4fNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glProgramNamedParameter4fNV_loader (uint a0, int a1, const(ubyte)* a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glProgramNamedParameter4fNV = cast(glbfn_glProgramNamedParameter4fNV)glbindGetProcAddress(`glProgramNamedParameter4fNV`);
  if (glProgramNamedParameter4fNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4fNV' not found!`);
  glProgramNamedParameter4fNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glProgramNamedParameter4fvNV glProgramNamedParameter4fvNV = function void (uint a0, int a1, const(ubyte)* a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramNamedParameter4fvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramNamedParameter4fvNV_loader (uint a0, int a1, const(ubyte)* a2, const(float)* a3) nothrow @nogc {
  glProgramNamedParameter4fvNV = cast(glbfn_glProgramNamedParameter4fvNV)glbindGetProcAddress(`glProgramNamedParameter4fvNV`);
  if (glProgramNamedParameter4fvNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4fvNV' not found!`);
  glProgramNamedParameter4fvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramNamedParameter4dNV glProgramNamedParameter4dNV = function void (uint a0, int a1, const(ubyte)* a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glbfn_glProgramNamedParameter4dNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glProgramNamedParameter4dNV_loader (uint a0, int a1, const(ubyte)* a2, double a3, double a4, double a5, double a6) nothrow @nogc {
  glProgramNamedParameter4dNV = cast(glbfn_glProgramNamedParameter4dNV)glbindGetProcAddress(`glProgramNamedParameter4dNV`);
  if (glProgramNamedParameter4dNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4dNV' not found!`);
  glProgramNamedParameter4dNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glProgramNamedParameter4dvNV glProgramNamedParameter4dvNV = function void (uint a0, int a1, const(ubyte)* a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramNamedParameter4dvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramNamedParameter4dvNV_loader (uint a0, int a1, const(ubyte)* a2, const(double)* a3) nothrow @nogc {
  glProgramNamedParameter4dvNV = cast(glbfn_glProgramNamedParameter4dvNV)glbindGetProcAddress(`glProgramNamedParameter4dvNV`);
  if (glProgramNamedParameter4dvNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4dvNV' not found!`);
  glProgramNamedParameter4dvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV = function void (uint a0, int a1, const(ubyte)* a2, float* a3) nothrow @nogc {
  glbfn_glGetProgramNamedParameterfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramNamedParameterfvNV_loader (uint a0, int a1, const(ubyte)* a2, float* a3) nothrow @nogc {
  glGetProgramNamedParameterfvNV = cast(glbfn_glGetProgramNamedParameterfvNV)glbindGetProcAddress(`glGetProgramNamedParameterfvNV`);
  if (glGetProgramNamedParameterfvNV is null) assert(0, `OpenGL function 'glGetProgramNamedParameterfvNV' not found!`);
  glGetProgramNamedParameterfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV = function void (uint a0, int a1, const(ubyte)* a2, double* a3) nothrow @nogc {
  glbfn_glGetProgramNamedParameterdvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramNamedParameterdvNV_loader (uint a0, int a1, const(ubyte)* a2, double* a3) nothrow @nogc {
  glGetProgramNamedParameterdvNV = cast(glbfn_glGetProgramNamedParameterdvNV)glbindGetProcAddress(`glGetProgramNamedParameterdvNV`);
  if (glGetProgramNamedParameterdvNV is null) assert(0, `OpenGL function 'glGetProgramNamedParameterdvNV' not found!`);
  glGetProgramNamedParameterdvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glCoverageModulationTableNV glCoverageModulationTableNV = function void (int a0, const(float)* a1) nothrow @nogc {
  glbfn_glCoverageModulationTableNV_loader(a0,a1,);
};
private auto glbfn_glCoverageModulationTableNV_loader (int a0, const(float)* a1) nothrow @nogc {
  glCoverageModulationTableNV = cast(glbfn_glCoverageModulationTableNV)glbindGetProcAddress(`glCoverageModulationTableNV`);
  if (glCoverageModulationTableNV is null) assert(0, `OpenGL function 'glCoverageModulationTableNV' not found!`);
  glCoverageModulationTableNV(a0,a1,);
}
__gshared glbfn_glGetCoverageModulationTableNV glGetCoverageModulationTableNV = function void (int a0, float* a1) nothrow @nogc {
  glbfn_glGetCoverageModulationTableNV_loader(a0,a1,);
};
private auto glbfn_glGetCoverageModulationTableNV_loader (int a0, float* a1) nothrow @nogc {
  glGetCoverageModulationTableNV = cast(glbfn_glGetCoverageModulationTableNV)glbindGetProcAddress(`glGetCoverageModulationTableNV`);
  if (glGetCoverageModulationTableNV is null) assert(0, `OpenGL function 'glGetCoverageModulationTableNV' not found!`);
  glGetCoverageModulationTableNV(a0,a1,);
}
__gshared glbfn_glCoverageModulationNV glCoverageModulationNV = function void (uint a0) nothrow @nogc {
  glbfn_glCoverageModulationNV_loader(a0,);
};
private auto glbfn_glCoverageModulationNV_loader (uint a0) nothrow @nogc {
  glCoverageModulationNV = cast(glbfn_glCoverageModulationNV)glbindGetProcAddress(`glCoverageModulationNV`);
  if (glCoverageModulationNV is null) assert(0, `OpenGL function 'glCoverageModulationNV' not found!`);
  glCoverageModulationNV(a0,);
}
__gshared glbfn_glRenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV = function void (uint a0, int a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glbfn_glRenderbufferStorageMultisampleCoverageNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glRenderbufferStorageMultisampleCoverageNV_loader (uint a0, int a1, int a2, uint a3, int a4, int a5) nothrow @nogc {
  glRenderbufferStorageMultisampleCoverageNV = cast(glbfn_glRenderbufferStorageMultisampleCoverageNV)glbindGetProcAddress(`glRenderbufferStorageMultisampleCoverageNV`);
  if (glRenderbufferStorageMultisampleCoverageNV is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleCoverageNV' not found!`);
  glRenderbufferStorageMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramVertexLimitNV glProgramVertexLimitNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glProgramVertexLimitNV_loader(a0,a1,);
};
private auto glbfn_glProgramVertexLimitNV_loader (uint a0, int a1) nothrow @nogc {
  glProgramVertexLimitNV = cast(glbfn_glProgramVertexLimitNV)glbindGetProcAddress(`glProgramVertexLimitNV`);
  if (glProgramVertexLimitNV is null) assert(0, `OpenGL function 'glProgramVertexLimitNV' not found!`);
  glProgramVertexLimitNV(a0,a1,);
}
__gshared glbfn_glFramebufferTextureEXT glFramebufferTextureEXT = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glFramebufferTextureEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFramebufferTextureEXT_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glFramebufferTextureEXT = cast(glbfn_glFramebufferTextureEXT)glbindGetProcAddress(`glFramebufferTextureEXT`);
  if (glFramebufferTextureEXT is null) assert(0, `OpenGL function 'glFramebufferTextureEXT' not found!`);
  glFramebufferTextureEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glFramebufferTextureFaceEXT glFramebufferTextureFaceEXT = function void (uint a0, uint a1, uint a2, int a3, uint a4) nothrow @nogc {
  glbfn_glFramebufferTextureFaceEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glFramebufferTextureFaceEXT_loader (uint a0, uint a1, uint a2, int a3, uint a4) nothrow @nogc {
  glFramebufferTextureFaceEXT = cast(glbfn_glFramebufferTextureFaceEXT)glbindGetProcAddress(`glFramebufferTextureFaceEXT`);
  if (glFramebufferTextureFaceEXT is null) assert(0, `OpenGL function 'glFramebufferTextureFaceEXT' not found!`);
  glFramebufferTextureFaceEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramLocalParameterI4iNV glProgramLocalParameterI4iNV = function void (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glProgramLocalParameterI4iNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramLocalParameterI4iNV_loader (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glProgramLocalParameterI4iNV = cast(glbfn_glProgramLocalParameterI4iNV)glbindGetProcAddress(`glProgramLocalParameterI4iNV`);
  if (glProgramLocalParameterI4iNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4iNV' not found!`);
  glProgramLocalParameterI4iNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glProgramLocalParameterI4ivNV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramLocalParameterI4ivNV_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glProgramLocalParameterI4ivNV = cast(glbfn_glProgramLocalParameterI4ivNV)glbindGetProcAddress(`glProgramLocalParameterI4ivNV`);
  if (glProgramLocalParameterI4ivNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4ivNV' not found!`);
  glProgramLocalParameterI4ivNV(a0,a1,a2,);
}
__gshared glbfn_glProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV = function void (uint a0, uint a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramLocalParametersI4ivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramLocalParametersI4ivNV_loader (uint a0, uint a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramLocalParametersI4ivNV = cast(glbfn_glProgramLocalParametersI4ivNV)glbindGetProcAddress(`glProgramLocalParametersI4ivNV`);
  if (glProgramLocalParametersI4ivNV is null) assert(0, `OpenGL function 'glProgramLocalParametersI4ivNV' not found!`);
  glProgramLocalParametersI4ivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glProgramLocalParameterI4uiNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramLocalParameterI4uiNV_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glProgramLocalParameterI4uiNV = cast(glbfn_glProgramLocalParameterI4uiNV)glbindGetProcAddress(`glProgramLocalParameterI4uiNV`);
  if (glProgramLocalParameterI4uiNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uiNV' not found!`);
  glProgramLocalParameterI4uiNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glProgramLocalParameterI4uivNV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramLocalParameterI4uivNV_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glProgramLocalParameterI4uivNV = cast(glbfn_glProgramLocalParameterI4uivNV)glbindGetProcAddress(`glProgramLocalParameterI4uivNV`);
  if (glProgramLocalParameterI4uivNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uivNV' not found!`);
  glProgramLocalParameterI4uivNV(a0,a1,a2,);
}
__gshared glbfn_glProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV = function void (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramLocalParametersI4uivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramLocalParametersI4uivNV_loader (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramLocalParametersI4uivNV = cast(glbfn_glProgramLocalParametersI4uivNV)glbindGetProcAddress(`glProgramLocalParametersI4uivNV`);
  if (glProgramLocalParametersI4uivNV is null) assert(0, `OpenGL function 'glProgramLocalParametersI4uivNV' not found!`);
  glProgramLocalParametersI4uivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramEnvParameterI4iNV glProgramEnvParameterI4iNV = function void (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glProgramEnvParameterI4iNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramEnvParameterI4iNV_loader (uint a0, uint a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glProgramEnvParameterI4iNV = cast(glbfn_glProgramEnvParameterI4iNV)glbindGetProcAddress(`glProgramEnvParameterI4iNV`);
  if (glProgramEnvParameterI4iNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4iNV' not found!`);
  glProgramEnvParameterI4iNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glProgramEnvParameterI4ivNV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramEnvParameterI4ivNV_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glProgramEnvParameterI4ivNV = cast(glbfn_glProgramEnvParameterI4ivNV)glbindGetProcAddress(`glProgramEnvParameterI4ivNV`);
  if (glProgramEnvParameterI4ivNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4ivNV' not found!`);
  glProgramEnvParameterI4ivNV(a0,a1,a2,);
}
__gshared glbfn_glProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV = function void (uint a0, uint a1, int a2, const(int)* a3) nothrow @nogc {
  glbfn_glProgramEnvParametersI4ivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramEnvParametersI4ivNV_loader (uint a0, uint a1, int a2, const(int)* a3) nothrow @nogc {
  glProgramEnvParametersI4ivNV = cast(glbfn_glProgramEnvParametersI4ivNV)glbindGetProcAddress(`glProgramEnvParametersI4ivNV`);
  if (glProgramEnvParametersI4ivNV is null) assert(0, `OpenGL function 'glProgramEnvParametersI4ivNV' not found!`);
  glProgramEnvParametersI4ivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glProgramEnvParameterI4uiNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramEnvParameterI4uiNV_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glProgramEnvParameterI4uiNV = cast(glbfn_glProgramEnvParameterI4uiNV)glbindGetProcAddress(`glProgramEnvParameterI4uiNV`);
  if (glProgramEnvParameterI4uiNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uiNV' not found!`);
  glProgramEnvParameterI4uiNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV = function void (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glbfn_glProgramEnvParameterI4uivNV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramEnvParameterI4uivNV_loader (uint a0, uint a1, const(uint)* a2) nothrow @nogc {
  glProgramEnvParameterI4uivNV = cast(glbfn_glProgramEnvParameterI4uivNV)glbindGetProcAddress(`glProgramEnvParameterI4uivNV`);
  if (glProgramEnvParameterI4uivNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uivNV' not found!`);
  glProgramEnvParameterI4uivNV(a0,a1,a2,);
}
__gshared glbfn_glProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV = function void (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glbfn_glProgramEnvParametersI4uivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramEnvParametersI4uivNV_loader (uint a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glProgramEnvParametersI4uivNV = cast(glbfn_glProgramEnvParametersI4uivNV)glbindGetProcAddress(`glProgramEnvParametersI4uivNV`);
  if (glProgramEnvParametersI4uivNV is null) assert(0, `OpenGL function 'glProgramEnvParametersI4uivNV' not found!`);
  glProgramEnvParametersI4uivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetProgramLocalParameterIivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramLocalParameterIivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetProgramLocalParameterIivNV = cast(glbfn_glGetProgramLocalParameterIivNV)glbindGetProcAddress(`glGetProgramLocalParameterIivNV`);
  if (glGetProgramLocalParameterIivNV is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIivNV' not found!`);
  glGetProgramLocalParameterIivNV(a0,a1,a2,);
}
__gshared glbfn_glGetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetProgramLocalParameterIuivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramLocalParameterIuivNV_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetProgramLocalParameterIuivNV = cast(glbfn_glGetProgramLocalParameterIuivNV)glbindGetProcAddress(`glGetProgramLocalParameterIuivNV`);
  if (glGetProgramLocalParameterIuivNV is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIuivNV' not found!`);
  glGetProgramLocalParameterIuivNV(a0,a1,a2,);
}
__gshared glbfn_glGetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetProgramEnvParameterIivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramEnvParameterIivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetProgramEnvParameterIivNV = cast(glbfn_glGetProgramEnvParameterIivNV)glbindGetProcAddress(`glGetProgramEnvParameterIivNV`);
  if (glGetProgramEnvParameterIivNV is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIivNV' not found!`);
  glGetProgramEnvParameterIivNV(a0,a1,a2,);
}
__gshared glbfn_glGetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetProgramEnvParameterIuivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramEnvParameterIuivNV_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetProgramEnvParameterIuivNV = cast(glbfn_glGetProgramEnvParameterIuivNV)glbindGetProcAddress(`glGetProgramEnvParameterIuivNV`);
  if (glGetProgramEnvParameterIuivNV is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIuivNV' not found!`);
  glGetProgramEnvParameterIuivNV(a0,a1,a2,);
}
__gshared glbfn_glProgramSubroutineParametersuivNV glProgramSubroutineParametersuivNV = function void (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glbfn_glProgramSubroutineParametersuivNV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramSubroutineParametersuivNV_loader (uint a0, int a1, const(uint)* a2) nothrow @nogc {
  glProgramSubroutineParametersuivNV = cast(glbfn_glProgramSubroutineParametersuivNV)glbindGetProcAddress(`glProgramSubroutineParametersuivNV`);
  if (glProgramSubroutineParametersuivNV is null) assert(0, `OpenGL function 'glProgramSubroutineParametersuivNV' not found!`);
  glProgramSubroutineParametersuivNV(a0,a1,a2,);
}
__gshared glbfn_glGetProgramSubroutineParameteruivNV glGetProgramSubroutineParameteruivNV = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetProgramSubroutineParameteruivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramSubroutineParameteruivNV_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetProgramSubroutineParameteruivNV = cast(glbfn_glGetProgramSubroutineParameteruivNV)glbindGetProcAddress(`glGetProgramSubroutineParameteruivNV`);
  if (glGetProgramSubroutineParameteruivNV is null) assert(0, `OpenGL function 'glGetProgramSubroutineParameteruivNV' not found!`);
  glGetProgramSubroutineParameteruivNV(a0,a1,a2,);
}
__gshared glbfn_glVertex2hNV glVertex2hNV = function void (ushort a0, ushort a1) nothrow @nogc {
  glbfn_glVertex2hNV_loader(a0,a1,);
};
private auto glbfn_glVertex2hNV_loader (ushort a0, ushort a1) nothrow @nogc {
  glVertex2hNV = cast(glbfn_glVertex2hNV)glbindGetProcAddress(`glVertex2hNV`);
  if (glVertex2hNV is null) assert(0, `OpenGL function 'glVertex2hNV' not found!`);
  glVertex2hNV(a0,a1,);
}
__gshared glbfn_glVertex2hvNV glVertex2hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glVertex2hvNV_loader(a0,);
};
private auto glbfn_glVertex2hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glVertex2hvNV = cast(glbfn_glVertex2hvNV)glbindGetProcAddress(`glVertex2hvNV`);
  if (glVertex2hvNV is null) assert(0, `OpenGL function 'glVertex2hvNV' not found!`);
  glVertex2hvNV(a0,);
}
__gshared glbfn_glVertex3hNV glVertex3hNV = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glVertex3hNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertex3hNV_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glVertex3hNV = cast(glbfn_glVertex3hNV)glbindGetProcAddress(`glVertex3hNV`);
  if (glVertex3hNV is null) assert(0, `OpenGL function 'glVertex3hNV' not found!`);
  glVertex3hNV(a0,a1,a2,);
}
__gshared glbfn_glVertex3hvNV glVertex3hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glVertex3hvNV_loader(a0,);
};
private auto glbfn_glVertex3hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glVertex3hvNV = cast(glbfn_glVertex3hvNV)glbindGetProcAddress(`glVertex3hvNV`);
  if (glVertex3hvNV is null) assert(0, `OpenGL function 'glVertex3hvNV' not found!`);
  glVertex3hvNV(a0,);
}
__gshared glbfn_glVertex4hNV glVertex4hNV = function void (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glbfn_glVertex4hNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertex4hNV_loader (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glVertex4hNV = cast(glbfn_glVertex4hNV)glbindGetProcAddress(`glVertex4hNV`);
  if (glVertex4hNV is null) assert(0, `OpenGL function 'glVertex4hNV' not found!`);
  glVertex4hNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertex4hvNV glVertex4hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glVertex4hvNV_loader(a0,);
};
private auto glbfn_glVertex4hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glVertex4hvNV = cast(glbfn_glVertex4hvNV)glbindGetProcAddress(`glVertex4hvNV`);
  if (glVertex4hvNV is null) assert(0, `OpenGL function 'glVertex4hvNV' not found!`);
  glVertex4hvNV(a0,);
}
__gshared glbfn_glNormal3hNV glNormal3hNV = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glNormal3hNV_loader(a0,a1,a2,);
};
private auto glbfn_glNormal3hNV_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glNormal3hNV = cast(glbfn_glNormal3hNV)glbindGetProcAddress(`glNormal3hNV`);
  if (glNormal3hNV is null) assert(0, `OpenGL function 'glNormal3hNV' not found!`);
  glNormal3hNV(a0,a1,a2,);
}
__gshared glbfn_glNormal3hvNV glNormal3hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glNormal3hvNV_loader(a0,);
};
private auto glbfn_glNormal3hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glNormal3hvNV = cast(glbfn_glNormal3hvNV)glbindGetProcAddress(`glNormal3hvNV`);
  if (glNormal3hvNV is null) assert(0, `OpenGL function 'glNormal3hvNV' not found!`);
  glNormal3hvNV(a0,);
}
__gshared glbfn_glColor3hNV glColor3hNV = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glColor3hNV_loader(a0,a1,a2,);
};
private auto glbfn_glColor3hNV_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glColor3hNV = cast(glbfn_glColor3hNV)glbindGetProcAddress(`glColor3hNV`);
  if (glColor3hNV is null) assert(0, `OpenGL function 'glColor3hNV' not found!`);
  glColor3hNV(a0,a1,a2,);
}
__gshared glbfn_glColor3hvNV glColor3hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glColor3hvNV_loader(a0,);
};
private auto glbfn_glColor3hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glColor3hvNV = cast(glbfn_glColor3hvNV)glbindGetProcAddress(`glColor3hvNV`);
  if (glColor3hvNV is null) assert(0, `OpenGL function 'glColor3hvNV' not found!`);
  glColor3hvNV(a0,);
}
__gshared glbfn_glColor4hNV glColor4hNV = function void (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glbfn_glColor4hNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4hNV_loader (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glColor4hNV = cast(glbfn_glColor4hNV)glbindGetProcAddress(`glColor4hNV`);
  if (glColor4hNV is null) assert(0, `OpenGL function 'glColor4hNV' not found!`);
  glColor4hNV(a0,a1,a2,a3,);
}
__gshared glbfn_glColor4hvNV glColor4hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glColor4hvNV_loader(a0,);
};
private auto glbfn_glColor4hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glColor4hvNV = cast(glbfn_glColor4hvNV)glbindGetProcAddress(`glColor4hvNV`);
  if (glColor4hvNV is null) assert(0, `OpenGL function 'glColor4hvNV' not found!`);
  glColor4hvNV(a0,);
}
__gshared glbfn_glTexCoord1hNV glTexCoord1hNV = function void (ushort a0) nothrow @nogc {
  glbfn_glTexCoord1hNV_loader(a0,);
};
private auto glbfn_glTexCoord1hNV_loader (ushort a0) nothrow @nogc {
  glTexCoord1hNV = cast(glbfn_glTexCoord1hNV)glbindGetProcAddress(`glTexCoord1hNV`);
  if (glTexCoord1hNV is null) assert(0, `OpenGL function 'glTexCoord1hNV' not found!`);
  glTexCoord1hNV(a0,);
}
__gshared glbfn_glTexCoord1hvNV glTexCoord1hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glTexCoord1hvNV_loader(a0,);
};
private auto glbfn_glTexCoord1hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glTexCoord1hvNV = cast(glbfn_glTexCoord1hvNV)glbindGetProcAddress(`glTexCoord1hvNV`);
  if (glTexCoord1hvNV is null) assert(0, `OpenGL function 'glTexCoord1hvNV' not found!`);
  glTexCoord1hvNV(a0,);
}
__gshared glbfn_glTexCoord2hNV glTexCoord2hNV = function void (ushort a0, ushort a1) nothrow @nogc {
  glbfn_glTexCoord2hNV_loader(a0,a1,);
};
private auto glbfn_glTexCoord2hNV_loader (ushort a0, ushort a1) nothrow @nogc {
  glTexCoord2hNV = cast(glbfn_glTexCoord2hNV)glbindGetProcAddress(`glTexCoord2hNV`);
  if (glTexCoord2hNV is null) assert(0, `OpenGL function 'glTexCoord2hNV' not found!`);
  glTexCoord2hNV(a0,a1,);
}
__gshared glbfn_glTexCoord2hvNV glTexCoord2hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glTexCoord2hvNV_loader(a0,);
};
private auto glbfn_glTexCoord2hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glTexCoord2hvNV = cast(glbfn_glTexCoord2hvNV)glbindGetProcAddress(`glTexCoord2hvNV`);
  if (glTexCoord2hvNV is null) assert(0, `OpenGL function 'glTexCoord2hvNV' not found!`);
  glTexCoord2hvNV(a0,);
}
__gshared glbfn_glTexCoord3hNV glTexCoord3hNV = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glTexCoord3hNV_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord3hNV_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glTexCoord3hNV = cast(glbfn_glTexCoord3hNV)glbindGetProcAddress(`glTexCoord3hNV`);
  if (glTexCoord3hNV is null) assert(0, `OpenGL function 'glTexCoord3hNV' not found!`);
  glTexCoord3hNV(a0,a1,a2,);
}
__gshared glbfn_glTexCoord3hvNV glTexCoord3hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glTexCoord3hvNV_loader(a0,);
};
private auto glbfn_glTexCoord3hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glTexCoord3hvNV = cast(glbfn_glTexCoord3hvNV)glbindGetProcAddress(`glTexCoord3hvNV`);
  if (glTexCoord3hvNV is null) assert(0, `OpenGL function 'glTexCoord3hvNV' not found!`);
  glTexCoord3hvNV(a0,);
}
__gshared glbfn_glTexCoord4hNV glTexCoord4hNV = function void (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glbfn_glTexCoord4hNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4hNV_loader (ushort a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glTexCoord4hNV = cast(glbfn_glTexCoord4hNV)glbindGetProcAddress(`glTexCoord4hNV`);
  if (glTexCoord4hNV is null) assert(0, `OpenGL function 'glTexCoord4hNV' not found!`);
  glTexCoord4hNV(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4hvNV glTexCoord4hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glTexCoord4hvNV_loader(a0,);
};
private auto glbfn_glTexCoord4hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glTexCoord4hvNV = cast(glbfn_glTexCoord4hvNV)glbindGetProcAddress(`glTexCoord4hvNV`);
  if (glTexCoord4hvNV is null) assert(0, `OpenGL function 'glTexCoord4hvNV' not found!`);
  glTexCoord4hvNV(a0,);
}
__gshared glbfn_glMultiTexCoord1hNV glMultiTexCoord1hNV = function void (uint a0, ushort a1) nothrow @nogc {
  glbfn_glMultiTexCoord1hNV_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1hNV_loader (uint a0, ushort a1) nothrow @nogc {
  glMultiTexCoord1hNV = cast(glbfn_glMultiTexCoord1hNV)glbindGetProcAddress(`glMultiTexCoord1hNV`);
  if (glMultiTexCoord1hNV is null) assert(0, `OpenGL function 'glMultiTexCoord1hNV' not found!`);
  glMultiTexCoord1hNV(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1hvNV glMultiTexCoord1hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1hvNV_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glMultiTexCoord1hvNV = cast(glbfn_glMultiTexCoord1hvNV)glbindGetProcAddress(`glMultiTexCoord1hvNV`);
  if (glMultiTexCoord1hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord1hvNV' not found!`);
  glMultiTexCoord1hvNV(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2hNV glMultiTexCoord2hNV = function void (uint a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glMultiTexCoord2hNV_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2hNV_loader (uint a0, ushort a1, ushort a2) nothrow @nogc {
  glMultiTexCoord2hNV = cast(glbfn_glMultiTexCoord2hNV)glbindGetProcAddress(`glMultiTexCoord2hNV`);
  if (glMultiTexCoord2hNV is null) assert(0, `OpenGL function 'glMultiTexCoord2hNV' not found!`);
  glMultiTexCoord2hNV(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2hvNV glMultiTexCoord2hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2hvNV_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glMultiTexCoord2hvNV = cast(glbfn_glMultiTexCoord2hvNV)glbindGetProcAddress(`glMultiTexCoord2hvNV`);
  if (glMultiTexCoord2hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord2hvNV' not found!`);
  glMultiTexCoord2hvNV(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3hNV glMultiTexCoord3hNV = function void (uint a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glbfn_glMultiTexCoord3hNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3hNV_loader (uint a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glMultiTexCoord3hNV = cast(glbfn_glMultiTexCoord3hNV)glbindGetProcAddress(`glMultiTexCoord3hNV`);
  if (glMultiTexCoord3hNV is null) assert(0, `OpenGL function 'glMultiTexCoord3hNV' not found!`);
  glMultiTexCoord3hNV(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3hvNV glMultiTexCoord3hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3hvNV_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glMultiTexCoord3hvNV = cast(glbfn_glMultiTexCoord3hvNV)glbindGetProcAddress(`glMultiTexCoord3hvNV`);
  if (glMultiTexCoord3hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord3hvNV' not found!`);
  glMultiTexCoord3hvNV(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4hNV glMultiTexCoord4hNV = function void (uint a0, ushort a1, ushort a2, ushort a3, ushort a4) nothrow @nogc {
  glbfn_glMultiTexCoord4hNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4hNV_loader (uint a0, ushort a1, ushort a2, ushort a3, ushort a4) nothrow @nogc {
  glMultiTexCoord4hNV = cast(glbfn_glMultiTexCoord4hNV)glbindGetProcAddress(`glMultiTexCoord4hNV`);
  if (glMultiTexCoord4hNV is null) assert(0, `OpenGL function 'glMultiTexCoord4hNV' not found!`);
  glMultiTexCoord4hNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4hvNV glMultiTexCoord4hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4hvNV_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glMultiTexCoord4hvNV = cast(glbfn_glMultiTexCoord4hvNV)glbindGetProcAddress(`glMultiTexCoord4hvNV`);
  if (glMultiTexCoord4hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord4hvNV' not found!`);
  glMultiTexCoord4hvNV(a0,a1,);
}
__gshared glbfn_glFogCoordhNV glFogCoordhNV = function void (ushort a0) nothrow @nogc {
  glbfn_glFogCoordhNV_loader(a0,);
};
private auto glbfn_glFogCoordhNV_loader (ushort a0) nothrow @nogc {
  glFogCoordhNV = cast(glbfn_glFogCoordhNV)glbindGetProcAddress(`glFogCoordhNV`);
  if (glFogCoordhNV is null) assert(0, `OpenGL function 'glFogCoordhNV' not found!`);
  glFogCoordhNV(a0,);
}
__gshared glbfn_glFogCoordhvNV glFogCoordhvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glFogCoordhvNV_loader(a0,);
};
private auto glbfn_glFogCoordhvNV_loader (const(ushort)* a0) nothrow @nogc {
  glFogCoordhvNV = cast(glbfn_glFogCoordhvNV)glbindGetProcAddress(`glFogCoordhvNV`);
  if (glFogCoordhvNV is null) assert(0, `OpenGL function 'glFogCoordhvNV' not found!`);
  glFogCoordhvNV(a0,);
}
__gshared glbfn_glSecondaryColor3hNV glSecondaryColor3hNV = function void (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glSecondaryColor3hNV_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColor3hNV_loader (ushort a0, ushort a1, ushort a2) nothrow @nogc {
  glSecondaryColor3hNV = cast(glbfn_glSecondaryColor3hNV)glbindGetProcAddress(`glSecondaryColor3hNV`);
  if (glSecondaryColor3hNV is null) assert(0, `OpenGL function 'glSecondaryColor3hNV' not found!`);
  glSecondaryColor3hNV(a0,a1,a2,);
}
__gshared glbfn_glSecondaryColor3hvNV glSecondaryColor3hvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glSecondaryColor3hvNV_loader(a0,);
};
private auto glbfn_glSecondaryColor3hvNV_loader (const(ushort)* a0) nothrow @nogc {
  glSecondaryColor3hvNV = cast(glbfn_glSecondaryColor3hvNV)glbindGetProcAddress(`glSecondaryColor3hvNV`);
  if (glSecondaryColor3hvNV is null) assert(0, `OpenGL function 'glSecondaryColor3hvNV' not found!`);
  glSecondaryColor3hvNV(a0,);
}
__gshared glbfn_glVertexWeighthNV glVertexWeighthNV = function void (ushort a0) nothrow @nogc {
  glbfn_glVertexWeighthNV_loader(a0,);
};
private auto glbfn_glVertexWeighthNV_loader (ushort a0) nothrow @nogc {
  glVertexWeighthNV = cast(glbfn_glVertexWeighthNV)glbindGetProcAddress(`glVertexWeighthNV`);
  if (glVertexWeighthNV is null) assert(0, `OpenGL function 'glVertexWeighthNV' not found!`);
  glVertexWeighthNV(a0,);
}
__gshared glbfn_glVertexWeighthvNV glVertexWeighthvNV = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glVertexWeighthvNV_loader(a0,);
};
private auto glbfn_glVertexWeighthvNV_loader (const(ushort)* a0) nothrow @nogc {
  glVertexWeighthvNV = cast(glbfn_glVertexWeighthvNV)glbindGetProcAddress(`glVertexWeighthvNV`);
  if (glVertexWeighthvNV is null) assert(0, `OpenGL function 'glVertexWeighthvNV' not found!`);
  glVertexWeighthvNV(a0,);
}
__gshared glbfn_glVertexAttrib1hNV glVertexAttrib1hNV = function void (uint a0, ushort a1) nothrow @nogc {
  glbfn_glVertexAttrib1hNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1hNV_loader (uint a0, ushort a1) nothrow @nogc {
  glVertexAttrib1hNV = cast(glbfn_glVertexAttrib1hNV)glbindGetProcAddress(`glVertexAttrib1hNV`);
  if (glVertexAttrib1hNV is null) assert(0, `OpenGL function 'glVertexAttrib1hNV' not found!`);
  glVertexAttrib1hNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib1hvNV glVertexAttrib1hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1hvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib1hvNV = cast(glbfn_glVertexAttrib1hvNV)glbindGetProcAddress(`glVertexAttrib1hvNV`);
  if (glVertexAttrib1hvNV is null) assert(0, `OpenGL function 'glVertexAttrib1hvNV' not found!`);
  glVertexAttrib1hvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib2hNV glVertexAttrib2hNV = function void (uint a0, ushort a1, ushort a2) nothrow @nogc {
  glbfn_glVertexAttrib2hNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2hNV_loader (uint a0, ushort a1, ushort a2) nothrow @nogc {
  glVertexAttrib2hNV = cast(glbfn_glVertexAttrib2hNV)glbindGetProcAddress(`glVertexAttrib2hNV`);
  if (glVertexAttrib2hNV is null) assert(0, `OpenGL function 'glVertexAttrib2hNV' not found!`);
  glVertexAttrib2hNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2hvNV glVertexAttrib2hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2hvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib2hvNV = cast(glbfn_glVertexAttrib2hvNV)glbindGetProcAddress(`glVertexAttrib2hvNV`);
  if (glVertexAttrib2hvNV is null) assert(0, `OpenGL function 'glVertexAttrib2hvNV' not found!`);
  glVertexAttrib2hvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib3hNV glVertexAttrib3hNV = function void (uint a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glbfn_glVertexAttrib3hNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3hNV_loader (uint a0, ushort a1, ushort a2, ushort a3) nothrow @nogc {
  glVertexAttrib3hNV = cast(glbfn_glVertexAttrib3hNV)glbindGetProcAddress(`glVertexAttrib3hNV`);
  if (glVertexAttrib3hNV is null) assert(0, `OpenGL function 'glVertexAttrib3hNV' not found!`);
  glVertexAttrib3hNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3hvNV glVertexAttrib3hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3hvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib3hvNV = cast(glbfn_glVertexAttrib3hvNV)glbindGetProcAddress(`glVertexAttrib3hvNV`);
  if (glVertexAttrib3hvNV is null) assert(0, `OpenGL function 'glVertexAttrib3hvNV' not found!`);
  glVertexAttrib3hvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib4hNV glVertexAttrib4hNV = function void (uint a0, ushort a1, ushort a2, ushort a3, ushort a4) nothrow @nogc {
  glbfn_glVertexAttrib4hNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4hNV_loader (uint a0, ushort a1, ushort a2, ushort a3, ushort a4) nothrow @nogc {
  glVertexAttrib4hNV = cast(glbfn_glVertexAttrib4hNV)glbindGetProcAddress(`glVertexAttrib4hNV`);
  if (glVertexAttrib4hNV is null) assert(0, `OpenGL function 'glVertexAttrib4hNV' not found!`);
  glVertexAttrib4hNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4hvNV glVertexAttrib4hvNV = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4hvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4hvNV_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttrib4hvNV = cast(glbfn_glVertexAttrib4hvNV)glbindGetProcAddress(`glVertexAttrib4hvNV`);
  if (glVertexAttrib4hvNV is null) assert(0, `OpenGL function 'glVertexAttrib4hvNV' not found!`);
  glVertexAttrib4hvNV(a0,a1,);
}
__gshared glbfn_glVertexAttribs1hvNV glVertexAttribs1hvNV = function void (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glbfn_glVertexAttribs1hvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs1hvNV_loader (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glVertexAttribs1hvNV = cast(glbfn_glVertexAttribs1hvNV)glbindGetProcAddress(`glVertexAttribs1hvNV`);
  if (glVertexAttribs1hvNV is null) assert(0, `OpenGL function 'glVertexAttribs1hvNV' not found!`);
  glVertexAttribs1hvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs2hvNV glVertexAttribs2hvNV = function void (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glbfn_glVertexAttribs2hvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs2hvNV_loader (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glVertexAttribs2hvNV = cast(glbfn_glVertexAttribs2hvNV)glbindGetProcAddress(`glVertexAttribs2hvNV`);
  if (glVertexAttribs2hvNV is null) assert(0, `OpenGL function 'glVertexAttribs2hvNV' not found!`);
  glVertexAttribs2hvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs3hvNV glVertexAttribs3hvNV = function void (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glbfn_glVertexAttribs3hvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs3hvNV_loader (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glVertexAttribs3hvNV = cast(glbfn_glVertexAttribs3hvNV)glbindGetProcAddress(`glVertexAttribs3hvNV`);
  if (glVertexAttribs3hvNV is null) assert(0, `OpenGL function 'glVertexAttribs3hvNV' not found!`);
  glVertexAttribs3hvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs4hvNV glVertexAttribs4hvNV = function void (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glbfn_glVertexAttribs4hvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs4hvNV_loader (uint a0, int a1, const(ushort)* a2) nothrow @nogc {
  glVertexAttribs4hvNV = cast(glbfn_glVertexAttribs4hvNV)glbindGetProcAddress(`glVertexAttribs4hvNV`);
  if (glVertexAttribs4hvNV is null) assert(0, `OpenGL function 'glVertexAttribs4hvNV' not found!`);
  glVertexAttribs4hvNV(a0,a1,a2,);
}
__gshared glbfn_glGetInternalformatSampleivNV glGetInternalformatSampleivNV = function void (uint a0, uint a1, int a2, uint a3, int a4, int* a5) nothrow @nogc {
  glbfn_glGetInternalformatSampleivNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glGetInternalformatSampleivNV_loader (uint a0, uint a1, int a2, uint a3, int a4, int* a5) nothrow @nogc {
  glGetInternalformatSampleivNV = cast(glbfn_glGetInternalformatSampleivNV)glbindGetProcAddress(`glGetInternalformatSampleivNV`);
  if (glGetInternalformatSampleivNV is null) assert(0, `OpenGL function 'glGetInternalformatSampleivNV' not found!`);
  glGetInternalformatSampleivNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGenOcclusionQueriesNV glGenOcclusionQueriesNV = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenOcclusionQueriesNV_loader(a0,a1,);
};
private auto glbfn_glGenOcclusionQueriesNV_loader (int a0, uint* a1) nothrow @nogc {
  glGenOcclusionQueriesNV = cast(glbfn_glGenOcclusionQueriesNV)glbindGetProcAddress(`glGenOcclusionQueriesNV`);
  if (glGenOcclusionQueriesNV is null) assert(0, `OpenGL function 'glGenOcclusionQueriesNV' not found!`);
  glGenOcclusionQueriesNV(a0,a1,);
}
__gshared glbfn_glDeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteOcclusionQueriesNV_loader(a0,a1,);
};
private auto glbfn_glDeleteOcclusionQueriesNV_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteOcclusionQueriesNV = cast(glbfn_glDeleteOcclusionQueriesNV)glbindGetProcAddress(`glDeleteOcclusionQueriesNV`);
  if (glDeleteOcclusionQueriesNV is null) assert(0, `OpenGL function 'glDeleteOcclusionQueriesNV' not found!`);
  glDeleteOcclusionQueriesNV(a0,a1,);
}
__gshared glbfn_glIsOcclusionQueryNV glIsOcclusionQueryNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsOcclusionQueryNV_loader(a0,);
};
private auto glbfn_glIsOcclusionQueryNV_loader (uint a0) nothrow @nogc {
  glIsOcclusionQueryNV = cast(glbfn_glIsOcclusionQueryNV)glbindGetProcAddress(`glIsOcclusionQueryNV`);
  if (glIsOcclusionQueryNV is null) assert(0, `OpenGL function 'glIsOcclusionQueryNV' not found!`);
  return glIsOcclusionQueryNV(a0,);
}
__gshared glbfn_glBeginOcclusionQueryNV glBeginOcclusionQueryNV = function void (uint a0) nothrow @nogc {
  glbfn_glBeginOcclusionQueryNV_loader(a0,);
};
private auto glbfn_glBeginOcclusionQueryNV_loader (uint a0) nothrow @nogc {
  glBeginOcclusionQueryNV = cast(glbfn_glBeginOcclusionQueryNV)glbindGetProcAddress(`glBeginOcclusionQueryNV`);
  if (glBeginOcclusionQueryNV is null) assert(0, `OpenGL function 'glBeginOcclusionQueryNV' not found!`);
  glBeginOcclusionQueryNV(a0,);
}
__gshared glbfn_glEndOcclusionQueryNV glEndOcclusionQueryNV = function void () nothrow @nogc {
  glbfn_glEndOcclusionQueryNV_loader();
};
private auto glbfn_glEndOcclusionQueryNV_loader () nothrow @nogc {
  glEndOcclusionQueryNV = cast(glbfn_glEndOcclusionQueryNV)glbindGetProcAddress(`glEndOcclusionQueryNV`);
  if (glEndOcclusionQueryNV is null) assert(0, `OpenGL function 'glEndOcclusionQueryNV' not found!`);
  glEndOcclusionQueryNV();
}
__gshared glbfn_glGetOcclusionQueryivNV glGetOcclusionQueryivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetOcclusionQueryivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetOcclusionQueryivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetOcclusionQueryivNV = cast(glbfn_glGetOcclusionQueryivNV)glbindGetProcAddress(`glGetOcclusionQueryivNV`);
  if (glGetOcclusionQueryivNV is null) assert(0, `OpenGL function 'glGetOcclusionQueryivNV' not found!`);
  glGetOcclusionQueryivNV(a0,a1,a2,);
}
__gshared glbfn_glGetOcclusionQueryuivNV glGetOcclusionQueryuivNV = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetOcclusionQueryuivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetOcclusionQueryuivNV_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetOcclusionQueryuivNV = cast(glbfn_glGetOcclusionQueryuivNV)glbindGetProcAddress(`glGetOcclusionQueryuivNV`);
  if (glGetOcclusionQueryuivNV is null) assert(0, `OpenGL function 'glGetOcclusionQueryuivNV' not found!`);
  glGetOcclusionQueryuivNV(a0,a1,a2,);
}
__gshared glbfn_glProgramBufferParametersfvNV glProgramBufferParametersfvNV = function void (uint a0, uint a1, uint a2, int a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramBufferParametersfvNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramBufferParametersfvNV_loader (uint a0, uint a1, uint a2, int a3, const(float)* a4) nothrow @nogc {
  glProgramBufferParametersfvNV = cast(glbfn_glProgramBufferParametersfvNV)glbindGetProcAddress(`glProgramBufferParametersfvNV`);
  if (glProgramBufferParametersfvNV is null) assert(0, `OpenGL function 'glProgramBufferParametersfvNV' not found!`);
  glProgramBufferParametersfvNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramBufferParametersIivNV glProgramBufferParametersIivNV = function void (uint a0, uint a1, uint a2, int a3, const(int)* a4) nothrow @nogc {
  glbfn_glProgramBufferParametersIivNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramBufferParametersIivNV_loader (uint a0, uint a1, uint a2, int a3, const(int)* a4) nothrow @nogc {
  glProgramBufferParametersIivNV = cast(glbfn_glProgramBufferParametersIivNV)glbindGetProcAddress(`glProgramBufferParametersIivNV`);
  if (glProgramBufferParametersIivNV is null) assert(0, `OpenGL function 'glProgramBufferParametersIivNV' not found!`);
  glProgramBufferParametersIivNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glProgramBufferParametersIuivNV glProgramBufferParametersIuivNV = function void (uint a0, uint a1, uint a2, int a3, const(uint)* a4) nothrow @nogc {
  glbfn_glProgramBufferParametersIuivNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramBufferParametersIuivNV_loader (uint a0, uint a1, uint a2, int a3, const(uint)* a4) nothrow @nogc {
  glProgramBufferParametersIuivNV = cast(glbfn_glProgramBufferParametersIuivNV)glbindGetProcAddress(`glProgramBufferParametersIuivNV`);
  if (glProgramBufferParametersIuivNV is null) assert(0, `OpenGL function 'glProgramBufferParametersIuivNV' not found!`);
  glProgramBufferParametersIuivNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGenPathsNV glGenPathsNV = function uint (int a0) nothrow @nogc {
  return glbfn_glGenPathsNV_loader(a0,);
};
private auto glbfn_glGenPathsNV_loader (int a0) nothrow @nogc {
  glGenPathsNV = cast(glbfn_glGenPathsNV)glbindGetProcAddress(`glGenPathsNV`);
  if (glGenPathsNV is null) assert(0, `OpenGL function 'glGenPathsNV' not found!`);
  return glGenPathsNV(a0,);
}
__gshared glbfn_glDeletePathsNV glDeletePathsNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glDeletePathsNV_loader(a0,a1,);
};
private auto glbfn_glDeletePathsNV_loader (uint a0, int a1) nothrow @nogc {
  glDeletePathsNV = cast(glbfn_glDeletePathsNV)glbindGetProcAddress(`glDeletePathsNV`);
  if (glDeletePathsNV is null) assert(0, `OpenGL function 'glDeletePathsNV' not found!`);
  glDeletePathsNV(a0,a1,);
}
__gshared glbfn_glIsPathNV glIsPathNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsPathNV_loader(a0,);
};
private auto glbfn_glIsPathNV_loader (uint a0) nothrow @nogc {
  glIsPathNV = cast(glbfn_glIsPathNV)glbindGetProcAddress(`glIsPathNV`);
  if (glIsPathNV is null) assert(0, `OpenGL function 'glIsPathNV' not found!`);
  return glIsPathNV(a0,);
}
__gshared glbfn_glPathCommandsNV glPathCommandsNV = function void (uint a0, int a1, const(ubyte)* a2, int a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glPathCommandsNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glPathCommandsNV_loader (uint a0, int a1, const(ubyte)* a2, int a3, uint a4, const(void)* a5) nothrow @nogc {
  glPathCommandsNV = cast(glbfn_glPathCommandsNV)glbindGetProcAddress(`glPathCommandsNV`);
  if (glPathCommandsNV is null) assert(0, `OpenGL function 'glPathCommandsNV' not found!`);
  glPathCommandsNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glPathCoordsNV glPathCoordsNV = function void (uint a0, int a1, uint a2, const(void)* a3) nothrow @nogc {
  glbfn_glPathCoordsNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glPathCoordsNV_loader (uint a0, int a1, uint a2, const(void)* a3) nothrow @nogc {
  glPathCoordsNV = cast(glbfn_glPathCoordsNV)glbindGetProcAddress(`glPathCoordsNV`);
  if (glPathCoordsNV is null) assert(0, `OpenGL function 'glPathCoordsNV' not found!`);
  glPathCoordsNV(a0,a1,a2,a3,);
}
__gshared glbfn_glPathSubCommandsNV glPathSubCommandsNV = function void (uint a0, int a1, int a2, int a3, const(ubyte)* a4, int a5, uint a6, const(void)* a7) nothrow @nogc {
  glbfn_glPathSubCommandsNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glPathSubCommandsNV_loader (uint a0, int a1, int a2, int a3, const(ubyte)* a4, int a5, uint a6, const(void)* a7) nothrow @nogc {
  glPathSubCommandsNV = cast(glbfn_glPathSubCommandsNV)glbindGetProcAddress(`glPathSubCommandsNV`);
  if (glPathSubCommandsNV is null) assert(0, `OpenGL function 'glPathSubCommandsNV' not found!`);
  glPathSubCommandsNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glPathSubCoordsNV glPathSubCoordsNV = function void (uint a0, int a1, int a2, uint a3, const(void)* a4) nothrow @nogc {
  glbfn_glPathSubCoordsNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glPathSubCoordsNV_loader (uint a0, int a1, int a2, uint a3, const(void)* a4) nothrow @nogc {
  glPathSubCoordsNV = cast(glbfn_glPathSubCoordsNV)glbindGetProcAddress(`glPathSubCoordsNV`);
  if (glPathSubCoordsNV is null) assert(0, `OpenGL function 'glPathSubCoordsNV' not found!`);
  glPathSubCoordsNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glPathStringNV glPathStringNV = function void (uint a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glbfn_glPathStringNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glPathStringNV_loader (uint a0, uint a1, int a2, const(void)* a3) nothrow @nogc {
  glPathStringNV = cast(glbfn_glPathStringNV)glbindGetProcAddress(`glPathStringNV`);
  if (glPathStringNV is null) assert(0, `OpenGL function 'glPathStringNV' not found!`);
  glPathStringNV(a0,a1,a2,a3,);
}
__gshared glbfn_glPathGlyphsNV glPathGlyphsNV = function void (uint a0, uint a1, const(void)* a2, uint a3, int a4, uint a5, const(void)* a6, uint a7, uint a8, float a9) nothrow @nogc {
  glbfn_glPathGlyphsNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glPathGlyphsNV_loader (uint a0, uint a1, const(void)* a2, uint a3, int a4, uint a5, const(void)* a6, uint a7, uint a8, float a9) nothrow @nogc {
  glPathGlyphsNV = cast(glbfn_glPathGlyphsNV)glbindGetProcAddress(`glPathGlyphsNV`);
  if (glPathGlyphsNV is null) assert(0, `OpenGL function 'glPathGlyphsNV' not found!`);
  glPathGlyphsNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glPathGlyphRangeNV glPathGlyphRangeNV = function void (uint a0, uint a1, const(void)* a2, uint a3, uint a4, int a5, uint a6, uint a7, float a8) nothrow @nogc {
  glbfn_glPathGlyphRangeNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glPathGlyphRangeNV_loader (uint a0, uint a1, const(void)* a2, uint a3, uint a4, int a5, uint a6, uint a7, float a8) nothrow @nogc {
  glPathGlyphRangeNV = cast(glbfn_glPathGlyphRangeNV)glbindGetProcAddress(`glPathGlyphRangeNV`);
  if (glPathGlyphRangeNV is null) assert(0, `OpenGL function 'glPathGlyphRangeNV' not found!`);
  glPathGlyphRangeNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glWeightPathsNV glWeightPathsNV = function void (uint a0, int a1, const(uint)* a2, const(float)* a3) nothrow @nogc {
  glbfn_glWeightPathsNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glWeightPathsNV_loader (uint a0, int a1, const(uint)* a2, const(float)* a3) nothrow @nogc {
  glWeightPathsNV = cast(glbfn_glWeightPathsNV)glbindGetProcAddress(`glWeightPathsNV`);
  if (glWeightPathsNV is null) assert(0, `OpenGL function 'glWeightPathsNV' not found!`);
  glWeightPathsNV(a0,a1,a2,a3,);
}
__gshared glbfn_glCopyPathNV glCopyPathNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glCopyPathNV_loader(a0,a1,);
};
private auto glbfn_glCopyPathNV_loader (uint a0, uint a1) nothrow @nogc {
  glCopyPathNV = cast(glbfn_glCopyPathNV)glbindGetProcAddress(`glCopyPathNV`);
  if (glCopyPathNV is null) assert(0, `OpenGL function 'glCopyPathNV' not found!`);
  glCopyPathNV(a0,a1,);
}
__gshared glbfn_glInterpolatePathsNV glInterpolatePathsNV = function void (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glbfn_glInterpolatePathsNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glInterpolatePathsNV_loader (uint a0, uint a1, uint a2, float a3) nothrow @nogc {
  glInterpolatePathsNV = cast(glbfn_glInterpolatePathsNV)glbindGetProcAddress(`glInterpolatePathsNV`);
  if (glInterpolatePathsNV is null) assert(0, `OpenGL function 'glInterpolatePathsNV' not found!`);
  glInterpolatePathsNV(a0,a1,a2,a3,);
}
__gshared glbfn_glTransformPathNV glTransformPathNV = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glTransformPathNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTransformPathNV_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glTransformPathNV = cast(glbfn_glTransformPathNV)glbindGetProcAddress(`glTransformPathNV`);
  if (glTransformPathNV is null) assert(0, `OpenGL function 'glTransformPathNV' not found!`);
  glTransformPathNV(a0,a1,a2,a3,);
}
__gshared glbfn_glPathParameterivNV glPathParameterivNV = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glPathParameterivNV_loader(a0,a1,a2,);
};
private auto glbfn_glPathParameterivNV_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glPathParameterivNV = cast(glbfn_glPathParameterivNV)glbindGetProcAddress(`glPathParameterivNV`);
  if (glPathParameterivNV is null) assert(0, `OpenGL function 'glPathParameterivNV' not found!`);
  glPathParameterivNV(a0,a1,a2,);
}
__gshared glbfn_glPathParameteriNV glPathParameteriNV = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glPathParameteriNV_loader(a0,a1,a2,);
};
private auto glbfn_glPathParameteriNV_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glPathParameteriNV = cast(glbfn_glPathParameteriNV)glbindGetProcAddress(`glPathParameteriNV`);
  if (glPathParameteriNV is null) assert(0, `OpenGL function 'glPathParameteriNV' not found!`);
  glPathParameteriNV(a0,a1,a2,);
}
__gshared glbfn_glPathParameterfvNV glPathParameterfvNV = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glPathParameterfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glPathParameterfvNV_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glPathParameterfvNV = cast(glbfn_glPathParameterfvNV)glbindGetProcAddress(`glPathParameterfvNV`);
  if (glPathParameterfvNV is null) assert(0, `OpenGL function 'glPathParameterfvNV' not found!`);
  glPathParameterfvNV(a0,a1,a2,);
}
__gshared glbfn_glPathParameterfNV glPathParameterfNV = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glPathParameterfNV_loader(a0,a1,a2,);
};
private auto glbfn_glPathParameterfNV_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glPathParameterfNV = cast(glbfn_glPathParameterfNV)glbindGetProcAddress(`glPathParameterfNV`);
  if (glPathParameterfNV is null) assert(0, `OpenGL function 'glPathParameterfNV' not found!`);
  glPathParameterfNV(a0,a1,a2,);
}
__gshared glbfn_glPathDashArrayNV glPathDashArrayNV = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glPathDashArrayNV_loader(a0,a1,a2,);
};
private auto glbfn_glPathDashArrayNV_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glPathDashArrayNV = cast(glbfn_glPathDashArrayNV)glbindGetProcAddress(`glPathDashArrayNV`);
  if (glPathDashArrayNV is null) assert(0, `OpenGL function 'glPathDashArrayNV' not found!`);
  glPathDashArrayNV(a0,a1,a2,);
}
__gshared glbfn_glPathStencilFuncNV glPathStencilFuncNV = function void (uint a0, int a1, uint a2) nothrow @nogc {
  glbfn_glPathStencilFuncNV_loader(a0,a1,a2,);
};
private auto glbfn_glPathStencilFuncNV_loader (uint a0, int a1, uint a2) nothrow @nogc {
  glPathStencilFuncNV = cast(glbfn_glPathStencilFuncNV)glbindGetProcAddress(`glPathStencilFuncNV`);
  if (glPathStencilFuncNV is null) assert(0, `OpenGL function 'glPathStencilFuncNV' not found!`);
  glPathStencilFuncNV(a0,a1,a2,);
}
__gshared glbfn_glPathStencilDepthOffsetNV glPathStencilDepthOffsetNV = function void (float a0, float a1) nothrow @nogc {
  glbfn_glPathStencilDepthOffsetNV_loader(a0,a1,);
};
private auto glbfn_glPathStencilDepthOffsetNV_loader (float a0, float a1) nothrow @nogc {
  glPathStencilDepthOffsetNV = cast(glbfn_glPathStencilDepthOffsetNV)glbindGetProcAddress(`glPathStencilDepthOffsetNV`);
  if (glPathStencilDepthOffsetNV is null) assert(0, `OpenGL function 'glPathStencilDepthOffsetNV' not found!`);
  glPathStencilDepthOffsetNV(a0,a1,);
}
__gshared glbfn_glStencilFillPathNV glStencilFillPathNV = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glStencilFillPathNV_loader(a0,a1,a2,);
};
private auto glbfn_glStencilFillPathNV_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glStencilFillPathNV = cast(glbfn_glStencilFillPathNV)glbindGetProcAddress(`glStencilFillPathNV`);
  if (glStencilFillPathNV is null) assert(0, `OpenGL function 'glStencilFillPathNV' not found!`);
  glStencilFillPathNV(a0,a1,a2,);
}
__gshared glbfn_glStencilStrokePathNV glStencilStrokePathNV = function void (uint a0, int a1, uint a2) nothrow @nogc {
  glbfn_glStencilStrokePathNV_loader(a0,a1,a2,);
};
private auto glbfn_glStencilStrokePathNV_loader (uint a0, int a1, uint a2) nothrow @nogc {
  glStencilStrokePathNV = cast(glbfn_glStencilStrokePathNV)glbindGetProcAddress(`glStencilStrokePathNV`);
  if (glStencilStrokePathNV is null) assert(0, `OpenGL function 'glStencilStrokePathNV' not found!`);
  glStencilStrokePathNV(a0,a1,a2,);
}
__gshared glbfn_glStencilFillPathInstancedNV glStencilFillPathInstancedNV = function void (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, uint a6, const(float)* a7) nothrow @nogc {
  glbfn_glStencilFillPathInstancedNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glStencilFillPathInstancedNV_loader (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, uint a6, const(float)* a7) nothrow @nogc {
  glStencilFillPathInstancedNV = cast(glbfn_glStencilFillPathInstancedNV)glbindGetProcAddress(`glStencilFillPathInstancedNV`);
  if (glStencilFillPathInstancedNV is null) assert(0, `OpenGL function 'glStencilFillPathInstancedNV' not found!`);
  glStencilFillPathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glStencilStrokePathInstancedNV glStencilStrokePathInstancedNV = function void (int a0, uint a1, const(void)* a2, uint a3, int a4, uint a5, uint a6, const(float)* a7) nothrow @nogc {
  glbfn_glStencilStrokePathInstancedNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glStencilStrokePathInstancedNV_loader (int a0, uint a1, const(void)* a2, uint a3, int a4, uint a5, uint a6, const(float)* a7) nothrow @nogc {
  glStencilStrokePathInstancedNV = cast(glbfn_glStencilStrokePathInstancedNV)glbindGetProcAddress(`glStencilStrokePathInstancedNV`);
  if (glStencilStrokePathInstancedNV is null) assert(0, `OpenGL function 'glStencilStrokePathInstancedNV' not found!`);
  glStencilStrokePathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glPathCoverDepthFuncNV glPathCoverDepthFuncNV = function void (uint a0) nothrow @nogc {
  glbfn_glPathCoverDepthFuncNV_loader(a0,);
};
private auto glbfn_glPathCoverDepthFuncNV_loader (uint a0) nothrow @nogc {
  glPathCoverDepthFuncNV = cast(glbfn_glPathCoverDepthFuncNV)glbindGetProcAddress(`glPathCoverDepthFuncNV`);
  if (glPathCoverDepthFuncNV is null) assert(0, `OpenGL function 'glPathCoverDepthFuncNV' not found!`);
  glPathCoverDepthFuncNV(a0,);
}
__gshared glbfn_glCoverFillPathNV glCoverFillPathNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glCoverFillPathNV_loader(a0,a1,);
};
private auto glbfn_glCoverFillPathNV_loader (uint a0, uint a1) nothrow @nogc {
  glCoverFillPathNV = cast(glbfn_glCoverFillPathNV)glbindGetProcAddress(`glCoverFillPathNV`);
  if (glCoverFillPathNV is null) assert(0, `OpenGL function 'glCoverFillPathNV' not found!`);
  glCoverFillPathNV(a0,a1,);
}
__gshared glbfn_glCoverStrokePathNV glCoverStrokePathNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glCoverStrokePathNV_loader(a0,a1,);
};
private auto glbfn_glCoverStrokePathNV_loader (uint a0, uint a1) nothrow @nogc {
  glCoverStrokePathNV = cast(glbfn_glCoverStrokePathNV)glbindGetProcAddress(`glCoverStrokePathNV`);
  if (glCoverStrokePathNV is null) assert(0, `OpenGL function 'glCoverStrokePathNV' not found!`);
  glCoverStrokePathNV(a0,a1,);
}
__gshared glbfn_glCoverFillPathInstancedNV glCoverFillPathInstancedNV = function void (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, const(float)* a6) nothrow @nogc {
  glbfn_glCoverFillPathInstancedNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCoverFillPathInstancedNV_loader (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, const(float)* a6) nothrow @nogc {
  glCoverFillPathInstancedNV = cast(glbfn_glCoverFillPathInstancedNV)glbindGetProcAddress(`glCoverFillPathInstancedNV`);
  if (glCoverFillPathInstancedNV is null) assert(0, `OpenGL function 'glCoverFillPathInstancedNV' not found!`);
  glCoverFillPathInstancedNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glCoverStrokePathInstancedNV glCoverStrokePathInstancedNV = function void (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, const(float)* a6) nothrow @nogc {
  glbfn_glCoverStrokePathInstancedNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glCoverStrokePathInstancedNV_loader (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, const(float)* a6) nothrow @nogc {
  glCoverStrokePathInstancedNV = cast(glbfn_glCoverStrokePathInstancedNV)glbindGetProcAddress(`glCoverStrokePathInstancedNV`);
  if (glCoverStrokePathInstancedNV is null) assert(0, `OpenGL function 'glCoverStrokePathInstancedNV' not found!`);
  glCoverStrokePathInstancedNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetPathParameterivNV glGetPathParameterivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetPathParameterivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetPathParameterivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetPathParameterivNV = cast(glbfn_glGetPathParameterivNV)glbindGetProcAddress(`glGetPathParameterivNV`);
  if (glGetPathParameterivNV is null) assert(0, `OpenGL function 'glGetPathParameterivNV' not found!`);
  glGetPathParameterivNV(a0,a1,a2,);
}
__gshared glbfn_glGetPathParameterfvNV glGetPathParameterfvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetPathParameterfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetPathParameterfvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetPathParameterfvNV = cast(glbfn_glGetPathParameterfvNV)glbindGetProcAddress(`glGetPathParameterfvNV`);
  if (glGetPathParameterfvNV is null) assert(0, `OpenGL function 'glGetPathParameterfvNV' not found!`);
  glGetPathParameterfvNV(a0,a1,a2,);
}
__gshared glbfn_glGetPathCommandsNV glGetPathCommandsNV = function void (uint a0, ubyte* a1) nothrow @nogc {
  glbfn_glGetPathCommandsNV_loader(a0,a1,);
};
private auto glbfn_glGetPathCommandsNV_loader (uint a0, ubyte* a1) nothrow @nogc {
  glGetPathCommandsNV = cast(glbfn_glGetPathCommandsNV)glbindGetProcAddress(`glGetPathCommandsNV`);
  if (glGetPathCommandsNV is null) assert(0, `OpenGL function 'glGetPathCommandsNV' not found!`);
  glGetPathCommandsNV(a0,a1,);
}
__gshared glbfn_glGetPathCoordsNV glGetPathCoordsNV = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetPathCoordsNV_loader(a0,a1,);
};
private auto glbfn_glGetPathCoordsNV_loader (uint a0, float* a1) nothrow @nogc {
  glGetPathCoordsNV = cast(glbfn_glGetPathCoordsNV)glbindGetProcAddress(`glGetPathCoordsNV`);
  if (glGetPathCoordsNV is null) assert(0, `OpenGL function 'glGetPathCoordsNV' not found!`);
  glGetPathCoordsNV(a0,a1,);
}
__gshared glbfn_glGetPathDashArrayNV glGetPathDashArrayNV = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetPathDashArrayNV_loader(a0,a1,);
};
private auto glbfn_glGetPathDashArrayNV_loader (uint a0, float* a1) nothrow @nogc {
  glGetPathDashArrayNV = cast(glbfn_glGetPathDashArrayNV)glbindGetProcAddress(`glGetPathDashArrayNV`);
  if (glGetPathDashArrayNV is null) assert(0, `OpenGL function 'glGetPathDashArrayNV' not found!`);
  glGetPathDashArrayNV(a0,a1,);
}
__gshared glbfn_glGetPathMetricsNV glGetPathMetricsNV = function void (uint a0, int a1, uint a2, const(void)* a3, uint a4, int a5, float* a6) nothrow @nogc {
  glbfn_glGetPathMetricsNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetPathMetricsNV_loader (uint a0, int a1, uint a2, const(void)* a3, uint a4, int a5, float* a6) nothrow @nogc {
  glGetPathMetricsNV = cast(glbfn_glGetPathMetricsNV)glbindGetProcAddress(`glGetPathMetricsNV`);
  if (glGetPathMetricsNV is null) assert(0, `OpenGL function 'glGetPathMetricsNV' not found!`);
  glGetPathMetricsNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetPathMetricRangeNV glGetPathMetricRangeNV = function void (uint a0, uint a1, int a2, int a3, float* a4) nothrow @nogc {
  glbfn_glGetPathMetricRangeNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetPathMetricRangeNV_loader (uint a0, uint a1, int a2, int a3, float* a4) nothrow @nogc {
  glGetPathMetricRangeNV = cast(glbfn_glGetPathMetricRangeNV)glbindGetProcAddress(`glGetPathMetricRangeNV`);
  if (glGetPathMetricRangeNV is null) assert(0, `OpenGL function 'glGetPathMetricRangeNV' not found!`);
  glGetPathMetricRangeNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetPathSpacingNV glGetPathSpacingNV = function void (uint a0, int a1, uint a2, const(void)* a3, uint a4, float a5, float a6, uint a7, float* a8) nothrow @nogc {
  glbfn_glGetPathSpacingNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glGetPathSpacingNV_loader (uint a0, int a1, uint a2, const(void)* a3, uint a4, float a5, float a6, uint a7, float* a8) nothrow @nogc {
  glGetPathSpacingNV = cast(glbfn_glGetPathSpacingNV)glbindGetProcAddress(`glGetPathSpacingNV`);
  if (glGetPathSpacingNV is null) assert(0, `OpenGL function 'glGetPathSpacingNV' not found!`);
  glGetPathSpacingNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glIsPointInFillPathNV glIsPointInFillPathNV = function ubyte (uint a0, uint a1, float a2, float a3) nothrow @nogc {
  return glbfn_glIsPointInFillPathNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glIsPointInFillPathNV_loader (uint a0, uint a1, float a2, float a3) nothrow @nogc {
  glIsPointInFillPathNV = cast(glbfn_glIsPointInFillPathNV)glbindGetProcAddress(`glIsPointInFillPathNV`);
  if (glIsPointInFillPathNV is null) assert(0, `OpenGL function 'glIsPointInFillPathNV' not found!`);
  return glIsPointInFillPathNV(a0,a1,a2,a3,);
}
__gshared glbfn_glIsPointInStrokePathNV glIsPointInStrokePathNV = function ubyte (uint a0, float a1, float a2) nothrow @nogc {
  return glbfn_glIsPointInStrokePathNV_loader(a0,a1,a2,);
};
private auto glbfn_glIsPointInStrokePathNV_loader (uint a0, float a1, float a2) nothrow @nogc {
  glIsPointInStrokePathNV = cast(glbfn_glIsPointInStrokePathNV)glbindGetProcAddress(`glIsPointInStrokePathNV`);
  if (glIsPointInStrokePathNV is null) assert(0, `OpenGL function 'glIsPointInStrokePathNV' not found!`);
  return glIsPointInStrokePathNV(a0,a1,a2,);
}
__gshared glbfn_glGetPathLengthNV glGetPathLengthNV = function float (uint a0, int a1, int a2) nothrow @nogc {
  return glbfn_glGetPathLengthNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetPathLengthNV_loader (uint a0, int a1, int a2) nothrow @nogc {
  glGetPathLengthNV = cast(glbfn_glGetPathLengthNV)glbindGetProcAddress(`glGetPathLengthNV`);
  if (glGetPathLengthNV is null) assert(0, `OpenGL function 'glGetPathLengthNV' not found!`);
  return glGetPathLengthNV(a0,a1,a2,);
}
__gshared glbfn_glPointAlongPathNV glPointAlongPathNV = function ubyte (uint a0, int a1, int a2, float a3, float* a4, float* a5, float* a6, float* a7) nothrow @nogc {
  return glbfn_glPointAlongPathNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glPointAlongPathNV_loader (uint a0, int a1, int a2, float a3, float* a4, float* a5, float* a6, float* a7) nothrow @nogc {
  glPointAlongPathNV = cast(glbfn_glPointAlongPathNV)glbindGetProcAddress(`glPointAlongPathNV`);
  if (glPointAlongPathNV is null) assert(0, `OpenGL function 'glPointAlongPathNV' not found!`);
  return glPointAlongPathNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glMatrixLoad3x2fNV glMatrixLoad3x2fNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixLoad3x2fNV_loader(a0,a1,);
};
private auto glbfn_glMatrixLoad3x2fNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixLoad3x2fNV = cast(glbfn_glMatrixLoad3x2fNV)glbindGetProcAddress(`glMatrixLoad3x2fNV`);
  if (glMatrixLoad3x2fNV is null) assert(0, `OpenGL function 'glMatrixLoad3x2fNV' not found!`);
  glMatrixLoad3x2fNV(a0,a1,);
}
__gshared glbfn_glMatrixLoad3x3fNV glMatrixLoad3x3fNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixLoad3x3fNV_loader(a0,a1,);
};
private auto glbfn_glMatrixLoad3x3fNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixLoad3x3fNV = cast(glbfn_glMatrixLoad3x3fNV)glbindGetProcAddress(`glMatrixLoad3x3fNV`);
  if (glMatrixLoad3x3fNV is null) assert(0, `OpenGL function 'glMatrixLoad3x3fNV' not found!`);
  glMatrixLoad3x3fNV(a0,a1,);
}
__gshared glbfn_glMatrixLoadTranspose3x3fNV glMatrixLoadTranspose3x3fNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixLoadTranspose3x3fNV_loader(a0,a1,);
};
private auto glbfn_glMatrixLoadTranspose3x3fNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixLoadTranspose3x3fNV = cast(glbfn_glMatrixLoadTranspose3x3fNV)glbindGetProcAddress(`glMatrixLoadTranspose3x3fNV`);
  if (glMatrixLoadTranspose3x3fNV is null) assert(0, `OpenGL function 'glMatrixLoadTranspose3x3fNV' not found!`);
  glMatrixLoadTranspose3x3fNV(a0,a1,);
}
__gshared glbfn_glMatrixMult3x2fNV glMatrixMult3x2fNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixMult3x2fNV_loader(a0,a1,);
};
private auto glbfn_glMatrixMult3x2fNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixMult3x2fNV = cast(glbfn_glMatrixMult3x2fNV)glbindGetProcAddress(`glMatrixMult3x2fNV`);
  if (glMatrixMult3x2fNV is null) assert(0, `OpenGL function 'glMatrixMult3x2fNV' not found!`);
  glMatrixMult3x2fNV(a0,a1,);
}
__gshared glbfn_glMatrixMult3x3fNV glMatrixMult3x3fNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixMult3x3fNV_loader(a0,a1,);
};
private auto glbfn_glMatrixMult3x3fNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixMult3x3fNV = cast(glbfn_glMatrixMult3x3fNV)glbindGetProcAddress(`glMatrixMult3x3fNV`);
  if (glMatrixMult3x3fNV is null) assert(0, `OpenGL function 'glMatrixMult3x3fNV' not found!`);
  glMatrixMult3x3fNV(a0,a1,);
}
__gshared glbfn_glMatrixMultTranspose3x3fNV glMatrixMultTranspose3x3fNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glMatrixMultTranspose3x3fNV_loader(a0,a1,);
};
private auto glbfn_glMatrixMultTranspose3x3fNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glMatrixMultTranspose3x3fNV = cast(glbfn_glMatrixMultTranspose3x3fNV)glbindGetProcAddress(`glMatrixMultTranspose3x3fNV`);
  if (glMatrixMultTranspose3x3fNV is null) assert(0, `OpenGL function 'glMatrixMultTranspose3x3fNV' not found!`);
  glMatrixMultTranspose3x3fNV(a0,a1,);
}
__gshared glbfn_glStencilThenCoverFillPathNV glStencilThenCoverFillPathNV = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glStencilThenCoverFillPathNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glStencilThenCoverFillPathNV_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glStencilThenCoverFillPathNV = cast(glbfn_glStencilThenCoverFillPathNV)glbindGetProcAddress(`glStencilThenCoverFillPathNV`);
  if (glStencilThenCoverFillPathNV is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathNV' not found!`);
  glStencilThenCoverFillPathNV(a0,a1,a2,a3,);
}
__gshared glbfn_glStencilThenCoverStrokePathNV glStencilThenCoverStrokePathNV = function void (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glStencilThenCoverStrokePathNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glStencilThenCoverStrokePathNV_loader (uint a0, int a1, uint a2, uint a3) nothrow @nogc {
  glStencilThenCoverStrokePathNV = cast(glbfn_glStencilThenCoverStrokePathNV)glbindGetProcAddress(`glStencilThenCoverStrokePathNV`);
  if (glStencilThenCoverStrokePathNV is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathNV' not found!`);
  glStencilThenCoverStrokePathNV(a0,a1,a2,a3,);
}
__gshared glbfn_glStencilThenCoverFillPathInstancedNV glStencilThenCoverFillPathInstancedNV = function void (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, uint a6, uint a7, const(float)* a8) nothrow @nogc {
  glbfn_glStencilThenCoverFillPathInstancedNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glStencilThenCoverFillPathInstancedNV_loader (int a0, uint a1, const(void)* a2, uint a3, uint a4, uint a5, uint a6, uint a7, const(float)* a8) nothrow @nogc {
  glStencilThenCoverFillPathInstancedNV = cast(glbfn_glStencilThenCoverFillPathInstancedNV)glbindGetProcAddress(`glStencilThenCoverFillPathInstancedNV`);
  if (glStencilThenCoverFillPathInstancedNV is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathInstancedNV' not found!`);
  glStencilThenCoverFillPathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glStencilThenCoverStrokePathInstancedNV glStencilThenCoverStrokePathInstancedNV = function void (int a0, uint a1, const(void)* a2, uint a3, int a4, uint a5, uint a6, uint a7, const(float)* a8) nothrow @nogc {
  glbfn_glStencilThenCoverStrokePathInstancedNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glStencilThenCoverStrokePathInstancedNV_loader (int a0, uint a1, const(void)* a2, uint a3, int a4, uint a5, uint a6, uint a7, const(float)* a8) nothrow @nogc {
  glStencilThenCoverStrokePathInstancedNV = cast(glbfn_glStencilThenCoverStrokePathInstancedNV)glbindGetProcAddress(`glStencilThenCoverStrokePathInstancedNV`);
  if (glStencilThenCoverStrokePathInstancedNV is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathInstancedNV' not found!`);
  glStencilThenCoverStrokePathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glPathGlyphIndexRangeNV glPathGlyphIndexRangeNV = function uint (uint a0, const(void)* a1, uint a2, uint a3, float a4, uint* a5) nothrow @nogc {
  return glbfn_glPathGlyphIndexRangeNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glPathGlyphIndexRangeNV_loader (uint a0, const(void)* a1, uint a2, uint a3, float a4, uint* a5) nothrow @nogc {
  glPathGlyphIndexRangeNV = cast(glbfn_glPathGlyphIndexRangeNV)glbindGetProcAddress(`glPathGlyphIndexRangeNV`);
  if (glPathGlyphIndexRangeNV is null) assert(0, `OpenGL function 'glPathGlyphIndexRangeNV' not found!`);
  return glPathGlyphIndexRangeNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glPathGlyphIndexArrayNV glPathGlyphIndexArrayNV = function uint (uint a0, uint a1, const(void)* a2, uint a3, uint a4, int a5, uint a6, float a7) nothrow @nogc {
  return glbfn_glPathGlyphIndexArrayNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glPathGlyphIndexArrayNV_loader (uint a0, uint a1, const(void)* a2, uint a3, uint a4, int a5, uint a6, float a7) nothrow @nogc {
  glPathGlyphIndexArrayNV = cast(glbfn_glPathGlyphIndexArrayNV)glbindGetProcAddress(`glPathGlyphIndexArrayNV`);
  if (glPathGlyphIndexArrayNV is null) assert(0, `OpenGL function 'glPathGlyphIndexArrayNV' not found!`);
  return glPathGlyphIndexArrayNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glPathMemoryGlyphIndexArrayNV glPathMemoryGlyphIndexArrayNV = function uint (uint a0, uint a1, int a2, const(void)* a3, int a4, uint a5, int a6, uint a7, float a8) nothrow @nogc {
  return glbfn_glPathMemoryGlyphIndexArrayNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glPathMemoryGlyphIndexArrayNV_loader (uint a0, uint a1, int a2, const(void)* a3, int a4, uint a5, int a6, uint a7, float a8) nothrow @nogc {
  glPathMemoryGlyphIndexArrayNV = cast(glbfn_glPathMemoryGlyphIndexArrayNV)glbindGetProcAddress(`glPathMemoryGlyphIndexArrayNV`);
  if (glPathMemoryGlyphIndexArrayNV is null) assert(0, `OpenGL function 'glPathMemoryGlyphIndexArrayNV' not found!`);
  return glPathMemoryGlyphIndexArrayNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glProgramPathFragmentInputGenNV glProgramPathFragmentInputGenNV = function void (uint a0, int a1, uint a2, int a3, const(float)* a4) nothrow @nogc {
  glbfn_glProgramPathFragmentInputGenNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glProgramPathFragmentInputGenNV_loader (uint a0, int a1, uint a2, int a3, const(float)* a4) nothrow @nogc {
  glProgramPathFragmentInputGenNV = cast(glbfn_glProgramPathFragmentInputGenNV)glbindGetProcAddress(`glProgramPathFragmentInputGenNV`);
  if (glProgramPathFragmentInputGenNV is null) assert(0, `OpenGL function 'glProgramPathFragmentInputGenNV' not found!`);
  glProgramPathFragmentInputGenNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetProgramResourcefvNV glGetProgramResourcefvNV = function void (uint a0, uint a1, uint a2, int a3, const(uint)* a4, int a5, int* a6, float* a7) nothrow @nogc {
  glbfn_glGetProgramResourcefvNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glGetProgramResourcefvNV_loader (uint a0, uint a1, uint a2, int a3, const(uint)* a4, int a5, int* a6, float* a7) nothrow @nogc {
  glGetProgramResourcefvNV = cast(glbfn_glGetProgramResourcefvNV)glbindGetProcAddress(`glGetProgramResourcefvNV`);
  if (glGetProgramResourcefvNV is null) assert(0, `OpenGL function 'glGetProgramResourcefvNV' not found!`);
  glGetProgramResourcefvNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glPathColorGenNV glPathColorGenNV = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glPathColorGenNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glPathColorGenNV_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glPathColorGenNV = cast(glbfn_glPathColorGenNV)glbindGetProcAddress(`glPathColorGenNV`);
  if (glPathColorGenNV is null) assert(0, `OpenGL function 'glPathColorGenNV' not found!`);
  glPathColorGenNV(a0,a1,a2,a3,);
}
__gshared glbfn_glPathTexGenNV glPathTexGenNV = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glPathTexGenNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glPathTexGenNV_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glPathTexGenNV = cast(glbfn_glPathTexGenNV)glbindGetProcAddress(`glPathTexGenNV`);
  if (glPathTexGenNV is null) assert(0, `OpenGL function 'glPathTexGenNV' not found!`);
  glPathTexGenNV(a0,a1,a2,a3,);
}
__gshared glbfn_glPathFogGenNV glPathFogGenNV = function void (uint a0) nothrow @nogc {
  glbfn_glPathFogGenNV_loader(a0,);
};
private auto glbfn_glPathFogGenNV_loader (uint a0) nothrow @nogc {
  glPathFogGenNV = cast(glbfn_glPathFogGenNV)glbindGetProcAddress(`glPathFogGenNV`);
  if (glPathFogGenNV is null) assert(0, `OpenGL function 'glPathFogGenNV' not found!`);
  glPathFogGenNV(a0,);
}
__gshared glbfn_glGetPathColorGenivNV glGetPathColorGenivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetPathColorGenivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetPathColorGenivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetPathColorGenivNV = cast(glbfn_glGetPathColorGenivNV)glbindGetProcAddress(`glGetPathColorGenivNV`);
  if (glGetPathColorGenivNV is null) assert(0, `OpenGL function 'glGetPathColorGenivNV' not found!`);
  glGetPathColorGenivNV(a0,a1,a2,);
}
__gshared glbfn_glGetPathColorGenfvNV glGetPathColorGenfvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetPathColorGenfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetPathColorGenfvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetPathColorGenfvNV = cast(glbfn_glGetPathColorGenfvNV)glbindGetProcAddress(`glGetPathColorGenfvNV`);
  if (glGetPathColorGenfvNV is null) assert(0, `OpenGL function 'glGetPathColorGenfvNV' not found!`);
  glGetPathColorGenfvNV(a0,a1,a2,);
}
__gshared glbfn_glGetPathTexGenivNV glGetPathTexGenivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetPathTexGenivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetPathTexGenivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetPathTexGenivNV = cast(glbfn_glGetPathTexGenivNV)glbindGetProcAddress(`glGetPathTexGenivNV`);
  if (glGetPathTexGenivNV is null) assert(0, `OpenGL function 'glGetPathTexGenivNV' not found!`);
  glGetPathTexGenivNV(a0,a1,a2,);
}
__gshared glbfn_glGetPathTexGenfvNV glGetPathTexGenfvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetPathTexGenfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetPathTexGenfvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetPathTexGenfvNV = cast(glbfn_glGetPathTexGenfvNV)glbindGetProcAddress(`glGetPathTexGenfvNV`);
  if (glGetPathTexGenfvNV is null) assert(0, `OpenGL function 'glGetPathTexGenfvNV' not found!`);
  glGetPathTexGenfvNV(a0,a1,a2,);
}
__gshared glbfn_glPixelDataRangeNV glPixelDataRangeNV = function void (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glbfn_glPixelDataRangeNV_loader(a0,a1,a2,);
};
private auto glbfn_glPixelDataRangeNV_loader (uint a0, int a1, const(void)* a2) nothrow @nogc {
  glPixelDataRangeNV = cast(glbfn_glPixelDataRangeNV)glbindGetProcAddress(`glPixelDataRangeNV`);
  if (glPixelDataRangeNV is null) assert(0, `OpenGL function 'glPixelDataRangeNV' not found!`);
  glPixelDataRangeNV(a0,a1,a2,);
}
__gshared glbfn_glFlushPixelDataRangeNV glFlushPixelDataRangeNV = function void (uint a0) nothrow @nogc {
  glbfn_glFlushPixelDataRangeNV_loader(a0,);
};
private auto glbfn_glFlushPixelDataRangeNV_loader (uint a0) nothrow @nogc {
  glFlushPixelDataRangeNV = cast(glbfn_glFlushPixelDataRangeNV)glbindGetProcAddress(`glFlushPixelDataRangeNV`);
  if (glFlushPixelDataRangeNV is null) assert(0, `OpenGL function 'glFlushPixelDataRangeNV' not found!`);
  glFlushPixelDataRangeNV(a0,);
}
__gshared glbfn_glPointParameteriNV glPointParameteriNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPointParameteriNV_loader(a0,a1,);
};
private auto glbfn_glPointParameteriNV_loader (uint a0, int a1) nothrow @nogc {
  glPointParameteriNV = cast(glbfn_glPointParameteriNV)glbindGetProcAddress(`glPointParameteriNV`);
  if (glPointParameteriNV is null) assert(0, `OpenGL function 'glPointParameteriNV' not found!`);
  glPointParameteriNV(a0,a1,);
}
__gshared glbfn_glPointParameterivNV glPointParameterivNV = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glPointParameterivNV_loader(a0,a1,);
};
private auto glbfn_glPointParameterivNV_loader (uint a0, const(int)* a1) nothrow @nogc {
  glPointParameterivNV = cast(glbfn_glPointParameterivNV)glbindGetProcAddress(`glPointParameterivNV`);
  if (glPointParameterivNV is null) assert(0, `OpenGL function 'glPointParameterivNV' not found!`);
  glPointParameterivNV(a0,a1,);
}
__gshared glbfn_glPresentFrameKeyedNV glPresentFrameKeyedNV = function void (uint a0, ulong a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10) nothrow @nogc {
  glbfn_glPresentFrameKeyedNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glPresentFrameKeyedNV_loader (uint a0, ulong a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10) nothrow @nogc {
  glPresentFrameKeyedNV = cast(glbfn_glPresentFrameKeyedNV)glbindGetProcAddress(`glPresentFrameKeyedNV`);
  if (glPresentFrameKeyedNV is null) assert(0, `OpenGL function 'glPresentFrameKeyedNV' not found!`);
  glPresentFrameKeyedNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glPresentFrameDualFillNV glPresentFrameDualFillNV = function void (uint a0, ulong a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10, uint a11, uint a12) nothrow @nogc {
  glbfn_glPresentFrameDualFillNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
private auto glbfn_glPresentFrameDualFillNV_loader (uint a0, ulong a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9, uint a10, uint a11, uint a12) nothrow @nogc {
  glPresentFrameDualFillNV = cast(glbfn_glPresentFrameDualFillNV)glbindGetProcAddress(`glPresentFrameDualFillNV`);
  if (glPresentFrameDualFillNV is null) assert(0, `OpenGL function 'glPresentFrameDualFillNV' not found!`);
  glPresentFrameDualFillNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
}
__gshared glbfn_glGetVideoivNV glGetVideoivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVideoivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVideoivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVideoivNV = cast(glbfn_glGetVideoivNV)glbindGetProcAddress(`glGetVideoivNV`);
  if (glGetVideoivNV is null) assert(0, `OpenGL function 'glGetVideoivNV' not found!`);
  glGetVideoivNV(a0,a1,a2,);
}
__gshared glbfn_glGetVideouivNV glGetVideouivNV = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetVideouivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVideouivNV_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetVideouivNV = cast(glbfn_glGetVideouivNV)glbindGetProcAddress(`glGetVideouivNV`);
  if (glGetVideouivNV is null) assert(0, `OpenGL function 'glGetVideouivNV' not found!`);
  glGetVideouivNV(a0,a1,a2,);
}
__gshared glbfn_glGetVideoi64vNV glGetVideoi64vNV = function void (uint a0, uint a1, long* a2) nothrow @nogc {
  glbfn_glGetVideoi64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVideoi64vNV_loader (uint a0, uint a1, long* a2) nothrow @nogc {
  glGetVideoi64vNV = cast(glbfn_glGetVideoi64vNV)glbindGetProcAddress(`glGetVideoi64vNV`);
  if (glGetVideoi64vNV is null) assert(0, `OpenGL function 'glGetVideoi64vNV' not found!`);
  glGetVideoi64vNV(a0,a1,a2,);
}
__gshared glbfn_glGetVideoui64vNV glGetVideoui64vNV = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetVideoui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVideoui64vNV_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetVideoui64vNV = cast(glbfn_glGetVideoui64vNV)glbindGetProcAddress(`glGetVideoui64vNV`);
  if (glGetVideoui64vNV is null) assert(0, `OpenGL function 'glGetVideoui64vNV' not found!`);
  glGetVideoui64vNV(a0,a1,a2,);
}
__gshared glbfn_glPrimitiveRestartNV glPrimitiveRestartNV = function void () nothrow @nogc {
  glbfn_glPrimitiveRestartNV_loader();
};
private auto glbfn_glPrimitiveRestartNV_loader () nothrow @nogc {
  glPrimitiveRestartNV = cast(glbfn_glPrimitiveRestartNV)glbindGetProcAddress(`glPrimitiveRestartNV`);
  if (glPrimitiveRestartNV is null) assert(0, `OpenGL function 'glPrimitiveRestartNV' not found!`);
  glPrimitiveRestartNV();
}
__gshared glbfn_glPrimitiveRestartIndexNV glPrimitiveRestartIndexNV = function void (uint a0) nothrow @nogc {
  glbfn_glPrimitiveRestartIndexNV_loader(a0,);
};
private auto glbfn_glPrimitiveRestartIndexNV_loader (uint a0) nothrow @nogc {
  glPrimitiveRestartIndexNV = cast(glbfn_glPrimitiveRestartIndexNV)glbindGetProcAddress(`glPrimitiveRestartIndexNV`);
  if (glPrimitiveRestartIndexNV is null) assert(0, `OpenGL function 'glPrimitiveRestartIndexNV' not found!`);
  glPrimitiveRestartIndexNV(a0,);
}
__gshared glbfn_glCombinerParameterfvNV glCombinerParameterfvNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glCombinerParameterfvNV_loader(a0,a1,);
};
private auto glbfn_glCombinerParameterfvNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glCombinerParameterfvNV = cast(glbfn_glCombinerParameterfvNV)glbindGetProcAddress(`glCombinerParameterfvNV`);
  if (glCombinerParameterfvNV is null) assert(0, `OpenGL function 'glCombinerParameterfvNV' not found!`);
  glCombinerParameterfvNV(a0,a1,);
}
__gshared glbfn_glCombinerParameterfNV glCombinerParameterfNV = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glCombinerParameterfNV_loader(a0,a1,);
};
private auto glbfn_glCombinerParameterfNV_loader (uint a0, float a1) nothrow @nogc {
  glCombinerParameterfNV = cast(glbfn_glCombinerParameterfNV)glbindGetProcAddress(`glCombinerParameterfNV`);
  if (glCombinerParameterfNV is null) assert(0, `OpenGL function 'glCombinerParameterfNV' not found!`);
  glCombinerParameterfNV(a0,a1,);
}
__gshared glbfn_glCombinerParameterivNV glCombinerParameterivNV = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glCombinerParameterivNV_loader(a0,a1,);
};
private auto glbfn_glCombinerParameterivNV_loader (uint a0, const(int)* a1) nothrow @nogc {
  glCombinerParameterivNV = cast(glbfn_glCombinerParameterivNV)glbindGetProcAddress(`glCombinerParameterivNV`);
  if (glCombinerParameterivNV is null) assert(0, `OpenGL function 'glCombinerParameterivNV' not found!`);
  glCombinerParameterivNV(a0,a1,);
}
__gshared glbfn_glCombinerParameteriNV glCombinerParameteriNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glCombinerParameteriNV_loader(a0,a1,);
};
private auto glbfn_glCombinerParameteriNV_loader (uint a0, int a1) nothrow @nogc {
  glCombinerParameteriNV = cast(glbfn_glCombinerParameteriNV)glbindGetProcAddress(`glCombinerParameteriNV`);
  if (glCombinerParameteriNV is null) assert(0, `OpenGL function 'glCombinerParameteriNV' not found!`);
  glCombinerParameteriNV(a0,a1,);
}
__gshared glbfn_glCombinerInputNV glCombinerInputNV = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glbfn_glCombinerInputNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glCombinerInputNV_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5) nothrow @nogc {
  glCombinerInputNV = cast(glbfn_glCombinerInputNV)glbindGetProcAddress(`glCombinerInputNV`);
  if (glCombinerInputNV is null) assert(0, `OpenGL function 'glCombinerInputNV' not found!`);
  glCombinerInputNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glCombinerOutputNV glCombinerOutputNV = function void (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, ubyte a7, ubyte a8, ubyte a9) nothrow @nogc {
  glbfn_glCombinerOutputNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glCombinerOutputNV_loader (uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, ubyte a7, ubyte a8, ubyte a9) nothrow @nogc {
  glCombinerOutputNV = cast(glbfn_glCombinerOutputNV)glbindGetProcAddress(`glCombinerOutputNV`);
  if (glCombinerOutputNV is null) assert(0, `OpenGL function 'glCombinerOutputNV' not found!`);
  glCombinerOutputNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glFinalCombinerInputNV glFinalCombinerInputNV = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glFinalCombinerInputNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFinalCombinerInputNV_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glFinalCombinerInputNV = cast(glbfn_glFinalCombinerInputNV)glbindGetProcAddress(`glFinalCombinerInputNV`);
  if (glFinalCombinerInputNV is null) assert(0, `OpenGL function 'glFinalCombinerInputNV' not found!`);
  glFinalCombinerInputNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV = function void (uint a0, uint a1, uint a2, uint a3, float* a4) nothrow @nogc {
  glbfn_glGetCombinerInputParameterfvNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetCombinerInputParameterfvNV_loader (uint a0, uint a1, uint a2, uint a3, float* a4) nothrow @nogc {
  glGetCombinerInputParameterfvNV = cast(glbfn_glGetCombinerInputParameterfvNV)glbindGetProcAddress(`glGetCombinerInputParameterfvNV`);
  if (glGetCombinerInputParameterfvNV is null) assert(0, `OpenGL function 'glGetCombinerInputParameterfvNV' not found!`);
  glGetCombinerInputParameterfvNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetCombinerInputParameterivNV glGetCombinerInputParameterivNV = function void (uint a0, uint a1, uint a2, uint a3, int* a4) nothrow @nogc {
  glbfn_glGetCombinerInputParameterivNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glGetCombinerInputParameterivNV_loader (uint a0, uint a1, uint a2, uint a3, int* a4) nothrow @nogc {
  glGetCombinerInputParameterivNV = cast(glbfn_glGetCombinerInputParameterivNV)glbindGetProcAddress(`glGetCombinerInputParameterivNV`);
  if (glGetCombinerInputParameterivNV is null) assert(0, `OpenGL function 'glGetCombinerInputParameterivNV' not found!`);
  glGetCombinerInputParameterivNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetCombinerOutputParameterfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetCombinerOutputParameterfvNV_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetCombinerOutputParameterfvNV = cast(glbfn_glGetCombinerOutputParameterfvNV)glbindGetProcAddress(`glGetCombinerOutputParameterfvNV`);
  if (glGetCombinerOutputParameterfvNV is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterfvNV' not found!`);
  glGetCombinerOutputParameterfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetCombinerOutputParameterivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetCombinerOutputParameterivNV_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetCombinerOutputParameterivNV = cast(glbfn_glGetCombinerOutputParameterivNV)glbindGetProcAddress(`glGetCombinerOutputParameterivNV`);
  if (glGetCombinerOutputParameterivNV is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterivNV' not found!`);
  glGetCombinerOutputParameterivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetFinalCombinerInputParameterfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetFinalCombinerInputParameterfvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetFinalCombinerInputParameterfvNV = cast(glbfn_glGetFinalCombinerInputParameterfvNV)glbindGetProcAddress(`glGetFinalCombinerInputParameterfvNV`);
  if (glGetFinalCombinerInputParameterfvNV is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterfvNV' not found!`);
  glGetFinalCombinerInputParameterfvNV(a0,a1,a2,);
}
__gshared glbfn_glGetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetFinalCombinerInputParameterivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetFinalCombinerInputParameterivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetFinalCombinerInputParameterivNV = cast(glbfn_glGetFinalCombinerInputParameterivNV)glbindGetProcAddress(`glGetFinalCombinerInputParameterivNV`);
  if (glGetFinalCombinerInputParameterivNV is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterivNV' not found!`);
  glGetFinalCombinerInputParameterivNV(a0,a1,a2,);
}
__gshared glbfn_glCombinerStageParameterfvNV glCombinerStageParameterfvNV = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glCombinerStageParameterfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glCombinerStageParameterfvNV_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glCombinerStageParameterfvNV = cast(glbfn_glCombinerStageParameterfvNV)glbindGetProcAddress(`glCombinerStageParameterfvNV`);
  if (glCombinerStageParameterfvNV is null) assert(0, `OpenGL function 'glCombinerStageParameterfvNV' not found!`);
  glCombinerStageParameterfvNV(a0,a1,a2,);
}
__gshared glbfn_glGetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetCombinerStageParameterfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetCombinerStageParameterfvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetCombinerStageParameterfvNV = cast(glbfn_glGetCombinerStageParameterfvNV)glbindGetProcAddress(`glGetCombinerStageParameterfvNV`);
  if (glGetCombinerStageParameterfvNV is null) assert(0, `OpenGL function 'glGetCombinerStageParameterfvNV' not found!`);
  glGetCombinerStageParameterfvNV(a0,a1,a2,);
}
__gshared glbfn_glFramebufferSampleLocationsfvNV glFramebufferSampleLocationsfvNV = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glFramebufferSampleLocationsfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glFramebufferSampleLocationsfvNV_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glFramebufferSampleLocationsfvNV = cast(glbfn_glFramebufferSampleLocationsfvNV)glbindGetProcAddress(`glFramebufferSampleLocationsfvNV`);
  if (glFramebufferSampleLocationsfvNV is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvNV' not found!`);
  glFramebufferSampleLocationsfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glNamedFramebufferSampleLocationsfvNV glNamedFramebufferSampleLocationsfvNV = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glNamedFramebufferSampleLocationsfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glNamedFramebufferSampleLocationsfvNV_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glNamedFramebufferSampleLocationsfvNV = cast(glbfn_glNamedFramebufferSampleLocationsfvNV)glbindGetProcAddress(`glNamedFramebufferSampleLocationsfvNV`);
  if (glNamedFramebufferSampleLocationsfvNV is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvNV' not found!`);
  glNamedFramebufferSampleLocationsfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glResolveDepthValuesNV glResolveDepthValuesNV = function void () nothrow @nogc {
  glbfn_glResolveDepthValuesNV_loader();
};
private auto glbfn_glResolveDepthValuesNV_loader () nothrow @nogc {
  glResolveDepthValuesNV = cast(glbfn_glResolveDepthValuesNV)glbindGetProcAddress(`glResolveDepthValuesNV`);
  if (glResolveDepthValuesNV is null) assert(0, `OpenGL function 'glResolveDepthValuesNV' not found!`);
  glResolveDepthValuesNV();
}
__gshared glbfn_glMakeBufferResidentNV glMakeBufferResidentNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glMakeBufferResidentNV_loader(a0,a1,);
};
private auto glbfn_glMakeBufferResidentNV_loader (uint a0, uint a1) nothrow @nogc {
  glMakeBufferResidentNV = cast(glbfn_glMakeBufferResidentNV)glbindGetProcAddress(`glMakeBufferResidentNV`);
  if (glMakeBufferResidentNV is null) assert(0, `OpenGL function 'glMakeBufferResidentNV' not found!`);
  glMakeBufferResidentNV(a0,a1,);
}
__gshared glbfn_glMakeBufferNonResidentNV glMakeBufferNonResidentNV = function void (uint a0) nothrow @nogc {
  glbfn_glMakeBufferNonResidentNV_loader(a0,);
};
private auto glbfn_glMakeBufferNonResidentNV_loader (uint a0) nothrow @nogc {
  glMakeBufferNonResidentNV = cast(glbfn_glMakeBufferNonResidentNV)glbindGetProcAddress(`glMakeBufferNonResidentNV`);
  if (glMakeBufferNonResidentNV is null) assert(0, `OpenGL function 'glMakeBufferNonResidentNV' not found!`);
  glMakeBufferNonResidentNV(a0,);
}
__gshared glbfn_glIsBufferResidentNV glIsBufferResidentNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsBufferResidentNV_loader(a0,);
};
private auto glbfn_glIsBufferResidentNV_loader (uint a0) nothrow @nogc {
  glIsBufferResidentNV = cast(glbfn_glIsBufferResidentNV)glbindGetProcAddress(`glIsBufferResidentNV`);
  if (glIsBufferResidentNV is null) assert(0, `OpenGL function 'glIsBufferResidentNV' not found!`);
  return glIsBufferResidentNV(a0,);
}
__gshared glbfn_glMakeNamedBufferResidentNV glMakeNamedBufferResidentNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glMakeNamedBufferResidentNV_loader(a0,a1,);
};
private auto glbfn_glMakeNamedBufferResidentNV_loader (uint a0, uint a1) nothrow @nogc {
  glMakeNamedBufferResidentNV = cast(glbfn_glMakeNamedBufferResidentNV)glbindGetProcAddress(`glMakeNamedBufferResidentNV`);
  if (glMakeNamedBufferResidentNV is null) assert(0, `OpenGL function 'glMakeNamedBufferResidentNV' not found!`);
  glMakeNamedBufferResidentNV(a0,a1,);
}
__gshared glbfn_glMakeNamedBufferNonResidentNV glMakeNamedBufferNonResidentNV = function void (uint a0) nothrow @nogc {
  glbfn_glMakeNamedBufferNonResidentNV_loader(a0,);
};
private auto glbfn_glMakeNamedBufferNonResidentNV_loader (uint a0) nothrow @nogc {
  glMakeNamedBufferNonResidentNV = cast(glbfn_glMakeNamedBufferNonResidentNV)glbindGetProcAddress(`glMakeNamedBufferNonResidentNV`);
  if (glMakeNamedBufferNonResidentNV is null) assert(0, `OpenGL function 'glMakeNamedBufferNonResidentNV' not found!`);
  glMakeNamedBufferNonResidentNV(a0,);
}
__gshared glbfn_glIsNamedBufferResidentNV glIsNamedBufferResidentNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsNamedBufferResidentNV_loader(a0,);
};
private auto glbfn_glIsNamedBufferResidentNV_loader (uint a0) nothrow @nogc {
  glIsNamedBufferResidentNV = cast(glbfn_glIsNamedBufferResidentNV)glbindGetProcAddress(`glIsNamedBufferResidentNV`);
  if (glIsNamedBufferResidentNV is null) assert(0, `OpenGL function 'glIsNamedBufferResidentNV' not found!`);
  return glIsNamedBufferResidentNV(a0,);
}
__gshared glbfn_glGetBufferParameterui64vNV glGetBufferParameterui64vNV = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetBufferParameterui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetBufferParameterui64vNV_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetBufferParameterui64vNV = cast(glbfn_glGetBufferParameterui64vNV)glbindGetProcAddress(`glGetBufferParameterui64vNV`);
  if (glGetBufferParameterui64vNV is null) assert(0, `OpenGL function 'glGetBufferParameterui64vNV' not found!`);
  glGetBufferParameterui64vNV(a0,a1,a2,);
}
__gshared glbfn_glGetNamedBufferParameterui64vNV glGetNamedBufferParameterui64vNV = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetNamedBufferParameterui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetNamedBufferParameterui64vNV_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetNamedBufferParameterui64vNV = cast(glbfn_glGetNamedBufferParameterui64vNV)glbindGetProcAddress(`glGetNamedBufferParameterui64vNV`);
  if (glGetNamedBufferParameterui64vNV is null) assert(0, `OpenGL function 'glGetNamedBufferParameterui64vNV' not found!`);
  glGetNamedBufferParameterui64vNV(a0,a1,a2,);
}
__gshared glbfn_glGetIntegerui64vNV glGetIntegerui64vNV = function void (uint a0, ulong* a1) nothrow @nogc {
  glbfn_glGetIntegerui64vNV_loader(a0,a1,);
};
private auto glbfn_glGetIntegerui64vNV_loader (uint a0, ulong* a1) nothrow @nogc {
  glGetIntegerui64vNV = cast(glbfn_glGetIntegerui64vNV)glbindGetProcAddress(`glGetIntegerui64vNV`);
  if (glGetIntegerui64vNV is null) assert(0, `OpenGL function 'glGetIntegerui64vNV' not found!`);
  glGetIntegerui64vNV(a0,a1,);
}
__gshared glbfn_glUniformui64NV glUniformui64NV = function void (int a0, ulong a1) nothrow @nogc {
  glbfn_glUniformui64NV_loader(a0,a1,);
};
private auto glbfn_glUniformui64NV_loader (int a0, ulong a1) nothrow @nogc {
  glUniformui64NV = cast(glbfn_glUniformui64NV)glbindGetProcAddress(`glUniformui64NV`);
  if (glUniformui64NV is null) assert(0, `OpenGL function 'glUniformui64NV' not found!`);
  glUniformui64NV(a0,a1,);
}
__gshared glbfn_glUniformui64vNV glUniformui64vNV = function void (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glbfn_glUniformui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glUniformui64vNV_loader (int a0, int a1, const(ulong)* a2) nothrow @nogc {
  glUniformui64vNV = cast(glbfn_glUniformui64vNV)glbindGetProcAddress(`glUniformui64vNV`);
  if (glUniformui64vNV is null) assert(0, `OpenGL function 'glUniformui64vNV' not found!`);
  glUniformui64vNV(a0,a1,a2,);
}
__gshared glbfn_glProgramUniformui64NV glProgramUniformui64NV = function void (uint a0, int a1, ulong a2) nothrow @nogc {
  glbfn_glProgramUniformui64NV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramUniformui64NV_loader (uint a0, int a1, ulong a2) nothrow @nogc {
  glProgramUniformui64NV = cast(glbfn_glProgramUniformui64NV)glbindGetProcAddress(`glProgramUniformui64NV`);
  if (glProgramUniformui64NV is null) assert(0, `OpenGL function 'glProgramUniformui64NV' not found!`);
  glProgramUniformui64NV(a0,a1,a2,);
}
__gshared glbfn_glProgramUniformui64vNV glProgramUniformui64vNV = function void (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glbfn_glProgramUniformui64vNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramUniformui64vNV_loader (uint a0, int a1, int a2, const(ulong)* a3) nothrow @nogc {
  glProgramUniformui64vNV = cast(glbfn_glProgramUniformui64vNV)glbindGetProcAddress(`glProgramUniformui64vNV`);
  if (glProgramUniformui64vNV is null) assert(0, `OpenGL function 'glProgramUniformui64vNV' not found!`);
  glProgramUniformui64vNV(a0,a1,a2,a3,);
}
__gshared glbfn_glTextureBarrierNV glTextureBarrierNV = function void () nothrow @nogc {
  glbfn_glTextureBarrierNV_loader();
};
private auto glbfn_glTextureBarrierNV_loader () nothrow @nogc {
  glTextureBarrierNV = cast(glbfn_glTextureBarrierNV)glbindGetProcAddress(`glTextureBarrierNV`);
  if (glTextureBarrierNV is null) assert(0, `OpenGL function 'glTextureBarrierNV' not found!`);
  glTextureBarrierNV();
}
__gshared glbfn_glTexImage2DMultisampleCoverageNV glTexImage2DMultisampleCoverageNV = function void (uint a0, int a1, int a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glbfn_glTexImage2DMultisampleCoverageNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTexImage2DMultisampleCoverageNV_loader (uint a0, int a1, int a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glTexImage2DMultisampleCoverageNV = cast(glbfn_glTexImage2DMultisampleCoverageNV)glbindGetProcAddress(`glTexImage2DMultisampleCoverageNV`);
  if (glTexImage2DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTexImage2DMultisampleCoverageNV' not found!`);
  glTexImage2DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTexImage3DMultisampleCoverageNV glTexImage3DMultisampleCoverageNV = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glbfn_glTexImage3DMultisampleCoverageNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTexImage3DMultisampleCoverageNV_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glTexImage3DMultisampleCoverageNV = cast(glbfn_glTexImage3DMultisampleCoverageNV)glbindGetProcAddress(`glTexImage3DMultisampleCoverageNV`);
  if (glTexImage3DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTexImage3DMultisampleCoverageNV' not found!`);
  glTexImage3DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTextureImage2DMultisampleNV glTextureImage2DMultisampleNV = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glbfn_glTextureImage2DMultisampleNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glTextureImage2DMultisampleNV_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, ubyte a6) nothrow @nogc {
  glTextureImage2DMultisampleNV = cast(glbfn_glTextureImage2DMultisampleNV)glbindGetProcAddress(`glTextureImage2DMultisampleNV`);
  if (glTextureImage2DMultisampleNV is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleNV' not found!`);
  glTextureImage2DMultisampleNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glTextureImage3DMultisampleNV glTextureImage3DMultisampleNV = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glbfn_glTextureImage3DMultisampleNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTextureImage3DMultisampleNV_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glTextureImage3DMultisampleNV = cast(glbfn_glTextureImage3DMultisampleNV)glbindGetProcAddress(`glTextureImage3DMultisampleNV`);
  if (glTextureImage3DMultisampleNV is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleNV' not found!`);
  glTextureImage3DMultisampleNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTextureImage2DMultisampleCoverageNV glTextureImage2DMultisampleCoverageNV = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glbfn_glTextureImage2DMultisampleCoverageNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTextureImage2DMultisampleCoverageNV_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, ubyte a7) nothrow @nogc {
  glTextureImage2DMultisampleCoverageNV = cast(glbfn_glTextureImage2DMultisampleCoverageNV)glbindGetProcAddress(`glTextureImage2DMultisampleCoverageNV`);
  if (glTextureImage2DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleCoverageNV' not found!`);
  glTextureImage2DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTextureImage3DMultisampleCoverageNV glTextureImage3DMultisampleCoverageNV = function void (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, ubyte a8) nothrow @nogc {
  glbfn_glTextureImage3DMultisampleCoverageNV_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTextureImage3DMultisampleCoverageNV_loader (uint a0, uint a1, int a2, int a3, int a4, int a5, int a6, int a7, ubyte a8) nothrow @nogc {
  glTextureImage3DMultisampleCoverageNV = cast(glbfn_glTextureImage3DMultisampleCoverageNV)glbindGetProcAddress(`glTextureImage3DMultisampleCoverageNV`);
  if (glTextureImage3DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleCoverageNV' not found!`);
  glTextureImage3DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glBeginTransformFeedbackNV glBeginTransformFeedbackNV = function void (uint a0) nothrow @nogc {
  glbfn_glBeginTransformFeedbackNV_loader(a0,);
};
private auto glbfn_glBeginTransformFeedbackNV_loader (uint a0) nothrow @nogc {
  glBeginTransformFeedbackNV = cast(glbfn_glBeginTransformFeedbackNV)glbindGetProcAddress(`glBeginTransformFeedbackNV`);
  if (glBeginTransformFeedbackNV is null) assert(0, `OpenGL function 'glBeginTransformFeedbackNV' not found!`);
  glBeginTransformFeedbackNV(a0,);
}
__gshared glbfn_glEndTransformFeedbackNV glEndTransformFeedbackNV = function void () nothrow @nogc {
  glbfn_glEndTransformFeedbackNV_loader();
};
private auto glbfn_glEndTransformFeedbackNV_loader () nothrow @nogc {
  glEndTransformFeedbackNV = cast(glbfn_glEndTransformFeedbackNV)glbindGetProcAddress(`glEndTransformFeedbackNV`);
  if (glEndTransformFeedbackNV is null) assert(0, `OpenGL function 'glEndTransformFeedbackNV' not found!`);
  glEndTransformFeedbackNV();
}
__gshared glbfn_glTransformFeedbackAttribsNV glTransformFeedbackAttribsNV = function void (int a0, const(int)* a1, uint a2) nothrow @nogc {
  glbfn_glTransformFeedbackAttribsNV_loader(a0,a1,a2,);
};
private auto glbfn_glTransformFeedbackAttribsNV_loader (int a0, const(int)* a1, uint a2) nothrow @nogc {
  glTransformFeedbackAttribsNV = cast(glbfn_glTransformFeedbackAttribsNV)glbindGetProcAddress(`glTransformFeedbackAttribsNV`);
  if (glTransformFeedbackAttribsNV is null) assert(0, `OpenGL function 'glTransformFeedbackAttribsNV' not found!`);
  glTransformFeedbackAttribsNV(a0,a1,a2,);
}
__gshared glbfn_glBindBufferRangeNV glBindBufferRangeNV = function void (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glbfn_glBindBufferRangeNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glBindBufferRangeNV_loader (uint a0, uint a1, uint a2, int a3, int a4) nothrow @nogc {
  glBindBufferRangeNV = cast(glbfn_glBindBufferRangeNV)glbindGetProcAddress(`glBindBufferRangeNV`);
  if (glBindBufferRangeNV is null) assert(0, `OpenGL function 'glBindBufferRangeNV' not found!`);
  glBindBufferRangeNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBindBufferOffsetNV glBindBufferOffsetNV = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glBindBufferOffsetNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBindBufferOffsetNV_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glBindBufferOffsetNV = cast(glbfn_glBindBufferOffsetNV)glbindGetProcAddress(`glBindBufferOffsetNV`);
  if (glBindBufferOffsetNV is null) assert(0, `OpenGL function 'glBindBufferOffsetNV' not found!`);
  glBindBufferOffsetNV(a0,a1,a2,a3,);
}
__gshared glbfn_glBindBufferBaseNV glBindBufferBaseNV = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glBindBufferBaseNV_loader(a0,a1,a2,);
};
private auto glbfn_glBindBufferBaseNV_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glBindBufferBaseNV = cast(glbfn_glBindBufferBaseNV)glbindGetProcAddress(`glBindBufferBaseNV`);
  if (glBindBufferBaseNV is null) assert(0, `OpenGL function 'glBindBufferBaseNV' not found!`);
  glBindBufferBaseNV(a0,a1,a2,);
}
__gshared glbfn_glTransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV = function void (uint a0, int a1, const(int)* a2, uint a3) nothrow @nogc {
  glbfn_glTransformFeedbackVaryingsNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTransformFeedbackVaryingsNV_loader (uint a0, int a1, const(int)* a2, uint a3) nothrow @nogc {
  glTransformFeedbackVaryingsNV = cast(glbfn_glTransformFeedbackVaryingsNV)glbindGetProcAddress(`glTransformFeedbackVaryingsNV`);
  if (glTransformFeedbackVaryingsNV is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsNV' not found!`);
  glTransformFeedbackVaryingsNV(a0,a1,a2,a3,);
}
__gshared glbfn_glActiveVaryingNV glActiveVaryingNV = function void (uint a0, const(char)* a1) nothrow @nogc {
  glbfn_glActiveVaryingNV_loader(a0,a1,);
};
private auto glbfn_glActiveVaryingNV_loader (uint a0, const(char)* a1) nothrow @nogc {
  glActiveVaryingNV = cast(glbfn_glActiveVaryingNV)glbindGetProcAddress(`glActiveVaryingNV`);
  if (glActiveVaryingNV is null) assert(0, `OpenGL function 'glActiveVaryingNV' not found!`);
  glActiveVaryingNV(a0,a1,);
}
__gshared glbfn_glGetVaryingLocationNV glGetVaryingLocationNV = function int (uint a0, const(char)* a1) nothrow @nogc {
  return glbfn_glGetVaryingLocationNV_loader(a0,a1,);
};
private auto glbfn_glGetVaryingLocationNV_loader (uint a0, const(char)* a1) nothrow @nogc {
  glGetVaryingLocationNV = cast(glbfn_glGetVaryingLocationNV)glbindGetProcAddress(`glGetVaryingLocationNV`);
  if (glGetVaryingLocationNV is null) assert(0, `OpenGL function 'glGetVaryingLocationNV' not found!`);
  return glGetVaryingLocationNV(a0,a1,);
}
__gshared glbfn_glGetActiveVaryingNV glGetActiveVaryingNV = function void (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glbfn_glGetActiveVaryingNV_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glGetActiveVaryingNV_loader (uint a0, uint a1, int a2, int* a3, int* a4, uint* a5, char* a6) nothrow @nogc {
  glGetActiveVaryingNV = cast(glbfn_glGetActiveVaryingNV)glbindGetProcAddress(`glGetActiveVaryingNV`);
  if (glGetActiveVaryingNV is null) assert(0, `OpenGL function 'glGetActiveVaryingNV' not found!`);
  glGetActiveVaryingNV(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glGetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTransformFeedbackVaryingNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetTransformFeedbackVaryingNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTransformFeedbackVaryingNV = cast(glbfn_glGetTransformFeedbackVaryingNV)glbindGetProcAddress(`glGetTransformFeedbackVaryingNV`);
  if (glGetTransformFeedbackVaryingNV is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingNV' not found!`);
  glGetTransformFeedbackVaryingNV(a0,a1,a2,);
}
__gshared glbfn_glTransformFeedbackStreamAttribsNV glTransformFeedbackStreamAttribsNV = function void (int a0, const(int)* a1, int a2, const(int)* a3, uint a4) nothrow @nogc {
  glbfn_glTransformFeedbackStreamAttribsNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTransformFeedbackStreamAttribsNV_loader (int a0, const(int)* a1, int a2, const(int)* a3, uint a4) nothrow @nogc {
  glTransformFeedbackStreamAttribsNV = cast(glbfn_glTransformFeedbackStreamAttribsNV)glbindGetProcAddress(`glTransformFeedbackStreamAttribsNV`);
  if (glTransformFeedbackStreamAttribsNV is null) assert(0, `OpenGL function 'glTransformFeedbackStreamAttribsNV' not found!`);
  glTransformFeedbackStreamAttribsNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glBindTransformFeedbackNV glBindTransformFeedbackNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindTransformFeedbackNV_loader(a0,a1,);
};
private auto glbfn_glBindTransformFeedbackNV_loader (uint a0, uint a1) nothrow @nogc {
  glBindTransformFeedbackNV = cast(glbfn_glBindTransformFeedbackNV)glbindGetProcAddress(`glBindTransformFeedbackNV`);
  if (glBindTransformFeedbackNV is null) assert(0, `OpenGL function 'glBindTransformFeedbackNV' not found!`);
  glBindTransformFeedbackNV(a0,a1,);
}
__gshared glbfn_glDeleteTransformFeedbacksNV glDeleteTransformFeedbacksNV = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteTransformFeedbacksNV_loader(a0,a1,);
};
private auto glbfn_glDeleteTransformFeedbacksNV_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteTransformFeedbacksNV = cast(glbfn_glDeleteTransformFeedbacksNV)glbindGetProcAddress(`glDeleteTransformFeedbacksNV`);
  if (glDeleteTransformFeedbacksNV is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacksNV' not found!`);
  glDeleteTransformFeedbacksNV(a0,a1,);
}
__gshared glbfn_glGenTransformFeedbacksNV glGenTransformFeedbacksNV = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenTransformFeedbacksNV_loader(a0,a1,);
};
private auto glbfn_glGenTransformFeedbacksNV_loader (int a0, uint* a1) nothrow @nogc {
  glGenTransformFeedbacksNV = cast(glbfn_glGenTransformFeedbacksNV)glbindGetProcAddress(`glGenTransformFeedbacksNV`);
  if (glGenTransformFeedbacksNV is null) assert(0, `OpenGL function 'glGenTransformFeedbacksNV' not found!`);
  glGenTransformFeedbacksNV(a0,a1,);
}
__gshared glbfn_glIsTransformFeedbackNV glIsTransformFeedbackNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsTransformFeedbackNV_loader(a0,);
};
private auto glbfn_glIsTransformFeedbackNV_loader (uint a0) nothrow @nogc {
  glIsTransformFeedbackNV = cast(glbfn_glIsTransformFeedbackNV)glbindGetProcAddress(`glIsTransformFeedbackNV`);
  if (glIsTransformFeedbackNV is null) assert(0, `OpenGL function 'glIsTransformFeedbackNV' not found!`);
  return glIsTransformFeedbackNV(a0,);
}
__gshared glbfn_glPauseTransformFeedbackNV glPauseTransformFeedbackNV = function void () nothrow @nogc {
  glbfn_glPauseTransformFeedbackNV_loader();
};
private auto glbfn_glPauseTransformFeedbackNV_loader () nothrow @nogc {
  glPauseTransformFeedbackNV = cast(glbfn_glPauseTransformFeedbackNV)glbindGetProcAddress(`glPauseTransformFeedbackNV`);
  if (glPauseTransformFeedbackNV is null) assert(0, `OpenGL function 'glPauseTransformFeedbackNV' not found!`);
  glPauseTransformFeedbackNV();
}
__gshared glbfn_glResumeTransformFeedbackNV glResumeTransformFeedbackNV = function void () nothrow @nogc {
  glbfn_glResumeTransformFeedbackNV_loader();
};
private auto glbfn_glResumeTransformFeedbackNV_loader () nothrow @nogc {
  glResumeTransformFeedbackNV = cast(glbfn_glResumeTransformFeedbackNV)glbindGetProcAddress(`glResumeTransformFeedbackNV`);
  if (glResumeTransformFeedbackNV is null) assert(0, `OpenGL function 'glResumeTransformFeedbackNV' not found!`);
  glResumeTransformFeedbackNV();
}
__gshared glbfn_glDrawTransformFeedbackNV glDrawTransformFeedbackNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glDrawTransformFeedbackNV_loader(a0,a1,);
};
private auto glbfn_glDrawTransformFeedbackNV_loader (uint a0, uint a1) nothrow @nogc {
  glDrawTransformFeedbackNV = cast(glbfn_glDrawTransformFeedbackNV)glbindGetProcAddress(`glDrawTransformFeedbackNV`);
  if (glDrawTransformFeedbackNV is null) assert(0, `OpenGL function 'glDrawTransformFeedbackNV' not found!`);
  glDrawTransformFeedbackNV(a0,a1,);
}
__gshared glbfn_glVDPAUInitNV glVDPAUInitNV = function void (const(void)* a0, const(void)* a1) nothrow @nogc {
  glbfn_glVDPAUInitNV_loader(a0,a1,);
};
private auto glbfn_glVDPAUInitNV_loader (const(void)* a0, const(void)* a1) nothrow @nogc {
  glVDPAUInitNV = cast(glbfn_glVDPAUInitNV)glbindGetProcAddress(`glVDPAUInitNV`);
  if (glVDPAUInitNV is null) assert(0, `OpenGL function 'glVDPAUInitNV' not found!`);
  glVDPAUInitNV(a0,a1,);
}
__gshared glbfn_glVDPAUFiniNV glVDPAUFiniNV = function void () nothrow @nogc {
  glbfn_glVDPAUFiniNV_loader();
};
private auto glbfn_glVDPAUFiniNV_loader () nothrow @nogc {
  glVDPAUFiniNV = cast(glbfn_glVDPAUFiniNV)glbindGetProcAddress(`glVDPAUFiniNV`);
  if (glVDPAUFiniNV is null) assert(0, `OpenGL function 'glVDPAUFiniNV' not found!`);
  glVDPAUFiniNV();
}
__gshared glbfn_glVDPAURegisterVideoSurfaceNV glVDPAURegisterVideoSurfaceNV = function int (const(void)* a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  return glbfn_glVDPAURegisterVideoSurfaceNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVDPAURegisterVideoSurfaceNV_loader (const(void)* a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glVDPAURegisterVideoSurfaceNV = cast(glbfn_glVDPAURegisterVideoSurfaceNV)glbindGetProcAddress(`glVDPAURegisterVideoSurfaceNV`);
  if (glVDPAURegisterVideoSurfaceNV is null) assert(0, `OpenGL function 'glVDPAURegisterVideoSurfaceNV' not found!`);
  return glVDPAURegisterVideoSurfaceNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVDPAURegisterOutputSurfaceNV glVDPAURegisterOutputSurfaceNV = function int (const(void)* a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  return glbfn_glVDPAURegisterOutputSurfaceNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVDPAURegisterOutputSurfaceNV_loader (const(void)* a0, uint a1, int a2, const(uint)* a3) nothrow @nogc {
  glVDPAURegisterOutputSurfaceNV = cast(glbfn_glVDPAURegisterOutputSurfaceNV)glbindGetProcAddress(`glVDPAURegisterOutputSurfaceNV`);
  if (glVDPAURegisterOutputSurfaceNV is null) assert(0, `OpenGL function 'glVDPAURegisterOutputSurfaceNV' not found!`);
  return glVDPAURegisterOutputSurfaceNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVDPAUIsSurfaceNV glVDPAUIsSurfaceNV = function ubyte (int a0) nothrow @nogc {
  return glbfn_glVDPAUIsSurfaceNV_loader(a0,);
};
private auto glbfn_glVDPAUIsSurfaceNV_loader (int a0) nothrow @nogc {
  glVDPAUIsSurfaceNV = cast(glbfn_glVDPAUIsSurfaceNV)glbindGetProcAddress(`glVDPAUIsSurfaceNV`);
  if (glVDPAUIsSurfaceNV is null) assert(0, `OpenGL function 'glVDPAUIsSurfaceNV' not found!`);
  return glVDPAUIsSurfaceNV(a0,);
}
__gshared glbfn_glVDPAUUnregisterSurfaceNV glVDPAUUnregisterSurfaceNV = function void (int a0) nothrow @nogc {
  glbfn_glVDPAUUnregisterSurfaceNV_loader(a0,);
};
private auto glbfn_glVDPAUUnregisterSurfaceNV_loader (int a0) nothrow @nogc {
  glVDPAUUnregisterSurfaceNV = cast(glbfn_glVDPAUUnregisterSurfaceNV)glbindGetProcAddress(`glVDPAUUnregisterSurfaceNV`);
  if (glVDPAUUnregisterSurfaceNV is null) assert(0, `OpenGL function 'glVDPAUUnregisterSurfaceNV' not found!`);
  glVDPAUUnregisterSurfaceNV(a0,);
}
__gshared glbfn_glVDPAUGetSurfaceivNV glVDPAUGetSurfaceivNV = function void (int a0, uint a1, int a2, int* a3, int* a4) nothrow @nogc {
  glbfn_glVDPAUGetSurfaceivNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVDPAUGetSurfaceivNV_loader (int a0, uint a1, int a2, int* a3, int* a4) nothrow @nogc {
  glVDPAUGetSurfaceivNV = cast(glbfn_glVDPAUGetSurfaceivNV)glbindGetProcAddress(`glVDPAUGetSurfaceivNV`);
  if (glVDPAUGetSurfaceivNV is null) assert(0, `OpenGL function 'glVDPAUGetSurfaceivNV' not found!`);
  glVDPAUGetSurfaceivNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVDPAUSurfaceAccessNV glVDPAUSurfaceAccessNV = function void (int a0, uint a1) nothrow @nogc {
  glbfn_glVDPAUSurfaceAccessNV_loader(a0,a1,);
};
private auto glbfn_glVDPAUSurfaceAccessNV_loader (int a0, uint a1) nothrow @nogc {
  glVDPAUSurfaceAccessNV = cast(glbfn_glVDPAUSurfaceAccessNV)glbindGetProcAddress(`glVDPAUSurfaceAccessNV`);
  if (glVDPAUSurfaceAccessNV is null) assert(0, `OpenGL function 'glVDPAUSurfaceAccessNV' not found!`);
  glVDPAUSurfaceAccessNV(a0,a1,);
}
__gshared glbfn_glVDPAUMapSurfacesNV glVDPAUMapSurfacesNV = function void (int a0, const(int)* a1) nothrow @nogc {
  glbfn_glVDPAUMapSurfacesNV_loader(a0,a1,);
};
private auto glbfn_glVDPAUMapSurfacesNV_loader (int a0, const(int)* a1) nothrow @nogc {
  glVDPAUMapSurfacesNV = cast(glbfn_glVDPAUMapSurfacesNV)glbindGetProcAddress(`glVDPAUMapSurfacesNV`);
  if (glVDPAUMapSurfacesNV is null) assert(0, `OpenGL function 'glVDPAUMapSurfacesNV' not found!`);
  glVDPAUMapSurfacesNV(a0,a1,);
}
__gshared glbfn_glVDPAUUnmapSurfacesNV glVDPAUUnmapSurfacesNV = function void (int a0, const(int)* a1) nothrow @nogc {
  glbfn_glVDPAUUnmapSurfacesNV_loader(a0,a1,);
};
private auto glbfn_glVDPAUUnmapSurfacesNV_loader (int a0, const(int)* a1) nothrow @nogc {
  glVDPAUUnmapSurfacesNV = cast(glbfn_glVDPAUUnmapSurfacesNV)glbindGetProcAddress(`glVDPAUUnmapSurfacesNV`);
  if (glVDPAUUnmapSurfacesNV is null) assert(0, `OpenGL function 'glVDPAUUnmapSurfacesNV' not found!`);
  glVDPAUUnmapSurfacesNV(a0,a1,);
}
__gshared glbfn_glFlushVertexArrayRangeNV glFlushVertexArrayRangeNV = function void () nothrow @nogc {
  glbfn_glFlushVertexArrayRangeNV_loader();
};
private auto glbfn_glFlushVertexArrayRangeNV_loader () nothrow @nogc {
  glFlushVertexArrayRangeNV = cast(glbfn_glFlushVertexArrayRangeNV)glbindGetProcAddress(`glFlushVertexArrayRangeNV`);
  if (glFlushVertexArrayRangeNV is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeNV' not found!`);
  glFlushVertexArrayRangeNV();
}
__gshared glbfn_glVertexArrayRangeNV glVertexArrayRangeNV = function void (int a0, const(void)* a1) nothrow @nogc {
  glbfn_glVertexArrayRangeNV_loader(a0,a1,);
};
private auto glbfn_glVertexArrayRangeNV_loader (int a0, const(void)* a1) nothrow @nogc {
  glVertexArrayRangeNV = cast(glbfn_glVertexArrayRangeNV)glbindGetProcAddress(`glVertexArrayRangeNV`);
  if (glVertexArrayRangeNV is null) assert(0, `OpenGL function 'glVertexArrayRangeNV' not found!`);
  glVertexArrayRangeNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL1i64NV glVertexAttribL1i64NV = function void (uint a0, long a1) nothrow @nogc {
  glbfn_glVertexAttribL1i64NV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1i64NV_loader (uint a0, long a1) nothrow @nogc {
  glVertexAttribL1i64NV = cast(glbfn_glVertexAttribL1i64NV)glbindGetProcAddress(`glVertexAttribL1i64NV`);
  if (glVertexAttribL1i64NV is null) assert(0, `OpenGL function 'glVertexAttribL1i64NV' not found!`);
  glVertexAttribL1i64NV(a0,a1,);
}
__gshared glbfn_glVertexAttribL2i64NV glVertexAttribL2i64NV = function void (uint a0, long a1, long a2) nothrow @nogc {
  glbfn_glVertexAttribL2i64NV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribL2i64NV_loader (uint a0, long a1, long a2) nothrow @nogc {
  glVertexAttribL2i64NV = cast(glbfn_glVertexAttribL2i64NV)glbindGetProcAddress(`glVertexAttribL2i64NV`);
  if (glVertexAttribL2i64NV is null) assert(0, `OpenGL function 'glVertexAttribL2i64NV' not found!`);
  glVertexAttribL2i64NV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribL3i64NV glVertexAttribL3i64NV = function void (uint a0, long a1, long a2, long a3) nothrow @nogc {
  glbfn_glVertexAttribL3i64NV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribL3i64NV_loader (uint a0, long a1, long a2, long a3) nothrow @nogc {
  glVertexAttribL3i64NV = cast(glbfn_glVertexAttribL3i64NV)glbindGetProcAddress(`glVertexAttribL3i64NV`);
  if (glVertexAttribL3i64NV is null) assert(0, `OpenGL function 'glVertexAttribL3i64NV' not found!`);
  glVertexAttribL3i64NV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribL4i64NV glVertexAttribL4i64NV = function void (uint a0, long a1, long a2, long a3, long a4) nothrow @nogc {
  glbfn_glVertexAttribL4i64NV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribL4i64NV_loader (uint a0, long a1, long a2, long a3, long a4) nothrow @nogc {
  glVertexAttribL4i64NV = cast(glbfn_glVertexAttribL4i64NV)glbindGetProcAddress(`glVertexAttribL4i64NV`);
  if (glVertexAttribL4i64NV is null) assert(0, `OpenGL function 'glVertexAttribL4i64NV' not found!`);
  glVertexAttribL4i64NV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribL1i64vNV glVertexAttribL1i64vNV = function void (uint a0, const(long)* a1) nothrow @nogc {
  glbfn_glVertexAttribL1i64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1i64vNV_loader (uint a0, const(long)* a1) nothrow @nogc {
  glVertexAttribL1i64vNV = cast(glbfn_glVertexAttribL1i64vNV)glbindGetProcAddress(`glVertexAttribL1i64vNV`);
  if (glVertexAttribL1i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL1i64vNV' not found!`);
  glVertexAttribL1i64vNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL2i64vNV glVertexAttribL2i64vNV = function void (uint a0, const(long)* a1) nothrow @nogc {
  glbfn_glVertexAttribL2i64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL2i64vNV_loader (uint a0, const(long)* a1) nothrow @nogc {
  glVertexAttribL2i64vNV = cast(glbfn_glVertexAttribL2i64vNV)glbindGetProcAddress(`glVertexAttribL2i64vNV`);
  if (glVertexAttribL2i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL2i64vNV' not found!`);
  glVertexAttribL2i64vNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL3i64vNV glVertexAttribL3i64vNV = function void (uint a0, const(long)* a1) nothrow @nogc {
  glbfn_glVertexAttribL3i64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL3i64vNV_loader (uint a0, const(long)* a1) nothrow @nogc {
  glVertexAttribL3i64vNV = cast(glbfn_glVertexAttribL3i64vNV)glbindGetProcAddress(`glVertexAttribL3i64vNV`);
  if (glVertexAttribL3i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL3i64vNV' not found!`);
  glVertexAttribL3i64vNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL4i64vNV glVertexAttribL4i64vNV = function void (uint a0, const(long)* a1) nothrow @nogc {
  glbfn_glVertexAttribL4i64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL4i64vNV_loader (uint a0, const(long)* a1) nothrow @nogc {
  glVertexAttribL4i64vNV = cast(glbfn_glVertexAttribL4i64vNV)glbindGetProcAddress(`glVertexAttribL4i64vNV`);
  if (glVertexAttribL4i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL4i64vNV' not found!`);
  glVertexAttribL4i64vNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL1ui64NV glVertexAttribL1ui64NV = function void (uint a0, ulong a1) nothrow @nogc {
  glbfn_glVertexAttribL1ui64NV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1ui64NV_loader (uint a0, ulong a1) nothrow @nogc {
  glVertexAttribL1ui64NV = cast(glbfn_glVertexAttribL1ui64NV)glbindGetProcAddress(`glVertexAttribL1ui64NV`);
  if (glVertexAttribL1ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL1ui64NV' not found!`);
  glVertexAttribL1ui64NV(a0,a1,);
}
__gshared glbfn_glVertexAttribL2ui64NV glVertexAttribL2ui64NV = function void (uint a0, ulong a1, ulong a2) nothrow @nogc {
  glbfn_glVertexAttribL2ui64NV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribL2ui64NV_loader (uint a0, ulong a1, ulong a2) nothrow @nogc {
  glVertexAttribL2ui64NV = cast(glbfn_glVertexAttribL2ui64NV)glbindGetProcAddress(`glVertexAttribL2ui64NV`);
  if (glVertexAttribL2ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL2ui64NV' not found!`);
  glVertexAttribL2ui64NV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribL3ui64NV glVertexAttribL3ui64NV = function void (uint a0, ulong a1, ulong a2, ulong a3) nothrow @nogc {
  glbfn_glVertexAttribL3ui64NV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribL3ui64NV_loader (uint a0, ulong a1, ulong a2, ulong a3) nothrow @nogc {
  glVertexAttribL3ui64NV = cast(glbfn_glVertexAttribL3ui64NV)glbindGetProcAddress(`glVertexAttribL3ui64NV`);
  if (glVertexAttribL3ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL3ui64NV' not found!`);
  glVertexAttribL3ui64NV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribL4ui64NV glVertexAttribL4ui64NV = function void (uint a0, ulong a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glbfn_glVertexAttribL4ui64NV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribL4ui64NV_loader (uint a0, ulong a1, ulong a2, ulong a3, ulong a4) nothrow @nogc {
  glVertexAttribL4ui64NV = cast(glbfn_glVertexAttribL4ui64NV)glbindGetProcAddress(`glVertexAttribL4ui64NV`);
  if (glVertexAttribL4ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL4ui64NV' not found!`);
  glVertexAttribL4ui64NV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribL1ui64vNV glVertexAttribL1ui64vNV = function void (uint a0, const(ulong)* a1) nothrow @nogc {
  glbfn_glVertexAttribL1ui64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL1ui64vNV_loader (uint a0, const(ulong)* a1) nothrow @nogc {
  glVertexAttribL1ui64vNV = cast(glbfn_glVertexAttribL1ui64vNV)glbindGetProcAddress(`glVertexAttribL1ui64vNV`);
  if (glVertexAttribL1ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vNV' not found!`);
  glVertexAttribL1ui64vNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL2ui64vNV glVertexAttribL2ui64vNV = function void (uint a0, const(ulong)* a1) nothrow @nogc {
  glbfn_glVertexAttribL2ui64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL2ui64vNV_loader (uint a0, const(ulong)* a1) nothrow @nogc {
  glVertexAttribL2ui64vNV = cast(glbfn_glVertexAttribL2ui64vNV)glbindGetProcAddress(`glVertexAttribL2ui64vNV`);
  if (glVertexAttribL2ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL2ui64vNV' not found!`);
  glVertexAttribL2ui64vNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL3ui64vNV glVertexAttribL3ui64vNV = function void (uint a0, const(ulong)* a1) nothrow @nogc {
  glbfn_glVertexAttribL3ui64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL3ui64vNV_loader (uint a0, const(ulong)* a1) nothrow @nogc {
  glVertexAttribL3ui64vNV = cast(glbfn_glVertexAttribL3ui64vNV)glbindGetProcAddress(`glVertexAttribL3ui64vNV`);
  if (glVertexAttribL3ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL3ui64vNV' not found!`);
  glVertexAttribL3ui64vNV(a0,a1,);
}
__gshared glbfn_glVertexAttribL4ui64vNV glVertexAttribL4ui64vNV = function void (uint a0, const(ulong)* a1) nothrow @nogc {
  glbfn_glVertexAttribL4ui64vNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttribL4ui64vNV_loader (uint a0, const(ulong)* a1) nothrow @nogc {
  glVertexAttribL4ui64vNV = cast(glbfn_glVertexAttribL4ui64vNV)glbindGetProcAddress(`glVertexAttribL4ui64vNV`);
  if (glVertexAttribL4ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL4ui64vNV' not found!`);
  glVertexAttribL4ui64vNV(a0,a1,);
}
__gshared glbfn_glGetVertexAttribLi64vNV glGetVertexAttribLi64vNV = function void (uint a0, uint a1, long* a2) nothrow @nogc {
  glbfn_glGetVertexAttribLi64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribLi64vNV_loader (uint a0, uint a1, long* a2) nothrow @nogc {
  glGetVertexAttribLi64vNV = cast(glbfn_glGetVertexAttribLi64vNV)glbindGetProcAddress(`glGetVertexAttribLi64vNV`);
  if (glGetVertexAttribLi64vNV is null) assert(0, `OpenGL function 'glGetVertexAttribLi64vNV' not found!`);
  glGetVertexAttribLi64vNV(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribLui64vNV glGetVertexAttribLui64vNV = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetVertexAttribLui64vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribLui64vNV_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetVertexAttribLui64vNV = cast(glbfn_glGetVertexAttribLui64vNV)glbindGetProcAddress(`glGetVertexAttribLui64vNV`);
  if (glGetVertexAttribLui64vNV is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vNV' not found!`);
  glGetVertexAttribLui64vNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribLFormatNV glVertexAttribLFormatNV = function void (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glbfn_glVertexAttribLFormatNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribLFormatNV_loader (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glVertexAttribLFormatNV = cast(glbfn_glVertexAttribLFormatNV)glbindGetProcAddress(`glVertexAttribLFormatNV`);
  if (glVertexAttribLFormatNV is null) assert(0, `OpenGL function 'glVertexAttribLFormatNV' not found!`);
  glVertexAttribLFormatNV(a0,a1,a2,a3,);
}
__gshared glbfn_glBufferAddressRangeNV glBufferAddressRangeNV = function void (uint a0, uint a1, ulong a2, int a3) nothrow @nogc {
  glbfn_glBufferAddressRangeNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBufferAddressRangeNV_loader (uint a0, uint a1, ulong a2, int a3) nothrow @nogc {
  glBufferAddressRangeNV = cast(glbfn_glBufferAddressRangeNV)glbindGetProcAddress(`glBufferAddressRangeNV`);
  if (glBufferAddressRangeNV is null) assert(0, `OpenGL function 'glBufferAddressRangeNV' not found!`);
  glBufferAddressRangeNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexFormatNV glVertexFormatNV = function void (int a0, uint a1, int a2) nothrow @nogc {
  glbfn_glVertexFormatNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexFormatNV_loader (int a0, uint a1, int a2) nothrow @nogc {
  glVertexFormatNV = cast(glbfn_glVertexFormatNV)glbindGetProcAddress(`glVertexFormatNV`);
  if (glVertexFormatNV is null) assert(0, `OpenGL function 'glVertexFormatNV' not found!`);
  glVertexFormatNV(a0,a1,a2,);
}
__gshared glbfn_glNormalFormatNV glNormalFormatNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glNormalFormatNV_loader(a0,a1,);
};
private auto glbfn_glNormalFormatNV_loader (uint a0, int a1) nothrow @nogc {
  glNormalFormatNV = cast(glbfn_glNormalFormatNV)glbindGetProcAddress(`glNormalFormatNV`);
  if (glNormalFormatNV is null) assert(0, `OpenGL function 'glNormalFormatNV' not found!`);
  glNormalFormatNV(a0,a1,);
}
__gshared glbfn_glColorFormatNV glColorFormatNV = function void (int a0, uint a1, int a2) nothrow @nogc {
  glbfn_glColorFormatNV_loader(a0,a1,a2,);
};
private auto glbfn_glColorFormatNV_loader (int a0, uint a1, int a2) nothrow @nogc {
  glColorFormatNV = cast(glbfn_glColorFormatNV)glbindGetProcAddress(`glColorFormatNV`);
  if (glColorFormatNV is null) assert(0, `OpenGL function 'glColorFormatNV' not found!`);
  glColorFormatNV(a0,a1,a2,);
}
__gshared glbfn_glIndexFormatNV glIndexFormatNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glIndexFormatNV_loader(a0,a1,);
};
private auto glbfn_glIndexFormatNV_loader (uint a0, int a1) nothrow @nogc {
  glIndexFormatNV = cast(glbfn_glIndexFormatNV)glbindGetProcAddress(`glIndexFormatNV`);
  if (glIndexFormatNV is null) assert(0, `OpenGL function 'glIndexFormatNV' not found!`);
  glIndexFormatNV(a0,a1,);
}
__gshared glbfn_glTexCoordFormatNV glTexCoordFormatNV = function void (int a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTexCoordFormatNV_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoordFormatNV_loader (int a0, uint a1, int a2) nothrow @nogc {
  glTexCoordFormatNV = cast(glbfn_glTexCoordFormatNV)glbindGetProcAddress(`glTexCoordFormatNV`);
  if (glTexCoordFormatNV is null) assert(0, `OpenGL function 'glTexCoordFormatNV' not found!`);
  glTexCoordFormatNV(a0,a1,a2,);
}
__gshared glbfn_glEdgeFlagFormatNV glEdgeFlagFormatNV = function void (int a0) nothrow @nogc {
  glbfn_glEdgeFlagFormatNV_loader(a0,);
};
private auto glbfn_glEdgeFlagFormatNV_loader (int a0) nothrow @nogc {
  glEdgeFlagFormatNV = cast(glbfn_glEdgeFlagFormatNV)glbindGetProcAddress(`glEdgeFlagFormatNV`);
  if (glEdgeFlagFormatNV is null) assert(0, `OpenGL function 'glEdgeFlagFormatNV' not found!`);
  glEdgeFlagFormatNV(a0,);
}
__gshared glbfn_glSecondaryColorFormatNV glSecondaryColorFormatNV = function void (int a0, uint a1, int a2) nothrow @nogc {
  glbfn_glSecondaryColorFormatNV_loader(a0,a1,a2,);
};
private auto glbfn_glSecondaryColorFormatNV_loader (int a0, uint a1, int a2) nothrow @nogc {
  glSecondaryColorFormatNV = cast(glbfn_glSecondaryColorFormatNV)glbindGetProcAddress(`glSecondaryColorFormatNV`);
  if (glSecondaryColorFormatNV is null) assert(0, `OpenGL function 'glSecondaryColorFormatNV' not found!`);
  glSecondaryColorFormatNV(a0,a1,a2,);
}
__gshared glbfn_glFogCoordFormatNV glFogCoordFormatNV = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glFogCoordFormatNV_loader(a0,a1,);
};
private auto glbfn_glFogCoordFormatNV_loader (uint a0, int a1) nothrow @nogc {
  glFogCoordFormatNV = cast(glbfn_glFogCoordFormatNV)glbindGetProcAddress(`glFogCoordFormatNV`);
  if (glFogCoordFormatNV is null) assert(0, `OpenGL function 'glFogCoordFormatNV' not found!`);
  glFogCoordFormatNV(a0,a1,);
}
__gshared glbfn_glVertexAttribFormatNV glVertexAttribFormatNV = function void (uint a0, int a1, uint a2, ubyte a3, int a4) nothrow @nogc {
  glbfn_glVertexAttribFormatNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribFormatNV_loader (uint a0, int a1, uint a2, ubyte a3, int a4) nothrow @nogc {
  glVertexAttribFormatNV = cast(glbfn_glVertexAttribFormatNV)glbindGetProcAddress(`glVertexAttribFormatNV`);
  if (glVertexAttribFormatNV is null) assert(0, `OpenGL function 'glVertexAttribFormatNV' not found!`);
  glVertexAttribFormatNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribIFormatNV glVertexAttribIFormatNV = function void (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glbfn_glVertexAttribIFormatNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribIFormatNV_loader (uint a0, int a1, uint a2, int a3) nothrow @nogc {
  glVertexAttribIFormatNV = cast(glbfn_glVertexAttribIFormatNV)glbindGetProcAddress(`glVertexAttribIFormatNV`);
  if (glVertexAttribIFormatNV is null) assert(0, `OpenGL function 'glVertexAttribIFormatNV' not found!`);
  glVertexAttribIFormatNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetIntegerui64i_vNV glGetIntegerui64i_vNV = function void (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glbfn_glGetIntegerui64i_vNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetIntegerui64i_vNV_loader (uint a0, uint a1, ulong* a2) nothrow @nogc {
  glGetIntegerui64i_vNV = cast(glbfn_glGetIntegerui64i_vNV)glbindGetProcAddress(`glGetIntegerui64i_vNV`);
  if (glGetIntegerui64i_vNV is null) assert(0, `OpenGL function 'glGetIntegerui64i_vNV' not found!`);
  glGetIntegerui64i_vNV(a0,a1,a2,);
}
__gshared glbfn_glAreProgramsResidentNV glAreProgramsResidentNV = function ubyte (int a0, const(uint)* a1, ubyte* a2) nothrow @nogc {
  return glbfn_glAreProgramsResidentNV_loader(a0,a1,a2,);
};
private auto glbfn_glAreProgramsResidentNV_loader (int a0, const(uint)* a1, ubyte* a2) nothrow @nogc {
  glAreProgramsResidentNV = cast(glbfn_glAreProgramsResidentNV)glbindGetProcAddress(`glAreProgramsResidentNV`);
  if (glAreProgramsResidentNV is null) assert(0, `OpenGL function 'glAreProgramsResidentNV' not found!`);
  return glAreProgramsResidentNV(a0,a1,a2,);
}
__gshared glbfn_glBindProgramNV glBindProgramNV = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glBindProgramNV_loader(a0,a1,);
};
private auto glbfn_glBindProgramNV_loader (uint a0, uint a1) nothrow @nogc {
  glBindProgramNV = cast(glbfn_glBindProgramNV)glbindGetProcAddress(`glBindProgramNV`);
  if (glBindProgramNV is null) assert(0, `OpenGL function 'glBindProgramNV' not found!`);
  glBindProgramNV(a0,a1,);
}
__gshared glbfn_glDeleteProgramsNV glDeleteProgramsNV = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glDeleteProgramsNV_loader(a0,a1,);
};
private auto glbfn_glDeleteProgramsNV_loader (int a0, const(uint)* a1) nothrow @nogc {
  glDeleteProgramsNV = cast(glbfn_glDeleteProgramsNV)glbindGetProcAddress(`glDeleteProgramsNV`);
  if (glDeleteProgramsNV is null) assert(0, `OpenGL function 'glDeleteProgramsNV' not found!`);
  glDeleteProgramsNV(a0,a1,);
}
__gshared glbfn_glExecuteProgramNV glExecuteProgramNV = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glExecuteProgramNV_loader(a0,a1,a2,);
};
private auto glbfn_glExecuteProgramNV_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glExecuteProgramNV = cast(glbfn_glExecuteProgramNV)glbindGetProcAddress(`glExecuteProgramNV`);
  if (glExecuteProgramNV is null) assert(0, `OpenGL function 'glExecuteProgramNV' not found!`);
  glExecuteProgramNV(a0,a1,a2,);
}
__gshared glbfn_glGenProgramsNV glGenProgramsNV = function void (int a0, uint* a1) nothrow @nogc {
  glbfn_glGenProgramsNV_loader(a0,a1,);
};
private auto glbfn_glGenProgramsNV_loader (int a0, uint* a1) nothrow @nogc {
  glGenProgramsNV = cast(glbfn_glGenProgramsNV)glbindGetProcAddress(`glGenProgramsNV`);
  if (glGenProgramsNV is null) assert(0, `OpenGL function 'glGenProgramsNV' not found!`);
  glGenProgramsNV(a0,a1,);
}
__gshared glbfn_glGetProgramParameterdvNV glGetProgramParameterdvNV = function void (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glbfn_glGetProgramParameterdvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramParameterdvNV_loader (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glGetProgramParameterdvNV = cast(glbfn_glGetProgramParameterdvNV)glbindGetProcAddress(`glGetProgramParameterdvNV`);
  if (glGetProgramParameterdvNV is null) assert(0, `OpenGL function 'glGetProgramParameterdvNV' not found!`);
  glGetProgramParameterdvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetProgramParameterfvNV glGetProgramParameterfvNV = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetProgramParameterfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetProgramParameterfvNV_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetProgramParameterfvNV = cast(glbfn_glGetProgramParameterfvNV)glbindGetProcAddress(`glGetProgramParameterfvNV`);
  if (glGetProgramParameterfvNV is null) assert(0, `OpenGL function 'glGetProgramParameterfvNV' not found!`);
  glGetProgramParameterfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetProgramivNV glGetProgramivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetProgramivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetProgramivNV = cast(glbfn_glGetProgramivNV)glbindGetProcAddress(`glGetProgramivNV`);
  if (glGetProgramivNV is null) assert(0, `OpenGL function 'glGetProgramivNV' not found!`);
  glGetProgramivNV(a0,a1,a2,);
}
__gshared glbfn_glGetProgramStringNV glGetProgramStringNV = function void (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glbfn_glGetProgramStringNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetProgramStringNV_loader (uint a0, uint a1, ubyte* a2) nothrow @nogc {
  glGetProgramStringNV = cast(glbfn_glGetProgramStringNV)glbindGetProcAddress(`glGetProgramStringNV`);
  if (glGetProgramStringNV is null) assert(0, `OpenGL function 'glGetProgramStringNV' not found!`);
  glGetProgramStringNV(a0,a1,a2,);
}
__gshared glbfn_glGetTrackMatrixivNV glGetTrackMatrixivNV = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetTrackMatrixivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTrackMatrixivNV_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetTrackMatrixivNV = cast(glbfn_glGetTrackMatrixivNV)glbindGetProcAddress(`glGetTrackMatrixivNV`);
  if (glGetTrackMatrixivNV is null) assert(0, `OpenGL function 'glGetTrackMatrixivNV' not found!`);
  glGetTrackMatrixivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetVertexAttribdvNV glGetVertexAttribdvNV = function void (uint a0, uint a1, double* a2) nothrow @nogc {
  glbfn_glGetVertexAttribdvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribdvNV_loader (uint a0, uint a1, double* a2) nothrow @nogc {
  glGetVertexAttribdvNV = cast(glbfn_glGetVertexAttribdvNV)glbindGetProcAddress(`glGetVertexAttribdvNV`);
  if (glGetVertexAttribdvNV is null) assert(0, `OpenGL function 'glGetVertexAttribdvNV' not found!`);
  glGetVertexAttribdvNV(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribfvNV glGetVertexAttribfvNV = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetVertexAttribfvNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribfvNV_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetVertexAttribfvNV = cast(glbfn_glGetVertexAttribfvNV)glbindGetProcAddress(`glGetVertexAttribfvNV`);
  if (glGetVertexAttribfvNV is null) assert(0, `OpenGL function 'glGetVertexAttribfvNV' not found!`);
  glGetVertexAttribfvNV(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribivNV glGetVertexAttribivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexAttribivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexAttribivNV = cast(glbfn_glGetVertexAttribivNV)glbindGetProcAddress(`glGetVertexAttribivNV`);
  if (glGetVertexAttribivNV is null) assert(0, `OpenGL function 'glGetVertexAttribivNV' not found!`);
  glGetVertexAttribivNV(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribPointervNV glGetVertexAttribPointervNV = function void (uint a0, uint a1, void** a2) nothrow @nogc {
  glbfn_glGetVertexAttribPointervNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribPointervNV_loader (uint a0, uint a1, void** a2) nothrow @nogc {
  glGetVertexAttribPointervNV = cast(glbfn_glGetVertexAttribPointervNV)glbindGetProcAddress(`glGetVertexAttribPointervNV`);
  if (glGetVertexAttribPointervNV is null) assert(0, `OpenGL function 'glGetVertexAttribPointervNV' not found!`);
  glGetVertexAttribPointervNV(a0,a1,a2,);
}
__gshared glbfn_glIsProgramNV glIsProgramNV = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsProgramNV_loader(a0,);
};
private auto glbfn_glIsProgramNV_loader (uint a0) nothrow @nogc {
  glIsProgramNV = cast(glbfn_glIsProgramNV)glbindGetProcAddress(`glIsProgramNV`);
  if (glIsProgramNV is null) assert(0, `OpenGL function 'glIsProgramNV' not found!`);
  return glIsProgramNV(a0,);
}
__gshared glbfn_glLoadProgramNV glLoadProgramNV = function void (uint a0, uint a1, int a2, const(ubyte)* a3) nothrow @nogc {
  glbfn_glLoadProgramNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glLoadProgramNV_loader (uint a0, uint a1, int a2, const(ubyte)* a3) nothrow @nogc {
  glLoadProgramNV = cast(glbfn_glLoadProgramNV)glbindGetProcAddress(`glLoadProgramNV`);
  if (glLoadProgramNV is null) assert(0, `OpenGL function 'glLoadProgramNV' not found!`);
  glLoadProgramNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramParameter4dNV glProgramParameter4dNV = function void (uint a0, uint a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glbfn_glProgramParameter4dNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramParameter4dNV_loader (uint a0, uint a1, double a2, double a3, double a4, double a5) nothrow @nogc {
  glProgramParameter4dNV = cast(glbfn_glProgramParameter4dNV)glbindGetProcAddress(`glProgramParameter4dNV`);
  if (glProgramParameter4dNV is null) assert(0, `OpenGL function 'glProgramParameter4dNV' not found!`);
  glProgramParameter4dNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramParameter4dvNV glProgramParameter4dvNV = function void (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glbfn_glProgramParameter4dvNV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramParameter4dvNV_loader (uint a0, uint a1, const(double)* a2) nothrow @nogc {
  glProgramParameter4dvNV = cast(glbfn_glProgramParameter4dvNV)glbindGetProcAddress(`glProgramParameter4dvNV`);
  if (glProgramParameter4dvNV is null) assert(0, `OpenGL function 'glProgramParameter4dvNV' not found!`);
  glProgramParameter4dvNV(a0,a1,a2,);
}
__gshared glbfn_glProgramParameter4fNV glProgramParameter4fNV = function void (uint a0, uint a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glProgramParameter4fNV_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glProgramParameter4fNV_loader (uint a0, uint a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glProgramParameter4fNV = cast(glbfn_glProgramParameter4fNV)glbindGetProcAddress(`glProgramParameter4fNV`);
  if (glProgramParameter4fNV is null) assert(0, `OpenGL function 'glProgramParameter4fNV' not found!`);
  glProgramParameter4fNV(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glProgramParameter4fvNV glProgramParameter4fvNV = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glProgramParameter4fvNV_loader(a0,a1,a2,);
};
private auto glbfn_glProgramParameter4fvNV_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glProgramParameter4fvNV = cast(glbfn_glProgramParameter4fvNV)glbindGetProcAddress(`glProgramParameter4fvNV`);
  if (glProgramParameter4fvNV is null) assert(0, `OpenGL function 'glProgramParameter4fvNV' not found!`);
  glProgramParameter4fvNV(a0,a1,a2,);
}
__gshared glbfn_glProgramParameters4dvNV glProgramParameters4dvNV = function void (uint a0, uint a1, int a2, const(double)* a3) nothrow @nogc {
  glbfn_glProgramParameters4dvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramParameters4dvNV_loader (uint a0, uint a1, int a2, const(double)* a3) nothrow @nogc {
  glProgramParameters4dvNV = cast(glbfn_glProgramParameters4dvNV)glbindGetProcAddress(`glProgramParameters4dvNV`);
  if (glProgramParameters4dvNV is null) assert(0, `OpenGL function 'glProgramParameters4dvNV' not found!`);
  glProgramParameters4dvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glProgramParameters4fvNV glProgramParameters4fvNV = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glProgramParameters4fvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glProgramParameters4fvNV_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glProgramParameters4fvNV = cast(glbfn_glProgramParameters4fvNV)glbindGetProcAddress(`glProgramParameters4fvNV`);
  if (glProgramParameters4fvNV is null) assert(0, `OpenGL function 'glProgramParameters4fvNV' not found!`);
  glProgramParameters4fvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glRequestResidentProgramsNV glRequestResidentProgramsNV = function void (int a0, const(uint)* a1) nothrow @nogc {
  glbfn_glRequestResidentProgramsNV_loader(a0,a1,);
};
private auto glbfn_glRequestResidentProgramsNV_loader (int a0, const(uint)* a1) nothrow @nogc {
  glRequestResidentProgramsNV = cast(glbfn_glRequestResidentProgramsNV)glbindGetProcAddress(`glRequestResidentProgramsNV`);
  if (glRequestResidentProgramsNV is null) assert(0, `OpenGL function 'glRequestResidentProgramsNV' not found!`);
  glRequestResidentProgramsNV(a0,a1,);
}
__gshared glbfn_glTrackMatrixNV glTrackMatrixNV = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glTrackMatrixNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTrackMatrixNV_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glTrackMatrixNV = cast(glbfn_glTrackMatrixNV)glbindGetProcAddress(`glTrackMatrixNV`);
  if (glTrackMatrixNV is null) assert(0, `OpenGL function 'glTrackMatrixNV' not found!`);
  glTrackMatrixNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribPointerNV glVertexAttribPointerNV = function void (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glVertexAttribPointerNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribPointerNV_loader (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glVertexAttribPointerNV = cast(glbfn_glVertexAttribPointerNV)glbindGetProcAddress(`glVertexAttribPointerNV`);
  if (glVertexAttribPointerNV is null) assert(0, `OpenGL function 'glVertexAttribPointerNV' not found!`);
  glVertexAttribPointerNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib1dNV glVertexAttrib1dNV = function void (uint a0, double a1) nothrow @nogc {
  glbfn_glVertexAttrib1dNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1dNV_loader (uint a0, double a1) nothrow @nogc {
  glVertexAttrib1dNV = cast(glbfn_glVertexAttrib1dNV)glbindGetProcAddress(`glVertexAttrib1dNV`);
  if (glVertexAttrib1dNV is null) assert(0, `OpenGL function 'glVertexAttrib1dNV' not found!`);
  glVertexAttrib1dNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib1dvNV glVertexAttrib1dvNV = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1dvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1dvNV_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib1dvNV = cast(glbfn_glVertexAttrib1dvNV)glbindGetProcAddress(`glVertexAttrib1dvNV`);
  if (glVertexAttrib1dvNV is null) assert(0, `OpenGL function 'glVertexAttrib1dvNV' not found!`);
  glVertexAttrib1dvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib1fNV glVertexAttrib1fNV = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glVertexAttrib1fNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1fNV_loader (uint a0, float a1) nothrow @nogc {
  glVertexAttrib1fNV = cast(glbfn_glVertexAttrib1fNV)glbindGetProcAddress(`glVertexAttrib1fNV`);
  if (glVertexAttrib1fNV is null) assert(0, `OpenGL function 'glVertexAttrib1fNV' not found!`);
  glVertexAttrib1fNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib1fvNV glVertexAttrib1fvNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1fvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1fvNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib1fvNV = cast(glbfn_glVertexAttrib1fvNV)glbindGetProcAddress(`glVertexAttrib1fvNV`);
  if (glVertexAttrib1fvNV is null) assert(0, `OpenGL function 'glVertexAttrib1fvNV' not found!`);
  glVertexAttrib1fvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib1sNV glVertexAttrib1sNV = function void (uint a0, short a1) nothrow @nogc {
  glbfn_glVertexAttrib1sNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1sNV_loader (uint a0, short a1) nothrow @nogc {
  glVertexAttrib1sNV = cast(glbfn_glVertexAttrib1sNV)glbindGetProcAddress(`glVertexAttrib1sNV`);
  if (glVertexAttrib1sNV is null) assert(0, `OpenGL function 'glVertexAttrib1sNV' not found!`);
  glVertexAttrib1sNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib1svNV glVertexAttrib1svNV = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib1svNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib1svNV_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib1svNV = cast(glbfn_glVertexAttrib1svNV)glbindGetProcAddress(`glVertexAttrib1svNV`);
  if (glVertexAttrib1svNV is null) assert(0, `OpenGL function 'glVertexAttrib1svNV' not found!`);
  glVertexAttrib1svNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib2dNV glVertexAttrib2dNV = function void (uint a0, double a1, double a2) nothrow @nogc {
  glbfn_glVertexAttrib2dNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2dNV_loader (uint a0, double a1, double a2) nothrow @nogc {
  glVertexAttrib2dNV = cast(glbfn_glVertexAttrib2dNV)glbindGetProcAddress(`glVertexAttrib2dNV`);
  if (glVertexAttrib2dNV is null) assert(0, `OpenGL function 'glVertexAttrib2dNV' not found!`);
  glVertexAttrib2dNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2dvNV glVertexAttrib2dvNV = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2dvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2dvNV_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib2dvNV = cast(glbfn_glVertexAttrib2dvNV)glbindGetProcAddress(`glVertexAttrib2dvNV`);
  if (glVertexAttrib2dvNV is null) assert(0, `OpenGL function 'glVertexAttrib2dvNV' not found!`);
  glVertexAttrib2dvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib2fNV glVertexAttrib2fNV = function void (uint a0, float a1, float a2) nothrow @nogc {
  glbfn_glVertexAttrib2fNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2fNV_loader (uint a0, float a1, float a2) nothrow @nogc {
  glVertexAttrib2fNV = cast(glbfn_glVertexAttrib2fNV)glbindGetProcAddress(`glVertexAttrib2fNV`);
  if (glVertexAttrib2fNV is null) assert(0, `OpenGL function 'glVertexAttrib2fNV' not found!`);
  glVertexAttrib2fNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2fvNV glVertexAttrib2fvNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2fvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2fvNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib2fvNV = cast(glbfn_glVertexAttrib2fvNV)glbindGetProcAddress(`glVertexAttrib2fvNV`);
  if (glVertexAttrib2fvNV is null) assert(0, `OpenGL function 'glVertexAttrib2fvNV' not found!`);
  glVertexAttrib2fvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib2sNV glVertexAttrib2sNV = function void (uint a0, short a1, short a2) nothrow @nogc {
  glbfn_glVertexAttrib2sNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttrib2sNV_loader (uint a0, short a1, short a2) nothrow @nogc {
  glVertexAttrib2sNV = cast(glbfn_glVertexAttrib2sNV)glbindGetProcAddress(`glVertexAttrib2sNV`);
  if (glVertexAttrib2sNV is null) assert(0, `OpenGL function 'glVertexAttrib2sNV' not found!`);
  glVertexAttrib2sNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttrib2svNV glVertexAttrib2svNV = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib2svNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib2svNV_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib2svNV = cast(glbfn_glVertexAttrib2svNV)glbindGetProcAddress(`glVertexAttrib2svNV`);
  if (glVertexAttrib2svNV is null) assert(0, `OpenGL function 'glVertexAttrib2svNV' not found!`);
  glVertexAttrib2svNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib3dNV glVertexAttrib3dNV = function void (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glbfn_glVertexAttrib3dNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3dNV_loader (uint a0, double a1, double a2, double a3) nothrow @nogc {
  glVertexAttrib3dNV = cast(glbfn_glVertexAttrib3dNV)glbindGetProcAddress(`glVertexAttrib3dNV`);
  if (glVertexAttrib3dNV is null) assert(0, `OpenGL function 'glVertexAttrib3dNV' not found!`);
  glVertexAttrib3dNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3dvNV glVertexAttrib3dvNV = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3dvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3dvNV_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib3dvNV = cast(glbfn_glVertexAttrib3dvNV)glbindGetProcAddress(`glVertexAttrib3dvNV`);
  if (glVertexAttrib3dvNV is null) assert(0, `OpenGL function 'glVertexAttrib3dvNV' not found!`);
  glVertexAttrib3dvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib3fNV glVertexAttrib3fNV = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glVertexAttrib3fNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3fNV_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glVertexAttrib3fNV = cast(glbfn_glVertexAttrib3fNV)glbindGetProcAddress(`glVertexAttrib3fNV`);
  if (glVertexAttrib3fNV is null) assert(0, `OpenGL function 'glVertexAttrib3fNV' not found!`);
  glVertexAttrib3fNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3fvNV glVertexAttrib3fvNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3fvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3fvNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib3fvNV = cast(glbfn_glVertexAttrib3fvNV)glbindGetProcAddress(`glVertexAttrib3fvNV`);
  if (glVertexAttrib3fvNV is null) assert(0, `OpenGL function 'glVertexAttrib3fvNV' not found!`);
  glVertexAttrib3fvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib3sNV glVertexAttrib3sNV = function void (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glbfn_glVertexAttrib3sNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttrib3sNV_loader (uint a0, short a1, short a2, short a3) nothrow @nogc {
  glVertexAttrib3sNV = cast(glbfn_glVertexAttrib3sNV)glbindGetProcAddress(`glVertexAttrib3sNV`);
  if (glVertexAttrib3sNV is null) assert(0, `OpenGL function 'glVertexAttrib3sNV' not found!`);
  glVertexAttrib3sNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttrib3svNV glVertexAttrib3svNV = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib3svNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib3svNV_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib3svNV = cast(glbfn_glVertexAttrib3svNV)glbindGetProcAddress(`glVertexAttrib3svNV`);
  if (glVertexAttrib3svNV is null) assert(0, `OpenGL function 'glVertexAttrib3svNV' not found!`);
  glVertexAttrib3svNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib4dNV glVertexAttrib4dNV = function void (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glbfn_glVertexAttrib4dNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4dNV_loader (uint a0, double a1, double a2, double a3, double a4) nothrow @nogc {
  glVertexAttrib4dNV = cast(glbfn_glVertexAttrib4dNV)glbindGetProcAddress(`glVertexAttrib4dNV`);
  if (glVertexAttrib4dNV is null) assert(0, `OpenGL function 'glVertexAttrib4dNV' not found!`);
  glVertexAttrib4dNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4dvNV glVertexAttrib4dvNV = function void (uint a0, const(double)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4dvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4dvNV_loader (uint a0, const(double)* a1) nothrow @nogc {
  glVertexAttrib4dvNV = cast(glbfn_glVertexAttrib4dvNV)glbindGetProcAddress(`glVertexAttrib4dvNV`);
  if (glVertexAttrib4dvNV is null) assert(0, `OpenGL function 'glVertexAttrib4dvNV' not found!`);
  glVertexAttrib4dvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib4fNV glVertexAttrib4fNV = function void (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glVertexAttrib4fNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4fNV_loader (uint a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glVertexAttrib4fNV = cast(glbfn_glVertexAttrib4fNV)glbindGetProcAddress(`glVertexAttrib4fNV`);
  if (glVertexAttrib4fNV is null) assert(0, `OpenGL function 'glVertexAttrib4fNV' not found!`);
  glVertexAttrib4fNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4fvNV glVertexAttrib4fvNV = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4fvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4fvNV_loader (uint a0, const(float)* a1) nothrow @nogc {
  glVertexAttrib4fvNV = cast(glbfn_glVertexAttrib4fvNV)glbindGetProcAddress(`glVertexAttrib4fvNV`);
  if (glVertexAttrib4fvNV is null) assert(0, `OpenGL function 'glVertexAttrib4fvNV' not found!`);
  glVertexAttrib4fvNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib4sNV glVertexAttrib4sNV = function void (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glbfn_glVertexAttrib4sNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4sNV_loader (uint a0, short a1, short a2, short a3, short a4) nothrow @nogc {
  glVertexAttrib4sNV = cast(glbfn_glVertexAttrib4sNV)glbindGetProcAddress(`glVertexAttrib4sNV`);
  if (glVertexAttrib4sNV is null) assert(0, `OpenGL function 'glVertexAttrib4sNV' not found!`);
  glVertexAttrib4sNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4svNV glVertexAttrib4svNV = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4svNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4svNV_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttrib4svNV = cast(glbfn_glVertexAttrib4svNV)glbindGetProcAddress(`glVertexAttrib4svNV`);
  if (glVertexAttrib4svNV is null) assert(0, `OpenGL function 'glVertexAttrib4svNV' not found!`);
  glVertexAttrib4svNV(a0,a1,);
}
__gshared glbfn_glVertexAttrib4ubNV glVertexAttrib4ubNV = function void (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glbfn_glVertexAttrib4ubNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttrib4ubNV_loader (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4) nothrow @nogc {
  glVertexAttrib4ubNV = cast(glbfn_glVertexAttrib4ubNV)glbindGetProcAddress(`glVertexAttrib4ubNV`);
  if (glVertexAttrib4ubNV is null) assert(0, `OpenGL function 'glVertexAttrib4ubNV' not found!`);
  glVertexAttrib4ubNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttrib4ubvNV glVertexAttrib4ubvNV = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVertexAttrib4ubvNV_loader(a0,a1,);
};
private auto glbfn_glVertexAttrib4ubvNV_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVertexAttrib4ubvNV = cast(glbfn_glVertexAttrib4ubvNV)glbindGetProcAddress(`glVertexAttrib4ubvNV`);
  if (glVertexAttrib4ubvNV is null) assert(0, `OpenGL function 'glVertexAttrib4ubvNV' not found!`);
  glVertexAttrib4ubvNV(a0,a1,);
}
__gshared glbfn_glVertexAttribs1dvNV glVertexAttribs1dvNV = function void (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glVertexAttribs1dvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs1dvNV_loader (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glVertexAttribs1dvNV = cast(glbfn_glVertexAttribs1dvNV)glbindGetProcAddress(`glVertexAttribs1dvNV`);
  if (glVertexAttribs1dvNV is null) assert(0, `OpenGL function 'glVertexAttribs1dvNV' not found!`);
  glVertexAttribs1dvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs1fvNV glVertexAttribs1fvNV = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glVertexAttribs1fvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs1fvNV_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glVertexAttribs1fvNV = cast(glbfn_glVertexAttribs1fvNV)glbindGetProcAddress(`glVertexAttribs1fvNV`);
  if (glVertexAttribs1fvNV is null) assert(0, `OpenGL function 'glVertexAttribs1fvNV' not found!`);
  glVertexAttribs1fvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs1svNV glVertexAttribs1svNV = function void (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glbfn_glVertexAttribs1svNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs1svNV_loader (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glVertexAttribs1svNV = cast(glbfn_glVertexAttribs1svNV)glbindGetProcAddress(`glVertexAttribs1svNV`);
  if (glVertexAttribs1svNV is null) assert(0, `OpenGL function 'glVertexAttribs1svNV' not found!`);
  glVertexAttribs1svNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs2dvNV glVertexAttribs2dvNV = function void (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glVertexAttribs2dvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs2dvNV_loader (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glVertexAttribs2dvNV = cast(glbfn_glVertexAttribs2dvNV)glbindGetProcAddress(`glVertexAttribs2dvNV`);
  if (glVertexAttribs2dvNV is null) assert(0, `OpenGL function 'glVertexAttribs2dvNV' not found!`);
  glVertexAttribs2dvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs2fvNV glVertexAttribs2fvNV = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glVertexAttribs2fvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs2fvNV_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glVertexAttribs2fvNV = cast(glbfn_glVertexAttribs2fvNV)glbindGetProcAddress(`glVertexAttribs2fvNV`);
  if (glVertexAttribs2fvNV is null) assert(0, `OpenGL function 'glVertexAttribs2fvNV' not found!`);
  glVertexAttribs2fvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs2svNV glVertexAttribs2svNV = function void (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glbfn_glVertexAttribs2svNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs2svNV_loader (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glVertexAttribs2svNV = cast(glbfn_glVertexAttribs2svNV)glbindGetProcAddress(`glVertexAttribs2svNV`);
  if (glVertexAttribs2svNV is null) assert(0, `OpenGL function 'glVertexAttribs2svNV' not found!`);
  glVertexAttribs2svNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs3dvNV glVertexAttribs3dvNV = function void (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glVertexAttribs3dvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs3dvNV_loader (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glVertexAttribs3dvNV = cast(glbfn_glVertexAttribs3dvNV)glbindGetProcAddress(`glVertexAttribs3dvNV`);
  if (glVertexAttribs3dvNV is null) assert(0, `OpenGL function 'glVertexAttribs3dvNV' not found!`);
  glVertexAttribs3dvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs3fvNV glVertexAttribs3fvNV = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glVertexAttribs3fvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs3fvNV_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glVertexAttribs3fvNV = cast(glbfn_glVertexAttribs3fvNV)glbindGetProcAddress(`glVertexAttribs3fvNV`);
  if (glVertexAttribs3fvNV is null) assert(0, `OpenGL function 'glVertexAttribs3fvNV' not found!`);
  glVertexAttribs3fvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs3svNV glVertexAttribs3svNV = function void (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glbfn_glVertexAttribs3svNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs3svNV_loader (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glVertexAttribs3svNV = cast(glbfn_glVertexAttribs3svNV)glbindGetProcAddress(`glVertexAttribs3svNV`);
  if (glVertexAttribs3svNV is null) assert(0, `OpenGL function 'glVertexAttribs3svNV' not found!`);
  glVertexAttribs3svNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs4dvNV glVertexAttribs4dvNV = function void (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glbfn_glVertexAttribs4dvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs4dvNV_loader (uint a0, int a1, const(double)* a2) nothrow @nogc {
  glVertexAttribs4dvNV = cast(glbfn_glVertexAttribs4dvNV)glbindGetProcAddress(`glVertexAttribs4dvNV`);
  if (glVertexAttribs4dvNV is null) assert(0, `OpenGL function 'glVertexAttribs4dvNV' not found!`);
  glVertexAttribs4dvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs4fvNV glVertexAttribs4fvNV = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glVertexAttribs4fvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs4fvNV_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glVertexAttribs4fvNV = cast(glbfn_glVertexAttribs4fvNV)glbindGetProcAddress(`glVertexAttribs4fvNV`);
  if (glVertexAttribs4fvNV is null) assert(0, `OpenGL function 'glVertexAttribs4fvNV' not found!`);
  glVertexAttribs4fvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs4svNV glVertexAttribs4svNV = function void (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glbfn_glVertexAttribs4svNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs4svNV_loader (uint a0, int a1, const(short)* a2) nothrow @nogc {
  glVertexAttribs4svNV = cast(glbfn_glVertexAttribs4svNV)glbindGetProcAddress(`glVertexAttribs4svNV`);
  if (glVertexAttribs4svNV is null) assert(0, `OpenGL function 'glVertexAttribs4svNV' not found!`);
  glVertexAttribs4svNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribs4ubvNV glVertexAttribs4ubvNV = function void (uint a0, int a1, const(ubyte)* a2) nothrow @nogc {
  glbfn_glVertexAttribs4ubvNV_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribs4ubvNV_loader (uint a0, int a1, const(ubyte)* a2) nothrow @nogc {
  glVertexAttribs4ubvNV = cast(glbfn_glVertexAttribs4ubvNV)glbindGetProcAddress(`glVertexAttribs4ubvNV`);
  if (glVertexAttribs4ubvNV is null) assert(0, `OpenGL function 'glVertexAttribs4ubvNV' not found!`);
  glVertexAttribs4ubvNV(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribI1iEXT glVertexAttribI1iEXT = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glVertexAttribI1iEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1iEXT_loader (uint a0, int a1) nothrow @nogc {
  glVertexAttribI1iEXT = cast(glbfn_glVertexAttribI1iEXT)glbindGetProcAddress(`glVertexAttribI1iEXT`);
  if (glVertexAttribI1iEXT is null) assert(0, `OpenGL function 'glVertexAttribI1iEXT' not found!`);
  glVertexAttribI1iEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI2iEXT glVertexAttribI2iEXT = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glVertexAttribI2iEXT_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribI2iEXT_loader (uint a0, int a1, int a2) nothrow @nogc {
  glVertexAttribI2iEXT = cast(glbfn_glVertexAttribI2iEXT)glbindGetProcAddress(`glVertexAttribI2iEXT`);
  if (glVertexAttribI2iEXT is null) assert(0, `OpenGL function 'glVertexAttribI2iEXT' not found!`);
  glVertexAttribI2iEXT(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribI3iEXT glVertexAttribI3iEXT = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glVertexAttribI3iEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribI3iEXT_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glVertexAttribI3iEXT = cast(glbfn_glVertexAttribI3iEXT)glbindGetProcAddress(`glVertexAttribI3iEXT`);
  if (glVertexAttribI3iEXT is null) assert(0, `OpenGL function 'glVertexAttribI3iEXT' not found!`);
  glVertexAttribI3iEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribI4iEXT glVertexAttribI4iEXT = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glVertexAttribI4iEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribI4iEXT_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glVertexAttribI4iEXT = cast(glbfn_glVertexAttribI4iEXT)glbindGetProcAddress(`glVertexAttribI4iEXT`);
  if (glVertexAttribI4iEXT is null) assert(0, `OpenGL function 'glVertexAttribI4iEXT' not found!`);
  glVertexAttribI4iEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribI1uiEXT glVertexAttribI1uiEXT = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glVertexAttribI1uiEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1uiEXT_loader (uint a0, uint a1) nothrow @nogc {
  glVertexAttribI1uiEXT = cast(glbfn_glVertexAttribI1uiEXT)glbindGetProcAddress(`glVertexAttribI1uiEXT`);
  if (glVertexAttribI1uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI1uiEXT' not found!`);
  glVertexAttribI1uiEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI2uiEXT glVertexAttribI2uiEXT = function void (uint a0, uint a1, uint a2) nothrow @nogc {
  glbfn_glVertexAttribI2uiEXT_loader(a0,a1,a2,);
};
private auto glbfn_glVertexAttribI2uiEXT_loader (uint a0, uint a1, uint a2) nothrow @nogc {
  glVertexAttribI2uiEXT = cast(glbfn_glVertexAttribI2uiEXT)glbindGetProcAddress(`glVertexAttribI2uiEXT`);
  if (glVertexAttribI2uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI2uiEXT' not found!`);
  glVertexAttribI2uiEXT(a0,a1,a2,);
}
__gshared glbfn_glVertexAttribI3uiEXT glVertexAttribI3uiEXT = function void (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glbfn_glVertexAttribI3uiEXT_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertexAttribI3uiEXT_loader (uint a0, uint a1, uint a2, uint a3) nothrow @nogc {
  glVertexAttribI3uiEXT = cast(glbfn_glVertexAttribI3uiEXT)glbindGetProcAddress(`glVertexAttribI3uiEXT`);
  if (glVertexAttribI3uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI3uiEXT' not found!`);
  glVertexAttribI3uiEXT(a0,a1,a2,a3,);
}
__gshared glbfn_glVertexAttribI4uiEXT glVertexAttribI4uiEXT = function void (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glVertexAttribI4uiEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribI4uiEXT_loader (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glVertexAttribI4uiEXT = cast(glbfn_glVertexAttribI4uiEXT)glbindGetProcAddress(`glVertexAttribI4uiEXT`);
  if (glVertexAttribI4uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI4uiEXT' not found!`);
  glVertexAttribI4uiEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glVertexAttribI1ivEXT glVertexAttribI1ivEXT = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI1ivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1ivEXT_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI1ivEXT = cast(glbfn_glVertexAttribI1ivEXT)glbindGetProcAddress(`glVertexAttribI1ivEXT`);
  if (glVertexAttribI1ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI1ivEXT' not found!`);
  glVertexAttribI1ivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI2ivEXT glVertexAttribI2ivEXT = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI2ivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI2ivEXT_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI2ivEXT = cast(glbfn_glVertexAttribI2ivEXT)glbindGetProcAddress(`glVertexAttribI2ivEXT`);
  if (glVertexAttribI2ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI2ivEXT' not found!`);
  glVertexAttribI2ivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI3ivEXT glVertexAttribI3ivEXT = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI3ivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI3ivEXT_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI3ivEXT = cast(glbfn_glVertexAttribI3ivEXT)glbindGetProcAddress(`glVertexAttribI3ivEXT`);
  if (glVertexAttribI3ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI3ivEXT' not found!`);
  glVertexAttribI3ivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI4ivEXT glVertexAttribI4ivEXT = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4ivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4ivEXT_loader (uint a0, const(int)* a1) nothrow @nogc {
  glVertexAttribI4ivEXT = cast(glbfn_glVertexAttribI4ivEXT)glbindGetProcAddress(`glVertexAttribI4ivEXT`);
  if (glVertexAttribI4ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI4ivEXT' not found!`);
  glVertexAttribI4ivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI1uivEXT glVertexAttribI1uivEXT = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI1uivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI1uivEXT_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI1uivEXT = cast(glbfn_glVertexAttribI1uivEXT)glbindGetProcAddress(`glVertexAttribI1uivEXT`);
  if (glVertexAttribI1uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI1uivEXT' not found!`);
  glVertexAttribI1uivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI2uivEXT glVertexAttribI2uivEXT = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI2uivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI2uivEXT_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI2uivEXT = cast(glbfn_glVertexAttribI2uivEXT)glbindGetProcAddress(`glVertexAttribI2uivEXT`);
  if (glVertexAttribI2uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI2uivEXT' not found!`);
  glVertexAttribI2uivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI3uivEXT glVertexAttribI3uivEXT = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI3uivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI3uivEXT_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI3uivEXT = cast(glbfn_glVertexAttribI3uivEXT)glbindGetProcAddress(`glVertexAttribI3uivEXT`);
  if (glVertexAttribI3uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI3uivEXT' not found!`);
  glVertexAttribI3uivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI4uivEXT glVertexAttribI4uivEXT = function void (uint a0, const(uint)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4uivEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4uivEXT_loader (uint a0, const(uint)* a1) nothrow @nogc {
  glVertexAttribI4uivEXT = cast(glbfn_glVertexAttribI4uivEXT)glbindGetProcAddress(`glVertexAttribI4uivEXT`);
  if (glVertexAttribI4uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI4uivEXT' not found!`);
  glVertexAttribI4uivEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI4bvEXT glVertexAttribI4bvEXT = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4bvEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4bvEXT_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glVertexAttribI4bvEXT = cast(glbfn_glVertexAttribI4bvEXT)glbindGetProcAddress(`glVertexAttribI4bvEXT`);
  if (glVertexAttribI4bvEXT is null) assert(0, `OpenGL function 'glVertexAttribI4bvEXT' not found!`);
  glVertexAttribI4bvEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI4svEXT glVertexAttribI4svEXT = function void (uint a0, const(short)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4svEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4svEXT_loader (uint a0, const(short)* a1) nothrow @nogc {
  glVertexAttribI4svEXT = cast(glbfn_glVertexAttribI4svEXT)glbindGetProcAddress(`glVertexAttribI4svEXT`);
  if (glVertexAttribI4svEXT is null) assert(0, `OpenGL function 'glVertexAttribI4svEXT' not found!`);
  glVertexAttribI4svEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI4ubvEXT glVertexAttribI4ubvEXT = function void (uint a0, const(ubyte)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4ubvEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4ubvEXT_loader (uint a0, const(ubyte)* a1) nothrow @nogc {
  glVertexAttribI4ubvEXT = cast(glbfn_glVertexAttribI4ubvEXT)glbindGetProcAddress(`glVertexAttribI4ubvEXT`);
  if (glVertexAttribI4ubvEXT is null) assert(0, `OpenGL function 'glVertexAttribI4ubvEXT' not found!`);
  glVertexAttribI4ubvEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribI4usvEXT glVertexAttribI4usvEXT = function void (uint a0, const(ushort)* a1) nothrow @nogc {
  glbfn_glVertexAttribI4usvEXT_loader(a0,a1,);
};
private auto glbfn_glVertexAttribI4usvEXT_loader (uint a0, const(ushort)* a1) nothrow @nogc {
  glVertexAttribI4usvEXT = cast(glbfn_glVertexAttribI4usvEXT)glbindGetProcAddress(`glVertexAttribI4usvEXT`);
  if (glVertexAttribI4usvEXT is null) assert(0, `OpenGL function 'glVertexAttribI4usvEXT' not found!`);
  glVertexAttribI4usvEXT(a0,a1,);
}
__gshared glbfn_glVertexAttribIPointerEXT glVertexAttribIPointerEXT = function void (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glbfn_glVertexAttribIPointerEXT_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glVertexAttribIPointerEXT_loader (uint a0, int a1, uint a2, int a3, const(void)* a4) nothrow @nogc {
  glVertexAttribIPointerEXT = cast(glbfn_glVertexAttribIPointerEXT)glbindGetProcAddress(`glVertexAttribIPointerEXT`);
  if (glVertexAttribIPointerEXT is null) assert(0, `OpenGL function 'glVertexAttribIPointerEXT' not found!`);
  glVertexAttribIPointerEXT(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetVertexAttribIivEXT glGetVertexAttribIivEXT = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVertexAttribIivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribIivEXT_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVertexAttribIivEXT = cast(glbfn_glGetVertexAttribIivEXT)glbindGetProcAddress(`glGetVertexAttribIivEXT`);
  if (glGetVertexAttribIivEXT is null) assert(0, `OpenGL function 'glGetVertexAttribIivEXT' not found!`);
  glGetVertexAttribIivEXT(a0,a1,a2,);
}
__gshared glbfn_glGetVertexAttribIuivEXT glGetVertexAttribIuivEXT = function void (uint a0, uint a1, uint* a2) nothrow @nogc {
  glbfn_glGetVertexAttribIuivEXT_loader(a0,a1,a2,);
};
private auto glbfn_glGetVertexAttribIuivEXT_loader (uint a0, uint a1, uint* a2) nothrow @nogc {
  glGetVertexAttribIuivEXT = cast(glbfn_glGetVertexAttribIuivEXT)glbindGetProcAddress(`glGetVertexAttribIuivEXT`);
  if (glGetVertexAttribIuivEXT is null) assert(0, `OpenGL function 'glGetVertexAttribIuivEXT' not found!`);
  glGetVertexAttribIuivEXT(a0,a1,a2,);
}
__gshared glbfn_glBeginVideoCaptureNV glBeginVideoCaptureNV = function void (uint a0) nothrow @nogc {
  glbfn_glBeginVideoCaptureNV_loader(a0,);
};
private auto glbfn_glBeginVideoCaptureNV_loader (uint a0) nothrow @nogc {
  glBeginVideoCaptureNV = cast(glbfn_glBeginVideoCaptureNV)glbindGetProcAddress(`glBeginVideoCaptureNV`);
  if (glBeginVideoCaptureNV is null) assert(0, `OpenGL function 'glBeginVideoCaptureNV' not found!`);
  glBeginVideoCaptureNV(a0,);
}
__gshared glbfn_glBindVideoCaptureStreamBufferNV glBindVideoCaptureStreamBufferNV = function void (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glbfn_glBindVideoCaptureStreamBufferNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBindVideoCaptureStreamBufferNV_loader (uint a0, uint a1, uint a2, int a3) nothrow @nogc {
  glBindVideoCaptureStreamBufferNV = cast(glbfn_glBindVideoCaptureStreamBufferNV)glbindGetProcAddress(`glBindVideoCaptureStreamBufferNV`);
  if (glBindVideoCaptureStreamBufferNV is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamBufferNV' not found!`);
  glBindVideoCaptureStreamBufferNV(a0,a1,a2,a3,);
}
__gshared glbfn_glBindVideoCaptureStreamTextureNV glBindVideoCaptureStreamTextureNV = function void (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glbfn_glBindVideoCaptureStreamTextureNV_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glBindVideoCaptureStreamTextureNV_loader (uint a0, uint a1, uint a2, uint a3, uint a4) nothrow @nogc {
  glBindVideoCaptureStreamTextureNV = cast(glbfn_glBindVideoCaptureStreamTextureNV)glbindGetProcAddress(`glBindVideoCaptureStreamTextureNV`);
  if (glBindVideoCaptureStreamTextureNV is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamTextureNV' not found!`);
  glBindVideoCaptureStreamTextureNV(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glEndVideoCaptureNV glEndVideoCaptureNV = function void (uint a0) nothrow @nogc {
  glbfn_glEndVideoCaptureNV_loader(a0,);
};
private auto glbfn_glEndVideoCaptureNV_loader (uint a0) nothrow @nogc {
  glEndVideoCaptureNV = cast(glbfn_glEndVideoCaptureNV)glbindGetProcAddress(`glEndVideoCaptureNV`);
  if (glEndVideoCaptureNV is null) assert(0, `OpenGL function 'glEndVideoCaptureNV' not found!`);
  glEndVideoCaptureNV(a0,);
}
__gshared glbfn_glGetVideoCaptureivNV glGetVideoCaptureivNV = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetVideoCaptureivNV_loader(a0,a1,a2,);
};
private auto glbfn_glGetVideoCaptureivNV_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetVideoCaptureivNV = cast(glbfn_glGetVideoCaptureivNV)glbindGetProcAddress(`glGetVideoCaptureivNV`);
  if (glGetVideoCaptureivNV is null) assert(0, `OpenGL function 'glGetVideoCaptureivNV' not found!`);
  glGetVideoCaptureivNV(a0,a1,a2,);
}
__gshared glbfn_glGetVideoCaptureStreamivNV glGetVideoCaptureStreamivNV = function void (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetVideoCaptureStreamivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetVideoCaptureStreamivNV_loader (uint a0, uint a1, uint a2, int* a3) nothrow @nogc {
  glGetVideoCaptureStreamivNV = cast(glbfn_glGetVideoCaptureStreamivNV)glbindGetProcAddress(`glGetVideoCaptureStreamivNV`);
  if (glGetVideoCaptureStreamivNV is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamivNV' not found!`);
  glGetVideoCaptureStreamivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetVideoCaptureStreamfvNV glGetVideoCaptureStreamfvNV = function void (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glbfn_glGetVideoCaptureStreamfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetVideoCaptureStreamfvNV_loader (uint a0, uint a1, uint a2, float* a3) nothrow @nogc {
  glGetVideoCaptureStreamfvNV = cast(glbfn_glGetVideoCaptureStreamfvNV)glbindGetProcAddress(`glGetVideoCaptureStreamfvNV`);
  if (glGetVideoCaptureStreamfvNV is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamfvNV' not found!`);
  glGetVideoCaptureStreamfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glGetVideoCaptureStreamdvNV glGetVideoCaptureStreamdvNV = function void (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glbfn_glGetVideoCaptureStreamdvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetVideoCaptureStreamdvNV_loader (uint a0, uint a1, uint a2, double* a3) nothrow @nogc {
  glGetVideoCaptureStreamdvNV = cast(glbfn_glGetVideoCaptureStreamdvNV)glbindGetProcAddress(`glGetVideoCaptureStreamdvNV`);
  if (glGetVideoCaptureStreamdvNV is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamdvNV' not found!`);
  glGetVideoCaptureStreamdvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVideoCaptureNV glVideoCaptureNV = function uint (uint a0, uint* a1, ulong* a2) nothrow @nogc {
  return glbfn_glVideoCaptureNV_loader(a0,a1,a2,);
};
private auto glbfn_glVideoCaptureNV_loader (uint a0, uint* a1, ulong* a2) nothrow @nogc {
  glVideoCaptureNV = cast(glbfn_glVideoCaptureNV)glbindGetProcAddress(`glVideoCaptureNV`);
  if (glVideoCaptureNV is null) assert(0, `OpenGL function 'glVideoCaptureNV' not found!`);
  return glVideoCaptureNV(a0,a1,a2,);
}
__gshared glbfn_glVideoCaptureStreamParameterivNV glVideoCaptureStreamParameterivNV = function void (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glbfn_glVideoCaptureStreamParameterivNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVideoCaptureStreamParameterivNV_loader (uint a0, uint a1, uint a2, const(int)* a3) nothrow @nogc {
  glVideoCaptureStreamParameterivNV = cast(glbfn_glVideoCaptureStreamParameterivNV)glbindGetProcAddress(`glVideoCaptureStreamParameterivNV`);
  if (glVideoCaptureStreamParameterivNV is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterivNV' not found!`);
  glVideoCaptureStreamParameterivNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVideoCaptureStreamParameterfvNV glVideoCaptureStreamParameterfvNV = function void (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glbfn_glVideoCaptureStreamParameterfvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVideoCaptureStreamParameterfvNV_loader (uint a0, uint a1, uint a2, const(float)* a3) nothrow @nogc {
  glVideoCaptureStreamParameterfvNV = cast(glbfn_glVideoCaptureStreamParameterfvNV)glbindGetProcAddress(`glVideoCaptureStreamParameterfvNV`);
  if (glVideoCaptureStreamParameterfvNV is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterfvNV' not found!`);
  glVideoCaptureStreamParameterfvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glVideoCaptureStreamParameterdvNV glVideoCaptureStreamParameterdvNV = function void (uint a0, uint a1, uint a2, const(double)* a3) nothrow @nogc {
  glbfn_glVideoCaptureStreamParameterdvNV_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVideoCaptureStreamParameterdvNV_loader (uint a0, uint a1, uint a2, const(double)* a3) nothrow @nogc {
  glVideoCaptureStreamParameterdvNV = cast(glbfn_glVideoCaptureStreamParameterdvNV)glbindGetProcAddress(`glVideoCaptureStreamParameterdvNV`);
  if (glVideoCaptureStreamParameterdvNV is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterdvNV' not found!`);
  glVideoCaptureStreamParameterdvNV(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord1bOES glMultiTexCoord1bOES = function void (uint a0, byte a1) nothrow @nogc {
  glbfn_glMultiTexCoord1bOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1bOES_loader (uint a0, byte a1) nothrow @nogc {
  glMultiTexCoord1bOES = cast(glbfn_glMultiTexCoord1bOES)glbindGetProcAddress(`glMultiTexCoord1bOES`);
  if (glMultiTexCoord1bOES is null) assert(0, `OpenGL function 'glMultiTexCoord1bOES' not found!`);
  glMultiTexCoord1bOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1bvOES glMultiTexCoord1bvOES = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1bvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1bvOES_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glMultiTexCoord1bvOES = cast(glbfn_glMultiTexCoord1bvOES)glbindGetProcAddress(`glMultiTexCoord1bvOES`);
  if (glMultiTexCoord1bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord1bvOES' not found!`);
  glMultiTexCoord1bvOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2bOES glMultiTexCoord2bOES = function void (uint a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glMultiTexCoord2bOES_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2bOES_loader (uint a0, byte a1, byte a2) nothrow @nogc {
  glMultiTexCoord2bOES = cast(glbfn_glMultiTexCoord2bOES)glbindGetProcAddress(`glMultiTexCoord2bOES`);
  if (glMultiTexCoord2bOES is null) assert(0, `OpenGL function 'glMultiTexCoord2bOES' not found!`);
  glMultiTexCoord2bOES(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2bvOES glMultiTexCoord2bvOES = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2bvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2bvOES_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glMultiTexCoord2bvOES = cast(glbfn_glMultiTexCoord2bvOES)glbindGetProcAddress(`glMultiTexCoord2bvOES`);
  if (glMultiTexCoord2bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord2bvOES' not found!`);
  glMultiTexCoord2bvOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3bOES glMultiTexCoord3bOES = function void (uint a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glbfn_glMultiTexCoord3bOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3bOES_loader (uint a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glMultiTexCoord3bOES = cast(glbfn_glMultiTexCoord3bOES)glbindGetProcAddress(`glMultiTexCoord3bOES`);
  if (glMultiTexCoord3bOES is null) assert(0, `OpenGL function 'glMultiTexCoord3bOES' not found!`);
  glMultiTexCoord3bOES(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3bvOES glMultiTexCoord3bvOES = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3bvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3bvOES_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glMultiTexCoord3bvOES = cast(glbfn_glMultiTexCoord3bvOES)glbindGetProcAddress(`glMultiTexCoord3bvOES`);
  if (glMultiTexCoord3bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord3bvOES' not found!`);
  glMultiTexCoord3bvOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4bOES glMultiTexCoord4bOES = function void (uint a0, byte a1, byte a2, byte a3, byte a4) nothrow @nogc {
  glbfn_glMultiTexCoord4bOES_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4bOES_loader (uint a0, byte a1, byte a2, byte a3, byte a4) nothrow @nogc {
  glMultiTexCoord4bOES = cast(glbfn_glMultiTexCoord4bOES)glbindGetProcAddress(`glMultiTexCoord4bOES`);
  if (glMultiTexCoord4bOES is null) assert(0, `OpenGL function 'glMultiTexCoord4bOES' not found!`);
  glMultiTexCoord4bOES(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultiTexCoord4bvOES glMultiTexCoord4bvOES = function void (uint a0, const(byte)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4bvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4bvOES_loader (uint a0, const(byte)* a1) nothrow @nogc {
  glMultiTexCoord4bvOES = cast(glbfn_glMultiTexCoord4bvOES)glbindGetProcAddress(`glMultiTexCoord4bvOES`);
  if (glMultiTexCoord4bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord4bvOES' not found!`);
  glMultiTexCoord4bvOES(a0,a1,);
}
__gshared glbfn_glTexCoord1bOES glTexCoord1bOES = function void (byte a0) nothrow @nogc {
  glbfn_glTexCoord1bOES_loader(a0,);
};
private auto glbfn_glTexCoord1bOES_loader (byte a0) nothrow @nogc {
  glTexCoord1bOES = cast(glbfn_glTexCoord1bOES)glbindGetProcAddress(`glTexCoord1bOES`);
  if (glTexCoord1bOES is null) assert(0, `OpenGL function 'glTexCoord1bOES' not found!`);
  glTexCoord1bOES(a0,);
}
__gshared glbfn_glTexCoord1bvOES glTexCoord1bvOES = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glTexCoord1bvOES_loader(a0,);
};
private auto glbfn_glTexCoord1bvOES_loader (const(byte)* a0) nothrow @nogc {
  glTexCoord1bvOES = cast(glbfn_glTexCoord1bvOES)glbindGetProcAddress(`glTexCoord1bvOES`);
  if (glTexCoord1bvOES is null) assert(0, `OpenGL function 'glTexCoord1bvOES' not found!`);
  glTexCoord1bvOES(a0,);
}
__gshared glbfn_glTexCoord2bOES glTexCoord2bOES = function void (byte a0, byte a1) nothrow @nogc {
  glbfn_glTexCoord2bOES_loader(a0,a1,);
};
private auto glbfn_glTexCoord2bOES_loader (byte a0, byte a1) nothrow @nogc {
  glTexCoord2bOES = cast(glbfn_glTexCoord2bOES)glbindGetProcAddress(`glTexCoord2bOES`);
  if (glTexCoord2bOES is null) assert(0, `OpenGL function 'glTexCoord2bOES' not found!`);
  glTexCoord2bOES(a0,a1,);
}
__gshared glbfn_glTexCoord2bvOES glTexCoord2bvOES = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glTexCoord2bvOES_loader(a0,);
};
private auto glbfn_glTexCoord2bvOES_loader (const(byte)* a0) nothrow @nogc {
  glTexCoord2bvOES = cast(glbfn_glTexCoord2bvOES)glbindGetProcAddress(`glTexCoord2bvOES`);
  if (glTexCoord2bvOES is null) assert(0, `OpenGL function 'glTexCoord2bvOES' not found!`);
  glTexCoord2bvOES(a0,);
}
__gshared glbfn_glTexCoord3bOES glTexCoord3bOES = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glTexCoord3bOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord3bOES_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glTexCoord3bOES = cast(glbfn_glTexCoord3bOES)glbindGetProcAddress(`glTexCoord3bOES`);
  if (glTexCoord3bOES is null) assert(0, `OpenGL function 'glTexCoord3bOES' not found!`);
  glTexCoord3bOES(a0,a1,a2,);
}
__gshared glbfn_glTexCoord3bvOES glTexCoord3bvOES = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glTexCoord3bvOES_loader(a0,);
};
private auto glbfn_glTexCoord3bvOES_loader (const(byte)* a0) nothrow @nogc {
  glTexCoord3bvOES = cast(glbfn_glTexCoord3bvOES)glbindGetProcAddress(`glTexCoord3bvOES`);
  if (glTexCoord3bvOES is null) assert(0, `OpenGL function 'glTexCoord3bvOES' not found!`);
  glTexCoord3bvOES(a0,);
}
__gshared glbfn_glTexCoord4bOES glTexCoord4bOES = function void (byte a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glbfn_glTexCoord4bOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4bOES_loader (byte a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glTexCoord4bOES = cast(glbfn_glTexCoord4bOES)glbindGetProcAddress(`glTexCoord4bOES`);
  if (glTexCoord4bOES is null) assert(0, `OpenGL function 'glTexCoord4bOES' not found!`);
  glTexCoord4bOES(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4bvOES glTexCoord4bvOES = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glTexCoord4bvOES_loader(a0,);
};
private auto glbfn_glTexCoord4bvOES_loader (const(byte)* a0) nothrow @nogc {
  glTexCoord4bvOES = cast(glbfn_glTexCoord4bvOES)glbindGetProcAddress(`glTexCoord4bvOES`);
  if (glTexCoord4bvOES is null) assert(0, `OpenGL function 'glTexCoord4bvOES' not found!`);
  glTexCoord4bvOES(a0,);
}
__gshared glbfn_glVertex2bOES glVertex2bOES = function void (byte a0, byte a1) nothrow @nogc {
  glbfn_glVertex2bOES_loader(a0,a1,);
};
private auto glbfn_glVertex2bOES_loader (byte a0, byte a1) nothrow @nogc {
  glVertex2bOES = cast(glbfn_glVertex2bOES)glbindGetProcAddress(`glVertex2bOES`);
  if (glVertex2bOES is null) assert(0, `OpenGL function 'glVertex2bOES' not found!`);
  glVertex2bOES(a0,a1,);
}
__gshared glbfn_glVertex2bvOES glVertex2bvOES = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glVertex2bvOES_loader(a0,);
};
private auto glbfn_glVertex2bvOES_loader (const(byte)* a0) nothrow @nogc {
  glVertex2bvOES = cast(glbfn_glVertex2bvOES)glbindGetProcAddress(`glVertex2bvOES`);
  if (glVertex2bvOES is null) assert(0, `OpenGL function 'glVertex2bvOES' not found!`);
  glVertex2bvOES(a0,);
}
__gshared glbfn_glVertex3bOES glVertex3bOES = function void (byte a0, byte a1, byte a2) nothrow @nogc {
  glbfn_glVertex3bOES_loader(a0,a1,a2,);
};
private auto glbfn_glVertex3bOES_loader (byte a0, byte a1, byte a2) nothrow @nogc {
  glVertex3bOES = cast(glbfn_glVertex3bOES)glbindGetProcAddress(`glVertex3bOES`);
  if (glVertex3bOES is null) assert(0, `OpenGL function 'glVertex3bOES' not found!`);
  glVertex3bOES(a0,a1,a2,);
}
__gshared glbfn_glVertex3bvOES glVertex3bvOES = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glVertex3bvOES_loader(a0,);
};
private auto glbfn_glVertex3bvOES_loader (const(byte)* a0) nothrow @nogc {
  glVertex3bvOES = cast(glbfn_glVertex3bvOES)glbindGetProcAddress(`glVertex3bvOES`);
  if (glVertex3bvOES is null) assert(0, `OpenGL function 'glVertex3bvOES' not found!`);
  glVertex3bvOES(a0,);
}
__gshared glbfn_glVertex4bOES glVertex4bOES = function void (byte a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glbfn_glVertex4bOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glVertex4bOES_loader (byte a0, byte a1, byte a2, byte a3) nothrow @nogc {
  glVertex4bOES = cast(glbfn_glVertex4bOES)glbindGetProcAddress(`glVertex4bOES`);
  if (glVertex4bOES is null) assert(0, `OpenGL function 'glVertex4bOES' not found!`);
  glVertex4bOES(a0,a1,a2,a3,);
}
__gshared glbfn_glVertex4bvOES glVertex4bvOES = function void (const(byte)* a0) nothrow @nogc {
  glbfn_glVertex4bvOES_loader(a0,);
};
private auto glbfn_glVertex4bvOES_loader (const(byte)* a0) nothrow @nogc {
  glVertex4bvOES = cast(glbfn_glVertex4bvOES)glbindGetProcAddress(`glVertex4bvOES`);
  if (glVertex4bvOES is null) assert(0, `OpenGL function 'glVertex4bvOES' not found!`);
  glVertex4bvOES(a0,);
}
__gshared glbfn_glAlphaFuncxOES glAlphaFuncxOES = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glAlphaFuncxOES_loader(a0,a1,);
};
private auto glbfn_glAlphaFuncxOES_loader (uint a0, int a1) nothrow @nogc {
  glAlphaFuncxOES = cast(glbfn_glAlphaFuncxOES)glbindGetProcAddress(`glAlphaFuncxOES`);
  if (glAlphaFuncxOES is null) assert(0, `OpenGL function 'glAlphaFuncxOES' not found!`);
  glAlphaFuncxOES(a0,a1,);
}
__gshared glbfn_glClearColorxOES glClearColorxOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glClearColorxOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearColorxOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glClearColorxOES = cast(glbfn_glClearColorxOES)glbindGetProcAddress(`glClearColorxOES`);
  if (glClearColorxOES is null) assert(0, `OpenGL function 'glClearColorxOES' not found!`);
  glClearColorxOES(a0,a1,a2,a3,);
}
__gshared glbfn_glClearDepthxOES glClearDepthxOES = function void (int a0) nothrow @nogc {
  glbfn_glClearDepthxOES_loader(a0,);
};
private auto glbfn_glClearDepthxOES_loader (int a0) nothrow @nogc {
  glClearDepthxOES = cast(glbfn_glClearDepthxOES)glbindGetProcAddress(`glClearDepthxOES`);
  if (glClearDepthxOES is null) assert(0, `OpenGL function 'glClearDepthxOES' not found!`);
  glClearDepthxOES(a0,);
}
__gshared glbfn_glClipPlanexOES glClipPlanexOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glClipPlanexOES_loader(a0,a1,);
};
private auto glbfn_glClipPlanexOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glClipPlanexOES = cast(glbfn_glClipPlanexOES)glbindGetProcAddress(`glClipPlanexOES`);
  if (glClipPlanexOES is null) assert(0, `OpenGL function 'glClipPlanexOES' not found!`);
  glClipPlanexOES(a0,a1,);
}
__gshared glbfn_glColor4xOES glColor4xOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glColor4xOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glColor4xOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glColor4xOES = cast(glbfn_glColor4xOES)glbindGetProcAddress(`glColor4xOES`);
  if (glColor4xOES is null) assert(0, `OpenGL function 'glColor4xOES' not found!`);
  glColor4xOES(a0,a1,a2,a3,);
}
__gshared glbfn_glDepthRangexOES glDepthRangexOES = function void (int a0, int a1) nothrow @nogc {
  glbfn_glDepthRangexOES_loader(a0,a1,);
};
private auto glbfn_glDepthRangexOES_loader (int a0, int a1) nothrow @nogc {
  glDepthRangexOES = cast(glbfn_glDepthRangexOES)glbindGetProcAddress(`glDepthRangexOES`);
  if (glDepthRangexOES is null) assert(0, `OpenGL function 'glDepthRangexOES' not found!`);
  glDepthRangexOES(a0,a1,);
}
__gshared glbfn_glFogxOES glFogxOES = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glFogxOES_loader(a0,a1,);
};
private auto glbfn_glFogxOES_loader (uint a0, int a1) nothrow @nogc {
  glFogxOES = cast(glbfn_glFogxOES)glbindGetProcAddress(`glFogxOES`);
  if (glFogxOES is null) assert(0, `OpenGL function 'glFogxOES' not found!`);
  glFogxOES(a0,a1,);
}
__gshared glbfn_glFogxvOES glFogxvOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glFogxvOES_loader(a0,a1,);
};
private auto glbfn_glFogxvOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glFogxvOES = cast(glbfn_glFogxvOES)glbindGetProcAddress(`glFogxvOES`);
  if (glFogxvOES is null) assert(0, `OpenGL function 'glFogxvOES' not found!`);
  glFogxvOES(a0,a1,);
}
__gshared glbfn_glFrustumxOES glFrustumxOES = function void (int a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glFrustumxOES_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glFrustumxOES_loader (int a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glFrustumxOES = cast(glbfn_glFrustumxOES)glbindGetProcAddress(`glFrustumxOES`);
  if (glFrustumxOES is null) assert(0, `OpenGL function 'glFrustumxOES' not found!`);
  glFrustumxOES(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetClipPlanexOES glGetClipPlanexOES = function void (uint a0, int* a1) nothrow @nogc {
  glbfn_glGetClipPlanexOES_loader(a0,a1,);
};
private auto glbfn_glGetClipPlanexOES_loader (uint a0, int* a1) nothrow @nogc {
  glGetClipPlanexOES = cast(glbfn_glGetClipPlanexOES)glbindGetProcAddress(`glGetClipPlanexOES`);
  if (glGetClipPlanexOES is null) assert(0, `OpenGL function 'glGetClipPlanexOES' not found!`);
  glGetClipPlanexOES(a0,a1,);
}
__gshared glbfn_glGetFixedvOES glGetFixedvOES = function void (uint a0, int* a1) nothrow @nogc {
  glbfn_glGetFixedvOES_loader(a0,a1,);
};
private auto glbfn_glGetFixedvOES_loader (uint a0, int* a1) nothrow @nogc {
  glGetFixedvOES = cast(glbfn_glGetFixedvOES)glbindGetProcAddress(`glGetFixedvOES`);
  if (glGetFixedvOES is null) assert(0, `OpenGL function 'glGetFixedvOES' not found!`);
  glGetFixedvOES(a0,a1,);
}
__gshared glbfn_glGetTexEnvxvOES glGetTexEnvxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexEnvxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexEnvxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexEnvxvOES = cast(glbfn_glGetTexEnvxvOES)glbindGetProcAddress(`glGetTexEnvxvOES`);
  if (glGetTexEnvxvOES is null) assert(0, `OpenGL function 'glGetTexEnvxvOES' not found!`);
  glGetTexEnvxvOES(a0,a1,a2,);
}
__gshared glbfn_glGetTexParameterxvOES glGetTexParameterxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexParameterxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexParameterxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexParameterxvOES = cast(glbfn_glGetTexParameterxvOES)glbindGetProcAddress(`glGetTexParameterxvOES`);
  if (glGetTexParameterxvOES is null) assert(0, `OpenGL function 'glGetTexParameterxvOES' not found!`);
  glGetTexParameterxvOES(a0,a1,a2,);
}
__gshared glbfn_glLightModelxOES glLightModelxOES = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glLightModelxOES_loader(a0,a1,);
};
private auto glbfn_glLightModelxOES_loader (uint a0, int a1) nothrow @nogc {
  glLightModelxOES = cast(glbfn_glLightModelxOES)glbindGetProcAddress(`glLightModelxOES`);
  if (glLightModelxOES is null) assert(0, `OpenGL function 'glLightModelxOES' not found!`);
  glLightModelxOES(a0,a1,);
}
__gshared glbfn_glLightModelxvOES glLightModelxvOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glLightModelxvOES_loader(a0,a1,);
};
private auto glbfn_glLightModelxvOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glLightModelxvOES = cast(glbfn_glLightModelxvOES)glbindGetProcAddress(`glLightModelxvOES`);
  if (glLightModelxvOES is null) assert(0, `OpenGL function 'glLightModelxvOES' not found!`);
  glLightModelxvOES(a0,a1,);
}
__gshared glbfn_glLightxOES glLightxOES = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glLightxOES_loader(a0,a1,a2,);
};
private auto glbfn_glLightxOES_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glLightxOES = cast(glbfn_glLightxOES)glbindGetProcAddress(`glLightxOES`);
  if (glLightxOES is null) assert(0, `OpenGL function 'glLightxOES' not found!`);
  glLightxOES(a0,a1,a2,);
}
__gshared glbfn_glLightxvOES glLightxvOES = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glLightxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glLightxvOES_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glLightxvOES = cast(glbfn_glLightxvOES)glbindGetProcAddress(`glLightxvOES`);
  if (glLightxvOES is null) assert(0, `OpenGL function 'glLightxvOES' not found!`);
  glLightxvOES(a0,a1,a2,);
}
__gshared glbfn_glLineWidthxOES glLineWidthxOES = function void (int a0) nothrow @nogc {
  glbfn_glLineWidthxOES_loader(a0,);
};
private auto glbfn_glLineWidthxOES_loader (int a0) nothrow @nogc {
  glLineWidthxOES = cast(glbfn_glLineWidthxOES)glbindGetProcAddress(`glLineWidthxOES`);
  if (glLineWidthxOES is null) assert(0, `OpenGL function 'glLineWidthxOES' not found!`);
  glLineWidthxOES(a0,);
}
__gshared glbfn_glLoadMatrixxOES glLoadMatrixxOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glLoadMatrixxOES_loader(a0,);
};
private auto glbfn_glLoadMatrixxOES_loader (const(int)* a0) nothrow @nogc {
  glLoadMatrixxOES = cast(glbfn_glLoadMatrixxOES)glbindGetProcAddress(`glLoadMatrixxOES`);
  if (glLoadMatrixxOES is null) assert(0, `OpenGL function 'glLoadMatrixxOES' not found!`);
  glLoadMatrixxOES(a0,);
}
__gshared glbfn_glMaterialxOES glMaterialxOES = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glMaterialxOES_loader(a0,a1,a2,);
};
private auto glbfn_glMaterialxOES_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glMaterialxOES = cast(glbfn_glMaterialxOES)glbindGetProcAddress(`glMaterialxOES`);
  if (glMaterialxOES is null) assert(0, `OpenGL function 'glMaterialxOES' not found!`);
  glMaterialxOES(a0,a1,a2,);
}
__gshared glbfn_glMaterialxvOES glMaterialxvOES = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glMaterialxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glMaterialxvOES_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glMaterialxvOES = cast(glbfn_glMaterialxvOES)glbindGetProcAddress(`glMaterialxvOES`);
  if (glMaterialxvOES is null) assert(0, `OpenGL function 'glMaterialxvOES' not found!`);
  glMaterialxvOES(a0,a1,a2,);
}
__gshared glbfn_glMultMatrixxOES glMultMatrixxOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glMultMatrixxOES_loader(a0,);
};
private auto glbfn_glMultMatrixxOES_loader (const(int)* a0) nothrow @nogc {
  glMultMatrixxOES = cast(glbfn_glMultMatrixxOES)glbindGetProcAddress(`glMultMatrixxOES`);
  if (glMultMatrixxOES is null) assert(0, `OpenGL function 'glMultMatrixxOES' not found!`);
  glMultMatrixxOES(a0,);
}
__gshared glbfn_glMultiTexCoord4xOES glMultiTexCoord4xOES = function void (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glMultiTexCoord4xOES_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMultiTexCoord4xOES_loader (uint a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glMultiTexCoord4xOES = cast(glbfn_glMultiTexCoord4xOES)glbindGetProcAddress(`glMultiTexCoord4xOES`);
  if (glMultiTexCoord4xOES is null) assert(0, `OpenGL function 'glMultiTexCoord4xOES' not found!`);
  glMultiTexCoord4xOES(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glNormal3xOES glNormal3xOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glNormal3xOES_loader(a0,a1,a2,);
};
private auto glbfn_glNormal3xOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glNormal3xOES = cast(glbfn_glNormal3xOES)glbindGetProcAddress(`glNormal3xOES`);
  if (glNormal3xOES is null) assert(0, `OpenGL function 'glNormal3xOES' not found!`);
  glNormal3xOES(a0,a1,a2,);
}
__gshared glbfn_glOrthoxOES glOrthoxOES = function void (int a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glOrthoxOES_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glOrthoxOES_loader (int a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glOrthoxOES = cast(glbfn_glOrthoxOES)glbindGetProcAddress(`glOrthoxOES`);
  if (glOrthoxOES is null) assert(0, `OpenGL function 'glOrthoxOES' not found!`);
  glOrthoxOES(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glPointParameterxvOES glPointParameterxvOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glPointParameterxvOES_loader(a0,a1,);
};
private auto glbfn_glPointParameterxvOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glPointParameterxvOES = cast(glbfn_glPointParameterxvOES)glbindGetProcAddress(`glPointParameterxvOES`);
  if (glPointParameterxvOES is null) assert(0, `OpenGL function 'glPointParameterxvOES' not found!`);
  glPointParameterxvOES(a0,a1,);
}
__gshared glbfn_glPointSizexOES glPointSizexOES = function void (int a0) nothrow @nogc {
  glbfn_glPointSizexOES_loader(a0,);
};
private auto glbfn_glPointSizexOES_loader (int a0) nothrow @nogc {
  glPointSizexOES = cast(glbfn_glPointSizexOES)glbindGetProcAddress(`glPointSizexOES`);
  if (glPointSizexOES is null) assert(0, `OpenGL function 'glPointSizexOES' not found!`);
  glPointSizexOES(a0,);
}
__gshared glbfn_glPolygonOffsetxOES glPolygonOffsetxOES = function void (int a0, int a1) nothrow @nogc {
  glbfn_glPolygonOffsetxOES_loader(a0,a1,);
};
private auto glbfn_glPolygonOffsetxOES_loader (int a0, int a1) nothrow @nogc {
  glPolygonOffsetxOES = cast(glbfn_glPolygonOffsetxOES)glbindGetProcAddress(`glPolygonOffsetxOES`);
  if (glPolygonOffsetxOES is null) assert(0, `OpenGL function 'glPolygonOffsetxOES' not found!`);
  glPolygonOffsetxOES(a0,a1,);
}
__gshared glbfn_glRotatexOES glRotatexOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glRotatexOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRotatexOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glRotatexOES = cast(glbfn_glRotatexOES)glbindGetProcAddress(`glRotatexOES`);
  if (glRotatexOES is null) assert(0, `OpenGL function 'glRotatexOES' not found!`);
  glRotatexOES(a0,a1,a2,a3,);
}
__gshared glbfn_glScalexOES glScalexOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glScalexOES_loader(a0,a1,a2,);
};
private auto glbfn_glScalexOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glScalexOES = cast(glbfn_glScalexOES)glbindGetProcAddress(`glScalexOES`);
  if (glScalexOES is null) assert(0, `OpenGL function 'glScalexOES' not found!`);
  glScalexOES(a0,a1,a2,);
}
__gshared glbfn_glTexEnvxOES glTexEnvxOES = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTexEnvxOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexEnvxOES_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glTexEnvxOES = cast(glbfn_glTexEnvxOES)glbindGetProcAddress(`glTexEnvxOES`);
  if (glTexEnvxOES is null) assert(0, `OpenGL function 'glTexEnvxOES' not found!`);
  glTexEnvxOES(a0,a1,a2,);
}
__gshared glbfn_glTexEnvxvOES glTexEnvxvOES = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexEnvxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexEnvxvOES_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexEnvxvOES = cast(glbfn_glTexEnvxvOES)glbindGetProcAddress(`glTexEnvxvOES`);
  if (glTexEnvxvOES is null) assert(0, `OpenGL function 'glTexEnvxvOES' not found!`);
  glTexEnvxvOES(a0,a1,a2,);
}
__gshared glbfn_glTexParameterxOES glTexParameterxOES = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTexParameterxOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterxOES_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glTexParameterxOES = cast(glbfn_glTexParameterxOES)glbindGetProcAddress(`glTexParameterxOES`);
  if (glTexParameterxOES is null) assert(0, `OpenGL function 'glTexParameterxOES' not found!`);
  glTexParameterxOES(a0,a1,a2,);
}
__gshared glbfn_glTexParameterxvOES glTexParameterxvOES = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexParameterxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexParameterxvOES_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexParameterxvOES = cast(glbfn_glTexParameterxvOES)glbindGetProcAddress(`glTexParameterxvOES`);
  if (glTexParameterxvOES is null) assert(0, `OpenGL function 'glTexParameterxvOES' not found!`);
  glTexParameterxvOES(a0,a1,a2,);
}
__gshared glbfn_glTranslatexOES glTranslatexOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glTranslatexOES_loader(a0,a1,a2,);
};
private auto glbfn_glTranslatexOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glTranslatexOES = cast(glbfn_glTranslatexOES)glbindGetProcAddress(`glTranslatexOES`);
  if (glTranslatexOES is null) assert(0, `OpenGL function 'glTranslatexOES' not found!`);
  glTranslatexOES(a0,a1,a2,);
}
__gshared glbfn_glGetLightxvOES glGetLightxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetLightxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetLightxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetLightxvOES = cast(glbfn_glGetLightxvOES)glbindGetProcAddress(`glGetLightxvOES`);
  if (glGetLightxvOES is null) assert(0, `OpenGL function 'glGetLightxvOES' not found!`);
  glGetLightxvOES(a0,a1,a2,);
}
__gshared glbfn_glGetMaterialxvOES glGetMaterialxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetMaterialxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetMaterialxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetMaterialxvOES = cast(glbfn_glGetMaterialxvOES)glbindGetProcAddress(`glGetMaterialxvOES`);
  if (glGetMaterialxvOES is null) assert(0, `OpenGL function 'glGetMaterialxvOES' not found!`);
  glGetMaterialxvOES(a0,a1,a2,);
}
__gshared glbfn_glPointParameterxOES glPointParameterxOES = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPointParameterxOES_loader(a0,a1,);
};
private auto glbfn_glPointParameterxOES_loader (uint a0, int a1) nothrow @nogc {
  glPointParameterxOES = cast(glbfn_glPointParameterxOES)glbindGetProcAddress(`glPointParameterxOES`);
  if (glPointParameterxOES is null) assert(0, `OpenGL function 'glPointParameterxOES' not found!`);
  glPointParameterxOES(a0,a1,);
}
__gshared glbfn_glSampleCoveragexOES glSampleCoveragexOES = function void (int a0, ubyte a1) nothrow @nogc {
  glbfn_glSampleCoveragexOES_loader(a0,a1,);
};
private auto glbfn_glSampleCoveragexOES_loader (int a0, ubyte a1) nothrow @nogc {
  glSampleCoveragexOES = cast(glbfn_glSampleCoveragexOES)glbindGetProcAddress(`glSampleCoveragexOES`);
  if (glSampleCoveragexOES is null) assert(0, `OpenGL function 'glSampleCoveragexOES' not found!`);
  glSampleCoveragexOES(a0,a1,);
}
__gshared glbfn_glAccumxOES glAccumxOES = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glAccumxOES_loader(a0,a1,);
};
private auto glbfn_glAccumxOES_loader (uint a0, int a1) nothrow @nogc {
  glAccumxOES = cast(glbfn_glAccumxOES)glbindGetProcAddress(`glAccumxOES`);
  if (glAccumxOES is null) assert(0, `OpenGL function 'glAccumxOES' not found!`);
  glAccumxOES(a0,a1,);
}
__gshared glbfn_glBitmapxOES glBitmapxOES = function void (int a0, int a1, int a2, int a3, int a4, int a5, const(ubyte)* a6) nothrow @nogc {
  glbfn_glBitmapxOES_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glBitmapxOES_loader (int a0, int a1, int a2, int a3, int a4, int a5, const(ubyte)* a6) nothrow @nogc {
  glBitmapxOES = cast(glbfn_glBitmapxOES)glbindGetProcAddress(`glBitmapxOES`);
  if (glBitmapxOES is null) assert(0, `OpenGL function 'glBitmapxOES' not found!`);
  glBitmapxOES(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glBlendColorxOES glBlendColorxOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glBlendColorxOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glBlendColorxOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glBlendColorxOES = cast(glbfn_glBlendColorxOES)glbindGetProcAddress(`glBlendColorxOES`);
  if (glBlendColorxOES is null) assert(0, `OpenGL function 'glBlendColorxOES' not found!`);
  glBlendColorxOES(a0,a1,a2,a3,);
}
__gshared glbfn_glClearAccumxOES glClearAccumxOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glClearAccumxOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glClearAccumxOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glClearAccumxOES = cast(glbfn_glClearAccumxOES)glbindGetProcAddress(`glClearAccumxOES`);
  if (glClearAccumxOES is null) assert(0, `OpenGL function 'glClearAccumxOES' not found!`);
  glClearAccumxOES(a0,a1,a2,a3,);
}
__gshared glbfn_glColor3xOES glColor3xOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glColor3xOES_loader(a0,a1,a2,);
};
private auto glbfn_glColor3xOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glColor3xOES = cast(glbfn_glColor3xOES)glbindGetProcAddress(`glColor3xOES`);
  if (glColor3xOES is null) assert(0, `OpenGL function 'glColor3xOES' not found!`);
  glColor3xOES(a0,a1,a2,);
}
__gshared glbfn_glColor3xvOES glColor3xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glColor3xvOES_loader(a0,);
};
private auto glbfn_glColor3xvOES_loader (const(int)* a0) nothrow @nogc {
  glColor3xvOES = cast(glbfn_glColor3xvOES)glbindGetProcAddress(`glColor3xvOES`);
  if (glColor3xvOES is null) assert(0, `OpenGL function 'glColor3xvOES' not found!`);
  glColor3xvOES(a0,);
}
__gshared glbfn_glColor4xvOES glColor4xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glColor4xvOES_loader(a0,);
};
private auto glbfn_glColor4xvOES_loader (const(int)* a0) nothrow @nogc {
  glColor4xvOES = cast(glbfn_glColor4xvOES)glbindGetProcAddress(`glColor4xvOES`);
  if (glColor4xvOES is null) assert(0, `OpenGL function 'glColor4xvOES' not found!`);
  glColor4xvOES(a0,);
}
__gshared glbfn_glConvolutionParameterxOES glConvolutionParameterxOES = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glConvolutionParameterxOES_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameterxOES_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glConvolutionParameterxOES = cast(glbfn_glConvolutionParameterxOES)glbindGetProcAddress(`glConvolutionParameterxOES`);
  if (glConvolutionParameterxOES is null) assert(0, `OpenGL function 'glConvolutionParameterxOES' not found!`);
  glConvolutionParameterxOES(a0,a1,a2,);
}
__gshared glbfn_glConvolutionParameterxvOES glConvolutionParameterxvOES = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glConvolutionParameterxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glConvolutionParameterxvOES_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glConvolutionParameterxvOES = cast(glbfn_glConvolutionParameterxvOES)glbindGetProcAddress(`glConvolutionParameterxvOES`);
  if (glConvolutionParameterxvOES is null) assert(0, `OpenGL function 'glConvolutionParameterxvOES' not found!`);
  glConvolutionParameterxvOES(a0,a1,a2,);
}
__gshared glbfn_glEvalCoord1xOES glEvalCoord1xOES = function void (int a0) nothrow @nogc {
  glbfn_glEvalCoord1xOES_loader(a0,);
};
private auto glbfn_glEvalCoord1xOES_loader (int a0) nothrow @nogc {
  glEvalCoord1xOES = cast(glbfn_glEvalCoord1xOES)glbindGetProcAddress(`glEvalCoord1xOES`);
  if (glEvalCoord1xOES is null) assert(0, `OpenGL function 'glEvalCoord1xOES' not found!`);
  glEvalCoord1xOES(a0,);
}
__gshared glbfn_glEvalCoord1xvOES glEvalCoord1xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glEvalCoord1xvOES_loader(a0,);
};
private auto glbfn_glEvalCoord1xvOES_loader (const(int)* a0) nothrow @nogc {
  glEvalCoord1xvOES = cast(glbfn_glEvalCoord1xvOES)glbindGetProcAddress(`glEvalCoord1xvOES`);
  if (glEvalCoord1xvOES is null) assert(0, `OpenGL function 'glEvalCoord1xvOES' not found!`);
  glEvalCoord1xvOES(a0,);
}
__gshared glbfn_glEvalCoord2xOES glEvalCoord2xOES = function void (int a0, int a1) nothrow @nogc {
  glbfn_glEvalCoord2xOES_loader(a0,a1,);
};
private auto glbfn_glEvalCoord2xOES_loader (int a0, int a1) nothrow @nogc {
  glEvalCoord2xOES = cast(glbfn_glEvalCoord2xOES)glbindGetProcAddress(`glEvalCoord2xOES`);
  if (glEvalCoord2xOES is null) assert(0, `OpenGL function 'glEvalCoord2xOES' not found!`);
  glEvalCoord2xOES(a0,a1,);
}
__gshared glbfn_glEvalCoord2xvOES glEvalCoord2xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glEvalCoord2xvOES_loader(a0,);
};
private auto glbfn_glEvalCoord2xvOES_loader (const(int)* a0) nothrow @nogc {
  glEvalCoord2xvOES = cast(glbfn_glEvalCoord2xvOES)glbindGetProcAddress(`glEvalCoord2xvOES`);
  if (glEvalCoord2xvOES is null) assert(0, `OpenGL function 'glEvalCoord2xvOES' not found!`);
  glEvalCoord2xvOES(a0,);
}
__gshared glbfn_glFeedbackBufferxOES glFeedbackBufferxOES = function void (int a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glFeedbackBufferxOES_loader(a0,a1,a2,);
};
private auto glbfn_glFeedbackBufferxOES_loader (int a0, uint a1, const(int)* a2) nothrow @nogc {
  glFeedbackBufferxOES = cast(glbfn_glFeedbackBufferxOES)glbindGetProcAddress(`glFeedbackBufferxOES`);
  if (glFeedbackBufferxOES is null) assert(0, `OpenGL function 'glFeedbackBufferxOES' not found!`);
  glFeedbackBufferxOES(a0,a1,a2,);
}
__gshared glbfn_glGetConvolutionParameterxvOES glGetConvolutionParameterxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetConvolutionParameterxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetConvolutionParameterxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetConvolutionParameterxvOES = cast(glbfn_glGetConvolutionParameterxvOES)glbindGetProcAddress(`glGetConvolutionParameterxvOES`);
  if (glGetConvolutionParameterxvOES is null) assert(0, `OpenGL function 'glGetConvolutionParameterxvOES' not found!`);
  glGetConvolutionParameterxvOES(a0,a1,a2,);
}
__gshared glbfn_glGetHistogramParameterxvOES glGetHistogramParameterxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetHistogramParameterxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetHistogramParameterxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetHistogramParameterxvOES = cast(glbfn_glGetHistogramParameterxvOES)glbindGetProcAddress(`glGetHistogramParameterxvOES`);
  if (glGetHistogramParameterxvOES is null) assert(0, `OpenGL function 'glGetHistogramParameterxvOES' not found!`);
  glGetHistogramParameterxvOES(a0,a1,a2,);
}
__gshared glbfn_glGetLightxOES glGetLightxOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetLightxOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetLightxOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetLightxOES = cast(glbfn_glGetLightxOES)glbindGetProcAddress(`glGetLightxOES`);
  if (glGetLightxOES is null) assert(0, `OpenGL function 'glGetLightxOES' not found!`);
  glGetLightxOES(a0,a1,a2,);
}
__gshared glbfn_glGetMapxvOES glGetMapxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetMapxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetMapxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetMapxvOES = cast(glbfn_glGetMapxvOES)glbindGetProcAddress(`glGetMapxvOES`);
  if (glGetMapxvOES is null) assert(0, `OpenGL function 'glGetMapxvOES' not found!`);
  glGetMapxvOES(a0,a1,a2,);
}
__gshared glbfn_glGetMaterialxOES glGetMaterialxOES = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glGetMaterialxOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetMaterialxOES_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glGetMaterialxOES = cast(glbfn_glGetMaterialxOES)glbindGetProcAddress(`glGetMaterialxOES`);
  if (glGetMaterialxOES is null) assert(0, `OpenGL function 'glGetMaterialxOES' not found!`);
  glGetMaterialxOES(a0,a1,a2,);
}
__gshared glbfn_glGetPixelMapxv glGetPixelMapxv = function void (uint a0, int a1, int* a2) nothrow @nogc {
  glbfn_glGetPixelMapxv_loader(a0,a1,a2,);
};
private auto glbfn_glGetPixelMapxv_loader (uint a0, int a1, int* a2) nothrow @nogc {
  glGetPixelMapxv = cast(glbfn_glGetPixelMapxv)glbindGetProcAddress(`glGetPixelMapxv`);
  if (glGetPixelMapxv is null) assert(0, `OpenGL function 'glGetPixelMapxv' not found!`);
  glGetPixelMapxv(a0,a1,a2,);
}
__gshared glbfn_glGetTexGenxvOES glGetTexGenxvOES = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetTexGenxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexGenxvOES_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetTexGenxvOES = cast(glbfn_glGetTexGenxvOES)glbindGetProcAddress(`glGetTexGenxvOES`);
  if (glGetTexGenxvOES is null) assert(0, `OpenGL function 'glGetTexGenxvOES' not found!`);
  glGetTexGenxvOES(a0,a1,a2,);
}
__gshared glbfn_glGetTexLevelParameterxvOES glGetTexLevelParameterxvOES = function void (uint a0, int a1, uint a2, int* a3) nothrow @nogc {
  glbfn_glGetTexLevelParameterxvOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetTexLevelParameterxvOES_loader (uint a0, int a1, uint a2, int* a3) nothrow @nogc {
  glGetTexLevelParameterxvOES = cast(glbfn_glGetTexLevelParameterxvOES)glbindGetProcAddress(`glGetTexLevelParameterxvOES`);
  if (glGetTexLevelParameterxvOES is null) assert(0, `OpenGL function 'glGetTexLevelParameterxvOES' not found!`);
  glGetTexLevelParameterxvOES(a0,a1,a2,a3,);
}
__gshared glbfn_glIndexxOES glIndexxOES = function void (int a0) nothrow @nogc {
  glbfn_glIndexxOES_loader(a0,);
};
private auto glbfn_glIndexxOES_loader (int a0) nothrow @nogc {
  glIndexxOES = cast(glbfn_glIndexxOES)glbindGetProcAddress(`glIndexxOES`);
  if (glIndexxOES is null) assert(0, `OpenGL function 'glIndexxOES' not found!`);
  glIndexxOES(a0,);
}
__gshared glbfn_glIndexxvOES glIndexxvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glIndexxvOES_loader(a0,);
};
private auto glbfn_glIndexxvOES_loader (const(int)* a0) nothrow @nogc {
  glIndexxvOES = cast(glbfn_glIndexxvOES)glbindGetProcAddress(`glIndexxvOES`);
  if (glIndexxvOES is null) assert(0, `OpenGL function 'glIndexxvOES' not found!`);
  glIndexxvOES(a0,);
}
__gshared glbfn_glLoadTransposeMatrixxOES glLoadTransposeMatrixxOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glLoadTransposeMatrixxOES_loader(a0,);
};
private auto glbfn_glLoadTransposeMatrixxOES_loader (const(int)* a0) nothrow @nogc {
  glLoadTransposeMatrixxOES = cast(glbfn_glLoadTransposeMatrixxOES)glbindGetProcAddress(`glLoadTransposeMatrixxOES`);
  if (glLoadTransposeMatrixxOES is null) assert(0, `OpenGL function 'glLoadTransposeMatrixxOES' not found!`);
  glLoadTransposeMatrixxOES(a0,);
}
__gshared glbfn_glMap1xOES glMap1xOES = function void (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glMap1xOES_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glMap1xOES_loader (uint a0, int a1, int a2, int a3, int a4, int a5) nothrow @nogc {
  glMap1xOES = cast(glbfn_glMap1xOES)glbindGetProcAddress(`glMap1xOES`);
  if (glMap1xOES is null) assert(0, `OpenGL function 'glMap1xOES' not found!`);
  glMap1xOES(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glMap2xOES glMap2xOES = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) nothrow @nogc {
  glbfn_glMap2xOES_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glMap2xOES_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) nothrow @nogc {
  glMap2xOES = cast(glbfn_glMap2xOES)glbindGetProcAddress(`glMap2xOES`);
  if (glMap2xOES is null) assert(0, `OpenGL function 'glMap2xOES' not found!`);
  glMap2xOES(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glMapGrid1xOES glMapGrid1xOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glMapGrid1xOES_loader(a0,a1,a2,);
};
private auto glbfn_glMapGrid1xOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glMapGrid1xOES = cast(glbfn_glMapGrid1xOES)glbindGetProcAddress(`glMapGrid1xOES`);
  if (glMapGrid1xOES is null) assert(0, `OpenGL function 'glMapGrid1xOES' not found!`);
  glMapGrid1xOES(a0,a1,a2,);
}
__gshared glbfn_glMapGrid2xOES glMapGrid2xOES = function void (int a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glMapGrid2xOES_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glMapGrid2xOES_loader (int a0, int a1, int a2, int a3, int a4) nothrow @nogc {
  glMapGrid2xOES = cast(glbfn_glMapGrid2xOES)glbindGetProcAddress(`glMapGrid2xOES`);
  if (glMapGrid2xOES is null) assert(0, `OpenGL function 'glMapGrid2xOES' not found!`);
  glMapGrid2xOES(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glMultTransposeMatrixxOES glMultTransposeMatrixxOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glMultTransposeMatrixxOES_loader(a0,);
};
private auto glbfn_glMultTransposeMatrixxOES_loader (const(int)* a0) nothrow @nogc {
  glMultTransposeMatrixxOES = cast(glbfn_glMultTransposeMatrixxOES)glbindGetProcAddress(`glMultTransposeMatrixxOES`);
  if (glMultTransposeMatrixxOES is null) assert(0, `OpenGL function 'glMultTransposeMatrixxOES' not found!`);
  glMultTransposeMatrixxOES(a0,);
}
__gshared glbfn_glMultiTexCoord1xOES glMultiTexCoord1xOES = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glMultiTexCoord1xOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1xOES_loader (uint a0, int a1) nothrow @nogc {
  glMultiTexCoord1xOES = cast(glbfn_glMultiTexCoord1xOES)glbindGetProcAddress(`glMultiTexCoord1xOES`);
  if (glMultiTexCoord1xOES is null) assert(0, `OpenGL function 'glMultiTexCoord1xOES' not found!`);
  glMultiTexCoord1xOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord1xvOES glMultiTexCoord1xvOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord1xvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord1xvOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord1xvOES = cast(glbfn_glMultiTexCoord1xvOES)glbindGetProcAddress(`glMultiTexCoord1xvOES`);
  if (glMultiTexCoord1xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord1xvOES' not found!`);
  glMultiTexCoord1xvOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord2xOES glMultiTexCoord2xOES = function void (uint a0, int a1, int a2) nothrow @nogc {
  glbfn_glMultiTexCoord2xOES_loader(a0,a1,a2,);
};
private auto glbfn_glMultiTexCoord2xOES_loader (uint a0, int a1, int a2) nothrow @nogc {
  glMultiTexCoord2xOES = cast(glbfn_glMultiTexCoord2xOES)glbindGetProcAddress(`glMultiTexCoord2xOES`);
  if (glMultiTexCoord2xOES is null) assert(0, `OpenGL function 'glMultiTexCoord2xOES' not found!`);
  glMultiTexCoord2xOES(a0,a1,a2,);
}
__gshared glbfn_glMultiTexCoord2xvOES glMultiTexCoord2xvOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord2xvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord2xvOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord2xvOES = cast(glbfn_glMultiTexCoord2xvOES)glbindGetProcAddress(`glMultiTexCoord2xvOES`);
  if (glMultiTexCoord2xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord2xvOES' not found!`);
  glMultiTexCoord2xvOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord3xOES glMultiTexCoord3xOES = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glMultiTexCoord3xOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glMultiTexCoord3xOES_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glMultiTexCoord3xOES = cast(glbfn_glMultiTexCoord3xOES)glbindGetProcAddress(`glMultiTexCoord3xOES`);
  if (glMultiTexCoord3xOES is null) assert(0, `OpenGL function 'glMultiTexCoord3xOES' not found!`);
  glMultiTexCoord3xOES(a0,a1,a2,a3,);
}
__gshared glbfn_glMultiTexCoord3xvOES glMultiTexCoord3xvOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord3xvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord3xvOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord3xvOES = cast(glbfn_glMultiTexCoord3xvOES)glbindGetProcAddress(`glMultiTexCoord3xvOES`);
  if (glMultiTexCoord3xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord3xvOES' not found!`);
  glMultiTexCoord3xvOES(a0,a1,);
}
__gshared glbfn_glMultiTexCoord4xvOES glMultiTexCoord4xvOES = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glMultiTexCoord4xvOES_loader(a0,a1,);
};
private auto glbfn_glMultiTexCoord4xvOES_loader (uint a0, const(int)* a1) nothrow @nogc {
  glMultiTexCoord4xvOES = cast(glbfn_glMultiTexCoord4xvOES)glbindGetProcAddress(`glMultiTexCoord4xvOES`);
  if (glMultiTexCoord4xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord4xvOES' not found!`);
  glMultiTexCoord4xvOES(a0,a1,);
}
__gshared glbfn_glNormal3xvOES glNormal3xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glNormal3xvOES_loader(a0,);
};
private auto glbfn_glNormal3xvOES_loader (const(int)* a0) nothrow @nogc {
  glNormal3xvOES = cast(glbfn_glNormal3xvOES)glbindGetProcAddress(`glNormal3xvOES`);
  if (glNormal3xvOES is null) assert(0, `OpenGL function 'glNormal3xvOES' not found!`);
  glNormal3xvOES(a0,);
}
__gshared glbfn_glPassThroughxOES glPassThroughxOES = function void (int a0) nothrow @nogc {
  glbfn_glPassThroughxOES_loader(a0,);
};
private auto glbfn_glPassThroughxOES_loader (int a0) nothrow @nogc {
  glPassThroughxOES = cast(glbfn_glPassThroughxOES)glbindGetProcAddress(`glPassThroughxOES`);
  if (glPassThroughxOES is null) assert(0, `OpenGL function 'glPassThroughxOES' not found!`);
  glPassThroughxOES(a0,);
}
__gshared glbfn_glPixelMapx glPixelMapx = function void (uint a0, int a1, const(int)* a2) nothrow @nogc {
  glbfn_glPixelMapx_loader(a0,a1,a2,);
};
private auto glbfn_glPixelMapx_loader (uint a0, int a1, const(int)* a2) nothrow @nogc {
  glPixelMapx = cast(glbfn_glPixelMapx)glbindGetProcAddress(`glPixelMapx`);
  if (glPixelMapx is null) assert(0, `OpenGL function 'glPixelMapx' not found!`);
  glPixelMapx(a0,a1,a2,);
}
__gshared glbfn_glPixelStorex glPixelStorex = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPixelStorex_loader(a0,a1,);
};
private auto glbfn_glPixelStorex_loader (uint a0, int a1) nothrow @nogc {
  glPixelStorex = cast(glbfn_glPixelStorex)glbindGetProcAddress(`glPixelStorex`);
  if (glPixelStorex is null) assert(0, `OpenGL function 'glPixelStorex' not found!`);
  glPixelStorex(a0,a1,);
}
__gshared glbfn_glPixelTransferxOES glPixelTransferxOES = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPixelTransferxOES_loader(a0,a1,);
};
private auto glbfn_glPixelTransferxOES_loader (uint a0, int a1) nothrow @nogc {
  glPixelTransferxOES = cast(glbfn_glPixelTransferxOES)glbindGetProcAddress(`glPixelTransferxOES`);
  if (glPixelTransferxOES is null) assert(0, `OpenGL function 'glPixelTransferxOES' not found!`);
  glPixelTransferxOES(a0,a1,);
}
__gshared glbfn_glPixelZoomxOES glPixelZoomxOES = function void (int a0, int a1) nothrow @nogc {
  glbfn_glPixelZoomxOES_loader(a0,a1,);
};
private auto glbfn_glPixelZoomxOES_loader (int a0, int a1) nothrow @nogc {
  glPixelZoomxOES = cast(glbfn_glPixelZoomxOES)glbindGetProcAddress(`glPixelZoomxOES`);
  if (glPixelZoomxOES is null) assert(0, `OpenGL function 'glPixelZoomxOES' not found!`);
  glPixelZoomxOES(a0,a1,);
}
__gshared glbfn_glPrioritizeTexturesxOES glPrioritizeTexturesxOES = function void (int a0, const(uint)* a1, const(int)* a2) nothrow @nogc {
  glbfn_glPrioritizeTexturesxOES_loader(a0,a1,a2,);
};
private auto glbfn_glPrioritizeTexturesxOES_loader (int a0, const(uint)* a1, const(int)* a2) nothrow @nogc {
  glPrioritizeTexturesxOES = cast(glbfn_glPrioritizeTexturesxOES)glbindGetProcAddress(`glPrioritizeTexturesxOES`);
  if (glPrioritizeTexturesxOES is null) assert(0, `OpenGL function 'glPrioritizeTexturesxOES' not found!`);
  glPrioritizeTexturesxOES(a0,a1,a2,);
}
__gshared glbfn_glRasterPos2xOES glRasterPos2xOES = function void (int a0, int a1) nothrow @nogc {
  glbfn_glRasterPos2xOES_loader(a0,a1,);
};
private auto glbfn_glRasterPos2xOES_loader (int a0, int a1) nothrow @nogc {
  glRasterPos2xOES = cast(glbfn_glRasterPos2xOES)glbindGetProcAddress(`glRasterPos2xOES`);
  if (glRasterPos2xOES is null) assert(0, `OpenGL function 'glRasterPos2xOES' not found!`);
  glRasterPos2xOES(a0,a1,);
}
__gshared glbfn_glRasterPos2xvOES glRasterPos2xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glRasterPos2xvOES_loader(a0,);
};
private auto glbfn_glRasterPos2xvOES_loader (const(int)* a0) nothrow @nogc {
  glRasterPos2xvOES = cast(glbfn_glRasterPos2xvOES)glbindGetProcAddress(`glRasterPos2xvOES`);
  if (glRasterPos2xvOES is null) assert(0, `OpenGL function 'glRasterPos2xvOES' not found!`);
  glRasterPos2xvOES(a0,);
}
__gshared glbfn_glRasterPos3xOES glRasterPos3xOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glRasterPos3xOES_loader(a0,a1,a2,);
};
private auto glbfn_glRasterPos3xOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glRasterPos3xOES = cast(glbfn_glRasterPos3xOES)glbindGetProcAddress(`glRasterPos3xOES`);
  if (glRasterPos3xOES is null) assert(0, `OpenGL function 'glRasterPos3xOES' not found!`);
  glRasterPos3xOES(a0,a1,a2,);
}
__gshared glbfn_glRasterPos3xvOES glRasterPos3xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glRasterPos3xvOES_loader(a0,);
};
private auto glbfn_glRasterPos3xvOES_loader (const(int)* a0) nothrow @nogc {
  glRasterPos3xvOES = cast(glbfn_glRasterPos3xvOES)glbindGetProcAddress(`glRasterPos3xvOES`);
  if (glRasterPos3xvOES is null) assert(0, `OpenGL function 'glRasterPos3xvOES' not found!`);
  glRasterPos3xvOES(a0,);
}
__gshared glbfn_glRasterPos4xOES glRasterPos4xOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glRasterPos4xOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRasterPos4xOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glRasterPos4xOES = cast(glbfn_glRasterPos4xOES)glbindGetProcAddress(`glRasterPos4xOES`);
  if (glRasterPos4xOES is null) assert(0, `OpenGL function 'glRasterPos4xOES' not found!`);
  glRasterPos4xOES(a0,a1,a2,a3,);
}
__gshared glbfn_glRasterPos4xvOES glRasterPos4xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glRasterPos4xvOES_loader(a0,);
};
private auto glbfn_glRasterPos4xvOES_loader (const(int)* a0) nothrow @nogc {
  glRasterPos4xvOES = cast(glbfn_glRasterPos4xvOES)glbindGetProcAddress(`glRasterPos4xvOES`);
  if (glRasterPos4xvOES is null) assert(0, `OpenGL function 'glRasterPos4xvOES' not found!`);
  glRasterPos4xvOES(a0,);
}
__gshared glbfn_glRectxOES glRectxOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glRectxOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glRectxOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glRectxOES = cast(glbfn_glRectxOES)glbindGetProcAddress(`glRectxOES`);
  if (glRectxOES is null) assert(0, `OpenGL function 'glRectxOES' not found!`);
  glRectxOES(a0,a1,a2,a3,);
}
__gshared glbfn_glRectxvOES glRectxvOES = function void (const(int)* a0, const(int)* a1) nothrow @nogc {
  glbfn_glRectxvOES_loader(a0,a1,);
};
private auto glbfn_glRectxvOES_loader (const(int)* a0, const(int)* a1) nothrow @nogc {
  glRectxvOES = cast(glbfn_glRectxvOES)glbindGetProcAddress(`glRectxvOES`);
  if (glRectxvOES is null) assert(0, `OpenGL function 'glRectxvOES' not found!`);
  glRectxvOES(a0,a1,);
}
__gshared glbfn_glTexCoord1xOES glTexCoord1xOES = function void (int a0) nothrow @nogc {
  glbfn_glTexCoord1xOES_loader(a0,);
};
private auto glbfn_glTexCoord1xOES_loader (int a0) nothrow @nogc {
  glTexCoord1xOES = cast(glbfn_glTexCoord1xOES)glbindGetProcAddress(`glTexCoord1xOES`);
  if (glTexCoord1xOES is null) assert(0, `OpenGL function 'glTexCoord1xOES' not found!`);
  glTexCoord1xOES(a0,);
}
__gshared glbfn_glTexCoord1xvOES glTexCoord1xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord1xvOES_loader(a0,);
};
private auto glbfn_glTexCoord1xvOES_loader (const(int)* a0) nothrow @nogc {
  glTexCoord1xvOES = cast(glbfn_glTexCoord1xvOES)glbindGetProcAddress(`glTexCoord1xvOES`);
  if (glTexCoord1xvOES is null) assert(0, `OpenGL function 'glTexCoord1xvOES' not found!`);
  glTexCoord1xvOES(a0,);
}
__gshared glbfn_glTexCoord2xOES glTexCoord2xOES = function void (int a0, int a1) nothrow @nogc {
  glbfn_glTexCoord2xOES_loader(a0,a1,);
};
private auto glbfn_glTexCoord2xOES_loader (int a0, int a1) nothrow @nogc {
  glTexCoord2xOES = cast(glbfn_glTexCoord2xOES)glbindGetProcAddress(`glTexCoord2xOES`);
  if (glTexCoord2xOES is null) assert(0, `OpenGL function 'glTexCoord2xOES' not found!`);
  glTexCoord2xOES(a0,a1,);
}
__gshared glbfn_glTexCoord2xvOES glTexCoord2xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord2xvOES_loader(a0,);
};
private auto glbfn_glTexCoord2xvOES_loader (const(int)* a0) nothrow @nogc {
  glTexCoord2xvOES = cast(glbfn_glTexCoord2xvOES)glbindGetProcAddress(`glTexCoord2xvOES`);
  if (glTexCoord2xvOES is null) assert(0, `OpenGL function 'glTexCoord2xvOES' not found!`);
  glTexCoord2xvOES(a0,);
}
__gshared glbfn_glTexCoord3xOES glTexCoord3xOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glTexCoord3xOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord3xOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glTexCoord3xOES = cast(glbfn_glTexCoord3xOES)glbindGetProcAddress(`glTexCoord3xOES`);
  if (glTexCoord3xOES is null) assert(0, `OpenGL function 'glTexCoord3xOES' not found!`);
  glTexCoord3xOES(a0,a1,a2,);
}
__gshared glbfn_glTexCoord3xvOES glTexCoord3xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord3xvOES_loader(a0,);
};
private auto glbfn_glTexCoord3xvOES_loader (const(int)* a0) nothrow @nogc {
  glTexCoord3xvOES = cast(glbfn_glTexCoord3xvOES)glbindGetProcAddress(`glTexCoord3xvOES`);
  if (glTexCoord3xvOES is null) assert(0, `OpenGL function 'glTexCoord3xvOES' not found!`);
  glTexCoord3xvOES(a0,);
}
__gshared glbfn_glTexCoord4xOES glTexCoord4xOES = function void (int a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glTexCoord4xOES_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4xOES_loader (int a0, int a1, int a2, int a3) nothrow @nogc {
  glTexCoord4xOES = cast(glbfn_glTexCoord4xOES)glbindGetProcAddress(`glTexCoord4xOES`);
  if (glTexCoord4xOES is null) assert(0, `OpenGL function 'glTexCoord4xOES' not found!`);
  glTexCoord4xOES(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4xvOES glTexCoord4xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glTexCoord4xvOES_loader(a0,);
};
private auto glbfn_glTexCoord4xvOES_loader (const(int)* a0) nothrow @nogc {
  glTexCoord4xvOES = cast(glbfn_glTexCoord4xvOES)glbindGetProcAddress(`glTexCoord4xvOES`);
  if (glTexCoord4xvOES is null) assert(0, `OpenGL function 'glTexCoord4xvOES' not found!`);
  glTexCoord4xvOES(a0,);
}
__gshared glbfn_glTexGenxOES glTexGenxOES = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glTexGenxOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexGenxOES_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glTexGenxOES = cast(glbfn_glTexGenxOES)glbindGetProcAddress(`glTexGenxOES`);
  if (glTexGenxOES is null) assert(0, `OpenGL function 'glTexGenxOES' not found!`);
  glTexGenxOES(a0,a1,a2,);
}
__gshared glbfn_glTexGenxvOES glTexGenxvOES = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glTexGenxvOES_loader(a0,a1,a2,);
};
private auto glbfn_glTexGenxvOES_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glTexGenxvOES = cast(glbfn_glTexGenxvOES)glbindGetProcAddress(`glTexGenxvOES`);
  if (glTexGenxvOES is null) assert(0, `OpenGL function 'glTexGenxvOES' not found!`);
  glTexGenxvOES(a0,a1,a2,);
}
__gshared glbfn_glVertex2xOES glVertex2xOES = function void (int a0) nothrow @nogc {
  glbfn_glVertex2xOES_loader(a0,);
};
private auto glbfn_glVertex2xOES_loader (int a0) nothrow @nogc {
  glVertex2xOES = cast(glbfn_glVertex2xOES)glbindGetProcAddress(`glVertex2xOES`);
  if (glVertex2xOES is null) assert(0, `OpenGL function 'glVertex2xOES' not found!`);
  glVertex2xOES(a0,);
}
__gshared glbfn_glVertex2xvOES glVertex2xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glVertex2xvOES_loader(a0,);
};
private auto glbfn_glVertex2xvOES_loader (const(int)* a0) nothrow @nogc {
  glVertex2xvOES = cast(glbfn_glVertex2xvOES)glbindGetProcAddress(`glVertex2xvOES`);
  if (glVertex2xvOES is null) assert(0, `OpenGL function 'glVertex2xvOES' not found!`);
  glVertex2xvOES(a0,);
}
__gshared glbfn_glVertex3xOES glVertex3xOES = function void (int a0, int a1) nothrow @nogc {
  glbfn_glVertex3xOES_loader(a0,a1,);
};
private auto glbfn_glVertex3xOES_loader (int a0, int a1) nothrow @nogc {
  glVertex3xOES = cast(glbfn_glVertex3xOES)glbindGetProcAddress(`glVertex3xOES`);
  if (glVertex3xOES is null) assert(0, `OpenGL function 'glVertex3xOES' not found!`);
  glVertex3xOES(a0,a1,);
}
__gshared glbfn_glVertex3xvOES glVertex3xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glVertex3xvOES_loader(a0,);
};
private auto glbfn_glVertex3xvOES_loader (const(int)* a0) nothrow @nogc {
  glVertex3xvOES = cast(glbfn_glVertex3xvOES)glbindGetProcAddress(`glVertex3xvOES`);
  if (glVertex3xvOES is null) assert(0, `OpenGL function 'glVertex3xvOES' not found!`);
  glVertex3xvOES(a0,);
}
__gshared glbfn_glVertex4xOES glVertex4xOES = function void (int a0, int a1, int a2) nothrow @nogc {
  glbfn_glVertex4xOES_loader(a0,a1,a2,);
};
private auto glbfn_glVertex4xOES_loader (int a0, int a1, int a2) nothrow @nogc {
  glVertex4xOES = cast(glbfn_glVertex4xOES)glbindGetProcAddress(`glVertex4xOES`);
  if (glVertex4xOES is null) assert(0, `OpenGL function 'glVertex4xOES' not found!`);
  glVertex4xOES(a0,a1,a2,);
}
__gshared glbfn_glVertex4xvOES glVertex4xvOES = function void (const(int)* a0) nothrow @nogc {
  glbfn_glVertex4xvOES_loader(a0,);
};
private auto glbfn_glVertex4xvOES_loader (const(int)* a0) nothrow @nogc {
  glVertex4xvOES = cast(glbfn_glVertex4xvOES)glbindGetProcAddress(`glVertex4xvOES`);
  if (glVertex4xvOES is null) assert(0, `OpenGL function 'glVertex4xvOES' not found!`);
  glVertex4xvOES(a0,);
}
__gshared glbfn_glQueryMatrixxOES glQueryMatrixxOES = function uint (int* a0, int* a1) nothrow @nogc {
  return glbfn_glQueryMatrixxOES_loader(a0,a1,);
};
private auto glbfn_glQueryMatrixxOES_loader (int* a0, int* a1) nothrow @nogc {
  glQueryMatrixxOES = cast(glbfn_glQueryMatrixxOES)glbindGetProcAddress(`glQueryMatrixxOES`);
  if (glQueryMatrixxOES is null) assert(0, `OpenGL function 'glQueryMatrixxOES' not found!`);
  return glQueryMatrixxOES(a0,a1,);
}
__gshared glbfn_glClearDepthfOES glClearDepthfOES = function void (float a0) nothrow @nogc {
  glbfn_glClearDepthfOES_loader(a0,);
};
private auto glbfn_glClearDepthfOES_loader (float a0) nothrow @nogc {
  glClearDepthfOES = cast(glbfn_glClearDepthfOES)glbindGetProcAddress(`glClearDepthfOES`);
  if (glClearDepthfOES is null) assert(0, `OpenGL function 'glClearDepthfOES' not found!`);
  glClearDepthfOES(a0,);
}
__gshared glbfn_glClipPlanefOES glClipPlanefOES = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glClipPlanefOES_loader(a0,a1,);
};
private auto glbfn_glClipPlanefOES_loader (uint a0, const(float)* a1) nothrow @nogc {
  glClipPlanefOES = cast(glbfn_glClipPlanefOES)glbindGetProcAddress(`glClipPlanefOES`);
  if (glClipPlanefOES is null) assert(0, `OpenGL function 'glClipPlanefOES' not found!`);
  glClipPlanefOES(a0,a1,);
}
__gshared glbfn_glDepthRangefOES glDepthRangefOES = function void (float a0, float a1) nothrow @nogc {
  glbfn_glDepthRangefOES_loader(a0,a1,);
};
private auto glbfn_glDepthRangefOES_loader (float a0, float a1) nothrow @nogc {
  glDepthRangefOES = cast(glbfn_glDepthRangefOES)glbindGetProcAddress(`glDepthRangefOES`);
  if (glDepthRangefOES is null) assert(0, `OpenGL function 'glDepthRangefOES' not found!`);
  glDepthRangefOES(a0,a1,);
}
__gshared glbfn_glFrustumfOES glFrustumfOES = function void (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glFrustumfOES_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glFrustumfOES_loader (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glFrustumfOES = cast(glbfn_glFrustumfOES)glbindGetProcAddress(`glFrustumfOES`);
  if (glFrustumfOES is null) assert(0, `OpenGL function 'glFrustumfOES' not found!`);
  glFrustumfOES(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glGetClipPlanefOES glGetClipPlanefOES = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetClipPlanefOES_loader(a0,a1,);
};
private auto glbfn_glGetClipPlanefOES_loader (uint a0, float* a1) nothrow @nogc {
  glGetClipPlanefOES = cast(glbfn_glGetClipPlanefOES)glbindGetProcAddress(`glGetClipPlanefOES`);
  if (glGetClipPlanefOES is null) assert(0, `OpenGL function 'glGetClipPlanefOES' not found!`);
  glGetClipPlanefOES(a0,a1,);
}
__gshared glbfn_glOrthofOES glOrthofOES = function void (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glOrthofOES_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glOrthofOES_loader (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glOrthofOES = cast(glbfn_glOrthofOES)glbindGetProcAddress(`glOrthofOES`);
  if (glOrthofOES is null) assert(0, `OpenGL function 'glOrthofOES' not found!`);
  glOrthofOES(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glFramebufferTextureMultiviewOVR glFramebufferTextureMultiviewOVR = function void (uint a0, uint a1, uint a2, int a3, int a4, int a5) nothrow @nogc {
  glbfn_glFramebufferTextureMultiviewOVR_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glFramebufferTextureMultiviewOVR_loader (uint a0, uint a1, uint a2, int a3, int a4, int a5) nothrow @nogc {
  glFramebufferTextureMultiviewOVR = cast(glbfn_glFramebufferTextureMultiviewOVR)glbindGetProcAddress(`glFramebufferTextureMultiviewOVR`);
  if (glFramebufferTextureMultiviewOVR is null) assert(0, `OpenGL function 'glFramebufferTextureMultiviewOVR' not found!`);
  glFramebufferTextureMultiviewOVR(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glHintPGI glHintPGI = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glHintPGI_loader(a0,a1,);
};
private auto glbfn_glHintPGI_loader (uint a0, int a1) nothrow @nogc {
  glHintPGI = cast(glbfn_glHintPGI)glbindGetProcAddress(`glHintPGI`);
  if (glHintPGI is null) assert(0, `OpenGL function 'glHintPGI' not found!`);
  glHintPGI(a0,a1,);
}
__gshared glbfn_glDetailTexFuncSGIS glDetailTexFuncSGIS = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glDetailTexFuncSGIS_loader(a0,a1,a2,);
};
private auto glbfn_glDetailTexFuncSGIS_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glDetailTexFuncSGIS = cast(glbfn_glDetailTexFuncSGIS)glbindGetProcAddress(`glDetailTexFuncSGIS`);
  if (glDetailTexFuncSGIS is null) assert(0, `OpenGL function 'glDetailTexFuncSGIS' not found!`);
  glDetailTexFuncSGIS(a0,a1,a2,);
}
__gshared glbfn_glGetDetailTexFuncSGIS glGetDetailTexFuncSGIS = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetDetailTexFuncSGIS_loader(a0,a1,);
};
private auto glbfn_glGetDetailTexFuncSGIS_loader (uint a0, float* a1) nothrow @nogc {
  glGetDetailTexFuncSGIS = cast(glbfn_glGetDetailTexFuncSGIS)glbindGetProcAddress(`glGetDetailTexFuncSGIS`);
  if (glGetDetailTexFuncSGIS is null) assert(0, `OpenGL function 'glGetDetailTexFuncSGIS' not found!`);
  glGetDetailTexFuncSGIS(a0,a1,);
}
__gshared glbfn_glFogFuncSGIS glFogFuncSGIS = function void (int a0, const(float)* a1) nothrow @nogc {
  glbfn_glFogFuncSGIS_loader(a0,a1,);
};
private auto glbfn_glFogFuncSGIS_loader (int a0, const(float)* a1) nothrow @nogc {
  glFogFuncSGIS = cast(glbfn_glFogFuncSGIS)glbindGetProcAddress(`glFogFuncSGIS`);
  if (glFogFuncSGIS is null) assert(0, `OpenGL function 'glFogFuncSGIS' not found!`);
  glFogFuncSGIS(a0,a1,);
}
__gshared glbfn_glGetFogFuncSGIS glGetFogFuncSGIS = function void (float* a0) nothrow @nogc {
  glbfn_glGetFogFuncSGIS_loader(a0,);
};
private auto glbfn_glGetFogFuncSGIS_loader (float* a0) nothrow @nogc {
  glGetFogFuncSGIS = cast(glbfn_glGetFogFuncSGIS)glbindGetProcAddress(`glGetFogFuncSGIS`);
  if (glGetFogFuncSGIS is null) assert(0, `OpenGL function 'glGetFogFuncSGIS' not found!`);
  glGetFogFuncSGIS(a0,);
}
__gshared glbfn_glSampleMaskSGIS glSampleMaskSGIS = function void (float a0, ubyte a1) nothrow @nogc {
  glbfn_glSampleMaskSGIS_loader(a0,a1,);
};
private auto glbfn_glSampleMaskSGIS_loader (float a0, ubyte a1) nothrow @nogc {
  glSampleMaskSGIS = cast(glbfn_glSampleMaskSGIS)glbindGetProcAddress(`glSampleMaskSGIS`);
  if (glSampleMaskSGIS is null) assert(0, `OpenGL function 'glSampleMaskSGIS' not found!`);
  glSampleMaskSGIS(a0,a1,);
}
__gshared glbfn_glSamplePatternSGIS glSamplePatternSGIS = function void (uint a0) nothrow @nogc {
  glbfn_glSamplePatternSGIS_loader(a0,);
};
private auto glbfn_glSamplePatternSGIS_loader (uint a0) nothrow @nogc {
  glSamplePatternSGIS = cast(glbfn_glSamplePatternSGIS)glbindGetProcAddress(`glSamplePatternSGIS`);
  if (glSamplePatternSGIS is null) assert(0, `OpenGL function 'glSamplePatternSGIS' not found!`);
  glSamplePatternSGIS(a0,);
}
__gshared glbfn_glPixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glPixelTexGenParameteriSGIS_loader(a0,a1,);
};
private auto glbfn_glPixelTexGenParameteriSGIS_loader (uint a0, int a1) nothrow @nogc {
  glPixelTexGenParameteriSGIS = cast(glbfn_glPixelTexGenParameteriSGIS)glbindGetProcAddress(`glPixelTexGenParameteriSGIS`);
  if (glPixelTexGenParameteriSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameteriSGIS' not found!`);
  glPixelTexGenParameteriSGIS(a0,a1,);
}
__gshared glbfn_glPixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glPixelTexGenParameterivSGIS_loader(a0,a1,);
};
private auto glbfn_glPixelTexGenParameterivSGIS_loader (uint a0, const(int)* a1) nothrow @nogc {
  glPixelTexGenParameterivSGIS = cast(glbfn_glPixelTexGenParameterivSGIS)glbindGetProcAddress(`glPixelTexGenParameterivSGIS`);
  if (glPixelTexGenParameterivSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameterivSGIS' not found!`);
  glPixelTexGenParameterivSGIS(a0,a1,);
}
__gshared glbfn_glPixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPixelTexGenParameterfSGIS_loader(a0,a1,);
};
private auto glbfn_glPixelTexGenParameterfSGIS_loader (uint a0, float a1) nothrow @nogc {
  glPixelTexGenParameterfSGIS = cast(glbfn_glPixelTexGenParameterfSGIS)glbindGetProcAddress(`glPixelTexGenParameterfSGIS`);
  if (glPixelTexGenParameterfSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameterfSGIS' not found!`);
  glPixelTexGenParameterfSGIS(a0,a1,);
}
__gshared glbfn_glPixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glPixelTexGenParameterfvSGIS_loader(a0,a1,);
};
private auto glbfn_glPixelTexGenParameterfvSGIS_loader (uint a0, const(float)* a1) nothrow @nogc {
  glPixelTexGenParameterfvSGIS = cast(glbfn_glPixelTexGenParameterfvSGIS)glbindGetProcAddress(`glPixelTexGenParameterfvSGIS`);
  if (glPixelTexGenParameterfvSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameterfvSGIS' not found!`);
  glPixelTexGenParameterfvSGIS(a0,a1,);
}
__gshared glbfn_glGetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS = function void (uint a0, int* a1) nothrow @nogc {
  glbfn_glGetPixelTexGenParameterivSGIS_loader(a0,a1,);
};
private auto glbfn_glGetPixelTexGenParameterivSGIS_loader (uint a0, int* a1) nothrow @nogc {
  glGetPixelTexGenParameterivSGIS = cast(glbfn_glGetPixelTexGenParameterivSGIS)glbindGetProcAddress(`glGetPixelTexGenParameterivSGIS`);
  if (glGetPixelTexGenParameterivSGIS is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterivSGIS' not found!`);
  glGetPixelTexGenParameterivSGIS(a0,a1,);
}
__gshared glbfn_glGetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetPixelTexGenParameterfvSGIS_loader(a0,a1,);
};
private auto glbfn_glGetPixelTexGenParameterfvSGIS_loader (uint a0, float* a1) nothrow @nogc {
  glGetPixelTexGenParameterfvSGIS = cast(glbfn_glGetPixelTexGenParameterfvSGIS)glbindGetProcAddress(`glGetPixelTexGenParameterfvSGIS`);
  if (glGetPixelTexGenParameterfvSGIS is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterfvSGIS' not found!`);
  glGetPixelTexGenParameterfvSGIS(a0,a1,);
}
__gshared glbfn_glPointParameterfSGIS glPointParameterfSGIS = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glPointParameterfSGIS_loader(a0,a1,);
};
private auto glbfn_glPointParameterfSGIS_loader (uint a0, float a1) nothrow @nogc {
  glPointParameterfSGIS = cast(glbfn_glPointParameterfSGIS)glbindGetProcAddress(`glPointParameterfSGIS`);
  if (glPointParameterfSGIS is null) assert(0, `OpenGL function 'glPointParameterfSGIS' not found!`);
  glPointParameterfSGIS(a0,a1,);
}
__gshared glbfn_glPointParameterfvSGIS glPointParameterfvSGIS = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glPointParameterfvSGIS_loader(a0,a1,);
};
private auto glbfn_glPointParameterfvSGIS_loader (uint a0, const(float)* a1) nothrow @nogc {
  glPointParameterfvSGIS = cast(glbfn_glPointParameterfvSGIS)glbindGetProcAddress(`glPointParameterfvSGIS`);
  if (glPointParameterfvSGIS is null) assert(0, `OpenGL function 'glPointParameterfvSGIS' not found!`);
  glPointParameterfvSGIS(a0,a1,);
}
__gshared glbfn_glSharpenTexFuncSGIS glSharpenTexFuncSGIS = function void (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glbfn_glSharpenTexFuncSGIS_loader(a0,a1,a2,);
};
private auto glbfn_glSharpenTexFuncSGIS_loader (uint a0, int a1, const(float)* a2) nothrow @nogc {
  glSharpenTexFuncSGIS = cast(glbfn_glSharpenTexFuncSGIS)glbindGetProcAddress(`glSharpenTexFuncSGIS`);
  if (glSharpenTexFuncSGIS is null) assert(0, `OpenGL function 'glSharpenTexFuncSGIS' not found!`);
  glSharpenTexFuncSGIS(a0,a1,a2,);
}
__gshared glbfn_glGetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS = function void (uint a0, float* a1) nothrow @nogc {
  glbfn_glGetSharpenTexFuncSGIS_loader(a0,a1,);
};
private auto glbfn_glGetSharpenTexFuncSGIS_loader (uint a0, float* a1) nothrow @nogc {
  glGetSharpenTexFuncSGIS = cast(glbfn_glGetSharpenTexFuncSGIS)glbindGetProcAddress(`glGetSharpenTexFuncSGIS`);
  if (glGetSharpenTexFuncSGIS is null) assert(0, `OpenGL function 'glGetSharpenTexFuncSGIS' not found!`);
  glGetSharpenTexFuncSGIS(a0,a1,);
}
__gshared glbfn_glTexImage4DSGIS glTexImage4DSGIS = function void (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glbfn_glTexImage4DSGIS_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glTexImage4DSGIS_loader (uint a0, int a1, uint a2, int a3, int a4, int a5, int a6, int a7, uint a8, uint a9, const(void)* a10) nothrow @nogc {
  glTexImage4DSGIS = cast(glbfn_glTexImage4DSGIS)glbindGetProcAddress(`glTexImage4DSGIS`);
  if (glTexImage4DSGIS is null) assert(0, `OpenGL function 'glTexImage4DSGIS' not found!`);
  glTexImage4DSGIS(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glTexSubImage4DSGIS glTexSubImage4DSGIS = function void (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint a10, uint a11, const(void)* a12) nothrow @nogc {
  glbfn_glTexSubImage4DSGIS_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
private auto glbfn_glTexSubImage4DSGIS_loader (uint a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint a10, uint a11, const(void)* a12) nothrow @nogc {
  glTexSubImage4DSGIS = cast(glbfn_glTexSubImage4DSGIS)glbindGetProcAddress(`glTexSubImage4DSGIS`);
  if (glTexSubImage4DSGIS is null) assert(0, `OpenGL function 'glTexSubImage4DSGIS' not found!`);
  glTexSubImage4DSGIS(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
}
__gshared glbfn_glTextureColorMaskSGIS glTextureColorMaskSGIS = function void (ubyte a0, ubyte a1, ubyte a2, ubyte a3) nothrow @nogc {
  glbfn_glTextureColorMaskSGIS_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTextureColorMaskSGIS_loader (ubyte a0, ubyte a1, ubyte a2, ubyte a3) nothrow @nogc {
  glTextureColorMaskSGIS = cast(glbfn_glTextureColorMaskSGIS)glbindGetProcAddress(`glTextureColorMaskSGIS`);
  if (glTextureColorMaskSGIS is null) assert(0, `OpenGL function 'glTextureColorMaskSGIS' not found!`);
  glTextureColorMaskSGIS(a0,a1,a2,a3,);
}
__gshared glbfn_glGetTexFilterFuncSGIS glGetTexFilterFuncSGIS = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetTexFilterFuncSGIS_loader(a0,a1,a2,);
};
private auto glbfn_glGetTexFilterFuncSGIS_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetTexFilterFuncSGIS = cast(glbfn_glGetTexFilterFuncSGIS)glbindGetProcAddress(`glGetTexFilterFuncSGIS`);
  if (glGetTexFilterFuncSGIS is null) assert(0, `OpenGL function 'glGetTexFilterFuncSGIS' not found!`);
  glGetTexFilterFuncSGIS(a0,a1,a2,);
}
__gshared glbfn_glTexFilterFuncSGIS glTexFilterFuncSGIS = function void (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glbfn_glTexFilterFuncSGIS_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexFilterFuncSGIS_loader (uint a0, uint a1, int a2, const(float)* a3) nothrow @nogc {
  glTexFilterFuncSGIS = cast(glbfn_glTexFilterFuncSGIS)glbindGetProcAddress(`glTexFilterFuncSGIS`);
  if (glTexFilterFuncSGIS is null) assert(0, `OpenGL function 'glTexFilterFuncSGIS' not found!`);
  glTexFilterFuncSGIS(a0,a1,a2,a3,);
}
__gshared glbfn_glAsyncMarkerSGIX glAsyncMarkerSGIX = function void (uint a0) nothrow @nogc {
  glbfn_glAsyncMarkerSGIX_loader(a0,);
};
private auto glbfn_glAsyncMarkerSGIX_loader (uint a0) nothrow @nogc {
  glAsyncMarkerSGIX = cast(glbfn_glAsyncMarkerSGIX)glbindGetProcAddress(`glAsyncMarkerSGIX`);
  if (glAsyncMarkerSGIX is null) assert(0, `OpenGL function 'glAsyncMarkerSGIX' not found!`);
  glAsyncMarkerSGIX(a0,);
}
__gshared glbfn_glFinishAsyncSGIX glFinishAsyncSGIX = function int (uint* a0) nothrow @nogc {
  return glbfn_glFinishAsyncSGIX_loader(a0,);
};
private auto glbfn_glFinishAsyncSGIX_loader (uint* a0) nothrow @nogc {
  glFinishAsyncSGIX = cast(glbfn_glFinishAsyncSGIX)glbindGetProcAddress(`glFinishAsyncSGIX`);
  if (glFinishAsyncSGIX is null) assert(0, `OpenGL function 'glFinishAsyncSGIX' not found!`);
  return glFinishAsyncSGIX(a0,);
}
__gshared glbfn_glPollAsyncSGIX glPollAsyncSGIX = function int (uint* a0) nothrow @nogc {
  return glbfn_glPollAsyncSGIX_loader(a0,);
};
private auto glbfn_glPollAsyncSGIX_loader (uint* a0) nothrow @nogc {
  glPollAsyncSGIX = cast(glbfn_glPollAsyncSGIX)glbindGetProcAddress(`glPollAsyncSGIX`);
  if (glPollAsyncSGIX is null) assert(0, `OpenGL function 'glPollAsyncSGIX' not found!`);
  return glPollAsyncSGIX(a0,);
}
__gshared glbfn_glGenAsyncMarkersSGIX glGenAsyncMarkersSGIX = function uint (int a0) nothrow @nogc {
  return glbfn_glGenAsyncMarkersSGIX_loader(a0,);
};
private auto glbfn_glGenAsyncMarkersSGIX_loader (int a0) nothrow @nogc {
  glGenAsyncMarkersSGIX = cast(glbfn_glGenAsyncMarkersSGIX)glbindGetProcAddress(`glGenAsyncMarkersSGIX`);
  if (glGenAsyncMarkersSGIX is null) assert(0, `OpenGL function 'glGenAsyncMarkersSGIX' not found!`);
  return glGenAsyncMarkersSGIX(a0,);
}
__gshared glbfn_glDeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glDeleteAsyncMarkersSGIX_loader(a0,a1,);
};
private auto glbfn_glDeleteAsyncMarkersSGIX_loader (uint a0, int a1) nothrow @nogc {
  glDeleteAsyncMarkersSGIX = cast(glbfn_glDeleteAsyncMarkersSGIX)glbindGetProcAddress(`glDeleteAsyncMarkersSGIX`);
  if (glDeleteAsyncMarkersSGIX is null) assert(0, `OpenGL function 'glDeleteAsyncMarkersSGIX' not found!`);
  glDeleteAsyncMarkersSGIX(a0,a1,);
}
__gshared glbfn_glIsAsyncMarkerSGIX glIsAsyncMarkerSGIX = function ubyte (uint a0) nothrow @nogc {
  return glbfn_glIsAsyncMarkerSGIX_loader(a0,);
};
private auto glbfn_glIsAsyncMarkerSGIX_loader (uint a0) nothrow @nogc {
  glIsAsyncMarkerSGIX = cast(glbfn_glIsAsyncMarkerSGIX)glbindGetProcAddress(`glIsAsyncMarkerSGIX`);
  if (glIsAsyncMarkerSGIX is null) assert(0, `OpenGL function 'glIsAsyncMarkerSGIX' not found!`);
  return glIsAsyncMarkerSGIX(a0,);
}
__gshared glbfn_glFlushRasterSGIX glFlushRasterSGIX = function void () nothrow @nogc {
  glbfn_glFlushRasterSGIX_loader();
};
private auto glbfn_glFlushRasterSGIX_loader () nothrow @nogc {
  glFlushRasterSGIX = cast(glbfn_glFlushRasterSGIX)glbindGetProcAddress(`glFlushRasterSGIX`);
  if (glFlushRasterSGIX is null) assert(0, `OpenGL function 'glFlushRasterSGIX' not found!`);
  glFlushRasterSGIX();
}
__gshared glbfn_glFragmentColorMaterialSGIX glFragmentColorMaterialSGIX = function void (uint a0, uint a1) nothrow @nogc {
  glbfn_glFragmentColorMaterialSGIX_loader(a0,a1,);
};
private auto glbfn_glFragmentColorMaterialSGIX_loader (uint a0, uint a1) nothrow @nogc {
  glFragmentColorMaterialSGIX = cast(glbfn_glFragmentColorMaterialSGIX)glbindGetProcAddress(`glFragmentColorMaterialSGIX`);
  if (glFragmentColorMaterialSGIX is null) assert(0, `OpenGL function 'glFragmentColorMaterialSGIX' not found!`);
  glFragmentColorMaterialSGIX(a0,a1,);
}
__gshared glbfn_glFragmentLightfSGIX glFragmentLightfSGIX = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glFragmentLightfSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentLightfSGIX_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glFragmentLightfSGIX = cast(glbfn_glFragmentLightfSGIX)glbindGetProcAddress(`glFragmentLightfSGIX`);
  if (glFragmentLightfSGIX is null) assert(0, `OpenGL function 'glFragmentLightfSGIX' not found!`);
  glFragmentLightfSGIX(a0,a1,a2,);
}
__gshared glbfn_glFragmentLightfvSGIX glFragmentLightfvSGIX = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glFragmentLightfvSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentLightfvSGIX_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glFragmentLightfvSGIX = cast(glbfn_glFragmentLightfvSGIX)glbindGetProcAddress(`glFragmentLightfvSGIX`);
  if (glFragmentLightfvSGIX is null) assert(0, `OpenGL function 'glFragmentLightfvSGIX' not found!`);
  glFragmentLightfvSGIX(a0,a1,a2,);
}
__gshared glbfn_glFragmentLightiSGIX glFragmentLightiSGIX = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glFragmentLightiSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentLightiSGIX_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glFragmentLightiSGIX = cast(glbfn_glFragmentLightiSGIX)glbindGetProcAddress(`glFragmentLightiSGIX`);
  if (glFragmentLightiSGIX is null) assert(0, `OpenGL function 'glFragmentLightiSGIX' not found!`);
  glFragmentLightiSGIX(a0,a1,a2,);
}
__gshared glbfn_glFragmentLightivSGIX glFragmentLightivSGIX = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glFragmentLightivSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentLightivSGIX_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glFragmentLightivSGIX = cast(glbfn_glFragmentLightivSGIX)glbindGetProcAddress(`glFragmentLightivSGIX`);
  if (glFragmentLightivSGIX is null) assert(0, `OpenGL function 'glFragmentLightivSGIX' not found!`);
  glFragmentLightivSGIX(a0,a1,a2,);
}
__gshared glbfn_glFragmentLightModelfSGIX glFragmentLightModelfSGIX = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glFragmentLightModelfSGIX_loader(a0,a1,);
};
private auto glbfn_glFragmentLightModelfSGIX_loader (uint a0, float a1) nothrow @nogc {
  glFragmentLightModelfSGIX = cast(glbfn_glFragmentLightModelfSGIX)glbindGetProcAddress(`glFragmentLightModelfSGIX`);
  if (glFragmentLightModelfSGIX is null) assert(0, `OpenGL function 'glFragmentLightModelfSGIX' not found!`);
  glFragmentLightModelfSGIX(a0,a1,);
}
__gshared glbfn_glFragmentLightModelfvSGIX glFragmentLightModelfvSGIX = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glFragmentLightModelfvSGIX_loader(a0,a1,);
};
private auto glbfn_glFragmentLightModelfvSGIX_loader (uint a0, const(float)* a1) nothrow @nogc {
  glFragmentLightModelfvSGIX = cast(glbfn_glFragmentLightModelfvSGIX)glbindGetProcAddress(`glFragmentLightModelfvSGIX`);
  if (glFragmentLightModelfvSGIX is null) assert(0, `OpenGL function 'glFragmentLightModelfvSGIX' not found!`);
  glFragmentLightModelfvSGIX(a0,a1,);
}
__gshared glbfn_glFragmentLightModeliSGIX glFragmentLightModeliSGIX = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glFragmentLightModeliSGIX_loader(a0,a1,);
};
private auto glbfn_glFragmentLightModeliSGIX_loader (uint a0, int a1) nothrow @nogc {
  glFragmentLightModeliSGIX = cast(glbfn_glFragmentLightModeliSGIX)glbindGetProcAddress(`glFragmentLightModeliSGIX`);
  if (glFragmentLightModeliSGIX is null) assert(0, `OpenGL function 'glFragmentLightModeliSGIX' not found!`);
  glFragmentLightModeliSGIX(a0,a1,);
}
__gshared glbfn_glFragmentLightModelivSGIX glFragmentLightModelivSGIX = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glFragmentLightModelivSGIX_loader(a0,a1,);
};
private auto glbfn_glFragmentLightModelivSGIX_loader (uint a0, const(int)* a1) nothrow @nogc {
  glFragmentLightModelivSGIX = cast(glbfn_glFragmentLightModelivSGIX)glbindGetProcAddress(`glFragmentLightModelivSGIX`);
  if (glFragmentLightModelivSGIX is null) assert(0, `OpenGL function 'glFragmentLightModelivSGIX' not found!`);
  glFragmentLightModelivSGIX(a0,a1,);
}
__gshared glbfn_glFragmentMaterialfSGIX glFragmentMaterialfSGIX = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glFragmentMaterialfSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentMaterialfSGIX_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glFragmentMaterialfSGIX = cast(glbfn_glFragmentMaterialfSGIX)glbindGetProcAddress(`glFragmentMaterialfSGIX`);
  if (glFragmentMaterialfSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialfSGIX' not found!`);
  glFragmentMaterialfSGIX(a0,a1,a2,);
}
__gshared glbfn_glFragmentMaterialfvSGIX glFragmentMaterialfvSGIX = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glFragmentMaterialfvSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentMaterialfvSGIX_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glFragmentMaterialfvSGIX = cast(glbfn_glFragmentMaterialfvSGIX)glbindGetProcAddress(`glFragmentMaterialfvSGIX`);
  if (glFragmentMaterialfvSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialfvSGIX' not found!`);
  glFragmentMaterialfvSGIX(a0,a1,a2,);
}
__gshared glbfn_glFragmentMaterialiSGIX glFragmentMaterialiSGIX = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glFragmentMaterialiSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentMaterialiSGIX_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glFragmentMaterialiSGIX = cast(glbfn_glFragmentMaterialiSGIX)glbindGetProcAddress(`glFragmentMaterialiSGIX`);
  if (glFragmentMaterialiSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialiSGIX' not found!`);
  glFragmentMaterialiSGIX(a0,a1,a2,);
}
__gshared glbfn_glFragmentMaterialivSGIX glFragmentMaterialivSGIX = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glFragmentMaterialivSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glFragmentMaterialivSGIX_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glFragmentMaterialivSGIX = cast(glbfn_glFragmentMaterialivSGIX)glbindGetProcAddress(`glFragmentMaterialivSGIX`);
  if (glFragmentMaterialivSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialivSGIX' not found!`);
  glFragmentMaterialivSGIX(a0,a1,a2,);
}
__gshared glbfn_glGetFragmentLightfvSGIX glGetFragmentLightfvSGIX = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetFragmentLightfvSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glGetFragmentLightfvSGIX_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetFragmentLightfvSGIX = cast(glbfn_glGetFragmentLightfvSGIX)glbindGetProcAddress(`glGetFragmentLightfvSGIX`);
  if (glGetFragmentLightfvSGIX is null) assert(0, `OpenGL function 'glGetFragmentLightfvSGIX' not found!`);
  glGetFragmentLightfvSGIX(a0,a1,a2,);
}
__gshared glbfn_glGetFragmentLightivSGIX glGetFragmentLightivSGIX = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetFragmentLightivSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glGetFragmentLightivSGIX_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetFragmentLightivSGIX = cast(glbfn_glGetFragmentLightivSGIX)glbindGetProcAddress(`glGetFragmentLightivSGIX`);
  if (glGetFragmentLightivSGIX is null) assert(0, `OpenGL function 'glGetFragmentLightivSGIX' not found!`);
  glGetFragmentLightivSGIX(a0,a1,a2,);
}
__gshared glbfn_glGetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetFragmentMaterialfvSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glGetFragmentMaterialfvSGIX_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetFragmentMaterialfvSGIX = cast(glbfn_glGetFragmentMaterialfvSGIX)glbindGetProcAddress(`glGetFragmentMaterialfvSGIX`);
  if (glGetFragmentMaterialfvSGIX is null) assert(0, `OpenGL function 'glGetFragmentMaterialfvSGIX' not found!`);
  glGetFragmentMaterialfvSGIX(a0,a1,a2,);
}
__gshared glbfn_glGetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetFragmentMaterialivSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glGetFragmentMaterialivSGIX_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetFragmentMaterialivSGIX = cast(glbfn_glGetFragmentMaterialivSGIX)glbindGetProcAddress(`glGetFragmentMaterialivSGIX`);
  if (glGetFragmentMaterialivSGIX is null) assert(0, `OpenGL function 'glGetFragmentMaterialivSGIX' not found!`);
  glGetFragmentMaterialivSGIX(a0,a1,a2,);
}
__gshared glbfn_glLightEnviSGIX glLightEnviSGIX = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glLightEnviSGIX_loader(a0,a1,);
};
private auto glbfn_glLightEnviSGIX_loader (uint a0, int a1) nothrow @nogc {
  glLightEnviSGIX = cast(glbfn_glLightEnviSGIX)glbindGetProcAddress(`glLightEnviSGIX`);
  if (glLightEnviSGIX is null) assert(0, `OpenGL function 'glLightEnviSGIX' not found!`);
  glLightEnviSGIX(a0,a1,);
}
__gshared glbfn_glFrameZoomSGIX glFrameZoomSGIX = function void (int a0) nothrow @nogc {
  glbfn_glFrameZoomSGIX_loader(a0,);
};
private auto glbfn_glFrameZoomSGIX_loader (int a0) nothrow @nogc {
  glFrameZoomSGIX = cast(glbfn_glFrameZoomSGIX)glbindGetProcAddress(`glFrameZoomSGIX`);
  if (glFrameZoomSGIX is null) assert(0, `OpenGL function 'glFrameZoomSGIX' not found!`);
  glFrameZoomSGIX(a0,);
}
__gshared glbfn_glIglooInterfaceSGIX glIglooInterfaceSGIX = function void (uint a0, const(void)* a1) nothrow @nogc {
  glbfn_glIglooInterfaceSGIX_loader(a0,a1,);
};
private auto glbfn_glIglooInterfaceSGIX_loader (uint a0, const(void)* a1) nothrow @nogc {
  glIglooInterfaceSGIX = cast(glbfn_glIglooInterfaceSGIX)glbindGetProcAddress(`glIglooInterfaceSGIX`);
  if (glIglooInterfaceSGIX is null) assert(0, `OpenGL function 'glIglooInterfaceSGIX' not found!`);
  glIglooInterfaceSGIX(a0,a1,);
}
__gshared glbfn_glGetInstrumentsSGIX glGetInstrumentsSGIX = function int () nothrow @nogc {
  return glbfn_glGetInstrumentsSGIX_loader();
};
private auto glbfn_glGetInstrumentsSGIX_loader () nothrow @nogc {
  glGetInstrumentsSGIX = cast(glbfn_glGetInstrumentsSGIX)glbindGetProcAddress(`glGetInstrumentsSGIX`);
  if (glGetInstrumentsSGIX is null) assert(0, `OpenGL function 'glGetInstrumentsSGIX' not found!`);
  return glGetInstrumentsSGIX();
}
__gshared glbfn_glInstrumentsBufferSGIX glInstrumentsBufferSGIX = function void (int a0, int* a1) nothrow @nogc {
  glbfn_glInstrumentsBufferSGIX_loader(a0,a1,);
};
private auto glbfn_glInstrumentsBufferSGIX_loader (int a0, int* a1) nothrow @nogc {
  glInstrumentsBufferSGIX = cast(glbfn_glInstrumentsBufferSGIX)glbindGetProcAddress(`glInstrumentsBufferSGIX`);
  if (glInstrumentsBufferSGIX is null) assert(0, `OpenGL function 'glInstrumentsBufferSGIX' not found!`);
  glInstrumentsBufferSGIX(a0,a1,);
}
__gshared glbfn_glPollInstrumentsSGIX glPollInstrumentsSGIX = function int (int* a0) nothrow @nogc {
  return glbfn_glPollInstrumentsSGIX_loader(a0,);
};
private auto glbfn_glPollInstrumentsSGIX_loader (int* a0) nothrow @nogc {
  glPollInstrumentsSGIX = cast(glbfn_glPollInstrumentsSGIX)glbindGetProcAddress(`glPollInstrumentsSGIX`);
  if (glPollInstrumentsSGIX is null) assert(0, `OpenGL function 'glPollInstrumentsSGIX' not found!`);
  return glPollInstrumentsSGIX(a0,);
}
__gshared glbfn_glReadInstrumentsSGIX glReadInstrumentsSGIX = function void (int a0) nothrow @nogc {
  glbfn_glReadInstrumentsSGIX_loader(a0,);
};
private auto glbfn_glReadInstrumentsSGIX_loader (int a0) nothrow @nogc {
  glReadInstrumentsSGIX = cast(glbfn_glReadInstrumentsSGIX)glbindGetProcAddress(`glReadInstrumentsSGIX`);
  if (glReadInstrumentsSGIX is null) assert(0, `OpenGL function 'glReadInstrumentsSGIX' not found!`);
  glReadInstrumentsSGIX(a0,);
}
__gshared glbfn_glStartInstrumentsSGIX glStartInstrumentsSGIX = function void () nothrow @nogc {
  glbfn_glStartInstrumentsSGIX_loader();
};
private auto glbfn_glStartInstrumentsSGIX_loader () nothrow @nogc {
  glStartInstrumentsSGIX = cast(glbfn_glStartInstrumentsSGIX)glbindGetProcAddress(`glStartInstrumentsSGIX`);
  if (glStartInstrumentsSGIX is null) assert(0, `OpenGL function 'glStartInstrumentsSGIX' not found!`);
  glStartInstrumentsSGIX();
}
__gshared glbfn_glStopInstrumentsSGIX glStopInstrumentsSGIX = function void (int a0) nothrow @nogc {
  glbfn_glStopInstrumentsSGIX_loader(a0,);
};
private auto glbfn_glStopInstrumentsSGIX_loader (int a0) nothrow @nogc {
  glStopInstrumentsSGIX = cast(glbfn_glStopInstrumentsSGIX)glbindGetProcAddress(`glStopInstrumentsSGIX`);
  if (glStopInstrumentsSGIX is null) assert(0, `OpenGL function 'glStopInstrumentsSGIX' not found!`);
  glStopInstrumentsSGIX(a0,);
}
__gshared glbfn_glGetListParameterfvSGIX glGetListParameterfvSGIX = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetListParameterfvSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glGetListParameterfvSGIX_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetListParameterfvSGIX = cast(glbfn_glGetListParameterfvSGIX)glbindGetProcAddress(`glGetListParameterfvSGIX`);
  if (glGetListParameterfvSGIX is null) assert(0, `OpenGL function 'glGetListParameterfvSGIX' not found!`);
  glGetListParameterfvSGIX(a0,a1,a2,);
}
__gshared glbfn_glGetListParameterivSGIX glGetListParameterivSGIX = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetListParameterivSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glGetListParameterivSGIX_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetListParameterivSGIX = cast(glbfn_glGetListParameterivSGIX)glbindGetProcAddress(`glGetListParameterivSGIX`);
  if (glGetListParameterivSGIX is null) assert(0, `OpenGL function 'glGetListParameterivSGIX' not found!`);
  glGetListParameterivSGIX(a0,a1,a2,);
}
__gshared glbfn_glListParameterfSGIX glListParameterfSGIX = function void (uint a0, uint a1, float a2) nothrow @nogc {
  glbfn_glListParameterfSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glListParameterfSGIX_loader (uint a0, uint a1, float a2) nothrow @nogc {
  glListParameterfSGIX = cast(glbfn_glListParameterfSGIX)glbindGetProcAddress(`glListParameterfSGIX`);
  if (glListParameterfSGIX is null) assert(0, `OpenGL function 'glListParameterfSGIX' not found!`);
  glListParameterfSGIX(a0,a1,a2,);
}
__gshared glbfn_glListParameterfvSGIX glListParameterfvSGIX = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glListParameterfvSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glListParameterfvSGIX_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glListParameterfvSGIX = cast(glbfn_glListParameterfvSGIX)glbindGetProcAddress(`glListParameterfvSGIX`);
  if (glListParameterfvSGIX is null) assert(0, `OpenGL function 'glListParameterfvSGIX' not found!`);
  glListParameterfvSGIX(a0,a1,a2,);
}
__gshared glbfn_glListParameteriSGIX glListParameteriSGIX = function void (uint a0, uint a1, int a2) nothrow @nogc {
  glbfn_glListParameteriSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glListParameteriSGIX_loader (uint a0, uint a1, int a2) nothrow @nogc {
  glListParameteriSGIX = cast(glbfn_glListParameteriSGIX)glbindGetProcAddress(`glListParameteriSGIX`);
  if (glListParameteriSGIX is null) assert(0, `OpenGL function 'glListParameteriSGIX' not found!`);
  glListParameteriSGIX(a0,a1,a2,);
}
__gshared glbfn_glListParameterivSGIX glListParameterivSGIX = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glListParameterivSGIX_loader(a0,a1,a2,);
};
private auto glbfn_glListParameterivSGIX_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glListParameterivSGIX = cast(glbfn_glListParameterivSGIX)glbindGetProcAddress(`glListParameterivSGIX`);
  if (glListParameterivSGIX is null) assert(0, `OpenGL function 'glListParameterivSGIX' not found!`);
  glListParameterivSGIX(a0,a1,a2,);
}
__gshared glbfn_glPixelTexGenSGIX glPixelTexGenSGIX = function void (uint a0) nothrow @nogc {
  glbfn_glPixelTexGenSGIX_loader(a0,);
};
private auto glbfn_glPixelTexGenSGIX_loader (uint a0) nothrow @nogc {
  glPixelTexGenSGIX = cast(glbfn_glPixelTexGenSGIX)glbindGetProcAddress(`glPixelTexGenSGIX`);
  if (glPixelTexGenSGIX is null) assert(0, `OpenGL function 'glPixelTexGenSGIX' not found!`);
  glPixelTexGenSGIX(a0,);
}
__gshared glbfn_glDeformationMap3dSGIX glDeformationMap3dSGIX = function void (uint a0, double a1, double a2, int a3, int a4, double a5, double a6, int a7, int a8, double a9, double a10, int a11, int a12, const(double)* a13) nothrow @nogc {
  glbfn_glDeformationMap3dSGIX_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,);
};
private auto glbfn_glDeformationMap3dSGIX_loader (uint a0, double a1, double a2, int a3, int a4, double a5, double a6, int a7, int a8, double a9, double a10, int a11, int a12, const(double)* a13) nothrow @nogc {
  glDeformationMap3dSGIX = cast(glbfn_glDeformationMap3dSGIX)glbindGetProcAddress(`glDeformationMap3dSGIX`);
  if (glDeformationMap3dSGIX is null) assert(0, `OpenGL function 'glDeformationMap3dSGIX' not found!`);
  glDeformationMap3dSGIX(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,);
}
__gshared glbfn_glDeformationMap3fSGIX glDeformationMap3fSGIX = function void (uint a0, float a1, float a2, int a3, int a4, float a5, float a6, int a7, int a8, float a9, float a10, int a11, int a12, const(float)* a13) nothrow @nogc {
  glbfn_glDeformationMap3fSGIX_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,);
};
private auto glbfn_glDeformationMap3fSGIX_loader (uint a0, float a1, float a2, int a3, int a4, float a5, float a6, int a7, int a8, float a9, float a10, int a11, int a12, const(float)* a13) nothrow @nogc {
  glDeformationMap3fSGIX = cast(glbfn_glDeformationMap3fSGIX)glbindGetProcAddress(`glDeformationMap3fSGIX`);
  if (glDeformationMap3fSGIX is null) assert(0, `OpenGL function 'glDeformationMap3fSGIX' not found!`);
  glDeformationMap3fSGIX(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,);
}
__gshared glbfn_glDeformSGIX glDeformSGIX = function void (uint a0) nothrow @nogc {
  glbfn_glDeformSGIX_loader(a0,);
};
private auto glbfn_glDeformSGIX_loader (uint a0) nothrow @nogc {
  glDeformSGIX = cast(glbfn_glDeformSGIX)glbindGetProcAddress(`glDeformSGIX`);
  if (glDeformSGIX is null) assert(0, `OpenGL function 'glDeformSGIX' not found!`);
  glDeformSGIX(a0,);
}
__gshared glbfn_glLoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX = function void (uint a0) nothrow @nogc {
  glbfn_glLoadIdentityDeformationMapSGIX_loader(a0,);
};
private auto glbfn_glLoadIdentityDeformationMapSGIX_loader (uint a0) nothrow @nogc {
  glLoadIdentityDeformationMapSGIX = cast(glbfn_glLoadIdentityDeformationMapSGIX)glbindGetProcAddress(`glLoadIdentityDeformationMapSGIX`);
  if (glLoadIdentityDeformationMapSGIX is null) assert(0, `OpenGL function 'glLoadIdentityDeformationMapSGIX' not found!`);
  glLoadIdentityDeformationMapSGIX(a0,);
}
__gshared glbfn_glReferencePlaneSGIX glReferencePlaneSGIX = function void (const(double)* a0) nothrow @nogc {
  glbfn_glReferencePlaneSGIX_loader(a0,);
};
private auto glbfn_glReferencePlaneSGIX_loader (const(double)* a0) nothrow @nogc {
  glReferencePlaneSGIX = cast(glbfn_glReferencePlaneSGIX)glbindGetProcAddress(`glReferencePlaneSGIX`);
  if (glReferencePlaneSGIX is null) assert(0, `OpenGL function 'glReferencePlaneSGIX' not found!`);
  glReferencePlaneSGIX(a0,);
}
__gshared glbfn_glSpriteParameterfSGIX glSpriteParameterfSGIX = function void (uint a0, float a1) nothrow @nogc {
  glbfn_glSpriteParameterfSGIX_loader(a0,a1,);
};
private auto glbfn_glSpriteParameterfSGIX_loader (uint a0, float a1) nothrow @nogc {
  glSpriteParameterfSGIX = cast(glbfn_glSpriteParameterfSGIX)glbindGetProcAddress(`glSpriteParameterfSGIX`);
  if (glSpriteParameterfSGIX is null) assert(0, `OpenGL function 'glSpriteParameterfSGIX' not found!`);
  glSpriteParameterfSGIX(a0,a1,);
}
__gshared glbfn_glSpriteParameterfvSGIX glSpriteParameterfvSGIX = function void (uint a0, const(float)* a1) nothrow @nogc {
  glbfn_glSpriteParameterfvSGIX_loader(a0,a1,);
};
private auto glbfn_glSpriteParameterfvSGIX_loader (uint a0, const(float)* a1) nothrow @nogc {
  glSpriteParameterfvSGIX = cast(glbfn_glSpriteParameterfvSGIX)glbindGetProcAddress(`glSpriteParameterfvSGIX`);
  if (glSpriteParameterfvSGIX is null) assert(0, `OpenGL function 'glSpriteParameterfvSGIX' not found!`);
  glSpriteParameterfvSGIX(a0,a1,);
}
__gshared glbfn_glSpriteParameteriSGIX glSpriteParameteriSGIX = function void (uint a0, int a1) nothrow @nogc {
  glbfn_glSpriteParameteriSGIX_loader(a0,a1,);
};
private auto glbfn_glSpriteParameteriSGIX_loader (uint a0, int a1) nothrow @nogc {
  glSpriteParameteriSGIX = cast(glbfn_glSpriteParameteriSGIX)glbindGetProcAddress(`glSpriteParameteriSGIX`);
  if (glSpriteParameteriSGIX is null) assert(0, `OpenGL function 'glSpriteParameteriSGIX' not found!`);
  glSpriteParameteriSGIX(a0,a1,);
}
__gshared glbfn_glSpriteParameterivSGIX glSpriteParameterivSGIX = function void (uint a0, const(int)* a1) nothrow @nogc {
  glbfn_glSpriteParameterivSGIX_loader(a0,a1,);
};
private auto glbfn_glSpriteParameterivSGIX_loader (uint a0, const(int)* a1) nothrow @nogc {
  glSpriteParameterivSGIX = cast(glbfn_glSpriteParameterivSGIX)glbindGetProcAddress(`glSpriteParameterivSGIX`);
  if (glSpriteParameterivSGIX is null) assert(0, `OpenGL function 'glSpriteParameterivSGIX' not found!`);
  glSpriteParameterivSGIX(a0,a1,);
}
__gshared glbfn_glTagSampleBufferSGIX glTagSampleBufferSGIX = function void () nothrow @nogc {
  glbfn_glTagSampleBufferSGIX_loader();
};
private auto glbfn_glTagSampleBufferSGIX_loader () nothrow @nogc {
  glTagSampleBufferSGIX = cast(glbfn_glTagSampleBufferSGIX)glbindGetProcAddress(`glTagSampleBufferSGIX`);
  if (glTagSampleBufferSGIX is null) assert(0, `OpenGL function 'glTagSampleBufferSGIX' not found!`);
  glTagSampleBufferSGIX();
}
__gshared glbfn_glColorTableSGI glColorTableSGI = function void (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glbfn_glColorTableSGI_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glColorTableSGI_loader (uint a0, uint a1, int a2, uint a3, uint a4, const(void)* a5) nothrow @nogc {
  glColorTableSGI = cast(glbfn_glColorTableSGI)glbindGetProcAddress(`glColorTableSGI`);
  if (glColorTableSGI is null) assert(0, `OpenGL function 'glColorTableSGI' not found!`);
  glColorTableSGI(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glColorTableParameterfvSGI glColorTableParameterfvSGI = function void (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glbfn_glColorTableParameterfvSGI_loader(a0,a1,a2,);
};
private auto glbfn_glColorTableParameterfvSGI_loader (uint a0, uint a1, const(float)* a2) nothrow @nogc {
  glColorTableParameterfvSGI = cast(glbfn_glColorTableParameterfvSGI)glbindGetProcAddress(`glColorTableParameterfvSGI`);
  if (glColorTableParameterfvSGI is null) assert(0, `OpenGL function 'glColorTableParameterfvSGI' not found!`);
  glColorTableParameterfvSGI(a0,a1,a2,);
}
__gshared glbfn_glColorTableParameterivSGI glColorTableParameterivSGI = function void (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glbfn_glColorTableParameterivSGI_loader(a0,a1,a2,);
};
private auto glbfn_glColorTableParameterivSGI_loader (uint a0, uint a1, const(int)* a2) nothrow @nogc {
  glColorTableParameterivSGI = cast(glbfn_glColorTableParameterivSGI)glbindGetProcAddress(`glColorTableParameterivSGI`);
  if (glColorTableParameterivSGI is null) assert(0, `OpenGL function 'glColorTableParameterivSGI' not found!`);
  glColorTableParameterivSGI(a0,a1,a2,);
}
__gshared glbfn_glCopyColorTableSGI glCopyColorTableSGI = function void (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glbfn_glCopyColorTableSGI_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glCopyColorTableSGI_loader (uint a0, uint a1, int a2, int a3, int a4) nothrow @nogc {
  glCopyColorTableSGI = cast(glbfn_glCopyColorTableSGI)glbindGetProcAddress(`glCopyColorTableSGI`);
  if (glCopyColorTableSGI is null) assert(0, `OpenGL function 'glCopyColorTableSGI' not found!`);
  glCopyColorTableSGI(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glGetColorTableSGI glGetColorTableSGI = function void (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glbfn_glGetColorTableSGI_loader(a0,a1,a2,a3,);
};
private auto glbfn_glGetColorTableSGI_loader (uint a0, uint a1, uint a2, void* a3) nothrow @nogc {
  glGetColorTableSGI = cast(glbfn_glGetColorTableSGI)glbindGetProcAddress(`glGetColorTableSGI`);
  if (glGetColorTableSGI is null) assert(0, `OpenGL function 'glGetColorTableSGI' not found!`);
  glGetColorTableSGI(a0,a1,a2,a3,);
}
__gshared glbfn_glGetColorTableParameterfvSGI glGetColorTableParameterfvSGI = function void (uint a0, uint a1, float* a2) nothrow @nogc {
  glbfn_glGetColorTableParameterfvSGI_loader(a0,a1,a2,);
};
private auto glbfn_glGetColorTableParameterfvSGI_loader (uint a0, uint a1, float* a2) nothrow @nogc {
  glGetColorTableParameterfvSGI = cast(glbfn_glGetColorTableParameterfvSGI)glbindGetProcAddress(`glGetColorTableParameterfvSGI`);
  if (glGetColorTableParameterfvSGI is null) assert(0, `OpenGL function 'glGetColorTableParameterfvSGI' not found!`);
  glGetColorTableParameterfvSGI(a0,a1,a2,);
}
__gshared glbfn_glGetColorTableParameterivSGI glGetColorTableParameterivSGI = function void (uint a0, uint a1, int* a2) nothrow @nogc {
  glbfn_glGetColorTableParameterivSGI_loader(a0,a1,a2,);
};
private auto glbfn_glGetColorTableParameterivSGI_loader (uint a0, uint a1, int* a2) nothrow @nogc {
  glGetColorTableParameterivSGI = cast(glbfn_glGetColorTableParameterivSGI)glbindGetProcAddress(`glGetColorTableParameterivSGI`);
  if (glGetColorTableParameterivSGI is null) assert(0, `OpenGL function 'glGetColorTableParameterivSGI' not found!`);
  glGetColorTableParameterivSGI(a0,a1,a2,);
}
__gshared glbfn_glFinishTextureSUNX glFinishTextureSUNX = function void () nothrow @nogc {
  glbfn_glFinishTextureSUNX_loader();
};
private auto glbfn_glFinishTextureSUNX_loader () nothrow @nogc {
  glFinishTextureSUNX = cast(glbfn_glFinishTextureSUNX)glbindGetProcAddress(`glFinishTextureSUNX`);
  if (glFinishTextureSUNX is null) assert(0, `OpenGL function 'glFinishTextureSUNX' not found!`);
  glFinishTextureSUNX();
}
__gshared glbfn_glGlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN = function void (byte a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactorbSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactorbSUN_loader (byte a0) nothrow @nogc {
  glGlobalAlphaFactorbSUN = cast(glbfn_glGlobalAlphaFactorbSUN)glbindGetProcAddress(`glGlobalAlphaFactorbSUN`);
  if (glGlobalAlphaFactorbSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorbSUN' not found!`);
  glGlobalAlphaFactorbSUN(a0,);
}
__gshared glbfn_glGlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN = function void (short a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactorsSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactorsSUN_loader (short a0) nothrow @nogc {
  glGlobalAlphaFactorsSUN = cast(glbfn_glGlobalAlphaFactorsSUN)glbindGetProcAddress(`glGlobalAlphaFactorsSUN`);
  if (glGlobalAlphaFactorsSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorsSUN' not found!`);
  glGlobalAlphaFactorsSUN(a0,);
}
__gshared glbfn_glGlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN = function void (int a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactoriSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactoriSUN_loader (int a0) nothrow @nogc {
  glGlobalAlphaFactoriSUN = cast(glbfn_glGlobalAlphaFactoriSUN)glbindGetProcAddress(`glGlobalAlphaFactoriSUN`);
  if (glGlobalAlphaFactoriSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactoriSUN' not found!`);
  glGlobalAlphaFactoriSUN(a0,);
}
__gshared glbfn_glGlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN = function void (float a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactorfSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactorfSUN_loader (float a0) nothrow @nogc {
  glGlobalAlphaFactorfSUN = cast(glbfn_glGlobalAlphaFactorfSUN)glbindGetProcAddress(`glGlobalAlphaFactorfSUN`);
  if (glGlobalAlphaFactorfSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorfSUN' not found!`);
  glGlobalAlphaFactorfSUN(a0,);
}
__gshared glbfn_glGlobalAlphaFactordSUN glGlobalAlphaFactordSUN = function void (double a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactordSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactordSUN_loader (double a0) nothrow @nogc {
  glGlobalAlphaFactordSUN = cast(glbfn_glGlobalAlphaFactordSUN)glbindGetProcAddress(`glGlobalAlphaFactordSUN`);
  if (glGlobalAlphaFactordSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactordSUN' not found!`);
  glGlobalAlphaFactordSUN(a0,);
}
__gshared glbfn_glGlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN = function void (ubyte a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactorubSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactorubSUN_loader (ubyte a0) nothrow @nogc {
  glGlobalAlphaFactorubSUN = cast(glbfn_glGlobalAlphaFactorubSUN)glbindGetProcAddress(`glGlobalAlphaFactorubSUN`);
  if (glGlobalAlphaFactorubSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorubSUN' not found!`);
  glGlobalAlphaFactorubSUN(a0,);
}
__gshared glbfn_glGlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN = function void (ushort a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactorusSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactorusSUN_loader (ushort a0) nothrow @nogc {
  glGlobalAlphaFactorusSUN = cast(glbfn_glGlobalAlphaFactorusSUN)glbindGetProcAddress(`glGlobalAlphaFactorusSUN`);
  if (glGlobalAlphaFactorusSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorusSUN' not found!`);
  glGlobalAlphaFactorusSUN(a0,);
}
__gshared glbfn_glGlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN = function void (uint a0) nothrow @nogc {
  glbfn_glGlobalAlphaFactoruiSUN_loader(a0,);
};
private auto glbfn_glGlobalAlphaFactoruiSUN_loader (uint a0) nothrow @nogc {
  glGlobalAlphaFactoruiSUN = cast(glbfn_glGlobalAlphaFactoruiSUN)glbindGetProcAddress(`glGlobalAlphaFactoruiSUN`);
  if (glGlobalAlphaFactoruiSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactoruiSUN' not found!`);
  glGlobalAlphaFactoruiSUN(a0,);
}
__gshared glbfn_glDrawMeshArraysSUN glDrawMeshArraysSUN = function void (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glbfn_glDrawMeshArraysSUN_loader(a0,a1,a2,a3,);
};
private auto glbfn_glDrawMeshArraysSUN_loader (uint a0, int a1, int a2, int a3) nothrow @nogc {
  glDrawMeshArraysSUN = cast(glbfn_glDrawMeshArraysSUN)glbindGetProcAddress(`glDrawMeshArraysSUN`);
  if (glDrawMeshArraysSUN is null) assert(0, `OpenGL function 'glDrawMeshArraysSUN' not found!`);
  glDrawMeshArraysSUN(a0,a1,a2,a3,);
}
__gshared glbfn_glReplacementCodeuiSUN glReplacementCodeuiSUN = function void (uint a0) nothrow @nogc {
  glbfn_glReplacementCodeuiSUN_loader(a0,);
};
private auto glbfn_glReplacementCodeuiSUN_loader (uint a0) nothrow @nogc {
  glReplacementCodeuiSUN = cast(glbfn_glReplacementCodeuiSUN)glbindGetProcAddress(`glReplacementCodeuiSUN`);
  if (glReplacementCodeuiSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiSUN' not found!`);
  glReplacementCodeuiSUN(a0,);
}
__gshared glbfn_glReplacementCodeusSUN glReplacementCodeusSUN = function void (ushort a0) nothrow @nogc {
  glbfn_glReplacementCodeusSUN_loader(a0,);
};
private auto glbfn_glReplacementCodeusSUN_loader (ushort a0) nothrow @nogc {
  glReplacementCodeusSUN = cast(glbfn_glReplacementCodeusSUN)glbindGetProcAddress(`glReplacementCodeusSUN`);
  if (glReplacementCodeusSUN is null) assert(0, `OpenGL function 'glReplacementCodeusSUN' not found!`);
  glReplacementCodeusSUN(a0,);
}
__gshared glbfn_glReplacementCodeubSUN glReplacementCodeubSUN = function void (ubyte a0) nothrow @nogc {
  glbfn_glReplacementCodeubSUN_loader(a0,);
};
private auto glbfn_glReplacementCodeubSUN_loader (ubyte a0) nothrow @nogc {
  glReplacementCodeubSUN = cast(glbfn_glReplacementCodeubSUN)glbindGetProcAddress(`glReplacementCodeubSUN`);
  if (glReplacementCodeubSUN is null) assert(0, `OpenGL function 'glReplacementCodeubSUN' not found!`);
  glReplacementCodeubSUN(a0,);
}
__gshared glbfn_glReplacementCodeuivSUN glReplacementCodeuivSUN = function void (const(uint)* a0) nothrow @nogc {
  glbfn_glReplacementCodeuivSUN_loader(a0,);
};
private auto glbfn_glReplacementCodeuivSUN_loader (const(uint)* a0) nothrow @nogc {
  glReplacementCodeuivSUN = cast(glbfn_glReplacementCodeuivSUN)glbindGetProcAddress(`glReplacementCodeuivSUN`);
  if (glReplacementCodeuivSUN is null) assert(0, `OpenGL function 'glReplacementCodeuivSUN' not found!`);
  glReplacementCodeuivSUN(a0,);
}
__gshared glbfn_glReplacementCodeusvSUN glReplacementCodeusvSUN = function void (const(ushort)* a0) nothrow @nogc {
  glbfn_glReplacementCodeusvSUN_loader(a0,);
};
private auto glbfn_glReplacementCodeusvSUN_loader (const(ushort)* a0) nothrow @nogc {
  glReplacementCodeusvSUN = cast(glbfn_glReplacementCodeusvSUN)glbindGetProcAddress(`glReplacementCodeusvSUN`);
  if (glReplacementCodeusvSUN is null) assert(0, `OpenGL function 'glReplacementCodeusvSUN' not found!`);
  glReplacementCodeusvSUN(a0,);
}
__gshared glbfn_glReplacementCodeubvSUN glReplacementCodeubvSUN = function void (const(ubyte)* a0) nothrow @nogc {
  glbfn_glReplacementCodeubvSUN_loader(a0,);
};
private auto glbfn_glReplacementCodeubvSUN_loader (const(ubyte)* a0) nothrow @nogc {
  glReplacementCodeubvSUN = cast(glbfn_glReplacementCodeubvSUN)glbindGetProcAddress(`glReplacementCodeubvSUN`);
  if (glReplacementCodeubvSUN is null) assert(0, `OpenGL function 'glReplacementCodeubvSUN' not found!`);
  glReplacementCodeubvSUN(a0,);
}
__gshared glbfn_glReplacementCodePointerSUN glReplacementCodePointerSUN = function void (uint a0, int a1, const(void*)* a2) nothrow @nogc {
  glbfn_glReplacementCodePointerSUN_loader(a0,a1,a2,);
};
private auto glbfn_glReplacementCodePointerSUN_loader (uint a0, int a1, const(void*)* a2) nothrow @nogc {
  glReplacementCodePointerSUN = cast(glbfn_glReplacementCodePointerSUN)glbindGetProcAddress(`glReplacementCodePointerSUN`);
  if (glReplacementCodePointerSUN is null) assert(0, `OpenGL function 'glReplacementCodePointerSUN' not found!`);
  glReplacementCodePointerSUN(a0,a1,a2,);
}
__gshared glbfn_glColor4ubVertex2fSUN glColor4ubVertex2fSUN = function void (ubyte a0, ubyte a1, ubyte a2, ubyte a3, float a4, float a5) nothrow @nogc {
  glbfn_glColor4ubVertex2fSUN_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glColor4ubVertex2fSUN_loader (ubyte a0, ubyte a1, ubyte a2, ubyte a3, float a4, float a5) nothrow @nogc {
  glColor4ubVertex2fSUN = cast(glbfn_glColor4ubVertex2fSUN)glbindGetProcAddress(`glColor4ubVertex2fSUN`);
  if (glColor4ubVertex2fSUN is null) assert(0, `OpenGL function 'glColor4ubVertex2fSUN' not found!`);
  glColor4ubVertex2fSUN(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glColor4ubVertex2fvSUN glColor4ubVertex2fvSUN = function void (const(ubyte)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glColor4ubVertex2fvSUN_loader(a0,a1,);
};
private auto glbfn_glColor4ubVertex2fvSUN_loader (const(ubyte)* a0, const(float)* a1) nothrow @nogc {
  glColor4ubVertex2fvSUN = cast(glbfn_glColor4ubVertex2fvSUN)glbindGetProcAddress(`glColor4ubVertex2fvSUN`);
  if (glColor4ubVertex2fvSUN is null) assert(0, `OpenGL function 'glColor4ubVertex2fvSUN' not found!`);
  glColor4ubVertex2fvSUN(a0,a1,);
}
__gshared glbfn_glColor4ubVertex3fSUN glColor4ubVertex3fSUN = function void (ubyte a0, ubyte a1, ubyte a2, ubyte a3, float a4, float a5, float a6) nothrow @nogc {
  glbfn_glColor4ubVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glColor4ubVertex3fSUN_loader (ubyte a0, ubyte a1, ubyte a2, ubyte a3, float a4, float a5, float a6) nothrow @nogc {
  glColor4ubVertex3fSUN = cast(glbfn_glColor4ubVertex3fSUN)glbindGetProcAddress(`glColor4ubVertex3fSUN`);
  if (glColor4ubVertex3fSUN is null) assert(0, `OpenGL function 'glColor4ubVertex3fSUN' not found!`);
  glColor4ubVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glColor4ubVertex3fvSUN glColor4ubVertex3fvSUN = function void (const(ubyte)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glColor4ubVertex3fvSUN_loader(a0,a1,);
};
private auto glbfn_glColor4ubVertex3fvSUN_loader (const(ubyte)* a0, const(float)* a1) nothrow @nogc {
  glColor4ubVertex3fvSUN = cast(glbfn_glColor4ubVertex3fvSUN)glbindGetProcAddress(`glColor4ubVertex3fvSUN`);
  if (glColor4ubVertex3fvSUN is null) assert(0, `OpenGL function 'glColor4ubVertex3fvSUN' not found!`);
  glColor4ubVertex3fvSUN(a0,a1,);
}
__gshared glbfn_glColor3fVertex3fSUN glColor3fVertex3fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glColor3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glColor3fVertex3fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glColor3fVertex3fSUN = cast(glbfn_glColor3fVertex3fSUN)glbindGetProcAddress(`glColor3fVertex3fSUN`);
  if (glColor3fVertex3fSUN is null) assert(0, `OpenGL function 'glColor3fVertex3fSUN' not found!`);
  glColor3fVertex3fSUN(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glColor3fVertex3fvSUN glColor3fVertex3fvSUN = function void (const(float)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glColor3fVertex3fvSUN_loader(a0,a1,);
};
private auto glbfn_glColor3fVertex3fvSUN_loader (const(float)* a0, const(float)* a1) nothrow @nogc {
  glColor3fVertex3fvSUN = cast(glbfn_glColor3fVertex3fvSUN)glbindGetProcAddress(`glColor3fVertex3fvSUN`);
  if (glColor3fVertex3fvSUN is null) assert(0, `OpenGL function 'glColor3fVertex3fvSUN' not found!`);
  glColor3fVertex3fvSUN(a0,a1,);
}
__gshared glbfn_glNormal3fVertex3fSUN glNormal3fVertex3fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glNormal3fVertex3fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glNormal3fVertex3fSUN = cast(glbfn_glNormal3fVertex3fSUN)glbindGetProcAddress(`glNormal3fVertex3fSUN`);
  if (glNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glNormal3fVertex3fSUN' not found!`);
  glNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glNormal3fVertex3fvSUN glNormal3fVertex3fvSUN = function void (const(float)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glNormal3fVertex3fvSUN_loader(a0,a1,);
};
private auto glbfn_glNormal3fVertex3fvSUN_loader (const(float)* a0, const(float)* a1) nothrow @nogc {
  glNormal3fVertex3fvSUN = cast(glbfn_glNormal3fVertex3fvSUN)glbindGetProcAddress(`glNormal3fVertex3fvSUN`);
  if (glNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glNormal3fVertex3fvSUN' not found!`);
  glNormal3fVertex3fvSUN(a0,a1,);
}
__gshared glbfn_glColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9) nothrow @nogc {
  glbfn_glColor4fNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
private auto glbfn_glColor4fNormal3fVertex3fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9) nothrow @nogc {
  glColor4fNormal3fVertex3fSUN = cast(glbfn_glColor4fNormal3fVertex3fSUN)glbindGetProcAddress(`glColor4fNormal3fVertex3fSUN`);
  if (glColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fSUN' not found!`);
  glColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
}
__gshared glbfn_glColor4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN = function void (const(float)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glColor4fNormal3fVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glColor4fNormal3fVertex3fvSUN_loader (const(float)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glColor4fNormal3fVertex3fvSUN = cast(glbfn_glColor4fNormal3fVertex3fvSUN)glbindGetProcAddress(`glColor4fNormal3fVertex3fvSUN`);
  if (glColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fvSUN' not found!`);
  glColor4fNormal3fVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glTexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN = function void (float a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glbfn_glTexCoord2fVertex3fSUN_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glTexCoord2fVertex3fSUN_loader (float a0, float a1, float a2, float a3, float a4) nothrow @nogc {
  glTexCoord2fVertex3fSUN = cast(glbfn_glTexCoord2fVertex3fSUN)glbindGetProcAddress(`glTexCoord2fVertex3fSUN`);
  if (glTexCoord2fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fSUN' not found!`);
  glTexCoord2fVertex3fSUN(a0,a1,a2,a3,a4,);
}
__gshared glbfn_glTexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN = function void (const(float)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glTexCoord2fVertex3fvSUN_loader(a0,a1,);
};
private auto glbfn_glTexCoord2fVertex3fvSUN_loader (const(float)* a0, const(float)* a1) nothrow @nogc {
  glTexCoord2fVertex3fvSUN = cast(glbfn_glTexCoord2fVertex3fvSUN)glbindGetProcAddress(`glTexCoord2fVertex3fvSUN`);
  if (glTexCoord2fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fvSUN' not found!`);
  glTexCoord2fVertex3fvSUN(a0,a1,);
}
__gshared glbfn_glTexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glbfn_glTexCoord4fVertex4fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTexCoord4fVertex4fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glTexCoord4fVertex4fSUN = cast(glbfn_glTexCoord4fVertex4fSUN)glbindGetProcAddress(`glTexCoord4fVertex4fSUN`);
  if (glTexCoord4fVertex4fSUN is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fSUN' not found!`);
  glTexCoord4fVertex4fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN = function void (const(float)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glTexCoord4fVertex4fvSUN_loader(a0,a1,);
};
private auto glbfn_glTexCoord4fVertex4fvSUN_loader (const(float)* a0, const(float)* a1) nothrow @nogc {
  glTexCoord4fVertex4fvSUN = cast(glbfn_glTexCoord4fVertex4fvSUN)glbindGetProcAddress(`glTexCoord4fVertex4fvSUN`);
  if (glTexCoord4fVertex4fvSUN is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fvSUN' not found!`);
  glTexCoord4fVertex4fvSUN(a0,a1,);
}
__gshared glbfn_glTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN = function void (float a0, float a1, ubyte a2, ubyte a3, ubyte a4, ubyte a5, float a6, float a7, float a8) nothrow @nogc {
  glbfn_glTexCoord2fColor4ubVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glTexCoord2fColor4ubVertex3fSUN_loader (float a0, float a1, ubyte a2, ubyte a3, ubyte a4, ubyte a5, float a6, float a7, float a8) nothrow @nogc {
  glTexCoord2fColor4ubVertex3fSUN = cast(glbfn_glTexCoord2fColor4ubVertex3fSUN)glbindGetProcAddress(`glTexCoord2fColor4ubVertex3fSUN`);
  if (glTexCoord2fColor4ubVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fSUN' not found!`);
  glTexCoord2fColor4ubVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glTexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN = function void (const(float)* a0, const(ubyte)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glTexCoord2fColor4ubVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord2fColor4ubVertex3fvSUN_loader (const(float)* a0, const(ubyte)* a1, const(float)* a2) nothrow @nogc {
  glTexCoord2fColor4ubVertex3fvSUN = cast(glbfn_glTexCoord2fColor4ubVertex3fvSUN)glbindGetProcAddress(`glTexCoord2fColor4ubVertex3fvSUN`);
  if (glTexCoord2fColor4ubVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fvSUN' not found!`);
  glTexCoord2fColor4ubVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glbfn_glTexCoord2fColor3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTexCoord2fColor3fVertex3fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glTexCoord2fColor3fVertex3fSUN = cast(glbfn_glTexCoord2fColor3fVertex3fSUN)glbindGetProcAddress(`glTexCoord2fColor3fVertex3fSUN`);
  if (glTexCoord2fColor3fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fSUN' not found!`);
  glTexCoord2fColor3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN = function void (const(float)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glTexCoord2fColor3fVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord2fColor3fVertex3fvSUN_loader (const(float)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glTexCoord2fColor3fVertex3fvSUN = cast(glbfn_glTexCoord2fColor3fVertex3fvSUN)glbindGetProcAddress(`glTexCoord2fColor3fVertex3fvSUN`);
  if (glTexCoord2fColor3fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fvSUN' not found!`);
  glTexCoord2fColor3fVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glbfn_glTexCoord2fNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glTexCoord2fNormal3fVertex3fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7) nothrow @nogc {
  glTexCoord2fNormal3fVertex3fSUN = cast(glbfn_glTexCoord2fNormal3fVertex3fSUN)glbindGetProcAddress(`glTexCoord2fNormal3fVertex3fSUN`);
  if (glTexCoord2fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fSUN' not found!`);
  glTexCoord2fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glTexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN = function void (const(float)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glTexCoord2fNormal3fVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glTexCoord2fNormal3fVertex3fvSUN_loader (const(float)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glTexCoord2fNormal3fVertex3fvSUN = cast(glbfn_glTexCoord2fNormal3fVertex3fvSUN)glbindGetProcAddress(`glTexCoord2fNormal3fVertex3fvSUN`);
  if (glTexCoord2fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fvSUN' not found!`);
  glTexCoord2fNormal3fVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11) nothrow @nogc {
  glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
private auto glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11) nothrow @nogc {
  glTexCoord2fColor4fNormal3fVertex3fSUN = cast(glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN)glbindGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (glTexCoord2fColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  glTexCoord2fColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
}
__gshared glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN = function void (const(float)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN_loader (const(float)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glTexCoord2fColor4fNormal3fVertex3fvSUN = cast(glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN)glbindGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (glTexCoord2fColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  glTexCoord2fColor4fNormal3fVertex3fvSUN(a0,a1,a2,a3,);
}
__gshared glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN = function void (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14) nothrow @nogc {
  glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
};
private auto glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN_loader (float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14) nothrow @nogc {
  glTexCoord4fColor4fNormal3fVertex4fSUN = cast(glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN)glbindGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fSUN`);
  if (glTexCoord4fColor4fNormal3fVertex4fSUN is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fSUN' not found!`);
  glTexCoord4fColor4fNormal3fVertex4fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
}
__gshared glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN = function void (const(float)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN_loader(a0,a1,a2,a3,);
};
private auto glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN_loader (const(float)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glTexCoord4fColor4fNormal3fVertex4fvSUN = cast(glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN)glbindGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fvSUN`);
  if (glTexCoord4fColor4fNormal3fVertex4fvSUN is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fvSUN' not found!`);
  glTexCoord4fColor4fNormal3fVertex4fvSUN(a0,a1,a2,a3,);
}
__gshared glbfn_glReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN = function void (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glbfn_glReplacementCodeuiVertex3fSUN_loader(a0,a1,a2,a3,);
};
private auto glbfn_glReplacementCodeuiVertex3fSUN_loader (uint a0, float a1, float a2, float a3) nothrow @nogc {
  glReplacementCodeuiVertex3fSUN = cast(glbfn_glReplacementCodeuiVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiVertex3fSUN`);
  if (glReplacementCodeuiVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fSUN' not found!`);
  glReplacementCodeuiVertex3fSUN(a0,a1,a2,a3,);
}
__gshared glbfn_glReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN = function void (const(uint)* a0, const(float)* a1) nothrow @nogc {
  glbfn_glReplacementCodeuiVertex3fvSUN_loader(a0,a1,);
};
private auto glbfn_glReplacementCodeuiVertex3fvSUN_loader (const(uint)* a0, const(float)* a1) nothrow @nogc {
  glReplacementCodeuiVertex3fvSUN = cast(glbfn_glReplacementCodeuiVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiVertex3fvSUN`);
  if (glReplacementCodeuiVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fvSUN' not found!`);
  glReplacementCodeuiVertex3fvSUN(a0,a1,);
}
__gshared glbfn_glReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN = function void (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4, float a5, float a6, float a7) nothrow @nogc {
  glbfn_glReplacementCodeuiColor4ubVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,);
};
private auto glbfn_glReplacementCodeuiColor4ubVertex3fSUN_loader (uint a0, ubyte a1, ubyte a2, ubyte a3, ubyte a4, float a5, float a6, float a7) nothrow @nogc {
  glReplacementCodeuiColor4ubVertex3fSUN = cast(glbfn_glReplacementCodeuiColor4ubVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiColor4ubVertex3fSUN`);
  if (glReplacementCodeuiColor4ubVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fSUN' not found!`);
  glReplacementCodeuiColor4ubVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
}
__gshared glbfn_glReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN = function void (const(uint)* a0, const(ubyte)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glReplacementCodeuiColor4ubVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glReplacementCodeuiColor4ubVertex3fvSUN_loader (const(uint)* a0, const(ubyte)* a1, const(float)* a2) nothrow @nogc {
  glReplacementCodeuiColor4ubVertex3fvSUN = cast(glbfn_glReplacementCodeuiColor4ubVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiColor4ubVertex3fvSUN`);
  if (glReplacementCodeuiColor4ubVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fvSUN' not found!`);
  glReplacementCodeuiColor4ubVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN = function void (uint a0, float a1, float a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glbfn_glReplacementCodeuiColor3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glReplacementCodeuiColor3fVertex3fSUN_loader (uint a0, float a1, float a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glReplacementCodeuiColor3fVertex3fSUN = cast(glbfn_glReplacementCodeuiColor3fVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiColor3fVertex3fSUN`);
  if (glReplacementCodeuiColor3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fSUN' not found!`);
  glReplacementCodeuiColor3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN = function void (const(uint)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glReplacementCodeuiColor3fVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glReplacementCodeuiColor3fVertex3fvSUN_loader (const(uint)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glReplacementCodeuiColor3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiColor3fVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiColor3fVertex3fvSUN`);
  if (glReplacementCodeuiColor3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fvSUN' not found!`);
  glReplacementCodeuiColor3fVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN = function void (uint a0, float a1, float a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glbfn_glReplacementCodeuiNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,);
};
private auto glbfn_glReplacementCodeuiNormal3fVertex3fSUN_loader (uint a0, float a1, float a2, float a3, float a4, float a5, float a6) nothrow @nogc {
  glReplacementCodeuiNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiNormal3fVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiNormal3fVertex3fSUN`);
  if (glReplacementCodeuiNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,);
}
__gshared glbfn_glReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN = function void (const(uint)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glReplacementCodeuiNormal3fVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glReplacementCodeuiNormal3fVertex3fvSUN_loader (const(uint)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glReplacementCodeuiNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiNormal3fVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiNormal3fVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN = function void (uint a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10) nothrow @nogc {
  glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
private auto glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN_loader (uint a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10) nothrow @nogc {
  glReplacementCodeuiColor4fNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fSUN`);
  if (glReplacementCodeuiColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
}
__gshared glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN = function void (const(uint)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_loader(a0,a1,a2,a3,);
};
private auto glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_loader (const(uint)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN(a0,a1,a2,a3,);
}
__gshared glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN = function void (uint a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,);
};
private auto glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN_loader (uint a0, float a1, float a2, float a3, float a4, float a5) nothrow @nogc {
  glReplacementCodeuiTexCoord2fVertex3fSUN = cast(glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fSUN`);
  if (glReplacementCodeuiTexCoord2fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fVertex3fSUN(a0,a1,a2,a3,a4,a5,);
}
__gshared glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN = function void (const(uint)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN_loader(a0,a1,a2,);
};
private auto glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN_loader (const(uint)* a0, const(float)* a1, const(float)* a2) nothrow @nogc {
  glReplacementCodeuiTexCoord2fVertex3fvSUN = cast(glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fvSUN`);
  if (glReplacementCodeuiTexCoord2fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fVertex3fvSUN(a0,a1,a2,);
}
__gshared glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = function void (uint a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8) nothrow @nogc {
  glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
private auto glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_loader (uint a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8) nothrow @nogc {
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN`);
  if (glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
}
__gshared glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = function void (const(uint)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_loader(a0,a1,a2,a3,);
};
private auto glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_loader (const(uint)* a0, const(float)* a1, const(float)* a2, const(float)* a3) nothrow @nogc {
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(a0,a1,a2,a3,);
}
__gshared glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = function void (uint a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12) nothrow @nogc {
  glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_loader(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
private auto glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_loader (uint a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12) nothrow @nogc {
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)glbindGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
}
__gshared glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = function void (const(uint)* a0, const(float)* a1, const(float)* a2, const(float)* a3, const(float)* a4) nothrow @nogc {
  glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_loader(a0,a1,a2,a3,a4,);
};
private auto glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_loader (const(uint)* a0, const(float)* a1, const(float)* a2, const(float)* a3, const(float)* a4) nothrow @nogc {
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)glbindGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(a0,a1,a2,a3,a4,);
}
}


public void glbindLoadFunctions () {}
