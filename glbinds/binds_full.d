// WTFPL or Public Domain, on your choice
module iv.glbinds.binds_full /*is aliced*/;
//import iv.alice;

// show loaded functions
//version = glbind_debug;


// ////////////////////////////////////////////////////////////////////////// //
nothrow @nogc {
version(Windows) {
  //pragma(lib, "opengl32");
  private extern(System) nothrow @nogc {
    private import core.sys.windows.windef, core.sys.windows.winbase;
    __gshared void* function (const(char)* name) wglGetProcAddress_Z;
    __gshared BOOL function (HGLRC) wglDeleteContext_Z;
    __gshared HGLRC function (HDC) wglCreateContext_Z;
    __gshared BOOL function (HDC, HGLRC) wglMakeCurrent_Z;
    public alias wglDeleteContext = wglDeleteContext_Z;
    public alias wglCreateContext = wglCreateContext_Z;
    public alias wglMakeCurrent = wglMakeCurrent_Z;
  }
  public void* glbindGetProcAddress (const(char)* name) {
    //import core.sys.windows.wingdi : wglGetProcAddress;
    import core.sys.windows.windef, core.sys.windows.winbase;
    __gshared HINSTANCE dll = null;
    if (*cast(void**)&wglGetProcAddress_Z is null) {
      dll = LoadLibraryA("opengl32.dll");
      if (dll is null) assert(0, "GL: cannot load OpenGL library");
      *cast(void**)&wglGetProcAddress_Z = GetProcAddress(dll, "wglGetProcAddress");
      if (*cast(void**)&wglGetProcAddress_Z is null) assert(0, "GL: cannot load `wglGetProcAddress`");

      *cast(void**)&wglDeleteContext_Z = GetProcAddress(dll, "wglDeleteContext");
      if (*cast(void**)&wglDeleteContext_Z is null) assert(0, "GL: cannot load `wglDeleteContext`");

      *cast(void**)&wglCreateContext_Z = GetProcAddress(dll, "wglCreateContext");
      if (*cast(void**)&wglCreateContext_Z is null) assert(0, "GL: cannot load `wglCreateContext`");

      *cast(void**)&wglMakeCurrent_Z = GetProcAddress(dll, "wglMakeCurrent");
      if (*cast(void**)&wglMakeCurrent_Z is null) assert(0, "GL: cannot load `wglMakeCurrent`");
    }
    void* res = wglGetProcAddress_Z(name);
    if (res is null) return GetProcAddress(dll, name);
    return res;
  }
} else {
  /*
  pragma(lib, "GL");
  extern(C) {
    void* glXGetProcAddress (const(char)* name);
    alias glbindGetProcAddress = glXGetProcAddress;
  }
  */
  private __gshared void* glhandle = null;
  private __gshared void* glbind_glXGetProcAddress = null;
  extern(C) nothrow @nogc {
    private __gshared void* function (const(char)* name) glbind_glXGetProcAddressFn;

    __gshared /*XVisualInfo*/void* function (/*Display*/void *dpy, int screen, const(int)* attrib_list) glXChooseVisual_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXContext*/void* src, /*GLXContext*/void* dst, arch_ulong mask) glXCopyContext_Z;
    __gshared /*GLXContext*/void* function (/*Display*/void *dpy, /*XVisualInfo*/void *vis, /*GLXContext*/void* share_list, /*Bool*/int direct) glXCreateContext_Z;
    __gshared /*GLXPixmap*/size_t function (/*Display*/void *dpy, /*XVisualInfo*/void *vis, /*Pixmap*/size_t pixmap) glXCreateGLXPixmap_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXContext*/void* ctx) glXDestroyContext_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXPixmap*/size_t pix) glXDestroyGLXPixmap_Z;
    __gshared int function (/*Display*/void *dpy, /*XVisualInfo*/void *vis, int attrib, int *value) glXGetConfig_Z;
    __gshared /*GLXContext*/void* function () glXGetCurrentContext_Z;
    __gshared /*GLXDrawable*/size_t function () glXGetCurrentDrawable_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, /*GLXContext*/void* ctx) glXIsDirect_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, /*GLXDrawable*/size_t drawable, /*GLXContext*/void* ctx) glXMakeCurrent_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, int *error_base, int *event_base) glXQueryExtension_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, int *major, int *minor) glXQueryVersion_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXDrawable*/size_t drawable) glXSwapBuffers_Z;
    __gshared void function (/*Font*/size_t font, int first, int count, int list_base) glXUseXFont_Z;
    __gshared void function () glXWaitGL_Z;
    __gshared void function () glXWaitX_Z;

    struct __GLXFBConfigRec {}
    alias GLXFBConfig = __GLXFBConfigRec*;

    __gshared GLXFBConfig* function (/*Display*/void*, int, int*, int*) glXChooseFBConfig_Z;
    __gshared int function (/*Display*/void*, GLXFBConfig, int, int*) glXGetFBConfigAttrib_Z;
    __gshared /*XVisualInfo*/void* function (/*Display*/void*, GLXFBConfig) glXGetVisualFromFBConfig_Z;

    __gshared const(char)* function (/*Display*/void*, int) glXQueryExtensionsString_Z;
    __gshared void* function (const(char)*) glXGetProcAddress_Z;

    alias glXChooseVisual = glXChooseVisual_Z;
    alias glXCopyContext = glXCopyContext_Z;
    alias glXCreateContext = glXCreateContext_Z;
    alias glXCreateGLXPixmap = glXCreateGLXPixmap_Z;
    alias glXDestroyContext = glXDestroyContext_Z;
    alias glXDestroyGLXPixmap = glXDestroyGLXPixmap_Z;
    alias glXGetConfig = glXGetConfig_Z;
    alias glXGetCurrentContext = glXGetCurrentContext_Z;
    alias glXGetCurrentDrawable = glXGetCurrentDrawable_Z;
    alias glXIsDirect = glXIsDirect_Z;
    alias glXMakeCurrent = glXMakeCurrent_Z;
    alias glXQueryExtension = glXQueryExtension_Z;
    alias glXQueryVersion = glXQueryVersion_Z;
    alias glXSwapBuffers = glXSwapBuffers_Z;
    alias glXUseXFont = glXUseXFont_Z;
    alias glXWaitGL = glXWaitGL_Z;
    alias glXWaitX = glXWaitX_Z;

    alias glXChooseFBConfig = glXChooseFBConfig_Z;
    alias glXGetFBConfigAttrib = glXGetFBConfigAttrib_Z;
    alias glXGetVisualFromFBConfig = glXGetVisualFromFBConfig_Z;

    alias glXQueryExtensionsString = glXQueryExtensionsString_Z;
    alias glXGetProcAddress = glXGetProcAddress_Z;
  }
  public void* glbindGetProcAddress (const(char)* name) {
    import core.sys.posix.dlfcn;
    if (glhandle is null) {
      glhandle = dlopen("libGL.so", RTLD_LAZY/*RTLD_NOW*/);
      if (glhandle is null) assert(0, "cannot load libGL");
    }
    if (glbind_glXGetProcAddress is null) {
      glbind_glXGetProcAddress = dlsym(glhandle, "glXGetProcAddress");
      if (glbind_glXGetProcAddress is null) assert(0, "cannot find `glbind_glXGetProcAddress` symbol");

      *cast(void**)&glbind_glXGetProcAddressFn = glbind_glXGetProcAddress;

      *cast(void**)&glXChooseVisual_Z = glbind_glXGetProcAddressFn("glXChooseVisual");
      *cast(void**)&glXCopyContext_Z = glbind_glXGetProcAddressFn("glXCopyContext");
      *cast(void**)&glXCreateContext_Z = glbind_glXGetProcAddressFn("glXCreateContext");
      *cast(void**)&glXCreateGLXPixmap_Z = glbind_glXGetProcAddressFn("glXCreateGLXPixmap");
      *cast(void**)&glXDestroyContext_Z = glbind_glXGetProcAddressFn("glXDestroyContext");
      *cast(void**)&glXDestroyGLXPixmap_Z = glbind_glXGetProcAddressFn("glXDestroyGLXPixmap");
      *cast(void**)&glXGetConfig_Z = glbind_glXGetProcAddressFn("glXGetConfig");
      *cast(void**)&glXGetCurrentContext_Z = glbind_glXGetProcAddressFn("glXGetCurrentContext");
      *cast(void**)&glXGetCurrentDrawable_Z = glbind_glXGetProcAddressFn("glXGetCurrentDrawable");
      *cast(void**)&glXIsDirect_Z = glbind_glXGetProcAddressFn("glXIsDirect");
      *cast(void**)&glXMakeCurrent_Z = glbind_glXGetProcAddressFn("glXMakeCurrent");
      *cast(void**)&glXQueryExtension_Z = glbind_glXGetProcAddressFn("glXQueryExtension");
      *cast(void**)&glXQueryVersion_Z = glbind_glXGetProcAddressFn("glXQueryVersion");
      *cast(void**)&glXSwapBuffers_Z = glbind_glXGetProcAddressFn("glXSwapBuffers");
      *cast(void**)&glXUseXFont_Z = glbind_glXGetProcAddressFn("glXUseXFont");
      *cast(void**)&glXWaitGL_Z = glbind_glXGetProcAddressFn("glXWaitGL");
      *cast(void**)&glXWaitX_Z = glbind_glXGetProcAddressFn("glXWaitX");

      *cast(void**)&glXChooseFBConfig_Z = glbind_glXGetProcAddressFn("glXChooseFBConfig");
      *cast(void**)&glXGetFBConfigAttrib_Z = glbind_glXGetProcAddressFn("glXGetFBConfigAttrib");
      *cast(void**)&glXGetVisualFromFBConfig_Z = glbind_glXGetProcAddressFn("glXGetVisualFromFBConfig");

      *cast(void**)&glXQueryExtensionsString_Z = glbind_glXGetProcAddressFn("glXQueryExtensionsString");
      *cast(void**)&glXGetProcAddress_Z = glbind_glXGetProcAddressFn("glXGetProcAddress");

      if (*cast(void**)&glXChooseVisual_Z is null) assert(0, "GL: `glXChooseVisual` not found");
      if (*cast(void**)&glXCopyContext_Z is null) assert(0, "GL: `glXCopyContext` not found");
      if (*cast(void**)&glXCreateContext_Z is null) assert(0, "GL: `glXCreateContext` not found");
      if (*cast(void**)&glXCreateGLXPixmap_Z is null) assert(0, "GL: `glXCreateGLXPixmap` not found");
      if (*cast(void**)&glXDestroyContext_Z is null) assert(0, "GL: `glXDestroyContext` not found");
      if (*cast(void**)&glXDestroyGLXPixmap_Z is null) assert(0, "GL: `glXDestroyGLXPixmap` not found");
      if (*cast(void**)&glXGetConfig_Z is null) assert(0, "GL: `glXGetConfig` not found");
      if (*cast(void**)&glXGetCurrentContext_Z is null) assert(0, "GL: `glXGetCurrentContext` not found");
      if (*cast(void**)&glXGetCurrentDrawable_Z is null) assert(0, "GL: `glXGetCurrentDrawable` not found");
      if (*cast(void**)&glXIsDirect_Z is null) assert(0, "GL: `glXIsDirect` not found");
      if (*cast(void**)&glXMakeCurrent_Z is null) assert(0, "GL: `glXMakeCurrent` not found");
      if (*cast(void**)&glXQueryExtension_Z is null) assert(0, "GL: `glXQueryExtension` not found");
      if (*cast(void**)&glXQueryVersion_Z is null) assert(0, "GL: `glXQueryVersion` not found");
      if (*cast(void**)&glXSwapBuffers_Z is null) assert(0, "GL: `glXSwapBuffers` not found");
      if (*cast(void**)&glXUseXFont_Z is null) assert(0, "GL: `glXUseXFont` not found");
      if (*cast(void**)&glXWaitGL_Z is null) assert(0, "GL: `glXWaitGL` not found");
      if (*cast(void**)&glXWaitX_Z is null) assert(0, "GL: `glXWaitX` not found");

      if (*cast(void**)&glXChooseFBConfig_Z is null) assert(0, "GL: `glXChooseFBConfig` not found");
      if (*cast(void**)&glXGetFBConfigAttrib_Z is null) assert(0, "GL: `glXGetFBConfigAttrib` not found");
      if (*cast(void**)&glXGetVisualFromFBConfig_Z is null) assert(0, "GL: `glXGetVisualFromFBConfig` not found");

      if (*cast(void**)&glXQueryExtensionsString_Z is null) assert(0, "GL: `glXQueryExtensionsString` not found");
      if (*cast(void**)&glXGetProcAddress_Z is null) assert(0, "GL: `glXGetProcAddress` not found");
    }
    return glbind_glXGetProcAddressFn(name);
    //auto res = glbind_glXGetProcAddressFn(name);
    //if (res is null) { import core.stdc.stdio; stderr.fprintf("GL: can't load '%s'\n", name); assert(0); }
    //return res;
  }

  /+
  enum GLX_USE_GL=            1;       /* support GLX rendering */
  enum GLX_BUFFER_SIZE=       2;       /* depth of the color buffer */
  enum GLX_LEVEL=             3;       /* level in plane stacking */
  enum GLX_RGBA=              4;       /* true if RGBA mode */
  enum GLX_DOUBLEBUFFER=      5;       /* double buffering supported */
  enum GLX_STEREO=            6;       /* stereo buffering supported */
  enum GLX_AUX_BUFFERS=       7;       /* number of aux buffers */
  enum GLX_RED_SIZE=          8;       /* number of red component bits */
  enum GLX_GREEN_SIZE=        9;       /* number of green component bits */
  enum GLX_BLUE_SIZE=         10;      /* number of blue component bits */
  enum GLX_ALPHA_SIZE=        11;      /* number of alpha component bits */
  enum GLX_DEPTH_SIZE=        12;      /* number of depth bits */
  enum GLX_STENCIL_SIZE=      13;      /* number of stencil bits */
  enum GLX_ACCUM_RED_SIZE=    14;      /* number of red accum bits */
  enum GLX_ACCUM_GREEN_SIZE=  15;      /* number of green accum bits */
  enum GLX_ACCUM_BLUE_SIZE=   16;      /* number of blue accum bits */
  enum GLX_ACCUM_ALPHA_SIZE=  17;      /* number of alpha accum bits */

  enum GLX_X_RENDERABLE = 0x8012;
  enum GLX_DRAWABLE_TYPE = 0x8010;
  enum GLX_RENDER_TYPE = 0x8011;
  enum GLX_X_VISUAL_TYPE = 0x22;
  enum GLX_TRUE_COLOR = 0x8002;
  enum GLX_WINDOW_BIT = 0x00000001;
  enum GLX_RGBA_BIT = 0x00000001;
  enum GLX_COLOR_INDEX_BIT = 0x00000002;
  enum GLX_SAMPLE_BUFFERS = 0x186a0;
  enum GLX_SAMPLES = 0x186a1;
  enum GLX_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
  enum GLX_CONTEXT_MINOR_VERSION_ARB = 0x2092;
  +/

  // Tokens for glXChooseVisual and glXGetConfig:
  enum GLX_USE_GL = 1;
  enum GLX_BUFFER_SIZE = 2;
  enum GLX_LEVEL = 3;
  enum GLX_RGBA = 4;
  enum GLX_DOUBLEBUFFER = 5;
  enum GLX_STEREO = 6;
  enum GLX_AUX_BUFFERS = 7;
  enum GLX_RED_SIZE = 8;
  enum GLX_GREEN_SIZE = 9;
  enum GLX_BLUE_SIZE = 10;
  enum GLX_ALPHA_SIZE = 11;
  enum GLX_DEPTH_SIZE = 12;
  enum GLX_STENCIL_SIZE = 13;
  enum GLX_ACCUM_RED_SIZE = 14;
  enum GLX_ACCUM_GREEN_SIZE = 15;
  enum GLX_ACCUM_BLUE_SIZE = 16;
  enum GLX_ACCUM_ALPHA_SIZE = 17;

  // Error codes returned by glXGetConfig:
  enum GLX_BAD_SCREEN = 1;
  enum GLX_BAD_ATTRIBUTE = 2;
  enum GLX_NO_EXTENSION = 3;
  enum GLX_BAD_VISUAL = 4;
  enum GLX_BAD_CONTEXT = 5;
  enum GLX_BAD_VALUE = 6;
  enum GLX_BAD_ENUM = 7;

  // GLX 1.1 and later:
  enum GLX_VENDOR = 1;
  enum GLX_VERSION = 2;
  enum GLX_EXTENSIONS = 3;

  // GLX 1.3 and later:
  enum GLX_CONFIG_CAVEAT = 0x20;
  enum GLX_DONT_CARE = 0xFFFFFFFF;
  enum GLX_X_VISUAL_TYPE = 0x22;
  enum GLX_TRANSPARENT_TYPE = 0x23;
  enum GLX_TRANSPARENT_INDEX_VALUE = 0x24;
  enum GLX_TRANSPARENT_RED_VALUE = 0x25;
  enum GLX_TRANSPARENT_GREEN_VALUE = 0x26;
  enum GLX_TRANSPARENT_BLUE_VALUE = 0x27;
  enum GLX_TRANSPARENT_ALPHA_VALUE = 0x28;
  enum GLX_WINDOW_BIT = 0x00000001;
  enum GLX_PIXMAP_BIT = 0x00000002;
  enum GLX_PBUFFER_BIT = 0x00000004;
  enum GLX_AUX_BUFFERS_BIT = 0x00000010;
  enum GLX_FRONT_LEFT_BUFFER_BIT = 0x00000001;
  enum GLX_FRONT_RIGHT_BUFFER_BIT = 0x00000002;
  enum GLX_BACK_LEFT_BUFFER_BIT = 0x00000004;
  enum GLX_BACK_RIGHT_BUFFER_BIT = 0x00000008;
  enum GLX_DEPTH_BUFFER_BIT = 0x00000020;
  enum GLX_STENCIL_BUFFER_BIT = 0x00000040;
  enum GLX_ACCUM_BUFFER_BIT = 0x00000080;
  enum GLX_NONE = 0x8000;
  enum GLX_SLOW_CONFIG = 0x8001;
  enum GLX_TRUE_COLOR = 0x8002;
  enum GLX_DIRECT_COLOR = 0x8003;
  enum GLX_PSEUDO_COLOR = 0x8004;
  enum GLX_STATIC_COLOR = 0x8005;
  enum GLX_GRAY_SCALE = 0x8006;
  enum GLX_STATIC_GRAY = 0x8007;
  enum GLX_TRANSPARENT_RGB = 0x8008;
  enum GLX_TRANSPARENT_INDEX = 0x8009;
  enum GLX_VISUAL_ID = 0x800B;
  enum GLX_SCREEN = 0x800C;
  enum GLX_NON_CONFORMANT_CONFIG = 0x800D;
  enum GLX_DRAWABLE_TYPE = 0x8010;
  enum GLX_RENDER_TYPE = 0x8011;
  enum GLX_X_RENDERABLE = 0x8012;
  enum GLX_FBCONFIG_ID = 0x8013;
  enum GLX_RGBA_TYPE = 0x8014;
  enum GLX_COLOR_INDEX_TYPE = 0x8015;
  enum GLX_MAX_PBUFFER_WIDTH = 0x8016;
  enum GLX_MAX_PBUFFER_HEIGHT = 0x8017;
  enum GLX_MAX_PBUFFER_PIXELS = 0x8018;
  enum GLX_PRESERVED_CONTENTS = 0x801B;
  enum GLX_LARGEST_PBUFFER = 0x801C;
  enum GLX_WIDTH = 0x801D;
  enum GLX_HEIGHT = 0x801E;
  enum GLX_EVENT_MASK = 0x801F;
  enum GLX_DAMAGED = 0x8020;
  enum GLX_SAVED = 0x8021;
  enum GLX_WINDOW = 0x8022;
  enum GLX_PBUFFER = 0x8023;
  enum GLX_PBUFFER_HEIGHT = 0x8040;
  enum GLX_PBUFFER_WIDTH = 0x8041;
  enum GLX_RGBA_BIT = 0x00000001;
  enum GLX_COLOR_INDEX_BIT = 0x00000002;
  enum GLX_PBUFFER_CLOBBER_MASK = 0x08000000;

  // GLX 1.4 and later:
  enum GLX_SAMPLE_BUFFERS = 0x186a0; /*100000*/
  enum GLX_SAMPLES = 0x186a1; /*100001*/

  // others
  //enum GLX_WINDOW_BIT = 0x00000001;
  //enum GLX_PIXMAP_BIT = 0x00000002;
  //enum GLX_PBUFFER_BIT = 0x00000004;
  //enum GLX_RGBA_BIT = 0x00000001;
  //enum GLX_COLOR_INDEX_BIT = 0x00000002;
  //enum GLX_PBUFFER_CLOBBER_MASK = 0x08000000;
  //enum GLX_FRONT_LEFT_BUFFER_BIT = 0x00000001;
  //enum GLX_FRONT_RIGHT_BUFFER_BIT = 0x00000002;
  //enum GLX_BACK_LEFT_BUFFER_BIT = 0x00000004;
  //enum GLX_BACK_RIGHT_BUFFER_BIT = 0x00000008;
  //enum GLX_AUX_BUFFERS_BIT = 0x00000010;
  //enum GLX_DEPTH_BUFFER_BIT = 0x00000020;
  //enum GLX_STENCIL_BUFFER_BIT = 0x00000040;
  //enum GLX_ACCUM_BUFFER_BIT = 0x00000080;
  //enum GLX_CONFIG_CAVEAT = 0x20;
  //enum GLX_X_VISUAL_TYPE = 0x22;
  //enum GLX_TRANSPARENT_TYPE = 0x23;
  //enum GLX_TRANSPARENT_INDEX_VALUE = 0x24;
  //enum GLX_TRANSPARENT_RED_VALUE = 0x25;
  //enum GLX_TRANSPARENT_GREEN_VALUE = 0x26;
  //enum GLX_TRANSPARENT_BLUE_VALUE = 0x27;
  //enum GLX_TRANSPARENT_ALPHA_VALUE = 0x28;
  //enum GLX_DONT_CARE = 0xFFFFFFFF;
  //enum GLX_NONE = 0x8000;
  //enum GLX_SLOW_CONFIG = 0x8001;
  //enum GLX_TRUE_COLOR = 0x8002;
  //enum GLX_DIRECT_COLOR = 0x8003;
  //enum GLX_PSEUDO_COLOR = 0x8004;
  //enum GLX_STATIC_COLOR = 0x8005;
  //enum GLX_GRAY_SCALE = 0x8006;
  //enum GLX_STATIC_GRAY = 0x8007;
  //enum GLX_TRANSPARENT_RGB = 0x8008;
  //enum GLX_TRANSPARENT_INDEX = 0x8009;
  //enum GLX_VISUAL_ID = 0x800B;
  //enum GLX_SCREEN = 0x800C;
  //enum GLX_NON_CONFORMANT_CONFIG = 0x800D;
  //enum GLX_DRAWABLE_TYPE = 0x8010;
  //enum GLX_RENDER_TYPE = 0x8011;
  //enum GLX_X_RENDERABLE = 0x8012;
  //enum GLX_FBCONFIG_ID = 0x8013;
  //enum GLX_RGBA_TYPE = 0x8014;
  //enum GLX_COLOR_INDEX_TYPE = 0x8015;
  //enum GLX_MAX_PBUFFER_WIDTH = 0x8016;
  //enum GLX_MAX_PBUFFER_HEIGHT = 0x8017;
  //enum GLX_MAX_PBUFFER_PIXELS = 0x8018;
  //enum GLX_PRESERVED_CONTENTS = 0x801B;
  //enum GLX_LARGEST_PBUFFER = 0x801C;
  //enum GLX_WIDTH = 0x801D;
  //enum GLX_HEIGHT = 0x801E;
  //enum GLX_EVENT_MASK = 0x801F;
  //enum GLX_DAMAGED = 0x8020;
  //enum GLX_SAVED = 0x8021;
  //enum GLX_WINDOW = 0x8022;
  //enum GLX_PBUFFER = 0x8023;
  //enum GLX_PBUFFER_HEIGHT = 0x8040;
  //enum GLX_PBUFFER_WIDTH = 0x8041;

  /+
  enum GLX_ARB_context_flush_control = 1;
  enum GLX_CONTEXT_RELEASE_BEHAVIOR_ARB = 0x2097;
  enum GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB = 0;
  enum GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB = 0x2098;
  +/

  //enum GLX_ARB_create_context = 1;
  enum GLX_CONTEXT_DEBUG_BIT_ARB = 0x00000001;
  enum GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
  enum GLX_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
  enum GLX_CONTEXT_MINOR_VERSION_ARB = 0x2092;
  enum GLX_CONTEXT_FLAGS_ARB = 0x2094;

  //enum GLX_ARB_create_context_profile = 1;
  enum GLX_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
  enum GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
  enum GLX_CONTEXT_PROFILE_MASK_ARB = 0x9126;

  //enum GLX_ARB_create_context_robustness = 1;
  enum GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB = 0x00000004;
  enum GLX_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
  enum GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
  enum GLX_NO_RESET_NOTIFICATION_ARB = 0x8261;

  //enum GLX_ARB_fbconfig_float = 1;
  enum GLX_RGBA_FLOAT_TYPE_ARB = 0x20B9;
  enum GLX_RGBA_FLOAT_BIT_ARB = 0x00000004;

  //enum GLX_ARB_framebuffer_sRGB = 1;
  enum GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB = 0x20B2;

  //enum GLX_ARB_multisample = 1;
  enum GLX_SAMPLE_BUFFERS_ARB = 100000;
  enum GLX_SAMPLES_ARB = 100001;

  //enum GLX_ARB_robustness_application_isolation = 1;
  enum GLX_CONTEXT_RESET_ISOLATION_BIT_ARB = 0x00000008;

  //enum GLX_ARB_vertex_buffer_object = 1;
  enum GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB = 0x2095;

  /+
  enum GLX_AMD_gpu_association = 1;
  enum GLX_GPU_VENDOR_AMD = 0x1F00;
  enum GLX_GPU_RENDERER_STRING_AMD = 0x1F01;
  enum GLX_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
  enum GLX_GPU_FASTEST_TARGET_GPUS_AMD = 0x21A2;
  enum GLX_GPU_RAM_AMD = 0x21A3;
  enum GLX_GPU_CLOCK_AMD = 0x21A4;
  enum GLX_GPU_NUM_PIPES_AMD = 0x21A5;
  enum GLX_GPU_NUM_SIMD_AMD = 0x21A6;
  enum GLX_GPU_NUM_RB_AMD = 0x21A7;
  enum GLX_GPU_NUM_SPI_AMD = 0x21A8;
  +/

  //enum GLX_EXT_buffer_age = 1;
  enum GLX_BACK_BUFFER_AGE_EXT = 0x20F4;

  /+
  enum GLX_EXT_create_context_es2_profile = 1;
  enum GLX_CONTEXT_ES2_PROFILE_BIT_EXT = 0x00000004;

  enum GLX_EXT_create_context_es_profile = 1;
  enum GLX_CONTEXT_ES_PROFILE_BIT_EXT = 0x00000004;
  +/

  //enum GLX_EXT_fbconfig_packed_float = 1;
  enum GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT = 0x20B1;
  enum GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT = 0x00000008;

  //enum GLX_EXT_framebuffer_sRGB = 1;
  enum GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x20B2;

  //enum GLX_EXT_import_context = 1;
  enum GLX_SHARE_CONTEXT_EXT = 0x800A;
  enum GLX_VISUAL_ID_EXT = 0x800B;
  enum GLX_SCREEN_EXT = 0x800C;

  //enum GLX_EXT_swap_control = 1;
  enum GLX_SWAP_INTERVAL_EXT = 0x20F1;
  enum GLX_MAX_SWAP_INTERVAL_EXT = 0x20F2;

  //enum GLX_EXT_swap_control_tear = 1;
  enum GLX_LATE_SWAPS_TEAR_EXT = 0x20F3;

  //enum GLX_EXT_texture_from_pixmap = 1;
  enum GLX_TEXTURE_1D_BIT_EXT = 0x00000001;
  enum GLX_TEXTURE_2D_BIT_EXT = 0x00000002;
  enum GLX_TEXTURE_RECTANGLE_BIT_EXT = 0x00000004;
  enum GLX_BIND_TO_TEXTURE_RGB_EXT = 0x20D0;
  enum GLX_BIND_TO_TEXTURE_RGBA_EXT = 0x20D1;
  enum GLX_BIND_TO_MIPMAP_TEXTURE_EXT = 0x20D2;
  enum GLX_BIND_TO_TEXTURE_TARGETS_EXT = 0x20D3;
  enum GLX_Y_INVERTED_EXT = 0x20D4;
  enum GLX_TEXTURE_FORMAT_EXT = 0x20D5;
  enum GLX_TEXTURE_TARGET_EXT = 0x20D6;
  enum GLX_MIPMAP_TEXTURE_EXT = 0x20D7;
  enum GLX_TEXTURE_FORMAT_NONE_EXT = 0x20D8;
  enum GLX_TEXTURE_FORMAT_RGB_EXT = 0x20D9;
  enum GLX_TEXTURE_FORMAT_RGBA_EXT = 0x20DA;
  enum GLX_TEXTURE_1D_EXT = 0x20DB;
  enum GLX_TEXTURE_2D_EXT = 0x20DC;
  enum GLX_TEXTURE_RECTANGLE_EXT = 0x20DD;
  enum GLX_FRONT_LEFT_EXT = 0x20DE;
  enum GLX_FRONT_RIGHT_EXT = 0x20DF;
  enum GLX_BACK_LEFT_EXT = 0x20E0;
  enum GLX_BACK_RIGHT_EXT = 0x20E1;
  enum GLX_FRONT_EXT = 0x20DE;
  enum GLX_BACK_EXT = 0x20E0;
  enum GLX_AUX0_EXT = 0x20E2;
  enum GLX_AUX1_EXT = 0x20E3;
  enum GLX_AUX2_EXT = 0x20E4;
  enum GLX_AUX3_EXT = 0x20E5;
  enum GLX_AUX4_EXT = 0x20E6;
  enum GLX_AUX5_EXT = 0x20E7;
  enum GLX_AUX6_EXT = 0x20E8;
  enum GLX_AUX7_EXT = 0x20E9;
  enum GLX_AUX8_EXT = 0x20EA;
  enum GLX_AUX9_EXT = 0x20EB;

  //enum GLX_EXT_visual_info = 1;
  enum GLX_X_VISUAL_TYPE_EXT = 0x22;
  enum GLX_TRANSPARENT_TYPE_EXT = 0x23;
  enum GLX_TRANSPARENT_INDEX_VALUE_EXT = 0x24;
  enum GLX_TRANSPARENT_RED_VALUE_EXT = 0x25;
  enum GLX_TRANSPARENT_GREEN_VALUE_EXT = 0x26;
  enum GLX_TRANSPARENT_BLUE_VALUE_EXT = 0x27;
  enum GLX_TRANSPARENT_ALPHA_VALUE_EXT = 0x28;
  enum GLX_NONE_EXT = 0x8000;
  enum GLX_TRUE_COLOR_EXT = 0x8002;
  enum GLX_DIRECT_COLOR_EXT = 0x8003;
  enum GLX_PSEUDO_COLOR_EXT = 0x8004;
  enum GLX_STATIC_COLOR_EXT = 0x8005;
  enum GLX_GRAY_SCALE_EXT = 0x8006;
  enum GLX_STATIC_GRAY_EXT = 0x8007;
  enum GLX_TRANSPARENT_RGB_EXT = 0x8008;
  enum GLX_TRANSPARENT_INDEX_EXT = 0x8009;

  //enum GLX_EXT_visual_rating = 1;
  enum GLX_VISUAL_CAVEAT_EXT = 0x20;
  enum GLX_SLOW_VISUAL_EXT = 0x8001;
  enum GLX_NON_CONFORMANT_VISUAL_EXT = 0x800D;

  /+
  //enum GLX_INTEL_swap_event = 1;
  enum GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK = 0x04000000;
  enum GLX_EXCHANGE_COMPLETE_INTEL = 0x8180;
  enum GLX_COPY_COMPLETE_INTEL = 0x8181;
  enum GLX_FLIP_COMPLETE_INTEL = 0x8182;

  enum GLX_MESA_query_renderer = 1;
  enum GLX_RENDERER_VENDOR_ID_MESA = 0x8183;
  enum GLX_RENDERER_DEVICE_ID_MESA = 0x8184;
  enum GLX_RENDERER_VERSION_MESA = 0x8185;
  enum GLX_RENDERER_ACCELERATED_MESA = 0x8186;
  enum GLX_RENDERER_VIDEO_MEMORY_MESA = 0x8187;
  enum GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA = 0x8188;
  enum GLX_RENDERER_PREFERRED_PROFILE_MESA = 0x8189;
  enum GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA = 0x818A;
  enum GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA = 0x818B;
  enum GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA = 0x818C;
  enum GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA = 0x818D;
  enum GLX_RENDERER_ID_MESA = 0x818E;
  +/

  //enum GLX_NV_float_buffer = 1;
  enum GLX_FLOAT_COMPONENTS_NV = 0x20B0;

  //enum GLX_NV_multisample_coverage = 1;
  enum GLX_COVERAGE_SAMPLES_NV = 100001;
  enum GLX_COLOR_SAMPLES_NV = 0x20B3;

  /+
  enum GLX_NV_present_video = 1;
  enum GLX_NUM_VIDEO_SLOTS_NV = 0x20F0;

  enum GLX_NV_video_capture = 1;
  //typedef XID GLXVideoCaptureDeviceNV;
  enum GLX_DEVICE_ID_NV = 0x20CD;
  enum GLX_UNIQUE_ID_NV = 0x20CE;
  enum GLX_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20CF;

  enum GLX_NV_video_out = 1;
  //typedef unsigned int GLXVideoDeviceNV;
  enum GLX_VIDEO_OUT_COLOR_NV = 0x20C3;
  enum GLX_VIDEO_OUT_ALPHA_NV = 0x20C4;
  enum GLX_VIDEO_OUT_DEPTH_NV = 0x20C5;
  enum GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
  enum GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
  enum GLX_VIDEO_OUT_FRAME_NV = 0x20C8;
  enum GLX_VIDEO_OUT_FIELD_1_NV = 0x20C9;
  enum GLX_VIDEO_OUT_FIELD_2_NV = 0x20CA;
  enum GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20CB;
  enum GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20CC;

  enum GLX_OML_swap_method = 1;
  enum GLX_SWAP_METHOD_OML = 0x8060;
  enum GLX_SWAP_EXCHANGE_OML = 0x8061;
  enum GLX_SWAP_COPY_OML = 0x8062;
  enum GLX_SWAP_UNDEFINED_OML = 0x8063;

  enum GLX_SGIS_blended_overlay = 1;
  enum GLX_BLENDED_RGBA_SGIS = 0x8025;

  enum GLX_SGIS_multisample = 1;
  enum GLX_SAMPLE_BUFFERS_SGIS = 100000;
  enum GLX_SAMPLES_SGIS = 100001;

  enum GLX_SGIS_shared_multisample = 1;
  enum GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
  enum GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;

  enum GLX_SGIX_fbconfig = 1;
  //typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
  enum GLX_WINDOW_BIT_SGIX = 0x00000001;
  enum GLX_PIXMAP_BIT_SGIX = 0x00000002;
  enum GLX_RGBA_BIT_SGIX = 0x00000001;
  enum GLX_COLOR_INDEX_BIT_SGIX = 0x00000002;
  enum GLX_DRAWABLE_TYPE_SGIX = 0x8010;
  enum GLX_RENDER_TYPE_SGIX = 0x8011;
  enum GLX_X_RENDERABLE_SGIX = 0x8012;
  enum GLX_FBCONFIG_ID_SGIX = 0x8013;
  enum GLX_RGBA_TYPE_SGIX = 0x8014;
  enum GLX_COLOR_INDEX_TYPE_SGIX = 0x8015;

  enum GLX_SGIX_pbuffer = 1;
  enum GLX_PBUFFER_BIT_SGIX = 0x00000004;
  enum GLX_BUFFER_CLOBBER_MASK_SGIX = 0x08000000;
  enum GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001;
  enum GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002;
  enum GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004;
  enum GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008;
  enum GLX_AUX_BUFFERS_BIT_SGIX = 0x00000010;
  enum GLX_DEPTH_BUFFER_BIT_SGIX = 0x00000020;
  enum GLX_STENCIL_BUFFER_BIT_SGIX = 0x00000040;
  enum GLX_ACCUM_BUFFER_BIT_SGIX = 0x00000080;
  enum GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x00000100;
  enum GLX_MAX_PBUFFER_WIDTH_SGIX = 0x8016;
  enum GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x8017;
  enum GLX_MAX_PBUFFER_PIXELS_SGIX = 0x8018;
  enum GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019;
  enum GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801A;
  enum GLX_PRESERVED_CONTENTS_SGIX = 0x801B;
  enum GLX_LARGEST_PBUFFER_SGIX = 0x801C;
  enum GLX_WIDTH_SGIX = 0x801D;
  enum GLX_HEIGHT_SGIX = 0x801E;
  enum GLX_EVENT_MASK_SGIX = 0x801F;
  enum GLX_DAMAGED_SGIX = 0x8020;
  enum GLX_SAVED_SGIX = 0x8021;
  enum GLX_WINDOW_SGIX = 0x8022;
  enum GLX_PBUFFER_SGIX = 0x8023;

  enum GLX_SGIX_video_resize = 1;
  enum GLX_SYNC_FRAME_SGIX = 0x00000000;
  enum GLX_SYNC_SWAP_SGIX = 0x00000001;

  enum GLX_SGIX_visual_select_group = 1;
  enum GLX_VISUAL_SELECT_GROUP_SGIX = 0x8028;
  +/

  private alias arch_ulong = size_t;

  /+
  alias XID GLXContextID;
  alias XID GLXPixmap;
  alias XID GLXDrawable;
  alias XID GLXPbuffer;
  alias XID GLXWindow;
  alias XID GLXFBConfigID;
  alias void* GLXContext;


  XVisualInfo* glXChooseVisual(/*Display*/void *dpy, int screen, int *attrib_list);
  void glXCopyContext(/*Display*/void *dpy, /*GLXContext*/void* src, /*GLXContext*/void* dst, arch_ulong mask);
  /*GLXContext*/void* glXCreateContext(/*Display*/void *dpy, XVisualInfo *vis, /*GLXContext*/void* share_list, Bool direct);
  GLXPixmap glXCreateGLXPixmap(/*Display*/void *dpy, /*XVisualInfo*/void *vis, /*Pixmap*/size_t pixmap);
  void glXDestroyContext(/*Display*/void *dpy, /*GLXContext*/void* ctx);
  void glXDestroyGLXPixmap(/*Display*/void *dpy, /*GLXPixmap*/size_t pix);
  int glXGetConfig(/*Display*/void *dpy, /*XVisualInfo*/void *vis, int attrib, int *value);
  /*GLXContext*/void* glXGetCurrentContext();
  GLXDrawable glXGetCurrentDrawable();
  Bool glXIsDirect(/*Display*/void *dpy, /*GLXContext*/void* ctx);
  Bool glXMakeCurrent(/*Display*/void *dpy, /*GLXDrawable*/size_t drawable, /*GLXContext*/void* ctx);
  Bool glXQueryExtension(/*Display*/void *dpy, int *error_base, int *event_base);
  Bool glXQueryVersion(/*Display*/void *dpy, int *major, int *minor);
  void glXSwapBuffers(/*Display*/void *dpy, /*GLXDrawable*/size_t drawable);
  void glXUseXFont(/*Font*/size_t font, int first, int count, int list_base);
  void glXWaitGL();
  void glXWaitX();
  +/
}

public bool glHasFunction (const(char)[] name) {
  if (name.length == 0 || name.length > 255) return false; // arbitrary limit
  char[256] xname = 0;
  xname[0..name.length] = name[];
  return (glbindGetProcAddress(xname.ptr) !is null);
}

// convenient template checker
public bool glHasFunc(string name) () {
  static int flag = -1;
  if (flag < 0) flag = (glHasFunction(name) ? 1 : 0);
  return (flag == 1);
}


extern(System) {
alias GLvoid = void;
alias GLintptr = ptrdiff_t;
alias GLsizei = int;
alias GLchar = char;
alias GLcharARB = byte;
alias GLushort = ushort;
alias GLint64EXT = long;
alias GLshort = short;
alias GLuint64 = ulong;
alias GLhalfARB = ushort;
alias GLubyte = ubyte;
alias GLdouble = double;
alias GLhandleARB = uint;
alias GLint64 = long;
alias GLenum = uint;
alias GLeglImageOES = void*;
alias GLintptrARB = ptrdiff_t;
alias GLsizeiptr = ptrdiff_t;
alias GLint = int;
alias GLboolean = ubyte;
alias GLbitfield = uint;
alias GLsizeiptrARB = ptrdiff_t;
alias GLfloat = float;
alias GLuint64EXT = ulong;
alias GLclampf = float;
alias GLbyte = byte;
alias GLclampd = double;
alias GLuint = uint;
alias GLvdpauSurfaceNV = ptrdiff_t;
alias GLfixed = int;
alias GLhalf = ushort;
alias GLclampx = int;
alias GLhalfNV = ushort;
//struct ___GLsync; alias __GLsync = ___GLsync*;
//alias GLsync = __GLsync*;
//struct __cl_context; alias _cl_context = __cl_context*;
//struct __cl_event; alias _cl_event = __cl_event*;

enum ubyte GL_FALSE = 0;
enum ubyte GL_TRUE = 1;
enum uint GL_NO_ERROR = 0;
enum uint GL_NONE = 0;
enum uint GL_ZERO = 0;
enum uint GL_ONE = 1;
enum uint GL_NONE_OES = 0;
enum uint GL_INVALID_INDEX = 0xFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
enum uint GL_VERSION_ES_CL_1_0 = 1;
enum uint GL_VERSION_ES_CM_1_1 = 1;
enum uint GL_VERSION_ES_CL_1_1 = 1;
enum uint GL_DEPTH_BUFFER_BIT = 0x00000100;
enum uint GL_STENCIL_BUFFER_BIT = 0x00000400;
enum uint GL_COLOR_BUFFER_BIT = 0x00004000;
enum uint GL_POINTS = 0x0000;
enum uint GL_LINES = 0x0001;
enum uint GL_LINE_LOOP = 0x0002;
enum uint GL_LINE_STRIP = 0x0003;
enum uint GL_TRIANGLES = 0x0004;
enum uint GL_TRIANGLE_STRIP = 0x0005;
enum uint GL_TRIANGLE_FAN = 0x0006;
enum uint GL_QUADS = 0x0007;
enum uint GL_NEVER = 0x0200;
enum uint GL_LESS = 0x0201;
enum uint GL_EQUAL = 0x0202;
enum uint GL_LEQUAL = 0x0203;
enum uint GL_GREATER = 0x0204;
enum uint GL_NOTEQUAL = 0x0205;
enum uint GL_GEQUAL = 0x0206;
enum uint GL_ALWAYS = 0x0207;
enum uint GL_SRC_COLOR = 0x0300;
enum uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum uint GL_SRC_ALPHA = 0x0302;
enum uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum uint GL_DST_ALPHA = 0x0304;
enum uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum uint GL_DST_COLOR = 0x0306;
enum uint GL_ONE_MINUS_DST_COLOR = 0x0307;
enum uint GL_SRC_ALPHA_SATURATE = 0x0308;
enum uint GL_FRONT_LEFT = 0x0400;
enum uint GL_FRONT_RIGHT = 0x0401;
enum uint GL_BACK_LEFT = 0x0402;
enum uint GL_BACK_RIGHT = 0x0403;
enum uint GL_FRONT = 0x0404;
enum uint GL_BACK = 0x0405;
enum uint GL_LEFT = 0x0406;
enum uint GL_RIGHT = 0x0407;
enum uint GL_FRONT_AND_BACK = 0x0408;
enum uint GL_INVALID_ENUM = 0x0500;
enum uint GL_INVALID_VALUE = 0x0501;
enum uint GL_INVALID_OPERATION = 0x0502;
enum uint GL_OUT_OF_MEMORY = 0x0505;
enum uint GL_CW = 0x0900;
enum uint GL_CCW = 0x0901;
enum uint GL_POINT_SIZE = 0x0B11;
enum uint GL_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_LINE_SMOOTH = 0x0B20;
enum uint GL_LINE_WIDTH = 0x0B21;
enum uint GL_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_POLYGON_MODE = 0x0B40;
enum uint GL_POLYGON_SMOOTH = 0x0B41;
enum uint GL_CULL_FACE = 0x0B44;
enum uint GL_CULL_FACE_MODE = 0x0B45;
enum uint GL_FRONT_FACE = 0x0B46;
enum uint GL_DEPTH_RANGE = 0x0B70;
enum uint GL_DEPTH_TEST = 0x0B71;
enum uint GL_DEPTH_WRITEMASK = 0x0B72;
enum uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum uint GL_DEPTH_FUNC = 0x0B74;
enum uint GL_STENCIL_TEST = 0x0B90;
enum uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum uint GL_STENCIL_FUNC = 0x0B92;
enum uint GL_STENCIL_VALUE_MASK = 0x0B93;
enum uint GL_STENCIL_FAIL = 0x0B94;
enum uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum uint GL_STENCIL_REF = 0x0B97;
enum uint GL_STENCIL_WRITEMASK = 0x0B98;
enum uint GL_VIEWPORT = 0x0BA2;
enum uint GL_DITHER = 0x0BD0;
enum uint GL_BLEND_DST = 0x0BE0;
enum uint GL_BLEND_SRC = 0x0BE1;
enum uint GL_BLEND = 0x0BE2;
enum uint GL_LOGIC_OP_MODE = 0x0BF0;
enum uint GL_COLOR_LOGIC_OP = 0x0BF2;
enum uint GL_DRAW_BUFFER = 0x0C01;
enum uint GL_READ_BUFFER = 0x0C02;
enum uint GL_SCISSOR_BOX = 0x0C10;
enum uint GL_SCISSOR_TEST = 0x0C11;
enum uint GL_COLOR_CLEAR_VALUE = 0x0C22;
enum uint GL_COLOR_WRITEMASK = 0x0C23;
enum uint GL_DOUBLEBUFFER = 0x0C32;
enum uint GL_STEREO = 0x0C33;
enum uint GL_LINE_SMOOTH_HINT = 0x0C52;
enum uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
enum uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
enum uint GL_UNPACK_LSB_FIRST = 0x0CF1;
enum uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum uint GL_UNPACK_ALIGNMENT = 0x0CF5;
enum uint GL_PACK_SWAP_BYTES = 0x0D00;
enum uint GL_PACK_LSB_FIRST = 0x0D01;
enum uint GL_PACK_ROW_LENGTH = 0x0D02;
enum uint GL_PACK_SKIP_ROWS = 0x0D03;
enum uint GL_PACK_SKIP_PIXELS = 0x0D04;
enum uint GL_PACK_ALIGNMENT = 0x0D05;
enum uint GL_MAX_TEXTURE_SIZE = 0x0D33;
enum uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum uint GL_SUBPIXEL_BITS = 0x0D50;
enum uint GL_TEXTURE_1D = 0x0DE0;
enum uint GL_TEXTURE_2D = 0x0DE1;
enum uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum uint GL_POLYGON_OFFSET_POINT = 0x2A01;
enum uint GL_POLYGON_OFFSET_LINE = 0x2A02;
enum uint GL_POLYGON_OFFSET_FILL = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum uint GL_TEXTURE_BINDING_1D = 0x8068;
enum uint GL_TEXTURE_BINDING_2D = 0x8069;
enum uint GL_TEXTURE_WIDTH = 0x1000;
enum uint GL_TEXTURE_HEIGHT = 0x1001;
enum uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum uint GL_TEXTURE_BORDER_COLOR = 0x1004;
enum uint GL_TEXTURE_RED_SIZE = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum uint GL_DONT_CARE = 0x1100;
enum uint GL_FASTEST = 0x1101;
enum uint GL_NICEST = 0x1102;
enum uint GL_BYTE = 0x1400;
enum uint GL_UNSIGNED_BYTE = 0x1401;
enum uint GL_SHORT = 0x1402;
enum uint GL_UNSIGNED_SHORT = 0x1403;
enum uint GL_INT = 0x1404;
enum uint GL_UNSIGNED_INT = 0x1405;
enum uint GL_FLOAT = 0x1406;
enum uint GL_DOUBLE = 0x140A;
enum uint GL_STACK_OVERFLOW = 0x0503;
enum uint GL_STACK_UNDERFLOW = 0x0504;
enum uint GL_CLEAR = 0x1500;
enum uint GL_AND = 0x1501;
enum uint GL_AND_REVERSE = 0x1502;
enum uint GL_COPY = 0x1503;
enum uint GL_AND_INVERTED = 0x1504;
enum uint GL_NOOP = 0x1505;
enum uint GL_XOR = 0x1506;
enum uint GL_OR = 0x1507;
enum uint GL_NOR = 0x1508;
enum uint GL_EQUIV = 0x1509;
enum uint GL_INVERT = 0x150A;
enum uint GL_OR_REVERSE = 0x150B;
enum uint GL_COPY_INVERTED = 0x150C;
enum uint GL_OR_INVERTED = 0x150D;
enum uint GL_NAND = 0x150E;
enum uint GL_SET = 0x150F;
enum uint GL_TEXTURE = 0x1702;
enum uint GL_COLOR = 0x1800;
enum uint GL_DEPTH = 0x1801;
enum uint GL_STENCIL = 0x1802;
enum uint GL_STENCIL_INDEX = 0x1901;
enum uint GL_DEPTH_COMPONENT = 0x1902;
enum uint GL_RED = 0x1903;
enum uint GL_GREEN = 0x1904;
enum uint GL_BLUE = 0x1905;
enum uint GL_ALPHA = 0x1906;
enum uint GL_RGB = 0x1907;
enum uint GL_RGBA = 0x1908;
enum uint GL_POINT = 0x1B00;
enum uint GL_LINE = 0x1B01;
enum uint GL_FILL = 0x1B02;
enum uint GL_KEEP = 0x1E00;
enum uint GL_REPLACE = 0x1E01;
enum uint GL_INCR = 0x1E02;
enum uint GL_DECR = 0x1E03;
enum uint GL_VENDOR = 0x1F00;
enum uint GL_RENDERER = 0x1F01;
enum uint GL_VERSION = 0x1F02;
enum uint GL_EXTENSIONS = 0x1F03;
enum uint GL_NEAREST = 0x2600;
enum uint GL_LINEAR = 0x2601;
enum uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum uint GL_TEXTURE_MAG_FILTER = 0x2800;
enum uint GL_TEXTURE_MIN_FILTER = 0x2801;
enum uint GL_TEXTURE_WRAP_S = 0x2802;
enum uint GL_TEXTURE_WRAP_T = 0x2803;
enum uint GL_PROXY_TEXTURE_1D = 0x8063;
enum uint GL_PROXY_TEXTURE_2D = 0x8064;
enum uint GL_REPEAT = 0x2901;
enum uint GL_R3_G3_B2 = 0x2A10;
enum uint GL_RGB4 = 0x804F;
enum uint GL_RGB5 = 0x8050;
enum uint GL_RGB8 = 0x8051;
enum uint GL_RGB10 = 0x8052;
enum uint GL_RGB12 = 0x8053;
enum uint GL_RGB16 = 0x8054;
enum uint GL_RGBA2 = 0x8055;
enum uint GL_RGBA4 = 0x8056;
enum uint GL_RGB5_A1 = 0x8057;
enum uint GL_RGBA8 = 0x8058;
enum uint GL_RGB10_A2 = 0x8059;
enum uint GL_RGBA12 = 0x805A;
enum uint GL_RGBA16 = 0x805B;
enum uint GL_CURRENT_BIT = 0x00000001;
enum uint GL_POINT_BIT = 0x00000002;
enum uint GL_LINE_BIT = 0x00000004;
enum uint GL_POLYGON_BIT = 0x00000008;
enum uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
enum uint GL_PIXEL_MODE_BIT = 0x00000020;
enum uint GL_LIGHTING_BIT = 0x00000040;
enum uint GL_FOG_BIT = 0x00000080;
enum uint GL_ACCUM_BUFFER_BIT = 0x00000200;
enum uint GL_VIEWPORT_BIT = 0x00000800;
enum uint GL_TRANSFORM_BIT = 0x00001000;
enum uint GL_ENABLE_BIT = 0x00002000;
enum uint GL_HINT_BIT = 0x00008000;
enum uint GL_EVAL_BIT = 0x00010000;
enum uint GL_LIST_BIT = 0x00020000;
enum uint GL_TEXTURE_BIT = 0x00040000;
enum uint GL_SCISSOR_BIT = 0x00080000;
enum uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
enum uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
enum uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_QUAD_STRIP = 0x0008;
enum uint GL_POLYGON = 0x0009;
enum uint GL_ACCUM = 0x0100;
enum uint GL_LOAD = 0x0101;
enum uint GL_RETURN = 0x0102;
enum uint GL_MULT = 0x0103;
enum uint GL_ADD = 0x0104;
enum uint GL_AUX0 = 0x0409;
enum uint GL_AUX1 = 0x040A;
enum uint GL_AUX2 = 0x040B;
enum uint GL_AUX3 = 0x040C;
enum uint GL_2D = 0x0600;
enum uint GL_3D = 0x0601;
enum uint GL_3D_COLOR = 0x0602;
enum uint GL_3D_COLOR_TEXTURE = 0x0603;
enum uint GL_4D_COLOR_TEXTURE = 0x0604;
enum uint GL_PASS_THROUGH_TOKEN = 0x0700;
enum uint GL_POINT_TOKEN = 0x0701;
enum uint GL_LINE_TOKEN = 0x0702;
enum uint GL_POLYGON_TOKEN = 0x0703;
enum uint GL_BITMAP_TOKEN = 0x0704;
enum uint GL_DRAW_PIXEL_TOKEN = 0x0705;
enum uint GL_COPY_PIXEL_TOKEN = 0x0706;
enum uint GL_LINE_RESET_TOKEN = 0x0707;
enum uint GL_EXP = 0x0800;
enum uint GL_EXP2 = 0x0801;
enum uint GL_COEFF = 0x0A00;
enum uint GL_ORDER = 0x0A01;
enum uint GL_DOMAIN = 0x0A02;
enum uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
enum uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
enum uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
enum uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
enum uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
enum uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
enum uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
enum uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
enum uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
enum uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
enum uint GL_VERTEX_ARRAY_POINTER = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
enum uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
enum uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
enum uint GL_CURRENT_COLOR = 0x0B00;
enum uint GL_CURRENT_INDEX = 0x0B01;
enum uint GL_CURRENT_NORMAL = 0x0B02;
enum uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
enum uint GL_CURRENT_RASTER_COLOR = 0x0B04;
enum uint GL_CURRENT_RASTER_INDEX = 0x0B05;
enum uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
enum uint GL_CURRENT_RASTER_POSITION = 0x0B07;
enum uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
enum uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
enum uint GL_POINT_SMOOTH = 0x0B10;
enum uint GL_LINE_STIPPLE = 0x0B24;
enum uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
enum uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
enum uint GL_LIST_MODE = 0x0B30;
enum uint GL_MAX_LIST_NESTING = 0x0B31;
enum uint GL_LIST_BASE = 0x0B32;
enum uint GL_LIST_INDEX = 0x0B33;
enum uint GL_POLYGON_STIPPLE = 0x0B42;
enum uint GL_EDGE_FLAG = 0x0B43;
enum uint GL_LIGHTING = 0x0B50;
enum uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
enum uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
enum uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
enum uint GL_SHADE_MODEL = 0x0B54;
enum uint GL_COLOR_MATERIAL_FACE = 0x0B55;
enum uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
enum uint GL_COLOR_MATERIAL = 0x0B57;
enum uint GL_FOG = 0x0B60;
enum uint GL_FOG_INDEX = 0x0B61;
enum uint GL_FOG_DENSITY = 0x0B62;
enum uint GL_FOG_START = 0x0B63;
enum uint GL_FOG_END = 0x0B64;
enum uint GL_FOG_MODE = 0x0B65;
enum uint GL_FOG_COLOR = 0x0B66;
enum uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
enum uint GL_MATRIX_MODE = 0x0BA0;
enum uint GL_NORMALIZE = 0x0BA1;
enum uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
enum uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
enum uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
enum uint GL_MODELVIEW_MATRIX = 0x0BA6;
enum uint GL_PROJECTION_MATRIX = 0x0BA7;
enum uint GL_TEXTURE_MATRIX = 0x0BA8;
enum uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
enum uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
enum uint GL_ALPHA_TEST = 0x0BC0;
enum uint GL_ALPHA_TEST_FUNC = 0x0BC1;
enum uint GL_ALPHA_TEST_REF = 0x0BC2;
enum uint GL_INDEX_LOGIC_OP = 0x0BF1;
enum uint GL_LOGIC_OP = 0x0BF1;
enum uint GL_AUX_BUFFERS = 0x0C00;
enum uint GL_INDEX_CLEAR_VALUE = 0x0C20;
enum uint GL_INDEX_WRITEMASK = 0x0C21;
enum uint GL_INDEX_MODE = 0x0C30;
enum uint GL_RGBA_MODE = 0x0C31;
enum uint GL_RENDER_MODE = 0x0C40;
enum uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
enum uint GL_POINT_SMOOTH_HINT = 0x0C51;
enum uint GL_FOG_HINT = 0x0C54;
enum uint GL_TEXTURE_GEN_S = 0x0C60;
enum uint GL_TEXTURE_GEN_T = 0x0C61;
enum uint GL_TEXTURE_GEN_R = 0x0C62;
enum uint GL_TEXTURE_GEN_Q = 0x0C63;
enum uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
enum uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
enum uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
enum uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
enum uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
enum uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
enum uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
enum uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
enum uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
enum uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
enum uint GL_MAP_COLOR = 0x0D10;
enum uint GL_MAP_STENCIL = 0x0D11;
enum uint GL_INDEX_SHIFT = 0x0D12;
enum uint GL_INDEX_OFFSET = 0x0D13;
enum uint GL_RED_SCALE = 0x0D14;
enum uint GL_RED_BIAS = 0x0D15;
enum uint GL_ZOOM_X = 0x0D16;
enum uint GL_ZOOM_Y = 0x0D17;
enum uint GL_GREEN_SCALE = 0x0D18;
enum uint GL_GREEN_BIAS = 0x0D19;
enum uint GL_BLUE_SCALE = 0x0D1A;
enum uint GL_BLUE_BIAS = 0x0D1B;
enum uint GL_ALPHA_SCALE = 0x0D1C;
enum uint GL_ALPHA_BIAS = 0x0D1D;
enum uint GL_DEPTH_SCALE = 0x0D1E;
enum uint GL_DEPTH_BIAS = 0x0D1F;
enum uint GL_MAX_EVAL_ORDER = 0x0D30;
enum uint GL_MAX_LIGHTS = 0x0D31;
enum uint GL_MAX_CLIP_PLANES = 0x0D32;
enum uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
enum uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
enum uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
enum uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
enum uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
enum uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
enum uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
enum uint GL_INDEX_BITS = 0x0D51;
enum uint GL_RED_BITS = 0x0D52;
enum uint GL_GREEN_BITS = 0x0D53;
enum uint GL_BLUE_BITS = 0x0D54;
enum uint GL_ALPHA_BITS = 0x0D55;
enum uint GL_DEPTH_BITS = 0x0D56;
enum uint GL_STENCIL_BITS = 0x0D57;
enum uint GL_ACCUM_RED_BITS = 0x0D58;
enum uint GL_ACCUM_GREEN_BITS = 0x0D59;
enum uint GL_ACCUM_BLUE_BITS = 0x0D5A;
enum uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
enum uint GL_NAME_STACK_DEPTH = 0x0D70;
enum uint GL_AUTO_NORMAL = 0x0D80;
enum uint GL_MAP1_COLOR_4 = 0x0D90;
enum uint GL_MAP1_INDEX = 0x0D91;
enum uint GL_MAP1_NORMAL = 0x0D92;
enum uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
enum uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
enum uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
enum uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
enum uint GL_MAP1_VERTEX_3 = 0x0D97;
enum uint GL_MAP1_VERTEX_4 = 0x0D98;
enum uint GL_MAP2_COLOR_4 = 0x0DB0;
enum uint GL_MAP2_INDEX = 0x0DB1;
enum uint GL_MAP2_NORMAL = 0x0DB2;
enum uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
enum uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
enum uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
enum uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
enum uint GL_MAP2_VERTEX_3 = 0x0DB7;
enum uint GL_MAP2_VERTEX_4 = 0x0DB8;
enum uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
enum uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
enum uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
enum uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
enum uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
enum uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
enum uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
enum uint GL_VERTEX_ARRAY = 0x8074;
enum uint GL_NORMAL_ARRAY = 0x8075;
enum uint GL_COLOR_ARRAY = 0x8076;
enum uint GL_INDEX_ARRAY = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
enum uint GL_NORMAL_ARRAY_TYPE = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
enum uint GL_COLOR_ARRAY_SIZE = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE = 0x8083;
enum uint GL_INDEX_ARRAY_TYPE = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE = 0x8086;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
enum uint GL_TEXTURE_COMPONENTS = 0x1003;
enum uint GL_TEXTURE_BORDER = 0x1005;
enum uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
enum uint GL_TEXTURE_PRIORITY = 0x8066;
enum uint GL_TEXTURE_RESIDENT = 0x8067;
enum uint GL_AMBIENT = 0x1200;
enum uint GL_DIFFUSE = 0x1201;
enum uint GL_SPECULAR = 0x1202;
enum uint GL_POSITION = 0x1203;
enum uint GL_SPOT_DIRECTION = 0x1204;
enum uint GL_SPOT_EXPONENT = 0x1205;
enum uint GL_SPOT_CUTOFF = 0x1206;
enum uint GL_CONSTANT_ATTENUATION = 0x1207;
enum uint GL_LINEAR_ATTENUATION = 0x1208;
enum uint GL_QUADRATIC_ATTENUATION = 0x1209;
enum uint GL_COMPILE = 0x1300;
enum uint GL_COMPILE_AND_EXECUTE = 0x1301;
enum uint GL_2_BYTES = 0x1407;
enum uint GL_3_BYTES = 0x1408;
enum uint GL_4_BYTES = 0x1409;
enum uint GL_EMISSION = 0x1600;
enum uint GL_SHININESS = 0x1601;
enum uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
enum uint GL_COLOR_INDEXES = 0x1603;
enum uint GL_MODELVIEW = 0x1700;
enum uint GL_PROJECTION = 0x1701;
enum uint GL_COLOR_INDEX = 0x1900;
enum uint GL_LUMINANCE = 0x1909;
enum uint GL_LUMINANCE_ALPHA = 0x190A;
enum uint GL_BITMAP = 0x1A00;
enum uint GL_RENDER = 0x1C00;
enum uint GL_FEEDBACK = 0x1C01;
enum uint GL_SELECT = 0x1C02;
enum uint GL_FLAT = 0x1D00;
enum uint GL_SMOOTH = 0x1D01;
enum uint GL_S = 0x2000;
enum uint GL_T = 0x2001;
enum uint GL_R = 0x2002;
enum uint GL_Q = 0x2003;
enum uint GL_MODULATE = 0x2100;
enum uint GL_DECAL = 0x2101;
enum uint GL_TEXTURE_ENV_MODE = 0x2200;
enum uint GL_TEXTURE_ENV_COLOR = 0x2201;
enum uint GL_TEXTURE_ENV = 0x2300;
enum uint GL_EYE_LINEAR = 0x2400;
enum uint GL_OBJECT_LINEAR = 0x2401;
enum uint GL_SPHERE_MAP = 0x2402;
enum uint GL_TEXTURE_GEN_MODE = 0x2500;
enum uint GL_OBJECT_PLANE = 0x2501;
enum uint GL_EYE_PLANE = 0x2502;
enum uint GL_CLAMP = 0x2900;
enum uint GL_ALPHA4 = 0x803B;
enum uint GL_ALPHA8 = 0x803C;
enum uint GL_ALPHA12 = 0x803D;
enum uint GL_ALPHA16 = 0x803E;
enum uint GL_LUMINANCE4 = 0x803F;
enum uint GL_LUMINANCE8 = 0x8040;
enum uint GL_LUMINANCE12 = 0x8041;
enum uint GL_LUMINANCE16 = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4 = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2 = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8 = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4 = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12 = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16 = 0x8048;
enum uint GL_INTENSITY = 0x8049;
enum uint GL_INTENSITY4 = 0x804A;
enum uint GL_INTENSITY8 = 0x804B;
enum uint GL_INTENSITY12 = 0x804C;
enum uint GL_INTENSITY16 = 0x804D;
enum uint GL_V2F = 0x2A20;
enum uint GL_V3F = 0x2A21;
enum uint GL_C4UB_V2F = 0x2A22;
enum uint GL_C4UB_V3F = 0x2A23;
enum uint GL_C3F_V3F = 0x2A24;
enum uint GL_N3F_V3F = 0x2A25;
enum uint GL_C4F_N3F_V3F = 0x2A26;
enum uint GL_T2F_V3F = 0x2A27;
enum uint GL_T4F_V4F = 0x2A28;
enum uint GL_T2F_C4UB_V3F = 0x2A29;
enum uint GL_T2F_C3F_V3F = 0x2A2A;
enum uint GL_T2F_N3F_V3F = 0x2A2B;
enum uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
enum uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
enum uint GL_CLIP_PLANE0 = 0x3000;
enum uint GL_CLIP_PLANE1 = 0x3001;
enum uint GL_CLIP_PLANE2 = 0x3002;
enum uint GL_CLIP_PLANE3 = 0x3003;
enum uint GL_CLIP_PLANE4 = 0x3004;
enum uint GL_CLIP_PLANE5 = 0x3005;
enum uint GL_LIGHT0 = 0x4000;
enum uint GL_LIGHT1 = 0x4001;
enum uint GL_LIGHT2 = 0x4002;
enum uint GL_LIGHT3 = 0x4003;
enum uint GL_LIGHT4 = 0x4004;
enum uint GL_LIGHT5 = 0x4005;
enum uint GL_LIGHT6 = 0x4006;
enum uint GL_LIGHT7 = 0x4007;
enum uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
enum uint GL_TEXTURE_BINDING_3D = 0x806A;
enum uint GL_PACK_SKIP_IMAGES = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum uint GL_TEXTURE_3D = 0x806F;
enum uint GL_PROXY_TEXTURE_3D = 0x8070;
enum uint GL_TEXTURE_DEPTH = 0x8071;
enum uint GL_TEXTURE_WRAP_R = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
enum uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
enum uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
enum uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
enum uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum uint GL_BGR = 0x80E0;
enum uint GL_BGRA = 0x80E1;
enum uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum uint GL_CLAMP_TO_EDGE = 0x812F;
enum uint GL_TEXTURE_MIN_LOD = 0x813A;
enum uint GL_TEXTURE_MAX_LOD = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL = 0x813D;
enum uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
enum uint GL_RESCALE_NORMAL = 0x803A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
enum uint GL_SINGLE_COLOR = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
enum uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
enum uint GL_TEXTURE0 = 0x84C0;
enum uint GL_TEXTURE1 = 0x84C1;
enum uint GL_TEXTURE2 = 0x84C2;
enum uint GL_TEXTURE3 = 0x84C3;
enum uint GL_TEXTURE4 = 0x84C4;
enum uint GL_TEXTURE5 = 0x84C5;
enum uint GL_TEXTURE6 = 0x84C6;
enum uint GL_TEXTURE7 = 0x84C7;
enum uint GL_TEXTURE8 = 0x84C8;
enum uint GL_TEXTURE9 = 0x84C9;
enum uint GL_TEXTURE10 = 0x84CA;
enum uint GL_TEXTURE11 = 0x84CB;
enum uint GL_TEXTURE12 = 0x84CC;
enum uint GL_TEXTURE13 = 0x84CD;
enum uint GL_TEXTURE14 = 0x84CE;
enum uint GL_TEXTURE15 = 0x84CF;
enum uint GL_TEXTURE16 = 0x84D0;
enum uint GL_TEXTURE17 = 0x84D1;
enum uint GL_TEXTURE18 = 0x84D2;
enum uint GL_TEXTURE19 = 0x84D3;
enum uint GL_TEXTURE20 = 0x84D4;
enum uint GL_TEXTURE21 = 0x84D5;
enum uint GL_TEXTURE22 = 0x84D6;
enum uint GL_TEXTURE23 = 0x84D7;
enum uint GL_TEXTURE24 = 0x84D8;
enum uint GL_TEXTURE25 = 0x84D9;
enum uint GL_TEXTURE26 = 0x84DA;
enum uint GL_TEXTURE27 = 0x84DB;
enum uint GL_TEXTURE28 = 0x84DC;
enum uint GL_TEXTURE29 = 0x84DD;
enum uint GL_TEXTURE30 = 0x84DE;
enum uint GL_TEXTURE31 = 0x84DF;
enum uint GL_ACTIVE_TEXTURE = 0x84E0;
enum uint GL_MULTISAMPLE = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
enum uint GL_SAMPLE_COVERAGE = 0x80A0;
enum uint GL_SAMPLE_BUFFERS = 0x80A8;
enum uint GL_SAMPLES = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum uint GL_TEXTURE_CUBE_MAP = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum uint GL_COMPRESSED_RGB = 0x84ED;
enum uint GL_COMPRESSED_RGBA = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum uint GL_CLAMP_TO_BORDER = 0x812D;
enum uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS = 0x84E2;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
enum uint GL_MULTISAMPLE_BIT = 0x20000000;
enum uint GL_NORMAL_MAP = 0x8511;
enum uint GL_REFLECTION_MAP = 0x8512;
enum uint GL_COMPRESSED_ALPHA = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY = 0x84EC;
enum uint GL_COMBINE = 0x8570;
enum uint GL_COMBINE_RGB = 0x8571;
enum uint GL_COMBINE_ALPHA = 0x8572;
enum uint GL_SOURCE0_RGB = 0x8580;
enum uint GL_SOURCE1_RGB = 0x8581;
enum uint GL_SOURCE2_RGB = 0x8582;
enum uint GL_SOURCE0_ALPHA = 0x8588;
enum uint GL_SOURCE1_ALPHA = 0x8589;
enum uint GL_SOURCE2_ALPHA = 0x858A;
enum uint GL_OPERAND0_RGB = 0x8590;
enum uint GL_OPERAND1_RGB = 0x8591;
enum uint GL_OPERAND2_RGB = 0x8592;
enum uint GL_OPERAND0_ALPHA = 0x8598;
enum uint GL_OPERAND1_ALPHA = 0x8599;
enum uint GL_OPERAND2_ALPHA = 0x859A;
enum uint GL_RGB_SCALE = 0x8573;
enum uint GL_ADD_SIGNED = 0x8574;
enum uint GL_INTERPOLATE = 0x8575;
enum uint GL_SUBTRACT = 0x84E7;
enum uint GL_CONSTANT = 0x8576;
enum uint GL_PRIMARY_COLOR = 0x8577;
enum uint GL_PREVIOUS = 0x8578;
enum uint GL_DOT3_RGB = 0x86AE;
enum uint GL_DOT3_RGBA = 0x86AF;
enum uint GL_BLEND_DST_RGB = 0x80C8;
enum uint GL_BLEND_SRC_RGB = 0x80C9;
enum uint GL_BLEND_DST_ALPHA = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA = 0x80CB;
enum uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
enum uint GL_DEPTH_COMPONENT16 = 0x81A5;
enum uint GL_DEPTH_COMPONENT24 = 0x81A6;
enum uint GL_DEPTH_COMPONENT32 = 0x81A7;
enum uint GL_MIRRORED_REPEAT = 0x8370;
enum uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum uint GL_TEXTURE_LOD_BIAS = 0x8501;
enum uint GL_INCR_WRAP = 0x8507;
enum uint GL_DECR_WRAP = 0x8508;
enum uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum uint GL_TEXTURE_COMPARE_MODE = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
enum uint GL_POINT_SIZE_MIN = 0x8126;
enum uint GL_POINT_SIZE_MAX = 0x8127;
enum uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
enum uint GL_GENERATE_MIPMAP = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT = 0x8192;
enum uint GL_FOG_COORDINATE_SOURCE = 0x8450;
enum uint GL_FOG_COORDINATE = 0x8451;
enum uint GL_FRAGMENT_DEPTH = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY = 0x8457;
enum uint GL_COLOR_SUM = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY = 0x845E;
enum uint GL_TEXTURE_FILTER_CONTROL = 0x8500;
enum uint GL_DEPTH_TEXTURE_MODE = 0x884B;
enum uint GL_COMPARE_R_TO_TEXTURE = 0x884E;
enum uint GL_FUNC_ADD = 0x8006;
enum uint GL_FUNC_SUBTRACT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
enum uint GL_MIN = 0x8007;
enum uint GL_MAX = 0x8008;
enum uint GL_CONSTANT_COLOR = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum uint GL_CONSTANT_ALPHA = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
enum uint GL_BUFFER_SIZE = 0x8764;
enum uint GL_BUFFER_USAGE = 0x8765;
enum uint GL_QUERY_COUNTER_BITS = 0x8864;
enum uint GL_CURRENT_QUERY = 0x8865;
enum uint GL_QUERY_RESULT = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum uint GL_ARRAY_BUFFER = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum uint GL_READ_ONLY = 0x88B8;
enum uint GL_WRITE_ONLY = 0x88B9;
enum uint GL_READ_WRITE = 0x88BA;
enum uint GL_BUFFER_ACCESS = 0x88BB;
enum uint GL_BUFFER_MAPPED = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER = 0x88BD;
enum uint GL_STREAM_DRAW = 0x88E0;
enum uint GL_STREAM_READ = 0x88E1;
enum uint GL_STREAM_COPY = 0x88E2;
enum uint GL_STATIC_DRAW = 0x88E4;
enum uint GL_STATIC_READ = 0x88E5;
enum uint GL_STATIC_COPY = 0x88E6;
enum uint GL_DYNAMIC_DRAW = 0x88E8;
enum uint GL_DYNAMIC_READ = 0x88E9;
enum uint GL_DYNAMIC_COPY = 0x88EA;
enum uint GL_SAMPLES_PASSED = 0x8914;
enum uint GL_SRC1_ALPHA = 0x8589;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
enum uint GL_FOG_COORD_SRC = 0x8450;
enum uint GL_FOG_COORD = 0x8451;
enum uint GL_CURRENT_FOG_COORD = 0x8453;
enum uint GL_FOG_COORD_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORD_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORD_ARRAY = 0x8457;
enum uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_SRC0_RGB = 0x8580;
enum uint GL_SRC1_RGB = 0x8581;
enum uint GL_SRC2_RGB = 0x8582;
enum uint GL_SRC0_ALPHA = 0x8588;
enum uint GL_SRC2_ALPHA = 0x858A;
enum uint GL_BLEND_EQUATION_RGB = 0x8009;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum uint GL_STENCIL_BACK_FUNC = 0x8800;
enum uint GL_STENCIL_BACK_FAIL = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum uint GL_MAX_DRAW_BUFFERS = 0x8824;
enum uint GL_DRAW_BUFFER0 = 0x8825;
enum uint GL_DRAW_BUFFER1 = 0x8826;
enum uint GL_DRAW_BUFFER2 = 0x8827;
enum uint GL_DRAW_BUFFER3 = 0x8828;
enum uint GL_DRAW_BUFFER4 = 0x8829;
enum uint GL_DRAW_BUFFER5 = 0x882A;
enum uint GL_DRAW_BUFFER6 = 0x882B;
enum uint GL_DRAW_BUFFER7 = 0x882C;
enum uint GL_DRAW_BUFFER8 = 0x882D;
enum uint GL_DRAW_BUFFER9 = 0x882E;
enum uint GL_DRAW_BUFFER10 = 0x882F;
enum uint GL_DRAW_BUFFER11 = 0x8830;
enum uint GL_DRAW_BUFFER12 = 0x8831;
enum uint GL_DRAW_BUFFER13 = 0x8832;
enum uint GL_DRAW_BUFFER14 = 0x8833;
enum uint GL_DRAW_BUFFER15 = 0x8834;
enum uint GL_BLEND_EQUATION_ALPHA = 0x883D;
enum uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum uint GL_FRAGMENT_SHADER = 0x8B30;
enum uint GL_VERTEX_SHADER = 0x8B31;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum uint GL_SHADER_TYPE = 0x8B4F;
enum uint GL_FLOAT_VEC2 = 0x8B50;
enum uint GL_FLOAT_VEC3 = 0x8B51;
enum uint GL_FLOAT_VEC4 = 0x8B52;
enum uint GL_INT_VEC2 = 0x8B53;
enum uint GL_INT_VEC3 = 0x8B54;
enum uint GL_INT_VEC4 = 0x8B55;
enum uint GL_BOOL = 0x8B56;
enum uint GL_BOOL_VEC2 = 0x8B57;
enum uint GL_BOOL_VEC3 = 0x8B58;
enum uint GL_BOOL_VEC4 = 0x8B59;
enum uint GL_FLOAT_MAT2 = 0x8B5A;
enum uint GL_FLOAT_MAT3 = 0x8B5B;
enum uint GL_FLOAT_MAT4 = 0x8B5C;
enum uint GL_SAMPLER_1D = 0x8B5D;
enum uint GL_SAMPLER_2D = 0x8B5E;
enum uint GL_SAMPLER_3D = 0x8B5F;
enum uint GL_SAMPLER_CUBE = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW = 0x8B62;
enum uint GL_DELETE_STATUS = 0x8B80;
enum uint GL_COMPILE_STATUS = 0x8B81;
enum uint GL_LINK_STATUS = 0x8B82;
enum uint GL_VALIDATE_STATUS = 0x8B83;
enum uint GL_INFO_LOG_LENGTH = 0x8B84;
enum uint GL_ATTACHED_SHADERS = 0x8B85;
enum uint GL_ACTIVE_UNIFORMS = 0x8B86;
enum uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum uint GL_CURRENT_PROGRAM = 0x8B8D;
enum uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
enum uint GL_LOWER_LEFT = 0x8CA1;
enum uint GL_UPPER_LEFT = 0x8CA2;
enum uint GL_STENCIL_BACK_REF = 0x8CA3;
enum uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
enum uint GL_POINT_SPRITE = 0x8861;
enum uint GL_COORD_REPLACE = 0x8862;
enum uint GL_MAX_TEXTURE_COORDS = 0x8871;
enum uint GL_PIXEL_PACK_BUFFER = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum uint GL_FLOAT_MAT2x3 = 0x8B65;
enum uint GL_FLOAT_MAT2x4 = 0x8B66;
enum uint GL_FLOAT_MAT3x2 = 0x8B67;
enum uint GL_FLOAT_MAT3x4 = 0x8B68;
enum uint GL_FLOAT_MAT4x2 = 0x8B69;
enum uint GL_FLOAT_MAT4x3 = 0x8B6A;
enum uint GL_SRGB = 0x8C40;
enum uint GL_SRGB8 = 0x8C41;
enum uint GL_SRGB_ALPHA = 0x8C42;
enum uint GL_SRGB8_ALPHA8 = 0x8C43;
enum uint GL_COMPRESSED_SRGB = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
enum uint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
enum uint GL_SLUMINANCE_ALPHA = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
enum uint GL_SLUMINANCE = 0x8C46;
enum uint GL_SLUMINANCE8 = 0x8C47;
enum uint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
enum uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum uint GL_CLIP_DISTANCE0 = 0x3000;
enum uint GL_CLIP_DISTANCE1 = 0x3001;
enum uint GL_CLIP_DISTANCE2 = 0x3002;
enum uint GL_CLIP_DISTANCE3 = 0x3003;
enum uint GL_CLIP_DISTANCE4 = 0x3004;
enum uint GL_CLIP_DISTANCE5 = 0x3005;
enum uint GL_CLIP_DISTANCE6 = 0x3006;
enum uint GL_CLIP_DISTANCE7 = 0x3007;
enum uint GL_MAX_CLIP_DISTANCES = 0x0D32;
enum uint GL_MAJOR_VERSION = 0x821B;
enum uint GL_MINOR_VERSION = 0x821C;
enum uint GL_NUM_EXTENSIONS = 0x821D;
enum uint GL_CONTEXT_FLAGS = 0x821E;
enum uint GL_COMPRESSED_RED = 0x8225;
enum uint GL_COMPRESSED_RG = 0x8226;
enum uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
enum uint GL_RGBA32F = 0x8814;
enum uint GL_RGB32F = 0x8815;
enum uint GL_RGBA16F = 0x881A;
enum uint GL_RGB16F = 0x881B;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum uint GL_CLAMP_READ_COLOR = 0x891C;
enum uint GL_FIXED_ONLY = 0x891D;
enum uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum uint GL_TEXTURE_1D_ARRAY = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum uint GL_R11F_G11F_B10F = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum uint GL_RGB9_E5 = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum uint GL_PRIMITIVES_GENERATED = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum uint GL_RASTERIZER_DISCARD = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum uint GL_RGBA32UI = 0x8D70;
enum uint GL_RGB32UI = 0x8D71;
enum uint GL_RGBA16UI = 0x8D76;
enum uint GL_RGB16UI = 0x8D77;
enum uint GL_RGBA8UI = 0x8D7C;
enum uint GL_RGB8UI = 0x8D7D;
enum uint GL_RGBA32I = 0x8D82;
enum uint GL_RGB32I = 0x8D83;
enum uint GL_RGBA16I = 0x8D88;
enum uint GL_RGB16I = 0x8D89;
enum uint GL_RGBA8I = 0x8D8E;
enum uint GL_RGB8I = 0x8D8F;
enum uint GL_RED_INTEGER = 0x8D94;
enum uint GL_GREEN_INTEGER = 0x8D95;
enum uint GL_BLUE_INTEGER = 0x8D96;
enum uint GL_RGB_INTEGER = 0x8D98;
enum uint GL_RGBA_INTEGER = 0x8D99;
enum uint GL_BGR_INTEGER = 0x8D9A;
enum uint GL_BGRA_INTEGER = 0x8D9B;
enum uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum uint GL_INT_SAMPLER_1D = 0x8DC9;
enum uint GL_INT_SAMPLER_2D = 0x8DCA;
enum uint GL_INT_SAMPLER_3D = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE = 0x8DCC;
enum uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum uint GL_QUERY_WAIT = 0x8E13;
enum uint GL_QUERY_NO_WAIT = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
enum uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum uint GL_BUFFER_MAP_LENGTH = 0x9120;
enum uint GL_BUFFER_MAP_OFFSET = 0x9121;
enum uint GL_DEPTH_COMPONENT32F = 0x8CAC;
enum uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum uint GL_DEPTH_STENCIL = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8 = 0x84FA;
enum uint GL_DEPTH24_STENCIL8 = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum uint GL_TEXTURE_RED_TYPE = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED = 0x8C17;
enum uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING = 0x8CA7;
enum uint GL_READ_FRAMEBUFFER = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13 = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum uint GL_COLOR_ATTACHMENT16 = 0x8CF0;
enum uint GL_COLOR_ATTACHMENT17 = 0x8CF1;
enum uint GL_COLOR_ATTACHMENT18 = 0x8CF2;
enum uint GL_COLOR_ATTACHMENT19 = 0x8CF3;
enum uint GL_COLOR_ATTACHMENT20 = 0x8CF4;
enum uint GL_COLOR_ATTACHMENT21 = 0x8CF5;
enum uint GL_COLOR_ATTACHMENT22 = 0x8CF6;
enum uint GL_COLOR_ATTACHMENT23 = 0x8CF7;
enum uint GL_COLOR_ATTACHMENT24 = 0x8CF8;
enum uint GL_COLOR_ATTACHMENT25 = 0x8CF9;
enum uint GL_COLOR_ATTACHMENT26 = 0x8CFA;
enum uint GL_COLOR_ATTACHMENT27 = 0x8CFB;
enum uint GL_COLOR_ATTACHMENT28 = 0x8CFC;
enum uint GL_COLOR_ATTACHMENT29 = 0x8CFD;
enum uint GL_COLOR_ATTACHMENT30 = 0x8CFE;
enum uint GL_COLOR_ATTACHMENT31 = 0x8CFF;
enum uint GL_DEPTH_ATTACHMENT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT = 0x8D20;
enum uint GL_FRAMEBUFFER = 0x8D40;
enum uint GL_RENDERBUFFER = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum uint GL_STENCIL_INDEX1 = 0x8D46;
enum uint GL_STENCIL_INDEX4 = 0x8D47;
enum uint GL_STENCIL_INDEX8 = 0x8D48;
enum uint GL_STENCIL_INDEX16 = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum uint GL_MAX_SAMPLES = 0x8D57;
enum uint GL_INDEX = 0x8222;
enum uint GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
enum uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
enum uint GL_HALF_FLOAT = 0x140B;
enum uint GL_MAP_READ_BIT = 0x0001;
enum uint GL_MAP_WRITE_BIT = 0x0002;
enum uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
enum uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
enum uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
enum uint GL_RG = 0x8227;
enum uint GL_RG_INTEGER = 0x8228;
enum uint GL_R8 = 0x8229;
enum uint GL_R16 = 0x822A;
enum uint GL_RG8 = 0x822B;
enum uint GL_RG16 = 0x822C;
enum uint GL_R16F = 0x822D;
enum uint GL_R32F = 0x822E;
enum uint GL_RG16F = 0x822F;
enum uint GL_RG32F = 0x8230;
enum uint GL_R8I = 0x8231;
enum uint GL_R8UI = 0x8232;
enum uint GL_R16I = 0x8233;
enum uint GL_R16UI = 0x8234;
enum uint GL_R32I = 0x8235;
enum uint GL_R32UI = 0x8236;
enum uint GL_RG8I = 0x8237;
enum uint GL_RG8UI = 0x8238;
enum uint GL_RG16I = 0x8239;
enum uint GL_RG16UI = 0x823A;
enum uint GL_RG32I = 0x823B;
enum uint GL_RG32UI = 0x823C;
enum uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
enum uint GL_CLAMP_VERTEX_COLOR = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR = 0x891B;
enum uint GL_ALPHA_INTEGER = 0x8D97;
enum uint GL_SAMPLER_2D_RECT = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
enum uint GL_SAMPLER_BUFFER = 0x8DC2;
enum uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
enum uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
enum uint GL_TEXTURE_BUFFER = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
enum uint GL_TEXTURE_RECTANGLE = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
enum uint GL_R8_SNORM = 0x8F94;
enum uint GL_RG8_SNORM = 0x8F95;
enum uint GL_RGB8_SNORM = 0x8F96;
enum uint GL_RGBA8_SNORM = 0x8F97;
enum uint GL_R16_SNORM = 0x8F98;
enum uint GL_RG16_SNORM = 0x8F99;
enum uint GL_RGB16_SNORM = 0x8F9A;
enum uint GL_RGBA16_SNORM = 0x8F9B;
enum uint GL_SIGNED_NORMALIZED = 0x8F9C;
enum uint GL_PRIMITIVE_RESTART = 0x8F9D;
enum uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
enum uint GL_COPY_READ_BUFFER = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER = 0x8F37;
enum uint GL_UNIFORM_BUFFER = 0x8A11;
enum uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum uint GL_UNIFORM_BUFFER_START = 0x8A29;
enum uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
enum uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
enum uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum uint GL_UNIFORM_TYPE = 0x8A37;
enum uint GL_UNIFORM_SIZE = 0x8A38;
enum uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum uint GL_UNIFORM_OFFSET = 0x8A3B;
enum uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
enum uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
enum uint GL_LINES_ADJACENCY = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
enum uint GL_GEOMETRY_SHADER = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
enum uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
enum uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
enum uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
enum uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
enum uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum uint GL_CONTEXT_PROFILE_MASK = 0x9126;
enum uint GL_DEPTH_CLAMP = 0x864F;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
enum uint GL_PROVOKING_VERTEX = 0x8E4F;
enum uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
enum uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum uint GL_OBJECT_TYPE = 0x9112;
enum uint GL_SYNC_CONDITION = 0x9113;
enum uint GL_SYNC_STATUS = 0x9114;
enum uint GL_SYNC_FLAGS = 0x9115;
enum uint GL_SYNC_FENCE = 0x9116;
enum uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum uint GL_UNSIGNALED = 0x9118;
enum uint GL_SIGNALED = 0x9119;
enum uint GL_ALREADY_SIGNALED = 0x911A;
enum uint GL_TIMEOUT_EXPIRED = 0x911B;
enum uint GL_CONDITION_SATISFIED = 0x911C;
enum uint GL_WAIT_FAILED = 0x911D;
enum uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum uint GL_SAMPLE_POSITION = 0x8E50;
enum uint GL_SAMPLE_MASK = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE = 0x8E52;
enum uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
enum uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
enum uint GL_TEXTURE_SAMPLES = 0x9106;
enum uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
enum uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum uint GL_MAX_INTEGER_SAMPLES = 0x9110;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
enum uint GL_SRC1_COLOR = 0x88F9;
enum uint GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
enum uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
enum uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
enum uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
enum uint GL_SAMPLER_BINDING = 0x8919;
enum uint GL_RGB10_A2UI = 0x906F;
enum uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
enum uint GL_TIME_ELAPSED = 0x88BF;
enum uint GL_TIMESTAMP = 0x8E28;
enum uint GL_INT_2_10_10_10_REV = 0x8D9F;
enum uint GL_SAMPLE_SHADING = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
enum uint GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
enum uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
enum uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
enum uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
enum uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
enum uint GL_MAX_VERTEX_STREAMS = 0x8E71;
enum uint GL_DOUBLE_VEC2 = 0x8FFC;
enum uint GL_DOUBLE_VEC3 = 0x8FFD;
enum uint GL_DOUBLE_VEC4 = 0x8FFE;
enum uint GL_DOUBLE_MAT2 = 0x8F46;
enum uint GL_DOUBLE_MAT3 = 0x8F47;
enum uint GL_DOUBLE_MAT4 = 0x8F48;
enum uint GL_DOUBLE_MAT2x3 = 0x8F49;
enum uint GL_DOUBLE_MAT2x4 = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2 = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4 = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2 = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3 = 0x8F4E;
enum uint GL_ACTIVE_SUBROUTINES = 0x8DE5;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
enum uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
enum uint GL_MAX_SUBROUTINES = 0x8DE7;
enum uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
enum uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
enum uint GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
enum uint GL_PATCHES = 0x000E;
enum uint GL_PATCH_VERTICES = 0x8E72;
enum uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
enum uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
enum uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
enum uint GL_TESS_GEN_MODE = 0x8E76;
enum uint GL_TESS_GEN_SPACING = 0x8E77;
enum uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
enum uint GL_TESS_GEN_POINT_MODE = 0x8E79;
enum uint GL_ISOLINES = 0x8E7A;
enum uint GL_FRACTIONAL_ODD = 0x8E7B;
enum uint GL_FRACTIONAL_EVEN = 0x8E7C;
enum uint GL_MAX_PATCH_VERTICES = 0x8E7D;
enum uint GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
enum uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
enum uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
enum uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
enum uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
enum uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
enum uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
enum uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
enum uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
enum uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
enum uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
enum uint GL_TESS_EVALUATION_SHADER = 0x8E87;
enum uint GL_TESS_CONTROL_SHADER = 0x8E88;
enum uint GL_TRANSFORM_FEEDBACK = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
enum uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
enum uint GL_FIXED = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
enum uint GL_LOW_FLOAT = 0x8DF0;
enum uint GL_MEDIUM_FLOAT = 0x8DF1;
enum uint GL_HIGH_FLOAT = 0x8DF2;
enum uint GL_LOW_INT = 0x8DF3;
enum uint GL_MEDIUM_INT = 0x8DF4;
enum uint GL_HIGH_INT = 0x8DF5;
enum uint GL_SHADER_COMPILER = 0x8DFA;
enum uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
enum uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
enum uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
enum uint GL_MAX_VARYING_VECTORS = 0x8DFC;
enum uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
enum uint GL_RGB565 = 0x8D62;
enum uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
enum uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
enum uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
enum uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
enum uint GL_VERTEX_SHADER_BIT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT = 0x00000002;
enum uint GL_GEOMETRY_SHADER_BIT = 0x00000004;
enum uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
enum uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
enum uint GL_ALL_SHADER_BITS = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE = 0x8258;
enum uint GL_ACTIVE_PROGRAM = 0x8259;
enum uint GL_PROGRAM_PIPELINE_BINDING = 0x825A;
enum uint GL_MAX_VIEWPORTS = 0x825B;
enum uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
enum uint GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
enum uint GL_LAYER_PROVOKING_VERTEX = 0x825E;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
enum uint GL_UNDEFINED_VERTEX = 0x8260;
enum uint GL_COPY_READ_BUFFER_BINDING = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
enum uint GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
enum uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
enum uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
enum uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
enum uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
enum uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
enum uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
enum uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
enum uint GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
enum uint GL_NUM_SAMPLE_COUNTS = 0x9380;
enum uint GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
enum uint GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
enum uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
enum uint GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
enum uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
enum uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
enum uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
enum uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
enum uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
enum uint GL_MAX_IMAGE_UNITS = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS = 0x8F3E;
enum uint GL_IMAGE_1D = 0x904C;
enum uint GL_IMAGE_2D = 0x904D;
enum uint GL_IMAGE_3D = 0x904E;
enum uint GL_IMAGE_2D_RECT = 0x904F;
enum uint GL_IMAGE_CUBE = 0x9050;
enum uint GL_IMAGE_BUFFER = 0x9051;
enum uint GL_IMAGE_1D_ARRAY = 0x9052;
enum uint GL_IMAGE_2D_ARRAY = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
enum uint GL_INT_IMAGE_1D = 0x9057;
enum uint GL_INT_IMAGE_2D = 0x9058;
enum uint GL_INT_IMAGE_3D = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT = 0x905A;
enum uint GL_INT_IMAGE_CUBE = 0x905B;
enum uint GL_INT_IMAGE_BUFFER = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT = 0x906E;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
enum uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
enum uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
enum uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
enum uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
enum uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
enum uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
enum uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
enum uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
enum uint GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
enum uint GL_COMPRESSED_RGB8_ETC2 = 0x9274;
enum uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
enum uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
enum uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
enum uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
enum uint GL_COMPRESSED_R11_EAC = 0x9270;
enum uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
enum uint GL_COMPRESSED_RG11_EAC = 0x9272;
enum uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
enum uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
enum uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
enum uint GL_MAX_ELEMENT_INDEX = 0x8D6B;
enum uint GL_COMPUTE_SHADER = 0x91B9;
enum uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
enum uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
enum uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
enum uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
enum uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
enum uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
enum uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
enum uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
enum uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
enum uint GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
enum uint GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
enum uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
enum uint GL_COMPUTE_SHADER_BIT = 0x00000020;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
enum uint GL_DEBUG_SOURCE_API = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW = 0x9148;
enum uint GL_DEBUG_TYPE_MARKER = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
enum uint GL_BUFFER = 0x82E0;
enum uint GL_SHADER = 0x82E1;
enum uint GL_PROGRAM = 0x82E2;
enum uint GL_QUERY = 0x82E3;
enum uint GL_PROGRAM_PIPELINE = 0x82E4;
enum uint GL_SAMPLER = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH = 0x82E8;
enum uint GL_DEBUG_OUTPUT = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
enum uint GL_MAX_UNIFORM_LOCATIONS = 0x826E;
enum uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
enum uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
enum uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
enum uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
enum uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
enum uint GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
enum uint GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
enum uint GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
enum uint GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
enum uint GL_INTERNALFORMAT_SUPPORTED = 0x826F;
enum uint GL_INTERNALFORMAT_PREFERRED = 0x8270;
enum uint GL_INTERNALFORMAT_RED_SIZE = 0x8271;
enum uint GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
enum uint GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
enum uint GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
enum uint GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
enum uint GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
enum uint GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
enum uint GL_INTERNALFORMAT_RED_TYPE = 0x8278;
enum uint GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
enum uint GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
enum uint GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
enum uint GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
enum uint GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
enum uint GL_MAX_WIDTH = 0x827E;
enum uint GL_MAX_HEIGHT = 0x827F;
enum uint GL_MAX_DEPTH = 0x8280;
enum uint GL_MAX_LAYERS = 0x8281;
enum uint GL_MAX_COMBINED_DIMENSIONS = 0x8282;
enum uint GL_COLOR_COMPONENTS = 0x8283;
enum uint GL_DEPTH_COMPONENTS = 0x8284;
enum uint GL_STENCIL_COMPONENTS = 0x8285;
enum uint GL_COLOR_RENDERABLE = 0x8286;
enum uint GL_DEPTH_RENDERABLE = 0x8287;
enum uint GL_STENCIL_RENDERABLE = 0x8288;
enum uint GL_FRAMEBUFFER_RENDERABLE = 0x8289;
enum uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
enum uint GL_FRAMEBUFFER_BLEND = 0x828B;
enum uint GL_READ_PIXELS = 0x828C;
enum uint GL_READ_PIXELS_FORMAT = 0x828D;
enum uint GL_READ_PIXELS_TYPE = 0x828E;
enum uint GL_TEXTURE_IMAGE_FORMAT = 0x828F;
enum uint GL_TEXTURE_IMAGE_TYPE = 0x8290;
enum uint GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
enum uint GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
enum uint GL_MIPMAP = 0x8293;
enum uint GL_MANUAL_GENERATE_MIPMAP = 0x8294;
enum uint GL_AUTO_GENERATE_MIPMAP = 0x8295;
enum uint GL_COLOR_ENCODING = 0x8296;
enum uint GL_SRGB_READ = 0x8297;
enum uint GL_SRGB_WRITE = 0x8298;
enum uint GL_FILTER = 0x829A;
enum uint GL_VERTEX_TEXTURE = 0x829B;
enum uint GL_TESS_CONTROL_TEXTURE = 0x829C;
enum uint GL_TESS_EVALUATION_TEXTURE = 0x829D;
enum uint GL_GEOMETRY_TEXTURE = 0x829E;
enum uint GL_FRAGMENT_TEXTURE = 0x829F;
enum uint GL_COMPUTE_TEXTURE = 0x82A0;
enum uint GL_TEXTURE_SHADOW = 0x82A1;
enum uint GL_TEXTURE_GATHER = 0x82A2;
enum uint GL_TEXTURE_GATHER_SHADOW = 0x82A3;
enum uint GL_SHADER_IMAGE_LOAD = 0x82A4;
enum uint GL_SHADER_IMAGE_STORE = 0x82A5;
enum uint GL_SHADER_IMAGE_ATOMIC = 0x82A6;
enum uint GL_IMAGE_TEXEL_SIZE = 0x82A7;
enum uint GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
enum uint GL_IMAGE_PIXEL_FORMAT = 0x82A9;
enum uint GL_IMAGE_PIXEL_TYPE = 0x82AA;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
enum uint GL_CLEAR_BUFFER = 0x82B4;
enum uint GL_TEXTURE_VIEW = 0x82B5;
enum uint GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
enum uint GL_FULL_SUPPORT = 0x82B7;
enum uint GL_CAVEAT_SUPPORT = 0x82B8;
enum uint GL_IMAGE_CLASS_4_X_32 = 0x82B9;
enum uint GL_IMAGE_CLASS_2_X_32 = 0x82BA;
enum uint GL_IMAGE_CLASS_1_X_32 = 0x82BB;
enum uint GL_IMAGE_CLASS_4_X_16 = 0x82BC;
enum uint GL_IMAGE_CLASS_2_X_16 = 0x82BD;
enum uint GL_IMAGE_CLASS_1_X_16 = 0x82BE;
enum uint GL_IMAGE_CLASS_4_X_8 = 0x82BF;
enum uint GL_IMAGE_CLASS_2_X_8 = 0x82C0;
enum uint GL_IMAGE_CLASS_1_X_8 = 0x82C1;
enum uint GL_IMAGE_CLASS_11_11_10 = 0x82C2;
enum uint GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
enum uint GL_VIEW_CLASS_128_BITS = 0x82C4;
enum uint GL_VIEW_CLASS_96_BITS = 0x82C5;
enum uint GL_VIEW_CLASS_64_BITS = 0x82C6;
enum uint GL_VIEW_CLASS_48_BITS = 0x82C7;
enum uint GL_VIEW_CLASS_32_BITS = 0x82C8;
enum uint GL_VIEW_CLASS_24_BITS = 0x82C9;
enum uint GL_VIEW_CLASS_16_BITS = 0x82CA;
enum uint GL_VIEW_CLASS_8_BITS = 0x82CB;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
enum uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
enum uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
enum uint GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
enum uint GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
enum uint GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
enum uint GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
enum uint GL_UNIFORM = 0x92E1;
enum uint GL_UNIFORM_BLOCK = 0x92E2;
enum uint GL_PROGRAM_INPUT = 0x92E3;
enum uint GL_PROGRAM_OUTPUT = 0x92E4;
enum uint GL_BUFFER_VARIABLE = 0x92E5;
enum uint GL_SHADER_STORAGE_BLOCK = 0x92E6;
enum uint GL_VERTEX_SUBROUTINE = 0x92E8;
enum uint GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
enum uint GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
enum uint GL_GEOMETRY_SUBROUTINE = 0x92EB;
enum uint GL_FRAGMENT_SUBROUTINE = 0x92EC;
enum uint GL_COMPUTE_SUBROUTINE = 0x92ED;
enum uint GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
enum uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
enum uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
enum uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
enum uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
enum uint GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
enum uint GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
enum uint GL_ACTIVE_RESOURCES = 0x92F5;
enum uint GL_MAX_NAME_LENGTH = 0x92F6;
enum uint GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
enum uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
enum uint GL_NAME_LENGTH = 0x92F9;
enum uint GL_TYPE = 0x92FA;
enum uint GL_ARRAY_SIZE = 0x92FB;
enum uint GL_OFFSET = 0x92FC;
enum uint GL_BLOCK_INDEX = 0x92FD;
enum uint GL_ARRAY_STRIDE = 0x92FE;
enum uint GL_MATRIX_STRIDE = 0x92FF;
enum uint GL_IS_ROW_MAJOR = 0x9300;
enum uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
enum uint GL_BUFFER_BINDING = 0x9302;
enum uint GL_BUFFER_DATA_SIZE = 0x9303;
enum uint GL_NUM_ACTIVE_VARIABLES = 0x9304;
enum uint GL_ACTIVE_VARIABLES = 0x9305;
enum uint GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
enum uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
enum uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
enum uint GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
enum uint GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
enum uint GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
enum uint GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
enum uint GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
enum uint GL_LOCATION = 0x930E;
enum uint GL_LOCATION_INDEX = 0x930F;
enum uint GL_IS_PER_PATCH = 0x92E7;
enum uint GL_SHADER_STORAGE_BUFFER = 0x90D2;
enum uint GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
enum uint GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
enum uint GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
enum uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
enum uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
enum uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
enum uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
enum uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
enum uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
enum uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
enum uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
enum uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
enum uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
enum uint GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
enum uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
enum uint GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
enum uint GL_TEXTURE_BUFFER_OFFSET = 0x919D;
enum uint GL_TEXTURE_BUFFER_SIZE = 0x919E;
enum uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
enum uint GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
enum uint GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
enum uint GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
enum uint GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
enum uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
enum uint GL_VERTEX_ATTRIB_BINDING = 0x82D4;
enum uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
enum uint GL_VERTEX_BINDING_DIVISOR = 0x82D6;
enum uint GL_VERTEX_BINDING_OFFSET = 0x82D7;
enum uint GL_VERTEX_BINDING_STRIDE = 0x82D8;
enum uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
enum uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
enum uint GL_VERTEX_BINDING_BUFFER = 0x8F4F;
enum uint GL_DISPLAY_LIST = 0x82E7;
enum uint GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
enum uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
enum uint GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
enum uint GL_MAP_PERSISTENT_BIT = 0x0040;
enum uint GL_MAP_COHERENT_BIT = 0x0080;
enum uint GL_DYNAMIC_STORAGE_BIT = 0x0100;
enum uint GL_CLIENT_STORAGE_BIT = 0x0200;
enum uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
enum uint GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
enum uint GL_BUFFER_STORAGE_FLAGS = 0x8220;
enum uint GL_CLEAR_TEXTURE = 0x9365;
enum uint GL_LOCATION_COMPONENT = 0x934A;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
enum uint GL_QUERY_BUFFER = 0x9192;
enum uint GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
enum uint GL_QUERY_BUFFER_BINDING = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT = 0x9194;
enum uint GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
enum uint GL_CONTEXT_LOST = 0x0507;
enum uint GL_NEGATIVE_ONE_TO_ONE = 0x935E;
enum uint GL_ZERO_TO_ONE = 0x935F;
enum uint GL_CLIP_ORIGIN = 0x935C;
enum uint GL_CLIP_DEPTH_MODE = 0x935D;
enum uint GL_QUERY_WAIT_INVERTED = 0x8E17;
enum uint GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
enum uint GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
enum uint GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
enum uint GL_MAX_CULL_DISTANCES = 0x82F9;
enum uint GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
enum uint GL_TEXTURE_TARGET = 0x1006;
enum uint GL_QUERY_TARGET = 0x82EA;
enum uint GL_GUILTY_CONTEXT_RESET = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
enum uint GL_LOSE_CONTEXT_ON_RESET = 0x8252;
enum uint GL_NO_RESET_NOTIFICATION = 0x8261;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
enum uint GL_MULTISAMPLE_3DFX = 0x86B2;
enum uint GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
enum uint GL_SAMPLES_3DFX = 0x86B4;
enum uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
enum uint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
enum uint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
enum uint GL_FACTOR_MIN_AMD = 0x901C;
enum uint GL_FACTOR_MAX_AMD = 0x901D;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
enum uint GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
enum uint GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
enum uint GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
enum uint GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
enum uint GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
enum uint GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
enum uint GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
enum uint GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
enum uint GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
enum uint GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
enum uint GL_INT64_NV = 0x140E;
enum uint GL_UNSIGNED_INT64_NV = 0x140F;
enum uint GL_INT8_NV = 0x8FE0;
enum uint GL_INT8_VEC2_NV = 0x8FE1;
enum uint GL_INT8_VEC3_NV = 0x8FE2;
enum uint GL_INT8_VEC4_NV = 0x8FE3;
enum uint GL_INT16_NV = 0x8FE4;
enum uint GL_INT16_VEC2_NV = 0x8FE5;
enum uint GL_INT16_VEC3_NV = 0x8FE6;
enum uint GL_INT16_VEC4_NV = 0x8FE7;
enum uint GL_INT64_VEC2_NV = 0x8FE9;
enum uint GL_INT64_VEC3_NV = 0x8FEA;
enum uint GL_INT64_VEC4_NV = 0x8FEB;
enum uint GL_UNSIGNED_INT8_NV = 0x8FEC;
enum uint GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
enum uint GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
enum uint GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
enum uint GL_UNSIGNED_INT16_NV = 0x8FF0;
enum uint GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
enum uint GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
enum uint GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
enum uint GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
enum uint GL_FLOAT16_NV = 0x8FF8;
enum uint GL_FLOAT16_VEC2_NV = 0x8FF9;
enum uint GL_FLOAT16_VEC3_NV = 0x8FFA;
enum uint GL_FLOAT16_VEC4_NV = 0x8FFB;
enum uint GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
enum uint GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
enum uint GL_DATA_BUFFER_AMD = 0x9151;
enum uint GL_PERFORMANCE_MONITOR_AMD = 0x9152;
enum uint GL_QUERY_OBJECT_AMD = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
enum uint GL_SAMPLER_OBJECT_AMD = 0x9155;
enum uint GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
enum uint GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
enum uint GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
enum uint GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
enum uint GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
enum uint GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
enum uint GL_COUNTER_TYPE_AMD = 0x8BC0;
enum uint GL_COUNTER_RANGE_AMD = 0x8BC1;
enum uint GL_UNSIGNED_INT64_AMD = 0x8BC2;
enum uint GL_PERCENTAGE_AMD = 0x8BC3;
enum uint GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
enum uint GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
enum uint GL_PERFMON_RESULT_AMD = 0x8BC6;
enum uint GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
enum uint GL_QUERY_BUFFER_AMD = 0x9192;
enum uint GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
enum uint GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
enum uint GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
enum uint GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
enum uint GL_MIN_LOD_WARNING_AMD = 0x919C;
enum uint GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
enum uint GL_SET_AMD = 0x874A;
enum uint GL_REPLACE_VALUE_AMD = 0x874B;
enum uint GL_STENCIL_OP_VALUE_AMD = 0x874C;
enum uint GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
enum uint GL_STREAM_RASTERIZATION_AMD = 0x91A0;
enum uint GL_SAMPLER_BUFFER_AMD = 0x9001;
enum uint GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
enum uint GL_TESSELLATION_MODE_AMD = 0x9004;
enum uint GL_TESSELLATION_FACTOR_AMD = 0x9005;
enum uint GL_DISCRETE_AMD = 0x9006;
enum uint GL_CONTINUOUS_AMD = 0x9007;
enum uint GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
enum uint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
enum uint GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
enum uint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
enum uint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
enum uint GL_DRAW_PIXELS_APPLE = 0x8A0A;
enum uint GL_FENCE_APPLE = 0x8A0B;
enum uint GL_HALF_APPLE = 0x140B;
enum uint GL_RGBA_FLOAT32_APPLE = 0x8814;
enum uint GL_RGB_FLOAT32_APPLE = 0x8815;
enum uint GL_ALPHA_FLOAT32_APPLE = 0x8816;
enum uint GL_INTENSITY_FLOAT32_APPLE = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
enum uint GL_RGBA_FLOAT16_APPLE = 0x881A;
enum uint GL_RGB_FLOAT16_APPLE = 0x881B;
enum uint GL_ALPHA_FLOAT16_APPLE = 0x881C;
enum uint GL_INTENSITY_FLOAT16_APPLE = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
enum uint GL_COLOR_FLOAT_APPLE = 0x8A0F;
enum uint GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
enum uint GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
enum uint GL_BUFFER_OBJECT_APPLE = 0x85B3;
enum uint GL_RELEASED_APPLE = 0x8A19;
enum uint GL_VOLATILE_APPLE = 0x8A1A;
enum uint GL_RETAINED_APPLE = 0x8A1B;
enum uint GL_UNDEFINED_APPLE = 0x8A1C;
enum uint GL_PURGEABLE_APPLE = 0x8A1D;
enum uint GL_RGB_422_APPLE = 0x8A1F;
enum uint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
enum uint GL_RGB_RAW_422_APPLE = 0x8A51;
enum uint GL_PACK_ROW_BYTES_APPLE = 0x8A15;
enum uint GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
enum uint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
enum uint GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
enum uint GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
enum uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
enum uint GL_STORAGE_PRIVATE_APPLE = 0x85BD;
enum uint GL_STORAGE_CACHED_APPLE = 0x85BE;
enum uint GL_STORAGE_SHARED_APPLE = 0x85BF;
enum uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
enum uint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
enum uint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
enum uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
enum uint GL_STORAGE_CLIENT_APPLE = 0x85B4;
enum uint GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
enum uint GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
enum uint GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
enum uint GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
enum uint GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
enum uint GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
enum uint GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
enum uint GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
enum uint GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
enum uint GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
enum uint GL_YCBCR_422_APPLE = 0x85B9;
enum uint GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
enum uint GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
enum uint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
enum uint GL_UNSIGNED_INT64_ARB = 0x140F;
enum uint GL_SYNC_CL_EVENT_ARB = 0x8240;
enum uint GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
enum uint GL_RGBA_FLOAT_MODE_ARB = 0x8820;
enum uint GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
enum uint GL_CLAMP_READ_COLOR_ARB = 0x891C;
enum uint GL_FIXED_ONLY_ARB = 0x891D;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
enum uint GL_DEBUG_SOURCE_API_ARB = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
enum uint GL_DEPTH_COMPONENT16_ARB = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_ARB = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_ARB = 0x81A7;
enum uint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
enum uint GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
enum uint GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
enum uint GL_DRAW_BUFFER0_ARB = 0x8825;
enum uint GL_DRAW_BUFFER1_ARB = 0x8826;
enum uint GL_DRAW_BUFFER2_ARB = 0x8827;
enum uint GL_DRAW_BUFFER3_ARB = 0x8828;
enum uint GL_DRAW_BUFFER4_ARB = 0x8829;
enum uint GL_DRAW_BUFFER5_ARB = 0x882A;
enum uint GL_DRAW_BUFFER6_ARB = 0x882B;
enum uint GL_DRAW_BUFFER7_ARB = 0x882C;
enum uint GL_DRAW_BUFFER8_ARB = 0x882D;
enum uint GL_DRAW_BUFFER9_ARB = 0x882E;
enum uint GL_DRAW_BUFFER10_ARB = 0x882F;
enum uint GL_DRAW_BUFFER11_ARB = 0x8830;
enum uint GL_DRAW_BUFFER12_ARB = 0x8831;
enum uint GL_DRAW_BUFFER13_ARB = 0x8832;
enum uint GL_DRAW_BUFFER14_ARB = 0x8833;
enum uint GL_DRAW_BUFFER15_ARB = 0x8834;
enum uint GL_FRAGMENT_PROGRAM_ARB = 0x8804;
enum uint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
enum uint GL_PROGRAM_LENGTH_ARB = 0x8627;
enum uint GL_PROGRAM_FORMAT_ARB = 0x8876;
enum uint GL_PROGRAM_BINDING_ARB = 0x8677;
enum uint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
enum uint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
enum uint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
enum uint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
enum uint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
enum uint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
enum uint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
enum uint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
enum uint GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
enum uint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
enum uint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
enum uint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
enum uint GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
enum uint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
enum uint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
enum uint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
enum uint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
enum uint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
enum uint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
enum uint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
enum uint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
enum uint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
enum uint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
enum uint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
enum uint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
enum uint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
enum uint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
enum uint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
enum uint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
enum uint GL_PROGRAM_STRING_ARB = 0x8628;
enum uint GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
enum uint GL_CURRENT_MATRIX_ARB = 0x8641;
enum uint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
enum uint GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
enum uint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
enum uint GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
enum uint GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
enum uint GL_MATRIX0_ARB = 0x88C0;
enum uint GL_MATRIX1_ARB = 0x88C1;
enum uint GL_MATRIX2_ARB = 0x88C2;
enum uint GL_MATRIX3_ARB = 0x88C3;
enum uint GL_MATRIX4_ARB = 0x88C4;
enum uint GL_MATRIX5_ARB = 0x88C5;
enum uint GL_MATRIX6_ARB = 0x88C6;
enum uint GL_MATRIX7_ARB = 0x88C7;
enum uint GL_MATRIX8_ARB = 0x88C8;
enum uint GL_MATRIX9_ARB = 0x88C9;
enum uint GL_MATRIX10_ARB = 0x88CA;
enum uint GL_MATRIX11_ARB = 0x88CB;
enum uint GL_MATRIX12_ARB = 0x88CC;
enum uint GL_MATRIX13_ARB = 0x88CD;
enum uint GL_MATRIX14_ARB = 0x88CE;
enum uint GL_MATRIX15_ARB = 0x88CF;
enum uint GL_MATRIX16_ARB = 0x88D0;
enum uint GL_MATRIX17_ARB = 0x88D1;
enum uint GL_MATRIX18_ARB = 0x88D2;
enum uint GL_MATRIX19_ARB = 0x88D3;
enum uint GL_MATRIX20_ARB = 0x88D4;
enum uint GL_MATRIX21_ARB = 0x88D5;
enum uint GL_MATRIX22_ARB = 0x88D6;
enum uint GL_MATRIX23_ARB = 0x88D7;
enum uint GL_MATRIX24_ARB = 0x88D8;
enum uint GL_MATRIX25_ARB = 0x88D9;
enum uint GL_MATRIX26_ARB = 0x88DA;
enum uint GL_MATRIX27_ARB = 0x88DB;
enum uint GL_MATRIX28_ARB = 0x88DC;
enum uint GL_MATRIX29_ARB = 0x88DD;
enum uint GL_MATRIX30_ARB = 0x88DE;
enum uint GL_MATRIX31_ARB = 0x88DF;
enum uint GL_FRAGMENT_SHADER_ARB = 0x8B30;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
enum uint GL_LINES_ADJACENCY_ARB = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
enum uint GL_GEOMETRY_SHADER_ARB = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
enum uint GL_INT64_ARB = 0x140E;
enum uint GL_INT64_VEC2_ARB = 0x8FE9;
enum uint GL_INT64_VEC3_ARB = 0x8FEA;
enum uint GL_INT64_VEC4_ARB = 0x8FEB;
enum uint GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
enum uint GL_HALF_FLOAT_ARB = 0x140B;
enum uint GL_BLEND_COLOR = 0x8005;
enum uint GL_BLEND_EQUATION = 0x8009;
enum uint GL_CONVOLUTION_1D = 0x8010;
enum uint GL_CONVOLUTION_2D = 0x8011;
enum uint GL_SEPARABLE_2D = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS = 0x8015;
enum uint GL_REDUCE = 0x8016;
enum uint GL_CONVOLUTION_FORMAT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
enum uint GL_HISTOGRAM = 0x8024;
enum uint GL_PROXY_HISTOGRAM = 0x8025;
enum uint GL_HISTOGRAM_WIDTH = 0x8026;
enum uint GL_HISTOGRAM_FORMAT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
enum uint GL_HISTOGRAM_SINK = 0x802D;
enum uint GL_MINMAX = 0x802E;
enum uint GL_MINMAX_FORMAT = 0x802F;
enum uint GL_MINMAX_SINK = 0x8030;
enum uint GL_TABLE_TOO_LARGE = 0x8031;
enum uint GL_COLOR_MATRIX = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
enum uint GL_COLOR_TABLE = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
enum uint GL_CONSTANT_BORDER = 0x8151;
enum uint GL_REPLICATE_BORDER = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR = 0x8154;
enum uint GL_PARAMETER_BUFFER_ARB = 0x80EE;
enum uint GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
enum uint GL_SRGB_DECODE_ARB = 0x8299;
enum uint GL_MATRIX_PALETTE_ARB = 0x8840;
enum uint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
enum uint GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
enum uint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
enum uint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
enum uint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
enum uint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
enum uint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
enum uint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
enum uint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
enum uint GL_MULTISAMPLE_ARB = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
enum uint GL_SAMPLE_COVERAGE_ARB = 0x80A0;
enum uint GL_SAMPLE_BUFFERS_ARB = 0x80A8;
enum uint GL_SAMPLES_ARB = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
enum uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
enum uint GL_TEXTURE0_ARB = 0x84C0;
enum uint GL_TEXTURE1_ARB = 0x84C1;
enum uint GL_TEXTURE2_ARB = 0x84C2;
enum uint GL_TEXTURE3_ARB = 0x84C3;
enum uint GL_TEXTURE4_ARB = 0x84C4;
enum uint GL_TEXTURE5_ARB = 0x84C5;
enum uint GL_TEXTURE6_ARB = 0x84C6;
enum uint GL_TEXTURE7_ARB = 0x84C7;
enum uint GL_TEXTURE8_ARB = 0x84C8;
enum uint GL_TEXTURE9_ARB = 0x84C9;
enum uint GL_TEXTURE10_ARB = 0x84CA;
enum uint GL_TEXTURE11_ARB = 0x84CB;
enum uint GL_TEXTURE12_ARB = 0x84CC;
enum uint GL_TEXTURE13_ARB = 0x84CD;
enum uint GL_TEXTURE14_ARB = 0x84CE;
enum uint GL_TEXTURE15_ARB = 0x84CF;
enum uint GL_TEXTURE16_ARB = 0x84D0;
enum uint GL_TEXTURE17_ARB = 0x84D1;
enum uint GL_TEXTURE18_ARB = 0x84D2;
enum uint GL_TEXTURE19_ARB = 0x84D3;
enum uint GL_TEXTURE20_ARB = 0x84D4;
enum uint GL_TEXTURE21_ARB = 0x84D5;
enum uint GL_TEXTURE22_ARB = 0x84D6;
enum uint GL_TEXTURE23_ARB = 0x84D7;
enum uint GL_TEXTURE24_ARB = 0x84D8;
enum uint GL_TEXTURE25_ARB = 0x84D9;
enum uint GL_TEXTURE26_ARB = 0x84DA;
enum uint GL_TEXTURE27_ARB = 0x84DB;
enum uint GL_TEXTURE28_ARB = 0x84DC;
enum uint GL_TEXTURE29_ARB = 0x84DD;
enum uint GL_TEXTURE30_ARB = 0x84DE;
enum uint GL_TEXTURE31_ARB = 0x84DF;
enum uint GL_ACTIVE_TEXTURE_ARB = 0x84E0;
enum uint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
enum uint GL_QUERY_COUNTER_BITS_ARB = 0x8864;
enum uint GL_CURRENT_QUERY_ARB = 0x8865;
enum uint GL_QUERY_RESULT_ARB = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
enum uint GL_SAMPLES_PASSED_ARB = 0x8914;
enum uint GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
enum uint GL_COMPLETION_STATUS_ARB = 0x91B1;
enum uint GL_VERTICES_SUBMITTED_ARB = 0x82EE;
enum uint GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
enum uint GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
enum uint GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
enum uint GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
enum uint GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
enum uint GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
enum uint GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
enum uint GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
enum uint GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
enum uint GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
enum uint GL_POINT_SIZE_MIN_ARB = 0x8126;
enum uint GL_POINT_SIZE_MAX_ARB = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
enum uint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
enum uint GL_POINT_SPRITE_ARB = 0x8861;
enum uint GL_COORD_REPLACE_ARB = 0x8862;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
enum uint GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
enum uint GL_SAMPLE_LOCATION_ARB = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
enum uint GL_SAMPLE_SHADING_ARB = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
enum uint GL_PROGRAM_OBJECT_ARB = 0x8B40;
enum uint GL_SHADER_OBJECT_ARB = 0x8B48;
enum uint GL_OBJECT_TYPE_ARB = 0x8B4E;
enum uint GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
enum uint GL_FLOAT_VEC2_ARB = 0x8B50;
enum uint GL_FLOAT_VEC3_ARB = 0x8B51;
enum uint GL_FLOAT_VEC4_ARB = 0x8B52;
enum uint GL_INT_VEC2_ARB = 0x8B53;
enum uint GL_INT_VEC3_ARB = 0x8B54;
enum uint GL_INT_VEC4_ARB = 0x8B55;
enum uint GL_BOOL_ARB = 0x8B56;
enum uint GL_BOOL_VEC2_ARB = 0x8B57;
enum uint GL_BOOL_VEC3_ARB = 0x8B58;
enum uint GL_BOOL_VEC4_ARB = 0x8B59;
enum uint GL_FLOAT_MAT2_ARB = 0x8B5A;
enum uint GL_FLOAT_MAT3_ARB = 0x8B5B;
enum uint GL_FLOAT_MAT4_ARB = 0x8B5C;
enum uint GL_SAMPLER_1D_ARB = 0x8B5D;
enum uint GL_SAMPLER_2D_ARB = 0x8B5E;
enum uint GL_SAMPLER_3D_ARB = 0x8B5F;
enum uint GL_SAMPLER_CUBE_ARB = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
enum uint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
enum uint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
enum uint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
enum uint GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
enum uint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
enum uint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
enum uint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
enum uint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
enum uint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
enum uint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
enum uint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
enum uint GL_SHADER_INCLUDE_ARB = 0x8DAE;
enum uint GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
enum uint GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
enum uint GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
enum uint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
enum uint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
enum uint GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
enum uint GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
enum uint GL_TEXTURE_SPARSE_ARB = 0x91A6;
enum uint GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
enum uint GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
enum uint GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
enum uint GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
enum uint GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
enum uint GL_CLAMP_TO_BORDER_ARB = 0x812D;
enum uint GL_TEXTURE_BUFFER_ARB = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
enum uint GL_COMPRESSED_ALPHA_ARB = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
enum uint GL_COMPRESSED_RGB_ARB = 0x84ED;
enum uint GL_COMPRESSED_RGBA_ARB = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
enum uint GL_NORMAL_MAP_ARB = 0x8511;
enum uint GL_REFLECTION_MAP_ARB = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
enum uint GL_COMBINE_ARB = 0x8570;
enum uint GL_COMBINE_RGB_ARB = 0x8571;
enum uint GL_COMBINE_ALPHA_ARB = 0x8572;
enum uint GL_SOURCE0_RGB_ARB = 0x8580;
enum uint GL_SOURCE1_RGB_ARB = 0x8581;
enum uint GL_SOURCE2_RGB_ARB = 0x8582;
enum uint GL_SOURCE0_ALPHA_ARB = 0x8588;
enum uint GL_SOURCE1_ALPHA_ARB = 0x8589;
enum uint GL_SOURCE2_ALPHA_ARB = 0x858A;
enum uint GL_OPERAND0_RGB_ARB = 0x8590;
enum uint GL_OPERAND1_RGB_ARB = 0x8591;
enum uint GL_OPERAND2_RGB_ARB = 0x8592;
enum uint GL_OPERAND0_ALPHA_ARB = 0x8598;
enum uint GL_OPERAND1_ALPHA_ARB = 0x8599;
enum uint GL_OPERAND2_ALPHA_ARB = 0x859A;
enum uint GL_RGB_SCALE_ARB = 0x8573;
enum uint GL_ADD_SIGNED_ARB = 0x8574;
enum uint GL_INTERPOLATE_ARB = 0x8575;
enum uint GL_SUBTRACT_ARB = 0x84E7;
enum uint GL_CONSTANT_ARB = 0x8576;
enum uint GL_PRIMARY_COLOR_ARB = 0x8577;
enum uint GL_PREVIOUS_ARB = 0x8578;
enum uint GL_DOT3_RGB_ARB = 0x86AE;
enum uint GL_DOT3_RGBA_ARB = 0x86AF;
enum uint GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
enum uint GL_WEIGHTED_AVERAGE_ARB = 0x9367;
enum uint GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
enum uint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
enum uint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
enum uint GL_RGBA32F_ARB = 0x8814;
enum uint GL_RGB32F_ARB = 0x8815;
enum uint GL_ALPHA32F_ARB = 0x8816;
enum uint GL_INTENSITY32F_ARB = 0x8817;
enum uint GL_LUMINANCE32F_ARB = 0x8818;
enum uint GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
enum uint GL_RGBA16F_ARB = 0x881A;
enum uint GL_RGB16F_ARB = 0x881B;
enum uint GL_ALPHA16F_ARB = 0x881C;
enum uint GL_INTENSITY16F_ARB = 0x881D;
enum uint GL_LUMINANCE16F_ARB = 0x881E;
enum uint GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
enum uint GL_MIRRORED_REPEAT_ARB = 0x8370;
enum uint GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
enum uint GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
enum uint GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
enum uint GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
enum uint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
enum uint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
enum uint GL_VERTEX_BLEND_ARB = 0x86A7;
enum uint GL_CURRENT_WEIGHT_ARB = 0x86A8;
enum uint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
enum uint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
enum uint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
enum uint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
enum uint GL_WEIGHT_ARRAY_ARB = 0x86AD;
enum uint GL_MODELVIEW0_ARB = 0x1700;
enum uint GL_MODELVIEW1_ARB = 0x850A;
enum uint GL_MODELVIEW2_ARB = 0x8722;
enum uint GL_MODELVIEW3_ARB = 0x8723;
enum uint GL_MODELVIEW4_ARB = 0x8724;
enum uint GL_MODELVIEW5_ARB = 0x8725;
enum uint GL_MODELVIEW6_ARB = 0x8726;
enum uint GL_MODELVIEW7_ARB = 0x8727;
enum uint GL_MODELVIEW8_ARB = 0x8728;
enum uint GL_MODELVIEW9_ARB = 0x8729;
enum uint GL_MODELVIEW10_ARB = 0x872A;
enum uint GL_MODELVIEW11_ARB = 0x872B;
enum uint GL_MODELVIEW12_ARB = 0x872C;
enum uint GL_MODELVIEW13_ARB = 0x872D;
enum uint GL_MODELVIEW14_ARB = 0x872E;
enum uint GL_MODELVIEW15_ARB = 0x872F;
enum uint GL_MODELVIEW16_ARB = 0x8730;
enum uint GL_MODELVIEW17_ARB = 0x8731;
enum uint GL_MODELVIEW18_ARB = 0x8732;
enum uint GL_MODELVIEW19_ARB = 0x8733;
enum uint GL_MODELVIEW20_ARB = 0x8734;
enum uint GL_MODELVIEW21_ARB = 0x8735;
enum uint GL_MODELVIEW22_ARB = 0x8736;
enum uint GL_MODELVIEW23_ARB = 0x8737;
enum uint GL_MODELVIEW24_ARB = 0x8738;
enum uint GL_MODELVIEW25_ARB = 0x8739;
enum uint GL_MODELVIEW26_ARB = 0x873A;
enum uint GL_MODELVIEW27_ARB = 0x873B;
enum uint GL_MODELVIEW28_ARB = 0x873C;
enum uint GL_MODELVIEW29_ARB = 0x873D;
enum uint GL_MODELVIEW30_ARB = 0x873E;
enum uint GL_MODELVIEW31_ARB = 0x873F;
enum uint GL_BUFFER_SIZE_ARB = 0x8764;
enum uint GL_BUFFER_USAGE_ARB = 0x8765;
enum uint GL_ARRAY_BUFFER_ARB = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
enum uint GL_READ_ONLY_ARB = 0x88B8;
enum uint GL_WRITE_ONLY_ARB = 0x88B9;
enum uint GL_READ_WRITE_ARB = 0x88BA;
enum uint GL_BUFFER_ACCESS_ARB = 0x88BB;
enum uint GL_BUFFER_MAPPED_ARB = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
enum uint GL_STREAM_DRAW_ARB = 0x88E0;
enum uint GL_STREAM_READ_ARB = 0x88E1;
enum uint GL_STREAM_COPY_ARB = 0x88E2;
enum uint GL_STATIC_DRAW_ARB = 0x88E4;
enum uint GL_STATIC_READ_ARB = 0x88E5;
enum uint GL_STATIC_COPY_ARB = 0x88E6;
enum uint GL_DYNAMIC_DRAW_ARB = 0x88E8;
enum uint GL_DYNAMIC_READ_ARB = 0x88E9;
enum uint GL_DYNAMIC_COPY_ARB = 0x88EA;
enum uint GL_COLOR_SUM_ARB = 0x8458;
enum uint GL_VERTEX_PROGRAM_ARB = 0x8620;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
enum uint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
enum uint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
enum uint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
enum uint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
enum uint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
enum uint GL_VERTEX_SHADER_ARB = 0x8B31;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
enum uint GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
enum uint GL_DRAW_BUFFER0_ATI = 0x8825;
enum uint GL_DRAW_BUFFER1_ATI = 0x8826;
enum uint GL_DRAW_BUFFER2_ATI = 0x8827;
enum uint GL_DRAW_BUFFER3_ATI = 0x8828;
enum uint GL_DRAW_BUFFER4_ATI = 0x8829;
enum uint GL_DRAW_BUFFER5_ATI = 0x882A;
enum uint GL_DRAW_BUFFER6_ATI = 0x882B;
enum uint GL_DRAW_BUFFER7_ATI = 0x882C;
enum uint GL_DRAW_BUFFER8_ATI = 0x882D;
enum uint GL_DRAW_BUFFER9_ATI = 0x882E;
enum uint GL_DRAW_BUFFER10_ATI = 0x882F;
enum uint GL_DRAW_BUFFER11_ATI = 0x8830;
enum uint GL_DRAW_BUFFER12_ATI = 0x8831;
enum uint GL_DRAW_BUFFER13_ATI = 0x8832;
enum uint GL_DRAW_BUFFER14_ATI = 0x8833;
enum uint GL_DRAW_BUFFER15_ATI = 0x8834;
enum uint GL_ELEMENT_ARRAY_ATI = 0x8768;
enum uint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
enum uint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
enum uint GL_BUMP_ROT_MATRIX_ATI = 0x8775;
enum uint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
enum uint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
enum uint GL_BUMP_TEX_UNITS_ATI = 0x8778;
enum uint GL_DUDV_ATI = 0x8779;
enum uint GL_DU8DV8_ATI = 0x877A;
enum uint GL_BUMP_ENVMAP_ATI = 0x877B;
enum uint GL_BUMP_TARGET_ATI = 0x877C;
enum uint GL_FRAGMENT_SHADER_ATI = 0x8920;
enum uint GL_REG_0_ATI = 0x8921;
enum uint GL_REG_1_ATI = 0x8922;
enum uint GL_REG_2_ATI = 0x8923;
enum uint GL_REG_3_ATI = 0x8924;
enum uint GL_REG_4_ATI = 0x8925;
enum uint GL_REG_5_ATI = 0x8926;
enum uint GL_REG_6_ATI = 0x8927;
enum uint GL_REG_7_ATI = 0x8928;
enum uint GL_REG_8_ATI = 0x8929;
enum uint GL_REG_9_ATI = 0x892A;
enum uint GL_REG_10_ATI = 0x892B;
enum uint GL_REG_11_ATI = 0x892C;
enum uint GL_REG_12_ATI = 0x892D;
enum uint GL_REG_13_ATI = 0x892E;
enum uint GL_REG_14_ATI = 0x892F;
enum uint GL_REG_15_ATI = 0x8930;
enum uint GL_REG_16_ATI = 0x8931;
enum uint GL_REG_17_ATI = 0x8932;
enum uint GL_REG_18_ATI = 0x8933;
enum uint GL_REG_19_ATI = 0x8934;
enum uint GL_REG_20_ATI = 0x8935;
enum uint GL_REG_21_ATI = 0x8936;
enum uint GL_REG_22_ATI = 0x8937;
enum uint GL_REG_23_ATI = 0x8938;
enum uint GL_REG_24_ATI = 0x8939;
enum uint GL_REG_25_ATI = 0x893A;
enum uint GL_REG_26_ATI = 0x893B;
enum uint GL_REG_27_ATI = 0x893C;
enum uint GL_REG_28_ATI = 0x893D;
enum uint GL_REG_29_ATI = 0x893E;
enum uint GL_REG_30_ATI = 0x893F;
enum uint GL_REG_31_ATI = 0x8940;
enum uint GL_CON_0_ATI = 0x8941;
enum uint GL_CON_1_ATI = 0x8942;
enum uint GL_CON_2_ATI = 0x8943;
enum uint GL_CON_3_ATI = 0x8944;
enum uint GL_CON_4_ATI = 0x8945;
enum uint GL_CON_5_ATI = 0x8946;
enum uint GL_CON_6_ATI = 0x8947;
enum uint GL_CON_7_ATI = 0x8948;
enum uint GL_CON_8_ATI = 0x8949;
enum uint GL_CON_9_ATI = 0x894A;
enum uint GL_CON_10_ATI = 0x894B;
enum uint GL_CON_11_ATI = 0x894C;
enum uint GL_CON_12_ATI = 0x894D;
enum uint GL_CON_13_ATI = 0x894E;
enum uint GL_CON_14_ATI = 0x894F;
enum uint GL_CON_15_ATI = 0x8950;
enum uint GL_CON_16_ATI = 0x8951;
enum uint GL_CON_17_ATI = 0x8952;
enum uint GL_CON_18_ATI = 0x8953;
enum uint GL_CON_19_ATI = 0x8954;
enum uint GL_CON_20_ATI = 0x8955;
enum uint GL_CON_21_ATI = 0x8956;
enum uint GL_CON_22_ATI = 0x8957;
enum uint GL_CON_23_ATI = 0x8958;
enum uint GL_CON_24_ATI = 0x8959;
enum uint GL_CON_25_ATI = 0x895A;
enum uint GL_CON_26_ATI = 0x895B;
enum uint GL_CON_27_ATI = 0x895C;
enum uint GL_CON_28_ATI = 0x895D;
enum uint GL_CON_29_ATI = 0x895E;
enum uint GL_CON_30_ATI = 0x895F;
enum uint GL_CON_31_ATI = 0x8960;
enum uint GL_MOV_ATI = 0x8961;
enum uint GL_ADD_ATI = 0x8963;
enum uint GL_MUL_ATI = 0x8964;
enum uint GL_SUB_ATI = 0x8965;
enum uint GL_DOT3_ATI = 0x8966;
enum uint GL_DOT4_ATI = 0x8967;
enum uint GL_MAD_ATI = 0x8968;
enum uint GL_LERP_ATI = 0x8969;
enum uint GL_CND_ATI = 0x896A;
enum uint GL_CND0_ATI = 0x896B;
enum uint GL_DOT2_ADD_ATI = 0x896C;
enum uint GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
enum uint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
enum uint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
enum uint GL_NUM_PASSES_ATI = 0x8970;
enum uint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
enum uint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
enum uint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
enum uint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
enum uint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
enum uint GL_SWIZZLE_STR_ATI = 0x8976;
enum uint GL_SWIZZLE_STQ_ATI = 0x8977;
enum uint GL_SWIZZLE_STR_DR_ATI = 0x8978;
enum uint GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
enum uint GL_SWIZZLE_STRQ_ATI = 0x897A;
enum uint GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
enum uint GL_RED_BIT_ATI = 0x00000001;
enum uint GL_GREEN_BIT_ATI = 0x00000002;
enum uint GL_BLUE_BIT_ATI = 0x00000004;
enum uint GL_2X_BIT_ATI = 0x00000001;
enum uint GL_4X_BIT_ATI = 0x00000002;
enum uint GL_8X_BIT_ATI = 0x00000004;
enum uint GL_HALF_BIT_ATI = 0x00000008;
enum uint GL_QUARTER_BIT_ATI = 0x00000010;
enum uint GL_EIGHTH_BIT_ATI = 0x00000020;
enum uint GL_SATURATE_BIT_ATI = 0x00000040;
enum uint GL_COMP_BIT_ATI = 0x00000002;
enum uint GL_NEGATE_BIT_ATI = 0x00000004;
enum uint GL_BIAS_BIT_ATI = 0x00000008;
enum uint GL_VBO_FREE_MEMORY_ATI = 0x87FB;
enum uint GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
enum uint GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
enum uint GL_RGBA_FLOAT_MODE_ATI = 0x8820;
enum uint GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
enum uint GL_PN_TRIANGLES_ATI = 0x87F0;
enum uint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
enum uint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
enum uint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
enum uint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
enum uint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
enum uint GL_STENCIL_BACK_FUNC_ATI = 0x8800;
enum uint GL_STENCIL_BACK_FAIL_ATI = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
enum uint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
enum uint GL_MODULATE_ADD_ATI = 0x8744;
enum uint GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
enum uint GL_MODULATE_SUBTRACT_ATI = 0x8746;
enum uint GL_RGBA_FLOAT32_ATI = 0x8814;
enum uint GL_RGB_FLOAT32_ATI = 0x8815;
enum uint GL_ALPHA_FLOAT32_ATI = 0x8816;
enum uint GL_INTENSITY_FLOAT32_ATI = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_ATI = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
enum uint GL_RGBA_FLOAT16_ATI = 0x881A;
enum uint GL_RGB_FLOAT16_ATI = 0x881B;
enum uint GL_ALPHA_FLOAT16_ATI = 0x881C;
enum uint GL_INTENSITY_FLOAT16_ATI = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_ATI = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
enum uint GL_MIRROR_CLAMP_ATI = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
enum uint GL_STATIC_ATI = 0x8760;
enum uint GL_DYNAMIC_ATI = 0x8761;
enum uint GL_PRESERVE_ATI = 0x8762;
enum uint GL_DISCARD_ATI = 0x8763;
enum uint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
enum uint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
enum uint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
enum uint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
enum uint GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
enum uint GL_VERTEX_STREAM0_ATI = 0x876C;
enum uint GL_VERTEX_STREAM1_ATI = 0x876D;
enum uint GL_VERTEX_STREAM2_ATI = 0x876E;
enum uint GL_VERTEX_STREAM3_ATI = 0x876F;
enum uint GL_VERTEX_STREAM4_ATI = 0x8770;
enum uint GL_VERTEX_STREAM5_ATI = 0x8771;
enum uint GL_VERTEX_STREAM6_ATI = 0x8772;
enum uint GL_VERTEX_STREAM7_ATI = 0x8773;
enum uint GL_VERTEX_SOURCE_ATI = 0x8774;
enum uint GL_422_EXT = 0x80CC;
enum uint GL_422_REV_EXT = 0x80CD;
enum uint GL_422_AVERAGE_EXT = 0x80CE;
enum uint GL_422_REV_AVERAGE_EXT = 0x80CF;
enum uint GL_ABGR_EXT = 0x8000;
enum uint GL_BGR_EXT = 0x80E0;
enum uint GL_BGRA_EXT = 0x80E1;
enum uint GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
enum uint GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
enum uint GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
enum uint GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
enum uint GL_UNIFORM_BUFFER_EXT = 0x8DEE;
enum uint GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
enum uint GL_CONSTANT_COLOR_EXT = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
enum uint GL_CONSTANT_ALPHA_EXT = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
enum uint GL_BLEND_COLOR_EXT = 0x8005;
enum uint GL_BLEND_EQUATION_RGB_EXT = 0x8009;
enum uint GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
enum uint GL_BLEND_DST_RGB_EXT = 0x80C8;
enum uint GL_BLEND_SRC_RGB_EXT = 0x80C9;
enum uint GL_BLEND_DST_ALPHA_EXT = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
enum uint GL_MIN_EXT = 0x8007;
enum uint GL_MAX_EXT = 0x8008;
enum uint GL_FUNC_ADD_EXT = 0x8006;
enum uint GL_BLEND_EQUATION_EXT = 0x8009;
enum uint GL_FUNC_SUBTRACT_EXT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
enum uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
enum uint GL_CMYK_EXT = 0x800C;
enum uint GL_CMYKA_EXT = 0x800D;
enum uint GL_PACK_CMYK_HINT_EXT = 0x800E;
enum uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
enum uint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
enum uint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
enum uint GL_CONVOLUTION_1D_EXT = 0x8010;
enum uint GL_CONVOLUTION_2D_EXT = 0x8011;
enum uint GL_SEPARABLE_2D_EXT = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
enum uint GL_REDUCE_EXT = 0x8016;
enum uint GL_CONVOLUTION_FORMAT_EXT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH_EXT = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
enum uint GL_TANGENT_ARRAY_EXT = 0x8439;
enum uint GL_BINORMAL_ARRAY_EXT = 0x843A;
enum uint GL_CURRENT_TANGENT_EXT = 0x843B;
enum uint GL_CURRENT_BINORMAL_EXT = 0x843C;
enum uint GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
enum uint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
enum uint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
enum uint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
enum uint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
enum uint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
enum uint GL_MAP1_TANGENT_EXT = 0x8444;
enum uint GL_MAP2_TANGENT_EXT = 0x8445;
enum uint GL_MAP1_BINORMAL_EXT = 0x8446;
enum uint GL_MAP2_BINORMAL_EXT = 0x8447;
enum uint GL_CULL_VERTEX_EXT = 0x81AA;
enum uint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
enum uint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
enum uint GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
enum uint GL_PROGRAM_OBJECT_EXT = 0x8B40;
enum uint GL_SHADER_OBJECT_EXT = 0x8B48;
enum uint GL_BUFFER_OBJECT_EXT = 0x9151;
enum uint GL_QUERY_OBJECT_EXT = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
enum uint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
enum uint GL_DEPTH_BOUNDS_EXT = 0x8891;
enum uint GL_PROGRAM_MATRIX_EXT = 0x8E2D;
enum uint GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
enum uint GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
enum uint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
enum uint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
enum uint GL_FOG_COORDINATE_EXT = 0x8451;
enum uint GL_FRAGMENT_DEPTH_EXT = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
enum uint GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
enum uint GL_MAX_SAMPLES_EXT = 0x8D57;
enum uint GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
enum uint GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
enum uint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
enum uint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
enum uint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
enum uint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
enum uint GL_FRAMEBUFFER_EXT = 0x8D40;
enum uint GL_RENDERBUFFER_EXT = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
enum uint GL_STENCIL_INDEX1_EXT = 0x8D46;
enum uint GL_STENCIL_INDEX4_EXT = 0x8D47;
enum uint GL_STENCIL_INDEX8_EXT = 0x8D48;
enum uint GL_STENCIL_INDEX16_EXT = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
enum uint GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
enum uint GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
enum uint GL_GEOMETRY_SHADER_EXT = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
enum uint GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
enum uint GL_LINES_ADJACENCY_EXT = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
enum uint GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
enum uint GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
enum uint GL_SAMPLER_BUFFER_EXT = 0x8DC2;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
enum uint GL_INT_SAMPLER_1D_EXT = 0x8DC9;
enum uint GL_INT_SAMPLER_2D_EXT = 0x8DCA;
enum uint GL_INT_SAMPLER_3D_EXT = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
enum uint GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
enum uint GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
enum uint GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
enum uint GL_HISTOGRAM_EXT = 0x8024;
enum uint GL_PROXY_HISTOGRAM_EXT = 0x8025;
enum uint GL_HISTOGRAM_WIDTH_EXT = 0x8026;
enum uint GL_HISTOGRAM_FORMAT_EXT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
enum uint GL_HISTOGRAM_SINK_EXT = 0x802D;
enum uint GL_MINMAX_EXT = 0x802E;
enum uint GL_MINMAX_FORMAT_EXT = 0x802F;
enum uint GL_MINMAX_SINK_EXT = 0x8030;
enum uint GL_TABLE_TOO_LARGE_EXT = 0x8031;
enum uint GL_IUI_V2F_EXT = 0x81AD;
enum uint GL_IUI_V3F_EXT = 0x81AE;
enum uint GL_IUI_N3F_V2F_EXT = 0x81AF;
enum uint GL_IUI_N3F_V3F_EXT = 0x81B0;
enum uint GL_T2F_IUI_V2F_EXT = 0x81B1;
enum uint GL_T2F_IUI_V3F_EXT = 0x81B2;
enum uint GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
enum uint GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
enum uint GL_INDEX_TEST_EXT = 0x81B5;
enum uint GL_INDEX_TEST_FUNC_EXT = 0x81B6;
enum uint GL_INDEX_TEST_REF_EXT = 0x81B7;
enum uint GL_INDEX_MATERIAL_EXT = 0x81B8;
enum uint GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
enum uint GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
enum uint GL_FRAGMENT_MATERIAL_EXT = 0x8349;
enum uint GL_FRAGMENT_NORMAL_EXT = 0x834A;
enum uint GL_FRAGMENT_COLOR_EXT = 0x834C;
enum uint GL_ATTENUATION_EXT = 0x834D;
enum uint GL_SHADOW_ATTENUATION_EXT = 0x834E;
enum uint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
enum uint GL_TEXTURE_LIGHT_EXT = 0x8350;
enum uint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
enum uint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
enum uint GL_MULTISAMPLE_EXT = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
enum uint GL_SAMPLE_MASK_EXT = 0x80A0;
enum uint GL_1PASS_EXT = 0x80A1;
enum uint GL_2PASS_0_EXT = 0x80A2;
enum uint GL_2PASS_1_EXT = 0x80A3;
enum uint GL_4PASS_0_EXT = 0x80A4;
enum uint GL_4PASS_1_EXT = 0x80A5;
enum uint GL_4PASS_2_EXT = 0x80A6;
enum uint GL_4PASS_3_EXT = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_EXT = 0x80A8;
enum uint GL_SAMPLES_EXT = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
enum uint GL_SAMPLE_PATTERN_EXT = 0x80AC;
enum uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
enum uint GL_DEPTH_STENCIL_EXT = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
enum uint GL_DEPTH24_STENCIL8_EXT = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
enum uint GL_R11F_G11F_B10F_EXT = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
enum uint GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
enum uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
enum uint GL_COLOR_INDEX1_EXT = 0x80E2;
enum uint GL_COLOR_INDEX2_EXT = 0x80E3;
enum uint GL_COLOR_INDEX4_EXT = 0x80E4;
enum uint GL_COLOR_INDEX8_EXT = 0x80E5;
enum uint GL_COLOR_INDEX12_EXT = 0x80E6;
enum uint GL_COLOR_INDEX16_EXT = 0x80E7;
enum uint GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
enum uint GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
enum uint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
enum uint GL_PIXEL_MAG_FILTER_EXT = 0x8331;
enum uint GL_PIXEL_MIN_FILTER_EXT = 0x8332;
enum uint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
enum uint GL_CUBIC_EXT = 0x8334;
enum uint GL_AVERAGE_EXT = 0x8335;
enum uint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
enum uint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
enum uint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
enum uint GL_POINT_SIZE_MIN_EXT = 0x8126;
enum uint GL_POINT_SIZE_MAX_EXT = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_EXT = 0x8129;
enum uint GL_POLYGON_OFFSET_EXT = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
enum uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
enum uint GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
enum uint GL_PROVOKING_VERTEX_EXT = 0x8E4F;
enum uint GL_RASTER_MULTISAMPLE_EXT = 0x9327;
enum uint GL_RASTER_SAMPLES_EXT = 0x9328;
enum uint GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
enum uint GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
enum uint GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
enum uint GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
enum uint GL_RESCALE_NORMAL_EXT = 0x803A;
enum uint GL_COLOR_SUM_EXT = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
enum uint GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
enum uint GL_VERTEX_SHADER_BIT_EXT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002;
enum uint GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE_EXT = 0x8258;
enum uint GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
enum uint GL_SINGLE_COLOR_EXT = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
enum uint GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
enum uint GL_IMAGE_1D_EXT = 0x904C;
enum uint GL_IMAGE_2D_EXT = 0x904D;
enum uint GL_IMAGE_3D_EXT = 0x904E;
enum uint GL_IMAGE_2D_RECT_EXT = 0x904F;
enum uint GL_IMAGE_CUBE_EXT = 0x9050;
enum uint GL_IMAGE_BUFFER_EXT = 0x9051;
enum uint GL_IMAGE_1D_ARRAY_EXT = 0x9052;
enum uint GL_IMAGE_2D_ARRAY_EXT = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
enum uint GL_INT_IMAGE_1D_EXT = 0x9057;
enum uint GL_INT_IMAGE_2D_EXT = 0x9058;
enum uint GL_INT_IMAGE_3D_EXT = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
enum uint GL_INT_IMAGE_CUBE_EXT = 0x905B;
enum uint GL_INT_IMAGE_BUFFER_EXT = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
enum uint GL_STENCIL_TAG_BITS_EXT = 0x88F2;
enum uint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
enum uint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
enum uint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
enum uint GL_INCR_WRAP_EXT = 0x8507;
enum uint GL_DECR_WRAP_EXT = 0x8508;
enum uint GL_ALPHA4_EXT = 0x803B;
enum uint GL_ALPHA8_EXT = 0x803C;
enum uint GL_ALPHA12_EXT = 0x803D;
enum uint GL_ALPHA16_EXT = 0x803E;
enum uint GL_LUMINANCE4_EXT = 0x803F;
enum uint GL_LUMINANCE8_EXT = 0x8040;
enum uint GL_LUMINANCE12_EXT = 0x8041;
enum uint GL_LUMINANCE16_EXT = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
enum uint GL_INTENSITY_EXT = 0x8049;
enum uint GL_INTENSITY4_EXT = 0x804A;
enum uint GL_INTENSITY8_EXT = 0x804B;
enum uint GL_INTENSITY12_EXT = 0x804C;
enum uint GL_INTENSITY16_EXT = 0x804D;
enum uint GL_RGB2_EXT = 0x804E;
enum uint GL_RGB4_EXT = 0x804F;
enum uint GL_RGB5_EXT = 0x8050;
enum uint GL_RGB8_EXT = 0x8051;
enum uint GL_RGB10_EXT = 0x8052;
enum uint GL_RGB12_EXT = 0x8053;
enum uint GL_RGB16_EXT = 0x8054;
enum uint GL_RGBA2_EXT = 0x8055;
enum uint GL_RGBA4_EXT = 0x8056;
enum uint GL_RGB5_A1_EXT = 0x8057;
enum uint GL_RGBA8_EXT = 0x8058;
enum uint GL_RGB10_A2_EXT = 0x8059;
enum uint GL_RGBA12_EXT = 0x805A;
enum uint GL_RGBA16_EXT = 0x805B;
enum uint GL_TEXTURE_RED_SIZE_EXT = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
enum uint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
enum uint GL_REPLACE_EXT = 0x8062;
enum uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
enum uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
enum uint GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
enum uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
enum uint GL_TEXTURE_3D_EXT = 0x806F;
enum uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
enum uint GL_TEXTURE_DEPTH_EXT = 0x8071;
enum uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
enum uint GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
enum uint GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
enum uint GL_TEXTURE_BUFFER_EXT = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
enum uint GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
enum uint GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
enum uint GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
enum uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
enum uint GL_NORMAL_MAP_EXT = 0x8511;
enum uint GL_REFLECTION_MAP_EXT = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
enum uint GL_COMBINE_EXT = 0x8570;
enum uint GL_COMBINE_RGB_EXT = 0x8571;
enum uint GL_COMBINE_ALPHA_EXT = 0x8572;
enum uint GL_RGB_SCALE_EXT = 0x8573;
enum uint GL_ADD_SIGNED_EXT = 0x8574;
enum uint GL_INTERPOLATE_EXT = 0x8575;
enum uint GL_CONSTANT_EXT = 0x8576;
enum uint GL_PRIMARY_COLOR_EXT = 0x8577;
enum uint GL_PREVIOUS_EXT = 0x8578;
enum uint GL_SOURCE0_RGB_EXT = 0x8580;
enum uint GL_SOURCE1_RGB_EXT = 0x8581;
enum uint GL_SOURCE2_RGB_EXT = 0x8582;
enum uint GL_SOURCE0_ALPHA_EXT = 0x8588;
enum uint GL_SOURCE1_ALPHA_EXT = 0x8589;
enum uint GL_SOURCE2_ALPHA_EXT = 0x858A;
enum uint GL_OPERAND0_RGB_EXT = 0x8590;
enum uint GL_OPERAND1_RGB_EXT = 0x8591;
enum uint GL_OPERAND2_RGB_EXT = 0x8592;
enum uint GL_OPERAND0_ALPHA_EXT = 0x8598;
enum uint GL_OPERAND1_ALPHA_EXT = 0x8599;
enum uint GL_OPERAND2_ALPHA_EXT = 0x859A;
enum uint GL_DOT3_RGB_EXT = 0x8740;
enum uint GL_DOT3_RGBA_EXT = 0x8741;
enum uint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
enum uint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
enum uint GL_RGBA32UI_EXT = 0x8D70;
enum uint GL_RGB32UI_EXT = 0x8D71;
enum uint GL_ALPHA32UI_EXT = 0x8D72;
enum uint GL_INTENSITY32UI_EXT = 0x8D73;
enum uint GL_LUMINANCE32UI_EXT = 0x8D74;
enum uint GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
enum uint GL_RGBA16UI_EXT = 0x8D76;
enum uint GL_RGB16UI_EXT = 0x8D77;
enum uint GL_ALPHA16UI_EXT = 0x8D78;
enum uint GL_INTENSITY16UI_EXT = 0x8D79;
enum uint GL_LUMINANCE16UI_EXT = 0x8D7A;
enum uint GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
enum uint GL_RGBA8UI_EXT = 0x8D7C;
enum uint GL_RGB8UI_EXT = 0x8D7D;
enum uint GL_ALPHA8UI_EXT = 0x8D7E;
enum uint GL_INTENSITY8UI_EXT = 0x8D7F;
enum uint GL_LUMINANCE8UI_EXT = 0x8D80;
enum uint GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
enum uint GL_RGBA32I_EXT = 0x8D82;
enum uint GL_RGB32I_EXT = 0x8D83;
enum uint GL_ALPHA32I_EXT = 0x8D84;
enum uint GL_INTENSITY32I_EXT = 0x8D85;
enum uint GL_LUMINANCE32I_EXT = 0x8D86;
enum uint GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
enum uint GL_RGBA16I_EXT = 0x8D88;
enum uint GL_RGB16I_EXT = 0x8D89;
enum uint GL_ALPHA16I_EXT = 0x8D8A;
enum uint GL_INTENSITY16I_EXT = 0x8D8B;
enum uint GL_LUMINANCE16I_EXT = 0x8D8C;
enum uint GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
enum uint GL_RGBA8I_EXT = 0x8D8E;
enum uint GL_RGB8I_EXT = 0x8D8F;
enum uint GL_ALPHA8I_EXT = 0x8D90;
enum uint GL_INTENSITY8I_EXT = 0x8D91;
enum uint GL_LUMINANCE8I_EXT = 0x8D92;
enum uint GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
enum uint GL_RED_INTEGER_EXT = 0x8D94;
enum uint GL_GREEN_INTEGER_EXT = 0x8D95;
enum uint GL_BLUE_INTEGER_EXT = 0x8D96;
enum uint GL_ALPHA_INTEGER_EXT = 0x8D97;
enum uint GL_RGB_INTEGER_EXT = 0x8D98;
enum uint GL_RGBA_INTEGER_EXT = 0x8D99;
enum uint GL_BGR_INTEGER_EXT = 0x8D9A;
enum uint GL_BGRA_INTEGER_EXT = 0x8D9B;
enum uint GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
enum uint GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
enum uint GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
enum uint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
enum uint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
enum uint GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
enum uint GL_MIRROR_CLAMP_EXT = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
enum uint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
enum uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
enum uint GL_TEXTURE_RESIDENT_EXT = 0x8067;
enum uint GL_TEXTURE_1D_BINDING_EXT = 0x8068;
enum uint GL_TEXTURE_2D_BINDING_EXT = 0x8069;
enum uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
enum uint GL_PERTURB_EXT = 0x85AE;
enum uint GL_TEXTURE_NORMAL_EXT = 0x85AF;
enum uint GL_SRGB_EXT = 0x8C40;
enum uint GL_SRGB8_EXT = 0x8C41;
enum uint GL_SRGB_ALPHA_EXT = 0x8C42;
enum uint GL_SRGB8_ALPHA8_EXT = 0x8C43;
enum uint GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
enum uint GL_SLUMINANCE_EXT = 0x8C46;
enum uint GL_SLUMINANCE8_EXT = 0x8C47;
enum uint GL_COMPRESSED_SRGB_EXT = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
enum uint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
enum uint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
enum uint GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
enum uint GL_DECODE_EXT = 0x8A49;
enum uint GL_SKIP_DECODE_EXT = 0x8A4A;
enum uint GL_RGB9_E5_EXT = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
enum uint GL_ALPHA_SNORM = 0x9010;
enum uint GL_LUMINANCE_SNORM = 0x9011;
enum uint GL_LUMINANCE_ALPHA_SNORM = 0x9012;
enum uint GL_INTENSITY_SNORM = 0x9013;
enum uint GL_ALPHA8_SNORM = 0x9014;
enum uint GL_LUMINANCE8_SNORM = 0x9015;
enum uint GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
enum uint GL_INTENSITY8_SNORM = 0x9017;
enum uint GL_ALPHA16_SNORM = 0x9018;
enum uint GL_LUMINANCE16_SNORM = 0x9019;
enum uint GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
enum uint GL_INTENSITY16_SNORM = 0x901B;
enum uint GL_RED_SNORM = 0x8F90;
enum uint GL_RG_SNORM = 0x8F91;
enum uint GL_RGB_SNORM = 0x8F92;
enum uint GL_RGBA_SNORM = 0x8F93;
enum uint GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
enum uint GL_TIME_ELAPSED_EXT = 0x88BF;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
enum uint GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
enum uint GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_EXT = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
enum uint GL_VERTEX_ARRAY_EXT = 0x8074;
enum uint GL_NORMAL_ARRAY_EXT = 0x8075;
enum uint GL_COLOR_ARRAY_EXT = 0x8076;
enum uint GL_INDEX_ARRAY_EXT = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
enum uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
enum uint GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
enum uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
enum uint GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
enum uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
enum uint GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
enum uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
enum uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
enum uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
enum uint GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
enum uint GL_DOUBLE_VEC2_EXT = 0x8FFC;
enum uint GL_DOUBLE_VEC3_EXT = 0x8FFD;
enum uint GL_DOUBLE_VEC4_EXT = 0x8FFE;
enum uint GL_DOUBLE_MAT2_EXT = 0x8F46;
enum uint GL_DOUBLE_MAT3_EXT = 0x8F47;
enum uint GL_DOUBLE_MAT4_EXT = 0x8F48;
enum uint GL_DOUBLE_MAT2x3_EXT = 0x8F49;
enum uint GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
enum uint GL_VERTEX_SHADER_EXT = 0x8780;
enum uint GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
enum uint GL_OP_INDEX_EXT = 0x8782;
enum uint GL_OP_NEGATE_EXT = 0x8783;
enum uint GL_OP_DOT3_EXT = 0x8784;
enum uint GL_OP_DOT4_EXT = 0x8785;
enum uint GL_OP_MUL_EXT = 0x8786;
enum uint GL_OP_ADD_EXT = 0x8787;
enum uint GL_OP_MADD_EXT = 0x8788;
enum uint GL_OP_FRAC_EXT = 0x8789;
enum uint GL_OP_MAX_EXT = 0x878A;
enum uint GL_OP_MIN_EXT = 0x878B;
enum uint GL_OP_SET_GE_EXT = 0x878C;
enum uint GL_OP_SET_LT_EXT = 0x878D;
enum uint GL_OP_CLAMP_EXT = 0x878E;
enum uint GL_OP_FLOOR_EXT = 0x878F;
enum uint GL_OP_ROUND_EXT = 0x8790;
enum uint GL_OP_EXP_BASE_2_EXT = 0x8791;
enum uint GL_OP_LOG_BASE_2_EXT = 0x8792;
enum uint GL_OP_POWER_EXT = 0x8793;
enum uint GL_OP_RECIP_EXT = 0x8794;
enum uint GL_OP_RECIP_SQRT_EXT = 0x8795;
enum uint GL_OP_SUB_EXT = 0x8796;
enum uint GL_OP_CROSS_PRODUCT_EXT = 0x8797;
enum uint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
enum uint GL_OP_MOV_EXT = 0x8799;
enum uint GL_OUTPUT_VERTEX_EXT = 0x879A;
enum uint GL_OUTPUT_COLOR0_EXT = 0x879B;
enum uint GL_OUTPUT_COLOR1_EXT = 0x879C;
enum uint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
enum uint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
enum uint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
enum uint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
enum uint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
enum uint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
enum uint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
enum uint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
enum uint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
enum uint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
enum uint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
enum uint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
enum uint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
enum uint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
enum uint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
enum uint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
enum uint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
enum uint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
enum uint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
enum uint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
enum uint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
enum uint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
enum uint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
enum uint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
enum uint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
enum uint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
enum uint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
enum uint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
enum uint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
enum uint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
enum uint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
enum uint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
enum uint GL_OUTPUT_FOG_EXT = 0x87BD;
enum uint GL_SCALAR_EXT = 0x87BE;
enum uint GL_VECTOR_EXT = 0x87BF;
enum uint GL_MATRIX_EXT = 0x87C0;
enum uint GL_VARIANT_EXT = 0x87C1;
enum uint GL_INVARIANT_EXT = 0x87C2;
enum uint GL_LOCAL_CONSTANT_EXT = 0x87C3;
enum uint GL_LOCAL_EXT = 0x87C4;
enum uint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
enum uint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
enum uint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
enum uint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
enum uint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
enum uint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
enum uint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
enum uint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
enum uint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
enum uint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
enum uint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
enum uint GL_X_EXT = 0x87D5;
enum uint GL_Y_EXT = 0x87D6;
enum uint GL_Z_EXT = 0x87D7;
enum uint GL_W_EXT = 0x87D8;
enum uint GL_NEGATIVE_X_EXT = 0x87D9;
enum uint GL_NEGATIVE_Y_EXT = 0x87DA;
enum uint GL_NEGATIVE_Z_EXT = 0x87DB;
enum uint GL_NEGATIVE_W_EXT = 0x87DC;
enum uint GL_ZERO_EXT = 0x87DD;
enum uint GL_ONE_EXT = 0x87DE;
enum uint GL_NEGATIVE_ONE_EXT = 0x87DF;
enum uint GL_NORMALIZED_RANGE_EXT = 0x87E0;
enum uint GL_FULL_RANGE_EXT = 0x87E1;
enum uint GL_CURRENT_VERTEX_EXT = 0x87E2;
enum uint GL_MVP_MATRIX_EXT = 0x87E3;
enum uint GL_VARIANT_VALUE_EXT = 0x87E4;
enum uint GL_VARIANT_DATATYPE_EXT = 0x87E5;
enum uint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
enum uint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
enum uint GL_VARIANT_ARRAY_EXT = 0x87E8;
enum uint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
enum uint GL_INVARIANT_VALUE_EXT = 0x87EA;
enum uint GL_INVARIANT_DATATYPE_EXT = 0x87EB;
enum uint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
enum uint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
enum uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
enum uint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
enum uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
enum uint GL_MODELVIEW1_MATRIX_EXT = 0x8506;
enum uint GL_VERTEX_WEIGHTING_EXT = 0x8509;
enum uint GL_MODELVIEW0_EXT = 0x1700;
enum uint GL_MODELVIEW1_EXT = 0x850A;
enum uint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
enum uint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
enum uint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
enum uint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
enum uint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
enum uint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
enum uint GL_SYNC_X11_FENCE_EXT = 0x90E1;
enum uint GL_IGNORE_BORDER_HP = 0x8150;
enum uint GL_CONSTANT_BORDER_HP = 0x8151;
enum uint GL_REPLICATE_BORDER_HP = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
enum uint GL_IMAGE_SCALE_X_HP = 0x8155;
enum uint GL_IMAGE_SCALE_Y_HP = 0x8156;
enum uint GL_IMAGE_TRANSLATE_X_HP = 0x8157;
enum uint GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
enum uint GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
enum uint GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
enum uint GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
enum uint GL_IMAGE_MAG_FILTER_HP = 0x815C;
enum uint GL_IMAGE_MIN_FILTER_HP = 0x815D;
enum uint GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
enum uint GL_CUBIC_HP = 0x815F;
enum uint GL_AVERAGE_HP = 0x8160;
enum uint GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
enum uint GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
enum uint GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
enum uint GL_OCCLUSION_TEST_HP = 0x8165;
enum uint GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
enum uint GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
enum uint GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
enum uint GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
enum uint GL_CULL_VERTEX_IBM = 103050;
enum uint GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
enum uint GL_ALL_STATIC_DATA_IBM = 103060;
enum uint GL_STATIC_VERTEX_ARRAY_IBM = 103061;
enum uint GL_MIRRORED_REPEAT_IBM = 0x8370;
enum uint GL_VERTEX_ARRAY_LIST_IBM = 103070;
enum uint GL_NORMAL_ARRAY_LIST_IBM = 103071;
enum uint GL_COLOR_ARRAY_LIST_IBM = 103072;
enum uint GL_INDEX_ARRAY_LIST_IBM = 103073;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
enum uint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
enum uint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
enum uint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
enum uint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
enum uint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
enum uint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
enum uint GL_RED_MIN_CLAMP_INGR = 0x8560;
enum uint GL_GREEN_MIN_CLAMP_INGR = 0x8561;
enum uint GL_BLUE_MIN_CLAMP_INGR = 0x8562;
enum uint GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
enum uint GL_RED_MAX_CLAMP_INGR = 0x8564;
enum uint GL_GREEN_MAX_CLAMP_INGR = 0x8565;
enum uint GL_BLUE_MAX_CLAMP_INGR = 0x8566;
enum uint GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
enum uint GL_INTERLACE_READ_INGR = 0x8568;
enum uint GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
enum uint GL_LAYOUT_DEFAULT_INTEL = 0;
enum uint GL_LAYOUT_LINEAR_INTEL = 1;
enum uint GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
enum uint GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
enum uint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
enum uint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
enum uint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
enum uint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
enum uint GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
enum uint GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
enum uint GL_PERFQUERY_WAIT_INTEL = 0x83FB;
enum uint GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
enum uint GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
enum uint GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
enum uint GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
enum uint GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
enum uint GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
enum uint GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
enum uint GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
enum uint GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
enum uint GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
enum uint GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
enum uint GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
enum uint GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
enum uint GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
enum uint GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
enum uint GL_MULTIPLY_KHR = 0x9294;
enum uint GL_SCREEN_KHR = 0x9295;
enum uint GL_OVERLAY_KHR = 0x9296;
enum uint GL_DARKEN_KHR = 0x9297;
enum uint GL_LIGHTEN_KHR = 0x9298;
enum uint GL_COLORDODGE_KHR = 0x9299;
enum uint GL_COLORBURN_KHR = 0x929A;
enum uint GL_HARDLIGHT_KHR = 0x929B;
enum uint GL_SOFTLIGHT_KHR = 0x929C;
enum uint GL_DIFFERENCE_KHR = 0x929E;
enum uint GL_EXCLUSION_KHR = 0x92A0;
enum uint GL_HSL_HUE_KHR = 0x92AD;
enum uint GL_HSL_SATURATION_KHR = 0x92AE;
enum uint GL_HSL_COLOR_KHR = 0x92AF;
enum uint GL_HSL_LUMINOSITY_KHR = 0x92B0;
enum uint GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
enum uint GL_DEBUG_SOURCE_API_KHR = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_KHR = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_KHR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_KHR = 0x8251;
enum uint GL_DEBUG_TYPE_MARKER_KHR = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
enum uint GL_BUFFER_KHR = 0x82E0;
enum uint GL_SHADER_KHR = 0x82E1;
enum uint GL_PROGRAM_KHR = 0x82E2;
enum uint GL_VERTEX_ARRAY_KHR = 0x8074;
enum uint GL_QUERY_KHR = 0x82E3;
enum uint GL_PROGRAM_PIPELINE_KHR = 0x82E4;
enum uint GL_SAMPLER_KHR = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH_KHR = 0x82E8;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_KHR = 0x9148;
enum uint GL_DEBUG_OUTPUT_KHR = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
enum uint GL_STACK_OVERFLOW_KHR = 0x0503;
enum uint GL_STACK_UNDERFLOW_KHR = 0x0504;
enum uint GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
enum uint GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
enum uint GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
enum uint GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_KHR = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_KHR = 0x8261;
enum uint GL_CONTEXT_LOST_KHR = 0x0507;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
enum uint GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
enum uint GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
enum uint GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
enum uint GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
enum uint GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
enum uint GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
enum uint GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
enum uint GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
enum uint GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
enum uint GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
enum uint GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
enum uint GL_TEXTURE_1D_STACK_MESAX = 0x8759;
enum uint GL_TEXTURE_2D_STACK_MESAX = 0x875A;
enum uint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
enum uint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
enum uint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
enum uint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
enum uint GL_PACK_INVERT_MESA = 0x8758;
enum uint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
enum uint GL_YCBCR_MESA = 0x8757;
enum uint GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
enum uint GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
enum uint GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
enum uint GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
enum uint GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
enum uint GL_BLEND_OVERLAP_NV = 0x9281;
enum uint GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
enum uint GL_BLUE_NV = 0x1905;
enum uint GL_COLORBURN_NV = 0x929A;
enum uint GL_COLORDODGE_NV = 0x9299;
enum uint GL_CONJOINT_NV = 0x9284;
enum uint GL_CONTRAST_NV = 0x92A1;
enum uint GL_DARKEN_NV = 0x9297;
enum uint GL_DIFFERENCE_NV = 0x929E;
enum uint GL_DISJOINT_NV = 0x9283;
enum uint GL_DST_ATOP_NV = 0x928F;
enum uint GL_DST_IN_NV = 0x928B;
enum uint GL_DST_NV = 0x9287;
enum uint GL_DST_OUT_NV = 0x928D;
enum uint GL_DST_OVER_NV = 0x9289;
enum uint GL_EXCLUSION_NV = 0x92A0;
enum uint GL_GREEN_NV = 0x1904;
enum uint GL_HARDLIGHT_NV = 0x929B;
enum uint GL_HARDMIX_NV = 0x92A9;
enum uint GL_HSL_COLOR_NV = 0x92AF;
enum uint GL_HSL_HUE_NV = 0x92AD;
enum uint GL_HSL_LUMINOSITY_NV = 0x92B0;
enum uint GL_HSL_SATURATION_NV = 0x92AE;
enum uint GL_INVERT_OVG_NV = 0x92B4;
enum uint GL_INVERT_RGB_NV = 0x92A3;
enum uint GL_LIGHTEN_NV = 0x9298;
enum uint GL_LINEARBURN_NV = 0x92A5;
enum uint GL_LINEARDODGE_NV = 0x92A4;
enum uint GL_LINEARLIGHT_NV = 0x92A7;
enum uint GL_MINUS_CLAMPED_NV = 0x92B3;
enum uint GL_MINUS_NV = 0x929F;
enum uint GL_MULTIPLY_NV = 0x9294;
enum uint GL_OVERLAY_NV = 0x9296;
enum uint GL_PINLIGHT_NV = 0x92A8;
enum uint GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
enum uint GL_PLUS_CLAMPED_NV = 0x92B1;
enum uint GL_PLUS_DARKER_NV = 0x9292;
enum uint GL_PLUS_NV = 0x9291;
enum uint GL_RED_NV = 0x1903;
enum uint GL_SCREEN_NV = 0x9295;
enum uint GL_SOFTLIGHT_NV = 0x929C;
enum uint GL_SRC_ATOP_NV = 0x928E;
enum uint GL_SRC_IN_NV = 0x928A;
enum uint GL_SRC_NV = 0x9286;
enum uint GL_SRC_OUT_NV = 0x928C;
enum uint GL_SRC_OVER_NV = 0x9288;
enum uint GL_UNCORRELATED_NV = 0x9282;
enum uint GL_VIVIDLIGHT_NV = 0x92A6;
enum uint GL_XOR_NV = 0x1506;
enum uint GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
enum uint GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
enum uint GL_NOP_COMMAND_NV = 0x0001;
enum uint GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
enum uint GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
enum uint GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
enum uint GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
enum uint GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
enum uint GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
enum uint GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
enum uint GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
enum uint GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
enum uint GL_BLEND_COLOR_COMMAND_NV = 0x000B;
enum uint GL_STENCIL_REF_COMMAND_NV = 0x000C;
enum uint GL_LINE_WIDTH_COMMAND_NV = 0x000D;
enum uint GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
enum uint GL_ALPHA_REF_COMMAND_NV = 0x000F;
enum uint GL_VIEWPORT_COMMAND_NV = 0x0010;
enum uint GL_SCISSOR_COMMAND_NV = 0x0011;
enum uint GL_FRONT_FACE_COMMAND_NV = 0x0012;
enum uint GL_COMPUTE_PROGRAM_NV = 0x90FB;
enum uint GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
enum uint GL_QUERY_WAIT_NV = 0x8E13;
enum uint GL_QUERY_NO_WAIT_NV = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
enum uint GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
enum uint GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
enum uint GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
enum uint GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
enum uint GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
enum uint GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
enum uint GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
enum uint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
enum uint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
enum uint GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
enum uint GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
enum uint GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
enum uint GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
enum uint GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
enum uint GL_DEPTH_CLAMP_NV = 0x864F;
enum uint GL_EVAL_2D_NV = 0x86C0;
enum uint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
enum uint GL_MAP_TESSELLATION_NV = 0x86C2;
enum uint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
enum uint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
enum uint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
enum uint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
enum uint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
enum uint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
enum uint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
enum uint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
enum uint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
enum uint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
enum uint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
enum uint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
enum uint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
enum uint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
enum uint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
enum uint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
enum uint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
enum uint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
enum uint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
enum uint GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
enum uint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
enum uint GL_SAMPLE_POSITION_NV = 0x8E50;
enum uint GL_SAMPLE_MASK_NV = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
enum uint GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
enum uint GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
enum uint GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
enum uint GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
enum uint GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
enum uint GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
enum uint GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
enum uint GL_ALL_COMPLETED_NV = 0x84F2;
enum uint GL_FENCE_STATUS_NV = 0x84F3;
enum uint GL_FENCE_CONDITION_NV = 0x84F4;
enum uint GL_FILL_RECTANGLE_NV = 0x933C;
enum uint GL_FLOAT_R_NV = 0x8880;
enum uint GL_FLOAT_RG_NV = 0x8881;
enum uint GL_FLOAT_RGB_NV = 0x8882;
enum uint GL_FLOAT_RGBA_NV = 0x8883;
enum uint GL_FLOAT_R16_NV = 0x8884;
enum uint GL_FLOAT_R32_NV = 0x8885;
enum uint GL_FLOAT_RG16_NV = 0x8886;
enum uint GL_FLOAT_RG32_NV = 0x8887;
enum uint GL_FLOAT_RGB16_NV = 0x8888;
enum uint GL_FLOAT_RGB32_NV = 0x8889;
enum uint GL_FLOAT_RGBA16_NV = 0x888A;
enum uint GL_FLOAT_RGBA32_NV = 0x888B;
enum uint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
enum uint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
enum uint GL_FLOAT_RGBA_MODE_NV = 0x888E;
enum uint GL_FOG_DISTANCE_MODE_NV = 0x855A;
enum uint GL_EYE_RADIAL_NV = 0x855B;
enum uint GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
enum uint GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
enum uint GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
enum uint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
enum uint GL_FRAGMENT_PROGRAM_NV = 0x8870;
enum uint GL_MAX_TEXTURE_COORDS_NV = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
enum uint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
enum uint GL_PROGRAM_ERROR_STRING_NV = 0x8874;
enum uint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
enum uint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
enum uint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
enum uint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
enum uint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
enum uint GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
enum uint GL_COLOR_SAMPLES_NV = 0x8E20;
enum uint GL_DEPTH_SAMPLES_NV = 0x932D;
enum uint GL_STENCIL_SAMPLES_NV = 0x932E;
enum uint GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
enum uint GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
enum uint GL_COVERAGE_MODULATION_NV = 0x9332;
enum uint GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
enum uint GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
enum uint GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
enum uint GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
enum uint GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
enum uint GL_GEOMETRY_PROGRAM_NV = 0x8C26;
enum uint GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
enum uint GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
enum uint GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
enum uint GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
enum uint GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
enum uint GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
enum uint GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
enum uint GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
enum uint GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
enum uint GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
enum uint GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
enum uint GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
enum uint GL_HALF_FLOAT_NV = 0x140B;
enum uint GL_MULTISAMPLES_NV = 0x9371;
enum uint GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
enum uint GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
enum uint GL_CONFORMANT_NV = 0x9374;
enum uint GL_MAX_SHININESS_NV = 0x8504;
enum uint GL_MAX_SPOT_EXPONENT_NV = 0x8505;
enum uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
enum uint GL_PIXEL_COUNTER_BITS_NV = 0x8864;
enum uint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
enum uint GL_PIXEL_COUNT_NV = 0x8866;
enum uint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
enum uint GL_DEPTH_STENCIL_NV = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_NV = 0x84FA;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
enum uint GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
enum uint GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
enum uint GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
enum uint GL_PATH_FORMAT_SVG_NV = 0x9070;
enum uint GL_PATH_FORMAT_PS_NV = 0x9071;
enum uint GL_STANDARD_FONT_NAME_NV = 0x9072;
enum uint GL_SYSTEM_FONT_NAME_NV = 0x9073;
enum uint GL_FILE_NAME_NV = 0x9074;
enum uint GL_PATH_STROKE_WIDTH_NV = 0x9075;
enum uint GL_PATH_END_CAPS_NV = 0x9076;
enum uint GL_PATH_INITIAL_END_CAP_NV = 0x9077;
enum uint GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
enum uint GL_PATH_JOIN_STYLE_NV = 0x9079;
enum uint GL_PATH_MITER_LIMIT_NV = 0x907A;
enum uint GL_PATH_DASH_CAPS_NV = 0x907B;
enum uint GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
enum uint GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
enum uint GL_PATH_DASH_OFFSET_NV = 0x907E;
enum uint GL_PATH_CLIENT_LENGTH_NV = 0x907F;
enum uint GL_PATH_FILL_MODE_NV = 0x9080;
enum uint GL_PATH_FILL_MASK_NV = 0x9081;
enum uint GL_PATH_FILL_COVER_MODE_NV = 0x9082;
enum uint GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
enum uint GL_PATH_STROKE_MASK_NV = 0x9084;
enum uint GL_COUNT_UP_NV = 0x9088;
enum uint GL_COUNT_DOWN_NV = 0x9089;
enum uint GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
enum uint GL_CONVEX_HULL_NV = 0x908B;
enum uint GL_BOUNDING_BOX_NV = 0x908D;
enum uint GL_TRANSLATE_X_NV = 0x908E;
enum uint GL_TRANSLATE_Y_NV = 0x908F;
enum uint GL_TRANSLATE_2D_NV = 0x9090;
enum uint GL_TRANSLATE_3D_NV = 0x9091;
enum uint GL_AFFINE_2D_NV = 0x9092;
enum uint GL_AFFINE_3D_NV = 0x9094;
enum uint GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
enum uint GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
enum uint GL_UTF8_NV = 0x909A;
enum uint GL_UTF16_NV = 0x909B;
enum uint GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
enum uint GL_PATH_COMMAND_COUNT_NV = 0x909D;
enum uint GL_PATH_COORD_COUNT_NV = 0x909E;
enum uint GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
enum uint GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
enum uint GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
enum uint GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
enum uint GL_SQUARE_NV = 0x90A3;
enum uint GL_ROUND_NV = 0x90A4;
enum uint GL_TRIANGULAR_NV = 0x90A5;
enum uint GL_BEVEL_NV = 0x90A6;
enum uint GL_MITER_REVERT_NV = 0x90A7;
enum uint GL_MITER_TRUNCATE_NV = 0x90A8;
enum uint GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
enum uint GL_USE_MISSING_GLYPH_NV = 0x90AA;
enum uint GL_PATH_ERROR_POSITION_NV = 0x90AB;
enum uint GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
enum uint GL_ADJACENT_PAIRS_NV = 0x90AE;
enum uint GL_FIRST_TO_REST_NV = 0x90AF;
enum uint GL_PATH_GEN_MODE_NV = 0x90B0;
enum uint GL_PATH_GEN_COEFF_NV = 0x90B1;
enum uint GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
enum uint GL_PATH_STENCIL_FUNC_NV = 0x90B7;
enum uint GL_PATH_STENCIL_REF_NV = 0x90B8;
enum uint GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
enum uint GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
enum uint GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
enum uint GL_MOVE_TO_RESETS_NV = 0x90B5;
enum uint GL_MOVE_TO_CONTINUES_NV = 0x90B6;
enum uint GL_CLOSE_PATH_NV = 0x00;
enum uint GL_MOVE_TO_NV = 0x02;
enum uint GL_RELATIVE_MOVE_TO_NV = 0x03;
enum uint GL_LINE_TO_NV = 0x04;
enum uint GL_RELATIVE_LINE_TO_NV = 0x05;
enum uint GL_HORIZONTAL_LINE_TO_NV = 0x06;
enum uint GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
enum uint GL_VERTICAL_LINE_TO_NV = 0x08;
enum uint GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
enum uint GL_QUADRATIC_CURVE_TO_NV = 0x0A;
enum uint GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
enum uint GL_CUBIC_CURVE_TO_NV = 0x0C;
enum uint GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
enum uint GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
enum uint GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
enum uint GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
enum uint GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
enum uint GL_SMALL_CCW_ARC_TO_NV = 0x12;
enum uint GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
enum uint GL_SMALL_CW_ARC_TO_NV = 0x14;
enum uint GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
enum uint GL_LARGE_CCW_ARC_TO_NV = 0x16;
enum uint GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
enum uint GL_LARGE_CW_ARC_TO_NV = 0x18;
enum uint GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
enum uint GL_RESTART_PATH_NV = 0xF0;
enum uint GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
enum uint GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
enum uint GL_RECT_NV = 0xF6;
enum uint GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
enum uint GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
enum uint GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
enum uint GL_ARC_TO_NV = 0xFE;
enum uint GL_RELATIVE_ARC_TO_NV = 0xFF;
enum uint GL_BOLD_BIT_NV = 0x01;
enum uint GL_ITALIC_BIT_NV = 0x02;
enum uint GL_GLYPH_WIDTH_BIT_NV = 0x01;
enum uint GL_GLYPH_HEIGHT_BIT_NV = 0x02;
enum uint GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
enum uint GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
enum uint GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
enum uint GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
enum uint GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
enum uint GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
enum uint GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
enum uint GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
enum uint GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
enum uint GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
enum uint GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
enum uint GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
enum uint GL_FONT_ASCENDER_BIT_NV = 0x00200000;
enum uint GL_FONT_DESCENDER_BIT_NV = 0x00400000;
enum uint GL_FONT_HEIGHT_BIT_NV = 0x00800000;
enum uint GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
enum uint GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
enum uint GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
enum uint GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
enum uint GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
enum uint GL_ROUNDED_RECT_NV = 0xE8;
enum uint GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
enum uint GL_ROUNDED_RECT2_NV = 0xEA;
enum uint GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
enum uint GL_ROUNDED_RECT4_NV = 0xEC;
enum uint GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
enum uint GL_ROUNDED_RECT8_NV = 0xEE;
enum uint GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
enum uint GL_RELATIVE_RECT_NV = 0xF7;
enum uint GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
enum uint GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
enum uint GL_FONT_UNAVAILABLE_NV = 0x936A;
enum uint GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
enum uint GL_CONIC_CURVE_TO_NV = 0x1A;
enum uint GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
enum uint GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
enum uint GL_STANDARD_FONT_FORMAT_NV = 0x936C;
enum uint GL_2_BYTES_NV = 0x1407;
enum uint GL_3_BYTES_NV = 0x1408;
enum uint GL_4_BYTES_NV = 0x1409;
enum uint GL_EYE_LINEAR_NV = 0x2400;
enum uint GL_OBJECT_LINEAR_NV = 0x2401;
enum uint GL_CONSTANT_NV = 0x8576;
enum uint GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
enum uint GL_PRIMARY_COLOR_NV = 0x852C;
enum uint GL_SECONDARY_COLOR_NV = 0x852D;
enum uint GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
enum uint GL_PATH_PROJECTION_NV = 0x1701;
enum uint GL_PATH_MODELVIEW_NV = 0x1700;
enum uint GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
enum uint GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
enum uint GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
enum uint GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
enum uint GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
enum uint GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
enum uint GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
enum uint GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
enum uint GL_FRAGMENT_INPUT_NV = 0x936D;
enum uint GL_SHARED_EDGE_NV = 0xC0;
enum uint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
enum uint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
enum uint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
enum uint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
enum uint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
enum uint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
enum uint GL_POINT_SPRITE_NV = 0x8861;
enum uint GL_COORD_REPLACE_NV = 0x8862;
enum uint GL_POINT_SPRITE_R_MODE_NV = 0x8863;
enum uint GL_FRAME_NV = 0x8E26;
enum uint GL_FIELDS_NV = 0x8E27;
enum uint GL_CURRENT_TIME_NV = 0x8E28;
enum uint GL_NUM_FILL_STREAMS_NV = 0x8E29;
enum uint GL_PRESENT_TIME_NV = 0x8E2A;
enum uint GL_PRESENT_DURATION_NV = 0x8E2B;
enum uint GL_PRIMITIVE_RESTART_NV = 0x8558;
enum uint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
enum uint GL_REGISTER_COMBINERS_NV = 0x8522;
enum uint GL_VARIABLE_A_NV = 0x8523;
enum uint GL_VARIABLE_B_NV = 0x8524;
enum uint GL_VARIABLE_C_NV = 0x8525;
enum uint GL_VARIABLE_D_NV = 0x8526;
enum uint GL_VARIABLE_E_NV = 0x8527;
enum uint GL_VARIABLE_F_NV = 0x8528;
enum uint GL_VARIABLE_G_NV = 0x8529;
enum uint GL_CONSTANT_COLOR0_NV = 0x852A;
enum uint GL_CONSTANT_COLOR1_NV = 0x852B;
enum uint GL_SPARE0_NV = 0x852E;
enum uint GL_SPARE1_NV = 0x852F;
enum uint GL_DISCARD_NV = 0x8530;
enum uint GL_E_TIMES_F_NV = 0x8531;
enum uint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
enum uint GL_UNSIGNED_IDENTITY_NV = 0x8536;
enum uint GL_UNSIGNED_INVERT_NV = 0x8537;
enum uint GL_EXPAND_NORMAL_NV = 0x8538;
enum uint GL_EXPAND_NEGATE_NV = 0x8539;
enum uint GL_HALF_BIAS_NORMAL_NV = 0x853A;
enum uint GL_HALF_BIAS_NEGATE_NV = 0x853B;
enum uint GL_SIGNED_IDENTITY_NV = 0x853C;
enum uint GL_SIGNED_NEGATE_NV = 0x853D;
enum uint GL_SCALE_BY_TWO_NV = 0x853E;
enum uint GL_SCALE_BY_FOUR_NV = 0x853F;
enum uint GL_SCALE_BY_ONE_HALF_NV = 0x8540;
enum uint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
enum uint GL_COMBINER_INPUT_NV = 0x8542;
enum uint GL_COMBINER_MAPPING_NV = 0x8543;
enum uint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
enum uint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
enum uint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
enum uint GL_COMBINER_MUX_SUM_NV = 0x8547;
enum uint GL_COMBINER_SCALE_NV = 0x8548;
enum uint GL_COMBINER_BIAS_NV = 0x8549;
enum uint GL_COMBINER_AB_OUTPUT_NV = 0x854A;
enum uint GL_COMBINER_CD_OUTPUT_NV = 0x854B;
enum uint GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
enum uint GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
enum uint GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
enum uint GL_COLOR_SUM_CLAMP_NV = 0x854F;
enum uint GL_COMBINER0_NV = 0x8550;
enum uint GL_COMBINER1_NV = 0x8551;
enum uint GL_COMBINER2_NV = 0x8552;
enum uint GL_COMBINER3_NV = 0x8553;
enum uint GL_COMBINER4_NV = 0x8554;
enum uint GL_COMBINER5_NV = 0x8555;
enum uint GL_COMBINER6_NV = 0x8556;
enum uint GL_COMBINER7_NV = 0x8557;
enum uint GL_PER_STAGE_CONSTANTS_NV = 0x8535;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
enum uint GL_SAMPLE_LOCATION_NV = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
enum uint GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
enum uint GL_GPU_ADDRESS_NV = 0x8F34;
enum uint GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
enum uint GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
enum uint GL_WARP_SIZE_NV = 0x9339;
enum uint GL_WARPS_PER_SM_NV = 0x933A;
enum uint GL_SM_COUNT_NV = 0x933B;
enum uint GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
enum uint GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
enum uint GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
enum uint GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
enum uint GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
enum uint GL_EMBOSS_LIGHT_NV = 0x855D;
enum uint GL_EMBOSS_CONSTANT_NV = 0x855E;
enum uint GL_EMBOSS_MAP_NV = 0x855F;
enum uint GL_NORMAL_MAP_NV = 0x8511;
enum uint GL_REFLECTION_MAP_NV = 0x8512;
enum uint GL_COMBINE4_NV = 0x8503;
enum uint GL_SOURCE3_RGB_NV = 0x8583;
enum uint GL_SOURCE3_ALPHA_NV = 0x858B;
enum uint GL_OPERAND3_RGB_NV = 0x8593;
enum uint GL_OPERAND3_ALPHA_NV = 0x859B;
enum uint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
enum uint GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
enum uint GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
enum uint GL_TEXTURE_RECTANGLE_NV = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
enum uint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
enum uint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
enum uint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
enum uint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
enum uint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
enum uint GL_SHADER_CONSISTENT_NV = 0x86DD;
enum uint GL_TEXTURE_SHADER_NV = 0x86DE;
enum uint GL_SHADER_OPERATION_NV = 0x86DF;
enum uint GL_CULL_MODES_NV = 0x86E0;
enum uint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
enum uint GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
enum uint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
enum uint GL_CONST_EYE_NV = 0x86E5;
enum uint GL_PASS_THROUGH_NV = 0x86E6;
enum uint GL_CULL_FRAGMENT_NV = 0x86E7;
enum uint GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
enum uint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
enum uint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
enum uint GL_DOT_PRODUCT_NV = 0x86EC;
enum uint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
enum uint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
enum uint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
enum uint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
enum uint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
enum uint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
enum uint GL_HILO_NV = 0x86F4;
enum uint GL_DSDT_NV = 0x86F5;
enum uint GL_DSDT_MAG_NV = 0x86F6;
enum uint GL_DSDT_MAG_VIB_NV = 0x86F7;
enum uint GL_HILO16_NV = 0x86F8;
enum uint GL_SIGNED_HILO_NV = 0x86F9;
enum uint GL_SIGNED_HILO16_NV = 0x86FA;
enum uint GL_SIGNED_RGBA_NV = 0x86FB;
enum uint GL_SIGNED_RGBA8_NV = 0x86FC;
enum uint GL_SIGNED_RGB_NV = 0x86FE;
enum uint GL_SIGNED_RGB8_NV = 0x86FF;
enum uint GL_SIGNED_LUMINANCE_NV = 0x8701;
enum uint GL_SIGNED_LUMINANCE8_NV = 0x8702;
enum uint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
enum uint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
enum uint GL_SIGNED_ALPHA_NV = 0x8705;
enum uint GL_SIGNED_ALPHA8_NV = 0x8706;
enum uint GL_SIGNED_INTENSITY_NV = 0x8707;
enum uint GL_SIGNED_INTENSITY8_NV = 0x8708;
enum uint GL_DSDT8_NV = 0x8709;
enum uint GL_DSDT8_MAG8_NV = 0x870A;
enum uint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
enum uint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
enum uint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
enum uint GL_HI_SCALE_NV = 0x870E;
enum uint GL_LO_SCALE_NV = 0x870F;
enum uint GL_DS_SCALE_NV = 0x8710;
enum uint GL_DT_SCALE_NV = 0x8711;
enum uint GL_MAGNITUDE_SCALE_NV = 0x8712;
enum uint GL_VIBRANCE_SCALE_NV = 0x8713;
enum uint GL_HI_BIAS_NV = 0x8714;
enum uint GL_LO_BIAS_NV = 0x8715;
enum uint GL_DS_BIAS_NV = 0x8716;
enum uint GL_DT_BIAS_NV = 0x8717;
enum uint GL_MAGNITUDE_BIAS_NV = 0x8718;
enum uint GL_VIBRANCE_BIAS_NV = 0x8719;
enum uint GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
enum uint GL_TEXTURE_HI_SIZE_NV = 0x871B;
enum uint GL_TEXTURE_LO_SIZE_NV = 0x871C;
enum uint GL_TEXTURE_DS_SIZE_NV = 0x871D;
enum uint GL_TEXTURE_DT_SIZE_NV = 0x871E;
enum uint GL_TEXTURE_MAG_SIZE_NV = 0x871F;
enum uint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
enum uint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
enum uint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
enum uint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
enum uint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
enum uint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
enum uint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
enum uint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
enum uint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
enum uint GL_HILO8_NV = 0x885E;
enum uint GL_SIGNED_HILO8_NV = 0x885F;
enum uint GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
enum uint GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
enum uint GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
enum uint GL_TEXTURE_COORD_NV = 0x8C79;
enum uint GL_CLIP_DISTANCE_NV = 0x8C7A;
enum uint GL_VERTEX_ID_NV = 0x8C7B;
enum uint GL_PRIMITIVE_ID_NV = 0x8C7C;
enum uint GL_GENERIC_ATTRIB_NV = 0x8C7D;
enum uint GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
enum uint GL_ACTIVE_VARYINGS_NV = 0x8C81;
enum uint GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
enum uint GL_PRIMITIVES_GENERATED_NV = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_NV = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
enum uint GL_LAYER_NV = 0x8DAA;
enum uint GL_NEXT_BUFFER_NV = -2;
enum uint GL_SKIP_COMPONENTS4_NV = -3;
enum uint GL_SKIP_COMPONENTS3_NV = -4;
enum uint GL_SKIP_COMPONENTS2_NV = -5;
enum uint GL_SKIP_COMPONENTS1_NV = -6;
enum uint GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
enum uint GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
enum uint GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
enum uint GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
enum uint GL_SURFACE_STATE_NV = 0x86EB;
enum uint GL_SURFACE_REGISTERED_NV = 0x86FD;
enum uint GL_SURFACE_MAPPED_NV = 0x8700;
enum uint GL_WRITE_DISCARD_NV = 0x88BE;
enum uint GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
enum uint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
enum uint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
enum uint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
enum uint GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
enum uint GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
enum uint GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
enum uint GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
enum uint GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
enum uint GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
enum uint GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
enum uint GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
enum uint GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
enum uint GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
enum uint GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
enum uint GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
enum uint GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
enum uint GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
enum uint GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
enum uint GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
enum uint GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
enum uint GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
enum uint GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
enum uint GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
enum uint GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
enum uint GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
enum uint GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
enum uint GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
enum uint GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
enum uint GL_VERTEX_PROGRAM_NV = 0x8620;
enum uint GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
enum uint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
enum uint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
enum uint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
enum uint GL_CURRENT_ATTRIB_NV = 0x8626;
enum uint GL_PROGRAM_LENGTH_NV = 0x8627;
enum uint GL_PROGRAM_STRING_NV = 0x8628;
enum uint GL_MODELVIEW_PROJECTION_NV = 0x8629;
enum uint GL_IDENTITY_NV = 0x862A;
enum uint GL_INVERSE_NV = 0x862B;
enum uint GL_TRANSPOSE_NV = 0x862C;
enum uint GL_INVERSE_TRANSPOSE_NV = 0x862D;
enum uint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
enum uint GL_MAX_TRACK_MATRICES_NV = 0x862F;
enum uint GL_MATRIX0_NV = 0x8630;
enum uint GL_MATRIX1_NV = 0x8631;
enum uint GL_MATRIX2_NV = 0x8632;
enum uint GL_MATRIX3_NV = 0x8633;
enum uint GL_MATRIX4_NV = 0x8634;
enum uint GL_MATRIX5_NV = 0x8635;
enum uint GL_MATRIX6_NV = 0x8636;
enum uint GL_MATRIX7_NV = 0x8637;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
enum uint GL_CURRENT_MATRIX_NV = 0x8641;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
enum uint GL_PROGRAM_PARAMETER_NV = 0x8644;
enum uint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
enum uint GL_PROGRAM_TARGET_NV = 0x8646;
enum uint GL_PROGRAM_RESIDENT_NV = 0x8647;
enum uint GL_TRACK_MATRIX_NV = 0x8648;
enum uint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
enum uint GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
enum uint GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
enum uint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
enum uint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
enum uint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
enum uint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
enum uint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
enum uint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
enum uint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
enum uint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
enum uint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
enum uint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
enum uint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
enum uint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
enum uint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
enum uint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
enum uint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
enum uint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
enum uint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
enum uint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
enum uint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
enum uint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
enum uint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
enum uint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
enum uint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
enum uint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
enum uint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
enum uint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
enum uint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
enum uint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
enum uint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
enum uint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
enum uint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
enum uint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
enum uint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
enum uint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
enum uint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
enum uint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
enum uint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
enum uint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
enum uint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
enum uint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
enum uint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
enum uint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
enum uint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
enum uint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
enum uint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
enum uint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
enum uint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
enum uint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
enum uint GL_VIDEO_BUFFER_NV = 0x9020;
enum uint GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
enum uint GL_FIELD_UPPER_NV = 0x9022;
enum uint GL_FIELD_LOWER_NV = 0x9023;
enum uint GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
enum uint GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
enum uint GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
enum uint GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
enum uint GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
enum uint GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
enum uint GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
enum uint GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
enum uint GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
enum uint GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
enum uint GL_PARTIAL_SUCCESS_NV = 0x902E;
enum uint GL_SUCCESS_NV = 0x902F;
enum uint GL_FAILURE_NV = 0x9030;
enum uint GL_YCBYCR8_422_NV = 0x9031;
enum uint GL_YCBAYCR8A_4224_NV = 0x9032;
enum uint GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
enum uint GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
enum uint GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
enum uint GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
enum uint GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
enum uint GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
enum uint GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
enum uint GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
enum uint GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
enum uint GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
enum uint GL_PALETTE4_RGB8_OES = 0x8B90;
enum uint GL_PALETTE4_RGBA8_OES = 0x8B91;
enum uint GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
enum uint GL_PALETTE4_RGBA4_OES = 0x8B93;
enum uint GL_PALETTE4_RGB5_A1_OES = 0x8B94;
enum uint GL_PALETTE8_RGB8_OES = 0x8B95;
enum uint GL_PALETTE8_RGBA8_OES = 0x8B96;
enum uint GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
enum uint GL_PALETTE8_RGBA4_OES = 0x8B98;
enum uint GL_PALETTE8_RGB5_A1_OES = 0x8B99;
enum uint GL_FIXED_OES = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
enum uint GL_INTERLACE_OML = 0x8980;
enum uint GL_INTERLACE_READ_OML = 0x8981;
enum uint GL_PACK_RESAMPLE_OML = 0x8984;
enum uint GL_UNPACK_RESAMPLE_OML = 0x8985;
enum uint GL_RESAMPLE_REPLICATE_OML = 0x8986;
enum uint GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
enum uint GL_RESAMPLE_AVERAGE_OML = 0x8988;
enum uint GL_RESAMPLE_DECIMATE_OML = 0x8989;
enum uint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
enum uint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
enum uint GL_MAX_VIEWS_OVR = 0x9631;
enum uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
enum uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
enum uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
enum uint GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
enum uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
enum uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
enum uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
enum uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
enum uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
enum uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
enum uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
enum uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
enum uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
enum uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
enum uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
enum uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
enum uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
enum uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
enum uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
enum uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
enum uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
enum uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
enum uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
enum uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
enum uint GL_COLOR3_BIT_PGI = 0x00010000;
enum uint GL_COLOR4_BIT_PGI = 0x00020000;
enum uint GL_EDGEFLAG_BIT_PGI = 0x00040000;
enum uint GL_INDEX_BIT_PGI = 0x00080000;
enum uint GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
enum uint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
enum uint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
enum uint GL_MAT_EMISSION_BIT_PGI = 0x00800000;
enum uint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
enum uint GL_MAT_SHININESS_BIT_PGI = 0x02000000;
enum uint GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
enum uint GL_NORMAL_BIT_PGI = 0x08000000;
enum uint GL_TEXCOORD1_BIT_PGI = 0x10000000;
enum uint GL_TEXCOORD2_BIT_PGI = 0x20000000;
enum uint GL_TEXCOORD3_BIT_PGI = 0x40000000;
enum uint GL_TEXCOORD4_BIT_PGI = 0x80000000;
enum uint GL_VERTEX23_BIT_PGI = 0x00000004;
enum uint GL_VERTEX4_BIT_PGI = 0x00000008;
enum uint GL_SCREEN_COORDINATES_REND = 0x8490;
enum uint GL_INVERTED_SCREEN_W_REND = 0x8491;
enum uint GL_RGB_S3TC = 0x83A0;
enum uint GL_RGB4_S3TC = 0x83A1;
enum uint GL_RGBA_S3TC = 0x83A2;
enum uint GL_RGBA4_S3TC = 0x83A3;
enum uint GL_RGBA_DXT5_S3TC = 0x83A4;
enum uint GL_RGBA4_DXT5_S3TC = 0x83A5;
enum uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
enum uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
enum uint GL_LINEAR_DETAIL_SGIS = 0x8097;
enum uint GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
enum uint GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
enum uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
enum uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
enum uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
enum uint GL_FOG_FUNC_SGIS = 0x812A;
enum uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
enum uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
enum uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
enum uint GL_MULTISAMPLE_SGIS = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
enum uint GL_SAMPLE_MASK_SGIS = 0x80A0;
enum uint GL_1PASS_SGIS = 0x80A1;
enum uint GL_2PASS_0_SGIS = 0x80A2;
enum uint GL_2PASS_1_SGIS = 0x80A3;
enum uint GL_4PASS_0_SGIS = 0x80A4;
enum uint GL_4PASS_1_SGIS = 0x80A5;
enum uint GL_4PASS_2_SGIS = 0x80A6;
enum uint GL_4PASS_3_SGIS = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
enum uint GL_SAMPLES_SGIS = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
enum uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
enum uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
enum uint GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
enum uint GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
enum uint GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
enum uint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
enum uint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
enum uint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
enum uint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
enum uint GL_EYE_POINT_SGIS = 0x81F4;
enum uint GL_OBJECT_POINT_SGIS = 0x81F5;
enum uint GL_EYE_LINE_SGIS = 0x81F6;
enum uint GL_OBJECT_LINE_SGIS = 0x81F7;
enum uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
enum uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
enum uint GL_LINEAR_SHARPEN_SGIS = 0x80AD;
enum uint GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
enum uint GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
enum uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
enum uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
enum uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
enum uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
enum uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
enum uint GL_TEXTURE_4D_SGIS = 0x8134;
enum uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
enum uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
enum uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
enum uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
enum uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
enum uint GL_CLAMP_TO_BORDER_SGIS = 0x812D;
enum uint GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
enum uint GL_CLAMP_TO_EDGE_SGIS = 0x812F;
enum uint GL_FILTER4_SGIS = 0x8146;
enum uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
enum uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
enum uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
enum uint GL_DUAL_ALPHA4_SGIS = 0x8110;
enum uint GL_DUAL_ALPHA8_SGIS = 0x8111;
enum uint GL_DUAL_ALPHA12_SGIS = 0x8112;
enum uint GL_DUAL_ALPHA16_SGIS = 0x8113;
enum uint GL_DUAL_LUMINANCE4_SGIS = 0x8114;
enum uint GL_DUAL_LUMINANCE8_SGIS = 0x8115;
enum uint GL_DUAL_LUMINANCE12_SGIS = 0x8116;
enum uint GL_DUAL_LUMINANCE16_SGIS = 0x8117;
enum uint GL_DUAL_INTENSITY4_SGIS = 0x8118;
enum uint GL_DUAL_INTENSITY8_SGIS = 0x8119;
enum uint GL_DUAL_INTENSITY12_SGIS = 0x811A;
enum uint GL_DUAL_INTENSITY16_SGIS = 0x811B;
enum uint GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
enum uint GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
enum uint GL_QUAD_ALPHA4_SGIS = 0x811E;
enum uint GL_QUAD_ALPHA8_SGIS = 0x811F;
enum uint GL_QUAD_LUMINANCE4_SGIS = 0x8120;
enum uint GL_QUAD_LUMINANCE8_SGIS = 0x8121;
enum uint GL_QUAD_INTENSITY4_SGIS = 0x8122;
enum uint GL_QUAD_INTENSITY8_SGIS = 0x8123;
enum uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
enum uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
enum uint GL_ASYNC_MARKER_SGIX = 0x8329;
enum uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
enum uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
enum uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
enum uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
enum uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
enum uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
enum uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
enum uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
enum uint GL_ALPHA_MIN_SGIX = 0x8320;
enum uint GL_ALPHA_MAX_SGIX = 0x8321;
enum uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
enum uint GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
enum uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
enum uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
enum uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
enum uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
enum uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
enum uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
enum uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
enum uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
enum uint GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
enum uint GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
enum uint GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
enum uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
enum uint GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
enum uint GL_FOG_OFFSET_SGIX = 0x8198;
enum uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
enum uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
enum uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
enum uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
enum uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
enum uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
enum uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
enum uint GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
enum uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
enum uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
enum uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
enum uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
enum uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
enum uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
enum uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
enum uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
enum uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
enum uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
enum uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
enum uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
enum uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
enum uint GL_FRAMEZOOM_SGIX = 0x818B;
enum uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
enum uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
enum uint GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
enum uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
enum uint GL_INTERLACE_SGIX = 0x8094;
enum uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
enum uint GL_LIST_PRIORITY_SGIX = 0x8182;
enum uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
enum uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
enum uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
enum uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
enum uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
enum uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
enum uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
enum uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
enum uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
enum uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
enum uint GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
enum uint GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
enum uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
enum uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
enum uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
enum uint GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
enum uint GL_REFERENCE_PLANE_SGIX = 0x817D;
enum uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
enum uint GL_PACK_RESAMPLE_SGIX = 0x842E;
enum uint GL_UNPACK_RESAMPLE_SGIX = 0x842F;
enum uint GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
enum uint GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
enum uint GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
enum uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
enum uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
enum uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
enum uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
enum uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
enum uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
enum uint GL_SPRITE_SGIX = 0x8148;
enum uint GL_SPRITE_MODE_SGIX = 0x8149;
enum uint GL_SPRITE_AXIS_SGIX = 0x814A;
enum uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
enum uint GL_SPRITE_AXIAL_SGIX = 0x814C;
enum uint GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
enum uint GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
enum uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
enum uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
enum uint GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
enum uint GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
enum uint GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
enum uint GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
enum uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
enum uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
enum uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
enum uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
enum uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
enum uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
enum uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
enum uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
enum uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
enum uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
enum uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
enum uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
enum uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
enum uint GL_YCRCB_422_SGIX = 0x81BB;
enum uint GL_YCRCB_444_SGIX = 0x81BC;
enum uint GL_YCRCB_SGIX = 0x8318;
enum uint GL_YCRCBA_SGIX = 0x8319;
enum uint GL_COLOR_MATRIX_SGI = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
enum uint GL_COLOR_TABLE_SGI = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
enum uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
enum uint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
enum uint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
enum uint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
enum uint GL_WRAP_BORDER_SUN = 0x81D4;
enum uint GL_GLOBAL_ALPHA_SUN = 0x81D9;
enum uint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
enum uint GL_QUAD_MESH_SUN = 0x8614;
enum uint GL_TRIANGLE_MESH_SUN = 0x8615;
enum uint GL_SLICE_ACCUM_SUN = 0x85CC;
enum uint GL_RESTART_SUN = 0x0001;
enum uint GL_REPLACE_MIDDLE_SUN = 0x0002;
enum uint GL_REPLACE_OLDEST_SUN = 0x0003;
enum uint GL_TRIANGLE_LIST_SUN = 0x81D7;
enum uint GL_REPLACEMENT_CODE_SUN = 0x81D8;
enum uint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
enum uint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
enum uint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
enum uint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
enum uint GL_R1UI_V3F_SUN = 0x85C4;
enum uint GL_R1UI_C4UB_V3F_SUN = 0x85C5;
enum uint GL_R1UI_C3F_V3F_SUN = 0x85C6;
enum uint GL_R1UI_N3F_V3F_SUN = 0x85C7;
enum uint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
enum uint GL_R1UI_T2F_V3F_SUN = 0x85C9;
enum uint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
enum uint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
enum uint GL_PHONG_WIN = 0x80EA;
enum uint GL_PHONG_HINT_WIN = 0x80EB;
enum uint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;

alias glbfn_glCullFace = void function(GLenum);
alias glbfn_glFrontFace = void function(GLenum);
alias glbfn_glHint = void function(GLenum, GLenum);
alias glbfn_glLineWidth = void function(GLfloat);
alias glbfn_glPointSize = void function(GLfloat);
alias glbfn_glPolygonMode = void function(GLenum, GLenum);
alias glbfn_glScissor = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glTexParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexImage1D = void function(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage2D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glDrawBuffer = void function(GLenum);
alias glbfn_glClear = void function(GLbitfield);
alias glbfn_glClearColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearStencil = void function(GLint);
alias glbfn_glClearDepth = void function(GLdouble);
alias glbfn_glStencilMask = void function(GLuint);
alias glbfn_glColorMask = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDepthMask = void function(GLboolean);
alias glbfn_glDisable = void function(GLenum);
alias glbfn_glEnable = void function(GLenum);
alias glbfn_glFinish = void function();
alias glbfn_glFlush = void function();
alias glbfn_glBlendFunc = void function(GLenum, GLenum);
alias glbfn_glLogicOp = void function(GLenum);
alias glbfn_glStencilFunc = void function(GLenum, GLint, GLuint);
alias glbfn_glStencilOp = void function(GLenum, GLenum, GLenum);
alias glbfn_glDepthFunc = void function(GLenum);
alias glbfn_glPixelStoref = void function(GLenum, GLfloat);
alias glbfn_glPixelStorei = void function(GLenum, GLint);
alias glbfn_glReadBuffer = void function(GLenum);
alias glbfn_glReadPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*);
alias glbfn_glGetBooleanv = void function(GLenum, GLboolean*);
alias glbfn_glGetDoublev = void function(GLenum, GLdouble*);
alias glbfn_glGetError = GLenum function();
alias glbfn_glGetFloatv = void function(GLenum, GLfloat*);
alias glbfn_glGetIntegerv = void function(GLenum, GLint*);
alias glbfn_glGetString = const(char)* function(GLenum);
alias glbfn_glGetTexImage = void function(GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTexParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexLevelParameterfv = void function(GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTexLevelParameteriv = void function(GLenum, GLint, GLenum, GLint*);
alias glbfn_glIsEnabled = GLboolean function(GLenum);
alias glbfn_glDepthRange = void function(GLdouble, GLdouble);
alias glbfn_glViewport = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glNewList = void function(GLuint, GLenum);
alias glbfn_glEndList = void function();
alias glbfn_glCallList = void function(GLuint);
alias glbfn_glCallLists = void function(GLsizei, GLenum, const(void)*);
alias glbfn_glDeleteLists = void function(GLuint, GLsizei);
alias glbfn_glGenLists = GLuint function(GLsizei);
alias glbfn_glListBase = void function(GLuint);
alias glbfn_glBegin = void function(GLenum);
alias glbfn_glBitmap = void function(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const(GLubyte)*);
alias glbfn_glColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glColor3bv = void function(const(GLbyte)*);
alias glbfn_glColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glColor3dv = void function(const(GLdouble)*);
alias glbfn_glColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fv = void function(const(GLfloat)*);
alias glbfn_glColor3i = void function(GLint, GLint, GLint);
alias glbfn_glColor3iv = void function(const(GLint)*);
alias glbfn_glColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glColor3sv = void function(const(GLshort)*);
alias glbfn_glColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glColor3ubv = void function(const(GLubyte)*);
alias glbfn_glColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glColor3uiv = void function(const(GLuint)*);
alias glbfn_glColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glColor3usv = void function(const(GLushort)*);
alias glbfn_glColor4b = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glColor4bv = void function(const(GLbyte)*);
alias glbfn_glColor4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glColor4dv = void function(const(GLdouble)*);
alias glbfn_glColor4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fv = void function(const(GLfloat)*);
alias glbfn_glColor4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glColor4iv = void function(const(GLint)*);
alias glbfn_glColor4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glColor4sv = void function(const(GLshort)*);
alias glbfn_glColor4ub = void function(GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glColor4ubv = void function(const(GLubyte)*);
alias glbfn_glColor4ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColor4uiv = void function(const(GLuint)*);
alias glbfn_glColor4us = void function(GLushort, GLushort, GLushort, GLushort);
alias glbfn_glColor4usv = void function(const(GLushort)*);
alias glbfn_glEdgeFlag = void function(GLboolean);
alias glbfn_glEdgeFlagv = void function(const(GLboolean)*);
alias glbfn_glEnd = void function();
alias glbfn_glIndexd = void function(GLdouble);
alias glbfn_glIndexdv = void function(const(GLdouble)*);
alias glbfn_glIndexf = void function(GLfloat);
alias glbfn_glIndexfv = void function(const(GLfloat)*);
alias glbfn_glIndexi = void function(GLint);
alias glbfn_glIndexiv = void function(const(GLint)*);
alias glbfn_glIndexs = void function(GLshort);
alias glbfn_glIndexsv = void function(const(GLshort)*);
alias glbfn_glNormal3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glNormal3bv = void function(const(GLbyte)*);
alias glbfn_glNormal3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glNormal3dv = void function(const(GLdouble)*);
alias glbfn_glNormal3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fv = void function(const(GLfloat)*);
alias glbfn_glNormal3i = void function(GLint, GLint, GLint);
alias glbfn_glNormal3iv = void function(const(GLint)*);
alias glbfn_glNormal3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glNormal3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos2d = void function(GLdouble, GLdouble);
alias glbfn_glRasterPos2dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos2f = void function(GLfloat, GLfloat);
alias glbfn_glRasterPos2fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos2i = void function(GLint, GLint);
alias glbfn_glRasterPos2iv = void function(const(GLint)*);
alias glbfn_glRasterPos2s = void function(GLshort, GLshort);
alias glbfn_glRasterPos2sv = void function(const(GLshort)*);
alias glbfn_glRasterPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos3dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos3fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos3i = void function(GLint, GLint, GLint);
alias glbfn_glRasterPos3iv = void function(const(GLint)*);
alias glbfn_glRasterPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glRasterPos3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos4dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos4fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRasterPos4iv = void function(const(GLint)*);
alias glbfn_glRasterPos4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRasterPos4sv = void function(const(GLshort)*);
alias glbfn_glRectd = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRectdv = void function(const(GLdouble)*, const(GLdouble)*);
alias glbfn_glRectf = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRectfv = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glRecti = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRectiv = void function(const(GLint)*, const(GLint)*);
alias glbfn_glRects = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRectsv = void function(const(GLshort)*, const(GLshort)*);
alias glbfn_glTexCoord1d = void function(GLdouble);
alias glbfn_glTexCoord1dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord1f = void function(GLfloat);
alias glbfn_glTexCoord1fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord1i = void function(GLint);
alias glbfn_glTexCoord1iv = void function(const(GLint)*);
alias glbfn_glTexCoord1s = void function(GLshort);
alias glbfn_glTexCoord1sv = void function(const(GLshort)*);
alias glbfn_glTexCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glTexCoord2dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glTexCoord2fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord2i = void function(GLint, GLint);
alias glbfn_glTexCoord2iv = void function(const(GLint)*);
alias glbfn_glTexCoord2s = void function(GLshort, GLshort);
alias glbfn_glTexCoord2sv = void function(const(GLshort)*);
alias glbfn_glTexCoord3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord3dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord3fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord3i = void function(GLint, GLint, GLint);
alias glbfn_glTexCoord3iv = void function(const(GLint)*);
alias glbfn_glTexCoord3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glTexCoord3sv = void function(const(GLshort)*);
alias glbfn_glTexCoord4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord4dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glTexCoord4iv = void function(const(GLint)*);
alias glbfn_glTexCoord4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glTexCoord4sv = void function(const(GLshort)*);
alias glbfn_glVertex2d = void function(GLdouble, GLdouble);
alias glbfn_glVertex2dv = void function(const(GLdouble)*);
alias glbfn_glVertex2f = void function(GLfloat, GLfloat);
alias glbfn_glVertex2fv = void function(const(GLfloat)*);
alias glbfn_glVertex2i = void function(GLint, GLint);
alias glbfn_glVertex2iv = void function(const(GLint)*);
alias glbfn_glVertex2s = void function(GLshort, GLshort);
alias glbfn_glVertex2sv = void function(const(GLshort)*);
alias glbfn_glVertex3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex3dv = void function(const(GLdouble)*);
alias glbfn_glVertex3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex3fv = void function(const(GLfloat)*);
alias glbfn_glVertex3i = void function(GLint, GLint, GLint);
alias glbfn_glVertex3iv = void function(const(GLint)*);
alias glbfn_glVertex3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glVertex3sv = void function(const(GLshort)*);
alias glbfn_glVertex4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex4dv = void function(const(GLdouble)*);
alias glbfn_glVertex4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex4fv = void function(const(GLfloat)*);
alias glbfn_glVertex4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glVertex4iv = void function(const(GLint)*);
alias glbfn_glVertex4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertex4sv = void function(const(GLshort)*);
alias glbfn_glClipPlane = void function(GLenum, const(GLdouble)*);
alias glbfn_glColorMaterial = void function(GLenum, GLenum);
alias glbfn_glFogf = void function(GLenum, GLfloat);
alias glbfn_glFogfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glFogi = void function(GLenum, GLint);
alias glbfn_glFogiv = void function(GLenum, const(GLint)*);
alias glbfn_glLightf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glLightfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glLighti = void function(GLenum, GLenum, GLint);
alias glbfn_glLightiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glLightModelf = void function(GLenum, GLfloat);
alias glbfn_glLightModelfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glLightModeli = void function(GLenum, GLint);
alias glbfn_glLightModeliv = void function(GLenum, const(GLint)*);
alias glbfn_glLineStipple = void function(GLint, GLushort);
alias glbfn_glMaterialf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glMaterialfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMateriali = void function(GLenum, GLenum, GLint);
alias glbfn_glMaterialiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPolygonStipple = void function(const(GLubyte)*);
alias glbfn_glShadeModel = void function(GLenum);
alias glbfn_glTexEnvf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexEnvfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexEnvi = void function(GLenum, GLenum, GLint);
alias glbfn_glTexEnviv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexGend = void function(GLenum, GLenum, GLdouble);
alias glbfn_glTexGendv = void function(GLenum, GLenum, const(GLdouble)*);
alias glbfn_glTexGenf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexGenfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexGeni = void function(GLenum, GLenum, GLint);
alias glbfn_glTexGeniv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFeedbackBuffer = void function(GLsizei, GLenum, GLfloat*);
alias glbfn_glSelectBuffer = void function(GLsizei, GLuint*);
alias glbfn_glRenderMode = GLint function(GLenum);
alias glbfn_glInitNames = void function();
alias glbfn_glLoadName = void function(GLuint);
alias glbfn_glPassThrough = void function(GLfloat);
alias glbfn_glPopName = void function();
alias glbfn_glPushName = void function(GLuint);
alias glbfn_glClearAccum = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearIndex = void function(GLfloat);
alias glbfn_glIndexMask = void function(GLuint);
alias glbfn_glAccum = void function(GLenum, GLfloat);
alias glbfn_glPopAttrib = void function();
alias glbfn_glPushAttrib = void function(GLbitfield);
alias glbfn_glMap1d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap1f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMap2d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap2f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapGrid1d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid1f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glMapGrid2d = void function(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid2f = void function(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
alias glbfn_glEvalCoord1d = void function(GLdouble);
alias glbfn_glEvalCoord1dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord1f = void function(GLfloat);
alias glbfn_glEvalCoord1fv = void function(const(GLfloat)*);
alias glbfn_glEvalCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glEvalCoord2dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glEvalCoord2fv = void function(const(GLfloat)*);
alias glbfn_glEvalMesh1 = void function(GLenum, GLint, GLint);
alias glbfn_glEvalPoint1 = void function(GLint);
alias glbfn_glEvalMesh2 = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glEvalPoint2 = void function(GLint, GLint);
alias glbfn_glAlphaFunc = void function(GLenum, GLfloat);
alias glbfn_glPixelZoom = void function(GLfloat, GLfloat);
alias glbfn_glPixelTransferf = void function(GLenum, GLfloat);
alias glbfn_glPixelTransferi = void function(GLenum, GLint);
alias glbfn_glPixelMapfv = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glPixelMapuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glPixelMapusv = void function(GLenum, GLsizei, const(GLushort)*);
alias glbfn_glCopyPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum);
alias glbfn_glDrawPixels = void function(GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetClipPlane = void function(GLenum, GLdouble*);
alias glbfn_glGetLightfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetLightiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapdv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetMapfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMaterialfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMaterialiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelMapfv = void function(GLenum, GLfloat*);
alias glbfn_glGetPixelMapuiv = void function(GLenum, GLuint*);
alias glbfn_glGetPixelMapusv = void function(GLenum, GLushort*);
alias glbfn_glGetPolygonStipple = void function(GLubyte*);
alias glbfn_glGetTexEnvfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexEnviv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexGendv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetTexGenfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexGeniv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsList = GLboolean function(GLuint);
alias glbfn_glFrustum = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glLoadIdentity = void function();
alias glbfn_glLoadMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadMatrixd = void function(const(GLdouble)*);
alias glbfn_glMatrixMode = void function(GLenum);
alias glbfn_glMultMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultMatrixd = void function(const(GLdouble)*);
alias glbfn_glOrtho = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glPopMatrix = void function();
alias glbfn_glPushMatrix = void function();
alias glbfn_glRotated = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRotatef = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glScaled = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glScalef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTranslated = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTranslatef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glDrawArrays = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawElements = void function(GLenum, GLsizei, GLenum, const(void)*);
alias glbfn_glGetPointerv = void function(GLenum, void**);
alias glbfn_glPolygonOffset = void function(GLfloat, GLfloat);
alias glbfn_glCopyTexImage1D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindTexture = void function(GLenum, GLuint);
alias glbfn_glDeleteTextures = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTextures = void function(GLsizei, GLuint*);
alias glbfn_glIsTexture = GLboolean function(GLuint);
alias glbfn_glArrayElement = void function(GLint);
alias glbfn_glColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glDisableClientState = void function(GLenum);
alias glbfn_glEdgeFlagPointer = void function(GLsizei, const(void)*);
alias glbfn_glEnableClientState = void function(GLenum);
alias glbfn_glIndexPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glInterleavedArrays = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glNormalPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glTexCoordPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glAreTexturesResident = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glPrioritizeTextures = void function(GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glIndexub = void function(GLubyte);
alias glbfn_glIndexubv = void function(const(GLubyte)*);
alias glbfn_glPopClientAttrib = void function();
alias glbfn_glPushClientAttrib = void function(GLbitfield);
alias glbfn_glDrawRangeElements = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glTexImage3D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glActiveTexture = void function(GLenum);
alias glbfn_glSampleCoverage = void function(GLfloat, GLboolean);
alias glbfn_glCompressedTexImage3D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1D = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImage = void function(GLenum, GLint, void*);
alias glbfn_glClientActiveTexture = void function(GLenum);
alias glbfn_glMultiTexCoord1d = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1f = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1i = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1s = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2d = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2f = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2i = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2s = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3d = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3f = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3i = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3s = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4d = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4f = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4i = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4s = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4sv = void function(GLenum, const(GLshort)*);
alias glbfn_glLoadTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glBlendFuncSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glMultiDrawArrays = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElements = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glPointParameterf = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glPointParameteri = void function(GLenum, GLint);
alias glbfn_glPointParameteriv = void function(GLenum, const(GLint)*);
alias glbfn_glFogCoordf = void function(GLfloat);
alias glbfn_glFogCoordfv = void function(const(GLfloat)*);
alias glbfn_glFogCoordd = void function(GLdouble);
alias glbfn_glFogCoorddv = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glSecondaryColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bv = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dv = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fv = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3i = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3iv = void function(const(GLint)*);
alias glbfn_glSecondaryColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3sv = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubv = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uiv = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usv = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glWindowPos2d = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos2f = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos2i = void function(GLint, GLint);
alias glbfn_glWindowPos2iv = void function(const(GLint)*);
alias glbfn_glWindowPos2s = void function(GLshort, GLshort);
alias glbfn_glWindowPos2sv = void function(const(GLshort)*);
alias glbfn_glWindowPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos3i = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3iv = void function(const(GLint)*);
alias glbfn_glWindowPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3sv = void function(const(GLshort)*);
alias glbfn_glBlendColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquation = void function(GLenum);
alias glbfn_glGenQueries = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueries = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQuery = GLboolean function(GLuint);
alias glbfn_glBeginQuery = void function(GLenum, GLuint);
alias glbfn_glEndQuery = void function(GLenum);
alias glbfn_glGetQueryiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBindBuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffers = void function(GLsizei, GLuint*);
alias glbfn_glIsBuffer = GLboolean function(GLuint);
alias glbfn_glBufferData = void function(GLenum, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glGetBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, void*);
alias glbfn_glMapBuffer = void* function(GLenum, GLenum);
alias glbfn_glUnmapBuffer = GLboolean function(GLenum);
alias glbfn_glGetBufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointerv = void function(GLenum, GLenum, void**);
alias glbfn_glBlendEquationSeparate = void function(GLenum, GLenum);
alias glbfn_glDrawBuffers = void function(GLsizei, const(GLenum)*);
alias glbfn_glStencilOpSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparate = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glStencilMaskSeparate = void function(GLenum, GLuint);
alias glbfn_glAttachShader = void function(GLuint, GLuint);
alias glbfn_glBindAttribLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glCompileShader = void function(GLuint);
alias glbfn_glCreateProgram = GLuint function();
alias glbfn_glCreateShader = GLuint function(GLenum);
alias glbfn_glDeleteProgram = void function(GLuint);
alias glbfn_glDeleteShader = void function(GLuint);
alias glbfn_glDetachShader = void function(GLuint, GLuint);
alias glbfn_glDisableVertexAttribArray = void function(GLuint);
alias glbfn_glEnableVertexAttribArray = void function(GLuint);
alias glbfn_glGetActiveAttrib = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetActiveUniform = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetAttachedShaders = void function(GLuint, GLsizei, GLsizei*, GLuint*);
alias glbfn_glGetAttribLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetProgramiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetShaderInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderSource = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetUniformfv = void function(GLuint, GLint, GLfloat*);
alias glbfn_glGetUniformiv = void function(GLuint, GLint, GLint*);
alias glbfn_glGetVertexAttribdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgram = GLboolean function(GLuint);
alias glbfn_glIsShader = GLboolean function(GLuint);
alias glbfn_glLinkProgram = void function(GLuint);
alias glbfn_glShaderSource = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glUseProgram = void function(GLuint);
alias glbfn_glUniform1f = void function(GLint, GLfloat);
alias glbfn_glUniform2f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3f = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4f = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1i = void function(GLint, GLint);
alias glbfn_glUniform2i = void function(GLint, GLint, GLint);
alias glbfn_glUniform3i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4i = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glValidateProgram = void function(GLuint);
alias glbfn_glVertexAttrib1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1f = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1s = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2f = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2s = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3f = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3s = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nbv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4Niv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4Nsv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nub = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4Nubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4Nuiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4Nusv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4f = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4s = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointer = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glUniformMatrix2x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix2x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glColorMaski = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetBooleani_v = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glGetIntegeri_v = void function(GLenum, GLuint, GLint*);
alias glbfn_glEnablei = void function(GLenum, GLuint);
alias glbfn_glDisablei = void function(GLenum, GLuint);
alias glbfn_glIsEnabledi = GLboolean function(GLenum, GLuint);
alias glbfn_glBeginTransformFeedback = void function(GLenum);
alias glbfn_glEndTransformFeedback = void function();
alias glbfn_glBindBufferRange = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferBase = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryings = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVarying = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glClampColor = void function(GLenum, GLenum);
alias glbfn_glBeginConditionalRender = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRender = void function();
alias glbfn_glVertexAttribIPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glVertexAttribI1i = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2i = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1ui = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4ui = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glGetUniformuiv = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1ui = void function(GLint, GLuint);
alias glbfn_glUniform2ui = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3ui = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4ui = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glTexParameterIiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuiv = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearBufferiv = void function(GLenum, GLint, const(GLint)*);
alias glbfn_glClearBufferuiv = void function(GLenum, GLint, const(GLuint)*);
alias glbfn_glClearBufferfv = void function(GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearBufferfi = void function(GLenum, GLint, GLfloat, GLint);
alias glbfn_glGetStringi = const(char)* function(GLenum, GLuint);
alias glbfn_glIsRenderbuffer = GLboolean function(GLuint);
alias glbfn_glBindRenderbuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorage = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebuffer = GLboolean function(GLuint);
alias glbfn_glBindFramebuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatus = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3D = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbuffer = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameteriv = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmap = void function(GLenum);
alias glbfn_glBlitFramebuffer = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glFramebufferTextureLayer = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glMapBufferRange = void* function(GLenum, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedBufferRange = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glBindVertexArray = void function(GLuint);
alias glbfn_glDeleteVertexArrays = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArray = GLboolean function(GLuint);
alias glbfn_glDrawArraysInstanced = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstanced = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glTexBuffer = void function(GLenum, GLenum, GLuint);
alias glbfn_glPrimitiveRestartIndex = void function(GLuint);
alias glbfn_glCopyBufferSubData = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glGetUniformIndices = void function(GLuint, GLsizei, const(GLchar*)*, GLuint*);
alias glbfn_glGetActiveUniformsiv = void function(GLuint, GLsizei, const(GLuint)*, GLenum, GLint*);
alias glbfn_glGetActiveUniformName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformBlockIndex = GLuint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveUniformBlockiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveUniformBlockName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glDrawElementsBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawRangeElementsBaseVertex = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawElementsInstancedBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint);
alias glbfn_glMultiDrawElementsBaseVertex = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei, const(GLint)*);
alias glbfn_glProvokingVertex = void function(GLenum);
//alias glbfn_glFenceSync = GLsync function(GLenum, GLbitfield);
//alias glbfn_glIsSync = GLboolean function(GLsync);
//alias glbfn_glDeleteSync = void function(GLsync);
//alias glbfn_glClientWaitSync = GLenum function(GLsync, GLbitfield, GLuint64);
//alias glbfn_glWaitSync = void function(GLsync, GLbitfield, GLuint64);
alias glbfn_glGetInteger64v = void function(GLenum, GLint64*);
//alias glbfn_glGetSynciv = void function(GLsync, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetInteger64i_v = void function(GLenum, GLuint, GLint64*);
alias glbfn_glGetBufferParameteri64v = void function(GLenum, GLenum, GLint64*);
alias glbfn_glFramebufferTexture = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glTexImage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glGetMultisamplefv = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaski = void function(GLuint, GLbitfield);
alias glbfn_glBindFragDataLocationIndexed = void function(GLuint, GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataIndex = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGenSamplers = void function(GLsizei, GLuint*);
alias glbfn_glDeleteSamplers = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsSampler = GLboolean function(GLuint);
alias glbfn_glBindSampler = void function(GLuint, GLuint);
alias glbfn_glSamplerParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glSamplerParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glSamplerParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glSamplerParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glGetSamplerParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetSamplerParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glQueryCounter = void function(GLuint, GLenum);
alias glbfn_glGetQueryObjecti64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64v = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glVertexAttribDivisor = void function(GLuint, GLuint);
alias glbfn_glVertexAttribP1ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP1uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP2ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP2uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP3ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP3uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP4ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP4uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexP2ui = void function(GLenum, GLuint);
alias glbfn_glVertexP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP3ui = void function(GLenum, GLuint);
alias glbfn_glVertexP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP4ui = void function(GLenum, GLuint);
alias glbfn_glVertexP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP1ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP1uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP2ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP3ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP4ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP1ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP1uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP2ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP2uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP3ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP3uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP4ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP4uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glNormalP3ui = void function(GLenum, GLuint);
alias glbfn_glNormalP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP3ui = void function(GLenum, GLuint);
alias glbfn_glColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP4ui = void function(GLenum, GLuint);
alias glbfn_glColorP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glSecondaryColorP3ui = void function(GLenum, GLuint);
alias glbfn_glSecondaryColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMinSampleShading = void function(GLfloat);
alias glbfn_glBlendEquationi = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparatei = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunci = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparatei = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysIndirect = void function(GLenum, const(void)*);
alias glbfn_glDrawElementsIndirect = void function(GLenum, GLenum, const(void)*);
alias glbfn_glUniform1d = void function(GLint, GLdouble);
alias glbfn_glUniform2d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glUniform3d = void function(GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform4d = void function(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform1dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform2dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform3dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform4dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniformMatrix2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glGetUniformdv = void function(GLuint, GLint, GLdouble*);
alias glbfn_glGetSubroutineUniformLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetSubroutineIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetActiveSubroutineUniformiv = void function(GLuint, GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveSubroutineUniformName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetActiveSubroutineName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformSubroutinesuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetUniformSubroutineuiv = void function(GLenum, GLint, GLuint*);
alias glbfn_glGetProgramStageiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glPatchParameteri = void function(GLenum, GLint);
alias glbfn_glPatchParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glBindTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacks = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedback = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedback = void function();
alias glbfn_glResumeTransformFeedback = void function();
alias glbfn_glDrawTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDrawTransformFeedbackStream = void function(GLenum, GLuint, GLuint);
alias glbfn_glBeginQueryIndexed = void function(GLenum, GLuint, GLuint);
alias glbfn_glEndQueryIndexed = void function(GLenum, GLuint);
alias glbfn_glGetQueryIndexediv = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glReleaseShaderCompiler = void function();
alias glbfn_glShaderBinary = void function(GLsizei, const(GLuint)*, GLenum, const(void)*, GLsizei);
alias glbfn_glGetShaderPrecisionFormat = void function(GLenum, GLenum, GLint*, GLint*);
alias glbfn_glDepthRangef = void function(GLfloat, GLfloat);
alias glbfn_glClearDepthf = void function(GLfloat);
alias glbfn_glGetProgramBinary = void function(GLuint, GLsizei, GLsizei*, GLenum*, void*);
alias glbfn_glProgramBinary = void function(GLuint, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glUseProgramStages = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glActiveShaderProgram = void function(GLuint, GLuint);
alias glbfn_glCreateShaderProgramv = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glBindProgramPipeline = void function(GLuint);
alias glbfn_glDeleteProgramPipelines = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glIsProgramPipeline = GLboolean function(GLuint);
alias glbfn_glGetProgramPipelineiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1i = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform1iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform1f = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform1fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1d = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform1dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform1ui = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform1uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform2iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2f = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform2fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2d = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform2dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2ui = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform2uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3ui = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4i = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4ui = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniformMatrix2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glValidateProgramPipeline = void function(GLuint);
alias glbfn_glGetProgramPipelineInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glVertexAttribL1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glViewportArrayv = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glViewportIndexedf = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glViewportIndexedfv = void function(GLuint, const(GLfloat)*);
alias glbfn_glScissorArrayv = void function(GLuint, GLsizei, const(GLint)*);
alias glbfn_glScissorIndexed = void function(GLuint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glScissorIndexedv = void function(GLuint, const(GLint)*);
alias glbfn_glDepthRangeArrayv = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glDepthRangeIndexed = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glGetFloati_v = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_v = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glDrawArraysInstancedBaseInstance = void function(GLenum, GLint, GLsizei, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseVertexBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint, GLuint);
alias glbfn_glGetInternalformativ = void function(GLenum, GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetActiveAtomicCounterBufferiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glBindImageTexture = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
alias glbfn_glMemoryBarrier = void function(GLbitfield);
alias glbfn_glTexStorage1D = void function(GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTexStorage2D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTexStorage3D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glDrawTransformFeedbackInstanced = void function(GLenum, GLuint, GLsizei);
alias glbfn_glDrawTransformFeedbackStreamInstanced = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glClearBufferData = void function(GLenum, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearBufferSubData = void function(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glDispatchCompute = void function(GLuint, GLuint, GLuint);
alias glbfn_glDispatchComputeIndirect = void function(GLintptr);
alias glbfn_glCopyImageSubData = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glFramebufferParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glGetFramebufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetInternalformati64v = void function(GLenum, GLenum, GLenum, GLsizei, GLint64*);
alias glbfn_glInvalidateTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glInvalidateTexImage = void function(GLuint, GLint);
alias glbfn_glInvalidateBufferSubData = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glInvalidateBufferData = void function(GLuint);
alias glbfn_glInvalidateFramebuffer = void function(GLenum, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateSubFramebuffer = void function(GLenum, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glMultiDrawArraysIndirect = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirect = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGetProgramInterfaceiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetProgramResourceIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramResourceiv = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetProgramResourceLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceLocationIndex = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glShaderStorageBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glTexBufferRange = void function(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTexStorage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexStorage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureView = void function(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glBindVertexBuffer = void function(GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexAttribFormat = void function(GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribIFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribLFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribBinding = void function(GLuint, GLuint);
alias glbfn_glVertexBindingDivisor = void function(GLuint, GLuint);
alias glbfn_glDebugMessageControl = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsert = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallback = void function(GLDEBUGPROC, const(void)*);
alias glbfn_glGetDebugMessageLog = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroup = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroup = void function();
alias glbfn_glObjectLabel = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabel = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabel = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabel = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glBufferStorage = void function(GLenum, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearTexImage = void function(GLuint, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glClearTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindBuffersBase = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindBuffersRange = void function(GLenum, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizeiptr)*);
alias glbfn_glBindTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindSamplers = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindImageTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindVertexBuffers = void function(GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glClipControl = void function(GLenum, GLenum);
alias glbfn_glCreateTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glTransformFeedbackBufferBase = void function(GLuint, GLuint, GLuint);
alias glbfn_glTransformFeedbackBufferRange = void function(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetTransformFeedbackiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTransformFeedbacki_v = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetTransformFeedbacki64_v = void function(GLuint, GLenum, GLuint, GLint64*);
alias glbfn_glCreateBuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedBufferStorage = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glNamedBufferData = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glCopyNamedBufferSubData = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glClearNamedBufferData = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubData = void function(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glMapNamedBuffer = void* function(GLuint, GLenum);
alias glbfn_glMapNamedBufferRange = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glUnmapNamedBuffer = GLboolean function(GLuint);
alias glbfn_glFlushMappedNamedBufferRange = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetNamedBufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferParameteri64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetNamedBufferPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glCreateFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedFramebufferRenderbuffer = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glNamedFramebufferParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glNamedFramebufferTexture = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayer = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferDrawBuffer = void function(GLuint, GLenum);
alias glbfn_glNamedFramebufferDrawBuffers = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glNamedFramebufferReadBuffer = void function(GLuint, GLenum);
alias glbfn_glInvalidateNamedFramebufferData = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateNamedFramebufferSubData = void function(GLuint, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glClearNamedFramebufferiv = void function(GLuint, GLenum, GLint, const(GLint)*);
alias glbfn_glClearNamedFramebufferuiv = void function(GLuint, GLenum, GLint, const(GLuint)*);
alias glbfn_glClearNamedFramebufferfv = void function(GLuint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearNamedFramebufferfi = void function(GLuint, GLenum, GLint, GLfloat, GLint);
alias glbfn_glBlitNamedFramebuffer = void function(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glCheckNamedFramebufferStatus = GLenum function(GLuint, GLenum);
alias glbfn_glGetNamedFramebufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedFramebufferAttachmentParameteriv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glCreateRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedRenderbufferStorage = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateTextures = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glTextureBuffer = void function(GLuint, GLenum, GLuint);
alias glbfn_glTextureBufferRange = void function(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1D = void function(GLuint, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCompressedTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTextureSubImage1D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTextureParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glTextureParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glTextureParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glTextureParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glGenerateTextureMipmap = void function(GLuint);
alias glbfn_glBindTextureUnit = void function(GLuint, GLuint);
alias glbfn_glGetTextureImage = void function(GLuint, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureImage = void function(GLuint, GLint, GLsizei, void*);
alias glbfn_glGetTextureLevelParameterfv = void function(GLuint, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameteriv = void function(GLuint, GLint, GLenum, GLint*);
alias glbfn_glGetTextureParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetTextureParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glDisableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glEnableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glVertexArrayElementBuffer = void function(GLuint, GLuint);
alias glbfn_glVertexArrayVertexBuffer = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexBuffers = void function(GLuint, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glVertexArrayAttribBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayAttribFormat = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayAttribIFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayAttribLFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayBindingDivisor = void function(GLuint, GLuint, GLuint);
alias glbfn_glGetVertexArrayiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexediv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexed64iv = void function(GLuint, GLuint, GLenum, GLint64*);
alias glbfn_glCreateSamplers = void function(GLsizei, GLuint*);
alias glbfn_glCreateProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glCreateQueries = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetQueryBufferObjecti64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectui64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectuiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glMemoryBarrierByRegion = void function(GLbitfield);
alias glbfn_glGetTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void*);
alias glbfn_glGetGraphicsResetStatus = GLenum function();
alias glbfn_glGetnCompressedTexImage = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnTexImage = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformdv = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnUniformfv = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformiv = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuiv = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glReadnPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMapdv = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfv = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapiv = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfv = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuiv = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusv = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStipple = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTable = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogram = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmax = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glTextureBarrier = void function();

// ////////////////////////////////////////////////////////////////////////// //
alias glbfn_glTbufferMask3DFX = void function(GLuint);
alias glbfn_glDebugMessageEnableAMD = void function(GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertAMD = void function(GLenum, GLenum, GLuint, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackAMD = void function(GLDEBUGPROCAMD, void*);
alias glbfn_glGetDebugMessageLogAMD = GLuint function(GLuint, GLsizei, GLenum*, GLuint*, GLuint*, GLsizei*, GLchar*);
alias glbfn_glBlendFuncIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateIndexedAMD = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationIndexedAMD = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glUniform1i64NV = void function(GLint, GLint64EXT);
alias glbfn_glUniform2i64NV = void function(GLint, GLint64EXT, GLint64EXT);
alias glbfn_glUniform3i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform4i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform1i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform2i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform3i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform4i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform1ui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniform2ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform3ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform4ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform1ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform2ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform3ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform4ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glGetUniformi64vNV = void function(GLuint, GLint, GLint64EXT*);
alias glbfn_glGetUniformui64vNV = void function(GLuint, GLint, GLuint64EXT*);
alias glbfn_glProgramUniform1i64NV = void function(GLuint, GLint, GLint64EXT);
alias glbfn_glProgramUniform2i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform3i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform4i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform1i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform2i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform3i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform4i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform1ui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniform2ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform3ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform4ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform1ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform2ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform3ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform4ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glVertexAttribParameteriAMD = void function(GLuint, GLenum, GLint);
alias glbfn_glMultiDrawArraysIndirectAMD = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectAMD = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGenNamesAMD = void function(GLenum, GLuint, GLuint*);
alias glbfn_glDeleteNamesAMD = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glIsNameAMD = GLboolean function(GLenum, GLuint);
alias glbfn_glQueryObjectParameteruiAMD = void function(GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetPerfMonitorGroupsAMD = void function(GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorCountersAMD = void function(GLuint, GLint*, GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorGroupStringAMD = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterStringAMD = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterInfoAMD = void function(GLuint, GLuint, GLenum, void*);
alias glbfn_glGenPerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glDeletePerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glSelectPerfMonitorCountersAMD = void function(GLuint, GLboolean, GLuint, GLint, GLuint*);
alias glbfn_glBeginPerfMonitorAMD = void function(GLuint);
alias glbfn_glEndPerfMonitorAMD = void function(GLuint);
alias glbfn_glGetPerfMonitorCounterDataAMD = void function(GLuint, GLenum, GLsizei, GLuint*, GLint*);
alias glbfn_glSetMultisamplefvAMD = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glTexStorageSparseAMD = void function(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glTextureStorageSparseAMD = void function(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glStencilOpValueAMD = void function(GLenum, GLuint);
alias glbfn_glTessellationFactorAMD = void function(GLfloat);
alias glbfn_glTessellationModeAMD = void function(GLenum);
alias glbfn_glElementPointerAPPLE = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayAPPLE = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, GLint, GLsizei);
alias glbfn_glMultiDrawElementArrayAPPLE = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glGenFencesAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glDeleteFencesAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glSetFenceAPPLE = void function(GLuint);
alias glbfn_glIsFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glTestFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glFinishFenceAPPLE = void function(GLuint);
alias glbfn_glTestObjectAPPLE = GLboolean function(GLenum, GLuint);
alias glbfn_glFinishObjectAPPLE = void function(GLenum, GLint);
alias glbfn_glBufferParameteriAPPLE = void function(GLenum, GLenum, GLint);
alias glbfn_glFlushMappedBufferRangeAPPLE = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glObjectPurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glObjectUnpurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glGetObjectParameterivAPPLE = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glTextureRangeAPPLE = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glGetTexParameterPointervAPPLE = void function(GLenum, GLenum, void**);
alias glbfn_glBindVertexArrayAPPLE = void function(GLuint);
alias glbfn_glDeleteVertexArraysAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArraysAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArrayAPPLE = GLboolean function(GLuint);
alias glbfn_glVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glFlushVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glVertexArrayParameteriAPPLE = void function(GLenum, GLint);
alias glbfn_glEnableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glDisableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glIsVertexAttribEnabledAPPLE = GLboolean function(GLuint, GLenum);
alias glbfn_glMapVertexAttrib1dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib1fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapVertexAttrib2dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib2fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glPrimitiveBoundingBoxARB = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetTextureHandleARB = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleARB = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentARB = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentARB = void function(GLuint64);
alias glbfn_glGetImageHandleARB = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentARB = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentARB = void function(GLuint64);
alias glbfn_glUniformHandleui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glVertexAttribL1ui64ARB = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vARB = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLui64vARB = void function(GLuint, GLenum, GLuint64EXT*);
//alias glbfn_glCreateSyncFromCLeventARB = GLsync function(_cl_context*, _cl_event*, GLbitfield);
alias glbfn_glClampColorARB = void function(GLenum, GLenum);
alias glbfn_glDispatchComputeGroupSizeARB = void function(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glDebugMessageControlARB = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertARB = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackARB = void function(GLDEBUGPROCARB, const(void)*);
alias glbfn_glGetDebugMessageLogARB = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glDrawBuffersARB = void function(GLsizei, const(GLenum)*);
alias glbfn_glBlendEquationiARB = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateiARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunciARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateiARB = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysInstancedARB = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedARB = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramStringARB = void function(GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glBindProgramARB = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramsARB = void function(GLsizei, GLuint*);
alias glbfn_glProgramEnvParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramEnvParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramEnvParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramEnvParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramLocalParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramLocalParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramLocalParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramLocalParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetProgramEnvParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramEnvParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramLocalParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramLocalParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetProgramStringARB = void function(GLenum, GLenum, void*);
alias glbfn_glIsProgramARB = GLboolean function(GLuint);
alias glbfn_glProgramParameteriARB = void function(GLuint, GLenum, GLint);
alias glbfn_glFramebufferTextureARB = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureLayerARB = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferTextureFaceARB = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glUniform1i64ARB = void function(GLint, GLint64);
alias glbfn_glUniform2i64ARB = void function(GLint, GLint64, GLint64);
alias glbfn_glUniform3i64ARB = void function(GLint, GLint64, GLint64, GLint64);
alias glbfn_glUniform4i64ARB = void function(GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glUniform1i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform2i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform3i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform4i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform1ui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniform2ui64ARB = void function(GLint, GLuint64, GLuint64);
alias glbfn_glUniform3ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform4ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform1ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform2ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform3ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform4ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glGetUniformi64vARB = void function(GLuint, GLint, GLint64*);
alias glbfn_glGetUniformui64vARB = void function(GLuint, GLint, GLuint64*);
alias glbfn_glGetnUniformi64vARB = void function(GLuint, GLint, GLsizei, GLint64*);
alias glbfn_glGetnUniformui64vARB = void function(GLuint, GLint, GLsizei, GLuint64*);
alias glbfn_glProgramUniform1i64ARB = void function(GLuint, GLint, GLint64);
alias glbfn_glProgramUniform2i64ARB = void function(GLuint, GLint, GLint64, GLint64);
alias glbfn_glProgramUniform3i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform4i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform1i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform2i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform3i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform4i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform1ui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniform2ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64);
alias glbfn_glProgramUniform3ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform4ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform1ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform2ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform3ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform4ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glColorTable = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTable = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTable = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glColorSubTable = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTable = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glConvolutionFilter1D = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1D = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2D = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilter = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilter = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glGetHistogram = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmax = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogram = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmax = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogram = void function(GLenum);
alias glbfn_glResetMinmax = void function(GLenum);
alias glbfn_glMultiDrawArraysIndirectCountARB = void function(GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectCountARB = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glVertexAttribDivisorARB = void function(GLuint, GLuint);
alias glbfn_glCurrentPaletteMatrixARB = void function(GLint);
alias glbfn_glMatrixIndexubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glMatrixIndexusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glMatrixIndexuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glMatrixIndexPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glSampleCoverageARB = void function(GLfloat, GLboolean);
alias glbfn_glActiveTextureARB = void function(GLenum);
alias glbfn_glClientActiveTextureARB = void function(GLenum);
alias glbfn_glMultiTexCoord1dARB = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1fARB = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1iARB = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1sARB = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2dARB = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2fARB = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2iARB = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2sARB = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3dARB = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3fARB = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3iARB = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3sARB = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4dARB = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4fARB = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4iARB = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4sARB = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glGenQueriesARB = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueriesARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQueryARB = GLboolean function(GLuint);
alias glbfn_glBeginQueryARB = void function(GLenum, GLuint);
alias glbfn_glEndQueryARB = void function(GLenum);
alias glbfn_glGetQueryivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuivARB = void function(GLuint, GLenum, GLuint*);
alias glbfn_glMaxShaderCompilerThreadsARB = void function(GLuint);
alias glbfn_glPointParameterfARB = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetGraphicsResetStatusARB = GLenum function();
alias glbfn_glGetnTexImageARB = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glReadnPixelsARB = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnCompressedTexImageARB = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnUniformfvARB = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivARB = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivARB = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glGetnUniformdvARB = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnMapdvARB = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfvARB = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapivARB = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfvARB = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuivARB = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusvARB = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStippleARB = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTableARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogramARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmaxARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glFramebufferSampleLocationsfvARB = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvARB = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glEvaluateDepthValuesARB = void function();
alias glbfn_glMinSampleShadingARB = void function(GLfloat);
alias glbfn_glDeleteObjectARB = void function(GLhandleARB);
alias glbfn_glGetHandleARB = GLhandleARB function(GLenum);
alias glbfn_glDetachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glCreateShaderObjectARB = GLhandleARB function(GLenum);
alias glbfn_glShaderSourceARB = void function(GLhandleARB, GLsizei, const(GLcharARB*)*, const(GLint)*);
alias glbfn_glCompileShaderARB = void function(GLhandleARB);
alias glbfn_glCreateProgramObjectARB = GLhandleARB function();
alias glbfn_glAttachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glLinkProgramARB = void function(GLhandleARB);
alias glbfn_glUseProgramObjectARB = void function(GLhandleARB);
alias glbfn_glValidateProgramARB = void function(GLhandleARB);
alias glbfn_glUniform1fARB = void function(GLint, GLfloat);
alias glbfn_glUniform2fARB = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3fARB = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4fARB = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1iARB = void function(GLint, GLint);
alias glbfn_glUniform2iARB = void function(GLint, GLint, GLint);
alias glbfn_glUniform3iARB = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4iARB = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glGetObjectParameterfvARB = void function(GLhandleARB, GLenum, GLfloat*);
alias glbfn_glGetObjectParameterivARB = void function(GLhandleARB, GLenum, GLint*);
alias glbfn_glGetInfoLogARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glGetAttachedObjectsARB = void function(GLhandleARB, GLsizei, GLsizei*, GLhandleARB*);
alias glbfn_glGetUniformLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glGetActiveUniformARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetUniformfvARB = void function(GLhandleARB, GLint, GLfloat*);
alias glbfn_glGetUniformivARB = void function(GLhandleARB, GLint, GLint*);
alias glbfn_glGetShaderSourceARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glNamedStringARB = void function(GLenum, GLint, const(GLchar)*, GLint, const(GLchar)*);
alias glbfn_glDeleteNamedStringARB = void function(GLint, const(GLchar)*);
alias glbfn_glCompileShaderIncludeARB = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glIsNamedStringARB = GLboolean function(GLint, const(GLchar)*);
alias glbfn_glGetNamedStringARB = void function(GLint, const(GLchar)*, GLsizei, GLint*, GLchar*);
alias glbfn_glGetNamedStringivARB = void function(GLint, const(GLchar)*, GLenum, GLint*);
alias glbfn_glBufferPageCommitmentARB = void function(GLenum, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentEXT = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentARB = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glTexPageCommitmentARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexBufferARB = void function(GLenum, GLenum, GLuint);
alias glbfn_glCompressedTexImage3DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1DARB = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3DARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2DARB = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1DARB = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImageARB = void function(GLenum, GLint, void*);
alias glbfn_glLoadTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glWeightbvARB = void function(GLint, const(GLbyte)*);
alias glbfn_glWeightsvARB = void function(GLint, const(GLshort)*);
alias glbfn_glWeightivARB = void function(GLint, const(GLint)*);
alias glbfn_glWeightfvARB = void function(GLint, const(GLfloat)*);
alias glbfn_glWeightdvARB = void function(GLint, const(GLdouble)*);
alias glbfn_glWeightubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glWeightusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glWeightuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glWeightPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexBlendARB = void function(GLint);
alias glbfn_glBindBufferARB = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffersARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffersARB = void function(GLsizei, GLuint*);
alias glbfn_glIsBufferARB = GLboolean function(GLuint);
alias glbfn_glBufferDataARB = void function(GLenum, GLsizeiptrARB, const(void)*, GLenum);
alias glbfn_glBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, const(void)*);
alias glbfn_glGetBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, void*);
alias glbfn_glMapBufferARB = void* function(GLenum, GLenum);
alias glbfn_glUnmapBufferARB = GLboolean function(GLenum);
alias glbfn_glGetBufferParameterivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointervARB = void function(GLenum, GLenum, void**);
alias glbfn_glVertexAttrib1dARB = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fARB = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sARB = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dARB = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fARB = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sARB = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dARB = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fARB = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sARB = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NbvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4NivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4NsvARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NubARB = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4NubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4NuivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4NusvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4dARB = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fARB = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4ivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4sARB = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointerARB = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glEnableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glDisableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glGetVertexAttribdvARB = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvARB = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervARB = void function(GLuint, GLenum, void**);
alias glbfn_glBindAttribLocationARB = void function(GLhandleARB, GLuint, const(GLcharARB)*);
alias glbfn_glGetActiveAttribARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetAttribLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glWindowPos2dARB = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fARB = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iARB = void function(GLint, GLint);
alias glbfn_glWindowPos2ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos2sARB = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svARB = void function(const(GLshort)*);
alias glbfn_glWindowPos3dARB = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fARB = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iARB = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos3sARB = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svARB = void function(const(GLshort)*);
alias glbfn_glDrawBuffersATI = void function(GLsizei, const(GLenum)*);
alias glbfn_glElementPointerATI = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayATI = void function(GLenum, GLsizei);
alias glbfn_glDrawRangeElementArrayATI = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glTexBumpParameterivATI = void function(GLenum, const(GLint)*);
alias glbfn_glTexBumpParameterfvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetTexBumpParameterivATI = void function(GLenum, GLint*);
alias glbfn_glGetTexBumpParameterfvATI = void function(GLenum, GLfloat*);
alias glbfn_glGenFragmentShadersATI = GLuint function(GLuint);
alias glbfn_glBindFragmentShaderATI = void function(GLuint);
alias glbfn_glDeleteFragmentShaderATI = void function(GLuint);
alias glbfn_glBeginFragmentShaderATI = void function();
alias glbfn_glEndFragmentShaderATI = void function();
alias glbfn_glPassTexCoordATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glSampleMapATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glColorFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSetFragmentShaderConstantATI = void function(GLuint, const(GLfloat)*);
alias glbfn_glMapObjectBufferATI = void* function(GLuint);
alias glbfn_glUnmapObjectBufferATI = void function(GLuint);
alias glbfn_glPNTrianglesiATI = void function(GLenum, GLint);
alias glbfn_glPNTrianglesfATI = void function(GLenum, GLfloat);
alias glbfn_glStencilOpSeparateATI = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparateATI = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glNewObjectBufferATI = GLuint function(GLsizei, const(void)*, GLenum);
alias glbfn_glIsObjectBufferATI = GLboolean function(GLuint);
alias glbfn_glUpdateObjectBufferATI = void function(GLuint, GLuint, GLsizei, const(void)*, GLenum);
alias glbfn_glGetObjectBufferfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetObjectBufferivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glFreeObjectBufferATI = void function(GLuint);
alias glbfn_glArrayObjectATI = void function(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetArrayObjectfvATI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetArrayObjectivATI = void function(GLenum, GLenum, GLint*);
alias glbfn_glVariantArrayObjectATI = void function(GLuint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetVariantArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexAttribArrayObjectATI = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
alias glbfn_glGetVertexAttribArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexStream1sATI = void function(GLenum, GLshort);
alias glbfn_glVertexStream1svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream1iATI = void function(GLenum, GLint);
alias glbfn_glVertexStream1ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream1fATI = void function(GLenum, GLfloat);
alias glbfn_glVertexStream1fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream1dATI = void function(GLenum, GLdouble);
alias glbfn_glVertexStream1dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream2sATI = void function(GLenum, GLshort, GLshort);
alias glbfn_glVertexStream2svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream2iATI = void function(GLenum, GLint, GLint);
alias glbfn_glVertexStream2ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream2fATI = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glVertexStream2fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream2dATI = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glVertexStream2dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glVertexStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream4sATI = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream4svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream4iATI = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glVertexStream4ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream4fATI = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream4fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream4dATI = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream4dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glNormalStream3bATI = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glNormalStream3bvATI = void function(GLenum, const(GLbyte)*);
alias glbfn_glNormalStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glNormalStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glNormalStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glNormalStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glNormalStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormalStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glNormalStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glNormalStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glClientActiveVertexStreamATI = void function(GLenum);
alias glbfn_glVertexBlendEnviATI = void function(GLenum, GLint);
alias glbfn_glVertexBlendEnvfATI = void function(GLenum, GLfloat);
alias glbfn_glUniformBufferEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glGetUniformBufferSizeEXT = GLint function(GLuint, GLint);
alias glbfn_glGetUniformOffsetEXT = GLintptr function(GLuint, GLint);
alias glbfn_glBlendColorEXT = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquationSeparateEXT = void function(GLenum, GLenum);
alias glbfn_glBlendFuncSeparateEXT = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationEXT = void function(GLenum);
alias glbfn_glColorSubTableEXT = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTableEXT = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glLockArraysEXT = void function(GLint, GLsizei);
alias glbfn_glUnlockArraysEXT = void function();
alias glbfn_glConvolutionFilter1DEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilterEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilterEXT = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glTangent3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTangent3bvEXT = void function(const(GLbyte)*);
alias glbfn_glTangent3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTangent3dvEXT = void function(const(GLdouble)*);
alias glbfn_glTangent3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTangent3fvEXT = void function(const(GLfloat)*);
alias glbfn_glTangent3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glTangent3ivEXT = void function(const(GLint)*);
alias glbfn_glTangent3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glTangent3svEXT = void function(const(GLshort)*);
alias glbfn_glBinormal3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glBinormal3bvEXT = void function(const(GLbyte)*);
alias glbfn_glBinormal3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glBinormal3dvEXT = void function(const(GLdouble)*);
alias glbfn_glBinormal3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glBinormal3fvEXT = void function(const(GLfloat)*);
alias glbfn_glBinormal3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glBinormal3ivEXT = void function(const(GLint)*);
alias glbfn_glBinormal3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glBinormal3svEXT = void function(const(GLshort)*);
alias glbfn_glTangentPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBinormalPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTexImage1DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCullParameterdvEXT = void function(GLenum, GLdouble*);
alias glbfn_glCullParameterfvEXT = void function(GLenum, GLfloat*);
alias glbfn_glLabelObjectEXT = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelEXT = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glInsertEventMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPushGroupMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPopGroupMarkerEXT = void function();
alias glbfn_glDepthBoundsEXT = void function(GLclampd, GLclampd);
alias glbfn_glMatrixLoadfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoaddEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultdEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixLoadIdentityEXT = void function(GLenum);
alias glbfn_glMatrixRotatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixRotatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixScalefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixScaledEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixTranslatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixTranslatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixFrustumEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixOrthoEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixPopEXT = void function(GLenum);
alias glbfn_glMatrixPushEXT = void function(GLenum);
alias glbfn_glClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glPushClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glTextureParameterfEXT = void function(GLuint, GLenum, GLenum, GLfloat);
alias glbfn_glTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteriEXT = void function(GLuint, GLenum, GLenum, GLint);
alias glbfn_glTextureParameterivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetTextureImageEXT = void function(GLuint, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureLevelParameterfvEXT = void function(GLuint, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameterivEXT = void function(GLuint, GLenum, GLint, GLenum, GLint*);
alias glbfn_glTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glBindMultiTextureEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordPointerEXT = void function(GLenum, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glMultiTexEnvfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexEnviEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexGendEXT = void function(GLenum, GLenum, GLenum, GLdouble);
alias glbfn_glMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexGenfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexGeniEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glGetMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, GLdouble*);
alias glbfn_glGetMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glMultiTexParameteriEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetMultiTexImageEXT = void function(GLenum, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexLevelParameterfvEXT = void function(GLenum, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetMultiTexLevelParameterivEXT = void function(GLenum, GLenum, GLint, GLenum, GLint*);
alias glbfn_glMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glEnableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloatIndexedvEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoubleIndexedvEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointerIndexedvEXT = void function(GLenum, GLuint, void**);
alias glbfn_glEnableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glIsEnabledIndexedEXT = GLboolean function(GLenum, GLuint);
alias glbfn_glGetIntegerIndexedvEXT = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetBooleanIndexedvEXT = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glCompressedTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTextureImageEXT = void function(GLuint, GLenum, GLint, void*);
alias glbfn_glCompressedMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedMultiTexImageEXT = void function(GLenum, GLenum, GLint, void*);
alias glbfn_glMatrixLoadTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glNamedBufferDataEXT = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glMapNamedBufferEXT = void* function(GLuint, GLenum);
alias glbfn_glUnmapNamedBufferEXT = GLboolean function(GLuint);
alias glbfn_glGetNamedBufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glProgramUniform1fEXT = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform2fEXT = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform1iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform2iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform1fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniformMatrix2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glTextureBufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glMultiTexBufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, GLuint*);
alias glbfn_glMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, GLuint*);
alias glbfn_glProgramUniform1uiEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform2uiEXT = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform1uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glNamedProgramLocalParameters4fvEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedProgramLocalParameterI4iEXT = void function(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glNamedProgramLocalParameterI4ivEXT = void function(GLuint, GLenum, GLuint, const(GLint)*);
alias glbfn_glNamedProgramLocalParametersI4ivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glNamedProgramLocalParameterI4uiEXT = void function(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glNamedProgramLocalParameterI4uivEXT = void function(GLuint, GLenum, GLuint, const(GLuint)*);
alias glbfn_glNamedProgramLocalParametersI4uivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetNamedProgramLocalParameterIivEXT = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetNamedProgramLocalParameterIuivEXT = void function(GLuint, GLenum, GLuint, GLuint*);
alias glbfn_glEnableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloati_vEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_vEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointeri_vEXT = void function(GLenum, GLuint, void**);
alias glbfn_glNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glNamedProgramLocalParameter4dEXT = void function(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glNamedProgramLocalParameter4dvEXT = void function(GLuint, GLenum, GLuint, const(GLdouble)*);
alias glbfn_glNamedProgramLocalParameter4fEXT = void function(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNamedProgramLocalParameter4fvEXT = void function(GLuint, GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetNamedProgramLocalParameterdvEXT = void function(GLuint, GLenum, GLuint, GLdouble*);
alias glbfn_glGetNamedProgramLocalParameterfvEXT = void function(GLuint, GLenum, GLuint, GLfloat*);
alias glbfn_glGetNamedProgramivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, void*);
alias glbfn_glNamedRenderbufferStorageEXT = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedRenderbufferStorageMultisampleEXT = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT = void function(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glCheckNamedFramebufferStatusEXT = GLenum function(GLuint, GLenum);
alias glbfn_glNamedFramebufferTexture1DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture2DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture3DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferRenderbufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glGetNamedFramebufferAttachmentParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGenerateTextureMipmapEXT = void function(GLuint, GLenum);
alias glbfn_glGenerateMultiTexMipmapEXT = void function(GLenum, GLenum);
alias glbfn_glFramebufferDrawBufferEXT = void function(GLuint, GLenum);
alias glbfn_glFramebufferDrawBuffersEXT = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glFramebufferReadBufferEXT = void function(GLuint, GLenum);
alias glbfn_glGetFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedCopyBufferSubDataEXT = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glNamedFramebufferTextureEXT = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayerEXT = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferTextureFaceEXT = void function(GLuint, GLenum, GLuint, GLint, GLenum);
alias glbfn_glTextureRenderbufferEXT = void function(GLuint, GLenum, GLuint);
alias glbfn_glMultiTexRenderbufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glVertexArrayVertexOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayEdgeFlagOffsetEXT = void function(GLuint, GLuint, GLsizei, GLintptr);
alias glbfn_glVertexArrayIndexOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayNormalOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayTexCoordOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayMultiTexCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayFogCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArraySecondaryColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribIOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glEnableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glDisableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glEnableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glDisableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glGetVertexArrayIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetVertexArrayIntegeri_vEXT = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointeri_vEXT = void function(GLuint, GLuint, GLenum, void**);
alias glbfn_glMapNamedBufferRangeEXT = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedNamedBufferRangeEXT = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glNamedBufferStorageEXT = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearNamedBufferDataEXT = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubDataEXT = void function(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glNamedFramebufferParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glGetNamedFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1dEXT = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform2dEXT = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform1dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glTextureBufferRangeEXT = void function(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayBindVertexBufferEXT = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexAttribFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayVertexAttribIFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribLFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribBindingEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexBindingDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexAttribLOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glTexturePageCommitmentEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayVertexAttribDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glColorMaskIndexedEXT = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDrawArraysInstancedEXT = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedEXT = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glDrawRangeElementsEXT = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glFogCoordfEXT = void function(GLfloat);
alias glbfn_glFogCoordfvEXT = void function(const(GLfloat)*);
alias glbfn_glFogCoorddEXT = void function(GLdouble);
alias glbfn_glFogCoorddvEXT = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBlitFramebufferEXT = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisampleEXT = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glIsRenderbufferEXT = GLboolean function(GLuint);
alias glbfn_glBindRenderbufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorageEXT = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebufferEXT = GLboolean function(GLuint);
alias glbfn_glBindFramebufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatusEXT = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmapEXT = void function(GLenum);
alias glbfn_glProgramParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glProgramEnvParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramLocalParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glGetUniformuivEXT = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocationEXT = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocationEXT = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1uiEXT = void function(GLint, GLuint);
alias glbfn_glUniform2uiEXT = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3uiEXT = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4uiEXT = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glGetHistogramEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmaxEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogramEXT = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmaxEXT = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogramEXT = void function(GLenum);
alias glbfn_glResetMinmaxEXT = void function(GLenum);
alias glbfn_glIndexFuncEXT = void function(GLenum, GLclampf);
alias glbfn_glIndexMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glApplyTextureEXT = void function(GLenum);
alias glbfn_glTextureLightEXT = void function(GLenum);
alias glbfn_glTextureMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glMultiDrawArraysEXT = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElementsEXT = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glSampleMaskEXT = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternEXT = void function(GLenum);
alias glbfn_glColorTableEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetColorTableEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetColorTableParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelTransformParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glPixelTransformParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glPixelTransformParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPixelTransformParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTransformParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelTransformParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPointParameterfEXT = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glPolygonOffsetEXT = void function(GLfloat, GLfloat);
alias glbfn_glPolygonOffsetClampEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glProvokingVertexEXT = void function(GLenum);
alias glbfn_glRasterSamplesEXT = void function(GLuint, GLboolean);
alias glbfn_glSecondaryColor3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bvEXT = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dvEXT = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fvEXT = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3ivEXT = void function(const(GLint)*);
alias glbfn_glSecondaryColor3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3svEXT = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ubEXT = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubvEXT = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uivEXT = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3usEXT = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usvEXT = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glUseShaderProgramEXT = void function(GLenum, GLuint);
alias glbfn_glActiveProgramEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramEXT = GLuint function(GLenum, const(GLchar)*);
alias glbfn_glActiveShaderProgramEXT = void function(GLuint, GLuint);
alias glbfn_glBindProgramPipelineEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramvEXT = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glDeleteProgramPipelinesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelinesEXT = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramPipelineInfoLogEXT = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramPipelineivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glIsProgramPipelineEXT = GLboolean function(GLuint);
alias glbfn_glUseProgramStagesEXT = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glValidateProgramPipelineEXT = void function(GLuint);
alias glbfn_glBindImageTextureEXT = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
alias glbfn_glMemoryBarrierEXT = void function(GLbitfield);
alias glbfn_glStencilClearTagEXT = void function(GLsizei, GLuint);
alias glbfn_glActiveStencilFaceEXT = void function(GLenum);
alias glbfn_glTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage3DEXT = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glFramebufferTextureLayerEXT = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glTexBufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glTexParameterIivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuivEXT = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuivEXT = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearColorIiEXT = void function(GLint, GLint, GLint, GLint);
alias glbfn_glClearColorIuiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAreTexturesResidentEXT = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindTextureEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteTexturesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTexturesEXT = void function(GLsizei, GLuint*);
alias glbfn_glIsTextureEXT = GLboolean function(GLuint);
alias glbfn_glPrioritizeTexturesEXT = void function(GLsizei, const(GLuint)*, const(GLclampf)*);
alias glbfn_glTextureNormalEXT = void function(GLenum);
alias glbfn_glGetQueryObjecti64vEXT = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64vEXT = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glBeginTransformFeedbackEXT = void function(GLenum);
alias glbfn_glEndTransformFeedbackEXT = void function();
alias glbfn_glBindBufferRangeEXT = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetEXT = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseEXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsEXT = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVaryingEXT = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glArrayElementEXT = void function(GLint);
alias glbfn_glColorPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glDrawArraysEXT = void function(GLenum, GLint, GLsizei);
alias glbfn_glEdgeFlagPointerEXT = void function(GLsizei, GLsizei, const(GLboolean)*);
alias glbfn_glGetPointervEXT = void function(GLenum, void**);
alias glbfn_glIndexPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glNormalPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glTexCoordPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexAttribL1dEXT = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2dEXT = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdvEXT = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glBeginVertexShaderEXT = void function();
alias glbfn_glEndVertexShaderEXT = void function();
alias glbfn_glBindVertexShaderEXT = void function(GLuint);
alias glbfn_glGenVertexShadersEXT = GLuint function(GLuint);
alias glbfn_glDeleteVertexShaderEXT = void function(GLuint);
alias glbfn_glShaderOp1EXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glShaderOp2EXT = void function(GLenum, GLuint, GLuint, GLuint);
alias glbfn_glShaderOp3EXT = void function(GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSwizzleEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glWriteMaskEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glInsertComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glExtractComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glGenSymbolsEXT = GLuint function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glSetInvariantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glSetLocalConstantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glVariantbvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVariantsvEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVariantivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVariantfvEXT = void function(GLuint, const(GLfloat)*);
alias glbfn_glVariantdvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVariantubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVariantusvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVariantuivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVariantPointerEXT = void function(GLuint, GLenum, GLuint, const(void)*);
alias glbfn_glEnableVariantClientStateEXT = void function(GLuint);
alias glbfn_glDisableVariantClientStateEXT = void function(GLuint);
alias glbfn_glBindLightParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindMaterialParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindTexGenParameterEXT = GLuint function(GLenum, GLenum, GLenum);
alias glbfn_glBindTextureUnitParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindParameterEXT = GLuint function(GLenum);
alias glbfn_glIsVariantEnabledEXT = GLboolean function(GLuint, GLenum);
alias glbfn_glGetVariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetVariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetInvariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetInvariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetInvariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetLocalConstantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetLocalConstantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetLocalConstantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glVertexWeightfEXT = void function(GLfloat);
alias glbfn_glVertexWeightfvEXT = void function(const(GLfloat)*);
alias glbfn_glVertexWeightPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
//alias glbfn_glImportSyncEXT = GLsync function(GLenum, GLintptr, GLbitfield);
alias glbfn_glFrameTerminatorGREMEDY = void function();
alias glbfn_glStringMarkerGREMEDY = void function(GLsizei, const(void)*);
alias glbfn_glImageTransformParameteriHP = void function(GLenum, GLenum, GLint);
alias glbfn_glImageTransformParameterfHP = void function(GLenum, GLenum, GLfloat);
alias glbfn_glImageTransformParameterivHP = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glImageTransformParameterfvHP = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetImageTransformParameterivHP = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetImageTransformParameterfvHP = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glMultiModeDrawArraysIBM = void function(const(GLenum)*, const(GLint)*, const(GLsizei)*, GLsizei, GLint);
alias glbfn_glMultiModeDrawElementsIBM = void function(const(GLenum)*, const(GLsizei)*, GLenum, const(void*)*, GLsizei, GLint);
alias glbfn_glFlushStaticDataIBM = void function(GLenum);
alias glbfn_glColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glSecondaryColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glEdgeFlagPointerListIBM = void function(GLint, const(GLboolean*)*, GLint);
alias glbfn_glFogCoordPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glIndexPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glNormalPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glTexCoordPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glVertexPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glBlendFuncSeparateINGR = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glApplyFramebufferAttachmentCMAAINTEL = void function();
alias glbfn_glSyncTextureINTEL = void function(GLuint);
alias glbfn_glUnmapTexture2DINTEL = void function(GLuint, GLint);
alias glbfn_glMapTexture2DINTEL = void* function(GLuint, GLint, GLbitfield, GLint*, GLenum*);
alias glbfn_glVertexPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glNormalPointervINTEL = void function(GLenum, const(void*)*);
alias glbfn_glColorPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glTexCoordPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glBeginPerfQueryINTEL = void function(GLuint);
alias glbfn_glCreatePerfQueryINTEL = void function(GLuint, GLuint*);
alias glbfn_glDeletePerfQueryINTEL = void function(GLuint);
alias glbfn_glEndPerfQueryINTEL = void function(GLuint);
alias glbfn_glGetFirstPerfQueryIdINTEL = void function(GLuint*);
alias glbfn_glGetNextPerfQueryIdINTEL = void function(GLuint, GLuint*);
alias glbfn_glGetPerfCounterInfoINTEL = void function(GLuint, GLuint, GLuint, GLchar*, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*, GLuint64*);
alias glbfn_glGetPerfQueryDataINTEL = void function(GLuint, GLuint, GLsizei, GLvoid*, GLuint*);
alias glbfn_glGetPerfQueryIdByNameINTEL = void function(GLchar*, GLuint*);
alias glbfn_glGetPerfQueryInfoINTEL = void function(GLuint, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*);
alias glbfn_glBlendBarrierKHR = void function();
alias glbfn_glDebugMessageControlKHR = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertKHR = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackKHR = void function(GLDEBUGPROCKHR, const(void)*);
alias glbfn_glGetDebugMessageLogKHR = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroupKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroupKHR = void function();
alias glbfn_glObjectLabelKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelKHR = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabelKHR = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabelKHR = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPointervKHR = void function(GLenum, void**);
alias glbfn_glGetGraphicsResetStatusKHR = GLenum function();
alias glbfn_glReadnPixelsKHR = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformfvKHR = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivKHR = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivKHR = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glResizeBuffersMESA = void function();
alias glbfn_glWindowPos2dMESA = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fMESA = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iMESA = void function(GLint, GLint);
alias glbfn_glWindowPos2ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos2sMESA = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos3dMESA = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fMESA = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iMESA = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos3sMESA = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos4dMESA = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos4dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos4fMESA = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos4fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos4iMESA = void function(GLint, GLint, GLint, GLint);
alias glbfn_glWindowPos4ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos4sMESA = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glWindowPos4svMESA = void function(const(GLshort)*);
alias glbfn_glBeginConditionalRenderNVX = void function(GLuint);
alias glbfn_glEndConditionalRenderNVX = void function();
alias glbfn_glMultiDrawArraysIndirectBindlessNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawArraysIndirectBindlessCountNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessCountNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glGetTextureHandleNV = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleNV = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentNV = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentNV = void function(GLuint64);
alias glbfn_glGetImageHandleNV = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentNV = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentNV = void function(GLuint64);
alias glbfn_glUniformHandleui64NV = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vNV = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64NV = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glBlendParameteriNV = void function(GLenum, GLint);
alias glbfn_glBlendBarrierNV = void function();
alias glbfn_glCreateStatesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteStatesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsStateNV = GLboolean function(GLuint);
alias glbfn_glStateCaptureNV = void function(GLuint, GLenum);
alias glbfn_glGetCommandHeaderNV = GLuint function(GLenum, GLuint);
alias glbfn_glGetStageIndexNV = GLushort function(GLenum);
alias glbfn_glDrawCommandsNV = void function(GLenum, GLuint, const(GLintptr)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsAddressNV = void function(GLenum, const(GLuint64)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsStatesNV = void function(GLuint, const(GLintptr)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glDrawCommandsStatesAddressNV = void function(const(GLuint64)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCreateCommandListsNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteCommandListsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsCommandListNV = GLboolean function(GLuint);
alias glbfn_glListDrawCommandsStatesClientNV = void function(GLuint, GLuint, const(void*)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCommandListSegmentsNV = void function(GLuint, GLuint);
alias glbfn_glCompileCommandListNV = void function(GLuint);
alias glbfn_glCallCommandListNV = void function(GLuint);
alias glbfn_glBeginConditionalRenderNV = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRenderNV = void function();
alias glbfn_glSubpixelPrecisionBiasNV = void function(GLuint, GLuint);
alias glbfn_glConservativeRasterParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCopyImageSubDataNV = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glDepthRangedNV = void function(GLdouble, GLdouble);
alias glbfn_glClearDepthdNV = void function(GLdouble);
alias glbfn_glDepthBoundsdNV = void function(GLdouble, GLdouble);
alias glbfn_glDrawTextureNV = void function(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const(void)*);
alias glbfn_glMapParameterivNV = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glMapParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void*);
alias glbfn_glGetMapParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapAttribParameterivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetMapAttribParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glEvalMapsNV = void function(GLenum, GLenum);
alias glbfn_glGetMultisamplefvNV = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaskIndexedNV = void function(GLuint, GLbitfield);
alias glbfn_glTexRenderbufferNV = void function(GLenum, GLuint);
alias glbfn_glDeleteFencesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFencesNV = void function(GLsizei, GLuint*);
alias glbfn_glIsFenceNV = GLboolean function(GLuint);
alias glbfn_glTestFenceNV = GLboolean function(GLuint);
alias glbfn_glGetFenceivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glFinishFenceNV = void function(GLuint);
alias glbfn_glSetFenceNV = void function(GLuint, GLenum);
alias glbfn_glFragmentCoverageColorNV = void function(GLuint);
alias glbfn_glProgramNamedParameter4fNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramNamedParameter4fvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glProgramNamedParameter4dNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramNamedParameter4dvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLdouble)*);
alias glbfn_glGetProgramNamedParameterfvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat*);
alias glbfn_glGetProgramNamedParameterdvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble*);
alias glbfn_glCoverageModulationTableNV = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetCoverageModulationTableNV = void function(GLsizei, GLfloat*);
alias glbfn_glCoverageModulationNV = void function(GLenum);
alias glbfn_glRenderbufferStorageMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glProgramVertexLimitNV = void function(GLenum, GLint);
alias glbfn_glFramebufferTextureEXT = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureFaceEXT = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glProgramLocalParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramLocalParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramLocalParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramLocalParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramLocalParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramLocalParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glProgramEnvParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramEnvParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramEnvParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramEnvParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramEnvParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramEnvParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramLocalParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramLocalParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glGetProgramEnvParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramEnvParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glProgramSubroutineParametersuivNV = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramSubroutineParameteruivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glVertex2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glVertex2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glNormal3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glNormal3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord1hNV = void function(GLhalfNV);
alias glbfn_glTexCoord1hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glMultiTexCoord1hNV = void function(GLenum, GLhalfNV);
alias glbfn_glMultiTexCoord1hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord2hNV = void function(GLenum, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord2hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord3hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord3hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord4hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord4hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glFogCoordhNV = void function(GLhalfNV);
alias glbfn_glFogCoordhvNV = void function(const(GLhalfNV)*);
alias glbfn_glSecondaryColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glSecondaryColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexWeighthNV = void function(GLhalfNV);
alias glbfn_glVertexWeighthvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexAttrib1hNV = void function(GLuint, GLhalfNV);
alias glbfn_glVertexAttrib1hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib2hNV = void function(GLuint, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib2hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib3hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib3hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib4hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib4hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttribs1hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs2hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs3hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs4hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glGetInternalformatSampleivNV = void function(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint*);
alias glbfn_glGenOcclusionQueriesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteOcclusionQueriesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsOcclusionQueryNV = GLboolean function(GLuint);
alias glbfn_glBeginOcclusionQueryNV = void function(GLuint);
alias glbfn_glEndOcclusionQueryNV = void function();
alias glbfn_glGetOcclusionQueryivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetOcclusionQueryuivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glProgramBufferParametersfvNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramBufferParametersIivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramBufferParametersIuivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGenPathsNV = GLuint function(GLsizei);
alias glbfn_glDeletePathsNV = void function(GLuint, GLsizei);
alias glbfn_glIsPathNV = GLboolean function(GLuint);
alias glbfn_glPathCommandsNV = void function(GLuint, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathCoordsNV = void function(GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCommandsNV = void function(GLuint, GLsizei, GLsizei, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCoordsNV = void function(GLuint, GLsizei, GLsizei, GLenum, const(void)*);
alias glbfn_glPathStringNV = void function(GLuint, GLenum, GLsizei, const(void)*);
alias glbfn_glPathGlyphsNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLsizei, GLenum, const(void)*, GLenum, GLuint, GLfloat);
alias glbfn_glPathGlyphRangeNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
alias glbfn_glWeightPathsNV = void function(GLuint, GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glCopyPathNV = void function(GLuint, GLuint);
alias glbfn_glInterpolatePathsNV = void function(GLuint, GLuint, GLuint, GLfloat);
alias glbfn_glTransformPathNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterivNV = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPathParameteriNV = void function(GLuint, GLenum, GLint);
alias glbfn_glPathParameterfvNV = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterfNV = void function(GLuint, GLenum, GLfloat);
alias glbfn_glPathDashArrayNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glPathStencilFuncNV = void function(GLenum, GLint, GLuint);
alias glbfn_glPathStencilDepthOffsetNV = void function(GLfloat, GLfloat);
alias glbfn_glStencilFillPathNV = void function(GLuint, GLenum, GLuint);
alias glbfn_glStencilStrokePathNV = void function(GLuint, GLint, GLuint);
alias glbfn_glStencilFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glStencilStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathCoverDepthFuncNV = void function(GLenum);
alias glbfn_glCoverFillPathNV = void function(GLuint, GLenum);
alias glbfn_glCoverStrokePathNV = void function(GLuint, GLenum);
alias glbfn_glCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPathParameterivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetPathParameterfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetPathCommandsNV = void function(GLuint, GLubyte*);
alias glbfn_glGetPathCoordsNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathDashArrayNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathMetricsNV = void function(GLbitfield, GLsizei, GLenum, const(void)*, GLuint, GLsizei, GLfloat*);
alias glbfn_glGetPathMetricRangeNV = void function(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat*);
alias glbfn_glGetPathSpacingNV = void function(GLenum, GLsizei, GLenum, const(void)*, GLuint, GLfloat, GLfloat, GLenum, GLfloat*);
alias glbfn_glIsPointInFillPathNV = GLboolean function(GLuint, GLuint, GLfloat, GLfloat);
alias glbfn_glIsPointInStrokePathNV = GLboolean function(GLuint, GLfloat, GLfloat);
alias glbfn_glGetPathLengthNV = GLfloat function(GLuint, GLsizei, GLsizei);
alias glbfn_glPointAlongPathNV = GLboolean function(GLuint, GLsizei, GLsizei, GLfloat, GLfloat*, GLfloat*, GLfloat*, GLfloat*);
alias glbfn_glMatrixLoad3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoad3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverFillPathNV = void function(GLuint, GLenum, GLuint, GLenum);
alias glbfn_glStencilThenCoverStrokePathNV = void function(GLuint, GLint, GLuint, GLenum);
alias glbfn_glStencilThenCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathGlyphIndexRangeNV = GLenum function(GLenum, const(void)*, GLbitfield, GLuint, GLfloat, GLuint*);
alias glbfn_glPathGlyphIndexArrayNV = GLenum function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glPathMemoryGlyphIndexArrayNV = GLenum function(GLuint, GLenum, GLsizeiptr, const(void)*, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glProgramPathFragmentInputGenNV = void function(GLuint, GLint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glGetProgramResourcefvNV = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLfloat*);
alias glbfn_glPathColorGenNV = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathTexGenNV = void function(GLenum, GLenum, GLint, const(GLfloat)*);
alias glbfn_glPathFogGenNV = void function(GLenum);
alias glbfn_glGetPathColorGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathColorGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetPathTexGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathTexGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelDataRangeNV = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glFlushPixelDataRangeNV = void function(GLenum);
alias glbfn_glPointParameteriNV = void function(GLenum, GLint);
alias glbfn_glPointParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glPresentFrameKeyedNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
alias glbfn_glPresentFrameDualFillNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetVideoivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideouivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetVideoi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVideoui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glPrimitiveRestartNV = void function();
alias glbfn_glPrimitiveRestartIndexNV = void function(GLuint);
alias glbfn_glCombinerParameterfvNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glCombinerParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCombinerParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glCombinerParameteriNV = void function(GLenum, GLint);
alias glbfn_glCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glCombinerOutputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
alias glbfn_glFinalCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glGetCombinerInputParameterfvNV = void function(GLenum, GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerInputParameterivNV = void function(GLenum, GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetCombinerOutputParameterfvNV = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerOutputParameterivNV = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetFinalCombinerInputParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFinalCombinerInputParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glCombinerStageParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetCombinerStageParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glFramebufferSampleLocationsfvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvNV = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glResolveDepthValuesNV = void function();
alias glbfn_glMakeBufferResidentNV = void function(GLenum, GLenum);
alias glbfn_glMakeBufferNonResidentNV = void function(GLenum);
alias glbfn_glIsBufferResidentNV = GLboolean function(GLenum);
alias glbfn_glMakeNamedBufferResidentNV = void function(GLuint, GLenum);
alias glbfn_glMakeNamedBufferNonResidentNV = void function(GLuint);
alias glbfn_glIsNamedBufferResidentNV = GLboolean function(GLuint);
alias glbfn_glGetBufferParameterui64vNV = void function(GLenum, GLenum, GLuint64EXT*);
alias glbfn_glGetNamedBufferParameterui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glGetIntegerui64vNV = void function(GLenum, GLuint64EXT*);
alias glbfn_glUniformui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniformui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniformui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniformui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glTextureBarrierNV = void function();
alias glbfn_glTexImage2DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glBeginTransformFeedbackNV = void function(GLenum);
alias glbfn_glEndTransformFeedbackNV = void function();
alias glbfn_glTransformFeedbackAttribsNV = void function(GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindBufferRangeNV = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetNV = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseNV = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsNV = void function(GLuint, GLsizei, const(GLint)*, GLenum);
alias glbfn_glActiveVaryingNV = void function(GLuint, const(GLchar)*);
alias glbfn_glGetVaryingLocationNV = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveVaryingNV = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glGetTransformFeedbackVaryingNV = void function(GLuint, GLuint, GLint*);
alias glbfn_glTransformFeedbackStreamAttribsNV = void function(GLsizei, const(GLint)*, GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacksNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacksNV = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedbackNV = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedbackNV = void function();
alias glbfn_glResumeTransformFeedbackNV = void function();
alias glbfn_glDrawTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glVDPAUInitNV = void function(const(void)*, const(void)*);
alias glbfn_glVDPAUFiniNV = void function();
alias glbfn_glVDPAURegisterVideoSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAURegisterOutputSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAUIsSurfaceNV = GLboolean function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUUnregisterSurfaceNV = void function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUGetSurfaceivNV = void function(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glVDPAUSurfaceAccessNV = void function(GLvdpauSurfaceNV, GLenum);
alias glbfn_glVDPAUMapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glVDPAUUnmapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glFlushVertexArrayRangeNV = void function();
alias glbfn_glVertexArrayRangeNV = void function(GLsizei, const(void)*);
alias glbfn_glVertexAttribL1i64NV = void function(GLuint, GLint64EXT);
alias glbfn_glVertexAttribL2i64NV = void function(GLuint, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL3i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL4i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL1i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL2i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL3i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL4i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL1ui64NV = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL2ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL3ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL4ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL2ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL3ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL4ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVertexAttribLui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glVertexAttribLFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glBufferAddressRangeNV = void function(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
alias glbfn_glVertexFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glNormalFormatNV = void function(GLenum, GLsizei);
alias glbfn_glColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glIndexFormatNV = void function(GLenum, GLsizei);
alias glbfn_glTexCoordFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glEdgeFlagFormatNV = void function(GLsizei);
alias glbfn_glSecondaryColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glFogCoordFormatNV = void function(GLenum, GLsizei);
alias glbfn_glVertexAttribFormatNV = void function(GLuint, GLint, GLenum, GLboolean, GLsizei);
alias glbfn_glVertexAttribIFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glGetIntegerui64i_vNV = void function(GLenum, GLuint, GLuint64EXT*);
alias glbfn_glAreProgramsResidentNV = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindProgramNV = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glExecuteProgramNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGenProgramsNV = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramParameterdvNV = void function(GLenum, GLuint, GLenum, GLdouble*);
alias glbfn_glGetProgramParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glGetProgramivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramStringNV = void function(GLuint, GLenum, GLubyte*);
alias glbfn_glGetTrackMatrixivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribdvNV = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervNV = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgramNV = GLboolean function(GLuint);
alias glbfn_glLoadProgramNV = void function(GLenum, GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glProgramParameter4dNV = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramParameter4dvNV = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramParameter4fNV = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramParameter4fvNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramParameters4dvNV = void function(GLenum, GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramParameters4fvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glRequestResidentProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glTrackMatrixNV = void function(GLenum, GLuint, GLenum, GLenum);
alias glbfn_glVertexAttribPointerNV = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexAttrib1dNV = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fNV = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sNV = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dNV = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fNV = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sNV = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dNV = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fNV = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sNV = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4dNV = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fNV = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4sNV = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubNV = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4ubvNV = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribs1dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs1fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs1svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs2dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs2fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs2svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs3dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs3fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs3svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs4fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs4svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4ubvNV = void function(GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glVertexAttribI1iEXT = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1uiEXT = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3uiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4uiEXT = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4svEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribIPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuivEXT = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBeginVideoCaptureNV = void function(GLuint);
alias glbfn_glBindVideoCaptureStreamBufferNV = void function(GLuint, GLuint, GLenum, GLintptrARB);
alias glbfn_glBindVideoCaptureStreamTextureNV = void function(GLuint, GLuint, GLenum, GLenum, GLuint);
alias glbfn_glEndVideoCaptureNV = void function(GLuint);
alias glbfn_glGetVideoCaptureivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamivNV = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamfvNV = void function(GLuint, GLuint, GLenum, GLfloat*);
alias glbfn_glGetVideoCaptureStreamdvNV = void function(GLuint, GLuint, GLenum, GLdouble*);
alias glbfn_glVideoCaptureNV = GLenum function(GLuint, GLuint*, GLuint64EXT*);
alias glbfn_glVideoCaptureStreamParameterivNV = void function(GLuint, GLuint, GLenum, const(GLint)*);
alias glbfn_glVideoCaptureStreamParameterfvNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glVideoCaptureStreamParameterdvNV = void function(GLuint, GLuint, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1bOES = void function(GLenum, GLbyte);
alias glbfn_glMultiTexCoord1bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord2bOES = void function(GLenum, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord2bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord3bOES = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord3bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord4bOES = void function(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord4bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glTexCoord1bOES = void function(GLbyte);
alias glbfn_glTexCoord1bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord2bOES = void function(GLbyte, GLbyte);
alias glbfn_glTexCoord2bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord3bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord4bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex2bOES = void function(GLbyte, GLbyte);
alias glbfn_glVertex2bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex3bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex4bvOES = void function(const(GLbyte)*);
alias glbfn_glAlphaFuncxOES = void function(GLenum, GLfixed);
alias glbfn_glClearColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearDepthxOES = void function(GLfixed);
alias glbfn_glClipPlanexOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glColor4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glDepthRangexOES = void function(GLfixed, GLfixed);
alias glbfn_glFogxOES = void function(GLenum, GLfixed);
alias glbfn_glFogxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glFrustumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glGetClipPlanexOES = void function(GLenum, GLfixed*);
alias glbfn_glGetFixedvOES = void function(GLenum, GLfixed*);
alias glbfn_glGetTexEnvxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glLightModelxOES = void function(GLenum, GLfixed);
alias glbfn_glLightModelxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glLightxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glLightxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glLineWidthxOES = void function(GLfixed);
alias glbfn_glLoadMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glMaterialxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glMultMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord4xOES = void function(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glNormal3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glOrthoxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glPointParameterxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glPointSizexOES = void function(GLfixed);
alias glbfn_glPolygonOffsetxOES = void function(GLfixed, GLfixed);
alias glbfn_glRotatexOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glScalexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexEnvxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexEnvxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTexParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTranslatexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glGetLightxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glPointParameterxOES = void function(GLenum, GLfixed);
alias glbfn_glSampleCoveragexOES = void function(GLclampx, GLboolean);
alias glbfn_glAccumxOES = void function(GLenum, GLfixed);
alias glbfn_glBitmapxOES = void function(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const(GLubyte)*);
alias glbfn_glBlendColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearAccumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xvOES = void function(const(GLfixed)*);
alias glbfn_glColor4xvOES = void function(const(GLfixed)*);
alias glbfn_glConvolutionParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glConvolutionParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glEvalCoord1xOES = void function(GLfixed);
alias glbfn_glEvalCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glEvalCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glEvalCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glFeedbackBufferxOES = void function(GLsizei, GLenum, const(GLfixed)*);
alias glbfn_glGetConvolutionParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetHistogramParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetLightxOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMapxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glGetPixelMapxv = void function(GLenum, GLint, GLfixed*);
alias glbfn_glGetTexGenxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexLevelParameterxvOES = void function(GLenum, GLint, GLenum, GLfixed*);
alias glbfn_glIndexxOES = void function(GLfixed);
alias glbfn_glIndexxvOES = void function(const(GLfixed)*);
alias glbfn_glLoadTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMap1xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMap2xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMapGrid1xOES = void function(GLint, GLfixed, GLfixed);
alias glbfn_glMapGrid2xOES = void function(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord1xOES = void function(GLenum, GLfixed);
alias glbfn_glMultiTexCoord1xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord2xOES = void function(GLenum, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord2xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord3xOES = void function(GLenum, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord3xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord4xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glNormal3xvOES = void function(const(GLfixed)*);
alias glbfn_glPassThroughxOES = void function(GLfixed);
alias glbfn_glPixelMapx = void function(GLenum, GLint, const(GLfixed)*);
alias glbfn_glPixelStorex = void function(GLenum, GLfixed);
alias glbfn_glPixelTransferxOES = void function(GLenum, GLfixed);
alias glbfn_glPixelZoomxOES = void function(GLfixed, GLfixed);
alias glbfn_glPrioritizeTexturesxOES = void function(GLsizei, const(GLuint)*, const(GLfixed)*);
alias glbfn_glRasterPos2xOES = void function(GLfixed, GLfixed);
alias glbfn_glRasterPos2xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos3xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos4xvOES = void function(const(GLfixed)*);
alias glbfn_glRectxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRectxvOES = void function(const(GLfixed)*, const(GLfixed)*);
alias glbfn_glTexCoord1xOES = void function(GLfixed);
alias glbfn_glTexCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glTexCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord3xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord4xvOES = void function(const(GLfixed)*);
alias glbfn_glTexGenxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexGenxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glVertex2xOES = void function(GLfixed);
alias glbfn_glVertex2xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex3xOES = void function(GLfixed, GLfixed);
alias glbfn_glVertex3xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex4xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glVertex4xvOES = void function(const(GLfixed)*);
alias glbfn_glQueryMatrixxOES = GLbitfield function(GLfixed*, GLint*);
alias glbfn_glClearDepthfOES = void function(GLclampf);
alias glbfn_glClipPlanefOES = void function(GLenum, const(GLfloat)*);
alias glbfn_glDepthRangefOES = void function(GLclampf, GLclampf);
alias glbfn_glFrustumfOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetClipPlanefOES = void function(GLenum, GLfloat*);
alias glbfn_glOrthofOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glFramebufferTextureMultiviewOVR = void function(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
alias glbfn_glHintPGI = void function(GLenum, GLint);
alias glbfn_glDetailTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetDetailTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glFogFuncSGIS = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetFogFuncSGIS = void function(GLfloat*);
alias glbfn_glSampleMaskSGIS = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternSGIS = void function(GLenum);
alias glbfn_glPixelTexGenParameteriSGIS = void function(GLenum, GLint);
alias glbfn_glPixelTexGenParameterivSGIS = void function(GLenum, const(GLint)*);
alias glbfn_glPixelTexGenParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPixelTexGenParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTexGenParameterivSGIS = void function(GLenum, GLint*);
alias glbfn_glGetPixelTexGenParameterfvSGIS = void function(GLenum, GLfloat*);
alias glbfn_glPointParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glSharpenTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetSharpenTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glTexImage4DSGIS = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage4DSGIS = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureColorMaskSGIS = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetTexFilterFuncSGIS = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glTexFilterFuncSGIS = void function(GLenum, GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glAsyncMarkerSGIX = void function(GLuint);
alias glbfn_glFinishAsyncSGIX = GLint function(GLuint*);
alias glbfn_glPollAsyncSGIX = GLint function(GLuint*);
alias glbfn_glGenAsyncMarkersSGIX = GLuint function(GLsizei);
alias glbfn_glDeleteAsyncMarkersSGIX = void function(GLuint, GLsizei);
alias glbfn_glIsAsyncMarkerSGIX = GLboolean function(GLuint);
alias glbfn_glFlushRasterSGIX = void function();
alias glbfn_glFragmentColorMaterialSGIX = void function(GLenum, GLenum);
alias glbfn_glFragmentLightfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentLightfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentLightivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFragmentLightModelfSGIX = void function(GLenum, GLfloat);
alias glbfn_glFragmentLightModelfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightModeliSGIX = void function(GLenum, GLint);
alias glbfn_glFragmentLightModelivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glFragmentMaterialfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentMaterialfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentMaterialiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentMaterialivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glGetFragmentLightfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentLightivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetFragmentMaterialfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentMaterialivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glLightEnviSGIX = void function(GLenum, GLint);
alias glbfn_glFrameZoomSGIX = void function(GLint);
alias glbfn_glIglooInterfaceSGIX = void function(GLenum, const(void)*);
alias glbfn_glGetInstrumentsSGIX = GLint function();
alias glbfn_glInstrumentsBufferSGIX = void function(GLsizei, GLint*);
alias glbfn_glPollInstrumentsSGIX = GLint function(GLint*);
alias glbfn_glReadInstrumentsSGIX = void function(GLint);
alias glbfn_glStartInstrumentsSGIX = void function();
alias glbfn_glStopInstrumentsSGIX = void function(GLint);
alias glbfn_glGetListParameterfvSGIX = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetListParameterivSGIX = void function(GLuint, GLenum, GLint*);
alias glbfn_glListParameterfSGIX = void function(GLuint, GLenum, GLfloat);
alias glbfn_glListParameterfvSGIX = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glListParameteriSGIX = void function(GLuint, GLenum, GLint);
alias glbfn_glListParameterivSGIX = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPixelTexGenSGIX = void function(GLenum);
alias glbfn_glDeformationMap3dSGIX = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glDeformationMap3fSGIX = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glDeformSGIX = void function(GLbitfield);
alias glbfn_glLoadIdentityDeformationMapSGIX = void function(GLbitfield);
alias glbfn_glReferencePlaneSGIX = void function(const(GLdouble)*);
alias glbfn_glSpriteParameterfSGIX = void function(GLenum, GLfloat);
alias glbfn_glSpriteParameterfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glSpriteParameteriSGIX = void function(GLenum, GLint);
alias glbfn_glSpriteParameterivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glTagSampleBufferSGIX = void function();
alias glbfn_glColorTableSGI = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfvSGI = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameterivSGI = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTableSGI = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTableSGI = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfvSGI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameterivSGI = void function(GLenum, GLenum, GLint*);
alias glbfn_glFinishTextureSUNX = void function();
alias glbfn_glGlobalAlphaFactorbSUN = void function(GLbyte);
alias glbfn_glGlobalAlphaFactorsSUN = void function(GLshort);
alias glbfn_glGlobalAlphaFactoriSUN = void function(GLint);
alias glbfn_glGlobalAlphaFactorfSUN = void function(GLfloat);
alias glbfn_glGlobalAlphaFactordSUN = void function(GLdouble);
alias glbfn_glGlobalAlphaFactorubSUN = void function(GLubyte);
alias glbfn_glGlobalAlphaFactorusSUN = void function(GLushort);
alias glbfn_glGlobalAlphaFactoruiSUN = void function(GLuint);
alias glbfn_glDrawMeshArraysSUN = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glReplacementCodeuiSUN = void function(GLuint);
alias glbfn_glReplacementCodeusSUN = void function(GLushort);
alias glbfn_glReplacementCodeubSUN = void function(GLubyte);
alias glbfn_glReplacementCodeuivSUN = void function(const(GLuint)*);
alias glbfn_glReplacementCodeusvSUN = void function(const(GLushort)*);
alias glbfn_glReplacementCodeubvSUN = void function(const(GLubyte)*);
alias glbfn_glReplacementCodePointerSUN = void function(GLenum, GLsizei, const(void*)*);
alias glbfn_glColor4ubVertex2fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex2fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor4ubVertex3fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex3fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4ubVertex3fSUN = void function(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4ubVertex3fvSUN = void function(const(GLfloat)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4ubVertex3fSUN = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4ubVertex3fvSUN = void function(const(GLuint)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
}
}


//extern(System):
nothrow @nogc:

/*extern(System)*/ nothrow @nogc:

alias glCullFace = glCullFace_Z;
__gshared glbfn_glCullFace glCullFace_Z = function void (uint a00) {
  glbfn_glCullFace_loader(a00,);
};
private void glbfn_glCullFace_loader (uint a00) {
  *cast(void**)&glCullFace_Z = glbindGetProcAddress(`glCullFace`);
  if (*cast(void**)&glCullFace_Z is null) assert(0, `OpenGL function 'glCullFace' not found!`);
  glCullFace_Z(a00,);
}
alias glFrontFace = glFrontFace_Z;
__gshared glbfn_glFrontFace glFrontFace_Z = function void (uint a00) {
  glbfn_glFrontFace_loader(a00,);
};
private void glbfn_glFrontFace_loader (uint a00) {
  *cast(void**)&glFrontFace_Z = glbindGetProcAddress(`glFrontFace`);
  if (*cast(void**)&glFrontFace_Z is null) assert(0, `OpenGL function 'glFrontFace' not found!`);
  glFrontFace_Z(a00,);
}
alias glHint = glHint_Z;
__gshared glbfn_glHint glHint_Z = function void (uint a00,uint a01) {
  glbfn_glHint_loader(a00,a01,);
};
private void glbfn_glHint_loader (uint a00,uint a01) {
  *cast(void**)&glHint_Z = glbindGetProcAddress(`glHint`);
  if (*cast(void**)&glHint_Z is null) assert(0, `OpenGL function 'glHint' not found!`);
  glHint_Z(a00,a01,);
}
alias glLineWidth = glLineWidth_Z;
__gshared glbfn_glLineWidth glLineWidth_Z = function void (float a00) {
  glbfn_glLineWidth_loader(a00,);
};
private void glbfn_glLineWidth_loader (float a00) {
  *cast(void**)&glLineWidth_Z = glbindGetProcAddress(`glLineWidth`);
  if (*cast(void**)&glLineWidth_Z is null) assert(0, `OpenGL function 'glLineWidth' not found!`);
  glLineWidth_Z(a00,);
}
alias glPointSize = glPointSize_Z;
__gshared glbfn_glPointSize glPointSize_Z = function void (float a00) {
  glbfn_glPointSize_loader(a00,);
};
private void glbfn_glPointSize_loader (float a00) {
  *cast(void**)&glPointSize_Z = glbindGetProcAddress(`glPointSize`);
  if (*cast(void**)&glPointSize_Z is null) assert(0, `OpenGL function 'glPointSize' not found!`);
  glPointSize_Z(a00,);
}
alias glPolygonMode = glPolygonMode_Z;
__gshared glbfn_glPolygonMode glPolygonMode_Z = function void (uint a00,uint a01) {
  glbfn_glPolygonMode_loader(a00,a01,);
};
private void glbfn_glPolygonMode_loader (uint a00,uint a01) {
  *cast(void**)&glPolygonMode_Z = glbindGetProcAddress(`glPolygonMode`);
  if (*cast(void**)&glPolygonMode_Z is null) assert(0, `OpenGL function 'glPolygonMode' not found!`);
  glPolygonMode_Z(a00,a01,);
}
alias glScissor = glScissor_Z;
__gshared glbfn_glScissor glScissor_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glScissor_loader(a00,a01,a02,a03,);
};
private void glbfn_glScissor_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glScissor_Z = glbindGetProcAddress(`glScissor`);
  if (*cast(void**)&glScissor_Z is null) assert(0, `OpenGL function 'glScissor' not found!`);
  glScissor_Z(a00,a01,a02,a03,);
}
alias glTexParameterf = glTexParameterf_Z;
__gshared glbfn_glTexParameterf glTexParameterf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glTexParameterf_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glTexParameterf_Z = glbindGetProcAddress(`glTexParameterf`);
  if (*cast(void**)&glTexParameterf_Z is null) assert(0, `OpenGL function 'glTexParameterf' not found!`);
  glTexParameterf_Z(a00,a01,a02,);
}
alias glTexParameterfv = glTexParameterfv_Z;
__gshared glbfn_glTexParameterfv glTexParameterfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glTexParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glTexParameterfv_Z = glbindGetProcAddress(`glTexParameterfv`);
  if (*cast(void**)&glTexParameterfv_Z is null) assert(0, `OpenGL function 'glTexParameterfv' not found!`);
  glTexParameterfv_Z(a00,a01,a02,);
}
alias glTexParameteri = glTexParameteri_Z;
__gshared glbfn_glTexParameteri glTexParameteri_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glTexParameteri_loader(a00,a01,a02,);
};
private void glbfn_glTexParameteri_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glTexParameteri_Z = glbindGetProcAddress(`glTexParameteri`);
  if (*cast(void**)&glTexParameteri_Z is null) assert(0, `OpenGL function 'glTexParameteri' not found!`);
  glTexParameteri_Z(a00,a01,a02,);
}
alias glTexParameteriv = glTexParameteriv_Z;
__gshared glbfn_glTexParameteriv glTexParameteriv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glTexParameteriv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexParameteriv_Z = glbindGetProcAddress(`glTexParameteriv`);
  if (*cast(void**)&glTexParameteriv_Z is null) assert(0, `OpenGL function 'glTexParameteriv' not found!`);
  glTexParameteriv_Z(a00,a01,a02,);
}
alias glTexImage1D = glTexImage1D_Z;
__gshared glbfn_glTexImage1D glTexImage1D_Z = function void (uint a00,int a01,int a02,int a03,int a04,uint a05,uint a06,const(void)* a07) {
  glbfn_glTexImage1D_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTexImage1D_loader (uint a00,int a01,int a02,int a03,int a04,uint a05,uint a06,const(void)* a07) {
  *cast(void**)&glTexImage1D_Z = glbindGetProcAddress(`glTexImage1D`);
  if (*cast(void**)&glTexImage1D_Z is null) assert(0, `OpenGL function 'glTexImage1D' not found!`);
  glTexImage1D_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTexImage2D = glTexImage2D_Z;
__gshared glbfn_glTexImage2D glTexImage2D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  glbfn_glTexImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTexImage2D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  *cast(void**)&glTexImage2D_Z = glbindGetProcAddress(`glTexImage2D`);
  if (*cast(void**)&glTexImage2D_Z is null) assert(0, `OpenGL function 'glTexImage2D' not found!`);
  glTexImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glDrawBuffer = glDrawBuffer_Z;
__gshared glbfn_glDrawBuffer glDrawBuffer_Z = function void (uint a00) {
  glbfn_glDrawBuffer_loader(a00,);
};
private void glbfn_glDrawBuffer_loader (uint a00) {
  *cast(void**)&glDrawBuffer_Z = glbindGetProcAddress(`glDrawBuffer`);
  if (*cast(void**)&glDrawBuffer_Z is null) assert(0, `OpenGL function 'glDrawBuffer' not found!`);
  glDrawBuffer_Z(a00,);
}
alias glClear = glClear_Z;
__gshared glbfn_glClear glClear_Z = function void (uint a00) {
  glbfn_glClear_loader(a00,);
};
private void glbfn_glClear_loader (uint a00) {
  *cast(void**)&glClear_Z = glbindGetProcAddress(`glClear`);
  if (*cast(void**)&glClear_Z is null) assert(0, `OpenGL function 'glClear' not found!`);
  glClear_Z(a00,);
}
alias glClearColor = glClearColor_Z;
__gshared glbfn_glClearColor glClearColor_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glClearColor_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearColor_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glClearColor_Z = glbindGetProcAddress(`glClearColor`);
  if (*cast(void**)&glClearColor_Z is null) assert(0, `OpenGL function 'glClearColor' not found!`);
  glClearColor_Z(a00,a01,a02,a03,);
}
alias glClearStencil = glClearStencil_Z;
__gshared glbfn_glClearStencil glClearStencil_Z = function void (int a00) {
  glbfn_glClearStencil_loader(a00,);
};
private void glbfn_glClearStencil_loader (int a00) {
  *cast(void**)&glClearStencil_Z = glbindGetProcAddress(`glClearStencil`);
  if (*cast(void**)&glClearStencil_Z is null) assert(0, `OpenGL function 'glClearStencil' not found!`);
  glClearStencil_Z(a00,);
}
alias glClearDepth = glClearDepth_Z;
__gshared glbfn_glClearDepth glClearDepth_Z = function void (double a00) {
  glbfn_glClearDepth_loader(a00,);
};
private void glbfn_glClearDepth_loader (double a00) {
  *cast(void**)&glClearDepth_Z = glbindGetProcAddress(`glClearDepth`);
  if (*cast(void**)&glClearDepth_Z is null) assert(0, `OpenGL function 'glClearDepth' not found!`);
  glClearDepth_Z(a00,);
}
alias glStencilMask = glStencilMask_Z;
__gshared glbfn_glStencilMask glStencilMask_Z = function void (uint a00) {
  glbfn_glStencilMask_loader(a00,);
};
private void glbfn_glStencilMask_loader (uint a00) {
  *cast(void**)&glStencilMask_Z = glbindGetProcAddress(`glStencilMask`);
  if (*cast(void**)&glStencilMask_Z is null) assert(0, `OpenGL function 'glStencilMask' not found!`);
  glStencilMask_Z(a00,);
}
alias glColorMask = glColorMask_Z;
__gshared glbfn_glColorMask glColorMask_Z = function void (ubyte a00,ubyte a01,ubyte a02,ubyte a03) {
  glbfn_glColorMask_loader(a00,a01,a02,a03,);
};
private void glbfn_glColorMask_loader (ubyte a00,ubyte a01,ubyte a02,ubyte a03) {
  *cast(void**)&glColorMask_Z = glbindGetProcAddress(`glColorMask`);
  if (*cast(void**)&glColorMask_Z is null) assert(0, `OpenGL function 'glColorMask' not found!`);
  glColorMask_Z(a00,a01,a02,a03,);
}
alias glDepthMask = glDepthMask_Z;
__gshared glbfn_glDepthMask glDepthMask_Z = function void (ubyte a00) {
  glbfn_glDepthMask_loader(a00,);
};
private void glbfn_glDepthMask_loader (ubyte a00) {
  *cast(void**)&glDepthMask_Z = glbindGetProcAddress(`glDepthMask`);
  if (*cast(void**)&glDepthMask_Z is null) assert(0, `OpenGL function 'glDepthMask' not found!`);
  glDepthMask_Z(a00,);
}
alias glDisable = glDisable_Z;
__gshared glbfn_glDisable glDisable_Z = function void (uint a00) {
  glbfn_glDisable_loader(a00,);
};
private void glbfn_glDisable_loader (uint a00) {
  *cast(void**)&glDisable_Z = glbindGetProcAddress(`glDisable`);
  if (*cast(void**)&glDisable_Z is null) assert(0, `OpenGL function 'glDisable' not found!`);
  glDisable_Z(a00,);
}
alias glEnable = glEnable_Z;
__gshared glbfn_glEnable glEnable_Z = function void (uint a00) {
  glbfn_glEnable_loader(a00,);
};
private void glbfn_glEnable_loader (uint a00) {
  *cast(void**)&glEnable_Z = glbindGetProcAddress(`glEnable`);
  if (*cast(void**)&glEnable_Z is null) assert(0, `OpenGL function 'glEnable' not found!`);
  glEnable_Z(a00,);
}
alias glFinish = glFinish_Z;
__gshared glbfn_glFinish glFinish_Z = function void () {
  glbfn_glFinish_loader();
};
private void glbfn_glFinish_loader () {
  *cast(void**)&glFinish_Z = glbindGetProcAddress(`glFinish`);
  if (*cast(void**)&glFinish_Z is null) assert(0, `OpenGL function 'glFinish' not found!`);
  glFinish_Z();
}
alias glFlush = glFlush_Z;
__gshared glbfn_glFlush glFlush_Z = function void () {
  glbfn_glFlush_loader();
};
private void glbfn_glFlush_loader () {
  *cast(void**)&glFlush_Z = glbindGetProcAddress(`glFlush`);
  if (*cast(void**)&glFlush_Z is null) assert(0, `OpenGL function 'glFlush' not found!`);
  glFlush_Z();
}
alias glBlendFunc = glBlendFunc_Z;
__gshared glbfn_glBlendFunc glBlendFunc_Z = function void (uint a00,uint a01) {
  glbfn_glBlendFunc_loader(a00,a01,);
};
private void glbfn_glBlendFunc_loader (uint a00,uint a01) {
  *cast(void**)&glBlendFunc_Z = glbindGetProcAddress(`glBlendFunc`);
  if (*cast(void**)&glBlendFunc_Z is null) assert(0, `OpenGL function 'glBlendFunc' not found!`);
  glBlendFunc_Z(a00,a01,);
}
alias glLogicOp = glLogicOp_Z;
__gshared glbfn_glLogicOp glLogicOp_Z = function void (uint a00) {
  glbfn_glLogicOp_loader(a00,);
};
private void glbfn_glLogicOp_loader (uint a00) {
  *cast(void**)&glLogicOp_Z = glbindGetProcAddress(`glLogicOp`);
  if (*cast(void**)&glLogicOp_Z is null) assert(0, `OpenGL function 'glLogicOp' not found!`);
  glLogicOp_Z(a00,);
}
alias glStencilFunc = glStencilFunc_Z;
__gshared glbfn_glStencilFunc glStencilFunc_Z = function void (uint a00,int a01,uint a02) {
  glbfn_glStencilFunc_loader(a00,a01,a02,);
};
private void glbfn_glStencilFunc_loader (uint a00,int a01,uint a02) {
  *cast(void**)&glStencilFunc_Z = glbindGetProcAddress(`glStencilFunc`);
  if (*cast(void**)&glStencilFunc_Z is null) assert(0, `OpenGL function 'glStencilFunc' not found!`);
  glStencilFunc_Z(a00,a01,a02,);
}
alias glStencilOp = glStencilOp_Z;
__gshared glbfn_glStencilOp glStencilOp_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glStencilOp_loader(a00,a01,a02,);
};
private void glbfn_glStencilOp_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glStencilOp_Z = glbindGetProcAddress(`glStencilOp`);
  if (*cast(void**)&glStencilOp_Z is null) assert(0, `OpenGL function 'glStencilOp' not found!`);
  glStencilOp_Z(a00,a01,a02,);
}
alias glDepthFunc = glDepthFunc_Z;
__gshared glbfn_glDepthFunc glDepthFunc_Z = function void (uint a00) {
  glbfn_glDepthFunc_loader(a00,);
};
private void glbfn_glDepthFunc_loader (uint a00) {
  *cast(void**)&glDepthFunc_Z = glbindGetProcAddress(`glDepthFunc`);
  if (*cast(void**)&glDepthFunc_Z is null) assert(0, `OpenGL function 'glDepthFunc' not found!`);
  glDepthFunc_Z(a00,);
}
alias glPixelStoref = glPixelStoref_Z;
__gshared glbfn_glPixelStoref glPixelStoref_Z = function void (uint a00,float a01) {
  glbfn_glPixelStoref_loader(a00,a01,);
};
private void glbfn_glPixelStoref_loader (uint a00,float a01) {
  *cast(void**)&glPixelStoref_Z = glbindGetProcAddress(`glPixelStoref`);
  if (*cast(void**)&glPixelStoref_Z is null) assert(0, `OpenGL function 'glPixelStoref' not found!`);
  glPixelStoref_Z(a00,a01,);
}
alias glPixelStorei = glPixelStorei_Z;
__gshared glbfn_glPixelStorei glPixelStorei_Z = function void (uint a00,int a01) {
  glbfn_glPixelStorei_loader(a00,a01,);
};
private void glbfn_glPixelStorei_loader (uint a00,int a01) {
  *cast(void**)&glPixelStorei_Z = glbindGetProcAddress(`glPixelStorei`);
  if (*cast(void**)&glPixelStorei_Z is null) assert(0, `OpenGL function 'glPixelStorei' not found!`);
  glPixelStorei_Z(a00,a01,);
}
alias glReadBuffer = glReadBuffer_Z;
__gshared glbfn_glReadBuffer glReadBuffer_Z = function void (uint a00) {
  glbfn_glReadBuffer_loader(a00,);
};
private void glbfn_glReadBuffer_loader (uint a00) {
  *cast(void**)&glReadBuffer_Z = glbindGetProcAddress(`glReadBuffer`);
  if (*cast(void**)&glReadBuffer_Z is null) assert(0, `OpenGL function 'glReadBuffer' not found!`);
  glReadBuffer_Z(a00,);
}
alias glReadPixels = glReadPixels_Z;
__gshared glbfn_glReadPixels glReadPixels_Z = function void (int a00,int a01,int a02,int a03,uint a04,uint a05,void* a06) {
  glbfn_glReadPixels_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glReadPixels_loader (int a00,int a01,int a02,int a03,uint a04,uint a05,void* a06) {
  *cast(void**)&glReadPixels_Z = glbindGetProcAddress(`glReadPixels`);
  if (*cast(void**)&glReadPixels_Z is null) assert(0, `OpenGL function 'glReadPixels' not found!`);
  glReadPixels_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetBooleanv = glGetBooleanv_Z;
__gshared glbfn_glGetBooleanv glGetBooleanv_Z = function void (uint a00,ubyte* a01) {
  glbfn_glGetBooleanv_loader(a00,a01,);
};
private void glbfn_glGetBooleanv_loader (uint a00,ubyte* a01) {
  *cast(void**)&glGetBooleanv_Z = glbindGetProcAddress(`glGetBooleanv`);
  if (*cast(void**)&glGetBooleanv_Z is null) assert(0, `OpenGL function 'glGetBooleanv' not found!`);
  glGetBooleanv_Z(a00,a01,);
}
alias glGetDoublev = glGetDoublev_Z;
__gshared glbfn_glGetDoublev glGetDoublev_Z = function void (uint a00,double* a01) {
  glbfn_glGetDoublev_loader(a00,a01,);
};
private void glbfn_glGetDoublev_loader (uint a00,double* a01) {
  *cast(void**)&glGetDoublev_Z = glbindGetProcAddress(`glGetDoublev`);
  if (*cast(void**)&glGetDoublev_Z is null) assert(0, `OpenGL function 'glGetDoublev' not found!`);
  glGetDoublev_Z(a00,a01,);
}
alias glGetError = glGetError_Z;
__gshared glbfn_glGetError glGetError_Z = function uint () {
  return glbfn_glGetError_loader();
};
private uint glbfn_glGetError_loader () {
  *cast(void**)&glGetError_Z = glbindGetProcAddress(`glGetError`);
  if (*cast(void**)&glGetError_Z is null) assert(0, `OpenGL function 'glGetError' not found!`);
  return glGetError_Z();
}
alias glGetFloatv = glGetFloatv_Z;
__gshared glbfn_glGetFloatv glGetFloatv_Z = function void (uint a00,float* a01) {
  glbfn_glGetFloatv_loader(a00,a01,);
};
private void glbfn_glGetFloatv_loader (uint a00,float* a01) {
  *cast(void**)&glGetFloatv_Z = glbindGetProcAddress(`glGetFloatv`);
  if (*cast(void**)&glGetFloatv_Z is null) assert(0, `OpenGL function 'glGetFloatv' not found!`);
  glGetFloatv_Z(a00,a01,);
}
alias glGetIntegerv = glGetIntegerv_Z;
__gshared glbfn_glGetIntegerv glGetIntegerv_Z = function void (uint a00,int* a01) {
  glbfn_glGetIntegerv_loader(a00,a01,);
};
private void glbfn_glGetIntegerv_loader (uint a00,int* a01) {
  *cast(void**)&glGetIntegerv_Z = glbindGetProcAddress(`glGetIntegerv`);
  if (*cast(void**)&glGetIntegerv_Z is null) assert(0, `OpenGL function 'glGetIntegerv' not found!`);
  glGetIntegerv_Z(a00,a01,);
}
alias glGetString = glGetString_Z;
__gshared glbfn_glGetString glGetString_Z = function const(char)* (uint a00) {
  return glbfn_glGetString_loader(a00,);
};
private const(char)* glbfn_glGetString_loader (uint a00) {
  *cast(void**)&glGetString_Z = glbindGetProcAddress(`glGetString`);
  if (*cast(void**)&glGetString_Z is null) assert(0, `OpenGL function 'glGetString' not found!`);
  return glGetString_Z(a00,);
}
alias glGetTexImage = glGetTexImage_Z;
__gshared glbfn_glGetTexImage glGetTexImage_Z = function void (uint a00,int a01,uint a02,uint a03,void* a04) {
  glbfn_glGetTexImage_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetTexImage_loader (uint a00,int a01,uint a02,uint a03,void* a04) {
  *cast(void**)&glGetTexImage_Z = glbindGetProcAddress(`glGetTexImage`);
  if (*cast(void**)&glGetTexImage_Z is null) assert(0, `OpenGL function 'glGetTexImage' not found!`);
  glGetTexImage_Z(a00,a01,a02,a03,a04,);
}
alias glGetTexParameterfv = glGetTexParameterfv_Z;
__gshared glbfn_glGetTexParameterfv glGetTexParameterfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetTexParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameterfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetTexParameterfv_Z = glbindGetProcAddress(`glGetTexParameterfv`);
  if (*cast(void**)&glGetTexParameterfv_Z is null) assert(0, `OpenGL function 'glGetTexParameterfv' not found!`);
  glGetTexParameterfv_Z(a00,a01,a02,);
}
alias glGetTexParameteriv = glGetTexParameteriv_Z;
__gshared glbfn_glGetTexParameteriv glGetTexParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexParameteriv_Z = glbindGetProcAddress(`glGetTexParameteriv`);
  if (*cast(void**)&glGetTexParameteriv_Z is null) assert(0, `OpenGL function 'glGetTexParameteriv' not found!`);
  glGetTexParameteriv_Z(a00,a01,a02,);
}
alias glGetTexLevelParameterfv = glGetTexLevelParameterfv_Z;
__gshared glbfn_glGetTexLevelParameterfv glGetTexLevelParameterfv_Z = function void (uint a00,int a01,uint a02,float* a03) {
  glbfn_glGetTexLevelParameterfv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTexLevelParameterfv_loader (uint a00,int a01,uint a02,float* a03) {
  *cast(void**)&glGetTexLevelParameterfv_Z = glbindGetProcAddress(`glGetTexLevelParameterfv`);
  if (*cast(void**)&glGetTexLevelParameterfv_Z is null) assert(0, `OpenGL function 'glGetTexLevelParameterfv' not found!`);
  glGetTexLevelParameterfv_Z(a00,a01,a02,a03,);
}
alias glGetTexLevelParameteriv = glGetTexLevelParameteriv_Z;
__gshared glbfn_glGetTexLevelParameteriv glGetTexLevelParameteriv_Z = function void (uint a00,int a01,uint a02,int* a03) {
  glbfn_glGetTexLevelParameteriv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTexLevelParameteriv_loader (uint a00,int a01,uint a02,int* a03) {
  *cast(void**)&glGetTexLevelParameteriv_Z = glbindGetProcAddress(`glGetTexLevelParameteriv`);
  if (*cast(void**)&glGetTexLevelParameteriv_Z is null) assert(0, `OpenGL function 'glGetTexLevelParameteriv' not found!`);
  glGetTexLevelParameteriv_Z(a00,a01,a02,a03,);
}
alias glIsEnabled = glIsEnabled_Z;
__gshared glbfn_glIsEnabled glIsEnabled_Z = function ubyte (uint a00) {
  return glbfn_glIsEnabled_loader(a00,);
};
private ubyte glbfn_glIsEnabled_loader (uint a00) {
  *cast(void**)&glIsEnabled_Z = glbindGetProcAddress(`glIsEnabled`);
  if (*cast(void**)&glIsEnabled_Z is null) assert(0, `OpenGL function 'glIsEnabled' not found!`);
  return glIsEnabled_Z(a00,);
}
alias glDepthRange = glDepthRange_Z;
__gshared glbfn_glDepthRange glDepthRange_Z = function void (double a00,double a01) {
  glbfn_glDepthRange_loader(a00,a01,);
};
private void glbfn_glDepthRange_loader (double a00,double a01) {
  *cast(void**)&glDepthRange_Z = glbindGetProcAddress(`glDepthRange`);
  if (*cast(void**)&glDepthRange_Z is null) assert(0, `OpenGL function 'glDepthRange' not found!`);
  glDepthRange_Z(a00,a01,);
}
alias glViewport = glViewport_Z;
__gshared glbfn_glViewport glViewport_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glViewport_loader(a00,a01,a02,a03,);
};
private void glbfn_glViewport_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glViewport_Z = glbindGetProcAddress(`glViewport`);
  if (*cast(void**)&glViewport_Z is null) assert(0, `OpenGL function 'glViewport' not found!`);
  glViewport_Z(a00,a01,a02,a03,);
}
alias glNewList = glNewList_Z;
__gshared glbfn_glNewList glNewList_Z = function void (uint a00,uint a01) {
  glbfn_glNewList_loader(a00,a01,);
};
private void glbfn_glNewList_loader (uint a00,uint a01) {
  *cast(void**)&glNewList_Z = glbindGetProcAddress(`glNewList`);
  if (*cast(void**)&glNewList_Z is null) assert(0, `OpenGL function 'glNewList' not found!`);
  glNewList_Z(a00,a01,);
}
alias glEndList = glEndList_Z;
__gshared glbfn_glEndList glEndList_Z = function void () {
  glbfn_glEndList_loader();
};
private void glbfn_glEndList_loader () {
  *cast(void**)&glEndList_Z = glbindGetProcAddress(`glEndList`);
  if (*cast(void**)&glEndList_Z is null) assert(0, `OpenGL function 'glEndList' not found!`);
  glEndList_Z();
}
alias glCallList = glCallList_Z;
__gshared glbfn_glCallList glCallList_Z = function void (uint a00) {
  glbfn_glCallList_loader(a00,);
};
private void glbfn_glCallList_loader (uint a00) {
  *cast(void**)&glCallList_Z = glbindGetProcAddress(`glCallList`);
  if (*cast(void**)&glCallList_Z is null) assert(0, `OpenGL function 'glCallList' not found!`);
  glCallList_Z(a00,);
}
alias glCallLists = glCallLists_Z;
__gshared glbfn_glCallLists glCallLists_Z = function void (int a00,uint a01,const(void)* a02) {
  glbfn_glCallLists_loader(a00,a01,a02,);
};
private void glbfn_glCallLists_loader (int a00,uint a01,const(void)* a02) {
  *cast(void**)&glCallLists_Z = glbindGetProcAddress(`glCallLists`);
  if (*cast(void**)&glCallLists_Z is null) assert(0, `OpenGL function 'glCallLists' not found!`);
  glCallLists_Z(a00,a01,a02,);
}
alias glDeleteLists = glDeleteLists_Z;
__gshared glbfn_glDeleteLists glDeleteLists_Z = function void (uint a00,int a01) {
  glbfn_glDeleteLists_loader(a00,a01,);
};
private void glbfn_glDeleteLists_loader (uint a00,int a01) {
  *cast(void**)&glDeleteLists_Z = glbindGetProcAddress(`glDeleteLists`);
  if (*cast(void**)&glDeleteLists_Z is null) assert(0, `OpenGL function 'glDeleteLists' not found!`);
  glDeleteLists_Z(a00,a01,);
}
alias glGenLists = glGenLists_Z;
__gshared glbfn_glGenLists glGenLists_Z = function uint (int a00) {
  return glbfn_glGenLists_loader(a00,);
};
private uint glbfn_glGenLists_loader (int a00) {
  *cast(void**)&glGenLists_Z = glbindGetProcAddress(`glGenLists`);
  if (*cast(void**)&glGenLists_Z is null) assert(0, `OpenGL function 'glGenLists' not found!`);
  return glGenLists_Z(a00,);
}
alias glListBase = glListBase_Z;
__gshared glbfn_glListBase glListBase_Z = function void (uint a00) {
  glbfn_glListBase_loader(a00,);
};
private void glbfn_glListBase_loader (uint a00) {
  *cast(void**)&glListBase_Z = glbindGetProcAddress(`glListBase`);
  if (*cast(void**)&glListBase_Z is null) assert(0, `OpenGL function 'glListBase' not found!`);
  glListBase_Z(a00,);
}
alias glBegin = glBegin_Z;
__gshared glbfn_glBegin glBegin_Z = function void (uint a00) {
  glbfn_glBegin_loader(a00,);
};
private void glbfn_glBegin_loader (uint a00) {
  *cast(void**)&glBegin_Z = glbindGetProcAddress(`glBegin`);
  if (*cast(void**)&glBegin_Z is null) assert(0, `OpenGL function 'glBegin' not found!`);
  glBegin_Z(a00,);
}
alias glBitmap = glBitmap_Z;
__gshared glbfn_glBitmap glBitmap_Z = function void (int a00,int a01,float a02,float a03,float a04,float a05,const(ubyte)* a06) {
  glbfn_glBitmap_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glBitmap_loader (int a00,int a01,float a02,float a03,float a04,float a05,const(ubyte)* a06) {
  *cast(void**)&glBitmap_Z = glbindGetProcAddress(`glBitmap`);
  if (*cast(void**)&glBitmap_Z is null) assert(0, `OpenGL function 'glBitmap' not found!`);
  glBitmap_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glColor3b = glColor3b_Z;
__gshared glbfn_glColor3b glColor3b_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glColor3b_loader(a00,a01,a02,);
};
private void glbfn_glColor3b_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glColor3b_Z = glbindGetProcAddress(`glColor3b`);
  if (*cast(void**)&glColor3b_Z is null) assert(0, `OpenGL function 'glColor3b' not found!`);
  glColor3b_Z(a00,a01,a02,);
}
alias glColor3bv = glColor3bv_Z;
__gshared glbfn_glColor3bv glColor3bv_Z = function void (const(byte)* a00) {
  glbfn_glColor3bv_loader(a00,);
};
private void glbfn_glColor3bv_loader (const(byte)* a00) {
  *cast(void**)&glColor3bv_Z = glbindGetProcAddress(`glColor3bv`);
  if (*cast(void**)&glColor3bv_Z is null) assert(0, `OpenGL function 'glColor3bv' not found!`);
  glColor3bv_Z(a00,);
}
alias glColor3d = glColor3d_Z;
__gshared glbfn_glColor3d glColor3d_Z = function void (double a00,double a01,double a02) {
  glbfn_glColor3d_loader(a00,a01,a02,);
};
private void glbfn_glColor3d_loader (double a00,double a01,double a02) {
  *cast(void**)&glColor3d_Z = glbindGetProcAddress(`glColor3d`);
  if (*cast(void**)&glColor3d_Z is null) assert(0, `OpenGL function 'glColor3d' not found!`);
  glColor3d_Z(a00,a01,a02,);
}
alias glColor3dv = glColor3dv_Z;
__gshared glbfn_glColor3dv glColor3dv_Z = function void (const(double)* a00) {
  glbfn_glColor3dv_loader(a00,);
};
private void glbfn_glColor3dv_loader (const(double)* a00) {
  *cast(void**)&glColor3dv_Z = glbindGetProcAddress(`glColor3dv`);
  if (*cast(void**)&glColor3dv_Z is null) assert(0, `OpenGL function 'glColor3dv' not found!`);
  glColor3dv_Z(a00,);
}
alias glColor3f = glColor3f_Z;
__gshared glbfn_glColor3f glColor3f_Z = function void (float a00,float a01,float a02) {
  glbfn_glColor3f_loader(a00,a01,a02,);
};
private void glbfn_glColor3f_loader (float a00,float a01,float a02) {
  *cast(void**)&glColor3f_Z = glbindGetProcAddress(`glColor3f`);
  if (*cast(void**)&glColor3f_Z is null) assert(0, `OpenGL function 'glColor3f' not found!`);
  glColor3f_Z(a00,a01,a02,);
}
alias glColor3fv = glColor3fv_Z;
__gshared glbfn_glColor3fv glColor3fv_Z = function void (const(float)* a00) {
  glbfn_glColor3fv_loader(a00,);
};
private void glbfn_glColor3fv_loader (const(float)* a00) {
  *cast(void**)&glColor3fv_Z = glbindGetProcAddress(`glColor3fv`);
  if (*cast(void**)&glColor3fv_Z is null) assert(0, `OpenGL function 'glColor3fv' not found!`);
  glColor3fv_Z(a00,);
}
alias glColor3i = glColor3i_Z;
__gshared glbfn_glColor3i glColor3i_Z = function void (int a00,int a01,int a02) {
  glbfn_glColor3i_loader(a00,a01,a02,);
};
private void glbfn_glColor3i_loader (int a00,int a01,int a02) {
  *cast(void**)&glColor3i_Z = glbindGetProcAddress(`glColor3i`);
  if (*cast(void**)&glColor3i_Z is null) assert(0, `OpenGL function 'glColor3i' not found!`);
  glColor3i_Z(a00,a01,a02,);
}
alias glColor3iv = glColor3iv_Z;
__gshared glbfn_glColor3iv glColor3iv_Z = function void (const(int)* a00) {
  glbfn_glColor3iv_loader(a00,);
};
private void glbfn_glColor3iv_loader (const(int)* a00) {
  *cast(void**)&glColor3iv_Z = glbindGetProcAddress(`glColor3iv`);
  if (*cast(void**)&glColor3iv_Z is null) assert(0, `OpenGL function 'glColor3iv' not found!`);
  glColor3iv_Z(a00,);
}
alias glColor3s = glColor3s_Z;
__gshared glbfn_glColor3s glColor3s_Z = function void (short a00,short a01,short a02) {
  glbfn_glColor3s_loader(a00,a01,a02,);
};
private void glbfn_glColor3s_loader (short a00,short a01,short a02) {
  *cast(void**)&glColor3s_Z = glbindGetProcAddress(`glColor3s`);
  if (*cast(void**)&glColor3s_Z is null) assert(0, `OpenGL function 'glColor3s' not found!`);
  glColor3s_Z(a00,a01,a02,);
}
alias glColor3sv = glColor3sv_Z;
__gshared glbfn_glColor3sv glColor3sv_Z = function void (const(short)* a00) {
  glbfn_glColor3sv_loader(a00,);
};
private void glbfn_glColor3sv_loader (const(short)* a00) {
  *cast(void**)&glColor3sv_Z = glbindGetProcAddress(`glColor3sv`);
  if (*cast(void**)&glColor3sv_Z is null) assert(0, `OpenGL function 'glColor3sv' not found!`);
  glColor3sv_Z(a00,);
}
alias glColor3ub = glColor3ub_Z;
__gshared glbfn_glColor3ub glColor3ub_Z = function void (ubyte a00,ubyte a01,ubyte a02) {
  glbfn_glColor3ub_loader(a00,a01,a02,);
};
private void glbfn_glColor3ub_loader (ubyte a00,ubyte a01,ubyte a02) {
  *cast(void**)&glColor3ub_Z = glbindGetProcAddress(`glColor3ub`);
  if (*cast(void**)&glColor3ub_Z is null) assert(0, `OpenGL function 'glColor3ub' not found!`);
  glColor3ub_Z(a00,a01,a02,);
}
alias glColor3ubv = glColor3ubv_Z;
__gshared glbfn_glColor3ubv glColor3ubv_Z = function void (const(ubyte)* a00) {
  glbfn_glColor3ubv_loader(a00,);
};
private void glbfn_glColor3ubv_loader (const(ubyte)* a00) {
  *cast(void**)&glColor3ubv_Z = glbindGetProcAddress(`glColor3ubv`);
  if (*cast(void**)&glColor3ubv_Z is null) assert(0, `OpenGL function 'glColor3ubv' not found!`);
  glColor3ubv_Z(a00,);
}
alias glColor3ui = glColor3ui_Z;
__gshared glbfn_glColor3ui glColor3ui_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glColor3ui_loader(a00,a01,a02,);
};
private void glbfn_glColor3ui_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glColor3ui_Z = glbindGetProcAddress(`glColor3ui`);
  if (*cast(void**)&glColor3ui_Z is null) assert(0, `OpenGL function 'glColor3ui' not found!`);
  glColor3ui_Z(a00,a01,a02,);
}
alias glColor3uiv = glColor3uiv_Z;
__gshared glbfn_glColor3uiv glColor3uiv_Z = function void (const(uint)* a00) {
  glbfn_glColor3uiv_loader(a00,);
};
private void glbfn_glColor3uiv_loader (const(uint)* a00) {
  *cast(void**)&glColor3uiv_Z = glbindGetProcAddress(`glColor3uiv`);
  if (*cast(void**)&glColor3uiv_Z is null) assert(0, `OpenGL function 'glColor3uiv' not found!`);
  glColor3uiv_Z(a00,);
}
alias glColor3us = glColor3us_Z;
__gshared glbfn_glColor3us glColor3us_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glColor3us_loader(a00,a01,a02,);
};
private void glbfn_glColor3us_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glColor3us_Z = glbindGetProcAddress(`glColor3us`);
  if (*cast(void**)&glColor3us_Z is null) assert(0, `OpenGL function 'glColor3us' not found!`);
  glColor3us_Z(a00,a01,a02,);
}
alias glColor3usv = glColor3usv_Z;
__gshared glbfn_glColor3usv glColor3usv_Z = function void (const(ushort)* a00) {
  glbfn_glColor3usv_loader(a00,);
};
private void glbfn_glColor3usv_loader (const(ushort)* a00) {
  *cast(void**)&glColor3usv_Z = glbindGetProcAddress(`glColor3usv`);
  if (*cast(void**)&glColor3usv_Z is null) assert(0, `OpenGL function 'glColor3usv' not found!`);
  glColor3usv_Z(a00,);
}
alias glColor4b = glColor4b_Z;
__gshared glbfn_glColor4b glColor4b_Z = function void (byte a00,byte a01,byte a02,byte a03) {
  glbfn_glColor4b_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4b_loader (byte a00,byte a01,byte a02,byte a03) {
  *cast(void**)&glColor4b_Z = glbindGetProcAddress(`glColor4b`);
  if (*cast(void**)&glColor4b_Z is null) assert(0, `OpenGL function 'glColor4b' not found!`);
  glColor4b_Z(a00,a01,a02,a03,);
}
alias glColor4bv = glColor4bv_Z;
__gshared glbfn_glColor4bv glColor4bv_Z = function void (const(byte)* a00) {
  glbfn_glColor4bv_loader(a00,);
};
private void glbfn_glColor4bv_loader (const(byte)* a00) {
  *cast(void**)&glColor4bv_Z = glbindGetProcAddress(`glColor4bv`);
  if (*cast(void**)&glColor4bv_Z is null) assert(0, `OpenGL function 'glColor4bv' not found!`);
  glColor4bv_Z(a00,);
}
alias glColor4d = glColor4d_Z;
__gshared glbfn_glColor4d glColor4d_Z = function void (double a00,double a01,double a02,double a03) {
  glbfn_glColor4d_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4d_loader (double a00,double a01,double a02,double a03) {
  *cast(void**)&glColor4d_Z = glbindGetProcAddress(`glColor4d`);
  if (*cast(void**)&glColor4d_Z is null) assert(0, `OpenGL function 'glColor4d' not found!`);
  glColor4d_Z(a00,a01,a02,a03,);
}
alias glColor4dv = glColor4dv_Z;
__gshared glbfn_glColor4dv glColor4dv_Z = function void (const(double)* a00) {
  glbfn_glColor4dv_loader(a00,);
};
private void glbfn_glColor4dv_loader (const(double)* a00) {
  *cast(void**)&glColor4dv_Z = glbindGetProcAddress(`glColor4dv`);
  if (*cast(void**)&glColor4dv_Z is null) assert(0, `OpenGL function 'glColor4dv' not found!`);
  glColor4dv_Z(a00,);
}
alias glColor4f = glColor4f_Z;
__gshared glbfn_glColor4f glColor4f_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glColor4f_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4f_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glColor4f_Z = glbindGetProcAddress(`glColor4f`);
  if (*cast(void**)&glColor4f_Z is null) assert(0, `OpenGL function 'glColor4f' not found!`);
  glColor4f_Z(a00,a01,a02,a03,);
}
alias glColor4fv = glColor4fv_Z;
__gshared glbfn_glColor4fv glColor4fv_Z = function void (const(float)* a00) {
  glbfn_glColor4fv_loader(a00,);
};
private void glbfn_glColor4fv_loader (const(float)* a00) {
  *cast(void**)&glColor4fv_Z = glbindGetProcAddress(`glColor4fv`);
  if (*cast(void**)&glColor4fv_Z is null) assert(0, `OpenGL function 'glColor4fv' not found!`);
  glColor4fv_Z(a00,);
}
alias glColor4i = glColor4i_Z;
__gshared glbfn_glColor4i glColor4i_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glColor4i_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4i_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glColor4i_Z = glbindGetProcAddress(`glColor4i`);
  if (*cast(void**)&glColor4i_Z is null) assert(0, `OpenGL function 'glColor4i' not found!`);
  glColor4i_Z(a00,a01,a02,a03,);
}
alias glColor4iv = glColor4iv_Z;
__gshared glbfn_glColor4iv glColor4iv_Z = function void (const(int)* a00) {
  glbfn_glColor4iv_loader(a00,);
};
private void glbfn_glColor4iv_loader (const(int)* a00) {
  *cast(void**)&glColor4iv_Z = glbindGetProcAddress(`glColor4iv`);
  if (*cast(void**)&glColor4iv_Z is null) assert(0, `OpenGL function 'glColor4iv' not found!`);
  glColor4iv_Z(a00,);
}
alias glColor4s = glColor4s_Z;
__gshared glbfn_glColor4s glColor4s_Z = function void (short a00,short a01,short a02,short a03) {
  glbfn_glColor4s_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4s_loader (short a00,short a01,short a02,short a03) {
  *cast(void**)&glColor4s_Z = glbindGetProcAddress(`glColor4s`);
  if (*cast(void**)&glColor4s_Z is null) assert(0, `OpenGL function 'glColor4s' not found!`);
  glColor4s_Z(a00,a01,a02,a03,);
}
alias glColor4sv = glColor4sv_Z;
__gshared glbfn_glColor4sv glColor4sv_Z = function void (const(short)* a00) {
  glbfn_glColor4sv_loader(a00,);
};
private void glbfn_glColor4sv_loader (const(short)* a00) {
  *cast(void**)&glColor4sv_Z = glbindGetProcAddress(`glColor4sv`);
  if (*cast(void**)&glColor4sv_Z is null) assert(0, `OpenGL function 'glColor4sv' not found!`);
  glColor4sv_Z(a00,);
}
alias glColor4ub = glColor4ub_Z;
__gshared glbfn_glColor4ub glColor4ub_Z = function void (ubyte a00,ubyte a01,ubyte a02,ubyte a03) {
  glbfn_glColor4ub_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4ub_loader (ubyte a00,ubyte a01,ubyte a02,ubyte a03) {
  *cast(void**)&glColor4ub_Z = glbindGetProcAddress(`glColor4ub`);
  if (*cast(void**)&glColor4ub_Z is null) assert(0, `OpenGL function 'glColor4ub' not found!`);
  glColor4ub_Z(a00,a01,a02,a03,);
}
alias glColor4ubv = glColor4ubv_Z;
__gshared glbfn_glColor4ubv glColor4ubv_Z = function void (const(ubyte)* a00) {
  glbfn_glColor4ubv_loader(a00,);
};
private void glbfn_glColor4ubv_loader (const(ubyte)* a00) {
  *cast(void**)&glColor4ubv_Z = glbindGetProcAddress(`glColor4ubv`);
  if (*cast(void**)&glColor4ubv_Z is null) assert(0, `OpenGL function 'glColor4ubv' not found!`);
  glColor4ubv_Z(a00,);
}
alias glColor4ui = glColor4ui_Z;
__gshared glbfn_glColor4ui glColor4ui_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glColor4ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4ui_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glColor4ui_Z = glbindGetProcAddress(`glColor4ui`);
  if (*cast(void**)&glColor4ui_Z is null) assert(0, `OpenGL function 'glColor4ui' not found!`);
  glColor4ui_Z(a00,a01,a02,a03,);
}
alias glColor4uiv = glColor4uiv_Z;
__gshared glbfn_glColor4uiv glColor4uiv_Z = function void (const(uint)* a00) {
  glbfn_glColor4uiv_loader(a00,);
};
private void glbfn_glColor4uiv_loader (const(uint)* a00) {
  *cast(void**)&glColor4uiv_Z = glbindGetProcAddress(`glColor4uiv`);
  if (*cast(void**)&glColor4uiv_Z is null) assert(0, `OpenGL function 'glColor4uiv' not found!`);
  glColor4uiv_Z(a00,);
}
alias glColor4us = glColor4us_Z;
__gshared glbfn_glColor4us glColor4us_Z = function void (ushort a00,ushort a01,ushort a02,ushort a03) {
  glbfn_glColor4us_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4us_loader (ushort a00,ushort a01,ushort a02,ushort a03) {
  *cast(void**)&glColor4us_Z = glbindGetProcAddress(`glColor4us`);
  if (*cast(void**)&glColor4us_Z is null) assert(0, `OpenGL function 'glColor4us' not found!`);
  glColor4us_Z(a00,a01,a02,a03,);
}
alias glColor4usv = glColor4usv_Z;
__gshared glbfn_glColor4usv glColor4usv_Z = function void (const(ushort)* a00) {
  glbfn_glColor4usv_loader(a00,);
};
private void glbfn_glColor4usv_loader (const(ushort)* a00) {
  *cast(void**)&glColor4usv_Z = glbindGetProcAddress(`glColor4usv`);
  if (*cast(void**)&glColor4usv_Z is null) assert(0, `OpenGL function 'glColor4usv' not found!`);
  glColor4usv_Z(a00,);
}
alias glEdgeFlag = glEdgeFlag_Z;
__gshared glbfn_glEdgeFlag glEdgeFlag_Z = function void (ubyte a00) {
  glbfn_glEdgeFlag_loader(a00,);
};
private void glbfn_glEdgeFlag_loader (ubyte a00) {
  *cast(void**)&glEdgeFlag_Z = glbindGetProcAddress(`glEdgeFlag`);
  if (*cast(void**)&glEdgeFlag_Z is null) assert(0, `OpenGL function 'glEdgeFlag' not found!`);
  glEdgeFlag_Z(a00,);
}
alias glEdgeFlagv = glEdgeFlagv_Z;
__gshared glbfn_glEdgeFlagv glEdgeFlagv_Z = function void (const(ubyte)* a00) {
  glbfn_glEdgeFlagv_loader(a00,);
};
private void glbfn_glEdgeFlagv_loader (const(ubyte)* a00) {
  *cast(void**)&glEdgeFlagv_Z = glbindGetProcAddress(`glEdgeFlagv`);
  if (*cast(void**)&glEdgeFlagv_Z is null) assert(0, `OpenGL function 'glEdgeFlagv' not found!`);
  glEdgeFlagv_Z(a00,);
}
alias glEnd = glEnd_Z;
__gshared glbfn_glEnd glEnd_Z = function void () {
  glbfn_glEnd_loader();
};
private void glbfn_glEnd_loader () {
  *cast(void**)&glEnd_Z = glbindGetProcAddress(`glEnd`);
  if (*cast(void**)&glEnd_Z is null) assert(0, `OpenGL function 'glEnd' not found!`);
  glEnd_Z();
}
alias glIndexd = glIndexd_Z;
__gshared glbfn_glIndexd glIndexd_Z = function void (double a00) {
  glbfn_glIndexd_loader(a00,);
};
private void glbfn_glIndexd_loader (double a00) {
  *cast(void**)&glIndexd_Z = glbindGetProcAddress(`glIndexd`);
  if (*cast(void**)&glIndexd_Z is null) assert(0, `OpenGL function 'glIndexd' not found!`);
  glIndexd_Z(a00,);
}
alias glIndexdv = glIndexdv_Z;
__gshared glbfn_glIndexdv glIndexdv_Z = function void (const(double)* a00) {
  glbfn_glIndexdv_loader(a00,);
};
private void glbfn_glIndexdv_loader (const(double)* a00) {
  *cast(void**)&glIndexdv_Z = glbindGetProcAddress(`glIndexdv`);
  if (*cast(void**)&glIndexdv_Z is null) assert(0, `OpenGL function 'glIndexdv' not found!`);
  glIndexdv_Z(a00,);
}
alias glIndexf = glIndexf_Z;
__gshared glbfn_glIndexf glIndexf_Z = function void (float a00) {
  glbfn_glIndexf_loader(a00,);
};
private void glbfn_glIndexf_loader (float a00) {
  *cast(void**)&glIndexf_Z = glbindGetProcAddress(`glIndexf`);
  if (*cast(void**)&glIndexf_Z is null) assert(0, `OpenGL function 'glIndexf' not found!`);
  glIndexf_Z(a00,);
}
alias glIndexfv = glIndexfv_Z;
__gshared glbfn_glIndexfv glIndexfv_Z = function void (const(float)* a00) {
  glbfn_glIndexfv_loader(a00,);
};
private void glbfn_glIndexfv_loader (const(float)* a00) {
  *cast(void**)&glIndexfv_Z = glbindGetProcAddress(`glIndexfv`);
  if (*cast(void**)&glIndexfv_Z is null) assert(0, `OpenGL function 'glIndexfv' not found!`);
  glIndexfv_Z(a00,);
}
alias glIndexi = glIndexi_Z;
__gshared glbfn_glIndexi glIndexi_Z = function void (int a00) {
  glbfn_glIndexi_loader(a00,);
};
private void glbfn_glIndexi_loader (int a00) {
  *cast(void**)&glIndexi_Z = glbindGetProcAddress(`glIndexi`);
  if (*cast(void**)&glIndexi_Z is null) assert(0, `OpenGL function 'glIndexi' not found!`);
  glIndexi_Z(a00,);
}
alias glIndexiv = glIndexiv_Z;
__gshared glbfn_glIndexiv glIndexiv_Z = function void (const(int)* a00) {
  glbfn_glIndexiv_loader(a00,);
};
private void glbfn_glIndexiv_loader (const(int)* a00) {
  *cast(void**)&glIndexiv_Z = glbindGetProcAddress(`glIndexiv`);
  if (*cast(void**)&glIndexiv_Z is null) assert(0, `OpenGL function 'glIndexiv' not found!`);
  glIndexiv_Z(a00,);
}
alias glIndexs = glIndexs_Z;
__gshared glbfn_glIndexs glIndexs_Z = function void (short a00) {
  glbfn_glIndexs_loader(a00,);
};
private void glbfn_glIndexs_loader (short a00) {
  *cast(void**)&glIndexs_Z = glbindGetProcAddress(`glIndexs`);
  if (*cast(void**)&glIndexs_Z is null) assert(0, `OpenGL function 'glIndexs' not found!`);
  glIndexs_Z(a00,);
}
alias glIndexsv = glIndexsv_Z;
__gshared glbfn_glIndexsv glIndexsv_Z = function void (const(short)* a00) {
  glbfn_glIndexsv_loader(a00,);
};
private void glbfn_glIndexsv_loader (const(short)* a00) {
  *cast(void**)&glIndexsv_Z = glbindGetProcAddress(`glIndexsv`);
  if (*cast(void**)&glIndexsv_Z is null) assert(0, `OpenGL function 'glIndexsv' not found!`);
  glIndexsv_Z(a00,);
}
alias glNormal3b = glNormal3b_Z;
__gshared glbfn_glNormal3b glNormal3b_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glNormal3b_loader(a00,a01,a02,);
};
private void glbfn_glNormal3b_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glNormal3b_Z = glbindGetProcAddress(`glNormal3b`);
  if (*cast(void**)&glNormal3b_Z is null) assert(0, `OpenGL function 'glNormal3b' not found!`);
  glNormal3b_Z(a00,a01,a02,);
}
alias glNormal3bv = glNormal3bv_Z;
__gshared glbfn_glNormal3bv glNormal3bv_Z = function void (const(byte)* a00) {
  glbfn_glNormal3bv_loader(a00,);
};
private void glbfn_glNormal3bv_loader (const(byte)* a00) {
  *cast(void**)&glNormal3bv_Z = glbindGetProcAddress(`glNormal3bv`);
  if (*cast(void**)&glNormal3bv_Z is null) assert(0, `OpenGL function 'glNormal3bv' not found!`);
  glNormal3bv_Z(a00,);
}
alias glNormal3d = glNormal3d_Z;
__gshared glbfn_glNormal3d glNormal3d_Z = function void (double a00,double a01,double a02) {
  glbfn_glNormal3d_loader(a00,a01,a02,);
};
private void glbfn_glNormal3d_loader (double a00,double a01,double a02) {
  *cast(void**)&glNormal3d_Z = glbindGetProcAddress(`glNormal3d`);
  if (*cast(void**)&glNormal3d_Z is null) assert(0, `OpenGL function 'glNormal3d' not found!`);
  glNormal3d_Z(a00,a01,a02,);
}
alias glNormal3dv = glNormal3dv_Z;
__gshared glbfn_glNormal3dv glNormal3dv_Z = function void (const(double)* a00) {
  glbfn_glNormal3dv_loader(a00,);
};
private void glbfn_glNormal3dv_loader (const(double)* a00) {
  *cast(void**)&glNormal3dv_Z = glbindGetProcAddress(`glNormal3dv`);
  if (*cast(void**)&glNormal3dv_Z is null) assert(0, `OpenGL function 'glNormal3dv' not found!`);
  glNormal3dv_Z(a00,);
}
alias glNormal3f = glNormal3f_Z;
__gshared glbfn_glNormal3f glNormal3f_Z = function void (float a00,float a01,float a02) {
  glbfn_glNormal3f_loader(a00,a01,a02,);
};
private void glbfn_glNormal3f_loader (float a00,float a01,float a02) {
  *cast(void**)&glNormal3f_Z = glbindGetProcAddress(`glNormal3f`);
  if (*cast(void**)&glNormal3f_Z is null) assert(0, `OpenGL function 'glNormal3f' not found!`);
  glNormal3f_Z(a00,a01,a02,);
}
alias glNormal3fv = glNormal3fv_Z;
__gshared glbfn_glNormal3fv glNormal3fv_Z = function void (const(float)* a00) {
  glbfn_glNormal3fv_loader(a00,);
};
private void glbfn_glNormal3fv_loader (const(float)* a00) {
  *cast(void**)&glNormal3fv_Z = glbindGetProcAddress(`glNormal3fv`);
  if (*cast(void**)&glNormal3fv_Z is null) assert(0, `OpenGL function 'glNormal3fv' not found!`);
  glNormal3fv_Z(a00,);
}
alias glNormal3i = glNormal3i_Z;
__gshared glbfn_glNormal3i glNormal3i_Z = function void (int a00,int a01,int a02) {
  glbfn_glNormal3i_loader(a00,a01,a02,);
};
private void glbfn_glNormal3i_loader (int a00,int a01,int a02) {
  *cast(void**)&glNormal3i_Z = glbindGetProcAddress(`glNormal3i`);
  if (*cast(void**)&glNormal3i_Z is null) assert(0, `OpenGL function 'glNormal3i' not found!`);
  glNormal3i_Z(a00,a01,a02,);
}
alias glNormal3iv = glNormal3iv_Z;
__gshared glbfn_glNormal3iv glNormal3iv_Z = function void (const(int)* a00) {
  glbfn_glNormal3iv_loader(a00,);
};
private void glbfn_glNormal3iv_loader (const(int)* a00) {
  *cast(void**)&glNormal3iv_Z = glbindGetProcAddress(`glNormal3iv`);
  if (*cast(void**)&glNormal3iv_Z is null) assert(0, `OpenGL function 'glNormal3iv' not found!`);
  glNormal3iv_Z(a00,);
}
alias glNormal3s = glNormal3s_Z;
__gshared glbfn_glNormal3s glNormal3s_Z = function void (short a00,short a01,short a02) {
  glbfn_glNormal3s_loader(a00,a01,a02,);
};
private void glbfn_glNormal3s_loader (short a00,short a01,short a02) {
  *cast(void**)&glNormal3s_Z = glbindGetProcAddress(`glNormal3s`);
  if (*cast(void**)&glNormal3s_Z is null) assert(0, `OpenGL function 'glNormal3s' not found!`);
  glNormal3s_Z(a00,a01,a02,);
}
alias glNormal3sv = glNormal3sv_Z;
__gshared glbfn_glNormal3sv glNormal3sv_Z = function void (const(short)* a00) {
  glbfn_glNormal3sv_loader(a00,);
};
private void glbfn_glNormal3sv_loader (const(short)* a00) {
  *cast(void**)&glNormal3sv_Z = glbindGetProcAddress(`glNormal3sv`);
  if (*cast(void**)&glNormal3sv_Z is null) assert(0, `OpenGL function 'glNormal3sv' not found!`);
  glNormal3sv_Z(a00,);
}
alias glRasterPos2d = glRasterPos2d_Z;
__gshared glbfn_glRasterPos2d glRasterPos2d_Z = function void (double a00,double a01) {
  glbfn_glRasterPos2d_loader(a00,a01,);
};
private void glbfn_glRasterPos2d_loader (double a00,double a01) {
  *cast(void**)&glRasterPos2d_Z = glbindGetProcAddress(`glRasterPos2d`);
  if (*cast(void**)&glRasterPos2d_Z is null) assert(0, `OpenGL function 'glRasterPos2d' not found!`);
  glRasterPos2d_Z(a00,a01,);
}
alias glRasterPos2dv = glRasterPos2dv_Z;
__gshared glbfn_glRasterPos2dv glRasterPos2dv_Z = function void (const(double)* a00) {
  glbfn_glRasterPos2dv_loader(a00,);
};
private void glbfn_glRasterPos2dv_loader (const(double)* a00) {
  *cast(void**)&glRasterPos2dv_Z = glbindGetProcAddress(`glRasterPos2dv`);
  if (*cast(void**)&glRasterPos2dv_Z is null) assert(0, `OpenGL function 'glRasterPos2dv' not found!`);
  glRasterPos2dv_Z(a00,);
}
alias glRasterPos2f = glRasterPos2f_Z;
__gshared glbfn_glRasterPos2f glRasterPos2f_Z = function void (float a00,float a01) {
  glbfn_glRasterPos2f_loader(a00,a01,);
};
private void glbfn_glRasterPos2f_loader (float a00,float a01) {
  *cast(void**)&glRasterPos2f_Z = glbindGetProcAddress(`glRasterPos2f`);
  if (*cast(void**)&glRasterPos2f_Z is null) assert(0, `OpenGL function 'glRasterPos2f' not found!`);
  glRasterPos2f_Z(a00,a01,);
}
alias glRasterPos2fv = glRasterPos2fv_Z;
__gshared glbfn_glRasterPos2fv glRasterPos2fv_Z = function void (const(float)* a00) {
  glbfn_glRasterPos2fv_loader(a00,);
};
private void glbfn_glRasterPos2fv_loader (const(float)* a00) {
  *cast(void**)&glRasterPos2fv_Z = glbindGetProcAddress(`glRasterPos2fv`);
  if (*cast(void**)&glRasterPos2fv_Z is null) assert(0, `OpenGL function 'glRasterPos2fv' not found!`);
  glRasterPos2fv_Z(a00,);
}
alias glRasterPos2i = glRasterPos2i_Z;
__gshared glbfn_glRasterPos2i glRasterPos2i_Z = function void (int a00,int a01) {
  glbfn_glRasterPos2i_loader(a00,a01,);
};
private void glbfn_glRasterPos2i_loader (int a00,int a01) {
  *cast(void**)&glRasterPos2i_Z = glbindGetProcAddress(`glRasterPos2i`);
  if (*cast(void**)&glRasterPos2i_Z is null) assert(0, `OpenGL function 'glRasterPos2i' not found!`);
  glRasterPos2i_Z(a00,a01,);
}
alias glRasterPos2iv = glRasterPos2iv_Z;
__gshared glbfn_glRasterPos2iv glRasterPos2iv_Z = function void (const(int)* a00) {
  glbfn_glRasterPos2iv_loader(a00,);
};
private void glbfn_glRasterPos2iv_loader (const(int)* a00) {
  *cast(void**)&glRasterPos2iv_Z = glbindGetProcAddress(`glRasterPos2iv`);
  if (*cast(void**)&glRasterPos2iv_Z is null) assert(0, `OpenGL function 'glRasterPos2iv' not found!`);
  glRasterPos2iv_Z(a00,);
}
alias glRasterPos2s = glRasterPos2s_Z;
__gshared glbfn_glRasterPos2s glRasterPos2s_Z = function void (short a00,short a01) {
  glbfn_glRasterPos2s_loader(a00,a01,);
};
private void glbfn_glRasterPos2s_loader (short a00,short a01) {
  *cast(void**)&glRasterPos2s_Z = glbindGetProcAddress(`glRasterPos2s`);
  if (*cast(void**)&glRasterPos2s_Z is null) assert(0, `OpenGL function 'glRasterPos2s' not found!`);
  glRasterPos2s_Z(a00,a01,);
}
alias glRasterPos2sv = glRasterPos2sv_Z;
__gshared glbfn_glRasterPos2sv glRasterPos2sv_Z = function void (const(short)* a00) {
  glbfn_glRasterPos2sv_loader(a00,);
};
private void glbfn_glRasterPos2sv_loader (const(short)* a00) {
  *cast(void**)&glRasterPos2sv_Z = glbindGetProcAddress(`glRasterPos2sv`);
  if (*cast(void**)&glRasterPos2sv_Z is null) assert(0, `OpenGL function 'glRasterPos2sv' not found!`);
  glRasterPos2sv_Z(a00,);
}
alias glRasterPos3d = glRasterPos3d_Z;
__gshared glbfn_glRasterPos3d glRasterPos3d_Z = function void (double a00,double a01,double a02) {
  glbfn_glRasterPos3d_loader(a00,a01,a02,);
};
private void glbfn_glRasterPos3d_loader (double a00,double a01,double a02) {
  *cast(void**)&glRasterPos3d_Z = glbindGetProcAddress(`glRasterPos3d`);
  if (*cast(void**)&glRasterPos3d_Z is null) assert(0, `OpenGL function 'glRasterPos3d' not found!`);
  glRasterPos3d_Z(a00,a01,a02,);
}
alias glRasterPos3dv = glRasterPos3dv_Z;
__gshared glbfn_glRasterPos3dv glRasterPos3dv_Z = function void (const(double)* a00) {
  glbfn_glRasterPos3dv_loader(a00,);
};
private void glbfn_glRasterPos3dv_loader (const(double)* a00) {
  *cast(void**)&glRasterPos3dv_Z = glbindGetProcAddress(`glRasterPos3dv`);
  if (*cast(void**)&glRasterPos3dv_Z is null) assert(0, `OpenGL function 'glRasterPos3dv' not found!`);
  glRasterPos3dv_Z(a00,);
}
alias glRasterPos3f = glRasterPos3f_Z;
__gshared glbfn_glRasterPos3f glRasterPos3f_Z = function void (float a00,float a01,float a02) {
  glbfn_glRasterPos3f_loader(a00,a01,a02,);
};
private void glbfn_glRasterPos3f_loader (float a00,float a01,float a02) {
  *cast(void**)&glRasterPos3f_Z = glbindGetProcAddress(`glRasterPos3f`);
  if (*cast(void**)&glRasterPos3f_Z is null) assert(0, `OpenGL function 'glRasterPos3f' not found!`);
  glRasterPos3f_Z(a00,a01,a02,);
}
alias glRasterPos3fv = glRasterPos3fv_Z;
__gshared glbfn_glRasterPos3fv glRasterPos3fv_Z = function void (const(float)* a00) {
  glbfn_glRasterPos3fv_loader(a00,);
};
private void glbfn_glRasterPos3fv_loader (const(float)* a00) {
  *cast(void**)&glRasterPos3fv_Z = glbindGetProcAddress(`glRasterPos3fv`);
  if (*cast(void**)&glRasterPos3fv_Z is null) assert(0, `OpenGL function 'glRasterPos3fv' not found!`);
  glRasterPos3fv_Z(a00,);
}
alias glRasterPos3i = glRasterPos3i_Z;
__gshared glbfn_glRasterPos3i glRasterPos3i_Z = function void (int a00,int a01,int a02) {
  glbfn_glRasterPos3i_loader(a00,a01,a02,);
};
private void glbfn_glRasterPos3i_loader (int a00,int a01,int a02) {
  *cast(void**)&glRasterPos3i_Z = glbindGetProcAddress(`glRasterPos3i`);
  if (*cast(void**)&glRasterPos3i_Z is null) assert(0, `OpenGL function 'glRasterPos3i' not found!`);
  glRasterPos3i_Z(a00,a01,a02,);
}
alias glRasterPos3iv = glRasterPos3iv_Z;
__gshared glbfn_glRasterPos3iv glRasterPos3iv_Z = function void (const(int)* a00) {
  glbfn_glRasterPos3iv_loader(a00,);
};
private void glbfn_glRasterPos3iv_loader (const(int)* a00) {
  *cast(void**)&glRasterPos3iv_Z = glbindGetProcAddress(`glRasterPos3iv`);
  if (*cast(void**)&glRasterPos3iv_Z is null) assert(0, `OpenGL function 'glRasterPos3iv' not found!`);
  glRasterPos3iv_Z(a00,);
}
alias glRasterPos3s = glRasterPos3s_Z;
__gshared glbfn_glRasterPos3s glRasterPos3s_Z = function void (short a00,short a01,short a02) {
  glbfn_glRasterPos3s_loader(a00,a01,a02,);
};
private void glbfn_glRasterPos3s_loader (short a00,short a01,short a02) {
  *cast(void**)&glRasterPos3s_Z = glbindGetProcAddress(`glRasterPos3s`);
  if (*cast(void**)&glRasterPos3s_Z is null) assert(0, `OpenGL function 'glRasterPos3s' not found!`);
  glRasterPos3s_Z(a00,a01,a02,);
}
alias glRasterPos3sv = glRasterPos3sv_Z;
__gshared glbfn_glRasterPos3sv glRasterPos3sv_Z = function void (const(short)* a00) {
  glbfn_glRasterPos3sv_loader(a00,);
};
private void glbfn_glRasterPos3sv_loader (const(short)* a00) {
  *cast(void**)&glRasterPos3sv_Z = glbindGetProcAddress(`glRasterPos3sv`);
  if (*cast(void**)&glRasterPos3sv_Z is null) assert(0, `OpenGL function 'glRasterPos3sv' not found!`);
  glRasterPos3sv_Z(a00,);
}
alias glRasterPos4d = glRasterPos4d_Z;
__gshared glbfn_glRasterPos4d glRasterPos4d_Z = function void (double a00,double a01,double a02,double a03) {
  glbfn_glRasterPos4d_loader(a00,a01,a02,a03,);
};
private void glbfn_glRasterPos4d_loader (double a00,double a01,double a02,double a03) {
  *cast(void**)&glRasterPos4d_Z = glbindGetProcAddress(`glRasterPos4d`);
  if (*cast(void**)&glRasterPos4d_Z is null) assert(0, `OpenGL function 'glRasterPos4d' not found!`);
  glRasterPos4d_Z(a00,a01,a02,a03,);
}
alias glRasterPos4dv = glRasterPos4dv_Z;
__gshared glbfn_glRasterPos4dv glRasterPos4dv_Z = function void (const(double)* a00) {
  glbfn_glRasterPos4dv_loader(a00,);
};
private void glbfn_glRasterPos4dv_loader (const(double)* a00) {
  *cast(void**)&glRasterPos4dv_Z = glbindGetProcAddress(`glRasterPos4dv`);
  if (*cast(void**)&glRasterPos4dv_Z is null) assert(0, `OpenGL function 'glRasterPos4dv' not found!`);
  glRasterPos4dv_Z(a00,);
}
alias glRasterPos4f = glRasterPos4f_Z;
__gshared glbfn_glRasterPos4f glRasterPos4f_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glRasterPos4f_loader(a00,a01,a02,a03,);
};
private void glbfn_glRasterPos4f_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glRasterPos4f_Z = glbindGetProcAddress(`glRasterPos4f`);
  if (*cast(void**)&glRasterPos4f_Z is null) assert(0, `OpenGL function 'glRasterPos4f' not found!`);
  glRasterPos4f_Z(a00,a01,a02,a03,);
}
alias glRasterPos4fv = glRasterPos4fv_Z;
__gshared glbfn_glRasterPos4fv glRasterPos4fv_Z = function void (const(float)* a00) {
  glbfn_glRasterPos4fv_loader(a00,);
};
private void glbfn_glRasterPos4fv_loader (const(float)* a00) {
  *cast(void**)&glRasterPos4fv_Z = glbindGetProcAddress(`glRasterPos4fv`);
  if (*cast(void**)&glRasterPos4fv_Z is null) assert(0, `OpenGL function 'glRasterPos4fv' not found!`);
  glRasterPos4fv_Z(a00,);
}
alias glRasterPos4i = glRasterPos4i_Z;
__gshared glbfn_glRasterPos4i glRasterPos4i_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glRasterPos4i_loader(a00,a01,a02,a03,);
};
private void glbfn_glRasterPos4i_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glRasterPos4i_Z = glbindGetProcAddress(`glRasterPos4i`);
  if (*cast(void**)&glRasterPos4i_Z is null) assert(0, `OpenGL function 'glRasterPos4i' not found!`);
  glRasterPos4i_Z(a00,a01,a02,a03,);
}
alias glRasterPos4iv = glRasterPos4iv_Z;
__gshared glbfn_glRasterPos4iv glRasterPos4iv_Z = function void (const(int)* a00) {
  glbfn_glRasterPos4iv_loader(a00,);
};
private void glbfn_glRasterPos4iv_loader (const(int)* a00) {
  *cast(void**)&glRasterPos4iv_Z = glbindGetProcAddress(`glRasterPos4iv`);
  if (*cast(void**)&glRasterPos4iv_Z is null) assert(0, `OpenGL function 'glRasterPos4iv' not found!`);
  glRasterPos4iv_Z(a00,);
}
alias glRasterPos4s = glRasterPos4s_Z;
__gshared glbfn_glRasterPos4s glRasterPos4s_Z = function void (short a00,short a01,short a02,short a03) {
  glbfn_glRasterPos4s_loader(a00,a01,a02,a03,);
};
private void glbfn_glRasterPos4s_loader (short a00,short a01,short a02,short a03) {
  *cast(void**)&glRasterPos4s_Z = glbindGetProcAddress(`glRasterPos4s`);
  if (*cast(void**)&glRasterPos4s_Z is null) assert(0, `OpenGL function 'glRasterPos4s' not found!`);
  glRasterPos4s_Z(a00,a01,a02,a03,);
}
alias glRasterPos4sv = glRasterPos4sv_Z;
__gshared glbfn_glRasterPos4sv glRasterPos4sv_Z = function void (const(short)* a00) {
  glbfn_glRasterPos4sv_loader(a00,);
};
private void glbfn_glRasterPos4sv_loader (const(short)* a00) {
  *cast(void**)&glRasterPos4sv_Z = glbindGetProcAddress(`glRasterPos4sv`);
  if (*cast(void**)&glRasterPos4sv_Z is null) assert(0, `OpenGL function 'glRasterPos4sv' not found!`);
  glRasterPos4sv_Z(a00,);
}
alias glRectd = glRectd_Z;
__gshared glbfn_glRectd glRectd_Z = function void (double a00,double a01,double a02,double a03) {
  glbfn_glRectd_loader(a00,a01,a02,a03,);
};
private void glbfn_glRectd_loader (double a00,double a01,double a02,double a03) {
  *cast(void**)&glRectd_Z = glbindGetProcAddress(`glRectd`);
  if (*cast(void**)&glRectd_Z is null) assert(0, `OpenGL function 'glRectd' not found!`);
  glRectd_Z(a00,a01,a02,a03,);
}
alias glRectdv = glRectdv_Z;
__gshared glbfn_glRectdv glRectdv_Z = function void (const(double)* a00,const(double)* a01) {
  glbfn_glRectdv_loader(a00,a01,);
};
private void glbfn_glRectdv_loader (const(double)* a00,const(double)* a01) {
  *cast(void**)&glRectdv_Z = glbindGetProcAddress(`glRectdv`);
  if (*cast(void**)&glRectdv_Z is null) assert(0, `OpenGL function 'glRectdv' not found!`);
  glRectdv_Z(a00,a01,);
}
alias glRectf = glRectf_Z;
__gshared glbfn_glRectf glRectf_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glRectf_loader(a00,a01,a02,a03,);
};
private void glbfn_glRectf_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glRectf_Z = glbindGetProcAddress(`glRectf`);
  if (*cast(void**)&glRectf_Z is null) assert(0, `OpenGL function 'glRectf' not found!`);
  glRectf_Z(a00,a01,a02,a03,);
}
alias glRectfv = glRectfv_Z;
__gshared glbfn_glRectfv glRectfv_Z = function void (const(float)* a00,const(float)* a01) {
  glbfn_glRectfv_loader(a00,a01,);
};
private void glbfn_glRectfv_loader (const(float)* a00,const(float)* a01) {
  *cast(void**)&glRectfv_Z = glbindGetProcAddress(`glRectfv`);
  if (*cast(void**)&glRectfv_Z is null) assert(0, `OpenGL function 'glRectfv' not found!`);
  glRectfv_Z(a00,a01,);
}
alias glRecti = glRecti_Z;
__gshared glbfn_glRecti glRecti_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glRecti_loader(a00,a01,a02,a03,);
};
private void glbfn_glRecti_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glRecti_Z = glbindGetProcAddress(`glRecti`);
  if (*cast(void**)&glRecti_Z is null) assert(0, `OpenGL function 'glRecti' not found!`);
  glRecti_Z(a00,a01,a02,a03,);
}
alias glRectiv = glRectiv_Z;
__gshared glbfn_glRectiv glRectiv_Z = function void (const(int)* a00,const(int)* a01) {
  glbfn_glRectiv_loader(a00,a01,);
};
private void glbfn_glRectiv_loader (const(int)* a00,const(int)* a01) {
  *cast(void**)&glRectiv_Z = glbindGetProcAddress(`glRectiv`);
  if (*cast(void**)&glRectiv_Z is null) assert(0, `OpenGL function 'glRectiv' not found!`);
  glRectiv_Z(a00,a01,);
}
alias glRects = glRects_Z;
__gshared glbfn_glRects glRects_Z = function void (short a00,short a01,short a02,short a03) {
  glbfn_glRects_loader(a00,a01,a02,a03,);
};
private void glbfn_glRects_loader (short a00,short a01,short a02,short a03) {
  *cast(void**)&glRects_Z = glbindGetProcAddress(`glRects`);
  if (*cast(void**)&glRects_Z is null) assert(0, `OpenGL function 'glRects' not found!`);
  glRects_Z(a00,a01,a02,a03,);
}
alias glRectsv = glRectsv_Z;
__gshared glbfn_glRectsv glRectsv_Z = function void (const(short)* a00,const(short)* a01) {
  glbfn_glRectsv_loader(a00,a01,);
};
private void glbfn_glRectsv_loader (const(short)* a00,const(short)* a01) {
  *cast(void**)&glRectsv_Z = glbindGetProcAddress(`glRectsv`);
  if (*cast(void**)&glRectsv_Z is null) assert(0, `OpenGL function 'glRectsv' not found!`);
  glRectsv_Z(a00,a01,);
}
alias glTexCoord1d = glTexCoord1d_Z;
__gshared glbfn_glTexCoord1d glTexCoord1d_Z = function void (double a00) {
  glbfn_glTexCoord1d_loader(a00,);
};
private void glbfn_glTexCoord1d_loader (double a00) {
  *cast(void**)&glTexCoord1d_Z = glbindGetProcAddress(`glTexCoord1d`);
  if (*cast(void**)&glTexCoord1d_Z is null) assert(0, `OpenGL function 'glTexCoord1d' not found!`);
  glTexCoord1d_Z(a00,);
}
alias glTexCoord1dv = glTexCoord1dv_Z;
__gshared glbfn_glTexCoord1dv glTexCoord1dv_Z = function void (const(double)* a00) {
  glbfn_glTexCoord1dv_loader(a00,);
};
private void glbfn_glTexCoord1dv_loader (const(double)* a00) {
  *cast(void**)&glTexCoord1dv_Z = glbindGetProcAddress(`glTexCoord1dv`);
  if (*cast(void**)&glTexCoord1dv_Z is null) assert(0, `OpenGL function 'glTexCoord1dv' not found!`);
  glTexCoord1dv_Z(a00,);
}
alias glTexCoord1f = glTexCoord1f_Z;
__gshared glbfn_glTexCoord1f glTexCoord1f_Z = function void (float a00) {
  glbfn_glTexCoord1f_loader(a00,);
};
private void glbfn_glTexCoord1f_loader (float a00) {
  *cast(void**)&glTexCoord1f_Z = glbindGetProcAddress(`glTexCoord1f`);
  if (*cast(void**)&glTexCoord1f_Z is null) assert(0, `OpenGL function 'glTexCoord1f' not found!`);
  glTexCoord1f_Z(a00,);
}
alias glTexCoord1fv = glTexCoord1fv_Z;
__gshared glbfn_glTexCoord1fv glTexCoord1fv_Z = function void (const(float)* a00) {
  glbfn_glTexCoord1fv_loader(a00,);
};
private void glbfn_glTexCoord1fv_loader (const(float)* a00) {
  *cast(void**)&glTexCoord1fv_Z = glbindGetProcAddress(`glTexCoord1fv`);
  if (*cast(void**)&glTexCoord1fv_Z is null) assert(0, `OpenGL function 'glTexCoord1fv' not found!`);
  glTexCoord1fv_Z(a00,);
}
alias glTexCoord1i = glTexCoord1i_Z;
__gshared glbfn_glTexCoord1i glTexCoord1i_Z = function void (int a00) {
  glbfn_glTexCoord1i_loader(a00,);
};
private void glbfn_glTexCoord1i_loader (int a00) {
  *cast(void**)&glTexCoord1i_Z = glbindGetProcAddress(`glTexCoord1i`);
  if (*cast(void**)&glTexCoord1i_Z is null) assert(0, `OpenGL function 'glTexCoord1i' not found!`);
  glTexCoord1i_Z(a00,);
}
alias glTexCoord1iv = glTexCoord1iv_Z;
__gshared glbfn_glTexCoord1iv glTexCoord1iv_Z = function void (const(int)* a00) {
  glbfn_glTexCoord1iv_loader(a00,);
};
private void glbfn_glTexCoord1iv_loader (const(int)* a00) {
  *cast(void**)&glTexCoord1iv_Z = glbindGetProcAddress(`glTexCoord1iv`);
  if (*cast(void**)&glTexCoord1iv_Z is null) assert(0, `OpenGL function 'glTexCoord1iv' not found!`);
  glTexCoord1iv_Z(a00,);
}
alias glTexCoord1s = glTexCoord1s_Z;
__gshared glbfn_glTexCoord1s glTexCoord1s_Z = function void (short a00) {
  glbfn_glTexCoord1s_loader(a00,);
};
private void glbfn_glTexCoord1s_loader (short a00) {
  *cast(void**)&glTexCoord1s_Z = glbindGetProcAddress(`glTexCoord1s`);
  if (*cast(void**)&glTexCoord1s_Z is null) assert(0, `OpenGL function 'glTexCoord1s' not found!`);
  glTexCoord1s_Z(a00,);
}
alias glTexCoord1sv = glTexCoord1sv_Z;
__gshared glbfn_glTexCoord1sv glTexCoord1sv_Z = function void (const(short)* a00) {
  glbfn_glTexCoord1sv_loader(a00,);
};
private void glbfn_glTexCoord1sv_loader (const(short)* a00) {
  *cast(void**)&glTexCoord1sv_Z = glbindGetProcAddress(`glTexCoord1sv`);
  if (*cast(void**)&glTexCoord1sv_Z is null) assert(0, `OpenGL function 'glTexCoord1sv' not found!`);
  glTexCoord1sv_Z(a00,);
}
alias glTexCoord2d = glTexCoord2d_Z;
__gshared glbfn_glTexCoord2d glTexCoord2d_Z = function void (double a00,double a01) {
  glbfn_glTexCoord2d_loader(a00,a01,);
};
private void glbfn_glTexCoord2d_loader (double a00,double a01) {
  *cast(void**)&glTexCoord2d_Z = glbindGetProcAddress(`glTexCoord2d`);
  if (*cast(void**)&glTexCoord2d_Z is null) assert(0, `OpenGL function 'glTexCoord2d' not found!`);
  glTexCoord2d_Z(a00,a01,);
}
alias glTexCoord2dv = glTexCoord2dv_Z;
__gshared glbfn_glTexCoord2dv glTexCoord2dv_Z = function void (const(double)* a00) {
  glbfn_glTexCoord2dv_loader(a00,);
};
private void glbfn_glTexCoord2dv_loader (const(double)* a00) {
  *cast(void**)&glTexCoord2dv_Z = glbindGetProcAddress(`glTexCoord2dv`);
  if (*cast(void**)&glTexCoord2dv_Z is null) assert(0, `OpenGL function 'glTexCoord2dv' not found!`);
  glTexCoord2dv_Z(a00,);
}
alias glTexCoord2f = glTexCoord2f_Z;
__gshared glbfn_glTexCoord2f glTexCoord2f_Z = function void (float a00,float a01) {
  glbfn_glTexCoord2f_loader(a00,a01,);
};
private void glbfn_glTexCoord2f_loader (float a00,float a01) {
  *cast(void**)&glTexCoord2f_Z = glbindGetProcAddress(`glTexCoord2f`);
  if (*cast(void**)&glTexCoord2f_Z is null) assert(0, `OpenGL function 'glTexCoord2f' not found!`);
  glTexCoord2f_Z(a00,a01,);
}
alias glTexCoord2fv = glTexCoord2fv_Z;
__gshared glbfn_glTexCoord2fv glTexCoord2fv_Z = function void (const(float)* a00) {
  glbfn_glTexCoord2fv_loader(a00,);
};
private void glbfn_glTexCoord2fv_loader (const(float)* a00) {
  *cast(void**)&glTexCoord2fv_Z = glbindGetProcAddress(`glTexCoord2fv`);
  if (*cast(void**)&glTexCoord2fv_Z is null) assert(0, `OpenGL function 'glTexCoord2fv' not found!`);
  glTexCoord2fv_Z(a00,);
}
alias glTexCoord2i = glTexCoord2i_Z;
__gshared glbfn_glTexCoord2i glTexCoord2i_Z = function void (int a00,int a01) {
  glbfn_glTexCoord2i_loader(a00,a01,);
};
private void glbfn_glTexCoord2i_loader (int a00,int a01) {
  *cast(void**)&glTexCoord2i_Z = glbindGetProcAddress(`glTexCoord2i`);
  if (*cast(void**)&glTexCoord2i_Z is null) assert(0, `OpenGL function 'glTexCoord2i' not found!`);
  glTexCoord2i_Z(a00,a01,);
}
alias glTexCoord2iv = glTexCoord2iv_Z;
__gshared glbfn_glTexCoord2iv glTexCoord2iv_Z = function void (const(int)* a00) {
  glbfn_glTexCoord2iv_loader(a00,);
};
private void glbfn_glTexCoord2iv_loader (const(int)* a00) {
  *cast(void**)&glTexCoord2iv_Z = glbindGetProcAddress(`glTexCoord2iv`);
  if (*cast(void**)&glTexCoord2iv_Z is null) assert(0, `OpenGL function 'glTexCoord2iv' not found!`);
  glTexCoord2iv_Z(a00,);
}
alias glTexCoord2s = glTexCoord2s_Z;
__gshared glbfn_glTexCoord2s glTexCoord2s_Z = function void (short a00,short a01) {
  glbfn_glTexCoord2s_loader(a00,a01,);
};
private void glbfn_glTexCoord2s_loader (short a00,short a01) {
  *cast(void**)&glTexCoord2s_Z = glbindGetProcAddress(`glTexCoord2s`);
  if (*cast(void**)&glTexCoord2s_Z is null) assert(0, `OpenGL function 'glTexCoord2s' not found!`);
  glTexCoord2s_Z(a00,a01,);
}
alias glTexCoord2sv = glTexCoord2sv_Z;
__gshared glbfn_glTexCoord2sv glTexCoord2sv_Z = function void (const(short)* a00) {
  glbfn_glTexCoord2sv_loader(a00,);
};
private void glbfn_glTexCoord2sv_loader (const(short)* a00) {
  *cast(void**)&glTexCoord2sv_Z = glbindGetProcAddress(`glTexCoord2sv`);
  if (*cast(void**)&glTexCoord2sv_Z is null) assert(0, `OpenGL function 'glTexCoord2sv' not found!`);
  glTexCoord2sv_Z(a00,);
}
alias glTexCoord3d = glTexCoord3d_Z;
__gshared glbfn_glTexCoord3d glTexCoord3d_Z = function void (double a00,double a01,double a02) {
  glbfn_glTexCoord3d_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord3d_loader (double a00,double a01,double a02) {
  *cast(void**)&glTexCoord3d_Z = glbindGetProcAddress(`glTexCoord3d`);
  if (*cast(void**)&glTexCoord3d_Z is null) assert(0, `OpenGL function 'glTexCoord3d' not found!`);
  glTexCoord3d_Z(a00,a01,a02,);
}
alias glTexCoord3dv = glTexCoord3dv_Z;
__gshared glbfn_glTexCoord3dv glTexCoord3dv_Z = function void (const(double)* a00) {
  glbfn_glTexCoord3dv_loader(a00,);
};
private void glbfn_glTexCoord3dv_loader (const(double)* a00) {
  *cast(void**)&glTexCoord3dv_Z = glbindGetProcAddress(`glTexCoord3dv`);
  if (*cast(void**)&glTexCoord3dv_Z is null) assert(0, `OpenGL function 'glTexCoord3dv' not found!`);
  glTexCoord3dv_Z(a00,);
}
alias glTexCoord3f = glTexCoord3f_Z;
__gshared glbfn_glTexCoord3f glTexCoord3f_Z = function void (float a00,float a01,float a02) {
  glbfn_glTexCoord3f_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord3f_loader (float a00,float a01,float a02) {
  *cast(void**)&glTexCoord3f_Z = glbindGetProcAddress(`glTexCoord3f`);
  if (*cast(void**)&glTexCoord3f_Z is null) assert(0, `OpenGL function 'glTexCoord3f' not found!`);
  glTexCoord3f_Z(a00,a01,a02,);
}
alias glTexCoord3fv = glTexCoord3fv_Z;
__gshared glbfn_glTexCoord3fv glTexCoord3fv_Z = function void (const(float)* a00) {
  glbfn_glTexCoord3fv_loader(a00,);
};
private void glbfn_glTexCoord3fv_loader (const(float)* a00) {
  *cast(void**)&glTexCoord3fv_Z = glbindGetProcAddress(`glTexCoord3fv`);
  if (*cast(void**)&glTexCoord3fv_Z is null) assert(0, `OpenGL function 'glTexCoord3fv' not found!`);
  glTexCoord3fv_Z(a00,);
}
alias glTexCoord3i = glTexCoord3i_Z;
__gshared glbfn_glTexCoord3i glTexCoord3i_Z = function void (int a00,int a01,int a02) {
  glbfn_glTexCoord3i_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord3i_loader (int a00,int a01,int a02) {
  *cast(void**)&glTexCoord3i_Z = glbindGetProcAddress(`glTexCoord3i`);
  if (*cast(void**)&glTexCoord3i_Z is null) assert(0, `OpenGL function 'glTexCoord3i' not found!`);
  glTexCoord3i_Z(a00,a01,a02,);
}
alias glTexCoord3iv = glTexCoord3iv_Z;
__gshared glbfn_glTexCoord3iv glTexCoord3iv_Z = function void (const(int)* a00) {
  glbfn_glTexCoord3iv_loader(a00,);
};
private void glbfn_glTexCoord3iv_loader (const(int)* a00) {
  *cast(void**)&glTexCoord3iv_Z = glbindGetProcAddress(`glTexCoord3iv`);
  if (*cast(void**)&glTexCoord3iv_Z is null) assert(0, `OpenGL function 'glTexCoord3iv' not found!`);
  glTexCoord3iv_Z(a00,);
}
alias glTexCoord3s = glTexCoord3s_Z;
__gshared glbfn_glTexCoord3s glTexCoord3s_Z = function void (short a00,short a01,short a02) {
  glbfn_glTexCoord3s_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord3s_loader (short a00,short a01,short a02) {
  *cast(void**)&glTexCoord3s_Z = glbindGetProcAddress(`glTexCoord3s`);
  if (*cast(void**)&glTexCoord3s_Z is null) assert(0, `OpenGL function 'glTexCoord3s' not found!`);
  glTexCoord3s_Z(a00,a01,a02,);
}
alias glTexCoord3sv = glTexCoord3sv_Z;
__gshared glbfn_glTexCoord3sv glTexCoord3sv_Z = function void (const(short)* a00) {
  glbfn_glTexCoord3sv_loader(a00,);
};
private void glbfn_glTexCoord3sv_loader (const(short)* a00) {
  *cast(void**)&glTexCoord3sv_Z = glbindGetProcAddress(`glTexCoord3sv`);
  if (*cast(void**)&glTexCoord3sv_Z is null) assert(0, `OpenGL function 'glTexCoord3sv' not found!`);
  glTexCoord3sv_Z(a00,);
}
alias glTexCoord4d = glTexCoord4d_Z;
__gshared glbfn_glTexCoord4d glTexCoord4d_Z = function void (double a00,double a01,double a02,double a03) {
  glbfn_glTexCoord4d_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4d_loader (double a00,double a01,double a02,double a03) {
  *cast(void**)&glTexCoord4d_Z = glbindGetProcAddress(`glTexCoord4d`);
  if (*cast(void**)&glTexCoord4d_Z is null) assert(0, `OpenGL function 'glTexCoord4d' not found!`);
  glTexCoord4d_Z(a00,a01,a02,a03,);
}
alias glTexCoord4dv = glTexCoord4dv_Z;
__gshared glbfn_glTexCoord4dv glTexCoord4dv_Z = function void (const(double)* a00) {
  glbfn_glTexCoord4dv_loader(a00,);
};
private void glbfn_glTexCoord4dv_loader (const(double)* a00) {
  *cast(void**)&glTexCoord4dv_Z = glbindGetProcAddress(`glTexCoord4dv`);
  if (*cast(void**)&glTexCoord4dv_Z is null) assert(0, `OpenGL function 'glTexCoord4dv' not found!`);
  glTexCoord4dv_Z(a00,);
}
alias glTexCoord4f = glTexCoord4f_Z;
__gshared glbfn_glTexCoord4f glTexCoord4f_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glTexCoord4f_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4f_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glTexCoord4f_Z = glbindGetProcAddress(`glTexCoord4f`);
  if (*cast(void**)&glTexCoord4f_Z is null) assert(0, `OpenGL function 'glTexCoord4f' not found!`);
  glTexCoord4f_Z(a00,a01,a02,a03,);
}
alias glTexCoord4fv = glTexCoord4fv_Z;
__gshared glbfn_glTexCoord4fv glTexCoord4fv_Z = function void (const(float)* a00) {
  glbfn_glTexCoord4fv_loader(a00,);
};
private void glbfn_glTexCoord4fv_loader (const(float)* a00) {
  *cast(void**)&glTexCoord4fv_Z = glbindGetProcAddress(`glTexCoord4fv`);
  if (*cast(void**)&glTexCoord4fv_Z is null) assert(0, `OpenGL function 'glTexCoord4fv' not found!`);
  glTexCoord4fv_Z(a00,);
}
alias glTexCoord4i = glTexCoord4i_Z;
__gshared glbfn_glTexCoord4i glTexCoord4i_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glTexCoord4i_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4i_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glTexCoord4i_Z = glbindGetProcAddress(`glTexCoord4i`);
  if (*cast(void**)&glTexCoord4i_Z is null) assert(0, `OpenGL function 'glTexCoord4i' not found!`);
  glTexCoord4i_Z(a00,a01,a02,a03,);
}
alias glTexCoord4iv = glTexCoord4iv_Z;
__gshared glbfn_glTexCoord4iv glTexCoord4iv_Z = function void (const(int)* a00) {
  glbfn_glTexCoord4iv_loader(a00,);
};
private void glbfn_glTexCoord4iv_loader (const(int)* a00) {
  *cast(void**)&glTexCoord4iv_Z = glbindGetProcAddress(`glTexCoord4iv`);
  if (*cast(void**)&glTexCoord4iv_Z is null) assert(0, `OpenGL function 'glTexCoord4iv' not found!`);
  glTexCoord4iv_Z(a00,);
}
alias glTexCoord4s = glTexCoord4s_Z;
__gshared glbfn_glTexCoord4s glTexCoord4s_Z = function void (short a00,short a01,short a02,short a03) {
  glbfn_glTexCoord4s_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4s_loader (short a00,short a01,short a02,short a03) {
  *cast(void**)&glTexCoord4s_Z = glbindGetProcAddress(`glTexCoord4s`);
  if (*cast(void**)&glTexCoord4s_Z is null) assert(0, `OpenGL function 'glTexCoord4s' not found!`);
  glTexCoord4s_Z(a00,a01,a02,a03,);
}
alias glTexCoord4sv = glTexCoord4sv_Z;
__gshared glbfn_glTexCoord4sv glTexCoord4sv_Z = function void (const(short)* a00) {
  glbfn_glTexCoord4sv_loader(a00,);
};
private void glbfn_glTexCoord4sv_loader (const(short)* a00) {
  *cast(void**)&glTexCoord4sv_Z = glbindGetProcAddress(`glTexCoord4sv`);
  if (*cast(void**)&glTexCoord4sv_Z is null) assert(0, `OpenGL function 'glTexCoord4sv' not found!`);
  glTexCoord4sv_Z(a00,);
}
alias glVertex2d = glVertex2d_Z;
__gshared glbfn_glVertex2d glVertex2d_Z = function void (double a00,double a01) {
  glbfn_glVertex2d_loader(a00,a01,);
};
private void glbfn_glVertex2d_loader (double a00,double a01) {
  *cast(void**)&glVertex2d_Z = glbindGetProcAddress(`glVertex2d`);
  if (*cast(void**)&glVertex2d_Z is null) assert(0, `OpenGL function 'glVertex2d' not found!`);
  glVertex2d_Z(a00,a01,);
}
alias glVertex2dv = glVertex2dv_Z;
__gshared glbfn_glVertex2dv glVertex2dv_Z = function void (const(double)* a00) {
  glbfn_glVertex2dv_loader(a00,);
};
private void glbfn_glVertex2dv_loader (const(double)* a00) {
  *cast(void**)&glVertex2dv_Z = glbindGetProcAddress(`glVertex2dv`);
  if (*cast(void**)&glVertex2dv_Z is null) assert(0, `OpenGL function 'glVertex2dv' not found!`);
  glVertex2dv_Z(a00,);
}
alias glVertex2f = glVertex2f_Z;
__gshared glbfn_glVertex2f glVertex2f_Z = function void (float a00,float a01) {
  glbfn_glVertex2f_loader(a00,a01,);
};
private void glbfn_glVertex2f_loader (float a00,float a01) {
  *cast(void**)&glVertex2f_Z = glbindGetProcAddress(`glVertex2f`);
  if (*cast(void**)&glVertex2f_Z is null) assert(0, `OpenGL function 'glVertex2f' not found!`);
  glVertex2f_Z(a00,a01,);
}
alias glVertex2fv = glVertex2fv_Z;
__gshared glbfn_glVertex2fv glVertex2fv_Z = function void (const(float)* a00) {
  glbfn_glVertex2fv_loader(a00,);
};
private void glbfn_glVertex2fv_loader (const(float)* a00) {
  *cast(void**)&glVertex2fv_Z = glbindGetProcAddress(`glVertex2fv`);
  if (*cast(void**)&glVertex2fv_Z is null) assert(0, `OpenGL function 'glVertex2fv' not found!`);
  glVertex2fv_Z(a00,);
}
alias glVertex2i = glVertex2i_Z;
__gshared glbfn_glVertex2i glVertex2i_Z = function void (int a00,int a01) {
  glbfn_glVertex2i_loader(a00,a01,);
};
private void glbfn_glVertex2i_loader (int a00,int a01) {
  *cast(void**)&glVertex2i_Z = glbindGetProcAddress(`glVertex2i`);
  if (*cast(void**)&glVertex2i_Z is null) assert(0, `OpenGL function 'glVertex2i' not found!`);
  glVertex2i_Z(a00,a01,);
}
alias glVertex2iv = glVertex2iv_Z;
__gshared glbfn_glVertex2iv glVertex2iv_Z = function void (const(int)* a00) {
  glbfn_glVertex2iv_loader(a00,);
};
private void glbfn_glVertex2iv_loader (const(int)* a00) {
  *cast(void**)&glVertex2iv_Z = glbindGetProcAddress(`glVertex2iv`);
  if (*cast(void**)&glVertex2iv_Z is null) assert(0, `OpenGL function 'glVertex2iv' not found!`);
  glVertex2iv_Z(a00,);
}
alias glVertex2s = glVertex2s_Z;
__gshared glbfn_glVertex2s glVertex2s_Z = function void (short a00,short a01) {
  glbfn_glVertex2s_loader(a00,a01,);
};
private void glbfn_glVertex2s_loader (short a00,short a01) {
  *cast(void**)&glVertex2s_Z = glbindGetProcAddress(`glVertex2s`);
  if (*cast(void**)&glVertex2s_Z is null) assert(0, `OpenGL function 'glVertex2s' not found!`);
  glVertex2s_Z(a00,a01,);
}
alias glVertex2sv = glVertex2sv_Z;
__gshared glbfn_glVertex2sv glVertex2sv_Z = function void (const(short)* a00) {
  glbfn_glVertex2sv_loader(a00,);
};
private void glbfn_glVertex2sv_loader (const(short)* a00) {
  *cast(void**)&glVertex2sv_Z = glbindGetProcAddress(`glVertex2sv`);
  if (*cast(void**)&glVertex2sv_Z is null) assert(0, `OpenGL function 'glVertex2sv' not found!`);
  glVertex2sv_Z(a00,);
}
alias glVertex3d = glVertex3d_Z;
__gshared glbfn_glVertex3d glVertex3d_Z = function void (double a00,double a01,double a02) {
  glbfn_glVertex3d_loader(a00,a01,a02,);
};
private void glbfn_glVertex3d_loader (double a00,double a01,double a02) {
  *cast(void**)&glVertex3d_Z = glbindGetProcAddress(`glVertex3d`);
  if (*cast(void**)&glVertex3d_Z is null) assert(0, `OpenGL function 'glVertex3d' not found!`);
  glVertex3d_Z(a00,a01,a02,);
}
alias glVertex3dv = glVertex3dv_Z;
__gshared glbfn_glVertex3dv glVertex3dv_Z = function void (const(double)* a00) {
  glbfn_glVertex3dv_loader(a00,);
};
private void glbfn_glVertex3dv_loader (const(double)* a00) {
  *cast(void**)&glVertex3dv_Z = glbindGetProcAddress(`glVertex3dv`);
  if (*cast(void**)&glVertex3dv_Z is null) assert(0, `OpenGL function 'glVertex3dv' not found!`);
  glVertex3dv_Z(a00,);
}
alias glVertex3f = glVertex3f_Z;
__gshared glbfn_glVertex3f glVertex3f_Z = function void (float a00,float a01,float a02) {
  glbfn_glVertex3f_loader(a00,a01,a02,);
};
private void glbfn_glVertex3f_loader (float a00,float a01,float a02) {
  *cast(void**)&glVertex3f_Z = glbindGetProcAddress(`glVertex3f`);
  if (*cast(void**)&glVertex3f_Z is null) assert(0, `OpenGL function 'glVertex3f' not found!`);
  glVertex3f_Z(a00,a01,a02,);
}
alias glVertex3fv = glVertex3fv_Z;
__gshared glbfn_glVertex3fv glVertex3fv_Z = function void (const(float)* a00) {
  glbfn_glVertex3fv_loader(a00,);
};
private void glbfn_glVertex3fv_loader (const(float)* a00) {
  *cast(void**)&glVertex3fv_Z = glbindGetProcAddress(`glVertex3fv`);
  if (*cast(void**)&glVertex3fv_Z is null) assert(0, `OpenGL function 'glVertex3fv' not found!`);
  glVertex3fv_Z(a00,);
}
alias glVertex3i = glVertex3i_Z;
__gshared glbfn_glVertex3i glVertex3i_Z = function void (int a00,int a01,int a02) {
  glbfn_glVertex3i_loader(a00,a01,a02,);
};
private void glbfn_glVertex3i_loader (int a00,int a01,int a02) {
  *cast(void**)&glVertex3i_Z = glbindGetProcAddress(`glVertex3i`);
  if (*cast(void**)&glVertex3i_Z is null) assert(0, `OpenGL function 'glVertex3i' not found!`);
  glVertex3i_Z(a00,a01,a02,);
}
alias glVertex3iv = glVertex3iv_Z;
__gshared glbfn_glVertex3iv glVertex3iv_Z = function void (const(int)* a00) {
  glbfn_glVertex3iv_loader(a00,);
};
private void glbfn_glVertex3iv_loader (const(int)* a00) {
  *cast(void**)&glVertex3iv_Z = glbindGetProcAddress(`glVertex3iv`);
  if (*cast(void**)&glVertex3iv_Z is null) assert(0, `OpenGL function 'glVertex3iv' not found!`);
  glVertex3iv_Z(a00,);
}
alias glVertex3s = glVertex3s_Z;
__gshared glbfn_glVertex3s glVertex3s_Z = function void (short a00,short a01,short a02) {
  glbfn_glVertex3s_loader(a00,a01,a02,);
};
private void glbfn_glVertex3s_loader (short a00,short a01,short a02) {
  *cast(void**)&glVertex3s_Z = glbindGetProcAddress(`glVertex3s`);
  if (*cast(void**)&glVertex3s_Z is null) assert(0, `OpenGL function 'glVertex3s' not found!`);
  glVertex3s_Z(a00,a01,a02,);
}
alias glVertex3sv = glVertex3sv_Z;
__gshared glbfn_glVertex3sv glVertex3sv_Z = function void (const(short)* a00) {
  glbfn_glVertex3sv_loader(a00,);
};
private void glbfn_glVertex3sv_loader (const(short)* a00) {
  *cast(void**)&glVertex3sv_Z = glbindGetProcAddress(`glVertex3sv`);
  if (*cast(void**)&glVertex3sv_Z is null) assert(0, `OpenGL function 'glVertex3sv' not found!`);
  glVertex3sv_Z(a00,);
}
alias glVertex4d = glVertex4d_Z;
__gshared glbfn_glVertex4d glVertex4d_Z = function void (double a00,double a01,double a02,double a03) {
  glbfn_glVertex4d_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertex4d_loader (double a00,double a01,double a02,double a03) {
  *cast(void**)&glVertex4d_Z = glbindGetProcAddress(`glVertex4d`);
  if (*cast(void**)&glVertex4d_Z is null) assert(0, `OpenGL function 'glVertex4d' not found!`);
  glVertex4d_Z(a00,a01,a02,a03,);
}
alias glVertex4dv = glVertex4dv_Z;
__gshared glbfn_glVertex4dv glVertex4dv_Z = function void (const(double)* a00) {
  glbfn_glVertex4dv_loader(a00,);
};
private void glbfn_glVertex4dv_loader (const(double)* a00) {
  *cast(void**)&glVertex4dv_Z = glbindGetProcAddress(`glVertex4dv`);
  if (*cast(void**)&glVertex4dv_Z is null) assert(0, `OpenGL function 'glVertex4dv' not found!`);
  glVertex4dv_Z(a00,);
}
alias glVertex4f = glVertex4f_Z;
__gshared glbfn_glVertex4f glVertex4f_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glVertex4f_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertex4f_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glVertex4f_Z = glbindGetProcAddress(`glVertex4f`);
  if (*cast(void**)&glVertex4f_Z is null) assert(0, `OpenGL function 'glVertex4f' not found!`);
  glVertex4f_Z(a00,a01,a02,a03,);
}
alias glVertex4fv = glVertex4fv_Z;
__gshared glbfn_glVertex4fv glVertex4fv_Z = function void (const(float)* a00) {
  glbfn_glVertex4fv_loader(a00,);
};
private void glbfn_glVertex4fv_loader (const(float)* a00) {
  *cast(void**)&glVertex4fv_Z = glbindGetProcAddress(`glVertex4fv`);
  if (*cast(void**)&glVertex4fv_Z is null) assert(0, `OpenGL function 'glVertex4fv' not found!`);
  glVertex4fv_Z(a00,);
}
alias glVertex4i = glVertex4i_Z;
__gshared glbfn_glVertex4i glVertex4i_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glVertex4i_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertex4i_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glVertex4i_Z = glbindGetProcAddress(`glVertex4i`);
  if (*cast(void**)&glVertex4i_Z is null) assert(0, `OpenGL function 'glVertex4i' not found!`);
  glVertex4i_Z(a00,a01,a02,a03,);
}
alias glVertex4iv = glVertex4iv_Z;
__gshared glbfn_glVertex4iv glVertex4iv_Z = function void (const(int)* a00) {
  glbfn_glVertex4iv_loader(a00,);
};
private void glbfn_glVertex4iv_loader (const(int)* a00) {
  *cast(void**)&glVertex4iv_Z = glbindGetProcAddress(`glVertex4iv`);
  if (*cast(void**)&glVertex4iv_Z is null) assert(0, `OpenGL function 'glVertex4iv' not found!`);
  glVertex4iv_Z(a00,);
}
alias glVertex4s = glVertex4s_Z;
__gshared glbfn_glVertex4s glVertex4s_Z = function void (short a00,short a01,short a02,short a03) {
  glbfn_glVertex4s_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertex4s_loader (short a00,short a01,short a02,short a03) {
  *cast(void**)&glVertex4s_Z = glbindGetProcAddress(`glVertex4s`);
  if (*cast(void**)&glVertex4s_Z is null) assert(0, `OpenGL function 'glVertex4s' not found!`);
  glVertex4s_Z(a00,a01,a02,a03,);
}
alias glVertex4sv = glVertex4sv_Z;
__gshared glbfn_glVertex4sv glVertex4sv_Z = function void (const(short)* a00) {
  glbfn_glVertex4sv_loader(a00,);
};
private void glbfn_glVertex4sv_loader (const(short)* a00) {
  *cast(void**)&glVertex4sv_Z = glbindGetProcAddress(`glVertex4sv`);
  if (*cast(void**)&glVertex4sv_Z is null) assert(0, `OpenGL function 'glVertex4sv' not found!`);
  glVertex4sv_Z(a00,);
}
alias glClipPlane = glClipPlane_Z;
__gshared glbfn_glClipPlane glClipPlane_Z = function void (uint a00,const(double)* a01) {
  glbfn_glClipPlane_loader(a00,a01,);
};
private void glbfn_glClipPlane_loader (uint a00,const(double)* a01) {
  *cast(void**)&glClipPlane_Z = glbindGetProcAddress(`glClipPlane`);
  if (*cast(void**)&glClipPlane_Z is null) assert(0, `OpenGL function 'glClipPlane' not found!`);
  glClipPlane_Z(a00,a01,);
}
alias glColorMaterial = glColorMaterial_Z;
__gshared glbfn_glColorMaterial glColorMaterial_Z = function void (uint a00,uint a01) {
  glbfn_glColorMaterial_loader(a00,a01,);
};
private void glbfn_glColorMaterial_loader (uint a00,uint a01) {
  *cast(void**)&glColorMaterial_Z = glbindGetProcAddress(`glColorMaterial`);
  if (*cast(void**)&glColorMaterial_Z is null) assert(0, `OpenGL function 'glColorMaterial' not found!`);
  glColorMaterial_Z(a00,a01,);
}
alias glFogf = glFogf_Z;
__gshared glbfn_glFogf glFogf_Z = function void (uint a00,float a01) {
  glbfn_glFogf_loader(a00,a01,);
};
private void glbfn_glFogf_loader (uint a00,float a01) {
  *cast(void**)&glFogf_Z = glbindGetProcAddress(`glFogf`);
  if (*cast(void**)&glFogf_Z is null) assert(0, `OpenGL function 'glFogf' not found!`);
  glFogf_Z(a00,a01,);
}
alias glFogfv = glFogfv_Z;
__gshared glbfn_glFogfv glFogfv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glFogfv_loader(a00,a01,);
};
private void glbfn_glFogfv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glFogfv_Z = glbindGetProcAddress(`glFogfv`);
  if (*cast(void**)&glFogfv_Z is null) assert(0, `OpenGL function 'glFogfv' not found!`);
  glFogfv_Z(a00,a01,);
}
alias glFogi = glFogi_Z;
__gshared glbfn_glFogi glFogi_Z = function void (uint a00,int a01) {
  glbfn_glFogi_loader(a00,a01,);
};
private void glbfn_glFogi_loader (uint a00,int a01) {
  *cast(void**)&glFogi_Z = glbindGetProcAddress(`glFogi`);
  if (*cast(void**)&glFogi_Z is null) assert(0, `OpenGL function 'glFogi' not found!`);
  glFogi_Z(a00,a01,);
}
alias glFogiv = glFogiv_Z;
__gshared glbfn_glFogiv glFogiv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glFogiv_loader(a00,a01,);
};
private void glbfn_glFogiv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glFogiv_Z = glbindGetProcAddress(`glFogiv`);
  if (*cast(void**)&glFogiv_Z is null) assert(0, `OpenGL function 'glFogiv' not found!`);
  glFogiv_Z(a00,a01,);
}
alias glLightf = glLightf_Z;
__gshared glbfn_glLightf glLightf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glLightf_loader(a00,a01,a02,);
};
private void glbfn_glLightf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glLightf_Z = glbindGetProcAddress(`glLightf`);
  if (*cast(void**)&glLightf_Z is null) assert(0, `OpenGL function 'glLightf' not found!`);
  glLightf_Z(a00,a01,a02,);
}
alias glLightfv = glLightfv_Z;
__gshared glbfn_glLightfv glLightfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glLightfv_loader(a00,a01,a02,);
};
private void glbfn_glLightfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glLightfv_Z = glbindGetProcAddress(`glLightfv`);
  if (*cast(void**)&glLightfv_Z is null) assert(0, `OpenGL function 'glLightfv' not found!`);
  glLightfv_Z(a00,a01,a02,);
}
alias glLighti = glLighti_Z;
__gshared glbfn_glLighti glLighti_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glLighti_loader(a00,a01,a02,);
};
private void glbfn_glLighti_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glLighti_Z = glbindGetProcAddress(`glLighti`);
  if (*cast(void**)&glLighti_Z is null) assert(0, `OpenGL function 'glLighti' not found!`);
  glLighti_Z(a00,a01,a02,);
}
alias glLightiv = glLightiv_Z;
__gshared glbfn_glLightiv glLightiv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glLightiv_loader(a00,a01,a02,);
};
private void glbfn_glLightiv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glLightiv_Z = glbindGetProcAddress(`glLightiv`);
  if (*cast(void**)&glLightiv_Z is null) assert(0, `OpenGL function 'glLightiv' not found!`);
  glLightiv_Z(a00,a01,a02,);
}
alias glLightModelf = glLightModelf_Z;
__gshared glbfn_glLightModelf glLightModelf_Z = function void (uint a00,float a01) {
  glbfn_glLightModelf_loader(a00,a01,);
};
private void glbfn_glLightModelf_loader (uint a00,float a01) {
  *cast(void**)&glLightModelf_Z = glbindGetProcAddress(`glLightModelf`);
  if (*cast(void**)&glLightModelf_Z is null) assert(0, `OpenGL function 'glLightModelf' not found!`);
  glLightModelf_Z(a00,a01,);
}
alias glLightModelfv = glLightModelfv_Z;
__gshared glbfn_glLightModelfv glLightModelfv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glLightModelfv_loader(a00,a01,);
};
private void glbfn_glLightModelfv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glLightModelfv_Z = glbindGetProcAddress(`glLightModelfv`);
  if (*cast(void**)&glLightModelfv_Z is null) assert(0, `OpenGL function 'glLightModelfv' not found!`);
  glLightModelfv_Z(a00,a01,);
}
alias glLightModeli = glLightModeli_Z;
__gshared glbfn_glLightModeli glLightModeli_Z = function void (uint a00,int a01) {
  glbfn_glLightModeli_loader(a00,a01,);
};
private void glbfn_glLightModeli_loader (uint a00,int a01) {
  *cast(void**)&glLightModeli_Z = glbindGetProcAddress(`glLightModeli`);
  if (*cast(void**)&glLightModeli_Z is null) assert(0, `OpenGL function 'glLightModeli' not found!`);
  glLightModeli_Z(a00,a01,);
}
alias glLightModeliv = glLightModeliv_Z;
__gshared glbfn_glLightModeliv glLightModeliv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glLightModeliv_loader(a00,a01,);
};
private void glbfn_glLightModeliv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glLightModeliv_Z = glbindGetProcAddress(`glLightModeliv`);
  if (*cast(void**)&glLightModeliv_Z is null) assert(0, `OpenGL function 'glLightModeliv' not found!`);
  glLightModeliv_Z(a00,a01,);
}
alias glLineStipple = glLineStipple_Z;
__gshared glbfn_glLineStipple glLineStipple_Z = function void (int a00,ushort a01) {
  glbfn_glLineStipple_loader(a00,a01,);
};
private void glbfn_glLineStipple_loader (int a00,ushort a01) {
  *cast(void**)&glLineStipple_Z = glbindGetProcAddress(`glLineStipple`);
  if (*cast(void**)&glLineStipple_Z is null) assert(0, `OpenGL function 'glLineStipple' not found!`);
  glLineStipple_Z(a00,a01,);
}
alias glMaterialf = glMaterialf_Z;
__gshared glbfn_glMaterialf glMaterialf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glMaterialf_loader(a00,a01,a02,);
};
private void glbfn_glMaterialf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glMaterialf_Z = glbindGetProcAddress(`glMaterialf`);
  if (*cast(void**)&glMaterialf_Z is null) assert(0, `OpenGL function 'glMaterialf' not found!`);
  glMaterialf_Z(a00,a01,a02,);
}
alias glMaterialfv = glMaterialfv_Z;
__gshared glbfn_glMaterialfv glMaterialfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glMaterialfv_loader(a00,a01,a02,);
};
private void glbfn_glMaterialfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glMaterialfv_Z = glbindGetProcAddress(`glMaterialfv`);
  if (*cast(void**)&glMaterialfv_Z is null) assert(0, `OpenGL function 'glMaterialfv' not found!`);
  glMaterialfv_Z(a00,a01,a02,);
}
alias glMateriali = glMateriali_Z;
__gshared glbfn_glMateriali glMateriali_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glMateriali_loader(a00,a01,a02,);
};
private void glbfn_glMateriali_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glMateriali_Z = glbindGetProcAddress(`glMateriali`);
  if (*cast(void**)&glMateriali_Z is null) assert(0, `OpenGL function 'glMateriali' not found!`);
  glMateriali_Z(a00,a01,a02,);
}
alias glMaterialiv = glMaterialiv_Z;
__gshared glbfn_glMaterialiv glMaterialiv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glMaterialiv_loader(a00,a01,a02,);
};
private void glbfn_glMaterialiv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glMaterialiv_Z = glbindGetProcAddress(`glMaterialiv`);
  if (*cast(void**)&glMaterialiv_Z is null) assert(0, `OpenGL function 'glMaterialiv' not found!`);
  glMaterialiv_Z(a00,a01,a02,);
}
alias glPolygonStipple = glPolygonStipple_Z;
__gshared glbfn_glPolygonStipple glPolygonStipple_Z = function void (const(ubyte)* a00) {
  glbfn_glPolygonStipple_loader(a00,);
};
private void glbfn_glPolygonStipple_loader (const(ubyte)* a00) {
  *cast(void**)&glPolygonStipple_Z = glbindGetProcAddress(`glPolygonStipple`);
  if (*cast(void**)&glPolygonStipple_Z is null) assert(0, `OpenGL function 'glPolygonStipple' not found!`);
  glPolygonStipple_Z(a00,);
}
alias glShadeModel = glShadeModel_Z;
__gshared glbfn_glShadeModel glShadeModel_Z = function void (uint a00) {
  glbfn_glShadeModel_loader(a00,);
};
private void glbfn_glShadeModel_loader (uint a00) {
  *cast(void**)&glShadeModel_Z = glbindGetProcAddress(`glShadeModel`);
  if (*cast(void**)&glShadeModel_Z is null) assert(0, `OpenGL function 'glShadeModel' not found!`);
  glShadeModel_Z(a00,);
}
alias glTexEnvf = glTexEnvf_Z;
__gshared glbfn_glTexEnvf glTexEnvf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glTexEnvf_loader(a00,a01,a02,);
};
private void glbfn_glTexEnvf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glTexEnvf_Z = glbindGetProcAddress(`glTexEnvf`);
  if (*cast(void**)&glTexEnvf_Z is null) assert(0, `OpenGL function 'glTexEnvf' not found!`);
  glTexEnvf_Z(a00,a01,a02,);
}
alias glTexEnvfv = glTexEnvfv_Z;
__gshared glbfn_glTexEnvfv glTexEnvfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glTexEnvfv_loader(a00,a01,a02,);
};
private void glbfn_glTexEnvfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glTexEnvfv_Z = glbindGetProcAddress(`glTexEnvfv`);
  if (*cast(void**)&glTexEnvfv_Z is null) assert(0, `OpenGL function 'glTexEnvfv' not found!`);
  glTexEnvfv_Z(a00,a01,a02,);
}
alias glTexEnvi = glTexEnvi_Z;
__gshared glbfn_glTexEnvi glTexEnvi_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glTexEnvi_loader(a00,a01,a02,);
};
private void glbfn_glTexEnvi_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glTexEnvi_Z = glbindGetProcAddress(`glTexEnvi`);
  if (*cast(void**)&glTexEnvi_Z is null) assert(0, `OpenGL function 'glTexEnvi' not found!`);
  glTexEnvi_Z(a00,a01,a02,);
}
alias glTexEnviv = glTexEnviv_Z;
__gshared glbfn_glTexEnviv glTexEnviv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexEnviv_loader(a00,a01,a02,);
};
private void glbfn_glTexEnviv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexEnviv_Z = glbindGetProcAddress(`glTexEnviv`);
  if (*cast(void**)&glTexEnviv_Z is null) assert(0, `OpenGL function 'glTexEnviv' not found!`);
  glTexEnviv_Z(a00,a01,a02,);
}
alias glTexGend = glTexGend_Z;
__gshared glbfn_glTexGend glTexGend_Z = function void (uint a00,uint a01,double a02) {
  glbfn_glTexGend_loader(a00,a01,a02,);
};
private void glbfn_glTexGend_loader (uint a00,uint a01,double a02) {
  *cast(void**)&glTexGend_Z = glbindGetProcAddress(`glTexGend`);
  if (*cast(void**)&glTexGend_Z is null) assert(0, `OpenGL function 'glTexGend' not found!`);
  glTexGend_Z(a00,a01,a02,);
}
alias glTexGendv = glTexGendv_Z;
__gshared glbfn_glTexGendv glTexGendv_Z = function void (uint a00,uint a01,const(double)* a02) {
  glbfn_glTexGendv_loader(a00,a01,a02,);
};
private void glbfn_glTexGendv_loader (uint a00,uint a01,const(double)* a02) {
  *cast(void**)&glTexGendv_Z = glbindGetProcAddress(`glTexGendv`);
  if (*cast(void**)&glTexGendv_Z is null) assert(0, `OpenGL function 'glTexGendv' not found!`);
  glTexGendv_Z(a00,a01,a02,);
}
alias glTexGenf = glTexGenf_Z;
__gshared glbfn_glTexGenf glTexGenf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glTexGenf_loader(a00,a01,a02,);
};
private void glbfn_glTexGenf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glTexGenf_Z = glbindGetProcAddress(`glTexGenf`);
  if (*cast(void**)&glTexGenf_Z is null) assert(0, `OpenGL function 'glTexGenf' not found!`);
  glTexGenf_Z(a00,a01,a02,);
}
alias glTexGenfv = glTexGenfv_Z;
__gshared glbfn_glTexGenfv glTexGenfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glTexGenfv_loader(a00,a01,a02,);
};
private void glbfn_glTexGenfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glTexGenfv_Z = glbindGetProcAddress(`glTexGenfv`);
  if (*cast(void**)&glTexGenfv_Z is null) assert(0, `OpenGL function 'glTexGenfv' not found!`);
  glTexGenfv_Z(a00,a01,a02,);
}
alias glTexGeni = glTexGeni_Z;
__gshared glbfn_glTexGeni glTexGeni_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glTexGeni_loader(a00,a01,a02,);
};
private void glbfn_glTexGeni_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glTexGeni_Z = glbindGetProcAddress(`glTexGeni`);
  if (*cast(void**)&glTexGeni_Z is null) assert(0, `OpenGL function 'glTexGeni' not found!`);
  glTexGeni_Z(a00,a01,a02,);
}
alias glTexGeniv = glTexGeniv_Z;
__gshared glbfn_glTexGeniv glTexGeniv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexGeniv_loader(a00,a01,a02,);
};
private void glbfn_glTexGeniv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexGeniv_Z = glbindGetProcAddress(`glTexGeniv`);
  if (*cast(void**)&glTexGeniv_Z is null) assert(0, `OpenGL function 'glTexGeniv' not found!`);
  glTexGeniv_Z(a00,a01,a02,);
}
alias glFeedbackBuffer = glFeedbackBuffer_Z;
__gshared glbfn_glFeedbackBuffer glFeedbackBuffer_Z = function void (int a00,uint a01,float* a02) {
  glbfn_glFeedbackBuffer_loader(a00,a01,a02,);
};
private void glbfn_glFeedbackBuffer_loader (int a00,uint a01,float* a02) {
  *cast(void**)&glFeedbackBuffer_Z = glbindGetProcAddress(`glFeedbackBuffer`);
  if (*cast(void**)&glFeedbackBuffer_Z is null) assert(0, `OpenGL function 'glFeedbackBuffer' not found!`);
  glFeedbackBuffer_Z(a00,a01,a02,);
}
alias glSelectBuffer = glSelectBuffer_Z;
__gshared glbfn_glSelectBuffer glSelectBuffer_Z = function void (int a00,uint* a01) {
  glbfn_glSelectBuffer_loader(a00,a01,);
};
private void glbfn_glSelectBuffer_loader (int a00,uint* a01) {
  *cast(void**)&glSelectBuffer_Z = glbindGetProcAddress(`glSelectBuffer`);
  if (*cast(void**)&glSelectBuffer_Z is null) assert(0, `OpenGL function 'glSelectBuffer' not found!`);
  glSelectBuffer_Z(a00,a01,);
}
alias glRenderMode = glRenderMode_Z;
__gshared glbfn_glRenderMode glRenderMode_Z = function int (uint a00) {
  return glbfn_glRenderMode_loader(a00,);
};
private int glbfn_glRenderMode_loader (uint a00) {
  *cast(void**)&glRenderMode_Z = glbindGetProcAddress(`glRenderMode`);
  if (*cast(void**)&glRenderMode_Z is null) assert(0, `OpenGL function 'glRenderMode' not found!`);
  return glRenderMode_Z(a00,);
}
alias glInitNames = glInitNames_Z;
__gshared glbfn_glInitNames glInitNames_Z = function void () {
  glbfn_glInitNames_loader();
};
private void glbfn_glInitNames_loader () {
  *cast(void**)&glInitNames_Z = glbindGetProcAddress(`glInitNames`);
  if (*cast(void**)&glInitNames_Z is null) assert(0, `OpenGL function 'glInitNames' not found!`);
  glInitNames_Z();
}
alias glLoadName = glLoadName_Z;
__gshared glbfn_glLoadName glLoadName_Z = function void (uint a00) {
  glbfn_glLoadName_loader(a00,);
};
private void glbfn_glLoadName_loader (uint a00) {
  *cast(void**)&glLoadName_Z = glbindGetProcAddress(`glLoadName`);
  if (*cast(void**)&glLoadName_Z is null) assert(0, `OpenGL function 'glLoadName' not found!`);
  glLoadName_Z(a00,);
}
alias glPassThrough = glPassThrough_Z;
__gshared glbfn_glPassThrough glPassThrough_Z = function void (float a00) {
  glbfn_glPassThrough_loader(a00,);
};
private void glbfn_glPassThrough_loader (float a00) {
  *cast(void**)&glPassThrough_Z = glbindGetProcAddress(`glPassThrough`);
  if (*cast(void**)&glPassThrough_Z is null) assert(0, `OpenGL function 'glPassThrough' not found!`);
  glPassThrough_Z(a00,);
}
alias glPopName = glPopName_Z;
__gshared glbfn_glPopName glPopName_Z = function void () {
  glbfn_glPopName_loader();
};
private void glbfn_glPopName_loader () {
  *cast(void**)&glPopName_Z = glbindGetProcAddress(`glPopName`);
  if (*cast(void**)&glPopName_Z is null) assert(0, `OpenGL function 'glPopName' not found!`);
  glPopName_Z();
}
alias glPushName = glPushName_Z;
__gshared glbfn_glPushName glPushName_Z = function void (uint a00) {
  glbfn_glPushName_loader(a00,);
};
private void glbfn_glPushName_loader (uint a00) {
  *cast(void**)&glPushName_Z = glbindGetProcAddress(`glPushName`);
  if (*cast(void**)&glPushName_Z is null) assert(0, `OpenGL function 'glPushName' not found!`);
  glPushName_Z(a00,);
}
alias glClearAccum = glClearAccum_Z;
__gshared glbfn_glClearAccum glClearAccum_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glClearAccum_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearAccum_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glClearAccum_Z = glbindGetProcAddress(`glClearAccum`);
  if (*cast(void**)&glClearAccum_Z is null) assert(0, `OpenGL function 'glClearAccum' not found!`);
  glClearAccum_Z(a00,a01,a02,a03,);
}
alias glClearIndex = glClearIndex_Z;
__gshared glbfn_glClearIndex glClearIndex_Z = function void (float a00) {
  glbfn_glClearIndex_loader(a00,);
};
private void glbfn_glClearIndex_loader (float a00) {
  *cast(void**)&glClearIndex_Z = glbindGetProcAddress(`glClearIndex`);
  if (*cast(void**)&glClearIndex_Z is null) assert(0, `OpenGL function 'glClearIndex' not found!`);
  glClearIndex_Z(a00,);
}
alias glIndexMask = glIndexMask_Z;
__gshared glbfn_glIndexMask glIndexMask_Z = function void (uint a00) {
  glbfn_glIndexMask_loader(a00,);
};
private void glbfn_glIndexMask_loader (uint a00) {
  *cast(void**)&glIndexMask_Z = glbindGetProcAddress(`glIndexMask`);
  if (*cast(void**)&glIndexMask_Z is null) assert(0, `OpenGL function 'glIndexMask' not found!`);
  glIndexMask_Z(a00,);
}
alias glAccum = glAccum_Z;
__gshared glbfn_glAccum glAccum_Z = function void (uint a00,float a01) {
  glbfn_glAccum_loader(a00,a01,);
};
private void glbfn_glAccum_loader (uint a00,float a01) {
  *cast(void**)&glAccum_Z = glbindGetProcAddress(`glAccum`);
  if (*cast(void**)&glAccum_Z is null) assert(0, `OpenGL function 'glAccum' not found!`);
  glAccum_Z(a00,a01,);
}
alias glPopAttrib = glPopAttrib_Z;
__gshared glbfn_glPopAttrib glPopAttrib_Z = function void () {
  glbfn_glPopAttrib_loader();
};
private void glbfn_glPopAttrib_loader () {
  *cast(void**)&glPopAttrib_Z = glbindGetProcAddress(`glPopAttrib`);
  if (*cast(void**)&glPopAttrib_Z is null) assert(0, `OpenGL function 'glPopAttrib' not found!`);
  glPopAttrib_Z();
}
alias glPushAttrib = glPushAttrib_Z;
__gshared glbfn_glPushAttrib glPushAttrib_Z = function void (uint a00) {
  glbfn_glPushAttrib_loader(a00,);
};
private void glbfn_glPushAttrib_loader (uint a00) {
  *cast(void**)&glPushAttrib_Z = glbindGetProcAddress(`glPushAttrib`);
  if (*cast(void**)&glPushAttrib_Z is null) assert(0, `OpenGL function 'glPushAttrib' not found!`);
  glPushAttrib_Z(a00,);
}
alias glMap1d = glMap1d_Z;
__gshared glbfn_glMap1d glMap1d_Z = function void (uint a00,double a01,double a02,int a03,int a04,const(double)* a05) {
  glbfn_glMap1d_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMap1d_loader (uint a00,double a01,double a02,int a03,int a04,const(double)* a05) {
  *cast(void**)&glMap1d_Z = glbindGetProcAddress(`glMap1d`);
  if (*cast(void**)&glMap1d_Z is null) assert(0, `OpenGL function 'glMap1d' not found!`);
  glMap1d_Z(a00,a01,a02,a03,a04,a05,);
}
alias glMap1f = glMap1f_Z;
__gshared glbfn_glMap1f glMap1f_Z = function void (uint a00,float a01,float a02,int a03,int a04,const(float)* a05) {
  glbfn_glMap1f_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMap1f_loader (uint a00,float a01,float a02,int a03,int a04,const(float)* a05) {
  *cast(void**)&glMap1f_Z = glbindGetProcAddress(`glMap1f`);
  if (*cast(void**)&glMap1f_Z is null) assert(0, `OpenGL function 'glMap1f' not found!`);
  glMap1f_Z(a00,a01,a02,a03,a04,a05,);
}
alias glMap2d = glMap2d_Z;
__gshared glbfn_glMap2d glMap2d_Z = function void (uint a00,double a01,double a02,int a03,int a04,double a05,double a06,int a07,int a08,const(double)* a09) {
  glbfn_glMap2d_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glMap2d_loader (uint a00,double a01,double a02,int a03,int a04,double a05,double a06,int a07,int a08,const(double)* a09) {
  *cast(void**)&glMap2d_Z = glbindGetProcAddress(`glMap2d`);
  if (*cast(void**)&glMap2d_Z is null) assert(0, `OpenGL function 'glMap2d' not found!`);
  glMap2d_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glMap2f = glMap2f_Z;
__gshared glbfn_glMap2f glMap2f_Z = function void (uint a00,float a01,float a02,int a03,int a04,float a05,float a06,int a07,int a08,const(float)* a09) {
  glbfn_glMap2f_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glMap2f_loader (uint a00,float a01,float a02,int a03,int a04,float a05,float a06,int a07,int a08,const(float)* a09) {
  *cast(void**)&glMap2f_Z = glbindGetProcAddress(`glMap2f`);
  if (*cast(void**)&glMap2f_Z is null) assert(0, `OpenGL function 'glMap2f' not found!`);
  glMap2f_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glMapGrid1d = glMapGrid1d_Z;
__gshared glbfn_glMapGrid1d glMapGrid1d_Z = function void (int a00,double a01,double a02) {
  glbfn_glMapGrid1d_loader(a00,a01,a02,);
};
private void glbfn_glMapGrid1d_loader (int a00,double a01,double a02) {
  *cast(void**)&glMapGrid1d_Z = glbindGetProcAddress(`glMapGrid1d`);
  if (*cast(void**)&glMapGrid1d_Z is null) assert(0, `OpenGL function 'glMapGrid1d' not found!`);
  glMapGrid1d_Z(a00,a01,a02,);
}
alias glMapGrid1f = glMapGrid1f_Z;
__gshared glbfn_glMapGrid1f glMapGrid1f_Z = function void (int a00,float a01,float a02) {
  glbfn_glMapGrid1f_loader(a00,a01,a02,);
};
private void glbfn_glMapGrid1f_loader (int a00,float a01,float a02) {
  *cast(void**)&glMapGrid1f_Z = glbindGetProcAddress(`glMapGrid1f`);
  if (*cast(void**)&glMapGrid1f_Z is null) assert(0, `OpenGL function 'glMapGrid1f' not found!`);
  glMapGrid1f_Z(a00,a01,a02,);
}
alias glMapGrid2d = glMapGrid2d_Z;
__gshared glbfn_glMapGrid2d glMapGrid2d_Z = function void (int a00,double a01,double a02,int a03,double a04,double a05) {
  glbfn_glMapGrid2d_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMapGrid2d_loader (int a00,double a01,double a02,int a03,double a04,double a05) {
  *cast(void**)&glMapGrid2d_Z = glbindGetProcAddress(`glMapGrid2d`);
  if (*cast(void**)&glMapGrid2d_Z is null) assert(0, `OpenGL function 'glMapGrid2d' not found!`);
  glMapGrid2d_Z(a00,a01,a02,a03,a04,a05,);
}
alias glMapGrid2f = glMapGrid2f_Z;
__gshared glbfn_glMapGrid2f glMapGrid2f_Z = function void (int a00,float a01,float a02,int a03,float a04,float a05) {
  glbfn_glMapGrid2f_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMapGrid2f_loader (int a00,float a01,float a02,int a03,float a04,float a05) {
  *cast(void**)&glMapGrid2f_Z = glbindGetProcAddress(`glMapGrid2f`);
  if (*cast(void**)&glMapGrid2f_Z is null) assert(0, `OpenGL function 'glMapGrid2f' not found!`);
  glMapGrid2f_Z(a00,a01,a02,a03,a04,a05,);
}
alias glEvalCoord1d = glEvalCoord1d_Z;
__gshared glbfn_glEvalCoord1d glEvalCoord1d_Z = function void (double a00) {
  glbfn_glEvalCoord1d_loader(a00,);
};
private void glbfn_glEvalCoord1d_loader (double a00) {
  *cast(void**)&glEvalCoord1d_Z = glbindGetProcAddress(`glEvalCoord1d`);
  if (*cast(void**)&glEvalCoord1d_Z is null) assert(0, `OpenGL function 'glEvalCoord1d' not found!`);
  glEvalCoord1d_Z(a00,);
}
alias glEvalCoord1dv = glEvalCoord1dv_Z;
__gshared glbfn_glEvalCoord1dv glEvalCoord1dv_Z = function void (const(double)* a00) {
  glbfn_glEvalCoord1dv_loader(a00,);
};
private void glbfn_glEvalCoord1dv_loader (const(double)* a00) {
  *cast(void**)&glEvalCoord1dv_Z = glbindGetProcAddress(`glEvalCoord1dv`);
  if (*cast(void**)&glEvalCoord1dv_Z is null) assert(0, `OpenGL function 'glEvalCoord1dv' not found!`);
  glEvalCoord1dv_Z(a00,);
}
alias glEvalCoord1f = glEvalCoord1f_Z;
__gshared glbfn_glEvalCoord1f glEvalCoord1f_Z = function void (float a00) {
  glbfn_glEvalCoord1f_loader(a00,);
};
private void glbfn_glEvalCoord1f_loader (float a00) {
  *cast(void**)&glEvalCoord1f_Z = glbindGetProcAddress(`glEvalCoord1f`);
  if (*cast(void**)&glEvalCoord1f_Z is null) assert(0, `OpenGL function 'glEvalCoord1f' not found!`);
  glEvalCoord1f_Z(a00,);
}
alias glEvalCoord1fv = glEvalCoord1fv_Z;
__gshared glbfn_glEvalCoord1fv glEvalCoord1fv_Z = function void (const(float)* a00) {
  glbfn_glEvalCoord1fv_loader(a00,);
};
private void glbfn_glEvalCoord1fv_loader (const(float)* a00) {
  *cast(void**)&glEvalCoord1fv_Z = glbindGetProcAddress(`glEvalCoord1fv`);
  if (*cast(void**)&glEvalCoord1fv_Z is null) assert(0, `OpenGL function 'glEvalCoord1fv' not found!`);
  glEvalCoord1fv_Z(a00,);
}
alias glEvalCoord2d = glEvalCoord2d_Z;
__gshared glbfn_glEvalCoord2d glEvalCoord2d_Z = function void (double a00,double a01) {
  glbfn_glEvalCoord2d_loader(a00,a01,);
};
private void glbfn_glEvalCoord2d_loader (double a00,double a01) {
  *cast(void**)&glEvalCoord2d_Z = glbindGetProcAddress(`glEvalCoord2d`);
  if (*cast(void**)&glEvalCoord2d_Z is null) assert(0, `OpenGL function 'glEvalCoord2d' not found!`);
  glEvalCoord2d_Z(a00,a01,);
}
alias glEvalCoord2dv = glEvalCoord2dv_Z;
__gshared glbfn_glEvalCoord2dv glEvalCoord2dv_Z = function void (const(double)* a00) {
  glbfn_glEvalCoord2dv_loader(a00,);
};
private void glbfn_glEvalCoord2dv_loader (const(double)* a00) {
  *cast(void**)&glEvalCoord2dv_Z = glbindGetProcAddress(`glEvalCoord2dv`);
  if (*cast(void**)&glEvalCoord2dv_Z is null) assert(0, `OpenGL function 'glEvalCoord2dv' not found!`);
  glEvalCoord2dv_Z(a00,);
}
alias glEvalCoord2f = glEvalCoord2f_Z;
__gshared glbfn_glEvalCoord2f glEvalCoord2f_Z = function void (float a00,float a01) {
  glbfn_glEvalCoord2f_loader(a00,a01,);
};
private void glbfn_glEvalCoord2f_loader (float a00,float a01) {
  *cast(void**)&glEvalCoord2f_Z = glbindGetProcAddress(`glEvalCoord2f`);
  if (*cast(void**)&glEvalCoord2f_Z is null) assert(0, `OpenGL function 'glEvalCoord2f' not found!`);
  glEvalCoord2f_Z(a00,a01,);
}
alias glEvalCoord2fv = glEvalCoord2fv_Z;
__gshared glbfn_glEvalCoord2fv glEvalCoord2fv_Z = function void (const(float)* a00) {
  glbfn_glEvalCoord2fv_loader(a00,);
};
private void glbfn_glEvalCoord2fv_loader (const(float)* a00) {
  *cast(void**)&glEvalCoord2fv_Z = glbindGetProcAddress(`glEvalCoord2fv`);
  if (*cast(void**)&glEvalCoord2fv_Z is null) assert(0, `OpenGL function 'glEvalCoord2fv' not found!`);
  glEvalCoord2fv_Z(a00,);
}
alias glEvalMesh1 = glEvalMesh1_Z;
__gshared glbfn_glEvalMesh1 glEvalMesh1_Z = function void (uint a00,int a01,int a02) {
  glbfn_glEvalMesh1_loader(a00,a01,a02,);
};
private void glbfn_glEvalMesh1_loader (uint a00,int a01,int a02) {
  *cast(void**)&glEvalMesh1_Z = glbindGetProcAddress(`glEvalMesh1`);
  if (*cast(void**)&glEvalMesh1_Z is null) assert(0, `OpenGL function 'glEvalMesh1' not found!`);
  glEvalMesh1_Z(a00,a01,a02,);
}
alias glEvalPoint1 = glEvalPoint1_Z;
__gshared glbfn_glEvalPoint1 glEvalPoint1_Z = function void (int a00) {
  glbfn_glEvalPoint1_loader(a00,);
};
private void glbfn_glEvalPoint1_loader (int a00) {
  *cast(void**)&glEvalPoint1_Z = glbindGetProcAddress(`glEvalPoint1`);
  if (*cast(void**)&glEvalPoint1_Z is null) assert(0, `OpenGL function 'glEvalPoint1' not found!`);
  glEvalPoint1_Z(a00,);
}
alias glEvalMesh2 = glEvalMesh2_Z;
__gshared glbfn_glEvalMesh2 glEvalMesh2_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glEvalMesh2_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glEvalMesh2_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glEvalMesh2_Z = glbindGetProcAddress(`glEvalMesh2`);
  if (*cast(void**)&glEvalMesh2_Z is null) assert(0, `OpenGL function 'glEvalMesh2' not found!`);
  glEvalMesh2_Z(a00,a01,a02,a03,a04,);
}
alias glEvalPoint2 = glEvalPoint2_Z;
__gshared glbfn_glEvalPoint2 glEvalPoint2_Z = function void (int a00,int a01) {
  glbfn_glEvalPoint2_loader(a00,a01,);
};
private void glbfn_glEvalPoint2_loader (int a00,int a01) {
  *cast(void**)&glEvalPoint2_Z = glbindGetProcAddress(`glEvalPoint2`);
  if (*cast(void**)&glEvalPoint2_Z is null) assert(0, `OpenGL function 'glEvalPoint2' not found!`);
  glEvalPoint2_Z(a00,a01,);
}
alias glAlphaFunc = glAlphaFunc_Z;
__gshared glbfn_glAlphaFunc glAlphaFunc_Z = function void (uint a00,float a01) {
  glbfn_glAlphaFunc_loader(a00,a01,);
};
private void glbfn_glAlphaFunc_loader (uint a00,float a01) {
  *cast(void**)&glAlphaFunc_Z = glbindGetProcAddress(`glAlphaFunc`);
  if (*cast(void**)&glAlphaFunc_Z is null) assert(0, `OpenGL function 'glAlphaFunc' not found!`);
  glAlphaFunc_Z(a00,a01,);
}
alias glPixelZoom = glPixelZoom_Z;
__gshared glbfn_glPixelZoom glPixelZoom_Z = function void (float a00,float a01) {
  glbfn_glPixelZoom_loader(a00,a01,);
};
private void glbfn_glPixelZoom_loader (float a00,float a01) {
  *cast(void**)&glPixelZoom_Z = glbindGetProcAddress(`glPixelZoom`);
  if (*cast(void**)&glPixelZoom_Z is null) assert(0, `OpenGL function 'glPixelZoom' not found!`);
  glPixelZoom_Z(a00,a01,);
}
alias glPixelTransferf = glPixelTransferf_Z;
__gshared glbfn_glPixelTransferf glPixelTransferf_Z = function void (uint a00,float a01) {
  glbfn_glPixelTransferf_loader(a00,a01,);
};
private void glbfn_glPixelTransferf_loader (uint a00,float a01) {
  *cast(void**)&glPixelTransferf_Z = glbindGetProcAddress(`glPixelTransferf`);
  if (*cast(void**)&glPixelTransferf_Z is null) assert(0, `OpenGL function 'glPixelTransferf' not found!`);
  glPixelTransferf_Z(a00,a01,);
}
alias glPixelTransferi = glPixelTransferi_Z;
__gshared glbfn_glPixelTransferi glPixelTransferi_Z = function void (uint a00,int a01) {
  glbfn_glPixelTransferi_loader(a00,a01,);
};
private void glbfn_glPixelTransferi_loader (uint a00,int a01) {
  *cast(void**)&glPixelTransferi_Z = glbindGetProcAddress(`glPixelTransferi`);
  if (*cast(void**)&glPixelTransferi_Z is null) assert(0, `OpenGL function 'glPixelTransferi' not found!`);
  glPixelTransferi_Z(a00,a01,);
}
alias glPixelMapfv = glPixelMapfv_Z;
__gshared glbfn_glPixelMapfv glPixelMapfv_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glPixelMapfv_loader(a00,a01,a02,);
};
private void glbfn_glPixelMapfv_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glPixelMapfv_Z = glbindGetProcAddress(`glPixelMapfv`);
  if (*cast(void**)&glPixelMapfv_Z is null) assert(0, `OpenGL function 'glPixelMapfv' not found!`);
  glPixelMapfv_Z(a00,a01,a02,);
}
alias glPixelMapuiv = glPixelMapuiv_Z;
__gshared glbfn_glPixelMapuiv glPixelMapuiv_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glPixelMapuiv_loader(a00,a01,a02,);
};
private void glbfn_glPixelMapuiv_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glPixelMapuiv_Z = glbindGetProcAddress(`glPixelMapuiv`);
  if (*cast(void**)&glPixelMapuiv_Z is null) assert(0, `OpenGL function 'glPixelMapuiv' not found!`);
  glPixelMapuiv_Z(a00,a01,a02,);
}
alias glPixelMapusv = glPixelMapusv_Z;
__gshared glbfn_glPixelMapusv glPixelMapusv_Z = function void (uint a00,int a01,const(ushort)* a02) {
  glbfn_glPixelMapusv_loader(a00,a01,a02,);
};
private void glbfn_glPixelMapusv_loader (uint a00,int a01,const(ushort)* a02) {
  *cast(void**)&glPixelMapusv_Z = glbindGetProcAddress(`glPixelMapusv`);
  if (*cast(void**)&glPixelMapusv_Z is null) assert(0, `OpenGL function 'glPixelMapusv' not found!`);
  glPixelMapusv_Z(a00,a01,a02,);
}
alias glCopyPixels = glCopyPixels_Z;
__gshared glbfn_glCopyPixels glCopyPixels_Z = function void (int a00,int a01,int a02,int a03,uint a04) {
  glbfn_glCopyPixels_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyPixels_loader (int a00,int a01,int a02,int a03,uint a04) {
  *cast(void**)&glCopyPixels_Z = glbindGetProcAddress(`glCopyPixels`);
  if (*cast(void**)&glCopyPixels_Z is null) assert(0, `OpenGL function 'glCopyPixels' not found!`);
  glCopyPixels_Z(a00,a01,a02,a03,a04,);
}
alias glDrawPixels = glDrawPixels_Z;
__gshared glbfn_glDrawPixels glDrawPixels_Z = function void (int a00,int a01,uint a02,uint a03,const(void)* a04) {
  glbfn_glDrawPixels_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawPixels_loader (int a00,int a01,uint a02,uint a03,const(void)* a04) {
  *cast(void**)&glDrawPixels_Z = glbindGetProcAddress(`glDrawPixels`);
  if (*cast(void**)&glDrawPixels_Z is null) assert(0, `OpenGL function 'glDrawPixels' not found!`);
  glDrawPixels_Z(a00,a01,a02,a03,a04,);
}
alias glGetClipPlane = glGetClipPlane_Z;
__gshared glbfn_glGetClipPlane glGetClipPlane_Z = function void (uint a00,double* a01) {
  glbfn_glGetClipPlane_loader(a00,a01,);
};
private void glbfn_glGetClipPlane_loader (uint a00,double* a01) {
  *cast(void**)&glGetClipPlane_Z = glbindGetProcAddress(`glGetClipPlane`);
  if (*cast(void**)&glGetClipPlane_Z is null) assert(0, `OpenGL function 'glGetClipPlane' not found!`);
  glGetClipPlane_Z(a00,a01,);
}
alias glGetLightfv = glGetLightfv_Z;
__gshared glbfn_glGetLightfv glGetLightfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetLightfv_loader(a00,a01,a02,);
};
private void glbfn_glGetLightfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetLightfv_Z = glbindGetProcAddress(`glGetLightfv`);
  if (*cast(void**)&glGetLightfv_Z is null) assert(0, `OpenGL function 'glGetLightfv' not found!`);
  glGetLightfv_Z(a00,a01,a02,);
}
alias glGetLightiv = glGetLightiv_Z;
__gshared glbfn_glGetLightiv glGetLightiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetLightiv_loader(a00,a01,a02,);
};
private void glbfn_glGetLightiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetLightiv_Z = glbindGetProcAddress(`glGetLightiv`);
  if (*cast(void**)&glGetLightiv_Z is null) assert(0, `OpenGL function 'glGetLightiv' not found!`);
  glGetLightiv_Z(a00,a01,a02,);
}
alias glGetMapdv = glGetMapdv_Z;
__gshared glbfn_glGetMapdv glGetMapdv_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetMapdv_loader(a00,a01,a02,);
};
private void glbfn_glGetMapdv_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetMapdv_Z = glbindGetProcAddress(`glGetMapdv`);
  if (*cast(void**)&glGetMapdv_Z is null) assert(0, `OpenGL function 'glGetMapdv' not found!`);
  glGetMapdv_Z(a00,a01,a02,);
}
alias glGetMapfv = glGetMapfv_Z;
__gshared glbfn_glGetMapfv glGetMapfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetMapfv_loader(a00,a01,a02,);
};
private void glbfn_glGetMapfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetMapfv_Z = glbindGetProcAddress(`glGetMapfv`);
  if (*cast(void**)&glGetMapfv_Z is null) assert(0, `OpenGL function 'glGetMapfv' not found!`);
  glGetMapfv_Z(a00,a01,a02,);
}
alias glGetMapiv = glGetMapiv_Z;
__gshared glbfn_glGetMapiv glGetMapiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetMapiv_loader(a00,a01,a02,);
};
private void glbfn_glGetMapiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetMapiv_Z = glbindGetProcAddress(`glGetMapiv`);
  if (*cast(void**)&glGetMapiv_Z is null) assert(0, `OpenGL function 'glGetMapiv' not found!`);
  glGetMapiv_Z(a00,a01,a02,);
}
alias glGetMaterialfv = glGetMaterialfv_Z;
__gshared glbfn_glGetMaterialfv glGetMaterialfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetMaterialfv_loader(a00,a01,a02,);
};
private void glbfn_glGetMaterialfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetMaterialfv_Z = glbindGetProcAddress(`glGetMaterialfv`);
  if (*cast(void**)&glGetMaterialfv_Z is null) assert(0, `OpenGL function 'glGetMaterialfv' not found!`);
  glGetMaterialfv_Z(a00,a01,a02,);
}
alias glGetMaterialiv = glGetMaterialiv_Z;
__gshared glbfn_glGetMaterialiv glGetMaterialiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetMaterialiv_loader(a00,a01,a02,);
};
private void glbfn_glGetMaterialiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetMaterialiv_Z = glbindGetProcAddress(`glGetMaterialiv`);
  if (*cast(void**)&glGetMaterialiv_Z is null) assert(0, `OpenGL function 'glGetMaterialiv' not found!`);
  glGetMaterialiv_Z(a00,a01,a02,);
}
alias glGetPixelMapfv = glGetPixelMapfv_Z;
__gshared glbfn_glGetPixelMapfv glGetPixelMapfv_Z = function void (uint a00,float* a01) {
  glbfn_glGetPixelMapfv_loader(a00,a01,);
};
private void glbfn_glGetPixelMapfv_loader (uint a00,float* a01) {
  *cast(void**)&glGetPixelMapfv_Z = glbindGetProcAddress(`glGetPixelMapfv`);
  if (*cast(void**)&glGetPixelMapfv_Z is null) assert(0, `OpenGL function 'glGetPixelMapfv' not found!`);
  glGetPixelMapfv_Z(a00,a01,);
}
alias glGetPixelMapuiv = glGetPixelMapuiv_Z;
__gshared glbfn_glGetPixelMapuiv glGetPixelMapuiv_Z = function void (uint a00,uint* a01) {
  glbfn_glGetPixelMapuiv_loader(a00,a01,);
};
private void glbfn_glGetPixelMapuiv_loader (uint a00,uint* a01) {
  *cast(void**)&glGetPixelMapuiv_Z = glbindGetProcAddress(`glGetPixelMapuiv`);
  if (*cast(void**)&glGetPixelMapuiv_Z is null) assert(0, `OpenGL function 'glGetPixelMapuiv' not found!`);
  glGetPixelMapuiv_Z(a00,a01,);
}
alias glGetPixelMapusv = glGetPixelMapusv_Z;
__gshared glbfn_glGetPixelMapusv glGetPixelMapusv_Z = function void (uint a00,ushort* a01) {
  glbfn_glGetPixelMapusv_loader(a00,a01,);
};
private void glbfn_glGetPixelMapusv_loader (uint a00,ushort* a01) {
  *cast(void**)&glGetPixelMapusv_Z = glbindGetProcAddress(`glGetPixelMapusv`);
  if (*cast(void**)&glGetPixelMapusv_Z is null) assert(0, `OpenGL function 'glGetPixelMapusv' not found!`);
  glGetPixelMapusv_Z(a00,a01,);
}
alias glGetPolygonStipple = glGetPolygonStipple_Z;
__gshared glbfn_glGetPolygonStipple glGetPolygonStipple_Z = function void (ubyte* a00) {
  glbfn_glGetPolygonStipple_loader(a00,);
};
private void glbfn_glGetPolygonStipple_loader (ubyte* a00) {
  *cast(void**)&glGetPolygonStipple_Z = glbindGetProcAddress(`glGetPolygonStipple`);
  if (*cast(void**)&glGetPolygonStipple_Z is null) assert(0, `OpenGL function 'glGetPolygonStipple' not found!`);
  glGetPolygonStipple_Z(a00,);
}
alias glGetTexEnvfv = glGetTexEnvfv_Z;
__gshared glbfn_glGetTexEnvfv glGetTexEnvfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetTexEnvfv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexEnvfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetTexEnvfv_Z = glbindGetProcAddress(`glGetTexEnvfv`);
  if (*cast(void**)&glGetTexEnvfv_Z is null) assert(0, `OpenGL function 'glGetTexEnvfv' not found!`);
  glGetTexEnvfv_Z(a00,a01,a02,);
}
alias glGetTexEnviv = glGetTexEnviv_Z;
__gshared glbfn_glGetTexEnviv glGetTexEnviv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexEnviv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexEnviv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexEnviv_Z = glbindGetProcAddress(`glGetTexEnviv`);
  if (*cast(void**)&glGetTexEnviv_Z is null) assert(0, `OpenGL function 'glGetTexEnviv' not found!`);
  glGetTexEnviv_Z(a00,a01,a02,);
}
alias glGetTexGendv = glGetTexGendv_Z;
__gshared glbfn_glGetTexGendv glGetTexGendv_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetTexGendv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexGendv_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetTexGendv_Z = glbindGetProcAddress(`glGetTexGendv`);
  if (*cast(void**)&glGetTexGendv_Z is null) assert(0, `OpenGL function 'glGetTexGendv' not found!`);
  glGetTexGendv_Z(a00,a01,a02,);
}
alias glGetTexGenfv = glGetTexGenfv_Z;
__gshared glbfn_glGetTexGenfv glGetTexGenfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetTexGenfv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexGenfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetTexGenfv_Z = glbindGetProcAddress(`glGetTexGenfv`);
  if (*cast(void**)&glGetTexGenfv_Z is null) assert(0, `OpenGL function 'glGetTexGenfv' not found!`);
  glGetTexGenfv_Z(a00,a01,a02,);
}
alias glGetTexGeniv = glGetTexGeniv_Z;
__gshared glbfn_glGetTexGeniv glGetTexGeniv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexGeniv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexGeniv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexGeniv_Z = glbindGetProcAddress(`glGetTexGeniv`);
  if (*cast(void**)&glGetTexGeniv_Z is null) assert(0, `OpenGL function 'glGetTexGeniv' not found!`);
  glGetTexGeniv_Z(a00,a01,a02,);
}
alias glIsList = glIsList_Z;
__gshared glbfn_glIsList glIsList_Z = function ubyte (uint a00) {
  return glbfn_glIsList_loader(a00,);
};
private ubyte glbfn_glIsList_loader (uint a00) {
  *cast(void**)&glIsList_Z = glbindGetProcAddress(`glIsList`);
  if (*cast(void**)&glIsList_Z is null) assert(0, `OpenGL function 'glIsList' not found!`);
  return glIsList_Z(a00,);
}
alias glFrustum = glFrustum_Z;
__gshared glbfn_glFrustum glFrustum_Z = function void (double a00,double a01,double a02,double a03,double a04,double a05) {
  glbfn_glFrustum_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glFrustum_loader (double a00,double a01,double a02,double a03,double a04,double a05) {
  *cast(void**)&glFrustum_Z = glbindGetProcAddress(`glFrustum`);
  if (*cast(void**)&glFrustum_Z is null) assert(0, `OpenGL function 'glFrustum' not found!`);
  glFrustum_Z(a00,a01,a02,a03,a04,a05,);
}
alias glLoadIdentity = glLoadIdentity_Z;
__gshared glbfn_glLoadIdentity glLoadIdentity_Z = function void () {
  glbfn_glLoadIdentity_loader();
};
private void glbfn_glLoadIdentity_loader () {
  *cast(void**)&glLoadIdentity_Z = glbindGetProcAddress(`glLoadIdentity`);
  if (*cast(void**)&glLoadIdentity_Z is null) assert(0, `OpenGL function 'glLoadIdentity' not found!`);
  glLoadIdentity_Z();
}
alias glLoadMatrixf = glLoadMatrixf_Z;
__gshared glbfn_glLoadMatrixf glLoadMatrixf_Z = function void (const(float)* a00) {
  glbfn_glLoadMatrixf_loader(a00,);
};
private void glbfn_glLoadMatrixf_loader (const(float)* a00) {
  *cast(void**)&glLoadMatrixf_Z = glbindGetProcAddress(`glLoadMatrixf`);
  if (*cast(void**)&glLoadMatrixf_Z is null) assert(0, `OpenGL function 'glLoadMatrixf' not found!`);
  glLoadMatrixf_Z(a00,);
}
alias glLoadMatrixd = glLoadMatrixd_Z;
__gshared glbfn_glLoadMatrixd glLoadMatrixd_Z = function void (const(double)* a00) {
  glbfn_glLoadMatrixd_loader(a00,);
};
private void glbfn_glLoadMatrixd_loader (const(double)* a00) {
  *cast(void**)&glLoadMatrixd_Z = glbindGetProcAddress(`glLoadMatrixd`);
  if (*cast(void**)&glLoadMatrixd_Z is null) assert(0, `OpenGL function 'glLoadMatrixd' not found!`);
  glLoadMatrixd_Z(a00,);
}
alias glMatrixMode = glMatrixMode_Z;
__gshared glbfn_glMatrixMode glMatrixMode_Z = function void (uint a00) {
  glbfn_glMatrixMode_loader(a00,);
};
private void glbfn_glMatrixMode_loader (uint a00) {
  *cast(void**)&glMatrixMode_Z = glbindGetProcAddress(`glMatrixMode`);
  if (*cast(void**)&glMatrixMode_Z is null) assert(0, `OpenGL function 'glMatrixMode' not found!`);
  glMatrixMode_Z(a00,);
}
alias glMultMatrixf = glMultMatrixf_Z;
__gshared glbfn_glMultMatrixf glMultMatrixf_Z = function void (const(float)* a00) {
  glbfn_glMultMatrixf_loader(a00,);
};
private void glbfn_glMultMatrixf_loader (const(float)* a00) {
  *cast(void**)&glMultMatrixf_Z = glbindGetProcAddress(`glMultMatrixf`);
  if (*cast(void**)&glMultMatrixf_Z is null) assert(0, `OpenGL function 'glMultMatrixf' not found!`);
  glMultMatrixf_Z(a00,);
}
alias glMultMatrixd = glMultMatrixd_Z;
__gshared glbfn_glMultMatrixd glMultMatrixd_Z = function void (const(double)* a00) {
  glbfn_glMultMatrixd_loader(a00,);
};
private void glbfn_glMultMatrixd_loader (const(double)* a00) {
  *cast(void**)&glMultMatrixd_Z = glbindGetProcAddress(`glMultMatrixd`);
  if (*cast(void**)&glMultMatrixd_Z is null) assert(0, `OpenGL function 'glMultMatrixd' not found!`);
  glMultMatrixd_Z(a00,);
}
alias glOrtho = glOrtho_Z;
__gshared glbfn_glOrtho glOrtho_Z = function void (double a00,double a01,double a02,double a03,double a04,double a05) {
  glbfn_glOrtho_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glOrtho_loader (double a00,double a01,double a02,double a03,double a04,double a05) {
  *cast(void**)&glOrtho_Z = glbindGetProcAddress(`glOrtho`);
  if (*cast(void**)&glOrtho_Z is null) assert(0, `OpenGL function 'glOrtho' not found!`);
  glOrtho_Z(a00,a01,a02,a03,a04,a05,);
}
alias glPopMatrix = glPopMatrix_Z;
__gshared glbfn_glPopMatrix glPopMatrix_Z = function void () {
  glbfn_glPopMatrix_loader();
};
private void glbfn_glPopMatrix_loader () {
  *cast(void**)&glPopMatrix_Z = glbindGetProcAddress(`glPopMatrix`);
  if (*cast(void**)&glPopMatrix_Z is null) assert(0, `OpenGL function 'glPopMatrix' not found!`);
  glPopMatrix_Z();
}
alias glPushMatrix = glPushMatrix_Z;
__gshared glbfn_glPushMatrix glPushMatrix_Z = function void () {
  glbfn_glPushMatrix_loader();
};
private void glbfn_glPushMatrix_loader () {
  *cast(void**)&glPushMatrix_Z = glbindGetProcAddress(`glPushMatrix`);
  if (*cast(void**)&glPushMatrix_Z is null) assert(0, `OpenGL function 'glPushMatrix' not found!`);
  glPushMatrix_Z();
}
alias glRotated = glRotated_Z;
__gshared glbfn_glRotated glRotated_Z = function void (double a00,double a01,double a02,double a03) {
  glbfn_glRotated_loader(a00,a01,a02,a03,);
};
private void glbfn_glRotated_loader (double a00,double a01,double a02,double a03) {
  *cast(void**)&glRotated_Z = glbindGetProcAddress(`glRotated`);
  if (*cast(void**)&glRotated_Z is null) assert(0, `OpenGL function 'glRotated' not found!`);
  glRotated_Z(a00,a01,a02,a03,);
}
alias glRotatef = glRotatef_Z;
__gshared glbfn_glRotatef glRotatef_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glRotatef_loader(a00,a01,a02,a03,);
};
private void glbfn_glRotatef_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glRotatef_Z = glbindGetProcAddress(`glRotatef`);
  if (*cast(void**)&glRotatef_Z is null) assert(0, `OpenGL function 'glRotatef' not found!`);
  glRotatef_Z(a00,a01,a02,a03,);
}
alias glScaled = glScaled_Z;
__gshared glbfn_glScaled glScaled_Z = function void (double a00,double a01,double a02) {
  glbfn_glScaled_loader(a00,a01,a02,);
};
private void glbfn_glScaled_loader (double a00,double a01,double a02) {
  *cast(void**)&glScaled_Z = glbindGetProcAddress(`glScaled`);
  if (*cast(void**)&glScaled_Z is null) assert(0, `OpenGL function 'glScaled' not found!`);
  glScaled_Z(a00,a01,a02,);
}
alias glScalef = glScalef_Z;
__gshared glbfn_glScalef glScalef_Z = function void (float a00,float a01,float a02) {
  glbfn_glScalef_loader(a00,a01,a02,);
};
private void glbfn_glScalef_loader (float a00,float a01,float a02) {
  *cast(void**)&glScalef_Z = glbindGetProcAddress(`glScalef`);
  if (*cast(void**)&glScalef_Z is null) assert(0, `OpenGL function 'glScalef' not found!`);
  glScalef_Z(a00,a01,a02,);
}
alias glTranslated = glTranslated_Z;
__gshared glbfn_glTranslated glTranslated_Z = function void (double a00,double a01,double a02) {
  glbfn_glTranslated_loader(a00,a01,a02,);
};
private void glbfn_glTranslated_loader (double a00,double a01,double a02) {
  *cast(void**)&glTranslated_Z = glbindGetProcAddress(`glTranslated`);
  if (*cast(void**)&glTranslated_Z is null) assert(0, `OpenGL function 'glTranslated' not found!`);
  glTranslated_Z(a00,a01,a02,);
}
alias glTranslatef = glTranslatef_Z;
__gshared glbfn_glTranslatef glTranslatef_Z = function void (float a00,float a01,float a02) {
  glbfn_glTranslatef_loader(a00,a01,a02,);
};
private void glbfn_glTranslatef_loader (float a00,float a01,float a02) {
  *cast(void**)&glTranslatef_Z = glbindGetProcAddress(`glTranslatef`);
  if (*cast(void**)&glTranslatef_Z is null) assert(0, `OpenGL function 'glTranslatef' not found!`);
  glTranslatef_Z(a00,a01,a02,);
}
alias glDrawArrays = glDrawArrays_Z;
__gshared glbfn_glDrawArrays glDrawArrays_Z = function void (uint a00,int a01,int a02) {
  glbfn_glDrawArrays_loader(a00,a01,a02,);
};
private void glbfn_glDrawArrays_loader (uint a00,int a01,int a02) {
  *cast(void**)&glDrawArrays_Z = glbindGetProcAddress(`glDrawArrays`);
  if (*cast(void**)&glDrawArrays_Z is null) assert(0, `OpenGL function 'glDrawArrays' not found!`);
  glDrawArrays_Z(a00,a01,a02,);
}
alias glDrawElements = glDrawElements_Z;
__gshared glbfn_glDrawElements glDrawElements_Z = function void (uint a00,int a01,uint a02,const(void)* a03) {
  glbfn_glDrawElements_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawElements_loader (uint a00,int a01,uint a02,const(void)* a03) {
  *cast(void**)&glDrawElements_Z = glbindGetProcAddress(`glDrawElements`);
  if (*cast(void**)&glDrawElements_Z is null) assert(0, `OpenGL function 'glDrawElements' not found!`);
  glDrawElements_Z(a00,a01,a02,a03,);
}
alias glGetPointerv = glGetPointerv_Z;
__gshared glbfn_glGetPointerv glGetPointerv_Z = function void (uint a00,void** a01) {
  glbfn_glGetPointerv_loader(a00,a01,);
};
private void glbfn_glGetPointerv_loader (uint a00,void** a01) {
  *cast(void**)&glGetPointerv_Z = glbindGetProcAddress(`glGetPointerv`);
  if (*cast(void**)&glGetPointerv_Z is null) assert(0, `OpenGL function 'glGetPointerv' not found!`);
  glGetPointerv_Z(a00,a01,);
}
alias glPolygonOffset = glPolygonOffset_Z;
__gshared glbfn_glPolygonOffset glPolygonOffset_Z = function void (float a00,float a01) {
  glbfn_glPolygonOffset_loader(a00,a01,);
};
private void glbfn_glPolygonOffset_loader (float a00,float a01) {
  *cast(void**)&glPolygonOffset_Z = glbindGetProcAddress(`glPolygonOffset`);
  if (*cast(void**)&glPolygonOffset_Z is null) assert(0, `OpenGL function 'glPolygonOffset' not found!`);
  glPolygonOffset_Z(a00,a01,);
}
alias glCopyTexImage1D = glCopyTexImage1D_Z;
__gshared glbfn_glCopyTexImage1D glCopyTexImage1D_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06) {
  glbfn_glCopyTexImage1D_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCopyTexImage1D_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glCopyTexImage1D_Z = glbindGetProcAddress(`glCopyTexImage1D`);
  if (*cast(void**)&glCopyTexImage1D_Z is null) assert(0, `OpenGL function 'glCopyTexImage1D' not found!`);
  glCopyTexImage1D_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCopyTexImage2D = glCopyTexImage2D_Z;
__gshared glbfn_glCopyTexImage2D glCopyTexImage2D_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07) {
  glbfn_glCopyTexImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCopyTexImage2D_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glCopyTexImage2D_Z = glbindGetProcAddress(`glCopyTexImage2D`);
  if (*cast(void**)&glCopyTexImage2D_Z is null) assert(0, `OpenGL function 'glCopyTexImage2D' not found!`);
  glCopyTexImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCopyTexSubImage1D = glCopyTexSubImage1D_Z;
__gshared glbfn_glCopyTexSubImage1D glCopyTexSubImage1D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glCopyTexSubImage1D_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glCopyTexSubImage1D_loader (uint a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glCopyTexSubImage1D_Z = glbindGetProcAddress(`glCopyTexSubImage1D`);
  if (*cast(void**)&glCopyTexSubImage1D_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage1D' not found!`);
  glCopyTexSubImage1D_Z(a00,a01,a02,a03,a04,a05,);
}
alias glCopyTexSubImage2D = glCopyTexSubImage2D_Z;
__gshared glbfn_glCopyTexSubImage2D glCopyTexSubImage2D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  glbfn_glCopyTexSubImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCopyTexSubImage2D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glCopyTexSubImage2D_Z = glbindGetProcAddress(`glCopyTexSubImage2D`);
  if (*cast(void**)&glCopyTexSubImage2D_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage2D' not found!`);
  glCopyTexSubImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTexSubImage1D = glTexSubImage1D_Z;
__gshared glbfn_glTexSubImage1D glTexSubImage1D_Z = function void (uint a00,int a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glTexSubImage1D_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTexSubImage1D_loader (uint a00,int a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glTexSubImage1D_Z = glbindGetProcAddress(`glTexSubImage1D`);
  if (*cast(void**)&glTexSubImage1D_Z is null) assert(0, `OpenGL function 'glTexSubImage1D' not found!`);
  glTexSubImage1D_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTexSubImage2D = glTexSubImage2D_Z;
__gshared glbfn_glTexSubImage2D glTexSubImage2D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  glbfn_glTexSubImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTexSubImage2D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  *cast(void**)&glTexSubImage2D_Z = glbindGetProcAddress(`glTexSubImage2D`);
  if (*cast(void**)&glTexSubImage2D_Z is null) assert(0, `OpenGL function 'glTexSubImage2D' not found!`);
  glTexSubImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glBindTexture = glBindTexture_Z;
__gshared glbfn_glBindTexture glBindTexture_Z = function void (uint a00,uint a01) {
  glbfn_glBindTexture_loader(a00,a01,);
};
private void glbfn_glBindTexture_loader (uint a00,uint a01) {
  *cast(void**)&glBindTexture_Z = glbindGetProcAddress(`glBindTexture`);
  if (*cast(void**)&glBindTexture_Z is null) assert(0, `OpenGL function 'glBindTexture' not found!`);
  glBindTexture_Z(a00,a01,);
}
alias glDeleteTextures = glDeleteTextures_Z;
__gshared glbfn_glDeleteTextures glDeleteTextures_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteTextures_loader(a00,a01,);
};
private void glbfn_glDeleteTextures_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteTextures_Z = glbindGetProcAddress(`glDeleteTextures`);
  if (*cast(void**)&glDeleteTextures_Z is null) assert(0, `OpenGL function 'glDeleteTextures' not found!`);
  glDeleteTextures_Z(a00,a01,);
}
alias glGenTextures = glGenTextures_Z;
__gshared glbfn_glGenTextures glGenTextures_Z = function void (int a00,uint* a01) {
  //import core.stdc.stdio; printf("!!!!!!!\n");
  glbfn_glGenTextures_loader(a00,a01,);
};
private void glbfn_glGenTextures_loader (int a00,uint* a01) {
  *cast(void**)&glGenTextures_Z = glbindGetProcAddress(`glGenTextures`);
  if (*cast(void**)&glGenTextures_Z is null) assert(0, `OpenGL function 'glGenTextures' not found!`);
  glGenTextures_Z(a00,a01,);
}
alias glIsTexture = glIsTexture_Z;
__gshared glbfn_glIsTexture glIsTexture_Z = function ubyte (uint a00) {
  return glbfn_glIsTexture_loader(a00,);
};
private ubyte glbfn_glIsTexture_loader (uint a00) {
  *cast(void**)&glIsTexture_Z = glbindGetProcAddress(`glIsTexture`);
  if (*cast(void**)&glIsTexture_Z is null) assert(0, `OpenGL function 'glIsTexture' not found!`);
  return glIsTexture_Z(a00,);
}
alias glArrayElement = glArrayElement_Z;
__gshared glbfn_glArrayElement glArrayElement_Z = function void (int a00) {
  glbfn_glArrayElement_loader(a00,);
};
private void glbfn_glArrayElement_loader (int a00) {
  *cast(void**)&glArrayElement_Z = glbindGetProcAddress(`glArrayElement`);
  if (*cast(void**)&glArrayElement_Z is null) assert(0, `OpenGL function 'glArrayElement' not found!`);
  glArrayElement_Z(a00,);
}
alias glColorPointer = glColorPointer_Z;
__gshared glbfn_glColorPointer glColorPointer_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glColorPointer_loader(a00,a01,a02,a03,);
};
private void glbfn_glColorPointer_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glColorPointer_Z = glbindGetProcAddress(`glColorPointer`);
  if (*cast(void**)&glColorPointer_Z is null) assert(0, `OpenGL function 'glColorPointer' not found!`);
  glColorPointer_Z(a00,a01,a02,a03,);
}
alias glDisableClientState = glDisableClientState_Z;
__gshared glbfn_glDisableClientState glDisableClientState_Z = function void (uint a00) {
  glbfn_glDisableClientState_loader(a00,);
};
private void glbfn_glDisableClientState_loader (uint a00) {
  *cast(void**)&glDisableClientState_Z = glbindGetProcAddress(`glDisableClientState`);
  if (*cast(void**)&glDisableClientState_Z is null) assert(0, `OpenGL function 'glDisableClientState' not found!`);
  glDisableClientState_Z(a00,);
}
alias glEdgeFlagPointer = glEdgeFlagPointer_Z;
__gshared glbfn_glEdgeFlagPointer glEdgeFlagPointer_Z = function void (int a00,const(void)* a01) {
  glbfn_glEdgeFlagPointer_loader(a00,a01,);
};
private void glbfn_glEdgeFlagPointer_loader (int a00,const(void)* a01) {
  *cast(void**)&glEdgeFlagPointer_Z = glbindGetProcAddress(`glEdgeFlagPointer`);
  if (*cast(void**)&glEdgeFlagPointer_Z is null) assert(0, `OpenGL function 'glEdgeFlagPointer' not found!`);
  glEdgeFlagPointer_Z(a00,a01,);
}
alias glEnableClientState = glEnableClientState_Z;
__gshared glbfn_glEnableClientState glEnableClientState_Z = function void (uint a00) {
  glbfn_glEnableClientState_loader(a00,);
};
private void glbfn_glEnableClientState_loader (uint a00) {
  *cast(void**)&glEnableClientState_Z = glbindGetProcAddress(`glEnableClientState`);
  if (*cast(void**)&glEnableClientState_Z is null) assert(0, `OpenGL function 'glEnableClientState' not found!`);
  glEnableClientState_Z(a00,);
}
alias glIndexPointer = glIndexPointer_Z;
__gshared glbfn_glIndexPointer glIndexPointer_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glIndexPointer_loader(a00,a01,a02,);
};
private void glbfn_glIndexPointer_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glIndexPointer_Z = glbindGetProcAddress(`glIndexPointer`);
  if (*cast(void**)&glIndexPointer_Z is null) assert(0, `OpenGL function 'glIndexPointer' not found!`);
  glIndexPointer_Z(a00,a01,a02,);
}
alias glInterleavedArrays = glInterleavedArrays_Z;
__gshared glbfn_glInterleavedArrays glInterleavedArrays_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glInterleavedArrays_loader(a00,a01,a02,);
};
private void glbfn_glInterleavedArrays_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glInterleavedArrays_Z = glbindGetProcAddress(`glInterleavedArrays`);
  if (*cast(void**)&glInterleavedArrays_Z is null) assert(0, `OpenGL function 'glInterleavedArrays' not found!`);
  glInterleavedArrays_Z(a00,a01,a02,);
}
alias glNormalPointer = glNormalPointer_Z;
__gshared glbfn_glNormalPointer glNormalPointer_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glNormalPointer_loader(a00,a01,a02,);
};
private void glbfn_glNormalPointer_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glNormalPointer_Z = glbindGetProcAddress(`glNormalPointer`);
  if (*cast(void**)&glNormalPointer_Z is null) assert(0, `OpenGL function 'glNormalPointer' not found!`);
  glNormalPointer_Z(a00,a01,a02,);
}
alias glTexCoordPointer = glTexCoordPointer_Z;
__gshared glbfn_glTexCoordPointer glTexCoordPointer_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glTexCoordPointer_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoordPointer_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glTexCoordPointer_Z = glbindGetProcAddress(`glTexCoordPointer`);
  if (*cast(void**)&glTexCoordPointer_Z is null) assert(0, `OpenGL function 'glTexCoordPointer' not found!`);
  glTexCoordPointer_Z(a00,a01,a02,a03,);
}
alias glVertexPointer = glVertexPointer_Z;
__gshared glbfn_glVertexPointer glVertexPointer_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glVertexPointer_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexPointer_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glVertexPointer_Z = glbindGetProcAddress(`glVertexPointer`);
  if (*cast(void**)&glVertexPointer_Z is null) assert(0, `OpenGL function 'glVertexPointer' not found!`);
  glVertexPointer_Z(a00,a01,a02,a03,);
}
alias glAreTexturesResident = glAreTexturesResident_Z;
__gshared glbfn_glAreTexturesResident glAreTexturesResident_Z = function ubyte (int a00,const(uint)* a01,ubyte* a02) {
  return glbfn_glAreTexturesResident_loader(a00,a01,a02,);
};
private ubyte glbfn_glAreTexturesResident_loader (int a00,const(uint)* a01,ubyte* a02) {
  *cast(void**)&glAreTexturesResident_Z = glbindGetProcAddress(`glAreTexturesResident`);
  if (*cast(void**)&glAreTexturesResident_Z is null) assert(0, `OpenGL function 'glAreTexturesResident' not found!`);
  return glAreTexturesResident_Z(a00,a01,a02,);
}
alias glPrioritizeTextures = glPrioritizeTextures_Z;
__gshared glbfn_glPrioritizeTextures glPrioritizeTextures_Z = function void (int a00,const(uint)* a01,const(float)* a02) {
  glbfn_glPrioritizeTextures_loader(a00,a01,a02,);
};
private void glbfn_glPrioritizeTextures_loader (int a00,const(uint)* a01,const(float)* a02) {
  *cast(void**)&glPrioritizeTextures_Z = glbindGetProcAddress(`glPrioritizeTextures`);
  if (*cast(void**)&glPrioritizeTextures_Z is null) assert(0, `OpenGL function 'glPrioritizeTextures' not found!`);
  glPrioritizeTextures_Z(a00,a01,a02,);
}
alias glIndexub = glIndexub_Z;
__gshared glbfn_glIndexub glIndexub_Z = function void (ubyte a00) {
  glbfn_glIndexub_loader(a00,);
};
private void glbfn_glIndexub_loader (ubyte a00) {
  *cast(void**)&glIndexub_Z = glbindGetProcAddress(`glIndexub`);
  if (*cast(void**)&glIndexub_Z is null) assert(0, `OpenGL function 'glIndexub' not found!`);
  glIndexub_Z(a00,);
}
alias glIndexubv = glIndexubv_Z;
__gshared glbfn_glIndexubv glIndexubv_Z = function void (const(ubyte)* a00) {
  glbfn_glIndexubv_loader(a00,);
};
private void glbfn_glIndexubv_loader (const(ubyte)* a00) {
  *cast(void**)&glIndexubv_Z = glbindGetProcAddress(`glIndexubv`);
  if (*cast(void**)&glIndexubv_Z is null) assert(0, `OpenGL function 'glIndexubv' not found!`);
  glIndexubv_Z(a00,);
}
alias glPopClientAttrib = glPopClientAttrib_Z;
__gshared glbfn_glPopClientAttrib glPopClientAttrib_Z = function void () {
  glbfn_glPopClientAttrib_loader();
};
private void glbfn_glPopClientAttrib_loader () {
  *cast(void**)&glPopClientAttrib_Z = glbindGetProcAddress(`glPopClientAttrib`);
  if (*cast(void**)&glPopClientAttrib_Z is null) assert(0, `OpenGL function 'glPopClientAttrib' not found!`);
  glPopClientAttrib_Z();
}
alias glPushClientAttrib = glPushClientAttrib_Z;
__gshared glbfn_glPushClientAttrib glPushClientAttrib_Z = function void (uint a00) {
  glbfn_glPushClientAttrib_loader(a00,);
};
private void glbfn_glPushClientAttrib_loader (uint a00) {
  *cast(void**)&glPushClientAttrib_Z = glbindGetProcAddress(`glPushClientAttrib`);
  if (*cast(void**)&glPushClientAttrib_Z is null) assert(0, `OpenGL function 'glPushClientAttrib' not found!`);
  glPushClientAttrib_Z(a00,);
}
alias glDrawRangeElements = glDrawRangeElements_Z;
__gshared glbfn_glDrawRangeElements glDrawRangeElements_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04,const(void)* a05) {
  glbfn_glDrawRangeElements_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDrawRangeElements_loader (uint a00,uint a01,uint a02,int a03,uint a04,const(void)* a05) {
  *cast(void**)&glDrawRangeElements_Z = glbindGetProcAddress(`glDrawRangeElements`);
  if (*cast(void**)&glDrawRangeElements_Z is null) assert(0, `OpenGL function 'glDrawRangeElements' not found!`);
  glDrawRangeElements_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTexImage3D = glTexImage3D_Z;
__gshared glbfn_glTexImage3D glTexImage3D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  glbfn_glTexImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glTexImage3D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  *cast(void**)&glTexImage3D_Z = glbindGetProcAddress(`glTexImage3D`);
  if (*cast(void**)&glTexImage3D_Z is null) assert(0, `OpenGL function 'glTexImage3D' not found!`);
  glTexImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glTexSubImage3D = glTexSubImage3D_Z;
__gshared glbfn_glTexSubImage3D glTexSubImage3D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  glbfn_glTexSubImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glTexSubImage3D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  *cast(void**)&glTexSubImage3D_Z = glbindGetProcAddress(`glTexSubImage3D`);
  if (*cast(void**)&glTexSubImage3D_Z is null) assert(0, `OpenGL function 'glTexSubImage3D' not found!`);
  glTexSubImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glCopyTexSubImage3D = glCopyTexSubImage3D_Z;
__gshared glbfn_glCopyTexSubImage3D glCopyTexSubImage3D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  glbfn_glCopyTexSubImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCopyTexSubImage3D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  *cast(void**)&glCopyTexSubImage3D_Z = glbindGetProcAddress(`glCopyTexSubImage3D`);
  if (*cast(void**)&glCopyTexSubImage3D_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage3D' not found!`);
  glCopyTexSubImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glActiveTexture = glActiveTexture_Z;
__gshared glbfn_glActiveTexture glActiveTexture_Z = function void (uint a00) {
  glbfn_glActiveTexture_loader(a00,);
};
private void glbfn_glActiveTexture_loader (uint a00) {
  *cast(void**)&glActiveTexture_Z = glbindGetProcAddress(`glActiveTexture`);
  if (*cast(void**)&glActiveTexture_Z is null) assert(0, `OpenGL function 'glActiveTexture' not found!`);
  glActiveTexture_Z(a00,);
}
alias glSampleCoverage = glSampleCoverage_Z;
__gshared glbfn_glSampleCoverage glSampleCoverage_Z = function void (float a00,ubyte a01) {
  glbfn_glSampleCoverage_loader(a00,a01,);
};
private void glbfn_glSampleCoverage_loader (float a00,ubyte a01) {
  *cast(void**)&glSampleCoverage_Z = glbindGetProcAddress(`glSampleCoverage`);
  if (*cast(void**)&glSampleCoverage_Z is null) assert(0, `OpenGL function 'glSampleCoverage' not found!`);
  glSampleCoverage_Z(a00,a01,);
}
alias glCompressedTexImage3D = glCompressedTexImage3D_Z;
__gshared glbfn_glCompressedTexImage3D glCompressedTexImage3D_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  glbfn_glCompressedTexImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCompressedTexImage3D_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  *cast(void**)&glCompressedTexImage3D_Z = glbindGetProcAddress(`glCompressedTexImage3D`);
  if (*cast(void**)&glCompressedTexImage3D_Z is null) assert(0, `OpenGL function 'glCompressedTexImage3D' not found!`);
  glCompressedTexImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCompressedTexImage2D = glCompressedTexImage2D_Z;
__gshared glbfn_glCompressedTexImage2D glCompressedTexImage2D_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,const(void)* a07) {
  glbfn_glCompressedTexImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCompressedTexImage2D_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,const(void)* a07) {
  *cast(void**)&glCompressedTexImage2D_Z = glbindGetProcAddress(`glCompressedTexImage2D`);
  if (*cast(void**)&glCompressedTexImage2D_Z is null) assert(0, `OpenGL function 'glCompressedTexImage2D' not found!`);
  glCompressedTexImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCompressedTexImage1D = glCompressedTexImage1D_Z;
__gshared glbfn_glCompressedTexImage1D glCompressedTexImage1D_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,const(void)* a06) {
  glbfn_glCompressedTexImage1D_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCompressedTexImage1D_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,const(void)* a06) {
  *cast(void**)&glCompressedTexImage1D_Z = glbindGetProcAddress(`glCompressedTexImage1D`);
  if (*cast(void**)&glCompressedTexImage1D_Z is null) assert(0, `OpenGL function 'glCompressedTexImage1D' not found!`);
  glCompressedTexImage1D_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCompressedTexSubImage3D = glCompressedTexSubImage3D_Z;
__gshared glbfn_glCompressedTexSubImage3D glCompressedTexSubImage3D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,int a09,const(void)* a10) {
  glbfn_glCompressedTexSubImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glCompressedTexSubImage3D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,int a09,const(void)* a10) {
  *cast(void**)&glCompressedTexSubImage3D_Z = glbindGetProcAddress(`glCompressedTexSubImage3D`);
  if (*cast(void**)&glCompressedTexSubImage3D_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage3D' not found!`);
  glCompressedTexSubImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glCompressedTexSubImage2D = glCompressedTexSubImage2D_Z;
__gshared glbfn_glCompressedTexSubImage2D glCompressedTexSubImage2D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,int a07,const(void)* a08) {
  glbfn_glCompressedTexSubImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCompressedTexSubImage2D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,int a07,const(void)* a08) {
  *cast(void**)&glCompressedTexSubImage2D_Z = glbindGetProcAddress(`glCompressedTexSubImage2D`);
  if (*cast(void**)&glCompressedTexSubImage2D_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage2D' not found!`);
  glCompressedTexSubImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCompressedTexSubImage1D = glCompressedTexSubImage1D_Z;
__gshared glbfn_glCompressedTexSubImage1D glCompressedTexSubImage1D_Z = function void (uint a00,int a01,int a02,int a03,uint a04,int a05,const(void)* a06) {
  glbfn_glCompressedTexSubImage1D_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCompressedTexSubImage1D_loader (uint a00,int a01,int a02,int a03,uint a04,int a05,const(void)* a06) {
  *cast(void**)&glCompressedTexSubImage1D_Z = glbindGetProcAddress(`glCompressedTexSubImage1D`);
  if (*cast(void**)&glCompressedTexSubImage1D_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage1D' not found!`);
  glCompressedTexSubImage1D_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetCompressedTexImage = glGetCompressedTexImage_Z;
__gshared glbfn_glGetCompressedTexImage glGetCompressedTexImage_Z = function void (uint a00,int a01,void* a02) {
  glbfn_glGetCompressedTexImage_loader(a00,a01,a02,);
};
private void glbfn_glGetCompressedTexImage_loader (uint a00,int a01,void* a02) {
  *cast(void**)&glGetCompressedTexImage_Z = glbindGetProcAddress(`glGetCompressedTexImage`);
  if (*cast(void**)&glGetCompressedTexImage_Z is null) assert(0, `OpenGL function 'glGetCompressedTexImage' not found!`);
  glGetCompressedTexImage_Z(a00,a01,a02,);
}
alias glClientActiveTexture = glClientActiveTexture_Z;
__gshared glbfn_glClientActiveTexture glClientActiveTexture_Z = function void (uint a00) {
  glbfn_glClientActiveTexture_loader(a00,);
};
private void glbfn_glClientActiveTexture_loader (uint a00) {
  *cast(void**)&glClientActiveTexture_Z = glbindGetProcAddress(`glClientActiveTexture`);
  if (*cast(void**)&glClientActiveTexture_Z is null) assert(0, `OpenGL function 'glClientActiveTexture' not found!`);
  glClientActiveTexture_Z(a00,);
}
alias glMultiTexCoord1d = glMultiTexCoord1d_Z;
__gshared glbfn_glMultiTexCoord1d glMultiTexCoord1d_Z = function void (uint a00,double a01) {
  glbfn_glMultiTexCoord1d_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1d_loader (uint a00,double a01) {
  *cast(void**)&glMultiTexCoord1d_Z = glbindGetProcAddress(`glMultiTexCoord1d`);
  if (*cast(void**)&glMultiTexCoord1d_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1d' not found!`);
  glMultiTexCoord1d_Z(a00,a01,);
}
alias glMultiTexCoord1dv = glMultiTexCoord1dv_Z;
__gshared glbfn_glMultiTexCoord1dv glMultiTexCoord1dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord1dv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord1dv_Z = glbindGetProcAddress(`glMultiTexCoord1dv`);
  if (*cast(void**)&glMultiTexCoord1dv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1dv' not found!`);
  glMultiTexCoord1dv_Z(a00,a01,);
}
alias glMultiTexCoord1f = glMultiTexCoord1f_Z;
__gshared glbfn_glMultiTexCoord1f glMultiTexCoord1f_Z = function void (uint a00,float a01) {
  glbfn_glMultiTexCoord1f_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1f_loader (uint a00,float a01) {
  *cast(void**)&glMultiTexCoord1f_Z = glbindGetProcAddress(`glMultiTexCoord1f`);
  if (*cast(void**)&glMultiTexCoord1f_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1f' not found!`);
  glMultiTexCoord1f_Z(a00,a01,);
}
alias glMultiTexCoord1fv = glMultiTexCoord1fv_Z;
__gshared glbfn_glMultiTexCoord1fv glMultiTexCoord1fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord1fv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord1fv_Z = glbindGetProcAddress(`glMultiTexCoord1fv`);
  if (*cast(void**)&glMultiTexCoord1fv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1fv' not found!`);
  glMultiTexCoord1fv_Z(a00,a01,);
}
alias glMultiTexCoord1i = glMultiTexCoord1i_Z;
__gshared glbfn_glMultiTexCoord1i glMultiTexCoord1i_Z = function void (uint a00,int a01) {
  glbfn_glMultiTexCoord1i_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1i_loader (uint a00,int a01) {
  *cast(void**)&glMultiTexCoord1i_Z = glbindGetProcAddress(`glMultiTexCoord1i`);
  if (*cast(void**)&glMultiTexCoord1i_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1i' not found!`);
  glMultiTexCoord1i_Z(a00,a01,);
}
alias glMultiTexCoord1iv = glMultiTexCoord1iv_Z;
__gshared glbfn_glMultiTexCoord1iv glMultiTexCoord1iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord1iv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord1iv_Z = glbindGetProcAddress(`glMultiTexCoord1iv`);
  if (*cast(void**)&glMultiTexCoord1iv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1iv' not found!`);
  glMultiTexCoord1iv_Z(a00,a01,);
}
alias glMultiTexCoord1s = glMultiTexCoord1s_Z;
__gshared glbfn_glMultiTexCoord1s glMultiTexCoord1s_Z = function void (uint a00,short a01) {
  glbfn_glMultiTexCoord1s_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1s_loader (uint a00,short a01) {
  *cast(void**)&glMultiTexCoord1s_Z = glbindGetProcAddress(`glMultiTexCoord1s`);
  if (*cast(void**)&glMultiTexCoord1s_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1s' not found!`);
  glMultiTexCoord1s_Z(a00,a01,);
}
alias glMultiTexCoord1sv = glMultiTexCoord1sv_Z;
__gshared glbfn_glMultiTexCoord1sv glMultiTexCoord1sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord1sv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord1sv_Z = glbindGetProcAddress(`glMultiTexCoord1sv`);
  if (*cast(void**)&glMultiTexCoord1sv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1sv' not found!`);
  glMultiTexCoord1sv_Z(a00,a01,);
}
alias glMultiTexCoord2d = glMultiTexCoord2d_Z;
__gshared glbfn_glMultiTexCoord2d glMultiTexCoord2d_Z = function void (uint a00,double a01,double a02) {
  glbfn_glMultiTexCoord2d_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2d_loader (uint a00,double a01,double a02) {
  *cast(void**)&glMultiTexCoord2d_Z = glbindGetProcAddress(`glMultiTexCoord2d`);
  if (*cast(void**)&glMultiTexCoord2d_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2d' not found!`);
  glMultiTexCoord2d_Z(a00,a01,a02,);
}
alias glMultiTexCoord2dv = glMultiTexCoord2dv_Z;
__gshared glbfn_glMultiTexCoord2dv glMultiTexCoord2dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord2dv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord2dv_Z = glbindGetProcAddress(`glMultiTexCoord2dv`);
  if (*cast(void**)&glMultiTexCoord2dv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2dv' not found!`);
  glMultiTexCoord2dv_Z(a00,a01,);
}
alias glMultiTexCoord2f = glMultiTexCoord2f_Z;
__gshared glbfn_glMultiTexCoord2f glMultiTexCoord2f_Z = function void (uint a00,float a01,float a02) {
  glbfn_glMultiTexCoord2f_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2f_loader (uint a00,float a01,float a02) {
  *cast(void**)&glMultiTexCoord2f_Z = glbindGetProcAddress(`glMultiTexCoord2f`);
  if (*cast(void**)&glMultiTexCoord2f_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2f' not found!`);
  glMultiTexCoord2f_Z(a00,a01,a02,);
}
alias glMultiTexCoord2fv = glMultiTexCoord2fv_Z;
__gshared glbfn_glMultiTexCoord2fv glMultiTexCoord2fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord2fv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord2fv_Z = glbindGetProcAddress(`glMultiTexCoord2fv`);
  if (*cast(void**)&glMultiTexCoord2fv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2fv' not found!`);
  glMultiTexCoord2fv_Z(a00,a01,);
}
alias glMultiTexCoord2i = glMultiTexCoord2i_Z;
__gshared glbfn_glMultiTexCoord2i glMultiTexCoord2i_Z = function void (uint a00,int a01,int a02) {
  glbfn_glMultiTexCoord2i_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2i_loader (uint a00,int a01,int a02) {
  *cast(void**)&glMultiTexCoord2i_Z = glbindGetProcAddress(`glMultiTexCoord2i`);
  if (*cast(void**)&glMultiTexCoord2i_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2i' not found!`);
  glMultiTexCoord2i_Z(a00,a01,a02,);
}
alias glMultiTexCoord2iv = glMultiTexCoord2iv_Z;
__gshared glbfn_glMultiTexCoord2iv glMultiTexCoord2iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord2iv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord2iv_Z = glbindGetProcAddress(`glMultiTexCoord2iv`);
  if (*cast(void**)&glMultiTexCoord2iv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2iv' not found!`);
  glMultiTexCoord2iv_Z(a00,a01,);
}
alias glMultiTexCoord2s = glMultiTexCoord2s_Z;
__gshared glbfn_glMultiTexCoord2s glMultiTexCoord2s_Z = function void (uint a00,short a01,short a02) {
  glbfn_glMultiTexCoord2s_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2s_loader (uint a00,short a01,short a02) {
  *cast(void**)&glMultiTexCoord2s_Z = glbindGetProcAddress(`glMultiTexCoord2s`);
  if (*cast(void**)&glMultiTexCoord2s_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2s' not found!`);
  glMultiTexCoord2s_Z(a00,a01,a02,);
}
alias glMultiTexCoord2sv = glMultiTexCoord2sv_Z;
__gshared glbfn_glMultiTexCoord2sv glMultiTexCoord2sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord2sv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord2sv_Z = glbindGetProcAddress(`glMultiTexCoord2sv`);
  if (*cast(void**)&glMultiTexCoord2sv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2sv' not found!`);
  glMultiTexCoord2sv_Z(a00,a01,);
}
alias glMultiTexCoord3d = glMultiTexCoord3d_Z;
__gshared glbfn_glMultiTexCoord3d glMultiTexCoord3d_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glMultiTexCoord3d_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3d_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glMultiTexCoord3d_Z = glbindGetProcAddress(`glMultiTexCoord3d`);
  if (*cast(void**)&glMultiTexCoord3d_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3d' not found!`);
  glMultiTexCoord3d_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3dv = glMultiTexCoord3dv_Z;
__gshared glbfn_glMultiTexCoord3dv glMultiTexCoord3dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord3dv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord3dv_Z = glbindGetProcAddress(`glMultiTexCoord3dv`);
  if (*cast(void**)&glMultiTexCoord3dv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3dv' not found!`);
  glMultiTexCoord3dv_Z(a00,a01,);
}
alias glMultiTexCoord3f = glMultiTexCoord3f_Z;
__gshared glbfn_glMultiTexCoord3f glMultiTexCoord3f_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glMultiTexCoord3f_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3f_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glMultiTexCoord3f_Z = glbindGetProcAddress(`glMultiTexCoord3f`);
  if (*cast(void**)&glMultiTexCoord3f_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3f' not found!`);
  glMultiTexCoord3f_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3fv = glMultiTexCoord3fv_Z;
__gshared glbfn_glMultiTexCoord3fv glMultiTexCoord3fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord3fv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord3fv_Z = glbindGetProcAddress(`glMultiTexCoord3fv`);
  if (*cast(void**)&glMultiTexCoord3fv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3fv' not found!`);
  glMultiTexCoord3fv_Z(a00,a01,);
}
alias glMultiTexCoord3i = glMultiTexCoord3i_Z;
__gshared glbfn_glMultiTexCoord3i glMultiTexCoord3i_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glMultiTexCoord3i_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3i_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glMultiTexCoord3i_Z = glbindGetProcAddress(`glMultiTexCoord3i`);
  if (*cast(void**)&glMultiTexCoord3i_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3i' not found!`);
  glMultiTexCoord3i_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3iv = glMultiTexCoord3iv_Z;
__gshared glbfn_glMultiTexCoord3iv glMultiTexCoord3iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord3iv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord3iv_Z = glbindGetProcAddress(`glMultiTexCoord3iv`);
  if (*cast(void**)&glMultiTexCoord3iv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3iv' not found!`);
  glMultiTexCoord3iv_Z(a00,a01,);
}
alias glMultiTexCoord3s = glMultiTexCoord3s_Z;
__gshared glbfn_glMultiTexCoord3s glMultiTexCoord3s_Z = function void (uint a00,short a01,short a02,short a03) {
  glbfn_glMultiTexCoord3s_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3s_loader (uint a00,short a01,short a02,short a03) {
  *cast(void**)&glMultiTexCoord3s_Z = glbindGetProcAddress(`glMultiTexCoord3s`);
  if (*cast(void**)&glMultiTexCoord3s_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3s' not found!`);
  glMultiTexCoord3s_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3sv = glMultiTexCoord3sv_Z;
__gshared glbfn_glMultiTexCoord3sv glMultiTexCoord3sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord3sv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord3sv_Z = glbindGetProcAddress(`glMultiTexCoord3sv`);
  if (*cast(void**)&glMultiTexCoord3sv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3sv' not found!`);
  glMultiTexCoord3sv_Z(a00,a01,);
}
alias glMultiTexCoord4d = glMultiTexCoord4d_Z;
__gshared glbfn_glMultiTexCoord4d glMultiTexCoord4d_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glMultiTexCoord4d_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4d_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glMultiTexCoord4d_Z = glbindGetProcAddress(`glMultiTexCoord4d`);
  if (*cast(void**)&glMultiTexCoord4d_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4d' not found!`);
  glMultiTexCoord4d_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4dv = glMultiTexCoord4dv_Z;
__gshared glbfn_glMultiTexCoord4dv glMultiTexCoord4dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord4dv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord4dv_Z = glbindGetProcAddress(`glMultiTexCoord4dv`);
  if (*cast(void**)&glMultiTexCoord4dv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4dv' not found!`);
  glMultiTexCoord4dv_Z(a00,a01,);
}
alias glMultiTexCoord4f = glMultiTexCoord4f_Z;
__gshared glbfn_glMultiTexCoord4f glMultiTexCoord4f_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glMultiTexCoord4f_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4f_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glMultiTexCoord4f_Z = glbindGetProcAddress(`glMultiTexCoord4f`);
  if (*cast(void**)&glMultiTexCoord4f_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4f' not found!`);
  glMultiTexCoord4f_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4fv = glMultiTexCoord4fv_Z;
__gshared glbfn_glMultiTexCoord4fv glMultiTexCoord4fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord4fv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord4fv_Z = glbindGetProcAddress(`glMultiTexCoord4fv`);
  if (*cast(void**)&glMultiTexCoord4fv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4fv' not found!`);
  glMultiTexCoord4fv_Z(a00,a01,);
}
alias glMultiTexCoord4i = glMultiTexCoord4i_Z;
__gshared glbfn_glMultiTexCoord4i glMultiTexCoord4i_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glMultiTexCoord4i_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4i_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glMultiTexCoord4i_Z = glbindGetProcAddress(`glMultiTexCoord4i`);
  if (*cast(void**)&glMultiTexCoord4i_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4i' not found!`);
  glMultiTexCoord4i_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4iv = glMultiTexCoord4iv_Z;
__gshared glbfn_glMultiTexCoord4iv glMultiTexCoord4iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord4iv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord4iv_Z = glbindGetProcAddress(`glMultiTexCoord4iv`);
  if (*cast(void**)&glMultiTexCoord4iv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4iv' not found!`);
  glMultiTexCoord4iv_Z(a00,a01,);
}
alias glMultiTexCoord4s = glMultiTexCoord4s_Z;
__gshared glbfn_glMultiTexCoord4s glMultiTexCoord4s_Z = function void (uint a00,short a01,short a02,short a03,short a04) {
  glbfn_glMultiTexCoord4s_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4s_loader (uint a00,short a01,short a02,short a03,short a04) {
  *cast(void**)&glMultiTexCoord4s_Z = glbindGetProcAddress(`glMultiTexCoord4s`);
  if (*cast(void**)&glMultiTexCoord4s_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4s' not found!`);
  glMultiTexCoord4s_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4sv = glMultiTexCoord4sv_Z;
__gshared glbfn_glMultiTexCoord4sv glMultiTexCoord4sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord4sv_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord4sv_Z = glbindGetProcAddress(`glMultiTexCoord4sv`);
  if (*cast(void**)&glMultiTexCoord4sv_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4sv' not found!`);
  glMultiTexCoord4sv_Z(a00,a01,);
}
alias glLoadTransposeMatrixf = glLoadTransposeMatrixf_Z;
__gshared glbfn_glLoadTransposeMatrixf glLoadTransposeMatrixf_Z = function void (const(float)* a00) {
  glbfn_glLoadTransposeMatrixf_loader(a00,);
};
private void glbfn_glLoadTransposeMatrixf_loader (const(float)* a00) {
  *cast(void**)&glLoadTransposeMatrixf_Z = glbindGetProcAddress(`glLoadTransposeMatrixf`);
  if (*cast(void**)&glLoadTransposeMatrixf_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixf' not found!`);
  glLoadTransposeMatrixf_Z(a00,);
}
alias glLoadTransposeMatrixd = glLoadTransposeMatrixd_Z;
__gshared glbfn_glLoadTransposeMatrixd glLoadTransposeMatrixd_Z = function void (const(double)* a00) {
  glbfn_glLoadTransposeMatrixd_loader(a00,);
};
private void glbfn_glLoadTransposeMatrixd_loader (const(double)* a00) {
  *cast(void**)&glLoadTransposeMatrixd_Z = glbindGetProcAddress(`glLoadTransposeMatrixd`);
  if (*cast(void**)&glLoadTransposeMatrixd_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixd' not found!`);
  glLoadTransposeMatrixd_Z(a00,);
}
alias glMultTransposeMatrixf = glMultTransposeMatrixf_Z;
__gshared glbfn_glMultTransposeMatrixf glMultTransposeMatrixf_Z = function void (const(float)* a00) {
  glbfn_glMultTransposeMatrixf_loader(a00,);
};
private void glbfn_glMultTransposeMatrixf_loader (const(float)* a00) {
  *cast(void**)&glMultTransposeMatrixf_Z = glbindGetProcAddress(`glMultTransposeMatrixf`);
  if (*cast(void**)&glMultTransposeMatrixf_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixf' not found!`);
  glMultTransposeMatrixf_Z(a00,);
}
alias glMultTransposeMatrixd = glMultTransposeMatrixd_Z;
__gshared glbfn_glMultTransposeMatrixd glMultTransposeMatrixd_Z = function void (const(double)* a00) {
  glbfn_glMultTransposeMatrixd_loader(a00,);
};
private void glbfn_glMultTransposeMatrixd_loader (const(double)* a00) {
  *cast(void**)&glMultTransposeMatrixd_Z = glbindGetProcAddress(`glMultTransposeMatrixd`);
  if (*cast(void**)&glMultTransposeMatrixd_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixd' not found!`);
  glMultTransposeMatrixd_Z(a00,);
}
alias glBlendFuncSeparate = glBlendFuncSeparate_Z;
__gshared glbfn_glBlendFuncSeparate glBlendFuncSeparate_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glBlendFuncSeparate_loader(a00,a01,a02,a03,);
};
private void glbfn_glBlendFuncSeparate_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glBlendFuncSeparate_Z = glbindGetProcAddress(`glBlendFuncSeparate`);
  if (*cast(void**)&glBlendFuncSeparate_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparate' not found!`);
  glBlendFuncSeparate_Z(a00,a01,a02,a03,);
}
alias glMultiDrawArrays = glMultiDrawArrays_Z;
__gshared glbfn_glMultiDrawArrays glMultiDrawArrays_Z = function void (uint a00,const(int)* a01,const(int)* a02,int a03) {
  glbfn_glMultiDrawArrays_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiDrawArrays_loader (uint a00,const(int)* a01,const(int)* a02,int a03) {
  *cast(void**)&glMultiDrawArrays_Z = glbindGetProcAddress(`glMultiDrawArrays`);
  if (*cast(void**)&glMultiDrawArrays_Z is null) assert(0, `OpenGL function 'glMultiDrawArrays' not found!`);
  glMultiDrawArrays_Z(a00,a01,a02,a03,);
}
alias glMultiDrawElements = glMultiDrawElements_Z;
__gshared glbfn_glMultiDrawElements glMultiDrawElements_Z = function void (uint a00,const(int)* a01,uint a02,const(void*)* a03,int a04) {
  glbfn_glMultiDrawElements_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiDrawElements_loader (uint a00,const(int)* a01,uint a02,const(void*)* a03,int a04) {
  *cast(void**)&glMultiDrawElements_Z = glbindGetProcAddress(`glMultiDrawElements`);
  if (*cast(void**)&glMultiDrawElements_Z is null) assert(0, `OpenGL function 'glMultiDrawElements' not found!`);
  glMultiDrawElements_Z(a00,a01,a02,a03,a04,);
}
alias glPointParameterf = glPointParameterf_Z;
__gshared glbfn_glPointParameterf glPointParameterf_Z = function void (uint a00,float a01) {
  glbfn_glPointParameterf_loader(a00,a01,);
};
private void glbfn_glPointParameterf_loader (uint a00,float a01) {
  *cast(void**)&glPointParameterf_Z = glbindGetProcAddress(`glPointParameterf`);
  if (*cast(void**)&glPointParameterf_Z is null) assert(0, `OpenGL function 'glPointParameterf' not found!`);
  glPointParameterf_Z(a00,a01,);
}
alias glPointParameterfv = glPointParameterfv_Z;
__gshared glbfn_glPointParameterfv glPointParameterfv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glPointParameterfv_loader(a00,a01,);
};
private void glbfn_glPointParameterfv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glPointParameterfv_Z = glbindGetProcAddress(`glPointParameterfv`);
  if (*cast(void**)&glPointParameterfv_Z is null) assert(0, `OpenGL function 'glPointParameterfv' not found!`);
  glPointParameterfv_Z(a00,a01,);
}
alias glPointParameteri = glPointParameteri_Z;
__gshared glbfn_glPointParameteri glPointParameteri_Z = function void (uint a00,int a01) {
  glbfn_glPointParameteri_loader(a00,a01,);
};
private void glbfn_glPointParameteri_loader (uint a00,int a01) {
  *cast(void**)&glPointParameteri_Z = glbindGetProcAddress(`glPointParameteri`);
  if (*cast(void**)&glPointParameteri_Z is null) assert(0, `OpenGL function 'glPointParameteri' not found!`);
  glPointParameteri_Z(a00,a01,);
}
alias glPointParameteriv = glPointParameteriv_Z;
__gshared glbfn_glPointParameteriv glPointParameteriv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glPointParameteriv_loader(a00,a01,);
};
private void glbfn_glPointParameteriv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glPointParameteriv_Z = glbindGetProcAddress(`glPointParameteriv`);
  if (*cast(void**)&glPointParameteriv_Z is null) assert(0, `OpenGL function 'glPointParameteriv' not found!`);
  glPointParameteriv_Z(a00,a01,);
}
alias glFogCoordf = glFogCoordf_Z;
__gshared glbfn_glFogCoordf glFogCoordf_Z = function void (float a00) {
  glbfn_glFogCoordf_loader(a00,);
};
private void glbfn_glFogCoordf_loader (float a00) {
  *cast(void**)&glFogCoordf_Z = glbindGetProcAddress(`glFogCoordf`);
  if (*cast(void**)&glFogCoordf_Z is null) assert(0, `OpenGL function 'glFogCoordf' not found!`);
  glFogCoordf_Z(a00,);
}
alias glFogCoordfv = glFogCoordfv_Z;
__gshared glbfn_glFogCoordfv glFogCoordfv_Z = function void (const(float)* a00) {
  glbfn_glFogCoordfv_loader(a00,);
};
private void glbfn_glFogCoordfv_loader (const(float)* a00) {
  *cast(void**)&glFogCoordfv_Z = glbindGetProcAddress(`glFogCoordfv`);
  if (*cast(void**)&glFogCoordfv_Z is null) assert(0, `OpenGL function 'glFogCoordfv' not found!`);
  glFogCoordfv_Z(a00,);
}
alias glFogCoordd = glFogCoordd_Z;
__gshared glbfn_glFogCoordd glFogCoordd_Z = function void (double a00) {
  glbfn_glFogCoordd_loader(a00,);
};
private void glbfn_glFogCoordd_loader (double a00) {
  *cast(void**)&glFogCoordd_Z = glbindGetProcAddress(`glFogCoordd`);
  if (*cast(void**)&glFogCoordd_Z is null) assert(0, `OpenGL function 'glFogCoordd' not found!`);
  glFogCoordd_Z(a00,);
}
alias glFogCoorddv = glFogCoorddv_Z;
__gshared glbfn_glFogCoorddv glFogCoorddv_Z = function void (const(double)* a00) {
  glbfn_glFogCoorddv_loader(a00,);
};
private void glbfn_glFogCoorddv_loader (const(double)* a00) {
  *cast(void**)&glFogCoorddv_Z = glbindGetProcAddress(`glFogCoorddv`);
  if (*cast(void**)&glFogCoorddv_Z is null) assert(0, `OpenGL function 'glFogCoorddv' not found!`);
  glFogCoorddv_Z(a00,);
}
alias glFogCoordPointer = glFogCoordPointer_Z;
__gshared glbfn_glFogCoordPointer glFogCoordPointer_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glFogCoordPointer_loader(a00,a01,a02,);
};
private void glbfn_glFogCoordPointer_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glFogCoordPointer_Z = glbindGetProcAddress(`glFogCoordPointer`);
  if (*cast(void**)&glFogCoordPointer_Z is null) assert(0, `OpenGL function 'glFogCoordPointer' not found!`);
  glFogCoordPointer_Z(a00,a01,a02,);
}
alias glSecondaryColor3b = glSecondaryColor3b_Z;
__gshared glbfn_glSecondaryColor3b glSecondaryColor3b_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glSecondaryColor3b_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3b_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glSecondaryColor3b_Z = glbindGetProcAddress(`glSecondaryColor3b`);
  if (*cast(void**)&glSecondaryColor3b_Z is null) assert(0, `OpenGL function 'glSecondaryColor3b' not found!`);
  glSecondaryColor3b_Z(a00,a01,a02,);
}
alias glSecondaryColor3bv = glSecondaryColor3bv_Z;
__gshared glbfn_glSecondaryColor3bv glSecondaryColor3bv_Z = function void (const(byte)* a00) {
  glbfn_glSecondaryColor3bv_loader(a00,);
};
private void glbfn_glSecondaryColor3bv_loader (const(byte)* a00) {
  *cast(void**)&glSecondaryColor3bv_Z = glbindGetProcAddress(`glSecondaryColor3bv`);
  if (*cast(void**)&glSecondaryColor3bv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3bv' not found!`);
  glSecondaryColor3bv_Z(a00,);
}
alias glSecondaryColor3d = glSecondaryColor3d_Z;
__gshared glbfn_glSecondaryColor3d glSecondaryColor3d_Z = function void (double a00,double a01,double a02) {
  glbfn_glSecondaryColor3d_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3d_loader (double a00,double a01,double a02) {
  *cast(void**)&glSecondaryColor3d_Z = glbindGetProcAddress(`glSecondaryColor3d`);
  if (*cast(void**)&glSecondaryColor3d_Z is null) assert(0, `OpenGL function 'glSecondaryColor3d' not found!`);
  glSecondaryColor3d_Z(a00,a01,a02,);
}
alias glSecondaryColor3dv = glSecondaryColor3dv_Z;
__gshared glbfn_glSecondaryColor3dv glSecondaryColor3dv_Z = function void (const(double)* a00) {
  glbfn_glSecondaryColor3dv_loader(a00,);
};
private void glbfn_glSecondaryColor3dv_loader (const(double)* a00) {
  *cast(void**)&glSecondaryColor3dv_Z = glbindGetProcAddress(`glSecondaryColor3dv`);
  if (*cast(void**)&glSecondaryColor3dv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3dv' not found!`);
  glSecondaryColor3dv_Z(a00,);
}
alias glSecondaryColor3f = glSecondaryColor3f_Z;
__gshared glbfn_glSecondaryColor3f glSecondaryColor3f_Z = function void (float a00,float a01,float a02) {
  glbfn_glSecondaryColor3f_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3f_loader (float a00,float a01,float a02) {
  *cast(void**)&glSecondaryColor3f_Z = glbindGetProcAddress(`glSecondaryColor3f`);
  if (*cast(void**)&glSecondaryColor3f_Z is null) assert(0, `OpenGL function 'glSecondaryColor3f' not found!`);
  glSecondaryColor3f_Z(a00,a01,a02,);
}
alias glSecondaryColor3fv = glSecondaryColor3fv_Z;
__gshared glbfn_glSecondaryColor3fv glSecondaryColor3fv_Z = function void (const(float)* a00) {
  glbfn_glSecondaryColor3fv_loader(a00,);
};
private void glbfn_glSecondaryColor3fv_loader (const(float)* a00) {
  *cast(void**)&glSecondaryColor3fv_Z = glbindGetProcAddress(`glSecondaryColor3fv`);
  if (*cast(void**)&glSecondaryColor3fv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3fv' not found!`);
  glSecondaryColor3fv_Z(a00,);
}
alias glSecondaryColor3i = glSecondaryColor3i_Z;
__gshared glbfn_glSecondaryColor3i glSecondaryColor3i_Z = function void (int a00,int a01,int a02) {
  glbfn_glSecondaryColor3i_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3i_loader (int a00,int a01,int a02) {
  *cast(void**)&glSecondaryColor3i_Z = glbindGetProcAddress(`glSecondaryColor3i`);
  if (*cast(void**)&glSecondaryColor3i_Z is null) assert(0, `OpenGL function 'glSecondaryColor3i' not found!`);
  glSecondaryColor3i_Z(a00,a01,a02,);
}
alias glSecondaryColor3iv = glSecondaryColor3iv_Z;
__gshared glbfn_glSecondaryColor3iv glSecondaryColor3iv_Z = function void (const(int)* a00) {
  glbfn_glSecondaryColor3iv_loader(a00,);
};
private void glbfn_glSecondaryColor3iv_loader (const(int)* a00) {
  *cast(void**)&glSecondaryColor3iv_Z = glbindGetProcAddress(`glSecondaryColor3iv`);
  if (*cast(void**)&glSecondaryColor3iv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3iv' not found!`);
  glSecondaryColor3iv_Z(a00,);
}
alias glSecondaryColor3s = glSecondaryColor3s_Z;
__gshared glbfn_glSecondaryColor3s glSecondaryColor3s_Z = function void (short a00,short a01,short a02) {
  glbfn_glSecondaryColor3s_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3s_loader (short a00,short a01,short a02) {
  *cast(void**)&glSecondaryColor3s_Z = glbindGetProcAddress(`glSecondaryColor3s`);
  if (*cast(void**)&glSecondaryColor3s_Z is null) assert(0, `OpenGL function 'glSecondaryColor3s' not found!`);
  glSecondaryColor3s_Z(a00,a01,a02,);
}
alias glSecondaryColor3sv = glSecondaryColor3sv_Z;
__gshared glbfn_glSecondaryColor3sv glSecondaryColor3sv_Z = function void (const(short)* a00) {
  glbfn_glSecondaryColor3sv_loader(a00,);
};
private void glbfn_glSecondaryColor3sv_loader (const(short)* a00) {
  *cast(void**)&glSecondaryColor3sv_Z = glbindGetProcAddress(`glSecondaryColor3sv`);
  if (*cast(void**)&glSecondaryColor3sv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3sv' not found!`);
  glSecondaryColor3sv_Z(a00,);
}
alias glSecondaryColor3ub = glSecondaryColor3ub_Z;
__gshared glbfn_glSecondaryColor3ub glSecondaryColor3ub_Z = function void (ubyte a00,ubyte a01,ubyte a02) {
  glbfn_glSecondaryColor3ub_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3ub_loader (ubyte a00,ubyte a01,ubyte a02) {
  *cast(void**)&glSecondaryColor3ub_Z = glbindGetProcAddress(`glSecondaryColor3ub`);
  if (*cast(void**)&glSecondaryColor3ub_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ub' not found!`);
  glSecondaryColor3ub_Z(a00,a01,a02,);
}
alias glSecondaryColor3ubv = glSecondaryColor3ubv_Z;
__gshared glbfn_glSecondaryColor3ubv glSecondaryColor3ubv_Z = function void (const(ubyte)* a00) {
  glbfn_glSecondaryColor3ubv_loader(a00,);
};
private void glbfn_glSecondaryColor3ubv_loader (const(ubyte)* a00) {
  *cast(void**)&glSecondaryColor3ubv_Z = glbindGetProcAddress(`glSecondaryColor3ubv`);
  if (*cast(void**)&glSecondaryColor3ubv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ubv' not found!`);
  glSecondaryColor3ubv_Z(a00,);
}
alias glSecondaryColor3ui = glSecondaryColor3ui_Z;
__gshared glbfn_glSecondaryColor3ui glSecondaryColor3ui_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glSecondaryColor3ui_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3ui_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glSecondaryColor3ui_Z = glbindGetProcAddress(`glSecondaryColor3ui`);
  if (*cast(void**)&glSecondaryColor3ui_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ui' not found!`);
  glSecondaryColor3ui_Z(a00,a01,a02,);
}
alias glSecondaryColor3uiv = glSecondaryColor3uiv_Z;
__gshared glbfn_glSecondaryColor3uiv glSecondaryColor3uiv_Z = function void (const(uint)* a00) {
  glbfn_glSecondaryColor3uiv_loader(a00,);
};
private void glbfn_glSecondaryColor3uiv_loader (const(uint)* a00) {
  *cast(void**)&glSecondaryColor3uiv_Z = glbindGetProcAddress(`glSecondaryColor3uiv`);
  if (*cast(void**)&glSecondaryColor3uiv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3uiv' not found!`);
  glSecondaryColor3uiv_Z(a00,);
}
alias glSecondaryColor3us = glSecondaryColor3us_Z;
__gshared glbfn_glSecondaryColor3us glSecondaryColor3us_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glSecondaryColor3us_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3us_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glSecondaryColor3us_Z = glbindGetProcAddress(`glSecondaryColor3us`);
  if (*cast(void**)&glSecondaryColor3us_Z is null) assert(0, `OpenGL function 'glSecondaryColor3us' not found!`);
  glSecondaryColor3us_Z(a00,a01,a02,);
}
alias glSecondaryColor3usv = glSecondaryColor3usv_Z;
__gshared glbfn_glSecondaryColor3usv glSecondaryColor3usv_Z = function void (const(ushort)* a00) {
  glbfn_glSecondaryColor3usv_loader(a00,);
};
private void glbfn_glSecondaryColor3usv_loader (const(ushort)* a00) {
  *cast(void**)&glSecondaryColor3usv_Z = glbindGetProcAddress(`glSecondaryColor3usv`);
  if (*cast(void**)&glSecondaryColor3usv_Z is null) assert(0, `OpenGL function 'glSecondaryColor3usv' not found!`);
  glSecondaryColor3usv_Z(a00,);
}
alias glSecondaryColorPointer = glSecondaryColorPointer_Z;
__gshared glbfn_glSecondaryColorPointer glSecondaryColorPointer_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glSecondaryColorPointer_loader(a00,a01,a02,a03,);
};
private void glbfn_glSecondaryColorPointer_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glSecondaryColorPointer_Z = glbindGetProcAddress(`glSecondaryColorPointer`);
  if (*cast(void**)&glSecondaryColorPointer_Z is null) assert(0, `OpenGL function 'glSecondaryColorPointer' not found!`);
  glSecondaryColorPointer_Z(a00,a01,a02,a03,);
}
alias glWindowPos2d = glWindowPos2d_Z;
__gshared glbfn_glWindowPos2d glWindowPos2d_Z = function void (double a00,double a01) {
  glbfn_glWindowPos2d_loader(a00,a01,);
};
private void glbfn_glWindowPos2d_loader (double a00,double a01) {
  *cast(void**)&glWindowPos2d_Z = glbindGetProcAddress(`glWindowPos2d`);
  if (*cast(void**)&glWindowPos2d_Z is null) assert(0, `OpenGL function 'glWindowPos2d' not found!`);
  glWindowPos2d_Z(a00,a01,);
}
alias glWindowPos2dv = glWindowPos2dv_Z;
__gshared glbfn_glWindowPos2dv glWindowPos2dv_Z = function void (const(double)* a00) {
  glbfn_glWindowPos2dv_loader(a00,);
};
private void glbfn_glWindowPos2dv_loader (const(double)* a00) {
  *cast(void**)&glWindowPos2dv_Z = glbindGetProcAddress(`glWindowPos2dv`);
  if (*cast(void**)&glWindowPos2dv_Z is null) assert(0, `OpenGL function 'glWindowPos2dv' not found!`);
  glWindowPos2dv_Z(a00,);
}
alias glWindowPos2f = glWindowPos2f_Z;
__gshared glbfn_glWindowPos2f glWindowPos2f_Z = function void (float a00,float a01) {
  glbfn_glWindowPos2f_loader(a00,a01,);
};
private void glbfn_glWindowPos2f_loader (float a00,float a01) {
  *cast(void**)&glWindowPos2f_Z = glbindGetProcAddress(`glWindowPos2f`);
  if (*cast(void**)&glWindowPos2f_Z is null) assert(0, `OpenGL function 'glWindowPos2f' not found!`);
  glWindowPos2f_Z(a00,a01,);
}
alias glWindowPos2fv = glWindowPos2fv_Z;
__gshared glbfn_glWindowPos2fv glWindowPos2fv_Z = function void (const(float)* a00) {
  glbfn_glWindowPos2fv_loader(a00,);
};
private void glbfn_glWindowPos2fv_loader (const(float)* a00) {
  *cast(void**)&glWindowPos2fv_Z = glbindGetProcAddress(`glWindowPos2fv`);
  if (*cast(void**)&glWindowPos2fv_Z is null) assert(0, `OpenGL function 'glWindowPos2fv' not found!`);
  glWindowPos2fv_Z(a00,);
}
alias glWindowPos2i = glWindowPos2i_Z;
__gshared glbfn_glWindowPos2i glWindowPos2i_Z = function void (int a00,int a01) {
  glbfn_glWindowPos2i_loader(a00,a01,);
};
private void glbfn_glWindowPos2i_loader (int a00,int a01) {
  *cast(void**)&glWindowPos2i_Z = glbindGetProcAddress(`glWindowPos2i`);
  if (*cast(void**)&glWindowPos2i_Z is null) assert(0, `OpenGL function 'glWindowPos2i' not found!`);
  glWindowPos2i_Z(a00,a01,);
}
alias glWindowPos2iv = glWindowPos2iv_Z;
__gshared glbfn_glWindowPos2iv glWindowPos2iv_Z = function void (const(int)* a00) {
  glbfn_glWindowPos2iv_loader(a00,);
};
private void glbfn_glWindowPos2iv_loader (const(int)* a00) {
  *cast(void**)&glWindowPos2iv_Z = glbindGetProcAddress(`glWindowPos2iv`);
  if (*cast(void**)&glWindowPos2iv_Z is null) assert(0, `OpenGL function 'glWindowPos2iv' not found!`);
  glWindowPos2iv_Z(a00,);
}
alias glWindowPos2s = glWindowPos2s_Z;
__gshared glbfn_glWindowPos2s glWindowPos2s_Z = function void (short a00,short a01) {
  glbfn_glWindowPos2s_loader(a00,a01,);
};
private void glbfn_glWindowPos2s_loader (short a00,short a01) {
  *cast(void**)&glWindowPos2s_Z = glbindGetProcAddress(`glWindowPos2s`);
  if (*cast(void**)&glWindowPos2s_Z is null) assert(0, `OpenGL function 'glWindowPos2s' not found!`);
  glWindowPos2s_Z(a00,a01,);
}
alias glWindowPos2sv = glWindowPos2sv_Z;
__gshared glbfn_glWindowPos2sv glWindowPos2sv_Z = function void (const(short)* a00) {
  glbfn_glWindowPos2sv_loader(a00,);
};
private void glbfn_glWindowPos2sv_loader (const(short)* a00) {
  *cast(void**)&glWindowPos2sv_Z = glbindGetProcAddress(`glWindowPos2sv`);
  if (*cast(void**)&glWindowPos2sv_Z is null) assert(0, `OpenGL function 'glWindowPos2sv' not found!`);
  glWindowPos2sv_Z(a00,);
}
alias glWindowPos3d = glWindowPos3d_Z;
__gshared glbfn_glWindowPos3d glWindowPos3d_Z = function void (double a00,double a01,double a02) {
  glbfn_glWindowPos3d_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3d_loader (double a00,double a01,double a02) {
  *cast(void**)&glWindowPos3d_Z = glbindGetProcAddress(`glWindowPos3d`);
  if (*cast(void**)&glWindowPos3d_Z is null) assert(0, `OpenGL function 'glWindowPos3d' not found!`);
  glWindowPos3d_Z(a00,a01,a02,);
}
alias glWindowPos3dv = glWindowPos3dv_Z;
__gshared glbfn_glWindowPos3dv glWindowPos3dv_Z = function void (const(double)* a00) {
  glbfn_glWindowPos3dv_loader(a00,);
};
private void glbfn_glWindowPos3dv_loader (const(double)* a00) {
  *cast(void**)&glWindowPos3dv_Z = glbindGetProcAddress(`glWindowPos3dv`);
  if (*cast(void**)&glWindowPos3dv_Z is null) assert(0, `OpenGL function 'glWindowPos3dv' not found!`);
  glWindowPos3dv_Z(a00,);
}
alias glWindowPos3f = glWindowPos3f_Z;
__gshared glbfn_glWindowPos3f glWindowPos3f_Z = function void (float a00,float a01,float a02) {
  glbfn_glWindowPos3f_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3f_loader (float a00,float a01,float a02) {
  *cast(void**)&glWindowPos3f_Z = glbindGetProcAddress(`glWindowPos3f`);
  if (*cast(void**)&glWindowPos3f_Z is null) assert(0, `OpenGL function 'glWindowPos3f' not found!`);
  glWindowPos3f_Z(a00,a01,a02,);
}
alias glWindowPos3fv = glWindowPos3fv_Z;
__gshared glbfn_glWindowPos3fv glWindowPos3fv_Z = function void (const(float)* a00) {
  glbfn_glWindowPos3fv_loader(a00,);
};
private void glbfn_glWindowPos3fv_loader (const(float)* a00) {
  *cast(void**)&glWindowPos3fv_Z = glbindGetProcAddress(`glWindowPos3fv`);
  if (*cast(void**)&glWindowPos3fv_Z is null) assert(0, `OpenGL function 'glWindowPos3fv' not found!`);
  glWindowPos3fv_Z(a00,);
}
alias glWindowPos3i = glWindowPos3i_Z;
__gshared glbfn_glWindowPos3i glWindowPos3i_Z = function void (int a00,int a01,int a02) {
  glbfn_glWindowPos3i_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3i_loader (int a00,int a01,int a02) {
  *cast(void**)&glWindowPos3i_Z = glbindGetProcAddress(`glWindowPos3i`);
  if (*cast(void**)&glWindowPos3i_Z is null) assert(0, `OpenGL function 'glWindowPos3i' not found!`);
  glWindowPos3i_Z(a00,a01,a02,);
}
alias glWindowPos3iv = glWindowPos3iv_Z;
__gshared glbfn_glWindowPos3iv glWindowPos3iv_Z = function void (const(int)* a00) {
  glbfn_glWindowPos3iv_loader(a00,);
};
private void glbfn_glWindowPos3iv_loader (const(int)* a00) {
  *cast(void**)&glWindowPos3iv_Z = glbindGetProcAddress(`glWindowPos3iv`);
  if (*cast(void**)&glWindowPos3iv_Z is null) assert(0, `OpenGL function 'glWindowPos3iv' not found!`);
  glWindowPos3iv_Z(a00,);
}
alias glWindowPos3s = glWindowPos3s_Z;
__gshared glbfn_glWindowPos3s glWindowPos3s_Z = function void (short a00,short a01,short a02) {
  glbfn_glWindowPos3s_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3s_loader (short a00,short a01,short a02) {
  *cast(void**)&glWindowPos3s_Z = glbindGetProcAddress(`glWindowPos3s`);
  if (*cast(void**)&glWindowPos3s_Z is null) assert(0, `OpenGL function 'glWindowPos3s' not found!`);
  glWindowPos3s_Z(a00,a01,a02,);
}
alias glWindowPos3sv = glWindowPos3sv_Z;
__gshared glbfn_glWindowPos3sv glWindowPos3sv_Z = function void (const(short)* a00) {
  glbfn_glWindowPos3sv_loader(a00,);
};
private void glbfn_glWindowPos3sv_loader (const(short)* a00) {
  *cast(void**)&glWindowPos3sv_Z = glbindGetProcAddress(`glWindowPos3sv`);
  if (*cast(void**)&glWindowPos3sv_Z is null) assert(0, `OpenGL function 'glWindowPos3sv' not found!`);
  glWindowPos3sv_Z(a00,);
}
alias glBlendColor = glBlendColor_Z;
__gshared glbfn_glBlendColor glBlendColor_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glBlendColor_loader(a00,a01,a02,a03,);
};
private void glbfn_glBlendColor_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glBlendColor_Z = glbindGetProcAddress(`glBlendColor`);
  if (*cast(void**)&glBlendColor_Z is null) assert(0, `OpenGL function 'glBlendColor' not found!`);
  glBlendColor_Z(a00,a01,a02,a03,);
}
alias glBlendEquation = glBlendEquation_Z;
__gshared glbfn_glBlendEquation glBlendEquation_Z = function void (uint a00) {
  glbfn_glBlendEquation_loader(a00,);
};
private void glbfn_glBlendEquation_loader (uint a00) {
  *cast(void**)&glBlendEquation_Z = glbindGetProcAddress(`glBlendEquation`);
  if (*cast(void**)&glBlendEquation_Z is null) assert(0, `OpenGL function 'glBlendEquation' not found!`);
  glBlendEquation_Z(a00,);
}
alias glGenQueries = glGenQueries_Z;
__gshared glbfn_glGenQueries glGenQueries_Z = function void (int a00,uint* a01) {
  glbfn_glGenQueries_loader(a00,a01,);
};
private void glbfn_glGenQueries_loader (int a00,uint* a01) {
  *cast(void**)&glGenQueries_Z = glbindGetProcAddress(`glGenQueries`);
  if (*cast(void**)&glGenQueries_Z is null) assert(0, `OpenGL function 'glGenQueries' not found!`);
  glGenQueries_Z(a00,a01,);
}
alias glDeleteQueries = glDeleteQueries_Z;
__gshared glbfn_glDeleteQueries glDeleteQueries_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteQueries_loader(a00,a01,);
};
private void glbfn_glDeleteQueries_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteQueries_Z = glbindGetProcAddress(`glDeleteQueries`);
  if (*cast(void**)&glDeleteQueries_Z is null) assert(0, `OpenGL function 'glDeleteQueries' not found!`);
  glDeleteQueries_Z(a00,a01,);
}
alias glIsQuery = glIsQuery_Z;
__gshared glbfn_glIsQuery glIsQuery_Z = function ubyte (uint a00) {
  return glbfn_glIsQuery_loader(a00,);
};
private ubyte glbfn_glIsQuery_loader (uint a00) {
  *cast(void**)&glIsQuery_Z = glbindGetProcAddress(`glIsQuery`);
  if (*cast(void**)&glIsQuery_Z is null) assert(0, `OpenGL function 'glIsQuery' not found!`);
  return glIsQuery_Z(a00,);
}
alias glBeginQuery = glBeginQuery_Z;
__gshared glbfn_glBeginQuery glBeginQuery_Z = function void (uint a00,uint a01) {
  glbfn_glBeginQuery_loader(a00,a01,);
};
private void glbfn_glBeginQuery_loader (uint a00,uint a01) {
  *cast(void**)&glBeginQuery_Z = glbindGetProcAddress(`glBeginQuery`);
  if (*cast(void**)&glBeginQuery_Z is null) assert(0, `OpenGL function 'glBeginQuery' not found!`);
  glBeginQuery_Z(a00,a01,);
}
alias glEndQuery = glEndQuery_Z;
__gshared glbfn_glEndQuery glEndQuery_Z = function void (uint a00) {
  glbfn_glEndQuery_loader(a00,);
};
private void glbfn_glEndQuery_loader (uint a00) {
  *cast(void**)&glEndQuery_Z = glbindGetProcAddress(`glEndQuery`);
  if (*cast(void**)&glEndQuery_Z is null) assert(0, `OpenGL function 'glEndQuery' not found!`);
  glEndQuery_Z(a00,);
}
alias glGetQueryiv = glGetQueryiv_Z;
__gshared glbfn_glGetQueryiv glGetQueryiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetQueryiv_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetQueryiv_Z = glbindGetProcAddress(`glGetQueryiv`);
  if (*cast(void**)&glGetQueryiv_Z is null) assert(0, `OpenGL function 'glGetQueryiv' not found!`);
  glGetQueryiv_Z(a00,a01,a02,);
}
alias glGetQueryObjectiv = glGetQueryObjectiv_Z;
__gshared glbfn_glGetQueryObjectiv glGetQueryObjectiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetQueryObjectiv_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjectiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetQueryObjectiv_Z = glbindGetProcAddress(`glGetQueryObjectiv`);
  if (*cast(void**)&glGetQueryObjectiv_Z is null) assert(0, `OpenGL function 'glGetQueryObjectiv' not found!`);
  glGetQueryObjectiv_Z(a00,a01,a02,);
}
alias glGetQueryObjectuiv = glGetQueryObjectuiv_Z;
__gshared glbfn_glGetQueryObjectuiv glGetQueryObjectuiv_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetQueryObjectuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjectuiv_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetQueryObjectuiv_Z = glbindGetProcAddress(`glGetQueryObjectuiv`);
  if (*cast(void**)&glGetQueryObjectuiv_Z is null) assert(0, `OpenGL function 'glGetQueryObjectuiv' not found!`);
  glGetQueryObjectuiv_Z(a00,a01,a02,);
}
alias glBindBuffer = glBindBuffer_Z;
__gshared glbfn_glBindBuffer glBindBuffer_Z = function void (uint a00,uint a01) {
  glbfn_glBindBuffer_loader(a00,a01,);
};
private void glbfn_glBindBuffer_loader (uint a00,uint a01) {
  *cast(void**)&glBindBuffer_Z = glbindGetProcAddress(`glBindBuffer`);
  if (*cast(void**)&glBindBuffer_Z is null) assert(0, `OpenGL function 'glBindBuffer' not found!`);
  glBindBuffer_Z(a00,a01,);
}
alias glDeleteBuffers = glDeleteBuffers_Z;
__gshared glbfn_glDeleteBuffers glDeleteBuffers_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteBuffers_loader(a00,a01,);
};
private void glbfn_glDeleteBuffers_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteBuffers_Z = glbindGetProcAddress(`glDeleteBuffers`);
  if (*cast(void**)&glDeleteBuffers_Z is null) assert(0, `OpenGL function 'glDeleteBuffers' not found!`);
  glDeleteBuffers_Z(a00,a01,);
}
alias glGenBuffers = glGenBuffers_Z;
__gshared glbfn_glGenBuffers glGenBuffers_Z = function void (int a00,uint* a01) {
  glbfn_glGenBuffers_loader(a00,a01,);
};
private void glbfn_glGenBuffers_loader (int a00,uint* a01) {
  *cast(void**)&glGenBuffers_Z = glbindGetProcAddress(`glGenBuffers`);
  if (*cast(void**)&glGenBuffers_Z is null) assert(0, `OpenGL function 'glGenBuffers' not found!`);
  glGenBuffers_Z(a00,a01,);
}
alias glIsBuffer = glIsBuffer_Z;
__gshared glbfn_glIsBuffer glIsBuffer_Z = function ubyte (uint a00) {
  return glbfn_glIsBuffer_loader(a00,);
};
private ubyte glbfn_glIsBuffer_loader (uint a00) {
  *cast(void**)&glIsBuffer_Z = glbindGetProcAddress(`glIsBuffer`);
  if (*cast(void**)&glIsBuffer_Z is null) assert(0, `OpenGL function 'glIsBuffer' not found!`);
  return glIsBuffer_Z(a00,);
}
alias glBufferData = glBufferData_Z;
__gshared glbfn_glBufferData glBufferData_Z = function void (uint a00,int a01,const(void)* a02,uint a03) {
  glbfn_glBufferData_loader(a00,a01,a02,a03,);
};
private void glbfn_glBufferData_loader (uint a00,int a01,const(void)* a02,uint a03) {
  *cast(void**)&glBufferData_Z = glbindGetProcAddress(`glBufferData`);
  if (*cast(void**)&glBufferData_Z is null) assert(0, `OpenGL function 'glBufferData' not found!`);
  glBufferData_Z(a00,a01,a02,a03,);
}
alias glBufferSubData = glBufferSubData_Z;
__gshared glbfn_glBufferSubData glBufferSubData_Z = function void (uint a00,int a01,int a02,const(void)* a03) {
  glbfn_glBufferSubData_loader(a00,a01,a02,a03,);
};
private void glbfn_glBufferSubData_loader (uint a00,int a01,int a02,const(void)* a03) {
  *cast(void**)&glBufferSubData_Z = glbindGetProcAddress(`glBufferSubData`);
  if (*cast(void**)&glBufferSubData_Z is null) assert(0, `OpenGL function 'glBufferSubData' not found!`);
  glBufferSubData_Z(a00,a01,a02,a03,);
}
alias glGetBufferSubData = glGetBufferSubData_Z;
__gshared glbfn_glGetBufferSubData glGetBufferSubData_Z = function void (uint a00,int a01,int a02,void* a03) {
  glbfn_glGetBufferSubData_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetBufferSubData_loader (uint a00,int a01,int a02,void* a03) {
  *cast(void**)&glGetBufferSubData_Z = glbindGetProcAddress(`glGetBufferSubData`);
  if (*cast(void**)&glGetBufferSubData_Z is null) assert(0, `OpenGL function 'glGetBufferSubData' not found!`);
  glGetBufferSubData_Z(a00,a01,a02,a03,);
}
alias glMapBuffer = glMapBuffer_Z;
__gshared glbfn_glMapBuffer glMapBuffer_Z = function void* (uint a00,uint a01) {
  return glbfn_glMapBuffer_loader(a00,a01,);
};
private void* glbfn_glMapBuffer_loader (uint a00,uint a01) {
  *cast(void**)&glMapBuffer_Z = glbindGetProcAddress(`glMapBuffer`);
  if (*cast(void**)&glMapBuffer_Z is null) assert(0, `OpenGL function 'glMapBuffer' not found!`);
  return glMapBuffer_Z(a00,a01,);
}
alias glUnmapBuffer = glUnmapBuffer_Z;
__gshared glbfn_glUnmapBuffer glUnmapBuffer_Z = function ubyte (uint a00) {
  return glbfn_glUnmapBuffer_loader(a00,);
};
private ubyte glbfn_glUnmapBuffer_loader (uint a00) {
  *cast(void**)&glUnmapBuffer_Z = glbindGetProcAddress(`glUnmapBuffer`);
  if (*cast(void**)&glUnmapBuffer_Z is null) assert(0, `OpenGL function 'glUnmapBuffer' not found!`);
  return glUnmapBuffer_Z(a00,);
}
alias glGetBufferParameteriv = glGetBufferParameteriv_Z;
__gshared glbfn_glGetBufferParameteriv glGetBufferParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetBufferParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetBufferParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetBufferParameteriv_Z = glbindGetProcAddress(`glGetBufferParameteriv`);
  if (*cast(void**)&glGetBufferParameteriv_Z is null) assert(0, `OpenGL function 'glGetBufferParameteriv' not found!`);
  glGetBufferParameteriv_Z(a00,a01,a02,);
}
alias glGetBufferPointerv = glGetBufferPointerv_Z;
__gshared glbfn_glGetBufferPointerv glGetBufferPointerv_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetBufferPointerv_loader(a00,a01,a02,);
};
private void glbfn_glGetBufferPointerv_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetBufferPointerv_Z = glbindGetProcAddress(`glGetBufferPointerv`);
  if (*cast(void**)&glGetBufferPointerv_Z is null) assert(0, `OpenGL function 'glGetBufferPointerv' not found!`);
  glGetBufferPointerv_Z(a00,a01,a02,);
}
alias glBlendEquationSeparate = glBlendEquationSeparate_Z;
__gshared glbfn_glBlendEquationSeparate glBlendEquationSeparate_Z = function void (uint a00,uint a01) {
  glbfn_glBlendEquationSeparate_loader(a00,a01,);
};
private void glbfn_glBlendEquationSeparate_loader (uint a00,uint a01) {
  *cast(void**)&glBlendEquationSeparate_Z = glbindGetProcAddress(`glBlendEquationSeparate`);
  if (*cast(void**)&glBlendEquationSeparate_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparate' not found!`);
  glBlendEquationSeparate_Z(a00,a01,);
}
alias glDrawBuffers = glDrawBuffers_Z;
__gshared glbfn_glDrawBuffers glDrawBuffers_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDrawBuffers_loader(a00,a01,);
};
private void glbfn_glDrawBuffers_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDrawBuffers_Z = glbindGetProcAddress(`glDrawBuffers`);
  if (*cast(void**)&glDrawBuffers_Z is null) assert(0, `OpenGL function 'glDrawBuffers' not found!`);
  glDrawBuffers_Z(a00,a01,);
}
alias glStencilOpSeparate = glStencilOpSeparate_Z;
__gshared glbfn_glStencilOpSeparate glStencilOpSeparate_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glStencilOpSeparate_loader(a00,a01,a02,a03,);
};
private void glbfn_glStencilOpSeparate_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glStencilOpSeparate_Z = glbindGetProcAddress(`glStencilOpSeparate`);
  if (*cast(void**)&glStencilOpSeparate_Z is null) assert(0, `OpenGL function 'glStencilOpSeparate' not found!`);
  glStencilOpSeparate_Z(a00,a01,a02,a03,);
}
alias glStencilFuncSeparate = glStencilFuncSeparate_Z;
__gshared glbfn_glStencilFuncSeparate glStencilFuncSeparate_Z = function void (uint a00,uint a01,int a02,uint a03) {
  glbfn_glStencilFuncSeparate_loader(a00,a01,a02,a03,);
};
private void glbfn_glStencilFuncSeparate_loader (uint a00,uint a01,int a02,uint a03) {
  *cast(void**)&glStencilFuncSeparate_Z = glbindGetProcAddress(`glStencilFuncSeparate`);
  if (*cast(void**)&glStencilFuncSeparate_Z is null) assert(0, `OpenGL function 'glStencilFuncSeparate' not found!`);
  glStencilFuncSeparate_Z(a00,a01,a02,a03,);
}
alias glStencilMaskSeparate = glStencilMaskSeparate_Z;
__gshared glbfn_glStencilMaskSeparate glStencilMaskSeparate_Z = function void (uint a00,uint a01) {
  glbfn_glStencilMaskSeparate_loader(a00,a01,);
};
private void glbfn_glStencilMaskSeparate_loader (uint a00,uint a01) {
  *cast(void**)&glStencilMaskSeparate_Z = glbindGetProcAddress(`glStencilMaskSeparate`);
  if (*cast(void**)&glStencilMaskSeparate_Z is null) assert(0, `OpenGL function 'glStencilMaskSeparate' not found!`);
  glStencilMaskSeparate_Z(a00,a01,);
}
alias glAttachShader = glAttachShader_Z;
__gshared glbfn_glAttachShader glAttachShader_Z = function void (uint a00,uint a01) {
  glbfn_glAttachShader_loader(a00,a01,);
};
private void glbfn_glAttachShader_loader (uint a00,uint a01) {
  *cast(void**)&glAttachShader_Z = glbindGetProcAddress(`glAttachShader`);
  if (*cast(void**)&glAttachShader_Z is null) assert(0, `OpenGL function 'glAttachShader' not found!`);
  glAttachShader_Z(a00,a01,);
}
alias glBindAttribLocation = glBindAttribLocation_Z;
__gshared glbfn_glBindAttribLocation glBindAttribLocation_Z = function void (uint a00,uint a01,const(char)* a02) {
  glbfn_glBindAttribLocation_loader(a00,a01,a02,);
};
private void glbfn_glBindAttribLocation_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glBindAttribLocation_Z = glbindGetProcAddress(`glBindAttribLocation`);
  if (*cast(void**)&glBindAttribLocation_Z is null) assert(0, `OpenGL function 'glBindAttribLocation' not found!`);
  glBindAttribLocation_Z(a00,a01,a02,);
}
alias glCompileShader = glCompileShader_Z;
__gshared glbfn_glCompileShader glCompileShader_Z = function void (uint a00) {
  glbfn_glCompileShader_loader(a00,);
};
private void glbfn_glCompileShader_loader (uint a00) {
  *cast(void**)&glCompileShader_Z = glbindGetProcAddress(`glCompileShader`);
  if (*cast(void**)&glCompileShader_Z is null) assert(0, `OpenGL function 'glCompileShader' not found!`);
  glCompileShader_Z(a00,);
}
alias glCreateProgram = glCreateProgram_Z;
__gshared glbfn_glCreateProgram glCreateProgram_Z = function uint () {
  return glbfn_glCreateProgram_loader();
};
private uint glbfn_glCreateProgram_loader () {
  *cast(void**)&glCreateProgram_Z = glbindGetProcAddress(`glCreateProgram`);
  if (*cast(void**)&glCreateProgram_Z is null) assert(0, `OpenGL function 'glCreateProgram' not found!`);
  return glCreateProgram_Z();
}
alias glCreateShader = glCreateShader_Z;
__gshared glbfn_glCreateShader glCreateShader_Z = function uint (uint a00) {
  return glbfn_glCreateShader_loader(a00,);
};
private uint glbfn_glCreateShader_loader (uint a00) {
  *cast(void**)&glCreateShader_Z = glbindGetProcAddress(`glCreateShader`);
  if (*cast(void**)&glCreateShader_Z is null) assert(0, `OpenGL function 'glCreateShader' not found!`);
  return glCreateShader_Z(a00,);
}
alias glDeleteProgram = glDeleteProgram_Z;
__gshared glbfn_glDeleteProgram glDeleteProgram_Z = function void (uint a00) {
  glbfn_glDeleteProgram_loader(a00,);
};
private void glbfn_glDeleteProgram_loader (uint a00) {
  *cast(void**)&glDeleteProgram_Z = glbindGetProcAddress(`glDeleteProgram`);
  if (*cast(void**)&glDeleteProgram_Z is null) assert(0, `OpenGL function 'glDeleteProgram' not found!`);
  glDeleteProgram_Z(a00,);
}
alias glDeleteShader = glDeleteShader_Z;
__gshared glbfn_glDeleteShader glDeleteShader_Z = function void (uint a00) {
  glbfn_glDeleteShader_loader(a00,);
};
private void glbfn_glDeleteShader_loader (uint a00) {
  *cast(void**)&glDeleteShader_Z = glbindGetProcAddress(`glDeleteShader`);
  if (*cast(void**)&glDeleteShader_Z is null) assert(0, `OpenGL function 'glDeleteShader' not found!`);
  glDeleteShader_Z(a00,);
}
alias glDetachShader = glDetachShader_Z;
__gshared glbfn_glDetachShader glDetachShader_Z = function void (uint a00,uint a01) {
  glbfn_glDetachShader_loader(a00,a01,);
};
private void glbfn_glDetachShader_loader (uint a00,uint a01) {
  *cast(void**)&glDetachShader_Z = glbindGetProcAddress(`glDetachShader`);
  if (*cast(void**)&glDetachShader_Z is null) assert(0, `OpenGL function 'glDetachShader' not found!`);
  glDetachShader_Z(a00,a01,);
}
alias glDisableVertexAttribArray = glDisableVertexAttribArray_Z;
__gshared glbfn_glDisableVertexAttribArray glDisableVertexAttribArray_Z = function void (uint a00) {
  glbfn_glDisableVertexAttribArray_loader(a00,);
};
private void glbfn_glDisableVertexAttribArray_loader (uint a00) {
  *cast(void**)&glDisableVertexAttribArray_Z = glbindGetProcAddress(`glDisableVertexAttribArray`);
  if (*cast(void**)&glDisableVertexAttribArray_Z is null) assert(0, `OpenGL function 'glDisableVertexAttribArray' not found!`);
  glDisableVertexAttribArray_Z(a00,);
}
alias glEnableVertexAttribArray = glEnableVertexAttribArray_Z;
__gshared glbfn_glEnableVertexAttribArray glEnableVertexAttribArray_Z = function void (uint a00) {
  glbfn_glEnableVertexAttribArray_loader(a00,);
};
private void glbfn_glEnableVertexAttribArray_loader (uint a00) {
  *cast(void**)&glEnableVertexAttribArray_Z = glbindGetProcAddress(`glEnableVertexAttribArray`);
  if (*cast(void**)&glEnableVertexAttribArray_Z is null) assert(0, `OpenGL function 'glEnableVertexAttribArray' not found!`);
  glEnableVertexAttribArray_Z(a00,);
}
alias glGetActiveAttrib = glGetActiveAttrib_Z;
__gshared glbfn_glGetActiveAttrib glGetActiveAttrib_Z = function void (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  glbfn_glGetActiveAttrib_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetActiveAttrib_loader (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  *cast(void**)&glGetActiveAttrib_Z = glbindGetProcAddress(`glGetActiveAttrib`);
  if (*cast(void**)&glGetActiveAttrib_Z is null) assert(0, `OpenGL function 'glGetActiveAttrib' not found!`);
  glGetActiveAttrib_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetActiveUniform = glGetActiveUniform_Z;
__gshared glbfn_glGetActiveUniform glGetActiveUniform_Z = function void (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  glbfn_glGetActiveUniform_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetActiveUniform_loader (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  *cast(void**)&glGetActiveUniform_Z = glbindGetProcAddress(`glGetActiveUniform`);
  if (*cast(void**)&glGetActiveUniform_Z is null) assert(0, `OpenGL function 'glGetActiveUniform' not found!`);
  glGetActiveUniform_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetAttachedShaders = glGetAttachedShaders_Z;
__gshared glbfn_glGetAttachedShaders glGetAttachedShaders_Z = function void (uint a00,int a01,int* a02,uint* a03) {
  glbfn_glGetAttachedShaders_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetAttachedShaders_loader (uint a00,int a01,int* a02,uint* a03) {
  *cast(void**)&glGetAttachedShaders_Z = glbindGetProcAddress(`glGetAttachedShaders`);
  if (*cast(void**)&glGetAttachedShaders_Z is null) assert(0, `OpenGL function 'glGetAttachedShaders' not found!`);
  glGetAttachedShaders_Z(a00,a01,a02,a03,);
}
alias glGetAttribLocation = glGetAttribLocation_Z;
__gshared glbfn_glGetAttribLocation glGetAttribLocation_Z = function int (uint a00,const(char)* a01) {
  return glbfn_glGetAttribLocation_loader(a00,a01,);
};
private int glbfn_glGetAttribLocation_loader (uint a00,const(char)* a01) {
  *cast(void**)&glGetAttribLocation_Z = glbindGetProcAddress(`glGetAttribLocation`);
  if (*cast(void**)&glGetAttribLocation_Z is null) assert(0, `OpenGL function 'glGetAttribLocation' not found!`);
  return glGetAttribLocation_Z(a00,a01,);
}
alias glGetProgramiv = glGetProgramiv_Z;
__gshared glbfn_glGetProgramiv glGetProgramiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetProgramiv_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetProgramiv_Z = glbindGetProcAddress(`glGetProgramiv`);
  if (*cast(void**)&glGetProgramiv_Z is null) assert(0, `OpenGL function 'glGetProgramiv' not found!`);
  glGetProgramiv_Z(a00,a01,a02,);
}
alias glGetProgramInfoLog = glGetProgramInfoLog_Z;
__gshared glbfn_glGetProgramInfoLog glGetProgramInfoLog_Z = function void (uint a00,int a01,int* a02,char* a03) {
  glbfn_glGetProgramInfoLog_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramInfoLog_loader (uint a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetProgramInfoLog_Z = glbindGetProcAddress(`glGetProgramInfoLog`);
  if (*cast(void**)&glGetProgramInfoLog_Z is null) assert(0, `OpenGL function 'glGetProgramInfoLog' not found!`);
  glGetProgramInfoLog_Z(a00,a01,a02,a03,);
}
alias glGetShaderiv = glGetShaderiv_Z;
__gshared glbfn_glGetShaderiv glGetShaderiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetShaderiv_loader(a00,a01,a02,);
};
private void glbfn_glGetShaderiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetShaderiv_Z = glbindGetProcAddress(`glGetShaderiv`);
  if (*cast(void**)&glGetShaderiv_Z is null) assert(0, `OpenGL function 'glGetShaderiv' not found!`);
  glGetShaderiv_Z(a00,a01,a02,);
}
alias glGetShaderInfoLog = glGetShaderInfoLog_Z;
__gshared glbfn_glGetShaderInfoLog glGetShaderInfoLog_Z = function void (uint a00,int a01,int* a02,char* a03) {
  glbfn_glGetShaderInfoLog_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetShaderInfoLog_loader (uint a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetShaderInfoLog_Z = glbindGetProcAddress(`glGetShaderInfoLog`);
  if (*cast(void**)&glGetShaderInfoLog_Z is null) assert(0, `OpenGL function 'glGetShaderInfoLog' not found!`);
  glGetShaderInfoLog_Z(a00,a01,a02,a03,);
}
alias glGetShaderSource = glGetShaderSource_Z;
__gshared glbfn_glGetShaderSource glGetShaderSource_Z = function void (uint a00,int a01,int* a02,char* a03) {
  glbfn_glGetShaderSource_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetShaderSource_loader (uint a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetShaderSource_Z = glbindGetProcAddress(`glGetShaderSource`);
  if (*cast(void**)&glGetShaderSource_Z is null) assert(0, `OpenGL function 'glGetShaderSource' not found!`);
  glGetShaderSource_Z(a00,a01,a02,a03,);
}
alias glGetUniformLocation = glGetUniformLocation_Z;
__gshared glbfn_glGetUniformLocation glGetUniformLocation_Z = function int (uint a00,const(char)* a01) {
  return glbfn_glGetUniformLocation_loader(a00,a01,);
};
private int glbfn_glGetUniformLocation_loader (uint a00,const(char)* a01) {
  *cast(void**)&glGetUniformLocation_Z = glbindGetProcAddress(`glGetUniformLocation`);
  if (*cast(void**)&glGetUniformLocation_Z is null) assert(0, `OpenGL function 'glGetUniformLocation' not found!`);
  return glGetUniformLocation_Z(a00,a01,);
}
alias glGetUniformfv = glGetUniformfv_Z;
__gshared glbfn_glGetUniformfv glGetUniformfv_Z = function void (uint a00,int a01,float* a02) {
  glbfn_glGetUniformfv_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformfv_loader (uint a00,int a01,float* a02) {
  *cast(void**)&glGetUniformfv_Z = glbindGetProcAddress(`glGetUniformfv`);
  if (*cast(void**)&glGetUniformfv_Z is null) assert(0, `OpenGL function 'glGetUniformfv' not found!`);
  glGetUniformfv_Z(a00,a01,a02,);
}
alias glGetUniformiv = glGetUniformiv_Z;
__gshared glbfn_glGetUniformiv glGetUniformiv_Z = function void (uint a00,int a01,int* a02) {
  glbfn_glGetUniformiv_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformiv_loader (uint a00,int a01,int* a02) {
  *cast(void**)&glGetUniformiv_Z = glbindGetProcAddress(`glGetUniformiv`);
  if (*cast(void**)&glGetUniformiv_Z is null) assert(0, `OpenGL function 'glGetUniformiv' not found!`);
  glGetUniformiv_Z(a00,a01,a02,);
}
alias glGetVertexAttribdv = glGetVertexAttribdv_Z;
__gshared glbfn_glGetVertexAttribdv glGetVertexAttribdv_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetVertexAttribdv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribdv_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetVertexAttribdv_Z = glbindGetProcAddress(`glGetVertexAttribdv`);
  if (*cast(void**)&glGetVertexAttribdv_Z is null) assert(0, `OpenGL function 'glGetVertexAttribdv' not found!`);
  glGetVertexAttribdv_Z(a00,a01,a02,);
}
alias glGetVertexAttribfv = glGetVertexAttribfv_Z;
__gshared glbfn_glGetVertexAttribfv glGetVertexAttribfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetVertexAttribfv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetVertexAttribfv_Z = glbindGetProcAddress(`glGetVertexAttribfv`);
  if (*cast(void**)&glGetVertexAttribfv_Z is null) assert(0, `OpenGL function 'glGetVertexAttribfv' not found!`);
  glGetVertexAttribfv_Z(a00,a01,a02,);
}
alias glGetVertexAttribiv = glGetVertexAttribiv_Z;
__gshared glbfn_glGetVertexAttribiv glGetVertexAttribiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexAttribiv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexAttribiv_Z = glbindGetProcAddress(`glGetVertexAttribiv`);
  if (*cast(void**)&glGetVertexAttribiv_Z is null) assert(0, `OpenGL function 'glGetVertexAttribiv' not found!`);
  glGetVertexAttribiv_Z(a00,a01,a02,);
}
alias glGetVertexAttribPointerv = glGetVertexAttribPointerv_Z;
__gshared glbfn_glGetVertexAttribPointerv glGetVertexAttribPointerv_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetVertexAttribPointerv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribPointerv_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetVertexAttribPointerv_Z = glbindGetProcAddress(`glGetVertexAttribPointerv`);
  if (*cast(void**)&glGetVertexAttribPointerv_Z is null) assert(0, `OpenGL function 'glGetVertexAttribPointerv' not found!`);
  glGetVertexAttribPointerv_Z(a00,a01,a02,);
}
alias glIsProgram = glIsProgram_Z;
__gshared glbfn_glIsProgram glIsProgram_Z = function ubyte (uint a00) {
  return glbfn_glIsProgram_loader(a00,);
};
private ubyte glbfn_glIsProgram_loader (uint a00) {
  *cast(void**)&glIsProgram_Z = glbindGetProcAddress(`glIsProgram`);
  if (*cast(void**)&glIsProgram_Z is null) assert(0, `OpenGL function 'glIsProgram' not found!`);
  return glIsProgram_Z(a00,);
}
alias glIsShader = glIsShader_Z;
__gshared glbfn_glIsShader glIsShader_Z = function ubyte (uint a00) {
  return glbfn_glIsShader_loader(a00,);
};
private ubyte glbfn_glIsShader_loader (uint a00) {
  *cast(void**)&glIsShader_Z = glbindGetProcAddress(`glIsShader`);
  if (*cast(void**)&glIsShader_Z is null) assert(0, `OpenGL function 'glIsShader' not found!`);
  return glIsShader_Z(a00,);
}
alias glLinkProgram = glLinkProgram_Z;
__gshared glbfn_glLinkProgram glLinkProgram_Z = function void (uint a00) {
  glbfn_glLinkProgram_loader(a00,);
};
private void glbfn_glLinkProgram_loader (uint a00) {
  *cast(void**)&glLinkProgram_Z = glbindGetProcAddress(`glLinkProgram`);
  if (*cast(void**)&glLinkProgram_Z is null) assert(0, `OpenGL function 'glLinkProgram' not found!`);
  glLinkProgram_Z(a00,);
}
alias glShaderSource = glShaderSource_Z;
__gshared glbfn_glShaderSource glShaderSource_Z = function void (uint a00,int a01,const(char*)* a02,const(int)* a03) {
  glbfn_glShaderSource_loader(a00,a01,a02,a03,);
};
private void glbfn_glShaderSource_loader (uint a00,int a01,const(char*)* a02,const(int)* a03) {
  *cast(void**)&glShaderSource_Z = glbindGetProcAddress(`glShaderSource`);
  if (*cast(void**)&glShaderSource_Z is null) assert(0, `OpenGL function 'glShaderSource' not found!`);
  glShaderSource_Z(a00,a01,a02,a03,);
}
alias glUseProgram = glUseProgram_Z;
__gshared glbfn_glUseProgram glUseProgram_Z = function void (uint a00) {
  glbfn_glUseProgram_loader(a00,);
};
private void glbfn_glUseProgram_loader (uint a00) {
  *cast(void**)&glUseProgram_Z = glbindGetProcAddress(`glUseProgram`);
  if (*cast(void**)&glUseProgram_Z is null) assert(0, `OpenGL function 'glUseProgram' not found!`);
  glUseProgram_Z(a00,);
}
alias glUniform1f = glUniform1f_Z;
__gshared glbfn_glUniform1f glUniform1f_Z = function void (int a00,float a01) {
  glbfn_glUniform1f_loader(a00,a01,);
};
private void glbfn_glUniform1f_loader (int a00,float a01) {
  *cast(void**)&glUniform1f_Z = glbindGetProcAddress(`glUniform1f`);
  if (*cast(void**)&glUniform1f_Z is null) assert(0, `OpenGL function 'glUniform1f' not found!`);
  glUniform1f_Z(a00,a01,);
}
alias glUniform2f = glUniform2f_Z;
__gshared glbfn_glUniform2f glUniform2f_Z = function void (int a00,float a01,float a02) {
  glbfn_glUniform2f_loader(a00,a01,a02,);
};
private void glbfn_glUniform2f_loader (int a00,float a01,float a02) {
  *cast(void**)&glUniform2f_Z = glbindGetProcAddress(`glUniform2f`);
  if (*cast(void**)&glUniform2f_Z is null) assert(0, `OpenGL function 'glUniform2f' not found!`);
  glUniform2f_Z(a00,a01,a02,);
}
alias glUniform3f = glUniform3f_Z;
__gshared glbfn_glUniform3f glUniform3f_Z = function void (int a00,float a01,float a02,float a03) {
  glbfn_glUniform3f_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3f_loader (int a00,float a01,float a02,float a03) {
  *cast(void**)&glUniform3f_Z = glbindGetProcAddress(`glUniform3f`);
  if (*cast(void**)&glUniform3f_Z is null) assert(0, `OpenGL function 'glUniform3f' not found!`);
  glUniform3f_Z(a00,a01,a02,a03,);
}
alias glUniform4f = glUniform4f_Z;
__gshared glbfn_glUniform4f glUniform4f_Z = function void (int a00,float a01,float a02,float a03,float a04) {
  glbfn_glUniform4f_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4f_loader (int a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glUniform4f_Z = glbindGetProcAddress(`glUniform4f`);
  if (*cast(void**)&glUniform4f_Z is null) assert(0, `OpenGL function 'glUniform4f' not found!`);
  glUniform4f_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1i = glUniform1i_Z;
__gshared glbfn_glUniform1i glUniform1i_Z = function void (int a00,int a01) {
  glbfn_glUniform1i_loader(a00,a01,);
};
private void glbfn_glUniform1i_loader (int a00,int a01) {
  *cast(void**)&glUniform1i_Z = glbindGetProcAddress(`glUniform1i`);
  if (*cast(void**)&glUniform1i_Z is null) assert(0, `OpenGL function 'glUniform1i' not found!`);
  glUniform1i_Z(a00,a01,);
}
alias glUniform2i = glUniform2i_Z;
__gshared glbfn_glUniform2i glUniform2i_Z = function void (int a00,int a01,int a02) {
  glbfn_glUniform2i_loader(a00,a01,a02,);
};
private void glbfn_glUniform2i_loader (int a00,int a01,int a02) {
  *cast(void**)&glUniform2i_Z = glbindGetProcAddress(`glUniform2i`);
  if (*cast(void**)&glUniform2i_Z is null) assert(0, `OpenGL function 'glUniform2i' not found!`);
  glUniform2i_Z(a00,a01,a02,);
}
alias glUniform3i = glUniform3i_Z;
__gshared glbfn_glUniform3i glUniform3i_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glUniform3i_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3i_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glUniform3i_Z = glbindGetProcAddress(`glUniform3i`);
  if (*cast(void**)&glUniform3i_Z is null) assert(0, `OpenGL function 'glUniform3i' not found!`);
  glUniform3i_Z(a00,a01,a02,a03,);
}
alias glUniform4i = glUniform4i_Z;
__gshared glbfn_glUniform4i glUniform4i_Z = function void (int a00,int a01,int a02,int a03,int a04) {
  glbfn_glUniform4i_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4i_loader (int a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glUniform4i_Z = glbindGetProcAddress(`glUniform4i`);
  if (*cast(void**)&glUniform4i_Z is null) assert(0, `OpenGL function 'glUniform4i' not found!`);
  glUniform4i_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1fv = glUniform1fv_Z;
__gshared glbfn_glUniform1fv glUniform1fv_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform1fv_loader(a00,a01,a02,);
};
private void glbfn_glUniform1fv_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform1fv_Z = glbindGetProcAddress(`glUniform1fv`);
  if (*cast(void**)&glUniform1fv_Z is null) assert(0, `OpenGL function 'glUniform1fv' not found!`);
  glUniform1fv_Z(a00,a01,a02,);
}
alias glUniform2fv = glUniform2fv_Z;
__gshared glbfn_glUniform2fv glUniform2fv_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform2fv_loader(a00,a01,a02,);
};
private void glbfn_glUniform2fv_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform2fv_Z = glbindGetProcAddress(`glUniform2fv`);
  if (*cast(void**)&glUniform2fv_Z is null) assert(0, `OpenGL function 'glUniform2fv' not found!`);
  glUniform2fv_Z(a00,a01,a02,);
}
alias glUniform3fv = glUniform3fv_Z;
__gshared glbfn_glUniform3fv glUniform3fv_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform3fv_loader(a00,a01,a02,);
};
private void glbfn_glUniform3fv_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform3fv_Z = glbindGetProcAddress(`glUniform3fv`);
  if (*cast(void**)&glUniform3fv_Z is null) assert(0, `OpenGL function 'glUniform3fv' not found!`);
  glUniform3fv_Z(a00,a01,a02,);
}
alias glUniform4fv = glUniform4fv_Z;
__gshared glbfn_glUniform4fv glUniform4fv_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform4fv_loader(a00,a01,a02,);
};
private void glbfn_glUniform4fv_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform4fv_Z = glbindGetProcAddress(`glUniform4fv`);
  if (*cast(void**)&glUniform4fv_Z is null) assert(0, `OpenGL function 'glUniform4fv' not found!`);
  glUniform4fv_Z(a00,a01,a02,);
}
alias glUniform1iv = glUniform1iv_Z;
__gshared glbfn_glUniform1iv glUniform1iv_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform1iv_loader(a00,a01,a02,);
};
private void glbfn_glUniform1iv_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform1iv_Z = glbindGetProcAddress(`glUniform1iv`);
  if (*cast(void**)&glUniform1iv_Z is null) assert(0, `OpenGL function 'glUniform1iv' not found!`);
  glUniform1iv_Z(a00,a01,a02,);
}
alias glUniform2iv = glUniform2iv_Z;
__gshared glbfn_glUniform2iv glUniform2iv_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform2iv_loader(a00,a01,a02,);
};
private void glbfn_glUniform2iv_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform2iv_Z = glbindGetProcAddress(`glUniform2iv`);
  if (*cast(void**)&glUniform2iv_Z is null) assert(0, `OpenGL function 'glUniform2iv' not found!`);
  glUniform2iv_Z(a00,a01,a02,);
}
alias glUniform3iv = glUniform3iv_Z;
__gshared glbfn_glUniform3iv glUniform3iv_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform3iv_loader(a00,a01,a02,);
};
private void glbfn_glUniform3iv_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform3iv_Z = glbindGetProcAddress(`glUniform3iv`);
  if (*cast(void**)&glUniform3iv_Z is null) assert(0, `OpenGL function 'glUniform3iv' not found!`);
  glUniform3iv_Z(a00,a01,a02,);
}
alias glUniform4iv = glUniform4iv_Z;
__gshared glbfn_glUniform4iv glUniform4iv_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform4iv_loader(a00,a01,a02,);
};
private void glbfn_glUniform4iv_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform4iv_Z = glbindGetProcAddress(`glUniform4iv`);
  if (*cast(void**)&glUniform4iv_Z is null) assert(0, `OpenGL function 'glUniform4iv' not found!`);
  glUniform4iv_Z(a00,a01,a02,);
}
alias glUniformMatrix2fv = glUniformMatrix2fv_Z;
__gshared glbfn_glUniformMatrix2fv glUniformMatrix2fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix2fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix2fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix2fv_Z = glbindGetProcAddress(`glUniformMatrix2fv`);
  if (*cast(void**)&glUniformMatrix2fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix2fv' not found!`);
  glUniformMatrix2fv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix3fv = glUniformMatrix3fv_Z;
__gshared glbfn_glUniformMatrix3fv glUniformMatrix3fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix3fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix3fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix3fv_Z = glbindGetProcAddress(`glUniformMatrix3fv`);
  if (*cast(void**)&glUniformMatrix3fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix3fv' not found!`);
  glUniformMatrix3fv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix4fv = glUniformMatrix4fv_Z;
__gshared glbfn_glUniformMatrix4fv glUniformMatrix4fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix4fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix4fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix4fv_Z = glbindGetProcAddress(`glUniformMatrix4fv`);
  if (*cast(void**)&glUniformMatrix4fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix4fv' not found!`);
  glUniformMatrix4fv_Z(a00,a01,a02,a03,);
}
alias glValidateProgram = glValidateProgram_Z;
__gshared glbfn_glValidateProgram glValidateProgram_Z = function void (uint a00) {
  glbfn_glValidateProgram_loader(a00,);
};
private void glbfn_glValidateProgram_loader (uint a00) {
  *cast(void**)&glValidateProgram_Z = glbindGetProcAddress(`glValidateProgram`);
  if (*cast(void**)&glValidateProgram_Z is null) assert(0, `OpenGL function 'glValidateProgram' not found!`);
  glValidateProgram_Z(a00,);
}
alias glVertexAttrib1d = glVertexAttrib1d_Z;
__gshared glbfn_glVertexAttrib1d glVertexAttrib1d_Z = function void (uint a00,double a01) {
  glbfn_glVertexAttrib1d_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1d_loader (uint a00,double a01) {
  *cast(void**)&glVertexAttrib1d_Z = glbindGetProcAddress(`glVertexAttrib1d`);
  if (*cast(void**)&glVertexAttrib1d_Z is null) assert(0, `OpenGL function 'glVertexAttrib1d' not found!`);
  glVertexAttrib1d_Z(a00,a01,);
}
alias glVertexAttrib1dv = glVertexAttrib1dv_Z;
__gshared glbfn_glVertexAttrib1dv glVertexAttrib1dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib1dv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib1dv_Z = glbindGetProcAddress(`glVertexAttrib1dv`);
  if (*cast(void**)&glVertexAttrib1dv_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dv' not found!`);
  glVertexAttrib1dv_Z(a00,a01,);
}
alias glVertexAttrib1f = glVertexAttrib1f_Z;
__gshared glbfn_glVertexAttrib1f glVertexAttrib1f_Z = function void (uint a00,float a01) {
  glbfn_glVertexAttrib1f_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1f_loader (uint a00,float a01) {
  *cast(void**)&glVertexAttrib1f_Z = glbindGetProcAddress(`glVertexAttrib1f`);
  if (*cast(void**)&glVertexAttrib1f_Z is null) assert(0, `OpenGL function 'glVertexAttrib1f' not found!`);
  glVertexAttrib1f_Z(a00,a01,);
}
alias glVertexAttrib1fv = glVertexAttrib1fv_Z;
__gshared glbfn_glVertexAttrib1fv glVertexAttrib1fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib1fv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib1fv_Z = glbindGetProcAddress(`glVertexAttrib1fv`);
  if (*cast(void**)&glVertexAttrib1fv_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fv' not found!`);
  glVertexAttrib1fv_Z(a00,a01,);
}
alias glVertexAttrib1s = glVertexAttrib1s_Z;
__gshared glbfn_glVertexAttrib1s glVertexAttrib1s_Z = function void (uint a00,short a01) {
  glbfn_glVertexAttrib1s_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1s_loader (uint a00,short a01) {
  *cast(void**)&glVertexAttrib1s_Z = glbindGetProcAddress(`glVertexAttrib1s`);
  if (*cast(void**)&glVertexAttrib1s_Z is null) assert(0, `OpenGL function 'glVertexAttrib1s' not found!`);
  glVertexAttrib1s_Z(a00,a01,);
}
alias glVertexAttrib1sv = glVertexAttrib1sv_Z;
__gshared glbfn_glVertexAttrib1sv glVertexAttrib1sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib1sv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib1sv_Z = glbindGetProcAddress(`glVertexAttrib1sv`);
  if (*cast(void**)&glVertexAttrib1sv_Z is null) assert(0, `OpenGL function 'glVertexAttrib1sv' not found!`);
  glVertexAttrib1sv_Z(a00,a01,);
}
alias glVertexAttrib2d = glVertexAttrib2d_Z;
__gshared glbfn_glVertexAttrib2d glVertexAttrib2d_Z = function void (uint a00,double a01,double a02) {
  glbfn_glVertexAttrib2d_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2d_loader (uint a00,double a01,double a02) {
  *cast(void**)&glVertexAttrib2d_Z = glbindGetProcAddress(`glVertexAttrib2d`);
  if (*cast(void**)&glVertexAttrib2d_Z is null) assert(0, `OpenGL function 'glVertexAttrib2d' not found!`);
  glVertexAttrib2d_Z(a00,a01,a02,);
}
alias glVertexAttrib2dv = glVertexAttrib2dv_Z;
__gshared glbfn_glVertexAttrib2dv glVertexAttrib2dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib2dv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib2dv_Z = glbindGetProcAddress(`glVertexAttrib2dv`);
  if (*cast(void**)&glVertexAttrib2dv_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dv' not found!`);
  glVertexAttrib2dv_Z(a00,a01,);
}
alias glVertexAttrib2f = glVertexAttrib2f_Z;
__gshared glbfn_glVertexAttrib2f glVertexAttrib2f_Z = function void (uint a00,float a01,float a02) {
  glbfn_glVertexAttrib2f_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2f_loader (uint a00,float a01,float a02) {
  *cast(void**)&glVertexAttrib2f_Z = glbindGetProcAddress(`glVertexAttrib2f`);
  if (*cast(void**)&glVertexAttrib2f_Z is null) assert(0, `OpenGL function 'glVertexAttrib2f' not found!`);
  glVertexAttrib2f_Z(a00,a01,a02,);
}
alias glVertexAttrib2fv = glVertexAttrib2fv_Z;
__gshared glbfn_glVertexAttrib2fv glVertexAttrib2fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib2fv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib2fv_Z = glbindGetProcAddress(`glVertexAttrib2fv`);
  if (*cast(void**)&glVertexAttrib2fv_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fv' not found!`);
  glVertexAttrib2fv_Z(a00,a01,);
}
alias glVertexAttrib2s = glVertexAttrib2s_Z;
__gshared glbfn_glVertexAttrib2s glVertexAttrib2s_Z = function void (uint a00,short a01,short a02) {
  glbfn_glVertexAttrib2s_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2s_loader (uint a00,short a01,short a02) {
  *cast(void**)&glVertexAttrib2s_Z = glbindGetProcAddress(`glVertexAttrib2s`);
  if (*cast(void**)&glVertexAttrib2s_Z is null) assert(0, `OpenGL function 'glVertexAttrib2s' not found!`);
  glVertexAttrib2s_Z(a00,a01,a02,);
}
alias glVertexAttrib2sv = glVertexAttrib2sv_Z;
__gshared glbfn_glVertexAttrib2sv glVertexAttrib2sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib2sv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib2sv_Z = glbindGetProcAddress(`glVertexAttrib2sv`);
  if (*cast(void**)&glVertexAttrib2sv_Z is null) assert(0, `OpenGL function 'glVertexAttrib2sv' not found!`);
  glVertexAttrib2sv_Z(a00,a01,);
}
alias glVertexAttrib3d = glVertexAttrib3d_Z;
__gshared glbfn_glVertexAttrib3d glVertexAttrib3d_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glVertexAttrib3d_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3d_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glVertexAttrib3d_Z = glbindGetProcAddress(`glVertexAttrib3d`);
  if (*cast(void**)&glVertexAttrib3d_Z is null) assert(0, `OpenGL function 'glVertexAttrib3d' not found!`);
  glVertexAttrib3d_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3dv = glVertexAttrib3dv_Z;
__gshared glbfn_glVertexAttrib3dv glVertexAttrib3dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib3dv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib3dv_Z = glbindGetProcAddress(`glVertexAttrib3dv`);
  if (*cast(void**)&glVertexAttrib3dv_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dv' not found!`);
  glVertexAttrib3dv_Z(a00,a01,);
}
alias glVertexAttrib3f = glVertexAttrib3f_Z;
__gshared glbfn_glVertexAttrib3f glVertexAttrib3f_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glVertexAttrib3f_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3f_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glVertexAttrib3f_Z = glbindGetProcAddress(`glVertexAttrib3f`);
  if (*cast(void**)&glVertexAttrib3f_Z is null) assert(0, `OpenGL function 'glVertexAttrib3f' not found!`);
  glVertexAttrib3f_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3fv = glVertexAttrib3fv_Z;
__gshared glbfn_glVertexAttrib3fv glVertexAttrib3fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib3fv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib3fv_Z = glbindGetProcAddress(`glVertexAttrib3fv`);
  if (*cast(void**)&glVertexAttrib3fv_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fv' not found!`);
  glVertexAttrib3fv_Z(a00,a01,);
}
alias glVertexAttrib3s = glVertexAttrib3s_Z;
__gshared glbfn_glVertexAttrib3s glVertexAttrib3s_Z = function void (uint a00,short a01,short a02,short a03) {
  glbfn_glVertexAttrib3s_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3s_loader (uint a00,short a01,short a02,short a03) {
  *cast(void**)&glVertexAttrib3s_Z = glbindGetProcAddress(`glVertexAttrib3s`);
  if (*cast(void**)&glVertexAttrib3s_Z is null) assert(0, `OpenGL function 'glVertexAttrib3s' not found!`);
  glVertexAttrib3s_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3sv = glVertexAttrib3sv_Z;
__gshared glbfn_glVertexAttrib3sv glVertexAttrib3sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib3sv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib3sv_Z = glbindGetProcAddress(`glVertexAttrib3sv`);
  if (*cast(void**)&glVertexAttrib3sv_Z is null) assert(0, `OpenGL function 'glVertexAttrib3sv' not found!`);
  glVertexAttrib3sv_Z(a00,a01,);
}
alias glVertexAttrib4Nbv = glVertexAttrib4Nbv_Z;
__gshared glbfn_glVertexAttrib4Nbv glVertexAttrib4Nbv_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glVertexAttrib4Nbv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4Nbv_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glVertexAttrib4Nbv_Z = glbindGetProcAddress(`glVertexAttrib4Nbv`);
  if (*cast(void**)&glVertexAttrib4Nbv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nbv' not found!`);
  glVertexAttrib4Nbv_Z(a00,a01,);
}
alias glVertexAttrib4Niv = glVertexAttrib4Niv_Z;
__gshared glbfn_glVertexAttrib4Niv glVertexAttrib4Niv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttrib4Niv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4Niv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttrib4Niv_Z = glbindGetProcAddress(`glVertexAttrib4Niv`);
  if (*cast(void**)&glVertexAttrib4Niv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Niv' not found!`);
  glVertexAttrib4Niv_Z(a00,a01,);
}
alias glVertexAttrib4Nsv = glVertexAttrib4Nsv_Z;
__gshared glbfn_glVertexAttrib4Nsv glVertexAttrib4Nsv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib4Nsv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4Nsv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib4Nsv_Z = glbindGetProcAddress(`glVertexAttrib4Nsv`);
  if (*cast(void**)&glVertexAttrib4Nsv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nsv' not found!`);
  glVertexAttrib4Nsv_Z(a00,a01,);
}
alias glVertexAttrib4Nub = glVertexAttrib4Nub_Z;
__gshared glbfn_glVertexAttrib4Nub glVertexAttrib4Nub_Z = function void (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  glbfn_glVertexAttrib4Nub_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4Nub_loader (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  *cast(void**)&glVertexAttrib4Nub_Z = glbindGetProcAddress(`glVertexAttrib4Nub`);
  if (*cast(void**)&glVertexAttrib4Nub_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nub' not found!`);
  glVertexAttrib4Nub_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4Nubv = glVertexAttrib4Nubv_Z;
__gshared glbfn_glVertexAttrib4Nubv glVertexAttrib4Nubv_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVertexAttrib4Nubv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4Nubv_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVertexAttrib4Nubv_Z = glbindGetProcAddress(`glVertexAttrib4Nubv`);
  if (*cast(void**)&glVertexAttrib4Nubv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nubv' not found!`);
  glVertexAttrib4Nubv_Z(a00,a01,);
}
alias glVertexAttrib4Nuiv = glVertexAttrib4Nuiv_Z;
__gshared glbfn_glVertexAttrib4Nuiv glVertexAttrib4Nuiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttrib4Nuiv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4Nuiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttrib4Nuiv_Z = glbindGetProcAddress(`glVertexAttrib4Nuiv`);
  if (*cast(void**)&glVertexAttrib4Nuiv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nuiv' not found!`);
  glVertexAttrib4Nuiv_Z(a00,a01,);
}
alias glVertexAttrib4Nusv = glVertexAttrib4Nusv_Z;
__gshared glbfn_glVertexAttrib4Nusv glVertexAttrib4Nusv_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib4Nusv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4Nusv_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib4Nusv_Z = glbindGetProcAddress(`glVertexAttrib4Nusv`);
  if (*cast(void**)&glVertexAttrib4Nusv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nusv' not found!`);
  glVertexAttrib4Nusv_Z(a00,a01,);
}
alias glVertexAttrib4bv = glVertexAttrib4bv_Z;
__gshared glbfn_glVertexAttrib4bv glVertexAttrib4bv_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glVertexAttrib4bv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4bv_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glVertexAttrib4bv_Z = glbindGetProcAddress(`glVertexAttrib4bv`);
  if (*cast(void**)&glVertexAttrib4bv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4bv' not found!`);
  glVertexAttrib4bv_Z(a00,a01,);
}
alias glVertexAttrib4d = glVertexAttrib4d_Z;
__gshared glbfn_glVertexAttrib4d glVertexAttrib4d_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glVertexAttrib4d_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4d_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glVertexAttrib4d_Z = glbindGetProcAddress(`glVertexAttrib4d`);
  if (*cast(void**)&glVertexAttrib4d_Z is null) assert(0, `OpenGL function 'glVertexAttrib4d' not found!`);
  glVertexAttrib4d_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4dv = glVertexAttrib4dv_Z;
__gshared glbfn_glVertexAttrib4dv glVertexAttrib4dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib4dv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib4dv_Z = glbindGetProcAddress(`glVertexAttrib4dv`);
  if (*cast(void**)&glVertexAttrib4dv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dv' not found!`);
  glVertexAttrib4dv_Z(a00,a01,);
}
alias glVertexAttrib4f = glVertexAttrib4f_Z;
__gshared glbfn_glVertexAttrib4f glVertexAttrib4f_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glVertexAttrib4f_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4f_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glVertexAttrib4f_Z = glbindGetProcAddress(`glVertexAttrib4f`);
  if (*cast(void**)&glVertexAttrib4f_Z is null) assert(0, `OpenGL function 'glVertexAttrib4f' not found!`);
  glVertexAttrib4f_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4fv = glVertexAttrib4fv_Z;
__gshared glbfn_glVertexAttrib4fv glVertexAttrib4fv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib4fv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4fv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib4fv_Z = glbindGetProcAddress(`glVertexAttrib4fv`);
  if (*cast(void**)&glVertexAttrib4fv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fv' not found!`);
  glVertexAttrib4fv_Z(a00,a01,);
}
alias glVertexAttrib4iv = glVertexAttrib4iv_Z;
__gshared glbfn_glVertexAttrib4iv glVertexAttrib4iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttrib4iv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttrib4iv_Z = glbindGetProcAddress(`glVertexAttrib4iv`);
  if (*cast(void**)&glVertexAttrib4iv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4iv' not found!`);
  glVertexAttrib4iv_Z(a00,a01,);
}
alias glVertexAttrib4s = glVertexAttrib4s_Z;
__gshared glbfn_glVertexAttrib4s glVertexAttrib4s_Z = function void (uint a00,short a01,short a02,short a03,short a04) {
  glbfn_glVertexAttrib4s_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4s_loader (uint a00,short a01,short a02,short a03,short a04) {
  *cast(void**)&glVertexAttrib4s_Z = glbindGetProcAddress(`glVertexAttrib4s`);
  if (*cast(void**)&glVertexAttrib4s_Z is null) assert(0, `OpenGL function 'glVertexAttrib4s' not found!`);
  glVertexAttrib4s_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4sv = glVertexAttrib4sv_Z;
__gshared glbfn_glVertexAttrib4sv glVertexAttrib4sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib4sv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib4sv_Z = glbindGetProcAddress(`glVertexAttrib4sv`);
  if (*cast(void**)&glVertexAttrib4sv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4sv' not found!`);
  glVertexAttrib4sv_Z(a00,a01,);
}
alias glVertexAttrib4ubv = glVertexAttrib4ubv_Z;
__gshared glbfn_glVertexAttrib4ubv glVertexAttrib4ubv_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVertexAttrib4ubv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4ubv_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVertexAttrib4ubv_Z = glbindGetProcAddress(`glVertexAttrib4ubv`);
  if (*cast(void**)&glVertexAttrib4ubv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubv' not found!`);
  glVertexAttrib4ubv_Z(a00,a01,);
}
alias glVertexAttrib4uiv = glVertexAttrib4uiv_Z;
__gshared glbfn_glVertexAttrib4uiv glVertexAttrib4uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttrib4uiv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttrib4uiv_Z = glbindGetProcAddress(`glVertexAttrib4uiv`);
  if (*cast(void**)&glVertexAttrib4uiv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4uiv' not found!`);
  glVertexAttrib4uiv_Z(a00,a01,);
}
alias glVertexAttrib4usv = glVertexAttrib4usv_Z;
__gshared glbfn_glVertexAttrib4usv glVertexAttrib4usv_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib4usv_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4usv_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib4usv_Z = glbindGetProcAddress(`glVertexAttrib4usv`);
  if (*cast(void**)&glVertexAttrib4usv_Z is null) assert(0, `OpenGL function 'glVertexAttrib4usv' not found!`);
  glVertexAttrib4usv_Z(a00,a01,);
}
alias glVertexAttribPointer = glVertexAttribPointer_Z;
__gshared glbfn_glVertexAttribPointer glVertexAttribPointer_Z = function void (uint a00,int a01,uint a02,ubyte a03,int a04,const(void)* a05) {
  glbfn_glVertexAttribPointer_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexAttribPointer_loader (uint a00,int a01,uint a02,ubyte a03,int a04,const(void)* a05) {
  *cast(void**)&glVertexAttribPointer_Z = glbindGetProcAddress(`glVertexAttribPointer`);
  if (*cast(void**)&glVertexAttribPointer_Z is null) assert(0, `OpenGL function 'glVertexAttribPointer' not found!`);
  glVertexAttribPointer_Z(a00,a01,a02,a03,a04,a05,);
}
alias glUniformMatrix2x3fv = glUniformMatrix2x3fv_Z;
__gshared glbfn_glUniformMatrix2x3fv glUniformMatrix2x3fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix2x3fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix2x3fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix2x3fv_Z = glbindGetProcAddress(`glUniformMatrix2x3fv`);
  if (*cast(void**)&glUniformMatrix2x3fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x3fv' not found!`);
  glUniformMatrix2x3fv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix3x2fv = glUniformMatrix3x2fv_Z;
__gshared glbfn_glUniformMatrix3x2fv glUniformMatrix3x2fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix3x2fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix3x2fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix3x2fv_Z = glbindGetProcAddress(`glUniformMatrix3x2fv`);
  if (*cast(void**)&glUniformMatrix3x2fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x2fv' not found!`);
  glUniformMatrix3x2fv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix2x4fv = glUniformMatrix2x4fv_Z;
__gshared glbfn_glUniformMatrix2x4fv glUniformMatrix2x4fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix2x4fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix2x4fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix2x4fv_Z = glbindGetProcAddress(`glUniformMatrix2x4fv`);
  if (*cast(void**)&glUniformMatrix2x4fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x4fv' not found!`);
  glUniformMatrix2x4fv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix4x2fv = glUniformMatrix4x2fv_Z;
__gshared glbfn_glUniformMatrix4x2fv glUniformMatrix4x2fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix4x2fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix4x2fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix4x2fv_Z = glbindGetProcAddress(`glUniformMatrix4x2fv`);
  if (*cast(void**)&glUniformMatrix4x2fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x2fv' not found!`);
  glUniformMatrix4x2fv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix3x4fv = glUniformMatrix3x4fv_Z;
__gshared glbfn_glUniformMatrix3x4fv glUniformMatrix3x4fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix3x4fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix3x4fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix3x4fv_Z = glbindGetProcAddress(`glUniformMatrix3x4fv`);
  if (*cast(void**)&glUniformMatrix3x4fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x4fv' not found!`);
  glUniformMatrix3x4fv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix4x3fv = glUniformMatrix4x3fv_Z;
__gshared glbfn_glUniformMatrix4x3fv glUniformMatrix4x3fv_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix4x3fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix4x3fv_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix4x3fv_Z = glbindGetProcAddress(`glUniformMatrix4x3fv`);
  if (*cast(void**)&glUniformMatrix4x3fv_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x3fv' not found!`);
  glUniformMatrix4x3fv_Z(a00,a01,a02,a03,);
}
alias glColorMaski = glColorMaski_Z;
__gshared glbfn_glColorMaski glColorMaski_Z = function void (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  glbfn_glColorMaski_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glColorMaski_loader (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  *cast(void**)&glColorMaski_Z = glbindGetProcAddress(`glColorMaski`);
  if (*cast(void**)&glColorMaski_Z is null) assert(0, `OpenGL function 'glColorMaski' not found!`);
  glColorMaski_Z(a00,a01,a02,a03,a04,);
}
alias glGetBooleani_v = glGetBooleani_v_Z;
__gshared glbfn_glGetBooleani_v glGetBooleani_v_Z = function void (uint a00,uint a01,ubyte* a02) {
  glbfn_glGetBooleani_v_loader(a00,a01,a02,);
};
private void glbfn_glGetBooleani_v_loader (uint a00,uint a01,ubyte* a02) {
  *cast(void**)&glGetBooleani_v_Z = glbindGetProcAddress(`glGetBooleani_v`);
  if (*cast(void**)&glGetBooleani_v_Z is null) assert(0, `OpenGL function 'glGetBooleani_v' not found!`);
  glGetBooleani_v_Z(a00,a01,a02,);
}
alias glGetIntegeri_v = glGetIntegeri_v_Z;
__gshared glbfn_glGetIntegeri_v glGetIntegeri_v_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetIntegeri_v_loader(a00,a01,a02,);
};
private void glbfn_glGetIntegeri_v_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetIntegeri_v_Z = glbindGetProcAddress(`glGetIntegeri_v`);
  if (*cast(void**)&glGetIntegeri_v_Z is null) assert(0, `OpenGL function 'glGetIntegeri_v' not found!`);
  glGetIntegeri_v_Z(a00,a01,a02,);
}
alias glEnablei = glEnablei_Z;
__gshared glbfn_glEnablei glEnablei_Z = function void (uint a00,uint a01) {
  glbfn_glEnablei_loader(a00,a01,);
};
private void glbfn_glEnablei_loader (uint a00,uint a01) {
  *cast(void**)&glEnablei_Z = glbindGetProcAddress(`glEnablei`);
  if (*cast(void**)&glEnablei_Z is null) assert(0, `OpenGL function 'glEnablei' not found!`);
  glEnablei_Z(a00,a01,);
}
alias glDisablei = glDisablei_Z;
__gshared glbfn_glDisablei glDisablei_Z = function void (uint a00,uint a01) {
  glbfn_glDisablei_loader(a00,a01,);
};
private void glbfn_glDisablei_loader (uint a00,uint a01) {
  *cast(void**)&glDisablei_Z = glbindGetProcAddress(`glDisablei`);
  if (*cast(void**)&glDisablei_Z is null) assert(0, `OpenGL function 'glDisablei' not found!`);
  glDisablei_Z(a00,a01,);
}
alias glIsEnabledi = glIsEnabledi_Z;
__gshared glbfn_glIsEnabledi glIsEnabledi_Z = function ubyte (uint a00,uint a01) {
  return glbfn_glIsEnabledi_loader(a00,a01,);
};
private ubyte glbfn_glIsEnabledi_loader (uint a00,uint a01) {
  *cast(void**)&glIsEnabledi_Z = glbindGetProcAddress(`glIsEnabledi`);
  if (*cast(void**)&glIsEnabledi_Z is null) assert(0, `OpenGL function 'glIsEnabledi' not found!`);
  return glIsEnabledi_Z(a00,a01,);
}
alias glBeginTransformFeedback = glBeginTransformFeedback_Z;
__gshared glbfn_glBeginTransformFeedback glBeginTransformFeedback_Z = function void (uint a00) {
  glbfn_glBeginTransformFeedback_loader(a00,);
};
private void glbfn_glBeginTransformFeedback_loader (uint a00) {
  *cast(void**)&glBeginTransformFeedback_Z = glbindGetProcAddress(`glBeginTransformFeedback`);
  if (*cast(void**)&glBeginTransformFeedback_Z is null) assert(0, `OpenGL function 'glBeginTransformFeedback' not found!`);
  glBeginTransformFeedback_Z(a00,);
}
alias glEndTransformFeedback = glEndTransformFeedback_Z;
__gshared glbfn_glEndTransformFeedback glEndTransformFeedback_Z = function void () {
  glbfn_glEndTransformFeedback_loader();
};
private void glbfn_glEndTransformFeedback_loader () {
  *cast(void**)&glEndTransformFeedback_Z = glbindGetProcAddress(`glEndTransformFeedback`);
  if (*cast(void**)&glEndTransformFeedback_Z is null) assert(0, `OpenGL function 'glEndTransformFeedback' not found!`);
  glEndTransformFeedback_Z();
}
alias glBindBufferRange = glBindBufferRange_Z;
__gshared glbfn_glBindBufferRange glBindBufferRange_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glBindBufferRange_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBindBufferRange_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glBindBufferRange_Z = glbindGetProcAddress(`glBindBufferRange`);
  if (*cast(void**)&glBindBufferRange_Z is null) assert(0, `OpenGL function 'glBindBufferRange' not found!`);
  glBindBufferRange_Z(a00,a01,a02,a03,a04,);
}
alias glBindBufferBase = glBindBufferBase_Z;
__gshared glbfn_glBindBufferBase glBindBufferBase_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBindBufferBase_loader(a00,a01,a02,);
};
private void glbfn_glBindBufferBase_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBindBufferBase_Z = glbindGetProcAddress(`glBindBufferBase`);
  if (*cast(void**)&glBindBufferBase_Z is null) assert(0, `OpenGL function 'glBindBufferBase' not found!`);
  glBindBufferBase_Z(a00,a01,a02,);
}
alias glTransformFeedbackVaryings = glTransformFeedbackVaryings_Z;
__gshared glbfn_glTransformFeedbackVaryings glTransformFeedbackVaryings_Z = function void (uint a00,int a01,const(char*)* a02,uint a03) {
  glbfn_glTransformFeedbackVaryings_loader(a00,a01,a02,a03,);
};
private void glbfn_glTransformFeedbackVaryings_loader (uint a00,int a01,const(char*)* a02,uint a03) {
  *cast(void**)&glTransformFeedbackVaryings_Z = glbindGetProcAddress(`glTransformFeedbackVaryings`);
  if (*cast(void**)&glTransformFeedbackVaryings_Z is null) assert(0, `OpenGL function 'glTransformFeedbackVaryings' not found!`);
  glTransformFeedbackVaryings_Z(a00,a01,a02,a03,);
}
alias glGetTransformFeedbackVarying = glGetTransformFeedbackVarying_Z;
__gshared glbfn_glGetTransformFeedbackVarying glGetTransformFeedbackVarying_Z = function void (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  glbfn_glGetTransformFeedbackVarying_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetTransformFeedbackVarying_loader (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  *cast(void**)&glGetTransformFeedbackVarying_Z = glbindGetProcAddress(`glGetTransformFeedbackVarying`);
  if (*cast(void**)&glGetTransformFeedbackVarying_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackVarying' not found!`);
  glGetTransformFeedbackVarying_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glClampColor = glClampColor_Z;
__gshared glbfn_glClampColor glClampColor_Z = function void (uint a00,uint a01) {
  glbfn_glClampColor_loader(a00,a01,);
};
private void glbfn_glClampColor_loader (uint a00,uint a01) {
  *cast(void**)&glClampColor_Z = glbindGetProcAddress(`glClampColor`);
  if (*cast(void**)&glClampColor_Z is null) assert(0, `OpenGL function 'glClampColor' not found!`);
  glClampColor_Z(a00,a01,);
}
alias glBeginConditionalRender = glBeginConditionalRender_Z;
__gshared glbfn_glBeginConditionalRender glBeginConditionalRender_Z = function void (uint a00,uint a01) {
  glbfn_glBeginConditionalRender_loader(a00,a01,);
};
private void glbfn_glBeginConditionalRender_loader (uint a00,uint a01) {
  *cast(void**)&glBeginConditionalRender_Z = glbindGetProcAddress(`glBeginConditionalRender`);
  if (*cast(void**)&glBeginConditionalRender_Z is null) assert(0, `OpenGL function 'glBeginConditionalRender' not found!`);
  glBeginConditionalRender_Z(a00,a01,);
}
alias glEndConditionalRender = glEndConditionalRender_Z;
__gshared glbfn_glEndConditionalRender glEndConditionalRender_Z = function void () {
  glbfn_glEndConditionalRender_loader();
};
private void glbfn_glEndConditionalRender_loader () {
  *cast(void**)&glEndConditionalRender_Z = glbindGetProcAddress(`glEndConditionalRender`);
  if (*cast(void**)&glEndConditionalRender_Z is null) assert(0, `OpenGL function 'glEndConditionalRender' not found!`);
  glEndConditionalRender_Z();
}
alias glVertexAttribIPointer = glVertexAttribIPointer_Z;
__gshared glbfn_glVertexAttribIPointer glVertexAttribIPointer_Z = function void (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  glbfn_glVertexAttribIPointer_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribIPointer_loader (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  *cast(void**)&glVertexAttribIPointer_Z = glbindGetProcAddress(`glVertexAttribIPointer`);
  if (*cast(void**)&glVertexAttribIPointer_Z is null) assert(0, `OpenGL function 'glVertexAttribIPointer' not found!`);
  glVertexAttribIPointer_Z(a00,a01,a02,a03,a04,);
}
alias glGetVertexAttribIiv = glGetVertexAttribIiv_Z;
__gshared glbfn_glGetVertexAttribIiv glGetVertexAttribIiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexAttribIiv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribIiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexAttribIiv_Z = glbindGetProcAddress(`glGetVertexAttribIiv`);
  if (*cast(void**)&glGetVertexAttribIiv_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIiv' not found!`);
  glGetVertexAttribIiv_Z(a00,a01,a02,);
}
alias glGetVertexAttribIuiv = glGetVertexAttribIuiv_Z;
__gshared glbfn_glGetVertexAttribIuiv glGetVertexAttribIuiv_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetVertexAttribIuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribIuiv_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetVertexAttribIuiv_Z = glbindGetProcAddress(`glGetVertexAttribIuiv`);
  if (*cast(void**)&glGetVertexAttribIuiv_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIuiv' not found!`);
  glGetVertexAttribIuiv_Z(a00,a01,a02,);
}
alias glVertexAttribI1i = glVertexAttribI1i_Z;
__gshared glbfn_glVertexAttribI1i glVertexAttribI1i_Z = function void (uint a00,int a01) {
  glbfn_glVertexAttribI1i_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1i_loader (uint a00,int a01) {
  *cast(void**)&glVertexAttribI1i_Z = glbindGetProcAddress(`glVertexAttribI1i`);
  if (*cast(void**)&glVertexAttribI1i_Z is null) assert(0, `OpenGL function 'glVertexAttribI1i' not found!`);
  glVertexAttribI1i_Z(a00,a01,);
}
alias glVertexAttribI2i = glVertexAttribI2i_Z;
__gshared glbfn_glVertexAttribI2i glVertexAttribI2i_Z = function void (uint a00,int a01,int a02) {
  glbfn_glVertexAttribI2i_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribI2i_loader (uint a00,int a01,int a02) {
  *cast(void**)&glVertexAttribI2i_Z = glbindGetProcAddress(`glVertexAttribI2i`);
  if (*cast(void**)&glVertexAttribI2i_Z is null) assert(0, `OpenGL function 'glVertexAttribI2i' not found!`);
  glVertexAttribI2i_Z(a00,a01,a02,);
}
alias glVertexAttribI3i = glVertexAttribI3i_Z;
__gshared glbfn_glVertexAttribI3i glVertexAttribI3i_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glVertexAttribI3i_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribI3i_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glVertexAttribI3i_Z = glbindGetProcAddress(`glVertexAttribI3i`);
  if (*cast(void**)&glVertexAttribI3i_Z is null) assert(0, `OpenGL function 'glVertexAttribI3i' not found!`);
  glVertexAttribI3i_Z(a00,a01,a02,a03,);
}
alias glVertexAttribI4i = glVertexAttribI4i_Z;
__gshared glbfn_glVertexAttribI4i glVertexAttribI4i_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glVertexAttribI4i_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribI4i_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glVertexAttribI4i_Z = glbindGetProcAddress(`glVertexAttribI4i`);
  if (*cast(void**)&glVertexAttribI4i_Z is null) assert(0, `OpenGL function 'glVertexAttribI4i' not found!`);
  glVertexAttribI4i_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribI1ui = glVertexAttribI1ui_Z;
__gshared glbfn_glVertexAttribI1ui glVertexAttribI1ui_Z = function void (uint a00,uint a01) {
  glbfn_glVertexAttribI1ui_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1ui_loader (uint a00,uint a01) {
  *cast(void**)&glVertexAttribI1ui_Z = glbindGetProcAddress(`glVertexAttribI1ui`);
  if (*cast(void**)&glVertexAttribI1ui_Z is null) assert(0, `OpenGL function 'glVertexAttribI1ui' not found!`);
  glVertexAttribI1ui_Z(a00,a01,);
}
alias glVertexAttribI2ui = glVertexAttribI2ui_Z;
__gshared glbfn_glVertexAttribI2ui glVertexAttribI2ui_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glVertexAttribI2ui_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribI2ui_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glVertexAttribI2ui_Z = glbindGetProcAddress(`glVertexAttribI2ui`);
  if (*cast(void**)&glVertexAttribI2ui_Z is null) assert(0, `OpenGL function 'glVertexAttribI2ui' not found!`);
  glVertexAttribI2ui_Z(a00,a01,a02,);
}
alias glVertexAttribI3ui = glVertexAttribI3ui_Z;
__gshared glbfn_glVertexAttribI3ui glVertexAttribI3ui_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glVertexAttribI3ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribI3ui_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glVertexAttribI3ui_Z = glbindGetProcAddress(`glVertexAttribI3ui`);
  if (*cast(void**)&glVertexAttribI3ui_Z is null) assert(0, `OpenGL function 'glVertexAttribI3ui' not found!`);
  glVertexAttribI3ui_Z(a00,a01,a02,a03,);
}
alias glVertexAttribI4ui = glVertexAttribI4ui_Z;
__gshared glbfn_glVertexAttribI4ui glVertexAttribI4ui_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glVertexAttribI4ui_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribI4ui_loader (uint a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glVertexAttribI4ui_Z = glbindGetProcAddress(`glVertexAttribI4ui`);
  if (*cast(void**)&glVertexAttribI4ui_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ui' not found!`);
  glVertexAttribI4ui_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribI1iv = glVertexAttribI1iv_Z;
__gshared glbfn_glVertexAttribI1iv glVertexAttribI1iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI1iv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI1iv_Z = glbindGetProcAddress(`glVertexAttribI1iv`);
  if (*cast(void**)&glVertexAttribI1iv_Z is null) assert(0, `OpenGL function 'glVertexAttribI1iv' not found!`);
  glVertexAttribI1iv_Z(a00,a01,);
}
alias glVertexAttribI2iv = glVertexAttribI2iv_Z;
__gshared glbfn_glVertexAttribI2iv glVertexAttribI2iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI2iv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI2iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI2iv_Z = glbindGetProcAddress(`glVertexAttribI2iv`);
  if (*cast(void**)&glVertexAttribI2iv_Z is null) assert(0, `OpenGL function 'glVertexAttribI2iv' not found!`);
  glVertexAttribI2iv_Z(a00,a01,);
}
alias glVertexAttribI3iv = glVertexAttribI3iv_Z;
__gshared glbfn_glVertexAttribI3iv glVertexAttribI3iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI3iv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI3iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI3iv_Z = glbindGetProcAddress(`glVertexAttribI3iv`);
  if (*cast(void**)&glVertexAttribI3iv_Z is null) assert(0, `OpenGL function 'glVertexAttribI3iv' not found!`);
  glVertexAttribI3iv_Z(a00,a01,);
}
alias glVertexAttribI4iv = glVertexAttribI4iv_Z;
__gshared glbfn_glVertexAttribI4iv glVertexAttribI4iv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI4iv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4iv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI4iv_Z = glbindGetProcAddress(`glVertexAttribI4iv`);
  if (*cast(void**)&glVertexAttribI4iv_Z is null) assert(0, `OpenGL function 'glVertexAttribI4iv' not found!`);
  glVertexAttribI4iv_Z(a00,a01,);
}
alias glVertexAttribI1uiv = glVertexAttribI1uiv_Z;
__gshared glbfn_glVertexAttribI1uiv glVertexAttribI1uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI1uiv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI1uiv_Z = glbindGetProcAddress(`glVertexAttribI1uiv`);
  if (*cast(void**)&glVertexAttribI1uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribI1uiv' not found!`);
  glVertexAttribI1uiv_Z(a00,a01,);
}
alias glVertexAttribI2uiv = glVertexAttribI2uiv_Z;
__gshared glbfn_glVertexAttribI2uiv glVertexAttribI2uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI2uiv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI2uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI2uiv_Z = glbindGetProcAddress(`glVertexAttribI2uiv`);
  if (*cast(void**)&glVertexAttribI2uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribI2uiv' not found!`);
  glVertexAttribI2uiv_Z(a00,a01,);
}
alias glVertexAttribI3uiv = glVertexAttribI3uiv_Z;
__gshared glbfn_glVertexAttribI3uiv glVertexAttribI3uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI3uiv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI3uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI3uiv_Z = glbindGetProcAddress(`glVertexAttribI3uiv`);
  if (*cast(void**)&glVertexAttribI3uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribI3uiv' not found!`);
  glVertexAttribI3uiv_Z(a00,a01,);
}
alias glVertexAttribI4uiv = glVertexAttribI4uiv_Z;
__gshared glbfn_glVertexAttribI4uiv glVertexAttribI4uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI4uiv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI4uiv_Z = glbindGetProcAddress(`glVertexAttribI4uiv`);
  if (*cast(void**)&glVertexAttribI4uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribI4uiv' not found!`);
  glVertexAttribI4uiv_Z(a00,a01,);
}
alias glVertexAttribI4bv = glVertexAttribI4bv_Z;
__gshared glbfn_glVertexAttribI4bv glVertexAttribI4bv_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glVertexAttribI4bv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4bv_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glVertexAttribI4bv_Z = glbindGetProcAddress(`glVertexAttribI4bv`);
  if (*cast(void**)&glVertexAttribI4bv_Z is null) assert(0, `OpenGL function 'glVertexAttribI4bv' not found!`);
  glVertexAttribI4bv_Z(a00,a01,);
}
alias glVertexAttribI4sv = glVertexAttribI4sv_Z;
__gshared glbfn_glVertexAttribI4sv glVertexAttribI4sv_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttribI4sv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4sv_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttribI4sv_Z = glbindGetProcAddress(`glVertexAttribI4sv`);
  if (*cast(void**)&glVertexAttribI4sv_Z is null) assert(0, `OpenGL function 'glVertexAttribI4sv' not found!`);
  glVertexAttribI4sv_Z(a00,a01,);
}
alias glVertexAttribI4ubv = glVertexAttribI4ubv_Z;
__gshared glbfn_glVertexAttribI4ubv glVertexAttribI4ubv_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVertexAttribI4ubv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4ubv_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVertexAttribI4ubv_Z = glbindGetProcAddress(`glVertexAttribI4ubv`);
  if (*cast(void**)&glVertexAttribI4ubv_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ubv' not found!`);
  glVertexAttribI4ubv_Z(a00,a01,);
}
alias glVertexAttribI4usv = glVertexAttribI4usv_Z;
__gshared glbfn_glVertexAttribI4usv glVertexAttribI4usv_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttribI4usv_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4usv_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttribI4usv_Z = glbindGetProcAddress(`glVertexAttribI4usv`);
  if (*cast(void**)&glVertexAttribI4usv_Z is null) assert(0, `OpenGL function 'glVertexAttribI4usv' not found!`);
  glVertexAttribI4usv_Z(a00,a01,);
}
alias glGetUniformuiv = glGetUniformuiv_Z;
__gshared glbfn_glGetUniformuiv glGetUniformuiv_Z = function void (uint a00,int a01,uint* a02) {
  glbfn_glGetUniformuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformuiv_loader (uint a00,int a01,uint* a02) {
  *cast(void**)&glGetUniformuiv_Z = glbindGetProcAddress(`glGetUniformuiv`);
  if (*cast(void**)&glGetUniformuiv_Z is null) assert(0, `OpenGL function 'glGetUniformuiv' not found!`);
  glGetUniformuiv_Z(a00,a01,a02,);
}
alias glBindFragDataLocation = glBindFragDataLocation_Z;
__gshared glbfn_glBindFragDataLocation glBindFragDataLocation_Z = function void (uint a00,uint a01,const(char)* a02) {
  glbfn_glBindFragDataLocation_loader(a00,a01,a02,);
};
private void glbfn_glBindFragDataLocation_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glBindFragDataLocation_Z = glbindGetProcAddress(`glBindFragDataLocation`);
  if (*cast(void**)&glBindFragDataLocation_Z is null) assert(0, `OpenGL function 'glBindFragDataLocation' not found!`);
  glBindFragDataLocation_Z(a00,a01,a02,);
}
alias glGetFragDataLocation = glGetFragDataLocation_Z;
__gshared glbfn_glGetFragDataLocation glGetFragDataLocation_Z = function int (uint a00,const(char)* a01) {
  return glbfn_glGetFragDataLocation_loader(a00,a01,);
};
private int glbfn_glGetFragDataLocation_loader (uint a00,const(char)* a01) {
  *cast(void**)&glGetFragDataLocation_Z = glbindGetProcAddress(`glGetFragDataLocation`);
  if (*cast(void**)&glGetFragDataLocation_Z is null) assert(0, `OpenGL function 'glGetFragDataLocation' not found!`);
  return glGetFragDataLocation_Z(a00,a01,);
}
alias glUniform1ui = glUniform1ui_Z;
__gshared glbfn_glUniform1ui glUniform1ui_Z = function void (int a00,uint a01) {
  glbfn_glUniform1ui_loader(a00,a01,);
};
private void glbfn_glUniform1ui_loader (int a00,uint a01) {
  *cast(void**)&glUniform1ui_Z = glbindGetProcAddress(`glUniform1ui`);
  if (*cast(void**)&glUniform1ui_Z is null) assert(0, `OpenGL function 'glUniform1ui' not found!`);
  glUniform1ui_Z(a00,a01,);
}
alias glUniform2ui = glUniform2ui_Z;
__gshared glbfn_glUniform2ui glUniform2ui_Z = function void (int a00,uint a01,uint a02) {
  glbfn_glUniform2ui_loader(a00,a01,a02,);
};
private void glbfn_glUniform2ui_loader (int a00,uint a01,uint a02) {
  *cast(void**)&glUniform2ui_Z = glbindGetProcAddress(`glUniform2ui`);
  if (*cast(void**)&glUniform2ui_Z is null) assert(0, `OpenGL function 'glUniform2ui' not found!`);
  glUniform2ui_Z(a00,a01,a02,);
}
alias glUniform3ui = glUniform3ui_Z;
__gshared glbfn_glUniform3ui glUniform3ui_Z = function void (int a00,uint a01,uint a02,uint a03) {
  glbfn_glUniform3ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3ui_loader (int a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glUniform3ui_Z = glbindGetProcAddress(`glUniform3ui`);
  if (*cast(void**)&glUniform3ui_Z is null) assert(0, `OpenGL function 'glUniform3ui' not found!`);
  glUniform3ui_Z(a00,a01,a02,a03,);
}
alias glUniform4ui = glUniform4ui_Z;
__gshared glbfn_glUniform4ui glUniform4ui_Z = function void (int a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glUniform4ui_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4ui_loader (int a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glUniform4ui_Z = glbindGetProcAddress(`glUniform4ui`);
  if (*cast(void**)&glUniform4ui_Z is null) assert(0, `OpenGL function 'glUniform4ui' not found!`);
  glUniform4ui_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1uiv = glUniform1uiv_Z;
__gshared glbfn_glUniform1uiv glUniform1uiv_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform1uiv_loader(a00,a01,a02,);
};
private void glbfn_glUniform1uiv_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform1uiv_Z = glbindGetProcAddress(`glUniform1uiv`);
  if (*cast(void**)&glUniform1uiv_Z is null) assert(0, `OpenGL function 'glUniform1uiv' not found!`);
  glUniform1uiv_Z(a00,a01,a02,);
}
alias glUniform2uiv = glUniform2uiv_Z;
__gshared glbfn_glUniform2uiv glUniform2uiv_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform2uiv_loader(a00,a01,a02,);
};
private void glbfn_glUniform2uiv_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform2uiv_Z = glbindGetProcAddress(`glUniform2uiv`);
  if (*cast(void**)&glUniform2uiv_Z is null) assert(0, `OpenGL function 'glUniform2uiv' not found!`);
  glUniform2uiv_Z(a00,a01,a02,);
}
alias glUniform3uiv = glUniform3uiv_Z;
__gshared glbfn_glUniform3uiv glUniform3uiv_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform3uiv_loader(a00,a01,a02,);
};
private void glbfn_glUniform3uiv_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform3uiv_Z = glbindGetProcAddress(`glUniform3uiv`);
  if (*cast(void**)&glUniform3uiv_Z is null) assert(0, `OpenGL function 'glUniform3uiv' not found!`);
  glUniform3uiv_Z(a00,a01,a02,);
}
alias glUniform4uiv = glUniform4uiv_Z;
__gshared glbfn_glUniform4uiv glUniform4uiv_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform4uiv_loader(a00,a01,a02,);
};
private void glbfn_glUniform4uiv_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform4uiv_Z = glbindGetProcAddress(`glUniform4uiv`);
  if (*cast(void**)&glUniform4uiv_Z is null) assert(0, `OpenGL function 'glUniform4uiv' not found!`);
  glUniform4uiv_Z(a00,a01,a02,);
}
alias glTexParameterIiv = glTexParameterIiv_Z;
__gshared glbfn_glTexParameterIiv glTexParameterIiv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexParameterIiv_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterIiv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexParameterIiv_Z = glbindGetProcAddress(`glTexParameterIiv`);
  if (*cast(void**)&glTexParameterIiv_Z is null) assert(0, `OpenGL function 'glTexParameterIiv' not found!`);
  glTexParameterIiv_Z(a00,a01,a02,);
}
alias glTexParameterIuiv = glTexParameterIuiv_Z;
__gshared glbfn_glTexParameterIuiv glTexParameterIuiv_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glTexParameterIuiv_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterIuiv_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glTexParameterIuiv_Z = glbindGetProcAddress(`glTexParameterIuiv`);
  if (*cast(void**)&glTexParameterIuiv_Z is null) assert(0, `OpenGL function 'glTexParameterIuiv' not found!`);
  glTexParameterIuiv_Z(a00,a01,a02,);
}
alias glGetTexParameterIiv = glGetTexParameterIiv_Z;
__gshared glbfn_glGetTexParameterIiv glGetTexParameterIiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexParameterIiv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameterIiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexParameterIiv_Z = glbindGetProcAddress(`glGetTexParameterIiv`);
  if (*cast(void**)&glGetTexParameterIiv_Z is null) assert(0, `OpenGL function 'glGetTexParameterIiv' not found!`);
  glGetTexParameterIiv_Z(a00,a01,a02,);
}
alias glGetTexParameterIuiv = glGetTexParameterIuiv_Z;
__gshared glbfn_glGetTexParameterIuiv glGetTexParameterIuiv_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetTexParameterIuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameterIuiv_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetTexParameterIuiv_Z = glbindGetProcAddress(`glGetTexParameterIuiv`);
  if (*cast(void**)&glGetTexParameterIuiv_Z is null) assert(0, `OpenGL function 'glGetTexParameterIuiv' not found!`);
  glGetTexParameterIuiv_Z(a00,a01,a02,);
}
alias glClearBufferiv = glClearBufferiv_Z;
__gshared glbfn_glClearBufferiv glClearBufferiv_Z = function void (uint a00,int a01,const(int)* a02) {
  glbfn_glClearBufferiv_loader(a00,a01,a02,);
};
private void glbfn_glClearBufferiv_loader (uint a00,int a01,const(int)* a02) {
  *cast(void**)&glClearBufferiv_Z = glbindGetProcAddress(`glClearBufferiv`);
  if (*cast(void**)&glClearBufferiv_Z is null) assert(0, `OpenGL function 'glClearBufferiv' not found!`);
  glClearBufferiv_Z(a00,a01,a02,);
}
alias glClearBufferuiv = glClearBufferuiv_Z;
__gshared glbfn_glClearBufferuiv glClearBufferuiv_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glClearBufferuiv_loader(a00,a01,a02,);
};
private void glbfn_glClearBufferuiv_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glClearBufferuiv_Z = glbindGetProcAddress(`glClearBufferuiv`);
  if (*cast(void**)&glClearBufferuiv_Z is null) assert(0, `OpenGL function 'glClearBufferuiv' not found!`);
  glClearBufferuiv_Z(a00,a01,a02,);
}
alias glClearBufferfv = glClearBufferfv_Z;
__gshared glbfn_glClearBufferfv glClearBufferfv_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glClearBufferfv_loader(a00,a01,a02,);
};
private void glbfn_glClearBufferfv_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glClearBufferfv_Z = glbindGetProcAddress(`glClearBufferfv`);
  if (*cast(void**)&glClearBufferfv_Z is null) assert(0, `OpenGL function 'glClearBufferfv' not found!`);
  glClearBufferfv_Z(a00,a01,a02,);
}
alias glClearBufferfi = glClearBufferfi_Z;
__gshared glbfn_glClearBufferfi glClearBufferfi_Z = function void (uint a00,int a01,float a02,int a03) {
  glbfn_glClearBufferfi_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearBufferfi_loader (uint a00,int a01,float a02,int a03) {
  *cast(void**)&glClearBufferfi_Z = glbindGetProcAddress(`glClearBufferfi`);
  if (*cast(void**)&glClearBufferfi_Z is null) assert(0, `OpenGL function 'glClearBufferfi' not found!`);
  glClearBufferfi_Z(a00,a01,a02,a03,);
}
alias glGetStringi = glGetStringi_Z;
__gshared glbfn_glGetStringi glGetStringi_Z = function const(char)* (uint a00,uint a01) {
  return glbfn_glGetStringi_loader(a00,a01,);
};
private const(char)* glbfn_glGetStringi_loader (uint a00,uint a01) {
  *cast(void**)&glGetStringi_Z = glbindGetProcAddress(`glGetStringi`);
  if (*cast(void**)&glGetStringi_Z is null) assert(0, `OpenGL function 'glGetStringi' not found!`);
  return glGetStringi_Z(a00,a01,);
}
alias glIsRenderbuffer = glIsRenderbuffer_Z;
__gshared glbfn_glIsRenderbuffer glIsRenderbuffer_Z = function ubyte (uint a00) {
  return glbfn_glIsRenderbuffer_loader(a00,);
};
private ubyte glbfn_glIsRenderbuffer_loader (uint a00) {
  *cast(void**)&glIsRenderbuffer_Z = glbindGetProcAddress(`glIsRenderbuffer`);
  if (*cast(void**)&glIsRenderbuffer_Z is null) assert(0, `OpenGL function 'glIsRenderbuffer' not found!`);
  return glIsRenderbuffer_Z(a00,);
}
alias glBindRenderbuffer = glBindRenderbuffer_Z;
__gshared glbfn_glBindRenderbuffer glBindRenderbuffer_Z = function void (uint a00,uint a01) {
  glbfn_glBindRenderbuffer_loader(a00,a01,);
};
private void glbfn_glBindRenderbuffer_loader (uint a00,uint a01) {
  *cast(void**)&glBindRenderbuffer_Z = glbindGetProcAddress(`glBindRenderbuffer`);
  if (*cast(void**)&glBindRenderbuffer_Z is null) assert(0, `OpenGL function 'glBindRenderbuffer' not found!`);
  glBindRenderbuffer_Z(a00,a01,);
}
alias glDeleteRenderbuffers = glDeleteRenderbuffers_Z;
__gshared glbfn_glDeleteRenderbuffers glDeleteRenderbuffers_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteRenderbuffers_loader(a00,a01,);
};
private void glbfn_glDeleteRenderbuffers_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteRenderbuffers_Z = glbindGetProcAddress(`glDeleteRenderbuffers`);
  if (*cast(void**)&glDeleteRenderbuffers_Z is null) assert(0, `OpenGL function 'glDeleteRenderbuffers' not found!`);
  glDeleteRenderbuffers_Z(a00,a01,);
}
alias glGenRenderbuffers = glGenRenderbuffers_Z;
__gshared glbfn_glGenRenderbuffers glGenRenderbuffers_Z = function void (int a00,uint* a01) {
  glbfn_glGenRenderbuffers_loader(a00,a01,);
};
private void glbfn_glGenRenderbuffers_loader (int a00,uint* a01) {
  *cast(void**)&glGenRenderbuffers_Z = glbindGetProcAddress(`glGenRenderbuffers`);
  if (*cast(void**)&glGenRenderbuffers_Z is null) assert(0, `OpenGL function 'glGenRenderbuffers' not found!`);
  glGenRenderbuffers_Z(a00,a01,);
}
alias glRenderbufferStorage = glRenderbufferStorage_Z;
__gshared glbfn_glRenderbufferStorage glRenderbufferStorage_Z = function void (uint a00,uint a01,int a02,int a03) {
  glbfn_glRenderbufferStorage_loader(a00,a01,a02,a03,);
};
private void glbfn_glRenderbufferStorage_loader (uint a00,uint a01,int a02,int a03) {
  *cast(void**)&glRenderbufferStorage_Z = glbindGetProcAddress(`glRenderbufferStorage`);
  if (*cast(void**)&glRenderbufferStorage_Z is null) assert(0, `OpenGL function 'glRenderbufferStorage' not found!`);
  glRenderbufferStorage_Z(a00,a01,a02,a03,);
}
alias glGetRenderbufferParameteriv = glGetRenderbufferParameteriv_Z;
__gshared glbfn_glGetRenderbufferParameteriv glGetRenderbufferParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetRenderbufferParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetRenderbufferParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetRenderbufferParameteriv_Z = glbindGetProcAddress(`glGetRenderbufferParameteriv`);
  if (*cast(void**)&glGetRenderbufferParameteriv_Z is null) assert(0, `OpenGL function 'glGetRenderbufferParameteriv' not found!`);
  glGetRenderbufferParameteriv_Z(a00,a01,a02,);
}
alias glIsFramebuffer = glIsFramebuffer_Z;
__gshared glbfn_glIsFramebuffer glIsFramebuffer_Z = function ubyte (uint a00) {
  return glbfn_glIsFramebuffer_loader(a00,);
};
private ubyte glbfn_glIsFramebuffer_loader (uint a00) {
  *cast(void**)&glIsFramebuffer_Z = glbindGetProcAddress(`glIsFramebuffer`);
  if (*cast(void**)&glIsFramebuffer_Z is null) assert(0, `OpenGL function 'glIsFramebuffer' not found!`);
  return glIsFramebuffer_Z(a00,);
}
alias glBindFramebuffer = glBindFramebuffer_Z;
__gshared glbfn_glBindFramebuffer glBindFramebuffer_Z = function void (uint a00,uint a01) {
  glbfn_glBindFramebuffer_loader(a00,a01,);
};
private void glbfn_glBindFramebuffer_loader (uint a00,uint a01) {
  *cast(void**)&glBindFramebuffer_Z = glbindGetProcAddress(`glBindFramebuffer`);
  if (*cast(void**)&glBindFramebuffer_Z is null) assert(0, `OpenGL function 'glBindFramebuffer' not found!`);
  glBindFramebuffer_Z(a00,a01,);
}
alias glDeleteFramebuffers = glDeleteFramebuffers_Z;
__gshared glbfn_glDeleteFramebuffers glDeleteFramebuffers_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteFramebuffers_loader(a00,a01,);
};
private void glbfn_glDeleteFramebuffers_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteFramebuffers_Z = glbindGetProcAddress(`glDeleteFramebuffers`);
  if (*cast(void**)&glDeleteFramebuffers_Z is null) assert(0, `OpenGL function 'glDeleteFramebuffers' not found!`);
  glDeleteFramebuffers_Z(a00,a01,);
}
alias glGenFramebuffers = glGenFramebuffers_Z;
__gshared glbfn_glGenFramebuffers glGenFramebuffers_Z = function void (int a00,uint* a01) {
  glbfn_glGenFramebuffers_loader(a00,a01,);
};
private void glbfn_glGenFramebuffers_loader (int a00,uint* a01) {
  *cast(void**)&glGenFramebuffers_Z = glbindGetProcAddress(`glGenFramebuffers`);
  if (*cast(void**)&glGenFramebuffers_Z is null) assert(0, `OpenGL function 'glGenFramebuffers' not found!`);
  glGenFramebuffers_Z(a00,a01,);
}
alias glCheckFramebufferStatus = glCheckFramebufferStatus_Z;
__gshared glbfn_glCheckFramebufferStatus glCheckFramebufferStatus_Z = function uint (uint a00) {
  return glbfn_glCheckFramebufferStatus_loader(a00,);
};
private uint glbfn_glCheckFramebufferStatus_loader (uint a00) {
  *cast(void**)&glCheckFramebufferStatus_Z = glbindGetProcAddress(`glCheckFramebufferStatus`);
  if (*cast(void**)&glCheckFramebufferStatus_Z is null) assert(0, `OpenGL function 'glCheckFramebufferStatus' not found!`);
  return glCheckFramebufferStatus_Z(a00,);
}
alias glFramebufferTexture1D = glFramebufferTexture1D_Z;
__gshared glbfn_glFramebufferTexture1D glFramebufferTexture1D_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04) {
  glbfn_glFramebufferTexture1D_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTexture1D_loader (uint a00,uint a01,uint a02,uint a03,int a04) {
  *cast(void**)&glFramebufferTexture1D_Z = glbindGetProcAddress(`glFramebufferTexture1D`);
  if (*cast(void**)&glFramebufferTexture1D_Z is null) assert(0, `OpenGL function 'glFramebufferTexture1D' not found!`);
  glFramebufferTexture1D_Z(a00,a01,a02,a03,a04,);
}
alias glFramebufferTexture2D = glFramebufferTexture2D_Z;
__gshared glbfn_glFramebufferTexture2D glFramebufferTexture2D_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04) {
  glbfn_glFramebufferTexture2D_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTexture2D_loader (uint a00,uint a01,uint a02,uint a03,int a04) {
  *cast(void**)&glFramebufferTexture2D_Z = glbindGetProcAddress(`glFramebufferTexture2D`);
  if (*cast(void**)&glFramebufferTexture2D_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2D' not found!`);
  glFramebufferTexture2D_Z(a00,a01,a02,a03,a04,);
}
alias glFramebufferTexture3D = glFramebufferTexture3D_Z;
__gshared glbfn_glFramebufferTexture3D glFramebufferTexture3D_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  glbfn_glFramebufferTexture3D_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glFramebufferTexture3D_loader (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  *cast(void**)&glFramebufferTexture3D_Z = glbindGetProcAddress(`glFramebufferTexture3D`);
  if (*cast(void**)&glFramebufferTexture3D_Z is null) assert(0, `OpenGL function 'glFramebufferTexture3D' not found!`);
  glFramebufferTexture3D_Z(a00,a01,a02,a03,a04,a05,);
}
alias glFramebufferRenderbuffer = glFramebufferRenderbuffer_Z;
__gshared glbfn_glFramebufferRenderbuffer glFramebufferRenderbuffer_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glFramebufferRenderbuffer_loader(a00,a01,a02,a03,);
};
private void glbfn_glFramebufferRenderbuffer_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glFramebufferRenderbuffer_Z = glbindGetProcAddress(`glFramebufferRenderbuffer`);
  if (*cast(void**)&glFramebufferRenderbuffer_Z is null) assert(0, `OpenGL function 'glFramebufferRenderbuffer' not found!`);
  glFramebufferRenderbuffer_Z(a00,a01,a02,a03,);
}
alias glGetFramebufferAttachmentParameteriv = glGetFramebufferAttachmentParameteriv_Z;
__gshared glbfn_glGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetFramebufferAttachmentParameteriv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetFramebufferAttachmentParameteriv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetFramebufferAttachmentParameteriv_Z = glbindGetProcAddress(`glGetFramebufferAttachmentParameteriv`);
  if (*cast(void**)&glGetFramebufferAttachmentParameteriv_Z is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameteriv' not found!`);
  glGetFramebufferAttachmentParameteriv_Z(a00,a01,a02,a03,);
}
alias glGenerateMipmap = glGenerateMipmap_Z;
__gshared glbfn_glGenerateMipmap glGenerateMipmap_Z = function void (uint a00) {
  glbfn_glGenerateMipmap_loader(a00,);
};
private void glbfn_glGenerateMipmap_loader (uint a00) {
  *cast(void**)&glGenerateMipmap_Z = glbindGetProcAddress(`glGenerateMipmap`);
  if (*cast(void**)&glGenerateMipmap_Z is null) assert(0, `OpenGL function 'glGenerateMipmap' not found!`);
  glGenerateMipmap_Z(a00,);
}
alias glBlitFramebuffer = glBlitFramebuffer_Z;
__gshared glbfn_glBlitFramebuffer glBlitFramebuffer_Z = function void (int a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09) {
  glbfn_glBlitFramebuffer_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glBlitFramebuffer_loader (int a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09) {
  *cast(void**)&glBlitFramebuffer_Z = glbindGetProcAddress(`glBlitFramebuffer`);
  if (*cast(void**)&glBlitFramebuffer_Z is null) assert(0, `OpenGL function 'glBlitFramebuffer' not found!`);
  glBlitFramebuffer_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glRenderbufferStorageMultisample = glRenderbufferStorageMultisample_Z;
__gshared glbfn_glRenderbufferStorageMultisample glRenderbufferStorageMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04) {
  glbfn_glRenderbufferStorageMultisample_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glRenderbufferStorageMultisample_loader (uint a00,int a01,uint a02,int a03,int a04) {
  *cast(void**)&glRenderbufferStorageMultisample_Z = glbindGetProcAddress(`glRenderbufferStorageMultisample`);
  if (*cast(void**)&glRenderbufferStorageMultisample_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisample' not found!`);
  glRenderbufferStorageMultisample_Z(a00,a01,a02,a03,a04,);
}
alias glFramebufferTextureLayer = glFramebufferTextureLayer_Z;
__gshared glbfn_glFramebufferTextureLayer glFramebufferTextureLayer_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glFramebufferTextureLayer_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTextureLayer_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glFramebufferTextureLayer_Z = glbindGetProcAddress(`glFramebufferTextureLayer`);
  if (*cast(void**)&glFramebufferTextureLayer_Z is null) assert(0, `OpenGL function 'glFramebufferTextureLayer' not found!`);
  glFramebufferTextureLayer_Z(a00,a01,a02,a03,a04,);
}
alias glMapBufferRange = glMapBufferRange_Z;
__gshared glbfn_glMapBufferRange glMapBufferRange_Z = function void* (uint a00,int a01,int a02,uint a03) {
  return glbfn_glMapBufferRange_loader(a00,a01,a02,a03,);
};
private void* glbfn_glMapBufferRange_loader (uint a00,int a01,int a02,uint a03) {
  *cast(void**)&glMapBufferRange_Z = glbindGetProcAddress(`glMapBufferRange`);
  if (*cast(void**)&glMapBufferRange_Z is null) assert(0, `OpenGL function 'glMapBufferRange' not found!`);
  return glMapBufferRange_Z(a00,a01,a02,a03,);
}
alias glFlushMappedBufferRange = glFlushMappedBufferRange_Z;
__gshared glbfn_glFlushMappedBufferRange glFlushMappedBufferRange_Z = function void (uint a00,int a01,int a02) {
  glbfn_glFlushMappedBufferRange_loader(a00,a01,a02,);
};
private void glbfn_glFlushMappedBufferRange_loader (uint a00,int a01,int a02) {
  *cast(void**)&glFlushMappedBufferRange_Z = glbindGetProcAddress(`glFlushMappedBufferRange`);
  if (*cast(void**)&glFlushMappedBufferRange_Z is null) assert(0, `OpenGL function 'glFlushMappedBufferRange' not found!`);
  glFlushMappedBufferRange_Z(a00,a01,a02,);
}
alias glBindVertexArray = glBindVertexArray_Z;
__gshared glbfn_glBindVertexArray glBindVertexArray_Z = function void (uint a00) {
  glbfn_glBindVertexArray_loader(a00,);
};
private void glbfn_glBindVertexArray_loader (uint a00) {
  *cast(void**)&glBindVertexArray_Z = glbindGetProcAddress(`glBindVertexArray`);
  if (*cast(void**)&glBindVertexArray_Z is null) assert(0, `OpenGL function 'glBindVertexArray' not found!`);
  glBindVertexArray_Z(a00,);
}
alias glDeleteVertexArrays = glDeleteVertexArrays_Z;
__gshared glbfn_glDeleteVertexArrays glDeleteVertexArrays_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteVertexArrays_loader(a00,a01,);
};
private void glbfn_glDeleteVertexArrays_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteVertexArrays_Z = glbindGetProcAddress(`glDeleteVertexArrays`);
  if (*cast(void**)&glDeleteVertexArrays_Z is null) assert(0, `OpenGL function 'glDeleteVertexArrays' not found!`);
  glDeleteVertexArrays_Z(a00,a01,);
}
alias glGenVertexArrays = glGenVertexArrays_Z;
__gshared glbfn_glGenVertexArrays glGenVertexArrays_Z = function void (int a00,uint* a01) {
  glbfn_glGenVertexArrays_loader(a00,a01,);
};
private void glbfn_glGenVertexArrays_loader (int a00,uint* a01) {
  *cast(void**)&glGenVertexArrays_Z = glbindGetProcAddress(`glGenVertexArrays`);
  if (*cast(void**)&glGenVertexArrays_Z is null) assert(0, `OpenGL function 'glGenVertexArrays' not found!`);
  glGenVertexArrays_Z(a00,a01,);
}
alias glIsVertexArray = glIsVertexArray_Z;
__gshared glbfn_glIsVertexArray glIsVertexArray_Z = function ubyte (uint a00) {
  return glbfn_glIsVertexArray_loader(a00,);
};
private ubyte glbfn_glIsVertexArray_loader (uint a00) {
  *cast(void**)&glIsVertexArray_Z = glbindGetProcAddress(`glIsVertexArray`);
  if (*cast(void**)&glIsVertexArray_Z is null) assert(0, `OpenGL function 'glIsVertexArray' not found!`);
  return glIsVertexArray_Z(a00,);
}
alias glDrawArraysInstanced = glDrawArraysInstanced_Z;
__gshared glbfn_glDrawArraysInstanced glDrawArraysInstanced_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glDrawArraysInstanced_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawArraysInstanced_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glDrawArraysInstanced_Z = glbindGetProcAddress(`glDrawArraysInstanced`);
  if (*cast(void**)&glDrawArraysInstanced_Z is null) assert(0, `OpenGL function 'glDrawArraysInstanced' not found!`);
  glDrawArraysInstanced_Z(a00,a01,a02,a03,);
}
alias glDrawElementsInstanced = glDrawElementsInstanced_Z;
__gshared glbfn_glDrawElementsInstanced glDrawElementsInstanced_Z = function void (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  glbfn_glDrawElementsInstanced_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawElementsInstanced_loader (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  *cast(void**)&glDrawElementsInstanced_Z = glbindGetProcAddress(`glDrawElementsInstanced`);
  if (*cast(void**)&glDrawElementsInstanced_Z is null) assert(0, `OpenGL function 'glDrawElementsInstanced' not found!`);
  glDrawElementsInstanced_Z(a00,a01,a02,a03,a04,);
}
alias glTexBuffer = glTexBuffer_Z;
__gshared glbfn_glTexBuffer glTexBuffer_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glTexBuffer_loader(a00,a01,a02,);
};
private void glbfn_glTexBuffer_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glTexBuffer_Z = glbindGetProcAddress(`glTexBuffer`);
  if (*cast(void**)&glTexBuffer_Z is null) assert(0, `OpenGL function 'glTexBuffer' not found!`);
  glTexBuffer_Z(a00,a01,a02,);
}
alias glPrimitiveRestartIndex = glPrimitiveRestartIndex_Z;
__gshared glbfn_glPrimitiveRestartIndex glPrimitiveRestartIndex_Z = function void (uint a00) {
  glbfn_glPrimitiveRestartIndex_loader(a00,);
};
private void glbfn_glPrimitiveRestartIndex_loader (uint a00) {
  *cast(void**)&glPrimitiveRestartIndex_Z = glbindGetProcAddress(`glPrimitiveRestartIndex`);
  if (*cast(void**)&glPrimitiveRestartIndex_Z is null) assert(0, `OpenGL function 'glPrimitiveRestartIndex' not found!`);
  glPrimitiveRestartIndex_Z(a00,);
}
alias glCopyBufferSubData = glCopyBufferSubData_Z;
__gshared glbfn_glCopyBufferSubData glCopyBufferSubData_Z = function void (uint a00,uint a01,int a02,int a03,int a04) {
  glbfn_glCopyBufferSubData_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyBufferSubData_loader (uint a00,uint a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyBufferSubData_Z = glbindGetProcAddress(`glCopyBufferSubData`);
  if (*cast(void**)&glCopyBufferSubData_Z is null) assert(0, `OpenGL function 'glCopyBufferSubData' not found!`);
  glCopyBufferSubData_Z(a00,a01,a02,a03,a04,);
}
alias glGetUniformIndices = glGetUniformIndices_Z;
__gshared glbfn_glGetUniformIndices glGetUniformIndices_Z = function void (uint a00,int a01,const(char*)* a02,uint* a03) {
  glbfn_glGetUniformIndices_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetUniformIndices_loader (uint a00,int a01,const(char*)* a02,uint* a03) {
  *cast(void**)&glGetUniformIndices_Z = glbindGetProcAddress(`glGetUniformIndices`);
  if (*cast(void**)&glGetUniformIndices_Z is null) assert(0, `OpenGL function 'glGetUniformIndices' not found!`);
  glGetUniformIndices_Z(a00,a01,a02,a03,);
}
alias glGetActiveUniformsiv = glGetActiveUniformsiv_Z;
__gshared glbfn_glGetActiveUniformsiv glGetActiveUniformsiv_Z = function void (uint a00,int a01,const(uint)* a02,uint a03,int* a04) {
  glbfn_glGetActiveUniformsiv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetActiveUniformsiv_loader (uint a00,int a01,const(uint)* a02,uint a03,int* a04) {
  *cast(void**)&glGetActiveUniformsiv_Z = glbindGetProcAddress(`glGetActiveUniformsiv`);
  if (*cast(void**)&glGetActiveUniformsiv_Z is null) assert(0, `OpenGL function 'glGetActiveUniformsiv' not found!`);
  glGetActiveUniformsiv_Z(a00,a01,a02,a03,a04,);
}
alias glGetActiveUniformName = glGetActiveUniformName_Z;
__gshared glbfn_glGetActiveUniformName glGetActiveUniformName_Z = function void (uint a00,uint a01,int a02,int* a03,char* a04) {
  glbfn_glGetActiveUniformName_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetActiveUniformName_loader (uint a00,uint a01,int a02,int* a03,char* a04) {
  *cast(void**)&glGetActiveUniformName_Z = glbindGetProcAddress(`glGetActiveUniformName`);
  if (*cast(void**)&glGetActiveUniformName_Z is null) assert(0, `OpenGL function 'glGetActiveUniformName' not found!`);
  glGetActiveUniformName_Z(a00,a01,a02,a03,a04,);
}
alias glGetUniformBlockIndex = glGetUniformBlockIndex_Z;
__gshared glbfn_glGetUniformBlockIndex glGetUniformBlockIndex_Z = function uint (uint a00,const(char)* a01) {
  return glbfn_glGetUniformBlockIndex_loader(a00,a01,);
};
private uint glbfn_glGetUniformBlockIndex_loader (uint a00,const(char)* a01) {
  *cast(void**)&glGetUniformBlockIndex_Z = glbindGetProcAddress(`glGetUniformBlockIndex`);
  if (*cast(void**)&glGetUniformBlockIndex_Z is null) assert(0, `OpenGL function 'glGetUniformBlockIndex' not found!`);
  return glGetUniformBlockIndex_Z(a00,a01,);
}
alias glGetActiveUniformBlockiv = glGetActiveUniformBlockiv_Z;
__gshared glbfn_glGetActiveUniformBlockiv glGetActiveUniformBlockiv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetActiveUniformBlockiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetActiveUniformBlockiv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetActiveUniformBlockiv_Z = glbindGetProcAddress(`glGetActiveUniformBlockiv`);
  if (*cast(void**)&glGetActiveUniformBlockiv_Z is null) assert(0, `OpenGL function 'glGetActiveUniformBlockiv' not found!`);
  glGetActiveUniformBlockiv_Z(a00,a01,a02,a03,);
}
alias glGetActiveUniformBlockName = glGetActiveUniformBlockName_Z;
__gshared glbfn_glGetActiveUniformBlockName glGetActiveUniformBlockName_Z = function void (uint a00,uint a01,int a02,int* a03,char* a04) {
  glbfn_glGetActiveUniformBlockName_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetActiveUniformBlockName_loader (uint a00,uint a01,int a02,int* a03,char* a04) {
  *cast(void**)&glGetActiveUniformBlockName_Z = glbindGetProcAddress(`glGetActiveUniformBlockName`);
  if (*cast(void**)&glGetActiveUniformBlockName_Z is null) assert(0, `OpenGL function 'glGetActiveUniformBlockName' not found!`);
  glGetActiveUniformBlockName_Z(a00,a01,a02,a03,a04,);
}
alias glUniformBlockBinding = glUniformBlockBinding_Z;
__gshared glbfn_glUniformBlockBinding glUniformBlockBinding_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glUniformBlockBinding_loader(a00,a01,a02,);
};
private void glbfn_glUniformBlockBinding_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glUniformBlockBinding_Z = glbindGetProcAddress(`glUniformBlockBinding`);
  if (*cast(void**)&glUniformBlockBinding_Z is null) assert(0, `OpenGL function 'glUniformBlockBinding' not found!`);
  glUniformBlockBinding_Z(a00,a01,a02,);
}
alias glDrawElementsBaseVertex = glDrawElementsBaseVertex_Z;
__gshared glbfn_glDrawElementsBaseVertex glDrawElementsBaseVertex_Z = function void (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  glbfn_glDrawElementsBaseVertex_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawElementsBaseVertex_loader (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  *cast(void**)&glDrawElementsBaseVertex_Z = glbindGetProcAddress(`glDrawElementsBaseVertex`);
  if (*cast(void**)&glDrawElementsBaseVertex_Z is null) assert(0, `OpenGL function 'glDrawElementsBaseVertex' not found!`);
  glDrawElementsBaseVertex_Z(a00,a01,a02,a03,a04,);
}
alias glDrawRangeElementsBaseVertex = glDrawRangeElementsBaseVertex_Z;
__gshared glbfn_glDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04,const(void)* a05,int a06) {
  glbfn_glDrawRangeElementsBaseVertex_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glDrawRangeElementsBaseVertex_loader (uint a00,uint a01,uint a02,int a03,uint a04,const(void)* a05,int a06) {
  *cast(void**)&glDrawRangeElementsBaseVertex_Z = glbindGetProcAddress(`glDrawRangeElementsBaseVertex`);
  if (*cast(void**)&glDrawRangeElementsBaseVertex_Z is null) assert(0, `OpenGL function 'glDrawRangeElementsBaseVertex' not found!`);
  glDrawRangeElementsBaseVertex_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glDrawElementsInstancedBaseVertex = glDrawElementsInstancedBaseVertex_Z;
__gshared glbfn_glDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex_Z = function void (uint a00,int a01,uint a02,const(void)* a03,int a04,int a05) {
  glbfn_glDrawElementsInstancedBaseVertex_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDrawElementsInstancedBaseVertex_loader (uint a00,int a01,uint a02,const(void)* a03,int a04,int a05) {
  *cast(void**)&glDrawElementsInstancedBaseVertex_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseVertex`);
  if (*cast(void**)&glDrawElementsInstancedBaseVertex_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertex' not found!`);
  glDrawElementsInstancedBaseVertex_Z(a00,a01,a02,a03,a04,a05,);
}
alias glMultiDrawElementsBaseVertex = glMultiDrawElementsBaseVertex_Z;
__gshared glbfn_glMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex_Z = function void (uint a00,const(int)* a01,uint a02,const(void*)* a03,int a04,const(int)* a05) {
  glbfn_glMultiDrawElementsBaseVertex_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMultiDrawElementsBaseVertex_loader (uint a00,const(int)* a01,uint a02,const(void*)* a03,int a04,const(int)* a05) {
  *cast(void**)&glMultiDrawElementsBaseVertex_Z = glbindGetProcAddress(`glMultiDrawElementsBaseVertex`);
  if (*cast(void**)&glMultiDrawElementsBaseVertex_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsBaseVertex' not found!`);
  glMultiDrawElementsBaseVertex_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProvokingVertex = glProvokingVertex_Z;
__gshared glbfn_glProvokingVertex glProvokingVertex_Z = function void (uint a00) {
  glbfn_glProvokingVertex_loader(a00,);
};
private void glbfn_glProvokingVertex_loader (uint a00) {
  *cast(void**)&glProvokingVertex_Z = glbindGetProcAddress(`glProvokingVertex`);
  if (*cast(void**)&glProvokingVertex_Z is null) assert(0, `OpenGL function 'glProvokingVertex' not found!`);
  glProvokingVertex_Z(a00,);
}
alias glGetInteger64v = glGetInteger64v_Z;
__gshared glbfn_glGetInteger64v glGetInteger64v_Z = function void (uint a00,long* a01) {
  glbfn_glGetInteger64v_loader(a00,a01,);
};
private void glbfn_glGetInteger64v_loader (uint a00,long* a01) {
  *cast(void**)&glGetInteger64v_Z = glbindGetProcAddress(`glGetInteger64v`);
  if (*cast(void**)&glGetInteger64v_Z is null) assert(0, `OpenGL function 'glGetInteger64v' not found!`);
  glGetInteger64v_Z(a00,a01,);
}
alias glGetInteger64i_v = glGetInteger64i_v_Z;
__gshared glbfn_glGetInteger64i_v glGetInteger64i_v_Z = function void (uint a00,uint a01,long* a02) {
  glbfn_glGetInteger64i_v_loader(a00,a01,a02,);
};
private void glbfn_glGetInteger64i_v_loader (uint a00,uint a01,long* a02) {
  *cast(void**)&glGetInteger64i_v_Z = glbindGetProcAddress(`glGetInteger64i_v`);
  if (*cast(void**)&glGetInteger64i_v_Z is null) assert(0, `OpenGL function 'glGetInteger64i_v' not found!`);
  glGetInteger64i_v_Z(a00,a01,a02,);
}
alias glGetBufferParameteri64v = glGetBufferParameteri64v_Z;
__gshared glbfn_glGetBufferParameteri64v glGetBufferParameteri64v_Z = function void (uint a00,uint a01,long* a02) {
  glbfn_glGetBufferParameteri64v_loader(a00,a01,a02,);
};
private void glbfn_glGetBufferParameteri64v_loader (uint a00,uint a01,long* a02) {
  *cast(void**)&glGetBufferParameteri64v_Z = glbindGetProcAddress(`glGetBufferParameteri64v`);
  if (*cast(void**)&glGetBufferParameteri64v_Z is null) assert(0, `OpenGL function 'glGetBufferParameteri64v' not found!`);
  glGetBufferParameteri64v_Z(a00,a01,a02,);
}
alias glFramebufferTexture = glFramebufferTexture_Z;
__gshared glbfn_glFramebufferTexture glFramebufferTexture_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glFramebufferTexture_loader(a00,a01,a02,a03,);
};
private void glbfn_glFramebufferTexture_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glFramebufferTexture_Z = glbindGetProcAddress(`glFramebufferTexture`);
  if (*cast(void**)&glFramebufferTexture_Z is null) assert(0, `OpenGL function 'glFramebufferTexture' not found!`);
  glFramebufferTexture_Z(a00,a01,a02,a03,);
}
alias glTexImage2DMultisample = glTexImage2DMultisample_Z;
__gshared glbfn_glTexImage2DMultisample glTexImage2DMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04,ubyte a05) {
  glbfn_glTexImage2DMultisample_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glTexImage2DMultisample_loader (uint a00,int a01,uint a02,int a03,int a04,ubyte a05) {
  *cast(void**)&glTexImage2DMultisample_Z = glbindGetProcAddress(`glTexImage2DMultisample`);
  if (*cast(void**)&glTexImage2DMultisample_Z is null) assert(0, `OpenGL function 'glTexImage2DMultisample' not found!`);
  glTexImage2DMultisample_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTexImage3DMultisample = glTexImage3DMultisample_Z;
__gshared glbfn_glTexImage3DMultisample glTexImage3DMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,ubyte a06) {
  glbfn_glTexImage3DMultisample_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTexImage3DMultisample_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,ubyte a06) {
  *cast(void**)&glTexImage3DMultisample_Z = glbindGetProcAddress(`glTexImage3DMultisample`);
  if (*cast(void**)&glTexImage3DMultisample_Z is null) assert(0, `OpenGL function 'glTexImage3DMultisample' not found!`);
  glTexImage3DMultisample_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetMultisamplefv = glGetMultisamplefv_Z;
__gshared glbfn_glGetMultisamplefv glGetMultisamplefv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetMultisamplefv_loader(a00,a01,a02,);
};
private void glbfn_glGetMultisamplefv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetMultisamplefv_Z = glbindGetProcAddress(`glGetMultisamplefv`);
  if (*cast(void**)&glGetMultisamplefv_Z is null) assert(0, `OpenGL function 'glGetMultisamplefv' not found!`);
  glGetMultisamplefv_Z(a00,a01,a02,);
}
alias glSampleMaski = glSampleMaski_Z;
__gshared glbfn_glSampleMaski glSampleMaski_Z = function void (uint a00,uint a01) {
  glbfn_glSampleMaski_loader(a00,a01,);
};
private void glbfn_glSampleMaski_loader (uint a00,uint a01) {
  *cast(void**)&glSampleMaski_Z = glbindGetProcAddress(`glSampleMaski`);
  if (*cast(void**)&glSampleMaski_Z is null) assert(0, `OpenGL function 'glSampleMaski' not found!`);
  glSampleMaski_Z(a00,a01,);
}
alias glBindFragDataLocationIndexed = glBindFragDataLocationIndexed_Z;
__gshared glbfn_glBindFragDataLocationIndexed glBindFragDataLocationIndexed_Z = function void (uint a00,uint a01,uint a02,const(char)* a03) {
  glbfn_glBindFragDataLocationIndexed_loader(a00,a01,a02,a03,);
};
private void glbfn_glBindFragDataLocationIndexed_loader (uint a00,uint a01,uint a02,const(char)* a03) {
  *cast(void**)&glBindFragDataLocationIndexed_Z = glbindGetProcAddress(`glBindFragDataLocationIndexed`);
  if (*cast(void**)&glBindFragDataLocationIndexed_Z is null) assert(0, `OpenGL function 'glBindFragDataLocationIndexed' not found!`);
  glBindFragDataLocationIndexed_Z(a00,a01,a02,a03,);
}
alias glGetFragDataIndex = glGetFragDataIndex_Z;
__gshared glbfn_glGetFragDataIndex glGetFragDataIndex_Z = function int (uint a00,const(char)* a01) {
  return glbfn_glGetFragDataIndex_loader(a00,a01,);
};
private int glbfn_glGetFragDataIndex_loader (uint a00,const(char)* a01) {
  *cast(void**)&glGetFragDataIndex_Z = glbindGetProcAddress(`glGetFragDataIndex`);
  if (*cast(void**)&glGetFragDataIndex_Z is null) assert(0, `OpenGL function 'glGetFragDataIndex' not found!`);
  return glGetFragDataIndex_Z(a00,a01,);
}
alias glGenSamplers = glGenSamplers_Z;
__gshared glbfn_glGenSamplers glGenSamplers_Z = function void (int a00,uint* a01) {
  glbfn_glGenSamplers_loader(a00,a01,);
};
private void glbfn_glGenSamplers_loader (int a00,uint* a01) {
  *cast(void**)&glGenSamplers_Z = glbindGetProcAddress(`glGenSamplers`);
  if (*cast(void**)&glGenSamplers_Z is null) assert(0, `OpenGL function 'glGenSamplers' not found!`);
  glGenSamplers_Z(a00,a01,);
}
alias glDeleteSamplers = glDeleteSamplers_Z;
__gshared glbfn_glDeleteSamplers glDeleteSamplers_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteSamplers_loader(a00,a01,);
};
private void glbfn_glDeleteSamplers_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteSamplers_Z = glbindGetProcAddress(`glDeleteSamplers`);
  if (*cast(void**)&glDeleteSamplers_Z is null) assert(0, `OpenGL function 'glDeleteSamplers' not found!`);
  glDeleteSamplers_Z(a00,a01,);
}
alias glIsSampler = glIsSampler_Z;
__gshared glbfn_glIsSampler glIsSampler_Z = function ubyte (uint a00) {
  return glbfn_glIsSampler_loader(a00,);
};
private ubyte glbfn_glIsSampler_loader (uint a00) {
  *cast(void**)&glIsSampler_Z = glbindGetProcAddress(`glIsSampler`);
  if (*cast(void**)&glIsSampler_Z is null) assert(0, `OpenGL function 'glIsSampler' not found!`);
  return glIsSampler_Z(a00,);
}
alias glBindSampler = glBindSampler_Z;
__gshared glbfn_glBindSampler glBindSampler_Z = function void (uint a00,uint a01) {
  glbfn_glBindSampler_loader(a00,a01,);
};
private void glbfn_glBindSampler_loader (uint a00,uint a01) {
  *cast(void**)&glBindSampler_Z = glbindGetProcAddress(`glBindSampler`);
  if (*cast(void**)&glBindSampler_Z is null) assert(0, `OpenGL function 'glBindSampler' not found!`);
  glBindSampler_Z(a00,a01,);
}
alias glSamplerParameteri = glSamplerParameteri_Z;
__gshared glbfn_glSamplerParameteri glSamplerParameteri_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glSamplerParameteri_loader(a00,a01,a02,);
};
private void glbfn_glSamplerParameteri_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glSamplerParameteri_Z = glbindGetProcAddress(`glSamplerParameteri`);
  if (*cast(void**)&glSamplerParameteri_Z is null) assert(0, `OpenGL function 'glSamplerParameteri' not found!`);
  glSamplerParameteri_Z(a00,a01,a02,);
}
alias glSamplerParameteriv = glSamplerParameteriv_Z;
__gshared glbfn_glSamplerParameteriv glSamplerParameteriv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glSamplerParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glSamplerParameteriv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glSamplerParameteriv_Z = glbindGetProcAddress(`glSamplerParameteriv`);
  if (*cast(void**)&glSamplerParameteriv_Z is null) assert(0, `OpenGL function 'glSamplerParameteriv' not found!`);
  glSamplerParameteriv_Z(a00,a01,a02,);
}
alias glSamplerParameterf = glSamplerParameterf_Z;
__gshared glbfn_glSamplerParameterf glSamplerParameterf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glSamplerParameterf_loader(a00,a01,a02,);
};
private void glbfn_glSamplerParameterf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glSamplerParameterf_Z = glbindGetProcAddress(`glSamplerParameterf`);
  if (*cast(void**)&glSamplerParameterf_Z is null) assert(0, `OpenGL function 'glSamplerParameterf' not found!`);
  glSamplerParameterf_Z(a00,a01,a02,);
}
alias glSamplerParameterfv = glSamplerParameterfv_Z;
__gshared glbfn_glSamplerParameterfv glSamplerParameterfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glSamplerParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glSamplerParameterfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glSamplerParameterfv_Z = glbindGetProcAddress(`glSamplerParameterfv`);
  if (*cast(void**)&glSamplerParameterfv_Z is null) assert(0, `OpenGL function 'glSamplerParameterfv' not found!`);
  glSamplerParameterfv_Z(a00,a01,a02,);
}
alias glSamplerParameterIiv = glSamplerParameterIiv_Z;
__gshared glbfn_glSamplerParameterIiv glSamplerParameterIiv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glSamplerParameterIiv_loader(a00,a01,a02,);
};
private void glbfn_glSamplerParameterIiv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glSamplerParameterIiv_Z = glbindGetProcAddress(`glSamplerParameterIiv`);
  if (*cast(void**)&glSamplerParameterIiv_Z is null) assert(0, `OpenGL function 'glSamplerParameterIiv' not found!`);
  glSamplerParameterIiv_Z(a00,a01,a02,);
}
alias glSamplerParameterIuiv = glSamplerParameterIuiv_Z;
__gshared glbfn_glSamplerParameterIuiv glSamplerParameterIuiv_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glSamplerParameterIuiv_loader(a00,a01,a02,);
};
private void glbfn_glSamplerParameterIuiv_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glSamplerParameterIuiv_Z = glbindGetProcAddress(`glSamplerParameterIuiv`);
  if (*cast(void**)&glSamplerParameterIuiv_Z is null) assert(0, `OpenGL function 'glSamplerParameterIuiv' not found!`);
  glSamplerParameterIuiv_Z(a00,a01,a02,);
}
alias glGetSamplerParameteriv = glGetSamplerParameteriv_Z;
__gshared glbfn_glGetSamplerParameteriv glGetSamplerParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetSamplerParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetSamplerParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetSamplerParameteriv_Z = glbindGetProcAddress(`glGetSamplerParameteriv`);
  if (*cast(void**)&glGetSamplerParameteriv_Z is null) assert(0, `OpenGL function 'glGetSamplerParameteriv' not found!`);
  glGetSamplerParameteriv_Z(a00,a01,a02,);
}
alias glGetSamplerParameterIiv = glGetSamplerParameterIiv_Z;
__gshared glbfn_glGetSamplerParameterIiv glGetSamplerParameterIiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetSamplerParameterIiv_loader(a00,a01,a02,);
};
private void glbfn_glGetSamplerParameterIiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetSamplerParameterIiv_Z = glbindGetProcAddress(`glGetSamplerParameterIiv`);
  if (*cast(void**)&glGetSamplerParameterIiv_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIiv' not found!`);
  glGetSamplerParameterIiv_Z(a00,a01,a02,);
}
alias glGetSamplerParameterfv = glGetSamplerParameterfv_Z;
__gshared glbfn_glGetSamplerParameterfv glGetSamplerParameterfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetSamplerParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glGetSamplerParameterfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetSamplerParameterfv_Z = glbindGetProcAddress(`glGetSamplerParameterfv`);
  if (*cast(void**)&glGetSamplerParameterfv_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterfv' not found!`);
  glGetSamplerParameterfv_Z(a00,a01,a02,);
}
alias glGetSamplerParameterIuiv = glGetSamplerParameterIuiv_Z;
__gshared glbfn_glGetSamplerParameterIuiv glGetSamplerParameterIuiv_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetSamplerParameterIuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetSamplerParameterIuiv_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetSamplerParameterIuiv_Z = glbindGetProcAddress(`glGetSamplerParameterIuiv`);
  if (*cast(void**)&glGetSamplerParameterIuiv_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIuiv' not found!`);
  glGetSamplerParameterIuiv_Z(a00,a01,a02,);
}
alias glQueryCounter = glQueryCounter_Z;
__gshared glbfn_glQueryCounter glQueryCounter_Z = function void (uint a00,uint a01) {
  glbfn_glQueryCounter_loader(a00,a01,);
};
private void glbfn_glQueryCounter_loader (uint a00,uint a01) {
  *cast(void**)&glQueryCounter_Z = glbindGetProcAddress(`glQueryCounter`);
  if (*cast(void**)&glQueryCounter_Z is null) assert(0, `OpenGL function 'glQueryCounter' not found!`);
  glQueryCounter_Z(a00,a01,);
}
alias glGetQueryObjecti64v = glGetQueryObjecti64v_Z;
__gshared glbfn_glGetQueryObjecti64v glGetQueryObjecti64v_Z = function void (uint a00,uint a01,long* a02) {
  glbfn_glGetQueryObjecti64v_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjecti64v_loader (uint a00,uint a01,long* a02) {
  *cast(void**)&glGetQueryObjecti64v_Z = glbindGetProcAddress(`glGetQueryObjecti64v`);
  if (*cast(void**)&glGetQueryObjecti64v_Z is null) assert(0, `OpenGL function 'glGetQueryObjecti64v' not found!`);
  glGetQueryObjecti64v_Z(a00,a01,a02,);
}
alias glGetQueryObjectui64v = glGetQueryObjectui64v_Z;
__gshared glbfn_glGetQueryObjectui64v glGetQueryObjectui64v_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetQueryObjectui64v_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjectui64v_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetQueryObjectui64v_Z = glbindGetProcAddress(`glGetQueryObjectui64v`);
  if (*cast(void**)&glGetQueryObjectui64v_Z is null) assert(0, `OpenGL function 'glGetQueryObjectui64v' not found!`);
  glGetQueryObjectui64v_Z(a00,a01,a02,);
}
alias glVertexAttribDivisor = glVertexAttribDivisor_Z;
__gshared glbfn_glVertexAttribDivisor glVertexAttribDivisor_Z = function void (uint a00,uint a01) {
  glbfn_glVertexAttribDivisor_loader(a00,a01,);
};
private void glbfn_glVertexAttribDivisor_loader (uint a00,uint a01) {
  *cast(void**)&glVertexAttribDivisor_Z = glbindGetProcAddress(`glVertexAttribDivisor`);
  if (*cast(void**)&glVertexAttribDivisor_Z is null) assert(0, `OpenGL function 'glVertexAttribDivisor' not found!`);
  glVertexAttribDivisor_Z(a00,a01,);
}
alias glVertexAttribP1ui = glVertexAttribP1ui_Z;
__gshared glbfn_glVertexAttribP1ui glVertexAttribP1ui_Z = function void (uint a00,uint a01,ubyte a02,uint a03) {
  glbfn_glVertexAttribP1ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP1ui_loader (uint a00,uint a01,ubyte a02,uint a03) {
  *cast(void**)&glVertexAttribP1ui_Z = glbindGetProcAddress(`glVertexAttribP1ui`);
  if (*cast(void**)&glVertexAttribP1ui_Z is null) assert(0, `OpenGL function 'glVertexAttribP1ui' not found!`);
  glVertexAttribP1ui_Z(a00,a01,a02,a03,);
}
alias glVertexAttribP1uiv = glVertexAttribP1uiv_Z;
__gshared glbfn_glVertexAttribP1uiv glVertexAttribP1uiv_Z = function void (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  glbfn_glVertexAttribP1uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP1uiv_loader (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  *cast(void**)&glVertexAttribP1uiv_Z = glbindGetProcAddress(`glVertexAttribP1uiv`);
  if (*cast(void**)&glVertexAttribP1uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribP1uiv' not found!`);
  glVertexAttribP1uiv_Z(a00,a01,a02,a03,);
}
alias glVertexAttribP2ui = glVertexAttribP2ui_Z;
__gshared glbfn_glVertexAttribP2ui glVertexAttribP2ui_Z = function void (uint a00,uint a01,ubyte a02,uint a03) {
  glbfn_glVertexAttribP2ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP2ui_loader (uint a00,uint a01,ubyte a02,uint a03) {
  *cast(void**)&glVertexAttribP2ui_Z = glbindGetProcAddress(`glVertexAttribP2ui`);
  if (*cast(void**)&glVertexAttribP2ui_Z is null) assert(0, `OpenGL function 'glVertexAttribP2ui' not found!`);
  glVertexAttribP2ui_Z(a00,a01,a02,a03,);
}
alias glVertexAttribP2uiv = glVertexAttribP2uiv_Z;
__gshared glbfn_glVertexAttribP2uiv glVertexAttribP2uiv_Z = function void (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  glbfn_glVertexAttribP2uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP2uiv_loader (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  *cast(void**)&glVertexAttribP2uiv_Z = glbindGetProcAddress(`glVertexAttribP2uiv`);
  if (*cast(void**)&glVertexAttribP2uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribP2uiv' not found!`);
  glVertexAttribP2uiv_Z(a00,a01,a02,a03,);
}
alias glVertexAttribP3ui = glVertexAttribP3ui_Z;
__gshared glbfn_glVertexAttribP3ui glVertexAttribP3ui_Z = function void (uint a00,uint a01,ubyte a02,uint a03) {
  glbfn_glVertexAttribP3ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP3ui_loader (uint a00,uint a01,ubyte a02,uint a03) {
  *cast(void**)&glVertexAttribP3ui_Z = glbindGetProcAddress(`glVertexAttribP3ui`);
  if (*cast(void**)&glVertexAttribP3ui_Z is null) assert(0, `OpenGL function 'glVertexAttribP3ui' not found!`);
  glVertexAttribP3ui_Z(a00,a01,a02,a03,);
}
alias glVertexAttribP3uiv = glVertexAttribP3uiv_Z;
__gshared glbfn_glVertexAttribP3uiv glVertexAttribP3uiv_Z = function void (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  glbfn_glVertexAttribP3uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP3uiv_loader (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  *cast(void**)&glVertexAttribP3uiv_Z = glbindGetProcAddress(`glVertexAttribP3uiv`);
  if (*cast(void**)&glVertexAttribP3uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribP3uiv' not found!`);
  glVertexAttribP3uiv_Z(a00,a01,a02,a03,);
}
alias glVertexAttribP4ui = glVertexAttribP4ui_Z;
__gshared glbfn_glVertexAttribP4ui glVertexAttribP4ui_Z = function void (uint a00,uint a01,ubyte a02,uint a03) {
  glbfn_glVertexAttribP4ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP4ui_loader (uint a00,uint a01,ubyte a02,uint a03) {
  *cast(void**)&glVertexAttribP4ui_Z = glbindGetProcAddress(`glVertexAttribP4ui`);
  if (*cast(void**)&glVertexAttribP4ui_Z is null) assert(0, `OpenGL function 'glVertexAttribP4ui' not found!`);
  glVertexAttribP4ui_Z(a00,a01,a02,a03,);
}
alias glVertexAttribP4uiv = glVertexAttribP4uiv_Z;
__gshared glbfn_glVertexAttribP4uiv glVertexAttribP4uiv_Z = function void (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  glbfn_glVertexAttribP4uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribP4uiv_loader (uint a00,uint a01,ubyte a02,const(uint)* a03) {
  *cast(void**)&glVertexAttribP4uiv_Z = glbindGetProcAddress(`glVertexAttribP4uiv`);
  if (*cast(void**)&glVertexAttribP4uiv_Z is null) assert(0, `OpenGL function 'glVertexAttribP4uiv' not found!`);
  glVertexAttribP4uiv_Z(a00,a01,a02,a03,);
}
alias glVertexP2ui = glVertexP2ui_Z;
__gshared glbfn_glVertexP2ui glVertexP2ui_Z = function void (uint a00,uint a01) {
  glbfn_glVertexP2ui_loader(a00,a01,);
};
private void glbfn_glVertexP2ui_loader (uint a00,uint a01) {
  *cast(void**)&glVertexP2ui_Z = glbindGetProcAddress(`glVertexP2ui`);
  if (*cast(void**)&glVertexP2ui_Z is null) assert(0, `OpenGL function 'glVertexP2ui' not found!`);
  glVertexP2ui_Z(a00,a01,);
}
alias glVertexP2uiv = glVertexP2uiv_Z;
__gshared glbfn_glVertexP2uiv glVertexP2uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexP2uiv_loader(a00,a01,);
};
private void glbfn_glVertexP2uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexP2uiv_Z = glbindGetProcAddress(`glVertexP2uiv`);
  if (*cast(void**)&glVertexP2uiv_Z is null) assert(0, `OpenGL function 'glVertexP2uiv' not found!`);
  glVertexP2uiv_Z(a00,a01,);
}
alias glVertexP3ui = glVertexP3ui_Z;
__gshared glbfn_glVertexP3ui glVertexP3ui_Z = function void (uint a00,uint a01) {
  glbfn_glVertexP3ui_loader(a00,a01,);
};
private void glbfn_glVertexP3ui_loader (uint a00,uint a01) {
  *cast(void**)&glVertexP3ui_Z = glbindGetProcAddress(`glVertexP3ui`);
  if (*cast(void**)&glVertexP3ui_Z is null) assert(0, `OpenGL function 'glVertexP3ui' not found!`);
  glVertexP3ui_Z(a00,a01,);
}
alias glVertexP3uiv = glVertexP3uiv_Z;
__gshared glbfn_glVertexP3uiv glVertexP3uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexP3uiv_loader(a00,a01,);
};
private void glbfn_glVertexP3uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexP3uiv_Z = glbindGetProcAddress(`glVertexP3uiv`);
  if (*cast(void**)&glVertexP3uiv_Z is null) assert(0, `OpenGL function 'glVertexP3uiv' not found!`);
  glVertexP3uiv_Z(a00,a01,);
}
alias glVertexP4ui = glVertexP4ui_Z;
__gshared glbfn_glVertexP4ui glVertexP4ui_Z = function void (uint a00,uint a01) {
  glbfn_glVertexP4ui_loader(a00,a01,);
};
private void glbfn_glVertexP4ui_loader (uint a00,uint a01) {
  *cast(void**)&glVertexP4ui_Z = glbindGetProcAddress(`glVertexP4ui`);
  if (*cast(void**)&glVertexP4ui_Z is null) assert(0, `OpenGL function 'glVertexP4ui' not found!`);
  glVertexP4ui_Z(a00,a01,);
}
alias glVertexP4uiv = glVertexP4uiv_Z;
__gshared glbfn_glVertexP4uiv glVertexP4uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexP4uiv_loader(a00,a01,);
};
private void glbfn_glVertexP4uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexP4uiv_Z = glbindGetProcAddress(`glVertexP4uiv`);
  if (*cast(void**)&glVertexP4uiv_Z is null) assert(0, `OpenGL function 'glVertexP4uiv' not found!`);
  glVertexP4uiv_Z(a00,a01,);
}
alias glTexCoordP1ui = glTexCoordP1ui_Z;
__gshared glbfn_glTexCoordP1ui glTexCoordP1ui_Z = function void (uint a00,uint a01) {
  glbfn_glTexCoordP1ui_loader(a00,a01,);
};
private void glbfn_glTexCoordP1ui_loader (uint a00,uint a01) {
  *cast(void**)&glTexCoordP1ui_Z = glbindGetProcAddress(`glTexCoordP1ui`);
  if (*cast(void**)&glTexCoordP1ui_Z is null) assert(0, `OpenGL function 'glTexCoordP1ui' not found!`);
  glTexCoordP1ui_Z(a00,a01,);
}
alias glTexCoordP1uiv = glTexCoordP1uiv_Z;
__gshared glbfn_glTexCoordP1uiv glTexCoordP1uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glTexCoordP1uiv_loader(a00,a01,);
};
private void glbfn_glTexCoordP1uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glTexCoordP1uiv_Z = glbindGetProcAddress(`glTexCoordP1uiv`);
  if (*cast(void**)&glTexCoordP1uiv_Z is null) assert(0, `OpenGL function 'glTexCoordP1uiv' not found!`);
  glTexCoordP1uiv_Z(a00,a01,);
}
alias glTexCoordP2ui = glTexCoordP2ui_Z;
__gshared glbfn_glTexCoordP2ui glTexCoordP2ui_Z = function void (uint a00,uint a01) {
  glbfn_glTexCoordP2ui_loader(a00,a01,);
};
private void glbfn_glTexCoordP2ui_loader (uint a00,uint a01) {
  *cast(void**)&glTexCoordP2ui_Z = glbindGetProcAddress(`glTexCoordP2ui`);
  if (*cast(void**)&glTexCoordP2ui_Z is null) assert(0, `OpenGL function 'glTexCoordP2ui' not found!`);
  glTexCoordP2ui_Z(a00,a01,);
}
alias glTexCoordP2uiv = glTexCoordP2uiv_Z;
__gshared glbfn_glTexCoordP2uiv glTexCoordP2uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glTexCoordP2uiv_loader(a00,a01,);
};
private void glbfn_glTexCoordP2uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glTexCoordP2uiv_Z = glbindGetProcAddress(`glTexCoordP2uiv`);
  if (*cast(void**)&glTexCoordP2uiv_Z is null) assert(0, `OpenGL function 'glTexCoordP2uiv' not found!`);
  glTexCoordP2uiv_Z(a00,a01,);
}
alias glTexCoordP3ui = glTexCoordP3ui_Z;
__gshared glbfn_glTexCoordP3ui glTexCoordP3ui_Z = function void (uint a00,uint a01) {
  glbfn_glTexCoordP3ui_loader(a00,a01,);
};
private void glbfn_glTexCoordP3ui_loader (uint a00,uint a01) {
  *cast(void**)&glTexCoordP3ui_Z = glbindGetProcAddress(`glTexCoordP3ui`);
  if (*cast(void**)&glTexCoordP3ui_Z is null) assert(0, `OpenGL function 'glTexCoordP3ui' not found!`);
  glTexCoordP3ui_Z(a00,a01,);
}
alias glTexCoordP3uiv = glTexCoordP3uiv_Z;
__gshared glbfn_glTexCoordP3uiv glTexCoordP3uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glTexCoordP3uiv_loader(a00,a01,);
};
private void glbfn_glTexCoordP3uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glTexCoordP3uiv_Z = glbindGetProcAddress(`glTexCoordP3uiv`);
  if (*cast(void**)&glTexCoordP3uiv_Z is null) assert(0, `OpenGL function 'glTexCoordP3uiv' not found!`);
  glTexCoordP3uiv_Z(a00,a01,);
}
alias glTexCoordP4ui = glTexCoordP4ui_Z;
__gshared glbfn_glTexCoordP4ui glTexCoordP4ui_Z = function void (uint a00,uint a01) {
  glbfn_glTexCoordP4ui_loader(a00,a01,);
};
private void glbfn_glTexCoordP4ui_loader (uint a00,uint a01) {
  *cast(void**)&glTexCoordP4ui_Z = glbindGetProcAddress(`glTexCoordP4ui`);
  if (*cast(void**)&glTexCoordP4ui_Z is null) assert(0, `OpenGL function 'glTexCoordP4ui' not found!`);
  glTexCoordP4ui_Z(a00,a01,);
}
alias glTexCoordP4uiv = glTexCoordP4uiv_Z;
__gshared glbfn_glTexCoordP4uiv glTexCoordP4uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glTexCoordP4uiv_loader(a00,a01,);
};
private void glbfn_glTexCoordP4uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glTexCoordP4uiv_Z = glbindGetProcAddress(`glTexCoordP4uiv`);
  if (*cast(void**)&glTexCoordP4uiv_Z is null) assert(0, `OpenGL function 'glTexCoordP4uiv' not found!`);
  glTexCoordP4uiv_Z(a00,a01,);
}
alias glMultiTexCoordP1ui = glMultiTexCoordP1ui_Z;
__gshared glbfn_glMultiTexCoordP1ui glMultiTexCoordP1ui_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glMultiTexCoordP1ui_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP1ui_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glMultiTexCoordP1ui_Z = glbindGetProcAddress(`glMultiTexCoordP1ui`);
  if (*cast(void**)&glMultiTexCoordP1ui_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP1ui' not found!`);
  glMultiTexCoordP1ui_Z(a00,a01,a02,);
}
alias glMultiTexCoordP1uiv = glMultiTexCoordP1uiv_Z;
__gshared glbfn_glMultiTexCoordP1uiv glMultiTexCoordP1uiv_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glMultiTexCoordP1uiv_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP1uiv_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glMultiTexCoordP1uiv_Z = glbindGetProcAddress(`glMultiTexCoordP1uiv`);
  if (*cast(void**)&glMultiTexCoordP1uiv_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP1uiv' not found!`);
  glMultiTexCoordP1uiv_Z(a00,a01,a02,);
}
alias glMultiTexCoordP2ui = glMultiTexCoordP2ui_Z;
__gshared glbfn_glMultiTexCoordP2ui glMultiTexCoordP2ui_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glMultiTexCoordP2ui_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP2ui_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glMultiTexCoordP2ui_Z = glbindGetProcAddress(`glMultiTexCoordP2ui`);
  if (*cast(void**)&glMultiTexCoordP2ui_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP2ui' not found!`);
  glMultiTexCoordP2ui_Z(a00,a01,a02,);
}
alias glMultiTexCoordP2uiv = glMultiTexCoordP2uiv_Z;
__gshared glbfn_glMultiTexCoordP2uiv glMultiTexCoordP2uiv_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glMultiTexCoordP2uiv_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP2uiv_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glMultiTexCoordP2uiv_Z = glbindGetProcAddress(`glMultiTexCoordP2uiv`);
  if (*cast(void**)&glMultiTexCoordP2uiv_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP2uiv' not found!`);
  glMultiTexCoordP2uiv_Z(a00,a01,a02,);
}
alias glMultiTexCoordP3ui = glMultiTexCoordP3ui_Z;
__gshared glbfn_glMultiTexCoordP3ui glMultiTexCoordP3ui_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glMultiTexCoordP3ui_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP3ui_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glMultiTexCoordP3ui_Z = glbindGetProcAddress(`glMultiTexCoordP3ui`);
  if (*cast(void**)&glMultiTexCoordP3ui_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP3ui' not found!`);
  glMultiTexCoordP3ui_Z(a00,a01,a02,);
}
alias glMultiTexCoordP3uiv = glMultiTexCoordP3uiv_Z;
__gshared glbfn_glMultiTexCoordP3uiv glMultiTexCoordP3uiv_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glMultiTexCoordP3uiv_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP3uiv_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glMultiTexCoordP3uiv_Z = glbindGetProcAddress(`glMultiTexCoordP3uiv`);
  if (*cast(void**)&glMultiTexCoordP3uiv_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP3uiv' not found!`);
  glMultiTexCoordP3uiv_Z(a00,a01,a02,);
}
alias glMultiTexCoordP4ui = glMultiTexCoordP4ui_Z;
__gshared glbfn_glMultiTexCoordP4ui glMultiTexCoordP4ui_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glMultiTexCoordP4ui_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP4ui_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glMultiTexCoordP4ui_Z = glbindGetProcAddress(`glMultiTexCoordP4ui`);
  if (*cast(void**)&glMultiTexCoordP4ui_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP4ui' not found!`);
  glMultiTexCoordP4ui_Z(a00,a01,a02,);
}
alias glMultiTexCoordP4uiv = glMultiTexCoordP4uiv_Z;
__gshared glbfn_glMultiTexCoordP4uiv glMultiTexCoordP4uiv_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glMultiTexCoordP4uiv_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoordP4uiv_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glMultiTexCoordP4uiv_Z = glbindGetProcAddress(`glMultiTexCoordP4uiv`);
  if (*cast(void**)&glMultiTexCoordP4uiv_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP4uiv' not found!`);
  glMultiTexCoordP4uiv_Z(a00,a01,a02,);
}
alias glNormalP3ui = glNormalP3ui_Z;
__gshared glbfn_glNormalP3ui glNormalP3ui_Z = function void (uint a00,uint a01) {
  glbfn_glNormalP3ui_loader(a00,a01,);
};
private void glbfn_glNormalP3ui_loader (uint a00,uint a01) {
  *cast(void**)&glNormalP3ui_Z = glbindGetProcAddress(`glNormalP3ui`);
  if (*cast(void**)&glNormalP3ui_Z is null) assert(0, `OpenGL function 'glNormalP3ui' not found!`);
  glNormalP3ui_Z(a00,a01,);
}
alias glNormalP3uiv = glNormalP3uiv_Z;
__gshared glbfn_glNormalP3uiv glNormalP3uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glNormalP3uiv_loader(a00,a01,);
};
private void glbfn_glNormalP3uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glNormalP3uiv_Z = glbindGetProcAddress(`glNormalP3uiv`);
  if (*cast(void**)&glNormalP3uiv_Z is null) assert(0, `OpenGL function 'glNormalP3uiv' not found!`);
  glNormalP3uiv_Z(a00,a01,);
}
alias glColorP3ui = glColorP3ui_Z;
__gshared glbfn_glColorP3ui glColorP3ui_Z = function void (uint a00,uint a01) {
  glbfn_glColorP3ui_loader(a00,a01,);
};
private void glbfn_glColorP3ui_loader (uint a00,uint a01) {
  *cast(void**)&glColorP3ui_Z = glbindGetProcAddress(`glColorP3ui`);
  if (*cast(void**)&glColorP3ui_Z is null) assert(0, `OpenGL function 'glColorP3ui' not found!`);
  glColorP3ui_Z(a00,a01,);
}
alias glColorP3uiv = glColorP3uiv_Z;
__gshared glbfn_glColorP3uiv glColorP3uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glColorP3uiv_loader(a00,a01,);
};
private void glbfn_glColorP3uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glColorP3uiv_Z = glbindGetProcAddress(`glColorP3uiv`);
  if (*cast(void**)&glColorP3uiv_Z is null) assert(0, `OpenGL function 'glColorP3uiv' not found!`);
  glColorP3uiv_Z(a00,a01,);
}
alias glColorP4ui = glColorP4ui_Z;
__gshared glbfn_glColorP4ui glColorP4ui_Z = function void (uint a00,uint a01) {
  glbfn_glColorP4ui_loader(a00,a01,);
};
private void glbfn_glColorP4ui_loader (uint a00,uint a01) {
  *cast(void**)&glColorP4ui_Z = glbindGetProcAddress(`glColorP4ui`);
  if (*cast(void**)&glColorP4ui_Z is null) assert(0, `OpenGL function 'glColorP4ui' not found!`);
  glColorP4ui_Z(a00,a01,);
}
alias glColorP4uiv = glColorP4uiv_Z;
__gshared glbfn_glColorP4uiv glColorP4uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glColorP4uiv_loader(a00,a01,);
};
private void glbfn_glColorP4uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glColorP4uiv_Z = glbindGetProcAddress(`glColorP4uiv`);
  if (*cast(void**)&glColorP4uiv_Z is null) assert(0, `OpenGL function 'glColorP4uiv' not found!`);
  glColorP4uiv_Z(a00,a01,);
}
alias glSecondaryColorP3ui = glSecondaryColorP3ui_Z;
__gshared glbfn_glSecondaryColorP3ui glSecondaryColorP3ui_Z = function void (uint a00,uint a01) {
  glbfn_glSecondaryColorP3ui_loader(a00,a01,);
};
private void glbfn_glSecondaryColorP3ui_loader (uint a00,uint a01) {
  *cast(void**)&glSecondaryColorP3ui_Z = glbindGetProcAddress(`glSecondaryColorP3ui`);
  if (*cast(void**)&glSecondaryColorP3ui_Z is null) assert(0, `OpenGL function 'glSecondaryColorP3ui' not found!`);
  glSecondaryColorP3ui_Z(a00,a01,);
}
alias glSecondaryColorP3uiv = glSecondaryColorP3uiv_Z;
__gshared glbfn_glSecondaryColorP3uiv glSecondaryColorP3uiv_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glSecondaryColorP3uiv_loader(a00,a01,);
};
private void glbfn_glSecondaryColorP3uiv_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glSecondaryColorP3uiv_Z = glbindGetProcAddress(`glSecondaryColorP3uiv`);
  if (*cast(void**)&glSecondaryColorP3uiv_Z is null) assert(0, `OpenGL function 'glSecondaryColorP3uiv' not found!`);
  glSecondaryColorP3uiv_Z(a00,a01,);
}
alias glMinSampleShading = glMinSampleShading_Z;
__gshared glbfn_glMinSampleShading glMinSampleShading_Z = function void (float a00) {
  glbfn_glMinSampleShading_loader(a00,);
};
private void glbfn_glMinSampleShading_loader (float a00) {
  *cast(void**)&glMinSampleShading_Z = glbindGetProcAddress(`glMinSampleShading`);
  if (*cast(void**)&glMinSampleShading_Z is null) assert(0, `OpenGL function 'glMinSampleShading' not found!`);
  glMinSampleShading_Z(a00,);
}
alias glBlendEquationi = glBlendEquationi_Z;
__gshared glbfn_glBlendEquationi glBlendEquationi_Z = function void (uint a00,uint a01) {
  glbfn_glBlendEquationi_loader(a00,a01,);
};
private void glbfn_glBlendEquationi_loader (uint a00,uint a01) {
  *cast(void**)&glBlendEquationi_Z = glbindGetProcAddress(`glBlendEquationi`);
  if (*cast(void**)&glBlendEquationi_Z is null) assert(0, `OpenGL function 'glBlendEquationi' not found!`);
  glBlendEquationi_Z(a00,a01,);
}
alias glBlendEquationSeparatei = glBlendEquationSeparatei_Z;
__gshared glbfn_glBlendEquationSeparatei glBlendEquationSeparatei_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBlendEquationSeparatei_loader(a00,a01,a02,);
};
private void glbfn_glBlendEquationSeparatei_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBlendEquationSeparatei_Z = glbindGetProcAddress(`glBlendEquationSeparatei`);
  if (*cast(void**)&glBlendEquationSeparatei_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparatei' not found!`);
  glBlendEquationSeparatei_Z(a00,a01,a02,);
}
alias glBlendFunci = glBlendFunci_Z;
__gshared glbfn_glBlendFunci glBlendFunci_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBlendFunci_loader(a00,a01,a02,);
};
private void glbfn_glBlendFunci_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBlendFunci_Z = glbindGetProcAddress(`glBlendFunci`);
  if (*cast(void**)&glBlendFunci_Z is null) assert(0, `OpenGL function 'glBlendFunci' not found!`);
  glBlendFunci_Z(a00,a01,a02,);
}
alias glBlendFuncSeparatei = glBlendFuncSeparatei_Z;
__gshared glbfn_glBlendFuncSeparatei glBlendFuncSeparatei_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glBlendFuncSeparatei_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBlendFuncSeparatei_loader (uint a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glBlendFuncSeparatei_Z = glbindGetProcAddress(`glBlendFuncSeparatei`);
  if (*cast(void**)&glBlendFuncSeparatei_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparatei' not found!`);
  glBlendFuncSeparatei_Z(a00,a01,a02,a03,a04,);
}
alias glDrawArraysIndirect = glDrawArraysIndirect_Z;
__gshared glbfn_glDrawArraysIndirect glDrawArraysIndirect_Z = function void (uint a00,const(void)* a01) {
  glbfn_glDrawArraysIndirect_loader(a00,a01,);
};
private void glbfn_glDrawArraysIndirect_loader (uint a00,const(void)* a01) {
  *cast(void**)&glDrawArraysIndirect_Z = glbindGetProcAddress(`glDrawArraysIndirect`);
  if (*cast(void**)&glDrawArraysIndirect_Z is null) assert(0, `OpenGL function 'glDrawArraysIndirect' not found!`);
  glDrawArraysIndirect_Z(a00,a01,);
}
alias glDrawElementsIndirect = glDrawElementsIndirect_Z;
__gshared glbfn_glDrawElementsIndirect glDrawElementsIndirect_Z = function void (uint a00,uint a01,const(void)* a02) {
  glbfn_glDrawElementsIndirect_loader(a00,a01,a02,);
};
private void glbfn_glDrawElementsIndirect_loader (uint a00,uint a01,const(void)* a02) {
  *cast(void**)&glDrawElementsIndirect_Z = glbindGetProcAddress(`glDrawElementsIndirect`);
  if (*cast(void**)&glDrawElementsIndirect_Z is null) assert(0, `OpenGL function 'glDrawElementsIndirect' not found!`);
  glDrawElementsIndirect_Z(a00,a01,a02,);
}
alias glUniform1d = glUniform1d_Z;
__gshared glbfn_glUniform1d glUniform1d_Z = function void (int a00,double a01) {
  glbfn_glUniform1d_loader(a00,a01,);
};
private void glbfn_glUniform1d_loader (int a00,double a01) {
  *cast(void**)&glUniform1d_Z = glbindGetProcAddress(`glUniform1d`);
  if (*cast(void**)&glUniform1d_Z is null) assert(0, `OpenGL function 'glUniform1d' not found!`);
  glUniform1d_Z(a00,a01,);
}
alias glUniform2d = glUniform2d_Z;
__gshared glbfn_glUniform2d glUniform2d_Z = function void (int a00,double a01,double a02) {
  glbfn_glUniform2d_loader(a00,a01,a02,);
};
private void glbfn_glUniform2d_loader (int a00,double a01,double a02) {
  *cast(void**)&glUniform2d_Z = glbindGetProcAddress(`glUniform2d`);
  if (*cast(void**)&glUniform2d_Z is null) assert(0, `OpenGL function 'glUniform2d' not found!`);
  glUniform2d_Z(a00,a01,a02,);
}
alias glUniform3d = glUniform3d_Z;
__gshared glbfn_glUniform3d glUniform3d_Z = function void (int a00,double a01,double a02,double a03) {
  glbfn_glUniform3d_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3d_loader (int a00,double a01,double a02,double a03) {
  *cast(void**)&glUniform3d_Z = glbindGetProcAddress(`glUniform3d`);
  if (*cast(void**)&glUniform3d_Z is null) assert(0, `OpenGL function 'glUniform3d' not found!`);
  glUniform3d_Z(a00,a01,a02,a03,);
}
alias glUniform4d = glUniform4d_Z;
__gshared glbfn_glUniform4d glUniform4d_Z = function void (int a00,double a01,double a02,double a03,double a04) {
  glbfn_glUniform4d_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4d_loader (int a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glUniform4d_Z = glbindGetProcAddress(`glUniform4d`);
  if (*cast(void**)&glUniform4d_Z is null) assert(0, `OpenGL function 'glUniform4d' not found!`);
  glUniform4d_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1dv = glUniform1dv_Z;
__gshared glbfn_glUniform1dv glUniform1dv_Z = function void (int a00,int a01,const(double)* a02) {
  glbfn_glUniform1dv_loader(a00,a01,a02,);
};
private void glbfn_glUniform1dv_loader (int a00,int a01,const(double)* a02) {
  *cast(void**)&glUniform1dv_Z = glbindGetProcAddress(`glUniform1dv`);
  if (*cast(void**)&glUniform1dv_Z is null) assert(0, `OpenGL function 'glUniform1dv' not found!`);
  glUniform1dv_Z(a00,a01,a02,);
}
alias glUniform2dv = glUniform2dv_Z;
__gshared glbfn_glUniform2dv glUniform2dv_Z = function void (int a00,int a01,const(double)* a02) {
  glbfn_glUniform2dv_loader(a00,a01,a02,);
};
private void glbfn_glUniform2dv_loader (int a00,int a01,const(double)* a02) {
  *cast(void**)&glUniform2dv_Z = glbindGetProcAddress(`glUniform2dv`);
  if (*cast(void**)&glUniform2dv_Z is null) assert(0, `OpenGL function 'glUniform2dv' not found!`);
  glUniform2dv_Z(a00,a01,a02,);
}
alias glUniform3dv = glUniform3dv_Z;
__gshared glbfn_glUniform3dv glUniform3dv_Z = function void (int a00,int a01,const(double)* a02) {
  glbfn_glUniform3dv_loader(a00,a01,a02,);
};
private void glbfn_glUniform3dv_loader (int a00,int a01,const(double)* a02) {
  *cast(void**)&glUniform3dv_Z = glbindGetProcAddress(`glUniform3dv`);
  if (*cast(void**)&glUniform3dv_Z is null) assert(0, `OpenGL function 'glUniform3dv' not found!`);
  glUniform3dv_Z(a00,a01,a02,);
}
alias glUniform4dv = glUniform4dv_Z;
__gshared glbfn_glUniform4dv glUniform4dv_Z = function void (int a00,int a01,const(double)* a02) {
  glbfn_glUniform4dv_loader(a00,a01,a02,);
};
private void glbfn_glUniform4dv_loader (int a00,int a01,const(double)* a02) {
  *cast(void**)&glUniform4dv_Z = glbindGetProcAddress(`glUniform4dv`);
  if (*cast(void**)&glUniform4dv_Z is null) assert(0, `OpenGL function 'glUniform4dv' not found!`);
  glUniform4dv_Z(a00,a01,a02,);
}
alias glUniformMatrix2dv = glUniformMatrix2dv_Z;
__gshared glbfn_glUniformMatrix2dv glUniformMatrix2dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix2dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix2dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix2dv_Z = glbindGetProcAddress(`glUniformMatrix2dv`);
  if (*cast(void**)&glUniformMatrix2dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix2dv' not found!`);
  glUniformMatrix2dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix3dv = glUniformMatrix3dv_Z;
__gshared glbfn_glUniformMatrix3dv glUniformMatrix3dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix3dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix3dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix3dv_Z = glbindGetProcAddress(`glUniformMatrix3dv`);
  if (*cast(void**)&glUniformMatrix3dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix3dv' not found!`);
  glUniformMatrix3dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix4dv = glUniformMatrix4dv_Z;
__gshared glbfn_glUniformMatrix4dv glUniformMatrix4dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix4dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix4dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix4dv_Z = glbindGetProcAddress(`glUniformMatrix4dv`);
  if (*cast(void**)&glUniformMatrix4dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix4dv' not found!`);
  glUniformMatrix4dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix2x3dv = glUniformMatrix2x3dv_Z;
__gshared glbfn_glUniformMatrix2x3dv glUniformMatrix2x3dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix2x3dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix2x3dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix2x3dv_Z = glbindGetProcAddress(`glUniformMatrix2x3dv`);
  if (*cast(void**)&glUniformMatrix2x3dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x3dv' not found!`);
  glUniformMatrix2x3dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix2x4dv = glUniformMatrix2x4dv_Z;
__gshared glbfn_glUniformMatrix2x4dv glUniformMatrix2x4dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix2x4dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix2x4dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix2x4dv_Z = glbindGetProcAddress(`glUniformMatrix2x4dv`);
  if (*cast(void**)&glUniformMatrix2x4dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x4dv' not found!`);
  glUniformMatrix2x4dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix3x2dv = glUniformMatrix3x2dv_Z;
__gshared glbfn_glUniformMatrix3x2dv glUniformMatrix3x2dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix3x2dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix3x2dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix3x2dv_Z = glbindGetProcAddress(`glUniformMatrix3x2dv`);
  if (*cast(void**)&glUniformMatrix3x2dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x2dv' not found!`);
  glUniformMatrix3x2dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix3x4dv = glUniformMatrix3x4dv_Z;
__gshared glbfn_glUniformMatrix3x4dv glUniformMatrix3x4dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix3x4dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix3x4dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix3x4dv_Z = glbindGetProcAddress(`glUniformMatrix3x4dv`);
  if (*cast(void**)&glUniformMatrix3x4dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x4dv' not found!`);
  glUniformMatrix3x4dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix4x2dv = glUniformMatrix4x2dv_Z;
__gshared glbfn_glUniformMatrix4x2dv glUniformMatrix4x2dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix4x2dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix4x2dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix4x2dv_Z = glbindGetProcAddress(`glUniformMatrix4x2dv`);
  if (*cast(void**)&glUniformMatrix4x2dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x2dv' not found!`);
  glUniformMatrix4x2dv_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix4x3dv = glUniformMatrix4x3dv_Z;
__gshared glbfn_glUniformMatrix4x3dv glUniformMatrix4x3dv_Z = function void (int a00,int a01,ubyte a02,const(double)* a03) {
  glbfn_glUniformMatrix4x3dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix4x3dv_loader (int a00,int a01,ubyte a02,const(double)* a03) {
  *cast(void**)&glUniformMatrix4x3dv_Z = glbindGetProcAddress(`glUniformMatrix4x3dv`);
  if (*cast(void**)&glUniformMatrix4x3dv_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x3dv' not found!`);
  glUniformMatrix4x3dv_Z(a00,a01,a02,a03,);
}
alias glGetUniformdv = glGetUniformdv_Z;
__gshared glbfn_glGetUniformdv glGetUniformdv_Z = function void (uint a00,int a01,double* a02) {
  glbfn_glGetUniformdv_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformdv_loader (uint a00,int a01,double* a02) {
  *cast(void**)&glGetUniformdv_Z = glbindGetProcAddress(`glGetUniformdv`);
  if (*cast(void**)&glGetUniformdv_Z is null) assert(0, `OpenGL function 'glGetUniformdv' not found!`);
  glGetUniformdv_Z(a00,a01,a02,);
}
alias glGetSubroutineUniformLocation = glGetSubroutineUniformLocation_Z;
__gshared glbfn_glGetSubroutineUniformLocation glGetSubroutineUniformLocation_Z = function int (uint a00,uint a01,const(char)* a02) {
  return glbfn_glGetSubroutineUniformLocation_loader(a00,a01,a02,);
};
private int glbfn_glGetSubroutineUniformLocation_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glGetSubroutineUniformLocation_Z = glbindGetProcAddress(`glGetSubroutineUniformLocation`);
  if (*cast(void**)&glGetSubroutineUniformLocation_Z is null) assert(0, `OpenGL function 'glGetSubroutineUniformLocation' not found!`);
  return glGetSubroutineUniformLocation_Z(a00,a01,a02,);
}
alias glGetSubroutineIndex = glGetSubroutineIndex_Z;
__gshared glbfn_glGetSubroutineIndex glGetSubroutineIndex_Z = function uint (uint a00,uint a01,const(char)* a02) {
  return glbfn_glGetSubroutineIndex_loader(a00,a01,a02,);
};
private uint glbfn_glGetSubroutineIndex_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glGetSubroutineIndex_Z = glbindGetProcAddress(`glGetSubroutineIndex`);
  if (*cast(void**)&glGetSubroutineIndex_Z is null) assert(0, `OpenGL function 'glGetSubroutineIndex' not found!`);
  return glGetSubroutineIndex_Z(a00,a01,a02,);
}
alias glGetActiveSubroutineUniformiv = glGetActiveSubroutineUniformiv_Z;
__gshared glbfn_glGetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv_Z = function void (uint a00,uint a01,uint a02,uint a03,int* a04) {
  glbfn_glGetActiveSubroutineUniformiv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetActiveSubroutineUniformiv_loader (uint a00,uint a01,uint a02,uint a03,int* a04) {
  *cast(void**)&glGetActiveSubroutineUniformiv_Z = glbindGetProcAddress(`glGetActiveSubroutineUniformiv`);
  if (*cast(void**)&glGetActiveSubroutineUniformiv_Z is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformiv' not found!`);
  glGetActiveSubroutineUniformiv_Z(a00,a01,a02,a03,a04,);
}
alias glGetActiveSubroutineUniformName = glGetActiveSubroutineUniformName_Z;
__gshared glbfn_glGetActiveSubroutineUniformName glGetActiveSubroutineUniformName_Z = function void (uint a00,uint a01,uint a02,int a03,int* a04,char* a05) {
  glbfn_glGetActiveSubroutineUniformName_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetActiveSubroutineUniformName_loader (uint a00,uint a01,uint a02,int a03,int* a04,char* a05) {
  *cast(void**)&glGetActiveSubroutineUniformName_Z = glbindGetProcAddress(`glGetActiveSubroutineUniformName`);
  if (*cast(void**)&glGetActiveSubroutineUniformName_Z is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformName' not found!`);
  glGetActiveSubroutineUniformName_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetActiveSubroutineName = glGetActiveSubroutineName_Z;
__gshared glbfn_glGetActiveSubroutineName glGetActiveSubroutineName_Z = function void (uint a00,uint a01,uint a02,int a03,int* a04,char* a05) {
  glbfn_glGetActiveSubroutineName_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetActiveSubroutineName_loader (uint a00,uint a01,uint a02,int a03,int* a04,char* a05) {
  *cast(void**)&glGetActiveSubroutineName_Z = glbindGetProcAddress(`glGetActiveSubroutineName`);
  if (*cast(void**)&glGetActiveSubroutineName_Z is null) assert(0, `OpenGL function 'glGetActiveSubroutineName' not found!`);
  glGetActiveSubroutineName_Z(a00,a01,a02,a03,a04,a05,);
}
alias glUniformSubroutinesuiv = glUniformSubroutinesuiv_Z;
__gshared glbfn_glUniformSubroutinesuiv glUniformSubroutinesuiv_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glUniformSubroutinesuiv_loader(a00,a01,a02,);
};
private void glbfn_glUniformSubroutinesuiv_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniformSubroutinesuiv_Z = glbindGetProcAddress(`glUniformSubroutinesuiv`);
  if (*cast(void**)&glUniformSubroutinesuiv_Z is null) assert(0, `OpenGL function 'glUniformSubroutinesuiv' not found!`);
  glUniformSubroutinesuiv_Z(a00,a01,a02,);
}
alias glGetUniformSubroutineuiv = glGetUniformSubroutineuiv_Z;
__gshared glbfn_glGetUniformSubroutineuiv glGetUniformSubroutineuiv_Z = function void (uint a00,int a01,uint* a02) {
  glbfn_glGetUniformSubroutineuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformSubroutineuiv_loader (uint a00,int a01,uint* a02) {
  *cast(void**)&glGetUniformSubroutineuiv_Z = glbindGetProcAddress(`glGetUniformSubroutineuiv`);
  if (*cast(void**)&glGetUniformSubroutineuiv_Z is null) assert(0, `OpenGL function 'glGetUniformSubroutineuiv' not found!`);
  glGetUniformSubroutineuiv_Z(a00,a01,a02,);
}
alias glGetProgramStageiv = glGetProgramStageiv_Z;
__gshared glbfn_glGetProgramStageiv glGetProgramStageiv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetProgramStageiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramStageiv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetProgramStageiv_Z = glbindGetProcAddress(`glGetProgramStageiv`);
  if (*cast(void**)&glGetProgramStageiv_Z is null) assert(0, `OpenGL function 'glGetProgramStageiv' not found!`);
  glGetProgramStageiv_Z(a00,a01,a02,a03,);
}
alias glPatchParameteri = glPatchParameteri_Z;
__gshared glbfn_glPatchParameteri glPatchParameteri_Z = function void (uint a00,int a01) {
  glbfn_glPatchParameteri_loader(a00,a01,);
};
private void glbfn_glPatchParameteri_loader (uint a00,int a01) {
  *cast(void**)&glPatchParameteri_Z = glbindGetProcAddress(`glPatchParameteri`);
  if (*cast(void**)&glPatchParameteri_Z is null) assert(0, `OpenGL function 'glPatchParameteri' not found!`);
  glPatchParameteri_Z(a00,a01,);
}
alias glPatchParameterfv = glPatchParameterfv_Z;
__gshared glbfn_glPatchParameterfv glPatchParameterfv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glPatchParameterfv_loader(a00,a01,);
};
private void glbfn_glPatchParameterfv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glPatchParameterfv_Z = glbindGetProcAddress(`glPatchParameterfv`);
  if (*cast(void**)&glPatchParameterfv_Z is null) assert(0, `OpenGL function 'glPatchParameterfv' not found!`);
  glPatchParameterfv_Z(a00,a01,);
}
alias glBindTransformFeedback = glBindTransformFeedback_Z;
__gshared glbfn_glBindTransformFeedback glBindTransformFeedback_Z = function void (uint a00,uint a01) {
  glbfn_glBindTransformFeedback_loader(a00,a01,);
};
private void glbfn_glBindTransformFeedback_loader (uint a00,uint a01) {
  *cast(void**)&glBindTransformFeedback_Z = glbindGetProcAddress(`glBindTransformFeedback`);
  if (*cast(void**)&glBindTransformFeedback_Z is null) assert(0, `OpenGL function 'glBindTransformFeedback' not found!`);
  glBindTransformFeedback_Z(a00,a01,);
}
alias glDeleteTransformFeedbacks = glDeleteTransformFeedbacks_Z;
__gshared glbfn_glDeleteTransformFeedbacks glDeleteTransformFeedbacks_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteTransformFeedbacks_loader(a00,a01,);
};
private void glbfn_glDeleteTransformFeedbacks_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteTransformFeedbacks_Z = glbindGetProcAddress(`glDeleteTransformFeedbacks`);
  if (*cast(void**)&glDeleteTransformFeedbacks_Z is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacks' not found!`);
  glDeleteTransformFeedbacks_Z(a00,a01,);
}
alias glGenTransformFeedbacks = glGenTransformFeedbacks_Z;
__gshared glbfn_glGenTransformFeedbacks glGenTransformFeedbacks_Z = function void (int a00,uint* a01) {
  glbfn_glGenTransformFeedbacks_loader(a00,a01,);
};
private void glbfn_glGenTransformFeedbacks_loader (int a00,uint* a01) {
  *cast(void**)&glGenTransformFeedbacks_Z = glbindGetProcAddress(`glGenTransformFeedbacks`);
  if (*cast(void**)&glGenTransformFeedbacks_Z is null) assert(0, `OpenGL function 'glGenTransformFeedbacks' not found!`);
  glGenTransformFeedbacks_Z(a00,a01,);
}
alias glIsTransformFeedback = glIsTransformFeedback_Z;
__gshared glbfn_glIsTransformFeedback glIsTransformFeedback_Z = function ubyte (uint a00) {
  return glbfn_glIsTransformFeedback_loader(a00,);
};
private ubyte glbfn_glIsTransformFeedback_loader (uint a00) {
  *cast(void**)&glIsTransformFeedback_Z = glbindGetProcAddress(`glIsTransformFeedback`);
  if (*cast(void**)&glIsTransformFeedback_Z is null) assert(0, `OpenGL function 'glIsTransformFeedback' not found!`);
  return glIsTransformFeedback_Z(a00,);
}
alias glPauseTransformFeedback = glPauseTransformFeedback_Z;
__gshared glbfn_glPauseTransformFeedback glPauseTransformFeedback_Z = function void () {
  glbfn_glPauseTransformFeedback_loader();
};
private void glbfn_glPauseTransformFeedback_loader () {
  *cast(void**)&glPauseTransformFeedback_Z = glbindGetProcAddress(`glPauseTransformFeedback`);
  if (*cast(void**)&glPauseTransformFeedback_Z is null) assert(0, `OpenGL function 'glPauseTransformFeedback' not found!`);
  glPauseTransformFeedback_Z();
}
alias glResumeTransformFeedback = glResumeTransformFeedback_Z;
__gshared glbfn_glResumeTransformFeedback glResumeTransformFeedback_Z = function void () {
  glbfn_glResumeTransformFeedback_loader();
};
private void glbfn_glResumeTransformFeedback_loader () {
  *cast(void**)&glResumeTransformFeedback_Z = glbindGetProcAddress(`glResumeTransformFeedback`);
  if (*cast(void**)&glResumeTransformFeedback_Z is null) assert(0, `OpenGL function 'glResumeTransformFeedback' not found!`);
  glResumeTransformFeedback_Z();
}
alias glDrawTransformFeedback = glDrawTransformFeedback_Z;
__gshared glbfn_glDrawTransformFeedback glDrawTransformFeedback_Z = function void (uint a00,uint a01) {
  glbfn_glDrawTransformFeedback_loader(a00,a01,);
};
private void glbfn_glDrawTransformFeedback_loader (uint a00,uint a01) {
  *cast(void**)&glDrawTransformFeedback_Z = glbindGetProcAddress(`glDrawTransformFeedback`);
  if (*cast(void**)&glDrawTransformFeedback_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedback' not found!`);
  glDrawTransformFeedback_Z(a00,a01,);
}
alias glDrawTransformFeedbackStream = glDrawTransformFeedbackStream_Z;
__gshared glbfn_glDrawTransformFeedbackStream glDrawTransformFeedbackStream_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glDrawTransformFeedbackStream_loader(a00,a01,a02,);
};
private void glbfn_glDrawTransformFeedbackStream_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glDrawTransformFeedbackStream_Z = glbindGetProcAddress(`glDrawTransformFeedbackStream`);
  if (*cast(void**)&glDrawTransformFeedbackStream_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStream' not found!`);
  glDrawTransformFeedbackStream_Z(a00,a01,a02,);
}
alias glBeginQueryIndexed = glBeginQueryIndexed_Z;
__gshared glbfn_glBeginQueryIndexed glBeginQueryIndexed_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBeginQueryIndexed_loader(a00,a01,a02,);
};
private void glbfn_glBeginQueryIndexed_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBeginQueryIndexed_Z = glbindGetProcAddress(`glBeginQueryIndexed`);
  if (*cast(void**)&glBeginQueryIndexed_Z is null) assert(0, `OpenGL function 'glBeginQueryIndexed' not found!`);
  glBeginQueryIndexed_Z(a00,a01,a02,);
}
alias glEndQueryIndexed = glEndQueryIndexed_Z;
__gshared glbfn_glEndQueryIndexed glEndQueryIndexed_Z = function void (uint a00,uint a01) {
  glbfn_glEndQueryIndexed_loader(a00,a01,);
};
private void glbfn_glEndQueryIndexed_loader (uint a00,uint a01) {
  *cast(void**)&glEndQueryIndexed_Z = glbindGetProcAddress(`glEndQueryIndexed`);
  if (*cast(void**)&glEndQueryIndexed_Z is null) assert(0, `OpenGL function 'glEndQueryIndexed' not found!`);
  glEndQueryIndexed_Z(a00,a01,);
}
alias glGetQueryIndexediv = glGetQueryIndexediv_Z;
__gshared glbfn_glGetQueryIndexediv glGetQueryIndexediv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetQueryIndexediv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetQueryIndexediv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetQueryIndexediv_Z = glbindGetProcAddress(`glGetQueryIndexediv`);
  if (*cast(void**)&glGetQueryIndexediv_Z is null) assert(0, `OpenGL function 'glGetQueryIndexediv' not found!`);
  glGetQueryIndexediv_Z(a00,a01,a02,a03,);
}
alias glReleaseShaderCompiler = glReleaseShaderCompiler_Z;
__gshared glbfn_glReleaseShaderCompiler glReleaseShaderCompiler_Z = function void () {
  glbfn_glReleaseShaderCompiler_loader();
};
private void glbfn_glReleaseShaderCompiler_loader () {
  *cast(void**)&glReleaseShaderCompiler_Z = glbindGetProcAddress(`glReleaseShaderCompiler`);
  if (*cast(void**)&glReleaseShaderCompiler_Z is null) assert(0, `OpenGL function 'glReleaseShaderCompiler' not found!`);
  glReleaseShaderCompiler_Z();
}
alias glShaderBinary = glShaderBinary_Z;
__gshared glbfn_glShaderBinary glShaderBinary_Z = function void (int a00,const(uint)* a01,uint a02,const(void)* a03,int a04) {
  glbfn_glShaderBinary_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glShaderBinary_loader (int a00,const(uint)* a01,uint a02,const(void)* a03,int a04) {
  *cast(void**)&glShaderBinary_Z = glbindGetProcAddress(`glShaderBinary`);
  if (*cast(void**)&glShaderBinary_Z is null) assert(0, `OpenGL function 'glShaderBinary' not found!`);
  glShaderBinary_Z(a00,a01,a02,a03,a04,);
}
alias glGetShaderPrecisionFormat = glGetShaderPrecisionFormat_Z;
__gshared glbfn_glGetShaderPrecisionFormat glGetShaderPrecisionFormat_Z = function void (uint a00,uint a01,int* a02,int* a03) {
  glbfn_glGetShaderPrecisionFormat_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetShaderPrecisionFormat_loader (uint a00,uint a01,int* a02,int* a03) {
  *cast(void**)&glGetShaderPrecisionFormat_Z = glbindGetProcAddress(`glGetShaderPrecisionFormat`);
  if (*cast(void**)&glGetShaderPrecisionFormat_Z is null) assert(0, `OpenGL function 'glGetShaderPrecisionFormat' not found!`);
  glGetShaderPrecisionFormat_Z(a00,a01,a02,a03,);
}
alias glDepthRangef = glDepthRangef_Z;
__gshared glbfn_glDepthRangef glDepthRangef_Z = function void (float a00,float a01) {
  glbfn_glDepthRangef_loader(a00,a01,);
};
private void glbfn_glDepthRangef_loader (float a00,float a01) {
  *cast(void**)&glDepthRangef_Z = glbindGetProcAddress(`glDepthRangef`);
  if (*cast(void**)&glDepthRangef_Z is null) assert(0, `OpenGL function 'glDepthRangef' not found!`);
  glDepthRangef_Z(a00,a01,);
}
alias glClearDepthf = glClearDepthf_Z;
__gshared glbfn_glClearDepthf glClearDepthf_Z = function void (float a00) {
  glbfn_glClearDepthf_loader(a00,);
};
private void glbfn_glClearDepthf_loader (float a00) {
  *cast(void**)&glClearDepthf_Z = glbindGetProcAddress(`glClearDepthf`);
  if (*cast(void**)&glClearDepthf_Z is null) assert(0, `OpenGL function 'glClearDepthf' not found!`);
  glClearDepthf_Z(a00,);
}
alias glGetProgramBinary = glGetProgramBinary_Z;
__gshared glbfn_glGetProgramBinary glGetProgramBinary_Z = function void (uint a00,int a01,int* a02,uint* a03,void* a04) {
  glbfn_glGetProgramBinary_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetProgramBinary_loader (uint a00,int a01,int* a02,uint* a03,void* a04) {
  *cast(void**)&glGetProgramBinary_Z = glbindGetProcAddress(`glGetProgramBinary`);
  if (*cast(void**)&glGetProgramBinary_Z is null) assert(0, `OpenGL function 'glGetProgramBinary' not found!`);
  glGetProgramBinary_Z(a00,a01,a02,a03,a04,);
}
alias glProgramBinary = glProgramBinary_Z;
__gshared glbfn_glProgramBinary glProgramBinary_Z = function void (uint a00,uint a01,const(void)* a02,int a03) {
  glbfn_glProgramBinary_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramBinary_loader (uint a00,uint a01,const(void)* a02,int a03) {
  *cast(void**)&glProgramBinary_Z = glbindGetProcAddress(`glProgramBinary`);
  if (*cast(void**)&glProgramBinary_Z is null) assert(0, `OpenGL function 'glProgramBinary' not found!`);
  glProgramBinary_Z(a00,a01,a02,a03,);
}
alias glProgramParameteri = glProgramParameteri_Z;
__gshared glbfn_glProgramParameteri glProgramParameteri_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glProgramParameteri_loader(a00,a01,a02,);
};
private void glbfn_glProgramParameteri_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glProgramParameteri_Z = glbindGetProcAddress(`glProgramParameteri`);
  if (*cast(void**)&glProgramParameteri_Z is null) assert(0, `OpenGL function 'glProgramParameteri' not found!`);
  glProgramParameteri_Z(a00,a01,a02,);
}
alias glUseProgramStages = glUseProgramStages_Z;
__gshared glbfn_glUseProgramStages glUseProgramStages_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glUseProgramStages_loader(a00,a01,a02,);
};
private void glbfn_glUseProgramStages_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glUseProgramStages_Z = glbindGetProcAddress(`glUseProgramStages`);
  if (*cast(void**)&glUseProgramStages_Z is null) assert(0, `OpenGL function 'glUseProgramStages' not found!`);
  glUseProgramStages_Z(a00,a01,a02,);
}
alias glActiveShaderProgram = glActiveShaderProgram_Z;
__gshared glbfn_glActiveShaderProgram glActiveShaderProgram_Z = function void (uint a00,uint a01) {
  glbfn_glActiveShaderProgram_loader(a00,a01,);
};
private void glbfn_glActiveShaderProgram_loader (uint a00,uint a01) {
  *cast(void**)&glActiveShaderProgram_Z = glbindGetProcAddress(`glActiveShaderProgram`);
  if (*cast(void**)&glActiveShaderProgram_Z is null) assert(0, `OpenGL function 'glActiveShaderProgram' not found!`);
  glActiveShaderProgram_Z(a00,a01,);
}
alias glCreateShaderProgramv = glCreateShaderProgramv_Z;
__gshared glbfn_glCreateShaderProgramv glCreateShaderProgramv_Z = function uint (uint a00,int a01,const(char*)* a02) {
  return glbfn_glCreateShaderProgramv_loader(a00,a01,a02,);
};
private uint glbfn_glCreateShaderProgramv_loader (uint a00,int a01,const(char*)* a02) {
  *cast(void**)&glCreateShaderProgramv_Z = glbindGetProcAddress(`glCreateShaderProgramv`);
  if (*cast(void**)&glCreateShaderProgramv_Z is null) assert(0, `OpenGL function 'glCreateShaderProgramv' not found!`);
  return glCreateShaderProgramv_Z(a00,a01,a02,);
}
alias glBindProgramPipeline = glBindProgramPipeline_Z;
__gshared glbfn_glBindProgramPipeline glBindProgramPipeline_Z = function void (uint a00) {
  glbfn_glBindProgramPipeline_loader(a00,);
};
private void glbfn_glBindProgramPipeline_loader (uint a00) {
  *cast(void**)&glBindProgramPipeline_Z = glbindGetProcAddress(`glBindProgramPipeline`);
  if (*cast(void**)&glBindProgramPipeline_Z is null) assert(0, `OpenGL function 'glBindProgramPipeline' not found!`);
  glBindProgramPipeline_Z(a00,);
}
alias glDeleteProgramPipelines = glDeleteProgramPipelines_Z;
__gshared glbfn_glDeleteProgramPipelines glDeleteProgramPipelines_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteProgramPipelines_loader(a00,a01,);
};
private void glbfn_glDeleteProgramPipelines_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteProgramPipelines_Z = glbindGetProcAddress(`glDeleteProgramPipelines`);
  if (*cast(void**)&glDeleteProgramPipelines_Z is null) assert(0, `OpenGL function 'glDeleteProgramPipelines' not found!`);
  glDeleteProgramPipelines_Z(a00,a01,);
}
alias glGenProgramPipelines = glGenProgramPipelines_Z;
__gshared glbfn_glGenProgramPipelines glGenProgramPipelines_Z = function void (int a00,uint* a01) {
  glbfn_glGenProgramPipelines_loader(a00,a01,);
};
private void glbfn_glGenProgramPipelines_loader (int a00,uint* a01) {
  *cast(void**)&glGenProgramPipelines_Z = glbindGetProcAddress(`glGenProgramPipelines`);
  if (*cast(void**)&glGenProgramPipelines_Z is null) assert(0, `OpenGL function 'glGenProgramPipelines' not found!`);
  glGenProgramPipelines_Z(a00,a01,);
}
alias glIsProgramPipeline = glIsProgramPipeline_Z;
__gshared glbfn_glIsProgramPipeline glIsProgramPipeline_Z = function ubyte (uint a00) {
  return glbfn_glIsProgramPipeline_loader(a00,);
};
private ubyte glbfn_glIsProgramPipeline_loader (uint a00) {
  *cast(void**)&glIsProgramPipeline_Z = glbindGetProcAddress(`glIsProgramPipeline`);
  if (*cast(void**)&glIsProgramPipeline_Z is null) assert(0, `OpenGL function 'glIsProgramPipeline' not found!`);
  return glIsProgramPipeline_Z(a00,);
}
alias glGetProgramPipelineiv = glGetProgramPipelineiv_Z;
__gshared glbfn_glGetProgramPipelineiv glGetProgramPipelineiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetProgramPipelineiv_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramPipelineiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetProgramPipelineiv_Z = glbindGetProcAddress(`glGetProgramPipelineiv`);
  if (*cast(void**)&glGetProgramPipelineiv_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineiv' not found!`);
  glGetProgramPipelineiv_Z(a00,a01,a02,);
}
alias glProgramUniform1i = glProgramUniform1i_Z;
__gshared glbfn_glProgramUniform1i glProgramUniform1i_Z = function void (uint a00,int a01,int a02) {
  glbfn_glProgramUniform1i_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1i_loader (uint a00,int a01,int a02) {
  *cast(void**)&glProgramUniform1i_Z = glbindGetProcAddress(`glProgramUniform1i`);
  if (*cast(void**)&glProgramUniform1i_Z is null) assert(0, `OpenGL function 'glProgramUniform1i' not found!`);
  glProgramUniform1i_Z(a00,a01,a02,);
}
alias glProgramUniform1iv = glProgramUniform1iv_Z;
__gshared glbfn_glProgramUniform1iv glProgramUniform1iv_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform1iv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1iv_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform1iv_Z = glbindGetProcAddress(`glProgramUniform1iv`);
  if (*cast(void**)&glProgramUniform1iv_Z is null) assert(0, `OpenGL function 'glProgramUniform1iv' not found!`);
  glProgramUniform1iv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1f = glProgramUniform1f_Z;
__gshared glbfn_glProgramUniform1f glProgramUniform1f_Z = function void (uint a00,int a01,float a02) {
  glbfn_glProgramUniform1f_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1f_loader (uint a00,int a01,float a02) {
  *cast(void**)&glProgramUniform1f_Z = glbindGetProcAddress(`glProgramUniform1f`);
  if (*cast(void**)&glProgramUniform1f_Z is null) assert(0, `OpenGL function 'glProgramUniform1f' not found!`);
  glProgramUniform1f_Z(a00,a01,a02,);
}
alias glProgramUniform1fv = glProgramUniform1fv_Z;
__gshared glbfn_glProgramUniform1fv glProgramUniform1fv_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform1fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1fv_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform1fv_Z = glbindGetProcAddress(`glProgramUniform1fv`);
  if (*cast(void**)&glProgramUniform1fv_Z is null) assert(0, `OpenGL function 'glProgramUniform1fv' not found!`);
  glProgramUniform1fv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1d = glProgramUniform1d_Z;
__gshared glbfn_glProgramUniform1d glProgramUniform1d_Z = function void (uint a00,int a01,double a02) {
  glbfn_glProgramUniform1d_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1d_loader (uint a00,int a01,double a02) {
  *cast(void**)&glProgramUniform1d_Z = glbindGetProcAddress(`glProgramUniform1d`);
  if (*cast(void**)&glProgramUniform1d_Z is null) assert(0, `OpenGL function 'glProgramUniform1d' not found!`);
  glProgramUniform1d_Z(a00,a01,a02,);
}
alias glProgramUniform1dv = glProgramUniform1dv_Z;
__gshared glbfn_glProgramUniform1dv glProgramUniform1dv_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform1dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1dv_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform1dv_Z = glbindGetProcAddress(`glProgramUniform1dv`);
  if (*cast(void**)&glProgramUniform1dv_Z is null) assert(0, `OpenGL function 'glProgramUniform1dv' not found!`);
  glProgramUniform1dv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1ui = glProgramUniform1ui_Z;
__gshared glbfn_glProgramUniform1ui glProgramUniform1ui_Z = function void (uint a00,int a01,uint a02) {
  glbfn_glProgramUniform1ui_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1ui_loader (uint a00,int a01,uint a02) {
  *cast(void**)&glProgramUniform1ui_Z = glbindGetProcAddress(`glProgramUniform1ui`);
  if (*cast(void**)&glProgramUniform1ui_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui' not found!`);
  glProgramUniform1ui_Z(a00,a01,a02,);
}
alias glProgramUniform1uiv = glProgramUniform1uiv_Z;
__gshared glbfn_glProgramUniform1uiv glProgramUniform1uiv_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform1uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1uiv_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform1uiv_Z = glbindGetProcAddress(`glProgramUniform1uiv`);
  if (*cast(void**)&glProgramUniform1uiv_Z is null) assert(0, `OpenGL function 'glProgramUniform1uiv' not found!`);
  glProgramUniform1uiv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2i = glProgramUniform2i_Z;
__gshared glbfn_glProgramUniform2i glProgramUniform2i_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glProgramUniform2i_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2i_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glProgramUniform2i_Z = glbindGetProcAddress(`glProgramUniform2i`);
  if (*cast(void**)&glProgramUniform2i_Z is null) assert(0, `OpenGL function 'glProgramUniform2i' not found!`);
  glProgramUniform2i_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2iv = glProgramUniform2iv_Z;
__gshared glbfn_glProgramUniform2iv glProgramUniform2iv_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform2iv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2iv_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform2iv_Z = glbindGetProcAddress(`glProgramUniform2iv`);
  if (*cast(void**)&glProgramUniform2iv_Z is null) assert(0, `OpenGL function 'glProgramUniform2iv' not found!`);
  glProgramUniform2iv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2f = glProgramUniform2f_Z;
__gshared glbfn_glProgramUniform2f glProgramUniform2f_Z = function void (uint a00,int a01,float a02,float a03) {
  glbfn_glProgramUniform2f_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2f_loader (uint a00,int a01,float a02,float a03) {
  *cast(void**)&glProgramUniform2f_Z = glbindGetProcAddress(`glProgramUniform2f`);
  if (*cast(void**)&glProgramUniform2f_Z is null) assert(0, `OpenGL function 'glProgramUniform2f' not found!`);
  glProgramUniform2f_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2fv = glProgramUniform2fv_Z;
__gshared glbfn_glProgramUniform2fv glProgramUniform2fv_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform2fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2fv_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform2fv_Z = glbindGetProcAddress(`glProgramUniform2fv`);
  if (*cast(void**)&glProgramUniform2fv_Z is null) assert(0, `OpenGL function 'glProgramUniform2fv' not found!`);
  glProgramUniform2fv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2d = glProgramUniform2d_Z;
__gshared glbfn_glProgramUniform2d glProgramUniform2d_Z = function void (uint a00,int a01,double a02,double a03) {
  glbfn_glProgramUniform2d_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2d_loader (uint a00,int a01,double a02,double a03) {
  *cast(void**)&glProgramUniform2d_Z = glbindGetProcAddress(`glProgramUniform2d`);
  if (*cast(void**)&glProgramUniform2d_Z is null) assert(0, `OpenGL function 'glProgramUniform2d' not found!`);
  glProgramUniform2d_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2dv = glProgramUniform2dv_Z;
__gshared glbfn_glProgramUniform2dv glProgramUniform2dv_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform2dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2dv_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform2dv_Z = glbindGetProcAddress(`glProgramUniform2dv`);
  if (*cast(void**)&glProgramUniform2dv_Z is null) assert(0, `OpenGL function 'glProgramUniform2dv' not found!`);
  glProgramUniform2dv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2ui = glProgramUniform2ui_Z;
__gshared glbfn_glProgramUniform2ui glProgramUniform2ui_Z = function void (uint a00,int a01,uint a02,uint a03) {
  glbfn_glProgramUniform2ui_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2ui_loader (uint a00,int a01,uint a02,uint a03) {
  *cast(void**)&glProgramUniform2ui_Z = glbindGetProcAddress(`glProgramUniform2ui`);
  if (*cast(void**)&glProgramUniform2ui_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui' not found!`);
  glProgramUniform2ui_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2uiv = glProgramUniform2uiv_Z;
__gshared glbfn_glProgramUniform2uiv glProgramUniform2uiv_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform2uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2uiv_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform2uiv_Z = glbindGetProcAddress(`glProgramUniform2uiv`);
  if (*cast(void**)&glProgramUniform2uiv_Z is null) assert(0, `OpenGL function 'glProgramUniform2uiv' not found!`);
  glProgramUniform2uiv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3i = glProgramUniform3i_Z;
__gshared glbfn_glProgramUniform3i glProgramUniform3i_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glProgramUniform3i_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3i_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glProgramUniform3i_Z = glbindGetProcAddress(`glProgramUniform3i`);
  if (*cast(void**)&glProgramUniform3i_Z is null) assert(0, `OpenGL function 'glProgramUniform3i' not found!`);
  glProgramUniform3i_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform3iv = glProgramUniform3iv_Z;
__gshared glbfn_glProgramUniform3iv glProgramUniform3iv_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform3iv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3iv_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform3iv_Z = glbindGetProcAddress(`glProgramUniform3iv`);
  if (*cast(void**)&glProgramUniform3iv_Z is null) assert(0, `OpenGL function 'glProgramUniform3iv' not found!`);
  glProgramUniform3iv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3f = glProgramUniform3f_Z;
__gshared glbfn_glProgramUniform3f glProgramUniform3f_Z = function void (uint a00,int a01,float a02,float a03,float a04) {
  glbfn_glProgramUniform3f_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3f_loader (uint a00,int a01,float a02,float a03,float a04) {
  *cast(void**)&glProgramUniform3f_Z = glbindGetProcAddress(`glProgramUniform3f`);
  if (*cast(void**)&glProgramUniform3f_Z is null) assert(0, `OpenGL function 'glProgramUniform3f' not found!`);
  glProgramUniform3f_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform3fv = glProgramUniform3fv_Z;
__gshared glbfn_glProgramUniform3fv glProgramUniform3fv_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform3fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3fv_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform3fv_Z = glbindGetProcAddress(`glProgramUniform3fv`);
  if (*cast(void**)&glProgramUniform3fv_Z is null) assert(0, `OpenGL function 'glProgramUniform3fv' not found!`);
  glProgramUniform3fv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3d = glProgramUniform3d_Z;
__gshared glbfn_glProgramUniform3d glProgramUniform3d_Z = function void (uint a00,int a01,double a02,double a03,double a04) {
  glbfn_glProgramUniform3d_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3d_loader (uint a00,int a01,double a02,double a03,double a04) {
  *cast(void**)&glProgramUniform3d_Z = glbindGetProcAddress(`glProgramUniform3d`);
  if (*cast(void**)&glProgramUniform3d_Z is null) assert(0, `OpenGL function 'glProgramUniform3d' not found!`);
  glProgramUniform3d_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform3dv = glProgramUniform3dv_Z;
__gshared glbfn_glProgramUniform3dv glProgramUniform3dv_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform3dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3dv_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform3dv_Z = glbindGetProcAddress(`glProgramUniform3dv`);
  if (*cast(void**)&glProgramUniform3dv_Z is null) assert(0, `OpenGL function 'glProgramUniform3dv' not found!`);
  glProgramUniform3dv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3ui = glProgramUniform3ui_Z;
__gshared glbfn_glProgramUniform3ui glProgramUniform3ui_Z = function void (uint a00,int a01,uint a02,uint a03,uint a04) {
  glbfn_glProgramUniform3ui_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3ui_loader (uint a00,int a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glProgramUniform3ui_Z = glbindGetProcAddress(`glProgramUniform3ui`);
  if (*cast(void**)&glProgramUniform3ui_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui' not found!`);
  glProgramUniform3ui_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform3uiv = glProgramUniform3uiv_Z;
__gshared glbfn_glProgramUniform3uiv glProgramUniform3uiv_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform3uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3uiv_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform3uiv_Z = glbindGetProcAddress(`glProgramUniform3uiv`);
  if (*cast(void**)&glProgramUniform3uiv_Z is null) assert(0, `OpenGL function 'glProgramUniform3uiv' not found!`);
  glProgramUniform3uiv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4i = glProgramUniform4i_Z;
__gshared glbfn_glProgramUniform4i glProgramUniform4i_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glProgramUniform4i_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4i_loader (uint a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glProgramUniform4i_Z = glbindGetProcAddress(`glProgramUniform4i`);
  if (*cast(void**)&glProgramUniform4i_Z is null) assert(0, `OpenGL function 'glProgramUniform4i' not found!`);
  glProgramUniform4i_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform4iv = glProgramUniform4iv_Z;
__gshared glbfn_glProgramUniform4iv glProgramUniform4iv_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform4iv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4iv_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform4iv_Z = glbindGetProcAddress(`glProgramUniform4iv`);
  if (*cast(void**)&glProgramUniform4iv_Z is null) assert(0, `OpenGL function 'glProgramUniform4iv' not found!`);
  glProgramUniform4iv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4f = glProgramUniform4f_Z;
__gshared glbfn_glProgramUniform4f glProgramUniform4f_Z = function void (uint a00,int a01,float a02,float a03,float a04,float a05) {
  glbfn_glProgramUniform4f_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4f_loader (uint a00,int a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glProgramUniform4f_Z = glbindGetProcAddress(`glProgramUniform4f`);
  if (*cast(void**)&glProgramUniform4f_Z is null) assert(0, `OpenGL function 'glProgramUniform4f' not found!`);
  glProgramUniform4f_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform4fv = glProgramUniform4fv_Z;
__gshared glbfn_glProgramUniform4fv glProgramUniform4fv_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform4fv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4fv_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform4fv_Z = glbindGetProcAddress(`glProgramUniform4fv`);
  if (*cast(void**)&glProgramUniform4fv_Z is null) assert(0, `OpenGL function 'glProgramUniform4fv' not found!`);
  glProgramUniform4fv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4d = glProgramUniform4d_Z;
__gshared glbfn_glProgramUniform4d glProgramUniform4d_Z = function void (uint a00,int a01,double a02,double a03,double a04,double a05) {
  glbfn_glProgramUniform4d_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4d_loader (uint a00,int a01,double a02,double a03,double a04,double a05) {
  *cast(void**)&glProgramUniform4d_Z = glbindGetProcAddress(`glProgramUniform4d`);
  if (*cast(void**)&glProgramUniform4d_Z is null) assert(0, `OpenGL function 'glProgramUniform4d' not found!`);
  glProgramUniform4d_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform4dv = glProgramUniform4dv_Z;
__gshared glbfn_glProgramUniform4dv glProgramUniform4dv_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform4dv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4dv_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform4dv_Z = glbindGetProcAddress(`glProgramUniform4dv`);
  if (*cast(void**)&glProgramUniform4dv_Z is null) assert(0, `OpenGL function 'glProgramUniform4dv' not found!`);
  glProgramUniform4dv_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4ui = glProgramUniform4ui_Z;
__gshared glbfn_glProgramUniform4ui glProgramUniform4ui_Z = function void (uint a00,int a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glProgramUniform4ui_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4ui_loader (uint a00,int a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glProgramUniform4ui_Z = glbindGetProcAddress(`glProgramUniform4ui`);
  if (*cast(void**)&glProgramUniform4ui_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui' not found!`);
  glProgramUniform4ui_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform4uiv = glProgramUniform4uiv_Z;
__gshared glbfn_glProgramUniform4uiv glProgramUniform4uiv_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform4uiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4uiv_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform4uiv_Z = glbindGetProcAddress(`glProgramUniform4uiv`);
  if (*cast(void**)&glProgramUniform4uiv_Z is null) assert(0, `OpenGL function 'glProgramUniform4uiv' not found!`);
  glProgramUniform4uiv_Z(a00,a01,a02,a03,);
}
alias glProgramUniformMatrix2fv = glProgramUniformMatrix2fv_Z;
__gshared glbfn_glProgramUniformMatrix2fv glProgramUniformMatrix2fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix2fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix2fv_Z = glbindGetProcAddress(`glProgramUniformMatrix2fv`);
  if (*cast(void**)&glProgramUniformMatrix2fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fv' not found!`);
  glProgramUniformMatrix2fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3fv = glProgramUniformMatrix3fv_Z;
__gshared glbfn_glProgramUniformMatrix3fv glProgramUniformMatrix3fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix3fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix3fv_Z = glbindGetProcAddress(`glProgramUniformMatrix3fv`);
  if (*cast(void**)&glProgramUniformMatrix3fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fv' not found!`);
  glProgramUniformMatrix3fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4fv = glProgramUniformMatrix4fv_Z;
__gshared glbfn_glProgramUniformMatrix4fv glProgramUniformMatrix4fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix4fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix4fv_Z = glbindGetProcAddress(`glProgramUniformMatrix4fv`);
  if (*cast(void**)&glProgramUniformMatrix4fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fv' not found!`);
  glProgramUniformMatrix4fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2dv = glProgramUniformMatrix2dv_Z;
__gshared glbfn_glProgramUniformMatrix2dv glProgramUniformMatrix2dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix2dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix2dv_Z = glbindGetProcAddress(`glProgramUniformMatrix2dv`);
  if (*cast(void**)&glProgramUniformMatrix2dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dv' not found!`);
  glProgramUniformMatrix2dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3dv = glProgramUniformMatrix3dv_Z;
__gshared glbfn_glProgramUniformMatrix3dv glProgramUniformMatrix3dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix3dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix3dv_Z = glbindGetProcAddress(`glProgramUniformMatrix3dv`);
  if (*cast(void**)&glProgramUniformMatrix3dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dv' not found!`);
  glProgramUniformMatrix3dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4dv = glProgramUniformMatrix4dv_Z;
__gshared glbfn_glProgramUniformMatrix4dv glProgramUniformMatrix4dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix4dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix4dv_Z = glbindGetProcAddress(`glProgramUniformMatrix4dv`);
  if (*cast(void**)&glProgramUniformMatrix4dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dv' not found!`);
  glProgramUniformMatrix4dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x3fv = glProgramUniformMatrix2x3fv_Z;
__gshared glbfn_glProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix2x3fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x3fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix2x3fv_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3fv`);
  if (*cast(void**)&glProgramUniformMatrix2x3fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fv' not found!`);
  glProgramUniformMatrix2x3fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x2fv = glProgramUniformMatrix3x2fv_Z;
__gshared glbfn_glProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix3x2fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x2fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix3x2fv_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2fv`);
  if (*cast(void**)&glProgramUniformMatrix3x2fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fv' not found!`);
  glProgramUniformMatrix3x2fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x4fv = glProgramUniformMatrix2x4fv_Z;
__gshared glbfn_glProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix2x4fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x4fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix2x4fv_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4fv`);
  if (*cast(void**)&glProgramUniformMatrix2x4fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fv' not found!`);
  glProgramUniformMatrix2x4fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x2fv = glProgramUniformMatrix4x2fv_Z;
__gshared glbfn_glProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix4x2fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x2fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix4x2fv_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2fv`);
  if (*cast(void**)&glProgramUniformMatrix4x2fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fv' not found!`);
  glProgramUniformMatrix4x2fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x4fv = glProgramUniformMatrix3x4fv_Z;
__gshared glbfn_glProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix3x4fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x4fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix3x4fv_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4fv`);
  if (*cast(void**)&glProgramUniformMatrix3x4fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fv' not found!`);
  glProgramUniformMatrix3x4fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x3fv = glProgramUniformMatrix4x3fv_Z;
__gshared glbfn_glProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix4x3fv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x3fv_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix4x3fv_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3fv`);
  if (*cast(void**)&glProgramUniformMatrix4x3fv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fv' not found!`);
  glProgramUniformMatrix4x3fv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x3dv = glProgramUniformMatrix2x3dv_Z;
__gshared glbfn_glProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix2x3dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x3dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix2x3dv_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3dv`);
  if (*cast(void**)&glProgramUniformMatrix2x3dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dv' not found!`);
  glProgramUniformMatrix2x3dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x2dv = glProgramUniformMatrix3x2dv_Z;
__gshared glbfn_glProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix3x2dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x2dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix3x2dv_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2dv`);
  if (*cast(void**)&glProgramUniformMatrix3x2dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dv' not found!`);
  glProgramUniformMatrix3x2dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x4dv = glProgramUniformMatrix2x4dv_Z;
__gshared glbfn_glProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix2x4dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x4dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix2x4dv_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4dv`);
  if (*cast(void**)&glProgramUniformMatrix2x4dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dv' not found!`);
  glProgramUniformMatrix2x4dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x2dv = glProgramUniformMatrix4x2dv_Z;
__gshared glbfn_glProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix4x2dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x2dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix4x2dv_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2dv`);
  if (*cast(void**)&glProgramUniformMatrix4x2dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dv' not found!`);
  glProgramUniformMatrix4x2dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x4dv = glProgramUniformMatrix3x4dv_Z;
__gshared glbfn_glProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix3x4dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x4dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix3x4dv_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4dv`);
  if (*cast(void**)&glProgramUniformMatrix3x4dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dv' not found!`);
  glProgramUniformMatrix3x4dv_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x3dv = glProgramUniformMatrix4x3dv_Z;
__gshared glbfn_glProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix4x3dv_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x3dv_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix4x3dv_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3dv`);
  if (*cast(void**)&glProgramUniformMatrix4x3dv_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dv' not found!`);
  glProgramUniformMatrix4x3dv_Z(a00,a01,a02,a03,a04,);
}
alias glValidateProgramPipeline = glValidateProgramPipeline_Z;
__gshared glbfn_glValidateProgramPipeline glValidateProgramPipeline_Z = function void (uint a00) {
  glbfn_glValidateProgramPipeline_loader(a00,);
};
private void glbfn_glValidateProgramPipeline_loader (uint a00) {
  *cast(void**)&glValidateProgramPipeline_Z = glbindGetProcAddress(`glValidateProgramPipeline`);
  if (*cast(void**)&glValidateProgramPipeline_Z is null) assert(0, `OpenGL function 'glValidateProgramPipeline' not found!`);
  glValidateProgramPipeline_Z(a00,);
}
alias glGetProgramPipelineInfoLog = glGetProgramPipelineInfoLog_Z;
__gshared glbfn_glGetProgramPipelineInfoLog glGetProgramPipelineInfoLog_Z = function void (uint a00,int a01,int* a02,char* a03) {
  glbfn_glGetProgramPipelineInfoLog_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramPipelineInfoLog_loader (uint a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetProgramPipelineInfoLog_Z = glbindGetProcAddress(`glGetProgramPipelineInfoLog`);
  if (*cast(void**)&glGetProgramPipelineInfoLog_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLog' not found!`);
  glGetProgramPipelineInfoLog_Z(a00,a01,a02,a03,);
}
alias glVertexAttribL1d = glVertexAttribL1d_Z;
__gshared glbfn_glVertexAttribL1d glVertexAttribL1d_Z = function void (uint a00,double a01) {
  glbfn_glVertexAttribL1d_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1d_loader (uint a00,double a01) {
  *cast(void**)&glVertexAttribL1d_Z = glbindGetProcAddress(`glVertexAttribL1d`);
  if (*cast(void**)&glVertexAttribL1d_Z is null) assert(0, `OpenGL function 'glVertexAttribL1d' not found!`);
  glVertexAttribL1d_Z(a00,a01,);
}
alias glVertexAttribL2d = glVertexAttribL2d_Z;
__gshared glbfn_glVertexAttribL2d glVertexAttribL2d_Z = function void (uint a00,double a01,double a02) {
  glbfn_glVertexAttribL2d_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribL2d_loader (uint a00,double a01,double a02) {
  *cast(void**)&glVertexAttribL2d_Z = glbindGetProcAddress(`glVertexAttribL2d`);
  if (*cast(void**)&glVertexAttribL2d_Z is null) assert(0, `OpenGL function 'glVertexAttribL2d' not found!`);
  glVertexAttribL2d_Z(a00,a01,a02,);
}
alias glVertexAttribL3d = glVertexAttribL3d_Z;
__gshared glbfn_glVertexAttribL3d glVertexAttribL3d_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glVertexAttribL3d_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribL3d_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glVertexAttribL3d_Z = glbindGetProcAddress(`glVertexAttribL3d`);
  if (*cast(void**)&glVertexAttribL3d_Z is null) assert(0, `OpenGL function 'glVertexAttribL3d' not found!`);
  glVertexAttribL3d_Z(a00,a01,a02,a03,);
}
alias glVertexAttribL4d = glVertexAttribL4d_Z;
__gshared glbfn_glVertexAttribL4d glVertexAttribL4d_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glVertexAttribL4d_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribL4d_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glVertexAttribL4d_Z = glbindGetProcAddress(`glVertexAttribL4d`);
  if (*cast(void**)&glVertexAttribL4d_Z is null) assert(0, `OpenGL function 'glVertexAttribL4d' not found!`);
  glVertexAttribL4d_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribL1dv = glVertexAttribL1dv_Z;
__gshared glbfn_glVertexAttribL1dv glVertexAttribL1dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL1dv_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL1dv_Z = glbindGetProcAddress(`glVertexAttribL1dv`);
  if (*cast(void**)&glVertexAttribL1dv_Z is null) assert(0, `OpenGL function 'glVertexAttribL1dv' not found!`);
  glVertexAttribL1dv_Z(a00,a01,);
}
alias glVertexAttribL2dv = glVertexAttribL2dv_Z;
__gshared glbfn_glVertexAttribL2dv glVertexAttribL2dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL2dv_loader(a00,a01,);
};
private void glbfn_glVertexAttribL2dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL2dv_Z = glbindGetProcAddress(`glVertexAttribL2dv`);
  if (*cast(void**)&glVertexAttribL2dv_Z is null) assert(0, `OpenGL function 'glVertexAttribL2dv' not found!`);
  glVertexAttribL2dv_Z(a00,a01,);
}
alias glVertexAttribL3dv = glVertexAttribL3dv_Z;
__gshared glbfn_glVertexAttribL3dv glVertexAttribL3dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL3dv_loader(a00,a01,);
};
private void glbfn_glVertexAttribL3dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL3dv_Z = glbindGetProcAddress(`glVertexAttribL3dv`);
  if (*cast(void**)&glVertexAttribL3dv_Z is null) assert(0, `OpenGL function 'glVertexAttribL3dv' not found!`);
  glVertexAttribL3dv_Z(a00,a01,);
}
alias glVertexAttribL4dv = glVertexAttribL4dv_Z;
__gshared glbfn_glVertexAttribL4dv glVertexAttribL4dv_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL4dv_loader(a00,a01,);
};
private void glbfn_glVertexAttribL4dv_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL4dv_Z = glbindGetProcAddress(`glVertexAttribL4dv`);
  if (*cast(void**)&glVertexAttribL4dv_Z is null) assert(0, `OpenGL function 'glVertexAttribL4dv' not found!`);
  glVertexAttribL4dv_Z(a00,a01,);
}
alias glVertexAttribLPointer = glVertexAttribLPointer_Z;
__gshared glbfn_glVertexAttribLPointer glVertexAttribLPointer_Z = function void (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  glbfn_glVertexAttribLPointer_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribLPointer_loader (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  *cast(void**)&glVertexAttribLPointer_Z = glbindGetProcAddress(`glVertexAttribLPointer`);
  if (*cast(void**)&glVertexAttribLPointer_Z is null) assert(0, `OpenGL function 'glVertexAttribLPointer' not found!`);
  glVertexAttribLPointer_Z(a00,a01,a02,a03,a04,);
}
alias glGetVertexAttribLdv = glGetVertexAttribLdv_Z;
__gshared glbfn_glGetVertexAttribLdv glGetVertexAttribLdv_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetVertexAttribLdv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribLdv_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetVertexAttribLdv_Z = glbindGetProcAddress(`glGetVertexAttribLdv`);
  if (*cast(void**)&glGetVertexAttribLdv_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLdv' not found!`);
  glGetVertexAttribLdv_Z(a00,a01,a02,);
}
alias glViewportArrayv = glViewportArrayv_Z;
__gshared glbfn_glViewportArrayv glViewportArrayv_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glViewportArrayv_loader(a00,a01,a02,);
};
private void glbfn_glViewportArrayv_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glViewportArrayv_Z = glbindGetProcAddress(`glViewportArrayv`);
  if (*cast(void**)&glViewportArrayv_Z is null) assert(0, `OpenGL function 'glViewportArrayv' not found!`);
  glViewportArrayv_Z(a00,a01,a02,);
}
alias glViewportIndexedf = glViewportIndexedf_Z;
__gshared glbfn_glViewportIndexedf glViewportIndexedf_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glViewportIndexedf_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glViewportIndexedf_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glViewportIndexedf_Z = glbindGetProcAddress(`glViewportIndexedf`);
  if (*cast(void**)&glViewportIndexedf_Z is null) assert(0, `OpenGL function 'glViewportIndexedf' not found!`);
  glViewportIndexedf_Z(a00,a01,a02,a03,a04,);
}
alias glViewportIndexedfv = glViewportIndexedfv_Z;
__gshared glbfn_glViewportIndexedfv glViewportIndexedfv_Z = function void (uint a00,const(float)* a01) {
  glbfn_glViewportIndexedfv_loader(a00,a01,);
};
private void glbfn_glViewportIndexedfv_loader (uint a00,const(float)* a01) {
  *cast(void**)&glViewportIndexedfv_Z = glbindGetProcAddress(`glViewportIndexedfv`);
  if (*cast(void**)&glViewportIndexedfv_Z is null) assert(0, `OpenGL function 'glViewportIndexedfv' not found!`);
  glViewportIndexedfv_Z(a00,a01,);
}
alias glScissorArrayv = glScissorArrayv_Z;
__gshared glbfn_glScissorArrayv glScissorArrayv_Z = function void (uint a00,int a01,const(int)* a02) {
  glbfn_glScissorArrayv_loader(a00,a01,a02,);
};
private void glbfn_glScissorArrayv_loader (uint a00,int a01,const(int)* a02) {
  *cast(void**)&glScissorArrayv_Z = glbindGetProcAddress(`glScissorArrayv`);
  if (*cast(void**)&glScissorArrayv_Z is null) assert(0, `OpenGL function 'glScissorArrayv' not found!`);
  glScissorArrayv_Z(a00,a01,a02,);
}
alias glScissorIndexed = glScissorIndexed_Z;
__gshared glbfn_glScissorIndexed glScissorIndexed_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glScissorIndexed_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glScissorIndexed_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glScissorIndexed_Z = glbindGetProcAddress(`glScissorIndexed`);
  if (*cast(void**)&glScissorIndexed_Z is null) assert(0, `OpenGL function 'glScissorIndexed' not found!`);
  glScissorIndexed_Z(a00,a01,a02,a03,a04,);
}
alias glScissorIndexedv = glScissorIndexedv_Z;
__gshared glbfn_glScissorIndexedv glScissorIndexedv_Z = function void (uint a00,const(int)* a01) {
  glbfn_glScissorIndexedv_loader(a00,a01,);
};
private void glbfn_glScissorIndexedv_loader (uint a00,const(int)* a01) {
  *cast(void**)&glScissorIndexedv_Z = glbindGetProcAddress(`glScissorIndexedv`);
  if (*cast(void**)&glScissorIndexedv_Z is null) assert(0, `OpenGL function 'glScissorIndexedv' not found!`);
  glScissorIndexedv_Z(a00,a01,);
}
alias glDepthRangeArrayv = glDepthRangeArrayv_Z;
__gshared glbfn_glDepthRangeArrayv glDepthRangeArrayv_Z = function void (uint a00,int a01,const(double)* a02) {
  glbfn_glDepthRangeArrayv_loader(a00,a01,a02,);
};
private void glbfn_glDepthRangeArrayv_loader (uint a00,int a01,const(double)* a02) {
  *cast(void**)&glDepthRangeArrayv_Z = glbindGetProcAddress(`glDepthRangeArrayv`);
  if (*cast(void**)&glDepthRangeArrayv_Z is null) assert(0, `OpenGL function 'glDepthRangeArrayv' not found!`);
  glDepthRangeArrayv_Z(a00,a01,a02,);
}
alias glDepthRangeIndexed = glDepthRangeIndexed_Z;
__gshared glbfn_glDepthRangeIndexed glDepthRangeIndexed_Z = function void (uint a00,double a01,double a02) {
  glbfn_glDepthRangeIndexed_loader(a00,a01,a02,);
};
private void glbfn_glDepthRangeIndexed_loader (uint a00,double a01,double a02) {
  *cast(void**)&glDepthRangeIndexed_Z = glbindGetProcAddress(`glDepthRangeIndexed`);
  if (*cast(void**)&glDepthRangeIndexed_Z is null) assert(0, `OpenGL function 'glDepthRangeIndexed' not found!`);
  glDepthRangeIndexed_Z(a00,a01,a02,);
}
alias glGetFloati_v = glGetFloati_v_Z;
__gshared glbfn_glGetFloati_v glGetFloati_v_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetFloati_v_loader(a00,a01,a02,);
};
private void glbfn_glGetFloati_v_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetFloati_v_Z = glbindGetProcAddress(`glGetFloati_v`);
  if (*cast(void**)&glGetFloati_v_Z is null) assert(0, `OpenGL function 'glGetFloati_v' not found!`);
  glGetFloati_v_Z(a00,a01,a02,);
}
alias glGetDoublei_v = glGetDoublei_v_Z;
__gshared glbfn_glGetDoublei_v glGetDoublei_v_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetDoublei_v_loader(a00,a01,a02,);
};
private void glbfn_glGetDoublei_v_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetDoublei_v_Z = glbindGetProcAddress(`glGetDoublei_v`);
  if (*cast(void**)&glGetDoublei_v_Z is null) assert(0, `OpenGL function 'glGetDoublei_v' not found!`);
  glGetDoublei_v_Z(a00,a01,a02,);
}
alias glDrawArraysInstancedBaseInstance = glDrawArraysInstancedBaseInstance_Z;
__gshared glbfn_glDrawArraysInstancedBaseInstance glDrawArraysInstancedBaseInstance_Z = function void (uint a00,int a01,int a02,int a03,uint a04) {
  glbfn_glDrawArraysInstancedBaseInstance_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawArraysInstancedBaseInstance_loader (uint a00,int a01,int a02,int a03,uint a04) {
  *cast(void**)&glDrawArraysInstancedBaseInstance_Z = glbindGetProcAddress(`glDrawArraysInstancedBaseInstance`);
  if (*cast(void**)&glDrawArraysInstancedBaseInstance_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedBaseInstance' not found!`);
  glDrawArraysInstancedBaseInstance_Z(a00,a01,a02,a03,a04,);
}
alias glDrawElementsInstancedBaseInstance = glDrawElementsInstancedBaseInstance_Z;
__gshared glbfn_glDrawElementsInstancedBaseInstance glDrawElementsInstancedBaseInstance_Z = function void (uint a00,int a01,uint a02,const(void)* a03,int a04,uint a05) {
  glbfn_glDrawElementsInstancedBaseInstance_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDrawElementsInstancedBaseInstance_loader (uint a00,int a01,uint a02,const(void)* a03,int a04,uint a05) {
  *cast(void**)&glDrawElementsInstancedBaseInstance_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseInstance`);
  if (*cast(void**)&glDrawElementsInstancedBaseInstance_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseInstance' not found!`);
  glDrawElementsInstancedBaseInstance_Z(a00,a01,a02,a03,a04,a05,);
}
alias glDrawElementsInstancedBaseVertexBaseInstance = glDrawElementsInstancedBaseVertexBaseInstance_Z;
__gshared glbfn_glDrawElementsInstancedBaseVertexBaseInstance glDrawElementsInstancedBaseVertexBaseInstance_Z = function void (uint a00,int a01,uint a02,const(void)* a03,int a04,int a05,uint a06) {
  glbfn_glDrawElementsInstancedBaseVertexBaseInstance_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glDrawElementsInstancedBaseVertexBaseInstance_loader (uint a00,int a01,uint a02,const(void)* a03,int a04,int a05,uint a06) {
  *cast(void**)&glDrawElementsInstancedBaseVertexBaseInstance_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseVertexBaseInstance`);
  if (*cast(void**)&glDrawElementsInstancedBaseVertexBaseInstance_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertexBaseInstance' not found!`);
  glDrawElementsInstancedBaseVertexBaseInstance_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetInternalformativ = glGetInternalformativ_Z;
__gshared glbfn_glGetInternalformativ glGetInternalformativ_Z = function void (uint a00,uint a01,uint a02,int a03,int* a04) {
  glbfn_glGetInternalformativ_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetInternalformativ_loader (uint a00,uint a01,uint a02,int a03,int* a04) {
  *cast(void**)&glGetInternalformativ_Z = glbindGetProcAddress(`glGetInternalformativ`);
  if (*cast(void**)&glGetInternalformativ_Z is null) assert(0, `OpenGL function 'glGetInternalformativ' not found!`);
  glGetInternalformativ_Z(a00,a01,a02,a03,a04,);
}
alias glGetActiveAtomicCounterBufferiv = glGetActiveAtomicCounterBufferiv_Z;
__gshared glbfn_glGetActiveAtomicCounterBufferiv glGetActiveAtomicCounterBufferiv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetActiveAtomicCounterBufferiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetActiveAtomicCounterBufferiv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetActiveAtomicCounterBufferiv_Z = glbindGetProcAddress(`glGetActiveAtomicCounterBufferiv`);
  if (*cast(void**)&glGetActiveAtomicCounterBufferiv_Z is null) assert(0, `OpenGL function 'glGetActiveAtomicCounterBufferiv' not found!`);
  glGetActiveAtomicCounterBufferiv_Z(a00,a01,a02,a03,);
}
alias glBindImageTexture = glBindImageTexture_Z;
__gshared glbfn_glBindImageTexture glBindImageTexture_Z = function void (uint a00,uint a01,int a02,ubyte a03,int a04,uint a05,uint a06) {
  glbfn_glBindImageTexture_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glBindImageTexture_loader (uint a00,uint a01,int a02,ubyte a03,int a04,uint a05,uint a06) {
  *cast(void**)&glBindImageTexture_Z = glbindGetProcAddress(`glBindImageTexture`);
  if (*cast(void**)&glBindImageTexture_Z is null) assert(0, `OpenGL function 'glBindImageTexture' not found!`);
  glBindImageTexture_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMemoryBarrier = glMemoryBarrier_Z;
__gshared glbfn_glMemoryBarrier glMemoryBarrier_Z = function void (uint a00) {
  glbfn_glMemoryBarrier_loader(a00,);
};
private void glbfn_glMemoryBarrier_loader (uint a00) {
  *cast(void**)&glMemoryBarrier_Z = glbindGetProcAddress(`glMemoryBarrier`);
  if (*cast(void**)&glMemoryBarrier_Z is null) assert(0, `OpenGL function 'glMemoryBarrier' not found!`);
  glMemoryBarrier_Z(a00,);
}
alias glTexStorage1D = glTexStorage1D_Z;
__gshared glbfn_glTexStorage1D glTexStorage1D_Z = function void (uint a00,int a01,uint a02,int a03) {
  glbfn_glTexStorage1D_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexStorage1D_loader (uint a00,int a01,uint a02,int a03) {
  *cast(void**)&glTexStorage1D_Z = glbindGetProcAddress(`glTexStorage1D`);
  if (*cast(void**)&glTexStorage1D_Z is null) assert(0, `OpenGL function 'glTexStorage1D' not found!`);
  glTexStorage1D_Z(a00,a01,a02,a03,);
}
alias glTexStorage2D = glTexStorage2D_Z;
__gshared glbfn_glTexStorage2D glTexStorage2D_Z = function void (uint a00,int a01,uint a02,int a03,int a04) {
  glbfn_glTexStorage2D_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTexStorage2D_loader (uint a00,int a01,uint a02,int a03,int a04) {
  *cast(void**)&glTexStorage2D_Z = glbindGetProcAddress(`glTexStorage2D`);
  if (*cast(void**)&glTexStorage2D_Z is null) assert(0, `OpenGL function 'glTexStorage2D' not found!`);
  glTexStorage2D_Z(a00,a01,a02,a03,a04,);
}
alias glTexStorage3D = glTexStorage3D_Z;
__gshared glbfn_glTexStorage3D glTexStorage3D_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05) {
  glbfn_glTexStorage3D_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glTexStorage3D_loader (uint a00,int a01,uint a02,int a03,int a04,int a05) {
  *cast(void**)&glTexStorage3D_Z = glbindGetProcAddress(`glTexStorage3D`);
  if (*cast(void**)&glTexStorage3D_Z is null) assert(0, `OpenGL function 'glTexStorage3D' not found!`);
  glTexStorage3D_Z(a00,a01,a02,a03,a04,a05,);
}
alias glDrawTransformFeedbackInstanced = glDrawTransformFeedbackInstanced_Z;
__gshared glbfn_glDrawTransformFeedbackInstanced glDrawTransformFeedbackInstanced_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glDrawTransformFeedbackInstanced_loader(a00,a01,a02,);
};
private void glbfn_glDrawTransformFeedbackInstanced_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glDrawTransformFeedbackInstanced_Z = glbindGetProcAddress(`glDrawTransformFeedbackInstanced`);
  if (*cast(void**)&glDrawTransformFeedbackInstanced_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackInstanced' not found!`);
  glDrawTransformFeedbackInstanced_Z(a00,a01,a02,);
}
alias glDrawTransformFeedbackStreamInstanced = glDrawTransformFeedbackStreamInstanced_Z;
__gshared glbfn_glDrawTransformFeedbackStreamInstanced glDrawTransformFeedbackStreamInstanced_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glDrawTransformFeedbackStreamInstanced_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawTransformFeedbackStreamInstanced_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glDrawTransformFeedbackStreamInstanced_Z = glbindGetProcAddress(`glDrawTransformFeedbackStreamInstanced`);
  if (*cast(void**)&glDrawTransformFeedbackStreamInstanced_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStreamInstanced' not found!`);
  glDrawTransformFeedbackStreamInstanced_Z(a00,a01,a02,a03,);
}
alias glClearBufferData = glClearBufferData_Z;
__gshared glbfn_glClearBufferData glClearBufferData_Z = function void (uint a00,uint a01,uint a02,uint a03,const(void)* a04) {
  glbfn_glClearBufferData_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glClearBufferData_loader (uint a00,uint a01,uint a02,uint a03,const(void)* a04) {
  *cast(void**)&glClearBufferData_Z = glbindGetProcAddress(`glClearBufferData`);
  if (*cast(void**)&glClearBufferData_Z is null) assert(0, `OpenGL function 'glClearBufferData' not found!`);
  glClearBufferData_Z(a00,a01,a02,a03,a04,);
}
alias glClearBufferSubData = glClearBufferSubData_Z;
__gshared glbfn_glClearBufferSubData glClearBufferSubData_Z = function void (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glClearBufferSubData_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glClearBufferSubData_loader (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glClearBufferSubData_Z = glbindGetProcAddress(`glClearBufferSubData`);
  if (*cast(void**)&glClearBufferSubData_Z is null) assert(0, `OpenGL function 'glClearBufferSubData' not found!`);
  glClearBufferSubData_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glDispatchCompute = glDispatchCompute_Z;
__gshared glbfn_glDispatchCompute glDispatchCompute_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glDispatchCompute_loader(a00,a01,a02,);
};
private void glbfn_glDispatchCompute_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glDispatchCompute_Z = glbindGetProcAddress(`glDispatchCompute`);
  if (*cast(void**)&glDispatchCompute_Z is null) assert(0, `OpenGL function 'glDispatchCompute' not found!`);
  glDispatchCompute_Z(a00,a01,a02,);
}
alias glDispatchComputeIndirect = glDispatchComputeIndirect_Z;
__gshared glbfn_glDispatchComputeIndirect glDispatchComputeIndirect_Z = function void (int a00) {
  glbfn_glDispatchComputeIndirect_loader(a00,);
};
private void glbfn_glDispatchComputeIndirect_loader (int a00) {
  *cast(void**)&glDispatchComputeIndirect_Z = glbindGetProcAddress(`glDispatchComputeIndirect`);
  if (*cast(void**)&glDispatchComputeIndirect_Z is null) assert(0, `OpenGL function 'glDispatchComputeIndirect' not found!`);
  glDispatchComputeIndirect_Z(a00,);
}
alias glCopyImageSubData = glCopyImageSubData_Z;
__gshared glbfn_glCopyImageSubData glCopyImageSubData_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,int a08,int a09,int a10,int a11,int a12,int a13,int a14) {
  glbfn_glCopyImageSubData_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,);
};
private void glbfn_glCopyImageSubData_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,int a08,int a09,int a10,int a11,int a12,int a13,int a14) {
  *cast(void**)&glCopyImageSubData_Z = glbindGetProcAddress(`glCopyImageSubData`);
  if (*cast(void**)&glCopyImageSubData_Z is null) assert(0, `OpenGL function 'glCopyImageSubData' not found!`);
  glCopyImageSubData_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,);
}
alias glFramebufferParameteri = glFramebufferParameteri_Z;
__gshared glbfn_glFramebufferParameteri glFramebufferParameteri_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glFramebufferParameteri_loader(a00,a01,a02,);
};
private void glbfn_glFramebufferParameteri_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glFramebufferParameteri_Z = glbindGetProcAddress(`glFramebufferParameteri`);
  if (*cast(void**)&glFramebufferParameteri_Z is null) assert(0, `OpenGL function 'glFramebufferParameteri' not found!`);
  glFramebufferParameteri_Z(a00,a01,a02,);
}
alias glGetFramebufferParameteriv = glGetFramebufferParameteriv_Z;
__gshared glbfn_glGetFramebufferParameteriv glGetFramebufferParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetFramebufferParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetFramebufferParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetFramebufferParameteriv_Z = glbindGetProcAddress(`glGetFramebufferParameteriv`);
  if (*cast(void**)&glGetFramebufferParameteriv_Z is null) assert(0, `OpenGL function 'glGetFramebufferParameteriv' not found!`);
  glGetFramebufferParameteriv_Z(a00,a01,a02,);
}
alias glGetInternalformati64v = glGetInternalformati64v_Z;
__gshared glbfn_glGetInternalformati64v glGetInternalformati64v_Z = function void (uint a00,uint a01,uint a02,int a03,long* a04) {
  glbfn_glGetInternalformati64v_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetInternalformati64v_loader (uint a00,uint a01,uint a02,int a03,long* a04) {
  *cast(void**)&glGetInternalformati64v_Z = glbindGetProcAddress(`glGetInternalformati64v`);
  if (*cast(void**)&glGetInternalformati64v_Z is null) assert(0, `OpenGL function 'glGetInternalformati64v' not found!`);
  glGetInternalformati64v_Z(a00,a01,a02,a03,a04,);
}
alias glInvalidateTexSubImage = glInvalidateTexSubImage_Z;
__gshared glbfn_glInvalidateTexSubImage glInvalidateTexSubImage_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  glbfn_glInvalidateTexSubImage_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glInvalidateTexSubImage_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glInvalidateTexSubImage_Z = glbindGetProcAddress(`glInvalidateTexSubImage`);
  if (*cast(void**)&glInvalidateTexSubImage_Z is null) assert(0, `OpenGL function 'glInvalidateTexSubImage' not found!`);
  glInvalidateTexSubImage_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glInvalidateTexImage = glInvalidateTexImage_Z;
__gshared glbfn_glInvalidateTexImage glInvalidateTexImage_Z = function void (uint a00,int a01) {
  glbfn_glInvalidateTexImage_loader(a00,a01,);
};
private void glbfn_glInvalidateTexImage_loader (uint a00,int a01) {
  *cast(void**)&glInvalidateTexImage_Z = glbindGetProcAddress(`glInvalidateTexImage`);
  if (*cast(void**)&glInvalidateTexImage_Z is null) assert(0, `OpenGL function 'glInvalidateTexImage' not found!`);
  glInvalidateTexImage_Z(a00,a01,);
}
alias glInvalidateBufferSubData = glInvalidateBufferSubData_Z;
__gshared glbfn_glInvalidateBufferSubData glInvalidateBufferSubData_Z = function void (uint a00,int a01,int a02) {
  glbfn_glInvalidateBufferSubData_loader(a00,a01,a02,);
};
private void glbfn_glInvalidateBufferSubData_loader (uint a00,int a01,int a02) {
  *cast(void**)&glInvalidateBufferSubData_Z = glbindGetProcAddress(`glInvalidateBufferSubData`);
  if (*cast(void**)&glInvalidateBufferSubData_Z is null) assert(0, `OpenGL function 'glInvalidateBufferSubData' not found!`);
  glInvalidateBufferSubData_Z(a00,a01,a02,);
}
alias glInvalidateBufferData = glInvalidateBufferData_Z;
__gshared glbfn_glInvalidateBufferData glInvalidateBufferData_Z = function void (uint a00) {
  glbfn_glInvalidateBufferData_loader(a00,);
};
private void glbfn_glInvalidateBufferData_loader (uint a00) {
  *cast(void**)&glInvalidateBufferData_Z = glbindGetProcAddress(`glInvalidateBufferData`);
  if (*cast(void**)&glInvalidateBufferData_Z is null) assert(0, `OpenGL function 'glInvalidateBufferData' not found!`);
  glInvalidateBufferData_Z(a00,);
}
alias glInvalidateFramebuffer = glInvalidateFramebuffer_Z;
__gshared glbfn_glInvalidateFramebuffer glInvalidateFramebuffer_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glInvalidateFramebuffer_loader(a00,a01,a02,);
};
private void glbfn_glInvalidateFramebuffer_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glInvalidateFramebuffer_Z = glbindGetProcAddress(`glInvalidateFramebuffer`);
  if (*cast(void**)&glInvalidateFramebuffer_Z is null) assert(0, `OpenGL function 'glInvalidateFramebuffer' not found!`);
  glInvalidateFramebuffer_Z(a00,a01,a02,);
}
alias glInvalidateSubFramebuffer = glInvalidateSubFramebuffer_Z;
__gshared glbfn_glInvalidateSubFramebuffer glInvalidateSubFramebuffer_Z = function void (uint a00,int a01,const(uint)* a02,int a03,int a04,int a05,int a06) {
  glbfn_glInvalidateSubFramebuffer_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glInvalidateSubFramebuffer_loader (uint a00,int a01,const(uint)* a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glInvalidateSubFramebuffer_Z = glbindGetProcAddress(`glInvalidateSubFramebuffer`);
  if (*cast(void**)&glInvalidateSubFramebuffer_Z is null) assert(0, `OpenGL function 'glInvalidateSubFramebuffer' not found!`);
  glInvalidateSubFramebuffer_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMultiDrawArraysIndirect = glMultiDrawArraysIndirect_Z;
__gshared glbfn_glMultiDrawArraysIndirect glMultiDrawArraysIndirect_Z = function void (uint a00,const(void)* a01,int a02,int a03) {
  glbfn_glMultiDrawArraysIndirect_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiDrawArraysIndirect_loader (uint a00,const(void)* a01,int a02,int a03) {
  *cast(void**)&glMultiDrawArraysIndirect_Z = glbindGetProcAddress(`glMultiDrawArraysIndirect`);
  if (*cast(void**)&glMultiDrawArraysIndirect_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirect' not found!`);
  glMultiDrawArraysIndirect_Z(a00,a01,a02,a03,);
}
alias glMultiDrawElementsIndirect = glMultiDrawElementsIndirect_Z;
__gshared glbfn_glMultiDrawElementsIndirect glMultiDrawElementsIndirect_Z = function void (uint a00,uint a01,const(void)* a02,int a03,int a04) {
  glbfn_glMultiDrawElementsIndirect_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiDrawElementsIndirect_loader (uint a00,uint a01,const(void)* a02,int a03,int a04) {
  *cast(void**)&glMultiDrawElementsIndirect_Z = glbindGetProcAddress(`glMultiDrawElementsIndirect`);
  if (*cast(void**)&glMultiDrawElementsIndirect_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirect' not found!`);
  glMultiDrawElementsIndirect_Z(a00,a01,a02,a03,a04,);
}
alias glGetProgramInterfaceiv = glGetProgramInterfaceiv_Z;
__gshared glbfn_glGetProgramInterfaceiv glGetProgramInterfaceiv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetProgramInterfaceiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramInterfaceiv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetProgramInterfaceiv_Z = glbindGetProcAddress(`glGetProgramInterfaceiv`);
  if (*cast(void**)&glGetProgramInterfaceiv_Z is null) assert(0, `OpenGL function 'glGetProgramInterfaceiv' not found!`);
  glGetProgramInterfaceiv_Z(a00,a01,a02,a03,);
}
alias glGetProgramResourceIndex = glGetProgramResourceIndex_Z;
__gshared glbfn_glGetProgramResourceIndex glGetProgramResourceIndex_Z = function uint (uint a00,uint a01,const(char)* a02) {
  return glbfn_glGetProgramResourceIndex_loader(a00,a01,a02,);
};
private uint glbfn_glGetProgramResourceIndex_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glGetProgramResourceIndex_Z = glbindGetProcAddress(`glGetProgramResourceIndex`);
  if (*cast(void**)&glGetProgramResourceIndex_Z is null) assert(0, `OpenGL function 'glGetProgramResourceIndex' not found!`);
  return glGetProgramResourceIndex_Z(a00,a01,a02,);
}
alias glGetProgramResourceName = glGetProgramResourceName_Z;
__gshared glbfn_glGetProgramResourceName glGetProgramResourceName_Z = function void (uint a00,uint a01,uint a02,int a03,int* a04,char* a05) {
  glbfn_glGetProgramResourceName_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetProgramResourceName_loader (uint a00,uint a01,uint a02,int a03,int* a04,char* a05) {
  *cast(void**)&glGetProgramResourceName_Z = glbindGetProcAddress(`glGetProgramResourceName`);
  if (*cast(void**)&glGetProgramResourceName_Z is null) assert(0, `OpenGL function 'glGetProgramResourceName' not found!`);
  glGetProgramResourceName_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetProgramResourceiv = glGetProgramResourceiv_Z;
__gshared glbfn_glGetProgramResourceiv glGetProgramResourceiv_Z = function void (uint a00,uint a01,uint a02,int a03,const(uint)* a04,int a05,int* a06,int* a07) {
  glbfn_glGetProgramResourceiv_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glGetProgramResourceiv_loader (uint a00,uint a01,uint a02,int a03,const(uint)* a04,int a05,int* a06,int* a07) {
  *cast(void**)&glGetProgramResourceiv_Z = glbindGetProcAddress(`glGetProgramResourceiv`);
  if (*cast(void**)&glGetProgramResourceiv_Z is null) assert(0, `OpenGL function 'glGetProgramResourceiv' not found!`);
  glGetProgramResourceiv_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetProgramResourceLocation = glGetProgramResourceLocation_Z;
__gshared glbfn_glGetProgramResourceLocation glGetProgramResourceLocation_Z = function int (uint a00,uint a01,const(char)* a02) {
  return glbfn_glGetProgramResourceLocation_loader(a00,a01,a02,);
};
private int glbfn_glGetProgramResourceLocation_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glGetProgramResourceLocation_Z = glbindGetProcAddress(`glGetProgramResourceLocation`);
  if (*cast(void**)&glGetProgramResourceLocation_Z is null) assert(0, `OpenGL function 'glGetProgramResourceLocation' not found!`);
  return glGetProgramResourceLocation_Z(a00,a01,a02,);
}
alias glGetProgramResourceLocationIndex = glGetProgramResourceLocationIndex_Z;
__gshared glbfn_glGetProgramResourceLocationIndex glGetProgramResourceLocationIndex_Z = function int (uint a00,uint a01,const(char)* a02) {
  return glbfn_glGetProgramResourceLocationIndex_loader(a00,a01,a02,);
};
private int glbfn_glGetProgramResourceLocationIndex_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glGetProgramResourceLocationIndex_Z = glbindGetProcAddress(`glGetProgramResourceLocationIndex`);
  if (*cast(void**)&glGetProgramResourceLocationIndex_Z is null) assert(0, `OpenGL function 'glGetProgramResourceLocationIndex' not found!`);
  return glGetProgramResourceLocationIndex_Z(a00,a01,a02,);
}
alias glShaderStorageBlockBinding = glShaderStorageBlockBinding_Z;
__gshared glbfn_glShaderStorageBlockBinding glShaderStorageBlockBinding_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glShaderStorageBlockBinding_loader(a00,a01,a02,);
};
private void glbfn_glShaderStorageBlockBinding_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glShaderStorageBlockBinding_Z = glbindGetProcAddress(`glShaderStorageBlockBinding`);
  if (*cast(void**)&glShaderStorageBlockBinding_Z is null) assert(0, `OpenGL function 'glShaderStorageBlockBinding' not found!`);
  glShaderStorageBlockBinding_Z(a00,a01,a02,);
}
alias glTexBufferRange = glTexBufferRange_Z;
__gshared glbfn_glTexBufferRange glTexBufferRange_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glTexBufferRange_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTexBufferRange_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glTexBufferRange_Z = glbindGetProcAddress(`glTexBufferRange`);
  if (*cast(void**)&glTexBufferRange_Z is null) assert(0, `OpenGL function 'glTexBufferRange' not found!`);
  glTexBufferRange_Z(a00,a01,a02,a03,a04,);
}
alias glTexStorage2DMultisample = glTexStorage2DMultisample_Z;
__gshared glbfn_glTexStorage2DMultisample glTexStorage2DMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04,ubyte a05) {
  glbfn_glTexStorage2DMultisample_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glTexStorage2DMultisample_loader (uint a00,int a01,uint a02,int a03,int a04,ubyte a05) {
  *cast(void**)&glTexStorage2DMultisample_Z = glbindGetProcAddress(`glTexStorage2DMultisample`);
  if (*cast(void**)&glTexStorage2DMultisample_Z is null) assert(0, `OpenGL function 'glTexStorage2DMultisample' not found!`);
  glTexStorage2DMultisample_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTexStorage3DMultisample = glTexStorage3DMultisample_Z;
__gshared glbfn_glTexStorage3DMultisample glTexStorage3DMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,ubyte a06) {
  glbfn_glTexStorage3DMultisample_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTexStorage3DMultisample_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,ubyte a06) {
  *cast(void**)&glTexStorage3DMultisample_Z = glbindGetProcAddress(`glTexStorage3DMultisample`);
  if (*cast(void**)&glTexStorage3DMultisample_Z is null) assert(0, `OpenGL function 'glTexStorage3DMultisample' not found!`);
  glTexStorage3DMultisample_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTextureView = glTextureView_Z;
__gshared glbfn_glTextureView glTextureView_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07) {
  glbfn_glTextureView_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTextureView_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07) {
  *cast(void**)&glTextureView_Z = glbindGetProcAddress(`glTextureView`);
  if (*cast(void**)&glTextureView_Z is null) assert(0, `OpenGL function 'glTextureView' not found!`);
  glTextureView_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glBindVertexBuffer = glBindVertexBuffer_Z;
__gshared glbfn_glBindVertexBuffer glBindVertexBuffer_Z = function void (uint a00,uint a01,int a02,int a03) {
  glbfn_glBindVertexBuffer_loader(a00,a01,a02,a03,);
};
private void glbfn_glBindVertexBuffer_loader (uint a00,uint a01,int a02,int a03) {
  *cast(void**)&glBindVertexBuffer_Z = glbindGetProcAddress(`glBindVertexBuffer`);
  if (*cast(void**)&glBindVertexBuffer_Z is null) assert(0, `OpenGL function 'glBindVertexBuffer' not found!`);
  glBindVertexBuffer_Z(a00,a01,a02,a03,);
}
alias glVertexAttribFormat = glVertexAttribFormat_Z;
__gshared glbfn_glVertexAttribFormat glVertexAttribFormat_Z = function void (uint a00,int a01,uint a02,ubyte a03,uint a04) {
  glbfn_glVertexAttribFormat_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribFormat_loader (uint a00,int a01,uint a02,ubyte a03,uint a04) {
  *cast(void**)&glVertexAttribFormat_Z = glbindGetProcAddress(`glVertexAttribFormat`);
  if (*cast(void**)&glVertexAttribFormat_Z is null) assert(0, `OpenGL function 'glVertexAttribFormat' not found!`);
  glVertexAttribFormat_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribIFormat = glVertexAttribIFormat_Z;
__gshared glbfn_glVertexAttribIFormat glVertexAttribIFormat_Z = function void (uint a00,int a01,uint a02,uint a03) {
  glbfn_glVertexAttribIFormat_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribIFormat_loader (uint a00,int a01,uint a02,uint a03) {
  *cast(void**)&glVertexAttribIFormat_Z = glbindGetProcAddress(`glVertexAttribIFormat`);
  if (*cast(void**)&glVertexAttribIFormat_Z is null) assert(0, `OpenGL function 'glVertexAttribIFormat' not found!`);
  glVertexAttribIFormat_Z(a00,a01,a02,a03,);
}
alias glVertexAttribLFormat = glVertexAttribLFormat_Z;
__gshared glbfn_glVertexAttribLFormat glVertexAttribLFormat_Z = function void (uint a00,int a01,uint a02,uint a03) {
  glbfn_glVertexAttribLFormat_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribLFormat_loader (uint a00,int a01,uint a02,uint a03) {
  *cast(void**)&glVertexAttribLFormat_Z = glbindGetProcAddress(`glVertexAttribLFormat`);
  if (*cast(void**)&glVertexAttribLFormat_Z is null) assert(0, `OpenGL function 'glVertexAttribLFormat' not found!`);
  glVertexAttribLFormat_Z(a00,a01,a02,a03,);
}
alias glVertexAttribBinding = glVertexAttribBinding_Z;
__gshared glbfn_glVertexAttribBinding glVertexAttribBinding_Z = function void (uint a00,uint a01) {
  glbfn_glVertexAttribBinding_loader(a00,a01,);
};
private void glbfn_glVertexAttribBinding_loader (uint a00,uint a01) {
  *cast(void**)&glVertexAttribBinding_Z = glbindGetProcAddress(`glVertexAttribBinding`);
  if (*cast(void**)&glVertexAttribBinding_Z is null) assert(0, `OpenGL function 'glVertexAttribBinding' not found!`);
  glVertexAttribBinding_Z(a00,a01,);
}
alias glVertexBindingDivisor = glVertexBindingDivisor_Z;
__gshared glbfn_glVertexBindingDivisor glVertexBindingDivisor_Z = function void (uint a00,uint a01) {
  glbfn_glVertexBindingDivisor_loader(a00,a01,);
};
private void glbfn_glVertexBindingDivisor_loader (uint a00,uint a01) {
  *cast(void**)&glVertexBindingDivisor_Z = glbindGetProcAddress(`glVertexBindingDivisor`);
  if (*cast(void**)&glVertexBindingDivisor_Z is null) assert(0, `OpenGL function 'glVertexBindingDivisor' not found!`);
  glVertexBindingDivisor_Z(a00,a01,);
}
alias glDebugMessageControl = glDebugMessageControl_Z;
__gshared glbfn_glDebugMessageControl glDebugMessageControl_Z = function void (uint a00,uint a01,uint a02,int a03,const(uint)* a04,ubyte a05) {
  glbfn_glDebugMessageControl_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDebugMessageControl_loader (uint a00,uint a01,uint a02,int a03,const(uint)* a04,ubyte a05) {
  *cast(void**)&glDebugMessageControl_Z = glbindGetProcAddress(`glDebugMessageControl`);
  if (*cast(void**)&glDebugMessageControl_Z is null) assert(0, `OpenGL function 'glDebugMessageControl' not found!`);
  glDebugMessageControl_Z(a00,a01,a02,a03,a04,a05,);
}
alias glDebugMessageInsert = glDebugMessageInsert_Z;
__gshared glbfn_glDebugMessageInsert glDebugMessageInsert_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04,const(char)* a05) {
  glbfn_glDebugMessageInsert_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDebugMessageInsert_loader (uint a00,uint a01,uint a02,uint a03,int a04,const(char)* a05) {
  *cast(void**)&glDebugMessageInsert_Z = glbindGetProcAddress(`glDebugMessageInsert`);
  if (*cast(void**)&glDebugMessageInsert_Z is null) assert(0, `OpenGL function 'glDebugMessageInsert' not found!`);
  glDebugMessageInsert_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetDebugMessageLog = glGetDebugMessageLog_Z;
__gshared glbfn_glGetDebugMessageLog glGetDebugMessageLog_Z = function uint (uint a00,int a01,uint* a02,uint* a03,uint* a04,uint* a05,int* a06,char* a07) {
  return glbfn_glGetDebugMessageLog_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private uint glbfn_glGetDebugMessageLog_loader (uint a00,int a01,uint* a02,uint* a03,uint* a04,uint* a05,int* a06,char* a07) {
  *cast(void**)&glGetDebugMessageLog_Z = glbindGetProcAddress(`glGetDebugMessageLog`);
  if (*cast(void**)&glGetDebugMessageLog_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLog' not found!`);
  return glGetDebugMessageLog_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glPushDebugGroup = glPushDebugGroup_Z;
__gshared glbfn_glPushDebugGroup glPushDebugGroup_Z = function void (uint a00,uint a01,int a02,const(char)* a03) {
  glbfn_glPushDebugGroup_loader(a00,a01,a02,a03,);
};
private void glbfn_glPushDebugGroup_loader (uint a00,uint a01,int a02,const(char)* a03) {
  *cast(void**)&glPushDebugGroup_Z = glbindGetProcAddress(`glPushDebugGroup`);
  if (*cast(void**)&glPushDebugGroup_Z is null) assert(0, `OpenGL function 'glPushDebugGroup' not found!`);
  glPushDebugGroup_Z(a00,a01,a02,a03,);
}
alias glPopDebugGroup = glPopDebugGroup_Z;
__gshared glbfn_glPopDebugGroup glPopDebugGroup_Z = function void () {
  glbfn_glPopDebugGroup_loader();
};
private void glbfn_glPopDebugGroup_loader () {
  *cast(void**)&glPopDebugGroup_Z = glbindGetProcAddress(`glPopDebugGroup`);
  if (*cast(void**)&glPopDebugGroup_Z is null) assert(0, `OpenGL function 'glPopDebugGroup' not found!`);
  glPopDebugGroup_Z();
}
alias glObjectLabel = glObjectLabel_Z;
__gshared glbfn_glObjectLabel glObjectLabel_Z = function void (uint a00,uint a01,int a02,const(char)* a03) {
  glbfn_glObjectLabel_loader(a00,a01,a02,a03,);
};
private void glbfn_glObjectLabel_loader (uint a00,uint a01,int a02,const(char)* a03) {
  *cast(void**)&glObjectLabel_Z = glbindGetProcAddress(`glObjectLabel`);
  if (*cast(void**)&glObjectLabel_Z is null) assert(0, `OpenGL function 'glObjectLabel' not found!`);
  glObjectLabel_Z(a00,a01,a02,a03,);
}
alias glGetObjectLabel = glGetObjectLabel_Z;
__gshared glbfn_glGetObjectLabel glGetObjectLabel_Z = function void (uint a00,uint a01,int a02,int* a03,char* a04) {
  glbfn_glGetObjectLabel_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetObjectLabel_loader (uint a00,uint a01,int a02,int* a03,char* a04) {
  *cast(void**)&glGetObjectLabel_Z = glbindGetProcAddress(`glGetObjectLabel`);
  if (*cast(void**)&glGetObjectLabel_Z is null) assert(0, `OpenGL function 'glGetObjectLabel' not found!`);
  glGetObjectLabel_Z(a00,a01,a02,a03,a04,);
}
alias glObjectPtrLabel = glObjectPtrLabel_Z;
__gshared glbfn_glObjectPtrLabel glObjectPtrLabel_Z = function void (const(void)* a00,int a01,const(char)* a02) {
  glbfn_glObjectPtrLabel_loader(a00,a01,a02,);
};
private void glbfn_glObjectPtrLabel_loader (const(void)* a00,int a01,const(char)* a02) {
  *cast(void**)&glObjectPtrLabel_Z = glbindGetProcAddress(`glObjectPtrLabel`);
  if (*cast(void**)&glObjectPtrLabel_Z is null) assert(0, `OpenGL function 'glObjectPtrLabel' not found!`);
  glObjectPtrLabel_Z(a00,a01,a02,);
}
alias glGetObjectPtrLabel = glGetObjectPtrLabel_Z;
__gshared glbfn_glGetObjectPtrLabel glGetObjectPtrLabel_Z = function void (const(void)* a00,int a01,int* a02,char* a03) {
  glbfn_glGetObjectPtrLabel_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetObjectPtrLabel_loader (const(void)* a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetObjectPtrLabel_Z = glbindGetProcAddress(`glGetObjectPtrLabel`);
  if (*cast(void**)&glGetObjectPtrLabel_Z is null) assert(0, `OpenGL function 'glGetObjectPtrLabel' not found!`);
  glGetObjectPtrLabel_Z(a00,a01,a02,a03,);
}
alias glBufferStorage = glBufferStorage_Z;
__gshared glbfn_glBufferStorage glBufferStorage_Z = function void (uint a00,int a01,const(void)* a02,uint a03) {
  glbfn_glBufferStorage_loader(a00,a01,a02,a03,);
};
private void glbfn_glBufferStorage_loader (uint a00,int a01,const(void)* a02,uint a03) {
  *cast(void**)&glBufferStorage_Z = glbindGetProcAddress(`glBufferStorage`);
  if (*cast(void**)&glBufferStorage_Z is null) assert(0, `OpenGL function 'glBufferStorage' not found!`);
  glBufferStorage_Z(a00,a01,a02,a03,);
}
alias glClearTexImage = glClearTexImage_Z;
__gshared glbfn_glClearTexImage glClearTexImage_Z = function void (uint a00,int a01,uint a02,uint a03,const(void)* a04) {
  glbfn_glClearTexImage_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glClearTexImage_loader (uint a00,int a01,uint a02,uint a03,const(void)* a04) {
  *cast(void**)&glClearTexImage_Z = glbindGetProcAddress(`glClearTexImage`);
  if (*cast(void**)&glClearTexImage_Z is null) assert(0, `OpenGL function 'glClearTexImage' not found!`);
  glClearTexImage_Z(a00,a01,a02,a03,a04,);
}
alias glClearTexSubImage = glClearTexSubImage_Z;
__gshared glbfn_glClearTexSubImage glClearTexSubImage_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  glbfn_glClearTexSubImage_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glClearTexSubImage_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  *cast(void**)&glClearTexSubImage_Z = glbindGetProcAddress(`glClearTexSubImage`);
  if (*cast(void**)&glClearTexSubImage_Z is null) assert(0, `OpenGL function 'glClearTexSubImage' not found!`);
  glClearTexSubImage_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glBindBuffersBase = glBindBuffersBase_Z;
__gshared glbfn_glBindBuffersBase glBindBuffersBase_Z = function void (uint a00,uint a01,int a02,const(uint)* a03) {
  glbfn_glBindBuffersBase_loader(a00,a01,a02,a03,);
};
private void glbfn_glBindBuffersBase_loader (uint a00,uint a01,int a02,const(uint)* a03) {
  *cast(void**)&glBindBuffersBase_Z = glbindGetProcAddress(`glBindBuffersBase`);
  if (*cast(void**)&glBindBuffersBase_Z is null) assert(0, `OpenGL function 'glBindBuffersBase' not found!`);
  glBindBuffersBase_Z(a00,a01,a02,a03,);
}
alias glBindBuffersRange = glBindBuffersRange_Z;
__gshared glbfn_glBindBuffersRange glBindBuffersRange_Z = function void (uint a00,uint a01,int a02,const(uint)* a03,const(int)* a04,const(int)* a05) {
  glbfn_glBindBuffersRange_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glBindBuffersRange_loader (uint a00,uint a01,int a02,const(uint)* a03,const(int)* a04,const(int)* a05) {
  *cast(void**)&glBindBuffersRange_Z = glbindGetProcAddress(`glBindBuffersRange`);
  if (*cast(void**)&glBindBuffersRange_Z is null) assert(0, `OpenGL function 'glBindBuffersRange' not found!`);
  glBindBuffersRange_Z(a00,a01,a02,a03,a04,a05,);
}
alias glBindTextures = glBindTextures_Z;
__gshared glbfn_glBindTextures glBindTextures_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glBindTextures_loader(a00,a01,a02,);
};
private void glbfn_glBindTextures_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glBindTextures_Z = glbindGetProcAddress(`glBindTextures`);
  if (*cast(void**)&glBindTextures_Z is null) assert(0, `OpenGL function 'glBindTextures' not found!`);
  glBindTextures_Z(a00,a01,a02,);
}
alias glBindSamplers = glBindSamplers_Z;
__gshared glbfn_glBindSamplers glBindSamplers_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glBindSamplers_loader(a00,a01,a02,);
};
private void glbfn_glBindSamplers_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glBindSamplers_Z = glbindGetProcAddress(`glBindSamplers`);
  if (*cast(void**)&glBindSamplers_Z is null) assert(0, `OpenGL function 'glBindSamplers' not found!`);
  glBindSamplers_Z(a00,a01,a02,);
}
alias glBindImageTextures = glBindImageTextures_Z;
__gshared glbfn_glBindImageTextures glBindImageTextures_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glBindImageTextures_loader(a00,a01,a02,);
};
private void glbfn_glBindImageTextures_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glBindImageTextures_Z = glbindGetProcAddress(`glBindImageTextures`);
  if (*cast(void**)&glBindImageTextures_Z is null) assert(0, `OpenGL function 'glBindImageTextures' not found!`);
  glBindImageTextures_Z(a00,a01,a02,);
}
alias glBindVertexBuffers = glBindVertexBuffers_Z;
__gshared glbfn_glBindVertexBuffers glBindVertexBuffers_Z = function void (uint a00,int a01,const(uint)* a02,const(int)* a03,const(int)* a04) {
  glbfn_glBindVertexBuffers_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBindVertexBuffers_loader (uint a00,int a01,const(uint)* a02,const(int)* a03,const(int)* a04) {
  *cast(void**)&glBindVertexBuffers_Z = glbindGetProcAddress(`glBindVertexBuffers`);
  if (*cast(void**)&glBindVertexBuffers_Z is null) assert(0, `OpenGL function 'glBindVertexBuffers' not found!`);
  glBindVertexBuffers_Z(a00,a01,a02,a03,a04,);
}
alias glClipControl = glClipControl_Z;
__gshared glbfn_glClipControl glClipControl_Z = function void (uint a00,uint a01) {
  glbfn_glClipControl_loader(a00,a01,);
};
private void glbfn_glClipControl_loader (uint a00,uint a01) {
  *cast(void**)&glClipControl_Z = glbindGetProcAddress(`glClipControl`);
  if (*cast(void**)&glClipControl_Z is null) assert(0, `OpenGL function 'glClipControl' not found!`);
  glClipControl_Z(a00,a01,);
}
alias glCreateTransformFeedbacks = glCreateTransformFeedbacks_Z;
__gshared glbfn_glCreateTransformFeedbacks glCreateTransformFeedbacks_Z = function void (int a00,uint* a01) {
  glbfn_glCreateTransformFeedbacks_loader(a00,a01,);
};
private void glbfn_glCreateTransformFeedbacks_loader (int a00,uint* a01) {
  *cast(void**)&glCreateTransformFeedbacks_Z = glbindGetProcAddress(`glCreateTransformFeedbacks`);
  if (*cast(void**)&glCreateTransformFeedbacks_Z is null) assert(0, `OpenGL function 'glCreateTransformFeedbacks' not found!`);
  glCreateTransformFeedbacks_Z(a00,a01,);
}
alias glTransformFeedbackBufferBase = glTransformFeedbackBufferBase_Z;
__gshared glbfn_glTransformFeedbackBufferBase glTransformFeedbackBufferBase_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glTransformFeedbackBufferBase_loader(a00,a01,a02,);
};
private void glbfn_glTransformFeedbackBufferBase_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glTransformFeedbackBufferBase_Z = glbindGetProcAddress(`glTransformFeedbackBufferBase`);
  if (*cast(void**)&glTransformFeedbackBufferBase_Z is null) assert(0, `OpenGL function 'glTransformFeedbackBufferBase' not found!`);
  glTransformFeedbackBufferBase_Z(a00,a01,a02,);
}
alias glTransformFeedbackBufferRange = glTransformFeedbackBufferRange_Z;
__gshared glbfn_glTransformFeedbackBufferRange glTransformFeedbackBufferRange_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glTransformFeedbackBufferRange_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTransformFeedbackBufferRange_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glTransformFeedbackBufferRange_Z = glbindGetProcAddress(`glTransformFeedbackBufferRange`);
  if (*cast(void**)&glTransformFeedbackBufferRange_Z is null) assert(0, `OpenGL function 'glTransformFeedbackBufferRange' not found!`);
  glTransformFeedbackBufferRange_Z(a00,a01,a02,a03,a04,);
}
alias glGetTransformFeedbackiv = glGetTransformFeedbackiv_Z;
__gshared glbfn_glGetTransformFeedbackiv glGetTransformFeedbackiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTransformFeedbackiv_loader(a00,a01,a02,);
};
private void glbfn_glGetTransformFeedbackiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTransformFeedbackiv_Z = glbindGetProcAddress(`glGetTransformFeedbackiv`);
  if (*cast(void**)&glGetTransformFeedbackiv_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackiv' not found!`);
  glGetTransformFeedbackiv_Z(a00,a01,a02,);
}
alias glGetTransformFeedbacki_v = glGetTransformFeedbacki_v_Z;
__gshared glbfn_glGetTransformFeedbacki_v glGetTransformFeedbacki_v_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetTransformFeedbacki_v_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTransformFeedbacki_v_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetTransformFeedbacki_v_Z = glbindGetProcAddress(`glGetTransformFeedbacki_v`);
  if (*cast(void**)&glGetTransformFeedbacki_v_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbacki_v' not found!`);
  glGetTransformFeedbacki_v_Z(a00,a01,a02,a03,);
}
alias glGetTransformFeedbacki64_v = glGetTransformFeedbacki64_v_Z;
__gshared glbfn_glGetTransformFeedbacki64_v glGetTransformFeedbacki64_v_Z = function void (uint a00,uint a01,uint a02,long* a03) {
  glbfn_glGetTransformFeedbacki64_v_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTransformFeedbacki64_v_loader (uint a00,uint a01,uint a02,long* a03) {
  *cast(void**)&glGetTransformFeedbacki64_v_Z = glbindGetProcAddress(`glGetTransformFeedbacki64_v`);
  if (*cast(void**)&glGetTransformFeedbacki64_v_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbacki64_v' not found!`);
  glGetTransformFeedbacki64_v_Z(a00,a01,a02,a03,);
}
alias glCreateBuffers = glCreateBuffers_Z;
__gshared glbfn_glCreateBuffers glCreateBuffers_Z = function void (int a00,uint* a01) {
  glbfn_glCreateBuffers_loader(a00,a01,);
};
private void glbfn_glCreateBuffers_loader (int a00,uint* a01) {
  *cast(void**)&glCreateBuffers_Z = glbindGetProcAddress(`glCreateBuffers`);
  if (*cast(void**)&glCreateBuffers_Z is null) assert(0, `OpenGL function 'glCreateBuffers' not found!`);
  glCreateBuffers_Z(a00,a01,);
}
alias glNamedBufferStorage = glNamedBufferStorage_Z;
__gshared glbfn_glNamedBufferStorage glNamedBufferStorage_Z = function void (uint a00,int a01,const(void)* a02,uint a03) {
  glbfn_glNamedBufferStorage_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferStorage_loader (uint a00,int a01,const(void)* a02,uint a03) {
  *cast(void**)&glNamedBufferStorage_Z = glbindGetProcAddress(`glNamedBufferStorage`);
  if (*cast(void**)&glNamedBufferStorage_Z is null) assert(0, `OpenGL function 'glNamedBufferStorage' not found!`);
  glNamedBufferStorage_Z(a00,a01,a02,a03,);
}
alias glNamedBufferData = glNamedBufferData_Z;
__gshared glbfn_glNamedBufferData glNamedBufferData_Z = function void (uint a00,int a01,const(void)* a02,uint a03) {
  glbfn_glNamedBufferData_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferData_loader (uint a00,int a01,const(void)* a02,uint a03) {
  *cast(void**)&glNamedBufferData_Z = glbindGetProcAddress(`glNamedBufferData`);
  if (*cast(void**)&glNamedBufferData_Z is null) assert(0, `OpenGL function 'glNamedBufferData' not found!`);
  glNamedBufferData_Z(a00,a01,a02,a03,);
}
alias glNamedBufferSubData = glNamedBufferSubData_Z;
__gshared glbfn_glNamedBufferSubData glNamedBufferSubData_Z = function void (uint a00,int a01,int a02,const(void)* a03) {
  glbfn_glNamedBufferSubData_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferSubData_loader (uint a00,int a01,int a02,const(void)* a03) {
  *cast(void**)&glNamedBufferSubData_Z = glbindGetProcAddress(`glNamedBufferSubData`);
  if (*cast(void**)&glNamedBufferSubData_Z is null) assert(0, `OpenGL function 'glNamedBufferSubData' not found!`);
  glNamedBufferSubData_Z(a00,a01,a02,a03,);
}
alias glCopyNamedBufferSubData = glCopyNamedBufferSubData_Z;
__gshared glbfn_glCopyNamedBufferSubData glCopyNamedBufferSubData_Z = function void (uint a00,uint a01,int a02,int a03,int a04) {
  glbfn_glCopyNamedBufferSubData_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyNamedBufferSubData_loader (uint a00,uint a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyNamedBufferSubData_Z = glbindGetProcAddress(`glCopyNamedBufferSubData`);
  if (*cast(void**)&glCopyNamedBufferSubData_Z is null) assert(0, `OpenGL function 'glCopyNamedBufferSubData' not found!`);
  glCopyNamedBufferSubData_Z(a00,a01,a02,a03,a04,);
}
alias glClearNamedBufferData = glClearNamedBufferData_Z;
__gshared glbfn_glClearNamedBufferData glClearNamedBufferData_Z = function void (uint a00,uint a01,uint a02,uint a03,const(void)* a04) {
  glbfn_glClearNamedBufferData_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glClearNamedBufferData_loader (uint a00,uint a01,uint a02,uint a03,const(void)* a04) {
  *cast(void**)&glClearNamedBufferData_Z = glbindGetProcAddress(`glClearNamedBufferData`);
  if (*cast(void**)&glClearNamedBufferData_Z is null) assert(0, `OpenGL function 'glClearNamedBufferData' not found!`);
  glClearNamedBufferData_Z(a00,a01,a02,a03,a04,);
}
alias glClearNamedBufferSubData = glClearNamedBufferSubData_Z;
__gshared glbfn_glClearNamedBufferSubData glClearNamedBufferSubData_Z = function void (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glClearNamedBufferSubData_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glClearNamedBufferSubData_loader (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glClearNamedBufferSubData_Z = glbindGetProcAddress(`glClearNamedBufferSubData`);
  if (*cast(void**)&glClearNamedBufferSubData_Z is null) assert(0, `OpenGL function 'glClearNamedBufferSubData' not found!`);
  glClearNamedBufferSubData_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMapNamedBuffer = glMapNamedBuffer_Z;
__gshared glbfn_glMapNamedBuffer glMapNamedBuffer_Z = function void* (uint a00,uint a01) {
  return glbfn_glMapNamedBuffer_loader(a00,a01,);
};
private void* glbfn_glMapNamedBuffer_loader (uint a00,uint a01) {
  *cast(void**)&glMapNamedBuffer_Z = glbindGetProcAddress(`glMapNamedBuffer`);
  if (*cast(void**)&glMapNamedBuffer_Z is null) assert(0, `OpenGL function 'glMapNamedBuffer' not found!`);
  return glMapNamedBuffer_Z(a00,a01,);
}
alias glMapNamedBufferRange = glMapNamedBufferRange_Z;
__gshared glbfn_glMapNamedBufferRange glMapNamedBufferRange_Z = function void* (uint a00,int a01,int a02,uint a03) {
  return glbfn_glMapNamedBufferRange_loader(a00,a01,a02,a03,);
};
private void* glbfn_glMapNamedBufferRange_loader (uint a00,int a01,int a02,uint a03) {
  *cast(void**)&glMapNamedBufferRange_Z = glbindGetProcAddress(`glMapNamedBufferRange`);
  if (*cast(void**)&glMapNamedBufferRange_Z is null) assert(0, `OpenGL function 'glMapNamedBufferRange' not found!`);
  return glMapNamedBufferRange_Z(a00,a01,a02,a03,);
}
alias glUnmapNamedBuffer = glUnmapNamedBuffer_Z;
__gshared glbfn_glUnmapNamedBuffer glUnmapNamedBuffer_Z = function ubyte (uint a00) {
  return glbfn_glUnmapNamedBuffer_loader(a00,);
};
private ubyte glbfn_glUnmapNamedBuffer_loader (uint a00) {
  *cast(void**)&glUnmapNamedBuffer_Z = glbindGetProcAddress(`glUnmapNamedBuffer`);
  if (*cast(void**)&glUnmapNamedBuffer_Z is null) assert(0, `OpenGL function 'glUnmapNamedBuffer' not found!`);
  return glUnmapNamedBuffer_Z(a00,);
}
alias glFlushMappedNamedBufferRange = glFlushMappedNamedBufferRange_Z;
__gshared glbfn_glFlushMappedNamedBufferRange glFlushMappedNamedBufferRange_Z = function void (uint a00,int a01,int a02) {
  glbfn_glFlushMappedNamedBufferRange_loader(a00,a01,a02,);
};
private void glbfn_glFlushMappedNamedBufferRange_loader (uint a00,int a01,int a02) {
  *cast(void**)&glFlushMappedNamedBufferRange_Z = glbindGetProcAddress(`glFlushMappedNamedBufferRange`);
  if (*cast(void**)&glFlushMappedNamedBufferRange_Z is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRange' not found!`);
  glFlushMappedNamedBufferRange_Z(a00,a01,a02,);
}
alias glGetNamedBufferParameteriv = glGetNamedBufferParameteriv_Z;
__gshared glbfn_glGetNamedBufferParameteriv glGetNamedBufferParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetNamedBufferParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedBufferParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetNamedBufferParameteriv_Z = glbindGetProcAddress(`glGetNamedBufferParameteriv`);
  if (*cast(void**)&glGetNamedBufferParameteriv_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameteriv' not found!`);
  glGetNamedBufferParameteriv_Z(a00,a01,a02,);
}
alias glGetNamedBufferParameteri64v = glGetNamedBufferParameteri64v_Z;
__gshared glbfn_glGetNamedBufferParameteri64v glGetNamedBufferParameteri64v_Z = function void (uint a00,uint a01,long* a02) {
  glbfn_glGetNamedBufferParameteri64v_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedBufferParameteri64v_loader (uint a00,uint a01,long* a02) {
  *cast(void**)&glGetNamedBufferParameteri64v_Z = glbindGetProcAddress(`glGetNamedBufferParameteri64v`);
  if (*cast(void**)&glGetNamedBufferParameteri64v_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameteri64v' not found!`);
  glGetNamedBufferParameteri64v_Z(a00,a01,a02,);
}
alias glGetNamedBufferPointerv = glGetNamedBufferPointerv_Z;
__gshared glbfn_glGetNamedBufferPointerv glGetNamedBufferPointerv_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetNamedBufferPointerv_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedBufferPointerv_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetNamedBufferPointerv_Z = glbindGetProcAddress(`glGetNamedBufferPointerv`);
  if (*cast(void**)&glGetNamedBufferPointerv_Z is null) assert(0, `OpenGL function 'glGetNamedBufferPointerv' not found!`);
  glGetNamedBufferPointerv_Z(a00,a01,a02,);
}
alias glGetNamedBufferSubData = glGetNamedBufferSubData_Z;
__gshared glbfn_glGetNamedBufferSubData glGetNamedBufferSubData_Z = function void (uint a00,int a01,int a02,void* a03) {
  glbfn_glGetNamedBufferSubData_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedBufferSubData_loader (uint a00,int a01,int a02,void* a03) {
  *cast(void**)&glGetNamedBufferSubData_Z = glbindGetProcAddress(`glGetNamedBufferSubData`);
  if (*cast(void**)&glGetNamedBufferSubData_Z is null) assert(0, `OpenGL function 'glGetNamedBufferSubData' not found!`);
  glGetNamedBufferSubData_Z(a00,a01,a02,a03,);
}
alias glCreateFramebuffers = glCreateFramebuffers_Z;
__gshared glbfn_glCreateFramebuffers glCreateFramebuffers_Z = function void (int a00,uint* a01) {
  glbfn_glCreateFramebuffers_loader(a00,a01,);
};
private void glbfn_glCreateFramebuffers_loader (int a00,uint* a01) {
  *cast(void**)&glCreateFramebuffers_Z = glbindGetProcAddress(`glCreateFramebuffers`);
  if (*cast(void**)&glCreateFramebuffers_Z is null) assert(0, `OpenGL function 'glCreateFramebuffers' not found!`);
  glCreateFramebuffers_Z(a00,a01,);
}
alias glNamedFramebufferRenderbuffer = glNamedFramebufferRenderbuffer_Z;
__gshared glbfn_glNamedFramebufferRenderbuffer glNamedFramebufferRenderbuffer_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glNamedFramebufferRenderbuffer_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedFramebufferRenderbuffer_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glNamedFramebufferRenderbuffer_Z = glbindGetProcAddress(`glNamedFramebufferRenderbuffer`);
  if (*cast(void**)&glNamedFramebufferRenderbuffer_Z is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbuffer' not found!`);
  glNamedFramebufferRenderbuffer_Z(a00,a01,a02,a03,);
}
alias glNamedFramebufferParameteri = glNamedFramebufferParameteri_Z;
__gshared glbfn_glNamedFramebufferParameteri glNamedFramebufferParameteri_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glNamedFramebufferParameteri_loader(a00,a01,a02,);
};
private void glbfn_glNamedFramebufferParameteri_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glNamedFramebufferParameteri_Z = glbindGetProcAddress(`glNamedFramebufferParameteri`);
  if (*cast(void**)&glNamedFramebufferParameteri_Z is null) assert(0, `OpenGL function 'glNamedFramebufferParameteri' not found!`);
  glNamedFramebufferParameteri_Z(a00,a01,a02,);
}
alias glNamedFramebufferTexture = glNamedFramebufferTexture_Z;
__gshared glbfn_glNamedFramebufferTexture glNamedFramebufferTexture_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glNamedFramebufferTexture_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedFramebufferTexture_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glNamedFramebufferTexture_Z = glbindGetProcAddress(`glNamedFramebufferTexture`);
  if (*cast(void**)&glNamedFramebufferTexture_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture' not found!`);
  glNamedFramebufferTexture_Z(a00,a01,a02,a03,);
}
alias glNamedFramebufferTextureLayer = glNamedFramebufferTextureLayer_Z;
__gshared glbfn_glNamedFramebufferTextureLayer glNamedFramebufferTextureLayer_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glNamedFramebufferTextureLayer_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedFramebufferTextureLayer_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glNamedFramebufferTextureLayer_Z = glbindGetProcAddress(`glNamedFramebufferTextureLayer`);
  if (*cast(void**)&glNamedFramebufferTextureLayer_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayer' not found!`);
  glNamedFramebufferTextureLayer_Z(a00,a01,a02,a03,a04,);
}
alias glNamedFramebufferDrawBuffer = glNamedFramebufferDrawBuffer_Z;
__gshared glbfn_glNamedFramebufferDrawBuffer glNamedFramebufferDrawBuffer_Z = function void (uint a00,uint a01) {
  glbfn_glNamedFramebufferDrawBuffer_loader(a00,a01,);
};
private void glbfn_glNamedFramebufferDrawBuffer_loader (uint a00,uint a01) {
  *cast(void**)&glNamedFramebufferDrawBuffer_Z = glbindGetProcAddress(`glNamedFramebufferDrawBuffer`);
  if (*cast(void**)&glNamedFramebufferDrawBuffer_Z is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffer' not found!`);
  glNamedFramebufferDrawBuffer_Z(a00,a01,);
}
alias glNamedFramebufferDrawBuffers = glNamedFramebufferDrawBuffers_Z;
__gshared glbfn_glNamedFramebufferDrawBuffers glNamedFramebufferDrawBuffers_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glNamedFramebufferDrawBuffers_loader(a00,a01,a02,);
};
private void glbfn_glNamedFramebufferDrawBuffers_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glNamedFramebufferDrawBuffers_Z = glbindGetProcAddress(`glNamedFramebufferDrawBuffers`);
  if (*cast(void**)&glNamedFramebufferDrawBuffers_Z is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffers' not found!`);
  glNamedFramebufferDrawBuffers_Z(a00,a01,a02,);
}
alias glNamedFramebufferReadBuffer = glNamedFramebufferReadBuffer_Z;
__gshared glbfn_glNamedFramebufferReadBuffer glNamedFramebufferReadBuffer_Z = function void (uint a00,uint a01) {
  glbfn_glNamedFramebufferReadBuffer_loader(a00,a01,);
};
private void glbfn_glNamedFramebufferReadBuffer_loader (uint a00,uint a01) {
  *cast(void**)&glNamedFramebufferReadBuffer_Z = glbindGetProcAddress(`glNamedFramebufferReadBuffer`);
  if (*cast(void**)&glNamedFramebufferReadBuffer_Z is null) assert(0, `OpenGL function 'glNamedFramebufferReadBuffer' not found!`);
  glNamedFramebufferReadBuffer_Z(a00,a01,);
}
alias glInvalidateNamedFramebufferData = glInvalidateNamedFramebufferData_Z;
__gshared glbfn_glInvalidateNamedFramebufferData glInvalidateNamedFramebufferData_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glInvalidateNamedFramebufferData_loader(a00,a01,a02,);
};
private void glbfn_glInvalidateNamedFramebufferData_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glInvalidateNamedFramebufferData_Z = glbindGetProcAddress(`glInvalidateNamedFramebufferData`);
  if (*cast(void**)&glInvalidateNamedFramebufferData_Z is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferData' not found!`);
  glInvalidateNamedFramebufferData_Z(a00,a01,a02,);
}
alias glInvalidateNamedFramebufferSubData = glInvalidateNamedFramebufferSubData_Z;
__gshared glbfn_glInvalidateNamedFramebufferSubData glInvalidateNamedFramebufferSubData_Z = function void (uint a00,int a01,const(uint)* a02,int a03,int a04,int a05,int a06) {
  glbfn_glInvalidateNamedFramebufferSubData_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glInvalidateNamedFramebufferSubData_loader (uint a00,int a01,const(uint)* a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glInvalidateNamedFramebufferSubData_Z = glbindGetProcAddress(`glInvalidateNamedFramebufferSubData`);
  if (*cast(void**)&glInvalidateNamedFramebufferSubData_Z is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferSubData' not found!`);
  glInvalidateNamedFramebufferSubData_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glClearNamedFramebufferiv = glClearNamedFramebufferiv_Z;
__gshared glbfn_glClearNamedFramebufferiv glClearNamedFramebufferiv_Z = function void (uint a00,uint a01,int a02,const(int)* a03) {
  glbfn_glClearNamedFramebufferiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearNamedFramebufferiv_loader (uint a00,uint a01,int a02,const(int)* a03) {
  *cast(void**)&glClearNamedFramebufferiv_Z = glbindGetProcAddress(`glClearNamedFramebufferiv`);
  if (*cast(void**)&glClearNamedFramebufferiv_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferiv' not found!`);
  glClearNamedFramebufferiv_Z(a00,a01,a02,a03,);
}
alias glClearNamedFramebufferuiv = glClearNamedFramebufferuiv_Z;
__gshared glbfn_glClearNamedFramebufferuiv glClearNamedFramebufferuiv_Z = function void (uint a00,uint a01,int a02,const(uint)* a03) {
  glbfn_glClearNamedFramebufferuiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearNamedFramebufferuiv_loader (uint a00,uint a01,int a02,const(uint)* a03) {
  *cast(void**)&glClearNamedFramebufferuiv_Z = glbindGetProcAddress(`glClearNamedFramebufferuiv`);
  if (*cast(void**)&glClearNamedFramebufferuiv_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferuiv' not found!`);
  glClearNamedFramebufferuiv_Z(a00,a01,a02,a03,);
}
alias glClearNamedFramebufferfv = glClearNamedFramebufferfv_Z;
__gshared glbfn_glClearNamedFramebufferfv glClearNamedFramebufferfv_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glClearNamedFramebufferfv_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearNamedFramebufferfv_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glClearNamedFramebufferfv_Z = glbindGetProcAddress(`glClearNamedFramebufferfv`);
  if (*cast(void**)&glClearNamedFramebufferfv_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferfv' not found!`);
  glClearNamedFramebufferfv_Z(a00,a01,a02,a03,);
}
alias glClearNamedFramebufferfi = glClearNamedFramebufferfi_Z;
__gshared glbfn_glClearNamedFramebufferfi glClearNamedFramebufferfi_Z = function void (uint a00,uint a01,int a02,float a03,int a04) {
  glbfn_glClearNamedFramebufferfi_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glClearNamedFramebufferfi_loader (uint a00,uint a01,int a02,float a03,int a04) {
  *cast(void**)&glClearNamedFramebufferfi_Z = glbindGetProcAddress(`glClearNamedFramebufferfi`);
  if (*cast(void**)&glClearNamedFramebufferfi_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferfi' not found!`);
  glClearNamedFramebufferfi_Z(a00,a01,a02,a03,a04,);
}
alias glBlitNamedFramebuffer = glBlitNamedFramebuffer_Z;
__gshared glbfn_glBlitNamedFramebuffer glBlitNamedFramebuffer_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09,uint a10,uint a11) {
  glbfn_glBlitNamedFramebuffer_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glBlitNamedFramebuffer_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09,uint a10,uint a11) {
  *cast(void**)&glBlitNamedFramebuffer_Z = glbindGetProcAddress(`glBlitNamedFramebuffer`);
  if (*cast(void**)&glBlitNamedFramebuffer_Z is null) assert(0, `OpenGL function 'glBlitNamedFramebuffer' not found!`);
  glBlitNamedFramebuffer_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glCheckNamedFramebufferStatus = glCheckNamedFramebufferStatus_Z;
__gshared glbfn_glCheckNamedFramebufferStatus glCheckNamedFramebufferStatus_Z = function uint (uint a00,uint a01) {
  return glbfn_glCheckNamedFramebufferStatus_loader(a00,a01,);
};
private uint glbfn_glCheckNamedFramebufferStatus_loader (uint a00,uint a01) {
  *cast(void**)&glCheckNamedFramebufferStatus_Z = glbindGetProcAddress(`glCheckNamedFramebufferStatus`);
  if (*cast(void**)&glCheckNamedFramebufferStatus_Z is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatus' not found!`);
  return glCheckNamedFramebufferStatus_Z(a00,a01,);
}
alias glGetNamedFramebufferParameteriv = glGetNamedFramebufferParameteriv_Z;
__gshared glbfn_glGetNamedFramebufferParameteriv glGetNamedFramebufferParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetNamedFramebufferParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedFramebufferParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetNamedFramebufferParameteriv_Z = glbindGetProcAddress(`glGetNamedFramebufferParameteriv`);
  if (*cast(void**)&glGetNamedFramebufferParameteriv_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameteriv' not found!`);
  glGetNamedFramebufferParameteriv_Z(a00,a01,a02,);
}
alias glGetNamedFramebufferAttachmentParameteriv = glGetNamedFramebufferAttachmentParameteriv_Z;
__gshared glbfn_glGetNamedFramebufferAttachmentParameteriv glGetNamedFramebufferAttachmentParameteriv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetNamedFramebufferAttachmentParameteriv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedFramebufferAttachmentParameteriv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetNamedFramebufferAttachmentParameteriv_Z = glbindGetProcAddress(`glGetNamedFramebufferAttachmentParameteriv`);
  if (*cast(void**)&glGetNamedFramebufferAttachmentParameteriv_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameteriv' not found!`);
  glGetNamedFramebufferAttachmentParameteriv_Z(a00,a01,a02,a03,);
}
alias glCreateRenderbuffers = glCreateRenderbuffers_Z;
__gshared glbfn_glCreateRenderbuffers glCreateRenderbuffers_Z = function void (int a00,uint* a01) {
  glbfn_glCreateRenderbuffers_loader(a00,a01,);
};
private void glbfn_glCreateRenderbuffers_loader (int a00,uint* a01) {
  *cast(void**)&glCreateRenderbuffers_Z = glbindGetProcAddress(`glCreateRenderbuffers`);
  if (*cast(void**)&glCreateRenderbuffers_Z is null) assert(0, `OpenGL function 'glCreateRenderbuffers' not found!`);
  glCreateRenderbuffers_Z(a00,a01,);
}
alias glNamedRenderbufferStorage = glNamedRenderbufferStorage_Z;
__gshared glbfn_glNamedRenderbufferStorage glNamedRenderbufferStorage_Z = function void (uint a00,uint a01,int a02,int a03) {
  glbfn_glNamedRenderbufferStorage_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedRenderbufferStorage_loader (uint a00,uint a01,int a02,int a03) {
  *cast(void**)&glNamedRenderbufferStorage_Z = glbindGetProcAddress(`glNamedRenderbufferStorage`);
  if (*cast(void**)&glNamedRenderbufferStorage_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorage' not found!`);
  glNamedRenderbufferStorage_Z(a00,a01,a02,a03,);
}
alias glNamedRenderbufferStorageMultisample = glNamedRenderbufferStorageMultisample_Z;
__gshared glbfn_glNamedRenderbufferStorageMultisample glNamedRenderbufferStorageMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04) {
  glbfn_glNamedRenderbufferStorageMultisample_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedRenderbufferStorageMultisample_loader (uint a00,int a01,uint a02,int a03,int a04) {
  *cast(void**)&glNamedRenderbufferStorageMultisample_Z = glbindGetProcAddress(`glNamedRenderbufferStorageMultisample`);
  if (*cast(void**)&glNamedRenderbufferStorageMultisample_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisample' not found!`);
  glNamedRenderbufferStorageMultisample_Z(a00,a01,a02,a03,a04,);
}
alias glGetNamedRenderbufferParameteriv = glGetNamedRenderbufferParameteriv_Z;
__gshared glbfn_glGetNamedRenderbufferParameteriv glGetNamedRenderbufferParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetNamedRenderbufferParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedRenderbufferParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetNamedRenderbufferParameteriv_Z = glbindGetProcAddress(`glGetNamedRenderbufferParameteriv`);
  if (*cast(void**)&glGetNamedRenderbufferParameteriv_Z is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameteriv' not found!`);
  glGetNamedRenderbufferParameteriv_Z(a00,a01,a02,);
}
alias glCreateTextures = glCreateTextures_Z;
__gshared glbfn_glCreateTextures glCreateTextures_Z = function void (uint a00,int a01,uint* a02) {
  glbfn_glCreateTextures_loader(a00,a01,a02,);
};
private void glbfn_glCreateTextures_loader (uint a00,int a01,uint* a02) {
  *cast(void**)&glCreateTextures_Z = glbindGetProcAddress(`glCreateTextures`);
  if (*cast(void**)&glCreateTextures_Z is null) assert(0, `OpenGL function 'glCreateTextures' not found!`);
  glCreateTextures_Z(a00,a01,a02,);
}
alias glTextureBuffer = glTextureBuffer_Z;
__gshared glbfn_glTextureBuffer glTextureBuffer_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glTextureBuffer_loader(a00,a01,a02,);
};
private void glbfn_glTextureBuffer_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glTextureBuffer_Z = glbindGetProcAddress(`glTextureBuffer`);
  if (*cast(void**)&glTextureBuffer_Z is null) assert(0, `OpenGL function 'glTextureBuffer' not found!`);
  glTextureBuffer_Z(a00,a01,a02,);
}
alias glTextureBufferRange = glTextureBufferRange_Z;
__gshared glbfn_glTextureBufferRange glTextureBufferRange_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glTextureBufferRange_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTextureBufferRange_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glTextureBufferRange_Z = glbindGetProcAddress(`glTextureBufferRange`);
  if (*cast(void**)&glTextureBufferRange_Z is null) assert(0, `OpenGL function 'glTextureBufferRange' not found!`);
  glTextureBufferRange_Z(a00,a01,a02,a03,a04,);
}
alias glTextureStorage1D = glTextureStorage1D_Z;
__gshared glbfn_glTextureStorage1D glTextureStorage1D_Z = function void (uint a00,int a01,uint a02,int a03) {
  glbfn_glTextureStorage1D_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureStorage1D_loader (uint a00,int a01,uint a02,int a03) {
  *cast(void**)&glTextureStorage1D_Z = glbindGetProcAddress(`glTextureStorage1D`);
  if (*cast(void**)&glTextureStorage1D_Z is null) assert(0, `OpenGL function 'glTextureStorage1D' not found!`);
  glTextureStorage1D_Z(a00,a01,a02,a03,);
}
alias glTextureStorage2D = glTextureStorage2D_Z;
__gshared glbfn_glTextureStorage2D glTextureStorage2D_Z = function void (uint a00,int a01,uint a02,int a03,int a04) {
  glbfn_glTextureStorage2D_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTextureStorage2D_loader (uint a00,int a01,uint a02,int a03,int a04) {
  *cast(void**)&glTextureStorage2D_Z = glbindGetProcAddress(`glTextureStorage2D`);
  if (*cast(void**)&glTextureStorage2D_Z is null) assert(0, `OpenGL function 'glTextureStorage2D' not found!`);
  glTextureStorage2D_Z(a00,a01,a02,a03,a04,);
}
alias glTextureStorage3D = glTextureStorage3D_Z;
__gshared glbfn_glTextureStorage3D glTextureStorage3D_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05) {
  glbfn_glTextureStorage3D_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glTextureStorage3D_loader (uint a00,int a01,uint a02,int a03,int a04,int a05) {
  *cast(void**)&glTextureStorage3D_Z = glbindGetProcAddress(`glTextureStorage3D`);
  if (*cast(void**)&glTextureStorage3D_Z is null) assert(0, `OpenGL function 'glTextureStorage3D' not found!`);
  glTextureStorage3D_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTextureStorage2DMultisample = glTextureStorage2DMultisample_Z;
__gshared glbfn_glTextureStorage2DMultisample glTextureStorage2DMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04,ubyte a05) {
  glbfn_glTextureStorage2DMultisample_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glTextureStorage2DMultisample_loader (uint a00,int a01,uint a02,int a03,int a04,ubyte a05) {
  *cast(void**)&glTextureStorage2DMultisample_Z = glbindGetProcAddress(`glTextureStorage2DMultisample`);
  if (*cast(void**)&glTextureStorage2DMultisample_Z is null) assert(0, `OpenGL function 'glTextureStorage2DMultisample' not found!`);
  glTextureStorage2DMultisample_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTextureStorage3DMultisample = glTextureStorage3DMultisample_Z;
__gshared glbfn_glTextureStorage3DMultisample glTextureStorage3DMultisample_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,ubyte a06) {
  glbfn_glTextureStorage3DMultisample_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTextureStorage3DMultisample_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,ubyte a06) {
  *cast(void**)&glTextureStorage3DMultisample_Z = glbindGetProcAddress(`glTextureStorage3DMultisample`);
  if (*cast(void**)&glTextureStorage3DMultisample_Z is null) assert(0, `OpenGL function 'glTextureStorage3DMultisample' not found!`);
  glTextureStorage3DMultisample_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTextureSubImage1D = glTextureSubImage1D_Z;
__gshared glbfn_glTextureSubImage1D glTextureSubImage1D_Z = function void (uint a00,int a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glTextureSubImage1D_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTextureSubImage1D_loader (uint a00,int a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glTextureSubImage1D_Z = glbindGetProcAddress(`glTextureSubImage1D`);
  if (*cast(void**)&glTextureSubImage1D_Z is null) assert(0, `OpenGL function 'glTextureSubImage1D' not found!`);
  glTextureSubImage1D_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTextureSubImage2D = glTextureSubImage2D_Z;
__gshared glbfn_glTextureSubImage2D glTextureSubImage2D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  glbfn_glTextureSubImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTextureSubImage2D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  *cast(void**)&glTextureSubImage2D_Z = glbindGetProcAddress(`glTextureSubImage2D`);
  if (*cast(void**)&glTextureSubImage2D_Z is null) assert(0, `OpenGL function 'glTextureSubImage2D' not found!`);
  glTextureSubImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glTextureSubImage3D = glTextureSubImage3D_Z;
__gshared glbfn_glTextureSubImage3D glTextureSubImage3D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  glbfn_glTextureSubImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glTextureSubImage3D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  *cast(void**)&glTextureSubImage3D_Z = glbindGetProcAddress(`glTextureSubImage3D`);
  if (*cast(void**)&glTextureSubImage3D_Z is null) assert(0, `OpenGL function 'glTextureSubImage3D' not found!`);
  glTextureSubImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glCompressedTextureSubImage1D = glCompressedTextureSubImage1D_Z;
__gshared glbfn_glCompressedTextureSubImage1D glCompressedTextureSubImage1D_Z = function void (uint a00,int a01,int a02,int a03,uint a04,int a05,const(void)* a06) {
  glbfn_glCompressedTextureSubImage1D_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCompressedTextureSubImage1D_loader (uint a00,int a01,int a02,int a03,uint a04,int a05,const(void)* a06) {
  *cast(void**)&glCompressedTextureSubImage1D_Z = glbindGetProcAddress(`glCompressedTextureSubImage1D`);
  if (*cast(void**)&glCompressedTextureSubImage1D_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1D' not found!`);
  glCompressedTextureSubImage1D_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCompressedTextureSubImage2D = glCompressedTextureSubImage2D_Z;
__gshared glbfn_glCompressedTextureSubImage2D glCompressedTextureSubImage2D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,int a07,const(void)* a08) {
  glbfn_glCompressedTextureSubImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCompressedTextureSubImage2D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,int a07,const(void)* a08) {
  *cast(void**)&glCompressedTextureSubImage2D_Z = glbindGetProcAddress(`glCompressedTextureSubImage2D`);
  if (*cast(void**)&glCompressedTextureSubImage2D_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2D' not found!`);
  glCompressedTextureSubImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCompressedTextureSubImage3D = glCompressedTextureSubImage3D_Z;
__gshared glbfn_glCompressedTextureSubImage3D glCompressedTextureSubImage3D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,int a09,const(void)* a10) {
  glbfn_glCompressedTextureSubImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glCompressedTextureSubImage3D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,int a09,const(void)* a10) {
  *cast(void**)&glCompressedTextureSubImage3D_Z = glbindGetProcAddress(`glCompressedTextureSubImage3D`);
  if (*cast(void**)&glCompressedTextureSubImage3D_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3D' not found!`);
  glCompressedTextureSubImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glCopyTextureSubImage1D = glCopyTextureSubImage1D_Z;
__gshared glbfn_glCopyTextureSubImage1D glCopyTextureSubImage1D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glCopyTextureSubImage1D_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glCopyTextureSubImage1D_loader (uint a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glCopyTextureSubImage1D_Z = glbindGetProcAddress(`glCopyTextureSubImage1D`);
  if (*cast(void**)&glCopyTextureSubImage1D_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage1D' not found!`);
  glCopyTextureSubImage1D_Z(a00,a01,a02,a03,a04,a05,);
}
alias glCopyTextureSubImage2D = glCopyTextureSubImage2D_Z;
__gshared glbfn_glCopyTextureSubImage2D glCopyTextureSubImage2D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  glbfn_glCopyTextureSubImage2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCopyTextureSubImage2D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glCopyTextureSubImage2D_Z = glbindGetProcAddress(`glCopyTextureSubImage2D`);
  if (*cast(void**)&glCopyTextureSubImage2D_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage2D' not found!`);
  glCopyTextureSubImage2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCopyTextureSubImage3D = glCopyTextureSubImage3D_Z;
__gshared glbfn_glCopyTextureSubImage3D glCopyTextureSubImage3D_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  glbfn_glCopyTextureSubImage3D_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCopyTextureSubImage3D_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  *cast(void**)&glCopyTextureSubImage3D_Z = glbindGetProcAddress(`glCopyTextureSubImage3D`);
  if (*cast(void**)&glCopyTextureSubImage3D_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage3D' not found!`);
  glCopyTextureSubImage3D_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glTextureParameterf = glTextureParameterf_Z;
__gshared glbfn_glTextureParameterf glTextureParameterf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glTextureParameterf_loader(a00,a01,a02,);
};
private void glbfn_glTextureParameterf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glTextureParameterf_Z = glbindGetProcAddress(`glTextureParameterf`);
  if (*cast(void**)&glTextureParameterf_Z is null) assert(0, `OpenGL function 'glTextureParameterf' not found!`);
  glTextureParameterf_Z(a00,a01,a02,);
}
alias glTextureParameterfv = glTextureParameterfv_Z;
__gshared glbfn_glTextureParameterfv glTextureParameterfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glTextureParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glTextureParameterfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glTextureParameterfv_Z = glbindGetProcAddress(`glTextureParameterfv`);
  if (*cast(void**)&glTextureParameterfv_Z is null) assert(0, `OpenGL function 'glTextureParameterfv' not found!`);
  glTextureParameterfv_Z(a00,a01,a02,);
}
alias glTextureParameteri = glTextureParameteri_Z;
__gshared glbfn_glTextureParameteri glTextureParameteri_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glTextureParameteri_loader(a00,a01,a02,);
};
private void glbfn_glTextureParameteri_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glTextureParameteri_Z = glbindGetProcAddress(`glTextureParameteri`);
  if (*cast(void**)&glTextureParameteri_Z is null) assert(0, `OpenGL function 'glTextureParameteri' not found!`);
  glTextureParameteri_Z(a00,a01,a02,);
}
alias glTextureParameterIiv = glTextureParameterIiv_Z;
__gshared glbfn_glTextureParameterIiv glTextureParameterIiv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTextureParameterIiv_loader(a00,a01,a02,);
};
private void glbfn_glTextureParameterIiv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTextureParameterIiv_Z = glbindGetProcAddress(`glTextureParameterIiv`);
  if (*cast(void**)&glTextureParameterIiv_Z is null) assert(0, `OpenGL function 'glTextureParameterIiv' not found!`);
  glTextureParameterIiv_Z(a00,a01,a02,);
}
alias glTextureParameterIuiv = glTextureParameterIuiv_Z;
__gshared glbfn_glTextureParameterIuiv glTextureParameterIuiv_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glTextureParameterIuiv_loader(a00,a01,a02,);
};
private void glbfn_glTextureParameterIuiv_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glTextureParameterIuiv_Z = glbindGetProcAddress(`glTextureParameterIuiv`);
  if (*cast(void**)&glTextureParameterIuiv_Z is null) assert(0, `OpenGL function 'glTextureParameterIuiv' not found!`);
  glTextureParameterIuiv_Z(a00,a01,a02,);
}
alias glTextureParameteriv = glTextureParameteriv_Z;
__gshared glbfn_glTextureParameteriv glTextureParameteriv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTextureParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glTextureParameteriv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTextureParameteriv_Z = glbindGetProcAddress(`glTextureParameteriv`);
  if (*cast(void**)&glTextureParameteriv_Z is null) assert(0, `OpenGL function 'glTextureParameteriv' not found!`);
  glTextureParameteriv_Z(a00,a01,a02,);
}
alias glGenerateTextureMipmap = glGenerateTextureMipmap_Z;
__gshared glbfn_glGenerateTextureMipmap glGenerateTextureMipmap_Z = function void (uint a00) {
  glbfn_glGenerateTextureMipmap_loader(a00,);
};
private void glbfn_glGenerateTextureMipmap_loader (uint a00) {
  *cast(void**)&glGenerateTextureMipmap_Z = glbindGetProcAddress(`glGenerateTextureMipmap`);
  if (*cast(void**)&glGenerateTextureMipmap_Z is null) assert(0, `OpenGL function 'glGenerateTextureMipmap' not found!`);
  glGenerateTextureMipmap_Z(a00,);
}
alias glBindTextureUnit = glBindTextureUnit_Z;
__gshared glbfn_glBindTextureUnit glBindTextureUnit_Z = function void (uint a00,uint a01) {
  glbfn_glBindTextureUnit_loader(a00,a01,);
};
private void glbfn_glBindTextureUnit_loader (uint a00,uint a01) {
  *cast(void**)&glBindTextureUnit_Z = glbindGetProcAddress(`glBindTextureUnit`);
  if (*cast(void**)&glBindTextureUnit_Z is null) assert(0, `OpenGL function 'glBindTextureUnit' not found!`);
  glBindTextureUnit_Z(a00,a01,);
}
alias glGetTextureImage = glGetTextureImage_Z;
__gshared glbfn_glGetTextureImage glGetTextureImage_Z = function void (uint a00,int a01,uint a02,uint a03,int a04,void* a05) {
  glbfn_glGetTextureImage_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetTextureImage_loader (uint a00,int a01,uint a02,uint a03,int a04,void* a05) {
  *cast(void**)&glGetTextureImage_Z = glbindGetProcAddress(`glGetTextureImage`);
  if (*cast(void**)&glGetTextureImage_Z is null) assert(0, `OpenGL function 'glGetTextureImage' not found!`);
  glGetTextureImage_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetCompressedTextureImage = glGetCompressedTextureImage_Z;
__gshared glbfn_glGetCompressedTextureImage glGetCompressedTextureImage_Z = function void (uint a00,int a01,int a02,void* a03) {
  glbfn_glGetCompressedTextureImage_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetCompressedTextureImage_loader (uint a00,int a01,int a02,void* a03) {
  *cast(void**)&glGetCompressedTextureImage_Z = glbindGetProcAddress(`glGetCompressedTextureImage`);
  if (*cast(void**)&glGetCompressedTextureImage_Z is null) assert(0, `OpenGL function 'glGetCompressedTextureImage' not found!`);
  glGetCompressedTextureImage_Z(a00,a01,a02,a03,);
}
alias glGetTextureLevelParameterfv = glGetTextureLevelParameterfv_Z;
__gshared glbfn_glGetTextureLevelParameterfv glGetTextureLevelParameterfv_Z = function void (uint a00,int a01,uint a02,float* a03) {
  glbfn_glGetTextureLevelParameterfv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTextureLevelParameterfv_loader (uint a00,int a01,uint a02,float* a03) {
  *cast(void**)&glGetTextureLevelParameterfv_Z = glbindGetProcAddress(`glGetTextureLevelParameterfv`);
  if (*cast(void**)&glGetTextureLevelParameterfv_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfv' not found!`);
  glGetTextureLevelParameterfv_Z(a00,a01,a02,a03,);
}
alias glGetTextureLevelParameteriv = glGetTextureLevelParameteriv_Z;
__gshared glbfn_glGetTextureLevelParameteriv glGetTextureLevelParameteriv_Z = function void (uint a00,int a01,uint a02,int* a03) {
  glbfn_glGetTextureLevelParameteriv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTextureLevelParameteriv_loader (uint a00,int a01,uint a02,int* a03) {
  *cast(void**)&glGetTextureLevelParameteriv_Z = glbindGetProcAddress(`glGetTextureLevelParameteriv`);
  if (*cast(void**)&glGetTextureLevelParameteriv_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameteriv' not found!`);
  glGetTextureLevelParameteriv_Z(a00,a01,a02,a03,);
}
alias glGetTextureParameterfv = glGetTextureParameterfv_Z;
__gshared glbfn_glGetTextureParameterfv glGetTextureParameterfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetTextureParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glGetTextureParameterfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetTextureParameterfv_Z = glbindGetProcAddress(`glGetTextureParameterfv`);
  if (*cast(void**)&glGetTextureParameterfv_Z is null) assert(0, `OpenGL function 'glGetTextureParameterfv' not found!`);
  glGetTextureParameterfv_Z(a00,a01,a02,);
}
alias glGetTextureParameterIiv = glGetTextureParameterIiv_Z;
__gshared glbfn_glGetTextureParameterIiv glGetTextureParameterIiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTextureParameterIiv_loader(a00,a01,a02,);
};
private void glbfn_glGetTextureParameterIiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTextureParameterIiv_Z = glbindGetProcAddress(`glGetTextureParameterIiv`);
  if (*cast(void**)&glGetTextureParameterIiv_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIiv' not found!`);
  glGetTextureParameterIiv_Z(a00,a01,a02,);
}
alias glGetTextureParameterIuiv = glGetTextureParameterIuiv_Z;
__gshared glbfn_glGetTextureParameterIuiv glGetTextureParameterIuiv_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetTextureParameterIuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetTextureParameterIuiv_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetTextureParameterIuiv_Z = glbindGetProcAddress(`glGetTextureParameterIuiv`);
  if (*cast(void**)&glGetTextureParameterIuiv_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIuiv' not found!`);
  glGetTextureParameterIuiv_Z(a00,a01,a02,);
}
alias glGetTextureParameteriv = glGetTextureParameteriv_Z;
__gshared glbfn_glGetTextureParameteriv glGetTextureParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTextureParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetTextureParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTextureParameteriv_Z = glbindGetProcAddress(`glGetTextureParameteriv`);
  if (*cast(void**)&glGetTextureParameteriv_Z is null) assert(0, `OpenGL function 'glGetTextureParameteriv' not found!`);
  glGetTextureParameteriv_Z(a00,a01,a02,);
}
alias glCreateVertexArrays = glCreateVertexArrays_Z;
__gshared glbfn_glCreateVertexArrays glCreateVertexArrays_Z = function void (int a00,uint* a01) {
  glbfn_glCreateVertexArrays_loader(a00,a01,);
};
private void glbfn_glCreateVertexArrays_loader (int a00,uint* a01) {
  *cast(void**)&glCreateVertexArrays_Z = glbindGetProcAddress(`glCreateVertexArrays`);
  if (*cast(void**)&glCreateVertexArrays_Z is null) assert(0, `OpenGL function 'glCreateVertexArrays' not found!`);
  glCreateVertexArrays_Z(a00,a01,);
}
alias glDisableVertexArrayAttrib = glDisableVertexArrayAttrib_Z;
__gshared glbfn_glDisableVertexArrayAttrib glDisableVertexArrayAttrib_Z = function void (uint a00,uint a01) {
  glbfn_glDisableVertexArrayAttrib_loader(a00,a01,);
};
private void glbfn_glDisableVertexArrayAttrib_loader (uint a00,uint a01) {
  *cast(void**)&glDisableVertexArrayAttrib_Z = glbindGetProcAddress(`glDisableVertexArrayAttrib`);
  if (*cast(void**)&glDisableVertexArrayAttrib_Z is null) assert(0, `OpenGL function 'glDisableVertexArrayAttrib' not found!`);
  glDisableVertexArrayAttrib_Z(a00,a01,);
}
alias glEnableVertexArrayAttrib = glEnableVertexArrayAttrib_Z;
__gshared glbfn_glEnableVertexArrayAttrib glEnableVertexArrayAttrib_Z = function void (uint a00,uint a01) {
  glbfn_glEnableVertexArrayAttrib_loader(a00,a01,);
};
private void glbfn_glEnableVertexArrayAttrib_loader (uint a00,uint a01) {
  *cast(void**)&glEnableVertexArrayAttrib_Z = glbindGetProcAddress(`glEnableVertexArrayAttrib`);
  if (*cast(void**)&glEnableVertexArrayAttrib_Z is null) assert(0, `OpenGL function 'glEnableVertexArrayAttrib' not found!`);
  glEnableVertexArrayAttrib_Z(a00,a01,);
}
alias glVertexArrayElementBuffer = glVertexArrayElementBuffer_Z;
__gshared glbfn_glVertexArrayElementBuffer glVertexArrayElementBuffer_Z = function void (uint a00,uint a01) {
  glbfn_glVertexArrayElementBuffer_loader(a00,a01,);
};
private void glbfn_glVertexArrayElementBuffer_loader (uint a00,uint a01) {
  *cast(void**)&glVertexArrayElementBuffer_Z = glbindGetProcAddress(`glVertexArrayElementBuffer`);
  if (*cast(void**)&glVertexArrayElementBuffer_Z is null) assert(0, `OpenGL function 'glVertexArrayElementBuffer' not found!`);
  glVertexArrayElementBuffer_Z(a00,a01,);
}
alias glVertexArrayVertexBuffer = glVertexArrayVertexBuffer_Z;
__gshared glbfn_glVertexArrayVertexBuffer glVertexArrayVertexBuffer_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glVertexArrayVertexBuffer_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayVertexBuffer_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glVertexArrayVertexBuffer_Z = glbindGetProcAddress(`glVertexArrayVertexBuffer`);
  if (*cast(void**)&glVertexArrayVertexBuffer_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffer' not found!`);
  glVertexArrayVertexBuffer_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayVertexBuffers = glVertexArrayVertexBuffers_Z;
__gshared glbfn_glVertexArrayVertexBuffers glVertexArrayVertexBuffers_Z = function void (uint a00,uint a01,int a02,const(uint)* a03,const(int)* a04,const(int)* a05) {
  glbfn_glVertexArrayVertexBuffers_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexArrayVertexBuffers_loader (uint a00,uint a01,int a02,const(uint)* a03,const(int)* a04,const(int)* a05) {
  *cast(void**)&glVertexArrayVertexBuffers_Z = glbindGetProcAddress(`glVertexArrayVertexBuffers`);
  if (*cast(void**)&glVertexArrayVertexBuffers_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffers' not found!`);
  glVertexArrayVertexBuffers_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexArrayAttribBinding = glVertexArrayAttribBinding_Z;
__gshared glbfn_glVertexArrayAttribBinding glVertexArrayAttribBinding_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glVertexArrayAttribBinding_loader(a00,a01,a02,);
};
private void glbfn_glVertexArrayAttribBinding_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glVertexArrayAttribBinding_Z = glbindGetProcAddress(`glVertexArrayAttribBinding`);
  if (*cast(void**)&glVertexArrayAttribBinding_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribBinding' not found!`);
  glVertexArrayAttribBinding_Z(a00,a01,a02,);
}
alias glVertexArrayAttribFormat = glVertexArrayAttribFormat_Z;
__gshared glbfn_glVertexArrayAttribFormat glVertexArrayAttribFormat_Z = function void (uint a00,uint a01,int a02,uint a03,ubyte a04,uint a05) {
  glbfn_glVertexArrayAttribFormat_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexArrayAttribFormat_loader (uint a00,uint a01,int a02,uint a03,ubyte a04,uint a05) {
  *cast(void**)&glVertexArrayAttribFormat_Z = glbindGetProcAddress(`glVertexArrayAttribFormat`);
  if (*cast(void**)&glVertexArrayAttribFormat_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribFormat' not found!`);
  glVertexArrayAttribFormat_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexArrayAttribIFormat = glVertexArrayAttribIFormat_Z;
__gshared glbfn_glVertexArrayAttribIFormat glVertexArrayAttribIFormat_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04) {
  glbfn_glVertexArrayAttribIFormat_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayAttribIFormat_loader (uint a00,uint a01,int a02,uint a03,uint a04) {
  *cast(void**)&glVertexArrayAttribIFormat_Z = glbindGetProcAddress(`glVertexArrayAttribIFormat`);
  if (*cast(void**)&glVertexArrayAttribIFormat_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribIFormat' not found!`);
  glVertexArrayAttribIFormat_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayAttribLFormat = glVertexArrayAttribLFormat_Z;
__gshared glbfn_glVertexArrayAttribLFormat glVertexArrayAttribLFormat_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04) {
  glbfn_glVertexArrayAttribLFormat_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayAttribLFormat_loader (uint a00,uint a01,int a02,uint a03,uint a04) {
  *cast(void**)&glVertexArrayAttribLFormat_Z = glbindGetProcAddress(`glVertexArrayAttribLFormat`);
  if (*cast(void**)&glVertexArrayAttribLFormat_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribLFormat' not found!`);
  glVertexArrayAttribLFormat_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayBindingDivisor = glVertexArrayBindingDivisor_Z;
__gshared glbfn_glVertexArrayBindingDivisor glVertexArrayBindingDivisor_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glVertexArrayBindingDivisor_loader(a00,a01,a02,);
};
private void glbfn_glVertexArrayBindingDivisor_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glVertexArrayBindingDivisor_Z = glbindGetProcAddress(`glVertexArrayBindingDivisor`);
  if (*cast(void**)&glVertexArrayBindingDivisor_Z is null) assert(0, `OpenGL function 'glVertexArrayBindingDivisor' not found!`);
  glVertexArrayBindingDivisor_Z(a00,a01,a02,);
}
alias glGetVertexArrayiv = glGetVertexArrayiv_Z;
__gshared glbfn_glGetVertexArrayiv glGetVertexArrayiv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexArrayiv_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexArrayiv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexArrayiv_Z = glbindGetProcAddress(`glGetVertexArrayiv`);
  if (*cast(void**)&glGetVertexArrayiv_Z is null) assert(0, `OpenGL function 'glGetVertexArrayiv' not found!`);
  glGetVertexArrayiv_Z(a00,a01,a02,);
}
alias glGetVertexArrayIndexediv = glGetVertexArrayIndexediv_Z;
__gshared glbfn_glGetVertexArrayIndexediv glGetVertexArrayIndexediv_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetVertexArrayIndexediv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetVertexArrayIndexediv_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetVertexArrayIndexediv_Z = glbindGetProcAddress(`glGetVertexArrayIndexediv`);
  if (*cast(void**)&glGetVertexArrayIndexediv_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIndexediv' not found!`);
  glGetVertexArrayIndexediv_Z(a00,a01,a02,a03,);
}
alias glGetVertexArrayIndexed64iv = glGetVertexArrayIndexed64iv_Z;
__gshared glbfn_glGetVertexArrayIndexed64iv glGetVertexArrayIndexed64iv_Z = function void (uint a00,uint a01,uint a02,long* a03) {
  glbfn_glGetVertexArrayIndexed64iv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetVertexArrayIndexed64iv_loader (uint a00,uint a01,uint a02,long* a03) {
  *cast(void**)&glGetVertexArrayIndexed64iv_Z = glbindGetProcAddress(`glGetVertexArrayIndexed64iv`);
  if (*cast(void**)&glGetVertexArrayIndexed64iv_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIndexed64iv' not found!`);
  glGetVertexArrayIndexed64iv_Z(a00,a01,a02,a03,);
}
alias glCreateSamplers = glCreateSamplers_Z;
__gshared glbfn_glCreateSamplers glCreateSamplers_Z = function void (int a00,uint* a01) {
  glbfn_glCreateSamplers_loader(a00,a01,);
};
private void glbfn_glCreateSamplers_loader (int a00,uint* a01) {
  *cast(void**)&glCreateSamplers_Z = glbindGetProcAddress(`glCreateSamplers`);
  if (*cast(void**)&glCreateSamplers_Z is null) assert(0, `OpenGL function 'glCreateSamplers' not found!`);
  glCreateSamplers_Z(a00,a01,);
}
alias glCreateProgramPipelines = glCreateProgramPipelines_Z;
__gshared glbfn_glCreateProgramPipelines glCreateProgramPipelines_Z = function void (int a00,uint* a01) {
  glbfn_glCreateProgramPipelines_loader(a00,a01,);
};
private void glbfn_glCreateProgramPipelines_loader (int a00,uint* a01) {
  *cast(void**)&glCreateProgramPipelines_Z = glbindGetProcAddress(`glCreateProgramPipelines`);
  if (*cast(void**)&glCreateProgramPipelines_Z is null) assert(0, `OpenGL function 'glCreateProgramPipelines' not found!`);
  glCreateProgramPipelines_Z(a00,a01,);
}
alias glCreateQueries = glCreateQueries_Z;
__gshared glbfn_glCreateQueries glCreateQueries_Z = function void (uint a00,int a01,uint* a02) {
  glbfn_glCreateQueries_loader(a00,a01,a02,);
};
private void glbfn_glCreateQueries_loader (uint a00,int a01,uint* a02) {
  *cast(void**)&glCreateQueries_Z = glbindGetProcAddress(`glCreateQueries`);
  if (*cast(void**)&glCreateQueries_Z is null) assert(0, `OpenGL function 'glCreateQueries' not found!`);
  glCreateQueries_Z(a00,a01,a02,);
}
alias glGetQueryBufferObjecti64v = glGetQueryBufferObjecti64v_Z;
__gshared glbfn_glGetQueryBufferObjecti64v glGetQueryBufferObjecti64v_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glGetQueryBufferObjecti64v_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetQueryBufferObjecti64v_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glGetQueryBufferObjecti64v_Z = glbindGetProcAddress(`glGetQueryBufferObjecti64v`);
  if (*cast(void**)&glGetQueryBufferObjecti64v_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjecti64v' not found!`);
  glGetQueryBufferObjecti64v_Z(a00,a01,a02,a03,);
}
alias glGetQueryBufferObjectiv = glGetQueryBufferObjectiv_Z;
__gshared glbfn_glGetQueryBufferObjectiv glGetQueryBufferObjectiv_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glGetQueryBufferObjectiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetQueryBufferObjectiv_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glGetQueryBufferObjectiv_Z = glbindGetProcAddress(`glGetQueryBufferObjectiv`);
  if (*cast(void**)&glGetQueryBufferObjectiv_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjectiv' not found!`);
  glGetQueryBufferObjectiv_Z(a00,a01,a02,a03,);
}
alias glGetQueryBufferObjectui64v = glGetQueryBufferObjectui64v_Z;
__gshared glbfn_glGetQueryBufferObjectui64v glGetQueryBufferObjectui64v_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glGetQueryBufferObjectui64v_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetQueryBufferObjectui64v_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glGetQueryBufferObjectui64v_Z = glbindGetProcAddress(`glGetQueryBufferObjectui64v`);
  if (*cast(void**)&glGetQueryBufferObjectui64v_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjectui64v' not found!`);
  glGetQueryBufferObjectui64v_Z(a00,a01,a02,a03,);
}
alias glGetQueryBufferObjectuiv = glGetQueryBufferObjectuiv_Z;
__gshared glbfn_glGetQueryBufferObjectuiv glGetQueryBufferObjectuiv_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glGetQueryBufferObjectuiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetQueryBufferObjectuiv_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glGetQueryBufferObjectuiv_Z = glbindGetProcAddress(`glGetQueryBufferObjectuiv`);
  if (*cast(void**)&glGetQueryBufferObjectuiv_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjectuiv' not found!`);
  glGetQueryBufferObjectuiv_Z(a00,a01,a02,a03,);
}
alias glMemoryBarrierByRegion = glMemoryBarrierByRegion_Z;
__gshared glbfn_glMemoryBarrierByRegion glMemoryBarrierByRegion_Z = function void (uint a00) {
  glbfn_glMemoryBarrierByRegion_loader(a00,);
};
private void glbfn_glMemoryBarrierByRegion_loader (uint a00) {
  *cast(void**)&glMemoryBarrierByRegion_Z = glbindGetProcAddress(`glMemoryBarrierByRegion`);
  if (*cast(void**)&glMemoryBarrierByRegion_Z is null) assert(0, `OpenGL function 'glMemoryBarrierByRegion' not found!`);
  glMemoryBarrierByRegion_Z(a00,);
}
alias glGetTextureSubImage = glGetTextureSubImage_Z;
__gshared glbfn_glGetTextureSubImage glGetTextureSubImage_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,int a10,void* a11) {
  glbfn_glGetTextureSubImage_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glGetTextureSubImage_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,int a10,void* a11) {
  *cast(void**)&glGetTextureSubImage_Z = glbindGetProcAddress(`glGetTextureSubImage`);
  if (*cast(void**)&glGetTextureSubImage_Z is null) assert(0, `OpenGL function 'glGetTextureSubImage' not found!`);
  glGetTextureSubImage_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glGetCompressedTextureSubImage = glGetCompressedTextureSubImage_Z;
__gshared glbfn_glGetCompressedTextureSubImage glGetCompressedTextureSubImage_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,void* a09) {
  glbfn_glGetCompressedTextureSubImage_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glGetCompressedTextureSubImage_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,void* a09) {
  *cast(void**)&glGetCompressedTextureSubImage_Z = glbindGetProcAddress(`glGetCompressedTextureSubImage`);
  if (*cast(void**)&glGetCompressedTextureSubImage_Z is null) assert(0, `OpenGL function 'glGetCompressedTextureSubImage' not found!`);
  glGetCompressedTextureSubImage_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glGetGraphicsResetStatus = glGetGraphicsResetStatus_Z;
__gshared glbfn_glGetGraphicsResetStatus glGetGraphicsResetStatus_Z = function uint () {
  return glbfn_glGetGraphicsResetStatus_loader();
};
private uint glbfn_glGetGraphicsResetStatus_loader () {
  *cast(void**)&glGetGraphicsResetStatus_Z = glbindGetProcAddress(`glGetGraphicsResetStatus`);
  if (*cast(void**)&glGetGraphicsResetStatus_Z is null) assert(0, `OpenGL function 'glGetGraphicsResetStatus' not found!`);
  return glGetGraphicsResetStatus_Z();
}
alias glGetnCompressedTexImage = glGetnCompressedTexImage_Z;
__gshared glbfn_glGetnCompressedTexImage glGetnCompressedTexImage_Z = function void (uint a00,int a01,int a02,void* a03) {
  glbfn_glGetnCompressedTexImage_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnCompressedTexImage_loader (uint a00,int a01,int a02,void* a03) {
  *cast(void**)&glGetnCompressedTexImage_Z = glbindGetProcAddress(`glGetnCompressedTexImage`);
  if (*cast(void**)&glGetnCompressedTexImage_Z is null) assert(0, `OpenGL function 'glGetnCompressedTexImage' not found!`);
  glGetnCompressedTexImage_Z(a00,a01,a02,a03,);
}
alias glGetnTexImage = glGetnTexImage_Z;
__gshared glbfn_glGetnTexImage glGetnTexImage_Z = function void (uint a00,int a01,uint a02,uint a03,int a04,void* a05) {
  glbfn_glGetnTexImage_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetnTexImage_loader (uint a00,int a01,uint a02,uint a03,int a04,void* a05) {
  *cast(void**)&glGetnTexImage_Z = glbindGetProcAddress(`glGetnTexImage`);
  if (*cast(void**)&glGetnTexImage_Z is null) assert(0, `OpenGL function 'glGetnTexImage' not found!`);
  glGetnTexImage_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetnUniformdv = glGetnUniformdv_Z;
__gshared glbfn_glGetnUniformdv glGetnUniformdv_Z = function void (uint a00,int a01,int a02,double* a03) {
  glbfn_glGetnUniformdv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformdv_loader (uint a00,int a01,int a02,double* a03) {
  *cast(void**)&glGetnUniformdv_Z = glbindGetProcAddress(`glGetnUniformdv`);
  if (*cast(void**)&glGetnUniformdv_Z is null) assert(0, `OpenGL function 'glGetnUniformdv' not found!`);
  glGetnUniformdv_Z(a00,a01,a02,a03,);
}
alias glGetnUniformfv = glGetnUniformfv_Z;
__gshared glbfn_glGetnUniformfv glGetnUniformfv_Z = function void (uint a00,int a01,int a02,float* a03) {
  glbfn_glGetnUniformfv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformfv_loader (uint a00,int a01,int a02,float* a03) {
  *cast(void**)&glGetnUniformfv_Z = glbindGetProcAddress(`glGetnUniformfv`);
  if (*cast(void**)&glGetnUniformfv_Z is null) assert(0, `OpenGL function 'glGetnUniformfv' not found!`);
  glGetnUniformfv_Z(a00,a01,a02,a03,);
}
alias glGetnUniformiv = glGetnUniformiv_Z;
__gshared glbfn_glGetnUniformiv glGetnUniformiv_Z = function void (uint a00,int a01,int a02,int* a03) {
  glbfn_glGetnUniformiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformiv_loader (uint a00,int a01,int a02,int* a03) {
  *cast(void**)&glGetnUniformiv_Z = glbindGetProcAddress(`glGetnUniformiv`);
  if (*cast(void**)&glGetnUniformiv_Z is null) assert(0, `OpenGL function 'glGetnUniformiv' not found!`);
  glGetnUniformiv_Z(a00,a01,a02,a03,);
}
alias glGetnUniformuiv = glGetnUniformuiv_Z;
__gshared glbfn_glGetnUniformuiv glGetnUniformuiv_Z = function void (uint a00,int a01,int a02,uint* a03) {
  glbfn_glGetnUniformuiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformuiv_loader (uint a00,int a01,int a02,uint* a03) {
  *cast(void**)&glGetnUniformuiv_Z = glbindGetProcAddress(`glGetnUniformuiv`);
  if (*cast(void**)&glGetnUniformuiv_Z is null) assert(0, `OpenGL function 'glGetnUniformuiv' not found!`);
  glGetnUniformuiv_Z(a00,a01,a02,a03,);
}
alias glReadnPixels = glReadnPixels_Z;
__gshared glbfn_glReadnPixels glReadnPixels_Z = function void (int a00,int a01,int a02,int a03,uint a04,uint a05,int a06,void* a07) {
  glbfn_glReadnPixels_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glReadnPixels_loader (int a00,int a01,int a02,int a03,uint a04,uint a05,int a06,void* a07) {
  *cast(void**)&glReadnPixels_Z = glbindGetProcAddress(`glReadnPixels`);
  if (*cast(void**)&glReadnPixels_Z is null) assert(0, `OpenGL function 'glReadnPixels' not found!`);
  glReadnPixels_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetnMapdv = glGetnMapdv_Z;
__gshared glbfn_glGetnMapdv glGetnMapdv_Z = function void (uint a00,uint a01,int a02,double* a03) {
  glbfn_glGetnMapdv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnMapdv_loader (uint a00,uint a01,int a02,double* a03) {
  *cast(void**)&glGetnMapdv_Z = glbindGetProcAddress(`glGetnMapdv`);
  if (*cast(void**)&glGetnMapdv_Z is null) assert(0, `OpenGL function 'glGetnMapdv' not found!`);
  glGetnMapdv_Z(a00,a01,a02,a03,);
}
alias glGetnMapfv = glGetnMapfv_Z;
__gshared glbfn_glGetnMapfv glGetnMapfv_Z = function void (uint a00,uint a01,int a02,float* a03) {
  glbfn_glGetnMapfv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnMapfv_loader (uint a00,uint a01,int a02,float* a03) {
  *cast(void**)&glGetnMapfv_Z = glbindGetProcAddress(`glGetnMapfv`);
  if (*cast(void**)&glGetnMapfv_Z is null) assert(0, `OpenGL function 'glGetnMapfv' not found!`);
  glGetnMapfv_Z(a00,a01,a02,a03,);
}
alias glGetnMapiv = glGetnMapiv_Z;
__gshared glbfn_glGetnMapiv glGetnMapiv_Z = function void (uint a00,uint a01,int a02,int* a03) {
  glbfn_glGetnMapiv_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnMapiv_loader (uint a00,uint a01,int a02,int* a03) {
  *cast(void**)&glGetnMapiv_Z = glbindGetProcAddress(`glGetnMapiv`);
  if (*cast(void**)&glGetnMapiv_Z is null) assert(0, `OpenGL function 'glGetnMapiv' not found!`);
  glGetnMapiv_Z(a00,a01,a02,a03,);
}
alias glGetnPixelMapfv = glGetnPixelMapfv_Z;
__gshared glbfn_glGetnPixelMapfv glGetnPixelMapfv_Z = function void (uint a00,int a01,float* a02) {
  glbfn_glGetnPixelMapfv_loader(a00,a01,a02,);
};
private void glbfn_glGetnPixelMapfv_loader (uint a00,int a01,float* a02) {
  *cast(void**)&glGetnPixelMapfv_Z = glbindGetProcAddress(`glGetnPixelMapfv`);
  if (*cast(void**)&glGetnPixelMapfv_Z is null) assert(0, `OpenGL function 'glGetnPixelMapfv' not found!`);
  glGetnPixelMapfv_Z(a00,a01,a02,);
}
alias glGetnPixelMapuiv = glGetnPixelMapuiv_Z;
__gshared glbfn_glGetnPixelMapuiv glGetnPixelMapuiv_Z = function void (uint a00,int a01,uint* a02) {
  glbfn_glGetnPixelMapuiv_loader(a00,a01,a02,);
};
private void glbfn_glGetnPixelMapuiv_loader (uint a00,int a01,uint* a02) {
  *cast(void**)&glGetnPixelMapuiv_Z = glbindGetProcAddress(`glGetnPixelMapuiv`);
  if (*cast(void**)&glGetnPixelMapuiv_Z is null) assert(0, `OpenGL function 'glGetnPixelMapuiv' not found!`);
  glGetnPixelMapuiv_Z(a00,a01,a02,);
}
alias glGetnPixelMapusv = glGetnPixelMapusv_Z;
__gshared glbfn_glGetnPixelMapusv glGetnPixelMapusv_Z = function void (uint a00,int a01,ushort* a02) {
  glbfn_glGetnPixelMapusv_loader(a00,a01,a02,);
};
private void glbfn_glGetnPixelMapusv_loader (uint a00,int a01,ushort* a02) {
  *cast(void**)&glGetnPixelMapusv_Z = glbindGetProcAddress(`glGetnPixelMapusv`);
  if (*cast(void**)&glGetnPixelMapusv_Z is null) assert(0, `OpenGL function 'glGetnPixelMapusv' not found!`);
  glGetnPixelMapusv_Z(a00,a01,a02,);
}
alias glGetnPolygonStipple = glGetnPolygonStipple_Z;
__gshared glbfn_glGetnPolygonStipple glGetnPolygonStipple_Z = function void (int a00,ubyte* a01) {
  glbfn_glGetnPolygonStipple_loader(a00,a01,);
};
private void glbfn_glGetnPolygonStipple_loader (int a00,ubyte* a01) {
  *cast(void**)&glGetnPolygonStipple_Z = glbindGetProcAddress(`glGetnPolygonStipple`);
  if (*cast(void**)&glGetnPolygonStipple_Z is null) assert(0, `OpenGL function 'glGetnPolygonStipple' not found!`);
  glGetnPolygonStipple_Z(a00,a01,);
}
alias glGetnColorTable = glGetnColorTable_Z;
__gshared glbfn_glGetnColorTable glGetnColorTable_Z = function void (uint a00,uint a01,uint a02,int a03,void* a04) {
  glbfn_glGetnColorTable_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetnColorTable_loader (uint a00,uint a01,uint a02,int a03,void* a04) {
  *cast(void**)&glGetnColorTable_Z = glbindGetProcAddress(`glGetnColorTable`);
  if (*cast(void**)&glGetnColorTable_Z is null) assert(0, `OpenGL function 'glGetnColorTable' not found!`);
  glGetnColorTable_Z(a00,a01,a02,a03,a04,);
}
alias glGetnConvolutionFilter = glGetnConvolutionFilter_Z;
__gshared glbfn_glGetnConvolutionFilter glGetnConvolutionFilter_Z = function void (uint a00,uint a01,uint a02,int a03,void* a04) {
  glbfn_glGetnConvolutionFilter_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetnConvolutionFilter_loader (uint a00,uint a01,uint a02,int a03,void* a04) {
  *cast(void**)&glGetnConvolutionFilter_Z = glbindGetProcAddress(`glGetnConvolutionFilter`);
  if (*cast(void**)&glGetnConvolutionFilter_Z is null) assert(0, `OpenGL function 'glGetnConvolutionFilter' not found!`);
  glGetnConvolutionFilter_Z(a00,a01,a02,a03,a04,);
}
alias glGetnSeparableFilter = glGetnSeparableFilter_Z;
__gshared glbfn_glGetnSeparableFilter glGetnSeparableFilter_Z = function void (uint a00,uint a01,uint a02,int a03,void* a04,int a05,void* a06,void* a07) {
  glbfn_glGetnSeparableFilter_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glGetnSeparableFilter_loader (uint a00,uint a01,uint a02,int a03,void* a04,int a05,void* a06,void* a07) {
  *cast(void**)&glGetnSeparableFilter_Z = glbindGetProcAddress(`glGetnSeparableFilter`);
  if (*cast(void**)&glGetnSeparableFilter_Z is null) assert(0, `OpenGL function 'glGetnSeparableFilter' not found!`);
  glGetnSeparableFilter_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetnHistogram = glGetnHistogram_Z;
__gshared glbfn_glGetnHistogram glGetnHistogram_Z = function void (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  glbfn_glGetnHistogram_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetnHistogram_loader (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  *cast(void**)&glGetnHistogram_Z = glbindGetProcAddress(`glGetnHistogram`);
  if (*cast(void**)&glGetnHistogram_Z is null) assert(0, `OpenGL function 'glGetnHistogram' not found!`);
  glGetnHistogram_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetnMinmax = glGetnMinmax_Z;
__gshared glbfn_glGetnMinmax glGetnMinmax_Z = function void (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  glbfn_glGetnMinmax_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetnMinmax_loader (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  *cast(void**)&glGetnMinmax_Z = glbindGetProcAddress(`glGetnMinmax`);
  if (*cast(void**)&glGetnMinmax_Z is null) assert(0, `OpenGL function 'glGetnMinmax' not found!`);
  glGetnMinmax_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTextureBarrier = glTextureBarrier_Z;
__gshared glbfn_glTextureBarrier glTextureBarrier_Z = function void () {
  glbfn_glTextureBarrier_loader();
};
private void glbfn_glTextureBarrier_loader () {
  *cast(void**)&glTextureBarrier_Z = glbindGetProcAddress(`glTextureBarrier`);
  if (*cast(void**)&glTextureBarrier_Z is null) assert(0, `OpenGL function 'glTextureBarrier' not found!`);
  glTextureBarrier_Z();
}
alias glTbufferMask3DFX = glTbufferMask3DFX_Z;
__gshared glbfn_glTbufferMask3DFX glTbufferMask3DFX_Z = function void (uint a00) {
  glbfn_glTbufferMask3DFX_loader(a00,);
};
private void glbfn_glTbufferMask3DFX_loader (uint a00) {
  *cast(void**)&glTbufferMask3DFX_Z = glbindGetProcAddress(`glTbufferMask3DFX`);
  if (*cast(void**)&glTbufferMask3DFX_Z is null) assert(0, `OpenGL function 'glTbufferMask3DFX' not found!`);
  glTbufferMask3DFX_Z(a00,);
}
alias glDebugMessageEnableAMD = glDebugMessageEnableAMD_Z;
__gshared glbfn_glDebugMessageEnableAMD glDebugMessageEnableAMD_Z = function void (uint a00,uint a01,int a02,const(uint)* a03,ubyte a04) {
  glbfn_glDebugMessageEnableAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDebugMessageEnableAMD_loader (uint a00,uint a01,int a02,const(uint)* a03,ubyte a04) {
  *cast(void**)&glDebugMessageEnableAMD_Z = glbindGetProcAddress(`glDebugMessageEnableAMD`);
  if (*cast(void**)&glDebugMessageEnableAMD_Z is null) assert(0, `OpenGL function 'glDebugMessageEnableAMD' not found!`);
  glDebugMessageEnableAMD_Z(a00,a01,a02,a03,a04,);
}
alias glDebugMessageInsertAMD = glDebugMessageInsertAMD_Z;
__gshared glbfn_glDebugMessageInsertAMD glDebugMessageInsertAMD_Z = function void (uint a00,uint a01,uint a02,int a03,const(char)* a04) {
  glbfn_glDebugMessageInsertAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDebugMessageInsertAMD_loader (uint a00,uint a01,uint a02,int a03,const(char)* a04) {
  *cast(void**)&glDebugMessageInsertAMD_Z = glbindGetProcAddress(`glDebugMessageInsertAMD`);
  if (*cast(void**)&glDebugMessageInsertAMD_Z is null) assert(0, `OpenGL function 'glDebugMessageInsertAMD' not found!`);
  glDebugMessageInsertAMD_Z(a00,a01,a02,a03,a04,);
}
alias glGetDebugMessageLogAMD = glGetDebugMessageLogAMD_Z;
__gshared glbfn_glGetDebugMessageLogAMD glGetDebugMessageLogAMD_Z = function uint (uint a00,int a01,uint* a02,uint* a03,uint* a04,int* a05,char* a06) {
  return glbfn_glGetDebugMessageLogAMD_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private uint glbfn_glGetDebugMessageLogAMD_loader (uint a00,int a01,uint* a02,uint* a03,uint* a04,int* a05,char* a06) {
  *cast(void**)&glGetDebugMessageLogAMD_Z = glbindGetProcAddress(`glGetDebugMessageLogAMD`);
  if (*cast(void**)&glGetDebugMessageLogAMD_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLogAMD' not found!`);
  return glGetDebugMessageLogAMD_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glBlendFuncIndexedAMD = glBlendFuncIndexedAMD_Z;
__gshared glbfn_glBlendFuncIndexedAMD glBlendFuncIndexedAMD_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBlendFuncIndexedAMD_loader(a00,a01,a02,);
};
private void glbfn_glBlendFuncIndexedAMD_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBlendFuncIndexedAMD_Z = glbindGetProcAddress(`glBlendFuncIndexedAMD`);
  if (*cast(void**)&glBlendFuncIndexedAMD_Z is null) assert(0, `OpenGL function 'glBlendFuncIndexedAMD' not found!`);
  glBlendFuncIndexedAMD_Z(a00,a01,a02,);
}
alias glBlendFuncSeparateIndexedAMD = glBlendFuncSeparateIndexedAMD_Z;
__gshared glbfn_glBlendFuncSeparateIndexedAMD glBlendFuncSeparateIndexedAMD_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glBlendFuncSeparateIndexedAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBlendFuncSeparateIndexedAMD_loader (uint a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glBlendFuncSeparateIndexedAMD_Z = glbindGetProcAddress(`glBlendFuncSeparateIndexedAMD`);
  if (*cast(void**)&glBlendFuncSeparateIndexedAMD_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateIndexedAMD' not found!`);
  glBlendFuncSeparateIndexedAMD_Z(a00,a01,a02,a03,a04,);
}
alias glBlendEquationIndexedAMD = glBlendEquationIndexedAMD_Z;
__gshared glbfn_glBlendEquationIndexedAMD glBlendEquationIndexedAMD_Z = function void (uint a00,uint a01) {
  glbfn_glBlendEquationIndexedAMD_loader(a00,a01,);
};
private void glbfn_glBlendEquationIndexedAMD_loader (uint a00,uint a01) {
  *cast(void**)&glBlendEquationIndexedAMD_Z = glbindGetProcAddress(`glBlendEquationIndexedAMD`);
  if (*cast(void**)&glBlendEquationIndexedAMD_Z is null) assert(0, `OpenGL function 'glBlendEquationIndexedAMD' not found!`);
  glBlendEquationIndexedAMD_Z(a00,a01,);
}
alias glBlendEquationSeparateIndexedAMD = glBlendEquationSeparateIndexedAMD_Z;
__gshared glbfn_glBlendEquationSeparateIndexedAMD glBlendEquationSeparateIndexedAMD_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBlendEquationSeparateIndexedAMD_loader(a00,a01,a02,);
};
private void glbfn_glBlendEquationSeparateIndexedAMD_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBlendEquationSeparateIndexedAMD_Z = glbindGetProcAddress(`glBlendEquationSeparateIndexedAMD`);
  if (*cast(void**)&glBlendEquationSeparateIndexedAMD_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateIndexedAMD' not found!`);
  glBlendEquationSeparateIndexedAMD_Z(a00,a01,a02,);
}
alias glUniform1i64NV = glUniform1i64NV_Z;
__gshared glbfn_glUniform1i64NV glUniform1i64NV_Z = function void (int a00,long a01) {
  glbfn_glUniform1i64NV_loader(a00,a01,);
};
private void glbfn_glUniform1i64NV_loader (int a00,long a01) {
  *cast(void**)&glUniform1i64NV_Z = glbindGetProcAddress(`glUniform1i64NV`);
  if (*cast(void**)&glUniform1i64NV_Z is null) assert(0, `OpenGL function 'glUniform1i64NV' not found!`);
  glUniform1i64NV_Z(a00,a01,);
}
alias glUniform2i64NV = glUniform2i64NV_Z;
__gshared glbfn_glUniform2i64NV glUniform2i64NV_Z = function void (int a00,long a01,long a02) {
  glbfn_glUniform2i64NV_loader(a00,a01,a02,);
};
private void glbfn_glUniform2i64NV_loader (int a00,long a01,long a02) {
  *cast(void**)&glUniform2i64NV_Z = glbindGetProcAddress(`glUniform2i64NV`);
  if (*cast(void**)&glUniform2i64NV_Z is null) assert(0, `OpenGL function 'glUniform2i64NV' not found!`);
  glUniform2i64NV_Z(a00,a01,a02,);
}
alias glUniform3i64NV = glUniform3i64NV_Z;
__gshared glbfn_glUniform3i64NV glUniform3i64NV_Z = function void (int a00,long a01,long a02,long a03) {
  glbfn_glUniform3i64NV_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3i64NV_loader (int a00,long a01,long a02,long a03) {
  *cast(void**)&glUniform3i64NV_Z = glbindGetProcAddress(`glUniform3i64NV`);
  if (*cast(void**)&glUniform3i64NV_Z is null) assert(0, `OpenGL function 'glUniform3i64NV' not found!`);
  glUniform3i64NV_Z(a00,a01,a02,a03,);
}
alias glUniform4i64NV = glUniform4i64NV_Z;
__gshared glbfn_glUniform4i64NV glUniform4i64NV_Z = function void (int a00,long a01,long a02,long a03,long a04) {
  glbfn_glUniform4i64NV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4i64NV_loader (int a00,long a01,long a02,long a03,long a04) {
  *cast(void**)&glUniform4i64NV_Z = glbindGetProcAddress(`glUniform4i64NV`);
  if (*cast(void**)&glUniform4i64NV_Z is null) assert(0, `OpenGL function 'glUniform4i64NV' not found!`);
  glUniform4i64NV_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1i64vNV = glUniform1i64vNV_Z;
__gshared glbfn_glUniform1i64vNV glUniform1i64vNV_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform1i64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform1i64vNV_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform1i64vNV_Z = glbindGetProcAddress(`glUniform1i64vNV`);
  if (*cast(void**)&glUniform1i64vNV_Z is null) assert(0, `OpenGL function 'glUniform1i64vNV' not found!`);
  glUniform1i64vNV_Z(a00,a01,a02,);
}
alias glUniform2i64vNV = glUniform2i64vNV_Z;
__gshared glbfn_glUniform2i64vNV glUniform2i64vNV_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform2i64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform2i64vNV_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform2i64vNV_Z = glbindGetProcAddress(`glUniform2i64vNV`);
  if (*cast(void**)&glUniform2i64vNV_Z is null) assert(0, `OpenGL function 'glUniform2i64vNV' not found!`);
  glUniform2i64vNV_Z(a00,a01,a02,);
}
alias glUniform3i64vNV = glUniform3i64vNV_Z;
__gshared glbfn_glUniform3i64vNV glUniform3i64vNV_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform3i64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform3i64vNV_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform3i64vNV_Z = glbindGetProcAddress(`glUniform3i64vNV`);
  if (*cast(void**)&glUniform3i64vNV_Z is null) assert(0, `OpenGL function 'glUniform3i64vNV' not found!`);
  glUniform3i64vNV_Z(a00,a01,a02,);
}
alias glUniform4i64vNV = glUniform4i64vNV_Z;
__gshared glbfn_glUniform4i64vNV glUniform4i64vNV_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform4i64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform4i64vNV_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform4i64vNV_Z = glbindGetProcAddress(`glUniform4i64vNV`);
  if (*cast(void**)&glUniform4i64vNV_Z is null) assert(0, `OpenGL function 'glUniform4i64vNV' not found!`);
  glUniform4i64vNV_Z(a00,a01,a02,);
}
alias glUniform1ui64NV = glUniform1ui64NV_Z;
__gshared glbfn_glUniform1ui64NV glUniform1ui64NV_Z = function void (int a00,ulong a01) {
  glbfn_glUniform1ui64NV_loader(a00,a01,);
};
private void glbfn_glUniform1ui64NV_loader (int a00,ulong a01) {
  *cast(void**)&glUniform1ui64NV_Z = glbindGetProcAddress(`glUniform1ui64NV`);
  if (*cast(void**)&glUniform1ui64NV_Z is null) assert(0, `OpenGL function 'glUniform1ui64NV' not found!`);
  glUniform1ui64NV_Z(a00,a01,);
}
alias glUniform2ui64NV = glUniform2ui64NV_Z;
__gshared glbfn_glUniform2ui64NV glUniform2ui64NV_Z = function void (int a00,ulong a01,ulong a02) {
  glbfn_glUniform2ui64NV_loader(a00,a01,a02,);
};
private void glbfn_glUniform2ui64NV_loader (int a00,ulong a01,ulong a02) {
  *cast(void**)&glUniform2ui64NV_Z = glbindGetProcAddress(`glUniform2ui64NV`);
  if (*cast(void**)&glUniform2ui64NV_Z is null) assert(0, `OpenGL function 'glUniform2ui64NV' not found!`);
  glUniform2ui64NV_Z(a00,a01,a02,);
}
alias glUniform3ui64NV = glUniform3ui64NV_Z;
__gshared glbfn_glUniform3ui64NV glUniform3ui64NV_Z = function void (int a00,ulong a01,ulong a02,ulong a03) {
  glbfn_glUniform3ui64NV_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3ui64NV_loader (int a00,ulong a01,ulong a02,ulong a03) {
  *cast(void**)&glUniform3ui64NV_Z = glbindGetProcAddress(`glUniform3ui64NV`);
  if (*cast(void**)&glUniform3ui64NV_Z is null) assert(0, `OpenGL function 'glUniform3ui64NV' not found!`);
  glUniform3ui64NV_Z(a00,a01,a02,a03,);
}
alias glUniform4ui64NV = glUniform4ui64NV_Z;
__gshared glbfn_glUniform4ui64NV glUniform4ui64NV_Z = function void (int a00,ulong a01,ulong a02,ulong a03,ulong a04) {
  glbfn_glUniform4ui64NV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4ui64NV_loader (int a00,ulong a01,ulong a02,ulong a03,ulong a04) {
  *cast(void**)&glUniform4ui64NV_Z = glbindGetProcAddress(`glUniform4ui64NV`);
  if (*cast(void**)&glUniform4ui64NV_Z is null) assert(0, `OpenGL function 'glUniform4ui64NV' not found!`);
  glUniform4ui64NV_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1ui64vNV = glUniform1ui64vNV_Z;
__gshared glbfn_glUniform1ui64vNV glUniform1ui64vNV_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform1ui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform1ui64vNV_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform1ui64vNV_Z = glbindGetProcAddress(`glUniform1ui64vNV`);
  if (*cast(void**)&glUniform1ui64vNV_Z is null) assert(0, `OpenGL function 'glUniform1ui64vNV' not found!`);
  glUniform1ui64vNV_Z(a00,a01,a02,);
}
alias glUniform2ui64vNV = glUniform2ui64vNV_Z;
__gshared glbfn_glUniform2ui64vNV glUniform2ui64vNV_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform2ui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform2ui64vNV_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform2ui64vNV_Z = glbindGetProcAddress(`glUniform2ui64vNV`);
  if (*cast(void**)&glUniform2ui64vNV_Z is null) assert(0, `OpenGL function 'glUniform2ui64vNV' not found!`);
  glUniform2ui64vNV_Z(a00,a01,a02,);
}
alias glUniform3ui64vNV = glUniform3ui64vNV_Z;
__gshared glbfn_glUniform3ui64vNV glUniform3ui64vNV_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform3ui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform3ui64vNV_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform3ui64vNV_Z = glbindGetProcAddress(`glUniform3ui64vNV`);
  if (*cast(void**)&glUniform3ui64vNV_Z is null) assert(0, `OpenGL function 'glUniform3ui64vNV' not found!`);
  glUniform3ui64vNV_Z(a00,a01,a02,);
}
alias glUniform4ui64vNV = glUniform4ui64vNV_Z;
__gshared glbfn_glUniform4ui64vNV glUniform4ui64vNV_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform4ui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniform4ui64vNV_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform4ui64vNV_Z = glbindGetProcAddress(`glUniform4ui64vNV`);
  if (*cast(void**)&glUniform4ui64vNV_Z is null) assert(0, `OpenGL function 'glUniform4ui64vNV' not found!`);
  glUniform4ui64vNV_Z(a00,a01,a02,);
}
alias glGetUniformi64vNV = glGetUniformi64vNV_Z;
__gshared glbfn_glGetUniformi64vNV glGetUniformi64vNV_Z = function void (uint a00,int a01,long* a02) {
  glbfn_glGetUniformi64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformi64vNV_loader (uint a00,int a01,long* a02) {
  *cast(void**)&glGetUniformi64vNV_Z = glbindGetProcAddress(`glGetUniformi64vNV`);
  if (*cast(void**)&glGetUniformi64vNV_Z is null) assert(0, `OpenGL function 'glGetUniformi64vNV' not found!`);
  glGetUniformi64vNV_Z(a00,a01,a02,);
}
alias glGetUniformui64vNV = glGetUniformui64vNV_Z;
__gshared glbfn_glGetUniformui64vNV glGetUniformui64vNV_Z = function void (uint a00,int a01,ulong* a02) {
  glbfn_glGetUniformui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformui64vNV_loader (uint a00,int a01,ulong* a02) {
  *cast(void**)&glGetUniformui64vNV_Z = glbindGetProcAddress(`glGetUniformui64vNV`);
  if (*cast(void**)&glGetUniformui64vNV_Z is null) assert(0, `OpenGL function 'glGetUniformui64vNV' not found!`);
  glGetUniformui64vNV_Z(a00,a01,a02,);
}
alias glProgramUniform1i64NV = glProgramUniform1i64NV_Z;
__gshared glbfn_glProgramUniform1i64NV glProgramUniform1i64NV_Z = function void (uint a00,int a01,long a02) {
  glbfn_glProgramUniform1i64NV_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1i64NV_loader (uint a00,int a01,long a02) {
  *cast(void**)&glProgramUniform1i64NV_Z = glbindGetProcAddress(`glProgramUniform1i64NV`);
  if (*cast(void**)&glProgramUniform1i64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64NV' not found!`);
  glProgramUniform1i64NV_Z(a00,a01,a02,);
}
alias glProgramUniform2i64NV = glProgramUniform2i64NV_Z;
__gshared glbfn_glProgramUniform2i64NV glProgramUniform2i64NV_Z = function void (uint a00,int a01,long a02,long a03) {
  glbfn_glProgramUniform2i64NV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2i64NV_loader (uint a00,int a01,long a02,long a03) {
  *cast(void**)&glProgramUniform2i64NV_Z = glbindGetProcAddress(`glProgramUniform2i64NV`);
  if (*cast(void**)&glProgramUniform2i64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64NV' not found!`);
  glProgramUniform2i64NV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3i64NV = glProgramUniform3i64NV_Z;
__gshared glbfn_glProgramUniform3i64NV glProgramUniform3i64NV_Z = function void (uint a00,int a01,long a02,long a03,long a04) {
  glbfn_glProgramUniform3i64NV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3i64NV_loader (uint a00,int a01,long a02,long a03,long a04) {
  *cast(void**)&glProgramUniform3i64NV_Z = glbindGetProcAddress(`glProgramUniform3i64NV`);
  if (*cast(void**)&glProgramUniform3i64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64NV' not found!`);
  glProgramUniform3i64NV_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4i64NV = glProgramUniform4i64NV_Z;
__gshared glbfn_glProgramUniform4i64NV glProgramUniform4i64NV_Z = function void (uint a00,int a01,long a02,long a03,long a04,long a05) {
  glbfn_glProgramUniform4i64NV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4i64NV_loader (uint a00,int a01,long a02,long a03,long a04,long a05) {
  *cast(void**)&glProgramUniform4i64NV_Z = glbindGetProcAddress(`glProgramUniform4i64NV`);
  if (*cast(void**)&glProgramUniform4i64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64NV' not found!`);
  glProgramUniform4i64NV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1i64vNV = glProgramUniform1i64vNV_Z;
__gshared glbfn_glProgramUniform1i64vNV glProgramUniform1i64vNV_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform1i64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1i64vNV_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform1i64vNV_Z = glbindGetProcAddress(`glProgramUniform1i64vNV`);
  if (*cast(void**)&glProgramUniform1i64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64vNV' not found!`);
  glProgramUniform1i64vNV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2i64vNV = glProgramUniform2i64vNV_Z;
__gshared glbfn_glProgramUniform2i64vNV glProgramUniform2i64vNV_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform2i64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2i64vNV_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform2i64vNV_Z = glbindGetProcAddress(`glProgramUniform2i64vNV`);
  if (*cast(void**)&glProgramUniform2i64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64vNV' not found!`);
  glProgramUniform2i64vNV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3i64vNV = glProgramUniform3i64vNV_Z;
__gshared glbfn_glProgramUniform3i64vNV glProgramUniform3i64vNV_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform3i64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3i64vNV_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform3i64vNV_Z = glbindGetProcAddress(`glProgramUniform3i64vNV`);
  if (*cast(void**)&glProgramUniform3i64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64vNV' not found!`);
  glProgramUniform3i64vNV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4i64vNV = glProgramUniform4i64vNV_Z;
__gshared glbfn_glProgramUniform4i64vNV glProgramUniform4i64vNV_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform4i64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4i64vNV_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform4i64vNV_Z = glbindGetProcAddress(`glProgramUniform4i64vNV`);
  if (*cast(void**)&glProgramUniform4i64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64vNV' not found!`);
  glProgramUniform4i64vNV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1ui64NV = glProgramUniform1ui64NV_Z;
__gshared glbfn_glProgramUniform1ui64NV glProgramUniform1ui64NV_Z = function void (uint a00,int a01,ulong a02) {
  glbfn_glProgramUniform1ui64NV_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1ui64NV_loader (uint a00,int a01,ulong a02) {
  *cast(void**)&glProgramUniform1ui64NV_Z = glbindGetProcAddress(`glProgramUniform1ui64NV`);
  if (*cast(void**)&glProgramUniform1ui64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64NV' not found!`);
  glProgramUniform1ui64NV_Z(a00,a01,a02,);
}
alias glProgramUniform2ui64NV = glProgramUniform2ui64NV_Z;
__gshared glbfn_glProgramUniform2ui64NV glProgramUniform2ui64NV_Z = function void (uint a00,int a01,ulong a02,ulong a03) {
  glbfn_glProgramUniform2ui64NV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2ui64NV_loader (uint a00,int a01,ulong a02,ulong a03) {
  *cast(void**)&glProgramUniform2ui64NV_Z = glbindGetProcAddress(`glProgramUniform2ui64NV`);
  if (*cast(void**)&glProgramUniform2ui64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64NV' not found!`);
  glProgramUniform2ui64NV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3ui64NV = glProgramUniform3ui64NV_Z;
__gshared glbfn_glProgramUniform3ui64NV glProgramUniform3ui64NV_Z = function void (uint a00,int a01,ulong a02,ulong a03,ulong a04) {
  glbfn_glProgramUniform3ui64NV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3ui64NV_loader (uint a00,int a01,ulong a02,ulong a03,ulong a04) {
  *cast(void**)&glProgramUniform3ui64NV_Z = glbindGetProcAddress(`glProgramUniform3ui64NV`);
  if (*cast(void**)&glProgramUniform3ui64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64NV' not found!`);
  glProgramUniform3ui64NV_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4ui64NV = glProgramUniform4ui64NV_Z;
__gshared glbfn_glProgramUniform4ui64NV glProgramUniform4ui64NV_Z = function void (uint a00,int a01,ulong a02,ulong a03,ulong a04,ulong a05) {
  glbfn_glProgramUniform4ui64NV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4ui64NV_loader (uint a00,int a01,ulong a02,ulong a03,ulong a04,ulong a05) {
  *cast(void**)&glProgramUniform4ui64NV_Z = glbindGetProcAddress(`glProgramUniform4ui64NV`);
  if (*cast(void**)&glProgramUniform4ui64NV_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64NV' not found!`);
  glProgramUniform4ui64NV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1ui64vNV = glProgramUniform1ui64vNV_Z;
__gshared glbfn_glProgramUniform1ui64vNV glProgramUniform1ui64vNV_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform1ui64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1ui64vNV_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform1ui64vNV_Z = glbindGetProcAddress(`glProgramUniform1ui64vNV`);
  if (*cast(void**)&glProgramUniform1ui64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64vNV' not found!`);
  glProgramUniform1ui64vNV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2ui64vNV = glProgramUniform2ui64vNV_Z;
__gshared glbfn_glProgramUniform2ui64vNV glProgramUniform2ui64vNV_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform2ui64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2ui64vNV_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform2ui64vNV_Z = glbindGetProcAddress(`glProgramUniform2ui64vNV`);
  if (*cast(void**)&glProgramUniform2ui64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64vNV' not found!`);
  glProgramUniform2ui64vNV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3ui64vNV = glProgramUniform3ui64vNV_Z;
__gshared glbfn_glProgramUniform3ui64vNV glProgramUniform3ui64vNV_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform3ui64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3ui64vNV_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform3ui64vNV_Z = glbindGetProcAddress(`glProgramUniform3ui64vNV`);
  if (*cast(void**)&glProgramUniform3ui64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64vNV' not found!`);
  glProgramUniform3ui64vNV_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4ui64vNV = glProgramUniform4ui64vNV_Z;
__gshared glbfn_glProgramUniform4ui64vNV glProgramUniform4ui64vNV_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform4ui64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4ui64vNV_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform4ui64vNV_Z = glbindGetProcAddress(`glProgramUniform4ui64vNV`);
  if (*cast(void**)&glProgramUniform4ui64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64vNV' not found!`);
  glProgramUniform4ui64vNV_Z(a00,a01,a02,a03,);
}
alias glVertexAttribParameteriAMD = glVertexAttribParameteriAMD_Z;
__gshared glbfn_glVertexAttribParameteriAMD glVertexAttribParameteriAMD_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glVertexAttribParameteriAMD_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribParameteriAMD_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glVertexAttribParameteriAMD_Z = glbindGetProcAddress(`glVertexAttribParameteriAMD`);
  if (*cast(void**)&glVertexAttribParameteriAMD_Z is null) assert(0, `OpenGL function 'glVertexAttribParameteriAMD' not found!`);
  glVertexAttribParameteriAMD_Z(a00,a01,a02,);
}
alias glMultiDrawArraysIndirectAMD = glMultiDrawArraysIndirectAMD_Z;
__gshared glbfn_glMultiDrawArraysIndirectAMD glMultiDrawArraysIndirectAMD_Z = function void (uint a00,const(void)* a01,int a02,int a03) {
  glbfn_glMultiDrawArraysIndirectAMD_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiDrawArraysIndirectAMD_loader (uint a00,const(void)* a01,int a02,int a03) {
  *cast(void**)&glMultiDrawArraysIndirectAMD_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectAMD`);
  if (*cast(void**)&glMultiDrawArraysIndirectAMD_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectAMD' not found!`);
  glMultiDrawArraysIndirectAMD_Z(a00,a01,a02,a03,);
}
alias glMultiDrawElementsIndirectAMD = glMultiDrawElementsIndirectAMD_Z;
__gshared glbfn_glMultiDrawElementsIndirectAMD glMultiDrawElementsIndirectAMD_Z = function void (uint a00,uint a01,const(void)* a02,int a03,int a04) {
  glbfn_glMultiDrawElementsIndirectAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiDrawElementsIndirectAMD_loader (uint a00,uint a01,const(void)* a02,int a03,int a04) {
  *cast(void**)&glMultiDrawElementsIndirectAMD_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectAMD`);
  if (*cast(void**)&glMultiDrawElementsIndirectAMD_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectAMD' not found!`);
  glMultiDrawElementsIndirectAMD_Z(a00,a01,a02,a03,a04,);
}
alias glGenNamesAMD = glGenNamesAMD_Z;
__gshared glbfn_glGenNamesAMD glGenNamesAMD_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGenNamesAMD_loader(a00,a01,a02,);
};
private void glbfn_glGenNamesAMD_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGenNamesAMD_Z = glbindGetProcAddress(`glGenNamesAMD`);
  if (*cast(void**)&glGenNamesAMD_Z is null) assert(0, `OpenGL function 'glGenNamesAMD' not found!`);
  glGenNamesAMD_Z(a00,a01,a02,);
}
alias glDeleteNamesAMD = glDeleteNamesAMD_Z;
__gshared glbfn_glDeleteNamesAMD glDeleteNamesAMD_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glDeleteNamesAMD_loader(a00,a01,a02,);
};
private void glbfn_glDeleteNamesAMD_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glDeleteNamesAMD_Z = glbindGetProcAddress(`glDeleteNamesAMD`);
  if (*cast(void**)&glDeleteNamesAMD_Z is null) assert(0, `OpenGL function 'glDeleteNamesAMD' not found!`);
  glDeleteNamesAMD_Z(a00,a01,a02,);
}
alias glIsNameAMD = glIsNameAMD_Z;
__gshared glbfn_glIsNameAMD glIsNameAMD_Z = function ubyte (uint a00,uint a01) {
  return glbfn_glIsNameAMD_loader(a00,a01,);
};
private ubyte glbfn_glIsNameAMD_loader (uint a00,uint a01) {
  *cast(void**)&glIsNameAMD_Z = glbindGetProcAddress(`glIsNameAMD`);
  if (*cast(void**)&glIsNameAMD_Z is null) assert(0, `OpenGL function 'glIsNameAMD' not found!`);
  return glIsNameAMD_Z(a00,a01,);
}
alias glQueryObjectParameteruiAMD = glQueryObjectParameteruiAMD_Z;
__gshared glbfn_glQueryObjectParameteruiAMD glQueryObjectParameteruiAMD_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glQueryObjectParameteruiAMD_loader(a00,a01,a02,a03,);
};
private void glbfn_glQueryObjectParameteruiAMD_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glQueryObjectParameteruiAMD_Z = glbindGetProcAddress(`glQueryObjectParameteruiAMD`);
  if (*cast(void**)&glQueryObjectParameteruiAMD_Z is null) assert(0, `OpenGL function 'glQueryObjectParameteruiAMD' not found!`);
  glQueryObjectParameteruiAMD_Z(a00,a01,a02,a03,);
}
alias glGetPerfMonitorGroupsAMD = glGetPerfMonitorGroupsAMD_Z;
__gshared glbfn_glGetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD_Z = function void (int* a00,int a01,uint* a02) {
  glbfn_glGetPerfMonitorGroupsAMD_loader(a00,a01,a02,);
};
private void glbfn_glGetPerfMonitorGroupsAMD_loader (int* a00,int a01,uint* a02) {
  *cast(void**)&glGetPerfMonitorGroupsAMD_Z = glbindGetProcAddress(`glGetPerfMonitorGroupsAMD`);
  if (*cast(void**)&glGetPerfMonitorGroupsAMD_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupsAMD' not found!`);
  glGetPerfMonitorGroupsAMD_Z(a00,a01,a02,);
}
alias glGetPerfMonitorCountersAMD = glGetPerfMonitorCountersAMD_Z;
__gshared glbfn_glGetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD_Z = function void (uint a00,int* a01,int* a02,int a03,uint* a04) {
  glbfn_glGetPerfMonitorCountersAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetPerfMonitorCountersAMD_loader (uint a00,int* a01,int* a02,int a03,uint* a04) {
  *cast(void**)&glGetPerfMonitorCountersAMD_Z = glbindGetProcAddress(`glGetPerfMonitorCountersAMD`);
  if (*cast(void**)&glGetPerfMonitorCountersAMD_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCountersAMD' not found!`);
  glGetPerfMonitorCountersAMD_Z(a00,a01,a02,a03,a04,);
}
alias glGetPerfMonitorGroupStringAMD = glGetPerfMonitorGroupStringAMD_Z;
__gshared glbfn_glGetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD_Z = function void (uint a00,int a01,int* a02,char* a03) {
  glbfn_glGetPerfMonitorGroupStringAMD_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetPerfMonitorGroupStringAMD_loader (uint a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetPerfMonitorGroupStringAMD_Z = glbindGetProcAddress(`glGetPerfMonitorGroupStringAMD`);
  if (*cast(void**)&glGetPerfMonitorGroupStringAMD_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupStringAMD' not found!`);
  glGetPerfMonitorGroupStringAMD_Z(a00,a01,a02,a03,);
}
alias glGetPerfMonitorCounterStringAMD = glGetPerfMonitorCounterStringAMD_Z;
__gshared glbfn_glGetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD_Z = function void (uint a00,uint a01,int a02,int* a03,char* a04) {
  glbfn_glGetPerfMonitorCounterStringAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetPerfMonitorCounterStringAMD_loader (uint a00,uint a01,int a02,int* a03,char* a04) {
  *cast(void**)&glGetPerfMonitorCounterStringAMD_Z = glbindGetProcAddress(`glGetPerfMonitorCounterStringAMD`);
  if (*cast(void**)&glGetPerfMonitorCounterStringAMD_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterStringAMD' not found!`);
  glGetPerfMonitorCounterStringAMD_Z(a00,a01,a02,a03,a04,);
}
alias glGetPerfMonitorCounterInfoAMD = glGetPerfMonitorCounterInfoAMD_Z;
__gshared glbfn_glGetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD_Z = function void (uint a00,uint a01,uint a02,void* a03) {
  glbfn_glGetPerfMonitorCounterInfoAMD_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetPerfMonitorCounterInfoAMD_loader (uint a00,uint a01,uint a02,void* a03) {
  *cast(void**)&glGetPerfMonitorCounterInfoAMD_Z = glbindGetProcAddress(`glGetPerfMonitorCounterInfoAMD`);
  if (*cast(void**)&glGetPerfMonitorCounterInfoAMD_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterInfoAMD' not found!`);
  glGetPerfMonitorCounterInfoAMD_Z(a00,a01,a02,a03,);
}
alias glGenPerfMonitorsAMD = glGenPerfMonitorsAMD_Z;
__gshared glbfn_glGenPerfMonitorsAMD glGenPerfMonitorsAMD_Z = function void (int a00,uint* a01) {
  glbfn_glGenPerfMonitorsAMD_loader(a00,a01,);
};
private void glbfn_glGenPerfMonitorsAMD_loader (int a00,uint* a01) {
  *cast(void**)&glGenPerfMonitorsAMD_Z = glbindGetProcAddress(`glGenPerfMonitorsAMD`);
  if (*cast(void**)&glGenPerfMonitorsAMD_Z is null) assert(0, `OpenGL function 'glGenPerfMonitorsAMD' not found!`);
  glGenPerfMonitorsAMD_Z(a00,a01,);
}
alias glDeletePerfMonitorsAMD = glDeletePerfMonitorsAMD_Z;
__gshared glbfn_glDeletePerfMonitorsAMD glDeletePerfMonitorsAMD_Z = function void (int a00,uint* a01) {
  glbfn_glDeletePerfMonitorsAMD_loader(a00,a01,);
};
private void glbfn_glDeletePerfMonitorsAMD_loader (int a00,uint* a01) {
  *cast(void**)&glDeletePerfMonitorsAMD_Z = glbindGetProcAddress(`glDeletePerfMonitorsAMD`);
  if (*cast(void**)&glDeletePerfMonitorsAMD_Z is null) assert(0, `OpenGL function 'glDeletePerfMonitorsAMD' not found!`);
  glDeletePerfMonitorsAMD_Z(a00,a01,);
}
alias glSelectPerfMonitorCountersAMD = glSelectPerfMonitorCountersAMD_Z;
__gshared glbfn_glSelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD_Z = function void (uint a00,ubyte a01,uint a02,int a03,uint* a04) {
  glbfn_glSelectPerfMonitorCountersAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glSelectPerfMonitorCountersAMD_loader (uint a00,ubyte a01,uint a02,int a03,uint* a04) {
  *cast(void**)&glSelectPerfMonitorCountersAMD_Z = glbindGetProcAddress(`glSelectPerfMonitorCountersAMD`);
  if (*cast(void**)&glSelectPerfMonitorCountersAMD_Z is null) assert(0, `OpenGL function 'glSelectPerfMonitorCountersAMD' not found!`);
  glSelectPerfMonitorCountersAMD_Z(a00,a01,a02,a03,a04,);
}
alias glBeginPerfMonitorAMD = glBeginPerfMonitorAMD_Z;
__gshared glbfn_glBeginPerfMonitorAMD glBeginPerfMonitorAMD_Z = function void (uint a00) {
  glbfn_glBeginPerfMonitorAMD_loader(a00,);
};
private void glbfn_glBeginPerfMonitorAMD_loader (uint a00) {
  *cast(void**)&glBeginPerfMonitorAMD_Z = glbindGetProcAddress(`glBeginPerfMonitorAMD`);
  if (*cast(void**)&glBeginPerfMonitorAMD_Z is null) assert(0, `OpenGL function 'glBeginPerfMonitorAMD' not found!`);
  glBeginPerfMonitorAMD_Z(a00,);
}
alias glEndPerfMonitorAMD = glEndPerfMonitorAMD_Z;
__gshared glbfn_glEndPerfMonitorAMD glEndPerfMonitorAMD_Z = function void (uint a00) {
  glbfn_glEndPerfMonitorAMD_loader(a00,);
};
private void glbfn_glEndPerfMonitorAMD_loader (uint a00) {
  *cast(void**)&glEndPerfMonitorAMD_Z = glbindGetProcAddress(`glEndPerfMonitorAMD`);
  if (*cast(void**)&glEndPerfMonitorAMD_Z is null) assert(0, `OpenGL function 'glEndPerfMonitorAMD' not found!`);
  glEndPerfMonitorAMD_Z(a00,);
}
alias glGetPerfMonitorCounterDataAMD = glGetPerfMonitorCounterDataAMD_Z;
__gshared glbfn_glGetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD_Z = function void (uint a00,uint a01,int a02,uint* a03,int* a04) {
  glbfn_glGetPerfMonitorCounterDataAMD_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetPerfMonitorCounterDataAMD_loader (uint a00,uint a01,int a02,uint* a03,int* a04) {
  *cast(void**)&glGetPerfMonitorCounterDataAMD_Z = glbindGetProcAddress(`glGetPerfMonitorCounterDataAMD`);
  if (*cast(void**)&glGetPerfMonitorCounterDataAMD_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterDataAMD' not found!`);
  glGetPerfMonitorCounterDataAMD_Z(a00,a01,a02,a03,a04,);
}
alias glSetMultisamplefvAMD = glSetMultisamplefvAMD_Z;
__gshared glbfn_glSetMultisamplefvAMD glSetMultisamplefvAMD_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glSetMultisamplefvAMD_loader(a00,a01,a02,);
};
private void glbfn_glSetMultisamplefvAMD_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glSetMultisamplefvAMD_Z = glbindGetProcAddress(`glSetMultisamplefvAMD`);
  if (*cast(void**)&glSetMultisamplefvAMD_Z is null) assert(0, `OpenGL function 'glSetMultisamplefvAMD' not found!`);
  glSetMultisamplefvAMD_Z(a00,a01,a02,);
}
alias glTexStorageSparseAMD = glTexStorageSparseAMD_Z;
__gshared glbfn_glTexStorageSparseAMD glTexStorageSparseAMD_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06) {
  glbfn_glTexStorageSparseAMD_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTexStorageSparseAMD_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06) {
  *cast(void**)&glTexStorageSparseAMD_Z = glbindGetProcAddress(`glTexStorageSparseAMD`);
  if (*cast(void**)&glTexStorageSparseAMD_Z is null) assert(0, `OpenGL function 'glTexStorageSparseAMD' not found!`);
  glTexStorageSparseAMD_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTextureStorageSparseAMD = glTextureStorageSparseAMD_Z;
__gshared glbfn_glTextureStorageSparseAMD glTextureStorageSparseAMD_Z = function void (uint a00,uint a01,uint a02,int a03,int a04,int a05,int a06,uint a07) {
  glbfn_glTextureStorageSparseAMD_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTextureStorageSparseAMD_loader (uint a00,uint a01,uint a02,int a03,int a04,int a05,int a06,uint a07) {
  *cast(void**)&glTextureStorageSparseAMD_Z = glbindGetProcAddress(`glTextureStorageSparseAMD`);
  if (*cast(void**)&glTextureStorageSparseAMD_Z is null) assert(0, `OpenGL function 'glTextureStorageSparseAMD' not found!`);
  glTextureStorageSparseAMD_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glStencilOpValueAMD = glStencilOpValueAMD_Z;
__gshared glbfn_glStencilOpValueAMD glStencilOpValueAMD_Z = function void (uint a00,uint a01) {
  glbfn_glStencilOpValueAMD_loader(a00,a01,);
};
private void glbfn_glStencilOpValueAMD_loader (uint a00,uint a01) {
  *cast(void**)&glStencilOpValueAMD_Z = glbindGetProcAddress(`glStencilOpValueAMD`);
  if (*cast(void**)&glStencilOpValueAMD_Z is null) assert(0, `OpenGL function 'glStencilOpValueAMD' not found!`);
  glStencilOpValueAMD_Z(a00,a01,);
}
alias glTessellationFactorAMD = glTessellationFactorAMD_Z;
__gshared glbfn_glTessellationFactorAMD glTessellationFactorAMD_Z = function void (float a00) {
  glbfn_glTessellationFactorAMD_loader(a00,);
};
private void glbfn_glTessellationFactorAMD_loader (float a00) {
  *cast(void**)&glTessellationFactorAMD_Z = glbindGetProcAddress(`glTessellationFactorAMD`);
  if (*cast(void**)&glTessellationFactorAMD_Z is null) assert(0, `OpenGL function 'glTessellationFactorAMD' not found!`);
  glTessellationFactorAMD_Z(a00,);
}
alias glTessellationModeAMD = glTessellationModeAMD_Z;
__gshared glbfn_glTessellationModeAMD glTessellationModeAMD_Z = function void (uint a00) {
  glbfn_glTessellationModeAMD_loader(a00,);
};
private void glbfn_glTessellationModeAMD_loader (uint a00) {
  *cast(void**)&glTessellationModeAMD_Z = glbindGetProcAddress(`glTessellationModeAMD`);
  if (*cast(void**)&glTessellationModeAMD_Z is null) assert(0, `OpenGL function 'glTessellationModeAMD' not found!`);
  glTessellationModeAMD_Z(a00,);
}
alias glElementPointerAPPLE = glElementPointerAPPLE_Z;
__gshared glbfn_glElementPointerAPPLE glElementPointerAPPLE_Z = function void (uint a00,const(void)* a01) {
  glbfn_glElementPointerAPPLE_loader(a00,a01,);
};
private void glbfn_glElementPointerAPPLE_loader (uint a00,const(void)* a01) {
  *cast(void**)&glElementPointerAPPLE_Z = glbindGetProcAddress(`glElementPointerAPPLE`);
  if (*cast(void**)&glElementPointerAPPLE_Z is null) assert(0, `OpenGL function 'glElementPointerAPPLE' not found!`);
  glElementPointerAPPLE_Z(a00,a01,);
}
alias glDrawElementArrayAPPLE = glDrawElementArrayAPPLE_Z;
__gshared glbfn_glDrawElementArrayAPPLE glDrawElementArrayAPPLE_Z = function void (uint a00,int a01,int a02) {
  glbfn_glDrawElementArrayAPPLE_loader(a00,a01,a02,);
};
private void glbfn_glDrawElementArrayAPPLE_loader (uint a00,int a01,int a02) {
  *cast(void**)&glDrawElementArrayAPPLE_Z = glbindGetProcAddress(`glDrawElementArrayAPPLE`);
  if (*cast(void**)&glDrawElementArrayAPPLE_Z is null) assert(0, `OpenGL function 'glDrawElementArrayAPPLE' not found!`);
  glDrawElementArrayAPPLE_Z(a00,a01,a02,);
}
alias glDrawRangeElementArrayAPPLE = glDrawRangeElementArrayAPPLE_Z;
__gshared glbfn_glDrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glDrawRangeElementArrayAPPLE_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawRangeElementArrayAPPLE_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glDrawRangeElementArrayAPPLE_Z = glbindGetProcAddress(`glDrawRangeElementArrayAPPLE`);
  if (*cast(void**)&glDrawRangeElementArrayAPPLE_Z is null) assert(0, `OpenGL function 'glDrawRangeElementArrayAPPLE' not found!`);
  glDrawRangeElementArrayAPPLE_Z(a00,a01,a02,a03,a04,);
}
alias glMultiDrawElementArrayAPPLE = glMultiDrawElementArrayAPPLE_Z;
__gshared glbfn_glMultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE_Z = function void (uint a00,const(int)* a01,const(int)* a02,int a03) {
  glbfn_glMultiDrawElementArrayAPPLE_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiDrawElementArrayAPPLE_loader (uint a00,const(int)* a01,const(int)* a02,int a03) {
  *cast(void**)&glMultiDrawElementArrayAPPLE_Z = glbindGetProcAddress(`glMultiDrawElementArrayAPPLE`);
  if (*cast(void**)&glMultiDrawElementArrayAPPLE_Z is null) assert(0, `OpenGL function 'glMultiDrawElementArrayAPPLE' not found!`);
  glMultiDrawElementArrayAPPLE_Z(a00,a01,a02,a03,);
}
alias glMultiDrawRangeElementArrayAPPLE = glMultiDrawRangeElementArrayAPPLE_Z;
__gshared glbfn_glMultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE_Z = function void (uint a00,uint a01,uint a02,const(int)* a03,const(int)* a04,int a05) {
  glbfn_glMultiDrawRangeElementArrayAPPLE_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMultiDrawRangeElementArrayAPPLE_loader (uint a00,uint a01,uint a02,const(int)* a03,const(int)* a04,int a05) {
  *cast(void**)&glMultiDrawRangeElementArrayAPPLE_Z = glbindGetProcAddress(`glMultiDrawRangeElementArrayAPPLE`);
  if (*cast(void**)&glMultiDrawRangeElementArrayAPPLE_Z is null) assert(0, `OpenGL function 'glMultiDrawRangeElementArrayAPPLE' not found!`);
  glMultiDrawRangeElementArrayAPPLE_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGenFencesAPPLE = glGenFencesAPPLE_Z;
__gshared glbfn_glGenFencesAPPLE glGenFencesAPPLE_Z = function void (int a00,uint* a01) {
  glbfn_glGenFencesAPPLE_loader(a00,a01,);
};
private void glbfn_glGenFencesAPPLE_loader (int a00,uint* a01) {
  *cast(void**)&glGenFencesAPPLE_Z = glbindGetProcAddress(`glGenFencesAPPLE`);
  if (*cast(void**)&glGenFencesAPPLE_Z is null) assert(0, `OpenGL function 'glGenFencesAPPLE' not found!`);
  glGenFencesAPPLE_Z(a00,a01,);
}
alias glDeleteFencesAPPLE = glDeleteFencesAPPLE_Z;
__gshared glbfn_glDeleteFencesAPPLE glDeleteFencesAPPLE_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteFencesAPPLE_loader(a00,a01,);
};
private void glbfn_glDeleteFencesAPPLE_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteFencesAPPLE_Z = glbindGetProcAddress(`glDeleteFencesAPPLE`);
  if (*cast(void**)&glDeleteFencesAPPLE_Z is null) assert(0, `OpenGL function 'glDeleteFencesAPPLE' not found!`);
  glDeleteFencesAPPLE_Z(a00,a01,);
}
alias glSetFenceAPPLE = glSetFenceAPPLE_Z;
__gshared glbfn_glSetFenceAPPLE glSetFenceAPPLE_Z = function void (uint a00) {
  glbfn_glSetFenceAPPLE_loader(a00,);
};
private void glbfn_glSetFenceAPPLE_loader (uint a00) {
  *cast(void**)&glSetFenceAPPLE_Z = glbindGetProcAddress(`glSetFenceAPPLE`);
  if (*cast(void**)&glSetFenceAPPLE_Z is null) assert(0, `OpenGL function 'glSetFenceAPPLE' not found!`);
  glSetFenceAPPLE_Z(a00,);
}
alias glIsFenceAPPLE = glIsFenceAPPLE_Z;
__gshared glbfn_glIsFenceAPPLE glIsFenceAPPLE_Z = function ubyte (uint a00) {
  return glbfn_glIsFenceAPPLE_loader(a00,);
};
private ubyte glbfn_glIsFenceAPPLE_loader (uint a00) {
  *cast(void**)&glIsFenceAPPLE_Z = glbindGetProcAddress(`glIsFenceAPPLE`);
  if (*cast(void**)&glIsFenceAPPLE_Z is null) assert(0, `OpenGL function 'glIsFenceAPPLE' not found!`);
  return glIsFenceAPPLE_Z(a00,);
}
alias glTestFenceAPPLE = glTestFenceAPPLE_Z;
__gshared glbfn_glTestFenceAPPLE glTestFenceAPPLE_Z = function ubyte (uint a00) {
  return glbfn_glTestFenceAPPLE_loader(a00,);
};
private ubyte glbfn_glTestFenceAPPLE_loader (uint a00) {
  *cast(void**)&glTestFenceAPPLE_Z = glbindGetProcAddress(`glTestFenceAPPLE`);
  if (*cast(void**)&glTestFenceAPPLE_Z is null) assert(0, `OpenGL function 'glTestFenceAPPLE' not found!`);
  return glTestFenceAPPLE_Z(a00,);
}
alias glFinishFenceAPPLE = glFinishFenceAPPLE_Z;
__gshared glbfn_glFinishFenceAPPLE glFinishFenceAPPLE_Z = function void (uint a00) {
  glbfn_glFinishFenceAPPLE_loader(a00,);
};
private void glbfn_glFinishFenceAPPLE_loader (uint a00) {
  *cast(void**)&glFinishFenceAPPLE_Z = glbindGetProcAddress(`glFinishFenceAPPLE`);
  if (*cast(void**)&glFinishFenceAPPLE_Z is null) assert(0, `OpenGL function 'glFinishFenceAPPLE' not found!`);
  glFinishFenceAPPLE_Z(a00,);
}
alias glTestObjectAPPLE = glTestObjectAPPLE_Z;
__gshared glbfn_glTestObjectAPPLE glTestObjectAPPLE_Z = function ubyte (uint a00,uint a01) {
  return glbfn_glTestObjectAPPLE_loader(a00,a01,);
};
private ubyte glbfn_glTestObjectAPPLE_loader (uint a00,uint a01) {
  *cast(void**)&glTestObjectAPPLE_Z = glbindGetProcAddress(`glTestObjectAPPLE`);
  if (*cast(void**)&glTestObjectAPPLE_Z is null) assert(0, `OpenGL function 'glTestObjectAPPLE' not found!`);
  return glTestObjectAPPLE_Z(a00,a01,);
}
alias glFinishObjectAPPLE = glFinishObjectAPPLE_Z;
__gshared glbfn_glFinishObjectAPPLE glFinishObjectAPPLE_Z = function void (uint a00,int a01) {
  glbfn_glFinishObjectAPPLE_loader(a00,a01,);
};
private void glbfn_glFinishObjectAPPLE_loader (uint a00,int a01) {
  *cast(void**)&glFinishObjectAPPLE_Z = glbindGetProcAddress(`glFinishObjectAPPLE`);
  if (*cast(void**)&glFinishObjectAPPLE_Z is null) assert(0, `OpenGL function 'glFinishObjectAPPLE' not found!`);
  glFinishObjectAPPLE_Z(a00,a01,);
}
alias glBufferParameteriAPPLE = glBufferParameteriAPPLE_Z;
__gshared glbfn_glBufferParameteriAPPLE glBufferParameteriAPPLE_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glBufferParameteriAPPLE_loader(a00,a01,a02,);
};
private void glbfn_glBufferParameteriAPPLE_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glBufferParameteriAPPLE_Z = glbindGetProcAddress(`glBufferParameteriAPPLE`);
  if (*cast(void**)&glBufferParameteriAPPLE_Z is null) assert(0, `OpenGL function 'glBufferParameteriAPPLE' not found!`);
  glBufferParameteriAPPLE_Z(a00,a01,a02,);
}
alias glFlushMappedBufferRangeAPPLE = glFlushMappedBufferRangeAPPLE_Z;
__gshared glbfn_glFlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE_Z = function void (uint a00,int a01,int a02) {
  glbfn_glFlushMappedBufferRangeAPPLE_loader(a00,a01,a02,);
};
private void glbfn_glFlushMappedBufferRangeAPPLE_loader (uint a00,int a01,int a02) {
  *cast(void**)&glFlushMappedBufferRangeAPPLE_Z = glbindGetProcAddress(`glFlushMappedBufferRangeAPPLE`);
  if (*cast(void**)&glFlushMappedBufferRangeAPPLE_Z is null) assert(0, `OpenGL function 'glFlushMappedBufferRangeAPPLE' not found!`);
  glFlushMappedBufferRangeAPPLE_Z(a00,a01,a02,);
}
alias glObjectPurgeableAPPLE = glObjectPurgeableAPPLE_Z;
__gshared glbfn_glObjectPurgeableAPPLE glObjectPurgeableAPPLE_Z = function uint (uint a00,uint a01,uint a02) {
  return glbfn_glObjectPurgeableAPPLE_loader(a00,a01,a02,);
};
private uint glbfn_glObjectPurgeableAPPLE_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glObjectPurgeableAPPLE_Z = glbindGetProcAddress(`glObjectPurgeableAPPLE`);
  if (*cast(void**)&glObjectPurgeableAPPLE_Z is null) assert(0, `OpenGL function 'glObjectPurgeableAPPLE' not found!`);
  return glObjectPurgeableAPPLE_Z(a00,a01,a02,);
}
alias glObjectUnpurgeableAPPLE = glObjectUnpurgeableAPPLE_Z;
__gshared glbfn_glObjectUnpurgeableAPPLE glObjectUnpurgeableAPPLE_Z = function uint (uint a00,uint a01,uint a02) {
  return glbfn_glObjectUnpurgeableAPPLE_loader(a00,a01,a02,);
};
private uint glbfn_glObjectUnpurgeableAPPLE_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glObjectUnpurgeableAPPLE_Z = glbindGetProcAddress(`glObjectUnpurgeableAPPLE`);
  if (*cast(void**)&glObjectUnpurgeableAPPLE_Z is null) assert(0, `OpenGL function 'glObjectUnpurgeableAPPLE' not found!`);
  return glObjectUnpurgeableAPPLE_Z(a00,a01,a02,);
}
alias glGetObjectParameterivAPPLE = glGetObjectParameterivAPPLE_Z;
__gshared glbfn_glGetObjectParameterivAPPLE glGetObjectParameterivAPPLE_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetObjectParameterivAPPLE_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetObjectParameterivAPPLE_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetObjectParameterivAPPLE_Z = glbindGetProcAddress(`glGetObjectParameterivAPPLE`);
  if (*cast(void**)&glGetObjectParameterivAPPLE_Z is null) assert(0, `OpenGL function 'glGetObjectParameterivAPPLE' not found!`);
  glGetObjectParameterivAPPLE_Z(a00,a01,a02,a03,);
}
alias glTextureRangeAPPLE = glTextureRangeAPPLE_Z;
__gshared glbfn_glTextureRangeAPPLE glTextureRangeAPPLE_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glTextureRangeAPPLE_loader(a00,a01,a02,);
};
private void glbfn_glTextureRangeAPPLE_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glTextureRangeAPPLE_Z = glbindGetProcAddress(`glTextureRangeAPPLE`);
  if (*cast(void**)&glTextureRangeAPPLE_Z is null) assert(0, `OpenGL function 'glTextureRangeAPPLE' not found!`);
  glTextureRangeAPPLE_Z(a00,a01,a02,);
}
alias glGetTexParameterPointervAPPLE = glGetTexParameterPointervAPPLE_Z;
__gshared glbfn_glGetTexParameterPointervAPPLE glGetTexParameterPointervAPPLE_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetTexParameterPointervAPPLE_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameterPointervAPPLE_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetTexParameterPointervAPPLE_Z = glbindGetProcAddress(`glGetTexParameterPointervAPPLE`);
  if (*cast(void**)&glGetTexParameterPointervAPPLE_Z is null) assert(0, `OpenGL function 'glGetTexParameterPointervAPPLE' not found!`);
  glGetTexParameterPointervAPPLE_Z(a00,a01,a02,);
}
alias glBindVertexArrayAPPLE = glBindVertexArrayAPPLE_Z;
__gshared glbfn_glBindVertexArrayAPPLE glBindVertexArrayAPPLE_Z = function void (uint a00) {
  glbfn_glBindVertexArrayAPPLE_loader(a00,);
};
private void glbfn_glBindVertexArrayAPPLE_loader (uint a00) {
  *cast(void**)&glBindVertexArrayAPPLE_Z = glbindGetProcAddress(`glBindVertexArrayAPPLE`);
  if (*cast(void**)&glBindVertexArrayAPPLE_Z is null) assert(0, `OpenGL function 'glBindVertexArrayAPPLE' not found!`);
  glBindVertexArrayAPPLE_Z(a00,);
}
alias glDeleteVertexArraysAPPLE = glDeleteVertexArraysAPPLE_Z;
__gshared glbfn_glDeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteVertexArraysAPPLE_loader(a00,a01,);
};
private void glbfn_glDeleteVertexArraysAPPLE_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteVertexArraysAPPLE_Z = glbindGetProcAddress(`glDeleteVertexArraysAPPLE`);
  if (*cast(void**)&glDeleteVertexArraysAPPLE_Z is null) assert(0, `OpenGL function 'glDeleteVertexArraysAPPLE' not found!`);
  glDeleteVertexArraysAPPLE_Z(a00,a01,);
}
alias glGenVertexArraysAPPLE = glGenVertexArraysAPPLE_Z;
__gshared glbfn_glGenVertexArraysAPPLE glGenVertexArraysAPPLE_Z = function void (int a00,uint* a01) {
  glbfn_glGenVertexArraysAPPLE_loader(a00,a01,);
};
private void glbfn_glGenVertexArraysAPPLE_loader (int a00,uint* a01) {
  *cast(void**)&glGenVertexArraysAPPLE_Z = glbindGetProcAddress(`glGenVertexArraysAPPLE`);
  if (*cast(void**)&glGenVertexArraysAPPLE_Z is null) assert(0, `OpenGL function 'glGenVertexArraysAPPLE' not found!`);
  glGenVertexArraysAPPLE_Z(a00,a01,);
}
alias glIsVertexArrayAPPLE = glIsVertexArrayAPPLE_Z;
__gshared glbfn_glIsVertexArrayAPPLE glIsVertexArrayAPPLE_Z = function ubyte (uint a00) {
  return glbfn_glIsVertexArrayAPPLE_loader(a00,);
};
private ubyte glbfn_glIsVertexArrayAPPLE_loader (uint a00) {
  *cast(void**)&glIsVertexArrayAPPLE_Z = glbindGetProcAddress(`glIsVertexArrayAPPLE`);
  if (*cast(void**)&glIsVertexArrayAPPLE_Z is null) assert(0, `OpenGL function 'glIsVertexArrayAPPLE' not found!`);
  return glIsVertexArrayAPPLE_Z(a00,);
}
alias glVertexArrayRangeAPPLE = glVertexArrayRangeAPPLE_Z;
__gshared glbfn_glVertexArrayRangeAPPLE glVertexArrayRangeAPPLE_Z = function void (int a00,void* a01) {
  glbfn_glVertexArrayRangeAPPLE_loader(a00,a01,);
};
private void glbfn_glVertexArrayRangeAPPLE_loader (int a00,void* a01) {
  *cast(void**)&glVertexArrayRangeAPPLE_Z = glbindGetProcAddress(`glVertexArrayRangeAPPLE`);
  if (*cast(void**)&glVertexArrayRangeAPPLE_Z is null) assert(0, `OpenGL function 'glVertexArrayRangeAPPLE' not found!`);
  glVertexArrayRangeAPPLE_Z(a00,a01,);
}
alias glFlushVertexArrayRangeAPPLE = glFlushVertexArrayRangeAPPLE_Z;
__gshared glbfn_glFlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE_Z = function void (int a00,void* a01) {
  glbfn_glFlushVertexArrayRangeAPPLE_loader(a00,a01,);
};
private void glbfn_glFlushVertexArrayRangeAPPLE_loader (int a00,void* a01) {
  *cast(void**)&glFlushVertexArrayRangeAPPLE_Z = glbindGetProcAddress(`glFlushVertexArrayRangeAPPLE`);
  if (*cast(void**)&glFlushVertexArrayRangeAPPLE_Z is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeAPPLE' not found!`);
  glFlushVertexArrayRangeAPPLE_Z(a00,a01,);
}
alias glVertexArrayParameteriAPPLE = glVertexArrayParameteriAPPLE_Z;
__gshared glbfn_glVertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE_Z = function void (uint a00,int a01) {
  glbfn_glVertexArrayParameteriAPPLE_loader(a00,a01,);
};
private void glbfn_glVertexArrayParameteriAPPLE_loader (uint a00,int a01) {
  *cast(void**)&glVertexArrayParameteriAPPLE_Z = glbindGetProcAddress(`glVertexArrayParameteriAPPLE`);
  if (*cast(void**)&glVertexArrayParameteriAPPLE_Z is null) assert(0, `OpenGL function 'glVertexArrayParameteriAPPLE' not found!`);
  glVertexArrayParameteriAPPLE_Z(a00,a01,);
}
alias glEnableVertexAttribAPPLE = glEnableVertexAttribAPPLE_Z;
__gshared glbfn_glEnableVertexAttribAPPLE glEnableVertexAttribAPPLE_Z = function void (uint a00,uint a01) {
  glbfn_glEnableVertexAttribAPPLE_loader(a00,a01,);
};
private void glbfn_glEnableVertexAttribAPPLE_loader (uint a00,uint a01) {
  *cast(void**)&glEnableVertexAttribAPPLE_Z = glbindGetProcAddress(`glEnableVertexAttribAPPLE`);
  if (*cast(void**)&glEnableVertexAttribAPPLE_Z is null) assert(0, `OpenGL function 'glEnableVertexAttribAPPLE' not found!`);
  glEnableVertexAttribAPPLE_Z(a00,a01,);
}
alias glDisableVertexAttribAPPLE = glDisableVertexAttribAPPLE_Z;
__gshared glbfn_glDisableVertexAttribAPPLE glDisableVertexAttribAPPLE_Z = function void (uint a00,uint a01) {
  glbfn_glDisableVertexAttribAPPLE_loader(a00,a01,);
};
private void glbfn_glDisableVertexAttribAPPLE_loader (uint a00,uint a01) {
  *cast(void**)&glDisableVertexAttribAPPLE_Z = glbindGetProcAddress(`glDisableVertexAttribAPPLE`);
  if (*cast(void**)&glDisableVertexAttribAPPLE_Z is null) assert(0, `OpenGL function 'glDisableVertexAttribAPPLE' not found!`);
  glDisableVertexAttribAPPLE_Z(a00,a01,);
}
alias glIsVertexAttribEnabledAPPLE = glIsVertexAttribEnabledAPPLE_Z;
__gshared glbfn_glIsVertexAttribEnabledAPPLE glIsVertexAttribEnabledAPPLE_Z = function ubyte (uint a00,uint a01) {
  return glbfn_glIsVertexAttribEnabledAPPLE_loader(a00,a01,);
};
private ubyte glbfn_glIsVertexAttribEnabledAPPLE_loader (uint a00,uint a01) {
  *cast(void**)&glIsVertexAttribEnabledAPPLE_Z = glbindGetProcAddress(`glIsVertexAttribEnabledAPPLE`);
  if (*cast(void**)&glIsVertexAttribEnabledAPPLE_Z is null) assert(0, `OpenGL function 'glIsVertexAttribEnabledAPPLE' not found!`);
  return glIsVertexAttribEnabledAPPLE_Z(a00,a01,);
}
alias glMapVertexAttrib1dAPPLE = glMapVertexAttrib1dAPPLE_Z;
__gshared glbfn_glMapVertexAttrib1dAPPLE glMapVertexAttrib1dAPPLE_Z = function void (uint a00,uint a01,double a02,double a03,int a04,int a05,const(double)* a06) {
  glbfn_glMapVertexAttrib1dAPPLE_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glMapVertexAttrib1dAPPLE_loader (uint a00,uint a01,double a02,double a03,int a04,int a05,const(double)* a06) {
  *cast(void**)&glMapVertexAttrib1dAPPLE_Z = glbindGetProcAddress(`glMapVertexAttrib1dAPPLE`);
  if (*cast(void**)&glMapVertexAttrib1dAPPLE_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib1dAPPLE' not found!`);
  glMapVertexAttrib1dAPPLE_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMapVertexAttrib1fAPPLE = glMapVertexAttrib1fAPPLE_Z;
__gshared glbfn_glMapVertexAttrib1fAPPLE glMapVertexAttrib1fAPPLE_Z = function void (uint a00,uint a01,float a02,float a03,int a04,int a05,const(float)* a06) {
  glbfn_glMapVertexAttrib1fAPPLE_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glMapVertexAttrib1fAPPLE_loader (uint a00,uint a01,float a02,float a03,int a04,int a05,const(float)* a06) {
  *cast(void**)&glMapVertexAttrib1fAPPLE_Z = glbindGetProcAddress(`glMapVertexAttrib1fAPPLE`);
  if (*cast(void**)&glMapVertexAttrib1fAPPLE_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib1fAPPLE' not found!`);
  glMapVertexAttrib1fAPPLE_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMapVertexAttrib2dAPPLE = glMapVertexAttrib2dAPPLE_Z;
__gshared glbfn_glMapVertexAttrib2dAPPLE glMapVertexAttrib2dAPPLE_Z = function void (uint a00,uint a01,double a02,double a03,int a04,int a05,double a06,double a07,int a08,int a09,const(double)* a10) {
  glbfn_glMapVertexAttrib2dAPPLE_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glMapVertexAttrib2dAPPLE_loader (uint a00,uint a01,double a02,double a03,int a04,int a05,double a06,double a07,int a08,int a09,const(double)* a10) {
  *cast(void**)&glMapVertexAttrib2dAPPLE_Z = glbindGetProcAddress(`glMapVertexAttrib2dAPPLE`);
  if (*cast(void**)&glMapVertexAttrib2dAPPLE_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib2dAPPLE' not found!`);
  glMapVertexAttrib2dAPPLE_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glMapVertexAttrib2fAPPLE = glMapVertexAttrib2fAPPLE_Z;
__gshared glbfn_glMapVertexAttrib2fAPPLE glMapVertexAttrib2fAPPLE_Z = function void (uint a00,uint a01,float a02,float a03,int a04,int a05,float a06,float a07,int a08,int a09,const(float)* a10) {
  glbfn_glMapVertexAttrib2fAPPLE_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glMapVertexAttrib2fAPPLE_loader (uint a00,uint a01,float a02,float a03,int a04,int a05,float a06,float a07,int a08,int a09,const(float)* a10) {
  *cast(void**)&glMapVertexAttrib2fAPPLE_Z = glbindGetProcAddress(`glMapVertexAttrib2fAPPLE`);
  if (*cast(void**)&glMapVertexAttrib2fAPPLE_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib2fAPPLE' not found!`);
  glMapVertexAttrib2fAPPLE_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glPrimitiveBoundingBoxARB = glPrimitiveBoundingBoxARB_Z;
__gshared glbfn_glPrimitiveBoundingBoxARB glPrimitiveBoundingBoxARB_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  glbfn_glPrimitiveBoundingBoxARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glPrimitiveBoundingBoxARB_loader (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  *cast(void**)&glPrimitiveBoundingBoxARB_Z = glbindGetProcAddress(`glPrimitiveBoundingBoxARB`);
  if (*cast(void**)&glPrimitiveBoundingBoxARB_Z is null) assert(0, `OpenGL function 'glPrimitiveBoundingBoxARB' not found!`);
  glPrimitiveBoundingBoxARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetTextureHandleARB = glGetTextureHandleARB_Z;
__gshared glbfn_glGetTextureHandleARB glGetTextureHandleARB_Z = function ulong (uint a00) {
  return glbfn_glGetTextureHandleARB_loader(a00,);
};
private ulong glbfn_glGetTextureHandleARB_loader (uint a00) {
  *cast(void**)&glGetTextureHandleARB_Z = glbindGetProcAddress(`glGetTextureHandleARB`);
  if (*cast(void**)&glGetTextureHandleARB_Z is null) assert(0, `OpenGL function 'glGetTextureHandleARB' not found!`);
  return glGetTextureHandleARB_Z(a00,);
}
alias glGetTextureSamplerHandleARB = glGetTextureSamplerHandleARB_Z;
__gshared glbfn_glGetTextureSamplerHandleARB glGetTextureSamplerHandleARB_Z = function ulong (uint a00,uint a01) {
  return glbfn_glGetTextureSamplerHandleARB_loader(a00,a01,);
};
private ulong glbfn_glGetTextureSamplerHandleARB_loader (uint a00,uint a01) {
  *cast(void**)&glGetTextureSamplerHandleARB_Z = glbindGetProcAddress(`glGetTextureSamplerHandleARB`);
  if (*cast(void**)&glGetTextureSamplerHandleARB_Z is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleARB' not found!`);
  return glGetTextureSamplerHandleARB_Z(a00,a01,);
}
alias glMakeTextureHandleResidentARB = glMakeTextureHandleResidentARB_Z;
__gshared glbfn_glMakeTextureHandleResidentARB glMakeTextureHandleResidentARB_Z = function void (ulong a00) {
  glbfn_glMakeTextureHandleResidentARB_loader(a00,);
};
private void glbfn_glMakeTextureHandleResidentARB_loader (ulong a00) {
  *cast(void**)&glMakeTextureHandleResidentARB_Z = glbindGetProcAddress(`glMakeTextureHandleResidentARB`);
  if (*cast(void**)&glMakeTextureHandleResidentARB_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentARB' not found!`);
  glMakeTextureHandleResidentARB_Z(a00,);
}
alias glMakeTextureHandleNonResidentARB = glMakeTextureHandleNonResidentARB_Z;
__gshared glbfn_glMakeTextureHandleNonResidentARB glMakeTextureHandleNonResidentARB_Z = function void (ulong a00) {
  glbfn_glMakeTextureHandleNonResidentARB_loader(a00,);
};
private void glbfn_glMakeTextureHandleNonResidentARB_loader (ulong a00) {
  *cast(void**)&glMakeTextureHandleNonResidentARB_Z = glbindGetProcAddress(`glMakeTextureHandleNonResidentARB`);
  if (*cast(void**)&glMakeTextureHandleNonResidentARB_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentARB' not found!`);
  glMakeTextureHandleNonResidentARB_Z(a00,);
}
alias glGetImageHandleARB = glGetImageHandleARB_Z;
__gshared glbfn_glGetImageHandleARB glGetImageHandleARB_Z = function ulong (uint a00,int a01,ubyte a02,int a03,uint a04) {
  return glbfn_glGetImageHandleARB_loader(a00,a01,a02,a03,a04,);
};
private ulong glbfn_glGetImageHandleARB_loader (uint a00,int a01,ubyte a02,int a03,uint a04) {
  *cast(void**)&glGetImageHandleARB_Z = glbindGetProcAddress(`glGetImageHandleARB`);
  if (*cast(void**)&glGetImageHandleARB_Z is null) assert(0, `OpenGL function 'glGetImageHandleARB' not found!`);
  return glGetImageHandleARB_Z(a00,a01,a02,a03,a04,);
}
alias glMakeImageHandleResidentARB = glMakeImageHandleResidentARB_Z;
__gshared glbfn_glMakeImageHandleResidentARB glMakeImageHandleResidentARB_Z = function void (ulong a00,uint a01) {
  glbfn_glMakeImageHandleResidentARB_loader(a00,a01,);
};
private void glbfn_glMakeImageHandleResidentARB_loader (ulong a00,uint a01) {
  *cast(void**)&glMakeImageHandleResidentARB_Z = glbindGetProcAddress(`glMakeImageHandleResidentARB`);
  if (*cast(void**)&glMakeImageHandleResidentARB_Z is null) assert(0, `OpenGL function 'glMakeImageHandleResidentARB' not found!`);
  glMakeImageHandleResidentARB_Z(a00,a01,);
}
alias glMakeImageHandleNonResidentARB = glMakeImageHandleNonResidentARB_Z;
__gshared glbfn_glMakeImageHandleNonResidentARB glMakeImageHandleNonResidentARB_Z = function void (ulong a00) {
  glbfn_glMakeImageHandleNonResidentARB_loader(a00,);
};
private void glbfn_glMakeImageHandleNonResidentARB_loader (ulong a00) {
  *cast(void**)&glMakeImageHandleNonResidentARB_Z = glbindGetProcAddress(`glMakeImageHandleNonResidentARB`);
  if (*cast(void**)&glMakeImageHandleNonResidentARB_Z is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentARB' not found!`);
  glMakeImageHandleNonResidentARB_Z(a00,);
}
alias glUniformHandleui64ARB = glUniformHandleui64ARB_Z;
__gshared glbfn_glUniformHandleui64ARB glUniformHandleui64ARB_Z = function void (int a00,ulong a01) {
  glbfn_glUniformHandleui64ARB_loader(a00,a01,);
};
private void glbfn_glUniformHandleui64ARB_loader (int a00,ulong a01) {
  *cast(void**)&glUniformHandleui64ARB_Z = glbindGetProcAddress(`glUniformHandleui64ARB`);
  if (*cast(void**)&glUniformHandleui64ARB_Z is null) assert(0, `OpenGL function 'glUniformHandleui64ARB' not found!`);
  glUniformHandleui64ARB_Z(a00,a01,);
}
alias glUniformHandleui64vARB = glUniformHandleui64vARB_Z;
__gshared glbfn_glUniformHandleui64vARB glUniformHandleui64vARB_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniformHandleui64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniformHandleui64vARB_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniformHandleui64vARB_Z = glbindGetProcAddress(`glUniformHandleui64vARB`);
  if (*cast(void**)&glUniformHandleui64vARB_Z is null) assert(0, `OpenGL function 'glUniformHandleui64vARB' not found!`);
  glUniformHandleui64vARB_Z(a00,a01,a02,);
}
alias glProgramUniformHandleui64ARB = glProgramUniformHandleui64ARB_Z;
__gshared glbfn_glProgramUniformHandleui64ARB glProgramUniformHandleui64ARB_Z = function void (uint a00,int a01,ulong a02) {
  glbfn_glProgramUniformHandleui64ARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniformHandleui64ARB_loader (uint a00,int a01,ulong a02) {
  *cast(void**)&glProgramUniformHandleui64ARB_Z = glbindGetProcAddress(`glProgramUniformHandleui64ARB`);
  if (*cast(void**)&glProgramUniformHandleui64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64ARB' not found!`);
  glProgramUniformHandleui64ARB_Z(a00,a01,a02,);
}
alias glProgramUniformHandleui64vARB = glProgramUniformHandleui64vARB_Z;
__gshared glbfn_glProgramUniformHandleui64vARB glProgramUniformHandleui64vARB_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniformHandleui64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniformHandleui64vARB_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniformHandleui64vARB_Z = glbindGetProcAddress(`glProgramUniformHandleui64vARB`);
  if (*cast(void**)&glProgramUniformHandleui64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vARB' not found!`);
  glProgramUniformHandleui64vARB_Z(a00,a01,a02,a03,);
}
alias glIsTextureHandleResidentARB = glIsTextureHandleResidentARB_Z;
__gshared glbfn_glIsTextureHandleResidentARB glIsTextureHandleResidentARB_Z = function ubyte (ulong a00) {
  return glbfn_glIsTextureHandleResidentARB_loader(a00,);
};
private ubyte glbfn_glIsTextureHandleResidentARB_loader (ulong a00) {
  *cast(void**)&glIsTextureHandleResidentARB_Z = glbindGetProcAddress(`glIsTextureHandleResidentARB`);
  if (*cast(void**)&glIsTextureHandleResidentARB_Z is null) assert(0, `OpenGL function 'glIsTextureHandleResidentARB' not found!`);
  return glIsTextureHandleResidentARB_Z(a00,);
}
alias glIsImageHandleResidentARB = glIsImageHandleResidentARB_Z;
__gshared glbfn_glIsImageHandleResidentARB glIsImageHandleResidentARB_Z = function ubyte (ulong a00) {
  return glbfn_glIsImageHandleResidentARB_loader(a00,);
};
private ubyte glbfn_glIsImageHandleResidentARB_loader (ulong a00) {
  *cast(void**)&glIsImageHandleResidentARB_Z = glbindGetProcAddress(`glIsImageHandleResidentARB`);
  if (*cast(void**)&glIsImageHandleResidentARB_Z is null) assert(0, `OpenGL function 'glIsImageHandleResidentARB' not found!`);
  return glIsImageHandleResidentARB_Z(a00,);
}
alias glVertexAttribL1ui64ARB = glVertexAttribL1ui64ARB_Z;
__gshared glbfn_glVertexAttribL1ui64ARB glVertexAttribL1ui64ARB_Z = function void (uint a00,ulong a01) {
  glbfn_glVertexAttribL1ui64ARB_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1ui64ARB_loader (uint a00,ulong a01) {
  *cast(void**)&glVertexAttribL1ui64ARB_Z = glbindGetProcAddress(`glVertexAttribL1ui64ARB`);
  if (*cast(void**)&glVertexAttribL1ui64ARB_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64ARB' not found!`);
  glVertexAttribL1ui64ARB_Z(a00,a01,);
}
alias glVertexAttribL1ui64vARB = glVertexAttribL1ui64vARB_Z;
__gshared glbfn_glVertexAttribL1ui64vARB glVertexAttribL1ui64vARB_Z = function void (uint a00,const(ulong)* a01) {
  glbfn_glVertexAttribL1ui64vARB_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1ui64vARB_loader (uint a00,const(ulong)* a01) {
  *cast(void**)&glVertexAttribL1ui64vARB_Z = glbindGetProcAddress(`glVertexAttribL1ui64vARB`);
  if (*cast(void**)&glVertexAttribL1ui64vARB_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vARB' not found!`);
  glVertexAttribL1ui64vARB_Z(a00,a01,);
}
alias glGetVertexAttribLui64vARB = glGetVertexAttribLui64vARB_Z;
__gshared glbfn_glGetVertexAttribLui64vARB glGetVertexAttribLui64vARB_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetVertexAttribLui64vARB_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribLui64vARB_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetVertexAttribLui64vARB_Z = glbindGetProcAddress(`glGetVertexAttribLui64vARB`);
  if (*cast(void**)&glGetVertexAttribLui64vARB_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vARB' not found!`);
  glGetVertexAttribLui64vARB_Z(a00,a01,a02,);
}
alias glClampColorARB = glClampColorARB_Z;
__gshared glbfn_glClampColorARB glClampColorARB_Z = function void (uint a00,uint a01) {
  glbfn_glClampColorARB_loader(a00,a01,);
};
private void glbfn_glClampColorARB_loader (uint a00,uint a01) {
  *cast(void**)&glClampColorARB_Z = glbindGetProcAddress(`glClampColorARB`);
  if (*cast(void**)&glClampColorARB_Z is null) assert(0, `OpenGL function 'glClampColorARB' not found!`);
  glClampColorARB_Z(a00,a01,);
}
alias glDispatchComputeGroupSizeARB = glDispatchComputeGroupSizeARB_Z;
__gshared glbfn_glDispatchComputeGroupSizeARB glDispatchComputeGroupSizeARB_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glDispatchComputeGroupSizeARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDispatchComputeGroupSizeARB_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glDispatchComputeGroupSizeARB_Z = glbindGetProcAddress(`glDispatchComputeGroupSizeARB`);
  if (*cast(void**)&glDispatchComputeGroupSizeARB_Z is null) assert(0, `OpenGL function 'glDispatchComputeGroupSizeARB' not found!`);
  glDispatchComputeGroupSizeARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glDebugMessageControlARB = glDebugMessageControlARB_Z;
__gshared glbfn_glDebugMessageControlARB glDebugMessageControlARB_Z = function void (uint a00,uint a01,uint a02,int a03,const(uint)* a04,ubyte a05) {
  glbfn_glDebugMessageControlARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDebugMessageControlARB_loader (uint a00,uint a01,uint a02,int a03,const(uint)* a04,ubyte a05) {
  *cast(void**)&glDebugMessageControlARB_Z = glbindGetProcAddress(`glDebugMessageControlARB`);
  if (*cast(void**)&glDebugMessageControlARB_Z is null) assert(0, `OpenGL function 'glDebugMessageControlARB' not found!`);
  glDebugMessageControlARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glDebugMessageInsertARB = glDebugMessageInsertARB_Z;
__gshared glbfn_glDebugMessageInsertARB glDebugMessageInsertARB_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04,const(char)* a05) {
  glbfn_glDebugMessageInsertARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDebugMessageInsertARB_loader (uint a00,uint a01,uint a02,uint a03,int a04,const(char)* a05) {
  *cast(void**)&glDebugMessageInsertARB_Z = glbindGetProcAddress(`glDebugMessageInsertARB`);
  if (*cast(void**)&glDebugMessageInsertARB_Z is null) assert(0, `OpenGL function 'glDebugMessageInsertARB' not found!`);
  glDebugMessageInsertARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetDebugMessageLogARB = glGetDebugMessageLogARB_Z;
__gshared glbfn_glGetDebugMessageLogARB glGetDebugMessageLogARB_Z = function uint (uint a00,int a01,uint* a02,uint* a03,uint* a04,uint* a05,int* a06,char* a07) {
  return glbfn_glGetDebugMessageLogARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private uint glbfn_glGetDebugMessageLogARB_loader (uint a00,int a01,uint* a02,uint* a03,uint* a04,uint* a05,int* a06,char* a07) {
  *cast(void**)&glGetDebugMessageLogARB_Z = glbindGetProcAddress(`glGetDebugMessageLogARB`);
  if (*cast(void**)&glGetDebugMessageLogARB_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLogARB' not found!`);
  return glGetDebugMessageLogARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glDrawBuffersARB = glDrawBuffersARB_Z;
__gshared glbfn_glDrawBuffersARB glDrawBuffersARB_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDrawBuffersARB_loader(a00,a01,);
};
private void glbfn_glDrawBuffersARB_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDrawBuffersARB_Z = glbindGetProcAddress(`glDrawBuffersARB`);
  if (*cast(void**)&glDrawBuffersARB_Z is null) assert(0, `OpenGL function 'glDrawBuffersARB' not found!`);
  glDrawBuffersARB_Z(a00,a01,);
}
alias glBlendEquationiARB = glBlendEquationiARB_Z;
__gshared glbfn_glBlendEquationiARB glBlendEquationiARB_Z = function void (uint a00,uint a01) {
  glbfn_glBlendEquationiARB_loader(a00,a01,);
};
private void glbfn_glBlendEquationiARB_loader (uint a00,uint a01) {
  *cast(void**)&glBlendEquationiARB_Z = glbindGetProcAddress(`glBlendEquationiARB`);
  if (*cast(void**)&glBlendEquationiARB_Z is null) assert(0, `OpenGL function 'glBlendEquationiARB' not found!`);
  glBlendEquationiARB_Z(a00,a01,);
}
alias glBlendEquationSeparateiARB = glBlendEquationSeparateiARB_Z;
__gshared glbfn_glBlendEquationSeparateiARB glBlendEquationSeparateiARB_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBlendEquationSeparateiARB_loader(a00,a01,a02,);
};
private void glbfn_glBlendEquationSeparateiARB_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBlendEquationSeparateiARB_Z = glbindGetProcAddress(`glBlendEquationSeparateiARB`);
  if (*cast(void**)&glBlendEquationSeparateiARB_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateiARB' not found!`);
  glBlendEquationSeparateiARB_Z(a00,a01,a02,);
}
alias glBlendFunciARB = glBlendFunciARB_Z;
__gshared glbfn_glBlendFunciARB glBlendFunciARB_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBlendFunciARB_loader(a00,a01,a02,);
};
private void glbfn_glBlendFunciARB_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBlendFunciARB_Z = glbindGetProcAddress(`glBlendFunciARB`);
  if (*cast(void**)&glBlendFunciARB_Z is null) assert(0, `OpenGL function 'glBlendFunciARB' not found!`);
  glBlendFunciARB_Z(a00,a01,a02,);
}
alias glBlendFuncSeparateiARB = glBlendFuncSeparateiARB_Z;
__gshared glbfn_glBlendFuncSeparateiARB glBlendFuncSeparateiARB_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glBlendFuncSeparateiARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBlendFuncSeparateiARB_loader (uint a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glBlendFuncSeparateiARB_Z = glbindGetProcAddress(`glBlendFuncSeparateiARB`);
  if (*cast(void**)&glBlendFuncSeparateiARB_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateiARB' not found!`);
  glBlendFuncSeparateiARB_Z(a00,a01,a02,a03,a04,);
}
alias glDrawArraysInstancedARB = glDrawArraysInstancedARB_Z;
__gshared glbfn_glDrawArraysInstancedARB glDrawArraysInstancedARB_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glDrawArraysInstancedARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawArraysInstancedARB_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glDrawArraysInstancedARB_Z = glbindGetProcAddress(`glDrawArraysInstancedARB`);
  if (*cast(void**)&glDrawArraysInstancedARB_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedARB' not found!`);
  glDrawArraysInstancedARB_Z(a00,a01,a02,a03,);
}
alias glDrawElementsInstancedARB = glDrawElementsInstancedARB_Z;
__gshared glbfn_glDrawElementsInstancedARB glDrawElementsInstancedARB_Z = function void (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  glbfn_glDrawElementsInstancedARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawElementsInstancedARB_loader (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  *cast(void**)&glDrawElementsInstancedARB_Z = glbindGetProcAddress(`glDrawElementsInstancedARB`);
  if (*cast(void**)&glDrawElementsInstancedARB_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedARB' not found!`);
  glDrawElementsInstancedARB_Z(a00,a01,a02,a03,a04,);
}
alias glProgramStringARB = glProgramStringARB_Z;
__gshared glbfn_glProgramStringARB glProgramStringARB_Z = function void (uint a00,uint a01,int a02,const(void)* a03) {
  glbfn_glProgramStringARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramStringARB_loader (uint a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glProgramStringARB_Z = glbindGetProcAddress(`glProgramStringARB`);
  if (*cast(void**)&glProgramStringARB_Z is null) assert(0, `OpenGL function 'glProgramStringARB' not found!`);
  glProgramStringARB_Z(a00,a01,a02,a03,);
}
alias glBindProgramARB = glBindProgramARB_Z;
__gshared glbfn_glBindProgramARB glBindProgramARB_Z = function void (uint a00,uint a01) {
  glbfn_glBindProgramARB_loader(a00,a01,);
};
private void glbfn_glBindProgramARB_loader (uint a00,uint a01) {
  *cast(void**)&glBindProgramARB_Z = glbindGetProcAddress(`glBindProgramARB`);
  if (*cast(void**)&glBindProgramARB_Z is null) assert(0, `OpenGL function 'glBindProgramARB' not found!`);
  glBindProgramARB_Z(a00,a01,);
}
alias glDeleteProgramsARB = glDeleteProgramsARB_Z;
__gshared glbfn_glDeleteProgramsARB glDeleteProgramsARB_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteProgramsARB_loader(a00,a01,);
};
private void glbfn_glDeleteProgramsARB_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteProgramsARB_Z = glbindGetProcAddress(`glDeleteProgramsARB`);
  if (*cast(void**)&glDeleteProgramsARB_Z is null) assert(0, `OpenGL function 'glDeleteProgramsARB' not found!`);
  glDeleteProgramsARB_Z(a00,a01,);
}
alias glGenProgramsARB = glGenProgramsARB_Z;
__gshared glbfn_glGenProgramsARB glGenProgramsARB_Z = function void (int a00,uint* a01) {
  glbfn_glGenProgramsARB_loader(a00,a01,);
};
private void glbfn_glGenProgramsARB_loader (int a00,uint* a01) {
  *cast(void**)&glGenProgramsARB_Z = glbindGetProcAddress(`glGenProgramsARB`);
  if (*cast(void**)&glGenProgramsARB_Z is null) assert(0, `OpenGL function 'glGenProgramsARB' not found!`);
  glGenProgramsARB_Z(a00,a01,);
}
alias glProgramEnvParameter4dARB = glProgramEnvParameter4dARB_Z;
__gshared glbfn_glProgramEnvParameter4dARB glProgramEnvParameter4dARB_Z = function void (uint a00,uint a01,double a02,double a03,double a04,double a05) {
  glbfn_glProgramEnvParameter4dARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramEnvParameter4dARB_loader (uint a00,uint a01,double a02,double a03,double a04,double a05) {
  *cast(void**)&glProgramEnvParameter4dARB_Z = glbindGetProcAddress(`glProgramEnvParameter4dARB`);
  if (*cast(void**)&glProgramEnvParameter4dARB_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4dARB' not found!`);
  glProgramEnvParameter4dARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramEnvParameter4dvARB = glProgramEnvParameter4dvARB_Z;
__gshared glbfn_glProgramEnvParameter4dvARB glProgramEnvParameter4dvARB_Z = function void (uint a00,uint a01,const(double)* a02) {
  glbfn_glProgramEnvParameter4dvARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramEnvParameter4dvARB_loader (uint a00,uint a01,const(double)* a02) {
  *cast(void**)&glProgramEnvParameter4dvARB_Z = glbindGetProcAddress(`glProgramEnvParameter4dvARB`);
  if (*cast(void**)&glProgramEnvParameter4dvARB_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4dvARB' not found!`);
  glProgramEnvParameter4dvARB_Z(a00,a01,a02,);
}
alias glProgramEnvParameter4fARB = glProgramEnvParameter4fARB_Z;
__gshared glbfn_glProgramEnvParameter4fARB glProgramEnvParameter4fARB_Z = function void (uint a00,uint a01,float a02,float a03,float a04,float a05) {
  glbfn_glProgramEnvParameter4fARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramEnvParameter4fARB_loader (uint a00,uint a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glProgramEnvParameter4fARB_Z = glbindGetProcAddress(`glProgramEnvParameter4fARB`);
  if (*cast(void**)&glProgramEnvParameter4fARB_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4fARB' not found!`);
  glProgramEnvParameter4fARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramEnvParameter4fvARB = glProgramEnvParameter4fvARB_Z;
__gshared glbfn_glProgramEnvParameter4fvARB glProgramEnvParameter4fvARB_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glProgramEnvParameter4fvARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramEnvParameter4fvARB_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glProgramEnvParameter4fvARB_Z = glbindGetProcAddress(`glProgramEnvParameter4fvARB`);
  if (*cast(void**)&glProgramEnvParameter4fvARB_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4fvARB' not found!`);
  glProgramEnvParameter4fvARB_Z(a00,a01,a02,);
}
alias glProgramLocalParameter4dARB = glProgramLocalParameter4dARB_Z;
__gshared glbfn_glProgramLocalParameter4dARB glProgramLocalParameter4dARB_Z = function void (uint a00,uint a01,double a02,double a03,double a04,double a05) {
  glbfn_glProgramLocalParameter4dARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramLocalParameter4dARB_loader (uint a00,uint a01,double a02,double a03,double a04,double a05) {
  *cast(void**)&glProgramLocalParameter4dARB_Z = glbindGetProcAddress(`glProgramLocalParameter4dARB`);
  if (*cast(void**)&glProgramLocalParameter4dARB_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4dARB' not found!`);
  glProgramLocalParameter4dARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramLocalParameter4dvARB = glProgramLocalParameter4dvARB_Z;
__gshared glbfn_glProgramLocalParameter4dvARB glProgramLocalParameter4dvARB_Z = function void (uint a00,uint a01,const(double)* a02) {
  glbfn_glProgramLocalParameter4dvARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramLocalParameter4dvARB_loader (uint a00,uint a01,const(double)* a02) {
  *cast(void**)&glProgramLocalParameter4dvARB_Z = glbindGetProcAddress(`glProgramLocalParameter4dvARB`);
  if (*cast(void**)&glProgramLocalParameter4dvARB_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4dvARB' not found!`);
  glProgramLocalParameter4dvARB_Z(a00,a01,a02,);
}
alias glProgramLocalParameter4fARB = glProgramLocalParameter4fARB_Z;
__gshared glbfn_glProgramLocalParameter4fARB glProgramLocalParameter4fARB_Z = function void (uint a00,uint a01,float a02,float a03,float a04,float a05) {
  glbfn_glProgramLocalParameter4fARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramLocalParameter4fARB_loader (uint a00,uint a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glProgramLocalParameter4fARB_Z = glbindGetProcAddress(`glProgramLocalParameter4fARB`);
  if (*cast(void**)&glProgramLocalParameter4fARB_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4fARB' not found!`);
  glProgramLocalParameter4fARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramLocalParameter4fvARB = glProgramLocalParameter4fvARB_Z;
__gshared glbfn_glProgramLocalParameter4fvARB glProgramLocalParameter4fvARB_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glProgramLocalParameter4fvARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramLocalParameter4fvARB_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glProgramLocalParameter4fvARB_Z = glbindGetProcAddress(`glProgramLocalParameter4fvARB`);
  if (*cast(void**)&glProgramLocalParameter4fvARB_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4fvARB' not found!`);
  glProgramLocalParameter4fvARB_Z(a00,a01,a02,);
}
alias glGetProgramEnvParameterdvARB = glGetProgramEnvParameterdvARB_Z;
__gshared glbfn_glGetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetProgramEnvParameterdvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramEnvParameterdvARB_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetProgramEnvParameterdvARB_Z = glbindGetProcAddress(`glGetProgramEnvParameterdvARB`);
  if (*cast(void**)&glGetProgramEnvParameterdvARB_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterdvARB' not found!`);
  glGetProgramEnvParameterdvARB_Z(a00,a01,a02,);
}
alias glGetProgramEnvParameterfvARB = glGetProgramEnvParameterfvARB_Z;
__gshared glbfn_glGetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetProgramEnvParameterfvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramEnvParameterfvARB_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetProgramEnvParameterfvARB_Z = glbindGetProcAddress(`glGetProgramEnvParameterfvARB`);
  if (*cast(void**)&glGetProgramEnvParameterfvARB_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterfvARB' not found!`);
  glGetProgramEnvParameterfvARB_Z(a00,a01,a02,);
}
alias glGetProgramLocalParameterdvARB = glGetProgramLocalParameterdvARB_Z;
__gshared glbfn_glGetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetProgramLocalParameterdvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramLocalParameterdvARB_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetProgramLocalParameterdvARB_Z = glbindGetProcAddress(`glGetProgramLocalParameterdvARB`);
  if (*cast(void**)&glGetProgramLocalParameterdvARB_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterdvARB' not found!`);
  glGetProgramLocalParameterdvARB_Z(a00,a01,a02,);
}
alias glGetProgramLocalParameterfvARB = glGetProgramLocalParameterfvARB_Z;
__gshared glbfn_glGetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetProgramLocalParameterfvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramLocalParameterfvARB_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetProgramLocalParameterfvARB_Z = glbindGetProcAddress(`glGetProgramLocalParameterfvARB`);
  if (*cast(void**)&glGetProgramLocalParameterfvARB_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterfvARB' not found!`);
  glGetProgramLocalParameterfvARB_Z(a00,a01,a02,);
}
alias glGetProgramivARB = glGetProgramivARB_Z;
__gshared glbfn_glGetProgramivARB glGetProgramivARB_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetProgramivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramivARB_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetProgramivARB_Z = glbindGetProcAddress(`glGetProgramivARB`);
  if (*cast(void**)&glGetProgramivARB_Z is null) assert(0, `OpenGL function 'glGetProgramivARB' not found!`);
  glGetProgramivARB_Z(a00,a01,a02,);
}
alias glGetProgramStringARB = glGetProgramStringARB_Z;
__gshared glbfn_glGetProgramStringARB glGetProgramStringARB_Z = function void (uint a00,uint a01,void* a02) {
  glbfn_glGetProgramStringARB_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramStringARB_loader (uint a00,uint a01,void* a02) {
  *cast(void**)&glGetProgramStringARB_Z = glbindGetProcAddress(`glGetProgramStringARB`);
  if (*cast(void**)&glGetProgramStringARB_Z is null) assert(0, `OpenGL function 'glGetProgramStringARB' not found!`);
  glGetProgramStringARB_Z(a00,a01,a02,);
}
alias glIsProgramARB = glIsProgramARB_Z;
__gshared glbfn_glIsProgramARB glIsProgramARB_Z = function ubyte (uint a00) {
  return glbfn_glIsProgramARB_loader(a00,);
};
private ubyte glbfn_glIsProgramARB_loader (uint a00) {
  *cast(void**)&glIsProgramARB_Z = glbindGetProcAddress(`glIsProgramARB`);
  if (*cast(void**)&glIsProgramARB_Z is null) assert(0, `OpenGL function 'glIsProgramARB' not found!`);
  return glIsProgramARB_Z(a00,);
}
alias glProgramParameteriARB = glProgramParameteriARB_Z;
__gshared glbfn_glProgramParameteriARB glProgramParameteriARB_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glProgramParameteriARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramParameteriARB_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glProgramParameteriARB_Z = glbindGetProcAddress(`glProgramParameteriARB`);
  if (*cast(void**)&glProgramParameteriARB_Z is null) assert(0, `OpenGL function 'glProgramParameteriARB' not found!`);
  glProgramParameteriARB_Z(a00,a01,a02,);
}
alias glFramebufferTextureARB = glFramebufferTextureARB_Z;
__gshared glbfn_glFramebufferTextureARB glFramebufferTextureARB_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glFramebufferTextureARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glFramebufferTextureARB_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glFramebufferTextureARB_Z = glbindGetProcAddress(`glFramebufferTextureARB`);
  if (*cast(void**)&glFramebufferTextureARB_Z is null) assert(0, `OpenGL function 'glFramebufferTextureARB' not found!`);
  glFramebufferTextureARB_Z(a00,a01,a02,a03,);
}
alias glFramebufferTextureLayerARB = glFramebufferTextureLayerARB_Z;
__gshared glbfn_glFramebufferTextureLayerARB glFramebufferTextureLayerARB_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glFramebufferTextureLayerARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTextureLayerARB_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glFramebufferTextureLayerARB_Z = glbindGetProcAddress(`glFramebufferTextureLayerARB`);
  if (*cast(void**)&glFramebufferTextureLayerARB_Z is null) assert(0, `OpenGL function 'glFramebufferTextureLayerARB' not found!`);
  glFramebufferTextureLayerARB_Z(a00,a01,a02,a03,a04,);
}
alias glFramebufferTextureFaceARB = glFramebufferTextureFaceARB_Z;
__gshared glbfn_glFramebufferTextureFaceARB glFramebufferTextureFaceARB_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04) {
  glbfn_glFramebufferTextureFaceARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTextureFaceARB_loader (uint a00,uint a01,uint a02,int a03,uint a04) {
  *cast(void**)&glFramebufferTextureFaceARB_Z = glbindGetProcAddress(`glFramebufferTextureFaceARB`);
  if (*cast(void**)&glFramebufferTextureFaceARB_Z is null) assert(0, `OpenGL function 'glFramebufferTextureFaceARB' not found!`);
  glFramebufferTextureFaceARB_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1i64ARB = glUniform1i64ARB_Z;
__gshared glbfn_glUniform1i64ARB glUniform1i64ARB_Z = function void (int a00,long a01) {
  glbfn_glUniform1i64ARB_loader(a00,a01,);
};
private void glbfn_glUniform1i64ARB_loader (int a00,long a01) {
  *cast(void**)&glUniform1i64ARB_Z = glbindGetProcAddress(`glUniform1i64ARB`);
  if (*cast(void**)&glUniform1i64ARB_Z is null) assert(0, `OpenGL function 'glUniform1i64ARB' not found!`);
  glUniform1i64ARB_Z(a00,a01,);
}
alias glUniform2i64ARB = glUniform2i64ARB_Z;
__gshared glbfn_glUniform2i64ARB glUniform2i64ARB_Z = function void (int a00,long a01,long a02) {
  glbfn_glUniform2i64ARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2i64ARB_loader (int a00,long a01,long a02) {
  *cast(void**)&glUniform2i64ARB_Z = glbindGetProcAddress(`glUniform2i64ARB`);
  if (*cast(void**)&glUniform2i64ARB_Z is null) assert(0, `OpenGL function 'glUniform2i64ARB' not found!`);
  glUniform2i64ARB_Z(a00,a01,a02,);
}
alias glUniform3i64ARB = glUniform3i64ARB_Z;
__gshared glbfn_glUniform3i64ARB glUniform3i64ARB_Z = function void (int a00,long a01,long a02,long a03) {
  glbfn_glUniform3i64ARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3i64ARB_loader (int a00,long a01,long a02,long a03) {
  *cast(void**)&glUniform3i64ARB_Z = glbindGetProcAddress(`glUniform3i64ARB`);
  if (*cast(void**)&glUniform3i64ARB_Z is null) assert(0, `OpenGL function 'glUniform3i64ARB' not found!`);
  glUniform3i64ARB_Z(a00,a01,a02,a03,);
}
alias glUniform4i64ARB = glUniform4i64ARB_Z;
__gshared glbfn_glUniform4i64ARB glUniform4i64ARB_Z = function void (int a00,long a01,long a02,long a03,long a04) {
  glbfn_glUniform4i64ARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4i64ARB_loader (int a00,long a01,long a02,long a03,long a04) {
  *cast(void**)&glUniform4i64ARB_Z = glbindGetProcAddress(`glUniform4i64ARB`);
  if (*cast(void**)&glUniform4i64ARB_Z is null) assert(0, `OpenGL function 'glUniform4i64ARB' not found!`);
  glUniform4i64ARB_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1i64vARB = glUniform1i64vARB_Z;
__gshared glbfn_glUniform1i64vARB glUniform1i64vARB_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform1i64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform1i64vARB_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform1i64vARB_Z = glbindGetProcAddress(`glUniform1i64vARB`);
  if (*cast(void**)&glUniform1i64vARB_Z is null) assert(0, `OpenGL function 'glUniform1i64vARB' not found!`);
  glUniform1i64vARB_Z(a00,a01,a02,);
}
alias glUniform2i64vARB = glUniform2i64vARB_Z;
__gshared glbfn_glUniform2i64vARB glUniform2i64vARB_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform2i64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2i64vARB_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform2i64vARB_Z = glbindGetProcAddress(`glUniform2i64vARB`);
  if (*cast(void**)&glUniform2i64vARB_Z is null) assert(0, `OpenGL function 'glUniform2i64vARB' not found!`);
  glUniform2i64vARB_Z(a00,a01,a02,);
}
alias glUniform3i64vARB = glUniform3i64vARB_Z;
__gshared glbfn_glUniform3i64vARB glUniform3i64vARB_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform3i64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform3i64vARB_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform3i64vARB_Z = glbindGetProcAddress(`glUniform3i64vARB`);
  if (*cast(void**)&glUniform3i64vARB_Z is null) assert(0, `OpenGL function 'glUniform3i64vARB' not found!`);
  glUniform3i64vARB_Z(a00,a01,a02,);
}
alias glUniform4i64vARB = glUniform4i64vARB_Z;
__gshared glbfn_glUniform4i64vARB glUniform4i64vARB_Z = function void (int a00,int a01,const(long)* a02) {
  glbfn_glUniform4i64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform4i64vARB_loader (int a00,int a01,const(long)* a02) {
  *cast(void**)&glUniform4i64vARB_Z = glbindGetProcAddress(`glUniform4i64vARB`);
  if (*cast(void**)&glUniform4i64vARB_Z is null) assert(0, `OpenGL function 'glUniform4i64vARB' not found!`);
  glUniform4i64vARB_Z(a00,a01,a02,);
}
alias glUniform1ui64ARB = glUniform1ui64ARB_Z;
__gshared glbfn_glUniform1ui64ARB glUniform1ui64ARB_Z = function void (int a00,ulong a01) {
  glbfn_glUniform1ui64ARB_loader(a00,a01,);
};
private void glbfn_glUniform1ui64ARB_loader (int a00,ulong a01) {
  *cast(void**)&glUniform1ui64ARB_Z = glbindGetProcAddress(`glUniform1ui64ARB`);
  if (*cast(void**)&glUniform1ui64ARB_Z is null) assert(0, `OpenGL function 'glUniform1ui64ARB' not found!`);
  glUniform1ui64ARB_Z(a00,a01,);
}
alias glUniform2ui64ARB = glUniform2ui64ARB_Z;
__gshared glbfn_glUniform2ui64ARB glUniform2ui64ARB_Z = function void (int a00,ulong a01,ulong a02) {
  glbfn_glUniform2ui64ARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2ui64ARB_loader (int a00,ulong a01,ulong a02) {
  *cast(void**)&glUniform2ui64ARB_Z = glbindGetProcAddress(`glUniform2ui64ARB`);
  if (*cast(void**)&glUniform2ui64ARB_Z is null) assert(0, `OpenGL function 'glUniform2ui64ARB' not found!`);
  glUniform2ui64ARB_Z(a00,a01,a02,);
}
alias glUniform3ui64ARB = glUniform3ui64ARB_Z;
__gshared glbfn_glUniform3ui64ARB glUniform3ui64ARB_Z = function void (int a00,ulong a01,ulong a02,ulong a03) {
  glbfn_glUniform3ui64ARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3ui64ARB_loader (int a00,ulong a01,ulong a02,ulong a03) {
  *cast(void**)&glUniform3ui64ARB_Z = glbindGetProcAddress(`glUniform3ui64ARB`);
  if (*cast(void**)&glUniform3ui64ARB_Z is null) assert(0, `OpenGL function 'glUniform3ui64ARB' not found!`);
  glUniform3ui64ARB_Z(a00,a01,a02,a03,);
}
alias glUniform4ui64ARB = glUniform4ui64ARB_Z;
__gshared glbfn_glUniform4ui64ARB glUniform4ui64ARB_Z = function void (int a00,ulong a01,ulong a02,ulong a03,ulong a04) {
  glbfn_glUniform4ui64ARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4ui64ARB_loader (int a00,ulong a01,ulong a02,ulong a03,ulong a04) {
  *cast(void**)&glUniform4ui64ARB_Z = glbindGetProcAddress(`glUniform4ui64ARB`);
  if (*cast(void**)&glUniform4ui64ARB_Z is null) assert(0, `OpenGL function 'glUniform4ui64ARB' not found!`);
  glUniform4ui64ARB_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1ui64vARB = glUniform1ui64vARB_Z;
__gshared glbfn_glUniform1ui64vARB glUniform1ui64vARB_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform1ui64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform1ui64vARB_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform1ui64vARB_Z = glbindGetProcAddress(`glUniform1ui64vARB`);
  if (*cast(void**)&glUniform1ui64vARB_Z is null) assert(0, `OpenGL function 'glUniform1ui64vARB' not found!`);
  glUniform1ui64vARB_Z(a00,a01,a02,);
}
alias glUniform2ui64vARB = glUniform2ui64vARB_Z;
__gshared glbfn_glUniform2ui64vARB glUniform2ui64vARB_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform2ui64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2ui64vARB_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform2ui64vARB_Z = glbindGetProcAddress(`glUniform2ui64vARB`);
  if (*cast(void**)&glUniform2ui64vARB_Z is null) assert(0, `OpenGL function 'glUniform2ui64vARB' not found!`);
  glUniform2ui64vARB_Z(a00,a01,a02,);
}
alias glUniform3ui64vARB = glUniform3ui64vARB_Z;
__gshared glbfn_glUniform3ui64vARB glUniform3ui64vARB_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform3ui64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform3ui64vARB_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform3ui64vARB_Z = glbindGetProcAddress(`glUniform3ui64vARB`);
  if (*cast(void**)&glUniform3ui64vARB_Z is null) assert(0, `OpenGL function 'glUniform3ui64vARB' not found!`);
  glUniform3ui64vARB_Z(a00,a01,a02,);
}
alias glUniform4ui64vARB = glUniform4ui64vARB_Z;
__gshared glbfn_glUniform4ui64vARB glUniform4ui64vARB_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniform4ui64vARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform4ui64vARB_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniform4ui64vARB_Z = glbindGetProcAddress(`glUniform4ui64vARB`);
  if (*cast(void**)&glUniform4ui64vARB_Z is null) assert(0, `OpenGL function 'glUniform4ui64vARB' not found!`);
  glUniform4ui64vARB_Z(a00,a01,a02,);
}
alias glGetUniformi64vARB = glGetUniformi64vARB_Z;
__gshared glbfn_glGetUniformi64vARB glGetUniformi64vARB_Z = function void (uint a00,int a01,long* a02) {
  glbfn_glGetUniformi64vARB_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformi64vARB_loader (uint a00,int a01,long* a02) {
  *cast(void**)&glGetUniformi64vARB_Z = glbindGetProcAddress(`glGetUniformi64vARB`);
  if (*cast(void**)&glGetUniformi64vARB_Z is null) assert(0, `OpenGL function 'glGetUniformi64vARB' not found!`);
  glGetUniformi64vARB_Z(a00,a01,a02,);
}
alias glGetUniformui64vARB = glGetUniformui64vARB_Z;
__gshared glbfn_glGetUniformui64vARB glGetUniformui64vARB_Z = function void (uint a00,int a01,ulong* a02) {
  glbfn_glGetUniformui64vARB_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformui64vARB_loader (uint a00,int a01,ulong* a02) {
  *cast(void**)&glGetUniformui64vARB_Z = glbindGetProcAddress(`glGetUniformui64vARB`);
  if (*cast(void**)&glGetUniformui64vARB_Z is null) assert(0, `OpenGL function 'glGetUniformui64vARB' not found!`);
  glGetUniformui64vARB_Z(a00,a01,a02,);
}
alias glGetnUniformi64vARB = glGetnUniformi64vARB_Z;
__gshared glbfn_glGetnUniformi64vARB glGetnUniformi64vARB_Z = function void (uint a00,int a01,int a02,long* a03) {
  glbfn_glGetnUniformi64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformi64vARB_loader (uint a00,int a01,int a02,long* a03) {
  *cast(void**)&glGetnUniformi64vARB_Z = glbindGetProcAddress(`glGetnUniformi64vARB`);
  if (*cast(void**)&glGetnUniformi64vARB_Z is null) assert(0, `OpenGL function 'glGetnUniformi64vARB' not found!`);
  glGetnUniformi64vARB_Z(a00,a01,a02,a03,);
}
alias glGetnUniformui64vARB = glGetnUniformui64vARB_Z;
__gshared glbfn_glGetnUniformui64vARB glGetnUniformui64vARB_Z = function void (uint a00,int a01,int a02,ulong* a03) {
  glbfn_glGetnUniformui64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformui64vARB_loader (uint a00,int a01,int a02,ulong* a03) {
  *cast(void**)&glGetnUniformui64vARB_Z = glbindGetProcAddress(`glGetnUniformui64vARB`);
  if (*cast(void**)&glGetnUniformui64vARB_Z is null) assert(0, `OpenGL function 'glGetnUniformui64vARB' not found!`);
  glGetnUniformui64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1i64ARB = glProgramUniform1i64ARB_Z;
__gshared glbfn_glProgramUniform1i64ARB glProgramUniform1i64ARB_Z = function void (uint a00,int a01,long a02) {
  glbfn_glProgramUniform1i64ARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1i64ARB_loader (uint a00,int a01,long a02) {
  *cast(void**)&glProgramUniform1i64ARB_Z = glbindGetProcAddress(`glProgramUniform1i64ARB`);
  if (*cast(void**)&glProgramUniform1i64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64ARB' not found!`);
  glProgramUniform1i64ARB_Z(a00,a01,a02,);
}
alias glProgramUniform2i64ARB = glProgramUniform2i64ARB_Z;
__gshared glbfn_glProgramUniform2i64ARB glProgramUniform2i64ARB_Z = function void (uint a00,int a01,long a02,long a03) {
  glbfn_glProgramUniform2i64ARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2i64ARB_loader (uint a00,int a01,long a02,long a03) {
  *cast(void**)&glProgramUniform2i64ARB_Z = glbindGetProcAddress(`glProgramUniform2i64ARB`);
  if (*cast(void**)&glProgramUniform2i64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64ARB' not found!`);
  glProgramUniform2i64ARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3i64ARB = glProgramUniform3i64ARB_Z;
__gshared glbfn_glProgramUniform3i64ARB glProgramUniform3i64ARB_Z = function void (uint a00,int a01,long a02,long a03,long a04) {
  glbfn_glProgramUniform3i64ARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3i64ARB_loader (uint a00,int a01,long a02,long a03,long a04) {
  *cast(void**)&glProgramUniform3i64ARB_Z = glbindGetProcAddress(`glProgramUniform3i64ARB`);
  if (*cast(void**)&glProgramUniform3i64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64ARB' not found!`);
  glProgramUniform3i64ARB_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4i64ARB = glProgramUniform4i64ARB_Z;
__gshared glbfn_glProgramUniform4i64ARB glProgramUniform4i64ARB_Z = function void (uint a00,int a01,long a02,long a03,long a04,long a05) {
  glbfn_glProgramUniform4i64ARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4i64ARB_loader (uint a00,int a01,long a02,long a03,long a04,long a05) {
  *cast(void**)&glProgramUniform4i64ARB_Z = glbindGetProcAddress(`glProgramUniform4i64ARB`);
  if (*cast(void**)&glProgramUniform4i64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64ARB' not found!`);
  glProgramUniform4i64ARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1i64vARB = glProgramUniform1i64vARB_Z;
__gshared glbfn_glProgramUniform1i64vARB glProgramUniform1i64vARB_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform1i64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1i64vARB_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform1i64vARB_Z = glbindGetProcAddress(`glProgramUniform1i64vARB`);
  if (*cast(void**)&glProgramUniform1i64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64vARB' not found!`);
  glProgramUniform1i64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2i64vARB = glProgramUniform2i64vARB_Z;
__gshared glbfn_glProgramUniform2i64vARB glProgramUniform2i64vARB_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform2i64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2i64vARB_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform2i64vARB_Z = glbindGetProcAddress(`glProgramUniform2i64vARB`);
  if (*cast(void**)&glProgramUniform2i64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64vARB' not found!`);
  glProgramUniform2i64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3i64vARB = glProgramUniform3i64vARB_Z;
__gshared glbfn_glProgramUniform3i64vARB glProgramUniform3i64vARB_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform3i64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3i64vARB_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform3i64vARB_Z = glbindGetProcAddress(`glProgramUniform3i64vARB`);
  if (*cast(void**)&glProgramUniform3i64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64vARB' not found!`);
  glProgramUniform3i64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4i64vARB = glProgramUniform4i64vARB_Z;
__gshared glbfn_glProgramUniform4i64vARB glProgramUniform4i64vARB_Z = function void (uint a00,int a01,int a02,const(long)* a03) {
  glbfn_glProgramUniform4i64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4i64vARB_loader (uint a00,int a01,int a02,const(long)* a03) {
  *cast(void**)&glProgramUniform4i64vARB_Z = glbindGetProcAddress(`glProgramUniform4i64vARB`);
  if (*cast(void**)&glProgramUniform4i64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64vARB' not found!`);
  glProgramUniform4i64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1ui64ARB = glProgramUniform1ui64ARB_Z;
__gshared glbfn_glProgramUniform1ui64ARB glProgramUniform1ui64ARB_Z = function void (uint a00,int a01,ulong a02) {
  glbfn_glProgramUniform1ui64ARB_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1ui64ARB_loader (uint a00,int a01,ulong a02) {
  *cast(void**)&glProgramUniform1ui64ARB_Z = glbindGetProcAddress(`glProgramUniform1ui64ARB`);
  if (*cast(void**)&glProgramUniform1ui64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64ARB' not found!`);
  glProgramUniform1ui64ARB_Z(a00,a01,a02,);
}
alias glProgramUniform2ui64ARB = glProgramUniform2ui64ARB_Z;
__gshared glbfn_glProgramUniform2ui64ARB glProgramUniform2ui64ARB_Z = function void (uint a00,int a01,ulong a02,ulong a03) {
  glbfn_glProgramUniform2ui64ARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2ui64ARB_loader (uint a00,int a01,ulong a02,ulong a03) {
  *cast(void**)&glProgramUniform2ui64ARB_Z = glbindGetProcAddress(`glProgramUniform2ui64ARB`);
  if (*cast(void**)&glProgramUniform2ui64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64ARB' not found!`);
  glProgramUniform2ui64ARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3ui64ARB = glProgramUniform3ui64ARB_Z;
__gshared glbfn_glProgramUniform3ui64ARB glProgramUniform3ui64ARB_Z = function void (uint a00,int a01,ulong a02,ulong a03,ulong a04) {
  glbfn_glProgramUniform3ui64ARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3ui64ARB_loader (uint a00,int a01,ulong a02,ulong a03,ulong a04) {
  *cast(void**)&glProgramUniform3ui64ARB_Z = glbindGetProcAddress(`glProgramUniform3ui64ARB`);
  if (*cast(void**)&glProgramUniform3ui64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64ARB' not found!`);
  glProgramUniform3ui64ARB_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4ui64ARB = glProgramUniform4ui64ARB_Z;
__gshared glbfn_glProgramUniform4ui64ARB glProgramUniform4ui64ARB_Z = function void (uint a00,int a01,ulong a02,ulong a03,ulong a04,ulong a05) {
  glbfn_glProgramUniform4ui64ARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4ui64ARB_loader (uint a00,int a01,ulong a02,ulong a03,ulong a04,ulong a05) {
  *cast(void**)&glProgramUniform4ui64ARB_Z = glbindGetProcAddress(`glProgramUniform4ui64ARB`);
  if (*cast(void**)&glProgramUniform4ui64ARB_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64ARB' not found!`);
  glProgramUniform4ui64ARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1ui64vARB = glProgramUniform1ui64vARB_Z;
__gshared glbfn_glProgramUniform1ui64vARB glProgramUniform1ui64vARB_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform1ui64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1ui64vARB_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform1ui64vARB_Z = glbindGetProcAddress(`glProgramUniform1ui64vARB`);
  if (*cast(void**)&glProgramUniform1ui64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64vARB' not found!`);
  glProgramUniform1ui64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2ui64vARB = glProgramUniform2ui64vARB_Z;
__gshared glbfn_glProgramUniform2ui64vARB glProgramUniform2ui64vARB_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform2ui64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2ui64vARB_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform2ui64vARB_Z = glbindGetProcAddress(`glProgramUniform2ui64vARB`);
  if (*cast(void**)&glProgramUniform2ui64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64vARB' not found!`);
  glProgramUniform2ui64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3ui64vARB = glProgramUniform3ui64vARB_Z;
__gshared glbfn_glProgramUniform3ui64vARB glProgramUniform3ui64vARB_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform3ui64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3ui64vARB_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform3ui64vARB_Z = glbindGetProcAddress(`glProgramUniform3ui64vARB`);
  if (*cast(void**)&glProgramUniform3ui64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64vARB' not found!`);
  glProgramUniform3ui64vARB_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4ui64vARB = glProgramUniform4ui64vARB_Z;
__gshared glbfn_glProgramUniform4ui64vARB glProgramUniform4ui64vARB_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniform4ui64vARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4ui64vARB_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniform4ui64vARB_Z = glbindGetProcAddress(`glProgramUniform4ui64vARB`);
  if (*cast(void**)&glProgramUniform4ui64vARB_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64vARB' not found!`);
  glProgramUniform4ui64vARB_Z(a00,a01,a02,a03,);
}
alias glColorTable = glColorTable_Z;
__gshared glbfn_glColorTable glColorTable_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  glbfn_glColorTable_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glColorTable_loader (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  *cast(void**)&glColorTable_Z = glbindGetProcAddress(`glColorTable`);
  if (*cast(void**)&glColorTable_Z is null) assert(0, `OpenGL function 'glColorTable' not found!`);
  glColorTable_Z(a00,a01,a02,a03,a04,a05,);
}
alias glColorTableParameterfv = glColorTableParameterfv_Z;
__gshared glbfn_glColorTableParameterfv glColorTableParameterfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glColorTableParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glColorTableParameterfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glColorTableParameterfv_Z = glbindGetProcAddress(`glColorTableParameterfv`);
  if (*cast(void**)&glColorTableParameterfv_Z is null) assert(0, `OpenGL function 'glColorTableParameterfv' not found!`);
  glColorTableParameterfv_Z(a00,a01,a02,);
}
alias glColorTableParameteriv = glColorTableParameteriv_Z;
__gshared glbfn_glColorTableParameteriv glColorTableParameteriv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glColorTableParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glColorTableParameteriv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glColorTableParameteriv_Z = glbindGetProcAddress(`glColorTableParameteriv`);
  if (*cast(void**)&glColorTableParameteriv_Z is null) assert(0, `OpenGL function 'glColorTableParameteriv' not found!`);
  glColorTableParameteriv_Z(a00,a01,a02,);
}
alias glCopyColorTable = glCopyColorTable_Z;
__gshared glbfn_glCopyColorTable glCopyColorTable_Z = function void (uint a00,uint a01,int a02,int a03,int a04) {
  glbfn_glCopyColorTable_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyColorTable_loader (uint a00,uint a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyColorTable_Z = glbindGetProcAddress(`glCopyColorTable`);
  if (*cast(void**)&glCopyColorTable_Z is null) assert(0, `OpenGL function 'glCopyColorTable' not found!`);
  glCopyColorTable_Z(a00,a01,a02,a03,a04,);
}
alias glGetColorTable = glGetColorTable_Z;
__gshared glbfn_glGetColorTable glGetColorTable_Z = function void (uint a00,uint a01,uint a02,void* a03) {
  glbfn_glGetColorTable_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetColorTable_loader (uint a00,uint a01,uint a02,void* a03) {
  *cast(void**)&glGetColorTable_Z = glbindGetProcAddress(`glGetColorTable`);
  if (*cast(void**)&glGetColorTable_Z is null) assert(0, `OpenGL function 'glGetColorTable' not found!`);
  glGetColorTable_Z(a00,a01,a02,a03,);
}
alias glGetColorTableParameterfv = glGetColorTableParameterfv_Z;
__gshared glbfn_glGetColorTableParameterfv glGetColorTableParameterfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetColorTableParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glGetColorTableParameterfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetColorTableParameterfv_Z = glbindGetProcAddress(`glGetColorTableParameterfv`);
  if (*cast(void**)&glGetColorTableParameterfv_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterfv' not found!`);
  glGetColorTableParameterfv_Z(a00,a01,a02,);
}
alias glGetColorTableParameteriv = glGetColorTableParameteriv_Z;
__gshared glbfn_glGetColorTableParameteriv glGetColorTableParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetColorTableParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetColorTableParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetColorTableParameteriv_Z = glbindGetProcAddress(`glGetColorTableParameteriv`);
  if (*cast(void**)&glGetColorTableParameteriv_Z is null) assert(0, `OpenGL function 'glGetColorTableParameteriv' not found!`);
  glGetColorTableParameteriv_Z(a00,a01,a02,);
}
alias glColorSubTable = glColorSubTable_Z;
__gshared glbfn_glColorSubTable glColorSubTable_Z = function void (uint a00,int a01,int a02,uint a03,uint a04,const(void)* a05) {
  glbfn_glColorSubTable_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glColorSubTable_loader (uint a00,int a01,int a02,uint a03,uint a04,const(void)* a05) {
  *cast(void**)&glColorSubTable_Z = glbindGetProcAddress(`glColorSubTable`);
  if (*cast(void**)&glColorSubTable_Z is null) assert(0, `OpenGL function 'glColorSubTable' not found!`);
  glColorSubTable_Z(a00,a01,a02,a03,a04,a05,);
}
alias glCopyColorSubTable = glCopyColorSubTable_Z;
__gshared glbfn_glCopyColorSubTable glCopyColorSubTable_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glCopyColorSubTable_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyColorSubTable_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyColorSubTable_Z = glbindGetProcAddress(`glCopyColorSubTable`);
  if (*cast(void**)&glCopyColorSubTable_Z is null) assert(0, `OpenGL function 'glCopyColorSubTable' not found!`);
  glCopyColorSubTable_Z(a00,a01,a02,a03,a04,);
}
alias glConvolutionFilter1D = glConvolutionFilter1D_Z;
__gshared glbfn_glConvolutionFilter1D glConvolutionFilter1D_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  glbfn_glConvolutionFilter1D_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glConvolutionFilter1D_loader (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  *cast(void**)&glConvolutionFilter1D_Z = glbindGetProcAddress(`glConvolutionFilter1D`);
  if (*cast(void**)&glConvolutionFilter1D_Z is null) assert(0, `OpenGL function 'glConvolutionFilter1D' not found!`);
  glConvolutionFilter1D_Z(a00,a01,a02,a03,a04,a05,);
}
alias glConvolutionFilter2D = glConvolutionFilter2D_Z;
__gshared glbfn_glConvolutionFilter2D glConvolutionFilter2D_Z = function void (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glConvolutionFilter2D_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glConvolutionFilter2D_loader (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glConvolutionFilter2D_Z = glbindGetProcAddress(`glConvolutionFilter2D`);
  if (*cast(void**)&glConvolutionFilter2D_Z is null) assert(0, `OpenGL function 'glConvolutionFilter2D' not found!`);
  glConvolutionFilter2D_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glConvolutionParameterf = glConvolutionParameterf_Z;
__gshared glbfn_glConvolutionParameterf glConvolutionParameterf_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glConvolutionParameterf_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameterf_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glConvolutionParameterf_Z = glbindGetProcAddress(`glConvolutionParameterf`);
  if (*cast(void**)&glConvolutionParameterf_Z is null) assert(0, `OpenGL function 'glConvolutionParameterf' not found!`);
  glConvolutionParameterf_Z(a00,a01,a02,);
}
alias glConvolutionParameterfv = glConvolutionParameterfv_Z;
__gshared glbfn_glConvolutionParameterfv glConvolutionParameterfv_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glConvolutionParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameterfv_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glConvolutionParameterfv_Z = glbindGetProcAddress(`glConvolutionParameterfv`);
  if (*cast(void**)&glConvolutionParameterfv_Z is null) assert(0, `OpenGL function 'glConvolutionParameterfv' not found!`);
  glConvolutionParameterfv_Z(a00,a01,a02,);
}
alias glConvolutionParameteri = glConvolutionParameteri_Z;
__gshared glbfn_glConvolutionParameteri glConvolutionParameteri_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glConvolutionParameteri_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameteri_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glConvolutionParameteri_Z = glbindGetProcAddress(`glConvolutionParameteri`);
  if (*cast(void**)&glConvolutionParameteri_Z is null) assert(0, `OpenGL function 'glConvolutionParameteri' not found!`);
  glConvolutionParameteri_Z(a00,a01,a02,);
}
alias glConvolutionParameteriv = glConvolutionParameteriv_Z;
__gshared glbfn_glConvolutionParameteriv glConvolutionParameteriv_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glConvolutionParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameteriv_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glConvolutionParameteriv_Z = glbindGetProcAddress(`glConvolutionParameteriv`);
  if (*cast(void**)&glConvolutionParameteriv_Z is null) assert(0, `OpenGL function 'glConvolutionParameteriv' not found!`);
  glConvolutionParameteriv_Z(a00,a01,a02,);
}
alias glCopyConvolutionFilter1D = glCopyConvolutionFilter1D_Z;
__gshared glbfn_glCopyConvolutionFilter1D glCopyConvolutionFilter1D_Z = function void (uint a00,uint a01,int a02,int a03,int a04) {
  glbfn_glCopyConvolutionFilter1D_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyConvolutionFilter1D_loader (uint a00,uint a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyConvolutionFilter1D_Z = glbindGetProcAddress(`glCopyConvolutionFilter1D`);
  if (*cast(void**)&glCopyConvolutionFilter1D_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1D' not found!`);
  glCopyConvolutionFilter1D_Z(a00,a01,a02,a03,a04,);
}
alias glCopyConvolutionFilter2D = glCopyConvolutionFilter2D_Z;
__gshared glbfn_glCopyConvolutionFilter2D glCopyConvolutionFilter2D_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  glbfn_glCopyConvolutionFilter2D_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glCopyConvolutionFilter2D_loader (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glCopyConvolutionFilter2D_Z = glbindGetProcAddress(`glCopyConvolutionFilter2D`);
  if (*cast(void**)&glCopyConvolutionFilter2D_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2D' not found!`);
  glCopyConvolutionFilter2D_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetConvolutionFilter = glGetConvolutionFilter_Z;
__gshared glbfn_glGetConvolutionFilter glGetConvolutionFilter_Z = function void (uint a00,uint a01,uint a02,void* a03) {
  glbfn_glGetConvolutionFilter_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetConvolutionFilter_loader (uint a00,uint a01,uint a02,void* a03) {
  *cast(void**)&glGetConvolutionFilter_Z = glbindGetProcAddress(`glGetConvolutionFilter`);
  if (*cast(void**)&glGetConvolutionFilter_Z is null) assert(0, `OpenGL function 'glGetConvolutionFilter' not found!`);
  glGetConvolutionFilter_Z(a00,a01,a02,a03,);
}
alias glGetConvolutionParameterfv = glGetConvolutionParameterfv_Z;
__gshared glbfn_glGetConvolutionParameterfv glGetConvolutionParameterfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetConvolutionParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glGetConvolutionParameterfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetConvolutionParameterfv_Z = glbindGetProcAddress(`glGetConvolutionParameterfv`);
  if (*cast(void**)&glGetConvolutionParameterfv_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterfv' not found!`);
  glGetConvolutionParameterfv_Z(a00,a01,a02,);
}
alias glGetConvolutionParameteriv = glGetConvolutionParameteriv_Z;
__gshared glbfn_glGetConvolutionParameteriv glGetConvolutionParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetConvolutionParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetConvolutionParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetConvolutionParameteriv_Z = glbindGetProcAddress(`glGetConvolutionParameteriv`);
  if (*cast(void**)&glGetConvolutionParameteriv_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameteriv' not found!`);
  glGetConvolutionParameteriv_Z(a00,a01,a02,);
}
alias glGetSeparableFilter = glGetSeparableFilter_Z;
__gshared glbfn_glGetSeparableFilter glGetSeparableFilter_Z = function void (uint a00,uint a01,uint a02,void* a03,void* a04,void* a05) {
  glbfn_glGetSeparableFilter_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetSeparableFilter_loader (uint a00,uint a01,uint a02,void* a03,void* a04,void* a05) {
  *cast(void**)&glGetSeparableFilter_Z = glbindGetProcAddress(`glGetSeparableFilter`);
  if (*cast(void**)&glGetSeparableFilter_Z is null) assert(0, `OpenGL function 'glGetSeparableFilter' not found!`);
  glGetSeparableFilter_Z(a00,a01,a02,a03,a04,a05,);
}
alias glSeparableFilter2D = glSeparableFilter2D_Z;
__gshared glbfn_glSeparableFilter2D glSeparableFilter2D_Z = function void (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06,const(void)* a07) {
  glbfn_glSeparableFilter2D_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glSeparableFilter2D_loader (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06,const(void)* a07) {
  *cast(void**)&glSeparableFilter2D_Z = glbindGetProcAddress(`glSeparableFilter2D`);
  if (*cast(void**)&glSeparableFilter2D_Z is null) assert(0, `OpenGL function 'glSeparableFilter2D' not found!`);
  glSeparableFilter2D_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetHistogram = glGetHistogram_Z;
__gshared glbfn_glGetHistogram glGetHistogram_Z = function void (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  glbfn_glGetHistogram_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetHistogram_loader (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  *cast(void**)&glGetHistogram_Z = glbindGetProcAddress(`glGetHistogram`);
  if (*cast(void**)&glGetHistogram_Z is null) assert(0, `OpenGL function 'glGetHistogram' not found!`);
  glGetHistogram_Z(a00,a01,a02,a03,a04,);
}
alias glGetHistogramParameterfv = glGetHistogramParameterfv_Z;
__gshared glbfn_glGetHistogramParameterfv glGetHistogramParameterfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetHistogramParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glGetHistogramParameterfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetHistogramParameterfv_Z = glbindGetProcAddress(`glGetHistogramParameterfv`);
  if (*cast(void**)&glGetHistogramParameterfv_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterfv' not found!`);
  glGetHistogramParameterfv_Z(a00,a01,a02,);
}
alias glGetHistogramParameteriv = glGetHistogramParameteriv_Z;
__gshared glbfn_glGetHistogramParameteriv glGetHistogramParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetHistogramParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetHistogramParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetHistogramParameteriv_Z = glbindGetProcAddress(`glGetHistogramParameteriv`);
  if (*cast(void**)&glGetHistogramParameteriv_Z is null) assert(0, `OpenGL function 'glGetHistogramParameteriv' not found!`);
  glGetHistogramParameteriv_Z(a00,a01,a02,);
}
alias glGetMinmax = glGetMinmax_Z;
__gshared glbfn_glGetMinmax glGetMinmax_Z = function void (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  glbfn_glGetMinmax_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetMinmax_loader (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  *cast(void**)&glGetMinmax_Z = glbindGetProcAddress(`glGetMinmax`);
  if (*cast(void**)&glGetMinmax_Z is null) assert(0, `OpenGL function 'glGetMinmax' not found!`);
  glGetMinmax_Z(a00,a01,a02,a03,a04,);
}
alias glGetMinmaxParameterfv = glGetMinmaxParameterfv_Z;
__gshared glbfn_glGetMinmaxParameterfv glGetMinmaxParameterfv_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetMinmaxParameterfv_loader(a00,a01,a02,);
};
private void glbfn_glGetMinmaxParameterfv_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetMinmaxParameterfv_Z = glbindGetProcAddress(`glGetMinmaxParameterfv`);
  if (*cast(void**)&glGetMinmaxParameterfv_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameterfv' not found!`);
  glGetMinmaxParameterfv_Z(a00,a01,a02,);
}
alias glGetMinmaxParameteriv = glGetMinmaxParameteriv_Z;
__gshared glbfn_glGetMinmaxParameteriv glGetMinmaxParameteriv_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetMinmaxParameteriv_loader(a00,a01,a02,);
};
private void glbfn_glGetMinmaxParameteriv_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetMinmaxParameteriv_Z = glbindGetProcAddress(`glGetMinmaxParameteriv`);
  if (*cast(void**)&glGetMinmaxParameteriv_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameteriv' not found!`);
  glGetMinmaxParameteriv_Z(a00,a01,a02,);
}
alias glHistogram = glHistogram_Z;
__gshared glbfn_glHistogram glHistogram_Z = function void (uint a00,int a01,uint a02,ubyte a03) {
  glbfn_glHistogram_loader(a00,a01,a02,a03,);
};
private void glbfn_glHistogram_loader (uint a00,int a01,uint a02,ubyte a03) {
  *cast(void**)&glHistogram_Z = glbindGetProcAddress(`glHistogram`);
  if (*cast(void**)&glHistogram_Z is null) assert(0, `OpenGL function 'glHistogram' not found!`);
  glHistogram_Z(a00,a01,a02,a03,);
}
alias glMinmax = glMinmax_Z;
__gshared glbfn_glMinmax glMinmax_Z = function void (uint a00,uint a01,ubyte a02) {
  glbfn_glMinmax_loader(a00,a01,a02,);
};
private void glbfn_glMinmax_loader (uint a00,uint a01,ubyte a02) {
  *cast(void**)&glMinmax_Z = glbindGetProcAddress(`glMinmax`);
  if (*cast(void**)&glMinmax_Z is null) assert(0, `OpenGL function 'glMinmax' not found!`);
  glMinmax_Z(a00,a01,a02,);
}
alias glResetHistogram = glResetHistogram_Z;
__gshared glbfn_glResetHistogram glResetHistogram_Z = function void (uint a00) {
  glbfn_glResetHistogram_loader(a00,);
};
private void glbfn_glResetHistogram_loader (uint a00) {
  *cast(void**)&glResetHistogram_Z = glbindGetProcAddress(`glResetHistogram`);
  if (*cast(void**)&glResetHistogram_Z is null) assert(0, `OpenGL function 'glResetHistogram' not found!`);
  glResetHistogram_Z(a00,);
}
alias glResetMinmax = glResetMinmax_Z;
__gshared glbfn_glResetMinmax glResetMinmax_Z = function void (uint a00) {
  glbfn_glResetMinmax_loader(a00,);
};
private void glbfn_glResetMinmax_loader (uint a00) {
  *cast(void**)&glResetMinmax_Z = glbindGetProcAddress(`glResetMinmax`);
  if (*cast(void**)&glResetMinmax_Z is null) assert(0, `OpenGL function 'glResetMinmax' not found!`);
  glResetMinmax_Z(a00,);
}
alias glMultiDrawArraysIndirectCountARB = glMultiDrawArraysIndirectCountARB_Z;
__gshared glbfn_glMultiDrawArraysIndirectCountARB glMultiDrawArraysIndirectCountARB_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glMultiDrawArraysIndirectCountARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiDrawArraysIndirectCountARB_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glMultiDrawArraysIndirectCountARB_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectCountARB`);
  if (*cast(void**)&glMultiDrawArraysIndirectCountARB_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectCountARB' not found!`);
  glMultiDrawArraysIndirectCountARB_Z(a00,a01,a02,a03,a04,);
}
alias glMultiDrawElementsIndirectCountARB = glMultiDrawElementsIndirectCountARB_Z;
__gshared glbfn_glMultiDrawElementsIndirectCountARB glMultiDrawElementsIndirectCountARB_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  glbfn_glMultiDrawElementsIndirectCountARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMultiDrawElementsIndirectCountARB_loader (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glMultiDrawElementsIndirectCountARB_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectCountARB`);
  if (*cast(void**)&glMultiDrawElementsIndirectCountARB_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectCountARB' not found!`);
  glMultiDrawElementsIndirectCountARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexAttribDivisorARB = glVertexAttribDivisorARB_Z;
__gshared glbfn_glVertexAttribDivisorARB glVertexAttribDivisorARB_Z = function void (uint a00,uint a01) {
  glbfn_glVertexAttribDivisorARB_loader(a00,a01,);
};
private void glbfn_glVertexAttribDivisorARB_loader (uint a00,uint a01) {
  *cast(void**)&glVertexAttribDivisorARB_Z = glbindGetProcAddress(`glVertexAttribDivisorARB`);
  if (*cast(void**)&glVertexAttribDivisorARB_Z is null) assert(0, `OpenGL function 'glVertexAttribDivisorARB' not found!`);
  glVertexAttribDivisorARB_Z(a00,a01,);
}
alias glCurrentPaletteMatrixARB = glCurrentPaletteMatrixARB_Z;
__gshared glbfn_glCurrentPaletteMatrixARB glCurrentPaletteMatrixARB_Z = function void (int a00) {
  glbfn_glCurrentPaletteMatrixARB_loader(a00,);
};
private void glbfn_glCurrentPaletteMatrixARB_loader (int a00) {
  *cast(void**)&glCurrentPaletteMatrixARB_Z = glbindGetProcAddress(`glCurrentPaletteMatrixARB`);
  if (*cast(void**)&glCurrentPaletteMatrixARB_Z is null) assert(0, `OpenGL function 'glCurrentPaletteMatrixARB' not found!`);
  glCurrentPaletteMatrixARB_Z(a00,);
}
alias glMatrixIndexubvARB = glMatrixIndexubvARB_Z;
__gshared glbfn_glMatrixIndexubvARB glMatrixIndexubvARB_Z = function void (int a00,const(ubyte)* a01) {
  glbfn_glMatrixIndexubvARB_loader(a00,a01,);
};
private void glbfn_glMatrixIndexubvARB_loader (int a00,const(ubyte)* a01) {
  *cast(void**)&glMatrixIndexubvARB_Z = glbindGetProcAddress(`glMatrixIndexubvARB`);
  if (*cast(void**)&glMatrixIndexubvARB_Z is null) assert(0, `OpenGL function 'glMatrixIndexubvARB' not found!`);
  glMatrixIndexubvARB_Z(a00,a01,);
}
alias glMatrixIndexusvARB = glMatrixIndexusvARB_Z;
__gshared glbfn_glMatrixIndexusvARB glMatrixIndexusvARB_Z = function void (int a00,const(ushort)* a01) {
  glbfn_glMatrixIndexusvARB_loader(a00,a01,);
};
private void glbfn_glMatrixIndexusvARB_loader (int a00,const(ushort)* a01) {
  *cast(void**)&glMatrixIndexusvARB_Z = glbindGetProcAddress(`glMatrixIndexusvARB`);
  if (*cast(void**)&glMatrixIndexusvARB_Z is null) assert(0, `OpenGL function 'glMatrixIndexusvARB' not found!`);
  glMatrixIndexusvARB_Z(a00,a01,);
}
alias glMatrixIndexuivARB = glMatrixIndexuivARB_Z;
__gshared glbfn_glMatrixIndexuivARB glMatrixIndexuivARB_Z = function void (int a00,const(uint)* a01) {
  glbfn_glMatrixIndexuivARB_loader(a00,a01,);
};
private void glbfn_glMatrixIndexuivARB_loader (int a00,const(uint)* a01) {
  *cast(void**)&glMatrixIndexuivARB_Z = glbindGetProcAddress(`glMatrixIndexuivARB`);
  if (*cast(void**)&glMatrixIndexuivARB_Z is null) assert(0, `OpenGL function 'glMatrixIndexuivARB' not found!`);
  glMatrixIndexuivARB_Z(a00,a01,);
}
alias glMatrixIndexPointerARB = glMatrixIndexPointerARB_Z;
__gshared glbfn_glMatrixIndexPointerARB glMatrixIndexPointerARB_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glMatrixIndexPointerARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glMatrixIndexPointerARB_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glMatrixIndexPointerARB_Z = glbindGetProcAddress(`glMatrixIndexPointerARB`);
  if (*cast(void**)&glMatrixIndexPointerARB_Z is null) assert(0, `OpenGL function 'glMatrixIndexPointerARB' not found!`);
  glMatrixIndexPointerARB_Z(a00,a01,a02,a03,);
}
alias glSampleCoverageARB = glSampleCoverageARB_Z;
__gshared glbfn_glSampleCoverageARB glSampleCoverageARB_Z = function void (float a00,ubyte a01) {
  glbfn_glSampleCoverageARB_loader(a00,a01,);
};
private void glbfn_glSampleCoverageARB_loader (float a00,ubyte a01) {
  *cast(void**)&glSampleCoverageARB_Z = glbindGetProcAddress(`glSampleCoverageARB`);
  if (*cast(void**)&glSampleCoverageARB_Z is null) assert(0, `OpenGL function 'glSampleCoverageARB' not found!`);
  glSampleCoverageARB_Z(a00,a01,);
}
alias glActiveTextureARB = glActiveTextureARB_Z;
__gshared glbfn_glActiveTextureARB glActiveTextureARB_Z = function void (uint a00) {
  glbfn_glActiveTextureARB_loader(a00,);
};
private void glbfn_glActiveTextureARB_loader (uint a00) {
  *cast(void**)&glActiveTextureARB_Z = glbindGetProcAddress(`glActiveTextureARB`);
  if (*cast(void**)&glActiveTextureARB_Z is null) assert(0, `OpenGL function 'glActiveTextureARB' not found!`);
  glActiveTextureARB_Z(a00,);
}
alias glClientActiveTextureARB = glClientActiveTextureARB_Z;
__gshared glbfn_glClientActiveTextureARB glClientActiveTextureARB_Z = function void (uint a00) {
  glbfn_glClientActiveTextureARB_loader(a00,);
};
private void glbfn_glClientActiveTextureARB_loader (uint a00) {
  *cast(void**)&glClientActiveTextureARB_Z = glbindGetProcAddress(`glClientActiveTextureARB`);
  if (*cast(void**)&glClientActiveTextureARB_Z is null) assert(0, `OpenGL function 'glClientActiveTextureARB' not found!`);
  glClientActiveTextureARB_Z(a00,);
}
alias glMultiTexCoord1dARB = glMultiTexCoord1dARB_Z;
__gshared glbfn_glMultiTexCoord1dARB glMultiTexCoord1dARB_Z = function void (uint a00,double a01) {
  glbfn_glMultiTexCoord1dARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1dARB_loader (uint a00,double a01) {
  *cast(void**)&glMultiTexCoord1dARB_Z = glbindGetProcAddress(`glMultiTexCoord1dARB`);
  if (*cast(void**)&glMultiTexCoord1dARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1dARB' not found!`);
  glMultiTexCoord1dARB_Z(a00,a01,);
}
alias glMultiTexCoord1dvARB = glMultiTexCoord1dvARB_Z;
__gshared glbfn_glMultiTexCoord1dvARB glMultiTexCoord1dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord1dvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord1dvARB_Z = glbindGetProcAddress(`glMultiTexCoord1dvARB`);
  if (*cast(void**)&glMultiTexCoord1dvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1dvARB' not found!`);
  glMultiTexCoord1dvARB_Z(a00,a01,);
}
alias glMultiTexCoord1fARB = glMultiTexCoord1fARB_Z;
__gshared glbfn_glMultiTexCoord1fARB glMultiTexCoord1fARB_Z = function void (uint a00,float a01) {
  glbfn_glMultiTexCoord1fARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1fARB_loader (uint a00,float a01) {
  *cast(void**)&glMultiTexCoord1fARB_Z = glbindGetProcAddress(`glMultiTexCoord1fARB`);
  if (*cast(void**)&glMultiTexCoord1fARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1fARB' not found!`);
  glMultiTexCoord1fARB_Z(a00,a01,);
}
alias glMultiTexCoord1fvARB = glMultiTexCoord1fvARB_Z;
__gshared glbfn_glMultiTexCoord1fvARB glMultiTexCoord1fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord1fvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord1fvARB_Z = glbindGetProcAddress(`glMultiTexCoord1fvARB`);
  if (*cast(void**)&glMultiTexCoord1fvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1fvARB' not found!`);
  glMultiTexCoord1fvARB_Z(a00,a01,);
}
alias glMultiTexCoord1iARB = glMultiTexCoord1iARB_Z;
__gshared glbfn_glMultiTexCoord1iARB glMultiTexCoord1iARB_Z = function void (uint a00,int a01) {
  glbfn_glMultiTexCoord1iARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1iARB_loader (uint a00,int a01) {
  *cast(void**)&glMultiTexCoord1iARB_Z = glbindGetProcAddress(`glMultiTexCoord1iARB`);
  if (*cast(void**)&glMultiTexCoord1iARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1iARB' not found!`);
  glMultiTexCoord1iARB_Z(a00,a01,);
}
alias glMultiTexCoord1ivARB = glMultiTexCoord1ivARB_Z;
__gshared glbfn_glMultiTexCoord1ivARB glMultiTexCoord1ivARB_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord1ivARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1ivARB_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord1ivARB_Z = glbindGetProcAddress(`glMultiTexCoord1ivARB`);
  if (*cast(void**)&glMultiTexCoord1ivARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1ivARB' not found!`);
  glMultiTexCoord1ivARB_Z(a00,a01,);
}
alias glMultiTexCoord1sARB = glMultiTexCoord1sARB_Z;
__gshared glbfn_glMultiTexCoord1sARB glMultiTexCoord1sARB_Z = function void (uint a00,short a01) {
  glbfn_glMultiTexCoord1sARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1sARB_loader (uint a00,short a01) {
  *cast(void**)&glMultiTexCoord1sARB_Z = glbindGetProcAddress(`glMultiTexCoord1sARB`);
  if (*cast(void**)&glMultiTexCoord1sARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1sARB' not found!`);
  glMultiTexCoord1sARB_Z(a00,a01,);
}
alias glMultiTexCoord1svARB = glMultiTexCoord1svARB_Z;
__gshared glbfn_glMultiTexCoord1svARB glMultiTexCoord1svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord1svARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord1svARB_Z = glbindGetProcAddress(`glMultiTexCoord1svARB`);
  if (*cast(void**)&glMultiTexCoord1svARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1svARB' not found!`);
  glMultiTexCoord1svARB_Z(a00,a01,);
}
alias glMultiTexCoord2dARB = glMultiTexCoord2dARB_Z;
__gshared glbfn_glMultiTexCoord2dARB glMultiTexCoord2dARB_Z = function void (uint a00,double a01,double a02) {
  glbfn_glMultiTexCoord2dARB_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2dARB_loader (uint a00,double a01,double a02) {
  *cast(void**)&glMultiTexCoord2dARB_Z = glbindGetProcAddress(`glMultiTexCoord2dARB`);
  if (*cast(void**)&glMultiTexCoord2dARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2dARB' not found!`);
  glMultiTexCoord2dARB_Z(a00,a01,a02,);
}
alias glMultiTexCoord2dvARB = glMultiTexCoord2dvARB_Z;
__gshared glbfn_glMultiTexCoord2dvARB glMultiTexCoord2dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord2dvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord2dvARB_Z = glbindGetProcAddress(`glMultiTexCoord2dvARB`);
  if (*cast(void**)&glMultiTexCoord2dvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2dvARB' not found!`);
  glMultiTexCoord2dvARB_Z(a00,a01,);
}
alias glMultiTexCoord2fARB = glMultiTexCoord2fARB_Z;
__gshared glbfn_glMultiTexCoord2fARB glMultiTexCoord2fARB_Z = function void (uint a00,float a01,float a02) {
  glbfn_glMultiTexCoord2fARB_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2fARB_loader (uint a00,float a01,float a02) {
  *cast(void**)&glMultiTexCoord2fARB_Z = glbindGetProcAddress(`glMultiTexCoord2fARB`);
  if (*cast(void**)&glMultiTexCoord2fARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2fARB' not found!`);
  glMultiTexCoord2fARB_Z(a00,a01,a02,);
}
alias glMultiTexCoord2fvARB = glMultiTexCoord2fvARB_Z;
__gshared glbfn_glMultiTexCoord2fvARB glMultiTexCoord2fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord2fvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord2fvARB_Z = glbindGetProcAddress(`glMultiTexCoord2fvARB`);
  if (*cast(void**)&glMultiTexCoord2fvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2fvARB' not found!`);
  glMultiTexCoord2fvARB_Z(a00,a01,);
}
alias glMultiTexCoord2iARB = glMultiTexCoord2iARB_Z;
__gshared glbfn_glMultiTexCoord2iARB glMultiTexCoord2iARB_Z = function void (uint a00,int a01,int a02) {
  glbfn_glMultiTexCoord2iARB_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2iARB_loader (uint a00,int a01,int a02) {
  *cast(void**)&glMultiTexCoord2iARB_Z = glbindGetProcAddress(`glMultiTexCoord2iARB`);
  if (*cast(void**)&glMultiTexCoord2iARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2iARB' not found!`);
  glMultiTexCoord2iARB_Z(a00,a01,a02,);
}
alias glMultiTexCoord2ivARB = glMultiTexCoord2ivARB_Z;
__gshared glbfn_glMultiTexCoord2ivARB glMultiTexCoord2ivARB_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord2ivARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2ivARB_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord2ivARB_Z = glbindGetProcAddress(`glMultiTexCoord2ivARB`);
  if (*cast(void**)&glMultiTexCoord2ivARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2ivARB' not found!`);
  glMultiTexCoord2ivARB_Z(a00,a01,);
}
alias glMultiTexCoord2sARB = glMultiTexCoord2sARB_Z;
__gshared glbfn_glMultiTexCoord2sARB glMultiTexCoord2sARB_Z = function void (uint a00,short a01,short a02) {
  glbfn_glMultiTexCoord2sARB_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2sARB_loader (uint a00,short a01,short a02) {
  *cast(void**)&glMultiTexCoord2sARB_Z = glbindGetProcAddress(`glMultiTexCoord2sARB`);
  if (*cast(void**)&glMultiTexCoord2sARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2sARB' not found!`);
  glMultiTexCoord2sARB_Z(a00,a01,a02,);
}
alias glMultiTexCoord2svARB = glMultiTexCoord2svARB_Z;
__gshared glbfn_glMultiTexCoord2svARB glMultiTexCoord2svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord2svARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord2svARB_Z = glbindGetProcAddress(`glMultiTexCoord2svARB`);
  if (*cast(void**)&glMultiTexCoord2svARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2svARB' not found!`);
  glMultiTexCoord2svARB_Z(a00,a01,);
}
alias glMultiTexCoord3dARB = glMultiTexCoord3dARB_Z;
__gshared glbfn_glMultiTexCoord3dARB glMultiTexCoord3dARB_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glMultiTexCoord3dARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3dARB_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glMultiTexCoord3dARB_Z = glbindGetProcAddress(`glMultiTexCoord3dARB`);
  if (*cast(void**)&glMultiTexCoord3dARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3dARB' not found!`);
  glMultiTexCoord3dARB_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3dvARB = glMultiTexCoord3dvARB_Z;
__gshared glbfn_glMultiTexCoord3dvARB glMultiTexCoord3dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord3dvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord3dvARB_Z = glbindGetProcAddress(`glMultiTexCoord3dvARB`);
  if (*cast(void**)&glMultiTexCoord3dvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3dvARB' not found!`);
  glMultiTexCoord3dvARB_Z(a00,a01,);
}
alias glMultiTexCoord3fARB = glMultiTexCoord3fARB_Z;
__gshared glbfn_glMultiTexCoord3fARB glMultiTexCoord3fARB_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glMultiTexCoord3fARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3fARB_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glMultiTexCoord3fARB_Z = glbindGetProcAddress(`glMultiTexCoord3fARB`);
  if (*cast(void**)&glMultiTexCoord3fARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3fARB' not found!`);
  glMultiTexCoord3fARB_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3fvARB = glMultiTexCoord3fvARB_Z;
__gshared glbfn_glMultiTexCoord3fvARB glMultiTexCoord3fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord3fvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord3fvARB_Z = glbindGetProcAddress(`glMultiTexCoord3fvARB`);
  if (*cast(void**)&glMultiTexCoord3fvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3fvARB' not found!`);
  glMultiTexCoord3fvARB_Z(a00,a01,);
}
alias glMultiTexCoord3iARB = glMultiTexCoord3iARB_Z;
__gshared glbfn_glMultiTexCoord3iARB glMultiTexCoord3iARB_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glMultiTexCoord3iARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3iARB_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glMultiTexCoord3iARB_Z = glbindGetProcAddress(`glMultiTexCoord3iARB`);
  if (*cast(void**)&glMultiTexCoord3iARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3iARB' not found!`);
  glMultiTexCoord3iARB_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3ivARB = glMultiTexCoord3ivARB_Z;
__gshared glbfn_glMultiTexCoord3ivARB glMultiTexCoord3ivARB_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord3ivARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3ivARB_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord3ivARB_Z = glbindGetProcAddress(`glMultiTexCoord3ivARB`);
  if (*cast(void**)&glMultiTexCoord3ivARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3ivARB' not found!`);
  glMultiTexCoord3ivARB_Z(a00,a01,);
}
alias glMultiTexCoord3sARB = glMultiTexCoord3sARB_Z;
__gshared glbfn_glMultiTexCoord3sARB glMultiTexCoord3sARB_Z = function void (uint a00,short a01,short a02,short a03) {
  glbfn_glMultiTexCoord3sARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3sARB_loader (uint a00,short a01,short a02,short a03) {
  *cast(void**)&glMultiTexCoord3sARB_Z = glbindGetProcAddress(`glMultiTexCoord3sARB`);
  if (*cast(void**)&glMultiTexCoord3sARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3sARB' not found!`);
  glMultiTexCoord3sARB_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3svARB = glMultiTexCoord3svARB_Z;
__gshared glbfn_glMultiTexCoord3svARB glMultiTexCoord3svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord3svARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord3svARB_Z = glbindGetProcAddress(`glMultiTexCoord3svARB`);
  if (*cast(void**)&glMultiTexCoord3svARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3svARB' not found!`);
  glMultiTexCoord3svARB_Z(a00,a01,);
}
alias glMultiTexCoord4dARB = glMultiTexCoord4dARB_Z;
__gshared glbfn_glMultiTexCoord4dARB glMultiTexCoord4dARB_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glMultiTexCoord4dARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4dARB_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glMultiTexCoord4dARB_Z = glbindGetProcAddress(`glMultiTexCoord4dARB`);
  if (*cast(void**)&glMultiTexCoord4dARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4dARB' not found!`);
  glMultiTexCoord4dARB_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4dvARB = glMultiTexCoord4dvARB_Z;
__gshared glbfn_glMultiTexCoord4dvARB glMultiTexCoord4dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMultiTexCoord4dvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMultiTexCoord4dvARB_Z = glbindGetProcAddress(`glMultiTexCoord4dvARB`);
  if (*cast(void**)&glMultiTexCoord4dvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4dvARB' not found!`);
  glMultiTexCoord4dvARB_Z(a00,a01,);
}
alias glMultiTexCoord4fARB = glMultiTexCoord4fARB_Z;
__gshared glbfn_glMultiTexCoord4fARB glMultiTexCoord4fARB_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glMultiTexCoord4fARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4fARB_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glMultiTexCoord4fARB_Z = glbindGetProcAddress(`glMultiTexCoord4fARB`);
  if (*cast(void**)&glMultiTexCoord4fARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4fARB' not found!`);
  glMultiTexCoord4fARB_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4fvARB = glMultiTexCoord4fvARB_Z;
__gshared glbfn_glMultiTexCoord4fvARB glMultiTexCoord4fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMultiTexCoord4fvARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMultiTexCoord4fvARB_Z = glbindGetProcAddress(`glMultiTexCoord4fvARB`);
  if (*cast(void**)&glMultiTexCoord4fvARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4fvARB' not found!`);
  glMultiTexCoord4fvARB_Z(a00,a01,);
}
alias glMultiTexCoord4iARB = glMultiTexCoord4iARB_Z;
__gshared glbfn_glMultiTexCoord4iARB glMultiTexCoord4iARB_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glMultiTexCoord4iARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4iARB_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glMultiTexCoord4iARB_Z = glbindGetProcAddress(`glMultiTexCoord4iARB`);
  if (*cast(void**)&glMultiTexCoord4iARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4iARB' not found!`);
  glMultiTexCoord4iARB_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4ivARB = glMultiTexCoord4ivARB_Z;
__gshared glbfn_glMultiTexCoord4ivARB glMultiTexCoord4ivARB_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord4ivARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4ivARB_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord4ivARB_Z = glbindGetProcAddress(`glMultiTexCoord4ivARB`);
  if (*cast(void**)&glMultiTexCoord4ivARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4ivARB' not found!`);
  glMultiTexCoord4ivARB_Z(a00,a01,);
}
alias glMultiTexCoord4sARB = glMultiTexCoord4sARB_Z;
__gshared glbfn_glMultiTexCoord4sARB glMultiTexCoord4sARB_Z = function void (uint a00,short a01,short a02,short a03,short a04) {
  glbfn_glMultiTexCoord4sARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4sARB_loader (uint a00,short a01,short a02,short a03,short a04) {
  *cast(void**)&glMultiTexCoord4sARB_Z = glbindGetProcAddress(`glMultiTexCoord4sARB`);
  if (*cast(void**)&glMultiTexCoord4sARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4sARB' not found!`);
  glMultiTexCoord4sARB_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4svARB = glMultiTexCoord4svARB_Z;
__gshared glbfn_glMultiTexCoord4svARB glMultiTexCoord4svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glMultiTexCoord4svARB_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glMultiTexCoord4svARB_Z = glbindGetProcAddress(`glMultiTexCoord4svARB`);
  if (*cast(void**)&glMultiTexCoord4svARB_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4svARB' not found!`);
  glMultiTexCoord4svARB_Z(a00,a01,);
}
alias glGenQueriesARB = glGenQueriesARB_Z;
__gshared glbfn_glGenQueriesARB glGenQueriesARB_Z = function void (int a00,uint* a01) {
  glbfn_glGenQueriesARB_loader(a00,a01,);
};
private void glbfn_glGenQueriesARB_loader (int a00,uint* a01) {
  *cast(void**)&glGenQueriesARB_Z = glbindGetProcAddress(`glGenQueriesARB`);
  if (*cast(void**)&glGenQueriesARB_Z is null) assert(0, `OpenGL function 'glGenQueriesARB' not found!`);
  glGenQueriesARB_Z(a00,a01,);
}
alias glDeleteQueriesARB = glDeleteQueriesARB_Z;
__gshared glbfn_glDeleteQueriesARB glDeleteQueriesARB_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteQueriesARB_loader(a00,a01,);
};
private void glbfn_glDeleteQueriesARB_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteQueriesARB_Z = glbindGetProcAddress(`glDeleteQueriesARB`);
  if (*cast(void**)&glDeleteQueriesARB_Z is null) assert(0, `OpenGL function 'glDeleteQueriesARB' not found!`);
  glDeleteQueriesARB_Z(a00,a01,);
}
alias glIsQueryARB = glIsQueryARB_Z;
__gshared glbfn_glIsQueryARB glIsQueryARB_Z = function ubyte (uint a00) {
  return glbfn_glIsQueryARB_loader(a00,);
};
private ubyte glbfn_glIsQueryARB_loader (uint a00) {
  *cast(void**)&glIsQueryARB_Z = glbindGetProcAddress(`glIsQueryARB`);
  if (*cast(void**)&glIsQueryARB_Z is null) assert(0, `OpenGL function 'glIsQueryARB' not found!`);
  return glIsQueryARB_Z(a00,);
}
alias glBeginQueryARB = glBeginQueryARB_Z;
__gshared glbfn_glBeginQueryARB glBeginQueryARB_Z = function void (uint a00,uint a01) {
  glbfn_glBeginQueryARB_loader(a00,a01,);
};
private void glbfn_glBeginQueryARB_loader (uint a00,uint a01) {
  *cast(void**)&glBeginQueryARB_Z = glbindGetProcAddress(`glBeginQueryARB`);
  if (*cast(void**)&glBeginQueryARB_Z is null) assert(0, `OpenGL function 'glBeginQueryARB' not found!`);
  glBeginQueryARB_Z(a00,a01,);
}
alias glEndQueryARB = glEndQueryARB_Z;
__gshared glbfn_glEndQueryARB glEndQueryARB_Z = function void (uint a00) {
  glbfn_glEndQueryARB_loader(a00,);
};
private void glbfn_glEndQueryARB_loader (uint a00) {
  *cast(void**)&glEndQueryARB_Z = glbindGetProcAddress(`glEndQueryARB`);
  if (*cast(void**)&glEndQueryARB_Z is null) assert(0, `OpenGL function 'glEndQueryARB' not found!`);
  glEndQueryARB_Z(a00,);
}
alias glGetQueryivARB = glGetQueryivARB_Z;
__gshared glbfn_glGetQueryivARB glGetQueryivARB_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetQueryivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryivARB_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetQueryivARB_Z = glbindGetProcAddress(`glGetQueryivARB`);
  if (*cast(void**)&glGetQueryivARB_Z is null) assert(0, `OpenGL function 'glGetQueryivARB' not found!`);
  glGetQueryivARB_Z(a00,a01,a02,);
}
alias glGetQueryObjectivARB = glGetQueryObjectivARB_Z;
__gshared glbfn_glGetQueryObjectivARB glGetQueryObjectivARB_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetQueryObjectivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjectivARB_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetQueryObjectivARB_Z = glbindGetProcAddress(`glGetQueryObjectivARB`);
  if (*cast(void**)&glGetQueryObjectivARB_Z is null) assert(0, `OpenGL function 'glGetQueryObjectivARB' not found!`);
  glGetQueryObjectivARB_Z(a00,a01,a02,);
}
alias glGetQueryObjectuivARB = glGetQueryObjectuivARB_Z;
__gshared glbfn_glGetQueryObjectuivARB glGetQueryObjectuivARB_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetQueryObjectuivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjectuivARB_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetQueryObjectuivARB_Z = glbindGetProcAddress(`glGetQueryObjectuivARB`);
  if (*cast(void**)&glGetQueryObjectuivARB_Z is null) assert(0, `OpenGL function 'glGetQueryObjectuivARB' not found!`);
  glGetQueryObjectuivARB_Z(a00,a01,a02,);
}
alias glMaxShaderCompilerThreadsARB = glMaxShaderCompilerThreadsARB_Z;
__gshared glbfn_glMaxShaderCompilerThreadsARB glMaxShaderCompilerThreadsARB_Z = function void (uint a00) {
  glbfn_glMaxShaderCompilerThreadsARB_loader(a00,);
};
private void glbfn_glMaxShaderCompilerThreadsARB_loader (uint a00) {
  *cast(void**)&glMaxShaderCompilerThreadsARB_Z = glbindGetProcAddress(`glMaxShaderCompilerThreadsARB`);
  if (*cast(void**)&glMaxShaderCompilerThreadsARB_Z is null) assert(0, `OpenGL function 'glMaxShaderCompilerThreadsARB' not found!`);
  glMaxShaderCompilerThreadsARB_Z(a00,);
}
alias glPointParameterfARB = glPointParameterfARB_Z;
__gshared glbfn_glPointParameterfARB glPointParameterfARB_Z = function void (uint a00,float a01) {
  glbfn_glPointParameterfARB_loader(a00,a01,);
};
private void glbfn_glPointParameterfARB_loader (uint a00,float a01) {
  *cast(void**)&glPointParameterfARB_Z = glbindGetProcAddress(`glPointParameterfARB`);
  if (*cast(void**)&glPointParameterfARB_Z is null) assert(0, `OpenGL function 'glPointParameterfARB' not found!`);
  glPointParameterfARB_Z(a00,a01,);
}
alias glPointParameterfvARB = glPointParameterfvARB_Z;
__gshared glbfn_glPointParameterfvARB glPointParameterfvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glPointParameterfvARB_loader(a00,a01,);
};
private void glbfn_glPointParameterfvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glPointParameterfvARB_Z = glbindGetProcAddress(`glPointParameterfvARB`);
  if (*cast(void**)&glPointParameterfvARB_Z is null) assert(0, `OpenGL function 'glPointParameterfvARB' not found!`);
  glPointParameterfvARB_Z(a00,a01,);
}
alias glGetGraphicsResetStatusARB = glGetGraphicsResetStatusARB_Z;
__gshared glbfn_glGetGraphicsResetStatusARB glGetGraphicsResetStatusARB_Z = function uint () {
  return glbfn_glGetGraphicsResetStatusARB_loader();
};
private uint glbfn_glGetGraphicsResetStatusARB_loader () {
  *cast(void**)&glGetGraphicsResetStatusARB_Z = glbindGetProcAddress(`glGetGraphicsResetStatusARB`);
  if (*cast(void**)&glGetGraphicsResetStatusARB_Z is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusARB' not found!`);
  return glGetGraphicsResetStatusARB_Z();
}
alias glGetnTexImageARB = glGetnTexImageARB_Z;
__gshared glbfn_glGetnTexImageARB glGetnTexImageARB_Z = function void (uint a00,int a01,uint a02,uint a03,int a04,void* a05) {
  glbfn_glGetnTexImageARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetnTexImageARB_loader (uint a00,int a01,uint a02,uint a03,int a04,void* a05) {
  *cast(void**)&glGetnTexImageARB_Z = glbindGetProcAddress(`glGetnTexImageARB`);
  if (*cast(void**)&glGetnTexImageARB_Z is null) assert(0, `OpenGL function 'glGetnTexImageARB' not found!`);
  glGetnTexImageARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glReadnPixelsARB = glReadnPixelsARB_Z;
__gshared glbfn_glReadnPixelsARB glReadnPixelsARB_Z = function void (int a00,int a01,int a02,int a03,uint a04,uint a05,int a06,void* a07) {
  glbfn_glReadnPixelsARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glReadnPixelsARB_loader (int a00,int a01,int a02,int a03,uint a04,uint a05,int a06,void* a07) {
  *cast(void**)&glReadnPixelsARB_Z = glbindGetProcAddress(`glReadnPixelsARB`);
  if (*cast(void**)&glReadnPixelsARB_Z is null) assert(0, `OpenGL function 'glReadnPixelsARB' not found!`);
  glReadnPixelsARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetnCompressedTexImageARB = glGetnCompressedTexImageARB_Z;
__gshared glbfn_glGetnCompressedTexImageARB glGetnCompressedTexImageARB_Z = function void (uint a00,int a01,int a02,void* a03) {
  glbfn_glGetnCompressedTexImageARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnCompressedTexImageARB_loader (uint a00,int a01,int a02,void* a03) {
  *cast(void**)&glGetnCompressedTexImageARB_Z = glbindGetProcAddress(`glGetnCompressedTexImageARB`);
  if (*cast(void**)&glGetnCompressedTexImageARB_Z is null) assert(0, `OpenGL function 'glGetnCompressedTexImageARB' not found!`);
  glGetnCompressedTexImageARB_Z(a00,a01,a02,a03,);
}
alias glGetnUniformfvARB = glGetnUniformfvARB_Z;
__gshared glbfn_glGetnUniformfvARB glGetnUniformfvARB_Z = function void (uint a00,int a01,int a02,float* a03) {
  glbfn_glGetnUniformfvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformfvARB_loader (uint a00,int a01,int a02,float* a03) {
  *cast(void**)&glGetnUniformfvARB_Z = glbindGetProcAddress(`glGetnUniformfvARB`);
  if (*cast(void**)&glGetnUniformfvARB_Z is null) assert(0, `OpenGL function 'glGetnUniformfvARB' not found!`);
  glGetnUniformfvARB_Z(a00,a01,a02,a03,);
}
alias glGetnUniformivARB = glGetnUniformivARB_Z;
__gshared glbfn_glGetnUniformivARB glGetnUniformivARB_Z = function void (uint a00,int a01,int a02,int* a03) {
  glbfn_glGetnUniformivARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformivARB_loader (uint a00,int a01,int a02,int* a03) {
  *cast(void**)&glGetnUniformivARB_Z = glbindGetProcAddress(`glGetnUniformivARB`);
  if (*cast(void**)&glGetnUniformivARB_Z is null) assert(0, `OpenGL function 'glGetnUniformivARB' not found!`);
  glGetnUniformivARB_Z(a00,a01,a02,a03,);
}
alias glGetnUniformuivARB = glGetnUniformuivARB_Z;
__gshared glbfn_glGetnUniformuivARB glGetnUniformuivARB_Z = function void (uint a00,int a01,int a02,uint* a03) {
  glbfn_glGetnUniformuivARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformuivARB_loader (uint a00,int a01,int a02,uint* a03) {
  *cast(void**)&glGetnUniformuivARB_Z = glbindGetProcAddress(`glGetnUniformuivARB`);
  if (*cast(void**)&glGetnUniformuivARB_Z is null) assert(0, `OpenGL function 'glGetnUniformuivARB' not found!`);
  glGetnUniformuivARB_Z(a00,a01,a02,a03,);
}
alias glGetnUniformdvARB = glGetnUniformdvARB_Z;
__gshared glbfn_glGetnUniformdvARB glGetnUniformdvARB_Z = function void (uint a00,int a01,int a02,double* a03) {
  glbfn_glGetnUniformdvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformdvARB_loader (uint a00,int a01,int a02,double* a03) {
  *cast(void**)&glGetnUniformdvARB_Z = glbindGetProcAddress(`glGetnUniformdvARB`);
  if (*cast(void**)&glGetnUniformdvARB_Z is null) assert(0, `OpenGL function 'glGetnUniformdvARB' not found!`);
  glGetnUniformdvARB_Z(a00,a01,a02,a03,);
}
alias glGetnMapdvARB = glGetnMapdvARB_Z;
__gshared glbfn_glGetnMapdvARB glGetnMapdvARB_Z = function void (uint a00,uint a01,int a02,double* a03) {
  glbfn_glGetnMapdvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnMapdvARB_loader (uint a00,uint a01,int a02,double* a03) {
  *cast(void**)&glGetnMapdvARB_Z = glbindGetProcAddress(`glGetnMapdvARB`);
  if (*cast(void**)&glGetnMapdvARB_Z is null) assert(0, `OpenGL function 'glGetnMapdvARB' not found!`);
  glGetnMapdvARB_Z(a00,a01,a02,a03,);
}
alias glGetnMapfvARB = glGetnMapfvARB_Z;
__gshared glbfn_glGetnMapfvARB glGetnMapfvARB_Z = function void (uint a00,uint a01,int a02,float* a03) {
  glbfn_glGetnMapfvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnMapfvARB_loader (uint a00,uint a01,int a02,float* a03) {
  *cast(void**)&glGetnMapfvARB_Z = glbindGetProcAddress(`glGetnMapfvARB`);
  if (*cast(void**)&glGetnMapfvARB_Z is null) assert(0, `OpenGL function 'glGetnMapfvARB' not found!`);
  glGetnMapfvARB_Z(a00,a01,a02,a03,);
}
alias glGetnMapivARB = glGetnMapivARB_Z;
__gshared glbfn_glGetnMapivARB glGetnMapivARB_Z = function void (uint a00,uint a01,int a02,int* a03) {
  glbfn_glGetnMapivARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnMapivARB_loader (uint a00,uint a01,int a02,int* a03) {
  *cast(void**)&glGetnMapivARB_Z = glbindGetProcAddress(`glGetnMapivARB`);
  if (*cast(void**)&glGetnMapivARB_Z is null) assert(0, `OpenGL function 'glGetnMapivARB' not found!`);
  glGetnMapivARB_Z(a00,a01,a02,a03,);
}
alias glGetnPixelMapfvARB = glGetnPixelMapfvARB_Z;
__gshared glbfn_glGetnPixelMapfvARB glGetnPixelMapfvARB_Z = function void (uint a00,int a01,float* a02) {
  glbfn_glGetnPixelMapfvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetnPixelMapfvARB_loader (uint a00,int a01,float* a02) {
  *cast(void**)&glGetnPixelMapfvARB_Z = glbindGetProcAddress(`glGetnPixelMapfvARB`);
  if (*cast(void**)&glGetnPixelMapfvARB_Z is null) assert(0, `OpenGL function 'glGetnPixelMapfvARB' not found!`);
  glGetnPixelMapfvARB_Z(a00,a01,a02,);
}
alias glGetnPixelMapuivARB = glGetnPixelMapuivARB_Z;
__gshared glbfn_glGetnPixelMapuivARB glGetnPixelMapuivARB_Z = function void (uint a00,int a01,uint* a02) {
  glbfn_glGetnPixelMapuivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetnPixelMapuivARB_loader (uint a00,int a01,uint* a02) {
  *cast(void**)&glGetnPixelMapuivARB_Z = glbindGetProcAddress(`glGetnPixelMapuivARB`);
  if (*cast(void**)&glGetnPixelMapuivARB_Z is null) assert(0, `OpenGL function 'glGetnPixelMapuivARB' not found!`);
  glGetnPixelMapuivARB_Z(a00,a01,a02,);
}
alias glGetnPixelMapusvARB = glGetnPixelMapusvARB_Z;
__gshared glbfn_glGetnPixelMapusvARB glGetnPixelMapusvARB_Z = function void (uint a00,int a01,ushort* a02) {
  glbfn_glGetnPixelMapusvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetnPixelMapusvARB_loader (uint a00,int a01,ushort* a02) {
  *cast(void**)&glGetnPixelMapusvARB_Z = glbindGetProcAddress(`glGetnPixelMapusvARB`);
  if (*cast(void**)&glGetnPixelMapusvARB_Z is null) assert(0, `OpenGL function 'glGetnPixelMapusvARB' not found!`);
  glGetnPixelMapusvARB_Z(a00,a01,a02,);
}
alias glGetnPolygonStippleARB = glGetnPolygonStippleARB_Z;
__gshared glbfn_glGetnPolygonStippleARB glGetnPolygonStippleARB_Z = function void (int a00,ubyte* a01) {
  glbfn_glGetnPolygonStippleARB_loader(a00,a01,);
};
private void glbfn_glGetnPolygonStippleARB_loader (int a00,ubyte* a01) {
  *cast(void**)&glGetnPolygonStippleARB_Z = glbindGetProcAddress(`glGetnPolygonStippleARB`);
  if (*cast(void**)&glGetnPolygonStippleARB_Z is null) assert(0, `OpenGL function 'glGetnPolygonStippleARB' not found!`);
  glGetnPolygonStippleARB_Z(a00,a01,);
}
alias glGetnColorTableARB = glGetnColorTableARB_Z;
__gshared glbfn_glGetnColorTableARB glGetnColorTableARB_Z = function void (uint a00,uint a01,uint a02,int a03,void* a04) {
  glbfn_glGetnColorTableARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetnColorTableARB_loader (uint a00,uint a01,uint a02,int a03,void* a04) {
  *cast(void**)&glGetnColorTableARB_Z = glbindGetProcAddress(`glGetnColorTableARB`);
  if (*cast(void**)&glGetnColorTableARB_Z is null) assert(0, `OpenGL function 'glGetnColorTableARB' not found!`);
  glGetnColorTableARB_Z(a00,a01,a02,a03,a04,);
}
alias glGetnConvolutionFilterARB = glGetnConvolutionFilterARB_Z;
__gshared glbfn_glGetnConvolutionFilterARB glGetnConvolutionFilterARB_Z = function void (uint a00,uint a01,uint a02,int a03,void* a04) {
  glbfn_glGetnConvolutionFilterARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetnConvolutionFilterARB_loader (uint a00,uint a01,uint a02,int a03,void* a04) {
  *cast(void**)&glGetnConvolutionFilterARB_Z = glbindGetProcAddress(`glGetnConvolutionFilterARB`);
  if (*cast(void**)&glGetnConvolutionFilterARB_Z is null) assert(0, `OpenGL function 'glGetnConvolutionFilterARB' not found!`);
  glGetnConvolutionFilterARB_Z(a00,a01,a02,a03,a04,);
}
alias glGetnSeparableFilterARB = glGetnSeparableFilterARB_Z;
__gshared glbfn_glGetnSeparableFilterARB glGetnSeparableFilterARB_Z = function void (uint a00,uint a01,uint a02,int a03,void* a04,int a05,void* a06,void* a07) {
  glbfn_glGetnSeparableFilterARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glGetnSeparableFilterARB_loader (uint a00,uint a01,uint a02,int a03,void* a04,int a05,void* a06,void* a07) {
  *cast(void**)&glGetnSeparableFilterARB_Z = glbindGetProcAddress(`glGetnSeparableFilterARB`);
  if (*cast(void**)&glGetnSeparableFilterARB_Z is null) assert(0, `OpenGL function 'glGetnSeparableFilterARB' not found!`);
  glGetnSeparableFilterARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetnHistogramARB = glGetnHistogramARB_Z;
__gshared glbfn_glGetnHistogramARB glGetnHistogramARB_Z = function void (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  glbfn_glGetnHistogramARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetnHistogramARB_loader (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  *cast(void**)&glGetnHistogramARB_Z = glbindGetProcAddress(`glGetnHistogramARB`);
  if (*cast(void**)&glGetnHistogramARB_Z is null) assert(0, `OpenGL function 'glGetnHistogramARB' not found!`);
  glGetnHistogramARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetnMinmaxARB = glGetnMinmaxARB_Z;
__gshared glbfn_glGetnMinmaxARB glGetnMinmaxARB_Z = function void (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  glbfn_glGetnMinmaxARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetnMinmaxARB_loader (uint a00,ubyte a01,uint a02,uint a03,int a04,void* a05) {
  *cast(void**)&glGetnMinmaxARB_Z = glbindGetProcAddress(`glGetnMinmaxARB`);
  if (*cast(void**)&glGetnMinmaxARB_Z is null) assert(0, `OpenGL function 'glGetnMinmaxARB' not found!`);
  glGetnMinmaxARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glFramebufferSampleLocationsfvARB = glFramebufferSampleLocationsfvARB_Z;
__gshared glbfn_glFramebufferSampleLocationsfvARB glFramebufferSampleLocationsfvARB_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glFramebufferSampleLocationsfvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glFramebufferSampleLocationsfvARB_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glFramebufferSampleLocationsfvARB_Z = glbindGetProcAddress(`glFramebufferSampleLocationsfvARB`);
  if (*cast(void**)&glFramebufferSampleLocationsfvARB_Z is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvARB' not found!`);
  glFramebufferSampleLocationsfvARB_Z(a00,a01,a02,a03,);
}
alias glNamedFramebufferSampleLocationsfvARB = glNamedFramebufferSampleLocationsfvARB_Z;
__gshared glbfn_glNamedFramebufferSampleLocationsfvARB glNamedFramebufferSampleLocationsfvARB_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glNamedFramebufferSampleLocationsfvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedFramebufferSampleLocationsfvARB_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glNamedFramebufferSampleLocationsfvARB_Z = glbindGetProcAddress(`glNamedFramebufferSampleLocationsfvARB`);
  if (*cast(void**)&glNamedFramebufferSampleLocationsfvARB_Z is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvARB' not found!`);
  glNamedFramebufferSampleLocationsfvARB_Z(a00,a01,a02,a03,);
}
alias glEvaluateDepthValuesARB = glEvaluateDepthValuesARB_Z;
__gshared glbfn_glEvaluateDepthValuesARB glEvaluateDepthValuesARB_Z = function void () {
  glbfn_glEvaluateDepthValuesARB_loader();
};
private void glbfn_glEvaluateDepthValuesARB_loader () {
  *cast(void**)&glEvaluateDepthValuesARB_Z = glbindGetProcAddress(`glEvaluateDepthValuesARB`);
  if (*cast(void**)&glEvaluateDepthValuesARB_Z is null) assert(0, `OpenGL function 'glEvaluateDepthValuesARB' not found!`);
  glEvaluateDepthValuesARB_Z();
}
alias glMinSampleShadingARB = glMinSampleShadingARB_Z;
__gshared glbfn_glMinSampleShadingARB glMinSampleShadingARB_Z = function void (float a00) {
  glbfn_glMinSampleShadingARB_loader(a00,);
};
private void glbfn_glMinSampleShadingARB_loader (float a00) {
  *cast(void**)&glMinSampleShadingARB_Z = glbindGetProcAddress(`glMinSampleShadingARB`);
  if (*cast(void**)&glMinSampleShadingARB_Z is null) assert(0, `OpenGL function 'glMinSampleShadingARB' not found!`);
  glMinSampleShadingARB_Z(a00,);
}
alias glDeleteObjectARB = glDeleteObjectARB_Z;
__gshared glbfn_glDeleteObjectARB glDeleteObjectARB_Z = function void (uint a00) {
  glbfn_glDeleteObjectARB_loader(a00,);
};
private void glbfn_glDeleteObjectARB_loader (uint a00) {
  *cast(void**)&glDeleteObjectARB_Z = glbindGetProcAddress(`glDeleteObjectARB`);
  if (*cast(void**)&glDeleteObjectARB_Z is null) assert(0, `OpenGL function 'glDeleteObjectARB' not found!`);
  glDeleteObjectARB_Z(a00,);
}
alias glGetHandleARB = glGetHandleARB_Z;
__gshared glbfn_glGetHandleARB glGetHandleARB_Z = function uint (uint a00) {
  return glbfn_glGetHandleARB_loader(a00,);
};
private uint glbfn_glGetHandleARB_loader (uint a00) {
  *cast(void**)&glGetHandleARB_Z = glbindGetProcAddress(`glGetHandleARB`);
  if (*cast(void**)&glGetHandleARB_Z is null) assert(0, `OpenGL function 'glGetHandleARB' not found!`);
  return glGetHandleARB_Z(a00,);
}
alias glDetachObjectARB = glDetachObjectARB_Z;
__gshared glbfn_glDetachObjectARB glDetachObjectARB_Z = function void (uint a00,uint a01) {
  glbfn_glDetachObjectARB_loader(a00,a01,);
};
private void glbfn_glDetachObjectARB_loader (uint a00,uint a01) {
  *cast(void**)&glDetachObjectARB_Z = glbindGetProcAddress(`glDetachObjectARB`);
  if (*cast(void**)&glDetachObjectARB_Z is null) assert(0, `OpenGL function 'glDetachObjectARB' not found!`);
  glDetachObjectARB_Z(a00,a01,);
}
alias glCreateShaderObjectARB = glCreateShaderObjectARB_Z;
__gshared glbfn_glCreateShaderObjectARB glCreateShaderObjectARB_Z = function uint (uint a00) {
  return glbfn_glCreateShaderObjectARB_loader(a00,);
};
private uint glbfn_glCreateShaderObjectARB_loader (uint a00) {
  *cast(void**)&glCreateShaderObjectARB_Z = glbindGetProcAddress(`glCreateShaderObjectARB`);
  if (*cast(void**)&glCreateShaderObjectARB_Z is null) assert(0, `OpenGL function 'glCreateShaderObjectARB' not found!`);
  return glCreateShaderObjectARB_Z(a00,);
}
alias glShaderSourceARB = glShaderSourceARB_Z;
__gshared glbfn_glShaderSourceARB glShaderSourceARB_Z = function void (uint a00,int a01,const(byte*)* a02,const(int)* a03) {
  glbfn_glShaderSourceARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glShaderSourceARB_loader (uint a00,int a01,const(byte*)* a02,const(int)* a03) {
  *cast(void**)&glShaderSourceARB_Z = glbindGetProcAddress(`glShaderSourceARB`);
  if (*cast(void**)&glShaderSourceARB_Z is null) assert(0, `OpenGL function 'glShaderSourceARB' not found!`);
  glShaderSourceARB_Z(a00,a01,a02,a03,);
}
alias glCompileShaderARB = glCompileShaderARB_Z;
__gshared glbfn_glCompileShaderARB glCompileShaderARB_Z = function void (uint a00) {
  glbfn_glCompileShaderARB_loader(a00,);
};
private void glbfn_glCompileShaderARB_loader (uint a00) {
  *cast(void**)&glCompileShaderARB_Z = glbindGetProcAddress(`glCompileShaderARB`);
  if (*cast(void**)&glCompileShaderARB_Z is null) assert(0, `OpenGL function 'glCompileShaderARB' not found!`);
  glCompileShaderARB_Z(a00,);
}
alias glCreateProgramObjectARB = glCreateProgramObjectARB_Z;
__gshared glbfn_glCreateProgramObjectARB glCreateProgramObjectARB_Z = function uint () {
  return glbfn_glCreateProgramObjectARB_loader();
};
private uint glbfn_glCreateProgramObjectARB_loader () {
  *cast(void**)&glCreateProgramObjectARB_Z = glbindGetProcAddress(`glCreateProgramObjectARB`);
  if (*cast(void**)&glCreateProgramObjectARB_Z is null) assert(0, `OpenGL function 'glCreateProgramObjectARB' not found!`);
  return glCreateProgramObjectARB_Z();
}
alias glAttachObjectARB = glAttachObjectARB_Z;
__gshared glbfn_glAttachObjectARB glAttachObjectARB_Z = function void (uint a00,uint a01) {
  glbfn_glAttachObjectARB_loader(a00,a01,);
};
private void glbfn_glAttachObjectARB_loader (uint a00,uint a01) {
  *cast(void**)&glAttachObjectARB_Z = glbindGetProcAddress(`glAttachObjectARB`);
  if (*cast(void**)&glAttachObjectARB_Z is null) assert(0, `OpenGL function 'glAttachObjectARB' not found!`);
  glAttachObjectARB_Z(a00,a01,);
}
alias glLinkProgramARB = glLinkProgramARB_Z;
__gshared glbfn_glLinkProgramARB glLinkProgramARB_Z = function void (uint a00) {
  glbfn_glLinkProgramARB_loader(a00,);
};
private void glbfn_glLinkProgramARB_loader (uint a00) {
  *cast(void**)&glLinkProgramARB_Z = glbindGetProcAddress(`glLinkProgramARB`);
  if (*cast(void**)&glLinkProgramARB_Z is null) assert(0, `OpenGL function 'glLinkProgramARB' not found!`);
  glLinkProgramARB_Z(a00,);
}
alias glUseProgramObjectARB = glUseProgramObjectARB_Z;
__gshared glbfn_glUseProgramObjectARB glUseProgramObjectARB_Z = function void (uint a00) {
  glbfn_glUseProgramObjectARB_loader(a00,);
};
private void glbfn_glUseProgramObjectARB_loader (uint a00) {
  *cast(void**)&glUseProgramObjectARB_Z = glbindGetProcAddress(`glUseProgramObjectARB`);
  if (*cast(void**)&glUseProgramObjectARB_Z is null) assert(0, `OpenGL function 'glUseProgramObjectARB' not found!`);
  glUseProgramObjectARB_Z(a00,);
}
alias glValidateProgramARB = glValidateProgramARB_Z;
__gshared glbfn_glValidateProgramARB glValidateProgramARB_Z = function void (uint a00) {
  glbfn_glValidateProgramARB_loader(a00,);
};
private void glbfn_glValidateProgramARB_loader (uint a00) {
  *cast(void**)&glValidateProgramARB_Z = glbindGetProcAddress(`glValidateProgramARB`);
  if (*cast(void**)&glValidateProgramARB_Z is null) assert(0, `OpenGL function 'glValidateProgramARB' not found!`);
  glValidateProgramARB_Z(a00,);
}
alias glUniform1fARB = glUniform1fARB_Z;
__gshared glbfn_glUniform1fARB glUniform1fARB_Z = function void (int a00,float a01) {
  glbfn_glUniform1fARB_loader(a00,a01,);
};
private void glbfn_glUniform1fARB_loader (int a00,float a01) {
  *cast(void**)&glUniform1fARB_Z = glbindGetProcAddress(`glUniform1fARB`);
  if (*cast(void**)&glUniform1fARB_Z is null) assert(0, `OpenGL function 'glUniform1fARB' not found!`);
  glUniform1fARB_Z(a00,a01,);
}
alias glUniform2fARB = glUniform2fARB_Z;
__gshared glbfn_glUniform2fARB glUniform2fARB_Z = function void (int a00,float a01,float a02) {
  glbfn_glUniform2fARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2fARB_loader (int a00,float a01,float a02) {
  *cast(void**)&glUniform2fARB_Z = glbindGetProcAddress(`glUniform2fARB`);
  if (*cast(void**)&glUniform2fARB_Z is null) assert(0, `OpenGL function 'glUniform2fARB' not found!`);
  glUniform2fARB_Z(a00,a01,a02,);
}
alias glUniform3fARB = glUniform3fARB_Z;
__gshared glbfn_glUniform3fARB glUniform3fARB_Z = function void (int a00,float a01,float a02,float a03) {
  glbfn_glUniform3fARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3fARB_loader (int a00,float a01,float a02,float a03) {
  *cast(void**)&glUniform3fARB_Z = glbindGetProcAddress(`glUniform3fARB`);
  if (*cast(void**)&glUniform3fARB_Z is null) assert(0, `OpenGL function 'glUniform3fARB' not found!`);
  glUniform3fARB_Z(a00,a01,a02,a03,);
}
alias glUniform4fARB = glUniform4fARB_Z;
__gshared glbfn_glUniform4fARB glUniform4fARB_Z = function void (int a00,float a01,float a02,float a03,float a04) {
  glbfn_glUniform4fARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4fARB_loader (int a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glUniform4fARB_Z = glbindGetProcAddress(`glUniform4fARB`);
  if (*cast(void**)&glUniform4fARB_Z is null) assert(0, `OpenGL function 'glUniform4fARB' not found!`);
  glUniform4fARB_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1iARB = glUniform1iARB_Z;
__gshared glbfn_glUniform1iARB glUniform1iARB_Z = function void (int a00,int a01) {
  glbfn_glUniform1iARB_loader(a00,a01,);
};
private void glbfn_glUniform1iARB_loader (int a00,int a01) {
  *cast(void**)&glUniform1iARB_Z = glbindGetProcAddress(`glUniform1iARB`);
  if (*cast(void**)&glUniform1iARB_Z is null) assert(0, `OpenGL function 'glUniform1iARB' not found!`);
  glUniform1iARB_Z(a00,a01,);
}
alias glUniform2iARB = glUniform2iARB_Z;
__gshared glbfn_glUniform2iARB glUniform2iARB_Z = function void (int a00,int a01,int a02) {
  glbfn_glUniform2iARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2iARB_loader (int a00,int a01,int a02) {
  *cast(void**)&glUniform2iARB_Z = glbindGetProcAddress(`glUniform2iARB`);
  if (*cast(void**)&glUniform2iARB_Z is null) assert(0, `OpenGL function 'glUniform2iARB' not found!`);
  glUniform2iARB_Z(a00,a01,a02,);
}
alias glUniform3iARB = glUniform3iARB_Z;
__gshared glbfn_glUniform3iARB glUniform3iARB_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glUniform3iARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3iARB_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glUniform3iARB_Z = glbindGetProcAddress(`glUniform3iARB`);
  if (*cast(void**)&glUniform3iARB_Z is null) assert(0, `OpenGL function 'glUniform3iARB' not found!`);
  glUniform3iARB_Z(a00,a01,a02,a03,);
}
alias glUniform4iARB = glUniform4iARB_Z;
__gshared glbfn_glUniform4iARB glUniform4iARB_Z = function void (int a00,int a01,int a02,int a03,int a04) {
  glbfn_glUniform4iARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4iARB_loader (int a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glUniform4iARB_Z = glbindGetProcAddress(`glUniform4iARB`);
  if (*cast(void**)&glUniform4iARB_Z is null) assert(0, `OpenGL function 'glUniform4iARB' not found!`);
  glUniform4iARB_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1fvARB = glUniform1fvARB_Z;
__gshared glbfn_glUniform1fvARB glUniform1fvARB_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform1fvARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform1fvARB_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform1fvARB_Z = glbindGetProcAddress(`glUniform1fvARB`);
  if (*cast(void**)&glUniform1fvARB_Z is null) assert(0, `OpenGL function 'glUniform1fvARB' not found!`);
  glUniform1fvARB_Z(a00,a01,a02,);
}
alias glUniform2fvARB = glUniform2fvARB_Z;
__gshared glbfn_glUniform2fvARB glUniform2fvARB_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform2fvARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2fvARB_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform2fvARB_Z = glbindGetProcAddress(`glUniform2fvARB`);
  if (*cast(void**)&glUniform2fvARB_Z is null) assert(0, `OpenGL function 'glUniform2fvARB' not found!`);
  glUniform2fvARB_Z(a00,a01,a02,);
}
alias glUniform3fvARB = glUniform3fvARB_Z;
__gshared glbfn_glUniform3fvARB glUniform3fvARB_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform3fvARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform3fvARB_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform3fvARB_Z = glbindGetProcAddress(`glUniform3fvARB`);
  if (*cast(void**)&glUniform3fvARB_Z is null) assert(0, `OpenGL function 'glUniform3fvARB' not found!`);
  glUniform3fvARB_Z(a00,a01,a02,);
}
alias glUniform4fvARB = glUniform4fvARB_Z;
__gshared glbfn_glUniform4fvARB glUniform4fvARB_Z = function void (int a00,int a01,const(float)* a02) {
  glbfn_glUniform4fvARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform4fvARB_loader (int a00,int a01,const(float)* a02) {
  *cast(void**)&glUniform4fvARB_Z = glbindGetProcAddress(`glUniform4fvARB`);
  if (*cast(void**)&glUniform4fvARB_Z is null) assert(0, `OpenGL function 'glUniform4fvARB' not found!`);
  glUniform4fvARB_Z(a00,a01,a02,);
}
alias glUniform1ivARB = glUniform1ivARB_Z;
__gshared glbfn_glUniform1ivARB glUniform1ivARB_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform1ivARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform1ivARB_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform1ivARB_Z = glbindGetProcAddress(`glUniform1ivARB`);
  if (*cast(void**)&glUniform1ivARB_Z is null) assert(0, `OpenGL function 'glUniform1ivARB' not found!`);
  glUniform1ivARB_Z(a00,a01,a02,);
}
alias glUniform2ivARB = glUniform2ivARB_Z;
__gshared glbfn_glUniform2ivARB glUniform2ivARB_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform2ivARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform2ivARB_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform2ivARB_Z = glbindGetProcAddress(`glUniform2ivARB`);
  if (*cast(void**)&glUniform2ivARB_Z is null) assert(0, `OpenGL function 'glUniform2ivARB' not found!`);
  glUniform2ivARB_Z(a00,a01,a02,);
}
alias glUniform3ivARB = glUniform3ivARB_Z;
__gshared glbfn_glUniform3ivARB glUniform3ivARB_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform3ivARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform3ivARB_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform3ivARB_Z = glbindGetProcAddress(`glUniform3ivARB`);
  if (*cast(void**)&glUniform3ivARB_Z is null) assert(0, `OpenGL function 'glUniform3ivARB' not found!`);
  glUniform3ivARB_Z(a00,a01,a02,);
}
alias glUniform4ivARB = glUniform4ivARB_Z;
__gshared glbfn_glUniform4ivARB glUniform4ivARB_Z = function void (int a00,int a01,const(int)* a02) {
  glbfn_glUniform4ivARB_loader(a00,a01,a02,);
};
private void glbfn_glUniform4ivARB_loader (int a00,int a01,const(int)* a02) {
  *cast(void**)&glUniform4ivARB_Z = glbindGetProcAddress(`glUniform4ivARB`);
  if (*cast(void**)&glUniform4ivARB_Z is null) assert(0, `OpenGL function 'glUniform4ivARB' not found!`);
  glUniform4ivARB_Z(a00,a01,a02,);
}
alias glUniformMatrix2fvARB = glUniformMatrix2fvARB_Z;
__gshared glbfn_glUniformMatrix2fvARB glUniformMatrix2fvARB_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix2fvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix2fvARB_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix2fvARB_Z = glbindGetProcAddress(`glUniformMatrix2fvARB`);
  if (*cast(void**)&glUniformMatrix2fvARB_Z is null) assert(0, `OpenGL function 'glUniformMatrix2fvARB' not found!`);
  glUniformMatrix2fvARB_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix3fvARB = glUniformMatrix3fvARB_Z;
__gshared glbfn_glUniformMatrix3fvARB glUniformMatrix3fvARB_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix3fvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix3fvARB_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix3fvARB_Z = glbindGetProcAddress(`glUniformMatrix3fvARB`);
  if (*cast(void**)&glUniformMatrix3fvARB_Z is null) assert(0, `OpenGL function 'glUniformMatrix3fvARB' not found!`);
  glUniformMatrix3fvARB_Z(a00,a01,a02,a03,);
}
alias glUniformMatrix4fvARB = glUniformMatrix4fvARB_Z;
__gshared glbfn_glUniformMatrix4fvARB glUniformMatrix4fvARB_Z = function void (int a00,int a01,ubyte a02,const(float)* a03) {
  glbfn_glUniformMatrix4fvARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniformMatrix4fvARB_loader (int a00,int a01,ubyte a02,const(float)* a03) {
  *cast(void**)&glUniformMatrix4fvARB_Z = glbindGetProcAddress(`glUniformMatrix4fvARB`);
  if (*cast(void**)&glUniformMatrix4fvARB_Z is null) assert(0, `OpenGL function 'glUniformMatrix4fvARB' not found!`);
  glUniformMatrix4fvARB_Z(a00,a01,a02,a03,);
}
alias glGetObjectParameterfvARB = glGetObjectParameterfvARB_Z;
__gshared glbfn_glGetObjectParameterfvARB glGetObjectParameterfvARB_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetObjectParameterfvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetObjectParameterfvARB_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetObjectParameterfvARB_Z = glbindGetProcAddress(`glGetObjectParameterfvARB`);
  if (*cast(void**)&glGetObjectParameterfvARB_Z is null) assert(0, `OpenGL function 'glGetObjectParameterfvARB' not found!`);
  glGetObjectParameterfvARB_Z(a00,a01,a02,);
}
alias glGetObjectParameterivARB = glGetObjectParameterivARB_Z;
__gshared glbfn_glGetObjectParameterivARB glGetObjectParameterivARB_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetObjectParameterivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetObjectParameterivARB_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetObjectParameterivARB_Z = glbindGetProcAddress(`glGetObjectParameterivARB`);
  if (*cast(void**)&glGetObjectParameterivARB_Z is null) assert(0, `OpenGL function 'glGetObjectParameterivARB' not found!`);
  glGetObjectParameterivARB_Z(a00,a01,a02,);
}
alias glGetInfoLogARB = glGetInfoLogARB_Z;
__gshared glbfn_glGetInfoLogARB glGetInfoLogARB_Z = function void (uint a00,int a01,int* a02,byte* a03) {
  glbfn_glGetInfoLogARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetInfoLogARB_loader (uint a00,int a01,int* a02,byte* a03) {
  *cast(void**)&glGetInfoLogARB_Z = glbindGetProcAddress(`glGetInfoLogARB`);
  if (*cast(void**)&glGetInfoLogARB_Z is null) assert(0, `OpenGL function 'glGetInfoLogARB' not found!`);
  glGetInfoLogARB_Z(a00,a01,a02,a03,);
}
alias glGetAttachedObjectsARB = glGetAttachedObjectsARB_Z;
__gshared glbfn_glGetAttachedObjectsARB glGetAttachedObjectsARB_Z = function void (uint a00,int a01,int* a02,uint* a03) {
  glbfn_glGetAttachedObjectsARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetAttachedObjectsARB_loader (uint a00,int a01,int* a02,uint* a03) {
  *cast(void**)&glGetAttachedObjectsARB_Z = glbindGetProcAddress(`glGetAttachedObjectsARB`);
  if (*cast(void**)&glGetAttachedObjectsARB_Z is null) assert(0, `OpenGL function 'glGetAttachedObjectsARB' not found!`);
  glGetAttachedObjectsARB_Z(a00,a01,a02,a03,);
}
alias glGetUniformLocationARB = glGetUniformLocationARB_Z;
__gshared glbfn_glGetUniformLocationARB glGetUniformLocationARB_Z = function int (uint a00,const(byte)* a01) {
  return glbfn_glGetUniformLocationARB_loader(a00,a01,);
};
private int glbfn_glGetUniformLocationARB_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glGetUniformLocationARB_Z = glbindGetProcAddress(`glGetUniformLocationARB`);
  if (*cast(void**)&glGetUniformLocationARB_Z is null) assert(0, `OpenGL function 'glGetUniformLocationARB' not found!`);
  return glGetUniformLocationARB_Z(a00,a01,);
}
alias glGetActiveUniformARB = glGetActiveUniformARB_Z;
__gshared glbfn_glGetActiveUniformARB glGetActiveUniformARB_Z = function void (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,byte* a06) {
  glbfn_glGetActiveUniformARB_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetActiveUniformARB_loader (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,byte* a06) {
  *cast(void**)&glGetActiveUniformARB_Z = glbindGetProcAddress(`glGetActiveUniformARB`);
  if (*cast(void**)&glGetActiveUniformARB_Z is null) assert(0, `OpenGL function 'glGetActiveUniformARB' not found!`);
  glGetActiveUniformARB_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetUniformfvARB = glGetUniformfvARB_Z;
__gshared glbfn_glGetUniformfvARB glGetUniformfvARB_Z = function void (uint a00,int a01,float* a02) {
  glbfn_glGetUniformfvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformfvARB_loader (uint a00,int a01,float* a02) {
  *cast(void**)&glGetUniformfvARB_Z = glbindGetProcAddress(`glGetUniformfvARB`);
  if (*cast(void**)&glGetUniformfvARB_Z is null) assert(0, `OpenGL function 'glGetUniformfvARB' not found!`);
  glGetUniformfvARB_Z(a00,a01,a02,);
}
alias glGetUniformivARB = glGetUniformivARB_Z;
__gshared glbfn_glGetUniformivARB glGetUniformivARB_Z = function void (uint a00,int a01,int* a02) {
  glbfn_glGetUniformivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformivARB_loader (uint a00,int a01,int* a02) {
  *cast(void**)&glGetUniformivARB_Z = glbindGetProcAddress(`glGetUniformivARB`);
  if (*cast(void**)&glGetUniformivARB_Z is null) assert(0, `OpenGL function 'glGetUniformivARB' not found!`);
  glGetUniformivARB_Z(a00,a01,a02,);
}
alias glGetShaderSourceARB = glGetShaderSourceARB_Z;
__gshared glbfn_glGetShaderSourceARB glGetShaderSourceARB_Z = function void (uint a00,int a01,int* a02,byte* a03) {
  glbfn_glGetShaderSourceARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetShaderSourceARB_loader (uint a00,int a01,int* a02,byte* a03) {
  *cast(void**)&glGetShaderSourceARB_Z = glbindGetProcAddress(`glGetShaderSourceARB`);
  if (*cast(void**)&glGetShaderSourceARB_Z is null) assert(0, `OpenGL function 'glGetShaderSourceARB' not found!`);
  glGetShaderSourceARB_Z(a00,a01,a02,a03,);
}
alias glNamedStringARB = glNamedStringARB_Z;
__gshared glbfn_glNamedStringARB glNamedStringARB_Z = function void (uint a00,int a01,const(char)* a02,int a03,const(char)* a04) {
  glbfn_glNamedStringARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedStringARB_loader (uint a00,int a01,const(char)* a02,int a03,const(char)* a04) {
  *cast(void**)&glNamedStringARB_Z = glbindGetProcAddress(`glNamedStringARB`);
  if (*cast(void**)&glNamedStringARB_Z is null) assert(0, `OpenGL function 'glNamedStringARB' not found!`);
  glNamedStringARB_Z(a00,a01,a02,a03,a04,);
}
alias glDeleteNamedStringARB = glDeleteNamedStringARB_Z;
__gshared glbfn_glDeleteNamedStringARB glDeleteNamedStringARB_Z = function void (int a00,const(char)* a01) {
  glbfn_glDeleteNamedStringARB_loader(a00,a01,);
};
private void glbfn_glDeleteNamedStringARB_loader (int a00,const(char)* a01) {
  *cast(void**)&glDeleteNamedStringARB_Z = glbindGetProcAddress(`glDeleteNamedStringARB`);
  if (*cast(void**)&glDeleteNamedStringARB_Z is null) assert(0, `OpenGL function 'glDeleteNamedStringARB' not found!`);
  glDeleteNamedStringARB_Z(a00,a01,);
}
alias glCompileShaderIncludeARB = glCompileShaderIncludeARB_Z;
__gshared glbfn_glCompileShaderIncludeARB glCompileShaderIncludeARB_Z = function void (uint a00,int a01,const(char*)* a02,const(int)* a03) {
  glbfn_glCompileShaderIncludeARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glCompileShaderIncludeARB_loader (uint a00,int a01,const(char*)* a02,const(int)* a03) {
  *cast(void**)&glCompileShaderIncludeARB_Z = glbindGetProcAddress(`glCompileShaderIncludeARB`);
  if (*cast(void**)&glCompileShaderIncludeARB_Z is null) assert(0, `OpenGL function 'glCompileShaderIncludeARB' not found!`);
  glCompileShaderIncludeARB_Z(a00,a01,a02,a03,);
}
alias glIsNamedStringARB = glIsNamedStringARB_Z;
__gshared glbfn_glIsNamedStringARB glIsNamedStringARB_Z = function ubyte (int a00,const(char)* a01) {
  return glbfn_glIsNamedStringARB_loader(a00,a01,);
};
private ubyte glbfn_glIsNamedStringARB_loader (int a00,const(char)* a01) {
  *cast(void**)&glIsNamedStringARB_Z = glbindGetProcAddress(`glIsNamedStringARB`);
  if (*cast(void**)&glIsNamedStringARB_Z is null) assert(0, `OpenGL function 'glIsNamedStringARB' not found!`);
  return glIsNamedStringARB_Z(a00,a01,);
}
alias glGetNamedStringARB = glGetNamedStringARB_Z;
__gshared glbfn_glGetNamedStringARB glGetNamedStringARB_Z = function void (int a00,const(char)* a01,int a02,int* a03,char* a04) {
  glbfn_glGetNamedStringARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetNamedStringARB_loader (int a00,const(char)* a01,int a02,int* a03,char* a04) {
  *cast(void**)&glGetNamedStringARB_Z = glbindGetProcAddress(`glGetNamedStringARB`);
  if (*cast(void**)&glGetNamedStringARB_Z is null) assert(0, `OpenGL function 'glGetNamedStringARB' not found!`);
  glGetNamedStringARB_Z(a00,a01,a02,a03,a04,);
}
alias glGetNamedStringivARB = glGetNamedStringivARB_Z;
__gshared glbfn_glGetNamedStringivARB glGetNamedStringivARB_Z = function void (int a00,const(char)* a01,uint a02,int* a03) {
  glbfn_glGetNamedStringivARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedStringivARB_loader (int a00,const(char)* a01,uint a02,int* a03) {
  *cast(void**)&glGetNamedStringivARB_Z = glbindGetProcAddress(`glGetNamedStringivARB`);
  if (*cast(void**)&glGetNamedStringivARB_Z is null) assert(0, `OpenGL function 'glGetNamedStringivARB' not found!`);
  glGetNamedStringivARB_Z(a00,a01,a02,a03,);
}
alias glBufferPageCommitmentARB = glBufferPageCommitmentARB_Z;
__gshared glbfn_glBufferPageCommitmentARB glBufferPageCommitmentARB_Z = function void (uint a00,int a01,int a02,ubyte a03) {
  glbfn_glBufferPageCommitmentARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glBufferPageCommitmentARB_loader (uint a00,int a01,int a02,ubyte a03) {
  *cast(void**)&glBufferPageCommitmentARB_Z = glbindGetProcAddress(`glBufferPageCommitmentARB`);
  if (*cast(void**)&glBufferPageCommitmentARB_Z is null) assert(0, `OpenGL function 'glBufferPageCommitmentARB' not found!`);
  glBufferPageCommitmentARB_Z(a00,a01,a02,a03,);
}
alias glNamedBufferPageCommitmentEXT = glNamedBufferPageCommitmentEXT_Z;
__gshared glbfn_glNamedBufferPageCommitmentEXT glNamedBufferPageCommitmentEXT_Z = function void (uint a00,int a01,int a02,ubyte a03) {
  glbfn_glNamedBufferPageCommitmentEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferPageCommitmentEXT_loader (uint a00,int a01,int a02,ubyte a03) {
  *cast(void**)&glNamedBufferPageCommitmentEXT_Z = glbindGetProcAddress(`glNamedBufferPageCommitmentEXT`);
  if (*cast(void**)&glNamedBufferPageCommitmentEXT_Z is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentEXT' not found!`);
  glNamedBufferPageCommitmentEXT_Z(a00,a01,a02,a03,);
}
alias glNamedBufferPageCommitmentARB = glNamedBufferPageCommitmentARB_Z;
__gshared glbfn_glNamedBufferPageCommitmentARB glNamedBufferPageCommitmentARB_Z = function void (uint a00,int a01,int a02,ubyte a03) {
  glbfn_glNamedBufferPageCommitmentARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferPageCommitmentARB_loader (uint a00,int a01,int a02,ubyte a03) {
  *cast(void**)&glNamedBufferPageCommitmentARB_Z = glbindGetProcAddress(`glNamedBufferPageCommitmentARB`);
  if (*cast(void**)&glNamedBufferPageCommitmentARB_Z is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentARB' not found!`);
  glNamedBufferPageCommitmentARB_Z(a00,a01,a02,a03,);
}
alias glTexPageCommitmentARB = glTexPageCommitmentARB_Z;
__gshared glbfn_glTexPageCommitmentARB glTexPageCommitmentARB_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,ubyte a08) {
  glbfn_glTexPageCommitmentARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTexPageCommitmentARB_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,ubyte a08) {
  *cast(void**)&glTexPageCommitmentARB_Z = glbindGetProcAddress(`glTexPageCommitmentARB`);
  if (*cast(void**)&glTexPageCommitmentARB_Z is null) assert(0, `OpenGL function 'glTexPageCommitmentARB' not found!`);
  glTexPageCommitmentARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glTexBufferARB = glTexBufferARB_Z;
__gshared glbfn_glTexBufferARB glTexBufferARB_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glTexBufferARB_loader(a00,a01,a02,);
};
private void glbfn_glTexBufferARB_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glTexBufferARB_Z = glbindGetProcAddress(`glTexBufferARB`);
  if (*cast(void**)&glTexBufferARB_Z is null) assert(0, `OpenGL function 'glTexBufferARB' not found!`);
  glTexBufferARB_Z(a00,a01,a02,);
}
alias glCompressedTexImage3DARB = glCompressedTexImage3DARB_Z;
__gshared glbfn_glCompressedTexImage3DARB glCompressedTexImage3DARB_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  glbfn_glCompressedTexImage3DARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCompressedTexImage3DARB_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  *cast(void**)&glCompressedTexImage3DARB_Z = glbindGetProcAddress(`glCompressedTexImage3DARB`);
  if (*cast(void**)&glCompressedTexImage3DARB_Z is null) assert(0, `OpenGL function 'glCompressedTexImage3DARB' not found!`);
  glCompressedTexImage3DARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCompressedTexImage2DARB = glCompressedTexImage2DARB_Z;
__gshared glbfn_glCompressedTexImage2DARB glCompressedTexImage2DARB_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,const(void)* a07) {
  glbfn_glCompressedTexImage2DARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCompressedTexImage2DARB_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,const(void)* a07) {
  *cast(void**)&glCompressedTexImage2DARB_Z = glbindGetProcAddress(`glCompressedTexImage2DARB`);
  if (*cast(void**)&glCompressedTexImage2DARB_Z is null) assert(0, `OpenGL function 'glCompressedTexImage2DARB' not found!`);
  glCompressedTexImage2DARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCompressedTexImage1DARB = glCompressedTexImage1DARB_Z;
__gshared glbfn_glCompressedTexImage1DARB glCompressedTexImage1DARB_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,const(void)* a06) {
  glbfn_glCompressedTexImage1DARB_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCompressedTexImage1DARB_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,const(void)* a06) {
  *cast(void**)&glCompressedTexImage1DARB_Z = glbindGetProcAddress(`glCompressedTexImage1DARB`);
  if (*cast(void**)&glCompressedTexImage1DARB_Z is null) assert(0, `OpenGL function 'glCompressedTexImage1DARB' not found!`);
  glCompressedTexImage1DARB_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCompressedTexSubImage3DARB = glCompressedTexSubImage3DARB_Z;
__gshared glbfn_glCompressedTexSubImage3DARB glCompressedTexSubImage3DARB_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,int a09,const(void)* a10) {
  glbfn_glCompressedTexSubImage3DARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glCompressedTexSubImage3DARB_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,int a09,const(void)* a10) {
  *cast(void**)&glCompressedTexSubImage3DARB_Z = glbindGetProcAddress(`glCompressedTexSubImage3DARB`);
  if (*cast(void**)&glCompressedTexSubImage3DARB_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage3DARB' not found!`);
  glCompressedTexSubImage3DARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glCompressedTexSubImage2DARB = glCompressedTexSubImage2DARB_Z;
__gshared glbfn_glCompressedTexSubImage2DARB glCompressedTexSubImage2DARB_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,int a07,const(void)* a08) {
  glbfn_glCompressedTexSubImage2DARB_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCompressedTexSubImage2DARB_loader (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,int a07,const(void)* a08) {
  *cast(void**)&glCompressedTexSubImage2DARB_Z = glbindGetProcAddress(`glCompressedTexSubImage2DARB`);
  if (*cast(void**)&glCompressedTexSubImage2DARB_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage2DARB' not found!`);
  glCompressedTexSubImage2DARB_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCompressedTexSubImage1DARB = glCompressedTexSubImage1DARB_Z;
__gshared glbfn_glCompressedTexSubImage1DARB glCompressedTexSubImage1DARB_Z = function void (uint a00,int a01,int a02,int a03,uint a04,int a05,const(void)* a06) {
  glbfn_glCompressedTexSubImage1DARB_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCompressedTexSubImage1DARB_loader (uint a00,int a01,int a02,int a03,uint a04,int a05,const(void)* a06) {
  *cast(void**)&glCompressedTexSubImage1DARB_Z = glbindGetProcAddress(`glCompressedTexSubImage1DARB`);
  if (*cast(void**)&glCompressedTexSubImage1DARB_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage1DARB' not found!`);
  glCompressedTexSubImage1DARB_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetCompressedTexImageARB = glGetCompressedTexImageARB_Z;
__gshared glbfn_glGetCompressedTexImageARB glGetCompressedTexImageARB_Z = function void (uint a00,int a01,void* a02) {
  glbfn_glGetCompressedTexImageARB_loader(a00,a01,a02,);
};
private void glbfn_glGetCompressedTexImageARB_loader (uint a00,int a01,void* a02) {
  *cast(void**)&glGetCompressedTexImageARB_Z = glbindGetProcAddress(`glGetCompressedTexImageARB`);
  if (*cast(void**)&glGetCompressedTexImageARB_Z is null) assert(0, `OpenGL function 'glGetCompressedTexImageARB' not found!`);
  glGetCompressedTexImageARB_Z(a00,a01,a02,);
}
alias glLoadTransposeMatrixfARB = glLoadTransposeMatrixfARB_Z;
__gshared glbfn_glLoadTransposeMatrixfARB glLoadTransposeMatrixfARB_Z = function void (const(float)* a00) {
  glbfn_glLoadTransposeMatrixfARB_loader(a00,);
};
private void glbfn_glLoadTransposeMatrixfARB_loader (const(float)* a00) {
  *cast(void**)&glLoadTransposeMatrixfARB_Z = glbindGetProcAddress(`glLoadTransposeMatrixfARB`);
  if (*cast(void**)&glLoadTransposeMatrixfARB_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixfARB' not found!`);
  glLoadTransposeMatrixfARB_Z(a00,);
}
alias glLoadTransposeMatrixdARB = glLoadTransposeMatrixdARB_Z;
__gshared glbfn_glLoadTransposeMatrixdARB glLoadTransposeMatrixdARB_Z = function void (const(double)* a00) {
  glbfn_glLoadTransposeMatrixdARB_loader(a00,);
};
private void glbfn_glLoadTransposeMatrixdARB_loader (const(double)* a00) {
  *cast(void**)&glLoadTransposeMatrixdARB_Z = glbindGetProcAddress(`glLoadTransposeMatrixdARB`);
  if (*cast(void**)&glLoadTransposeMatrixdARB_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixdARB' not found!`);
  glLoadTransposeMatrixdARB_Z(a00,);
}
alias glMultTransposeMatrixfARB = glMultTransposeMatrixfARB_Z;
__gshared glbfn_glMultTransposeMatrixfARB glMultTransposeMatrixfARB_Z = function void (const(float)* a00) {
  glbfn_glMultTransposeMatrixfARB_loader(a00,);
};
private void glbfn_glMultTransposeMatrixfARB_loader (const(float)* a00) {
  *cast(void**)&glMultTransposeMatrixfARB_Z = glbindGetProcAddress(`glMultTransposeMatrixfARB`);
  if (*cast(void**)&glMultTransposeMatrixfARB_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixfARB' not found!`);
  glMultTransposeMatrixfARB_Z(a00,);
}
alias glMultTransposeMatrixdARB = glMultTransposeMatrixdARB_Z;
__gshared glbfn_glMultTransposeMatrixdARB glMultTransposeMatrixdARB_Z = function void (const(double)* a00) {
  glbfn_glMultTransposeMatrixdARB_loader(a00,);
};
private void glbfn_glMultTransposeMatrixdARB_loader (const(double)* a00) {
  *cast(void**)&glMultTransposeMatrixdARB_Z = glbindGetProcAddress(`glMultTransposeMatrixdARB`);
  if (*cast(void**)&glMultTransposeMatrixdARB_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixdARB' not found!`);
  glMultTransposeMatrixdARB_Z(a00,);
}
alias glWeightbvARB = glWeightbvARB_Z;
__gshared glbfn_glWeightbvARB glWeightbvARB_Z = function void (int a00,const(byte)* a01) {
  glbfn_glWeightbvARB_loader(a00,a01,);
};
private void glbfn_glWeightbvARB_loader (int a00,const(byte)* a01) {
  *cast(void**)&glWeightbvARB_Z = glbindGetProcAddress(`glWeightbvARB`);
  if (*cast(void**)&glWeightbvARB_Z is null) assert(0, `OpenGL function 'glWeightbvARB' not found!`);
  glWeightbvARB_Z(a00,a01,);
}
alias glWeightsvARB = glWeightsvARB_Z;
__gshared glbfn_glWeightsvARB glWeightsvARB_Z = function void (int a00,const(short)* a01) {
  glbfn_glWeightsvARB_loader(a00,a01,);
};
private void glbfn_glWeightsvARB_loader (int a00,const(short)* a01) {
  *cast(void**)&glWeightsvARB_Z = glbindGetProcAddress(`glWeightsvARB`);
  if (*cast(void**)&glWeightsvARB_Z is null) assert(0, `OpenGL function 'glWeightsvARB' not found!`);
  glWeightsvARB_Z(a00,a01,);
}
alias glWeightivARB = glWeightivARB_Z;
__gshared glbfn_glWeightivARB glWeightivARB_Z = function void (int a00,const(int)* a01) {
  glbfn_glWeightivARB_loader(a00,a01,);
};
private void glbfn_glWeightivARB_loader (int a00,const(int)* a01) {
  *cast(void**)&glWeightivARB_Z = glbindGetProcAddress(`glWeightivARB`);
  if (*cast(void**)&glWeightivARB_Z is null) assert(0, `OpenGL function 'glWeightivARB' not found!`);
  glWeightivARB_Z(a00,a01,);
}
alias glWeightfvARB = glWeightfvARB_Z;
__gshared glbfn_glWeightfvARB glWeightfvARB_Z = function void (int a00,const(float)* a01) {
  glbfn_glWeightfvARB_loader(a00,a01,);
};
private void glbfn_glWeightfvARB_loader (int a00,const(float)* a01) {
  *cast(void**)&glWeightfvARB_Z = glbindGetProcAddress(`glWeightfvARB`);
  if (*cast(void**)&glWeightfvARB_Z is null) assert(0, `OpenGL function 'glWeightfvARB' not found!`);
  glWeightfvARB_Z(a00,a01,);
}
alias glWeightdvARB = glWeightdvARB_Z;
__gshared glbfn_glWeightdvARB glWeightdvARB_Z = function void (int a00,const(double)* a01) {
  glbfn_glWeightdvARB_loader(a00,a01,);
};
private void glbfn_glWeightdvARB_loader (int a00,const(double)* a01) {
  *cast(void**)&glWeightdvARB_Z = glbindGetProcAddress(`glWeightdvARB`);
  if (*cast(void**)&glWeightdvARB_Z is null) assert(0, `OpenGL function 'glWeightdvARB' not found!`);
  glWeightdvARB_Z(a00,a01,);
}
alias glWeightubvARB = glWeightubvARB_Z;
__gshared glbfn_glWeightubvARB glWeightubvARB_Z = function void (int a00,const(ubyte)* a01) {
  glbfn_glWeightubvARB_loader(a00,a01,);
};
private void glbfn_glWeightubvARB_loader (int a00,const(ubyte)* a01) {
  *cast(void**)&glWeightubvARB_Z = glbindGetProcAddress(`glWeightubvARB`);
  if (*cast(void**)&glWeightubvARB_Z is null) assert(0, `OpenGL function 'glWeightubvARB' not found!`);
  glWeightubvARB_Z(a00,a01,);
}
alias glWeightusvARB = glWeightusvARB_Z;
__gshared glbfn_glWeightusvARB glWeightusvARB_Z = function void (int a00,const(ushort)* a01) {
  glbfn_glWeightusvARB_loader(a00,a01,);
};
private void glbfn_glWeightusvARB_loader (int a00,const(ushort)* a01) {
  *cast(void**)&glWeightusvARB_Z = glbindGetProcAddress(`glWeightusvARB`);
  if (*cast(void**)&glWeightusvARB_Z is null) assert(0, `OpenGL function 'glWeightusvARB' not found!`);
  glWeightusvARB_Z(a00,a01,);
}
alias glWeightuivARB = glWeightuivARB_Z;
__gshared glbfn_glWeightuivARB glWeightuivARB_Z = function void (int a00,const(uint)* a01) {
  glbfn_glWeightuivARB_loader(a00,a01,);
};
private void glbfn_glWeightuivARB_loader (int a00,const(uint)* a01) {
  *cast(void**)&glWeightuivARB_Z = glbindGetProcAddress(`glWeightuivARB`);
  if (*cast(void**)&glWeightuivARB_Z is null) assert(0, `OpenGL function 'glWeightuivARB' not found!`);
  glWeightuivARB_Z(a00,a01,);
}
alias glWeightPointerARB = glWeightPointerARB_Z;
__gshared glbfn_glWeightPointerARB glWeightPointerARB_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glWeightPointerARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glWeightPointerARB_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glWeightPointerARB_Z = glbindGetProcAddress(`glWeightPointerARB`);
  if (*cast(void**)&glWeightPointerARB_Z is null) assert(0, `OpenGL function 'glWeightPointerARB' not found!`);
  glWeightPointerARB_Z(a00,a01,a02,a03,);
}
alias glVertexBlendARB = glVertexBlendARB_Z;
__gshared glbfn_glVertexBlendARB glVertexBlendARB_Z = function void (int a00) {
  glbfn_glVertexBlendARB_loader(a00,);
};
private void glbfn_glVertexBlendARB_loader (int a00) {
  *cast(void**)&glVertexBlendARB_Z = glbindGetProcAddress(`glVertexBlendARB`);
  if (*cast(void**)&glVertexBlendARB_Z is null) assert(0, `OpenGL function 'glVertexBlendARB' not found!`);
  glVertexBlendARB_Z(a00,);
}
alias glBindBufferARB = glBindBufferARB_Z;
__gshared glbfn_glBindBufferARB glBindBufferARB_Z = function void (uint a00,uint a01) {
  glbfn_glBindBufferARB_loader(a00,a01,);
};
private void glbfn_glBindBufferARB_loader (uint a00,uint a01) {
  *cast(void**)&glBindBufferARB_Z = glbindGetProcAddress(`glBindBufferARB`);
  if (*cast(void**)&glBindBufferARB_Z is null) assert(0, `OpenGL function 'glBindBufferARB' not found!`);
  glBindBufferARB_Z(a00,a01,);
}
alias glDeleteBuffersARB = glDeleteBuffersARB_Z;
__gshared glbfn_glDeleteBuffersARB glDeleteBuffersARB_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteBuffersARB_loader(a00,a01,);
};
private void glbfn_glDeleteBuffersARB_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteBuffersARB_Z = glbindGetProcAddress(`glDeleteBuffersARB`);
  if (*cast(void**)&glDeleteBuffersARB_Z is null) assert(0, `OpenGL function 'glDeleteBuffersARB' not found!`);
  glDeleteBuffersARB_Z(a00,a01,);
}
alias glGenBuffersARB = glGenBuffersARB_Z;
__gshared glbfn_glGenBuffersARB glGenBuffersARB_Z = function void (int a00,uint* a01) {
  glbfn_glGenBuffersARB_loader(a00,a01,);
};
private void glbfn_glGenBuffersARB_loader (int a00,uint* a01) {
  *cast(void**)&glGenBuffersARB_Z = glbindGetProcAddress(`glGenBuffersARB`);
  if (*cast(void**)&glGenBuffersARB_Z is null) assert(0, `OpenGL function 'glGenBuffersARB' not found!`);
  glGenBuffersARB_Z(a00,a01,);
}
alias glIsBufferARB = glIsBufferARB_Z;
__gshared glbfn_glIsBufferARB glIsBufferARB_Z = function ubyte (uint a00) {
  return glbfn_glIsBufferARB_loader(a00,);
};
private ubyte glbfn_glIsBufferARB_loader (uint a00) {
  *cast(void**)&glIsBufferARB_Z = glbindGetProcAddress(`glIsBufferARB`);
  if (*cast(void**)&glIsBufferARB_Z is null) assert(0, `OpenGL function 'glIsBufferARB' not found!`);
  return glIsBufferARB_Z(a00,);
}
alias glBufferDataARB = glBufferDataARB_Z;
__gshared glbfn_glBufferDataARB glBufferDataARB_Z = function void (uint a00,int a01,const(void)* a02,uint a03) {
  glbfn_glBufferDataARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glBufferDataARB_loader (uint a00,int a01,const(void)* a02,uint a03) {
  *cast(void**)&glBufferDataARB_Z = glbindGetProcAddress(`glBufferDataARB`);
  if (*cast(void**)&glBufferDataARB_Z is null) assert(0, `OpenGL function 'glBufferDataARB' not found!`);
  glBufferDataARB_Z(a00,a01,a02,a03,);
}
alias glBufferSubDataARB = glBufferSubDataARB_Z;
__gshared glbfn_glBufferSubDataARB glBufferSubDataARB_Z = function void (uint a00,int a01,int a02,const(void)* a03) {
  glbfn_glBufferSubDataARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glBufferSubDataARB_loader (uint a00,int a01,int a02,const(void)* a03) {
  *cast(void**)&glBufferSubDataARB_Z = glbindGetProcAddress(`glBufferSubDataARB`);
  if (*cast(void**)&glBufferSubDataARB_Z is null) assert(0, `OpenGL function 'glBufferSubDataARB' not found!`);
  glBufferSubDataARB_Z(a00,a01,a02,a03,);
}
alias glGetBufferSubDataARB = glGetBufferSubDataARB_Z;
__gshared glbfn_glGetBufferSubDataARB glGetBufferSubDataARB_Z = function void (uint a00,int a01,int a02,void* a03) {
  glbfn_glGetBufferSubDataARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetBufferSubDataARB_loader (uint a00,int a01,int a02,void* a03) {
  *cast(void**)&glGetBufferSubDataARB_Z = glbindGetProcAddress(`glGetBufferSubDataARB`);
  if (*cast(void**)&glGetBufferSubDataARB_Z is null) assert(0, `OpenGL function 'glGetBufferSubDataARB' not found!`);
  glGetBufferSubDataARB_Z(a00,a01,a02,a03,);
}
alias glMapBufferARB = glMapBufferARB_Z;
__gshared glbfn_glMapBufferARB glMapBufferARB_Z = function void* (uint a00,uint a01) {
  return glbfn_glMapBufferARB_loader(a00,a01,);
};
private void* glbfn_glMapBufferARB_loader (uint a00,uint a01) {
  *cast(void**)&glMapBufferARB_Z = glbindGetProcAddress(`glMapBufferARB`);
  if (*cast(void**)&glMapBufferARB_Z is null) assert(0, `OpenGL function 'glMapBufferARB' not found!`);
  return glMapBufferARB_Z(a00,a01,);
}
alias glUnmapBufferARB = glUnmapBufferARB_Z;
__gshared glbfn_glUnmapBufferARB glUnmapBufferARB_Z = function ubyte (uint a00) {
  return glbfn_glUnmapBufferARB_loader(a00,);
};
private ubyte glbfn_glUnmapBufferARB_loader (uint a00) {
  *cast(void**)&glUnmapBufferARB_Z = glbindGetProcAddress(`glUnmapBufferARB`);
  if (*cast(void**)&glUnmapBufferARB_Z is null) assert(0, `OpenGL function 'glUnmapBufferARB' not found!`);
  return glUnmapBufferARB_Z(a00,);
}
alias glGetBufferParameterivARB = glGetBufferParameterivARB_Z;
__gshared glbfn_glGetBufferParameterivARB glGetBufferParameterivARB_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetBufferParameterivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetBufferParameterivARB_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetBufferParameterivARB_Z = glbindGetProcAddress(`glGetBufferParameterivARB`);
  if (*cast(void**)&glGetBufferParameterivARB_Z is null) assert(0, `OpenGL function 'glGetBufferParameterivARB' not found!`);
  glGetBufferParameterivARB_Z(a00,a01,a02,);
}
alias glGetBufferPointervARB = glGetBufferPointervARB_Z;
__gshared glbfn_glGetBufferPointervARB glGetBufferPointervARB_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetBufferPointervARB_loader(a00,a01,a02,);
};
private void glbfn_glGetBufferPointervARB_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetBufferPointervARB_Z = glbindGetProcAddress(`glGetBufferPointervARB`);
  if (*cast(void**)&glGetBufferPointervARB_Z is null) assert(0, `OpenGL function 'glGetBufferPointervARB' not found!`);
  glGetBufferPointervARB_Z(a00,a01,a02,);
}
alias glVertexAttrib1dARB = glVertexAttrib1dARB_Z;
__gshared glbfn_glVertexAttrib1dARB glVertexAttrib1dARB_Z = function void (uint a00,double a01) {
  glbfn_glVertexAttrib1dARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1dARB_loader (uint a00,double a01) {
  *cast(void**)&glVertexAttrib1dARB_Z = glbindGetProcAddress(`glVertexAttrib1dARB`);
  if (*cast(void**)&glVertexAttrib1dARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dARB' not found!`);
  glVertexAttrib1dARB_Z(a00,a01,);
}
alias glVertexAttrib1dvARB = glVertexAttrib1dvARB_Z;
__gshared glbfn_glVertexAttrib1dvARB glVertexAttrib1dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib1dvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib1dvARB_Z = glbindGetProcAddress(`glVertexAttrib1dvARB`);
  if (*cast(void**)&glVertexAttrib1dvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dvARB' not found!`);
  glVertexAttrib1dvARB_Z(a00,a01,);
}
alias glVertexAttrib1fARB = glVertexAttrib1fARB_Z;
__gshared glbfn_glVertexAttrib1fARB glVertexAttrib1fARB_Z = function void (uint a00,float a01) {
  glbfn_glVertexAttrib1fARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1fARB_loader (uint a00,float a01) {
  *cast(void**)&glVertexAttrib1fARB_Z = glbindGetProcAddress(`glVertexAttrib1fARB`);
  if (*cast(void**)&glVertexAttrib1fARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fARB' not found!`);
  glVertexAttrib1fARB_Z(a00,a01,);
}
alias glVertexAttrib1fvARB = glVertexAttrib1fvARB_Z;
__gshared glbfn_glVertexAttrib1fvARB glVertexAttrib1fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib1fvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib1fvARB_Z = glbindGetProcAddress(`glVertexAttrib1fvARB`);
  if (*cast(void**)&glVertexAttrib1fvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fvARB' not found!`);
  glVertexAttrib1fvARB_Z(a00,a01,);
}
alias glVertexAttrib1sARB = glVertexAttrib1sARB_Z;
__gshared glbfn_glVertexAttrib1sARB glVertexAttrib1sARB_Z = function void (uint a00,short a01) {
  glbfn_glVertexAttrib1sARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1sARB_loader (uint a00,short a01) {
  *cast(void**)&glVertexAttrib1sARB_Z = glbindGetProcAddress(`glVertexAttrib1sARB`);
  if (*cast(void**)&glVertexAttrib1sARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib1sARB' not found!`);
  glVertexAttrib1sARB_Z(a00,a01,);
}
alias glVertexAttrib1svARB = glVertexAttrib1svARB_Z;
__gshared glbfn_glVertexAttrib1svARB glVertexAttrib1svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib1svARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib1svARB_Z = glbindGetProcAddress(`glVertexAttrib1svARB`);
  if (*cast(void**)&glVertexAttrib1svARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib1svARB' not found!`);
  glVertexAttrib1svARB_Z(a00,a01,);
}
alias glVertexAttrib2dARB = glVertexAttrib2dARB_Z;
__gshared glbfn_glVertexAttrib2dARB glVertexAttrib2dARB_Z = function void (uint a00,double a01,double a02) {
  glbfn_glVertexAttrib2dARB_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2dARB_loader (uint a00,double a01,double a02) {
  *cast(void**)&glVertexAttrib2dARB_Z = glbindGetProcAddress(`glVertexAttrib2dARB`);
  if (*cast(void**)&glVertexAttrib2dARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dARB' not found!`);
  glVertexAttrib2dARB_Z(a00,a01,a02,);
}
alias glVertexAttrib2dvARB = glVertexAttrib2dvARB_Z;
__gshared glbfn_glVertexAttrib2dvARB glVertexAttrib2dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib2dvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib2dvARB_Z = glbindGetProcAddress(`glVertexAttrib2dvARB`);
  if (*cast(void**)&glVertexAttrib2dvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dvARB' not found!`);
  glVertexAttrib2dvARB_Z(a00,a01,);
}
alias glVertexAttrib2fARB = glVertexAttrib2fARB_Z;
__gshared glbfn_glVertexAttrib2fARB glVertexAttrib2fARB_Z = function void (uint a00,float a01,float a02) {
  glbfn_glVertexAttrib2fARB_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2fARB_loader (uint a00,float a01,float a02) {
  *cast(void**)&glVertexAttrib2fARB_Z = glbindGetProcAddress(`glVertexAttrib2fARB`);
  if (*cast(void**)&glVertexAttrib2fARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fARB' not found!`);
  glVertexAttrib2fARB_Z(a00,a01,a02,);
}
alias glVertexAttrib2fvARB = glVertexAttrib2fvARB_Z;
__gshared glbfn_glVertexAttrib2fvARB glVertexAttrib2fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib2fvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib2fvARB_Z = glbindGetProcAddress(`glVertexAttrib2fvARB`);
  if (*cast(void**)&glVertexAttrib2fvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fvARB' not found!`);
  glVertexAttrib2fvARB_Z(a00,a01,);
}
alias glVertexAttrib2sARB = glVertexAttrib2sARB_Z;
__gshared glbfn_glVertexAttrib2sARB glVertexAttrib2sARB_Z = function void (uint a00,short a01,short a02) {
  glbfn_glVertexAttrib2sARB_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2sARB_loader (uint a00,short a01,short a02) {
  *cast(void**)&glVertexAttrib2sARB_Z = glbindGetProcAddress(`glVertexAttrib2sARB`);
  if (*cast(void**)&glVertexAttrib2sARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib2sARB' not found!`);
  glVertexAttrib2sARB_Z(a00,a01,a02,);
}
alias glVertexAttrib2svARB = glVertexAttrib2svARB_Z;
__gshared glbfn_glVertexAttrib2svARB glVertexAttrib2svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib2svARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib2svARB_Z = glbindGetProcAddress(`glVertexAttrib2svARB`);
  if (*cast(void**)&glVertexAttrib2svARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib2svARB' not found!`);
  glVertexAttrib2svARB_Z(a00,a01,);
}
alias glVertexAttrib3dARB = glVertexAttrib3dARB_Z;
__gshared glbfn_glVertexAttrib3dARB glVertexAttrib3dARB_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glVertexAttrib3dARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3dARB_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glVertexAttrib3dARB_Z = glbindGetProcAddress(`glVertexAttrib3dARB`);
  if (*cast(void**)&glVertexAttrib3dARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dARB' not found!`);
  glVertexAttrib3dARB_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3dvARB = glVertexAttrib3dvARB_Z;
__gshared glbfn_glVertexAttrib3dvARB glVertexAttrib3dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib3dvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib3dvARB_Z = glbindGetProcAddress(`glVertexAttrib3dvARB`);
  if (*cast(void**)&glVertexAttrib3dvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dvARB' not found!`);
  glVertexAttrib3dvARB_Z(a00,a01,);
}
alias glVertexAttrib3fARB = glVertexAttrib3fARB_Z;
__gshared glbfn_glVertexAttrib3fARB glVertexAttrib3fARB_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glVertexAttrib3fARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3fARB_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glVertexAttrib3fARB_Z = glbindGetProcAddress(`glVertexAttrib3fARB`);
  if (*cast(void**)&glVertexAttrib3fARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fARB' not found!`);
  glVertexAttrib3fARB_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3fvARB = glVertexAttrib3fvARB_Z;
__gshared glbfn_glVertexAttrib3fvARB glVertexAttrib3fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib3fvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib3fvARB_Z = glbindGetProcAddress(`glVertexAttrib3fvARB`);
  if (*cast(void**)&glVertexAttrib3fvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fvARB' not found!`);
  glVertexAttrib3fvARB_Z(a00,a01,);
}
alias glVertexAttrib3sARB = glVertexAttrib3sARB_Z;
__gshared glbfn_glVertexAttrib3sARB glVertexAttrib3sARB_Z = function void (uint a00,short a01,short a02,short a03) {
  glbfn_glVertexAttrib3sARB_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3sARB_loader (uint a00,short a01,short a02,short a03) {
  *cast(void**)&glVertexAttrib3sARB_Z = glbindGetProcAddress(`glVertexAttrib3sARB`);
  if (*cast(void**)&glVertexAttrib3sARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib3sARB' not found!`);
  glVertexAttrib3sARB_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3svARB = glVertexAttrib3svARB_Z;
__gshared glbfn_glVertexAttrib3svARB glVertexAttrib3svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib3svARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib3svARB_Z = glbindGetProcAddress(`glVertexAttrib3svARB`);
  if (*cast(void**)&glVertexAttrib3svARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib3svARB' not found!`);
  glVertexAttrib3svARB_Z(a00,a01,);
}
alias glVertexAttrib4NbvARB = glVertexAttrib4NbvARB_Z;
__gshared glbfn_glVertexAttrib4NbvARB glVertexAttrib4NbvARB_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glVertexAttrib4NbvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4NbvARB_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glVertexAttrib4NbvARB_Z = glbindGetProcAddress(`glVertexAttrib4NbvARB`);
  if (*cast(void**)&glVertexAttrib4NbvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NbvARB' not found!`);
  glVertexAttrib4NbvARB_Z(a00,a01,);
}
alias glVertexAttrib4NivARB = glVertexAttrib4NivARB_Z;
__gshared glbfn_glVertexAttrib4NivARB glVertexAttrib4NivARB_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttrib4NivARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4NivARB_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttrib4NivARB_Z = glbindGetProcAddress(`glVertexAttrib4NivARB`);
  if (*cast(void**)&glVertexAttrib4NivARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NivARB' not found!`);
  glVertexAttrib4NivARB_Z(a00,a01,);
}
alias glVertexAttrib4NsvARB = glVertexAttrib4NsvARB_Z;
__gshared glbfn_glVertexAttrib4NsvARB glVertexAttrib4NsvARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib4NsvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4NsvARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib4NsvARB_Z = glbindGetProcAddress(`glVertexAttrib4NsvARB`);
  if (*cast(void**)&glVertexAttrib4NsvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NsvARB' not found!`);
  glVertexAttrib4NsvARB_Z(a00,a01,);
}
alias glVertexAttrib4NubARB = glVertexAttrib4NubARB_Z;
__gshared glbfn_glVertexAttrib4NubARB glVertexAttrib4NubARB_Z = function void (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  glbfn_glVertexAttrib4NubARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4NubARB_loader (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  *cast(void**)&glVertexAttrib4NubARB_Z = glbindGetProcAddress(`glVertexAttrib4NubARB`);
  if (*cast(void**)&glVertexAttrib4NubARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NubARB' not found!`);
  glVertexAttrib4NubARB_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4NubvARB = glVertexAttrib4NubvARB_Z;
__gshared glbfn_glVertexAttrib4NubvARB glVertexAttrib4NubvARB_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVertexAttrib4NubvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4NubvARB_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVertexAttrib4NubvARB_Z = glbindGetProcAddress(`glVertexAttrib4NubvARB`);
  if (*cast(void**)&glVertexAttrib4NubvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NubvARB' not found!`);
  glVertexAttrib4NubvARB_Z(a00,a01,);
}
alias glVertexAttrib4NuivARB = glVertexAttrib4NuivARB_Z;
__gshared glbfn_glVertexAttrib4NuivARB glVertexAttrib4NuivARB_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttrib4NuivARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4NuivARB_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttrib4NuivARB_Z = glbindGetProcAddress(`glVertexAttrib4NuivARB`);
  if (*cast(void**)&glVertexAttrib4NuivARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NuivARB' not found!`);
  glVertexAttrib4NuivARB_Z(a00,a01,);
}
alias glVertexAttrib4NusvARB = glVertexAttrib4NusvARB_Z;
__gshared glbfn_glVertexAttrib4NusvARB glVertexAttrib4NusvARB_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib4NusvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4NusvARB_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib4NusvARB_Z = glbindGetProcAddress(`glVertexAttrib4NusvARB`);
  if (*cast(void**)&glVertexAttrib4NusvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NusvARB' not found!`);
  glVertexAttrib4NusvARB_Z(a00,a01,);
}
alias glVertexAttrib4bvARB = glVertexAttrib4bvARB_Z;
__gshared glbfn_glVertexAttrib4bvARB glVertexAttrib4bvARB_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glVertexAttrib4bvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4bvARB_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glVertexAttrib4bvARB_Z = glbindGetProcAddress(`glVertexAttrib4bvARB`);
  if (*cast(void**)&glVertexAttrib4bvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4bvARB' not found!`);
  glVertexAttrib4bvARB_Z(a00,a01,);
}
alias glVertexAttrib4dARB = glVertexAttrib4dARB_Z;
__gshared glbfn_glVertexAttrib4dARB glVertexAttrib4dARB_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glVertexAttrib4dARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4dARB_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glVertexAttrib4dARB_Z = glbindGetProcAddress(`glVertexAttrib4dARB`);
  if (*cast(void**)&glVertexAttrib4dARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dARB' not found!`);
  glVertexAttrib4dARB_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4dvARB = glVertexAttrib4dvARB_Z;
__gshared glbfn_glVertexAttrib4dvARB glVertexAttrib4dvARB_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib4dvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4dvARB_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib4dvARB_Z = glbindGetProcAddress(`glVertexAttrib4dvARB`);
  if (*cast(void**)&glVertexAttrib4dvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dvARB' not found!`);
  glVertexAttrib4dvARB_Z(a00,a01,);
}
alias glVertexAttrib4fARB = glVertexAttrib4fARB_Z;
__gshared glbfn_glVertexAttrib4fARB glVertexAttrib4fARB_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glVertexAttrib4fARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4fARB_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glVertexAttrib4fARB_Z = glbindGetProcAddress(`glVertexAttrib4fARB`);
  if (*cast(void**)&glVertexAttrib4fARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fARB' not found!`);
  glVertexAttrib4fARB_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4fvARB = glVertexAttrib4fvARB_Z;
__gshared glbfn_glVertexAttrib4fvARB glVertexAttrib4fvARB_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib4fvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4fvARB_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib4fvARB_Z = glbindGetProcAddress(`glVertexAttrib4fvARB`);
  if (*cast(void**)&glVertexAttrib4fvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fvARB' not found!`);
  glVertexAttrib4fvARB_Z(a00,a01,);
}
alias glVertexAttrib4ivARB = glVertexAttrib4ivARB_Z;
__gshared glbfn_glVertexAttrib4ivARB glVertexAttrib4ivARB_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttrib4ivARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4ivARB_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttrib4ivARB_Z = glbindGetProcAddress(`glVertexAttrib4ivARB`);
  if (*cast(void**)&glVertexAttrib4ivARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ivARB' not found!`);
  glVertexAttrib4ivARB_Z(a00,a01,);
}
alias glVertexAttrib4sARB = glVertexAttrib4sARB_Z;
__gshared glbfn_glVertexAttrib4sARB glVertexAttrib4sARB_Z = function void (uint a00,short a01,short a02,short a03,short a04) {
  glbfn_glVertexAttrib4sARB_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4sARB_loader (uint a00,short a01,short a02,short a03,short a04) {
  *cast(void**)&glVertexAttrib4sARB_Z = glbindGetProcAddress(`glVertexAttrib4sARB`);
  if (*cast(void**)&glVertexAttrib4sARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4sARB' not found!`);
  glVertexAttrib4sARB_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4svARB = glVertexAttrib4svARB_Z;
__gshared glbfn_glVertexAttrib4svARB glVertexAttrib4svARB_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib4svARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4svARB_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib4svARB_Z = glbindGetProcAddress(`glVertexAttrib4svARB`);
  if (*cast(void**)&glVertexAttrib4svARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4svARB' not found!`);
  glVertexAttrib4svARB_Z(a00,a01,);
}
alias glVertexAttrib4ubvARB = glVertexAttrib4ubvARB_Z;
__gshared glbfn_glVertexAttrib4ubvARB glVertexAttrib4ubvARB_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVertexAttrib4ubvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4ubvARB_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVertexAttrib4ubvARB_Z = glbindGetProcAddress(`glVertexAttrib4ubvARB`);
  if (*cast(void**)&glVertexAttrib4ubvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubvARB' not found!`);
  glVertexAttrib4ubvARB_Z(a00,a01,);
}
alias glVertexAttrib4uivARB = glVertexAttrib4uivARB_Z;
__gshared glbfn_glVertexAttrib4uivARB glVertexAttrib4uivARB_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttrib4uivARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4uivARB_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttrib4uivARB_Z = glbindGetProcAddress(`glVertexAttrib4uivARB`);
  if (*cast(void**)&glVertexAttrib4uivARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4uivARB' not found!`);
  glVertexAttrib4uivARB_Z(a00,a01,);
}
alias glVertexAttrib4usvARB = glVertexAttrib4usvARB_Z;
__gshared glbfn_glVertexAttrib4usvARB glVertexAttrib4usvARB_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib4usvARB_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4usvARB_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib4usvARB_Z = glbindGetProcAddress(`glVertexAttrib4usvARB`);
  if (*cast(void**)&glVertexAttrib4usvARB_Z is null) assert(0, `OpenGL function 'glVertexAttrib4usvARB' not found!`);
  glVertexAttrib4usvARB_Z(a00,a01,);
}
alias glVertexAttribPointerARB = glVertexAttribPointerARB_Z;
__gshared glbfn_glVertexAttribPointerARB glVertexAttribPointerARB_Z = function void (uint a00,int a01,uint a02,ubyte a03,int a04,const(void)* a05) {
  glbfn_glVertexAttribPointerARB_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexAttribPointerARB_loader (uint a00,int a01,uint a02,ubyte a03,int a04,const(void)* a05) {
  *cast(void**)&glVertexAttribPointerARB_Z = glbindGetProcAddress(`glVertexAttribPointerARB`);
  if (*cast(void**)&glVertexAttribPointerARB_Z is null) assert(0, `OpenGL function 'glVertexAttribPointerARB' not found!`);
  glVertexAttribPointerARB_Z(a00,a01,a02,a03,a04,a05,);
}
alias glEnableVertexAttribArrayARB = glEnableVertexAttribArrayARB_Z;
__gshared glbfn_glEnableVertexAttribArrayARB glEnableVertexAttribArrayARB_Z = function void (uint a00) {
  glbfn_glEnableVertexAttribArrayARB_loader(a00,);
};
private void glbfn_glEnableVertexAttribArrayARB_loader (uint a00) {
  *cast(void**)&glEnableVertexAttribArrayARB_Z = glbindGetProcAddress(`glEnableVertexAttribArrayARB`);
  if (*cast(void**)&glEnableVertexAttribArrayARB_Z is null) assert(0, `OpenGL function 'glEnableVertexAttribArrayARB' not found!`);
  glEnableVertexAttribArrayARB_Z(a00,);
}
alias glDisableVertexAttribArrayARB = glDisableVertexAttribArrayARB_Z;
__gshared glbfn_glDisableVertexAttribArrayARB glDisableVertexAttribArrayARB_Z = function void (uint a00) {
  glbfn_glDisableVertexAttribArrayARB_loader(a00,);
};
private void glbfn_glDisableVertexAttribArrayARB_loader (uint a00) {
  *cast(void**)&glDisableVertexAttribArrayARB_Z = glbindGetProcAddress(`glDisableVertexAttribArrayARB`);
  if (*cast(void**)&glDisableVertexAttribArrayARB_Z is null) assert(0, `OpenGL function 'glDisableVertexAttribArrayARB' not found!`);
  glDisableVertexAttribArrayARB_Z(a00,);
}
alias glGetVertexAttribdvARB = glGetVertexAttribdvARB_Z;
__gshared glbfn_glGetVertexAttribdvARB glGetVertexAttribdvARB_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetVertexAttribdvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribdvARB_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetVertexAttribdvARB_Z = glbindGetProcAddress(`glGetVertexAttribdvARB`);
  if (*cast(void**)&glGetVertexAttribdvARB_Z is null) assert(0, `OpenGL function 'glGetVertexAttribdvARB' not found!`);
  glGetVertexAttribdvARB_Z(a00,a01,a02,);
}
alias glGetVertexAttribfvARB = glGetVertexAttribfvARB_Z;
__gshared glbfn_glGetVertexAttribfvARB glGetVertexAttribfvARB_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetVertexAttribfvARB_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribfvARB_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetVertexAttribfvARB_Z = glbindGetProcAddress(`glGetVertexAttribfvARB`);
  if (*cast(void**)&glGetVertexAttribfvARB_Z is null) assert(0, `OpenGL function 'glGetVertexAttribfvARB' not found!`);
  glGetVertexAttribfvARB_Z(a00,a01,a02,);
}
alias glGetVertexAttribivARB = glGetVertexAttribivARB_Z;
__gshared glbfn_glGetVertexAttribivARB glGetVertexAttribivARB_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexAttribivARB_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribivARB_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexAttribivARB_Z = glbindGetProcAddress(`glGetVertexAttribivARB`);
  if (*cast(void**)&glGetVertexAttribivARB_Z is null) assert(0, `OpenGL function 'glGetVertexAttribivARB' not found!`);
  glGetVertexAttribivARB_Z(a00,a01,a02,);
}
alias glGetVertexAttribPointervARB = glGetVertexAttribPointervARB_Z;
__gshared glbfn_glGetVertexAttribPointervARB glGetVertexAttribPointervARB_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetVertexAttribPointervARB_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribPointervARB_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetVertexAttribPointervARB_Z = glbindGetProcAddress(`glGetVertexAttribPointervARB`);
  if (*cast(void**)&glGetVertexAttribPointervARB_Z is null) assert(0, `OpenGL function 'glGetVertexAttribPointervARB' not found!`);
  glGetVertexAttribPointervARB_Z(a00,a01,a02,);
}
alias glBindAttribLocationARB = glBindAttribLocationARB_Z;
__gshared glbfn_glBindAttribLocationARB glBindAttribLocationARB_Z = function void (uint a00,uint a01,const(byte)* a02) {
  glbfn_glBindAttribLocationARB_loader(a00,a01,a02,);
};
private void glbfn_glBindAttribLocationARB_loader (uint a00,uint a01,const(byte)* a02) {
  *cast(void**)&glBindAttribLocationARB_Z = glbindGetProcAddress(`glBindAttribLocationARB`);
  if (*cast(void**)&glBindAttribLocationARB_Z is null) assert(0, `OpenGL function 'glBindAttribLocationARB' not found!`);
  glBindAttribLocationARB_Z(a00,a01,a02,);
}
alias glGetActiveAttribARB = glGetActiveAttribARB_Z;
__gshared glbfn_glGetActiveAttribARB glGetActiveAttribARB_Z = function void (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,byte* a06) {
  glbfn_glGetActiveAttribARB_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetActiveAttribARB_loader (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,byte* a06) {
  *cast(void**)&glGetActiveAttribARB_Z = glbindGetProcAddress(`glGetActiveAttribARB`);
  if (*cast(void**)&glGetActiveAttribARB_Z is null) assert(0, `OpenGL function 'glGetActiveAttribARB' not found!`);
  glGetActiveAttribARB_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetAttribLocationARB = glGetAttribLocationARB_Z;
__gshared glbfn_glGetAttribLocationARB glGetAttribLocationARB_Z = function int (uint a00,const(byte)* a01) {
  return glbfn_glGetAttribLocationARB_loader(a00,a01,);
};
private int glbfn_glGetAttribLocationARB_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glGetAttribLocationARB_Z = glbindGetProcAddress(`glGetAttribLocationARB`);
  if (*cast(void**)&glGetAttribLocationARB_Z is null) assert(0, `OpenGL function 'glGetAttribLocationARB' not found!`);
  return glGetAttribLocationARB_Z(a00,a01,);
}
alias glWindowPos2dARB = glWindowPos2dARB_Z;
__gshared glbfn_glWindowPos2dARB glWindowPos2dARB_Z = function void (double a00,double a01) {
  glbfn_glWindowPos2dARB_loader(a00,a01,);
};
private void glbfn_glWindowPos2dARB_loader (double a00,double a01) {
  *cast(void**)&glWindowPos2dARB_Z = glbindGetProcAddress(`glWindowPos2dARB`);
  if (*cast(void**)&glWindowPos2dARB_Z is null) assert(0, `OpenGL function 'glWindowPos2dARB' not found!`);
  glWindowPos2dARB_Z(a00,a01,);
}
alias glWindowPos2dvARB = glWindowPos2dvARB_Z;
__gshared glbfn_glWindowPos2dvARB glWindowPos2dvARB_Z = function void (const(double)* a00) {
  glbfn_glWindowPos2dvARB_loader(a00,);
};
private void glbfn_glWindowPos2dvARB_loader (const(double)* a00) {
  *cast(void**)&glWindowPos2dvARB_Z = glbindGetProcAddress(`glWindowPos2dvARB`);
  if (*cast(void**)&glWindowPos2dvARB_Z is null) assert(0, `OpenGL function 'glWindowPos2dvARB' not found!`);
  glWindowPos2dvARB_Z(a00,);
}
alias glWindowPos2fARB = glWindowPos2fARB_Z;
__gshared glbfn_glWindowPos2fARB glWindowPos2fARB_Z = function void (float a00,float a01) {
  glbfn_glWindowPos2fARB_loader(a00,a01,);
};
private void glbfn_glWindowPos2fARB_loader (float a00,float a01) {
  *cast(void**)&glWindowPos2fARB_Z = glbindGetProcAddress(`glWindowPos2fARB`);
  if (*cast(void**)&glWindowPos2fARB_Z is null) assert(0, `OpenGL function 'glWindowPos2fARB' not found!`);
  glWindowPos2fARB_Z(a00,a01,);
}
alias glWindowPos2fvARB = glWindowPos2fvARB_Z;
__gshared glbfn_glWindowPos2fvARB glWindowPos2fvARB_Z = function void (const(float)* a00) {
  glbfn_glWindowPos2fvARB_loader(a00,);
};
private void glbfn_glWindowPos2fvARB_loader (const(float)* a00) {
  *cast(void**)&glWindowPos2fvARB_Z = glbindGetProcAddress(`glWindowPos2fvARB`);
  if (*cast(void**)&glWindowPos2fvARB_Z is null) assert(0, `OpenGL function 'glWindowPos2fvARB' not found!`);
  glWindowPos2fvARB_Z(a00,);
}
alias glWindowPos2iARB = glWindowPos2iARB_Z;
__gshared glbfn_glWindowPos2iARB glWindowPos2iARB_Z = function void (int a00,int a01) {
  glbfn_glWindowPos2iARB_loader(a00,a01,);
};
private void glbfn_glWindowPos2iARB_loader (int a00,int a01) {
  *cast(void**)&glWindowPos2iARB_Z = glbindGetProcAddress(`glWindowPos2iARB`);
  if (*cast(void**)&glWindowPos2iARB_Z is null) assert(0, `OpenGL function 'glWindowPos2iARB' not found!`);
  glWindowPos2iARB_Z(a00,a01,);
}
alias glWindowPos2ivARB = glWindowPos2ivARB_Z;
__gshared glbfn_glWindowPos2ivARB glWindowPos2ivARB_Z = function void (const(int)* a00) {
  glbfn_glWindowPos2ivARB_loader(a00,);
};
private void glbfn_glWindowPos2ivARB_loader (const(int)* a00) {
  *cast(void**)&glWindowPos2ivARB_Z = glbindGetProcAddress(`glWindowPos2ivARB`);
  if (*cast(void**)&glWindowPos2ivARB_Z is null) assert(0, `OpenGL function 'glWindowPos2ivARB' not found!`);
  glWindowPos2ivARB_Z(a00,);
}
alias glWindowPos2sARB = glWindowPos2sARB_Z;
__gshared glbfn_glWindowPos2sARB glWindowPos2sARB_Z = function void (short a00,short a01) {
  glbfn_glWindowPos2sARB_loader(a00,a01,);
};
private void glbfn_glWindowPos2sARB_loader (short a00,short a01) {
  *cast(void**)&glWindowPos2sARB_Z = glbindGetProcAddress(`glWindowPos2sARB`);
  if (*cast(void**)&glWindowPos2sARB_Z is null) assert(0, `OpenGL function 'glWindowPos2sARB' not found!`);
  glWindowPos2sARB_Z(a00,a01,);
}
alias glWindowPos2svARB = glWindowPos2svARB_Z;
__gshared glbfn_glWindowPos2svARB glWindowPos2svARB_Z = function void (const(short)* a00) {
  glbfn_glWindowPos2svARB_loader(a00,);
};
private void glbfn_glWindowPos2svARB_loader (const(short)* a00) {
  *cast(void**)&glWindowPos2svARB_Z = glbindGetProcAddress(`glWindowPos2svARB`);
  if (*cast(void**)&glWindowPos2svARB_Z is null) assert(0, `OpenGL function 'glWindowPos2svARB' not found!`);
  glWindowPos2svARB_Z(a00,);
}
alias glWindowPos3dARB = glWindowPos3dARB_Z;
__gshared glbfn_glWindowPos3dARB glWindowPos3dARB_Z = function void (double a00,double a01,double a02) {
  glbfn_glWindowPos3dARB_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3dARB_loader (double a00,double a01,double a02) {
  *cast(void**)&glWindowPos3dARB_Z = glbindGetProcAddress(`glWindowPos3dARB`);
  if (*cast(void**)&glWindowPos3dARB_Z is null) assert(0, `OpenGL function 'glWindowPos3dARB' not found!`);
  glWindowPos3dARB_Z(a00,a01,a02,);
}
alias glWindowPos3dvARB = glWindowPos3dvARB_Z;
__gshared glbfn_glWindowPos3dvARB glWindowPos3dvARB_Z = function void (const(double)* a00) {
  glbfn_glWindowPos3dvARB_loader(a00,);
};
private void glbfn_glWindowPos3dvARB_loader (const(double)* a00) {
  *cast(void**)&glWindowPos3dvARB_Z = glbindGetProcAddress(`glWindowPos3dvARB`);
  if (*cast(void**)&glWindowPos3dvARB_Z is null) assert(0, `OpenGL function 'glWindowPos3dvARB' not found!`);
  glWindowPos3dvARB_Z(a00,);
}
alias glWindowPos3fARB = glWindowPos3fARB_Z;
__gshared glbfn_glWindowPos3fARB glWindowPos3fARB_Z = function void (float a00,float a01,float a02) {
  glbfn_glWindowPos3fARB_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3fARB_loader (float a00,float a01,float a02) {
  *cast(void**)&glWindowPos3fARB_Z = glbindGetProcAddress(`glWindowPos3fARB`);
  if (*cast(void**)&glWindowPos3fARB_Z is null) assert(0, `OpenGL function 'glWindowPos3fARB' not found!`);
  glWindowPos3fARB_Z(a00,a01,a02,);
}
alias glWindowPos3fvARB = glWindowPos3fvARB_Z;
__gshared glbfn_glWindowPos3fvARB glWindowPos3fvARB_Z = function void (const(float)* a00) {
  glbfn_glWindowPos3fvARB_loader(a00,);
};
private void glbfn_glWindowPos3fvARB_loader (const(float)* a00) {
  *cast(void**)&glWindowPos3fvARB_Z = glbindGetProcAddress(`glWindowPos3fvARB`);
  if (*cast(void**)&glWindowPos3fvARB_Z is null) assert(0, `OpenGL function 'glWindowPos3fvARB' not found!`);
  glWindowPos3fvARB_Z(a00,);
}
alias glWindowPos3iARB = glWindowPos3iARB_Z;
__gshared glbfn_glWindowPos3iARB glWindowPos3iARB_Z = function void (int a00,int a01,int a02) {
  glbfn_glWindowPos3iARB_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3iARB_loader (int a00,int a01,int a02) {
  *cast(void**)&glWindowPos3iARB_Z = glbindGetProcAddress(`glWindowPos3iARB`);
  if (*cast(void**)&glWindowPos3iARB_Z is null) assert(0, `OpenGL function 'glWindowPos3iARB' not found!`);
  glWindowPos3iARB_Z(a00,a01,a02,);
}
alias glWindowPos3ivARB = glWindowPos3ivARB_Z;
__gshared glbfn_glWindowPos3ivARB glWindowPos3ivARB_Z = function void (const(int)* a00) {
  glbfn_glWindowPos3ivARB_loader(a00,);
};
private void glbfn_glWindowPos3ivARB_loader (const(int)* a00) {
  *cast(void**)&glWindowPos3ivARB_Z = glbindGetProcAddress(`glWindowPos3ivARB`);
  if (*cast(void**)&glWindowPos3ivARB_Z is null) assert(0, `OpenGL function 'glWindowPos3ivARB' not found!`);
  glWindowPos3ivARB_Z(a00,);
}
alias glWindowPos3sARB = glWindowPos3sARB_Z;
__gshared glbfn_glWindowPos3sARB glWindowPos3sARB_Z = function void (short a00,short a01,short a02) {
  glbfn_glWindowPos3sARB_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3sARB_loader (short a00,short a01,short a02) {
  *cast(void**)&glWindowPos3sARB_Z = glbindGetProcAddress(`glWindowPos3sARB`);
  if (*cast(void**)&glWindowPos3sARB_Z is null) assert(0, `OpenGL function 'glWindowPos3sARB' not found!`);
  glWindowPos3sARB_Z(a00,a01,a02,);
}
alias glWindowPos3svARB = glWindowPos3svARB_Z;
__gshared glbfn_glWindowPos3svARB glWindowPos3svARB_Z = function void (const(short)* a00) {
  glbfn_glWindowPos3svARB_loader(a00,);
};
private void glbfn_glWindowPos3svARB_loader (const(short)* a00) {
  *cast(void**)&glWindowPos3svARB_Z = glbindGetProcAddress(`glWindowPos3svARB`);
  if (*cast(void**)&glWindowPos3svARB_Z is null) assert(0, `OpenGL function 'glWindowPos3svARB' not found!`);
  glWindowPos3svARB_Z(a00,);
}
alias glDrawBuffersATI = glDrawBuffersATI_Z;
__gshared glbfn_glDrawBuffersATI glDrawBuffersATI_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDrawBuffersATI_loader(a00,a01,);
};
private void glbfn_glDrawBuffersATI_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDrawBuffersATI_Z = glbindGetProcAddress(`glDrawBuffersATI`);
  if (*cast(void**)&glDrawBuffersATI_Z is null) assert(0, `OpenGL function 'glDrawBuffersATI' not found!`);
  glDrawBuffersATI_Z(a00,a01,);
}
alias glElementPointerATI = glElementPointerATI_Z;
__gshared glbfn_glElementPointerATI glElementPointerATI_Z = function void (uint a00,const(void)* a01) {
  glbfn_glElementPointerATI_loader(a00,a01,);
};
private void glbfn_glElementPointerATI_loader (uint a00,const(void)* a01) {
  *cast(void**)&glElementPointerATI_Z = glbindGetProcAddress(`glElementPointerATI`);
  if (*cast(void**)&glElementPointerATI_Z is null) assert(0, `OpenGL function 'glElementPointerATI' not found!`);
  glElementPointerATI_Z(a00,a01,);
}
alias glDrawElementArrayATI = glDrawElementArrayATI_Z;
__gshared glbfn_glDrawElementArrayATI glDrawElementArrayATI_Z = function void (uint a00,int a01) {
  glbfn_glDrawElementArrayATI_loader(a00,a01,);
};
private void glbfn_glDrawElementArrayATI_loader (uint a00,int a01) {
  *cast(void**)&glDrawElementArrayATI_Z = glbindGetProcAddress(`glDrawElementArrayATI`);
  if (*cast(void**)&glDrawElementArrayATI_Z is null) assert(0, `OpenGL function 'glDrawElementArrayATI' not found!`);
  glDrawElementArrayATI_Z(a00,a01,);
}
alias glDrawRangeElementArrayATI = glDrawRangeElementArrayATI_Z;
__gshared glbfn_glDrawRangeElementArrayATI glDrawRangeElementArrayATI_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glDrawRangeElementArrayATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawRangeElementArrayATI_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glDrawRangeElementArrayATI_Z = glbindGetProcAddress(`glDrawRangeElementArrayATI`);
  if (*cast(void**)&glDrawRangeElementArrayATI_Z is null) assert(0, `OpenGL function 'glDrawRangeElementArrayATI' not found!`);
  glDrawRangeElementArrayATI_Z(a00,a01,a02,a03,);
}
alias glTexBumpParameterivATI = glTexBumpParameterivATI_Z;
__gshared glbfn_glTexBumpParameterivATI glTexBumpParameterivATI_Z = function void (uint a00,const(int)* a01) {
  glbfn_glTexBumpParameterivATI_loader(a00,a01,);
};
private void glbfn_glTexBumpParameterivATI_loader (uint a00,const(int)* a01) {
  *cast(void**)&glTexBumpParameterivATI_Z = glbindGetProcAddress(`glTexBumpParameterivATI`);
  if (*cast(void**)&glTexBumpParameterivATI_Z is null) assert(0, `OpenGL function 'glTexBumpParameterivATI' not found!`);
  glTexBumpParameterivATI_Z(a00,a01,);
}
alias glTexBumpParameterfvATI = glTexBumpParameterfvATI_Z;
__gshared glbfn_glTexBumpParameterfvATI glTexBumpParameterfvATI_Z = function void (uint a00,const(float)* a01) {
  glbfn_glTexBumpParameterfvATI_loader(a00,a01,);
};
private void glbfn_glTexBumpParameterfvATI_loader (uint a00,const(float)* a01) {
  *cast(void**)&glTexBumpParameterfvATI_Z = glbindGetProcAddress(`glTexBumpParameterfvATI`);
  if (*cast(void**)&glTexBumpParameterfvATI_Z is null) assert(0, `OpenGL function 'glTexBumpParameterfvATI' not found!`);
  glTexBumpParameterfvATI_Z(a00,a01,);
}
alias glGetTexBumpParameterivATI = glGetTexBumpParameterivATI_Z;
__gshared glbfn_glGetTexBumpParameterivATI glGetTexBumpParameterivATI_Z = function void (uint a00,int* a01) {
  glbfn_glGetTexBumpParameterivATI_loader(a00,a01,);
};
private void glbfn_glGetTexBumpParameterivATI_loader (uint a00,int* a01) {
  *cast(void**)&glGetTexBumpParameterivATI_Z = glbindGetProcAddress(`glGetTexBumpParameterivATI`);
  if (*cast(void**)&glGetTexBumpParameterivATI_Z is null) assert(0, `OpenGL function 'glGetTexBumpParameterivATI' not found!`);
  glGetTexBumpParameterivATI_Z(a00,a01,);
}
alias glGetTexBumpParameterfvATI = glGetTexBumpParameterfvATI_Z;
__gshared glbfn_glGetTexBumpParameterfvATI glGetTexBumpParameterfvATI_Z = function void (uint a00,float* a01) {
  glbfn_glGetTexBumpParameterfvATI_loader(a00,a01,);
};
private void glbfn_glGetTexBumpParameterfvATI_loader (uint a00,float* a01) {
  *cast(void**)&glGetTexBumpParameterfvATI_Z = glbindGetProcAddress(`glGetTexBumpParameterfvATI`);
  if (*cast(void**)&glGetTexBumpParameterfvATI_Z is null) assert(0, `OpenGL function 'glGetTexBumpParameterfvATI' not found!`);
  glGetTexBumpParameterfvATI_Z(a00,a01,);
}
alias glGenFragmentShadersATI = glGenFragmentShadersATI_Z;
__gshared glbfn_glGenFragmentShadersATI glGenFragmentShadersATI_Z = function uint (uint a00) {
  return glbfn_glGenFragmentShadersATI_loader(a00,);
};
private uint glbfn_glGenFragmentShadersATI_loader (uint a00) {
  *cast(void**)&glGenFragmentShadersATI_Z = glbindGetProcAddress(`glGenFragmentShadersATI`);
  if (*cast(void**)&glGenFragmentShadersATI_Z is null) assert(0, `OpenGL function 'glGenFragmentShadersATI' not found!`);
  return glGenFragmentShadersATI_Z(a00,);
}
alias glBindFragmentShaderATI = glBindFragmentShaderATI_Z;
__gshared glbfn_glBindFragmentShaderATI glBindFragmentShaderATI_Z = function void (uint a00) {
  glbfn_glBindFragmentShaderATI_loader(a00,);
};
private void glbfn_glBindFragmentShaderATI_loader (uint a00) {
  *cast(void**)&glBindFragmentShaderATI_Z = glbindGetProcAddress(`glBindFragmentShaderATI`);
  if (*cast(void**)&glBindFragmentShaderATI_Z is null) assert(0, `OpenGL function 'glBindFragmentShaderATI' not found!`);
  glBindFragmentShaderATI_Z(a00,);
}
alias glDeleteFragmentShaderATI = glDeleteFragmentShaderATI_Z;
__gshared glbfn_glDeleteFragmentShaderATI glDeleteFragmentShaderATI_Z = function void (uint a00) {
  glbfn_glDeleteFragmentShaderATI_loader(a00,);
};
private void glbfn_glDeleteFragmentShaderATI_loader (uint a00) {
  *cast(void**)&glDeleteFragmentShaderATI_Z = glbindGetProcAddress(`glDeleteFragmentShaderATI`);
  if (*cast(void**)&glDeleteFragmentShaderATI_Z is null) assert(0, `OpenGL function 'glDeleteFragmentShaderATI' not found!`);
  glDeleteFragmentShaderATI_Z(a00,);
}
alias glBeginFragmentShaderATI = glBeginFragmentShaderATI_Z;
__gshared glbfn_glBeginFragmentShaderATI glBeginFragmentShaderATI_Z = function void () {
  glbfn_glBeginFragmentShaderATI_loader();
};
private void glbfn_glBeginFragmentShaderATI_loader () {
  *cast(void**)&glBeginFragmentShaderATI_Z = glbindGetProcAddress(`glBeginFragmentShaderATI`);
  if (*cast(void**)&glBeginFragmentShaderATI_Z is null) assert(0, `OpenGL function 'glBeginFragmentShaderATI' not found!`);
  glBeginFragmentShaderATI_Z();
}
alias glEndFragmentShaderATI = glEndFragmentShaderATI_Z;
__gshared glbfn_glEndFragmentShaderATI glEndFragmentShaderATI_Z = function void () {
  glbfn_glEndFragmentShaderATI_loader();
};
private void glbfn_glEndFragmentShaderATI_loader () {
  *cast(void**)&glEndFragmentShaderATI_Z = glbindGetProcAddress(`glEndFragmentShaderATI`);
  if (*cast(void**)&glEndFragmentShaderATI_Z is null) assert(0, `OpenGL function 'glEndFragmentShaderATI' not found!`);
  glEndFragmentShaderATI_Z();
}
alias glPassTexCoordATI = glPassTexCoordATI_Z;
__gshared glbfn_glPassTexCoordATI glPassTexCoordATI_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glPassTexCoordATI_loader(a00,a01,a02,);
};
private void glbfn_glPassTexCoordATI_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glPassTexCoordATI_Z = glbindGetProcAddress(`glPassTexCoordATI`);
  if (*cast(void**)&glPassTexCoordATI_Z is null) assert(0, `OpenGL function 'glPassTexCoordATI' not found!`);
  glPassTexCoordATI_Z(a00,a01,a02,);
}
alias glSampleMapATI = glSampleMapATI_Z;
__gshared glbfn_glSampleMapATI glSampleMapATI_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glSampleMapATI_loader(a00,a01,a02,);
};
private void glbfn_glSampleMapATI_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glSampleMapATI_Z = glbindGetProcAddress(`glSampleMapATI`);
  if (*cast(void**)&glSampleMapATI_Z is null) assert(0, `OpenGL function 'glSampleMapATI' not found!`);
  glSampleMapATI_Z(a00,a01,a02,);
}
alias glColorFragmentOp1ATI = glColorFragmentOp1ATI_Z;
__gshared glbfn_glColorFragmentOp1ATI glColorFragmentOp1ATI_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06) {
  glbfn_glColorFragmentOp1ATI_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glColorFragmentOp1ATI_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06) {
  *cast(void**)&glColorFragmentOp1ATI_Z = glbindGetProcAddress(`glColorFragmentOp1ATI`);
  if (*cast(void**)&glColorFragmentOp1ATI_Z is null) assert(0, `OpenGL function 'glColorFragmentOp1ATI' not found!`);
  glColorFragmentOp1ATI_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glColorFragmentOp2ATI = glColorFragmentOp2ATI_Z;
__gshared glbfn_glColorFragmentOp2ATI glColorFragmentOp2ATI_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09) {
  glbfn_glColorFragmentOp2ATI_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glColorFragmentOp2ATI_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09) {
  *cast(void**)&glColorFragmentOp2ATI_Z = glbindGetProcAddress(`glColorFragmentOp2ATI`);
  if (*cast(void**)&glColorFragmentOp2ATI_Z is null) assert(0, `OpenGL function 'glColorFragmentOp2ATI' not found!`);
  glColorFragmentOp2ATI_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glColorFragmentOp3ATI = glColorFragmentOp3ATI_Z;
__gshared glbfn_glColorFragmentOp3ATI glColorFragmentOp3ATI_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10,uint a11,uint a12) {
  glbfn_glColorFragmentOp3ATI_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
};
private void glbfn_glColorFragmentOp3ATI_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10,uint a11,uint a12) {
  *cast(void**)&glColorFragmentOp3ATI_Z = glbindGetProcAddress(`glColorFragmentOp3ATI`);
  if (*cast(void**)&glColorFragmentOp3ATI_Z is null) assert(0, `OpenGL function 'glColorFragmentOp3ATI' not found!`);
  glColorFragmentOp3ATI_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
}
alias glAlphaFragmentOp1ATI = glAlphaFragmentOp1ATI_Z;
__gshared glbfn_glAlphaFragmentOp1ATI glAlphaFragmentOp1ATI_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glAlphaFragmentOp1ATI_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glAlphaFragmentOp1ATI_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glAlphaFragmentOp1ATI_Z = glbindGetProcAddress(`glAlphaFragmentOp1ATI`);
  if (*cast(void**)&glAlphaFragmentOp1ATI_Z is null) assert(0, `OpenGL function 'glAlphaFragmentOp1ATI' not found!`);
  glAlphaFragmentOp1ATI_Z(a00,a01,a02,a03,a04,a05,);
}
alias glAlphaFragmentOp2ATI = glAlphaFragmentOp2ATI_Z;
__gshared glbfn_glAlphaFragmentOp2ATI glAlphaFragmentOp2ATI_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08) {
  glbfn_glAlphaFragmentOp2ATI_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glAlphaFragmentOp2ATI_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08) {
  *cast(void**)&glAlphaFragmentOp2ATI_Z = glbindGetProcAddress(`glAlphaFragmentOp2ATI`);
  if (*cast(void**)&glAlphaFragmentOp2ATI_Z is null) assert(0, `OpenGL function 'glAlphaFragmentOp2ATI' not found!`);
  glAlphaFragmentOp2ATI_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glAlphaFragmentOp3ATI = glAlphaFragmentOp3ATI_Z;
__gshared glbfn_glAlphaFragmentOp3ATI glAlphaFragmentOp3ATI_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10,uint a11) {
  glbfn_glAlphaFragmentOp3ATI_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glAlphaFragmentOp3ATI_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10,uint a11) {
  *cast(void**)&glAlphaFragmentOp3ATI_Z = glbindGetProcAddress(`glAlphaFragmentOp3ATI`);
  if (*cast(void**)&glAlphaFragmentOp3ATI_Z is null) assert(0, `OpenGL function 'glAlphaFragmentOp3ATI' not found!`);
  glAlphaFragmentOp3ATI_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glSetFragmentShaderConstantATI = glSetFragmentShaderConstantATI_Z;
__gshared glbfn_glSetFragmentShaderConstantATI glSetFragmentShaderConstantATI_Z = function void (uint a00,const(float)* a01) {
  glbfn_glSetFragmentShaderConstantATI_loader(a00,a01,);
};
private void glbfn_glSetFragmentShaderConstantATI_loader (uint a00,const(float)* a01) {
  *cast(void**)&glSetFragmentShaderConstantATI_Z = glbindGetProcAddress(`glSetFragmentShaderConstantATI`);
  if (*cast(void**)&glSetFragmentShaderConstantATI_Z is null) assert(0, `OpenGL function 'glSetFragmentShaderConstantATI' not found!`);
  glSetFragmentShaderConstantATI_Z(a00,a01,);
}
alias glMapObjectBufferATI = glMapObjectBufferATI_Z;
__gshared glbfn_glMapObjectBufferATI glMapObjectBufferATI_Z = function void* (uint a00) {
  return glbfn_glMapObjectBufferATI_loader(a00,);
};
private void* glbfn_glMapObjectBufferATI_loader (uint a00) {
  *cast(void**)&glMapObjectBufferATI_Z = glbindGetProcAddress(`glMapObjectBufferATI`);
  if (*cast(void**)&glMapObjectBufferATI_Z is null) assert(0, `OpenGL function 'glMapObjectBufferATI' not found!`);
  return glMapObjectBufferATI_Z(a00,);
}
alias glUnmapObjectBufferATI = glUnmapObjectBufferATI_Z;
__gshared glbfn_glUnmapObjectBufferATI glUnmapObjectBufferATI_Z = function void (uint a00) {
  glbfn_glUnmapObjectBufferATI_loader(a00,);
};
private void glbfn_glUnmapObjectBufferATI_loader (uint a00) {
  *cast(void**)&glUnmapObjectBufferATI_Z = glbindGetProcAddress(`glUnmapObjectBufferATI`);
  if (*cast(void**)&glUnmapObjectBufferATI_Z is null) assert(0, `OpenGL function 'glUnmapObjectBufferATI' not found!`);
  glUnmapObjectBufferATI_Z(a00,);
}
alias glPNTrianglesiATI = glPNTrianglesiATI_Z;
__gshared glbfn_glPNTrianglesiATI glPNTrianglesiATI_Z = function void (uint a00,int a01) {
  glbfn_glPNTrianglesiATI_loader(a00,a01,);
};
private void glbfn_glPNTrianglesiATI_loader (uint a00,int a01) {
  *cast(void**)&glPNTrianglesiATI_Z = glbindGetProcAddress(`glPNTrianglesiATI`);
  if (*cast(void**)&glPNTrianglesiATI_Z is null) assert(0, `OpenGL function 'glPNTrianglesiATI' not found!`);
  glPNTrianglesiATI_Z(a00,a01,);
}
alias glPNTrianglesfATI = glPNTrianglesfATI_Z;
__gshared glbfn_glPNTrianglesfATI glPNTrianglesfATI_Z = function void (uint a00,float a01) {
  glbfn_glPNTrianglesfATI_loader(a00,a01,);
};
private void glbfn_glPNTrianglesfATI_loader (uint a00,float a01) {
  *cast(void**)&glPNTrianglesfATI_Z = glbindGetProcAddress(`glPNTrianglesfATI`);
  if (*cast(void**)&glPNTrianglesfATI_Z is null) assert(0, `OpenGL function 'glPNTrianglesfATI' not found!`);
  glPNTrianglesfATI_Z(a00,a01,);
}
alias glStencilOpSeparateATI = glStencilOpSeparateATI_Z;
__gshared glbfn_glStencilOpSeparateATI glStencilOpSeparateATI_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glStencilOpSeparateATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glStencilOpSeparateATI_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glStencilOpSeparateATI_Z = glbindGetProcAddress(`glStencilOpSeparateATI`);
  if (*cast(void**)&glStencilOpSeparateATI_Z is null) assert(0, `OpenGL function 'glStencilOpSeparateATI' not found!`);
  glStencilOpSeparateATI_Z(a00,a01,a02,a03,);
}
alias glStencilFuncSeparateATI = glStencilFuncSeparateATI_Z;
__gshared glbfn_glStencilFuncSeparateATI glStencilFuncSeparateATI_Z = function void (uint a00,uint a01,int a02,uint a03) {
  glbfn_glStencilFuncSeparateATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glStencilFuncSeparateATI_loader (uint a00,uint a01,int a02,uint a03) {
  *cast(void**)&glStencilFuncSeparateATI_Z = glbindGetProcAddress(`glStencilFuncSeparateATI`);
  if (*cast(void**)&glStencilFuncSeparateATI_Z is null) assert(0, `OpenGL function 'glStencilFuncSeparateATI' not found!`);
  glStencilFuncSeparateATI_Z(a00,a01,a02,a03,);
}
alias glNewObjectBufferATI = glNewObjectBufferATI_Z;
__gshared glbfn_glNewObjectBufferATI glNewObjectBufferATI_Z = function uint (int a00,const(void)* a01,uint a02) {
  return glbfn_glNewObjectBufferATI_loader(a00,a01,a02,);
};
private uint glbfn_glNewObjectBufferATI_loader (int a00,const(void)* a01,uint a02) {
  *cast(void**)&glNewObjectBufferATI_Z = glbindGetProcAddress(`glNewObjectBufferATI`);
  if (*cast(void**)&glNewObjectBufferATI_Z is null) assert(0, `OpenGL function 'glNewObjectBufferATI' not found!`);
  return glNewObjectBufferATI_Z(a00,a01,a02,);
}
alias glIsObjectBufferATI = glIsObjectBufferATI_Z;
__gshared glbfn_glIsObjectBufferATI glIsObjectBufferATI_Z = function ubyte (uint a00) {
  return glbfn_glIsObjectBufferATI_loader(a00,);
};
private ubyte glbfn_glIsObjectBufferATI_loader (uint a00) {
  *cast(void**)&glIsObjectBufferATI_Z = glbindGetProcAddress(`glIsObjectBufferATI`);
  if (*cast(void**)&glIsObjectBufferATI_Z is null) assert(0, `OpenGL function 'glIsObjectBufferATI' not found!`);
  return glIsObjectBufferATI_Z(a00,);
}
alias glUpdateObjectBufferATI = glUpdateObjectBufferATI_Z;
__gshared glbfn_glUpdateObjectBufferATI glUpdateObjectBufferATI_Z = function void (uint a00,uint a01,int a02,const(void)* a03,uint a04) {
  glbfn_glUpdateObjectBufferATI_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUpdateObjectBufferATI_loader (uint a00,uint a01,int a02,const(void)* a03,uint a04) {
  *cast(void**)&glUpdateObjectBufferATI_Z = glbindGetProcAddress(`glUpdateObjectBufferATI`);
  if (*cast(void**)&glUpdateObjectBufferATI_Z is null) assert(0, `OpenGL function 'glUpdateObjectBufferATI' not found!`);
  glUpdateObjectBufferATI_Z(a00,a01,a02,a03,a04,);
}
alias glGetObjectBufferfvATI = glGetObjectBufferfvATI_Z;
__gshared glbfn_glGetObjectBufferfvATI glGetObjectBufferfvATI_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetObjectBufferfvATI_loader(a00,a01,a02,);
};
private void glbfn_glGetObjectBufferfvATI_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetObjectBufferfvATI_Z = glbindGetProcAddress(`glGetObjectBufferfvATI`);
  if (*cast(void**)&glGetObjectBufferfvATI_Z is null) assert(0, `OpenGL function 'glGetObjectBufferfvATI' not found!`);
  glGetObjectBufferfvATI_Z(a00,a01,a02,);
}
alias glGetObjectBufferivATI = glGetObjectBufferivATI_Z;
__gshared glbfn_glGetObjectBufferivATI glGetObjectBufferivATI_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetObjectBufferivATI_loader(a00,a01,a02,);
};
private void glbfn_glGetObjectBufferivATI_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetObjectBufferivATI_Z = glbindGetProcAddress(`glGetObjectBufferivATI`);
  if (*cast(void**)&glGetObjectBufferivATI_Z is null) assert(0, `OpenGL function 'glGetObjectBufferivATI' not found!`);
  glGetObjectBufferivATI_Z(a00,a01,a02,);
}
alias glFreeObjectBufferATI = glFreeObjectBufferATI_Z;
__gshared glbfn_glFreeObjectBufferATI glFreeObjectBufferATI_Z = function void (uint a00) {
  glbfn_glFreeObjectBufferATI_loader(a00,);
};
private void glbfn_glFreeObjectBufferATI_loader (uint a00) {
  *cast(void**)&glFreeObjectBufferATI_Z = glbindGetProcAddress(`glFreeObjectBufferATI`);
  if (*cast(void**)&glFreeObjectBufferATI_Z is null) assert(0, `OpenGL function 'glFreeObjectBufferATI' not found!`);
  glFreeObjectBufferATI_Z(a00,);
}
alias glArrayObjectATI = glArrayObjectATI_Z;
__gshared glbfn_glArrayObjectATI glArrayObjectATI_Z = function void (uint a00,int a01,uint a02,int a03,uint a04,uint a05) {
  glbfn_glArrayObjectATI_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glArrayObjectATI_loader (uint a00,int a01,uint a02,int a03,uint a04,uint a05) {
  *cast(void**)&glArrayObjectATI_Z = glbindGetProcAddress(`glArrayObjectATI`);
  if (*cast(void**)&glArrayObjectATI_Z is null) assert(0, `OpenGL function 'glArrayObjectATI' not found!`);
  glArrayObjectATI_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetArrayObjectfvATI = glGetArrayObjectfvATI_Z;
__gshared glbfn_glGetArrayObjectfvATI glGetArrayObjectfvATI_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetArrayObjectfvATI_loader(a00,a01,a02,);
};
private void glbfn_glGetArrayObjectfvATI_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetArrayObjectfvATI_Z = glbindGetProcAddress(`glGetArrayObjectfvATI`);
  if (*cast(void**)&glGetArrayObjectfvATI_Z is null) assert(0, `OpenGL function 'glGetArrayObjectfvATI' not found!`);
  glGetArrayObjectfvATI_Z(a00,a01,a02,);
}
alias glGetArrayObjectivATI = glGetArrayObjectivATI_Z;
__gshared glbfn_glGetArrayObjectivATI glGetArrayObjectivATI_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetArrayObjectivATI_loader(a00,a01,a02,);
};
private void glbfn_glGetArrayObjectivATI_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetArrayObjectivATI_Z = glbindGetProcAddress(`glGetArrayObjectivATI`);
  if (*cast(void**)&glGetArrayObjectivATI_Z is null) assert(0, `OpenGL function 'glGetArrayObjectivATI' not found!`);
  glGetArrayObjectivATI_Z(a00,a01,a02,);
}
alias glVariantArrayObjectATI = glVariantArrayObjectATI_Z;
__gshared glbfn_glVariantArrayObjectATI glVariantArrayObjectATI_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04) {
  glbfn_glVariantArrayObjectATI_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVariantArrayObjectATI_loader (uint a00,uint a01,int a02,uint a03,uint a04) {
  *cast(void**)&glVariantArrayObjectATI_Z = glbindGetProcAddress(`glVariantArrayObjectATI`);
  if (*cast(void**)&glVariantArrayObjectATI_Z is null) assert(0, `OpenGL function 'glVariantArrayObjectATI' not found!`);
  glVariantArrayObjectATI_Z(a00,a01,a02,a03,a04,);
}
alias glGetVariantArrayObjectfvATI = glGetVariantArrayObjectfvATI_Z;
__gshared glbfn_glGetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetVariantArrayObjectfvATI_loader(a00,a01,a02,);
};
private void glbfn_glGetVariantArrayObjectfvATI_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetVariantArrayObjectfvATI_Z = glbindGetProcAddress(`glGetVariantArrayObjectfvATI`);
  if (*cast(void**)&glGetVariantArrayObjectfvATI_Z is null) assert(0, `OpenGL function 'glGetVariantArrayObjectfvATI' not found!`);
  glGetVariantArrayObjectfvATI_Z(a00,a01,a02,);
}
alias glGetVariantArrayObjectivATI = glGetVariantArrayObjectivATI_Z;
__gshared glbfn_glGetVariantArrayObjectivATI glGetVariantArrayObjectivATI_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVariantArrayObjectivATI_loader(a00,a01,a02,);
};
private void glbfn_glGetVariantArrayObjectivATI_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVariantArrayObjectivATI_Z = glbindGetProcAddress(`glGetVariantArrayObjectivATI`);
  if (*cast(void**)&glGetVariantArrayObjectivATI_Z is null) assert(0, `OpenGL function 'glGetVariantArrayObjectivATI' not found!`);
  glGetVariantArrayObjectivATI_Z(a00,a01,a02,);
}
alias glVertexAttribArrayObjectATI = glVertexAttribArrayObjectATI_Z;
__gshared glbfn_glVertexAttribArrayObjectATI glVertexAttribArrayObjectATI_Z = function void (uint a00,int a01,uint a02,ubyte a03,int a04,uint a05,uint a06) {
  glbfn_glVertexAttribArrayObjectATI_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glVertexAttribArrayObjectATI_loader (uint a00,int a01,uint a02,ubyte a03,int a04,uint a05,uint a06) {
  *cast(void**)&glVertexAttribArrayObjectATI_Z = glbindGetProcAddress(`glVertexAttribArrayObjectATI`);
  if (*cast(void**)&glVertexAttribArrayObjectATI_Z is null) assert(0, `OpenGL function 'glVertexAttribArrayObjectATI' not found!`);
  glVertexAttribArrayObjectATI_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetVertexAttribArrayObjectfvATI = glGetVertexAttribArrayObjectfvATI_Z;
__gshared glbfn_glGetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetVertexAttribArrayObjectfvATI_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribArrayObjectfvATI_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetVertexAttribArrayObjectfvATI_Z = glbindGetProcAddress(`glGetVertexAttribArrayObjectfvATI`);
  if (*cast(void**)&glGetVertexAttribArrayObjectfvATI_Z is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectfvATI' not found!`);
  glGetVertexAttribArrayObjectfvATI_Z(a00,a01,a02,);
}
alias glGetVertexAttribArrayObjectivATI = glGetVertexAttribArrayObjectivATI_Z;
__gshared glbfn_glGetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexAttribArrayObjectivATI_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribArrayObjectivATI_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexAttribArrayObjectivATI_Z = glbindGetProcAddress(`glGetVertexAttribArrayObjectivATI`);
  if (*cast(void**)&glGetVertexAttribArrayObjectivATI_Z is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectivATI' not found!`);
  glGetVertexAttribArrayObjectivATI_Z(a00,a01,a02,);
}
alias glVertexStream1sATI = glVertexStream1sATI_Z;
__gshared glbfn_glVertexStream1sATI glVertexStream1sATI_Z = function void (uint a00,short a01) {
  glbfn_glVertexStream1sATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1sATI_loader (uint a00,short a01) {
  *cast(void**)&glVertexStream1sATI_Z = glbindGetProcAddress(`glVertexStream1sATI`);
  if (*cast(void**)&glVertexStream1sATI_Z is null) assert(0, `OpenGL function 'glVertexStream1sATI' not found!`);
  glVertexStream1sATI_Z(a00,a01,);
}
alias glVertexStream1svATI = glVertexStream1svATI_Z;
__gshared glbfn_glVertexStream1svATI glVertexStream1svATI_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexStream1svATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1svATI_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexStream1svATI_Z = glbindGetProcAddress(`glVertexStream1svATI`);
  if (*cast(void**)&glVertexStream1svATI_Z is null) assert(0, `OpenGL function 'glVertexStream1svATI' not found!`);
  glVertexStream1svATI_Z(a00,a01,);
}
alias glVertexStream1iATI = glVertexStream1iATI_Z;
__gshared glbfn_glVertexStream1iATI glVertexStream1iATI_Z = function void (uint a00,int a01) {
  glbfn_glVertexStream1iATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1iATI_loader (uint a00,int a01) {
  *cast(void**)&glVertexStream1iATI_Z = glbindGetProcAddress(`glVertexStream1iATI`);
  if (*cast(void**)&glVertexStream1iATI_Z is null) assert(0, `OpenGL function 'glVertexStream1iATI' not found!`);
  glVertexStream1iATI_Z(a00,a01,);
}
alias glVertexStream1ivATI = glVertexStream1ivATI_Z;
__gshared glbfn_glVertexStream1ivATI glVertexStream1ivATI_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexStream1ivATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1ivATI_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexStream1ivATI_Z = glbindGetProcAddress(`glVertexStream1ivATI`);
  if (*cast(void**)&glVertexStream1ivATI_Z is null) assert(0, `OpenGL function 'glVertexStream1ivATI' not found!`);
  glVertexStream1ivATI_Z(a00,a01,);
}
alias glVertexStream1fATI = glVertexStream1fATI_Z;
__gshared glbfn_glVertexStream1fATI glVertexStream1fATI_Z = function void (uint a00,float a01) {
  glbfn_glVertexStream1fATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1fATI_loader (uint a00,float a01) {
  *cast(void**)&glVertexStream1fATI_Z = glbindGetProcAddress(`glVertexStream1fATI`);
  if (*cast(void**)&glVertexStream1fATI_Z is null) assert(0, `OpenGL function 'glVertexStream1fATI' not found!`);
  glVertexStream1fATI_Z(a00,a01,);
}
alias glVertexStream1fvATI = glVertexStream1fvATI_Z;
__gshared glbfn_glVertexStream1fvATI glVertexStream1fvATI_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexStream1fvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1fvATI_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexStream1fvATI_Z = glbindGetProcAddress(`glVertexStream1fvATI`);
  if (*cast(void**)&glVertexStream1fvATI_Z is null) assert(0, `OpenGL function 'glVertexStream1fvATI' not found!`);
  glVertexStream1fvATI_Z(a00,a01,);
}
alias glVertexStream1dATI = glVertexStream1dATI_Z;
__gshared glbfn_glVertexStream1dATI glVertexStream1dATI_Z = function void (uint a00,double a01) {
  glbfn_glVertexStream1dATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1dATI_loader (uint a00,double a01) {
  *cast(void**)&glVertexStream1dATI_Z = glbindGetProcAddress(`glVertexStream1dATI`);
  if (*cast(void**)&glVertexStream1dATI_Z is null) assert(0, `OpenGL function 'glVertexStream1dATI' not found!`);
  glVertexStream1dATI_Z(a00,a01,);
}
alias glVertexStream1dvATI = glVertexStream1dvATI_Z;
__gshared glbfn_glVertexStream1dvATI glVertexStream1dvATI_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexStream1dvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream1dvATI_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexStream1dvATI_Z = glbindGetProcAddress(`glVertexStream1dvATI`);
  if (*cast(void**)&glVertexStream1dvATI_Z is null) assert(0, `OpenGL function 'glVertexStream1dvATI' not found!`);
  glVertexStream1dvATI_Z(a00,a01,);
}
alias glVertexStream2sATI = glVertexStream2sATI_Z;
__gshared glbfn_glVertexStream2sATI glVertexStream2sATI_Z = function void (uint a00,short a01,short a02) {
  glbfn_glVertexStream2sATI_loader(a00,a01,a02,);
};
private void glbfn_glVertexStream2sATI_loader (uint a00,short a01,short a02) {
  *cast(void**)&glVertexStream2sATI_Z = glbindGetProcAddress(`glVertexStream2sATI`);
  if (*cast(void**)&glVertexStream2sATI_Z is null) assert(0, `OpenGL function 'glVertexStream2sATI' not found!`);
  glVertexStream2sATI_Z(a00,a01,a02,);
}
alias glVertexStream2svATI = glVertexStream2svATI_Z;
__gshared glbfn_glVertexStream2svATI glVertexStream2svATI_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexStream2svATI_loader(a00,a01,);
};
private void glbfn_glVertexStream2svATI_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexStream2svATI_Z = glbindGetProcAddress(`glVertexStream2svATI`);
  if (*cast(void**)&glVertexStream2svATI_Z is null) assert(0, `OpenGL function 'glVertexStream2svATI' not found!`);
  glVertexStream2svATI_Z(a00,a01,);
}
alias glVertexStream2iATI = glVertexStream2iATI_Z;
__gshared glbfn_glVertexStream2iATI glVertexStream2iATI_Z = function void (uint a00,int a01,int a02) {
  glbfn_glVertexStream2iATI_loader(a00,a01,a02,);
};
private void glbfn_glVertexStream2iATI_loader (uint a00,int a01,int a02) {
  *cast(void**)&glVertexStream2iATI_Z = glbindGetProcAddress(`glVertexStream2iATI`);
  if (*cast(void**)&glVertexStream2iATI_Z is null) assert(0, `OpenGL function 'glVertexStream2iATI' not found!`);
  glVertexStream2iATI_Z(a00,a01,a02,);
}
alias glVertexStream2ivATI = glVertexStream2ivATI_Z;
__gshared glbfn_glVertexStream2ivATI glVertexStream2ivATI_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexStream2ivATI_loader(a00,a01,);
};
private void glbfn_glVertexStream2ivATI_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexStream2ivATI_Z = glbindGetProcAddress(`glVertexStream2ivATI`);
  if (*cast(void**)&glVertexStream2ivATI_Z is null) assert(0, `OpenGL function 'glVertexStream2ivATI' not found!`);
  glVertexStream2ivATI_Z(a00,a01,);
}
alias glVertexStream2fATI = glVertexStream2fATI_Z;
__gshared glbfn_glVertexStream2fATI glVertexStream2fATI_Z = function void (uint a00,float a01,float a02) {
  glbfn_glVertexStream2fATI_loader(a00,a01,a02,);
};
private void glbfn_glVertexStream2fATI_loader (uint a00,float a01,float a02) {
  *cast(void**)&glVertexStream2fATI_Z = glbindGetProcAddress(`glVertexStream2fATI`);
  if (*cast(void**)&glVertexStream2fATI_Z is null) assert(0, `OpenGL function 'glVertexStream2fATI' not found!`);
  glVertexStream2fATI_Z(a00,a01,a02,);
}
alias glVertexStream2fvATI = glVertexStream2fvATI_Z;
__gshared glbfn_glVertexStream2fvATI glVertexStream2fvATI_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexStream2fvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream2fvATI_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexStream2fvATI_Z = glbindGetProcAddress(`glVertexStream2fvATI`);
  if (*cast(void**)&glVertexStream2fvATI_Z is null) assert(0, `OpenGL function 'glVertexStream2fvATI' not found!`);
  glVertexStream2fvATI_Z(a00,a01,);
}
alias glVertexStream2dATI = glVertexStream2dATI_Z;
__gshared glbfn_glVertexStream2dATI glVertexStream2dATI_Z = function void (uint a00,double a01,double a02) {
  glbfn_glVertexStream2dATI_loader(a00,a01,a02,);
};
private void glbfn_glVertexStream2dATI_loader (uint a00,double a01,double a02) {
  *cast(void**)&glVertexStream2dATI_Z = glbindGetProcAddress(`glVertexStream2dATI`);
  if (*cast(void**)&glVertexStream2dATI_Z is null) assert(0, `OpenGL function 'glVertexStream2dATI' not found!`);
  glVertexStream2dATI_Z(a00,a01,a02,);
}
alias glVertexStream2dvATI = glVertexStream2dvATI_Z;
__gshared glbfn_glVertexStream2dvATI glVertexStream2dvATI_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexStream2dvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream2dvATI_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexStream2dvATI_Z = glbindGetProcAddress(`glVertexStream2dvATI`);
  if (*cast(void**)&glVertexStream2dvATI_Z is null) assert(0, `OpenGL function 'glVertexStream2dvATI' not found!`);
  glVertexStream2dvATI_Z(a00,a01,);
}
alias glVertexStream3sATI = glVertexStream3sATI_Z;
__gshared glbfn_glVertexStream3sATI glVertexStream3sATI_Z = function void (uint a00,short a01,short a02,short a03) {
  glbfn_glVertexStream3sATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexStream3sATI_loader (uint a00,short a01,short a02,short a03) {
  *cast(void**)&glVertexStream3sATI_Z = glbindGetProcAddress(`glVertexStream3sATI`);
  if (*cast(void**)&glVertexStream3sATI_Z is null) assert(0, `OpenGL function 'glVertexStream3sATI' not found!`);
  glVertexStream3sATI_Z(a00,a01,a02,a03,);
}
alias glVertexStream3svATI = glVertexStream3svATI_Z;
__gshared glbfn_glVertexStream3svATI glVertexStream3svATI_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexStream3svATI_loader(a00,a01,);
};
private void glbfn_glVertexStream3svATI_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexStream3svATI_Z = glbindGetProcAddress(`glVertexStream3svATI`);
  if (*cast(void**)&glVertexStream3svATI_Z is null) assert(0, `OpenGL function 'glVertexStream3svATI' not found!`);
  glVertexStream3svATI_Z(a00,a01,);
}
alias glVertexStream3iATI = glVertexStream3iATI_Z;
__gshared glbfn_glVertexStream3iATI glVertexStream3iATI_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glVertexStream3iATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexStream3iATI_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glVertexStream3iATI_Z = glbindGetProcAddress(`glVertexStream3iATI`);
  if (*cast(void**)&glVertexStream3iATI_Z is null) assert(0, `OpenGL function 'glVertexStream3iATI' not found!`);
  glVertexStream3iATI_Z(a00,a01,a02,a03,);
}
alias glVertexStream3ivATI = glVertexStream3ivATI_Z;
__gshared glbfn_glVertexStream3ivATI glVertexStream3ivATI_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexStream3ivATI_loader(a00,a01,);
};
private void glbfn_glVertexStream3ivATI_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexStream3ivATI_Z = glbindGetProcAddress(`glVertexStream3ivATI`);
  if (*cast(void**)&glVertexStream3ivATI_Z is null) assert(0, `OpenGL function 'glVertexStream3ivATI' not found!`);
  glVertexStream3ivATI_Z(a00,a01,);
}
alias glVertexStream3fATI = glVertexStream3fATI_Z;
__gshared glbfn_glVertexStream3fATI glVertexStream3fATI_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glVertexStream3fATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexStream3fATI_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glVertexStream3fATI_Z = glbindGetProcAddress(`glVertexStream3fATI`);
  if (*cast(void**)&glVertexStream3fATI_Z is null) assert(0, `OpenGL function 'glVertexStream3fATI' not found!`);
  glVertexStream3fATI_Z(a00,a01,a02,a03,);
}
alias glVertexStream3fvATI = glVertexStream3fvATI_Z;
__gshared glbfn_glVertexStream3fvATI glVertexStream3fvATI_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexStream3fvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream3fvATI_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexStream3fvATI_Z = glbindGetProcAddress(`glVertexStream3fvATI`);
  if (*cast(void**)&glVertexStream3fvATI_Z is null) assert(0, `OpenGL function 'glVertexStream3fvATI' not found!`);
  glVertexStream3fvATI_Z(a00,a01,);
}
alias glVertexStream3dATI = glVertexStream3dATI_Z;
__gshared glbfn_glVertexStream3dATI glVertexStream3dATI_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glVertexStream3dATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexStream3dATI_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glVertexStream3dATI_Z = glbindGetProcAddress(`glVertexStream3dATI`);
  if (*cast(void**)&glVertexStream3dATI_Z is null) assert(0, `OpenGL function 'glVertexStream3dATI' not found!`);
  glVertexStream3dATI_Z(a00,a01,a02,a03,);
}
alias glVertexStream3dvATI = glVertexStream3dvATI_Z;
__gshared glbfn_glVertexStream3dvATI glVertexStream3dvATI_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexStream3dvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream3dvATI_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexStream3dvATI_Z = glbindGetProcAddress(`glVertexStream3dvATI`);
  if (*cast(void**)&glVertexStream3dvATI_Z is null) assert(0, `OpenGL function 'glVertexStream3dvATI' not found!`);
  glVertexStream3dvATI_Z(a00,a01,);
}
alias glVertexStream4sATI = glVertexStream4sATI_Z;
__gshared glbfn_glVertexStream4sATI glVertexStream4sATI_Z = function void (uint a00,short a01,short a02,short a03,short a04) {
  glbfn_glVertexStream4sATI_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexStream4sATI_loader (uint a00,short a01,short a02,short a03,short a04) {
  *cast(void**)&glVertexStream4sATI_Z = glbindGetProcAddress(`glVertexStream4sATI`);
  if (*cast(void**)&glVertexStream4sATI_Z is null) assert(0, `OpenGL function 'glVertexStream4sATI' not found!`);
  glVertexStream4sATI_Z(a00,a01,a02,a03,a04,);
}
alias glVertexStream4svATI = glVertexStream4svATI_Z;
__gshared glbfn_glVertexStream4svATI glVertexStream4svATI_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexStream4svATI_loader(a00,a01,);
};
private void glbfn_glVertexStream4svATI_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexStream4svATI_Z = glbindGetProcAddress(`glVertexStream4svATI`);
  if (*cast(void**)&glVertexStream4svATI_Z is null) assert(0, `OpenGL function 'glVertexStream4svATI' not found!`);
  glVertexStream4svATI_Z(a00,a01,);
}
alias glVertexStream4iATI = glVertexStream4iATI_Z;
__gshared glbfn_glVertexStream4iATI glVertexStream4iATI_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glVertexStream4iATI_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexStream4iATI_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glVertexStream4iATI_Z = glbindGetProcAddress(`glVertexStream4iATI`);
  if (*cast(void**)&glVertexStream4iATI_Z is null) assert(0, `OpenGL function 'glVertexStream4iATI' not found!`);
  glVertexStream4iATI_Z(a00,a01,a02,a03,a04,);
}
alias glVertexStream4ivATI = glVertexStream4ivATI_Z;
__gshared glbfn_glVertexStream4ivATI glVertexStream4ivATI_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexStream4ivATI_loader(a00,a01,);
};
private void glbfn_glVertexStream4ivATI_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexStream4ivATI_Z = glbindGetProcAddress(`glVertexStream4ivATI`);
  if (*cast(void**)&glVertexStream4ivATI_Z is null) assert(0, `OpenGL function 'glVertexStream4ivATI' not found!`);
  glVertexStream4ivATI_Z(a00,a01,);
}
alias glVertexStream4fATI = glVertexStream4fATI_Z;
__gshared glbfn_glVertexStream4fATI glVertexStream4fATI_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glVertexStream4fATI_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexStream4fATI_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glVertexStream4fATI_Z = glbindGetProcAddress(`glVertexStream4fATI`);
  if (*cast(void**)&glVertexStream4fATI_Z is null) assert(0, `OpenGL function 'glVertexStream4fATI' not found!`);
  glVertexStream4fATI_Z(a00,a01,a02,a03,a04,);
}
alias glVertexStream4fvATI = glVertexStream4fvATI_Z;
__gshared glbfn_glVertexStream4fvATI glVertexStream4fvATI_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexStream4fvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream4fvATI_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexStream4fvATI_Z = glbindGetProcAddress(`glVertexStream4fvATI`);
  if (*cast(void**)&glVertexStream4fvATI_Z is null) assert(0, `OpenGL function 'glVertexStream4fvATI' not found!`);
  glVertexStream4fvATI_Z(a00,a01,);
}
alias glVertexStream4dATI = glVertexStream4dATI_Z;
__gshared glbfn_glVertexStream4dATI glVertexStream4dATI_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glVertexStream4dATI_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexStream4dATI_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glVertexStream4dATI_Z = glbindGetProcAddress(`glVertexStream4dATI`);
  if (*cast(void**)&glVertexStream4dATI_Z is null) assert(0, `OpenGL function 'glVertexStream4dATI' not found!`);
  glVertexStream4dATI_Z(a00,a01,a02,a03,a04,);
}
alias glVertexStream4dvATI = glVertexStream4dvATI_Z;
__gshared glbfn_glVertexStream4dvATI glVertexStream4dvATI_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexStream4dvATI_loader(a00,a01,);
};
private void glbfn_glVertexStream4dvATI_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexStream4dvATI_Z = glbindGetProcAddress(`glVertexStream4dvATI`);
  if (*cast(void**)&glVertexStream4dvATI_Z is null) assert(0, `OpenGL function 'glVertexStream4dvATI' not found!`);
  glVertexStream4dvATI_Z(a00,a01,);
}
alias glNormalStream3bATI = glNormalStream3bATI_Z;
__gshared glbfn_glNormalStream3bATI glNormalStream3bATI_Z = function void (uint a00,byte a01,byte a02,byte a03) {
  glbfn_glNormalStream3bATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glNormalStream3bATI_loader (uint a00,byte a01,byte a02,byte a03) {
  *cast(void**)&glNormalStream3bATI_Z = glbindGetProcAddress(`glNormalStream3bATI`);
  if (*cast(void**)&glNormalStream3bATI_Z is null) assert(0, `OpenGL function 'glNormalStream3bATI' not found!`);
  glNormalStream3bATI_Z(a00,a01,a02,a03,);
}
alias glNormalStream3bvATI = glNormalStream3bvATI_Z;
__gshared glbfn_glNormalStream3bvATI glNormalStream3bvATI_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glNormalStream3bvATI_loader(a00,a01,);
};
private void glbfn_glNormalStream3bvATI_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glNormalStream3bvATI_Z = glbindGetProcAddress(`glNormalStream3bvATI`);
  if (*cast(void**)&glNormalStream3bvATI_Z is null) assert(0, `OpenGL function 'glNormalStream3bvATI' not found!`);
  glNormalStream3bvATI_Z(a00,a01,);
}
alias glNormalStream3sATI = glNormalStream3sATI_Z;
__gshared glbfn_glNormalStream3sATI glNormalStream3sATI_Z = function void (uint a00,short a01,short a02,short a03) {
  glbfn_glNormalStream3sATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glNormalStream3sATI_loader (uint a00,short a01,short a02,short a03) {
  *cast(void**)&glNormalStream3sATI_Z = glbindGetProcAddress(`glNormalStream3sATI`);
  if (*cast(void**)&glNormalStream3sATI_Z is null) assert(0, `OpenGL function 'glNormalStream3sATI' not found!`);
  glNormalStream3sATI_Z(a00,a01,a02,a03,);
}
alias glNormalStream3svATI = glNormalStream3svATI_Z;
__gshared glbfn_glNormalStream3svATI glNormalStream3svATI_Z = function void (uint a00,const(short)* a01) {
  glbfn_glNormalStream3svATI_loader(a00,a01,);
};
private void glbfn_glNormalStream3svATI_loader (uint a00,const(short)* a01) {
  *cast(void**)&glNormalStream3svATI_Z = glbindGetProcAddress(`glNormalStream3svATI`);
  if (*cast(void**)&glNormalStream3svATI_Z is null) assert(0, `OpenGL function 'glNormalStream3svATI' not found!`);
  glNormalStream3svATI_Z(a00,a01,);
}
alias glNormalStream3iATI = glNormalStream3iATI_Z;
__gshared glbfn_glNormalStream3iATI glNormalStream3iATI_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glNormalStream3iATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glNormalStream3iATI_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glNormalStream3iATI_Z = glbindGetProcAddress(`glNormalStream3iATI`);
  if (*cast(void**)&glNormalStream3iATI_Z is null) assert(0, `OpenGL function 'glNormalStream3iATI' not found!`);
  glNormalStream3iATI_Z(a00,a01,a02,a03,);
}
alias glNormalStream3ivATI = glNormalStream3ivATI_Z;
__gshared glbfn_glNormalStream3ivATI glNormalStream3ivATI_Z = function void (uint a00,const(int)* a01) {
  glbfn_glNormalStream3ivATI_loader(a00,a01,);
};
private void glbfn_glNormalStream3ivATI_loader (uint a00,const(int)* a01) {
  *cast(void**)&glNormalStream3ivATI_Z = glbindGetProcAddress(`glNormalStream3ivATI`);
  if (*cast(void**)&glNormalStream3ivATI_Z is null) assert(0, `OpenGL function 'glNormalStream3ivATI' not found!`);
  glNormalStream3ivATI_Z(a00,a01,);
}
alias glNormalStream3fATI = glNormalStream3fATI_Z;
__gshared glbfn_glNormalStream3fATI glNormalStream3fATI_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glNormalStream3fATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glNormalStream3fATI_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glNormalStream3fATI_Z = glbindGetProcAddress(`glNormalStream3fATI`);
  if (*cast(void**)&glNormalStream3fATI_Z is null) assert(0, `OpenGL function 'glNormalStream3fATI' not found!`);
  glNormalStream3fATI_Z(a00,a01,a02,a03,);
}
alias glNormalStream3fvATI = glNormalStream3fvATI_Z;
__gshared glbfn_glNormalStream3fvATI glNormalStream3fvATI_Z = function void (uint a00,const(float)* a01) {
  glbfn_glNormalStream3fvATI_loader(a00,a01,);
};
private void glbfn_glNormalStream3fvATI_loader (uint a00,const(float)* a01) {
  *cast(void**)&glNormalStream3fvATI_Z = glbindGetProcAddress(`glNormalStream3fvATI`);
  if (*cast(void**)&glNormalStream3fvATI_Z is null) assert(0, `OpenGL function 'glNormalStream3fvATI' not found!`);
  glNormalStream3fvATI_Z(a00,a01,);
}
alias glNormalStream3dATI = glNormalStream3dATI_Z;
__gshared glbfn_glNormalStream3dATI glNormalStream3dATI_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glNormalStream3dATI_loader(a00,a01,a02,a03,);
};
private void glbfn_glNormalStream3dATI_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glNormalStream3dATI_Z = glbindGetProcAddress(`glNormalStream3dATI`);
  if (*cast(void**)&glNormalStream3dATI_Z is null) assert(0, `OpenGL function 'glNormalStream3dATI' not found!`);
  glNormalStream3dATI_Z(a00,a01,a02,a03,);
}
alias glNormalStream3dvATI = glNormalStream3dvATI_Z;
__gshared glbfn_glNormalStream3dvATI glNormalStream3dvATI_Z = function void (uint a00,const(double)* a01) {
  glbfn_glNormalStream3dvATI_loader(a00,a01,);
};
private void glbfn_glNormalStream3dvATI_loader (uint a00,const(double)* a01) {
  *cast(void**)&glNormalStream3dvATI_Z = glbindGetProcAddress(`glNormalStream3dvATI`);
  if (*cast(void**)&glNormalStream3dvATI_Z is null) assert(0, `OpenGL function 'glNormalStream3dvATI' not found!`);
  glNormalStream3dvATI_Z(a00,a01,);
}
alias glClientActiveVertexStreamATI = glClientActiveVertexStreamATI_Z;
__gshared glbfn_glClientActiveVertexStreamATI glClientActiveVertexStreamATI_Z = function void (uint a00) {
  glbfn_glClientActiveVertexStreamATI_loader(a00,);
};
private void glbfn_glClientActiveVertexStreamATI_loader (uint a00) {
  *cast(void**)&glClientActiveVertexStreamATI_Z = glbindGetProcAddress(`glClientActiveVertexStreamATI`);
  if (*cast(void**)&glClientActiveVertexStreamATI_Z is null) assert(0, `OpenGL function 'glClientActiveVertexStreamATI' not found!`);
  glClientActiveVertexStreamATI_Z(a00,);
}
alias glVertexBlendEnviATI = glVertexBlendEnviATI_Z;
__gshared glbfn_glVertexBlendEnviATI glVertexBlendEnviATI_Z = function void (uint a00,int a01) {
  glbfn_glVertexBlendEnviATI_loader(a00,a01,);
};
private void glbfn_glVertexBlendEnviATI_loader (uint a00,int a01) {
  *cast(void**)&glVertexBlendEnviATI_Z = glbindGetProcAddress(`glVertexBlendEnviATI`);
  if (*cast(void**)&glVertexBlendEnviATI_Z is null) assert(0, `OpenGL function 'glVertexBlendEnviATI' not found!`);
  glVertexBlendEnviATI_Z(a00,a01,);
}
alias glVertexBlendEnvfATI = glVertexBlendEnvfATI_Z;
__gshared glbfn_glVertexBlendEnvfATI glVertexBlendEnvfATI_Z = function void (uint a00,float a01) {
  glbfn_glVertexBlendEnvfATI_loader(a00,a01,);
};
private void glbfn_glVertexBlendEnvfATI_loader (uint a00,float a01) {
  *cast(void**)&glVertexBlendEnvfATI_Z = glbindGetProcAddress(`glVertexBlendEnvfATI`);
  if (*cast(void**)&glVertexBlendEnvfATI_Z is null) assert(0, `OpenGL function 'glVertexBlendEnvfATI' not found!`);
  glVertexBlendEnvfATI_Z(a00,a01,);
}
alias glUniformBufferEXT = glUniformBufferEXT_Z;
__gshared glbfn_glUniformBufferEXT glUniformBufferEXT_Z = function void (uint a00,int a01,uint a02) {
  glbfn_glUniformBufferEXT_loader(a00,a01,a02,);
};
private void glbfn_glUniformBufferEXT_loader (uint a00,int a01,uint a02) {
  *cast(void**)&glUniformBufferEXT_Z = glbindGetProcAddress(`glUniformBufferEXT`);
  if (*cast(void**)&glUniformBufferEXT_Z is null) assert(0, `OpenGL function 'glUniformBufferEXT' not found!`);
  glUniformBufferEXT_Z(a00,a01,a02,);
}
alias glGetUniformBufferSizeEXT = glGetUniformBufferSizeEXT_Z;
__gshared glbfn_glGetUniformBufferSizeEXT glGetUniformBufferSizeEXT_Z = function int (uint a00,int a01) {
  return glbfn_glGetUniformBufferSizeEXT_loader(a00,a01,);
};
private int glbfn_glGetUniformBufferSizeEXT_loader (uint a00,int a01) {
  *cast(void**)&glGetUniformBufferSizeEXT_Z = glbindGetProcAddress(`glGetUniformBufferSizeEXT`);
  if (*cast(void**)&glGetUniformBufferSizeEXT_Z is null) assert(0, `OpenGL function 'glGetUniformBufferSizeEXT' not found!`);
  return glGetUniformBufferSizeEXT_Z(a00,a01,);
}
alias glGetUniformOffsetEXT = glGetUniformOffsetEXT_Z;
__gshared glbfn_glGetUniformOffsetEXT glGetUniformOffsetEXT_Z = function int (uint a00,int a01) {
  return glbfn_glGetUniformOffsetEXT_loader(a00,a01,);
};
private int glbfn_glGetUniformOffsetEXT_loader (uint a00,int a01) {
  *cast(void**)&glGetUniformOffsetEXT_Z = glbindGetProcAddress(`glGetUniformOffsetEXT`);
  if (*cast(void**)&glGetUniformOffsetEXT_Z is null) assert(0, `OpenGL function 'glGetUniformOffsetEXT' not found!`);
  return glGetUniformOffsetEXT_Z(a00,a01,);
}
alias glBlendColorEXT = glBlendColorEXT_Z;
__gshared glbfn_glBlendColorEXT glBlendColorEXT_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glBlendColorEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glBlendColorEXT_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glBlendColorEXT_Z = glbindGetProcAddress(`glBlendColorEXT`);
  if (*cast(void**)&glBlendColorEXT_Z is null) assert(0, `OpenGL function 'glBlendColorEXT' not found!`);
  glBlendColorEXT_Z(a00,a01,a02,a03,);
}
alias glBlendEquationSeparateEXT = glBlendEquationSeparateEXT_Z;
__gshared glbfn_glBlendEquationSeparateEXT glBlendEquationSeparateEXT_Z = function void (uint a00,uint a01) {
  glbfn_glBlendEquationSeparateEXT_loader(a00,a01,);
};
private void glbfn_glBlendEquationSeparateEXT_loader (uint a00,uint a01) {
  *cast(void**)&glBlendEquationSeparateEXT_Z = glbindGetProcAddress(`glBlendEquationSeparateEXT`);
  if (*cast(void**)&glBlendEquationSeparateEXT_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateEXT' not found!`);
  glBlendEquationSeparateEXT_Z(a00,a01,);
}
alias glBlendFuncSeparateEXT = glBlendFuncSeparateEXT_Z;
__gshared glbfn_glBlendFuncSeparateEXT glBlendFuncSeparateEXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glBlendFuncSeparateEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glBlendFuncSeparateEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glBlendFuncSeparateEXT_Z = glbindGetProcAddress(`glBlendFuncSeparateEXT`);
  if (*cast(void**)&glBlendFuncSeparateEXT_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateEXT' not found!`);
  glBlendFuncSeparateEXT_Z(a00,a01,a02,a03,);
}
alias glBlendEquationEXT = glBlendEquationEXT_Z;
__gshared glbfn_glBlendEquationEXT glBlendEquationEXT_Z = function void (uint a00) {
  glbfn_glBlendEquationEXT_loader(a00,);
};
private void glbfn_glBlendEquationEXT_loader (uint a00) {
  *cast(void**)&glBlendEquationEXT_Z = glbindGetProcAddress(`glBlendEquationEXT`);
  if (*cast(void**)&glBlendEquationEXT_Z is null) assert(0, `OpenGL function 'glBlendEquationEXT' not found!`);
  glBlendEquationEXT_Z(a00,);
}
alias glColorSubTableEXT = glColorSubTableEXT_Z;
__gshared glbfn_glColorSubTableEXT glColorSubTableEXT_Z = function void (uint a00,int a01,int a02,uint a03,uint a04,const(void)* a05) {
  glbfn_glColorSubTableEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glColorSubTableEXT_loader (uint a00,int a01,int a02,uint a03,uint a04,const(void)* a05) {
  *cast(void**)&glColorSubTableEXT_Z = glbindGetProcAddress(`glColorSubTableEXT`);
  if (*cast(void**)&glColorSubTableEXT_Z is null) assert(0, `OpenGL function 'glColorSubTableEXT' not found!`);
  glColorSubTableEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glCopyColorSubTableEXT = glCopyColorSubTableEXT_Z;
__gshared glbfn_glCopyColorSubTableEXT glCopyColorSubTableEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glCopyColorSubTableEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyColorSubTableEXT_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyColorSubTableEXT_Z = glbindGetProcAddress(`glCopyColorSubTableEXT`);
  if (*cast(void**)&glCopyColorSubTableEXT_Z is null) assert(0, `OpenGL function 'glCopyColorSubTableEXT' not found!`);
  glCopyColorSubTableEXT_Z(a00,a01,a02,a03,a04,);
}
alias glLockArraysEXT = glLockArraysEXT_Z;
__gshared glbfn_glLockArraysEXT glLockArraysEXT_Z = function void (int a00,int a01) {
  glbfn_glLockArraysEXT_loader(a00,a01,);
};
private void glbfn_glLockArraysEXT_loader (int a00,int a01) {
  *cast(void**)&glLockArraysEXT_Z = glbindGetProcAddress(`glLockArraysEXT`);
  if (*cast(void**)&glLockArraysEXT_Z is null) assert(0, `OpenGL function 'glLockArraysEXT' not found!`);
  glLockArraysEXT_Z(a00,a01,);
}
alias glUnlockArraysEXT = glUnlockArraysEXT_Z;
__gshared glbfn_glUnlockArraysEXT glUnlockArraysEXT_Z = function void () {
  glbfn_glUnlockArraysEXT_loader();
};
private void glbfn_glUnlockArraysEXT_loader () {
  *cast(void**)&glUnlockArraysEXT_Z = glbindGetProcAddress(`glUnlockArraysEXT`);
  if (*cast(void**)&glUnlockArraysEXT_Z is null) assert(0, `OpenGL function 'glUnlockArraysEXT' not found!`);
  glUnlockArraysEXT_Z();
}
alias glConvolutionFilter1DEXT = glConvolutionFilter1DEXT_Z;
__gshared glbfn_glConvolutionFilter1DEXT glConvolutionFilter1DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  glbfn_glConvolutionFilter1DEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glConvolutionFilter1DEXT_loader (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  *cast(void**)&glConvolutionFilter1DEXT_Z = glbindGetProcAddress(`glConvolutionFilter1DEXT`);
  if (*cast(void**)&glConvolutionFilter1DEXT_Z is null) assert(0, `OpenGL function 'glConvolutionFilter1DEXT' not found!`);
  glConvolutionFilter1DEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glConvolutionFilter2DEXT = glConvolutionFilter2DEXT_Z;
__gshared glbfn_glConvolutionFilter2DEXT glConvolutionFilter2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glConvolutionFilter2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glConvolutionFilter2DEXT_loader (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glConvolutionFilter2DEXT_Z = glbindGetProcAddress(`glConvolutionFilter2DEXT`);
  if (*cast(void**)&glConvolutionFilter2DEXT_Z is null) assert(0, `OpenGL function 'glConvolutionFilter2DEXT' not found!`);
  glConvolutionFilter2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glConvolutionParameterfEXT = glConvolutionParameterfEXT_Z;
__gshared glbfn_glConvolutionParameterfEXT glConvolutionParameterfEXT_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glConvolutionParameterfEXT_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameterfEXT_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glConvolutionParameterfEXT_Z = glbindGetProcAddress(`glConvolutionParameterfEXT`);
  if (*cast(void**)&glConvolutionParameterfEXT_Z is null) assert(0, `OpenGL function 'glConvolutionParameterfEXT' not found!`);
  glConvolutionParameterfEXT_Z(a00,a01,a02,);
}
alias glConvolutionParameterfvEXT = glConvolutionParameterfvEXT_Z;
__gshared glbfn_glConvolutionParameterfvEXT glConvolutionParameterfvEXT_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glConvolutionParameterfvEXT_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameterfvEXT_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glConvolutionParameterfvEXT_Z = glbindGetProcAddress(`glConvolutionParameterfvEXT`);
  if (*cast(void**)&glConvolutionParameterfvEXT_Z is null) assert(0, `OpenGL function 'glConvolutionParameterfvEXT' not found!`);
  glConvolutionParameterfvEXT_Z(a00,a01,a02,);
}
alias glConvolutionParameteriEXT = glConvolutionParameteriEXT_Z;
__gshared glbfn_glConvolutionParameteriEXT glConvolutionParameteriEXT_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glConvolutionParameteriEXT_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameteriEXT_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glConvolutionParameteriEXT_Z = glbindGetProcAddress(`glConvolutionParameteriEXT`);
  if (*cast(void**)&glConvolutionParameteriEXT_Z is null) assert(0, `OpenGL function 'glConvolutionParameteriEXT' not found!`);
  glConvolutionParameteriEXT_Z(a00,a01,a02,);
}
alias glConvolutionParameterivEXT = glConvolutionParameterivEXT_Z;
__gshared glbfn_glConvolutionParameterivEXT glConvolutionParameterivEXT_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glConvolutionParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameterivEXT_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glConvolutionParameterivEXT_Z = glbindGetProcAddress(`glConvolutionParameterivEXT`);
  if (*cast(void**)&glConvolutionParameterivEXT_Z is null) assert(0, `OpenGL function 'glConvolutionParameterivEXT' not found!`);
  glConvolutionParameterivEXT_Z(a00,a01,a02,);
}
alias glCopyConvolutionFilter1DEXT = glCopyConvolutionFilter1DEXT_Z;
__gshared glbfn_glCopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04) {
  glbfn_glCopyConvolutionFilter1DEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyConvolutionFilter1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyConvolutionFilter1DEXT_Z = glbindGetProcAddress(`glCopyConvolutionFilter1DEXT`);
  if (*cast(void**)&glCopyConvolutionFilter1DEXT_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1DEXT' not found!`);
  glCopyConvolutionFilter1DEXT_Z(a00,a01,a02,a03,a04,);
}
alias glCopyConvolutionFilter2DEXT = glCopyConvolutionFilter2DEXT_Z;
__gshared glbfn_glCopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  glbfn_glCopyConvolutionFilter2DEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glCopyConvolutionFilter2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glCopyConvolutionFilter2DEXT_Z = glbindGetProcAddress(`glCopyConvolutionFilter2DEXT`);
  if (*cast(void**)&glCopyConvolutionFilter2DEXT_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2DEXT' not found!`);
  glCopyConvolutionFilter2DEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetConvolutionFilterEXT = glGetConvolutionFilterEXT_Z;
__gshared glbfn_glGetConvolutionFilterEXT glGetConvolutionFilterEXT_Z = function void (uint a00,uint a01,uint a02,void* a03) {
  glbfn_glGetConvolutionFilterEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetConvolutionFilterEXT_loader (uint a00,uint a01,uint a02,void* a03) {
  *cast(void**)&glGetConvolutionFilterEXT_Z = glbindGetProcAddress(`glGetConvolutionFilterEXT`);
  if (*cast(void**)&glGetConvolutionFilterEXT_Z is null) assert(0, `OpenGL function 'glGetConvolutionFilterEXT' not found!`);
  glGetConvolutionFilterEXT_Z(a00,a01,a02,a03,);
}
alias glGetConvolutionParameterfvEXT = glGetConvolutionParameterfvEXT_Z;
__gshared glbfn_glGetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetConvolutionParameterfvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetConvolutionParameterfvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetConvolutionParameterfvEXT_Z = glbindGetProcAddress(`glGetConvolutionParameterfvEXT`);
  if (*cast(void**)&glGetConvolutionParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterfvEXT' not found!`);
  glGetConvolutionParameterfvEXT_Z(a00,a01,a02,);
}
alias glGetConvolutionParameterivEXT = glGetConvolutionParameterivEXT_Z;
__gshared glbfn_glGetConvolutionParameterivEXT glGetConvolutionParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetConvolutionParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetConvolutionParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetConvolutionParameterivEXT_Z = glbindGetProcAddress(`glGetConvolutionParameterivEXT`);
  if (*cast(void**)&glGetConvolutionParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterivEXT' not found!`);
  glGetConvolutionParameterivEXT_Z(a00,a01,a02,);
}
alias glGetSeparableFilterEXT = glGetSeparableFilterEXT_Z;
__gshared glbfn_glGetSeparableFilterEXT glGetSeparableFilterEXT_Z = function void (uint a00,uint a01,uint a02,void* a03,void* a04,void* a05) {
  glbfn_glGetSeparableFilterEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetSeparableFilterEXT_loader (uint a00,uint a01,uint a02,void* a03,void* a04,void* a05) {
  *cast(void**)&glGetSeparableFilterEXT_Z = glbindGetProcAddress(`glGetSeparableFilterEXT`);
  if (*cast(void**)&glGetSeparableFilterEXT_Z is null) assert(0, `OpenGL function 'glGetSeparableFilterEXT' not found!`);
  glGetSeparableFilterEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glSeparableFilter2DEXT = glSeparableFilter2DEXT_Z;
__gshared glbfn_glSeparableFilter2DEXT glSeparableFilter2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06,const(void)* a07) {
  glbfn_glSeparableFilter2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glSeparableFilter2DEXT_loader (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06,const(void)* a07) {
  *cast(void**)&glSeparableFilter2DEXT_Z = glbindGetProcAddress(`glSeparableFilter2DEXT`);
  if (*cast(void**)&glSeparableFilter2DEXT_Z is null) assert(0, `OpenGL function 'glSeparableFilter2DEXT' not found!`);
  glSeparableFilter2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTangent3bEXT = glTangent3bEXT_Z;
__gshared glbfn_glTangent3bEXT glTangent3bEXT_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glTangent3bEXT_loader(a00,a01,a02,);
};
private void glbfn_glTangent3bEXT_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glTangent3bEXT_Z = glbindGetProcAddress(`glTangent3bEXT`);
  if (*cast(void**)&glTangent3bEXT_Z is null) assert(0, `OpenGL function 'glTangent3bEXT' not found!`);
  glTangent3bEXT_Z(a00,a01,a02,);
}
alias glTangent3bvEXT = glTangent3bvEXT_Z;
__gshared glbfn_glTangent3bvEXT glTangent3bvEXT_Z = function void (const(byte)* a00) {
  glbfn_glTangent3bvEXT_loader(a00,);
};
private void glbfn_glTangent3bvEXT_loader (const(byte)* a00) {
  *cast(void**)&glTangent3bvEXT_Z = glbindGetProcAddress(`glTangent3bvEXT`);
  if (*cast(void**)&glTangent3bvEXT_Z is null) assert(0, `OpenGL function 'glTangent3bvEXT' not found!`);
  glTangent3bvEXT_Z(a00,);
}
alias glTangent3dEXT = glTangent3dEXT_Z;
__gshared glbfn_glTangent3dEXT glTangent3dEXT_Z = function void (double a00,double a01,double a02) {
  glbfn_glTangent3dEXT_loader(a00,a01,a02,);
};
private void glbfn_glTangent3dEXT_loader (double a00,double a01,double a02) {
  *cast(void**)&glTangent3dEXT_Z = glbindGetProcAddress(`glTangent3dEXT`);
  if (*cast(void**)&glTangent3dEXT_Z is null) assert(0, `OpenGL function 'glTangent3dEXT' not found!`);
  glTangent3dEXT_Z(a00,a01,a02,);
}
alias glTangent3dvEXT = glTangent3dvEXT_Z;
__gshared glbfn_glTangent3dvEXT glTangent3dvEXT_Z = function void (const(double)* a00) {
  glbfn_glTangent3dvEXT_loader(a00,);
};
private void glbfn_glTangent3dvEXT_loader (const(double)* a00) {
  *cast(void**)&glTangent3dvEXT_Z = glbindGetProcAddress(`glTangent3dvEXT`);
  if (*cast(void**)&glTangent3dvEXT_Z is null) assert(0, `OpenGL function 'glTangent3dvEXT' not found!`);
  glTangent3dvEXT_Z(a00,);
}
alias glTangent3fEXT = glTangent3fEXT_Z;
__gshared glbfn_glTangent3fEXT glTangent3fEXT_Z = function void (float a00,float a01,float a02) {
  glbfn_glTangent3fEXT_loader(a00,a01,a02,);
};
private void glbfn_glTangent3fEXT_loader (float a00,float a01,float a02) {
  *cast(void**)&glTangent3fEXT_Z = glbindGetProcAddress(`glTangent3fEXT`);
  if (*cast(void**)&glTangent3fEXT_Z is null) assert(0, `OpenGL function 'glTangent3fEXT' not found!`);
  glTangent3fEXT_Z(a00,a01,a02,);
}
alias glTangent3fvEXT = glTangent3fvEXT_Z;
__gshared glbfn_glTangent3fvEXT glTangent3fvEXT_Z = function void (const(float)* a00) {
  glbfn_glTangent3fvEXT_loader(a00,);
};
private void glbfn_glTangent3fvEXT_loader (const(float)* a00) {
  *cast(void**)&glTangent3fvEXT_Z = glbindGetProcAddress(`glTangent3fvEXT`);
  if (*cast(void**)&glTangent3fvEXT_Z is null) assert(0, `OpenGL function 'glTangent3fvEXT' not found!`);
  glTangent3fvEXT_Z(a00,);
}
alias glTangent3iEXT = glTangent3iEXT_Z;
__gshared glbfn_glTangent3iEXT glTangent3iEXT_Z = function void (int a00,int a01,int a02) {
  glbfn_glTangent3iEXT_loader(a00,a01,a02,);
};
private void glbfn_glTangent3iEXT_loader (int a00,int a01,int a02) {
  *cast(void**)&glTangent3iEXT_Z = glbindGetProcAddress(`glTangent3iEXT`);
  if (*cast(void**)&glTangent3iEXT_Z is null) assert(0, `OpenGL function 'glTangent3iEXT' not found!`);
  glTangent3iEXT_Z(a00,a01,a02,);
}
alias glTangent3ivEXT = glTangent3ivEXT_Z;
__gshared glbfn_glTangent3ivEXT glTangent3ivEXT_Z = function void (const(int)* a00) {
  glbfn_glTangent3ivEXT_loader(a00,);
};
private void glbfn_glTangent3ivEXT_loader (const(int)* a00) {
  *cast(void**)&glTangent3ivEXT_Z = glbindGetProcAddress(`glTangent3ivEXT`);
  if (*cast(void**)&glTangent3ivEXT_Z is null) assert(0, `OpenGL function 'glTangent3ivEXT' not found!`);
  glTangent3ivEXT_Z(a00,);
}
alias glTangent3sEXT = glTangent3sEXT_Z;
__gshared glbfn_glTangent3sEXT glTangent3sEXT_Z = function void (short a00,short a01,short a02) {
  glbfn_glTangent3sEXT_loader(a00,a01,a02,);
};
private void glbfn_glTangent3sEXT_loader (short a00,short a01,short a02) {
  *cast(void**)&glTangent3sEXT_Z = glbindGetProcAddress(`glTangent3sEXT`);
  if (*cast(void**)&glTangent3sEXT_Z is null) assert(0, `OpenGL function 'glTangent3sEXT' not found!`);
  glTangent3sEXT_Z(a00,a01,a02,);
}
alias glTangent3svEXT = glTangent3svEXT_Z;
__gshared glbfn_glTangent3svEXT glTangent3svEXT_Z = function void (const(short)* a00) {
  glbfn_glTangent3svEXT_loader(a00,);
};
private void glbfn_glTangent3svEXT_loader (const(short)* a00) {
  *cast(void**)&glTangent3svEXT_Z = glbindGetProcAddress(`glTangent3svEXT`);
  if (*cast(void**)&glTangent3svEXT_Z is null) assert(0, `OpenGL function 'glTangent3svEXT' not found!`);
  glTangent3svEXT_Z(a00,);
}
alias glBinormal3bEXT = glBinormal3bEXT_Z;
__gshared glbfn_glBinormal3bEXT glBinormal3bEXT_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glBinormal3bEXT_loader(a00,a01,a02,);
};
private void glbfn_glBinormal3bEXT_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glBinormal3bEXT_Z = glbindGetProcAddress(`glBinormal3bEXT`);
  if (*cast(void**)&glBinormal3bEXT_Z is null) assert(0, `OpenGL function 'glBinormal3bEXT' not found!`);
  glBinormal3bEXT_Z(a00,a01,a02,);
}
alias glBinormal3bvEXT = glBinormal3bvEXT_Z;
__gshared glbfn_glBinormal3bvEXT glBinormal3bvEXT_Z = function void (const(byte)* a00) {
  glbfn_glBinormal3bvEXT_loader(a00,);
};
private void glbfn_glBinormal3bvEXT_loader (const(byte)* a00) {
  *cast(void**)&glBinormal3bvEXT_Z = glbindGetProcAddress(`glBinormal3bvEXT`);
  if (*cast(void**)&glBinormal3bvEXT_Z is null) assert(0, `OpenGL function 'glBinormal3bvEXT' not found!`);
  glBinormal3bvEXT_Z(a00,);
}
alias glBinormal3dEXT = glBinormal3dEXT_Z;
__gshared glbfn_glBinormal3dEXT glBinormal3dEXT_Z = function void (double a00,double a01,double a02) {
  glbfn_glBinormal3dEXT_loader(a00,a01,a02,);
};
private void glbfn_glBinormal3dEXT_loader (double a00,double a01,double a02) {
  *cast(void**)&glBinormal3dEXT_Z = glbindGetProcAddress(`glBinormal3dEXT`);
  if (*cast(void**)&glBinormal3dEXT_Z is null) assert(0, `OpenGL function 'glBinormal3dEXT' not found!`);
  glBinormal3dEXT_Z(a00,a01,a02,);
}
alias glBinormal3dvEXT = glBinormal3dvEXT_Z;
__gshared glbfn_glBinormal3dvEXT glBinormal3dvEXT_Z = function void (const(double)* a00) {
  glbfn_glBinormal3dvEXT_loader(a00,);
};
private void glbfn_glBinormal3dvEXT_loader (const(double)* a00) {
  *cast(void**)&glBinormal3dvEXT_Z = glbindGetProcAddress(`glBinormal3dvEXT`);
  if (*cast(void**)&glBinormal3dvEXT_Z is null) assert(0, `OpenGL function 'glBinormal3dvEXT' not found!`);
  glBinormal3dvEXT_Z(a00,);
}
alias glBinormal3fEXT = glBinormal3fEXT_Z;
__gshared glbfn_glBinormal3fEXT glBinormal3fEXT_Z = function void (float a00,float a01,float a02) {
  glbfn_glBinormal3fEXT_loader(a00,a01,a02,);
};
private void glbfn_glBinormal3fEXT_loader (float a00,float a01,float a02) {
  *cast(void**)&glBinormal3fEXT_Z = glbindGetProcAddress(`glBinormal3fEXT`);
  if (*cast(void**)&glBinormal3fEXT_Z is null) assert(0, `OpenGL function 'glBinormal3fEXT' not found!`);
  glBinormal3fEXT_Z(a00,a01,a02,);
}
alias glBinormal3fvEXT = glBinormal3fvEXT_Z;
__gshared glbfn_glBinormal3fvEXT glBinormal3fvEXT_Z = function void (const(float)* a00) {
  glbfn_glBinormal3fvEXT_loader(a00,);
};
private void glbfn_glBinormal3fvEXT_loader (const(float)* a00) {
  *cast(void**)&glBinormal3fvEXT_Z = glbindGetProcAddress(`glBinormal3fvEXT`);
  if (*cast(void**)&glBinormal3fvEXT_Z is null) assert(0, `OpenGL function 'glBinormal3fvEXT' not found!`);
  glBinormal3fvEXT_Z(a00,);
}
alias glBinormal3iEXT = glBinormal3iEXT_Z;
__gshared glbfn_glBinormal3iEXT glBinormal3iEXT_Z = function void (int a00,int a01,int a02) {
  glbfn_glBinormal3iEXT_loader(a00,a01,a02,);
};
private void glbfn_glBinormal3iEXT_loader (int a00,int a01,int a02) {
  *cast(void**)&glBinormal3iEXT_Z = glbindGetProcAddress(`glBinormal3iEXT`);
  if (*cast(void**)&glBinormal3iEXT_Z is null) assert(0, `OpenGL function 'glBinormal3iEXT' not found!`);
  glBinormal3iEXT_Z(a00,a01,a02,);
}
alias glBinormal3ivEXT = glBinormal3ivEXT_Z;
__gshared glbfn_glBinormal3ivEXT glBinormal3ivEXT_Z = function void (const(int)* a00) {
  glbfn_glBinormal3ivEXT_loader(a00,);
};
private void glbfn_glBinormal3ivEXT_loader (const(int)* a00) {
  *cast(void**)&glBinormal3ivEXT_Z = glbindGetProcAddress(`glBinormal3ivEXT`);
  if (*cast(void**)&glBinormal3ivEXT_Z is null) assert(0, `OpenGL function 'glBinormal3ivEXT' not found!`);
  glBinormal3ivEXT_Z(a00,);
}
alias glBinormal3sEXT = glBinormal3sEXT_Z;
__gshared glbfn_glBinormal3sEXT glBinormal3sEXT_Z = function void (short a00,short a01,short a02) {
  glbfn_glBinormal3sEXT_loader(a00,a01,a02,);
};
private void glbfn_glBinormal3sEXT_loader (short a00,short a01,short a02) {
  *cast(void**)&glBinormal3sEXT_Z = glbindGetProcAddress(`glBinormal3sEXT`);
  if (*cast(void**)&glBinormal3sEXT_Z is null) assert(0, `OpenGL function 'glBinormal3sEXT' not found!`);
  glBinormal3sEXT_Z(a00,a01,a02,);
}
alias glBinormal3svEXT = glBinormal3svEXT_Z;
__gshared glbfn_glBinormal3svEXT glBinormal3svEXT_Z = function void (const(short)* a00) {
  glbfn_glBinormal3svEXT_loader(a00,);
};
private void glbfn_glBinormal3svEXT_loader (const(short)* a00) {
  *cast(void**)&glBinormal3svEXT_Z = glbindGetProcAddress(`glBinormal3svEXT`);
  if (*cast(void**)&glBinormal3svEXT_Z is null) assert(0, `OpenGL function 'glBinormal3svEXT' not found!`);
  glBinormal3svEXT_Z(a00,);
}
alias glTangentPointerEXT = glTangentPointerEXT_Z;
__gshared glbfn_glTangentPointerEXT glTangentPointerEXT_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glTangentPointerEXT_loader(a00,a01,a02,);
};
private void glbfn_glTangentPointerEXT_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glTangentPointerEXT_Z = glbindGetProcAddress(`glTangentPointerEXT`);
  if (*cast(void**)&glTangentPointerEXT_Z is null) assert(0, `OpenGL function 'glTangentPointerEXT' not found!`);
  glTangentPointerEXT_Z(a00,a01,a02,);
}
alias glBinormalPointerEXT = glBinormalPointerEXT_Z;
__gshared glbfn_glBinormalPointerEXT glBinormalPointerEXT_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glBinormalPointerEXT_loader(a00,a01,a02,);
};
private void glbfn_glBinormalPointerEXT_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glBinormalPointerEXT_Z = glbindGetProcAddress(`glBinormalPointerEXT`);
  if (*cast(void**)&glBinormalPointerEXT_Z is null) assert(0, `OpenGL function 'glBinormalPointerEXT' not found!`);
  glBinormalPointerEXT_Z(a00,a01,a02,);
}
alias glCopyTexImage1DEXT = glCopyTexImage1DEXT_Z;
__gshared glbfn_glCopyTexImage1DEXT glCopyTexImage1DEXT_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06) {
  glbfn_glCopyTexImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCopyTexImage1DEXT_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glCopyTexImage1DEXT_Z = glbindGetProcAddress(`glCopyTexImage1DEXT`);
  if (*cast(void**)&glCopyTexImage1DEXT_Z is null) assert(0, `OpenGL function 'glCopyTexImage1DEXT' not found!`);
  glCopyTexImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCopyTexImage2DEXT = glCopyTexImage2DEXT_Z;
__gshared glbfn_glCopyTexImage2DEXT glCopyTexImage2DEXT_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07) {
  glbfn_glCopyTexImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCopyTexImage2DEXT_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glCopyTexImage2DEXT_Z = glbindGetProcAddress(`glCopyTexImage2DEXT`);
  if (*cast(void**)&glCopyTexImage2DEXT_Z is null) assert(0, `OpenGL function 'glCopyTexImage2DEXT' not found!`);
  glCopyTexImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCopyTexSubImage1DEXT = glCopyTexSubImage1DEXT_Z;
__gshared glbfn_glCopyTexSubImage1DEXT glCopyTexSubImage1DEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glCopyTexSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glCopyTexSubImage1DEXT_loader (uint a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glCopyTexSubImage1DEXT_Z = glbindGetProcAddress(`glCopyTexSubImage1DEXT`);
  if (*cast(void**)&glCopyTexSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage1DEXT' not found!`);
  glCopyTexSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glCopyTexSubImage2DEXT = glCopyTexSubImage2DEXT_Z;
__gshared glbfn_glCopyTexSubImage2DEXT glCopyTexSubImage2DEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  glbfn_glCopyTexSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCopyTexSubImage2DEXT_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glCopyTexSubImage2DEXT_Z = glbindGetProcAddress(`glCopyTexSubImage2DEXT`);
  if (*cast(void**)&glCopyTexSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage2DEXT' not found!`);
  glCopyTexSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCopyTexSubImage3DEXT = glCopyTexSubImage3DEXT_Z;
__gshared glbfn_glCopyTexSubImage3DEXT glCopyTexSubImage3DEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  glbfn_glCopyTexSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCopyTexSubImage3DEXT_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  *cast(void**)&glCopyTexSubImage3DEXT_Z = glbindGetProcAddress(`glCopyTexSubImage3DEXT`);
  if (*cast(void**)&glCopyTexSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage3DEXT' not found!`);
  glCopyTexSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCullParameterdvEXT = glCullParameterdvEXT_Z;
__gshared glbfn_glCullParameterdvEXT glCullParameterdvEXT_Z = function void (uint a00,double* a01) {
  glbfn_glCullParameterdvEXT_loader(a00,a01,);
};
private void glbfn_glCullParameterdvEXT_loader (uint a00,double* a01) {
  *cast(void**)&glCullParameterdvEXT_Z = glbindGetProcAddress(`glCullParameterdvEXT`);
  if (*cast(void**)&glCullParameterdvEXT_Z is null) assert(0, `OpenGL function 'glCullParameterdvEXT' not found!`);
  glCullParameterdvEXT_Z(a00,a01,);
}
alias glCullParameterfvEXT = glCullParameterfvEXT_Z;
__gshared glbfn_glCullParameterfvEXT glCullParameterfvEXT_Z = function void (uint a00,float* a01) {
  glbfn_glCullParameterfvEXT_loader(a00,a01,);
};
private void glbfn_glCullParameterfvEXT_loader (uint a00,float* a01) {
  *cast(void**)&glCullParameterfvEXT_Z = glbindGetProcAddress(`glCullParameterfvEXT`);
  if (*cast(void**)&glCullParameterfvEXT_Z is null) assert(0, `OpenGL function 'glCullParameterfvEXT' not found!`);
  glCullParameterfvEXT_Z(a00,a01,);
}
alias glLabelObjectEXT = glLabelObjectEXT_Z;
__gshared glbfn_glLabelObjectEXT glLabelObjectEXT_Z = function void (uint a00,uint a01,int a02,const(char)* a03) {
  glbfn_glLabelObjectEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glLabelObjectEXT_loader (uint a00,uint a01,int a02,const(char)* a03) {
  *cast(void**)&glLabelObjectEXT_Z = glbindGetProcAddress(`glLabelObjectEXT`);
  if (*cast(void**)&glLabelObjectEXT_Z is null) assert(0, `OpenGL function 'glLabelObjectEXT' not found!`);
  glLabelObjectEXT_Z(a00,a01,a02,a03,);
}
alias glGetObjectLabelEXT = glGetObjectLabelEXT_Z;
__gshared glbfn_glGetObjectLabelEXT glGetObjectLabelEXT_Z = function void (uint a00,uint a01,int a02,int* a03,char* a04) {
  glbfn_glGetObjectLabelEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetObjectLabelEXT_loader (uint a00,uint a01,int a02,int* a03,char* a04) {
  *cast(void**)&glGetObjectLabelEXT_Z = glbindGetProcAddress(`glGetObjectLabelEXT`);
  if (*cast(void**)&glGetObjectLabelEXT_Z is null) assert(0, `OpenGL function 'glGetObjectLabelEXT' not found!`);
  glGetObjectLabelEXT_Z(a00,a01,a02,a03,a04,);
}
alias glInsertEventMarkerEXT = glInsertEventMarkerEXT_Z;
__gshared glbfn_glInsertEventMarkerEXT glInsertEventMarkerEXT_Z = function void (int a00,const(char)* a01) {
  glbfn_glInsertEventMarkerEXT_loader(a00,a01,);
};
private void glbfn_glInsertEventMarkerEXT_loader (int a00,const(char)* a01) {
  *cast(void**)&glInsertEventMarkerEXT_Z = glbindGetProcAddress(`glInsertEventMarkerEXT`);
  if (*cast(void**)&glInsertEventMarkerEXT_Z is null) assert(0, `OpenGL function 'glInsertEventMarkerEXT' not found!`);
  glInsertEventMarkerEXT_Z(a00,a01,);
}
alias glPushGroupMarkerEXT = glPushGroupMarkerEXT_Z;
__gshared glbfn_glPushGroupMarkerEXT glPushGroupMarkerEXT_Z = function void (int a00,const(char)* a01) {
  glbfn_glPushGroupMarkerEXT_loader(a00,a01,);
};
private void glbfn_glPushGroupMarkerEXT_loader (int a00,const(char)* a01) {
  *cast(void**)&glPushGroupMarkerEXT_Z = glbindGetProcAddress(`glPushGroupMarkerEXT`);
  if (*cast(void**)&glPushGroupMarkerEXT_Z is null) assert(0, `OpenGL function 'glPushGroupMarkerEXT' not found!`);
  glPushGroupMarkerEXT_Z(a00,a01,);
}
alias glPopGroupMarkerEXT = glPopGroupMarkerEXT_Z;
__gshared glbfn_glPopGroupMarkerEXT glPopGroupMarkerEXT_Z = function void () {
  glbfn_glPopGroupMarkerEXT_loader();
};
private void glbfn_glPopGroupMarkerEXT_loader () {
  *cast(void**)&glPopGroupMarkerEXT_Z = glbindGetProcAddress(`glPopGroupMarkerEXT`);
  if (*cast(void**)&glPopGroupMarkerEXT_Z is null) assert(0, `OpenGL function 'glPopGroupMarkerEXT' not found!`);
  glPopGroupMarkerEXT_Z();
}
alias glDepthBoundsEXT = glDepthBoundsEXT_Z;
__gshared glbfn_glDepthBoundsEXT glDepthBoundsEXT_Z = function void (double a00,double a01) {
  glbfn_glDepthBoundsEXT_loader(a00,a01,);
};
private void glbfn_glDepthBoundsEXT_loader (double a00,double a01) {
  *cast(void**)&glDepthBoundsEXT_Z = glbindGetProcAddress(`glDepthBoundsEXT`);
  if (*cast(void**)&glDepthBoundsEXT_Z is null) assert(0, `OpenGL function 'glDepthBoundsEXT' not found!`);
  glDepthBoundsEXT_Z(a00,a01,);
}
alias glMatrixLoadfEXT = glMatrixLoadfEXT_Z;
__gshared glbfn_glMatrixLoadfEXT glMatrixLoadfEXT_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixLoadfEXT_loader(a00,a01,);
};
private void glbfn_glMatrixLoadfEXT_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixLoadfEXT_Z = glbindGetProcAddress(`glMatrixLoadfEXT`);
  if (*cast(void**)&glMatrixLoadfEXT_Z is null) assert(0, `OpenGL function 'glMatrixLoadfEXT' not found!`);
  glMatrixLoadfEXT_Z(a00,a01,);
}
alias glMatrixLoaddEXT = glMatrixLoaddEXT_Z;
__gshared glbfn_glMatrixLoaddEXT glMatrixLoaddEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMatrixLoaddEXT_loader(a00,a01,);
};
private void glbfn_glMatrixLoaddEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMatrixLoaddEXT_Z = glbindGetProcAddress(`glMatrixLoaddEXT`);
  if (*cast(void**)&glMatrixLoaddEXT_Z is null) assert(0, `OpenGL function 'glMatrixLoaddEXT' not found!`);
  glMatrixLoaddEXT_Z(a00,a01,);
}
alias glMatrixMultfEXT = glMatrixMultfEXT_Z;
__gshared glbfn_glMatrixMultfEXT glMatrixMultfEXT_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixMultfEXT_loader(a00,a01,);
};
private void glbfn_glMatrixMultfEXT_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixMultfEXT_Z = glbindGetProcAddress(`glMatrixMultfEXT`);
  if (*cast(void**)&glMatrixMultfEXT_Z is null) assert(0, `OpenGL function 'glMatrixMultfEXT' not found!`);
  glMatrixMultfEXT_Z(a00,a01,);
}
alias glMatrixMultdEXT = glMatrixMultdEXT_Z;
__gshared glbfn_glMatrixMultdEXT glMatrixMultdEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMatrixMultdEXT_loader(a00,a01,);
};
private void glbfn_glMatrixMultdEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMatrixMultdEXT_Z = glbindGetProcAddress(`glMatrixMultdEXT`);
  if (*cast(void**)&glMatrixMultdEXT_Z is null) assert(0, `OpenGL function 'glMatrixMultdEXT' not found!`);
  glMatrixMultdEXT_Z(a00,a01,);
}
alias glMatrixLoadIdentityEXT = glMatrixLoadIdentityEXT_Z;
__gshared glbfn_glMatrixLoadIdentityEXT glMatrixLoadIdentityEXT_Z = function void (uint a00) {
  glbfn_glMatrixLoadIdentityEXT_loader(a00,);
};
private void glbfn_glMatrixLoadIdentityEXT_loader (uint a00) {
  *cast(void**)&glMatrixLoadIdentityEXT_Z = glbindGetProcAddress(`glMatrixLoadIdentityEXT`);
  if (*cast(void**)&glMatrixLoadIdentityEXT_Z is null) assert(0, `OpenGL function 'glMatrixLoadIdentityEXT' not found!`);
  glMatrixLoadIdentityEXT_Z(a00,);
}
alias glMatrixRotatefEXT = glMatrixRotatefEXT_Z;
__gshared glbfn_glMatrixRotatefEXT glMatrixRotatefEXT_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glMatrixRotatefEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMatrixRotatefEXT_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glMatrixRotatefEXT_Z = glbindGetProcAddress(`glMatrixRotatefEXT`);
  if (*cast(void**)&glMatrixRotatefEXT_Z is null) assert(0, `OpenGL function 'glMatrixRotatefEXT' not found!`);
  glMatrixRotatefEXT_Z(a00,a01,a02,a03,a04,);
}
alias glMatrixRotatedEXT = glMatrixRotatedEXT_Z;
__gshared glbfn_glMatrixRotatedEXT glMatrixRotatedEXT_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glMatrixRotatedEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMatrixRotatedEXT_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glMatrixRotatedEXT_Z = glbindGetProcAddress(`glMatrixRotatedEXT`);
  if (*cast(void**)&glMatrixRotatedEXT_Z is null) assert(0, `OpenGL function 'glMatrixRotatedEXT' not found!`);
  glMatrixRotatedEXT_Z(a00,a01,a02,a03,a04,);
}
alias glMatrixScalefEXT = glMatrixScalefEXT_Z;
__gshared glbfn_glMatrixScalefEXT glMatrixScalefEXT_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glMatrixScalefEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMatrixScalefEXT_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glMatrixScalefEXT_Z = glbindGetProcAddress(`glMatrixScalefEXT`);
  if (*cast(void**)&glMatrixScalefEXT_Z is null) assert(0, `OpenGL function 'glMatrixScalefEXT' not found!`);
  glMatrixScalefEXT_Z(a00,a01,a02,a03,);
}
alias glMatrixScaledEXT = glMatrixScaledEXT_Z;
__gshared glbfn_glMatrixScaledEXT glMatrixScaledEXT_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glMatrixScaledEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMatrixScaledEXT_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glMatrixScaledEXT_Z = glbindGetProcAddress(`glMatrixScaledEXT`);
  if (*cast(void**)&glMatrixScaledEXT_Z is null) assert(0, `OpenGL function 'glMatrixScaledEXT' not found!`);
  glMatrixScaledEXT_Z(a00,a01,a02,a03,);
}
alias glMatrixTranslatefEXT = glMatrixTranslatefEXT_Z;
__gshared glbfn_glMatrixTranslatefEXT glMatrixTranslatefEXT_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glMatrixTranslatefEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMatrixTranslatefEXT_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glMatrixTranslatefEXT_Z = glbindGetProcAddress(`glMatrixTranslatefEXT`);
  if (*cast(void**)&glMatrixTranslatefEXT_Z is null) assert(0, `OpenGL function 'glMatrixTranslatefEXT' not found!`);
  glMatrixTranslatefEXT_Z(a00,a01,a02,a03,);
}
alias glMatrixTranslatedEXT = glMatrixTranslatedEXT_Z;
__gshared glbfn_glMatrixTranslatedEXT glMatrixTranslatedEXT_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glMatrixTranslatedEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMatrixTranslatedEXT_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glMatrixTranslatedEXT_Z = glbindGetProcAddress(`glMatrixTranslatedEXT`);
  if (*cast(void**)&glMatrixTranslatedEXT_Z is null) assert(0, `OpenGL function 'glMatrixTranslatedEXT' not found!`);
  glMatrixTranslatedEXT_Z(a00,a01,a02,a03,);
}
alias glMatrixFrustumEXT = glMatrixFrustumEXT_Z;
__gshared glbfn_glMatrixFrustumEXT glMatrixFrustumEXT_Z = function void (uint a00,double a01,double a02,double a03,double a04,double a05,double a06) {
  glbfn_glMatrixFrustumEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glMatrixFrustumEXT_loader (uint a00,double a01,double a02,double a03,double a04,double a05,double a06) {
  *cast(void**)&glMatrixFrustumEXT_Z = glbindGetProcAddress(`glMatrixFrustumEXT`);
  if (*cast(void**)&glMatrixFrustumEXT_Z is null) assert(0, `OpenGL function 'glMatrixFrustumEXT' not found!`);
  glMatrixFrustumEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMatrixOrthoEXT = glMatrixOrthoEXT_Z;
__gshared glbfn_glMatrixOrthoEXT glMatrixOrthoEXT_Z = function void (uint a00,double a01,double a02,double a03,double a04,double a05,double a06) {
  glbfn_glMatrixOrthoEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glMatrixOrthoEXT_loader (uint a00,double a01,double a02,double a03,double a04,double a05,double a06) {
  *cast(void**)&glMatrixOrthoEXT_Z = glbindGetProcAddress(`glMatrixOrthoEXT`);
  if (*cast(void**)&glMatrixOrthoEXT_Z is null) assert(0, `OpenGL function 'glMatrixOrthoEXT' not found!`);
  glMatrixOrthoEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMatrixPopEXT = glMatrixPopEXT_Z;
__gshared glbfn_glMatrixPopEXT glMatrixPopEXT_Z = function void (uint a00) {
  glbfn_glMatrixPopEXT_loader(a00,);
};
private void glbfn_glMatrixPopEXT_loader (uint a00) {
  *cast(void**)&glMatrixPopEXT_Z = glbindGetProcAddress(`glMatrixPopEXT`);
  if (*cast(void**)&glMatrixPopEXT_Z is null) assert(0, `OpenGL function 'glMatrixPopEXT' not found!`);
  glMatrixPopEXT_Z(a00,);
}
alias glMatrixPushEXT = glMatrixPushEXT_Z;
__gshared glbfn_glMatrixPushEXT glMatrixPushEXT_Z = function void (uint a00) {
  glbfn_glMatrixPushEXT_loader(a00,);
};
private void glbfn_glMatrixPushEXT_loader (uint a00) {
  *cast(void**)&glMatrixPushEXT_Z = glbindGetProcAddress(`glMatrixPushEXT`);
  if (*cast(void**)&glMatrixPushEXT_Z is null) assert(0, `OpenGL function 'glMatrixPushEXT' not found!`);
  glMatrixPushEXT_Z(a00,);
}
alias glClientAttribDefaultEXT = glClientAttribDefaultEXT_Z;
__gshared glbfn_glClientAttribDefaultEXT glClientAttribDefaultEXT_Z = function void (uint a00) {
  glbfn_glClientAttribDefaultEXT_loader(a00,);
};
private void glbfn_glClientAttribDefaultEXT_loader (uint a00) {
  *cast(void**)&glClientAttribDefaultEXT_Z = glbindGetProcAddress(`glClientAttribDefaultEXT`);
  if (*cast(void**)&glClientAttribDefaultEXT_Z is null) assert(0, `OpenGL function 'glClientAttribDefaultEXT' not found!`);
  glClientAttribDefaultEXT_Z(a00,);
}
alias glPushClientAttribDefaultEXT = glPushClientAttribDefaultEXT_Z;
__gshared glbfn_glPushClientAttribDefaultEXT glPushClientAttribDefaultEXT_Z = function void (uint a00) {
  glbfn_glPushClientAttribDefaultEXT_loader(a00,);
};
private void glbfn_glPushClientAttribDefaultEXT_loader (uint a00) {
  *cast(void**)&glPushClientAttribDefaultEXT_Z = glbindGetProcAddress(`glPushClientAttribDefaultEXT`);
  if (*cast(void**)&glPushClientAttribDefaultEXT_Z is null) assert(0, `OpenGL function 'glPushClientAttribDefaultEXT' not found!`);
  glPushClientAttribDefaultEXT_Z(a00,);
}
alias glTextureParameterfEXT = glTextureParameterfEXT_Z;
__gshared glbfn_glTextureParameterfEXT glTextureParameterfEXT_Z = function void (uint a00,uint a01,uint a02,float a03) {
  glbfn_glTextureParameterfEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureParameterfEXT_loader (uint a00,uint a01,uint a02,float a03) {
  *cast(void**)&glTextureParameterfEXT_Z = glbindGetProcAddress(`glTextureParameterfEXT`);
  if (*cast(void**)&glTextureParameterfEXT_Z is null) assert(0, `OpenGL function 'glTextureParameterfEXT' not found!`);
  glTextureParameterfEXT_Z(a00,a01,a02,a03,);
}
alias glTextureParameterfvEXT = glTextureParameterfvEXT_Z;
__gshared glbfn_glTextureParameterfvEXT glTextureParameterfvEXT_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glTextureParameterfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureParameterfvEXT_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glTextureParameterfvEXT_Z = glbindGetProcAddress(`glTextureParameterfvEXT`);
  if (*cast(void**)&glTextureParameterfvEXT_Z is null) assert(0, `OpenGL function 'glTextureParameterfvEXT' not found!`);
  glTextureParameterfvEXT_Z(a00,a01,a02,a03,);
}
alias glTextureParameteriEXT = glTextureParameteriEXT_Z;
__gshared glbfn_glTextureParameteriEXT glTextureParameteriEXT_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glTextureParameteriEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureParameteriEXT_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glTextureParameteriEXT_Z = glbindGetProcAddress(`glTextureParameteriEXT`);
  if (*cast(void**)&glTextureParameteriEXT_Z is null) assert(0, `OpenGL function 'glTextureParameteriEXT' not found!`);
  glTextureParameteriEXT_Z(a00,a01,a02,a03,);
}
alias glTextureParameterivEXT = glTextureParameterivEXT_Z;
__gshared glbfn_glTextureParameterivEXT glTextureParameterivEXT_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glTextureParameterivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureParameterivEXT_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glTextureParameterivEXT_Z = glbindGetProcAddress(`glTextureParameterivEXT`);
  if (*cast(void**)&glTextureParameterivEXT_Z is null) assert(0, `OpenGL function 'glTextureParameterivEXT' not found!`);
  glTextureParameterivEXT_Z(a00,a01,a02,a03,);
}
alias glTextureImage1DEXT = glTextureImage1DEXT_Z;
__gshared glbfn_glTextureImage1DEXT glTextureImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  glbfn_glTextureImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTextureImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  *cast(void**)&glTextureImage1DEXT_Z = glbindGetProcAddress(`glTextureImage1DEXT`);
  if (*cast(void**)&glTextureImage1DEXT_Z is null) assert(0, `OpenGL function 'glTextureImage1DEXT' not found!`);
  glTextureImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glTextureImage2DEXT = glTextureImage2DEXT_Z;
__gshared glbfn_glTextureImage2DEXT glTextureImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  glbfn_glTextureImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glTextureImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  *cast(void**)&glTextureImage2DEXT_Z = glbindGetProcAddress(`glTextureImage2DEXT`);
  if (*cast(void**)&glTextureImage2DEXT_Z is null) assert(0, `OpenGL function 'glTextureImage2DEXT' not found!`);
  glTextureImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glTextureSubImage1DEXT = glTextureSubImage1DEXT_Z;
__gshared glbfn_glTextureSubImage1DEXT glTextureSubImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,uint a05,uint a06,const(void)* a07) {
  glbfn_glTextureSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTextureSubImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,uint a05,uint a06,const(void)* a07) {
  *cast(void**)&glTextureSubImage1DEXT_Z = glbindGetProcAddress(`glTextureSubImage1DEXT`);
  if (*cast(void**)&glTextureSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glTextureSubImage1DEXT' not found!`);
  glTextureSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTextureSubImage2DEXT = glTextureSubImage2DEXT_Z;
__gshared glbfn_glTextureSubImage2DEXT glTextureSubImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  glbfn_glTextureSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glTextureSubImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  *cast(void**)&glTextureSubImage2DEXT_Z = glbindGetProcAddress(`glTextureSubImage2DEXT`);
  if (*cast(void**)&glTextureSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glTextureSubImage2DEXT' not found!`);
  glTextureSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glCopyTextureImage1DEXT = glCopyTextureImage1DEXT_Z;
__gshared glbfn_glCopyTextureImage1DEXT glCopyTextureImage1DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07) {
  glbfn_glCopyTextureImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCopyTextureImage1DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glCopyTextureImage1DEXT_Z = glbindGetProcAddress(`glCopyTextureImage1DEXT`);
  if (*cast(void**)&glCopyTextureImage1DEXT_Z is null) assert(0, `OpenGL function 'glCopyTextureImage1DEXT' not found!`);
  glCopyTextureImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCopyTextureImage2DEXT = glCopyTextureImage2DEXT_Z;
__gshared glbfn_glCopyTextureImage2DEXT glCopyTextureImage2DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08) {
  glbfn_glCopyTextureImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCopyTextureImage2DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08) {
  *cast(void**)&glCopyTextureImage2DEXT_Z = glbindGetProcAddress(`glCopyTextureImage2DEXT`);
  if (*cast(void**)&glCopyTextureImage2DEXT_Z is null) assert(0, `OpenGL function 'glCopyTextureImage2DEXT' not found!`);
  glCopyTextureImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCopyTextureSubImage1DEXT = glCopyTextureSubImage1DEXT_Z;
__gshared glbfn_glCopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06) {
  glbfn_glCopyTextureSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCopyTextureSubImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glCopyTextureSubImage1DEXT_Z = glbindGetProcAddress(`glCopyTextureSubImage1DEXT`);
  if (*cast(void**)&glCopyTextureSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage1DEXT' not found!`);
  glCopyTextureSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCopyTextureSubImage2DEXT = glCopyTextureSubImage2DEXT_Z;
__gshared glbfn_glCopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  glbfn_glCopyTextureSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCopyTextureSubImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  *cast(void**)&glCopyTextureSubImage2DEXT_Z = glbindGetProcAddress(`glCopyTextureSubImage2DEXT`);
  if (*cast(void**)&glCopyTextureSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage2DEXT' not found!`);
  glCopyTextureSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glGetTextureImageEXT = glGetTextureImageEXT_Z;
__gshared glbfn_glGetTextureImageEXT glGetTextureImageEXT_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04,void* a05) {
  glbfn_glGetTextureImageEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetTextureImageEXT_loader (uint a00,uint a01,int a02,uint a03,uint a04,void* a05) {
  *cast(void**)&glGetTextureImageEXT_Z = glbindGetProcAddress(`glGetTextureImageEXT`);
  if (*cast(void**)&glGetTextureImageEXT_Z is null) assert(0, `OpenGL function 'glGetTextureImageEXT' not found!`);
  glGetTextureImageEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetTextureParameterfvEXT = glGetTextureParameterfvEXT_Z;
__gshared glbfn_glGetTextureParameterfvEXT glGetTextureParameterfvEXT_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetTextureParameterfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTextureParameterfvEXT_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetTextureParameterfvEXT_Z = glbindGetProcAddress(`glGetTextureParameterfvEXT`);
  if (*cast(void**)&glGetTextureParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetTextureParameterfvEXT' not found!`);
  glGetTextureParameterfvEXT_Z(a00,a01,a02,a03,);
}
alias glGetTextureParameterivEXT = glGetTextureParameterivEXT_Z;
__gshared glbfn_glGetTextureParameterivEXT glGetTextureParameterivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetTextureParameterivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTextureParameterivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetTextureParameterivEXT_Z = glbindGetProcAddress(`glGetTextureParameterivEXT`);
  if (*cast(void**)&glGetTextureParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetTextureParameterivEXT' not found!`);
  glGetTextureParameterivEXT_Z(a00,a01,a02,a03,);
}
alias glGetTextureLevelParameterfvEXT = glGetTextureLevelParameterfvEXT_Z;
__gshared glbfn_glGetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT_Z = function void (uint a00,uint a01,int a02,uint a03,float* a04) {
  glbfn_glGetTextureLevelParameterfvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetTextureLevelParameterfvEXT_loader (uint a00,uint a01,int a02,uint a03,float* a04) {
  *cast(void**)&glGetTextureLevelParameterfvEXT_Z = glbindGetProcAddress(`glGetTextureLevelParameterfvEXT`);
  if (*cast(void**)&glGetTextureLevelParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfvEXT' not found!`);
  glGetTextureLevelParameterfvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glGetTextureLevelParameterivEXT = glGetTextureLevelParameterivEXT_Z;
__gshared glbfn_glGetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int* a04) {
  glbfn_glGetTextureLevelParameterivEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetTextureLevelParameterivEXT_loader (uint a00,uint a01,int a02,uint a03,int* a04) {
  *cast(void**)&glGetTextureLevelParameterivEXT_Z = glbindGetProcAddress(`glGetTextureLevelParameterivEXT`);
  if (*cast(void**)&glGetTextureLevelParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameterivEXT' not found!`);
  glGetTextureLevelParameterivEXT_Z(a00,a01,a02,a03,a04,);
}
alias glTextureImage3DEXT = glTextureImage3DEXT_Z;
__gshared glbfn_glTextureImage3DEXT glTextureImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  glbfn_glTextureImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glTextureImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  *cast(void**)&glTextureImage3DEXT_Z = glbindGetProcAddress(`glTextureImage3DEXT`);
  if (*cast(void**)&glTextureImage3DEXT_Z is null) assert(0, `OpenGL function 'glTextureImage3DEXT' not found!`);
  glTextureImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glTextureSubImage3DEXT = glTextureSubImage3DEXT_Z;
__gshared glbfn_glTextureSubImage3DEXT glTextureSubImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,uint a10,const(void)* a11) {
  glbfn_glTextureSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glTextureSubImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,uint a10,const(void)* a11) {
  *cast(void**)&glTextureSubImage3DEXT_Z = glbindGetProcAddress(`glTextureSubImage3DEXT`);
  if (*cast(void**)&glTextureSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glTextureSubImage3DEXT' not found!`);
  glTextureSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glCopyTextureSubImage3DEXT = glCopyTextureSubImage3DEXT_Z;
__gshared glbfn_glCopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09) {
  glbfn_glCopyTextureSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glCopyTextureSubImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09) {
  *cast(void**)&glCopyTextureSubImage3DEXT_Z = glbindGetProcAddress(`glCopyTextureSubImage3DEXT`);
  if (*cast(void**)&glCopyTextureSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage3DEXT' not found!`);
  glCopyTextureSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glBindMultiTextureEXT = glBindMultiTextureEXT_Z;
__gshared glbfn_glBindMultiTextureEXT glBindMultiTextureEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBindMultiTextureEXT_loader(a00,a01,a02,);
};
private void glbfn_glBindMultiTextureEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBindMultiTextureEXT_Z = glbindGetProcAddress(`glBindMultiTextureEXT`);
  if (*cast(void**)&glBindMultiTextureEXT_Z is null) assert(0, `OpenGL function 'glBindMultiTextureEXT' not found!`);
  glBindMultiTextureEXT_Z(a00,a01,a02,);
}
alias glMultiTexCoordPointerEXT = glMultiTexCoordPointerEXT_Z;
__gshared glbfn_glMultiTexCoordPointerEXT glMultiTexCoordPointerEXT_Z = function void (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  glbfn_glMultiTexCoordPointerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoordPointerEXT_loader (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  *cast(void**)&glMultiTexCoordPointerEXT_Z = glbindGetProcAddress(`glMultiTexCoordPointerEXT`);
  if (*cast(void**)&glMultiTexCoordPointerEXT_Z is null) assert(0, `OpenGL function 'glMultiTexCoordPointerEXT' not found!`);
  glMultiTexCoordPointerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexEnvfEXT = glMultiTexEnvfEXT_Z;
__gshared glbfn_glMultiTexEnvfEXT glMultiTexEnvfEXT_Z = function void (uint a00,uint a01,uint a02,float a03) {
  glbfn_glMultiTexEnvfEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexEnvfEXT_loader (uint a00,uint a01,uint a02,float a03) {
  *cast(void**)&glMultiTexEnvfEXT_Z = glbindGetProcAddress(`glMultiTexEnvfEXT`);
  if (*cast(void**)&glMultiTexEnvfEXT_Z is null) assert(0, `OpenGL function 'glMultiTexEnvfEXT' not found!`);
  glMultiTexEnvfEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexEnvfvEXT = glMultiTexEnvfvEXT_Z;
__gshared glbfn_glMultiTexEnvfvEXT glMultiTexEnvfvEXT_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glMultiTexEnvfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexEnvfvEXT_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glMultiTexEnvfvEXT_Z = glbindGetProcAddress(`glMultiTexEnvfvEXT`);
  if (*cast(void**)&glMultiTexEnvfvEXT_Z is null) assert(0, `OpenGL function 'glMultiTexEnvfvEXT' not found!`);
  glMultiTexEnvfvEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexEnviEXT = glMultiTexEnviEXT_Z;
__gshared glbfn_glMultiTexEnviEXT glMultiTexEnviEXT_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glMultiTexEnviEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexEnviEXT_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glMultiTexEnviEXT_Z = glbindGetProcAddress(`glMultiTexEnviEXT`);
  if (*cast(void**)&glMultiTexEnviEXT_Z is null) assert(0, `OpenGL function 'glMultiTexEnviEXT' not found!`);
  glMultiTexEnviEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexEnvivEXT = glMultiTexEnvivEXT_Z;
__gshared glbfn_glMultiTexEnvivEXT glMultiTexEnvivEXT_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glMultiTexEnvivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexEnvivEXT_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glMultiTexEnvivEXT_Z = glbindGetProcAddress(`glMultiTexEnvivEXT`);
  if (*cast(void**)&glMultiTexEnvivEXT_Z is null) assert(0, `OpenGL function 'glMultiTexEnvivEXT' not found!`);
  glMultiTexEnvivEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexGendEXT = glMultiTexGendEXT_Z;
__gshared glbfn_glMultiTexGendEXT glMultiTexGendEXT_Z = function void (uint a00,uint a01,uint a02,double a03) {
  glbfn_glMultiTexGendEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexGendEXT_loader (uint a00,uint a01,uint a02,double a03) {
  *cast(void**)&glMultiTexGendEXT_Z = glbindGetProcAddress(`glMultiTexGendEXT`);
  if (*cast(void**)&glMultiTexGendEXT_Z is null) assert(0, `OpenGL function 'glMultiTexGendEXT' not found!`);
  glMultiTexGendEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexGendvEXT = glMultiTexGendvEXT_Z;
__gshared glbfn_glMultiTexGendvEXT glMultiTexGendvEXT_Z = function void (uint a00,uint a01,uint a02,const(double)* a03) {
  glbfn_glMultiTexGendvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexGendvEXT_loader (uint a00,uint a01,uint a02,const(double)* a03) {
  *cast(void**)&glMultiTexGendvEXT_Z = glbindGetProcAddress(`glMultiTexGendvEXT`);
  if (*cast(void**)&glMultiTexGendvEXT_Z is null) assert(0, `OpenGL function 'glMultiTexGendvEXT' not found!`);
  glMultiTexGendvEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexGenfEXT = glMultiTexGenfEXT_Z;
__gshared glbfn_glMultiTexGenfEXT glMultiTexGenfEXT_Z = function void (uint a00,uint a01,uint a02,float a03) {
  glbfn_glMultiTexGenfEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexGenfEXT_loader (uint a00,uint a01,uint a02,float a03) {
  *cast(void**)&glMultiTexGenfEXT_Z = glbindGetProcAddress(`glMultiTexGenfEXT`);
  if (*cast(void**)&glMultiTexGenfEXT_Z is null) assert(0, `OpenGL function 'glMultiTexGenfEXT' not found!`);
  glMultiTexGenfEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexGenfvEXT = glMultiTexGenfvEXT_Z;
__gshared glbfn_glMultiTexGenfvEXT glMultiTexGenfvEXT_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glMultiTexGenfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexGenfvEXT_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glMultiTexGenfvEXT_Z = glbindGetProcAddress(`glMultiTexGenfvEXT`);
  if (*cast(void**)&glMultiTexGenfvEXT_Z is null) assert(0, `OpenGL function 'glMultiTexGenfvEXT' not found!`);
  glMultiTexGenfvEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexGeniEXT = glMultiTexGeniEXT_Z;
__gshared glbfn_glMultiTexGeniEXT glMultiTexGeniEXT_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glMultiTexGeniEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexGeniEXT_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glMultiTexGeniEXT_Z = glbindGetProcAddress(`glMultiTexGeniEXT`);
  if (*cast(void**)&glMultiTexGeniEXT_Z is null) assert(0, `OpenGL function 'glMultiTexGeniEXT' not found!`);
  glMultiTexGeniEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexGenivEXT = glMultiTexGenivEXT_Z;
__gshared glbfn_glMultiTexGenivEXT glMultiTexGenivEXT_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glMultiTexGenivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexGenivEXT_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glMultiTexGenivEXT_Z = glbindGetProcAddress(`glMultiTexGenivEXT`);
  if (*cast(void**)&glMultiTexGenivEXT_Z is null) assert(0, `OpenGL function 'glMultiTexGenivEXT' not found!`);
  glMultiTexGenivEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexEnvfvEXT = glGetMultiTexEnvfvEXT_Z;
__gshared glbfn_glGetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetMultiTexEnvfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexEnvfvEXT_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetMultiTexEnvfvEXT_Z = glbindGetProcAddress(`glGetMultiTexEnvfvEXT`);
  if (*cast(void**)&glGetMultiTexEnvfvEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexEnvfvEXT' not found!`);
  glGetMultiTexEnvfvEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexEnvivEXT = glGetMultiTexEnvivEXT_Z;
__gshared glbfn_glGetMultiTexEnvivEXT glGetMultiTexEnvivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetMultiTexEnvivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexEnvivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetMultiTexEnvivEXT_Z = glbindGetProcAddress(`glGetMultiTexEnvivEXT`);
  if (*cast(void**)&glGetMultiTexEnvivEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexEnvivEXT' not found!`);
  glGetMultiTexEnvivEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexGendvEXT = glGetMultiTexGendvEXT_Z;
__gshared glbfn_glGetMultiTexGendvEXT glGetMultiTexGendvEXT_Z = function void (uint a00,uint a01,uint a02,double* a03) {
  glbfn_glGetMultiTexGendvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexGendvEXT_loader (uint a00,uint a01,uint a02,double* a03) {
  *cast(void**)&glGetMultiTexGendvEXT_Z = glbindGetProcAddress(`glGetMultiTexGendvEXT`);
  if (*cast(void**)&glGetMultiTexGendvEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexGendvEXT' not found!`);
  glGetMultiTexGendvEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexGenfvEXT = glGetMultiTexGenfvEXT_Z;
__gshared glbfn_glGetMultiTexGenfvEXT glGetMultiTexGenfvEXT_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetMultiTexGenfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexGenfvEXT_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetMultiTexGenfvEXT_Z = glbindGetProcAddress(`glGetMultiTexGenfvEXT`);
  if (*cast(void**)&glGetMultiTexGenfvEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexGenfvEXT' not found!`);
  glGetMultiTexGenfvEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexGenivEXT = glGetMultiTexGenivEXT_Z;
__gshared glbfn_glGetMultiTexGenivEXT glGetMultiTexGenivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetMultiTexGenivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexGenivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetMultiTexGenivEXT_Z = glbindGetProcAddress(`glGetMultiTexGenivEXT`);
  if (*cast(void**)&glGetMultiTexGenivEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexGenivEXT' not found!`);
  glGetMultiTexGenivEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexParameteriEXT = glMultiTexParameteriEXT_Z;
__gshared glbfn_glMultiTexParameteriEXT glMultiTexParameteriEXT_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glMultiTexParameteriEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexParameteriEXT_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glMultiTexParameteriEXT_Z = glbindGetProcAddress(`glMultiTexParameteriEXT`);
  if (*cast(void**)&glMultiTexParameteriEXT_Z is null) assert(0, `OpenGL function 'glMultiTexParameteriEXT' not found!`);
  glMultiTexParameteriEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexParameterivEXT = glMultiTexParameterivEXT_Z;
__gshared glbfn_glMultiTexParameterivEXT glMultiTexParameterivEXT_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glMultiTexParameterivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexParameterivEXT_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glMultiTexParameterivEXT_Z = glbindGetProcAddress(`glMultiTexParameterivEXT`);
  if (*cast(void**)&glMultiTexParameterivEXT_Z is null) assert(0, `OpenGL function 'glMultiTexParameterivEXT' not found!`);
  glMultiTexParameterivEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexParameterfEXT = glMultiTexParameterfEXT_Z;
__gshared glbfn_glMultiTexParameterfEXT glMultiTexParameterfEXT_Z = function void (uint a00,uint a01,uint a02,float a03) {
  glbfn_glMultiTexParameterfEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexParameterfEXT_loader (uint a00,uint a01,uint a02,float a03) {
  *cast(void**)&glMultiTexParameterfEXT_Z = glbindGetProcAddress(`glMultiTexParameterfEXT`);
  if (*cast(void**)&glMultiTexParameterfEXT_Z is null) assert(0, `OpenGL function 'glMultiTexParameterfEXT' not found!`);
  glMultiTexParameterfEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexParameterfvEXT = glMultiTexParameterfvEXT_Z;
__gshared glbfn_glMultiTexParameterfvEXT glMultiTexParameterfvEXT_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glMultiTexParameterfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexParameterfvEXT_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glMultiTexParameterfvEXT_Z = glbindGetProcAddress(`glMultiTexParameterfvEXT`);
  if (*cast(void**)&glMultiTexParameterfvEXT_Z is null) assert(0, `OpenGL function 'glMultiTexParameterfvEXT' not found!`);
  glMultiTexParameterfvEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexImage1DEXT = glMultiTexImage1DEXT_Z;
__gshared glbfn_glMultiTexImage1DEXT glMultiTexImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  glbfn_glMultiTexImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glMultiTexImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  *cast(void**)&glMultiTexImage1DEXT_Z = glbindGetProcAddress(`glMultiTexImage1DEXT`);
  if (*cast(void**)&glMultiTexImage1DEXT_Z is null) assert(0, `OpenGL function 'glMultiTexImage1DEXT' not found!`);
  glMultiTexImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glMultiTexImage2DEXT = glMultiTexImage2DEXT_Z;
__gshared glbfn_glMultiTexImage2DEXT glMultiTexImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  glbfn_glMultiTexImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glMultiTexImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  *cast(void**)&glMultiTexImage2DEXT_Z = glbindGetProcAddress(`glMultiTexImage2DEXT`);
  if (*cast(void**)&glMultiTexImage2DEXT_Z is null) assert(0, `OpenGL function 'glMultiTexImage2DEXT' not found!`);
  glMultiTexImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glMultiTexSubImage1DEXT = glMultiTexSubImage1DEXT_Z;
__gshared glbfn_glMultiTexSubImage1DEXT glMultiTexSubImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,uint a05,uint a06,const(void)* a07) {
  glbfn_glMultiTexSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glMultiTexSubImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,uint a05,uint a06,const(void)* a07) {
  *cast(void**)&glMultiTexSubImage1DEXT_Z = glbindGetProcAddress(`glMultiTexSubImage1DEXT`);
  if (*cast(void**)&glMultiTexSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glMultiTexSubImage1DEXT' not found!`);
  glMultiTexSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glMultiTexSubImage2DEXT = glMultiTexSubImage2DEXT_Z;
__gshared glbfn_glMultiTexSubImage2DEXT glMultiTexSubImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  glbfn_glMultiTexSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glMultiTexSubImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  *cast(void**)&glMultiTexSubImage2DEXT_Z = glbindGetProcAddress(`glMultiTexSubImage2DEXT`);
  if (*cast(void**)&glMultiTexSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glMultiTexSubImage2DEXT' not found!`);
  glMultiTexSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glCopyMultiTexImage1DEXT = glCopyMultiTexImage1DEXT_Z;
__gshared glbfn_glCopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07) {
  glbfn_glCopyMultiTexImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCopyMultiTexImage1DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07) {
  *cast(void**)&glCopyMultiTexImage1DEXT_Z = glbindGetProcAddress(`glCopyMultiTexImage1DEXT`);
  if (*cast(void**)&glCopyMultiTexImage1DEXT_Z is null) assert(0, `OpenGL function 'glCopyMultiTexImage1DEXT' not found!`);
  glCopyMultiTexImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCopyMultiTexImage2DEXT = glCopyMultiTexImage2DEXT_Z;
__gshared glbfn_glCopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08) {
  glbfn_glCopyMultiTexImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCopyMultiTexImage2DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08) {
  *cast(void**)&glCopyMultiTexImage2DEXT_Z = glbindGetProcAddress(`glCopyMultiTexImage2DEXT`);
  if (*cast(void**)&glCopyMultiTexImage2DEXT_Z is null) assert(0, `OpenGL function 'glCopyMultiTexImage2DEXT' not found!`);
  glCopyMultiTexImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCopyMultiTexSubImage1DEXT = glCopyMultiTexSubImage1DEXT_Z;
__gshared glbfn_glCopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06) {
  glbfn_glCopyMultiTexSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCopyMultiTexSubImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glCopyMultiTexSubImage1DEXT_Z = glbindGetProcAddress(`glCopyMultiTexSubImage1DEXT`);
  if (*cast(void**)&glCopyMultiTexSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage1DEXT' not found!`);
  glCopyMultiTexSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCopyMultiTexSubImage2DEXT = glCopyMultiTexSubImage2DEXT_Z;
__gshared glbfn_glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  glbfn_glCopyMultiTexSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCopyMultiTexSubImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08) {
  *cast(void**)&glCopyMultiTexSubImage2DEXT_Z = glbindGetProcAddress(`glCopyMultiTexSubImage2DEXT`);
  if (*cast(void**)&glCopyMultiTexSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage2DEXT' not found!`);
  glCopyMultiTexSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glGetMultiTexImageEXT = glGetMultiTexImageEXT_Z;
__gshared glbfn_glGetMultiTexImageEXT glGetMultiTexImageEXT_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04,void* a05) {
  glbfn_glGetMultiTexImageEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetMultiTexImageEXT_loader (uint a00,uint a01,int a02,uint a03,uint a04,void* a05) {
  *cast(void**)&glGetMultiTexImageEXT_Z = glbindGetProcAddress(`glGetMultiTexImageEXT`);
  if (*cast(void**)&glGetMultiTexImageEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexImageEXT' not found!`);
  glGetMultiTexImageEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetMultiTexParameterfvEXT = glGetMultiTexParameterfvEXT_Z;
__gshared glbfn_glGetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetMultiTexParameterfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexParameterfvEXT_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetMultiTexParameterfvEXT_Z = glbindGetProcAddress(`glGetMultiTexParameterfvEXT`);
  if (*cast(void**)&glGetMultiTexParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterfvEXT' not found!`);
  glGetMultiTexParameterfvEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexParameterivEXT = glGetMultiTexParameterivEXT_Z;
__gshared glbfn_glGetMultiTexParameterivEXT glGetMultiTexParameterivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetMultiTexParameterivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexParameterivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetMultiTexParameterivEXT_Z = glbindGetProcAddress(`glGetMultiTexParameterivEXT`);
  if (*cast(void**)&glGetMultiTexParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterivEXT' not found!`);
  glGetMultiTexParameterivEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexLevelParameterfvEXT = glGetMultiTexLevelParameterfvEXT_Z;
__gshared glbfn_glGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT_Z = function void (uint a00,uint a01,int a02,uint a03,float* a04) {
  glbfn_glGetMultiTexLevelParameterfvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetMultiTexLevelParameterfvEXT_loader (uint a00,uint a01,int a02,uint a03,float* a04) {
  *cast(void**)&glGetMultiTexLevelParameterfvEXT_Z = glbindGetProcAddress(`glGetMultiTexLevelParameterfvEXT`);
  if (*cast(void**)&glGetMultiTexLevelParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterfvEXT' not found!`);
  glGetMultiTexLevelParameterfvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glGetMultiTexLevelParameterivEXT = glGetMultiTexLevelParameterivEXT_Z;
__gshared glbfn_glGetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int* a04) {
  glbfn_glGetMultiTexLevelParameterivEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetMultiTexLevelParameterivEXT_loader (uint a00,uint a01,int a02,uint a03,int* a04) {
  *cast(void**)&glGetMultiTexLevelParameterivEXT_Z = glbindGetProcAddress(`glGetMultiTexLevelParameterivEXT`);
  if (*cast(void**)&glGetMultiTexLevelParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterivEXT' not found!`);
  glGetMultiTexLevelParameterivEXT_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexImage3DEXT = glMultiTexImage3DEXT_Z;
__gshared glbfn_glMultiTexImage3DEXT glMultiTexImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  glbfn_glMultiTexImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glMultiTexImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  *cast(void**)&glMultiTexImage3DEXT_Z = glbindGetProcAddress(`glMultiTexImage3DEXT`);
  if (*cast(void**)&glMultiTexImage3DEXT_Z is null) assert(0, `OpenGL function 'glMultiTexImage3DEXT' not found!`);
  glMultiTexImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glMultiTexSubImage3DEXT = glMultiTexSubImage3DEXT_Z;
__gshared glbfn_glMultiTexSubImage3DEXT glMultiTexSubImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,uint a10,const(void)* a11) {
  glbfn_glMultiTexSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glMultiTexSubImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,uint a10,const(void)* a11) {
  *cast(void**)&glMultiTexSubImage3DEXT_Z = glbindGetProcAddress(`glMultiTexSubImage3DEXT`);
  if (*cast(void**)&glMultiTexSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glMultiTexSubImage3DEXT' not found!`);
  glMultiTexSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glCopyMultiTexSubImage3DEXT = glCopyMultiTexSubImage3DEXT_Z;
__gshared glbfn_glCopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09) {
  glbfn_glCopyMultiTexSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glCopyMultiTexSubImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09) {
  *cast(void**)&glCopyMultiTexSubImage3DEXT_Z = glbindGetProcAddress(`glCopyMultiTexSubImage3DEXT`);
  if (*cast(void**)&glCopyMultiTexSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage3DEXT' not found!`);
  glCopyMultiTexSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glEnableClientStateIndexedEXT = glEnableClientStateIndexedEXT_Z;
__gshared glbfn_glEnableClientStateIndexedEXT glEnableClientStateIndexedEXT_Z = function void (uint a00,uint a01) {
  glbfn_glEnableClientStateIndexedEXT_loader(a00,a01,);
};
private void glbfn_glEnableClientStateIndexedEXT_loader (uint a00,uint a01) {
  *cast(void**)&glEnableClientStateIndexedEXT_Z = glbindGetProcAddress(`glEnableClientStateIndexedEXT`);
  if (*cast(void**)&glEnableClientStateIndexedEXT_Z is null) assert(0, `OpenGL function 'glEnableClientStateIndexedEXT' not found!`);
  glEnableClientStateIndexedEXT_Z(a00,a01,);
}
alias glDisableClientStateIndexedEXT = glDisableClientStateIndexedEXT_Z;
__gshared glbfn_glDisableClientStateIndexedEXT glDisableClientStateIndexedEXT_Z = function void (uint a00,uint a01) {
  glbfn_glDisableClientStateIndexedEXT_loader(a00,a01,);
};
private void glbfn_glDisableClientStateIndexedEXT_loader (uint a00,uint a01) {
  *cast(void**)&glDisableClientStateIndexedEXT_Z = glbindGetProcAddress(`glDisableClientStateIndexedEXT`);
  if (*cast(void**)&glDisableClientStateIndexedEXT_Z is null) assert(0, `OpenGL function 'glDisableClientStateIndexedEXT' not found!`);
  glDisableClientStateIndexedEXT_Z(a00,a01,);
}
alias glGetFloatIndexedvEXT = glGetFloatIndexedvEXT_Z;
__gshared glbfn_glGetFloatIndexedvEXT glGetFloatIndexedvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetFloatIndexedvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetFloatIndexedvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetFloatIndexedvEXT_Z = glbindGetProcAddress(`glGetFloatIndexedvEXT`);
  if (*cast(void**)&glGetFloatIndexedvEXT_Z is null) assert(0, `OpenGL function 'glGetFloatIndexedvEXT' not found!`);
  glGetFloatIndexedvEXT_Z(a00,a01,a02,);
}
alias glGetDoubleIndexedvEXT = glGetDoubleIndexedvEXT_Z;
__gshared glbfn_glGetDoubleIndexedvEXT glGetDoubleIndexedvEXT_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetDoubleIndexedvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetDoubleIndexedvEXT_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetDoubleIndexedvEXT_Z = glbindGetProcAddress(`glGetDoubleIndexedvEXT`);
  if (*cast(void**)&glGetDoubleIndexedvEXT_Z is null) assert(0, `OpenGL function 'glGetDoubleIndexedvEXT' not found!`);
  glGetDoubleIndexedvEXT_Z(a00,a01,a02,);
}
alias glGetPointerIndexedvEXT = glGetPointerIndexedvEXT_Z;
__gshared glbfn_glGetPointerIndexedvEXT glGetPointerIndexedvEXT_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetPointerIndexedvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetPointerIndexedvEXT_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetPointerIndexedvEXT_Z = glbindGetProcAddress(`glGetPointerIndexedvEXT`);
  if (*cast(void**)&glGetPointerIndexedvEXT_Z is null) assert(0, `OpenGL function 'glGetPointerIndexedvEXT' not found!`);
  glGetPointerIndexedvEXT_Z(a00,a01,a02,);
}
alias glEnableIndexedEXT = glEnableIndexedEXT_Z;
__gshared glbfn_glEnableIndexedEXT glEnableIndexedEXT_Z = function void (uint a00,uint a01) {
  glbfn_glEnableIndexedEXT_loader(a00,a01,);
};
private void glbfn_glEnableIndexedEXT_loader (uint a00,uint a01) {
  *cast(void**)&glEnableIndexedEXT_Z = glbindGetProcAddress(`glEnableIndexedEXT`);
  if (*cast(void**)&glEnableIndexedEXT_Z is null) assert(0, `OpenGL function 'glEnableIndexedEXT' not found!`);
  glEnableIndexedEXT_Z(a00,a01,);
}
alias glDisableIndexedEXT = glDisableIndexedEXT_Z;
__gshared glbfn_glDisableIndexedEXT glDisableIndexedEXT_Z = function void (uint a00,uint a01) {
  glbfn_glDisableIndexedEXT_loader(a00,a01,);
};
private void glbfn_glDisableIndexedEXT_loader (uint a00,uint a01) {
  *cast(void**)&glDisableIndexedEXT_Z = glbindGetProcAddress(`glDisableIndexedEXT`);
  if (*cast(void**)&glDisableIndexedEXT_Z is null) assert(0, `OpenGL function 'glDisableIndexedEXT' not found!`);
  glDisableIndexedEXT_Z(a00,a01,);
}
alias glIsEnabledIndexedEXT = glIsEnabledIndexedEXT_Z;
__gshared glbfn_glIsEnabledIndexedEXT glIsEnabledIndexedEXT_Z = function ubyte (uint a00,uint a01) {
  return glbfn_glIsEnabledIndexedEXT_loader(a00,a01,);
};
private ubyte glbfn_glIsEnabledIndexedEXT_loader (uint a00,uint a01) {
  *cast(void**)&glIsEnabledIndexedEXT_Z = glbindGetProcAddress(`glIsEnabledIndexedEXT`);
  if (*cast(void**)&glIsEnabledIndexedEXT_Z is null) assert(0, `OpenGL function 'glIsEnabledIndexedEXT' not found!`);
  return glIsEnabledIndexedEXT_Z(a00,a01,);
}
alias glGetIntegerIndexedvEXT = glGetIntegerIndexedvEXT_Z;
__gshared glbfn_glGetIntegerIndexedvEXT glGetIntegerIndexedvEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetIntegerIndexedvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetIntegerIndexedvEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetIntegerIndexedvEXT_Z = glbindGetProcAddress(`glGetIntegerIndexedvEXT`);
  if (*cast(void**)&glGetIntegerIndexedvEXT_Z is null) assert(0, `OpenGL function 'glGetIntegerIndexedvEXT' not found!`);
  glGetIntegerIndexedvEXT_Z(a00,a01,a02,);
}
alias glGetBooleanIndexedvEXT = glGetBooleanIndexedvEXT_Z;
__gshared glbfn_glGetBooleanIndexedvEXT glGetBooleanIndexedvEXT_Z = function void (uint a00,uint a01,ubyte* a02) {
  glbfn_glGetBooleanIndexedvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetBooleanIndexedvEXT_loader (uint a00,uint a01,ubyte* a02) {
  *cast(void**)&glGetBooleanIndexedvEXT_Z = glbindGetProcAddress(`glGetBooleanIndexedvEXT`);
  if (*cast(void**)&glGetBooleanIndexedvEXT_Z is null) assert(0, `OpenGL function 'glGetBooleanIndexedvEXT' not found!`);
  glGetBooleanIndexedvEXT_Z(a00,a01,a02,);
}
alias glCompressedTextureImage3DEXT = glCompressedTextureImage3DEXT_Z;
__gshared glbfn_glCompressedTextureImage3DEXT glCompressedTextureImage3DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08,const(void)* a09) {
  glbfn_glCompressedTextureImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glCompressedTextureImage3DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08,const(void)* a09) {
  *cast(void**)&glCompressedTextureImage3DEXT_Z = glbindGetProcAddress(`glCompressedTextureImage3DEXT`);
  if (*cast(void**)&glCompressedTextureImage3DEXT_Z is null) assert(0, `OpenGL function 'glCompressedTextureImage3DEXT' not found!`);
  glCompressedTextureImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glCompressedTextureImage2DEXT = glCompressedTextureImage2DEXT_Z;
__gshared glbfn_glCompressedTextureImage2DEXT glCompressedTextureImage2DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  glbfn_glCompressedTextureImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCompressedTextureImage2DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  *cast(void**)&glCompressedTextureImage2DEXT_Z = glbindGetProcAddress(`glCompressedTextureImage2DEXT`);
  if (*cast(void**)&glCompressedTextureImage2DEXT_Z is null) assert(0, `OpenGL function 'glCompressedTextureImage2DEXT' not found!`);
  glCompressedTextureImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCompressedTextureImage1DEXT = glCompressedTextureImage1DEXT_Z;
__gshared glbfn_glCompressedTextureImage1DEXT glCompressedTextureImage1DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,const(void)* a07) {
  glbfn_glCompressedTextureImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCompressedTextureImage1DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,const(void)* a07) {
  *cast(void**)&glCompressedTextureImage1DEXT_Z = glbindGetProcAddress(`glCompressedTextureImage1DEXT`);
  if (*cast(void**)&glCompressedTextureImage1DEXT_Z is null) assert(0, `OpenGL function 'glCompressedTextureImage1DEXT' not found!`);
  glCompressedTextureImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCompressedTextureSubImage3DEXT = glCompressedTextureSubImage3DEXT_Z;
__gshared glbfn_glCompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,int a10,const(void)* a11) {
  glbfn_glCompressedTextureSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glCompressedTextureSubImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,int a10,const(void)* a11) {
  *cast(void**)&glCompressedTextureSubImage3DEXT_Z = glbindGetProcAddress(`glCompressedTextureSubImage3DEXT`);
  if (*cast(void**)&glCompressedTextureSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3DEXT' not found!`);
  glCompressedTextureSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glCompressedTextureSubImage2DEXT = glCompressedTextureSubImage2DEXT_Z;
__gshared glbfn_glCompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,int a08,const(void)* a09) {
  glbfn_glCompressedTextureSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glCompressedTextureSubImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,int a08,const(void)* a09) {
  *cast(void**)&glCompressedTextureSubImage2DEXT_Z = glbindGetProcAddress(`glCompressedTextureSubImage2DEXT`);
  if (*cast(void**)&glCompressedTextureSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2DEXT' not found!`);
  glCompressedTextureSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glCompressedTextureSubImage1DEXT = glCompressedTextureSubImage1DEXT_Z;
__gshared glbfn_glCompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,uint a05,int a06,const(void)* a07) {
  glbfn_glCompressedTextureSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCompressedTextureSubImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,uint a05,int a06,const(void)* a07) {
  *cast(void**)&glCompressedTextureSubImage1DEXT_Z = glbindGetProcAddress(`glCompressedTextureSubImage1DEXT`);
  if (*cast(void**)&glCompressedTextureSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1DEXT' not found!`);
  glCompressedTextureSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetCompressedTextureImageEXT = glGetCompressedTextureImageEXT_Z;
__gshared glbfn_glGetCompressedTextureImageEXT glGetCompressedTextureImageEXT_Z = function void (uint a00,uint a01,int a02,void* a03) {
  glbfn_glGetCompressedTextureImageEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetCompressedTextureImageEXT_loader (uint a00,uint a01,int a02,void* a03) {
  *cast(void**)&glGetCompressedTextureImageEXT_Z = glbindGetProcAddress(`glGetCompressedTextureImageEXT`);
  if (*cast(void**)&glGetCompressedTextureImageEXT_Z is null) assert(0, `OpenGL function 'glGetCompressedTextureImageEXT' not found!`);
  glGetCompressedTextureImageEXT_Z(a00,a01,a02,a03,);
}
alias glCompressedMultiTexImage3DEXT = glCompressedMultiTexImage3DEXT_Z;
__gshared glbfn_glCompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08,const(void)* a09) {
  glbfn_glCompressedMultiTexImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glCompressedMultiTexImage3DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,int a08,const(void)* a09) {
  *cast(void**)&glCompressedMultiTexImage3DEXT_Z = glbindGetProcAddress(`glCompressedMultiTexImage3DEXT`);
  if (*cast(void**)&glCompressedMultiTexImage3DEXT_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexImage3DEXT' not found!`);
  glCompressedMultiTexImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glCompressedMultiTexImage2DEXT = glCompressedMultiTexImage2DEXT_Z;
__gshared glbfn_glCompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  glbfn_glCompressedMultiTexImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glCompressedMultiTexImage2DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,int a07,const(void)* a08) {
  *cast(void**)&glCompressedMultiTexImage2DEXT_Z = glbindGetProcAddress(`glCompressedMultiTexImage2DEXT`);
  if (*cast(void**)&glCompressedMultiTexImage2DEXT_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexImage2DEXT' not found!`);
  glCompressedMultiTexImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glCompressedMultiTexImage1DEXT = glCompressedMultiTexImage1DEXT_Z;
__gshared glbfn_glCompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,const(void)* a07) {
  glbfn_glCompressedMultiTexImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCompressedMultiTexImage1DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,const(void)* a07) {
  *cast(void**)&glCompressedMultiTexImage1DEXT_Z = glbindGetProcAddress(`glCompressedMultiTexImage1DEXT`);
  if (*cast(void**)&glCompressedMultiTexImage1DEXT_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexImage1DEXT' not found!`);
  glCompressedMultiTexImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glCompressedMultiTexSubImage3DEXT = glCompressedMultiTexSubImage3DEXT_Z;
__gshared glbfn_glCompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,int a10,const(void)* a11) {
  glbfn_glCompressedMultiTexSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glCompressedMultiTexSubImage3DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,uint a09,int a10,const(void)* a11) {
  *cast(void**)&glCompressedMultiTexSubImage3DEXT_Z = glbindGetProcAddress(`glCompressedMultiTexSubImage3DEXT`);
  if (*cast(void**)&glCompressedMultiTexSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage3DEXT' not found!`);
  glCompressedMultiTexSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glCompressedMultiTexSubImage2DEXT = glCompressedMultiTexSubImage2DEXT_Z;
__gshared glbfn_glCompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,int a08,const(void)* a09) {
  glbfn_glCompressedMultiTexSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glCompressedMultiTexSubImage2DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,uint a07,int a08,const(void)* a09) {
  *cast(void**)&glCompressedMultiTexSubImage2DEXT_Z = glbindGetProcAddress(`glCompressedMultiTexSubImage2DEXT`);
  if (*cast(void**)&glCompressedMultiTexSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage2DEXT' not found!`);
  glCompressedMultiTexSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glCompressedMultiTexSubImage1DEXT = glCompressedMultiTexSubImage1DEXT_Z;
__gshared glbfn_glCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04,uint a05,int a06,const(void)* a07) {
  glbfn_glCompressedMultiTexSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glCompressedMultiTexSubImage1DEXT_loader (uint a00,uint a01,int a02,int a03,int a04,uint a05,int a06,const(void)* a07) {
  *cast(void**)&glCompressedMultiTexSubImage1DEXT_Z = glbindGetProcAddress(`glCompressedMultiTexSubImage1DEXT`);
  if (*cast(void**)&glCompressedMultiTexSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage1DEXT' not found!`);
  glCompressedMultiTexSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetCompressedMultiTexImageEXT = glGetCompressedMultiTexImageEXT_Z;
__gshared glbfn_glGetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT_Z = function void (uint a00,uint a01,int a02,void* a03) {
  glbfn_glGetCompressedMultiTexImageEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetCompressedMultiTexImageEXT_loader (uint a00,uint a01,int a02,void* a03) {
  *cast(void**)&glGetCompressedMultiTexImageEXT_Z = glbindGetProcAddress(`glGetCompressedMultiTexImageEXT`);
  if (*cast(void**)&glGetCompressedMultiTexImageEXT_Z is null) assert(0, `OpenGL function 'glGetCompressedMultiTexImageEXT' not found!`);
  glGetCompressedMultiTexImageEXT_Z(a00,a01,a02,a03,);
}
alias glMatrixLoadTransposefEXT = glMatrixLoadTransposefEXT_Z;
__gshared glbfn_glMatrixLoadTransposefEXT glMatrixLoadTransposefEXT_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixLoadTransposefEXT_loader(a00,a01,);
};
private void glbfn_glMatrixLoadTransposefEXT_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixLoadTransposefEXT_Z = glbindGetProcAddress(`glMatrixLoadTransposefEXT`);
  if (*cast(void**)&glMatrixLoadTransposefEXT_Z is null) assert(0, `OpenGL function 'glMatrixLoadTransposefEXT' not found!`);
  glMatrixLoadTransposefEXT_Z(a00,a01,);
}
alias glMatrixLoadTransposedEXT = glMatrixLoadTransposedEXT_Z;
__gshared glbfn_glMatrixLoadTransposedEXT glMatrixLoadTransposedEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMatrixLoadTransposedEXT_loader(a00,a01,);
};
private void glbfn_glMatrixLoadTransposedEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMatrixLoadTransposedEXT_Z = glbindGetProcAddress(`glMatrixLoadTransposedEXT`);
  if (*cast(void**)&glMatrixLoadTransposedEXT_Z is null) assert(0, `OpenGL function 'glMatrixLoadTransposedEXT' not found!`);
  glMatrixLoadTransposedEXT_Z(a00,a01,);
}
alias glMatrixMultTransposefEXT = glMatrixMultTransposefEXT_Z;
__gshared glbfn_glMatrixMultTransposefEXT glMatrixMultTransposefEXT_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixMultTransposefEXT_loader(a00,a01,);
};
private void glbfn_glMatrixMultTransposefEXT_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixMultTransposefEXT_Z = glbindGetProcAddress(`glMatrixMultTransposefEXT`);
  if (*cast(void**)&glMatrixMultTransposefEXT_Z is null) assert(0, `OpenGL function 'glMatrixMultTransposefEXT' not found!`);
  glMatrixMultTransposefEXT_Z(a00,a01,);
}
alias glMatrixMultTransposedEXT = glMatrixMultTransposedEXT_Z;
__gshared glbfn_glMatrixMultTransposedEXT glMatrixMultTransposedEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glMatrixMultTransposedEXT_loader(a00,a01,);
};
private void glbfn_glMatrixMultTransposedEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glMatrixMultTransposedEXT_Z = glbindGetProcAddress(`glMatrixMultTransposedEXT`);
  if (*cast(void**)&glMatrixMultTransposedEXT_Z is null) assert(0, `OpenGL function 'glMatrixMultTransposedEXT' not found!`);
  glMatrixMultTransposedEXT_Z(a00,a01,);
}
alias glNamedBufferDataEXT = glNamedBufferDataEXT_Z;
__gshared glbfn_glNamedBufferDataEXT glNamedBufferDataEXT_Z = function void (uint a00,int a01,const(void)* a02,uint a03) {
  glbfn_glNamedBufferDataEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferDataEXT_loader (uint a00,int a01,const(void)* a02,uint a03) {
  *cast(void**)&glNamedBufferDataEXT_Z = glbindGetProcAddress(`glNamedBufferDataEXT`);
  if (*cast(void**)&glNamedBufferDataEXT_Z is null) assert(0, `OpenGL function 'glNamedBufferDataEXT' not found!`);
  glNamedBufferDataEXT_Z(a00,a01,a02,a03,);
}
alias glNamedBufferSubDataEXT = glNamedBufferSubDataEXT_Z;
__gshared glbfn_glNamedBufferSubDataEXT glNamedBufferSubDataEXT_Z = function void (uint a00,int a01,int a02,const(void)* a03) {
  glbfn_glNamedBufferSubDataEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferSubDataEXT_loader (uint a00,int a01,int a02,const(void)* a03) {
  *cast(void**)&glNamedBufferSubDataEXT_Z = glbindGetProcAddress(`glNamedBufferSubDataEXT`);
  if (*cast(void**)&glNamedBufferSubDataEXT_Z is null) assert(0, `OpenGL function 'glNamedBufferSubDataEXT' not found!`);
  glNamedBufferSubDataEXT_Z(a00,a01,a02,a03,);
}
alias glMapNamedBufferEXT = glMapNamedBufferEXT_Z;
__gshared glbfn_glMapNamedBufferEXT glMapNamedBufferEXT_Z = function void* (uint a00,uint a01) {
  return glbfn_glMapNamedBufferEXT_loader(a00,a01,);
};
private void* glbfn_glMapNamedBufferEXT_loader (uint a00,uint a01) {
  *cast(void**)&glMapNamedBufferEXT_Z = glbindGetProcAddress(`glMapNamedBufferEXT`);
  if (*cast(void**)&glMapNamedBufferEXT_Z is null) assert(0, `OpenGL function 'glMapNamedBufferEXT' not found!`);
  return glMapNamedBufferEXT_Z(a00,a01,);
}
alias glUnmapNamedBufferEXT = glUnmapNamedBufferEXT_Z;
__gshared glbfn_glUnmapNamedBufferEXT glUnmapNamedBufferEXT_Z = function ubyte (uint a00) {
  return glbfn_glUnmapNamedBufferEXT_loader(a00,);
};
private ubyte glbfn_glUnmapNamedBufferEXT_loader (uint a00) {
  *cast(void**)&glUnmapNamedBufferEXT_Z = glbindGetProcAddress(`glUnmapNamedBufferEXT`);
  if (*cast(void**)&glUnmapNamedBufferEXT_Z is null) assert(0, `OpenGL function 'glUnmapNamedBufferEXT' not found!`);
  return glUnmapNamedBufferEXT_Z(a00,);
}
alias glGetNamedBufferParameterivEXT = glGetNamedBufferParameterivEXT_Z;
__gshared glbfn_glGetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetNamedBufferParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedBufferParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetNamedBufferParameterivEXT_Z = glbindGetProcAddress(`glGetNamedBufferParameterivEXT`);
  if (*cast(void**)&glGetNamedBufferParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameterivEXT' not found!`);
  glGetNamedBufferParameterivEXT_Z(a00,a01,a02,);
}
alias glGetNamedBufferPointervEXT = glGetNamedBufferPointervEXT_Z;
__gshared glbfn_glGetNamedBufferPointervEXT glGetNamedBufferPointervEXT_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetNamedBufferPointervEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedBufferPointervEXT_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetNamedBufferPointervEXT_Z = glbindGetProcAddress(`glGetNamedBufferPointervEXT`);
  if (*cast(void**)&glGetNamedBufferPointervEXT_Z is null) assert(0, `OpenGL function 'glGetNamedBufferPointervEXT' not found!`);
  glGetNamedBufferPointervEXT_Z(a00,a01,a02,);
}
alias glGetNamedBufferSubDataEXT = glGetNamedBufferSubDataEXT_Z;
__gshared glbfn_glGetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT_Z = function void (uint a00,int a01,int a02,void* a03) {
  glbfn_glGetNamedBufferSubDataEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedBufferSubDataEXT_loader (uint a00,int a01,int a02,void* a03) {
  *cast(void**)&glGetNamedBufferSubDataEXT_Z = glbindGetProcAddress(`glGetNamedBufferSubDataEXT`);
  if (*cast(void**)&glGetNamedBufferSubDataEXT_Z is null) assert(0, `OpenGL function 'glGetNamedBufferSubDataEXT' not found!`);
  glGetNamedBufferSubDataEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1fEXT = glProgramUniform1fEXT_Z;
__gshared glbfn_glProgramUniform1fEXT glProgramUniform1fEXT_Z = function void (uint a00,int a01,float a02) {
  glbfn_glProgramUniform1fEXT_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1fEXT_loader (uint a00,int a01,float a02) {
  *cast(void**)&glProgramUniform1fEXT_Z = glbindGetProcAddress(`glProgramUniform1fEXT`);
  if (*cast(void**)&glProgramUniform1fEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1fEXT' not found!`);
  glProgramUniform1fEXT_Z(a00,a01,a02,);
}
alias glProgramUniform2fEXT = glProgramUniform2fEXT_Z;
__gshared glbfn_glProgramUniform2fEXT glProgramUniform2fEXT_Z = function void (uint a00,int a01,float a02,float a03) {
  glbfn_glProgramUniform2fEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2fEXT_loader (uint a00,int a01,float a02,float a03) {
  *cast(void**)&glProgramUniform2fEXT_Z = glbindGetProcAddress(`glProgramUniform2fEXT`);
  if (*cast(void**)&glProgramUniform2fEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2fEXT' not found!`);
  glProgramUniform2fEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3fEXT = glProgramUniform3fEXT_Z;
__gshared glbfn_glProgramUniform3fEXT glProgramUniform3fEXT_Z = function void (uint a00,int a01,float a02,float a03,float a04) {
  glbfn_glProgramUniform3fEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3fEXT_loader (uint a00,int a01,float a02,float a03,float a04) {
  *cast(void**)&glProgramUniform3fEXT_Z = glbindGetProcAddress(`glProgramUniform3fEXT`);
  if (*cast(void**)&glProgramUniform3fEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3fEXT' not found!`);
  glProgramUniform3fEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4fEXT = glProgramUniform4fEXT_Z;
__gshared glbfn_glProgramUniform4fEXT glProgramUniform4fEXT_Z = function void (uint a00,int a01,float a02,float a03,float a04,float a05) {
  glbfn_glProgramUniform4fEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4fEXT_loader (uint a00,int a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glProgramUniform4fEXT_Z = glbindGetProcAddress(`glProgramUniform4fEXT`);
  if (*cast(void**)&glProgramUniform4fEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4fEXT' not found!`);
  glProgramUniform4fEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1iEXT = glProgramUniform1iEXT_Z;
__gshared glbfn_glProgramUniform1iEXT glProgramUniform1iEXT_Z = function void (uint a00,int a01,int a02) {
  glbfn_glProgramUniform1iEXT_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1iEXT_loader (uint a00,int a01,int a02) {
  *cast(void**)&glProgramUniform1iEXT_Z = glbindGetProcAddress(`glProgramUniform1iEXT`);
  if (*cast(void**)&glProgramUniform1iEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1iEXT' not found!`);
  glProgramUniform1iEXT_Z(a00,a01,a02,);
}
alias glProgramUniform2iEXT = glProgramUniform2iEXT_Z;
__gshared glbfn_glProgramUniform2iEXT glProgramUniform2iEXT_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glProgramUniform2iEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2iEXT_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glProgramUniform2iEXT_Z = glbindGetProcAddress(`glProgramUniform2iEXT`);
  if (*cast(void**)&glProgramUniform2iEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2iEXT' not found!`);
  glProgramUniform2iEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3iEXT = glProgramUniform3iEXT_Z;
__gshared glbfn_glProgramUniform3iEXT glProgramUniform3iEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glProgramUniform3iEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3iEXT_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glProgramUniform3iEXT_Z = glbindGetProcAddress(`glProgramUniform3iEXT`);
  if (*cast(void**)&glProgramUniform3iEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3iEXT' not found!`);
  glProgramUniform3iEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4iEXT = glProgramUniform4iEXT_Z;
__gshared glbfn_glProgramUniform4iEXT glProgramUniform4iEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glProgramUniform4iEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4iEXT_loader (uint a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glProgramUniform4iEXT_Z = glbindGetProcAddress(`glProgramUniform4iEXT`);
  if (*cast(void**)&glProgramUniform4iEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4iEXT' not found!`);
  glProgramUniform4iEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1fvEXT = glProgramUniform1fvEXT_Z;
__gshared glbfn_glProgramUniform1fvEXT glProgramUniform1fvEXT_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform1fvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1fvEXT_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform1fvEXT_Z = glbindGetProcAddress(`glProgramUniform1fvEXT`);
  if (*cast(void**)&glProgramUniform1fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1fvEXT' not found!`);
  glProgramUniform1fvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2fvEXT = glProgramUniform2fvEXT_Z;
__gshared glbfn_glProgramUniform2fvEXT glProgramUniform2fvEXT_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform2fvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2fvEXT_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform2fvEXT_Z = glbindGetProcAddress(`glProgramUniform2fvEXT`);
  if (*cast(void**)&glProgramUniform2fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2fvEXT' not found!`);
  glProgramUniform2fvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3fvEXT = glProgramUniform3fvEXT_Z;
__gshared glbfn_glProgramUniform3fvEXT glProgramUniform3fvEXT_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform3fvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3fvEXT_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform3fvEXT_Z = glbindGetProcAddress(`glProgramUniform3fvEXT`);
  if (*cast(void**)&glProgramUniform3fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3fvEXT' not found!`);
  glProgramUniform3fvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4fvEXT = glProgramUniform4fvEXT_Z;
__gshared glbfn_glProgramUniform4fvEXT glProgramUniform4fvEXT_Z = function void (uint a00,int a01,int a02,const(float)* a03) {
  glbfn_glProgramUniform4fvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4fvEXT_loader (uint a00,int a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramUniform4fvEXT_Z = glbindGetProcAddress(`glProgramUniform4fvEXT`);
  if (*cast(void**)&glProgramUniform4fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4fvEXT' not found!`);
  glProgramUniform4fvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1ivEXT = glProgramUniform1ivEXT_Z;
__gshared glbfn_glProgramUniform1ivEXT glProgramUniform1ivEXT_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform1ivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1ivEXT_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform1ivEXT_Z = glbindGetProcAddress(`glProgramUniform1ivEXT`);
  if (*cast(void**)&glProgramUniform1ivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1ivEXT' not found!`);
  glProgramUniform1ivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2ivEXT = glProgramUniform2ivEXT_Z;
__gshared glbfn_glProgramUniform2ivEXT glProgramUniform2ivEXT_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform2ivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2ivEXT_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform2ivEXT_Z = glbindGetProcAddress(`glProgramUniform2ivEXT`);
  if (*cast(void**)&glProgramUniform2ivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2ivEXT' not found!`);
  glProgramUniform2ivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3ivEXT = glProgramUniform3ivEXT_Z;
__gshared glbfn_glProgramUniform3ivEXT glProgramUniform3ivEXT_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform3ivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3ivEXT_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform3ivEXT_Z = glbindGetProcAddress(`glProgramUniform3ivEXT`);
  if (*cast(void**)&glProgramUniform3ivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3ivEXT' not found!`);
  glProgramUniform3ivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4ivEXT = glProgramUniform4ivEXT_Z;
__gshared glbfn_glProgramUniform4ivEXT glProgramUniform4ivEXT_Z = function void (uint a00,int a01,int a02,const(int)* a03) {
  glbfn_glProgramUniform4ivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4ivEXT_loader (uint a00,int a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramUniform4ivEXT_Z = glbindGetProcAddress(`glProgramUniform4ivEXT`);
  if (*cast(void**)&glProgramUniform4ivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4ivEXT' not found!`);
  glProgramUniform4ivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniformMatrix2fvEXT = glProgramUniformMatrix2fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix2fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix2fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix2fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fvEXT' not found!`);
  glProgramUniformMatrix2fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3fvEXT = glProgramUniformMatrix3fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix3fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix3fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix3fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fvEXT' not found!`);
  glProgramUniformMatrix3fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4fvEXT = glProgramUniformMatrix4fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix4fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix4fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix4fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fvEXT' not found!`);
  glProgramUniformMatrix4fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x3fvEXT = glProgramUniformMatrix2x3fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix2x3fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x3fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix2x3fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x3fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fvEXT' not found!`);
  glProgramUniformMatrix2x3fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x2fvEXT = glProgramUniformMatrix3x2fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix3x2fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x2fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix3x2fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x2fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fvEXT' not found!`);
  glProgramUniformMatrix3x2fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x4fvEXT = glProgramUniformMatrix2x4fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix2x4fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x4fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix2x4fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x4fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fvEXT' not found!`);
  glProgramUniformMatrix2x4fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x2fvEXT = glProgramUniformMatrix4x2fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix4x2fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x2fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix4x2fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x2fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fvEXT' not found!`);
  glProgramUniformMatrix4x2fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x4fvEXT = glProgramUniformMatrix3x4fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix3x4fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x4fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix3x4fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x4fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fvEXT' not found!`);
  glProgramUniformMatrix3x4fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x3fvEXT = glProgramUniformMatrix4x3fvEXT_Z;
__gshared glbfn_glProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  glbfn_glProgramUniformMatrix4x3fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x3fvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(float)* a04) {
  *cast(void**)&glProgramUniformMatrix4x3fvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x3fvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fvEXT' not found!`);
  glProgramUniformMatrix4x3fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glTextureBufferEXT = glTextureBufferEXT_Z;
__gshared glbfn_glTextureBufferEXT glTextureBufferEXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glTextureBufferEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureBufferEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glTextureBufferEXT_Z = glbindGetProcAddress(`glTextureBufferEXT`);
  if (*cast(void**)&glTextureBufferEXT_Z is null) assert(0, `OpenGL function 'glTextureBufferEXT' not found!`);
  glTextureBufferEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexBufferEXT = glMultiTexBufferEXT_Z;
__gshared glbfn_glMultiTexBufferEXT glMultiTexBufferEXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glMultiTexBufferEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexBufferEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glMultiTexBufferEXT_Z = glbindGetProcAddress(`glMultiTexBufferEXT`);
  if (*cast(void**)&glMultiTexBufferEXT_Z is null) assert(0, `OpenGL function 'glMultiTexBufferEXT' not found!`);
  glMultiTexBufferEXT_Z(a00,a01,a02,a03,);
}
alias glTextureParameterIivEXT = glTextureParameterIivEXT_Z;
__gshared glbfn_glTextureParameterIivEXT glTextureParameterIivEXT_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glTextureParameterIivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureParameterIivEXT_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glTextureParameterIivEXT_Z = glbindGetProcAddress(`glTextureParameterIivEXT`);
  if (*cast(void**)&glTextureParameterIivEXT_Z is null) assert(0, `OpenGL function 'glTextureParameterIivEXT' not found!`);
  glTextureParameterIivEXT_Z(a00,a01,a02,a03,);
}
alias glTextureParameterIuivEXT = glTextureParameterIuivEXT_Z;
__gshared glbfn_glTextureParameterIuivEXT glTextureParameterIuivEXT_Z = function void (uint a00,uint a01,uint a02,const(uint)* a03) {
  glbfn_glTextureParameterIuivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureParameterIuivEXT_loader (uint a00,uint a01,uint a02,const(uint)* a03) {
  *cast(void**)&glTextureParameterIuivEXT_Z = glbindGetProcAddress(`glTextureParameterIuivEXT`);
  if (*cast(void**)&glTextureParameterIuivEXT_Z is null) assert(0, `OpenGL function 'glTextureParameterIuivEXT' not found!`);
  glTextureParameterIuivEXT_Z(a00,a01,a02,a03,);
}
alias glGetTextureParameterIivEXT = glGetTextureParameterIivEXT_Z;
__gshared glbfn_glGetTextureParameterIivEXT glGetTextureParameterIivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetTextureParameterIivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTextureParameterIivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetTextureParameterIivEXT_Z = glbindGetProcAddress(`glGetTextureParameterIivEXT`);
  if (*cast(void**)&glGetTextureParameterIivEXT_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIivEXT' not found!`);
  glGetTextureParameterIivEXT_Z(a00,a01,a02,a03,);
}
alias glGetTextureParameterIuivEXT = glGetTextureParameterIuivEXT_Z;
__gshared glbfn_glGetTextureParameterIuivEXT glGetTextureParameterIuivEXT_Z = function void (uint a00,uint a01,uint a02,uint* a03) {
  glbfn_glGetTextureParameterIuivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTextureParameterIuivEXT_loader (uint a00,uint a01,uint a02,uint* a03) {
  *cast(void**)&glGetTextureParameterIuivEXT_Z = glbindGetProcAddress(`glGetTextureParameterIuivEXT`);
  if (*cast(void**)&glGetTextureParameterIuivEXT_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIuivEXT' not found!`);
  glGetTextureParameterIuivEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexParameterIivEXT = glMultiTexParameterIivEXT_Z;
__gshared glbfn_glMultiTexParameterIivEXT glMultiTexParameterIivEXT_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glMultiTexParameterIivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexParameterIivEXT_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glMultiTexParameterIivEXT_Z = glbindGetProcAddress(`glMultiTexParameterIivEXT`);
  if (*cast(void**)&glMultiTexParameterIivEXT_Z is null) assert(0, `OpenGL function 'glMultiTexParameterIivEXT' not found!`);
  glMultiTexParameterIivEXT_Z(a00,a01,a02,a03,);
}
alias glMultiTexParameterIuivEXT = glMultiTexParameterIuivEXT_Z;
__gshared glbfn_glMultiTexParameterIuivEXT glMultiTexParameterIuivEXT_Z = function void (uint a00,uint a01,uint a02,const(uint)* a03) {
  glbfn_glMultiTexParameterIuivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexParameterIuivEXT_loader (uint a00,uint a01,uint a02,const(uint)* a03) {
  *cast(void**)&glMultiTexParameterIuivEXT_Z = glbindGetProcAddress(`glMultiTexParameterIuivEXT`);
  if (*cast(void**)&glMultiTexParameterIuivEXT_Z is null) assert(0, `OpenGL function 'glMultiTexParameterIuivEXT' not found!`);
  glMultiTexParameterIuivEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexParameterIivEXT = glGetMultiTexParameterIivEXT_Z;
__gshared glbfn_glGetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetMultiTexParameterIivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexParameterIivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetMultiTexParameterIivEXT_Z = glbindGetProcAddress(`glGetMultiTexParameterIivEXT`);
  if (*cast(void**)&glGetMultiTexParameterIivEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterIivEXT' not found!`);
  glGetMultiTexParameterIivEXT_Z(a00,a01,a02,a03,);
}
alias glGetMultiTexParameterIuivEXT = glGetMultiTexParameterIuivEXT_Z;
__gshared glbfn_glGetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT_Z = function void (uint a00,uint a01,uint a02,uint* a03) {
  glbfn_glGetMultiTexParameterIuivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMultiTexParameterIuivEXT_loader (uint a00,uint a01,uint a02,uint* a03) {
  *cast(void**)&glGetMultiTexParameterIuivEXT_Z = glbindGetProcAddress(`glGetMultiTexParameterIuivEXT`);
  if (*cast(void**)&glGetMultiTexParameterIuivEXT_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterIuivEXT' not found!`);
  glGetMultiTexParameterIuivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform1uiEXT = glProgramUniform1uiEXT_Z;
__gshared glbfn_glProgramUniform1uiEXT glProgramUniform1uiEXT_Z = function void (uint a00,int a01,uint a02) {
  glbfn_glProgramUniform1uiEXT_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1uiEXT_loader (uint a00,int a01,uint a02) {
  *cast(void**)&glProgramUniform1uiEXT_Z = glbindGetProcAddress(`glProgramUniform1uiEXT`);
  if (*cast(void**)&glProgramUniform1uiEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1uiEXT' not found!`);
  glProgramUniform1uiEXT_Z(a00,a01,a02,);
}
alias glProgramUniform2uiEXT = glProgramUniform2uiEXT_Z;
__gshared glbfn_glProgramUniform2uiEXT glProgramUniform2uiEXT_Z = function void (uint a00,int a01,uint a02,uint a03) {
  glbfn_glProgramUniform2uiEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2uiEXT_loader (uint a00,int a01,uint a02,uint a03) {
  *cast(void**)&glProgramUniform2uiEXT_Z = glbindGetProcAddress(`glProgramUniform2uiEXT`);
  if (*cast(void**)&glProgramUniform2uiEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2uiEXT' not found!`);
  glProgramUniform2uiEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3uiEXT = glProgramUniform3uiEXT_Z;
__gshared glbfn_glProgramUniform3uiEXT glProgramUniform3uiEXT_Z = function void (uint a00,int a01,uint a02,uint a03,uint a04) {
  glbfn_glProgramUniform3uiEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3uiEXT_loader (uint a00,int a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glProgramUniform3uiEXT_Z = glbindGetProcAddress(`glProgramUniform3uiEXT`);
  if (*cast(void**)&glProgramUniform3uiEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3uiEXT' not found!`);
  glProgramUniform3uiEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4uiEXT = glProgramUniform4uiEXT_Z;
__gshared glbfn_glProgramUniform4uiEXT glProgramUniform4uiEXT_Z = function void (uint a00,int a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glProgramUniform4uiEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4uiEXT_loader (uint a00,int a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glProgramUniform4uiEXT_Z = glbindGetProcAddress(`glProgramUniform4uiEXT`);
  if (*cast(void**)&glProgramUniform4uiEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4uiEXT' not found!`);
  glProgramUniform4uiEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1uivEXT = glProgramUniform1uivEXT_Z;
__gshared glbfn_glProgramUniform1uivEXT glProgramUniform1uivEXT_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform1uivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1uivEXT_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform1uivEXT_Z = glbindGetProcAddress(`glProgramUniform1uivEXT`);
  if (*cast(void**)&glProgramUniform1uivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1uivEXT' not found!`);
  glProgramUniform1uivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2uivEXT = glProgramUniform2uivEXT_Z;
__gshared glbfn_glProgramUniform2uivEXT glProgramUniform2uivEXT_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform2uivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2uivEXT_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform2uivEXT_Z = glbindGetProcAddress(`glProgramUniform2uivEXT`);
  if (*cast(void**)&glProgramUniform2uivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2uivEXT' not found!`);
  glProgramUniform2uivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3uivEXT = glProgramUniform3uivEXT_Z;
__gshared glbfn_glProgramUniform3uivEXT glProgramUniform3uivEXT_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform3uivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3uivEXT_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform3uivEXT_Z = glbindGetProcAddress(`glProgramUniform3uivEXT`);
  if (*cast(void**)&glProgramUniform3uivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3uivEXT' not found!`);
  glProgramUniform3uivEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4uivEXT = glProgramUniform4uivEXT_Z;
__gshared glbfn_glProgramUniform4uivEXT glProgramUniform4uivEXT_Z = function void (uint a00,int a01,int a02,const(uint)* a03) {
  glbfn_glProgramUniform4uivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4uivEXT_loader (uint a00,int a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramUniform4uivEXT_Z = glbindGetProcAddress(`glProgramUniform4uivEXT`);
  if (*cast(void**)&glProgramUniform4uivEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4uivEXT' not found!`);
  glProgramUniform4uivEXT_Z(a00,a01,a02,a03,);
}
alias glNamedProgramLocalParameters4fvEXT = glNamedProgramLocalParameters4fvEXT_Z;
__gshared glbfn_glNamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT_Z = function void (uint a00,uint a01,uint a02,int a03,const(float)* a04) {
  glbfn_glNamedProgramLocalParameters4fvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedProgramLocalParameters4fvEXT_loader (uint a00,uint a01,uint a02,int a03,const(float)* a04) {
  *cast(void**)&glNamedProgramLocalParameters4fvEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameters4fvEXT`);
  if (*cast(void**)&glNamedProgramLocalParameters4fvEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameters4fvEXT' not found!`);
  glNamedProgramLocalParameters4fvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedProgramLocalParameterI4iEXT = glNamedProgramLocalParameterI4iEXT_Z;
__gshared glbfn_glNamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04,int a05,int a06) {
  glbfn_glNamedProgramLocalParameterI4iEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glNamedProgramLocalParameterI4iEXT_loader (uint a00,uint a01,uint a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glNamedProgramLocalParameterI4iEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4iEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4iEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4iEXT' not found!`);
  glNamedProgramLocalParameterI4iEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glNamedProgramLocalParameterI4ivEXT = glNamedProgramLocalParameterI4ivEXT_Z;
__gshared glbfn_glNamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glNamedProgramLocalParameterI4ivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedProgramLocalParameterI4ivEXT_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glNamedProgramLocalParameterI4ivEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4ivEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4ivEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4ivEXT' not found!`);
  glNamedProgramLocalParameterI4ivEXT_Z(a00,a01,a02,a03,);
}
alias glNamedProgramLocalParametersI4ivEXT = glNamedProgramLocalParametersI4ivEXT_Z;
__gshared glbfn_glNamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT_Z = function void (uint a00,uint a01,uint a02,int a03,const(int)* a04) {
  glbfn_glNamedProgramLocalParametersI4ivEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedProgramLocalParametersI4ivEXT_loader (uint a00,uint a01,uint a02,int a03,const(int)* a04) {
  *cast(void**)&glNamedProgramLocalParametersI4ivEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParametersI4ivEXT`);
  if (*cast(void**)&glNamedProgramLocalParametersI4ivEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4ivEXT' not found!`);
  glNamedProgramLocalParametersI4ivEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedProgramLocalParameterI4uiEXT = glNamedProgramLocalParameterI4uiEXT_Z;
__gshared glbfn_glNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06) {
  glbfn_glNamedProgramLocalParameterI4uiEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glNamedProgramLocalParameterI4uiEXT_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06) {
  *cast(void**)&glNamedProgramLocalParameterI4uiEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4uiEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4uiEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uiEXT' not found!`);
  glNamedProgramLocalParameterI4uiEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glNamedProgramLocalParameterI4uivEXT = glNamedProgramLocalParameterI4uivEXT_Z;
__gshared glbfn_glNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT_Z = function void (uint a00,uint a01,uint a02,const(uint)* a03) {
  glbfn_glNamedProgramLocalParameterI4uivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedProgramLocalParameterI4uivEXT_loader (uint a00,uint a01,uint a02,const(uint)* a03) {
  *cast(void**)&glNamedProgramLocalParameterI4uivEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4uivEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4uivEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uivEXT' not found!`);
  glNamedProgramLocalParameterI4uivEXT_Z(a00,a01,a02,a03,);
}
alias glNamedProgramLocalParametersI4uivEXT = glNamedProgramLocalParametersI4uivEXT_Z;
__gshared glbfn_glNamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT_Z = function void (uint a00,uint a01,uint a02,int a03,const(uint)* a04) {
  glbfn_glNamedProgramLocalParametersI4uivEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedProgramLocalParametersI4uivEXT_loader (uint a00,uint a01,uint a02,int a03,const(uint)* a04) {
  *cast(void**)&glNamedProgramLocalParametersI4uivEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParametersI4uivEXT`);
  if (*cast(void**)&glNamedProgramLocalParametersI4uivEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4uivEXT' not found!`);
  glNamedProgramLocalParametersI4uivEXT_Z(a00,a01,a02,a03,a04,);
}
alias glGetNamedProgramLocalParameterIivEXT = glGetNamedProgramLocalParameterIivEXT_Z;
__gshared glbfn_glGetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetNamedProgramLocalParameterIivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedProgramLocalParameterIivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetNamedProgramLocalParameterIivEXT_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterIivEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterIivEXT_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIivEXT' not found!`);
  glGetNamedProgramLocalParameterIivEXT_Z(a00,a01,a02,a03,);
}
alias glGetNamedProgramLocalParameterIuivEXT = glGetNamedProgramLocalParameterIuivEXT_Z;
__gshared glbfn_glGetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT_Z = function void (uint a00,uint a01,uint a02,uint* a03) {
  glbfn_glGetNamedProgramLocalParameterIuivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedProgramLocalParameterIuivEXT_loader (uint a00,uint a01,uint a02,uint* a03) {
  *cast(void**)&glGetNamedProgramLocalParameterIuivEXT_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterIuivEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterIuivEXT_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIuivEXT' not found!`);
  glGetNamedProgramLocalParameterIuivEXT_Z(a00,a01,a02,a03,);
}
alias glEnableClientStateiEXT = glEnableClientStateiEXT_Z;
__gshared glbfn_glEnableClientStateiEXT glEnableClientStateiEXT_Z = function void (uint a00,uint a01) {
  glbfn_glEnableClientStateiEXT_loader(a00,a01,);
};
private void glbfn_glEnableClientStateiEXT_loader (uint a00,uint a01) {
  *cast(void**)&glEnableClientStateiEXT_Z = glbindGetProcAddress(`glEnableClientStateiEXT`);
  if (*cast(void**)&glEnableClientStateiEXT_Z is null) assert(0, `OpenGL function 'glEnableClientStateiEXT' not found!`);
  glEnableClientStateiEXT_Z(a00,a01,);
}
alias glDisableClientStateiEXT = glDisableClientStateiEXT_Z;
__gshared glbfn_glDisableClientStateiEXT glDisableClientStateiEXT_Z = function void (uint a00,uint a01) {
  glbfn_glDisableClientStateiEXT_loader(a00,a01,);
};
private void glbfn_glDisableClientStateiEXT_loader (uint a00,uint a01) {
  *cast(void**)&glDisableClientStateiEXT_Z = glbindGetProcAddress(`glDisableClientStateiEXT`);
  if (*cast(void**)&glDisableClientStateiEXT_Z is null) assert(0, `OpenGL function 'glDisableClientStateiEXT' not found!`);
  glDisableClientStateiEXT_Z(a00,a01,);
}
alias glGetFloati_vEXT = glGetFloati_vEXT_Z;
__gshared glbfn_glGetFloati_vEXT glGetFloati_vEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetFloati_vEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetFloati_vEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetFloati_vEXT_Z = glbindGetProcAddress(`glGetFloati_vEXT`);
  if (*cast(void**)&glGetFloati_vEXT_Z is null) assert(0, `OpenGL function 'glGetFloati_vEXT' not found!`);
  glGetFloati_vEXT_Z(a00,a01,a02,);
}
alias glGetDoublei_vEXT = glGetDoublei_vEXT_Z;
__gshared glbfn_glGetDoublei_vEXT glGetDoublei_vEXT_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetDoublei_vEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetDoublei_vEXT_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetDoublei_vEXT_Z = glbindGetProcAddress(`glGetDoublei_vEXT`);
  if (*cast(void**)&glGetDoublei_vEXT_Z is null) assert(0, `OpenGL function 'glGetDoublei_vEXT' not found!`);
  glGetDoublei_vEXT_Z(a00,a01,a02,);
}
alias glGetPointeri_vEXT = glGetPointeri_vEXT_Z;
__gshared glbfn_glGetPointeri_vEXT glGetPointeri_vEXT_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetPointeri_vEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetPointeri_vEXT_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetPointeri_vEXT_Z = glbindGetProcAddress(`glGetPointeri_vEXT`);
  if (*cast(void**)&glGetPointeri_vEXT_Z is null) assert(0, `OpenGL function 'glGetPointeri_vEXT' not found!`);
  glGetPointeri_vEXT_Z(a00,a01,a02,);
}
alias glNamedProgramStringEXT = glNamedProgramStringEXT_Z;
__gshared glbfn_glNamedProgramStringEXT glNamedProgramStringEXT_Z = function void (uint a00,uint a01,uint a02,int a03,const(void)* a04) {
  glbfn_glNamedProgramStringEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedProgramStringEXT_loader (uint a00,uint a01,uint a02,int a03,const(void)* a04) {
  *cast(void**)&glNamedProgramStringEXT_Z = glbindGetProcAddress(`glNamedProgramStringEXT`);
  if (*cast(void**)&glNamedProgramStringEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramStringEXT' not found!`);
  glNamedProgramStringEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedProgramLocalParameter4dEXT = glNamedProgramLocalParameter4dEXT_Z;
__gshared glbfn_glNamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT_Z = function void (uint a00,uint a01,uint a02,double a03,double a04,double a05,double a06) {
  glbfn_glNamedProgramLocalParameter4dEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glNamedProgramLocalParameter4dEXT_loader (uint a00,uint a01,uint a02,double a03,double a04,double a05,double a06) {
  *cast(void**)&glNamedProgramLocalParameter4dEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4dEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4dEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dEXT' not found!`);
  glNamedProgramLocalParameter4dEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glNamedProgramLocalParameter4dvEXT = glNamedProgramLocalParameter4dvEXT_Z;
__gshared glbfn_glNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT_Z = function void (uint a00,uint a01,uint a02,const(double)* a03) {
  glbfn_glNamedProgramLocalParameter4dvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedProgramLocalParameter4dvEXT_loader (uint a00,uint a01,uint a02,const(double)* a03) {
  *cast(void**)&glNamedProgramLocalParameter4dvEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4dvEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4dvEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dvEXT' not found!`);
  glNamedProgramLocalParameter4dvEXT_Z(a00,a01,a02,a03,);
}
alias glNamedProgramLocalParameter4fEXT = glNamedProgramLocalParameter4fEXT_Z;
__gshared glbfn_glNamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT_Z = function void (uint a00,uint a01,uint a02,float a03,float a04,float a05,float a06) {
  glbfn_glNamedProgramLocalParameter4fEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glNamedProgramLocalParameter4fEXT_loader (uint a00,uint a01,uint a02,float a03,float a04,float a05,float a06) {
  *cast(void**)&glNamedProgramLocalParameter4fEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4fEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4fEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fEXT' not found!`);
  glNamedProgramLocalParameter4fEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glNamedProgramLocalParameter4fvEXT = glNamedProgramLocalParameter4fvEXT_Z;
__gshared glbfn_glNamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glNamedProgramLocalParameter4fvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedProgramLocalParameter4fvEXT_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glNamedProgramLocalParameter4fvEXT_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4fvEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4fvEXT_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fvEXT' not found!`);
  glNamedProgramLocalParameter4fvEXT_Z(a00,a01,a02,a03,);
}
alias glGetNamedProgramLocalParameterdvEXT = glGetNamedProgramLocalParameterdvEXT_Z;
__gshared glbfn_glGetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT_Z = function void (uint a00,uint a01,uint a02,double* a03) {
  glbfn_glGetNamedProgramLocalParameterdvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedProgramLocalParameterdvEXT_loader (uint a00,uint a01,uint a02,double* a03) {
  *cast(void**)&glGetNamedProgramLocalParameterdvEXT_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterdvEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterdvEXT_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterdvEXT' not found!`);
  glGetNamedProgramLocalParameterdvEXT_Z(a00,a01,a02,a03,);
}
alias glGetNamedProgramLocalParameterfvEXT = glGetNamedProgramLocalParameterfvEXT_Z;
__gshared glbfn_glGetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetNamedProgramLocalParameterfvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedProgramLocalParameterfvEXT_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetNamedProgramLocalParameterfvEXT_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterfvEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterfvEXT' not found!`);
  glGetNamedProgramLocalParameterfvEXT_Z(a00,a01,a02,a03,);
}
alias glGetNamedProgramivEXT = glGetNamedProgramivEXT_Z;
__gshared glbfn_glGetNamedProgramivEXT glGetNamedProgramivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetNamedProgramivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedProgramivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetNamedProgramivEXT_Z = glbindGetProcAddress(`glGetNamedProgramivEXT`);
  if (*cast(void**)&glGetNamedProgramivEXT_Z is null) assert(0, `OpenGL function 'glGetNamedProgramivEXT' not found!`);
  glGetNamedProgramivEXT_Z(a00,a01,a02,a03,);
}
alias glGetNamedProgramStringEXT = glGetNamedProgramStringEXT_Z;
__gshared glbfn_glGetNamedProgramStringEXT glGetNamedProgramStringEXT_Z = function void (uint a00,uint a01,uint a02,void* a03) {
  glbfn_glGetNamedProgramStringEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedProgramStringEXT_loader (uint a00,uint a01,uint a02,void* a03) {
  *cast(void**)&glGetNamedProgramStringEXT_Z = glbindGetProcAddress(`glGetNamedProgramStringEXT`);
  if (*cast(void**)&glGetNamedProgramStringEXT_Z is null) assert(0, `OpenGL function 'glGetNamedProgramStringEXT' not found!`);
  glGetNamedProgramStringEXT_Z(a00,a01,a02,a03,);
}
alias glNamedRenderbufferStorageEXT = glNamedRenderbufferStorageEXT_Z;
__gshared glbfn_glNamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT_Z = function void (uint a00,uint a01,int a02,int a03) {
  glbfn_glNamedRenderbufferStorageEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedRenderbufferStorageEXT_loader (uint a00,uint a01,int a02,int a03) {
  *cast(void**)&glNamedRenderbufferStorageEXT_Z = glbindGetProcAddress(`glNamedRenderbufferStorageEXT`);
  if (*cast(void**)&glNamedRenderbufferStorageEXT_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageEXT' not found!`);
  glNamedRenderbufferStorageEXT_Z(a00,a01,a02,a03,);
}
alias glGetNamedRenderbufferParameterivEXT = glGetNamedRenderbufferParameterivEXT_Z;
__gshared glbfn_glGetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetNamedRenderbufferParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedRenderbufferParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetNamedRenderbufferParameterivEXT_Z = glbindGetProcAddress(`glGetNamedRenderbufferParameterivEXT`);
  if (*cast(void**)&glGetNamedRenderbufferParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameterivEXT' not found!`);
  glGetNamedRenderbufferParameterivEXT_Z(a00,a01,a02,);
}
alias glNamedRenderbufferStorageMultisampleEXT = glNamedRenderbufferStorageMultisampleEXT_Z;
__gshared glbfn_glNamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT_Z = function void (uint a00,int a01,uint a02,int a03,int a04) {
  glbfn_glNamedRenderbufferStorageMultisampleEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedRenderbufferStorageMultisampleEXT_loader (uint a00,int a01,uint a02,int a03,int a04) {
  *cast(void**)&glNamedRenderbufferStorageMultisampleEXT_Z = glbindGetProcAddress(`glNamedRenderbufferStorageMultisampleEXT`);
  if (*cast(void**)&glNamedRenderbufferStorageMultisampleEXT_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleEXT' not found!`);
  glNamedRenderbufferStorageMultisampleEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedRenderbufferStorageMultisampleCoverageEXT = glNamedRenderbufferStorageMultisampleCoverageEXT_Z;
__gshared glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT_Z = function void (uint a00,int a01,int a02,uint a03,int a04,int a05) {
  glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT_loader (uint a00,int a01,int a02,uint a03,int a04,int a05) {
  *cast(void**)&glNamedRenderbufferStorageMultisampleCoverageEXT_Z = glbindGetProcAddress(`glNamedRenderbufferStorageMultisampleCoverageEXT`);
  if (*cast(void**)&glNamedRenderbufferStorageMultisampleCoverageEXT_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleCoverageEXT' not found!`);
  glNamedRenderbufferStorageMultisampleCoverageEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glCheckNamedFramebufferStatusEXT = glCheckNamedFramebufferStatusEXT_Z;
__gshared glbfn_glCheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT_Z = function uint (uint a00,uint a01) {
  return glbfn_glCheckNamedFramebufferStatusEXT_loader(a00,a01,);
};
private uint glbfn_glCheckNamedFramebufferStatusEXT_loader (uint a00,uint a01) {
  *cast(void**)&glCheckNamedFramebufferStatusEXT_Z = glbindGetProcAddress(`glCheckNamedFramebufferStatusEXT`);
  if (*cast(void**)&glCheckNamedFramebufferStatusEXT_Z is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatusEXT' not found!`);
  return glCheckNamedFramebufferStatusEXT_Z(a00,a01,);
}
alias glNamedFramebufferTexture1DEXT = glNamedFramebufferTexture1DEXT_Z;
__gshared glbfn_glNamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04) {
  glbfn_glNamedFramebufferTexture1DEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedFramebufferTexture1DEXT_loader (uint a00,uint a01,uint a02,uint a03,int a04) {
  *cast(void**)&glNamedFramebufferTexture1DEXT_Z = glbindGetProcAddress(`glNamedFramebufferTexture1DEXT`);
  if (*cast(void**)&glNamedFramebufferTexture1DEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture1DEXT' not found!`);
  glNamedFramebufferTexture1DEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedFramebufferTexture2DEXT = glNamedFramebufferTexture2DEXT_Z;
__gshared glbfn_glNamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04) {
  glbfn_glNamedFramebufferTexture2DEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedFramebufferTexture2DEXT_loader (uint a00,uint a01,uint a02,uint a03,int a04) {
  *cast(void**)&glNamedFramebufferTexture2DEXT_Z = glbindGetProcAddress(`glNamedFramebufferTexture2DEXT`);
  if (*cast(void**)&glNamedFramebufferTexture2DEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture2DEXT' not found!`);
  glNamedFramebufferTexture2DEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedFramebufferTexture3DEXT = glNamedFramebufferTexture3DEXT_Z;
__gshared glbfn_glNamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  glbfn_glNamedFramebufferTexture3DEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glNamedFramebufferTexture3DEXT_loader (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  *cast(void**)&glNamedFramebufferTexture3DEXT_Z = glbindGetProcAddress(`glNamedFramebufferTexture3DEXT`);
  if (*cast(void**)&glNamedFramebufferTexture3DEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture3DEXT' not found!`);
  glNamedFramebufferTexture3DEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glNamedFramebufferRenderbufferEXT = glNamedFramebufferRenderbufferEXT_Z;
__gshared glbfn_glNamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glNamedFramebufferRenderbufferEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedFramebufferRenderbufferEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glNamedFramebufferRenderbufferEXT_Z = glbindGetProcAddress(`glNamedFramebufferRenderbufferEXT`);
  if (*cast(void**)&glNamedFramebufferRenderbufferEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbufferEXT' not found!`);
  glNamedFramebufferRenderbufferEXT_Z(a00,a01,a02,a03,);
}
alias glGetNamedFramebufferAttachmentParameterivEXT = glGetNamedFramebufferAttachmentParameterivEXT_Z;
__gshared glbfn_glGetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetNamedFramebufferAttachmentParameterivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetNamedFramebufferAttachmentParameterivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetNamedFramebufferAttachmentParameterivEXT_Z = glbindGetProcAddress(`glGetNamedFramebufferAttachmentParameterivEXT`);
  if (*cast(void**)&glGetNamedFramebufferAttachmentParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameterivEXT' not found!`);
  glGetNamedFramebufferAttachmentParameterivEXT_Z(a00,a01,a02,a03,);
}
alias glGenerateTextureMipmapEXT = glGenerateTextureMipmapEXT_Z;
__gshared glbfn_glGenerateTextureMipmapEXT glGenerateTextureMipmapEXT_Z = function void (uint a00,uint a01) {
  glbfn_glGenerateTextureMipmapEXT_loader(a00,a01,);
};
private void glbfn_glGenerateTextureMipmapEXT_loader (uint a00,uint a01) {
  *cast(void**)&glGenerateTextureMipmapEXT_Z = glbindGetProcAddress(`glGenerateTextureMipmapEXT`);
  if (*cast(void**)&glGenerateTextureMipmapEXT_Z is null) assert(0, `OpenGL function 'glGenerateTextureMipmapEXT' not found!`);
  glGenerateTextureMipmapEXT_Z(a00,a01,);
}
alias glGenerateMultiTexMipmapEXT = glGenerateMultiTexMipmapEXT_Z;
__gshared glbfn_glGenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT_Z = function void (uint a00,uint a01) {
  glbfn_glGenerateMultiTexMipmapEXT_loader(a00,a01,);
};
private void glbfn_glGenerateMultiTexMipmapEXT_loader (uint a00,uint a01) {
  *cast(void**)&glGenerateMultiTexMipmapEXT_Z = glbindGetProcAddress(`glGenerateMultiTexMipmapEXT`);
  if (*cast(void**)&glGenerateMultiTexMipmapEXT_Z is null) assert(0, `OpenGL function 'glGenerateMultiTexMipmapEXT' not found!`);
  glGenerateMultiTexMipmapEXT_Z(a00,a01,);
}
alias glFramebufferDrawBufferEXT = glFramebufferDrawBufferEXT_Z;
__gshared glbfn_glFramebufferDrawBufferEXT glFramebufferDrawBufferEXT_Z = function void (uint a00,uint a01) {
  glbfn_glFramebufferDrawBufferEXT_loader(a00,a01,);
};
private void glbfn_glFramebufferDrawBufferEXT_loader (uint a00,uint a01) {
  *cast(void**)&glFramebufferDrawBufferEXT_Z = glbindGetProcAddress(`glFramebufferDrawBufferEXT`);
  if (*cast(void**)&glFramebufferDrawBufferEXT_Z is null) assert(0, `OpenGL function 'glFramebufferDrawBufferEXT' not found!`);
  glFramebufferDrawBufferEXT_Z(a00,a01,);
}
alias glFramebufferDrawBuffersEXT = glFramebufferDrawBuffersEXT_Z;
__gshared glbfn_glFramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glFramebufferDrawBuffersEXT_loader(a00,a01,a02,);
};
private void glbfn_glFramebufferDrawBuffersEXT_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glFramebufferDrawBuffersEXT_Z = glbindGetProcAddress(`glFramebufferDrawBuffersEXT`);
  if (*cast(void**)&glFramebufferDrawBuffersEXT_Z is null) assert(0, `OpenGL function 'glFramebufferDrawBuffersEXT' not found!`);
  glFramebufferDrawBuffersEXT_Z(a00,a01,a02,);
}
alias glFramebufferReadBufferEXT = glFramebufferReadBufferEXT_Z;
__gshared glbfn_glFramebufferReadBufferEXT glFramebufferReadBufferEXT_Z = function void (uint a00,uint a01) {
  glbfn_glFramebufferReadBufferEXT_loader(a00,a01,);
};
private void glbfn_glFramebufferReadBufferEXT_loader (uint a00,uint a01) {
  *cast(void**)&glFramebufferReadBufferEXT_Z = glbindGetProcAddress(`glFramebufferReadBufferEXT`);
  if (*cast(void**)&glFramebufferReadBufferEXT_Z is null) assert(0, `OpenGL function 'glFramebufferReadBufferEXT' not found!`);
  glFramebufferReadBufferEXT_Z(a00,a01,);
}
alias glGetFramebufferParameterivEXT = glGetFramebufferParameterivEXT_Z;
__gshared glbfn_glGetFramebufferParameterivEXT glGetFramebufferParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetFramebufferParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetFramebufferParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetFramebufferParameterivEXT_Z = glbindGetProcAddress(`glGetFramebufferParameterivEXT`);
  if (*cast(void**)&glGetFramebufferParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetFramebufferParameterivEXT' not found!`);
  glGetFramebufferParameterivEXT_Z(a00,a01,a02,);
}
alias glNamedCopyBufferSubDataEXT = glNamedCopyBufferSubDataEXT_Z;
__gshared glbfn_glNamedCopyBufferSubDataEXT glNamedCopyBufferSubDataEXT_Z = function void (uint a00,uint a01,int a02,int a03,int a04) {
  glbfn_glNamedCopyBufferSubDataEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedCopyBufferSubDataEXT_loader (uint a00,uint a01,int a02,int a03,int a04) {
  *cast(void**)&glNamedCopyBufferSubDataEXT_Z = glbindGetProcAddress(`glNamedCopyBufferSubDataEXT`);
  if (*cast(void**)&glNamedCopyBufferSubDataEXT_Z is null) assert(0, `OpenGL function 'glNamedCopyBufferSubDataEXT' not found!`);
  glNamedCopyBufferSubDataEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedFramebufferTextureEXT = glNamedFramebufferTextureEXT_Z;
__gshared glbfn_glNamedFramebufferTextureEXT glNamedFramebufferTextureEXT_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glNamedFramebufferTextureEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedFramebufferTextureEXT_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glNamedFramebufferTextureEXT_Z = glbindGetProcAddress(`glNamedFramebufferTextureEXT`);
  if (*cast(void**)&glNamedFramebufferTextureEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureEXT' not found!`);
  glNamedFramebufferTextureEXT_Z(a00,a01,a02,a03,);
}
alias glNamedFramebufferTextureLayerEXT = glNamedFramebufferTextureLayerEXT_Z;
__gshared glbfn_glNamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glNamedFramebufferTextureLayerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedFramebufferTextureLayerEXT_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glNamedFramebufferTextureLayerEXT_Z = glbindGetProcAddress(`glNamedFramebufferTextureLayerEXT`);
  if (*cast(void**)&glNamedFramebufferTextureLayerEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayerEXT' not found!`);
  glNamedFramebufferTextureLayerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glNamedFramebufferTextureFaceEXT = glNamedFramebufferTextureFaceEXT_Z;
__gshared glbfn_glNamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04) {
  glbfn_glNamedFramebufferTextureFaceEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glNamedFramebufferTextureFaceEXT_loader (uint a00,uint a01,uint a02,int a03,uint a04) {
  *cast(void**)&glNamedFramebufferTextureFaceEXT_Z = glbindGetProcAddress(`glNamedFramebufferTextureFaceEXT`);
  if (*cast(void**)&glNamedFramebufferTextureFaceEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureFaceEXT' not found!`);
  glNamedFramebufferTextureFaceEXT_Z(a00,a01,a02,a03,a04,);
}
alias glTextureRenderbufferEXT = glTextureRenderbufferEXT_Z;
__gshared glbfn_glTextureRenderbufferEXT glTextureRenderbufferEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glTextureRenderbufferEXT_loader(a00,a01,a02,);
};
private void glbfn_glTextureRenderbufferEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glTextureRenderbufferEXT_Z = glbindGetProcAddress(`glTextureRenderbufferEXT`);
  if (*cast(void**)&glTextureRenderbufferEXT_Z is null) assert(0, `OpenGL function 'glTextureRenderbufferEXT' not found!`);
  glTextureRenderbufferEXT_Z(a00,a01,a02,);
}
alias glMultiTexRenderbufferEXT = glMultiTexRenderbufferEXT_Z;
__gshared glbfn_glMultiTexRenderbufferEXT glMultiTexRenderbufferEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glMultiTexRenderbufferEXT_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexRenderbufferEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glMultiTexRenderbufferEXT_Z = glbindGetProcAddress(`glMultiTexRenderbufferEXT`);
  if (*cast(void**)&glMultiTexRenderbufferEXT_Z is null) assert(0, `OpenGL function 'glMultiTexRenderbufferEXT' not found!`);
  glMultiTexRenderbufferEXT_Z(a00,a01,a02,);
}
alias glVertexArrayVertexOffsetEXT = glVertexArrayVertexOffsetEXT_Z;
__gshared glbfn_glVertexArrayVertexOffsetEXT glVertexArrayVertexOffsetEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  glbfn_glVertexArrayVertexOffsetEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexArrayVertexOffsetEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  *cast(void**)&glVertexArrayVertexOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayVertexOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexOffsetEXT' not found!`);
  glVertexArrayVertexOffsetEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexArrayColorOffsetEXT = glVertexArrayColorOffsetEXT_Z;
__gshared glbfn_glVertexArrayColorOffsetEXT glVertexArrayColorOffsetEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  glbfn_glVertexArrayColorOffsetEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexArrayColorOffsetEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  *cast(void**)&glVertexArrayColorOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayColorOffsetEXT`);
  if (*cast(void**)&glVertexArrayColorOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayColorOffsetEXT' not found!`);
  glVertexArrayColorOffsetEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexArrayEdgeFlagOffsetEXT = glVertexArrayEdgeFlagOffsetEXT_Z;
__gshared glbfn_glVertexArrayEdgeFlagOffsetEXT glVertexArrayEdgeFlagOffsetEXT_Z = function void (uint a00,uint a01,int a02,int a03) {
  glbfn_glVertexArrayEdgeFlagOffsetEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexArrayEdgeFlagOffsetEXT_loader (uint a00,uint a01,int a02,int a03) {
  *cast(void**)&glVertexArrayEdgeFlagOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayEdgeFlagOffsetEXT`);
  if (*cast(void**)&glVertexArrayEdgeFlagOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayEdgeFlagOffsetEXT' not found!`);
  glVertexArrayEdgeFlagOffsetEXT_Z(a00,a01,a02,a03,);
}
alias glVertexArrayIndexOffsetEXT = glVertexArrayIndexOffsetEXT_Z;
__gshared glbfn_glVertexArrayIndexOffsetEXT glVertexArrayIndexOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glVertexArrayIndexOffsetEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayIndexOffsetEXT_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glVertexArrayIndexOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayIndexOffsetEXT`);
  if (*cast(void**)&glVertexArrayIndexOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayIndexOffsetEXT' not found!`);
  glVertexArrayIndexOffsetEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayNormalOffsetEXT = glVertexArrayNormalOffsetEXT_Z;
__gshared glbfn_glVertexArrayNormalOffsetEXT glVertexArrayNormalOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glVertexArrayNormalOffsetEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayNormalOffsetEXT_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glVertexArrayNormalOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayNormalOffsetEXT`);
  if (*cast(void**)&glVertexArrayNormalOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayNormalOffsetEXT' not found!`);
  glVertexArrayNormalOffsetEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayTexCoordOffsetEXT = glVertexArrayTexCoordOffsetEXT_Z;
__gshared glbfn_glVertexArrayTexCoordOffsetEXT glVertexArrayTexCoordOffsetEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  glbfn_glVertexArrayTexCoordOffsetEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexArrayTexCoordOffsetEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  *cast(void**)&glVertexArrayTexCoordOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayTexCoordOffsetEXT`);
  if (*cast(void**)&glVertexArrayTexCoordOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayTexCoordOffsetEXT' not found!`);
  glVertexArrayTexCoordOffsetEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexArrayMultiTexCoordOffsetEXT = glVertexArrayMultiTexCoordOffsetEXT_Z;
__gshared glbfn_glVertexArrayMultiTexCoordOffsetEXT glVertexArrayMultiTexCoordOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04,int a05,int a06) {
  glbfn_glVertexArrayMultiTexCoordOffsetEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glVertexArrayMultiTexCoordOffsetEXT_loader (uint a00,uint a01,uint a02,int a03,uint a04,int a05,int a06) {
  *cast(void**)&glVertexArrayMultiTexCoordOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayMultiTexCoordOffsetEXT`);
  if (*cast(void**)&glVertexArrayMultiTexCoordOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayMultiTexCoordOffsetEXT' not found!`);
  glVertexArrayMultiTexCoordOffsetEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glVertexArrayFogCoordOffsetEXT = glVertexArrayFogCoordOffsetEXT_Z;
__gshared glbfn_glVertexArrayFogCoordOffsetEXT glVertexArrayFogCoordOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glVertexArrayFogCoordOffsetEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayFogCoordOffsetEXT_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glVertexArrayFogCoordOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayFogCoordOffsetEXT`);
  if (*cast(void**)&glVertexArrayFogCoordOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayFogCoordOffsetEXT' not found!`);
  glVertexArrayFogCoordOffsetEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArraySecondaryColorOffsetEXT = glVertexArraySecondaryColorOffsetEXT_Z;
__gshared glbfn_glVertexArraySecondaryColorOffsetEXT glVertexArraySecondaryColorOffsetEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  glbfn_glVertexArraySecondaryColorOffsetEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexArraySecondaryColorOffsetEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  *cast(void**)&glVertexArraySecondaryColorOffsetEXT_Z = glbindGetProcAddress(`glVertexArraySecondaryColorOffsetEXT`);
  if (*cast(void**)&glVertexArraySecondaryColorOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArraySecondaryColorOffsetEXT' not found!`);
  glVertexArraySecondaryColorOffsetEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexArrayVertexAttribOffsetEXT = glVertexArrayVertexAttribOffsetEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribOffsetEXT glVertexArrayVertexAttribOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04,ubyte a05,int a06,int a07) {
  glbfn_glVertexArrayVertexAttribOffsetEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glVertexArrayVertexAttribOffsetEXT_loader (uint a00,uint a01,uint a02,int a03,uint a04,ubyte a05,int a06,int a07) {
  *cast(void**)&glVertexArrayVertexAttribOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribOffsetEXT' not found!`);
  glVertexArrayVertexAttribOffsetEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glVertexArrayVertexAttribIOffsetEXT = glVertexArrayVertexAttribIOffsetEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribIOffsetEXT glVertexArrayVertexAttribIOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04,int a05,int a06) {
  glbfn_glVertexArrayVertexAttribIOffsetEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glVertexArrayVertexAttribIOffsetEXT_loader (uint a00,uint a01,uint a02,int a03,uint a04,int a05,int a06) {
  *cast(void**)&glVertexArrayVertexAttribIOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribIOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribIOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIOffsetEXT' not found!`);
  glVertexArrayVertexAttribIOffsetEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glEnableVertexArrayEXT = glEnableVertexArrayEXT_Z;
__gshared glbfn_glEnableVertexArrayEXT glEnableVertexArrayEXT_Z = function void (uint a00,uint a01) {
  glbfn_glEnableVertexArrayEXT_loader(a00,a01,);
};
private void glbfn_glEnableVertexArrayEXT_loader (uint a00,uint a01) {
  *cast(void**)&glEnableVertexArrayEXT_Z = glbindGetProcAddress(`glEnableVertexArrayEXT`);
  if (*cast(void**)&glEnableVertexArrayEXT_Z is null) assert(0, `OpenGL function 'glEnableVertexArrayEXT' not found!`);
  glEnableVertexArrayEXT_Z(a00,a01,);
}
alias glDisableVertexArrayEXT = glDisableVertexArrayEXT_Z;
__gshared glbfn_glDisableVertexArrayEXT glDisableVertexArrayEXT_Z = function void (uint a00,uint a01) {
  glbfn_glDisableVertexArrayEXT_loader(a00,a01,);
};
private void glbfn_glDisableVertexArrayEXT_loader (uint a00,uint a01) {
  *cast(void**)&glDisableVertexArrayEXT_Z = glbindGetProcAddress(`glDisableVertexArrayEXT`);
  if (*cast(void**)&glDisableVertexArrayEXT_Z is null) assert(0, `OpenGL function 'glDisableVertexArrayEXT' not found!`);
  glDisableVertexArrayEXT_Z(a00,a01,);
}
alias glEnableVertexArrayAttribEXT = glEnableVertexArrayAttribEXT_Z;
__gshared glbfn_glEnableVertexArrayAttribEXT glEnableVertexArrayAttribEXT_Z = function void (uint a00,uint a01) {
  glbfn_glEnableVertexArrayAttribEXT_loader(a00,a01,);
};
private void glbfn_glEnableVertexArrayAttribEXT_loader (uint a00,uint a01) {
  *cast(void**)&glEnableVertexArrayAttribEXT_Z = glbindGetProcAddress(`glEnableVertexArrayAttribEXT`);
  if (*cast(void**)&glEnableVertexArrayAttribEXT_Z is null) assert(0, `OpenGL function 'glEnableVertexArrayAttribEXT' not found!`);
  glEnableVertexArrayAttribEXT_Z(a00,a01,);
}
alias glDisableVertexArrayAttribEXT = glDisableVertexArrayAttribEXT_Z;
__gshared glbfn_glDisableVertexArrayAttribEXT glDisableVertexArrayAttribEXT_Z = function void (uint a00,uint a01) {
  glbfn_glDisableVertexArrayAttribEXT_loader(a00,a01,);
};
private void glbfn_glDisableVertexArrayAttribEXT_loader (uint a00,uint a01) {
  *cast(void**)&glDisableVertexArrayAttribEXT_Z = glbindGetProcAddress(`glDisableVertexArrayAttribEXT`);
  if (*cast(void**)&glDisableVertexArrayAttribEXT_Z is null) assert(0, `OpenGL function 'glDisableVertexArrayAttribEXT' not found!`);
  glDisableVertexArrayAttribEXT_Z(a00,a01,);
}
alias glGetVertexArrayIntegervEXT = glGetVertexArrayIntegervEXT_Z;
__gshared glbfn_glGetVertexArrayIntegervEXT glGetVertexArrayIntegervEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexArrayIntegervEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexArrayIntegervEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexArrayIntegervEXT_Z = glbindGetProcAddress(`glGetVertexArrayIntegervEXT`);
  if (*cast(void**)&glGetVertexArrayIntegervEXT_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIntegervEXT' not found!`);
  glGetVertexArrayIntegervEXT_Z(a00,a01,a02,);
}
alias glGetVertexArrayPointervEXT = glGetVertexArrayPointervEXT_Z;
__gshared glbfn_glGetVertexArrayPointervEXT glGetVertexArrayPointervEXT_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetVertexArrayPointervEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexArrayPointervEXT_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetVertexArrayPointervEXT_Z = glbindGetProcAddress(`glGetVertexArrayPointervEXT`);
  if (*cast(void**)&glGetVertexArrayPointervEXT_Z is null) assert(0, `OpenGL function 'glGetVertexArrayPointervEXT' not found!`);
  glGetVertexArrayPointervEXT_Z(a00,a01,a02,);
}
alias glGetVertexArrayIntegeri_vEXT = glGetVertexArrayIntegeri_vEXT_Z;
__gshared glbfn_glGetVertexArrayIntegeri_vEXT glGetVertexArrayIntegeri_vEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetVertexArrayIntegeri_vEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetVertexArrayIntegeri_vEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetVertexArrayIntegeri_vEXT_Z = glbindGetProcAddress(`glGetVertexArrayIntegeri_vEXT`);
  if (*cast(void**)&glGetVertexArrayIntegeri_vEXT_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIntegeri_vEXT' not found!`);
  glGetVertexArrayIntegeri_vEXT_Z(a00,a01,a02,a03,);
}
alias glGetVertexArrayPointeri_vEXT = glGetVertexArrayPointeri_vEXT_Z;
__gshared glbfn_glGetVertexArrayPointeri_vEXT glGetVertexArrayPointeri_vEXT_Z = function void (uint a00,uint a01,uint a02,void** a03) {
  glbfn_glGetVertexArrayPointeri_vEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetVertexArrayPointeri_vEXT_loader (uint a00,uint a01,uint a02,void** a03) {
  *cast(void**)&glGetVertexArrayPointeri_vEXT_Z = glbindGetProcAddress(`glGetVertexArrayPointeri_vEXT`);
  if (*cast(void**)&glGetVertexArrayPointeri_vEXT_Z is null) assert(0, `OpenGL function 'glGetVertexArrayPointeri_vEXT' not found!`);
  glGetVertexArrayPointeri_vEXT_Z(a00,a01,a02,a03,);
}
alias glMapNamedBufferRangeEXT = glMapNamedBufferRangeEXT_Z;
__gshared glbfn_glMapNamedBufferRangeEXT glMapNamedBufferRangeEXT_Z = function void* (uint a00,int a01,int a02,uint a03) {
  return glbfn_glMapNamedBufferRangeEXT_loader(a00,a01,a02,a03,);
};
private void* glbfn_glMapNamedBufferRangeEXT_loader (uint a00,int a01,int a02,uint a03) {
  *cast(void**)&glMapNamedBufferRangeEXT_Z = glbindGetProcAddress(`glMapNamedBufferRangeEXT`);
  if (*cast(void**)&glMapNamedBufferRangeEXT_Z is null) assert(0, `OpenGL function 'glMapNamedBufferRangeEXT' not found!`);
  return glMapNamedBufferRangeEXT_Z(a00,a01,a02,a03,);
}
alias glFlushMappedNamedBufferRangeEXT = glFlushMappedNamedBufferRangeEXT_Z;
__gshared glbfn_glFlushMappedNamedBufferRangeEXT glFlushMappedNamedBufferRangeEXT_Z = function void (uint a00,int a01,int a02) {
  glbfn_glFlushMappedNamedBufferRangeEXT_loader(a00,a01,a02,);
};
private void glbfn_glFlushMappedNamedBufferRangeEXT_loader (uint a00,int a01,int a02) {
  *cast(void**)&glFlushMappedNamedBufferRangeEXT_Z = glbindGetProcAddress(`glFlushMappedNamedBufferRangeEXT`);
  if (*cast(void**)&glFlushMappedNamedBufferRangeEXT_Z is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRangeEXT' not found!`);
  glFlushMappedNamedBufferRangeEXT_Z(a00,a01,a02,);
}
alias glNamedBufferStorageEXT = glNamedBufferStorageEXT_Z;
__gshared glbfn_glNamedBufferStorageEXT glNamedBufferStorageEXT_Z = function void (uint a00,int a01,const(void)* a02,uint a03) {
  glbfn_glNamedBufferStorageEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedBufferStorageEXT_loader (uint a00,int a01,const(void)* a02,uint a03) {
  *cast(void**)&glNamedBufferStorageEXT_Z = glbindGetProcAddress(`glNamedBufferStorageEXT`);
  if (*cast(void**)&glNamedBufferStorageEXT_Z is null) assert(0, `OpenGL function 'glNamedBufferStorageEXT' not found!`);
  glNamedBufferStorageEXT_Z(a00,a01,a02,a03,);
}
alias glClearNamedBufferDataEXT = glClearNamedBufferDataEXT_Z;
__gshared glbfn_glClearNamedBufferDataEXT glClearNamedBufferDataEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,const(void)* a04) {
  glbfn_glClearNamedBufferDataEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glClearNamedBufferDataEXT_loader (uint a00,uint a01,uint a02,uint a03,const(void)* a04) {
  *cast(void**)&glClearNamedBufferDataEXT_Z = glbindGetProcAddress(`glClearNamedBufferDataEXT`);
  if (*cast(void**)&glClearNamedBufferDataEXT_Z is null) assert(0, `OpenGL function 'glClearNamedBufferDataEXT' not found!`);
  glClearNamedBufferDataEXT_Z(a00,a01,a02,a03,a04,);
}
alias glClearNamedBufferSubDataEXT = glClearNamedBufferSubDataEXT_Z;
__gshared glbfn_glClearNamedBufferSubDataEXT glClearNamedBufferSubDataEXT_Z = function void (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glClearNamedBufferSubDataEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glClearNamedBufferSubDataEXT_loader (uint a00,uint a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glClearNamedBufferSubDataEXT_Z = glbindGetProcAddress(`glClearNamedBufferSubDataEXT`);
  if (*cast(void**)&glClearNamedBufferSubDataEXT_Z is null) assert(0, `OpenGL function 'glClearNamedBufferSubDataEXT' not found!`);
  glClearNamedBufferSubDataEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glNamedFramebufferParameteriEXT = glNamedFramebufferParameteriEXT_Z;
__gshared glbfn_glNamedFramebufferParameteriEXT glNamedFramebufferParameteriEXT_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glNamedFramebufferParameteriEXT_loader(a00,a01,a02,);
};
private void glbfn_glNamedFramebufferParameteriEXT_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glNamedFramebufferParameteriEXT_Z = glbindGetProcAddress(`glNamedFramebufferParameteriEXT`);
  if (*cast(void**)&glNamedFramebufferParameteriEXT_Z is null) assert(0, `OpenGL function 'glNamedFramebufferParameteriEXT' not found!`);
  glNamedFramebufferParameteriEXT_Z(a00,a01,a02,);
}
alias glGetNamedFramebufferParameterivEXT = glGetNamedFramebufferParameterivEXT_Z;
__gshared glbfn_glGetNamedFramebufferParameterivEXT glGetNamedFramebufferParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetNamedFramebufferParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedFramebufferParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetNamedFramebufferParameterivEXT_Z = glbindGetProcAddress(`glGetNamedFramebufferParameterivEXT`);
  if (*cast(void**)&glGetNamedFramebufferParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameterivEXT' not found!`);
  glGetNamedFramebufferParameterivEXT_Z(a00,a01,a02,);
}
alias glProgramUniform1dEXT = glProgramUniform1dEXT_Z;
__gshared glbfn_glProgramUniform1dEXT glProgramUniform1dEXT_Z = function void (uint a00,int a01,double a02) {
  glbfn_glProgramUniform1dEXT_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniform1dEXT_loader (uint a00,int a01,double a02) {
  *cast(void**)&glProgramUniform1dEXT_Z = glbindGetProcAddress(`glProgramUniform1dEXT`);
  if (*cast(void**)&glProgramUniform1dEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1dEXT' not found!`);
  glProgramUniform1dEXT_Z(a00,a01,a02,);
}
alias glProgramUniform2dEXT = glProgramUniform2dEXT_Z;
__gshared glbfn_glProgramUniform2dEXT glProgramUniform2dEXT_Z = function void (uint a00,int a01,double a02,double a03) {
  glbfn_glProgramUniform2dEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2dEXT_loader (uint a00,int a01,double a02,double a03) {
  *cast(void**)&glProgramUniform2dEXT_Z = glbindGetProcAddress(`glProgramUniform2dEXT`);
  if (*cast(void**)&glProgramUniform2dEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2dEXT' not found!`);
  glProgramUniform2dEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3dEXT = glProgramUniform3dEXT_Z;
__gshared glbfn_glProgramUniform3dEXT glProgramUniform3dEXT_Z = function void (uint a00,int a01,double a02,double a03,double a04) {
  glbfn_glProgramUniform3dEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniform3dEXT_loader (uint a00,int a01,double a02,double a03,double a04) {
  *cast(void**)&glProgramUniform3dEXT_Z = glbindGetProcAddress(`glProgramUniform3dEXT`);
  if (*cast(void**)&glProgramUniform3dEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3dEXT' not found!`);
  glProgramUniform3dEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniform4dEXT = glProgramUniform4dEXT_Z;
__gshared glbfn_glProgramUniform4dEXT glProgramUniform4dEXT_Z = function void (uint a00,int a01,double a02,double a03,double a04,double a05) {
  glbfn_glProgramUniform4dEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramUniform4dEXT_loader (uint a00,int a01,double a02,double a03,double a04,double a05) {
  *cast(void**)&glProgramUniform4dEXT_Z = glbindGetProcAddress(`glProgramUniform4dEXT`);
  if (*cast(void**)&glProgramUniform4dEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4dEXT' not found!`);
  glProgramUniform4dEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramUniform1dvEXT = glProgramUniform1dvEXT_Z;
__gshared glbfn_glProgramUniform1dvEXT glProgramUniform1dvEXT_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform1dvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform1dvEXT_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform1dvEXT_Z = glbindGetProcAddress(`glProgramUniform1dvEXT`);
  if (*cast(void**)&glProgramUniform1dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform1dvEXT' not found!`);
  glProgramUniform1dvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform2dvEXT = glProgramUniform2dvEXT_Z;
__gshared glbfn_glProgramUniform2dvEXT glProgramUniform2dvEXT_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform2dvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform2dvEXT_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform2dvEXT_Z = glbindGetProcAddress(`glProgramUniform2dvEXT`);
  if (*cast(void**)&glProgramUniform2dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform2dvEXT' not found!`);
  glProgramUniform2dvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform3dvEXT = glProgramUniform3dvEXT_Z;
__gshared glbfn_glProgramUniform3dvEXT glProgramUniform3dvEXT_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform3dvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform3dvEXT_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform3dvEXT_Z = glbindGetProcAddress(`glProgramUniform3dvEXT`);
  if (*cast(void**)&glProgramUniform3dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform3dvEXT' not found!`);
  glProgramUniform3dvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniform4dvEXT = glProgramUniform4dvEXT_Z;
__gshared glbfn_glProgramUniform4dvEXT glProgramUniform4dvEXT_Z = function void (uint a00,int a01,int a02,const(double)* a03) {
  glbfn_glProgramUniform4dvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniform4dvEXT_loader (uint a00,int a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramUniform4dvEXT_Z = glbindGetProcAddress(`glProgramUniform4dvEXT`);
  if (*cast(void**)&glProgramUniform4dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniform4dvEXT' not found!`);
  glProgramUniform4dvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramUniformMatrix2dvEXT = glProgramUniformMatrix2dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix2dvEXT glProgramUniformMatrix2dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix2dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix2dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix2dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dvEXT' not found!`);
  glProgramUniformMatrix2dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3dvEXT = glProgramUniformMatrix3dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix3dvEXT glProgramUniformMatrix3dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix3dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix3dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix3dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dvEXT' not found!`);
  glProgramUniformMatrix3dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4dvEXT = glProgramUniformMatrix4dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix4dvEXT glProgramUniformMatrix4dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix4dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix4dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix4dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dvEXT' not found!`);
  glProgramUniformMatrix4dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x3dvEXT = glProgramUniformMatrix2x3dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix2x3dvEXT glProgramUniformMatrix2x3dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix2x3dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x3dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix2x3dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x3dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dvEXT' not found!`);
  glProgramUniformMatrix2x3dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix2x4dvEXT = glProgramUniformMatrix2x4dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix2x4dvEXT glProgramUniformMatrix2x4dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix2x4dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix2x4dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix2x4dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x4dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dvEXT' not found!`);
  glProgramUniformMatrix2x4dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x2dvEXT = glProgramUniformMatrix3x2dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix3x2dvEXT glProgramUniformMatrix3x2dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix3x2dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x2dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix3x2dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x2dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dvEXT' not found!`);
  glProgramUniformMatrix3x2dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix3x4dvEXT = glProgramUniformMatrix3x4dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix3x4dvEXT glProgramUniformMatrix3x4dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix3x4dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix3x4dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix3x4dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x4dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dvEXT' not found!`);
  glProgramUniformMatrix3x4dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x2dvEXT = glProgramUniformMatrix4x2dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix4x2dvEXT glProgramUniformMatrix4x2dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix4x2dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x2dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix4x2dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x2dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dvEXT' not found!`);
  glProgramUniformMatrix4x2dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramUniformMatrix4x3dvEXT = glProgramUniformMatrix4x3dvEXT_Z;
__gshared glbfn_glProgramUniformMatrix4x3dvEXT glProgramUniformMatrix4x3dvEXT_Z = function void (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  glbfn_glProgramUniformMatrix4x3dvEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramUniformMatrix4x3dvEXT_loader (uint a00,int a01,int a02,ubyte a03,const(double)* a04) {
  *cast(void**)&glProgramUniformMatrix4x3dvEXT_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x3dvEXT_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dvEXT' not found!`);
  glProgramUniformMatrix4x3dvEXT_Z(a00,a01,a02,a03,a04,);
}
alias glTextureBufferRangeEXT = glTextureBufferRangeEXT_Z;
__gshared glbfn_glTextureBufferRangeEXT glTextureBufferRangeEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  glbfn_glTextureBufferRangeEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glTextureBufferRangeEXT_loader (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  *cast(void**)&glTextureBufferRangeEXT_Z = glbindGetProcAddress(`glTextureBufferRangeEXT`);
  if (*cast(void**)&glTextureBufferRangeEXT_Z is null) assert(0, `OpenGL function 'glTextureBufferRangeEXT' not found!`);
  glTextureBufferRangeEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTextureStorage1DEXT = glTextureStorage1DEXT_Z;
__gshared glbfn_glTextureStorage1DEXT glTextureStorage1DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04) {
  glbfn_glTextureStorage1DEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTextureStorage1DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04) {
  *cast(void**)&glTextureStorage1DEXT_Z = glbindGetProcAddress(`glTextureStorage1DEXT`);
  if (*cast(void**)&glTextureStorage1DEXT_Z is null) assert(0, `OpenGL function 'glTextureStorage1DEXT' not found!`);
  glTextureStorage1DEXT_Z(a00,a01,a02,a03,a04,);
}
alias glTextureStorage2DEXT = glTextureStorage2DEXT_Z;
__gshared glbfn_glTextureStorage2DEXT glTextureStorage2DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  glbfn_glTextureStorage2DEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glTextureStorage2DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05) {
  *cast(void**)&glTextureStorage2DEXT_Z = glbindGetProcAddress(`glTextureStorage2DEXT`);
  if (*cast(void**)&glTextureStorage2DEXT_Z is null) assert(0, `OpenGL function 'glTextureStorage2DEXT' not found!`);
  glTextureStorage2DEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glTextureStorage3DEXT = glTextureStorage3DEXT_Z;
__gshared glbfn_glTextureStorage3DEXT glTextureStorage3DEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06) {
  glbfn_glTextureStorage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTextureStorage3DEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06) {
  *cast(void**)&glTextureStorage3DEXT_Z = glbindGetProcAddress(`glTextureStorage3DEXT`);
  if (*cast(void**)&glTextureStorage3DEXT_Z is null) assert(0, `OpenGL function 'glTextureStorage3DEXT' not found!`);
  glTextureStorage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTextureStorage2DMultisampleEXT = glTextureStorage2DMultisampleEXT_Z;
__gshared glbfn_glTextureStorage2DMultisampleEXT glTextureStorage2DMultisampleEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,ubyte a06) {
  glbfn_glTextureStorage2DMultisampleEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTextureStorage2DMultisampleEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,ubyte a06) {
  *cast(void**)&glTextureStorage2DMultisampleEXT_Z = glbindGetProcAddress(`glTextureStorage2DMultisampleEXT`);
  if (*cast(void**)&glTextureStorage2DMultisampleEXT_Z is null) assert(0, `OpenGL function 'glTextureStorage2DMultisampleEXT' not found!`);
  glTextureStorage2DMultisampleEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTextureStorage3DMultisampleEXT = glTextureStorage3DMultisampleEXT_Z;
__gshared glbfn_glTextureStorage3DMultisampleEXT glTextureStorage3DMultisampleEXT_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,ubyte a07) {
  glbfn_glTextureStorage3DMultisampleEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTextureStorage3DMultisampleEXT_loader (uint a00,uint a01,int a02,uint a03,int a04,int a05,int a06,ubyte a07) {
  *cast(void**)&glTextureStorage3DMultisampleEXT_Z = glbindGetProcAddress(`glTextureStorage3DMultisampleEXT`);
  if (*cast(void**)&glTextureStorage3DMultisampleEXT_Z is null) assert(0, `OpenGL function 'glTextureStorage3DMultisampleEXT' not found!`);
  glTextureStorage3DMultisampleEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glVertexArrayBindVertexBufferEXT = glVertexArrayBindVertexBufferEXT_Z;
__gshared glbfn_glVertexArrayBindVertexBufferEXT glVertexArrayBindVertexBufferEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glVertexArrayBindVertexBufferEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayBindVertexBufferEXT_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glVertexArrayBindVertexBufferEXT_Z = glbindGetProcAddress(`glVertexArrayBindVertexBufferEXT`);
  if (*cast(void**)&glVertexArrayBindVertexBufferEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayBindVertexBufferEXT' not found!`);
  glVertexArrayBindVertexBufferEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayVertexAttribFormatEXT = glVertexArrayVertexAttribFormatEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribFormatEXT glVertexArrayVertexAttribFormatEXT_Z = function void (uint a00,uint a01,int a02,uint a03,ubyte a04,uint a05) {
  glbfn_glVertexArrayVertexAttribFormatEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glVertexArrayVertexAttribFormatEXT_loader (uint a00,uint a01,int a02,uint a03,ubyte a04,uint a05) {
  *cast(void**)&glVertexArrayVertexAttribFormatEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribFormatEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribFormatEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribFormatEXT' not found!`);
  glVertexArrayVertexAttribFormatEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glVertexArrayVertexAttribIFormatEXT = glVertexArrayVertexAttribIFormatEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribIFormatEXT glVertexArrayVertexAttribIFormatEXT_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04) {
  glbfn_glVertexArrayVertexAttribIFormatEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayVertexAttribIFormatEXT_loader (uint a00,uint a01,int a02,uint a03,uint a04) {
  *cast(void**)&glVertexArrayVertexAttribIFormatEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribIFormatEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribIFormatEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIFormatEXT' not found!`);
  glVertexArrayVertexAttribIFormatEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayVertexAttribLFormatEXT = glVertexArrayVertexAttribLFormatEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribLFormatEXT glVertexArrayVertexAttribLFormatEXT_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04) {
  glbfn_glVertexArrayVertexAttribLFormatEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexArrayVertexAttribLFormatEXT_loader (uint a00,uint a01,int a02,uint a03,uint a04) {
  *cast(void**)&glVertexArrayVertexAttribLFormatEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribLFormatEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribLFormatEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLFormatEXT' not found!`);
  glVertexArrayVertexAttribLFormatEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexArrayVertexAttribBindingEXT = glVertexArrayVertexAttribBindingEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribBindingEXT glVertexArrayVertexAttribBindingEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glVertexArrayVertexAttribBindingEXT_loader(a00,a01,a02,);
};
private void glbfn_glVertexArrayVertexAttribBindingEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glVertexArrayVertexAttribBindingEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribBindingEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribBindingEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribBindingEXT' not found!`);
  glVertexArrayVertexAttribBindingEXT_Z(a00,a01,a02,);
}
alias glVertexArrayVertexBindingDivisorEXT = glVertexArrayVertexBindingDivisorEXT_Z;
__gshared glbfn_glVertexArrayVertexBindingDivisorEXT glVertexArrayVertexBindingDivisorEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glVertexArrayVertexBindingDivisorEXT_loader(a00,a01,a02,);
};
private void glbfn_glVertexArrayVertexBindingDivisorEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glVertexArrayVertexBindingDivisorEXT_Z = glbindGetProcAddress(`glVertexArrayVertexBindingDivisorEXT`);
  if (*cast(void**)&glVertexArrayVertexBindingDivisorEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexBindingDivisorEXT' not found!`);
  glVertexArrayVertexBindingDivisorEXT_Z(a00,a01,a02,);
}
alias glVertexArrayVertexAttribLOffsetEXT = glVertexArrayVertexAttribLOffsetEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribLOffsetEXT glVertexArrayVertexAttribLOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04,int a05,int a06) {
  glbfn_glVertexArrayVertexAttribLOffsetEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glVertexArrayVertexAttribLOffsetEXT_loader (uint a00,uint a01,uint a02,int a03,uint a04,int a05,int a06) {
  *cast(void**)&glVertexArrayVertexAttribLOffsetEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribLOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribLOffsetEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLOffsetEXT' not found!`);
  glVertexArrayVertexAttribLOffsetEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTexturePageCommitmentEXT = glTexturePageCommitmentEXT_Z;
__gshared glbfn_glTexturePageCommitmentEXT glTexturePageCommitmentEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,ubyte a08) {
  glbfn_glTexturePageCommitmentEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTexturePageCommitmentEXT_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,ubyte a08) {
  *cast(void**)&glTexturePageCommitmentEXT_Z = glbindGetProcAddress(`glTexturePageCommitmentEXT`);
  if (*cast(void**)&glTexturePageCommitmentEXT_Z is null) assert(0, `OpenGL function 'glTexturePageCommitmentEXT' not found!`);
  glTexturePageCommitmentEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glVertexArrayVertexAttribDivisorEXT = glVertexArrayVertexAttribDivisorEXT_Z;
__gshared glbfn_glVertexArrayVertexAttribDivisorEXT glVertexArrayVertexAttribDivisorEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glVertexArrayVertexAttribDivisorEXT_loader(a00,a01,a02,);
};
private void glbfn_glVertexArrayVertexAttribDivisorEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glVertexArrayVertexAttribDivisorEXT_Z = glbindGetProcAddress(`glVertexArrayVertexAttribDivisorEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribDivisorEXT_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribDivisorEXT' not found!`);
  glVertexArrayVertexAttribDivisorEXT_Z(a00,a01,a02,);
}
alias glColorMaskIndexedEXT = glColorMaskIndexedEXT_Z;
__gshared glbfn_glColorMaskIndexedEXT glColorMaskIndexedEXT_Z = function void (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  glbfn_glColorMaskIndexedEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glColorMaskIndexedEXT_loader (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  *cast(void**)&glColorMaskIndexedEXT_Z = glbindGetProcAddress(`glColorMaskIndexedEXT`);
  if (*cast(void**)&glColorMaskIndexedEXT_Z is null) assert(0, `OpenGL function 'glColorMaskIndexedEXT' not found!`);
  glColorMaskIndexedEXT_Z(a00,a01,a02,a03,a04,);
}
alias glDrawArraysInstancedEXT = glDrawArraysInstancedEXT_Z;
__gshared glbfn_glDrawArraysInstancedEXT glDrawArraysInstancedEXT_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glDrawArraysInstancedEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawArraysInstancedEXT_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glDrawArraysInstancedEXT_Z = glbindGetProcAddress(`glDrawArraysInstancedEXT`);
  if (*cast(void**)&glDrawArraysInstancedEXT_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedEXT' not found!`);
  glDrawArraysInstancedEXT_Z(a00,a01,a02,a03,);
}
alias glDrawElementsInstancedEXT = glDrawElementsInstancedEXT_Z;
__gshared glbfn_glDrawElementsInstancedEXT glDrawElementsInstancedEXT_Z = function void (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  glbfn_glDrawElementsInstancedEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawElementsInstancedEXT_loader (uint a00,int a01,uint a02,const(void)* a03,int a04) {
  *cast(void**)&glDrawElementsInstancedEXT_Z = glbindGetProcAddress(`glDrawElementsInstancedEXT`);
  if (*cast(void**)&glDrawElementsInstancedEXT_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedEXT' not found!`);
  glDrawElementsInstancedEXT_Z(a00,a01,a02,a03,a04,);
}
alias glDrawRangeElementsEXT = glDrawRangeElementsEXT_Z;
__gshared glbfn_glDrawRangeElementsEXT glDrawRangeElementsEXT_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04,const(void)* a05) {
  glbfn_glDrawRangeElementsEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDrawRangeElementsEXT_loader (uint a00,uint a01,uint a02,int a03,uint a04,const(void)* a05) {
  *cast(void**)&glDrawRangeElementsEXT_Z = glbindGetProcAddress(`glDrawRangeElementsEXT`);
  if (*cast(void**)&glDrawRangeElementsEXT_Z is null) assert(0, `OpenGL function 'glDrawRangeElementsEXT' not found!`);
  glDrawRangeElementsEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glFogCoordfEXT = glFogCoordfEXT_Z;
__gshared glbfn_glFogCoordfEXT glFogCoordfEXT_Z = function void (float a00) {
  glbfn_glFogCoordfEXT_loader(a00,);
};
private void glbfn_glFogCoordfEXT_loader (float a00) {
  *cast(void**)&glFogCoordfEXT_Z = glbindGetProcAddress(`glFogCoordfEXT`);
  if (*cast(void**)&glFogCoordfEXT_Z is null) assert(0, `OpenGL function 'glFogCoordfEXT' not found!`);
  glFogCoordfEXT_Z(a00,);
}
alias glFogCoordfvEXT = glFogCoordfvEXT_Z;
__gshared glbfn_glFogCoordfvEXT glFogCoordfvEXT_Z = function void (const(float)* a00) {
  glbfn_glFogCoordfvEXT_loader(a00,);
};
private void glbfn_glFogCoordfvEXT_loader (const(float)* a00) {
  *cast(void**)&glFogCoordfvEXT_Z = glbindGetProcAddress(`glFogCoordfvEXT`);
  if (*cast(void**)&glFogCoordfvEXT_Z is null) assert(0, `OpenGL function 'glFogCoordfvEXT' not found!`);
  glFogCoordfvEXT_Z(a00,);
}
alias glFogCoorddEXT = glFogCoorddEXT_Z;
__gshared glbfn_glFogCoorddEXT glFogCoorddEXT_Z = function void (double a00) {
  glbfn_glFogCoorddEXT_loader(a00,);
};
private void glbfn_glFogCoorddEXT_loader (double a00) {
  *cast(void**)&glFogCoorddEXT_Z = glbindGetProcAddress(`glFogCoorddEXT`);
  if (*cast(void**)&glFogCoorddEXT_Z is null) assert(0, `OpenGL function 'glFogCoorddEXT' not found!`);
  glFogCoorddEXT_Z(a00,);
}
alias glFogCoorddvEXT = glFogCoorddvEXT_Z;
__gshared glbfn_glFogCoorddvEXT glFogCoorddvEXT_Z = function void (const(double)* a00) {
  glbfn_glFogCoorddvEXT_loader(a00,);
};
private void glbfn_glFogCoorddvEXT_loader (const(double)* a00) {
  *cast(void**)&glFogCoorddvEXT_Z = glbindGetProcAddress(`glFogCoorddvEXT`);
  if (*cast(void**)&glFogCoorddvEXT_Z is null) assert(0, `OpenGL function 'glFogCoorddvEXT' not found!`);
  glFogCoorddvEXT_Z(a00,);
}
alias glFogCoordPointerEXT = glFogCoordPointerEXT_Z;
__gshared glbfn_glFogCoordPointerEXT glFogCoordPointerEXT_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glFogCoordPointerEXT_loader(a00,a01,a02,);
};
private void glbfn_glFogCoordPointerEXT_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glFogCoordPointerEXT_Z = glbindGetProcAddress(`glFogCoordPointerEXT`);
  if (*cast(void**)&glFogCoordPointerEXT_Z is null) assert(0, `OpenGL function 'glFogCoordPointerEXT' not found!`);
  glFogCoordPointerEXT_Z(a00,a01,a02,);
}
alias glBlitFramebufferEXT = glBlitFramebufferEXT_Z;
__gshared glbfn_glBlitFramebufferEXT glBlitFramebufferEXT_Z = function void (int a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09) {
  glbfn_glBlitFramebufferEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glBlitFramebufferEXT_loader (int a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09) {
  *cast(void**)&glBlitFramebufferEXT_Z = glbindGetProcAddress(`glBlitFramebufferEXT`);
  if (*cast(void**)&glBlitFramebufferEXT_Z is null) assert(0, `OpenGL function 'glBlitFramebufferEXT' not found!`);
  glBlitFramebufferEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glRenderbufferStorageMultisampleEXT = glRenderbufferStorageMultisampleEXT_Z;
__gshared glbfn_glRenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT_Z = function void (uint a00,int a01,uint a02,int a03,int a04) {
  glbfn_glRenderbufferStorageMultisampleEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glRenderbufferStorageMultisampleEXT_loader (uint a00,int a01,uint a02,int a03,int a04) {
  *cast(void**)&glRenderbufferStorageMultisampleEXT_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleEXT`);
  if (*cast(void**)&glRenderbufferStorageMultisampleEXT_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleEXT' not found!`);
  glRenderbufferStorageMultisampleEXT_Z(a00,a01,a02,a03,a04,);
}
alias glIsRenderbufferEXT = glIsRenderbufferEXT_Z;
__gshared glbfn_glIsRenderbufferEXT glIsRenderbufferEXT_Z = function ubyte (uint a00) {
  return glbfn_glIsRenderbufferEXT_loader(a00,);
};
private ubyte glbfn_glIsRenderbufferEXT_loader (uint a00) {
  *cast(void**)&glIsRenderbufferEXT_Z = glbindGetProcAddress(`glIsRenderbufferEXT`);
  if (*cast(void**)&glIsRenderbufferEXT_Z is null) assert(0, `OpenGL function 'glIsRenderbufferEXT' not found!`);
  return glIsRenderbufferEXT_Z(a00,);
}
alias glBindRenderbufferEXT = glBindRenderbufferEXT_Z;
__gshared glbfn_glBindRenderbufferEXT glBindRenderbufferEXT_Z = function void (uint a00,uint a01) {
  glbfn_glBindRenderbufferEXT_loader(a00,a01,);
};
private void glbfn_glBindRenderbufferEXT_loader (uint a00,uint a01) {
  *cast(void**)&glBindRenderbufferEXT_Z = glbindGetProcAddress(`glBindRenderbufferEXT`);
  if (*cast(void**)&glBindRenderbufferEXT_Z is null) assert(0, `OpenGL function 'glBindRenderbufferEXT' not found!`);
  glBindRenderbufferEXT_Z(a00,a01,);
}
alias glDeleteRenderbuffersEXT = glDeleteRenderbuffersEXT_Z;
__gshared glbfn_glDeleteRenderbuffersEXT glDeleteRenderbuffersEXT_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteRenderbuffersEXT_loader(a00,a01,);
};
private void glbfn_glDeleteRenderbuffersEXT_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteRenderbuffersEXT_Z = glbindGetProcAddress(`glDeleteRenderbuffersEXT`);
  if (*cast(void**)&glDeleteRenderbuffersEXT_Z is null) assert(0, `OpenGL function 'glDeleteRenderbuffersEXT' not found!`);
  glDeleteRenderbuffersEXT_Z(a00,a01,);
}
alias glGenRenderbuffersEXT = glGenRenderbuffersEXT_Z;
__gshared glbfn_glGenRenderbuffersEXT glGenRenderbuffersEXT_Z = function void (int a00,uint* a01) {
  glbfn_glGenRenderbuffersEXT_loader(a00,a01,);
};
private void glbfn_glGenRenderbuffersEXT_loader (int a00,uint* a01) {
  *cast(void**)&glGenRenderbuffersEXT_Z = glbindGetProcAddress(`glGenRenderbuffersEXT`);
  if (*cast(void**)&glGenRenderbuffersEXT_Z is null) assert(0, `OpenGL function 'glGenRenderbuffersEXT' not found!`);
  glGenRenderbuffersEXT_Z(a00,a01,);
}
alias glRenderbufferStorageEXT = glRenderbufferStorageEXT_Z;
__gshared glbfn_glRenderbufferStorageEXT glRenderbufferStorageEXT_Z = function void (uint a00,uint a01,int a02,int a03) {
  glbfn_glRenderbufferStorageEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glRenderbufferStorageEXT_loader (uint a00,uint a01,int a02,int a03) {
  *cast(void**)&glRenderbufferStorageEXT_Z = glbindGetProcAddress(`glRenderbufferStorageEXT`);
  if (*cast(void**)&glRenderbufferStorageEXT_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageEXT' not found!`);
  glRenderbufferStorageEXT_Z(a00,a01,a02,a03,);
}
alias glGetRenderbufferParameterivEXT = glGetRenderbufferParameterivEXT_Z;
__gshared glbfn_glGetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetRenderbufferParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetRenderbufferParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetRenderbufferParameterivEXT_Z = glbindGetProcAddress(`glGetRenderbufferParameterivEXT`);
  if (*cast(void**)&glGetRenderbufferParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetRenderbufferParameterivEXT' not found!`);
  glGetRenderbufferParameterivEXT_Z(a00,a01,a02,);
}
alias glIsFramebufferEXT = glIsFramebufferEXT_Z;
__gshared glbfn_glIsFramebufferEXT glIsFramebufferEXT_Z = function ubyte (uint a00) {
  return glbfn_glIsFramebufferEXT_loader(a00,);
};
private ubyte glbfn_glIsFramebufferEXT_loader (uint a00) {
  *cast(void**)&glIsFramebufferEXT_Z = glbindGetProcAddress(`glIsFramebufferEXT`);
  if (*cast(void**)&glIsFramebufferEXT_Z is null) assert(0, `OpenGL function 'glIsFramebufferEXT' not found!`);
  return glIsFramebufferEXT_Z(a00,);
}
alias glBindFramebufferEXT = glBindFramebufferEXT_Z;
__gshared glbfn_glBindFramebufferEXT glBindFramebufferEXT_Z = function void (uint a00,uint a01) {
  glbfn_glBindFramebufferEXT_loader(a00,a01,);
};
private void glbfn_glBindFramebufferEXT_loader (uint a00,uint a01) {
  *cast(void**)&glBindFramebufferEXT_Z = glbindGetProcAddress(`glBindFramebufferEXT`);
  if (*cast(void**)&glBindFramebufferEXT_Z is null) assert(0, `OpenGL function 'glBindFramebufferEXT' not found!`);
  glBindFramebufferEXT_Z(a00,a01,);
}
alias glDeleteFramebuffersEXT = glDeleteFramebuffersEXT_Z;
__gshared glbfn_glDeleteFramebuffersEXT glDeleteFramebuffersEXT_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteFramebuffersEXT_loader(a00,a01,);
};
private void glbfn_glDeleteFramebuffersEXT_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteFramebuffersEXT_Z = glbindGetProcAddress(`glDeleteFramebuffersEXT`);
  if (*cast(void**)&glDeleteFramebuffersEXT_Z is null) assert(0, `OpenGL function 'glDeleteFramebuffersEXT' not found!`);
  glDeleteFramebuffersEXT_Z(a00,a01,);
}
alias glGenFramebuffersEXT = glGenFramebuffersEXT_Z;
__gshared glbfn_glGenFramebuffersEXT glGenFramebuffersEXT_Z = function void (int a00,uint* a01) {
  glbfn_glGenFramebuffersEXT_loader(a00,a01,);
};
private void glbfn_glGenFramebuffersEXT_loader (int a00,uint* a01) {
  *cast(void**)&glGenFramebuffersEXT_Z = glbindGetProcAddress(`glGenFramebuffersEXT`);
  if (*cast(void**)&glGenFramebuffersEXT_Z is null) assert(0, `OpenGL function 'glGenFramebuffersEXT' not found!`);
  glGenFramebuffersEXT_Z(a00,a01,);
}
alias glCheckFramebufferStatusEXT = glCheckFramebufferStatusEXT_Z;
__gshared glbfn_glCheckFramebufferStatusEXT glCheckFramebufferStatusEXT_Z = function uint (uint a00) {
  return glbfn_glCheckFramebufferStatusEXT_loader(a00,);
};
private uint glbfn_glCheckFramebufferStatusEXT_loader (uint a00) {
  *cast(void**)&glCheckFramebufferStatusEXT_Z = glbindGetProcAddress(`glCheckFramebufferStatusEXT`);
  if (*cast(void**)&glCheckFramebufferStatusEXT_Z is null) assert(0, `OpenGL function 'glCheckFramebufferStatusEXT' not found!`);
  return glCheckFramebufferStatusEXT_Z(a00,);
}
alias glFramebufferTexture1DEXT = glFramebufferTexture1DEXT_Z;
__gshared glbfn_glFramebufferTexture1DEXT glFramebufferTexture1DEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04) {
  glbfn_glFramebufferTexture1DEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTexture1DEXT_loader (uint a00,uint a01,uint a02,uint a03,int a04) {
  *cast(void**)&glFramebufferTexture1DEXT_Z = glbindGetProcAddress(`glFramebufferTexture1DEXT`);
  if (*cast(void**)&glFramebufferTexture1DEXT_Z is null) assert(0, `OpenGL function 'glFramebufferTexture1DEXT' not found!`);
  glFramebufferTexture1DEXT_Z(a00,a01,a02,a03,a04,);
}
alias glFramebufferTexture2DEXT = glFramebufferTexture2DEXT_Z;
__gshared glbfn_glFramebufferTexture2DEXT glFramebufferTexture2DEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04) {
  glbfn_glFramebufferTexture2DEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTexture2DEXT_loader (uint a00,uint a01,uint a02,uint a03,int a04) {
  *cast(void**)&glFramebufferTexture2DEXT_Z = glbindGetProcAddress(`glFramebufferTexture2DEXT`);
  if (*cast(void**)&glFramebufferTexture2DEXT_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2DEXT' not found!`);
  glFramebufferTexture2DEXT_Z(a00,a01,a02,a03,a04,);
}
alias glFramebufferTexture3DEXT = glFramebufferTexture3DEXT_Z;
__gshared glbfn_glFramebufferTexture3DEXT glFramebufferTexture3DEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  glbfn_glFramebufferTexture3DEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glFramebufferTexture3DEXT_loader (uint a00,uint a01,uint a02,uint a03,int a04,int a05) {
  *cast(void**)&glFramebufferTexture3DEXT_Z = glbindGetProcAddress(`glFramebufferTexture3DEXT`);
  if (*cast(void**)&glFramebufferTexture3DEXT_Z is null) assert(0, `OpenGL function 'glFramebufferTexture3DEXT' not found!`);
  glFramebufferTexture3DEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glFramebufferRenderbufferEXT = glFramebufferRenderbufferEXT_Z;
__gshared glbfn_glFramebufferRenderbufferEXT glFramebufferRenderbufferEXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glFramebufferRenderbufferEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glFramebufferRenderbufferEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glFramebufferRenderbufferEXT_Z = glbindGetProcAddress(`glFramebufferRenderbufferEXT`);
  if (*cast(void**)&glFramebufferRenderbufferEXT_Z is null) assert(0, `OpenGL function 'glFramebufferRenderbufferEXT' not found!`);
  glFramebufferRenderbufferEXT_Z(a00,a01,a02,a03,);
}
alias glGetFramebufferAttachmentParameterivEXT = glGetFramebufferAttachmentParameterivEXT_Z;
__gshared glbfn_glGetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetFramebufferAttachmentParameterivEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetFramebufferAttachmentParameterivEXT_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetFramebufferAttachmentParameterivEXT_Z = glbindGetProcAddress(`glGetFramebufferAttachmentParameterivEXT`);
  if (*cast(void**)&glGetFramebufferAttachmentParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameterivEXT' not found!`);
  glGetFramebufferAttachmentParameterivEXT_Z(a00,a01,a02,a03,);
}
alias glGenerateMipmapEXT = glGenerateMipmapEXT_Z;
__gshared glbfn_glGenerateMipmapEXT glGenerateMipmapEXT_Z = function void (uint a00) {
  glbfn_glGenerateMipmapEXT_loader(a00,);
};
private void glbfn_glGenerateMipmapEXT_loader (uint a00) {
  *cast(void**)&glGenerateMipmapEXT_Z = glbindGetProcAddress(`glGenerateMipmapEXT`);
  if (*cast(void**)&glGenerateMipmapEXT_Z is null) assert(0, `OpenGL function 'glGenerateMipmapEXT' not found!`);
  glGenerateMipmapEXT_Z(a00,);
}
alias glProgramParameteriEXT = glProgramParameteriEXT_Z;
__gshared glbfn_glProgramParameteriEXT glProgramParameteriEXT_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glProgramParameteriEXT_loader(a00,a01,a02,);
};
private void glbfn_glProgramParameteriEXT_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glProgramParameteriEXT_Z = glbindGetProcAddress(`glProgramParameteriEXT`);
  if (*cast(void**)&glProgramParameteriEXT_Z is null) assert(0, `OpenGL function 'glProgramParameteriEXT' not found!`);
  glProgramParameteriEXT_Z(a00,a01,a02,);
}
alias glProgramEnvParameters4fvEXT = glProgramEnvParameters4fvEXT_Z;
__gshared glbfn_glProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glProgramEnvParameters4fvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramEnvParameters4fvEXT_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramEnvParameters4fvEXT_Z = glbindGetProcAddress(`glProgramEnvParameters4fvEXT`);
  if (*cast(void**)&glProgramEnvParameters4fvEXT_Z is null) assert(0, `OpenGL function 'glProgramEnvParameters4fvEXT' not found!`);
  glProgramEnvParameters4fvEXT_Z(a00,a01,a02,a03,);
}
alias glProgramLocalParameters4fvEXT = glProgramLocalParameters4fvEXT_Z;
__gshared glbfn_glProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glProgramLocalParameters4fvEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramLocalParameters4fvEXT_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramLocalParameters4fvEXT_Z = glbindGetProcAddress(`glProgramLocalParameters4fvEXT`);
  if (*cast(void**)&glProgramLocalParameters4fvEXT_Z is null) assert(0, `OpenGL function 'glProgramLocalParameters4fvEXT' not found!`);
  glProgramLocalParameters4fvEXT_Z(a00,a01,a02,a03,);
}
alias glGetUniformuivEXT = glGetUniformuivEXT_Z;
__gshared glbfn_glGetUniformuivEXT glGetUniformuivEXT_Z = function void (uint a00,int a01,uint* a02) {
  glbfn_glGetUniformuivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetUniformuivEXT_loader (uint a00,int a01,uint* a02) {
  *cast(void**)&glGetUniformuivEXT_Z = glbindGetProcAddress(`glGetUniformuivEXT`);
  if (*cast(void**)&glGetUniformuivEXT_Z is null) assert(0, `OpenGL function 'glGetUniformuivEXT' not found!`);
  glGetUniformuivEXT_Z(a00,a01,a02,);
}
alias glBindFragDataLocationEXT = glBindFragDataLocationEXT_Z;
__gshared glbfn_glBindFragDataLocationEXT glBindFragDataLocationEXT_Z = function void (uint a00,uint a01,const(char)* a02) {
  glbfn_glBindFragDataLocationEXT_loader(a00,a01,a02,);
};
private void glbfn_glBindFragDataLocationEXT_loader (uint a00,uint a01,const(char)* a02) {
  *cast(void**)&glBindFragDataLocationEXT_Z = glbindGetProcAddress(`glBindFragDataLocationEXT`);
  if (*cast(void**)&glBindFragDataLocationEXT_Z is null) assert(0, `OpenGL function 'glBindFragDataLocationEXT' not found!`);
  glBindFragDataLocationEXT_Z(a00,a01,a02,);
}
alias glGetFragDataLocationEXT = glGetFragDataLocationEXT_Z;
__gshared glbfn_glGetFragDataLocationEXT glGetFragDataLocationEXT_Z = function int (uint a00,const(char)* a01) {
  return glbfn_glGetFragDataLocationEXT_loader(a00,a01,);
};
private int glbfn_glGetFragDataLocationEXT_loader (uint a00,const(char)* a01) {
  *cast(void**)&glGetFragDataLocationEXT_Z = glbindGetProcAddress(`glGetFragDataLocationEXT`);
  if (*cast(void**)&glGetFragDataLocationEXT_Z is null) assert(0, `OpenGL function 'glGetFragDataLocationEXT' not found!`);
  return glGetFragDataLocationEXT_Z(a00,a01,);
}
alias glUniform1uiEXT = glUniform1uiEXT_Z;
__gshared glbfn_glUniform1uiEXT glUniform1uiEXT_Z = function void (int a00,uint a01) {
  glbfn_glUniform1uiEXT_loader(a00,a01,);
};
private void glbfn_glUniform1uiEXT_loader (int a00,uint a01) {
  *cast(void**)&glUniform1uiEXT_Z = glbindGetProcAddress(`glUniform1uiEXT`);
  if (*cast(void**)&glUniform1uiEXT_Z is null) assert(0, `OpenGL function 'glUniform1uiEXT' not found!`);
  glUniform1uiEXT_Z(a00,a01,);
}
alias glUniform2uiEXT = glUniform2uiEXT_Z;
__gshared glbfn_glUniform2uiEXT glUniform2uiEXT_Z = function void (int a00,uint a01,uint a02) {
  glbfn_glUniform2uiEXT_loader(a00,a01,a02,);
};
private void glbfn_glUniform2uiEXT_loader (int a00,uint a01,uint a02) {
  *cast(void**)&glUniform2uiEXT_Z = glbindGetProcAddress(`glUniform2uiEXT`);
  if (*cast(void**)&glUniform2uiEXT_Z is null) assert(0, `OpenGL function 'glUniform2uiEXT' not found!`);
  glUniform2uiEXT_Z(a00,a01,a02,);
}
alias glUniform3uiEXT = glUniform3uiEXT_Z;
__gshared glbfn_glUniform3uiEXT glUniform3uiEXT_Z = function void (int a00,uint a01,uint a02,uint a03) {
  glbfn_glUniform3uiEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glUniform3uiEXT_loader (int a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glUniform3uiEXT_Z = glbindGetProcAddress(`glUniform3uiEXT`);
  if (*cast(void**)&glUniform3uiEXT_Z is null) assert(0, `OpenGL function 'glUniform3uiEXT' not found!`);
  glUniform3uiEXT_Z(a00,a01,a02,a03,);
}
alias glUniform4uiEXT = glUniform4uiEXT_Z;
__gshared glbfn_glUniform4uiEXT glUniform4uiEXT_Z = function void (int a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glUniform4uiEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glUniform4uiEXT_loader (int a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glUniform4uiEXT_Z = glbindGetProcAddress(`glUniform4uiEXT`);
  if (*cast(void**)&glUniform4uiEXT_Z is null) assert(0, `OpenGL function 'glUniform4uiEXT' not found!`);
  glUniform4uiEXT_Z(a00,a01,a02,a03,a04,);
}
alias glUniform1uivEXT = glUniform1uivEXT_Z;
__gshared glbfn_glUniform1uivEXT glUniform1uivEXT_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform1uivEXT_loader(a00,a01,a02,);
};
private void glbfn_glUniform1uivEXT_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform1uivEXT_Z = glbindGetProcAddress(`glUniform1uivEXT`);
  if (*cast(void**)&glUniform1uivEXT_Z is null) assert(0, `OpenGL function 'glUniform1uivEXT' not found!`);
  glUniform1uivEXT_Z(a00,a01,a02,);
}
alias glUniform2uivEXT = glUniform2uivEXT_Z;
__gshared glbfn_glUniform2uivEXT glUniform2uivEXT_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform2uivEXT_loader(a00,a01,a02,);
};
private void glbfn_glUniform2uivEXT_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform2uivEXT_Z = glbindGetProcAddress(`glUniform2uivEXT`);
  if (*cast(void**)&glUniform2uivEXT_Z is null) assert(0, `OpenGL function 'glUniform2uivEXT' not found!`);
  glUniform2uivEXT_Z(a00,a01,a02,);
}
alias glUniform3uivEXT = glUniform3uivEXT_Z;
__gshared glbfn_glUniform3uivEXT glUniform3uivEXT_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform3uivEXT_loader(a00,a01,a02,);
};
private void glbfn_glUniform3uivEXT_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform3uivEXT_Z = glbindGetProcAddress(`glUniform3uivEXT`);
  if (*cast(void**)&glUniform3uivEXT_Z is null) assert(0, `OpenGL function 'glUniform3uivEXT' not found!`);
  glUniform3uivEXT_Z(a00,a01,a02,);
}
alias glUniform4uivEXT = glUniform4uivEXT_Z;
__gshared glbfn_glUniform4uivEXT glUniform4uivEXT_Z = function void (int a00,int a01,const(uint)* a02) {
  glbfn_glUniform4uivEXT_loader(a00,a01,a02,);
};
private void glbfn_glUniform4uivEXT_loader (int a00,int a01,const(uint)* a02) {
  *cast(void**)&glUniform4uivEXT_Z = glbindGetProcAddress(`glUniform4uivEXT`);
  if (*cast(void**)&glUniform4uivEXT_Z is null) assert(0, `OpenGL function 'glUniform4uivEXT' not found!`);
  glUniform4uivEXT_Z(a00,a01,a02,);
}
alias glGetHistogramEXT = glGetHistogramEXT_Z;
__gshared glbfn_glGetHistogramEXT glGetHistogramEXT_Z = function void (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  glbfn_glGetHistogramEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetHistogramEXT_loader (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  *cast(void**)&glGetHistogramEXT_Z = glbindGetProcAddress(`glGetHistogramEXT`);
  if (*cast(void**)&glGetHistogramEXT_Z is null) assert(0, `OpenGL function 'glGetHistogramEXT' not found!`);
  glGetHistogramEXT_Z(a00,a01,a02,a03,a04,);
}
alias glGetHistogramParameterfvEXT = glGetHistogramParameterfvEXT_Z;
__gshared glbfn_glGetHistogramParameterfvEXT glGetHistogramParameterfvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetHistogramParameterfvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetHistogramParameterfvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetHistogramParameterfvEXT_Z = glbindGetProcAddress(`glGetHistogramParameterfvEXT`);
  if (*cast(void**)&glGetHistogramParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterfvEXT' not found!`);
  glGetHistogramParameterfvEXT_Z(a00,a01,a02,);
}
alias glGetHistogramParameterivEXT = glGetHistogramParameterivEXT_Z;
__gshared glbfn_glGetHistogramParameterivEXT glGetHistogramParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetHistogramParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetHistogramParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetHistogramParameterivEXT_Z = glbindGetProcAddress(`glGetHistogramParameterivEXT`);
  if (*cast(void**)&glGetHistogramParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterivEXT' not found!`);
  glGetHistogramParameterivEXT_Z(a00,a01,a02,);
}
alias glGetMinmaxEXT = glGetMinmaxEXT_Z;
__gshared glbfn_glGetMinmaxEXT glGetMinmaxEXT_Z = function void (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  glbfn_glGetMinmaxEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetMinmaxEXT_loader (uint a00,ubyte a01,uint a02,uint a03,void* a04) {
  *cast(void**)&glGetMinmaxEXT_Z = glbindGetProcAddress(`glGetMinmaxEXT`);
  if (*cast(void**)&glGetMinmaxEXT_Z is null) assert(0, `OpenGL function 'glGetMinmaxEXT' not found!`);
  glGetMinmaxEXT_Z(a00,a01,a02,a03,a04,);
}
alias glGetMinmaxParameterfvEXT = glGetMinmaxParameterfvEXT_Z;
__gshared glbfn_glGetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetMinmaxParameterfvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetMinmaxParameterfvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetMinmaxParameterfvEXT_Z = glbindGetProcAddress(`glGetMinmaxParameterfvEXT`);
  if (*cast(void**)&glGetMinmaxParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameterfvEXT' not found!`);
  glGetMinmaxParameterfvEXT_Z(a00,a01,a02,);
}
alias glGetMinmaxParameterivEXT = glGetMinmaxParameterivEXT_Z;
__gshared glbfn_glGetMinmaxParameterivEXT glGetMinmaxParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetMinmaxParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetMinmaxParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetMinmaxParameterivEXT_Z = glbindGetProcAddress(`glGetMinmaxParameterivEXT`);
  if (*cast(void**)&glGetMinmaxParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameterivEXT' not found!`);
  glGetMinmaxParameterivEXT_Z(a00,a01,a02,);
}
alias glHistogramEXT = glHistogramEXT_Z;
__gshared glbfn_glHistogramEXT glHistogramEXT_Z = function void (uint a00,int a01,uint a02,ubyte a03) {
  glbfn_glHistogramEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glHistogramEXT_loader (uint a00,int a01,uint a02,ubyte a03) {
  *cast(void**)&glHistogramEXT_Z = glbindGetProcAddress(`glHistogramEXT`);
  if (*cast(void**)&glHistogramEXT_Z is null) assert(0, `OpenGL function 'glHistogramEXT' not found!`);
  glHistogramEXT_Z(a00,a01,a02,a03,);
}
alias glMinmaxEXT = glMinmaxEXT_Z;
__gshared glbfn_glMinmaxEXT glMinmaxEXT_Z = function void (uint a00,uint a01,ubyte a02) {
  glbfn_glMinmaxEXT_loader(a00,a01,a02,);
};
private void glbfn_glMinmaxEXT_loader (uint a00,uint a01,ubyte a02) {
  *cast(void**)&glMinmaxEXT_Z = glbindGetProcAddress(`glMinmaxEXT`);
  if (*cast(void**)&glMinmaxEXT_Z is null) assert(0, `OpenGL function 'glMinmaxEXT' not found!`);
  glMinmaxEXT_Z(a00,a01,a02,);
}
alias glResetHistogramEXT = glResetHistogramEXT_Z;
__gshared glbfn_glResetHistogramEXT glResetHistogramEXT_Z = function void (uint a00) {
  glbfn_glResetHistogramEXT_loader(a00,);
};
private void glbfn_glResetHistogramEXT_loader (uint a00) {
  *cast(void**)&glResetHistogramEXT_Z = glbindGetProcAddress(`glResetHistogramEXT`);
  if (*cast(void**)&glResetHistogramEXT_Z is null) assert(0, `OpenGL function 'glResetHistogramEXT' not found!`);
  glResetHistogramEXT_Z(a00,);
}
alias glResetMinmaxEXT = glResetMinmaxEXT_Z;
__gshared glbfn_glResetMinmaxEXT glResetMinmaxEXT_Z = function void (uint a00) {
  glbfn_glResetMinmaxEXT_loader(a00,);
};
private void glbfn_glResetMinmaxEXT_loader (uint a00) {
  *cast(void**)&glResetMinmaxEXT_Z = glbindGetProcAddress(`glResetMinmaxEXT`);
  if (*cast(void**)&glResetMinmaxEXT_Z is null) assert(0, `OpenGL function 'glResetMinmaxEXT' not found!`);
  glResetMinmaxEXT_Z(a00,);
}
alias glIndexFuncEXT = glIndexFuncEXT_Z;
__gshared glbfn_glIndexFuncEXT glIndexFuncEXT_Z = function void (uint a00,float a01) {
  glbfn_glIndexFuncEXT_loader(a00,a01,);
};
private void glbfn_glIndexFuncEXT_loader (uint a00,float a01) {
  *cast(void**)&glIndexFuncEXT_Z = glbindGetProcAddress(`glIndexFuncEXT`);
  if (*cast(void**)&glIndexFuncEXT_Z is null) assert(0, `OpenGL function 'glIndexFuncEXT' not found!`);
  glIndexFuncEXT_Z(a00,a01,);
}
alias glIndexMaterialEXT = glIndexMaterialEXT_Z;
__gshared glbfn_glIndexMaterialEXT glIndexMaterialEXT_Z = function void (uint a00,uint a01) {
  glbfn_glIndexMaterialEXT_loader(a00,a01,);
};
private void glbfn_glIndexMaterialEXT_loader (uint a00,uint a01) {
  *cast(void**)&glIndexMaterialEXT_Z = glbindGetProcAddress(`glIndexMaterialEXT`);
  if (*cast(void**)&glIndexMaterialEXT_Z is null) assert(0, `OpenGL function 'glIndexMaterialEXT' not found!`);
  glIndexMaterialEXT_Z(a00,a01,);
}
alias glApplyTextureEXT = glApplyTextureEXT_Z;
__gshared glbfn_glApplyTextureEXT glApplyTextureEXT_Z = function void (uint a00) {
  glbfn_glApplyTextureEXT_loader(a00,);
};
private void glbfn_glApplyTextureEXT_loader (uint a00) {
  *cast(void**)&glApplyTextureEXT_Z = glbindGetProcAddress(`glApplyTextureEXT`);
  if (*cast(void**)&glApplyTextureEXT_Z is null) assert(0, `OpenGL function 'glApplyTextureEXT' not found!`);
  glApplyTextureEXT_Z(a00,);
}
alias glTextureLightEXT = glTextureLightEXT_Z;
__gshared glbfn_glTextureLightEXT glTextureLightEXT_Z = function void (uint a00) {
  glbfn_glTextureLightEXT_loader(a00,);
};
private void glbfn_glTextureLightEXT_loader (uint a00) {
  *cast(void**)&glTextureLightEXT_Z = glbindGetProcAddress(`glTextureLightEXT`);
  if (*cast(void**)&glTextureLightEXT_Z is null) assert(0, `OpenGL function 'glTextureLightEXT' not found!`);
  glTextureLightEXT_Z(a00,);
}
alias glTextureMaterialEXT = glTextureMaterialEXT_Z;
__gshared glbfn_glTextureMaterialEXT glTextureMaterialEXT_Z = function void (uint a00,uint a01) {
  glbfn_glTextureMaterialEXT_loader(a00,a01,);
};
private void glbfn_glTextureMaterialEXT_loader (uint a00,uint a01) {
  *cast(void**)&glTextureMaterialEXT_Z = glbindGetProcAddress(`glTextureMaterialEXT`);
  if (*cast(void**)&glTextureMaterialEXT_Z is null) assert(0, `OpenGL function 'glTextureMaterialEXT' not found!`);
  glTextureMaterialEXT_Z(a00,a01,);
}
alias glMultiDrawArraysEXT = glMultiDrawArraysEXT_Z;
__gshared glbfn_glMultiDrawArraysEXT glMultiDrawArraysEXT_Z = function void (uint a00,const(int)* a01,const(int)* a02,int a03) {
  glbfn_glMultiDrawArraysEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiDrawArraysEXT_loader (uint a00,const(int)* a01,const(int)* a02,int a03) {
  *cast(void**)&glMultiDrawArraysEXT_Z = glbindGetProcAddress(`glMultiDrawArraysEXT`);
  if (*cast(void**)&glMultiDrawArraysEXT_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysEXT' not found!`);
  glMultiDrawArraysEXT_Z(a00,a01,a02,a03,);
}
alias glMultiDrawElementsEXT = glMultiDrawElementsEXT_Z;
__gshared glbfn_glMultiDrawElementsEXT glMultiDrawElementsEXT_Z = function void (uint a00,const(int)* a01,uint a02,const(void*)* a03,int a04) {
  glbfn_glMultiDrawElementsEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiDrawElementsEXT_loader (uint a00,const(int)* a01,uint a02,const(void*)* a03,int a04) {
  *cast(void**)&glMultiDrawElementsEXT_Z = glbindGetProcAddress(`glMultiDrawElementsEXT`);
  if (*cast(void**)&glMultiDrawElementsEXT_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsEXT' not found!`);
  glMultiDrawElementsEXT_Z(a00,a01,a02,a03,a04,);
}
alias glSampleMaskEXT = glSampleMaskEXT_Z;
__gshared glbfn_glSampleMaskEXT glSampleMaskEXT_Z = function void (float a00,ubyte a01) {
  glbfn_glSampleMaskEXT_loader(a00,a01,);
};
private void glbfn_glSampleMaskEXT_loader (float a00,ubyte a01) {
  *cast(void**)&glSampleMaskEXT_Z = glbindGetProcAddress(`glSampleMaskEXT`);
  if (*cast(void**)&glSampleMaskEXT_Z is null) assert(0, `OpenGL function 'glSampleMaskEXT' not found!`);
  glSampleMaskEXT_Z(a00,a01,);
}
alias glSamplePatternEXT = glSamplePatternEXT_Z;
__gshared glbfn_glSamplePatternEXT glSamplePatternEXT_Z = function void (uint a00) {
  glbfn_glSamplePatternEXT_loader(a00,);
};
private void glbfn_glSamplePatternEXT_loader (uint a00) {
  *cast(void**)&glSamplePatternEXT_Z = glbindGetProcAddress(`glSamplePatternEXT`);
  if (*cast(void**)&glSamplePatternEXT_Z is null) assert(0, `OpenGL function 'glSamplePatternEXT' not found!`);
  glSamplePatternEXT_Z(a00,);
}
alias glColorTableEXT = glColorTableEXT_Z;
__gshared glbfn_glColorTableEXT glColorTableEXT_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  glbfn_glColorTableEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glColorTableEXT_loader (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  *cast(void**)&glColorTableEXT_Z = glbindGetProcAddress(`glColorTableEXT`);
  if (*cast(void**)&glColorTableEXT_Z is null) assert(0, `OpenGL function 'glColorTableEXT' not found!`);
  glColorTableEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetColorTableEXT = glGetColorTableEXT_Z;
__gshared glbfn_glGetColorTableEXT glGetColorTableEXT_Z = function void (uint a00,uint a01,uint a02,void* a03) {
  glbfn_glGetColorTableEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetColorTableEXT_loader (uint a00,uint a01,uint a02,void* a03) {
  *cast(void**)&glGetColorTableEXT_Z = glbindGetProcAddress(`glGetColorTableEXT`);
  if (*cast(void**)&glGetColorTableEXT_Z is null) assert(0, `OpenGL function 'glGetColorTableEXT' not found!`);
  glGetColorTableEXT_Z(a00,a01,a02,a03,);
}
alias glGetColorTableParameterivEXT = glGetColorTableParameterivEXT_Z;
__gshared glbfn_glGetColorTableParameterivEXT glGetColorTableParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetColorTableParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetColorTableParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetColorTableParameterivEXT_Z = glbindGetProcAddress(`glGetColorTableParameterivEXT`);
  if (*cast(void**)&glGetColorTableParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterivEXT' not found!`);
  glGetColorTableParameterivEXT_Z(a00,a01,a02,);
}
alias glGetColorTableParameterfvEXT = glGetColorTableParameterfvEXT_Z;
__gshared glbfn_glGetColorTableParameterfvEXT glGetColorTableParameterfvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetColorTableParameterfvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetColorTableParameterfvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetColorTableParameterfvEXT_Z = glbindGetProcAddress(`glGetColorTableParameterfvEXT`);
  if (*cast(void**)&glGetColorTableParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterfvEXT' not found!`);
  glGetColorTableParameterfvEXT_Z(a00,a01,a02,);
}
alias glPixelTransformParameteriEXT = glPixelTransformParameteriEXT_Z;
__gshared glbfn_glPixelTransformParameteriEXT glPixelTransformParameteriEXT_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glPixelTransformParameteriEXT_loader(a00,a01,a02,);
};
private void glbfn_glPixelTransformParameteriEXT_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glPixelTransformParameteriEXT_Z = glbindGetProcAddress(`glPixelTransformParameteriEXT`);
  if (*cast(void**)&glPixelTransformParameteriEXT_Z is null) assert(0, `OpenGL function 'glPixelTransformParameteriEXT' not found!`);
  glPixelTransformParameteriEXT_Z(a00,a01,a02,);
}
alias glPixelTransformParameterfEXT = glPixelTransformParameterfEXT_Z;
__gshared glbfn_glPixelTransformParameterfEXT glPixelTransformParameterfEXT_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glPixelTransformParameterfEXT_loader(a00,a01,a02,);
};
private void glbfn_glPixelTransformParameterfEXT_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glPixelTransformParameterfEXT_Z = glbindGetProcAddress(`glPixelTransformParameterfEXT`);
  if (*cast(void**)&glPixelTransformParameterfEXT_Z is null) assert(0, `OpenGL function 'glPixelTransformParameterfEXT' not found!`);
  glPixelTransformParameterfEXT_Z(a00,a01,a02,);
}
alias glPixelTransformParameterivEXT = glPixelTransformParameterivEXT_Z;
__gshared glbfn_glPixelTransformParameterivEXT glPixelTransformParameterivEXT_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glPixelTransformParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glPixelTransformParameterivEXT_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glPixelTransformParameterivEXT_Z = glbindGetProcAddress(`glPixelTransformParameterivEXT`);
  if (*cast(void**)&glPixelTransformParameterivEXT_Z is null) assert(0, `OpenGL function 'glPixelTransformParameterivEXT' not found!`);
  glPixelTransformParameterivEXT_Z(a00,a01,a02,);
}
alias glPixelTransformParameterfvEXT = glPixelTransformParameterfvEXT_Z;
__gshared glbfn_glPixelTransformParameterfvEXT glPixelTransformParameterfvEXT_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glPixelTransformParameterfvEXT_loader(a00,a01,a02,);
};
private void glbfn_glPixelTransformParameterfvEXT_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glPixelTransformParameterfvEXT_Z = glbindGetProcAddress(`glPixelTransformParameterfvEXT`);
  if (*cast(void**)&glPixelTransformParameterfvEXT_Z is null) assert(0, `OpenGL function 'glPixelTransformParameterfvEXT' not found!`);
  glPixelTransformParameterfvEXT_Z(a00,a01,a02,);
}
alias glGetPixelTransformParameterivEXT = glGetPixelTransformParameterivEXT_Z;
__gshared glbfn_glGetPixelTransformParameterivEXT glGetPixelTransformParameterivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetPixelTransformParameterivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetPixelTransformParameterivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetPixelTransformParameterivEXT_Z = glbindGetProcAddress(`glGetPixelTransformParameterivEXT`);
  if (*cast(void**)&glGetPixelTransformParameterivEXT_Z is null) assert(0, `OpenGL function 'glGetPixelTransformParameterivEXT' not found!`);
  glGetPixelTransformParameterivEXT_Z(a00,a01,a02,);
}
alias glGetPixelTransformParameterfvEXT = glGetPixelTransformParameterfvEXT_Z;
__gshared glbfn_glGetPixelTransformParameterfvEXT glGetPixelTransformParameterfvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetPixelTransformParameterfvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetPixelTransformParameterfvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetPixelTransformParameterfvEXT_Z = glbindGetProcAddress(`glGetPixelTransformParameterfvEXT`);
  if (*cast(void**)&glGetPixelTransformParameterfvEXT_Z is null) assert(0, `OpenGL function 'glGetPixelTransformParameterfvEXT' not found!`);
  glGetPixelTransformParameterfvEXT_Z(a00,a01,a02,);
}
alias glPointParameterfEXT = glPointParameterfEXT_Z;
__gshared glbfn_glPointParameterfEXT glPointParameterfEXT_Z = function void (uint a00,float a01) {
  glbfn_glPointParameterfEXT_loader(a00,a01,);
};
private void glbfn_glPointParameterfEXT_loader (uint a00,float a01) {
  *cast(void**)&glPointParameterfEXT_Z = glbindGetProcAddress(`glPointParameterfEXT`);
  if (*cast(void**)&glPointParameterfEXT_Z is null) assert(0, `OpenGL function 'glPointParameterfEXT' not found!`);
  glPointParameterfEXT_Z(a00,a01,);
}
alias glPointParameterfvEXT = glPointParameterfvEXT_Z;
__gshared glbfn_glPointParameterfvEXT glPointParameterfvEXT_Z = function void (uint a00,const(float)* a01) {
  glbfn_glPointParameterfvEXT_loader(a00,a01,);
};
private void glbfn_glPointParameterfvEXT_loader (uint a00,const(float)* a01) {
  *cast(void**)&glPointParameterfvEXT_Z = glbindGetProcAddress(`glPointParameterfvEXT`);
  if (*cast(void**)&glPointParameterfvEXT_Z is null) assert(0, `OpenGL function 'glPointParameterfvEXT' not found!`);
  glPointParameterfvEXT_Z(a00,a01,);
}
alias glPolygonOffsetEXT = glPolygonOffsetEXT_Z;
__gshared glbfn_glPolygonOffsetEXT glPolygonOffsetEXT_Z = function void (float a00,float a01) {
  glbfn_glPolygonOffsetEXT_loader(a00,a01,);
};
private void glbfn_glPolygonOffsetEXT_loader (float a00,float a01) {
  *cast(void**)&glPolygonOffsetEXT_Z = glbindGetProcAddress(`glPolygonOffsetEXT`);
  if (*cast(void**)&glPolygonOffsetEXT_Z is null) assert(0, `OpenGL function 'glPolygonOffsetEXT' not found!`);
  glPolygonOffsetEXT_Z(a00,a01,);
}
alias glPolygonOffsetClampEXT = glPolygonOffsetClampEXT_Z;
__gshared glbfn_glPolygonOffsetClampEXT glPolygonOffsetClampEXT_Z = function void (float a00,float a01,float a02) {
  glbfn_glPolygonOffsetClampEXT_loader(a00,a01,a02,);
};
private void glbfn_glPolygonOffsetClampEXT_loader (float a00,float a01,float a02) {
  *cast(void**)&glPolygonOffsetClampEXT_Z = glbindGetProcAddress(`glPolygonOffsetClampEXT`);
  if (*cast(void**)&glPolygonOffsetClampEXT_Z is null) assert(0, `OpenGL function 'glPolygonOffsetClampEXT' not found!`);
  glPolygonOffsetClampEXT_Z(a00,a01,a02,);
}
alias glProvokingVertexEXT = glProvokingVertexEXT_Z;
__gshared glbfn_glProvokingVertexEXT glProvokingVertexEXT_Z = function void (uint a00) {
  glbfn_glProvokingVertexEXT_loader(a00,);
};
private void glbfn_glProvokingVertexEXT_loader (uint a00) {
  *cast(void**)&glProvokingVertexEXT_Z = glbindGetProcAddress(`glProvokingVertexEXT`);
  if (*cast(void**)&glProvokingVertexEXT_Z is null) assert(0, `OpenGL function 'glProvokingVertexEXT' not found!`);
  glProvokingVertexEXT_Z(a00,);
}
alias glRasterSamplesEXT = glRasterSamplesEXT_Z;
__gshared glbfn_glRasterSamplesEXT glRasterSamplesEXT_Z = function void (uint a00,ubyte a01) {
  glbfn_glRasterSamplesEXT_loader(a00,a01,);
};
private void glbfn_glRasterSamplesEXT_loader (uint a00,ubyte a01) {
  *cast(void**)&glRasterSamplesEXT_Z = glbindGetProcAddress(`glRasterSamplesEXT`);
  if (*cast(void**)&glRasterSamplesEXT_Z is null) assert(0, `OpenGL function 'glRasterSamplesEXT' not found!`);
  glRasterSamplesEXT_Z(a00,a01,);
}
alias glSecondaryColor3bEXT = glSecondaryColor3bEXT_Z;
__gshared glbfn_glSecondaryColor3bEXT glSecondaryColor3bEXT_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glSecondaryColor3bEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3bEXT_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glSecondaryColor3bEXT_Z = glbindGetProcAddress(`glSecondaryColor3bEXT`);
  if (*cast(void**)&glSecondaryColor3bEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3bEXT' not found!`);
  glSecondaryColor3bEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3bvEXT = glSecondaryColor3bvEXT_Z;
__gshared glbfn_glSecondaryColor3bvEXT glSecondaryColor3bvEXT_Z = function void (const(byte)* a00) {
  glbfn_glSecondaryColor3bvEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3bvEXT_loader (const(byte)* a00) {
  *cast(void**)&glSecondaryColor3bvEXT_Z = glbindGetProcAddress(`glSecondaryColor3bvEXT`);
  if (*cast(void**)&glSecondaryColor3bvEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3bvEXT' not found!`);
  glSecondaryColor3bvEXT_Z(a00,);
}
alias glSecondaryColor3dEXT = glSecondaryColor3dEXT_Z;
__gshared glbfn_glSecondaryColor3dEXT glSecondaryColor3dEXT_Z = function void (double a00,double a01,double a02) {
  glbfn_glSecondaryColor3dEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3dEXT_loader (double a00,double a01,double a02) {
  *cast(void**)&glSecondaryColor3dEXT_Z = glbindGetProcAddress(`glSecondaryColor3dEXT`);
  if (*cast(void**)&glSecondaryColor3dEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3dEXT' not found!`);
  glSecondaryColor3dEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3dvEXT = glSecondaryColor3dvEXT_Z;
__gshared glbfn_glSecondaryColor3dvEXT glSecondaryColor3dvEXT_Z = function void (const(double)* a00) {
  glbfn_glSecondaryColor3dvEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3dvEXT_loader (const(double)* a00) {
  *cast(void**)&glSecondaryColor3dvEXT_Z = glbindGetProcAddress(`glSecondaryColor3dvEXT`);
  if (*cast(void**)&glSecondaryColor3dvEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3dvEXT' not found!`);
  glSecondaryColor3dvEXT_Z(a00,);
}
alias glSecondaryColor3fEXT = glSecondaryColor3fEXT_Z;
__gshared glbfn_glSecondaryColor3fEXT glSecondaryColor3fEXT_Z = function void (float a00,float a01,float a02) {
  glbfn_glSecondaryColor3fEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3fEXT_loader (float a00,float a01,float a02) {
  *cast(void**)&glSecondaryColor3fEXT_Z = glbindGetProcAddress(`glSecondaryColor3fEXT`);
  if (*cast(void**)&glSecondaryColor3fEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3fEXT' not found!`);
  glSecondaryColor3fEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3fvEXT = glSecondaryColor3fvEXT_Z;
__gshared glbfn_glSecondaryColor3fvEXT glSecondaryColor3fvEXT_Z = function void (const(float)* a00) {
  glbfn_glSecondaryColor3fvEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3fvEXT_loader (const(float)* a00) {
  *cast(void**)&glSecondaryColor3fvEXT_Z = glbindGetProcAddress(`glSecondaryColor3fvEXT`);
  if (*cast(void**)&glSecondaryColor3fvEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3fvEXT' not found!`);
  glSecondaryColor3fvEXT_Z(a00,);
}
alias glSecondaryColor3iEXT = glSecondaryColor3iEXT_Z;
__gshared glbfn_glSecondaryColor3iEXT glSecondaryColor3iEXT_Z = function void (int a00,int a01,int a02) {
  glbfn_glSecondaryColor3iEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3iEXT_loader (int a00,int a01,int a02) {
  *cast(void**)&glSecondaryColor3iEXT_Z = glbindGetProcAddress(`glSecondaryColor3iEXT`);
  if (*cast(void**)&glSecondaryColor3iEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3iEXT' not found!`);
  glSecondaryColor3iEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3ivEXT = glSecondaryColor3ivEXT_Z;
__gshared glbfn_glSecondaryColor3ivEXT glSecondaryColor3ivEXT_Z = function void (const(int)* a00) {
  glbfn_glSecondaryColor3ivEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3ivEXT_loader (const(int)* a00) {
  *cast(void**)&glSecondaryColor3ivEXT_Z = glbindGetProcAddress(`glSecondaryColor3ivEXT`);
  if (*cast(void**)&glSecondaryColor3ivEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ivEXT' not found!`);
  glSecondaryColor3ivEXT_Z(a00,);
}
alias glSecondaryColor3sEXT = glSecondaryColor3sEXT_Z;
__gshared glbfn_glSecondaryColor3sEXT glSecondaryColor3sEXT_Z = function void (short a00,short a01,short a02) {
  glbfn_glSecondaryColor3sEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3sEXT_loader (short a00,short a01,short a02) {
  *cast(void**)&glSecondaryColor3sEXT_Z = glbindGetProcAddress(`glSecondaryColor3sEXT`);
  if (*cast(void**)&glSecondaryColor3sEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3sEXT' not found!`);
  glSecondaryColor3sEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3svEXT = glSecondaryColor3svEXT_Z;
__gshared glbfn_glSecondaryColor3svEXT glSecondaryColor3svEXT_Z = function void (const(short)* a00) {
  glbfn_glSecondaryColor3svEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3svEXT_loader (const(short)* a00) {
  *cast(void**)&glSecondaryColor3svEXT_Z = glbindGetProcAddress(`glSecondaryColor3svEXT`);
  if (*cast(void**)&glSecondaryColor3svEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3svEXT' not found!`);
  glSecondaryColor3svEXT_Z(a00,);
}
alias glSecondaryColor3ubEXT = glSecondaryColor3ubEXT_Z;
__gshared glbfn_glSecondaryColor3ubEXT glSecondaryColor3ubEXT_Z = function void (ubyte a00,ubyte a01,ubyte a02) {
  glbfn_glSecondaryColor3ubEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3ubEXT_loader (ubyte a00,ubyte a01,ubyte a02) {
  *cast(void**)&glSecondaryColor3ubEXT_Z = glbindGetProcAddress(`glSecondaryColor3ubEXT`);
  if (*cast(void**)&glSecondaryColor3ubEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ubEXT' not found!`);
  glSecondaryColor3ubEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3ubvEXT = glSecondaryColor3ubvEXT_Z;
__gshared glbfn_glSecondaryColor3ubvEXT glSecondaryColor3ubvEXT_Z = function void (const(ubyte)* a00) {
  glbfn_glSecondaryColor3ubvEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3ubvEXT_loader (const(ubyte)* a00) {
  *cast(void**)&glSecondaryColor3ubvEXT_Z = glbindGetProcAddress(`glSecondaryColor3ubvEXT`);
  if (*cast(void**)&glSecondaryColor3ubvEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ubvEXT' not found!`);
  glSecondaryColor3ubvEXT_Z(a00,);
}
alias glSecondaryColor3uiEXT = glSecondaryColor3uiEXT_Z;
__gshared glbfn_glSecondaryColor3uiEXT glSecondaryColor3uiEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glSecondaryColor3uiEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3uiEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glSecondaryColor3uiEXT_Z = glbindGetProcAddress(`glSecondaryColor3uiEXT`);
  if (*cast(void**)&glSecondaryColor3uiEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3uiEXT' not found!`);
  glSecondaryColor3uiEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3uivEXT = glSecondaryColor3uivEXT_Z;
__gshared glbfn_glSecondaryColor3uivEXT glSecondaryColor3uivEXT_Z = function void (const(uint)* a00) {
  glbfn_glSecondaryColor3uivEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3uivEXT_loader (const(uint)* a00) {
  *cast(void**)&glSecondaryColor3uivEXT_Z = glbindGetProcAddress(`glSecondaryColor3uivEXT`);
  if (*cast(void**)&glSecondaryColor3uivEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3uivEXT' not found!`);
  glSecondaryColor3uivEXT_Z(a00,);
}
alias glSecondaryColor3usEXT = glSecondaryColor3usEXT_Z;
__gshared glbfn_glSecondaryColor3usEXT glSecondaryColor3usEXT_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glSecondaryColor3usEXT_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3usEXT_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glSecondaryColor3usEXT_Z = glbindGetProcAddress(`glSecondaryColor3usEXT`);
  if (*cast(void**)&glSecondaryColor3usEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3usEXT' not found!`);
  glSecondaryColor3usEXT_Z(a00,a01,a02,);
}
alias glSecondaryColor3usvEXT = glSecondaryColor3usvEXT_Z;
__gshared glbfn_glSecondaryColor3usvEXT glSecondaryColor3usvEXT_Z = function void (const(ushort)* a00) {
  glbfn_glSecondaryColor3usvEXT_loader(a00,);
};
private void glbfn_glSecondaryColor3usvEXT_loader (const(ushort)* a00) {
  *cast(void**)&glSecondaryColor3usvEXT_Z = glbindGetProcAddress(`glSecondaryColor3usvEXT`);
  if (*cast(void**)&glSecondaryColor3usvEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColor3usvEXT' not found!`);
  glSecondaryColor3usvEXT_Z(a00,);
}
alias glSecondaryColorPointerEXT = glSecondaryColorPointerEXT_Z;
__gshared glbfn_glSecondaryColorPointerEXT glSecondaryColorPointerEXT_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glSecondaryColorPointerEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glSecondaryColorPointerEXT_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glSecondaryColorPointerEXT_Z = glbindGetProcAddress(`glSecondaryColorPointerEXT`);
  if (*cast(void**)&glSecondaryColorPointerEXT_Z is null) assert(0, `OpenGL function 'glSecondaryColorPointerEXT' not found!`);
  glSecondaryColorPointerEXT_Z(a00,a01,a02,a03,);
}
alias glUseShaderProgramEXT = glUseShaderProgramEXT_Z;
__gshared glbfn_glUseShaderProgramEXT glUseShaderProgramEXT_Z = function void (uint a00,uint a01) {
  glbfn_glUseShaderProgramEXT_loader(a00,a01,);
};
private void glbfn_glUseShaderProgramEXT_loader (uint a00,uint a01) {
  *cast(void**)&glUseShaderProgramEXT_Z = glbindGetProcAddress(`glUseShaderProgramEXT`);
  if (*cast(void**)&glUseShaderProgramEXT_Z is null) assert(0, `OpenGL function 'glUseShaderProgramEXT' not found!`);
  glUseShaderProgramEXT_Z(a00,a01,);
}
alias glActiveProgramEXT = glActiveProgramEXT_Z;
__gshared glbfn_glActiveProgramEXT glActiveProgramEXT_Z = function void (uint a00) {
  glbfn_glActiveProgramEXT_loader(a00,);
};
private void glbfn_glActiveProgramEXT_loader (uint a00) {
  *cast(void**)&glActiveProgramEXT_Z = glbindGetProcAddress(`glActiveProgramEXT`);
  if (*cast(void**)&glActiveProgramEXT_Z is null) assert(0, `OpenGL function 'glActiveProgramEXT' not found!`);
  glActiveProgramEXT_Z(a00,);
}
alias glCreateShaderProgramEXT = glCreateShaderProgramEXT_Z;
__gshared glbfn_glCreateShaderProgramEXT glCreateShaderProgramEXT_Z = function uint (uint a00,const(char)* a01) {
  return glbfn_glCreateShaderProgramEXT_loader(a00,a01,);
};
private uint glbfn_glCreateShaderProgramEXT_loader (uint a00,const(char)* a01) {
  *cast(void**)&glCreateShaderProgramEXT_Z = glbindGetProcAddress(`glCreateShaderProgramEXT`);
  if (*cast(void**)&glCreateShaderProgramEXT_Z is null) assert(0, `OpenGL function 'glCreateShaderProgramEXT' not found!`);
  return glCreateShaderProgramEXT_Z(a00,a01,);
}
alias glActiveShaderProgramEXT = glActiveShaderProgramEXT_Z;
__gshared glbfn_glActiveShaderProgramEXT glActiveShaderProgramEXT_Z = function void (uint a00,uint a01) {
  glbfn_glActiveShaderProgramEXT_loader(a00,a01,);
};
private void glbfn_glActiveShaderProgramEXT_loader (uint a00,uint a01) {
  *cast(void**)&glActiveShaderProgramEXT_Z = glbindGetProcAddress(`glActiveShaderProgramEXT`);
  if (*cast(void**)&glActiveShaderProgramEXT_Z is null) assert(0, `OpenGL function 'glActiveShaderProgramEXT' not found!`);
  glActiveShaderProgramEXT_Z(a00,a01,);
}
alias glBindProgramPipelineEXT = glBindProgramPipelineEXT_Z;
__gshared glbfn_glBindProgramPipelineEXT glBindProgramPipelineEXT_Z = function void (uint a00) {
  glbfn_glBindProgramPipelineEXT_loader(a00,);
};
private void glbfn_glBindProgramPipelineEXT_loader (uint a00) {
  *cast(void**)&glBindProgramPipelineEXT_Z = glbindGetProcAddress(`glBindProgramPipelineEXT`);
  if (*cast(void**)&glBindProgramPipelineEXT_Z is null) assert(0, `OpenGL function 'glBindProgramPipelineEXT' not found!`);
  glBindProgramPipelineEXT_Z(a00,);
}
alias glCreateShaderProgramvEXT = glCreateShaderProgramvEXT_Z;
__gshared glbfn_glCreateShaderProgramvEXT glCreateShaderProgramvEXT_Z = function uint (uint a00,int a01,const(char*)* a02) {
  return glbfn_glCreateShaderProgramvEXT_loader(a00,a01,a02,);
};
private uint glbfn_glCreateShaderProgramvEXT_loader (uint a00,int a01,const(char*)* a02) {
  *cast(void**)&glCreateShaderProgramvEXT_Z = glbindGetProcAddress(`glCreateShaderProgramvEXT`);
  if (*cast(void**)&glCreateShaderProgramvEXT_Z is null) assert(0, `OpenGL function 'glCreateShaderProgramvEXT' not found!`);
  return glCreateShaderProgramvEXT_Z(a00,a01,a02,);
}
alias glDeleteProgramPipelinesEXT = glDeleteProgramPipelinesEXT_Z;
__gshared glbfn_glDeleteProgramPipelinesEXT glDeleteProgramPipelinesEXT_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteProgramPipelinesEXT_loader(a00,a01,);
};
private void glbfn_glDeleteProgramPipelinesEXT_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteProgramPipelinesEXT_Z = glbindGetProcAddress(`glDeleteProgramPipelinesEXT`);
  if (*cast(void**)&glDeleteProgramPipelinesEXT_Z is null) assert(0, `OpenGL function 'glDeleteProgramPipelinesEXT' not found!`);
  glDeleteProgramPipelinesEXT_Z(a00,a01,);
}
alias glGenProgramPipelinesEXT = glGenProgramPipelinesEXT_Z;
__gshared glbfn_glGenProgramPipelinesEXT glGenProgramPipelinesEXT_Z = function void (int a00,uint* a01) {
  glbfn_glGenProgramPipelinesEXT_loader(a00,a01,);
};
private void glbfn_glGenProgramPipelinesEXT_loader (int a00,uint* a01) {
  *cast(void**)&glGenProgramPipelinesEXT_Z = glbindGetProcAddress(`glGenProgramPipelinesEXT`);
  if (*cast(void**)&glGenProgramPipelinesEXT_Z is null) assert(0, `OpenGL function 'glGenProgramPipelinesEXT' not found!`);
  glGenProgramPipelinesEXT_Z(a00,a01,);
}
alias glGetProgramPipelineInfoLogEXT = glGetProgramPipelineInfoLogEXT_Z;
__gshared glbfn_glGetProgramPipelineInfoLogEXT glGetProgramPipelineInfoLogEXT_Z = function void (uint a00,int a01,int* a02,char* a03) {
  glbfn_glGetProgramPipelineInfoLogEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramPipelineInfoLogEXT_loader (uint a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetProgramPipelineInfoLogEXT_Z = glbindGetProcAddress(`glGetProgramPipelineInfoLogEXT`);
  if (*cast(void**)&glGetProgramPipelineInfoLogEXT_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLogEXT' not found!`);
  glGetProgramPipelineInfoLogEXT_Z(a00,a01,a02,a03,);
}
alias glGetProgramPipelineivEXT = glGetProgramPipelineivEXT_Z;
__gshared glbfn_glGetProgramPipelineivEXT glGetProgramPipelineivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetProgramPipelineivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramPipelineivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetProgramPipelineivEXT_Z = glbindGetProcAddress(`glGetProgramPipelineivEXT`);
  if (*cast(void**)&glGetProgramPipelineivEXT_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineivEXT' not found!`);
  glGetProgramPipelineivEXT_Z(a00,a01,a02,);
}
alias glIsProgramPipelineEXT = glIsProgramPipelineEXT_Z;
__gshared glbfn_glIsProgramPipelineEXT glIsProgramPipelineEXT_Z = function ubyte (uint a00) {
  return glbfn_glIsProgramPipelineEXT_loader(a00,);
};
private ubyte glbfn_glIsProgramPipelineEXT_loader (uint a00) {
  *cast(void**)&glIsProgramPipelineEXT_Z = glbindGetProcAddress(`glIsProgramPipelineEXT`);
  if (*cast(void**)&glIsProgramPipelineEXT_Z is null) assert(0, `OpenGL function 'glIsProgramPipelineEXT' not found!`);
  return glIsProgramPipelineEXT_Z(a00,);
}
alias glUseProgramStagesEXT = glUseProgramStagesEXT_Z;
__gshared glbfn_glUseProgramStagesEXT glUseProgramStagesEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glUseProgramStagesEXT_loader(a00,a01,a02,);
};
private void glbfn_glUseProgramStagesEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glUseProgramStagesEXT_Z = glbindGetProcAddress(`glUseProgramStagesEXT`);
  if (*cast(void**)&glUseProgramStagesEXT_Z is null) assert(0, `OpenGL function 'glUseProgramStagesEXT' not found!`);
  glUseProgramStagesEXT_Z(a00,a01,a02,);
}
alias glValidateProgramPipelineEXT = glValidateProgramPipelineEXT_Z;
__gshared glbfn_glValidateProgramPipelineEXT glValidateProgramPipelineEXT_Z = function void (uint a00) {
  glbfn_glValidateProgramPipelineEXT_loader(a00,);
};
private void glbfn_glValidateProgramPipelineEXT_loader (uint a00) {
  *cast(void**)&glValidateProgramPipelineEXT_Z = glbindGetProcAddress(`glValidateProgramPipelineEXT`);
  if (*cast(void**)&glValidateProgramPipelineEXT_Z is null) assert(0, `OpenGL function 'glValidateProgramPipelineEXT' not found!`);
  glValidateProgramPipelineEXT_Z(a00,);
}
alias glBindImageTextureEXT = glBindImageTextureEXT_Z;
__gshared glbfn_glBindImageTextureEXT glBindImageTextureEXT_Z = function void (uint a00,uint a01,int a02,ubyte a03,int a04,uint a05,int a06) {
  glbfn_glBindImageTextureEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glBindImageTextureEXT_loader (uint a00,uint a01,int a02,ubyte a03,int a04,uint a05,int a06) {
  *cast(void**)&glBindImageTextureEXT_Z = glbindGetProcAddress(`glBindImageTextureEXT`);
  if (*cast(void**)&glBindImageTextureEXT_Z is null) assert(0, `OpenGL function 'glBindImageTextureEXT' not found!`);
  glBindImageTextureEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glMemoryBarrierEXT = glMemoryBarrierEXT_Z;
__gshared glbfn_glMemoryBarrierEXT glMemoryBarrierEXT_Z = function void (uint a00) {
  glbfn_glMemoryBarrierEXT_loader(a00,);
};
private void glbfn_glMemoryBarrierEXT_loader (uint a00) {
  *cast(void**)&glMemoryBarrierEXT_Z = glbindGetProcAddress(`glMemoryBarrierEXT`);
  if (*cast(void**)&glMemoryBarrierEXT_Z is null) assert(0, `OpenGL function 'glMemoryBarrierEXT' not found!`);
  glMemoryBarrierEXT_Z(a00,);
}
alias glStencilClearTagEXT = glStencilClearTagEXT_Z;
__gshared glbfn_glStencilClearTagEXT glStencilClearTagEXT_Z = function void (int a00,uint a01) {
  glbfn_glStencilClearTagEXT_loader(a00,a01,);
};
private void glbfn_glStencilClearTagEXT_loader (int a00,uint a01) {
  *cast(void**)&glStencilClearTagEXT_Z = glbindGetProcAddress(`glStencilClearTagEXT`);
  if (*cast(void**)&glStencilClearTagEXT_Z is null) assert(0, `OpenGL function 'glStencilClearTagEXT' not found!`);
  glStencilClearTagEXT_Z(a00,a01,);
}
alias glActiveStencilFaceEXT = glActiveStencilFaceEXT_Z;
__gshared glbfn_glActiveStencilFaceEXT glActiveStencilFaceEXT_Z = function void (uint a00) {
  glbfn_glActiveStencilFaceEXT_loader(a00,);
};
private void glbfn_glActiveStencilFaceEXT_loader (uint a00) {
  *cast(void**)&glActiveStencilFaceEXT_Z = glbindGetProcAddress(`glActiveStencilFaceEXT`);
  if (*cast(void**)&glActiveStencilFaceEXT_Z is null) assert(0, `OpenGL function 'glActiveStencilFaceEXT' not found!`);
  glActiveStencilFaceEXT_Z(a00,);
}
alias glTexSubImage1DEXT = glTexSubImage1DEXT_Z;
__gshared glbfn_glTexSubImage1DEXT glTexSubImage1DEXT_Z = function void (uint a00,int a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  glbfn_glTexSubImage1DEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTexSubImage1DEXT_loader (uint a00,int a01,int a02,int a03,uint a04,uint a05,const(void)* a06) {
  *cast(void**)&glTexSubImage1DEXT_Z = glbindGetProcAddress(`glTexSubImage1DEXT`);
  if (*cast(void**)&glTexSubImage1DEXT_Z is null) assert(0, `OpenGL function 'glTexSubImage1DEXT' not found!`);
  glTexSubImage1DEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTexSubImage2DEXT = glTexSubImage2DEXT_Z;
__gshared glbfn_glTexSubImage2DEXT glTexSubImage2DEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  glbfn_glTexSubImage2DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTexSubImage2DEXT_loader (uint a00,int a01,int a02,int a03,int a04,int a05,uint a06,uint a07,const(void)* a08) {
  *cast(void**)&glTexSubImage2DEXT_Z = glbindGetProcAddress(`glTexSubImage2DEXT`);
  if (*cast(void**)&glTexSubImage2DEXT_Z is null) assert(0, `OpenGL function 'glTexSubImage2DEXT' not found!`);
  glTexSubImage2DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glTexImage3DEXT = glTexImage3DEXT_Z;
__gshared glbfn_glTexImage3DEXT glTexImage3DEXT_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  glbfn_glTexImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glTexImage3DEXT_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,uint a07,uint a08,const(void)* a09) {
  *cast(void**)&glTexImage3DEXT_Z = glbindGetProcAddress(`glTexImage3DEXT`);
  if (*cast(void**)&glTexImage3DEXT_Z is null) assert(0, `OpenGL function 'glTexImage3DEXT' not found!`);
  glTexImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glTexSubImage3DEXT = glTexSubImage3DEXT_Z;
__gshared glbfn_glTexSubImage3DEXT glTexSubImage3DEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  glbfn_glTexSubImage3DEXT_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glTexSubImage3DEXT_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  *cast(void**)&glTexSubImage3DEXT_Z = glbindGetProcAddress(`glTexSubImage3DEXT`);
  if (*cast(void**)&glTexSubImage3DEXT_Z is null) assert(0, `OpenGL function 'glTexSubImage3DEXT' not found!`);
  glTexSubImage3DEXT_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glFramebufferTextureLayerEXT = glFramebufferTextureLayerEXT_Z;
__gshared glbfn_glFramebufferTextureLayerEXT glFramebufferTextureLayerEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glFramebufferTextureLayerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTextureLayerEXT_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glFramebufferTextureLayerEXT_Z = glbindGetProcAddress(`glFramebufferTextureLayerEXT`);
  if (*cast(void**)&glFramebufferTextureLayerEXT_Z is null) assert(0, `OpenGL function 'glFramebufferTextureLayerEXT' not found!`);
  glFramebufferTextureLayerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glTexBufferEXT = glTexBufferEXT_Z;
__gshared glbfn_glTexBufferEXT glTexBufferEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glTexBufferEXT_loader(a00,a01,a02,);
};
private void glbfn_glTexBufferEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glTexBufferEXT_Z = glbindGetProcAddress(`glTexBufferEXT`);
  if (*cast(void**)&glTexBufferEXT_Z is null) assert(0, `OpenGL function 'glTexBufferEXT' not found!`);
  glTexBufferEXT_Z(a00,a01,a02,);
}
alias glTexParameterIivEXT = glTexParameterIivEXT_Z;
__gshared glbfn_glTexParameterIivEXT glTexParameterIivEXT_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexParameterIivEXT_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterIivEXT_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexParameterIivEXT_Z = glbindGetProcAddress(`glTexParameterIivEXT`);
  if (*cast(void**)&glTexParameterIivEXT_Z is null) assert(0, `OpenGL function 'glTexParameterIivEXT' not found!`);
  glTexParameterIivEXT_Z(a00,a01,a02,);
}
alias glTexParameterIuivEXT = glTexParameterIuivEXT_Z;
__gshared glbfn_glTexParameterIuivEXT glTexParameterIuivEXT_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glTexParameterIuivEXT_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterIuivEXT_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glTexParameterIuivEXT_Z = glbindGetProcAddress(`glTexParameterIuivEXT`);
  if (*cast(void**)&glTexParameterIuivEXT_Z is null) assert(0, `OpenGL function 'glTexParameterIuivEXT' not found!`);
  glTexParameterIuivEXT_Z(a00,a01,a02,);
}
alias glGetTexParameterIivEXT = glGetTexParameterIivEXT_Z;
__gshared glbfn_glGetTexParameterIivEXT glGetTexParameterIivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexParameterIivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameterIivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexParameterIivEXT_Z = glbindGetProcAddress(`glGetTexParameterIivEXT`);
  if (*cast(void**)&glGetTexParameterIivEXT_Z is null) assert(0, `OpenGL function 'glGetTexParameterIivEXT' not found!`);
  glGetTexParameterIivEXT_Z(a00,a01,a02,);
}
alias glGetTexParameterIuivEXT = glGetTexParameterIuivEXT_Z;
__gshared glbfn_glGetTexParameterIuivEXT glGetTexParameterIuivEXT_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetTexParameterIuivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameterIuivEXT_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetTexParameterIuivEXT_Z = glbindGetProcAddress(`glGetTexParameterIuivEXT`);
  if (*cast(void**)&glGetTexParameterIuivEXT_Z is null) assert(0, `OpenGL function 'glGetTexParameterIuivEXT' not found!`);
  glGetTexParameterIuivEXT_Z(a00,a01,a02,);
}
alias glClearColorIiEXT = glClearColorIiEXT_Z;
__gshared glbfn_glClearColorIiEXT glClearColorIiEXT_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glClearColorIiEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearColorIiEXT_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glClearColorIiEXT_Z = glbindGetProcAddress(`glClearColorIiEXT`);
  if (*cast(void**)&glClearColorIiEXT_Z is null) assert(0, `OpenGL function 'glClearColorIiEXT' not found!`);
  glClearColorIiEXT_Z(a00,a01,a02,a03,);
}
alias glClearColorIuiEXT = glClearColorIuiEXT_Z;
__gshared glbfn_glClearColorIuiEXT glClearColorIuiEXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glClearColorIuiEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearColorIuiEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glClearColorIuiEXT_Z = glbindGetProcAddress(`glClearColorIuiEXT`);
  if (*cast(void**)&glClearColorIuiEXT_Z is null) assert(0, `OpenGL function 'glClearColorIuiEXT' not found!`);
  glClearColorIuiEXT_Z(a00,a01,a02,a03,);
}
alias glAreTexturesResidentEXT = glAreTexturesResidentEXT_Z;
__gshared glbfn_glAreTexturesResidentEXT glAreTexturesResidentEXT_Z = function ubyte (int a00,const(uint)* a01,ubyte* a02) {
  return glbfn_glAreTexturesResidentEXT_loader(a00,a01,a02,);
};
private ubyte glbfn_glAreTexturesResidentEXT_loader (int a00,const(uint)* a01,ubyte* a02) {
  *cast(void**)&glAreTexturesResidentEXT_Z = glbindGetProcAddress(`glAreTexturesResidentEXT`);
  if (*cast(void**)&glAreTexturesResidentEXT_Z is null) assert(0, `OpenGL function 'glAreTexturesResidentEXT' not found!`);
  return glAreTexturesResidentEXT_Z(a00,a01,a02,);
}
alias glBindTextureEXT = glBindTextureEXT_Z;
__gshared glbfn_glBindTextureEXT glBindTextureEXT_Z = function void (uint a00,uint a01) {
  glbfn_glBindTextureEXT_loader(a00,a01,);
};
private void glbfn_glBindTextureEXT_loader (uint a00,uint a01) {
  *cast(void**)&glBindTextureEXT_Z = glbindGetProcAddress(`glBindTextureEXT`);
  if (*cast(void**)&glBindTextureEXT_Z is null) assert(0, `OpenGL function 'glBindTextureEXT' not found!`);
  glBindTextureEXT_Z(a00,a01,);
}
alias glDeleteTexturesEXT = glDeleteTexturesEXT_Z;
__gshared glbfn_glDeleteTexturesEXT glDeleteTexturesEXT_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteTexturesEXT_loader(a00,a01,);
};
private void glbfn_glDeleteTexturesEXT_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteTexturesEXT_Z = glbindGetProcAddress(`glDeleteTexturesEXT`);
  if (*cast(void**)&glDeleteTexturesEXT_Z is null) assert(0, `OpenGL function 'glDeleteTexturesEXT' not found!`);
  glDeleteTexturesEXT_Z(a00,a01,);
}
alias glGenTexturesEXT = glGenTexturesEXT_Z;
__gshared glbfn_glGenTexturesEXT glGenTexturesEXT_Z = function void (int a00,uint* a01) {
  glbfn_glGenTexturesEXT_loader(a00,a01,);
};
private void glbfn_glGenTexturesEXT_loader (int a00,uint* a01) {
  *cast(void**)&glGenTexturesEXT_Z = glbindGetProcAddress(`glGenTexturesEXT`);
  if (*cast(void**)&glGenTexturesEXT_Z is null) assert(0, `OpenGL function 'glGenTexturesEXT' not found!`);
  glGenTexturesEXT_Z(a00,a01,);
}
alias glIsTextureEXT = glIsTextureEXT_Z;
__gshared glbfn_glIsTextureEXT glIsTextureEXT_Z = function ubyte (uint a00) {
  return glbfn_glIsTextureEXT_loader(a00,);
};
private ubyte glbfn_glIsTextureEXT_loader (uint a00) {
  *cast(void**)&glIsTextureEXT_Z = glbindGetProcAddress(`glIsTextureEXT`);
  if (*cast(void**)&glIsTextureEXT_Z is null) assert(0, `OpenGL function 'glIsTextureEXT' not found!`);
  return glIsTextureEXT_Z(a00,);
}
alias glPrioritizeTexturesEXT = glPrioritizeTexturesEXT_Z;
__gshared glbfn_glPrioritizeTexturesEXT glPrioritizeTexturesEXT_Z = function void (int a00,const(uint)* a01,const(float)* a02) {
  glbfn_glPrioritizeTexturesEXT_loader(a00,a01,a02,);
};
private void glbfn_glPrioritizeTexturesEXT_loader (int a00,const(uint)* a01,const(float)* a02) {
  *cast(void**)&glPrioritizeTexturesEXT_Z = glbindGetProcAddress(`glPrioritizeTexturesEXT`);
  if (*cast(void**)&glPrioritizeTexturesEXT_Z is null) assert(0, `OpenGL function 'glPrioritizeTexturesEXT' not found!`);
  glPrioritizeTexturesEXT_Z(a00,a01,a02,);
}
alias glTextureNormalEXT = glTextureNormalEXT_Z;
__gshared glbfn_glTextureNormalEXT glTextureNormalEXT_Z = function void (uint a00) {
  glbfn_glTextureNormalEXT_loader(a00,);
};
private void glbfn_glTextureNormalEXT_loader (uint a00) {
  *cast(void**)&glTextureNormalEXT_Z = glbindGetProcAddress(`glTextureNormalEXT`);
  if (*cast(void**)&glTextureNormalEXT_Z is null) assert(0, `OpenGL function 'glTextureNormalEXT' not found!`);
  glTextureNormalEXT_Z(a00,);
}
alias glGetQueryObjecti64vEXT = glGetQueryObjecti64vEXT_Z;
__gshared glbfn_glGetQueryObjecti64vEXT glGetQueryObjecti64vEXT_Z = function void (uint a00,uint a01,long* a02) {
  glbfn_glGetQueryObjecti64vEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjecti64vEXT_loader (uint a00,uint a01,long* a02) {
  *cast(void**)&glGetQueryObjecti64vEXT_Z = glbindGetProcAddress(`glGetQueryObjecti64vEXT`);
  if (*cast(void**)&glGetQueryObjecti64vEXT_Z is null) assert(0, `OpenGL function 'glGetQueryObjecti64vEXT' not found!`);
  glGetQueryObjecti64vEXT_Z(a00,a01,a02,);
}
alias glGetQueryObjectui64vEXT = glGetQueryObjectui64vEXT_Z;
__gshared glbfn_glGetQueryObjectui64vEXT glGetQueryObjectui64vEXT_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetQueryObjectui64vEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetQueryObjectui64vEXT_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetQueryObjectui64vEXT_Z = glbindGetProcAddress(`glGetQueryObjectui64vEXT`);
  if (*cast(void**)&glGetQueryObjectui64vEXT_Z is null) assert(0, `OpenGL function 'glGetQueryObjectui64vEXT' not found!`);
  glGetQueryObjectui64vEXT_Z(a00,a01,a02,);
}
alias glBeginTransformFeedbackEXT = glBeginTransformFeedbackEXT_Z;
__gshared glbfn_glBeginTransformFeedbackEXT glBeginTransformFeedbackEXT_Z = function void (uint a00) {
  glbfn_glBeginTransformFeedbackEXT_loader(a00,);
};
private void glbfn_glBeginTransformFeedbackEXT_loader (uint a00) {
  *cast(void**)&glBeginTransformFeedbackEXT_Z = glbindGetProcAddress(`glBeginTransformFeedbackEXT`);
  if (*cast(void**)&glBeginTransformFeedbackEXT_Z is null) assert(0, `OpenGL function 'glBeginTransformFeedbackEXT' not found!`);
  glBeginTransformFeedbackEXT_Z(a00,);
}
alias glEndTransformFeedbackEXT = glEndTransformFeedbackEXT_Z;
__gshared glbfn_glEndTransformFeedbackEXT glEndTransformFeedbackEXT_Z = function void () {
  glbfn_glEndTransformFeedbackEXT_loader();
};
private void glbfn_glEndTransformFeedbackEXT_loader () {
  *cast(void**)&glEndTransformFeedbackEXT_Z = glbindGetProcAddress(`glEndTransformFeedbackEXT`);
  if (*cast(void**)&glEndTransformFeedbackEXT_Z is null) assert(0, `OpenGL function 'glEndTransformFeedbackEXT' not found!`);
  glEndTransformFeedbackEXT_Z();
}
alias glBindBufferRangeEXT = glBindBufferRangeEXT_Z;
__gshared glbfn_glBindBufferRangeEXT glBindBufferRangeEXT_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glBindBufferRangeEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBindBufferRangeEXT_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glBindBufferRangeEXT_Z = glbindGetProcAddress(`glBindBufferRangeEXT`);
  if (*cast(void**)&glBindBufferRangeEXT_Z is null) assert(0, `OpenGL function 'glBindBufferRangeEXT' not found!`);
  glBindBufferRangeEXT_Z(a00,a01,a02,a03,a04,);
}
alias glBindBufferOffsetEXT = glBindBufferOffsetEXT_Z;
__gshared glbfn_glBindBufferOffsetEXT glBindBufferOffsetEXT_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glBindBufferOffsetEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glBindBufferOffsetEXT_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glBindBufferOffsetEXT_Z = glbindGetProcAddress(`glBindBufferOffsetEXT`);
  if (*cast(void**)&glBindBufferOffsetEXT_Z is null) assert(0, `OpenGL function 'glBindBufferOffsetEXT' not found!`);
  glBindBufferOffsetEXT_Z(a00,a01,a02,a03,);
}
alias glBindBufferBaseEXT = glBindBufferBaseEXT_Z;
__gshared glbfn_glBindBufferBaseEXT glBindBufferBaseEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBindBufferBaseEXT_loader(a00,a01,a02,);
};
private void glbfn_glBindBufferBaseEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBindBufferBaseEXT_Z = glbindGetProcAddress(`glBindBufferBaseEXT`);
  if (*cast(void**)&glBindBufferBaseEXT_Z is null) assert(0, `OpenGL function 'glBindBufferBaseEXT' not found!`);
  glBindBufferBaseEXT_Z(a00,a01,a02,);
}
alias glTransformFeedbackVaryingsEXT = glTransformFeedbackVaryingsEXT_Z;
__gshared glbfn_glTransformFeedbackVaryingsEXT glTransformFeedbackVaryingsEXT_Z = function void (uint a00,int a01,const(char*)* a02,uint a03) {
  glbfn_glTransformFeedbackVaryingsEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glTransformFeedbackVaryingsEXT_loader (uint a00,int a01,const(char*)* a02,uint a03) {
  *cast(void**)&glTransformFeedbackVaryingsEXT_Z = glbindGetProcAddress(`glTransformFeedbackVaryingsEXT`);
  if (*cast(void**)&glTransformFeedbackVaryingsEXT_Z is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsEXT' not found!`);
  glTransformFeedbackVaryingsEXT_Z(a00,a01,a02,a03,);
}
alias glGetTransformFeedbackVaryingEXT = glGetTransformFeedbackVaryingEXT_Z;
__gshared glbfn_glGetTransformFeedbackVaryingEXT glGetTransformFeedbackVaryingEXT_Z = function void (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  glbfn_glGetTransformFeedbackVaryingEXT_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetTransformFeedbackVaryingEXT_loader (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  *cast(void**)&glGetTransformFeedbackVaryingEXT_Z = glbindGetProcAddress(`glGetTransformFeedbackVaryingEXT`);
  if (*cast(void**)&glGetTransformFeedbackVaryingEXT_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingEXT' not found!`);
  glGetTransformFeedbackVaryingEXT_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glArrayElementEXT = glArrayElementEXT_Z;
__gshared glbfn_glArrayElementEXT glArrayElementEXT_Z = function void (int a00) {
  glbfn_glArrayElementEXT_loader(a00,);
};
private void glbfn_glArrayElementEXT_loader (int a00) {
  *cast(void**)&glArrayElementEXT_Z = glbindGetProcAddress(`glArrayElementEXT`);
  if (*cast(void**)&glArrayElementEXT_Z is null) assert(0, `OpenGL function 'glArrayElementEXT' not found!`);
  glArrayElementEXT_Z(a00,);
}
alias glColorPointerEXT = glColorPointerEXT_Z;
__gshared glbfn_glColorPointerEXT glColorPointerEXT_Z = function void (int a00,uint a01,int a02,int a03,const(void)* a04) {
  glbfn_glColorPointerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glColorPointerEXT_loader (int a00,uint a01,int a02,int a03,const(void)* a04) {
  *cast(void**)&glColorPointerEXT_Z = glbindGetProcAddress(`glColorPointerEXT`);
  if (*cast(void**)&glColorPointerEXT_Z is null) assert(0, `OpenGL function 'glColorPointerEXT' not found!`);
  glColorPointerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glDrawArraysEXT = glDrawArraysEXT_Z;
__gshared glbfn_glDrawArraysEXT glDrawArraysEXT_Z = function void (uint a00,int a01,int a02) {
  glbfn_glDrawArraysEXT_loader(a00,a01,a02,);
};
private void glbfn_glDrawArraysEXT_loader (uint a00,int a01,int a02) {
  *cast(void**)&glDrawArraysEXT_Z = glbindGetProcAddress(`glDrawArraysEXT`);
  if (*cast(void**)&glDrawArraysEXT_Z is null) assert(0, `OpenGL function 'glDrawArraysEXT' not found!`);
  glDrawArraysEXT_Z(a00,a01,a02,);
}
alias glEdgeFlagPointerEXT = glEdgeFlagPointerEXT_Z;
__gshared glbfn_glEdgeFlagPointerEXT glEdgeFlagPointerEXT_Z = function void (int a00,int a01,const(ubyte)* a02) {
  glbfn_glEdgeFlagPointerEXT_loader(a00,a01,a02,);
};
private void glbfn_glEdgeFlagPointerEXT_loader (int a00,int a01,const(ubyte)* a02) {
  *cast(void**)&glEdgeFlagPointerEXT_Z = glbindGetProcAddress(`glEdgeFlagPointerEXT`);
  if (*cast(void**)&glEdgeFlagPointerEXT_Z is null) assert(0, `OpenGL function 'glEdgeFlagPointerEXT' not found!`);
  glEdgeFlagPointerEXT_Z(a00,a01,a02,);
}
alias glGetPointervEXT = glGetPointervEXT_Z;
__gshared glbfn_glGetPointervEXT glGetPointervEXT_Z = function void (uint a00,void** a01) {
  glbfn_glGetPointervEXT_loader(a00,a01,);
};
private void glbfn_glGetPointervEXT_loader (uint a00,void** a01) {
  *cast(void**)&glGetPointervEXT_Z = glbindGetProcAddress(`glGetPointervEXT`);
  if (*cast(void**)&glGetPointervEXT_Z is null) assert(0, `OpenGL function 'glGetPointervEXT' not found!`);
  glGetPointervEXT_Z(a00,a01,);
}
alias glIndexPointerEXT = glIndexPointerEXT_Z;
__gshared glbfn_glIndexPointerEXT glIndexPointerEXT_Z = function void (uint a00,int a01,int a02,const(void)* a03) {
  glbfn_glIndexPointerEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glIndexPointerEXT_loader (uint a00,int a01,int a02,const(void)* a03) {
  *cast(void**)&glIndexPointerEXT_Z = glbindGetProcAddress(`glIndexPointerEXT`);
  if (*cast(void**)&glIndexPointerEXT_Z is null) assert(0, `OpenGL function 'glIndexPointerEXT' not found!`);
  glIndexPointerEXT_Z(a00,a01,a02,a03,);
}
alias glNormalPointerEXT = glNormalPointerEXT_Z;
__gshared glbfn_glNormalPointerEXT glNormalPointerEXT_Z = function void (uint a00,int a01,int a02,const(void)* a03) {
  glbfn_glNormalPointerEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glNormalPointerEXT_loader (uint a00,int a01,int a02,const(void)* a03) {
  *cast(void**)&glNormalPointerEXT_Z = glbindGetProcAddress(`glNormalPointerEXT`);
  if (*cast(void**)&glNormalPointerEXT_Z is null) assert(0, `OpenGL function 'glNormalPointerEXT' not found!`);
  glNormalPointerEXT_Z(a00,a01,a02,a03,);
}
alias glTexCoordPointerEXT = glTexCoordPointerEXT_Z;
__gshared glbfn_glTexCoordPointerEXT glTexCoordPointerEXT_Z = function void (int a00,uint a01,int a02,int a03,const(void)* a04) {
  glbfn_glTexCoordPointerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTexCoordPointerEXT_loader (int a00,uint a01,int a02,int a03,const(void)* a04) {
  *cast(void**)&glTexCoordPointerEXT_Z = glbindGetProcAddress(`glTexCoordPointerEXT`);
  if (*cast(void**)&glTexCoordPointerEXT_Z is null) assert(0, `OpenGL function 'glTexCoordPointerEXT' not found!`);
  glTexCoordPointerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexPointerEXT = glVertexPointerEXT_Z;
__gshared glbfn_glVertexPointerEXT glVertexPointerEXT_Z = function void (int a00,uint a01,int a02,int a03,const(void)* a04) {
  glbfn_glVertexPointerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexPointerEXT_loader (int a00,uint a01,int a02,int a03,const(void)* a04) {
  *cast(void**)&glVertexPointerEXT_Z = glbindGetProcAddress(`glVertexPointerEXT`);
  if (*cast(void**)&glVertexPointerEXT_Z is null) assert(0, `OpenGL function 'glVertexPointerEXT' not found!`);
  glVertexPointerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribL1dEXT = glVertexAttribL1dEXT_Z;
__gshared glbfn_glVertexAttribL1dEXT glVertexAttribL1dEXT_Z = function void (uint a00,double a01) {
  glbfn_glVertexAttribL1dEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1dEXT_loader (uint a00,double a01) {
  *cast(void**)&glVertexAttribL1dEXT_Z = glbindGetProcAddress(`glVertexAttribL1dEXT`);
  if (*cast(void**)&glVertexAttribL1dEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL1dEXT' not found!`);
  glVertexAttribL1dEXT_Z(a00,a01,);
}
alias glVertexAttribL2dEXT = glVertexAttribL2dEXT_Z;
__gshared glbfn_glVertexAttribL2dEXT glVertexAttribL2dEXT_Z = function void (uint a00,double a01,double a02) {
  glbfn_glVertexAttribL2dEXT_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribL2dEXT_loader (uint a00,double a01,double a02) {
  *cast(void**)&glVertexAttribL2dEXT_Z = glbindGetProcAddress(`glVertexAttribL2dEXT`);
  if (*cast(void**)&glVertexAttribL2dEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL2dEXT' not found!`);
  glVertexAttribL2dEXT_Z(a00,a01,a02,);
}
alias glVertexAttribL3dEXT = glVertexAttribL3dEXT_Z;
__gshared glbfn_glVertexAttribL3dEXT glVertexAttribL3dEXT_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glVertexAttribL3dEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribL3dEXT_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glVertexAttribL3dEXT_Z = glbindGetProcAddress(`glVertexAttribL3dEXT`);
  if (*cast(void**)&glVertexAttribL3dEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL3dEXT' not found!`);
  glVertexAttribL3dEXT_Z(a00,a01,a02,a03,);
}
alias glVertexAttribL4dEXT = glVertexAttribL4dEXT_Z;
__gshared glbfn_glVertexAttribL4dEXT glVertexAttribL4dEXT_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glVertexAttribL4dEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribL4dEXT_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glVertexAttribL4dEXT_Z = glbindGetProcAddress(`glVertexAttribL4dEXT`);
  if (*cast(void**)&glVertexAttribL4dEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL4dEXT' not found!`);
  glVertexAttribL4dEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribL1dvEXT = glVertexAttribL1dvEXT_Z;
__gshared glbfn_glVertexAttribL1dvEXT glVertexAttribL1dvEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL1dvEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1dvEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL1dvEXT_Z = glbindGetProcAddress(`glVertexAttribL1dvEXT`);
  if (*cast(void**)&glVertexAttribL1dvEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL1dvEXT' not found!`);
  glVertexAttribL1dvEXT_Z(a00,a01,);
}
alias glVertexAttribL2dvEXT = glVertexAttribL2dvEXT_Z;
__gshared glbfn_glVertexAttribL2dvEXT glVertexAttribL2dvEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL2dvEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribL2dvEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL2dvEXT_Z = glbindGetProcAddress(`glVertexAttribL2dvEXT`);
  if (*cast(void**)&glVertexAttribL2dvEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL2dvEXT' not found!`);
  glVertexAttribL2dvEXT_Z(a00,a01,);
}
alias glVertexAttribL3dvEXT = glVertexAttribL3dvEXT_Z;
__gshared glbfn_glVertexAttribL3dvEXT glVertexAttribL3dvEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL3dvEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribL3dvEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL3dvEXT_Z = glbindGetProcAddress(`glVertexAttribL3dvEXT`);
  if (*cast(void**)&glVertexAttribL3dvEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL3dvEXT' not found!`);
  glVertexAttribL3dvEXT_Z(a00,a01,);
}
alias glVertexAttribL4dvEXT = glVertexAttribL4dvEXT_Z;
__gshared glbfn_glVertexAttribL4dvEXT glVertexAttribL4dvEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttribL4dvEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribL4dvEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttribL4dvEXT_Z = glbindGetProcAddress(`glVertexAttribL4dvEXT`);
  if (*cast(void**)&glVertexAttribL4dvEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribL4dvEXT' not found!`);
  glVertexAttribL4dvEXT_Z(a00,a01,);
}
alias glVertexAttribLPointerEXT = glVertexAttribLPointerEXT_Z;
__gshared glbfn_glVertexAttribLPointerEXT glVertexAttribLPointerEXT_Z = function void (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  glbfn_glVertexAttribLPointerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribLPointerEXT_loader (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  *cast(void**)&glVertexAttribLPointerEXT_Z = glbindGetProcAddress(`glVertexAttribLPointerEXT`);
  if (*cast(void**)&glVertexAttribLPointerEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribLPointerEXT' not found!`);
  glVertexAttribLPointerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glGetVertexAttribLdvEXT = glGetVertexAttribLdvEXT_Z;
__gshared glbfn_glGetVertexAttribLdvEXT glGetVertexAttribLdvEXT_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetVertexAttribLdvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribLdvEXT_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetVertexAttribLdvEXT_Z = glbindGetProcAddress(`glGetVertexAttribLdvEXT`);
  if (*cast(void**)&glGetVertexAttribLdvEXT_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLdvEXT' not found!`);
  glGetVertexAttribLdvEXT_Z(a00,a01,a02,);
}
alias glBeginVertexShaderEXT = glBeginVertexShaderEXT_Z;
__gshared glbfn_glBeginVertexShaderEXT glBeginVertexShaderEXT_Z = function void () {
  glbfn_glBeginVertexShaderEXT_loader();
};
private void glbfn_glBeginVertexShaderEXT_loader () {
  *cast(void**)&glBeginVertexShaderEXT_Z = glbindGetProcAddress(`glBeginVertexShaderEXT`);
  if (*cast(void**)&glBeginVertexShaderEXT_Z is null) assert(0, `OpenGL function 'glBeginVertexShaderEXT' not found!`);
  glBeginVertexShaderEXT_Z();
}
alias glEndVertexShaderEXT = glEndVertexShaderEXT_Z;
__gshared glbfn_glEndVertexShaderEXT glEndVertexShaderEXT_Z = function void () {
  glbfn_glEndVertexShaderEXT_loader();
};
private void glbfn_glEndVertexShaderEXT_loader () {
  *cast(void**)&glEndVertexShaderEXT_Z = glbindGetProcAddress(`glEndVertexShaderEXT`);
  if (*cast(void**)&glEndVertexShaderEXT_Z is null) assert(0, `OpenGL function 'glEndVertexShaderEXT' not found!`);
  glEndVertexShaderEXT_Z();
}
alias glBindVertexShaderEXT = glBindVertexShaderEXT_Z;
__gshared glbfn_glBindVertexShaderEXT glBindVertexShaderEXT_Z = function void (uint a00) {
  glbfn_glBindVertexShaderEXT_loader(a00,);
};
private void glbfn_glBindVertexShaderEXT_loader (uint a00) {
  *cast(void**)&glBindVertexShaderEXT_Z = glbindGetProcAddress(`glBindVertexShaderEXT`);
  if (*cast(void**)&glBindVertexShaderEXT_Z is null) assert(0, `OpenGL function 'glBindVertexShaderEXT' not found!`);
  glBindVertexShaderEXT_Z(a00,);
}
alias glGenVertexShadersEXT = glGenVertexShadersEXT_Z;
__gshared glbfn_glGenVertexShadersEXT glGenVertexShadersEXT_Z = function uint (uint a00) {
  return glbfn_glGenVertexShadersEXT_loader(a00,);
};
private uint glbfn_glGenVertexShadersEXT_loader (uint a00) {
  *cast(void**)&glGenVertexShadersEXT_Z = glbindGetProcAddress(`glGenVertexShadersEXT`);
  if (*cast(void**)&glGenVertexShadersEXT_Z is null) assert(0, `OpenGL function 'glGenVertexShadersEXT' not found!`);
  return glGenVertexShadersEXT_Z(a00,);
}
alias glDeleteVertexShaderEXT = glDeleteVertexShaderEXT_Z;
__gshared glbfn_glDeleteVertexShaderEXT glDeleteVertexShaderEXT_Z = function void (uint a00) {
  glbfn_glDeleteVertexShaderEXT_loader(a00,);
};
private void glbfn_glDeleteVertexShaderEXT_loader (uint a00) {
  *cast(void**)&glDeleteVertexShaderEXT_Z = glbindGetProcAddress(`glDeleteVertexShaderEXT`);
  if (*cast(void**)&glDeleteVertexShaderEXT_Z is null) assert(0, `OpenGL function 'glDeleteVertexShaderEXT' not found!`);
  glDeleteVertexShaderEXT_Z(a00,);
}
alias glShaderOp1EXT = glShaderOp1EXT_Z;
__gshared glbfn_glShaderOp1EXT glShaderOp1EXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glShaderOp1EXT_loader(a00,a01,a02,);
};
private void glbfn_glShaderOp1EXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glShaderOp1EXT_Z = glbindGetProcAddress(`glShaderOp1EXT`);
  if (*cast(void**)&glShaderOp1EXT_Z is null) assert(0, `OpenGL function 'glShaderOp1EXT' not found!`);
  glShaderOp1EXT_Z(a00,a01,a02,);
}
alias glShaderOp2EXT = glShaderOp2EXT_Z;
__gshared glbfn_glShaderOp2EXT glShaderOp2EXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glShaderOp2EXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glShaderOp2EXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glShaderOp2EXT_Z = glbindGetProcAddress(`glShaderOp2EXT`);
  if (*cast(void**)&glShaderOp2EXT_Z is null) assert(0, `OpenGL function 'glShaderOp2EXT' not found!`);
  glShaderOp2EXT_Z(a00,a01,a02,a03,);
}
alias glShaderOp3EXT = glShaderOp3EXT_Z;
__gshared glbfn_glShaderOp3EXT glShaderOp3EXT_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glShaderOp3EXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glShaderOp3EXT_loader (uint a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glShaderOp3EXT_Z = glbindGetProcAddress(`glShaderOp3EXT`);
  if (*cast(void**)&glShaderOp3EXT_Z is null) assert(0, `OpenGL function 'glShaderOp3EXT' not found!`);
  glShaderOp3EXT_Z(a00,a01,a02,a03,a04,);
}
alias glSwizzleEXT = glSwizzleEXT_Z;
__gshared glbfn_glSwizzleEXT glSwizzleEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glSwizzleEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glSwizzleEXT_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glSwizzleEXT_Z = glbindGetProcAddress(`glSwizzleEXT`);
  if (*cast(void**)&glSwizzleEXT_Z is null) assert(0, `OpenGL function 'glSwizzleEXT' not found!`);
  glSwizzleEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glWriteMaskEXT = glWriteMaskEXT_Z;
__gshared glbfn_glWriteMaskEXT glWriteMaskEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glWriteMaskEXT_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glWriteMaskEXT_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glWriteMaskEXT_Z = glbindGetProcAddress(`glWriteMaskEXT`);
  if (*cast(void**)&glWriteMaskEXT_Z is null) assert(0, `OpenGL function 'glWriteMaskEXT' not found!`);
  glWriteMaskEXT_Z(a00,a01,a02,a03,a04,a05,);
}
alias glInsertComponentEXT = glInsertComponentEXT_Z;
__gshared glbfn_glInsertComponentEXT glInsertComponentEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glInsertComponentEXT_loader(a00,a01,a02,);
};
private void glbfn_glInsertComponentEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glInsertComponentEXT_Z = glbindGetProcAddress(`glInsertComponentEXT`);
  if (*cast(void**)&glInsertComponentEXT_Z is null) assert(0, `OpenGL function 'glInsertComponentEXT' not found!`);
  glInsertComponentEXT_Z(a00,a01,a02,);
}
alias glExtractComponentEXT = glExtractComponentEXT_Z;
__gshared glbfn_glExtractComponentEXT glExtractComponentEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glExtractComponentEXT_loader(a00,a01,a02,);
};
private void glbfn_glExtractComponentEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glExtractComponentEXT_Z = glbindGetProcAddress(`glExtractComponentEXT`);
  if (*cast(void**)&glExtractComponentEXT_Z is null) assert(0, `OpenGL function 'glExtractComponentEXT' not found!`);
  glExtractComponentEXT_Z(a00,a01,a02,);
}
alias glGenSymbolsEXT = glGenSymbolsEXT_Z;
__gshared glbfn_glGenSymbolsEXT glGenSymbolsEXT_Z = function uint (uint a00,uint a01,uint a02,uint a03) {
  return glbfn_glGenSymbolsEXT_loader(a00,a01,a02,a03,);
};
private uint glbfn_glGenSymbolsEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glGenSymbolsEXT_Z = glbindGetProcAddress(`glGenSymbolsEXT`);
  if (*cast(void**)&glGenSymbolsEXT_Z is null) assert(0, `OpenGL function 'glGenSymbolsEXT' not found!`);
  return glGenSymbolsEXT_Z(a00,a01,a02,a03,);
}
alias glSetInvariantEXT = glSetInvariantEXT_Z;
__gshared glbfn_glSetInvariantEXT glSetInvariantEXT_Z = function void (uint a00,uint a01,const(void)* a02) {
  glbfn_glSetInvariantEXT_loader(a00,a01,a02,);
};
private void glbfn_glSetInvariantEXT_loader (uint a00,uint a01,const(void)* a02) {
  *cast(void**)&glSetInvariantEXT_Z = glbindGetProcAddress(`glSetInvariantEXT`);
  if (*cast(void**)&glSetInvariantEXT_Z is null) assert(0, `OpenGL function 'glSetInvariantEXT' not found!`);
  glSetInvariantEXT_Z(a00,a01,a02,);
}
alias glSetLocalConstantEXT = glSetLocalConstantEXT_Z;
__gshared glbfn_glSetLocalConstantEXT glSetLocalConstantEXT_Z = function void (uint a00,uint a01,const(void)* a02) {
  glbfn_glSetLocalConstantEXT_loader(a00,a01,a02,);
};
private void glbfn_glSetLocalConstantEXT_loader (uint a00,uint a01,const(void)* a02) {
  *cast(void**)&glSetLocalConstantEXT_Z = glbindGetProcAddress(`glSetLocalConstantEXT`);
  if (*cast(void**)&glSetLocalConstantEXT_Z is null) assert(0, `OpenGL function 'glSetLocalConstantEXT' not found!`);
  glSetLocalConstantEXT_Z(a00,a01,a02,);
}
alias glVariantbvEXT = glVariantbvEXT_Z;
__gshared glbfn_glVariantbvEXT glVariantbvEXT_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glVariantbvEXT_loader(a00,a01,);
};
private void glbfn_glVariantbvEXT_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glVariantbvEXT_Z = glbindGetProcAddress(`glVariantbvEXT`);
  if (*cast(void**)&glVariantbvEXT_Z is null) assert(0, `OpenGL function 'glVariantbvEXT' not found!`);
  glVariantbvEXT_Z(a00,a01,);
}
alias glVariantsvEXT = glVariantsvEXT_Z;
__gshared glbfn_glVariantsvEXT glVariantsvEXT_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVariantsvEXT_loader(a00,a01,);
};
private void glbfn_glVariantsvEXT_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVariantsvEXT_Z = glbindGetProcAddress(`glVariantsvEXT`);
  if (*cast(void**)&glVariantsvEXT_Z is null) assert(0, `OpenGL function 'glVariantsvEXT' not found!`);
  glVariantsvEXT_Z(a00,a01,);
}
alias glVariantivEXT = glVariantivEXT_Z;
__gshared glbfn_glVariantivEXT glVariantivEXT_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVariantivEXT_loader(a00,a01,);
};
private void glbfn_glVariantivEXT_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVariantivEXT_Z = glbindGetProcAddress(`glVariantivEXT`);
  if (*cast(void**)&glVariantivEXT_Z is null) assert(0, `OpenGL function 'glVariantivEXT' not found!`);
  glVariantivEXT_Z(a00,a01,);
}
alias glVariantfvEXT = glVariantfvEXT_Z;
__gshared glbfn_glVariantfvEXT glVariantfvEXT_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVariantfvEXT_loader(a00,a01,);
};
private void glbfn_glVariantfvEXT_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVariantfvEXT_Z = glbindGetProcAddress(`glVariantfvEXT`);
  if (*cast(void**)&glVariantfvEXT_Z is null) assert(0, `OpenGL function 'glVariantfvEXT' not found!`);
  glVariantfvEXT_Z(a00,a01,);
}
alias glVariantdvEXT = glVariantdvEXT_Z;
__gshared glbfn_glVariantdvEXT glVariantdvEXT_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVariantdvEXT_loader(a00,a01,);
};
private void glbfn_glVariantdvEXT_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVariantdvEXT_Z = glbindGetProcAddress(`glVariantdvEXT`);
  if (*cast(void**)&glVariantdvEXT_Z is null) assert(0, `OpenGL function 'glVariantdvEXT' not found!`);
  glVariantdvEXT_Z(a00,a01,);
}
alias glVariantubvEXT = glVariantubvEXT_Z;
__gshared glbfn_glVariantubvEXT glVariantubvEXT_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVariantubvEXT_loader(a00,a01,);
};
private void glbfn_glVariantubvEXT_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVariantubvEXT_Z = glbindGetProcAddress(`glVariantubvEXT`);
  if (*cast(void**)&glVariantubvEXT_Z is null) assert(0, `OpenGL function 'glVariantubvEXT' not found!`);
  glVariantubvEXT_Z(a00,a01,);
}
alias glVariantusvEXT = glVariantusvEXT_Z;
__gshared glbfn_glVariantusvEXT glVariantusvEXT_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVariantusvEXT_loader(a00,a01,);
};
private void glbfn_glVariantusvEXT_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVariantusvEXT_Z = glbindGetProcAddress(`glVariantusvEXT`);
  if (*cast(void**)&glVariantusvEXT_Z is null) assert(0, `OpenGL function 'glVariantusvEXT' not found!`);
  glVariantusvEXT_Z(a00,a01,);
}
alias glVariantuivEXT = glVariantuivEXT_Z;
__gshared glbfn_glVariantuivEXT glVariantuivEXT_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVariantuivEXT_loader(a00,a01,);
};
private void glbfn_glVariantuivEXT_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVariantuivEXT_Z = glbindGetProcAddress(`glVariantuivEXT`);
  if (*cast(void**)&glVariantuivEXT_Z is null) assert(0, `OpenGL function 'glVariantuivEXT' not found!`);
  glVariantuivEXT_Z(a00,a01,);
}
alias glVariantPointerEXT = glVariantPointerEXT_Z;
__gshared glbfn_glVariantPointerEXT glVariantPointerEXT_Z = function void (uint a00,uint a01,uint a02,const(void)* a03) {
  glbfn_glVariantPointerEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glVariantPointerEXT_loader (uint a00,uint a01,uint a02,const(void)* a03) {
  *cast(void**)&glVariantPointerEXT_Z = glbindGetProcAddress(`glVariantPointerEXT`);
  if (*cast(void**)&glVariantPointerEXT_Z is null) assert(0, `OpenGL function 'glVariantPointerEXT' not found!`);
  glVariantPointerEXT_Z(a00,a01,a02,a03,);
}
alias glEnableVariantClientStateEXT = glEnableVariantClientStateEXT_Z;
__gshared glbfn_glEnableVariantClientStateEXT glEnableVariantClientStateEXT_Z = function void (uint a00) {
  glbfn_glEnableVariantClientStateEXT_loader(a00,);
};
private void glbfn_glEnableVariantClientStateEXT_loader (uint a00) {
  *cast(void**)&glEnableVariantClientStateEXT_Z = glbindGetProcAddress(`glEnableVariantClientStateEXT`);
  if (*cast(void**)&glEnableVariantClientStateEXT_Z is null) assert(0, `OpenGL function 'glEnableVariantClientStateEXT' not found!`);
  glEnableVariantClientStateEXT_Z(a00,);
}
alias glDisableVariantClientStateEXT = glDisableVariantClientStateEXT_Z;
__gshared glbfn_glDisableVariantClientStateEXT glDisableVariantClientStateEXT_Z = function void (uint a00) {
  glbfn_glDisableVariantClientStateEXT_loader(a00,);
};
private void glbfn_glDisableVariantClientStateEXT_loader (uint a00) {
  *cast(void**)&glDisableVariantClientStateEXT_Z = glbindGetProcAddress(`glDisableVariantClientStateEXT`);
  if (*cast(void**)&glDisableVariantClientStateEXT_Z is null) assert(0, `OpenGL function 'glDisableVariantClientStateEXT' not found!`);
  glDisableVariantClientStateEXT_Z(a00,);
}
alias glBindLightParameterEXT = glBindLightParameterEXT_Z;
__gshared glbfn_glBindLightParameterEXT glBindLightParameterEXT_Z = function uint (uint a00,uint a01) {
  return glbfn_glBindLightParameterEXT_loader(a00,a01,);
};
private uint glbfn_glBindLightParameterEXT_loader (uint a00,uint a01) {
  *cast(void**)&glBindLightParameterEXT_Z = glbindGetProcAddress(`glBindLightParameterEXT`);
  if (*cast(void**)&glBindLightParameterEXT_Z is null) assert(0, `OpenGL function 'glBindLightParameterEXT' not found!`);
  return glBindLightParameterEXT_Z(a00,a01,);
}
alias glBindMaterialParameterEXT = glBindMaterialParameterEXT_Z;
__gshared glbfn_glBindMaterialParameterEXT glBindMaterialParameterEXT_Z = function uint (uint a00,uint a01) {
  return glbfn_glBindMaterialParameterEXT_loader(a00,a01,);
};
private uint glbfn_glBindMaterialParameterEXT_loader (uint a00,uint a01) {
  *cast(void**)&glBindMaterialParameterEXT_Z = glbindGetProcAddress(`glBindMaterialParameterEXT`);
  if (*cast(void**)&glBindMaterialParameterEXT_Z is null) assert(0, `OpenGL function 'glBindMaterialParameterEXT' not found!`);
  return glBindMaterialParameterEXT_Z(a00,a01,);
}
alias glBindTexGenParameterEXT = glBindTexGenParameterEXT_Z;
__gshared glbfn_glBindTexGenParameterEXT glBindTexGenParameterEXT_Z = function uint (uint a00,uint a01,uint a02) {
  return glbfn_glBindTexGenParameterEXT_loader(a00,a01,a02,);
};
private uint glbfn_glBindTexGenParameterEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBindTexGenParameterEXT_Z = glbindGetProcAddress(`glBindTexGenParameterEXT`);
  if (*cast(void**)&glBindTexGenParameterEXT_Z is null) assert(0, `OpenGL function 'glBindTexGenParameterEXT' not found!`);
  return glBindTexGenParameterEXT_Z(a00,a01,a02,);
}
alias glBindTextureUnitParameterEXT = glBindTextureUnitParameterEXT_Z;
__gshared glbfn_glBindTextureUnitParameterEXT glBindTextureUnitParameterEXT_Z = function uint (uint a00,uint a01) {
  return glbfn_glBindTextureUnitParameterEXT_loader(a00,a01,);
};
private uint glbfn_glBindTextureUnitParameterEXT_loader (uint a00,uint a01) {
  *cast(void**)&glBindTextureUnitParameterEXT_Z = glbindGetProcAddress(`glBindTextureUnitParameterEXT`);
  if (*cast(void**)&glBindTextureUnitParameterEXT_Z is null) assert(0, `OpenGL function 'glBindTextureUnitParameterEXT' not found!`);
  return glBindTextureUnitParameterEXT_Z(a00,a01,);
}
alias glBindParameterEXT = glBindParameterEXT_Z;
__gshared glbfn_glBindParameterEXT glBindParameterEXT_Z = function uint (uint a00) {
  return glbfn_glBindParameterEXT_loader(a00,);
};
private uint glbfn_glBindParameterEXT_loader (uint a00) {
  *cast(void**)&glBindParameterEXT_Z = glbindGetProcAddress(`glBindParameterEXT`);
  if (*cast(void**)&glBindParameterEXT_Z is null) assert(0, `OpenGL function 'glBindParameterEXT' not found!`);
  return glBindParameterEXT_Z(a00,);
}
alias glIsVariantEnabledEXT = glIsVariantEnabledEXT_Z;
__gshared glbfn_glIsVariantEnabledEXT glIsVariantEnabledEXT_Z = function ubyte (uint a00,uint a01) {
  return glbfn_glIsVariantEnabledEXT_loader(a00,a01,);
};
private ubyte glbfn_glIsVariantEnabledEXT_loader (uint a00,uint a01) {
  *cast(void**)&glIsVariantEnabledEXT_Z = glbindGetProcAddress(`glIsVariantEnabledEXT`);
  if (*cast(void**)&glIsVariantEnabledEXT_Z is null) assert(0, `OpenGL function 'glIsVariantEnabledEXT' not found!`);
  return glIsVariantEnabledEXT_Z(a00,a01,);
}
alias glGetVariantBooleanvEXT = glGetVariantBooleanvEXT_Z;
__gshared glbfn_glGetVariantBooleanvEXT glGetVariantBooleanvEXT_Z = function void (uint a00,uint a01,ubyte* a02) {
  glbfn_glGetVariantBooleanvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVariantBooleanvEXT_loader (uint a00,uint a01,ubyte* a02) {
  *cast(void**)&glGetVariantBooleanvEXT_Z = glbindGetProcAddress(`glGetVariantBooleanvEXT`);
  if (*cast(void**)&glGetVariantBooleanvEXT_Z is null) assert(0, `OpenGL function 'glGetVariantBooleanvEXT' not found!`);
  glGetVariantBooleanvEXT_Z(a00,a01,a02,);
}
alias glGetVariantIntegervEXT = glGetVariantIntegervEXT_Z;
__gshared glbfn_glGetVariantIntegervEXT glGetVariantIntegervEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVariantIntegervEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVariantIntegervEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVariantIntegervEXT_Z = glbindGetProcAddress(`glGetVariantIntegervEXT`);
  if (*cast(void**)&glGetVariantIntegervEXT_Z is null) assert(0, `OpenGL function 'glGetVariantIntegervEXT' not found!`);
  glGetVariantIntegervEXT_Z(a00,a01,a02,);
}
alias glGetVariantFloatvEXT = glGetVariantFloatvEXT_Z;
__gshared glbfn_glGetVariantFloatvEXT glGetVariantFloatvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetVariantFloatvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVariantFloatvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetVariantFloatvEXT_Z = glbindGetProcAddress(`glGetVariantFloatvEXT`);
  if (*cast(void**)&glGetVariantFloatvEXT_Z is null) assert(0, `OpenGL function 'glGetVariantFloatvEXT' not found!`);
  glGetVariantFloatvEXT_Z(a00,a01,a02,);
}
alias glGetVariantPointervEXT = glGetVariantPointervEXT_Z;
__gshared glbfn_glGetVariantPointervEXT glGetVariantPointervEXT_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetVariantPointervEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVariantPointervEXT_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetVariantPointervEXT_Z = glbindGetProcAddress(`glGetVariantPointervEXT`);
  if (*cast(void**)&glGetVariantPointervEXT_Z is null) assert(0, `OpenGL function 'glGetVariantPointervEXT' not found!`);
  glGetVariantPointervEXT_Z(a00,a01,a02,);
}
alias glGetInvariantBooleanvEXT = glGetInvariantBooleanvEXT_Z;
__gshared glbfn_glGetInvariantBooleanvEXT glGetInvariantBooleanvEXT_Z = function void (uint a00,uint a01,ubyte* a02) {
  glbfn_glGetInvariantBooleanvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetInvariantBooleanvEXT_loader (uint a00,uint a01,ubyte* a02) {
  *cast(void**)&glGetInvariantBooleanvEXT_Z = glbindGetProcAddress(`glGetInvariantBooleanvEXT`);
  if (*cast(void**)&glGetInvariantBooleanvEXT_Z is null) assert(0, `OpenGL function 'glGetInvariantBooleanvEXT' not found!`);
  glGetInvariantBooleanvEXT_Z(a00,a01,a02,);
}
alias glGetInvariantIntegervEXT = glGetInvariantIntegervEXT_Z;
__gshared glbfn_glGetInvariantIntegervEXT glGetInvariantIntegervEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetInvariantIntegervEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetInvariantIntegervEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetInvariantIntegervEXT_Z = glbindGetProcAddress(`glGetInvariantIntegervEXT`);
  if (*cast(void**)&glGetInvariantIntegervEXT_Z is null) assert(0, `OpenGL function 'glGetInvariantIntegervEXT' not found!`);
  glGetInvariantIntegervEXT_Z(a00,a01,a02,);
}
alias glGetInvariantFloatvEXT = glGetInvariantFloatvEXT_Z;
__gshared glbfn_glGetInvariantFloatvEXT glGetInvariantFloatvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetInvariantFloatvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetInvariantFloatvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetInvariantFloatvEXT_Z = glbindGetProcAddress(`glGetInvariantFloatvEXT`);
  if (*cast(void**)&glGetInvariantFloatvEXT_Z is null) assert(0, `OpenGL function 'glGetInvariantFloatvEXT' not found!`);
  glGetInvariantFloatvEXT_Z(a00,a01,a02,);
}
alias glGetLocalConstantBooleanvEXT = glGetLocalConstantBooleanvEXT_Z;
__gshared glbfn_glGetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT_Z = function void (uint a00,uint a01,ubyte* a02) {
  glbfn_glGetLocalConstantBooleanvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetLocalConstantBooleanvEXT_loader (uint a00,uint a01,ubyte* a02) {
  *cast(void**)&glGetLocalConstantBooleanvEXT_Z = glbindGetProcAddress(`glGetLocalConstantBooleanvEXT`);
  if (*cast(void**)&glGetLocalConstantBooleanvEXT_Z is null) assert(0, `OpenGL function 'glGetLocalConstantBooleanvEXT' not found!`);
  glGetLocalConstantBooleanvEXT_Z(a00,a01,a02,);
}
alias glGetLocalConstantIntegervEXT = glGetLocalConstantIntegervEXT_Z;
__gshared glbfn_glGetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetLocalConstantIntegervEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetLocalConstantIntegervEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetLocalConstantIntegervEXT_Z = glbindGetProcAddress(`glGetLocalConstantIntegervEXT`);
  if (*cast(void**)&glGetLocalConstantIntegervEXT_Z is null) assert(0, `OpenGL function 'glGetLocalConstantIntegervEXT' not found!`);
  glGetLocalConstantIntegervEXT_Z(a00,a01,a02,);
}
alias glGetLocalConstantFloatvEXT = glGetLocalConstantFloatvEXT_Z;
__gshared glbfn_glGetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetLocalConstantFloatvEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetLocalConstantFloatvEXT_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetLocalConstantFloatvEXT_Z = glbindGetProcAddress(`glGetLocalConstantFloatvEXT`);
  if (*cast(void**)&glGetLocalConstantFloatvEXT_Z is null) assert(0, `OpenGL function 'glGetLocalConstantFloatvEXT' not found!`);
  glGetLocalConstantFloatvEXT_Z(a00,a01,a02,);
}
alias glVertexWeightfEXT = glVertexWeightfEXT_Z;
__gshared glbfn_glVertexWeightfEXT glVertexWeightfEXT_Z = function void (float a00) {
  glbfn_glVertexWeightfEXT_loader(a00,);
};
private void glbfn_glVertexWeightfEXT_loader (float a00) {
  *cast(void**)&glVertexWeightfEXT_Z = glbindGetProcAddress(`glVertexWeightfEXT`);
  if (*cast(void**)&glVertexWeightfEXT_Z is null) assert(0, `OpenGL function 'glVertexWeightfEXT' not found!`);
  glVertexWeightfEXT_Z(a00,);
}
alias glVertexWeightfvEXT = glVertexWeightfvEXT_Z;
__gshared glbfn_glVertexWeightfvEXT glVertexWeightfvEXT_Z = function void (const(float)* a00) {
  glbfn_glVertexWeightfvEXT_loader(a00,);
};
private void glbfn_glVertexWeightfvEXT_loader (const(float)* a00) {
  *cast(void**)&glVertexWeightfvEXT_Z = glbindGetProcAddress(`glVertexWeightfvEXT`);
  if (*cast(void**)&glVertexWeightfvEXT_Z is null) assert(0, `OpenGL function 'glVertexWeightfvEXT' not found!`);
  glVertexWeightfvEXT_Z(a00,);
}
alias glVertexWeightPointerEXT = glVertexWeightPointerEXT_Z;
__gshared glbfn_glVertexWeightPointerEXT glVertexWeightPointerEXT_Z = function void (int a00,uint a01,int a02,const(void)* a03) {
  glbfn_glVertexWeightPointerEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexWeightPointerEXT_loader (int a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glVertexWeightPointerEXT_Z = glbindGetProcAddress(`glVertexWeightPointerEXT`);
  if (*cast(void**)&glVertexWeightPointerEXT_Z is null) assert(0, `OpenGL function 'glVertexWeightPointerEXT' not found!`);
  glVertexWeightPointerEXT_Z(a00,a01,a02,a03,);
}
alias glFrameTerminatorGREMEDY = glFrameTerminatorGREMEDY_Z;
__gshared glbfn_glFrameTerminatorGREMEDY glFrameTerminatorGREMEDY_Z = function void () {
  glbfn_glFrameTerminatorGREMEDY_loader();
};
private void glbfn_glFrameTerminatorGREMEDY_loader () {
  *cast(void**)&glFrameTerminatorGREMEDY_Z = glbindGetProcAddress(`glFrameTerminatorGREMEDY`);
  if (*cast(void**)&glFrameTerminatorGREMEDY_Z is null) assert(0, `OpenGL function 'glFrameTerminatorGREMEDY' not found!`);
  glFrameTerminatorGREMEDY_Z();
}
alias glStringMarkerGREMEDY = glStringMarkerGREMEDY_Z;
__gshared glbfn_glStringMarkerGREMEDY glStringMarkerGREMEDY_Z = function void (int a00,const(void)* a01) {
  glbfn_glStringMarkerGREMEDY_loader(a00,a01,);
};
private void glbfn_glStringMarkerGREMEDY_loader (int a00,const(void)* a01) {
  *cast(void**)&glStringMarkerGREMEDY_Z = glbindGetProcAddress(`glStringMarkerGREMEDY`);
  if (*cast(void**)&glStringMarkerGREMEDY_Z is null) assert(0, `OpenGL function 'glStringMarkerGREMEDY' not found!`);
  glStringMarkerGREMEDY_Z(a00,a01,);
}
alias glImageTransformParameteriHP = glImageTransformParameteriHP_Z;
__gshared glbfn_glImageTransformParameteriHP glImageTransformParameteriHP_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glImageTransformParameteriHP_loader(a00,a01,a02,);
};
private void glbfn_glImageTransformParameteriHP_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glImageTransformParameteriHP_Z = glbindGetProcAddress(`glImageTransformParameteriHP`);
  if (*cast(void**)&glImageTransformParameteriHP_Z is null) assert(0, `OpenGL function 'glImageTransformParameteriHP' not found!`);
  glImageTransformParameteriHP_Z(a00,a01,a02,);
}
alias glImageTransformParameterfHP = glImageTransformParameterfHP_Z;
__gshared glbfn_glImageTransformParameterfHP glImageTransformParameterfHP_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glImageTransformParameterfHP_loader(a00,a01,a02,);
};
private void glbfn_glImageTransformParameterfHP_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glImageTransformParameterfHP_Z = glbindGetProcAddress(`glImageTransformParameterfHP`);
  if (*cast(void**)&glImageTransformParameterfHP_Z is null) assert(0, `OpenGL function 'glImageTransformParameterfHP' not found!`);
  glImageTransformParameterfHP_Z(a00,a01,a02,);
}
alias glImageTransformParameterivHP = glImageTransformParameterivHP_Z;
__gshared glbfn_glImageTransformParameterivHP glImageTransformParameterivHP_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glImageTransformParameterivHP_loader(a00,a01,a02,);
};
private void glbfn_glImageTransformParameterivHP_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glImageTransformParameterivHP_Z = glbindGetProcAddress(`glImageTransformParameterivHP`);
  if (*cast(void**)&glImageTransformParameterivHP_Z is null) assert(0, `OpenGL function 'glImageTransformParameterivHP' not found!`);
  glImageTransformParameterivHP_Z(a00,a01,a02,);
}
alias glImageTransformParameterfvHP = glImageTransformParameterfvHP_Z;
__gshared glbfn_glImageTransformParameterfvHP glImageTransformParameterfvHP_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glImageTransformParameterfvHP_loader(a00,a01,a02,);
};
private void glbfn_glImageTransformParameterfvHP_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glImageTransformParameterfvHP_Z = glbindGetProcAddress(`glImageTransformParameterfvHP`);
  if (*cast(void**)&glImageTransformParameterfvHP_Z is null) assert(0, `OpenGL function 'glImageTransformParameterfvHP' not found!`);
  glImageTransformParameterfvHP_Z(a00,a01,a02,);
}
alias glGetImageTransformParameterivHP = glGetImageTransformParameterivHP_Z;
__gshared glbfn_glGetImageTransformParameterivHP glGetImageTransformParameterivHP_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetImageTransformParameterivHP_loader(a00,a01,a02,);
};
private void glbfn_glGetImageTransformParameterivHP_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetImageTransformParameterivHP_Z = glbindGetProcAddress(`glGetImageTransformParameterivHP`);
  if (*cast(void**)&glGetImageTransformParameterivHP_Z is null) assert(0, `OpenGL function 'glGetImageTransformParameterivHP' not found!`);
  glGetImageTransformParameterivHP_Z(a00,a01,a02,);
}
alias glGetImageTransformParameterfvHP = glGetImageTransformParameterfvHP_Z;
__gshared glbfn_glGetImageTransformParameterfvHP glGetImageTransformParameterfvHP_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetImageTransformParameterfvHP_loader(a00,a01,a02,);
};
private void glbfn_glGetImageTransformParameterfvHP_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetImageTransformParameterfvHP_Z = glbindGetProcAddress(`glGetImageTransformParameterfvHP`);
  if (*cast(void**)&glGetImageTransformParameterfvHP_Z is null) assert(0, `OpenGL function 'glGetImageTransformParameterfvHP' not found!`);
  glGetImageTransformParameterfvHP_Z(a00,a01,a02,);
}
alias glMultiModeDrawArraysIBM = glMultiModeDrawArraysIBM_Z;
__gshared glbfn_glMultiModeDrawArraysIBM glMultiModeDrawArraysIBM_Z = function void (const(uint)* a00,const(int)* a01,const(int)* a02,int a03,int a04) {
  glbfn_glMultiModeDrawArraysIBM_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiModeDrawArraysIBM_loader (const(uint)* a00,const(int)* a01,const(int)* a02,int a03,int a04) {
  *cast(void**)&glMultiModeDrawArraysIBM_Z = glbindGetProcAddress(`glMultiModeDrawArraysIBM`);
  if (*cast(void**)&glMultiModeDrawArraysIBM_Z is null) assert(0, `OpenGL function 'glMultiModeDrawArraysIBM' not found!`);
  glMultiModeDrawArraysIBM_Z(a00,a01,a02,a03,a04,);
}
alias glMultiModeDrawElementsIBM = glMultiModeDrawElementsIBM_Z;
__gshared glbfn_glMultiModeDrawElementsIBM glMultiModeDrawElementsIBM_Z = function void (const(uint)* a00,const(int)* a01,uint a02,const(void*)* a03,int a04,int a05) {
  glbfn_glMultiModeDrawElementsIBM_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMultiModeDrawElementsIBM_loader (const(uint)* a00,const(int)* a01,uint a02,const(void*)* a03,int a04,int a05) {
  *cast(void**)&glMultiModeDrawElementsIBM_Z = glbindGetProcAddress(`glMultiModeDrawElementsIBM`);
  if (*cast(void**)&glMultiModeDrawElementsIBM_Z is null) assert(0, `OpenGL function 'glMultiModeDrawElementsIBM' not found!`);
  glMultiModeDrawElementsIBM_Z(a00,a01,a02,a03,a04,a05,);
}
alias glFlushStaticDataIBM = glFlushStaticDataIBM_Z;
__gshared glbfn_glFlushStaticDataIBM glFlushStaticDataIBM_Z = function void (uint a00) {
  glbfn_glFlushStaticDataIBM_loader(a00,);
};
private void glbfn_glFlushStaticDataIBM_loader (uint a00) {
  *cast(void**)&glFlushStaticDataIBM_Z = glbindGetProcAddress(`glFlushStaticDataIBM`);
  if (*cast(void**)&glFlushStaticDataIBM_Z is null) assert(0, `OpenGL function 'glFlushStaticDataIBM' not found!`);
  glFlushStaticDataIBM_Z(a00,);
}
alias glColorPointerListIBM = glColorPointerListIBM_Z;
__gshared glbfn_glColorPointerListIBM glColorPointerListIBM_Z = function void (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  glbfn_glColorPointerListIBM_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glColorPointerListIBM_loader (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  *cast(void**)&glColorPointerListIBM_Z = glbindGetProcAddress(`glColorPointerListIBM`);
  if (*cast(void**)&glColorPointerListIBM_Z is null) assert(0, `OpenGL function 'glColorPointerListIBM' not found!`);
  glColorPointerListIBM_Z(a00,a01,a02,a03,a04,);
}
alias glSecondaryColorPointerListIBM = glSecondaryColorPointerListIBM_Z;
__gshared glbfn_glSecondaryColorPointerListIBM glSecondaryColorPointerListIBM_Z = function void (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  glbfn_glSecondaryColorPointerListIBM_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glSecondaryColorPointerListIBM_loader (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  *cast(void**)&glSecondaryColorPointerListIBM_Z = glbindGetProcAddress(`glSecondaryColorPointerListIBM`);
  if (*cast(void**)&glSecondaryColorPointerListIBM_Z is null) assert(0, `OpenGL function 'glSecondaryColorPointerListIBM' not found!`);
  glSecondaryColorPointerListIBM_Z(a00,a01,a02,a03,a04,);
}
alias glEdgeFlagPointerListIBM = glEdgeFlagPointerListIBM_Z;
__gshared glbfn_glEdgeFlagPointerListIBM glEdgeFlagPointerListIBM_Z = function void (int a00,const(ubyte*)* a01,int a02) {
  glbfn_glEdgeFlagPointerListIBM_loader(a00,a01,a02,);
};
private void glbfn_glEdgeFlagPointerListIBM_loader (int a00,const(ubyte*)* a01,int a02) {
  *cast(void**)&glEdgeFlagPointerListIBM_Z = glbindGetProcAddress(`glEdgeFlagPointerListIBM`);
  if (*cast(void**)&glEdgeFlagPointerListIBM_Z is null) assert(0, `OpenGL function 'glEdgeFlagPointerListIBM' not found!`);
  glEdgeFlagPointerListIBM_Z(a00,a01,a02,);
}
alias glFogCoordPointerListIBM = glFogCoordPointerListIBM_Z;
__gshared glbfn_glFogCoordPointerListIBM glFogCoordPointerListIBM_Z = function void (uint a00,int a01,const(void*)* a02,int a03) {
  glbfn_glFogCoordPointerListIBM_loader(a00,a01,a02,a03,);
};
private void glbfn_glFogCoordPointerListIBM_loader (uint a00,int a01,const(void*)* a02,int a03) {
  *cast(void**)&glFogCoordPointerListIBM_Z = glbindGetProcAddress(`glFogCoordPointerListIBM`);
  if (*cast(void**)&glFogCoordPointerListIBM_Z is null) assert(0, `OpenGL function 'glFogCoordPointerListIBM' not found!`);
  glFogCoordPointerListIBM_Z(a00,a01,a02,a03,);
}
alias glIndexPointerListIBM = glIndexPointerListIBM_Z;
__gshared glbfn_glIndexPointerListIBM glIndexPointerListIBM_Z = function void (uint a00,int a01,const(void*)* a02,int a03) {
  glbfn_glIndexPointerListIBM_loader(a00,a01,a02,a03,);
};
private void glbfn_glIndexPointerListIBM_loader (uint a00,int a01,const(void*)* a02,int a03) {
  *cast(void**)&glIndexPointerListIBM_Z = glbindGetProcAddress(`glIndexPointerListIBM`);
  if (*cast(void**)&glIndexPointerListIBM_Z is null) assert(0, `OpenGL function 'glIndexPointerListIBM' not found!`);
  glIndexPointerListIBM_Z(a00,a01,a02,a03,);
}
alias glNormalPointerListIBM = glNormalPointerListIBM_Z;
__gshared glbfn_glNormalPointerListIBM glNormalPointerListIBM_Z = function void (uint a00,int a01,const(void*)* a02,int a03) {
  glbfn_glNormalPointerListIBM_loader(a00,a01,a02,a03,);
};
private void glbfn_glNormalPointerListIBM_loader (uint a00,int a01,const(void*)* a02,int a03) {
  *cast(void**)&glNormalPointerListIBM_Z = glbindGetProcAddress(`glNormalPointerListIBM`);
  if (*cast(void**)&glNormalPointerListIBM_Z is null) assert(0, `OpenGL function 'glNormalPointerListIBM' not found!`);
  glNormalPointerListIBM_Z(a00,a01,a02,a03,);
}
alias glTexCoordPointerListIBM = glTexCoordPointerListIBM_Z;
__gshared glbfn_glTexCoordPointerListIBM glTexCoordPointerListIBM_Z = function void (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  glbfn_glTexCoordPointerListIBM_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTexCoordPointerListIBM_loader (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  *cast(void**)&glTexCoordPointerListIBM_Z = glbindGetProcAddress(`glTexCoordPointerListIBM`);
  if (*cast(void**)&glTexCoordPointerListIBM_Z is null) assert(0, `OpenGL function 'glTexCoordPointerListIBM' not found!`);
  glTexCoordPointerListIBM_Z(a00,a01,a02,a03,a04,);
}
alias glVertexPointerListIBM = glVertexPointerListIBM_Z;
__gshared glbfn_glVertexPointerListIBM glVertexPointerListIBM_Z = function void (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  glbfn_glVertexPointerListIBM_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexPointerListIBM_loader (int a00,uint a01,int a02,const(void*)* a03,int a04) {
  *cast(void**)&glVertexPointerListIBM_Z = glbindGetProcAddress(`glVertexPointerListIBM`);
  if (*cast(void**)&glVertexPointerListIBM_Z is null) assert(0, `OpenGL function 'glVertexPointerListIBM' not found!`);
  glVertexPointerListIBM_Z(a00,a01,a02,a03,a04,);
}
alias glBlendFuncSeparateINGR = glBlendFuncSeparateINGR_Z;
__gshared glbfn_glBlendFuncSeparateINGR glBlendFuncSeparateINGR_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glBlendFuncSeparateINGR_loader(a00,a01,a02,a03,);
};
private void glbfn_glBlendFuncSeparateINGR_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glBlendFuncSeparateINGR_Z = glbindGetProcAddress(`glBlendFuncSeparateINGR`);
  if (*cast(void**)&glBlendFuncSeparateINGR_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateINGR' not found!`);
  glBlendFuncSeparateINGR_Z(a00,a01,a02,a03,);
}
alias glApplyFramebufferAttachmentCMAAINTEL = glApplyFramebufferAttachmentCMAAINTEL_Z;
__gshared glbfn_glApplyFramebufferAttachmentCMAAINTEL glApplyFramebufferAttachmentCMAAINTEL_Z = function void () {
  glbfn_glApplyFramebufferAttachmentCMAAINTEL_loader();
};
private void glbfn_glApplyFramebufferAttachmentCMAAINTEL_loader () {
  *cast(void**)&glApplyFramebufferAttachmentCMAAINTEL_Z = glbindGetProcAddress(`glApplyFramebufferAttachmentCMAAINTEL`);
  if (*cast(void**)&glApplyFramebufferAttachmentCMAAINTEL_Z is null) assert(0, `OpenGL function 'glApplyFramebufferAttachmentCMAAINTEL' not found!`);
  glApplyFramebufferAttachmentCMAAINTEL_Z();
}
alias glSyncTextureINTEL = glSyncTextureINTEL_Z;
__gshared glbfn_glSyncTextureINTEL glSyncTextureINTEL_Z = function void (uint a00) {
  glbfn_glSyncTextureINTEL_loader(a00,);
};
private void glbfn_glSyncTextureINTEL_loader (uint a00) {
  *cast(void**)&glSyncTextureINTEL_Z = glbindGetProcAddress(`glSyncTextureINTEL`);
  if (*cast(void**)&glSyncTextureINTEL_Z is null) assert(0, `OpenGL function 'glSyncTextureINTEL' not found!`);
  glSyncTextureINTEL_Z(a00,);
}
alias glUnmapTexture2DINTEL = glUnmapTexture2DINTEL_Z;
__gshared glbfn_glUnmapTexture2DINTEL glUnmapTexture2DINTEL_Z = function void (uint a00,int a01) {
  glbfn_glUnmapTexture2DINTEL_loader(a00,a01,);
};
private void glbfn_glUnmapTexture2DINTEL_loader (uint a00,int a01) {
  *cast(void**)&glUnmapTexture2DINTEL_Z = glbindGetProcAddress(`glUnmapTexture2DINTEL`);
  if (*cast(void**)&glUnmapTexture2DINTEL_Z is null) assert(0, `OpenGL function 'glUnmapTexture2DINTEL' not found!`);
  glUnmapTexture2DINTEL_Z(a00,a01,);
}
alias glMapTexture2DINTEL = glMapTexture2DINTEL_Z;
__gshared glbfn_glMapTexture2DINTEL glMapTexture2DINTEL_Z = function void* (uint a00,int a01,uint a02,int* a03,uint* a04) {
  return glbfn_glMapTexture2DINTEL_loader(a00,a01,a02,a03,a04,);
};
private void* glbfn_glMapTexture2DINTEL_loader (uint a00,int a01,uint a02,int* a03,uint* a04) {
  *cast(void**)&glMapTexture2DINTEL_Z = glbindGetProcAddress(`glMapTexture2DINTEL`);
  if (*cast(void**)&glMapTexture2DINTEL_Z is null) assert(0, `OpenGL function 'glMapTexture2DINTEL' not found!`);
  return glMapTexture2DINTEL_Z(a00,a01,a02,a03,a04,);
}
alias glVertexPointervINTEL = glVertexPointervINTEL_Z;
__gshared glbfn_glVertexPointervINTEL glVertexPointervINTEL_Z = function void (int a00,uint a01,const(void*)* a02) {
  glbfn_glVertexPointervINTEL_loader(a00,a01,a02,);
};
private void glbfn_glVertexPointervINTEL_loader (int a00,uint a01,const(void*)* a02) {
  *cast(void**)&glVertexPointervINTEL_Z = glbindGetProcAddress(`glVertexPointervINTEL`);
  if (*cast(void**)&glVertexPointervINTEL_Z is null) assert(0, `OpenGL function 'glVertexPointervINTEL' not found!`);
  glVertexPointervINTEL_Z(a00,a01,a02,);
}
alias glNormalPointervINTEL = glNormalPointervINTEL_Z;
__gshared glbfn_glNormalPointervINTEL glNormalPointervINTEL_Z = function void (uint a00,const(void*)* a01) {
  glbfn_glNormalPointervINTEL_loader(a00,a01,);
};
private void glbfn_glNormalPointervINTEL_loader (uint a00,const(void*)* a01) {
  *cast(void**)&glNormalPointervINTEL_Z = glbindGetProcAddress(`glNormalPointervINTEL`);
  if (*cast(void**)&glNormalPointervINTEL_Z is null) assert(0, `OpenGL function 'glNormalPointervINTEL' not found!`);
  glNormalPointervINTEL_Z(a00,a01,);
}
alias glColorPointervINTEL = glColorPointervINTEL_Z;
__gshared glbfn_glColorPointervINTEL glColorPointervINTEL_Z = function void (int a00,uint a01,const(void*)* a02) {
  glbfn_glColorPointervINTEL_loader(a00,a01,a02,);
};
private void glbfn_glColorPointervINTEL_loader (int a00,uint a01,const(void*)* a02) {
  *cast(void**)&glColorPointervINTEL_Z = glbindGetProcAddress(`glColorPointervINTEL`);
  if (*cast(void**)&glColorPointervINTEL_Z is null) assert(0, `OpenGL function 'glColorPointervINTEL' not found!`);
  glColorPointervINTEL_Z(a00,a01,a02,);
}
alias glTexCoordPointervINTEL = glTexCoordPointervINTEL_Z;
__gshared glbfn_glTexCoordPointervINTEL glTexCoordPointervINTEL_Z = function void (int a00,uint a01,const(void*)* a02) {
  glbfn_glTexCoordPointervINTEL_loader(a00,a01,a02,);
};
private void glbfn_glTexCoordPointervINTEL_loader (int a00,uint a01,const(void*)* a02) {
  *cast(void**)&glTexCoordPointervINTEL_Z = glbindGetProcAddress(`glTexCoordPointervINTEL`);
  if (*cast(void**)&glTexCoordPointervINTEL_Z is null) assert(0, `OpenGL function 'glTexCoordPointervINTEL' not found!`);
  glTexCoordPointervINTEL_Z(a00,a01,a02,);
}
alias glBeginPerfQueryINTEL = glBeginPerfQueryINTEL_Z;
__gshared glbfn_glBeginPerfQueryINTEL glBeginPerfQueryINTEL_Z = function void (uint a00) {
  glbfn_glBeginPerfQueryINTEL_loader(a00,);
};
private void glbfn_glBeginPerfQueryINTEL_loader (uint a00) {
  *cast(void**)&glBeginPerfQueryINTEL_Z = glbindGetProcAddress(`glBeginPerfQueryINTEL`);
  if (*cast(void**)&glBeginPerfQueryINTEL_Z is null) assert(0, `OpenGL function 'glBeginPerfQueryINTEL' not found!`);
  glBeginPerfQueryINTEL_Z(a00,);
}
alias glCreatePerfQueryINTEL = glCreatePerfQueryINTEL_Z;
__gshared glbfn_glCreatePerfQueryINTEL glCreatePerfQueryINTEL_Z = function void (uint a00,uint* a01) {
  glbfn_glCreatePerfQueryINTEL_loader(a00,a01,);
};
private void glbfn_glCreatePerfQueryINTEL_loader (uint a00,uint* a01) {
  *cast(void**)&glCreatePerfQueryINTEL_Z = glbindGetProcAddress(`glCreatePerfQueryINTEL`);
  if (*cast(void**)&glCreatePerfQueryINTEL_Z is null) assert(0, `OpenGL function 'glCreatePerfQueryINTEL' not found!`);
  glCreatePerfQueryINTEL_Z(a00,a01,);
}
alias glDeletePerfQueryINTEL = glDeletePerfQueryINTEL_Z;
__gshared glbfn_glDeletePerfQueryINTEL glDeletePerfQueryINTEL_Z = function void (uint a00) {
  glbfn_glDeletePerfQueryINTEL_loader(a00,);
};
private void glbfn_glDeletePerfQueryINTEL_loader (uint a00) {
  *cast(void**)&glDeletePerfQueryINTEL_Z = glbindGetProcAddress(`glDeletePerfQueryINTEL`);
  if (*cast(void**)&glDeletePerfQueryINTEL_Z is null) assert(0, `OpenGL function 'glDeletePerfQueryINTEL' not found!`);
  glDeletePerfQueryINTEL_Z(a00,);
}
alias glEndPerfQueryINTEL = glEndPerfQueryINTEL_Z;
__gshared glbfn_glEndPerfQueryINTEL glEndPerfQueryINTEL_Z = function void (uint a00) {
  glbfn_glEndPerfQueryINTEL_loader(a00,);
};
private void glbfn_glEndPerfQueryINTEL_loader (uint a00) {
  *cast(void**)&glEndPerfQueryINTEL_Z = glbindGetProcAddress(`glEndPerfQueryINTEL`);
  if (*cast(void**)&glEndPerfQueryINTEL_Z is null) assert(0, `OpenGL function 'glEndPerfQueryINTEL' not found!`);
  glEndPerfQueryINTEL_Z(a00,);
}
alias glGetFirstPerfQueryIdINTEL = glGetFirstPerfQueryIdINTEL_Z;
__gshared glbfn_glGetFirstPerfQueryIdINTEL glGetFirstPerfQueryIdINTEL_Z = function void (uint* a00) {
  glbfn_glGetFirstPerfQueryIdINTEL_loader(a00,);
};
private void glbfn_glGetFirstPerfQueryIdINTEL_loader (uint* a00) {
  *cast(void**)&glGetFirstPerfQueryIdINTEL_Z = glbindGetProcAddress(`glGetFirstPerfQueryIdINTEL`);
  if (*cast(void**)&glGetFirstPerfQueryIdINTEL_Z is null) assert(0, `OpenGL function 'glGetFirstPerfQueryIdINTEL' not found!`);
  glGetFirstPerfQueryIdINTEL_Z(a00,);
}
alias glGetNextPerfQueryIdINTEL = glGetNextPerfQueryIdINTEL_Z;
__gshared glbfn_glGetNextPerfQueryIdINTEL glGetNextPerfQueryIdINTEL_Z = function void (uint a00,uint* a01) {
  glbfn_glGetNextPerfQueryIdINTEL_loader(a00,a01,);
};
private void glbfn_glGetNextPerfQueryIdINTEL_loader (uint a00,uint* a01) {
  *cast(void**)&glGetNextPerfQueryIdINTEL_Z = glbindGetProcAddress(`glGetNextPerfQueryIdINTEL`);
  if (*cast(void**)&glGetNextPerfQueryIdINTEL_Z is null) assert(0, `OpenGL function 'glGetNextPerfQueryIdINTEL' not found!`);
  glGetNextPerfQueryIdINTEL_Z(a00,a01,);
}
alias glGetPerfCounterInfoINTEL = glGetPerfCounterInfoINTEL_Z;
__gshared glbfn_glGetPerfCounterInfoINTEL glGetPerfCounterInfoINTEL_Z = function void (uint a00,uint a01,uint a02,char* a03,uint a04,char* a05,uint* a06,uint* a07,uint* a08,uint* a09,ulong* a10) {
  glbfn_glGetPerfCounterInfoINTEL_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glGetPerfCounterInfoINTEL_loader (uint a00,uint a01,uint a02,char* a03,uint a04,char* a05,uint* a06,uint* a07,uint* a08,uint* a09,ulong* a10) {
  *cast(void**)&glGetPerfCounterInfoINTEL_Z = glbindGetProcAddress(`glGetPerfCounterInfoINTEL`);
  if (*cast(void**)&glGetPerfCounterInfoINTEL_Z is null) assert(0, `OpenGL function 'glGetPerfCounterInfoINTEL' not found!`);
  glGetPerfCounterInfoINTEL_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glGetPerfQueryDataINTEL = glGetPerfQueryDataINTEL_Z;
__gshared glbfn_glGetPerfQueryDataINTEL glGetPerfQueryDataINTEL_Z = function void (uint a00,uint a01,int a02,void* a03,uint* a04) {
  glbfn_glGetPerfQueryDataINTEL_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetPerfQueryDataINTEL_loader (uint a00,uint a01,int a02,void* a03,uint* a04) {
  *cast(void**)&glGetPerfQueryDataINTEL_Z = glbindGetProcAddress(`glGetPerfQueryDataINTEL`);
  if (*cast(void**)&glGetPerfQueryDataINTEL_Z is null) assert(0, `OpenGL function 'glGetPerfQueryDataINTEL' not found!`);
  glGetPerfQueryDataINTEL_Z(a00,a01,a02,a03,a04,);
}
alias glGetPerfQueryIdByNameINTEL = glGetPerfQueryIdByNameINTEL_Z;
__gshared glbfn_glGetPerfQueryIdByNameINTEL glGetPerfQueryIdByNameINTEL_Z = function void (char* a00,uint* a01) {
  glbfn_glGetPerfQueryIdByNameINTEL_loader(a00,a01,);
};
private void glbfn_glGetPerfQueryIdByNameINTEL_loader (char* a00,uint* a01) {
  *cast(void**)&glGetPerfQueryIdByNameINTEL_Z = glbindGetProcAddress(`glGetPerfQueryIdByNameINTEL`);
  if (*cast(void**)&glGetPerfQueryIdByNameINTEL_Z is null) assert(0, `OpenGL function 'glGetPerfQueryIdByNameINTEL' not found!`);
  glGetPerfQueryIdByNameINTEL_Z(a00,a01,);
}
alias glGetPerfQueryInfoINTEL = glGetPerfQueryInfoINTEL_Z;
__gshared glbfn_glGetPerfQueryInfoINTEL glGetPerfQueryInfoINTEL_Z = function void (uint a00,uint a01,char* a02,uint* a03,uint* a04,uint* a05,uint* a06) {
  glbfn_glGetPerfQueryInfoINTEL_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetPerfQueryInfoINTEL_loader (uint a00,uint a01,char* a02,uint* a03,uint* a04,uint* a05,uint* a06) {
  *cast(void**)&glGetPerfQueryInfoINTEL_Z = glbindGetProcAddress(`glGetPerfQueryInfoINTEL`);
  if (*cast(void**)&glGetPerfQueryInfoINTEL_Z is null) assert(0, `OpenGL function 'glGetPerfQueryInfoINTEL' not found!`);
  glGetPerfQueryInfoINTEL_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glBlendBarrierKHR = glBlendBarrierKHR_Z;
__gshared glbfn_glBlendBarrierKHR glBlendBarrierKHR_Z = function void () {
  glbfn_glBlendBarrierKHR_loader();
};
private void glbfn_glBlendBarrierKHR_loader () {
  *cast(void**)&glBlendBarrierKHR_Z = glbindGetProcAddress(`glBlendBarrierKHR`);
  if (*cast(void**)&glBlendBarrierKHR_Z is null) assert(0, `OpenGL function 'glBlendBarrierKHR' not found!`);
  glBlendBarrierKHR_Z();
}
alias glDebugMessageControlKHR = glDebugMessageControlKHR_Z;
__gshared glbfn_glDebugMessageControlKHR glDebugMessageControlKHR_Z = function void (uint a00,uint a01,uint a02,int a03,const(uint)* a04,ubyte a05) {
  glbfn_glDebugMessageControlKHR_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDebugMessageControlKHR_loader (uint a00,uint a01,uint a02,int a03,const(uint)* a04,ubyte a05) {
  *cast(void**)&glDebugMessageControlKHR_Z = glbindGetProcAddress(`glDebugMessageControlKHR`);
  if (*cast(void**)&glDebugMessageControlKHR_Z is null) assert(0, `OpenGL function 'glDebugMessageControlKHR' not found!`);
  glDebugMessageControlKHR_Z(a00,a01,a02,a03,a04,a05,);
}
alias glDebugMessageInsertKHR = glDebugMessageInsertKHR_Z;
__gshared glbfn_glDebugMessageInsertKHR glDebugMessageInsertKHR_Z = function void (uint a00,uint a01,uint a02,uint a03,int a04,const(char)* a05) {
  glbfn_glDebugMessageInsertKHR_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDebugMessageInsertKHR_loader (uint a00,uint a01,uint a02,uint a03,int a04,const(char)* a05) {
  *cast(void**)&glDebugMessageInsertKHR_Z = glbindGetProcAddress(`glDebugMessageInsertKHR`);
  if (*cast(void**)&glDebugMessageInsertKHR_Z is null) assert(0, `OpenGL function 'glDebugMessageInsertKHR' not found!`);
  glDebugMessageInsertKHR_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetDebugMessageLogKHR = glGetDebugMessageLogKHR_Z;
__gshared glbfn_glGetDebugMessageLogKHR glGetDebugMessageLogKHR_Z = function uint (uint a00,int a01,uint* a02,uint* a03,uint* a04,uint* a05,int* a06,char* a07) {
  return glbfn_glGetDebugMessageLogKHR_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private uint glbfn_glGetDebugMessageLogKHR_loader (uint a00,int a01,uint* a02,uint* a03,uint* a04,uint* a05,int* a06,char* a07) {
  *cast(void**)&glGetDebugMessageLogKHR_Z = glbindGetProcAddress(`glGetDebugMessageLogKHR`);
  if (*cast(void**)&glGetDebugMessageLogKHR_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLogKHR' not found!`);
  return glGetDebugMessageLogKHR_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glPushDebugGroupKHR = glPushDebugGroupKHR_Z;
__gshared glbfn_glPushDebugGroupKHR glPushDebugGroupKHR_Z = function void (uint a00,uint a01,int a02,const(char)* a03) {
  glbfn_glPushDebugGroupKHR_loader(a00,a01,a02,a03,);
};
private void glbfn_glPushDebugGroupKHR_loader (uint a00,uint a01,int a02,const(char)* a03) {
  *cast(void**)&glPushDebugGroupKHR_Z = glbindGetProcAddress(`glPushDebugGroupKHR`);
  if (*cast(void**)&glPushDebugGroupKHR_Z is null) assert(0, `OpenGL function 'glPushDebugGroupKHR' not found!`);
  glPushDebugGroupKHR_Z(a00,a01,a02,a03,);
}
alias glPopDebugGroupKHR = glPopDebugGroupKHR_Z;
__gshared glbfn_glPopDebugGroupKHR glPopDebugGroupKHR_Z = function void () {
  glbfn_glPopDebugGroupKHR_loader();
};
private void glbfn_glPopDebugGroupKHR_loader () {
  *cast(void**)&glPopDebugGroupKHR_Z = glbindGetProcAddress(`glPopDebugGroupKHR`);
  if (*cast(void**)&glPopDebugGroupKHR_Z is null) assert(0, `OpenGL function 'glPopDebugGroupKHR' not found!`);
  glPopDebugGroupKHR_Z();
}
alias glObjectLabelKHR = glObjectLabelKHR_Z;
__gshared glbfn_glObjectLabelKHR glObjectLabelKHR_Z = function void (uint a00,uint a01,int a02,const(char)* a03) {
  glbfn_glObjectLabelKHR_loader(a00,a01,a02,a03,);
};
private void glbfn_glObjectLabelKHR_loader (uint a00,uint a01,int a02,const(char)* a03) {
  *cast(void**)&glObjectLabelKHR_Z = glbindGetProcAddress(`glObjectLabelKHR`);
  if (*cast(void**)&glObjectLabelKHR_Z is null) assert(0, `OpenGL function 'glObjectLabelKHR' not found!`);
  glObjectLabelKHR_Z(a00,a01,a02,a03,);
}
alias glGetObjectLabelKHR = glGetObjectLabelKHR_Z;
__gshared glbfn_glGetObjectLabelKHR glGetObjectLabelKHR_Z = function void (uint a00,uint a01,int a02,int* a03,char* a04) {
  glbfn_glGetObjectLabelKHR_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetObjectLabelKHR_loader (uint a00,uint a01,int a02,int* a03,char* a04) {
  *cast(void**)&glGetObjectLabelKHR_Z = glbindGetProcAddress(`glGetObjectLabelKHR`);
  if (*cast(void**)&glGetObjectLabelKHR_Z is null) assert(0, `OpenGL function 'glGetObjectLabelKHR' not found!`);
  glGetObjectLabelKHR_Z(a00,a01,a02,a03,a04,);
}
alias glObjectPtrLabelKHR = glObjectPtrLabelKHR_Z;
__gshared glbfn_glObjectPtrLabelKHR glObjectPtrLabelKHR_Z = function void (const(void)* a00,int a01,const(char)* a02) {
  glbfn_glObjectPtrLabelKHR_loader(a00,a01,a02,);
};
private void glbfn_glObjectPtrLabelKHR_loader (const(void)* a00,int a01,const(char)* a02) {
  *cast(void**)&glObjectPtrLabelKHR_Z = glbindGetProcAddress(`glObjectPtrLabelKHR`);
  if (*cast(void**)&glObjectPtrLabelKHR_Z is null) assert(0, `OpenGL function 'glObjectPtrLabelKHR' not found!`);
  glObjectPtrLabelKHR_Z(a00,a01,a02,);
}
alias glGetObjectPtrLabelKHR = glGetObjectPtrLabelKHR_Z;
__gshared glbfn_glGetObjectPtrLabelKHR glGetObjectPtrLabelKHR_Z = function void (const(void)* a00,int a01,int* a02,char* a03) {
  glbfn_glGetObjectPtrLabelKHR_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetObjectPtrLabelKHR_loader (const(void)* a00,int a01,int* a02,char* a03) {
  *cast(void**)&glGetObjectPtrLabelKHR_Z = glbindGetProcAddress(`glGetObjectPtrLabelKHR`);
  if (*cast(void**)&glGetObjectPtrLabelKHR_Z is null) assert(0, `OpenGL function 'glGetObjectPtrLabelKHR' not found!`);
  glGetObjectPtrLabelKHR_Z(a00,a01,a02,a03,);
}
alias glGetPointervKHR = glGetPointervKHR_Z;
__gshared glbfn_glGetPointervKHR glGetPointervKHR_Z = function void (uint a00,void** a01) {
  glbfn_glGetPointervKHR_loader(a00,a01,);
};
private void glbfn_glGetPointervKHR_loader (uint a00,void** a01) {
  *cast(void**)&glGetPointervKHR_Z = glbindGetProcAddress(`glGetPointervKHR`);
  if (*cast(void**)&glGetPointervKHR_Z is null) assert(0, `OpenGL function 'glGetPointervKHR' not found!`);
  glGetPointervKHR_Z(a00,a01,);
}
alias glGetGraphicsResetStatusKHR = glGetGraphicsResetStatusKHR_Z;
__gshared glbfn_glGetGraphicsResetStatusKHR glGetGraphicsResetStatusKHR_Z = function uint () {
  return glbfn_glGetGraphicsResetStatusKHR_loader();
};
private uint glbfn_glGetGraphicsResetStatusKHR_loader () {
  *cast(void**)&glGetGraphicsResetStatusKHR_Z = glbindGetProcAddress(`glGetGraphicsResetStatusKHR`);
  if (*cast(void**)&glGetGraphicsResetStatusKHR_Z is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusKHR' not found!`);
  return glGetGraphicsResetStatusKHR_Z();
}
alias glReadnPixelsKHR = glReadnPixelsKHR_Z;
__gshared glbfn_glReadnPixelsKHR glReadnPixelsKHR_Z = function void (int a00,int a01,int a02,int a03,uint a04,uint a05,int a06,void* a07) {
  glbfn_glReadnPixelsKHR_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glReadnPixelsKHR_loader (int a00,int a01,int a02,int a03,uint a04,uint a05,int a06,void* a07) {
  *cast(void**)&glReadnPixelsKHR_Z = glbindGetProcAddress(`glReadnPixelsKHR`);
  if (*cast(void**)&glReadnPixelsKHR_Z is null) assert(0, `OpenGL function 'glReadnPixelsKHR' not found!`);
  glReadnPixelsKHR_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glGetnUniformfvKHR = glGetnUniformfvKHR_Z;
__gshared glbfn_glGetnUniformfvKHR glGetnUniformfvKHR_Z = function void (uint a00,int a01,int a02,float* a03) {
  glbfn_glGetnUniformfvKHR_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformfvKHR_loader (uint a00,int a01,int a02,float* a03) {
  *cast(void**)&glGetnUniformfvKHR_Z = glbindGetProcAddress(`glGetnUniformfvKHR`);
  if (*cast(void**)&glGetnUniformfvKHR_Z is null) assert(0, `OpenGL function 'glGetnUniformfvKHR' not found!`);
  glGetnUniformfvKHR_Z(a00,a01,a02,a03,);
}
alias glGetnUniformivKHR = glGetnUniformivKHR_Z;
__gshared glbfn_glGetnUniformivKHR glGetnUniformivKHR_Z = function void (uint a00,int a01,int a02,int* a03) {
  glbfn_glGetnUniformivKHR_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformivKHR_loader (uint a00,int a01,int a02,int* a03) {
  *cast(void**)&glGetnUniformivKHR_Z = glbindGetProcAddress(`glGetnUniformivKHR`);
  if (*cast(void**)&glGetnUniformivKHR_Z is null) assert(0, `OpenGL function 'glGetnUniformivKHR' not found!`);
  glGetnUniformivKHR_Z(a00,a01,a02,a03,);
}
alias glGetnUniformuivKHR = glGetnUniformuivKHR_Z;
__gshared glbfn_glGetnUniformuivKHR glGetnUniformuivKHR_Z = function void (uint a00,int a01,int a02,uint* a03) {
  glbfn_glGetnUniformuivKHR_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetnUniformuivKHR_loader (uint a00,int a01,int a02,uint* a03) {
  *cast(void**)&glGetnUniformuivKHR_Z = glbindGetProcAddress(`glGetnUniformuivKHR`);
  if (*cast(void**)&glGetnUniformuivKHR_Z is null) assert(0, `OpenGL function 'glGetnUniformuivKHR' not found!`);
  glGetnUniformuivKHR_Z(a00,a01,a02,a03,);
}
alias glResizeBuffersMESA = glResizeBuffersMESA_Z;
__gshared glbfn_glResizeBuffersMESA glResizeBuffersMESA_Z = function void () {
  glbfn_glResizeBuffersMESA_loader();
};
private void glbfn_glResizeBuffersMESA_loader () {
  *cast(void**)&glResizeBuffersMESA_Z = glbindGetProcAddress(`glResizeBuffersMESA`);
  if (*cast(void**)&glResizeBuffersMESA_Z is null) assert(0, `OpenGL function 'glResizeBuffersMESA' not found!`);
  glResizeBuffersMESA_Z();
}
alias glWindowPos2dMESA = glWindowPos2dMESA_Z;
__gshared glbfn_glWindowPos2dMESA glWindowPos2dMESA_Z = function void (double a00,double a01) {
  glbfn_glWindowPos2dMESA_loader(a00,a01,);
};
private void glbfn_glWindowPos2dMESA_loader (double a00,double a01) {
  *cast(void**)&glWindowPos2dMESA_Z = glbindGetProcAddress(`glWindowPos2dMESA`);
  if (*cast(void**)&glWindowPos2dMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2dMESA' not found!`);
  glWindowPos2dMESA_Z(a00,a01,);
}
alias glWindowPos2dvMESA = glWindowPos2dvMESA_Z;
__gshared glbfn_glWindowPos2dvMESA glWindowPos2dvMESA_Z = function void (const(double)* a00) {
  glbfn_glWindowPos2dvMESA_loader(a00,);
};
private void glbfn_glWindowPos2dvMESA_loader (const(double)* a00) {
  *cast(void**)&glWindowPos2dvMESA_Z = glbindGetProcAddress(`glWindowPos2dvMESA`);
  if (*cast(void**)&glWindowPos2dvMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2dvMESA' not found!`);
  glWindowPos2dvMESA_Z(a00,);
}
alias glWindowPos2fMESA = glWindowPos2fMESA_Z;
__gshared glbfn_glWindowPos2fMESA glWindowPos2fMESA_Z = function void (float a00,float a01) {
  glbfn_glWindowPos2fMESA_loader(a00,a01,);
};
private void glbfn_glWindowPos2fMESA_loader (float a00,float a01) {
  *cast(void**)&glWindowPos2fMESA_Z = glbindGetProcAddress(`glWindowPos2fMESA`);
  if (*cast(void**)&glWindowPos2fMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2fMESA' not found!`);
  glWindowPos2fMESA_Z(a00,a01,);
}
alias glWindowPos2fvMESA = glWindowPos2fvMESA_Z;
__gshared glbfn_glWindowPos2fvMESA glWindowPos2fvMESA_Z = function void (const(float)* a00) {
  glbfn_glWindowPos2fvMESA_loader(a00,);
};
private void glbfn_glWindowPos2fvMESA_loader (const(float)* a00) {
  *cast(void**)&glWindowPos2fvMESA_Z = glbindGetProcAddress(`glWindowPos2fvMESA`);
  if (*cast(void**)&glWindowPos2fvMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2fvMESA' not found!`);
  glWindowPos2fvMESA_Z(a00,);
}
alias glWindowPos2iMESA = glWindowPos2iMESA_Z;
__gshared glbfn_glWindowPos2iMESA glWindowPos2iMESA_Z = function void (int a00,int a01) {
  glbfn_glWindowPos2iMESA_loader(a00,a01,);
};
private void glbfn_glWindowPos2iMESA_loader (int a00,int a01) {
  *cast(void**)&glWindowPos2iMESA_Z = glbindGetProcAddress(`glWindowPos2iMESA`);
  if (*cast(void**)&glWindowPos2iMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2iMESA' not found!`);
  glWindowPos2iMESA_Z(a00,a01,);
}
alias glWindowPos2ivMESA = glWindowPos2ivMESA_Z;
__gshared glbfn_glWindowPos2ivMESA glWindowPos2ivMESA_Z = function void (const(int)* a00) {
  glbfn_glWindowPos2ivMESA_loader(a00,);
};
private void glbfn_glWindowPos2ivMESA_loader (const(int)* a00) {
  *cast(void**)&glWindowPos2ivMESA_Z = glbindGetProcAddress(`glWindowPos2ivMESA`);
  if (*cast(void**)&glWindowPos2ivMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2ivMESA' not found!`);
  glWindowPos2ivMESA_Z(a00,);
}
alias glWindowPos2sMESA = glWindowPos2sMESA_Z;
__gshared glbfn_glWindowPos2sMESA glWindowPos2sMESA_Z = function void (short a00,short a01) {
  glbfn_glWindowPos2sMESA_loader(a00,a01,);
};
private void glbfn_glWindowPos2sMESA_loader (short a00,short a01) {
  *cast(void**)&glWindowPos2sMESA_Z = glbindGetProcAddress(`glWindowPos2sMESA`);
  if (*cast(void**)&glWindowPos2sMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2sMESA' not found!`);
  glWindowPos2sMESA_Z(a00,a01,);
}
alias glWindowPos2svMESA = glWindowPos2svMESA_Z;
__gshared glbfn_glWindowPos2svMESA glWindowPos2svMESA_Z = function void (const(short)* a00) {
  glbfn_glWindowPos2svMESA_loader(a00,);
};
private void glbfn_glWindowPos2svMESA_loader (const(short)* a00) {
  *cast(void**)&glWindowPos2svMESA_Z = glbindGetProcAddress(`glWindowPos2svMESA`);
  if (*cast(void**)&glWindowPos2svMESA_Z is null) assert(0, `OpenGL function 'glWindowPos2svMESA' not found!`);
  glWindowPos2svMESA_Z(a00,);
}
alias glWindowPos3dMESA = glWindowPos3dMESA_Z;
__gshared glbfn_glWindowPos3dMESA glWindowPos3dMESA_Z = function void (double a00,double a01,double a02) {
  glbfn_glWindowPos3dMESA_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3dMESA_loader (double a00,double a01,double a02) {
  *cast(void**)&glWindowPos3dMESA_Z = glbindGetProcAddress(`glWindowPos3dMESA`);
  if (*cast(void**)&glWindowPos3dMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3dMESA' not found!`);
  glWindowPos3dMESA_Z(a00,a01,a02,);
}
alias glWindowPos3dvMESA = glWindowPos3dvMESA_Z;
__gshared glbfn_glWindowPos3dvMESA glWindowPos3dvMESA_Z = function void (const(double)* a00) {
  glbfn_glWindowPos3dvMESA_loader(a00,);
};
private void glbfn_glWindowPos3dvMESA_loader (const(double)* a00) {
  *cast(void**)&glWindowPos3dvMESA_Z = glbindGetProcAddress(`glWindowPos3dvMESA`);
  if (*cast(void**)&glWindowPos3dvMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3dvMESA' not found!`);
  glWindowPos3dvMESA_Z(a00,);
}
alias glWindowPos3fMESA = glWindowPos3fMESA_Z;
__gshared glbfn_glWindowPos3fMESA glWindowPos3fMESA_Z = function void (float a00,float a01,float a02) {
  glbfn_glWindowPos3fMESA_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3fMESA_loader (float a00,float a01,float a02) {
  *cast(void**)&glWindowPos3fMESA_Z = glbindGetProcAddress(`glWindowPos3fMESA`);
  if (*cast(void**)&glWindowPos3fMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3fMESA' not found!`);
  glWindowPos3fMESA_Z(a00,a01,a02,);
}
alias glWindowPos3fvMESA = glWindowPos3fvMESA_Z;
__gshared glbfn_glWindowPos3fvMESA glWindowPos3fvMESA_Z = function void (const(float)* a00) {
  glbfn_glWindowPos3fvMESA_loader(a00,);
};
private void glbfn_glWindowPos3fvMESA_loader (const(float)* a00) {
  *cast(void**)&glWindowPos3fvMESA_Z = glbindGetProcAddress(`glWindowPos3fvMESA`);
  if (*cast(void**)&glWindowPos3fvMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3fvMESA' not found!`);
  glWindowPos3fvMESA_Z(a00,);
}
alias glWindowPos3iMESA = glWindowPos3iMESA_Z;
__gshared glbfn_glWindowPos3iMESA glWindowPos3iMESA_Z = function void (int a00,int a01,int a02) {
  glbfn_glWindowPos3iMESA_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3iMESA_loader (int a00,int a01,int a02) {
  *cast(void**)&glWindowPos3iMESA_Z = glbindGetProcAddress(`glWindowPos3iMESA`);
  if (*cast(void**)&glWindowPos3iMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3iMESA' not found!`);
  glWindowPos3iMESA_Z(a00,a01,a02,);
}
alias glWindowPos3ivMESA = glWindowPos3ivMESA_Z;
__gshared glbfn_glWindowPos3ivMESA glWindowPos3ivMESA_Z = function void (const(int)* a00) {
  glbfn_glWindowPos3ivMESA_loader(a00,);
};
private void glbfn_glWindowPos3ivMESA_loader (const(int)* a00) {
  *cast(void**)&glWindowPos3ivMESA_Z = glbindGetProcAddress(`glWindowPos3ivMESA`);
  if (*cast(void**)&glWindowPos3ivMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3ivMESA' not found!`);
  glWindowPos3ivMESA_Z(a00,);
}
alias glWindowPos3sMESA = glWindowPos3sMESA_Z;
__gshared glbfn_glWindowPos3sMESA glWindowPos3sMESA_Z = function void (short a00,short a01,short a02) {
  glbfn_glWindowPos3sMESA_loader(a00,a01,a02,);
};
private void glbfn_glWindowPos3sMESA_loader (short a00,short a01,short a02) {
  *cast(void**)&glWindowPos3sMESA_Z = glbindGetProcAddress(`glWindowPos3sMESA`);
  if (*cast(void**)&glWindowPos3sMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3sMESA' not found!`);
  glWindowPos3sMESA_Z(a00,a01,a02,);
}
alias glWindowPos3svMESA = glWindowPos3svMESA_Z;
__gshared glbfn_glWindowPos3svMESA glWindowPos3svMESA_Z = function void (const(short)* a00) {
  glbfn_glWindowPos3svMESA_loader(a00,);
};
private void glbfn_glWindowPos3svMESA_loader (const(short)* a00) {
  *cast(void**)&glWindowPos3svMESA_Z = glbindGetProcAddress(`glWindowPos3svMESA`);
  if (*cast(void**)&glWindowPos3svMESA_Z is null) assert(0, `OpenGL function 'glWindowPos3svMESA' not found!`);
  glWindowPos3svMESA_Z(a00,);
}
alias glWindowPos4dMESA = glWindowPos4dMESA_Z;
__gshared glbfn_glWindowPos4dMESA glWindowPos4dMESA_Z = function void (double a00,double a01,double a02,double a03) {
  glbfn_glWindowPos4dMESA_loader(a00,a01,a02,a03,);
};
private void glbfn_glWindowPos4dMESA_loader (double a00,double a01,double a02,double a03) {
  *cast(void**)&glWindowPos4dMESA_Z = glbindGetProcAddress(`glWindowPos4dMESA`);
  if (*cast(void**)&glWindowPos4dMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4dMESA' not found!`);
  glWindowPos4dMESA_Z(a00,a01,a02,a03,);
}
alias glWindowPos4dvMESA = glWindowPos4dvMESA_Z;
__gshared glbfn_glWindowPos4dvMESA glWindowPos4dvMESA_Z = function void (const(double)* a00) {
  glbfn_glWindowPos4dvMESA_loader(a00,);
};
private void glbfn_glWindowPos4dvMESA_loader (const(double)* a00) {
  *cast(void**)&glWindowPos4dvMESA_Z = glbindGetProcAddress(`glWindowPos4dvMESA`);
  if (*cast(void**)&glWindowPos4dvMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4dvMESA' not found!`);
  glWindowPos4dvMESA_Z(a00,);
}
alias glWindowPos4fMESA = glWindowPos4fMESA_Z;
__gshared glbfn_glWindowPos4fMESA glWindowPos4fMESA_Z = function void (float a00,float a01,float a02,float a03) {
  glbfn_glWindowPos4fMESA_loader(a00,a01,a02,a03,);
};
private void glbfn_glWindowPos4fMESA_loader (float a00,float a01,float a02,float a03) {
  *cast(void**)&glWindowPos4fMESA_Z = glbindGetProcAddress(`glWindowPos4fMESA`);
  if (*cast(void**)&glWindowPos4fMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4fMESA' not found!`);
  glWindowPos4fMESA_Z(a00,a01,a02,a03,);
}
alias glWindowPos4fvMESA = glWindowPos4fvMESA_Z;
__gshared glbfn_glWindowPos4fvMESA glWindowPos4fvMESA_Z = function void (const(float)* a00) {
  glbfn_glWindowPos4fvMESA_loader(a00,);
};
private void glbfn_glWindowPos4fvMESA_loader (const(float)* a00) {
  *cast(void**)&glWindowPos4fvMESA_Z = glbindGetProcAddress(`glWindowPos4fvMESA`);
  if (*cast(void**)&glWindowPos4fvMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4fvMESA' not found!`);
  glWindowPos4fvMESA_Z(a00,);
}
alias glWindowPos4iMESA = glWindowPos4iMESA_Z;
__gshared glbfn_glWindowPos4iMESA glWindowPos4iMESA_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glWindowPos4iMESA_loader(a00,a01,a02,a03,);
};
private void glbfn_glWindowPos4iMESA_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glWindowPos4iMESA_Z = glbindGetProcAddress(`glWindowPos4iMESA`);
  if (*cast(void**)&glWindowPos4iMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4iMESA' not found!`);
  glWindowPos4iMESA_Z(a00,a01,a02,a03,);
}
alias glWindowPos4ivMESA = glWindowPos4ivMESA_Z;
__gshared glbfn_glWindowPos4ivMESA glWindowPos4ivMESA_Z = function void (const(int)* a00) {
  glbfn_glWindowPos4ivMESA_loader(a00,);
};
private void glbfn_glWindowPos4ivMESA_loader (const(int)* a00) {
  *cast(void**)&glWindowPos4ivMESA_Z = glbindGetProcAddress(`glWindowPos4ivMESA`);
  if (*cast(void**)&glWindowPos4ivMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4ivMESA' not found!`);
  glWindowPos4ivMESA_Z(a00,);
}
alias glWindowPos4sMESA = glWindowPos4sMESA_Z;
__gshared glbfn_glWindowPos4sMESA glWindowPos4sMESA_Z = function void (short a00,short a01,short a02,short a03) {
  glbfn_glWindowPos4sMESA_loader(a00,a01,a02,a03,);
};
private void glbfn_glWindowPos4sMESA_loader (short a00,short a01,short a02,short a03) {
  *cast(void**)&glWindowPos4sMESA_Z = glbindGetProcAddress(`glWindowPos4sMESA`);
  if (*cast(void**)&glWindowPos4sMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4sMESA' not found!`);
  glWindowPos4sMESA_Z(a00,a01,a02,a03,);
}
alias glWindowPos4svMESA = glWindowPos4svMESA_Z;
__gshared glbfn_glWindowPos4svMESA glWindowPos4svMESA_Z = function void (const(short)* a00) {
  glbfn_glWindowPos4svMESA_loader(a00,);
};
private void glbfn_glWindowPos4svMESA_loader (const(short)* a00) {
  *cast(void**)&glWindowPos4svMESA_Z = glbindGetProcAddress(`glWindowPos4svMESA`);
  if (*cast(void**)&glWindowPos4svMESA_Z is null) assert(0, `OpenGL function 'glWindowPos4svMESA' not found!`);
  glWindowPos4svMESA_Z(a00,);
}
alias glBeginConditionalRenderNVX = glBeginConditionalRenderNVX_Z;
__gshared glbfn_glBeginConditionalRenderNVX glBeginConditionalRenderNVX_Z = function void (uint a00) {
  glbfn_glBeginConditionalRenderNVX_loader(a00,);
};
private void glbfn_glBeginConditionalRenderNVX_loader (uint a00) {
  *cast(void**)&glBeginConditionalRenderNVX_Z = glbindGetProcAddress(`glBeginConditionalRenderNVX`);
  if (*cast(void**)&glBeginConditionalRenderNVX_Z is null) assert(0, `OpenGL function 'glBeginConditionalRenderNVX' not found!`);
  glBeginConditionalRenderNVX_Z(a00,);
}
alias glEndConditionalRenderNVX = glEndConditionalRenderNVX_Z;
__gshared glbfn_glEndConditionalRenderNVX glEndConditionalRenderNVX_Z = function void () {
  glbfn_glEndConditionalRenderNVX_loader();
};
private void glbfn_glEndConditionalRenderNVX_loader () {
  *cast(void**)&glEndConditionalRenderNVX_Z = glbindGetProcAddress(`glEndConditionalRenderNVX`);
  if (*cast(void**)&glEndConditionalRenderNVX_Z is null) assert(0, `OpenGL function 'glEndConditionalRenderNVX' not found!`);
  glEndConditionalRenderNVX_Z();
}
alias glMultiDrawArraysIndirectBindlessNV = glMultiDrawArraysIndirectBindlessNV_Z;
__gshared glbfn_glMultiDrawArraysIndirectBindlessNV glMultiDrawArraysIndirectBindlessNV_Z = function void (uint a00,const(void)* a01,int a02,int a03,int a04) {
  glbfn_glMultiDrawArraysIndirectBindlessNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiDrawArraysIndirectBindlessNV_loader (uint a00,const(void)* a01,int a02,int a03,int a04) {
  *cast(void**)&glMultiDrawArraysIndirectBindlessNV_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectBindlessNV`);
  if (*cast(void**)&glMultiDrawArraysIndirectBindlessNV_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessNV' not found!`);
  glMultiDrawArraysIndirectBindlessNV_Z(a00,a01,a02,a03,a04,);
}
alias glMultiDrawElementsIndirectBindlessNV = glMultiDrawElementsIndirectBindlessNV_Z;
__gshared glbfn_glMultiDrawElementsIndirectBindlessNV glMultiDrawElementsIndirectBindlessNV_Z = function void (uint a00,uint a01,const(void)* a02,int a03,int a04,int a05) {
  glbfn_glMultiDrawElementsIndirectBindlessNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMultiDrawElementsIndirectBindlessNV_loader (uint a00,uint a01,const(void)* a02,int a03,int a04,int a05) {
  *cast(void**)&glMultiDrawElementsIndirectBindlessNV_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectBindlessNV`);
  if (*cast(void**)&glMultiDrawElementsIndirectBindlessNV_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessNV' not found!`);
  glMultiDrawElementsIndirectBindlessNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glMultiDrawArraysIndirectBindlessCountNV = glMultiDrawArraysIndirectBindlessCountNV_Z;
__gshared glbfn_glMultiDrawArraysIndirectBindlessCountNV glMultiDrawArraysIndirectBindlessCountNV_Z = function void (uint a00,const(void)* a01,int a02,int a03,int a04,int a05) {
  glbfn_glMultiDrawArraysIndirectBindlessCountNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMultiDrawArraysIndirectBindlessCountNV_loader (uint a00,const(void)* a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glMultiDrawArraysIndirectBindlessCountNV_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectBindlessCountNV`);
  if (*cast(void**)&glMultiDrawArraysIndirectBindlessCountNV_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessCountNV' not found!`);
  glMultiDrawArraysIndirectBindlessCountNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glMultiDrawElementsIndirectBindlessCountNV = glMultiDrawElementsIndirectBindlessCountNV_Z;
__gshared glbfn_glMultiDrawElementsIndirectBindlessCountNV glMultiDrawElementsIndirectBindlessCountNV_Z = function void (uint a00,uint a01,const(void)* a02,int a03,int a04,int a05,int a06) {
  glbfn_glMultiDrawElementsIndirectBindlessCountNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glMultiDrawElementsIndirectBindlessCountNV_loader (uint a00,uint a01,const(void)* a02,int a03,int a04,int a05,int a06) {
  *cast(void**)&glMultiDrawElementsIndirectBindlessCountNV_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectBindlessCountNV`);
  if (*cast(void**)&glMultiDrawElementsIndirectBindlessCountNV_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessCountNV' not found!`);
  glMultiDrawElementsIndirectBindlessCountNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetTextureHandleNV = glGetTextureHandleNV_Z;
__gshared glbfn_glGetTextureHandleNV glGetTextureHandleNV_Z = function ulong (uint a00) {
  return glbfn_glGetTextureHandleNV_loader(a00,);
};
private ulong glbfn_glGetTextureHandleNV_loader (uint a00) {
  *cast(void**)&glGetTextureHandleNV_Z = glbindGetProcAddress(`glGetTextureHandleNV`);
  if (*cast(void**)&glGetTextureHandleNV_Z is null) assert(0, `OpenGL function 'glGetTextureHandleNV' not found!`);
  return glGetTextureHandleNV_Z(a00,);
}
alias glGetTextureSamplerHandleNV = glGetTextureSamplerHandleNV_Z;
__gshared glbfn_glGetTextureSamplerHandleNV glGetTextureSamplerHandleNV_Z = function ulong (uint a00,uint a01) {
  return glbfn_glGetTextureSamplerHandleNV_loader(a00,a01,);
};
private ulong glbfn_glGetTextureSamplerHandleNV_loader (uint a00,uint a01) {
  *cast(void**)&glGetTextureSamplerHandleNV_Z = glbindGetProcAddress(`glGetTextureSamplerHandleNV`);
  if (*cast(void**)&glGetTextureSamplerHandleNV_Z is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleNV' not found!`);
  return glGetTextureSamplerHandleNV_Z(a00,a01,);
}
alias glMakeTextureHandleResidentNV = glMakeTextureHandleResidentNV_Z;
__gshared glbfn_glMakeTextureHandleResidentNV glMakeTextureHandleResidentNV_Z = function void (ulong a00) {
  glbfn_glMakeTextureHandleResidentNV_loader(a00,);
};
private void glbfn_glMakeTextureHandleResidentNV_loader (ulong a00) {
  *cast(void**)&glMakeTextureHandleResidentNV_Z = glbindGetProcAddress(`glMakeTextureHandleResidentNV`);
  if (*cast(void**)&glMakeTextureHandleResidentNV_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentNV' not found!`);
  glMakeTextureHandleResidentNV_Z(a00,);
}
alias glMakeTextureHandleNonResidentNV = glMakeTextureHandleNonResidentNV_Z;
__gshared glbfn_glMakeTextureHandleNonResidentNV glMakeTextureHandleNonResidentNV_Z = function void (ulong a00) {
  glbfn_glMakeTextureHandleNonResidentNV_loader(a00,);
};
private void glbfn_glMakeTextureHandleNonResidentNV_loader (ulong a00) {
  *cast(void**)&glMakeTextureHandleNonResidentNV_Z = glbindGetProcAddress(`glMakeTextureHandleNonResidentNV`);
  if (*cast(void**)&glMakeTextureHandleNonResidentNV_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentNV' not found!`);
  glMakeTextureHandleNonResidentNV_Z(a00,);
}
alias glGetImageHandleNV = glGetImageHandleNV_Z;
__gshared glbfn_glGetImageHandleNV glGetImageHandleNV_Z = function ulong (uint a00,int a01,ubyte a02,int a03,uint a04) {
  return glbfn_glGetImageHandleNV_loader(a00,a01,a02,a03,a04,);
};
private ulong glbfn_glGetImageHandleNV_loader (uint a00,int a01,ubyte a02,int a03,uint a04) {
  *cast(void**)&glGetImageHandleNV_Z = glbindGetProcAddress(`glGetImageHandleNV`);
  if (*cast(void**)&glGetImageHandleNV_Z is null) assert(0, `OpenGL function 'glGetImageHandleNV' not found!`);
  return glGetImageHandleNV_Z(a00,a01,a02,a03,a04,);
}
alias glMakeImageHandleResidentNV = glMakeImageHandleResidentNV_Z;
__gshared glbfn_glMakeImageHandleResidentNV glMakeImageHandleResidentNV_Z = function void (ulong a00,uint a01) {
  glbfn_glMakeImageHandleResidentNV_loader(a00,a01,);
};
private void glbfn_glMakeImageHandleResidentNV_loader (ulong a00,uint a01) {
  *cast(void**)&glMakeImageHandleResidentNV_Z = glbindGetProcAddress(`glMakeImageHandleResidentNV`);
  if (*cast(void**)&glMakeImageHandleResidentNV_Z is null) assert(0, `OpenGL function 'glMakeImageHandleResidentNV' not found!`);
  glMakeImageHandleResidentNV_Z(a00,a01,);
}
alias glMakeImageHandleNonResidentNV = glMakeImageHandleNonResidentNV_Z;
__gshared glbfn_glMakeImageHandleNonResidentNV glMakeImageHandleNonResidentNV_Z = function void (ulong a00) {
  glbfn_glMakeImageHandleNonResidentNV_loader(a00,);
};
private void glbfn_glMakeImageHandleNonResidentNV_loader (ulong a00) {
  *cast(void**)&glMakeImageHandleNonResidentNV_Z = glbindGetProcAddress(`glMakeImageHandleNonResidentNV`);
  if (*cast(void**)&glMakeImageHandleNonResidentNV_Z is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentNV' not found!`);
  glMakeImageHandleNonResidentNV_Z(a00,);
}
alias glUniformHandleui64NV = glUniformHandleui64NV_Z;
__gshared glbfn_glUniformHandleui64NV glUniformHandleui64NV_Z = function void (int a00,ulong a01) {
  glbfn_glUniformHandleui64NV_loader(a00,a01,);
};
private void glbfn_glUniformHandleui64NV_loader (int a00,ulong a01) {
  *cast(void**)&glUniformHandleui64NV_Z = glbindGetProcAddress(`glUniformHandleui64NV`);
  if (*cast(void**)&glUniformHandleui64NV_Z is null) assert(0, `OpenGL function 'glUniformHandleui64NV' not found!`);
  glUniformHandleui64NV_Z(a00,a01,);
}
alias glUniformHandleui64vNV = glUniformHandleui64vNV_Z;
__gshared glbfn_glUniformHandleui64vNV glUniformHandleui64vNV_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniformHandleui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniformHandleui64vNV_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniformHandleui64vNV_Z = glbindGetProcAddress(`glUniformHandleui64vNV`);
  if (*cast(void**)&glUniformHandleui64vNV_Z is null) assert(0, `OpenGL function 'glUniformHandleui64vNV' not found!`);
  glUniformHandleui64vNV_Z(a00,a01,a02,);
}
alias glProgramUniformHandleui64NV = glProgramUniformHandleui64NV_Z;
__gshared glbfn_glProgramUniformHandleui64NV glProgramUniformHandleui64NV_Z = function void (uint a00,int a01,ulong a02) {
  glbfn_glProgramUniformHandleui64NV_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniformHandleui64NV_loader (uint a00,int a01,ulong a02) {
  *cast(void**)&glProgramUniformHandleui64NV_Z = glbindGetProcAddress(`glProgramUniformHandleui64NV`);
  if (*cast(void**)&glProgramUniformHandleui64NV_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64NV' not found!`);
  glProgramUniformHandleui64NV_Z(a00,a01,a02,);
}
alias glProgramUniformHandleui64vNV = glProgramUniformHandleui64vNV_Z;
__gshared glbfn_glProgramUniformHandleui64vNV glProgramUniformHandleui64vNV_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniformHandleui64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniformHandleui64vNV_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniformHandleui64vNV_Z = glbindGetProcAddress(`glProgramUniformHandleui64vNV`);
  if (*cast(void**)&glProgramUniformHandleui64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vNV' not found!`);
  glProgramUniformHandleui64vNV_Z(a00,a01,a02,a03,);
}
alias glIsTextureHandleResidentNV = glIsTextureHandleResidentNV_Z;
__gshared glbfn_glIsTextureHandleResidentNV glIsTextureHandleResidentNV_Z = function ubyte (ulong a00) {
  return glbfn_glIsTextureHandleResidentNV_loader(a00,);
};
private ubyte glbfn_glIsTextureHandleResidentNV_loader (ulong a00) {
  *cast(void**)&glIsTextureHandleResidentNV_Z = glbindGetProcAddress(`glIsTextureHandleResidentNV`);
  if (*cast(void**)&glIsTextureHandleResidentNV_Z is null) assert(0, `OpenGL function 'glIsTextureHandleResidentNV' not found!`);
  return glIsTextureHandleResidentNV_Z(a00,);
}
alias glIsImageHandleResidentNV = glIsImageHandleResidentNV_Z;
__gshared glbfn_glIsImageHandleResidentNV glIsImageHandleResidentNV_Z = function ubyte (ulong a00) {
  return glbfn_glIsImageHandleResidentNV_loader(a00,);
};
private ubyte glbfn_glIsImageHandleResidentNV_loader (ulong a00) {
  *cast(void**)&glIsImageHandleResidentNV_Z = glbindGetProcAddress(`glIsImageHandleResidentNV`);
  if (*cast(void**)&glIsImageHandleResidentNV_Z is null) assert(0, `OpenGL function 'glIsImageHandleResidentNV' not found!`);
  return glIsImageHandleResidentNV_Z(a00,);
}
alias glBlendParameteriNV = glBlendParameteriNV_Z;
__gshared glbfn_glBlendParameteriNV glBlendParameteriNV_Z = function void (uint a00,int a01) {
  glbfn_glBlendParameteriNV_loader(a00,a01,);
};
private void glbfn_glBlendParameteriNV_loader (uint a00,int a01) {
  *cast(void**)&glBlendParameteriNV_Z = glbindGetProcAddress(`glBlendParameteriNV`);
  if (*cast(void**)&glBlendParameteriNV_Z is null) assert(0, `OpenGL function 'glBlendParameteriNV' not found!`);
  glBlendParameteriNV_Z(a00,a01,);
}
alias glBlendBarrierNV = glBlendBarrierNV_Z;
__gshared glbfn_glBlendBarrierNV glBlendBarrierNV_Z = function void () {
  glbfn_glBlendBarrierNV_loader();
};
private void glbfn_glBlendBarrierNV_loader () {
  *cast(void**)&glBlendBarrierNV_Z = glbindGetProcAddress(`glBlendBarrierNV`);
  if (*cast(void**)&glBlendBarrierNV_Z is null) assert(0, `OpenGL function 'glBlendBarrierNV' not found!`);
  glBlendBarrierNV_Z();
}
alias glCreateStatesNV = glCreateStatesNV_Z;
__gshared glbfn_glCreateStatesNV glCreateStatesNV_Z = function void (int a00,uint* a01) {
  glbfn_glCreateStatesNV_loader(a00,a01,);
};
private void glbfn_glCreateStatesNV_loader (int a00,uint* a01) {
  *cast(void**)&glCreateStatesNV_Z = glbindGetProcAddress(`glCreateStatesNV`);
  if (*cast(void**)&glCreateStatesNV_Z is null) assert(0, `OpenGL function 'glCreateStatesNV' not found!`);
  glCreateStatesNV_Z(a00,a01,);
}
alias glDeleteStatesNV = glDeleteStatesNV_Z;
__gshared glbfn_glDeleteStatesNV glDeleteStatesNV_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteStatesNV_loader(a00,a01,);
};
private void glbfn_glDeleteStatesNV_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteStatesNV_Z = glbindGetProcAddress(`glDeleteStatesNV`);
  if (*cast(void**)&glDeleteStatesNV_Z is null) assert(0, `OpenGL function 'glDeleteStatesNV' not found!`);
  glDeleteStatesNV_Z(a00,a01,);
}
alias glIsStateNV = glIsStateNV_Z;
__gshared glbfn_glIsStateNV glIsStateNV_Z = function ubyte (uint a00) {
  return glbfn_glIsStateNV_loader(a00,);
};
private ubyte glbfn_glIsStateNV_loader (uint a00) {
  *cast(void**)&glIsStateNV_Z = glbindGetProcAddress(`glIsStateNV`);
  if (*cast(void**)&glIsStateNV_Z is null) assert(0, `OpenGL function 'glIsStateNV' not found!`);
  return glIsStateNV_Z(a00,);
}
alias glStateCaptureNV = glStateCaptureNV_Z;
__gshared glbfn_glStateCaptureNV glStateCaptureNV_Z = function void (uint a00,uint a01) {
  glbfn_glStateCaptureNV_loader(a00,a01,);
};
private void glbfn_glStateCaptureNV_loader (uint a00,uint a01) {
  *cast(void**)&glStateCaptureNV_Z = glbindGetProcAddress(`glStateCaptureNV`);
  if (*cast(void**)&glStateCaptureNV_Z is null) assert(0, `OpenGL function 'glStateCaptureNV' not found!`);
  glStateCaptureNV_Z(a00,a01,);
}
alias glGetCommandHeaderNV = glGetCommandHeaderNV_Z;
__gshared glbfn_glGetCommandHeaderNV glGetCommandHeaderNV_Z = function uint (uint a00,uint a01) {
  return glbfn_glGetCommandHeaderNV_loader(a00,a01,);
};
private uint glbfn_glGetCommandHeaderNV_loader (uint a00,uint a01) {
  *cast(void**)&glGetCommandHeaderNV_Z = glbindGetProcAddress(`glGetCommandHeaderNV`);
  if (*cast(void**)&glGetCommandHeaderNV_Z is null) assert(0, `OpenGL function 'glGetCommandHeaderNV' not found!`);
  return glGetCommandHeaderNV_Z(a00,a01,);
}
alias glGetStageIndexNV = glGetStageIndexNV_Z;
__gshared glbfn_glGetStageIndexNV glGetStageIndexNV_Z = function ushort (uint a00) {
  return glbfn_glGetStageIndexNV_loader(a00,);
};
private ushort glbfn_glGetStageIndexNV_loader (uint a00) {
  *cast(void**)&glGetStageIndexNV_Z = glbindGetProcAddress(`glGetStageIndexNV`);
  if (*cast(void**)&glGetStageIndexNV_Z is null) assert(0, `OpenGL function 'glGetStageIndexNV' not found!`);
  return glGetStageIndexNV_Z(a00,);
}
alias glDrawCommandsNV = glDrawCommandsNV_Z;
__gshared glbfn_glDrawCommandsNV glDrawCommandsNV_Z = function void (uint a00,uint a01,const(int)* a02,const(int)* a03,uint a04) {
  glbfn_glDrawCommandsNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawCommandsNV_loader (uint a00,uint a01,const(int)* a02,const(int)* a03,uint a04) {
  *cast(void**)&glDrawCommandsNV_Z = glbindGetProcAddress(`glDrawCommandsNV`);
  if (*cast(void**)&glDrawCommandsNV_Z is null) assert(0, `OpenGL function 'glDrawCommandsNV' not found!`);
  glDrawCommandsNV_Z(a00,a01,a02,a03,a04,);
}
alias glDrawCommandsAddressNV = glDrawCommandsAddressNV_Z;
__gshared glbfn_glDrawCommandsAddressNV glDrawCommandsAddressNV_Z = function void (uint a00,const(ulong)* a01,const(int)* a02,uint a03) {
  glbfn_glDrawCommandsAddressNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawCommandsAddressNV_loader (uint a00,const(ulong)* a01,const(int)* a02,uint a03) {
  *cast(void**)&glDrawCommandsAddressNV_Z = glbindGetProcAddress(`glDrawCommandsAddressNV`);
  if (*cast(void**)&glDrawCommandsAddressNV_Z is null) assert(0, `OpenGL function 'glDrawCommandsAddressNV' not found!`);
  glDrawCommandsAddressNV_Z(a00,a01,a02,a03,);
}
alias glDrawCommandsStatesNV = glDrawCommandsStatesNV_Z;
__gshared glbfn_glDrawCommandsStatesNV glDrawCommandsStatesNV_Z = function void (uint a00,const(int)* a01,const(int)* a02,const(uint)* a03,const(uint)* a04,uint a05) {
  glbfn_glDrawCommandsStatesNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glDrawCommandsStatesNV_loader (uint a00,const(int)* a01,const(int)* a02,const(uint)* a03,const(uint)* a04,uint a05) {
  *cast(void**)&glDrawCommandsStatesNV_Z = glbindGetProcAddress(`glDrawCommandsStatesNV`);
  if (*cast(void**)&glDrawCommandsStatesNV_Z is null) assert(0, `OpenGL function 'glDrawCommandsStatesNV' not found!`);
  glDrawCommandsStatesNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glDrawCommandsStatesAddressNV = glDrawCommandsStatesAddressNV_Z;
__gshared glbfn_glDrawCommandsStatesAddressNV glDrawCommandsStatesAddressNV_Z = function void (const(ulong)* a00,const(int)* a01,const(uint)* a02,const(uint)* a03,uint a04) {
  glbfn_glDrawCommandsStatesAddressNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glDrawCommandsStatesAddressNV_loader (const(ulong)* a00,const(int)* a01,const(uint)* a02,const(uint)* a03,uint a04) {
  *cast(void**)&glDrawCommandsStatesAddressNV_Z = glbindGetProcAddress(`glDrawCommandsStatesAddressNV`);
  if (*cast(void**)&glDrawCommandsStatesAddressNV_Z is null) assert(0, `OpenGL function 'glDrawCommandsStatesAddressNV' not found!`);
  glDrawCommandsStatesAddressNV_Z(a00,a01,a02,a03,a04,);
}
alias glCreateCommandListsNV = glCreateCommandListsNV_Z;
__gshared glbfn_glCreateCommandListsNV glCreateCommandListsNV_Z = function void (int a00,uint* a01) {
  glbfn_glCreateCommandListsNV_loader(a00,a01,);
};
private void glbfn_glCreateCommandListsNV_loader (int a00,uint* a01) {
  *cast(void**)&glCreateCommandListsNV_Z = glbindGetProcAddress(`glCreateCommandListsNV`);
  if (*cast(void**)&glCreateCommandListsNV_Z is null) assert(0, `OpenGL function 'glCreateCommandListsNV' not found!`);
  glCreateCommandListsNV_Z(a00,a01,);
}
alias glDeleteCommandListsNV = glDeleteCommandListsNV_Z;
__gshared glbfn_glDeleteCommandListsNV glDeleteCommandListsNV_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteCommandListsNV_loader(a00,a01,);
};
private void glbfn_glDeleteCommandListsNV_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteCommandListsNV_Z = glbindGetProcAddress(`glDeleteCommandListsNV`);
  if (*cast(void**)&glDeleteCommandListsNV_Z is null) assert(0, `OpenGL function 'glDeleteCommandListsNV' not found!`);
  glDeleteCommandListsNV_Z(a00,a01,);
}
alias glIsCommandListNV = glIsCommandListNV_Z;
__gshared glbfn_glIsCommandListNV glIsCommandListNV_Z = function ubyte (uint a00) {
  return glbfn_glIsCommandListNV_loader(a00,);
};
private ubyte glbfn_glIsCommandListNV_loader (uint a00) {
  *cast(void**)&glIsCommandListNV_Z = glbindGetProcAddress(`glIsCommandListNV`);
  if (*cast(void**)&glIsCommandListNV_Z is null) assert(0, `OpenGL function 'glIsCommandListNV' not found!`);
  return glIsCommandListNV_Z(a00,);
}
alias glListDrawCommandsStatesClientNV = glListDrawCommandsStatesClientNV_Z;
__gshared glbfn_glListDrawCommandsStatesClientNV glListDrawCommandsStatesClientNV_Z = function void (uint a00,uint a01,const(void*)* a02,const(int)* a03,const(uint)* a04,const(uint)* a05,uint a06) {
  glbfn_glListDrawCommandsStatesClientNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glListDrawCommandsStatesClientNV_loader (uint a00,uint a01,const(void*)* a02,const(int)* a03,const(uint)* a04,const(uint)* a05,uint a06) {
  *cast(void**)&glListDrawCommandsStatesClientNV_Z = glbindGetProcAddress(`glListDrawCommandsStatesClientNV`);
  if (*cast(void**)&glListDrawCommandsStatesClientNV_Z is null) assert(0, `OpenGL function 'glListDrawCommandsStatesClientNV' not found!`);
  glListDrawCommandsStatesClientNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCommandListSegmentsNV = glCommandListSegmentsNV_Z;
__gshared glbfn_glCommandListSegmentsNV glCommandListSegmentsNV_Z = function void (uint a00,uint a01) {
  glbfn_glCommandListSegmentsNV_loader(a00,a01,);
};
private void glbfn_glCommandListSegmentsNV_loader (uint a00,uint a01) {
  *cast(void**)&glCommandListSegmentsNV_Z = glbindGetProcAddress(`glCommandListSegmentsNV`);
  if (*cast(void**)&glCommandListSegmentsNV_Z is null) assert(0, `OpenGL function 'glCommandListSegmentsNV' not found!`);
  glCommandListSegmentsNV_Z(a00,a01,);
}
alias glCompileCommandListNV = glCompileCommandListNV_Z;
__gshared glbfn_glCompileCommandListNV glCompileCommandListNV_Z = function void (uint a00) {
  glbfn_glCompileCommandListNV_loader(a00,);
};
private void glbfn_glCompileCommandListNV_loader (uint a00) {
  *cast(void**)&glCompileCommandListNV_Z = glbindGetProcAddress(`glCompileCommandListNV`);
  if (*cast(void**)&glCompileCommandListNV_Z is null) assert(0, `OpenGL function 'glCompileCommandListNV' not found!`);
  glCompileCommandListNV_Z(a00,);
}
alias glCallCommandListNV = glCallCommandListNV_Z;
__gshared glbfn_glCallCommandListNV glCallCommandListNV_Z = function void (uint a00) {
  glbfn_glCallCommandListNV_loader(a00,);
};
private void glbfn_glCallCommandListNV_loader (uint a00) {
  *cast(void**)&glCallCommandListNV_Z = glbindGetProcAddress(`glCallCommandListNV`);
  if (*cast(void**)&glCallCommandListNV_Z is null) assert(0, `OpenGL function 'glCallCommandListNV' not found!`);
  glCallCommandListNV_Z(a00,);
}
alias glBeginConditionalRenderNV = glBeginConditionalRenderNV_Z;
__gshared glbfn_glBeginConditionalRenderNV glBeginConditionalRenderNV_Z = function void (uint a00,uint a01) {
  glbfn_glBeginConditionalRenderNV_loader(a00,a01,);
};
private void glbfn_glBeginConditionalRenderNV_loader (uint a00,uint a01) {
  *cast(void**)&glBeginConditionalRenderNV_Z = glbindGetProcAddress(`glBeginConditionalRenderNV`);
  if (*cast(void**)&glBeginConditionalRenderNV_Z is null) assert(0, `OpenGL function 'glBeginConditionalRenderNV' not found!`);
  glBeginConditionalRenderNV_Z(a00,a01,);
}
alias glEndConditionalRenderNV = glEndConditionalRenderNV_Z;
__gshared glbfn_glEndConditionalRenderNV glEndConditionalRenderNV_Z = function void () {
  glbfn_glEndConditionalRenderNV_loader();
};
private void glbfn_glEndConditionalRenderNV_loader () {
  *cast(void**)&glEndConditionalRenderNV_Z = glbindGetProcAddress(`glEndConditionalRenderNV`);
  if (*cast(void**)&glEndConditionalRenderNV_Z is null) assert(0, `OpenGL function 'glEndConditionalRenderNV' not found!`);
  glEndConditionalRenderNV_Z();
}
alias glSubpixelPrecisionBiasNV = glSubpixelPrecisionBiasNV_Z;
__gshared glbfn_glSubpixelPrecisionBiasNV glSubpixelPrecisionBiasNV_Z = function void (uint a00,uint a01) {
  glbfn_glSubpixelPrecisionBiasNV_loader(a00,a01,);
};
private void glbfn_glSubpixelPrecisionBiasNV_loader (uint a00,uint a01) {
  *cast(void**)&glSubpixelPrecisionBiasNV_Z = glbindGetProcAddress(`glSubpixelPrecisionBiasNV`);
  if (*cast(void**)&glSubpixelPrecisionBiasNV_Z is null) assert(0, `OpenGL function 'glSubpixelPrecisionBiasNV' not found!`);
  glSubpixelPrecisionBiasNV_Z(a00,a01,);
}
alias glConservativeRasterParameterfNV = glConservativeRasterParameterfNV_Z;
__gshared glbfn_glConservativeRasterParameterfNV glConservativeRasterParameterfNV_Z = function void (uint a00,float a01) {
  glbfn_glConservativeRasterParameterfNV_loader(a00,a01,);
};
private void glbfn_glConservativeRasterParameterfNV_loader (uint a00,float a01) {
  *cast(void**)&glConservativeRasterParameterfNV_Z = glbindGetProcAddress(`glConservativeRasterParameterfNV`);
  if (*cast(void**)&glConservativeRasterParameterfNV_Z is null) assert(0, `OpenGL function 'glConservativeRasterParameterfNV' not found!`);
  glConservativeRasterParameterfNV_Z(a00,a01,);
}
alias glCopyImageSubDataNV = glCopyImageSubDataNV_Z;
__gshared glbfn_glCopyImageSubDataNV glCopyImageSubDataNV_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,int a08,int a09,int a10,int a11,int a12,int a13,int a14) {
  glbfn_glCopyImageSubDataNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,);
};
private void glbfn_glCopyImageSubDataNV_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,uint a06,uint a07,int a08,int a09,int a10,int a11,int a12,int a13,int a14) {
  *cast(void**)&glCopyImageSubDataNV_Z = glbindGetProcAddress(`glCopyImageSubDataNV`);
  if (*cast(void**)&glCopyImageSubDataNV_Z is null) assert(0, `OpenGL function 'glCopyImageSubDataNV' not found!`);
  glCopyImageSubDataNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,);
}
alias glDepthRangedNV = glDepthRangedNV_Z;
__gshared glbfn_glDepthRangedNV glDepthRangedNV_Z = function void (double a00,double a01) {
  glbfn_glDepthRangedNV_loader(a00,a01,);
};
private void glbfn_glDepthRangedNV_loader (double a00,double a01) {
  *cast(void**)&glDepthRangedNV_Z = glbindGetProcAddress(`glDepthRangedNV`);
  if (*cast(void**)&glDepthRangedNV_Z is null) assert(0, `OpenGL function 'glDepthRangedNV' not found!`);
  glDepthRangedNV_Z(a00,a01,);
}
alias glClearDepthdNV = glClearDepthdNV_Z;
__gshared glbfn_glClearDepthdNV glClearDepthdNV_Z = function void (double a00) {
  glbfn_glClearDepthdNV_loader(a00,);
};
private void glbfn_glClearDepthdNV_loader (double a00) {
  *cast(void**)&glClearDepthdNV_Z = glbindGetProcAddress(`glClearDepthdNV`);
  if (*cast(void**)&glClearDepthdNV_Z is null) assert(0, `OpenGL function 'glClearDepthdNV' not found!`);
  glClearDepthdNV_Z(a00,);
}
alias glDepthBoundsdNV = glDepthBoundsdNV_Z;
__gshared glbfn_glDepthBoundsdNV glDepthBoundsdNV_Z = function void (double a00,double a01) {
  glbfn_glDepthBoundsdNV_loader(a00,a01,);
};
private void glbfn_glDepthBoundsdNV_loader (double a00,double a01) {
  *cast(void**)&glDepthBoundsdNV_Z = glbindGetProcAddress(`glDepthBoundsdNV`);
  if (*cast(void**)&glDepthBoundsdNV_Z is null) assert(0, `OpenGL function 'glDepthBoundsdNV' not found!`);
  glDepthBoundsdNV_Z(a00,a01,);
}
alias glDrawTextureNV = glDrawTextureNV_Z;
__gshared glbfn_glDrawTextureNV glDrawTextureNV_Z = function void (uint a00,uint a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10) {
  glbfn_glDrawTextureNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glDrawTextureNV_loader (uint a00,uint a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10) {
  *cast(void**)&glDrawTextureNV_Z = glbindGetProcAddress(`glDrawTextureNV`);
  if (*cast(void**)&glDrawTextureNV_Z is null) assert(0, `OpenGL function 'glDrawTextureNV' not found!`);
  glDrawTextureNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glMapControlPointsNV = glMapControlPointsNV_Z;
__gshared glbfn_glMapControlPointsNV glMapControlPointsNV_Z = function void (uint a00,uint a01,uint a02,int a03,int a04,int a05,int a06,ubyte a07,const(void)* a08) {
  glbfn_glMapControlPointsNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glMapControlPointsNV_loader (uint a00,uint a01,uint a02,int a03,int a04,int a05,int a06,ubyte a07,const(void)* a08) {
  *cast(void**)&glMapControlPointsNV_Z = glbindGetProcAddress(`glMapControlPointsNV`);
  if (*cast(void**)&glMapControlPointsNV_Z is null) assert(0, `OpenGL function 'glMapControlPointsNV' not found!`);
  glMapControlPointsNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glMapParameterivNV = glMapParameterivNV_Z;
__gshared glbfn_glMapParameterivNV glMapParameterivNV_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glMapParameterivNV_loader(a00,a01,a02,);
};
private void glbfn_glMapParameterivNV_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glMapParameterivNV_Z = glbindGetProcAddress(`glMapParameterivNV`);
  if (*cast(void**)&glMapParameterivNV_Z is null) assert(0, `OpenGL function 'glMapParameterivNV' not found!`);
  glMapParameterivNV_Z(a00,a01,a02,);
}
alias glMapParameterfvNV = glMapParameterfvNV_Z;
__gshared glbfn_glMapParameterfvNV glMapParameterfvNV_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glMapParameterfvNV_loader(a00,a01,a02,);
};
private void glbfn_glMapParameterfvNV_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glMapParameterfvNV_Z = glbindGetProcAddress(`glMapParameterfvNV`);
  if (*cast(void**)&glMapParameterfvNV_Z is null) assert(0, `OpenGL function 'glMapParameterfvNV' not found!`);
  glMapParameterfvNV_Z(a00,a01,a02,);
}
alias glGetMapControlPointsNV = glGetMapControlPointsNV_Z;
__gshared glbfn_glGetMapControlPointsNV glGetMapControlPointsNV_Z = function void (uint a00,uint a01,uint a02,int a03,int a04,ubyte a05,void* a06) {
  glbfn_glGetMapControlPointsNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetMapControlPointsNV_loader (uint a00,uint a01,uint a02,int a03,int a04,ubyte a05,void* a06) {
  *cast(void**)&glGetMapControlPointsNV_Z = glbindGetProcAddress(`glGetMapControlPointsNV`);
  if (*cast(void**)&glGetMapControlPointsNV_Z is null) assert(0, `OpenGL function 'glGetMapControlPointsNV' not found!`);
  glGetMapControlPointsNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetMapParameterivNV = glGetMapParameterivNV_Z;
__gshared glbfn_glGetMapParameterivNV glGetMapParameterivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetMapParameterivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetMapParameterivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetMapParameterivNV_Z = glbindGetProcAddress(`glGetMapParameterivNV`);
  if (*cast(void**)&glGetMapParameterivNV_Z is null) assert(0, `OpenGL function 'glGetMapParameterivNV' not found!`);
  glGetMapParameterivNV_Z(a00,a01,a02,);
}
alias glGetMapParameterfvNV = glGetMapParameterfvNV_Z;
__gshared glbfn_glGetMapParameterfvNV glGetMapParameterfvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetMapParameterfvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetMapParameterfvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetMapParameterfvNV_Z = glbindGetProcAddress(`glGetMapParameterfvNV`);
  if (*cast(void**)&glGetMapParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetMapParameterfvNV' not found!`);
  glGetMapParameterfvNV_Z(a00,a01,a02,);
}
alias glGetMapAttribParameterivNV = glGetMapAttribParameterivNV_Z;
__gshared glbfn_glGetMapAttribParameterivNV glGetMapAttribParameterivNV_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetMapAttribParameterivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMapAttribParameterivNV_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetMapAttribParameterivNV_Z = glbindGetProcAddress(`glGetMapAttribParameterivNV`);
  if (*cast(void**)&glGetMapAttribParameterivNV_Z is null) assert(0, `OpenGL function 'glGetMapAttribParameterivNV' not found!`);
  glGetMapAttribParameterivNV_Z(a00,a01,a02,a03,);
}
alias glGetMapAttribParameterfvNV = glGetMapAttribParameterfvNV_Z;
__gshared glbfn_glGetMapAttribParameterfvNV glGetMapAttribParameterfvNV_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetMapAttribParameterfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetMapAttribParameterfvNV_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetMapAttribParameterfvNV_Z = glbindGetProcAddress(`glGetMapAttribParameterfvNV`);
  if (*cast(void**)&glGetMapAttribParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetMapAttribParameterfvNV' not found!`);
  glGetMapAttribParameterfvNV_Z(a00,a01,a02,a03,);
}
alias glEvalMapsNV = glEvalMapsNV_Z;
__gshared glbfn_glEvalMapsNV glEvalMapsNV_Z = function void (uint a00,uint a01) {
  glbfn_glEvalMapsNV_loader(a00,a01,);
};
private void glbfn_glEvalMapsNV_loader (uint a00,uint a01) {
  *cast(void**)&glEvalMapsNV_Z = glbindGetProcAddress(`glEvalMapsNV`);
  if (*cast(void**)&glEvalMapsNV_Z is null) assert(0, `OpenGL function 'glEvalMapsNV' not found!`);
  glEvalMapsNV_Z(a00,a01,);
}
alias glGetMultisamplefvNV = glGetMultisamplefvNV_Z;
__gshared glbfn_glGetMultisamplefvNV glGetMultisamplefvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetMultisamplefvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetMultisamplefvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetMultisamplefvNV_Z = glbindGetProcAddress(`glGetMultisamplefvNV`);
  if (*cast(void**)&glGetMultisamplefvNV_Z is null) assert(0, `OpenGL function 'glGetMultisamplefvNV' not found!`);
  glGetMultisamplefvNV_Z(a00,a01,a02,);
}
alias glSampleMaskIndexedNV = glSampleMaskIndexedNV_Z;
__gshared glbfn_glSampleMaskIndexedNV glSampleMaskIndexedNV_Z = function void (uint a00,uint a01) {
  glbfn_glSampleMaskIndexedNV_loader(a00,a01,);
};
private void glbfn_glSampleMaskIndexedNV_loader (uint a00,uint a01) {
  *cast(void**)&glSampleMaskIndexedNV_Z = glbindGetProcAddress(`glSampleMaskIndexedNV`);
  if (*cast(void**)&glSampleMaskIndexedNV_Z is null) assert(0, `OpenGL function 'glSampleMaskIndexedNV' not found!`);
  glSampleMaskIndexedNV_Z(a00,a01,);
}
alias glTexRenderbufferNV = glTexRenderbufferNV_Z;
__gshared glbfn_glTexRenderbufferNV glTexRenderbufferNV_Z = function void (uint a00,uint a01) {
  glbfn_glTexRenderbufferNV_loader(a00,a01,);
};
private void glbfn_glTexRenderbufferNV_loader (uint a00,uint a01) {
  *cast(void**)&glTexRenderbufferNV_Z = glbindGetProcAddress(`glTexRenderbufferNV`);
  if (*cast(void**)&glTexRenderbufferNV_Z is null) assert(0, `OpenGL function 'glTexRenderbufferNV' not found!`);
  glTexRenderbufferNV_Z(a00,a01,);
}
alias glDeleteFencesNV = glDeleteFencesNV_Z;
__gshared glbfn_glDeleteFencesNV glDeleteFencesNV_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteFencesNV_loader(a00,a01,);
};
private void glbfn_glDeleteFencesNV_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteFencesNV_Z = glbindGetProcAddress(`glDeleteFencesNV`);
  if (*cast(void**)&glDeleteFencesNV_Z is null) assert(0, `OpenGL function 'glDeleteFencesNV' not found!`);
  glDeleteFencesNV_Z(a00,a01,);
}
alias glGenFencesNV = glGenFencesNV_Z;
__gshared glbfn_glGenFencesNV glGenFencesNV_Z = function void (int a00,uint* a01) {
  glbfn_glGenFencesNV_loader(a00,a01,);
};
private void glbfn_glGenFencesNV_loader (int a00,uint* a01) {
  *cast(void**)&glGenFencesNV_Z = glbindGetProcAddress(`glGenFencesNV`);
  if (*cast(void**)&glGenFencesNV_Z is null) assert(0, `OpenGL function 'glGenFencesNV' not found!`);
  glGenFencesNV_Z(a00,a01,);
}
alias glIsFenceNV = glIsFenceNV_Z;
__gshared glbfn_glIsFenceNV glIsFenceNV_Z = function ubyte (uint a00) {
  return glbfn_glIsFenceNV_loader(a00,);
};
private ubyte glbfn_glIsFenceNV_loader (uint a00) {
  *cast(void**)&glIsFenceNV_Z = glbindGetProcAddress(`glIsFenceNV`);
  if (*cast(void**)&glIsFenceNV_Z is null) assert(0, `OpenGL function 'glIsFenceNV' not found!`);
  return glIsFenceNV_Z(a00,);
}
alias glTestFenceNV = glTestFenceNV_Z;
__gshared glbfn_glTestFenceNV glTestFenceNV_Z = function ubyte (uint a00) {
  return glbfn_glTestFenceNV_loader(a00,);
};
private ubyte glbfn_glTestFenceNV_loader (uint a00) {
  *cast(void**)&glTestFenceNV_Z = glbindGetProcAddress(`glTestFenceNV`);
  if (*cast(void**)&glTestFenceNV_Z is null) assert(0, `OpenGL function 'glTestFenceNV' not found!`);
  return glTestFenceNV_Z(a00,);
}
alias glGetFenceivNV = glGetFenceivNV_Z;
__gshared glbfn_glGetFenceivNV glGetFenceivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetFenceivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetFenceivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetFenceivNV_Z = glbindGetProcAddress(`glGetFenceivNV`);
  if (*cast(void**)&glGetFenceivNV_Z is null) assert(0, `OpenGL function 'glGetFenceivNV' not found!`);
  glGetFenceivNV_Z(a00,a01,a02,);
}
alias glFinishFenceNV = glFinishFenceNV_Z;
__gshared glbfn_glFinishFenceNV glFinishFenceNV_Z = function void (uint a00) {
  glbfn_glFinishFenceNV_loader(a00,);
};
private void glbfn_glFinishFenceNV_loader (uint a00) {
  *cast(void**)&glFinishFenceNV_Z = glbindGetProcAddress(`glFinishFenceNV`);
  if (*cast(void**)&glFinishFenceNV_Z is null) assert(0, `OpenGL function 'glFinishFenceNV' not found!`);
  glFinishFenceNV_Z(a00,);
}
alias glSetFenceNV = glSetFenceNV_Z;
__gshared glbfn_glSetFenceNV glSetFenceNV_Z = function void (uint a00,uint a01) {
  glbfn_glSetFenceNV_loader(a00,a01,);
};
private void glbfn_glSetFenceNV_loader (uint a00,uint a01) {
  *cast(void**)&glSetFenceNV_Z = glbindGetProcAddress(`glSetFenceNV`);
  if (*cast(void**)&glSetFenceNV_Z is null) assert(0, `OpenGL function 'glSetFenceNV' not found!`);
  glSetFenceNV_Z(a00,a01,);
}
alias glFragmentCoverageColorNV = glFragmentCoverageColorNV_Z;
__gshared glbfn_glFragmentCoverageColorNV glFragmentCoverageColorNV_Z = function void (uint a00) {
  glbfn_glFragmentCoverageColorNV_loader(a00,);
};
private void glbfn_glFragmentCoverageColorNV_loader (uint a00) {
  *cast(void**)&glFragmentCoverageColorNV_Z = glbindGetProcAddress(`glFragmentCoverageColorNV`);
  if (*cast(void**)&glFragmentCoverageColorNV_Z is null) assert(0, `OpenGL function 'glFragmentCoverageColorNV' not found!`);
  glFragmentCoverageColorNV_Z(a00,);
}
alias glProgramNamedParameter4fNV = glProgramNamedParameter4fNV_Z;
__gshared glbfn_glProgramNamedParameter4fNV glProgramNamedParameter4fNV_Z = function void (uint a00,int a01,const(ubyte)* a02,float a03,float a04,float a05,float a06) {
  glbfn_glProgramNamedParameter4fNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glProgramNamedParameter4fNV_loader (uint a00,int a01,const(ubyte)* a02,float a03,float a04,float a05,float a06) {
  *cast(void**)&glProgramNamedParameter4fNV_Z = glbindGetProcAddress(`glProgramNamedParameter4fNV`);
  if (*cast(void**)&glProgramNamedParameter4fNV_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4fNV' not found!`);
  glProgramNamedParameter4fNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glProgramNamedParameter4fvNV = glProgramNamedParameter4fvNV_Z;
__gshared glbfn_glProgramNamedParameter4fvNV glProgramNamedParameter4fvNV_Z = function void (uint a00,int a01,const(ubyte)* a02,const(float)* a03) {
  glbfn_glProgramNamedParameter4fvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramNamedParameter4fvNV_loader (uint a00,int a01,const(ubyte)* a02,const(float)* a03) {
  *cast(void**)&glProgramNamedParameter4fvNV_Z = glbindGetProcAddress(`glProgramNamedParameter4fvNV`);
  if (*cast(void**)&glProgramNamedParameter4fvNV_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4fvNV' not found!`);
  glProgramNamedParameter4fvNV_Z(a00,a01,a02,a03,);
}
alias glProgramNamedParameter4dNV = glProgramNamedParameter4dNV_Z;
__gshared glbfn_glProgramNamedParameter4dNV glProgramNamedParameter4dNV_Z = function void (uint a00,int a01,const(ubyte)* a02,double a03,double a04,double a05,double a06) {
  glbfn_glProgramNamedParameter4dNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glProgramNamedParameter4dNV_loader (uint a00,int a01,const(ubyte)* a02,double a03,double a04,double a05,double a06) {
  *cast(void**)&glProgramNamedParameter4dNV_Z = glbindGetProcAddress(`glProgramNamedParameter4dNV`);
  if (*cast(void**)&glProgramNamedParameter4dNV_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4dNV' not found!`);
  glProgramNamedParameter4dNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glProgramNamedParameter4dvNV = glProgramNamedParameter4dvNV_Z;
__gshared glbfn_glProgramNamedParameter4dvNV glProgramNamedParameter4dvNV_Z = function void (uint a00,int a01,const(ubyte)* a02,const(double)* a03) {
  glbfn_glProgramNamedParameter4dvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramNamedParameter4dvNV_loader (uint a00,int a01,const(ubyte)* a02,const(double)* a03) {
  *cast(void**)&glProgramNamedParameter4dvNV_Z = glbindGetProcAddress(`glProgramNamedParameter4dvNV`);
  if (*cast(void**)&glProgramNamedParameter4dvNV_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4dvNV' not found!`);
  glProgramNamedParameter4dvNV_Z(a00,a01,a02,a03,);
}
alias glGetProgramNamedParameterfvNV = glGetProgramNamedParameterfvNV_Z;
__gshared glbfn_glGetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV_Z = function void (uint a00,int a01,const(ubyte)* a02,float* a03) {
  glbfn_glGetProgramNamedParameterfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramNamedParameterfvNV_loader (uint a00,int a01,const(ubyte)* a02,float* a03) {
  *cast(void**)&glGetProgramNamedParameterfvNV_Z = glbindGetProcAddress(`glGetProgramNamedParameterfvNV`);
  if (*cast(void**)&glGetProgramNamedParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetProgramNamedParameterfvNV' not found!`);
  glGetProgramNamedParameterfvNV_Z(a00,a01,a02,a03,);
}
alias glGetProgramNamedParameterdvNV = glGetProgramNamedParameterdvNV_Z;
__gshared glbfn_glGetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV_Z = function void (uint a00,int a01,const(ubyte)* a02,double* a03) {
  glbfn_glGetProgramNamedParameterdvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramNamedParameterdvNV_loader (uint a00,int a01,const(ubyte)* a02,double* a03) {
  *cast(void**)&glGetProgramNamedParameterdvNV_Z = glbindGetProcAddress(`glGetProgramNamedParameterdvNV`);
  if (*cast(void**)&glGetProgramNamedParameterdvNV_Z is null) assert(0, `OpenGL function 'glGetProgramNamedParameterdvNV' not found!`);
  glGetProgramNamedParameterdvNV_Z(a00,a01,a02,a03,);
}
alias glCoverageModulationTableNV = glCoverageModulationTableNV_Z;
__gshared glbfn_glCoverageModulationTableNV glCoverageModulationTableNV_Z = function void (int a00,const(float)* a01) {
  glbfn_glCoverageModulationTableNV_loader(a00,a01,);
};
private void glbfn_glCoverageModulationTableNV_loader (int a00,const(float)* a01) {
  *cast(void**)&glCoverageModulationTableNV_Z = glbindGetProcAddress(`glCoverageModulationTableNV`);
  if (*cast(void**)&glCoverageModulationTableNV_Z is null) assert(0, `OpenGL function 'glCoverageModulationTableNV' not found!`);
  glCoverageModulationTableNV_Z(a00,a01,);
}
alias glGetCoverageModulationTableNV = glGetCoverageModulationTableNV_Z;
__gshared glbfn_glGetCoverageModulationTableNV glGetCoverageModulationTableNV_Z = function void (int a00,float* a01) {
  glbfn_glGetCoverageModulationTableNV_loader(a00,a01,);
};
private void glbfn_glGetCoverageModulationTableNV_loader (int a00,float* a01) {
  *cast(void**)&glGetCoverageModulationTableNV_Z = glbindGetProcAddress(`glGetCoverageModulationTableNV`);
  if (*cast(void**)&glGetCoverageModulationTableNV_Z is null) assert(0, `OpenGL function 'glGetCoverageModulationTableNV' not found!`);
  glGetCoverageModulationTableNV_Z(a00,a01,);
}
alias glCoverageModulationNV = glCoverageModulationNV_Z;
__gshared glbfn_glCoverageModulationNV glCoverageModulationNV_Z = function void (uint a00) {
  glbfn_glCoverageModulationNV_loader(a00,);
};
private void glbfn_glCoverageModulationNV_loader (uint a00) {
  *cast(void**)&glCoverageModulationNV_Z = glbindGetProcAddress(`glCoverageModulationNV`);
  if (*cast(void**)&glCoverageModulationNV_Z is null) assert(0, `OpenGL function 'glCoverageModulationNV' not found!`);
  glCoverageModulationNV_Z(a00,);
}
alias glRenderbufferStorageMultisampleCoverageNV = glRenderbufferStorageMultisampleCoverageNV_Z;
__gshared glbfn_glRenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV_Z = function void (uint a00,int a01,int a02,uint a03,int a04,int a05) {
  glbfn_glRenderbufferStorageMultisampleCoverageNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glRenderbufferStorageMultisampleCoverageNV_loader (uint a00,int a01,int a02,uint a03,int a04,int a05) {
  *cast(void**)&glRenderbufferStorageMultisampleCoverageNV_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleCoverageNV`);
  if (*cast(void**)&glRenderbufferStorageMultisampleCoverageNV_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleCoverageNV' not found!`);
  glRenderbufferStorageMultisampleCoverageNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramVertexLimitNV = glProgramVertexLimitNV_Z;
__gshared glbfn_glProgramVertexLimitNV glProgramVertexLimitNV_Z = function void (uint a00,int a01) {
  glbfn_glProgramVertexLimitNV_loader(a00,a01,);
};
private void glbfn_glProgramVertexLimitNV_loader (uint a00,int a01) {
  *cast(void**)&glProgramVertexLimitNV_Z = glbindGetProcAddress(`glProgramVertexLimitNV`);
  if (*cast(void**)&glProgramVertexLimitNV_Z is null) assert(0, `OpenGL function 'glProgramVertexLimitNV' not found!`);
  glProgramVertexLimitNV_Z(a00,a01,);
}
alias glFramebufferTextureEXT = glFramebufferTextureEXT_Z;
__gshared glbfn_glFramebufferTextureEXT glFramebufferTextureEXT_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glFramebufferTextureEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glFramebufferTextureEXT_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glFramebufferTextureEXT_Z = glbindGetProcAddress(`glFramebufferTextureEXT`);
  if (*cast(void**)&glFramebufferTextureEXT_Z is null) assert(0, `OpenGL function 'glFramebufferTextureEXT' not found!`);
  glFramebufferTextureEXT_Z(a00,a01,a02,a03,);
}
alias glFramebufferTextureFaceEXT = glFramebufferTextureFaceEXT_Z;
__gshared glbfn_glFramebufferTextureFaceEXT glFramebufferTextureFaceEXT_Z = function void (uint a00,uint a01,uint a02,int a03,uint a04) {
  glbfn_glFramebufferTextureFaceEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glFramebufferTextureFaceEXT_loader (uint a00,uint a01,uint a02,int a03,uint a04) {
  *cast(void**)&glFramebufferTextureFaceEXT_Z = glbindGetProcAddress(`glFramebufferTextureFaceEXT`);
  if (*cast(void**)&glFramebufferTextureFaceEXT_Z is null) assert(0, `OpenGL function 'glFramebufferTextureFaceEXT' not found!`);
  glFramebufferTextureFaceEXT_Z(a00,a01,a02,a03,a04,);
}
alias glProgramLocalParameterI4iNV = glProgramLocalParameterI4iNV_Z;
__gshared glbfn_glProgramLocalParameterI4iNV glProgramLocalParameterI4iNV_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  glbfn_glProgramLocalParameterI4iNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramLocalParameterI4iNV_loader (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glProgramLocalParameterI4iNV_Z = glbindGetProcAddress(`glProgramLocalParameterI4iNV`);
  if (*cast(void**)&glProgramLocalParameterI4iNV_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4iNV' not found!`);
  glProgramLocalParameterI4iNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramLocalParameterI4ivNV = glProgramLocalParameterI4ivNV_Z;
__gshared glbfn_glProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glProgramLocalParameterI4ivNV_loader(a00,a01,a02,);
};
private void glbfn_glProgramLocalParameterI4ivNV_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glProgramLocalParameterI4ivNV_Z = glbindGetProcAddress(`glProgramLocalParameterI4ivNV`);
  if (*cast(void**)&glProgramLocalParameterI4ivNV_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4ivNV' not found!`);
  glProgramLocalParameterI4ivNV_Z(a00,a01,a02,);
}
alias glProgramLocalParametersI4ivNV = glProgramLocalParametersI4ivNV_Z;
__gshared glbfn_glProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV_Z = function void (uint a00,uint a01,int a02,const(int)* a03) {
  glbfn_glProgramLocalParametersI4ivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramLocalParametersI4ivNV_loader (uint a00,uint a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramLocalParametersI4ivNV_Z = glbindGetProcAddress(`glProgramLocalParametersI4ivNV`);
  if (*cast(void**)&glProgramLocalParametersI4ivNV_Z is null) assert(0, `OpenGL function 'glProgramLocalParametersI4ivNV' not found!`);
  glProgramLocalParametersI4ivNV_Z(a00,a01,a02,a03,);
}
alias glProgramLocalParameterI4uiNV = glProgramLocalParameterI4uiNV_Z;
__gshared glbfn_glProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glProgramLocalParameterI4uiNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramLocalParameterI4uiNV_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glProgramLocalParameterI4uiNV_Z = glbindGetProcAddress(`glProgramLocalParameterI4uiNV`);
  if (*cast(void**)&glProgramLocalParameterI4uiNV_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uiNV' not found!`);
  glProgramLocalParameterI4uiNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramLocalParameterI4uivNV = glProgramLocalParameterI4uivNV_Z;
__gshared glbfn_glProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glProgramLocalParameterI4uivNV_loader(a00,a01,a02,);
};
private void glbfn_glProgramLocalParameterI4uivNV_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glProgramLocalParameterI4uivNV_Z = glbindGetProcAddress(`glProgramLocalParameterI4uivNV`);
  if (*cast(void**)&glProgramLocalParameterI4uivNV_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uivNV' not found!`);
  glProgramLocalParameterI4uivNV_Z(a00,a01,a02,);
}
alias glProgramLocalParametersI4uivNV = glProgramLocalParametersI4uivNV_Z;
__gshared glbfn_glProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV_Z = function void (uint a00,uint a01,int a02,const(uint)* a03) {
  glbfn_glProgramLocalParametersI4uivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramLocalParametersI4uivNV_loader (uint a00,uint a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramLocalParametersI4uivNV_Z = glbindGetProcAddress(`glProgramLocalParametersI4uivNV`);
  if (*cast(void**)&glProgramLocalParametersI4uivNV_Z is null) assert(0, `OpenGL function 'glProgramLocalParametersI4uivNV' not found!`);
  glProgramLocalParametersI4uivNV_Z(a00,a01,a02,a03,);
}
alias glProgramEnvParameterI4iNV = glProgramEnvParameterI4iNV_Z;
__gshared glbfn_glProgramEnvParameterI4iNV glProgramEnvParameterI4iNV_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  glbfn_glProgramEnvParameterI4iNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramEnvParameterI4iNV_loader (uint a00,uint a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glProgramEnvParameterI4iNV_Z = glbindGetProcAddress(`glProgramEnvParameterI4iNV`);
  if (*cast(void**)&glProgramEnvParameterI4iNV_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4iNV' not found!`);
  glProgramEnvParameterI4iNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramEnvParameterI4ivNV = glProgramEnvParameterI4ivNV_Z;
__gshared glbfn_glProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glProgramEnvParameterI4ivNV_loader(a00,a01,a02,);
};
private void glbfn_glProgramEnvParameterI4ivNV_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glProgramEnvParameterI4ivNV_Z = glbindGetProcAddress(`glProgramEnvParameterI4ivNV`);
  if (*cast(void**)&glProgramEnvParameterI4ivNV_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4ivNV' not found!`);
  glProgramEnvParameterI4ivNV_Z(a00,a01,a02,);
}
alias glProgramEnvParametersI4ivNV = glProgramEnvParametersI4ivNV_Z;
__gshared glbfn_glProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV_Z = function void (uint a00,uint a01,int a02,const(int)* a03) {
  glbfn_glProgramEnvParametersI4ivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramEnvParametersI4ivNV_loader (uint a00,uint a01,int a02,const(int)* a03) {
  *cast(void**)&glProgramEnvParametersI4ivNV_Z = glbindGetProcAddress(`glProgramEnvParametersI4ivNV`);
  if (*cast(void**)&glProgramEnvParametersI4ivNV_Z is null) assert(0, `OpenGL function 'glProgramEnvParametersI4ivNV' not found!`);
  glProgramEnvParametersI4ivNV_Z(a00,a01,a02,a03,);
}
alias glProgramEnvParameterI4uiNV = glProgramEnvParameterI4uiNV_Z;
__gshared glbfn_glProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glProgramEnvParameterI4uiNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramEnvParameterI4uiNV_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glProgramEnvParameterI4uiNV_Z = glbindGetProcAddress(`glProgramEnvParameterI4uiNV`);
  if (*cast(void**)&glProgramEnvParameterI4uiNV_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uiNV' not found!`);
  glProgramEnvParameterI4uiNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramEnvParameterI4uivNV = glProgramEnvParameterI4uivNV_Z;
__gshared glbfn_glProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV_Z = function void (uint a00,uint a01,const(uint)* a02) {
  glbfn_glProgramEnvParameterI4uivNV_loader(a00,a01,a02,);
};
private void glbfn_glProgramEnvParameterI4uivNV_loader (uint a00,uint a01,const(uint)* a02) {
  *cast(void**)&glProgramEnvParameterI4uivNV_Z = glbindGetProcAddress(`glProgramEnvParameterI4uivNV`);
  if (*cast(void**)&glProgramEnvParameterI4uivNV_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uivNV' not found!`);
  glProgramEnvParameterI4uivNV_Z(a00,a01,a02,);
}
alias glProgramEnvParametersI4uivNV = glProgramEnvParametersI4uivNV_Z;
__gshared glbfn_glProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV_Z = function void (uint a00,uint a01,int a02,const(uint)* a03) {
  glbfn_glProgramEnvParametersI4uivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramEnvParametersI4uivNV_loader (uint a00,uint a01,int a02,const(uint)* a03) {
  *cast(void**)&glProgramEnvParametersI4uivNV_Z = glbindGetProcAddress(`glProgramEnvParametersI4uivNV`);
  if (*cast(void**)&glProgramEnvParametersI4uivNV_Z is null) assert(0, `OpenGL function 'glProgramEnvParametersI4uivNV' not found!`);
  glProgramEnvParametersI4uivNV_Z(a00,a01,a02,a03,);
}
alias glGetProgramLocalParameterIivNV = glGetProgramLocalParameterIivNV_Z;
__gshared glbfn_glGetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetProgramLocalParameterIivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramLocalParameterIivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetProgramLocalParameterIivNV_Z = glbindGetProcAddress(`glGetProgramLocalParameterIivNV`);
  if (*cast(void**)&glGetProgramLocalParameterIivNV_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIivNV' not found!`);
  glGetProgramLocalParameterIivNV_Z(a00,a01,a02,);
}
alias glGetProgramLocalParameterIuivNV = glGetProgramLocalParameterIuivNV_Z;
__gshared glbfn_glGetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetProgramLocalParameterIuivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramLocalParameterIuivNV_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetProgramLocalParameterIuivNV_Z = glbindGetProcAddress(`glGetProgramLocalParameterIuivNV`);
  if (*cast(void**)&glGetProgramLocalParameterIuivNV_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIuivNV' not found!`);
  glGetProgramLocalParameterIuivNV_Z(a00,a01,a02,);
}
alias glGetProgramEnvParameterIivNV = glGetProgramEnvParameterIivNV_Z;
__gshared glbfn_glGetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetProgramEnvParameterIivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramEnvParameterIivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetProgramEnvParameterIivNV_Z = glbindGetProcAddress(`glGetProgramEnvParameterIivNV`);
  if (*cast(void**)&glGetProgramEnvParameterIivNV_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIivNV' not found!`);
  glGetProgramEnvParameterIivNV_Z(a00,a01,a02,);
}
alias glGetProgramEnvParameterIuivNV = glGetProgramEnvParameterIuivNV_Z;
__gshared glbfn_glGetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetProgramEnvParameterIuivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramEnvParameterIuivNV_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetProgramEnvParameterIuivNV_Z = glbindGetProcAddress(`glGetProgramEnvParameterIuivNV`);
  if (*cast(void**)&glGetProgramEnvParameterIuivNV_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIuivNV' not found!`);
  glGetProgramEnvParameterIuivNV_Z(a00,a01,a02,);
}
alias glProgramSubroutineParametersuivNV = glProgramSubroutineParametersuivNV_Z;
__gshared glbfn_glProgramSubroutineParametersuivNV glProgramSubroutineParametersuivNV_Z = function void (uint a00,int a01,const(uint)* a02) {
  glbfn_glProgramSubroutineParametersuivNV_loader(a00,a01,a02,);
};
private void glbfn_glProgramSubroutineParametersuivNV_loader (uint a00,int a01,const(uint)* a02) {
  *cast(void**)&glProgramSubroutineParametersuivNV_Z = glbindGetProcAddress(`glProgramSubroutineParametersuivNV`);
  if (*cast(void**)&glProgramSubroutineParametersuivNV_Z is null) assert(0, `OpenGL function 'glProgramSubroutineParametersuivNV' not found!`);
  glProgramSubroutineParametersuivNV_Z(a00,a01,a02,);
}
alias glGetProgramSubroutineParameteruivNV = glGetProgramSubroutineParameteruivNV_Z;
__gshared glbfn_glGetProgramSubroutineParameteruivNV glGetProgramSubroutineParameteruivNV_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetProgramSubroutineParameteruivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramSubroutineParameteruivNV_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetProgramSubroutineParameteruivNV_Z = glbindGetProcAddress(`glGetProgramSubroutineParameteruivNV`);
  if (*cast(void**)&glGetProgramSubroutineParameteruivNV_Z is null) assert(0, `OpenGL function 'glGetProgramSubroutineParameteruivNV' not found!`);
  glGetProgramSubroutineParameteruivNV_Z(a00,a01,a02,);
}
alias glVertex2hNV = glVertex2hNV_Z;
__gshared glbfn_glVertex2hNV glVertex2hNV_Z = function void (ushort a00,ushort a01) {
  glbfn_glVertex2hNV_loader(a00,a01,);
};
private void glbfn_glVertex2hNV_loader (ushort a00,ushort a01) {
  *cast(void**)&glVertex2hNV_Z = glbindGetProcAddress(`glVertex2hNV`);
  if (*cast(void**)&glVertex2hNV_Z is null) assert(0, `OpenGL function 'glVertex2hNV' not found!`);
  glVertex2hNV_Z(a00,a01,);
}
alias glVertex2hvNV = glVertex2hvNV_Z;
__gshared glbfn_glVertex2hvNV glVertex2hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glVertex2hvNV_loader(a00,);
};
private void glbfn_glVertex2hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glVertex2hvNV_Z = glbindGetProcAddress(`glVertex2hvNV`);
  if (*cast(void**)&glVertex2hvNV_Z is null) assert(0, `OpenGL function 'glVertex2hvNV' not found!`);
  glVertex2hvNV_Z(a00,);
}
alias glVertex3hNV = glVertex3hNV_Z;
__gshared glbfn_glVertex3hNV glVertex3hNV_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glVertex3hNV_loader(a00,a01,a02,);
};
private void glbfn_glVertex3hNV_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glVertex3hNV_Z = glbindGetProcAddress(`glVertex3hNV`);
  if (*cast(void**)&glVertex3hNV_Z is null) assert(0, `OpenGL function 'glVertex3hNV' not found!`);
  glVertex3hNV_Z(a00,a01,a02,);
}
alias glVertex3hvNV = glVertex3hvNV_Z;
__gshared glbfn_glVertex3hvNV glVertex3hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glVertex3hvNV_loader(a00,);
};
private void glbfn_glVertex3hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glVertex3hvNV_Z = glbindGetProcAddress(`glVertex3hvNV`);
  if (*cast(void**)&glVertex3hvNV_Z is null) assert(0, `OpenGL function 'glVertex3hvNV' not found!`);
  glVertex3hvNV_Z(a00,);
}
alias glVertex4hNV = glVertex4hNV_Z;
__gshared glbfn_glVertex4hNV glVertex4hNV_Z = function void (ushort a00,ushort a01,ushort a02,ushort a03) {
  glbfn_glVertex4hNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertex4hNV_loader (ushort a00,ushort a01,ushort a02,ushort a03) {
  *cast(void**)&glVertex4hNV_Z = glbindGetProcAddress(`glVertex4hNV`);
  if (*cast(void**)&glVertex4hNV_Z is null) assert(0, `OpenGL function 'glVertex4hNV' not found!`);
  glVertex4hNV_Z(a00,a01,a02,a03,);
}
alias glVertex4hvNV = glVertex4hvNV_Z;
__gshared glbfn_glVertex4hvNV glVertex4hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glVertex4hvNV_loader(a00,);
};
private void glbfn_glVertex4hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glVertex4hvNV_Z = glbindGetProcAddress(`glVertex4hvNV`);
  if (*cast(void**)&glVertex4hvNV_Z is null) assert(0, `OpenGL function 'glVertex4hvNV' not found!`);
  glVertex4hvNV_Z(a00,);
}
alias glNormal3hNV = glNormal3hNV_Z;
__gshared glbfn_glNormal3hNV glNormal3hNV_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glNormal3hNV_loader(a00,a01,a02,);
};
private void glbfn_glNormal3hNV_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glNormal3hNV_Z = glbindGetProcAddress(`glNormal3hNV`);
  if (*cast(void**)&glNormal3hNV_Z is null) assert(0, `OpenGL function 'glNormal3hNV' not found!`);
  glNormal3hNV_Z(a00,a01,a02,);
}
alias glNormal3hvNV = glNormal3hvNV_Z;
__gshared glbfn_glNormal3hvNV glNormal3hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glNormal3hvNV_loader(a00,);
};
private void glbfn_glNormal3hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glNormal3hvNV_Z = glbindGetProcAddress(`glNormal3hvNV`);
  if (*cast(void**)&glNormal3hvNV_Z is null) assert(0, `OpenGL function 'glNormal3hvNV' not found!`);
  glNormal3hvNV_Z(a00,);
}
alias glColor3hNV = glColor3hNV_Z;
__gshared glbfn_glColor3hNV glColor3hNV_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glColor3hNV_loader(a00,a01,a02,);
};
private void glbfn_glColor3hNV_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glColor3hNV_Z = glbindGetProcAddress(`glColor3hNV`);
  if (*cast(void**)&glColor3hNV_Z is null) assert(0, `OpenGL function 'glColor3hNV' not found!`);
  glColor3hNV_Z(a00,a01,a02,);
}
alias glColor3hvNV = glColor3hvNV_Z;
__gshared glbfn_glColor3hvNV glColor3hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glColor3hvNV_loader(a00,);
};
private void glbfn_glColor3hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glColor3hvNV_Z = glbindGetProcAddress(`glColor3hvNV`);
  if (*cast(void**)&glColor3hvNV_Z is null) assert(0, `OpenGL function 'glColor3hvNV' not found!`);
  glColor3hvNV_Z(a00,);
}
alias glColor4hNV = glColor4hNV_Z;
__gshared glbfn_glColor4hNV glColor4hNV_Z = function void (ushort a00,ushort a01,ushort a02,ushort a03) {
  glbfn_glColor4hNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4hNV_loader (ushort a00,ushort a01,ushort a02,ushort a03) {
  *cast(void**)&glColor4hNV_Z = glbindGetProcAddress(`glColor4hNV`);
  if (*cast(void**)&glColor4hNV_Z is null) assert(0, `OpenGL function 'glColor4hNV' not found!`);
  glColor4hNV_Z(a00,a01,a02,a03,);
}
alias glColor4hvNV = glColor4hvNV_Z;
__gshared glbfn_glColor4hvNV glColor4hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glColor4hvNV_loader(a00,);
};
private void glbfn_glColor4hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glColor4hvNV_Z = glbindGetProcAddress(`glColor4hvNV`);
  if (*cast(void**)&glColor4hvNV_Z is null) assert(0, `OpenGL function 'glColor4hvNV' not found!`);
  glColor4hvNV_Z(a00,);
}
alias glTexCoord1hNV = glTexCoord1hNV_Z;
__gshared glbfn_glTexCoord1hNV glTexCoord1hNV_Z = function void (ushort a00) {
  glbfn_glTexCoord1hNV_loader(a00,);
};
private void glbfn_glTexCoord1hNV_loader (ushort a00) {
  *cast(void**)&glTexCoord1hNV_Z = glbindGetProcAddress(`glTexCoord1hNV`);
  if (*cast(void**)&glTexCoord1hNV_Z is null) assert(0, `OpenGL function 'glTexCoord1hNV' not found!`);
  glTexCoord1hNV_Z(a00,);
}
alias glTexCoord1hvNV = glTexCoord1hvNV_Z;
__gshared glbfn_glTexCoord1hvNV glTexCoord1hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glTexCoord1hvNV_loader(a00,);
};
private void glbfn_glTexCoord1hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glTexCoord1hvNV_Z = glbindGetProcAddress(`glTexCoord1hvNV`);
  if (*cast(void**)&glTexCoord1hvNV_Z is null) assert(0, `OpenGL function 'glTexCoord1hvNV' not found!`);
  glTexCoord1hvNV_Z(a00,);
}
alias glTexCoord2hNV = glTexCoord2hNV_Z;
__gshared glbfn_glTexCoord2hNV glTexCoord2hNV_Z = function void (ushort a00,ushort a01) {
  glbfn_glTexCoord2hNV_loader(a00,a01,);
};
private void glbfn_glTexCoord2hNV_loader (ushort a00,ushort a01) {
  *cast(void**)&glTexCoord2hNV_Z = glbindGetProcAddress(`glTexCoord2hNV`);
  if (*cast(void**)&glTexCoord2hNV_Z is null) assert(0, `OpenGL function 'glTexCoord2hNV' not found!`);
  glTexCoord2hNV_Z(a00,a01,);
}
alias glTexCoord2hvNV = glTexCoord2hvNV_Z;
__gshared glbfn_glTexCoord2hvNV glTexCoord2hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glTexCoord2hvNV_loader(a00,);
};
private void glbfn_glTexCoord2hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glTexCoord2hvNV_Z = glbindGetProcAddress(`glTexCoord2hvNV`);
  if (*cast(void**)&glTexCoord2hvNV_Z is null) assert(0, `OpenGL function 'glTexCoord2hvNV' not found!`);
  glTexCoord2hvNV_Z(a00,);
}
alias glTexCoord3hNV = glTexCoord3hNV_Z;
__gshared glbfn_glTexCoord3hNV glTexCoord3hNV_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glTexCoord3hNV_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord3hNV_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glTexCoord3hNV_Z = glbindGetProcAddress(`glTexCoord3hNV`);
  if (*cast(void**)&glTexCoord3hNV_Z is null) assert(0, `OpenGL function 'glTexCoord3hNV' not found!`);
  glTexCoord3hNV_Z(a00,a01,a02,);
}
alias glTexCoord3hvNV = glTexCoord3hvNV_Z;
__gshared glbfn_glTexCoord3hvNV glTexCoord3hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glTexCoord3hvNV_loader(a00,);
};
private void glbfn_glTexCoord3hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glTexCoord3hvNV_Z = glbindGetProcAddress(`glTexCoord3hvNV`);
  if (*cast(void**)&glTexCoord3hvNV_Z is null) assert(0, `OpenGL function 'glTexCoord3hvNV' not found!`);
  glTexCoord3hvNV_Z(a00,);
}
alias glTexCoord4hNV = glTexCoord4hNV_Z;
__gshared glbfn_glTexCoord4hNV glTexCoord4hNV_Z = function void (ushort a00,ushort a01,ushort a02,ushort a03) {
  glbfn_glTexCoord4hNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4hNV_loader (ushort a00,ushort a01,ushort a02,ushort a03) {
  *cast(void**)&glTexCoord4hNV_Z = glbindGetProcAddress(`glTexCoord4hNV`);
  if (*cast(void**)&glTexCoord4hNV_Z is null) assert(0, `OpenGL function 'glTexCoord4hNV' not found!`);
  glTexCoord4hNV_Z(a00,a01,a02,a03,);
}
alias glTexCoord4hvNV = glTexCoord4hvNV_Z;
__gshared glbfn_glTexCoord4hvNV glTexCoord4hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glTexCoord4hvNV_loader(a00,);
};
private void glbfn_glTexCoord4hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glTexCoord4hvNV_Z = glbindGetProcAddress(`glTexCoord4hvNV`);
  if (*cast(void**)&glTexCoord4hvNV_Z is null) assert(0, `OpenGL function 'glTexCoord4hvNV' not found!`);
  glTexCoord4hvNV_Z(a00,);
}
alias glMultiTexCoord1hNV = glMultiTexCoord1hNV_Z;
__gshared glbfn_glMultiTexCoord1hNV glMultiTexCoord1hNV_Z = function void (uint a00,ushort a01) {
  glbfn_glMultiTexCoord1hNV_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1hNV_loader (uint a00,ushort a01) {
  *cast(void**)&glMultiTexCoord1hNV_Z = glbindGetProcAddress(`glMultiTexCoord1hNV`);
  if (*cast(void**)&glMultiTexCoord1hNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1hNV' not found!`);
  glMultiTexCoord1hNV_Z(a00,a01,);
}
alias glMultiTexCoord1hvNV = glMultiTexCoord1hvNV_Z;
__gshared glbfn_glMultiTexCoord1hvNV glMultiTexCoord1hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glMultiTexCoord1hvNV_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glMultiTexCoord1hvNV_Z = glbindGetProcAddress(`glMultiTexCoord1hvNV`);
  if (*cast(void**)&glMultiTexCoord1hvNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1hvNV' not found!`);
  glMultiTexCoord1hvNV_Z(a00,a01,);
}
alias glMultiTexCoord2hNV = glMultiTexCoord2hNV_Z;
__gshared glbfn_glMultiTexCoord2hNV glMultiTexCoord2hNV_Z = function void (uint a00,ushort a01,ushort a02) {
  glbfn_glMultiTexCoord2hNV_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2hNV_loader (uint a00,ushort a01,ushort a02) {
  *cast(void**)&glMultiTexCoord2hNV_Z = glbindGetProcAddress(`glMultiTexCoord2hNV`);
  if (*cast(void**)&glMultiTexCoord2hNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2hNV' not found!`);
  glMultiTexCoord2hNV_Z(a00,a01,a02,);
}
alias glMultiTexCoord2hvNV = glMultiTexCoord2hvNV_Z;
__gshared glbfn_glMultiTexCoord2hvNV glMultiTexCoord2hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glMultiTexCoord2hvNV_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glMultiTexCoord2hvNV_Z = glbindGetProcAddress(`glMultiTexCoord2hvNV`);
  if (*cast(void**)&glMultiTexCoord2hvNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2hvNV' not found!`);
  glMultiTexCoord2hvNV_Z(a00,a01,);
}
alias glMultiTexCoord3hNV = glMultiTexCoord3hNV_Z;
__gshared glbfn_glMultiTexCoord3hNV glMultiTexCoord3hNV_Z = function void (uint a00,ushort a01,ushort a02,ushort a03) {
  glbfn_glMultiTexCoord3hNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3hNV_loader (uint a00,ushort a01,ushort a02,ushort a03) {
  *cast(void**)&glMultiTexCoord3hNV_Z = glbindGetProcAddress(`glMultiTexCoord3hNV`);
  if (*cast(void**)&glMultiTexCoord3hNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3hNV' not found!`);
  glMultiTexCoord3hNV_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3hvNV = glMultiTexCoord3hvNV_Z;
__gshared glbfn_glMultiTexCoord3hvNV glMultiTexCoord3hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glMultiTexCoord3hvNV_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glMultiTexCoord3hvNV_Z = glbindGetProcAddress(`glMultiTexCoord3hvNV`);
  if (*cast(void**)&glMultiTexCoord3hvNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3hvNV' not found!`);
  glMultiTexCoord3hvNV_Z(a00,a01,);
}
alias glMultiTexCoord4hNV = glMultiTexCoord4hNV_Z;
__gshared glbfn_glMultiTexCoord4hNV glMultiTexCoord4hNV_Z = function void (uint a00,ushort a01,ushort a02,ushort a03,ushort a04) {
  glbfn_glMultiTexCoord4hNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4hNV_loader (uint a00,ushort a01,ushort a02,ushort a03,ushort a04) {
  *cast(void**)&glMultiTexCoord4hNV_Z = glbindGetProcAddress(`glMultiTexCoord4hNV`);
  if (*cast(void**)&glMultiTexCoord4hNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4hNV' not found!`);
  glMultiTexCoord4hNV_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4hvNV = glMultiTexCoord4hvNV_Z;
__gshared glbfn_glMultiTexCoord4hvNV glMultiTexCoord4hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glMultiTexCoord4hvNV_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glMultiTexCoord4hvNV_Z = glbindGetProcAddress(`glMultiTexCoord4hvNV`);
  if (*cast(void**)&glMultiTexCoord4hvNV_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4hvNV' not found!`);
  glMultiTexCoord4hvNV_Z(a00,a01,);
}
alias glFogCoordhNV = glFogCoordhNV_Z;
__gshared glbfn_glFogCoordhNV glFogCoordhNV_Z = function void (ushort a00) {
  glbfn_glFogCoordhNV_loader(a00,);
};
private void glbfn_glFogCoordhNV_loader (ushort a00) {
  *cast(void**)&glFogCoordhNV_Z = glbindGetProcAddress(`glFogCoordhNV`);
  if (*cast(void**)&glFogCoordhNV_Z is null) assert(0, `OpenGL function 'glFogCoordhNV' not found!`);
  glFogCoordhNV_Z(a00,);
}
alias glFogCoordhvNV = glFogCoordhvNV_Z;
__gshared glbfn_glFogCoordhvNV glFogCoordhvNV_Z = function void (const(ushort)* a00) {
  glbfn_glFogCoordhvNV_loader(a00,);
};
private void glbfn_glFogCoordhvNV_loader (const(ushort)* a00) {
  *cast(void**)&glFogCoordhvNV_Z = glbindGetProcAddress(`glFogCoordhvNV`);
  if (*cast(void**)&glFogCoordhvNV_Z is null) assert(0, `OpenGL function 'glFogCoordhvNV' not found!`);
  glFogCoordhvNV_Z(a00,);
}
alias glSecondaryColor3hNV = glSecondaryColor3hNV_Z;
__gshared glbfn_glSecondaryColor3hNV glSecondaryColor3hNV_Z = function void (ushort a00,ushort a01,ushort a02) {
  glbfn_glSecondaryColor3hNV_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColor3hNV_loader (ushort a00,ushort a01,ushort a02) {
  *cast(void**)&glSecondaryColor3hNV_Z = glbindGetProcAddress(`glSecondaryColor3hNV`);
  if (*cast(void**)&glSecondaryColor3hNV_Z is null) assert(0, `OpenGL function 'glSecondaryColor3hNV' not found!`);
  glSecondaryColor3hNV_Z(a00,a01,a02,);
}
alias glSecondaryColor3hvNV = glSecondaryColor3hvNV_Z;
__gshared glbfn_glSecondaryColor3hvNV glSecondaryColor3hvNV_Z = function void (const(ushort)* a00) {
  glbfn_glSecondaryColor3hvNV_loader(a00,);
};
private void glbfn_glSecondaryColor3hvNV_loader (const(ushort)* a00) {
  *cast(void**)&glSecondaryColor3hvNV_Z = glbindGetProcAddress(`glSecondaryColor3hvNV`);
  if (*cast(void**)&glSecondaryColor3hvNV_Z is null) assert(0, `OpenGL function 'glSecondaryColor3hvNV' not found!`);
  glSecondaryColor3hvNV_Z(a00,);
}
alias glVertexWeighthNV = glVertexWeighthNV_Z;
__gshared glbfn_glVertexWeighthNV glVertexWeighthNV_Z = function void (ushort a00) {
  glbfn_glVertexWeighthNV_loader(a00,);
};
private void glbfn_glVertexWeighthNV_loader (ushort a00) {
  *cast(void**)&glVertexWeighthNV_Z = glbindGetProcAddress(`glVertexWeighthNV`);
  if (*cast(void**)&glVertexWeighthNV_Z is null) assert(0, `OpenGL function 'glVertexWeighthNV' not found!`);
  glVertexWeighthNV_Z(a00,);
}
alias glVertexWeighthvNV = glVertexWeighthvNV_Z;
__gshared glbfn_glVertexWeighthvNV glVertexWeighthvNV_Z = function void (const(ushort)* a00) {
  glbfn_glVertexWeighthvNV_loader(a00,);
};
private void glbfn_glVertexWeighthvNV_loader (const(ushort)* a00) {
  *cast(void**)&glVertexWeighthvNV_Z = glbindGetProcAddress(`glVertexWeighthvNV`);
  if (*cast(void**)&glVertexWeighthvNV_Z is null) assert(0, `OpenGL function 'glVertexWeighthvNV' not found!`);
  glVertexWeighthvNV_Z(a00,);
}
alias glVertexAttrib1hNV = glVertexAttrib1hNV_Z;
__gshared glbfn_glVertexAttrib1hNV glVertexAttrib1hNV_Z = function void (uint a00,ushort a01) {
  glbfn_glVertexAttrib1hNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1hNV_loader (uint a00,ushort a01) {
  *cast(void**)&glVertexAttrib1hNV_Z = glbindGetProcAddress(`glVertexAttrib1hNV`);
  if (*cast(void**)&glVertexAttrib1hNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1hNV' not found!`);
  glVertexAttrib1hNV_Z(a00,a01,);
}
alias glVertexAttrib1hvNV = glVertexAttrib1hvNV_Z;
__gshared glbfn_glVertexAttrib1hvNV glVertexAttrib1hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib1hvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib1hvNV_Z = glbindGetProcAddress(`glVertexAttrib1hvNV`);
  if (*cast(void**)&glVertexAttrib1hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1hvNV' not found!`);
  glVertexAttrib1hvNV_Z(a00,a01,);
}
alias glVertexAttrib2hNV = glVertexAttrib2hNV_Z;
__gshared glbfn_glVertexAttrib2hNV glVertexAttrib2hNV_Z = function void (uint a00,ushort a01,ushort a02) {
  glbfn_glVertexAttrib2hNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2hNV_loader (uint a00,ushort a01,ushort a02) {
  *cast(void**)&glVertexAttrib2hNV_Z = glbindGetProcAddress(`glVertexAttrib2hNV`);
  if (*cast(void**)&glVertexAttrib2hNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2hNV' not found!`);
  glVertexAttrib2hNV_Z(a00,a01,a02,);
}
alias glVertexAttrib2hvNV = glVertexAttrib2hvNV_Z;
__gshared glbfn_glVertexAttrib2hvNV glVertexAttrib2hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib2hvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib2hvNV_Z = glbindGetProcAddress(`glVertexAttrib2hvNV`);
  if (*cast(void**)&glVertexAttrib2hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2hvNV' not found!`);
  glVertexAttrib2hvNV_Z(a00,a01,);
}
alias glVertexAttrib3hNV = glVertexAttrib3hNV_Z;
__gshared glbfn_glVertexAttrib3hNV glVertexAttrib3hNV_Z = function void (uint a00,ushort a01,ushort a02,ushort a03) {
  glbfn_glVertexAttrib3hNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3hNV_loader (uint a00,ushort a01,ushort a02,ushort a03) {
  *cast(void**)&glVertexAttrib3hNV_Z = glbindGetProcAddress(`glVertexAttrib3hNV`);
  if (*cast(void**)&glVertexAttrib3hNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3hNV' not found!`);
  glVertexAttrib3hNV_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3hvNV = glVertexAttrib3hvNV_Z;
__gshared glbfn_glVertexAttrib3hvNV glVertexAttrib3hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib3hvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib3hvNV_Z = glbindGetProcAddress(`glVertexAttrib3hvNV`);
  if (*cast(void**)&glVertexAttrib3hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3hvNV' not found!`);
  glVertexAttrib3hvNV_Z(a00,a01,);
}
alias glVertexAttrib4hNV = glVertexAttrib4hNV_Z;
__gshared glbfn_glVertexAttrib4hNV glVertexAttrib4hNV_Z = function void (uint a00,ushort a01,ushort a02,ushort a03,ushort a04) {
  glbfn_glVertexAttrib4hNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4hNV_loader (uint a00,ushort a01,ushort a02,ushort a03,ushort a04) {
  *cast(void**)&glVertexAttrib4hNV_Z = glbindGetProcAddress(`glVertexAttrib4hNV`);
  if (*cast(void**)&glVertexAttrib4hNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4hNV' not found!`);
  glVertexAttrib4hNV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4hvNV = glVertexAttrib4hvNV_Z;
__gshared glbfn_glVertexAttrib4hvNV glVertexAttrib4hvNV_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttrib4hvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4hvNV_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttrib4hvNV_Z = glbindGetProcAddress(`glVertexAttrib4hvNV`);
  if (*cast(void**)&glVertexAttrib4hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4hvNV' not found!`);
  glVertexAttrib4hvNV_Z(a00,a01,);
}
alias glVertexAttribs1hvNV = glVertexAttribs1hvNV_Z;
__gshared glbfn_glVertexAttribs1hvNV glVertexAttribs1hvNV_Z = function void (uint a00,int a01,const(ushort)* a02) {
  glbfn_glVertexAttribs1hvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs1hvNV_loader (uint a00,int a01,const(ushort)* a02) {
  *cast(void**)&glVertexAttribs1hvNV_Z = glbindGetProcAddress(`glVertexAttribs1hvNV`);
  if (*cast(void**)&glVertexAttribs1hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs1hvNV' not found!`);
  glVertexAttribs1hvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs2hvNV = glVertexAttribs2hvNV_Z;
__gshared glbfn_glVertexAttribs2hvNV glVertexAttribs2hvNV_Z = function void (uint a00,int a01,const(ushort)* a02) {
  glbfn_glVertexAttribs2hvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs2hvNV_loader (uint a00,int a01,const(ushort)* a02) {
  *cast(void**)&glVertexAttribs2hvNV_Z = glbindGetProcAddress(`glVertexAttribs2hvNV`);
  if (*cast(void**)&glVertexAttribs2hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs2hvNV' not found!`);
  glVertexAttribs2hvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs3hvNV = glVertexAttribs3hvNV_Z;
__gshared glbfn_glVertexAttribs3hvNV glVertexAttribs3hvNV_Z = function void (uint a00,int a01,const(ushort)* a02) {
  glbfn_glVertexAttribs3hvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs3hvNV_loader (uint a00,int a01,const(ushort)* a02) {
  *cast(void**)&glVertexAttribs3hvNV_Z = glbindGetProcAddress(`glVertexAttribs3hvNV`);
  if (*cast(void**)&glVertexAttribs3hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs3hvNV' not found!`);
  glVertexAttribs3hvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs4hvNV = glVertexAttribs4hvNV_Z;
__gshared glbfn_glVertexAttribs4hvNV glVertexAttribs4hvNV_Z = function void (uint a00,int a01,const(ushort)* a02) {
  glbfn_glVertexAttribs4hvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs4hvNV_loader (uint a00,int a01,const(ushort)* a02) {
  *cast(void**)&glVertexAttribs4hvNV_Z = glbindGetProcAddress(`glVertexAttribs4hvNV`);
  if (*cast(void**)&glVertexAttribs4hvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs4hvNV' not found!`);
  glVertexAttribs4hvNV_Z(a00,a01,a02,);
}
alias glGetInternalformatSampleivNV = glGetInternalformatSampleivNV_Z;
__gshared glbfn_glGetInternalformatSampleivNV glGetInternalformatSampleivNV_Z = function void (uint a00,uint a01,int a02,uint a03,int a04,int* a05) {
  glbfn_glGetInternalformatSampleivNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glGetInternalformatSampleivNV_loader (uint a00,uint a01,int a02,uint a03,int a04,int* a05) {
  *cast(void**)&glGetInternalformatSampleivNV_Z = glbindGetProcAddress(`glGetInternalformatSampleivNV`);
  if (*cast(void**)&glGetInternalformatSampleivNV_Z is null) assert(0, `OpenGL function 'glGetInternalformatSampleivNV' not found!`);
  glGetInternalformatSampleivNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGenOcclusionQueriesNV = glGenOcclusionQueriesNV_Z;
__gshared glbfn_glGenOcclusionQueriesNV glGenOcclusionQueriesNV_Z = function void (int a00,uint* a01) {
  glbfn_glGenOcclusionQueriesNV_loader(a00,a01,);
};
private void glbfn_glGenOcclusionQueriesNV_loader (int a00,uint* a01) {
  *cast(void**)&glGenOcclusionQueriesNV_Z = glbindGetProcAddress(`glGenOcclusionQueriesNV`);
  if (*cast(void**)&glGenOcclusionQueriesNV_Z is null) assert(0, `OpenGL function 'glGenOcclusionQueriesNV' not found!`);
  glGenOcclusionQueriesNV_Z(a00,a01,);
}
alias glDeleteOcclusionQueriesNV = glDeleteOcclusionQueriesNV_Z;
__gshared glbfn_glDeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteOcclusionQueriesNV_loader(a00,a01,);
};
private void glbfn_glDeleteOcclusionQueriesNV_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteOcclusionQueriesNV_Z = glbindGetProcAddress(`glDeleteOcclusionQueriesNV`);
  if (*cast(void**)&glDeleteOcclusionQueriesNV_Z is null) assert(0, `OpenGL function 'glDeleteOcclusionQueriesNV' not found!`);
  glDeleteOcclusionQueriesNV_Z(a00,a01,);
}
alias glIsOcclusionQueryNV = glIsOcclusionQueryNV_Z;
__gshared glbfn_glIsOcclusionQueryNV glIsOcclusionQueryNV_Z = function ubyte (uint a00) {
  return glbfn_glIsOcclusionQueryNV_loader(a00,);
};
private ubyte glbfn_glIsOcclusionQueryNV_loader (uint a00) {
  *cast(void**)&glIsOcclusionQueryNV_Z = glbindGetProcAddress(`glIsOcclusionQueryNV`);
  if (*cast(void**)&glIsOcclusionQueryNV_Z is null) assert(0, `OpenGL function 'glIsOcclusionQueryNV' not found!`);
  return glIsOcclusionQueryNV_Z(a00,);
}
alias glBeginOcclusionQueryNV = glBeginOcclusionQueryNV_Z;
__gshared glbfn_glBeginOcclusionQueryNV glBeginOcclusionQueryNV_Z = function void (uint a00) {
  glbfn_glBeginOcclusionQueryNV_loader(a00,);
};
private void glbfn_glBeginOcclusionQueryNV_loader (uint a00) {
  *cast(void**)&glBeginOcclusionQueryNV_Z = glbindGetProcAddress(`glBeginOcclusionQueryNV`);
  if (*cast(void**)&glBeginOcclusionQueryNV_Z is null) assert(0, `OpenGL function 'glBeginOcclusionQueryNV' not found!`);
  glBeginOcclusionQueryNV_Z(a00,);
}
alias glEndOcclusionQueryNV = glEndOcclusionQueryNV_Z;
__gshared glbfn_glEndOcclusionQueryNV glEndOcclusionQueryNV_Z = function void () {
  glbfn_glEndOcclusionQueryNV_loader();
};
private void glbfn_glEndOcclusionQueryNV_loader () {
  *cast(void**)&glEndOcclusionQueryNV_Z = glbindGetProcAddress(`glEndOcclusionQueryNV`);
  if (*cast(void**)&glEndOcclusionQueryNV_Z is null) assert(0, `OpenGL function 'glEndOcclusionQueryNV' not found!`);
  glEndOcclusionQueryNV_Z();
}
alias glGetOcclusionQueryivNV = glGetOcclusionQueryivNV_Z;
__gshared glbfn_glGetOcclusionQueryivNV glGetOcclusionQueryivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetOcclusionQueryivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetOcclusionQueryivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetOcclusionQueryivNV_Z = glbindGetProcAddress(`glGetOcclusionQueryivNV`);
  if (*cast(void**)&glGetOcclusionQueryivNV_Z is null) assert(0, `OpenGL function 'glGetOcclusionQueryivNV' not found!`);
  glGetOcclusionQueryivNV_Z(a00,a01,a02,);
}
alias glGetOcclusionQueryuivNV = glGetOcclusionQueryuivNV_Z;
__gshared glbfn_glGetOcclusionQueryuivNV glGetOcclusionQueryuivNV_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetOcclusionQueryuivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetOcclusionQueryuivNV_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetOcclusionQueryuivNV_Z = glbindGetProcAddress(`glGetOcclusionQueryuivNV`);
  if (*cast(void**)&glGetOcclusionQueryuivNV_Z is null) assert(0, `OpenGL function 'glGetOcclusionQueryuivNV' not found!`);
  glGetOcclusionQueryuivNV_Z(a00,a01,a02,);
}
alias glProgramBufferParametersfvNV = glProgramBufferParametersfvNV_Z;
__gshared glbfn_glProgramBufferParametersfvNV glProgramBufferParametersfvNV_Z = function void (uint a00,uint a01,uint a02,int a03,const(float)* a04) {
  glbfn_glProgramBufferParametersfvNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramBufferParametersfvNV_loader (uint a00,uint a01,uint a02,int a03,const(float)* a04) {
  *cast(void**)&glProgramBufferParametersfvNV_Z = glbindGetProcAddress(`glProgramBufferParametersfvNV`);
  if (*cast(void**)&glProgramBufferParametersfvNV_Z is null) assert(0, `OpenGL function 'glProgramBufferParametersfvNV' not found!`);
  glProgramBufferParametersfvNV_Z(a00,a01,a02,a03,a04,);
}
alias glProgramBufferParametersIivNV = glProgramBufferParametersIivNV_Z;
__gshared glbfn_glProgramBufferParametersIivNV glProgramBufferParametersIivNV_Z = function void (uint a00,uint a01,uint a02,int a03,const(int)* a04) {
  glbfn_glProgramBufferParametersIivNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramBufferParametersIivNV_loader (uint a00,uint a01,uint a02,int a03,const(int)* a04) {
  *cast(void**)&glProgramBufferParametersIivNV_Z = glbindGetProcAddress(`glProgramBufferParametersIivNV`);
  if (*cast(void**)&glProgramBufferParametersIivNV_Z is null) assert(0, `OpenGL function 'glProgramBufferParametersIivNV' not found!`);
  glProgramBufferParametersIivNV_Z(a00,a01,a02,a03,a04,);
}
alias glProgramBufferParametersIuivNV = glProgramBufferParametersIuivNV_Z;
__gshared glbfn_glProgramBufferParametersIuivNV glProgramBufferParametersIuivNV_Z = function void (uint a00,uint a01,uint a02,int a03,const(uint)* a04) {
  glbfn_glProgramBufferParametersIuivNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramBufferParametersIuivNV_loader (uint a00,uint a01,uint a02,int a03,const(uint)* a04) {
  *cast(void**)&glProgramBufferParametersIuivNV_Z = glbindGetProcAddress(`glProgramBufferParametersIuivNV`);
  if (*cast(void**)&glProgramBufferParametersIuivNV_Z is null) assert(0, `OpenGL function 'glProgramBufferParametersIuivNV' not found!`);
  glProgramBufferParametersIuivNV_Z(a00,a01,a02,a03,a04,);
}
alias glGenPathsNV = glGenPathsNV_Z;
__gshared glbfn_glGenPathsNV glGenPathsNV_Z = function uint (int a00) {
  return glbfn_glGenPathsNV_loader(a00,);
};
private uint glbfn_glGenPathsNV_loader (int a00) {
  *cast(void**)&glGenPathsNV_Z = glbindGetProcAddress(`glGenPathsNV`);
  if (*cast(void**)&glGenPathsNV_Z is null) assert(0, `OpenGL function 'glGenPathsNV' not found!`);
  return glGenPathsNV_Z(a00,);
}
alias glDeletePathsNV = glDeletePathsNV_Z;
__gshared glbfn_glDeletePathsNV glDeletePathsNV_Z = function void (uint a00,int a01) {
  glbfn_glDeletePathsNV_loader(a00,a01,);
};
private void glbfn_glDeletePathsNV_loader (uint a00,int a01) {
  *cast(void**)&glDeletePathsNV_Z = glbindGetProcAddress(`glDeletePathsNV`);
  if (*cast(void**)&glDeletePathsNV_Z is null) assert(0, `OpenGL function 'glDeletePathsNV' not found!`);
  glDeletePathsNV_Z(a00,a01,);
}
alias glIsPathNV = glIsPathNV_Z;
__gshared glbfn_glIsPathNV glIsPathNV_Z = function ubyte (uint a00) {
  return glbfn_glIsPathNV_loader(a00,);
};
private ubyte glbfn_glIsPathNV_loader (uint a00) {
  *cast(void**)&glIsPathNV_Z = glbindGetProcAddress(`glIsPathNV`);
  if (*cast(void**)&glIsPathNV_Z is null) assert(0, `OpenGL function 'glIsPathNV' not found!`);
  return glIsPathNV_Z(a00,);
}
alias glPathCommandsNV = glPathCommandsNV_Z;
__gshared glbfn_glPathCommandsNV glPathCommandsNV_Z = function void (uint a00,int a01,const(ubyte)* a02,int a03,uint a04,const(void)* a05) {
  glbfn_glPathCommandsNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glPathCommandsNV_loader (uint a00,int a01,const(ubyte)* a02,int a03,uint a04,const(void)* a05) {
  *cast(void**)&glPathCommandsNV_Z = glbindGetProcAddress(`glPathCommandsNV`);
  if (*cast(void**)&glPathCommandsNV_Z is null) assert(0, `OpenGL function 'glPathCommandsNV' not found!`);
  glPathCommandsNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glPathCoordsNV = glPathCoordsNV_Z;
__gshared glbfn_glPathCoordsNV glPathCoordsNV_Z = function void (uint a00,int a01,uint a02,const(void)* a03) {
  glbfn_glPathCoordsNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glPathCoordsNV_loader (uint a00,int a01,uint a02,const(void)* a03) {
  *cast(void**)&glPathCoordsNV_Z = glbindGetProcAddress(`glPathCoordsNV`);
  if (*cast(void**)&glPathCoordsNV_Z is null) assert(0, `OpenGL function 'glPathCoordsNV' not found!`);
  glPathCoordsNV_Z(a00,a01,a02,a03,);
}
alias glPathSubCommandsNV = glPathSubCommandsNV_Z;
__gshared glbfn_glPathSubCommandsNV glPathSubCommandsNV_Z = function void (uint a00,int a01,int a02,int a03,const(ubyte)* a04,int a05,uint a06,const(void)* a07) {
  glbfn_glPathSubCommandsNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glPathSubCommandsNV_loader (uint a00,int a01,int a02,int a03,const(ubyte)* a04,int a05,uint a06,const(void)* a07) {
  *cast(void**)&glPathSubCommandsNV_Z = glbindGetProcAddress(`glPathSubCommandsNV`);
  if (*cast(void**)&glPathSubCommandsNV_Z is null) assert(0, `OpenGL function 'glPathSubCommandsNV' not found!`);
  glPathSubCommandsNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glPathSubCoordsNV = glPathSubCoordsNV_Z;
__gshared glbfn_glPathSubCoordsNV glPathSubCoordsNV_Z = function void (uint a00,int a01,int a02,uint a03,const(void)* a04) {
  glbfn_glPathSubCoordsNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glPathSubCoordsNV_loader (uint a00,int a01,int a02,uint a03,const(void)* a04) {
  *cast(void**)&glPathSubCoordsNV_Z = glbindGetProcAddress(`glPathSubCoordsNV`);
  if (*cast(void**)&glPathSubCoordsNV_Z is null) assert(0, `OpenGL function 'glPathSubCoordsNV' not found!`);
  glPathSubCoordsNV_Z(a00,a01,a02,a03,a04,);
}
alias glPathStringNV = glPathStringNV_Z;
__gshared glbfn_glPathStringNV glPathStringNV_Z = function void (uint a00,uint a01,int a02,const(void)* a03) {
  glbfn_glPathStringNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glPathStringNV_loader (uint a00,uint a01,int a02,const(void)* a03) {
  *cast(void**)&glPathStringNV_Z = glbindGetProcAddress(`glPathStringNV`);
  if (*cast(void**)&glPathStringNV_Z is null) assert(0, `OpenGL function 'glPathStringNV' not found!`);
  glPathStringNV_Z(a00,a01,a02,a03,);
}
alias glPathGlyphsNV = glPathGlyphsNV_Z;
__gshared glbfn_glPathGlyphsNV glPathGlyphsNV_Z = function void (uint a00,uint a01,const(void)* a02,uint a03,int a04,uint a05,const(void)* a06,uint a07,uint a08,float a09) {
  glbfn_glPathGlyphsNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glPathGlyphsNV_loader (uint a00,uint a01,const(void)* a02,uint a03,int a04,uint a05,const(void)* a06,uint a07,uint a08,float a09) {
  *cast(void**)&glPathGlyphsNV_Z = glbindGetProcAddress(`glPathGlyphsNV`);
  if (*cast(void**)&glPathGlyphsNV_Z is null) assert(0, `OpenGL function 'glPathGlyphsNV' not found!`);
  glPathGlyphsNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glPathGlyphRangeNV = glPathGlyphRangeNV_Z;
__gshared glbfn_glPathGlyphRangeNV glPathGlyphRangeNV_Z = function void (uint a00,uint a01,const(void)* a02,uint a03,uint a04,int a05,uint a06,uint a07,float a08) {
  glbfn_glPathGlyphRangeNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glPathGlyphRangeNV_loader (uint a00,uint a01,const(void)* a02,uint a03,uint a04,int a05,uint a06,uint a07,float a08) {
  *cast(void**)&glPathGlyphRangeNV_Z = glbindGetProcAddress(`glPathGlyphRangeNV`);
  if (*cast(void**)&glPathGlyphRangeNV_Z is null) assert(0, `OpenGL function 'glPathGlyphRangeNV' not found!`);
  glPathGlyphRangeNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glWeightPathsNV = glWeightPathsNV_Z;
__gshared glbfn_glWeightPathsNV glWeightPathsNV_Z = function void (uint a00,int a01,const(uint)* a02,const(float)* a03) {
  glbfn_glWeightPathsNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glWeightPathsNV_loader (uint a00,int a01,const(uint)* a02,const(float)* a03) {
  *cast(void**)&glWeightPathsNV_Z = glbindGetProcAddress(`glWeightPathsNV`);
  if (*cast(void**)&glWeightPathsNV_Z is null) assert(0, `OpenGL function 'glWeightPathsNV' not found!`);
  glWeightPathsNV_Z(a00,a01,a02,a03,);
}
alias glCopyPathNV = glCopyPathNV_Z;
__gshared glbfn_glCopyPathNV glCopyPathNV_Z = function void (uint a00,uint a01) {
  glbfn_glCopyPathNV_loader(a00,a01,);
};
private void glbfn_glCopyPathNV_loader (uint a00,uint a01) {
  *cast(void**)&glCopyPathNV_Z = glbindGetProcAddress(`glCopyPathNV`);
  if (*cast(void**)&glCopyPathNV_Z is null) assert(0, `OpenGL function 'glCopyPathNV' not found!`);
  glCopyPathNV_Z(a00,a01,);
}
alias glInterpolatePathsNV = glInterpolatePathsNV_Z;
__gshared glbfn_glInterpolatePathsNV glInterpolatePathsNV_Z = function void (uint a00,uint a01,uint a02,float a03) {
  glbfn_glInterpolatePathsNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glInterpolatePathsNV_loader (uint a00,uint a01,uint a02,float a03) {
  *cast(void**)&glInterpolatePathsNV_Z = glbindGetProcAddress(`glInterpolatePathsNV`);
  if (*cast(void**)&glInterpolatePathsNV_Z is null) assert(0, `OpenGL function 'glInterpolatePathsNV' not found!`);
  glInterpolatePathsNV_Z(a00,a01,a02,a03,);
}
alias glTransformPathNV = glTransformPathNV_Z;
__gshared glbfn_glTransformPathNV glTransformPathNV_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glTransformPathNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glTransformPathNV_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glTransformPathNV_Z = glbindGetProcAddress(`glTransformPathNV`);
  if (*cast(void**)&glTransformPathNV_Z is null) assert(0, `OpenGL function 'glTransformPathNV' not found!`);
  glTransformPathNV_Z(a00,a01,a02,a03,);
}
alias glPathParameterivNV = glPathParameterivNV_Z;
__gshared glbfn_glPathParameterivNV glPathParameterivNV_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glPathParameterivNV_loader(a00,a01,a02,);
};
private void glbfn_glPathParameterivNV_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glPathParameterivNV_Z = glbindGetProcAddress(`glPathParameterivNV`);
  if (*cast(void**)&glPathParameterivNV_Z is null) assert(0, `OpenGL function 'glPathParameterivNV' not found!`);
  glPathParameterivNV_Z(a00,a01,a02,);
}
alias glPathParameteriNV = glPathParameteriNV_Z;
__gshared glbfn_glPathParameteriNV glPathParameteriNV_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glPathParameteriNV_loader(a00,a01,a02,);
};
private void glbfn_glPathParameteriNV_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glPathParameteriNV_Z = glbindGetProcAddress(`glPathParameteriNV`);
  if (*cast(void**)&glPathParameteriNV_Z is null) assert(0, `OpenGL function 'glPathParameteriNV' not found!`);
  glPathParameteriNV_Z(a00,a01,a02,);
}
alias glPathParameterfvNV = glPathParameterfvNV_Z;
__gshared glbfn_glPathParameterfvNV glPathParameterfvNV_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glPathParameterfvNV_loader(a00,a01,a02,);
};
private void glbfn_glPathParameterfvNV_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glPathParameterfvNV_Z = glbindGetProcAddress(`glPathParameterfvNV`);
  if (*cast(void**)&glPathParameterfvNV_Z is null) assert(0, `OpenGL function 'glPathParameterfvNV' not found!`);
  glPathParameterfvNV_Z(a00,a01,a02,);
}
alias glPathParameterfNV = glPathParameterfNV_Z;
__gshared glbfn_glPathParameterfNV glPathParameterfNV_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glPathParameterfNV_loader(a00,a01,a02,);
};
private void glbfn_glPathParameterfNV_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glPathParameterfNV_Z = glbindGetProcAddress(`glPathParameterfNV`);
  if (*cast(void**)&glPathParameterfNV_Z is null) assert(0, `OpenGL function 'glPathParameterfNV' not found!`);
  glPathParameterfNV_Z(a00,a01,a02,);
}
alias glPathDashArrayNV = glPathDashArrayNV_Z;
__gshared glbfn_glPathDashArrayNV glPathDashArrayNV_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glPathDashArrayNV_loader(a00,a01,a02,);
};
private void glbfn_glPathDashArrayNV_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glPathDashArrayNV_Z = glbindGetProcAddress(`glPathDashArrayNV`);
  if (*cast(void**)&glPathDashArrayNV_Z is null) assert(0, `OpenGL function 'glPathDashArrayNV' not found!`);
  glPathDashArrayNV_Z(a00,a01,a02,);
}
alias glPathStencilFuncNV = glPathStencilFuncNV_Z;
__gshared glbfn_glPathStencilFuncNV glPathStencilFuncNV_Z = function void (uint a00,int a01,uint a02) {
  glbfn_glPathStencilFuncNV_loader(a00,a01,a02,);
};
private void glbfn_glPathStencilFuncNV_loader (uint a00,int a01,uint a02) {
  *cast(void**)&glPathStencilFuncNV_Z = glbindGetProcAddress(`glPathStencilFuncNV`);
  if (*cast(void**)&glPathStencilFuncNV_Z is null) assert(0, `OpenGL function 'glPathStencilFuncNV' not found!`);
  glPathStencilFuncNV_Z(a00,a01,a02,);
}
alias glPathStencilDepthOffsetNV = glPathStencilDepthOffsetNV_Z;
__gshared glbfn_glPathStencilDepthOffsetNV glPathStencilDepthOffsetNV_Z = function void (float a00,float a01) {
  glbfn_glPathStencilDepthOffsetNV_loader(a00,a01,);
};
private void glbfn_glPathStencilDepthOffsetNV_loader (float a00,float a01) {
  *cast(void**)&glPathStencilDepthOffsetNV_Z = glbindGetProcAddress(`glPathStencilDepthOffsetNV`);
  if (*cast(void**)&glPathStencilDepthOffsetNV_Z is null) assert(0, `OpenGL function 'glPathStencilDepthOffsetNV' not found!`);
  glPathStencilDepthOffsetNV_Z(a00,a01,);
}
alias glStencilFillPathNV = glStencilFillPathNV_Z;
__gshared glbfn_glStencilFillPathNV glStencilFillPathNV_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glStencilFillPathNV_loader(a00,a01,a02,);
};
private void glbfn_glStencilFillPathNV_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glStencilFillPathNV_Z = glbindGetProcAddress(`glStencilFillPathNV`);
  if (*cast(void**)&glStencilFillPathNV_Z is null) assert(0, `OpenGL function 'glStencilFillPathNV' not found!`);
  glStencilFillPathNV_Z(a00,a01,a02,);
}
alias glStencilStrokePathNV = glStencilStrokePathNV_Z;
__gshared glbfn_glStencilStrokePathNV glStencilStrokePathNV_Z = function void (uint a00,int a01,uint a02) {
  glbfn_glStencilStrokePathNV_loader(a00,a01,a02,);
};
private void glbfn_glStencilStrokePathNV_loader (uint a00,int a01,uint a02) {
  *cast(void**)&glStencilStrokePathNV_Z = glbindGetProcAddress(`glStencilStrokePathNV`);
  if (*cast(void**)&glStencilStrokePathNV_Z is null) assert(0, `OpenGL function 'glStencilStrokePathNV' not found!`);
  glStencilStrokePathNV_Z(a00,a01,a02,);
}
alias glStencilFillPathInstancedNV = glStencilFillPathInstancedNV_Z;
__gshared glbfn_glStencilFillPathInstancedNV glStencilFillPathInstancedNV_Z = function void (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,uint a06,const(float)* a07) {
  glbfn_glStencilFillPathInstancedNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glStencilFillPathInstancedNV_loader (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,uint a06,const(float)* a07) {
  *cast(void**)&glStencilFillPathInstancedNV_Z = glbindGetProcAddress(`glStencilFillPathInstancedNV`);
  if (*cast(void**)&glStencilFillPathInstancedNV_Z is null) assert(0, `OpenGL function 'glStencilFillPathInstancedNV' not found!`);
  glStencilFillPathInstancedNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glStencilStrokePathInstancedNV = glStencilStrokePathInstancedNV_Z;
__gshared glbfn_glStencilStrokePathInstancedNV glStencilStrokePathInstancedNV_Z = function void (int a00,uint a01,const(void)* a02,uint a03,int a04,uint a05,uint a06,const(float)* a07) {
  glbfn_glStencilStrokePathInstancedNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glStencilStrokePathInstancedNV_loader (int a00,uint a01,const(void)* a02,uint a03,int a04,uint a05,uint a06,const(float)* a07) {
  *cast(void**)&glStencilStrokePathInstancedNV_Z = glbindGetProcAddress(`glStencilStrokePathInstancedNV`);
  if (*cast(void**)&glStencilStrokePathInstancedNV_Z is null) assert(0, `OpenGL function 'glStencilStrokePathInstancedNV' not found!`);
  glStencilStrokePathInstancedNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glPathCoverDepthFuncNV = glPathCoverDepthFuncNV_Z;
__gshared glbfn_glPathCoverDepthFuncNV glPathCoverDepthFuncNV_Z = function void (uint a00) {
  glbfn_glPathCoverDepthFuncNV_loader(a00,);
};
private void glbfn_glPathCoverDepthFuncNV_loader (uint a00) {
  *cast(void**)&glPathCoverDepthFuncNV_Z = glbindGetProcAddress(`glPathCoverDepthFuncNV`);
  if (*cast(void**)&glPathCoverDepthFuncNV_Z is null) assert(0, `OpenGL function 'glPathCoverDepthFuncNV' not found!`);
  glPathCoverDepthFuncNV_Z(a00,);
}
alias glCoverFillPathNV = glCoverFillPathNV_Z;
__gshared glbfn_glCoverFillPathNV glCoverFillPathNV_Z = function void (uint a00,uint a01) {
  glbfn_glCoverFillPathNV_loader(a00,a01,);
};
private void glbfn_glCoverFillPathNV_loader (uint a00,uint a01) {
  *cast(void**)&glCoverFillPathNV_Z = glbindGetProcAddress(`glCoverFillPathNV`);
  if (*cast(void**)&glCoverFillPathNV_Z is null) assert(0, `OpenGL function 'glCoverFillPathNV' not found!`);
  glCoverFillPathNV_Z(a00,a01,);
}
alias glCoverStrokePathNV = glCoverStrokePathNV_Z;
__gshared glbfn_glCoverStrokePathNV glCoverStrokePathNV_Z = function void (uint a00,uint a01) {
  glbfn_glCoverStrokePathNV_loader(a00,a01,);
};
private void glbfn_glCoverStrokePathNV_loader (uint a00,uint a01) {
  *cast(void**)&glCoverStrokePathNV_Z = glbindGetProcAddress(`glCoverStrokePathNV`);
  if (*cast(void**)&glCoverStrokePathNV_Z is null) assert(0, `OpenGL function 'glCoverStrokePathNV' not found!`);
  glCoverStrokePathNV_Z(a00,a01,);
}
alias glCoverFillPathInstancedNV = glCoverFillPathInstancedNV_Z;
__gshared glbfn_glCoverFillPathInstancedNV glCoverFillPathInstancedNV_Z = function void (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,const(float)* a06) {
  glbfn_glCoverFillPathInstancedNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCoverFillPathInstancedNV_loader (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,const(float)* a06) {
  *cast(void**)&glCoverFillPathInstancedNV_Z = glbindGetProcAddress(`glCoverFillPathInstancedNV`);
  if (*cast(void**)&glCoverFillPathInstancedNV_Z is null) assert(0, `OpenGL function 'glCoverFillPathInstancedNV' not found!`);
  glCoverFillPathInstancedNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glCoverStrokePathInstancedNV = glCoverStrokePathInstancedNV_Z;
__gshared glbfn_glCoverStrokePathInstancedNV glCoverStrokePathInstancedNV_Z = function void (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,const(float)* a06) {
  glbfn_glCoverStrokePathInstancedNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glCoverStrokePathInstancedNV_loader (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,const(float)* a06) {
  *cast(void**)&glCoverStrokePathInstancedNV_Z = glbindGetProcAddress(`glCoverStrokePathInstancedNV`);
  if (*cast(void**)&glCoverStrokePathInstancedNV_Z is null) assert(0, `OpenGL function 'glCoverStrokePathInstancedNV' not found!`);
  glCoverStrokePathInstancedNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetPathParameterivNV = glGetPathParameterivNV_Z;
__gshared glbfn_glGetPathParameterivNV glGetPathParameterivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetPathParameterivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetPathParameterivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetPathParameterivNV_Z = glbindGetProcAddress(`glGetPathParameterivNV`);
  if (*cast(void**)&glGetPathParameterivNV_Z is null) assert(0, `OpenGL function 'glGetPathParameterivNV' not found!`);
  glGetPathParameterivNV_Z(a00,a01,a02,);
}
alias glGetPathParameterfvNV = glGetPathParameterfvNV_Z;
__gshared glbfn_glGetPathParameterfvNV glGetPathParameterfvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetPathParameterfvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetPathParameterfvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetPathParameterfvNV_Z = glbindGetProcAddress(`glGetPathParameterfvNV`);
  if (*cast(void**)&glGetPathParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetPathParameterfvNV' not found!`);
  glGetPathParameterfvNV_Z(a00,a01,a02,);
}
alias glGetPathCommandsNV = glGetPathCommandsNV_Z;
__gshared glbfn_glGetPathCommandsNV glGetPathCommandsNV_Z = function void (uint a00,ubyte* a01) {
  glbfn_glGetPathCommandsNV_loader(a00,a01,);
};
private void glbfn_glGetPathCommandsNV_loader (uint a00,ubyte* a01) {
  *cast(void**)&glGetPathCommandsNV_Z = glbindGetProcAddress(`glGetPathCommandsNV`);
  if (*cast(void**)&glGetPathCommandsNV_Z is null) assert(0, `OpenGL function 'glGetPathCommandsNV' not found!`);
  glGetPathCommandsNV_Z(a00,a01,);
}
alias glGetPathCoordsNV = glGetPathCoordsNV_Z;
__gshared glbfn_glGetPathCoordsNV glGetPathCoordsNV_Z = function void (uint a00,float* a01) {
  glbfn_glGetPathCoordsNV_loader(a00,a01,);
};
private void glbfn_glGetPathCoordsNV_loader (uint a00,float* a01) {
  *cast(void**)&glGetPathCoordsNV_Z = glbindGetProcAddress(`glGetPathCoordsNV`);
  if (*cast(void**)&glGetPathCoordsNV_Z is null) assert(0, `OpenGL function 'glGetPathCoordsNV' not found!`);
  glGetPathCoordsNV_Z(a00,a01,);
}
alias glGetPathDashArrayNV = glGetPathDashArrayNV_Z;
__gshared glbfn_glGetPathDashArrayNV glGetPathDashArrayNV_Z = function void (uint a00,float* a01) {
  glbfn_glGetPathDashArrayNV_loader(a00,a01,);
};
private void glbfn_glGetPathDashArrayNV_loader (uint a00,float* a01) {
  *cast(void**)&glGetPathDashArrayNV_Z = glbindGetProcAddress(`glGetPathDashArrayNV`);
  if (*cast(void**)&glGetPathDashArrayNV_Z is null) assert(0, `OpenGL function 'glGetPathDashArrayNV' not found!`);
  glGetPathDashArrayNV_Z(a00,a01,);
}
alias glGetPathMetricsNV = glGetPathMetricsNV_Z;
__gshared glbfn_glGetPathMetricsNV glGetPathMetricsNV_Z = function void (uint a00,int a01,uint a02,const(void)* a03,uint a04,int a05,float* a06) {
  glbfn_glGetPathMetricsNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetPathMetricsNV_loader (uint a00,int a01,uint a02,const(void)* a03,uint a04,int a05,float* a06) {
  *cast(void**)&glGetPathMetricsNV_Z = glbindGetProcAddress(`glGetPathMetricsNV`);
  if (*cast(void**)&glGetPathMetricsNV_Z is null) assert(0, `OpenGL function 'glGetPathMetricsNV' not found!`);
  glGetPathMetricsNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetPathMetricRangeNV = glGetPathMetricRangeNV_Z;
__gshared glbfn_glGetPathMetricRangeNV glGetPathMetricRangeNV_Z = function void (uint a00,uint a01,int a02,int a03,float* a04) {
  glbfn_glGetPathMetricRangeNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetPathMetricRangeNV_loader (uint a00,uint a01,int a02,int a03,float* a04) {
  *cast(void**)&glGetPathMetricRangeNV_Z = glbindGetProcAddress(`glGetPathMetricRangeNV`);
  if (*cast(void**)&glGetPathMetricRangeNV_Z is null) assert(0, `OpenGL function 'glGetPathMetricRangeNV' not found!`);
  glGetPathMetricRangeNV_Z(a00,a01,a02,a03,a04,);
}
alias glGetPathSpacingNV = glGetPathSpacingNV_Z;
__gshared glbfn_glGetPathSpacingNV glGetPathSpacingNV_Z = function void (uint a00,int a01,uint a02,const(void)* a03,uint a04,float a05,float a06,uint a07,float* a08) {
  glbfn_glGetPathSpacingNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glGetPathSpacingNV_loader (uint a00,int a01,uint a02,const(void)* a03,uint a04,float a05,float a06,uint a07,float* a08) {
  *cast(void**)&glGetPathSpacingNV_Z = glbindGetProcAddress(`glGetPathSpacingNV`);
  if (*cast(void**)&glGetPathSpacingNV_Z is null) assert(0, `OpenGL function 'glGetPathSpacingNV' not found!`);
  glGetPathSpacingNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glIsPointInFillPathNV = glIsPointInFillPathNV_Z;
__gshared glbfn_glIsPointInFillPathNV glIsPointInFillPathNV_Z = function ubyte (uint a00,uint a01,float a02,float a03) {
  return glbfn_glIsPointInFillPathNV_loader(a00,a01,a02,a03,);
};
private ubyte glbfn_glIsPointInFillPathNV_loader (uint a00,uint a01,float a02,float a03) {
  *cast(void**)&glIsPointInFillPathNV_Z = glbindGetProcAddress(`glIsPointInFillPathNV`);
  if (*cast(void**)&glIsPointInFillPathNV_Z is null) assert(0, `OpenGL function 'glIsPointInFillPathNV' not found!`);
  return glIsPointInFillPathNV_Z(a00,a01,a02,a03,);
}
alias glIsPointInStrokePathNV = glIsPointInStrokePathNV_Z;
__gshared glbfn_glIsPointInStrokePathNV glIsPointInStrokePathNV_Z = function ubyte (uint a00,float a01,float a02) {
  return glbfn_glIsPointInStrokePathNV_loader(a00,a01,a02,);
};
private ubyte glbfn_glIsPointInStrokePathNV_loader (uint a00,float a01,float a02) {
  *cast(void**)&glIsPointInStrokePathNV_Z = glbindGetProcAddress(`glIsPointInStrokePathNV`);
  if (*cast(void**)&glIsPointInStrokePathNV_Z is null) assert(0, `OpenGL function 'glIsPointInStrokePathNV' not found!`);
  return glIsPointInStrokePathNV_Z(a00,a01,a02,);
}
alias glGetPathLengthNV = glGetPathLengthNV_Z;
__gshared glbfn_glGetPathLengthNV glGetPathLengthNV_Z = function float (uint a00,int a01,int a02) {
  return glbfn_glGetPathLengthNV_loader(a00,a01,a02,);
};
private float glbfn_glGetPathLengthNV_loader (uint a00,int a01,int a02) {
  *cast(void**)&glGetPathLengthNV_Z = glbindGetProcAddress(`glGetPathLengthNV`);
  if (*cast(void**)&glGetPathLengthNV_Z is null) assert(0, `OpenGL function 'glGetPathLengthNV' not found!`);
  return glGetPathLengthNV_Z(a00,a01,a02,);
}
alias glPointAlongPathNV = glPointAlongPathNV_Z;
__gshared glbfn_glPointAlongPathNV glPointAlongPathNV_Z = function ubyte (uint a00,int a01,int a02,float a03,float* a04,float* a05,float* a06,float* a07) {
  return glbfn_glPointAlongPathNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private ubyte glbfn_glPointAlongPathNV_loader (uint a00,int a01,int a02,float a03,float* a04,float* a05,float* a06,float* a07) {
  *cast(void**)&glPointAlongPathNV_Z = glbindGetProcAddress(`glPointAlongPathNV`);
  if (*cast(void**)&glPointAlongPathNV_Z is null) assert(0, `OpenGL function 'glPointAlongPathNV' not found!`);
  return glPointAlongPathNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glMatrixLoad3x2fNV = glMatrixLoad3x2fNV_Z;
__gshared glbfn_glMatrixLoad3x2fNV glMatrixLoad3x2fNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixLoad3x2fNV_loader(a00,a01,);
};
private void glbfn_glMatrixLoad3x2fNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixLoad3x2fNV_Z = glbindGetProcAddress(`glMatrixLoad3x2fNV`);
  if (*cast(void**)&glMatrixLoad3x2fNV_Z is null) assert(0, `OpenGL function 'glMatrixLoad3x2fNV' not found!`);
  glMatrixLoad3x2fNV_Z(a00,a01,);
}
alias glMatrixLoad3x3fNV = glMatrixLoad3x3fNV_Z;
__gshared glbfn_glMatrixLoad3x3fNV glMatrixLoad3x3fNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixLoad3x3fNV_loader(a00,a01,);
};
private void glbfn_glMatrixLoad3x3fNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixLoad3x3fNV_Z = glbindGetProcAddress(`glMatrixLoad3x3fNV`);
  if (*cast(void**)&glMatrixLoad3x3fNV_Z is null) assert(0, `OpenGL function 'glMatrixLoad3x3fNV' not found!`);
  glMatrixLoad3x3fNV_Z(a00,a01,);
}
alias glMatrixLoadTranspose3x3fNV = glMatrixLoadTranspose3x3fNV_Z;
__gshared glbfn_glMatrixLoadTranspose3x3fNV glMatrixLoadTranspose3x3fNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixLoadTranspose3x3fNV_loader(a00,a01,);
};
private void glbfn_glMatrixLoadTranspose3x3fNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixLoadTranspose3x3fNV_Z = glbindGetProcAddress(`glMatrixLoadTranspose3x3fNV`);
  if (*cast(void**)&glMatrixLoadTranspose3x3fNV_Z is null) assert(0, `OpenGL function 'glMatrixLoadTranspose3x3fNV' not found!`);
  glMatrixLoadTranspose3x3fNV_Z(a00,a01,);
}
alias glMatrixMult3x2fNV = glMatrixMult3x2fNV_Z;
__gshared glbfn_glMatrixMult3x2fNV glMatrixMult3x2fNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixMult3x2fNV_loader(a00,a01,);
};
private void glbfn_glMatrixMult3x2fNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixMult3x2fNV_Z = glbindGetProcAddress(`glMatrixMult3x2fNV`);
  if (*cast(void**)&glMatrixMult3x2fNV_Z is null) assert(0, `OpenGL function 'glMatrixMult3x2fNV' not found!`);
  glMatrixMult3x2fNV_Z(a00,a01,);
}
alias glMatrixMult3x3fNV = glMatrixMult3x3fNV_Z;
__gshared glbfn_glMatrixMult3x3fNV glMatrixMult3x3fNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixMult3x3fNV_loader(a00,a01,);
};
private void glbfn_glMatrixMult3x3fNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixMult3x3fNV_Z = glbindGetProcAddress(`glMatrixMult3x3fNV`);
  if (*cast(void**)&glMatrixMult3x3fNV_Z is null) assert(0, `OpenGL function 'glMatrixMult3x3fNV' not found!`);
  glMatrixMult3x3fNV_Z(a00,a01,);
}
alias glMatrixMultTranspose3x3fNV = glMatrixMultTranspose3x3fNV_Z;
__gshared glbfn_glMatrixMultTranspose3x3fNV glMatrixMultTranspose3x3fNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glMatrixMultTranspose3x3fNV_loader(a00,a01,);
};
private void glbfn_glMatrixMultTranspose3x3fNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glMatrixMultTranspose3x3fNV_Z = glbindGetProcAddress(`glMatrixMultTranspose3x3fNV`);
  if (*cast(void**)&glMatrixMultTranspose3x3fNV_Z is null) assert(0, `OpenGL function 'glMatrixMultTranspose3x3fNV' not found!`);
  glMatrixMultTranspose3x3fNV_Z(a00,a01,);
}
alias glStencilThenCoverFillPathNV = glStencilThenCoverFillPathNV_Z;
__gshared glbfn_glStencilThenCoverFillPathNV glStencilThenCoverFillPathNV_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glStencilThenCoverFillPathNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glStencilThenCoverFillPathNV_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glStencilThenCoverFillPathNV_Z = glbindGetProcAddress(`glStencilThenCoverFillPathNV`);
  if (*cast(void**)&glStencilThenCoverFillPathNV_Z is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathNV' not found!`);
  glStencilThenCoverFillPathNV_Z(a00,a01,a02,a03,);
}
alias glStencilThenCoverStrokePathNV = glStencilThenCoverStrokePathNV_Z;
__gshared glbfn_glStencilThenCoverStrokePathNV glStencilThenCoverStrokePathNV_Z = function void (uint a00,int a01,uint a02,uint a03) {
  glbfn_glStencilThenCoverStrokePathNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glStencilThenCoverStrokePathNV_loader (uint a00,int a01,uint a02,uint a03) {
  *cast(void**)&glStencilThenCoverStrokePathNV_Z = glbindGetProcAddress(`glStencilThenCoverStrokePathNV`);
  if (*cast(void**)&glStencilThenCoverStrokePathNV_Z is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathNV' not found!`);
  glStencilThenCoverStrokePathNV_Z(a00,a01,a02,a03,);
}
alias glStencilThenCoverFillPathInstancedNV = glStencilThenCoverFillPathInstancedNV_Z;
__gshared glbfn_glStencilThenCoverFillPathInstancedNV glStencilThenCoverFillPathInstancedNV_Z = function void (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,uint a06,uint a07,const(float)* a08) {
  glbfn_glStencilThenCoverFillPathInstancedNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glStencilThenCoverFillPathInstancedNV_loader (int a00,uint a01,const(void)* a02,uint a03,uint a04,uint a05,uint a06,uint a07,const(float)* a08) {
  *cast(void**)&glStencilThenCoverFillPathInstancedNV_Z = glbindGetProcAddress(`glStencilThenCoverFillPathInstancedNV`);
  if (*cast(void**)&glStencilThenCoverFillPathInstancedNV_Z is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathInstancedNV' not found!`);
  glStencilThenCoverFillPathInstancedNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glStencilThenCoverStrokePathInstancedNV = glStencilThenCoverStrokePathInstancedNV_Z;
__gshared glbfn_glStencilThenCoverStrokePathInstancedNV glStencilThenCoverStrokePathInstancedNV_Z = function void (int a00,uint a01,const(void)* a02,uint a03,int a04,uint a05,uint a06,uint a07,const(float)* a08) {
  glbfn_glStencilThenCoverStrokePathInstancedNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glStencilThenCoverStrokePathInstancedNV_loader (int a00,uint a01,const(void)* a02,uint a03,int a04,uint a05,uint a06,uint a07,const(float)* a08) {
  *cast(void**)&glStencilThenCoverStrokePathInstancedNV_Z = glbindGetProcAddress(`glStencilThenCoverStrokePathInstancedNV`);
  if (*cast(void**)&glStencilThenCoverStrokePathInstancedNV_Z is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathInstancedNV' not found!`);
  glStencilThenCoverStrokePathInstancedNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glPathGlyphIndexRangeNV = glPathGlyphIndexRangeNV_Z;
__gshared glbfn_glPathGlyphIndexRangeNV glPathGlyphIndexRangeNV_Z = function uint (uint a00,const(void)* a01,uint a02,uint a03,float a04,uint* a05) {
  return glbfn_glPathGlyphIndexRangeNV_loader(a00,a01,a02,a03,a04,a05,);
};
private uint glbfn_glPathGlyphIndexRangeNV_loader (uint a00,const(void)* a01,uint a02,uint a03,float a04,uint* a05) {
  *cast(void**)&glPathGlyphIndexRangeNV_Z = glbindGetProcAddress(`glPathGlyphIndexRangeNV`);
  if (*cast(void**)&glPathGlyphIndexRangeNV_Z is null) assert(0, `OpenGL function 'glPathGlyphIndexRangeNV' not found!`);
  return glPathGlyphIndexRangeNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glPathGlyphIndexArrayNV = glPathGlyphIndexArrayNV_Z;
__gshared glbfn_glPathGlyphIndexArrayNV glPathGlyphIndexArrayNV_Z = function uint (uint a00,uint a01,const(void)* a02,uint a03,uint a04,int a05,uint a06,float a07) {
  return glbfn_glPathGlyphIndexArrayNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private uint glbfn_glPathGlyphIndexArrayNV_loader (uint a00,uint a01,const(void)* a02,uint a03,uint a04,int a05,uint a06,float a07) {
  *cast(void**)&glPathGlyphIndexArrayNV_Z = glbindGetProcAddress(`glPathGlyphIndexArrayNV`);
  if (*cast(void**)&glPathGlyphIndexArrayNV_Z is null) assert(0, `OpenGL function 'glPathGlyphIndexArrayNV' not found!`);
  return glPathGlyphIndexArrayNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glPathMemoryGlyphIndexArrayNV = glPathMemoryGlyphIndexArrayNV_Z;
__gshared glbfn_glPathMemoryGlyphIndexArrayNV glPathMemoryGlyphIndexArrayNV_Z = function uint (uint a00,uint a01,int a02,const(void)* a03,int a04,uint a05,int a06,uint a07,float a08) {
  return glbfn_glPathMemoryGlyphIndexArrayNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private uint glbfn_glPathMemoryGlyphIndexArrayNV_loader (uint a00,uint a01,int a02,const(void)* a03,int a04,uint a05,int a06,uint a07,float a08) {
  *cast(void**)&glPathMemoryGlyphIndexArrayNV_Z = glbindGetProcAddress(`glPathMemoryGlyphIndexArrayNV`);
  if (*cast(void**)&glPathMemoryGlyphIndexArrayNV_Z is null) assert(0, `OpenGL function 'glPathMemoryGlyphIndexArrayNV' not found!`);
  return glPathMemoryGlyphIndexArrayNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glProgramPathFragmentInputGenNV = glProgramPathFragmentInputGenNV_Z;
__gshared glbfn_glProgramPathFragmentInputGenNV glProgramPathFragmentInputGenNV_Z = function void (uint a00,int a01,uint a02,int a03,const(float)* a04) {
  glbfn_glProgramPathFragmentInputGenNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glProgramPathFragmentInputGenNV_loader (uint a00,int a01,uint a02,int a03,const(float)* a04) {
  *cast(void**)&glProgramPathFragmentInputGenNV_Z = glbindGetProcAddress(`glProgramPathFragmentInputGenNV`);
  if (*cast(void**)&glProgramPathFragmentInputGenNV_Z is null) assert(0, `OpenGL function 'glProgramPathFragmentInputGenNV' not found!`);
  glProgramPathFragmentInputGenNV_Z(a00,a01,a02,a03,a04,);
}
alias glGetProgramResourcefvNV = glGetProgramResourcefvNV_Z;
__gshared glbfn_glGetProgramResourcefvNV glGetProgramResourcefvNV_Z = function void (uint a00,uint a01,uint a02,int a03,const(uint)* a04,int a05,int* a06,float* a07) {
  glbfn_glGetProgramResourcefvNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glGetProgramResourcefvNV_loader (uint a00,uint a01,uint a02,int a03,const(uint)* a04,int a05,int* a06,float* a07) {
  *cast(void**)&glGetProgramResourcefvNV_Z = glbindGetProcAddress(`glGetProgramResourcefvNV`);
  if (*cast(void**)&glGetProgramResourcefvNV_Z is null) assert(0, `OpenGL function 'glGetProgramResourcefvNV' not found!`);
  glGetProgramResourcefvNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glPathColorGenNV = glPathColorGenNV_Z;
__gshared glbfn_glPathColorGenNV glPathColorGenNV_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glPathColorGenNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glPathColorGenNV_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glPathColorGenNV_Z = glbindGetProcAddress(`glPathColorGenNV`);
  if (*cast(void**)&glPathColorGenNV_Z is null) assert(0, `OpenGL function 'glPathColorGenNV' not found!`);
  glPathColorGenNV_Z(a00,a01,a02,a03,);
}
alias glPathTexGenNV = glPathTexGenNV_Z;
__gshared glbfn_glPathTexGenNV glPathTexGenNV_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glPathTexGenNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glPathTexGenNV_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glPathTexGenNV_Z = glbindGetProcAddress(`glPathTexGenNV`);
  if (*cast(void**)&glPathTexGenNV_Z is null) assert(0, `OpenGL function 'glPathTexGenNV' not found!`);
  glPathTexGenNV_Z(a00,a01,a02,a03,);
}
alias glPathFogGenNV = glPathFogGenNV_Z;
__gshared glbfn_glPathFogGenNV glPathFogGenNV_Z = function void (uint a00) {
  glbfn_glPathFogGenNV_loader(a00,);
};
private void glbfn_glPathFogGenNV_loader (uint a00) {
  *cast(void**)&glPathFogGenNV_Z = glbindGetProcAddress(`glPathFogGenNV`);
  if (*cast(void**)&glPathFogGenNV_Z is null) assert(0, `OpenGL function 'glPathFogGenNV' not found!`);
  glPathFogGenNV_Z(a00,);
}
alias glGetPathColorGenivNV = glGetPathColorGenivNV_Z;
__gshared glbfn_glGetPathColorGenivNV glGetPathColorGenivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetPathColorGenivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetPathColorGenivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetPathColorGenivNV_Z = glbindGetProcAddress(`glGetPathColorGenivNV`);
  if (*cast(void**)&glGetPathColorGenivNV_Z is null) assert(0, `OpenGL function 'glGetPathColorGenivNV' not found!`);
  glGetPathColorGenivNV_Z(a00,a01,a02,);
}
alias glGetPathColorGenfvNV = glGetPathColorGenfvNV_Z;
__gshared glbfn_glGetPathColorGenfvNV glGetPathColorGenfvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetPathColorGenfvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetPathColorGenfvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetPathColorGenfvNV_Z = glbindGetProcAddress(`glGetPathColorGenfvNV`);
  if (*cast(void**)&glGetPathColorGenfvNV_Z is null) assert(0, `OpenGL function 'glGetPathColorGenfvNV' not found!`);
  glGetPathColorGenfvNV_Z(a00,a01,a02,);
}
alias glGetPathTexGenivNV = glGetPathTexGenivNV_Z;
__gshared glbfn_glGetPathTexGenivNV glGetPathTexGenivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetPathTexGenivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetPathTexGenivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetPathTexGenivNV_Z = glbindGetProcAddress(`glGetPathTexGenivNV`);
  if (*cast(void**)&glGetPathTexGenivNV_Z is null) assert(0, `OpenGL function 'glGetPathTexGenivNV' not found!`);
  glGetPathTexGenivNV_Z(a00,a01,a02,);
}
alias glGetPathTexGenfvNV = glGetPathTexGenfvNV_Z;
__gshared glbfn_glGetPathTexGenfvNV glGetPathTexGenfvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetPathTexGenfvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetPathTexGenfvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetPathTexGenfvNV_Z = glbindGetProcAddress(`glGetPathTexGenfvNV`);
  if (*cast(void**)&glGetPathTexGenfvNV_Z is null) assert(0, `OpenGL function 'glGetPathTexGenfvNV' not found!`);
  glGetPathTexGenfvNV_Z(a00,a01,a02,);
}
alias glPixelDataRangeNV = glPixelDataRangeNV_Z;
__gshared glbfn_glPixelDataRangeNV glPixelDataRangeNV_Z = function void (uint a00,int a01,const(void)* a02) {
  glbfn_glPixelDataRangeNV_loader(a00,a01,a02,);
};
private void glbfn_glPixelDataRangeNV_loader (uint a00,int a01,const(void)* a02) {
  *cast(void**)&glPixelDataRangeNV_Z = glbindGetProcAddress(`glPixelDataRangeNV`);
  if (*cast(void**)&glPixelDataRangeNV_Z is null) assert(0, `OpenGL function 'glPixelDataRangeNV' not found!`);
  glPixelDataRangeNV_Z(a00,a01,a02,);
}
alias glFlushPixelDataRangeNV = glFlushPixelDataRangeNV_Z;
__gshared glbfn_glFlushPixelDataRangeNV glFlushPixelDataRangeNV_Z = function void (uint a00) {
  glbfn_glFlushPixelDataRangeNV_loader(a00,);
};
private void glbfn_glFlushPixelDataRangeNV_loader (uint a00) {
  *cast(void**)&glFlushPixelDataRangeNV_Z = glbindGetProcAddress(`glFlushPixelDataRangeNV`);
  if (*cast(void**)&glFlushPixelDataRangeNV_Z is null) assert(0, `OpenGL function 'glFlushPixelDataRangeNV' not found!`);
  glFlushPixelDataRangeNV_Z(a00,);
}
alias glPointParameteriNV = glPointParameteriNV_Z;
__gshared glbfn_glPointParameteriNV glPointParameteriNV_Z = function void (uint a00,int a01) {
  glbfn_glPointParameteriNV_loader(a00,a01,);
};
private void glbfn_glPointParameteriNV_loader (uint a00,int a01) {
  *cast(void**)&glPointParameteriNV_Z = glbindGetProcAddress(`glPointParameteriNV`);
  if (*cast(void**)&glPointParameteriNV_Z is null) assert(0, `OpenGL function 'glPointParameteriNV' not found!`);
  glPointParameteriNV_Z(a00,a01,);
}
alias glPointParameterivNV = glPointParameterivNV_Z;
__gshared glbfn_glPointParameterivNV glPointParameterivNV_Z = function void (uint a00,const(int)* a01) {
  glbfn_glPointParameterivNV_loader(a00,a01,);
};
private void glbfn_glPointParameterivNV_loader (uint a00,const(int)* a01) {
  *cast(void**)&glPointParameterivNV_Z = glbindGetProcAddress(`glPointParameterivNV`);
  if (*cast(void**)&glPointParameterivNV_Z is null) assert(0, `OpenGL function 'glPointParameterivNV' not found!`);
  glPointParameterivNV_Z(a00,a01,);
}
alias glPresentFrameKeyedNV = glPresentFrameKeyedNV_Z;
__gshared glbfn_glPresentFrameKeyedNV glPresentFrameKeyedNV_Z = function void (uint a00,ulong a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10) {
  glbfn_glPresentFrameKeyedNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glPresentFrameKeyedNV_loader (uint a00,ulong a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10) {
  *cast(void**)&glPresentFrameKeyedNV_Z = glbindGetProcAddress(`glPresentFrameKeyedNV`);
  if (*cast(void**)&glPresentFrameKeyedNV_Z is null) assert(0, `OpenGL function 'glPresentFrameKeyedNV' not found!`);
  glPresentFrameKeyedNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glPresentFrameDualFillNV = glPresentFrameDualFillNV_Z;
__gshared glbfn_glPresentFrameDualFillNV glPresentFrameDualFillNV_Z = function void (uint a00,ulong a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10,uint a11,uint a12) {
  glbfn_glPresentFrameDualFillNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
};
private void glbfn_glPresentFrameDualFillNV_loader (uint a00,ulong a01,uint a02,uint a03,uint a04,uint a05,uint a06,uint a07,uint a08,uint a09,uint a10,uint a11,uint a12) {
  *cast(void**)&glPresentFrameDualFillNV_Z = glbindGetProcAddress(`glPresentFrameDualFillNV`);
  if (*cast(void**)&glPresentFrameDualFillNV_Z is null) assert(0, `OpenGL function 'glPresentFrameDualFillNV' not found!`);
  glPresentFrameDualFillNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
}
alias glGetVideoivNV = glGetVideoivNV_Z;
__gshared glbfn_glGetVideoivNV glGetVideoivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVideoivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVideoivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVideoivNV_Z = glbindGetProcAddress(`glGetVideoivNV`);
  if (*cast(void**)&glGetVideoivNV_Z is null) assert(0, `OpenGL function 'glGetVideoivNV' not found!`);
  glGetVideoivNV_Z(a00,a01,a02,);
}
alias glGetVideouivNV = glGetVideouivNV_Z;
__gshared glbfn_glGetVideouivNV glGetVideouivNV_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetVideouivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVideouivNV_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetVideouivNV_Z = glbindGetProcAddress(`glGetVideouivNV`);
  if (*cast(void**)&glGetVideouivNV_Z is null) assert(0, `OpenGL function 'glGetVideouivNV' not found!`);
  glGetVideouivNV_Z(a00,a01,a02,);
}
alias glGetVideoi64vNV = glGetVideoi64vNV_Z;
__gshared glbfn_glGetVideoi64vNV glGetVideoi64vNV_Z = function void (uint a00,uint a01,long* a02) {
  glbfn_glGetVideoi64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVideoi64vNV_loader (uint a00,uint a01,long* a02) {
  *cast(void**)&glGetVideoi64vNV_Z = glbindGetProcAddress(`glGetVideoi64vNV`);
  if (*cast(void**)&glGetVideoi64vNV_Z is null) assert(0, `OpenGL function 'glGetVideoi64vNV' not found!`);
  glGetVideoi64vNV_Z(a00,a01,a02,);
}
alias glGetVideoui64vNV = glGetVideoui64vNV_Z;
__gshared glbfn_glGetVideoui64vNV glGetVideoui64vNV_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetVideoui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVideoui64vNV_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetVideoui64vNV_Z = glbindGetProcAddress(`glGetVideoui64vNV`);
  if (*cast(void**)&glGetVideoui64vNV_Z is null) assert(0, `OpenGL function 'glGetVideoui64vNV' not found!`);
  glGetVideoui64vNV_Z(a00,a01,a02,);
}
alias glPrimitiveRestartNV = glPrimitiveRestartNV_Z;
__gshared glbfn_glPrimitiveRestartNV glPrimitiveRestartNV_Z = function void () {
  glbfn_glPrimitiveRestartNV_loader();
};
private void glbfn_glPrimitiveRestartNV_loader () {
  *cast(void**)&glPrimitiveRestartNV_Z = glbindGetProcAddress(`glPrimitiveRestartNV`);
  if (*cast(void**)&glPrimitiveRestartNV_Z is null) assert(0, `OpenGL function 'glPrimitiveRestartNV' not found!`);
  glPrimitiveRestartNV_Z();
}
alias glPrimitiveRestartIndexNV = glPrimitiveRestartIndexNV_Z;
__gshared glbfn_glPrimitiveRestartIndexNV glPrimitiveRestartIndexNV_Z = function void (uint a00) {
  glbfn_glPrimitiveRestartIndexNV_loader(a00,);
};
private void glbfn_glPrimitiveRestartIndexNV_loader (uint a00) {
  *cast(void**)&glPrimitiveRestartIndexNV_Z = glbindGetProcAddress(`glPrimitiveRestartIndexNV`);
  if (*cast(void**)&glPrimitiveRestartIndexNV_Z is null) assert(0, `OpenGL function 'glPrimitiveRestartIndexNV' not found!`);
  glPrimitiveRestartIndexNV_Z(a00,);
}
alias glCombinerParameterfvNV = glCombinerParameterfvNV_Z;
__gshared glbfn_glCombinerParameterfvNV glCombinerParameterfvNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glCombinerParameterfvNV_loader(a00,a01,);
};
private void glbfn_glCombinerParameterfvNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glCombinerParameterfvNV_Z = glbindGetProcAddress(`glCombinerParameterfvNV`);
  if (*cast(void**)&glCombinerParameterfvNV_Z is null) assert(0, `OpenGL function 'glCombinerParameterfvNV' not found!`);
  glCombinerParameterfvNV_Z(a00,a01,);
}
alias glCombinerParameterfNV = glCombinerParameterfNV_Z;
__gshared glbfn_glCombinerParameterfNV glCombinerParameterfNV_Z = function void (uint a00,float a01) {
  glbfn_glCombinerParameterfNV_loader(a00,a01,);
};
private void glbfn_glCombinerParameterfNV_loader (uint a00,float a01) {
  *cast(void**)&glCombinerParameterfNV_Z = glbindGetProcAddress(`glCombinerParameterfNV`);
  if (*cast(void**)&glCombinerParameterfNV_Z is null) assert(0, `OpenGL function 'glCombinerParameterfNV' not found!`);
  glCombinerParameterfNV_Z(a00,a01,);
}
alias glCombinerParameterivNV = glCombinerParameterivNV_Z;
__gshared glbfn_glCombinerParameterivNV glCombinerParameterivNV_Z = function void (uint a00,const(int)* a01) {
  glbfn_glCombinerParameterivNV_loader(a00,a01,);
};
private void glbfn_glCombinerParameterivNV_loader (uint a00,const(int)* a01) {
  *cast(void**)&glCombinerParameterivNV_Z = glbindGetProcAddress(`glCombinerParameterivNV`);
  if (*cast(void**)&glCombinerParameterivNV_Z is null) assert(0, `OpenGL function 'glCombinerParameterivNV' not found!`);
  glCombinerParameterivNV_Z(a00,a01,);
}
alias glCombinerParameteriNV = glCombinerParameteriNV_Z;
__gshared glbfn_glCombinerParameteriNV glCombinerParameteriNV_Z = function void (uint a00,int a01) {
  glbfn_glCombinerParameteriNV_loader(a00,a01,);
};
private void glbfn_glCombinerParameteriNV_loader (uint a00,int a01) {
  *cast(void**)&glCombinerParameteriNV_Z = glbindGetProcAddress(`glCombinerParameteriNV`);
  if (*cast(void**)&glCombinerParameteriNV_Z is null) assert(0, `OpenGL function 'glCombinerParameteriNV' not found!`);
  glCombinerParameteriNV_Z(a00,a01,);
}
alias glCombinerInputNV = glCombinerInputNV_Z;
__gshared glbfn_glCombinerInputNV glCombinerInputNV_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  glbfn_glCombinerInputNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glCombinerInputNV_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05) {
  *cast(void**)&glCombinerInputNV_Z = glbindGetProcAddress(`glCombinerInputNV`);
  if (*cast(void**)&glCombinerInputNV_Z is null) assert(0, `OpenGL function 'glCombinerInputNV' not found!`);
  glCombinerInputNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glCombinerOutputNV = glCombinerOutputNV_Z;
__gshared glbfn_glCombinerOutputNV glCombinerOutputNV_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,ubyte a07,ubyte a08,ubyte a09) {
  glbfn_glCombinerOutputNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glCombinerOutputNV_loader (uint a00,uint a01,uint a02,uint a03,uint a04,uint a05,uint a06,ubyte a07,ubyte a08,ubyte a09) {
  *cast(void**)&glCombinerOutputNV_Z = glbindGetProcAddress(`glCombinerOutputNV`);
  if (*cast(void**)&glCombinerOutputNV_Z is null) assert(0, `OpenGL function 'glCombinerOutputNV' not found!`);
  glCombinerOutputNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glFinalCombinerInputNV = glFinalCombinerInputNV_Z;
__gshared glbfn_glFinalCombinerInputNV glFinalCombinerInputNV_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glFinalCombinerInputNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glFinalCombinerInputNV_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glFinalCombinerInputNV_Z = glbindGetProcAddress(`glFinalCombinerInputNV`);
  if (*cast(void**)&glFinalCombinerInputNV_Z is null) assert(0, `OpenGL function 'glFinalCombinerInputNV' not found!`);
  glFinalCombinerInputNV_Z(a00,a01,a02,a03,);
}
alias glGetCombinerInputParameterfvNV = glGetCombinerInputParameterfvNV_Z;
__gshared glbfn_glGetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV_Z = function void (uint a00,uint a01,uint a02,uint a03,float* a04) {
  glbfn_glGetCombinerInputParameterfvNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetCombinerInputParameterfvNV_loader (uint a00,uint a01,uint a02,uint a03,float* a04) {
  *cast(void**)&glGetCombinerInputParameterfvNV_Z = glbindGetProcAddress(`glGetCombinerInputParameterfvNV`);
  if (*cast(void**)&glGetCombinerInputParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetCombinerInputParameterfvNV' not found!`);
  glGetCombinerInputParameterfvNV_Z(a00,a01,a02,a03,a04,);
}
alias glGetCombinerInputParameterivNV = glGetCombinerInputParameterivNV_Z;
__gshared glbfn_glGetCombinerInputParameterivNV glGetCombinerInputParameterivNV_Z = function void (uint a00,uint a01,uint a02,uint a03,int* a04) {
  glbfn_glGetCombinerInputParameterivNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glGetCombinerInputParameterivNV_loader (uint a00,uint a01,uint a02,uint a03,int* a04) {
  *cast(void**)&glGetCombinerInputParameterivNV_Z = glbindGetProcAddress(`glGetCombinerInputParameterivNV`);
  if (*cast(void**)&glGetCombinerInputParameterivNV_Z is null) assert(0, `OpenGL function 'glGetCombinerInputParameterivNV' not found!`);
  glGetCombinerInputParameterivNV_Z(a00,a01,a02,a03,a04,);
}
alias glGetCombinerOutputParameterfvNV = glGetCombinerOutputParameterfvNV_Z;
__gshared glbfn_glGetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetCombinerOutputParameterfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetCombinerOutputParameterfvNV_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetCombinerOutputParameterfvNV_Z = glbindGetProcAddress(`glGetCombinerOutputParameterfvNV`);
  if (*cast(void**)&glGetCombinerOutputParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterfvNV' not found!`);
  glGetCombinerOutputParameterfvNV_Z(a00,a01,a02,a03,);
}
alias glGetCombinerOutputParameterivNV = glGetCombinerOutputParameterivNV_Z;
__gshared glbfn_glGetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetCombinerOutputParameterivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetCombinerOutputParameterivNV_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetCombinerOutputParameterivNV_Z = glbindGetProcAddress(`glGetCombinerOutputParameterivNV`);
  if (*cast(void**)&glGetCombinerOutputParameterivNV_Z is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterivNV' not found!`);
  glGetCombinerOutputParameterivNV_Z(a00,a01,a02,a03,);
}
alias glGetFinalCombinerInputParameterfvNV = glGetFinalCombinerInputParameterfvNV_Z;
__gshared glbfn_glGetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetFinalCombinerInputParameterfvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetFinalCombinerInputParameterfvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetFinalCombinerInputParameterfvNV_Z = glbindGetProcAddress(`glGetFinalCombinerInputParameterfvNV`);
  if (*cast(void**)&glGetFinalCombinerInputParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterfvNV' not found!`);
  glGetFinalCombinerInputParameterfvNV_Z(a00,a01,a02,);
}
alias glGetFinalCombinerInputParameterivNV = glGetFinalCombinerInputParameterivNV_Z;
__gshared glbfn_glGetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetFinalCombinerInputParameterivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetFinalCombinerInputParameterivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetFinalCombinerInputParameterivNV_Z = glbindGetProcAddress(`glGetFinalCombinerInputParameterivNV`);
  if (*cast(void**)&glGetFinalCombinerInputParameterivNV_Z is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterivNV' not found!`);
  glGetFinalCombinerInputParameterivNV_Z(a00,a01,a02,);
}
alias glCombinerStageParameterfvNV = glCombinerStageParameterfvNV_Z;
__gshared glbfn_glCombinerStageParameterfvNV glCombinerStageParameterfvNV_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glCombinerStageParameterfvNV_loader(a00,a01,a02,);
};
private void glbfn_glCombinerStageParameterfvNV_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glCombinerStageParameterfvNV_Z = glbindGetProcAddress(`glCombinerStageParameterfvNV`);
  if (*cast(void**)&glCombinerStageParameterfvNV_Z is null) assert(0, `OpenGL function 'glCombinerStageParameterfvNV' not found!`);
  glCombinerStageParameterfvNV_Z(a00,a01,a02,);
}
alias glGetCombinerStageParameterfvNV = glGetCombinerStageParameterfvNV_Z;
__gshared glbfn_glGetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetCombinerStageParameterfvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetCombinerStageParameterfvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetCombinerStageParameterfvNV_Z = glbindGetProcAddress(`glGetCombinerStageParameterfvNV`);
  if (*cast(void**)&glGetCombinerStageParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetCombinerStageParameterfvNV' not found!`);
  glGetCombinerStageParameterfvNV_Z(a00,a01,a02,);
}
alias glFramebufferSampleLocationsfvNV = glFramebufferSampleLocationsfvNV_Z;
__gshared glbfn_glFramebufferSampleLocationsfvNV glFramebufferSampleLocationsfvNV_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glFramebufferSampleLocationsfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glFramebufferSampleLocationsfvNV_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glFramebufferSampleLocationsfvNV_Z = glbindGetProcAddress(`glFramebufferSampleLocationsfvNV`);
  if (*cast(void**)&glFramebufferSampleLocationsfvNV_Z is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvNV' not found!`);
  glFramebufferSampleLocationsfvNV_Z(a00,a01,a02,a03,);
}
alias glNamedFramebufferSampleLocationsfvNV = glNamedFramebufferSampleLocationsfvNV_Z;
__gshared glbfn_glNamedFramebufferSampleLocationsfvNV glNamedFramebufferSampleLocationsfvNV_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glNamedFramebufferSampleLocationsfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glNamedFramebufferSampleLocationsfvNV_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glNamedFramebufferSampleLocationsfvNV_Z = glbindGetProcAddress(`glNamedFramebufferSampleLocationsfvNV`);
  if (*cast(void**)&glNamedFramebufferSampleLocationsfvNV_Z is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvNV' not found!`);
  glNamedFramebufferSampleLocationsfvNV_Z(a00,a01,a02,a03,);
}
alias glResolveDepthValuesNV = glResolveDepthValuesNV_Z;
__gshared glbfn_glResolveDepthValuesNV glResolveDepthValuesNV_Z = function void () {
  glbfn_glResolveDepthValuesNV_loader();
};
private void glbfn_glResolveDepthValuesNV_loader () {
  *cast(void**)&glResolveDepthValuesNV_Z = glbindGetProcAddress(`glResolveDepthValuesNV`);
  if (*cast(void**)&glResolveDepthValuesNV_Z is null) assert(0, `OpenGL function 'glResolveDepthValuesNV' not found!`);
  glResolveDepthValuesNV_Z();
}
alias glMakeBufferResidentNV = glMakeBufferResidentNV_Z;
__gshared glbfn_glMakeBufferResidentNV glMakeBufferResidentNV_Z = function void (uint a00,uint a01) {
  glbfn_glMakeBufferResidentNV_loader(a00,a01,);
};
private void glbfn_glMakeBufferResidentNV_loader (uint a00,uint a01) {
  *cast(void**)&glMakeBufferResidentNV_Z = glbindGetProcAddress(`glMakeBufferResidentNV`);
  if (*cast(void**)&glMakeBufferResidentNV_Z is null) assert(0, `OpenGL function 'glMakeBufferResidentNV' not found!`);
  glMakeBufferResidentNV_Z(a00,a01,);
}
alias glMakeBufferNonResidentNV = glMakeBufferNonResidentNV_Z;
__gshared glbfn_glMakeBufferNonResidentNV glMakeBufferNonResidentNV_Z = function void (uint a00) {
  glbfn_glMakeBufferNonResidentNV_loader(a00,);
};
private void glbfn_glMakeBufferNonResidentNV_loader (uint a00) {
  *cast(void**)&glMakeBufferNonResidentNV_Z = glbindGetProcAddress(`glMakeBufferNonResidentNV`);
  if (*cast(void**)&glMakeBufferNonResidentNV_Z is null) assert(0, `OpenGL function 'glMakeBufferNonResidentNV' not found!`);
  glMakeBufferNonResidentNV_Z(a00,);
}
alias glIsBufferResidentNV = glIsBufferResidentNV_Z;
__gshared glbfn_glIsBufferResidentNV glIsBufferResidentNV_Z = function ubyte (uint a00) {
  return glbfn_glIsBufferResidentNV_loader(a00,);
};
private ubyte glbfn_glIsBufferResidentNV_loader (uint a00) {
  *cast(void**)&glIsBufferResidentNV_Z = glbindGetProcAddress(`glIsBufferResidentNV`);
  if (*cast(void**)&glIsBufferResidentNV_Z is null) assert(0, `OpenGL function 'glIsBufferResidentNV' not found!`);
  return glIsBufferResidentNV_Z(a00,);
}
alias glMakeNamedBufferResidentNV = glMakeNamedBufferResidentNV_Z;
__gshared glbfn_glMakeNamedBufferResidentNV glMakeNamedBufferResidentNV_Z = function void (uint a00,uint a01) {
  glbfn_glMakeNamedBufferResidentNV_loader(a00,a01,);
};
private void glbfn_glMakeNamedBufferResidentNV_loader (uint a00,uint a01) {
  *cast(void**)&glMakeNamedBufferResidentNV_Z = glbindGetProcAddress(`glMakeNamedBufferResidentNV`);
  if (*cast(void**)&glMakeNamedBufferResidentNV_Z is null) assert(0, `OpenGL function 'glMakeNamedBufferResidentNV' not found!`);
  glMakeNamedBufferResidentNV_Z(a00,a01,);
}
alias glMakeNamedBufferNonResidentNV = glMakeNamedBufferNonResidentNV_Z;
__gshared glbfn_glMakeNamedBufferNonResidentNV glMakeNamedBufferNonResidentNV_Z = function void (uint a00) {
  glbfn_glMakeNamedBufferNonResidentNV_loader(a00,);
};
private void glbfn_glMakeNamedBufferNonResidentNV_loader (uint a00) {
  *cast(void**)&glMakeNamedBufferNonResidentNV_Z = glbindGetProcAddress(`glMakeNamedBufferNonResidentNV`);
  if (*cast(void**)&glMakeNamedBufferNonResidentNV_Z is null) assert(0, `OpenGL function 'glMakeNamedBufferNonResidentNV' not found!`);
  glMakeNamedBufferNonResidentNV_Z(a00,);
}
alias glIsNamedBufferResidentNV = glIsNamedBufferResidentNV_Z;
__gshared glbfn_glIsNamedBufferResidentNV glIsNamedBufferResidentNV_Z = function ubyte (uint a00) {
  return glbfn_glIsNamedBufferResidentNV_loader(a00,);
};
private ubyte glbfn_glIsNamedBufferResidentNV_loader (uint a00) {
  *cast(void**)&glIsNamedBufferResidentNV_Z = glbindGetProcAddress(`glIsNamedBufferResidentNV`);
  if (*cast(void**)&glIsNamedBufferResidentNV_Z is null) assert(0, `OpenGL function 'glIsNamedBufferResidentNV' not found!`);
  return glIsNamedBufferResidentNV_Z(a00,);
}
alias glGetBufferParameterui64vNV = glGetBufferParameterui64vNV_Z;
__gshared glbfn_glGetBufferParameterui64vNV glGetBufferParameterui64vNV_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetBufferParameterui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetBufferParameterui64vNV_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetBufferParameterui64vNV_Z = glbindGetProcAddress(`glGetBufferParameterui64vNV`);
  if (*cast(void**)&glGetBufferParameterui64vNV_Z is null) assert(0, `OpenGL function 'glGetBufferParameterui64vNV' not found!`);
  glGetBufferParameterui64vNV_Z(a00,a01,a02,);
}
alias glGetNamedBufferParameterui64vNV = glGetNamedBufferParameterui64vNV_Z;
__gshared glbfn_glGetNamedBufferParameterui64vNV glGetNamedBufferParameterui64vNV_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetNamedBufferParameterui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetNamedBufferParameterui64vNV_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetNamedBufferParameterui64vNV_Z = glbindGetProcAddress(`glGetNamedBufferParameterui64vNV`);
  if (*cast(void**)&glGetNamedBufferParameterui64vNV_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameterui64vNV' not found!`);
  glGetNamedBufferParameterui64vNV_Z(a00,a01,a02,);
}
alias glGetIntegerui64vNV = glGetIntegerui64vNV_Z;
__gshared glbfn_glGetIntegerui64vNV glGetIntegerui64vNV_Z = function void (uint a00,ulong* a01) {
  glbfn_glGetIntegerui64vNV_loader(a00,a01,);
};
private void glbfn_glGetIntegerui64vNV_loader (uint a00,ulong* a01) {
  *cast(void**)&glGetIntegerui64vNV_Z = glbindGetProcAddress(`glGetIntegerui64vNV`);
  if (*cast(void**)&glGetIntegerui64vNV_Z is null) assert(0, `OpenGL function 'glGetIntegerui64vNV' not found!`);
  glGetIntegerui64vNV_Z(a00,a01,);
}
alias glUniformui64NV = glUniformui64NV_Z;
__gshared glbfn_glUniformui64NV glUniformui64NV_Z = function void (int a00,ulong a01) {
  glbfn_glUniformui64NV_loader(a00,a01,);
};
private void glbfn_glUniformui64NV_loader (int a00,ulong a01) {
  *cast(void**)&glUniformui64NV_Z = glbindGetProcAddress(`glUniformui64NV`);
  if (*cast(void**)&glUniformui64NV_Z is null) assert(0, `OpenGL function 'glUniformui64NV' not found!`);
  glUniformui64NV_Z(a00,a01,);
}
alias glUniformui64vNV = glUniformui64vNV_Z;
__gshared glbfn_glUniformui64vNV glUniformui64vNV_Z = function void (int a00,int a01,const(ulong)* a02) {
  glbfn_glUniformui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glUniformui64vNV_loader (int a00,int a01,const(ulong)* a02) {
  *cast(void**)&glUniformui64vNV_Z = glbindGetProcAddress(`glUniformui64vNV`);
  if (*cast(void**)&glUniformui64vNV_Z is null) assert(0, `OpenGL function 'glUniformui64vNV' not found!`);
  glUniformui64vNV_Z(a00,a01,a02,);
}
alias glProgramUniformui64NV = glProgramUniformui64NV_Z;
__gshared glbfn_glProgramUniformui64NV glProgramUniformui64NV_Z = function void (uint a00,int a01,ulong a02) {
  glbfn_glProgramUniformui64NV_loader(a00,a01,a02,);
};
private void glbfn_glProgramUniformui64NV_loader (uint a00,int a01,ulong a02) {
  *cast(void**)&glProgramUniformui64NV_Z = glbindGetProcAddress(`glProgramUniformui64NV`);
  if (*cast(void**)&glProgramUniformui64NV_Z is null) assert(0, `OpenGL function 'glProgramUniformui64NV' not found!`);
  glProgramUniformui64NV_Z(a00,a01,a02,);
}
alias glProgramUniformui64vNV = glProgramUniformui64vNV_Z;
__gshared glbfn_glProgramUniformui64vNV glProgramUniformui64vNV_Z = function void (uint a00,int a01,int a02,const(ulong)* a03) {
  glbfn_glProgramUniformui64vNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramUniformui64vNV_loader (uint a00,int a01,int a02,const(ulong)* a03) {
  *cast(void**)&glProgramUniformui64vNV_Z = glbindGetProcAddress(`glProgramUniformui64vNV`);
  if (*cast(void**)&glProgramUniformui64vNV_Z is null) assert(0, `OpenGL function 'glProgramUniformui64vNV' not found!`);
  glProgramUniformui64vNV_Z(a00,a01,a02,a03,);
}
alias glTextureBarrierNV = glTextureBarrierNV_Z;
__gshared glbfn_glTextureBarrierNV glTextureBarrierNV_Z = function void () {
  glbfn_glTextureBarrierNV_loader();
};
private void glbfn_glTextureBarrierNV_loader () {
  *cast(void**)&glTextureBarrierNV_Z = glbindGetProcAddress(`glTextureBarrierNV`);
  if (*cast(void**)&glTextureBarrierNV_Z is null) assert(0, `OpenGL function 'glTextureBarrierNV' not found!`);
  glTextureBarrierNV_Z();
}
alias glTexImage2DMultisampleCoverageNV = glTexImage2DMultisampleCoverageNV_Z;
__gshared glbfn_glTexImage2DMultisampleCoverageNV glTexImage2DMultisampleCoverageNV_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,ubyte a06) {
  glbfn_glTexImage2DMultisampleCoverageNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTexImage2DMultisampleCoverageNV_loader (uint a00,int a01,int a02,int a03,int a04,int a05,ubyte a06) {
  *cast(void**)&glTexImage2DMultisampleCoverageNV_Z = glbindGetProcAddress(`glTexImage2DMultisampleCoverageNV`);
  if (*cast(void**)&glTexImage2DMultisampleCoverageNV_Z is null) assert(0, `OpenGL function 'glTexImage2DMultisampleCoverageNV' not found!`);
  glTexImage2DMultisampleCoverageNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTexImage3DMultisampleCoverageNV = glTexImage3DMultisampleCoverageNV_Z;
__gshared glbfn_glTexImage3DMultisampleCoverageNV glTexImage3DMultisampleCoverageNV_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,ubyte a07) {
  glbfn_glTexImage3DMultisampleCoverageNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTexImage3DMultisampleCoverageNV_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,ubyte a07) {
  *cast(void**)&glTexImage3DMultisampleCoverageNV_Z = glbindGetProcAddress(`glTexImage3DMultisampleCoverageNV`);
  if (*cast(void**)&glTexImage3DMultisampleCoverageNV_Z is null) assert(0, `OpenGL function 'glTexImage3DMultisampleCoverageNV' not found!`);
  glTexImage3DMultisampleCoverageNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTextureImage2DMultisampleNV = glTextureImage2DMultisampleNV_Z;
__gshared glbfn_glTextureImage2DMultisampleNV glTextureImage2DMultisampleNV_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,ubyte a06) {
  glbfn_glTextureImage2DMultisampleNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glTextureImage2DMultisampleNV_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,ubyte a06) {
  *cast(void**)&glTextureImage2DMultisampleNV_Z = glbindGetProcAddress(`glTextureImage2DMultisampleNV`);
  if (*cast(void**)&glTextureImage2DMultisampleNV_Z is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleNV' not found!`);
  glTextureImage2DMultisampleNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glTextureImage3DMultisampleNV = glTextureImage3DMultisampleNV_Z;
__gshared glbfn_glTextureImage3DMultisampleNV glTextureImage3DMultisampleNV_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,ubyte a07) {
  glbfn_glTextureImage3DMultisampleNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTextureImage3DMultisampleNV_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,ubyte a07) {
  *cast(void**)&glTextureImage3DMultisampleNV_Z = glbindGetProcAddress(`glTextureImage3DMultisampleNV`);
  if (*cast(void**)&glTextureImage3DMultisampleNV_Z is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleNV' not found!`);
  glTextureImage3DMultisampleNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTextureImage2DMultisampleCoverageNV = glTextureImage2DMultisampleCoverageNV_Z;
__gshared glbfn_glTextureImage2DMultisampleCoverageNV glTextureImage2DMultisampleCoverageNV_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,ubyte a07) {
  glbfn_glTextureImage2DMultisampleCoverageNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTextureImage2DMultisampleCoverageNV_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,ubyte a07) {
  *cast(void**)&glTextureImage2DMultisampleCoverageNV_Z = glbindGetProcAddress(`glTextureImage2DMultisampleCoverageNV`);
  if (*cast(void**)&glTextureImage2DMultisampleCoverageNV_Z is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleCoverageNV' not found!`);
  glTextureImage2DMultisampleCoverageNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTextureImage3DMultisampleCoverageNV = glTextureImage3DMultisampleCoverageNV_Z;
__gshared glbfn_glTextureImage3DMultisampleCoverageNV glTextureImage3DMultisampleCoverageNV_Z = function void (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,ubyte a08) {
  glbfn_glTextureImage3DMultisampleCoverageNV_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTextureImage3DMultisampleCoverageNV_loader (uint a00,uint a01,int a02,int a03,int a04,int a05,int a06,int a07,ubyte a08) {
  *cast(void**)&glTextureImage3DMultisampleCoverageNV_Z = glbindGetProcAddress(`glTextureImage3DMultisampleCoverageNV`);
  if (*cast(void**)&glTextureImage3DMultisampleCoverageNV_Z is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleCoverageNV' not found!`);
  glTextureImage3DMultisampleCoverageNV_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glBeginTransformFeedbackNV = glBeginTransformFeedbackNV_Z;
__gshared glbfn_glBeginTransformFeedbackNV glBeginTransformFeedbackNV_Z = function void (uint a00) {
  glbfn_glBeginTransformFeedbackNV_loader(a00,);
};
private void glbfn_glBeginTransformFeedbackNV_loader (uint a00) {
  *cast(void**)&glBeginTransformFeedbackNV_Z = glbindGetProcAddress(`glBeginTransformFeedbackNV`);
  if (*cast(void**)&glBeginTransformFeedbackNV_Z is null) assert(0, `OpenGL function 'glBeginTransformFeedbackNV' not found!`);
  glBeginTransformFeedbackNV_Z(a00,);
}
alias glEndTransformFeedbackNV = glEndTransformFeedbackNV_Z;
__gshared glbfn_glEndTransformFeedbackNV glEndTransformFeedbackNV_Z = function void () {
  glbfn_glEndTransformFeedbackNV_loader();
};
private void glbfn_glEndTransformFeedbackNV_loader () {
  *cast(void**)&glEndTransformFeedbackNV_Z = glbindGetProcAddress(`glEndTransformFeedbackNV`);
  if (*cast(void**)&glEndTransformFeedbackNV_Z is null) assert(0, `OpenGL function 'glEndTransformFeedbackNV' not found!`);
  glEndTransformFeedbackNV_Z();
}
alias glTransformFeedbackAttribsNV = glTransformFeedbackAttribsNV_Z;
__gshared glbfn_glTransformFeedbackAttribsNV glTransformFeedbackAttribsNV_Z = function void (int a00,const(int)* a01,uint a02) {
  glbfn_glTransformFeedbackAttribsNV_loader(a00,a01,a02,);
};
private void glbfn_glTransformFeedbackAttribsNV_loader (int a00,const(int)* a01,uint a02) {
  *cast(void**)&glTransformFeedbackAttribsNV_Z = glbindGetProcAddress(`glTransformFeedbackAttribsNV`);
  if (*cast(void**)&glTransformFeedbackAttribsNV_Z is null) assert(0, `OpenGL function 'glTransformFeedbackAttribsNV' not found!`);
  glTransformFeedbackAttribsNV_Z(a00,a01,a02,);
}
alias glBindBufferRangeNV = glBindBufferRangeNV_Z;
__gshared glbfn_glBindBufferRangeNV glBindBufferRangeNV_Z = function void (uint a00,uint a01,uint a02,int a03,int a04) {
  glbfn_glBindBufferRangeNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBindBufferRangeNV_loader (uint a00,uint a01,uint a02,int a03,int a04) {
  *cast(void**)&glBindBufferRangeNV_Z = glbindGetProcAddress(`glBindBufferRangeNV`);
  if (*cast(void**)&glBindBufferRangeNV_Z is null) assert(0, `OpenGL function 'glBindBufferRangeNV' not found!`);
  glBindBufferRangeNV_Z(a00,a01,a02,a03,a04,);
}
alias glBindBufferOffsetNV = glBindBufferOffsetNV_Z;
__gshared glbfn_glBindBufferOffsetNV glBindBufferOffsetNV_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glBindBufferOffsetNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glBindBufferOffsetNV_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glBindBufferOffsetNV_Z = glbindGetProcAddress(`glBindBufferOffsetNV`);
  if (*cast(void**)&glBindBufferOffsetNV_Z is null) assert(0, `OpenGL function 'glBindBufferOffsetNV' not found!`);
  glBindBufferOffsetNV_Z(a00,a01,a02,a03,);
}
alias glBindBufferBaseNV = glBindBufferBaseNV_Z;
__gshared glbfn_glBindBufferBaseNV glBindBufferBaseNV_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glBindBufferBaseNV_loader(a00,a01,a02,);
};
private void glbfn_glBindBufferBaseNV_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glBindBufferBaseNV_Z = glbindGetProcAddress(`glBindBufferBaseNV`);
  if (*cast(void**)&glBindBufferBaseNV_Z is null) assert(0, `OpenGL function 'glBindBufferBaseNV' not found!`);
  glBindBufferBaseNV_Z(a00,a01,a02,);
}
alias glTransformFeedbackVaryingsNV = glTransformFeedbackVaryingsNV_Z;
__gshared glbfn_glTransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV_Z = function void (uint a00,int a01,const(int)* a02,uint a03) {
  glbfn_glTransformFeedbackVaryingsNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glTransformFeedbackVaryingsNV_loader (uint a00,int a01,const(int)* a02,uint a03) {
  *cast(void**)&glTransformFeedbackVaryingsNV_Z = glbindGetProcAddress(`glTransformFeedbackVaryingsNV`);
  if (*cast(void**)&glTransformFeedbackVaryingsNV_Z is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsNV' not found!`);
  glTransformFeedbackVaryingsNV_Z(a00,a01,a02,a03,);
}
alias glActiveVaryingNV = glActiveVaryingNV_Z;
__gshared glbfn_glActiveVaryingNV glActiveVaryingNV_Z = function void (uint a00,const(char)* a01) {
  glbfn_glActiveVaryingNV_loader(a00,a01,);
};
private void glbfn_glActiveVaryingNV_loader (uint a00,const(char)* a01) {
  *cast(void**)&glActiveVaryingNV_Z = glbindGetProcAddress(`glActiveVaryingNV`);
  if (*cast(void**)&glActiveVaryingNV_Z is null) assert(0, `OpenGL function 'glActiveVaryingNV' not found!`);
  glActiveVaryingNV_Z(a00,a01,);
}
alias glGetVaryingLocationNV = glGetVaryingLocationNV_Z;
__gshared glbfn_glGetVaryingLocationNV glGetVaryingLocationNV_Z = function int (uint a00,const(char)* a01) {
  return glbfn_glGetVaryingLocationNV_loader(a00,a01,);
};
private int glbfn_glGetVaryingLocationNV_loader (uint a00,const(char)* a01) {
  *cast(void**)&glGetVaryingLocationNV_Z = glbindGetProcAddress(`glGetVaryingLocationNV`);
  if (*cast(void**)&glGetVaryingLocationNV_Z is null) assert(0, `OpenGL function 'glGetVaryingLocationNV' not found!`);
  return glGetVaryingLocationNV_Z(a00,a01,);
}
alias glGetActiveVaryingNV = glGetActiveVaryingNV_Z;
__gshared glbfn_glGetActiveVaryingNV glGetActiveVaryingNV_Z = function void (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  glbfn_glGetActiveVaryingNV_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glGetActiveVaryingNV_loader (uint a00,uint a01,int a02,int* a03,int* a04,uint* a05,char* a06) {
  *cast(void**)&glGetActiveVaryingNV_Z = glbindGetProcAddress(`glGetActiveVaryingNV`);
  if (*cast(void**)&glGetActiveVaryingNV_Z is null) assert(0, `OpenGL function 'glGetActiveVaryingNV' not found!`);
  glGetActiveVaryingNV_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glGetTransformFeedbackVaryingNV = glGetTransformFeedbackVaryingNV_Z;
__gshared glbfn_glGetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTransformFeedbackVaryingNV_loader(a00,a01,a02,);
};
private void glbfn_glGetTransformFeedbackVaryingNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTransformFeedbackVaryingNV_Z = glbindGetProcAddress(`glGetTransformFeedbackVaryingNV`);
  if (*cast(void**)&glGetTransformFeedbackVaryingNV_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingNV' not found!`);
  glGetTransformFeedbackVaryingNV_Z(a00,a01,a02,);
}
alias glTransformFeedbackStreamAttribsNV = glTransformFeedbackStreamAttribsNV_Z;
__gshared glbfn_glTransformFeedbackStreamAttribsNV glTransformFeedbackStreamAttribsNV_Z = function void (int a00,const(int)* a01,int a02,const(int)* a03,uint a04) {
  glbfn_glTransformFeedbackStreamAttribsNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTransformFeedbackStreamAttribsNV_loader (int a00,const(int)* a01,int a02,const(int)* a03,uint a04) {
  *cast(void**)&glTransformFeedbackStreamAttribsNV_Z = glbindGetProcAddress(`glTransformFeedbackStreamAttribsNV`);
  if (*cast(void**)&glTransformFeedbackStreamAttribsNV_Z is null) assert(0, `OpenGL function 'glTransformFeedbackStreamAttribsNV' not found!`);
  glTransformFeedbackStreamAttribsNV_Z(a00,a01,a02,a03,a04,);
}
alias glBindTransformFeedbackNV = glBindTransformFeedbackNV_Z;
__gshared glbfn_glBindTransformFeedbackNV glBindTransformFeedbackNV_Z = function void (uint a00,uint a01) {
  glbfn_glBindTransformFeedbackNV_loader(a00,a01,);
};
private void glbfn_glBindTransformFeedbackNV_loader (uint a00,uint a01) {
  *cast(void**)&glBindTransformFeedbackNV_Z = glbindGetProcAddress(`glBindTransformFeedbackNV`);
  if (*cast(void**)&glBindTransformFeedbackNV_Z is null) assert(0, `OpenGL function 'glBindTransformFeedbackNV' not found!`);
  glBindTransformFeedbackNV_Z(a00,a01,);
}
alias glDeleteTransformFeedbacksNV = glDeleteTransformFeedbacksNV_Z;
__gshared glbfn_glDeleteTransformFeedbacksNV glDeleteTransformFeedbacksNV_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteTransformFeedbacksNV_loader(a00,a01,);
};
private void glbfn_glDeleteTransformFeedbacksNV_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteTransformFeedbacksNV_Z = glbindGetProcAddress(`glDeleteTransformFeedbacksNV`);
  if (*cast(void**)&glDeleteTransformFeedbacksNV_Z is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacksNV' not found!`);
  glDeleteTransformFeedbacksNV_Z(a00,a01,);
}
alias glGenTransformFeedbacksNV = glGenTransformFeedbacksNV_Z;
__gshared glbfn_glGenTransformFeedbacksNV glGenTransformFeedbacksNV_Z = function void (int a00,uint* a01) {
  glbfn_glGenTransformFeedbacksNV_loader(a00,a01,);
};
private void glbfn_glGenTransformFeedbacksNV_loader (int a00,uint* a01) {
  *cast(void**)&glGenTransformFeedbacksNV_Z = glbindGetProcAddress(`glGenTransformFeedbacksNV`);
  if (*cast(void**)&glGenTransformFeedbacksNV_Z is null) assert(0, `OpenGL function 'glGenTransformFeedbacksNV' not found!`);
  glGenTransformFeedbacksNV_Z(a00,a01,);
}
alias glIsTransformFeedbackNV = glIsTransformFeedbackNV_Z;
__gshared glbfn_glIsTransformFeedbackNV glIsTransformFeedbackNV_Z = function ubyte (uint a00) {
  return glbfn_glIsTransformFeedbackNV_loader(a00,);
};
private ubyte glbfn_glIsTransformFeedbackNV_loader (uint a00) {
  *cast(void**)&glIsTransformFeedbackNV_Z = glbindGetProcAddress(`glIsTransformFeedbackNV`);
  if (*cast(void**)&glIsTransformFeedbackNV_Z is null) assert(0, `OpenGL function 'glIsTransformFeedbackNV' not found!`);
  return glIsTransformFeedbackNV_Z(a00,);
}
alias glPauseTransformFeedbackNV = glPauseTransformFeedbackNV_Z;
__gshared glbfn_glPauseTransformFeedbackNV glPauseTransformFeedbackNV_Z = function void () {
  glbfn_glPauseTransformFeedbackNV_loader();
};
private void glbfn_glPauseTransformFeedbackNV_loader () {
  *cast(void**)&glPauseTransformFeedbackNV_Z = glbindGetProcAddress(`glPauseTransformFeedbackNV`);
  if (*cast(void**)&glPauseTransformFeedbackNV_Z is null) assert(0, `OpenGL function 'glPauseTransformFeedbackNV' not found!`);
  glPauseTransformFeedbackNV_Z();
}
alias glResumeTransformFeedbackNV = glResumeTransformFeedbackNV_Z;
__gshared glbfn_glResumeTransformFeedbackNV glResumeTransformFeedbackNV_Z = function void () {
  glbfn_glResumeTransformFeedbackNV_loader();
};
private void glbfn_glResumeTransformFeedbackNV_loader () {
  *cast(void**)&glResumeTransformFeedbackNV_Z = glbindGetProcAddress(`glResumeTransformFeedbackNV`);
  if (*cast(void**)&glResumeTransformFeedbackNV_Z is null) assert(0, `OpenGL function 'glResumeTransformFeedbackNV' not found!`);
  glResumeTransformFeedbackNV_Z();
}
alias glDrawTransformFeedbackNV = glDrawTransformFeedbackNV_Z;
__gshared glbfn_glDrawTransformFeedbackNV glDrawTransformFeedbackNV_Z = function void (uint a00,uint a01) {
  glbfn_glDrawTransformFeedbackNV_loader(a00,a01,);
};
private void glbfn_glDrawTransformFeedbackNV_loader (uint a00,uint a01) {
  *cast(void**)&glDrawTransformFeedbackNV_Z = glbindGetProcAddress(`glDrawTransformFeedbackNV`);
  if (*cast(void**)&glDrawTransformFeedbackNV_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackNV' not found!`);
  glDrawTransformFeedbackNV_Z(a00,a01,);
}
alias glVDPAUInitNV = glVDPAUInitNV_Z;
__gshared glbfn_glVDPAUInitNV glVDPAUInitNV_Z = function void (const(void)* a00,const(void)* a01) {
  glbfn_glVDPAUInitNV_loader(a00,a01,);
};
private void glbfn_glVDPAUInitNV_loader (const(void)* a00,const(void)* a01) {
  *cast(void**)&glVDPAUInitNV_Z = glbindGetProcAddress(`glVDPAUInitNV`);
  if (*cast(void**)&glVDPAUInitNV_Z is null) assert(0, `OpenGL function 'glVDPAUInitNV' not found!`);
  glVDPAUInitNV_Z(a00,a01,);
}
alias glVDPAUFiniNV = glVDPAUFiniNV_Z;
__gshared glbfn_glVDPAUFiniNV glVDPAUFiniNV_Z = function void () {
  glbfn_glVDPAUFiniNV_loader();
};
private void glbfn_glVDPAUFiniNV_loader () {
  *cast(void**)&glVDPAUFiniNV_Z = glbindGetProcAddress(`glVDPAUFiniNV`);
  if (*cast(void**)&glVDPAUFiniNV_Z is null) assert(0, `OpenGL function 'glVDPAUFiniNV' not found!`);
  glVDPAUFiniNV_Z();
}
alias glVDPAURegisterVideoSurfaceNV = glVDPAURegisterVideoSurfaceNV_Z;
__gshared glbfn_glVDPAURegisterVideoSurfaceNV glVDPAURegisterVideoSurfaceNV_Z = function int (const(void)* a00,uint a01,int a02,const(uint)* a03) {
  return glbfn_glVDPAURegisterVideoSurfaceNV_loader(a00,a01,a02,a03,);
};
private int glbfn_glVDPAURegisterVideoSurfaceNV_loader (const(void)* a00,uint a01,int a02,const(uint)* a03) {
  *cast(void**)&glVDPAURegisterVideoSurfaceNV_Z = glbindGetProcAddress(`glVDPAURegisterVideoSurfaceNV`);
  if (*cast(void**)&glVDPAURegisterVideoSurfaceNV_Z is null) assert(0, `OpenGL function 'glVDPAURegisterVideoSurfaceNV' not found!`);
  return glVDPAURegisterVideoSurfaceNV_Z(a00,a01,a02,a03,);
}
alias glVDPAURegisterOutputSurfaceNV = glVDPAURegisterOutputSurfaceNV_Z;
__gshared glbfn_glVDPAURegisterOutputSurfaceNV glVDPAURegisterOutputSurfaceNV_Z = function int (const(void)* a00,uint a01,int a02,const(uint)* a03) {
  return glbfn_glVDPAURegisterOutputSurfaceNV_loader(a00,a01,a02,a03,);
};
private int glbfn_glVDPAURegisterOutputSurfaceNV_loader (const(void)* a00,uint a01,int a02,const(uint)* a03) {
  *cast(void**)&glVDPAURegisterOutputSurfaceNV_Z = glbindGetProcAddress(`glVDPAURegisterOutputSurfaceNV`);
  if (*cast(void**)&glVDPAURegisterOutputSurfaceNV_Z is null) assert(0, `OpenGL function 'glVDPAURegisterOutputSurfaceNV' not found!`);
  return glVDPAURegisterOutputSurfaceNV_Z(a00,a01,a02,a03,);
}
alias glVDPAUIsSurfaceNV = glVDPAUIsSurfaceNV_Z;
__gshared glbfn_glVDPAUIsSurfaceNV glVDPAUIsSurfaceNV_Z = function ubyte (int a00) {
  return glbfn_glVDPAUIsSurfaceNV_loader(a00,);
};
private ubyte glbfn_glVDPAUIsSurfaceNV_loader (int a00) {
  *cast(void**)&glVDPAUIsSurfaceNV_Z = glbindGetProcAddress(`glVDPAUIsSurfaceNV`);
  if (*cast(void**)&glVDPAUIsSurfaceNV_Z is null) assert(0, `OpenGL function 'glVDPAUIsSurfaceNV' not found!`);
  return glVDPAUIsSurfaceNV_Z(a00,);
}
alias glVDPAUUnregisterSurfaceNV = glVDPAUUnregisterSurfaceNV_Z;
__gshared glbfn_glVDPAUUnregisterSurfaceNV glVDPAUUnregisterSurfaceNV_Z = function void (int a00) {
  glbfn_glVDPAUUnregisterSurfaceNV_loader(a00,);
};
private void glbfn_glVDPAUUnregisterSurfaceNV_loader (int a00) {
  *cast(void**)&glVDPAUUnregisterSurfaceNV_Z = glbindGetProcAddress(`glVDPAUUnregisterSurfaceNV`);
  if (*cast(void**)&glVDPAUUnregisterSurfaceNV_Z is null) assert(0, `OpenGL function 'glVDPAUUnregisterSurfaceNV' not found!`);
  glVDPAUUnregisterSurfaceNV_Z(a00,);
}
alias glVDPAUGetSurfaceivNV = glVDPAUGetSurfaceivNV_Z;
__gshared glbfn_glVDPAUGetSurfaceivNV glVDPAUGetSurfaceivNV_Z = function void (int a00,uint a01,int a02,int* a03,int* a04) {
  glbfn_glVDPAUGetSurfaceivNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVDPAUGetSurfaceivNV_loader (int a00,uint a01,int a02,int* a03,int* a04) {
  *cast(void**)&glVDPAUGetSurfaceivNV_Z = glbindGetProcAddress(`glVDPAUGetSurfaceivNV`);
  if (*cast(void**)&glVDPAUGetSurfaceivNV_Z is null) assert(0, `OpenGL function 'glVDPAUGetSurfaceivNV' not found!`);
  glVDPAUGetSurfaceivNV_Z(a00,a01,a02,a03,a04,);
}
alias glVDPAUSurfaceAccessNV = glVDPAUSurfaceAccessNV_Z;
__gshared glbfn_glVDPAUSurfaceAccessNV glVDPAUSurfaceAccessNV_Z = function void (int a00,uint a01) {
  glbfn_glVDPAUSurfaceAccessNV_loader(a00,a01,);
};
private void glbfn_glVDPAUSurfaceAccessNV_loader (int a00,uint a01) {
  *cast(void**)&glVDPAUSurfaceAccessNV_Z = glbindGetProcAddress(`glVDPAUSurfaceAccessNV`);
  if (*cast(void**)&glVDPAUSurfaceAccessNV_Z is null) assert(0, `OpenGL function 'glVDPAUSurfaceAccessNV' not found!`);
  glVDPAUSurfaceAccessNV_Z(a00,a01,);
}
alias glVDPAUMapSurfacesNV = glVDPAUMapSurfacesNV_Z;
__gshared glbfn_glVDPAUMapSurfacesNV glVDPAUMapSurfacesNV_Z = function void (int a00,const(int)* a01) {
  glbfn_glVDPAUMapSurfacesNV_loader(a00,a01,);
};
private void glbfn_glVDPAUMapSurfacesNV_loader (int a00,const(int)* a01) {
  *cast(void**)&glVDPAUMapSurfacesNV_Z = glbindGetProcAddress(`glVDPAUMapSurfacesNV`);
  if (*cast(void**)&glVDPAUMapSurfacesNV_Z is null) assert(0, `OpenGL function 'glVDPAUMapSurfacesNV' not found!`);
  glVDPAUMapSurfacesNV_Z(a00,a01,);
}
alias glVDPAUUnmapSurfacesNV = glVDPAUUnmapSurfacesNV_Z;
__gshared glbfn_glVDPAUUnmapSurfacesNV glVDPAUUnmapSurfacesNV_Z = function void (int a00,const(int)* a01) {
  glbfn_glVDPAUUnmapSurfacesNV_loader(a00,a01,);
};
private void glbfn_glVDPAUUnmapSurfacesNV_loader (int a00,const(int)* a01) {
  *cast(void**)&glVDPAUUnmapSurfacesNV_Z = glbindGetProcAddress(`glVDPAUUnmapSurfacesNV`);
  if (*cast(void**)&glVDPAUUnmapSurfacesNV_Z is null) assert(0, `OpenGL function 'glVDPAUUnmapSurfacesNV' not found!`);
  glVDPAUUnmapSurfacesNV_Z(a00,a01,);
}
alias glFlushVertexArrayRangeNV = glFlushVertexArrayRangeNV_Z;
__gshared glbfn_glFlushVertexArrayRangeNV glFlushVertexArrayRangeNV_Z = function void () {
  glbfn_glFlushVertexArrayRangeNV_loader();
};
private void glbfn_glFlushVertexArrayRangeNV_loader () {
  *cast(void**)&glFlushVertexArrayRangeNV_Z = glbindGetProcAddress(`glFlushVertexArrayRangeNV`);
  if (*cast(void**)&glFlushVertexArrayRangeNV_Z is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeNV' not found!`);
  glFlushVertexArrayRangeNV_Z();
}
alias glVertexArrayRangeNV = glVertexArrayRangeNV_Z;
__gshared glbfn_glVertexArrayRangeNV glVertexArrayRangeNV_Z = function void (int a00,const(void)* a01) {
  glbfn_glVertexArrayRangeNV_loader(a00,a01,);
};
private void glbfn_glVertexArrayRangeNV_loader (int a00,const(void)* a01) {
  *cast(void**)&glVertexArrayRangeNV_Z = glbindGetProcAddress(`glVertexArrayRangeNV`);
  if (*cast(void**)&glVertexArrayRangeNV_Z is null) assert(0, `OpenGL function 'glVertexArrayRangeNV' not found!`);
  glVertexArrayRangeNV_Z(a00,a01,);
}
alias glVertexAttribL1i64NV = glVertexAttribL1i64NV_Z;
__gshared glbfn_glVertexAttribL1i64NV glVertexAttribL1i64NV_Z = function void (uint a00,long a01) {
  glbfn_glVertexAttribL1i64NV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1i64NV_loader (uint a00,long a01) {
  *cast(void**)&glVertexAttribL1i64NV_Z = glbindGetProcAddress(`glVertexAttribL1i64NV`);
  if (*cast(void**)&glVertexAttribL1i64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL1i64NV' not found!`);
  glVertexAttribL1i64NV_Z(a00,a01,);
}
alias glVertexAttribL2i64NV = glVertexAttribL2i64NV_Z;
__gshared glbfn_glVertexAttribL2i64NV glVertexAttribL2i64NV_Z = function void (uint a00,long a01,long a02) {
  glbfn_glVertexAttribL2i64NV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribL2i64NV_loader (uint a00,long a01,long a02) {
  *cast(void**)&glVertexAttribL2i64NV_Z = glbindGetProcAddress(`glVertexAttribL2i64NV`);
  if (*cast(void**)&glVertexAttribL2i64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL2i64NV' not found!`);
  glVertexAttribL2i64NV_Z(a00,a01,a02,);
}
alias glVertexAttribL3i64NV = glVertexAttribL3i64NV_Z;
__gshared glbfn_glVertexAttribL3i64NV glVertexAttribL3i64NV_Z = function void (uint a00,long a01,long a02,long a03) {
  glbfn_glVertexAttribL3i64NV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribL3i64NV_loader (uint a00,long a01,long a02,long a03) {
  *cast(void**)&glVertexAttribL3i64NV_Z = glbindGetProcAddress(`glVertexAttribL3i64NV`);
  if (*cast(void**)&glVertexAttribL3i64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL3i64NV' not found!`);
  glVertexAttribL3i64NV_Z(a00,a01,a02,a03,);
}
alias glVertexAttribL4i64NV = glVertexAttribL4i64NV_Z;
__gshared glbfn_glVertexAttribL4i64NV glVertexAttribL4i64NV_Z = function void (uint a00,long a01,long a02,long a03,long a04) {
  glbfn_glVertexAttribL4i64NV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribL4i64NV_loader (uint a00,long a01,long a02,long a03,long a04) {
  *cast(void**)&glVertexAttribL4i64NV_Z = glbindGetProcAddress(`glVertexAttribL4i64NV`);
  if (*cast(void**)&glVertexAttribL4i64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL4i64NV' not found!`);
  glVertexAttribL4i64NV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribL1i64vNV = glVertexAttribL1i64vNV_Z;
__gshared glbfn_glVertexAttribL1i64vNV glVertexAttribL1i64vNV_Z = function void (uint a00,const(long)* a01) {
  glbfn_glVertexAttribL1i64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1i64vNV_loader (uint a00,const(long)* a01) {
  *cast(void**)&glVertexAttribL1i64vNV_Z = glbindGetProcAddress(`glVertexAttribL1i64vNV`);
  if (*cast(void**)&glVertexAttribL1i64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL1i64vNV' not found!`);
  glVertexAttribL1i64vNV_Z(a00,a01,);
}
alias glVertexAttribL2i64vNV = glVertexAttribL2i64vNV_Z;
__gshared glbfn_glVertexAttribL2i64vNV glVertexAttribL2i64vNV_Z = function void (uint a00,const(long)* a01) {
  glbfn_glVertexAttribL2i64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL2i64vNV_loader (uint a00,const(long)* a01) {
  *cast(void**)&glVertexAttribL2i64vNV_Z = glbindGetProcAddress(`glVertexAttribL2i64vNV`);
  if (*cast(void**)&glVertexAttribL2i64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL2i64vNV' not found!`);
  glVertexAttribL2i64vNV_Z(a00,a01,);
}
alias glVertexAttribL3i64vNV = glVertexAttribL3i64vNV_Z;
__gshared glbfn_glVertexAttribL3i64vNV glVertexAttribL3i64vNV_Z = function void (uint a00,const(long)* a01) {
  glbfn_glVertexAttribL3i64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL3i64vNV_loader (uint a00,const(long)* a01) {
  *cast(void**)&glVertexAttribL3i64vNV_Z = glbindGetProcAddress(`glVertexAttribL3i64vNV`);
  if (*cast(void**)&glVertexAttribL3i64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL3i64vNV' not found!`);
  glVertexAttribL3i64vNV_Z(a00,a01,);
}
alias glVertexAttribL4i64vNV = glVertexAttribL4i64vNV_Z;
__gshared glbfn_glVertexAttribL4i64vNV glVertexAttribL4i64vNV_Z = function void (uint a00,const(long)* a01) {
  glbfn_glVertexAttribL4i64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL4i64vNV_loader (uint a00,const(long)* a01) {
  *cast(void**)&glVertexAttribL4i64vNV_Z = glbindGetProcAddress(`glVertexAttribL4i64vNV`);
  if (*cast(void**)&glVertexAttribL4i64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL4i64vNV' not found!`);
  glVertexAttribL4i64vNV_Z(a00,a01,);
}
alias glVertexAttribL1ui64NV = glVertexAttribL1ui64NV_Z;
__gshared glbfn_glVertexAttribL1ui64NV glVertexAttribL1ui64NV_Z = function void (uint a00,ulong a01) {
  glbfn_glVertexAttribL1ui64NV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1ui64NV_loader (uint a00,ulong a01) {
  *cast(void**)&glVertexAttribL1ui64NV_Z = glbindGetProcAddress(`glVertexAttribL1ui64NV`);
  if (*cast(void**)&glVertexAttribL1ui64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64NV' not found!`);
  glVertexAttribL1ui64NV_Z(a00,a01,);
}
alias glVertexAttribL2ui64NV = glVertexAttribL2ui64NV_Z;
__gshared glbfn_glVertexAttribL2ui64NV glVertexAttribL2ui64NV_Z = function void (uint a00,ulong a01,ulong a02) {
  glbfn_glVertexAttribL2ui64NV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribL2ui64NV_loader (uint a00,ulong a01,ulong a02) {
  *cast(void**)&glVertexAttribL2ui64NV_Z = glbindGetProcAddress(`glVertexAttribL2ui64NV`);
  if (*cast(void**)&glVertexAttribL2ui64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL2ui64NV' not found!`);
  glVertexAttribL2ui64NV_Z(a00,a01,a02,);
}
alias glVertexAttribL3ui64NV = glVertexAttribL3ui64NV_Z;
__gshared glbfn_glVertexAttribL3ui64NV glVertexAttribL3ui64NV_Z = function void (uint a00,ulong a01,ulong a02,ulong a03) {
  glbfn_glVertexAttribL3ui64NV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribL3ui64NV_loader (uint a00,ulong a01,ulong a02,ulong a03) {
  *cast(void**)&glVertexAttribL3ui64NV_Z = glbindGetProcAddress(`glVertexAttribL3ui64NV`);
  if (*cast(void**)&glVertexAttribL3ui64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL3ui64NV' not found!`);
  glVertexAttribL3ui64NV_Z(a00,a01,a02,a03,);
}
alias glVertexAttribL4ui64NV = glVertexAttribL4ui64NV_Z;
__gshared glbfn_glVertexAttribL4ui64NV glVertexAttribL4ui64NV_Z = function void (uint a00,ulong a01,ulong a02,ulong a03,ulong a04) {
  glbfn_glVertexAttribL4ui64NV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribL4ui64NV_loader (uint a00,ulong a01,ulong a02,ulong a03,ulong a04) {
  *cast(void**)&glVertexAttribL4ui64NV_Z = glbindGetProcAddress(`glVertexAttribL4ui64NV`);
  if (*cast(void**)&glVertexAttribL4ui64NV_Z is null) assert(0, `OpenGL function 'glVertexAttribL4ui64NV' not found!`);
  glVertexAttribL4ui64NV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribL1ui64vNV = glVertexAttribL1ui64vNV_Z;
__gshared glbfn_glVertexAttribL1ui64vNV glVertexAttribL1ui64vNV_Z = function void (uint a00,const(ulong)* a01) {
  glbfn_glVertexAttribL1ui64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL1ui64vNV_loader (uint a00,const(ulong)* a01) {
  *cast(void**)&glVertexAttribL1ui64vNV_Z = glbindGetProcAddress(`glVertexAttribL1ui64vNV`);
  if (*cast(void**)&glVertexAttribL1ui64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vNV' not found!`);
  glVertexAttribL1ui64vNV_Z(a00,a01,);
}
alias glVertexAttribL2ui64vNV = glVertexAttribL2ui64vNV_Z;
__gshared glbfn_glVertexAttribL2ui64vNV glVertexAttribL2ui64vNV_Z = function void (uint a00,const(ulong)* a01) {
  glbfn_glVertexAttribL2ui64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL2ui64vNV_loader (uint a00,const(ulong)* a01) {
  *cast(void**)&glVertexAttribL2ui64vNV_Z = glbindGetProcAddress(`glVertexAttribL2ui64vNV`);
  if (*cast(void**)&glVertexAttribL2ui64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL2ui64vNV' not found!`);
  glVertexAttribL2ui64vNV_Z(a00,a01,);
}
alias glVertexAttribL3ui64vNV = glVertexAttribL3ui64vNV_Z;
__gshared glbfn_glVertexAttribL3ui64vNV glVertexAttribL3ui64vNV_Z = function void (uint a00,const(ulong)* a01) {
  glbfn_glVertexAttribL3ui64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL3ui64vNV_loader (uint a00,const(ulong)* a01) {
  *cast(void**)&glVertexAttribL3ui64vNV_Z = glbindGetProcAddress(`glVertexAttribL3ui64vNV`);
  if (*cast(void**)&glVertexAttribL3ui64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL3ui64vNV' not found!`);
  glVertexAttribL3ui64vNV_Z(a00,a01,);
}
alias glVertexAttribL4ui64vNV = glVertexAttribL4ui64vNV_Z;
__gshared glbfn_glVertexAttribL4ui64vNV glVertexAttribL4ui64vNV_Z = function void (uint a00,const(ulong)* a01) {
  glbfn_glVertexAttribL4ui64vNV_loader(a00,a01,);
};
private void glbfn_glVertexAttribL4ui64vNV_loader (uint a00,const(ulong)* a01) {
  *cast(void**)&glVertexAttribL4ui64vNV_Z = glbindGetProcAddress(`glVertexAttribL4ui64vNV`);
  if (*cast(void**)&glVertexAttribL4ui64vNV_Z is null) assert(0, `OpenGL function 'glVertexAttribL4ui64vNV' not found!`);
  glVertexAttribL4ui64vNV_Z(a00,a01,);
}
alias glGetVertexAttribLi64vNV = glGetVertexAttribLi64vNV_Z;
__gshared glbfn_glGetVertexAttribLi64vNV glGetVertexAttribLi64vNV_Z = function void (uint a00,uint a01,long* a02) {
  glbfn_glGetVertexAttribLi64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribLi64vNV_loader (uint a00,uint a01,long* a02) {
  *cast(void**)&glGetVertexAttribLi64vNV_Z = glbindGetProcAddress(`glGetVertexAttribLi64vNV`);
  if (*cast(void**)&glGetVertexAttribLi64vNV_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLi64vNV' not found!`);
  glGetVertexAttribLi64vNV_Z(a00,a01,a02,);
}
alias glGetVertexAttribLui64vNV = glGetVertexAttribLui64vNV_Z;
__gshared glbfn_glGetVertexAttribLui64vNV glGetVertexAttribLui64vNV_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetVertexAttribLui64vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribLui64vNV_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetVertexAttribLui64vNV_Z = glbindGetProcAddress(`glGetVertexAttribLui64vNV`);
  if (*cast(void**)&glGetVertexAttribLui64vNV_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vNV' not found!`);
  glGetVertexAttribLui64vNV_Z(a00,a01,a02,);
}
alias glVertexAttribLFormatNV = glVertexAttribLFormatNV_Z;
__gshared glbfn_glVertexAttribLFormatNV glVertexAttribLFormatNV_Z = function void (uint a00,int a01,uint a02,int a03) {
  glbfn_glVertexAttribLFormatNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribLFormatNV_loader (uint a00,int a01,uint a02,int a03) {
  *cast(void**)&glVertexAttribLFormatNV_Z = glbindGetProcAddress(`glVertexAttribLFormatNV`);
  if (*cast(void**)&glVertexAttribLFormatNV_Z is null) assert(0, `OpenGL function 'glVertexAttribLFormatNV' not found!`);
  glVertexAttribLFormatNV_Z(a00,a01,a02,a03,);
}
alias glBufferAddressRangeNV = glBufferAddressRangeNV_Z;
__gshared glbfn_glBufferAddressRangeNV glBufferAddressRangeNV_Z = function void (uint a00,uint a01,ulong a02,int a03) {
  glbfn_glBufferAddressRangeNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glBufferAddressRangeNV_loader (uint a00,uint a01,ulong a02,int a03) {
  *cast(void**)&glBufferAddressRangeNV_Z = glbindGetProcAddress(`glBufferAddressRangeNV`);
  if (*cast(void**)&glBufferAddressRangeNV_Z is null) assert(0, `OpenGL function 'glBufferAddressRangeNV' not found!`);
  glBufferAddressRangeNV_Z(a00,a01,a02,a03,);
}
alias glVertexFormatNV = glVertexFormatNV_Z;
__gshared glbfn_glVertexFormatNV glVertexFormatNV_Z = function void (int a00,uint a01,int a02) {
  glbfn_glVertexFormatNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexFormatNV_loader (int a00,uint a01,int a02) {
  *cast(void**)&glVertexFormatNV_Z = glbindGetProcAddress(`glVertexFormatNV`);
  if (*cast(void**)&glVertexFormatNV_Z is null) assert(0, `OpenGL function 'glVertexFormatNV' not found!`);
  glVertexFormatNV_Z(a00,a01,a02,);
}
alias glNormalFormatNV = glNormalFormatNV_Z;
__gshared glbfn_glNormalFormatNV glNormalFormatNV_Z = function void (uint a00,int a01) {
  glbfn_glNormalFormatNV_loader(a00,a01,);
};
private void glbfn_glNormalFormatNV_loader (uint a00,int a01) {
  *cast(void**)&glNormalFormatNV_Z = glbindGetProcAddress(`glNormalFormatNV`);
  if (*cast(void**)&glNormalFormatNV_Z is null) assert(0, `OpenGL function 'glNormalFormatNV' not found!`);
  glNormalFormatNV_Z(a00,a01,);
}
alias glColorFormatNV = glColorFormatNV_Z;
__gshared glbfn_glColorFormatNV glColorFormatNV_Z = function void (int a00,uint a01,int a02) {
  glbfn_glColorFormatNV_loader(a00,a01,a02,);
};
private void glbfn_glColorFormatNV_loader (int a00,uint a01,int a02) {
  *cast(void**)&glColorFormatNV_Z = glbindGetProcAddress(`glColorFormatNV`);
  if (*cast(void**)&glColorFormatNV_Z is null) assert(0, `OpenGL function 'glColorFormatNV' not found!`);
  glColorFormatNV_Z(a00,a01,a02,);
}
alias glIndexFormatNV = glIndexFormatNV_Z;
__gshared glbfn_glIndexFormatNV glIndexFormatNV_Z = function void (uint a00,int a01) {
  glbfn_glIndexFormatNV_loader(a00,a01,);
};
private void glbfn_glIndexFormatNV_loader (uint a00,int a01) {
  *cast(void**)&glIndexFormatNV_Z = glbindGetProcAddress(`glIndexFormatNV`);
  if (*cast(void**)&glIndexFormatNV_Z is null) assert(0, `OpenGL function 'glIndexFormatNV' not found!`);
  glIndexFormatNV_Z(a00,a01,);
}
alias glTexCoordFormatNV = glTexCoordFormatNV_Z;
__gshared glbfn_glTexCoordFormatNV glTexCoordFormatNV_Z = function void (int a00,uint a01,int a02) {
  glbfn_glTexCoordFormatNV_loader(a00,a01,a02,);
};
private void glbfn_glTexCoordFormatNV_loader (int a00,uint a01,int a02) {
  *cast(void**)&glTexCoordFormatNV_Z = glbindGetProcAddress(`glTexCoordFormatNV`);
  if (*cast(void**)&glTexCoordFormatNV_Z is null) assert(0, `OpenGL function 'glTexCoordFormatNV' not found!`);
  glTexCoordFormatNV_Z(a00,a01,a02,);
}
alias glEdgeFlagFormatNV = glEdgeFlagFormatNV_Z;
__gshared glbfn_glEdgeFlagFormatNV glEdgeFlagFormatNV_Z = function void (int a00) {
  glbfn_glEdgeFlagFormatNV_loader(a00,);
};
private void glbfn_glEdgeFlagFormatNV_loader (int a00) {
  *cast(void**)&glEdgeFlagFormatNV_Z = glbindGetProcAddress(`glEdgeFlagFormatNV`);
  if (*cast(void**)&glEdgeFlagFormatNV_Z is null) assert(0, `OpenGL function 'glEdgeFlagFormatNV' not found!`);
  glEdgeFlagFormatNV_Z(a00,);
}
alias glSecondaryColorFormatNV = glSecondaryColorFormatNV_Z;
__gshared glbfn_glSecondaryColorFormatNV glSecondaryColorFormatNV_Z = function void (int a00,uint a01,int a02) {
  glbfn_glSecondaryColorFormatNV_loader(a00,a01,a02,);
};
private void glbfn_glSecondaryColorFormatNV_loader (int a00,uint a01,int a02) {
  *cast(void**)&glSecondaryColorFormatNV_Z = glbindGetProcAddress(`glSecondaryColorFormatNV`);
  if (*cast(void**)&glSecondaryColorFormatNV_Z is null) assert(0, `OpenGL function 'glSecondaryColorFormatNV' not found!`);
  glSecondaryColorFormatNV_Z(a00,a01,a02,);
}
alias glFogCoordFormatNV = glFogCoordFormatNV_Z;
__gshared glbfn_glFogCoordFormatNV glFogCoordFormatNV_Z = function void (uint a00,int a01) {
  glbfn_glFogCoordFormatNV_loader(a00,a01,);
};
private void glbfn_glFogCoordFormatNV_loader (uint a00,int a01) {
  *cast(void**)&glFogCoordFormatNV_Z = glbindGetProcAddress(`glFogCoordFormatNV`);
  if (*cast(void**)&glFogCoordFormatNV_Z is null) assert(0, `OpenGL function 'glFogCoordFormatNV' not found!`);
  glFogCoordFormatNV_Z(a00,a01,);
}
alias glVertexAttribFormatNV = glVertexAttribFormatNV_Z;
__gshared glbfn_glVertexAttribFormatNV glVertexAttribFormatNV_Z = function void (uint a00,int a01,uint a02,ubyte a03,int a04) {
  glbfn_glVertexAttribFormatNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribFormatNV_loader (uint a00,int a01,uint a02,ubyte a03,int a04) {
  *cast(void**)&glVertexAttribFormatNV_Z = glbindGetProcAddress(`glVertexAttribFormatNV`);
  if (*cast(void**)&glVertexAttribFormatNV_Z is null) assert(0, `OpenGL function 'glVertexAttribFormatNV' not found!`);
  glVertexAttribFormatNV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribIFormatNV = glVertexAttribIFormatNV_Z;
__gshared glbfn_glVertexAttribIFormatNV glVertexAttribIFormatNV_Z = function void (uint a00,int a01,uint a02,int a03) {
  glbfn_glVertexAttribIFormatNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribIFormatNV_loader (uint a00,int a01,uint a02,int a03) {
  *cast(void**)&glVertexAttribIFormatNV_Z = glbindGetProcAddress(`glVertexAttribIFormatNV`);
  if (*cast(void**)&glVertexAttribIFormatNV_Z is null) assert(0, `OpenGL function 'glVertexAttribIFormatNV' not found!`);
  glVertexAttribIFormatNV_Z(a00,a01,a02,a03,);
}
alias glGetIntegerui64i_vNV = glGetIntegerui64i_vNV_Z;
__gshared glbfn_glGetIntegerui64i_vNV glGetIntegerui64i_vNV_Z = function void (uint a00,uint a01,ulong* a02) {
  glbfn_glGetIntegerui64i_vNV_loader(a00,a01,a02,);
};
private void glbfn_glGetIntegerui64i_vNV_loader (uint a00,uint a01,ulong* a02) {
  *cast(void**)&glGetIntegerui64i_vNV_Z = glbindGetProcAddress(`glGetIntegerui64i_vNV`);
  if (*cast(void**)&glGetIntegerui64i_vNV_Z is null) assert(0, `OpenGL function 'glGetIntegerui64i_vNV' not found!`);
  glGetIntegerui64i_vNV_Z(a00,a01,a02,);
}
alias glAreProgramsResidentNV = glAreProgramsResidentNV_Z;
__gshared glbfn_glAreProgramsResidentNV glAreProgramsResidentNV_Z = function ubyte (int a00,const(uint)* a01,ubyte* a02) {
  return glbfn_glAreProgramsResidentNV_loader(a00,a01,a02,);
};
private ubyte glbfn_glAreProgramsResidentNV_loader (int a00,const(uint)* a01,ubyte* a02) {
  *cast(void**)&glAreProgramsResidentNV_Z = glbindGetProcAddress(`glAreProgramsResidentNV`);
  if (*cast(void**)&glAreProgramsResidentNV_Z is null) assert(0, `OpenGL function 'glAreProgramsResidentNV' not found!`);
  return glAreProgramsResidentNV_Z(a00,a01,a02,);
}
alias glBindProgramNV = glBindProgramNV_Z;
__gshared glbfn_glBindProgramNV glBindProgramNV_Z = function void (uint a00,uint a01) {
  glbfn_glBindProgramNV_loader(a00,a01,);
};
private void glbfn_glBindProgramNV_loader (uint a00,uint a01) {
  *cast(void**)&glBindProgramNV_Z = glbindGetProcAddress(`glBindProgramNV`);
  if (*cast(void**)&glBindProgramNV_Z is null) assert(0, `OpenGL function 'glBindProgramNV' not found!`);
  glBindProgramNV_Z(a00,a01,);
}
alias glDeleteProgramsNV = glDeleteProgramsNV_Z;
__gshared glbfn_glDeleteProgramsNV glDeleteProgramsNV_Z = function void (int a00,const(uint)* a01) {
  glbfn_glDeleteProgramsNV_loader(a00,a01,);
};
private void glbfn_glDeleteProgramsNV_loader (int a00,const(uint)* a01) {
  *cast(void**)&glDeleteProgramsNV_Z = glbindGetProcAddress(`glDeleteProgramsNV`);
  if (*cast(void**)&glDeleteProgramsNV_Z is null) assert(0, `OpenGL function 'glDeleteProgramsNV' not found!`);
  glDeleteProgramsNV_Z(a00,a01,);
}
alias glExecuteProgramNV = glExecuteProgramNV_Z;
__gshared glbfn_glExecuteProgramNV glExecuteProgramNV_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glExecuteProgramNV_loader(a00,a01,a02,);
};
private void glbfn_glExecuteProgramNV_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glExecuteProgramNV_Z = glbindGetProcAddress(`glExecuteProgramNV`);
  if (*cast(void**)&glExecuteProgramNV_Z is null) assert(0, `OpenGL function 'glExecuteProgramNV' not found!`);
  glExecuteProgramNV_Z(a00,a01,a02,);
}
alias glGenProgramsNV = glGenProgramsNV_Z;
__gshared glbfn_glGenProgramsNV glGenProgramsNV_Z = function void (int a00,uint* a01) {
  glbfn_glGenProgramsNV_loader(a00,a01,);
};
private void glbfn_glGenProgramsNV_loader (int a00,uint* a01) {
  *cast(void**)&glGenProgramsNV_Z = glbindGetProcAddress(`glGenProgramsNV`);
  if (*cast(void**)&glGenProgramsNV_Z is null) assert(0, `OpenGL function 'glGenProgramsNV' not found!`);
  glGenProgramsNV_Z(a00,a01,);
}
alias glGetProgramParameterdvNV = glGetProgramParameterdvNV_Z;
__gshared glbfn_glGetProgramParameterdvNV glGetProgramParameterdvNV_Z = function void (uint a00,uint a01,uint a02,double* a03) {
  glbfn_glGetProgramParameterdvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramParameterdvNV_loader (uint a00,uint a01,uint a02,double* a03) {
  *cast(void**)&glGetProgramParameterdvNV_Z = glbindGetProcAddress(`glGetProgramParameterdvNV`);
  if (*cast(void**)&glGetProgramParameterdvNV_Z is null) assert(0, `OpenGL function 'glGetProgramParameterdvNV' not found!`);
  glGetProgramParameterdvNV_Z(a00,a01,a02,a03,);
}
alias glGetProgramParameterfvNV = glGetProgramParameterfvNV_Z;
__gshared glbfn_glGetProgramParameterfvNV glGetProgramParameterfvNV_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetProgramParameterfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetProgramParameterfvNV_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetProgramParameterfvNV_Z = glbindGetProcAddress(`glGetProgramParameterfvNV`);
  if (*cast(void**)&glGetProgramParameterfvNV_Z is null) assert(0, `OpenGL function 'glGetProgramParameterfvNV' not found!`);
  glGetProgramParameterfvNV_Z(a00,a01,a02,a03,);
}
alias glGetProgramivNV = glGetProgramivNV_Z;
__gshared glbfn_glGetProgramivNV glGetProgramivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetProgramivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetProgramivNV_Z = glbindGetProcAddress(`glGetProgramivNV`);
  if (*cast(void**)&glGetProgramivNV_Z is null) assert(0, `OpenGL function 'glGetProgramivNV' not found!`);
  glGetProgramivNV_Z(a00,a01,a02,);
}
alias glGetProgramStringNV = glGetProgramStringNV_Z;
__gshared glbfn_glGetProgramStringNV glGetProgramStringNV_Z = function void (uint a00,uint a01,ubyte* a02) {
  glbfn_glGetProgramStringNV_loader(a00,a01,a02,);
};
private void glbfn_glGetProgramStringNV_loader (uint a00,uint a01,ubyte* a02) {
  *cast(void**)&glGetProgramStringNV_Z = glbindGetProcAddress(`glGetProgramStringNV`);
  if (*cast(void**)&glGetProgramStringNV_Z is null) assert(0, `OpenGL function 'glGetProgramStringNV' not found!`);
  glGetProgramStringNV_Z(a00,a01,a02,);
}
alias glGetTrackMatrixivNV = glGetTrackMatrixivNV_Z;
__gshared glbfn_glGetTrackMatrixivNV glGetTrackMatrixivNV_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetTrackMatrixivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTrackMatrixivNV_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetTrackMatrixivNV_Z = glbindGetProcAddress(`glGetTrackMatrixivNV`);
  if (*cast(void**)&glGetTrackMatrixivNV_Z is null) assert(0, `OpenGL function 'glGetTrackMatrixivNV' not found!`);
  glGetTrackMatrixivNV_Z(a00,a01,a02,a03,);
}
alias glGetVertexAttribdvNV = glGetVertexAttribdvNV_Z;
__gshared glbfn_glGetVertexAttribdvNV glGetVertexAttribdvNV_Z = function void (uint a00,uint a01,double* a02) {
  glbfn_glGetVertexAttribdvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribdvNV_loader (uint a00,uint a01,double* a02) {
  *cast(void**)&glGetVertexAttribdvNV_Z = glbindGetProcAddress(`glGetVertexAttribdvNV`);
  if (*cast(void**)&glGetVertexAttribdvNV_Z is null) assert(0, `OpenGL function 'glGetVertexAttribdvNV' not found!`);
  glGetVertexAttribdvNV_Z(a00,a01,a02,);
}
alias glGetVertexAttribfvNV = glGetVertexAttribfvNV_Z;
__gshared glbfn_glGetVertexAttribfvNV glGetVertexAttribfvNV_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetVertexAttribfvNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribfvNV_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetVertexAttribfvNV_Z = glbindGetProcAddress(`glGetVertexAttribfvNV`);
  if (*cast(void**)&glGetVertexAttribfvNV_Z is null) assert(0, `OpenGL function 'glGetVertexAttribfvNV' not found!`);
  glGetVertexAttribfvNV_Z(a00,a01,a02,);
}
alias glGetVertexAttribivNV = glGetVertexAttribivNV_Z;
__gshared glbfn_glGetVertexAttribivNV glGetVertexAttribivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexAttribivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexAttribivNV_Z = glbindGetProcAddress(`glGetVertexAttribivNV`);
  if (*cast(void**)&glGetVertexAttribivNV_Z is null) assert(0, `OpenGL function 'glGetVertexAttribivNV' not found!`);
  glGetVertexAttribivNV_Z(a00,a01,a02,);
}
alias glGetVertexAttribPointervNV = glGetVertexAttribPointervNV_Z;
__gshared glbfn_glGetVertexAttribPointervNV glGetVertexAttribPointervNV_Z = function void (uint a00,uint a01,void** a02) {
  glbfn_glGetVertexAttribPointervNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribPointervNV_loader (uint a00,uint a01,void** a02) {
  *cast(void**)&glGetVertexAttribPointervNV_Z = glbindGetProcAddress(`glGetVertexAttribPointervNV`);
  if (*cast(void**)&glGetVertexAttribPointervNV_Z is null) assert(0, `OpenGL function 'glGetVertexAttribPointervNV' not found!`);
  glGetVertexAttribPointervNV_Z(a00,a01,a02,);
}
alias glIsProgramNV = glIsProgramNV_Z;
__gshared glbfn_glIsProgramNV glIsProgramNV_Z = function ubyte (uint a00) {
  return glbfn_glIsProgramNV_loader(a00,);
};
private ubyte glbfn_glIsProgramNV_loader (uint a00) {
  *cast(void**)&glIsProgramNV_Z = glbindGetProcAddress(`glIsProgramNV`);
  if (*cast(void**)&glIsProgramNV_Z is null) assert(0, `OpenGL function 'glIsProgramNV' not found!`);
  return glIsProgramNV_Z(a00,);
}
alias glLoadProgramNV = glLoadProgramNV_Z;
__gshared glbfn_glLoadProgramNV glLoadProgramNV_Z = function void (uint a00,uint a01,int a02,const(ubyte)* a03) {
  glbfn_glLoadProgramNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glLoadProgramNV_loader (uint a00,uint a01,int a02,const(ubyte)* a03) {
  *cast(void**)&glLoadProgramNV_Z = glbindGetProcAddress(`glLoadProgramNV`);
  if (*cast(void**)&glLoadProgramNV_Z is null) assert(0, `OpenGL function 'glLoadProgramNV' not found!`);
  glLoadProgramNV_Z(a00,a01,a02,a03,);
}
alias glProgramParameter4dNV = glProgramParameter4dNV_Z;
__gshared glbfn_glProgramParameter4dNV glProgramParameter4dNV_Z = function void (uint a00,uint a01,double a02,double a03,double a04,double a05) {
  glbfn_glProgramParameter4dNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramParameter4dNV_loader (uint a00,uint a01,double a02,double a03,double a04,double a05) {
  *cast(void**)&glProgramParameter4dNV_Z = glbindGetProcAddress(`glProgramParameter4dNV`);
  if (*cast(void**)&glProgramParameter4dNV_Z is null) assert(0, `OpenGL function 'glProgramParameter4dNV' not found!`);
  glProgramParameter4dNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramParameter4dvNV = glProgramParameter4dvNV_Z;
__gshared glbfn_glProgramParameter4dvNV glProgramParameter4dvNV_Z = function void (uint a00,uint a01,const(double)* a02) {
  glbfn_glProgramParameter4dvNV_loader(a00,a01,a02,);
};
private void glbfn_glProgramParameter4dvNV_loader (uint a00,uint a01,const(double)* a02) {
  *cast(void**)&glProgramParameter4dvNV_Z = glbindGetProcAddress(`glProgramParameter4dvNV`);
  if (*cast(void**)&glProgramParameter4dvNV_Z is null) assert(0, `OpenGL function 'glProgramParameter4dvNV' not found!`);
  glProgramParameter4dvNV_Z(a00,a01,a02,);
}
alias glProgramParameter4fNV = glProgramParameter4fNV_Z;
__gshared glbfn_glProgramParameter4fNV glProgramParameter4fNV_Z = function void (uint a00,uint a01,float a02,float a03,float a04,float a05) {
  glbfn_glProgramParameter4fNV_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glProgramParameter4fNV_loader (uint a00,uint a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glProgramParameter4fNV_Z = glbindGetProcAddress(`glProgramParameter4fNV`);
  if (*cast(void**)&glProgramParameter4fNV_Z is null) assert(0, `OpenGL function 'glProgramParameter4fNV' not found!`);
  glProgramParameter4fNV_Z(a00,a01,a02,a03,a04,a05,);
}
alias glProgramParameter4fvNV = glProgramParameter4fvNV_Z;
__gshared glbfn_glProgramParameter4fvNV glProgramParameter4fvNV_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glProgramParameter4fvNV_loader(a00,a01,a02,);
};
private void glbfn_glProgramParameter4fvNV_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glProgramParameter4fvNV_Z = glbindGetProcAddress(`glProgramParameter4fvNV`);
  if (*cast(void**)&glProgramParameter4fvNV_Z is null) assert(0, `OpenGL function 'glProgramParameter4fvNV' not found!`);
  glProgramParameter4fvNV_Z(a00,a01,a02,);
}
alias glProgramParameters4dvNV = glProgramParameters4dvNV_Z;
__gshared glbfn_glProgramParameters4dvNV glProgramParameters4dvNV_Z = function void (uint a00,uint a01,int a02,const(double)* a03) {
  glbfn_glProgramParameters4dvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramParameters4dvNV_loader (uint a00,uint a01,int a02,const(double)* a03) {
  *cast(void**)&glProgramParameters4dvNV_Z = glbindGetProcAddress(`glProgramParameters4dvNV`);
  if (*cast(void**)&glProgramParameters4dvNV_Z is null) assert(0, `OpenGL function 'glProgramParameters4dvNV' not found!`);
  glProgramParameters4dvNV_Z(a00,a01,a02,a03,);
}
alias glProgramParameters4fvNV = glProgramParameters4fvNV_Z;
__gshared glbfn_glProgramParameters4fvNV glProgramParameters4fvNV_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glProgramParameters4fvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glProgramParameters4fvNV_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glProgramParameters4fvNV_Z = glbindGetProcAddress(`glProgramParameters4fvNV`);
  if (*cast(void**)&glProgramParameters4fvNV_Z is null) assert(0, `OpenGL function 'glProgramParameters4fvNV' not found!`);
  glProgramParameters4fvNV_Z(a00,a01,a02,a03,);
}
alias glRequestResidentProgramsNV = glRequestResidentProgramsNV_Z;
__gshared glbfn_glRequestResidentProgramsNV glRequestResidentProgramsNV_Z = function void (int a00,const(uint)* a01) {
  glbfn_glRequestResidentProgramsNV_loader(a00,a01,);
};
private void glbfn_glRequestResidentProgramsNV_loader (int a00,const(uint)* a01) {
  *cast(void**)&glRequestResidentProgramsNV_Z = glbindGetProcAddress(`glRequestResidentProgramsNV`);
  if (*cast(void**)&glRequestResidentProgramsNV_Z is null) assert(0, `OpenGL function 'glRequestResidentProgramsNV' not found!`);
  glRequestResidentProgramsNV_Z(a00,a01,);
}
alias glTrackMatrixNV = glTrackMatrixNV_Z;
__gshared glbfn_glTrackMatrixNV glTrackMatrixNV_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glTrackMatrixNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glTrackMatrixNV_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glTrackMatrixNV_Z = glbindGetProcAddress(`glTrackMatrixNV`);
  if (*cast(void**)&glTrackMatrixNV_Z is null) assert(0, `OpenGL function 'glTrackMatrixNV' not found!`);
  glTrackMatrixNV_Z(a00,a01,a02,a03,);
}
alias glVertexAttribPointerNV = glVertexAttribPointerNV_Z;
__gshared glbfn_glVertexAttribPointerNV glVertexAttribPointerNV_Z = function void (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  glbfn_glVertexAttribPointerNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribPointerNV_loader (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  *cast(void**)&glVertexAttribPointerNV_Z = glbindGetProcAddress(`glVertexAttribPointerNV`);
  if (*cast(void**)&glVertexAttribPointerNV_Z is null) assert(0, `OpenGL function 'glVertexAttribPointerNV' not found!`);
  glVertexAttribPointerNV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib1dNV = glVertexAttrib1dNV_Z;
__gshared glbfn_glVertexAttrib1dNV glVertexAttrib1dNV_Z = function void (uint a00,double a01) {
  glbfn_glVertexAttrib1dNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1dNV_loader (uint a00,double a01) {
  *cast(void**)&glVertexAttrib1dNV_Z = glbindGetProcAddress(`glVertexAttrib1dNV`);
  if (*cast(void**)&glVertexAttrib1dNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dNV' not found!`);
  glVertexAttrib1dNV_Z(a00,a01,);
}
alias glVertexAttrib1dvNV = glVertexAttrib1dvNV_Z;
__gshared glbfn_glVertexAttrib1dvNV glVertexAttrib1dvNV_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib1dvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1dvNV_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib1dvNV_Z = glbindGetProcAddress(`glVertexAttrib1dvNV`);
  if (*cast(void**)&glVertexAttrib1dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dvNV' not found!`);
  glVertexAttrib1dvNV_Z(a00,a01,);
}
alias glVertexAttrib1fNV = glVertexAttrib1fNV_Z;
__gshared glbfn_glVertexAttrib1fNV glVertexAttrib1fNV_Z = function void (uint a00,float a01) {
  glbfn_glVertexAttrib1fNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1fNV_loader (uint a00,float a01) {
  *cast(void**)&glVertexAttrib1fNV_Z = glbindGetProcAddress(`glVertexAttrib1fNV`);
  if (*cast(void**)&glVertexAttrib1fNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fNV' not found!`);
  glVertexAttrib1fNV_Z(a00,a01,);
}
alias glVertexAttrib1fvNV = glVertexAttrib1fvNV_Z;
__gshared glbfn_glVertexAttrib1fvNV glVertexAttrib1fvNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib1fvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1fvNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib1fvNV_Z = glbindGetProcAddress(`glVertexAttrib1fvNV`);
  if (*cast(void**)&glVertexAttrib1fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fvNV' not found!`);
  glVertexAttrib1fvNV_Z(a00,a01,);
}
alias glVertexAttrib1sNV = glVertexAttrib1sNV_Z;
__gshared glbfn_glVertexAttrib1sNV glVertexAttrib1sNV_Z = function void (uint a00,short a01) {
  glbfn_glVertexAttrib1sNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1sNV_loader (uint a00,short a01) {
  *cast(void**)&glVertexAttrib1sNV_Z = glbindGetProcAddress(`glVertexAttrib1sNV`);
  if (*cast(void**)&glVertexAttrib1sNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1sNV' not found!`);
  glVertexAttrib1sNV_Z(a00,a01,);
}
alias glVertexAttrib1svNV = glVertexAttrib1svNV_Z;
__gshared glbfn_glVertexAttrib1svNV glVertexAttrib1svNV_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib1svNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib1svNV_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib1svNV_Z = glbindGetProcAddress(`glVertexAttrib1svNV`);
  if (*cast(void**)&glVertexAttrib1svNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib1svNV' not found!`);
  glVertexAttrib1svNV_Z(a00,a01,);
}
alias glVertexAttrib2dNV = glVertexAttrib2dNV_Z;
__gshared glbfn_glVertexAttrib2dNV glVertexAttrib2dNV_Z = function void (uint a00,double a01,double a02) {
  glbfn_glVertexAttrib2dNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2dNV_loader (uint a00,double a01,double a02) {
  *cast(void**)&glVertexAttrib2dNV_Z = glbindGetProcAddress(`glVertexAttrib2dNV`);
  if (*cast(void**)&glVertexAttrib2dNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dNV' not found!`);
  glVertexAttrib2dNV_Z(a00,a01,a02,);
}
alias glVertexAttrib2dvNV = glVertexAttrib2dvNV_Z;
__gshared glbfn_glVertexAttrib2dvNV glVertexAttrib2dvNV_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib2dvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2dvNV_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib2dvNV_Z = glbindGetProcAddress(`glVertexAttrib2dvNV`);
  if (*cast(void**)&glVertexAttrib2dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dvNV' not found!`);
  glVertexAttrib2dvNV_Z(a00,a01,);
}
alias glVertexAttrib2fNV = glVertexAttrib2fNV_Z;
__gshared glbfn_glVertexAttrib2fNV glVertexAttrib2fNV_Z = function void (uint a00,float a01,float a02) {
  glbfn_glVertexAttrib2fNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2fNV_loader (uint a00,float a01,float a02) {
  *cast(void**)&glVertexAttrib2fNV_Z = glbindGetProcAddress(`glVertexAttrib2fNV`);
  if (*cast(void**)&glVertexAttrib2fNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fNV' not found!`);
  glVertexAttrib2fNV_Z(a00,a01,a02,);
}
alias glVertexAttrib2fvNV = glVertexAttrib2fvNV_Z;
__gshared glbfn_glVertexAttrib2fvNV glVertexAttrib2fvNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib2fvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2fvNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib2fvNV_Z = glbindGetProcAddress(`glVertexAttrib2fvNV`);
  if (*cast(void**)&glVertexAttrib2fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fvNV' not found!`);
  glVertexAttrib2fvNV_Z(a00,a01,);
}
alias glVertexAttrib2sNV = glVertexAttrib2sNV_Z;
__gshared glbfn_glVertexAttrib2sNV glVertexAttrib2sNV_Z = function void (uint a00,short a01,short a02) {
  glbfn_glVertexAttrib2sNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttrib2sNV_loader (uint a00,short a01,short a02) {
  *cast(void**)&glVertexAttrib2sNV_Z = glbindGetProcAddress(`glVertexAttrib2sNV`);
  if (*cast(void**)&glVertexAttrib2sNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2sNV' not found!`);
  glVertexAttrib2sNV_Z(a00,a01,a02,);
}
alias glVertexAttrib2svNV = glVertexAttrib2svNV_Z;
__gshared glbfn_glVertexAttrib2svNV glVertexAttrib2svNV_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib2svNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib2svNV_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib2svNV_Z = glbindGetProcAddress(`glVertexAttrib2svNV`);
  if (*cast(void**)&glVertexAttrib2svNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib2svNV' not found!`);
  glVertexAttrib2svNV_Z(a00,a01,);
}
alias glVertexAttrib3dNV = glVertexAttrib3dNV_Z;
__gshared glbfn_glVertexAttrib3dNV glVertexAttrib3dNV_Z = function void (uint a00,double a01,double a02,double a03) {
  glbfn_glVertexAttrib3dNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3dNV_loader (uint a00,double a01,double a02,double a03) {
  *cast(void**)&glVertexAttrib3dNV_Z = glbindGetProcAddress(`glVertexAttrib3dNV`);
  if (*cast(void**)&glVertexAttrib3dNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dNV' not found!`);
  glVertexAttrib3dNV_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3dvNV = glVertexAttrib3dvNV_Z;
__gshared glbfn_glVertexAttrib3dvNV glVertexAttrib3dvNV_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib3dvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3dvNV_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib3dvNV_Z = glbindGetProcAddress(`glVertexAttrib3dvNV`);
  if (*cast(void**)&glVertexAttrib3dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dvNV' not found!`);
  glVertexAttrib3dvNV_Z(a00,a01,);
}
alias glVertexAttrib3fNV = glVertexAttrib3fNV_Z;
__gshared glbfn_glVertexAttrib3fNV glVertexAttrib3fNV_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glVertexAttrib3fNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3fNV_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glVertexAttrib3fNV_Z = glbindGetProcAddress(`glVertexAttrib3fNV`);
  if (*cast(void**)&glVertexAttrib3fNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fNV' not found!`);
  glVertexAttrib3fNV_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3fvNV = glVertexAttrib3fvNV_Z;
__gshared glbfn_glVertexAttrib3fvNV glVertexAttrib3fvNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib3fvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3fvNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib3fvNV_Z = glbindGetProcAddress(`glVertexAttrib3fvNV`);
  if (*cast(void**)&glVertexAttrib3fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fvNV' not found!`);
  glVertexAttrib3fvNV_Z(a00,a01,);
}
alias glVertexAttrib3sNV = glVertexAttrib3sNV_Z;
__gshared glbfn_glVertexAttrib3sNV glVertexAttrib3sNV_Z = function void (uint a00,short a01,short a02,short a03) {
  glbfn_glVertexAttrib3sNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttrib3sNV_loader (uint a00,short a01,short a02,short a03) {
  *cast(void**)&glVertexAttrib3sNV_Z = glbindGetProcAddress(`glVertexAttrib3sNV`);
  if (*cast(void**)&glVertexAttrib3sNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3sNV' not found!`);
  glVertexAttrib3sNV_Z(a00,a01,a02,a03,);
}
alias glVertexAttrib3svNV = glVertexAttrib3svNV_Z;
__gshared glbfn_glVertexAttrib3svNV glVertexAttrib3svNV_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib3svNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib3svNV_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib3svNV_Z = glbindGetProcAddress(`glVertexAttrib3svNV`);
  if (*cast(void**)&glVertexAttrib3svNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib3svNV' not found!`);
  glVertexAttrib3svNV_Z(a00,a01,);
}
alias glVertexAttrib4dNV = glVertexAttrib4dNV_Z;
__gshared glbfn_glVertexAttrib4dNV glVertexAttrib4dNV_Z = function void (uint a00,double a01,double a02,double a03,double a04) {
  glbfn_glVertexAttrib4dNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4dNV_loader (uint a00,double a01,double a02,double a03,double a04) {
  *cast(void**)&glVertexAttrib4dNV_Z = glbindGetProcAddress(`glVertexAttrib4dNV`);
  if (*cast(void**)&glVertexAttrib4dNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dNV' not found!`);
  glVertexAttrib4dNV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4dvNV = glVertexAttrib4dvNV_Z;
__gshared glbfn_glVertexAttrib4dvNV glVertexAttrib4dvNV_Z = function void (uint a00,const(double)* a01) {
  glbfn_glVertexAttrib4dvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4dvNV_loader (uint a00,const(double)* a01) {
  *cast(void**)&glVertexAttrib4dvNV_Z = glbindGetProcAddress(`glVertexAttrib4dvNV`);
  if (*cast(void**)&glVertexAttrib4dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dvNV' not found!`);
  glVertexAttrib4dvNV_Z(a00,a01,);
}
alias glVertexAttrib4fNV = glVertexAttrib4fNV_Z;
__gshared glbfn_glVertexAttrib4fNV glVertexAttrib4fNV_Z = function void (uint a00,float a01,float a02,float a03,float a04) {
  glbfn_glVertexAttrib4fNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4fNV_loader (uint a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glVertexAttrib4fNV_Z = glbindGetProcAddress(`glVertexAttrib4fNV`);
  if (*cast(void**)&glVertexAttrib4fNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fNV' not found!`);
  glVertexAttrib4fNV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4fvNV = glVertexAttrib4fvNV_Z;
__gshared glbfn_glVertexAttrib4fvNV glVertexAttrib4fvNV_Z = function void (uint a00,const(float)* a01) {
  glbfn_glVertexAttrib4fvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4fvNV_loader (uint a00,const(float)* a01) {
  *cast(void**)&glVertexAttrib4fvNV_Z = glbindGetProcAddress(`glVertexAttrib4fvNV`);
  if (*cast(void**)&glVertexAttrib4fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fvNV' not found!`);
  glVertexAttrib4fvNV_Z(a00,a01,);
}
alias glVertexAttrib4sNV = glVertexAttrib4sNV_Z;
__gshared glbfn_glVertexAttrib4sNV glVertexAttrib4sNV_Z = function void (uint a00,short a01,short a02,short a03,short a04) {
  glbfn_glVertexAttrib4sNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4sNV_loader (uint a00,short a01,short a02,short a03,short a04) {
  *cast(void**)&glVertexAttrib4sNV_Z = glbindGetProcAddress(`glVertexAttrib4sNV`);
  if (*cast(void**)&glVertexAttrib4sNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4sNV' not found!`);
  glVertexAttrib4sNV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4svNV = glVertexAttrib4svNV_Z;
__gshared glbfn_glVertexAttrib4svNV glVertexAttrib4svNV_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttrib4svNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4svNV_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttrib4svNV_Z = glbindGetProcAddress(`glVertexAttrib4svNV`);
  if (*cast(void**)&glVertexAttrib4svNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4svNV' not found!`);
  glVertexAttrib4svNV_Z(a00,a01,);
}
alias glVertexAttrib4ubNV = glVertexAttrib4ubNV_Z;
__gshared glbfn_glVertexAttrib4ubNV glVertexAttrib4ubNV_Z = function void (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  glbfn_glVertexAttrib4ubNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttrib4ubNV_loader (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04) {
  *cast(void**)&glVertexAttrib4ubNV_Z = glbindGetProcAddress(`glVertexAttrib4ubNV`);
  if (*cast(void**)&glVertexAttrib4ubNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubNV' not found!`);
  glVertexAttrib4ubNV_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttrib4ubvNV = glVertexAttrib4ubvNV_Z;
__gshared glbfn_glVertexAttrib4ubvNV glVertexAttrib4ubvNV_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVertexAttrib4ubvNV_loader(a00,a01,);
};
private void glbfn_glVertexAttrib4ubvNV_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVertexAttrib4ubvNV_Z = glbindGetProcAddress(`glVertexAttrib4ubvNV`);
  if (*cast(void**)&glVertexAttrib4ubvNV_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubvNV' not found!`);
  glVertexAttrib4ubvNV_Z(a00,a01,);
}
alias glVertexAttribs1dvNV = glVertexAttribs1dvNV_Z;
__gshared glbfn_glVertexAttribs1dvNV glVertexAttribs1dvNV_Z = function void (uint a00,int a01,const(double)* a02) {
  glbfn_glVertexAttribs1dvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs1dvNV_loader (uint a00,int a01,const(double)* a02) {
  *cast(void**)&glVertexAttribs1dvNV_Z = glbindGetProcAddress(`glVertexAttribs1dvNV`);
  if (*cast(void**)&glVertexAttribs1dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs1dvNV' not found!`);
  glVertexAttribs1dvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs1fvNV = glVertexAttribs1fvNV_Z;
__gshared glbfn_glVertexAttribs1fvNV glVertexAttribs1fvNV_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glVertexAttribs1fvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs1fvNV_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glVertexAttribs1fvNV_Z = glbindGetProcAddress(`glVertexAttribs1fvNV`);
  if (*cast(void**)&glVertexAttribs1fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs1fvNV' not found!`);
  glVertexAttribs1fvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs1svNV = glVertexAttribs1svNV_Z;
__gshared glbfn_glVertexAttribs1svNV glVertexAttribs1svNV_Z = function void (uint a00,int a01,const(short)* a02) {
  glbfn_glVertexAttribs1svNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs1svNV_loader (uint a00,int a01,const(short)* a02) {
  *cast(void**)&glVertexAttribs1svNV_Z = glbindGetProcAddress(`glVertexAttribs1svNV`);
  if (*cast(void**)&glVertexAttribs1svNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs1svNV' not found!`);
  glVertexAttribs1svNV_Z(a00,a01,a02,);
}
alias glVertexAttribs2dvNV = glVertexAttribs2dvNV_Z;
__gshared glbfn_glVertexAttribs2dvNV glVertexAttribs2dvNV_Z = function void (uint a00,int a01,const(double)* a02) {
  glbfn_glVertexAttribs2dvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs2dvNV_loader (uint a00,int a01,const(double)* a02) {
  *cast(void**)&glVertexAttribs2dvNV_Z = glbindGetProcAddress(`glVertexAttribs2dvNV`);
  if (*cast(void**)&glVertexAttribs2dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs2dvNV' not found!`);
  glVertexAttribs2dvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs2fvNV = glVertexAttribs2fvNV_Z;
__gshared glbfn_glVertexAttribs2fvNV glVertexAttribs2fvNV_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glVertexAttribs2fvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs2fvNV_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glVertexAttribs2fvNV_Z = glbindGetProcAddress(`glVertexAttribs2fvNV`);
  if (*cast(void**)&glVertexAttribs2fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs2fvNV' not found!`);
  glVertexAttribs2fvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs2svNV = glVertexAttribs2svNV_Z;
__gshared glbfn_glVertexAttribs2svNV glVertexAttribs2svNV_Z = function void (uint a00,int a01,const(short)* a02) {
  glbfn_glVertexAttribs2svNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs2svNV_loader (uint a00,int a01,const(short)* a02) {
  *cast(void**)&glVertexAttribs2svNV_Z = glbindGetProcAddress(`glVertexAttribs2svNV`);
  if (*cast(void**)&glVertexAttribs2svNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs2svNV' not found!`);
  glVertexAttribs2svNV_Z(a00,a01,a02,);
}
alias glVertexAttribs3dvNV = glVertexAttribs3dvNV_Z;
__gshared glbfn_glVertexAttribs3dvNV glVertexAttribs3dvNV_Z = function void (uint a00,int a01,const(double)* a02) {
  glbfn_glVertexAttribs3dvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs3dvNV_loader (uint a00,int a01,const(double)* a02) {
  *cast(void**)&glVertexAttribs3dvNV_Z = glbindGetProcAddress(`glVertexAttribs3dvNV`);
  if (*cast(void**)&glVertexAttribs3dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs3dvNV' not found!`);
  glVertexAttribs3dvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs3fvNV = glVertexAttribs3fvNV_Z;
__gshared glbfn_glVertexAttribs3fvNV glVertexAttribs3fvNV_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glVertexAttribs3fvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs3fvNV_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glVertexAttribs3fvNV_Z = glbindGetProcAddress(`glVertexAttribs3fvNV`);
  if (*cast(void**)&glVertexAttribs3fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs3fvNV' not found!`);
  glVertexAttribs3fvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs3svNV = glVertexAttribs3svNV_Z;
__gshared glbfn_glVertexAttribs3svNV glVertexAttribs3svNV_Z = function void (uint a00,int a01,const(short)* a02) {
  glbfn_glVertexAttribs3svNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs3svNV_loader (uint a00,int a01,const(short)* a02) {
  *cast(void**)&glVertexAttribs3svNV_Z = glbindGetProcAddress(`glVertexAttribs3svNV`);
  if (*cast(void**)&glVertexAttribs3svNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs3svNV' not found!`);
  glVertexAttribs3svNV_Z(a00,a01,a02,);
}
alias glVertexAttribs4dvNV = glVertexAttribs4dvNV_Z;
__gshared glbfn_glVertexAttribs4dvNV glVertexAttribs4dvNV_Z = function void (uint a00,int a01,const(double)* a02) {
  glbfn_glVertexAttribs4dvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs4dvNV_loader (uint a00,int a01,const(double)* a02) {
  *cast(void**)&glVertexAttribs4dvNV_Z = glbindGetProcAddress(`glVertexAttribs4dvNV`);
  if (*cast(void**)&glVertexAttribs4dvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs4dvNV' not found!`);
  glVertexAttribs4dvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs4fvNV = glVertexAttribs4fvNV_Z;
__gshared glbfn_glVertexAttribs4fvNV glVertexAttribs4fvNV_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glVertexAttribs4fvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs4fvNV_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glVertexAttribs4fvNV_Z = glbindGetProcAddress(`glVertexAttribs4fvNV`);
  if (*cast(void**)&glVertexAttribs4fvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs4fvNV' not found!`);
  glVertexAttribs4fvNV_Z(a00,a01,a02,);
}
alias glVertexAttribs4svNV = glVertexAttribs4svNV_Z;
__gshared glbfn_glVertexAttribs4svNV glVertexAttribs4svNV_Z = function void (uint a00,int a01,const(short)* a02) {
  glbfn_glVertexAttribs4svNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs4svNV_loader (uint a00,int a01,const(short)* a02) {
  *cast(void**)&glVertexAttribs4svNV_Z = glbindGetProcAddress(`glVertexAttribs4svNV`);
  if (*cast(void**)&glVertexAttribs4svNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs4svNV' not found!`);
  glVertexAttribs4svNV_Z(a00,a01,a02,);
}
alias glVertexAttribs4ubvNV = glVertexAttribs4ubvNV_Z;
__gshared glbfn_glVertexAttribs4ubvNV glVertexAttribs4ubvNV_Z = function void (uint a00,int a01,const(ubyte)* a02) {
  glbfn_glVertexAttribs4ubvNV_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribs4ubvNV_loader (uint a00,int a01,const(ubyte)* a02) {
  *cast(void**)&glVertexAttribs4ubvNV_Z = glbindGetProcAddress(`glVertexAttribs4ubvNV`);
  if (*cast(void**)&glVertexAttribs4ubvNV_Z is null) assert(0, `OpenGL function 'glVertexAttribs4ubvNV' not found!`);
  glVertexAttribs4ubvNV_Z(a00,a01,a02,);
}
alias glVertexAttribI1iEXT = glVertexAttribI1iEXT_Z;
__gshared glbfn_glVertexAttribI1iEXT glVertexAttribI1iEXT_Z = function void (uint a00,int a01) {
  glbfn_glVertexAttribI1iEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1iEXT_loader (uint a00,int a01) {
  *cast(void**)&glVertexAttribI1iEXT_Z = glbindGetProcAddress(`glVertexAttribI1iEXT`);
  if (*cast(void**)&glVertexAttribI1iEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI1iEXT' not found!`);
  glVertexAttribI1iEXT_Z(a00,a01,);
}
alias glVertexAttribI2iEXT = glVertexAttribI2iEXT_Z;
__gshared glbfn_glVertexAttribI2iEXT glVertexAttribI2iEXT_Z = function void (uint a00,int a01,int a02) {
  glbfn_glVertexAttribI2iEXT_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribI2iEXT_loader (uint a00,int a01,int a02) {
  *cast(void**)&glVertexAttribI2iEXT_Z = glbindGetProcAddress(`glVertexAttribI2iEXT`);
  if (*cast(void**)&glVertexAttribI2iEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI2iEXT' not found!`);
  glVertexAttribI2iEXT_Z(a00,a01,a02,);
}
alias glVertexAttribI3iEXT = glVertexAttribI3iEXT_Z;
__gshared glbfn_glVertexAttribI3iEXT glVertexAttribI3iEXT_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glVertexAttribI3iEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribI3iEXT_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glVertexAttribI3iEXT_Z = glbindGetProcAddress(`glVertexAttribI3iEXT`);
  if (*cast(void**)&glVertexAttribI3iEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI3iEXT' not found!`);
  glVertexAttribI3iEXT_Z(a00,a01,a02,a03,);
}
alias glVertexAttribI4iEXT = glVertexAttribI4iEXT_Z;
__gshared glbfn_glVertexAttribI4iEXT glVertexAttribI4iEXT_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glVertexAttribI4iEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribI4iEXT_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glVertexAttribI4iEXT_Z = glbindGetProcAddress(`glVertexAttribI4iEXT`);
  if (*cast(void**)&glVertexAttribI4iEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4iEXT' not found!`);
  glVertexAttribI4iEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribI1uiEXT = glVertexAttribI1uiEXT_Z;
__gshared glbfn_glVertexAttribI1uiEXT glVertexAttribI1uiEXT_Z = function void (uint a00,uint a01) {
  glbfn_glVertexAttribI1uiEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1uiEXT_loader (uint a00,uint a01) {
  *cast(void**)&glVertexAttribI1uiEXT_Z = glbindGetProcAddress(`glVertexAttribI1uiEXT`);
  if (*cast(void**)&glVertexAttribI1uiEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI1uiEXT' not found!`);
  glVertexAttribI1uiEXT_Z(a00,a01,);
}
alias glVertexAttribI2uiEXT = glVertexAttribI2uiEXT_Z;
__gshared glbfn_glVertexAttribI2uiEXT glVertexAttribI2uiEXT_Z = function void (uint a00,uint a01,uint a02) {
  glbfn_glVertexAttribI2uiEXT_loader(a00,a01,a02,);
};
private void glbfn_glVertexAttribI2uiEXT_loader (uint a00,uint a01,uint a02) {
  *cast(void**)&glVertexAttribI2uiEXT_Z = glbindGetProcAddress(`glVertexAttribI2uiEXT`);
  if (*cast(void**)&glVertexAttribI2uiEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI2uiEXT' not found!`);
  glVertexAttribI2uiEXT_Z(a00,a01,a02,);
}
alias glVertexAttribI3uiEXT = glVertexAttribI3uiEXT_Z;
__gshared glbfn_glVertexAttribI3uiEXT glVertexAttribI3uiEXT_Z = function void (uint a00,uint a01,uint a02,uint a03) {
  glbfn_glVertexAttribI3uiEXT_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertexAttribI3uiEXT_loader (uint a00,uint a01,uint a02,uint a03) {
  *cast(void**)&glVertexAttribI3uiEXT_Z = glbindGetProcAddress(`glVertexAttribI3uiEXT`);
  if (*cast(void**)&glVertexAttribI3uiEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI3uiEXT' not found!`);
  glVertexAttribI3uiEXT_Z(a00,a01,a02,a03,);
}
alias glVertexAttribI4uiEXT = glVertexAttribI4uiEXT_Z;
__gshared glbfn_glVertexAttribI4uiEXT glVertexAttribI4uiEXT_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glVertexAttribI4uiEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribI4uiEXT_loader (uint a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glVertexAttribI4uiEXT_Z = glbindGetProcAddress(`glVertexAttribI4uiEXT`);
  if (*cast(void**)&glVertexAttribI4uiEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4uiEXT' not found!`);
  glVertexAttribI4uiEXT_Z(a00,a01,a02,a03,a04,);
}
alias glVertexAttribI1ivEXT = glVertexAttribI1ivEXT_Z;
__gshared glbfn_glVertexAttribI1ivEXT glVertexAttribI1ivEXT_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI1ivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1ivEXT_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI1ivEXT_Z = glbindGetProcAddress(`glVertexAttribI1ivEXT`);
  if (*cast(void**)&glVertexAttribI1ivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI1ivEXT' not found!`);
  glVertexAttribI1ivEXT_Z(a00,a01,);
}
alias glVertexAttribI2ivEXT = glVertexAttribI2ivEXT_Z;
__gshared glbfn_glVertexAttribI2ivEXT glVertexAttribI2ivEXT_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI2ivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI2ivEXT_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI2ivEXT_Z = glbindGetProcAddress(`glVertexAttribI2ivEXT`);
  if (*cast(void**)&glVertexAttribI2ivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI2ivEXT' not found!`);
  glVertexAttribI2ivEXT_Z(a00,a01,);
}
alias glVertexAttribI3ivEXT = glVertexAttribI3ivEXT_Z;
__gshared glbfn_glVertexAttribI3ivEXT glVertexAttribI3ivEXT_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI3ivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI3ivEXT_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI3ivEXT_Z = glbindGetProcAddress(`glVertexAttribI3ivEXT`);
  if (*cast(void**)&glVertexAttribI3ivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI3ivEXT' not found!`);
  glVertexAttribI3ivEXT_Z(a00,a01,);
}
alias glVertexAttribI4ivEXT = glVertexAttribI4ivEXT_Z;
__gshared glbfn_glVertexAttribI4ivEXT glVertexAttribI4ivEXT_Z = function void (uint a00,const(int)* a01) {
  glbfn_glVertexAttribI4ivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4ivEXT_loader (uint a00,const(int)* a01) {
  *cast(void**)&glVertexAttribI4ivEXT_Z = glbindGetProcAddress(`glVertexAttribI4ivEXT`);
  if (*cast(void**)&glVertexAttribI4ivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ivEXT' not found!`);
  glVertexAttribI4ivEXT_Z(a00,a01,);
}
alias glVertexAttribI1uivEXT = glVertexAttribI1uivEXT_Z;
__gshared glbfn_glVertexAttribI1uivEXT glVertexAttribI1uivEXT_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI1uivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI1uivEXT_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI1uivEXT_Z = glbindGetProcAddress(`glVertexAttribI1uivEXT`);
  if (*cast(void**)&glVertexAttribI1uivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI1uivEXT' not found!`);
  glVertexAttribI1uivEXT_Z(a00,a01,);
}
alias glVertexAttribI2uivEXT = glVertexAttribI2uivEXT_Z;
__gshared glbfn_glVertexAttribI2uivEXT glVertexAttribI2uivEXT_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI2uivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI2uivEXT_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI2uivEXT_Z = glbindGetProcAddress(`glVertexAttribI2uivEXT`);
  if (*cast(void**)&glVertexAttribI2uivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI2uivEXT' not found!`);
  glVertexAttribI2uivEXT_Z(a00,a01,);
}
alias glVertexAttribI3uivEXT = glVertexAttribI3uivEXT_Z;
__gshared glbfn_glVertexAttribI3uivEXT glVertexAttribI3uivEXT_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI3uivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI3uivEXT_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI3uivEXT_Z = glbindGetProcAddress(`glVertexAttribI3uivEXT`);
  if (*cast(void**)&glVertexAttribI3uivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI3uivEXT' not found!`);
  glVertexAttribI3uivEXT_Z(a00,a01,);
}
alias glVertexAttribI4uivEXT = glVertexAttribI4uivEXT_Z;
__gshared glbfn_glVertexAttribI4uivEXT glVertexAttribI4uivEXT_Z = function void (uint a00,const(uint)* a01) {
  glbfn_glVertexAttribI4uivEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4uivEXT_loader (uint a00,const(uint)* a01) {
  *cast(void**)&glVertexAttribI4uivEXT_Z = glbindGetProcAddress(`glVertexAttribI4uivEXT`);
  if (*cast(void**)&glVertexAttribI4uivEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4uivEXT' not found!`);
  glVertexAttribI4uivEXT_Z(a00,a01,);
}
alias glVertexAttribI4bvEXT = glVertexAttribI4bvEXT_Z;
__gshared glbfn_glVertexAttribI4bvEXT glVertexAttribI4bvEXT_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glVertexAttribI4bvEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4bvEXT_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glVertexAttribI4bvEXT_Z = glbindGetProcAddress(`glVertexAttribI4bvEXT`);
  if (*cast(void**)&glVertexAttribI4bvEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4bvEXT' not found!`);
  glVertexAttribI4bvEXT_Z(a00,a01,);
}
alias glVertexAttribI4svEXT = glVertexAttribI4svEXT_Z;
__gshared glbfn_glVertexAttribI4svEXT glVertexAttribI4svEXT_Z = function void (uint a00,const(short)* a01) {
  glbfn_glVertexAttribI4svEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4svEXT_loader (uint a00,const(short)* a01) {
  *cast(void**)&glVertexAttribI4svEXT_Z = glbindGetProcAddress(`glVertexAttribI4svEXT`);
  if (*cast(void**)&glVertexAttribI4svEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4svEXT' not found!`);
  glVertexAttribI4svEXT_Z(a00,a01,);
}
alias glVertexAttribI4ubvEXT = glVertexAttribI4ubvEXT_Z;
__gshared glbfn_glVertexAttribI4ubvEXT glVertexAttribI4ubvEXT_Z = function void (uint a00,const(ubyte)* a01) {
  glbfn_glVertexAttribI4ubvEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4ubvEXT_loader (uint a00,const(ubyte)* a01) {
  *cast(void**)&glVertexAttribI4ubvEXT_Z = glbindGetProcAddress(`glVertexAttribI4ubvEXT`);
  if (*cast(void**)&glVertexAttribI4ubvEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ubvEXT' not found!`);
  glVertexAttribI4ubvEXT_Z(a00,a01,);
}
alias glVertexAttribI4usvEXT = glVertexAttribI4usvEXT_Z;
__gshared glbfn_glVertexAttribI4usvEXT glVertexAttribI4usvEXT_Z = function void (uint a00,const(ushort)* a01) {
  glbfn_glVertexAttribI4usvEXT_loader(a00,a01,);
};
private void glbfn_glVertexAttribI4usvEXT_loader (uint a00,const(ushort)* a01) {
  *cast(void**)&glVertexAttribI4usvEXT_Z = glbindGetProcAddress(`glVertexAttribI4usvEXT`);
  if (*cast(void**)&glVertexAttribI4usvEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribI4usvEXT' not found!`);
  glVertexAttribI4usvEXT_Z(a00,a01,);
}
alias glVertexAttribIPointerEXT = glVertexAttribIPointerEXT_Z;
__gshared glbfn_glVertexAttribIPointerEXT glVertexAttribIPointerEXT_Z = function void (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  glbfn_glVertexAttribIPointerEXT_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glVertexAttribIPointerEXT_loader (uint a00,int a01,uint a02,int a03,const(void)* a04) {
  *cast(void**)&glVertexAttribIPointerEXT_Z = glbindGetProcAddress(`glVertexAttribIPointerEXT`);
  if (*cast(void**)&glVertexAttribIPointerEXT_Z is null) assert(0, `OpenGL function 'glVertexAttribIPointerEXT' not found!`);
  glVertexAttribIPointerEXT_Z(a00,a01,a02,a03,a04,);
}
alias glGetVertexAttribIivEXT = glGetVertexAttribIivEXT_Z;
__gshared glbfn_glGetVertexAttribIivEXT glGetVertexAttribIivEXT_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVertexAttribIivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribIivEXT_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVertexAttribIivEXT_Z = glbindGetProcAddress(`glGetVertexAttribIivEXT`);
  if (*cast(void**)&glGetVertexAttribIivEXT_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIivEXT' not found!`);
  glGetVertexAttribIivEXT_Z(a00,a01,a02,);
}
alias glGetVertexAttribIuivEXT = glGetVertexAttribIuivEXT_Z;
__gshared glbfn_glGetVertexAttribIuivEXT glGetVertexAttribIuivEXT_Z = function void (uint a00,uint a01,uint* a02) {
  glbfn_glGetVertexAttribIuivEXT_loader(a00,a01,a02,);
};
private void glbfn_glGetVertexAttribIuivEXT_loader (uint a00,uint a01,uint* a02) {
  *cast(void**)&glGetVertexAttribIuivEXT_Z = glbindGetProcAddress(`glGetVertexAttribIuivEXT`);
  if (*cast(void**)&glGetVertexAttribIuivEXT_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIuivEXT' not found!`);
  glGetVertexAttribIuivEXT_Z(a00,a01,a02,);
}
alias glBeginVideoCaptureNV = glBeginVideoCaptureNV_Z;
__gshared glbfn_glBeginVideoCaptureNV glBeginVideoCaptureNV_Z = function void (uint a00) {
  glbfn_glBeginVideoCaptureNV_loader(a00,);
};
private void glbfn_glBeginVideoCaptureNV_loader (uint a00) {
  *cast(void**)&glBeginVideoCaptureNV_Z = glbindGetProcAddress(`glBeginVideoCaptureNV`);
  if (*cast(void**)&glBeginVideoCaptureNV_Z is null) assert(0, `OpenGL function 'glBeginVideoCaptureNV' not found!`);
  glBeginVideoCaptureNV_Z(a00,);
}
alias glBindVideoCaptureStreamBufferNV = glBindVideoCaptureStreamBufferNV_Z;
__gshared glbfn_glBindVideoCaptureStreamBufferNV glBindVideoCaptureStreamBufferNV_Z = function void (uint a00,uint a01,uint a02,int a03) {
  glbfn_glBindVideoCaptureStreamBufferNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glBindVideoCaptureStreamBufferNV_loader (uint a00,uint a01,uint a02,int a03) {
  *cast(void**)&glBindVideoCaptureStreamBufferNV_Z = glbindGetProcAddress(`glBindVideoCaptureStreamBufferNV`);
  if (*cast(void**)&glBindVideoCaptureStreamBufferNV_Z is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamBufferNV' not found!`);
  glBindVideoCaptureStreamBufferNV_Z(a00,a01,a02,a03,);
}
alias glBindVideoCaptureStreamTextureNV = glBindVideoCaptureStreamTextureNV_Z;
__gshared glbfn_glBindVideoCaptureStreamTextureNV glBindVideoCaptureStreamTextureNV_Z = function void (uint a00,uint a01,uint a02,uint a03,uint a04) {
  glbfn_glBindVideoCaptureStreamTextureNV_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glBindVideoCaptureStreamTextureNV_loader (uint a00,uint a01,uint a02,uint a03,uint a04) {
  *cast(void**)&glBindVideoCaptureStreamTextureNV_Z = glbindGetProcAddress(`glBindVideoCaptureStreamTextureNV`);
  if (*cast(void**)&glBindVideoCaptureStreamTextureNV_Z is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamTextureNV' not found!`);
  glBindVideoCaptureStreamTextureNV_Z(a00,a01,a02,a03,a04,);
}
alias glEndVideoCaptureNV = glEndVideoCaptureNV_Z;
__gshared glbfn_glEndVideoCaptureNV glEndVideoCaptureNV_Z = function void (uint a00) {
  glbfn_glEndVideoCaptureNV_loader(a00,);
};
private void glbfn_glEndVideoCaptureNV_loader (uint a00) {
  *cast(void**)&glEndVideoCaptureNV_Z = glbindGetProcAddress(`glEndVideoCaptureNV`);
  if (*cast(void**)&glEndVideoCaptureNV_Z is null) assert(0, `OpenGL function 'glEndVideoCaptureNV' not found!`);
  glEndVideoCaptureNV_Z(a00,);
}
alias glGetVideoCaptureivNV = glGetVideoCaptureivNV_Z;
__gshared glbfn_glGetVideoCaptureivNV glGetVideoCaptureivNV_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetVideoCaptureivNV_loader(a00,a01,a02,);
};
private void glbfn_glGetVideoCaptureivNV_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetVideoCaptureivNV_Z = glbindGetProcAddress(`glGetVideoCaptureivNV`);
  if (*cast(void**)&glGetVideoCaptureivNV_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureivNV' not found!`);
  glGetVideoCaptureivNV_Z(a00,a01,a02,);
}
alias glGetVideoCaptureStreamivNV = glGetVideoCaptureStreamivNV_Z;
__gshared glbfn_glGetVideoCaptureStreamivNV glGetVideoCaptureStreamivNV_Z = function void (uint a00,uint a01,uint a02,int* a03) {
  glbfn_glGetVideoCaptureStreamivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetVideoCaptureStreamivNV_loader (uint a00,uint a01,uint a02,int* a03) {
  *cast(void**)&glGetVideoCaptureStreamivNV_Z = glbindGetProcAddress(`glGetVideoCaptureStreamivNV`);
  if (*cast(void**)&glGetVideoCaptureStreamivNV_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamivNV' not found!`);
  glGetVideoCaptureStreamivNV_Z(a00,a01,a02,a03,);
}
alias glGetVideoCaptureStreamfvNV = glGetVideoCaptureStreamfvNV_Z;
__gshared glbfn_glGetVideoCaptureStreamfvNV glGetVideoCaptureStreamfvNV_Z = function void (uint a00,uint a01,uint a02,float* a03) {
  glbfn_glGetVideoCaptureStreamfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetVideoCaptureStreamfvNV_loader (uint a00,uint a01,uint a02,float* a03) {
  *cast(void**)&glGetVideoCaptureStreamfvNV_Z = glbindGetProcAddress(`glGetVideoCaptureStreamfvNV`);
  if (*cast(void**)&glGetVideoCaptureStreamfvNV_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamfvNV' not found!`);
  glGetVideoCaptureStreamfvNV_Z(a00,a01,a02,a03,);
}
alias glGetVideoCaptureStreamdvNV = glGetVideoCaptureStreamdvNV_Z;
__gshared glbfn_glGetVideoCaptureStreamdvNV glGetVideoCaptureStreamdvNV_Z = function void (uint a00,uint a01,uint a02,double* a03) {
  glbfn_glGetVideoCaptureStreamdvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetVideoCaptureStreamdvNV_loader (uint a00,uint a01,uint a02,double* a03) {
  *cast(void**)&glGetVideoCaptureStreamdvNV_Z = glbindGetProcAddress(`glGetVideoCaptureStreamdvNV`);
  if (*cast(void**)&glGetVideoCaptureStreamdvNV_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamdvNV' not found!`);
  glGetVideoCaptureStreamdvNV_Z(a00,a01,a02,a03,);
}
alias glVideoCaptureNV = glVideoCaptureNV_Z;
__gshared glbfn_glVideoCaptureNV glVideoCaptureNV_Z = function uint (uint a00,uint* a01,ulong* a02) {
  return glbfn_glVideoCaptureNV_loader(a00,a01,a02,);
};
private uint glbfn_glVideoCaptureNV_loader (uint a00,uint* a01,ulong* a02) {
  *cast(void**)&glVideoCaptureNV_Z = glbindGetProcAddress(`glVideoCaptureNV`);
  if (*cast(void**)&glVideoCaptureNV_Z is null) assert(0, `OpenGL function 'glVideoCaptureNV' not found!`);
  return glVideoCaptureNV_Z(a00,a01,a02,);
}
alias glVideoCaptureStreamParameterivNV = glVideoCaptureStreamParameterivNV_Z;
__gshared glbfn_glVideoCaptureStreamParameterivNV glVideoCaptureStreamParameterivNV_Z = function void (uint a00,uint a01,uint a02,const(int)* a03) {
  glbfn_glVideoCaptureStreamParameterivNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVideoCaptureStreamParameterivNV_loader (uint a00,uint a01,uint a02,const(int)* a03) {
  *cast(void**)&glVideoCaptureStreamParameterivNV_Z = glbindGetProcAddress(`glVideoCaptureStreamParameterivNV`);
  if (*cast(void**)&glVideoCaptureStreamParameterivNV_Z is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterivNV' not found!`);
  glVideoCaptureStreamParameterivNV_Z(a00,a01,a02,a03,);
}
alias glVideoCaptureStreamParameterfvNV = glVideoCaptureStreamParameterfvNV_Z;
__gshared glbfn_glVideoCaptureStreamParameterfvNV glVideoCaptureStreamParameterfvNV_Z = function void (uint a00,uint a01,uint a02,const(float)* a03) {
  glbfn_glVideoCaptureStreamParameterfvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVideoCaptureStreamParameterfvNV_loader (uint a00,uint a01,uint a02,const(float)* a03) {
  *cast(void**)&glVideoCaptureStreamParameterfvNV_Z = glbindGetProcAddress(`glVideoCaptureStreamParameterfvNV`);
  if (*cast(void**)&glVideoCaptureStreamParameterfvNV_Z is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterfvNV' not found!`);
  glVideoCaptureStreamParameterfvNV_Z(a00,a01,a02,a03,);
}
alias glVideoCaptureStreamParameterdvNV = glVideoCaptureStreamParameterdvNV_Z;
__gshared glbfn_glVideoCaptureStreamParameterdvNV glVideoCaptureStreamParameterdvNV_Z = function void (uint a00,uint a01,uint a02,const(double)* a03) {
  glbfn_glVideoCaptureStreamParameterdvNV_loader(a00,a01,a02,a03,);
};
private void glbfn_glVideoCaptureStreamParameterdvNV_loader (uint a00,uint a01,uint a02,const(double)* a03) {
  *cast(void**)&glVideoCaptureStreamParameterdvNV_Z = glbindGetProcAddress(`glVideoCaptureStreamParameterdvNV`);
  if (*cast(void**)&glVideoCaptureStreamParameterdvNV_Z is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterdvNV' not found!`);
  glVideoCaptureStreamParameterdvNV_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord1bOES = glMultiTexCoord1bOES_Z;
__gshared glbfn_glMultiTexCoord1bOES glMultiTexCoord1bOES_Z = function void (uint a00,byte a01) {
  glbfn_glMultiTexCoord1bOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1bOES_loader (uint a00,byte a01) {
  *cast(void**)&glMultiTexCoord1bOES_Z = glbindGetProcAddress(`glMultiTexCoord1bOES`);
  if (*cast(void**)&glMultiTexCoord1bOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1bOES' not found!`);
  glMultiTexCoord1bOES_Z(a00,a01,);
}
alias glMultiTexCoord1bvOES = glMultiTexCoord1bvOES_Z;
__gshared glbfn_glMultiTexCoord1bvOES glMultiTexCoord1bvOES_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glMultiTexCoord1bvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1bvOES_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glMultiTexCoord1bvOES_Z = glbindGetProcAddress(`glMultiTexCoord1bvOES`);
  if (*cast(void**)&glMultiTexCoord1bvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1bvOES' not found!`);
  glMultiTexCoord1bvOES_Z(a00,a01,);
}
alias glMultiTexCoord2bOES = glMultiTexCoord2bOES_Z;
__gshared glbfn_glMultiTexCoord2bOES glMultiTexCoord2bOES_Z = function void (uint a00,byte a01,byte a02) {
  glbfn_glMultiTexCoord2bOES_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2bOES_loader (uint a00,byte a01,byte a02) {
  *cast(void**)&glMultiTexCoord2bOES_Z = glbindGetProcAddress(`glMultiTexCoord2bOES`);
  if (*cast(void**)&glMultiTexCoord2bOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2bOES' not found!`);
  glMultiTexCoord2bOES_Z(a00,a01,a02,);
}
alias glMultiTexCoord2bvOES = glMultiTexCoord2bvOES_Z;
__gshared glbfn_glMultiTexCoord2bvOES glMultiTexCoord2bvOES_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glMultiTexCoord2bvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2bvOES_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glMultiTexCoord2bvOES_Z = glbindGetProcAddress(`glMultiTexCoord2bvOES`);
  if (*cast(void**)&glMultiTexCoord2bvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2bvOES' not found!`);
  glMultiTexCoord2bvOES_Z(a00,a01,);
}
alias glMultiTexCoord3bOES = glMultiTexCoord3bOES_Z;
__gshared glbfn_glMultiTexCoord3bOES glMultiTexCoord3bOES_Z = function void (uint a00,byte a01,byte a02,byte a03) {
  glbfn_glMultiTexCoord3bOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3bOES_loader (uint a00,byte a01,byte a02,byte a03) {
  *cast(void**)&glMultiTexCoord3bOES_Z = glbindGetProcAddress(`glMultiTexCoord3bOES`);
  if (*cast(void**)&glMultiTexCoord3bOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3bOES' not found!`);
  glMultiTexCoord3bOES_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3bvOES = glMultiTexCoord3bvOES_Z;
__gshared glbfn_glMultiTexCoord3bvOES glMultiTexCoord3bvOES_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glMultiTexCoord3bvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3bvOES_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glMultiTexCoord3bvOES_Z = glbindGetProcAddress(`glMultiTexCoord3bvOES`);
  if (*cast(void**)&glMultiTexCoord3bvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3bvOES' not found!`);
  glMultiTexCoord3bvOES_Z(a00,a01,);
}
alias glMultiTexCoord4bOES = glMultiTexCoord4bOES_Z;
__gshared glbfn_glMultiTexCoord4bOES glMultiTexCoord4bOES_Z = function void (uint a00,byte a01,byte a02,byte a03,byte a04) {
  glbfn_glMultiTexCoord4bOES_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4bOES_loader (uint a00,byte a01,byte a02,byte a03,byte a04) {
  *cast(void**)&glMultiTexCoord4bOES_Z = glbindGetProcAddress(`glMultiTexCoord4bOES`);
  if (*cast(void**)&glMultiTexCoord4bOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4bOES' not found!`);
  glMultiTexCoord4bOES_Z(a00,a01,a02,a03,a04,);
}
alias glMultiTexCoord4bvOES = glMultiTexCoord4bvOES_Z;
__gshared glbfn_glMultiTexCoord4bvOES glMultiTexCoord4bvOES_Z = function void (uint a00,const(byte)* a01) {
  glbfn_glMultiTexCoord4bvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4bvOES_loader (uint a00,const(byte)* a01) {
  *cast(void**)&glMultiTexCoord4bvOES_Z = glbindGetProcAddress(`glMultiTexCoord4bvOES`);
  if (*cast(void**)&glMultiTexCoord4bvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4bvOES' not found!`);
  glMultiTexCoord4bvOES_Z(a00,a01,);
}
alias glTexCoord1bOES = glTexCoord1bOES_Z;
__gshared glbfn_glTexCoord1bOES glTexCoord1bOES_Z = function void (byte a00) {
  glbfn_glTexCoord1bOES_loader(a00,);
};
private void glbfn_glTexCoord1bOES_loader (byte a00) {
  *cast(void**)&glTexCoord1bOES_Z = glbindGetProcAddress(`glTexCoord1bOES`);
  if (*cast(void**)&glTexCoord1bOES_Z is null) assert(0, `OpenGL function 'glTexCoord1bOES' not found!`);
  glTexCoord1bOES_Z(a00,);
}
alias glTexCoord1bvOES = glTexCoord1bvOES_Z;
__gshared glbfn_glTexCoord1bvOES glTexCoord1bvOES_Z = function void (const(byte)* a00) {
  glbfn_glTexCoord1bvOES_loader(a00,);
};
private void glbfn_glTexCoord1bvOES_loader (const(byte)* a00) {
  *cast(void**)&glTexCoord1bvOES_Z = glbindGetProcAddress(`glTexCoord1bvOES`);
  if (*cast(void**)&glTexCoord1bvOES_Z is null) assert(0, `OpenGL function 'glTexCoord1bvOES' not found!`);
  glTexCoord1bvOES_Z(a00,);
}
alias glTexCoord2bOES = glTexCoord2bOES_Z;
__gshared glbfn_glTexCoord2bOES glTexCoord2bOES_Z = function void (byte a00,byte a01) {
  glbfn_glTexCoord2bOES_loader(a00,a01,);
};
private void glbfn_glTexCoord2bOES_loader (byte a00,byte a01) {
  *cast(void**)&glTexCoord2bOES_Z = glbindGetProcAddress(`glTexCoord2bOES`);
  if (*cast(void**)&glTexCoord2bOES_Z is null) assert(0, `OpenGL function 'glTexCoord2bOES' not found!`);
  glTexCoord2bOES_Z(a00,a01,);
}
alias glTexCoord2bvOES = glTexCoord2bvOES_Z;
__gshared glbfn_glTexCoord2bvOES glTexCoord2bvOES_Z = function void (const(byte)* a00) {
  glbfn_glTexCoord2bvOES_loader(a00,);
};
private void glbfn_glTexCoord2bvOES_loader (const(byte)* a00) {
  *cast(void**)&glTexCoord2bvOES_Z = glbindGetProcAddress(`glTexCoord2bvOES`);
  if (*cast(void**)&glTexCoord2bvOES_Z is null) assert(0, `OpenGL function 'glTexCoord2bvOES' not found!`);
  glTexCoord2bvOES_Z(a00,);
}
alias glTexCoord3bOES = glTexCoord3bOES_Z;
__gshared glbfn_glTexCoord3bOES glTexCoord3bOES_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glTexCoord3bOES_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord3bOES_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glTexCoord3bOES_Z = glbindGetProcAddress(`glTexCoord3bOES`);
  if (*cast(void**)&glTexCoord3bOES_Z is null) assert(0, `OpenGL function 'glTexCoord3bOES' not found!`);
  glTexCoord3bOES_Z(a00,a01,a02,);
}
alias glTexCoord3bvOES = glTexCoord3bvOES_Z;
__gshared glbfn_glTexCoord3bvOES glTexCoord3bvOES_Z = function void (const(byte)* a00) {
  glbfn_glTexCoord3bvOES_loader(a00,);
};
private void glbfn_glTexCoord3bvOES_loader (const(byte)* a00) {
  *cast(void**)&glTexCoord3bvOES_Z = glbindGetProcAddress(`glTexCoord3bvOES`);
  if (*cast(void**)&glTexCoord3bvOES_Z is null) assert(0, `OpenGL function 'glTexCoord3bvOES' not found!`);
  glTexCoord3bvOES_Z(a00,);
}
alias glTexCoord4bOES = glTexCoord4bOES_Z;
__gshared glbfn_glTexCoord4bOES glTexCoord4bOES_Z = function void (byte a00,byte a01,byte a02,byte a03) {
  glbfn_glTexCoord4bOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4bOES_loader (byte a00,byte a01,byte a02,byte a03) {
  *cast(void**)&glTexCoord4bOES_Z = glbindGetProcAddress(`glTexCoord4bOES`);
  if (*cast(void**)&glTexCoord4bOES_Z is null) assert(0, `OpenGL function 'glTexCoord4bOES' not found!`);
  glTexCoord4bOES_Z(a00,a01,a02,a03,);
}
alias glTexCoord4bvOES = glTexCoord4bvOES_Z;
__gshared glbfn_glTexCoord4bvOES glTexCoord4bvOES_Z = function void (const(byte)* a00) {
  glbfn_glTexCoord4bvOES_loader(a00,);
};
private void glbfn_glTexCoord4bvOES_loader (const(byte)* a00) {
  *cast(void**)&glTexCoord4bvOES_Z = glbindGetProcAddress(`glTexCoord4bvOES`);
  if (*cast(void**)&glTexCoord4bvOES_Z is null) assert(0, `OpenGL function 'glTexCoord4bvOES' not found!`);
  glTexCoord4bvOES_Z(a00,);
}
alias glVertex2bOES = glVertex2bOES_Z;
__gshared glbfn_glVertex2bOES glVertex2bOES_Z = function void (byte a00,byte a01) {
  glbfn_glVertex2bOES_loader(a00,a01,);
};
private void glbfn_glVertex2bOES_loader (byte a00,byte a01) {
  *cast(void**)&glVertex2bOES_Z = glbindGetProcAddress(`glVertex2bOES`);
  if (*cast(void**)&glVertex2bOES_Z is null) assert(0, `OpenGL function 'glVertex2bOES' not found!`);
  glVertex2bOES_Z(a00,a01,);
}
alias glVertex2bvOES = glVertex2bvOES_Z;
__gshared glbfn_glVertex2bvOES glVertex2bvOES_Z = function void (const(byte)* a00) {
  glbfn_glVertex2bvOES_loader(a00,);
};
private void glbfn_glVertex2bvOES_loader (const(byte)* a00) {
  *cast(void**)&glVertex2bvOES_Z = glbindGetProcAddress(`glVertex2bvOES`);
  if (*cast(void**)&glVertex2bvOES_Z is null) assert(0, `OpenGL function 'glVertex2bvOES' not found!`);
  glVertex2bvOES_Z(a00,);
}
alias glVertex3bOES = glVertex3bOES_Z;
__gshared glbfn_glVertex3bOES glVertex3bOES_Z = function void (byte a00,byte a01,byte a02) {
  glbfn_glVertex3bOES_loader(a00,a01,a02,);
};
private void glbfn_glVertex3bOES_loader (byte a00,byte a01,byte a02) {
  *cast(void**)&glVertex3bOES_Z = glbindGetProcAddress(`glVertex3bOES`);
  if (*cast(void**)&glVertex3bOES_Z is null) assert(0, `OpenGL function 'glVertex3bOES' not found!`);
  glVertex3bOES_Z(a00,a01,a02,);
}
alias glVertex3bvOES = glVertex3bvOES_Z;
__gshared glbfn_glVertex3bvOES glVertex3bvOES_Z = function void (const(byte)* a00) {
  glbfn_glVertex3bvOES_loader(a00,);
};
private void glbfn_glVertex3bvOES_loader (const(byte)* a00) {
  *cast(void**)&glVertex3bvOES_Z = glbindGetProcAddress(`glVertex3bvOES`);
  if (*cast(void**)&glVertex3bvOES_Z is null) assert(0, `OpenGL function 'glVertex3bvOES' not found!`);
  glVertex3bvOES_Z(a00,);
}
alias glVertex4bOES = glVertex4bOES_Z;
__gshared glbfn_glVertex4bOES glVertex4bOES_Z = function void (byte a00,byte a01,byte a02,byte a03) {
  glbfn_glVertex4bOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glVertex4bOES_loader (byte a00,byte a01,byte a02,byte a03) {
  *cast(void**)&glVertex4bOES_Z = glbindGetProcAddress(`glVertex4bOES`);
  if (*cast(void**)&glVertex4bOES_Z is null) assert(0, `OpenGL function 'glVertex4bOES' not found!`);
  glVertex4bOES_Z(a00,a01,a02,a03,);
}
alias glVertex4bvOES = glVertex4bvOES_Z;
__gshared glbfn_glVertex4bvOES glVertex4bvOES_Z = function void (const(byte)* a00) {
  glbfn_glVertex4bvOES_loader(a00,);
};
private void glbfn_glVertex4bvOES_loader (const(byte)* a00) {
  *cast(void**)&glVertex4bvOES_Z = glbindGetProcAddress(`glVertex4bvOES`);
  if (*cast(void**)&glVertex4bvOES_Z is null) assert(0, `OpenGL function 'glVertex4bvOES' not found!`);
  glVertex4bvOES_Z(a00,);
}
alias glAlphaFuncxOES = glAlphaFuncxOES_Z;
__gshared glbfn_glAlphaFuncxOES glAlphaFuncxOES_Z = function void (uint a00,int a01) {
  glbfn_glAlphaFuncxOES_loader(a00,a01,);
};
private void glbfn_glAlphaFuncxOES_loader (uint a00,int a01) {
  *cast(void**)&glAlphaFuncxOES_Z = glbindGetProcAddress(`glAlphaFuncxOES`);
  if (*cast(void**)&glAlphaFuncxOES_Z is null) assert(0, `OpenGL function 'glAlphaFuncxOES' not found!`);
  glAlphaFuncxOES_Z(a00,a01,);
}
alias glClearColorxOES = glClearColorxOES_Z;
__gshared glbfn_glClearColorxOES glClearColorxOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glClearColorxOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearColorxOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glClearColorxOES_Z = glbindGetProcAddress(`glClearColorxOES`);
  if (*cast(void**)&glClearColorxOES_Z is null) assert(0, `OpenGL function 'glClearColorxOES' not found!`);
  glClearColorxOES_Z(a00,a01,a02,a03,);
}
alias glClearDepthxOES = glClearDepthxOES_Z;
__gshared glbfn_glClearDepthxOES glClearDepthxOES_Z = function void (int a00) {
  glbfn_glClearDepthxOES_loader(a00,);
};
private void glbfn_glClearDepthxOES_loader (int a00) {
  *cast(void**)&glClearDepthxOES_Z = glbindGetProcAddress(`glClearDepthxOES`);
  if (*cast(void**)&glClearDepthxOES_Z is null) assert(0, `OpenGL function 'glClearDepthxOES' not found!`);
  glClearDepthxOES_Z(a00,);
}
alias glClipPlanexOES = glClipPlanexOES_Z;
__gshared glbfn_glClipPlanexOES glClipPlanexOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glClipPlanexOES_loader(a00,a01,);
};
private void glbfn_glClipPlanexOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glClipPlanexOES_Z = glbindGetProcAddress(`glClipPlanexOES`);
  if (*cast(void**)&glClipPlanexOES_Z is null) assert(0, `OpenGL function 'glClipPlanexOES' not found!`);
  glClipPlanexOES_Z(a00,a01,);
}
alias glColor4xOES = glColor4xOES_Z;
__gshared glbfn_glColor4xOES glColor4xOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glColor4xOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glColor4xOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glColor4xOES_Z = glbindGetProcAddress(`glColor4xOES`);
  if (*cast(void**)&glColor4xOES_Z is null) assert(0, `OpenGL function 'glColor4xOES' not found!`);
  glColor4xOES_Z(a00,a01,a02,a03,);
}
alias glDepthRangexOES = glDepthRangexOES_Z;
__gshared glbfn_glDepthRangexOES glDepthRangexOES_Z = function void (int a00,int a01) {
  glbfn_glDepthRangexOES_loader(a00,a01,);
};
private void glbfn_glDepthRangexOES_loader (int a00,int a01) {
  *cast(void**)&glDepthRangexOES_Z = glbindGetProcAddress(`glDepthRangexOES`);
  if (*cast(void**)&glDepthRangexOES_Z is null) assert(0, `OpenGL function 'glDepthRangexOES' not found!`);
  glDepthRangexOES_Z(a00,a01,);
}
alias glFogxOES = glFogxOES_Z;
__gshared glbfn_glFogxOES glFogxOES_Z = function void (uint a00,int a01) {
  glbfn_glFogxOES_loader(a00,a01,);
};
private void glbfn_glFogxOES_loader (uint a00,int a01) {
  *cast(void**)&glFogxOES_Z = glbindGetProcAddress(`glFogxOES`);
  if (*cast(void**)&glFogxOES_Z is null) assert(0, `OpenGL function 'glFogxOES' not found!`);
  glFogxOES_Z(a00,a01,);
}
alias glFogxvOES = glFogxvOES_Z;
__gshared glbfn_glFogxvOES glFogxvOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glFogxvOES_loader(a00,a01,);
};
private void glbfn_glFogxvOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glFogxvOES_Z = glbindGetProcAddress(`glFogxvOES`);
  if (*cast(void**)&glFogxvOES_Z is null) assert(0, `OpenGL function 'glFogxvOES' not found!`);
  glFogxvOES_Z(a00,a01,);
}
alias glFrustumxOES = glFrustumxOES_Z;
__gshared glbfn_glFrustumxOES glFrustumxOES_Z = function void (int a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glFrustumxOES_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glFrustumxOES_loader (int a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glFrustumxOES_Z = glbindGetProcAddress(`glFrustumxOES`);
  if (*cast(void**)&glFrustumxOES_Z is null) assert(0, `OpenGL function 'glFrustumxOES' not found!`);
  glFrustumxOES_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetClipPlanexOES = glGetClipPlanexOES_Z;
__gshared glbfn_glGetClipPlanexOES glGetClipPlanexOES_Z = function void (uint a00,int* a01) {
  glbfn_glGetClipPlanexOES_loader(a00,a01,);
};
private void glbfn_glGetClipPlanexOES_loader (uint a00,int* a01) {
  *cast(void**)&glGetClipPlanexOES_Z = glbindGetProcAddress(`glGetClipPlanexOES`);
  if (*cast(void**)&glGetClipPlanexOES_Z is null) assert(0, `OpenGL function 'glGetClipPlanexOES' not found!`);
  glGetClipPlanexOES_Z(a00,a01,);
}
alias glGetFixedvOES = glGetFixedvOES_Z;
__gshared glbfn_glGetFixedvOES glGetFixedvOES_Z = function void (uint a00,int* a01) {
  glbfn_glGetFixedvOES_loader(a00,a01,);
};
private void glbfn_glGetFixedvOES_loader (uint a00,int* a01) {
  *cast(void**)&glGetFixedvOES_Z = glbindGetProcAddress(`glGetFixedvOES`);
  if (*cast(void**)&glGetFixedvOES_Z is null) assert(0, `OpenGL function 'glGetFixedvOES' not found!`);
  glGetFixedvOES_Z(a00,a01,);
}
alias glGetTexEnvxvOES = glGetTexEnvxvOES_Z;
__gshared glbfn_glGetTexEnvxvOES glGetTexEnvxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexEnvxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetTexEnvxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexEnvxvOES_Z = glbindGetProcAddress(`glGetTexEnvxvOES`);
  if (*cast(void**)&glGetTexEnvxvOES_Z is null) assert(0, `OpenGL function 'glGetTexEnvxvOES' not found!`);
  glGetTexEnvxvOES_Z(a00,a01,a02,);
}
alias glGetTexParameterxvOES = glGetTexParameterxvOES_Z;
__gshared glbfn_glGetTexParameterxvOES glGetTexParameterxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexParameterxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetTexParameterxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexParameterxvOES_Z = glbindGetProcAddress(`glGetTexParameterxvOES`);
  if (*cast(void**)&glGetTexParameterxvOES_Z is null) assert(0, `OpenGL function 'glGetTexParameterxvOES' not found!`);
  glGetTexParameterxvOES_Z(a00,a01,a02,);
}
alias glLightModelxOES = glLightModelxOES_Z;
__gshared glbfn_glLightModelxOES glLightModelxOES_Z = function void (uint a00,int a01) {
  glbfn_glLightModelxOES_loader(a00,a01,);
};
private void glbfn_glLightModelxOES_loader (uint a00,int a01) {
  *cast(void**)&glLightModelxOES_Z = glbindGetProcAddress(`glLightModelxOES`);
  if (*cast(void**)&glLightModelxOES_Z is null) assert(0, `OpenGL function 'glLightModelxOES' not found!`);
  glLightModelxOES_Z(a00,a01,);
}
alias glLightModelxvOES = glLightModelxvOES_Z;
__gshared glbfn_glLightModelxvOES glLightModelxvOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glLightModelxvOES_loader(a00,a01,);
};
private void glbfn_glLightModelxvOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glLightModelxvOES_Z = glbindGetProcAddress(`glLightModelxvOES`);
  if (*cast(void**)&glLightModelxvOES_Z is null) assert(0, `OpenGL function 'glLightModelxvOES' not found!`);
  glLightModelxvOES_Z(a00,a01,);
}
alias glLightxOES = glLightxOES_Z;
__gshared glbfn_glLightxOES glLightxOES_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glLightxOES_loader(a00,a01,a02,);
};
private void glbfn_glLightxOES_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glLightxOES_Z = glbindGetProcAddress(`glLightxOES`);
  if (*cast(void**)&glLightxOES_Z is null) assert(0, `OpenGL function 'glLightxOES' not found!`);
  glLightxOES_Z(a00,a01,a02,);
}
alias glLightxvOES = glLightxvOES_Z;
__gshared glbfn_glLightxvOES glLightxvOES_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glLightxvOES_loader(a00,a01,a02,);
};
private void glbfn_glLightxvOES_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glLightxvOES_Z = glbindGetProcAddress(`glLightxvOES`);
  if (*cast(void**)&glLightxvOES_Z is null) assert(0, `OpenGL function 'glLightxvOES' not found!`);
  glLightxvOES_Z(a00,a01,a02,);
}
alias glLineWidthxOES = glLineWidthxOES_Z;
__gshared glbfn_glLineWidthxOES glLineWidthxOES_Z = function void (int a00) {
  glbfn_glLineWidthxOES_loader(a00,);
};
private void glbfn_glLineWidthxOES_loader (int a00) {
  *cast(void**)&glLineWidthxOES_Z = glbindGetProcAddress(`glLineWidthxOES`);
  if (*cast(void**)&glLineWidthxOES_Z is null) assert(0, `OpenGL function 'glLineWidthxOES' not found!`);
  glLineWidthxOES_Z(a00,);
}
alias glLoadMatrixxOES = glLoadMatrixxOES_Z;
__gshared glbfn_glLoadMatrixxOES glLoadMatrixxOES_Z = function void (const(int)* a00) {
  glbfn_glLoadMatrixxOES_loader(a00,);
};
private void glbfn_glLoadMatrixxOES_loader (const(int)* a00) {
  *cast(void**)&glLoadMatrixxOES_Z = glbindGetProcAddress(`glLoadMatrixxOES`);
  if (*cast(void**)&glLoadMatrixxOES_Z is null) assert(0, `OpenGL function 'glLoadMatrixxOES' not found!`);
  glLoadMatrixxOES_Z(a00,);
}
alias glMaterialxOES = glMaterialxOES_Z;
__gshared glbfn_glMaterialxOES glMaterialxOES_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glMaterialxOES_loader(a00,a01,a02,);
};
private void glbfn_glMaterialxOES_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glMaterialxOES_Z = glbindGetProcAddress(`glMaterialxOES`);
  if (*cast(void**)&glMaterialxOES_Z is null) assert(0, `OpenGL function 'glMaterialxOES' not found!`);
  glMaterialxOES_Z(a00,a01,a02,);
}
alias glMaterialxvOES = glMaterialxvOES_Z;
__gshared glbfn_glMaterialxvOES glMaterialxvOES_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glMaterialxvOES_loader(a00,a01,a02,);
};
private void glbfn_glMaterialxvOES_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glMaterialxvOES_Z = glbindGetProcAddress(`glMaterialxvOES`);
  if (*cast(void**)&glMaterialxvOES_Z is null) assert(0, `OpenGL function 'glMaterialxvOES' not found!`);
  glMaterialxvOES_Z(a00,a01,a02,);
}
alias glMultMatrixxOES = glMultMatrixxOES_Z;
__gshared glbfn_glMultMatrixxOES glMultMatrixxOES_Z = function void (const(int)* a00) {
  glbfn_glMultMatrixxOES_loader(a00,);
};
private void glbfn_glMultMatrixxOES_loader (const(int)* a00) {
  *cast(void**)&glMultMatrixxOES_Z = glbindGetProcAddress(`glMultMatrixxOES`);
  if (*cast(void**)&glMultMatrixxOES_Z is null) assert(0, `OpenGL function 'glMultMatrixxOES' not found!`);
  glMultMatrixxOES_Z(a00,);
}
alias glMultiTexCoord4xOES = glMultiTexCoord4xOES_Z;
__gshared glbfn_glMultiTexCoord4xOES glMultiTexCoord4xOES_Z = function void (uint a00,int a01,int a02,int a03,int a04) {
  glbfn_glMultiTexCoord4xOES_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMultiTexCoord4xOES_loader (uint a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glMultiTexCoord4xOES_Z = glbindGetProcAddress(`glMultiTexCoord4xOES`);
  if (*cast(void**)&glMultiTexCoord4xOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4xOES' not found!`);
  glMultiTexCoord4xOES_Z(a00,a01,a02,a03,a04,);
}
alias glNormal3xOES = glNormal3xOES_Z;
__gshared glbfn_glNormal3xOES glNormal3xOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glNormal3xOES_loader(a00,a01,a02,);
};
private void glbfn_glNormal3xOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glNormal3xOES_Z = glbindGetProcAddress(`glNormal3xOES`);
  if (*cast(void**)&glNormal3xOES_Z is null) assert(0, `OpenGL function 'glNormal3xOES' not found!`);
  glNormal3xOES_Z(a00,a01,a02,);
}
alias glOrthoxOES = glOrthoxOES_Z;
__gshared glbfn_glOrthoxOES glOrthoxOES_Z = function void (int a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glOrthoxOES_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glOrthoxOES_loader (int a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glOrthoxOES_Z = glbindGetProcAddress(`glOrthoxOES`);
  if (*cast(void**)&glOrthoxOES_Z is null) assert(0, `OpenGL function 'glOrthoxOES' not found!`);
  glOrthoxOES_Z(a00,a01,a02,a03,a04,a05,);
}
alias glPointParameterxvOES = glPointParameterxvOES_Z;
__gshared glbfn_glPointParameterxvOES glPointParameterxvOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glPointParameterxvOES_loader(a00,a01,);
};
private void glbfn_glPointParameterxvOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glPointParameterxvOES_Z = glbindGetProcAddress(`glPointParameterxvOES`);
  if (*cast(void**)&glPointParameterxvOES_Z is null) assert(0, `OpenGL function 'glPointParameterxvOES' not found!`);
  glPointParameterxvOES_Z(a00,a01,);
}
alias glPointSizexOES = glPointSizexOES_Z;
__gshared glbfn_glPointSizexOES glPointSizexOES_Z = function void (int a00) {
  glbfn_glPointSizexOES_loader(a00,);
};
private void glbfn_glPointSizexOES_loader (int a00) {
  *cast(void**)&glPointSizexOES_Z = glbindGetProcAddress(`glPointSizexOES`);
  if (*cast(void**)&glPointSizexOES_Z is null) assert(0, `OpenGL function 'glPointSizexOES' not found!`);
  glPointSizexOES_Z(a00,);
}
alias glPolygonOffsetxOES = glPolygonOffsetxOES_Z;
__gshared glbfn_glPolygonOffsetxOES glPolygonOffsetxOES_Z = function void (int a00,int a01) {
  glbfn_glPolygonOffsetxOES_loader(a00,a01,);
};
private void glbfn_glPolygonOffsetxOES_loader (int a00,int a01) {
  *cast(void**)&glPolygonOffsetxOES_Z = glbindGetProcAddress(`glPolygonOffsetxOES`);
  if (*cast(void**)&glPolygonOffsetxOES_Z is null) assert(0, `OpenGL function 'glPolygonOffsetxOES' not found!`);
  glPolygonOffsetxOES_Z(a00,a01,);
}
alias glRotatexOES = glRotatexOES_Z;
__gshared glbfn_glRotatexOES glRotatexOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glRotatexOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glRotatexOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glRotatexOES_Z = glbindGetProcAddress(`glRotatexOES`);
  if (*cast(void**)&glRotatexOES_Z is null) assert(0, `OpenGL function 'glRotatexOES' not found!`);
  glRotatexOES_Z(a00,a01,a02,a03,);
}
alias glScalexOES = glScalexOES_Z;
__gshared glbfn_glScalexOES glScalexOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glScalexOES_loader(a00,a01,a02,);
};
private void glbfn_glScalexOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glScalexOES_Z = glbindGetProcAddress(`glScalexOES`);
  if (*cast(void**)&glScalexOES_Z is null) assert(0, `OpenGL function 'glScalexOES' not found!`);
  glScalexOES_Z(a00,a01,a02,);
}
alias glTexEnvxOES = glTexEnvxOES_Z;
__gshared glbfn_glTexEnvxOES glTexEnvxOES_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glTexEnvxOES_loader(a00,a01,a02,);
};
private void glbfn_glTexEnvxOES_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glTexEnvxOES_Z = glbindGetProcAddress(`glTexEnvxOES`);
  if (*cast(void**)&glTexEnvxOES_Z is null) assert(0, `OpenGL function 'glTexEnvxOES' not found!`);
  glTexEnvxOES_Z(a00,a01,a02,);
}
alias glTexEnvxvOES = glTexEnvxvOES_Z;
__gshared glbfn_glTexEnvxvOES glTexEnvxvOES_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexEnvxvOES_loader(a00,a01,a02,);
};
private void glbfn_glTexEnvxvOES_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexEnvxvOES_Z = glbindGetProcAddress(`glTexEnvxvOES`);
  if (*cast(void**)&glTexEnvxvOES_Z is null) assert(0, `OpenGL function 'glTexEnvxvOES' not found!`);
  glTexEnvxvOES_Z(a00,a01,a02,);
}
alias glTexParameterxOES = glTexParameterxOES_Z;
__gshared glbfn_glTexParameterxOES glTexParameterxOES_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glTexParameterxOES_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterxOES_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glTexParameterxOES_Z = glbindGetProcAddress(`glTexParameterxOES`);
  if (*cast(void**)&glTexParameterxOES_Z is null) assert(0, `OpenGL function 'glTexParameterxOES' not found!`);
  glTexParameterxOES_Z(a00,a01,a02,);
}
alias glTexParameterxvOES = glTexParameterxvOES_Z;
__gshared glbfn_glTexParameterxvOES glTexParameterxvOES_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexParameterxvOES_loader(a00,a01,a02,);
};
private void glbfn_glTexParameterxvOES_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexParameterxvOES_Z = glbindGetProcAddress(`glTexParameterxvOES`);
  if (*cast(void**)&glTexParameterxvOES_Z is null) assert(0, `OpenGL function 'glTexParameterxvOES' not found!`);
  glTexParameterxvOES_Z(a00,a01,a02,);
}
alias glTranslatexOES = glTranslatexOES_Z;
__gshared glbfn_glTranslatexOES glTranslatexOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glTranslatexOES_loader(a00,a01,a02,);
};
private void glbfn_glTranslatexOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glTranslatexOES_Z = glbindGetProcAddress(`glTranslatexOES`);
  if (*cast(void**)&glTranslatexOES_Z is null) assert(0, `OpenGL function 'glTranslatexOES' not found!`);
  glTranslatexOES_Z(a00,a01,a02,);
}
alias glGetLightxvOES = glGetLightxvOES_Z;
__gshared glbfn_glGetLightxvOES glGetLightxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetLightxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetLightxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetLightxvOES_Z = glbindGetProcAddress(`glGetLightxvOES`);
  if (*cast(void**)&glGetLightxvOES_Z is null) assert(0, `OpenGL function 'glGetLightxvOES' not found!`);
  glGetLightxvOES_Z(a00,a01,a02,);
}
alias glGetMaterialxvOES = glGetMaterialxvOES_Z;
__gshared glbfn_glGetMaterialxvOES glGetMaterialxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetMaterialxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetMaterialxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetMaterialxvOES_Z = glbindGetProcAddress(`glGetMaterialxvOES`);
  if (*cast(void**)&glGetMaterialxvOES_Z is null) assert(0, `OpenGL function 'glGetMaterialxvOES' not found!`);
  glGetMaterialxvOES_Z(a00,a01,a02,);
}
alias glPointParameterxOES = glPointParameterxOES_Z;
__gshared glbfn_glPointParameterxOES glPointParameterxOES_Z = function void (uint a00,int a01) {
  glbfn_glPointParameterxOES_loader(a00,a01,);
};
private void glbfn_glPointParameterxOES_loader (uint a00,int a01) {
  *cast(void**)&glPointParameterxOES_Z = glbindGetProcAddress(`glPointParameterxOES`);
  if (*cast(void**)&glPointParameterxOES_Z is null) assert(0, `OpenGL function 'glPointParameterxOES' not found!`);
  glPointParameterxOES_Z(a00,a01,);
}
alias glSampleCoveragexOES = glSampleCoveragexOES_Z;
__gshared glbfn_glSampleCoveragexOES glSampleCoveragexOES_Z = function void (int a00,ubyte a01) {
  glbfn_glSampleCoveragexOES_loader(a00,a01,);
};
private void glbfn_glSampleCoveragexOES_loader (int a00,ubyte a01) {
  *cast(void**)&glSampleCoveragexOES_Z = glbindGetProcAddress(`glSampleCoveragexOES`);
  if (*cast(void**)&glSampleCoveragexOES_Z is null) assert(0, `OpenGL function 'glSampleCoveragexOES' not found!`);
  glSampleCoveragexOES_Z(a00,a01,);
}
alias glAccumxOES = glAccumxOES_Z;
__gshared glbfn_glAccumxOES glAccumxOES_Z = function void (uint a00,int a01) {
  glbfn_glAccumxOES_loader(a00,a01,);
};
private void glbfn_glAccumxOES_loader (uint a00,int a01) {
  *cast(void**)&glAccumxOES_Z = glbindGetProcAddress(`glAccumxOES`);
  if (*cast(void**)&glAccumxOES_Z is null) assert(0, `OpenGL function 'glAccumxOES' not found!`);
  glAccumxOES_Z(a00,a01,);
}
alias glBitmapxOES = glBitmapxOES_Z;
__gshared glbfn_glBitmapxOES glBitmapxOES_Z = function void (int a00,int a01,int a02,int a03,int a04,int a05,const(ubyte)* a06) {
  glbfn_glBitmapxOES_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glBitmapxOES_loader (int a00,int a01,int a02,int a03,int a04,int a05,const(ubyte)* a06) {
  *cast(void**)&glBitmapxOES_Z = glbindGetProcAddress(`glBitmapxOES`);
  if (*cast(void**)&glBitmapxOES_Z is null) assert(0, `OpenGL function 'glBitmapxOES' not found!`);
  glBitmapxOES_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glBlendColorxOES = glBlendColorxOES_Z;
__gshared glbfn_glBlendColorxOES glBlendColorxOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glBlendColorxOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glBlendColorxOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glBlendColorxOES_Z = glbindGetProcAddress(`glBlendColorxOES`);
  if (*cast(void**)&glBlendColorxOES_Z is null) assert(0, `OpenGL function 'glBlendColorxOES' not found!`);
  glBlendColorxOES_Z(a00,a01,a02,a03,);
}
alias glClearAccumxOES = glClearAccumxOES_Z;
__gshared glbfn_glClearAccumxOES glClearAccumxOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glClearAccumxOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glClearAccumxOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glClearAccumxOES_Z = glbindGetProcAddress(`glClearAccumxOES`);
  if (*cast(void**)&glClearAccumxOES_Z is null) assert(0, `OpenGL function 'glClearAccumxOES' not found!`);
  glClearAccumxOES_Z(a00,a01,a02,a03,);
}
alias glColor3xOES = glColor3xOES_Z;
__gshared glbfn_glColor3xOES glColor3xOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glColor3xOES_loader(a00,a01,a02,);
};
private void glbfn_glColor3xOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glColor3xOES_Z = glbindGetProcAddress(`glColor3xOES`);
  if (*cast(void**)&glColor3xOES_Z is null) assert(0, `OpenGL function 'glColor3xOES' not found!`);
  glColor3xOES_Z(a00,a01,a02,);
}
alias glColor3xvOES = glColor3xvOES_Z;
__gshared glbfn_glColor3xvOES glColor3xvOES_Z = function void (const(int)* a00) {
  glbfn_glColor3xvOES_loader(a00,);
};
private void glbfn_glColor3xvOES_loader (const(int)* a00) {
  *cast(void**)&glColor3xvOES_Z = glbindGetProcAddress(`glColor3xvOES`);
  if (*cast(void**)&glColor3xvOES_Z is null) assert(0, `OpenGL function 'glColor3xvOES' not found!`);
  glColor3xvOES_Z(a00,);
}
alias glColor4xvOES = glColor4xvOES_Z;
__gshared glbfn_glColor4xvOES glColor4xvOES_Z = function void (const(int)* a00) {
  glbfn_glColor4xvOES_loader(a00,);
};
private void glbfn_glColor4xvOES_loader (const(int)* a00) {
  *cast(void**)&glColor4xvOES_Z = glbindGetProcAddress(`glColor4xvOES`);
  if (*cast(void**)&glColor4xvOES_Z is null) assert(0, `OpenGL function 'glColor4xvOES' not found!`);
  glColor4xvOES_Z(a00,);
}
alias glConvolutionParameterxOES = glConvolutionParameterxOES_Z;
__gshared glbfn_glConvolutionParameterxOES glConvolutionParameterxOES_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glConvolutionParameterxOES_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameterxOES_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glConvolutionParameterxOES_Z = glbindGetProcAddress(`glConvolutionParameterxOES`);
  if (*cast(void**)&glConvolutionParameterxOES_Z is null) assert(0, `OpenGL function 'glConvolutionParameterxOES' not found!`);
  glConvolutionParameterxOES_Z(a00,a01,a02,);
}
alias glConvolutionParameterxvOES = glConvolutionParameterxvOES_Z;
__gshared glbfn_glConvolutionParameterxvOES glConvolutionParameterxvOES_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glConvolutionParameterxvOES_loader(a00,a01,a02,);
};
private void glbfn_glConvolutionParameterxvOES_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glConvolutionParameterxvOES_Z = glbindGetProcAddress(`glConvolutionParameterxvOES`);
  if (*cast(void**)&glConvolutionParameterxvOES_Z is null) assert(0, `OpenGL function 'glConvolutionParameterxvOES' not found!`);
  glConvolutionParameterxvOES_Z(a00,a01,a02,);
}
alias glEvalCoord1xOES = glEvalCoord1xOES_Z;
__gshared glbfn_glEvalCoord1xOES glEvalCoord1xOES_Z = function void (int a00) {
  glbfn_glEvalCoord1xOES_loader(a00,);
};
private void glbfn_glEvalCoord1xOES_loader (int a00) {
  *cast(void**)&glEvalCoord1xOES_Z = glbindGetProcAddress(`glEvalCoord1xOES`);
  if (*cast(void**)&glEvalCoord1xOES_Z is null) assert(0, `OpenGL function 'glEvalCoord1xOES' not found!`);
  glEvalCoord1xOES_Z(a00,);
}
alias glEvalCoord1xvOES = glEvalCoord1xvOES_Z;
__gshared glbfn_glEvalCoord1xvOES glEvalCoord1xvOES_Z = function void (const(int)* a00) {
  glbfn_glEvalCoord1xvOES_loader(a00,);
};
private void glbfn_glEvalCoord1xvOES_loader (const(int)* a00) {
  *cast(void**)&glEvalCoord1xvOES_Z = glbindGetProcAddress(`glEvalCoord1xvOES`);
  if (*cast(void**)&glEvalCoord1xvOES_Z is null) assert(0, `OpenGL function 'glEvalCoord1xvOES' not found!`);
  glEvalCoord1xvOES_Z(a00,);
}
alias glEvalCoord2xOES = glEvalCoord2xOES_Z;
__gshared glbfn_glEvalCoord2xOES glEvalCoord2xOES_Z = function void (int a00,int a01) {
  glbfn_glEvalCoord2xOES_loader(a00,a01,);
};
private void glbfn_glEvalCoord2xOES_loader (int a00,int a01) {
  *cast(void**)&glEvalCoord2xOES_Z = glbindGetProcAddress(`glEvalCoord2xOES`);
  if (*cast(void**)&glEvalCoord2xOES_Z is null) assert(0, `OpenGL function 'glEvalCoord2xOES' not found!`);
  glEvalCoord2xOES_Z(a00,a01,);
}
alias glEvalCoord2xvOES = glEvalCoord2xvOES_Z;
__gshared glbfn_glEvalCoord2xvOES glEvalCoord2xvOES_Z = function void (const(int)* a00) {
  glbfn_glEvalCoord2xvOES_loader(a00,);
};
private void glbfn_glEvalCoord2xvOES_loader (const(int)* a00) {
  *cast(void**)&glEvalCoord2xvOES_Z = glbindGetProcAddress(`glEvalCoord2xvOES`);
  if (*cast(void**)&glEvalCoord2xvOES_Z is null) assert(0, `OpenGL function 'glEvalCoord2xvOES' not found!`);
  glEvalCoord2xvOES_Z(a00,);
}
alias glFeedbackBufferxOES = glFeedbackBufferxOES_Z;
__gshared glbfn_glFeedbackBufferxOES glFeedbackBufferxOES_Z = function void (int a00,uint a01,const(int)* a02) {
  glbfn_glFeedbackBufferxOES_loader(a00,a01,a02,);
};
private void glbfn_glFeedbackBufferxOES_loader (int a00,uint a01,const(int)* a02) {
  *cast(void**)&glFeedbackBufferxOES_Z = glbindGetProcAddress(`glFeedbackBufferxOES`);
  if (*cast(void**)&glFeedbackBufferxOES_Z is null) assert(0, `OpenGL function 'glFeedbackBufferxOES' not found!`);
  glFeedbackBufferxOES_Z(a00,a01,a02,);
}
alias glGetConvolutionParameterxvOES = glGetConvolutionParameterxvOES_Z;
__gshared glbfn_glGetConvolutionParameterxvOES glGetConvolutionParameterxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetConvolutionParameterxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetConvolutionParameterxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetConvolutionParameterxvOES_Z = glbindGetProcAddress(`glGetConvolutionParameterxvOES`);
  if (*cast(void**)&glGetConvolutionParameterxvOES_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterxvOES' not found!`);
  glGetConvolutionParameterxvOES_Z(a00,a01,a02,);
}
alias glGetHistogramParameterxvOES = glGetHistogramParameterxvOES_Z;
__gshared glbfn_glGetHistogramParameterxvOES glGetHistogramParameterxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetHistogramParameterxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetHistogramParameterxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetHistogramParameterxvOES_Z = glbindGetProcAddress(`glGetHistogramParameterxvOES`);
  if (*cast(void**)&glGetHistogramParameterxvOES_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterxvOES' not found!`);
  glGetHistogramParameterxvOES_Z(a00,a01,a02,);
}
alias glGetLightxOES = glGetLightxOES_Z;
__gshared glbfn_glGetLightxOES glGetLightxOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetLightxOES_loader(a00,a01,a02,);
};
private void glbfn_glGetLightxOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetLightxOES_Z = glbindGetProcAddress(`glGetLightxOES`);
  if (*cast(void**)&glGetLightxOES_Z is null) assert(0, `OpenGL function 'glGetLightxOES' not found!`);
  glGetLightxOES_Z(a00,a01,a02,);
}
alias glGetMapxvOES = glGetMapxvOES_Z;
__gshared glbfn_glGetMapxvOES glGetMapxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetMapxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetMapxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetMapxvOES_Z = glbindGetProcAddress(`glGetMapxvOES`);
  if (*cast(void**)&glGetMapxvOES_Z is null) assert(0, `OpenGL function 'glGetMapxvOES' not found!`);
  glGetMapxvOES_Z(a00,a01,a02,);
}
alias glGetMaterialxOES = glGetMaterialxOES_Z;
__gshared glbfn_glGetMaterialxOES glGetMaterialxOES_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glGetMaterialxOES_loader(a00,a01,a02,);
};
private void glbfn_glGetMaterialxOES_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glGetMaterialxOES_Z = glbindGetProcAddress(`glGetMaterialxOES`);
  if (*cast(void**)&glGetMaterialxOES_Z is null) assert(0, `OpenGL function 'glGetMaterialxOES' not found!`);
  glGetMaterialxOES_Z(a00,a01,a02,);
}
alias glGetPixelMapxv = glGetPixelMapxv_Z;
__gshared glbfn_glGetPixelMapxv glGetPixelMapxv_Z = function void (uint a00,int a01,int* a02) {
  glbfn_glGetPixelMapxv_loader(a00,a01,a02,);
};
private void glbfn_glGetPixelMapxv_loader (uint a00,int a01,int* a02) {
  *cast(void**)&glGetPixelMapxv_Z = glbindGetProcAddress(`glGetPixelMapxv`);
  if (*cast(void**)&glGetPixelMapxv_Z is null) assert(0, `OpenGL function 'glGetPixelMapxv' not found!`);
  glGetPixelMapxv_Z(a00,a01,a02,);
}
alias glGetTexGenxvOES = glGetTexGenxvOES_Z;
__gshared glbfn_glGetTexGenxvOES glGetTexGenxvOES_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetTexGenxvOES_loader(a00,a01,a02,);
};
private void glbfn_glGetTexGenxvOES_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetTexGenxvOES_Z = glbindGetProcAddress(`glGetTexGenxvOES`);
  if (*cast(void**)&glGetTexGenxvOES_Z is null) assert(0, `OpenGL function 'glGetTexGenxvOES' not found!`);
  glGetTexGenxvOES_Z(a00,a01,a02,);
}
alias glGetTexLevelParameterxvOES = glGetTexLevelParameterxvOES_Z;
__gshared glbfn_glGetTexLevelParameterxvOES glGetTexLevelParameterxvOES_Z = function void (uint a00,int a01,uint a02,int* a03) {
  glbfn_glGetTexLevelParameterxvOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetTexLevelParameterxvOES_loader (uint a00,int a01,uint a02,int* a03) {
  *cast(void**)&glGetTexLevelParameterxvOES_Z = glbindGetProcAddress(`glGetTexLevelParameterxvOES`);
  if (*cast(void**)&glGetTexLevelParameterxvOES_Z is null) assert(0, `OpenGL function 'glGetTexLevelParameterxvOES' not found!`);
  glGetTexLevelParameterxvOES_Z(a00,a01,a02,a03,);
}
alias glIndexxOES = glIndexxOES_Z;
__gshared glbfn_glIndexxOES glIndexxOES_Z = function void (int a00) {
  glbfn_glIndexxOES_loader(a00,);
};
private void glbfn_glIndexxOES_loader (int a00) {
  *cast(void**)&glIndexxOES_Z = glbindGetProcAddress(`glIndexxOES`);
  if (*cast(void**)&glIndexxOES_Z is null) assert(0, `OpenGL function 'glIndexxOES' not found!`);
  glIndexxOES_Z(a00,);
}
alias glIndexxvOES = glIndexxvOES_Z;
__gshared glbfn_glIndexxvOES glIndexxvOES_Z = function void (const(int)* a00) {
  glbfn_glIndexxvOES_loader(a00,);
};
private void glbfn_glIndexxvOES_loader (const(int)* a00) {
  *cast(void**)&glIndexxvOES_Z = glbindGetProcAddress(`glIndexxvOES`);
  if (*cast(void**)&glIndexxvOES_Z is null) assert(0, `OpenGL function 'glIndexxvOES' not found!`);
  glIndexxvOES_Z(a00,);
}
alias glLoadTransposeMatrixxOES = glLoadTransposeMatrixxOES_Z;
__gshared glbfn_glLoadTransposeMatrixxOES glLoadTransposeMatrixxOES_Z = function void (const(int)* a00) {
  glbfn_glLoadTransposeMatrixxOES_loader(a00,);
};
private void glbfn_glLoadTransposeMatrixxOES_loader (const(int)* a00) {
  *cast(void**)&glLoadTransposeMatrixxOES_Z = glbindGetProcAddress(`glLoadTransposeMatrixxOES`);
  if (*cast(void**)&glLoadTransposeMatrixxOES_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixxOES' not found!`);
  glLoadTransposeMatrixxOES_Z(a00,);
}
alias glMap1xOES = glMap1xOES_Z;
__gshared glbfn_glMap1xOES glMap1xOES_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05) {
  glbfn_glMap1xOES_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glMap1xOES_loader (uint a00,int a01,int a02,int a03,int a04,int a05) {
  *cast(void**)&glMap1xOES_Z = glbindGetProcAddress(`glMap1xOES`);
  if (*cast(void**)&glMap1xOES_Z is null) assert(0, `OpenGL function 'glMap1xOES' not found!`);
  glMap1xOES_Z(a00,a01,a02,a03,a04,a05,);
}
alias glMap2xOES = glMap2xOES_Z;
__gshared glbfn_glMap2xOES glMap2xOES_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09) {
  glbfn_glMap2xOES_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glMap2xOES_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09) {
  *cast(void**)&glMap2xOES_Z = glbindGetProcAddress(`glMap2xOES`);
  if (*cast(void**)&glMap2xOES_Z is null) assert(0, `OpenGL function 'glMap2xOES' not found!`);
  glMap2xOES_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glMapGrid1xOES = glMapGrid1xOES_Z;
__gshared glbfn_glMapGrid1xOES glMapGrid1xOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glMapGrid1xOES_loader(a00,a01,a02,);
};
private void glbfn_glMapGrid1xOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glMapGrid1xOES_Z = glbindGetProcAddress(`glMapGrid1xOES`);
  if (*cast(void**)&glMapGrid1xOES_Z is null) assert(0, `OpenGL function 'glMapGrid1xOES' not found!`);
  glMapGrid1xOES_Z(a00,a01,a02,);
}
alias glMapGrid2xOES = glMapGrid2xOES_Z;
__gshared glbfn_glMapGrid2xOES glMapGrid2xOES_Z = function void (int a00,int a01,int a02,int a03,int a04) {
  glbfn_glMapGrid2xOES_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glMapGrid2xOES_loader (int a00,int a01,int a02,int a03,int a04) {
  *cast(void**)&glMapGrid2xOES_Z = glbindGetProcAddress(`glMapGrid2xOES`);
  if (*cast(void**)&glMapGrid2xOES_Z is null) assert(0, `OpenGL function 'glMapGrid2xOES' not found!`);
  glMapGrid2xOES_Z(a00,a01,a02,a03,a04,);
}
alias glMultTransposeMatrixxOES = glMultTransposeMatrixxOES_Z;
__gshared glbfn_glMultTransposeMatrixxOES glMultTransposeMatrixxOES_Z = function void (const(int)* a00) {
  glbfn_glMultTransposeMatrixxOES_loader(a00,);
};
private void glbfn_glMultTransposeMatrixxOES_loader (const(int)* a00) {
  *cast(void**)&glMultTransposeMatrixxOES_Z = glbindGetProcAddress(`glMultTransposeMatrixxOES`);
  if (*cast(void**)&glMultTransposeMatrixxOES_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixxOES' not found!`);
  glMultTransposeMatrixxOES_Z(a00,);
}
alias glMultiTexCoord1xOES = glMultiTexCoord1xOES_Z;
__gshared glbfn_glMultiTexCoord1xOES glMultiTexCoord1xOES_Z = function void (uint a00,int a01) {
  glbfn_glMultiTexCoord1xOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1xOES_loader (uint a00,int a01) {
  *cast(void**)&glMultiTexCoord1xOES_Z = glbindGetProcAddress(`glMultiTexCoord1xOES`);
  if (*cast(void**)&glMultiTexCoord1xOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1xOES' not found!`);
  glMultiTexCoord1xOES_Z(a00,a01,);
}
alias glMultiTexCoord1xvOES = glMultiTexCoord1xvOES_Z;
__gshared glbfn_glMultiTexCoord1xvOES glMultiTexCoord1xvOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord1xvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord1xvOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord1xvOES_Z = glbindGetProcAddress(`glMultiTexCoord1xvOES`);
  if (*cast(void**)&glMultiTexCoord1xvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1xvOES' not found!`);
  glMultiTexCoord1xvOES_Z(a00,a01,);
}
alias glMultiTexCoord2xOES = glMultiTexCoord2xOES_Z;
__gshared glbfn_glMultiTexCoord2xOES glMultiTexCoord2xOES_Z = function void (uint a00,int a01,int a02) {
  glbfn_glMultiTexCoord2xOES_loader(a00,a01,a02,);
};
private void glbfn_glMultiTexCoord2xOES_loader (uint a00,int a01,int a02) {
  *cast(void**)&glMultiTexCoord2xOES_Z = glbindGetProcAddress(`glMultiTexCoord2xOES`);
  if (*cast(void**)&glMultiTexCoord2xOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2xOES' not found!`);
  glMultiTexCoord2xOES_Z(a00,a01,a02,);
}
alias glMultiTexCoord2xvOES = glMultiTexCoord2xvOES_Z;
__gshared glbfn_glMultiTexCoord2xvOES glMultiTexCoord2xvOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord2xvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord2xvOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord2xvOES_Z = glbindGetProcAddress(`glMultiTexCoord2xvOES`);
  if (*cast(void**)&glMultiTexCoord2xvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2xvOES' not found!`);
  glMultiTexCoord2xvOES_Z(a00,a01,);
}
alias glMultiTexCoord3xOES = glMultiTexCoord3xOES_Z;
__gshared glbfn_glMultiTexCoord3xOES glMultiTexCoord3xOES_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glMultiTexCoord3xOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glMultiTexCoord3xOES_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glMultiTexCoord3xOES_Z = glbindGetProcAddress(`glMultiTexCoord3xOES`);
  if (*cast(void**)&glMultiTexCoord3xOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3xOES' not found!`);
  glMultiTexCoord3xOES_Z(a00,a01,a02,a03,);
}
alias glMultiTexCoord3xvOES = glMultiTexCoord3xvOES_Z;
__gshared glbfn_glMultiTexCoord3xvOES glMultiTexCoord3xvOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord3xvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord3xvOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord3xvOES_Z = glbindGetProcAddress(`glMultiTexCoord3xvOES`);
  if (*cast(void**)&glMultiTexCoord3xvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3xvOES' not found!`);
  glMultiTexCoord3xvOES_Z(a00,a01,);
}
alias glMultiTexCoord4xvOES = glMultiTexCoord4xvOES_Z;
__gshared glbfn_glMultiTexCoord4xvOES glMultiTexCoord4xvOES_Z = function void (uint a00,const(int)* a01) {
  glbfn_glMultiTexCoord4xvOES_loader(a00,a01,);
};
private void glbfn_glMultiTexCoord4xvOES_loader (uint a00,const(int)* a01) {
  *cast(void**)&glMultiTexCoord4xvOES_Z = glbindGetProcAddress(`glMultiTexCoord4xvOES`);
  if (*cast(void**)&glMultiTexCoord4xvOES_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4xvOES' not found!`);
  glMultiTexCoord4xvOES_Z(a00,a01,);
}
alias glNormal3xvOES = glNormal3xvOES_Z;
__gshared glbfn_glNormal3xvOES glNormal3xvOES_Z = function void (const(int)* a00) {
  glbfn_glNormal3xvOES_loader(a00,);
};
private void glbfn_glNormal3xvOES_loader (const(int)* a00) {
  *cast(void**)&glNormal3xvOES_Z = glbindGetProcAddress(`glNormal3xvOES`);
  if (*cast(void**)&glNormal3xvOES_Z is null) assert(0, `OpenGL function 'glNormal3xvOES' not found!`);
  glNormal3xvOES_Z(a00,);
}
alias glPassThroughxOES = glPassThroughxOES_Z;
__gshared glbfn_glPassThroughxOES glPassThroughxOES_Z = function void (int a00) {
  glbfn_glPassThroughxOES_loader(a00,);
};
private void glbfn_glPassThroughxOES_loader (int a00) {
  *cast(void**)&glPassThroughxOES_Z = glbindGetProcAddress(`glPassThroughxOES`);
  if (*cast(void**)&glPassThroughxOES_Z is null) assert(0, `OpenGL function 'glPassThroughxOES' not found!`);
  glPassThroughxOES_Z(a00,);
}
alias glPixelMapx = glPixelMapx_Z;
__gshared glbfn_glPixelMapx glPixelMapx_Z = function void (uint a00,int a01,const(int)* a02) {
  glbfn_glPixelMapx_loader(a00,a01,a02,);
};
private void glbfn_glPixelMapx_loader (uint a00,int a01,const(int)* a02) {
  *cast(void**)&glPixelMapx_Z = glbindGetProcAddress(`glPixelMapx`);
  if (*cast(void**)&glPixelMapx_Z is null) assert(0, `OpenGL function 'glPixelMapx' not found!`);
  glPixelMapx_Z(a00,a01,a02,);
}
alias glPixelStorex = glPixelStorex_Z;
__gshared glbfn_glPixelStorex glPixelStorex_Z = function void (uint a00,int a01) {
  glbfn_glPixelStorex_loader(a00,a01,);
};
private void glbfn_glPixelStorex_loader (uint a00,int a01) {
  *cast(void**)&glPixelStorex_Z = glbindGetProcAddress(`glPixelStorex`);
  if (*cast(void**)&glPixelStorex_Z is null) assert(0, `OpenGL function 'glPixelStorex' not found!`);
  glPixelStorex_Z(a00,a01,);
}
alias glPixelTransferxOES = glPixelTransferxOES_Z;
__gshared glbfn_glPixelTransferxOES glPixelTransferxOES_Z = function void (uint a00,int a01) {
  glbfn_glPixelTransferxOES_loader(a00,a01,);
};
private void glbfn_glPixelTransferxOES_loader (uint a00,int a01) {
  *cast(void**)&glPixelTransferxOES_Z = glbindGetProcAddress(`glPixelTransferxOES`);
  if (*cast(void**)&glPixelTransferxOES_Z is null) assert(0, `OpenGL function 'glPixelTransferxOES' not found!`);
  glPixelTransferxOES_Z(a00,a01,);
}
alias glPixelZoomxOES = glPixelZoomxOES_Z;
__gshared glbfn_glPixelZoomxOES glPixelZoomxOES_Z = function void (int a00,int a01) {
  glbfn_glPixelZoomxOES_loader(a00,a01,);
};
private void glbfn_glPixelZoomxOES_loader (int a00,int a01) {
  *cast(void**)&glPixelZoomxOES_Z = glbindGetProcAddress(`glPixelZoomxOES`);
  if (*cast(void**)&glPixelZoomxOES_Z is null) assert(0, `OpenGL function 'glPixelZoomxOES' not found!`);
  glPixelZoomxOES_Z(a00,a01,);
}
alias glPrioritizeTexturesxOES = glPrioritizeTexturesxOES_Z;
__gshared glbfn_glPrioritizeTexturesxOES glPrioritizeTexturesxOES_Z = function void (int a00,const(uint)* a01,const(int)* a02) {
  glbfn_glPrioritizeTexturesxOES_loader(a00,a01,a02,);
};
private void glbfn_glPrioritizeTexturesxOES_loader (int a00,const(uint)* a01,const(int)* a02) {
  *cast(void**)&glPrioritizeTexturesxOES_Z = glbindGetProcAddress(`glPrioritizeTexturesxOES`);
  if (*cast(void**)&glPrioritizeTexturesxOES_Z is null) assert(0, `OpenGL function 'glPrioritizeTexturesxOES' not found!`);
  glPrioritizeTexturesxOES_Z(a00,a01,a02,);
}
alias glRasterPos2xOES = glRasterPos2xOES_Z;
__gshared glbfn_glRasterPos2xOES glRasterPos2xOES_Z = function void (int a00,int a01) {
  glbfn_glRasterPos2xOES_loader(a00,a01,);
};
private void glbfn_glRasterPos2xOES_loader (int a00,int a01) {
  *cast(void**)&glRasterPos2xOES_Z = glbindGetProcAddress(`glRasterPos2xOES`);
  if (*cast(void**)&glRasterPos2xOES_Z is null) assert(0, `OpenGL function 'glRasterPos2xOES' not found!`);
  glRasterPos2xOES_Z(a00,a01,);
}
alias glRasterPos2xvOES = glRasterPos2xvOES_Z;
__gshared glbfn_glRasterPos2xvOES glRasterPos2xvOES_Z = function void (const(int)* a00) {
  glbfn_glRasterPos2xvOES_loader(a00,);
};
private void glbfn_glRasterPos2xvOES_loader (const(int)* a00) {
  *cast(void**)&glRasterPos2xvOES_Z = glbindGetProcAddress(`glRasterPos2xvOES`);
  if (*cast(void**)&glRasterPos2xvOES_Z is null) assert(0, `OpenGL function 'glRasterPos2xvOES' not found!`);
  glRasterPos2xvOES_Z(a00,);
}
alias glRasterPos3xOES = glRasterPos3xOES_Z;
__gshared glbfn_glRasterPos3xOES glRasterPos3xOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glRasterPos3xOES_loader(a00,a01,a02,);
};
private void glbfn_glRasterPos3xOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glRasterPos3xOES_Z = glbindGetProcAddress(`glRasterPos3xOES`);
  if (*cast(void**)&glRasterPos3xOES_Z is null) assert(0, `OpenGL function 'glRasterPos3xOES' not found!`);
  glRasterPos3xOES_Z(a00,a01,a02,);
}
alias glRasterPos3xvOES = glRasterPos3xvOES_Z;
__gshared glbfn_glRasterPos3xvOES glRasterPos3xvOES_Z = function void (const(int)* a00) {
  glbfn_glRasterPos3xvOES_loader(a00,);
};
private void glbfn_glRasterPos3xvOES_loader (const(int)* a00) {
  *cast(void**)&glRasterPos3xvOES_Z = glbindGetProcAddress(`glRasterPos3xvOES`);
  if (*cast(void**)&glRasterPos3xvOES_Z is null) assert(0, `OpenGL function 'glRasterPos3xvOES' not found!`);
  glRasterPos3xvOES_Z(a00,);
}
alias glRasterPos4xOES = glRasterPos4xOES_Z;
__gshared glbfn_glRasterPos4xOES glRasterPos4xOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glRasterPos4xOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glRasterPos4xOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glRasterPos4xOES_Z = glbindGetProcAddress(`glRasterPos4xOES`);
  if (*cast(void**)&glRasterPos4xOES_Z is null) assert(0, `OpenGL function 'glRasterPos4xOES' not found!`);
  glRasterPos4xOES_Z(a00,a01,a02,a03,);
}
alias glRasterPos4xvOES = glRasterPos4xvOES_Z;
__gshared glbfn_glRasterPos4xvOES glRasterPos4xvOES_Z = function void (const(int)* a00) {
  glbfn_glRasterPos4xvOES_loader(a00,);
};
private void glbfn_glRasterPos4xvOES_loader (const(int)* a00) {
  *cast(void**)&glRasterPos4xvOES_Z = glbindGetProcAddress(`glRasterPos4xvOES`);
  if (*cast(void**)&glRasterPos4xvOES_Z is null) assert(0, `OpenGL function 'glRasterPos4xvOES' not found!`);
  glRasterPos4xvOES_Z(a00,);
}
alias glRectxOES = glRectxOES_Z;
__gshared glbfn_glRectxOES glRectxOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glRectxOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glRectxOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glRectxOES_Z = glbindGetProcAddress(`glRectxOES`);
  if (*cast(void**)&glRectxOES_Z is null) assert(0, `OpenGL function 'glRectxOES' not found!`);
  glRectxOES_Z(a00,a01,a02,a03,);
}
alias glRectxvOES = glRectxvOES_Z;
__gshared glbfn_glRectxvOES glRectxvOES_Z = function void (const(int)* a00,const(int)* a01) {
  glbfn_glRectxvOES_loader(a00,a01,);
};
private void glbfn_glRectxvOES_loader (const(int)* a00,const(int)* a01) {
  *cast(void**)&glRectxvOES_Z = glbindGetProcAddress(`glRectxvOES`);
  if (*cast(void**)&glRectxvOES_Z is null) assert(0, `OpenGL function 'glRectxvOES' not found!`);
  glRectxvOES_Z(a00,a01,);
}
alias glTexCoord1xOES = glTexCoord1xOES_Z;
__gshared glbfn_glTexCoord1xOES glTexCoord1xOES_Z = function void (int a00) {
  glbfn_glTexCoord1xOES_loader(a00,);
};
private void glbfn_glTexCoord1xOES_loader (int a00) {
  *cast(void**)&glTexCoord1xOES_Z = glbindGetProcAddress(`glTexCoord1xOES`);
  if (*cast(void**)&glTexCoord1xOES_Z is null) assert(0, `OpenGL function 'glTexCoord1xOES' not found!`);
  glTexCoord1xOES_Z(a00,);
}
alias glTexCoord1xvOES = glTexCoord1xvOES_Z;
__gshared glbfn_glTexCoord1xvOES glTexCoord1xvOES_Z = function void (const(int)* a00) {
  glbfn_glTexCoord1xvOES_loader(a00,);
};
private void glbfn_glTexCoord1xvOES_loader (const(int)* a00) {
  *cast(void**)&glTexCoord1xvOES_Z = glbindGetProcAddress(`glTexCoord1xvOES`);
  if (*cast(void**)&glTexCoord1xvOES_Z is null) assert(0, `OpenGL function 'glTexCoord1xvOES' not found!`);
  glTexCoord1xvOES_Z(a00,);
}
alias glTexCoord2xOES = glTexCoord2xOES_Z;
__gshared glbfn_glTexCoord2xOES glTexCoord2xOES_Z = function void (int a00,int a01) {
  glbfn_glTexCoord2xOES_loader(a00,a01,);
};
private void glbfn_glTexCoord2xOES_loader (int a00,int a01) {
  *cast(void**)&glTexCoord2xOES_Z = glbindGetProcAddress(`glTexCoord2xOES`);
  if (*cast(void**)&glTexCoord2xOES_Z is null) assert(0, `OpenGL function 'glTexCoord2xOES' not found!`);
  glTexCoord2xOES_Z(a00,a01,);
}
alias glTexCoord2xvOES = glTexCoord2xvOES_Z;
__gshared glbfn_glTexCoord2xvOES glTexCoord2xvOES_Z = function void (const(int)* a00) {
  glbfn_glTexCoord2xvOES_loader(a00,);
};
private void glbfn_glTexCoord2xvOES_loader (const(int)* a00) {
  *cast(void**)&glTexCoord2xvOES_Z = glbindGetProcAddress(`glTexCoord2xvOES`);
  if (*cast(void**)&glTexCoord2xvOES_Z is null) assert(0, `OpenGL function 'glTexCoord2xvOES' not found!`);
  glTexCoord2xvOES_Z(a00,);
}
alias glTexCoord3xOES = glTexCoord3xOES_Z;
__gshared glbfn_glTexCoord3xOES glTexCoord3xOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glTexCoord3xOES_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord3xOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glTexCoord3xOES_Z = glbindGetProcAddress(`glTexCoord3xOES`);
  if (*cast(void**)&glTexCoord3xOES_Z is null) assert(0, `OpenGL function 'glTexCoord3xOES' not found!`);
  glTexCoord3xOES_Z(a00,a01,a02,);
}
alias glTexCoord3xvOES = glTexCoord3xvOES_Z;
__gshared glbfn_glTexCoord3xvOES glTexCoord3xvOES_Z = function void (const(int)* a00) {
  glbfn_glTexCoord3xvOES_loader(a00,);
};
private void glbfn_glTexCoord3xvOES_loader (const(int)* a00) {
  *cast(void**)&glTexCoord3xvOES_Z = glbindGetProcAddress(`glTexCoord3xvOES`);
  if (*cast(void**)&glTexCoord3xvOES_Z is null) assert(0, `OpenGL function 'glTexCoord3xvOES' not found!`);
  glTexCoord3xvOES_Z(a00,);
}
alias glTexCoord4xOES = glTexCoord4xOES_Z;
__gshared glbfn_glTexCoord4xOES glTexCoord4xOES_Z = function void (int a00,int a01,int a02,int a03) {
  glbfn_glTexCoord4xOES_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4xOES_loader (int a00,int a01,int a02,int a03) {
  *cast(void**)&glTexCoord4xOES_Z = glbindGetProcAddress(`glTexCoord4xOES`);
  if (*cast(void**)&glTexCoord4xOES_Z is null) assert(0, `OpenGL function 'glTexCoord4xOES' not found!`);
  glTexCoord4xOES_Z(a00,a01,a02,a03,);
}
alias glTexCoord4xvOES = glTexCoord4xvOES_Z;
__gshared glbfn_glTexCoord4xvOES glTexCoord4xvOES_Z = function void (const(int)* a00) {
  glbfn_glTexCoord4xvOES_loader(a00,);
};
private void glbfn_glTexCoord4xvOES_loader (const(int)* a00) {
  *cast(void**)&glTexCoord4xvOES_Z = glbindGetProcAddress(`glTexCoord4xvOES`);
  if (*cast(void**)&glTexCoord4xvOES_Z is null) assert(0, `OpenGL function 'glTexCoord4xvOES' not found!`);
  glTexCoord4xvOES_Z(a00,);
}
alias glTexGenxOES = glTexGenxOES_Z;
__gshared glbfn_glTexGenxOES glTexGenxOES_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glTexGenxOES_loader(a00,a01,a02,);
};
private void glbfn_glTexGenxOES_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glTexGenxOES_Z = glbindGetProcAddress(`glTexGenxOES`);
  if (*cast(void**)&glTexGenxOES_Z is null) assert(0, `OpenGL function 'glTexGenxOES' not found!`);
  glTexGenxOES_Z(a00,a01,a02,);
}
alias glTexGenxvOES = glTexGenxvOES_Z;
__gshared glbfn_glTexGenxvOES glTexGenxvOES_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glTexGenxvOES_loader(a00,a01,a02,);
};
private void glbfn_glTexGenxvOES_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glTexGenxvOES_Z = glbindGetProcAddress(`glTexGenxvOES`);
  if (*cast(void**)&glTexGenxvOES_Z is null) assert(0, `OpenGL function 'glTexGenxvOES' not found!`);
  glTexGenxvOES_Z(a00,a01,a02,);
}
alias glVertex2xOES = glVertex2xOES_Z;
__gshared glbfn_glVertex2xOES glVertex2xOES_Z = function void (int a00) {
  glbfn_glVertex2xOES_loader(a00,);
};
private void glbfn_glVertex2xOES_loader (int a00) {
  *cast(void**)&glVertex2xOES_Z = glbindGetProcAddress(`glVertex2xOES`);
  if (*cast(void**)&glVertex2xOES_Z is null) assert(0, `OpenGL function 'glVertex2xOES' not found!`);
  glVertex2xOES_Z(a00,);
}
alias glVertex2xvOES = glVertex2xvOES_Z;
__gshared glbfn_glVertex2xvOES glVertex2xvOES_Z = function void (const(int)* a00) {
  glbfn_glVertex2xvOES_loader(a00,);
};
private void glbfn_glVertex2xvOES_loader (const(int)* a00) {
  *cast(void**)&glVertex2xvOES_Z = glbindGetProcAddress(`glVertex2xvOES`);
  if (*cast(void**)&glVertex2xvOES_Z is null) assert(0, `OpenGL function 'glVertex2xvOES' not found!`);
  glVertex2xvOES_Z(a00,);
}
alias glVertex3xOES = glVertex3xOES_Z;
__gshared glbfn_glVertex3xOES glVertex3xOES_Z = function void (int a00,int a01) {
  glbfn_glVertex3xOES_loader(a00,a01,);
};
private void glbfn_glVertex3xOES_loader (int a00,int a01) {
  *cast(void**)&glVertex3xOES_Z = glbindGetProcAddress(`glVertex3xOES`);
  if (*cast(void**)&glVertex3xOES_Z is null) assert(0, `OpenGL function 'glVertex3xOES' not found!`);
  glVertex3xOES_Z(a00,a01,);
}
alias glVertex3xvOES = glVertex3xvOES_Z;
__gshared glbfn_glVertex3xvOES glVertex3xvOES_Z = function void (const(int)* a00) {
  glbfn_glVertex3xvOES_loader(a00,);
};
private void glbfn_glVertex3xvOES_loader (const(int)* a00) {
  *cast(void**)&glVertex3xvOES_Z = glbindGetProcAddress(`glVertex3xvOES`);
  if (*cast(void**)&glVertex3xvOES_Z is null) assert(0, `OpenGL function 'glVertex3xvOES' not found!`);
  glVertex3xvOES_Z(a00,);
}
alias glVertex4xOES = glVertex4xOES_Z;
__gshared glbfn_glVertex4xOES glVertex4xOES_Z = function void (int a00,int a01,int a02) {
  glbfn_glVertex4xOES_loader(a00,a01,a02,);
};
private void glbfn_glVertex4xOES_loader (int a00,int a01,int a02) {
  *cast(void**)&glVertex4xOES_Z = glbindGetProcAddress(`glVertex4xOES`);
  if (*cast(void**)&glVertex4xOES_Z is null) assert(0, `OpenGL function 'glVertex4xOES' not found!`);
  glVertex4xOES_Z(a00,a01,a02,);
}
alias glVertex4xvOES = glVertex4xvOES_Z;
__gshared glbfn_glVertex4xvOES glVertex4xvOES_Z = function void (const(int)* a00) {
  glbfn_glVertex4xvOES_loader(a00,);
};
private void glbfn_glVertex4xvOES_loader (const(int)* a00) {
  *cast(void**)&glVertex4xvOES_Z = glbindGetProcAddress(`glVertex4xvOES`);
  if (*cast(void**)&glVertex4xvOES_Z is null) assert(0, `OpenGL function 'glVertex4xvOES' not found!`);
  glVertex4xvOES_Z(a00,);
}
alias glQueryMatrixxOES = glQueryMatrixxOES_Z;
__gshared glbfn_glQueryMatrixxOES glQueryMatrixxOES_Z = function uint (int* a00,int* a01) {
  return glbfn_glQueryMatrixxOES_loader(a00,a01,);
};
private uint glbfn_glQueryMatrixxOES_loader (int* a00,int* a01) {
  *cast(void**)&glQueryMatrixxOES_Z = glbindGetProcAddress(`glQueryMatrixxOES`);
  if (*cast(void**)&glQueryMatrixxOES_Z is null) assert(0, `OpenGL function 'glQueryMatrixxOES' not found!`);
  return glQueryMatrixxOES_Z(a00,a01,);
}
alias glClearDepthfOES = glClearDepthfOES_Z;
__gshared glbfn_glClearDepthfOES glClearDepthfOES_Z = function void (float a00) {
  glbfn_glClearDepthfOES_loader(a00,);
};
private void glbfn_glClearDepthfOES_loader (float a00) {
  *cast(void**)&glClearDepthfOES_Z = glbindGetProcAddress(`glClearDepthfOES`);
  if (*cast(void**)&glClearDepthfOES_Z is null) assert(0, `OpenGL function 'glClearDepthfOES' not found!`);
  glClearDepthfOES_Z(a00,);
}
alias glClipPlanefOES = glClipPlanefOES_Z;
__gshared glbfn_glClipPlanefOES glClipPlanefOES_Z = function void (uint a00,const(float)* a01) {
  glbfn_glClipPlanefOES_loader(a00,a01,);
};
private void glbfn_glClipPlanefOES_loader (uint a00,const(float)* a01) {
  *cast(void**)&glClipPlanefOES_Z = glbindGetProcAddress(`glClipPlanefOES`);
  if (*cast(void**)&glClipPlanefOES_Z is null) assert(0, `OpenGL function 'glClipPlanefOES' not found!`);
  glClipPlanefOES_Z(a00,a01,);
}
alias glDepthRangefOES = glDepthRangefOES_Z;
__gshared glbfn_glDepthRangefOES glDepthRangefOES_Z = function void (float a00,float a01) {
  glbfn_glDepthRangefOES_loader(a00,a01,);
};
private void glbfn_glDepthRangefOES_loader (float a00,float a01) {
  *cast(void**)&glDepthRangefOES_Z = glbindGetProcAddress(`glDepthRangefOES`);
  if (*cast(void**)&glDepthRangefOES_Z is null) assert(0, `OpenGL function 'glDepthRangefOES' not found!`);
  glDepthRangefOES_Z(a00,a01,);
}
alias glFrustumfOES = glFrustumfOES_Z;
__gshared glbfn_glFrustumfOES glFrustumfOES_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05) {
  glbfn_glFrustumfOES_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glFrustumfOES_loader (float a00,float a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glFrustumfOES_Z = glbindGetProcAddress(`glFrustumfOES`);
  if (*cast(void**)&glFrustumfOES_Z is null) assert(0, `OpenGL function 'glFrustumfOES' not found!`);
  glFrustumfOES_Z(a00,a01,a02,a03,a04,a05,);
}
alias glGetClipPlanefOES = glGetClipPlanefOES_Z;
__gshared glbfn_glGetClipPlanefOES glGetClipPlanefOES_Z = function void (uint a00,float* a01) {
  glbfn_glGetClipPlanefOES_loader(a00,a01,);
};
private void glbfn_glGetClipPlanefOES_loader (uint a00,float* a01) {
  *cast(void**)&glGetClipPlanefOES_Z = glbindGetProcAddress(`glGetClipPlanefOES`);
  if (*cast(void**)&glGetClipPlanefOES_Z is null) assert(0, `OpenGL function 'glGetClipPlanefOES' not found!`);
  glGetClipPlanefOES_Z(a00,a01,);
}
alias glOrthofOES = glOrthofOES_Z;
__gshared glbfn_glOrthofOES glOrthofOES_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05) {
  glbfn_glOrthofOES_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glOrthofOES_loader (float a00,float a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glOrthofOES_Z = glbindGetProcAddress(`glOrthofOES`);
  if (*cast(void**)&glOrthofOES_Z is null) assert(0, `OpenGL function 'glOrthofOES' not found!`);
  glOrthofOES_Z(a00,a01,a02,a03,a04,a05,);
}
alias glFramebufferTextureMultiviewOVR = glFramebufferTextureMultiviewOVR_Z;
__gshared glbfn_glFramebufferTextureMultiviewOVR glFramebufferTextureMultiviewOVR_Z = function void (uint a00,uint a01,uint a02,int a03,int a04,int a05) {
  glbfn_glFramebufferTextureMultiviewOVR_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glFramebufferTextureMultiviewOVR_loader (uint a00,uint a01,uint a02,int a03,int a04,int a05) {
  *cast(void**)&glFramebufferTextureMultiviewOVR_Z = glbindGetProcAddress(`glFramebufferTextureMultiviewOVR`);
  if (*cast(void**)&glFramebufferTextureMultiviewOVR_Z is null) assert(0, `OpenGL function 'glFramebufferTextureMultiviewOVR' not found!`);
  glFramebufferTextureMultiviewOVR_Z(a00,a01,a02,a03,a04,a05,);
}
alias glHintPGI = glHintPGI_Z;
__gshared glbfn_glHintPGI glHintPGI_Z = function void (uint a00,int a01) {
  glbfn_glHintPGI_loader(a00,a01,);
};
private void glbfn_glHintPGI_loader (uint a00,int a01) {
  *cast(void**)&glHintPGI_Z = glbindGetProcAddress(`glHintPGI`);
  if (*cast(void**)&glHintPGI_Z is null) assert(0, `OpenGL function 'glHintPGI' not found!`);
  glHintPGI_Z(a00,a01,);
}
alias glDetailTexFuncSGIS = glDetailTexFuncSGIS_Z;
__gshared glbfn_glDetailTexFuncSGIS glDetailTexFuncSGIS_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glDetailTexFuncSGIS_loader(a00,a01,a02,);
};
private void glbfn_glDetailTexFuncSGIS_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glDetailTexFuncSGIS_Z = glbindGetProcAddress(`glDetailTexFuncSGIS`);
  if (*cast(void**)&glDetailTexFuncSGIS_Z is null) assert(0, `OpenGL function 'glDetailTexFuncSGIS' not found!`);
  glDetailTexFuncSGIS_Z(a00,a01,a02,);
}
alias glGetDetailTexFuncSGIS = glGetDetailTexFuncSGIS_Z;
__gshared glbfn_glGetDetailTexFuncSGIS glGetDetailTexFuncSGIS_Z = function void (uint a00,float* a01) {
  glbfn_glGetDetailTexFuncSGIS_loader(a00,a01,);
};
private void glbfn_glGetDetailTexFuncSGIS_loader (uint a00,float* a01) {
  *cast(void**)&glGetDetailTexFuncSGIS_Z = glbindGetProcAddress(`glGetDetailTexFuncSGIS`);
  if (*cast(void**)&glGetDetailTexFuncSGIS_Z is null) assert(0, `OpenGL function 'glGetDetailTexFuncSGIS' not found!`);
  glGetDetailTexFuncSGIS_Z(a00,a01,);
}
alias glFogFuncSGIS = glFogFuncSGIS_Z;
__gshared glbfn_glFogFuncSGIS glFogFuncSGIS_Z = function void (int a00,const(float)* a01) {
  glbfn_glFogFuncSGIS_loader(a00,a01,);
};
private void glbfn_glFogFuncSGIS_loader (int a00,const(float)* a01) {
  *cast(void**)&glFogFuncSGIS_Z = glbindGetProcAddress(`glFogFuncSGIS`);
  if (*cast(void**)&glFogFuncSGIS_Z is null) assert(0, `OpenGL function 'glFogFuncSGIS' not found!`);
  glFogFuncSGIS_Z(a00,a01,);
}
alias glGetFogFuncSGIS = glGetFogFuncSGIS_Z;
__gshared glbfn_glGetFogFuncSGIS glGetFogFuncSGIS_Z = function void (float* a00) {
  glbfn_glGetFogFuncSGIS_loader(a00,);
};
private void glbfn_glGetFogFuncSGIS_loader (float* a00) {
  *cast(void**)&glGetFogFuncSGIS_Z = glbindGetProcAddress(`glGetFogFuncSGIS`);
  if (*cast(void**)&glGetFogFuncSGIS_Z is null) assert(0, `OpenGL function 'glGetFogFuncSGIS' not found!`);
  glGetFogFuncSGIS_Z(a00,);
}
alias glSampleMaskSGIS = glSampleMaskSGIS_Z;
__gshared glbfn_glSampleMaskSGIS glSampleMaskSGIS_Z = function void (float a00,ubyte a01) {
  glbfn_glSampleMaskSGIS_loader(a00,a01,);
};
private void glbfn_glSampleMaskSGIS_loader (float a00,ubyte a01) {
  *cast(void**)&glSampleMaskSGIS_Z = glbindGetProcAddress(`glSampleMaskSGIS`);
  if (*cast(void**)&glSampleMaskSGIS_Z is null) assert(0, `OpenGL function 'glSampleMaskSGIS' not found!`);
  glSampleMaskSGIS_Z(a00,a01,);
}
alias glSamplePatternSGIS = glSamplePatternSGIS_Z;
__gshared glbfn_glSamplePatternSGIS glSamplePatternSGIS_Z = function void (uint a00) {
  glbfn_glSamplePatternSGIS_loader(a00,);
};
private void glbfn_glSamplePatternSGIS_loader (uint a00) {
  *cast(void**)&glSamplePatternSGIS_Z = glbindGetProcAddress(`glSamplePatternSGIS`);
  if (*cast(void**)&glSamplePatternSGIS_Z is null) assert(0, `OpenGL function 'glSamplePatternSGIS' not found!`);
  glSamplePatternSGIS_Z(a00,);
}
alias glPixelTexGenParameteriSGIS = glPixelTexGenParameteriSGIS_Z;
__gshared glbfn_glPixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS_Z = function void (uint a00,int a01) {
  glbfn_glPixelTexGenParameteriSGIS_loader(a00,a01,);
};
private void glbfn_glPixelTexGenParameteriSGIS_loader (uint a00,int a01) {
  *cast(void**)&glPixelTexGenParameteriSGIS_Z = glbindGetProcAddress(`glPixelTexGenParameteriSGIS`);
  if (*cast(void**)&glPixelTexGenParameteriSGIS_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameteriSGIS' not found!`);
  glPixelTexGenParameteriSGIS_Z(a00,a01,);
}
alias glPixelTexGenParameterivSGIS = glPixelTexGenParameterivSGIS_Z;
__gshared glbfn_glPixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS_Z = function void (uint a00,const(int)* a01) {
  glbfn_glPixelTexGenParameterivSGIS_loader(a00,a01,);
};
private void glbfn_glPixelTexGenParameterivSGIS_loader (uint a00,const(int)* a01) {
  *cast(void**)&glPixelTexGenParameterivSGIS_Z = glbindGetProcAddress(`glPixelTexGenParameterivSGIS`);
  if (*cast(void**)&glPixelTexGenParameterivSGIS_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameterivSGIS' not found!`);
  glPixelTexGenParameterivSGIS_Z(a00,a01,);
}
alias glPixelTexGenParameterfSGIS = glPixelTexGenParameterfSGIS_Z;
__gshared glbfn_glPixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS_Z = function void (uint a00,float a01) {
  glbfn_glPixelTexGenParameterfSGIS_loader(a00,a01,);
};
private void glbfn_glPixelTexGenParameterfSGIS_loader (uint a00,float a01) {
  *cast(void**)&glPixelTexGenParameterfSGIS_Z = glbindGetProcAddress(`glPixelTexGenParameterfSGIS`);
  if (*cast(void**)&glPixelTexGenParameterfSGIS_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameterfSGIS' not found!`);
  glPixelTexGenParameterfSGIS_Z(a00,a01,);
}
alias glPixelTexGenParameterfvSGIS = glPixelTexGenParameterfvSGIS_Z;
__gshared glbfn_glPixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS_Z = function void (uint a00,const(float)* a01) {
  glbfn_glPixelTexGenParameterfvSGIS_loader(a00,a01,);
};
private void glbfn_glPixelTexGenParameterfvSGIS_loader (uint a00,const(float)* a01) {
  *cast(void**)&glPixelTexGenParameterfvSGIS_Z = glbindGetProcAddress(`glPixelTexGenParameterfvSGIS`);
  if (*cast(void**)&glPixelTexGenParameterfvSGIS_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameterfvSGIS' not found!`);
  glPixelTexGenParameterfvSGIS_Z(a00,a01,);
}
alias glGetPixelTexGenParameterivSGIS = glGetPixelTexGenParameterivSGIS_Z;
__gshared glbfn_glGetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS_Z = function void (uint a00,int* a01) {
  glbfn_glGetPixelTexGenParameterivSGIS_loader(a00,a01,);
};
private void glbfn_glGetPixelTexGenParameterivSGIS_loader (uint a00,int* a01) {
  *cast(void**)&glGetPixelTexGenParameterivSGIS_Z = glbindGetProcAddress(`glGetPixelTexGenParameterivSGIS`);
  if (*cast(void**)&glGetPixelTexGenParameterivSGIS_Z is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterivSGIS' not found!`);
  glGetPixelTexGenParameterivSGIS_Z(a00,a01,);
}
alias glGetPixelTexGenParameterfvSGIS = glGetPixelTexGenParameterfvSGIS_Z;
__gshared glbfn_glGetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS_Z = function void (uint a00,float* a01) {
  glbfn_glGetPixelTexGenParameterfvSGIS_loader(a00,a01,);
};
private void glbfn_glGetPixelTexGenParameterfvSGIS_loader (uint a00,float* a01) {
  *cast(void**)&glGetPixelTexGenParameterfvSGIS_Z = glbindGetProcAddress(`glGetPixelTexGenParameterfvSGIS`);
  if (*cast(void**)&glGetPixelTexGenParameterfvSGIS_Z is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterfvSGIS' not found!`);
  glGetPixelTexGenParameterfvSGIS_Z(a00,a01,);
}
alias glPointParameterfSGIS = glPointParameterfSGIS_Z;
__gshared glbfn_glPointParameterfSGIS glPointParameterfSGIS_Z = function void (uint a00,float a01) {
  glbfn_glPointParameterfSGIS_loader(a00,a01,);
};
private void glbfn_glPointParameterfSGIS_loader (uint a00,float a01) {
  *cast(void**)&glPointParameterfSGIS_Z = glbindGetProcAddress(`glPointParameterfSGIS`);
  if (*cast(void**)&glPointParameterfSGIS_Z is null) assert(0, `OpenGL function 'glPointParameterfSGIS' not found!`);
  glPointParameterfSGIS_Z(a00,a01,);
}
alias glPointParameterfvSGIS = glPointParameterfvSGIS_Z;
__gshared glbfn_glPointParameterfvSGIS glPointParameterfvSGIS_Z = function void (uint a00,const(float)* a01) {
  glbfn_glPointParameterfvSGIS_loader(a00,a01,);
};
private void glbfn_glPointParameterfvSGIS_loader (uint a00,const(float)* a01) {
  *cast(void**)&glPointParameterfvSGIS_Z = glbindGetProcAddress(`glPointParameterfvSGIS`);
  if (*cast(void**)&glPointParameterfvSGIS_Z is null) assert(0, `OpenGL function 'glPointParameterfvSGIS' not found!`);
  glPointParameterfvSGIS_Z(a00,a01,);
}
alias glSharpenTexFuncSGIS = glSharpenTexFuncSGIS_Z;
__gshared glbfn_glSharpenTexFuncSGIS glSharpenTexFuncSGIS_Z = function void (uint a00,int a01,const(float)* a02) {
  glbfn_glSharpenTexFuncSGIS_loader(a00,a01,a02,);
};
private void glbfn_glSharpenTexFuncSGIS_loader (uint a00,int a01,const(float)* a02) {
  *cast(void**)&glSharpenTexFuncSGIS_Z = glbindGetProcAddress(`glSharpenTexFuncSGIS`);
  if (*cast(void**)&glSharpenTexFuncSGIS_Z is null) assert(0, `OpenGL function 'glSharpenTexFuncSGIS' not found!`);
  glSharpenTexFuncSGIS_Z(a00,a01,a02,);
}
alias glGetSharpenTexFuncSGIS = glGetSharpenTexFuncSGIS_Z;
__gshared glbfn_glGetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS_Z = function void (uint a00,float* a01) {
  glbfn_glGetSharpenTexFuncSGIS_loader(a00,a01,);
};
private void glbfn_glGetSharpenTexFuncSGIS_loader (uint a00,float* a01) {
  *cast(void**)&glGetSharpenTexFuncSGIS_Z = glbindGetProcAddress(`glGetSharpenTexFuncSGIS`);
  if (*cast(void**)&glGetSharpenTexFuncSGIS_Z is null) assert(0, `OpenGL function 'glGetSharpenTexFuncSGIS' not found!`);
  glGetSharpenTexFuncSGIS_Z(a00,a01,);
}
alias glTexImage4DSGIS = glTexImage4DSGIS_Z;
__gshared glbfn_glTexImage4DSGIS glTexImage4DSGIS_Z = function void (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  glbfn_glTexImage4DSGIS_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glTexImage4DSGIS_loader (uint a00,int a01,uint a02,int a03,int a04,int a05,int a06,int a07,uint a08,uint a09,const(void)* a10) {
  *cast(void**)&glTexImage4DSGIS_Z = glbindGetProcAddress(`glTexImage4DSGIS`);
  if (*cast(void**)&glTexImage4DSGIS_Z is null) assert(0, `OpenGL function 'glTexImage4DSGIS' not found!`);
  glTexImage4DSGIS_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glTexSubImage4DSGIS = glTexSubImage4DSGIS_Z;
__gshared glbfn_glTexSubImage4DSGIS glTexSubImage4DSGIS_Z = function void (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09,uint a10,uint a11,const(void)* a12) {
  glbfn_glTexSubImage4DSGIS_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
};
private void glbfn_glTexSubImage4DSGIS_loader (uint a00,int a01,int a02,int a03,int a04,int a05,int a06,int a07,int a08,int a09,uint a10,uint a11,const(void)* a12) {
  *cast(void**)&glTexSubImage4DSGIS_Z = glbindGetProcAddress(`glTexSubImage4DSGIS`);
  if (*cast(void**)&glTexSubImage4DSGIS_Z is null) assert(0, `OpenGL function 'glTexSubImage4DSGIS' not found!`);
  glTexSubImage4DSGIS_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
}
alias glTextureColorMaskSGIS = glTextureColorMaskSGIS_Z;
__gshared glbfn_glTextureColorMaskSGIS glTextureColorMaskSGIS_Z = function void (ubyte a00,ubyte a01,ubyte a02,ubyte a03) {
  glbfn_glTextureColorMaskSGIS_loader(a00,a01,a02,a03,);
};
private void glbfn_glTextureColorMaskSGIS_loader (ubyte a00,ubyte a01,ubyte a02,ubyte a03) {
  *cast(void**)&glTextureColorMaskSGIS_Z = glbindGetProcAddress(`glTextureColorMaskSGIS`);
  if (*cast(void**)&glTextureColorMaskSGIS_Z is null) assert(0, `OpenGL function 'glTextureColorMaskSGIS' not found!`);
  glTextureColorMaskSGIS_Z(a00,a01,a02,a03,);
}
alias glGetTexFilterFuncSGIS = glGetTexFilterFuncSGIS_Z;
__gshared glbfn_glGetTexFilterFuncSGIS glGetTexFilterFuncSGIS_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetTexFilterFuncSGIS_loader(a00,a01,a02,);
};
private void glbfn_glGetTexFilterFuncSGIS_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetTexFilterFuncSGIS_Z = glbindGetProcAddress(`glGetTexFilterFuncSGIS`);
  if (*cast(void**)&glGetTexFilterFuncSGIS_Z is null) assert(0, `OpenGL function 'glGetTexFilterFuncSGIS' not found!`);
  glGetTexFilterFuncSGIS_Z(a00,a01,a02,);
}
alias glTexFilterFuncSGIS = glTexFilterFuncSGIS_Z;
__gshared glbfn_glTexFilterFuncSGIS glTexFilterFuncSGIS_Z = function void (uint a00,uint a01,int a02,const(float)* a03) {
  glbfn_glTexFilterFuncSGIS_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexFilterFuncSGIS_loader (uint a00,uint a01,int a02,const(float)* a03) {
  *cast(void**)&glTexFilterFuncSGIS_Z = glbindGetProcAddress(`glTexFilterFuncSGIS`);
  if (*cast(void**)&glTexFilterFuncSGIS_Z is null) assert(0, `OpenGL function 'glTexFilterFuncSGIS' not found!`);
  glTexFilterFuncSGIS_Z(a00,a01,a02,a03,);
}
alias glAsyncMarkerSGIX = glAsyncMarkerSGIX_Z;
__gshared glbfn_glAsyncMarkerSGIX glAsyncMarkerSGIX_Z = function void (uint a00) {
  glbfn_glAsyncMarkerSGIX_loader(a00,);
};
private void glbfn_glAsyncMarkerSGIX_loader (uint a00) {
  *cast(void**)&glAsyncMarkerSGIX_Z = glbindGetProcAddress(`glAsyncMarkerSGIX`);
  if (*cast(void**)&glAsyncMarkerSGIX_Z is null) assert(0, `OpenGL function 'glAsyncMarkerSGIX' not found!`);
  glAsyncMarkerSGIX_Z(a00,);
}
alias glFinishAsyncSGIX = glFinishAsyncSGIX_Z;
__gshared glbfn_glFinishAsyncSGIX glFinishAsyncSGIX_Z = function int (uint* a00) {
  return glbfn_glFinishAsyncSGIX_loader(a00,);
};
private int glbfn_glFinishAsyncSGIX_loader (uint* a00) {
  *cast(void**)&glFinishAsyncSGIX_Z = glbindGetProcAddress(`glFinishAsyncSGIX`);
  if (*cast(void**)&glFinishAsyncSGIX_Z is null) assert(0, `OpenGL function 'glFinishAsyncSGIX' not found!`);
  return glFinishAsyncSGIX_Z(a00,);
}
alias glPollAsyncSGIX = glPollAsyncSGIX_Z;
__gshared glbfn_glPollAsyncSGIX glPollAsyncSGIX_Z = function int (uint* a00) {
  return glbfn_glPollAsyncSGIX_loader(a00,);
};
private int glbfn_glPollAsyncSGIX_loader (uint* a00) {
  *cast(void**)&glPollAsyncSGIX_Z = glbindGetProcAddress(`glPollAsyncSGIX`);
  if (*cast(void**)&glPollAsyncSGIX_Z is null) assert(0, `OpenGL function 'glPollAsyncSGIX' not found!`);
  return glPollAsyncSGIX_Z(a00,);
}
alias glGenAsyncMarkersSGIX = glGenAsyncMarkersSGIX_Z;
__gshared glbfn_glGenAsyncMarkersSGIX glGenAsyncMarkersSGIX_Z = function uint (int a00) {
  return glbfn_glGenAsyncMarkersSGIX_loader(a00,);
};
private uint glbfn_glGenAsyncMarkersSGIX_loader (int a00) {
  *cast(void**)&glGenAsyncMarkersSGIX_Z = glbindGetProcAddress(`glGenAsyncMarkersSGIX`);
  if (*cast(void**)&glGenAsyncMarkersSGIX_Z is null) assert(0, `OpenGL function 'glGenAsyncMarkersSGIX' not found!`);
  return glGenAsyncMarkersSGIX_Z(a00,);
}
alias glDeleteAsyncMarkersSGIX = glDeleteAsyncMarkersSGIX_Z;
__gshared glbfn_glDeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX_Z = function void (uint a00,int a01) {
  glbfn_glDeleteAsyncMarkersSGIX_loader(a00,a01,);
};
private void glbfn_glDeleteAsyncMarkersSGIX_loader (uint a00,int a01) {
  *cast(void**)&glDeleteAsyncMarkersSGIX_Z = glbindGetProcAddress(`glDeleteAsyncMarkersSGIX`);
  if (*cast(void**)&glDeleteAsyncMarkersSGIX_Z is null) assert(0, `OpenGL function 'glDeleteAsyncMarkersSGIX' not found!`);
  glDeleteAsyncMarkersSGIX_Z(a00,a01,);
}
alias glIsAsyncMarkerSGIX = glIsAsyncMarkerSGIX_Z;
__gshared glbfn_glIsAsyncMarkerSGIX glIsAsyncMarkerSGIX_Z = function ubyte (uint a00) {
  return glbfn_glIsAsyncMarkerSGIX_loader(a00,);
};
private ubyte glbfn_glIsAsyncMarkerSGIX_loader (uint a00) {
  *cast(void**)&glIsAsyncMarkerSGIX_Z = glbindGetProcAddress(`glIsAsyncMarkerSGIX`);
  if (*cast(void**)&glIsAsyncMarkerSGIX_Z is null) assert(0, `OpenGL function 'glIsAsyncMarkerSGIX' not found!`);
  return glIsAsyncMarkerSGIX_Z(a00,);
}
alias glFlushRasterSGIX = glFlushRasterSGIX_Z;
__gshared glbfn_glFlushRasterSGIX glFlushRasterSGIX_Z = function void () {
  glbfn_glFlushRasterSGIX_loader();
};
private void glbfn_glFlushRasterSGIX_loader () {
  *cast(void**)&glFlushRasterSGIX_Z = glbindGetProcAddress(`glFlushRasterSGIX`);
  if (*cast(void**)&glFlushRasterSGIX_Z is null) assert(0, `OpenGL function 'glFlushRasterSGIX' not found!`);
  glFlushRasterSGIX_Z();
}
alias glFragmentColorMaterialSGIX = glFragmentColorMaterialSGIX_Z;
__gshared glbfn_glFragmentColorMaterialSGIX glFragmentColorMaterialSGIX_Z = function void (uint a00,uint a01) {
  glbfn_glFragmentColorMaterialSGIX_loader(a00,a01,);
};
private void glbfn_glFragmentColorMaterialSGIX_loader (uint a00,uint a01) {
  *cast(void**)&glFragmentColorMaterialSGIX_Z = glbindGetProcAddress(`glFragmentColorMaterialSGIX`);
  if (*cast(void**)&glFragmentColorMaterialSGIX_Z is null) assert(0, `OpenGL function 'glFragmentColorMaterialSGIX' not found!`);
  glFragmentColorMaterialSGIX_Z(a00,a01,);
}
alias glFragmentLightfSGIX = glFragmentLightfSGIX_Z;
__gshared glbfn_glFragmentLightfSGIX glFragmentLightfSGIX_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glFragmentLightfSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentLightfSGIX_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glFragmentLightfSGIX_Z = glbindGetProcAddress(`glFragmentLightfSGIX`);
  if (*cast(void**)&glFragmentLightfSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightfSGIX' not found!`);
  glFragmentLightfSGIX_Z(a00,a01,a02,);
}
alias glFragmentLightfvSGIX = glFragmentLightfvSGIX_Z;
__gshared glbfn_glFragmentLightfvSGIX glFragmentLightfvSGIX_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glFragmentLightfvSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentLightfvSGIX_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glFragmentLightfvSGIX_Z = glbindGetProcAddress(`glFragmentLightfvSGIX`);
  if (*cast(void**)&glFragmentLightfvSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightfvSGIX' not found!`);
  glFragmentLightfvSGIX_Z(a00,a01,a02,);
}
alias glFragmentLightiSGIX = glFragmentLightiSGIX_Z;
__gshared glbfn_glFragmentLightiSGIX glFragmentLightiSGIX_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glFragmentLightiSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentLightiSGIX_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glFragmentLightiSGIX_Z = glbindGetProcAddress(`glFragmentLightiSGIX`);
  if (*cast(void**)&glFragmentLightiSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightiSGIX' not found!`);
  glFragmentLightiSGIX_Z(a00,a01,a02,);
}
alias glFragmentLightivSGIX = glFragmentLightivSGIX_Z;
__gshared glbfn_glFragmentLightivSGIX glFragmentLightivSGIX_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glFragmentLightivSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentLightivSGIX_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glFragmentLightivSGIX_Z = glbindGetProcAddress(`glFragmentLightivSGIX`);
  if (*cast(void**)&glFragmentLightivSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightivSGIX' not found!`);
  glFragmentLightivSGIX_Z(a00,a01,a02,);
}
alias glFragmentLightModelfSGIX = glFragmentLightModelfSGIX_Z;
__gshared glbfn_glFragmentLightModelfSGIX glFragmentLightModelfSGIX_Z = function void (uint a00,float a01) {
  glbfn_glFragmentLightModelfSGIX_loader(a00,a01,);
};
private void glbfn_glFragmentLightModelfSGIX_loader (uint a00,float a01) {
  *cast(void**)&glFragmentLightModelfSGIX_Z = glbindGetProcAddress(`glFragmentLightModelfSGIX`);
  if (*cast(void**)&glFragmentLightModelfSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightModelfSGIX' not found!`);
  glFragmentLightModelfSGIX_Z(a00,a01,);
}
alias glFragmentLightModelfvSGIX = glFragmentLightModelfvSGIX_Z;
__gshared glbfn_glFragmentLightModelfvSGIX glFragmentLightModelfvSGIX_Z = function void (uint a00,const(float)* a01) {
  glbfn_glFragmentLightModelfvSGIX_loader(a00,a01,);
};
private void glbfn_glFragmentLightModelfvSGIX_loader (uint a00,const(float)* a01) {
  *cast(void**)&glFragmentLightModelfvSGIX_Z = glbindGetProcAddress(`glFragmentLightModelfvSGIX`);
  if (*cast(void**)&glFragmentLightModelfvSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightModelfvSGIX' not found!`);
  glFragmentLightModelfvSGIX_Z(a00,a01,);
}
alias glFragmentLightModeliSGIX = glFragmentLightModeliSGIX_Z;
__gshared glbfn_glFragmentLightModeliSGIX glFragmentLightModeliSGIX_Z = function void (uint a00,int a01) {
  glbfn_glFragmentLightModeliSGIX_loader(a00,a01,);
};
private void glbfn_glFragmentLightModeliSGIX_loader (uint a00,int a01) {
  *cast(void**)&glFragmentLightModeliSGIX_Z = glbindGetProcAddress(`glFragmentLightModeliSGIX`);
  if (*cast(void**)&glFragmentLightModeliSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightModeliSGIX' not found!`);
  glFragmentLightModeliSGIX_Z(a00,a01,);
}
alias glFragmentLightModelivSGIX = glFragmentLightModelivSGIX_Z;
__gshared glbfn_glFragmentLightModelivSGIX glFragmentLightModelivSGIX_Z = function void (uint a00,const(int)* a01) {
  glbfn_glFragmentLightModelivSGIX_loader(a00,a01,);
};
private void glbfn_glFragmentLightModelivSGIX_loader (uint a00,const(int)* a01) {
  *cast(void**)&glFragmentLightModelivSGIX_Z = glbindGetProcAddress(`glFragmentLightModelivSGIX`);
  if (*cast(void**)&glFragmentLightModelivSGIX_Z is null) assert(0, `OpenGL function 'glFragmentLightModelivSGIX' not found!`);
  glFragmentLightModelivSGIX_Z(a00,a01,);
}
alias glFragmentMaterialfSGIX = glFragmentMaterialfSGIX_Z;
__gshared glbfn_glFragmentMaterialfSGIX glFragmentMaterialfSGIX_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glFragmentMaterialfSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentMaterialfSGIX_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glFragmentMaterialfSGIX_Z = glbindGetProcAddress(`glFragmentMaterialfSGIX`);
  if (*cast(void**)&glFragmentMaterialfSGIX_Z is null) assert(0, `OpenGL function 'glFragmentMaterialfSGIX' not found!`);
  glFragmentMaterialfSGIX_Z(a00,a01,a02,);
}
alias glFragmentMaterialfvSGIX = glFragmentMaterialfvSGIX_Z;
__gshared glbfn_glFragmentMaterialfvSGIX glFragmentMaterialfvSGIX_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glFragmentMaterialfvSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentMaterialfvSGIX_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glFragmentMaterialfvSGIX_Z = glbindGetProcAddress(`glFragmentMaterialfvSGIX`);
  if (*cast(void**)&glFragmentMaterialfvSGIX_Z is null) assert(0, `OpenGL function 'glFragmentMaterialfvSGIX' not found!`);
  glFragmentMaterialfvSGIX_Z(a00,a01,a02,);
}
alias glFragmentMaterialiSGIX = glFragmentMaterialiSGIX_Z;
__gshared glbfn_glFragmentMaterialiSGIX glFragmentMaterialiSGIX_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glFragmentMaterialiSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentMaterialiSGIX_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glFragmentMaterialiSGIX_Z = glbindGetProcAddress(`glFragmentMaterialiSGIX`);
  if (*cast(void**)&glFragmentMaterialiSGIX_Z is null) assert(0, `OpenGL function 'glFragmentMaterialiSGIX' not found!`);
  glFragmentMaterialiSGIX_Z(a00,a01,a02,);
}
alias glFragmentMaterialivSGIX = glFragmentMaterialivSGIX_Z;
__gshared glbfn_glFragmentMaterialivSGIX glFragmentMaterialivSGIX_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glFragmentMaterialivSGIX_loader(a00,a01,a02,);
};
private void glbfn_glFragmentMaterialivSGIX_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glFragmentMaterialivSGIX_Z = glbindGetProcAddress(`glFragmentMaterialivSGIX`);
  if (*cast(void**)&glFragmentMaterialivSGIX_Z is null) assert(0, `OpenGL function 'glFragmentMaterialivSGIX' not found!`);
  glFragmentMaterialivSGIX_Z(a00,a01,a02,);
}
alias glGetFragmentLightfvSGIX = glGetFragmentLightfvSGIX_Z;
__gshared glbfn_glGetFragmentLightfvSGIX glGetFragmentLightfvSGIX_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetFragmentLightfvSGIX_loader(a00,a01,a02,);
};
private void glbfn_glGetFragmentLightfvSGIX_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetFragmentLightfvSGIX_Z = glbindGetProcAddress(`glGetFragmentLightfvSGIX`);
  if (*cast(void**)&glGetFragmentLightfvSGIX_Z is null) assert(0, `OpenGL function 'glGetFragmentLightfvSGIX' not found!`);
  glGetFragmentLightfvSGIX_Z(a00,a01,a02,);
}
alias glGetFragmentLightivSGIX = glGetFragmentLightivSGIX_Z;
__gshared glbfn_glGetFragmentLightivSGIX glGetFragmentLightivSGIX_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetFragmentLightivSGIX_loader(a00,a01,a02,);
};
private void glbfn_glGetFragmentLightivSGIX_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetFragmentLightivSGIX_Z = glbindGetProcAddress(`glGetFragmentLightivSGIX`);
  if (*cast(void**)&glGetFragmentLightivSGIX_Z is null) assert(0, `OpenGL function 'glGetFragmentLightivSGIX' not found!`);
  glGetFragmentLightivSGIX_Z(a00,a01,a02,);
}
alias glGetFragmentMaterialfvSGIX = glGetFragmentMaterialfvSGIX_Z;
__gshared glbfn_glGetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetFragmentMaterialfvSGIX_loader(a00,a01,a02,);
};
private void glbfn_glGetFragmentMaterialfvSGIX_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetFragmentMaterialfvSGIX_Z = glbindGetProcAddress(`glGetFragmentMaterialfvSGIX`);
  if (*cast(void**)&glGetFragmentMaterialfvSGIX_Z is null) assert(0, `OpenGL function 'glGetFragmentMaterialfvSGIX' not found!`);
  glGetFragmentMaterialfvSGIX_Z(a00,a01,a02,);
}
alias glGetFragmentMaterialivSGIX = glGetFragmentMaterialivSGIX_Z;
__gshared glbfn_glGetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetFragmentMaterialivSGIX_loader(a00,a01,a02,);
};
private void glbfn_glGetFragmentMaterialivSGIX_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetFragmentMaterialivSGIX_Z = glbindGetProcAddress(`glGetFragmentMaterialivSGIX`);
  if (*cast(void**)&glGetFragmentMaterialivSGIX_Z is null) assert(0, `OpenGL function 'glGetFragmentMaterialivSGIX' not found!`);
  glGetFragmentMaterialivSGIX_Z(a00,a01,a02,);
}
alias glLightEnviSGIX = glLightEnviSGIX_Z;
__gshared glbfn_glLightEnviSGIX glLightEnviSGIX_Z = function void (uint a00,int a01) {
  glbfn_glLightEnviSGIX_loader(a00,a01,);
};
private void glbfn_glLightEnviSGIX_loader (uint a00,int a01) {
  *cast(void**)&glLightEnviSGIX_Z = glbindGetProcAddress(`glLightEnviSGIX`);
  if (*cast(void**)&glLightEnviSGIX_Z is null) assert(0, `OpenGL function 'glLightEnviSGIX' not found!`);
  glLightEnviSGIX_Z(a00,a01,);
}
alias glFrameZoomSGIX = glFrameZoomSGIX_Z;
__gshared glbfn_glFrameZoomSGIX glFrameZoomSGIX_Z = function void (int a00) {
  glbfn_glFrameZoomSGIX_loader(a00,);
};
private void glbfn_glFrameZoomSGIX_loader (int a00) {
  *cast(void**)&glFrameZoomSGIX_Z = glbindGetProcAddress(`glFrameZoomSGIX`);
  if (*cast(void**)&glFrameZoomSGIX_Z is null) assert(0, `OpenGL function 'glFrameZoomSGIX' not found!`);
  glFrameZoomSGIX_Z(a00,);
}
alias glIglooInterfaceSGIX = glIglooInterfaceSGIX_Z;
__gshared glbfn_glIglooInterfaceSGIX glIglooInterfaceSGIX_Z = function void (uint a00,const(void)* a01) {
  glbfn_glIglooInterfaceSGIX_loader(a00,a01,);
};
private void glbfn_glIglooInterfaceSGIX_loader (uint a00,const(void)* a01) {
  *cast(void**)&glIglooInterfaceSGIX_Z = glbindGetProcAddress(`glIglooInterfaceSGIX`);
  if (*cast(void**)&glIglooInterfaceSGIX_Z is null) assert(0, `OpenGL function 'glIglooInterfaceSGIX' not found!`);
  glIglooInterfaceSGIX_Z(a00,a01,);
}
alias glGetInstrumentsSGIX = glGetInstrumentsSGIX_Z;
__gshared glbfn_glGetInstrumentsSGIX glGetInstrumentsSGIX_Z = function int () {
  return glbfn_glGetInstrumentsSGIX_loader();
};
private int glbfn_glGetInstrumentsSGIX_loader () {
  *cast(void**)&glGetInstrumentsSGIX_Z = glbindGetProcAddress(`glGetInstrumentsSGIX`);
  if (*cast(void**)&glGetInstrumentsSGIX_Z is null) assert(0, `OpenGL function 'glGetInstrumentsSGIX' not found!`);
  return glGetInstrumentsSGIX_Z();
}
alias glInstrumentsBufferSGIX = glInstrumentsBufferSGIX_Z;
__gshared glbfn_glInstrumentsBufferSGIX glInstrumentsBufferSGIX_Z = function void (int a00,int* a01) {
  glbfn_glInstrumentsBufferSGIX_loader(a00,a01,);
};
private void glbfn_glInstrumentsBufferSGIX_loader (int a00,int* a01) {
  *cast(void**)&glInstrumentsBufferSGIX_Z = glbindGetProcAddress(`glInstrumentsBufferSGIX`);
  if (*cast(void**)&glInstrumentsBufferSGIX_Z is null) assert(0, `OpenGL function 'glInstrumentsBufferSGIX' not found!`);
  glInstrumentsBufferSGIX_Z(a00,a01,);
}
alias glPollInstrumentsSGIX = glPollInstrumentsSGIX_Z;
__gshared glbfn_glPollInstrumentsSGIX glPollInstrumentsSGIX_Z = function int (int* a00) {
  return glbfn_glPollInstrumentsSGIX_loader(a00,);
};
private int glbfn_glPollInstrumentsSGIX_loader (int* a00) {
  *cast(void**)&glPollInstrumentsSGIX_Z = glbindGetProcAddress(`glPollInstrumentsSGIX`);
  if (*cast(void**)&glPollInstrumentsSGIX_Z is null) assert(0, `OpenGL function 'glPollInstrumentsSGIX' not found!`);
  return glPollInstrumentsSGIX_Z(a00,);
}
alias glReadInstrumentsSGIX = glReadInstrumentsSGIX_Z;
__gshared glbfn_glReadInstrumentsSGIX glReadInstrumentsSGIX_Z = function void (int a00) {
  glbfn_glReadInstrumentsSGIX_loader(a00,);
};
private void glbfn_glReadInstrumentsSGIX_loader (int a00) {
  *cast(void**)&glReadInstrumentsSGIX_Z = glbindGetProcAddress(`glReadInstrumentsSGIX`);
  if (*cast(void**)&glReadInstrumentsSGIX_Z is null) assert(0, `OpenGL function 'glReadInstrumentsSGIX' not found!`);
  glReadInstrumentsSGIX_Z(a00,);
}
alias glStartInstrumentsSGIX = glStartInstrumentsSGIX_Z;
__gshared glbfn_glStartInstrumentsSGIX glStartInstrumentsSGIX_Z = function void () {
  glbfn_glStartInstrumentsSGIX_loader();
};
private void glbfn_glStartInstrumentsSGIX_loader () {
  *cast(void**)&glStartInstrumentsSGIX_Z = glbindGetProcAddress(`glStartInstrumentsSGIX`);
  if (*cast(void**)&glStartInstrumentsSGIX_Z is null) assert(0, `OpenGL function 'glStartInstrumentsSGIX' not found!`);
  glStartInstrumentsSGIX_Z();
}
alias glStopInstrumentsSGIX = glStopInstrumentsSGIX_Z;
__gshared glbfn_glStopInstrumentsSGIX glStopInstrumentsSGIX_Z = function void (int a00) {
  glbfn_glStopInstrumentsSGIX_loader(a00,);
};
private void glbfn_glStopInstrumentsSGIX_loader (int a00) {
  *cast(void**)&glStopInstrumentsSGIX_Z = glbindGetProcAddress(`glStopInstrumentsSGIX`);
  if (*cast(void**)&glStopInstrumentsSGIX_Z is null) assert(0, `OpenGL function 'glStopInstrumentsSGIX' not found!`);
  glStopInstrumentsSGIX_Z(a00,);
}
alias glGetListParameterfvSGIX = glGetListParameterfvSGIX_Z;
__gshared glbfn_glGetListParameterfvSGIX glGetListParameterfvSGIX_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetListParameterfvSGIX_loader(a00,a01,a02,);
};
private void glbfn_glGetListParameterfvSGIX_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetListParameterfvSGIX_Z = glbindGetProcAddress(`glGetListParameterfvSGIX`);
  if (*cast(void**)&glGetListParameterfvSGIX_Z is null) assert(0, `OpenGL function 'glGetListParameterfvSGIX' not found!`);
  glGetListParameterfvSGIX_Z(a00,a01,a02,);
}
alias glGetListParameterivSGIX = glGetListParameterivSGIX_Z;
__gshared glbfn_glGetListParameterivSGIX glGetListParameterivSGIX_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetListParameterivSGIX_loader(a00,a01,a02,);
};
private void glbfn_glGetListParameterivSGIX_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetListParameterivSGIX_Z = glbindGetProcAddress(`glGetListParameterivSGIX`);
  if (*cast(void**)&glGetListParameterivSGIX_Z is null) assert(0, `OpenGL function 'glGetListParameterivSGIX' not found!`);
  glGetListParameterivSGIX_Z(a00,a01,a02,);
}
alias glListParameterfSGIX = glListParameterfSGIX_Z;
__gshared glbfn_glListParameterfSGIX glListParameterfSGIX_Z = function void (uint a00,uint a01,float a02) {
  glbfn_glListParameterfSGIX_loader(a00,a01,a02,);
};
private void glbfn_glListParameterfSGIX_loader (uint a00,uint a01,float a02) {
  *cast(void**)&glListParameterfSGIX_Z = glbindGetProcAddress(`glListParameterfSGIX`);
  if (*cast(void**)&glListParameterfSGIX_Z is null) assert(0, `OpenGL function 'glListParameterfSGIX' not found!`);
  glListParameterfSGIX_Z(a00,a01,a02,);
}
alias glListParameterfvSGIX = glListParameterfvSGIX_Z;
__gshared glbfn_glListParameterfvSGIX glListParameterfvSGIX_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glListParameterfvSGIX_loader(a00,a01,a02,);
};
private void glbfn_glListParameterfvSGIX_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glListParameterfvSGIX_Z = glbindGetProcAddress(`glListParameterfvSGIX`);
  if (*cast(void**)&glListParameterfvSGIX_Z is null) assert(0, `OpenGL function 'glListParameterfvSGIX' not found!`);
  glListParameterfvSGIX_Z(a00,a01,a02,);
}
alias glListParameteriSGIX = glListParameteriSGIX_Z;
__gshared glbfn_glListParameteriSGIX glListParameteriSGIX_Z = function void (uint a00,uint a01,int a02) {
  glbfn_glListParameteriSGIX_loader(a00,a01,a02,);
};
private void glbfn_glListParameteriSGIX_loader (uint a00,uint a01,int a02) {
  *cast(void**)&glListParameteriSGIX_Z = glbindGetProcAddress(`glListParameteriSGIX`);
  if (*cast(void**)&glListParameteriSGIX_Z is null) assert(0, `OpenGL function 'glListParameteriSGIX' not found!`);
  glListParameteriSGIX_Z(a00,a01,a02,);
}
alias glListParameterivSGIX = glListParameterivSGIX_Z;
__gshared glbfn_glListParameterivSGIX glListParameterivSGIX_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glListParameterivSGIX_loader(a00,a01,a02,);
};
private void glbfn_glListParameterivSGIX_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glListParameterivSGIX_Z = glbindGetProcAddress(`glListParameterivSGIX`);
  if (*cast(void**)&glListParameterivSGIX_Z is null) assert(0, `OpenGL function 'glListParameterivSGIX' not found!`);
  glListParameterivSGIX_Z(a00,a01,a02,);
}
alias glPixelTexGenSGIX = glPixelTexGenSGIX_Z;
__gshared glbfn_glPixelTexGenSGIX glPixelTexGenSGIX_Z = function void (uint a00) {
  glbfn_glPixelTexGenSGIX_loader(a00,);
};
private void glbfn_glPixelTexGenSGIX_loader (uint a00) {
  *cast(void**)&glPixelTexGenSGIX_Z = glbindGetProcAddress(`glPixelTexGenSGIX`);
  if (*cast(void**)&glPixelTexGenSGIX_Z is null) assert(0, `OpenGL function 'glPixelTexGenSGIX' not found!`);
  glPixelTexGenSGIX_Z(a00,);
}
alias glDeformationMap3dSGIX = glDeformationMap3dSGIX_Z;
__gshared glbfn_glDeformationMap3dSGIX glDeformationMap3dSGIX_Z = function void (uint a00,double a01,double a02,int a03,int a04,double a05,double a06,int a07,int a08,double a09,double a10,int a11,int a12,const(double)* a13) {
  glbfn_glDeformationMap3dSGIX_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,);
};
private void glbfn_glDeformationMap3dSGIX_loader (uint a00,double a01,double a02,int a03,int a04,double a05,double a06,int a07,int a08,double a09,double a10,int a11,int a12,const(double)* a13) {
  *cast(void**)&glDeformationMap3dSGIX_Z = glbindGetProcAddress(`glDeformationMap3dSGIX`);
  if (*cast(void**)&glDeformationMap3dSGIX_Z is null) assert(0, `OpenGL function 'glDeformationMap3dSGIX' not found!`);
  glDeformationMap3dSGIX_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,);
}
alias glDeformationMap3fSGIX = glDeformationMap3fSGIX_Z;
__gshared glbfn_glDeformationMap3fSGIX glDeformationMap3fSGIX_Z = function void (uint a00,float a01,float a02,int a03,int a04,float a05,float a06,int a07,int a08,float a09,float a10,int a11,int a12,const(float)* a13) {
  glbfn_glDeformationMap3fSGIX_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,);
};
private void glbfn_glDeformationMap3fSGIX_loader (uint a00,float a01,float a02,int a03,int a04,float a05,float a06,int a07,int a08,float a09,float a10,int a11,int a12,const(float)* a13) {
  *cast(void**)&glDeformationMap3fSGIX_Z = glbindGetProcAddress(`glDeformationMap3fSGIX`);
  if (*cast(void**)&glDeformationMap3fSGIX_Z is null) assert(0, `OpenGL function 'glDeformationMap3fSGIX' not found!`);
  glDeformationMap3fSGIX_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,);
}
alias glDeformSGIX = glDeformSGIX_Z;
__gshared glbfn_glDeformSGIX glDeformSGIX_Z = function void (uint a00) {
  glbfn_glDeformSGIX_loader(a00,);
};
private void glbfn_glDeformSGIX_loader (uint a00) {
  *cast(void**)&glDeformSGIX_Z = glbindGetProcAddress(`glDeformSGIX`);
  if (*cast(void**)&glDeformSGIX_Z is null) assert(0, `OpenGL function 'glDeformSGIX' not found!`);
  glDeformSGIX_Z(a00,);
}
alias glLoadIdentityDeformationMapSGIX = glLoadIdentityDeformationMapSGIX_Z;
__gshared glbfn_glLoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX_Z = function void (uint a00) {
  glbfn_glLoadIdentityDeformationMapSGIX_loader(a00,);
};
private void glbfn_glLoadIdentityDeformationMapSGIX_loader (uint a00) {
  *cast(void**)&glLoadIdentityDeformationMapSGIX_Z = glbindGetProcAddress(`glLoadIdentityDeformationMapSGIX`);
  if (*cast(void**)&glLoadIdentityDeformationMapSGIX_Z is null) assert(0, `OpenGL function 'glLoadIdentityDeformationMapSGIX' not found!`);
  glLoadIdentityDeformationMapSGIX_Z(a00,);
}
alias glReferencePlaneSGIX = glReferencePlaneSGIX_Z;
__gshared glbfn_glReferencePlaneSGIX glReferencePlaneSGIX_Z = function void (const(double)* a00) {
  glbfn_glReferencePlaneSGIX_loader(a00,);
};
private void glbfn_glReferencePlaneSGIX_loader (const(double)* a00) {
  *cast(void**)&glReferencePlaneSGIX_Z = glbindGetProcAddress(`glReferencePlaneSGIX`);
  if (*cast(void**)&glReferencePlaneSGIX_Z is null) assert(0, `OpenGL function 'glReferencePlaneSGIX' not found!`);
  glReferencePlaneSGIX_Z(a00,);
}
alias glSpriteParameterfSGIX = glSpriteParameterfSGIX_Z;
__gshared glbfn_glSpriteParameterfSGIX glSpriteParameterfSGIX_Z = function void (uint a00,float a01) {
  glbfn_glSpriteParameterfSGIX_loader(a00,a01,);
};
private void glbfn_glSpriteParameterfSGIX_loader (uint a00,float a01) {
  *cast(void**)&glSpriteParameterfSGIX_Z = glbindGetProcAddress(`glSpriteParameterfSGIX`);
  if (*cast(void**)&glSpriteParameterfSGIX_Z is null) assert(0, `OpenGL function 'glSpriteParameterfSGIX' not found!`);
  glSpriteParameterfSGIX_Z(a00,a01,);
}
alias glSpriteParameterfvSGIX = glSpriteParameterfvSGIX_Z;
__gshared glbfn_glSpriteParameterfvSGIX glSpriteParameterfvSGIX_Z = function void (uint a00,const(float)* a01) {
  glbfn_glSpriteParameterfvSGIX_loader(a00,a01,);
};
private void glbfn_glSpriteParameterfvSGIX_loader (uint a00,const(float)* a01) {
  *cast(void**)&glSpriteParameterfvSGIX_Z = glbindGetProcAddress(`glSpriteParameterfvSGIX`);
  if (*cast(void**)&glSpriteParameterfvSGIX_Z is null) assert(0, `OpenGL function 'glSpriteParameterfvSGIX' not found!`);
  glSpriteParameterfvSGIX_Z(a00,a01,);
}
alias glSpriteParameteriSGIX = glSpriteParameteriSGIX_Z;
__gshared glbfn_glSpriteParameteriSGIX glSpriteParameteriSGIX_Z = function void (uint a00,int a01) {
  glbfn_glSpriteParameteriSGIX_loader(a00,a01,);
};
private void glbfn_glSpriteParameteriSGIX_loader (uint a00,int a01) {
  *cast(void**)&glSpriteParameteriSGIX_Z = glbindGetProcAddress(`glSpriteParameteriSGIX`);
  if (*cast(void**)&glSpriteParameteriSGIX_Z is null) assert(0, `OpenGL function 'glSpriteParameteriSGIX' not found!`);
  glSpriteParameteriSGIX_Z(a00,a01,);
}
alias glSpriteParameterivSGIX = glSpriteParameterivSGIX_Z;
__gshared glbfn_glSpriteParameterivSGIX glSpriteParameterivSGIX_Z = function void (uint a00,const(int)* a01) {
  glbfn_glSpriteParameterivSGIX_loader(a00,a01,);
};
private void glbfn_glSpriteParameterivSGIX_loader (uint a00,const(int)* a01) {
  *cast(void**)&glSpriteParameterivSGIX_Z = glbindGetProcAddress(`glSpriteParameterivSGIX`);
  if (*cast(void**)&glSpriteParameterivSGIX_Z is null) assert(0, `OpenGL function 'glSpriteParameterivSGIX' not found!`);
  glSpriteParameterivSGIX_Z(a00,a01,);
}
alias glTagSampleBufferSGIX = glTagSampleBufferSGIX_Z;
__gshared glbfn_glTagSampleBufferSGIX glTagSampleBufferSGIX_Z = function void () {
  glbfn_glTagSampleBufferSGIX_loader();
};
private void glbfn_glTagSampleBufferSGIX_loader () {
  *cast(void**)&glTagSampleBufferSGIX_Z = glbindGetProcAddress(`glTagSampleBufferSGIX`);
  if (*cast(void**)&glTagSampleBufferSGIX_Z is null) assert(0, `OpenGL function 'glTagSampleBufferSGIX' not found!`);
  glTagSampleBufferSGIX_Z();
}
alias glColorTableSGI = glColorTableSGI_Z;
__gshared glbfn_glColorTableSGI glColorTableSGI_Z = function void (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  glbfn_glColorTableSGI_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glColorTableSGI_loader (uint a00,uint a01,int a02,uint a03,uint a04,const(void)* a05) {
  *cast(void**)&glColorTableSGI_Z = glbindGetProcAddress(`glColorTableSGI`);
  if (*cast(void**)&glColorTableSGI_Z is null) assert(0, `OpenGL function 'glColorTableSGI' not found!`);
  glColorTableSGI_Z(a00,a01,a02,a03,a04,a05,);
}
alias glColorTableParameterfvSGI = glColorTableParameterfvSGI_Z;
__gshared glbfn_glColorTableParameterfvSGI glColorTableParameterfvSGI_Z = function void (uint a00,uint a01,const(float)* a02) {
  glbfn_glColorTableParameterfvSGI_loader(a00,a01,a02,);
};
private void glbfn_glColorTableParameterfvSGI_loader (uint a00,uint a01,const(float)* a02) {
  *cast(void**)&glColorTableParameterfvSGI_Z = glbindGetProcAddress(`glColorTableParameterfvSGI`);
  if (*cast(void**)&glColorTableParameterfvSGI_Z is null) assert(0, `OpenGL function 'glColorTableParameterfvSGI' not found!`);
  glColorTableParameterfvSGI_Z(a00,a01,a02,);
}
alias glColorTableParameterivSGI = glColorTableParameterivSGI_Z;
__gshared glbfn_glColorTableParameterivSGI glColorTableParameterivSGI_Z = function void (uint a00,uint a01,const(int)* a02) {
  glbfn_glColorTableParameterivSGI_loader(a00,a01,a02,);
};
private void glbfn_glColorTableParameterivSGI_loader (uint a00,uint a01,const(int)* a02) {
  *cast(void**)&glColorTableParameterivSGI_Z = glbindGetProcAddress(`glColorTableParameterivSGI`);
  if (*cast(void**)&glColorTableParameterivSGI_Z is null) assert(0, `OpenGL function 'glColorTableParameterivSGI' not found!`);
  glColorTableParameterivSGI_Z(a00,a01,a02,);
}
alias glCopyColorTableSGI = glCopyColorTableSGI_Z;
__gshared glbfn_glCopyColorTableSGI glCopyColorTableSGI_Z = function void (uint a00,uint a01,int a02,int a03,int a04) {
  glbfn_glCopyColorTableSGI_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glCopyColorTableSGI_loader (uint a00,uint a01,int a02,int a03,int a04) {
  *cast(void**)&glCopyColorTableSGI_Z = glbindGetProcAddress(`glCopyColorTableSGI`);
  if (*cast(void**)&glCopyColorTableSGI_Z is null) assert(0, `OpenGL function 'glCopyColorTableSGI' not found!`);
  glCopyColorTableSGI_Z(a00,a01,a02,a03,a04,);
}
alias glGetColorTableSGI = glGetColorTableSGI_Z;
__gshared glbfn_glGetColorTableSGI glGetColorTableSGI_Z = function void (uint a00,uint a01,uint a02,void* a03) {
  glbfn_glGetColorTableSGI_loader(a00,a01,a02,a03,);
};
private void glbfn_glGetColorTableSGI_loader (uint a00,uint a01,uint a02,void* a03) {
  *cast(void**)&glGetColorTableSGI_Z = glbindGetProcAddress(`glGetColorTableSGI`);
  if (*cast(void**)&glGetColorTableSGI_Z is null) assert(0, `OpenGL function 'glGetColorTableSGI' not found!`);
  glGetColorTableSGI_Z(a00,a01,a02,a03,);
}
alias glGetColorTableParameterfvSGI = glGetColorTableParameterfvSGI_Z;
__gshared glbfn_glGetColorTableParameterfvSGI glGetColorTableParameterfvSGI_Z = function void (uint a00,uint a01,float* a02) {
  glbfn_glGetColorTableParameterfvSGI_loader(a00,a01,a02,);
};
private void glbfn_glGetColorTableParameterfvSGI_loader (uint a00,uint a01,float* a02) {
  *cast(void**)&glGetColorTableParameterfvSGI_Z = glbindGetProcAddress(`glGetColorTableParameterfvSGI`);
  if (*cast(void**)&glGetColorTableParameterfvSGI_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterfvSGI' not found!`);
  glGetColorTableParameterfvSGI_Z(a00,a01,a02,);
}
alias glGetColorTableParameterivSGI = glGetColorTableParameterivSGI_Z;
__gshared glbfn_glGetColorTableParameterivSGI glGetColorTableParameterivSGI_Z = function void (uint a00,uint a01,int* a02) {
  glbfn_glGetColorTableParameterivSGI_loader(a00,a01,a02,);
};
private void glbfn_glGetColorTableParameterivSGI_loader (uint a00,uint a01,int* a02) {
  *cast(void**)&glGetColorTableParameterivSGI_Z = glbindGetProcAddress(`glGetColorTableParameterivSGI`);
  if (*cast(void**)&glGetColorTableParameterivSGI_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterivSGI' not found!`);
  glGetColorTableParameterivSGI_Z(a00,a01,a02,);
}
alias glFinishTextureSUNX = glFinishTextureSUNX_Z;
__gshared glbfn_glFinishTextureSUNX glFinishTextureSUNX_Z = function void () {
  glbfn_glFinishTextureSUNX_loader();
};
private void glbfn_glFinishTextureSUNX_loader () {
  *cast(void**)&glFinishTextureSUNX_Z = glbindGetProcAddress(`glFinishTextureSUNX`);
  if (*cast(void**)&glFinishTextureSUNX_Z is null) assert(0, `OpenGL function 'glFinishTextureSUNX' not found!`);
  glFinishTextureSUNX_Z();
}
alias glGlobalAlphaFactorbSUN = glGlobalAlphaFactorbSUN_Z;
__gshared glbfn_glGlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN_Z = function void (byte a00) {
  glbfn_glGlobalAlphaFactorbSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactorbSUN_loader (byte a00) {
  *cast(void**)&glGlobalAlphaFactorbSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactorbSUN`);
  if (*cast(void**)&glGlobalAlphaFactorbSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorbSUN' not found!`);
  glGlobalAlphaFactorbSUN_Z(a00,);
}
alias glGlobalAlphaFactorsSUN = glGlobalAlphaFactorsSUN_Z;
__gshared glbfn_glGlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN_Z = function void (short a00) {
  glbfn_glGlobalAlphaFactorsSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactorsSUN_loader (short a00) {
  *cast(void**)&glGlobalAlphaFactorsSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactorsSUN`);
  if (*cast(void**)&glGlobalAlphaFactorsSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorsSUN' not found!`);
  glGlobalAlphaFactorsSUN_Z(a00,);
}
alias glGlobalAlphaFactoriSUN = glGlobalAlphaFactoriSUN_Z;
__gshared glbfn_glGlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN_Z = function void (int a00) {
  glbfn_glGlobalAlphaFactoriSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactoriSUN_loader (int a00) {
  *cast(void**)&glGlobalAlphaFactoriSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactoriSUN`);
  if (*cast(void**)&glGlobalAlphaFactoriSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactoriSUN' not found!`);
  glGlobalAlphaFactoriSUN_Z(a00,);
}
alias glGlobalAlphaFactorfSUN = glGlobalAlphaFactorfSUN_Z;
__gshared glbfn_glGlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN_Z = function void (float a00) {
  glbfn_glGlobalAlphaFactorfSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactorfSUN_loader (float a00) {
  *cast(void**)&glGlobalAlphaFactorfSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactorfSUN`);
  if (*cast(void**)&glGlobalAlphaFactorfSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorfSUN' not found!`);
  glGlobalAlphaFactorfSUN_Z(a00,);
}
alias glGlobalAlphaFactordSUN = glGlobalAlphaFactordSUN_Z;
__gshared glbfn_glGlobalAlphaFactordSUN glGlobalAlphaFactordSUN_Z = function void (double a00) {
  glbfn_glGlobalAlphaFactordSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactordSUN_loader (double a00) {
  *cast(void**)&glGlobalAlphaFactordSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactordSUN`);
  if (*cast(void**)&glGlobalAlphaFactordSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactordSUN' not found!`);
  glGlobalAlphaFactordSUN_Z(a00,);
}
alias glGlobalAlphaFactorubSUN = glGlobalAlphaFactorubSUN_Z;
__gshared glbfn_glGlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN_Z = function void (ubyte a00) {
  glbfn_glGlobalAlphaFactorubSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactorubSUN_loader (ubyte a00) {
  *cast(void**)&glGlobalAlphaFactorubSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactorubSUN`);
  if (*cast(void**)&glGlobalAlphaFactorubSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorubSUN' not found!`);
  glGlobalAlphaFactorubSUN_Z(a00,);
}
alias glGlobalAlphaFactorusSUN = glGlobalAlphaFactorusSUN_Z;
__gshared glbfn_glGlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN_Z = function void (ushort a00) {
  glbfn_glGlobalAlphaFactorusSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactorusSUN_loader (ushort a00) {
  *cast(void**)&glGlobalAlphaFactorusSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactorusSUN`);
  if (*cast(void**)&glGlobalAlphaFactorusSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorusSUN' not found!`);
  glGlobalAlphaFactorusSUN_Z(a00,);
}
alias glGlobalAlphaFactoruiSUN = glGlobalAlphaFactoruiSUN_Z;
__gshared glbfn_glGlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN_Z = function void (uint a00) {
  glbfn_glGlobalAlphaFactoruiSUN_loader(a00,);
};
private void glbfn_glGlobalAlphaFactoruiSUN_loader (uint a00) {
  *cast(void**)&glGlobalAlphaFactoruiSUN_Z = glbindGetProcAddress(`glGlobalAlphaFactoruiSUN`);
  if (*cast(void**)&glGlobalAlphaFactoruiSUN_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactoruiSUN' not found!`);
  glGlobalAlphaFactoruiSUN_Z(a00,);
}
alias glDrawMeshArraysSUN = glDrawMeshArraysSUN_Z;
__gshared glbfn_glDrawMeshArraysSUN glDrawMeshArraysSUN_Z = function void (uint a00,int a01,int a02,int a03) {
  glbfn_glDrawMeshArraysSUN_loader(a00,a01,a02,a03,);
};
private void glbfn_glDrawMeshArraysSUN_loader (uint a00,int a01,int a02,int a03) {
  *cast(void**)&glDrawMeshArraysSUN_Z = glbindGetProcAddress(`glDrawMeshArraysSUN`);
  if (*cast(void**)&glDrawMeshArraysSUN_Z is null) assert(0, `OpenGL function 'glDrawMeshArraysSUN' not found!`);
  glDrawMeshArraysSUN_Z(a00,a01,a02,a03,);
}
alias glReplacementCodeuiSUN = glReplacementCodeuiSUN_Z;
__gshared glbfn_glReplacementCodeuiSUN glReplacementCodeuiSUN_Z = function void (uint a00) {
  glbfn_glReplacementCodeuiSUN_loader(a00,);
};
private void glbfn_glReplacementCodeuiSUN_loader (uint a00) {
  *cast(void**)&glReplacementCodeuiSUN_Z = glbindGetProcAddress(`glReplacementCodeuiSUN`);
  if (*cast(void**)&glReplacementCodeuiSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiSUN' not found!`);
  glReplacementCodeuiSUN_Z(a00,);
}
alias glReplacementCodeusSUN = glReplacementCodeusSUN_Z;
__gshared glbfn_glReplacementCodeusSUN glReplacementCodeusSUN_Z = function void (ushort a00) {
  glbfn_glReplacementCodeusSUN_loader(a00,);
};
private void glbfn_glReplacementCodeusSUN_loader (ushort a00) {
  *cast(void**)&glReplacementCodeusSUN_Z = glbindGetProcAddress(`glReplacementCodeusSUN`);
  if (*cast(void**)&glReplacementCodeusSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeusSUN' not found!`);
  glReplacementCodeusSUN_Z(a00,);
}
alias glReplacementCodeubSUN = glReplacementCodeubSUN_Z;
__gshared glbfn_glReplacementCodeubSUN glReplacementCodeubSUN_Z = function void (ubyte a00) {
  glbfn_glReplacementCodeubSUN_loader(a00,);
};
private void glbfn_glReplacementCodeubSUN_loader (ubyte a00) {
  *cast(void**)&glReplacementCodeubSUN_Z = glbindGetProcAddress(`glReplacementCodeubSUN`);
  if (*cast(void**)&glReplacementCodeubSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeubSUN' not found!`);
  glReplacementCodeubSUN_Z(a00,);
}
alias glReplacementCodeuivSUN = glReplacementCodeuivSUN_Z;
__gshared glbfn_glReplacementCodeuivSUN glReplacementCodeuivSUN_Z = function void (const(uint)* a00) {
  glbfn_glReplacementCodeuivSUN_loader(a00,);
};
private void glbfn_glReplacementCodeuivSUN_loader (const(uint)* a00) {
  *cast(void**)&glReplacementCodeuivSUN_Z = glbindGetProcAddress(`glReplacementCodeuivSUN`);
  if (*cast(void**)&glReplacementCodeuivSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuivSUN' not found!`);
  glReplacementCodeuivSUN_Z(a00,);
}
alias glReplacementCodeusvSUN = glReplacementCodeusvSUN_Z;
__gshared glbfn_glReplacementCodeusvSUN glReplacementCodeusvSUN_Z = function void (const(ushort)* a00) {
  glbfn_glReplacementCodeusvSUN_loader(a00,);
};
private void glbfn_glReplacementCodeusvSUN_loader (const(ushort)* a00) {
  *cast(void**)&glReplacementCodeusvSUN_Z = glbindGetProcAddress(`glReplacementCodeusvSUN`);
  if (*cast(void**)&glReplacementCodeusvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeusvSUN' not found!`);
  glReplacementCodeusvSUN_Z(a00,);
}
alias glReplacementCodeubvSUN = glReplacementCodeubvSUN_Z;
__gshared glbfn_glReplacementCodeubvSUN glReplacementCodeubvSUN_Z = function void (const(ubyte)* a00) {
  glbfn_glReplacementCodeubvSUN_loader(a00,);
};
private void glbfn_glReplacementCodeubvSUN_loader (const(ubyte)* a00) {
  *cast(void**)&glReplacementCodeubvSUN_Z = glbindGetProcAddress(`glReplacementCodeubvSUN`);
  if (*cast(void**)&glReplacementCodeubvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeubvSUN' not found!`);
  glReplacementCodeubvSUN_Z(a00,);
}
alias glReplacementCodePointerSUN = glReplacementCodePointerSUN_Z;
__gshared glbfn_glReplacementCodePointerSUN glReplacementCodePointerSUN_Z = function void (uint a00,int a01,const(void*)* a02) {
  glbfn_glReplacementCodePointerSUN_loader(a00,a01,a02,);
};
private void glbfn_glReplacementCodePointerSUN_loader (uint a00,int a01,const(void*)* a02) {
  *cast(void**)&glReplacementCodePointerSUN_Z = glbindGetProcAddress(`glReplacementCodePointerSUN`);
  if (*cast(void**)&glReplacementCodePointerSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodePointerSUN' not found!`);
  glReplacementCodePointerSUN_Z(a00,a01,a02,);
}
alias glColor4ubVertex2fSUN = glColor4ubVertex2fSUN_Z;
__gshared glbfn_glColor4ubVertex2fSUN glColor4ubVertex2fSUN_Z = function void (ubyte a00,ubyte a01,ubyte a02,ubyte a03,float a04,float a05) {
  glbfn_glColor4ubVertex2fSUN_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glColor4ubVertex2fSUN_loader (ubyte a00,ubyte a01,ubyte a02,ubyte a03,float a04,float a05) {
  *cast(void**)&glColor4ubVertex2fSUN_Z = glbindGetProcAddress(`glColor4ubVertex2fSUN`);
  if (*cast(void**)&glColor4ubVertex2fSUN_Z is null) assert(0, `OpenGL function 'glColor4ubVertex2fSUN' not found!`);
  glColor4ubVertex2fSUN_Z(a00,a01,a02,a03,a04,a05,);
}
alias glColor4ubVertex2fvSUN = glColor4ubVertex2fvSUN_Z;
__gshared glbfn_glColor4ubVertex2fvSUN glColor4ubVertex2fvSUN_Z = function void (const(ubyte)* a00,const(float)* a01) {
  glbfn_glColor4ubVertex2fvSUN_loader(a00,a01,);
};
private void glbfn_glColor4ubVertex2fvSUN_loader (const(ubyte)* a00,const(float)* a01) {
  *cast(void**)&glColor4ubVertex2fvSUN_Z = glbindGetProcAddress(`glColor4ubVertex2fvSUN`);
  if (*cast(void**)&glColor4ubVertex2fvSUN_Z is null) assert(0, `OpenGL function 'glColor4ubVertex2fvSUN' not found!`);
  glColor4ubVertex2fvSUN_Z(a00,a01,);
}
alias glColor4ubVertex3fSUN = glColor4ubVertex3fSUN_Z;
__gshared glbfn_glColor4ubVertex3fSUN glColor4ubVertex3fSUN_Z = function void (ubyte a00,ubyte a01,ubyte a02,ubyte a03,float a04,float a05,float a06) {
  glbfn_glColor4ubVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glColor4ubVertex3fSUN_loader (ubyte a00,ubyte a01,ubyte a02,ubyte a03,float a04,float a05,float a06) {
  *cast(void**)&glColor4ubVertex3fSUN_Z = glbindGetProcAddress(`glColor4ubVertex3fSUN`);
  if (*cast(void**)&glColor4ubVertex3fSUN_Z is null) assert(0, `OpenGL function 'glColor4ubVertex3fSUN' not found!`);
  glColor4ubVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glColor4ubVertex3fvSUN = glColor4ubVertex3fvSUN_Z;
__gshared glbfn_glColor4ubVertex3fvSUN glColor4ubVertex3fvSUN_Z = function void (const(ubyte)* a00,const(float)* a01) {
  glbfn_glColor4ubVertex3fvSUN_loader(a00,a01,);
};
private void glbfn_glColor4ubVertex3fvSUN_loader (const(ubyte)* a00,const(float)* a01) {
  *cast(void**)&glColor4ubVertex3fvSUN_Z = glbindGetProcAddress(`glColor4ubVertex3fvSUN`);
  if (*cast(void**)&glColor4ubVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glColor4ubVertex3fvSUN' not found!`);
  glColor4ubVertex3fvSUN_Z(a00,a01,);
}
alias glColor3fVertex3fSUN = glColor3fVertex3fSUN_Z;
__gshared glbfn_glColor3fVertex3fSUN glColor3fVertex3fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05) {
  glbfn_glColor3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glColor3fVertex3fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glColor3fVertex3fSUN_Z = glbindGetProcAddress(`glColor3fVertex3fSUN`);
  if (*cast(void**)&glColor3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glColor3fVertex3fSUN' not found!`);
  glColor3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,);
}
alias glColor3fVertex3fvSUN = glColor3fVertex3fvSUN_Z;
__gshared glbfn_glColor3fVertex3fvSUN glColor3fVertex3fvSUN_Z = function void (const(float)* a00,const(float)* a01) {
  glbfn_glColor3fVertex3fvSUN_loader(a00,a01,);
};
private void glbfn_glColor3fVertex3fvSUN_loader (const(float)* a00,const(float)* a01) {
  *cast(void**)&glColor3fVertex3fvSUN_Z = glbindGetProcAddress(`glColor3fVertex3fvSUN`);
  if (*cast(void**)&glColor3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glColor3fVertex3fvSUN' not found!`);
  glColor3fVertex3fvSUN_Z(a00,a01,);
}
alias glNormal3fVertex3fSUN = glNormal3fVertex3fSUN_Z;
__gshared glbfn_glNormal3fVertex3fSUN glNormal3fVertex3fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05) {
  glbfn_glNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glNormal3fVertex3fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glNormal3fVertex3fSUN`);
  if (*cast(void**)&glNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glNormal3fVertex3fSUN' not found!`);
  glNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,);
}
alias glNormal3fVertex3fvSUN = glNormal3fVertex3fvSUN_Z;
__gshared glbfn_glNormal3fVertex3fvSUN glNormal3fVertex3fvSUN_Z = function void (const(float)* a00,const(float)* a01) {
  glbfn_glNormal3fVertex3fvSUN_loader(a00,a01,);
};
private void glbfn_glNormal3fVertex3fvSUN_loader (const(float)* a00,const(float)* a01) {
  *cast(void**)&glNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glNormal3fVertex3fvSUN`);
  if (*cast(void**)&glNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glNormal3fVertex3fvSUN' not found!`);
  glNormal3fVertex3fvSUN_Z(a00,a01,);
}
alias glColor4fNormal3fVertex3fSUN = glColor4fNormal3fVertex3fSUN_Z;
__gshared glbfn_glColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09) {
  glbfn_glColor4fNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
};
private void glbfn_glColor4fNormal3fVertex3fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09) {
  *cast(void**)&glColor4fNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glColor4fNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fSUN' not found!`);
  glColor4fNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,);
}
alias glColor4fNormal3fVertex3fvSUN = glColor4fNormal3fVertex3fvSUN_Z;
__gshared glbfn_glColor4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN_Z = function void (const(float)* a00,const(float)* a01,const(float)* a02) {
  glbfn_glColor4fNormal3fVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glColor4fNormal3fVertex3fvSUN_loader (const(float)* a00,const(float)* a01,const(float)* a02) {
  *cast(void**)&glColor4fNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glColor4fNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fvSUN' not found!`);
  glColor4fNormal3fVertex3fvSUN_Z(a00,a01,a02,);
}
alias glTexCoord2fVertex3fSUN = glTexCoord2fVertex3fSUN_Z;
__gshared glbfn_glTexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04) {
  glbfn_glTexCoord2fVertex3fSUN_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glTexCoord2fVertex3fSUN_loader (float a00,float a01,float a02,float a03,float a04) {
  *cast(void**)&glTexCoord2fVertex3fSUN_Z = glbindGetProcAddress(`glTexCoord2fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fSUN' not found!`);
  glTexCoord2fVertex3fSUN_Z(a00,a01,a02,a03,a04,);
}
alias glTexCoord2fVertex3fvSUN = glTexCoord2fVertex3fvSUN_Z;
__gshared glbfn_glTexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN_Z = function void (const(float)* a00,const(float)* a01) {
  glbfn_glTexCoord2fVertex3fvSUN_loader(a00,a01,);
};
private void glbfn_glTexCoord2fVertex3fvSUN_loader (const(float)* a00,const(float)* a01) {
  *cast(void**)&glTexCoord2fVertex3fvSUN_Z = glbindGetProcAddress(`glTexCoord2fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fvSUN' not found!`);
  glTexCoord2fVertex3fvSUN_Z(a00,a01,);
}
alias glTexCoord4fVertex4fSUN = glTexCoord4fVertex4fSUN_Z;
__gshared glbfn_glTexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  glbfn_glTexCoord4fVertex4fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTexCoord4fVertex4fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  *cast(void**)&glTexCoord4fVertex4fSUN_Z = glbindGetProcAddress(`glTexCoord4fVertex4fSUN`);
  if (*cast(void**)&glTexCoord4fVertex4fSUN_Z is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fSUN' not found!`);
  glTexCoord4fVertex4fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTexCoord4fVertex4fvSUN = glTexCoord4fVertex4fvSUN_Z;
__gshared glbfn_glTexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN_Z = function void (const(float)* a00,const(float)* a01) {
  glbfn_glTexCoord4fVertex4fvSUN_loader(a00,a01,);
};
private void glbfn_glTexCoord4fVertex4fvSUN_loader (const(float)* a00,const(float)* a01) {
  *cast(void**)&glTexCoord4fVertex4fvSUN_Z = glbindGetProcAddress(`glTexCoord4fVertex4fvSUN`);
  if (*cast(void**)&glTexCoord4fVertex4fvSUN_Z is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fvSUN' not found!`);
  glTexCoord4fVertex4fvSUN_Z(a00,a01,);
}
alias glTexCoord2fColor4ubVertex3fSUN = glTexCoord2fColor4ubVertex3fSUN_Z;
__gshared glbfn_glTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN_Z = function void (float a00,float a01,ubyte a02,ubyte a03,ubyte a04,ubyte a05,float a06,float a07,float a08) {
  glbfn_glTexCoord2fColor4ubVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glTexCoord2fColor4ubVertex3fSUN_loader (float a00,float a01,ubyte a02,ubyte a03,ubyte a04,ubyte a05,float a06,float a07,float a08) {
  *cast(void**)&glTexCoord2fColor4ubVertex3fSUN_Z = glbindGetProcAddress(`glTexCoord2fColor4ubVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fColor4ubVertex3fSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fSUN' not found!`);
  glTexCoord2fColor4ubVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glTexCoord2fColor4ubVertex3fvSUN = glTexCoord2fColor4ubVertex3fvSUN_Z;
__gshared glbfn_glTexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN_Z = function void (const(float)* a00,const(ubyte)* a01,const(float)* a02) {
  glbfn_glTexCoord2fColor4ubVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord2fColor4ubVertex3fvSUN_loader (const(float)* a00,const(ubyte)* a01,const(float)* a02) {
  *cast(void**)&glTexCoord2fColor4ubVertex3fvSUN_Z = glbindGetProcAddress(`glTexCoord2fColor4ubVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fColor4ubVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fvSUN' not found!`);
  glTexCoord2fColor4ubVertex3fvSUN_Z(a00,a01,a02,);
}
alias glTexCoord2fColor3fVertex3fSUN = glTexCoord2fColor3fVertex3fSUN_Z;
__gshared glbfn_glTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  glbfn_glTexCoord2fColor3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTexCoord2fColor3fVertex3fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  *cast(void**)&glTexCoord2fColor3fVertex3fSUN_Z = glbindGetProcAddress(`glTexCoord2fColor3fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fColor3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fSUN' not found!`);
  glTexCoord2fColor3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTexCoord2fColor3fVertex3fvSUN = glTexCoord2fColor3fVertex3fvSUN_Z;
__gshared glbfn_glTexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN_Z = function void (const(float)* a00,const(float)* a01,const(float)* a02) {
  glbfn_glTexCoord2fColor3fVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord2fColor3fVertex3fvSUN_loader (const(float)* a00,const(float)* a01,const(float)* a02) {
  *cast(void**)&glTexCoord2fColor3fVertex3fvSUN_Z = glbindGetProcAddress(`glTexCoord2fColor3fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fColor3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fvSUN' not found!`);
  glTexCoord2fColor3fVertex3fvSUN_Z(a00,a01,a02,);
}
alias glTexCoord2fNormal3fVertex3fSUN = glTexCoord2fNormal3fVertex3fSUN_Z;
__gshared glbfn_glTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  glbfn_glTexCoord2fNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glTexCoord2fNormal3fVertex3fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07) {
  *cast(void**)&glTexCoord2fNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glTexCoord2fNormal3fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fSUN' not found!`);
  glTexCoord2fNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glTexCoord2fNormal3fVertex3fvSUN = glTexCoord2fNormal3fVertex3fvSUN_Z;
__gshared glbfn_glTexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN_Z = function void (const(float)* a00,const(float)* a01,const(float)* a02) {
  glbfn_glTexCoord2fNormal3fVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glTexCoord2fNormal3fVertex3fvSUN_loader (const(float)* a00,const(float)* a01,const(float)* a02) {
  *cast(void**)&glTexCoord2fNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glTexCoord2fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fvSUN' not found!`);
  glTexCoord2fNormal3fVertex3fvSUN_Z(a00,a01,a02,);
}
alias glTexCoord2fColor4fNormal3fVertex3fSUN = glTexCoord2fColor4fNormal3fVertex3fSUN_Z;
__gshared glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10,float a11) {
  glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
};
private void glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10,float a11) {
  *cast(void**)&glTexCoord2fColor4fNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fColor4fNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  glTexCoord2fColor4fNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,);
}
alias glTexCoord2fColor4fNormal3fVertex3fvSUN = glTexCoord2fColor4fNormal3fVertex3fvSUN_Z;
__gshared glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN_Z = function void (const(float)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN_loader (const(float)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  *cast(void**)&glTexCoord2fColor4fNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fColor4fNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  glTexCoord2fColor4fNormal3fVertex3fvSUN_Z(a00,a01,a02,a03,);
}
alias glTexCoord4fColor4fNormal3fVertex4fSUN = glTexCoord4fColor4fNormal3fVertex4fSUN_Z;
__gshared glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN_Z = function void (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10,float a11,float a12,float a13,float a14) {
  glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,);
};
private void glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN_loader (float a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10,float a11,float a12,float a13,float a14) {
  *cast(void**)&glTexCoord4fColor4fNormal3fVertex4fSUN_Z = glbindGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fSUN`);
  if (*cast(void**)&glTexCoord4fColor4fNormal3fVertex4fSUN_Z is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fSUN' not found!`);
  glTexCoord4fColor4fNormal3fVertex4fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,);
}
alias glTexCoord4fColor4fNormal3fVertex4fvSUN = glTexCoord4fColor4fNormal3fVertex4fvSUN_Z;
__gshared glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN_Z = function void (const(float)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN_loader(a00,a01,a02,a03,);
};
private void glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN_loader (const(float)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  *cast(void**)&glTexCoord4fColor4fNormal3fVertex4fvSUN_Z = glbindGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fvSUN`);
  if (*cast(void**)&glTexCoord4fColor4fNormal3fVertex4fvSUN_Z is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fvSUN' not found!`);
  glTexCoord4fColor4fNormal3fVertex4fvSUN_Z(a00,a01,a02,a03,);
}
alias glReplacementCodeuiVertex3fSUN = glReplacementCodeuiVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN_Z = function void (uint a00,float a01,float a02,float a03) {
  glbfn_glReplacementCodeuiVertex3fSUN_loader(a00,a01,a02,a03,);
};
private void glbfn_glReplacementCodeuiVertex3fSUN_loader (uint a00,float a01,float a02,float a03) {
  *cast(void**)&glReplacementCodeuiVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fSUN' not found!`);
  glReplacementCodeuiVertex3fSUN_Z(a00,a01,a02,a03,);
}
alias glReplacementCodeuiVertex3fvSUN = glReplacementCodeuiVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN_Z = function void (const(uint)* a00,const(float)* a01) {
  glbfn_glReplacementCodeuiVertex3fvSUN_loader(a00,a01,);
};
private void glbfn_glReplacementCodeuiVertex3fvSUN_loader (const(uint)* a00,const(float)* a01) {
  *cast(void**)&glReplacementCodeuiVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fvSUN' not found!`);
  glReplacementCodeuiVertex3fvSUN_Z(a00,a01,);
}
alias glReplacementCodeuiColor4ubVertex3fSUN = glReplacementCodeuiColor4ubVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN_Z = function void (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04,float a05,float a06,float a07) {
  glbfn_glReplacementCodeuiColor4ubVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,);
};
private void glbfn_glReplacementCodeuiColor4ubVertex3fSUN_loader (uint a00,ubyte a01,ubyte a02,ubyte a03,ubyte a04,float a05,float a06,float a07) {
  *cast(void**)&glReplacementCodeuiColor4ubVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiColor4ubVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4ubVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fSUN' not found!`);
  glReplacementCodeuiColor4ubVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,);
}
alias glReplacementCodeuiColor4ubVertex3fvSUN = glReplacementCodeuiColor4ubVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN_Z = function void (const(uint)* a00,const(ubyte)* a01,const(float)* a02) {
  glbfn_glReplacementCodeuiColor4ubVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glReplacementCodeuiColor4ubVertex3fvSUN_loader (const(uint)* a00,const(ubyte)* a01,const(float)* a02) {
  *cast(void**)&glReplacementCodeuiColor4ubVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiColor4ubVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4ubVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fvSUN' not found!`);
  glReplacementCodeuiColor4ubVertex3fvSUN_Z(a00,a01,a02,);
}
alias glReplacementCodeuiColor3fVertex3fSUN = glReplacementCodeuiColor3fVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN_Z = function void (uint a00,float a01,float a02,float a03,float a04,float a05,float a06) {
  glbfn_glReplacementCodeuiColor3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glReplacementCodeuiColor3fVertex3fSUN_loader (uint a00,float a01,float a02,float a03,float a04,float a05,float a06) {
  *cast(void**)&glReplacementCodeuiColor3fVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiColor3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiColor3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fSUN' not found!`);
  glReplacementCodeuiColor3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glReplacementCodeuiColor3fVertex3fvSUN = glReplacementCodeuiColor3fVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN_Z = function void (const(uint)* a00,const(float)* a01,const(float)* a02) {
  glbfn_glReplacementCodeuiColor3fVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glReplacementCodeuiColor3fVertex3fvSUN_loader (const(uint)* a00,const(float)* a01,const(float)* a02) {
  *cast(void**)&glReplacementCodeuiColor3fVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiColor3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiColor3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fvSUN' not found!`);
  glReplacementCodeuiColor3fVertex3fvSUN_Z(a00,a01,a02,);
}
alias glReplacementCodeuiNormal3fVertex3fSUN = glReplacementCodeuiNormal3fVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN_Z = function void (uint a00,float a01,float a02,float a03,float a04,float a05,float a06) {
  glbfn_glReplacementCodeuiNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,);
};
private void glbfn_glReplacementCodeuiNormal3fVertex3fSUN_loader (uint a00,float a01,float a02,float a03,float a04,float a05,float a06) {
  *cast(void**)&glReplacementCodeuiNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,);
}
alias glReplacementCodeuiNormal3fVertex3fvSUN = glReplacementCodeuiNormal3fVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN_Z = function void (const(uint)* a00,const(float)* a01,const(float)* a02) {
  glbfn_glReplacementCodeuiNormal3fVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glReplacementCodeuiNormal3fVertex3fvSUN_loader (const(uint)* a00,const(float)* a01,const(float)* a02) {
  *cast(void**)&glReplacementCodeuiNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiNormal3fVertex3fvSUN_Z(a00,a01,a02,);
}
alias glReplacementCodeuiColor4fNormal3fVertex3fSUN = glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z = function void (uint a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10) {
  glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
};
private void glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN_loader (uint a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10) {
  *cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,);
}
alias glReplacementCodeuiColor4fNormal3fVertex3fvSUN = glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z = function void (const(uint)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_loader(a00,a01,a02,a03,);
};
private void glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_loader (const(uint)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  *cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z(a00,a01,a02,a03,);
}
alias glReplacementCodeuiTexCoord2fVertex3fSUN = glReplacementCodeuiTexCoord2fVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN_Z = function void (uint a00,float a01,float a02,float a03,float a04,float a05) {
  glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,);
};
private void glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN_loader (uint a00,float a01,float a02,float a03,float a04,float a05) {
  *cast(void**)&glReplacementCodeuiTexCoord2fVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,);
}
alias glReplacementCodeuiTexCoord2fVertex3fvSUN = glReplacementCodeuiTexCoord2fVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN_Z = function void (const(uint)* a00,const(float)* a01,const(float)* a02) {
  glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN_loader(a00,a01,a02,);
};
private void glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN_loader (const(uint)* a00,const(float)* a01,const(float)* a02) {
  *cast(void**)&glReplacementCodeuiTexCoord2fVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fVertex3fvSUN_Z(a00,a01,a02,);
}
alias glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z = function void (uint a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08) {
  glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
};
private void glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_loader (uint a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08) {
  *cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,);
}
alias glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z = function void (const(uint)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_loader(a00,a01,a02,a03,);
};
private void glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_loader (const(uint)* a00,const(float)* a01,const(float)* a02,const(float)* a03) {
  *cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z(a00,a01,a02,a03,);
}
alias glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z;
__gshared glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z = function void (uint a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10,float a11,float a12) {
  glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_loader(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
};
private void glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_loader (uint a00,float a01,float a02,float a03,float a04,float a05,float a06,float a07,float a08,float a09,float a10,float a11,float a12) {
  *cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z(a00,a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,);
}
alias glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z;
__gshared glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z = function void (const(uint)* a00,const(float)* a01,const(float)* a02,const(float)* a03,const(float)* a04) {
  glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_loader(a00,a01,a02,a03,a04,);
};
private void glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_loader (const(uint)* a00,const(float)* a01,const(float)* a02,const(float)* a03,const(float)* a04) {
  *cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z(a00,a01,a02,a03,a04,);
}
