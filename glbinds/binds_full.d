// WTFPL or Public Domain, on your choice
module iv.glbinds.binds_full /*is aliced*/;
//import iv.alice;

// show loaded functions
//version = glbind_debug;


// ////////////////////////////////////////////////////////////////////////// //
nothrow @nogc {
version(Windows) {
  //pragma(lib, "opengl32");
  private extern(System) nothrow @nogc {
    private import core.sys.windows.windef, core.sys.windows.winbase;
    __gshared void* function (const(char)* name) wglGetProcAddress_Z;
    __gshared BOOL function (HGLRC) wglDeleteContext_Z;
    __gshared HGLRC function (HDC) wglCreateContext_Z;
    __gshared BOOL function (HDC, HGLRC) wglMakeCurrent_Z;
    public alias wglDeleteContext = wglDeleteContext_Z;
    public alias wglCreateContext = wglCreateContext_Z;
    public alias wglMakeCurrent = wglMakeCurrent_Z;
  }
  public void* glbindGetProcAddress (const(char)* name) {
    //import core.sys.windows.wingdi : wglGetProcAddress;
    import core.sys.windows.windef, core.sys.windows.winbase;
    __gshared HINSTANCE dll = null;
    if (*cast(void**)&wglGetProcAddress_Z is null) {
      dll = LoadLibraryA("opengl32.dll");
      if (dll is null) assert(0, "GL: cannot load OpenGL library");
      *cast(void**)&wglGetProcAddress_Z = GetProcAddress(dll, "wglGetProcAddress");
      if (*cast(void**)&wglGetProcAddress_Z is null) assert(0, "GL: cannot load `wglGetProcAddress`");

      *cast(void**)&wglDeleteContext_Z = GetProcAddress(dll, "wglDeleteContext");
      if (*cast(void**)&wglDeleteContext_Z is null) assert(0, "GL: cannot load `wglDeleteContext`");

      *cast(void**)&wglCreateContext_Z = GetProcAddress(dll, "wglCreateContext");
      if (*cast(void**)&wglCreateContext_Z is null) assert(0, "GL: cannot load `wglCreateContext`");

      *cast(void**)&wglMakeCurrent_Z = GetProcAddress(dll, "wglMakeCurrent");
      if (*cast(void**)&wglMakeCurrent_Z is null) assert(0, "GL: cannot load `wglMakeCurrent`");
    }
    void* res = wglGetProcAddress_Z(name);
    if (res is null) return GetProcAddress(dll, name);
    return res;
  }
} else {
  /*
  pragma(lib, "GL");
  extern(C) {
    void* glXGetProcAddress (const(char)* name);
    alias glbindGetProcAddress = glXGetProcAddress;
  }
  */
  private __gshared void* glhandle = null;
  private __gshared void* glbind_glXGetProcAddress = null;
  extern(C) nothrow @nogc {
    private __gshared void* function (const(char)* name) glbind_glXGetProcAddressFn;

    __gshared /*XVisualInfo*/void* function (/*Display*/void *dpy, int screen, const(int)* attrib_list) glXChooseVisual_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXContext*/void* src, /*GLXContext*/void* dst, arch_ulong mask) glXCopyContext_Z;
    __gshared /*GLXContext*/void* function (/*Display*/void *dpy, /*XVisualInfo*/void *vis, /*GLXContext*/void* share_list, /*Bool*/int direct) glXCreateContext_Z;
    __gshared /*GLXPixmap*/size_t function (/*Display*/void *dpy, /*XVisualInfo*/void *vis, /*Pixmap*/size_t pixmap) glXCreateGLXPixmap_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXContext*/void* ctx) glXDestroyContext_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXPixmap*/size_t pix) glXDestroyGLXPixmap_Z;
    __gshared int function (/*Display*/void *dpy, /*XVisualInfo*/void *vis, int attrib, int *value) glXGetConfig_Z;
    __gshared /*GLXContext*/void* function () glXGetCurrentContext_Z;
    __gshared /*GLXDrawable*/size_t function () glXGetCurrentDrawable_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, /*GLXContext*/void* ctx) glXIsDirect_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, /*GLXDrawable*/size_t drawable, /*GLXContext*/void* ctx) glXMakeCurrent_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, int *error_base, int *event_base) glXQueryExtension_Z;
    __gshared /*Bool*/int function (/*Display*/void *dpy, int *major, int *minor) glXQueryVersion_Z;
    __gshared void function (/*Display*/void *dpy, /*GLXDrawable*/size_t drawable) glXSwapBuffers_Z;
    __gshared void function (/*Font*/size_t font, int first, int count, int list_base) glXUseXFont_Z;
    __gshared void function () glXWaitGL_Z;
    __gshared void function () glXWaitX_Z;

    struct __GLXFBConfigRec {}
    alias GLXFBConfig = __GLXFBConfigRec*;

    __gshared GLXFBConfig* function (/*Display*/void*, int, int*, int*) glXChooseFBConfig_Z;
    __gshared int function (/*Display*/void*, GLXFBConfig, int, int*) glXGetFBConfigAttrib_Z;
    __gshared /*XVisualInfo*/void* function (/*Display*/void*, GLXFBConfig) glXGetVisualFromFBConfig_Z;

    __gshared const(char)* function (/*Display*/void*, int) glXQueryExtensionsString_Z;
    __gshared void* function (const(char)*) glXGetProcAddress_Z;

    alias glXChooseVisual = glXChooseVisual_Z;
    alias glXCopyContext = glXCopyContext_Z;
    alias glXCreateContext = glXCreateContext_Z;
    alias glXCreateGLXPixmap = glXCreateGLXPixmap_Z;
    alias glXDestroyContext = glXDestroyContext_Z;
    alias glXDestroyGLXPixmap = glXDestroyGLXPixmap_Z;
    alias glXGetConfig = glXGetConfig_Z;
    alias glXGetCurrentContext = glXGetCurrentContext_Z;
    alias glXGetCurrentDrawable = glXGetCurrentDrawable_Z;
    alias glXIsDirect = glXIsDirect_Z;
    alias glXMakeCurrent = glXMakeCurrent_Z;
    alias glXQueryExtension = glXQueryExtension_Z;
    alias glXQueryVersion = glXQueryVersion_Z;
    alias glXSwapBuffers = glXSwapBuffers_Z;
    alias glXUseXFont = glXUseXFont_Z;
    alias glXWaitGL = glXWaitGL_Z;
    alias glXWaitX = glXWaitX_Z;

    alias glXChooseFBConfig = glXChooseFBConfig_Z;
    alias glXGetFBConfigAttrib = glXGetFBConfigAttrib_Z;
    alias glXGetVisualFromFBConfig = glXGetVisualFromFBConfig_Z;

    alias glXQueryExtensionsString = glXQueryExtensionsString_Z;
    alias glXGetProcAddress = glXGetProcAddress_Z;
  }
  public void* glbindGetProcAddress (const(char)* name) {
    import core.sys.posix.dlfcn;
    if (glhandle is null) {
      glhandle = dlopen("libGL.so", RTLD_LAZY/*RTLD_NOW*/);
      if (glhandle is null) assert(0, "cannot load libGL");
    }
    if (glbind_glXGetProcAddress is null) {
      glbind_glXGetProcAddress = dlsym(glhandle, "glXGetProcAddress");
      if (glbind_glXGetProcAddress is null) assert(0, "cannot find `glbind_glXGetProcAddress` symbol");

      *cast(void**)&glbind_glXGetProcAddressFn = glbind_glXGetProcAddress;

      *cast(void**)&glXChooseVisual_Z = glbind_glXGetProcAddressFn("glXChooseVisual");
      *cast(void**)&glXCopyContext_Z = glbind_glXGetProcAddressFn("glXCopyContext");
      *cast(void**)&glXCreateContext_Z = glbind_glXGetProcAddressFn("glXCreateContext");
      *cast(void**)&glXCreateGLXPixmap_Z = glbind_glXGetProcAddressFn("glXCreateGLXPixmap");
      *cast(void**)&glXDestroyContext_Z = glbind_glXGetProcAddressFn("glXDestroyContext");
      *cast(void**)&glXDestroyGLXPixmap_Z = glbind_glXGetProcAddressFn("glXDestroyGLXPixmap");
      *cast(void**)&glXGetConfig_Z = glbind_glXGetProcAddressFn("glXGetConfig");
      *cast(void**)&glXGetCurrentContext_Z = glbind_glXGetProcAddressFn("glXGetCurrentContext");
      *cast(void**)&glXGetCurrentDrawable_Z = glbind_glXGetProcAddressFn("glXGetCurrentDrawable");
      *cast(void**)&glXIsDirect_Z = glbind_glXGetProcAddressFn("glXIsDirect");
      *cast(void**)&glXMakeCurrent_Z = glbind_glXGetProcAddressFn("glXMakeCurrent");
      *cast(void**)&glXQueryExtension_Z = glbind_glXGetProcAddressFn("glXQueryExtension");
      *cast(void**)&glXQueryVersion_Z = glbind_glXGetProcAddressFn("glXQueryVersion");
      *cast(void**)&glXSwapBuffers_Z = glbind_glXGetProcAddressFn("glXSwapBuffers");
      *cast(void**)&glXUseXFont_Z = glbind_glXGetProcAddressFn("glXUseXFont");
      *cast(void**)&glXWaitGL_Z = glbind_glXGetProcAddressFn("glXWaitGL");
      *cast(void**)&glXWaitX_Z = glbind_glXGetProcAddressFn("glXWaitX");

      *cast(void**)&glXChooseFBConfig_Z = glbind_glXGetProcAddressFn("glXChooseFBConfig");
      *cast(void**)&glXGetFBConfigAttrib_Z = glbind_glXGetProcAddressFn("glXGetFBConfigAttrib");
      *cast(void**)&glXGetVisualFromFBConfig_Z = glbind_glXGetProcAddressFn("glXGetVisualFromFBConfig");

      *cast(void**)&glXQueryExtensionsString_Z = glbind_glXGetProcAddressFn("glXQueryExtensionsString");
      *cast(void**)&glXGetProcAddress_Z = glbind_glXGetProcAddressFn("glXGetProcAddress");

      if (*cast(void**)&glXChooseVisual_Z is null) assert(0, "GL: `glXChooseVisual` not found");
      if (*cast(void**)&glXCopyContext_Z is null) assert(0, "GL: `glXCopyContext` not found");
      if (*cast(void**)&glXCreateContext_Z is null) assert(0, "GL: `glXCreateContext` not found");
      if (*cast(void**)&glXCreateGLXPixmap_Z is null) assert(0, "GL: `glXCreateGLXPixmap` not found");
      if (*cast(void**)&glXDestroyContext_Z is null) assert(0, "GL: `glXDestroyContext` not found");
      if (*cast(void**)&glXDestroyGLXPixmap_Z is null) assert(0, "GL: `glXDestroyGLXPixmap` not found");
      if (*cast(void**)&glXGetConfig_Z is null) assert(0, "GL: `glXGetConfig` not found");
      if (*cast(void**)&glXGetCurrentContext_Z is null) assert(0, "GL: `glXGetCurrentContext` not found");
      if (*cast(void**)&glXGetCurrentDrawable_Z is null) assert(0, "GL: `glXGetCurrentDrawable` not found");
      if (*cast(void**)&glXIsDirect_Z is null) assert(0, "GL: `glXIsDirect` not found");
      if (*cast(void**)&glXMakeCurrent_Z is null) assert(0, "GL: `glXMakeCurrent` not found");
      if (*cast(void**)&glXQueryExtension_Z is null) assert(0, "GL: `glXQueryExtension` not found");
      if (*cast(void**)&glXQueryVersion_Z is null) assert(0, "GL: `glXQueryVersion` not found");
      if (*cast(void**)&glXSwapBuffers_Z is null) assert(0, "GL: `glXSwapBuffers` not found");
      if (*cast(void**)&glXUseXFont_Z is null) assert(0, "GL: `glXUseXFont` not found");
      if (*cast(void**)&glXWaitGL_Z is null) assert(0, "GL: `glXWaitGL` not found");
      if (*cast(void**)&glXWaitX_Z is null) assert(0, "GL: `glXWaitX` not found");

      if (*cast(void**)&glXChooseFBConfig_Z is null) assert(0, "GL: `glXChooseFBConfig` not found");
      if (*cast(void**)&glXGetFBConfigAttrib_Z is null) assert(0, "GL: `glXGetFBConfigAttrib` not found");
      if (*cast(void**)&glXGetVisualFromFBConfig_Z is null) assert(0, "GL: `glXGetVisualFromFBConfig` not found");

      if (*cast(void**)&glXQueryExtensionsString_Z is null) assert(0, "GL: `glXQueryExtensionsString` not found");
      if (*cast(void**)&glXGetProcAddress_Z is null) assert(0, "GL: `glXGetProcAddress` not found");
    }
    return glbind_glXGetProcAddressFn(name);
    //auto res = glbind_glXGetProcAddressFn(name);
    //if (res is null) { import core.stdc.stdio; stderr.fprintf("GL: can't load '%s'\n", name); assert(0); }
    //return res;
  }

  /+
  enum GLX_USE_GL=            1;       /* support GLX rendering */
  enum GLX_BUFFER_SIZE=       2;       /* depth of the color buffer */
  enum GLX_LEVEL=             3;       /* level in plane stacking */
  enum GLX_RGBA=              4;       /* true if RGBA mode */
  enum GLX_DOUBLEBUFFER=      5;       /* double buffering supported */
  enum GLX_STEREO=            6;       /* stereo buffering supported */
  enum GLX_AUX_BUFFERS=       7;       /* number of aux buffers */
  enum GLX_RED_SIZE=          8;       /* number of red component bits */
  enum GLX_GREEN_SIZE=        9;       /* number of green component bits */
  enum GLX_BLUE_SIZE=         10;      /* number of blue component bits */
  enum GLX_ALPHA_SIZE=        11;      /* number of alpha component bits */
  enum GLX_DEPTH_SIZE=        12;      /* number of depth bits */
  enum GLX_STENCIL_SIZE=      13;      /* number of stencil bits */
  enum GLX_ACCUM_RED_SIZE=    14;      /* number of red accum bits */
  enum GLX_ACCUM_GREEN_SIZE=  15;      /* number of green accum bits */
  enum GLX_ACCUM_BLUE_SIZE=   16;      /* number of blue accum bits */
  enum GLX_ACCUM_ALPHA_SIZE=  17;      /* number of alpha accum bits */

  enum GLX_X_RENDERABLE = 0x8012;
  enum GLX_DRAWABLE_TYPE = 0x8010;
  enum GLX_RENDER_TYPE = 0x8011;
  enum GLX_X_VISUAL_TYPE = 0x22;
  enum GLX_TRUE_COLOR = 0x8002;
  enum GLX_WINDOW_BIT = 0x00000001;
  enum GLX_RGBA_BIT = 0x00000001;
  enum GLX_COLOR_INDEX_BIT = 0x00000002;
  enum GLX_SAMPLE_BUFFERS = 0x186a0;
  enum GLX_SAMPLES = 0x186a1;
  enum GLX_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
  enum GLX_CONTEXT_MINOR_VERSION_ARB = 0x2092;
  +/

  // Tokens for glXChooseVisual and glXGetConfig:
  enum GLX_USE_GL = 1;
  enum GLX_BUFFER_SIZE = 2;
  enum GLX_LEVEL = 3;
  enum GLX_RGBA = 4;
  enum GLX_DOUBLEBUFFER = 5;
  enum GLX_STEREO = 6;
  enum GLX_AUX_BUFFERS = 7;
  enum GLX_RED_SIZE = 8;
  enum GLX_GREEN_SIZE = 9;
  enum GLX_BLUE_SIZE = 10;
  enum GLX_ALPHA_SIZE = 11;
  enum GLX_DEPTH_SIZE = 12;
  enum GLX_STENCIL_SIZE = 13;
  enum GLX_ACCUM_RED_SIZE = 14;
  enum GLX_ACCUM_GREEN_SIZE = 15;
  enum GLX_ACCUM_BLUE_SIZE = 16;
  enum GLX_ACCUM_ALPHA_SIZE = 17;

  // Error codes returned by glXGetConfig:
  enum GLX_BAD_SCREEN = 1;
  enum GLX_BAD_ATTRIBUTE = 2;
  enum GLX_NO_EXTENSION = 3;
  enum GLX_BAD_VISUAL = 4;
  enum GLX_BAD_CONTEXT = 5;
  enum GLX_BAD_VALUE = 6;
  enum GLX_BAD_ENUM = 7;

  // GLX 1.1 and later:
  enum GLX_VENDOR = 1;
  enum GLX_VERSION = 2;
  enum GLX_EXTENSIONS = 3;

  // GLX 1.3 and later:
  enum GLX_CONFIG_CAVEAT = 0x20;
  enum GLX_DONT_CARE = 0xFFFFFFFF;
  enum GLX_X_VISUAL_TYPE = 0x22;
  enum GLX_TRANSPARENT_TYPE = 0x23;
  enum GLX_TRANSPARENT_INDEX_VALUE = 0x24;
  enum GLX_TRANSPARENT_RED_VALUE = 0x25;
  enum GLX_TRANSPARENT_GREEN_VALUE = 0x26;
  enum GLX_TRANSPARENT_BLUE_VALUE = 0x27;
  enum GLX_TRANSPARENT_ALPHA_VALUE = 0x28;
  enum GLX_WINDOW_BIT = 0x00000001;
  enum GLX_PIXMAP_BIT = 0x00000002;
  enum GLX_PBUFFER_BIT = 0x00000004;
  enum GLX_AUX_BUFFERS_BIT = 0x00000010;
  enum GLX_FRONT_LEFT_BUFFER_BIT = 0x00000001;
  enum GLX_FRONT_RIGHT_BUFFER_BIT = 0x00000002;
  enum GLX_BACK_LEFT_BUFFER_BIT = 0x00000004;
  enum GLX_BACK_RIGHT_BUFFER_BIT = 0x00000008;
  enum GLX_DEPTH_BUFFER_BIT = 0x00000020;
  enum GLX_STENCIL_BUFFER_BIT = 0x00000040;
  enum GLX_ACCUM_BUFFER_BIT = 0x00000080;
  enum GLX_NONE = 0x8000;
  enum GLX_SLOW_CONFIG = 0x8001;
  enum GLX_TRUE_COLOR = 0x8002;
  enum GLX_DIRECT_COLOR = 0x8003;
  enum GLX_PSEUDO_COLOR = 0x8004;
  enum GLX_STATIC_COLOR = 0x8005;
  enum GLX_GRAY_SCALE = 0x8006;
  enum GLX_STATIC_GRAY = 0x8007;
  enum GLX_TRANSPARENT_RGB = 0x8008;
  enum GLX_TRANSPARENT_INDEX = 0x8009;
  enum GLX_VISUAL_ID = 0x800B;
  enum GLX_SCREEN = 0x800C;
  enum GLX_NON_CONFORMANT_CONFIG = 0x800D;
  enum GLX_DRAWABLE_TYPE = 0x8010;
  enum GLX_RENDER_TYPE = 0x8011;
  enum GLX_X_RENDERABLE = 0x8012;
  enum GLX_FBCONFIG_ID = 0x8013;
  enum GLX_RGBA_TYPE = 0x8014;
  enum GLX_COLOR_INDEX_TYPE = 0x8015;
  enum GLX_MAX_PBUFFER_WIDTH = 0x8016;
  enum GLX_MAX_PBUFFER_HEIGHT = 0x8017;
  enum GLX_MAX_PBUFFER_PIXELS = 0x8018;
  enum GLX_PRESERVED_CONTENTS = 0x801B;
  enum GLX_LARGEST_PBUFFER = 0x801C;
  enum GLX_WIDTH = 0x801D;
  enum GLX_HEIGHT = 0x801E;
  enum GLX_EVENT_MASK = 0x801F;
  enum GLX_DAMAGED = 0x8020;
  enum GLX_SAVED = 0x8021;
  enum GLX_WINDOW = 0x8022;
  enum GLX_PBUFFER = 0x8023;
  enum GLX_PBUFFER_HEIGHT = 0x8040;
  enum GLX_PBUFFER_WIDTH = 0x8041;
  enum GLX_RGBA_BIT = 0x00000001;
  enum GLX_COLOR_INDEX_BIT = 0x00000002;
  enum GLX_PBUFFER_CLOBBER_MASK = 0x08000000;

  // GLX 1.4 and later:
  enum GLX_SAMPLE_BUFFERS = 0x186a0; /*100000*/
  enum GLX_SAMPLES = 0x186a1; /*100001*/

  // others
  //enum GLX_WINDOW_BIT = 0x00000001;
  //enum GLX_PIXMAP_BIT = 0x00000002;
  //enum GLX_PBUFFER_BIT = 0x00000004;
  //enum GLX_RGBA_BIT = 0x00000001;
  //enum GLX_COLOR_INDEX_BIT = 0x00000002;
  //enum GLX_PBUFFER_CLOBBER_MASK = 0x08000000;
  //enum GLX_FRONT_LEFT_BUFFER_BIT = 0x00000001;
  //enum GLX_FRONT_RIGHT_BUFFER_BIT = 0x00000002;
  //enum GLX_BACK_LEFT_BUFFER_BIT = 0x00000004;
  //enum GLX_BACK_RIGHT_BUFFER_BIT = 0x00000008;
  //enum GLX_AUX_BUFFERS_BIT = 0x00000010;
  //enum GLX_DEPTH_BUFFER_BIT = 0x00000020;
  //enum GLX_STENCIL_BUFFER_BIT = 0x00000040;
  //enum GLX_ACCUM_BUFFER_BIT = 0x00000080;
  //enum GLX_CONFIG_CAVEAT = 0x20;
  //enum GLX_X_VISUAL_TYPE = 0x22;
  //enum GLX_TRANSPARENT_TYPE = 0x23;
  //enum GLX_TRANSPARENT_INDEX_VALUE = 0x24;
  //enum GLX_TRANSPARENT_RED_VALUE = 0x25;
  //enum GLX_TRANSPARENT_GREEN_VALUE = 0x26;
  //enum GLX_TRANSPARENT_BLUE_VALUE = 0x27;
  //enum GLX_TRANSPARENT_ALPHA_VALUE = 0x28;
  //enum GLX_DONT_CARE = 0xFFFFFFFF;
  //enum GLX_NONE = 0x8000;
  //enum GLX_SLOW_CONFIG = 0x8001;
  //enum GLX_TRUE_COLOR = 0x8002;
  //enum GLX_DIRECT_COLOR = 0x8003;
  //enum GLX_PSEUDO_COLOR = 0x8004;
  //enum GLX_STATIC_COLOR = 0x8005;
  //enum GLX_GRAY_SCALE = 0x8006;
  //enum GLX_STATIC_GRAY = 0x8007;
  //enum GLX_TRANSPARENT_RGB = 0x8008;
  //enum GLX_TRANSPARENT_INDEX = 0x8009;
  //enum GLX_VISUAL_ID = 0x800B;
  //enum GLX_SCREEN = 0x800C;
  //enum GLX_NON_CONFORMANT_CONFIG = 0x800D;
  //enum GLX_DRAWABLE_TYPE = 0x8010;
  //enum GLX_RENDER_TYPE = 0x8011;
  //enum GLX_X_RENDERABLE = 0x8012;
  //enum GLX_FBCONFIG_ID = 0x8013;
  //enum GLX_RGBA_TYPE = 0x8014;
  //enum GLX_COLOR_INDEX_TYPE = 0x8015;
  //enum GLX_MAX_PBUFFER_WIDTH = 0x8016;
  //enum GLX_MAX_PBUFFER_HEIGHT = 0x8017;
  //enum GLX_MAX_PBUFFER_PIXELS = 0x8018;
  //enum GLX_PRESERVED_CONTENTS = 0x801B;
  //enum GLX_LARGEST_PBUFFER = 0x801C;
  //enum GLX_WIDTH = 0x801D;
  //enum GLX_HEIGHT = 0x801E;
  //enum GLX_EVENT_MASK = 0x801F;
  //enum GLX_DAMAGED = 0x8020;
  //enum GLX_SAVED = 0x8021;
  //enum GLX_WINDOW = 0x8022;
  //enum GLX_PBUFFER = 0x8023;
  //enum GLX_PBUFFER_HEIGHT = 0x8040;
  //enum GLX_PBUFFER_WIDTH = 0x8041;

  /+
  enum GLX_ARB_context_flush_control = 1;
  enum GLX_CONTEXT_RELEASE_BEHAVIOR_ARB = 0x2097;
  enum GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB = 0;
  enum GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB = 0x2098;
  +/

  //enum GLX_ARB_create_context = 1;
  enum GLX_CONTEXT_DEBUG_BIT_ARB = 0x00000001;
  enum GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
  enum GLX_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
  enum GLX_CONTEXT_MINOR_VERSION_ARB = 0x2092;
  enum GLX_CONTEXT_FLAGS_ARB = 0x2094;

  //enum GLX_ARB_create_context_profile = 1;
  enum GLX_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
  enum GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
  enum GLX_CONTEXT_PROFILE_MASK_ARB = 0x9126;

  //enum GLX_ARB_create_context_robustness = 1;
  enum GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB = 0x00000004;
  enum GLX_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
  enum GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
  enum GLX_NO_RESET_NOTIFICATION_ARB = 0x8261;

  //enum GLX_ARB_fbconfig_float = 1;
  enum GLX_RGBA_FLOAT_TYPE_ARB = 0x20B9;
  enum GLX_RGBA_FLOAT_BIT_ARB = 0x00000004;

  //enum GLX_ARB_framebuffer_sRGB = 1;
  enum GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB = 0x20B2;

  //enum GLX_ARB_multisample = 1;
  enum GLX_SAMPLE_BUFFERS_ARB = 100000;
  enum GLX_SAMPLES_ARB = 100001;

  //enum GLX_ARB_robustness_application_isolation = 1;
  enum GLX_CONTEXT_RESET_ISOLATION_BIT_ARB = 0x00000008;

  //enum GLX_ARB_vertex_buffer_object = 1;
  enum GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB = 0x2095;

  /+
  enum GLX_AMD_gpu_association = 1;
  enum GLX_GPU_VENDOR_AMD = 0x1F00;
  enum GLX_GPU_RENDERER_STRING_AMD = 0x1F01;
  enum GLX_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
  enum GLX_GPU_FASTEST_TARGET_GPUS_AMD = 0x21A2;
  enum GLX_GPU_RAM_AMD = 0x21A3;
  enum GLX_GPU_CLOCK_AMD = 0x21A4;
  enum GLX_GPU_NUM_PIPES_AMD = 0x21A5;
  enum GLX_GPU_NUM_SIMD_AMD = 0x21A6;
  enum GLX_GPU_NUM_RB_AMD = 0x21A7;
  enum GLX_GPU_NUM_SPI_AMD = 0x21A8;
  +/

  //enum GLX_EXT_buffer_age = 1;
  enum GLX_BACK_BUFFER_AGE_EXT = 0x20F4;

  /+
  enum GLX_EXT_create_context_es2_profile = 1;
  enum GLX_CONTEXT_ES2_PROFILE_BIT_EXT = 0x00000004;

  enum GLX_EXT_create_context_es_profile = 1;
  enum GLX_CONTEXT_ES_PROFILE_BIT_EXT = 0x00000004;
  +/

  //enum GLX_EXT_fbconfig_packed_float = 1;
  enum GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT = 0x20B1;
  enum GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT = 0x00000008;

  //enum GLX_EXT_framebuffer_sRGB = 1;
  enum GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x20B2;

  //enum GLX_EXT_import_context = 1;
  enum GLX_SHARE_CONTEXT_EXT = 0x800A;
  enum GLX_VISUAL_ID_EXT = 0x800B;
  enum GLX_SCREEN_EXT = 0x800C;

  //enum GLX_EXT_swap_control = 1;
  enum GLX_SWAP_INTERVAL_EXT = 0x20F1;
  enum GLX_MAX_SWAP_INTERVAL_EXT = 0x20F2;

  //enum GLX_EXT_swap_control_tear = 1;
  enum GLX_LATE_SWAPS_TEAR_EXT = 0x20F3;

  //enum GLX_EXT_texture_from_pixmap = 1;
  enum GLX_TEXTURE_1D_BIT_EXT = 0x00000001;
  enum GLX_TEXTURE_2D_BIT_EXT = 0x00000002;
  enum GLX_TEXTURE_RECTANGLE_BIT_EXT = 0x00000004;
  enum GLX_BIND_TO_TEXTURE_RGB_EXT = 0x20D0;
  enum GLX_BIND_TO_TEXTURE_RGBA_EXT = 0x20D1;
  enum GLX_BIND_TO_MIPMAP_TEXTURE_EXT = 0x20D2;
  enum GLX_BIND_TO_TEXTURE_TARGETS_EXT = 0x20D3;
  enum GLX_Y_INVERTED_EXT = 0x20D4;
  enum GLX_TEXTURE_FORMAT_EXT = 0x20D5;
  enum GLX_TEXTURE_TARGET_EXT = 0x20D6;
  enum GLX_MIPMAP_TEXTURE_EXT = 0x20D7;
  enum GLX_TEXTURE_FORMAT_NONE_EXT = 0x20D8;
  enum GLX_TEXTURE_FORMAT_RGB_EXT = 0x20D9;
  enum GLX_TEXTURE_FORMAT_RGBA_EXT = 0x20DA;
  enum GLX_TEXTURE_1D_EXT = 0x20DB;
  enum GLX_TEXTURE_2D_EXT = 0x20DC;
  enum GLX_TEXTURE_RECTANGLE_EXT = 0x20DD;
  enum GLX_FRONT_LEFT_EXT = 0x20DE;
  enum GLX_FRONT_RIGHT_EXT = 0x20DF;
  enum GLX_BACK_LEFT_EXT = 0x20E0;
  enum GLX_BACK_RIGHT_EXT = 0x20E1;
  enum GLX_FRONT_EXT = 0x20DE;
  enum GLX_BACK_EXT = 0x20E0;
  enum GLX_AUX0_EXT = 0x20E2;
  enum GLX_AUX1_EXT = 0x20E3;
  enum GLX_AUX2_EXT = 0x20E4;
  enum GLX_AUX3_EXT = 0x20E5;
  enum GLX_AUX4_EXT = 0x20E6;
  enum GLX_AUX5_EXT = 0x20E7;
  enum GLX_AUX6_EXT = 0x20E8;
  enum GLX_AUX7_EXT = 0x20E9;
  enum GLX_AUX8_EXT = 0x20EA;
  enum GLX_AUX9_EXT = 0x20EB;

  //enum GLX_EXT_visual_info = 1;
  enum GLX_X_VISUAL_TYPE_EXT = 0x22;
  enum GLX_TRANSPARENT_TYPE_EXT = 0x23;
  enum GLX_TRANSPARENT_INDEX_VALUE_EXT = 0x24;
  enum GLX_TRANSPARENT_RED_VALUE_EXT = 0x25;
  enum GLX_TRANSPARENT_GREEN_VALUE_EXT = 0x26;
  enum GLX_TRANSPARENT_BLUE_VALUE_EXT = 0x27;
  enum GLX_TRANSPARENT_ALPHA_VALUE_EXT = 0x28;
  enum GLX_NONE_EXT = 0x8000;
  enum GLX_TRUE_COLOR_EXT = 0x8002;
  enum GLX_DIRECT_COLOR_EXT = 0x8003;
  enum GLX_PSEUDO_COLOR_EXT = 0x8004;
  enum GLX_STATIC_COLOR_EXT = 0x8005;
  enum GLX_GRAY_SCALE_EXT = 0x8006;
  enum GLX_STATIC_GRAY_EXT = 0x8007;
  enum GLX_TRANSPARENT_RGB_EXT = 0x8008;
  enum GLX_TRANSPARENT_INDEX_EXT = 0x8009;

  //enum GLX_EXT_visual_rating = 1;
  enum GLX_VISUAL_CAVEAT_EXT = 0x20;
  enum GLX_SLOW_VISUAL_EXT = 0x8001;
  enum GLX_NON_CONFORMANT_VISUAL_EXT = 0x800D;

  /+
  //enum GLX_INTEL_swap_event = 1;
  enum GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK = 0x04000000;
  enum GLX_EXCHANGE_COMPLETE_INTEL = 0x8180;
  enum GLX_COPY_COMPLETE_INTEL = 0x8181;
  enum GLX_FLIP_COMPLETE_INTEL = 0x8182;

  enum GLX_MESA_query_renderer = 1;
  enum GLX_RENDERER_VENDOR_ID_MESA = 0x8183;
  enum GLX_RENDERER_DEVICE_ID_MESA = 0x8184;
  enum GLX_RENDERER_VERSION_MESA = 0x8185;
  enum GLX_RENDERER_ACCELERATED_MESA = 0x8186;
  enum GLX_RENDERER_VIDEO_MEMORY_MESA = 0x8187;
  enum GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA = 0x8188;
  enum GLX_RENDERER_PREFERRED_PROFILE_MESA = 0x8189;
  enum GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA = 0x818A;
  enum GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA = 0x818B;
  enum GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA = 0x818C;
  enum GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA = 0x818D;
  enum GLX_RENDERER_ID_MESA = 0x818E;
  +/

  //enum GLX_NV_float_buffer = 1;
  enum GLX_FLOAT_COMPONENTS_NV = 0x20B0;

  //enum GLX_NV_multisample_coverage = 1;
  enum GLX_COVERAGE_SAMPLES_NV = 100001;
  enum GLX_COLOR_SAMPLES_NV = 0x20B3;

  /+
  enum GLX_NV_present_video = 1;
  enum GLX_NUM_VIDEO_SLOTS_NV = 0x20F0;

  enum GLX_NV_video_capture = 1;
  //typedef XID GLXVideoCaptureDeviceNV;
  enum GLX_DEVICE_ID_NV = 0x20CD;
  enum GLX_UNIQUE_ID_NV = 0x20CE;
  enum GLX_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20CF;

  enum GLX_NV_video_out = 1;
  //typedef unsigned int GLXVideoDeviceNV;
  enum GLX_VIDEO_OUT_COLOR_NV = 0x20C3;
  enum GLX_VIDEO_OUT_ALPHA_NV = 0x20C4;
  enum GLX_VIDEO_OUT_DEPTH_NV = 0x20C5;
  enum GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
  enum GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
  enum GLX_VIDEO_OUT_FRAME_NV = 0x20C8;
  enum GLX_VIDEO_OUT_FIELD_1_NV = 0x20C9;
  enum GLX_VIDEO_OUT_FIELD_2_NV = 0x20CA;
  enum GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20CB;
  enum GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20CC;

  enum GLX_OML_swap_method = 1;
  enum GLX_SWAP_METHOD_OML = 0x8060;
  enum GLX_SWAP_EXCHANGE_OML = 0x8061;
  enum GLX_SWAP_COPY_OML = 0x8062;
  enum GLX_SWAP_UNDEFINED_OML = 0x8063;

  enum GLX_SGIS_blended_overlay = 1;
  enum GLX_BLENDED_RGBA_SGIS = 0x8025;

  enum GLX_SGIS_multisample = 1;
  enum GLX_SAMPLE_BUFFERS_SGIS = 100000;
  enum GLX_SAMPLES_SGIS = 100001;

  enum GLX_SGIS_shared_multisample = 1;
  enum GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
  enum GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;

  enum GLX_SGIX_fbconfig = 1;
  //typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
  enum GLX_WINDOW_BIT_SGIX = 0x00000001;
  enum GLX_PIXMAP_BIT_SGIX = 0x00000002;
  enum GLX_RGBA_BIT_SGIX = 0x00000001;
  enum GLX_COLOR_INDEX_BIT_SGIX = 0x00000002;
  enum GLX_DRAWABLE_TYPE_SGIX = 0x8010;
  enum GLX_RENDER_TYPE_SGIX = 0x8011;
  enum GLX_X_RENDERABLE_SGIX = 0x8012;
  enum GLX_FBCONFIG_ID_SGIX = 0x8013;
  enum GLX_RGBA_TYPE_SGIX = 0x8014;
  enum GLX_COLOR_INDEX_TYPE_SGIX = 0x8015;

  enum GLX_SGIX_pbuffer = 1;
  enum GLX_PBUFFER_BIT_SGIX = 0x00000004;
  enum GLX_BUFFER_CLOBBER_MASK_SGIX = 0x08000000;
  enum GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001;
  enum GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002;
  enum GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004;
  enum GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008;
  enum GLX_AUX_BUFFERS_BIT_SGIX = 0x00000010;
  enum GLX_DEPTH_BUFFER_BIT_SGIX = 0x00000020;
  enum GLX_STENCIL_BUFFER_BIT_SGIX = 0x00000040;
  enum GLX_ACCUM_BUFFER_BIT_SGIX = 0x00000080;
  enum GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x00000100;
  enum GLX_MAX_PBUFFER_WIDTH_SGIX = 0x8016;
  enum GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x8017;
  enum GLX_MAX_PBUFFER_PIXELS_SGIX = 0x8018;
  enum GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019;
  enum GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801A;
  enum GLX_PRESERVED_CONTENTS_SGIX = 0x801B;
  enum GLX_LARGEST_PBUFFER_SGIX = 0x801C;
  enum GLX_WIDTH_SGIX = 0x801D;
  enum GLX_HEIGHT_SGIX = 0x801E;
  enum GLX_EVENT_MASK_SGIX = 0x801F;
  enum GLX_DAMAGED_SGIX = 0x8020;
  enum GLX_SAVED_SGIX = 0x8021;
  enum GLX_WINDOW_SGIX = 0x8022;
  enum GLX_PBUFFER_SGIX = 0x8023;

  enum GLX_SGIX_video_resize = 1;
  enum GLX_SYNC_FRAME_SGIX = 0x00000000;
  enum GLX_SYNC_SWAP_SGIX = 0x00000001;

  enum GLX_SGIX_visual_select_group = 1;
  enum GLX_VISUAL_SELECT_GROUP_SGIX = 0x8028;
  +/

  private alias arch_ulong = size_t;

  /+
  alias XID GLXContextID;
  alias XID GLXPixmap;
  alias XID GLXDrawable;
  alias XID GLXPbuffer;
  alias XID GLXWindow;
  alias XID GLXFBConfigID;
  alias void* GLXContext;


  XVisualInfo* glXChooseVisual(/*Display*/void *dpy, int screen, int *attrib_list);
  void glXCopyContext(/*Display*/void *dpy, /*GLXContext*/void* src, /*GLXContext*/void* dst, arch_ulong mask);
  /*GLXContext*/void* glXCreateContext(/*Display*/void *dpy, XVisualInfo *vis, /*GLXContext*/void* share_list, Bool direct);
  GLXPixmap glXCreateGLXPixmap(/*Display*/void *dpy, /*XVisualInfo*/void *vis, /*Pixmap*/size_t pixmap);
  void glXDestroyContext(/*Display*/void *dpy, /*GLXContext*/void* ctx);
  void glXDestroyGLXPixmap(/*Display*/void *dpy, /*GLXPixmap*/size_t pix);
  int glXGetConfig(/*Display*/void *dpy, /*XVisualInfo*/void *vis, int attrib, int *value);
  /*GLXContext*/void* glXGetCurrentContext();
  GLXDrawable glXGetCurrentDrawable();
  Bool glXIsDirect(/*Display*/void *dpy, /*GLXContext*/void* ctx);
  Bool glXMakeCurrent(/*Display*/void *dpy, /*GLXDrawable*/size_t drawable, /*GLXContext*/void* ctx);
  Bool glXQueryExtension(/*Display*/void *dpy, int *error_base, int *event_base);
  Bool glXQueryVersion(/*Display*/void *dpy, int *major, int *minor);
  void glXSwapBuffers(/*Display*/void *dpy, /*GLXDrawable*/size_t drawable);
  void glXUseXFont(/*Font*/size_t font, int first, int count, int list_base);
  void glXWaitGL();
  void glXWaitX();
  +/
}

public bool glHasFunction (const(char)[] name) {
  if (name.length == 0 || name.length > 255) return false; // arbitrary limit
  char[256] xname = 0;
  xname[0..name.length] = name[];
  return (glbindGetProcAddress(xname.ptr) !is null);
}

// convenient template checker
public bool glHasFunc(string name) () {
  static int flag = -1;
  if (flag < 0) flag = (glHasFunction(name) ? 1 : 0);
  return (flag == 1);
}


extern(System) {
alias GLvoid = void;
alias GLintptr = ptrdiff_t;
alias GLsizei = int;
alias GLchar = char;
alias GLcharARB = byte;
alias GLushort = ushort;
alias GLint64EXT = long;
alias GLshort = short;
alias GLuint64 = ulong;
alias GLhalfARB = ushort;
alias GLubyte = ubyte;
alias GLdouble = double;
alias GLhandleARB = uint;
alias GLint64 = long;
alias GLenum = uint;
alias GLeglImageOES = void*;
alias GLintptrARB = ptrdiff_t;
alias GLsizeiptr = ptrdiff_t;
alias GLint = int;
alias GLboolean = ubyte;
alias GLbitfield = uint;
alias GLsizeiptrARB = ptrdiff_t;
alias GLfloat = float;
alias GLuint64EXT = ulong;
alias GLclampf = float;
alias GLbyte = byte;
alias GLclampd = double;
alias GLuint = uint;
alias GLvdpauSurfaceNV = ptrdiff_t;
alias GLfixed = int;
alias GLhalf = ushort;
alias GLclampx = int;
alias GLhalfNV = ushort;
alias GLeglClientBufferEXT = void*;
alias GLsync = void*;
alias GLDEBUGPROC = void function (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* message, const(void)* userParam);
alias GLDEBUGPROCARB = GLDEBUGPROC;
alias GLDEBUGPROCKHR = GLDEBUGPROC;
alias GLDEBUGPROCAMD = void function (GLuint id, GLenum category, GLenum severity, GLsizei length, const(GLchar)* message,void* userParam);
alias GLVULKANPROCNV = void function ();
//struct __cl_context; alias _cl_context = __cl_context*;
//struct __cl_event; alias _cl_event = __cl_event*;

//mixin(import("glz.d"));

// enums
enum uint GL_CURRENT_BIT = 0x00000001U;
enum uint GL_POINT_BIT = 0x00000002U;
enum uint GL_LINE_BIT = 0x00000004U;
enum uint GL_POLYGON_BIT = 0x00000008U;
enum uint GL_POLYGON_STIPPLE_BIT = 0x00000010U;
enum uint GL_PIXEL_MODE_BIT = 0x00000020U;
enum uint GL_LIGHTING_BIT = 0x00000040U;
enum uint GL_FOG_BIT = 0x00000080U;
enum uint GL_DEPTH_BUFFER_BIT = 0x00000100U;
enum uint GL_ACCUM_BUFFER_BIT = 0x00000200U;
enum uint GL_STENCIL_BUFFER_BIT = 0x00000400U;
enum uint GL_VIEWPORT_BIT = 0x00000800U;
enum uint GL_TRANSFORM_BIT = 0x00001000U;
enum uint GL_ENABLE_BIT = 0x00002000U;
enum uint GL_COLOR_BUFFER_BIT = 0x00004000U;
enum uint GL_HINT_BIT = 0x00008000U;
enum uint GL_EVAL_BIT = 0x00010000U;
enum uint GL_LIST_BIT = 0x00020000U;
enum uint GL_TEXTURE_BIT = 0x00040000U;
enum uint GL_SCISSOR_BIT = 0x00080000U;
enum uint GL_MULTISAMPLE_BIT = 0x20000000U;
enum uint GL_MULTISAMPLE_BIT_ARB = 0x20000000U;
enum uint GL_MULTISAMPLE_BIT_EXT = 0x20000000U;
enum uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000U;
enum uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFFU;
enum uint GL_COVERAGE_BUFFER_BIT_NV = 0x00008000U;
enum uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001U;
enum uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002U;
enum uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFFU;
enum uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001U;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002U;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002U;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004U;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004U;
enum uint GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008U;
enum uint GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010U;
enum uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001U;
enum uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002U;
enum uint GL_MAP_READ_BIT = 0x0001U;
enum uint GL_MAP_READ_BIT_EXT = 0x0001U;
enum uint GL_MAP_WRITE_BIT = 0x0002U;
enum uint GL_MAP_WRITE_BIT_EXT = 0x0002U;
enum uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004U;
enum uint GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004U;
enum uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008U;
enum uint GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008U;
enum uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010U;
enum uint GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010U;
enum uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020U;
enum uint GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020U;
enum uint GL_MAP_PERSISTENT_BIT = 0x0040U;
enum uint GL_MAP_PERSISTENT_BIT_EXT = 0x0040U;
enum uint GL_MAP_COHERENT_BIT = 0x0080U;
enum uint GL_MAP_COHERENT_BIT_EXT = 0x0080U;
enum uint GL_DYNAMIC_STORAGE_BIT = 0x0100U;
enum uint GL_DYNAMIC_STORAGE_BIT_EXT = 0x0100U;
enum uint GL_CLIENT_STORAGE_BIT = 0x0200U;
enum uint GL_CLIENT_STORAGE_BIT_EXT = 0x0200U;
enum uint GL_SPARSE_STORAGE_BIT_ARB = 0x0400U;
enum uint GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800U;
enum uint GL_PER_GPU_STORAGE_BIT_NV = 0x0800U;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001U;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001U;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002U;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002U;
enum uint GL_UNIFORM_BARRIER_BIT = 0x00000004U;
enum uint GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004U;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008U;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008U;
enum uint GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010U;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020U;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020U;
enum uint GL_COMMAND_BARRIER_BIT = 0x00000040U;
enum uint GL_COMMAND_BARRIER_BIT_EXT = 0x00000040U;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080U;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080U;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100U;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100U;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200U;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200U;
enum uint GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400U;
enum uint GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400U;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800U;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800U;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000U;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000U;
enum uint GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000U;
enum uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000U;
enum uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000U;
enum uint GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000U;
enum uint GL_ALL_BARRIER_BITS = 0xFFFFFFFFU;
enum uint GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFFU;
enum uint GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001U;
enum uint GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002U;
enum uint GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004U;
enum uint GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008U;
enum uint GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFFU;
enum uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001U;
enum uint GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001U;
enum uint GL_VERTEX_SHADER_BIT = 0x00000001U;
enum uint GL_VERTEX_SHADER_BIT_EXT = 0x00000001U;
enum uint GL_FRAGMENT_SHADER_BIT = 0x00000002U;
enum uint GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002U;
enum uint GL_GEOMETRY_SHADER_BIT = 0x00000004U;
enum uint GL_GEOMETRY_SHADER_BIT_EXT = 0x00000004U;
enum uint GL_GEOMETRY_SHADER_BIT_OES = 0x00000004U;
enum uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008U;
enum uint GL_TESS_CONTROL_SHADER_BIT_EXT = 0x00000008U;
enum uint GL_TESS_CONTROL_SHADER_BIT_OES = 0x00000008U;
enum uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010U;
enum uint GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010U;
enum uint GL_TESS_EVALUATION_SHADER_BIT_OES = 0x00000010U;
enum uint GL_COMPUTE_SHADER_BIT = 0x00000020U;
enum uint GL_ALL_SHADER_BITS = 0xFFFFFFFFU;
enum uint GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFFU;
enum uint GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001U;
enum uint GL_RED_BIT_ATI = 0x00000001U;
enum uint GL_GREEN_BIT_ATI = 0x00000002U;
enum uint GL_BLUE_BIT_ATI = 0x00000004U;
enum uint GL_2X_BIT_ATI = 0x00000001U;
enum uint GL_4X_BIT_ATI = 0x00000002U;
enum uint GL_8X_BIT_ATI = 0x00000004U;
enum uint GL_HALF_BIT_ATI = 0x00000008U;
enum uint GL_QUARTER_BIT_ATI = 0x00000010U;
enum uint GL_EIGHTH_BIT_ATI = 0x00000020U;
enum uint GL_SATURATE_BIT_ATI = 0x00000040U;
enum uint GL_COMP_BIT_ATI = 0x00000002U;
enum uint GL_NEGATE_BIT_ATI = 0x00000004U;
enum uint GL_BIAS_BIT_ATI = 0x00000008U;
enum uint GL_TRACE_OPERATIONS_BIT_MESA = 0x0001U;
enum uint GL_TRACE_PRIMITIVES_BIT_MESA = 0x0002U;
enum uint GL_TRACE_ARRAYS_BIT_MESA = 0x0004U;
enum uint GL_TRACE_TEXTURES_BIT_MESA = 0x0008U;
enum uint GL_TRACE_PIXELS_BIT_MESA = 0x0010U;
enum uint GL_TRACE_ERRORS_BIT_MESA = 0x0020U;
enum uint GL_TRACE_ALL_BITS_MESA = 0xFFFFU;
enum uint GL_BOLD_BIT_NV = 0x01U;
enum uint GL_ITALIC_BIT_NV = 0x02U;
enum uint GL_GLYPH_WIDTH_BIT_NV = 0x01U;
enum uint GL_GLYPH_HEIGHT_BIT_NV = 0x02U;
enum uint GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04U;
enum uint GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08U;
enum uint GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10U;
enum uint GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20U;
enum uint GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40U;
enum uint GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80U;
enum uint GL_GLYPH_HAS_KERNING_BIT_NV = 0x100U;
enum uint GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000U;
enum uint GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000U;
enum uint GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000U;
enum uint GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000U;
enum uint GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000U;
enum uint GL_FONT_ASCENDER_BIT_NV = 0x00200000U;
enum uint GL_FONT_DESCENDER_BIT_NV = 0x00400000U;
enum uint GL_FONT_HEIGHT_BIT_NV = 0x00800000U;
enum uint GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000U;
enum uint GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000U;
enum uint GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000U;
enum uint GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000U;
enum uint GL_FONT_HAS_KERNING_BIT_NV = 0x10000000U;
enum uint GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000U;
enum uint GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000U;
enum uint GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001U;
enum uint GL_VERTEX23_BIT_PGI = 0x00000004U;
enum uint GL_VERTEX4_BIT_PGI = 0x00000008U;
enum uint GL_COLOR3_BIT_PGI = 0x00010000U;
enum uint GL_COLOR4_BIT_PGI = 0x00020000U;
enum uint GL_EDGEFLAG_BIT_PGI = 0x00040000U;
enum uint GL_INDEX_BIT_PGI = 0x00080000U;
enum uint GL_MAT_AMBIENT_BIT_PGI = 0x00100000U;
enum uint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000U;
enum uint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000U;
enum uint GL_MAT_EMISSION_BIT_PGI = 0x00800000U;
enum uint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000U;
enum uint GL_MAT_SHININESS_BIT_PGI = 0x02000000U;
enum uint GL_MAT_SPECULAR_BIT_PGI = 0x04000000U;
enum uint GL_NORMAL_BIT_PGI = 0x08000000U;
enum uint GL_TEXCOORD1_BIT_PGI = 0x10000000U;
enum uint GL_TEXCOORD2_BIT_PGI = 0x20000000U;
enum uint GL_TEXCOORD3_BIT_PGI = 0x40000000U;
enum uint GL_TEXCOORD4_BIT_PGI = 0x80000000U;
enum uint GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001U;
enum uint GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002U;
enum uint GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004U;
enum uint GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008U;
enum uint GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010U;
enum uint GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020U;
enum uint GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040U;
enum uint GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080U;
enum uint GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100U;
enum uint GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200U;
enum uint GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400U;
enum uint GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800U;
enum uint GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000U;
enum uint GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000U;
enum uint GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000U;
enum uint GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000U;
enum uint GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000U;
enum uint GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000U;
enum uint GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000U;
enum uint GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000U;
enum uint GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000U;
enum uint GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000U;
enum uint GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000U;
enum uint GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000U;
enum uint GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000U;
enum uint GL_FOVEATION_ENABLE_BIT_QCOM = 0x00000001U;
enum uint GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002U;
enum uint GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001U;
enum uint GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002U;
enum uint GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000U;
enum uint GL_NOP_COMMAND_NV = 0x0001U;
enum uint GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002U;
enum uint GL_DRAW_ARRAYS_COMMAND_NV = 0x0003U;
enum uint GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004U;
enum uint GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005U;
enum uint GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006U;
enum uint GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007U;
enum uint GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008U;
enum uint GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009U;
enum uint GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000AU;
enum uint GL_BLEND_COLOR_COMMAND_NV = 0x000BU;
enum uint GL_STENCIL_REF_COMMAND_NV = 0x000CU;
enum uint GL_LINE_WIDTH_COMMAND_NV = 0x000DU;
enum uint GL_POLYGON_OFFSET_COMMAND_NV = 0x000EU;
enum uint GL_ALPHA_REF_COMMAND_NV = 0x000FU;
enum uint GL_VIEWPORT_COMMAND_NV = 0x0010U;
enum uint GL_SCISSOR_COMMAND_NV = 0x0011U;
enum uint GL_FRONT_FACE_COMMAND_NV = 0x0012U;
enum uint GL_LAYOUT_DEFAULT_INTEL = 0U;
enum uint GL_LAYOUT_LINEAR_INTEL = 1U;
enum uint GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2U;
enum uint GL_CLOSE_PATH_NV = 0x00U;
enum uint GL_MOVE_TO_NV = 0x02U;
enum uint GL_RELATIVE_MOVE_TO_NV = 0x03U;
enum uint GL_LINE_TO_NV = 0x04U;
enum uint GL_RELATIVE_LINE_TO_NV = 0x05U;
enum uint GL_HORIZONTAL_LINE_TO_NV = 0x06U;
enum uint GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07U;
enum uint GL_VERTICAL_LINE_TO_NV = 0x08U;
enum uint GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09U;
enum uint GL_QUADRATIC_CURVE_TO_NV = 0x0AU;
enum uint GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0BU;
enum uint GL_CUBIC_CURVE_TO_NV = 0x0CU;
enum uint GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0DU;
enum uint GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0EU;
enum uint GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0FU;
enum uint GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10U;
enum uint GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11U;
enum uint GL_SMALL_CCW_ARC_TO_NV = 0x12U;
enum uint GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13U;
enum uint GL_SMALL_CW_ARC_TO_NV = 0x14U;
enum uint GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15U;
enum uint GL_LARGE_CCW_ARC_TO_NV = 0x16U;
enum uint GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17U;
enum uint GL_LARGE_CW_ARC_TO_NV = 0x18U;
enum uint GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19U;
enum uint GL_CONIC_CURVE_TO_NV = 0x1AU;
enum uint GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1BU;
enum uint GL_SHARED_EDGE_NV = 0xC0U;
enum uint GL_ROUNDED_RECT_NV = 0xE8U;
enum uint GL_RELATIVE_ROUNDED_RECT_NV = 0xE9U;
enum uint GL_ROUNDED_RECT2_NV = 0xEAU;
enum uint GL_RELATIVE_ROUNDED_RECT2_NV = 0xEBU;
enum uint GL_ROUNDED_RECT4_NV = 0xECU;
enum uint GL_RELATIVE_ROUNDED_RECT4_NV = 0xEDU;
enum uint GL_ROUNDED_RECT8_NV = 0xEEU;
enum uint GL_RELATIVE_ROUNDED_RECT8_NV = 0xEFU;
enum uint GL_RESTART_PATH_NV = 0xF0U;
enum uint GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2U;
enum uint GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4U;
enum uint GL_RECT_NV = 0xF6U;
enum uint GL_RELATIVE_RECT_NV = 0xF7U;
enum uint GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8U;
enum uint GL_CIRCULAR_CW_ARC_TO_NV = 0xFAU;
enum uint GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFCU;
enum uint GL_ARC_TO_NV = 0xFEU;
enum uint GL_RELATIVE_ARC_TO_NV = 0xFFU;
enum uint GL_NEXT_BUFFER_NV = -2U;
enum uint GL_SKIP_COMPONENTS4_NV = -3U;
enum uint GL_SKIP_COMPONENTS3_NV = -4U;
enum uint GL_SKIP_COMPONENTS2_NV = -5U;
enum uint GL_SKIP_COMPONENTS1_NV = -6U;
enum uint GL_RESTART_SUN = 0x0001U;
enum uint GL_REPLACE_MIDDLE_SUN = 0x0002U;
enum uint GL_REPLACE_OLDEST_SUN = 0x0003U;
enum uint GL_FALSE = 0U;
enum uint GL_NO_ERROR = 0U;
enum uint GL_ZERO = 0U;
enum uint GL_NONE = 0U;
enum uint GL_NONE_OES = 0U;
enum uint GL_TRUE = 1U;
enum uint GL_ONE = 1U;
enum uint GL_INVALID_INDEX = 0xFFFFFFFFU;
enum uint GL_ALL_PIXELS_AMD = 0xFFFFFFFFU;
enum ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFUL;
enum ulong GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFFUL;
enum uint GL_VERSION_ES_CL_1_0 = 1U;
enum uint GL_VERSION_ES_CM_1_1 = 1U;
enum uint GL_VERSION_ES_CL_1_1 = 1U;
enum uint GL_UUID_SIZE_EXT = 16U;
enum uint GL_LUID_SIZE_EXT = 8U;
enum uint GL_POINTS = 0x0000U;
enum uint GL_LINES = 0x0001U;
enum uint GL_LINE_LOOP = 0x0002U;
enum uint GL_LINE_STRIP = 0x0003U;
enum uint GL_TRIANGLES = 0x0004U;
enum uint GL_TRIANGLE_STRIP = 0x0005U;
enum uint GL_TRIANGLE_FAN = 0x0006U;
enum uint GL_QUADS = 0x0007U;
enum uint GL_QUADS_EXT = 0x0007U;
enum uint GL_QUADS_OES = 0x0007U;
enum uint GL_QUAD_STRIP = 0x0008U;
enum uint GL_POLYGON = 0x0009U;
enum uint GL_LINES_ADJACENCY = 0x000AU;
enum uint GL_LINES_ADJACENCY_ARB = 0x000AU;
enum uint GL_LINES_ADJACENCY_EXT = 0x000AU;
enum uint GL_LINES_ADJACENCY_OES = 0x000AU;
enum uint GL_LINE_STRIP_ADJACENCY = 0x000BU;
enum uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000BU;
enum uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000BU;
enum uint GL_LINE_STRIP_ADJACENCY_OES = 0x000BU;
enum uint GL_TRIANGLES_ADJACENCY = 0x000CU;
enum uint GL_TRIANGLES_ADJACENCY_ARB = 0x000CU;
enum uint GL_TRIANGLES_ADJACENCY_EXT = 0x000CU;
enum uint GL_TRIANGLES_ADJACENCY_OES = 0x000CU;
enum uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000DU;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000DU;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000DU;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_OES = 0x000DU;
enum uint GL_PATCHES = 0x000EU;
enum uint GL_PATCHES_EXT = 0x000EU;
enum uint GL_PATCHES_OES = 0x000EU;
enum uint GL_ACCUM = 0x0100U;
enum uint GL_LOAD = 0x0101U;
enum uint GL_RETURN = 0x0102U;
enum uint GL_MULT = 0x0103U;
enum uint GL_ADD = 0x0104U;
enum uint GL_NEVER = 0x0200U;
enum uint GL_LESS = 0x0201U;
enum uint GL_EQUAL = 0x0202U;
enum uint GL_LEQUAL = 0x0203U;
enum uint GL_GREATER = 0x0204U;
enum uint GL_NOTEQUAL = 0x0205U;
enum uint GL_GEQUAL = 0x0206U;
enum uint GL_ALWAYS = 0x0207U;
enum uint GL_SRC_COLOR = 0x0300U;
enum uint GL_ONE_MINUS_SRC_COLOR = 0x0301U;
enum uint GL_SRC_ALPHA = 0x0302U;
enum uint GL_ONE_MINUS_SRC_ALPHA = 0x0303U;
enum uint GL_DST_ALPHA = 0x0304U;
enum uint GL_ONE_MINUS_DST_ALPHA = 0x0305U;
enum uint GL_DST_COLOR = 0x0306U;
enum uint GL_ONE_MINUS_DST_COLOR = 0x0307U;
enum uint GL_SRC_ALPHA_SATURATE = 0x0308U;
enum uint GL_SRC_ALPHA_SATURATE_EXT = 0x0308U;
enum uint GL_FRONT_LEFT = 0x0400U;
enum uint GL_FRONT_RIGHT = 0x0401U;
enum uint GL_BACK_LEFT = 0x0402U;
enum uint GL_BACK_RIGHT = 0x0403U;
enum uint GL_FRONT = 0x0404U;
enum uint GL_BACK = 0x0405U;
enum uint GL_LEFT = 0x0406U;
enum uint GL_RIGHT = 0x0407U;
enum uint GL_FRONT_AND_BACK = 0x0408U;
enum uint GL_AUX0 = 0x0409U;
enum uint GL_AUX1 = 0x040AU;
enum uint GL_AUX2 = 0x040BU;
enum uint GL_AUX3 = 0x040CU;
enum uint GL_INVALID_ENUM = 0x0500U;
enum uint GL_INVALID_VALUE = 0x0501U;
enum uint GL_INVALID_OPERATION = 0x0502U;
enum uint GL_STACK_OVERFLOW = 0x0503U;
enum uint GL_STACK_OVERFLOW_KHR = 0x0503U;
enum uint GL_STACK_UNDERFLOW = 0x0504U;
enum uint GL_STACK_UNDERFLOW_KHR = 0x0504U;
enum uint GL_OUT_OF_MEMORY = 0x0505U;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506U;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506U;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506U;
enum uint GL_CONTEXT_LOST = 0x0507U;
enum uint GL_CONTEXT_LOST_KHR = 0x0507U;
enum uint GL_2D = 0x0600U;
enum uint GL_3D = 0x0601U;
enum uint GL_3D_COLOR = 0x0602U;
enum uint GL_3D_COLOR_TEXTURE = 0x0603U;
enum uint GL_4D_COLOR_TEXTURE = 0x0604U;
enum uint GL_PASS_THROUGH_TOKEN = 0x0700U;
enum uint GL_POINT_TOKEN = 0x0701U;
enum uint GL_LINE_TOKEN = 0x0702U;
enum uint GL_POLYGON_TOKEN = 0x0703U;
enum uint GL_BITMAP_TOKEN = 0x0704U;
enum uint GL_DRAW_PIXEL_TOKEN = 0x0705U;
enum uint GL_COPY_PIXEL_TOKEN = 0x0706U;
enum uint GL_LINE_RESET_TOKEN = 0x0707U;
enum uint GL_EXP = 0x0800U;
enum uint GL_EXP2 = 0x0801U;
enum uint GL_CW = 0x0900U;
enum uint GL_CCW = 0x0901U;
enum uint GL_COEFF = 0x0A00U;
enum uint GL_ORDER = 0x0A01U;
enum uint GL_DOMAIN = 0x0A02U;
enum uint GL_CURRENT_COLOR = 0x0B00U;
enum uint GL_CURRENT_INDEX = 0x0B01U;
enum uint GL_CURRENT_NORMAL = 0x0B02U;
enum uint GL_CURRENT_TEXTURE_COORDS = 0x0B03U;
enum uint GL_CURRENT_RASTER_COLOR = 0x0B04U;
enum uint GL_CURRENT_RASTER_INDEX = 0x0B05U;
enum uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06U;
enum uint GL_CURRENT_RASTER_POSITION = 0x0B07U;
enum uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08U;
enum uint GL_CURRENT_RASTER_DISTANCE = 0x0B09U;
enum uint GL_POINT_SMOOTH = 0x0B10U;
enum uint GL_POINT_SIZE = 0x0B11U;
enum uint GL_POINT_SIZE_RANGE = 0x0B12U;
enum uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12U;
enum uint GL_POINT_SIZE_GRANULARITY = 0x0B13U;
enum uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13U;
enum uint GL_LINE_SMOOTH = 0x0B20U;
enum uint GL_LINE_WIDTH = 0x0B21U;
enum uint GL_LINE_WIDTH_RANGE = 0x0B22U;
enum uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22U;
enum uint GL_LINE_WIDTH_GRANULARITY = 0x0B23U;
enum uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23U;
enum uint GL_LINE_STIPPLE = 0x0B24U;
enum uint GL_LINE_STIPPLE_PATTERN = 0x0B25U;
enum uint GL_LINE_STIPPLE_REPEAT = 0x0B26U;
enum uint GL_LIST_MODE = 0x0B30U;
enum uint GL_MAX_LIST_NESTING = 0x0B31U;
enum uint GL_LIST_BASE = 0x0B32U;
enum uint GL_LIST_INDEX = 0x0B33U;
enum uint GL_POLYGON_MODE = 0x0B40U;
enum uint GL_POLYGON_MODE_NV = 0x0B40U;
enum uint GL_POLYGON_SMOOTH = 0x0B41U;
enum uint GL_POLYGON_STIPPLE = 0x0B42U;
enum uint GL_EDGE_FLAG = 0x0B43U;
enum uint GL_CULL_FACE = 0x0B44U;
enum uint GL_CULL_FACE_MODE = 0x0B45U;
enum uint GL_FRONT_FACE = 0x0B46U;
enum uint GL_LIGHTING = 0x0B50U;
enum uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51U;
enum uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52U;
enum uint GL_LIGHT_MODEL_AMBIENT = 0x0B53U;
enum uint GL_SHADE_MODEL = 0x0B54U;
enum uint GL_COLOR_MATERIAL_FACE = 0x0B55U;
enum uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56U;
enum uint GL_COLOR_MATERIAL = 0x0B57U;
enum uint GL_FOG = 0x0B60U;
enum uint GL_FOG_INDEX = 0x0B61U;
enum uint GL_FOG_DENSITY = 0x0B62U;
enum uint GL_FOG_START = 0x0B63U;
enum uint GL_FOG_END = 0x0B64U;
enum uint GL_FOG_MODE = 0x0B65U;
enum uint GL_FOG_COLOR = 0x0B66U;
enum uint GL_DEPTH_RANGE = 0x0B70U;
enum uint GL_DEPTH_TEST = 0x0B71U;
enum uint GL_DEPTH_WRITEMASK = 0x0B72U;
enum uint GL_DEPTH_CLEAR_VALUE = 0x0B73U;
enum uint GL_DEPTH_FUNC = 0x0B74U;
enum uint GL_ACCUM_CLEAR_VALUE = 0x0B80U;
enum uint GL_STENCIL_TEST = 0x0B90U;
enum uint GL_STENCIL_CLEAR_VALUE = 0x0B91U;
enum uint GL_STENCIL_FUNC = 0x0B92U;
enum uint GL_STENCIL_VALUE_MASK = 0x0B93U;
enum uint GL_STENCIL_FAIL = 0x0B94U;
enum uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95U;
enum uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96U;
enum uint GL_STENCIL_REF = 0x0B97U;
enum uint GL_STENCIL_WRITEMASK = 0x0B98U;
enum uint GL_MATRIX_MODE = 0x0BA0U;
enum uint GL_NORMALIZE = 0x0BA1U;
enum uint GL_VIEWPORT = 0x0BA2U;
enum uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3U;
enum uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3U;
enum uint GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3U;
enum uint GL_PROJECTION_STACK_DEPTH = 0x0BA4U;
enum uint GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4U;
enum uint GL_TEXTURE_STACK_DEPTH = 0x0BA5U;
enum uint GL_MODELVIEW_MATRIX = 0x0BA6U;
enum uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6U;
enum uint GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6U;
enum uint GL_PROJECTION_MATRIX = 0x0BA7U;
enum uint GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7U;
enum uint GL_TEXTURE_MATRIX = 0x0BA8U;
enum uint GL_ATTRIB_STACK_DEPTH = 0x0BB0U;
enum uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1U;
enum uint GL_ALPHA_TEST = 0x0BC0U;
enum uint GL_ALPHA_TEST_QCOM = 0x0BC0U;
enum uint GL_ALPHA_TEST_FUNC = 0x0BC1U;
enum uint GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1U;
enum uint GL_ALPHA_TEST_REF = 0x0BC2U;
enum uint GL_ALPHA_TEST_REF_QCOM = 0x0BC2U;
enum uint GL_DITHER = 0x0BD0U;
enum uint GL_BLEND_DST = 0x0BE0U;
enum uint GL_BLEND_SRC = 0x0BE1U;
enum uint GL_BLEND = 0x0BE2U;
enum uint GL_LOGIC_OP_MODE = 0x0BF0U;
enum uint GL_INDEX_LOGIC_OP = 0x0BF1U;
enum uint GL_LOGIC_OP = 0x0BF1U;
enum uint GL_COLOR_LOGIC_OP = 0x0BF2U;
enum uint GL_AUX_BUFFERS = 0x0C00U;
enum uint GL_DRAW_BUFFER = 0x0C01U;
enum uint GL_DRAW_BUFFER_EXT = 0x0C01U;
enum uint GL_READ_BUFFER = 0x0C02U;
enum uint GL_READ_BUFFER_EXT = 0x0C02U;
enum uint GL_READ_BUFFER_NV = 0x0C02U;
enum uint GL_SCISSOR_BOX = 0x0C10U;
enum uint GL_SCISSOR_TEST = 0x0C11U;
enum uint GL_INDEX_CLEAR_VALUE = 0x0C20U;
enum uint GL_INDEX_WRITEMASK = 0x0C21U;
enum uint GL_COLOR_CLEAR_VALUE = 0x0C22U;
enum uint GL_COLOR_WRITEMASK = 0x0C23U;
enum uint GL_INDEX_MODE = 0x0C30U;
enum uint GL_RGBA_MODE = 0x0C31U;
enum uint GL_DOUBLEBUFFER = 0x0C32U;
enum uint GL_STEREO = 0x0C33U;
enum uint GL_RENDER_MODE = 0x0C40U;
enum uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50U;
enum uint GL_POINT_SMOOTH_HINT = 0x0C51U;
enum uint GL_LINE_SMOOTH_HINT = 0x0C52U;
enum uint GL_POLYGON_SMOOTH_HINT = 0x0C53U;
enum uint GL_FOG_HINT = 0x0C54U;
enum uint GL_TEXTURE_GEN_S = 0x0C60U;
enum uint GL_TEXTURE_GEN_T = 0x0C61U;
enum uint GL_TEXTURE_GEN_R = 0x0C62U;
enum uint GL_TEXTURE_GEN_Q = 0x0C63U;
enum uint GL_PIXEL_MAP_I_TO_I = 0x0C70U;
enum uint GL_PIXEL_MAP_S_TO_S = 0x0C71U;
enum uint GL_PIXEL_MAP_I_TO_R = 0x0C72U;
enum uint GL_PIXEL_MAP_I_TO_G = 0x0C73U;
enum uint GL_PIXEL_MAP_I_TO_B = 0x0C74U;
enum uint GL_PIXEL_MAP_I_TO_A = 0x0C75U;
enum uint GL_PIXEL_MAP_R_TO_R = 0x0C76U;
enum uint GL_PIXEL_MAP_G_TO_G = 0x0C77U;
enum uint GL_PIXEL_MAP_B_TO_B = 0x0C78U;
enum uint GL_PIXEL_MAP_A_TO_A = 0x0C79U;
enum uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0U;
enum uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1U;
enum uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2U;
enum uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3U;
enum uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4U;
enum uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5U;
enum uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6U;
enum uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7U;
enum uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8U;
enum uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9U;
enum uint GL_UNPACK_SWAP_BYTES = 0x0CF0U;
enum uint GL_UNPACK_LSB_FIRST = 0x0CF1U;
enum uint GL_UNPACK_ROW_LENGTH = 0x0CF2U;
enum uint GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2U;
enum uint GL_UNPACK_SKIP_ROWS = 0x0CF3U;
enum uint GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3U;
enum uint GL_UNPACK_SKIP_PIXELS = 0x0CF4U;
enum uint GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4U;
enum uint GL_UNPACK_ALIGNMENT = 0x0CF5U;
enum uint GL_PACK_SWAP_BYTES = 0x0D00U;
enum uint GL_PACK_LSB_FIRST = 0x0D01U;
enum uint GL_PACK_ROW_LENGTH = 0x0D02U;
enum uint GL_PACK_SKIP_ROWS = 0x0D03U;
enum uint GL_PACK_SKIP_PIXELS = 0x0D04U;
enum uint GL_PACK_ALIGNMENT = 0x0D05U;
enum uint GL_MAP_COLOR = 0x0D10U;
enum uint GL_MAP_STENCIL = 0x0D11U;
enum uint GL_INDEX_SHIFT = 0x0D12U;
enum uint GL_INDEX_OFFSET = 0x0D13U;
enum uint GL_RED_SCALE = 0x0D14U;
enum uint GL_RED_BIAS = 0x0D15U;
enum uint GL_ZOOM_X = 0x0D16U;
enum uint GL_ZOOM_Y = 0x0D17U;
enum uint GL_GREEN_SCALE = 0x0D18U;
enum uint GL_GREEN_BIAS = 0x0D19U;
enum uint GL_BLUE_SCALE = 0x0D1AU;
enum uint GL_BLUE_BIAS = 0x0D1BU;
enum uint GL_ALPHA_SCALE = 0x0D1CU;
enum uint GL_ALPHA_BIAS = 0x0D1DU;
enum uint GL_DEPTH_SCALE = 0x0D1EU;
enum uint GL_DEPTH_BIAS = 0x0D1FU;
enum uint GL_MAX_EVAL_ORDER = 0x0D30U;
enum uint GL_MAX_LIGHTS = 0x0D31U;
enum uint GL_MAX_CLIP_PLANES = 0x0D32U;
enum uint GL_MAX_CLIP_PLANES_IMG = 0x0D32U;
enum uint GL_MAX_CLIP_DISTANCES = 0x0D32U;
enum uint GL_MAX_CLIP_DISTANCES_EXT = 0x0D32U;
enum uint GL_MAX_CLIP_DISTANCES_APPLE = 0x0D32U;
enum uint GL_MAX_TEXTURE_SIZE = 0x0D33U;
enum uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34U;
enum uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35U;
enum uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36U;
enum uint GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36U;
enum uint GL_MAX_NAME_STACK_DEPTH = 0x0D37U;
enum uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38U;
enum uint GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38U;
enum uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39U;
enum uint GL_MAX_VIEWPORT_DIMS = 0x0D3AU;
enum uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3BU;
enum uint GL_SUBPIXEL_BITS = 0x0D50U;
enum uint GL_INDEX_BITS = 0x0D51U;
enum uint GL_RED_BITS = 0x0D52U;
enum uint GL_GREEN_BITS = 0x0D53U;
enum uint GL_BLUE_BITS = 0x0D54U;
enum uint GL_ALPHA_BITS = 0x0D55U;
enum uint GL_DEPTH_BITS = 0x0D56U;
enum uint GL_STENCIL_BITS = 0x0D57U;
enum uint GL_ACCUM_RED_BITS = 0x0D58U;
enum uint GL_ACCUM_GREEN_BITS = 0x0D59U;
enum uint GL_ACCUM_BLUE_BITS = 0x0D5AU;
enum uint GL_ACCUM_ALPHA_BITS = 0x0D5BU;
enum uint GL_NAME_STACK_DEPTH = 0x0D70U;
enum uint GL_AUTO_NORMAL = 0x0D80U;
enum uint GL_MAP1_COLOR_4 = 0x0D90U;
enum uint GL_MAP1_INDEX = 0x0D91U;
enum uint GL_MAP1_NORMAL = 0x0D92U;
enum uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93U;
enum uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94U;
enum uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95U;
enum uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96U;
enum uint GL_MAP1_VERTEX_3 = 0x0D97U;
enum uint GL_MAP1_VERTEX_4 = 0x0D98U;
enum uint GL_MAP2_COLOR_4 = 0x0DB0U;
enum uint GL_MAP2_INDEX = 0x0DB1U;
enum uint GL_MAP2_NORMAL = 0x0DB2U;
enum uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3U;
enum uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4U;
enum uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5U;
enum uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6U;
enum uint GL_MAP2_VERTEX_3 = 0x0DB7U;
enum uint GL_MAP2_VERTEX_4 = 0x0DB8U;
enum uint GL_MAP1_GRID_DOMAIN = 0x0DD0U;
enum uint GL_MAP1_GRID_SEGMENTS = 0x0DD1U;
enum uint GL_MAP2_GRID_DOMAIN = 0x0DD2U;
enum uint GL_MAP2_GRID_SEGMENTS = 0x0DD3U;
enum uint GL_TEXTURE_1D = 0x0DE0U;
enum uint GL_TEXTURE_2D = 0x0DE1U;
enum uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0U;
enum uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1U;
enum uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2U;
enum uint GL_SELECTION_BUFFER_POINTER = 0x0DF3U;
enum uint GL_SELECTION_BUFFER_SIZE = 0x0DF4U;
enum uint GL_TEXTURE_WIDTH = 0x1000U;
enum uint GL_TEXTURE_HEIGHT = 0x1001U;
enum uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003U;
enum uint GL_TEXTURE_COMPONENTS = 0x1003U;
enum uint GL_TEXTURE_BORDER_COLOR = 0x1004U;
enum uint GL_TEXTURE_BORDER_COLOR_EXT = 0x1004U;
enum uint GL_TEXTURE_BORDER_COLOR_NV = 0x1004U;
enum uint GL_TEXTURE_BORDER_COLOR_OES = 0x1004U;
enum uint GL_TEXTURE_BORDER = 0x1005U;
enum uint GL_TEXTURE_TARGET = 0x1006U;
enum uint GL_DONT_CARE = 0x1100U;
enum uint GL_FASTEST = 0x1101U;
enum uint GL_NICEST = 0x1102U;
enum uint GL_AMBIENT = 0x1200U;
enum uint GL_DIFFUSE = 0x1201U;
enum uint GL_SPECULAR = 0x1202U;
enum uint GL_POSITION = 0x1203U;
enum uint GL_SPOT_DIRECTION = 0x1204U;
enum uint GL_SPOT_EXPONENT = 0x1205U;
enum uint GL_SPOT_CUTOFF = 0x1206U;
enum uint GL_CONSTANT_ATTENUATION = 0x1207U;
enum uint GL_LINEAR_ATTENUATION = 0x1208U;
enum uint GL_QUADRATIC_ATTENUATION = 0x1209U;
enum uint GL_COMPILE = 0x1300U;
enum uint GL_COMPILE_AND_EXECUTE = 0x1301U;
enum uint GL_BYTE = 0x1400U;
enum uint GL_UNSIGNED_BYTE = 0x1401U;
enum uint GL_SHORT = 0x1402U;
enum uint GL_UNSIGNED_SHORT = 0x1403U;
enum uint GL_INT = 0x1404U;
enum uint GL_UNSIGNED_INT = 0x1405U;
enum uint GL_FLOAT = 0x1406U;
enum uint GL_2_BYTES = 0x1407U;
enum uint GL_2_BYTES_NV = 0x1407U;
enum uint GL_3_BYTES = 0x1408U;
enum uint GL_3_BYTES_NV = 0x1408U;
enum uint GL_4_BYTES = 0x1409U;
enum uint GL_4_BYTES_NV = 0x1409U;
enum uint GL_DOUBLE = 0x140AU;
enum uint GL_DOUBLE_EXT = 0x140AU;
enum uint GL_HALF_FLOAT = 0x140BU;
enum uint GL_HALF_FLOAT_ARB = 0x140BU;
enum uint GL_HALF_FLOAT_NV = 0x140BU;
enum uint GL_HALF_APPLE = 0x140BU;
enum uint GL_FIXED = 0x140CU;
enum uint GL_FIXED_OES = 0x140CU;
enum uint GL_INT64_ARB = 0x140EU;
enum uint GL_INT64_NV = 0x140EU;
enum uint GL_UNSIGNED_INT64_ARB = 0x140FU;
enum uint GL_UNSIGNED_INT64_NV = 0x140FU;
enum uint GL_CLEAR = 0x1500U;
enum uint GL_AND = 0x1501U;
enum uint GL_AND_REVERSE = 0x1502U;
enum uint GL_COPY = 0x1503U;
enum uint GL_AND_INVERTED = 0x1504U;
enum uint GL_NOOP = 0x1505U;
enum uint GL_XOR = 0x1506U;
enum uint GL_XOR_NV = 0x1506U;
enum uint GL_OR = 0x1507U;
enum uint GL_NOR = 0x1508U;
enum uint GL_EQUIV = 0x1509U;
enum uint GL_INVERT = 0x150AU;
enum uint GL_OR_REVERSE = 0x150BU;
enum uint GL_COPY_INVERTED = 0x150CU;
enum uint GL_OR_INVERTED = 0x150DU;
enum uint GL_NAND = 0x150EU;
enum uint GL_SET = 0x150FU;
enum uint GL_EMISSION = 0x1600U;
enum uint GL_SHININESS = 0x1601U;
enum uint GL_AMBIENT_AND_DIFFUSE = 0x1602U;
enum uint GL_COLOR_INDEXES = 0x1603U;
enum uint GL_MODELVIEW = 0x1700U;
enum uint GL_MODELVIEW0_ARB = 0x1700U;
enum uint GL_MODELVIEW0_EXT = 0x1700U;
enum uint GL_PATH_MODELVIEW_NV = 0x1700U;
enum uint GL_PROJECTION = 0x1701U;
enum uint GL_PATH_PROJECTION_NV = 0x1701U;
enum uint GL_TEXTURE = 0x1702U;
enum uint GL_COLOR = 0x1800U;
enum uint GL_COLOR_EXT = 0x1800U;
enum uint GL_DEPTH = 0x1801U;
enum uint GL_DEPTH_EXT = 0x1801U;
enum uint GL_STENCIL = 0x1802U;
enum uint GL_STENCIL_EXT = 0x1802U;
enum uint GL_COLOR_INDEX = 0x1900U;
enum uint GL_STENCIL_INDEX = 0x1901U;
enum uint GL_STENCIL_INDEX_OES = 0x1901U;
enum uint GL_DEPTH_COMPONENT = 0x1902U;
enum uint GL_RED = 0x1903U;
enum uint GL_RED_EXT = 0x1903U;
enum uint GL_RED_NV = 0x1903U;
enum uint GL_GREEN = 0x1904U;
enum uint GL_GREEN_NV = 0x1904U;
enum uint GL_BLUE = 0x1905U;
enum uint GL_BLUE_NV = 0x1905U;
enum uint GL_ALPHA = 0x1906U;
enum uint GL_RGB = 0x1907U;
enum uint GL_RGBA = 0x1908U;
enum uint GL_LUMINANCE = 0x1909U;
enum uint GL_LUMINANCE_ALPHA = 0x190AU;
enum uint GL_BITMAP = 0x1A00U;
enum uint GL_POINT = 0x1B00U;
enum uint GL_POINT_NV = 0x1B00U;
enum uint GL_LINE = 0x1B01U;
enum uint GL_LINE_NV = 0x1B01U;
enum uint GL_FILL = 0x1B02U;
enum uint GL_FILL_NV = 0x1B02U;
enum uint GL_RENDER = 0x1C00U;
enum uint GL_FEEDBACK = 0x1C01U;
enum uint GL_SELECT = 0x1C02U;
enum uint GL_FLAT = 0x1D00U;
enum uint GL_SMOOTH = 0x1D01U;
enum uint GL_KEEP = 0x1E00U;
enum uint GL_REPLACE = 0x1E01U;
enum uint GL_INCR = 0x1E02U;
enum uint GL_DECR = 0x1E03U;
enum uint GL_VENDOR = 0x1F00U;
enum uint GL_RENDERER = 0x1F01U;
enum uint GL_VERSION = 0x1F02U;
enum uint GL_EXTENSIONS = 0x1F03U;
enum uint GL_S = 0x2000U;
enum uint GL_T = 0x2001U;
enum uint GL_R = 0x2002U;
enum uint GL_Q = 0x2003U;
enum uint GL_MODULATE = 0x2100U;
enum uint GL_DECAL = 0x2101U;
enum uint GL_TEXTURE_ENV_MODE = 0x2200U;
enum uint GL_TEXTURE_ENV_COLOR = 0x2201U;
enum uint GL_TEXTURE_ENV = 0x2300U;
enum uint GL_EYE_LINEAR = 0x2400U;
enum uint GL_EYE_LINEAR_NV = 0x2400U;
enum uint GL_OBJECT_LINEAR = 0x2401U;
enum uint GL_OBJECT_LINEAR_NV = 0x2401U;
enum uint GL_SPHERE_MAP = 0x2402U;
enum uint GL_TEXTURE_GEN_MODE = 0x2500U;
enum uint GL_TEXTURE_GEN_MODE_OES = 0x2500U;
enum uint GL_OBJECT_PLANE = 0x2501U;
enum uint GL_EYE_PLANE = 0x2502U;
enum uint GL_NEAREST = 0x2600U;
enum uint GL_LINEAR = 0x2601U;
enum uint GL_NEAREST_MIPMAP_NEAREST = 0x2700U;
enum uint GL_LINEAR_MIPMAP_NEAREST = 0x2701U;
enum uint GL_NEAREST_MIPMAP_LINEAR = 0x2702U;
enum uint GL_LINEAR_MIPMAP_LINEAR = 0x2703U;
enum uint GL_TEXTURE_MAG_FILTER = 0x2800U;
enum uint GL_TEXTURE_MIN_FILTER = 0x2801U;
enum uint GL_TEXTURE_WRAP_S = 0x2802U;
enum uint GL_TEXTURE_WRAP_T = 0x2803U;
enum uint GL_CLAMP = 0x2900U;
enum uint GL_REPEAT = 0x2901U;
enum uint GL_POLYGON_OFFSET_UNITS = 0x2A00U;
enum uint GL_POLYGON_OFFSET_POINT = 0x2A01U;
enum uint GL_POLYGON_OFFSET_POINT_NV = 0x2A01U;
enum uint GL_POLYGON_OFFSET_LINE = 0x2A02U;
enum uint GL_POLYGON_OFFSET_LINE_NV = 0x2A02U;
enum uint GL_R3_G3_B2 = 0x2A10U;
enum uint GL_V2F = 0x2A20U;
enum uint GL_V3F = 0x2A21U;
enum uint GL_C4UB_V2F = 0x2A22U;
enum uint GL_C4UB_V3F = 0x2A23U;
enum uint GL_C3F_V3F = 0x2A24U;
enum uint GL_N3F_V3F = 0x2A25U;
enum uint GL_C4F_N3F_V3F = 0x2A26U;
enum uint GL_T2F_V3F = 0x2A27U;
enum uint GL_T4F_V4F = 0x2A28U;
enum uint GL_T2F_C4UB_V3F = 0x2A29U;
enum uint GL_T2F_C3F_V3F = 0x2A2AU;
enum uint GL_T2F_N3F_V3F = 0x2A2BU;
enum uint GL_T2F_C4F_N3F_V3F = 0x2A2CU;
enum uint GL_T4F_C4F_N3F_V4F = 0x2A2DU;
enum uint GL_CLIP_PLANE0 = 0x3000U;
enum uint GL_CLIP_PLANE0_IMG = 0x3000U;
enum uint GL_CLIP_DISTANCE0 = 0x3000U;
enum uint GL_CLIP_DISTANCE0_EXT = 0x3000U;
enum uint GL_CLIP_DISTANCE0_APPLE = 0x3000U;
enum uint GL_CLIP_PLANE1 = 0x3001U;
enum uint GL_CLIP_PLANE1_IMG = 0x3001U;
enum uint GL_CLIP_DISTANCE1 = 0x3001U;
enum uint GL_CLIP_DISTANCE1_EXT = 0x3001U;
enum uint GL_CLIP_DISTANCE1_APPLE = 0x3001U;
enum uint GL_CLIP_PLANE2 = 0x3002U;
enum uint GL_CLIP_PLANE2_IMG = 0x3002U;
enum uint GL_CLIP_DISTANCE2 = 0x3002U;
enum uint GL_CLIP_DISTANCE2_EXT = 0x3002U;
enum uint GL_CLIP_DISTANCE2_APPLE = 0x3002U;
enum uint GL_CLIP_PLANE3 = 0x3003U;
enum uint GL_CLIP_PLANE3_IMG = 0x3003U;
enum uint GL_CLIP_DISTANCE3 = 0x3003U;
enum uint GL_CLIP_DISTANCE3_EXT = 0x3003U;
enum uint GL_CLIP_DISTANCE3_APPLE = 0x3003U;
enum uint GL_CLIP_PLANE4 = 0x3004U;
enum uint GL_CLIP_PLANE4_IMG = 0x3004U;
enum uint GL_CLIP_DISTANCE4 = 0x3004U;
enum uint GL_CLIP_DISTANCE4_EXT = 0x3004U;
enum uint GL_CLIP_DISTANCE4_APPLE = 0x3004U;
enum uint GL_CLIP_PLANE5 = 0x3005U;
enum uint GL_CLIP_PLANE5_IMG = 0x3005U;
enum uint GL_CLIP_DISTANCE5 = 0x3005U;
enum uint GL_CLIP_DISTANCE5_EXT = 0x3005U;
enum uint GL_CLIP_DISTANCE5_APPLE = 0x3005U;
enum uint GL_CLIP_DISTANCE6 = 0x3006U;
enum uint GL_CLIP_DISTANCE6_EXT = 0x3006U;
enum uint GL_CLIP_DISTANCE6_APPLE = 0x3006U;
enum uint GL_CLIP_DISTANCE7 = 0x3007U;
enum uint GL_CLIP_DISTANCE7_EXT = 0x3007U;
enum uint GL_CLIP_DISTANCE7_APPLE = 0x3007U;
enum uint GL_LIGHT0 = 0x4000U;
enum uint GL_LIGHT1 = 0x4001U;
enum uint GL_LIGHT2 = 0x4002U;
enum uint GL_LIGHT3 = 0x4003U;
enum uint GL_LIGHT4 = 0x4004U;
enum uint GL_LIGHT5 = 0x4005U;
enum uint GL_LIGHT6 = 0x4006U;
enum uint GL_LIGHT7 = 0x4007U;
enum uint GL_ABGR_EXT = 0x8000U;
enum uint GL_CONSTANT_COLOR = 0x8001U;
enum uint GL_CONSTANT_COLOR_EXT = 0x8001U;
enum uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002U;
enum uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002U;
enum uint GL_CONSTANT_ALPHA = 0x8003U;
enum uint GL_CONSTANT_ALPHA_EXT = 0x8003U;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004U;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004U;
enum uint GL_BLEND_COLOR = 0x8005U;
enum uint GL_BLEND_COLOR_EXT = 0x8005U;
enum uint GL_FUNC_ADD = 0x8006U;
enum uint GL_FUNC_ADD_EXT = 0x8006U;
enum uint GL_FUNC_ADD_OES = 0x8006U;
enum uint GL_MIN = 0x8007U;
enum uint GL_MIN_EXT = 0x8007U;
enum uint GL_MAX = 0x8008U;
enum uint GL_MAX_EXT = 0x8008U;
enum uint GL_BLEND_EQUATION = 0x8009U;
enum uint GL_BLEND_EQUATION_EXT = 0x8009U;
enum uint GL_BLEND_EQUATION_OES = 0x8009U;
enum uint GL_BLEND_EQUATION_RGB = 0x8009U;
enum uint GL_BLEND_EQUATION_RGB_EXT = 0x8009U;
enum uint GL_BLEND_EQUATION_RGB_OES = 0x8009U;
enum uint GL_FUNC_SUBTRACT = 0x800AU;
enum uint GL_FUNC_SUBTRACT_EXT = 0x800AU;
enum uint GL_FUNC_SUBTRACT_OES = 0x800AU;
enum uint GL_FUNC_REVERSE_SUBTRACT = 0x800BU;
enum uint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800BU;
enum uint GL_FUNC_REVERSE_SUBTRACT_OES = 0x800BU;
enum uint GL_CMYK_EXT = 0x800CU;
enum uint GL_CMYKA_EXT = 0x800DU;
enum uint GL_PACK_CMYK_HINT_EXT = 0x800EU;
enum uint GL_UNPACK_CMYK_HINT_EXT = 0x800FU;
enum uint GL_CONVOLUTION_1D = 0x8010U;
enum uint GL_CONVOLUTION_1D_EXT = 0x8010U;
enum uint GL_CONVOLUTION_2D = 0x8011U;
enum uint GL_CONVOLUTION_2D_EXT = 0x8011U;
enum uint GL_SEPARABLE_2D = 0x8012U;
enum uint GL_SEPARABLE_2D_EXT = 0x8012U;
enum uint GL_CONVOLUTION_BORDER_MODE = 0x8013U;
enum uint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013U;
enum uint GL_CONVOLUTION_FILTER_SCALE = 0x8014U;
enum uint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014U;
enum uint GL_CONVOLUTION_FILTER_BIAS = 0x8015U;
enum uint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015U;
enum uint GL_REDUCE = 0x8016U;
enum uint GL_REDUCE_EXT = 0x8016U;
enum uint GL_CONVOLUTION_FORMAT = 0x8017U;
enum uint GL_CONVOLUTION_FORMAT_EXT = 0x8017U;
enum uint GL_CONVOLUTION_WIDTH = 0x8018U;
enum uint GL_CONVOLUTION_WIDTH_EXT = 0x8018U;
enum uint GL_CONVOLUTION_HEIGHT = 0x8019U;
enum uint GL_CONVOLUTION_HEIGHT_EXT = 0x8019U;
enum uint GL_MAX_CONVOLUTION_WIDTH = 0x801AU;
enum uint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801AU;
enum uint GL_MAX_CONVOLUTION_HEIGHT = 0x801BU;
enum uint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801BU;
enum uint GL_POST_CONVOLUTION_RED_SCALE = 0x801CU;
enum uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801CU;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801DU;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801DU;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801EU;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801EU;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801FU;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801FU;
enum uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020U;
enum uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020U;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021U;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021U;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022U;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022U;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023U;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023U;
enum uint GL_HISTOGRAM = 0x8024U;
enum uint GL_HISTOGRAM_EXT = 0x8024U;
enum uint GL_PROXY_HISTOGRAM = 0x8025U;
enum uint GL_PROXY_HISTOGRAM_EXT = 0x8025U;
enum uint GL_HISTOGRAM_WIDTH = 0x8026U;
enum uint GL_HISTOGRAM_WIDTH_EXT = 0x8026U;
enum uint GL_HISTOGRAM_FORMAT = 0x8027U;
enum uint GL_HISTOGRAM_FORMAT_EXT = 0x8027U;
enum uint GL_HISTOGRAM_RED_SIZE = 0x8028U;
enum uint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028U;
enum uint GL_HISTOGRAM_GREEN_SIZE = 0x8029U;
enum uint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029U;
enum uint GL_HISTOGRAM_BLUE_SIZE = 0x802AU;
enum uint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802AU;
enum uint GL_HISTOGRAM_ALPHA_SIZE = 0x802BU;
enum uint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802BU;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802CU;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802CU;
enum uint GL_HISTOGRAM_SINK = 0x802DU;
enum uint GL_HISTOGRAM_SINK_EXT = 0x802DU;
enum uint GL_MINMAX = 0x802EU;
enum uint GL_MINMAX_EXT = 0x802EU;
enum uint GL_MINMAX_FORMAT = 0x802FU;
enum uint GL_MINMAX_FORMAT_EXT = 0x802FU;
enum uint GL_MINMAX_SINK = 0x8030U;
enum uint GL_MINMAX_SINK_EXT = 0x8030U;
enum uint GL_TABLE_TOO_LARGE_EXT = 0x8031U;
enum uint GL_TABLE_TOO_LARGE = 0x8031U;
enum uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032U;
enum uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032U;
enum uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033U;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033U;
enum uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034U;
enum uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034U;
enum uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035U;
enum uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035U;
enum uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036U;
enum uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036U;
enum uint GL_POLYGON_OFFSET_EXT = 0x8037U;
enum uint GL_POLYGON_OFFSET_FILL = 0x8037U;
enum uint GL_POLYGON_OFFSET_FACTOR = 0x8038U;
enum uint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038U;
enum uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039U;
enum uint GL_RESCALE_NORMAL = 0x803AU;
enum uint GL_RESCALE_NORMAL_EXT = 0x803AU;
enum uint GL_ALPHA4 = 0x803BU;
enum uint GL_ALPHA4_EXT = 0x803BU;
enum uint GL_ALPHA8 = 0x803CU;
enum uint GL_ALPHA8_EXT = 0x803CU;
enum uint GL_ALPHA8_OES = 0x803CU;
enum uint GL_ALPHA12 = 0x803DU;
enum uint GL_ALPHA12_EXT = 0x803DU;
enum uint GL_ALPHA16 = 0x803EU;
enum uint GL_ALPHA16_EXT = 0x803EU;
enum uint GL_LUMINANCE4 = 0x803FU;
enum uint GL_LUMINANCE4_EXT = 0x803FU;
enum uint GL_LUMINANCE8 = 0x8040U;
enum uint GL_LUMINANCE8_EXT = 0x8040U;
enum uint GL_LUMINANCE8_OES = 0x8040U;
enum uint GL_LUMINANCE12 = 0x8041U;
enum uint GL_LUMINANCE12_EXT = 0x8041U;
enum uint GL_LUMINANCE16 = 0x8042U;
enum uint GL_LUMINANCE16_EXT = 0x8042U;
enum uint GL_LUMINANCE4_ALPHA4 = 0x8043U;
enum uint GL_LUMINANCE4_ALPHA4_EXT = 0x8043U;
enum uint GL_LUMINANCE4_ALPHA4_OES = 0x8043U;
enum uint GL_LUMINANCE6_ALPHA2 = 0x8044U;
enum uint GL_LUMINANCE6_ALPHA2_EXT = 0x8044U;
enum uint GL_LUMINANCE8_ALPHA8 = 0x8045U;
enum uint GL_LUMINANCE8_ALPHA8_EXT = 0x8045U;
enum uint GL_LUMINANCE8_ALPHA8_OES = 0x8045U;
enum uint GL_LUMINANCE12_ALPHA4 = 0x8046U;
enum uint GL_LUMINANCE12_ALPHA4_EXT = 0x8046U;
enum uint GL_LUMINANCE12_ALPHA12 = 0x8047U;
enum uint GL_LUMINANCE12_ALPHA12_EXT = 0x8047U;
enum uint GL_LUMINANCE16_ALPHA16 = 0x8048U;
enum uint GL_LUMINANCE16_ALPHA16_EXT = 0x8048U;
enum uint GL_INTENSITY = 0x8049U;
enum uint GL_INTENSITY_EXT = 0x8049U;
enum uint GL_INTENSITY4 = 0x804AU;
enum uint GL_INTENSITY4_EXT = 0x804AU;
enum uint GL_INTENSITY8 = 0x804BU;
enum uint GL_INTENSITY8_EXT = 0x804BU;
enum uint GL_INTENSITY12 = 0x804CU;
enum uint GL_INTENSITY12_EXT = 0x804CU;
enum uint GL_INTENSITY16 = 0x804DU;
enum uint GL_INTENSITY16_EXT = 0x804DU;
enum uint GL_RGB2_EXT = 0x804EU;
enum uint GL_RGB4 = 0x804FU;
enum uint GL_RGB4_EXT = 0x804FU;
enum uint GL_RGB5 = 0x8050U;
enum uint GL_RGB5_EXT = 0x8050U;
enum uint GL_RGB8 = 0x8051U;
enum uint GL_RGB8_EXT = 0x8051U;
enum uint GL_RGB8_OES = 0x8051U;
enum uint GL_RGB10 = 0x8052U;
enum uint GL_RGB10_EXT = 0x8052U;
enum uint GL_RGB12 = 0x8053U;
enum uint GL_RGB12_EXT = 0x8053U;
enum uint GL_RGB16 = 0x8054U;
enum uint GL_RGB16_EXT = 0x8054U;
enum uint GL_RGBA2 = 0x8055U;
enum uint GL_RGBA2_EXT = 0x8055U;
enum uint GL_RGBA4 = 0x8056U;
enum uint GL_RGBA4_EXT = 0x8056U;
enum uint GL_RGBA4_OES = 0x8056U;
enum uint GL_RGB5_A1 = 0x8057U;
enum uint GL_RGB5_A1_EXT = 0x8057U;
enum uint GL_RGB5_A1_OES = 0x8057U;
enum uint GL_RGBA8 = 0x8058U;
enum uint GL_RGBA8_EXT = 0x8058U;
enum uint GL_RGBA8_OES = 0x8058U;
enum uint GL_RGB10_A2 = 0x8059U;
enum uint GL_RGB10_A2_EXT = 0x8059U;
enum uint GL_RGBA12 = 0x805AU;
enum uint GL_RGBA12_EXT = 0x805AU;
enum uint GL_RGBA16 = 0x805BU;
enum uint GL_RGBA16_EXT = 0x805BU;
enum uint GL_TEXTURE_RED_SIZE = 0x805CU;
enum uint GL_TEXTURE_RED_SIZE_EXT = 0x805CU;
enum uint GL_TEXTURE_GREEN_SIZE = 0x805DU;
enum uint GL_TEXTURE_GREEN_SIZE_EXT = 0x805DU;
enum uint GL_TEXTURE_BLUE_SIZE = 0x805EU;
enum uint GL_TEXTURE_BLUE_SIZE_EXT = 0x805EU;
enum uint GL_TEXTURE_ALPHA_SIZE = 0x805FU;
enum uint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805FU;
enum uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060U;
enum uint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060U;
enum uint GL_TEXTURE_INTENSITY_SIZE = 0x8061U;
enum uint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061U;
enum uint GL_REPLACE_EXT = 0x8062U;
enum uint GL_PROXY_TEXTURE_1D = 0x8063U;
enum uint GL_PROXY_TEXTURE_1D_EXT = 0x8063U;
enum uint GL_PROXY_TEXTURE_2D = 0x8064U;
enum uint GL_PROXY_TEXTURE_2D_EXT = 0x8064U;
enum uint GL_TEXTURE_TOO_LARGE_EXT = 0x8065U;
enum uint GL_TEXTURE_PRIORITY = 0x8066U;
enum uint GL_TEXTURE_PRIORITY_EXT = 0x8066U;
enum uint GL_TEXTURE_RESIDENT = 0x8067U;
enum uint GL_TEXTURE_RESIDENT_EXT = 0x8067U;
enum uint GL_TEXTURE_1D_BINDING_EXT = 0x8068U;
enum uint GL_TEXTURE_BINDING_1D = 0x8068U;
enum uint GL_TEXTURE_2D_BINDING_EXT = 0x8069U;
enum uint GL_TEXTURE_BINDING_2D = 0x8069U;
enum uint GL_TEXTURE_3D_BINDING_EXT = 0x806AU;
enum uint GL_TEXTURE_3D_BINDING_OES = 0x806AU;
enum uint GL_TEXTURE_BINDING_3D = 0x806AU;
enum uint GL_TEXTURE_BINDING_3D_OES = 0x806AU;
enum uint GL_PACK_SKIP_IMAGES = 0x806BU;
enum uint GL_PACK_SKIP_IMAGES_EXT = 0x806BU;
enum uint GL_PACK_IMAGE_HEIGHT = 0x806CU;
enum uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806CU;
enum uint GL_UNPACK_SKIP_IMAGES = 0x806DU;
enum uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806DU;
enum uint GL_UNPACK_IMAGE_HEIGHT = 0x806EU;
enum uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806EU;
enum uint GL_TEXTURE_3D = 0x806FU;
enum uint GL_TEXTURE_3D_EXT = 0x806FU;
enum uint GL_TEXTURE_3D_OES = 0x806FU;
enum uint GL_PROXY_TEXTURE_3D = 0x8070U;
enum uint GL_PROXY_TEXTURE_3D_EXT = 0x8070U;
enum uint GL_TEXTURE_DEPTH = 0x8071U;
enum uint GL_TEXTURE_DEPTH_EXT = 0x8071U;
enum uint GL_TEXTURE_WRAP_R = 0x8072U;
enum uint GL_TEXTURE_WRAP_R_EXT = 0x8072U;
enum uint GL_TEXTURE_WRAP_R_OES = 0x8072U;
enum uint GL_MAX_3D_TEXTURE_SIZE = 0x8073U;
enum uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073U;
enum uint GL_MAX_3D_TEXTURE_SIZE_OES = 0x8073U;
enum uint GL_VERTEX_ARRAY = 0x8074U;
enum uint GL_VERTEX_ARRAY_EXT = 0x8074U;
enum uint GL_VERTEX_ARRAY_KHR = 0x8074U;
enum uint GL_NORMAL_ARRAY = 0x8075U;
enum uint GL_NORMAL_ARRAY_EXT = 0x8075U;
enum uint GL_COLOR_ARRAY = 0x8076U;
enum uint GL_COLOR_ARRAY_EXT = 0x8076U;
enum uint GL_INDEX_ARRAY = 0x8077U;
enum uint GL_INDEX_ARRAY_EXT = 0x8077U;
enum uint GL_TEXTURE_COORD_ARRAY = 0x8078U;
enum uint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078U;
enum uint GL_EDGE_FLAG_ARRAY = 0x8079U;
enum uint GL_EDGE_FLAG_ARRAY_EXT = 0x8079U;
enum uint GL_VERTEX_ARRAY_SIZE = 0x807AU;
enum uint GL_VERTEX_ARRAY_SIZE_EXT = 0x807AU;
enum uint GL_VERTEX_ARRAY_TYPE = 0x807BU;
enum uint GL_VERTEX_ARRAY_TYPE_EXT = 0x807BU;
enum uint GL_VERTEX_ARRAY_STRIDE = 0x807CU;
enum uint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807CU;
enum uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807DU;
enum uint GL_NORMAL_ARRAY_TYPE = 0x807EU;
enum uint GL_NORMAL_ARRAY_TYPE_EXT = 0x807EU;
enum uint GL_NORMAL_ARRAY_STRIDE = 0x807FU;
enum uint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807FU;
enum uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080U;
enum uint GL_COLOR_ARRAY_SIZE = 0x8081U;
enum uint GL_COLOR_ARRAY_SIZE_EXT = 0x8081U;
enum uint GL_COLOR_ARRAY_TYPE = 0x8082U;
enum uint GL_COLOR_ARRAY_TYPE_EXT = 0x8082U;
enum uint GL_COLOR_ARRAY_STRIDE = 0x8083U;
enum uint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083U;
enum uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084U;
enum uint GL_INDEX_ARRAY_TYPE = 0x8085U;
enum uint GL_INDEX_ARRAY_TYPE_EXT = 0x8085U;
enum uint GL_INDEX_ARRAY_STRIDE = 0x8086U;
enum uint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086U;
enum uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087U;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088U;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088U;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089U;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089U;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808AU;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808AU;
enum uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808BU;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808CU;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808CU;
enum uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808DU;
enum uint GL_VERTEX_ARRAY_POINTER = 0x808EU;
enum uint GL_VERTEX_ARRAY_POINTER_EXT = 0x808EU;
enum uint GL_NORMAL_ARRAY_POINTER = 0x808FU;
enum uint GL_NORMAL_ARRAY_POINTER_EXT = 0x808FU;
enum uint GL_COLOR_ARRAY_POINTER = 0x8090U;
enum uint GL_COLOR_ARRAY_POINTER_EXT = 0x8090U;
enum uint GL_INDEX_ARRAY_POINTER = 0x8091U;
enum uint GL_INDEX_ARRAY_POINTER_EXT = 0x8091U;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092U;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092U;
enum uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093U;
enum uint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093U;
enum uint GL_INTERLACE_SGIX = 0x8094U;
enum uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095U;
enum uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096U;
enum uint GL_LINEAR_DETAIL_SGIS = 0x8097U;
enum uint GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098U;
enum uint GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099U;
enum uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809AU;
enum uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809BU;
enum uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809CU;
enum uint GL_MULTISAMPLE = 0x809DU;
enum uint GL_MULTISAMPLE_ARB = 0x809DU;
enum uint GL_MULTISAMPLE_EXT = 0x809DU;
enum uint GL_MULTISAMPLE_SGIS = 0x809DU;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809EU;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809EU;
enum uint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809EU;
enum uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809EU;
enum uint GL_SAMPLE_ALPHA_TO_ONE = 0x809FU;
enum uint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809FU;
enum uint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809FU;
enum uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809FU;
enum uint GL_SAMPLE_COVERAGE = 0x80A0U;
enum uint GL_SAMPLE_COVERAGE_ARB = 0x80A0U;
enum uint GL_SAMPLE_MASK_EXT = 0x80A0U;
enum uint GL_SAMPLE_MASK_SGIS = 0x80A0U;
enum uint GL_1PASS_EXT = 0x80A1U;
enum uint GL_1PASS_SGIS = 0x80A1U;
enum uint GL_2PASS_0_EXT = 0x80A2U;
enum uint GL_2PASS_0_SGIS = 0x80A2U;
enum uint GL_2PASS_1_EXT = 0x80A3U;
enum uint GL_2PASS_1_SGIS = 0x80A3U;
enum uint GL_4PASS_0_EXT = 0x80A4U;
enum uint GL_4PASS_0_SGIS = 0x80A4U;
enum uint GL_4PASS_1_EXT = 0x80A5U;
enum uint GL_4PASS_1_SGIS = 0x80A5U;
enum uint GL_4PASS_2_EXT = 0x80A6U;
enum uint GL_4PASS_2_SGIS = 0x80A6U;
enum uint GL_4PASS_3_EXT = 0x80A7U;
enum uint GL_4PASS_3_SGIS = 0x80A7U;
enum uint GL_SAMPLE_BUFFERS = 0x80A8U;
enum uint GL_SAMPLE_BUFFERS_ARB = 0x80A8U;
enum uint GL_SAMPLE_BUFFERS_EXT = 0x80A8U;
enum uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8U;
enum uint GL_SAMPLES = 0x80A9U;
enum uint GL_SAMPLES_ARB = 0x80A9U;
enum uint GL_SAMPLES_EXT = 0x80A9U;
enum uint GL_SAMPLES_SGIS = 0x80A9U;
enum uint GL_SAMPLE_COVERAGE_VALUE = 0x80AAU;
enum uint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AAU;
enum uint GL_SAMPLE_MASK_VALUE_EXT = 0x80AAU;
enum uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AAU;
enum uint GL_SAMPLE_COVERAGE_INVERT = 0x80ABU;
enum uint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80ABU;
enum uint GL_SAMPLE_MASK_INVERT_EXT = 0x80ABU;
enum uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80ABU;
enum uint GL_SAMPLE_PATTERN_EXT = 0x80ACU;
enum uint GL_SAMPLE_PATTERN_SGIS = 0x80ACU;
enum uint GL_LINEAR_SHARPEN_SGIS = 0x80ADU;
enum uint GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AEU;
enum uint GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AFU;
enum uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0U;
enum uint GL_COLOR_MATRIX = 0x80B1U;
enum uint GL_COLOR_MATRIX_SGI = 0x80B1U;
enum uint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2U;
enum uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2U;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3U;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3U;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4U;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4U;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5U;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5U;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6U;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6U;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7U;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7U;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8U;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8U;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9U;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9U;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BAU;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BAU;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BBU;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BBU;
enum uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BCU;
enum uint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BDU;
enum uint GL_TEXTURE_ENV_BIAS_SGIX = 0x80BEU;
enum uint GL_SHADOW_AMBIENT_SGIX = 0x80BFU;
enum uint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BFU;
enum uint GL_BLEND_DST_RGB = 0x80C8U;
enum uint GL_BLEND_DST_RGB_EXT = 0x80C8U;
enum uint GL_BLEND_DST_RGB_OES = 0x80C8U;
enum uint GL_BLEND_SRC_RGB = 0x80C9U;
enum uint GL_BLEND_SRC_RGB_EXT = 0x80C9U;
enum uint GL_BLEND_SRC_RGB_OES = 0x80C9U;
enum uint GL_BLEND_DST_ALPHA = 0x80CAU;
enum uint GL_BLEND_DST_ALPHA_EXT = 0x80CAU;
enum uint GL_BLEND_DST_ALPHA_OES = 0x80CAU;
enum uint GL_BLEND_SRC_ALPHA = 0x80CBU;
enum uint GL_BLEND_SRC_ALPHA_EXT = 0x80CBU;
enum uint GL_BLEND_SRC_ALPHA_OES = 0x80CBU;
enum uint GL_422_EXT = 0x80CCU;
enum uint GL_422_REV_EXT = 0x80CDU;
enum uint GL_422_AVERAGE_EXT = 0x80CEU;
enum uint GL_422_REV_AVERAGE_EXT = 0x80CFU;
enum uint GL_COLOR_TABLE = 0x80D0U;
enum uint GL_COLOR_TABLE_SGI = 0x80D0U;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1U;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1U;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2U;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2U;
enum uint GL_PROXY_COLOR_TABLE = 0x80D3U;
enum uint GL_PROXY_COLOR_TABLE_SGI = 0x80D3U;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4U;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4U;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5U;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5U;
enum uint GL_COLOR_TABLE_SCALE = 0x80D6U;
enum uint GL_COLOR_TABLE_SCALE_SGI = 0x80D6U;
enum uint GL_COLOR_TABLE_BIAS = 0x80D7U;
enum uint GL_COLOR_TABLE_BIAS_SGI = 0x80D7U;
enum uint GL_COLOR_TABLE_FORMAT = 0x80D8U;
enum uint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8U;
enum uint GL_COLOR_TABLE_WIDTH = 0x80D9U;
enum uint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9U;
enum uint GL_COLOR_TABLE_RED_SIZE = 0x80DAU;
enum uint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DAU;
enum uint GL_COLOR_TABLE_GREEN_SIZE = 0x80DBU;
enum uint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DBU;
enum uint GL_COLOR_TABLE_BLUE_SIZE = 0x80DCU;
enum uint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DCU;
enum uint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DDU;
enum uint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DDU;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DEU;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DEU;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DFU;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DFU;
enum uint GL_BGR = 0x80E0U;
enum uint GL_BGR_EXT = 0x80E0U;
enum uint GL_BGRA = 0x80E1U;
enum uint GL_BGRA_EXT = 0x80E1U;
enum uint GL_BGRA_IMG = 0x80E1U;
enum uint GL_COLOR_INDEX1_EXT = 0x80E2U;
enum uint GL_COLOR_INDEX2_EXT = 0x80E3U;
enum uint GL_COLOR_INDEX4_EXT = 0x80E4U;
enum uint GL_COLOR_INDEX8_EXT = 0x80E5U;
enum uint GL_COLOR_INDEX12_EXT = 0x80E6U;
enum uint GL_COLOR_INDEX16_EXT = 0x80E7U;
enum uint GL_MAX_ELEMENTS_VERTICES = 0x80E8U;
enum uint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8U;
enum uint GL_MAX_ELEMENTS_INDICES = 0x80E9U;
enum uint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9U;
enum uint GL_PHONG_WIN = 0x80EAU;
enum uint GL_PHONG_HINT_WIN = 0x80EBU;
enum uint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80ECU;
enum uint GL_TEXTURE_INDEX_SIZE_EXT = 0x80EDU;
enum uint GL_PARAMETER_BUFFER_ARB = 0x80EEU;
enum uint GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EFU;
enum uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0U;
enum uint GL_DUAL_ALPHA4_SGIS = 0x8110U;
enum uint GL_DUAL_ALPHA8_SGIS = 0x8111U;
enum uint GL_DUAL_ALPHA12_SGIS = 0x8112U;
enum uint GL_DUAL_ALPHA16_SGIS = 0x8113U;
enum uint GL_DUAL_LUMINANCE4_SGIS = 0x8114U;
enum uint GL_DUAL_LUMINANCE8_SGIS = 0x8115U;
enum uint GL_DUAL_LUMINANCE12_SGIS = 0x8116U;
enum uint GL_DUAL_LUMINANCE16_SGIS = 0x8117U;
enum uint GL_DUAL_INTENSITY4_SGIS = 0x8118U;
enum uint GL_DUAL_INTENSITY8_SGIS = 0x8119U;
enum uint GL_DUAL_INTENSITY12_SGIS = 0x811AU;
enum uint GL_DUAL_INTENSITY16_SGIS = 0x811BU;
enum uint GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811CU;
enum uint GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811DU;
enum uint GL_QUAD_ALPHA4_SGIS = 0x811EU;
enum uint GL_QUAD_ALPHA8_SGIS = 0x811FU;
enum uint GL_QUAD_LUMINANCE4_SGIS = 0x8120U;
enum uint GL_QUAD_LUMINANCE8_SGIS = 0x8121U;
enum uint GL_QUAD_INTENSITY4_SGIS = 0x8122U;
enum uint GL_QUAD_INTENSITY8_SGIS = 0x8123U;
enum uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124U;
enum uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125U;
enum uint GL_POINT_SIZE_MIN = 0x8126U;
enum uint GL_POINT_SIZE_MIN_ARB = 0x8126U;
enum uint GL_POINT_SIZE_MIN_EXT = 0x8126U;
enum uint GL_POINT_SIZE_MIN_SGIS = 0x8126U;
enum uint GL_POINT_SIZE_MAX = 0x8127U;
enum uint GL_POINT_SIZE_MAX_ARB = 0x8127U;
enum uint GL_POINT_SIZE_MAX_EXT = 0x8127U;
enum uint GL_POINT_SIZE_MAX_SGIS = 0x8127U;
enum uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128U;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128U;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128U;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128U;
enum uint GL_DISTANCE_ATTENUATION_EXT = 0x8129U;
enum uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129U;
enum uint GL_POINT_DISTANCE_ATTENUATION = 0x8129U;
enum uint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129U;
enum uint GL_FOG_FUNC_SGIS = 0x812AU;
enum uint GL_FOG_FUNC_POINTS_SGIS = 0x812BU;
enum uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812CU;
enum uint GL_CLAMP_TO_BORDER = 0x812DU;
enum uint GL_CLAMP_TO_BORDER_ARB = 0x812DU;
enum uint GL_CLAMP_TO_BORDER_EXT = 0x812DU;
enum uint GL_CLAMP_TO_BORDER_NV = 0x812DU;
enum uint GL_CLAMP_TO_BORDER_SGIS = 0x812DU;
enum uint GL_CLAMP_TO_BORDER_OES = 0x812DU;
enum uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812EU;
enum uint GL_CLAMP_TO_EDGE = 0x812FU;
enum uint GL_CLAMP_TO_EDGE_SGIS = 0x812FU;
enum uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130U;
enum uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131U;
enum uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132U;
enum uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133U;
enum uint GL_TEXTURE_4D_SGIS = 0x8134U;
enum uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135U;
enum uint GL_TEXTURE_4DSIZE_SGIS = 0x8136U;
enum uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137U;
enum uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138U;
enum uint GL_PIXEL_TEX_GEN_SGIX = 0x8139U;
enum uint GL_TEXTURE_MIN_LOD = 0x813AU;
enum uint GL_TEXTURE_MIN_LOD_SGIS = 0x813AU;
enum uint GL_TEXTURE_MAX_LOD = 0x813BU;
enum uint GL_TEXTURE_MAX_LOD_SGIS = 0x813BU;
enum uint GL_TEXTURE_BASE_LEVEL = 0x813CU;
enum uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813CU;
enum uint GL_TEXTURE_MAX_LEVEL = 0x813DU;
enum uint GL_TEXTURE_MAX_LEVEL_APPLE = 0x813DU;
enum uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813DU;
enum uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813EU;
enum uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813FU;
enum uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140U;
enum uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141U;
enum uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142U;
enum uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143U;
enum uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144U;
enum uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145U;
enum uint GL_FILTER4_SGIS = 0x8146U;
enum uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147U;
enum uint GL_SPRITE_SGIX = 0x8148U;
enum uint GL_SPRITE_MODE_SGIX = 0x8149U;
enum uint GL_SPRITE_AXIS_SGIX = 0x814AU;
enum uint GL_SPRITE_TRANSLATION_SGIX = 0x814BU;
enum uint GL_SPRITE_AXIAL_SGIX = 0x814CU;
enum uint GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814DU;
enum uint GL_SPRITE_EYE_ALIGNED_SGIX = 0x814EU;
enum uint GL_TEXTURE_4D_BINDING_SGIS = 0x814FU;
enum uint GL_IGNORE_BORDER_HP = 0x8150U;
enum uint GL_CONSTANT_BORDER = 0x8151U;
enum uint GL_CONSTANT_BORDER_HP = 0x8151U;
enum uint GL_REPLICATE_BORDER = 0x8153U;
enum uint GL_REPLICATE_BORDER_HP = 0x8153U;
enum uint GL_CONVOLUTION_BORDER_COLOR = 0x8154U;
enum uint GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154U;
enum uint GL_IMAGE_SCALE_X_HP = 0x8155U;
enum uint GL_IMAGE_SCALE_Y_HP = 0x8156U;
enum uint GL_IMAGE_TRANSLATE_X_HP = 0x8157U;
enum uint GL_IMAGE_TRANSLATE_Y_HP = 0x8158U;
enum uint GL_IMAGE_ROTATE_ANGLE_HP = 0x8159U;
enum uint GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815AU;
enum uint GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815BU;
enum uint GL_IMAGE_MAG_FILTER_HP = 0x815CU;
enum uint GL_IMAGE_MIN_FILTER_HP = 0x815DU;
enum uint GL_IMAGE_CUBIC_WEIGHT_HP = 0x815EU;
enum uint GL_CUBIC_HP = 0x815FU;
enum uint GL_AVERAGE_HP = 0x8160U;
enum uint GL_IMAGE_TRANSFORM_2D_HP = 0x8161U;
enum uint GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162U;
enum uint GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163U;
enum uint GL_OCCLUSION_TEST_HP = 0x8165U;
enum uint GL_OCCLUSION_TEST_RESULT_HP = 0x8166U;
enum uint GL_TEXTURE_LIGHTING_MODE_HP = 0x8167U;
enum uint GL_TEXTURE_POST_SPECULAR_HP = 0x8168U;
enum uint GL_TEXTURE_PRE_SPECULAR_HP = 0x8169U;
enum uint GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170U;
enum uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171U;
enum uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172U;
enum uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173U;
enum uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174U;
enum uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175U;
enum uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176U;
enum uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177U;
enum uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178U;
enum uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179U;
enum uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817AU;
enum uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817BU;
enum uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817CU;
enum uint GL_REFERENCE_PLANE_SGIX = 0x817DU;
enum uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817EU;
enum uint GL_IR_INSTRUMENT1_SGIX = 0x817FU;
enum uint GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180U;
enum uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181U;
enum uint GL_LIST_PRIORITY_SGIX = 0x8182U;
enum uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183U;
enum uint GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184U;
enum uint GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185U;
enum uint GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186U;
enum uint GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187U;
enum uint GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188U;
enum uint GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189U;
enum uint GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818AU;
enum uint GL_FRAMEZOOM_SGIX = 0x818BU;
enum uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818CU;
enum uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818DU;
enum uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818EU;
enum uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818FU;
enum uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190U;
enum uint GL_GENERATE_MIPMAP = 0x8191U;
enum uint GL_GENERATE_MIPMAP_SGIS = 0x8191U;
enum uint GL_GENERATE_MIPMAP_HINT = 0x8192U;
enum uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192U;
enum uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194U;
enum uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195U;
enum uint GL_DEFORMATIONS_MASK_SGIX = 0x8196U;
enum uint GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197U;
enum uint GL_FOG_OFFSET_SGIX = 0x8198U;
enum uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199U;
enum uint GL_TEXTURE_COMPARE_SGIX = 0x819AU;
enum uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819BU;
enum uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819CU;
enum uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819DU;
enum uint GL_DEPTH_COMPONENT16 = 0x81A5U;
enum uint GL_DEPTH_COMPONENT16_ARB = 0x81A5U;
enum uint GL_DEPTH_COMPONENT16_OES = 0x81A5U;
enum uint GL_DEPTH_COMPONENT16_SGIX = 0x81A5U;
enum uint GL_DEPTH_COMPONENT24 = 0x81A6U;
enum uint GL_DEPTH_COMPONENT24_ARB = 0x81A6U;
enum uint GL_DEPTH_COMPONENT24_OES = 0x81A6U;
enum uint GL_DEPTH_COMPONENT24_SGIX = 0x81A6U;
enum uint GL_DEPTH_COMPONENT32 = 0x81A7U;
enum uint GL_DEPTH_COMPONENT32_ARB = 0x81A7U;
enum uint GL_DEPTH_COMPONENT32_OES = 0x81A7U;
enum uint GL_DEPTH_COMPONENT32_SGIX = 0x81A7U;
enum uint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8U;
enum uint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9U;
enum uint GL_CULL_VERTEX_EXT = 0x81AAU;
enum uint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81ABU;
enum uint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81ACU;
enum uint GL_IUI_V2F_EXT = 0x81ADU;
enum uint GL_IUI_V3F_EXT = 0x81AEU;
enum uint GL_IUI_N3F_V2F_EXT = 0x81AFU;
enum uint GL_IUI_N3F_V3F_EXT = 0x81B0U;
enum uint GL_T2F_IUI_V2F_EXT = 0x81B1U;
enum uint GL_T2F_IUI_V3F_EXT = 0x81B2U;
enum uint GL_T2F_IUI_N3F_V2F_EXT = 0x81B3U;
enum uint GL_T2F_IUI_N3F_V3F_EXT = 0x81B4U;
enum uint GL_INDEX_TEST_EXT = 0x81B5U;
enum uint GL_INDEX_TEST_FUNC_EXT = 0x81B6U;
enum uint GL_INDEX_TEST_REF_EXT = 0x81B7U;
enum uint GL_INDEX_MATERIAL_EXT = 0x81B8U;
enum uint GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9U;
enum uint GL_INDEX_MATERIAL_FACE_EXT = 0x81BAU;
enum uint GL_YCRCB_422_SGIX = 0x81BBU;
enum uint GL_YCRCB_444_SGIX = 0x81BCU;
enum uint GL_WRAP_BORDER_SUN = 0x81D4U;
enum uint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5U;
enum uint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6U;
enum uint GL_TRIANGLE_LIST_SUN = 0x81D7U;
enum uint GL_REPLACEMENT_CODE_SUN = 0x81D8U;
enum uint GL_GLOBAL_ALPHA_SUN = 0x81D9U;
enum uint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DAU;
enum uint GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EFU;
enum uint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0U;
enum uint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1U;
enum uint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2U;
enum uint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3U;
enum uint GL_EYE_POINT_SGIS = 0x81F4U;
enum uint GL_OBJECT_POINT_SGIS = 0x81F5U;
enum uint GL_EYE_LINE_SGIS = 0x81F6U;
enum uint GL_OBJECT_LINE_SGIS = 0x81F7U;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8U;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8U;
enum uint GL_SINGLE_COLOR = 0x81F9U;
enum uint GL_SINGLE_COLOR_EXT = 0x81F9U;
enum uint GL_SEPARATE_SPECULAR_COLOR = 0x81FAU;
enum uint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FAU;
enum uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FBU;
enum uint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217U;
enum uint GL_FRAMEBUFFER_DEFAULT = 0x8218U;
enum uint GL_FRAMEBUFFER_UNDEFINED = 0x8219U;
enum uint GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219U;
enum uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821AU;
enum uint GL_MAJOR_VERSION = 0x821BU;
enum uint GL_MINOR_VERSION = 0x821CU;
enum uint GL_NUM_EXTENSIONS = 0x821DU;
enum uint GL_CONTEXT_FLAGS = 0x821EU;
enum uint GL_BUFFER_IMMUTABLE_STORAGE = 0x821FU;
enum uint GL_BUFFER_IMMUTABLE_STORAGE_EXT = 0x821FU;
enum uint GL_BUFFER_STORAGE_FLAGS = 0x8220U;
enum uint GL_BUFFER_STORAGE_FLAGS_EXT = 0x8220U;
enum uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221U;
enum uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x8221U;
enum uint GL_INDEX = 0x8222U;
enum uint GL_COMPRESSED_RED = 0x8225U;
enum uint GL_COMPRESSED_RG = 0x8226U;
enum uint GL_RG = 0x8227U;
enum uint GL_RG_EXT = 0x8227U;
enum uint GL_RG_INTEGER = 0x8228U;
enum uint GL_R8 = 0x8229U;
enum uint GL_R8_EXT = 0x8229U;
enum uint GL_R16 = 0x822AU;
enum uint GL_R16_EXT = 0x822AU;
enum uint GL_RG8 = 0x822BU;
enum uint GL_RG8_EXT = 0x822BU;
enum uint GL_RG16 = 0x822CU;
enum uint GL_RG16_EXT = 0x822CU;
enum uint GL_R16F = 0x822DU;
enum uint GL_R16F_EXT = 0x822DU;
enum uint GL_R32F = 0x822EU;
enum uint GL_R32F_EXT = 0x822EU;
enum uint GL_RG16F = 0x822FU;
enum uint GL_RG16F_EXT = 0x822FU;
enum uint GL_RG32F = 0x8230U;
enum uint GL_RG32F_EXT = 0x8230U;
enum uint GL_R8I = 0x8231U;
enum uint GL_R8UI = 0x8232U;
enum uint GL_R16I = 0x8233U;
enum uint GL_R16UI = 0x8234U;
enum uint GL_R32I = 0x8235U;
enum uint GL_R32UI = 0x8236U;
enum uint GL_RG8I = 0x8237U;
enum uint GL_RG8UI = 0x8238U;
enum uint GL_RG16I = 0x8239U;
enum uint GL_RG16UI = 0x823AU;
enum uint GL_RG32I = 0x823BU;
enum uint GL_RG32UI = 0x823CU;
enum uint GL_SYNC_CL_EVENT_ARB = 0x8240U;
enum uint GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241U;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242U;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242U;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242U;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243U;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243U;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243U;
enum uint GL_DEBUG_CALLBACK_FUNCTION = 0x8244U;
enum uint GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244U;
enum uint GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244U;
enum uint GL_DEBUG_CALLBACK_USER_PARAM = 0x8245U;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245U;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245U;
enum uint GL_DEBUG_SOURCE_API = 0x8246U;
enum uint GL_DEBUG_SOURCE_API_ARB = 0x8246U;
enum uint GL_DEBUG_SOURCE_API_KHR = 0x8246U;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247U;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247U;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247U;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248U;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248U;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248U;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249U;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249U;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249U;
enum uint GL_DEBUG_SOURCE_APPLICATION = 0x824AU;
enum uint GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824AU;
enum uint GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824AU;
enum uint GL_DEBUG_SOURCE_OTHER = 0x824BU;
enum uint GL_DEBUG_SOURCE_OTHER_ARB = 0x824BU;
enum uint GL_DEBUG_SOURCE_OTHER_KHR = 0x824BU;
enum uint GL_DEBUG_TYPE_ERROR = 0x824CU;
enum uint GL_DEBUG_TYPE_ERROR_ARB = 0x824CU;
enum uint GL_DEBUG_TYPE_ERROR_KHR = 0x824CU;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824DU;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824DU;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824DU;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824EU;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824EU;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824EU;
enum uint GL_DEBUG_TYPE_PORTABILITY = 0x824FU;
enum uint GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824FU;
enum uint GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824FU;
enum uint GL_DEBUG_TYPE_PERFORMANCE = 0x8250U;
enum uint GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250U;
enum uint GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250U;
enum uint GL_DEBUG_TYPE_OTHER = 0x8251U;
enum uint GL_DEBUG_TYPE_OTHER_ARB = 0x8251U;
enum uint GL_DEBUG_TYPE_OTHER_KHR = 0x8251U;
enum uint GL_LOSE_CONTEXT_ON_RESET = 0x8252U;
enum uint GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252U;
enum uint GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252U;
enum uint GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252U;
enum uint GL_GUILTY_CONTEXT_RESET = 0x8253U;
enum uint GL_GUILTY_CONTEXT_RESET_ARB = 0x8253U;
enum uint GL_GUILTY_CONTEXT_RESET_EXT = 0x8253U;
enum uint GL_GUILTY_CONTEXT_RESET_KHR = 0x8253U;
enum uint GL_INNOCENT_CONTEXT_RESET = 0x8254U;
enum uint GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254U;
enum uint GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254U;
enum uint GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254U;
enum uint GL_UNKNOWN_CONTEXT_RESET = 0x8255U;
enum uint GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255U;
enum uint GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255U;
enum uint GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255U;
enum uint GL_RESET_NOTIFICATION_STRATEGY = 0x8256U;
enum uint GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256U;
enum uint GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256U;
enum uint GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256U;
enum uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257U;
enum uint GL_PROGRAM_SEPARABLE = 0x8258U;
enum uint GL_PROGRAM_SEPARABLE_EXT = 0x8258U;
enum uint GL_ACTIVE_PROGRAM = 0x8259U;
enum uint GL_PROGRAM_PIPELINE_BINDING = 0x825AU;
enum uint GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825AU;
enum uint GL_MAX_VIEWPORTS = 0x825BU;
enum uint GL_MAX_VIEWPORTS_NV = 0x825BU;
enum uint GL_MAX_VIEWPORTS_OES = 0x825BU;
enum uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825CU;
enum uint GL_VIEWPORT_SUBPIXEL_BITS_EXT = 0x825CU;
enum uint GL_VIEWPORT_SUBPIXEL_BITS_NV = 0x825CU;
enum uint GL_VIEWPORT_SUBPIXEL_BITS_OES = 0x825CU;
enum uint GL_VIEWPORT_BOUNDS_RANGE = 0x825DU;
enum uint GL_VIEWPORT_BOUNDS_RANGE_EXT = 0x825DU;
enum uint GL_VIEWPORT_BOUNDS_RANGE_NV = 0x825DU;
enum uint GL_VIEWPORT_BOUNDS_RANGE_OES = 0x825DU;
enum uint GL_LAYER_PROVOKING_VERTEX = 0x825EU;
enum uint GL_LAYER_PROVOKING_VERTEX_EXT = 0x825EU;
enum uint GL_LAYER_PROVOKING_VERTEX_OES = 0x825EU;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825FU;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = 0x825FU;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x825FU;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 0x825FU;
enum uint GL_UNDEFINED_VERTEX = 0x8260U;
enum uint GL_UNDEFINED_VERTEX_EXT = 0x8260U;
enum uint GL_UNDEFINED_VERTEX_OES = 0x8260U;
enum uint GL_NO_RESET_NOTIFICATION = 0x8261U;
enum uint GL_NO_RESET_NOTIFICATION_ARB = 0x8261U;
enum uint GL_NO_RESET_NOTIFICATION_EXT = 0x8261U;
enum uint GL_NO_RESET_NOTIFICATION_KHR = 0x8261U;
enum uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262U;
enum uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263U;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264U;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265U;
enum uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266U;
enum uint GL_COMPUTE_WORK_GROUP_SIZE = 0x8267U;
enum uint GL_DEBUG_TYPE_MARKER = 0x8268U;
enum uint GL_DEBUG_TYPE_MARKER_KHR = 0x8268U;
enum uint GL_DEBUG_TYPE_PUSH_GROUP = 0x8269U;
enum uint GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269U;
enum uint GL_DEBUG_TYPE_POP_GROUP = 0x826AU;
enum uint GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826AU;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION = 0x826BU;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826BU;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826CU;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826CU;
enum uint GL_DEBUG_GROUP_STACK_DEPTH = 0x826DU;
enum uint GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826DU;
enum uint GL_MAX_UNIFORM_LOCATIONS = 0x826EU;
enum uint GL_INTERNALFORMAT_SUPPORTED = 0x826FU;
enum uint GL_INTERNALFORMAT_PREFERRED = 0x8270U;
enum uint GL_INTERNALFORMAT_RED_SIZE = 0x8271U;
enum uint GL_INTERNALFORMAT_GREEN_SIZE = 0x8272U;
enum uint GL_INTERNALFORMAT_BLUE_SIZE = 0x8273U;
enum uint GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274U;
enum uint GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275U;
enum uint GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276U;
enum uint GL_INTERNALFORMAT_SHARED_SIZE = 0x8277U;
enum uint GL_INTERNALFORMAT_RED_TYPE = 0x8278U;
enum uint GL_INTERNALFORMAT_GREEN_TYPE = 0x8279U;
enum uint GL_INTERNALFORMAT_BLUE_TYPE = 0x827AU;
enum uint GL_INTERNALFORMAT_ALPHA_TYPE = 0x827BU;
enum uint GL_INTERNALFORMAT_DEPTH_TYPE = 0x827CU;
enum uint GL_INTERNALFORMAT_STENCIL_TYPE = 0x827DU;
enum uint GL_MAX_WIDTH = 0x827EU;
enum uint GL_MAX_HEIGHT = 0x827FU;
enum uint GL_MAX_DEPTH = 0x8280U;
enum uint GL_MAX_LAYERS = 0x8281U;
enum uint GL_MAX_COMBINED_DIMENSIONS = 0x8282U;
enum uint GL_COLOR_COMPONENTS = 0x8283U;
enum uint GL_DEPTH_COMPONENTS = 0x8284U;
enum uint GL_STENCIL_COMPONENTS = 0x8285U;
enum uint GL_COLOR_RENDERABLE = 0x8286U;
enum uint GL_DEPTH_RENDERABLE = 0x8287U;
enum uint GL_STENCIL_RENDERABLE = 0x8288U;
enum uint GL_FRAMEBUFFER_RENDERABLE = 0x8289U;
enum uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828AU;
enum uint GL_FRAMEBUFFER_BLEND = 0x828BU;
enum uint GL_READ_PIXELS = 0x828CU;
enum uint GL_READ_PIXELS_FORMAT = 0x828DU;
enum uint GL_READ_PIXELS_TYPE = 0x828EU;
enum uint GL_TEXTURE_IMAGE_FORMAT = 0x828FU;
enum uint GL_TEXTURE_IMAGE_TYPE = 0x8290U;
enum uint GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291U;
enum uint GL_GET_TEXTURE_IMAGE_TYPE = 0x8292U;
enum uint GL_MIPMAP = 0x8293U;
enum uint GL_MANUAL_GENERATE_MIPMAP = 0x8294U;
enum uint GL_AUTO_GENERATE_MIPMAP = 0x8295U;
enum uint GL_COLOR_ENCODING = 0x8296U;
enum uint GL_SRGB_READ = 0x8297U;
enum uint GL_SRGB_WRITE = 0x8298U;
enum uint GL_SRGB_DECODE_ARB = 0x8299U;
enum uint GL_FILTER = 0x829AU;
enum uint GL_VERTEX_TEXTURE = 0x829BU;
enum uint GL_TESS_CONTROL_TEXTURE = 0x829CU;
enum uint GL_TESS_EVALUATION_TEXTURE = 0x829DU;
enum uint GL_GEOMETRY_TEXTURE = 0x829EU;
enum uint GL_FRAGMENT_TEXTURE = 0x829FU;
enum uint GL_COMPUTE_TEXTURE = 0x82A0U;
enum uint GL_TEXTURE_SHADOW = 0x82A1U;
enum uint GL_TEXTURE_GATHER = 0x82A2U;
enum uint GL_TEXTURE_GATHER_SHADOW = 0x82A3U;
enum uint GL_SHADER_IMAGE_LOAD = 0x82A4U;
enum uint GL_SHADER_IMAGE_STORE = 0x82A5U;
enum uint GL_SHADER_IMAGE_ATOMIC = 0x82A6U;
enum uint GL_IMAGE_TEXEL_SIZE = 0x82A7U;
enum uint GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8U;
enum uint GL_IMAGE_PIXEL_FORMAT = 0x82A9U;
enum uint GL_IMAGE_PIXEL_TYPE = 0x82AAU;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82ACU;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82ADU;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AEU;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AFU;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1U;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2U;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3U;
enum uint GL_CLEAR_BUFFER = 0x82B4U;
enum uint GL_TEXTURE_VIEW = 0x82B5U;
enum uint GL_VIEW_COMPATIBILITY_CLASS = 0x82B6U;
enum uint GL_FULL_SUPPORT = 0x82B7U;
enum uint GL_CAVEAT_SUPPORT = 0x82B8U;
enum uint GL_IMAGE_CLASS_4_X_32 = 0x82B9U;
enum uint GL_IMAGE_CLASS_2_X_32 = 0x82BAU;
enum uint GL_IMAGE_CLASS_1_X_32 = 0x82BBU;
enum uint GL_IMAGE_CLASS_4_X_16 = 0x82BCU;
enum uint GL_IMAGE_CLASS_2_X_16 = 0x82BDU;
enum uint GL_IMAGE_CLASS_1_X_16 = 0x82BEU;
enum uint GL_IMAGE_CLASS_4_X_8 = 0x82BFU;
enum uint GL_IMAGE_CLASS_2_X_8 = 0x82C0U;
enum uint GL_IMAGE_CLASS_1_X_8 = 0x82C1U;
enum uint GL_IMAGE_CLASS_11_11_10 = 0x82C2U;
enum uint GL_IMAGE_CLASS_10_10_10_2 = 0x82C3U;
enum uint GL_VIEW_CLASS_128_BITS = 0x82C4U;
enum uint GL_VIEW_CLASS_96_BITS = 0x82C5U;
enum uint GL_VIEW_CLASS_64_BITS = 0x82C6U;
enum uint GL_VIEW_CLASS_48_BITS = 0x82C7U;
enum uint GL_VIEW_CLASS_32_BITS = 0x82C8U;
enum uint GL_VIEW_CLASS_24_BITS = 0x82C9U;
enum uint GL_VIEW_CLASS_16_BITS = 0x82CAU;
enum uint GL_VIEW_CLASS_8_BITS = 0x82CBU;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CCU;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CDU;
enum uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CEU;
enum uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CFU;
enum uint GL_VIEW_CLASS_RGTC1_RED = 0x82D0U;
enum uint GL_VIEW_CLASS_RGTC2_RG = 0x82D1U;
enum uint GL_VIEW_CLASS_BPTC_UNORM = 0x82D2U;
enum uint GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3U;
enum uint GL_VERTEX_ATTRIB_BINDING = 0x82D4U;
enum uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5U;
enum uint GL_VERTEX_BINDING_DIVISOR = 0x82D6U;
enum uint GL_VERTEX_BINDING_OFFSET = 0x82D7U;
enum uint GL_VERTEX_BINDING_STRIDE = 0x82D8U;
enum uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9U;
enum uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DAU;
enum uint GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DBU;
enum uint GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DBU;
enum uint GL_TEXTURE_VIEW_MIN_LEVEL_OES = 0x82DBU;
enum uint GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DCU;
enum uint GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DCU;
enum uint GL_TEXTURE_VIEW_NUM_LEVELS_OES = 0x82DCU;
enum uint GL_TEXTURE_VIEW_MIN_LAYER = 0x82DDU;
enum uint GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DDU;
enum uint GL_TEXTURE_VIEW_MIN_LAYER_OES = 0x82DDU;
enum uint GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DEU;
enum uint GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DEU;
enum uint GL_TEXTURE_VIEW_NUM_LAYERS_OES = 0x82DEU;
enum uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DFU;
enum uint GL_BUFFER = 0x82E0U;
enum uint GL_BUFFER_KHR = 0x82E0U;
enum uint GL_SHADER = 0x82E1U;
enum uint GL_SHADER_KHR = 0x82E1U;
enum uint GL_PROGRAM = 0x82E2U;
enum uint GL_PROGRAM_KHR = 0x82E2U;
enum uint GL_QUERY = 0x82E3U;
enum uint GL_QUERY_KHR = 0x82E3U;
enum uint GL_PROGRAM_PIPELINE = 0x82E4U;
enum uint GL_PROGRAM_PIPELINE_KHR = 0x82E4U;
enum uint GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5U;
enum uint GL_SAMPLER = 0x82E6U;
enum uint GL_SAMPLER_KHR = 0x82E6U;
enum uint GL_DISPLAY_LIST = 0x82E7U;
enum uint GL_MAX_LABEL_LENGTH = 0x82E8U;
enum uint GL_MAX_LABEL_LENGTH_KHR = 0x82E8U;
enum uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9U;
enum uint GL_QUERY_TARGET = 0x82EAU;
enum uint GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82ECU;
enum uint GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82EDU;
enum uint GL_VERTICES_SUBMITTED_ARB = 0x82EEU;
enum uint GL_PRIMITIVES_SUBMITTED_ARB = 0x82EFU;
enum uint GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0U;
enum uint GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1U;
enum uint GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2U;
enum uint GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3U;
enum uint GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4U;
enum uint GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5U;
enum uint GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6U;
enum uint GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7U;
enum uint GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8U;
enum uint GL_MAX_CULL_DISTANCES = 0x82F9U;
enum uint GL_MAX_CULL_DISTANCES_EXT = 0x82F9U;
enum uint GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FAU;
enum uint GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 0x82FAU;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FBU;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FBU;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FCU;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FCU;
enum uint GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310U;
enum uint GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311U;
enum uint GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312U;
enum uint GL_FRAGMENTS_INSTRUMENT_SGIX = 0x8313U;
enum uint GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 0x8314U;
enum uint GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 0x8315U;
enum uint GL_CONVOLUTION_HINT_SGIX = 0x8316U;
enum uint GL_YCRCB_SGIX = 0x8318U;
enum uint GL_YCRCBA_SGIX = 0x8319U;
enum uint GL_UNPACK_COMPRESSED_SIZE_SGIX = 0x831AU;
enum uint GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 0x831BU;
enum uint GL_PACK_COMPRESSED_SIZE_SGIX = 0x831CU;
enum uint GL_SLIM8U_SGIX = 0x831DU;
enum uint GL_SLIM10U_SGIX = 0x831EU;
enum uint GL_SLIM12S_SGIX = 0x831FU;
enum uint GL_ALPHA_MIN_SGIX = 0x8320U;
enum uint GL_ALPHA_MAX_SGIX = 0x8321U;
enum uint GL_SCALEBIAS_HINT_SGIX = 0x8322U;
enum uint GL_ASYNC_MARKER_SGIX = 0x8329U;
enum uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832BU;
enum uint GL_ASYNC_HISTOGRAM_SGIX = 0x832CU;
enum uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832DU;
enum uint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330U;
enum uint GL_PIXEL_MAG_FILTER_EXT = 0x8331U;
enum uint GL_PIXEL_MIN_FILTER_EXT = 0x8332U;
enum uint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333U;
enum uint GL_CUBIC_EXT = 0x8334U;
enum uint GL_AVERAGE_EXT = 0x8335U;
enum uint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336U;
enum uint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337U;
enum uint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338U;
enum uint GL_FRAGMENT_MATERIAL_EXT = 0x8349U;
enum uint GL_FRAGMENT_NORMAL_EXT = 0x834AU;
enum uint GL_FRAGMENT_COLOR_EXT = 0x834CU;
enum uint GL_ATTENUATION_EXT = 0x834DU;
enum uint GL_SHADOW_ATTENUATION_EXT = 0x834EU;
enum uint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834FU;
enum uint GL_TEXTURE_LIGHT_EXT = 0x8350U;
enum uint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351U;
enum uint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352U;
enum uint GL_PIXEL_TEXTURE_SGIS = 0x8353U;
enum uint GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354U;
enum uint GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355U;
enum uint GL_PIXEL_GROUP_COLOR_SGIS = 0x8356U;
enum uint GL_LINE_QUALITY_HINT_SGIX = 0x835BU;
enum uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835CU;
enum uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835DU;
enum uint GL_ASYNC_READ_PIXELS_SGIX = 0x835EU;
enum uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835FU;
enum uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360U;
enum uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361U;
enum uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362U;
enum uint GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362U;
enum uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363U;
enum uint GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363U;
enum uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364U;
enum uint GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364U;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365U;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365U;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365U;
enum uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366U;
enum uint GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366U;
enum uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367U;
enum uint GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367U;
enum uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368U;
enum uint GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368U;
enum uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369U;
enum uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836AU;
enum uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836BU;
enum uint GL_MIRRORED_REPEAT = 0x8370U;
enum uint GL_MIRRORED_REPEAT_ARB = 0x8370U;
enum uint GL_MIRRORED_REPEAT_IBM = 0x8370U;
enum uint GL_MIRRORED_REPEAT_OES = 0x8370U;
enum uint GL_RGB_S3TC = 0x83A0U;
enum uint GL_RGB4_S3TC = 0x83A1U;
enum uint GL_RGBA_S3TC = 0x83A2U;
enum uint GL_RGBA4_S3TC = 0x83A3U;
enum uint GL_RGBA_DXT5_S3TC = 0x83A4U;
enum uint GL_RGBA4_DXT5_S3TC = 0x83A5U;
enum uint GL_VERTEX_PRECLIP_SGIX = 0x83EEU;
enum uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EFU;
enum uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0U;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1U;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2U;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2U;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3U;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3U;
enum uint GL_PARALLEL_ARRAYS_INTEL = 0x83F4U;
enum uint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5U;
enum uint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6U;
enum uint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7U;
enum uint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8U;
enum uint GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9U;
enum uint GL_PERFQUERY_FLUSH_INTEL = 0x83FAU;
enum uint GL_PERFQUERY_WAIT_INTEL = 0x83FBU;
enum uint GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FEU;
enum uint GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FFU;
enum uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400U;
enum uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401U;
enum uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402U;
enum uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403U;
enum uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404U;
enum uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405U;
enum uint GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406U;
enum uint GL_LIGHT_ENV_MODE_SGIX = 0x8407U;
enum uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408U;
enum uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409U;
enum uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840AU;
enum uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840BU;
enum uint GL_FRAGMENT_LIGHT0_SGIX = 0x840CU;
enum uint GL_FRAGMENT_LIGHT1_SGIX = 0x840DU;
enum uint GL_FRAGMENT_LIGHT2_SGIX = 0x840EU;
enum uint GL_FRAGMENT_LIGHT3_SGIX = 0x840FU;
enum uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410U;
enum uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411U;
enum uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412U;
enum uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413U;
enum uint GL_PACK_RESAMPLE_SGIX = 0x842EU;
enum uint GL_UNPACK_RESAMPLE_SGIX = 0x842FU;
enum uint GL_RESAMPLE_DECIMATE_SGIX = 0x8430U;
enum uint GL_RESAMPLE_REPLICATE_SGIX = 0x8433U;
enum uint GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434U;
enum uint GL_TANGENT_ARRAY_EXT = 0x8439U;
enum uint GL_BINORMAL_ARRAY_EXT = 0x843AU;
enum uint GL_CURRENT_TANGENT_EXT = 0x843BU;
enum uint GL_CURRENT_BINORMAL_EXT = 0x843CU;
enum uint GL_TANGENT_ARRAY_TYPE_EXT = 0x843EU;
enum uint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843FU;
enum uint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440U;
enum uint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441U;
enum uint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442U;
enum uint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443U;
enum uint GL_MAP1_TANGENT_EXT = 0x8444U;
enum uint GL_MAP2_TANGENT_EXT = 0x8445U;
enum uint GL_MAP1_BINORMAL_EXT = 0x8446U;
enum uint GL_MAP2_BINORMAL_EXT = 0x8447U;
enum uint GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844DU;
enum uint GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844EU;
enum uint GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844FU;
enum uint GL_FOG_COORDINATE_SOURCE = 0x8450U;
enum uint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450U;
enum uint GL_FOG_COORD_SRC = 0x8450U;
enum uint GL_FOG_COORDINATE = 0x8451U;
enum uint GL_FOG_COORD = 0x8451U;
enum uint GL_FOG_COORDINATE_EXT = 0x8451U;
enum uint GL_FRAGMENT_DEPTH = 0x8452U;
enum uint GL_FRAGMENT_DEPTH_EXT = 0x8452U;
enum uint GL_CURRENT_FOG_COORDINATE = 0x8453U;
enum uint GL_CURRENT_FOG_COORD = 0x8453U;
enum uint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453U;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454U;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454U;
enum uint GL_FOG_COORD_ARRAY_TYPE = 0x8454U;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455U;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455U;
enum uint GL_FOG_COORD_ARRAY_STRIDE = 0x8455U;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456U;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456U;
enum uint GL_FOG_COORD_ARRAY_POINTER = 0x8456U;
enum uint GL_FOG_COORDINATE_ARRAY = 0x8457U;
enum uint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457U;
enum uint GL_FOG_COORD_ARRAY = 0x8457U;
enum uint GL_COLOR_SUM = 0x8458U;
enum uint GL_COLOR_SUM_ARB = 0x8458U;
enum uint GL_COLOR_SUM_EXT = 0x8458U;
enum uint GL_CURRENT_SECONDARY_COLOR = 0x8459U;
enum uint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459U;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845AU;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845AU;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845BU;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845BU;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845CU;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845CU;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845DU;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845DU;
enum uint GL_SECONDARY_COLOR_ARRAY = 0x845EU;
enum uint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845EU;
enum uint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845FU;
enum uint GL_ALIASED_POINT_SIZE_RANGE = 0x846DU;
enum uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846EU;
enum uint GL_SCREEN_COORDINATES_REND = 0x8490U;
enum uint GL_INVERTED_SCREEN_W_REND = 0x8491U;
enum uint GL_TEXTURE0 = 0x84C0U;
enum uint GL_TEXTURE0_ARB = 0x84C0U;
enum uint GL_TEXTURE1 = 0x84C1U;
enum uint GL_TEXTURE1_ARB = 0x84C1U;
enum uint GL_TEXTURE2 = 0x84C2U;
enum uint GL_TEXTURE2_ARB = 0x84C2U;
enum uint GL_TEXTURE3 = 0x84C3U;
enum uint GL_TEXTURE3_ARB = 0x84C3U;
enum uint GL_TEXTURE4 = 0x84C4U;
enum uint GL_TEXTURE4_ARB = 0x84C4U;
enum uint GL_TEXTURE5 = 0x84C5U;
enum uint GL_TEXTURE5_ARB = 0x84C5U;
enum uint GL_TEXTURE6 = 0x84C6U;
enum uint GL_TEXTURE6_ARB = 0x84C6U;
enum uint GL_TEXTURE7 = 0x84C7U;
enum uint GL_TEXTURE7_ARB = 0x84C7U;
enum uint GL_TEXTURE8 = 0x84C8U;
enum uint GL_TEXTURE8_ARB = 0x84C8U;
enum uint GL_TEXTURE9 = 0x84C9U;
enum uint GL_TEXTURE9_ARB = 0x84C9U;
enum uint GL_TEXTURE10 = 0x84CAU;
enum uint GL_TEXTURE10_ARB = 0x84CAU;
enum uint GL_TEXTURE11 = 0x84CBU;
enum uint GL_TEXTURE11_ARB = 0x84CBU;
enum uint GL_TEXTURE12 = 0x84CCU;
enum uint GL_TEXTURE12_ARB = 0x84CCU;
enum uint GL_TEXTURE13 = 0x84CDU;
enum uint GL_TEXTURE13_ARB = 0x84CDU;
enum uint GL_TEXTURE14 = 0x84CEU;
enum uint GL_TEXTURE14_ARB = 0x84CEU;
enum uint GL_TEXTURE15 = 0x84CFU;
enum uint GL_TEXTURE15_ARB = 0x84CFU;
enum uint GL_TEXTURE16 = 0x84D0U;
enum uint GL_TEXTURE16_ARB = 0x84D0U;
enum uint GL_TEXTURE17 = 0x84D1U;
enum uint GL_TEXTURE17_ARB = 0x84D1U;
enum uint GL_TEXTURE18 = 0x84D2U;
enum uint GL_TEXTURE18_ARB = 0x84D2U;
enum uint GL_TEXTURE19 = 0x84D3U;
enum uint GL_TEXTURE19_ARB = 0x84D3U;
enum uint GL_TEXTURE20 = 0x84D4U;
enum uint GL_TEXTURE20_ARB = 0x84D4U;
enum uint GL_TEXTURE21 = 0x84D5U;
enum uint GL_TEXTURE21_ARB = 0x84D5U;
enum uint GL_TEXTURE22 = 0x84D6U;
enum uint GL_TEXTURE22_ARB = 0x84D6U;
enum uint GL_TEXTURE23 = 0x84D7U;
enum uint GL_TEXTURE23_ARB = 0x84D7U;
enum uint GL_TEXTURE24 = 0x84D8U;
enum uint GL_TEXTURE24_ARB = 0x84D8U;
enum uint GL_TEXTURE25 = 0x84D9U;
enum uint GL_TEXTURE25_ARB = 0x84D9U;
enum uint GL_TEXTURE26 = 0x84DAU;
enum uint GL_TEXTURE26_ARB = 0x84DAU;
enum uint GL_TEXTURE27 = 0x84DBU;
enum uint GL_TEXTURE27_ARB = 0x84DBU;
enum uint GL_TEXTURE28 = 0x84DCU;
enum uint GL_TEXTURE28_ARB = 0x84DCU;
enum uint GL_TEXTURE29 = 0x84DDU;
enum uint GL_TEXTURE29_ARB = 0x84DDU;
enum uint GL_TEXTURE30 = 0x84DEU;
enum uint GL_TEXTURE30_ARB = 0x84DEU;
enum uint GL_TEXTURE31 = 0x84DFU;
enum uint GL_TEXTURE31_ARB = 0x84DFU;
enum uint GL_ACTIVE_TEXTURE = 0x84E0U;
enum uint GL_ACTIVE_TEXTURE_ARB = 0x84E0U;
enum uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1U;
enum uint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1U;
enum uint GL_MAX_TEXTURE_UNITS = 0x84E2U;
enum uint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2U;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3U;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3U;
enum uint GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3U;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4U;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4U;
enum uint GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4U;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5U;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5U;
enum uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6U;
enum uint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6U;
enum uint GL_SUBTRACT = 0x84E7U;
enum uint GL_SUBTRACT_ARB = 0x84E7U;
enum uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8U;
enum uint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8U;
enum uint GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8U;
enum uint GL_COMPRESSED_ALPHA = 0x84E9U;
enum uint GL_COMPRESSED_ALPHA_ARB = 0x84E9U;
enum uint GL_COMPRESSED_LUMINANCE = 0x84EAU;
enum uint GL_COMPRESSED_LUMINANCE_ARB = 0x84EAU;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EBU;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EBU;
enum uint GL_COMPRESSED_INTENSITY = 0x84ECU;
enum uint GL_COMPRESSED_INTENSITY_ARB = 0x84ECU;
enum uint GL_COMPRESSED_RGB = 0x84EDU;
enum uint GL_COMPRESSED_RGB_ARB = 0x84EDU;
enum uint GL_COMPRESSED_RGBA = 0x84EEU;
enum uint GL_COMPRESSED_RGBA_ARB = 0x84EEU;
enum uint GL_TEXTURE_COMPRESSION_HINT = 0x84EFU;
enum uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EFU;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0U;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1U;
enum uint GL_ALL_COMPLETED_NV = 0x84F2U;
enum uint GL_FENCE_STATUS_NV = 0x84F3U;
enum uint GL_FENCE_CONDITION_NV = 0x84F4U;
enum uint GL_TEXTURE_RECTANGLE = 0x84F5U;
enum uint GL_TEXTURE_RECTANGLE_ARB = 0x84F5U;
enum uint GL_TEXTURE_RECTANGLE_NV = 0x84F5U;
enum uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6U;
enum uint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6U;
enum uint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6U;
enum uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7U;
enum uint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7U;
enum uint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7U;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8U;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8U;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8U;
enum uint GL_DEPTH_STENCIL = 0x84F9U;
enum uint GL_DEPTH_STENCIL_EXT = 0x84F9U;
enum uint GL_DEPTH_STENCIL_NV = 0x84F9U;
enum uint GL_DEPTH_STENCIL_OES = 0x84F9U;
enum uint GL_UNSIGNED_INT_24_8 = 0x84FAU;
enum uint GL_UNSIGNED_INT_24_8_EXT = 0x84FAU;
enum uint GL_UNSIGNED_INT_24_8_NV = 0x84FAU;
enum uint GL_UNSIGNED_INT_24_8_OES = 0x84FAU;
enum uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FDU;
enum uint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FDU;
enum uint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FEU;
enum uint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FFU;
enum uint GL_TEXTURE_FILTER_CONTROL = 0x8500U;
enum uint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500U;
enum uint GL_TEXTURE_LOD_BIAS = 0x8501U;
enum uint GL_TEXTURE_LOD_BIAS_EXT = 0x8501U;
enum uint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502U;
enum uint GL_COMBINE4_NV = 0x8503U;
enum uint GL_MAX_SHININESS_NV = 0x8504U;
enum uint GL_MAX_SPOT_EXPONENT_NV = 0x8505U;
enum uint GL_MODELVIEW1_MATRIX_EXT = 0x8506U;
enum uint GL_INCR_WRAP = 0x8507U;
enum uint GL_INCR_WRAP_EXT = 0x8507U;
enum uint GL_INCR_WRAP_OES = 0x8507U;
enum uint GL_DECR_WRAP = 0x8508U;
enum uint GL_DECR_WRAP_EXT = 0x8508U;
enum uint GL_DECR_WRAP_OES = 0x8508U;
enum uint GL_VERTEX_WEIGHTING_EXT = 0x8509U;
enum uint GL_MODELVIEW1_ARB = 0x850AU;
enum uint GL_MODELVIEW1_EXT = 0x850AU;
enum uint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850BU;
enum uint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850CU;
enum uint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850DU;
enum uint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850EU;
enum uint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850FU;
enum uint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510U;
enum uint GL_NORMAL_MAP = 0x8511U;
enum uint GL_NORMAL_MAP_ARB = 0x8511U;
enum uint GL_NORMAL_MAP_EXT = 0x8511U;
enum uint GL_NORMAL_MAP_NV = 0x8511U;
enum uint GL_NORMAL_MAP_OES = 0x8511U;
enum uint GL_REFLECTION_MAP = 0x8512U;
enum uint GL_REFLECTION_MAP_ARB = 0x8512U;
enum uint GL_REFLECTION_MAP_EXT = 0x8512U;
enum uint GL_REFLECTION_MAP_NV = 0x8512U;
enum uint GL_REFLECTION_MAP_OES = 0x8512U;
enum uint GL_TEXTURE_CUBE_MAP = 0x8513U;
enum uint GL_TEXTURE_CUBE_MAP_ARB = 0x8513U;
enum uint GL_TEXTURE_CUBE_MAP_EXT = 0x8513U;
enum uint GL_TEXTURE_CUBE_MAP_OES = 0x8513U;
enum uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514U;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514U;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514U;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519U;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519U;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851AU;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851AU;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851AU;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851AU;
enum uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851BU;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851BU;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851BU;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851CU;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851CU;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851CU;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851CU;
enum uint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851DU;
enum uint GL_VERTEX_ARRAY_RANGE_NV = 0x851DU;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851EU;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851EU;
enum uint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851FU;
enum uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851FU;
enum uint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520U;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521U;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521U;
enum uint GL_REGISTER_COMBINERS_NV = 0x8522U;
enum uint GL_VARIABLE_A_NV = 0x8523U;
enum uint GL_VARIABLE_B_NV = 0x8524U;
enum uint GL_VARIABLE_C_NV = 0x8525U;
enum uint GL_VARIABLE_D_NV = 0x8526U;
enum uint GL_VARIABLE_E_NV = 0x8527U;
enum uint GL_VARIABLE_F_NV = 0x8528U;
enum uint GL_VARIABLE_G_NV = 0x8529U;
enum uint GL_CONSTANT_COLOR0_NV = 0x852AU;
enum uint GL_CONSTANT_COLOR1_NV = 0x852BU;
enum uint GL_PRIMARY_COLOR_NV = 0x852CU;
enum uint GL_SECONDARY_COLOR_NV = 0x852DU;
enum uint GL_SPARE0_NV = 0x852EU;
enum uint GL_SPARE1_NV = 0x852FU;
enum uint GL_DISCARD_NV = 0x8530U;
enum uint GL_E_TIMES_F_NV = 0x8531U;
enum uint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532U;
enum uint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533U;
enum uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534U;
enum uint GL_PER_STAGE_CONSTANTS_NV = 0x8535U;
enum uint GL_UNSIGNED_IDENTITY_NV = 0x8536U;
enum uint GL_UNSIGNED_INVERT_NV = 0x8537U;
enum uint GL_EXPAND_NORMAL_NV = 0x8538U;
enum uint GL_EXPAND_NEGATE_NV = 0x8539U;
enum uint GL_HALF_BIAS_NORMAL_NV = 0x853AU;
enum uint GL_HALF_BIAS_NEGATE_NV = 0x853BU;
enum uint GL_SIGNED_IDENTITY_NV = 0x853CU;
enum uint GL_SIGNED_NEGATE_NV = 0x853DU;
enum uint GL_SCALE_BY_TWO_NV = 0x853EU;
enum uint GL_SCALE_BY_FOUR_NV = 0x853FU;
enum uint GL_SCALE_BY_ONE_HALF_NV = 0x8540U;
enum uint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541U;
enum uint GL_COMBINER_INPUT_NV = 0x8542U;
enum uint GL_COMBINER_MAPPING_NV = 0x8543U;
enum uint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544U;
enum uint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545U;
enum uint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546U;
enum uint GL_COMBINER_MUX_SUM_NV = 0x8547U;
enum uint GL_COMBINER_SCALE_NV = 0x8548U;
enum uint GL_COMBINER_BIAS_NV = 0x8549U;
enum uint GL_COMBINER_AB_OUTPUT_NV = 0x854AU;
enum uint GL_COMBINER_CD_OUTPUT_NV = 0x854BU;
enum uint GL_COMBINER_SUM_OUTPUT_NV = 0x854CU;
enum uint GL_MAX_GENERAL_COMBINERS_NV = 0x854DU;
enum uint GL_NUM_GENERAL_COMBINERS_NV = 0x854EU;
enum uint GL_COLOR_SUM_CLAMP_NV = 0x854FU;
enum uint GL_COMBINER0_NV = 0x8550U;
enum uint GL_COMBINER1_NV = 0x8551U;
enum uint GL_COMBINER2_NV = 0x8552U;
enum uint GL_COMBINER3_NV = 0x8553U;
enum uint GL_COMBINER4_NV = 0x8554U;
enum uint GL_COMBINER5_NV = 0x8555U;
enum uint GL_COMBINER6_NV = 0x8556U;
enum uint GL_COMBINER7_NV = 0x8557U;
enum uint GL_PRIMITIVE_RESTART_NV = 0x8558U;
enum uint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559U;
enum uint GL_FOG_DISTANCE_MODE_NV = 0x855AU;
enum uint GL_EYE_RADIAL_NV = 0x855BU;
enum uint GL_EYE_PLANE_ABSOLUTE_NV = 0x855CU;
enum uint GL_EMBOSS_LIGHT_NV = 0x855DU;
enum uint GL_EMBOSS_CONSTANT_NV = 0x855EU;
enum uint GL_EMBOSS_MAP_NV = 0x855FU;
enum uint GL_RED_MIN_CLAMP_INGR = 0x8560U;
enum uint GL_GREEN_MIN_CLAMP_INGR = 0x8561U;
enum uint GL_BLUE_MIN_CLAMP_INGR = 0x8562U;
enum uint GL_ALPHA_MIN_CLAMP_INGR = 0x8563U;
enum uint GL_RED_MAX_CLAMP_INGR = 0x8564U;
enum uint GL_GREEN_MAX_CLAMP_INGR = 0x8565U;
enum uint GL_BLUE_MAX_CLAMP_INGR = 0x8566U;
enum uint GL_ALPHA_MAX_CLAMP_INGR = 0x8567U;
enum uint GL_INTERLACE_READ_INGR = 0x8568U;
enum uint GL_COMBINE = 0x8570U;
enum uint GL_COMBINE_ARB = 0x8570U;
enum uint GL_COMBINE_EXT = 0x8570U;
enum uint GL_COMBINE_RGB = 0x8571U;
enum uint GL_COMBINE_RGB_ARB = 0x8571U;
enum uint GL_COMBINE_RGB_EXT = 0x8571U;
enum uint GL_COMBINE_ALPHA = 0x8572U;
enum uint GL_COMBINE_ALPHA_ARB = 0x8572U;
enum uint GL_COMBINE_ALPHA_EXT = 0x8572U;
enum uint GL_RGB_SCALE = 0x8573U;
enum uint GL_RGB_SCALE_ARB = 0x8573U;
enum uint GL_RGB_SCALE_EXT = 0x8573U;
enum uint GL_ADD_SIGNED = 0x8574U;
enum uint GL_ADD_SIGNED_ARB = 0x8574U;
enum uint GL_ADD_SIGNED_EXT = 0x8574U;
enum uint GL_INTERPOLATE = 0x8575U;
enum uint GL_INTERPOLATE_ARB = 0x8575U;
enum uint GL_INTERPOLATE_EXT = 0x8575U;
enum uint GL_CONSTANT = 0x8576U;
enum uint GL_CONSTANT_ARB = 0x8576U;
enum uint GL_CONSTANT_EXT = 0x8576U;
enum uint GL_CONSTANT_NV = 0x8576U;
enum uint GL_PRIMARY_COLOR = 0x8577U;
enum uint GL_PRIMARY_COLOR_ARB = 0x8577U;
enum uint GL_PRIMARY_COLOR_EXT = 0x8577U;
enum uint GL_PREVIOUS = 0x8578U;
enum uint GL_PREVIOUS_ARB = 0x8578U;
enum uint GL_PREVIOUS_EXT = 0x8578U;
enum uint GL_SOURCE0_RGB = 0x8580U;
enum uint GL_SOURCE0_RGB_ARB = 0x8580U;
enum uint GL_SOURCE0_RGB_EXT = 0x8580U;
enum uint GL_SRC0_RGB = 0x8580U;
enum uint GL_SOURCE1_RGB = 0x8581U;
enum uint GL_SOURCE1_RGB_ARB = 0x8581U;
enum uint GL_SOURCE1_RGB_EXT = 0x8581U;
enum uint GL_SRC1_RGB = 0x8581U;
enum uint GL_SOURCE2_RGB = 0x8582U;
enum uint GL_SOURCE2_RGB_ARB = 0x8582U;
enum uint GL_SOURCE2_RGB_EXT = 0x8582U;
enum uint GL_SRC2_RGB = 0x8582U;
enum uint GL_SOURCE3_RGB_NV = 0x8583U;
enum uint GL_SOURCE0_ALPHA = 0x8588U;
enum uint GL_SOURCE0_ALPHA_ARB = 0x8588U;
enum uint GL_SOURCE0_ALPHA_EXT = 0x8588U;
enum uint GL_SRC0_ALPHA = 0x8588U;
enum uint GL_SOURCE1_ALPHA = 0x8589U;
enum uint GL_SOURCE1_ALPHA_ARB = 0x8589U;
enum uint GL_SOURCE1_ALPHA_EXT = 0x8589U;
enum uint GL_SRC1_ALPHA = 0x8589U;
enum uint GL_SRC1_ALPHA_EXT = 0x8589U;
enum uint GL_SOURCE2_ALPHA = 0x858AU;
enum uint GL_SOURCE2_ALPHA_ARB = 0x858AU;
enum uint GL_SOURCE2_ALPHA_EXT = 0x858AU;
enum uint GL_SRC2_ALPHA = 0x858AU;
enum uint GL_SOURCE3_ALPHA_NV = 0x858BU;
enum uint GL_OPERAND0_RGB = 0x8590U;
enum uint GL_OPERAND0_RGB_ARB = 0x8590U;
enum uint GL_OPERAND0_RGB_EXT = 0x8590U;
enum uint GL_OPERAND1_RGB = 0x8591U;
enum uint GL_OPERAND1_RGB_ARB = 0x8591U;
enum uint GL_OPERAND1_RGB_EXT = 0x8591U;
enum uint GL_OPERAND2_RGB = 0x8592U;
enum uint GL_OPERAND2_RGB_ARB = 0x8592U;
enum uint GL_OPERAND2_RGB_EXT = 0x8592U;
enum uint GL_OPERAND3_RGB_NV = 0x8593U;
enum uint GL_OPERAND0_ALPHA = 0x8598U;
enum uint GL_OPERAND0_ALPHA_ARB = 0x8598U;
enum uint GL_OPERAND0_ALPHA_EXT = 0x8598U;
enum uint GL_OPERAND1_ALPHA = 0x8599U;
enum uint GL_OPERAND1_ALPHA_ARB = 0x8599U;
enum uint GL_OPERAND1_ALPHA_EXT = 0x8599U;
enum uint GL_OPERAND2_ALPHA = 0x859AU;
enum uint GL_OPERAND2_ALPHA_ARB = 0x859AU;
enum uint GL_OPERAND2_ALPHA_EXT = 0x859AU;
enum uint GL_OPERAND3_ALPHA_NV = 0x859BU;
enum uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0U;
enum uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1U;
enum uint GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2U;
enum uint GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3U;
enum uint GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4U;
enum uint GL_PERTURB_EXT = 0x85AEU;
enum uint GL_TEXTURE_NORMAL_EXT = 0x85AFU;
enum uint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0U;
enum uint GL_TRANSFORM_HINT_APPLE = 0x85B1U;
enum uint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2U;
enum uint GL_BUFFER_OBJECT_APPLE = 0x85B3U;
enum uint GL_STORAGE_CLIENT_APPLE = 0x85B4U;
enum uint GL_VERTEX_ARRAY_BINDING = 0x85B5U;
enum uint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5U;
enum uint GL_VERTEX_ARRAY_BINDING_OES = 0x85B5U;
enum uint GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7U;
enum uint GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8U;
enum uint GL_YCBCR_422_APPLE = 0x85B9U;
enum uint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BAU;
enum uint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BAU;
enum uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BBU;
enum uint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BBU;
enum uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BCU;
enum uint GL_STORAGE_PRIVATE_APPLE = 0x85BDU;
enum uint GL_STORAGE_CACHED_APPLE = 0x85BEU;
enum uint GL_STORAGE_SHARED_APPLE = 0x85BFU;
enum uint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0U;
enum uint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1U;
enum uint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2U;
enum uint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3U;
enum uint GL_R1UI_V3F_SUN = 0x85C4U;
enum uint GL_R1UI_C4UB_V3F_SUN = 0x85C5U;
enum uint GL_R1UI_C3F_V3F_SUN = 0x85C6U;
enum uint GL_R1UI_N3F_V3F_SUN = 0x85C7U;
enum uint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8U;
enum uint GL_R1UI_T2F_V3F_SUN = 0x85C9U;
enum uint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CAU;
enum uint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CBU;
enum uint GL_SLICE_ACCUM_SUN = 0x85CCU;
enum uint GL_QUAD_MESH_SUN = 0x8614U;
enum uint GL_TRIANGLE_MESH_SUN = 0x8615U;
enum uint GL_VERTEX_PROGRAM_ARB = 0x8620U;
enum uint GL_VERTEX_PROGRAM_NV = 0x8620U;
enum uint GL_VERTEX_STATE_PROGRAM_NV = 0x8621U;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622U;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622U;
enum uint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623U;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623U;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623U;
enum uint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624U;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624U;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624U;
enum uint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625U;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625U;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625U;
enum uint GL_CURRENT_ATTRIB_NV = 0x8626U;
enum uint GL_CURRENT_VERTEX_ATTRIB = 0x8626U;
enum uint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626U;
enum uint GL_PROGRAM_LENGTH_ARB = 0x8627U;
enum uint GL_PROGRAM_LENGTH_NV = 0x8627U;
enum uint GL_PROGRAM_STRING_ARB = 0x8628U;
enum uint GL_PROGRAM_STRING_NV = 0x8628U;
enum uint GL_MODELVIEW_PROJECTION_NV = 0x8629U;
enum uint GL_IDENTITY_NV = 0x862AU;
enum uint GL_INVERSE_NV = 0x862BU;
enum uint GL_TRANSPOSE_NV = 0x862CU;
enum uint GL_INVERSE_TRANSPOSE_NV = 0x862DU;
enum uint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862EU;
enum uint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862EU;
enum uint GL_MAX_PROGRAM_MATRICES_ARB = 0x862FU;
enum uint GL_MAX_TRACK_MATRICES_NV = 0x862FU;
enum uint GL_MATRIX0_NV = 0x8630U;
enum uint GL_MATRIX1_NV = 0x8631U;
enum uint GL_MATRIX2_NV = 0x8632U;
enum uint GL_MATRIX3_NV = 0x8633U;
enum uint GL_MATRIX4_NV = 0x8634U;
enum uint GL_MATRIX5_NV = 0x8635U;
enum uint GL_MATRIX6_NV = 0x8636U;
enum uint GL_MATRIX7_NV = 0x8637U;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640U;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640U;
enum uint GL_CURRENT_MATRIX_ARB = 0x8641U;
enum uint GL_CURRENT_MATRIX_NV = 0x8641U;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642U;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642U;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642U;
enum uint GL_PROGRAM_POINT_SIZE = 0x8642U;
enum uint GL_PROGRAM_POINT_SIZE_ARB = 0x8642U;
enum uint GL_PROGRAM_POINT_SIZE_EXT = 0x8642U;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643U;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643U;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643U;
enum uint GL_PROGRAM_PARAMETER_NV = 0x8644U;
enum uint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645U;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645U;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645U;
enum uint GL_PROGRAM_TARGET_NV = 0x8646U;
enum uint GL_PROGRAM_RESIDENT_NV = 0x8647U;
enum uint GL_TRACK_MATRIX_NV = 0x8648U;
enum uint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649U;
enum uint GL_VERTEX_PROGRAM_BINDING_NV = 0x864AU;
enum uint GL_PROGRAM_ERROR_POSITION_ARB = 0x864BU;
enum uint GL_PROGRAM_ERROR_POSITION_NV = 0x864BU;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864CU;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864DU;
enum uint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864EU;
enum uint GL_DEPTH_CLAMP = 0x864FU;
enum uint GL_DEPTH_CLAMP_NV = 0x864FU;
enum uint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650U;
enum uint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651U;
enum uint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652U;
enum uint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653U;
enum uint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654U;
enum uint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655U;
enum uint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656U;
enum uint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657U;
enum uint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658U;
enum uint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659U;
enum uint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865AU;
enum uint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865BU;
enum uint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865CU;
enum uint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865DU;
enum uint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865EU;
enum uint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865FU;
enum uint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660U;
enum uint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661U;
enum uint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662U;
enum uint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663U;
enum uint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664U;
enum uint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665U;
enum uint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666U;
enum uint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667U;
enum uint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668U;
enum uint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669U;
enum uint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866AU;
enum uint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866BU;
enum uint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866CU;
enum uint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866DU;
enum uint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866EU;
enum uint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866FU;
enum uint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670U;
enum uint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671U;
enum uint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672U;
enum uint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673U;
enum uint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674U;
enum uint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675U;
enum uint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676U;
enum uint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677U;
enum uint GL_PROGRAM_BINDING_ARB = 0x8677U;
enum uint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678U;
enum uint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679U;
enum uint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867AU;
enum uint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867BU;
enum uint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867CU;
enum uint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867DU;
enum uint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867EU;
enum uint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867FU;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0U;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0U;
enum uint GL_TEXTURE_COMPRESSED = 0x86A1U;
enum uint GL_TEXTURE_COMPRESSED_ARB = 0x86A1U;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2U;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2U;
enum uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3U;
enum uint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3U;
enum uint GL_MAX_VERTEX_UNITS_ARB = 0x86A4U;
enum uint GL_MAX_VERTEX_UNITS_OES = 0x86A4U;
enum uint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5U;
enum uint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6U;
enum uint GL_VERTEX_BLEND_ARB = 0x86A7U;
enum uint GL_CURRENT_WEIGHT_ARB = 0x86A8U;
enum uint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9U;
enum uint GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9U;
enum uint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AAU;
enum uint GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AAU;
enum uint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86ABU;
enum uint GL_WEIGHT_ARRAY_SIZE_OES = 0x86ABU;
enum uint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86ACU;
enum uint GL_WEIGHT_ARRAY_POINTER_OES = 0x86ACU;
enum uint GL_WEIGHT_ARRAY_ARB = 0x86ADU;
enum uint GL_WEIGHT_ARRAY_OES = 0x86ADU;
enum uint GL_DOT3_RGB = 0x86AEU;
enum uint GL_DOT3_RGB_ARB = 0x86AEU;
enum uint GL_DOT3_RGBA = 0x86AFU;
enum uint GL_DOT3_RGBA_ARB = 0x86AFU;
enum uint GL_DOT3_RGBA_IMG = 0x86AFU;
enum uint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0U;
enum uint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1U;
enum uint GL_MULTISAMPLE_3DFX = 0x86B2U;
enum uint GL_SAMPLE_BUFFERS_3DFX = 0x86B3U;
enum uint GL_SAMPLES_3DFX = 0x86B4U;
enum uint GL_EVAL_2D_NV = 0x86C0U;
enum uint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1U;
enum uint GL_MAP_TESSELLATION_NV = 0x86C2U;
enum uint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3U;
enum uint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4U;
enum uint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5U;
enum uint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6U;
enum uint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7U;
enum uint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8U;
enum uint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9U;
enum uint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CAU;
enum uint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CBU;
enum uint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CCU;
enum uint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CDU;
enum uint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CEU;
enum uint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CFU;
enum uint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0U;
enum uint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1U;
enum uint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2U;
enum uint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3U;
enum uint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4U;
enum uint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5U;
enum uint GL_MAX_MAP_TESSELLATION_NV = 0x86D6U;
enum uint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7U;
enum uint GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8U;
enum uint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9U;
enum uint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DAU;
enum uint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DBU;
enum uint GL_DSDT_MAG_INTENSITY_NV = 0x86DCU;
enum uint GL_SHADER_CONSISTENT_NV = 0x86DDU;
enum uint GL_TEXTURE_SHADER_NV = 0x86DEU;
enum uint GL_SHADER_OPERATION_NV = 0x86DFU;
enum uint GL_CULL_MODES_NV = 0x86E0U;
enum uint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1U;
enum uint GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1U;
enum uint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2U;
enum uint GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2U;
enum uint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3U;
enum uint GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3U;
enum uint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4U;
enum uint GL_CONST_EYE_NV = 0x86E5U;
enum uint GL_PASS_THROUGH_NV = 0x86E6U;
enum uint GL_CULL_FRAGMENT_NV = 0x86E7U;
enum uint GL_OFFSET_TEXTURE_2D_NV = 0x86E8U;
enum uint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9U;
enum uint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EAU;
enum uint GL_SURFACE_STATE_NV = 0x86EBU;
enum uint GL_DOT_PRODUCT_NV = 0x86ECU;
enum uint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86EDU;
enum uint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EEU;
enum uint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EFU;
enum uint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0U;
enum uint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1U;
enum uint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2U;
enum uint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3U;
enum uint GL_HILO_NV = 0x86F4U;
enum uint GL_DSDT_NV = 0x86F5U;
enum uint GL_DSDT_MAG_NV = 0x86F6U;
enum uint GL_DSDT_MAG_VIB_NV = 0x86F7U;
enum uint GL_HILO16_NV = 0x86F8U;
enum uint GL_SIGNED_HILO_NV = 0x86F9U;
enum uint GL_SIGNED_HILO16_NV = 0x86FAU;
enum uint GL_SIGNED_RGBA_NV = 0x86FBU;
enum uint GL_SIGNED_RGBA8_NV = 0x86FCU;
enum uint GL_SURFACE_REGISTERED_NV = 0x86FDU;
enum uint GL_SIGNED_RGB_NV = 0x86FEU;
enum uint GL_SIGNED_RGB8_NV = 0x86FFU;
enum uint GL_SURFACE_MAPPED_NV = 0x8700U;
enum uint GL_SIGNED_LUMINANCE_NV = 0x8701U;
enum uint GL_SIGNED_LUMINANCE8_NV = 0x8702U;
enum uint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703U;
enum uint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704U;
enum uint GL_SIGNED_ALPHA_NV = 0x8705U;
enum uint GL_SIGNED_ALPHA8_NV = 0x8706U;
enum uint GL_SIGNED_INTENSITY_NV = 0x8707U;
enum uint GL_SIGNED_INTENSITY8_NV = 0x8708U;
enum uint GL_DSDT8_NV = 0x8709U;
enum uint GL_DSDT8_MAG8_NV = 0x870AU;
enum uint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870BU;
enum uint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870CU;
enum uint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870DU;
enum uint GL_HI_SCALE_NV = 0x870EU;
enum uint GL_LO_SCALE_NV = 0x870FU;
enum uint GL_DS_SCALE_NV = 0x8710U;
enum uint GL_DT_SCALE_NV = 0x8711U;
enum uint GL_MAGNITUDE_SCALE_NV = 0x8712U;
enum uint GL_VIBRANCE_SCALE_NV = 0x8713U;
enum uint GL_HI_BIAS_NV = 0x8714U;
enum uint GL_LO_BIAS_NV = 0x8715U;
enum uint GL_DS_BIAS_NV = 0x8716U;
enum uint GL_DT_BIAS_NV = 0x8717U;
enum uint GL_MAGNITUDE_BIAS_NV = 0x8718U;
enum uint GL_VIBRANCE_BIAS_NV = 0x8719U;
enum uint GL_TEXTURE_BORDER_VALUES_NV = 0x871AU;
enum uint GL_TEXTURE_HI_SIZE_NV = 0x871BU;
enum uint GL_TEXTURE_LO_SIZE_NV = 0x871CU;
enum uint GL_TEXTURE_DS_SIZE_NV = 0x871DU;
enum uint GL_TEXTURE_DT_SIZE_NV = 0x871EU;
enum uint GL_TEXTURE_MAG_SIZE_NV = 0x871FU;
enum uint GL_MODELVIEW2_ARB = 0x8722U;
enum uint GL_MODELVIEW3_ARB = 0x8723U;
enum uint GL_MODELVIEW4_ARB = 0x8724U;
enum uint GL_MODELVIEW5_ARB = 0x8725U;
enum uint GL_MODELVIEW6_ARB = 0x8726U;
enum uint GL_MODELVIEW7_ARB = 0x8727U;
enum uint GL_MODELVIEW8_ARB = 0x8728U;
enum uint GL_MODELVIEW9_ARB = 0x8729U;
enum uint GL_MODELVIEW10_ARB = 0x872AU;
enum uint GL_MODELVIEW11_ARB = 0x872BU;
enum uint GL_MODELVIEW12_ARB = 0x872CU;
enum uint GL_MODELVIEW13_ARB = 0x872DU;
enum uint GL_MODELVIEW14_ARB = 0x872EU;
enum uint GL_MODELVIEW15_ARB = 0x872FU;
enum uint GL_MODELVIEW16_ARB = 0x8730U;
enum uint GL_MODELVIEW17_ARB = 0x8731U;
enum uint GL_MODELVIEW18_ARB = 0x8732U;
enum uint GL_MODELVIEW19_ARB = 0x8733U;
enum uint GL_MODELVIEW20_ARB = 0x8734U;
enum uint GL_MODELVIEW21_ARB = 0x8735U;
enum uint GL_MODELVIEW22_ARB = 0x8736U;
enum uint GL_MODELVIEW23_ARB = 0x8737U;
enum uint GL_MODELVIEW24_ARB = 0x8738U;
enum uint GL_MODELVIEW25_ARB = 0x8739U;
enum uint GL_MODELVIEW26_ARB = 0x873AU;
enum uint GL_MODELVIEW27_ARB = 0x873BU;
enum uint GL_MODELVIEW28_ARB = 0x873CU;
enum uint GL_MODELVIEW29_ARB = 0x873DU;
enum uint GL_MODELVIEW30_ARB = 0x873EU;
enum uint GL_MODELVIEW31_ARB = 0x873FU;
enum uint GL_DOT3_RGB_EXT = 0x8740U;
enum uint GL_Z400_BINARY_AMD = 0x8740U;
enum uint GL_DOT3_RGBA_EXT = 0x8741U;
enum uint GL_PROGRAM_BINARY_LENGTH_OES = 0x8741U;
enum uint GL_PROGRAM_BINARY_LENGTH = 0x8741U;
enum uint GL_MIRROR_CLAMP_ATI = 0x8742U;
enum uint GL_MIRROR_CLAMP_EXT = 0x8742U;
enum uint GL_MIRROR_CLAMP_TO_EDGE = 0x8743U;
enum uint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743U;
enum uint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743U;
enum uint GL_MODULATE_ADD_ATI = 0x8744U;
enum uint GL_MODULATE_SIGNED_ADD_ATI = 0x8745U;
enum uint GL_MODULATE_SUBTRACT_ATI = 0x8746U;
enum uint GL_SET_AMD = 0x874AU;
enum uint GL_REPLACE_VALUE_AMD = 0x874BU;
enum uint GL_STENCIL_OP_VALUE_AMD = 0x874CU;
enum uint GL_STENCIL_BACK_OP_VALUE_AMD = 0x874DU;
enum uint GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874EU;
enum uint GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874FU;
enum uint GL_DEPTH_STENCIL_MESA = 0x8750U;
enum uint GL_UNSIGNED_INT_24_8_MESA = 0x8751U;
enum uint GL_UNSIGNED_INT_8_24_REV_MESA = 0x8752U;
enum uint GL_UNSIGNED_SHORT_15_1_MESA = 0x8753U;
enum uint GL_UNSIGNED_SHORT_1_15_REV_MESA = 0x8754U;
enum uint GL_TRACE_MASK_MESA = 0x8755U;
enum uint GL_TRACE_NAME_MESA = 0x8756U;
enum uint GL_YCBCR_MESA = 0x8757U;
enum uint GL_PACK_INVERT_MESA = 0x8758U;
enum uint GL_DEBUG_OBJECT_MESA = 0x8759U;
enum uint GL_TEXTURE_1D_STACK_MESAX = 0x8759U;
enum uint GL_DEBUG_PRINT_MESA = 0x875AU;
enum uint GL_TEXTURE_2D_STACK_MESAX = 0x875AU;
enum uint GL_DEBUG_ASSERT_MESA = 0x875BU;
enum uint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875BU;
enum uint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875CU;
enum uint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875DU;
enum uint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875EU;
enum uint GL_STATIC_ATI = 0x8760U;
enum uint GL_DYNAMIC_ATI = 0x8761U;
enum uint GL_PRESERVE_ATI = 0x8762U;
enum uint GL_DISCARD_ATI = 0x8763U;
enum uint GL_BUFFER_SIZE = 0x8764U;
enum uint GL_BUFFER_SIZE_ARB = 0x8764U;
enum uint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764U;
enum uint GL_BUFFER_USAGE = 0x8765U;
enum uint GL_BUFFER_USAGE_ARB = 0x8765U;
enum uint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765U;
enum uint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766U;
enum uint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767U;
enum uint GL_ELEMENT_ARRAY_ATI = 0x8768U;
enum uint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769U;
enum uint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876AU;
enum uint GL_MAX_VERTEX_STREAMS_ATI = 0x876BU;
enum uint GL_VERTEX_STREAM0_ATI = 0x876CU;
enum uint GL_VERTEX_STREAM1_ATI = 0x876DU;
enum uint GL_VERTEX_STREAM2_ATI = 0x876EU;
enum uint GL_VERTEX_STREAM3_ATI = 0x876FU;
enum uint GL_VERTEX_STREAM4_ATI = 0x8770U;
enum uint GL_VERTEX_STREAM5_ATI = 0x8771U;
enum uint GL_VERTEX_STREAM6_ATI = 0x8772U;
enum uint GL_VERTEX_STREAM7_ATI = 0x8773U;
enum uint GL_VERTEX_SOURCE_ATI = 0x8774U;
enum uint GL_BUMP_ROT_MATRIX_ATI = 0x8775U;
enum uint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776U;
enum uint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777U;
enum uint GL_BUMP_TEX_UNITS_ATI = 0x8778U;
enum uint GL_DUDV_ATI = 0x8779U;
enum uint GL_DU8DV8_ATI = 0x877AU;
enum uint GL_BUMP_ENVMAP_ATI = 0x877BU;
enum uint GL_BUMP_TARGET_ATI = 0x877CU;
enum uint GL_VERTEX_SHADER_EXT = 0x8780U;
enum uint GL_VERTEX_SHADER_BINDING_EXT = 0x8781U;
enum uint GL_OP_INDEX_EXT = 0x8782U;
enum uint GL_OP_NEGATE_EXT = 0x8783U;
enum uint GL_OP_DOT3_EXT = 0x8784U;
enum uint GL_OP_DOT4_EXT = 0x8785U;
enum uint GL_OP_MUL_EXT = 0x8786U;
enum uint GL_OP_ADD_EXT = 0x8787U;
enum uint GL_OP_MADD_EXT = 0x8788U;
enum uint GL_OP_FRAC_EXT = 0x8789U;
enum uint GL_OP_MAX_EXT = 0x878AU;
enum uint GL_OP_MIN_EXT = 0x878BU;
enum uint GL_OP_SET_GE_EXT = 0x878CU;
enum uint GL_OP_SET_LT_EXT = 0x878DU;
enum uint GL_OP_CLAMP_EXT = 0x878EU;
enum uint GL_OP_FLOOR_EXT = 0x878FU;
enum uint GL_OP_ROUND_EXT = 0x8790U;
enum uint GL_OP_EXP_BASE_2_EXT = 0x8791U;
enum uint GL_OP_LOG_BASE_2_EXT = 0x8792U;
enum uint GL_OP_POWER_EXT = 0x8793U;
enum uint GL_OP_RECIP_EXT = 0x8794U;
enum uint GL_OP_RECIP_SQRT_EXT = 0x8795U;
enum uint GL_OP_SUB_EXT = 0x8796U;
enum uint GL_OP_CROSS_PRODUCT_EXT = 0x8797U;
enum uint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798U;
enum uint GL_OP_MOV_EXT = 0x8799U;
enum uint GL_OUTPUT_VERTEX_EXT = 0x879AU;
enum uint GL_OUTPUT_COLOR0_EXT = 0x879BU;
enum uint GL_OUTPUT_COLOR1_EXT = 0x879CU;
enum uint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879DU;
enum uint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879EU;
enum uint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879FU;
enum uint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0U;
enum uint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1U;
enum uint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2U;
enum uint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3U;
enum uint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4U;
enum uint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5U;
enum uint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6U;
enum uint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7U;
enum uint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8U;
enum uint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9U;
enum uint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AAU;
enum uint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87ABU;
enum uint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87ACU;
enum uint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87ADU;
enum uint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AEU;
enum uint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AFU;
enum uint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0U;
enum uint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1U;
enum uint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2U;
enum uint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3U;
enum uint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4U;
enum uint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5U;
enum uint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6U;
enum uint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7U;
enum uint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8U;
enum uint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9U;
enum uint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BAU;
enum uint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BBU;
enum uint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BCU;
enum uint GL_OUTPUT_FOG_EXT = 0x87BDU;
enum uint GL_SCALAR_EXT = 0x87BEU;
enum uint GL_VECTOR_EXT = 0x87BFU;
enum uint GL_MATRIX_EXT = 0x87C0U;
enum uint GL_VARIANT_EXT = 0x87C1U;
enum uint GL_INVARIANT_EXT = 0x87C2U;
enum uint GL_LOCAL_CONSTANT_EXT = 0x87C3U;
enum uint GL_LOCAL_EXT = 0x87C4U;
enum uint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5U;
enum uint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6U;
enum uint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7U;
enum uint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8U;
enum uint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9U;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CAU;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CBU;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CCU;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CDU;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CEU;
enum uint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CFU;
enum uint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0U;
enum uint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1U;
enum uint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2U;
enum uint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3U;
enum uint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4U;
enum uint GL_X_EXT = 0x87D5U;
enum uint GL_Y_EXT = 0x87D6U;
enum uint GL_Z_EXT = 0x87D7U;
enum uint GL_W_EXT = 0x87D8U;
enum uint GL_NEGATIVE_X_EXT = 0x87D9U;
enum uint GL_NEGATIVE_Y_EXT = 0x87DAU;
enum uint GL_NEGATIVE_Z_EXT = 0x87DBU;
enum uint GL_NEGATIVE_W_EXT = 0x87DCU;
enum uint GL_ZERO_EXT = 0x87DDU;
enum uint GL_ONE_EXT = 0x87DEU;
enum uint GL_NEGATIVE_ONE_EXT = 0x87DFU;
enum uint GL_NORMALIZED_RANGE_EXT = 0x87E0U;
enum uint GL_FULL_RANGE_EXT = 0x87E1U;
enum uint GL_CURRENT_VERTEX_EXT = 0x87E2U;
enum uint GL_MVP_MATRIX_EXT = 0x87E3U;
enum uint GL_VARIANT_VALUE_EXT = 0x87E4U;
enum uint GL_VARIANT_DATATYPE_EXT = 0x87E5U;
enum uint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6U;
enum uint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7U;
enum uint GL_VARIANT_ARRAY_EXT = 0x87E8U;
enum uint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9U;
enum uint GL_INVARIANT_VALUE_EXT = 0x87EAU;
enum uint GL_INVARIANT_DATATYPE_EXT = 0x87EBU;
enum uint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87ECU;
enum uint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87EDU;
enum uint GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EEU;
enum uint GL_PN_TRIANGLES_ATI = 0x87F0U;
enum uint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1U;
enum uint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2U;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3U;
enum uint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4U;
enum uint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5U;
enum uint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6U;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7U;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8U;
enum uint GL_3DC_X_AMD = 0x87F9U;
enum uint GL_3DC_XY_AMD = 0x87FAU;
enum uint GL_VBO_FREE_MEMORY_ATI = 0x87FBU;
enum uint GL_TEXTURE_FREE_MEMORY_ATI = 0x87FCU;
enum uint GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FDU;
enum uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FEU;
enum uint GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FEU;
enum uint GL_PROGRAM_BINARY_FORMATS = 0x87FFU;
enum uint GL_PROGRAM_BINARY_FORMATS_OES = 0x87FFU;
enum uint GL_STENCIL_BACK_FUNC = 0x8800U;
enum uint GL_STENCIL_BACK_FUNC_ATI = 0x8800U;
enum uint GL_STENCIL_BACK_FAIL = 0x8801U;
enum uint GL_STENCIL_BACK_FAIL_ATI = 0x8801U;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802U;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802U;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803U;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803U;
enum uint GL_FRAGMENT_PROGRAM_ARB = 0x8804U;
enum uint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805U;
enum uint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806U;
enum uint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807U;
enum uint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808U;
enum uint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809U;
enum uint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880AU;
enum uint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880BU;
enum uint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880CU;
enum uint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880DU;
enum uint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880EU;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880FU;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810U;
enum uint GL_RGBA32F = 0x8814U;
enum uint GL_RGBA32F_ARB = 0x8814U;
enum uint GL_RGBA32F_EXT = 0x8814U;
enum uint GL_RGBA_FLOAT32_APPLE = 0x8814U;
enum uint GL_RGBA_FLOAT32_ATI = 0x8814U;
enum uint GL_RGB32F = 0x8815U;
enum uint GL_RGB32F_ARB = 0x8815U;
enum uint GL_RGB32F_EXT = 0x8815U;
enum uint GL_RGB_FLOAT32_APPLE = 0x8815U;
enum uint GL_RGB_FLOAT32_ATI = 0x8815U;
enum uint GL_ALPHA32F_ARB = 0x8816U;
enum uint GL_ALPHA32F_EXT = 0x8816U;
enum uint GL_ALPHA_FLOAT32_APPLE = 0x8816U;
enum uint GL_ALPHA_FLOAT32_ATI = 0x8816U;
enum uint GL_INTENSITY32F_ARB = 0x8817U;
enum uint GL_INTENSITY_FLOAT32_APPLE = 0x8817U;
enum uint GL_INTENSITY_FLOAT32_ATI = 0x8817U;
enum uint GL_LUMINANCE32F_ARB = 0x8818U;
enum uint GL_LUMINANCE32F_EXT = 0x8818U;
enum uint GL_LUMINANCE_FLOAT32_APPLE = 0x8818U;
enum uint GL_LUMINANCE_FLOAT32_ATI = 0x8818U;
enum uint GL_LUMINANCE_ALPHA32F_ARB = 0x8819U;
enum uint GL_LUMINANCE_ALPHA32F_EXT = 0x8819U;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819U;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819U;
enum uint GL_RGBA16F = 0x881AU;
enum uint GL_RGBA16F_ARB = 0x881AU;
enum uint GL_RGBA16F_EXT = 0x881AU;
enum uint GL_RGBA_FLOAT16_APPLE = 0x881AU;
enum uint GL_RGBA_FLOAT16_ATI = 0x881AU;
enum uint GL_RGB16F = 0x881BU;
enum uint GL_RGB16F_ARB = 0x881BU;
enum uint GL_RGB16F_EXT = 0x881BU;
enum uint GL_RGB_FLOAT16_APPLE = 0x881BU;
enum uint GL_RGB_FLOAT16_ATI = 0x881BU;
enum uint GL_ALPHA16F_ARB = 0x881CU;
enum uint GL_ALPHA16F_EXT = 0x881CU;
enum uint GL_ALPHA_FLOAT16_APPLE = 0x881CU;
enum uint GL_ALPHA_FLOAT16_ATI = 0x881CU;
enum uint GL_INTENSITY16F_ARB = 0x881DU;
enum uint GL_INTENSITY_FLOAT16_APPLE = 0x881DU;
enum uint GL_INTENSITY_FLOAT16_ATI = 0x881DU;
enum uint GL_LUMINANCE16F_ARB = 0x881EU;
enum uint GL_LUMINANCE16F_EXT = 0x881EU;
enum uint GL_LUMINANCE_FLOAT16_APPLE = 0x881EU;
enum uint GL_LUMINANCE_FLOAT16_ATI = 0x881EU;
enum uint GL_LUMINANCE_ALPHA16F_ARB = 0x881FU;
enum uint GL_LUMINANCE_ALPHA16F_EXT = 0x881FU;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881FU;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881FU;
enum uint GL_RGBA_FLOAT_MODE_ARB = 0x8820U;
enum uint GL_RGBA_FLOAT_MODE_ATI = 0x8820U;
enum uint GL_WRITEONLY_RENDERING_QCOM = 0x8823U;
enum uint GL_MAX_DRAW_BUFFERS = 0x8824U;
enum uint GL_MAX_DRAW_BUFFERS_ARB = 0x8824U;
enum uint GL_MAX_DRAW_BUFFERS_ATI = 0x8824U;
enum uint GL_MAX_DRAW_BUFFERS_EXT = 0x8824U;
enum uint GL_MAX_DRAW_BUFFERS_NV = 0x8824U;
enum uint GL_DRAW_BUFFER0 = 0x8825U;
enum uint GL_DRAW_BUFFER0_ARB = 0x8825U;
enum uint GL_DRAW_BUFFER0_ATI = 0x8825U;
enum uint GL_DRAW_BUFFER0_EXT = 0x8825U;
enum uint GL_DRAW_BUFFER0_NV = 0x8825U;
enum uint GL_DRAW_BUFFER1 = 0x8826U;
enum uint GL_DRAW_BUFFER1_ARB = 0x8826U;
enum uint GL_DRAW_BUFFER1_ATI = 0x8826U;
enum uint GL_DRAW_BUFFER1_EXT = 0x8826U;
enum uint GL_DRAW_BUFFER1_NV = 0x8826U;
enum uint GL_DRAW_BUFFER2 = 0x8827U;
enum uint GL_DRAW_BUFFER2_ARB = 0x8827U;
enum uint GL_DRAW_BUFFER2_ATI = 0x8827U;
enum uint GL_DRAW_BUFFER2_EXT = 0x8827U;
enum uint GL_DRAW_BUFFER2_NV = 0x8827U;
enum uint GL_DRAW_BUFFER3 = 0x8828U;
enum uint GL_DRAW_BUFFER3_ARB = 0x8828U;
enum uint GL_DRAW_BUFFER3_ATI = 0x8828U;
enum uint GL_DRAW_BUFFER3_EXT = 0x8828U;
enum uint GL_DRAW_BUFFER3_NV = 0x8828U;
enum uint GL_DRAW_BUFFER4 = 0x8829U;
enum uint GL_DRAW_BUFFER4_ARB = 0x8829U;
enum uint GL_DRAW_BUFFER4_ATI = 0x8829U;
enum uint GL_DRAW_BUFFER4_EXT = 0x8829U;
enum uint GL_DRAW_BUFFER4_NV = 0x8829U;
enum uint GL_DRAW_BUFFER5 = 0x882AU;
enum uint GL_DRAW_BUFFER5_ARB = 0x882AU;
enum uint GL_DRAW_BUFFER5_ATI = 0x882AU;
enum uint GL_DRAW_BUFFER5_EXT = 0x882AU;
enum uint GL_DRAW_BUFFER5_NV = 0x882AU;
enum uint GL_DRAW_BUFFER6 = 0x882BU;
enum uint GL_DRAW_BUFFER6_ARB = 0x882BU;
enum uint GL_DRAW_BUFFER6_ATI = 0x882BU;
enum uint GL_DRAW_BUFFER6_EXT = 0x882BU;
enum uint GL_DRAW_BUFFER6_NV = 0x882BU;
enum uint GL_DRAW_BUFFER7 = 0x882CU;
enum uint GL_DRAW_BUFFER7_ARB = 0x882CU;
enum uint GL_DRAW_BUFFER7_ATI = 0x882CU;
enum uint GL_DRAW_BUFFER7_EXT = 0x882CU;
enum uint GL_DRAW_BUFFER7_NV = 0x882CU;
enum uint GL_DRAW_BUFFER8 = 0x882DU;
enum uint GL_DRAW_BUFFER8_ARB = 0x882DU;
enum uint GL_DRAW_BUFFER8_ATI = 0x882DU;
enum uint GL_DRAW_BUFFER8_EXT = 0x882DU;
enum uint GL_DRAW_BUFFER8_NV = 0x882DU;
enum uint GL_DRAW_BUFFER9 = 0x882EU;
enum uint GL_DRAW_BUFFER9_ARB = 0x882EU;
enum uint GL_DRAW_BUFFER9_ATI = 0x882EU;
enum uint GL_DRAW_BUFFER9_EXT = 0x882EU;
enum uint GL_DRAW_BUFFER9_NV = 0x882EU;
enum uint GL_DRAW_BUFFER10 = 0x882FU;
enum uint GL_DRAW_BUFFER10_ARB = 0x882FU;
enum uint GL_DRAW_BUFFER10_ATI = 0x882FU;
enum uint GL_DRAW_BUFFER10_EXT = 0x882FU;
enum uint GL_DRAW_BUFFER10_NV = 0x882FU;
enum uint GL_DRAW_BUFFER11 = 0x8830U;
enum uint GL_DRAW_BUFFER11_ARB = 0x8830U;
enum uint GL_DRAW_BUFFER11_ATI = 0x8830U;
enum uint GL_DRAW_BUFFER11_EXT = 0x8830U;
enum uint GL_DRAW_BUFFER11_NV = 0x8830U;
enum uint GL_DRAW_BUFFER12 = 0x8831U;
enum uint GL_DRAW_BUFFER12_ARB = 0x8831U;
enum uint GL_DRAW_BUFFER12_ATI = 0x8831U;
enum uint GL_DRAW_BUFFER12_EXT = 0x8831U;
enum uint GL_DRAW_BUFFER12_NV = 0x8831U;
enum uint GL_DRAW_BUFFER13 = 0x8832U;
enum uint GL_DRAW_BUFFER13_ARB = 0x8832U;
enum uint GL_DRAW_BUFFER13_ATI = 0x8832U;
enum uint GL_DRAW_BUFFER13_EXT = 0x8832U;
enum uint GL_DRAW_BUFFER13_NV = 0x8832U;
enum uint GL_DRAW_BUFFER14 = 0x8833U;
enum uint GL_DRAW_BUFFER14_ARB = 0x8833U;
enum uint GL_DRAW_BUFFER14_ATI = 0x8833U;
enum uint GL_DRAW_BUFFER14_EXT = 0x8833U;
enum uint GL_DRAW_BUFFER14_NV = 0x8833U;
enum uint GL_DRAW_BUFFER15 = 0x8834U;
enum uint GL_DRAW_BUFFER15_ARB = 0x8834U;
enum uint GL_DRAW_BUFFER15_ATI = 0x8834U;
enum uint GL_DRAW_BUFFER15_EXT = 0x8834U;
enum uint GL_DRAW_BUFFER15_NV = 0x8834U;
enum uint GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835U;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837U;
enum uint GL_BLEND_EQUATION_ALPHA = 0x883DU;
enum uint GL_BLEND_EQUATION_ALPHA_EXT = 0x883DU;
enum uint GL_BLEND_EQUATION_ALPHA_OES = 0x883DU;
enum uint GL_SUBSAMPLE_DISTANCE_AMD = 0x883FU;
enum uint GL_MATRIX_PALETTE_ARB = 0x8840U;
enum uint GL_MATRIX_PALETTE_OES = 0x8840U;
enum uint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841U;
enum uint GL_MAX_PALETTE_MATRICES_ARB = 0x8842U;
enum uint GL_MAX_PALETTE_MATRICES_OES = 0x8842U;
enum uint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843U;
enum uint GL_CURRENT_PALETTE_MATRIX_OES = 0x8843U;
enum uint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844U;
enum uint GL_MATRIX_INDEX_ARRAY_OES = 0x8844U;
enum uint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845U;
enum uint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846U;
enum uint GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846U;
enum uint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847U;
enum uint GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847U;
enum uint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848U;
enum uint GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848U;
enum uint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849U;
enum uint GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849U;
enum uint GL_TEXTURE_DEPTH_SIZE = 0x884AU;
enum uint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884AU;
enum uint GL_DEPTH_TEXTURE_MODE = 0x884BU;
enum uint GL_DEPTH_TEXTURE_MODE_ARB = 0x884BU;
enum uint GL_TEXTURE_COMPARE_MODE = 0x884CU;
enum uint GL_TEXTURE_COMPARE_MODE_ARB = 0x884CU;
enum uint GL_TEXTURE_COMPARE_MODE_EXT = 0x884CU;
enum uint GL_TEXTURE_COMPARE_FUNC = 0x884DU;
enum uint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884DU;
enum uint GL_TEXTURE_COMPARE_FUNC_EXT = 0x884DU;
enum uint GL_COMPARE_R_TO_TEXTURE = 0x884EU;
enum uint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884EU;
enum uint GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884EU;
enum uint GL_COMPARE_REF_TO_TEXTURE = 0x884EU;
enum uint GL_COMPARE_REF_TO_TEXTURE_EXT = 0x884EU;
enum uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884FU;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850U;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851U;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852U;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853U;
enum uint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854U;
enum uint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855U;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856U;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857U;
enum uint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858U;
enum uint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859U;
enum uint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885AU;
enum uint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885BU;
enum uint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885CU;
enum uint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885DU;
enum uint GL_HILO8_NV = 0x885EU;
enum uint GL_SIGNED_HILO8_NV = 0x885FU;
enum uint GL_FORCE_BLUE_TO_ONE_NV = 0x8860U;
enum uint GL_POINT_SPRITE = 0x8861U;
enum uint GL_POINT_SPRITE_ARB = 0x8861U;
enum uint GL_POINT_SPRITE_NV = 0x8861U;
enum uint GL_POINT_SPRITE_OES = 0x8861U;
enum uint GL_COORD_REPLACE = 0x8862U;
enum uint GL_COORD_REPLACE_ARB = 0x8862U;
enum uint GL_COORD_REPLACE_NV = 0x8862U;
enum uint GL_COORD_REPLACE_OES = 0x8862U;
enum uint GL_POINT_SPRITE_R_MODE_NV = 0x8863U;
enum uint GL_PIXEL_COUNTER_BITS_NV = 0x8864U;
enum uint GL_QUERY_COUNTER_BITS = 0x8864U;
enum uint GL_QUERY_COUNTER_BITS_ARB = 0x8864U;
enum uint GL_QUERY_COUNTER_BITS_EXT = 0x8864U;
enum uint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865U;
enum uint GL_CURRENT_QUERY = 0x8865U;
enum uint GL_CURRENT_QUERY_ARB = 0x8865U;
enum uint GL_CURRENT_QUERY_EXT = 0x8865U;
enum uint GL_PIXEL_COUNT_NV = 0x8866U;
enum uint GL_QUERY_RESULT = 0x8866U;
enum uint GL_QUERY_RESULT_ARB = 0x8866U;
enum uint GL_QUERY_RESULT_EXT = 0x8866U;
enum uint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867U;
enum uint GL_QUERY_RESULT_AVAILABLE = 0x8867U;
enum uint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867U;
enum uint GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867U;
enum uint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868U;
enum uint GL_MAX_VERTEX_ATTRIBS = 0x8869U;
enum uint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869U;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886AU;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886AU;
enum uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886CU;
enum uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886CU;
enum uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x886CU;
enum uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886DU;
enum uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886DU;
enum uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x886DU;
enum uint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886EU;
enum uint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886FU;
enum uint GL_FRAGMENT_PROGRAM_NV = 0x8870U;
enum uint GL_MAX_TEXTURE_COORDS = 0x8871U;
enum uint GL_MAX_TEXTURE_COORDS_ARB = 0x8871U;
enum uint GL_MAX_TEXTURE_COORDS_NV = 0x8871U;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872U;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872U;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872U;
enum uint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873U;
enum uint GL_PROGRAM_ERROR_STRING_ARB = 0x8874U;
enum uint GL_PROGRAM_ERROR_STRING_NV = 0x8874U;
enum uint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875U;
enum uint GL_PROGRAM_FORMAT_ARB = 0x8876U;
enum uint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878U;
enum uint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879U;
enum uint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887AU;
enum uint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887BU;
enum uint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887CU;
enum uint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887DU;
enum uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887FU;
enum uint GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887FU;
enum uint GL_GEOMETRY_SHADER_INVOCATIONS_OES = 0x887FU;
enum uint GL_FLOAT_R_NV = 0x8880U;
enum uint GL_FLOAT_RG_NV = 0x8881U;
enum uint GL_FLOAT_RGB_NV = 0x8882U;
enum uint GL_FLOAT_RGBA_NV = 0x8883U;
enum uint GL_FLOAT_R16_NV = 0x8884U;
enum uint GL_FLOAT_R32_NV = 0x8885U;
enum uint GL_FLOAT_RG16_NV = 0x8886U;
enum uint GL_FLOAT_RG32_NV = 0x8887U;
enum uint GL_FLOAT_RGB16_NV = 0x8888U;
enum uint GL_FLOAT_RGB32_NV = 0x8889U;
enum uint GL_FLOAT_RGBA16_NV = 0x888AU;
enum uint GL_FLOAT_RGBA32_NV = 0x888BU;
enum uint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888CU;
enum uint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888DU;
enum uint GL_FLOAT_RGBA_MODE_NV = 0x888EU;
enum uint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888FU;
enum uint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890U;
enum uint GL_DEPTH_BOUNDS_EXT = 0x8891U;
enum uint GL_ARRAY_BUFFER = 0x8892U;
enum uint GL_ARRAY_BUFFER_ARB = 0x8892U;
enum uint GL_ELEMENT_ARRAY_BUFFER = 0x8893U;
enum uint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893U;
enum uint GL_ARRAY_BUFFER_BINDING = 0x8894U;
enum uint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894U;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895U;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895U;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896U;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896U;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897U;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897U;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898U;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898U;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899U;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899U;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889AU;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889AU;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889BU;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889BU;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889CU;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889CU;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889DU;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889DU;
enum uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889DU;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889EU;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889EU;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889EU;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889FU;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889FU;
enum uint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0U;
enum uint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1U;
enum uint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2U;
enum uint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3U;
enum uint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4U;
enum uint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5U;
enum uint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6U;
enum uint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7U;
enum uint GL_PROGRAM_PARAMETERS_ARB = 0x88A8U;
enum uint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9U;
enum uint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AAU;
enum uint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88ABU;
enum uint GL_PROGRAM_ATTRIBS_ARB = 0x88ACU;
enum uint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88ADU;
enum uint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AEU;
enum uint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AFU;
enum uint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0U;
enum uint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1U;
enum uint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2U;
enum uint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3U;
enum uint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4U;
enum uint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5U;
enum uint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6U;
enum uint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7U;
enum uint GL_READ_ONLY = 0x88B8U;
enum uint GL_READ_ONLY_ARB = 0x88B8U;
enum uint GL_WRITE_ONLY = 0x88B9U;
enum uint GL_WRITE_ONLY_ARB = 0x88B9U;
enum uint GL_WRITE_ONLY_OES = 0x88B9U;
enum uint GL_READ_WRITE = 0x88BAU;
enum uint GL_READ_WRITE_ARB = 0x88BAU;
enum uint GL_BUFFER_ACCESS = 0x88BBU;
enum uint GL_BUFFER_ACCESS_ARB = 0x88BBU;
enum uint GL_BUFFER_ACCESS_OES = 0x88BBU;
enum uint GL_BUFFER_MAPPED = 0x88BCU;
enum uint GL_BUFFER_MAPPED_ARB = 0x88BCU;
enum uint GL_BUFFER_MAPPED_OES = 0x88BCU;
enum uint GL_BUFFER_MAP_POINTER = 0x88BDU;
enum uint GL_BUFFER_MAP_POINTER_ARB = 0x88BDU;
enum uint GL_BUFFER_MAP_POINTER_OES = 0x88BDU;
enum uint GL_WRITE_DISCARD_NV = 0x88BEU;
enum uint GL_TIME_ELAPSED = 0x88BFU;
enum uint GL_TIME_ELAPSED_EXT = 0x88BFU;
enum uint GL_MATRIX0_ARB = 0x88C0U;
enum uint GL_MATRIX1_ARB = 0x88C1U;
enum uint GL_MATRIX2_ARB = 0x88C2U;
enum uint GL_MATRIX3_ARB = 0x88C3U;
enum uint GL_MATRIX4_ARB = 0x88C4U;
enum uint GL_MATRIX5_ARB = 0x88C5U;
enum uint GL_MATRIX6_ARB = 0x88C6U;
enum uint GL_MATRIX7_ARB = 0x88C7U;
enum uint GL_MATRIX8_ARB = 0x88C8U;
enum uint GL_MATRIX9_ARB = 0x88C9U;
enum uint GL_MATRIX10_ARB = 0x88CAU;
enum uint GL_MATRIX11_ARB = 0x88CBU;
enum uint GL_MATRIX12_ARB = 0x88CCU;
enum uint GL_MATRIX13_ARB = 0x88CDU;
enum uint GL_MATRIX14_ARB = 0x88CEU;
enum uint GL_MATRIX15_ARB = 0x88CFU;
enum uint GL_MATRIX16_ARB = 0x88D0U;
enum uint GL_MATRIX17_ARB = 0x88D1U;
enum uint GL_MATRIX18_ARB = 0x88D2U;
enum uint GL_MATRIX19_ARB = 0x88D3U;
enum uint GL_MATRIX20_ARB = 0x88D4U;
enum uint GL_MATRIX21_ARB = 0x88D5U;
enum uint GL_MATRIX22_ARB = 0x88D6U;
enum uint GL_MATRIX23_ARB = 0x88D7U;
enum uint GL_MATRIX24_ARB = 0x88D8U;
enum uint GL_MATRIX25_ARB = 0x88D9U;
enum uint GL_MATRIX26_ARB = 0x88DAU;
enum uint GL_MATRIX27_ARB = 0x88DBU;
enum uint GL_MATRIX28_ARB = 0x88DCU;
enum uint GL_MATRIX29_ARB = 0x88DDU;
enum uint GL_MATRIX30_ARB = 0x88DEU;
enum uint GL_MATRIX31_ARB = 0x88DFU;
enum uint GL_STREAM_DRAW = 0x88E0U;
enum uint GL_STREAM_DRAW_ARB = 0x88E0U;
enum uint GL_STREAM_READ = 0x88E1U;
enum uint GL_STREAM_READ_ARB = 0x88E1U;
enum uint GL_STREAM_COPY = 0x88E2U;
enum uint GL_STREAM_COPY_ARB = 0x88E2U;
enum uint GL_STATIC_DRAW = 0x88E4U;
enum uint GL_STATIC_DRAW_ARB = 0x88E4U;
enum uint GL_STATIC_READ = 0x88E5U;
enum uint GL_STATIC_READ_ARB = 0x88E5U;
enum uint GL_STATIC_COPY = 0x88E6U;
enum uint GL_STATIC_COPY_ARB = 0x88E6U;
enum uint GL_DYNAMIC_DRAW = 0x88E8U;
enum uint GL_DYNAMIC_DRAW_ARB = 0x88E8U;
enum uint GL_DYNAMIC_READ = 0x88E9U;
enum uint GL_DYNAMIC_READ_ARB = 0x88E9U;
enum uint GL_DYNAMIC_COPY = 0x88EAU;
enum uint GL_DYNAMIC_COPY_ARB = 0x88EAU;
enum uint GL_PIXEL_PACK_BUFFER = 0x88EBU;
enum uint GL_PIXEL_PACK_BUFFER_ARB = 0x88EBU;
enum uint GL_PIXEL_PACK_BUFFER_EXT = 0x88EBU;
enum uint GL_PIXEL_UNPACK_BUFFER = 0x88ECU;
enum uint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88ECU;
enum uint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88ECU;
enum uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88EDU;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88EDU;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88EDU;
enum uint GL_ETC1_SRGB8_NV = 0x88EEU;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EFU;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EFU;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EFU;
enum uint GL_DEPTH24_STENCIL8 = 0x88F0U;
enum uint GL_DEPTH24_STENCIL8_EXT = 0x88F0U;
enum uint GL_DEPTH24_STENCIL8_OES = 0x88F0U;
enum uint GL_TEXTURE_STENCIL_SIZE = 0x88F1U;
enum uint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1U;
enum uint GL_STENCIL_TAG_BITS_EXT = 0x88F2U;
enum uint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3U;
enum uint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4U;
enum uint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5U;
enum uint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6U;
enum uint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7U;
enum uint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8U;
enum uint GL_SRC1_COLOR = 0x88F9U;
enum uint GL_SRC1_COLOR_EXT = 0x88F9U;
enum uint GL_ONE_MINUS_SRC1_COLOR = 0x88FAU;
enum uint GL_ONE_MINUS_SRC1_COLOR_EXT = 0x88FAU;
enum uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FBU;
enum uint GL_ONE_MINUS_SRC1_ALPHA_EXT = 0x88FBU;
enum uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FCU;
enum uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x88FCU;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FDU;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FDU;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FDU;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FEU;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FEU;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FEU;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FEU;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FEU;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FFU;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FFU;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904U;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904U;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904U;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905U;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905U;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905U;
enum uint GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906U;
enum uint GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907U;
enum uint GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908U;
enum uint GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909U;
enum uint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910U;
enum uint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911U;
enum uint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912U;
enum uint GL_SAMPLES_PASSED = 0x8914U;
enum uint GL_SAMPLES_PASSED_ARB = 0x8914U;
enum uint GL_GEOMETRY_VERTICES_OUT = 0x8916U;
enum uint GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916U;
enum uint GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 0x8916U;
enum uint GL_GEOMETRY_INPUT_TYPE = 0x8917U;
enum uint GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917U;
enum uint GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 0x8917U;
enum uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918U;
enum uint GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918U;
enum uint GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x8918U;
enum uint GL_SAMPLER_BINDING = 0x8919U;
enum uint GL_CLAMP_VERTEX_COLOR = 0x891AU;
enum uint GL_CLAMP_VERTEX_COLOR_ARB = 0x891AU;
enum uint GL_CLAMP_FRAGMENT_COLOR = 0x891BU;
enum uint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891BU;
enum uint GL_CLAMP_READ_COLOR = 0x891CU;
enum uint GL_CLAMP_READ_COLOR_ARB = 0x891CU;
enum uint GL_FIXED_ONLY = 0x891DU;
enum uint GL_FIXED_ONLY_ARB = 0x891DU;
enum uint GL_TESS_CONTROL_PROGRAM_NV = 0x891EU;
enum uint GL_TESS_EVALUATION_PROGRAM_NV = 0x891FU;
enum uint GL_FRAGMENT_SHADER_ATI = 0x8920U;
enum uint GL_REG_0_ATI = 0x8921U;
enum uint GL_REG_1_ATI = 0x8922U;
enum uint GL_REG_2_ATI = 0x8923U;
enum uint GL_REG_3_ATI = 0x8924U;
enum uint GL_REG_4_ATI = 0x8925U;
enum uint GL_REG_5_ATI = 0x8926U;
enum uint GL_REG_6_ATI = 0x8927U;
enum uint GL_REG_7_ATI = 0x8928U;
enum uint GL_REG_8_ATI = 0x8929U;
enum uint GL_REG_9_ATI = 0x892AU;
enum uint GL_REG_10_ATI = 0x892BU;
enum uint GL_REG_11_ATI = 0x892CU;
enum uint GL_REG_12_ATI = 0x892DU;
enum uint GL_REG_13_ATI = 0x892EU;
enum uint GL_REG_14_ATI = 0x892FU;
enum uint GL_REG_15_ATI = 0x8930U;
enum uint GL_REG_16_ATI = 0x8931U;
enum uint GL_REG_17_ATI = 0x8932U;
enum uint GL_REG_18_ATI = 0x8933U;
enum uint GL_REG_19_ATI = 0x8934U;
enum uint GL_REG_20_ATI = 0x8935U;
enum uint GL_REG_21_ATI = 0x8936U;
enum uint GL_REG_22_ATI = 0x8937U;
enum uint GL_REG_23_ATI = 0x8938U;
enum uint GL_REG_24_ATI = 0x8939U;
enum uint GL_REG_25_ATI = 0x893AU;
enum uint GL_REG_26_ATI = 0x893BU;
enum uint GL_REG_27_ATI = 0x893CU;
enum uint GL_REG_28_ATI = 0x893DU;
enum uint GL_REG_29_ATI = 0x893EU;
enum uint GL_REG_30_ATI = 0x893FU;
enum uint GL_REG_31_ATI = 0x8940U;
enum uint GL_CON_0_ATI = 0x8941U;
enum uint GL_CON_1_ATI = 0x8942U;
enum uint GL_CON_2_ATI = 0x8943U;
enum uint GL_CON_3_ATI = 0x8944U;
enum uint GL_CON_4_ATI = 0x8945U;
enum uint GL_CON_5_ATI = 0x8946U;
enum uint GL_CON_6_ATI = 0x8947U;
enum uint GL_CON_7_ATI = 0x8948U;
enum uint GL_CON_8_ATI = 0x8949U;
enum uint GL_CON_9_ATI = 0x894AU;
enum uint GL_CON_10_ATI = 0x894BU;
enum uint GL_CON_11_ATI = 0x894CU;
enum uint GL_CON_12_ATI = 0x894DU;
enum uint GL_CON_13_ATI = 0x894EU;
enum uint GL_CON_14_ATI = 0x894FU;
enum uint GL_CON_15_ATI = 0x8950U;
enum uint GL_CON_16_ATI = 0x8951U;
enum uint GL_CON_17_ATI = 0x8952U;
enum uint GL_CON_18_ATI = 0x8953U;
enum uint GL_CON_19_ATI = 0x8954U;
enum uint GL_CON_20_ATI = 0x8955U;
enum uint GL_CON_21_ATI = 0x8956U;
enum uint GL_CON_22_ATI = 0x8957U;
enum uint GL_CON_23_ATI = 0x8958U;
enum uint GL_CON_24_ATI = 0x8959U;
enum uint GL_CON_25_ATI = 0x895AU;
enum uint GL_CON_26_ATI = 0x895BU;
enum uint GL_CON_27_ATI = 0x895CU;
enum uint GL_CON_28_ATI = 0x895DU;
enum uint GL_CON_29_ATI = 0x895EU;
enum uint GL_CON_30_ATI = 0x895FU;
enum uint GL_CON_31_ATI = 0x8960U;
enum uint GL_MOV_ATI = 0x8961U;
enum uint GL_ADD_ATI = 0x8963U;
enum uint GL_MUL_ATI = 0x8964U;
enum uint GL_SUB_ATI = 0x8965U;
enum uint GL_DOT3_ATI = 0x8966U;
enum uint GL_DOT4_ATI = 0x8967U;
enum uint GL_MAD_ATI = 0x8968U;
enum uint GL_LERP_ATI = 0x8969U;
enum uint GL_CND_ATI = 0x896AU;
enum uint GL_CND0_ATI = 0x896BU;
enum uint GL_DOT2_ADD_ATI = 0x896CU;
enum uint GL_SECONDARY_INTERPOLATOR_ATI = 0x896DU;
enum uint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896EU;
enum uint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896FU;
enum uint GL_NUM_PASSES_ATI = 0x8970U;
enum uint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971U;
enum uint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972U;
enum uint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973U;
enum uint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974U;
enum uint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975U;
enum uint GL_SWIZZLE_STR_ATI = 0x8976U;
enum uint GL_SWIZZLE_STQ_ATI = 0x8977U;
enum uint GL_SWIZZLE_STR_DR_ATI = 0x8978U;
enum uint GL_SWIZZLE_STQ_DQ_ATI = 0x8979U;
enum uint GL_SWIZZLE_STRQ_ATI = 0x897AU;
enum uint GL_SWIZZLE_STRQ_DQ_ATI = 0x897BU;
enum uint GL_INTERLACE_OML = 0x8980U;
enum uint GL_INTERLACE_READ_OML = 0x8981U;
enum uint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982U;
enum uint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983U;
enum uint GL_PACK_RESAMPLE_OML = 0x8984U;
enum uint GL_UNPACK_RESAMPLE_OML = 0x8985U;
enum uint GL_RESAMPLE_REPLICATE_OML = 0x8986U;
enum uint GL_RESAMPLE_ZERO_FILL_OML = 0x8987U;
enum uint GL_RESAMPLE_AVERAGE_OML = 0x8988U;
enum uint GL_RESAMPLE_DECIMATE_OML = 0x8989U;
enum uint GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898AU;
enum uint GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898BU;
enum uint GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898CU;
enum uint GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898DU;
enum uint GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898EU;
enum uint GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898FU;
enum uint GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00U;
enum uint GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01U;
enum uint GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02U;
enum uint GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03U;
enum uint GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04U;
enum uint GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05U;
enum uint GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06U;
enum uint GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07U;
enum uint GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08U;
enum uint GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09U;
enum uint GL_DRAW_PIXELS_APPLE = 0x8A0AU;
enum uint GL_FENCE_APPLE = 0x8A0BU;
enum uint GL_ELEMENT_ARRAY_APPLE = 0x8A0CU;
enum uint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0DU;
enum uint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0EU;
enum uint GL_COLOR_FLOAT_APPLE = 0x8A0FU;
enum uint GL_UNIFORM_BUFFER = 0x8A11U;
enum uint GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12U;
enum uint GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13U;
enum uint GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14U;
enum uint GL_PACK_ROW_BYTES_APPLE = 0x8A15U;
enum uint GL_UNPACK_ROW_BYTES_APPLE = 0x8A16U;
enum uint GL_RELEASED_APPLE = 0x8A19U;
enum uint GL_VOLATILE_APPLE = 0x8A1AU;
enum uint GL_RETAINED_APPLE = 0x8A1BU;
enum uint GL_UNDEFINED_APPLE = 0x8A1CU;
enum uint GL_PURGEABLE_APPLE = 0x8A1DU;
enum uint GL_RGB_422_APPLE = 0x8A1FU;
enum uint GL_UNIFORM_BUFFER_BINDING = 0x8A28U;
enum uint GL_UNIFORM_BUFFER_START = 0x8A29U;
enum uint GL_UNIFORM_BUFFER_SIZE = 0x8A2AU;
enum uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2BU;
enum uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2CU;
enum uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2CU;
enum uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x8A2CU;
enum uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2DU;
enum uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2EU;
enum uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2FU;
enum uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30U;
enum uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31U;
enum uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32U;
enum uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32U;
enum uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8A32U;
enum uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33U;
enum uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34U;
enum uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35U;
enum uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36U;
enum uint GL_UNIFORM_TYPE = 0x8A37U;
enum uint GL_UNIFORM_SIZE = 0x8A38U;
enum uint GL_UNIFORM_NAME_LENGTH = 0x8A39U;
enum uint GL_UNIFORM_BLOCK_INDEX = 0x8A3AU;
enum uint GL_UNIFORM_OFFSET = 0x8A3BU;
enum uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3CU;
enum uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3DU;
enum uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3EU;
enum uint GL_UNIFORM_BLOCK_BINDING = 0x8A3FU;
enum uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40U;
enum uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41U;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42U;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43U;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44U;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45U;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46U;
enum uint GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48U;
enum uint GL_DECODE_EXT = 0x8A49U;
enum uint GL_SKIP_DECODE_EXT = 0x8A4AU;
enum uint GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4FU;
enum uint GL_RGB_RAW_422_APPLE = 0x8A51U;
enum uint GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52U;
enum uint GL_SYNC_OBJECT_APPLE = 0x8A53U;
enum uint GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54U;
enum uint GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55U;
enum uint GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56U;
enum uint GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57U;
enum uint GL_FRAGMENT_SHADER = 0x8B30U;
enum uint GL_FRAGMENT_SHADER_ARB = 0x8B30U;
enum uint GL_VERTEX_SHADER = 0x8B31U;
enum uint GL_VERTEX_SHADER_ARB = 0x8B31U;
enum uint GL_PROGRAM_OBJECT_ARB = 0x8B40U;
enum uint GL_PROGRAM_OBJECT_EXT = 0x8B40U;
enum uint GL_SHADER_OBJECT_ARB = 0x8B48U;
enum uint GL_SHADER_OBJECT_EXT = 0x8B48U;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49U;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49U;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4AU;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4AU;
enum uint GL_MAX_VARYING_FLOATS = 0x8B4BU;
enum uint GL_MAX_VARYING_COMPONENTS = 0x8B4BU;
enum uint GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4BU;
enum uint GL_MAX_VARYING_FLOATS_ARB = 0x8B4BU;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4CU;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4CU;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4DU;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4DU;
enum uint GL_OBJECT_TYPE_ARB = 0x8B4EU;
enum uint GL_SHADER_TYPE = 0x8B4FU;
enum uint GL_OBJECT_SUBTYPE_ARB = 0x8B4FU;
enum uint GL_FLOAT_VEC2 = 0x8B50U;
enum uint GL_FLOAT_VEC2_ARB = 0x8B50U;
enum uint GL_FLOAT_VEC3 = 0x8B51U;
enum uint GL_FLOAT_VEC3_ARB = 0x8B51U;
enum uint GL_FLOAT_VEC4 = 0x8B52U;
enum uint GL_FLOAT_VEC4_ARB = 0x8B52U;
enum uint GL_INT_VEC2 = 0x8B53U;
enum uint GL_INT_VEC2_ARB = 0x8B53U;
enum uint GL_INT_VEC3 = 0x8B54U;
enum uint GL_INT_VEC3_ARB = 0x8B54U;
enum uint GL_INT_VEC4 = 0x8B55U;
enum uint GL_INT_VEC4_ARB = 0x8B55U;
enum uint GL_BOOL = 0x8B56U;
enum uint GL_BOOL_ARB = 0x8B56U;
enum uint GL_BOOL_VEC2 = 0x8B57U;
enum uint GL_BOOL_VEC2_ARB = 0x8B57U;
enum uint GL_BOOL_VEC3 = 0x8B58U;
enum uint GL_BOOL_VEC3_ARB = 0x8B58U;
enum uint GL_BOOL_VEC4 = 0x8B59U;
enum uint GL_BOOL_VEC4_ARB = 0x8B59U;
enum uint GL_FLOAT_MAT2 = 0x8B5AU;
enum uint GL_FLOAT_MAT2_ARB = 0x8B5AU;
enum uint GL_FLOAT_MAT3 = 0x8B5BU;
enum uint GL_FLOAT_MAT3_ARB = 0x8B5BU;
enum uint GL_FLOAT_MAT4 = 0x8B5CU;
enum uint GL_FLOAT_MAT4_ARB = 0x8B5CU;
enum uint GL_SAMPLER_1D = 0x8B5DU;
enum uint GL_SAMPLER_1D_ARB = 0x8B5DU;
enum uint GL_SAMPLER_2D = 0x8B5EU;
enum uint GL_SAMPLER_2D_ARB = 0x8B5EU;
enum uint GL_SAMPLER_3D = 0x8B5FU;
enum uint GL_SAMPLER_3D_ARB = 0x8B5FU;
enum uint GL_SAMPLER_3D_OES = 0x8B5FU;
enum uint GL_SAMPLER_CUBE = 0x8B60U;
enum uint GL_SAMPLER_CUBE_ARB = 0x8B60U;
enum uint GL_SAMPLER_1D_SHADOW = 0x8B61U;
enum uint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61U;
enum uint GL_SAMPLER_2D_SHADOW = 0x8B62U;
enum uint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62U;
enum uint GL_SAMPLER_2D_SHADOW_EXT = 0x8B62U;
enum uint GL_SAMPLER_2D_RECT = 0x8B63U;
enum uint GL_SAMPLER_2D_RECT_ARB = 0x8B63U;
enum uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64U;
enum uint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64U;
enum uint GL_FLOAT_MAT2x3 = 0x8B65U;
enum uint GL_FLOAT_MAT2x3_NV = 0x8B65U;
enum uint GL_FLOAT_MAT2x4 = 0x8B66U;
enum uint GL_FLOAT_MAT2x4_NV = 0x8B66U;
enum uint GL_FLOAT_MAT3x2 = 0x8B67U;
enum uint GL_FLOAT_MAT3x2_NV = 0x8B67U;
enum uint GL_FLOAT_MAT3x4 = 0x8B68U;
enum uint GL_FLOAT_MAT3x4_NV = 0x8B68U;
enum uint GL_FLOAT_MAT4x2 = 0x8B69U;
enum uint GL_FLOAT_MAT4x2_NV = 0x8B69U;
enum uint GL_FLOAT_MAT4x3 = 0x8B6AU;
enum uint GL_FLOAT_MAT4x3_NV = 0x8B6AU;
enum uint GL_DELETE_STATUS = 0x8B80U;
enum uint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80U;
enum uint GL_COMPILE_STATUS = 0x8B81U;
enum uint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81U;
enum uint GL_LINK_STATUS = 0x8B82U;
enum uint GL_OBJECT_LINK_STATUS_ARB = 0x8B82U;
enum uint GL_VALIDATE_STATUS = 0x8B83U;
enum uint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83U;
enum uint GL_INFO_LOG_LENGTH = 0x8B84U;
enum uint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84U;
enum uint GL_ATTACHED_SHADERS = 0x8B85U;
enum uint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85U;
enum uint GL_ACTIVE_UNIFORMS = 0x8B86U;
enum uint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86U;
enum uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87U;
enum uint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87U;
enum uint GL_SHADER_SOURCE_LENGTH = 0x8B88U;
enum uint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88U;
enum uint GL_ACTIVE_ATTRIBUTES = 0x8B89U;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89U;
enum uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8AU;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8AU;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8BU;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8BU;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8BU;
enum uint GL_SHADING_LANGUAGE_VERSION = 0x8B8CU;
enum uint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8CU;
enum uint GL_CURRENT_PROGRAM = 0x8B8DU;
enum uint GL_ACTIVE_PROGRAM_EXT = 0x8B8DU;
enum uint GL_PALETTE4_RGB8_OES = 0x8B90U;
enum uint GL_PALETTE4_RGBA8_OES = 0x8B91U;
enum uint GL_PALETTE4_R5_G6_B5_OES = 0x8B92U;
enum uint GL_PALETTE4_RGBA4_OES = 0x8B93U;
enum uint GL_PALETTE4_RGB5_A1_OES = 0x8B94U;
enum uint GL_PALETTE8_RGB8_OES = 0x8B95U;
enum uint GL_PALETTE8_RGBA8_OES = 0x8B96U;
enum uint GL_PALETTE8_R5_G6_B5_OES = 0x8B97U;
enum uint GL_PALETTE8_RGBA4_OES = 0x8B98U;
enum uint GL_PALETTE8_RGB5_A1_OES = 0x8B99U;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9AU;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9AU;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9BU;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9BU;
enum uint GL_POINT_SIZE_ARRAY_OES = 0x8B9CU;
enum uint GL_TEXTURE_CROP_RECT_OES = 0x8B9DU;
enum uint GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9EU;
enum uint GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9FU;
enum uint GL_FRAGMENT_PROGRAM_POSITION_MESA = 0x8BB0U;
enum uint GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 0x8BB1U;
enum uint GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB2U;
enum uint GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 0x8BB3U;
enum uint GL_VERTEX_PROGRAM_POSITION_MESA = 0x8BB4U;
enum uint GL_VERTEX_PROGRAM_CALLBACK_MESA = 0x8BB5U;
enum uint GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB6U;
enum uint GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 0x8BB7U;
enum uint GL_COUNTER_TYPE_AMD = 0x8BC0U;
enum uint GL_COUNTER_RANGE_AMD = 0x8BC1U;
enum uint GL_UNSIGNED_INT64_AMD = 0x8BC2U;
enum uint GL_PERCENTAGE_AMD = 0x8BC3U;
enum uint GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4U;
enum uint GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5U;
enum uint GL_PERFMON_RESULT_AMD = 0x8BC6U;
enum uint GL_TEXTURE_WIDTH_QCOM = 0x8BD2U;
enum uint GL_TEXTURE_HEIGHT_QCOM = 0x8BD3U;
enum uint GL_TEXTURE_DEPTH_QCOM = 0x8BD4U;
enum uint GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5U;
enum uint GL_TEXTURE_FORMAT_QCOM = 0x8BD6U;
enum uint GL_TEXTURE_TYPE_QCOM = 0x8BD7U;
enum uint GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8U;
enum uint GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9U;
enum uint GL_TEXTURE_TARGET_QCOM = 0x8BDAU;
enum uint GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDBU;
enum uint GL_STATE_RESTORE = 0x8BDCU;
enum uint GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x8BE7U;
enum uint GL_TEXTURE_PROTECTED_EXT = 0x8BFAU;
enum uint GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00U;
enum uint GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01U;
enum uint GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02U;
enum uint GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03U;
enum uint GL_MODULATE_COLOR_IMG = 0x8C04U;
enum uint GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05U;
enum uint GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06U;
enum uint GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07U;
enum uint GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08U;
enum uint GL_ADD_BLEND_IMG = 0x8C09U;
enum uint GL_SGX_BINARY_IMG = 0x8C0AU;
enum uint GL_TEXTURE_RED_TYPE = 0x8C10U;
enum uint GL_TEXTURE_RED_TYPE_ARB = 0x8C10U;
enum uint GL_TEXTURE_GREEN_TYPE = 0x8C11U;
enum uint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11U;
enum uint GL_TEXTURE_BLUE_TYPE = 0x8C12U;
enum uint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12U;
enum uint GL_TEXTURE_ALPHA_TYPE = 0x8C13U;
enum uint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13U;
enum uint GL_TEXTURE_LUMINANCE_TYPE = 0x8C14U;
enum uint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14U;
enum uint GL_TEXTURE_INTENSITY_TYPE = 0x8C15U;
enum uint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15U;
enum uint GL_TEXTURE_DEPTH_TYPE = 0x8C16U;
enum uint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16U;
enum uint GL_UNSIGNED_NORMALIZED = 0x8C17U;
enum uint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17U;
enum uint GL_UNSIGNED_NORMALIZED_EXT = 0x8C17U;
enum uint GL_TEXTURE_1D_ARRAY = 0x8C18U;
enum uint GL_TEXTURE_1D_ARRAY_EXT = 0x8C18U;
enum uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19U;
enum uint GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19U;
enum uint GL_TEXTURE_2D_ARRAY = 0x8C1AU;
enum uint GL_TEXTURE_2D_ARRAY_EXT = 0x8C1AU;
enum uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1BU;
enum uint GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1BU;
enum uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1CU;
enum uint GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1CU;
enum uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1DU;
enum uint GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1DU;
enum uint GL_GEOMETRY_PROGRAM_NV = 0x8C26U;
enum uint GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27U;
enum uint GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28U;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29U;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29U;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29U;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x8C29U;
enum uint GL_TEXTURE_BUFFER = 0x8C2AU;
enum uint GL_TEXTURE_BUFFER_ARB = 0x8C2AU;
enum uint GL_TEXTURE_BUFFER_EXT = 0x8C2AU;
enum uint GL_TEXTURE_BUFFER_OES = 0x8C2AU;
enum uint GL_TEXTURE_BUFFER_BINDING = 0x8C2AU;
enum uint GL_TEXTURE_BUFFER_BINDING_EXT = 0x8C2AU;
enum uint GL_TEXTURE_BUFFER_BINDING_OES = 0x8C2AU;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2BU;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2BU;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2BU;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_OES = 0x8C2BU;
enum uint GL_TEXTURE_BINDING_BUFFER = 0x8C2CU;
enum uint GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2CU;
enum uint GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2CU;
enum uint GL_TEXTURE_BINDING_BUFFER_OES = 0x8C2CU;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2DU;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2DU;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2DU;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x8C2DU;
enum uint GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2EU;
enum uint GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2EU;
enum uint GL_ANY_SAMPLES_PASSED = 0x8C2FU;
enum uint GL_ANY_SAMPLES_PASSED_EXT = 0x8C2FU;
enum uint GL_SAMPLE_SHADING = 0x8C36U;
enum uint GL_SAMPLE_SHADING_ARB = 0x8C36U;
enum uint GL_SAMPLE_SHADING_OES = 0x8C36U;
enum uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37U;
enum uint GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37U;
enum uint GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37U;
enum uint GL_R11F_G11F_B10F = 0x8C3AU;
enum uint GL_R11F_G11F_B10F_APPLE = 0x8C3AU;
enum uint GL_R11F_G11F_B10F_EXT = 0x8C3AU;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3BU;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3BU;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3BU;
enum uint GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3CU;
enum uint GL_RGB9_E5 = 0x8C3DU;
enum uint GL_RGB9_E5_APPLE = 0x8C3DU;
enum uint GL_RGB9_E5_EXT = 0x8C3DU;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3EU;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3EU;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3EU;
enum uint GL_TEXTURE_SHARED_SIZE = 0x8C3FU;
enum uint GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3FU;
enum uint GL_SRGB = 0x8C40U;
enum uint GL_SRGB_EXT = 0x8C40U;
enum uint GL_SRGB8 = 0x8C41U;
enum uint GL_SRGB8_EXT = 0x8C41U;
enum uint GL_SRGB8_NV = 0x8C41U;
enum uint GL_SRGB_ALPHA = 0x8C42U;
enum uint GL_SRGB_ALPHA_EXT = 0x8C42U;
enum uint GL_SRGB8_ALPHA8 = 0x8C43U;
enum uint GL_SRGB8_ALPHA8_EXT = 0x8C43U;
enum uint GL_SLUMINANCE_ALPHA = 0x8C44U;
enum uint GL_SLUMINANCE_ALPHA_EXT = 0x8C44U;
enum uint GL_SLUMINANCE_ALPHA_NV = 0x8C44U;
enum uint GL_SLUMINANCE8_ALPHA8 = 0x8C45U;
enum uint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45U;
enum uint GL_SLUMINANCE8_ALPHA8_NV = 0x8C45U;
enum uint GL_SLUMINANCE = 0x8C46U;
enum uint GL_SLUMINANCE_EXT = 0x8C46U;
enum uint GL_SLUMINANCE_NV = 0x8C46U;
enum uint GL_SLUMINANCE8 = 0x8C47U;
enum uint GL_SLUMINANCE8_EXT = 0x8C47U;
enum uint GL_SLUMINANCE8_NV = 0x8C47U;
enum uint GL_COMPRESSED_SRGB = 0x8C48U;
enum uint GL_COMPRESSED_SRGB_EXT = 0x8C48U;
enum uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49U;
enum uint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49U;
enum uint GL_COMPRESSED_SLUMINANCE = 0x8C4AU;
enum uint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4AU;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4BU;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4BU;
enum uint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4CU;
enum uint GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4CU;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4DU;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4DU;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4EU;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4EU;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4FU;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4FU;
enum uint GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70U;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71U;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72U;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73U;
enum uint GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74U;
enum uint GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75U;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76U;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76U;
enum uint GL_BACK_PRIMARY_COLOR_NV = 0x8C77U;
enum uint GL_BACK_SECONDARY_COLOR_NV = 0x8C78U;
enum uint GL_TEXTURE_COORD_NV = 0x8C79U;
enum uint GL_CLIP_DISTANCE_NV = 0x8C7AU;
enum uint GL_VERTEX_ID_NV = 0x8C7BU;
enum uint GL_PRIMITIVE_ID_NV = 0x8C7CU;
enum uint GL_GENERIC_ATTRIB_NV = 0x8C7DU;
enum uint GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7EU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7FU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7FU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7FU;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80U;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80U;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80U;
enum uint GL_ACTIVE_VARYINGS_NV = 0x8C81U;
enum uint GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82U;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83U;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83U;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85U;
enum uint GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86U;
enum uint GL_PRIMITIVES_GENERATED = 0x8C87U;
enum uint GL_PRIMITIVES_GENERATED_EXT = 0x8C87U;
enum uint GL_PRIMITIVES_GENERATED_NV = 0x8C87U;
enum uint GL_PRIMITIVES_GENERATED_OES = 0x8C87U;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88U;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88U;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88U;
enum uint GL_RASTERIZER_DISCARD = 0x8C89U;
enum uint GL_RASTERIZER_DISCARD_EXT = 0x8C89U;
enum uint GL_RASTERIZER_DISCARD_NV = 0x8C89U;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8AU;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8AU;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8AU;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8BU;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8BU;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8BU;
enum uint GL_INTERLEAVED_ATTRIBS = 0x8C8CU;
enum uint GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8CU;
enum uint GL_INTERLEAVED_ATTRIBS_NV = 0x8C8CU;
enum uint GL_SEPARATE_ATTRIBS = 0x8C8DU;
enum uint GL_SEPARATE_ATTRIBS_EXT = 0x8C8DU;
enum uint GL_SEPARATE_ATTRIBS_NV = 0x8C8DU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8EU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8EU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8EU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8FU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8FU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8FU;
enum uint GL_ATC_RGB_AMD = 0x8C92U;
enum uint GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93U;
enum uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0U;
enum uint GL_LOWER_LEFT = 0x8CA1U;
enum uint GL_UPPER_LEFT = 0x8CA2U;
enum uint GL_STENCIL_BACK_REF = 0x8CA3U;
enum uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4U;
enum uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5U;
enum uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6U;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6U;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6U;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6U;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6U;
enum uint GL_FRAMEBUFFER_BINDING = 0x8CA6U;
enum uint GL_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6U;
enum uint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6U;
enum uint GL_FRAMEBUFFER_BINDING_OES = 0x8CA6U;
enum uint GL_RENDERBUFFER_BINDING = 0x8CA7U;
enum uint GL_RENDERBUFFER_BINDING_ANGLE = 0x8CA7U;
enum uint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7U;
enum uint GL_RENDERBUFFER_BINDING_OES = 0x8CA7U;
enum uint GL_READ_FRAMEBUFFER = 0x8CA8U;
enum uint GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8U;
enum uint GL_READ_FRAMEBUFFER_APPLE = 0x8CA8U;
enum uint GL_READ_FRAMEBUFFER_EXT = 0x8CA8U;
enum uint GL_READ_FRAMEBUFFER_NV = 0x8CA8U;
enum uint GL_DRAW_FRAMEBUFFER = 0x8CA9U;
enum uint GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9U;
enum uint GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9U;
enum uint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9U;
enum uint GL_DRAW_FRAMEBUFFER_NV = 0x8CA9U;
enum uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAAU;
enum uint GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAAU;
enum uint GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAAU;
enum uint GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAAU;
enum uint GL_READ_FRAMEBUFFER_BINDING_NV = 0x8CAAU;
enum uint GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CABU;
enum uint GL_RENDERBUFFER_SAMPLES = 0x8CABU;
enum uint GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CABU;
enum uint GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CABU;
enum uint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CABU;
enum uint GL_RENDERBUFFER_SAMPLES_NV = 0x8CABU;
enum uint GL_DEPTH_COMPONENT32F = 0x8CACU;
enum uint GL_DEPTH32F_STENCIL8 = 0x8CADU;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4U;
enum uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5U;
enum uint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5U;
enum uint GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDAU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDAU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDBU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDBU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 0x8CDBU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDCU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDCU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 0x8CDCU;
enum uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDDU;
enum uint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDDU;
enum uint GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDDU;
enum uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDFU;
enum uint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDFU;
enum uint GL_MAX_COLOR_ATTACHMENTS_NV = 0x8CDFU;
enum uint GL_COLOR_ATTACHMENT0 = 0x8CE0U;
enum uint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0U;
enum uint GL_COLOR_ATTACHMENT0_NV = 0x8CE0U;
enum uint GL_COLOR_ATTACHMENT0_OES = 0x8CE0U;
enum uint GL_COLOR_ATTACHMENT1 = 0x8CE1U;
enum uint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1U;
enum uint GL_COLOR_ATTACHMENT1_NV = 0x8CE1U;
enum uint GL_COLOR_ATTACHMENT2 = 0x8CE2U;
enum uint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2U;
enum uint GL_COLOR_ATTACHMENT2_NV = 0x8CE2U;
enum uint GL_COLOR_ATTACHMENT3 = 0x8CE3U;
enum uint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3U;
enum uint GL_COLOR_ATTACHMENT3_NV = 0x8CE3U;
enum uint GL_COLOR_ATTACHMENT4 = 0x8CE4U;
enum uint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4U;
enum uint GL_COLOR_ATTACHMENT4_NV = 0x8CE4U;
enum uint GL_COLOR_ATTACHMENT5 = 0x8CE5U;
enum uint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5U;
enum uint GL_COLOR_ATTACHMENT5_NV = 0x8CE5U;
enum uint GL_COLOR_ATTACHMENT6 = 0x8CE6U;
enum uint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6U;
enum uint GL_COLOR_ATTACHMENT6_NV = 0x8CE6U;
enum uint GL_COLOR_ATTACHMENT7 = 0x8CE7U;
enum uint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7U;
enum uint GL_COLOR_ATTACHMENT7_NV = 0x8CE7U;
enum uint GL_COLOR_ATTACHMENT8 = 0x8CE8U;
enum uint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8U;
enum uint GL_COLOR_ATTACHMENT8_NV = 0x8CE8U;
enum uint GL_COLOR_ATTACHMENT9 = 0x8CE9U;
enum uint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9U;
enum uint GL_COLOR_ATTACHMENT9_NV = 0x8CE9U;
enum uint GL_COLOR_ATTACHMENT10 = 0x8CEAU;
enum uint GL_COLOR_ATTACHMENT10_EXT = 0x8CEAU;
enum uint GL_COLOR_ATTACHMENT10_NV = 0x8CEAU;
enum uint GL_COLOR_ATTACHMENT11 = 0x8CEBU;
enum uint GL_COLOR_ATTACHMENT11_EXT = 0x8CEBU;
enum uint GL_COLOR_ATTACHMENT11_NV = 0x8CEBU;
enum uint GL_COLOR_ATTACHMENT12 = 0x8CECU;
enum uint GL_COLOR_ATTACHMENT12_EXT = 0x8CECU;
enum uint GL_COLOR_ATTACHMENT12_NV = 0x8CECU;
enum uint GL_COLOR_ATTACHMENT13 = 0x8CEDU;
enum uint GL_COLOR_ATTACHMENT13_EXT = 0x8CEDU;
enum uint GL_COLOR_ATTACHMENT13_NV = 0x8CEDU;
enum uint GL_COLOR_ATTACHMENT14 = 0x8CEEU;
enum uint GL_COLOR_ATTACHMENT14_EXT = 0x8CEEU;
enum uint GL_COLOR_ATTACHMENT14_NV = 0x8CEEU;
enum uint GL_COLOR_ATTACHMENT15 = 0x8CEFU;
enum uint GL_COLOR_ATTACHMENT15_EXT = 0x8CEFU;
enum uint GL_COLOR_ATTACHMENT15_NV = 0x8CEFU;
enum uint GL_COLOR_ATTACHMENT16 = 0x8CF0U;
enum uint GL_COLOR_ATTACHMENT17 = 0x8CF1U;
enum uint GL_COLOR_ATTACHMENT18 = 0x8CF2U;
enum uint GL_COLOR_ATTACHMENT19 = 0x8CF3U;
enum uint GL_COLOR_ATTACHMENT20 = 0x8CF4U;
enum uint GL_COLOR_ATTACHMENT21 = 0x8CF5U;
enum uint GL_COLOR_ATTACHMENT22 = 0x8CF6U;
enum uint GL_COLOR_ATTACHMENT23 = 0x8CF7U;
enum uint GL_COLOR_ATTACHMENT24 = 0x8CF8U;
enum uint GL_COLOR_ATTACHMENT25 = 0x8CF9U;
enum uint GL_COLOR_ATTACHMENT26 = 0x8CFAU;
enum uint GL_COLOR_ATTACHMENT27 = 0x8CFBU;
enum uint GL_COLOR_ATTACHMENT28 = 0x8CFCU;
enum uint GL_COLOR_ATTACHMENT29 = 0x8CFDU;
enum uint GL_COLOR_ATTACHMENT30 = 0x8CFEU;
enum uint GL_COLOR_ATTACHMENT31 = 0x8CFFU;
enum uint GL_DEPTH_ATTACHMENT = 0x8D00U;
enum uint GL_DEPTH_ATTACHMENT_EXT = 0x8D00U;
enum uint GL_DEPTH_ATTACHMENT_OES = 0x8D00U;
enum uint GL_STENCIL_ATTACHMENT = 0x8D20U;
enum uint GL_STENCIL_ATTACHMENT_EXT = 0x8D20U;
enum uint GL_STENCIL_ATTACHMENT_OES = 0x8D20U;
enum uint GL_FRAMEBUFFER = 0x8D40U;
enum uint GL_FRAMEBUFFER_EXT = 0x8D40U;
enum uint GL_FRAMEBUFFER_OES = 0x8D40U;
enum uint GL_RENDERBUFFER = 0x8D41U;
enum uint GL_RENDERBUFFER_EXT = 0x8D41U;
enum uint GL_RENDERBUFFER_OES = 0x8D41U;
enum uint GL_RENDERBUFFER_WIDTH = 0x8D42U;
enum uint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42U;
enum uint GL_RENDERBUFFER_WIDTH_OES = 0x8D42U;
enum uint GL_RENDERBUFFER_HEIGHT = 0x8D43U;
enum uint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43U;
enum uint GL_RENDERBUFFER_HEIGHT_OES = 0x8D43U;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44U;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44U;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44U;
enum uint GL_STENCIL_INDEX1 = 0x8D46U;
enum uint GL_STENCIL_INDEX1_EXT = 0x8D46U;
enum uint GL_STENCIL_INDEX1_OES = 0x8D46U;
enum uint GL_STENCIL_INDEX4 = 0x8D47U;
enum uint GL_STENCIL_INDEX4_EXT = 0x8D47U;
enum uint GL_STENCIL_INDEX4_OES = 0x8D47U;
enum uint GL_STENCIL_INDEX8 = 0x8D48U;
enum uint GL_STENCIL_INDEX8_EXT = 0x8D48U;
enum uint GL_STENCIL_INDEX8_OES = 0x8D48U;
enum uint GL_STENCIL_INDEX16 = 0x8D49U;
enum uint GL_STENCIL_INDEX16_EXT = 0x8D49U;
enum uint GL_RENDERBUFFER_RED_SIZE = 0x8D50U;
enum uint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50U;
enum uint GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50U;
enum uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51U;
enum uint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51U;
enum uint GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51U;
enum uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52U;
enum uint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52U;
enum uint GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52U;
enum uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53U;
enum uint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53U;
enum uint GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53U;
enum uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54U;
enum uint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54U;
enum uint GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54U;
enum uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55U;
enum uint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55U;
enum uint GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56U;
enum uint GL_MAX_SAMPLES = 0x8D57U;
enum uint GL_MAX_SAMPLES_ANGLE = 0x8D57U;
enum uint GL_MAX_SAMPLES_APPLE = 0x8D57U;
enum uint GL_MAX_SAMPLES_EXT = 0x8D57U;
enum uint GL_MAX_SAMPLES_NV = 0x8D57U;
enum uint GL_TEXTURE_GEN_STR_OES = 0x8D60U;
enum uint GL_HALF_FLOAT_OES = 0x8D61U;
enum uint GL_RGB565_OES = 0x8D62U;
enum uint GL_RGB565 = 0x8D62U;
enum uint GL_ETC1_RGB8_OES = 0x8D64U;
enum uint GL_TEXTURE_EXTERNAL_OES = 0x8D65U;
enum uint GL_SAMPLER_EXTERNAL_OES = 0x8D66U;
enum uint GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67U;
enum uint GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68U;
enum uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69U;
enum uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6AU;
enum uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6AU;
enum uint GL_MAX_ELEMENT_INDEX = 0x8D6BU;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6CU;
enum uint GL_RGBA32UI = 0x8D70U;
enum uint GL_RGBA32UI_EXT = 0x8D70U;
enum uint GL_RGB32UI = 0x8D71U;
enum uint GL_RGB32UI_EXT = 0x8D71U;
enum uint GL_ALPHA32UI_EXT = 0x8D72U;
enum uint GL_INTENSITY32UI_EXT = 0x8D73U;
enum uint GL_LUMINANCE32UI_EXT = 0x8D74U;
enum uint GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75U;
enum uint GL_RGBA16UI = 0x8D76U;
enum uint GL_RGBA16UI_EXT = 0x8D76U;
enum uint GL_RGB16UI = 0x8D77U;
enum uint GL_RGB16UI_EXT = 0x8D77U;
enum uint GL_ALPHA16UI_EXT = 0x8D78U;
enum uint GL_INTENSITY16UI_EXT = 0x8D79U;
enum uint GL_LUMINANCE16UI_EXT = 0x8D7AU;
enum uint GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7BU;
enum uint GL_RGBA8UI = 0x8D7CU;
enum uint GL_RGBA8UI_EXT = 0x8D7CU;
enum uint GL_RGB8UI = 0x8D7DU;
enum uint GL_RGB8UI_EXT = 0x8D7DU;
enum uint GL_ALPHA8UI_EXT = 0x8D7EU;
enum uint GL_INTENSITY8UI_EXT = 0x8D7FU;
enum uint GL_LUMINANCE8UI_EXT = 0x8D80U;
enum uint GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81U;
enum uint GL_RGBA32I = 0x8D82U;
enum uint GL_RGBA32I_EXT = 0x8D82U;
enum uint GL_RGB32I = 0x8D83U;
enum uint GL_RGB32I_EXT = 0x8D83U;
enum uint GL_ALPHA32I_EXT = 0x8D84U;
enum uint GL_INTENSITY32I_EXT = 0x8D85U;
enum uint GL_LUMINANCE32I_EXT = 0x8D86U;
enum uint GL_LUMINANCE_ALPHA32I_EXT = 0x8D87U;
enum uint GL_RGBA16I = 0x8D88U;
enum uint GL_RGBA16I_EXT = 0x8D88U;
enum uint GL_RGB16I = 0x8D89U;
enum uint GL_RGB16I_EXT = 0x8D89U;
enum uint GL_ALPHA16I_EXT = 0x8D8AU;
enum uint GL_INTENSITY16I_EXT = 0x8D8BU;
enum uint GL_LUMINANCE16I_EXT = 0x8D8CU;
enum uint GL_LUMINANCE_ALPHA16I_EXT = 0x8D8DU;
enum uint GL_RGBA8I = 0x8D8EU;
enum uint GL_RGBA8I_EXT = 0x8D8EU;
enum uint GL_RGB8I = 0x8D8FU;
enum uint GL_RGB8I_EXT = 0x8D8FU;
enum uint GL_ALPHA8I_EXT = 0x8D90U;
enum uint GL_INTENSITY8I_EXT = 0x8D91U;
enum uint GL_LUMINANCE8I_EXT = 0x8D92U;
enum uint GL_LUMINANCE_ALPHA8I_EXT = 0x8D93U;
enum uint GL_RED_INTEGER = 0x8D94U;
enum uint GL_RED_INTEGER_EXT = 0x8D94U;
enum uint GL_GREEN_INTEGER = 0x8D95U;
enum uint GL_GREEN_INTEGER_EXT = 0x8D95U;
enum uint GL_BLUE_INTEGER = 0x8D96U;
enum uint GL_BLUE_INTEGER_EXT = 0x8D96U;
enum uint GL_ALPHA_INTEGER = 0x8D97U;
enum uint GL_ALPHA_INTEGER_EXT = 0x8D97U;
enum uint GL_RGB_INTEGER = 0x8D98U;
enum uint GL_RGB_INTEGER_EXT = 0x8D98U;
enum uint GL_RGBA_INTEGER = 0x8D99U;
enum uint GL_RGBA_INTEGER_EXT = 0x8D99U;
enum uint GL_BGR_INTEGER = 0x8D9AU;
enum uint GL_BGR_INTEGER_EXT = 0x8D9AU;
enum uint GL_BGRA_INTEGER = 0x8D9BU;
enum uint GL_BGRA_INTEGER_EXT = 0x8D9BU;
enum uint GL_LUMINANCE_INTEGER_EXT = 0x8D9CU;
enum uint GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9DU;
enum uint GL_RGBA_INTEGER_MODE_EXT = 0x8D9EU;
enum uint GL_INT_2_10_10_10_REV = 0x8D9FU;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0U;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1U;
enum uint GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2U;
enum uint GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3U;
enum uint GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4U;
enum uint GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5U;
enum uint GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8DA7U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x8DA8U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9U;
enum uint GL_LAYER_NV = 0x8DAAU;
enum uint GL_DEPTH_COMPONENT32F_NV = 0x8DABU;
enum uint GL_DEPTH32F_STENCIL8_NV = 0x8DACU;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DADU;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DADU;
enum uint GL_SHADER_INCLUDE_ARB = 0x8DAEU;
enum uint GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAFU;
enum uint GL_FRAMEBUFFER_SRGB = 0x8DB9U;
enum uint GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9U;
enum uint GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBAU;
enum uint GL_COMPRESSED_RED_RGTC1 = 0x8DBBU;
enum uint GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBBU;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBCU;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBCU;
enum uint GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBDU;
enum uint GL_COMPRESSED_RG_RGTC2 = 0x8DBDU;
enum uint GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBEU;
enum uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBEU;
enum uint GL_SAMPLER_1D_ARRAY = 0x8DC0U;
enum uint GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0U;
enum uint GL_SAMPLER_2D_ARRAY = 0x8DC1U;
enum uint GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1U;
enum uint GL_SAMPLER_BUFFER = 0x8DC2U;
enum uint GL_SAMPLER_BUFFER_EXT = 0x8DC2U;
enum uint GL_SAMPLER_BUFFER_OES = 0x8DC2U;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3U;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3U;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4U;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4U;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW_NV = 0x8DC4U;
enum uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5U;
enum uint GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5U;
enum uint GL_SAMPLER_CUBE_SHADOW_NV = 0x8DC5U;
enum uint GL_UNSIGNED_INT_VEC2 = 0x8DC6U;
enum uint GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6U;
enum uint GL_UNSIGNED_INT_VEC3 = 0x8DC7U;
enum uint GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7U;
enum uint GL_UNSIGNED_INT_VEC4 = 0x8DC8U;
enum uint GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8U;
enum uint GL_INT_SAMPLER_1D = 0x8DC9U;
enum uint GL_INT_SAMPLER_1D_EXT = 0x8DC9U;
enum uint GL_INT_SAMPLER_2D = 0x8DCAU;
enum uint GL_INT_SAMPLER_2D_EXT = 0x8DCAU;
enum uint GL_INT_SAMPLER_3D = 0x8DCBU;
enum uint GL_INT_SAMPLER_3D_EXT = 0x8DCBU;
enum uint GL_INT_SAMPLER_CUBE = 0x8DCCU;
enum uint GL_INT_SAMPLER_CUBE_EXT = 0x8DCCU;
enum uint GL_INT_SAMPLER_2D_RECT = 0x8DCDU;
enum uint GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCDU;
enum uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCEU;
enum uint GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCEU;
enum uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCFU;
enum uint GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCFU;
enum uint GL_INT_SAMPLER_BUFFER = 0x8DD0U;
enum uint GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0U;
enum uint GL_INT_SAMPLER_BUFFER_OES = 0x8DD0U;
enum uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1U;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1U;
enum uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2U;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2U;
enum uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3U;
enum uint GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3U;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4U;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4U;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5U;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5U;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6U;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6U;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7U;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7U;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8U;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8U;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x8DD8U;
enum uint GL_GEOMETRY_SHADER = 0x8DD9U;
enum uint GL_GEOMETRY_SHADER_ARB = 0x8DD9U;
enum uint GL_GEOMETRY_SHADER_EXT = 0x8DD9U;
enum uint GL_GEOMETRY_SHADER_OES = 0x8DD9U;
enum uint GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDAU;
enum uint GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDAU;
enum uint GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDBU;
enum uint GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDBU;
enum uint GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDCU;
enum uint GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDCU;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDDU;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDDU;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDEU;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDEU;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDFU;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDFU;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDFU;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8DDFU;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0U;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0U;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0U;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x8DE0U;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1U;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1U;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1U;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x8DE1U;
enum uint GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2U;
enum uint GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3U;
enum uint GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4U;
enum uint GL_ACTIVE_SUBROUTINES = 0x8DE5U;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6U;
enum uint GL_MAX_SUBROUTINES = 0x8DE7U;
enum uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8U;
enum uint GL_NAMED_STRING_LENGTH_ARB = 0x8DE9U;
enum uint GL_NAMED_STRING_TYPE_ARB = 0x8DEAU;
enum uint GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DEDU;
enum uint GL_UNIFORM_BUFFER_EXT = 0x8DEEU;
enum uint GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEFU;
enum uint GL_LOW_FLOAT = 0x8DF0U;
enum uint GL_MEDIUM_FLOAT = 0x8DF1U;
enum uint GL_HIGH_FLOAT = 0x8DF2U;
enum uint GL_LOW_INT = 0x8DF3U;
enum uint GL_MEDIUM_INT = 0x8DF4U;
enum uint GL_HIGH_INT = 0x8DF5U;
enum uint GL_UNSIGNED_INT_10_10_10_2_OES = 0x8DF6U;
enum uint GL_INT_10_10_10_2_OES = 0x8DF7U;
enum uint GL_SHADER_BINARY_FORMATS = 0x8DF8U;
enum uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9U;
enum uint GL_SHADER_COMPILER = 0x8DFAU;
enum uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFBU;
enum uint GL_MAX_VARYING_VECTORS = 0x8DFCU;
enum uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFDU;
enum uint GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10U;
enum uint GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11U;
enum uint GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12U;
enum uint GL_QUERY_WAIT = 0x8E13U;
enum uint GL_QUERY_WAIT_NV = 0x8E13U;
enum uint GL_QUERY_NO_WAIT = 0x8E14U;
enum uint GL_QUERY_NO_WAIT_NV = 0x8E14U;
enum uint GL_QUERY_BY_REGION_WAIT = 0x8E15U;
enum uint GL_QUERY_BY_REGION_WAIT_NV = 0x8E15U;
enum uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16U;
enum uint GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16U;
enum uint GL_QUERY_WAIT_INVERTED = 0x8E17U;
enum uint GL_QUERY_NO_WAIT_INVERTED = 0x8E18U;
enum uint GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19U;
enum uint GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1AU;
enum uint GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1BU;
enum uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1EU;
enum uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1EU;
enum uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E1EU;
enum uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1FU;
enum uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1FU;
enum uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E1FU;
enum uint GL_COLOR_SAMPLES_NV = 0x8E20U;
enum uint GL_TRANSFORM_FEEDBACK = 0x8E22U;
enum uint GL_TRANSFORM_FEEDBACK_NV = 0x8E22U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23U;
enum uint GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24U;
enum uint GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24U;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24U;
enum uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25U;
enum uint GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25U;
enum uint GL_FRAME_NV = 0x8E26U;
enum uint GL_FIELDS_NV = 0x8E27U;
enum uint GL_CURRENT_TIME_NV = 0x8E28U;
enum uint GL_TIMESTAMP = 0x8E28U;
enum uint GL_TIMESTAMP_EXT = 0x8E28U;
enum uint GL_NUM_FILL_STREAMS_NV = 0x8E29U;
enum uint GL_PRESENT_TIME_NV = 0x8E2AU;
enum uint GL_PRESENT_DURATION_NV = 0x8E2BU;
enum uint GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2CU;
enum uint GL_PROGRAM_MATRIX_EXT = 0x8E2DU;
enum uint GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2EU;
enum uint GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2FU;
enum uint GL_TEXTURE_SWIZZLE_R = 0x8E42U;
enum uint GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42U;
enum uint GL_TEXTURE_SWIZZLE_G = 0x8E43U;
enum uint GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43U;
enum uint GL_TEXTURE_SWIZZLE_B = 0x8E44U;
enum uint GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44U;
enum uint GL_TEXTURE_SWIZZLE_A = 0x8E45U;
enum uint GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45U;
enum uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46U;
enum uint GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46U;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47U;
enum uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48U;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49U;
enum uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4AU;
enum uint GL_COMPATIBLE_SUBROUTINES = 0x8E4BU;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4CU;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4CU;
enum uint GL_FIRST_VERTEX_CONVENTION = 0x8E4DU;
enum uint GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4DU;
enum uint GL_FIRST_VERTEX_CONVENTION_OES = 0x8E4DU;
enum uint GL_LAST_VERTEX_CONVENTION = 0x8E4EU;
enum uint GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4EU;
enum uint GL_LAST_VERTEX_CONVENTION_OES = 0x8E4EU;
enum uint GL_PROVOKING_VERTEX = 0x8E4FU;
enum uint GL_PROVOKING_VERTEX_EXT = 0x8E4FU;
enum uint GL_SAMPLE_POSITION = 0x8E50U;
enum uint GL_SAMPLE_POSITION_NV = 0x8E50U;
enum uint GL_SAMPLE_LOCATION_ARB = 0x8E50U;
enum uint GL_SAMPLE_LOCATION_NV = 0x8E50U;
enum uint GL_SAMPLE_MASK = 0x8E51U;
enum uint GL_SAMPLE_MASK_NV = 0x8E51U;
enum uint GL_SAMPLE_MASK_VALUE = 0x8E52U;
enum uint GL_SAMPLE_MASK_VALUE_NV = 0x8E52U;
enum uint GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53U;
enum uint GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54U;
enum uint GL_TEXTURE_RENDERBUFFER_NV = 0x8E55U;
enum uint GL_SAMPLER_RENDERBUFFER_NV = 0x8E56U;
enum uint GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57U;
enum uint GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58U;
enum uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59U;
enum uint GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59U;
enum uint GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5AU;
enum uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5AU;
enum uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5AU;
enum uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x8E5AU;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5BU;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5BU;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5BU;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5CU;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5CU;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5CU;
enum uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5DU;
enum uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5DU;
enum uint GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5DU;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5EU;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5EU;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5EU;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5FU;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5FU;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5FU;
enum uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70U;
enum uint GL_MAX_VERTEX_STREAMS = 0x8E71U;
enum uint GL_PATCH_VERTICES = 0x8E72U;
enum uint GL_PATCH_VERTICES_EXT = 0x8E72U;
enum uint GL_PATCH_VERTICES_OES = 0x8E72U;
enum uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73U;
enum uint GL_PATCH_DEFAULT_INNER_LEVEL_EXT = 0x8E73U;
enum uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74U;
enum uint GL_PATCH_DEFAULT_OUTER_LEVEL_EXT = 0x8E74U;
enum uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75U;
enum uint GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75U;
enum uint GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 0x8E75U;
enum uint GL_TESS_GEN_MODE = 0x8E76U;
enum uint GL_TESS_GEN_MODE_EXT = 0x8E76U;
enum uint GL_TESS_GEN_MODE_OES = 0x8E76U;
enum uint GL_TESS_GEN_SPACING = 0x8E77U;
enum uint GL_TESS_GEN_SPACING_EXT = 0x8E77U;
enum uint GL_TESS_GEN_SPACING_OES = 0x8E77U;
enum uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78U;
enum uint GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8E78U;
enum uint GL_TESS_GEN_VERTEX_ORDER_OES = 0x8E78U;
enum uint GL_TESS_GEN_POINT_MODE = 0x8E79U;
enum uint GL_TESS_GEN_POINT_MODE_EXT = 0x8E79U;
enum uint GL_TESS_GEN_POINT_MODE_OES = 0x8E79U;
enum uint GL_ISOLINES = 0x8E7AU;
enum uint GL_ISOLINES_EXT = 0x8E7AU;
enum uint GL_ISOLINES_OES = 0x8E7AU;
enum uint GL_FRACTIONAL_ODD = 0x8E7BU;
enum uint GL_FRACTIONAL_ODD_EXT = 0x8E7BU;
enum uint GL_FRACTIONAL_ODD_OES = 0x8E7BU;
enum uint GL_FRACTIONAL_EVEN = 0x8E7CU;
enum uint GL_FRACTIONAL_EVEN_EXT = 0x8E7CU;
enum uint GL_FRACTIONAL_EVEN_OES = 0x8E7CU;
enum uint GL_MAX_PATCH_VERTICES = 0x8E7DU;
enum uint GL_MAX_PATCH_VERTICES_EXT = 0x8E7DU;
enum uint GL_MAX_PATCH_VERTICES_OES = 0x8E7DU;
enum uint GL_MAX_TESS_GEN_LEVEL = 0x8E7EU;
enum uint GL_MAX_TESS_GEN_LEVEL_EXT = 0x8E7EU;
enum uint GL_MAX_TESS_GEN_LEVEL_OES = 0x8E7EU;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7FU;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7FU;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E7FU;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80U;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80U;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E80U;
enum uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81U;
enum uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81U;
enum uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x8E81U;
enum uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82U;
enum uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82U;
enum uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x8E82U;
enum uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83U;
enum uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83U;
enum uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x8E83U;
enum uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84U;
enum uint GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84U;
enum uint GL_MAX_TESS_PATCH_COMPONENTS_OES = 0x8E84U;
enum uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85U;
enum uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85U;
enum uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x8E85U;
enum uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86U;
enum uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86U;
enum uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x8E86U;
enum uint GL_TESS_EVALUATION_SHADER = 0x8E87U;
enum uint GL_TESS_EVALUATION_SHADER_EXT = 0x8E87U;
enum uint GL_TESS_EVALUATION_SHADER_OES = 0x8E87U;
enum uint GL_TESS_CONTROL_SHADER = 0x8E88U;
enum uint GL_TESS_CONTROL_SHADER_EXT = 0x8E88U;
enum uint GL_TESS_CONTROL_SHADER_OES = 0x8E88U;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89U;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89U;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x8E89U;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8AU;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8AU;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x8E8AU;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8CU;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8CU;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8DU;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8DU;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8EU;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8EU;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8FU;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8FU;
enum uint GL_COVERAGE_COMPONENT_NV = 0x8ED0U;
enum uint GL_COVERAGE_COMPONENT4_NV = 0x8ED1U;
enum uint GL_COVERAGE_ATTACHMENT_NV = 0x8ED2U;
enum uint GL_COVERAGE_BUFFERS_NV = 0x8ED3U;
enum uint GL_COVERAGE_SAMPLES_NV = 0x8ED4U;
enum uint GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5U;
enum uint GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6U;
enum uint GL_COVERAGE_AUTOMATIC_NV = 0x8ED7U;
enum uint GL_INCLUSIVE_EXT = 0x8F10U;
enum uint GL_EXCLUSIVE_EXT = 0x8F11U;
enum uint GL_WINDOW_RECTANGLE_EXT = 0x8F12U;
enum uint GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13U;
enum uint GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14U;
enum uint GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15U;
enum uint GL_BUFFER_GPU_ADDRESS_NV = 0x8F1DU;
enum uint GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1EU;
enum uint GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1FU;
enum uint GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20U;
enum uint GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21U;
enum uint GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22U;
enum uint GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23U;
enum uint GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24U;
enum uint GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25U;
enum uint GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26U;
enum uint GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27U;
enum uint GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28U;
enum uint GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29U;
enum uint GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2AU;
enum uint GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2BU;
enum uint GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2CU;
enum uint GL_COLOR_ARRAY_LENGTH_NV = 0x8F2DU;
enum uint GL_INDEX_ARRAY_LENGTH_NV = 0x8F2EU;
enum uint GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2FU;
enum uint GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30U;
enum uint GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31U;
enum uint GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32U;
enum uint GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33U;
enum uint GL_GPU_ADDRESS_NV = 0x8F34U;
enum uint GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35U;
enum uint GL_COPY_READ_BUFFER = 0x8F36U;
enum uint GL_COPY_READ_BUFFER_NV = 0x8F36U;
enum uint GL_COPY_READ_BUFFER_BINDING = 0x8F36U;
enum uint GL_COPY_WRITE_BUFFER = 0x8F37U;
enum uint GL_COPY_WRITE_BUFFER_NV = 0x8F37U;
enum uint GL_COPY_WRITE_BUFFER_BINDING = 0x8F37U;
enum uint GL_MAX_IMAGE_UNITS = 0x8F38U;
enum uint GL_MAX_IMAGE_UNITS_EXT = 0x8F38U;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39U;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39U;
enum uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39U;
enum uint GL_IMAGE_BINDING_NAME = 0x8F3AU;
enum uint GL_IMAGE_BINDING_NAME_EXT = 0x8F3AU;
enum uint GL_IMAGE_BINDING_LEVEL = 0x8F3BU;
enum uint GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3BU;
enum uint GL_IMAGE_BINDING_LAYERED = 0x8F3CU;
enum uint GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3CU;
enum uint GL_IMAGE_BINDING_LAYER = 0x8F3DU;
enum uint GL_IMAGE_BINDING_LAYER_EXT = 0x8F3DU;
enum uint GL_IMAGE_BINDING_ACCESS = 0x8F3EU;
enum uint GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3EU;
enum uint GL_DRAW_INDIRECT_BUFFER = 0x8F3FU;
enum uint GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40U;
enum uint GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41U;
enum uint GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42U;
enum uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43U;
enum uint GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44U;
enum uint GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45U;
enum uint GL_DOUBLE_MAT2 = 0x8F46U;
enum uint GL_DOUBLE_MAT2_EXT = 0x8F46U;
enum uint GL_DOUBLE_MAT3 = 0x8F47U;
enum uint GL_DOUBLE_MAT3_EXT = 0x8F47U;
enum uint GL_DOUBLE_MAT4 = 0x8F48U;
enum uint GL_DOUBLE_MAT4_EXT = 0x8F48U;
enum uint GL_DOUBLE_MAT2x3 = 0x8F49U;
enum uint GL_DOUBLE_MAT2x3_EXT = 0x8F49U;
enum uint GL_DOUBLE_MAT2x4 = 0x8F4AU;
enum uint GL_DOUBLE_MAT2x4_EXT = 0x8F4AU;
enum uint GL_DOUBLE_MAT3x2 = 0x8F4BU;
enum uint GL_DOUBLE_MAT3x2_EXT = 0x8F4BU;
enum uint GL_DOUBLE_MAT3x4 = 0x8F4CU;
enum uint GL_DOUBLE_MAT3x4_EXT = 0x8F4CU;
enum uint GL_DOUBLE_MAT4x2 = 0x8F4DU;
enum uint GL_DOUBLE_MAT4x2_EXT = 0x8F4DU;
enum uint GL_DOUBLE_MAT4x3 = 0x8F4EU;
enum uint GL_DOUBLE_MAT4x3_EXT = 0x8F4EU;
enum uint GL_VERTEX_BINDING_BUFFER = 0x8F4FU;
enum uint GL_MALI_SHADER_BINARY_ARM = 0x8F60U;
enum uint GL_MALI_PROGRAM_BINARY_ARM = 0x8F61U;
enum uint GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63U;
enum uint GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x8F64U;
enum uint GL_FETCH_PER_SAMPLE_ARM = 0x8F65U;
enum uint GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66U;
enum uint GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67U;
enum uint GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 0x8F69U;
enum uint GL_RED_SNORM = 0x8F90U;
enum uint GL_RG_SNORM = 0x8F91U;
enum uint GL_RGB_SNORM = 0x8F92U;
enum uint GL_RGBA_SNORM = 0x8F93U;
enum uint GL_R8_SNORM = 0x8F94U;
enum uint GL_RG8_SNORM = 0x8F95U;
enum uint GL_RGB8_SNORM = 0x8F96U;
enum uint GL_RGBA8_SNORM = 0x8F97U;
enum uint GL_R16_SNORM = 0x8F98U;
enum uint GL_R16_SNORM_EXT = 0x8F98U;
enum uint GL_RG16_SNORM = 0x8F99U;
enum uint GL_RG16_SNORM_EXT = 0x8F99U;
enum uint GL_RGB16_SNORM = 0x8F9AU;
enum uint GL_RGB16_SNORM_EXT = 0x8F9AU;
enum uint GL_RGBA16_SNORM = 0x8F9BU;
enum uint GL_RGBA16_SNORM_EXT = 0x8F9BU;
enum uint GL_SIGNED_NORMALIZED = 0x8F9CU;
enum uint GL_PRIMITIVE_RESTART = 0x8F9DU;
enum uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9EU;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9FU;
enum uint GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0U;
enum uint GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0U;
enum uint GL_CPU_OPTIMIZED_QCOM = 0x8FB1U;
enum uint GL_GPU_OPTIMIZED_QCOM = 0x8FB2U;
enum uint GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3U;
enum uint GL_GPU_DISJOINT_EXT = 0x8FBBU;
enum uint GL_SR8_EXT = 0x8FBDU;
enum uint GL_SRG8_EXT = 0x8FBEU;
enum uint GL_SHADER_BINARY_VIV = 0x8FC4U;
enum uint GL_INT8_NV = 0x8FE0U;
enum uint GL_INT8_VEC2_NV = 0x8FE1U;
enum uint GL_INT8_VEC3_NV = 0x8FE2U;
enum uint GL_INT8_VEC4_NV = 0x8FE3U;
enum uint GL_INT16_NV = 0x8FE4U;
enum uint GL_INT16_VEC2_NV = 0x8FE5U;
enum uint GL_INT16_VEC3_NV = 0x8FE6U;
enum uint GL_INT16_VEC4_NV = 0x8FE7U;
enum uint GL_INT64_VEC2_ARB = 0x8FE9U;
enum uint GL_INT64_VEC2_NV = 0x8FE9U;
enum uint GL_INT64_VEC3_ARB = 0x8FEAU;
enum uint GL_INT64_VEC3_NV = 0x8FEAU;
enum uint GL_INT64_VEC4_ARB = 0x8FEBU;
enum uint GL_INT64_VEC4_NV = 0x8FEBU;
enum uint GL_UNSIGNED_INT8_NV = 0x8FECU;
enum uint GL_UNSIGNED_INT8_VEC2_NV = 0x8FEDU;
enum uint GL_UNSIGNED_INT8_VEC3_NV = 0x8FEEU;
enum uint GL_UNSIGNED_INT8_VEC4_NV = 0x8FEFU;
enum uint GL_UNSIGNED_INT16_NV = 0x8FF0U;
enum uint GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1U;
enum uint GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2U;
enum uint GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3U;
enum uint GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5U;
enum uint GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5U;
enum uint GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6U;
enum uint GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6U;
enum uint GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7U;
enum uint GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7U;
enum uint GL_FLOAT16_NV = 0x8FF8U;
enum uint GL_FLOAT16_VEC2_NV = 0x8FF9U;
enum uint GL_FLOAT16_VEC3_NV = 0x8FFAU;
enum uint GL_FLOAT16_VEC4_NV = 0x8FFBU;
enum uint GL_DOUBLE_VEC2 = 0x8FFCU;
enum uint GL_DOUBLE_VEC2_EXT = 0x8FFCU;
enum uint GL_DOUBLE_VEC3 = 0x8FFDU;
enum uint GL_DOUBLE_VEC3_EXT = 0x8FFDU;
enum uint GL_DOUBLE_VEC4 = 0x8FFEU;
enum uint GL_DOUBLE_VEC4_EXT = 0x8FFEU;
enum uint GL_SAMPLER_BUFFER_AMD = 0x9001U;
enum uint GL_INT_SAMPLER_BUFFER_AMD = 0x9002U;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003U;
enum uint GL_TESSELLATION_MODE_AMD = 0x9004U;
enum uint GL_TESSELLATION_FACTOR_AMD = 0x9005U;
enum uint GL_DISCRETE_AMD = 0x9006U;
enum uint GL_CONTINUOUS_AMD = 0x9007U;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009U;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009U;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009U;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY_OES = 0x9009U;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900AU;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900AU;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900AU;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x900AU;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900BU;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900BU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900CU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900CU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900CU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900CU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900DU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900DU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900DU;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x900DU;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900EU;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900EU;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900EU;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900EU;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900FU;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900FU;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900FU;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900FU;
enum uint GL_ALPHA_SNORM = 0x9010U;
enum uint GL_LUMINANCE_SNORM = 0x9011U;
enum uint GL_LUMINANCE_ALPHA_SNORM = 0x9012U;
enum uint GL_INTENSITY_SNORM = 0x9013U;
enum uint GL_ALPHA8_SNORM = 0x9014U;
enum uint GL_LUMINANCE8_SNORM = 0x9015U;
enum uint GL_LUMINANCE8_ALPHA8_SNORM = 0x9016U;
enum uint GL_INTENSITY8_SNORM = 0x9017U;
enum uint GL_ALPHA16_SNORM = 0x9018U;
enum uint GL_LUMINANCE16_SNORM = 0x9019U;
enum uint GL_LUMINANCE16_ALPHA16_SNORM = 0x901AU;
enum uint GL_INTENSITY16_SNORM = 0x901BU;
enum uint GL_FACTOR_MIN_AMD = 0x901CU;
enum uint GL_FACTOR_MAX_AMD = 0x901DU;
enum uint GL_DEPTH_CLAMP_NEAR_AMD = 0x901EU;
enum uint GL_DEPTH_CLAMP_FAR_AMD = 0x901FU;
enum uint GL_VIDEO_BUFFER_NV = 0x9020U;
enum uint GL_VIDEO_BUFFER_BINDING_NV = 0x9021U;
enum uint GL_FIELD_UPPER_NV = 0x9022U;
enum uint GL_FIELD_LOWER_NV = 0x9023U;
enum uint GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024U;
enum uint GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025U;
enum uint GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026U;
enum uint GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027U;
enum uint GL_VIDEO_BUFFER_PITCH_NV = 0x9028U;
enum uint GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029U;
enum uint GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902AU;
enum uint GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902BU;
enum uint GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902CU;
enum uint GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902DU;
enum uint GL_PARTIAL_SUCCESS_NV = 0x902EU;
enum uint GL_SUCCESS_NV = 0x902FU;
enum uint GL_FAILURE_NV = 0x9030U;
enum uint GL_YCBYCR8_422_NV = 0x9031U;
enum uint GL_YCBAYCR8A_4224_NV = 0x9032U;
enum uint GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033U;
enum uint GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034U;
enum uint GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035U;
enum uint GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036U;
enum uint GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037U;
enum uint GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038U;
enum uint GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039U;
enum uint GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903AU;
enum uint GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903BU;
enum uint GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903CU;
enum uint GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045U;
enum uint GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046U;
enum uint GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047U;
enum uint GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048U;
enum uint GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049U;
enum uint GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904AU;
enum uint GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904BU;
enum uint GL_IMAGE_1D = 0x904CU;
enum uint GL_IMAGE_1D_EXT = 0x904CU;
enum uint GL_IMAGE_2D = 0x904DU;
enum uint GL_IMAGE_2D_EXT = 0x904DU;
enum uint GL_IMAGE_3D = 0x904EU;
enum uint GL_IMAGE_3D_EXT = 0x904EU;
enum uint GL_IMAGE_2D_RECT = 0x904FU;
enum uint GL_IMAGE_2D_RECT_EXT = 0x904FU;
enum uint GL_IMAGE_CUBE = 0x9050U;
enum uint GL_IMAGE_CUBE_EXT = 0x9050U;
enum uint GL_IMAGE_BUFFER = 0x9051U;
enum uint GL_IMAGE_BUFFER_EXT = 0x9051U;
enum uint GL_IMAGE_BUFFER_OES = 0x9051U;
enum uint GL_IMAGE_1D_ARRAY = 0x9052U;
enum uint GL_IMAGE_1D_ARRAY_EXT = 0x9052U;
enum uint GL_IMAGE_2D_ARRAY = 0x9053U;
enum uint GL_IMAGE_2D_ARRAY_EXT = 0x9053U;
enum uint GL_IMAGE_CUBE_MAP_ARRAY = 0x9054U;
enum uint GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054U;
enum uint GL_IMAGE_CUBE_MAP_ARRAY_OES = 0x9054U;
enum uint GL_IMAGE_2D_MULTISAMPLE = 0x9055U;
enum uint GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055U;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056U;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056U;
enum uint GL_INT_IMAGE_1D = 0x9057U;
enum uint GL_INT_IMAGE_1D_EXT = 0x9057U;
enum uint GL_INT_IMAGE_2D = 0x9058U;
enum uint GL_INT_IMAGE_2D_EXT = 0x9058U;
enum uint GL_INT_IMAGE_3D = 0x9059U;
enum uint GL_INT_IMAGE_3D_EXT = 0x9059U;
enum uint GL_INT_IMAGE_2D_RECT = 0x905AU;
enum uint GL_INT_IMAGE_2D_RECT_EXT = 0x905AU;
enum uint GL_INT_IMAGE_CUBE = 0x905BU;
enum uint GL_INT_IMAGE_CUBE_EXT = 0x905BU;
enum uint GL_INT_IMAGE_BUFFER = 0x905CU;
enum uint GL_INT_IMAGE_BUFFER_EXT = 0x905CU;
enum uint GL_INT_IMAGE_BUFFER_OES = 0x905CU;
enum uint GL_INT_IMAGE_1D_ARRAY = 0x905DU;
enum uint GL_INT_IMAGE_1D_ARRAY_EXT = 0x905DU;
enum uint GL_INT_IMAGE_2D_ARRAY = 0x905EU;
enum uint GL_INT_IMAGE_2D_ARRAY_EXT = 0x905EU;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905FU;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905FU;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x905FU;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060U;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060U;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061U;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061U;
enum uint GL_UNSIGNED_INT_IMAGE_1D = 0x9062U;
enum uint GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062U;
enum uint GL_UNSIGNED_INT_IMAGE_2D = 0x9063U;
enum uint GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063U;
enum uint GL_UNSIGNED_INT_IMAGE_3D = 0x9064U;
enum uint GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064U;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065U;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065U;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066U;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066U;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067U;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067U;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 0x9067U;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068U;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068U;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069U;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069U;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906AU;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906AU;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x906AU;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906BU;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906BU;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906CU;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906CU;
enum uint GL_MAX_IMAGE_SAMPLES = 0x906DU;
enum uint GL_MAX_IMAGE_SAMPLES_EXT = 0x906DU;
enum uint GL_IMAGE_BINDING_FORMAT = 0x906EU;
enum uint GL_IMAGE_BINDING_FORMAT_EXT = 0x906EU;
enum uint GL_RGB10_A2UI = 0x906FU;
enum uint GL_PATH_FORMAT_SVG_NV = 0x9070U;
enum uint GL_PATH_FORMAT_PS_NV = 0x9071U;
enum uint GL_STANDARD_FONT_NAME_NV = 0x9072U;
enum uint GL_SYSTEM_FONT_NAME_NV = 0x9073U;
enum uint GL_FILE_NAME_NV = 0x9074U;
enum uint GL_PATH_STROKE_WIDTH_NV = 0x9075U;
enum uint GL_PATH_END_CAPS_NV = 0x9076U;
enum uint GL_PATH_INITIAL_END_CAP_NV = 0x9077U;
enum uint GL_PATH_TERMINAL_END_CAP_NV = 0x9078U;
enum uint GL_PATH_JOIN_STYLE_NV = 0x9079U;
enum uint GL_PATH_MITER_LIMIT_NV = 0x907AU;
enum uint GL_PATH_DASH_CAPS_NV = 0x907BU;
enum uint GL_PATH_INITIAL_DASH_CAP_NV = 0x907CU;
enum uint GL_PATH_TERMINAL_DASH_CAP_NV = 0x907DU;
enum uint GL_PATH_DASH_OFFSET_NV = 0x907EU;
enum uint GL_PATH_CLIENT_LENGTH_NV = 0x907FU;
enum uint GL_PATH_FILL_MODE_NV = 0x9080U;
enum uint GL_PATH_FILL_MASK_NV = 0x9081U;
enum uint GL_PATH_FILL_COVER_MODE_NV = 0x9082U;
enum uint GL_PATH_STROKE_COVER_MODE_NV = 0x9083U;
enum uint GL_PATH_STROKE_MASK_NV = 0x9084U;
enum uint GL_COUNT_UP_NV = 0x9088U;
enum uint GL_COUNT_DOWN_NV = 0x9089U;
enum uint GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908AU;
enum uint GL_CONVEX_HULL_NV = 0x908BU;
enum uint GL_BOUNDING_BOX_NV = 0x908DU;
enum uint GL_TRANSLATE_X_NV = 0x908EU;
enum uint GL_TRANSLATE_Y_NV = 0x908FU;
enum uint GL_TRANSLATE_2D_NV = 0x9090U;
enum uint GL_TRANSLATE_3D_NV = 0x9091U;
enum uint GL_AFFINE_2D_NV = 0x9092U;
enum uint GL_AFFINE_3D_NV = 0x9094U;
enum uint GL_TRANSPOSE_AFFINE_2D_NV = 0x9096U;
enum uint GL_TRANSPOSE_AFFINE_3D_NV = 0x9098U;
enum uint GL_UTF8_NV = 0x909AU;
enum uint GL_UTF16_NV = 0x909BU;
enum uint GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909CU;
enum uint GL_PATH_COMMAND_COUNT_NV = 0x909DU;
enum uint GL_PATH_COORD_COUNT_NV = 0x909EU;
enum uint GL_PATH_DASH_ARRAY_COUNT_NV = 0x909FU;
enum uint GL_PATH_COMPUTED_LENGTH_NV = 0x90A0U;
enum uint GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1U;
enum uint GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2U;
enum uint GL_SQUARE_NV = 0x90A3U;
enum uint GL_ROUND_NV = 0x90A4U;
enum uint GL_TRIANGULAR_NV = 0x90A5U;
enum uint GL_BEVEL_NV = 0x90A6U;
enum uint GL_MITER_REVERT_NV = 0x90A7U;
enum uint GL_MITER_TRUNCATE_NV = 0x90A8U;
enum uint GL_SKIP_MISSING_GLYPH_NV = 0x90A9U;
enum uint GL_USE_MISSING_GLYPH_NV = 0x90AAU;
enum uint GL_PATH_ERROR_POSITION_NV = 0x90ABU;
enum uint GL_PATH_FOG_GEN_MODE_NV = 0x90ACU;
enum uint GL_ACCUM_ADJACENT_PAIRS_NV = 0x90ADU;
enum uint GL_ADJACENT_PAIRS_NV = 0x90AEU;
enum uint GL_FIRST_TO_REST_NV = 0x90AFU;
enum uint GL_PATH_GEN_MODE_NV = 0x90B0U;
enum uint GL_PATH_GEN_COEFF_NV = 0x90B1U;
enum uint GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2U;
enum uint GL_PATH_GEN_COMPONENTS_NV = 0x90B3U;
enum uint GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4U;
enum uint GL_MOVE_TO_RESETS_NV = 0x90B5U;
enum uint GL_MOVE_TO_CONTINUES_NV = 0x90B6U;
enum uint GL_PATH_STENCIL_FUNC_NV = 0x90B7U;
enum uint GL_PATH_STENCIL_REF_NV = 0x90B8U;
enum uint GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9U;
enum uint GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BAU;
enum uint GL_SCALED_RESOLVE_NICEST_EXT = 0x90BBU;
enum uint GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BCU;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BDU;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BEU;
enum uint GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BFU;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7U;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8U;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9U;
enum uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CAU;
enum uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CBU;
enum uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CBU;
enum uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x90CBU;
enum uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CCU;
enum uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CCU;
enum uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x90CCU;
enum uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CDU;
enum uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CDU;
enum uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x90CDU;
enum uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CEU;
enum uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CFU;
enum uint GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0U;
enum uint GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1U;
enum uint GL_SHADER_STORAGE_BUFFER = 0x90D2U;
enum uint GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3U;
enum uint GL_SHADER_STORAGE_BUFFER_START = 0x90D4U;
enum uint GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5U;
enum uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6U;
enum uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7U;
enum uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7U;
enum uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x90D7U;
enum uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8U;
enum uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8U;
enum uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x90D8U;
enum uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9U;
enum uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9U;
enum uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x90D9U;
enum uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DAU;
enum uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DBU;
enum uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DCU;
enum uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DDU;
enum uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DEU;
enum uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DFU;
enum uint GL_SYNC_X11_FENCE_EXT = 0x90E1U;
enum uint GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EAU;
enum uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EBU;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EBU;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90ECU;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90EDU;
enum uint GL_DISPATCH_INDIRECT_BUFFER = 0x90EEU;
enum uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EFU;
enum uint GL_COLOR_ATTACHMENT_EXT = 0x90F0U;
enum uint GL_MULTIVIEW_EXT = 0x90F1U;
enum uint GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2U;
enum uint GL_CONTEXT_ROBUST_ACCESS = 0x90F3U;
enum uint GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3U;
enum uint GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3U;
enum uint GL_COMPUTE_PROGRAM_NV = 0x90FBU;
enum uint GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FCU;
enum uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100U;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101U;
enum uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102U;
enum uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102U;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103U;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104U;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105U;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105U;
enum uint GL_TEXTURE_SAMPLES = 0x9106U;
enum uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107U;
enum uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108U;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109U;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910AU;
enum uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910BU;
enum uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910BU;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910CU;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910CU;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910DU;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910DU;
enum uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910EU;
enum uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910FU;
enum uint GL_MAX_INTEGER_SAMPLES = 0x9110U;
enum uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111U;
enum uint GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111U;
enum uint GL_OBJECT_TYPE = 0x9112U;
enum uint GL_OBJECT_TYPE_APPLE = 0x9112U;
enum uint GL_SYNC_CONDITION = 0x9113U;
enum uint GL_SYNC_CONDITION_APPLE = 0x9113U;
enum uint GL_SYNC_STATUS = 0x9114U;
enum uint GL_SYNC_STATUS_APPLE = 0x9114U;
enum uint GL_SYNC_FLAGS = 0x9115U;
enum uint GL_SYNC_FLAGS_APPLE = 0x9115U;
enum uint GL_SYNC_FENCE = 0x9116U;
enum uint GL_SYNC_FENCE_APPLE = 0x9116U;
enum uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117U;
enum uint GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117U;
enum uint GL_UNSIGNALED = 0x9118U;
enum uint GL_UNSIGNALED_APPLE = 0x9118U;
enum uint GL_SIGNALED = 0x9119U;
enum uint GL_SIGNALED_APPLE = 0x9119U;
enum uint GL_ALREADY_SIGNALED = 0x911AU;
enum uint GL_ALREADY_SIGNALED_APPLE = 0x911AU;
enum uint GL_TIMEOUT_EXPIRED = 0x911BU;
enum uint GL_TIMEOUT_EXPIRED_APPLE = 0x911BU;
enum uint GL_CONDITION_SATISFIED = 0x911CU;
enum uint GL_CONDITION_SATISFIED_APPLE = 0x911CU;
enum uint GL_WAIT_FAILED = 0x911DU;
enum uint GL_WAIT_FAILED_APPLE = 0x911DU;
enum uint GL_BUFFER_ACCESS_FLAGS = 0x911FU;
enum uint GL_BUFFER_MAP_LENGTH = 0x9120U;
enum uint GL_BUFFER_MAP_OFFSET = 0x9121U;
enum uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122U;
enum uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123U;
enum uint GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123U;
enum uint GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x9123U;
enum uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124U;
enum uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124U;
enum uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x9124U;
enum uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125U;
enum uint GL_CONTEXT_PROFILE_MASK = 0x9126U;
enum uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127U;
enum uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128U;
enum uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129U;
enum uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912AU;
enum uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912BU;
enum uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912CU;
enum uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912DU;
enum uint GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912EU;
enum uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912FU;
enum uint GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912FU;
enum uint GL_SGX_PROGRAM_BINARY_IMG = 0x9130U;
enum uint GL_RENDERBUFFER_SAMPLES_IMG = 0x9133U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134U;
enum uint GL_MAX_SAMPLES_IMG = 0x9135U;
enum uint GL_TEXTURE_SAMPLES_IMG = 0x9136U;
enum uint GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137U;
enum uint GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138U;
enum uint GL_CUBIC_IMG = 0x9139U;
enum uint GL_CUBIC_MIPMAP_NEAREST_IMG = 0x913AU;
enum uint GL_CUBIC_MIPMAP_LINEAR_IMG = 0x913BU;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x913CU;
enum uint GL_NUM_DOWNSAMPLE_SCALES_IMG = 0x913DU;
enum uint GL_DOWNSAMPLE_SCALES_IMG = 0x913EU;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913FU;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143U;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143U;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143U;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143U;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144U;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144U;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144U;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144U;
enum uint GL_DEBUG_LOGGED_MESSAGES = 0x9145U;
enum uint GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145U;
enum uint GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145U;
enum uint GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145U;
enum uint GL_DEBUG_SEVERITY_HIGH = 0x9146U;
enum uint GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146U;
enum uint GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146U;
enum uint GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146U;
enum uint GL_DEBUG_SEVERITY_MEDIUM = 0x9147U;
enum uint GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147U;
enum uint GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147U;
enum uint GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147U;
enum uint GL_DEBUG_SEVERITY_LOW = 0x9148U;
enum uint GL_DEBUG_SEVERITY_LOW_AMD = 0x9148U;
enum uint GL_DEBUG_SEVERITY_LOW_ARB = 0x9148U;
enum uint GL_DEBUG_SEVERITY_LOW_KHR = 0x9148U;
enum uint GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149U;
enum uint GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914AU;
enum uint GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914BU;
enum uint GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914CU;
enum uint GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914DU;
enum uint GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914EU;
enum uint GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914FU;
enum uint GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150U;
enum uint GL_BUFFER_OBJECT_EXT = 0x9151U;
enum uint GL_DATA_BUFFER_AMD = 0x9151U;
enum uint GL_PERFORMANCE_MONITOR_AMD = 0x9152U;
enum uint GL_QUERY_OBJECT_AMD = 0x9153U;
enum uint GL_QUERY_OBJECT_EXT = 0x9153U;
enum uint GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154U;
enum uint GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154U;
enum uint GL_SAMPLER_OBJECT_AMD = 0x9155U;
enum uint GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160U;
enum uint GL_QUERY_BUFFER = 0x9192U;
enum uint GL_QUERY_BUFFER_AMD = 0x9192U;
enum uint GL_QUERY_BUFFER_BINDING = 0x9193U;
enum uint GL_QUERY_BUFFER_BINDING_AMD = 0x9193U;
enum uint GL_QUERY_RESULT_NO_WAIT = 0x9194U;
enum uint GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194U;
enum uint GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195U;
enum uint GL_VIRTUAL_PAGE_SIZE_X_EXT = 0x9195U;
enum uint GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195U;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196U;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_EXT = 0x9196U;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196U;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197U;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_EXT = 0x9197U;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197U;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198U;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 0x9198U;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198U;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199U;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x9199U;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199U;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919AU;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919AU;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x919AU;
enum uint GL_MIN_SPARSE_LEVEL_AMD = 0x919BU;
enum uint GL_MIN_LOD_WARNING_AMD = 0x919CU;
enum uint GL_TEXTURE_BUFFER_OFFSET = 0x919DU;
enum uint GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919DU;
enum uint GL_TEXTURE_BUFFER_OFFSET_OES = 0x919DU;
enum uint GL_TEXTURE_BUFFER_SIZE = 0x919EU;
enum uint GL_TEXTURE_BUFFER_SIZE_EXT = 0x919EU;
enum uint GL_TEXTURE_BUFFER_SIZE_OES = 0x919EU;
enum uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919FU;
enum uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919FU;
enum uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x919FU;
enum uint GL_STREAM_RASTERIZATION_AMD = 0x91A0U;
enum uint GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4U;
enum uint GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5U;
enum uint GL_TEXTURE_SPARSE_ARB = 0x91A6U;
enum uint GL_TEXTURE_SPARSE_EXT = 0x91A6U;
enum uint GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7U;
enum uint GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x91A7U;
enum uint GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8U;
enum uint GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 0x91A8U;
enum uint GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9U;
enum uint GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x91A9U;
enum uint GL_NUM_SPARSE_LEVELS_ARB = 0x91AAU;
enum uint GL_NUM_SPARSE_LEVELS_EXT = 0x91AAU;
enum uint GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AEU;
enum uint GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AFU;
enum uint GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0U;
enum uint GL_COMPLETION_STATUS_ARB = 0x91B1U;
enum uint GL_COMPUTE_SHADER = 0x91B9U;
enum uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BBU;
enum uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BCU;
enum uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BDU;
enum uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BEU;
enum uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BFU;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BFU;
enum uint GL_FLOAT16_MAT2_AMD = 0x91C5U;
enum uint GL_FLOAT16_MAT3_AMD = 0x91C6U;
enum uint GL_FLOAT16_MAT4_AMD = 0x91C7U;
enum uint GL_FLOAT16_MAT2x3_AMD = 0x91C8U;
enum uint GL_FLOAT16_MAT2x4_AMD = 0x91C9U;
enum uint GL_FLOAT16_MAT3x2_AMD = 0x91CAU;
enum uint GL_FLOAT16_MAT3x4_AMD = 0x91CBU;
enum uint GL_FLOAT16_MAT4x2_AMD = 0x91CCU;
enum uint GL_FLOAT16_MAT4x3_AMD = 0x91CDU;
enum uint GL_UNPACK_FLIP_Y_WEBGL = 0x9240U;
enum uint GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241U;
enum uint GL_CONTEXT_LOST_WEBGL = 0x9242U;
enum uint GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243U;
enum uint GL_BROWSER_DEFAULT_WEBGL = 0x9244U;
enum uint GL_SHADER_BINARY_DMP = 0x9250U;
enum uint GL_SMAPHS30_PROGRAM_BINARY_DMP = 0x9251U;
enum uint GL_SMAPHS_PROGRAM_BINARY_DMP = 0x9252U;
enum uint GL_DMP_PROGRAM_BINARY_DMP = 0x9253U;
enum uint GL_GCCSO_SHADER_BINARY_FJ = 0x9260U;
enum uint GL_COMPRESSED_R11_EAC = 0x9270U;
enum uint GL_COMPRESSED_R11_EAC_OES = 0x9270U;
enum uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271U;
enum uint GL_COMPRESSED_SIGNED_R11_EAC_OES = 0x9271U;
enum uint GL_COMPRESSED_RG11_EAC = 0x9272U;
enum uint GL_COMPRESSED_RG11_EAC_OES = 0x9272U;
enum uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273U;
enum uint GL_COMPRESSED_SIGNED_RG11_EAC_OES = 0x9273U;
enum uint GL_COMPRESSED_RGB8_ETC2 = 0x9274U;
enum uint GL_COMPRESSED_RGB8_ETC2_OES = 0x9274U;
enum uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275U;
enum uint GL_COMPRESSED_SRGB8_ETC2_OES = 0x9275U;
enum uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276U;
enum uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276U;
enum uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277U;
enum uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277U;
enum uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278U;
enum uint GL_COMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279U;
enum uint GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280U;
enum uint GL_BLEND_OVERLAP_NV = 0x9281U;
enum uint GL_UNCORRELATED_NV = 0x9282U;
enum uint GL_DISJOINT_NV = 0x9283U;
enum uint GL_CONJOINT_NV = 0x9284U;
enum uint GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285U;
enum uint GL_BLEND_ADVANCED_COHERENT_NV = 0x9285U;
enum uint GL_SRC_NV = 0x9286U;
enum uint GL_DST_NV = 0x9287U;
enum uint GL_SRC_OVER_NV = 0x9288U;
enum uint GL_DST_OVER_NV = 0x9289U;
enum uint GL_SRC_IN_NV = 0x928AU;
enum uint GL_DST_IN_NV = 0x928BU;
enum uint GL_SRC_OUT_NV = 0x928CU;
enum uint GL_DST_OUT_NV = 0x928DU;
enum uint GL_SRC_ATOP_NV = 0x928EU;
enum uint GL_DST_ATOP_NV = 0x928FU;
enum uint GL_PLUS_NV = 0x9291U;
enum uint GL_PLUS_DARKER_NV = 0x9292U;
enum uint GL_MULTIPLY = 0x9294U;
enum uint GL_MULTIPLY_KHR = 0x9294U;
enum uint GL_MULTIPLY_NV = 0x9294U;
enum uint GL_SCREEN = 0x9295U;
enum uint GL_SCREEN_KHR = 0x9295U;
enum uint GL_SCREEN_NV = 0x9295U;
enum uint GL_OVERLAY = 0x9296U;
enum uint GL_OVERLAY_KHR = 0x9296U;
enum uint GL_OVERLAY_NV = 0x9296U;
enum uint GL_DARKEN = 0x9297U;
enum uint GL_DARKEN_KHR = 0x9297U;
enum uint GL_DARKEN_NV = 0x9297U;
enum uint GL_LIGHTEN = 0x9298U;
enum uint GL_LIGHTEN_KHR = 0x9298U;
enum uint GL_LIGHTEN_NV = 0x9298U;
enum uint GL_COLORDODGE = 0x9299U;
enum uint GL_COLORDODGE_KHR = 0x9299U;
enum uint GL_COLORDODGE_NV = 0x9299U;
enum uint GL_COLORBURN = 0x929AU;
enum uint GL_COLORBURN_KHR = 0x929AU;
enum uint GL_COLORBURN_NV = 0x929AU;
enum uint GL_HARDLIGHT = 0x929BU;
enum uint GL_HARDLIGHT_KHR = 0x929BU;
enum uint GL_HARDLIGHT_NV = 0x929BU;
enum uint GL_SOFTLIGHT = 0x929CU;
enum uint GL_SOFTLIGHT_KHR = 0x929CU;
enum uint GL_SOFTLIGHT_NV = 0x929CU;
enum uint GL_DIFFERENCE = 0x929EU;
enum uint GL_DIFFERENCE_KHR = 0x929EU;
enum uint GL_DIFFERENCE_NV = 0x929EU;
enum uint GL_MINUS_NV = 0x929FU;
enum uint GL_EXCLUSION = 0x92A0U;
enum uint GL_EXCLUSION_KHR = 0x92A0U;
enum uint GL_EXCLUSION_NV = 0x92A0U;
enum uint GL_CONTRAST_NV = 0x92A1U;
enum uint GL_INVERT_RGB_NV = 0x92A3U;
enum uint GL_LINEARDODGE_NV = 0x92A4U;
enum uint GL_LINEARBURN_NV = 0x92A5U;
enum uint GL_VIVIDLIGHT_NV = 0x92A6U;
enum uint GL_LINEARLIGHT_NV = 0x92A7U;
enum uint GL_PINLIGHT_NV = 0x92A8U;
enum uint GL_HARDMIX_NV = 0x92A9U;
enum uint GL_HSL_HUE = 0x92ADU;
enum uint GL_HSL_HUE_KHR = 0x92ADU;
enum uint GL_HSL_HUE_NV = 0x92ADU;
enum uint GL_HSL_SATURATION = 0x92AEU;
enum uint GL_HSL_SATURATION_KHR = 0x92AEU;
enum uint GL_HSL_SATURATION_NV = 0x92AEU;
enum uint GL_HSL_COLOR = 0x92AFU;
enum uint GL_HSL_COLOR_KHR = 0x92AFU;
enum uint GL_HSL_COLOR_NV = 0x92AFU;
enum uint GL_HSL_LUMINOSITY = 0x92B0U;
enum uint GL_HSL_LUMINOSITY_KHR = 0x92B0U;
enum uint GL_HSL_LUMINOSITY_NV = 0x92B0U;
enum uint GL_PLUS_CLAMPED_NV = 0x92B1U;
enum uint GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2U;
enum uint GL_MINUS_CLAMPED_NV = 0x92B3U;
enum uint GL_INVERT_OVG_NV = 0x92B4U;
enum uint GL_MAX_LGPU_GPUS_NVX = 0x92BAU;
enum uint GL_MULTICAST_GPUS_NV = 0x92BAU;
enum uint GL_PURGED_CONTEXT_RESET_NV = 0x92BBU;
enum uint GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BEU;
enum uint GL_PRIMITIVE_BOUNDING_BOX = 0x92BEU;
enum uint GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92BEU;
enum uint GL_PRIMITIVE_BOUNDING_BOX_OES = 0x92BEU;
enum uint GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BFU;
enum uint GL_ATOMIC_COUNTER_BUFFER = 0x92C0U;
enum uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1U;
enum uint GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2U;
enum uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3U;
enum uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4U;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5U;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6U;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7U;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8U;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9U;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CAU;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CBU;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CCU;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CDU;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CDU;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x92CDU;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CEU;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CEU;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x92CEU;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CFU;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CFU;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x92CFU;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0U;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1U;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2U;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3U;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3U;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x92D3U;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4U;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4U;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x92D4U;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5U;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5U;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x92D5U;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6U;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7U;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8U;
enum uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9U;
enum uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DAU;
enum uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DBU;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DCU;
enum uint GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DDU;
enum uint GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DEU;
enum uint GL_DEBUG_OUTPUT = 0x92E0U;
enum uint GL_DEBUG_OUTPUT_KHR = 0x92E0U;
enum uint GL_UNIFORM = 0x92E1U;
enum uint GL_UNIFORM_BLOCK = 0x92E2U;
enum uint GL_PROGRAM_INPUT = 0x92E3U;
enum uint GL_PROGRAM_OUTPUT = 0x92E4U;
enum uint GL_BUFFER_VARIABLE = 0x92E5U;
enum uint GL_SHADER_STORAGE_BLOCK = 0x92E6U;
enum uint GL_IS_PER_PATCH = 0x92E7U;
enum uint GL_IS_PER_PATCH_EXT = 0x92E7U;
enum uint GL_IS_PER_PATCH_OES = 0x92E7U;
enum uint GL_VERTEX_SUBROUTINE = 0x92E8U;
enum uint GL_TESS_CONTROL_SUBROUTINE = 0x92E9U;
enum uint GL_TESS_EVALUATION_SUBROUTINE = 0x92EAU;
enum uint GL_GEOMETRY_SUBROUTINE = 0x92EBU;
enum uint GL_FRAGMENT_SUBROUTINE = 0x92ECU;
enum uint GL_COMPUTE_SUBROUTINE = 0x92EDU;
enum uint GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EEU;
enum uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EFU;
enum uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0U;
enum uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1U;
enum uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2U;
enum uint GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3U;
enum uint GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4U;
enum uint GL_ACTIVE_RESOURCES = 0x92F5U;
enum uint GL_MAX_NAME_LENGTH = 0x92F6U;
enum uint GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7U;
enum uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8U;
enum uint GL_NAME_LENGTH = 0x92F9U;
enum uint GL_TYPE = 0x92FAU;
enum uint GL_ARRAY_SIZE = 0x92FBU;
enum uint GL_OFFSET = 0x92FCU;
enum uint GL_BLOCK_INDEX = 0x92FDU;
enum uint GL_ARRAY_STRIDE = 0x92FEU;
enum uint GL_MATRIX_STRIDE = 0x92FFU;
enum uint GL_IS_ROW_MAJOR = 0x9300U;
enum uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301U;
enum uint GL_BUFFER_BINDING = 0x9302U;
enum uint GL_BUFFER_DATA_SIZE = 0x9303U;
enum uint GL_NUM_ACTIVE_VARIABLES = 0x9304U;
enum uint GL_ACTIVE_VARIABLES = 0x9305U;
enum uint GL_REFERENCED_BY_VERTEX_SHADER = 0x9306U;
enum uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307U;
enum uint GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307U;
enum uint GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x9307U;
enum uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308U;
enum uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308U;
enum uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x9308U;
enum uint GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309U;
enum uint GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309U;
enum uint GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 0x9309U;
enum uint GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930AU;
enum uint GL_REFERENCED_BY_COMPUTE_SHADER = 0x930BU;
enum uint GL_TOP_LEVEL_ARRAY_SIZE = 0x930CU;
enum uint GL_TOP_LEVEL_ARRAY_STRIDE = 0x930DU;
enum uint GL_LOCATION = 0x930EU;
enum uint GL_LOCATION_INDEX = 0x930FU;
enum uint GL_LOCATION_INDEX_EXT = 0x930FU;
enum uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310U;
enum uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311U;
enum uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312U;
enum uint GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312U;
enum uint GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x9312U;
enum uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313U;
enum uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314U;
enum uint GL_MAX_FRAMEBUFFER_WIDTH = 0x9315U;
enum uint GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316U;
enum uint GL_MAX_FRAMEBUFFER_LAYERS = 0x9317U;
enum uint GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317U;
enum uint GL_MAX_FRAMEBUFFER_LAYERS_OES = 0x9317U;
enum uint GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318U;
enum uint GL_RASTER_MULTISAMPLE_EXT = 0x9327U;
enum uint GL_RASTER_SAMPLES_EXT = 0x9328U;
enum uint GL_MAX_RASTER_SAMPLES_EXT = 0x9329U;
enum uint GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932AU;
enum uint GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932BU;
enum uint GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932CU;
enum uint GL_DEPTH_SAMPLES_NV = 0x932DU;
enum uint GL_STENCIL_SAMPLES_NV = 0x932EU;
enum uint GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932FU;
enum uint GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330U;
enum uint GL_COVERAGE_MODULATION_TABLE_NV = 0x9331U;
enum uint GL_COVERAGE_MODULATION_NV = 0x9332U;
enum uint GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333U;
enum uint GL_WARP_SIZE_NV = 0x9339U;
enum uint GL_WARPS_PER_SM_NV = 0x933AU;
enum uint GL_SM_COUNT_NV = 0x933BU;
enum uint GL_FILL_RECTANGLE_NV = 0x933CU;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933DU;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933DU;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933EU;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933EU;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933FU;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933FU;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340U;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340U;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341U;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341U;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342U;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342U;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343U;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343U;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344U;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345U;
enum uint GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346U;
enum uint GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347U;
enum uint GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348U;
enum uint GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349U;
enum uint GL_LOCATION_COMPONENT = 0x934AU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934BU;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934CU;
enum uint GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934DU;
enum uint GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934EU;
enum uint GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934FU;
enum uint GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350U;
enum uint GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351U;
enum uint GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352U;
enum uint GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353U;
enum uint GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354U;
enum uint GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355U;
enum uint GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356U;
enum uint GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357U;
enum uint GL_VIEWPORT_SWIZZLE_X_NV = 0x9358U;
enum uint GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359U;
enum uint GL_VIEWPORT_SWIZZLE_Z_NV = 0x935AU;
enum uint GL_VIEWPORT_SWIZZLE_W_NV = 0x935BU;
enum uint GL_CLIP_ORIGIN = 0x935CU;
enum uint GL_CLIP_DEPTH_MODE = 0x935DU;
enum uint GL_NEGATIVE_ONE_TO_ONE = 0x935EU;
enum uint GL_ZERO_TO_ONE = 0x935FU;
enum uint GL_CLEAR_TEXTURE = 0x9365U;
enum uint GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366U;
enum uint GL_WEIGHTED_AVERAGE_ARB = 0x9367U;
enum uint GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368U;
enum uint GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369U;
enum uint GL_FONT_UNAVAILABLE_NV = 0x936AU;
enum uint GL_FONT_UNINTELLIGIBLE_NV = 0x936BU;
enum uint GL_STANDARD_FONT_FORMAT_NV = 0x936CU;
enum uint GL_FRAGMENT_INPUT_NV = 0x936DU;
enum uint GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936EU;
enum uint GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936FU;
enum uint GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370U;
enum uint GL_MULTISAMPLES_NV = 0x9371U;
enum uint GL_SUPERSAMPLE_SCALE_X_NV = 0x9372U;
enum uint GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373U;
enum uint GL_CONFORMANT_NV = 0x9374U;
enum uint GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379U;
enum uint GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937AU;
enum uint GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937BU;
enum uint GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937CU;
enum uint GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937DU;
enum uint GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937EU;
enum uint GL_NUM_SAMPLE_COUNTS = 0x9380U;
enum uint GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381U;
enum uint GL_MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381U;
enum uint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382U;
enum uint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382U;
enum uint GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0U;
enum uint GL_BGRA8_EXT = 0x93A1U;
enum uint GL_TEXTURE_USAGE_ANGLE = 0x93A2U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3U;
enum uint GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4U;
enum uint GL_PROGRAM_BINARY_ANGLE = 0x93A6U;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4 = 0x93B0U;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0U;
enum uint GL_COMPRESSED_RGBA_ASTC_5x4 = 0x93B1U;
enum uint GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1U;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5 = 0x93B2U;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2U;
enum uint GL_COMPRESSED_RGBA_ASTC_6x5 = 0x93B3U;
enum uint GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3U;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6 = 0x93B4U;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4U;
enum uint GL_COMPRESSED_RGBA_ASTC_8x5 = 0x93B5U;
enum uint GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5U;
enum uint GL_COMPRESSED_RGBA_ASTC_8x6 = 0x93B6U;
enum uint GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6U;
enum uint GL_COMPRESSED_RGBA_ASTC_8x8 = 0x93B7U;
enum uint GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7U;
enum uint GL_COMPRESSED_RGBA_ASTC_10x5 = 0x93B8U;
enum uint GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8U;
enum uint GL_COMPRESSED_RGBA_ASTC_10x6 = 0x93B9U;
enum uint GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9U;
enum uint GL_COMPRESSED_RGBA_ASTC_10x8 = 0x93BAU;
enum uint GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BAU;
enum uint GL_COMPRESSED_RGBA_ASTC_10x10 = 0x93BBU;
enum uint GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BBU;
enum uint GL_COMPRESSED_RGBA_ASTC_12x10 = 0x93BCU;
enum uint GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BCU;
enum uint GL_COMPRESSED_RGBA_ASTC_12x12 = 0x93BDU;
enum uint GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BDU;
enum uint GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0U;
enum uint GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1U;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2U;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3U;
enum uint GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4U;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5U;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6U;
enum uint GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7U;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8U;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DAU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DAU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DBU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DBU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DCU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DCU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DDU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DDU;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8U;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9U;
enum uint GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0U;
enum uint GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1U;
enum uint GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0U;
enum uint GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1U;
enum uint GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2U;
enum uint GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3U;
enum uint GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4U;
enum uint GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5U;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8U;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9U;
enum uint GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FAU;
enum uint GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FBU;
enum uint GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FCU;
enum uint GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FDU;
enum uint GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FEU;
enum uint GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FFU;
enum uint GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500U;
enum uint GL_PER_GPU_STORAGE_NV = 0x9548U;
enum uint GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549U;
enum uint GL_CONSERVATIVE_RASTER_MODE_NV = 0x954DU;
enum uint GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954EU;
enum uint GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954FU;
enum uint GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551U;
enum uint GL_SPIR_V_BINARY_ARB = 0x9552U;
enum uint GL_RENDER_GPU_MASK_NV = 0x9558U;
enum uint GL_TEXTURE_TILING_EXT = 0x9580U;
enum uint GL_DEDICATED_MEMORY_OBJECT_EXT = 0x9581U;
enum uint GL_NUM_TILING_TYPES_EXT = 0x9582U;
enum uint GL_TILING_TYPES_EXT = 0x9583U;
enum uint GL_OPTIMAL_TILING_EXT = 0x9584U;
enum uint GL_LINEAR_TILING_EXT = 0x9585U;
enum uint GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586U;
enum uint GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587U;
enum uint GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588U;
enum uint GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589U;
enum uint GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958AU;
enum uint GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958BU;
enum uint GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958CU;
enum uint GL_LAYOUT_GENERAL_EXT = 0x958DU;
enum uint GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x958EU;
enum uint GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958FU;
enum uint GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590U;
enum uint GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x9591U;
enum uint GL_LAYOUT_TRANSFER_SRC_EXT = 0x9592U;
enum uint GL_LAYOUT_TRANSFER_DST_EXT = 0x9593U;
enum uint GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594U;
enum uint GL_D3D12_FENCE_VALUE_EXT = 0x9595U;
enum uint GL_NUM_DEVICE_UUIDS_EXT = 0x9596U;
enum uint GL_DEVICE_UUID_EXT = 0x9597U;
enum uint GL_DRIVER_UUID_EXT = 0x9598U;
enum uint GL_DEVICE_LUID_EXT = 0x9599U;
enum uint GL_DEVICE_NODE_MASK_EXT = 0x959AU;
enum uint GL_PROTECTED_MEMORY_OBJECT_EXT = 0x959BU;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630U;
enum uint GL_MAX_VIEWS_OVR = 0x9631U;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633U;
enum uint GL_GS_SHADER_BINARY_MTK = 0x9640U;
enum uint GL_GS_PROGRAM_BINARY_MTK = 0x9641U;
enum uint GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 0x9650U;
enum uint GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 0x9651U;
enum uint GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x9652U;
enum uint GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2U;
enum uint GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262U;
enum uint GL_CULL_VERTEX_IBM = 103050U;
enum uint GL_ALL_STATIC_DATA_IBM = 103060U;
enum uint GL_STATIC_VERTEX_ARRAY_IBM = 103061U;
enum uint GL_VERTEX_ARRAY_LIST_IBM = 103070U;
enum uint GL_NORMAL_ARRAY_LIST_IBM = 103071U;
enum uint GL_COLOR_ARRAY_LIST_IBM = 103072U;
enum uint GL_INDEX_ARRAY_LIST_IBM = 103073U;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074U;
enum uint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075U;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076U;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077U;
enum uint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080U;
enum uint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081U;
enum uint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082U;
enum uint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083U;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084U;
enum uint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085U;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086U;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087U;
enum uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8U;
enum uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FDU;
enum uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FEU;
enum uint GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202U;
enum uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203U;
enum uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204U;
enum uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20CU;
enum uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20DU;
enum uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20EU;
enum uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20FU;
enum uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210U;
enum uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211U;
enum uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216U;
enum uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217U;
enum uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218U;
enum uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219U;
enum uint GL_CLIP_NEAR_HINT_PGI = 0x1A220U;
enum uint GL_CLIP_FAR_HINT_PGI = 0x1A221U;
enum uint GL_WIDE_LINE_HINT_PGI = 0x1A222U;
enum uint GL_BACK_NORMALS_HINT_PGI = 0x1A223U;
enum uint GL_VERTEX_DATA_HINT_PGI = 0x1A22AU;
enum uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22BU;
enum uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22CU;
enum uint GL_MAX_VERTEX_HINT_PGI = 0x1A22DU;

// API
alias glAccum = glAccum_Z_Z;
__gshared glAccum_Z_Z = function void (GLenum op, GLfloat value) { glAccum_Z_Z_loader(op, value); };
private void glAccum_Z_Z_loader (GLenum op, GLfloat value) {
  *cast(void**)&glAccum_Z_Z = glbindGetProcAddress(`glAccum`);
  if (*cast(void**)&glAccum_Z_Z is null) assert(0, `OpenGL function 'glAccum' not found!`);
  glAccum_Z_Z(op, value);
}
alias glAccumxOES = glAccumxOES_Z_Z;
__gshared glAccumxOES_Z_Z = function void (GLenum op, GLfixed value) { glAccumxOES_Z_Z_loader(op, value); };
private void glAccumxOES_Z_Z_loader (GLenum op, GLfixed value) {
  *cast(void**)&glAccumxOES_Z_Z = glbindGetProcAddress(`glAccumxOES`);
  if (*cast(void**)&glAccumxOES_Z_Z is null) assert(0, `OpenGL function 'glAccumxOES' not found!`);
  glAccumxOES_Z_Z(op, value);
}
alias glActiveProgramEXT = glActiveProgramEXT_Z_Z;
__gshared glActiveProgramEXT_Z_Z = function void (GLuint program) { glActiveProgramEXT_Z_Z_loader(program); };
private void glActiveProgramEXT_Z_Z_loader (GLuint program) {
  *cast(void**)&glActiveProgramEXT_Z_Z = glbindGetProcAddress(`glActiveProgramEXT`);
  if (*cast(void**)&glActiveProgramEXT_Z_Z is null) assert(0, `OpenGL function 'glActiveProgramEXT' not found!`);
  glActiveProgramEXT_Z_Z(program);
}
alias glActiveShaderProgram = glActiveShaderProgram_Z_Z;
__gshared glActiveShaderProgram_Z_Z = function void (GLuint pipeline, GLuint program) { glActiveShaderProgram_Z_Z_loader(pipeline, program); };
private void glActiveShaderProgram_Z_Z_loader (GLuint pipeline, GLuint program) {
  *cast(void**)&glActiveShaderProgram_Z_Z = glbindGetProcAddress(`glActiveShaderProgram`);
  if (*cast(void**)&glActiveShaderProgram_Z_Z is null) assert(0, `OpenGL function 'glActiveShaderProgram' not found!`);
  glActiveShaderProgram_Z_Z(pipeline, program);
}
alias glActiveShaderProgramEXT = glActiveShaderProgramEXT_Z_Z;
__gshared glActiveShaderProgramEXT_Z_Z = function void (GLuint pipeline, GLuint program) { glActiveShaderProgramEXT_Z_Z_loader(pipeline, program); };
private void glActiveShaderProgramEXT_Z_Z_loader (GLuint pipeline, GLuint program) {
  *cast(void**)&glActiveShaderProgramEXT_Z_Z = glbindGetProcAddress(`glActiveShaderProgramEXT`);
  if (*cast(void**)&glActiveShaderProgramEXT_Z_Z is null) assert(0, `OpenGL function 'glActiveShaderProgramEXT' not found!`);
  glActiveShaderProgramEXT_Z_Z(pipeline, program);
}
alias glActiveStencilFaceEXT = glActiveStencilFaceEXT_Z_Z;
__gshared glActiveStencilFaceEXT_Z_Z = function void (GLenum face) { glActiveStencilFaceEXT_Z_Z_loader(face); };
private void glActiveStencilFaceEXT_Z_Z_loader (GLenum face) {
  *cast(void**)&glActiveStencilFaceEXT_Z_Z = glbindGetProcAddress(`glActiveStencilFaceEXT`);
  if (*cast(void**)&glActiveStencilFaceEXT_Z_Z is null) assert(0, `OpenGL function 'glActiveStencilFaceEXT' not found!`);
  glActiveStencilFaceEXT_Z_Z(face);
}
alias glActiveTexture = glActiveTexture_Z_Z;
__gshared glActiveTexture_Z_Z = function void (GLenum texture) { glActiveTexture_Z_Z_loader(texture); };
private void glActiveTexture_Z_Z_loader (GLenum texture) {
  *cast(void**)&glActiveTexture_Z_Z = glbindGetProcAddress(`glActiveTexture`);
  if (*cast(void**)&glActiveTexture_Z_Z is null) assert(0, `OpenGL function 'glActiveTexture' not found!`);
  glActiveTexture_Z_Z(texture);
}
alias glActiveTextureARB = glActiveTextureARB_Z_Z;
__gshared glActiveTextureARB_Z_Z = function void (GLenum texture) { glActiveTextureARB_Z_Z_loader(texture); };
private void glActiveTextureARB_Z_Z_loader (GLenum texture) {
  *cast(void**)&glActiveTextureARB_Z_Z = glbindGetProcAddress(`glActiveTextureARB`);
  if (*cast(void**)&glActiveTextureARB_Z_Z is null) assert(0, `OpenGL function 'glActiveTextureARB' not found!`);
  glActiveTextureARB_Z_Z(texture);
}
alias glActiveVaryingNV = glActiveVaryingNV_Z_Z;
__gshared glActiveVaryingNV_Z_Z = function void (GLuint program, const(GLchar)* name) { glActiveVaryingNV_Z_Z_loader(program, name); };
private void glActiveVaryingNV_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glActiveVaryingNV_Z_Z = glbindGetProcAddress(`glActiveVaryingNV`);
  if (*cast(void**)&glActiveVaryingNV_Z_Z is null) assert(0, `OpenGL function 'glActiveVaryingNV' not found!`);
  glActiveVaryingNV_Z_Z(program, name);
}
alias glAlphaFragmentOp1ATI = glAlphaFragmentOp1ATI_Z_Z;
__gshared glAlphaFragmentOp1ATI_Z_Z = function void (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { glAlphaFragmentOp1ATI_Z_Z_loader(op, dst, dstMod, arg1, arg1Rep, arg1Mod); };
private void glAlphaFragmentOp1ATI_Z_Z_loader (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  *cast(void**)&glAlphaFragmentOp1ATI_Z_Z = glbindGetProcAddress(`glAlphaFragmentOp1ATI`);
  if (*cast(void**)&glAlphaFragmentOp1ATI_Z_Z is null) assert(0, `OpenGL function 'glAlphaFragmentOp1ATI' not found!`);
  glAlphaFragmentOp1ATI_Z_Z(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}
alias glAlphaFragmentOp2ATI = glAlphaFragmentOp2ATI_Z_Z;
__gshared glAlphaFragmentOp2ATI_Z_Z = function void (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { glAlphaFragmentOp2ATI_Z_Z_loader(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); };
private void glAlphaFragmentOp2ATI_Z_Z_loader (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  *cast(void**)&glAlphaFragmentOp2ATI_Z_Z = glbindGetProcAddress(`glAlphaFragmentOp2ATI`);
  if (*cast(void**)&glAlphaFragmentOp2ATI_Z_Z is null) assert(0, `OpenGL function 'glAlphaFragmentOp2ATI' not found!`);
  glAlphaFragmentOp2ATI_Z_Z(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}
alias glAlphaFragmentOp3ATI = glAlphaFragmentOp3ATI_Z_Z;
__gshared glAlphaFragmentOp3ATI_Z_Z = function void (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { glAlphaFragmentOp3ATI_Z_Z_loader(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); };
private void glAlphaFragmentOp3ATI_Z_Z_loader (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  *cast(void**)&glAlphaFragmentOp3ATI_Z_Z = glbindGetProcAddress(`glAlphaFragmentOp3ATI`);
  if (*cast(void**)&glAlphaFragmentOp3ATI_Z_Z is null) assert(0, `OpenGL function 'glAlphaFragmentOp3ATI' not found!`);
  glAlphaFragmentOp3ATI_Z_Z(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}
alias glAlphaFunc = glAlphaFunc_Z_Z;
__gshared glAlphaFunc_Z_Z = function void (GLenum func, GLfloat ref_) { glAlphaFunc_Z_Z_loader(func, ref_); };
private void glAlphaFunc_Z_Z_loader (GLenum func, GLfloat ref_) {
  *cast(void**)&glAlphaFunc_Z_Z = glbindGetProcAddress(`glAlphaFunc`);
  if (*cast(void**)&glAlphaFunc_Z_Z is null) assert(0, `OpenGL function 'glAlphaFunc' not found!`);
  glAlphaFunc_Z_Z(func, ref_);
}
alias glAlphaFuncQCOM = glAlphaFuncQCOM_Z_Z;
__gshared glAlphaFuncQCOM_Z_Z = function void (GLenum func, GLclampf ref_) { glAlphaFuncQCOM_Z_Z_loader(func, ref_); };
private void glAlphaFuncQCOM_Z_Z_loader (GLenum func, GLclampf ref_) {
  *cast(void**)&glAlphaFuncQCOM_Z_Z = glbindGetProcAddress(`glAlphaFuncQCOM`);
  if (*cast(void**)&glAlphaFuncQCOM_Z_Z is null) assert(0, `OpenGL function 'glAlphaFuncQCOM' not found!`);
  glAlphaFuncQCOM_Z_Z(func, ref_);
}
alias glAlphaFuncx = glAlphaFuncx_Z_Z;
__gshared glAlphaFuncx_Z_Z = function void (GLenum func, GLfixed ref_) { glAlphaFuncx_Z_Z_loader(func, ref_); };
private void glAlphaFuncx_Z_Z_loader (GLenum func, GLfixed ref_) {
  *cast(void**)&glAlphaFuncx_Z_Z = glbindGetProcAddress(`glAlphaFuncx`);
  if (*cast(void**)&glAlphaFuncx_Z_Z is null) assert(0, `OpenGL function 'glAlphaFuncx' not found!`);
  glAlphaFuncx_Z_Z(func, ref_);
}
alias glAlphaFuncxOES = glAlphaFuncxOES_Z_Z;
__gshared glAlphaFuncxOES_Z_Z = function void (GLenum func, GLfixed ref_) { glAlphaFuncxOES_Z_Z_loader(func, ref_); };
private void glAlphaFuncxOES_Z_Z_loader (GLenum func, GLfixed ref_) {
  *cast(void**)&glAlphaFuncxOES_Z_Z = glbindGetProcAddress(`glAlphaFuncxOES`);
  if (*cast(void**)&glAlphaFuncxOES_Z_Z is null) assert(0, `OpenGL function 'glAlphaFuncxOES' not found!`);
  glAlphaFuncxOES_Z_Z(func, ref_);
}
alias glAlphaToCoverageDitherControlNV = glAlphaToCoverageDitherControlNV_Z_Z;
__gshared glAlphaToCoverageDitherControlNV_Z_Z = function void (GLenum mode) { glAlphaToCoverageDitherControlNV_Z_Z_loader(mode); };
private void glAlphaToCoverageDitherControlNV_Z_Z_loader (GLenum mode) {
  *cast(void**)&glAlphaToCoverageDitherControlNV_Z_Z = glbindGetProcAddress(`glAlphaToCoverageDitherControlNV`);
  if (*cast(void**)&glAlphaToCoverageDitherControlNV_Z_Z is null) assert(0, `OpenGL function 'glAlphaToCoverageDitherControlNV' not found!`);
  glAlphaToCoverageDitherControlNV_Z_Z(mode);
}
alias glApplyFramebufferAttachmentCMAAINTEL = glApplyFramebufferAttachmentCMAAINTEL_Z_Z;
__gshared glApplyFramebufferAttachmentCMAAINTEL_Z_Z = function void () { glApplyFramebufferAttachmentCMAAINTEL_Z_Z_loader(); };
private void glApplyFramebufferAttachmentCMAAINTEL_Z_Z_loader () {
  *cast(void**)&glApplyFramebufferAttachmentCMAAINTEL_Z_Z = glbindGetProcAddress(`glApplyFramebufferAttachmentCMAAINTEL`);
  if (*cast(void**)&glApplyFramebufferAttachmentCMAAINTEL_Z_Z is null) assert(0, `OpenGL function 'glApplyFramebufferAttachmentCMAAINTEL' not found!`);
  glApplyFramebufferAttachmentCMAAINTEL_Z_Z();
}
alias glApplyTextureEXT = glApplyTextureEXT_Z_Z;
__gshared glApplyTextureEXT_Z_Z = function void (GLenum mode) { glApplyTextureEXT_Z_Z_loader(mode); };
private void glApplyTextureEXT_Z_Z_loader (GLenum mode) {
  *cast(void**)&glApplyTextureEXT_Z_Z = glbindGetProcAddress(`glApplyTextureEXT`);
  if (*cast(void**)&glApplyTextureEXT_Z_Z is null) assert(0, `OpenGL function 'glApplyTextureEXT' not found!`);
  glApplyTextureEXT_Z_Z(mode);
}
alias glAcquireKeyedMutexWin32EXT = glAcquireKeyedMutexWin32EXT_Z_Z;
__gshared glAcquireKeyedMutexWin32EXT_Z_Z = function GLboolean (GLuint memory, GLuint64 key, GLuint timeout) { return glAcquireKeyedMutexWin32EXT_Z_Z_loader(memory, key, timeout); };
private GLboolean glAcquireKeyedMutexWin32EXT_Z_Z_loader (GLuint memory, GLuint64 key, GLuint timeout) {
  *cast(void**)&glAcquireKeyedMutexWin32EXT_Z_Z = glbindGetProcAddress(`glAcquireKeyedMutexWin32EXT`);
  if (*cast(void**)&glAcquireKeyedMutexWin32EXT_Z_Z is null) assert(0, `OpenGL function 'glAcquireKeyedMutexWin32EXT' not found!`);
  return glAcquireKeyedMutexWin32EXT_Z_Z(memory, key, timeout);
}
alias glAreProgramsResidentNV = glAreProgramsResidentNV_Z_Z;
__gshared glAreProgramsResidentNV_Z_Z = function GLboolean (GLsizei n, const(GLuint)* programs, GLboolean *residences) { return glAreProgramsResidentNV_Z_Z_loader(n, programs, residences); };
private GLboolean glAreProgramsResidentNV_Z_Z_loader (GLsizei n, const(GLuint)* programs, GLboolean *residences) {
  *cast(void**)&glAreProgramsResidentNV_Z_Z = glbindGetProcAddress(`glAreProgramsResidentNV`);
  if (*cast(void**)&glAreProgramsResidentNV_Z_Z is null) assert(0, `OpenGL function 'glAreProgramsResidentNV' not found!`);
  return glAreProgramsResidentNV_Z_Z(n, programs, residences);
}
alias glAreTexturesResident = glAreTexturesResident_Z_Z;
__gshared glAreTexturesResident_Z_Z = function GLboolean (GLsizei n, const(GLuint)* textures, GLboolean *residences) { return glAreTexturesResident_Z_Z_loader(n, textures, residences); };
private GLboolean glAreTexturesResident_Z_Z_loader (GLsizei n, const(GLuint)* textures, GLboolean *residences) {
  *cast(void**)&glAreTexturesResident_Z_Z = glbindGetProcAddress(`glAreTexturesResident`);
  if (*cast(void**)&glAreTexturesResident_Z_Z is null) assert(0, `OpenGL function 'glAreTexturesResident' not found!`);
  return glAreTexturesResident_Z_Z(n, textures, residences);
}
alias glAreTexturesResidentEXT = glAreTexturesResidentEXT_Z_Z;
__gshared glAreTexturesResidentEXT_Z_Z = function GLboolean (GLsizei n, const(GLuint)* textures, GLboolean *residences) { return glAreTexturesResidentEXT_Z_Z_loader(n, textures, residences); };
private GLboolean glAreTexturesResidentEXT_Z_Z_loader (GLsizei n, const(GLuint)* textures, GLboolean *residences) {
  *cast(void**)&glAreTexturesResidentEXT_Z_Z = glbindGetProcAddress(`glAreTexturesResidentEXT`);
  if (*cast(void**)&glAreTexturesResidentEXT_Z_Z is null) assert(0, `OpenGL function 'glAreTexturesResidentEXT' not found!`);
  return glAreTexturesResidentEXT_Z_Z(n, textures, residences);
}
alias glArrayElement = glArrayElement_Z_Z;
__gshared glArrayElement_Z_Z = function void (GLint i) { glArrayElement_Z_Z_loader(i); };
private void glArrayElement_Z_Z_loader (GLint i) {
  *cast(void**)&glArrayElement_Z_Z = glbindGetProcAddress(`glArrayElement`);
  if (*cast(void**)&glArrayElement_Z_Z is null) assert(0, `OpenGL function 'glArrayElement' not found!`);
  glArrayElement_Z_Z(i);
}
alias glArrayElementEXT = glArrayElementEXT_Z_Z;
__gshared glArrayElementEXT_Z_Z = function void (GLint i) { glArrayElementEXT_Z_Z_loader(i); };
private void glArrayElementEXT_Z_Z_loader (GLint i) {
  *cast(void**)&glArrayElementEXT_Z_Z = glbindGetProcAddress(`glArrayElementEXT`);
  if (*cast(void**)&glArrayElementEXT_Z_Z is null) assert(0, `OpenGL function 'glArrayElementEXT' not found!`);
  glArrayElementEXT_Z_Z(i);
}
alias glArrayObjectATI = glArrayObjectATI_Z_Z;
__gshared glArrayObjectATI_Z_Z = function void (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { glArrayObjectATI_Z_Z_loader(array, size, type, stride, buffer, offset); };
private void glArrayObjectATI_Z_Z_loader (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  *cast(void**)&glArrayObjectATI_Z_Z = glbindGetProcAddress(`glArrayObjectATI`);
  if (*cast(void**)&glArrayObjectATI_Z_Z is null) assert(0, `OpenGL function 'glArrayObjectATI' not found!`);
  glArrayObjectATI_Z_Z(array, size, type, stride, buffer, offset);
}
alias glAsyncMarkerSGIX = glAsyncMarkerSGIX_Z_Z;
__gshared glAsyncMarkerSGIX_Z_Z = function void (GLuint marker) { glAsyncMarkerSGIX_Z_Z_loader(marker); };
private void glAsyncMarkerSGIX_Z_Z_loader (GLuint marker) {
  *cast(void**)&glAsyncMarkerSGIX_Z_Z = glbindGetProcAddress(`glAsyncMarkerSGIX`);
  if (*cast(void**)&glAsyncMarkerSGIX_Z_Z is null) assert(0, `OpenGL function 'glAsyncMarkerSGIX' not found!`);
  glAsyncMarkerSGIX_Z_Z(marker);
}
alias glAttachObjectARB = glAttachObjectARB_Z_Z;
__gshared glAttachObjectARB_Z_Z = function void (GLhandleARB containerObj, GLhandleARB obj) { glAttachObjectARB_Z_Z_loader(containerObj, obj); };
private void glAttachObjectARB_Z_Z_loader (GLhandleARB containerObj, GLhandleARB obj) {
  *cast(void**)&glAttachObjectARB_Z_Z = glbindGetProcAddress(`glAttachObjectARB`);
  if (*cast(void**)&glAttachObjectARB_Z_Z is null) assert(0, `OpenGL function 'glAttachObjectARB' not found!`);
  glAttachObjectARB_Z_Z(containerObj, obj);
}
alias glAttachShader = glAttachShader_Z_Z;
__gshared glAttachShader_Z_Z = function void (GLuint program, GLuint shader) { glAttachShader_Z_Z_loader(program, shader); };
private void glAttachShader_Z_Z_loader (GLuint program, GLuint shader) {
  *cast(void**)&glAttachShader_Z_Z = glbindGetProcAddress(`glAttachShader`);
  if (*cast(void**)&glAttachShader_Z_Z is null) assert(0, `OpenGL function 'glAttachShader' not found!`);
  glAttachShader_Z_Z(program, shader);
}
alias glBegin = glBegin_Z_Z;
__gshared glBegin_Z_Z = function void (GLenum mode) { glBegin_Z_Z_loader(mode); };
private void glBegin_Z_Z_loader (GLenum mode) {
  *cast(void**)&glBegin_Z_Z = glbindGetProcAddress(`glBegin`);
  if (*cast(void**)&glBegin_Z_Z is null) assert(0, `OpenGL function 'glBegin' not found!`);
  glBegin_Z_Z(mode);
}
alias glBeginConditionalRender = glBeginConditionalRender_Z_Z;
__gshared glBeginConditionalRender_Z_Z = function void (GLuint id, GLenum mode) { glBeginConditionalRender_Z_Z_loader(id, mode); };
private void glBeginConditionalRender_Z_Z_loader (GLuint id, GLenum mode) {
  *cast(void**)&glBeginConditionalRender_Z_Z = glbindGetProcAddress(`glBeginConditionalRender`);
  if (*cast(void**)&glBeginConditionalRender_Z_Z is null) assert(0, `OpenGL function 'glBeginConditionalRender' not found!`);
  glBeginConditionalRender_Z_Z(id, mode);
}
alias glBeginConditionalRenderNV = glBeginConditionalRenderNV_Z_Z;
__gshared glBeginConditionalRenderNV_Z_Z = function void (GLuint id, GLenum mode) { glBeginConditionalRenderNV_Z_Z_loader(id, mode); };
private void glBeginConditionalRenderNV_Z_Z_loader (GLuint id, GLenum mode) {
  *cast(void**)&glBeginConditionalRenderNV_Z_Z = glbindGetProcAddress(`glBeginConditionalRenderNV`);
  if (*cast(void**)&glBeginConditionalRenderNV_Z_Z is null) assert(0, `OpenGL function 'glBeginConditionalRenderNV' not found!`);
  glBeginConditionalRenderNV_Z_Z(id, mode);
}
alias glBeginConditionalRenderNVX = glBeginConditionalRenderNVX_Z_Z;
__gshared glBeginConditionalRenderNVX_Z_Z = function void (GLuint id) { glBeginConditionalRenderNVX_Z_Z_loader(id); };
private void glBeginConditionalRenderNVX_Z_Z_loader (GLuint id) {
  *cast(void**)&glBeginConditionalRenderNVX_Z_Z = glbindGetProcAddress(`glBeginConditionalRenderNVX`);
  if (*cast(void**)&glBeginConditionalRenderNVX_Z_Z is null) assert(0, `OpenGL function 'glBeginConditionalRenderNVX' not found!`);
  glBeginConditionalRenderNVX_Z_Z(id);
}
alias glBeginFragmentShaderATI = glBeginFragmentShaderATI_Z_Z;
__gshared glBeginFragmentShaderATI_Z_Z = function void () { glBeginFragmentShaderATI_Z_Z_loader(); };
private void glBeginFragmentShaderATI_Z_Z_loader () {
  *cast(void**)&glBeginFragmentShaderATI_Z_Z = glbindGetProcAddress(`glBeginFragmentShaderATI`);
  if (*cast(void**)&glBeginFragmentShaderATI_Z_Z is null) assert(0, `OpenGL function 'glBeginFragmentShaderATI' not found!`);
  glBeginFragmentShaderATI_Z_Z();
}
alias glBeginOcclusionQueryNV = glBeginOcclusionQueryNV_Z_Z;
__gshared glBeginOcclusionQueryNV_Z_Z = function void (GLuint id) { glBeginOcclusionQueryNV_Z_Z_loader(id); };
private void glBeginOcclusionQueryNV_Z_Z_loader (GLuint id) {
  *cast(void**)&glBeginOcclusionQueryNV_Z_Z = glbindGetProcAddress(`glBeginOcclusionQueryNV`);
  if (*cast(void**)&glBeginOcclusionQueryNV_Z_Z is null) assert(0, `OpenGL function 'glBeginOcclusionQueryNV' not found!`);
  glBeginOcclusionQueryNV_Z_Z(id);
}
alias glBeginPerfMonitorAMD = glBeginPerfMonitorAMD_Z_Z;
__gshared glBeginPerfMonitorAMD_Z_Z = function void (GLuint monitor) { glBeginPerfMonitorAMD_Z_Z_loader(monitor); };
private void glBeginPerfMonitorAMD_Z_Z_loader (GLuint monitor) {
  *cast(void**)&glBeginPerfMonitorAMD_Z_Z = glbindGetProcAddress(`glBeginPerfMonitorAMD`);
  if (*cast(void**)&glBeginPerfMonitorAMD_Z_Z is null) assert(0, `OpenGL function 'glBeginPerfMonitorAMD' not found!`);
  glBeginPerfMonitorAMD_Z_Z(monitor);
}
alias glBeginPerfQueryINTEL = glBeginPerfQueryINTEL_Z_Z;
__gshared glBeginPerfQueryINTEL_Z_Z = function void (GLuint queryHandle) { glBeginPerfQueryINTEL_Z_Z_loader(queryHandle); };
private void glBeginPerfQueryINTEL_Z_Z_loader (GLuint queryHandle) {
  *cast(void**)&glBeginPerfQueryINTEL_Z_Z = glbindGetProcAddress(`glBeginPerfQueryINTEL`);
  if (*cast(void**)&glBeginPerfQueryINTEL_Z_Z is null) assert(0, `OpenGL function 'glBeginPerfQueryINTEL' not found!`);
  glBeginPerfQueryINTEL_Z_Z(queryHandle);
}
alias glBeginQuery = glBeginQuery_Z_Z;
__gshared glBeginQuery_Z_Z = function void (GLenum target, GLuint id) { glBeginQuery_Z_Z_loader(target, id); };
private void glBeginQuery_Z_Z_loader (GLenum target, GLuint id) {
  *cast(void**)&glBeginQuery_Z_Z = glbindGetProcAddress(`glBeginQuery`);
  if (*cast(void**)&glBeginQuery_Z_Z is null) assert(0, `OpenGL function 'glBeginQuery' not found!`);
  glBeginQuery_Z_Z(target, id);
}
alias glBeginQueryARB = glBeginQueryARB_Z_Z;
__gshared glBeginQueryARB_Z_Z = function void (GLenum target, GLuint id) { glBeginQueryARB_Z_Z_loader(target, id); };
private void glBeginQueryARB_Z_Z_loader (GLenum target, GLuint id) {
  *cast(void**)&glBeginQueryARB_Z_Z = glbindGetProcAddress(`glBeginQueryARB`);
  if (*cast(void**)&glBeginQueryARB_Z_Z is null) assert(0, `OpenGL function 'glBeginQueryARB' not found!`);
  glBeginQueryARB_Z_Z(target, id);
}
alias glBeginQueryEXT = glBeginQueryEXT_Z_Z;
__gshared glBeginQueryEXT_Z_Z = function void (GLenum target, GLuint id) { glBeginQueryEXT_Z_Z_loader(target, id); };
private void glBeginQueryEXT_Z_Z_loader (GLenum target, GLuint id) {
  *cast(void**)&glBeginQueryEXT_Z_Z = glbindGetProcAddress(`glBeginQueryEXT`);
  if (*cast(void**)&glBeginQueryEXT_Z_Z is null) assert(0, `OpenGL function 'glBeginQueryEXT' not found!`);
  glBeginQueryEXT_Z_Z(target, id);
}
alias glBeginQueryIndexed = glBeginQueryIndexed_Z_Z;
__gshared glBeginQueryIndexed_Z_Z = function void (GLenum target, GLuint index, GLuint id) { glBeginQueryIndexed_Z_Z_loader(target, index, id); };
private void glBeginQueryIndexed_Z_Z_loader (GLenum target, GLuint index, GLuint id) {
  *cast(void**)&glBeginQueryIndexed_Z_Z = glbindGetProcAddress(`glBeginQueryIndexed`);
  if (*cast(void**)&glBeginQueryIndexed_Z_Z is null) assert(0, `OpenGL function 'glBeginQueryIndexed' not found!`);
  glBeginQueryIndexed_Z_Z(target, index, id);
}
alias glBeginTransformFeedback = glBeginTransformFeedback_Z_Z;
__gshared glBeginTransformFeedback_Z_Z = function void (GLenum primitiveMode) { glBeginTransformFeedback_Z_Z_loader(primitiveMode); };
private void glBeginTransformFeedback_Z_Z_loader (GLenum primitiveMode) {
  *cast(void**)&glBeginTransformFeedback_Z_Z = glbindGetProcAddress(`glBeginTransformFeedback`);
  if (*cast(void**)&glBeginTransformFeedback_Z_Z is null) assert(0, `OpenGL function 'glBeginTransformFeedback' not found!`);
  glBeginTransformFeedback_Z_Z(primitiveMode);
}
alias glBeginTransformFeedbackEXT = glBeginTransformFeedbackEXT_Z_Z;
__gshared glBeginTransformFeedbackEXT_Z_Z = function void (GLenum primitiveMode) { glBeginTransformFeedbackEXT_Z_Z_loader(primitiveMode); };
private void glBeginTransformFeedbackEXT_Z_Z_loader (GLenum primitiveMode) {
  *cast(void**)&glBeginTransformFeedbackEXT_Z_Z = glbindGetProcAddress(`glBeginTransformFeedbackEXT`);
  if (*cast(void**)&glBeginTransformFeedbackEXT_Z_Z is null) assert(0, `OpenGL function 'glBeginTransformFeedbackEXT' not found!`);
  glBeginTransformFeedbackEXT_Z_Z(primitiveMode);
}
alias glBeginTransformFeedbackNV = glBeginTransformFeedbackNV_Z_Z;
__gshared glBeginTransformFeedbackNV_Z_Z = function void (GLenum primitiveMode) { glBeginTransformFeedbackNV_Z_Z_loader(primitiveMode); };
private void glBeginTransformFeedbackNV_Z_Z_loader (GLenum primitiveMode) {
  *cast(void**)&glBeginTransformFeedbackNV_Z_Z = glbindGetProcAddress(`glBeginTransformFeedbackNV`);
  if (*cast(void**)&glBeginTransformFeedbackNV_Z_Z is null) assert(0, `OpenGL function 'glBeginTransformFeedbackNV' not found!`);
  glBeginTransformFeedbackNV_Z_Z(primitiveMode);
}
alias glBeginVertexShaderEXT = glBeginVertexShaderEXT_Z_Z;
__gshared glBeginVertexShaderEXT_Z_Z = function void () { glBeginVertexShaderEXT_Z_Z_loader(); };
private void glBeginVertexShaderEXT_Z_Z_loader () {
  *cast(void**)&glBeginVertexShaderEXT_Z_Z = glbindGetProcAddress(`glBeginVertexShaderEXT`);
  if (*cast(void**)&glBeginVertexShaderEXT_Z_Z is null) assert(0, `OpenGL function 'glBeginVertexShaderEXT' not found!`);
  glBeginVertexShaderEXT_Z_Z();
}
alias glBeginVideoCaptureNV = glBeginVideoCaptureNV_Z_Z;
__gshared glBeginVideoCaptureNV_Z_Z = function void (GLuint video_capture_slot) { glBeginVideoCaptureNV_Z_Z_loader(video_capture_slot); };
private void glBeginVideoCaptureNV_Z_Z_loader (GLuint video_capture_slot) {
  *cast(void**)&glBeginVideoCaptureNV_Z_Z = glbindGetProcAddress(`glBeginVideoCaptureNV`);
  if (*cast(void**)&glBeginVideoCaptureNV_Z_Z is null) assert(0, `OpenGL function 'glBeginVideoCaptureNV' not found!`);
  glBeginVideoCaptureNV_Z_Z(video_capture_slot);
}
alias glBindAttribLocation = glBindAttribLocation_Z_Z;
__gshared glBindAttribLocation_Z_Z = function void (GLuint program, GLuint index, const(GLchar)* name) { glBindAttribLocation_Z_Z_loader(program, index, name); };
private void glBindAttribLocation_Z_Z_loader (GLuint program, GLuint index, const(GLchar)* name) {
  *cast(void**)&glBindAttribLocation_Z_Z = glbindGetProcAddress(`glBindAttribLocation`);
  if (*cast(void**)&glBindAttribLocation_Z_Z is null) assert(0, `OpenGL function 'glBindAttribLocation' not found!`);
  glBindAttribLocation_Z_Z(program, index, name);
}
alias glBindAttribLocationARB = glBindAttribLocationARB_Z_Z;
__gshared glBindAttribLocationARB_Z_Z = function void (GLhandleARB programObj, GLuint index, const(GLcharARB)* name) { glBindAttribLocationARB_Z_Z_loader(programObj, index, name); };
private void glBindAttribLocationARB_Z_Z_loader (GLhandleARB programObj, GLuint index, const(GLcharARB)* name) {
  *cast(void**)&glBindAttribLocationARB_Z_Z = glbindGetProcAddress(`glBindAttribLocationARB`);
  if (*cast(void**)&glBindAttribLocationARB_Z_Z is null) assert(0, `OpenGL function 'glBindAttribLocationARB' not found!`);
  glBindAttribLocationARB_Z_Z(programObj, index, name);
}
alias glBindBuffer = glBindBuffer_Z_Z;
__gshared glBindBuffer_Z_Z = function void (GLenum target, GLuint buffer) { glBindBuffer_Z_Z_loader(target, buffer); };
private void glBindBuffer_Z_Z_loader (GLenum target, GLuint buffer) {
  *cast(void**)&glBindBuffer_Z_Z = glbindGetProcAddress(`glBindBuffer`);
  if (*cast(void**)&glBindBuffer_Z_Z is null) assert(0, `OpenGL function 'glBindBuffer' not found!`);
  glBindBuffer_Z_Z(target, buffer);
}
alias glBindBufferARB = glBindBufferARB_Z_Z;
__gshared glBindBufferARB_Z_Z = function void (GLenum target, GLuint buffer) { glBindBufferARB_Z_Z_loader(target, buffer); };
private void glBindBufferARB_Z_Z_loader (GLenum target, GLuint buffer) {
  *cast(void**)&glBindBufferARB_Z_Z = glbindGetProcAddress(`glBindBufferARB`);
  if (*cast(void**)&glBindBufferARB_Z_Z is null) assert(0, `OpenGL function 'glBindBufferARB' not found!`);
  glBindBufferARB_Z_Z(target, buffer);
}
alias glBindBufferBase = glBindBufferBase_Z_Z;
__gshared glBindBufferBase_Z_Z = function void (GLenum target, GLuint index, GLuint buffer) { glBindBufferBase_Z_Z_loader(target, index, buffer); };
private void glBindBufferBase_Z_Z_loader (GLenum target, GLuint index, GLuint buffer) {
  *cast(void**)&glBindBufferBase_Z_Z = glbindGetProcAddress(`glBindBufferBase`);
  if (*cast(void**)&glBindBufferBase_Z_Z is null) assert(0, `OpenGL function 'glBindBufferBase' not found!`);
  glBindBufferBase_Z_Z(target, index, buffer);
}
alias glBindBufferBaseEXT = glBindBufferBaseEXT_Z_Z;
__gshared glBindBufferBaseEXT_Z_Z = function void (GLenum target, GLuint index, GLuint buffer) { glBindBufferBaseEXT_Z_Z_loader(target, index, buffer); };
private void glBindBufferBaseEXT_Z_Z_loader (GLenum target, GLuint index, GLuint buffer) {
  *cast(void**)&glBindBufferBaseEXT_Z_Z = glbindGetProcAddress(`glBindBufferBaseEXT`);
  if (*cast(void**)&glBindBufferBaseEXT_Z_Z is null) assert(0, `OpenGL function 'glBindBufferBaseEXT' not found!`);
  glBindBufferBaseEXT_Z_Z(target, index, buffer);
}
alias glBindBufferBaseNV = glBindBufferBaseNV_Z_Z;
__gshared glBindBufferBaseNV_Z_Z = function void (GLenum target, GLuint index, GLuint buffer) { glBindBufferBaseNV_Z_Z_loader(target, index, buffer); };
private void glBindBufferBaseNV_Z_Z_loader (GLenum target, GLuint index, GLuint buffer) {
  *cast(void**)&glBindBufferBaseNV_Z_Z = glbindGetProcAddress(`glBindBufferBaseNV`);
  if (*cast(void**)&glBindBufferBaseNV_Z_Z is null) assert(0, `OpenGL function 'glBindBufferBaseNV' not found!`);
  glBindBufferBaseNV_Z_Z(target, index, buffer);
}
alias glBindBufferOffsetEXT = glBindBufferOffsetEXT_Z_Z;
__gshared glBindBufferOffsetEXT_Z_Z = function void (GLenum target, GLuint index, GLuint buffer, GLintptr offset) { glBindBufferOffsetEXT_Z_Z_loader(target, index, buffer, offset); };
private void glBindBufferOffsetEXT_Z_Z_loader (GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  *cast(void**)&glBindBufferOffsetEXT_Z_Z = glbindGetProcAddress(`glBindBufferOffsetEXT`);
  if (*cast(void**)&glBindBufferOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glBindBufferOffsetEXT' not found!`);
  glBindBufferOffsetEXT_Z_Z(target, index, buffer, offset);
}
alias glBindBufferOffsetNV = glBindBufferOffsetNV_Z_Z;
__gshared glBindBufferOffsetNV_Z_Z = function void (GLenum target, GLuint index, GLuint buffer, GLintptr offset) { glBindBufferOffsetNV_Z_Z_loader(target, index, buffer, offset); };
private void glBindBufferOffsetNV_Z_Z_loader (GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  *cast(void**)&glBindBufferOffsetNV_Z_Z = glbindGetProcAddress(`glBindBufferOffsetNV`);
  if (*cast(void**)&glBindBufferOffsetNV_Z_Z is null) assert(0, `OpenGL function 'glBindBufferOffsetNV' not found!`);
  glBindBufferOffsetNV_Z_Z(target, index, buffer, offset);
}
alias glBindBufferRange = glBindBufferRange_Z_Z;
__gshared glBindBufferRange_Z_Z = function void (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { glBindBufferRange_Z_Z_loader(target, index, buffer, offset, size); };
private void glBindBufferRange_Z_Z_loader (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glBindBufferRange_Z_Z = glbindGetProcAddress(`glBindBufferRange`);
  if (*cast(void**)&glBindBufferRange_Z_Z is null) assert(0, `OpenGL function 'glBindBufferRange' not found!`);
  glBindBufferRange_Z_Z(target, index, buffer, offset, size);
}
alias glBindBufferRangeEXT = glBindBufferRangeEXT_Z_Z;
__gshared glBindBufferRangeEXT_Z_Z = function void (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { glBindBufferRangeEXT_Z_Z_loader(target, index, buffer, offset, size); };
private void glBindBufferRangeEXT_Z_Z_loader (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glBindBufferRangeEXT_Z_Z = glbindGetProcAddress(`glBindBufferRangeEXT`);
  if (*cast(void**)&glBindBufferRangeEXT_Z_Z is null) assert(0, `OpenGL function 'glBindBufferRangeEXT' not found!`);
  glBindBufferRangeEXT_Z_Z(target, index, buffer, offset, size);
}
alias glBindBufferRangeNV = glBindBufferRangeNV_Z_Z;
__gshared glBindBufferRangeNV_Z_Z = function void (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { glBindBufferRangeNV_Z_Z_loader(target, index, buffer, offset, size); };
private void glBindBufferRangeNV_Z_Z_loader (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glBindBufferRangeNV_Z_Z = glbindGetProcAddress(`glBindBufferRangeNV`);
  if (*cast(void**)&glBindBufferRangeNV_Z_Z is null) assert(0, `OpenGL function 'glBindBufferRangeNV' not found!`);
  glBindBufferRangeNV_Z_Z(target, index, buffer, offset, size);
}
alias glBindBuffersBase = glBindBuffersBase_Z_Z;
__gshared glBindBuffersBase_Z_Z = function void (GLenum target, GLuint first, GLsizei count, const(GLuint)* buffers) { glBindBuffersBase_Z_Z_loader(target, first, count, buffers); };
private void glBindBuffersBase_Z_Z_loader (GLenum target, GLuint first, GLsizei count, const(GLuint)* buffers) {
  *cast(void**)&glBindBuffersBase_Z_Z = glbindGetProcAddress(`glBindBuffersBase`);
  if (*cast(void**)&glBindBuffersBase_Z_Z is null) assert(0, `OpenGL function 'glBindBuffersBase' not found!`);
  glBindBuffersBase_Z_Z(target, first, count, buffers);
}
alias glBindBuffersRange = glBindBuffersRange_Z_Z;
__gshared glBindBuffersRange_Z_Z = function void (GLenum target, GLuint first, GLsizei count, const(GLuint)* buffers, const(GLintptr)* offsets, const(GLsizeiptr)* sizes) { glBindBuffersRange_Z_Z_loader(target, first, count, buffers, offsets, sizes); };
private void glBindBuffersRange_Z_Z_loader (GLenum target, GLuint first, GLsizei count, const(GLuint)* buffers, const(GLintptr)* offsets, const(GLsizeiptr)* sizes) {
  *cast(void**)&glBindBuffersRange_Z_Z = glbindGetProcAddress(`glBindBuffersRange`);
  if (*cast(void**)&glBindBuffersRange_Z_Z is null) assert(0, `OpenGL function 'glBindBuffersRange' not found!`);
  glBindBuffersRange_Z_Z(target, first, count, buffers, offsets, sizes);
}
alias glBindFragDataLocation = glBindFragDataLocation_Z_Z;
__gshared glBindFragDataLocation_Z_Z = function void (GLuint program, GLuint color, const(GLchar)* name) { glBindFragDataLocation_Z_Z_loader(program, color, name); };
private void glBindFragDataLocation_Z_Z_loader (GLuint program, GLuint color, const(GLchar)* name) {
  *cast(void**)&glBindFragDataLocation_Z_Z = glbindGetProcAddress(`glBindFragDataLocation`);
  if (*cast(void**)&glBindFragDataLocation_Z_Z is null) assert(0, `OpenGL function 'glBindFragDataLocation' not found!`);
  glBindFragDataLocation_Z_Z(program, color, name);
}
alias glBindFragDataLocationEXT = glBindFragDataLocationEXT_Z_Z;
__gshared glBindFragDataLocationEXT_Z_Z = function void (GLuint program, GLuint color, const(GLchar)* name) { glBindFragDataLocationEXT_Z_Z_loader(program, color, name); };
private void glBindFragDataLocationEXT_Z_Z_loader (GLuint program, GLuint color, const(GLchar)* name) {
  *cast(void**)&glBindFragDataLocationEXT_Z_Z = glbindGetProcAddress(`glBindFragDataLocationEXT`);
  if (*cast(void**)&glBindFragDataLocationEXT_Z_Z is null) assert(0, `OpenGL function 'glBindFragDataLocationEXT' not found!`);
  glBindFragDataLocationEXT_Z_Z(program, color, name);
}
alias glBindFragDataLocationIndexed = glBindFragDataLocationIndexed_Z_Z;
__gshared glBindFragDataLocationIndexed_Z_Z = function void (GLuint program, GLuint colorNumber, GLuint index, const(GLchar)* name) { glBindFragDataLocationIndexed_Z_Z_loader(program, colorNumber, index, name); };
private void glBindFragDataLocationIndexed_Z_Z_loader (GLuint program, GLuint colorNumber, GLuint index, const(GLchar)* name) {
  *cast(void**)&glBindFragDataLocationIndexed_Z_Z = glbindGetProcAddress(`glBindFragDataLocationIndexed`);
  if (*cast(void**)&glBindFragDataLocationIndexed_Z_Z is null) assert(0, `OpenGL function 'glBindFragDataLocationIndexed' not found!`);
  glBindFragDataLocationIndexed_Z_Z(program, colorNumber, index, name);
}
alias glBindFragDataLocationIndexedEXT = glBindFragDataLocationIndexedEXT_Z_Z;
__gshared glBindFragDataLocationIndexedEXT_Z_Z = function void (GLuint program, GLuint colorNumber, GLuint index, const(GLchar)* name) { glBindFragDataLocationIndexedEXT_Z_Z_loader(program, colorNumber, index, name); };
private void glBindFragDataLocationIndexedEXT_Z_Z_loader (GLuint program, GLuint colorNumber, GLuint index, const(GLchar)* name) {
  *cast(void**)&glBindFragDataLocationIndexedEXT_Z_Z = glbindGetProcAddress(`glBindFragDataLocationIndexedEXT`);
  if (*cast(void**)&glBindFragDataLocationIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glBindFragDataLocationIndexedEXT' not found!`);
  glBindFragDataLocationIndexedEXT_Z_Z(program, colorNumber, index, name);
}
alias glBindFragmentShaderATI = glBindFragmentShaderATI_Z_Z;
__gshared glBindFragmentShaderATI_Z_Z = function void (GLuint id) { glBindFragmentShaderATI_Z_Z_loader(id); };
private void glBindFragmentShaderATI_Z_Z_loader (GLuint id) {
  *cast(void**)&glBindFragmentShaderATI_Z_Z = glbindGetProcAddress(`glBindFragmentShaderATI`);
  if (*cast(void**)&glBindFragmentShaderATI_Z_Z is null) assert(0, `OpenGL function 'glBindFragmentShaderATI' not found!`);
  glBindFragmentShaderATI_Z_Z(id);
}
alias glBindFramebuffer = glBindFramebuffer_Z_Z;
__gshared glBindFramebuffer_Z_Z = function void (GLenum target, GLuint framebuffer) { glBindFramebuffer_Z_Z_loader(target, framebuffer); };
private void glBindFramebuffer_Z_Z_loader (GLenum target, GLuint framebuffer) {
  *cast(void**)&glBindFramebuffer_Z_Z = glbindGetProcAddress(`glBindFramebuffer`);
  if (*cast(void**)&glBindFramebuffer_Z_Z is null) assert(0, `OpenGL function 'glBindFramebuffer' not found!`);
  glBindFramebuffer_Z_Z(target, framebuffer);
}
alias glBindFramebufferEXT = glBindFramebufferEXT_Z_Z;
__gshared glBindFramebufferEXT_Z_Z = function void (GLenum target, GLuint framebuffer) { glBindFramebufferEXT_Z_Z_loader(target, framebuffer); };
private void glBindFramebufferEXT_Z_Z_loader (GLenum target, GLuint framebuffer) {
  *cast(void**)&glBindFramebufferEXT_Z_Z = glbindGetProcAddress(`glBindFramebufferEXT`);
  if (*cast(void**)&glBindFramebufferEXT_Z_Z is null) assert(0, `OpenGL function 'glBindFramebufferEXT' not found!`);
  glBindFramebufferEXT_Z_Z(target, framebuffer);
}
alias glBindFramebufferOES = glBindFramebufferOES_Z_Z;
__gshared glBindFramebufferOES_Z_Z = function void (GLenum target, GLuint framebuffer) { glBindFramebufferOES_Z_Z_loader(target, framebuffer); };
private void glBindFramebufferOES_Z_Z_loader (GLenum target, GLuint framebuffer) {
  *cast(void**)&glBindFramebufferOES_Z_Z = glbindGetProcAddress(`glBindFramebufferOES`);
  if (*cast(void**)&glBindFramebufferOES_Z_Z is null) assert(0, `OpenGL function 'glBindFramebufferOES' not found!`);
  glBindFramebufferOES_Z_Z(target, framebuffer);
}
alias glBindImageTexture = glBindImageTexture_Z_Z;
__gshared glBindImageTexture_Z_Z = function void (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { glBindImageTexture_Z_Z_loader(unit, texture, level, layered, layer, access, format); };
private void glBindImageTexture_Z_Z_loader (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  *cast(void**)&glBindImageTexture_Z_Z = glbindGetProcAddress(`glBindImageTexture`);
  if (*cast(void**)&glBindImageTexture_Z_Z is null) assert(0, `OpenGL function 'glBindImageTexture' not found!`);
  glBindImageTexture_Z_Z(unit, texture, level, layered, layer, access, format);
}
alias glBindImageTextureEXT = glBindImageTextureEXT_Z_Z;
__gshared glBindImageTextureEXT_Z_Z = function void (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { glBindImageTextureEXT_Z_Z_loader(index, texture, level, layered, layer, access, format); };
private void glBindImageTextureEXT_Z_Z_loader (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) {
  *cast(void**)&glBindImageTextureEXT_Z_Z = glbindGetProcAddress(`glBindImageTextureEXT`);
  if (*cast(void**)&glBindImageTextureEXT_Z_Z is null) assert(0, `OpenGL function 'glBindImageTextureEXT' not found!`);
  glBindImageTextureEXT_Z_Z(index, texture, level, layered, layer, access, format);
}
alias glBindImageTextures = glBindImageTextures_Z_Z;
__gshared glBindImageTextures_Z_Z = function void (GLuint first, GLsizei count, const(GLuint)* textures) { glBindImageTextures_Z_Z_loader(first, count, textures); };
private void glBindImageTextures_Z_Z_loader (GLuint first, GLsizei count, const(GLuint)* textures) {
  *cast(void**)&glBindImageTextures_Z_Z = glbindGetProcAddress(`glBindImageTextures`);
  if (*cast(void**)&glBindImageTextures_Z_Z is null) assert(0, `OpenGL function 'glBindImageTextures' not found!`);
  glBindImageTextures_Z_Z(first, count, textures);
}
alias glBindLightParameterEXT = glBindLightParameterEXT_Z_Z;
__gshared glBindLightParameterEXT_Z_Z = function GLuint (GLenum light, GLenum value) { return glBindLightParameterEXT_Z_Z_loader(light, value); };
private GLuint glBindLightParameterEXT_Z_Z_loader (GLenum light, GLenum value) {
  *cast(void**)&glBindLightParameterEXT_Z_Z = glbindGetProcAddress(`glBindLightParameterEXT`);
  if (*cast(void**)&glBindLightParameterEXT_Z_Z is null) assert(0, `OpenGL function 'glBindLightParameterEXT' not found!`);
  return glBindLightParameterEXT_Z_Z(light, value);
}
alias glBindMaterialParameterEXT = glBindMaterialParameterEXT_Z_Z;
__gshared glBindMaterialParameterEXT_Z_Z = function GLuint (GLenum face, GLenum value) { return glBindMaterialParameterEXT_Z_Z_loader(face, value); };
private GLuint glBindMaterialParameterEXT_Z_Z_loader (GLenum face, GLenum value) {
  *cast(void**)&glBindMaterialParameterEXT_Z_Z = glbindGetProcAddress(`glBindMaterialParameterEXT`);
  if (*cast(void**)&glBindMaterialParameterEXT_Z_Z is null) assert(0, `OpenGL function 'glBindMaterialParameterEXT' not found!`);
  return glBindMaterialParameterEXT_Z_Z(face, value);
}
alias glBindMultiTextureEXT = glBindMultiTextureEXT_Z_Z;
__gshared glBindMultiTextureEXT_Z_Z = function void (GLenum texunit, GLenum target, GLuint texture) { glBindMultiTextureEXT_Z_Z_loader(texunit, target, texture); };
private void glBindMultiTextureEXT_Z_Z_loader (GLenum texunit, GLenum target, GLuint texture) {
  *cast(void**)&glBindMultiTextureEXT_Z_Z = glbindGetProcAddress(`glBindMultiTextureEXT`);
  if (*cast(void**)&glBindMultiTextureEXT_Z_Z is null) assert(0, `OpenGL function 'glBindMultiTextureEXT' not found!`);
  glBindMultiTextureEXT_Z_Z(texunit, target, texture);
}
alias glBindParameterEXT = glBindParameterEXT_Z_Z;
__gshared glBindParameterEXT_Z_Z = function GLuint (GLenum value) { return glBindParameterEXT_Z_Z_loader(value); };
private GLuint glBindParameterEXT_Z_Z_loader (GLenum value) {
  *cast(void**)&glBindParameterEXT_Z_Z = glbindGetProcAddress(`glBindParameterEXT`);
  if (*cast(void**)&glBindParameterEXT_Z_Z is null) assert(0, `OpenGL function 'glBindParameterEXT' not found!`);
  return glBindParameterEXT_Z_Z(value);
}
alias glBindProgramARB = glBindProgramARB_Z_Z;
__gshared glBindProgramARB_Z_Z = function void (GLenum target, GLuint program) { glBindProgramARB_Z_Z_loader(target, program); };
private void glBindProgramARB_Z_Z_loader (GLenum target, GLuint program) {
  *cast(void**)&glBindProgramARB_Z_Z = glbindGetProcAddress(`glBindProgramARB`);
  if (*cast(void**)&glBindProgramARB_Z_Z is null) assert(0, `OpenGL function 'glBindProgramARB' not found!`);
  glBindProgramARB_Z_Z(target, program);
}
alias glBindProgramNV = glBindProgramNV_Z_Z;
__gshared glBindProgramNV_Z_Z = function void (GLenum target, GLuint id) { glBindProgramNV_Z_Z_loader(target, id); };
private void glBindProgramNV_Z_Z_loader (GLenum target, GLuint id) {
  *cast(void**)&glBindProgramNV_Z_Z = glbindGetProcAddress(`glBindProgramNV`);
  if (*cast(void**)&glBindProgramNV_Z_Z is null) assert(0, `OpenGL function 'glBindProgramNV' not found!`);
  glBindProgramNV_Z_Z(target, id);
}
alias glBindProgramPipeline = glBindProgramPipeline_Z_Z;
__gshared glBindProgramPipeline_Z_Z = function void (GLuint pipeline) { glBindProgramPipeline_Z_Z_loader(pipeline); };
private void glBindProgramPipeline_Z_Z_loader (GLuint pipeline) {
  *cast(void**)&glBindProgramPipeline_Z_Z = glbindGetProcAddress(`glBindProgramPipeline`);
  if (*cast(void**)&glBindProgramPipeline_Z_Z is null) assert(0, `OpenGL function 'glBindProgramPipeline' not found!`);
  glBindProgramPipeline_Z_Z(pipeline);
}
alias glBindProgramPipelineEXT = glBindProgramPipelineEXT_Z_Z;
__gshared glBindProgramPipelineEXT_Z_Z = function void (GLuint pipeline) { glBindProgramPipelineEXT_Z_Z_loader(pipeline); };
private void glBindProgramPipelineEXT_Z_Z_loader (GLuint pipeline) {
  *cast(void**)&glBindProgramPipelineEXT_Z_Z = glbindGetProcAddress(`glBindProgramPipelineEXT`);
  if (*cast(void**)&glBindProgramPipelineEXT_Z_Z is null) assert(0, `OpenGL function 'glBindProgramPipelineEXT' not found!`);
  glBindProgramPipelineEXT_Z_Z(pipeline);
}
alias glBindRenderbuffer = glBindRenderbuffer_Z_Z;
__gshared glBindRenderbuffer_Z_Z = function void (GLenum target, GLuint renderbuffer) { glBindRenderbuffer_Z_Z_loader(target, renderbuffer); };
private void glBindRenderbuffer_Z_Z_loader (GLenum target, GLuint renderbuffer) {
  *cast(void**)&glBindRenderbuffer_Z_Z = glbindGetProcAddress(`glBindRenderbuffer`);
  if (*cast(void**)&glBindRenderbuffer_Z_Z is null) assert(0, `OpenGL function 'glBindRenderbuffer' not found!`);
  glBindRenderbuffer_Z_Z(target, renderbuffer);
}
alias glBindRenderbufferEXT = glBindRenderbufferEXT_Z_Z;
__gshared glBindRenderbufferEXT_Z_Z = function void (GLenum target, GLuint renderbuffer) { glBindRenderbufferEXT_Z_Z_loader(target, renderbuffer); };
private void glBindRenderbufferEXT_Z_Z_loader (GLenum target, GLuint renderbuffer) {
  *cast(void**)&glBindRenderbufferEXT_Z_Z = glbindGetProcAddress(`glBindRenderbufferEXT`);
  if (*cast(void**)&glBindRenderbufferEXT_Z_Z is null) assert(0, `OpenGL function 'glBindRenderbufferEXT' not found!`);
  glBindRenderbufferEXT_Z_Z(target, renderbuffer);
}
alias glBindRenderbufferOES = glBindRenderbufferOES_Z_Z;
__gshared glBindRenderbufferOES_Z_Z = function void (GLenum target, GLuint renderbuffer) { glBindRenderbufferOES_Z_Z_loader(target, renderbuffer); };
private void glBindRenderbufferOES_Z_Z_loader (GLenum target, GLuint renderbuffer) {
  *cast(void**)&glBindRenderbufferOES_Z_Z = glbindGetProcAddress(`glBindRenderbufferOES`);
  if (*cast(void**)&glBindRenderbufferOES_Z_Z is null) assert(0, `OpenGL function 'glBindRenderbufferOES' not found!`);
  glBindRenderbufferOES_Z_Z(target, renderbuffer);
}
alias glBindSampler = glBindSampler_Z_Z;
__gshared glBindSampler_Z_Z = function void (GLuint unit, GLuint sampler) { glBindSampler_Z_Z_loader(unit, sampler); };
private void glBindSampler_Z_Z_loader (GLuint unit, GLuint sampler) {
  *cast(void**)&glBindSampler_Z_Z = glbindGetProcAddress(`glBindSampler`);
  if (*cast(void**)&glBindSampler_Z_Z is null) assert(0, `OpenGL function 'glBindSampler' not found!`);
  glBindSampler_Z_Z(unit, sampler);
}
alias glBindSamplers = glBindSamplers_Z_Z;
__gshared glBindSamplers_Z_Z = function void (GLuint first, GLsizei count, const(GLuint)* samplers) { glBindSamplers_Z_Z_loader(first, count, samplers); };
private void glBindSamplers_Z_Z_loader (GLuint first, GLsizei count, const(GLuint)* samplers) {
  *cast(void**)&glBindSamplers_Z_Z = glbindGetProcAddress(`glBindSamplers`);
  if (*cast(void**)&glBindSamplers_Z_Z is null) assert(0, `OpenGL function 'glBindSamplers' not found!`);
  glBindSamplers_Z_Z(first, count, samplers);
}
alias glBindTexGenParameterEXT = glBindTexGenParameterEXT_Z_Z;
__gshared glBindTexGenParameterEXT_Z_Z = function GLuint (GLenum unit, GLenum coord, GLenum value) { return glBindTexGenParameterEXT_Z_Z_loader(unit, coord, value); };
private GLuint glBindTexGenParameterEXT_Z_Z_loader (GLenum unit, GLenum coord, GLenum value) {
  *cast(void**)&glBindTexGenParameterEXT_Z_Z = glbindGetProcAddress(`glBindTexGenParameterEXT`);
  if (*cast(void**)&glBindTexGenParameterEXT_Z_Z is null) assert(0, `OpenGL function 'glBindTexGenParameterEXT' not found!`);
  return glBindTexGenParameterEXT_Z_Z(unit, coord, value);
}
alias glBindTexture = glBindTexture_Z_Z;
__gshared glBindTexture_Z_Z = function void (GLenum target, GLuint texture) { glBindTexture_Z_Z_loader(target, texture); };
private void glBindTexture_Z_Z_loader (GLenum target, GLuint texture) {
  *cast(void**)&glBindTexture_Z_Z = glbindGetProcAddress(`glBindTexture`);
  if (*cast(void**)&glBindTexture_Z_Z is null) assert(0, `OpenGL function 'glBindTexture' not found!`);
  glBindTexture_Z_Z(target, texture);
}
alias glBindTextureEXT = glBindTextureEXT_Z_Z;
__gshared glBindTextureEXT_Z_Z = function void (GLenum target, GLuint texture) { glBindTextureEXT_Z_Z_loader(target, texture); };
private void glBindTextureEXT_Z_Z_loader (GLenum target, GLuint texture) {
  *cast(void**)&glBindTextureEXT_Z_Z = glbindGetProcAddress(`glBindTextureEXT`);
  if (*cast(void**)&glBindTextureEXT_Z_Z is null) assert(0, `OpenGL function 'glBindTextureEXT' not found!`);
  glBindTextureEXT_Z_Z(target, texture);
}
alias glBindTextureUnit = glBindTextureUnit_Z_Z;
__gshared glBindTextureUnit_Z_Z = function void (GLuint unit, GLuint texture) { glBindTextureUnit_Z_Z_loader(unit, texture); };
private void glBindTextureUnit_Z_Z_loader (GLuint unit, GLuint texture) {
  *cast(void**)&glBindTextureUnit_Z_Z = glbindGetProcAddress(`glBindTextureUnit`);
  if (*cast(void**)&glBindTextureUnit_Z_Z is null) assert(0, `OpenGL function 'glBindTextureUnit' not found!`);
  glBindTextureUnit_Z_Z(unit, texture);
}
alias glBindTextureUnitParameterEXT = glBindTextureUnitParameterEXT_Z_Z;
__gshared glBindTextureUnitParameterEXT_Z_Z = function GLuint (GLenum unit, GLenum value) { return glBindTextureUnitParameterEXT_Z_Z_loader(unit, value); };
private GLuint glBindTextureUnitParameterEXT_Z_Z_loader (GLenum unit, GLenum value) {
  *cast(void**)&glBindTextureUnitParameterEXT_Z_Z = glbindGetProcAddress(`glBindTextureUnitParameterEXT`);
  if (*cast(void**)&glBindTextureUnitParameterEXT_Z_Z is null) assert(0, `OpenGL function 'glBindTextureUnitParameterEXT' not found!`);
  return glBindTextureUnitParameterEXT_Z_Z(unit, value);
}
alias glBindTextures = glBindTextures_Z_Z;
__gshared glBindTextures_Z_Z = function void (GLuint first, GLsizei count, const(GLuint)* textures) { glBindTextures_Z_Z_loader(first, count, textures); };
private void glBindTextures_Z_Z_loader (GLuint first, GLsizei count, const(GLuint)* textures) {
  *cast(void**)&glBindTextures_Z_Z = glbindGetProcAddress(`glBindTextures`);
  if (*cast(void**)&glBindTextures_Z_Z is null) assert(0, `OpenGL function 'glBindTextures' not found!`);
  glBindTextures_Z_Z(first, count, textures);
}
alias glBindTransformFeedback = glBindTransformFeedback_Z_Z;
__gshared glBindTransformFeedback_Z_Z = function void (GLenum target, GLuint id) { glBindTransformFeedback_Z_Z_loader(target, id); };
private void glBindTransformFeedback_Z_Z_loader (GLenum target, GLuint id) {
  *cast(void**)&glBindTransformFeedback_Z_Z = glbindGetProcAddress(`glBindTransformFeedback`);
  if (*cast(void**)&glBindTransformFeedback_Z_Z is null) assert(0, `OpenGL function 'glBindTransformFeedback' not found!`);
  glBindTransformFeedback_Z_Z(target, id);
}
alias glBindTransformFeedbackNV = glBindTransformFeedbackNV_Z_Z;
__gshared glBindTransformFeedbackNV_Z_Z = function void (GLenum target, GLuint id) { glBindTransformFeedbackNV_Z_Z_loader(target, id); };
private void glBindTransformFeedbackNV_Z_Z_loader (GLenum target, GLuint id) {
  *cast(void**)&glBindTransformFeedbackNV_Z_Z = glbindGetProcAddress(`glBindTransformFeedbackNV`);
  if (*cast(void**)&glBindTransformFeedbackNV_Z_Z is null) assert(0, `OpenGL function 'glBindTransformFeedbackNV' not found!`);
  glBindTransformFeedbackNV_Z_Z(target, id);
}
alias glBindVertexArray = glBindVertexArray_Z_Z;
__gshared glBindVertexArray_Z_Z = function void (GLuint array) { glBindVertexArray_Z_Z_loader(array); };
private void glBindVertexArray_Z_Z_loader (GLuint array) {
  *cast(void**)&glBindVertexArray_Z_Z = glbindGetProcAddress(`glBindVertexArray`);
  if (*cast(void**)&glBindVertexArray_Z_Z is null) assert(0, `OpenGL function 'glBindVertexArray' not found!`);
  glBindVertexArray_Z_Z(array);
}
alias glBindVertexArrayAPPLE = glBindVertexArrayAPPLE_Z_Z;
__gshared glBindVertexArrayAPPLE_Z_Z = function void (GLuint array) { glBindVertexArrayAPPLE_Z_Z_loader(array); };
private void glBindVertexArrayAPPLE_Z_Z_loader (GLuint array) {
  *cast(void**)&glBindVertexArrayAPPLE_Z_Z = glbindGetProcAddress(`glBindVertexArrayAPPLE`);
  if (*cast(void**)&glBindVertexArrayAPPLE_Z_Z is null) assert(0, `OpenGL function 'glBindVertexArrayAPPLE' not found!`);
  glBindVertexArrayAPPLE_Z_Z(array);
}
alias glBindVertexArrayOES = glBindVertexArrayOES_Z_Z;
__gshared glBindVertexArrayOES_Z_Z = function void (GLuint array) { glBindVertexArrayOES_Z_Z_loader(array); };
private void glBindVertexArrayOES_Z_Z_loader (GLuint array) {
  *cast(void**)&glBindVertexArrayOES_Z_Z = glbindGetProcAddress(`glBindVertexArrayOES`);
  if (*cast(void**)&glBindVertexArrayOES_Z_Z is null) assert(0, `OpenGL function 'glBindVertexArrayOES' not found!`);
  glBindVertexArrayOES_Z_Z(array);
}
alias glBindVertexBuffer = glBindVertexBuffer_Z_Z;
__gshared glBindVertexBuffer_Z_Z = function void (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { glBindVertexBuffer_Z_Z_loader(bindingindex, buffer, offset, stride); };
private void glBindVertexBuffer_Z_Z_loader (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  *cast(void**)&glBindVertexBuffer_Z_Z = glbindGetProcAddress(`glBindVertexBuffer`);
  if (*cast(void**)&glBindVertexBuffer_Z_Z is null) assert(0, `OpenGL function 'glBindVertexBuffer' not found!`);
  glBindVertexBuffer_Z_Z(bindingindex, buffer, offset, stride);
}
alias glBindVertexBuffers = glBindVertexBuffers_Z_Z;
__gshared glBindVertexBuffers_Z_Z = function void (GLuint first, GLsizei count, const(GLuint)* buffers, const(GLintptr)* offsets, const(GLsizei)* strides) { glBindVertexBuffers_Z_Z_loader(first, count, buffers, offsets, strides); };
private void glBindVertexBuffers_Z_Z_loader (GLuint first, GLsizei count, const(GLuint)* buffers, const(GLintptr)* offsets, const(GLsizei)* strides) {
  *cast(void**)&glBindVertexBuffers_Z_Z = glbindGetProcAddress(`glBindVertexBuffers`);
  if (*cast(void**)&glBindVertexBuffers_Z_Z is null) assert(0, `OpenGL function 'glBindVertexBuffers' not found!`);
  glBindVertexBuffers_Z_Z(first, count, buffers, offsets, strides);
}
alias glBindVertexShaderEXT = glBindVertexShaderEXT_Z_Z;
__gshared glBindVertexShaderEXT_Z_Z = function void (GLuint id) { glBindVertexShaderEXT_Z_Z_loader(id); };
private void glBindVertexShaderEXT_Z_Z_loader (GLuint id) {
  *cast(void**)&glBindVertexShaderEXT_Z_Z = glbindGetProcAddress(`glBindVertexShaderEXT`);
  if (*cast(void**)&glBindVertexShaderEXT_Z_Z is null) assert(0, `OpenGL function 'glBindVertexShaderEXT' not found!`);
  glBindVertexShaderEXT_Z_Z(id);
}
alias glBindVideoCaptureStreamBufferNV = glBindVideoCaptureStreamBufferNV_Z_Z;
__gshared glBindVideoCaptureStreamBufferNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { glBindVideoCaptureStreamBufferNV_Z_Z_loader(video_capture_slot, stream, frame_region, offset); };
private void glBindVideoCaptureStreamBufferNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) {
  *cast(void**)&glBindVideoCaptureStreamBufferNV_Z_Z = glbindGetProcAddress(`glBindVideoCaptureStreamBufferNV`);
  if (*cast(void**)&glBindVideoCaptureStreamBufferNV_Z_Z is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamBufferNV' not found!`);
  glBindVideoCaptureStreamBufferNV_Z_Z(video_capture_slot, stream, frame_region, offset);
}
alias glBindVideoCaptureStreamTextureNV = glBindVideoCaptureStreamTextureNV_Z_Z;
__gshared glBindVideoCaptureStreamTextureNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { glBindVideoCaptureStreamTextureNV_Z_Z_loader(video_capture_slot, stream, frame_region, target, texture); };
private void glBindVideoCaptureStreamTextureNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {
  *cast(void**)&glBindVideoCaptureStreamTextureNV_Z_Z = glbindGetProcAddress(`glBindVideoCaptureStreamTextureNV`);
  if (*cast(void**)&glBindVideoCaptureStreamTextureNV_Z_Z is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamTextureNV' not found!`);
  glBindVideoCaptureStreamTextureNV_Z_Z(video_capture_slot, stream, frame_region, target, texture);
}
alias glBinormal3bEXT = glBinormal3bEXT_Z_Z;
__gshared glBinormal3bEXT_Z_Z = function void (GLbyte bx, GLbyte by, GLbyte bz) { glBinormal3bEXT_Z_Z_loader(bx, by, bz); };
private void glBinormal3bEXT_Z_Z_loader (GLbyte bx, GLbyte by, GLbyte bz) {
  *cast(void**)&glBinormal3bEXT_Z_Z = glbindGetProcAddress(`glBinormal3bEXT`);
  if (*cast(void**)&glBinormal3bEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3bEXT' not found!`);
  glBinormal3bEXT_Z_Z(bx, by, bz);
}
alias glBinormal3bvEXT = glBinormal3bvEXT_Z_Z;
__gshared glBinormal3bvEXT_Z_Z = function void (const(GLbyte)* v) { glBinormal3bvEXT_Z_Z_loader(v); };
private void glBinormal3bvEXT_Z_Z_loader (const(GLbyte)* v) {
  *cast(void**)&glBinormal3bvEXT_Z_Z = glbindGetProcAddress(`glBinormal3bvEXT`);
  if (*cast(void**)&glBinormal3bvEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3bvEXT' not found!`);
  glBinormal3bvEXT_Z_Z(v);
}
alias glBinormal3dEXT = glBinormal3dEXT_Z_Z;
__gshared glBinormal3dEXT_Z_Z = function void (GLdouble bx, GLdouble by, GLdouble bz) { glBinormal3dEXT_Z_Z_loader(bx, by, bz); };
private void glBinormal3dEXT_Z_Z_loader (GLdouble bx, GLdouble by, GLdouble bz) {
  *cast(void**)&glBinormal3dEXT_Z_Z = glbindGetProcAddress(`glBinormal3dEXT`);
  if (*cast(void**)&glBinormal3dEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3dEXT' not found!`);
  glBinormal3dEXT_Z_Z(bx, by, bz);
}
alias glBinormal3dvEXT = glBinormal3dvEXT_Z_Z;
__gshared glBinormal3dvEXT_Z_Z = function void (const(GLdouble)* v) { glBinormal3dvEXT_Z_Z_loader(v); };
private void glBinormal3dvEXT_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glBinormal3dvEXT_Z_Z = glbindGetProcAddress(`glBinormal3dvEXT`);
  if (*cast(void**)&glBinormal3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3dvEXT' not found!`);
  glBinormal3dvEXT_Z_Z(v);
}
alias glBinormal3fEXT = glBinormal3fEXT_Z_Z;
__gshared glBinormal3fEXT_Z_Z = function void (GLfloat bx, GLfloat by, GLfloat bz) { glBinormal3fEXT_Z_Z_loader(bx, by, bz); };
private void glBinormal3fEXT_Z_Z_loader (GLfloat bx, GLfloat by, GLfloat bz) {
  *cast(void**)&glBinormal3fEXT_Z_Z = glbindGetProcAddress(`glBinormal3fEXT`);
  if (*cast(void**)&glBinormal3fEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3fEXT' not found!`);
  glBinormal3fEXT_Z_Z(bx, by, bz);
}
alias glBinormal3fvEXT = glBinormal3fvEXT_Z_Z;
__gshared glBinormal3fvEXT_Z_Z = function void (const(GLfloat)* v) { glBinormal3fvEXT_Z_Z_loader(v); };
private void glBinormal3fvEXT_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glBinormal3fvEXT_Z_Z = glbindGetProcAddress(`glBinormal3fvEXT`);
  if (*cast(void**)&glBinormal3fvEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3fvEXT' not found!`);
  glBinormal3fvEXT_Z_Z(v);
}
alias glBinormal3iEXT = glBinormal3iEXT_Z_Z;
__gshared glBinormal3iEXT_Z_Z = function void (GLint bx, GLint by, GLint bz) { glBinormal3iEXT_Z_Z_loader(bx, by, bz); };
private void glBinormal3iEXT_Z_Z_loader (GLint bx, GLint by, GLint bz) {
  *cast(void**)&glBinormal3iEXT_Z_Z = glbindGetProcAddress(`glBinormal3iEXT`);
  if (*cast(void**)&glBinormal3iEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3iEXT' not found!`);
  glBinormal3iEXT_Z_Z(bx, by, bz);
}
alias glBinormal3ivEXT = glBinormal3ivEXT_Z_Z;
__gshared glBinormal3ivEXT_Z_Z = function void (const(GLint)* v) { glBinormal3ivEXT_Z_Z_loader(v); };
private void glBinormal3ivEXT_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glBinormal3ivEXT_Z_Z = glbindGetProcAddress(`glBinormal3ivEXT`);
  if (*cast(void**)&glBinormal3ivEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3ivEXT' not found!`);
  glBinormal3ivEXT_Z_Z(v);
}
alias glBinormal3sEXT = glBinormal3sEXT_Z_Z;
__gshared glBinormal3sEXT_Z_Z = function void (GLshort bx, GLshort by, GLshort bz) { glBinormal3sEXT_Z_Z_loader(bx, by, bz); };
private void glBinormal3sEXT_Z_Z_loader (GLshort bx, GLshort by, GLshort bz) {
  *cast(void**)&glBinormal3sEXT_Z_Z = glbindGetProcAddress(`glBinormal3sEXT`);
  if (*cast(void**)&glBinormal3sEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3sEXT' not found!`);
  glBinormal3sEXT_Z_Z(bx, by, bz);
}
alias glBinormal3svEXT = glBinormal3svEXT_Z_Z;
__gshared glBinormal3svEXT_Z_Z = function void (const(GLshort)* v) { glBinormal3svEXT_Z_Z_loader(v); };
private void glBinormal3svEXT_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glBinormal3svEXT_Z_Z = glbindGetProcAddress(`glBinormal3svEXT`);
  if (*cast(void**)&glBinormal3svEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormal3svEXT' not found!`);
  glBinormal3svEXT_Z_Z(v);
}
alias glBinormalPointerEXT = glBinormalPointerEXT_Z_Z;
__gshared glBinormalPointerEXT_Z_Z = function void (GLenum type, GLsizei stride, const(void)* pointer) { glBinormalPointerEXT_Z_Z_loader(type, stride, pointer); };
private void glBinormalPointerEXT_Z_Z_loader (GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glBinormalPointerEXT_Z_Z = glbindGetProcAddress(`glBinormalPointerEXT`);
  if (*cast(void**)&glBinormalPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glBinormalPointerEXT' not found!`);
  glBinormalPointerEXT_Z_Z(type, stride, pointer);
}
alias glBitmap = glBitmap_Z_Z;
__gshared glBitmap_Z_Z = function void (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const(GLubyte)* bitmap) { glBitmap_Z_Z_loader(width, height, xorig, yorig, xmove, ymove, bitmap); };
private void glBitmap_Z_Z_loader (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const(GLubyte)* bitmap) {
  *cast(void**)&glBitmap_Z_Z = glbindGetProcAddress(`glBitmap`);
  if (*cast(void**)&glBitmap_Z_Z is null) assert(0, `OpenGL function 'glBitmap' not found!`);
  glBitmap_Z_Z(width, height, xorig, yorig, xmove, ymove, bitmap);
}
alias glBitmapxOES = glBitmapxOES_Z_Z;
__gshared glBitmapxOES_Z_Z = function void (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const(GLubyte)* bitmap) { glBitmapxOES_Z_Z_loader(width, height, xorig, yorig, xmove, ymove, bitmap); };
private void glBitmapxOES_Z_Z_loader (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const(GLubyte)* bitmap) {
  *cast(void**)&glBitmapxOES_Z_Z = glbindGetProcAddress(`glBitmapxOES`);
  if (*cast(void**)&glBitmapxOES_Z_Z is null) assert(0, `OpenGL function 'glBitmapxOES' not found!`);
  glBitmapxOES_Z_Z(width, height, xorig, yorig, xmove, ymove, bitmap);
}
alias glBlendBarrier = glBlendBarrier_Z_Z;
__gshared glBlendBarrier_Z_Z = function void () { glBlendBarrier_Z_Z_loader(); };
private void glBlendBarrier_Z_Z_loader () {
  *cast(void**)&glBlendBarrier_Z_Z = glbindGetProcAddress(`glBlendBarrier`);
  if (*cast(void**)&glBlendBarrier_Z_Z is null) assert(0, `OpenGL function 'glBlendBarrier' not found!`);
  glBlendBarrier_Z_Z();
}
alias glBlendBarrierKHR = glBlendBarrierKHR_Z_Z;
__gshared glBlendBarrierKHR_Z_Z = function void () { glBlendBarrierKHR_Z_Z_loader(); };
private void glBlendBarrierKHR_Z_Z_loader () {
  *cast(void**)&glBlendBarrierKHR_Z_Z = glbindGetProcAddress(`glBlendBarrierKHR`);
  if (*cast(void**)&glBlendBarrierKHR_Z_Z is null) assert(0, `OpenGL function 'glBlendBarrierKHR' not found!`);
  glBlendBarrierKHR_Z_Z();
}
alias glBlendBarrierNV = glBlendBarrierNV_Z_Z;
__gshared glBlendBarrierNV_Z_Z = function void () { glBlendBarrierNV_Z_Z_loader(); };
private void glBlendBarrierNV_Z_Z_loader () {
  *cast(void**)&glBlendBarrierNV_Z_Z = glbindGetProcAddress(`glBlendBarrierNV`);
  if (*cast(void**)&glBlendBarrierNV_Z_Z is null) assert(0, `OpenGL function 'glBlendBarrierNV' not found!`);
  glBlendBarrierNV_Z_Z();
}
alias glBlendColor = glBlendColor_Z_Z;
__gshared glBlendColor_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { glBlendColor_Z_Z_loader(red, green, blue, alpha); };
private void glBlendColor_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  *cast(void**)&glBlendColor_Z_Z = glbindGetProcAddress(`glBlendColor`);
  if (*cast(void**)&glBlendColor_Z_Z is null) assert(0, `OpenGL function 'glBlendColor' not found!`);
  glBlendColor_Z_Z(red, green, blue, alpha);
}
alias glBlendColorEXT = glBlendColorEXT_Z_Z;
__gshared glBlendColorEXT_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { glBlendColorEXT_Z_Z_loader(red, green, blue, alpha); };
private void glBlendColorEXT_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  *cast(void**)&glBlendColorEXT_Z_Z = glbindGetProcAddress(`glBlendColorEXT`);
  if (*cast(void**)&glBlendColorEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendColorEXT' not found!`);
  glBlendColorEXT_Z_Z(red, green, blue, alpha);
}
alias glBlendColorxOES = glBlendColorxOES_Z_Z;
__gshared glBlendColorxOES_Z_Z = function void (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { glBlendColorxOES_Z_Z_loader(red, green, blue, alpha); };
private void glBlendColorxOES_Z_Z_loader (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  *cast(void**)&glBlendColorxOES_Z_Z = glbindGetProcAddress(`glBlendColorxOES`);
  if (*cast(void**)&glBlendColorxOES_Z_Z is null) assert(0, `OpenGL function 'glBlendColorxOES' not found!`);
  glBlendColorxOES_Z_Z(red, green, blue, alpha);
}
alias glBlendEquation = glBlendEquation_Z_Z;
__gshared glBlendEquation_Z_Z = function void (GLenum mode) { glBlendEquation_Z_Z_loader(mode); };
private void glBlendEquation_Z_Z_loader (GLenum mode) {
  *cast(void**)&glBlendEquation_Z_Z = glbindGetProcAddress(`glBlendEquation`);
  if (*cast(void**)&glBlendEquation_Z_Z is null) assert(0, `OpenGL function 'glBlendEquation' not found!`);
  glBlendEquation_Z_Z(mode);
}
alias glBlendEquationEXT = glBlendEquationEXT_Z_Z;
__gshared glBlendEquationEXT_Z_Z = function void (GLenum mode) { glBlendEquationEXT_Z_Z_loader(mode); };
private void glBlendEquationEXT_Z_Z_loader (GLenum mode) {
  *cast(void**)&glBlendEquationEXT_Z_Z = glbindGetProcAddress(`glBlendEquationEXT`);
  if (*cast(void**)&glBlendEquationEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationEXT' not found!`);
  glBlendEquationEXT_Z_Z(mode);
}
alias glBlendEquationIndexedAMD = glBlendEquationIndexedAMD_Z_Z;
__gshared glBlendEquationIndexedAMD_Z_Z = function void (GLuint buf, GLenum mode) { glBlendEquationIndexedAMD_Z_Z_loader(buf, mode); };
private void glBlendEquationIndexedAMD_Z_Z_loader (GLuint buf, GLenum mode) {
  *cast(void**)&glBlendEquationIndexedAMD_Z_Z = glbindGetProcAddress(`glBlendEquationIndexedAMD`);
  if (*cast(void**)&glBlendEquationIndexedAMD_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationIndexedAMD' not found!`);
  glBlendEquationIndexedAMD_Z_Z(buf, mode);
}
alias glBlendEquationOES = glBlendEquationOES_Z_Z;
__gshared glBlendEquationOES_Z_Z = function void (GLenum mode) { glBlendEquationOES_Z_Z_loader(mode); };
private void glBlendEquationOES_Z_Z_loader (GLenum mode) {
  *cast(void**)&glBlendEquationOES_Z_Z = glbindGetProcAddress(`glBlendEquationOES`);
  if (*cast(void**)&glBlendEquationOES_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationOES' not found!`);
  glBlendEquationOES_Z_Z(mode);
}
alias glBlendEquationSeparate = glBlendEquationSeparate_Z_Z;
__gshared glBlendEquationSeparate_Z_Z = function void (GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparate_Z_Z_loader(modeRGB, modeAlpha); };
private void glBlendEquationSeparate_Z_Z_loader (GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparate_Z_Z = glbindGetProcAddress(`glBlendEquationSeparate`);
  if (*cast(void**)&glBlendEquationSeparate_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparate' not found!`);
  glBlendEquationSeparate_Z_Z(modeRGB, modeAlpha);
}
alias glBlendEquationSeparateEXT = glBlendEquationSeparateEXT_Z_Z;
__gshared glBlendEquationSeparateEXT_Z_Z = function void (GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparateEXT_Z_Z_loader(modeRGB, modeAlpha); };
private void glBlendEquationSeparateEXT_Z_Z_loader (GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparateEXT_Z_Z = glbindGetProcAddress(`glBlendEquationSeparateEXT`);
  if (*cast(void**)&glBlendEquationSeparateEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateEXT' not found!`);
  glBlendEquationSeparateEXT_Z_Z(modeRGB, modeAlpha);
}
alias glBlendEquationSeparateIndexedAMD = glBlendEquationSeparateIndexedAMD_Z_Z;
__gshared glBlendEquationSeparateIndexedAMD_Z_Z = function void (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparateIndexedAMD_Z_Z_loader(buf, modeRGB, modeAlpha); };
private void glBlendEquationSeparateIndexedAMD_Z_Z_loader (GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparateIndexedAMD_Z_Z = glbindGetProcAddress(`glBlendEquationSeparateIndexedAMD`);
  if (*cast(void**)&glBlendEquationSeparateIndexedAMD_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateIndexedAMD' not found!`);
  glBlendEquationSeparateIndexedAMD_Z_Z(buf, modeRGB, modeAlpha);
}
alias glBlendEquationSeparateOES = glBlendEquationSeparateOES_Z_Z;
__gshared glBlendEquationSeparateOES_Z_Z = function void (GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparateOES_Z_Z_loader(modeRGB, modeAlpha); };
private void glBlendEquationSeparateOES_Z_Z_loader (GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparateOES_Z_Z = glbindGetProcAddress(`glBlendEquationSeparateOES`);
  if (*cast(void**)&glBlendEquationSeparateOES_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateOES' not found!`);
  glBlendEquationSeparateOES_Z_Z(modeRGB, modeAlpha);
}
alias glBlendEquationSeparatei = glBlendEquationSeparatei_Z_Z;
__gshared glBlendEquationSeparatei_Z_Z = function void (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparatei_Z_Z_loader(buf, modeRGB, modeAlpha); };
private void glBlendEquationSeparatei_Z_Z_loader (GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparatei_Z_Z = glbindGetProcAddress(`glBlendEquationSeparatei`);
  if (*cast(void**)&glBlendEquationSeparatei_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparatei' not found!`);
  glBlendEquationSeparatei_Z_Z(buf, modeRGB, modeAlpha);
}
alias glBlendEquationSeparateiARB = glBlendEquationSeparateiARB_Z_Z;
__gshared glBlendEquationSeparateiARB_Z_Z = function void (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparateiARB_Z_Z_loader(buf, modeRGB, modeAlpha); };
private void glBlendEquationSeparateiARB_Z_Z_loader (GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparateiARB_Z_Z = glbindGetProcAddress(`glBlendEquationSeparateiARB`);
  if (*cast(void**)&glBlendEquationSeparateiARB_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateiARB' not found!`);
  glBlendEquationSeparateiARB_Z_Z(buf, modeRGB, modeAlpha);
}
alias glBlendEquationSeparateiEXT = glBlendEquationSeparateiEXT_Z_Z;
__gshared glBlendEquationSeparateiEXT_Z_Z = function void (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparateiEXT_Z_Z_loader(buf, modeRGB, modeAlpha); };
private void glBlendEquationSeparateiEXT_Z_Z_loader (GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparateiEXT_Z_Z = glbindGetProcAddress(`glBlendEquationSeparateiEXT`);
  if (*cast(void**)&glBlendEquationSeparateiEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateiEXT' not found!`);
  glBlendEquationSeparateiEXT_Z_Z(buf, modeRGB, modeAlpha);
}
alias glBlendEquationSeparateiOES = glBlendEquationSeparateiOES_Z_Z;
__gshared glBlendEquationSeparateiOES_Z_Z = function void (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { glBlendEquationSeparateiOES_Z_Z_loader(buf, modeRGB, modeAlpha); };
private void glBlendEquationSeparateiOES_Z_Z_loader (GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  *cast(void**)&glBlendEquationSeparateiOES_Z_Z = glbindGetProcAddress(`glBlendEquationSeparateiOES`);
  if (*cast(void**)&glBlendEquationSeparateiOES_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationSeparateiOES' not found!`);
  glBlendEquationSeparateiOES_Z_Z(buf, modeRGB, modeAlpha);
}
alias glBlendEquationi = glBlendEquationi_Z_Z;
__gshared glBlendEquationi_Z_Z = function void (GLuint buf, GLenum mode) { glBlendEquationi_Z_Z_loader(buf, mode); };
private void glBlendEquationi_Z_Z_loader (GLuint buf, GLenum mode) {
  *cast(void**)&glBlendEquationi_Z_Z = glbindGetProcAddress(`glBlendEquationi`);
  if (*cast(void**)&glBlendEquationi_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationi' not found!`);
  glBlendEquationi_Z_Z(buf, mode);
}
alias glBlendEquationiARB = glBlendEquationiARB_Z_Z;
__gshared glBlendEquationiARB_Z_Z = function void (GLuint buf, GLenum mode) { glBlendEquationiARB_Z_Z_loader(buf, mode); };
private void glBlendEquationiARB_Z_Z_loader (GLuint buf, GLenum mode) {
  *cast(void**)&glBlendEquationiARB_Z_Z = glbindGetProcAddress(`glBlendEquationiARB`);
  if (*cast(void**)&glBlendEquationiARB_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationiARB' not found!`);
  glBlendEquationiARB_Z_Z(buf, mode);
}
alias glBlendEquationiEXT = glBlendEquationiEXT_Z_Z;
__gshared glBlendEquationiEXT_Z_Z = function void (GLuint buf, GLenum mode) { glBlendEquationiEXT_Z_Z_loader(buf, mode); };
private void glBlendEquationiEXT_Z_Z_loader (GLuint buf, GLenum mode) {
  *cast(void**)&glBlendEquationiEXT_Z_Z = glbindGetProcAddress(`glBlendEquationiEXT`);
  if (*cast(void**)&glBlendEquationiEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationiEXT' not found!`);
  glBlendEquationiEXT_Z_Z(buf, mode);
}
alias glBlendEquationiOES = glBlendEquationiOES_Z_Z;
__gshared glBlendEquationiOES_Z_Z = function void (GLuint buf, GLenum mode) { glBlendEquationiOES_Z_Z_loader(buf, mode); };
private void glBlendEquationiOES_Z_Z_loader (GLuint buf, GLenum mode) {
  *cast(void**)&glBlendEquationiOES_Z_Z = glbindGetProcAddress(`glBlendEquationiOES`);
  if (*cast(void**)&glBlendEquationiOES_Z_Z is null) assert(0, `OpenGL function 'glBlendEquationiOES' not found!`);
  glBlendEquationiOES_Z_Z(buf, mode);
}
alias glBlendFunc = glBlendFunc_Z_Z;
__gshared glBlendFunc_Z_Z = function void (GLenum sfactor, GLenum dfactor) { glBlendFunc_Z_Z_loader(sfactor, dfactor); };
private void glBlendFunc_Z_Z_loader (GLenum sfactor, GLenum dfactor) {
  *cast(void**)&glBlendFunc_Z_Z = glbindGetProcAddress(`glBlendFunc`);
  if (*cast(void**)&glBlendFunc_Z_Z is null) assert(0, `OpenGL function 'glBlendFunc' not found!`);
  glBlendFunc_Z_Z(sfactor, dfactor);
}
alias glBlendFuncIndexedAMD = glBlendFuncIndexedAMD_Z_Z;
__gshared glBlendFuncIndexedAMD_Z_Z = function void (GLuint buf, GLenum src, GLenum dst) { glBlendFuncIndexedAMD_Z_Z_loader(buf, src, dst); };
private void glBlendFuncIndexedAMD_Z_Z_loader (GLuint buf, GLenum src, GLenum dst) {
  *cast(void**)&glBlendFuncIndexedAMD_Z_Z = glbindGetProcAddress(`glBlendFuncIndexedAMD`);
  if (*cast(void**)&glBlendFuncIndexedAMD_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncIndexedAMD' not found!`);
  glBlendFuncIndexedAMD_Z_Z(buf, src, dst);
}
alias glBlendFuncSeparate = glBlendFuncSeparate_Z_Z;
__gshared glBlendFuncSeparate_Z_Z = function void (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { glBlendFuncSeparate_Z_Z_loader(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); };
private void glBlendFuncSeparate_Z_Z_loader (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  *cast(void**)&glBlendFuncSeparate_Z_Z = glbindGetProcAddress(`glBlendFuncSeparate`);
  if (*cast(void**)&glBlendFuncSeparate_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparate' not found!`);
  glBlendFuncSeparate_Z_Z(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
alias glBlendFuncSeparateEXT = glBlendFuncSeparateEXT_Z_Z;
__gshared glBlendFuncSeparateEXT_Z_Z = function void (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { glBlendFuncSeparateEXT_Z_Z_loader(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); };
private void glBlendFuncSeparateEXT_Z_Z_loader (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  *cast(void**)&glBlendFuncSeparateEXT_Z_Z = glbindGetProcAddress(`glBlendFuncSeparateEXT`);
  if (*cast(void**)&glBlendFuncSeparateEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateEXT' not found!`);
  glBlendFuncSeparateEXT_Z_Z(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
alias glBlendFuncSeparateINGR = glBlendFuncSeparateINGR_Z_Z;
__gshared glBlendFuncSeparateINGR_Z_Z = function void (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { glBlendFuncSeparateINGR_Z_Z_loader(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); };
private void glBlendFuncSeparateINGR_Z_Z_loader (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  *cast(void**)&glBlendFuncSeparateINGR_Z_Z = glbindGetProcAddress(`glBlendFuncSeparateINGR`);
  if (*cast(void**)&glBlendFuncSeparateINGR_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateINGR' not found!`);
  glBlendFuncSeparateINGR_Z_Z(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
alias glBlendFuncSeparateIndexedAMD = glBlendFuncSeparateIndexedAMD_Z_Z;
__gshared glBlendFuncSeparateIndexedAMD_Z_Z = function void (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { glBlendFuncSeparateIndexedAMD_Z_Z_loader(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
private void glBlendFuncSeparateIndexedAMD_Z_Z_loader (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  *cast(void**)&glBlendFuncSeparateIndexedAMD_Z_Z = glbindGetProcAddress(`glBlendFuncSeparateIndexedAMD`);
  if (*cast(void**)&glBlendFuncSeparateIndexedAMD_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateIndexedAMD' not found!`);
  glBlendFuncSeparateIndexedAMD_Z_Z(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
alias glBlendFuncSeparateOES = glBlendFuncSeparateOES_Z_Z;
__gshared glBlendFuncSeparateOES_Z_Z = function void (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { glBlendFuncSeparateOES_Z_Z_loader(srcRGB, dstRGB, srcAlpha, dstAlpha); };
private void glBlendFuncSeparateOES_Z_Z_loader (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  *cast(void**)&glBlendFuncSeparateOES_Z_Z = glbindGetProcAddress(`glBlendFuncSeparateOES`);
  if (*cast(void**)&glBlendFuncSeparateOES_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateOES' not found!`);
  glBlendFuncSeparateOES_Z_Z(srcRGB, dstRGB, srcAlpha, dstAlpha);
}
alias glBlendFuncSeparatei = glBlendFuncSeparatei_Z_Z;
__gshared glBlendFuncSeparatei_Z_Z = function void (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { glBlendFuncSeparatei_Z_Z_loader(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
private void glBlendFuncSeparatei_Z_Z_loader (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  *cast(void**)&glBlendFuncSeparatei_Z_Z = glbindGetProcAddress(`glBlendFuncSeparatei`);
  if (*cast(void**)&glBlendFuncSeparatei_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparatei' not found!`);
  glBlendFuncSeparatei_Z_Z(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
alias glBlendFuncSeparateiARB = glBlendFuncSeparateiARB_Z_Z;
__gshared glBlendFuncSeparateiARB_Z_Z = function void (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { glBlendFuncSeparateiARB_Z_Z_loader(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
private void glBlendFuncSeparateiARB_Z_Z_loader (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  *cast(void**)&glBlendFuncSeparateiARB_Z_Z = glbindGetProcAddress(`glBlendFuncSeparateiARB`);
  if (*cast(void**)&glBlendFuncSeparateiARB_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateiARB' not found!`);
  glBlendFuncSeparateiARB_Z_Z(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
alias glBlendFuncSeparateiEXT = glBlendFuncSeparateiEXT_Z_Z;
__gshared glBlendFuncSeparateiEXT_Z_Z = function void (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { glBlendFuncSeparateiEXT_Z_Z_loader(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
private void glBlendFuncSeparateiEXT_Z_Z_loader (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  *cast(void**)&glBlendFuncSeparateiEXT_Z_Z = glbindGetProcAddress(`glBlendFuncSeparateiEXT`);
  if (*cast(void**)&glBlendFuncSeparateiEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateiEXT' not found!`);
  glBlendFuncSeparateiEXT_Z_Z(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
alias glBlendFuncSeparateiOES = glBlendFuncSeparateiOES_Z_Z;
__gshared glBlendFuncSeparateiOES_Z_Z = function void (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { glBlendFuncSeparateiOES_Z_Z_loader(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
private void glBlendFuncSeparateiOES_Z_Z_loader (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  *cast(void**)&glBlendFuncSeparateiOES_Z_Z = glbindGetProcAddress(`glBlendFuncSeparateiOES`);
  if (*cast(void**)&glBlendFuncSeparateiOES_Z_Z is null) assert(0, `OpenGL function 'glBlendFuncSeparateiOES' not found!`);
  glBlendFuncSeparateiOES_Z_Z(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
alias glBlendFunci = glBlendFunci_Z_Z;
__gshared glBlendFunci_Z_Z = function void (GLuint buf, GLenum src, GLenum dst) { glBlendFunci_Z_Z_loader(buf, src, dst); };
private void glBlendFunci_Z_Z_loader (GLuint buf, GLenum src, GLenum dst) {
  *cast(void**)&glBlendFunci_Z_Z = glbindGetProcAddress(`glBlendFunci`);
  if (*cast(void**)&glBlendFunci_Z_Z is null) assert(0, `OpenGL function 'glBlendFunci' not found!`);
  glBlendFunci_Z_Z(buf, src, dst);
}
alias glBlendFunciARB = glBlendFunciARB_Z_Z;
__gshared glBlendFunciARB_Z_Z = function void (GLuint buf, GLenum src, GLenum dst) { glBlendFunciARB_Z_Z_loader(buf, src, dst); };
private void glBlendFunciARB_Z_Z_loader (GLuint buf, GLenum src, GLenum dst) {
  *cast(void**)&glBlendFunciARB_Z_Z = glbindGetProcAddress(`glBlendFunciARB`);
  if (*cast(void**)&glBlendFunciARB_Z_Z is null) assert(0, `OpenGL function 'glBlendFunciARB' not found!`);
  glBlendFunciARB_Z_Z(buf, src, dst);
}
alias glBlendFunciEXT = glBlendFunciEXT_Z_Z;
__gshared glBlendFunciEXT_Z_Z = function void (GLuint buf, GLenum src, GLenum dst) { glBlendFunciEXT_Z_Z_loader(buf, src, dst); };
private void glBlendFunciEXT_Z_Z_loader (GLuint buf, GLenum src, GLenum dst) {
  *cast(void**)&glBlendFunciEXT_Z_Z = glbindGetProcAddress(`glBlendFunciEXT`);
  if (*cast(void**)&glBlendFunciEXT_Z_Z is null) assert(0, `OpenGL function 'glBlendFunciEXT' not found!`);
  glBlendFunciEXT_Z_Z(buf, src, dst);
}
alias glBlendFunciOES = glBlendFunciOES_Z_Z;
__gshared glBlendFunciOES_Z_Z = function void (GLuint buf, GLenum src, GLenum dst) { glBlendFunciOES_Z_Z_loader(buf, src, dst); };
private void glBlendFunciOES_Z_Z_loader (GLuint buf, GLenum src, GLenum dst) {
  *cast(void**)&glBlendFunciOES_Z_Z = glbindGetProcAddress(`glBlendFunciOES`);
  if (*cast(void**)&glBlendFunciOES_Z_Z is null) assert(0, `OpenGL function 'glBlendFunciOES' not found!`);
  glBlendFunciOES_Z_Z(buf, src, dst);
}
alias glBlendParameteriNV = glBlendParameteriNV_Z_Z;
__gshared glBlendParameteriNV_Z_Z = function void (GLenum pname, GLint value) { glBlendParameteriNV_Z_Z_loader(pname, value); };
private void glBlendParameteriNV_Z_Z_loader (GLenum pname, GLint value) {
  *cast(void**)&glBlendParameteriNV_Z_Z = glbindGetProcAddress(`glBlendParameteriNV`);
  if (*cast(void**)&glBlendParameteriNV_Z_Z is null) assert(0, `OpenGL function 'glBlendParameteriNV' not found!`);
  glBlendParameteriNV_Z_Z(pname, value);
}
alias glBlitFramebuffer = glBlitFramebuffer_Z_Z;
__gshared glBlitFramebuffer_Z_Z = function void (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { glBlitFramebuffer_Z_Z_loader(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
private void glBlitFramebuffer_Z_Z_loader (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  *cast(void**)&glBlitFramebuffer_Z_Z = glbindGetProcAddress(`glBlitFramebuffer`);
  if (*cast(void**)&glBlitFramebuffer_Z_Z is null) assert(0, `OpenGL function 'glBlitFramebuffer' not found!`);
  glBlitFramebuffer_Z_Z(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
alias glBlitFramebufferANGLE = glBlitFramebufferANGLE_Z_Z;
__gshared glBlitFramebufferANGLE_Z_Z = function void (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { glBlitFramebufferANGLE_Z_Z_loader(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
private void glBlitFramebufferANGLE_Z_Z_loader (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  *cast(void**)&glBlitFramebufferANGLE_Z_Z = glbindGetProcAddress(`glBlitFramebufferANGLE`);
  if (*cast(void**)&glBlitFramebufferANGLE_Z_Z is null) assert(0, `OpenGL function 'glBlitFramebufferANGLE' not found!`);
  glBlitFramebufferANGLE_Z_Z(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
alias glBlitFramebufferEXT = glBlitFramebufferEXT_Z_Z;
__gshared glBlitFramebufferEXT_Z_Z = function void (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { glBlitFramebufferEXT_Z_Z_loader(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
private void glBlitFramebufferEXT_Z_Z_loader (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  *cast(void**)&glBlitFramebufferEXT_Z_Z = glbindGetProcAddress(`glBlitFramebufferEXT`);
  if (*cast(void**)&glBlitFramebufferEXT_Z_Z is null) assert(0, `OpenGL function 'glBlitFramebufferEXT' not found!`);
  glBlitFramebufferEXT_Z_Z(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
alias glBlitFramebufferNV = glBlitFramebufferNV_Z_Z;
__gshared glBlitFramebufferNV_Z_Z = function void (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { glBlitFramebufferNV_Z_Z_loader(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
private void glBlitFramebufferNV_Z_Z_loader (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  *cast(void**)&glBlitFramebufferNV_Z_Z = glbindGetProcAddress(`glBlitFramebufferNV`);
  if (*cast(void**)&glBlitFramebufferNV_Z_Z is null) assert(0, `OpenGL function 'glBlitFramebufferNV' not found!`);
  glBlitFramebufferNV_Z_Z(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
alias glBlitNamedFramebuffer = glBlitNamedFramebuffer_Z_Z;
__gshared glBlitNamedFramebuffer_Z_Z = function void (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { glBlitNamedFramebuffer_Z_Z_loader(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
private void glBlitNamedFramebuffer_Z_Z_loader (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  *cast(void**)&glBlitNamedFramebuffer_Z_Z = glbindGetProcAddress(`glBlitNamedFramebuffer`);
  if (*cast(void**)&glBlitNamedFramebuffer_Z_Z is null) assert(0, `OpenGL function 'glBlitNamedFramebuffer' not found!`);
  glBlitNamedFramebuffer_Z_Z(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
alias glBufferAddressRangeNV = glBufferAddressRangeNV_Z_Z;
__gshared glBufferAddressRangeNV_Z_Z = function void (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { glBufferAddressRangeNV_Z_Z_loader(pname, index, address, length); };
private void glBufferAddressRangeNV_Z_Z_loader (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {
  *cast(void**)&glBufferAddressRangeNV_Z_Z = glbindGetProcAddress(`glBufferAddressRangeNV`);
  if (*cast(void**)&glBufferAddressRangeNV_Z_Z is null) assert(0, `OpenGL function 'glBufferAddressRangeNV' not found!`);
  glBufferAddressRangeNV_Z_Z(pname, index, address, length);
}
alias glBufferData = glBufferData_Z_Z;
__gshared glBufferData_Z_Z = function void (GLenum target, GLsizeiptr size, const(void)* data, GLenum usage) { glBufferData_Z_Z_loader(target, size, data, usage); };
private void glBufferData_Z_Z_loader (GLenum target, GLsizeiptr size, const(void)* data, GLenum usage) {
  *cast(void**)&glBufferData_Z_Z = glbindGetProcAddress(`glBufferData`);
  if (*cast(void**)&glBufferData_Z_Z is null) assert(0, `OpenGL function 'glBufferData' not found!`);
  glBufferData_Z_Z(target, size, data, usage);
}
alias glBufferDataARB = glBufferDataARB_Z_Z;
__gshared glBufferDataARB_Z_Z = function void (GLenum target, GLsizeiptrARB size, const(void)* data, GLenum usage) { glBufferDataARB_Z_Z_loader(target, size, data, usage); };
private void glBufferDataARB_Z_Z_loader (GLenum target, GLsizeiptrARB size, const(void)* data, GLenum usage) {
  *cast(void**)&glBufferDataARB_Z_Z = glbindGetProcAddress(`glBufferDataARB`);
  if (*cast(void**)&glBufferDataARB_Z_Z is null) assert(0, `OpenGL function 'glBufferDataARB' not found!`);
  glBufferDataARB_Z_Z(target, size, data, usage);
}
alias glBufferPageCommitmentARB = glBufferPageCommitmentARB_Z_Z;
__gshared glBufferPageCommitmentARB_Z_Z = function void (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { glBufferPageCommitmentARB_Z_Z_loader(target, offset, size, commit); };
private void glBufferPageCommitmentARB_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  *cast(void**)&glBufferPageCommitmentARB_Z_Z = glbindGetProcAddress(`glBufferPageCommitmentARB`);
  if (*cast(void**)&glBufferPageCommitmentARB_Z_Z is null) assert(0, `OpenGL function 'glBufferPageCommitmentARB' not found!`);
  glBufferPageCommitmentARB_Z_Z(target, offset, size, commit);
}
alias glBufferParameteriAPPLE = glBufferParameteriAPPLE_Z_Z;
__gshared glBufferParameteriAPPLE_Z_Z = function void (GLenum target, GLenum pname, GLint param) { glBufferParameteriAPPLE_Z_Z_loader(target, pname, param); };
private void glBufferParameteriAPPLE_Z_Z_loader (GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glBufferParameteriAPPLE_Z_Z = glbindGetProcAddress(`glBufferParameteriAPPLE`);
  if (*cast(void**)&glBufferParameteriAPPLE_Z_Z is null) assert(0, `OpenGL function 'glBufferParameteriAPPLE' not found!`);
  glBufferParameteriAPPLE_Z_Z(target, pname, param);
}
alias glBufferStorage = glBufferStorage_Z_Z;
__gshared glBufferStorage_Z_Z = function void (GLenum target, GLsizeiptr size, const(void)* data, GLbitfield flags) { glBufferStorage_Z_Z_loader(target, size, data, flags); };
private void glBufferStorage_Z_Z_loader (GLenum target, GLsizeiptr size, const(void)* data, GLbitfield flags) {
  *cast(void**)&glBufferStorage_Z_Z = glbindGetProcAddress(`glBufferStorage`);
  if (*cast(void**)&glBufferStorage_Z_Z is null) assert(0, `OpenGL function 'glBufferStorage' not found!`);
  glBufferStorage_Z_Z(target, size, data, flags);
}
alias glBufferStorageEXT = glBufferStorageEXT_Z_Z;
__gshared glBufferStorageEXT_Z_Z = function void (GLenum target, GLsizeiptr size, const(void)* data, GLbitfield flags) { glBufferStorageEXT_Z_Z_loader(target, size, data, flags); };
private void glBufferStorageEXT_Z_Z_loader (GLenum target, GLsizeiptr size, const(void)* data, GLbitfield flags) {
  *cast(void**)&glBufferStorageEXT_Z_Z = glbindGetProcAddress(`glBufferStorageEXT`);
  if (*cast(void**)&glBufferStorageEXT_Z_Z is null) assert(0, `OpenGL function 'glBufferStorageEXT' not found!`);
  glBufferStorageEXT_Z_Z(target, size, data, flags);
}
alias glBufferStorageExternalEXT = glBufferStorageExternalEXT_Z_Z;
__gshared glBufferStorageExternalEXT_Z_Z = function void (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { glBufferStorageExternalEXT_Z_Z_loader(target, offset, size, clientBuffer, flags); };
private void glBufferStorageExternalEXT_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  *cast(void**)&glBufferStorageExternalEXT_Z_Z = glbindGetProcAddress(`glBufferStorageExternalEXT`);
  if (*cast(void**)&glBufferStorageExternalEXT_Z_Z is null) assert(0, `OpenGL function 'glBufferStorageExternalEXT' not found!`);
  glBufferStorageExternalEXT_Z_Z(target, offset, size, clientBuffer, flags);
}
alias glBufferStorageMemEXT = glBufferStorageMemEXT_Z_Z;
__gshared glBufferStorageMemEXT_Z_Z = function void (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { glBufferStorageMemEXT_Z_Z_loader(target, size, memory, offset); };
private void glBufferStorageMemEXT_Z_Z_loader (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  *cast(void**)&glBufferStorageMemEXT_Z_Z = glbindGetProcAddress(`glBufferStorageMemEXT`);
  if (*cast(void**)&glBufferStorageMemEXT_Z_Z is null) assert(0, `OpenGL function 'glBufferStorageMemEXT' not found!`);
  glBufferStorageMemEXT_Z_Z(target, size, memory, offset);
}
alias glBufferSubData = glBufferSubData_Z_Z;
__gshared glBufferSubData_Z_Z = function void (GLenum target, GLintptr offset, GLsizeiptr size, const(void)* data) { glBufferSubData_Z_Z_loader(target, offset, size, data); };
private void glBufferSubData_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr size, const(void)* data) {
  *cast(void**)&glBufferSubData_Z_Z = glbindGetProcAddress(`glBufferSubData`);
  if (*cast(void**)&glBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glBufferSubData' not found!`);
  glBufferSubData_Z_Z(target, offset, size, data);
}
alias glBufferSubDataARB = glBufferSubDataARB_Z_Z;
__gshared glBufferSubDataARB_Z_Z = function void (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const(void)* data) { glBufferSubDataARB_Z_Z_loader(target, offset, size, data); };
private void glBufferSubDataARB_Z_Z_loader (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const(void)* data) {
  *cast(void**)&glBufferSubDataARB_Z_Z = glbindGetProcAddress(`glBufferSubDataARB`);
  if (*cast(void**)&glBufferSubDataARB_Z_Z is null) assert(0, `OpenGL function 'glBufferSubDataARB' not found!`);
  glBufferSubDataARB_Z_Z(target, offset, size, data);
}
alias glCallCommandListNV = glCallCommandListNV_Z_Z;
__gshared glCallCommandListNV_Z_Z = function void (GLuint list) { glCallCommandListNV_Z_Z_loader(list); };
private void glCallCommandListNV_Z_Z_loader (GLuint list) {
  *cast(void**)&glCallCommandListNV_Z_Z = glbindGetProcAddress(`glCallCommandListNV`);
  if (*cast(void**)&glCallCommandListNV_Z_Z is null) assert(0, `OpenGL function 'glCallCommandListNV' not found!`);
  glCallCommandListNV_Z_Z(list);
}
alias glCallList = glCallList_Z_Z;
__gshared glCallList_Z_Z = function void (GLuint list) { glCallList_Z_Z_loader(list); };
private void glCallList_Z_Z_loader (GLuint list) {
  *cast(void**)&glCallList_Z_Z = glbindGetProcAddress(`glCallList`);
  if (*cast(void**)&glCallList_Z_Z is null) assert(0, `OpenGL function 'glCallList' not found!`);
  glCallList_Z_Z(list);
}
alias glCallLists = glCallLists_Z_Z;
__gshared glCallLists_Z_Z = function void (GLsizei n, GLenum type, const(void)* lists) { glCallLists_Z_Z_loader(n, type, lists); };
private void glCallLists_Z_Z_loader (GLsizei n, GLenum type, const(void)* lists) {
  *cast(void**)&glCallLists_Z_Z = glbindGetProcAddress(`glCallLists`);
  if (*cast(void**)&glCallLists_Z_Z is null) assert(0, `OpenGL function 'glCallLists' not found!`);
  glCallLists_Z_Z(n, type, lists);
}
alias glCheckFramebufferStatus = glCheckFramebufferStatus_Z_Z;
__gshared glCheckFramebufferStatus_Z_Z = function GLenum (GLenum target) { return glCheckFramebufferStatus_Z_Z_loader(target); };
private GLenum glCheckFramebufferStatus_Z_Z_loader (GLenum target) {
  *cast(void**)&glCheckFramebufferStatus_Z_Z = glbindGetProcAddress(`glCheckFramebufferStatus`);
  if (*cast(void**)&glCheckFramebufferStatus_Z_Z is null) assert(0, `OpenGL function 'glCheckFramebufferStatus' not found!`);
  return glCheckFramebufferStatus_Z_Z(target);
}
alias glCheckFramebufferStatusEXT = glCheckFramebufferStatusEXT_Z_Z;
__gshared glCheckFramebufferStatusEXT_Z_Z = function GLenum (GLenum target) { return glCheckFramebufferStatusEXT_Z_Z_loader(target); };
private GLenum glCheckFramebufferStatusEXT_Z_Z_loader (GLenum target) {
  *cast(void**)&glCheckFramebufferStatusEXT_Z_Z = glbindGetProcAddress(`glCheckFramebufferStatusEXT`);
  if (*cast(void**)&glCheckFramebufferStatusEXT_Z_Z is null) assert(0, `OpenGL function 'glCheckFramebufferStatusEXT' not found!`);
  return glCheckFramebufferStatusEXT_Z_Z(target);
}
alias glCheckFramebufferStatusOES = glCheckFramebufferStatusOES_Z_Z;
__gshared glCheckFramebufferStatusOES_Z_Z = function GLenum (GLenum target) { return glCheckFramebufferStatusOES_Z_Z_loader(target); };
private GLenum glCheckFramebufferStatusOES_Z_Z_loader (GLenum target) {
  *cast(void**)&glCheckFramebufferStatusOES_Z_Z = glbindGetProcAddress(`glCheckFramebufferStatusOES`);
  if (*cast(void**)&glCheckFramebufferStatusOES_Z_Z is null) assert(0, `OpenGL function 'glCheckFramebufferStatusOES' not found!`);
  return glCheckFramebufferStatusOES_Z_Z(target);
}
alias glCheckNamedFramebufferStatus = glCheckNamedFramebufferStatus_Z_Z;
__gshared glCheckNamedFramebufferStatus_Z_Z = function GLenum (GLuint framebuffer, GLenum target) { return glCheckNamedFramebufferStatus_Z_Z_loader(framebuffer, target); };
private GLenum glCheckNamedFramebufferStatus_Z_Z_loader (GLuint framebuffer, GLenum target) {
  *cast(void**)&glCheckNamedFramebufferStatus_Z_Z = glbindGetProcAddress(`glCheckNamedFramebufferStatus`);
  if (*cast(void**)&glCheckNamedFramebufferStatus_Z_Z is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatus' not found!`);
  return glCheckNamedFramebufferStatus_Z_Z(framebuffer, target);
}
alias glCheckNamedFramebufferStatusEXT = glCheckNamedFramebufferStatusEXT_Z_Z;
__gshared glCheckNamedFramebufferStatusEXT_Z_Z = function GLenum (GLuint framebuffer, GLenum target) { return glCheckNamedFramebufferStatusEXT_Z_Z_loader(framebuffer, target); };
private GLenum glCheckNamedFramebufferStatusEXT_Z_Z_loader (GLuint framebuffer, GLenum target) {
  *cast(void**)&glCheckNamedFramebufferStatusEXT_Z_Z = glbindGetProcAddress(`glCheckNamedFramebufferStatusEXT`);
  if (*cast(void**)&glCheckNamedFramebufferStatusEXT_Z_Z is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatusEXT' not found!`);
  return glCheckNamedFramebufferStatusEXT_Z_Z(framebuffer, target);
}
alias glClampColor = glClampColor_Z_Z;
__gshared glClampColor_Z_Z = function void (GLenum target, GLenum clamp) { glClampColor_Z_Z_loader(target, clamp); };
private void glClampColor_Z_Z_loader (GLenum target, GLenum clamp) {
  *cast(void**)&glClampColor_Z_Z = glbindGetProcAddress(`glClampColor`);
  if (*cast(void**)&glClampColor_Z_Z is null) assert(0, `OpenGL function 'glClampColor' not found!`);
  glClampColor_Z_Z(target, clamp);
}
alias glClampColorARB = glClampColorARB_Z_Z;
__gshared glClampColorARB_Z_Z = function void (GLenum target, GLenum clamp) { glClampColorARB_Z_Z_loader(target, clamp); };
private void glClampColorARB_Z_Z_loader (GLenum target, GLenum clamp) {
  *cast(void**)&glClampColorARB_Z_Z = glbindGetProcAddress(`glClampColorARB`);
  if (*cast(void**)&glClampColorARB_Z_Z is null) assert(0, `OpenGL function 'glClampColorARB' not found!`);
  glClampColorARB_Z_Z(target, clamp);
}
alias glClear = glClear_Z_Z;
__gshared glClear_Z_Z = function void (GLbitfield mask) { glClear_Z_Z_loader(mask); };
private void glClear_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glClear_Z_Z = glbindGetProcAddress(`glClear`);
  if (*cast(void**)&glClear_Z_Z is null) assert(0, `OpenGL function 'glClear' not found!`);
  glClear_Z_Z(mask);
}
alias glClearAccum = glClearAccum_Z_Z;
__gshared glClearAccum_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { glClearAccum_Z_Z_loader(red, green, blue, alpha); };
private void glClearAccum_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  *cast(void**)&glClearAccum_Z_Z = glbindGetProcAddress(`glClearAccum`);
  if (*cast(void**)&glClearAccum_Z_Z is null) assert(0, `OpenGL function 'glClearAccum' not found!`);
  glClearAccum_Z_Z(red, green, blue, alpha);
}
alias glClearAccumxOES = glClearAccumxOES_Z_Z;
__gshared glClearAccumxOES_Z_Z = function void (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { glClearAccumxOES_Z_Z_loader(red, green, blue, alpha); };
private void glClearAccumxOES_Z_Z_loader (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  *cast(void**)&glClearAccumxOES_Z_Z = glbindGetProcAddress(`glClearAccumxOES`);
  if (*cast(void**)&glClearAccumxOES_Z_Z is null) assert(0, `OpenGL function 'glClearAccumxOES' not found!`);
  glClearAccumxOES_Z_Z(red, green, blue, alpha);
}
alias glClearBufferData = glClearBufferData_Z_Z;
__gshared glClearBufferData_Z_Z = function void (GLenum target, GLenum internalformat, GLenum format, GLenum type, const(void)* data) { glClearBufferData_Z_Z_loader(target, internalformat, format, type, data); };
private void glClearBufferData_Z_Z_loader (GLenum target, GLenum internalformat, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearBufferData_Z_Z = glbindGetProcAddress(`glClearBufferData`);
  if (*cast(void**)&glClearBufferData_Z_Z is null) assert(0, `OpenGL function 'glClearBufferData' not found!`);
  glClearBufferData_Z_Z(target, internalformat, format, type, data);
}
alias glClearBufferSubData = glClearBufferSubData_Z_Z;
__gshared glClearBufferSubData_Z_Z = function void (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const(void)* data) { glClearBufferSubData_Z_Z_loader(target, internalformat, offset, size, format, type, data); };
private void glClearBufferSubData_Z_Z_loader (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearBufferSubData_Z_Z = glbindGetProcAddress(`glClearBufferSubData`);
  if (*cast(void**)&glClearBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glClearBufferSubData' not found!`);
  glClearBufferSubData_Z_Z(target, internalformat, offset, size, format, type, data);
}
alias glClearBufferfi = glClearBufferfi_Z_Z;
__gshared glClearBufferfi_Z_Z = function void (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { glClearBufferfi_Z_Z_loader(buffer, drawbuffer, depth, stencil); };
private void glClearBufferfi_Z_Z_loader (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  *cast(void**)&glClearBufferfi_Z_Z = glbindGetProcAddress(`glClearBufferfi`);
  if (*cast(void**)&glClearBufferfi_Z_Z is null) assert(0, `OpenGL function 'glClearBufferfi' not found!`);
  glClearBufferfi_Z_Z(buffer, drawbuffer, depth, stencil);
}
alias glClearBufferfv = glClearBufferfv_Z_Z;
__gshared glClearBufferfv_Z_Z = function void (GLenum buffer, GLint drawbuffer, const(GLfloat)* value) { glClearBufferfv_Z_Z_loader(buffer, drawbuffer, value); };
private void glClearBufferfv_Z_Z_loader (GLenum buffer, GLint drawbuffer, const(GLfloat)* value) {
  *cast(void**)&glClearBufferfv_Z_Z = glbindGetProcAddress(`glClearBufferfv`);
  if (*cast(void**)&glClearBufferfv_Z_Z is null) assert(0, `OpenGL function 'glClearBufferfv' not found!`);
  glClearBufferfv_Z_Z(buffer, drawbuffer, value);
}
alias glClearBufferiv = glClearBufferiv_Z_Z;
__gshared glClearBufferiv_Z_Z = function void (GLenum buffer, GLint drawbuffer, const(GLint)* value) { glClearBufferiv_Z_Z_loader(buffer, drawbuffer, value); };
private void glClearBufferiv_Z_Z_loader (GLenum buffer, GLint drawbuffer, const(GLint)* value) {
  *cast(void**)&glClearBufferiv_Z_Z = glbindGetProcAddress(`glClearBufferiv`);
  if (*cast(void**)&glClearBufferiv_Z_Z is null) assert(0, `OpenGL function 'glClearBufferiv' not found!`);
  glClearBufferiv_Z_Z(buffer, drawbuffer, value);
}
alias glClearBufferuiv = glClearBufferuiv_Z_Z;
__gshared glClearBufferuiv_Z_Z = function void (GLenum buffer, GLint drawbuffer, const(GLuint)* value) { glClearBufferuiv_Z_Z_loader(buffer, drawbuffer, value); };
private void glClearBufferuiv_Z_Z_loader (GLenum buffer, GLint drawbuffer, const(GLuint)* value) {
  *cast(void**)&glClearBufferuiv_Z_Z = glbindGetProcAddress(`glClearBufferuiv`);
  if (*cast(void**)&glClearBufferuiv_Z_Z is null) assert(0, `OpenGL function 'glClearBufferuiv' not found!`);
  glClearBufferuiv_Z_Z(buffer, drawbuffer, value);
}
alias glClearColor = glClearColor_Z_Z;
__gshared glClearColor_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { glClearColor_Z_Z_loader(red, green, blue, alpha); };
private void glClearColor_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  *cast(void**)&glClearColor_Z_Z = glbindGetProcAddress(`glClearColor`);
  if (*cast(void**)&glClearColor_Z_Z is null) assert(0, `OpenGL function 'glClearColor' not found!`);
  glClearColor_Z_Z(red, green, blue, alpha);
}
alias glClearColorIiEXT = glClearColorIiEXT_Z_Z;
__gshared glClearColorIiEXT_Z_Z = function void (GLint red, GLint green, GLint blue, GLint alpha) { glClearColorIiEXT_Z_Z_loader(red, green, blue, alpha); };
private void glClearColorIiEXT_Z_Z_loader (GLint red, GLint green, GLint blue, GLint alpha) {
  *cast(void**)&glClearColorIiEXT_Z_Z = glbindGetProcAddress(`glClearColorIiEXT`);
  if (*cast(void**)&glClearColorIiEXT_Z_Z is null) assert(0, `OpenGL function 'glClearColorIiEXT' not found!`);
  glClearColorIiEXT_Z_Z(red, green, blue, alpha);
}
alias glClearColorIuiEXT = glClearColorIuiEXT_Z_Z;
__gshared glClearColorIuiEXT_Z_Z = function void (GLuint red, GLuint green, GLuint blue, GLuint alpha) { glClearColorIuiEXT_Z_Z_loader(red, green, blue, alpha); };
private void glClearColorIuiEXT_Z_Z_loader (GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  *cast(void**)&glClearColorIuiEXT_Z_Z = glbindGetProcAddress(`glClearColorIuiEXT`);
  if (*cast(void**)&glClearColorIuiEXT_Z_Z is null) assert(0, `OpenGL function 'glClearColorIuiEXT' not found!`);
  glClearColorIuiEXT_Z_Z(red, green, blue, alpha);
}
alias glClearColorx = glClearColorx_Z_Z;
__gshared glClearColorx_Z_Z = function void (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { glClearColorx_Z_Z_loader(red, green, blue, alpha); };
private void glClearColorx_Z_Z_loader (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  *cast(void**)&glClearColorx_Z_Z = glbindGetProcAddress(`glClearColorx`);
  if (*cast(void**)&glClearColorx_Z_Z is null) assert(0, `OpenGL function 'glClearColorx' not found!`);
  glClearColorx_Z_Z(red, green, blue, alpha);
}
alias glClearColorxOES = glClearColorxOES_Z_Z;
__gshared glClearColorxOES_Z_Z = function void (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { glClearColorxOES_Z_Z_loader(red, green, blue, alpha); };
private void glClearColorxOES_Z_Z_loader (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  *cast(void**)&glClearColorxOES_Z_Z = glbindGetProcAddress(`glClearColorxOES`);
  if (*cast(void**)&glClearColorxOES_Z_Z is null) assert(0, `OpenGL function 'glClearColorxOES' not found!`);
  glClearColorxOES_Z_Z(red, green, blue, alpha);
}
alias glClearDepth = glClearDepth_Z_Z;
__gshared glClearDepth_Z_Z = function void (GLdouble depth) { glClearDepth_Z_Z_loader(depth); };
private void glClearDepth_Z_Z_loader (GLdouble depth) {
  *cast(void**)&glClearDepth_Z_Z = glbindGetProcAddress(`glClearDepth`);
  if (*cast(void**)&glClearDepth_Z_Z is null) assert(0, `OpenGL function 'glClearDepth' not found!`);
  glClearDepth_Z_Z(depth);
}
alias glClearDepthdNV = glClearDepthdNV_Z_Z;
__gshared glClearDepthdNV_Z_Z = function void (GLdouble depth) { glClearDepthdNV_Z_Z_loader(depth); };
private void glClearDepthdNV_Z_Z_loader (GLdouble depth) {
  *cast(void**)&glClearDepthdNV_Z_Z = glbindGetProcAddress(`glClearDepthdNV`);
  if (*cast(void**)&glClearDepthdNV_Z_Z is null) assert(0, `OpenGL function 'glClearDepthdNV' not found!`);
  glClearDepthdNV_Z_Z(depth);
}
alias glClearDepthf = glClearDepthf_Z_Z;
__gshared glClearDepthf_Z_Z = function void (GLfloat d) { glClearDepthf_Z_Z_loader(d); };
private void glClearDepthf_Z_Z_loader (GLfloat d) {
  *cast(void**)&glClearDepthf_Z_Z = glbindGetProcAddress(`glClearDepthf`);
  if (*cast(void**)&glClearDepthf_Z_Z is null) assert(0, `OpenGL function 'glClearDepthf' not found!`);
  glClearDepthf_Z_Z(d);
}
alias glClearDepthfOES = glClearDepthfOES_Z_Z;
__gshared glClearDepthfOES_Z_Z = function void (GLclampf depth) { glClearDepthfOES_Z_Z_loader(depth); };
private void glClearDepthfOES_Z_Z_loader (GLclampf depth) {
  *cast(void**)&glClearDepthfOES_Z_Z = glbindGetProcAddress(`glClearDepthfOES`);
  if (*cast(void**)&glClearDepthfOES_Z_Z is null) assert(0, `OpenGL function 'glClearDepthfOES' not found!`);
  glClearDepthfOES_Z_Z(depth);
}
alias glClearDepthx = glClearDepthx_Z_Z;
__gshared glClearDepthx_Z_Z = function void (GLfixed depth) { glClearDepthx_Z_Z_loader(depth); };
private void glClearDepthx_Z_Z_loader (GLfixed depth) {
  *cast(void**)&glClearDepthx_Z_Z = glbindGetProcAddress(`glClearDepthx`);
  if (*cast(void**)&glClearDepthx_Z_Z is null) assert(0, `OpenGL function 'glClearDepthx' not found!`);
  glClearDepthx_Z_Z(depth);
}
alias glClearDepthxOES = glClearDepthxOES_Z_Z;
__gshared glClearDepthxOES_Z_Z = function void (GLfixed depth) { glClearDepthxOES_Z_Z_loader(depth); };
private void glClearDepthxOES_Z_Z_loader (GLfixed depth) {
  *cast(void**)&glClearDepthxOES_Z_Z = glbindGetProcAddress(`glClearDepthxOES`);
  if (*cast(void**)&glClearDepthxOES_Z_Z is null) assert(0, `OpenGL function 'glClearDepthxOES' not found!`);
  glClearDepthxOES_Z_Z(depth);
}
alias glClearIndex = glClearIndex_Z_Z;
__gshared glClearIndex_Z_Z = function void (GLfloat c) { glClearIndex_Z_Z_loader(c); };
private void glClearIndex_Z_Z_loader (GLfloat c) {
  *cast(void**)&glClearIndex_Z_Z = glbindGetProcAddress(`glClearIndex`);
  if (*cast(void**)&glClearIndex_Z_Z is null) assert(0, `OpenGL function 'glClearIndex' not found!`);
  glClearIndex_Z_Z(c);
}
alias glClearNamedBufferData = glClearNamedBufferData_Z_Z;
__gshared glClearNamedBufferData_Z_Z = function void (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const(void)* data) { glClearNamedBufferData_Z_Z_loader(buffer, internalformat, format, type, data); };
private void glClearNamedBufferData_Z_Z_loader (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearNamedBufferData_Z_Z = glbindGetProcAddress(`glClearNamedBufferData`);
  if (*cast(void**)&glClearNamedBufferData_Z_Z is null) assert(0, `OpenGL function 'glClearNamedBufferData' not found!`);
  glClearNamedBufferData_Z_Z(buffer, internalformat, format, type, data);
}
alias glClearNamedBufferDataEXT = glClearNamedBufferDataEXT_Z_Z;
__gshared glClearNamedBufferDataEXT_Z_Z = function void (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const(void)* data) { glClearNamedBufferDataEXT_Z_Z_loader(buffer, internalformat, format, type, data); };
private void glClearNamedBufferDataEXT_Z_Z_loader (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearNamedBufferDataEXT_Z_Z = glbindGetProcAddress(`glClearNamedBufferDataEXT`);
  if (*cast(void**)&glClearNamedBufferDataEXT_Z_Z is null) assert(0, `OpenGL function 'glClearNamedBufferDataEXT' not found!`);
  glClearNamedBufferDataEXT_Z_Z(buffer, internalformat, format, type, data);
}
alias glClearNamedBufferSubData = glClearNamedBufferSubData_Z_Z;
__gshared glClearNamedBufferSubData_Z_Z = function void (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const(void)* data) { glClearNamedBufferSubData_Z_Z_loader(buffer, internalformat, offset, size, format, type, data); };
private void glClearNamedBufferSubData_Z_Z_loader (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearNamedBufferSubData_Z_Z = glbindGetProcAddress(`glClearNamedBufferSubData`);
  if (*cast(void**)&glClearNamedBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glClearNamedBufferSubData' not found!`);
  glClearNamedBufferSubData_Z_Z(buffer, internalformat, offset, size, format, type, data);
}
alias glClearNamedBufferSubDataEXT = glClearNamedBufferSubDataEXT_Z_Z;
__gshared glClearNamedBufferSubDataEXT_Z_Z = function void (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const(void)* data) { glClearNamedBufferSubDataEXT_Z_Z_loader(buffer, internalformat, offset, size, format, type, data); };
private void glClearNamedBufferSubDataEXT_Z_Z_loader (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearNamedBufferSubDataEXT_Z_Z = glbindGetProcAddress(`glClearNamedBufferSubDataEXT`);
  if (*cast(void**)&glClearNamedBufferSubDataEXT_Z_Z is null) assert(0, `OpenGL function 'glClearNamedBufferSubDataEXT' not found!`);
  glClearNamedBufferSubDataEXT_Z_Z(buffer, internalformat, offset, size, format, type, data);
}
alias glClearNamedFramebufferfi = glClearNamedFramebufferfi_Z_Z;
__gshared glClearNamedFramebufferfi_Z_Z = function void (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { glClearNamedFramebufferfi_Z_Z_loader(framebuffer, buffer, drawbuffer, depth, stencil); };
private void glClearNamedFramebufferfi_Z_Z_loader (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  *cast(void**)&glClearNamedFramebufferfi_Z_Z = glbindGetProcAddress(`glClearNamedFramebufferfi`);
  if (*cast(void**)&glClearNamedFramebufferfi_Z_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferfi' not found!`);
  glClearNamedFramebufferfi_Z_Z(framebuffer, buffer, drawbuffer, depth, stencil);
}
alias glClearNamedFramebufferfv = glClearNamedFramebufferfv_Z_Z;
__gshared glClearNamedFramebufferfv_Z_Z = function void (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const(GLfloat)* value) { glClearNamedFramebufferfv_Z_Z_loader(framebuffer, buffer, drawbuffer, value); };
private void glClearNamedFramebufferfv_Z_Z_loader (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const(GLfloat)* value) {
  *cast(void**)&glClearNamedFramebufferfv_Z_Z = glbindGetProcAddress(`glClearNamedFramebufferfv`);
  if (*cast(void**)&glClearNamedFramebufferfv_Z_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferfv' not found!`);
  glClearNamedFramebufferfv_Z_Z(framebuffer, buffer, drawbuffer, value);
}
alias glClearNamedFramebufferiv = glClearNamedFramebufferiv_Z_Z;
__gshared glClearNamedFramebufferiv_Z_Z = function void (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const(GLint)* value) { glClearNamedFramebufferiv_Z_Z_loader(framebuffer, buffer, drawbuffer, value); };
private void glClearNamedFramebufferiv_Z_Z_loader (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const(GLint)* value) {
  *cast(void**)&glClearNamedFramebufferiv_Z_Z = glbindGetProcAddress(`glClearNamedFramebufferiv`);
  if (*cast(void**)&glClearNamedFramebufferiv_Z_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferiv' not found!`);
  glClearNamedFramebufferiv_Z_Z(framebuffer, buffer, drawbuffer, value);
}
alias glClearNamedFramebufferuiv = glClearNamedFramebufferuiv_Z_Z;
__gshared glClearNamedFramebufferuiv_Z_Z = function void (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const(GLuint)* value) { glClearNamedFramebufferuiv_Z_Z_loader(framebuffer, buffer, drawbuffer, value); };
private void glClearNamedFramebufferuiv_Z_Z_loader (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const(GLuint)* value) {
  *cast(void**)&glClearNamedFramebufferuiv_Z_Z = glbindGetProcAddress(`glClearNamedFramebufferuiv`);
  if (*cast(void**)&glClearNamedFramebufferuiv_Z_Z is null) assert(0, `OpenGL function 'glClearNamedFramebufferuiv' not found!`);
  glClearNamedFramebufferuiv_Z_Z(framebuffer, buffer, drawbuffer, value);
}
alias glClearPixelLocalStorageuiEXT = glClearPixelLocalStorageuiEXT_Z_Z;
__gshared glClearPixelLocalStorageuiEXT_Z_Z = function void (GLsizei offset, GLsizei n, const(GLuint)* values) { glClearPixelLocalStorageuiEXT_Z_Z_loader(offset, n, values); };
private void glClearPixelLocalStorageuiEXT_Z_Z_loader (GLsizei offset, GLsizei n, const(GLuint)* values) {
  *cast(void**)&glClearPixelLocalStorageuiEXT_Z_Z = glbindGetProcAddress(`glClearPixelLocalStorageuiEXT`);
  if (*cast(void**)&glClearPixelLocalStorageuiEXT_Z_Z is null) assert(0, `OpenGL function 'glClearPixelLocalStorageuiEXT' not found!`);
  glClearPixelLocalStorageuiEXT_Z_Z(offset, n, values);
}
alias glClearStencil = glClearStencil_Z_Z;
__gshared glClearStencil_Z_Z = function void (GLint s) { glClearStencil_Z_Z_loader(s); };
private void glClearStencil_Z_Z_loader (GLint s) {
  *cast(void**)&glClearStencil_Z_Z = glbindGetProcAddress(`glClearStencil`);
  if (*cast(void**)&glClearStencil_Z_Z is null) assert(0, `OpenGL function 'glClearStencil' not found!`);
  glClearStencil_Z_Z(s);
}
alias glClearTexImage = glClearTexImage_Z_Z;
__gshared glClearTexImage_Z_Z = function void (GLuint texture, GLint level, GLenum format, GLenum type, const(void)* data) { glClearTexImage_Z_Z_loader(texture, level, format, type, data); };
private void glClearTexImage_Z_Z_loader (GLuint texture, GLint level, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearTexImage_Z_Z = glbindGetProcAddress(`glClearTexImage`);
  if (*cast(void**)&glClearTexImage_Z_Z is null) assert(0, `OpenGL function 'glClearTexImage' not found!`);
  glClearTexImage_Z_Z(texture, level, format, type, data);
}
alias glClearTexImageEXT = glClearTexImageEXT_Z_Z;
__gshared glClearTexImageEXT_Z_Z = function void (GLuint texture, GLint level, GLenum format, GLenum type, const(void)* data) { glClearTexImageEXT_Z_Z_loader(texture, level, format, type, data); };
private void glClearTexImageEXT_Z_Z_loader (GLuint texture, GLint level, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearTexImageEXT_Z_Z = glbindGetProcAddress(`glClearTexImageEXT`);
  if (*cast(void**)&glClearTexImageEXT_Z_Z is null) assert(0, `OpenGL function 'glClearTexImageEXT' not found!`);
  glClearTexImageEXT_Z_Z(texture, level, format, type, data);
}
alias glClearTexSubImage = glClearTexSubImage_Z_Z;
__gshared glClearTexSubImage_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* data) { glClearTexSubImage_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); };
private void glClearTexSubImage_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearTexSubImage_Z_Z = glbindGetProcAddress(`glClearTexSubImage`);
  if (*cast(void**)&glClearTexSubImage_Z_Z is null) assert(0, `OpenGL function 'glClearTexSubImage' not found!`);
  glClearTexSubImage_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}
alias glClearTexSubImageEXT = glClearTexSubImageEXT_Z_Z;
__gshared glClearTexSubImageEXT_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* data) { glClearTexSubImageEXT_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); };
private void glClearTexSubImageEXT_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glClearTexSubImageEXT_Z_Z = glbindGetProcAddress(`glClearTexSubImageEXT`);
  if (*cast(void**)&glClearTexSubImageEXT_Z_Z is null) assert(0, `OpenGL function 'glClearTexSubImageEXT' not found!`);
  glClearTexSubImageEXT_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}
alias glClientActiveTexture = glClientActiveTexture_Z_Z;
__gshared glClientActiveTexture_Z_Z = function void (GLenum texture) { glClientActiveTexture_Z_Z_loader(texture); };
private void glClientActiveTexture_Z_Z_loader (GLenum texture) {
  *cast(void**)&glClientActiveTexture_Z_Z = glbindGetProcAddress(`glClientActiveTexture`);
  if (*cast(void**)&glClientActiveTexture_Z_Z is null) assert(0, `OpenGL function 'glClientActiveTexture' not found!`);
  glClientActiveTexture_Z_Z(texture);
}
alias glClientActiveTextureARB = glClientActiveTextureARB_Z_Z;
__gshared glClientActiveTextureARB_Z_Z = function void (GLenum texture) { glClientActiveTextureARB_Z_Z_loader(texture); };
private void glClientActiveTextureARB_Z_Z_loader (GLenum texture) {
  *cast(void**)&glClientActiveTextureARB_Z_Z = glbindGetProcAddress(`glClientActiveTextureARB`);
  if (*cast(void**)&glClientActiveTextureARB_Z_Z is null) assert(0, `OpenGL function 'glClientActiveTextureARB' not found!`);
  glClientActiveTextureARB_Z_Z(texture);
}
alias glClientActiveVertexStreamATI = glClientActiveVertexStreamATI_Z_Z;
__gshared glClientActiveVertexStreamATI_Z_Z = function void (GLenum stream) { glClientActiveVertexStreamATI_Z_Z_loader(stream); };
private void glClientActiveVertexStreamATI_Z_Z_loader (GLenum stream) {
  *cast(void**)&glClientActiveVertexStreamATI_Z_Z = glbindGetProcAddress(`glClientActiveVertexStreamATI`);
  if (*cast(void**)&glClientActiveVertexStreamATI_Z_Z is null) assert(0, `OpenGL function 'glClientActiveVertexStreamATI' not found!`);
  glClientActiveVertexStreamATI_Z_Z(stream);
}
alias glClientAttribDefaultEXT = glClientAttribDefaultEXT_Z_Z;
__gshared glClientAttribDefaultEXT_Z_Z = function void (GLbitfield mask) { glClientAttribDefaultEXT_Z_Z_loader(mask); };
private void glClientAttribDefaultEXT_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glClientAttribDefaultEXT_Z_Z = glbindGetProcAddress(`glClientAttribDefaultEXT`);
  if (*cast(void**)&glClientAttribDefaultEXT_Z_Z is null) assert(0, `OpenGL function 'glClientAttribDefaultEXT' not found!`);
  glClientAttribDefaultEXT_Z_Z(mask);
}
alias glClientWaitSync = glClientWaitSync_Z_Z;
__gshared glClientWaitSync_Z_Z = function GLenum (GLsync sync, GLbitfield flags, GLuint64 timeout) { return glClientWaitSync_Z_Z_loader(sync, flags, timeout); };
private GLenum glClientWaitSync_Z_Z_loader (GLsync sync, GLbitfield flags, GLuint64 timeout) {
  *cast(void**)&glClientWaitSync_Z_Z = glbindGetProcAddress(`glClientWaitSync`);
  if (*cast(void**)&glClientWaitSync_Z_Z is null) assert(0, `OpenGL function 'glClientWaitSync' not found!`);
  return glClientWaitSync_Z_Z(sync, flags, timeout);
}
alias glClientWaitSyncAPPLE = glClientWaitSyncAPPLE_Z_Z;
__gshared glClientWaitSyncAPPLE_Z_Z = function GLenum (GLsync sync, GLbitfield flags, GLuint64 timeout) { return glClientWaitSyncAPPLE_Z_Z_loader(sync, flags, timeout); };
private GLenum glClientWaitSyncAPPLE_Z_Z_loader (GLsync sync, GLbitfield flags, GLuint64 timeout) {
  *cast(void**)&glClientWaitSyncAPPLE_Z_Z = glbindGetProcAddress(`glClientWaitSyncAPPLE`);
  if (*cast(void**)&glClientWaitSyncAPPLE_Z_Z is null) assert(0, `OpenGL function 'glClientWaitSyncAPPLE' not found!`);
  return glClientWaitSyncAPPLE_Z_Z(sync, flags, timeout);
}
alias glClipControl = glClipControl_Z_Z;
__gshared glClipControl_Z_Z = function void (GLenum origin, GLenum depth) { glClipControl_Z_Z_loader(origin, depth); };
private void glClipControl_Z_Z_loader (GLenum origin, GLenum depth) {
  *cast(void**)&glClipControl_Z_Z = glbindGetProcAddress(`glClipControl`);
  if (*cast(void**)&glClipControl_Z_Z is null) assert(0, `OpenGL function 'glClipControl' not found!`);
  glClipControl_Z_Z(origin, depth);
}
alias glClipPlane = glClipPlane_Z_Z;
__gshared glClipPlane_Z_Z = function void (GLenum plane, const(GLdouble)* equation) { glClipPlane_Z_Z_loader(plane, equation); };
private void glClipPlane_Z_Z_loader (GLenum plane, const(GLdouble)* equation) {
  *cast(void**)&glClipPlane_Z_Z = glbindGetProcAddress(`glClipPlane`);
  if (*cast(void**)&glClipPlane_Z_Z is null) assert(0, `OpenGL function 'glClipPlane' not found!`);
  glClipPlane_Z_Z(plane, equation);
}
alias glClipPlanef = glClipPlanef_Z_Z;
__gshared glClipPlanef_Z_Z = function void (GLenum p, const(GLfloat)* eqn) { glClipPlanef_Z_Z_loader(p, eqn); };
private void glClipPlanef_Z_Z_loader (GLenum p, const(GLfloat)* eqn) {
  *cast(void**)&glClipPlanef_Z_Z = glbindGetProcAddress(`glClipPlanef`);
  if (*cast(void**)&glClipPlanef_Z_Z is null) assert(0, `OpenGL function 'glClipPlanef' not found!`);
  glClipPlanef_Z_Z(p, eqn);
}
alias glClipPlanefIMG = glClipPlanefIMG_Z_Z;
__gshared glClipPlanefIMG_Z_Z = function void (GLenum p, const(GLfloat)* eqn) { glClipPlanefIMG_Z_Z_loader(p, eqn); };
private void glClipPlanefIMG_Z_Z_loader (GLenum p, const(GLfloat)* eqn) {
  *cast(void**)&glClipPlanefIMG_Z_Z = glbindGetProcAddress(`glClipPlanefIMG`);
  if (*cast(void**)&glClipPlanefIMG_Z_Z is null) assert(0, `OpenGL function 'glClipPlanefIMG' not found!`);
  glClipPlanefIMG_Z_Z(p, eqn);
}
alias glClipPlanefOES = glClipPlanefOES_Z_Z;
__gshared glClipPlanefOES_Z_Z = function void (GLenum plane, const(GLfloat)* equation) { glClipPlanefOES_Z_Z_loader(plane, equation); };
private void glClipPlanefOES_Z_Z_loader (GLenum plane, const(GLfloat)* equation) {
  *cast(void**)&glClipPlanefOES_Z_Z = glbindGetProcAddress(`glClipPlanefOES`);
  if (*cast(void**)&glClipPlanefOES_Z_Z is null) assert(0, `OpenGL function 'glClipPlanefOES' not found!`);
  glClipPlanefOES_Z_Z(plane, equation);
}
alias glClipPlanex = glClipPlanex_Z_Z;
__gshared glClipPlanex_Z_Z = function void (GLenum plane, const(GLfixed)* equation) { glClipPlanex_Z_Z_loader(plane, equation); };
private void glClipPlanex_Z_Z_loader (GLenum plane, const(GLfixed)* equation) {
  *cast(void**)&glClipPlanex_Z_Z = glbindGetProcAddress(`glClipPlanex`);
  if (*cast(void**)&glClipPlanex_Z_Z is null) assert(0, `OpenGL function 'glClipPlanex' not found!`);
  glClipPlanex_Z_Z(plane, equation);
}
alias glClipPlanexIMG = glClipPlanexIMG_Z_Z;
__gshared glClipPlanexIMG_Z_Z = function void (GLenum p, const(GLfixed)* eqn) { glClipPlanexIMG_Z_Z_loader(p, eqn); };
private void glClipPlanexIMG_Z_Z_loader (GLenum p, const(GLfixed)* eqn) {
  *cast(void**)&glClipPlanexIMG_Z_Z = glbindGetProcAddress(`glClipPlanexIMG`);
  if (*cast(void**)&glClipPlanexIMG_Z_Z is null) assert(0, `OpenGL function 'glClipPlanexIMG' not found!`);
  glClipPlanexIMG_Z_Z(p, eqn);
}
alias glClipPlanexOES = glClipPlanexOES_Z_Z;
__gshared glClipPlanexOES_Z_Z = function void (GLenum plane, const(GLfixed)* equation) { glClipPlanexOES_Z_Z_loader(plane, equation); };
private void glClipPlanexOES_Z_Z_loader (GLenum plane, const(GLfixed)* equation) {
  *cast(void**)&glClipPlanexOES_Z_Z = glbindGetProcAddress(`glClipPlanexOES`);
  if (*cast(void**)&glClipPlanexOES_Z_Z is null) assert(0, `OpenGL function 'glClipPlanexOES' not found!`);
  glClipPlanexOES_Z_Z(plane, equation);
}
alias glColor3b = glColor3b_Z_Z;
__gshared glColor3b_Z_Z = function void (GLbyte red, GLbyte green, GLbyte blue) { glColor3b_Z_Z_loader(red, green, blue); };
private void glColor3b_Z_Z_loader (GLbyte red, GLbyte green, GLbyte blue) {
  *cast(void**)&glColor3b_Z_Z = glbindGetProcAddress(`glColor3b`);
  if (*cast(void**)&glColor3b_Z_Z is null) assert(0, `OpenGL function 'glColor3b' not found!`);
  glColor3b_Z_Z(red, green, blue);
}
alias glColor3bv = glColor3bv_Z_Z;
__gshared glColor3bv_Z_Z = function void (const(GLbyte)* v) { glColor3bv_Z_Z_loader(v); };
private void glColor3bv_Z_Z_loader (const(GLbyte)* v) {
  *cast(void**)&glColor3bv_Z_Z = glbindGetProcAddress(`glColor3bv`);
  if (*cast(void**)&glColor3bv_Z_Z is null) assert(0, `OpenGL function 'glColor3bv' not found!`);
  glColor3bv_Z_Z(v);
}
alias glColor3d = glColor3d_Z_Z;
__gshared glColor3d_Z_Z = function void (GLdouble red, GLdouble green, GLdouble blue) { glColor3d_Z_Z_loader(red, green, blue); };
private void glColor3d_Z_Z_loader (GLdouble red, GLdouble green, GLdouble blue) {
  *cast(void**)&glColor3d_Z_Z = glbindGetProcAddress(`glColor3d`);
  if (*cast(void**)&glColor3d_Z_Z is null) assert(0, `OpenGL function 'glColor3d' not found!`);
  glColor3d_Z_Z(red, green, blue);
}
alias glColor3dv = glColor3dv_Z_Z;
__gshared glColor3dv_Z_Z = function void (const(GLdouble)* v) { glColor3dv_Z_Z_loader(v); };
private void glColor3dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glColor3dv_Z_Z = glbindGetProcAddress(`glColor3dv`);
  if (*cast(void**)&glColor3dv_Z_Z is null) assert(0, `OpenGL function 'glColor3dv' not found!`);
  glColor3dv_Z_Z(v);
}
alias glColor3f = glColor3f_Z_Z;
__gshared glColor3f_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue) { glColor3f_Z_Z_loader(red, green, blue); };
private void glColor3f_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue) {
  *cast(void**)&glColor3f_Z_Z = glbindGetProcAddress(`glColor3f`);
  if (*cast(void**)&glColor3f_Z_Z is null) assert(0, `OpenGL function 'glColor3f' not found!`);
  glColor3f_Z_Z(red, green, blue);
}
alias glColor3fVertex3fSUN = glColor3fVertex3fSUN_Z_Z;
__gshared glColor3fVertex3fSUN_Z_Z = function void (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { glColor3fVertex3fSUN_Z_Z_loader(r, g, b, x, y, z); };
private void glColor3fVertex3fSUN_Z_Z_loader (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glColor3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glColor3fVertex3fSUN`);
  if (*cast(void**)&glColor3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glColor3fVertex3fSUN' not found!`);
  glColor3fVertex3fSUN_Z_Z(r, g, b, x, y, z);
}
alias glColor3fVertex3fvSUN = glColor3fVertex3fvSUN_Z_Z;
__gshared glColor3fVertex3fvSUN_Z_Z = function void (const(GLfloat)* c, const(GLfloat)* v) { glColor3fVertex3fvSUN_Z_Z_loader(c, v); };
private void glColor3fVertex3fvSUN_Z_Z_loader (const(GLfloat)* c, const(GLfloat)* v) {
  *cast(void**)&glColor3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glColor3fVertex3fvSUN`);
  if (*cast(void**)&glColor3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glColor3fVertex3fvSUN' not found!`);
  glColor3fVertex3fvSUN_Z_Z(c, v);
}
alias glColor3fv = glColor3fv_Z_Z;
__gshared glColor3fv_Z_Z = function void (const(GLfloat)* v) { glColor3fv_Z_Z_loader(v); };
private void glColor3fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glColor3fv_Z_Z = glbindGetProcAddress(`glColor3fv`);
  if (*cast(void**)&glColor3fv_Z_Z is null) assert(0, `OpenGL function 'glColor3fv' not found!`);
  glColor3fv_Z_Z(v);
}
alias glColor3hNV = glColor3hNV_Z_Z;
__gshared glColor3hNV_Z_Z = function void (GLhalfNV red, GLhalfNV green, GLhalfNV blue) { glColor3hNV_Z_Z_loader(red, green, blue); };
private void glColor3hNV_Z_Z_loader (GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  *cast(void**)&glColor3hNV_Z_Z = glbindGetProcAddress(`glColor3hNV`);
  if (*cast(void**)&glColor3hNV_Z_Z is null) assert(0, `OpenGL function 'glColor3hNV' not found!`);
  glColor3hNV_Z_Z(red, green, blue);
}
alias glColor3hvNV = glColor3hvNV_Z_Z;
__gshared glColor3hvNV_Z_Z = function void (const(GLhalfNV)* v) { glColor3hvNV_Z_Z_loader(v); };
private void glColor3hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glColor3hvNV_Z_Z = glbindGetProcAddress(`glColor3hvNV`);
  if (*cast(void**)&glColor3hvNV_Z_Z is null) assert(0, `OpenGL function 'glColor3hvNV' not found!`);
  glColor3hvNV_Z_Z(v);
}
alias glColor3i = glColor3i_Z_Z;
__gshared glColor3i_Z_Z = function void (GLint red, GLint green, GLint blue) { glColor3i_Z_Z_loader(red, green, blue); };
private void glColor3i_Z_Z_loader (GLint red, GLint green, GLint blue) {
  *cast(void**)&glColor3i_Z_Z = glbindGetProcAddress(`glColor3i`);
  if (*cast(void**)&glColor3i_Z_Z is null) assert(0, `OpenGL function 'glColor3i' not found!`);
  glColor3i_Z_Z(red, green, blue);
}
alias glColor3iv = glColor3iv_Z_Z;
__gshared glColor3iv_Z_Z = function void (const(GLint)* v) { glColor3iv_Z_Z_loader(v); };
private void glColor3iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glColor3iv_Z_Z = glbindGetProcAddress(`glColor3iv`);
  if (*cast(void**)&glColor3iv_Z_Z is null) assert(0, `OpenGL function 'glColor3iv' not found!`);
  glColor3iv_Z_Z(v);
}
alias glColor3s = glColor3s_Z_Z;
__gshared glColor3s_Z_Z = function void (GLshort red, GLshort green, GLshort blue) { glColor3s_Z_Z_loader(red, green, blue); };
private void glColor3s_Z_Z_loader (GLshort red, GLshort green, GLshort blue) {
  *cast(void**)&glColor3s_Z_Z = glbindGetProcAddress(`glColor3s`);
  if (*cast(void**)&glColor3s_Z_Z is null) assert(0, `OpenGL function 'glColor3s' not found!`);
  glColor3s_Z_Z(red, green, blue);
}
alias glColor3sv = glColor3sv_Z_Z;
__gshared glColor3sv_Z_Z = function void (const(GLshort)* v) { glColor3sv_Z_Z_loader(v); };
private void glColor3sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glColor3sv_Z_Z = glbindGetProcAddress(`glColor3sv`);
  if (*cast(void**)&glColor3sv_Z_Z is null) assert(0, `OpenGL function 'glColor3sv' not found!`);
  glColor3sv_Z_Z(v);
}
alias glColor3ub = glColor3ub_Z_Z;
__gshared glColor3ub_Z_Z = function void (GLubyte red, GLubyte green, GLubyte blue) { glColor3ub_Z_Z_loader(red, green, blue); };
private void glColor3ub_Z_Z_loader (GLubyte red, GLubyte green, GLubyte blue) {
  *cast(void**)&glColor3ub_Z_Z = glbindGetProcAddress(`glColor3ub`);
  if (*cast(void**)&glColor3ub_Z_Z is null) assert(0, `OpenGL function 'glColor3ub' not found!`);
  glColor3ub_Z_Z(red, green, blue);
}
alias glColor3ubv = glColor3ubv_Z_Z;
__gshared glColor3ubv_Z_Z = function void (const(GLubyte)* v) { glColor3ubv_Z_Z_loader(v); };
private void glColor3ubv_Z_Z_loader (const(GLubyte)* v) {
  *cast(void**)&glColor3ubv_Z_Z = glbindGetProcAddress(`glColor3ubv`);
  if (*cast(void**)&glColor3ubv_Z_Z is null) assert(0, `OpenGL function 'glColor3ubv' not found!`);
  glColor3ubv_Z_Z(v);
}
alias glColor3ui = glColor3ui_Z_Z;
__gshared glColor3ui_Z_Z = function void (GLuint red, GLuint green, GLuint blue) { glColor3ui_Z_Z_loader(red, green, blue); };
private void glColor3ui_Z_Z_loader (GLuint red, GLuint green, GLuint blue) {
  *cast(void**)&glColor3ui_Z_Z = glbindGetProcAddress(`glColor3ui`);
  if (*cast(void**)&glColor3ui_Z_Z is null) assert(0, `OpenGL function 'glColor3ui' not found!`);
  glColor3ui_Z_Z(red, green, blue);
}
alias glColor3uiv = glColor3uiv_Z_Z;
__gshared glColor3uiv_Z_Z = function void (const(GLuint)* v) { glColor3uiv_Z_Z_loader(v); };
private void glColor3uiv_Z_Z_loader (const(GLuint)* v) {
  *cast(void**)&glColor3uiv_Z_Z = glbindGetProcAddress(`glColor3uiv`);
  if (*cast(void**)&glColor3uiv_Z_Z is null) assert(0, `OpenGL function 'glColor3uiv' not found!`);
  glColor3uiv_Z_Z(v);
}
alias glColor3us = glColor3us_Z_Z;
__gshared glColor3us_Z_Z = function void (GLushort red, GLushort green, GLushort blue) { glColor3us_Z_Z_loader(red, green, blue); };
private void glColor3us_Z_Z_loader (GLushort red, GLushort green, GLushort blue) {
  *cast(void**)&glColor3us_Z_Z = glbindGetProcAddress(`glColor3us`);
  if (*cast(void**)&glColor3us_Z_Z is null) assert(0, `OpenGL function 'glColor3us' not found!`);
  glColor3us_Z_Z(red, green, blue);
}
alias glColor3usv = glColor3usv_Z_Z;
__gshared glColor3usv_Z_Z = function void (const(GLushort)* v) { glColor3usv_Z_Z_loader(v); };
private void glColor3usv_Z_Z_loader (const(GLushort)* v) {
  *cast(void**)&glColor3usv_Z_Z = glbindGetProcAddress(`glColor3usv`);
  if (*cast(void**)&glColor3usv_Z_Z is null) assert(0, `OpenGL function 'glColor3usv' not found!`);
  glColor3usv_Z_Z(v);
}
alias glColor3xOES = glColor3xOES_Z_Z;
__gshared glColor3xOES_Z_Z = function void (GLfixed red, GLfixed green, GLfixed blue) { glColor3xOES_Z_Z_loader(red, green, blue); };
private void glColor3xOES_Z_Z_loader (GLfixed red, GLfixed green, GLfixed blue) {
  *cast(void**)&glColor3xOES_Z_Z = glbindGetProcAddress(`glColor3xOES`);
  if (*cast(void**)&glColor3xOES_Z_Z is null) assert(0, `OpenGL function 'glColor3xOES' not found!`);
  glColor3xOES_Z_Z(red, green, blue);
}
alias glColor3xvOES = glColor3xvOES_Z_Z;
__gshared glColor3xvOES_Z_Z = function void (const(GLfixed)* components) { glColor3xvOES_Z_Z_loader(components); };
private void glColor3xvOES_Z_Z_loader (const(GLfixed)* components) {
  *cast(void**)&glColor3xvOES_Z_Z = glbindGetProcAddress(`glColor3xvOES`);
  if (*cast(void**)&glColor3xvOES_Z_Z is null) assert(0, `OpenGL function 'glColor3xvOES' not found!`);
  glColor3xvOES_Z_Z(components);
}
alias glColor4b = glColor4b_Z_Z;
__gshared glColor4b_Z_Z = function void (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { glColor4b_Z_Z_loader(red, green, blue, alpha); };
private void glColor4b_Z_Z_loader (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
  *cast(void**)&glColor4b_Z_Z = glbindGetProcAddress(`glColor4b`);
  if (*cast(void**)&glColor4b_Z_Z is null) assert(0, `OpenGL function 'glColor4b' not found!`);
  glColor4b_Z_Z(red, green, blue, alpha);
}
alias glColor4bv = glColor4bv_Z_Z;
__gshared glColor4bv_Z_Z = function void (const(GLbyte)* v) { glColor4bv_Z_Z_loader(v); };
private void glColor4bv_Z_Z_loader (const(GLbyte)* v) {
  *cast(void**)&glColor4bv_Z_Z = glbindGetProcAddress(`glColor4bv`);
  if (*cast(void**)&glColor4bv_Z_Z is null) assert(0, `OpenGL function 'glColor4bv' not found!`);
  glColor4bv_Z_Z(v);
}
alias glColor4d = glColor4d_Z_Z;
__gshared glColor4d_Z_Z = function void (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { glColor4d_Z_Z_loader(red, green, blue, alpha); };
private void glColor4d_Z_Z_loader (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
  *cast(void**)&glColor4d_Z_Z = glbindGetProcAddress(`glColor4d`);
  if (*cast(void**)&glColor4d_Z_Z is null) assert(0, `OpenGL function 'glColor4d' not found!`);
  glColor4d_Z_Z(red, green, blue, alpha);
}
alias glColor4dv = glColor4dv_Z_Z;
__gshared glColor4dv_Z_Z = function void (const(GLdouble)* v) { glColor4dv_Z_Z_loader(v); };
private void glColor4dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glColor4dv_Z_Z = glbindGetProcAddress(`glColor4dv`);
  if (*cast(void**)&glColor4dv_Z_Z is null) assert(0, `OpenGL function 'glColor4dv' not found!`);
  glColor4dv_Z_Z(v);
}
alias glColor4f = glColor4f_Z_Z;
__gshared glColor4f_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { glColor4f_Z_Z_loader(red, green, blue, alpha); };
private void glColor4f_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  *cast(void**)&glColor4f_Z_Z = glbindGetProcAddress(`glColor4f`);
  if (*cast(void**)&glColor4f_Z_Z is null) assert(0, `OpenGL function 'glColor4f' not found!`);
  glColor4f_Z_Z(red, green, blue, alpha);
}
alias glColor4fNormal3fVertex3fSUN = glColor4fNormal3fVertex3fSUN_Z_Z;
__gshared glColor4fNormal3fVertex3fSUN_Z_Z = function void (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glColor4fNormal3fVertex3fSUN_Z_Z_loader(r, g, b, a, nx, ny, nz, x, y, z); };
private void glColor4fNormal3fVertex3fSUN_Z_Z_loader (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glColor4fNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glColor4fNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fSUN' not found!`);
  glColor4fNormal3fVertex3fSUN_Z_Z(r, g, b, a, nx, ny, nz, x, y, z);
}
alias glColor4fNormal3fVertex3fvSUN = glColor4fNormal3fVertex3fvSUN_Z_Z;
__gshared glColor4fNormal3fVertex3fvSUN_Z_Z = function void (const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) { glColor4fNormal3fVertex3fvSUN_Z_Z_loader(c, n, v); };
private void glColor4fNormal3fVertex3fvSUN_Z_Z_loader (const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glColor4fNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glColor4fNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fvSUN' not found!`);
  glColor4fNormal3fVertex3fvSUN_Z_Z(c, n, v);
}
alias glColor4fv = glColor4fv_Z_Z;
__gshared glColor4fv_Z_Z = function void (const(GLfloat)* v) { glColor4fv_Z_Z_loader(v); };
private void glColor4fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glColor4fv_Z_Z = glbindGetProcAddress(`glColor4fv`);
  if (*cast(void**)&glColor4fv_Z_Z is null) assert(0, `OpenGL function 'glColor4fv' not found!`);
  glColor4fv_Z_Z(v);
}
alias glColor4hNV = glColor4hNV_Z_Z;
__gshared glColor4hNV_Z_Z = function void (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { glColor4hNV_Z_Z_loader(red, green, blue, alpha); };
private void glColor4hNV_Z_Z_loader (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {
  *cast(void**)&glColor4hNV_Z_Z = glbindGetProcAddress(`glColor4hNV`);
  if (*cast(void**)&glColor4hNV_Z_Z is null) assert(0, `OpenGL function 'glColor4hNV' not found!`);
  glColor4hNV_Z_Z(red, green, blue, alpha);
}
alias glColor4hvNV = glColor4hvNV_Z_Z;
__gshared glColor4hvNV_Z_Z = function void (const(GLhalfNV)* v) { glColor4hvNV_Z_Z_loader(v); };
private void glColor4hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glColor4hvNV_Z_Z = glbindGetProcAddress(`glColor4hvNV`);
  if (*cast(void**)&glColor4hvNV_Z_Z is null) assert(0, `OpenGL function 'glColor4hvNV' not found!`);
  glColor4hvNV_Z_Z(v);
}
alias glColor4i = glColor4i_Z_Z;
__gshared glColor4i_Z_Z = function void (GLint red, GLint green, GLint blue, GLint alpha) { glColor4i_Z_Z_loader(red, green, blue, alpha); };
private void glColor4i_Z_Z_loader (GLint red, GLint green, GLint blue, GLint alpha) {
  *cast(void**)&glColor4i_Z_Z = glbindGetProcAddress(`glColor4i`);
  if (*cast(void**)&glColor4i_Z_Z is null) assert(0, `OpenGL function 'glColor4i' not found!`);
  glColor4i_Z_Z(red, green, blue, alpha);
}
alias glColor4iv = glColor4iv_Z_Z;
__gshared glColor4iv_Z_Z = function void (const(GLint)* v) { glColor4iv_Z_Z_loader(v); };
private void glColor4iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glColor4iv_Z_Z = glbindGetProcAddress(`glColor4iv`);
  if (*cast(void**)&glColor4iv_Z_Z is null) assert(0, `OpenGL function 'glColor4iv' not found!`);
  glColor4iv_Z_Z(v);
}
alias glColor4s = glColor4s_Z_Z;
__gshared glColor4s_Z_Z = function void (GLshort red, GLshort green, GLshort blue, GLshort alpha) { glColor4s_Z_Z_loader(red, green, blue, alpha); };
private void glColor4s_Z_Z_loader (GLshort red, GLshort green, GLshort blue, GLshort alpha) {
  *cast(void**)&glColor4s_Z_Z = glbindGetProcAddress(`glColor4s`);
  if (*cast(void**)&glColor4s_Z_Z is null) assert(0, `OpenGL function 'glColor4s' not found!`);
  glColor4s_Z_Z(red, green, blue, alpha);
}
alias glColor4sv = glColor4sv_Z_Z;
__gshared glColor4sv_Z_Z = function void (const(GLshort)* v) { glColor4sv_Z_Z_loader(v); };
private void glColor4sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glColor4sv_Z_Z = glbindGetProcAddress(`glColor4sv`);
  if (*cast(void**)&glColor4sv_Z_Z is null) assert(0, `OpenGL function 'glColor4sv' not found!`);
  glColor4sv_Z_Z(v);
}
alias glColor4ub = glColor4ub_Z_Z;
__gshared glColor4ub_Z_Z = function void (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { glColor4ub_Z_Z_loader(red, green, blue, alpha); };
private void glColor4ub_Z_Z_loader (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
  *cast(void**)&glColor4ub_Z_Z = glbindGetProcAddress(`glColor4ub`);
  if (*cast(void**)&glColor4ub_Z_Z is null) assert(0, `OpenGL function 'glColor4ub' not found!`);
  glColor4ub_Z_Z(red, green, blue, alpha);
}
alias glColor4ubVertex2fSUN = glColor4ubVertex2fSUN_Z_Z;
__gshared glColor4ubVertex2fSUN_Z_Z = function void (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { glColor4ubVertex2fSUN_Z_Z_loader(r, g, b, a, x, y); };
private void glColor4ubVertex2fSUN_Z_Z_loader (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {
  *cast(void**)&glColor4ubVertex2fSUN_Z_Z = glbindGetProcAddress(`glColor4ubVertex2fSUN`);
  if (*cast(void**)&glColor4ubVertex2fSUN_Z_Z is null) assert(0, `OpenGL function 'glColor4ubVertex2fSUN' not found!`);
  glColor4ubVertex2fSUN_Z_Z(r, g, b, a, x, y);
}
alias glColor4ubVertex2fvSUN = glColor4ubVertex2fvSUN_Z_Z;
__gshared glColor4ubVertex2fvSUN_Z_Z = function void (const(GLubyte)* c, const(GLfloat)* v) { glColor4ubVertex2fvSUN_Z_Z_loader(c, v); };
private void glColor4ubVertex2fvSUN_Z_Z_loader (const(GLubyte)* c, const(GLfloat)* v) {
  *cast(void**)&glColor4ubVertex2fvSUN_Z_Z = glbindGetProcAddress(`glColor4ubVertex2fvSUN`);
  if (*cast(void**)&glColor4ubVertex2fvSUN_Z_Z is null) assert(0, `OpenGL function 'glColor4ubVertex2fvSUN' not found!`);
  glColor4ubVertex2fvSUN_Z_Z(c, v);
}
alias glColor4ubVertex3fSUN = glColor4ubVertex3fSUN_Z_Z;
__gshared glColor4ubVertex3fSUN_Z_Z = function void (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { glColor4ubVertex3fSUN_Z_Z_loader(r, g, b, a, x, y, z); };
private void glColor4ubVertex3fSUN_Z_Z_loader (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glColor4ubVertex3fSUN_Z_Z = glbindGetProcAddress(`glColor4ubVertex3fSUN`);
  if (*cast(void**)&glColor4ubVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glColor4ubVertex3fSUN' not found!`);
  glColor4ubVertex3fSUN_Z_Z(r, g, b, a, x, y, z);
}
alias glColor4ubVertex3fvSUN = glColor4ubVertex3fvSUN_Z_Z;
__gshared glColor4ubVertex3fvSUN_Z_Z = function void (const(GLubyte)* c, const(GLfloat)* v) { glColor4ubVertex3fvSUN_Z_Z_loader(c, v); };
private void glColor4ubVertex3fvSUN_Z_Z_loader (const(GLubyte)* c, const(GLfloat)* v) {
  *cast(void**)&glColor4ubVertex3fvSUN_Z_Z = glbindGetProcAddress(`glColor4ubVertex3fvSUN`);
  if (*cast(void**)&glColor4ubVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glColor4ubVertex3fvSUN' not found!`);
  glColor4ubVertex3fvSUN_Z_Z(c, v);
}
alias glColor4ubv = glColor4ubv_Z_Z;
__gshared glColor4ubv_Z_Z = function void (const(GLubyte)* v) { glColor4ubv_Z_Z_loader(v); };
private void glColor4ubv_Z_Z_loader (const(GLubyte)* v) {
  *cast(void**)&glColor4ubv_Z_Z = glbindGetProcAddress(`glColor4ubv`);
  if (*cast(void**)&glColor4ubv_Z_Z is null) assert(0, `OpenGL function 'glColor4ubv' not found!`);
  glColor4ubv_Z_Z(v);
}
alias glColor4ui = glColor4ui_Z_Z;
__gshared glColor4ui_Z_Z = function void (GLuint red, GLuint green, GLuint blue, GLuint alpha) { glColor4ui_Z_Z_loader(red, green, blue, alpha); };
private void glColor4ui_Z_Z_loader (GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  *cast(void**)&glColor4ui_Z_Z = glbindGetProcAddress(`glColor4ui`);
  if (*cast(void**)&glColor4ui_Z_Z is null) assert(0, `OpenGL function 'glColor4ui' not found!`);
  glColor4ui_Z_Z(red, green, blue, alpha);
}
alias glColor4uiv = glColor4uiv_Z_Z;
__gshared glColor4uiv_Z_Z = function void (const(GLuint)* v) { glColor4uiv_Z_Z_loader(v); };
private void glColor4uiv_Z_Z_loader (const(GLuint)* v) {
  *cast(void**)&glColor4uiv_Z_Z = glbindGetProcAddress(`glColor4uiv`);
  if (*cast(void**)&glColor4uiv_Z_Z is null) assert(0, `OpenGL function 'glColor4uiv' not found!`);
  glColor4uiv_Z_Z(v);
}
alias glColor4us = glColor4us_Z_Z;
__gshared glColor4us_Z_Z = function void (GLushort red, GLushort green, GLushort blue, GLushort alpha) { glColor4us_Z_Z_loader(red, green, blue, alpha); };
private void glColor4us_Z_Z_loader (GLushort red, GLushort green, GLushort blue, GLushort alpha) {
  *cast(void**)&glColor4us_Z_Z = glbindGetProcAddress(`glColor4us`);
  if (*cast(void**)&glColor4us_Z_Z is null) assert(0, `OpenGL function 'glColor4us' not found!`);
  glColor4us_Z_Z(red, green, blue, alpha);
}
alias glColor4usv = glColor4usv_Z_Z;
__gshared glColor4usv_Z_Z = function void (const(GLushort)* v) { glColor4usv_Z_Z_loader(v); };
private void glColor4usv_Z_Z_loader (const(GLushort)* v) {
  *cast(void**)&glColor4usv_Z_Z = glbindGetProcAddress(`glColor4usv`);
  if (*cast(void**)&glColor4usv_Z_Z is null) assert(0, `OpenGL function 'glColor4usv' not found!`);
  glColor4usv_Z_Z(v);
}
alias glColor4x = glColor4x_Z_Z;
__gshared glColor4x_Z_Z = function void (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { glColor4x_Z_Z_loader(red, green, blue, alpha); };
private void glColor4x_Z_Z_loader (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  *cast(void**)&glColor4x_Z_Z = glbindGetProcAddress(`glColor4x`);
  if (*cast(void**)&glColor4x_Z_Z is null) assert(0, `OpenGL function 'glColor4x' not found!`);
  glColor4x_Z_Z(red, green, blue, alpha);
}
alias glColor4xOES = glColor4xOES_Z_Z;
__gshared glColor4xOES_Z_Z = function void (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { glColor4xOES_Z_Z_loader(red, green, blue, alpha); };
private void glColor4xOES_Z_Z_loader (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  *cast(void**)&glColor4xOES_Z_Z = glbindGetProcAddress(`glColor4xOES`);
  if (*cast(void**)&glColor4xOES_Z_Z is null) assert(0, `OpenGL function 'glColor4xOES' not found!`);
  glColor4xOES_Z_Z(red, green, blue, alpha);
}
alias glColor4xvOES = glColor4xvOES_Z_Z;
__gshared glColor4xvOES_Z_Z = function void (const(GLfixed)* components) { glColor4xvOES_Z_Z_loader(components); };
private void glColor4xvOES_Z_Z_loader (const(GLfixed)* components) {
  *cast(void**)&glColor4xvOES_Z_Z = glbindGetProcAddress(`glColor4xvOES`);
  if (*cast(void**)&glColor4xvOES_Z_Z is null) assert(0, `OpenGL function 'glColor4xvOES' not found!`);
  glColor4xvOES_Z_Z(components);
}
alias glColorFormatNV = glColorFormatNV_Z_Z;
__gshared glColorFormatNV_Z_Z = function void (GLint size, GLenum type, GLsizei stride) { glColorFormatNV_Z_Z_loader(size, type, stride); };
private void glColorFormatNV_Z_Z_loader (GLint size, GLenum type, GLsizei stride) {
  *cast(void**)&glColorFormatNV_Z_Z = glbindGetProcAddress(`glColorFormatNV`);
  if (*cast(void**)&glColorFormatNV_Z_Z is null) assert(0, `OpenGL function 'glColorFormatNV' not found!`);
  glColorFormatNV_Z_Z(size, type, stride);
}
alias glColorFragmentOp1ATI = glColorFragmentOp1ATI_Z_Z;
__gshared glColorFragmentOp1ATI_Z_Z = function void (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { glColorFragmentOp1ATI_Z_Z_loader(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); };
private void glColorFragmentOp1ATI_Z_Z_loader (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  *cast(void**)&glColorFragmentOp1ATI_Z_Z = glbindGetProcAddress(`glColorFragmentOp1ATI`);
  if (*cast(void**)&glColorFragmentOp1ATI_Z_Z is null) assert(0, `OpenGL function 'glColorFragmentOp1ATI' not found!`);
  glColorFragmentOp1ATI_Z_Z(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}
alias glColorFragmentOp2ATI = glColorFragmentOp2ATI_Z_Z;
__gshared glColorFragmentOp2ATI_Z_Z = function void (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { glColorFragmentOp2ATI_Z_Z_loader(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); };
private void glColorFragmentOp2ATI_Z_Z_loader (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  *cast(void**)&glColorFragmentOp2ATI_Z_Z = glbindGetProcAddress(`glColorFragmentOp2ATI`);
  if (*cast(void**)&glColorFragmentOp2ATI_Z_Z is null) assert(0, `OpenGL function 'glColorFragmentOp2ATI' not found!`);
  glColorFragmentOp2ATI_Z_Z(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}
alias glColorFragmentOp3ATI = glColorFragmentOp3ATI_Z_Z;
__gshared glColorFragmentOp3ATI_Z_Z = function void (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { glColorFragmentOp3ATI_Z_Z_loader(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); };
private void glColorFragmentOp3ATI_Z_Z_loader (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  *cast(void**)&glColorFragmentOp3ATI_Z_Z = glbindGetProcAddress(`glColorFragmentOp3ATI`);
  if (*cast(void**)&glColorFragmentOp3ATI_Z_Z is null) assert(0, `OpenGL function 'glColorFragmentOp3ATI' not found!`);
  glColorFragmentOp3ATI_Z_Z(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}
alias glColorMask = glColorMask_Z_Z;
__gshared glColorMask_Z_Z = function void (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { glColorMask_Z_Z_loader(red, green, blue, alpha); };
private void glColorMask_Z_Z_loader (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  *cast(void**)&glColorMask_Z_Z = glbindGetProcAddress(`glColorMask`);
  if (*cast(void**)&glColorMask_Z_Z is null) assert(0, `OpenGL function 'glColorMask' not found!`);
  glColorMask_Z_Z(red, green, blue, alpha);
}
alias glColorMaskIndexedEXT = glColorMaskIndexedEXT_Z_Z;
__gshared glColorMaskIndexedEXT_Z_Z = function void (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { glColorMaskIndexedEXT_Z_Z_loader(index, r, g, b, a); };
private void glColorMaskIndexedEXT_Z_Z_loader (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  *cast(void**)&glColorMaskIndexedEXT_Z_Z = glbindGetProcAddress(`glColorMaskIndexedEXT`);
  if (*cast(void**)&glColorMaskIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glColorMaskIndexedEXT' not found!`);
  glColorMaskIndexedEXT_Z_Z(index, r, g, b, a);
}
alias glColorMaski = glColorMaski_Z_Z;
__gshared glColorMaski_Z_Z = function void (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { glColorMaski_Z_Z_loader(index, r, g, b, a); };
private void glColorMaski_Z_Z_loader (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  *cast(void**)&glColorMaski_Z_Z = glbindGetProcAddress(`glColorMaski`);
  if (*cast(void**)&glColorMaski_Z_Z is null) assert(0, `OpenGL function 'glColorMaski' not found!`);
  glColorMaski_Z_Z(index, r, g, b, a);
}
alias glColorMaskiEXT = glColorMaskiEXT_Z_Z;
__gshared glColorMaskiEXT_Z_Z = function void (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { glColorMaskiEXT_Z_Z_loader(index, r, g, b, a); };
private void glColorMaskiEXT_Z_Z_loader (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  *cast(void**)&glColorMaskiEXT_Z_Z = glbindGetProcAddress(`glColorMaskiEXT`);
  if (*cast(void**)&glColorMaskiEXT_Z_Z is null) assert(0, `OpenGL function 'glColorMaskiEXT' not found!`);
  glColorMaskiEXT_Z_Z(index, r, g, b, a);
}
alias glColorMaskiOES = glColorMaskiOES_Z_Z;
__gshared glColorMaskiOES_Z_Z = function void (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { glColorMaskiOES_Z_Z_loader(index, r, g, b, a); };
private void glColorMaskiOES_Z_Z_loader (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  *cast(void**)&glColorMaskiOES_Z_Z = glbindGetProcAddress(`glColorMaskiOES`);
  if (*cast(void**)&glColorMaskiOES_Z_Z is null) assert(0, `OpenGL function 'glColorMaskiOES' not found!`);
  glColorMaskiOES_Z_Z(index, r, g, b, a);
}
alias glColorMaterial = glColorMaterial_Z_Z;
__gshared glColorMaterial_Z_Z = function void (GLenum face, GLenum mode) { glColorMaterial_Z_Z_loader(face, mode); };
private void glColorMaterial_Z_Z_loader (GLenum face, GLenum mode) {
  *cast(void**)&glColorMaterial_Z_Z = glbindGetProcAddress(`glColorMaterial`);
  if (*cast(void**)&glColorMaterial_Z_Z is null) assert(0, `OpenGL function 'glColorMaterial' not found!`);
  glColorMaterial_Z_Z(face, mode);
}
alias glColorP3ui = glColorP3ui_Z_Z;
__gshared glColorP3ui_Z_Z = function void (GLenum type, GLuint color) { glColorP3ui_Z_Z_loader(type, color); };
private void glColorP3ui_Z_Z_loader (GLenum type, GLuint color) {
  *cast(void**)&glColorP3ui_Z_Z = glbindGetProcAddress(`glColorP3ui`);
  if (*cast(void**)&glColorP3ui_Z_Z is null) assert(0, `OpenGL function 'glColorP3ui' not found!`);
  glColorP3ui_Z_Z(type, color);
}
alias glColorP3uiv = glColorP3uiv_Z_Z;
__gshared glColorP3uiv_Z_Z = function void (GLenum type, const(GLuint)* color) { glColorP3uiv_Z_Z_loader(type, color); };
private void glColorP3uiv_Z_Z_loader (GLenum type, const(GLuint)* color) {
  *cast(void**)&glColorP3uiv_Z_Z = glbindGetProcAddress(`glColorP3uiv`);
  if (*cast(void**)&glColorP3uiv_Z_Z is null) assert(0, `OpenGL function 'glColorP3uiv' not found!`);
  glColorP3uiv_Z_Z(type, color);
}
alias glColorP4ui = glColorP4ui_Z_Z;
__gshared glColorP4ui_Z_Z = function void (GLenum type, GLuint color) { glColorP4ui_Z_Z_loader(type, color); };
private void glColorP4ui_Z_Z_loader (GLenum type, GLuint color) {
  *cast(void**)&glColorP4ui_Z_Z = glbindGetProcAddress(`glColorP4ui`);
  if (*cast(void**)&glColorP4ui_Z_Z is null) assert(0, `OpenGL function 'glColorP4ui' not found!`);
  glColorP4ui_Z_Z(type, color);
}
alias glColorP4uiv = glColorP4uiv_Z_Z;
__gshared glColorP4uiv_Z_Z = function void (GLenum type, const(GLuint)* color) { glColorP4uiv_Z_Z_loader(type, color); };
private void glColorP4uiv_Z_Z_loader (GLenum type, const(GLuint)* color) {
  *cast(void**)&glColorP4uiv_Z_Z = glbindGetProcAddress(`glColorP4uiv`);
  if (*cast(void**)&glColorP4uiv_Z_Z is null) assert(0, `OpenGL function 'glColorP4uiv' not found!`);
  glColorP4uiv_Z_Z(type, color);
}
alias glColorPointer = glColorPointer_Z_Z;
__gshared glColorPointer_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glColorPointer_Z_Z_loader(size, type, stride, pointer); };
private void glColorPointer_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glColorPointer_Z_Z = glbindGetProcAddress(`glColorPointer`);
  if (*cast(void**)&glColorPointer_Z_Z is null) assert(0, `OpenGL function 'glColorPointer' not found!`);
  glColorPointer_Z_Z(size, type, stride, pointer);
}
alias glColorPointerEXT = glColorPointerEXT_Z_Z;
__gshared glColorPointerEXT_Z_Z = function void (GLint size, GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) { glColorPointerEXT_Z_Z_loader(size, type, stride, count, pointer); };
private void glColorPointerEXT_Z_Z_loader (GLint size, GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) {
  *cast(void**)&glColorPointerEXT_Z_Z = glbindGetProcAddress(`glColorPointerEXT`);
  if (*cast(void**)&glColorPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glColorPointerEXT' not found!`);
  glColorPointerEXT_Z_Z(size, type, stride, count, pointer);
}
alias glColorPointerListIBM = glColorPointerListIBM_Z_Z;
__gshared glColorPointerListIBM_Z_Z = function void (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) { glColorPointerListIBM_Z_Z_loader(size, type, stride, pointer, ptrstride); };
private void glColorPointerListIBM_Z_Z_loader (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) {
  *cast(void**)&glColorPointerListIBM_Z_Z = glbindGetProcAddress(`glColorPointerListIBM`);
  if (*cast(void**)&glColorPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glColorPointerListIBM' not found!`);
  glColorPointerListIBM_Z_Z(size, type, stride, pointer, ptrstride);
}
alias glColorPointervINTEL = glColorPointervINTEL_Z_Z;
__gshared glColorPointervINTEL_Z_Z = function void (GLint size, GLenum type, const(void)** pointer) { glColorPointervINTEL_Z_Z_loader(size, type, pointer); };
private void glColorPointervINTEL_Z_Z_loader (GLint size, GLenum type, const(void)** pointer) {
  *cast(void**)&glColorPointervINTEL_Z_Z = glbindGetProcAddress(`glColorPointervINTEL`);
  if (*cast(void**)&glColorPointervINTEL_Z_Z is null) assert(0, `OpenGL function 'glColorPointervINTEL' not found!`);
  glColorPointervINTEL_Z_Z(size, type, pointer);
}
alias glColorSubTable = glColorSubTable_Z_Z;
__gshared glColorSubTable_Z_Z = function void (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const(void)* data) { glColorSubTable_Z_Z_loader(target, start, count, format, type, data); };
private void glColorSubTable_Z_Z_loader (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glColorSubTable_Z_Z = glbindGetProcAddress(`glColorSubTable`);
  if (*cast(void**)&glColorSubTable_Z_Z is null) assert(0, `OpenGL function 'glColorSubTable' not found!`);
  glColorSubTable_Z_Z(target, start, count, format, type, data);
}
alias glColorSubTableEXT = glColorSubTableEXT_Z_Z;
__gshared glColorSubTableEXT_Z_Z = function void (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const(void)* data) { glColorSubTableEXT_Z_Z_loader(target, start, count, format, type, data); };
private void glColorSubTableEXT_Z_Z_loader (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const(void)* data) {
  *cast(void**)&glColorSubTableEXT_Z_Z = glbindGetProcAddress(`glColorSubTableEXT`);
  if (*cast(void**)&glColorSubTableEXT_Z_Z is null) assert(0, `OpenGL function 'glColorSubTableEXT' not found!`);
  glColorSubTableEXT_Z_Z(target, start, count, format, type, data);
}
alias glColorTable = glColorTable_Z_Z;
__gshared glColorTable_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* table) { glColorTable_Z_Z_loader(target, internalformat, width, format, type, table); };
private void glColorTable_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* table) {
  *cast(void**)&glColorTable_Z_Z = glbindGetProcAddress(`glColorTable`);
  if (*cast(void**)&glColorTable_Z_Z is null) assert(0, `OpenGL function 'glColorTable' not found!`);
  glColorTable_Z_Z(target, internalformat, width, format, type, table);
}
alias glColorTableEXT = glColorTableEXT_Z_Z;
__gshared glColorTableEXT_Z_Z = function void (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const(void)* table) { glColorTableEXT_Z_Z_loader(target, internalFormat, width, format, type, table); };
private void glColorTableEXT_Z_Z_loader (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const(void)* table) {
  *cast(void**)&glColorTableEXT_Z_Z = glbindGetProcAddress(`glColorTableEXT`);
  if (*cast(void**)&glColorTableEXT_Z_Z is null) assert(0, `OpenGL function 'glColorTableEXT' not found!`);
  glColorTableEXT_Z_Z(target, internalFormat, width, format, type, table);
}
alias glColorTableParameterfv = glColorTableParameterfv_Z_Z;
__gshared glColorTableParameterfv_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glColorTableParameterfv_Z_Z_loader(target, pname, params); };
private void glColorTableParameterfv_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glColorTableParameterfv_Z_Z = glbindGetProcAddress(`glColorTableParameterfv`);
  if (*cast(void**)&glColorTableParameterfv_Z_Z is null) assert(0, `OpenGL function 'glColorTableParameterfv' not found!`);
  glColorTableParameterfv_Z_Z(target, pname, params);
}
alias glColorTableParameterfvSGI = glColorTableParameterfvSGI_Z_Z;
__gshared glColorTableParameterfvSGI_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glColorTableParameterfvSGI_Z_Z_loader(target, pname, params); };
private void glColorTableParameterfvSGI_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glColorTableParameterfvSGI_Z_Z = glbindGetProcAddress(`glColorTableParameterfvSGI`);
  if (*cast(void**)&glColorTableParameterfvSGI_Z_Z is null) assert(0, `OpenGL function 'glColorTableParameterfvSGI' not found!`);
  glColorTableParameterfvSGI_Z_Z(target, pname, params);
}
alias glColorTableParameteriv = glColorTableParameteriv_Z_Z;
__gshared glColorTableParameteriv_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glColorTableParameteriv_Z_Z_loader(target, pname, params); };
private void glColorTableParameteriv_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glColorTableParameteriv_Z_Z = glbindGetProcAddress(`glColorTableParameteriv`);
  if (*cast(void**)&glColorTableParameteriv_Z_Z is null) assert(0, `OpenGL function 'glColorTableParameteriv' not found!`);
  glColorTableParameteriv_Z_Z(target, pname, params);
}
alias glColorTableParameterivSGI = glColorTableParameterivSGI_Z_Z;
__gshared glColorTableParameterivSGI_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glColorTableParameterivSGI_Z_Z_loader(target, pname, params); };
private void glColorTableParameterivSGI_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glColorTableParameterivSGI_Z_Z = glbindGetProcAddress(`glColorTableParameterivSGI`);
  if (*cast(void**)&glColorTableParameterivSGI_Z_Z is null) assert(0, `OpenGL function 'glColorTableParameterivSGI' not found!`);
  glColorTableParameterivSGI_Z_Z(target, pname, params);
}
alias glColorTableSGI = glColorTableSGI_Z_Z;
__gshared glColorTableSGI_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* table) { glColorTableSGI_Z_Z_loader(target, internalformat, width, format, type, table); };
private void glColorTableSGI_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* table) {
  *cast(void**)&glColorTableSGI_Z_Z = glbindGetProcAddress(`glColorTableSGI`);
  if (*cast(void**)&glColorTableSGI_Z_Z is null) assert(0, `OpenGL function 'glColorTableSGI' not found!`);
  glColorTableSGI_Z_Z(target, internalformat, width, format, type, table);
}
alias glCombinerInputNV = glCombinerInputNV_Z_Z;
__gshared glCombinerInputNV_Z_Z = function void (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { glCombinerInputNV_Z_Z_loader(stage, portion, variable, input, mapping, componentUsage); };
private void glCombinerInputNV_Z_Z_loader (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  *cast(void**)&glCombinerInputNV_Z_Z = glbindGetProcAddress(`glCombinerInputNV`);
  if (*cast(void**)&glCombinerInputNV_Z_Z is null) assert(0, `OpenGL function 'glCombinerInputNV' not found!`);
  glCombinerInputNV_Z_Z(stage, portion, variable, input, mapping, componentUsage);
}
alias glCombinerOutputNV = glCombinerOutputNV_Z_Z;
__gshared glCombinerOutputNV_Z_Z = function void (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { glCombinerOutputNV_Z_Z_loader(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); };
private void glCombinerOutputNV_Z_Z_loader (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {
  *cast(void**)&glCombinerOutputNV_Z_Z = glbindGetProcAddress(`glCombinerOutputNV`);
  if (*cast(void**)&glCombinerOutputNV_Z_Z is null) assert(0, `OpenGL function 'glCombinerOutputNV' not found!`);
  glCombinerOutputNV_Z_Z(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}
alias glCombinerParameterfNV = glCombinerParameterfNV_Z_Z;
__gshared glCombinerParameterfNV_Z_Z = function void (GLenum pname, GLfloat param) { glCombinerParameterfNV_Z_Z_loader(pname, param); };
private void glCombinerParameterfNV_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glCombinerParameterfNV_Z_Z = glbindGetProcAddress(`glCombinerParameterfNV`);
  if (*cast(void**)&glCombinerParameterfNV_Z_Z is null) assert(0, `OpenGL function 'glCombinerParameterfNV' not found!`);
  glCombinerParameterfNV_Z_Z(pname, param);
}
alias glCombinerParameterfvNV = glCombinerParameterfvNV_Z_Z;
__gshared glCombinerParameterfvNV_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glCombinerParameterfvNV_Z_Z_loader(pname, params); };
private void glCombinerParameterfvNV_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glCombinerParameterfvNV_Z_Z = glbindGetProcAddress(`glCombinerParameterfvNV`);
  if (*cast(void**)&glCombinerParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glCombinerParameterfvNV' not found!`);
  glCombinerParameterfvNV_Z_Z(pname, params);
}
alias glCombinerParameteriNV = glCombinerParameteriNV_Z_Z;
__gshared glCombinerParameteriNV_Z_Z = function void (GLenum pname, GLint param) { glCombinerParameteriNV_Z_Z_loader(pname, param); };
private void glCombinerParameteriNV_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glCombinerParameteriNV_Z_Z = glbindGetProcAddress(`glCombinerParameteriNV`);
  if (*cast(void**)&glCombinerParameteriNV_Z_Z is null) assert(0, `OpenGL function 'glCombinerParameteriNV' not found!`);
  glCombinerParameteriNV_Z_Z(pname, param);
}
alias glCombinerParameterivNV = glCombinerParameterivNV_Z_Z;
__gshared glCombinerParameterivNV_Z_Z = function void (GLenum pname, const(GLint)* params) { glCombinerParameterivNV_Z_Z_loader(pname, params); };
private void glCombinerParameterivNV_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glCombinerParameterivNV_Z_Z = glbindGetProcAddress(`glCombinerParameterivNV`);
  if (*cast(void**)&glCombinerParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glCombinerParameterivNV' not found!`);
  glCombinerParameterivNV_Z_Z(pname, params);
}
alias glCombinerStageParameterfvNV = glCombinerStageParameterfvNV_Z_Z;
__gshared glCombinerStageParameterfvNV_Z_Z = function void (GLenum stage, GLenum pname, const(GLfloat)* params) { glCombinerStageParameterfvNV_Z_Z_loader(stage, pname, params); };
private void glCombinerStageParameterfvNV_Z_Z_loader (GLenum stage, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glCombinerStageParameterfvNV_Z_Z = glbindGetProcAddress(`glCombinerStageParameterfvNV`);
  if (*cast(void**)&glCombinerStageParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glCombinerStageParameterfvNV' not found!`);
  glCombinerStageParameterfvNV_Z_Z(stage, pname, params);
}
alias glCommandListSegmentsNV = glCommandListSegmentsNV_Z_Z;
__gshared glCommandListSegmentsNV_Z_Z = function void (GLuint list, GLuint segments) { glCommandListSegmentsNV_Z_Z_loader(list, segments); };
private void glCommandListSegmentsNV_Z_Z_loader (GLuint list, GLuint segments) {
  *cast(void**)&glCommandListSegmentsNV_Z_Z = glbindGetProcAddress(`glCommandListSegmentsNV`);
  if (*cast(void**)&glCommandListSegmentsNV_Z_Z is null) assert(0, `OpenGL function 'glCommandListSegmentsNV' not found!`);
  glCommandListSegmentsNV_Z_Z(list, segments);
}
alias glCompileCommandListNV = glCompileCommandListNV_Z_Z;
__gshared glCompileCommandListNV_Z_Z = function void (GLuint list) { glCompileCommandListNV_Z_Z_loader(list); };
private void glCompileCommandListNV_Z_Z_loader (GLuint list) {
  *cast(void**)&glCompileCommandListNV_Z_Z = glbindGetProcAddress(`glCompileCommandListNV`);
  if (*cast(void**)&glCompileCommandListNV_Z_Z is null) assert(0, `OpenGL function 'glCompileCommandListNV' not found!`);
  glCompileCommandListNV_Z_Z(list);
}
alias glCompileShader = glCompileShader_Z_Z;
__gshared glCompileShader_Z_Z = function void (GLuint shader) { glCompileShader_Z_Z_loader(shader); };
private void glCompileShader_Z_Z_loader (GLuint shader) {
  *cast(void**)&glCompileShader_Z_Z = glbindGetProcAddress(`glCompileShader`);
  if (*cast(void**)&glCompileShader_Z_Z is null) assert(0, `OpenGL function 'glCompileShader' not found!`);
  glCompileShader_Z_Z(shader);
}
alias glCompileShaderARB = glCompileShaderARB_Z_Z;
__gshared glCompileShaderARB_Z_Z = function void (GLhandleARB shaderObj) { glCompileShaderARB_Z_Z_loader(shaderObj); };
private void glCompileShaderARB_Z_Z_loader (GLhandleARB shaderObj) {
  *cast(void**)&glCompileShaderARB_Z_Z = glbindGetProcAddress(`glCompileShaderARB`);
  if (*cast(void**)&glCompileShaderARB_Z_Z is null) assert(0, `OpenGL function 'glCompileShaderARB' not found!`);
  glCompileShaderARB_Z_Z(shaderObj);
}
alias glCompileShaderIncludeARB = glCompileShaderIncludeARB_Z_Z;
__gshared glCompileShaderIncludeARB_Z_Z = function void (GLuint shader, GLsizei count, const(GLchar)* *path, const(GLint)* length) { glCompileShaderIncludeARB_Z_Z_loader(shader, count, path, length); };
private void glCompileShaderIncludeARB_Z_Z_loader (GLuint shader, GLsizei count, const(GLchar)* *path, const(GLint)* length) {
  *cast(void**)&glCompileShaderIncludeARB_Z_Z = glbindGetProcAddress(`glCompileShaderIncludeARB`);
  if (*cast(void**)&glCompileShaderIncludeARB_Z_Z is null) assert(0, `OpenGL function 'glCompileShaderIncludeARB' not found!`);
  glCompileShaderIncludeARB_Z_Z(shader, count, path, length);
}
alias glCompressedMultiTexImage1DEXT = glCompressedMultiTexImage1DEXT_Z_Z;
__gshared glCompressedMultiTexImage1DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* bits) { glCompressedMultiTexImage1DEXT_Z_Z_loader(texunit, target, level, internalformat, width, border, imageSize, bits); };
private void glCompressedMultiTexImage1DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedMultiTexImage1DEXT_Z_Z = glbindGetProcAddress(`glCompressedMultiTexImage1DEXT`);
  if (*cast(void**)&glCompressedMultiTexImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexImage1DEXT' not found!`);
  glCompressedMultiTexImage1DEXT_Z_Z(texunit, target, level, internalformat, width, border, imageSize, bits);
}
alias glCompressedMultiTexImage2DEXT = glCompressedMultiTexImage2DEXT_Z_Z;
__gshared glCompressedMultiTexImage2DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* bits) { glCompressedMultiTexImage2DEXT_Z_Z_loader(texunit, target, level, internalformat, width, height, border, imageSize, bits); };
private void glCompressedMultiTexImage2DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedMultiTexImage2DEXT_Z_Z = glbindGetProcAddress(`glCompressedMultiTexImage2DEXT`);
  if (*cast(void**)&glCompressedMultiTexImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexImage2DEXT' not found!`);
  glCompressedMultiTexImage2DEXT_Z_Z(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}
alias glCompressedMultiTexImage3DEXT = glCompressedMultiTexImage3DEXT_Z_Z;
__gshared glCompressedMultiTexImage3DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* bits) { glCompressedMultiTexImage3DEXT_Z_Z_loader(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); };
private void glCompressedMultiTexImage3DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedMultiTexImage3DEXT_Z_Z = glbindGetProcAddress(`glCompressedMultiTexImage3DEXT`);
  if (*cast(void**)&glCompressedMultiTexImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexImage3DEXT' not found!`);
  glCompressedMultiTexImage3DEXT_Z_Z(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}
alias glCompressedMultiTexSubImage1DEXT = glCompressedMultiTexSubImage1DEXT_Z_Z;
__gshared glCompressedMultiTexSubImage1DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* bits) { glCompressedMultiTexSubImage1DEXT_Z_Z_loader(texunit, target, level, xoffset, width, format, imageSize, bits); };
private void glCompressedMultiTexSubImage1DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedMultiTexSubImage1DEXT_Z_Z = glbindGetProcAddress(`glCompressedMultiTexSubImage1DEXT`);
  if (*cast(void**)&glCompressedMultiTexSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage1DEXT' not found!`);
  glCompressedMultiTexSubImage1DEXT_Z_Z(texunit, target, level, xoffset, width, format, imageSize, bits);
}
alias glCompressedMultiTexSubImage2DEXT = glCompressedMultiTexSubImage2DEXT_Z_Z;
__gshared glCompressedMultiTexSubImage2DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* bits) { glCompressedMultiTexSubImage2DEXT_Z_Z_loader(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); };
private void glCompressedMultiTexSubImage2DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedMultiTexSubImage2DEXT_Z_Z = glbindGetProcAddress(`glCompressedMultiTexSubImage2DEXT`);
  if (*cast(void**)&glCompressedMultiTexSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage2DEXT' not found!`);
  glCompressedMultiTexSubImage2DEXT_Z_Z(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}
alias glCompressedMultiTexSubImage3DEXT = glCompressedMultiTexSubImage3DEXT_Z_Z;
__gshared glCompressedMultiTexSubImage3DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* bits) { glCompressedMultiTexSubImage3DEXT_Z_Z_loader(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); };
private void glCompressedMultiTexSubImage3DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedMultiTexSubImage3DEXT_Z_Z = glbindGetProcAddress(`glCompressedMultiTexSubImage3DEXT`);
  if (*cast(void**)&glCompressedMultiTexSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage3DEXT' not found!`);
  glCompressedMultiTexSubImage3DEXT_Z_Z(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}
alias glCompressedTexImage1D = glCompressedTexImage1D_Z_Z;
__gshared glCompressedTexImage1D_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* data) { glCompressedTexImage1D_Z_Z_loader(target, level, internalformat, width, border, imageSize, data); };
private void glCompressedTexImage1D_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexImage1D_Z_Z = glbindGetProcAddress(`glCompressedTexImage1D`);
  if (*cast(void**)&glCompressedTexImage1D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexImage1D' not found!`);
  glCompressedTexImage1D_Z_Z(target, level, internalformat, width, border, imageSize, data);
}
alias glCompressedTexImage1DARB = glCompressedTexImage1DARB_Z_Z;
__gshared glCompressedTexImage1DARB_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* data) { glCompressedTexImage1DARB_Z_Z_loader(target, level, internalformat, width, border, imageSize, data); };
private void glCompressedTexImage1DARB_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexImage1DARB_Z_Z = glbindGetProcAddress(`glCompressedTexImage1DARB`);
  if (*cast(void**)&glCompressedTexImage1DARB_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexImage1DARB' not found!`);
  glCompressedTexImage1DARB_Z_Z(target, level, internalformat, width, border, imageSize, data);
}
alias glCompressedTexImage2D = glCompressedTexImage2D_Z_Z;
__gshared glCompressedTexImage2D_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* data) { glCompressedTexImage2D_Z_Z_loader(target, level, internalformat, width, height, border, imageSize, data); };
private void glCompressedTexImage2D_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexImage2D_Z_Z = glbindGetProcAddress(`glCompressedTexImage2D`);
  if (*cast(void**)&glCompressedTexImage2D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexImage2D' not found!`);
  glCompressedTexImage2D_Z_Z(target, level, internalformat, width, height, border, imageSize, data);
}
alias glCompressedTexImage2DARB = glCompressedTexImage2DARB_Z_Z;
__gshared glCompressedTexImage2DARB_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* data) { glCompressedTexImage2DARB_Z_Z_loader(target, level, internalformat, width, height, border, imageSize, data); };
private void glCompressedTexImage2DARB_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexImage2DARB_Z_Z = glbindGetProcAddress(`glCompressedTexImage2DARB`);
  if (*cast(void**)&glCompressedTexImage2DARB_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexImage2DARB' not found!`);
  glCompressedTexImage2DARB_Z_Z(target, level, internalformat, width, height, border, imageSize, data);
}
alias glCompressedTexImage3D = glCompressedTexImage3D_Z_Z;
__gshared glCompressedTexImage3D_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data) { glCompressedTexImage3D_Z_Z_loader(target, level, internalformat, width, height, depth, border, imageSize, data); };
private void glCompressedTexImage3D_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexImage3D_Z_Z = glbindGetProcAddress(`glCompressedTexImage3D`);
  if (*cast(void**)&glCompressedTexImage3D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexImage3D' not found!`);
  glCompressedTexImage3D_Z_Z(target, level, internalformat, width, height, depth, border, imageSize, data);
}
alias glCompressedTexImage3DARB = glCompressedTexImage3DARB_Z_Z;
__gshared glCompressedTexImage3DARB_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data) { glCompressedTexImage3DARB_Z_Z_loader(target, level, internalformat, width, height, depth, border, imageSize, data); };
private void glCompressedTexImage3DARB_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexImage3DARB_Z_Z = glbindGetProcAddress(`glCompressedTexImage3DARB`);
  if (*cast(void**)&glCompressedTexImage3DARB_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexImage3DARB' not found!`);
  glCompressedTexImage3DARB_Z_Z(target, level, internalformat, width, height, depth, border, imageSize, data);
}
alias glCompressedTexImage3DOES = glCompressedTexImage3DOES_Z_Z;
__gshared glCompressedTexImage3DOES_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data) { glCompressedTexImage3DOES_Z_Z_loader(target, level, internalformat, width, height, depth, border, imageSize, data); };
private void glCompressedTexImage3DOES_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexImage3DOES_Z_Z = glbindGetProcAddress(`glCompressedTexImage3DOES`);
  if (*cast(void**)&glCompressedTexImage3DOES_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexImage3DOES' not found!`);
  glCompressedTexImage3DOES_Z_Z(target, level, internalformat, width, height, depth, border, imageSize, data);
}
alias glCompressedTexSubImage1D = glCompressedTexSubImage1D_Z_Z;
__gshared glCompressedTexSubImage1D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTexSubImage1D_Z_Z_loader(target, level, xoffset, width, format, imageSize, data); };
private void glCompressedTexSubImage1D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexSubImage1D_Z_Z = glbindGetProcAddress(`glCompressedTexSubImage1D`);
  if (*cast(void**)&glCompressedTexSubImage1D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage1D' not found!`);
  glCompressedTexSubImage1D_Z_Z(target, level, xoffset, width, format, imageSize, data);
}
alias glCompressedTexSubImage1DARB = glCompressedTexSubImage1DARB_Z_Z;
__gshared glCompressedTexSubImage1DARB_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTexSubImage1DARB_Z_Z_loader(target, level, xoffset, width, format, imageSize, data); };
private void glCompressedTexSubImage1DARB_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexSubImage1DARB_Z_Z = glbindGetProcAddress(`glCompressedTexSubImage1DARB`);
  if (*cast(void**)&glCompressedTexSubImage1DARB_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage1DARB' not found!`);
  glCompressedTexSubImage1DARB_Z_Z(target, level, xoffset, width, format, imageSize, data);
}
alias glCompressedTexSubImage2D = glCompressedTexSubImage2D_Z_Z;
__gshared glCompressedTexSubImage2D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTexSubImage2D_Z_Z_loader(target, level, xoffset, yoffset, width, height, format, imageSize, data); };
private void glCompressedTexSubImage2D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexSubImage2D_Z_Z = glbindGetProcAddress(`glCompressedTexSubImage2D`);
  if (*cast(void**)&glCompressedTexSubImage2D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage2D' not found!`);
  glCompressedTexSubImage2D_Z_Z(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
alias glCompressedTexSubImage2DARB = glCompressedTexSubImage2DARB_Z_Z;
__gshared glCompressedTexSubImage2DARB_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTexSubImage2DARB_Z_Z_loader(target, level, xoffset, yoffset, width, height, format, imageSize, data); };
private void glCompressedTexSubImage2DARB_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexSubImage2DARB_Z_Z = glbindGetProcAddress(`glCompressedTexSubImage2DARB`);
  if (*cast(void**)&glCompressedTexSubImage2DARB_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage2DARB' not found!`);
  glCompressedTexSubImage2DARB_Z_Z(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
alias glCompressedTexSubImage3D = glCompressedTexSubImage3D_Z_Z;
__gshared glCompressedTexSubImage3D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTexSubImage3D_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
private void glCompressedTexSubImage3D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexSubImage3D_Z_Z = glbindGetProcAddress(`glCompressedTexSubImage3D`);
  if (*cast(void**)&glCompressedTexSubImage3D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage3D' not found!`);
  glCompressedTexSubImage3D_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
alias glCompressedTexSubImage3DARB = glCompressedTexSubImage3DARB_Z_Z;
__gshared glCompressedTexSubImage3DARB_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTexSubImage3DARB_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
private void glCompressedTexSubImage3DARB_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexSubImage3DARB_Z_Z = glbindGetProcAddress(`glCompressedTexSubImage3DARB`);
  if (*cast(void**)&glCompressedTexSubImage3DARB_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage3DARB' not found!`);
  glCompressedTexSubImage3DARB_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
alias glCompressedTexSubImage3DOES = glCompressedTexSubImage3DOES_Z_Z;
__gshared glCompressedTexSubImage3DOES_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTexSubImage3DOES_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
private void glCompressedTexSubImage3DOES_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTexSubImage3DOES_Z_Z = glbindGetProcAddress(`glCompressedTexSubImage3DOES`);
  if (*cast(void**)&glCompressedTexSubImage3DOES_Z_Z is null) assert(0, `OpenGL function 'glCompressedTexSubImage3DOES' not found!`);
  glCompressedTexSubImage3DOES_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
alias glCompressedTextureImage1DEXT = glCompressedTextureImage1DEXT_Z_Z;
__gshared glCompressedTextureImage1DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* bits) { glCompressedTextureImage1DEXT_Z_Z_loader(texture, target, level, internalformat, width, border, imageSize, bits); };
private void glCompressedTextureImage1DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedTextureImage1DEXT_Z_Z = glbindGetProcAddress(`glCompressedTextureImage1DEXT`);
  if (*cast(void**)&glCompressedTextureImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureImage1DEXT' not found!`);
  glCompressedTextureImage1DEXT_Z_Z(texture, target, level, internalformat, width, border, imageSize, bits);
}
alias glCompressedTextureImage2DEXT = glCompressedTextureImage2DEXT_Z_Z;
__gshared glCompressedTextureImage2DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* bits) { glCompressedTextureImage2DEXT_Z_Z_loader(texture, target, level, internalformat, width, height, border, imageSize, bits); };
private void glCompressedTextureImage2DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedTextureImage2DEXT_Z_Z = glbindGetProcAddress(`glCompressedTextureImage2DEXT`);
  if (*cast(void**)&glCompressedTextureImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureImage2DEXT' not found!`);
  glCompressedTextureImage2DEXT_Z_Z(texture, target, level, internalformat, width, height, border, imageSize, bits);
}
alias glCompressedTextureImage3DEXT = glCompressedTextureImage3DEXT_Z_Z;
__gshared glCompressedTextureImage3DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* bits) { glCompressedTextureImage3DEXT_Z_Z_loader(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); };
private void glCompressedTextureImage3DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedTextureImage3DEXT_Z_Z = glbindGetProcAddress(`glCompressedTextureImage3DEXT`);
  if (*cast(void**)&glCompressedTextureImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureImage3DEXT' not found!`);
  glCompressedTextureImage3DEXT_Z_Z(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}
alias glCompressedTextureSubImage1D = glCompressedTextureSubImage1D_Z_Z;
__gshared glCompressedTextureSubImage1D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTextureSubImage1D_Z_Z_loader(texture, level, xoffset, width, format, imageSize, data); };
private void glCompressedTextureSubImage1D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTextureSubImage1D_Z_Z = glbindGetProcAddress(`glCompressedTextureSubImage1D`);
  if (*cast(void**)&glCompressedTextureSubImage1D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1D' not found!`);
  glCompressedTextureSubImage1D_Z_Z(texture, level, xoffset, width, format, imageSize, data);
}
alias glCompressedTextureSubImage1DEXT = glCompressedTextureSubImage1DEXT_Z_Z;
__gshared glCompressedTextureSubImage1DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* bits) { glCompressedTextureSubImage1DEXT_Z_Z_loader(texture, target, level, xoffset, width, format, imageSize, bits); };
private void glCompressedTextureSubImage1DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedTextureSubImage1DEXT_Z_Z = glbindGetProcAddress(`glCompressedTextureSubImage1DEXT`);
  if (*cast(void**)&glCompressedTextureSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1DEXT' not found!`);
  glCompressedTextureSubImage1DEXT_Z_Z(texture, target, level, xoffset, width, format, imageSize, bits);
}
alias glCompressedTextureSubImage2D = glCompressedTextureSubImage2D_Z_Z;
__gshared glCompressedTextureSubImage2D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTextureSubImage2D_Z_Z_loader(texture, level, xoffset, yoffset, width, height, format, imageSize, data); };
private void glCompressedTextureSubImage2D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTextureSubImage2D_Z_Z = glbindGetProcAddress(`glCompressedTextureSubImage2D`);
  if (*cast(void**)&glCompressedTextureSubImage2D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2D' not found!`);
  glCompressedTextureSubImage2D_Z_Z(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}
alias glCompressedTextureSubImage2DEXT = glCompressedTextureSubImage2DEXT_Z_Z;
__gshared glCompressedTextureSubImage2DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* bits) { glCompressedTextureSubImage2DEXT_Z_Z_loader(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); };
private void glCompressedTextureSubImage2DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedTextureSubImage2DEXT_Z_Z = glbindGetProcAddress(`glCompressedTextureSubImage2DEXT`);
  if (*cast(void**)&glCompressedTextureSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2DEXT' not found!`);
  glCompressedTextureSubImage2DEXT_Z_Z(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}
alias glCompressedTextureSubImage3D = glCompressedTextureSubImage3D_Z_Z;
__gshared glCompressedTextureSubImage3D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) { glCompressedTextureSubImage3D_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
private void glCompressedTextureSubImage3D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data) {
  *cast(void**)&glCompressedTextureSubImage3D_Z_Z = glbindGetProcAddress(`glCompressedTextureSubImage3D`);
  if (*cast(void**)&glCompressedTextureSubImage3D_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3D' not found!`);
  glCompressedTextureSubImage3D_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
alias glCompressedTextureSubImage3DEXT = glCompressedTextureSubImage3DEXT_Z_Z;
__gshared glCompressedTextureSubImage3DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* bits) { glCompressedTextureSubImage3DEXT_Z_Z_loader(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); };
private void glCompressedTextureSubImage3DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* bits) {
  *cast(void**)&glCompressedTextureSubImage3DEXT_Z_Z = glbindGetProcAddress(`glCompressedTextureSubImage3DEXT`);
  if (*cast(void**)&glCompressedTextureSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3DEXT' not found!`);
  glCompressedTextureSubImage3DEXT_Z_Z(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}
alias glConservativeRasterParameterfNV = glConservativeRasterParameterfNV_Z_Z;
__gshared glConservativeRasterParameterfNV_Z_Z = function void (GLenum pname, GLfloat value) { glConservativeRasterParameterfNV_Z_Z_loader(pname, value); };
private void glConservativeRasterParameterfNV_Z_Z_loader (GLenum pname, GLfloat value) {
  *cast(void**)&glConservativeRasterParameterfNV_Z_Z = glbindGetProcAddress(`glConservativeRasterParameterfNV`);
  if (*cast(void**)&glConservativeRasterParameterfNV_Z_Z is null) assert(0, `OpenGL function 'glConservativeRasterParameterfNV' not found!`);
  glConservativeRasterParameterfNV_Z_Z(pname, value);
}
alias glConservativeRasterParameteriNV = glConservativeRasterParameteriNV_Z_Z;
__gshared glConservativeRasterParameteriNV_Z_Z = function void (GLenum pname, GLint param) { glConservativeRasterParameteriNV_Z_Z_loader(pname, param); };
private void glConservativeRasterParameteriNV_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glConservativeRasterParameteriNV_Z_Z = glbindGetProcAddress(`glConservativeRasterParameteriNV`);
  if (*cast(void**)&glConservativeRasterParameteriNV_Z_Z is null) assert(0, `OpenGL function 'glConservativeRasterParameteriNV' not found!`);
  glConservativeRasterParameteriNV_Z_Z(pname, param);
}
alias glConvolutionFilter1D = glConvolutionFilter1D_Z_Z;
__gshared glConvolutionFilter1D_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* image) { glConvolutionFilter1D_Z_Z_loader(target, internalformat, width, format, type, image); };
private void glConvolutionFilter1D_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* image) {
  *cast(void**)&glConvolutionFilter1D_Z_Z = glbindGetProcAddress(`glConvolutionFilter1D`);
  if (*cast(void**)&glConvolutionFilter1D_Z_Z is null) assert(0, `OpenGL function 'glConvolutionFilter1D' not found!`);
  glConvolutionFilter1D_Z_Z(target, internalformat, width, format, type, image);
}
alias glConvolutionFilter1DEXT = glConvolutionFilter1DEXT_Z_Z;
__gshared glConvolutionFilter1DEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* image) { glConvolutionFilter1DEXT_Z_Z_loader(target, internalformat, width, format, type, image); };
private void glConvolutionFilter1DEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const(void)* image) {
  *cast(void**)&glConvolutionFilter1DEXT_Z_Z = glbindGetProcAddress(`glConvolutionFilter1DEXT`);
  if (*cast(void**)&glConvolutionFilter1DEXT_Z_Z is null) assert(0, `OpenGL function 'glConvolutionFilter1DEXT' not found!`);
  glConvolutionFilter1DEXT_Z_Z(target, internalformat, width, format, type, image);
}
alias glConvolutionFilter2D = glConvolutionFilter2D_Z_Z;
__gshared glConvolutionFilter2D_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* image) { glConvolutionFilter2D_Z_Z_loader(target, internalformat, width, height, format, type, image); };
private void glConvolutionFilter2D_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* image) {
  *cast(void**)&glConvolutionFilter2D_Z_Z = glbindGetProcAddress(`glConvolutionFilter2D`);
  if (*cast(void**)&glConvolutionFilter2D_Z_Z is null) assert(0, `OpenGL function 'glConvolutionFilter2D' not found!`);
  glConvolutionFilter2D_Z_Z(target, internalformat, width, height, format, type, image);
}
alias glConvolutionFilter2DEXT = glConvolutionFilter2DEXT_Z_Z;
__gshared glConvolutionFilter2DEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* image) { glConvolutionFilter2DEXT_Z_Z_loader(target, internalformat, width, height, format, type, image); };
private void glConvolutionFilter2DEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* image) {
  *cast(void**)&glConvolutionFilter2DEXT_Z_Z = glbindGetProcAddress(`glConvolutionFilter2DEXT`);
  if (*cast(void**)&glConvolutionFilter2DEXT_Z_Z is null) assert(0, `OpenGL function 'glConvolutionFilter2DEXT' not found!`);
  glConvolutionFilter2DEXT_Z_Z(target, internalformat, width, height, format, type, image);
}
alias glConvolutionParameterf = glConvolutionParameterf_Z_Z;
__gshared glConvolutionParameterf_Z_Z = function void (GLenum target, GLenum pname, GLfloat params) { glConvolutionParameterf_Z_Z_loader(target, pname, params); };
private void glConvolutionParameterf_Z_Z_loader (GLenum target, GLenum pname, GLfloat params) {
  *cast(void**)&glConvolutionParameterf_Z_Z = glbindGetProcAddress(`glConvolutionParameterf`);
  if (*cast(void**)&glConvolutionParameterf_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameterf' not found!`);
  glConvolutionParameterf_Z_Z(target, pname, params);
}
alias glConvolutionParameterfEXT = glConvolutionParameterfEXT_Z_Z;
__gshared glConvolutionParameterfEXT_Z_Z = function void (GLenum target, GLenum pname, GLfloat params) { glConvolutionParameterfEXT_Z_Z_loader(target, pname, params); };
private void glConvolutionParameterfEXT_Z_Z_loader (GLenum target, GLenum pname, GLfloat params) {
  *cast(void**)&glConvolutionParameterfEXT_Z_Z = glbindGetProcAddress(`glConvolutionParameterfEXT`);
  if (*cast(void**)&glConvolutionParameterfEXT_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameterfEXT' not found!`);
  glConvolutionParameterfEXT_Z_Z(target, pname, params);
}
alias glConvolutionParameterfv = glConvolutionParameterfv_Z_Z;
__gshared glConvolutionParameterfv_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glConvolutionParameterfv_Z_Z_loader(target, pname, params); };
private void glConvolutionParameterfv_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glConvolutionParameterfv_Z_Z = glbindGetProcAddress(`glConvolutionParameterfv`);
  if (*cast(void**)&glConvolutionParameterfv_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameterfv' not found!`);
  glConvolutionParameterfv_Z_Z(target, pname, params);
}
alias glConvolutionParameterfvEXT = glConvolutionParameterfvEXT_Z_Z;
__gshared glConvolutionParameterfvEXT_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glConvolutionParameterfvEXT_Z_Z_loader(target, pname, params); };
private void glConvolutionParameterfvEXT_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glConvolutionParameterfvEXT_Z_Z = glbindGetProcAddress(`glConvolutionParameterfvEXT`);
  if (*cast(void**)&glConvolutionParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameterfvEXT' not found!`);
  glConvolutionParameterfvEXT_Z_Z(target, pname, params);
}
alias glConvolutionParameteri = glConvolutionParameteri_Z_Z;
__gshared glConvolutionParameteri_Z_Z = function void (GLenum target, GLenum pname, GLint params) { glConvolutionParameteri_Z_Z_loader(target, pname, params); };
private void glConvolutionParameteri_Z_Z_loader (GLenum target, GLenum pname, GLint params) {
  *cast(void**)&glConvolutionParameteri_Z_Z = glbindGetProcAddress(`glConvolutionParameteri`);
  if (*cast(void**)&glConvolutionParameteri_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameteri' not found!`);
  glConvolutionParameteri_Z_Z(target, pname, params);
}
alias glConvolutionParameteriEXT = glConvolutionParameteriEXT_Z_Z;
__gshared glConvolutionParameteriEXT_Z_Z = function void (GLenum target, GLenum pname, GLint params) { glConvolutionParameteriEXT_Z_Z_loader(target, pname, params); };
private void glConvolutionParameteriEXT_Z_Z_loader (GLenum target, GLenum pname, GLint params) {
  *cast(void**)&glConvolutionParameteriEXT_Z_Z = glbindGetProcAddress(`glConvolutionParameteriEXT`);
  if (*cast(void**)&glConvolutionParameteriEXT_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameteriEXT' not found!`);
  glConvolutionParameteriEXT_Z_Z(target, pname, params);
}
alias glConvolutionParameteriv = glConvolutionParameteriv_Z_Z;
__gshared glConvolutionParameteriv_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glConvolutionParameteriv_Z_Z_loader(target, pname, params); };
private void glConvolutionParameteriv_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glConvolutionParameteriv_Z_Z = glbindGetProcAddress(`glConvolutionParameteriv`);
  if (*cast(void**)&glConvolutionParameteriv_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameteriv' not found!`);
  glConvolutionParameteriv_Z_Z(target, pname, params);
}
alias glConvolutionParameterivEXT = glConvolutionParameterivEXT_Z_Z;
__gshared glConvolutionParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glConvolutionParameterivEXT_Z_Z_loader(target, pname, params); };
private void glConvolutionParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glConvolutionParameterivEXT_Z_Z = glbindGetProcAddress(`glConvolutionParameterivEXT`);
  if (*cast(void**)&glConvolutionParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameterivEXT' not found!`);
  glConvolutionParameterivEXT_Z_Z(target, pname, params);
}
alias glConvolutionParameterxOES = glConvolutionParameterxOES_Z_Z;
__gshared glConvolutionParameterxOES_Z_Z = function void (GLenum target, GLenum pname, GLfixed param) { glConvolutionParameterxOES_Z_Z_loader(target, pname, param); };
private void glConvolutionParameterxOES_Z_Z_loader (GLenum target, GLenum pname, GLfixed param) {
  *cast(void**)&glConvolutionParameterxOES_Z_Z = glbindGetProcAddress(`glConvolutionParameterxOES`);
  if (*cast(void**)&glConvolutionParameterxOES_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameterxOES' not found!`);
  glConvolutionParameterxOES_Z_Z(target, pname, param);
}
alias glConvolutionParameterxvOES = glConvolutionParameterxvOES_Z_Z;
__gshared glConvolutionParameterxvOES_Z_Z = function void (GLenum target, GLenum pname, const(GLfixed)* params) { glConvolutionParameterxvOES_Z_Z_loader(target, pname, params); };
private void glConvolutionParameterxvOES_Z_Z_loader (GLenum target, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glConvolutionParameterxvOES_Z_Z = glbindGetProcAddress(`glConvolutionParameterxvOES`);
  if (*cast(void**)&glConvolutionParameterxvOES_Z_Z is null) assert(0, `OpenGL function 'glConvolutionParameterxvOES' not found!`);
  glConvolutionParameterxvOES_Z_Z(target, pname, params);
}
alias glCopyBufferSubData = glCopyBufferSubData_Z_Z;
__gshared glCopyBufferSubData_Z_Z = function void (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { glCopyBufferSubData_Z_Z_loader(readTarget, writeTarget, readOffset, writeOffset, size); };
private void glCopyBufferSubData_Z_Z_loader (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  *cast(void**)&glCopyBufferSubData_Z_Z = glbindGetProcAddress(`glCopyBufferSubData`);
  if (*cast(void**)&glCopyBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glCopyBufferSubData' not found!`);
  glCopyBufferSubData_Z_Z(readTarget, writeTarget, readOffset, writeOffset, size);
}
alias glCopyBufferSubDataNV = glCopyBufferSubDataNV_Z_Z;
__gshared glCopyBufferSubDataNV_Z_Z = function void (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { glCopyBufferSubDataNV_Z_Z_loader(readTarget, writeTarget, readOffset, writeOffset, size); };
private void glCopyBufferSubDataNV_Z_Z_loader (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  *cast(void**)&glCopyBufferSubDataNV_Z_Z = glbindGetProcAddress(`glCopyBufferSubDataNV`);
  if (*cast(void**)&glCopyBufferSubDataNV_Z_Z is null) assert(0, `OpenGL function 'glCopyBufferSubDataNV' not found!`);
  glCopyBufferSubDataNV_Z_Z(readTarget, writeTarget, readOffset, writeOffset, size);
}
alias glCopyColorSubTable = glCopyColorSubTable_Z_Z;
__gshared glCopyColorSubTable_Z_Z = function void (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { glCopyColorSubTable_Z_Z_loader(target, start, x, y, width); };
private void glCopyColorSubTable_Z_Z_loader (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyColorSubTable_Z_Z = glbindGetProcAddress(`glCopyColorSubTable`);
  if (*cast(void**)&glCopyColorSubTable_Z_Z is null) assert(0, `OpenGL function 'glCopyColorSubTable' not found!`);
  glCopyColorSubTable_Z_Z(target, start, x, y, width);
}
alias glCopyColorSubTableEXT = glCopyColorSubTableEXT_Z_Z;
__gshared glCopyColorSubTableEXT_Z_Z = function void (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { glCopyColorSubTableEXT_Z_Z_loader(target, start, x, y, width); };
private void glCopyColorSubTableEXT_Z_Z_loader (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyColorSubTableEXT_Z_Z = glbindGetProcAddress(`glCopyColorSubTableEXT`);
  if (*cast(void**)&glCopyColorSubTableEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyColorSubTableEXT' not found!`);
  glCopyColorSubTableEXT_Z_Z(target, start, x, y, width);
}
alias glCopyColorTable = glCopyColorTable_Z_Z;
__gshared glCopyColorTable_Z_Z = function void (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { glCopyColorTable_Z_Z_loader(target, internalformat, x, y, width); };
private void glCopyColorTable_Z_Z_loader (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyColorTable_Z_Z = glbindGetProcAddress(`glCopyColorTable`);
  if (*cast(void**)&glCopyColorTable_Z_Z is null) assert(0, `OpenGL function 'glCopyColorTable' not found!`);
  glCopyColorTable_Z_Z(target, internalformat, x, y, width);
}
alias glCopyColorTableSGI = glCopyColorTableSGI_Z_Z;
__gshared glCopyColorTableSGI_Z_Z = function void (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { glCopyColorTableSGI_Z_Z_loader(target, internalformat, x, y, width); };
private void glCopyColorTableSGI_Z_Z_loader (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyColorTableSGI_Z_Z = glbindGetProcAddress(`glCopyColorTableSGI`);
  if (*cast(void**)&glCopyColorTableSGI_Z_Z is null) assert(0, `OpenGL function 'glCopyColorTableSGI' not found!`);
  glCopyColorTableSGI_Z_Z(target, internalformat, x, y, width);
}
alias glCopyConvolutionFilter1D = glCopyConvolutionFilter1D_Z_Z;
__gshared glCopyConvolutionFilter1D_Z_Z = function void (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { glCopyConvolutionFilter1D_Z_Z_loader(target, internalformat, x, y, width); };
private void glCopyConvolutionFilter1D_Z_Z_loader (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyConvolutionFilter1D_Z_Z = glbindGetProcAddress(`glCopyConvolutionFilter1D`);
  if (*cast(void**)&glCopyConvolutionFilter1D_Z_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1D' not found!`);
  glCopyConvolutionFilter1D_Z_Z(target, internalformat, x, y, width);
}
alias glCopyConvolutionFilter1DEXT = glCopyConvolutionFilter1DEXT_Z_Z;
__gshared glCopyConvolutionFilter1DEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { glCopyConvolutionFilter1DEXT_Z_Z_loader(target, internalformat, x, y, width); };
private void glCopyConvolutionFilter1DEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyConvolutionFilter1DEXT_Z_Z = glbindGetProcAddress(`glCopyConvolutionFilter1DEXT`);
  if (*cast(void**)&glCopyConvolutionFilter1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1DEXT' not found!`);
  glCopyConvolutionFilter1DEXT_Z_Z(target, internalformat, x, y, width);
}
alias glCopyConvolutionFilter2D = glCopyConvolutionFilter2D_Z_Z;
__gshared glCopyConvolutionFilter2D_Z_Z = function void (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyConvolutionFilter2D_Z_Z_loader(target, internalformat, x, y, width, height); };
private void glCopyConvolutionFilter2D_Z_Z_loader (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyConvolutionFilter2D_Z_Z = glbindGetProcAddress(`glCopyConvolutionFilter2D`);
  if (*cast(void**)&glCopyConvolutionFilter2D_Z_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2D' not found!`);
  glCopyConvolutionFilter2D_Z_Z(target, internalformat, x, y, width, height);
}
alias glCopyConvolutionFilter2DEXT = glCopyConvolutionFilter2DEXT_Z_Z;
__gshared glCopyConvolutionFilter2DEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyConvolutionFilter2DEXT_Z_Z_loader(target, internalformat, x, y, width, height); };
private void glCopyConvolutionFilter2DEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyConvolutionFilter2DEXT_Z_Z = glbindGetProcAddress(`glCopyConvolutionFilter2DEXT`);
  if (*cast(void**)&glCopyConvolutionFilter2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2DEXT' not found!`);
  glCopyConvolutionFilter2DEXT_Z_Z(target, internalformat, x, y, width, height);
}
alias glCopyImageSubData = glCopyImageSubData_Z_Z;
__gshared glCopyImageSubData_Z_Z = function void (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { glCopyImageSubData_Z_Z_loader(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
private void glCopyImageSubData_Z_Z_loader (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  *cast(void**)&glCopyImageSubData_Z_Z = glbindGetProcAddress(`glCopyImageSubData`);
  if (*cast(void**)&glCopyImageSubData_Z_Z is null) assert(0, `OpenGL function 'glCopyImageSubData' not found!`);
  glCopyImageSubData_Z_Z(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
alias glCopyImageSubDataEXT = glCopyImageSubDataEXT_Z_Z;
__gshared glCopyImageSubDataEXT_Z_Z = function void (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { glCopyImageSubDataEXT_Z_Z_loader(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
private void glCopyImageSubDataEXT_Z_Z_loader (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  *cast(void**)&glCopyImageSubDataEXT_Z_Z = glbindGetProcAddress(`glCopyImageSubDataEXT`);
  if (*cast(void**)&glCopyImageSubDataEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyImageSubDataEXT' not found!`);
  glCopyImageSubDataEXT_Z_Z(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
alias glCopyImageSubDataNV = glCopyImageSubDataNV_Z_Z;
__gshared glCopyImageSubDataNV_Z_Z = function void (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { glCopyImageSubDataNV_Z_Z_loader(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); };
private void glCopyImageSubDataNV_Z_Z_loader (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  *cast(void**)&glCopyImageSubDataNV_Z_Z = glbindGetProcAddress(`glCopyImageSubDataNV`);
  if (*cast(void**)&glCopyImageSubDataNV_Z_Z is null) assert(0, `OpenGL function 'glCopyImageSubDataNV' not found!`);
  glCopyImageSubDataNV_Z_Z(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}
alias glCopyImageSubDataOES = glCopyImageSubDataOES_Z_Z;
__gshared glCopyImageSubDataOES_Z_Z = function void (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { glCopyImageSubDataOES_Z_Z_loader(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
private void glCopyImageSubDataOES_Z_Z_loader (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  *cast(void**)&glCopyImageSubDataOES_Z_Z = glbindGetProcAddress(`glCopyImageSubDataOES`);
  if (*cast(void**)&glCopyImageSubDataOES_Z_Z is null) assert(0, `OpenGL function 'glCopyImageSubDataOES' not found!`);
  glCopyImageSubDataOES_Z_Z(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
alias glCopyMultiTexImage1DEXT = glCopyMultiTexImage1DEXT_Z_Z;
__gshared glCopyMultiTexImage1DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { glCopyMultiTexImage1DEXT_Z_Z_loader(texunit, target, level, internalformat, x, y, width, border); };
private void glCopyMultiTexImage1DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  *cast(void**)&glCopyMultiTexImage1DEXT_Z_Z = glbindGetProcAddress(`glCopyMultiTexImage1DEXT`);
  if (*cast(void**)&glCopyMultiTexImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyMultiTexImage1DEXT' not found!`);
  glCopyMultiTexImage1DEXT_Z_Z(texunit, target, level, internalformat, x, y, width, border);
}
alias glCopyMultiTexImage2DEXT = glCopyMultiTexImage2DEXT_Z_Z;
__gshared glCopyMultiTexImage2DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { glCopyMultiTexImage2DEXT_Z_Z_loader(texunit, target, level, internalformat, x, y, width, height, border); };
private void glCopyMultiTexImage2DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  *cast(void**)&glCopyMultiTexImage2DEXT_Z_Z = glbindGetProcAddress(`glCopyMultiTexImage2DEXT`);
  if (*cast(void**)&glCopyMultiTexImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyMultiTexImage2DEXT' not found!`);
  glCopyMultiTexImage2DEXT_Z_Z(texunit, target, level, internalformat, x, y, width, height, border);
}
alias glCopyMultiTexSubImage1DEXT = glCopyMultiTexSubImage1DEXT_Z_Z;
__gshared glCopyMultiTexSubImage1DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { glCopyMultiTexSubImage1DEXT_Z_Z_loader(texunit, target, level, xoffset, x, y, width); };
private void glCopyMultiTexSubImage1DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyMultiTexSubImage1DEXT_Z_Z = glbindGetProcAddress(`glCopyMultiTexSubImage1DEXT`);
  if (*cast(void**)&glCopyMultiTexSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage1DEXT' not found!`);
  glCopyMultiTexSubImage1DEXT_Z_Z(texunit, target, level, xoffset, x, y, width);
}
alias glCopyMultiTexSubImage2DEXT = glCopyMultiTexSubImage2DEXT_Z_Z;
__gshared glCopyMultiTexSubImage2DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyMultiTexSubImage2DEXT_Z_Z_loader(texunit, target, level, xoffset, yoffset, x, y, width, height); };
private void glCopyMultiTexSubImage2DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyMultiTexSubImage2DEXT_Z_Z = glbindGetProcAddress(`glCopyMultiTexSubImage2DEXT`);
  if (*cast(void**)&glCopyMultiTexSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage2DEXT' not found!`);
  glCopyMultiTexSubImage2DEXT_Z_Z(texunit, target, level, xoffset, yoffset, x, y, width, height);
}
alias glCopyMultiTexSubImage3DEXT = glCopyMultiTexSubImage3DEXT_Z_Z;
__gshared glCopyMultiTexSubImage3DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyMultiTexSubImage3DEXT_Z_Z_loader(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); };
private void glCopyMultiTexSubImage3DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyMultiTexSubImage3DEXT_Z_Z = glbindGetProcAddress(`glCopyMultiTexSubImage3DEXT`);
  if (*cast(void**)&glCopyMultiTexSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage3DEXT' not found!`);
  glCopyMultiTexSubImage3DEXT_Z_Z(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
alias glCopyNamedBufferSubData = glCopyNamedBufferSubData_Z_Z;
__gshared glCopyNamedBufferSubData_Z_Z = function void (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { glCopyNamedBufferSubData_Z_Z_loader(readBuffer, writeBuffer, readOffset, writeOffset, size); };
private void glCopyNamedBufferSubData_Z_Z_loader (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  *cast(void**)&glCopyNamedBufferSubData_Z_Z = glbindGetProcAddress(`glCopyNamedBufferSubData`);
  if (*cast(void**)&glCopyNamedBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glCopyNamedBufferSubData' not found!`);
  glCopyNamedBufferSubData_Z_Z(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
alias glCopyPathNV = glCopyPathNV_Z_Z;
__gshared glCopyPathNV_Z_Z = function void (GLuint resultPath, GLuint srcPath) { glCopyPathNV_Z_Z_loader(resultPath, srcPath); };
private void glCopyPathNV_Z_Z_loader (GLuint resultPath, GLuint srcPath) {
  *cast(void**)&glCopyPathNV_Z_Z = glbindGetProcAddress(`glCopyPathNV`);
  if (*cast(void**)&glCopyPathNV_Z_Z is null) assert(0, `OpenGL function 'glCopyPathNV' not found!`);
  glCopyPathNV_Z_Z(resultPath, srcPath);
}
alias glCopyPixels = glCopyPixels_Z_Z;
__gshared glCopyPixels_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { glCopyPixels_Z_Z_loader(x, y, width, height, type); };
private void glCopyPixels_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
  *cast(void**)&glCopyPixels_Z_Z = glbindGetProcAddress(`glCopyPixels`);
  if (*cast(void**)&glCopyPixels_Z_Z is null) assert(0, `OpenGL function 'glCopyPixels' not found!`);
  glCopyPixels_Z_Z(x, y, width, height, type);
}
alias glCopyTexImage1D = glCopyTexImage1D_Z_Z;
__gshared glCopyTexImage1D_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { glCopyTexImage1D_Z_Z_loader(target, level, internalformat, x, y, width, border); };
private void glCopyTexImage1D_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  *cast(void**)&glCopyTexImage1D_Z_Z = glbindGetProcAddress(`glCopyTexImage1D`);
  if (*cast(void**)&glCopyTexImage1D_Z_Z is null) assert(0, `OpenGL function 'glCopyTexImage1D' not found!`);
  glCopyTexImage1D_Z_Z(target, level, internalformat, x, y, width, border);
}
alias glCopyTexImage1DEXT = glCopyTexImage1DEXT_Z_Z;
__gshared glCopyTexImage1DEXT_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { glCopyTexImage1DEXT_Z_Z_loader(target, level, internalformat, x, y, width, border); };
private void glCopyTexImage1DEXT_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  *cast(void**)&glCopyTexImage1DEXT_Z_Z = glbindGetProcAddress(`glCopyTexImage1DEXT`);
  if (*cast(void**)&glCopyTexImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTexImage1DEXT' not found!`);
  glCopyTexImage1DEXT_Z_Z(target, level, internalformat, x, y, width, border);
}
alias glCopyTexImage2D = glCopyTexImage2D_Z_Z;
__gshared glCopyTexImage2D_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { glCopyTexImage2D_Z_Z_loader(target, level, internalformat, x, y, width, height, border); };
private void glCopyTexImage2D_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  *cast(void**)&glCopyTexImage2D_Z_Z = glbindGetProcAddress(`glCopyTexImage2D`);
  if (*cast(void**)&glCopyTexImage2D_Z_Z is null) assert(0, `OpenGL function 'glCopyTexImage2D' not found!`);
  glCopyTexImage2D_Z_Z(target, level, internalformat, x, y, width, height, border);
}
alias glCopyTexImage2DEXT = glCopyTexImage2DEXT_Z_Z;
__gshared glCopyTexImage2DEXT_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { glCopyTexImage2DEXT_Z_Z_loader(target, level, internalformat, x, y, width, height, border); };
private void glCopyTexImage2DEXT_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  *cast(void**)&glCopyTexImage2DEXT_Z_Z = glbindGetProcAddress(`glCopyTexImage2DEXT`);
  if (*cast(void**)&glCopyTexImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTexImage2DEXT' not found!`);
  glCopyTexImage2DEXT_Z_Z(target, level, internalformat, x, y, width, height, border);
}
alias glCopyTexSubImage1D = glCopyTexSubImage1D_Z_Z;
__gshared glCopyTexSubImage1D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { glCopyTexSubImage1D_Z_Z_loader(target, level, xoffset, x, y, width); };
private void glCopyTexSubImage1D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyTexSubImage1D_Z_Z = glbindGetProcAddress(`glCopyTexSubImage1D`);
  if (*cast(void**)&glCopyTexSubImage1D_Z_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage1D' not found!`);
  glCopyTexSubImage1D_Z_Z(target, level, xoffset, x, y, width);
}
alias glCopyTexSubImage1DEXT = glCopyTexSubImage1DEXT_Z_Z;
__gshared glCopyTexSubImage1DEXT_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { glCopyTexSubImage1DEXT_Z_Z_loader(target, level, xoffset, x, y, width); };
private void glCopyTexSubImage1DEXT_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyTexSubImage1DEXT_Z_Z = glbindGetProcAddress(`glCopyTexSubImage1DEXT`);
  if (*cast(void**)&glCopyTexSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage1DEXT' not found!`);
  glCopyTexSubImage1DEXT_Z_Z(target, level, xoffset, x, y, width);
}
alias glCopyTexSubImage2D = glCopyTexSubImage2D_Z_Z;
__gshared glCopyTexSubImage2D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTexSubImage2D_Z_Z_loader(target, level, xoffset, yoffset, x, y, width, height); };
private void glCopyTexSubImage2D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTexSubImage2D_Z_Z = glbindGetProcAddress(`glCopyTexSubImage2D`);
  if (*cast(void**)&glCopyTexSubImage2D_Z_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage2D' not found!`);
  glCopyTexSubImage2D_Z_Z(target, level, xoffset, yoffset, x, y, width, height);
}
alias glCopyTexSubImage2DEXT = glCopyTexSubImage2DEXT_Z_Z;
__gshared glCopyTexSubImage2DEXT_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTexSubImage2DEXT_Z_Z_loader(target, level, xoffset, yoffset, x, y, width, height); };
private void glCopyTexSubImage2DEXT_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTexSubImage2DEXT_Z_Z = glbindGetProcAddress(`glCopyTexSubImage2DEXT`);
  if (*cast(void**)&glCopyTexSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage2DEXT' not found!`);
  glCopyTexSubImage2DEXT_Z_Z(target, level, xoffset, yoffset, x, y, width, height);
}
alias glCopyTexSubImage3D = glCopyTexSubImage3D_Z_Z;
__gshared glCopyTexSubImage3D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTexSubImage3D_Z_Z_loader(target, level, xoffset, yoffset, zoffset, x, y, width, height); };
private void glCopyTexSubImage3D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTexSubImage3D_Z_Z = glbindGetProcAddress(`glCopyTexSubImage3D`);
  if (*cast(void**)&glCopyTexSubImage3D_Z_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage3D' not found!`);
  glCopyTexSubImage3D_Z_Z(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
alias glCopyTexSubImage3DEXT = glCopyTexSubImage3DEXT_Z_Z;
__gshared glCopyTexSubImage3DEXT_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTexSubImage3DEXT_Z_Z_loader(target, level, xoffset, yoffset, zoffset, x, y, width, height); };
private void glCopyTexSubImage3DEXT_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTexSubImage3DEXT_Z_Z = glbindGetProcAddress(`glCopyTexSubImage3DEXT`);
  if (*cast(void**)&glCopyTexSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage3DEXT' not found!`);
  glCopyTexSubImage3DEXT_Z_Z(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
alias glCopyTexSubImage3DOES = glCopyTexSubImage3DOES_Z_Z;
__gshared glCopyTexSubImage3DOES_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTexSubImage3DOES_Z_Z_loader(target, level, xoffset, yoffset, zoffset, x, y, width, height); };
private void glCopyTexSubImage3DOES_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTexSubImage3DOES_Z_Z = glbindGetProcAddress(`glCopyTexSubImage3DOES`);
  if (*cast(void**)&glCopyTexSubImage3DOES_Z_Z is null) assert(0, `OpenGL function 'glCopyTexSubImage3DOES' not found!`);
  glCopyTexSubImage3DOES_Z_Z(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
alias glCopyTextureImage1DEXT = glCopyTextureImage1DEXT_Z_Z;
__gshared glCopyTextureImage1DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { glCopyTextureImage1DEXT_Z_Z_loader(texture, target, level, internalformat, x, y, width, border); };
private void glCopyTextureImage1DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  *cast(void**)&glCopyTextureImage1DEXT_Z_Z = glbindGetProcAddress(`glCopyTextureImage1DEXT`);
  if (*cast(void**)&glCopyTextureImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureImage1DEXT' not found!`);
  glCopyTextureImage1DEXT_Z_Z(texture, target, level, internalformat, x, y, width, border);
}
alias glCopyTextureImage2DEXT = glCopyTextureImage2DEXT_Z_Z;
__gshared glCopyTextureImage2DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { glCopyTextureImage2DEXT_Z_Z_loader(texture, target, level, internalformat, x, y, width, height, border); };
private void glCopyTextureImage2DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  *cast(void**)&glCopyTextureImage2DEXT_Z_Z = glbindGetProcAddress(`glCopyTextureImage2DEXT`);
  if (*cast(void**)&glCopyTextureImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureImage2DEXT' not found!`);
  glCopyTextureImage2DEXT_Z_Z(texture, target, level, internalformat, x, y, width, height, border);
}
alias glCopyTextureLevelsAPPLE = glCopyTextureLevelsAPPLE_Z_Z;
__gshared glCopyTextureLevelsAPPLE_Z_Z = function void (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) { glCopyTextureLevelsAPPLE_Z_Z_loader(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount); };
private void glCopyTextureLevelsAPPLE_Z_Z_loader (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) {
  *cast(void**)&glCopyTextureLevelsAPPLE_Z_Z = glbindGetProcAddress(`glCopyTextureLevelsAPPLE`);
  if (*cast(void**)&glCopyTextureLevelsAPPLE_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureLevelsAPPLE' not found!`);
  glCopyTextureLevelsAPPLE_Z_Z(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}
alias glCopyTextureSubImage1D = glCopyTextureSubImage1D_Z_Z;
__gshared glCopyTextureSubImage1D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { glCopyTextureSubImage1D_Z_Z_loader(texture, level, xoffset, x, y, width); };
private void glCopyTextureSubImage1D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyTextureSubImage1D_Z_Z = glbindGetProcAddress(`glCopyTextureSubImage1D`);
  if (*cast(void**)&glCopyTextureSubImage1D_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage1D' not found!`);
  glCopyTextureSubImage1D_Z_Z(texture, level, xoffset, x, y, width);
}
alias glCopyTextureSubImage1DEXT = glCopyTextureSubImage1DEXT_Z_Z;
__gshared glCopyTextureSubImage1DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { glCopyTextureSubImage1DEXT_Z_Z_loader(texture, target, level, xoffset, x, y, width); };
private void glCopyTextureSubImage1DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  *cast(void**)&glCopyTextureSubImage1DEXT_Z_Z = glbindGetProcAddress(`glCopyTextureSubImage1DEXT`);
  if (*cast(void**)&glCopyTextureSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage1DEXT' not found!`);
  glCopyTextureSubImage1DEXT_Z_Z(texture, target, level, xoffset, x, y, width);
}
alias glCopyTextureSubImage2D = glCopyTextureSubImage2D_Z_Z;
__gshared glCopyTextureSubImage2D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTextureSubImage2D_Z_Z_loader(texture, level, xoffset, yoffset, x, y, width, height); };
private void glCopyTextureSubImage2D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTextureSubImage2D_Z_Z = glbindGetProcAddress(`glCopyTextureSubImage2D`);
  if (*cast(void**)&glCopyTextureSubImage2D_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage2D' not found!`);
  glCopyTextureSubImage2D_Z_Z(texture, level, xoffset, yoffset, x, y, width, height);
}
alias glCopyTextureSubImage2DEXT = glCopyTextureSubImage2DEXT_Z_Z;
__gshared glCopyTextureSubImage2DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTextureSubImage2DEXT_Z_Z_loader(texture, target, level, xoffset, yoffset, x, y, width, height); };
private void glCopyTextureSubImage2DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTextureSubImage2DEXT_Z_Z = glbindGetProcAddress(`glCopyTextureSubImage2DEXT`);
  if (*cast(void**)&glCopyTextureSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage2DEXT' not found!`);
  glCopyTextureSubImage2DEXT_Z_Z(texture, target, level, xoffset, yoffset, x, y, width, height);
}
alias glCopyTextureSubImage3D = glCopyTextureSubImage3D_Z_Z;
__gshared glCopyTextureSubImage3D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTextureSubImage3D_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, x, y, width, height); };
private void glCopyTextureSubImage3D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTextureSubImage3D_Z_Z = glbindGetProcAddress(`glCopyTextureSubImage3D`);
  if (*cast(void**)&glCopyTextureSubImage3D_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage3D' not found!`);
  glCopyTextureSubImage3D_Z_Z(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}
alias glCopyTextureSubImage3DEXT = glCopyTextureSubImage3DEXT_Z_Z;
__gshared glCopyTextureSubImage3DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { glCopyTextureSubImage3DEXT_Z_Z_loader(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); };
private void glCopyTextureSubImage3DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glCopyTextureSubImage3DEXT_Z_Z = glbindGetProcAddress(`glCopyTextureSubImage3DEXT`);
  if (*cast(void**)&glCopyTextureSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glCopyTextureSubImage3DEXT' not found!`);
  glCopyTextureSubImage3DEXT_Z_Z(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
alias glCoverFillPathInstancedNV = glCoverFillPathInstancedNV_Z_Z;
__gshared glCoverFillPathInstancedNV_Z_Z = function void (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) { glCoverFillPathInstancedNV_Z_Z_loader(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); };
private void glCoverFillPathInstancedNV_Z_Z_loader (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) {
  *cast(void**)&glCoverFillPathInstancedNV_Z_Z = glbindGetProcAddress(`glCoverFillPathInstancedNV`);
  if (*cast(void**)&glCoverFillPathInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glCoverFillPathInstancedNV' not found!`);
  glCoverFillPathInstancedNV_Z_Z(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}
alias glCoverFillPathNV = glCoverFillPathNV_Z_Z;
__gshared glCoverFillPathNV_Z_Z = function void (GLuint path, GLenum coverMode) { glCoverFillPathNV_Z_Z_loader(path, coverMode); };
private void glCoverFillPathNV_Z_Z_loader (GLuint path, GLenum coverMode) {
  *cast(void**)&glCoverFillPathNV_Z_Z = glbindGetProcAddress(`glCoverFillPathNV`);
  if (*cast(void**)&glCoverFillPathNV_Z_Z is null) assert(0, `OpenGL function 'glCoverFillPathNV' not found!`);
  glCoverFillPathNV_Z_Z(path, coverMode);
}
alias glCoverStrokePathInstancedNV = glCoverStrokePathInstancedNV_Z_Z;
__gshared glCoverStrokePathInstancedNV_Z_Z = function void (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) { glCoverStrokePathInstancedNV_Z_Z_loader(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); };
private void glCoverStrokePathInstancedNV_Z_Z_loader (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) {
  *cast(void**)&glCoverStrokePathInstancedNV_Z_Z = glbindGetProcAddress(`glCoverStrokePathInstancedNV`);
  if (*cast(void**)&glCoverStrokePathInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glCoverStrokePathInstancedNV' not found!`);
  glCoverStrokePathInstancedNV_Z_Z(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}
alias glCoverStrokePathNV = glCoverStrokePathNV_Z_Z;
__gshared glCoverStrokePathNV_Z_Z = function void (GLuint path, GLenum coverMode) { glCoverStrokePathNV_Z_Z_loader(path, coverMode); };
private void glCoverStrokePathNV_Z_Z_loader (GLuint path, GLenum coverMode) {
  *cast(void**)&glCoverStrokePathNV_Z_Z = glbindGetProcAddress(`glCoverStrokePathNV`);
  if (*cast(void**)&glCoverStrokePathNV_Z_Z is null) assert(0, `OpenGL function 'glCoverStrokePathNV' not found!`);
  glCoverStrokePathNV_Z_Z(path, coverMode);
}
alias glCoverageMaskNV = glCoverageMaskNV_Z_Z;
__gshared glCoverageMaskNV_Z_Z = function void (GLboolean mask) { glCoverageMaskNV_Z_Z_loader(mask); };
private void glCoverageMaskNV_Z_Z_loader (GLboolean mask) {
  *cast(void**)&glCoverageMaskNV_Z_Z = glbindGetProcAddress(`glCoverageMaskNV`);
  if (*cast(void**)&glCoverageMaskNV_Z_Z is null) assert(0, `OpenGL function 'glCoverageMaskNV' not found!`);
  glCoverageMaskNV_Z_Z(mask);
}
alias glCoverageModulationNV = glCoverageModulationNV_Z_Z;
__gshared glCoverageModulationNV_Z_Z = function void (GLenum components) { glCoverageModulationNV_Z_Z_loader(components); };
private void glCoverageModulationNV_Z_Z_loader (GLenum components) {
  *cast(void**)&glCoverageModulationNV_Z_Z = glbindGetProcAddress(`glCoverageModulationNV`);
  if (*cast(void**)&glCoverageModulationNV_Z_Z is null) assert(0, `OpenGL function 'glCoverageModulationNV' not found!`);
  glCoverageModulationNV_Z_Z(components);
}
alias glCoverageModulationTableNV = glCoverageModulationTableNV_Z_Z;
__gshared glCoverageModulationTableNV_Z_Z = function void (GLsizei n, const(GLfloat)* v) { glCoverageModulationTableNV_Z_Z_loader(n, v); };
private void glCoverageModulationTableNV_Z_Z_loader (GLsizei n, const(GLfloat)* v) {
  *cast(void**)&glCoverageModulationTableNV_Z_Z = glbindGetProcAddress(`glCoverageModulationTableNV`);
  if (*cast(void**)&glCoverageModulationTableNV_Z_Z is null) assert(0, `OpenGL function 'glCoverageModulationTableNV' not found!`);
  glCoverageModulationTableNV_Z_Z(n, v);
}
alias glCoverageOperationNV = glCoverageOperationNV_Z_Z;
__gshared glCoverageOperationNV_Z_Z = function void (GLenum operation) { glCoverageOperationNV_Z_Z_loader(operation); };
private void glCoverageOperationNV_Z_Z_loader (GLenum operation) {
  *cast(void**)&glCoverageOperationNV_Z_Z = glbindGetProcAddress(`glCoverageOperationNV`);
  if (*cast(void**)&glCoverageOperationNV_Z_Z is null) assert(0, `OpenGL function 'glCoverageOperationNV' not found!`);
  glCoverageOperationNV_Z_Z(operation);
}
alias glCreateBuffers = glCreateBuffers_Z_Z;
__gshared glCreateBuffers_Z_Z = function void (GLsizei n, GLuint *buffers) { glCreateBuffers_Z_Z_loader(n, buffers); };
private void glCreateBuffers_Z_Z_loader (GLsizei n, GLuint *buffers) {
  *cast(void**)&glCreateBuffers_Z_Z = glbindGetProcAddress(`glCreateBuffers`);
  if (*cast(void**)&glCreateBuffers_Z_Z is null) assert(0, `OpenGL function 'glCreateBuffers' not found!`);
  glCreateBuffers_Z_Z(n, buffers);
}
alias glCreateCommandListsNV = glCreateCommandListsNV_Z_Z;
__gshared glCreateCommandListsNV_Z_Z = function void (GLsizei n, GLuint *lists) { glCreateCommandListsNV_Z_Z_loader(n, lists); };
private void glCreateCommandListsNV_Z_Z_loader (GLsizei n, GLuint *lists) {
  *cast(void**)&glCreateCommandListsNV_Z_Z = glbindGetProcAddress(`glCreateCommandListsNV`);
  if (*cast(void**)&glCreateCommandListsNV_Z_Z is null) assert(0, `OpenGL function 'glCreateCommandListsNV' not found!`);
  glCreateCommandListsNV_Z_Z(n, lists);
}
alias glCreateFramebuffers = glCreateFramebuffers_Z_Z;
__gshared glCreateFramebuffers_Z_Z = function void (GLsizei n, GLuint *framebuffers) { glCreateFramebuffers_Z_Z_loader(n, framebuffers); };
private void glCreateFramebuffers_Z_Z_loader (GLsizei n, GLuint *framebuffers) {
  *cast(void**)&glCreateFramebuffers_Z_Z = glbindGetProcAddress(`glCreateFramebuffers`);
  if (*cast(void**)&glCreateFramebuffers_Z_Z is null) assert(0, `OpenGL function 'glCreateFramebuffers' not found!`);
  glCreateFramebuffers_Z_Z(n, framebuffers);
}
alias glCreateMemoryObjectsEXT = glCreateMemoryObjectsEXT_Z_Z;
__gshared glCreateMemoryObjectsEXT_Z_Z = function void (GLsizei n, GLuint *memoryObjects) { glCreateMemoryObjectsEXT_Z_Z_loader(n, memoryObjects); };
private void glCreateMemoryObjectsEXT_Z_Z_loader (GLsizei n, GLuint *memoryObjects) {
  *cast(void**)&glCreateMemoryObjectsEXT_Z_Z = glbindGetProcAddress(`glCreateMemoryObjectsEXT`);
  if (*cast(void**)&glCreateMemoryObjectsEXT_Z_Z is null) assert(0, `OpenGL function 'glCreateMemoryObjectsEXT' not found!`);
  glCreateMemoryObjectsEXT_Z_Z(n, memoryObjects);
}
alias glCreatePerfQueryINTEL = glCreatePerfQueryINTEL_Z_Z;
__gshared glCreatePerfQueryINTEL_Z_Z = function void (GLuint queryId, GLuint *queryHandle) { glCreatePerfQueryINTEL_Z_Z_loader(queryId, queryHandle); };
private void glCreatePerfQueryINTEL_Z_Z_loader (GLuint queryId, GLuint *queryHandle) {
  *cast(void**)&glCreatePerfQueryINTEL_Z_Z = glbindGetProcAddress(`glCreatePerfQueryINTEL`);
  if (*cast(void**)&glCreatePerfQueryINTEL_Z_Z is null) assert(0, `OpenGL function 'glCreatePerfQueryINTEL' not found!`);
  glCreatePerfQueryINTEL_Z_Z(queryId, queryHandle);
}
alias glCreateProgram = glCreateProgram_Z_Z;
__gshared glCreateProgram_Z_Z = function GLuint () { return glCreateProgram_Z_Z_loader(); };
private GLuint glCreateProgram_Z_Z_loader () {
  *cast(void**)&glCreateProgram_Z_Z = glbindGetProcAddress(`glCreateProgram`);
  if (*cast(void**)&glCreateProgram_Z_Z is null) assert(0, `OpenGL function 'glCreateProgram' not found!`);
  return glCreateProgram_Z_Z();
}
alias glCreateProgramObjectARB = glCreateProgramObjectARB_Z_Z;
__gshared glCreateProgramObjectARB_Z_Z = function GLhandleARB () { return glCreateProgramObjectARB_Z_Z_loader(); };
private GLhandleARB glCreateProgramObjectARB_Z_Z_loader () {
  *cast(void**)&glCreateProgramObjectARB_Z_Z = glbindGetProcAddress(`glCreateProgramObjectARB`);
  if (*cast(void**)&glCreateProgramObjectARB_Z_Z is null) assert(0, `OpenGL function 'glCreateProgramObjectARB' not found!`);
  return glCreateProgramObjectARB_Z_Z();
}
alias glCreateProgramPipelines = glCreateProgramPipelines_Z_Z;
__gshared glCreateProgramPipelines_Z_Z = function void (GLsizei n, GLuint *pipelines) { glCreateProgramPipelines_Z_Z_loader(n, pipelines); };
private void glCreateProgramPipelines_Z_Z_loader (GLsizei n, GLuint *pipelines) {
  *cast(void**)&glCreateProgramPipelines_Z_Z = glbindGetProcAddress(`glCreateProgramPipelines`);
  if (*cast(void**)&glCreateProgramPipelines_Z_Z is null) assert(0, `OpenGL function 'glCreateProgramPipelines' not found!`);
  glCreateProgramPipelines_Z_Z(n, pipelines);
}
alias glCreateQueries = glCreateQueries_Z_Z;
__gshared glCreateQueries_Z_Z = function void (GLenum target, GLsizei n, GLuint *ids) { glCreateQueries_Z_Z_loader(target, n, ids); };
private void glCreateQueries_Z_Z_loader (GLenum target, GLsizei n, GLuint *ids) {
  *cast(void**)&glCreateQueries_Z_Z = glbindGetProcAddress(`glCreateQueries`);
  if (*cast(void**)&glCreateQueries_Z_Z is null) assert(0, `OpenGL function 'glCreateQueries' not found!`);
  glCreateQueries_Z_Z(target, n, ids);
}
alias glCreateRenderbuffers = glCreateRenderbuffers_Z_Z;
__gshared glCreateRenderbuffers_Z_Z = function void (GLsizei n, GLuint *renderbuffers) { glCreateRenderbuffers_Z_Z_loader(n, renderbuffers); };
private void glCreateRenderbuffers_Z_Z_loader (GLsizei n, GLuint *renderbuffers) {
  *cast(void**)&glCreateRenderbuffers_Z_Z = glbindGetProcAddress(`glCreateRenderbuffers`);
  if (*cast(void**)&glCreateRenderbuffers_Z_Z is null) assert(0, `OpenGL function 'glCreateRenderbuffers' not found!`);
  glCreateRenderbuffers_Z_Z(n, renderbuffers);
}
alias glCreateSamplers = glCreateSamplers_Z_Z;
__gshared glCreateSamplers_Z_Z = function void (GLsizei n, GLuint *samplers) { glCreateSamplers_Z_Z_loader(n, samplers); };
private void glCreateSamplers_Z_Z_loader (GLsizei n, GLuint *samplers) {
  *cast(void**)&glCreateSamplers_Z_Z = glbindGetProcAddress(`glCreateSamplers`);
  if (*cast(void**)&glCreateSamplers_Z_Z is null) assert(0, `OpenGL function 'glCreateSamplers' not found!`);
  glCreateSamplers_Z_Z(n, samplers);
}
alias glCreateShader = glCreateShader_Z_Z;
__gshared glCreateShader_Z_Z = function GLuint (GLenum type) { return glCreateShader_Z_Z_loader(type); };
private GLuint glCreateShader_Z_Z_loader (GLenum type) {
  *cast(void**)&glCreateShader_Z_Z = glbindGetProcAddress(`glCreateShader`);
  if (*cast(void**)&glCreateShader_Z_Z is null) assert(0, `OpenGL function 'glCreateShader' not found!`);
  return glCreateShader_Z_Z(type);
}
alias glCreateShaderObjectARB = glCreateShaderObjectARB_Z_Z;
__gshared glCreateShaderObjectARB_Z_Z = function GLhandleARB (GLenum shaderType) { return glCreateShaderObjectARB_Z_Z_loader(shaderType); };
private GLhandleARB glCreateShaderObjectARB_Z_Z_loader (GLenum shaderType) {
  *cast(void**)&glCreateShaderObjectARB_Z_Z = glbindGetProcAddress(`glCreateShaderObjectARB`);
  if (*cast(void**)&glCreateShaderObjectARB_Z_Z is null) assert(0, `OpenGL function 'glCreateShaderObjectARB' not found!`);
  return glCreateShaderObjectARB_Z_Z(shaderType);
}
alias glCreateShaderProgramEXT = glCreateShaderProgramEXT_Z_Z;
__gshared glCreateShaderProgramEXT_Z_Z = function GLuint (GLenum type, const(GLchar)* string) { return glCreateShaderProgramEXT_Z_Z_loader(type, string); };
private GLuint glCreateShaderProgramEXT_Z_Z_loader (GLenum type, const(GLchar)* string) {
  *cast(void**)&glCreateShaderProgramEXT_Z_Z = glbindGetProcAddress(`glCreateShaderProgramEXT`);
  if (*cast(void**)&glCreateShaderProgramEXT_Z_Z is null) assert(0, `OpenGL function 'glCreateShaderProgramEXT' not found!`);
  return glCreateShaderProgramEXT_Z_Z(type, string);
}
alias glCreateShaderProgramv = glCreateShaderProgramv_Z_Z;
__gshared glCreateShaderProgramv_Z_Z = function GLuint (GLenum type, GLsizei count, const(GLchar)* *strings) { return glCreateShaderProgramv_Z_Z_loader(type, count, strings); };
private GLuint glCreateShaderProgramv_Z_Z_loader (GLenum type, GLsizei count, const(GLchar)* *strings) {
  *cast(void**)&glCreateShaderProgramv_Z_Z = glbindGetProcAddress(`glCreateShaderProgramv`);
  if (*cast(void**)&glCreateShaderProgramv_Z_Z is null) assert(0, `OpenGL function 'glCreateShaderProgramv' not found!`);
  return glCreateShaderProgramv_Z_Z(type, count, strings);
}
alias glCreateShaderProgramvEXT = glCreateShaderProgramvEXT_Z_Z;
__gshared glCreateShaderProgramvEXT_Z_Z = function GLuint (GLenum type, GLsizei count, const(GLchar)** strings) { return glCreateShaderProgramvEXT_Z_Z_loader(type, count, strings); };
private GLuint glCreateShaderProgramvEXT_Z_Z_loader (GLenum type, GLsizei count, const(GLchar)** strings) {
  *cast(void**)&glCreateShaderProgramvEXT_Z_Z = glbindGetProcAddress(`glCreateShaderProgramvEXT`);
  if (*cast(void**)&glCreateShaderProgramvEXT_Z_Z is null) assert(0, `OpenGL function 'glCreateShaderProgramvEXT' not found!`);
  return glCreateShaderProgramvEXT_Z_Z(type, count, strings);
}
alias glCreateStatesNV = glCreateStatesNV_Z_Z;
__gshared glCreateStatesNV_Z_Z = function void (GLsizei n, GLuint *states) { glCreateStatesNV_Z_Z_loader(n, states); };
private void glCreateStatesNV_Z_Z_loader (GLsizei n, GLuint *states) {
  *cast(void**)&glCreateStatesNV_Z_Z = glbindGetProcAddress(`glCreateStatesNV`);
  if (*cast(void**)&glCreateStatesNV_Z_Z is null) assert(0, `OpenGL function 'glCreateStatesNV' not found!`);
  glCreateStatesNV_Z_Z(n, states);
}
alias glCreateTextures = glCreateTextures_Z_Z;
__gshared glCreateTextures_Z_Z = function void (GLenum target, GLsizei n, GLuint *textures) { glCreateTextures_Z_Z_loader(target, n, textures); };
private void glCreateTextures_Z_Z_loader (GLenum target, GLsizei n, GLuint *textures) {
  *cast(void**)&glCreateTextures_Z_Z = glbindGetProcAddress(`glCreateTextures`);
  if (*cast(void**)&glCreateTextures_Z_Z is null) assert(0, `OpenGL function 'glCreateTextures' not found!`);
  glCreateTextures_Z_Z(target, n, textures);
}
alias glCreateTransformFeedbacks = glCreateTransformFeedbacks_Z_Z;
__gshared glCreateTransformFeedbacks_Z_Z = function void (GLsizei n, GLuint *ids) { glCreateTransformFeedbacks_Z_Z_loader(n, ids); };
private void glCreateTransformFeedbacks_Z_Z_loader (GLsizei n, GLuint *ids) {
  *cast(void**)&glCreateTransformFeedbacks_Z_Z = glbindGetProcAddress(`glCreateTransformFeedbacks`);
  if (*cast(void**)&glCreateTransformFeedbacks_Z_Z is null) assert(0, `OpenGL function 'glCreateTransformFeedbacks' not found!`);
  glCreateTransformFeedbacks_Z_Z(n, ids);
}
alias glCreateVertexArrays = glCreateVertexArrays_Z_Z;
__gshared glCreateVertexArrays_Z_Z = function void (GLsizei n, GLuint *arrays) { glCreateVertexArrays_Z_Z_loader(n, arrays); };
private void glCreateVertexArrays_Z_Z_loader (GLsizei n, GLuint *arrays) {
  *cast(void**)&glCreateVertexArrays_Z_Z = glbindGetProcAddress(`glCreateVertexArrays`);
  if (*cast(void**)&glCreateVertexArrays_Z_Z is null) assert(0, `OpenGL function 'glCreateVertexArrays' not found!`);
  glCreateVertexArrays_Z_Z(n, arrays);
}
alias glCullFace = glCullFace_Z_Z;
__gshared glCullFace_Z_Z = function void (GLenum mode) { glCullFace_Z_Z_loader(mode); };
private void glCullFace_Z_Z_loader (GLenum mode) {
  *cast(void**)&glCullFace_Z_Z = glbindGetProcAddress(`glCullFace`);
  if (*cast(void**)&glCullFace_Z_Z is null) assert(0, `OpenGL function 'glCullFace' not found!`);
  glCullFace_Z_Z(mode);
}
alias glCullParameterdvEXT = glCullParameterdvEXT_Z_Z;
__gshared glCullParameterdvEXT_Z_Z = function void (GLenum pname, GLdouble *params) { glCullParameterdvEXT_Z_Z_loader(pname, params); };
private void glCullParameterdvEXT_Z_Z_loader (GLenum pname, GLdouble *params) {
  *cast(void**)&glCullParameterdvEXT_Z_Z = glbindGetProcAddress(`glCullParameterdvEXT`);
  if (*cast(void**)&glCullParameterdvEXT_Z_Z is null) assert(0, `OpenGL function 'glCullParameterdvEXT' not found!`);
  glCullParameterdvEXT_Z_Z(pname, params);
}
alias glCullParameterfvEXT = glCullParameterfvEXT_Z_Z;
__gshared glCullParameterfvEXT_Z_Z = function void (GLenum pname, GLfloat *params) { glCullParameterfvEXT_Z_Z_loader(pname, params); };
private void glCullParameterfvEXT_Z_Z_loader (GLenum pname, GLfloat *params) {
  *cast(void**)&glCullParameterfvEXT_Z_Z = glbindGetProcAddress(`glCullParameterfvEXT`);
  if (*cast(void**)&glCullParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glCullParameterfvEXT' not found!`);
  glCullParameterfvEXT_Z_Z(pname, params);
}
alias glCurrentPaletteMatrixARB = glCurrentPaletteMatrixARB_Z_Z;
__gshared glCurrentPaletteMatrixARB_Z_Z = function void (GLint index) { glCurrentPaletteMatrixARB_Z_Z_loader(index); };
private void glCurrentPaletteMatrixARB_Z_Z_loader (GLint index) {
  *cast(void**)&glCurrentPaletteMatrixARB_Z_Z = glbindGetProcAddress(`glCurrentPaletteMatrixARB`);
  if (*cast(void**)&glCurrentPaletteMatrixARB_Z_Z is null) assert(0, `OpenGL function 'glCurrentPaletteMatrixARB' not found!`);
  glCurrentPaletteMatrixARB_Z_Z(index);
}
alias glCurrentPaletteMatrixOES = glCurrentPaletteMatrixOES_Z_Z;
__gshared glCurrentPaletteMatrixOES_Z_Z = function void (GLuint matrixpaletteindex) { glCurrentPaletteMatrixOES_Z_Z_loader(matrixpaletteindex); };
private void glCurrentPaletteMatrixOES_Z_Z_loader (GLuint matrixpaletteindex) {
  *cast(void**)&glCurrentPaletteMatrixOES_Z_Z = glbindGetProcAddress(`glCurrentPaletteMatrixOES`);
  if (*cast(void**)&glCurrentPaletteMatrixOES_Z_Z is null) assert(0, `OpenGL function 'glCurrentPaletteMatrixOES' not found!`);
  glCurrentPaletteMatrixOES_Z_Z(matrixpaletteindex);
}
alias glDebugMessageCallback = glDebugMessageCallback_Z_Z;
__gshared glDebugMessageCallback_Z_Z = function void (GLDEBUGPROC callback, const(void)* userParam) { glDebugMessageCallback_Z_Z_loader(callback, userParam); };
private void glDebugMessageCallback_Z_Z_loader (GLDEBUGPROC callback, const(void)* userParam) {
  *cast(void**)&glDebugMessageCallback_Z_Z = glbindGetProcAddress(`glDebugMessageCallback`);
  if (*cast(void**)&glDebugMessageCallback_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageCallback' not found!`);
  glDebugMessageCallback_Z_Z(callback, userParam);
}
alias glDebugMessageCallbackAMD = glDebugMessageCallbackAMD_Z_Z;
__gshared glDebugMessageCallbackAMD_Z_Z = function void (GLDEBUGPROCAMD callback, void *userParam) { glDebugMessageCallbackAMD_Z_Z_loader(callback, userParam); };
private void glDebugMessageCallbackAMD_Z_Z_loader (GLDEBUGPROCAMD callback, void *userParam) {
  *cast(void**)&glDebugMessageCallbackAMD_Z_Z = glbindGetProcAddress(`glDebugMessageCallbackAMD`);
  if (*cast(void**)&glDebugMessageCallbackAMD_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageCallbackAMD' not found!`);
  glDebugMessageCallbackAMD_Z_Z(callback, userParam);
}
alias glDebugMessageCallbackARB = glDebugMessageCallbackARB_Z_Z;
__gshared glDebugMessageCallbackARB_Z_Z = function void (GLDEBUGPROCARB callback, const(void)* userParam) { glDebugMessageCallbackARB_Z_Z_loader(callback, userParam); };
private void glDebugMessageCallbackARB_Z_Z_loader (GLDEBUGPROCARB callback, const(void)* userParam) {
  *cast(void**)&glDebugMessageCallbackARB_Z_Z = glbindGetProcAddress(`glDebugMessageCallbackARB`);
  if (*cast(void**)&glDebugMessageCallbackARB_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageCallbackARB' not found!`);
  glDebugMessageCallbackARB_Z_Z(callback, userParam);
}
alias glDebugMessageCallbackKHR = glDebugMessageCallbackKHR_Z_Z;
__gshared glDebugMessageCallbackKHR_Z_Z = function void (GLDEBUGPROCKHR callback, const(void)* userParam) { glDebugMessageCallbackKHR_Z_Z_loader(callback, userParam); };
private void glDebugMessageCallbackKHR_Z_Z_loader (GLDEBUGPROCKHR callback, const(void)* userParam) {
  *cast(void**)&glDebugMessageCallbackKHR_Z_Z = glbindGetProcAddress(`glDebugMessageCallbackKHR`);
  if (*cast(void**)&glDebugMessageCallbackKHR_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageCallbackKHR' not found!`);
  glDebugMessageCallbackKHR_Z_Z(callback, userParam);
}
alias glDebugMessageControl = glDebugMessageControl_Z_Z;
__gshared glDebugMessageControl_Z_Z = function void (GLenum source, GLenum type, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) { glDebugMessageControl_Z_Z_loader(source, type, severity, count, ids, enabled); };
private void glDebugMessageControl_Z_Z_loader (GLenum source, GLenum type, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) {
  *cast(void**)&glDebugMessageControl_Z_Z = glbindGetProcAddress(`glDebugMessageControl`);
  if (*cast(void**)&glDebugMessageControl_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageControl' not found!`);
  glDebugMessageControl_Z_Z(source, type, severity, count, ids, enabled);
}
alias glDebugMessageControlARB = glDebugMessageControlARB_Z_Z;
__gshared glDebugMessageControlARB_Z_Z = function void (GLenum source, GLenum type, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) { glDebugMessageControlARB_Z_Z_loader(source, type, severity, count, ids, enabled); };
private void glDebugMessageControlARB_Z_Z_loader (GLenum source, GLenum type, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) {
  *cast(void**)&glDebugMessageControlARB_Z_Z = glbindGetProcAddress(`glDebugMessageControlARB`);
  if (*cast(void**)&glDebugMessageControlARB_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageControlARB' not found!`);
  glDebugMessageControlARB_Z_Z(source, type, severity, count, ids, enabled);
}
alias glDebugMessageControlKHR = glDebugMessageControlKHR_Z_Z;
__gshared glDebugMessageControlKHR_Z_Z = function void (GLenum source, GLenum type, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) { glDebugMessageControlKHR_Z_Z_loader(source, type, severity, count, ids, enabled); };
private void glDebugMessageControlKHR_Z_Z_loader (GLenum source, GLenum type, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) {
  *cast(void**)&glDebugMessageControlKHR_Z_Z = glbindGetProcAddress(`glDebugMessageControlKHR`);
  if (*cast(void**)&glDebugMessageControlKHR_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageControlKHR' not found!`);
  glDebugMessageControlKHR_Z_Z(source, type, severity, count, ids, enabled);
}
alias glDebugMessageEnableAMD = glDebugMessageEnableAMD_Z_Z;
__gshared glDebugMessageEnableAMD_Z_Z = function void (GLenum category, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) { glDebugMessageEnableAMD_Z_Z_loader(category, severity, count, ids, enabled); };
private void glDebugMessageEnableAMD_Z_Z_loader (GLenum category, GLenum severity, GLsizei count, const(GLuint)* ids, GLboolean enabled) {
  *cast(void**)&glDebugMessageEnableAMD_Z_Z = glbindGetProcAddress(`glDebugMessageEnableAMD`);
  if (*cast(void**)&glDebugMessageEnableAMD_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageEnableAMD' not found!`);
  glDebugMessageEnableAMD_Z_Z(category, severity, count, ids, enabled);
}
alias glDebugMessageInsert = glDebugMessageInsert_Z_Z;
__gshared glDebugMessageInsert_Z_Z = function void (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* buf) { glDebugMessageInsert_Z_Z_loader(source, type, id, severity, length, buf); };
private void glDebugMessageInsert_Z_Z_loader (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* buf) {
  *cast(void**)&glDebugMessageInsert_Z_Z = glbindGetProcAddress(`glDebugMessageInsert`);
  if (*cast(void**)&glDebugMessageInsert_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageInsert' not found!`);
  glDebugMessageInsert_Z_Z(source, type, id, severity, length, buf);
}
alias glDebugMessageInsertAMD = glDebugMessageInsertAMD_Z_Z;
__gshared glDebugMessageInsertAMD_Z_Z = function void (GLenum category, GLenum severity, GLuint id, GLsizei length, const(GLchar)* buf) { glDebugMessageInsertAMD_Z_Z_loader(category, severity, id, length, buf); };
private void glDebugMessageInsertAMD_Z_Z_loader (GLenum category, GLenum severity, GLuint id, GLsizei length, const(GLchar)* buf) {
  *cast(void**)&glDebugMessageInsertAMD_Z_Z = glbindGetProcAddress(`glDebugMessageInsertAMD`);
  if (*cast(void**)&glDebugMessageInsertAMD_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageInsertAMD' not found!`);
  glDebugMessageInsertAMD_Z_Z(category, severity, id, length, buf);
}
alias glDebugMessageInsertARB = glDebugMessageInsertARB_Z_Z;
__gshared glDebugMessageInsertARB_Z_Z = function void (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* buf) { glDebugMessageInsertARB_Z_Z_loader(source, type, id, severity, length, buf); };
private void glDebugMessageInsertARB_Z_Z_loader (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* buf) {
  *cast(void**)&glDebugMessageInsertARB_Z_Z = glbindGetProcAddress(`glDebugMessageInsertARB`);
  if (*cast(void**)&glDebugMessageInsertARB_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageInsertARB' not found!`);
  glDebugMessageInsertARB_Z_Z(source, type, id, severity, length, buf);
}
alias glDebugMessageInsertKHR = glDebugMessageInsertKHR_Z_Z;
__gshared glDebugMessageInsertKHR_Z_Z = function void (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* buf) { glDebugMessageInsertKHR_Z_Z_loader(source, type, id, severity, length, buf); };
private void glDebugMessageInsertKHR_Z_Z_loader (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const(GLchar)* buf) {
  *cast(void**)&glDebugMessageInsertKHR_Z_Z = glbindGetProcAddress(`glDebugMessageInsertKHR`);
  if (*cast(void**)&glDebugMessageInsertKHR_Z_Z is null) assert(0, `OpenGL function 'glDebugMessageInsertKHR' not found!`);
  glDebugMessageInsertKHR_Z_Z(source, type, id, severity, length, buf);
}
alias glDeformSGIX = glDeformSGIX_Z_Z;
__gshared glDeformSGIX_Z_Z = function void (GLbitfield mask) { glDeformSGIX_Z_Z_loader(mask); };
private void glDeformSGIX_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glDeformSGIX_Z_Z = glbindGetProcAddress(`glDeformSGIX`);
  if (*cast(void**)&glDeformSGIX_Z_Z is null) assert(0, `OpenGL function 'glDeformSGIX' not found!`);
  glDeformSGIX_Z_Z(mask);
}
alias glDeformationMap3dSGIX = glDeformationMap3dSGIX_Z_Z;
__gshared glDeformationMap3dSGIX_Z_Z = function void (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const(GLdouble)* points) { glDeformationMap3dSGIX_Z_Z_loader(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); };
private void glDeformationMap3dSGIX_Z_Z_loader (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const(GLdouble)* points) {
  *cast(void**)&glDeformationMap3dSGIX_Z_Z = glbindGetProcAddress(`glDeformationMap3dSGIX`);
  if (*cast(void**)&glDeformationMap3dSGIX_Z_Z is null) assert(0, `OpenGL function 'glDeformationMap3dSGIX' not found!`);
  glDeformationMap3dSGIX_Z_Z(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}
alias glDeformationMap3fSGIX = glDeformationMap3fSGIX_Z_Z;
__gshared glDeformationMap3fSGIX_Z_Z = function void (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const(GLfloat)* points) { glDeformationMap3fSGIX_Z_Z_loader(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); };
private void glDeformationMap3fSGIX_Z_Z_loader (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const(GLfloat)* points) {
  *cast(void**)&glDeformationMap3fSGIX_Z_Z = glbindGetProcAddress(`glDeformationMap3fSGIX`);
  if (*cast(void**)&glDeformationMap3fSGIX_Z_Z is null) assert(0, `OpenGL function 'glDeformationMap3fSGIX' not found!`);
  glDeformationMap3fSGIX_Z_Z(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}
alias glDeleteAsyncMarkersSGIX = glDeleteAsyncMarkersSGIX_Z_Z;
__gshared glDeleteAsyncMarkersSGIX_Z_Z = function void (GLuint marker, GLsizei range) { glDeleteAsyncMarkersSGIX_Z_Z_loader(marker, range); };
private void glDeleteAsyncMarkersSGIX_Z_Z_loader (GLuint marker, GLsizei range) {
  *cast(void**)&glDeleteAsyncMarkersSGIX_Z_Z = glbindGetProcAddress(`glDeleteAsyncMarkersSGIX`);
  if (*cast(void**)&glDeleteAsyncMarkersSGIX_Z_Z is null) assert(0, `OpenGL function 'glDeleteAsyncMarkersSGIX' not found!`);
  glDeleteAsyncMarkersSGIX_Z_Z(marker, range);
}
alias glDeleteBuffers = glDeleteBuffers_Z_Z;
__gshared glDeleteBuffers_Z_Z = function void (GLsizei n, const(GLuint)* buffers) { glDeleteBuffers_Z_Z_loader(n, buffers); };
private void glDeleteBuffers_Z_Z_loader (GLsizei n, const(GLuint)* buffers) {
  *cast(void**)&glDeleteBuffers_Z_Z = glbindGetProcAddress(`glDeleteBuffers`);
  if (*cast(void**)&glDeleteBuffers_Z_Z is null) assert(0, `OpenGL function 'glDeleteBuffers' not found!`);
  glDeleteBuffers_Z_Z(n, buffers);
}
alias glDeleteBuffersARB = glDeleteBuffersARB_Z_Z;
__gshared glDeleteBuffersARB_Z_Z = function void (GLsizei n, const(GLuint)* buffers) { glDeleteBuffersARB_Z_Z_loader(n, buffers); };
private void glDeleteBuffersARB_Z_Z_loader (GLsizei n, const(GLuint)* buffers) {
  *cast(void**)&glDeleteBuffersARB_Z_Z = glbindGetProcAddress(`glDeleteBuffersARB`);
  if (*cast(void**)&glDeleteBuffersARB_Z_Z is null) assert(0, `OpenGL function 'glDeleteBuffersARB' not found!`);
  glDeleteBuffersARB_Z_Z(n, buffers);
}
alias glDeleteCommandListsNV = glDeleteCommandListsNV_Z_Z;
__gshared glDeleteCommandListsNV_Z_Z = function void (GLsizei n, const(GLuint)* lists) { glDeleteCommandListsNV_Z_Z_loader(n, lists); };
private void glDeleteCommandListsNV_Z_Z_loader (GLsizei n, const(GLuint)* lists) {
  *cast(void**)&glDeleteCommandListsNV_Z_Z = glbindGetProcAddress(`glDeleteCommandListsNV`);
  if (*cast(void**)&glDeleteCommandListsNV_Z_Z is null) assert(0, `OpenGL function 'glDeleteCommandListsNV' not found!`);
  glDeleteCommandListsNV_Z_Z(n, lists);
}
alias glDeleteFencesAPPLE = glDeleteFencesAPPLE_Z_Z;
__gshared glDeleteFencesAPPLE_Z_Z = function void (GLsizei n, const(GLuint)* fences) { glDeleteFencesAPPLE_Z_Z_loader(n, fences); };
private void glDeleteFencesAPPLE_Z_Z_loader (GLsizei n, const(GLuint)* fences) {
  *cast(void**)&glDeleteFencesAPPLE_Z_Z = glbindGetProcAddress(`glDeleteFencesAPPLE`);
  if (*cast(void**)&glDeleteFencesAPPLE_Z_Z is null) assert(0, `OpenGL function 'glDeleteFencesAPPLE' not found!`);
  glDeleteFencesAPPLE_Z_Z(n, fences);
}
alias glDeleteFencesNV = glDeleteFencesNV_Z_Z;
__gshared glDeleteFencesNV_Z_Z = function void (GLsizei n, const(GLuint)* fences) { glDeleteFencesNV_Z_Z_loader(n, fences); };
private void glDeleteFencesNV_Z_Z_loader (GLsizei n, const(GLuint)* fences) {
  *cast(void**)&glDeleteFencesNV_Z_Z = glbindGetProcAddress(`glDeleteFencesNV`);
  if (*cast(void**)&glDeleteFencesNV_Z_Z is null) assert(0, `OpenGL function 'glDeleteFencesNV' not found!`);
  glDeleteFencesNV_Z_Z(n, fences);
}
alias glDeleteFragmentShaderATI = glDeleteFragmentShaderATI_Z_Z;
__gshared glDeleteFragmentShaderATI_Z_Z = function void (GLuint id) { glDeleteFragmentShaderATI_Z_Z_loader(id); };
private void glDeleteFragmentShaderATI_Z_Z_loader (GLuint id) {
  *cast(void**)&glDeleteFragmentShaderATI_Z_Z = glbindGetProcAddress(`glDeleteFragmentShaderATI`);
  if (*cast(void**)&glDeleteFragmentShaderATI_Z_Z is null) assert(0, `OpenGL function 'glDeleteFragmentShaderATI' not found!`);
  glDeleteFragmentShaderATI_Z_Z(id);
}
alias glDeleteFramebuffers = glDeleteFramebuffers_Z_Z;
__gshared glDeleteFramebuffers_Z_Z = function void (GLsizei n, const(GLuint)* framebuffers) { glDeleteFramebuffers_Z_Z_loader(n, framebuffers); };
private void glDeleteFramebuffers_Z_Z_loader (GLsizei n, const(GLuint)* framebuffers) {
  *cast(void**)&glDeleteFramebuffers_Z_Z = glbindGetProcAddress(`glDeleteFramebuffers`);
  if (*cast(void**)&glDeleteFramebuffers_Z_Z is null) assert(0, `OpenGL function 'glDeleteFramebuffers' not found!`);
  glDeleteFramebuffers_Z_Z(n, framebuffers);
}
alias glDeleteFramebuffersEXT = glDeleteFramebuffersEXT_Z_Z;
__gshared glDeleteFramebuffersEXT_Z_Z = function void (GLsizei n, const(GLuint)* framebuffers) { glDeleteFramebuffersEXT_Z_Z_loader(n, framebuffers); };
private void glDeleteFramebuffersEXT_Z_Z_loader (GLsizei n, const(GLuint)* framebuffers) {
  *cast(void**)&glDeleteFramebuffersEXT_Z_Z = glbindGetProcAddress(`glDeleteFramebuffersEXT`);
  if (*cast(void**)&glDeleteFramebuffersEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteFramebuffersEXT' not found!`);
  glDeleteFramebuffersEXT_Z_Z(n, framebuffers);
}
alias glDeleteFramebuffersOES = glDeleteFramebuffersOES_Z_Z;
__gshared glDeleteFramebuffersOES_Z_Z = function void (GLsizei n, const(GLuint)* framebuffers) { glDeleteFramebuffersOES_Z_Z_loader(n, framebuffers); };
private void glDeleteFramebuffersOES_Z_Z_loader (GLsizei n, const(GLuint)* framebuffers) {
  *cast(void**)&glDeleteFramebuffersOES_Z_Z = glbindGetProcAddress(`glDeleteFramebuffersOES`);
  if (*cast(void**)&glDeleteFramebuffersOES_Z_Z is null) assert(0, `OpenGL function 'glDeleteFramebuffersOES' not found!`);
  glDeleteFramebuffersOES_Z_Z(n, framebuffers);
}
alias glDeleteLists = glDeleteLists_Z_Z;
__gshared glDeleteLists_Z_Z = function void (GLuint list, GLsizei range) { glDeleteLists_Z_Z_loader(list, range); };
private void glDeleteLists_Z_Z_loader (GLuint list, GLsizei range) {
  *cast(void**)&glDeleteLists_Z_Z = glbindGetProcAddress(`glDeleteLists`);
  if (*cast(void**)&glDeleteLists_Z_Z is null) assert(0, `OpenGL function 'glDeleteLists' not found!`);
  glDeleteLists_Z_Z(list, range);
}
alias glDeleteMemoryObjectsEXT = glDeleteMemoryObjectsEXT_Z_Z;
__gshared glDeleteMemoryObjectsEXT_Z_Z = function void (GLsizei n, const(GLuint)* memoryObjects) { glDeleteMemoryObjectsEXT_Z_Z_loader(n, memoryObjects); };
private void glDeleteMemoryObjectsEXT_Z_Z_loader (GLsizei n, const(GLuint)* memoryObjects) {
  *cast(void**)&glDeleteMemoryObjectsEXT_Z_Z = glbindGetProcAddress(`glDeleteMemoryObjectsEXT`);
  if (*cast(void**)&glDeleteMemoryObjectsEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteMemoryObjectsEXT' not found!`);
  glDeleteMemoryObjectsEXT_Z_Z(n, memoryObjects);
}
alias glDeleteNamedStringARB = glDeleteNamedStringARB_Z_Z;
__gshared glDeleteNamedStringARB_Z_Z = function void (GLint namelen, const(GLchar)* name) { glDeleteNamedStringARB_Z_Z_loader(namelen, name); };
private void glDeleteNamedStringARB_Z_Z_loader (GLint namelen, const(GLchar)* name) {
  *cast(void**)&glDeleteNamedStringARB_Z_Z = glbindGetProcAddress(`glDeleteNamedStringARB`);
  if (*cast(void**)&glDeleteNamedStringARB_Z_Z is null) assert(0, `OpenGL function 'glDeleteNamedStringARB' not found!`);
  glDeleteNamedStringARB_Z_Z(namelen, name);
}
alias glDeleteNamesAMD = glDeleteNamesAMD_Z_Z;
__gshared glDeleteNamesAMD_Z_Z = function void (GLenum identifier, GLuint num, const(GLuint)* names) { glDeleteNamesAMD_Z_Z_loader(identifier, num, names); };
private void glDeleteNamesAMD_Z_Z_loader (GLenum identifier, GLuint num, const(GLuint)* names) {
  *cast(void**)&glDeleteNamesAMD_Z_Z = glbindGetProcAddress(`glDeleteNamesAMD`);
  if (*cast(void**)&glDeleteNamesAMD_Z_Z is null) assert(0, `OpenGL function 'glDeleteNamesAMD' not found!`);
  glDeleteNamesAMD_Z_Z(identifier, num, names);
}
alias glDeleteObjectARB = glDeleteObjectARB_Z_Z;
__gshared glDeleteObjectARB_Z_Z = function void (GLhandleARB obj) { glDeleteObjectARB_Z_Z_loader(obj); };
private void glDeleteObjectARB_Z_Z_loader (GLhandleARB obj) {
  *cast(void**)&glDeleteObjectARB_Z_Z = glbindGetProcAddress(`glDeleteObjectARB`);
  if (*cast(void**)&glDeleteObjectARB_Z_Z is null) assert(0, `OpenGL function 'glDeleteObjectARB' not found!`);
  glDeleteObjectARB_Z_Z(obj);
}
alias glDeleteOcclusionQueriesNV = glDeleteOcclusionQueriesNV_Z_Z;
__gshared glDeleteOcclusionQueriesNV_Z_Z = function void (GLsizei n, const(GLuint)* ids) { glDeleteOcclusionQueriesNV_Z_Z_loader(n, ids); };
private void glDeleteOcclusionQueriesNV_Z_Z_loader (GLsizei n, const(GLuint)* ids) {
  *cast(void**)&glDeleteOcclusionQueriesNV_Z_Z = glbindGetProcAddress(`glDeleteOcclusionQueriesNV`);
  if (*cast(void**)&glDeleteOcclusionQueriesNV_Z_Z is null) assert(0, `OpenGL function 'glDeleteOcclusionQueriesNV' not found!`);
  glDeleteOcclusionQueriesNV_Z_Z(n, ids);
}
alias glDeletePathsNV = glDeletePathsNV_Z_Z;
__gshared glDeletePathsNV_Z_Z = function void (GLuint path, GLsizei range) { glDeletePathsNV_Z_Z_loader(path, range); };
private void glDeletePathsNV_Z_Z_loader (GLuint path, GLsizei range) {
  *cast(void**)&glDeletePathsNV_Z_Z = glbindGetProcAddress(`glDeletePathsNV`);
  if (*cast(void**)&glDeletePathsNV_Z_Z is null) assert(0, `OpenGL function 'glDeletePathsNV' not found!`);
  glDeletePathsNV_Z_Z(path, range);
}
alias glDeletePerfMonitorsAMD = glDeletePerfMonitorsAMD_Z_Z;
__gshared glDeletePerfMonitorsAMD_Z_Z = function void (GLsizei n, GLuint *monitors) { glDeletePerfMonitorsAMD_Z_Z_loader(n, monitors); };
private void glDeletePerfMonitorsAMD_Z_Z_loader (GLsizei n, GLuint *monitors) {
  *cast(void**)&glDeletePerfMonitorsAMD_Z_Z = glbindGetProcAddress(`glDeletePerfMonitorsAMD`);
  if (*cast(void**)&glDeletePerfMonitorsAMD_Z_Z is null) assert(0, `OpenGL function 'glDeletePerfMonitorsAMD' not found!`);
  glDeletePerfMonitorsAMD_Z_Z(n, monitors);
}
alias glDeletePerfQueryINTEL = glDeletePerfQueryINTEL_Z_Z;
__gshared glDeletePerfQueryINTEL_Z_Z = function void (GLuint queryHandle) { glDeletePerfQueryINTEL_Z_Z_loader(queryHandle); };
private void glDeletePerfQueryINTEL_Z_Z_loader (GLuint queryHandle) {
  *cast(void**)&glDeletePerfQueryINTEL_Z_Z = glbindGetProcAddress(`glDeletePerfQueryINTEL`);
  if (*cast(void**)&glDeletePerfQueryINTEL_Z_Z is null) assert(0, `OpenGL function 'glDeletePerfQueryINTEL' not found!`);
  glDeletePerfQueryINTEL_Z_Z(queryHandle);
}
alias glDeleteProgram = glDeleteProgram_Z_Z;
__gshared glDeleteProgram_Z_Z = function void (GLuint program) { glDeleteProgram_Z_Z_loader(program); };
private void glDeleteProgram_Z_Z_loader (GLuint program) {
  *cast(void**)&glDeleteProgram_Z_Z = glbindGetProcAddress(`glDeleteProgram`);
  if (*cast(void**)&glDeleteProgram_Z_Z is null) assert(0, `OpenGL function 'glDeleteProgram' not found!`);
  glDeleteProgram_Z_Z(program);
}
alias glDeleteProgramPipelines = glDeleteProgramPipelines_Z_Z;
__gshared glDeleteProgramPipelines_Z_Z = function void (GLsizei n, const(GLuint)* pipelines) { glDeleteProgramPipelines_Z_Z_loader(n, pipelines); };
private void glDeleteProgramPipelines_Z_Z_loader (GLsizei n, const(GLuint)* pipelines) {
  *cast(void**)&glDeleteProgramPipelines_Z_Z = glbindGetProcAddress(`glDeleteProgramPipelines`);
  if (*cast(void**)&glDeleteProgramPipelines_Z_Z is null) assert(0, `OpenGL function 'glDeleteProgramPipelines' not found!`);
  glDeleteProgramPipelines_Z_Z(n, pipelines);
}
alias glDeleteProgramPipelinesEXT = glDeleteProgramPipelinesEXT_Z_Z;
__gshared glDeleteProgramPipelinesEXT_Z_Z = function void (GLsizei n, const(GLuint)* pipelines) { glDeleteProgramPipelinesEXT_Z_Z_loader(n, pipelines); };
private void glDeleteProgramPipelinesEXT_Z_Z_loader (GLsizei n, const(GLuint)* pipelines) {
  *cast(void**)&glDeleteProgramPipelinesEXT_Z_Z = glbindGetProcAddress(`glDeleteProgramPipelinesEXT`);
  if (*cast(void**)&glDeleteProgramPipelinesEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteProgramPipelinesEXT' not found!`);
  glDeleteProgramPipelinesEXT_Z_Z(n, pipelines);
}
alias glDeleteProgramsARB = glDeleteProgramsARB_Z_Z;
__gshared glDeleteProgramsARB_Z_Z = function void (GLsizei n, const(GLuint)* programs) { glDeleteProgramsARB_Z_Z_loader(n, programs); };
private void glDeleteProgramsARB_Z_Z_loader (GLsizei n, const(GLuint)* programs) {
  *cast(void**)&glDeleteProgramsARB_Z_Z = glbindGetProcAddress(`glDeleteProgramsARB`);
  if (*cast(void**)&glDeleteProgramsARB_Z_Z is null) assert(0, `OpenGL function 'glDeleteProgramsARB' not found!`);
  glDeleteProgramsARB_Z_Z(n, programs);
}
alias glDeleteProgramsNV = glDeleteProgramsNV_Z_Z;
__gshared glDeleteProgramsNV_Z_Z = function void (GLsizei n, const(GLuint)* programs) { glDeleteProgramsNV_Z_Z_loader(n, programs); };
private void glDeleteProgramsNV_Z_Z_loader (GLsizei n, const(GLuint)* programs) {
  *cast(void**)&glDeleteProgramsNV_Z_Z = glbindGetProcAddress(`glDeleteProgramsNV`);
  if (*cast(void**)&glDeleteProgramsNV_Z_Z is null) assert(0, `OpenGL function 'glDeleteProgramsNV' not found!`);
  glDeleteProgramsNV_Z_Z(n, programs);
}
alias glDeleteQueries = glDeleteQueries_Z_Z;
__gshared glDeleteQueries_Z_Z = function void (GLsizei n, const(GLuint)* ids) { glDeleteQueries_Z_Z_loader(n, ids); };
private void glDeleteQueries_Z_Z_loader (GLsizei n, const(GLuint)* ids) {
  *cast(void**)&glDeleteQueries_Z_Z = glbindGetProcAddress(`glDeleteQueries`);
  if (*cast(void**)&glDeleteQueries_Z_Z is null) assert(0, `OpenGL function 'glDeleteQueries' not found!`);
  glDeleteQueries_Z_Z(n, ids);
}
alias glDeleteQueriesARB = glDeleteQueriesARB_Z_Z;
__gshared glDeleteQueriesARB_Z_Z = function void (GLsizei n, const(GLuint)* ids) { glDeleteQueriesARB_Z_Z_loader(n, ids); };
private void glDeleteQueriesARB_Z_Z_loader (GLsizei n, const(GLuint)* ids) {
  *cast(void**)&glDeleteQueriesARB_Z_Z = glbindGetProcAddress(`glDeleteQueriesARB`);
  if (*cast(void**)&glDeleteQueriesARB_Z_Z is null) assert(0, `OpenGL function 'glDeleteQueriesARB' not found!`);
  glDeleteQueriesARB_Z_Z(n, ids);
}
alias glDeleteQueriesEXT = glDeleteQueriesEXT_Z_Z;
__gshared glDeleteQueriesEXT_Z_Z = function void (GLsizei n, const(GLuint)* ids) { glDeleteQueriesEXT_Z_Z_loader(n, ids); };
private void glDeleteQueriesEXT_Z_Z_loader (GLsizei n, const(GLuint)* ids) {
  *cast(void**)&glDeleteQueriesEXT_Z_Z = glbindGetProcAddress(`glDeleteQueriesEXT`);
  if (*cast(void**)&glDeleteQueriesEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteQueriesEXT' not found!`);
  glDeleteQueriesEXT_Z_Z(n, ids);
}
alias glDeleteRenderbuffers = glDeleteRenderbuffers_Z_Z;
__gshared glDeleteRenderbuffers_Z_Z = function void (GLsizei n, const(GLuint)* renderbuffers) { glDeleteRenderbuffers_Z_Z_loader(n, renderbuffers); };
private void glDeleteRenderbuffers_Z_Z_loader (GLsizei n, const(GLuint)* renderbuffers) {
  *cast(void**)&glDeleteRenderbuffers_Z_Z = glbindGetProcAddress(`glDeleteRenderbuffers`);
  if (*cast(void**)&glDeleteRenderbuffers_Z_Z is null) assert(0, `OpenGL function 'glDeleteRenderbuffers' not found!`);
  glDeleteRenderbuffers_Z_Z(n, renderbuffers);
}
alias glDeleteRenderbuffersEXT = glDeleteRenderbuffersEXT_Z_Z;
__gshared glDeleteRenderbuffersEXT_Z_Z = function void (GLsizei n, const(GLuint)* renderbuffers) { glDeleteRenderbuffersEXT_Z_Z_loader(n, renderbuffers); };
private void glDeleteRenderbuffersEXT_Z_Z_loader (GLsizei n, const(GLuint)* renderbuffers) {
  *cast(void**)&glDeleteRenderbuffersEXT_Z_Z = glbindGetProcAddress(`glDeleteRenderbuffersEXT`);
  if (*cast(void**)&glDeleteRenderbuffersEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteRenderbuffersEXT' not found!`);
  glDeleteRenderbuffersEXT_Z_Z(n, renderbuffers);
}
alias glDeleteRenderbuffersOES = glDeleteRenderbuffersOES_Z_Z;
__gshared glDeleteRenderbuffersOES_Z_Z = function void (GLsizei n, const(GLuint)* renderbuffers) { glDeleteRenderbuffersOES_Z_Z_loader(n, renderbuffers); };
private void glDeleteRenderbuffersOES_Z_Z_loader (GLsizei n, const(GLuint)* renderbuffers) {
  *cast(void**)&glDeleteRenderbuffersOES_Z_Z = glbindGetProcAddress(`glDeleteRenderbuffersOES`);
  if (*cast(void**)&glDeleteRenderbuffersOES_Z_Z is null) assert(0, `OpenGL function 'glDeleteRenderbuffersOES' not found!`);
  glDeleteRenderbuffersOES_Z_Z(n, renderbuffers);
}
alias glDeleteSamplers = glDeleteSamplers_Z_Z;
__gshared glDeleteSamplers_Z_Z = function void (GLsizei count, const(GLuint)* samplers) { glDeleteSamplers_Z_Z_loader(count, samplers); };
private void glDeleteSamplers_Z_Z_loader (GLsizei count, const(GLuint)* samplers) {
  *cast(void**)&glDeleteSamplers_Z_Z = glbindGetProcAddress(`glDeleteSamplers`);
  if (*cast(void**)&glDeleteSamplers_Z_Z is null) assert(0, `OpenGL function 'glDeleteSamplers' not found!`);
  glDeleteSamplers_Z_Z(count, samplers);
}
alias glDeleteSemaphoresEXT = glDeleteSemaphoresEXT_Z_Z;
__gshared glDeleteSemaphoresEXT_Z_Z = function void (GLsizei n, const(GLuint)* semaphores) { glDeleteSemaphoresEXT_Z_Z_loader(n, semaphores); };
private void glDeleteSemaphoresEXT_Z_Z_loader (GLsizei n, const(GLuint)* semaphores) {
  *cast(void**)&glDeleteSemaphoresEXT_Z_Z = glbindGetProcAddress(`glDeleteSemaphoresEXT`);
  if (*cast(void**)&glDeleteSemaphoresEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteSemaphoresEXT' not found!`);
  glDeleteSemaphoresEXT_Z_Z(n, semaphores);
}
alias glDeleteShader = glDeleteShader_Z_Z;
__gshared glDeleteShader_Z_Z = function void (GLuint shader) { glDeleteShader_Z_Z_loader(shader); };
private void glDeleteShader_Z_Z_loader (GLuint shader) {
  *cast(void**)&glDeleteShader_Z_Z = glbindGetProcAddress(`glDeleteShader`);
  if (*cast(void**)&glDeleteShader_Z_Z is null) assert(0, `OpenGL function 'glDeleteShader' not found!`);
  glDeleteShader_Z_Z(shader);
}
alias glDeleteStatesNV = glDeleteStatesNV_Z_Z;
__gshared glDeleteStatesNV_Z_Z = function void (GLsizei n, const(GLuint)* states) { glDeleteStatesNV_Z_Z_loader(n, states); };
private void glDeleteStatesNV_Z_Z_loader (GLsizei n, const(GLuint)* states) {
  *cast(void**)&glDeleteStatesNV_Z_Z = glbindGetProcAddress(`glDeleteStatesNV`);
  if (*cast(void**)&glDeleteStatesNV_Z_Z is null) assert(0, `OpenGL function 'glDeleteStatesNV' not found!`);
  glDeleteStatesNV_Z_Z(n, states);
}
alias glDeleteSync = glDeleteSync_Z_Z;
__gshared glDeleteSync_Z_Z = function void (GLsync sync) { glDeleteSync_Z_Z_loader(sync); };
private void glDeleteSync_Z_Z_loader (GLsync sync) {
  *cast(void**)&glDeleteSync_Z_Z = glbindGetProcAddress(`glDeleteSync`);
  if (*cast(void**)&glDeleteSync_Z_Z is null) assert(0, `OpenGL function 'glDeleteSync' not found!`);
  glDeleteSync_Z_Z(sync);
}
alias glDeleteSyncAPPLE = glDeleteSyncAPPLE_Z_Z;
__gshared glDeleteSyncAPPLE_Z_Z = function void (GLsync sync) { glDeleteSyncAPPLE_Z_Z_loader(sync); };
private void glDeleteSyncAPPLE_Z_Z_loader (GLsync sync) {
  *cast(void**)&glDeleteSyncAPPLE_Z_Z = glbindGetProcAddress(`glDeleteSyncAPPLE`);
  if (*cast(void**)&glDeleteSyncAPPLE_Z_Z is null) assert(0, `OpenGL function 'glDeleteSyncAPPLE' not found!`);
  glDeleteSyncAPPLE_Z_Z(sync);
}
alias glDeleteTextures = glDeleteTextures_Z_Z;
__gshared glDeleteTextures_Z_Z = function void (GLsizei n, const(GLuint)* textures) { glDeleteTextures_Z_Z_loader(n, textures); };
private void glDeleteTextures_Z_Z_loader (GLsizei n, const(GLuint)* textures) {
  *cast(void**)&glDeleteTextures_Z_Z = glbindGetProcAddress(`glDeleteTextures`);
  if (*cast(void**)&glDeleteTextures_Z_Z is null) assert(0, `OpenGL function 'glDeleteTextures' not found!`);
  glDeleteTextures_Z_Z(n, textures);
}
alias glDeleteTexturesEXT = glDeleteTexturesEXT_Z_Z;
__gshared glDeleteTexturesEXT_Z_Z = function void (GLsizei n, const(GLuint)* textures) { glDeleteTexturesEXT_Z_Z_loader(n, textures); };
private void glDeleteTexturesEXT_Z_Z_loader (GLsizei n, const(GLuint)* textures) {
  *cast(void**)&glDeleteTexturesEXT_Z_Z = glbindGetProcAddress(`glDeleteTexturesEXT`);
  if (*cast(void**)&glDeleteTexturesEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteTexturesEXT' not found!`);
  glDeleteTexturesEXT_Z_Z(n, textures);
}
alias glDeleteTransformFeedbacks = glDeleteTransformFeedbacks_Z_Z;
__gshared glDeleteTransformFeedbacks_Z_Z = function void (GLsizei n, const(GLuint)* ids) { glDeleteTransformFeedbacks_Z_Z_loader(n, ids); };
private void glDeleteTransformFeedbacks_Z_Z_loader (GLsizei n, const(GLuint)* ids) {
  *cast(void**)&glDeleteTransformFeedbacks_Z_Z = glbindGetProcAddress(`glDeleteTransformFeedbacks`);
  if (*cast(void**)&glDeleteTransformFeedbacks_Z_Z is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacks' not found!`);
  glDeleteTransformFeedbacks_Z_Z(n, ids);
}
alias glDeleteTransformFeedbacksNV = glDeleteTransformFeedbacksNV_Z_Z;
__gshared glDeleteTransformFeedbacksNV_Z_Z = function void (GLsizei n, const(GLuint)* ids) { glDeleteTransformFeedbacksNV_Z_Z_loader(n, ids); };
private void glDeleteTransformFeedbacksNV_Z_Z_loader (GLsizei n, const(GLuint)* ids) {
  *cast(void**)&glDeleteTransformFeedbacksNV_Z_Z = glbindGetProcAddress(`glDeleteTransformFeedbacksNV`);
  if (*cast(void**)&glDeleteTransformFeedbacksNV_Z_Z is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacksNV' not found!`);
  glDeleteTransformFeedbacksNV_Z_Z(n, ids);
}
alias glDeleteVertexArrays = glDeleteVertexArrays_Z_Z;
__gshared glDeleteVertexArrays_Z_Z = function void (GLsizei n, const(GLuint)* arrays) { glDeleteVertexArrays_Z_Z_loader(n, arrays); };
private void glDeleteVertexArrays_Z_Z_loader (GLsizei n, const(GLuint)* arrays) {
  *cast(void**)&glDeleteVertexArrays_Z_Z = glbindGetProcAddress(`glDeleteVertexArrays`);
  if (*cast(void**)&glDeleteVertexArrays_Z_Z is null) assert(0, `OpenGL function 'glDeleteVertexArrays' not found!`);
  glDeleteVertexArrays_Z_Z(n, arrays);
}
alias glDeleteVertexArraysAPPLE = glDeleteVertexArraysAPPLE_Z_Z;
__gshared glDeleteVertexArraysAPPLE_Z_Z = function void (GLsizei n, const(GLuint)* arrays) { glDeleteVertexArraysAPPLE_Z_Z_loader(n, arrays); };
private void glDeleteVertexArraysAPPLE_Z_Z_loader (GLsizei n, const(GLuint)* arrays) {
  *cast(void**)&glDeleteVertexArraysAPPLE_Z_Z = glbindGetProcAddress(`glDeleteVertexArraysAPPLE`);
  if (*cast(void**)&glDeleteVertexArraysAPPLE_Z_Z is null) assert(0, `OpenGL function 'glDeleteVertexArraysAPPLE' not found!`);
  glDeleteVertexArraysAPPLE_Z_Z(n, arrays);
}
alias glDeleteVertexArraysOES = glDeleteVertexArraysOES_Z_Z;
__gshared glDeleteVertexArraysOES_Z_Z = function void (GLsizei n, const(GLuint)* arrays) { glDeleteVertexArraysOES_Z_Z_loader(n, arrays); };
private void glDeleteVertexArraysOES_Z_Z_loader (GLsizei n, const(GLuint)* arrays) {
  *cast(void**)&glDeleteVertexArraysOES_Z_Z = glbindGetProcAddress(`glDeleteVertexArraysOES`);
  if (*cast(void**)&glDeleteVertexArraysOES_Z_Z is null) assert(0, `OpenGL function 'glDeleteVertexArraysOES' not found!`);
  glDeleteVertexArraysOES_Z_Z(n, arrays);
}
alias glDeleteVertexShaderEXT = glDeleteVertexShaderEXT_Z_Z;
__gshared glDeleteVertexShaderEXT_Z_Z = function void (GLuint id) { glDeleteVertexShaderEXT_Z_Z_loader(id); };
private void glDeleteVertexShaderEXT_Z_Z_loader (GLuint id) {
  *cast(void**)&glDeleteVertexShaderEXT_Z_Z = glbindGetProcAddress(`glDeleteVertexShaderEXT`);
  if (*cast(void**)&glDeleteVertexShaderEXT_Z_Z is null) assert(0, `OpenGL function 'glDeleteVertexShaderEXT' not found!`);
  glDeleteVertexShaderEXT_Z_Z(id);
}
alias glDepthBoundsEXT = glDepthBoundsEXT_Z_Z;
__gshared glDepthBoundsEXT_Z_Z = function void (GLclampd zmin, GLclampd zmax) { glDepthBoundsEXT_Z_Z_loader(zmin, zmax); };
private void glDepthBoundsEXT_Z_Z_loader (GLclampd zmin, GLclampd zmax) {
  *cast(void**)&glDepthBoundsEXT_Z_Z = glbindGetProcAddress(`glDepthBoundsEXT`);
  if (*cast(void**)&glDepthBoundsEXT_Z_Z is null) assert(0, `OpenGL function 'glDepthBoundsEXT' not found!`);
  glDepthBoundsEXT_Z_Z(zmin, zmax);
}
alias glDepthBoundsdNV = glDepthBoundsdNV_Z_Z;
__gshared glDepthBoundsdNV_Z_Z = function void (GLdouble zmin, GLdouble zmax) { glDepthBoundsdNV_Z_Z_loader(zmin, zmax); };
private void glDepthBoundsdNV_Z_Z_loader (GLdouble zmin, GLdouble zmax) {
  *cast(void**)&glDepthBoundsdNV_Z_Z = glbindGetProcAddress(`glDepthBoundsdNV`);
  if (*cast(void**)&glDepthBoundsdNV_Z_Z is null) assert(0, `OpenGL function 'glDepthBoundsdNV' not found!`);
  glDepthBoundsdNV_Z_Z(zmin, zmax);
}
alias glDepthFunc = glDepthFunc_Z_Z;
__gshared glDepthFunc_Z_Z = function void (GLenum func) { glDepthFunc_Z_Z_loader(func); };
private void glDepthFunc_Z_Z_loader (GLenum func) {
  *cast(void**)&glDepthFunc_Z_Z = glbindGetProcAddress(`glDepthFunc`);
  if (*cast(void**)&glDepthFunc_Z_Z is null) assert(0, `OpenGL function 'glDepthFunc' not found!`);
  glDepthFunc_Z_Z(func);
}
alias glDepthMask = glDepthMask_Z_Z;
__gshared glDepthMask_Z_Z = function void (GLboolean flag) { glDepthMask_Z_Z_loader(flag); };
private void glDepthMask_Z_Z_loader (GLboolean flag) {
  *cast(void**)&glDepthMask_Z_Z = glbindGetProcAddress(`glDepthMask`);
  if (*cast(void**)&glDepthMask_Z_Z is null) assert(0, `OpenGL function 'glDepthMask' not found!`);
  glDepthMask_Z_Z(flag);
}
alias glDepthRange = glDepthRange_Z_Z;
__gshared glDepthRange_Z_Z = function void (GLdouble near, GLdouble far) { glDepthRange_Z_Z_loader(near, far); };
private void glDepthRange_Z_Z_loader (GLdouble near, GLdouble far) {
  *cast(void**)&glDepthRange_Z_Z = glbindGetProcAddress(`glDepthRange`);
  if (*cast(void**)&glDepthRange_Z_Z is null) assert(0, `OpenGL function 'glDepthRange' not found!`);
  glDepthRange_Z_Z(near, far);
}
alias glDepthRangeArrayfvNV = glDepthRangeArrayfvNV_Z_Z;
__gshared glDepthRangeArrayfvNV_Z_Z = function void (GLuint first, GLsizei count, const(GLfloat)* v) { glDepthRangeArrayfvNV_Z_Z_loader(first, count, v); };
private void glDepthRangeArrayfvNV_Z_Z_loader (GLuint first, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glDepthRangeArrayfvNV_Z_Z = glbindGetProcAddress(`glDepthRangeArrayfvNV`);
  if (*cast(void**)&glDepthRangeArrayfvNV_Z_Z is null) assert(0, `OpenGL function 'glDepthRangeArrayfvNV' not found!`);
  glDepthRangeArrayfvNV_Z_Z(first, count, v);
}
alias glDepthRangeArrayfvOES = glDepthRangeArrayfvOES_Z_Z;
__gshared glDepthRangeArrayfvOES_Z_Z = function void (GLuint first, GLsizei count, const(GLfloat)* v) { glDepthRangeArrayfvOES_Z_Z_loader(first, count, v); };
private void glDepthRangeArrayfvOES_Z_Z_loader (GLuint first, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glDepthRangeArrayfvOES_Z_Z = glbindGetProcAddress(`glDepthRangeArrayfvOES`);
  if (*cast(void**)&glDepthRangeArrayfvOES_Z_Z is null) assert(0, `OpenGL function 'glDepthRangeArrayfvOES' not found!`);
  glDepthRangeArrayfvOES_Z_Z(first, count, v);
}
alias glDepthRangeArrayv = glDepthRangeArrayv_Z_Z;
__gshared glDepthRangeArrayv_Z_Z = function void (GLuint first, GLsizei count, const(GLdouble)* v) { glDepthRangeArrayv_Z_Z_loader(first, count, v); };
private void glDepthRangeArrayv_Z_Z_loader (GLuint first, GLsizei count, const(GLdouble)* v) {
  *cast(void**)&glDepthRangeArrayv_Z_Z = glbindGetProcAddress(`glDepthRangeArrayv`);
  if (*cast(void**)&glDepthRangeArrayv_Z_Z is null) assert(0, `OpenGL function 'glDepthRangeArrayv' not found!`);
  glDepthRangeArrayv_Z_Z(first, count, v);
}
alias glDepthRangeIndexed = glDepthRangeIndexed_Z_Z;
__gshared glDepthRangeIndexed_Z_Z = function void (GLuint index, GLdouble n, GLdouble f) { glDepthRangeIndexed_Z_Z_loader(index, n, f); };
private void glDepthRangeIndexed_Z_Z_loader (GLuint index, GLdouble n, GLdouble f) {
  *cast(void**)&glDepthRangeIndexed_Z_Z = glbindGetProcAddress(`glDepthRangeIndexed`);
  if (*cast(void**)&glDepthRangeIndexed_Z_Z is null) assert(0, `OpenGL function 'glDepthRangeIndexed' not found!`);
  glDepthRangeIndexed_Z_Z(index, n, f);
}
alias glDepthRangeIndexedfNV = glDepthRangeIndexedfNV_Z_Z;
__gshared glDepthRangeIndexedfNV_Z_Z = function void (GLuint index, GLfloat n, GLfloat f) { glDepthRangeIndexedfNV_Z_Z_loader(index, n, f); };
private void glDepthRangeIndexedfNV_Z_Z_loader (GLuint index, GLfloat n, GLfloat f) {
  *cast(void**)&glDepthRangeIndexedfNV_Z_Z = glbindGetProcAddress(`glDepthRangeIndexedfNV`);
  if (*cast(void**)&glDepthRangeIndexedfNV_Z_Z is null) assert(0, `OpenGL function 'glDepthRangeIndexedfNV' not found!`);
  glDepthRangeIndexedfNV_Z_Z(index, n, f);
}
alias glDepthRangeIndexedfOES = glDepthRangeIndexedfOES_Z_Z;
__gshared glDepthRangeIndexedfOES_Z_Z = function void (GLuint index, GLfloat n, GLfloat f) { glDepthRangeIndexedfOES_Z_Z_loader(index, n, f); };
private void glDepthRangeIndexedfOES_Z_Z_loader (GLuint index, GLfloat n, GLfloat f) {
  *cast(void**)&glDepthRangeIndexedfOES_Z_Z = glbindGetProcAddress(`glDepthRangeIndexedfOES`);
  if (*cast(void**)&glDepthRangeIndexedfOES_Z_Z is null) assert(0, `OpenGL function 'glDepthRangeIndexedfOES' not found!`);
  glDepthRangeIndexedfOES_Z_Z(index, n, f);
}
alias glDepthRangedNV = glDepthRangedNV_Z_Z;
__gshared glDepthRangedNV_Z_Z = function void (GLdouble zNear, GLdouble zFar) { glDepthRangedNV_Z_Z_loader(zNear, zFar); };
private void glDepthRangedNV_Z_Z_loader (GLdouble zNear, GLdouble zFar) {
  *cast(void**)&glDepthRangedNV_Z_Z = glbindGetProcAddress(`glDepthRangedNV`);
  if (*cast(void**)&glDepthRangedNV_Z_Z is null) assert(0, `OpenGL function 'glDepthRangedNV' not found!`);
  glDepthRangedNV_Z_Z(zNear, zFar);
}
alias glDepthRangef = glDepthRangef_Z_Z;
__gshared glDepthRangef_Z_Z = function void (GLfloat n, GLfloat f) { glDepthRangef_Z_Z_loader(n, f); };
private void glDepthRangef_Z_Z_loader (GLfloat n, GLfloat f) {
  *cast(void**)&glDepthRangef_Z_Z = glbindGetProcAddress(`glDepthRangef`);
  if (*cast(void**)&glDepthRangef_Z_Z is null) assert(0, `OpenGL function 'glDepthRangef' not found!`);
  glDepthRangef_Z_Z(n, f);
}
alias glDepthRangefOES = glDepthRangefOES_Z_Z;
__gshared glDepthRangefOES_Z_Z = function void (GLclampf n, GLclampf f) { glDepthRangefOES_Z_Z_loader(n, f); };
private void glDepthRangefOES_Z_Z_loader (GLclampf n, GLclampf f) {
  *cast(void**)&glDepthRangefOES_Z_Z = glbindGetProcAddress(`glDepthRangefOES`);
  if (*cast(void**)&glDepthRangefOES_Z_Z is null) assert(0, `OpenGL function 'glDepthRangefOES' not found!`);
  glDepthRangefOES_Z_Z(n, f);
}
alias glDepthRangex = glDepthRangex_Z_Z;
__gshared glDepthRangex_Z_Z = function void (GLfixed n, GLfixed f) { glDepthRangex_Z_Z_loader(n, f); };
private void glDepthRangex_Z_Z_loader (GLfixed n, GLfixed f) {
  *cast(void**)&glDepthRangex_Z_Z = glbindGetProcAddress(`glDepthRangex`);
  if (*cast(void**)&glDepthRangex_Z_Z is null) assert(0, `OpenGL function 'glDepthRangex' not found!`);
  glDepthRangex_Z_Z(n, f);
}
alias glDepthRangexOES = glDepthRangexOES_Z_Z;
__gshared glDepthRangexOES_Z_Z = function void (GLfixed n, GLfixed f) { glDepthRangexOES_Z_Z_loader(n, f); };
private void glDepthRangexOES_Z_Z_loader (GLfixed n, GLfixed f) {
  *cast(void**)&glDepthRangexOES_Z_Z = glbindGetProcAddress(`glDepthRangexOES`);
  if (*cast(void**)&glDepthRangexOES_Z_Z is null) assert(0, `OpenGL function 'glDepthRangexOES' not found!`);
  glDepthRangexOES_Z_Z(n, f);
}
alias glDetachObjectARB = glDetachObjectARB_Z_Z;
__gshared glDetachObjectARB_Z_Z = function void (GLhandleARB containerObj, GLhandleARB attachedObj) { glDetachObjectARB_Z_Z_loader(containerObj, attachedObj); };
private void glDetachObjectARB_Z_Z_loader (GLhandleARB containerObj, GLhandleARB attachedObj) {
  *cast(void**)&glDetachObjectARB_Z_Z = glbindGetProcAddress(`glDetachObjectARB`);
  if (*cast(void**)&glDetachObjectARB_Z_Z is null) assert(0, `OpenGL function 'glDetachObjectARB' not found!`);
  glDetachObjectARB_Z_Z(containerObj, attachedObj);
}
alias glDetachShader = glDetachShader_Z_Z;
__gshared glDetachShader_Z_Z = function void (GLuint program, GLuint shader) { glDetachShader_Z_Z_loader(program, shader); };
private void glDetachShader_Z_Z_loader (GLuint program, GLuint shader) {
  *cast(void**)&glDetachShader_Z_Z = glbindGetProcAddress(`glDetachShader`);
  if (*cast(void**)&glDetachShader_Z_Z is null) assert(0, `OpenGL function 'glDetachShader' not found!`);
  glDetachShader_Z_Z(program, shader);
}
alias glDetailTexFuncSGIS = glDetailTexFuncSGIS_Z_Z;
__gshared glDetailTexFuncSGIS_Z_Z = function void (GLenum target, GLsizei n, const(GLfloat)* points) { glDetailTexFuncSGIS_Z_Z_loader(target, n, points); };
private void glDetailTexFuncSGIS_Z_Z_loader (GLenum target, GLsizei n, const(GLfloat)* points) {
  *cast(void**)&glDetailTexFuncSGIS_Z_Z = glbindGetProcAddress(`glDetailTexFuncSGIS`);
  if (*cast(void**)&glDetailTexFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glDetailTexFuncSGIS' not found!`);
  glDetailTexFuncSGIS_Z_Z(target, n, points);
}
alias glDisable = glDisable_Z_Z;
__gshared glDisable_Z_Z = function void (GLenum cap) { glDisable_Z_Z_loader(cap); };
private void glDisable_Z_Z_loader (GLenum cap) {
  *cast(void**)&glDisable_Z_Z = glbindGetProcAddress(`glDisable`);
  if (*cast(void**)&glDisable_Z_Z is null) assert(0, `OpenGL function 'glDisable' not found!`);
  glDisable_Z_Z(cap);
}
alias glDisableClientState = glDisableClientState_Z_Z;
__gshared glDisableClientState_Z_Z = function void (GLenum array) { glDisableClientState_Z_Z_loader(array); };
private void glDisableClientState_Z_Z_loader (GLenum array) {
  *cast(void**)&glDisableClientState_Z_Z = glbindGetProcAddress(`glDisableClientState`);
  if (*cast(void**)&glDisableClientState_Z_Z is null) assert(0, `OpenGL function 'glDisableClientState' not found!`);
  glDisableClientState_Z_Z(array);
}
alias glDisableClientStateIndexedEXT = glDisableClientStateIndexedEXT_Z_Z;
__gshared glDisableClientStateIndexedEXT_Z_Z = function void (GLenum array, GLuint index) { glDisableClientStateIndexedEXT_Z_Z_loader(array, index); };
private void glDisableClientStateIndexedEXT_Z_Z_loader (GLenum array, GLuint index) {
  *cast(void**)&glDisableClientStateIndexedEXT_Z_Z = glbindGetProcAddress(`glDisableClientStateIndexedEXT`);
  if (*cast(void**)&glDisableClientStateIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glDisableClientStateIndexedEXT' not found!`);
  glDisableClientStateIndexedEXT_Z_Z(array, index);
}
alias glDisableClientStateiEXT = glDisableClientStateiEXT_Z_Z;
__gshared glDisableClientStateiEXT_Z_Z = function void (GLenum array, GLuint index) { glDisableClientStateiEXT_Z_Z_loader(array, index); };
private void glDisableClientStateiEXT_Z_Z_loader (GLenum array, GLuint index) {
  *cast(void**)&glDisableClientStateiEXT_Z_Z = glbindGetProcAddress(`glDisableClientStateiEXT`);
  if (*cast(void**)&glDisableClientStateiEXT_Z_Z is null) assert(0, `OpenGL function 'glDisableClientStateiEXT' not found!`);
  glDisableClientStateiEXT_Z_Z(array, index);
}
alias glDisableDriverControlQCOM = glDisableDriverControlQCOM_Z_Z;
__gshared glDisableDriverControlQCOM_Z_Z = function void (GLuint driverControl) { glDisableDriverControlQCOM_Z_Z_loader(driverControl); };
private void glDisableDriverControlQCOM_Z_Z_loader (GLuint driverControl) {
  *cast(void**)&glDisableDriverControlQCOM_Z_Z = glbindGetProcAddress(`glDisableDriverControlQCOM`);
  if (*cast(void**)&glDisableDriverControlQCOM_Z_Z is null) assert(0, `OpenGL function 'glDisableDriverControlQCOM' not found!`);
  glDisableDriverControlQCOM_Z_Z(driverControl);
}
alias glDisableIndexedEXT = glDisableIndexedEXT_Z_Z;
__gshared glDisableIndexedEXT_Z_Z = function void (GLenum target, GLuint index) { glDisableIndexedEXT_Z_Z_loader(target, index); };
private void glDisableIndexedEXT_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glDisableIndexedEXT_Z_Z = glbindGetProcAddress(`glDisableIndexedEXT`);
  if (*cast(void**)&glDisableIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glDisableIndexedEXT' not found!`);
  glDisableIndexedEXT_Z_Z(target, index);
}
alias glDisableVariantClientStateEXT = glDisableVariantClientStateEXT_Z_Z;
__gshared glDisableVariantClientStateEXT_Z_Z = function void (GLuint id) { glDisableVariantClientStateEXT_Z_Z_loader(id); };
private void glDisableVariantClientStateEXT_Z_Z_loader (GLuint id) {
  *cast(void**)&glDisableVariantClientStateEXT_Z_Z = glbindGetProcAddress(`glDisableVariantClientStateEXT`);
  if (*cast(void**)&glDisableVariantClientStateEXT_Z_Z is null) assert(0, `OpenGL function 'glDisableVariantClientStateEXT' not found!`);
  glDisableVariantClientStateEXT_Z_Z(id);
}
alias glDisableVertexArrayAttrib = glDisableVertexArrayAttrib_Z_Z;
__gshared glDisableVertexArrayAttrib_Z_Z = function void (GLuint vaobj, GLuint index) { glDisableVertexArrayAttrib_Z_Z_loader(vaobj, index); };
private void glDisableVertexArrayAttrib_Z_Z_loader (GLuint vaobj, GLuint index) {
  *cast(void**)&glDisableVertexArrayAttrib_Z_Z = glbindGetProcAddress(`glDisableVertexArrayAttrib`);
  if (*cast(void**)&glDisableVertexArrayAttrib_Z_Z is null) assert(0, `OpenGL function 'glDisableVertexArrayAttrib' not found!`);
  glDisableVertexArrayAttrib_Z_Z(vaobj, index);
}
alias glDisableVertexArrayAttribEXT = glDisableVertexArrayAttribEXT_Z_Z;
__gshared glDisableVertexArrayAttribEXT_Z_Z = function void (GLuint vaobj, GLuint index) { glDisableVertexArrayAttribEXT_Z_Z_loader(vaobj, index); };
private void glDisableVertexArrayAttribEXT_Z_Z_loader (GLuint vaobj, GLuint index) {
  *cast(void**)&glDisableVertexArrayAttribEXT_Z_Z = glbindGetProcAddress(`glDisableVertexArrayAttribEXT`);
  if (*cast(void**)&glDisableVertexArrayAttribEXT_Z_Z is null) assert(0, `OpenGL function 'glDisableVertexArrayAttribEXT' not found!`);
  glDisableVertexArrayAttribEXT_Z_Z(vaobj, index);
}
alias glDisableVertexArrayEXT = glDisableVertexArrayEXT_Z_Z;
__gshared glDisableVertexArrayEXT_Z_Z = function void (GLuint vaobj, GLenum array) { glDisableVertexArrayEXT_Z_Z_loader(vaobj, array); };
private void glDisableVertexArrayEXT_Z_Z_loader (GLuint vaobj, GLenum array) {
  *cast(void**)&glDisableVertexArrayEXT_Z_Z = glbindGetProcAddress(`glDisableVertexArrayEXT`);
  if (*cast(void**)&glDisableVertexArrayEXT_Z_Z is null) assert(0, `OpenGL function 'glDisableVertexArrayEXT' not found!`);
  glDisableVertexArrayEXT_Z_Z(vaobj, array);
}
alias glDisableVertexAttribAPPLE = glDisableVertexAttribAPPLE_Z_Z;
__gshared glDisableVertexAttribAPPLE_Z_Z = function void (GLuint index, GLenum pname) { glDisableVertexAttribAPPLE_Z_Z_loader(index, pname); };
private void glDisableVertexAttribAPPLE_Z_Z_loader (GLuint index, GLenum pname) {
  *cast(void**)&glDisableVertexAttribAPPLE_Z_Z = glbindGetProcAddress(`glDisableVertexAttribAPPLE`);
  if (*cast(void**)&glDisableVertexAttribAPPLE_Z_Z is null) assert(0, `OpenGL function 'glDisableVertexAttribAPPLE' not found!`);
  glDisableVertexAttribAPPLE_Z_Z(index, pname);
}
alias glDisableVertexAttribArray = glDisableVertexAttribArray_Z_Z;
__gshared glDisableVertexAttribArray_Z_Z = function void (GLuint index) { glDisableVertexAttribArray_Z_Z_loader(index); };
private void glDisableVertexAttribArray_Z_Z_loader (GLuint index) {
  *cast(void**)&glDisableVertexAttribArray_Z_Z = glbindGetProcAddress(`glDisableVertexAttribArray`);
  if (*cast(void**)&glDisableVertexAttribArray_Z_Z is null) assert(0, `OpenGL function 'glDisableVertexAttribArray' not found!`);
  glDisableVertexAttribArray_Z_Z(index);
}
alias glDisableVertexAttribArrayARB = glDisableVertexAttribArrayARB_Z_Z;
__gshared glDisableVertexAttribArrayARB_Z_Z = function void (GLuint index) { glDisableVertexAttribArrayARB_Z_Z_loader(index); };
private void glDisableVertexAttribArrayARB_Z_Z_loader (GLuint index) {
  *cast(void**)&glDisableVertexAttribArrayARB_Z_Z = glbindGetProcAddress(`glDisableVertexAttribArrayARB`);
  if (*cast(void**)&glDisableVertexAttribArrayARB_Z_Z is null) assert(0, `OpenGL function 'glDisableVertexAttribArrayARB' not found!`);
  glDisableVertexAttribArrayARB_Z_Z(index);
}
alias glDisablei = glDisablei_Z_Z;
__gshared glDisablei_Z_Z = function void (GLenum target, GLuint index) { glDisablei_Z_Z_loader(target, index); };
private void glDisablei_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glDisablei_Z_Z = glbindGetProcAddress(`glDisablei`);
  if (*cast(void**)&glDisablei_Z_Z is null) assert(0, `OpenGL function 'glDisablei' not found!`);
  glDisablei_Z_Z(target, index);
}
alias glDisableiEXT = glDisableiEXT_Z_Z;
__gshared glDisableiEXT_Z_Z = function void (GLenum target, GLuint index) { glDisableiEXT_Z_Z_loader(target, index); };
private void glDisableiEXT_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glDisableiEXT_Z_Z = glbindGetProcAddress(`glDisableiEXT`);
  if (*cast(void**)&glDisableiEXT_Z_Z is null) assert(0, `OpenGL function 'glDisableiEXT' not found!`);
  glDisableiEXT_Z_Z(target, index);
}
alias glDisableiNV = glDisableiNV_Z_Z;
__gshared glDisableiNV_Z_Z = function void (GLenum target, GLuint index) { glDisableiNV_Z_Z_loader(target, index); };
private void glDisableiNV_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glDisableiNV_Z_Z = glbindGetProcAddress(`glDisableiNV`);
  if (*cast(void**)&glDisableiNV_Z_Z is null) assert(0, `OpenGL function 'glDisableiNV' not found!`);
  glDisableiNV_Z_Z(target, index);
}
alias glDisableiOES = glDisableiOES_Z_Z;
__gshared glDisableiOES_Z_Z = function void (GLenum target, GLuint index) { glDisableiOES_Z_Z_loader(target, index); };
private void glDisableiOES_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glDisableiOES_Z_Z = glbindGetProcAddress(`glDisableiOES`);
  if (*cast(void**)&glDisableiOES_Z_Z is null) assert(0, `OpenGL function 'glDisableiOES' not found!`);
  glDisableiOES_Z_Z(target, index);
}
alias glDiscardFramebufferEXT = glDiscardFramebufferEXT_Z_Z;
__gshared glDiscardFramebufferEXT_Z_Z = function void (GLenum target, GLsizei numAttachments, const(GLenum)* attachments) { glDiscardFramebufferEXT_Z_Z_loader(target, numAttachments, attachments); };
private void glDiscardFramebufferEXT_Z_Z_loader (GLenum target, GLsizei numAttachments, const(GLenum)* attachments) {
  *cast(void**)&glDiscardFramebufferEXT_Z_Z = glbindGetProcAddress(`glDiscardFramebufferEXT`);
  if (*cast(void**)&glDiscardFramebufferEXT_Z_Z is null) assert(0, `OpenGL function 'glDiscardFramebufferEXT' not found!`);
  glDiscardFramebufferEXT_Z_Z(target, numAttachments, attachments);
}
alias glDispatchCompute = glDispatchCompute_Z_Z;
__gshared glDispatchCompute_Z_Z = function void (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { glDispatchCompute_Z_Z_loader(num_groups_x, num_groups_y, num_groups_z); };
private void glDispatchCompute_Z_Z_loader (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  *cast(void**)&glDispatchCompute_Z_Z = glbindGetProcAddress(`glDispatchCompute`);
  if (*cast(void**)&glDispatchCompute_Z_Z is null) assert(0, `OpenGL function 'glDispatchCompute' not found!`);
  glDispatchCompute_Z_Z(num_groups_x, num_groups_y, num_groups_z);
}
alias glDispatchComputeGroupSizeARB = glDispatchComputeGroupSizeARB_Z_Z;
__gshared glDispatchComputeGroupSizeARB_Z_Z = function void (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { glDispatchComputeGroupSizeARB_Z_Z_loader(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); };
private void glDispatchComputeGroupSizeARB_Z_Z_loader (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {
  *cast(void**)&glDispatchComputeGroupSizeARB_Z_Z = glbindGetProcAddress(`glDispatchComputeGroupSizeARB`);
  if (*cast(void**)&glDispatchComputeGroupSizeARB_Z_Z is null) assert(0, `OpenGL function 'glDispatchComputeGroupSizeARB' not found!`);
  glDispatchComputeGroupSizeARB_Z_Z(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}
alias glDispatchComputeIndirect = glDispatchComputeIndirect_Z_Z;
__gshared glDispatchComputeIndirect_Z_Z = function void (GLintptr indirect) { glDispatchComputeIndirect_Z_Z_loader(indirect); };
private void glDispatchComputeIndirect_Z_Z_loader (GLintptr indirect) {
  *cast(void**)&glDispatchComputeIndirect_Z_Z = glbindGetProcAddress(`glDispatchComputeIndirect`);
  if (*cast(void**)&glDispatchComputeIndirect_Z_Z is null) assert(0, `OpenGL function 'glDispatchComputeIndirect' not found!`);
  glDispatchComputeIndirect_Z_Z(indirect);
}
alias glDrawArrays = glDrawArrays_Z_Z;
__gshared glDrawArrays_Z_Z = function void (GLenum mode, GLint first, GLsizei count) { glDrawArrays_Z_Z_loader(mode, first, count); };
private void glDrawArrays_Z_Z_loader (GLenum mode, GLint first, GLsizei count) {
  *cast(void**)&glDrawArrays_Z_Z = glbindGetProcAddress(`glDrawArrays`);
  if (*cast(void**)&glDrawArrays_Z_Z is null) assert(0, `OpenGL function 'glDrawArrays' not found!`);
  glDrawArrays_Z_Z(mode, first, count);
}
alias glDrawArraysEXT = glDrawArraysEXT_Z_Z;
__gshared glDrawArraysEXT_Z_Z = function void (GLenum mode, GLint first, GLsizei count) { glDrawArraysEXT_Z_Z_loader(mode, first, count); };
private void glDrawArraysEXT_Z_Z_loader (GLenum mode, GLint first, GLsizei count) {
  *cast(void**)&glDrawArraysEXT_Z_Z = glbindGetProcAddress(`glDrawArraysEXT`);
  if (*cast(void**)&glDrawArraysEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysEXT' not found!`);
  glDrawArraysEXT_Z_Z(mode, first, count);
}
alias glDrawArraysIndirect = glDrawArraysIndirect_Z_Z;
__gshared glDrawArraysIndirect_Z_Z = function void (GLenum mode, const(void)* indirect) { glDrawArraysIndirect_Z_Z_loader(mode, indirect); };
private void glDrawArraysIndirect_Z_Z_loader (GLenum mode, const(void)* indirect) {
  *cast(void**)&glDrawArraysIndirect_Z_Z = glbindGetProcAddress(`glDrawArraysIndirect`);
  if (*cast(void**)&glDrawArraysIndirect_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysIndirect' not found!`);
  glDrawArraysIndirect_Z_Z(mode, indirect);
}
alias glDrawArraysInstanced = glDrawArraysInstanced_Z_Z;
__gshared glDrawArraysInstanced_Z_Z = function void (GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { glDrawArraysInstanced_Z_Z_loader(mode, first, count, instancecount); };
private void glDrawArraysInstanced_Z_Z_loader (GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
  *cast(void**)&glDrawArraysInstanced_Z_Z = glbindGetProcAddress(`glDrawArraysInstanced`);
  if (*cast(void**)&glDrawArraysInstanced_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysInstanced' not found!`);
  glDrawArraysInstanced_Z_Z(mode, first, count, instancecount);
}
alias glDrawArraysInstancedANGLE = glDrawArraysInstancedANGLE_Z_Z;
__gshared glDrawArraysInstancedANGLE_Z_Z = function void (GLenum mode, GLint first, GLsizei count, GLsizei primcount) { glDrawArraysInstancedANGLE_Z_Z_loader(mode, first, count, primcount); };
private void glDrawArraysInstancedANGLE_Z_Z_loader (GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  *cast(void**)&glDrawArraysInstancedANGLE_Z_Z = glbindGetProcAddress(`glDrawArraysInstancedANGLE`);
  if (*cast(void**)&glDrawArraysInstancedANGLE_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedANGLE' not found!`);
  glDrawArraysInstancedANGLE_Z_Z(mode, first, count, primcount);
}
alias glDrawArraysInstancedARB = glDrawArraysInstancedARB_Z_Z;
__gshared glDrawArraysInstancedARB_Z_Z = function void (GLenum mode, GLint first, GLsizei count, GLsizei primcount) { glDrawArraysInstancedARB_Z_Z_loader(mode, first, count, primcount); };
private void glDrawArraysInstancedARB_Z_Z_loader (GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  *cast(void**)&glDrawArraysInstancedARB_Z_Z = glbindGetProcAddress(`glDrawArraysInstancedARB`);
  if (*cast(void**)&glDrawArraysInstancedARB_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedARB' not found!`);
  glDrawArraysInstancedARB_Z_Z(mode, first, count, primcount);
}
alias glDrawArraysInstancedBaseInstance = glDrawArraysInstancedBaseInstance_Z_Z;
__gshared glDrawArraysInstancedBaseInstance_Z_Z = function void (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { glDrawArraysInstancedBaseInstance_Z_Z_loader(mode, first, count, instancecount, baseinstance); };
private void glDrawArraysInstancedBaseInstance_Z_Z_loader (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  *cast(void**)&glDrawArraysInstancedBaseInstance_Z_Z = glbindGetProcAddress(`glDrawArraysInstancedBaseInstance`);
  if (*cast(void**)&glDrawArraysInstancedBaseInstance_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedBaseInstance' not found!`);
  glDrawArraysInstancedBaseInstance_Z_Z(mode, first, count, instancecount, baseinstance);
}
alias glDrawArraysInstancedBaseInstanceEXT = glDrawArraysInstancedBaseInstanceEXT_Z_Z;
__gshared glDrawArraysInstancedBaseInstanceEXT_Z_Z = function void (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { glDrawArraysInstancedBaseInstanceEXT_Z_Z_loader(mode, first, count, instancecount, baseinstance); };
private void glDrawArraysInstancedBaseInstanceEXT_Z_Z_loader (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  *cast(void**)&glDrawArraysInstancedBaseInstanceEXT_Z_Z = glbindGetProcAddress(`glDrawArraysInstancedBaseInstanceEXT`);
  if (*cast(void**)&glDrawArraysInstancedBaseInstanceEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedBaseInstanceEXT' not found!`);
  glDrawArraysInstancedBaseInstanceEXT_Z_Z(mode, first, count, instancecount, baseinstance);
}
alias glDrawArraysInstancedEXT = glDrawArraysInstancedEXT_Z_Z;
__gshared glDrawArraysInstancedEXT_Z_Z = function void (GLenum mode, GLint start, GLsizei count, GLsizei primcount) { glDrawArraysInstancedEXT_Z_Z_loader(mode, start, count, primcount); };
private void glDrawArraysInstancedEXT_Z_Z_loader (GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  *cast(void**)&glDrawArraysInstancedEXT_Z_Z = glbindGetProcAddress(`glDrawArraysInstancedEXT`);
  if (*cast(void**)&glDrawArraysInstancedEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedEXT' not found!`);
  glDrawArraysInstancedEXT_Z_Z(mode, start, count, primcount);
}
alias glDrawArraysInstancedNV = glDrawArraysInstancedNV_Z_Z;
__gshared glDrawArraysInstancedNV_Z_Z = function void (GLenum mode, GLint first, GLsizei count, GLsizei primcount) { glDrawArraysInstancedNV_Z_Z_loader(mode, first, count, primcount); };
private void glDrawArraysInstancedNV_Z_Z_loader (GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  *cast(void**)&glDrawArraysInstancedNV_Z_Z = glbindGetProcAddress(`glDrawArraysInstancedNV`);
  if (*cast(void**)&glDrawArraysInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glDrawArraysInstancedNV' not found!`);
  glDrawArraysInstancedNV_Z_Z(mode, first, count, primcount);
}
alias glDrawBuffer = glDrawBuffer_Z_Z;
__gshared glDrawBuffer_Z_Z = function void (GLenum buf) { glDrawBuffer_Z_Z_loader(buf); };
private void glDrawBuffer_Z_Z_loader (GLenum buf) {
  *cast(void**)&glDrawBuffer_Z_Z = glbindGetProcAddress(`glDrawBuffer`);
  if (*cast(void**)&glDrawBuffer_Z_Z is null) assert(0, `OpenGL function 'glDrawBuffer' not found!`);
  glDrawBuffer_Z_Z(buf);
}
alias glDrawBuffers = glDrawBuffers_Z_Z;
__gshared glDrawBuffers_Z_Z = function void (GLsizei n, const(GLenum)* bufs) { glDrawBuffers_Z_Z_loader(n, bufs); };
private void glDrawBuffers_Z_Z_loader (GLsizei n, const(GLenum)* bufs) {
  *cast(void**)&glDrawBuffers_Z_Z = glbindGetProcAddress(`glDrawBuffers`);
  if (*cast(void**)&glDrawBuffers_Z_Z is null) assert(0, `OpenGL function 'glDrawBuffers' not found!`);
  glDrawBuffers_Z_Z(n, bufs);
}
alias glDrawBuffersARB = glDrawBuffersARB_Z_Z;
__gshared glDrawBuffersARB_Z_Z = function void (GLsizei n, const(GLenum)* bufs) { glDrawBuffersARB_Z_Z_loader(n, bufs); };
private void glDrawBuffersARB_Z_Z_loader (GLsizei n, const(GLenum)* bufs) {
  *cast(void**)&glDrawBuffersARB_Z_Z = glbindGetProcAddress(`glDrawBuffersARB`);
  if (*cast(void**)&glDrawBuffersARB_Z_Z is null) assert(0, `OpenGL function 'glDrawBuffersARB' not found!`);
  glDrawBuffersARB_Z_Z(n, bufs);
}
alias glDrawBuffersATI = glDrawBuffersATI_Z_Z;
__gshared glDrawBuffersATI_Z_Z = function void (GLsizei n, const(GLenum)* bufs) { glDrawBuffersATI_Z_Z_loader(n, bufs); };
private void glDrawBuffersATI_Z_Z_loader (GLsizei n, const(GLenum)* bufs) {
  *cast(void**)&glDrawBuffersATI_Z_Z = glbindGetProcAddress(`glDrawBuffersATI`);
  if (*cast(void**)&glDrawBuffersATI_Z_Z is null) assert(0, `OpenGL function 'glDrawBuffersATI' not found!`);
  glDrawBuffersATI_Z_Z(n, bufs);
}
alias glDrawBuffersEXT = glDrawBuffersEXT_Z_Z;
__gshared glDrawBuffersEXT_Z_Z = function void (GLsizei n, const(GLenum)* bufs) { glDrawBuffersEXT_Z_Z_loader(n, bufs); };
private void glDrawBuffersEXT_Z_Z_loader (GLsizei n, const(GLenum)* bufs) {
  *cast(void**)&glDrawBuffersEXT_Z_Z = glbindGetProcAddress(`glDrawBuffersEXT`);
  if (*cast(void**)&glDrawBuffersEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawBuffersEXT' not found!`);
  glDrawBuffersEXT_Z_Z(n, bufs);
}
alias glDrawBuffersIndexedEXT = glDrawBuffersIndexedEXT_Z_Z;
__gshared glDrawBuffersIndexedEXT_Z_Z = function void (GLint n, const(GLenum)* location, const(GLint)* indices) { glDrawBuffersIndexedEXT_Z_Z_loader(n, location, indices); };
private void glDrawBuffersIndexedEXT_Z_Z_loader (GLint n, const(GLenum)* location, const(GLint)* indices) {
  *cast(void**)&glDrawBuffersIndexedEXT_Z_Z = glbindGetProcAddress(`glDrawBuffersIndexedEXT`);
  if (*cast(void**)&glDrawBuffersIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawBuffersIndexedEXT' not found!`);
  glDrawBuffersIndexedEXT_Z_Z(n, location, indices);
}
alias glDrawBuffersNV = glDrawBuffersNV_Z_Z;
__gshared glDrawBuffersNV_Z_Z = function void (GLsizei n, const(GLenum)* bufs) { glDrawBuffersNV_Z_Z_loader(n, bufs); };
private void glDrawBuffersNV_Z_Z_loader (GLsizei n, const(GLenum)* bufs) {
  *cast(void**)&glDrawBuffersNV_Z_Z = glbindGetProcAddress(`glDrawBuffersNV`);
  if (*cast(void**)&glDrawBuffersNV_Z_Z is null) assert(0, `OpenGL function 'glDrawBuffersNV' not found!`);
  glDrawBuffersNV_Z_Z(n, bufs);
}
alias glDrawCommandsAddressNV = glDrawCommandsAddressNV_Z_Z;
__gshared glDrawCommandsAddressNV_Z_Z = function void (GLenum primitiveMode, const(GLuint64)* indirects, const(GLsizei)* sizes, GLuint count) { glDrawCommandsAddressNV_Z_Z_loader(primitiveMode, indirects, sizes, count); };
private void glDrawCommandsAddressNV_Z_Z_loader (GLenum primitiveMode, const(GLuint64)* indirects, const(GLsizei)* sizes, GLuint count) {
  *cast(void**)&glDrawCommandsAddressNV_Z_Z = glbindGetProcAddress(`glDrawCommandsAddressNV`);
  if (*cast(void**)&glDrawCommandsAddressNV_Z_Z is null) assert(0, `OpenGL function 'glDrawCommandsAddressNV' not found!`);
  glDrawCommandsAddressNV_Z_Z(primitiveMode, indirects, sizes, count);
}
alias glDrawCommandsNV = glDrawCommandsNV_Z_Z;
__gshared glDrawCommandsNV_Z_Z = function void (GLenum primitiveMode, GLuint buffer, const(GLintptr)* indirects, const(GLsizei)* sizes, GLuint count) { glDrawCommandsNV_Z_Z_loader(primitiveMode, buffer, indirects, sizes, count); };
private void glDrawCommandsNV_Z_Z_loader (GLenum primitiveMode, GLuint buffer, const(GLintptr)* indirects, const(GLsizei)* sizes, GLuint count) {
  *cast(void**)&glDrawCommandsNV_Z_Z = glbindGetProcAddress(`glDrawCommandsNV`);
  if (*cast(void**)&glDrawCommandsNV_Z_Z is null) assert(0, `OpenGL function 'glDrawCommandsNV' not found!`);
  glDrawCommandsNV_Z_Z(primitiveMode, buffer, indirects, sizes, count);
}
alias glDrawCommandsStatesAddressNV = glDrawCommandsStatesAddressNV_Z_Z;
__gshared glDrawCommandsStatesAddressNV_Z_Z = function void (const(GLuint64)* indirects, const(GLsizei)* sizes, const(GLuint)* states, const(GLuint)* fbos, GLuint count) { glDrawCommandsStatesAddressNV_Z_Z_loader(indirects, sizes, states, fbos, count); };
private void glDrawCommandsStatesAddressNV_Z_Z_loader (const(GLuint64)* indirects, const(GLsizei)* sizes, const(GLuint)* states, const(GLuint)* fbos, GLuint count) {
  *cast(void**)&glDrawCommandsStatesAddressNV_Z_Z = glbindGetProcAddress(`glDrawCommandsStatesAddressNV`);
  if (*cast(void**)&glDrawCommandsStatesAddressNV_Z_Z is null) assert(0, `OpenGL function 'glDrawCommandsStatesAddressNV' not found!`);
  glDrawCommandsStatesAddressNV_Z_Z(indirects, sizes, states, fbos, count);
}
alias glDrawCommandsStatesNV = glDrawCommandsStatesNV_Z_Z;
__gshared glDrawCommandsStatesNV_Z_Z = function void (GLuint buffer, const(GLintptr)* indirects, const(GLsizei)* sizes, const(GLuint)* states, const(GLuint)* fbos, GLuint count) { glDrawCommandsStatesNV_Z_Z_loader(buffer, indirects, sizes, states, fbos, count); };
private void glDrawCommandsStatesNV_Z_Z_loader (GLuint buffer, const(GLintptr)* indirects, const(GLsizei)* sizes, const(GLuint)* states, const(GLuint)* fbos, GLuint count) {
  *cast(void**)&glDrawCommandsStatesNV_Z_Z = glbindGetProcAddress(`glDrawCommandsStatesNV`);
  if (*cast(void**)&glDrawCommandsStatesNV_Z_Z is null) assert(0, `OpenGL function 'glDrawCommandsStatesNV' not found!`);
  glDrawCommandsStatesNV_Z_Z(buffer, indirects, sizes, states, fbos, count);
}
alias glDrawElementArrayAPPLE = glDrawElementArrayAPPLE_Z_Z;
__gshared glDrawElementArrayAPPLE_Z_Z = function void (GLenum mode, GLint first, GLsizei count) { glDrawElementArrayAPPLE_Z_Z_loader(mode, first, count); };
private void glDrawElementArrayAPPLE_Z_Z_loader (GLenum mode, GLint first, GLsizei count) {
  *cast(void**)&glDrawElementArrayAPPLE_Z_Z = glbindGetProcAddress(`glDrawElementArrayAPPLE`);
  if (*cast(void**)&glDrawElementArrayAPPLE_Z_Z is null) assert(0, `OpenGL function 'glDrawElementArrayAPPLE' not found!`);
  glDrawElementArrayAPPLE_Z_Z(mode, first, count);
}
alias glDrawElementArrayATI = glDrawElementArrayATI_Z_Z;
__gshared glDrawElementArrayATI_Z_Z = function void (GLenum mode, GLsizei count) { glDrawElementArrayATI_Z_Z_loader(mode, count); };
private void glDrawElementArrayATI_Z_Z_loader (GLenum mode, GLsizei count) {
  *cast(void**)&glDrawElementArrayATI_Z_Z = glbindGetProcAddress(`glDrawElementArrayATI`);
  if (*cast(void**)&glDrawElementArrayATI_Z_Z is null) assert(0, `OpenGL function 'glDrawElementArrayATI' not found!`);
  glDrawElementArrayATI_Z_Z(mode, count);
}
alias glDrawElements = glDrawElements_Z_Z;
__gshared glDrawElements_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices) { glDrawElements_Z_Z_loader(mode, count, type, indices); };
private void glDrawElements_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices) {
  *cast(void**)&glDrawElements_Z_Z = glbindGetProcAddress(`glDrawElements`);
  if (*cast(void**)&glDrawElements_Z_Z is null) assert(0, `OpenGL function 'glDrawElements' not found!`);
  glDrawElements_Z_Z(mode, count, type, indices);
}
alias glDrawElementsBaseVertex = glDrawElementsBaseVertex_Z_Z;
__gshared glDrawElementsBaseVertex_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) { glDrawElementsBaseVertex_Z_Z_loader(mode, count, type, indices, basevertex); };
private void glDrawElementsBaseVertex_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) {
  *cast(void**)&glDrawElementsBaseVertex_Z_Z = glbindGetProcAddress(`glDrawElementsBaseVertex`);
  if (*cast(void**)&glDrawElementsBaseVertex_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsBaseVertex' not found!`);
  glDrawElementsBaseVertex_Z_Z(mode, count, type, indices, basevertex);
}
alias glDrawElementsBaseVertexEXT = glDrawElementsBaseVertexEXT_Z_Z;
__gshared glDrawElementsBaseVertexEXT_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) { glDrawElementsBaseVertexEXT_Z_Z_loader(mode, count, type, indices, basevertex); };
private void glDrawElementsBaseVertexEXT_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) {
  *cast(void**)&glDrawElementsBaseVertexEXT_Z_Z = glbindGetProcAddress(`glDrawElementsBaseVertexEXT`);
  if (*cast(void**)&glDrawElementsBaseVertexEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsBaseVertexEXT' not found!`);
  glDrawElementsBaseVertexEXT_Z_Z(mode, count, type, indices, basevertex);
}
alias glDrawElementsBaseVertexOES = glDrawElementsBaseVertexOES_Z_Z;
__gshared glDrawElementsBaseVertexOES_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) { glDrawElementsBaseVertexOES_Z_Z_loader(mode, count, type, indices, basevertex); };
private void glDrawElementsBaseVertexOES_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) {
  *cast(void**)&glDrawElementsBaseVertexOES_Z_Z = glbindGetProcAddress(`glDrawElementsBaseVertexOES`);
  if (*cast(void**)&glDrawElementsBaseVertexOES_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsBaseVertexOES' not found!`);
  glDrawElementsBaseVertexOES_Z_Z(mode, count, type, indices, basevertex);
}
alias glDrawElementsIndirect = glDrawElementsIndirect_Z_Z;
__gshared glDrawElementsIndirect_Z_Z = function void (GLenum mode, GLenum type, const(void)* indirect) { glDrawElementsIndirect_Z_Z_loader(mode, type, indirect); };
private void glDrawElementsIndirect_Z_Z_loader (GLenum mode, GLenum type, const(void)* indirect) {
  *cast(void**)&glDrawElementsIndirect_Z_Z = glbindGetProcAddress(`glDrawElementsIndirect`);
  if (*cast(void**)&glDrawElementsIndirect_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsIndirect' not found!`);
  glDrawElementsIndirect_Z_Z(mode, type, indirect);
}
alias glDrawElementsInstanced = glDrawElementsInstanced_Z_Z;
__gshared glDrawElementsInstanced_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount) { glDrawElementsInstanced_Z_Z_loader(mode, count, type, indices, instancecount); };
private void glDrawElementsInstanced_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount) {
  *cast(void**)&glDrawElementsInstanced_Z_Z = glbindGetProcAddress(`glDrawElementsInstanced`);
  if (*cast(void**)&glDrawElementsInstanced_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstanced' not found!`);
  glDrawElementsInstanced_Z_Z(mode, count, type, indices, instancecount);
}
alias glDrawElementsInstancedANGLE = glDrawElementsInstancedANGLE_Z_Z;
__gshared glDrawElementsInstancedANGLE_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) { glDrawElementsInstancedANGLE_Z_Z_loader(mode, count, type, indices, primcount); };
private void glDrawElementsInstancedANGLE_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) {
  *cast(void**)&glDrawElementsInstancedANGLE_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedANGLE`);
  if (*cast(void**)&glDrawElementsInstancedANGLE_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedANGLE' not found!`);
  glDrawElementsInstancedANGLE_Z_Z(mode, count, type, indices, primcount);
}
alias glDrawElementsInstancedARB = glDrawElementsInstancedARB_Z_Z;
__gshared glDrawElementsInstancedARB_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) { glDrawElementsInstancedARB_Z_Z_loader(mode, count, type, indices, primcount); };
private void glDrawElementsInstancedARB_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) {
  *cast(void**)&glDrawElementsInstancedARB_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedARB`);
  if (*cast(void**)&glDrawElementsInstancedARB_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedARB' not found!`);
  glDrawElementsInstancedARB_Z_Z(mode, count, type, indices, primcount);
}
alias glDrawElementsInstancedBaseInstance = glDrawElementsInstancedBaseInstance_Z_Z;
__gshared glDrawElementsInstancedBaseInstance_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLuint baseinstance) { glDrawElementsInstancedBaseInstance_Z_Z_loader(mode, count, type, indices, instancecount, baseinstance); };
private void glDrawElementsInstancedBaseInstance_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLuint baseinstance) {
  *cast(void**)&glDrawElementsInstancedBaseInstance_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseInstance`);
  if (*cast(void**)&glDrawElementsInstancedBaseInstance_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseInstance' not found!`);
  glDrawElementsInstancedBaseInstance_Z_Z(mode, count, type, indices, instancecount, baseinstance);
}
alias glDrawElementsInstancedBaseInstanceEXT = glDrawElementsInstancedBaseInstanceEXT_Z_Z;
__gshared glDrawElementsInstancedBaseInstanceEXT_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLuint baseinstance) { glDrawElementsInstancedBaseInstanceEXT_Z_Z_loader(mode, count, type, indices, instancecount, baseinstance); };
private void glDrawElementsInstancedBaseInstanceEXT_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLuint baseinstance) {
  *cast(void**)&glDrawElementsInstancedBaseInstanceEXT_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseInstanceEXT`);
  if (*cast(void**)&glDrawElementsInstancedBaseInstanceEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseInstanceEXT' not found!`);
  glDrawElementsInstancedBaseInstanceEXT_Z_Z(mode, count, type, indices, instancecount, baseinstance);
}
alias glDrawElementsInstancedBaseVertex = glDrawElementsInstancedBaseVertex_Z_Z;
__gshared glDrawElementsInstancedBaseVertex_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex) { glDrawElementsInstancedBaseVertex_Z_Z_loader(mode, count, type, indices, instancecount, basevertex); };
private void glDrawElementsInstancedBaseVertex_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex) {
  *cast(void**)&glDrawElementsInstancedBaseVertex_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseVertex`);
  if (*cast(void**)&glDrawElementsInstancedBaseVertex_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertex' not found!`);
  glDrawElementsInstancedBaseVertex_Z_Z(mode, count, type, indices, instancecount, basevertex);
}
alias glDrawElementsInstancedBaseVertexBaseInstance = glDrawElementsInstancedBaseVertexBaseInstance_Z_Z;
__gshared glDrawElementsInstancedBaseVertexBaseInstance_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { glDrawElementsInstancedBaseVertexBaseInstance_Z_Z_loader(mode, count, type, indices, instancecount, basevertex, baseinstance); };
private void glDrawElementsInstancedBaseVertexBaseInstance_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  *cast(void**)&glDrawElementsInstancedBaseVertexBaseInstance_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseVertexBaseInstance`);
  if (*cast(void**)&glDrawElementsInstancedBaseVertexBaseInstance_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertexBaseInstance' not found!`);
  glDrawElementsInstancedBaseVertexBaseInstance_Z_Z(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
alias glDrawElementsInstancedBaseVertexBaseInstanceEXT = glDrawElementsInstancedBaseVertexBaseInstanceEXT_Z_Z;
__gshared glDrawElementsInstancedBaseVertexBaseInstanceEXT_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { glDrawElementsInstancedBaseVertexBaseInstanceEXT_Z_Z_loader(mode, count, type, indices, instancecount, basevertex, baseinstance); };
private void glDrawElementsInstancedBaseVertexBaseInstanceEXT_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  *cast(void**)&glDrawElementsInstancedBaseVertexBaseInstanceEXT_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseVertexBaseInstanceEXT`);
  if (*cast(void**)&glDrawElementsInstancedBaseVertexBaseInstanceEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertexBaseInstanceEXT' not found!`);
  glDrawElementsInstancedBaseVertexBaseInstanceEXT_Z_Z(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
alias glDrawElementsInstancedBaseVertexEXT = glDrawElementsInstancedBaseVertexEXT_Z_Z;
__gshared glDrawElementsInstancedBaseVertexEXT_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex) { glDrawElementsInstancedBaseVertexEXT_Z_Z_loader(mode, count, type, indices, instancecount, basevertex); };
private void glDrawElementsInstancedBaseVertexEXT_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex) {
  *cast(void**)&glDrawElementsInstancedBaseVertexEXT_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseVertexEXT`);
  if (*cast(void**)&glDrawElementsInstancedBaseVertexEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertexEXT' not found!`);
  glDrawElementsInstancedBaseVertexEXT_Z_Z(mode, count, type, indices, instancecount, basevertex);
}
alias glDrawElementsInstancedBaseVertexOES = glDrawElementsInstancedBaseVertexOES_Z_Z;
__gshared glDrawElementsInstancedBaseVertexOES_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex) { glDrawElementsInstancedBaseVertexOES_Z_Z_loader(mode, count, type, indices, instancecount, basevertex); };
private void glDrawElementsInstancedBaseVertexOES_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount, GLint basevertex) {
  *cast(void**)&glDrawElementsInstancedBaseVertexOES_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedBaseVertexOES`);
  if (*cast(void**)&glDrawElementsInstancedBaseVertexOES_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertexOES' not found!`);
  glDrawElementsInstancedBaseVertexOES_Z_Z(mode, count, type, indices, instancecount, basevertex);
}
alias glDrawElementsInstancedEXT = glDrawElementsInstancedEXT_Z_Z;
__gshared glDrawElementsInstancedEXT_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) { glDrawElementsInstancedEXT_Z_Z_loader(mode, count, type, indices, primcount); };
private void glDrawElementsInstancedEXT_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) {
  *cast(void**)&glDrawElementsInstancedEXT_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedEXT`);
  if (*cast(void**)&glDrawElementsInstancedEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedEXT' not found!`);
  glDrawElementsInstancedEXT_Z_Z(mode, count, type, indices, primcount);
}
alias glDrawElementsInstancedNV = glDrawElementsInstancedNV_Z_Z;
__gshared glDrawElementsInstancedNV_Z_Z = function void (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) { glDrawElementsInstancedNV_Z_Z_loader(mode, count, type, indices, primcount); };
private void glDrawElementsInstancedNV_Z_Z_loader (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei primcount) {
  *cast(void**)&glDrawElementsInstancedNV_Z_Z = glbindGetProcAddress(`glDrawElementsInstancedNV`);
  if (*cast(void**)&glDrawElementsInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glDrawElementsInstancedNV' not found!`);
  glDrawElementsInstancedNV_Z_Z(mode, count, type, indices, primcount);
}
alias glDrawMeshArraysSUN = glDrawMeshArraysSUN_Z_Z;
__gshared glDrawMeshArraysSUN_Z_Z = function void (GLenum mode, GLint first, GLsizei count, GLsizei width) { glDrawMeshArraysSUN_Z_Z_loader(mode, first, count, width); };
private void glDrawMeshArraysSUN_Z_Z_loader (GLenum mode, GLint first, GLsizei count, GLsizei width) {
  *cast(void**)&glDrawMeshArraysSUN_Z_Z = glbindGetProcAddress(`glDrawMeshArraysSUN`);
  if (*cast(void**)&glDrawMeshArraysSUN_Z_Z is null) assert(0, `OpenGL function 'glDrawMeshArraysSUN' not found!`);
  glDrawMeshArraysSUN_Z_Z(mode, first, count, width);
}
alias glDrawPixels = glDrawPixels_Z_Z;
__gshared glDrawPixels_Z_Z = function void (GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) { glDrawPixels_Z_Z_loader(width, height, format, type, pixels); };
private void glDrawPixels_Z_Z_loader (GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glDrawPixels_Z_Z = glbindGetProcAddress(`glDrawPixels`);
  if (*cast(void**)&glDrawPixels_Z_Z is null) assert(0, `OpenGL function 'glDrawPixels' not found!`);
  glDrawPixels_Z_Z(width, height, format, type, pixels);
}
alias glDrawRangeElementArrayAPPLE = glDrawRangeElementArrayAPPLE_Z_Z;
__gshared glDrawRangeElementArrayAPPLE_Z_Z = function void (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { glDrawRangeElementArrayAPPLE_Z_Z_loader(mode, start, end, first, count); };
private void glDrawRangeElementArrayAPPLE_Z_Z_loader (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {
  *cast(void**)&glDrawRangeElementArrayAPPLE_Z_Z = glbindGetProcAddress(`glDrawRangeElementArrayAPPLE`);
  if (*cast(void**)&glDrawRangeElementArrayAPPLE_Z_Z is null) assert(0, `OpenGL function 'glDrawRangeElementArrayAPPLE' not found!`);
  glDrawRangeElementArrayAPPLE_Z_Z(mode, start, end, first, count);
}
alias glDrawRangeElementArrayATI = glDrawRangeElementArrayATI_Z_Z;
__gshared glDrawRangeElementArrayATI_Z_Z = function void (GLenum mode, GLuint start, GLuint end, GLsizei count) { glDrawRangeElementArrayATI_Z_Z_loader(mode, start, end, count); };
private void glDrawRangeElementArrayATI_Z_Z_loader (GLenum mode, GLuint start, GLuint end, GLsizei count) {
  *cast(void**)&glDrawRangeElementArrayATI_Z_Z = glbindGetProcAddress(`glDrawRangeElementArrayATI`);
  if (*cast(void**)&glDrawRangeElementArrayATI_Z_Z is null) assert(0, `OpenGL function 'glDrawRangeElementArrayATI' not found!`);
  glDrawRangeElementArrayATI_Z_Z(mode, start, end, count);
}
alias glDrawRangeElements = glDrawRangeElements_Z_Z;
__gshared glDrawRangeElements_Z_Z = function void (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices) { glDrawRangeElements_Z_Z_loader(mode, start, end, count, type, indices); };
private void glDrawRangeElements_Z_Z_loader (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices) {
  *cast(void**)&glDrawRangeElements_Z_Z = glbindGetProcAddress(`glDrawRangeElements`);
  if (*cast(void**)&glDrawRangeElements_Z_Z is null) assert(0, `OpenGL function 'glDrawRangeElements' not found!`);
  glDrawRangeElements_Z_Z(mode, start, end, count, type, indices);
}
alias glDrawRangeElementsBaseVertex = glDrawRangeElementsBaseVertex_Z_Z;
__gshared glDrawRangeElementsBaseVertex_Z_Z = function void (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) { glDrawRangeElementsBaseVertex_Z_Z_loader(mode, start, end, count, type, indices, basevertex); };
private void glDrawRangeElementsBaseVertex_Z_Z_loader (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) {
  *cast(void**)&glDrawRangeElementsBaseVertex_Z_Z = glbindGetProcAddress(`glDrawRangeElementsBaseVertex`);
  if (*cast(void**)&glDrawRangeElementsBaseVertex_Z_Z is null) assert(0, `OpenGL function 'glDrawRangeElementsBaseVertex' not found!`);
  glDrawRangeElementsBaseVertex_Z_Z(mode, start, end, count, type, indices, basevertex);
}
alias glDrawRangeElementsBaseVertexEXT = glDrawRangeElementsBaseVertexEXT_Z_Z;
__gshared glDrawRangeElementsBaseVertexEXT_Z_Z = function void (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) { glDrawRangeElementsBaseVertexEXT_Z_Z_loader(mode, start, end, count, type, indices, basevertex); };
private void glDrawRangeElementsBaseVertexEXT_Z_Z_loader (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) {
  *cast(void**)&glDrawRangeElementsBaseVertexEXT_Z_Z = glbindGetProcAddress(`glDrawRangeElementsBaseVertexEXT`);
  if (*cast(void**)&glDrawRangeElementsBaseVertexEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawRangeElementsBaseVertexEXT' not found!`);
  glDrawRangeElementsBaseVertexEXT_Z_Z(mode, start, end, count, type, indices, basevertex);
}
alias glDrawRangeElementsBaseVertexOES = glDrawRangeElementsBaseVertexOES_Z_Z;
__gshared glDrawRangeElementsBaseVertexOES_Z_Z = function void (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) { glDrawRangeElementsBaseVertexOES_Z_Z_loader(mode, start, end, count, type, indices, basevertex); };
private void glDrawRangeElementsBaseVertexOES_Z_Z_loader (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices, GLint basevertex) {
  *cast(void**)&glDrawRangeElementsBaseVertexOES_Z_Z = glbindGetProcAddress(`glDrawRangeElementsBaseVertexOES`);
  if (*cast(void**)&glDrawRangeElementsBaseVertexOES_Z_Z is null) assert(0, `OpenGL function 'glDrawRangeElementsBaseVertexOES' not found!`);
  glDrawRangeElementsBaseVertexOES_Z_Z(mode, start, end, count, type, indices, basevertex);
}
alias glDrawRangeElementsEXT = glDrawRangeElementsEXT_Z_Z;
__gshared glDrawRangeElementsEXT_Z_Z = function void (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices) { glDrawRangeElementsEXT_Z_Z_loader(mode, start, end, count, type, indices); };
private void glDrawRangeElementsEXT_Z_Z_loader (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices) {
  *cast(void**)&glDrawRangeElementsEXT_Z_Z = glbindGetProcAddress(`glDrawRangeElementsEXT`);
  if (*cast(void**)&glDrawRangeElementsEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawRangeElementsEXT' not found!`);
  glDrawRangeElementsEXT_Z_Z(mode, start, end, count, type, indices);
}
alias glDrawTexfOES = glDrawTexfOES_Z_Z;
__gshared glDrawTexfOES_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) { glDrawTexfOES_Z_Z_loader(x, y, z, width, height); };
private void glDrawTexfOES_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) {
  *cast(void**)&glDrawTexfOES_Z_Z = glbindGetProcAddress(`glDrawTexfOES`);
  if (*cast(void**)&glDrawTexfOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexfOES' not found!`);
  glDrawTexfOES_Z_Z(x, y, z, width, height);
}
alias glDrawTexfvOES = glDrawTexfvOES_Z_Z;
__gshared glDrawTexfvOES_Z_Z = function void (const(GLfloat)* coords) { glDrawTexfvOES_Z_Z_loader(coords); };
private void glDrawTexfvOES_Z_Z_loader (const(GLfloat)* coords) {
  *cast(void**)&glDrawTexfvOES_Z_Z = glbindGetProcAddress(`glDrawTexfvOES`);
  if (*cast(void**)&glDrawTexfvOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexfvOES' not found!`);
  glDrawTexfvOES_Z_Z(coords);
}
alias glDrawTexiOES = glDrawTexiOES_Z_Z;
__gshared glDrawTexiOES_Z_Z = function void (GLint x, GLint y, GLint z, GLint width, GLint height) { glDrawTexiOES_Z_Z_loader(x, y, z, width, height); };
private void glDrawTexiOES_Z_Z_loader (GLint x, GLint y, GLint z, GLint width, GLint height) {
  *cast(void**)&glDrawTexiOES_Z_Z = glbindGetProcAddress(`glDrawTexiOES`);
  if (*cast(void**)&glDrawTexiOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexiOES' not found!`);
  glDrawTexiOES_Z_Z(x, y, z, width, height);
}
alias glDrawTexivOES = glDrawTexivOES_Z_Z;
__gshared glDrawTexivOES_Z_Z = function void (const(GLint)* coords) { glDrawTexivOES_Z_Z_loader(coords); };
private void glDrawTexivOES_Z_Z_loader (const(GLint)* coords) {
  *cast(void**)&glDrawTexivOES_Z_Z = glbindGetProcAddress(`glDrawTexivOES`);
  if (*cast(void**)&glDrawTexivOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexivOES' not found!`);
  glDrawTexivOES_Z_Z(coords);
}
alias glDrawTexsOES = glDrawTexsOES_Z_Z;
__gshared glDrawTexsOES_Z_Z = function void (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) { glDrawTexsOES_Z_Z_loader(x, y, z, width, height); };
private void glDrawTexsOES_Z_Z_loader (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) {
  *cast(void**)&glDrawTexsOES_Z_Z = glbindGetProcAddress(`glDrawTexsOES`);
  if (*cast(void**)&glDrawTexsOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexsOES' not found!`);
  glDrawTexsOES_Z_Z(x, y, z, width, height);
}
alias glDrawTexsvOES = glDrawTexsvOES_Z_Z;
__gshared glDrawTexsvOES_Z_Z = function void (const(GLshort)* coords) { glDrawTexsvOES_Z_Z_loader(coords); };
private void glDrawTexsvOES_Z_Z_loader (const(GLshort)* coords) {
  *cast(void**)&glDrawTexsvOES_Z_Z = glbindGetProcAddress(`glDrawTexsvOES`);
  if (*cast(void**)&glDrawTexsvOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexsvOES' not found!`);
  glDrawTexsvOES_Z_Z(coords);
}
alias glDrawTextureNV = glDrawTextureNV_Z_Z;
__gshared glDrawTextureNV_Z_Z = function void (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { glDrawTextureNV_Z_Z_loader(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); };
private void glDrawTextureNV_Z_Z_loader (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  *cast(void**)&glDrawTextureNV_Z_Z = glbindGetProcAddress(`glDrawTextureNV`);
  if (*cast(void**)&glDrawTextureNV_Z_Z is null) assert(0, `OpenGL function 'glDrawTextureNV' not found!`);
  glDrawTextureNV_Z_Z(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}
alias glDrawTexxOES = glDrawTexxOES_Z_Z;
__gshared glDrawTexxOES_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) { glDrawTexxOES_Z_Z_loader(x, y, z, width, height); };
private void glDrawTexxOES_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) {
  *cast(void**)&glDrawTexxOES_Z_Z = glbindGetProcAddress(`glDrawTexxOES`);
  if (*cast(void**)&glDrawTexxOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexxOES' not found!`);
  glDrawTexxOES_Z_Z(x, y, z, width, height);
}
alias glDrawTexxvOES = glDrawTexxvOES_Z_Z;
__gshared glDrawTexxvOES_Z_Z = function void (const(GLfixed)* coords) { glDrawTexxvOES_Z_Z_loader(coords); };
private void glDrawTexxvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glDrawTexxvOES_Z_Z = glbindGetProcAddress(`glDrawTexxvOES`);
  if (*cast(void**)&glDrawTexxvOES_Z_Z is null) assert(0, `OpenGL function 'glDrawTexxvOES' not found!`);
  glDrawTexxvOES_Z_Z(coords);
}
alias glDrawTransformFeedback = glDrawTransformFeedback_Z_Z;
__gshared glDrawTransformFeedback_Z_Z = function void (GLenum mode, GLuint id) { glDrawTransformFeedback_Z_Z_loader(mode, id); };
private void glDrawTransformFeedback_Z_Z_loader (GLenum mode, GLuint id) {
  *cast(void**)&glDrawTransformFeedback_Z_Z = glbindGetProcAddress(`glDrawTransformFeedback`);
  if (*cast(void**)&glDrawTransformFeedback_Z_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedback' not found!`);
  glDrawTransformFeedback_Z_Z(mode, id);
}
alias glDrawTransformFeedbackEXT = glDrawTransformFeedbackEXT_Z_Z;
__gshared glDrawTransformFeedbackEXT_Z_Z = function void (GLenum mode, GLuint id) { glDrawTransformFeedbackEXT_Z_Z_loader(mode, id); };
private void glDrawTransformFeedbackEXT_Z_Z_loader (GLenum mode, GLuint id) {
  *cast(void**)&glDrawTransformFeedbackEXT_Z_Z = glbindGetProcAddress(`glDrawTransformFeedbackEXT`);
  if (*cast(void**)&glDrawTransformFeedbackEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackEXT' not found!`);
  glDrawTransformFeedbackEXT_Z_Z(mode, id);
}
alias glDrawTransformFeedbackInstanced = glDrawTransformFeedbackInstanced_Z_Z;
__gshared glDrawTransformFeedbackInstanced_Z_Z = function void (GLenum mode, GLuint id, GLsizei instancecount) { glDrawTransformFeedbackInstanced_Z_Z_loader(mode, id, instancecount); };
private void glDrawTransformFeedbackInstanced_Z_Z_loader (GLenum mode, GLuint id, GLsizei instancecount) {
  *cast(void**)&glDrawTransformFeedbackInstanced_Z_Z = glbindGetProcAddress(`glDrawTransformFeedbackInstanced`);
  if (*cast(void**)&glDrawTransformFeedbackInstanced_Z_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackInstanced' not found!`);
  glDrawTransformFeedbackInstanced_Z_Z(mode, id, instancecount);
}
alias glDrawTransformFeedbackInstancedEXT = glDrawTransformFeedbackInstancedEXT_Z_Z;
__gshared glDrawTransformFeedbackInstancedEXT_Z_Z = function void (GLenum mode, GLuint id, GLsizei instancecount) { glDrawTransformFeedbackInstancedEXT_Z_Z_loader(mode, id, instancecount); };
private void glDrawTransformFeedbackInstancedEXT_Z_Z_loader (GLenum mode, GLuint id, GLsizei instancecount) {
  *cast(void**)&glDrawTransformFeedbackInstancedEXT_Z_Z = glbindGetProcAddress(`glDrawTransformFeedbackInstancedEXT`);
  if (*cast(void**)&glDrawTransformFeedbackInstancedEXT_Z_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackInstancedEXT' not found!`);
  glDrawTransformFeedbackInstancedEXT_Z_Z(mode, id, instancecount);
}
alias glDrawTransformFeedbackNV = glDrawTransformFeedbackNV_Z_Z;
__gshared glDrawTransformFeedbackNV_Z_Z = function void (GLenum mode, GLuint id) { glDrawTransformFeedbackNV_Z_Z_loader(mode, id); };
private void glDrawTransformFeedbackNV_Z_Z_loader (GLenum mode, GLuint id) {
  *cast(void**)&glDrawTransformFeedbackNV_Z_Z = glbindGetProcAddress(`glDrawTransformFeedbackNV`);
  if (*cast(void**)&glDrawTransformFeedbackNV_Z_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackNV' not found!`);
  glDrawTransformFeedbackNV_Z_Z(mode, id);
}
alias glDrawTransformFeedbackStream = glDrawTransformFeedbackStream_Z_Z;
__gshared glDrawTransformFeedbackStream_Z_Z = function void (GLenum mode, GLuint id, GLuint stream) { glDrawTransformFeedbackStream_Z_Z_loader(mode, id, stream); };
private void glDrawTransformFeedbackStream_Z_Z_loader (GLenum mode, GLuint id, GLuint stream) {
  *cast(void**)&glDrawTransformFeedbackStream_Z_Z = glbindGetProcAddress(`glDrawTransformFeedbackStream`);
  if (*cast(void**)&glDrawTransformFeedbackStream_Z_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStream' not found!`);
  glDrawTransformFeedbackStream_Z_Z(mode, id, stream);
}
alias glDrawTransformFeedbackStreamInstanced = glDrawTransformFeedbackStreamInstanced_Z_Z;
__gshared glDrawTransformFeedbackStreamInstanced_Z_Z = function void (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { glDrawTransformFeedbackStreamInstanced_Z_Z_loader(mode, id, stream, instancecount); };
private void glDrawTransformFeedbackStreamInstanced_Z_Z_loader (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
  *cast(void**)&glDrawTransformFeedbackStreamInstanced_Z_Z = glbindGetProcAddress(`glDrawTransformFeedbackStreamInstanced`);
  if (*cast(void**)&glDrawTransformFeedbackStreamInstanced_Z_Z is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStreamInstanced' not found!`);
  glDrawTransformFeedbackStreamInstanced_Z_Z(mode, id, stream, instancecount);
}
alias glEGLImageTargetRenderbufferStorageOES = glEGLImageTargetRenderbufferStorageOES_Z_Z;
__gshared glEGLImageTargetRenderbufferStorageOES_Z_Z = function void (GLenum target, GLeglImageOES image) { glEGLImageTargetRenderbufferStorageOES_Z_Z_loader(target, image); };
private void glEGLImageTargetRenderbufferStorageOES_Z_Z_loader (GLenum target, GLeglImageOES image) {
  *cast(void**)&glEGLImageTargetRenderbufferStorageOES_Z_Z = glbindGetProcAddress(`glEGLImageTargetRenderbufferStorageOES`);
  if (*cast(void**)&glEGLImageTargetRenderbufferStorageOES_Z_Z is null) assert(0, `OpenGL function 'glEGLImageTargetRenderbufferStorageOES' not found!`);
  glEGLImageTargetRenderbufferStorageOES_Z_Z(target, image);
}
alias glEGLImageTargetTexture2DOES = glEGLImageTargetTexture2DOES_Z_Z;
__gshared glEGLImageTargetTexture2DOES_Z_Z = function void (GLenum target, GLeglImageOES image) { glEGLImageTargetTexture2DOES_Z_Z_loader(target, image); };
private void glEGLImageTargetTexture2DOES_Z_Z_loader (GLenum target, GLeglImageOES image) {
  *cast(void**)&glEGLImageTargetTexture2DOES_Z_Z = glbindGetProcAddress(`glEGLImageTargetTexture2DOES`);
  if (*cast(void**)&glEGLImageTargetTexture2DOES_Z_Z is null) assert(0, `OpenGL function 'glEGLImageTargetTexture2DOES' not found!`);
  glEGLImageTargetTexture2DOES_Z_Z(target, image);
}
alias glEdgeFlag = glEdgeFlag_Z_Z;
__gshared glEdgeFlag_Z_Z = function void (GLboolean flag) { glEdgeFlag_Z_Z_loader(flag); };
private void glEdgeFlag_Z_Z_loader (GLboolean flag) {
  *cast(void**)&glEdgeFlag_Z_Z = glbindGetProcAddress(`glEdgeFlag`);
  if (*cast(void**)&glEdgeFlag_Z_Z is null) assert(0, `OpenGL function 'glEdgeFlag' not found!`);
  glEdgeFlag_Z_Z(flag);
}
alias glEdgeFlagFormatNV = glEdgeFlagFormatNV_Z_Z;
__gshared glEdgeFlagFormatNV_Z_Z = function void (GLsizei stride) { glEdgeFlagFormatNV_Z_Z_loader(stride); };
private void glEdgeFlagFormatNV_Z_Z_loader (GLsizei stride) {
  *cast(void**)&glEdgeFlagFormatNV_Z_Z = glbindGetProcAddress(`glEdgeFlagFormatNV`);
  if (*cast(void**)&glEdgeFlagFormatNV_Z_Z is null) assert(0, `OpenGL function 'glEdgeFlagFormatNV' not found!`);
  glEdgeFlagFormatNV_Z_Z(stride);
}
alias glEdgeFlagPointer = glEdgeFlagPointer_Z_Z;
__gshared glEdgeFlagPointer_Z_Z = function void (GLsizei stride, const(void)* pointer) { glEdgeFlagPointer_Z_Z_loader(stride, pointer); };
private void glEdgeFlagPointer_Z_Z_loader (GLsizei stride, const(void)* pointer) {
  *cast(void**)&glEdgeFlagPointer_Z_Z = glbindGetProcAddress(`glEdgeFlagPointer`);
  if (*cast(void**)&glEdgeFlagPointer_Z_Z is null) assert(0, `OpenGL function 'glEdgeFlagPointer' not found!`);
  glEdgeFlagPointer_Z_Z(stride, pointer);
}
alias glEdgeFlagPointerEXT = glEdgeFlagPointerEXT_Z_Z;
__gshared glEdgeFlagPointerEXT_Z_Z = function void (GLsizei stride, GLsizei count, const(GLboolean)* pointer) { glEdgeFlagPointerEXT_Z_Z_loader(stride, count, pointer); };
private void glEdgeFlagPointerEXT_Z_Z_loader (GLsizei stride, GLsizei count, const(GLboolean)* pointer) {
  *cast(void**)&glEdgeFlagPointerEXT_Z_Z = glbindGetProcAddress(`glEdgeFlagPointerEXT`);
  if (*cast(void**)&glEdgeFlagPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glEdgeFlagPointerEXT' not found!`);
  glEdgeFlagPointerEXT_Z_Z(stride, count, pointer);
}
alias glEdgeFlagPointerListIBM = glEdgeFlagPointerListIBM_Z_Z;
__gshared glEdgeFlagPointerListIBM_Z_Z = function void (GLint stride, const(GLboolean)** pointer, GLint ptrstride) { glEdgeFlagPointerListIBM_Z_Z_loader(stride, pointer, ptrstride); };
private void glEdgeFlagPointerListIBM_Z_Z_loader (GLint stride, const(GLboolean)** pointer, GLint ptrstride) {
  *cast(void**)&glEdgeFlagPointerListIBM_Z_Z = glbindGetProcAddress(`glEdgeFlagPointerListIBM`);
  if (*cast(void**)&glEdgeFlagPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glEdgeFlagPointerListIBM' not found!`);
  glEdgeFlagPointerListIBM_Z_Z(stride, pointer, ptrstride);
}
alias glEdgeFlagv = glEdgeFlagv_Z_Z;
__gshared glEdgeFlagv_Z_Z = function void (const(GLboolean)* flag) { glEdgeFlagv_Z_Z_loader(flag); };
private void glEdgeFlagv_Z_Z_loader (const(GLboolean)* flag) {
  *cast(void**)&glEdgeFlagv_Z_Z = glbindGetProcAddress(`glEdgeFlagv`);
  if (*cast(void**)&glEdgeFlagv_Z_Z is null) assert(0, `OpenGL function 'glEdgeFlagv' not found!`);
  glEdgeFlagv_Z_Z(flag);
}
alias glElementPointerAPPLE = glElementPointerAPPLE_Z_Z;
__gshared glElementPointerAPPLE_Z_Z = function void (GLenum type, const(void)* pointer) { glElementPointerAPPLE_Z_Z_loader(type, pointer); };
private void glElementPointerAPPLE_Z_Z_loader (GLenum type, const(void)* pointer) {
  *cast(void**)&glElementPointerAPPLE_Z_Z = glbindGetProcAddress(`glElementPointerAPPLE`);
  if (*cast(void**)&glElementPointerAPPLE_Z_Z is null) assert(0, `OpenGL function 'glElementPointerAPPLE' not found!`);
  glElementPointerAPPLE_Z_Z(type, pointer);
}
alias glElementPointerATI = glElementPointerATI_Z_Z;
__gshared glElementPointerATI_Z_Z = function void (GLenum type, const(void)* pointer) { glElementPointerATI_Z_Z_loader(type, pointer); };
private void glElementPointerATI_Z_Z_loader (GLenum type, const(void)* pointer) {
  *cast(void**)&glElementPointerATI_Z_Z = glbindGetProcAddress(`glElementPointerATI`);
  if (*cast(void**)&glElementPointerATI_Z_Z is null) assert(0, `OpenGL function 'glElementPointerATI' not found!`);
  glElementPointerATI_Z_Z(type, pointer);
}
alias glEnable = glEnable_Z_Z;
__gshared glEnable_Z_Z = function void (GLenum cap) { glEnable_Z_Z_loader(cap); };
private void glEnable_Z_Z_loader (GLenum cap) {
  *cast(void**)&glEnable_Z_Z = glbindGetProcAddress(`glEnable`);
  if (*cast(void**)&glEnable_Z_Z is null) assert(0, `OpenGL function 'glEnable' not found!`);
  glEnable_Z_Z(cap);
}
alias glEnableClientState = glEnableClientState_Z_Z;
__gshared glEnableClientState_Z_Z = function void (GLenum array) { glEnableClientState_Z_Z_loader(array); };
private void glEnableClientState_Z_Z_loader (GLenum array) {
  *cast(void**)&glEnableClientState_Z_Z = glbindGetProcAddress(`glEnableClientState`);
  if (*cast(void**)&glEnableClientState_Z_Z is null) assert(0, `OpenGL function 'glEnableClientState' not found!`);
  glEnableClientState_Z_Z(array);
}
alias glEnableClientStateIndexedEXT = glEnableClientStateIndexedEXT_Z_Z;
__gshared glEnableClientStateIndexedEXT_Z_Z = function void (GLenum array, GLuint index) { glEnableClientStateIndexedEXT_Z_Z_loader(array, index); };
private void glEnableClientStateIndexedEXT_Z_Z_loader (GLenum array, GLuint index) {
  *cast(void**)&glEnableClientStateIndexedEXT_Z_Z = glbindGetProcAddress(`glEnableClientStateIndexedEXT`);
  if (*cast(void**)&glEnableClientStateIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glEnableClientStateIndexedEXT' not found!`);
  glEnableClientStateIndexedEXT_Z_Z(array, index);
}
alias glEnableClientStateiEXT = glEnableClientStateiEXT_Z_Z;
__gshared glEnableClientStateiEXT_Z_Z = function void (GLenum array, GLuint index) { glEnableClientStateiEXT_Z_Z_loader(array, index); };
private void glEnableClientStateiEXT_Z_Z_loader (GLenum array, GLuint index) {
  *cast(void**)&glEnableClientStateiEXT_Z_Z = glbindGetProcAddress(`glEnableClientStateiEXT`);
  if (*cast(void**)&glEnableClientStateiEXT_Z_Z is null) assert(0, `OpenGL function 'glEnableClientStateiEXT' not found!`);
  glEnableClientStateiEXT_Z_Z(array, index);
}
alias glEnableDriverControlQCOM = glEnableDriverControlQCOM_Z_Z;
__gshared glEnableDriverControlQCOM_Z_Z = function void (GLuint driverControl) { glEnableDriverControlQCOM_Z_Z_loader(driverControl); };
private void glEnableDriverControlQCOM_Z_Z_loader (GLuint driverControl) {
  *cast(void**)&glEnableDriverControlQCOM_Z_Z = glbindGetProcAddress(`glEnableDriverControlQCOM`);
  if (*cast(void**)&glEnableDriverControlQCOM_Z_Z is null) assert(0, `OpenGL function 'glEnableDriverControlQCOM' not found!`);
  glEnableDriverControlQCOM_Z_Z(driverControl);
}
alias glEnableIndexedEXT = glEnableIndexedEXT_Z_Z;
__gshared glEnableIndexedEXT_Z_Z = function void (GLenum target, GLuint index) { glEnableIndexedEXT_Z_Z_loader(target, index); };
private void glEnableIndexedEXT_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glEnableIndexedEXT_Z_Z = glbindGetProcAddress(`glEnableIndexedEXT`);
  if (*cast(void**)&glEnableIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glEnableIndexedEXT' not found!`);
  glEnableIndexedEXT_Z_Z(target, index);
}
alias glEnableVariantClientStateEXT = glEnableVariantClientStateEXT_Z_Z;
__gshared glEnableVariantClientStateEXT_Z_Z = function void (GLuint id) { glEnableVariantClientStateEXT_Z_Z_loader(id); };
private void glEnableVariantClientStateEXT_Z_Z_loader (GLuint id) {
  *cast(void**)&glEnableVariantClientStateEXT_Z_Z = glbindGetProcAddress(`glEnableVariantClientStateEXT`);
  if (*cast(void**)&glEnableVariantClientStateEXT_Z_Z is null) assert(0, `OpenGL function 'glEnableVariantClientStateEXT' not found!`);
  glEnableVariantClientStateEXT_Z_Z(id);
}
alias glEnableVertexArrayAttrib = glEnableVertexArrayAttrib_Z_Z;
__gshared glEnableVertexArrayAttrib_Z_Z = function void (GLuint vaobj, GLuint index) { glEnableVertexArrayAttrib_Z_Z_loader(vaobj, index); };
private void glEnableVertexArrayAttrib_Z_Z_loader (GLuint vaobj, GLuint index) {
  *cast(void**)&glEnableVertexArrayAttrib_Z_Z = glbindGetProcAddress(`glEnableVertexArrayAttrib`);
  if (*cast(void**)&glEnableVertexArrayAttrib_Z_Z is null) assert(0, `OpenGL function 'glEnableVertexArrayAttrib' not found!`);
  glEnableVertexArrayAttrib_Z_Z(vaobj, index);
}
alias glEnableVertexArrayAttribEXT = glEnableVertexArrayAttribEXT_Z_Z;
__gshared glEnableVertexArrayAttribEXT_Z_Z = function void (GLuint vaobj, GLuint index) { glEnableVertexArrayAttribEXT_Z_Z_loader(vaobj, index); };
private void glEnableVertexArrayAttribEXT_Z_Z_loader (GLuint vaobj, GLuint index) {
  *cast(void**)&glEnableVertexArrayAttribEXT_Z_Z = glbindGetProcAddress(`glEnableVertexArrayAttribEXT`);
  if (*cast(void**)&glEnableVertexArrayAttribEXT_Z_Z is null) assert(0, `OpenGL function 'glEnableVertexArrayAttribEXT' not found!`);
  glEnableVertexArrayAttribEXT_Z_Z(vaobj, index);
}
alias glEnableVertexArrayEXT = glEnableVertexArrayEXT_Z_Z;
__gshared glEnableVertexArrayEXT_Z_Z = function void (GLuint vaobj, GLenum array) { glEnableVertexArrayEXT_Z_Z_loader(vaobj, array); };
private void glEnableVertexArrayEXT_Z_Z_loader (GLuint vaobj, GLenum array) {
  *cast(void**)&glEnableVertexArrayEXT_Z_Z = glbindGetProcAddress(`glEnableVertexArrayEXT`);
  if (*cast(void**)&glEnableVertexArrayEXT_Z_Z is null) assert(0, `OpenGL function 'glEnableVertexArrayEXT' not found!`);
  glEnableVertexArrayEXT_Z_Z(vaobj, array);
}
alias glEnableVertexAttribAPPLE = glEnableVertexAttribAPPLE_Z_Z;
__gshared glEnableVertexAttribAPPLE_Z_Z = function void (GLuint index, GLenum pname) { glEnableVertexAttribAPPLE_Z_Z_loader(index, pname); };
private void glEnableVertexAttribAPPLE_Z_Z_loader (GLuint index, GLenum pname) {
  *cast(void**)&glEnableVertexAttribAPPLE_Z_Z = glbindGetProcAddress(`glEnableVertexAttribAPPLE`);
  if (*cast(void**)&glEnableVertexAttribAPPLE_Z_Z is null) assert(0, `OpenGL function 'glEnableVertexAttribAPPLE' not found!`);
  glEnableVertexAttribAPPLE_Z_Z(index, pname);
}
alias glEnableVertexAttribArray = glEnableVertexAttribArray_Z_Z;
__gshared glEnableVertexAttribArray_Z_Z = function void (GLuint index) { glEnableVertexAttribArray_Z_Z_loader(index); };
private void glEnableVertexAttribArray_Z_Z_loader (GLuint index) {
  *cast(void**)&glEnableVertexAttribArray_Z_Z = glbindGetProcAddress(`glEnableVertexAttribArray`);
  if (*cast(void**)&glEnableVertexAttribArray_Z_Z is null) assert(0, `OpenGL function 'glEnableVertexAttribArray' not found!`);
  glEnableVertexAttribArray_Z_Z(index);
}
alias glEnableVertexAttribArrayARB = glEnableVertexAttribArrayARB_Z_Z;
__gshared glEnableVertexAttribArrayARB_Z_Z = function void (GLuint index) { glEnableVertexAttribArrayARB_Z_Z_loader(index); };
private void glEnableVertexAttribArrayARB_Z_Z_loader (GLuint index) {
  *cast(void**)&glEnableVertexAttribArrayARB_Z_Z = glbindGetProcAddress(`glEnableVertexAttribArrayARB`);
  if (*cast(void**)&glEnableVertexAttribArrayARB_Z_Z is null) assert(0, `OpenGL function 'glEnableVertexAttribArrayARB' not found!`);
  glEnableVertexAttribArrayARB_Z_Z(index);
}
alias glEnablei = glEnablei_Z_Z;
__gshared glEnablei_Z_Z = function void (GLenum target, GLuint index) { glEnablei_Z_Z_loader(target, index); };
private void glEnablei_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glEnablei_Z_Z = glbindGetProcAddress(`glEnablei`);
  if (*cast(void**)&glEnablei_Z_Z is null) assert(0, `OpenGL function 'glEnablei' not found!`);
  glEnablei_Z_Z(target, index);
}
alias glEnableiEXT = glEnableiEXT_Z_Z;
__gshared glEnableiEXT_Z_Z = function void (GLenum target, GLuint index) { glEnableiEXT_Z_Z_loader(target, index); };
private void glEnableiEXT_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glEnableiEXT_Z_Z = glbindGetProcAddress(`glEnableiEXT`);
  if (*cast(void**)&glEnableiEXT_Z_Z is null) assert(0, `OpenGL function 'glEnableiEXT' not found!`);
  glEnableiEXT_Z_Z(target, index);
}
alias glEnableiNV = glEnableiNV_Z_Z;
__gshared glEnableiNV_Z_Z = function void (GLenum target, GLuint index) { glEnableiNV_Z_Z_loader(target, index); };
private void glEnableiNV_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glEnableiNV_Z_Z = glbindGetProcAddress(`glEnableiNV`);
  if (*cast(void**)&glEnableiNV_Z_Z is null) assert(0, `OpenGL function 'glEnableiNV' not found!`);
  glEnableiNV_Z_Z(target, index);
}
alias glEnableiOES = glEnableiOES_Z_Z;
__gshared glEnableiOES_Z_Z = function void (GLenum target, GLuint index) { glEnableiOES_Z_Z_loader(target, index); };
private void glEnableiOES_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glEnableiOES_Z_Z = glbindGetProcAddress(`glEnableiOES`);
  if (*cast(void**)&glEnableiOES_Z_Z is null) assert(0, `OpenGL function 'glEnableiOES' not found!`);
  glEnableiOES_Z_Z(target, index);
}
alias glEnd = glEnd_Z_Z;
__gshared glEnd_Z_Z = function void () { glEnd_Z_Z_loader(); };
private void glEnd_Z_Z_loader () {
  *cast(void**)&glEnd_Z_Z = glbindGetProcAddress(`glEnd`);
  if (*cast(void**)&glEnd_Z_Z is null) assert(0, `OpenGL function 'glEnd' not found!`);
  glEnd_Z_Z();
}
alias glEndConditionalRender = glEndConditionalRender_Z_Z;
__gshared glEndConditionalRender_Z_Z = function void () { glEndConditionalRender_Z_Z_loader(); };
private void glEndConditionalRender_Z_Z_loader () {
  *cast(void**)&glEndConditionalRender_Z_Z = glbindGetProcAddress(`glEndConditionalRender`);
  if (*cast(void**)&glEndConditionalRender_Z_Z is null) assert(0, `OpenGL function 'glEndConditionalRender' not found!`);
  glEndConditionalRender_Z_Z();
}
alias glEndConditionalRenderNV = glEndConditionalRenderNV_Z_Z;
__gshared glEndConditionalRenderNV_Z_Z = function void () { glEndConditionalRenderNV_Z_Z_loader(); };
private void glEndConditionalRenderNV_Z_Z_loader () {
  *cast(void**)&glEndConditionalRenderNV_Z_Z = glbindGetProcAddress(`glEndConditionalRenderNV`);
  if (*cast(void**)&glEndConditionalRenderNV_Z_Z is null) assert(0, `OpenGL function 'glEndConditionalRenderNV' not found!`);
  glEndConditionalRenderNV_Z_Z();
}
alias glEndConditionalRenderNVX = glEndConditionalRenderNVX_Z_Z;
__gshared glEndConditionalRenderNVX_Z_Z = function void () { glEndConditionalRenderNVX_Z_Z_loader(); };
private void glEndConditionalRenderNVX_Z_Z_loader () {
  *cast(void**)&glEndConditionalRenderNVX_Z_Z = glbindGetProcAddress(`glEndConditionalRenderNVX`);
  if (*cast(void**)&glEndConditionalRenderNVX_Z_Z is null) assert(0, `OpenGL function 'glEndConditionalRenderNVX' not found!`);
  glEndConditionalRenderNVX_Z_Z();
}
alias glEndFragmentShaderATI = glEndFragmentShaderATI_Z_Z;
__gshared glEndFragmentShaderATI_Z_Z = function void () { glEndFragmentShaderATI_Z_Z_loader(); };
private void glEndFragmentShaderATI_Z_Z_loader () {
  *cast(void**)&glEndFragmentShaderATI_Z_Z = glbindGetProcAddress(`glEndFragmentShaderATI`);
  if (*cast(void**)&glEndFragmentShaderATI_Z_Z is null) assert(0, `OpenGL function 'glEndFragmentShaderATI' not found!`);
  glEndFragmentShaderATI_Z_Z();
}
alias glEndList = glEndList_Z_Z;
__gshared glEndList_Z_Z = function void () { glEndList_Z_Z_loader(); };
private void glEndList_Z_Z_loader () {
  *cast(void**)&glEndList_Z_Z = glbindGetProcAddress(`glEndList`);
  if (*cast(void**)&glEndList_Z_Z is null) assert(0, `OpenGL function 'glEndList' not found!`);
  glEndList_Z_Z();
}
alias glEndOcclusionQueryNV = glEndOcclusionQueryNV_Z_Z;
__gshared glEndOcclusionQueryNV_Z_Z = function void () { glEndOcclusionQueryNV_Z_Z_loader(); };
private void glEndOcclusionQueryNV_Z_Z_loader () {
  *cast(void**)&glEndOcclusionQueryNV_Z_Z = glbindGetProcAddress(`glEndOcclusionQueryNV`);
  if (*cast(void**)&glEndOcclusionQueryNV_Z_Z is null) assert(0, `OpenGL function 'glEndOcclusionQueryNV' not found!`);
  glEndOcclusionQueryNV_Z_Z();
}
alias glEndPerfMonitorAMD = glEndPerfMonitorAMD_Z_Z;
__gshared glEndPerfMonitorAMD_Z_Z = function void (GLuint monitor) { glEndPerfMonitorAMD_Z_Z_loader(monitor); };
private void glEndPerfMonitorAMD_Z_Z_loader (GLuint monitor) {
  *cast(void**)&glEndPerfMonitorAMD_Z_Z = glbindGetProcAddress(`glEndPerfMonitorAMD`);
  if (*cast(void**)&glEndPerfMonitorAMD_Z_Z is null) assert(0, `OpenGL function 'glEndPerfMonitorAMD' not found!`);
  glEndPerfMonitorAMD_Z_Z(monitor);
}
alias glEndPerfQueryINTEL = glEndPerfQueryINTEL_Z_Z;
__gshared glEndPerfQueryINTEL_Z_Z = function void (GLuint queryHandle) { glEndPerfQueryINTEL_Z_Z_loader(queryHandle); };
private void glEndPerfQueryINTEL_Z_Z_loader (GLuint queryHandle) {
  *cast(void**)&glEndPerfQueryINTEL_Z_Z = glbindGetProcAddress(`glEndPerfQueryINTEL`);
  if (*cast(void**)&glEndPerfQueryINTEL_Z_Z is null) assert(0, `OpenGL function 'glEndPerfQueryINTEL' not found!`);
  glEndPerfQueryINTEL_Z_Z(queryHandle);
}
alias glEndQuery = glEndQuery_Z_Z;
__gshared glEndQuery_Z_Z = function void (GLenum target) { glEndQuery_Z_Z_loader(target); };
private void glEndQuery_Z_Z_loader (GLenum target) {
  *cast(void**)&glEndQuery_Z_Z = glbindGetProcAddress(`glEndQuery`);
  if (*cast(void**)&glEndQuery_Z_Z is null) assert(0, `OpenGL function 'glEndQuery' not found!`);
  glEndQuery_Z_Z(target);
}
alias glEndQueryARB = glEndQueryARB_Z_Z;
__gshared glEndQueryARB_Z_Z = function void (GLenum target) { glEndQueryARB_Z_Z_loader(target); };
private void glEndQueryARB_Z_Z_loader (GLenum target) {
  *cast(void**)&glEndQueryARB_Z_Z = glbindGetProcAddress(`glEndQueryARB`);
  if (*cast(void**)&glEndQueryARB_Z_Z is null) assert(0, `OpenGL function 'glEndQueryARB' not found!`);
  glEndQueryARB_Z_Z(target);
}
alias glEndQueryEXT = glEndQueryEXT_Z_Z;
__gshared glEndQueryEXT_Z_Z = function void (GLenum target) { glEndQueryEXT_Z_Z_loader(target); };
private void glEndQueryEXT_Z_Z_loader (GLenum target) {
  *cast(void**)&glEndQueryEXT_Z_Z = glbindGetProcAddress(`glEndQueryEXT`);
  if (*cast(void**)&glEndQueryEXT_Z_Z is null) assert(0, `OpenGL function 'glEndQueryEXT' not found!`);
  glEndQueryEXT_Z_Z(target);
}
alias glEndQueryIndexed = glEndQueryIndexed_Z_Z;
__gshared glEndQueryIndexed_Z_Z = function void (GLenum target, GLuint index) { glEndQueryIndexed_Z_Z_loader(target, index); };
private void glEndQueryIndexed_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glEndQueryIndexed_Z_Z = glbindGetProcAddress(`glEndQueryIndexed`);
  if (*cast(void**)&glEndQueryIndexed_Z_Z is null) assert(0, `OpenGL function 'glEndQueryIndexed' not found!`);
  glEndQueryIndexed_Z_Z(target, index);
}
alias glEndTilingQCOM = glEndTilingQCOM_Z_Z;
__gshared glEndTilingQCOM_Z_Z = function void (GLbitfield preserveMask) { glEndTilingQCOM_Z_Z_loader(preserveMask); };
private void glEndTilingQCOM_Z_Z_loader (GLbitfield preserveMask) {
  *cast(void**)&glEndTilingQCOM_Z_Z = glbindGetProcAddress(`glEndTilingQCOM`);
  if (*cast(void**)&glEndTilingQCOM_Z_Z is null) assert(0, `OpenGL function 'glEndTilingQCOM' not found!`);
  glEndTilingQCOM_Z_Z(preserveMask);
}
alias glEndTransformFeedback = glEndTransformFeedback_Z_Z;
__gshared glEndTransformFeedback_Z_Z = function void () { glEndTransformFeedback_Z_Z_loader(); };
private void glEndTransformFeedback_Z_Z_loader () {
  *cast(void**)&glEndTransformFeedback_Z_Z = glbindGetProcAddress(`glEndTransformFeedback`);
  if (*cast(void**)&glEndTransformFeedback_Z_Z is null) assert(0, `OpenGL function 'glEndTransformFeedback' not found!`);
  glEndTransformFeedback_Z_Z();
}
alias glEndTransformFeedbackEXT = glEndTransformFeedbackEXT_Z_Z;
__gshared glEndTransformFeedbackEXT_Z_Z = function void () { glEndTransformFeedbackEXT_Z_Z_loader(); };
private void glEndTransformFeedbackEXT_Z_Z_loader () {
  *cast(void**)&glEndTransformFeedbackEXT_Z_Z = glbindGetProcAddress(`glEndTransformFeedbackEXT`);
  if (*cast(void**)&glEndTransformFeedbackEXT_Z_Z is null) assert(0, `OpenGL function 'glEndTransformFeedbackEXT' not found!`);
  glEndTransformFeedbackEXT_Z_Z();
}
alias glEndTransformFeedbackNV = glEndTransformFeedbackNV_Z_Z;
__gshared glEndTransformFeedbackNV_Z_Z = function void () { glEndTransformFeedbackNV_Z_Z_loader(); };
private void glEndTransformFeedbackNV_Z_Z_loader () {
  *cast(void**)&glEndTransformFeedbackNV_Z_Z = glbindGetProcAddress(`glEndTransformFeedbackNV`);
  if (*cast(void**)&glEndTransformFeedbackNV_Z_Z is null) assert(0, `OpenGL function 'glEndTransformFeedbackNV' not found!`);
  glEndTransformFeedbackNV_Z_Z();
}
alias glEndVertexShaderEXT = glEndVertexShaderEXT_Z_Z;
__gshared glEndVertexShaderEXT_Z_Z = function void () { glEndVertexShaderEXT_Z_Z_loader(); };
private void glEndVertexShaderEXT_Z_Z_loader () {
  *cast(void**)&glEndVertexShaderEXT_Z_Z = glbindGetProcAddress(`glEndVertexShaderEXT`);
  if (*cast(void**)&glEndVertexShaderEXT_Z_Z is null) assert(0, `OpenGL function 'glEndVertexShaderEXT' not found!`);
  glEndVertexShaderEXT_Z_Z();
}
alias glEndVideoCaptureNV = glEndVideoCaptureNV_Z_Z;
__gshared glEndVideoCaptureNV_Z_Z = function void (GLuint video_capture_slot) { glEndVideoCaptureNV_Z_Z_loader(video_capture_slot); };
private void glEndVideoCaptureNV_Z_Z_loader (GLuint video_capture_slot) {
  *cast(void**)&glEndVideoCaptureNV_Z_Z = glbindGetProcAddress(`glEndVideoCaptureNV`);
  if (*cast(void**)&glEndVideoCaptureNV_Z_Z is null) assert(0, `OpenGL function 'glEndVideoCaptureNV' not found!`);
  glEndVideoCaptureNV_Z_Z(video_capture_slot);
}
alias glEvalCoord1d = glEvalCoord1d_Z_Z;
__gshared glEvalCoord1d_Z_Z = function void (GLdouble u) { glEvalCoord1d_Z_Z_loader(u); };
private void glEvalCoord1d_Z_Z_loader (GLdouble u) {
  *cast(void**)&glEvalCoord1d_Z_Z = glbindGetProcAddress(`glEvalCoord1d`);
  if (*cast(void**)&glEvalCoord1d_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord1d' not found!`);
  glEvalCoord1d_Z_Z(u);
}
alias glEvalCoord1dv = glEvalCoord1dv_Z_Z;
__gshared glEvalCoord1dv_Z_Z = function void (const(GLdouble)* u) { glEvalCoord1dv_Z_Z_loader(u); };
private void glEvalCoord1dv_Z_Z_loader (const(GLdouble)* u) {
  *cast(void**)&glEvalCoord1dv_Z_Z = glbindGetProcAddress(`glEvalCoord1dv`);
  if (*cast(void**)&glEvalCoord1dv_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord1dv' not found!`);
  glEvalCoord1dv_Z_Z(u);
}
alias glEvalCoord1f = glEvalCoord1f_Z_Z;
__gshared glEvalCoord1f_Z_Z = function void (GLfloat u) { glEvalCoord1f_Z_Z_loader(u); };
private void glEvalCoord1f_Z_Z_loader (GLfloat u) {
  *cast(void**)&glEvalCoord1f_Z_Z = glbindGetProcAddress(`glEvalCoord1f`);
  if (*cast(void**)&glEvalCoord1f_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord1f' not found!`);
  glEvalCoord1f_Z_Z(u);
}
alias glEvalCoord1fv = glEvalCoord1fv_Z_Z;
__gshared glEvalCoord1fv_Z_Z = function void (const(GLfloat)* u) { glEvalCoord1fv_Z_Z_loader(u); };
private void glEvalCoord1fv_Z_Z_loader (const(GLfloat)* u) {
  *cast(void**)&glEvalCoord1fv_Z_Z = glbindGetProcAddress(`glEvalCoord1fv`);
  if (*cast(void**)&glEvalCoord1fv_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord1fv' not found!`);
  glEvalCoord1fv_Z_Z(u);
}
alias glEvalCoord1xOES = glEvalCoord1xOES_Z_Z;
__gshared glEvalCoord1xOES_Z_Z = function void (GLfixed u) { glEvalCoord1xOES_Z_Z_loader(u); };
private void glEvalCoord1xOES_Z_Z_loader (GLfixed u) {
  *cast(void**)&glEvalCoord1xOES_Z_Z = glbindGetProcAddress(`glEvalCoord1xOES`);
  if (*cast(void**)&glEvalCoord1xOES_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord1xOES' not found!`);
  glEvalCoord1xOES_Z_Z(u);
}
alias glEvalCoord1xvOES = glEvalCoord1xvOES_Z_Z;
__gshared glEvalCoord1xvOES_Z_Z = function void (const(GLfixed)* coords) { glEvalCoord1xvOES_Z_Z_loader(coords); };
private void glEvalCoord1xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glEvalCoord1xvOES_Z_Z = glbindGetProcAddress(`glEvalCoord1xvOES`);
  if (*cast(void**)&glEvalCoord1xvOES_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord1xvOES' not found!`);
  glEvalCoord1xvOES_Z_Z(coords);
}
alias glEvalCoord2d = glEvalCoord2d_Z_Z;
__gshared glEvalCoord2d_Z_Z = function void (GLdouble u, GLdouble v) { glEvalCoord2d_Z_Z_loader(u, v); };
private void glEvalCoord2d_Z_Z_loader (GLdouble u, GLdouble v) {
  *cast(void**)&glEvalCoord2d_Z_Z = glbindGetProcAddress(`glEvalCoord2d`);
  if (*cast(void**)&glEvalCoord2d_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord2d' not found!`);
  glEvalCoord2d_Z_Z(u, v);
}
alias glEvalCoord2dv = glEvalCoord2dv_Z_Z;
__gshared glEvalCoord2dv_Z_Z = function void (const(GLdouble)* u) { glEvalCoord2dv_Z_Z_loader(u); };
private void glEvalCoord2dv_Z_Z_loader (const(GLdouble)* u) {
  *cast(void**)&glEvalCoord2dv_Z_Z = glbindGetProcAddress(`glEvalCoord2dv`);
  if (*cast(void**)&glEvalCoord2dv_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord2dv' not found!`);
  glEvalCoord2dv_Z_Z(u);
}
alias glEvalCoord2f = glEvalCoord2f_Z_Z;
__gshared glEvalCoord2f_Z_Z = function void (GLfloat u, GLfloat v) { glEvalCoord2f_Z_Z_loader(u, v); };
private void glEvalCoord2f_Z_Z_loader (GLfloat u, GLfloat v) {
  *cast(void**)&glEvalCoord2f_Z_Z = glbindGetProcAddress(`glEvalCoord2f`);
  if (*cast(void**)&glEvalCoord2f_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord2f' not found!`);
  glEvalCoord2f_Z_Z(u, v);
}
alias glEvalCoord2fv = glEvalCoord2fv_Z_Z;
__gshared glEvalCoord2fv_Z_Z = function void (const(GLfloat)* u) { glEvalCoord2fv_Z_Z_loader(u); };
private void glEvalCoord2fv_Z_Z_loader (const(GLfloat)* u) {
  *cast(void**)&glEvalCoord2fv_Z_Z = glbindGetProcAddress(`glEvalCoord2fv`);
  if (*cast(void**)&glEvalCoord2fv_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord2fv' not found!`);
  glEvalCoord2fv_Z_Z(u);
}
alias glEvalCoord2xOES = glEvalCoord2xOES_Z_Z;
__gshared glEvalCoord2xOES_Z_Z = function void (GLfixed u, GLfixed v) { glEvalCoord2xOES_Z_Z_loader(u, v); };
private void glEvalCoord2xOES_Z_Z_loader (GLfixed u, GLfixed v) {
  *cast(void**)&glEvalCoord2xOES_Z_Z = glbindGetProcAddress(`glEvalCoord2xOES`);
  if (*cast(void**)&glEvalCoord2xOES_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord2xOES' not found!`);
  glEvalCoord2xOES_Z_Z(u, v);
}
alias glEvalCoord2xvOES = glEvalCoord2xvOES_Z_Z;
__gshared glEvalCoord2xvOES_Z_Z = function void (const(GLfixed)* coords) { glEvalCoord2xvOES_Z_Z_loader(coords); };
private void glEvalCoord2xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glEvalCoord2xvOES_Z_Z = glbindGetProcAddress(`glEvalCoord2xvOES`);
  if (*cast(void**)&glEvalCoord2xvOES_Z_Z is null) assert(0, `OpenGL function 'glEvalCoord2xvOES' not found!`);
  glEvalCoord2xvOES_Z_Z(coords);
}
alias glEvalMapsNV = glEvalMapsNV_Z_Z;
__gshared glEvalMapsNV_Z_Z = function void (GLenum target, GLenum mode) { glEvalMapsNV_Z_Z_loader(target, mode); };
private void glEvalMapsNV_Z_Z_loader (GLenum target, GLenum mode) {
  *cast(void**)&glEvalMapsNV_Z_Z = glbindGetProcAddress(`glEvalMapsNV`);
  if (*cast(void**)&glEvalMapsNV_Z_Z is null) assert(0, `OpenGL function 'glEvalMapsNV' not found!`);
  glEvalMapsNV_Z_Z(target, mode);
}
alias glEvalMesh1 = glEvalMesh1_Z_Z;
__gshared glEvalMesh1_Z_Z = function void (GLenum mode, GLint i1, GLint i2) { glEvalMesh1_Z_Z_loader(mode, i1, i2); };
private void glEvalMesh1_Z_Z_loader (GLenum mode, GLint i1, GLint i2) {
  *cast(void**)&glEvalMesh1_Z_Z = glbindGetProcAddress(`glEvalMesh1`);
  if (*cast(void**)&glEvalMesh1_Z_Z is null) assert(0, `OpenGL function 'glEvalMesh1' not found!`);
  glEvalMesh1_Z_Z(mode, i1, i2);
}
alias glEvalMesh2 = glEvalMesh2_Z_Z;
__gshared glEvalMesh2_Z_Z = function void (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { glEvalMesh2_Z_Z_loader(mode, i1, i2, j1, j2); };
private void glEvalMesh2_Z_Z_loader (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
  *cast(void**)&glEvalMesh2_Z_Z = glbindGetProcAddress(`glEvalMesh2`);
  if (*cast(void**)&glEvalMesh2_Z_Z is null) assert(0, `OpenGL function 'glEvalMesh2' not found!`);
  glEvalMesh2_Z_Z(mode, i1, i2, j1, j2);
}
alias glEvalPoint1 = glEvalPoint1_Z_Z;
__gshared glEvalPoint1_Z_Z = function void (GLint i) { glEvalPoint1_Z_Z_loader(i); };
private void glEvalPoint1_Z_Z_loader (GLint i) {
  *cast(void**)&glEvalPoint1_Z_Z = glbindGetProcAddress(`glEvalPoint1`);
  if (*cast(void**)&glEvalPoint1_Z_Z is null) assert(0, `OpenGL function 'glEvalPoint1' not found!`);
  glEvalPoint1_Z_Z(i);
}
alias glEvalPoint2 = glEvalPoint2_Z_Z;
__gshared glEvalPoint2_Z_Z = function void (GLint i, GLint j) { glEvalPoint2_Z_Z_loader(i, j); };
private void glEvalPoint2_Z_Z_loader (GLint i, GLint j) {
  *cast(void**)&glEvalPoint2_Z_Z = glbindGetProcAddress(`glEvalPoint2`);
  if (*cast(void**)&glEvalPoint2_Z_Z is null) assert(0, `OpenGL function 'glEvalPoint2' not found!`);
  glEvalPoint2_Z_Z(i, j);
}
alias glEvaluateDepthValuesARB = glEvaluateDepthValuesARB_Z_Z;
__gshared glEvaluateDepthValuesARB_Z_Z = function void () { glEvaluateDepthValuesARB_Z_Z_loader(); };
private void glEvaluateDepthValuesARB_Z_Z_loader () {
  *cast(void**)&glEvaluateDepthValuesARB_Z_Z = glbindGetProcAddress(`glEvaluateDepthValuesARB`);
  if (*cast(void**)&glEvaluateDepthValuesARB_Z_Z is null) assert(0, `OpenGL function 'glEvaluateDepthValuesARB' not found!`);
  glEvaluateDepthValuesARB_Z_Z();
}
alias glExecuteProgramNV = glExecuteProgramNV_Z_Z;
__gshared glExecuteProgramNV_Z_Z = function void (GLenum target, GLuint id, const(GLfloat)* params) { glExecuteProgramNV_Z_Z_loader(target, id, params); };
private void glExecuteProgramNV_Z_Z_loader (GLenum target, GLuint id, const(GLfloat)* params) {
  *cast(void**)&glExecuteProgramNV_Z_Z = glbindGetProcAddress(`glExecuteProgramNV`);
  if (*cast(void**)&glExecuteProgramNV_Z_Z is null) assert(0, `OpenGL function 'glExecuteProgramNV' not found!`);
  glExecuteProgramNV_Z_Z(target, id, params);
}
alias glExtGetBufferPointervQCOM = glExtGetBufferPointervQCOM_Z_Z;
__gshared glExtGetBufferPointervQCOM_Z_Z = function void (GLenum target, void **params) { glExtGetBufferPointervQCOM_Z_Z_loader(target, params); };
private void glExtGetBufferPointervQCOM_Z_Z_loader (GLenum target, void **params) {
  *cast(void**)&glExtGetBufferPointervQCOM_Z_Z = glbindGetProcAddress(`glExtGetBufferPointervQCOM`);
  if (*cast(void**)&glExtGetBufferPointervQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetBufferPointervQCOM' not found!`);
  glExtGetBufferPointervQCOM_Z_Z(target, params);
}
alias glExtGetBuffersQCOM = glExtGetBuffersQCOM_Z_Z;
__gshared glExtGetBuffersQCOM_Z_Z = function void (GLuint *buffers, GLint maxBuffers, GLint *numBuffers) { glExtGetBuffersQCOM_Z_Z_loader(buffers, maxBuffers, numBuffers); };
private void glExtGetBuffersQCOM_Z_Z_loader (GLuint *buffers, GLint maxBuffers, GLint *numBuffers) {
  *cast(void**)&glExtGetBuffersQCOM_Z_Z = glbindGetProcAddress(`glExtGetBuffersQCOM`);
  if (*cast(void**)&glExtGetBuffersQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetBuffersQCOM' not found!`);
  glExtGetBuffersQCOM_Z_Z(buffers, maxBuffers, numBuffers);
}
alias glExtGetFramebuffersQCOM = glExtGetFramebuffersQCOM_Z_Z;
__gshared glExtGetFramebuffersQCOM_Z_Z = function void (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers) { glExtGetFramebuffersQCOM_Z_Z_loader(framebuffers, maxFramebuffers, numFramebuffers); };
private void glExtGetFramebuffersQCOM_Z_Z_loader (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers) {
  *cast(void**)&glExtGetFramebuffersQCOM_Z_Z = glbindGetProcAddress(`glExtGetFramebuffersQCOM`);
  if (*cast(void**)&glExtGetFramebuffersQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetFramebuffersQCOM' not found!`);
  glExtGetFramebuffersQCOM_Z_Z(framebuffers, maxFramebuffers, numFramebuffers);
}
alias glExtGetProgramBinarySourceQCOM = glExtGetProgramBinarySourceQCOM_Z_Z;
__gshared glExtGetProgramBinarySourceQCOM_Z_Z = function void (GLuint program, GLenum shadertype, GLchar *source, GLint *length) { glExtGetProgramBinarySourceQCOM_Z_Z_loader(program, shadertype, source, length); };
private void glExtGetProgramBinarySourceQCOM_Z_Z_loader (GLuint program, GLenum shadertype, GLchar *source, GLint *length) {
  *cast(void**)&glExtGetProgramBinarySourceQCOM_Z_Z = glbindGetProcAddress(`glExtGetProgramBinarySourceQCOM`);
  if (*cast(void**)&glExtGetProgramBinarySourceQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetProgramBinarySourceQCOM' not found!`);
  glExtGetProgramBinarySourceQCOM_Z_Z(program, shadertype, source, length);
}
alias glExtGetProgramsQCOM = glExtGetProgramsQCOM_Z_Z;
__gshared glExtGetProgramsQCOM_Z_Z = function void (GLuint *programs, GLint maxPrograms, GLint *numPrograms) { glExtGetProgramsQCOM_Z_Z_loader(programs, maxPrograms, numPrograms); };
private void glExtGetProgramsQCOM_Z_Z_loader (GLuint *programs, GLint maxPrograms, GLint *numPrograms) {
  *cast(void**)&glExtGetProgramsQCOM_Z_Z = glbindGetProcAddress(`glExtGetProgramsQCOM`);
  if (*cast(void**)&glExtGetProgramsQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetProgramsQCOM' not found!`);
  glExtGetProgramsQCOM_Z_Z(programs, maxPrograms, numPrograms);
}
alias glExtGetRenderbuffersQCOM = glExtGetRenderbuffersQCOM_Z_Z;
__gshared glExtGetRenderbuffersQCOM_Z_Z = function void (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers) { glExtGetRenderbuffersQCOM_Z_Z_loader(renderbuffers, maxRenderbuffers, numRenderbuffers); };
private void glExtGetRenderbuffersQCOM_Z_Z_loader (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers) {
  *cast(void**)&glExtGetRenderbuffersQCOM_Z_Z = glbindGetProcAddress(`glExtGetRenderbuffersQCOM`);
  if (*cast(void**)&glExtGetRenderbuffersQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetRenderbuffersQCOM' not found!`);
  glExtGetRenderbuffersQCOM_Z_Z(renderbuffers, maxRenderbuffers, numRenderbuffers);
}
alias glExtGetShadersQCOM = glExtGetShadersQCOM_Z_Z;
__gshared glExtGetShadersQCOM_Z_Z = function void (GLuint *shaders, GLint maxShaders, GLint *numShaders) { glExtGetShadersQCOM_Z_Z_loader(shaders, maxShaders, numShaders); };
private void glExtGetShadersQCOM_Z_Z_loader (GLuint *shaders, GLint maxShaders, GLint *numShaders) {
  *cast(void**)&glExtGetShadersQCOM_Z_Z = glbindGetProcAddress(`glExtGetShadersQCOM`);
  if (*cast(void**)&glExtGetShadersQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetShadersQCOM' not found!`);
  glExtGetShadersQCOM_Z_Z(shaders, maxShaders, numShaders);
}
alias glExtGetTexLevelParameterivQCOM = glExtGetTexLevelParameterivQCOM_Z_Z;
__gshared glExtGetTexLevelParameterivQCOM_Z_Z = function void (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params) { glExtGetTexLevelParameterivQCOM_Z_Z_loader(texture, face, level, pname, params); };
private void glExtGetTexLevelParameterivQCOM_Z_Z_loader (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params) {
  *cast(void**)&glExtGetTexLevelParameterivQCOM_Z_Z = glbindGetProcAddress(`glExtGetTexLevelParameterivQCOM`);
  if (*cast(void**)&glExtGetTexLevelParameterivQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetTexLevelParameterivQCOM' not found!`);
  glExtGetTexLevelParameterivQCOM_Z_Z(texture, face, level, pname, params);
}
alias glExtGetTexSubImageQCOM = glExtGetTexSubImageQCOM_Z_Z;
__gshared glExtGetTexSubImageQCOM_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels) { glExtGetTexSubImageQCOM_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels); };
private void glExtGetTexSubImageQCOM_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels) {
  *cast(void**)&glExtGetTexSubImageQCOM_Z_Z = glbindGetProcAddress(`glExtGetTexSubImageQCOM`);
  if (*cast(void**)&glExtGetTexSubImageQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetTexSubImageQCOM' not found!`);
  glExtGetTexSubImageQCOM_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}
alias glExtGetTexturesQCOM = glExtGetTexturesQCOM_Z_Z;
__gshared glExtGetTexturesQCOM_Z_Z = function void (GLuint *textures, GLint maxTextures, GLint *numTextures) { glExtGetTexturesQCOM_Z_Z_loader(textures, maxTextures, numTextures); };
private void glExtGetTexturesQCOM_Z_Z_loader (GLuint *textures, GLint maxTextures, GLint *numTextures) {
  *cast(void**)&glExtGetTexturesQCOM_Z_Z = glbindGetProcAddress(`glExtGetTexturesQCOM`);
  if (*cast(void**)&glExtGetTexturesQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtGetTexturesQCOM' not found!`);
  glExtGetTexturesQCOM_Z_Z(textures, maxTextures, numTextures);
}
alias glExtIsProgramBinaryQCOM = glExtIsProgramBinaryQCOM_Z_Z;
__gshared glExtIsProgramBinaryQCOM_Z_Z = function GLboolean (GLuint program) { return glExtIsProgramBinaryQCOM_Z_Z_loader(program); };
private GLboolean glExtIsProgramBinaryQCOM_Z_Z_loader (GLuint program) {
  *cast(void**)&glExtIsProgramBinaryQCOM_Z_Z = glbindGetProcAddress(`glExtIsProgramBinaryQCOM`);
  if (*cast(void**)&glExtIsProgramBinaryQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtIsProgramBinaryQCOM' not found!`);
  return glExtIsProgramBinaryQCOM_Z_Z(program);
}
alias glExtTexObjectStateOverrideiQCOM = glExtTexObjectStateOverrideiQCOM_Z_Z;
__gshared glExtTexObjectStateOverrideiQCOM_Z_Z = function void (GLenum target, GLenum pname, GLint param) { glExtTexObjectStateOverrideiQCOM_Z_Z_loader(target, pname, param); };
private void glExtTexObjectStateOverrideiQCOM_Z_Z_loader (GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glExtTexObjectStateOverrideiQCOM_Z_Z = glbindGetProcAddress(`glExtTexObjectStateOverrideiQCOM`);
  if (*cast(void**)&glExtTexObjectStateOverrideiQCOM_Z_Z is null) assert(0, `OpenGL function 'glExtTexObjectStateOverrideiQCOM' not found!`);
  glExtTexObjectStateOverrideiQCOM_Z_Z(target, pname, param);
}
alias glExtractComponentEXT = glExtractComponentEXT_Z_Z;
__gshared glExtractComponentEXT_Z_Z = function void (GLuint res, GLuint src, GLuint num) { glExtractComponentEXT_Z_Z_loader(res, src, num); };
private void glExtractComponentEXT_Z_Z_loader (GLuint res, GLuint src, GLuint num) {
  *cast(void**)&glExtractComponentEXT_Z_Z = glbindGetProcAddress(`glExtractComponentEXT`);
  if (*cast(void**)&glExtractComponentEXT_Z_Z is null) assert(0, `OpenGL function 'glExtractComponentEXT' not found!`);
  glExtractComponentEXT_Z_Z(res, src, num);
}
alias glFeedbackBuffer = glFeedbackBuffer_Z_Z;
__gshared glFeedbackBuffer_Z_Z = function void (GLsizei size, GLenum type, GLfloat *buffer) { glFeedbackBuffer_Z_Z_loader(size, type, buffer); };
private void glFeedbackBuffer_Z_Z_loader (GLsizei size, GLenum type, GLfloat *buffer) {
  *cast(void**)&glFeedbackBuffer_Z_Z = glbindGetProcAddress(`glFeedbackBuffer`);
  if (*cast(void**)&glFeedbackBuffer_Z_Z is null) assert(0, `OpenGL function 'glFeedbackBuffer' not found!`);
  glFeedbackBuffer_Z_Z(size, type, buffer);
}
alias glFeedbackBufferxOES = glFeedbackBufferxOES_Z_Z;
__gshared glFeedbackBufferxOES_Z_Z = function void (GLsizei n, GLenum type, const(GLfixed)* buffer) { glFeedbackBufferxOES_Z_Z_loader(n, type, buffer); };
private void glFeedbackBufferxOES_Z_Z_loader (GLsizei n, GLenum type, const(GLfixed)* buffer) {
  *cast(void**)&glFeedbackBufferxOES_Z_Z = glbindGetProcAddress(`glFeedbackBufferxOES`);
  if (*cast(void**)&glFeedbackBufferxOES_Z_Z is null) assert(0, `OpenGL function 'glFeedbackBufferxOES' not found!`);
  glFeedbackBufferxOES_Z_Z(n, type, buffer);
}
alias glFenceSync = glFenceSync_Z_Z;
__gshared glFenceSync_Z_Z = function GLsync (GLenum condition, GLbitfield flags) { return glFenceSync_Z_Z_loader(condition, flags); };
private GLsync glFenceSync_Z_Z_loader (GLenum condition, GLbitfield flags) {
  *cast(void**)&glFenceSync_Z_Z = glbindGetProcAddress(`glFenceSync`);
  if (*cast(void**)&glFenceSync_Z_Z is null) assert(0, `OpenGL function 'glFenceSync' not found!`);
  return glFenceSync_Z_Z(condition, flags);
}
alias glFenceSyncAPPLE = glFenceSyncAPPLE_Z_Z;
__gshared glFenceSyncAPPLE_Z_Z = function GLsync (GLenum condition, GLbitfield flags) { return glFenceSyncAPPLE_Z_Z_loader(condition, flags); };
private GLsync glFenceSyncAPPLE_Z_Z_loader (GLenum condition, GLbitfield flags) {
  *cast(void**)&glFenceSyncAPPLE_Z_Z = glbindGetProcAddress(`glFenceSyncAPPLE`);
  if (*cast(void**)&glFenceSyncAPPLE_Z_Z is null) assert(0, `OpenGL function 'glFenceSyncAPPLE' not found!`);
  return glFenceSyncAPPLE_Z_Z(condition, flags);
}
alias glFinalCombinerInputNV = glFinalCombinerInputNV_Z_Z;
__gshared glFinalCombinerInputNV_Z_Z = function void (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { glFinalCombinerInputNV_Z_Z_loader(variable, input, mapping, componentUsage); };
private void glFinalCombinerInputNV_Z_Z_loader (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  *cast(void**)&glFinalCombinerInputNV_Z_Z = glbindGetProcAddress(`glFinalCombinerInputNV`);
  if (*cast(void**)&glFinalCombinerInputNV_Z_Z is null) assert(0, `OpenGL function 'glFinalCombinerInputNV' not found!`);
  glFinalCombinerInputNV_Z_Z(variable, input, mapping, componentUsage);
}
alias glFinish = glFinish_Z_Z;
__gshared glFinish_Z_Z = function void () { glFinish_Z_Z_loader(); };
private void glFinish_Z_Z_loader () {
  *cast(void**)&glFinish_Z_Z = glbindGetProcAddress(`glFinish`);
  if (*cast(void**)&glFinish_Z_Z is null) assert(0, `OpenGL function 'glFinish' not found!`);
  glFinish_Z_Z();
}
alias glFinishAsyncSGIX = glFinishAsyncSGIX_Z_Z;
__gshared glFinishAsyncSGIX_Z_Z = function GLint (GLuint *markerp) { return glFinishAsyncSGIX_Z_Z_loader(markerp); };
private GLint glFinishAsyncSGIX_Z_Z_loader (GLuint *markerp) {
  *cast(void**)&glFinishAsyncSGIX_Z_Z = glbindGetProcAddress(`glFinishAsyncSGIX`);
  if (*cast(void**)&glFinishAsyncSGIX_Z_Z is null) assert(0, `OpenGL function 'glFinishAsyncSGIX' not found!`);
  return glFinishAsyncSGIX_Z_Z(markerp);
}
alias glFinishFenceAPPLE = glFinishFenceAPPLE_Z_Z;
__gshared glFinishFenceAPPLE_Z_Z = function void (GLuint fence) { glFinishFenceAPPLE_Z_Z_loader(fence); };
private void glFinishFenceAPPLE_Z_Z_loader (GLuint fence) {
  *cast(void**)&glFinishFenceAPPLE_Z_Z = glbindGetProcAddress(`glFinishFenceAPPLE`);
  if (*cast(void**)&glFinishFenceAPPLE_Z_Z is null) assert(0, `OpenGL function 'glFinishFenceAPPLE' not found!`);
  glFinishFenceAPPLE_Z_Z(fence);
}
alias glFinishFenceNV = glFinishFenceNV_Z_Z;
__gshared glFinishFenceNV_Z_Z = function void (GLuint fence) { glFinishFenceNV_Z_Z_loader(fence); };
private void glFinishFenceNV_Z_Z_loader (GLuint fence) {
  *cast(void**)&glFinishFenceNV_Z_Z = glbindGetProcAddress(`glFinishFenceNV`);
  if (*cast(void**)&glFinishFenceNV_Z_Z is null) assert(0, `OpenGL function 'glFinishFenceNV' not found!`);
  glFinishFenceNV_Z_Z(fence);
}
alias glFinishObjectAPPLE = glFinishObjectAPPLE_Z_Z;
__gshared glFinishObjectAPPLE_Z_Z = function void (GLenum object, GLint name) { glFinishObjectAPPLE_Z_Z_loader(object, name); };
private void glFinishObjectAPPLE_Z_Z_loader (GLenum object, GLint name) {
  *cast(void**)&glFinishObjectAPPLE_Z_Z = glbindGetProcAddress(`glFinishObjectAPPLE`);
  if (*cast(void**)&glFinishObjectAPPLE_Z_Z is null) assert(0, `OpenGL function 'glFinishObjectAPPLE' not found!`);
  glFinishObjectAPPLE_Z_Z(object, name);
}
alias glFinishTextureSUNX = glFinishTextureSUNX_Z_Z;
__gshared glFinishTextureSUNX_Z_Z = function void () { glFinishTextureSUNX_Z_Z_loader(); };
private void glFinishTextureSUNX_Z_Z_loader () {
  *cast(void**)&glFinishTextureSUNX_Z_Z = glbindGetProcAddress(`glFinishTextureSUNX`);
  if (*cast(void**)&glFinishTextureSUNX_Z_Z is null) assert(0, `OpenGL function 'glFinishTextureSUNX' not found!`);
  glFinishTextureSUNX_Z_Z();
}
alias glFlush = glFlush_Z_Z;
__gshared glFlush_Z_Z = function void () { glFlush_Z_Z_loader(); };
private void glFlush_Z_Z_loader () {
  *cast(void**)&glFlush_Z_Z = glbindGetProcAddress(`glFlush`);
  if (*cast(void**)&glFlush_Z_Z is null) assert(0, `OpenGL function 'glFlush' not found!`);
  glFlush_Z_Z();
}
alias glFlushMappedBufferRange = glFlushMappedBufferRange_Z_Z;
__gshared glFlushMappedBufferRange_Z_Z = function void (GLenum target, GLintptr offset, GLsizeiptr length) { glFlushMappedBufferRange_Z_Z_loader(target, offset, length); };
private void glFlushMappedBufferRange_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr length) {
  *cast(void**)&glFlushMappedBufferRange_Z_Z = glbindGetProcAddress(`glFlushMappedBufferRange`);
  if (*cast(void**)&glFlushMappedBufferRange_Z_Z is null) assert(0, `OpenGL function 'glFlushMappedBufferRange' not found!`);
  glFlushMappedBufferRange_Z_Z(target, offset, length);
}
alias glFlushMappedBufferRangeAPPLE = glFlushMappedBufferRangeAPPLE_Z_Z;
__gshared glFlushMappedBufferRangeAPPLE_Z_Z = function void (GLenum target, GLintptr offset, GLsizeiptr size) { glFlushMappedBufferRangeAPPLE_Z_Z_loader(target, offset, size); };
private void glFlushMappedBufferRangeAPPLE_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glFlushMappedBufferRangeAPPLE_Z_Z = glbindGetProcAddress(`glFlushMappedBufferRangeAPPLE`);
  if (*cast(void**)&glFlushMappedBufferRangeAPPLE_Z_Z is null) assert(0, `OpenGL function 'glFlushMappedBufferRangeAPPLE' not found!`);
  glFlushMappedBufferRangeAPPLE_Z_Z(target, offset, size);
}
alias glFlushMappedBufferRangeEXT = glFlushMappedBufferRangeEXT_Z_Z;
__gshared glFlushMappedBufferRangeEXT_Z_Z = function void (GLenum target, GLintptr offset, GLsizeiptr length) { glFlushMappedBufferRangeEXT_Z_Z_loader(target, offset, length); };
private void glFlushMappedBufferRangeEXT_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr length) {
  *cast(void**)&glFlushMappedBufferRangeEXT_Z_Z = glbindGetProcAddress(`glFlushMappedBufferRangeEXT`);
  if (*cast(void**)&glFlushMappedBufferRangeEXT_Z_Z is null) assert(0, `OpenGL function 'glFlushMappedBufferRangeEXT' not found!`);
  glFlushMappedBufferRangeEXT_Z_Z(target, offset, length);
}
alias glFlushMappedNamedBufferRange = glFlushMappedNamedBufferRange_Z_Z;
__gshared glFlushMappedNamedBufferRange_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr length) { glFlushMappedNamedBufferRange_Z_Z_loader(buffer, offset, length); };
private void glFlushMappedNamedBufferRange_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr length) {
  *cast(void**)&glFlushMappedNamedBufferRange_Z_Z = glbindGetProcAddress(`glFlushMappedNamedBufferRange`);
  if (*cast(void**)&glFlushMappedNamedBufferRange_Z_Z is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRange' not found!`);
  glFlushMappedNamedBufferRange_Z_Z(buffer, offset, length);
}
alias glFlushMappedNamedBufferRangeEXT = glFlushMappedNamedBufferRangeEXT_Z_Z;
__gshared glFlushMappedNamedBufferRangeEXT_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr length) { glFlushMappedNamedBufferRangeEXT_Z_Z_loader(buffer, offset, length); };
private void glFlushMappedNamedBufferRangeEXT_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr length) {
  *cast(void**)&glFlushMappedNamedBufferRangeEXT_Z_Z = glbindGetProcAddress(`glFlushMappedNamedBufferRangeEXT`);
  if (*cast(void**)&glFlushMappedNamedBufferRangeEXT_Z_Z is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRangeEXT' not found!`);
  glFlushMappedNamedBufferRangeEXT_Z_Z(buffer, offset, length);
}
alias glFlushPixelDataRangeNV = glFlushPixelDataRangeNV_Z_Z;
__gshared glFlushPixelDataRangeNV_Z_Z = function void (GLenum target) { glFlushPixelDataRangeNV_Z_Z_loader(target); };
private void glFlushPixelDataRangeNV_Z_Z_loader (GLenum target) {
  *cast(void**)&glFlushPixelDataRangeNV_Z_Z = glbindGetProcAddress(`glFlushPixelDataRangeNV`);
  if (*cast(void**)&glFlushPixelDataRangeNV_Z_Z is null) assert(0, `OpenGL function 'glFlushPixelDataRangeNV' not found!`);
  glFlushPixelDataRangeNV_Z_Z(target);
}
alias glFlushRasterSGIX = glFlushRasterSGIX_Z_Z;
__gshared glFlushRasterSGIX_Z_Z = function void () { glFlushRasterSGIX_Z_Z_loader(); };
private void glFlushRasterSGIX_Z_Z_loader () {
  *cast(void**)&glFlushRasterSGIX_Z_Z = glbindGetProcAddress(`glFlushRasterSGIX`);
  if (*cast(void**)&glFlushRasterSGIX_Z_Z is null) assert(0, `OpenGL function 'glFlushRasterSGIX' not found!`);
  glFlushRasterSGIX_Z_Z();
}
alias glFlushStaticDataIBM = glFlushStaticDataIBM_Z_Z;
__gshared glFlushStaticDataIBM_Z_Z = function void (GLenum target) { glFlushStaticDataIBM_Z_Z_loader(target); };
private void glFlushStaticDataIBM_Z_Z_loader (GLenum target) {
  *cast(void**)&glFlushStaticDataIBM_Z_Z = glbindGetProcAddress(`glFlushStaticDataIBM`);
  if (*cast(void**)&glFlushStaticDataIBM_Z_Z is null) assert(0, `OpenGL function 'glFlushStaticDataIBM' not found!`);
  glFlushStaticDataIBM_Z_Z(target);
}
alias glFlushVertexArrayRangeAPPLE = glFlushVertexArrayRangeAPPLE_Z_Z;
__gshared glFlushVertexArrayRangeAPPLE_Z_Z = function void (GLsizei length, void *pointer) { glFlushVertexArrayRangeAPPLE_Z_Z_loader(length, pointer); };
private void glFlushVertexArrayRangeAPPLE_Z_Z_loader (GLsizei length, void *pointer) {
  *cast(void**)&glFlushVertexArrayRangeAPPLE_Z_Z = glbindGetProcAddress(`glFlushVertexArrayRangeAPPLE`);
  if (*cast(void**)&glFlushVertexArrayRangeAPPLE_Z_Z is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeAPPLE' not found!`);
  glFlushVertexArrayRangeAPPLE_Z_Z(length, pointer);
}
alias glFlushVertexArrayRangeNV = glFlushVertexArrayRangeNV_Z_Z;
__gshared glFlushVertexArrayRangeNV_Z_Z = function void () { glFlushVertexArrayRangeNV_Z_Z_loader(); };
private void glFlushVertexArrayRangeNV_Z_Z_loader () {
  *cast(void**)&glFlushVertexArrayRangeNV_Z_Z = glbindGetProcAddress(`glFlushVertexArrayRangeNV`);
  if (*cast(void**)&glFlushVertexArrayRangeNV_Z_Z is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeNV' not found!`);
  glFlushVertexArrayRangeNV_Z_Z();
}
alias glFogCoordFormatNV = glFogCoordFormatNV_Z_Z;
__gshared glFogCoordFormatNV_Z_Z = function void (GLenum type, GLsizei stride) { glFogCoordFormatNV_Z_Z_loader(type, stride); };
private void glFogCoordFormatNV_Z_Z_loader (GLenum type, GLsizei stride) {
  *cast(void**)&glFogCoordFormatNV_Z_Z = glbindGetProcAddress(`glFogCoordFormatNV`);
  if (*cast(void**)&glFogCoordFormatNV_Z_Z is null) assert(0, `OpenGL function 'glFogCoordFormatNV' not found!`);
  glFogCoordFormatNV_Z_Z(type, stride);
}
alias glFogCoordPointer = glFogCoordPointer_Z_Z;
__gshared glFogCoordPointer_Z_Z = function void (GLenum type, GLsizei stride, const(void)* pointer) { glFogCoordPointer_Z_Z_loader(type, stride, pointer); };
private void glFogCoordPointer_Z_Z_loader (GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glFogCoordPointer_Z_Z = glbindGetProcAddress(`glFogCoordPointer`);
  if (*cast(void**)&glFogCoordPointer_Z_Z is null) assert(0, `OpenGL function 'glFogCoordPointer' not found!`);
  glFogCoordPointer_Z_Z(type, stride, pointer);
}
alias glFogCoordPointerEXT = glFogCoordPointerEXT_Z_Z;
__gshared glFogCoordPointerEXT_Z_Z = function void (GLenum type, GLsizei stride, const(void)* pointer) { glFogCoordPointerEXT_Z_Z_loader(type, stride, pointer); };
private void glFogCoordPointerEXT_Z_Z_loader (GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glFogCoordPointerEXT_Z_Z = glbindGetProcAddress(`glFogCoordPointerEXT`);
  if (*cast(void**)&glFogCoordPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glFogCoordPointerEXT' not found!`);
  glFogCoordPointerEXT_Z_Z(type, stride, pointer);
}
alias glFogCoordPointerListIBM = glFogCoordPointerListIBM_Z_Z;
__gshared glFogCoordPointerListIBM_Z_Z = function void (GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) { glFogCoordPointerListIBM_Z_Z_loader(type, stride, pointer, ptrstride); };
private void glFogCoordPointerListIBM_Z_Z_loader (GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) {
  *cast(void**)&glFogCoordPointerListIBM_Z_Z = glbindGetProcAddress(`glFogCoordPointerListIBM`);
  if (*cast(void**)&glFogCoordPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glFogCoordPointerListIBM' not found!`);
  glFogCoordPointerListIBM_Z_Z(type, stride, pointer, ptrstride);
}
alias glFogCoordd = glFogCoordd_Z_Z;
__gshared glFogCoordd_Z_Z = function void (GLdouble coord) { glFogCoordd_Z_Z_loader(coord); };
private void glFogCoordd_Z_Z_loader (GLdouble coord) {
  *cast(void**)&glFogCoordd_Z_Z = glbindGetProcAddress(`glFogCoordd`);
  if (*cast(void**)&glFogCoordd_Z_Z is null) assert(0, `OpenGL function 'glFogCoordd' not found!`);
  glFogCoordd_Z_Z(coord);
}
alias glFogCoorddEXT = glFogCoorddEXT_Z_Z;
__gshared glFogCoorddEXT_Z_Z = function void (GLdouble coord) { glFogCoorddEXT_Z_Z_loader(coord); };
private void glFogCoorddEXT_Z_Z_loader (GLdouble coord) {
  *cast(void**)&glFogCoorddEXT_Z_Z = glbindGetProcAddress(`glFogCoorddEXT`);
  if (*cast(void**)&glFogCoorddEXT_Z_Z is null) assert(0, `OpenGL function 'glFogCoorddEXT' not found!`);
  glFogCoorddEXT_Z_Z(coord);
}
alias glFogCoorddv = glFogCoorddv_Z_Z;
__gshared glFogCoorddv_Z_Z = function void (const(GLdouble)* coord) { glFogCoorddv_Z_Z_loader(coord); };
private void glFogCoorddv_Z_Z_loader (const(GLdouble)* coord) {
  *cast(void**)&glFogCoorddv_Z_Z = glbindGetProcAddress(`glFogCoorddv`);
  if (*cast(void**)&glFogCoorddv_Z_Z is null) assert(0, `OpenGL function 'glFogCoorddv' not found!`);
  glFogCoorddv_Z_Z(coord);
}
alias glFogCoorddvEXT = glFogCoorddvEXT_Z_Z;
__gshared glFogCoorddvEXT_Z_Z = function void (const(GLdouble)* coord) { glFogCoorddvEXT_Z_Z_loader(coord); };
private void glFogCoorddvEXT_Z_Z_loader (const(GLdouble)* coord) {
  *cast(void**)&glFogCoorddvEXT_Z_Z = glbindGetProcAddress(`glFogCoorddvEXT`);
  if (*cast(void**)&glFogCoorddvEXT_Z_Z is null) assert(0, `OpenGL function 'glFogCoorddvEXT' not found!`);
  glFogCoorddvEXT_Z_Z(coord);
}
alias glFogCoordf = glFogCoordf_Z_Z;
__gshared glFogCoordf_Z_Z = function void (GLfloat coord) { glFogCoordf_Z_Z_loader(coord); };
private void glFogCoordf_Z_Z_loader (GLfloat coord) {
  *cast(void**)&glFogCoordf_Z_Z = glbindGetProcAddress(`glFogCoordf`);
  if (*cast(void**)&glFogCoordf_Z_Z is null) assert(0, `OpenGL function 'glFogCoordf' not found!`);
  glFogCoordf_Z_Z(coord);
}
alias glFogCoordfEXT = glFogCoordfEXT_Z_Z;
__gshared glFogCoordfEXT_Z_Z = function void (GLfloat coord) { glFogCoordfEXT_Z_Z_loader(coord); };
private void glFogCoordfEXT_Z_Z_loader (GLfloat coord) {
  *cast(void**)&glFogCoordfEXT_Z_Z = glbindGetProcAddress(`glFogCoordfEXT`);
  if (*cast(void**)&glFogCoordfEXT_Z_Z is null) assert(0, `OpenGL function 'glFogCoordfEXT' not found!`);
  glFogCoordfEXT_Z_Z(coord);
}
alias glFogCoordfv = glFogCoordfv_Z_Z;
__gshared glFogCoordfv_Z_Z = function void (const(GLfloat)* coord) { glFogCoordfv_Z_Z_loader(coord); };
private void glFogCoordfv_Z_Z_loader (const(GLfloat)* coord) {
  *cast(void**)&glFogCoordfv_Z_Z = glbindGetProcAddress(`glFogCoordfv`);
  if (*cast(void**)&glFogCoordfv_Z_Z is null) assert(0, `OpenGL function 'glFogCoordfv' not found!`);
  glFogCoordfv_Z_Z(coord);
}
alias glFogCoordfvEXT = glFogCoordfvEXT_Z_Z;
__gshared glFogCoordfvEXT_Z_Z = function void (const(GLfloat)* coord) { glFogCoordfvEXT_Z_Z_loader(coord); };
private void glFogCoordfvEXT_Z_Z_loader (const(GLfloat)* coord) {
  *cast(void**)&glFogCoordfvEXT_Z_Z = glbindGetProcAddress(`glFogCoordfvEXT`);
  if (*cast(void**)&glFogCoordfvEXT_Z_Z is null) assert(0, `OpenGL function 'glFogCoordfvEXT' not found!`);
  glFogCoordfvEXT_Z_Z(coord);
}
alias glFogCoordhNV = glFogCoordhNV_Z_Z;
__gshared glFogCoordhNV_Z_Z = function void (GLhalfNV fog) { glFogCoordhNV_Z_Z_loader(fog); };
private void glFogCoordhNV_Z_Z_loader (GLhalfNV fog) {
  *cast(void**)&glFogCoordhNV_Z_Z = glbindGetProcAddress(`glFogCoordhNV`);
  if (*cast(void**)&glFogCoordhNV_Z_Z is null) assert(0, `OpenGL function 'glFogCoordhNV' not found!`);
  glFogCoordhNV_Z_Z(fog);
}
alias glFogCoordhvNV = glFogCoordhvNV_Z_Z;
__gshared glFogCoordhvNV_Z_Z = function void (const(GLhalfNV)* fog) { glFogCoordhvNV_Z_Z_loader(fog); };
private void glFogCoordhvNV_Z_Z_loader (const(GLhalfNV)* fog) {
  *cast(void**)&glFogCoordhvNV_Z_Z = glbindGetProcAddress(`glFogCoordhvNV`);
  if (*cast(void**)&glFogCoordhvNV_Z_Z is null) assert(0, `OpenGL function 'glFogCoordhvNV' not found!`);
  glFogCoordhvNV_Z_Z(fog);
}
alias glFogFuncSGIS = glFogFuncSGIS_Z_Z;
__gshared glFogFuncSGIS_Z_Z = function void (GLsizei n, const(GLfloat)* points) { glFogFuncSGIS_Z_Z_loader(n, points); };
private void glFogFuncSGIS_Z_Z_loader (GLsizei n, const(GLfloat)* points) {
  *cast(void**)&glFogFuncSGIS_Z_Z = glbindGetProcAddress(`glFogFuncSGIS`);
  if (*cast(void**)&glFogFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glFogFuncSGIS' not found!`);
  glFogFuncSGIS_Z_Z(n, points);
}
alias glFogf = glFogf_Z_Z;
__gshared glFogf_Z_Z = function void (GLenum pname, GLfloat param) { glFogf_Z_Z_loader(pname, param); };
private void glFogf_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glFogf_Z_Z = glbindGetProcAddress(`glFogf`);
  if (*cast(void**)&glFogf_Z_Z is null) assert(0, `OpenGL function 'glFogf' not found!`);
  glFogf_Z_Z(pname, param);
}
alias glFogfv = glFogfv_Z_Z;
__gshared glFogfv_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glFogfv_Z_Z_loader(pname, params); };
private void glFogfv_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glFogfv_Z_Z = glbindGetProcAddress(`glFogfv`);
  if (*cast(void**)&glFogfv_Z_Z is null) assert(0, `OpenGL function 'glFogfv' not found!`);
  glFogfv_Z_Z(pname, params);
}
alias glFogi = glFogi_Z_Z;
__gshared glFogi_Z_Z = function void (GLenum pname, GLint param) { glFogi_Z_Z_loader(pname, param); };
private void glFogi_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glFogi_Z_Z = glbindGetProcAddress(`glFogi`);
  if (*cast(void**)&glFogi_Z_Z is null) assert(0, `OpenGL function 'glFogi' not found!`);
  glFogi_Z_Z(pname, param);
}
alias glFogiv = glFogiv_Z_Z;
__gshared glFogiv_Z_Z = function void (GLenum pname, const(GLint)* params) { glFogiv_Z_Z_loader(pname, params); };
private void glFogiv_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glFogiv_Z_Z = glbindGetProcAddress(`glFogiv`);
  if (*cast(void**)&glFogiv_Z_Z is null) assert(0, `OpenGL function 'glFogiv' not found!`);
  glFogiv_Z_Z(pname, params);
}
alias glFogx = glFogx_Z_Z;
__gshared glFogx_Z_Z = function void (GLenum pname, GLfixed param) { glFogx_Z_Z_loader(pname, param); };
private void glFogx_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glFogx_Z_Z = glbindGetProcAddress(`glFogx`);
  if (*cast(void**)&glFogx_Z_Z is null) assert(0, `OpenGL function 'glFogx' not found!`);
  glFogx_Z_Z(pname, param);
}
alias glFogxOES = glFogxOES_Z_Z;
__gshared glFogxOES_Z_Z = function void (GLenum pname, GLfixed param) { glFogxOES_Z_Z_loader(pname, param); };
private void glFogxOES_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glFogxOES_Z_Z = glbindGetProcAddress(`glFogxOES`);
  if (*cast(void**)&glFogxOES_Z_Z is null) assert(0, `OpenGL function 'glFogxOES' not found!`);
  glFogxOES_Z_Z(pname, param);
}
alias glFogxv = glFogxv_Z_Z;
__gshared glFogxv_Z_Z = function void (GLenum pname, const(GLfixed)* param) { glFogxv_Z_Z_loader(pname, param); };
private void glFogxv_Z_Z_loader (GLenum pname, const(GLfixed)* param) {
  *cast(void**)&glFogxv_Z_Z = glbindGetProcAddress(`glFogxv`);
  if (*cast(void**)&glFogxv_Z_Z is null) assert(0, `OpenGL function 'glFogxv' not found!`);
  glFogxv_Z_Z(pname, param);
}
alias glFogxvOES = glFogxvOES_Z_Z;
__gshared glFogxvOES_Z_Z = function void (GLenum pname, const(GLfixed)* param) { glFogxvOES_Z_Z_loader(pname, param); };
private void glFogxvOES_Z_Z_loader (GLenum pname, const(GLfixed)* param) {
  *cast(void**)&glFogxvOES_Z_Z = glbindGetProcAddress(`glFogxvOES`);
  if (*cast(void**)&glFogxvOES_Z_Z is null) assert(0, `OpenGL function 'glFogxvOES' not found!`);
  glFogxvOES_Z_Z(pname, param);
}
alias glFragmentColorMaterialSGIX = glFragmentColorMaterialSGIX_Z_Z;
__gshared glFragmentColorMaterialSGIX_Z_Z = function void (GLenum face, GLenum mode) { glFragmentColorMaterialSGIX_Z_Z_loader(face, mode); };
private void glFragmentColorMaterialSGIX_Z_Z_loader (GLenum face, GLenum mode) {
  *cast(void**)&glFragmentColorMaterialSGIX_Z_Z = glbindGetProcAddress(`glFragmentColorMaterialSGIX`);
  if (*cast(void**)&glFragmentColorMaterialSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentColorMaterialSGIX' not found!`);
  glFragmentColorMaterialSGIX_Z_Z(face, mode);
}
alias glFragmentCoverageColorNV = glFragmentCoverageColorNV_Z_Z;
__gshared glFragmentCoverageColorNV_Z_Z = function void (GLuint color) { glFragmentCoverageColorNV_Z_Z_loader(color); };
private void glFragmentCoverageColorNV_Z_Z_loader (GLuint color) {
  *cast(void**)&glFragmentCoverageColorNV_Z_Z = glbindGetProcAddress(`glFragmentCoverageColorNV`);
  if (*cast(void**)&glFragmentCoverageColorNV_Z_Z is null) assert(0, `OpenGL function 'glFragmentCoverageColorNV' not found!`);
  glFragmentCoverageColorNV_Z_Z(color);
}
alias glFragmentLightModelfSGIX = glFragmentLightModelfSGIX_Z_Z;
__gshared glFragmentLightModelfSGIX_Z_Z = function void (GLenum pname, GLfloat param) { glFragmentLightModelfSGIX_Z_Z_loader(pname, param); };
private void glFragmentLightModelfSGIX_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glFragmentLightModelfSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightModelfSGIX`);
  if (*cast(void**)&glFragmentLightModelfSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightModelfSGIX' not found!`);
  glFragmentLightModelfSGIX_Z_Z(pname, param);
}
alias glFragmentLightModelfvSGIX = glFragmentLightModelfvSGIX_Z_Z;
__gshared glFragmentLightModelfvSGIX_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glFragmentLightModelfvSGIX_Z_Z_loader(pname, params); };
private void glFragmentLightModelfvSGIX_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glFragmentLightModelfvSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightModelfvSGIX`);
  if (*cast(void**)&glFragmentLightModelfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightModelfvSGIX' not found!`);
  glFragmentLightModelfvSGIX_Z_Z(pname, params);
}
alias glFragmentLightModeliSGIX = glFragmentLightModeliSGIX_Z_Z;
__gshared glFragmentLightModeliSGIX_Z_Z = function void (GLenum pname, GLint param) { glFragmentLightModeliSGIX_Z_Z_loader(pname, param); };
private void glFragmentLightModeliSGIX_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glFragmentLightModeliSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightModeliSGIX`);
  if (*cast(void**)&glFragmentLightModeliSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightModeliSGIX' not found!`);
  glFragmentLightModeliSGIX_Z_Z(pname, param);
}
alias glFragmentLightModelivSGIX = glFragmentLightModelivSGIX_Z_Z;
__gshared glFragmentLightModelivSGIX_Z_Z = function void (GLenum pname, const(GLint)* params) { glFragmentLightModelivSGIX_Z_Z_loader(pname, params); };
private void glFragmentLightModelivSGIX_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glFragmentLightModelivSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightModelivSGIX`);
  if (*cast(void**)&glFragmentLightModelivSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightModelivSGIX' not found!`);
  glFragmentLightModelivSGIX_Z_Z(pname, params);
}
alias glFragmentLightfSGIX = glFragmentLightfSGIX_Z_Z;
__gshared glFragmentLightfSGIX_Z_Z = function void (GLenum light, GLenum pname, GLfloat param) { glFragmentLightfSGIX_Z_Z_loader(light, pname, param); };
private void glFragmentLightfSGIX_Z_Z_loader (GLenum light, GLenum pname, GLfloat param) {
  *cast(void**)&glFragmentLightfSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightfSGIX`);
  if (*cast(void**)&glFragmentLightfSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightfSGIX' not found!`);
  glFragmentLightfSGIX_Z_Z(light, pname, param);
}
alias glFragmentLightfvSGIX = glFragmentLightfvSGIX_Z_Z;
__gshared glFragmentLightfvSGIX_Z_Z = function void (GLenum light, GLenum pname, const(GLfloat)* params) { glFragmentLightfvSGIX_Z_Z_loader(light, pname, params); };
private void glFragmentLightfvSGIX_Z_Z_loader (GLenum light, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glFragmentLightfvSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightfvSGIX`);
  if (*cast(void**)&glFragmentLightfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightfvSGIX' not found!`);
  glFragmentLightfvSGIX_Z_Z(light, pname, params);
}
alias glFragmentLightiSGIX = glFragmentLightiSGIX_Z_Z;
__gshared glFragmentLightiSGIX_Z_Z = function void (GLenum light, GLenum pname, GLint param) { glFragmentLightiSGIX_Z_Z_loader(light, pname, param); };
private void glFragmentLightiSGIX_Z_Z_loader (GLenum light, GLenum pname, GLint param) {
  *cast(void**)&glFragmentLightiSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightiSGIX`);
  if (*cast(void**)&glFragmentLightiSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightiSGIX' not found!`);
  glFragmentLightiSGIX_Z_Z(light, pname, param);
}
alias glFragmentLightivSGIX = glFragmentLightivSGIX_Z_Z;
__gshared glFragmentLightivSGIX_Z_Z = function void (GLenum light, GLenum pname, const(GLint)* params) { glFragmentLightivSGIX_Z_Z_loader(light, pname, params); };
private void glFragmentLightivSGIX_Z_Z_loader (GLenum light, GLenum pname, const(GLint)* params) {
  *cast(void**)&glFragmentLightivSGIX_Z_Z = glbindGetProcAddress(`glFragmentLightivSGIX`);
  if (*cast(void**)&glFragmentLightivSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentLightivSGIX' not found!`);
  glFragmentLightivSGIX_Z_Z(light, pname, params);
}
alias glFragmentMaterialfSGIX = glFragmentMaterialfSGIX_Z_Z;
__gshared glFragmentMaterialfSGIX_Z_Z = function void (GLenum face, GLenum pname, GLfloat param) { glFragmentMaterialfSGIX_Z_Z_loader(face, pname, param); };
private void glFragmentMaterialfSGIX_Z_Z_loader (GLenum face, GLenum pname, GLfloat param) {
  *cast(void**)&glFragmentMaterialfSGIX_Z_Z = glbindGetProcAddress(`glFragmentMaterialfSGIX`);
  if (*cast(void**)&glFragmentMaterialfSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentMaterialfSGIX' not found!`);
  glFragmentMaterialfSGIX_Z_Z(face, pname, param);
}
alias glFragmentMaterialfvSGIX = glFragmentMaterialfvSGIX_Z_Z;
__gshared glFragmentMaterialfvSGIX_Z_Z = function void (GLenum face, GLenum pname, const(GLfloat)* params) { glFragmentMaterialfvSGIX_Z_Z_loader(face, pname, params); };
private void glFragmentMaterialfvSGIX_Z_Z_loader (GLenum face, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glFragmentMaterialfvSGIX_Z_Z = glbindGetProcAddress(`glFragmentMaterialfvSGIX`);
  if (*cast(void**)&glFragmentMaterialfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentMaterialfvSGIX' not found!`);
  glFragmentMaterialfvSGIX_Z_Z(face, pname, params);
}
alias glFragmentMaterialiSGIX = glFragmentMaterialiSGIX_Z_Z;
__gshared glFragmentMaterialiSGIX_Z_Z = function void (GLenum face, GLenum pname, GLint param) { glFragmentMaterialiSGIX_Z_Z_loader(face, pname, param); };
private void glFragmentMaterialiSGIX_Z_Z_loader (GLenum face, GLenum pname, GLint param) {
  *cast(void**)&glFragmentMaterialiSGIX_Z_Z = glbindGetProcAddress(`glFragmentMaterialiSGIX`);
  if (*cast(void**)&glFragmentMaterialiSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentMaterialiSGIX' not found!`);
  glFragmentMaterialiSGIX_Z_Z(face, pname, param);
}
alias glFragmentMaterialivSGIX = glFragmentMaterialivSGIX_Z_Z;
__gshared glFragmentMaterialivSGIX_Z_Z = function void (GLenum face, GLenum pname, const(GLint)* params) { glFragmentMaterialivSGIX_Z_Z_loader(face, pname, params); };
private void glFragmentMaterialivSGIX_Z_Z_loader (GLenum face, GLenum pname, const(GLint)* params) {
  *cast(void**)&glFragmentMaterialivSGIX_Z_Z = glbindGetProcAddress(`glFragmentMaterialivSGIX`);
  if (*cast(void**)&glFragmentMaterialivSGIX_Z_Z is null) assert(0, `OpenGL function 'glFragmentMaterialivSGIX' not found!`);
  glFragmentMaterialivSGIX_Z_Z(face, pname, params);
}
alias glFrameTerminatorGREMEDY = glFrameTerminatorGREMEDY_Z_Z;
__gshared glFrameTerminatorGREMEDY_Z_Z = function void () { glFrameTerminatorGREMEDY_Z_Z_loader(); };
private void glFrameTerminatorGREMEDY_Z_Z_loader () {
  *cast(void**)&glFrameTerminatorGREMEDY_Z_Z = glbindGetProcAddress(`glFrameTerminatorGREMEDY`);
  if (*cast(void**)&glFrameTerminatorGREMEDY_Z_Z is null) assert(0, `OpenGL function 'glFrameTerminatorGREMEDY' not found!`);
  glFrameTerminatorGREMEDY_Z_Z();
}
alias glFrameZoomSGIX = glFrameZoomSGIX_Z_Z;
__gshared glFrameZoomSGIX_Z_Z = function void (GLint factor) { glFrameZoomSGIX_Z_Z_loader(factor); };
private void glFrameZoomSGIX_Z_Z_loader (GLint factor) {
  *cast(void**)&glFrameZoomSGIX_Z_Z = glbindGetProcAddress(`glFrameZoomSGIX`);
  if (*cast(void**)&glFrameZoomSGIX_Z_Z is null) assert(0, `OpenGL function 'glFrameZoomSGIX' not found!`);
  glFrameZoomSGIX_Z_Z(factor);
}
alias glFramebufferDrawBufferEXT = glFramebufferDrawBufferEXT_Z_Z;
__gshared glFramebufferDrawBufferEXT_Z_Z = function void (GLuint framebuffer, GLenum mode) { glFramebufferDrawBufferEXT_Z_Z_loader(framebuffer, mode); };
private void glFramebufferDrawBufferEXT_Z_Z_loader (GLuint framebuffer, GLenum mode) {
  *cast(void**)&glFramebufferDrawBufferEXT_Z_Z = glbindGetProcAddress(`glFramebufferDrawBufferEXT`);
  if (*cast(void**)&glFramebufferDrawBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferDrawBufferEXT' not found!`);
  glFramebufferDrawBufferEXT_Z_Z(framebuffer, mode);
}
alias glFramebufferDrawBuffersEXT = glFramebufferDrawBuffersEXT_Z_Z;
__gshared glFramebufferDrawBuffersEXT_Z_Z = function void (GLuint framebuffer, GLsizei n, const(GLenum)* bufs) { glFramebufferDrawBuffersEXT_Z_Z_loader(framebuffer, n, bufs); };
private void glFramebufferDrawBuffersEXT_Z_Z_loader (GLuint framebuffer, GLsizei n, const(GLenum)* bufs) {
  *cast(void**)&glFramebufferDrawBuffersEXT_Z_Z = glbindGetProcAddress(`glFramebufferDrawBuffersEXT`);
  if (*cast(void**)&glFramebufferDrawBuffersEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferDrawBuffersEXT' not found!`);
  glFramebufferDrawBuffersEXT_Z_Z(framebuffer, n, bufs);
}
alias glFramebufferFetchBarrierQCOM = glFramebufferFetchBarrierQCOM_Z_Z;
__gshared glFramebufferFetchBarrierQCOM_Z_Z = function void () { glFramebufferFetchBarrierQCOM_Z_Z_loader(); };
private void glFramebufferFetchBarrierQCOM_Z_Z_loader () {
  *cast(void**)&glFramebufferFetchBarrierQCOM_Z_Z = glbindGetProcAddress(`glFramebufferFetchBarrierQCOM`);
  if (*cast(void**)&glFramebufferFetchBarrierQCOM_Z_Z is null) assert(0, `OpenGL function 'glFramebufferFetchBarrierQCOM' not found!`);
  glFramebufferFetchBarrierQCOM_Z_Z();
}
alias glFramebufferFoveationConfigQCOM = glFramebufferFoveationConfigQCOM_Z_Z;
__gshared glFramebufferFoveationConfigQCOM_Z_Z = function void (GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures) { glFramebufferFoveationConfigQCOM_Z_Z_loader(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures); };
private void glFramebufferFoveationConfigQCOM_Z_Z_loader (GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures) {
  *cast(void**)&glFramebufferFoveationConfigQCOM_Z_Z = glbindGetProcAddress(`glFramebufferFoveationConfigQCOM`);
  if (*cast(void**)&glFramebufferFoveationConfigQCOM_Z_Z is null) assert(0, `OpenGL function 'glFramebufferFoveationConfigQCOM' not found!`);
  glFramebufferFoveationConfigQCOM_Z_Z(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
}
alias glFramebufferFoveationParametersQCOM = glFramebufferFoveationParametersQCOM_Z_Z;
__gshared glFramebufferFoveationParametersQCOM_Z_Z = function void (GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { glFramebufferFoveationParametersQCOM_Z_Z_loader(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); };
private void glFramebufferFoveationParametersQCOM_Z_Z_loader (GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) {
  *cast(void**)&glFramebufferFoveationParametersQCOM_Z_Z = glbindGetProcAddress(`glFramebufferFoveationParametersQCOM`);
  if (*cast(void**)&glFramebufferFoveationParametersQCOM_Z_Z is null) assert(0, `OpenGL function 'glFramebufferFoveationParametersQCOM' not found!`);
  glFramebufferFoveationParametersQCOM_Z_Z(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}
alias glFramebufferParameteri = glFramebufferParameteri_Z_Z;
__gshared glFramebufferParameteri_Z_Z = function void (GLenum target, GLenum pname, GLint param) { glFramebufferParameteri_Z_Z_loader(target, pname, param); };
private void glFramebufferParameteri_Z_Z_loader (GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glFramebufferParameteri_Z_Z = glbindGetProcAddress(`glFramebufferParameteri`);
  if (*cast(void**)&glFramebufferParameteri_Z_Z is null) assert(0, `OpenGL function 'glFramebufferParameteri' not found!`);
  glFramebufferParameteri_Z_Z(target, pname, param);
}
alias glFramebufferPixelLocalStorageSizeEXT = glFramebufferPixelLocalStorageSizeEXT_Z_Z;
__gshared glFramebufferPixelLocalStorageSizeEXT_Z_Z = function void (GLuint target, GLsizei size) { glFramebufferPixelLocalStorageSizeEXT_Z_Z_loader(target, size); };
private void glFramebufferPixelLocalStorageSizeEXT_Z_Z_loader (GLuint target, GLsizei size) {
  *cast(void**)&glFramebufferPixelLocalStorageSizeEXT_Z_Z = glbindGetProcAddress(`glFramebufferPixelLocalStorageSizeEXT`);
  if (*cast(void**)&glFramebufferPixelLocalStorageSizeEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferPixelLocalStorageSizeEXT' not found!`);
  glFramebufferPixelLocalStorageSizeEXT_Z_Z(target, size);
}
alias glFramebufferReadBufferEXT = glFramebufferReadBufferEXT_Z_Z;
__gshared glFramebufferReadBufferEXT_Z_Z = function void (GLuint framebuffer, GLenum mode) { glFramebufferReadBufferEXT_Z_Z_loader(framebuffer, mode); };
private void glFramebufferReadBufferEXT_Z_Z_loader (GLuint framebuffer, GLenum mode) {
  *cast(void**)&glFramebufferReadBufferEXT_Z_Z = glbindGetProcAddress(`glFramebufferReadBufferEXT`);
  if (*cast(void**)&glFramebufferReadBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferReadBufferEXT' not found!`);
  glFramebufferReadBufferEXT_Z_Z(framebuffer, mode);
}
alias glFramebufferRenderbuffer = glFramebufferRenderbuffer_Z_Z;
__gshared glFramebufferRenderbuffer_Z_Z = function void (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { glFramebufferRenderbuffer_Z_Z_loader(target, attachment, renderbuffertarget, renderbuffer); };
private void glFramebufferRenderbuffer_Z_Z_loader (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  *cast(void**)&glFramebufferRenderbuffer_Z_Z = glbindGetProcAddress(`glFramebufferRenderbuffer`);
  if (*cast(void**)&glFramebufferRenderbuffer_Z_Z is null) assert(0, `OpenGL function 'glFramebufferRenderbuffer' not found!`);
  glFramebufferRenderbuffer_Z_Z(target, attachment, renderbuffertarget, renderbuffer);
}
alias glFramebufferRenderbufferEXT = glFramebufferRenderbufferEXT_Z_Z;
__gshared glFramebufferRenderbufferEXT_Z_Z = function void (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { glFramebufferRenderbufferEXT_Z_Z_loader(target, attachment, renderbuffertarget, renderbuffer); };
private void glFramebufferRenderbufferEXT_Z_Z_loader (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  *cast(void**)&glFramebufferRenderbufferEXT_Z_Z = glbindGetProcAddress(`glFramebufferRenderbufferEXT`);
  if (*cast(void**)&glFramebufferRenderbufferEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferRenderbufferEXT' not found!`);
  glFramebufferRenderbufferEXT_Z_Z(target, attachment, renderbuffertarget, renderbuffer);
}
alias glFramebufferRenderbufferOES = glFramebufferRenderbufferOES_Z_Z;
__gshared glFramebufferRenderbufferOES_Z_Z = function void (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { glFramebufferRenderbufferOES_Z_Z_loader(target, attachment, renderbuffertarget, renderbuffer); };
private void glFramebufferRenderbufferOES_Z_Z_loader (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  *cast(void**)&glFramebufferRenderbufferOES_Z_Z = glbindGetProcAddress(`glFramebufferRenderbufferOES`);
  if (*cast(void**)&glFramebufferRenderbufferOES_Z_Z is null) assert(0, `OpenGL function 'glFramebufferRenderbufferOES' not found!`);
  glFramebufferRenderbufferOES_Z_Z(target, attachment, renderbuffertarget, renderbuffer);
}
alias glFramebufferSampleLocationsfvARB = glFramebufferSampleLocationsfvARB_Z_Z;
__gshared glFramebufferSampleLocationsfvARB_Z_Z = function void (GLenum target, GLuint start, GLsizei count, const(GLfloat)* v) { glFramebufferSampleLocationsfvARB_Z_Z_loader(target, start, count, v); };
private void glFramebufferSampleLocationsfvARB_Z_Z_loader (GLenum target, GLuint start, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glFramebufferSampleLocationsfvARB_Z_Z = glbindGetProcAddress(`glFramebufferSampleLocationsfvARB`);
  if (*cast(void**)&glFramebufferSampleLocationsfvARB_Z_Z is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvARB' not found!`);
  glFramebufferSampleLocationsfvARB_Z_Z(target, start, count, v);
}
alias glFramebufferSampleLocationsfvNV = glFramebufferSampleLocationsfvNV_Z_Z;
__gshared glFramebufferSampleLocationsfvNV_Z_Z = function void (GLenum target, GLuint start, GLsizei count, const(GLfloat)* v) { glFramebufferSampleLocationsfvNV_Z_Z_loader(target, start, count, v); };
private void glFramebufferSampleLocationsfvNV_Z_Z_loader (GLenum target, GLuint start, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glFramebufferSampleLocationsfvNV_Z_Z = glbindGetProcAddress(`glFramebufferSampleLocationsfvNV`);
  if (*cast(void**)&glFramebufferSampleLocationsfvNV_Z_Z is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvNV' not found!`);
  glFramebufferSampleLocationsfvNV_Z_Z(target, start, count, v);
}
alias glFramebufferSamplePositionsfvAMD = glFramebufferSamplePositionsfvAMD_Z_Z;
__gshared glFramebufferSamplePositionsfvAMD_Z_Z = function void (GLenum target, GLuint numsamples, GLuint pixelindex, const(GLfloat)* values) { glFramebufferSamplePositionsfvAMD_Z_Z_loader(target, numsamples, pixelindex, values); };
private void glFramebufferSamplePositionsfvAMD_Z_Z_loader (GLenum target, GLuint numsamples, GLuint pixelindex, const(GLfloat)* values) {
  *cast(void**)&glFramebufferSamplePositionsfvAMD_Z_Z = glbindGetProcAddress(`glFramebufferSamplePositionsfvAMD`);
  if (*cast(void**)&glFramebufferSamplePositionsfvAMD_Z_Z is null) assert(0, `OpenGL function 'glFramebufferSamplePositionsfvAMD' not found!`);
  glFramebufferSamplePositionsfvAMD_Z_Z(target, numsamples, pixelindex, values);
}
alias glFramebufferTexture = glFramebufferTexture_Z_Z;
__gshared glFramebufferTexture_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level) { glFramebufferTexture_Z_Z_loader(target, attachment, texture, level); };
private void glFramebufferTexture_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTexture_Z_Z = glbindGetProcAddress(`glFramebufferTexture`);
  if (*cast(void**)&glFramebufferTexture_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture' not found!`);
  glFramebufferTexture_Z_Z(target, attachment, texture, level);
}
alias glFramebufferTexture1D = glFramebufferTexture1D_Z_Z;
__gshared glFramebufferTexture1D_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { glFramebufferTexture1D_Z_Z_loader(target, attachment, textarget, texture, level); };
private void glFramebufferTexture1D_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTexture1D_Z_Z = glbindGetProcAddress(`glFramebufferTexture1D`);
  if (*cast(void**)&glFramebufferTexture1D_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture1D' not found!`);
  glFramebufferTexture1D_Z_Z(target, attachment, textarget, texture, level);
}
alias glFramebufferTexture1DEXT = glFramebufferTexture1DEXT_Z_Z;
__gshared glFramebufferTexture1DEXT_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { glFramebufferTexture1DEXT_Z_Z_loader(target, attachment, textarget, texture, level); };
private void glFramebufferTexture1DEXT_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTexture1DEXT_Z_Z = glbindGetProcAddress(`glFramebufferTexture1DEXT`);
  if (*cast(void**)&glFramebufferTexture1DEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture1DEXT' not found!`);
  glFramebufferTexture1DEXT_Z_Z(target, attachment, textarget, texture, level);
}
alias glFramebufferTexture2D = glFramebufferTexture2D_Z_Z;
__gshared glFramebufferTexture2D_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { glFramebufferTexture2D_Z_Z_loader(target, attachment, textarget, texture, level); };
private void glFramebufferTexture2D_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTexture2D_Z_Z = glbindGetProcAddress(`glFramebufferTexture2D`);
  if (*cast(void**)&glFramebufferTexture2D_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2D' not found!`);
  glFramebufferTexture2D_Z_Z(target, attachment, textarget, texture, level);
}
alias glFramebufferTexture2DEXT = glFramebufferTexture2DEXT_Z_Z;
__gshared glFramebufferTexture2DEXT_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { glFramebufferTexture2DEXT_Z_Z_loader(target, attachment, textarget, texture, level); };
private void glFramebufferTexture2DEXT_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTexture2DEXT_Z_Z = glbindGetProcAddress(`glFramebufferTexture2DEXT`);
  if (*cast(void**)&glFramebufferTexture2DEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2DEXT' not found!`);
  glFramebufferTexture2DEXT_Z_Z(target, attachment, textarget, texture, level);
}
alias glFramebufferTexture2DDownsampleIMG = glFramebufferTexture2DDownsampleIMG_Z_Z;
__gshared glFramebufferTexture2DDownsampleIMG_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) { glFramebufferTexture2DDownsampleIMG_Z_Z_loader(target, attachment, textarget, texture, level, xscale, yscale); };
private void glFramebufferTexture2DDownsampleIMG_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) {
  *cast(void**)&glFramebufferTexture2DDownsampleIMG_Z_Z = glbindGetProcAddress(`glFramebufferTexture2DDownsampleIMG`);
  if (*cast(void**)&glFramebufferTexture2DDownsampleIMG_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2DDownsampleIMG' not found!`);
  glFramebufferTexture2DDownsampleIMG_Z_Z(target, attachment, textarget, texture, level, xscale, yscale);
}
alias glFramebufferTexture2DMultisampleEXT = glFramebufferTexture2DMultisampleEXT_Z_Z;
__gshared glFramebufferTexture2DMultisampleEXT_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { glFramebufferTexture2DMultisampleEXT_Z_Z_loader(target, attachment, textarget, texture, level, samples); };
private void glFramebufferTexture2DMultisampleEXT_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  *cast(void**)&glFramebufferTexture2DMultisampleEXT_Z_Z = glbindGetProcAddress(`glFramebufferTexture2DMultisampleEXT`);
  if (*cast(void**)&glFramebufferTexture2DMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2DMultisampleEXT' not found!`);
  glFramebufferTexture2DMultisampleEXT_Z_Z(target, attachment, textarget, texture, level, samples);
}
alias glFramebufferTexture2DMultisampleIMG = glFramebufferTexture2DMultisampleIMG_Z_Z;
__gshared glFramebufferTexture2DMultisampleIMG_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { glFramebufferTexture2DMultisampleIMG_Z_Z_loader(target, attachment, textarget, texture, level, samples); };
private void glFramebufferTexture2DMultisampleIMG_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  *cast(void**)&glFramebufferTexture2DMultisampleIMG_Z_Z = glbindGetProcAddress(`glFramebufferTexture2DMultisampleIMG`);
  if (*cast(void**)&glFramebufferTexture2DMultisampleIMG_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2DMultisampleIMG' not found!`);
  glFramebufferTexture2DMultisampleIMG_Z_Z(target, attachment, textarget, texture, level, samples);
}
alias glFramebufferTexture2DOES = glFramebufferTexture2DOES_Z_Z;
__gshared glFramebufferTexture2DOES_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { glFramebufferTexture2DOES_Z_Z_loader(target, attachment, textarget, texture, level); };
private void glFramebufferTexture2DOES_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTexture2DOES_Z_Z = glbindGetProcAddress(`glFramebufferTexture2DOES`);
  if (*cast(void**)&glFramebufferTexture2DOES_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture2DOES' not found!`);
  glFramebufferTexture2DOES_Z_Z(target, attachment, textarget, texture, level);
}
alias glFramebufferTexture3D = glFramebufferTexture3D_Z_Z;
__gshared glFramebufferTexture3D_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { glFramebufferTexture3D_Z_Z_loader(target, attachment, textarget, texture, level, zoffset); };
private void glFramebufferTexture3D_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  *cast(void**)&glFramebufferTexture3D_Z_Z = glbindGetProcAddress(`glFramebufferTexture3D`);
  if (*cast(void**)&glFramebufferTexture3D_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture3D' not found!`);
  glFramebufferTexture3D_Z_Z(target, attachment, textarget, texture, level, zoffset);
}
alias glFramebufferTexture3DEXT = glFramebufferTexture3DEXT_Z_Z;
__gshared glFramebufferTexture3DEXT_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { glFramebufferTexture3DEXT_Z_Z_loader(target, attachment, textarget, texture, level, zoffset); };
private void glFramebufferTexture3DEXT_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  *cast(void**)&glFramebufferTexture3DEXT_Z_Z = glbindGetProcAddress(`glFramebufferTexture3DEXT`);
  if (*cast(void**)&glFramebufferTexture3DEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture3DEXT' not found!`);
  glFramebufferTexture3DEXT_Z_Z(target, attachment, textarget, texture, level, zoffset);
}
alias glFramebufferTexture3DOES = glFramebufferTexture3DOES_Z_Z;
__gshared glFramebufferTexture3DOES_Z_Z = function void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { glFramebufferTexture3DOES_Z_Z_loader(target, attachment, textarget, texture, level, zoffset); };
private void glFramebufferTexture3DOES_Z_Z_loader (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  *cast(void**)&glFramebufferTexture3DOES_Z_Z = glbindGetProcAddress(`glFramebufferTexture3DOES`);
  if (*cast(void**)&glFramebufferTexture3DOES_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTexture3DOES' not found!`);
  glFramebufferTexture3DOES_Z_Z(target, attachment, textarget, texture, level, zoffset);
}
alias glFramebufferTextureARB = glFramebufferTextureARB_Z_Z;
__gshared glFramebufferTextureARB_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level) { glFramebufferTextureARB_Z_Z_loader(target, attachment, texture, level); };
private void glFramebufferTextureARB_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTextureARB_Z_Z = glbindGetProcAddress(`glFramebufferTextureARB`);
  if (*cast(void**)&glFramebufferTextureARB_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureARB' not found!`);
  glFramebufferTextureARB_Z_Z(target, attachment, texture, level);
}
alias glFramebufferTextureEXT = glFramebufferTextureEXT_Z_Z;
__gshared glFramebufferTextureEXT_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level) { glFramebufferTextureEXT_Z_Z_loader(target, attachment, texture, level); };
private void glFramebufferTextureEXT_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTextureEXT_Z_Z = glbindGetProcAddress(`glFramebufferTextureEXT`);
  if (*cast(void**)&glFramebufferTextureEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureEXT' not found!`);
  glFramebufferTextureEXT_Z_Z(target, attachment, texture, level);
}
alias glFramebufferTextureFaceARB = glFramebufferTextureFaceARB_Z_Z;
__gshared glFramebufferTextureFaceARB_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { glFramebufferTextureFaceARB_Z_Z_loader(target, attachment, texture, level, face); };
private void glFramebufferTextureFaceARB_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  *cast(void**)&glFramebufferTextureFaceARB_Z_Z = glbindGetProcAddress(`glFramebufferTextureFaceARB`);
  if (*cast(void**)&glFramebufferTextureFaceARB_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureFaceARB' not found!`);
  glFramebufferTextureFaceARB_Z_Z(target, attachment, texture, level, face);
}
alias glFramebufferTextureFaceEXT = glFramebufferTextureFaceEXT_Z_Z;
__gshared glFramebufferTextureFaceEXT_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { glFramebufferTextureFaceEXT_Z_Z_loader(target, attachment, texture, level, face); };
private void glFramebufferTextureFaceEXT_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  *cast(void**)&glFramebufferTextureFaceEXT_Z_Z = glbindGetProcAddress(`glFramebufferTextureFaceEXT`);
  if (*cast(void**)&glFramebufferTextureFaceEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureFaceEXT' not found!`);
  glFramebufferTextureFaceEXT_Z_Z(target, attachment, texture, level, face);
}
alias glFramebufferTextureLayer = glFramebufferTextureLayer_Z_Z;
__gshared glFramebufferTextureLayer_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { glFramebufferTextureLayer_Z_Z_loader(target, attachment, texture, level, layer); };
private void glFramebufferTextureLayer_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  *cast(void**)&glFramebufferTextureLayer_Z_Z = glbindGetProcAddress(`glFramebufferTextureLayer`);
  if (*cast(void**)&glFramebufferTextureLayer_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureLayer' not found!`);
  glFramebufferTextureLayer_Z_Z(target, attachment, texture, level, layer);
}
alias glFramebufferTextureLayerARB = glFramebufferTextureLayerARB_Z_Z;
__gshared glFramebufferTextureLayerARB_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { glFramebufferTextureLayerARB_Z_Z_loader(target, attachment, texture, level, layer); };
private void glFramebufferTextureLayerARB_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  *cast(void**)&glFramebufferTextureLayerARB_Z_Z = glbindGetProcAddress(`glFramebufferTextureLayerARB`);
  if (*cast(void**)&glFramebufferTextureLayerARB_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureLayerARB' not found!`);
  glFramebufferTextureLayerARB_Z_Z(target, attachment, texture, level, layer);
}
alias glFramebufferTextureLayerEXT = glFramebufferTextureLayerEXT_Z_Z;
__gshared glFramebufferTextureLayerEXT_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { glFramebufferTextureLayerEXT_Z_Z_loader(target, attachment, texture, level, layer); };
private void glFramebufferTextureLayerEXT_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  *cast(void**)&glFramebufferTextureLayerEXT_Z_Z = glbindGetProcAddress(`glFramebufferTextureLayerEXT`);
  if (*cast(void**)&glFramebufferTextureLayerEXT_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureLayerEXT' not found!`);
  glFramebufferTextureLayerEXT_Z_Z(target, attachment, texture, level, layer);
}
alias glFramebufferTextureLayerDownsampleIMG = glFramebufferTextureLayerDownsampleIMG_Z_Z;
__gshared glFramebufferTextureLayerDownsampleIMG_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) { glFramebufferTextureLayerDownsampleIMG_Z_Z_loader(target, attachment, texture, level, layer, xscale, yscale); };
private void glFramebufferTextureLayerDownsampleIMG_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) {
  *cast(void**)&glFramebufferTextureLayerDownsampleIMG_Z_Z = glbindGetProcAddress(`glFramebufferTextureLayerDownsampleIMG`);
  if (*cast(void**)&glFramebufferTextureLayerDownsampleIMG_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureLayerDownsampleIMG' not found!`);
  glFramebufferTextureLayerDownsampleIMG_Z_Z(target, attachment, texture, level, layer, xscale, yscale);
}
alias glFramebufferTextureMultisampleMultiviewOVR = glFramebufferTextureMultisampleMultiviewOVR_Z_Z;
__gshared glFramebufferTextureMultisampleMultiviewOVR_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) { glFramebufferTextureMultisampleMultiviewOVR_Z_Z_loader(target, attachment, texture, level, samples, baseViewIndex, numViews); };
private void glFramebufferTextureMultisampleMultiviewOVR_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) {
  *cast(void**)&glFramebufferTextureMultisampleMultiviewOVR_Z_Z = glbindGetProcAddress(`glFramebufferTextureMultisampleMultiviewOVR`);
  if (*cast(void**)&glFramebufferTextureMultisampleMultiviewOVR_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureMultisampleMultiviewOVR' not found!`);
  glFramebufferTextureMultisampleMultiviewOVR_Z_Z(target, attachment, texture, level, samples, baseViewIndex, numViews);
}
alias glFramebufferTextureMultiviewOVR = glFramebufferTextureMultiviewOVR_Z_Z;
__gshared glFramebufferTextureMultiviewOVR_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { glFramebufferTextureMultiviewOVR_Z_Z_loader(target, attachment, texture, level, baseViewIndex, numViews); };
private void glFramebufferTextureMultiviewOVR_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {
  *cast(void**)&glFramebufferTextureMultiviewOVR_Z_Z = glbindGetProcAddress(`glFramebufferTextureMultiviewOVR`);
  if (*cast(void**)&glFramebufferTextureMultiviewOVR_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureMultiviewOVR' not found!`);
  glFramebufferTextureMultiviewOVR_Z_Z(target, attachment, texture, level, baseViewIndex, numViews);
}
alias glFramebufferTextureOES = glFramebufferTextureOES_Z_Z;
__gshared glFramebufferTextureOES_Z_Z = function void (GLenum target, GLenum attachment, GLuint texture, GLint level) { glFramebufferTextureOES_Z_Z_loader(target, attachment, texture, level); };
private void glFramebufferTextureOES_Z_Z_loader (GLenum target, GLenum attachment, GLuint texture, GLint level) {
  *cast(void**)&glFramebufferTextureOES_Z_Z = glbindGetProcAddress(`glFramebufferTextureOES`);
  if (*cast(void**)&glFramebufferTextureOES_Z_Z is null) assert(0, `OpenGL function 'glFramebufferTextureOES' not found!`);
  glFramebufferTextureOES_Z_Z(target, attachment, texture, level);
}
alias glFreeObjectBufferATI = glFreeObjectBufferATI_Z_Z;
__gshared glFreeObjectBufferATI_Z_Z = function void (GLuint buffer) { glFreeObjectBufferATI_Z_Z_loader(buffer); };
private void glFreeObjectBufferATI_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glFreeObjectBufferATI_Z_Z = glbindGetProcAddress(`glFreeObjectBufferATI`);
  if (*cast(void**)&glFreeObjectBufferATI_Z_Z is null) assert(0, `OpenGL function 'glFreeObjectBufferATI' not found!`);
  glFreeObjectBufferATI_Z_Z(buffer);
}
alias glFrontFace = glFrontFace_Z_Z;
__gshared glFrontFace_Z_Z = function void (GLenum mode) { glFrontFace_Z_Z_loader(mode); };
private void glFrontFace_Z_Z_loader (GLenum mode) {
  *cast(void**)&glFrontFace_Z_Z = glbindGetProcAddress(`glFrontFace`);
  if (*cast(void**)&glFrontFace_Z_Z is null) assert(0, `OpenGL function 'glFrontFace' not found!`);
  glFrontFace_Z_Z(mode);
}
alias glFrustum = glFrustum_Z_Z;
__gshared glFrustum_Z_Z = function void (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { glFrustum_Z_Z_loader(left, right, bottom, top, zNear, zFar); };
private void glFrustum_Z_Z_loader (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  *cast(void**)&glFrustum_Z_Z = glbindGetProcAddress(`glFrustum`);
  if (*cast(void**)&glFrustum_Z_Z is null) assert(0, `OpenGL function 'glFrustum' not found!`);
  glFrustum_Z_Z(left, right, bottom, top, zNear, zFar);
}
alias glFrustumf = glFrustumf_Z_Z;
__gshared glFrustumf_Z_Z = function void (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { glFrustumf_Z_Z_loader(l, r, b, t, n, f); };
private void glFrustumf_Z_Z_loader (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  *cast(void**)&glFrustumf_Z_Z = glbindGetProcAddress(`glFrustumf`);
  if (*cast(void**)&glFrustumf_Z_Z is null) assert(0, `OpenGL function 'glFrustumf' not found!`);
  glFrustumf_Z_Z(l, r, b, t, n, f);
}
alias glFrustumfOES = glFrustumfOES_Z_Z;
__gshared glFrustumfOES_Z_Z = function void (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { glFrustumfOES_Z_Z_loader(l, r, b, t, n, f); };
private void glFrustumfOES_Z_Z_loader (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  *cast(void**)&glFrustumfOES_Z_Z = glbindGetProcAddress(`glFrustumfOES`);
  if (*cast(void**)&glFrustumfOES_Z_Z is null) assert(0, `OpenGL function 'glFrustumfOES' not found!`);
  glFrustumfOES_Z_Z(l, r, b, t, n, f);
}
alias glFrustumx = glFrustumx_Z_Z;
__gshared glFrustumx_Z_Z = function void (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { glFrustumx_Z_Z_loader(l, r, b, t, n, f); };
private void glFrustumx_Z_Z_loader (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  *cast(void**)&glFrustumx_Z_Z = glbindGetProcAddress(`glFrustumx`);
  if (*cast(void**)&glFrustumx_Z_Z is null) assert(0, `OpenGL function 'glFrustumx' not found!`);
  glFrustumx_Z_Z(l, r, b, t, n, f);
}
alias glFrustumxOES = glFrustumxOES_Z_Z;
__gshared glFrustumxOES_Z_Z = function void (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { glFrustumxOES_Z_Z_loader(l, r, b, t, n, f); };
private void glFrustumxOES_Z_Z_loader (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  *cast(void**)&glFrustumxOES_Z_Z = glbindGetProcAddress(`glFrustumxOES`);
  if (*cast(void**)&glFrustumxOES_Z_Z is null) assert(0, `OpenGL function 'glFrustumxOES' not found!`);
  glFrustumxOES_Z_Z(l, r, b, t, n, f);
}
alias glGenAsyncMarkersSGIX = glGenAsyncMarkersSGIX_Z_Z;
__gshared glGenAsyncMarkersSGIX_Z_Z = function GLuint (GLsizei range) { return glGenAsyncMarkersSGIX_Z_Z_loader(range); };
private GLuint glGenAsyncMarkersSGIX_Z_Z_loader (GLsizei range) {
  *cast(void**)&glGenAsyncMarkersSGIX_Z_Z = glbindGetProcAddress(`glGenAsyncMarkersSGIX`);
  if (*cast(void**)&glGenAsyncMarkersSGIX_Z_Z is null) assert(0, `OpenGL function 'glGenAsyncMarkersSGIX' not found!`);
  return glGenAsyncMarkersSGIX_Z_Z(range);
}
alias glGenBuffers = glGenBuffers_Z_Z;
__gshared glGenBuffers_Z_Z = function void (GLsizei n, GLuint *buffers) { glGenBuffers_Z_Z_loader(n, buffers); };
private void glGenBuffers_Z_Z_loader (GLsizei n, GLuint *buffers) {
  *cast(void**)&glGenBuffers_Z_Z = glbindGetProcAddress(`glGenBuffers`);
  if (*cast(void**)&glGenBuffers_Z_Z is null) assert(0, `OpenGL function 'glGenBuffers' not found!`);
  glGenBuffers_Z_Z(n, buffers);
}
alias glGenBuffersARB = glGenBuffersARB_Z_Z;
__gshared glGenBuffersARB_Z_Z = function void (GLsizei n, GLuint *buffers) { glGenBuffersARB_Z_Z_loader(n, buffers); };
private void glGenBuffersARB_Z_Z_loader (GLsizei n, GLuint *buffers) {
  *cast(void**)&glGenBuffersARB_Z_Z = glbindGetProcAddress(`glGenBuffersARB`);
  if (*cast(void**)&glGenBuffersARB_Z_Z is null) assert(0, `OpenGL function 'glGenBuffersARB' not found!`);
  glGenBuffersARB_Z_Z(n, buffers);
}
alias glGenFencesAPPLE = glGenFencesAPPLE_Z_Z;
__gshared glGenFencesAPPLE_Z_Z = function void (GLsizei n, GLuint *fences) { glGenFencesAPPLE_Z_Z_loader(n, fences); };
private void glGenFencesAPPLE_Z_Z_loader (GLsizei n, GLuint *fences) {
  *cast(void**)&glGenFencesAPPLE_Z_Z = glbindGetProcAddress(`glGenFencesAPPLE`);
  if (*cast(void**)&glGenFencesAPPLE_Z_Z is null) assert(0, `OpenGL function 'glGenFencesAPPLE' not found!`);
  glGenFencesAPPLE_Z_Z(n, fences);
}
alias glGenFencesNV = glGenFencesNV_Z_Z;
__gshared glGenFencesNV_Z_Z = function void (GLsizei n, GLuint *fences) { glGenFencesNV_Z_Z_loader(n, fences); };
private void glGenFencesNV_Z_Z_loader (GLsizei n, GLuint *fences) {
  *cast(void**)&glGenFencesNV_Z_Z = glbindGetProcAddress(`glGenFencesNV`);
  if (*cast(void**)&glGenFencesNV_Z_Z is null) assert(0, `OpenGL function 'glGenFencesNV' not found!`);
  glGenFencesNV_Z_Z(n, fences);
}
alias glGenFragmentShadersATI = glGenFragmentShadersATI_Z_Z;
__gshared glGenFragmentShadersATI_Z_Z = function GLuint (GLuint range) { return glGenFragmentShadersATI_Z_Z_loader(range); };
private GLuint glGenFragmentShadersATI_Z_Z_loader (GLuint range) {
  *cast(void**)&glGenFragmentShadersATI_Z_Z = glbindGetProcAddress(`glGenFragmentShadersATI`);
  if (*cast(void**)&glGenFragmentShadersATI_Z_Z is null) assert(0, `OpenGL function 'glGenFragmentShadersATI' not found!`);
  return glGenFragmentShadersATI_Z_Z(range);
}
alias glGenFramebuffers = glGenFramebuffers_Z_Z;
__gshared glGenFramebuffers_Z_Z = function void (GLsizei n, GLuint *framebuffers) { glGenFramebuffers_Z_Z_loader(n, framebuffers); };
private void glGenFramebuffers_Z_Z_loader (GLsizei n, GLuint *framebuffers) {
  *cast(void**)&glGenFramebuffers_Z_Z = glbindGetProcAddress(`glGenFramebuffers`);
  if (*cast(void**)&glGenFramebuffers_Z_Z is null) assert(0, `OpenGL function 'glGenFramebuffers' not found!`);
  glGenFramebuffers_Z_Z(n, framebuffers);
}
alias glGenFramebuffersEXT = glGenFramebuffersEXT_Z_Z;
__gshared glGenFramebuffersEXT_Z_Z = function void (GLsizei n, GLuint *framebuffers) { glGenFramebuffersEXT_Z_Z_loader(n, framebuffers); };
private void glGenFramebuffersEXT_Z_Z_loader (GLsizei n, GLuint *framebuffers) {
  *cast(void**)&glGenFramebuffersEXT_Z_Z = glbindGetProcAddress(`glGenFramebuffersEXT`);
  if (*cast(void**)&glGenFramebuffersEXT_Z_Z is null) assert(0, `OpenGL function 'glGenFramebuffersEXT' not found!`);
  glGenFramebuffersEXT_Z_Z(n, framebuffers);
}
alias glGenFramebuffersOES = glGenFramebuffersOES_Z_Z;
__gshared glGenFramebuffersOES_Z_Z = function void (GLsizei n, GLuint *framebuffers) { glGenFramebuffersOES_Z_Z_loader(n, framebuffers); };
private void glGenFramebuffersOES_Z_Z_loader (GLsizei n, GLuint *framebuffers) {
  *cast(void**)&glGenFramebuffersOES_Z_Z = glbindGetProcAddress(`glGenFramebuffersOES`);
  if (*cast(void**)&glGenFramebuffersOES_Z_Z is null) assert(0, `OpenGL function 'glGenFramebuffersOES' not found!`);
  glGenFramebuffersOES_Z_Z(n, framebuffers);
}
alias glGenLists = glGenLists_Z_Z;
__gshared glGenLists_Z_Z = function GLuint (GLsizei range) { return glGenLists_Z_Z_loader(range); };
private GLuint glGenLists_Z_Z_loader (GLsizei range) {
  *cast(void**)&glGenLists_Z_Z = glbindGetProcAddress(`glGenLists`);
  if (*cast(void**)&glGenLists_Z_Z is null) assert(0, `OpenGL function 'glGenLists' not found!`);
  return glGenLists_Z_Z(range);
}
alias glGenNamesAMD = glGenNamesAMD_Z_Z;
__gshared glGenNamesAMD_Z_Z = function void (GLenum identifier, GLuint num, GLuint *names) { glGenNamesAMD_Z_Z_loader(identifier, num, names); };
private void glGenNamesAMD_Z_Z_loader (GLenum identifier, GLuint num, GLuint *names) {
  *cast(void**)&glGenNamesAMD_Z_Z = glbindGetProcAddress(`glGenNamesAMD`);
  if (*cast(void**)&glGenNamesAMD_Z_Z is null) assert(0, `OpenGL function 'glGenNamesAMD' not found!`);
  glGenNamesAMD_Z_Z(identifier, num, names);
}
alias glGenOcclusionQueriesNV = glGenOcclusionQueriesNV_Z_Z;
__gshared glGenOcclusionQueriesNV_Z_Z = function void (GLsizei n, GLuint *ids) { glGenOcclusionQueriesNV_Z_Z_loader(n, ids); };
private void glGenOcclusionQueriesNV_Z_Z_loader (GLsizei n, GLuint *ids) {
  *cast(void**)&glGenOcclusionQueriesNV_Z_Z = glbindGetProcAddress(`glGenOcclusionQueriesNV`);
  if (*cast(void**)&glGenOcclusionQueriesNV_Z_Z is null) assert(0, `OpenGL function 'glGenOcclusionQueriesNV' not found!`);
  glGenOcclusionQueriesNV_Z_Z(n, ids);
}
alias glGenPathsNV = glGenPathsNV_Z_Z;
__gshared glGenPathsNV_Z_Z = function GLuint (GLsizei range) { return glGenPathsNV_Z_Z_loader(range); };
private GLuint glGenPathsNV_Z_Z_loader (GLsizei range) {
  *cast(void**)&glGenPathsNV_Z_Z = glbindGetProcAddress(`glGenPathsNV`);
  if (*cast(void**)&glGenPathsNV_Z_Z is null) assert(0, `OpenGL function 'glGenPathsNV' not found!`);
  return glGenPathsNV_Z_Z(range);
}
alias glGenPerfMonitorsAMD = glGenPerfMonitorsAMD_Z_Z;
__gshared glGenPerfMonitorsAMD_Z_Z = function void (GLsizei n, GLuint *monitors) { glGenPerfMonitorsAMD_Z_Z_loader(n, monitors); };
private void glGenPerfMonitorsAMD_Z_Z_loader (GLsizei n, GLuint *monitors) {
  *cast(void**)&glGenPerfMonitorsAMD_Z_Z = glbindGetProcAddress(`glGenPerfMonitorsAMD`);
  if (*cast(void**)&glGenPerfMonitorsAMD_Z_Z is null) assert(0, `OpenGL function 'glGenPerfMonitorsAMD' not found!`);
  glGenPerfMonitorsAMD_Z_Z(n, monitors);
}
alias glGenProgramPipelines = glGenProgramPipelines_Z_Z;
__gshared glGenProgramPipelines_Z_Z = function void (GLsizei n, GLuint *pipelines) { glGenProgramPipelines_Z_Z_loader(n, pipelines); };
private void glGenProgramPipelines_Z_Z_loader (GLsizei n, GLuint *pipelines) {
  *cast(void**)&glGenProgramPipelines_Z_Z = glbindGetProcAddress(`glGenProgramPipelines`);
  if (*cast(void**)&glGenProgramPipelines_Z_Z is null) assert(0, `OpenGL function 'glGenProgramPipelines' not found!`);
  glGenProgramPipelines_Z_Z(n, pipelines);
}
alias glGenProgramPipelinesEXT = glGenProgramPipelinesEXT_Z_Z;
__gshared glGenProgramPipelinesEXT_Z_Z = function void (GLsizei n, GLuint *pipelines) { glGenProgramPipelinesEXT_Z_Z_loader(n, pipelines); };
private void glGenProgramPipelinesEXT_Z_Z_loader (GLsizei n, GLuint *pipelines) {
  *cast(void**)&glGenProgramPipelinesEXT_Z_Z = glbindGetProcAddress(`glGenProgramPipelinesEXT`);
  if (*cast(void**)&glGenProgramPipelinesEXT_Z_Z is null) assert(0, `OpenGL function 'glGenProgramPipelinesEXT' not found!`);
  glGenProgramPipelinesEXT_Z_Z(n, pipelines);
}
alias glGenProgramsARB = glGenProgramsARB_Z_Z;
__gshared glGenProgramsARB_Z_Z = function void (GLsizei n, GLuint *programs) { glGenProgramsARB_Z_Z_loader(n, programs); };
private void glGenProgramsARB_Z_Z_loader (GLsizei n, GLuint *programs) {
  *cast(void**)&glGenProgramsARB_Z_Z = glbindGetProcAddress(`glGenProgramsARB`);
  if (*cast(void**)&glGenProgramsARB_Z_Z is null) assert(0, `OpenGL function 'glGenProgramsARB' not found!`);
  glGenProgramsARB_Z_Z(n, programs);
}
alias glGenProgramsNV = glGenProgramsNV_Z_Z;
__gshared glGenProgramsNV_Z_Z = function void (GLsizei n, GLuint *programs) { glGenProgramsNV_Z_Z_loader(n, programs); };
private void glGenProgramsNV_Z_Z_loader (GLsizei n, GLuint *programs) {
  *cast(void**)&glGenProgramsNV_Z_Z = glbindGetProcAddress(`glGenProgramsNV`);
  if (*cast(void**)&glGenProgramsNV_Z_Z is null) assert(0, `OpenGL function 'glGenProgramsNV' not found!`);
  glGenProgramsNV_Z_Z(n, programs);
}
alias glGenQueries = glGenQueries_Z_Z;
__gshared glGenQueries_Z_Z = function void (GLsizei n, GLuint *ids) { glGenQueries_Z_Z_loader(n, ids); };
private void glGenQueries_Z_Z_loader (GLsizei n, GLuint *ids) {
  *cast(void**)&glGenQueries_Z_Z = glbindGetProcAddress(`glGenQueries`);
  if (*cast(void**)&glGenQueries_Z_Z is null) assert(0, `OpenGL function 'glGenQueries' not found!`);
  glGenQueries_Z_Z(n, ids);
}
alias glGenQueriesARB = glGenQueriesARB_Z_Z;
__gshared glGenQueriesARB_Z_Z = function void (GLsizei n, GLuint *ids) { glGenQueriesARB_Z_Z_loader(n, ids); };
private void glGenQueriesARB_Z_Z_loader (GLsizei n, GLuint *ids) {
  *cast(void**)&glGenQueriesARB_Z_Z = glbindGetProcAddress(`glGenQueriesARB`);
  if (*cast(void**)&glGenQueriesARB_Z_Z is null) assert(0, `OpenGL function 'glGenQueriesARB' not found!`);
  glGenQueriesARB_Z_Z(n, ids);
}
alias glGenQueriesEXT = glGenQueriesEXT_Z_Z;
__gshared glGenQueriesEXT_Z_Z = function void (GLsizei n, GLuint *ids) { glGenQueriesEXT_Z_Z_loader(n, ids); };
private void glGenQueriesEXT_Z_Z_loader (GLsizei n, GLuint *ids) {
  *cast(void**)&glGenQueriesEXT_Z_Z = glbindGetProcAddress(`glGenQueriesEXT`);
  if (*cast(void**)&glGenQueriesEXT_Z_Z is null) assert(0, `OpenGL function 'glGenQueriesEXT' not found!`);
  glGenQueriesEXT_Z_Z(n, ids);
}
alias glGenRenderbuffers = glGenRenderbuffers_Z_Z;
__gshared glGenRenderbuffers_Z_Z = function void (GLsizei n, GLuint *renderbuffers) { glGenRenderbuffers_Z_Z_loader(n, renderbuffers); };
private void glGenRenderbuffers_Z_Z_loader (GLsizei n, GLuint *renderbuffers) {
  *cast(void**)&glGenRenderbuffers_Z_Z = glbindGetProcAddress(`glGenRenderbuffers`);
  if (*cast(void**)&glGenRenderbuffers_Z_Z is null) assert(0, `OpenGL function 'glGenRenderbuffers' not found!`);
  glGenRenderbuffers_Z_Z(n, renderbuffers);
}
alias glGenRenderbuffersEXT = glGenRenderbuffersEXT_Z_Z;
__gshared glGenRenderbuffersEXT_Z_Z = function void (GLsizei n, GLuint *renderbuffers) { glGenRenderbuffersEXT_Z_Z_loader(n, renderbuffers); };
private void glGenRenderbuffersEXT_Z_Z_loader (GLsizei n, GLuint *renderbuffers) {
  *cast(void**)&glGenRenderbuffersEXT_Z_Z = glbindGetProcAddress(`glGenRenderbuffersEXT`);
  if (*cast(void**)&glGenRenderbuffersEXT_Z_Z is null) assert(0, `OpenGL function 'glGenRenderbuffersEXT' not found!`);
  glGenRenderbuffersEXT_Z_Z(n, renderbuffers);
}
alias glGenRenderbuffersOES = glGenRenderbuffersOES_Z_Z;
__gshared glGenRenderbuffersOES_Z_Z = function void (GLsizei n, GLuint *renderbuffers) { glGenRenderbuffersOES_Z_Z_loader(n, renderbuffers); };
private void glGenRenderbuffersOES_Z_Z_loader (GLsizei n, GLuint *renderbuffers) {
  *cast(void**)&glGenRenderbuffersOES_Z_Z = glbindGetProcAddress(`glGenRenderbuffersOES`);
  if (*cast(void**)&glGenRenderbuffersOES_Z_Z is null) assert(0, `OpenGL function 'glGenRenderbuffersOES' not found!`);
  glGenRenderbuffersOES_Z_Z(n, renderbuffers);
}
alias glGenSamplers = glGenSamplers_Z_Z;
__gshared glGenSamplers_Z_Z = function void (GLsizei count, GLuint *samplers) { glGenSamplers_Z_Z_loader(count, samplers); };
private void glGenSamplers_Z_Z_loader (GLsizei count, GLuint *samplers) {
  *cast(void**)&glGenSamplers_Z_Z = glbindGetProcAddress(`glGenSamplers`);
  if (*cast(void**)&glGenSamplers_Z_Z is null) assert(0, `OpenGL function 'glGenSamplers' not found!`);
  glGenSamplers_Z_Z(count, samplers);
}
alias glGenSemaphoresEXT = glGenSemaphoresEXT_Z_Z;
__gshared glGenSemaphoresEXT_Z_Z = function void (GLsizei n, GLuint *semaphores) { glGenSemaphoresEXT_Z_Z_loader(n, semaphores); };
private void glGenSemaphoresEXT_Z_Z_loader (GLsizei n, GLuint *semaphores) {
  *cast(void**)&glGenSemaphoresEXT_Z_Z = glbindGetProcAddress(`glGenSemaphoresEXT`);
  if (*cast(void**)&glGenSemaphoresEXT_Z_Z is null) assert(0, `OpenGL function 'glGenSemaphoresEXT' not found!`);
  glGenSemaphoresEXT_Z_Z(n, semaphores);
}
alias glGenSymbolsEXT = glGenSymbolsEXT_Z_Z;
__gshared glGenSymbolsEXT_Z_Z = function GLuint (GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return glGenSymbolsEXT_Z_Z_loader(datatype, storagetype, range, components); };
private GLuint glGenSymbolsEXT_Z_Z_loader (GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {
  *cast(void**)&glGenSymbolsEXT_Z_Z = glbindGetProcAddress(`glGenSymbolsEXT`);
  if (*cast(void**)&glGenSymbolsEXT_Z_Z is null) assert(0, `OpenGL function 'glGenSymbolsEXT' not found!`);
  return glGenSymbolsEXT_Z_Z(datatype, storagetype, range, components);
}
alias glGenTextures = glGenTextures_Z_Z;
__gshared glGenTextures_Z_Z = function void (GLsizei n, GLuint *textures) { glGenTextures_Z_Z_loader(n, textures); };
private void glGenTextures_Z_Z_loader (GLsizei n, GLuint *textures) {
  *cast(void**)&glGenTextures_Z_Z = glbindGetProcAddress(`glGenTextures`);
  if (*cast(void**)&glGenTextures_Z_Z is null) assert(0, `OpenGL function 'glGenTextures' not found!`);
  glGenTextures_Z_Z(n, textures);
}
alias glGenTexturesEXT = glGenTexturesEXT_Z_Z;
__gshared glGenTexturesEXT_Z_Z = function void (GLsizei n, GLuint *textures) { glGenTexturesEXT_Z_Z_loader(n, textures); };
private void glGenTexturesEXT_Z_Z_loader (GLsizei n, GLuint *textures) {
  *cast(void**)&glGenTexturesEXT_Z_Z = glbindGetProcAddress(`glGenTexturesEXT`);
  if (*cast(void**)&glGenTexturesEXT_Z_Z is null) assert(0, `OpenGL function 'glGenTexturesEXT' not found!`);
  glGenTexturesEXT_Z_Z(n, textures);
}
alias glGenTransformFeedbacks = glGenTransformFeedbacks_Z_Z;
__gshared glGenTransformFeedbacks_Z_Z = function void (GLsizei n, GLuint *ids) { glGenTransformFeedbacks_Z_Z_loader(n, ids); };
private void glGenTransformFeedbacks_Z_Z_loader (GLsizei n, GLuint *ids) {
  *cast(void**)&glGenTransformFeedbacks_Z_Z = glbindGetProcAddress(`glGenTransformFeedbacks`);
  if (*cast(void**)&glGenTransformFeedbacks_Z_Z is null) assert(0, `OpenGL function 'glGenTransformFeedbacks' not found!`);
  glGenTransformFeedbacks_Z_Z(n, ids);
}
alias glGenTransformFeedbacksNV = glGenTransformFeedbacksNV_Z_Z;
__gshared glGenTransformFeedbacksNV_Z_Z = function void (GLsizei n, GLuint *ids) { glGenTransformFeedbacksNV_Z_Z_loader(n, ids); };
private void glGenTransformFeedbacksNV_Z_Z_loader (GLsizei n, GLuint *ids) {
  *cast(void**)&glGenTransformFeedbacksNV_Z_Z = glbindGetProcAddress(`glGenTransformFeedbacksNV`);
  if (*cast(void**)&glGenTransformFeedbacksNV_Z_Z is null) assert(0, `OpenGL function 'glGenTransformFeedbacksNV' not found!`);
  glGenTransformFeedbacksNV_Z_Z(n, ids);
}
alias glGenVertexArrays = glGenVertexArrays_Z_Z;
__gshared glGenVertexArrays_Z_Z = function void (GLsizei n, GLuint *arrays) { glGenVertexArrays_Z_Z_loader(n, arrays); };
private void glGenVertexArrays_Z_Z_loader (GLsizei n, GLuint *arrays) {
  *cast(void**)&glGenVertexArrays_Z_Z = glbindGetProcAddress(`glGenVertexArrays`);
  if (*cast(void**)&glGenVertexArrays_Z_Z is null) assert(0, `OpenGL function 'glGenVertexArrays' not found!`);
  glGenVertexArrays_Z_Z(n, arrays);
}
alias glGenVertexArraysAPPLE = glGenVertexArraysAPPLE_Z_Z;
__gshared glGenVertexArraysAPPLE_Z_Z = function void (GLsizei n, GLuint *arrays) { glGenVertexArraysAPPLE_Z_Z_loader(n, arrays); };
private void glGenVertexArraysAPPLE_Z_Z_loader (GLsizei n, GLuint *arrays) {
  *cast(void**)&glGenVertexArraysAPPLE_Z_Z = glbindGetProcAddress(`glGenVertexArraysAPPLE`);
  if (*cast(void**)&glGenVertexArraysAPPLE_Z_Z is null) assert(0, `OpenGL function 'glGenVertexArraysAPPLE' not found!`);
  glGenVertexArraysAPPLE_Z_Z(n, arrays);
}
alias glGenVertexArraysOES = glGenVertexArraysOES_Z_Z;
__gshared glGenVertexArraysOES_Z_Z = function void (GLsizei n, GLuint *arrays) { glGenVertexArraysOES_Z_Z_loader(n, arrays); };
private void glGenVertexArraysOES_Z_Z_loader (GLsizei n, GLuint *arrays) {
  *cast(void**)&glGenVertexArraysOES_Z_Z = glbindGetProcAddress(`glGenVertexArraysOES`);
  if (*cast(void**)&glGenVertexArraysOES_Z_Z is null) assert(0, `OpenGL function 'glGenVertexArraysOES' not found!`);
  glGenVertexArraysOES_Z_Z(n, arrays);
}
alias glGenVertexShadersEXT = glGenVertexShadersEXT_Z_Z;
__gshared glGenVertexShadersEXT_Z_Z = function GLuint (GLuint range) { return glGenVertexShadersEXT_Z_Z_loader(range); };
private GLuint glGenVertexShadersEXT_Z_Z_loader (GLuint range) {
  *cast(void**)&glGenVertexShadersEXT_Z_Z = glbindGetProcAddress(`glGenVertexShadersEXT`);
  if (*cast(void**)&glGenVertexShadersEXT_Z_Z is null) assert(0, `OpenGL function 'glGenVertexShadersEXT' not found!`);
  return glGenVertexShadersEXT_Z_Z(range);
}
alias glGenerateMipmap = glGenerateMipmap_Z_Z;
__gshared glGenerateMipmap_Z_Z = function void (GLenum target) { glGenerateMipmap_Z_Z_loader(target); };
private void glGenerateMipmap_Z_Z_loader (GLenum target) {
  *cast(void**)&glGenerateMipmap_Z_Z = glbindGetProcAddress(`glGenerateMipmap`);
  if (*cast(void**)&glGenerateMipmap_Z_Z is null) assert(0, `OpenGL function 'glGenerateMipmap' not found!`);
  glGenerateMipmap_Z_Z(target);
}
alias glGenerateMipmapEXT = glGenerateMipmapEXT_Z_Z;
__gshared glGenerateMipmapEXT_Z_Z = function void (GLenum target) { glGenerateMipmapEXT_Z_Z_loader(target); };
private void glGenerateMipmapEXT_Z_Z_loader (GLenum target) {
  *cast(void**)&glGenerateMipmapEXT_Z_Z = glbindGetProcAddress(`glGenerateMipmapEXT`);
  if (*cast(void**)&glGenerateMipmapEXT_Z_Z is null) assert(0, `OpenGL function 'glGenerateMipmapEXT' not found!`);
  glGenerateMipmapEXT_Z_Z(target);
}
alias glGenerateMipmapOES = glGenerateMipmapOES_Z_Z;
__gshared glGenerateMipmapOES_Z_Z = function void (GLenum target) { glGenerateMipmapOES_Z_Z_loader(target); };
private void glGenerateMipmapOES_Z_Z_loader (GLenum target) {
  *cast(void**)&glGenerateMipmapOES_Z_Z = glbindGetProcAddress(`glGenerateMipmapOES`);
  if (*cast(void**)&glGenerateMipmapOES_Z_Z is null) assert(0, `OpenGL function 'glGenerateMipmapOES' not found!`);
  glGenerateMipmapOES_Z_Z(target);
}
alias glGenerateMultiTexMipmapEXT = glGenerateMultiTexMipmapEXT_Z_Z;
__gshared glGenerateMultiTexMipmapEXT_Z_Z = function void (GLenum texunit, GLenum target) { glGenerateMultiTexMipmapEXT_Z_Z_loader(texunit, target); };
private void glGenerateMultiTexMipmapEXT_Z_Z_loader (GLenum texunit, GLenum target) {
  *cast(void**)&glGenerateMultiTexMipmapEXT_Z_Z = glbindGetProcAddress(`glGenerateMultiTexMipmapEXT`);
  if (*cast(void**)&glGenerateMultiTexMipmapEXT_Z_Z is null) assert(0, `OpenGL function 'glGenerateMultiTexMipmapEXT' not found!`);
  glGenerateMultiTexMipmapEXT_Z_Z(texunit, target);
}
alias glGenerateTextureMipmap = glGenerateTextureMipmap_Z_Z;
__gshared glGenerateTextureMipmap_Z_Z = function void (GLuint texture) { glGenerateTextureMipmap_Z_Z_loader(texture); };
private void glGenerateTextureMipmap_Z_Z_loader (GLuint texture) {
  *cast(void**)&glGenerateTextureMipmap_Z_Z = glbindGetProcAddress(`glGenerateTextureMipmap`);
  if (*cast(void**)&glGenerateTextureMipmap_Z_Z is null) assert(0, `OpenGL function 'glGenerateTextureMipmap' not found!`);
  glGenerateTextureMipmap_Z_Z(texture);
}
alias glGenerateTextureMipmapEXT = glGenerateTextureMipmapEXT_Z_Z;
__gshared glGenerateTextureMipmapEXT_Z_Z = function void (GLuint texture, GLenum target) { glGenerateTextureMipmapEXT_Z_Z_loader(texture, target); };
private void glGenerateTextureMipmapEXT_Z_Z_loader (GLuint texture, GLenum target) {
  *cast(void**)&glGenerateTextureMipmapEXT_Z_Z = glbindGetProcAddress(`glGenerateTextureMipmapEXT`);
  if (*cast(void**)&glGenerateTextureMipmapEXT_Z_Z is null) assert(0, `OpenGL function 'glGenerateTextureMipmapEXT' not found!`);
  glGenerateTextureMipmapEXT_Z_Z(texture, target);
}
alias glGetActiveAtomicCounterBufferiv = glGetActiveAtomicCounterBufferiv_Z_Z;
__gshared glGetActiveAtomicCounterBufferiv_Z_Z = function void (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) { glGetActiveAtomicCounterBufferiv_Z_Z_loader(program, bufferIndex, pname, params); };
private void glGetActiveAtomicCounterBufferiv_Z_Z_loader (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {
  *cast(void**)&glGetActiveAtomicCounterBufferiv_Z_Z = glbindGetProcAddress(`glGetActiveAtomicCounterBufferiv`);
  if (*cast(void**)&glGetActiveAtomicCounterBufferiv_Z_Z is null) assert(0, `OpenGL function 'glGetActiveAtomicCounterBufferiv' not found!`);
  glGetActiveAtomicCounterBufferiv_Z_Z(program, bufferIndex, pname, params);
}
alias glGetActiveAttrib = glGetActiveAttrib_Z_Z;
__gshared glGetActiveAttrib_Z_Z = function void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { glGetActiveAttrib_Z_Z_loader(program, index, bufSize, length, size, type, name); };
private void glGetActiveAttrib_Z_Z_loader (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  *cast(void**)&glGetActiveAttrib_Z_Z = glbindGetProcAddress(`glGetActiveAttrib`);
  if (*cast(void**)&glGetActiveAttrib_Z_Z is null) assert(0, `OpenGL function 'glGetActiveAttrib' not found!`);
  glGetActiveAttrib_Z_Z(program, index, bufSize, length, size, type, name);
}
alias glGetActiveAttribARB = glGetActiveAttribARB_Z_Z;
__gshared glGetActiveAttribARB_Z_Z = function void (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) { glGetActiveAttribARB_Z_Z_loader(programObj, index, maxLength, length, size, type, name); };
private void glGetActiveAttribARB_Z_Z_loader (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
  *cast(void**)&glGetActiveAttribARB_Z_Z = glbindGetProcAddress(`glGetActiveAttribARB`);
  if (*cast(void**)&glGetActiveAttribARB_Z_Z is null) assert(0, `OpenGL function 'glGetActiveAttribARB' not found!`);
  glGetActiveAttribARB_Z_Z(programObj, index, maxLength, length, size, type, name);
}
alias glGetActiveSubroutineName = glGetActiveSubroutineName_Z_Z;
__gshared glGetActiveSubroutineName_Z_Z = function void (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) { glGetActiveSubroutineName_Z_Z_loader(program, shadertype, index, bufsize, length, name); };
private void glGetActiveSubroutineName_Z_Z_loader (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
  *cast(void**)&glGetActiveSubroutineName_Z_Z = glbindGetProcAddress(`glGetActiveSubroutineName`);
  if (*cast(void**)&glGetActiveSubroutineName_Z_Z is null) assert(0, `OpenGL function 'glGetActiveSubroutineName' not found!`);
  glGetActiveSubroutineName_Z_Z(program, shadertype, index, bufsize, length, name);
}
alias glGetActiveSubroutineUniformName = glGetActiveSubroutineUniformName_Z_Z;
__gshared glGetActiveSubroutineUniformName_Z_Z = function void (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) { glGetActiveSubroutineUniformName_Z_Z_loader(program, shadertype, index, bufsize, length, name); };
private void glGetActiveSubroutineUniformName_Z_Z_loader (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
  *cast(void**)&glGetActiveSubroutineUniformName_Z_Z = glbindGetProcAddress(`glGetActiveSubroutineUniformName`);
  if (*cast(void**)&glGetActiveSubroutineUniformName_Z_Z is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformName' not found!`);
  glGetActiveSubroutineUniformName_Z_Z(program, shadertype, index, bufsize, length, name);
}
alias glGetActiveSubroutineUniformiv = glGetActiveSubroutineUniformiv_Z_Z;
__gshared glGetActiveSubroutineUniformiv_Z_Z = function void (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) { glGetActiveSubroutineUniformiv_Z_Z_loader(program, shadertype, index, pname, values); };
private void glGetActiveSubroutineUniformiv_Z_Z_loader (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {
  *cast(void**)&glGetActiveSubroutineUniformiv_Z_Z = glbindGetProcAddress(`glGetActiveSubroutineUniformiv`);
  if (*cast(void**)&glGetActiveSubroutineUniformiv_Z_Z is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformiv' not found!`);
  glGetActiveSubroutineUniformiv_Z_Z(program, shadertype, index, pname, values);
}
alias glGetActiveUniform = glGetActiveUniform_Z_Z;
__gshared glGetActiveUniform_Z_Z = function void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { glGetActiveUniform_Z_Z_loader(program, index, bufSize, length, size, type, name); };
private void glGetActiveUniform_Z_Z_loader (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  *cast(void**)&glGetActiveUniform_Z_Z = glbindGetProcAddress(`glGetActiveUniform`);
  if (*cast(void**)&glGetActiveUniform_Z_Z is null) assert(0, `OpenGL function 'glGetActiveUniform' not found!`);
  glGetActiveUniform_Z_Z(program, index, bufSize, length, size, type, name);
}
alias glGetActiveUniformARB = glGetActiveUniformARB_Z_Z;
__gshared glGetActiveUniformARB_Z_Z = function void (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) { glGetActiveUniformARB_Z_Z_loader(programObj, index, maxLength, length, size, type, name); };
private void glGetActiveUniformARB_Z_Z_loader (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
  *cast(void**)&glGetActiveUniformARB_Z_Z = glbindGetProcAddress(`glGetActiveUniformARB`);
  if (*cast(void**)&glGetActiveUniformARB_Z_Z is null) assert(0, `OpenGL function 'glGetActiveUniformARB' not found!`);
  glGetActiveUniformARB_Z_Z(programObj, index, maxLength, length, size, type, name);
}
alias glGetActiveUniformBlockName = glGetActiveUniformBlockName_Z_Z;
__gshared glGetActiveUniformBlockName_Z_Z = function void (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) { glGetActiveUniformBlockName_Z_Z_loader(program, uniformBlockIndex, bufSize, length, uniformBlockName); };
private void glGetActiveUniformBlockName_Z_Z_loader (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
  *cast(void**)&glGetActiveUniformBlockName_Z_Z = glbindGetProcAddress(`glGetActiveUniformBlockName`);
  if (*cast(void**)&glGetActiveUniformBlockName_Z_Z is null) assert(0, `OpenGL function 'glGetActiveUniformBlockName' not found!`);
  glGetActiveUniformBlockName_Z_Z(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
alias glGetActiveUniformBlockiv = glGetActiveUniformBlockiv_Z_Z;
__gshared glGetActiveUniformBlockiv_Z_Z = function void (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) { glGetActiveUniformBlockiv_Z_Z_loader(program, uniformBlockIndex, pname, params); };
private void glGetActiveUniformBlockiv_Z_Z_loader (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
  *cast(void**)&glGetActiveUniformBlockiv_Z_Z = glbindGetProcAddress(`glGetActiveUniformBlockiv`);
  if (*cast(void**)&glGetActiveUniformBlockiv_Z_Z is null) assert(0, `OpenGL function 'glGetActiveUniformBlockiv' not found!`);
  glGetActiveUniformBlockiv_Z_Z(program, uniformBlockIndex, pname, params);
}
alias glGetActiveUniformName = glGetActiveUniformName_Z_Z;
__gshared glGetActiveUniformName_Z_Z = function void (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) { glGetActiveUniformName_Z_Z_loader(program, uniformIndex, bufSize, length, uniformName); };
private void glGetActiveUniformName_Z_Z_loader (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {
  *cast(void**)&glGetActiveUniformName_Z_Z = glbindGetProcAddress(`glGetActiveUniformName`);
  if (*cast(void**)&glGetActiveUniformName_Z_Z is null) assert(0, `OpenGL function 'glGetActiveUniformName' not found!`);
  glGetActiveUniformName_Z_Z(program, uniformIndex, bufSize, length, uniformName);
}
alias glGetActiveUniformsiv = glGetActiveUniformsiv_Z_Z;
__gshared glGetActiveUniformsiv_Z_Z = function void (GLuint program, GLsizei uniformCount, const(GLuint)* uniformIndices, GLenum pname, GLint *params) { glGetActiveUniformsiv_Z_Z_loader(program, uniformCount, uniformIndices, pname, params); };
private void glGetActiveUniformsiv_Z_Z_loader (GLuint program, GLsizei uniformCount, const(GLuint)* uniformIndices, GLenum pname, GLint *params) {
  *cast(void**)&glGetActiveUniformsiv_Z_Z = glbindGetProcAddress(`glGetActiveUniformsiv`);
  if (*cast(void**)&glGetActiveUniformsiv_Z_Z is null) assert(0, `OpenGL function 'glGetActiveUniformsiv' not found!`);
  glGetActiveUniformsiv_Z_Z(program, uniformCount, uniformIndices, pname, params);
}
alias glGetActiveVaryingNV = glGetActiveVaryingNV_Z_Z;
__gshared glGetActiveVaryingNV_Z_Z = function void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { glGetActiveVaryingNV_Z_Z_loader(program, index, bufSize, length, size, type, name); };
private void glGetActiveVaryingNV_Z_Z_loader (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  *cast(void**)&glGetActiveVaryingNV_Z_Z = glbindGetProcAddress(`glGetActiveVaryingNV`);
  if (*cast(void**)&glGetActiveVaryingNV_Z_Z is null) assert(0, `OpenGL function 'glGetActiveVaryingNV' not found!`);
  glGetActiveVaryingNV_Z_Z(program, index, bufSize, length, size, type, name);
}
alias glGetArrayObjectfvATI = glGetArrayObjectfvATI_Z_Z;
__gshared glGetArrayObjectfvATI_Z_Z = function void (GLenum array, GLenum pname, GLfloat *params) { glGetArrayObjectfvATI_Z_Z_loader(array, pname, params); };
private void glGetArrayObjectfvATI_Z_Z_loader (GLenum array, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetArrayObjectfvATI_Z_Z = glbindGetProcAddress(`glGetArrayObjectfvATI`);
  if (*cast(void**)&glGetArrayObjectfvATI_Z_Z is null) assert(0, `OpenGL function 'glGetArrayObjectfvATI' not found!`);
  glGetArrayObjectfvATI_Z_Z(array, pname, params);
}
alias glGetArrayObjectivATI = glGetArrayObjectivATI_Z_Z;
__gshared glGetArrayObjectivATI_Z_Z = function void (GLenum array, GLenum pname, GLint *params) { glGetArrayObjectivATI_Z_Z_loader(array, pname, params); };
private void glGetArrayObjectivATI_Z_Z_loader (GLenum array, GLenum pname, GLint *params) {
  *cast(void**)&glGetArrayObjectivATI_Z_Z = glbindGetProcAddress(`glGetArrayObjectivATI`);
  if (*cast(void**)&glGetArrayObjectivATI_Z_Z is null) assert(0, `OpenGL function 'glGetArrayObjectivATI' not found!`);
  glGetArrayObjectivATI_Z_Z(array, pname, params);
}
alias glGetAttachedObjectsARB = glGetAttachedObjectsARB_Z_Z;
__gshared glGetAttachedObjectsARB_Z_Z = function void (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) { glGetAttachedObjectsARB_Z_Z_loader(containerObj, maxCount, count, obj); };
private void glGetAttachedObjectsARB_Z_Z_loader (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) {
  *cast(void**)&glGetAttachedObjectsARB_Z_Z = glbindGetProcAddress(`glGetAttachedObjectsARB`);
  if (*cast(void**)&glGetAttachedObjectsARB_Z_Z is null) assert(0, `OpenGL function 'glGetAttachedObjectsARB' not found!`);
  glGetAttachedObjectsARB_Z_Z(containerObj, maxCount, count, obj);
}
alias glGetAttachedShaders = glGetAttachedShaders_Z_Z;
__gshared glGetAttachedShaders_Z_Z = function void (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) { glGetAttachedShaders_Z_Z_loader(program, maxCount, count, shaders); };
private void glGetAttachedShaders_Z_Z_loader (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
  *cast(void**)&glGetAttachedShaders_Z_Z = glbindGetProcAddress(`glGetAttachedShaders`);
  if (*cast(void**)&glGetAttachedShaders_Z_Z is null) assert(0, `OpenGL function 'glGetAttachedShaders' not found!`);
  glGetAttachedShaders_Z_Z(program, maxCount, count, shaders);
}
alias glGetAttribLocation = glGetAttribLocation_Z_Z;
__gshared glGetAttribLocation_Z_Z = function GLint (GLuint program, const(GLchar)* name) { return glGetAttribLocation_Z_Z_loader(program, name); };
private GLint glGetAttribLocation_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glGetAttribLocation_Z_Z = glbindGetProcAddress(`glGetAttribLocation`);
  if (*cast(void**)&glGetAttribLocation_Z_Z is null) assert(0, `OpenGL function 'glGetAttribLocation' not found!`);
  return glGetAttribLocation_Z_Z(program, name);
}
alias glGetAttribLocationARB = glGetAttribLocationARB_Z_Z;
__gshared glGetAttribLocationARB_Z_Z = function GLint (GLhandleARB programObj, const(GLcharARB)* name) { return glGetAttribLocationARB_Z_Z_loader(programObj, name); };
private GLint glGetAttribLocationARB_Z_Z_loader (GLhandleARB programObj, const(GLcharARB)* name) {
  *cast(void**)&glGetAttribLocationARB_Z_Z = glbindGetProcAddress(`glGetAttribLocationARB`);
  if (*cast(void**)&glGetAttribLocationARB_Z_Z is null) assert(0, `OpenGL function 'glGetAttribLocationARB' not found!`);
  return glGetAttribLocationARB_Z_Z(programObj, name);
}
alias glGetBooleanIndexedvEXT = glGetBooleanIndexedvEXT_Z_Z;
__gshared glGetBooleanIndexedvEXT_Z_Z = function void (GLenum target, GLuint index, GLboolean *data) { glGetBooleanIndexedvEXT_Z_Z_loader(target, index, data); };
private void glGetBooleanIndexedvEXT_Z_Z_loader (GLenum target, GLuint index, GLboolean *data) {
  *cast(void**)&glGetBooleanIndexedvEXT_Z_Z = glbindGetProcAddress(`glGetBooleanIndexedvEXT`);
  if (*cast(void**)&glGetBooleanIndexedvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetBooleanIndexedvEXT' not found!`);
  glGetBooleanIndexedvEXT_Z_Z(target, index, data);
}
alias glGetBooleani_v = glGetBooleani_v_Z_Z;
__gshared glGetBooleani_v_Z_Z = function void (GLenum target, GLuint index, GLboolean *data) { glGetBooleani_v_Z_Z_loader(target, index, data); };
private void glGetBooleani_v_Z_Z_loader (GLenum target, GLuint index, GLboolean *data) {
  *cast(void**)&glGetBooleani_v_Z_Z = glbindGetProcAddress(`glGetBooleani_v`);
  if (*cast(void**)&glGetBooleani_v_Z_Z is null) assert(0, `OpenGL function 'glGetBooleani_v' not found!`);
  glGetBooleani_v_Z_Z(target, index, data);
}
alias glGetBooleanv = glGetBooleanv_Z_Z;
__gshared glGetBooleanv_Z_Z = function void (GLenum pname, GLboolean *data) { glGetBooleanv_Z_Z_loader(pname, data); };
private void glGetBooleanv_Z_Z_loader (GLenum pname, GLboolean *data) {
  *cast(void**)&glGetBooleanv_Z_Z = glbindGetProcAddress(`glGetBooleanv`);
  if (*cast(void**)&glGetBooleanv_Z_Z is null) assert(0, `OpenGL function 'glGetBooleanv' not found!`);
  glGetBooleanv_Z_Z(pname, data);
}
alias glGetBufferParameteri64v = glGetBufferParameteri64v_Z_Z;
__gshared glGetBufferParameteri64v_Z_Z = function void (GLenum target, GLenum pname, GLint64 *params) { glGetBufferParameteri64v_Z_Z_loader(target, pname, params); };
private void glGetBufferParameteri64v_Z_Z_loader (GLenum target, GLenum pname, GLint64 *params) {
  *cast(void**)&glGetBufferParameteri64v_Z_Z = glbindGetProcAddress(`glGetBufferParameteri64v`);
  if (*cast(void**)&glGetBufferParameteri64v_Z_Z is null) assert(0, `OpenGL function 'glGetBufferParameteri64v' not found!`);
  glGetBufferParameteri64v_Z_Z(target, pname, params);
}
alias glGetBufferParameteriv = glGetBufferParameteriv_Z_Z;
__gshared glGetBufferParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetBufferParameteriv_Z_Z_loader(target, pname, params); };
private void glGetBufferParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetBufferParameteriv_Z_Z = glbindGetProcAddress(`glGetBufferParameteriv`);
  if (*cast(void**)&glGetBufferParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetBufferParameteriv' not found!`);
  glGetBufferParameteriv_Z_Z(target, pname, params);
}
alias glGetBufferParameterivARB = glGetBufferParameterivARB_Z_Z;
__gshared glGetBufferParameterivARB_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetBufferParameterivARB_Z_Z_loader(target, pname, params); };
private void glGetBufferParameterivARB_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetBufferParameterivARB_Z_Z = glbindGetProcAddress(`glGetBufferParameterivARB`);
  if (*cast(void**)&glGetBufferParameterivARB_Z_Z is null) assert(0, `OpenGL function 'glGetBufferParameterivARB' not found!`);
  glGetBufferParameterivARB_Z_Z(target, pname, params);
}
alias glGetBufferParameterui64vNV = glGetBufferParameterui64vNV_Z_Z;
__gshared glGetBufferParameterui64vNV_Z_Z = function void (GLenum target, GLenum pname, GLuint64EXT *params) { glGetBufferParameterui64vNV_Z_Z_loader(target, pname, params); };
private void glGetBufferParameterui64vNV_Z_Z_loader (GLenum target, GLenum pname, GLuint64EXT *params) {
  *cast(void**)&glGetBufferParameterui64vNV_Z_Z = glbindGetProcAddress(`glGetBufferParameterui64vNV`);
  if (*cast(void**)&glGetBufferParameterui64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetBufferParameterui64vNV' not found!`);
  glGetBufferParameterui64vNV_Z_Z(target, pname, params);
}
alias glGetBufferPointerv = glGetBufferPointerv_Z_Z;
__gshared glGetBufferPointerv_Z_Z = function void (GLenum target, GLenum pname, void **params) { glGetBufferPointerv_Z_Z_loader(target, pname, params); };
private void glGetBufferPointerv_Z_Z_loader (GLenum target, GLenum pname, void **params) {
  *cast(void**)&glGetBufferPointerv_Z_Z = glbindGetProcAddress(`glGetBufferPointerv`);
  if (*cast(void**)&glGetBufferPointerv_Z_Z is null) assert(0, `OpenGL function 'glGetBufferPointerv' not found!`);
  glGetBufferPointerv_Z_Z(target, pname, params);
}
alias glGetBufferPointervARB = glGetBufferPointervARB_Z_Z;
__gshared glGetBufferPointervARB_Z_Z = function void (GLenum target, GLenum pname, void **params) { glGetBufferPointervARB_Z_Z_loader(target, pname, params); };
private void glGetBufferPointervARB_Z_Z_loader (GLenum target, GLenum pname, void **params) {
  *cast(void**)&glGetBufferPointervARB_Z_Z = glbindGetProcAddress(`glGetBufferPointervARB`);
  if (*cast(void**)&glGetBufferPointervARB_Z_Z is null) assert(0, `OpenGL function 'glGetBufferPointervARB' not found!`);
  glGetBufferPointervARB_Z_Z(target, pname, params);
}
alias glGetBufferPointervOES = glGetBufferPointervOES_Z_Z;
__gshared glGetBufferPointervOES_Z_Z = function void (GLenum target, GLenum pname, void **params) { glGetBufferPointervOES_Z_Z_loader(target, pname, params); };
private void glGetBufferPointervOES_Z_Z_loader (GLenum target, GLenum pname, void **params) {
  *cast(void**)&glGetBufferPointervOES_Z_Z = glbindGetProcAddress(`glGetBufferPointervOES`);
  if (*cast(void**)&glGetBufferPointervOES_Z_Z is null) assert(0, `OpenGL function 'glGetBufferPointervOES' not found!`);
  glGetBufferPointervOES_Z_Z(target, pname, params);
}
alias glGetBufferSubData = glGetBufferSubData_Z_Z;
__gshared glGetBufferSubData_Z_Z = function void (GLenum target, GLintptr offset, GLsizeiptr size, void *data) { glGetBufferSubData_Z_Z_loader(target, offset, size, data); };
private void glGetBufferSubData_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
  *cast(void**)&glGetBufferSubData_Z_Z = glbindGetProcAddress(`glGetBufferSubData`);
  if (*cast(void**)&glGetBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glGetBufferSubData' not found!`);
  glGetBufferSubData_Z_Z(target, offset, size, data);
}
alias glGetBufferSubDataARB = glGetBufferSubDataARB_Z_Z;
__gshared glGetBufferSubDataARB_Z_Z = function void (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data) { glGetBufferSubDataARB_Z_Z_loader(target, offset, size, data); };
private void glGetBufferSubDataARB_Z_Z_loader (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data) {
  *cast(void**)&glGetBufferSubDataARB_Z_Z = glbindGetProcAddress(`glGetBufferSubDataARB`);
  if (*cast(void**)&glGetBufferSubDataARB_Z_Z is null) assert(0, `OpenGL function 'glGetBufferSubDataARB' not found!`);
  glGetBufferSubDataARB_Z_Z(target, offset, size, data);
}
alias glGetClipPlane = glGetClipPlane_Z_Z;
__gshared glGetClipPlane_Z_Z = function void (GLenum plane, GLdouble *equation) { glGetClipPlane_Z_Z_loader(plane, equation); };
private void glGetClipPlane_Z_Z_loader (GLenum plane, GLdouble *equation) {
  *cast(void**)&glGetClipPlane_Z_Z = glbindGetProcAddress(`glGetClipPlane`);
  if (*cast(void**)&glGetClipPlane_Z_Z is null) assert(0, `OpenGL function 'glGetClipPlane' not found!`);
  glGetClipPlane_Z_Z(plane, equation);
}
alias glGetClipPlanef = glGetClipPlanef_Z_Z;
__gshared glGetClipPlanef_Z_Z = function void (GLenum plane, GLfloat *equation) { glGetClipPlanef_Z_Z_loader(plane, equation); };
private void glGetClipPlanef_Z_Z_loader (GLenum plane, GLfloat *equation) {
  *cast(void**)&glGetClipPlanef_Z_Z = glbindGetProcAddress(`glGetClipPlanef`);
  if (*cast(void**)&glGetClipPlanef_Z_Z is null) assert(0, `OpenGL function 'glGetClipPlanef' not found!`);
  glGetClipPlanef_Z_Z(plane, equation);
}
alias glGetClipPlanefOES = glGetClipPlanefOES_Z_Z;
__gshared glGetClipPlanefOES_Z_Z = function void (GLenum plane, GLfloat *equation) { glGetClipPlanefOES_Z_Z_loader(plane, equation); };
private void glGetClipPlanefOES_Z_Z_loader (GLenum plane, GLfloat *equation) {
  *cast(void**)&glGetClipPlanefOES_Z_Z = glbindGetProcAddress(`glGetClipPlanefOES`);
  if (*cast(void**)&glGetClipPlanefOES_Z_Z is null) assert(0, `OpenGL function 'glGetClipPlanefOES' not found!`);
  glGetClipPlanefOES_Z_Z(plane, equation);
}
alias glGetClipPlanex = glGetClipPlanex_Z_Z;
__gshared glGetClipPlanex_Z_Z = function void (GLenum plane, GLfixed *equation) { glGetClipPlanex_Z_Z_loader(plane, equation); };
private void glGetClipPlanex_Z_Z_loader (GLenum plane, GLfixed *equation) {
  *cast(void**)&glGetClipPlanex_Z_Z = glbindGetProcAddress(`glGetClipPlanex`);
  if (*cast(void**)&glGetClipPlanex_Z_Z is null) assert(0, `OpenGL function 'glGetClipPlanex' not found!`);
  glGetClipPlanex_Z_Z(plane, equation);
}
alias glGetClipPlanexOES = glGetClipPlanexOES_Z_Z;
__gshared glGetClipPlanexOES_Z_Z = function void (GLenum plane, GLfixed *equation) { glGetClipPlanexOES_Z_Z_loader(plane, equation); };
private void glGetClipPlanexOES_Z_Z_loader (GLenum plane, GLfixed *equation) {
  *cast(void**)&glGetClipPlanexOES_Z_Z = glbindGetProcAddress(`glGetClipPlanexOES`);
  if (*cast(void**)&glGetClipPlanexOES_Z_Z is null) assert(0, `OpenGL function 'glGetClipPlanexOES' not found!`);
  glGetClipPlanexOES_Z_Z(plane, equation);
}
alias glGetColorTable = glGetColorTable_Z_Z;
__gshared glGetColorTable_Z_Z = function void (GLenum target, GLenum format, GLenum type, void *table) { glGetColorTable_Z_Z_loader(target, format, type, table); };
private void glGetColorTable_Z_Z_loader (GLenum target, GLenum format, GLenum type, void *table) {
  *cast(void**)&glGetColorTable_Z_Z = glbindGetProcAddress(`glGetColorTable`);
  if (*cast(void**)&glGetColorTable_Z_Z is null) assert(0, `OpenGL function 'glGetColorTable' not found!`);
  glGetColorTable_Z_Z(target, format, type, table);
}
alias glGetColorTableEXT = glGetColorTableEXT_Z_Z;
__gshared glGetColorTableEXT_Z_Z = function void (GLenum target, GLenum format, GLenum type, void *data) { glGetColorTableEXT_Z_Z_loader(target, format, type, data); };
private void glGetColorTableEXT_Z_Z_loader (GLenum target, GLenum format, GLenum type, void *data) {
  *cast(void**)&glGetColorTableEXT_Z_Z = glbindGetProcAddress(`glGetColorTableEXT`);
  if (*cast(void**)&glGetColorTableEXT_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableEXT' not found!`);
  glGetColorTableEXT_Z_Z(target, format, type, data);
}
alias glGetColorTableParameterfv = glGetColorTableParameterfv_Z_Z;
__gshared glGetColorTableParameterfv_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetColorTableParameterfv_Z_Z_loader(target, pname, params); };
private void glGetColorTableParameterfv_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetColorTableParameterfv_Z_Z = glbindGetProcAddress(`glGetColorTableParameterfv`);
  if (*cast(void**)&glGetColorTableParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterfv' not found!`);
  glGetColorTableParameterfv_Z_Z(target, pname, params);
}
alias glGetColorTableParameterfvEXT = glGetColorTableParameterfvEXT_Z_Z;
__gshared glGetColorTableParameterfvEXT_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetColorTableParameterfvEXT_Z_Z_loader(target, pname, params); };
private void glGetColorTableParameterfvEXT_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetColorTableParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetColorTableParameterfvEXT`);
  if (*cast(void**)&glGetColorTableParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterfvEXT' not found!`);
  glGetColorTableParameterfvEXT_Z_Z(target, pname, params);
}
alias glGetColorTableParameterfvSGI = glGetColorTableParameterfvSGI_Z_Z;
__gshared glGetColorTableParameterfvSGI_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetColorTableParameterfvSGI_Z_Z_loader(target, pname, params); };
private void glGetColorTableParameterfvSGI_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetColorTableParameterfvSGI_Z_Z = glbindGetProcAddress(`glGetColorTableParameterfvSGI`);
  if (*cast(void**)&glGetColorTableParameterfvSGI_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterfvSGI' not found!`);
  glGetColorTableParameterfvSGI_Z_Z(target, pname, params);
}
alias glGetColorTableParameteriv = glGetColorTableParameteriv_Z_Z;
__gshared glGetColorTableParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetColorTableParameteriv_Z_Z_loader(target, pname, params); };
private void glGetColorTableParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetColorTableParameteriv_Z_Z = glbindGetProcAddress(`glGetColorTableParameteriv`);
  if (*cast(void**)&glGetColorTableParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableParameteriv' not found!`);
  glGetColorTableParameteriv_Z_Z(target, pname, params);
}
alias glGetColorTableParameterivEXT = glGetColorTableParameterivEXT_Z_Z;
__gshared glGetColorTableParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetColorTableParameterivEXT_Z_Z_loader(target, pname, params); };
private void glGetColorTableParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetColorTableParameterivEXT_Z_Z = glbindGetProcAddress(`glGetColorTableParameterivEXT`);
  if (*cast(void**)&glGetColorTableParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterivEXT' not found!`);
  glGetColorTableParameterivEXT_Z_Z(target, pname, params);
}
alias glGetColorTableParameterivSGI = glGetColorTableParameterivSGI_Z_Z;
__gshared glGetColorTableParameterivSGI_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetColorTableParameterivSGI_Z_Z_loader(target, pname, params); };
private void glGetColorTableParameterivSGI_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetColorTableParameterivSGI_Z_Z = glbindGetProcAddress(`glGetColorTableParameterivSGI`);
  if (*cast(void**)&glGetColorTableParameterivSGI_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableParameterivSGI' not found!`);
  glGetColorTableParameterivSGI_Z_Z(target, pname, params);
}
alias glGetColorTableSGI = glGetColorTableSGI_Z_Z;
__gshared glGetColorTableSGI_Z_Z = function void (GLenum target, GLenum format, GLenum type, void *table) { glGetColorTableSGI_Z_Z_loader(target, format, type, table); };
private void glGetColorTableSGI_Z_Z_loader (GLenum target, GLenum format, GLenum type, void *table) {
  *cast(void**)&glGetColorTableSGI_Z_Z = glbindGetProcAddress(`glGetColorTableSGI`);
  if (*cast(void**)&glGetColorTableSGI_Z_Z is null) assert(0, `OpenGL function 'glGetColorTableSGI' not found!`);
  glGetColorTableSGI_Z_Z(target, format, type, table);
}
alias glGetCombinerInputParameterfvNV = glGetCombinerInputParameterfvNV_Z_Z;
__gshared glGetCombinerInputParameterfvNV_Z_Z = function void (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) { glGetCombinerInputParameterfvNV_Z_Z_loader(stage, portion, variable, pname, params); };
private void glGetCombinerInputParameterfvNV_Z_Z_loader (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetCombinerInputParameterfvNV_Z_Z = glbindGetProcAddress(`glGetCombinerInputParameterfvNV`);
  if (*cast(void**)&glGetCombinerInputParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetCombinerInputParameterfvNV' not found!`);
  glGetCombinerInputParameterfvNV_Z_Z(stage, portion, variable, pname, params);
}
alias glGetCombinerInputParameterivNV = glGetCombinerInputParameterivNV_Z_Z;
__gshared glGetCombinerInputParameterivNV_Z_Z = function void (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) { glGetCombinerInputParameterivNV_Z_Z_loader(stage, portion, variable, pname, params); };
private void glGetCombinerInputParameterivNV_Z_Z_loader (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) {
  *cast(void**)&glGetCombinerInputParameterivNV_Z_Z = glbindGetProcAddress(`glGetCombinerInputParameterivNV`);
  if (*cast(void**)&glGetCombinerInputParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glGetCombinerInputParameterivNV' not found!`);
  glGetCombinerInputParameterivNV_Z_Z(stage, portion, variable, pname, params);
}
alias glGetCombinerOutputParameterfvNV = glGetCombinerOutputParameterfvNV_Z_Z;
__gshared glGetCombinerOutputParameterfvNV_Z_Z = function void (GLenum stage, GLenum portion, GLenum pname, GLfloat *params) { glGetCombinerOutputParameterfvNV_Z_Z_loader(stage, portion, pname, params); };
private void glGetCombinerOutputParameterfvNV_Z_Z_loader (GLenum stage, GLenum portion, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetCombinerOutputParameterfvNV_Z_Z = glbindGetProcAddress(`glGetCombinerOutputParameterfvNV`);
  if (*cast(void**)&glGetCombinerOutputParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterfvNV' not found!`);
  glGetCombinerOutputParameterfvNV_Z_Z(stage, portion, pname, params);
}
alias glGetCombinerOutputParameterivNV = glGetCombinerOutputParameterivNV_Z_Z;
__gshared glGetCombinerOutputParameterivNV_Z_Z = function void (GLenum stage, GLenum portion, GLenum pname, GLint *params) { glGetCombinerOutputParameterivNV_Z_Z_loader(stage, portion, pname, params); };
private void glGetCombinerOutputParameterivNV_Z_Z_loader (GLenum stage, GLenum portion, GLenum pname, GLint *params) {
  *cast(void**)&glGetCombinerOutputParameterivNV_Z_Z = glbindGetProcAddress(`glGetCombinerOutputParameterivNV`);
  if (*cast(void**)&glGetCombinerOutputParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterivNV' not found!`);
  glGetCombinerOutputParameterivNV_Z_Z(stage, portion, pname, params);
}
alias glGetCombinerStageParameterfvNV = glGetCombinerStageParameterfvNV_Z_Z;
__gshared glGetCombinerStageParameterfvNV_Z_Z = function void (GLenum stage, GLenum pname, GLfloat *params) { glGetCombinerStageParameterfvNV_Z_Z_loader(stage, pname, params); };
private void glGetCombinerStageParameterfvNV_Z_Z_loader (GLenum stage, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetCombinerStageParameterfvNV_Z_Z = glbindGetProcAddress(`glGetCombinerStageParameterfvNV`);
  if (*cast(void**)&glGetCombinerStageParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetCombinerStageParameterfvNV' not found!`);
  glGetCombinerStageParameterfvNV_Z_Z(stage, pname, params);
}
alias glGetCommandHeaderNV = glGetCommandHeaderNV_Z_Z;
__gshared glGetCommandHeaderNV_Z_Z = function GLuint (GLenum tokenID, GLuint size) { return glGetCommandHeaderNV_Z_Z_loader(tokenID, size); };
private GLuint glGetCommandHeaderNV_Z_Z_loader (GLenum tokenID, GLuint size) {
  *cast(void**)&glGetCommandHeaderNV_Z_Z = glbindGetProcAddress(`glGetCommandHeaderNV`);
  if (*cast(void**)&glGetCommandHeaderNV_Z_Z is null) assert(0, `OpenGL function 'glGetCommandHeaderNV' not found!`);
  return glGetCommandHeaderNV_Z_Z(tokenID, size);
}
alias glGetCompressedMultiTexImageEXT = glGetCompressedMultiTexImageEXT_Z_Z;
__gshared glGetCompressedMultiTexImageEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint lod, void *img) { glGetCompressedMultiTexImageEXT_Z_Z_loader(texunit, target, lod, img); };
private void glGetCompressedMultiTexImageEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint lod, void *img) {
  *cast(void**)&glGetCompressedMultiTexImageEXT_Z_Z = glbindGetProcAddress(`glGetCompressedMultiTexImageEXT`);
  if (*cast(void**)&glGetCompressedMultiTexImageEXT_Z_Z is null) assert(0, `OpenGL function 'glGetCompressedMultiTexImageEXT' not found!`);
  glGetCompressedMultiTexImageEXT_Z_Z(texunit, target, lod, img);
}
alias glGetCompressedTexImage = glGetCompressedTexImage_Z_Z;
__gshared glGetCompressedTexImage_Z_Z = function void (GLenum target, GLint level, void *img) { glGetCompressedTexImage_Z_Z_loader(target, level, img); };
private void glGetCompressedTexImage_Z_Z_loader (GLenum target, GLint level, void *img) {
  *cast(void**)&glGetCompressedTexImage_Z_Z = glbindGetProcAddress(`glGetCompressedTexImage`);
  if (*cast(void**)&glGetCompressedTexImage_Z_Z is null) assert(0, `OpenGL function 'glGetCompressedTexImage' not found!`);
  glGetCompressedTexImage_Z_Z(target, level, img);
}
alias glGetCompressedTexImageARB = glGetCompressedTexImageARB_Z_Z;
__gshared glGetCompressedTexImageARB_Z_Z = function void (GLenum target, GLint level, void *img) { glGetCompressedTexImageARB_Z_Z_loader(target, level, img); };
private void glGetCompressedTexImageARB_Z_Z_loader (GLenum target, GLint level, void *img) {
  *cast(void**)&glGetCompressedTexImageARB_Z_Z = glbindGetProcAddress(`glGetCompressedTexImageARB`);
  if (*cast(void**)&glGetCompressedTexImageARB_Z_Z is null) assert(0, `OpenGL function 'glGetCompressedTexImageARB' not found!`);
  glGetCompressedTexImageARB_Z_Z(target, level, img);
}
alias glGetCompressedTextureImage = glGetCompressedTextureImage_Z_Z;
__gshared glGetCompressedTextureImage_Z_Z = function void (GLuint texture, GLint level, GLsizei bufSize, void *pixels) { glGetCompressedTextureImage_Z_Z_loader(texture, level, bufSize, pixels); };
private void glGetCompressedTextureImage_Z_Z_loader (GLuint texture, GLint level, GLsizei bufSize, void *pixels) {
  *cast(void**)&glGetCompressedTextureImage_Z_Z = glbindGetProcAddress(`glGetCompressedTextureImage`);
  if (*cast(void**)&glGetCompressedTextureImage_Z_Z is null) assert(0, `OpenGL function 'glGetCompressedTextureImage' not found!`);
  glGetCompressedTextureImage_Z_Z(texture, level, bufSize, pixels);
}
alias glGetCompressedTextureImageEXT = glGetCompressedTextureImageEXT_Z_Z;
__gshared glGetCompressedTextureImageEXT_Z_Z = function void (GLuint texture, GLenum target, GLint lod, void *img) { glGetCompressedTextureImageEXT_Z_Z_loader(texture, target, lod, img); };
private void glGetCompressedTextureImageEXT_Z_Z_loader (GLuint texture, GLenum target, GLint lod, void *img) {
  *cast(void**)&glGetCompressedTextureImageEXT_Z_Z = glbindGetProcAddress(`glGetCompressedTextureImageEXT`);
  if (*cast(void**)&glGetCompressedTextureImageEXT_Z_Z is null) assert(0, `OpenGL function 'glGetCompressedTextureImageEXT' not found!`);
  glGetCompressedTextureImageEXT_Z_Z(texture, target, lod, img);
}
alias glGetCompressedTextureSubImage = glGetCompressedTextureSubImage_Z_Z;
__gshared glGetCompressedTextureSubImage_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) { glGetCompressedTextureSubImage_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); };
private void glGetCompressedTextureSubImage_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) {
  *cast(void**)&glGetCompressedTextureSubImage_Z_Z = glbindGetProcAddress(`glGetCompressedTextureSubImage`);
  if (*cast(void**)&glGetCompressedTextureSubImage_Z_Z is null) assert(0, `OpenGL function 'glGetCompressedTextureSubImage' not found!`);
  glGetCompressedTextureSubImage_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}
alias glGetConvolutionFilter = glGetConvolutionFilter_Z_Z;
__gshared glGetConvolutionFilter_Z_Z = function void (GLenum target, GLenum format, GLenum type, void *image) { glGetConvolutionFilter_Z_Z_loader(target, format, type, image); };
private void glGetConvolutionFilter_Z_Z_loader (GLenum target, GLenum format, GLenum type, void *image) {
  *cast(void**)&glGetConvolutionFilter_Z_Z = glbindGetProcAddress(`glGetConvolutionFilter`);
  if (*cast(void**)&glGetConvolutionFilter_Z_Z is null) assert(0, `OpenGL function 'glGetConvolutionFilter' not found!`);
  glGetConvolutionFilter_Z_Z(target, format, type, image);
}
alias glGetConvolutionFilterEXT = glGetConvolutionFilterEXT_Z_Z;
__gshared glGetConvolutionFilterEXT_Z_Z = function void (GLenum target, GLenum format, GLenum type, void *image) { glGetConvolutionFilterEXT_Z_Z_loader(target, format, type, image); };
private void glGetConvolutionFilterEXT_Z_Z_loader (GLenum target, GLenum format, GLenum type, void *image) {
  *cast(void**)&glGetConvolutionFilterEXT_Z_Z = glbindGetProcAddress(`glGetConvolutionFilterEXT`);
  if (*cast(void**)&glGetConvolutionFilterEXT_Z_Z is null) assert(0, `OpenGL function 'glGetConvolutionFilterEXT' not found!`);
  glGetConvolutionFilterEXT_Z_Z(target, format, type, image);
}
alias glGetConvolutionParameterfv = glGetConvolutionParameterfv_Z_Z;
__gshared glGetConvolutionParameterfv_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetConvolutionParameterfv_Z_Z_loader(target, pname, params); };
private void glGetConvolutionParameterfv_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetConvolutionParameterfv_Z_Z = glbindGetProcAddress(`glGetConvolutionParameterfv`);
  if (*cast(void**)&glGetConvolutionParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterfv' not found!`);
  glGetConvolutionParameterfv_Z_Z(target, pname, params);
}
alias glGetConvolutionParameterfvEXT = glGetConvolutionParameterfvEXT_Z_Z;
__gshared glGetConvolutionParameterfvEXT_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetConvolutionParameterfvEXT_Z_Z_loader(target, pname, params); };
private void glGetConvolutionParameterfvEXT_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetConvolutionParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetConvolutionParameterfvEXT`);
  if (*cast(void**)&glGetConvolutionParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterfvEXT' not found!`);
  glGetConvolutionParameterfvEXT_Z_Z(target, pname, params);
}
alias glGetConvolutionParameteriv = glGetConvolutionParameteriv_Z_Z;
__gshared glGetConvolutionParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetConvolutionParameteriv_Z_Z_loader(target, pname, params); };
private void glGetConvolutionParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetConvolutionParameteriv_Z_Z = glbindGetProcAddress(`glGetConvolutionParameteriv`);
  if (*cast(void**)&glGetConvolutionParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameteriv' not found!`);
  glGetConvolutionParameteriv_Z_Z(target, pname, params);
}
alias glGetConvolutionParameterivEXT = glGetConvolutionParameterivEXT_Z_Z;
__gshared glGetConvolutionParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetConvolutionParameterivEXT_Z_Z_loader(target, pname, params); };
private void glGetConvolutionParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetConvolutionParameterivEXT_Z_Z = glbindGetProcAddress(`glGetConvolutionParameterivEXT`);
  if (*cast(void**)&glGetConvolutionParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterivEXT' not found!`);
  glGetConvolutionParameterivEXT_Z_Z(target, pname, params);
}
alias glGetConvolutionParameterxvOES = glGetConvolutionParameterxvOES_Z_Z;
__gshared glGetConvolutionParameterxvOES_Z_Z = function void (GLenum target, GLenum pname, GLfixed *params) { glGetConvolutionParameterxvOES_Z_Z_loader(target, pname, params); };
private void glGetConvolutionParameterxvOES_Z_Z_loader (GLenum target, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetConvolutionParameterxvOES_Z_Z = glbindGetProcAddress(`glGetConvolutionParameterxvOES`);
  if (*cast(void**)&glGetConvolutionParameterxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetConvolutionParameterxvOES' not found!`);
  glGetConvolutionParameterxvOES_Z_Z(target, pname, params);
}
alias glGetCoverageModulationTableNV = glGetCoverageModulationTableNV_Z_Z;
__gshared glGetCoverageModulationTableNV_Z_Z = function void (GLsizei bufsize, GLfloat *v) { glGetCoverageModulationTableNV_Z_Z_loader(bufsize, v); };
private void glGetCoverageModulationTableNV_Z_Z_loader (GLsizei bufsize, GLfloat *v) {
  *cast(void**)&glGetCoverageModulationTableNV_Z_Z = glbindGetProcAddress(`glGetCoverageModulationTableNV`);
  if (*cast(void**)&glGetCoverageModulationTableNV_Z_Z is null) assert(0, `OpenGL function 'glGetCoverageModulationTableNV' not found!`);
  glGetCoverageModulationTableNV_Z_Z(bufsize, v);
}
alias glGetDebugMessageLog = glGetDebugMessageLog_Z_Z;
__gshared glGetDebugMessageLog_Z_Z = function GLuint (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { return glGetDebugMessageLog_Z_Z_loader(count, bufSize, sources, types, ids, severities, lengths, messageLog); };
private GLuint glGetDebugMessageLog_Z_Z_loader (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  *cast(void**)&glGetDebugMessageLog_Z_Z = glbindGetProcAddress(`glGetDebugMessageLog`);
  if (*cast(void**)&glGetDebugMessageLog_Z_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLog' not found!`);
  return glGetDebugMessageLog_Z_Z(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
alias glGetDebugMessageLogAMD = glGetDebugMessageLogAMD_Z_Z;
__gshared glGetDebugMessageLogAMD_Z_Z = function GLuint (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message) { return glGetDebugMessageLogAMD_Z_Z_loader(count, bufsize, categories, severities, ids, lengths, message); };
private GLuint glGetDebugMessageLogAMD_Z_Z_loader (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message) {
  *cast(void**)&glGetDebugMessageLogAMD_Z_Z = glbindGetProcAddress(`glGetDebugMessageLogAMD`);
  if (*cast(void**)&glGetDebugMessageLogAMD_Z_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLogAMD' not found!`);
  return glGetDebugMessageLogAMD_Z_Z(count, bufsize, categories, severities, ids, lengths, message);
}
alias glGetDebugMessageLogARB = glGetDebugMessageLogARB_Z_Z;
__gshared glGetDebugMessageLogARB_Z_Z = function GLuint (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { return glGetDebugMessageLogARB_Z_Z_loader(count, bufSize, sources, types, ids, severities, lengths, messageLog); };
private GLuint glGetDebugMessageLogARB_Z_Z_loader (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  *cast(void**)&glGetDebugMessageLogARB_Z_Z = glbindGetProcAddress(`glGetDebugMessageLogARB`);
  if (*cast(void**)&glGetDebugMessageLogARB_Z_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLogARB' not found!`);
  return glGetDebugMessageLogARB_Z_Z(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
alias glGetDebugMessageLogKHR = glGetDebugMessageLogKHR_Z_Z;
__gshared glGetDebugMessageLogKHR_Z_Z = function GLuint (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { return glGetDebugMessageLogKHR_Z_Z_loader(count, bufSize, sources, types, ids, severities, lengths, messageLog); };
private GLuint glGetDebugMessageLogKHR_Z_Z_loader (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  *cast(void**)&glGetDebugMessageLogKHR_Z_Z = glbindGetProcAddress(`glGetDebugMessageLogKHR`);
  if (*cast(void**)&glGetDebugMessageLogKHR_Z_Z is null) assert(0, `OpenGL function 'glGetDebugMessageLogKHR' not found!`);
  return glGetDebugMessageLogKHR_Z_Z(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
alias glGetDetailTexFuncSGIS = glGetDetailTexFuncSGIS_Z_Z;
__gshared glGetDetailTexFuncSGIS_Z_Z = function void (GLenum target, GLfloat *points) { glGetDetailTexFuncSGIS_Z_Z_loader(target, points); };
private void glGetDetailTexFuncSGIS_Z_Z_loader (GLenum target, GLfloat *points) {
  *cast(void**)&glGetDetailTexFuncSGIS_Z_Z = glbindGetProcAddress(`glGetDetailTexFuncSGIS`);
  if (*cast(void**)&glGetDetailTexFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glGetDetailTexFuncSGIS' not found!`);
  glGetDetailTexFuncSGIS_Z_Z(target, points);
}
alias glGetDoubleIndexedvEXT = glGetDoubleIndexedvEXT_Z_Z;
__gshared glGetDoubleIndexedvEXT_Z_Z = function void (GLenum target, GLuint index, GLdouble *data) { glGetDoubleIndexedvEXT_Z_Z_loader(target, index, data); };
private void glGetDoubleIndexedvEXT_Z_Z_loader (GLenum target, GLuint index, GLdouble *data) {
  *cast(void**)&glGetDoubleIndexedvEXT_Z_Z = glbindGetProcAddress(`glGetDoubleIndexedvEXT`);
  if (*cast(void**)&glGetDoubleIndexedvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetDoubleIndexedvEXT' not found!`);
  glGetDoubleIndexedvEXT_Z_Z(target, index, data);
}
alias glGetDoublei_v = glGetDoublei_v_Z_Z;
__gshared glGetDoublei_v_Z_Z = function void (GLenum target, GLuint index, GLdouble *data) { glGetDoublei_v_Z_Z_loader(target, index, data); };
private void glGetDoublei_v_Z_Z_loader (GLenum target, GLuint index, GLdouble *data) {
  *cast(void**)&glGetDoublei_v_Z_Z = glbindGetProcAddress(`glGetDoublei_v`);
  if (*cast(void**)&glGetDoublei_v_Z_Z is null) assert(0, `OpenGL function 'glGetDoublei_v' not found!`);
  glGetDoublei_v_Z_Z(target, index, data);
}
alias glGetDoublei_vEXT = glGetDoublei_vEXT_Z_Z;
__gshared glGetDoublei_vEXT_Z_Z = function void (GLenum pname, GLuint index, GLdouble *params) { glGetDoublei_vEXT_Z_Z_loader(pname, index, params); };
private void glGetDoublei_vEXT_Z_Z_loader (GLenum pname, GLuint index, GLdouble *params) {
  *cast(void**)&glGetDoublei_vEXT_Z_Z = glbindGetProcAddress(`glGetDoublei_vEXT`);
  if (*cast(void**)&glGetDoublei_vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetDoublei_vEXT' not found!`);
  glGetDoublei_vEXT_Z_Z(pname, index, params);
}
alias glGetDoublev = glGetDoublev_Z_Z;
__gshared glGetDoublev_Z_Z = function void (GLenum pname, GLdouble *data) { glGetDoublev_Z_Z_loader(pname, data); };
private void glGetDoublev_Z_Z_loader (GLenum pname, GLdouble *data) {
  *cast(void**)&glGetDoublev_Z_Z = glbindGetProcAddress(`glGetDoublev`);
  if (*cast(void**)&glGetDoublev_Z_Z is null) assert(0, `OpenGL function 'glGetDoublev' not found!`);
  glGetDoublev_Z_Z(pname, data);
}
alias glGetDriverControlStringQCOM = glGetDriverControlStringQCOM_Z_Z;
__gshared glGetDriverControlStringQCOM_Z_Z = function void (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString) { glGetDriverControlStringQCOM_Z_Z_loader(driverControl, bufSize, length, driverControlString); };
private void glGetDriverControlStringQCOM_Z_Z_loader (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString) {
  *cast(void**)&glGetDriverControlStringQCOM_Z_Z = glbindGetProcAddress(`glGetDriverControlStringQCOM`);
  if (*cast(void**)&glGetDriverControlStringQCOM_Z_Z is null) assert(0, `OpenGL function 'glGetDriverControlStringQCOM' not found!`);
  glGetDriverControlStringQCOM_Z_Z(driverControl, bufSize, length, driverControlString);
}
alias glGetDriverControlsQCOM = glGetDriverControlsQCOM_Z_Z;
__gshared glGetDriverControlsQCOM_Z_Z = function void (GLint *num, GLsizei size, GLuint *driverControls) { glGetDriverControlsQCOM_Z_Z_loader(num, size, driverControls); };
private void glGetDriverControlsQCOM_Z_Z_loader (GLint *num, GLsizei size, GLuint *driverControls) {
  *cast(void**)&glGetDriverControlsQCOM_Z_Z = glbindGetProcAddress(`glGetDriverControlsQCOM`);
  if (*cast(void**)&glGetDriverControlsQCOM_Z_Z is null) assert(0, `OpenGL function 'glGetDriverControlsQCOM' not found!`);
  glGetDriverControlsQCOM_Z_Z(num, size, driverControls);
}
alias glGetError = glGetError_Z_Z;
__gshared glGetError_Z_Z = function GLenum () { return glGetError_Z_Z_loader(); };
private GLenum glGetError_Z_Z_loader () {
  *cast(void**)&glGetError_Z_Z = glbindGetProcAddress(`glGetError`);
  if (*cast(void**)&glGetError_Z_Z is null) assert(0, `OpenGL function 'glGetError' not found!`);
  return glGetError_Z_Z();
}
alias glGetFenceivNV = glGetFenceivNV_Z_Z;
__gshared glGetFenceivNV_Z_Z = function void (GLuint fence, GLenum pname, GLint *params) { glGetFenceivNV_Z_Z_loader(fence, pname, params); };
private void glGetFenceivNV_Z_Z_loader (GLuint fence, GLenum pname, GLint *params) {
  *cast(void**)&glGetFenceivNV_Z_Z = glbindGetProcAddress(`glGetFenceivNV`);
  if (*cast(void**)&glGetFenceivNV_Z_Z is null) assert(0, `OpenGL function 'glGetFenceivNV' not found!`);
  glGetFenceivNV_Z_Z(fence, pname, params);
}
alias glGetFinalCombinerInputParameterfvNV = glGetFinalCombinerInputParameterfvNV_Z_Z;
__gshared glGetFinalCombinerInputParameterfvNV_Z_Z = function void (GLenum variable, GLenum pname, GLfloat *params) { glGetFinalCombinerInputParameterfvNV_Z_Z_loader(variable, pname, params); };
private void glGetFinalCombinerInputParameterfvNV_Z_Z_loader (GLenum variable, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetFinalCombinerInputParameterfvNV_Z_Z = glbindGetProcAddress(`glGetFinalCombinerInputParameterfvNV`);
  if (*cast(void**)&glGetFinalCombinerInputParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterfvNV' not found!`);
  glGetFinalCombinerInputParameterfvNV_Z_Z(variable, pname, params);
}
alias glGetFinalCombinerInputParameterivNV = glGetFinalCombinerInputParameterivNV_Z_Z;
__gshared glGetFinalCombinerInputParameterivNV_Z_Z = function void (GLenum variable, GLenum pname, GLint *params) { glGetFinalCombinerInputParameterivNV_Z_Z_loader(variable, pname, params); };
private void glGetFinalCombinerInputParameterivNV_Z_Z_loader (GLenum variable, GLenum pname, GLint *params) {
  *cast(void**)&glGetFinalCombinerInputParameterivNV_Z_Z = glbindGetProcAddress(`glGetFinalCombinerInputParameterivNV`);
  if (*cast(void**)&glGetFinalCombinerInputParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterivNV' not found!`);
  glGetFinalCombinerInputParameterivNV_Z_Z(variable, pname, params);
}
alias glGetFirstPerfQueryIdINTEL = glGetFirstPerfQueryIdINTEL_Z_Z;
__gshared glGetFirstPerfQueryIdINTEL_Z_Z = function void (GLuint *queryId) { glGetFirstPerfQueryIdINTEL_Z_Z_loader(queryId); };
private void glGetFirstPerfQueryIdINTEL_Z_Z_loader (GLuint *queryId) {
  *cast(void**)&glGetFirstPerfQueryIdINTEL_Z_Z = glbindGetProcAddress(`glGetFirstPerfQueryIdINTEL`);
  if (*cast(void**)&glGetFirstPerfQueryIdINTEL_Z_Z is null) assert(0, `OpenGL function 'glGetFirstPerfQueryIdINTEL' not found!`);
  glGetFirstPerfQueryIdINTEL_Z_Z(queryId);
}
alias glGetFixedv = glGetFixedv_Z_Z;
__gshared glGetFixedv_Z_Z = function void (GLenum pname, GLfixed *params) { glGetFixedv_Z_Z_loader(pname, params); };
private void glGetFixedv_Z_Z_loader (GLenum pname, GLfixed *params) {
  *cast(void**)&glGetFixedv_Z_Z = glbindGetProcAddress(`glGetFixedv`);
  if (*cast(void**)&glGetFixedv_Z_Z is null) assert(0, `OpenGL function 'glGetFixedv' not found!`);
  glGetFixedv_Z_Z(pname, params);
}
alias glGetFixedvOES = glGetFixedvOES_Z_Z;
__gshared glGetFixedvOES_Z_Z = function void (GLenum pname, GLfixed *params) { glGetFixedvOES_Z_Z_loader(pname, params); };
private void glGetFixedvOES_Z_Z_loader (GLenum pname, GLfixed *params) {
  *cast(void**)&glGetFixedvOES_Z_Z = glbindGetProcAddress(`glGetFixedvOES`);
  if (*cast(void**)&glGetFixedvOES_Z_Z is null) assert(0, `OpenGL function 'glGetFixedvOES' not found!`);
  glGetFixedvOES_Z_Z(pname, params);
}
alias glGetFloatIndexedvEXT = glGetFloatIndexedvEXT_Z_Z;
__gshared glGetFloatIndexedvEXT_Z_Z = function void (GLenum target, GLuint index, GLfloat *data) { glGetFloatIndexedvEXT_Z_Z_loader(target, index, data); };
private void glGetFloatIndexedvEXT_Z_Z_loader (GLenum target, GLuint index, GLfloat *data) {
  *cast(void**)&glGetFloatIndexedvEXT_Z_Z = glbindGetProcAddress(`glGetFloatIndexedvEXT`);
  if (*cast(void**)&glGetFloatIndexedvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetFloatIndexedvEXT' not found!`);
  glGetFloatIndexedvEXT_Z_Z(target, index, data);
}
alias glGetFloati_v = glGetFloati_v_Z_Z;
__gshared glGetFloati_v_Z_Z = function void (GLenum target, GLuint index, GLfloat *data) { glGetFloati_v_Z_Z_loader(target, index, data); };
private void glGetFloati_v_Z_Z_loader (GLenum target, GLuint index, GLfloat *data) {
  *cast(void**)&glGetFloati_v_Z_Z = glbindGetProcAddress(`glGetFloati_v`);
  if (*cast(void**)&glGetFloati_v_Z_Z is null) assert(0, `OpenGL function 'glGetFloati_v' not found!`);
  glGetFloati_v_Z_Z(target, index, data);
}
alias glGetFloati_vEXT = glGetFloati_vEXT_Z_Z;
__gshared glGetFloati_vEXT_Z_Z = function void (GLenum pname, GLuint index, GLfloat *params) { glGetFloati_vEXT_Z_Z_loader(pname, index, params); };
private void glGetFloati_vEXT_Z_Z_loader (GLenum pname, GLuint index, GLfloat *params) {
  *cast(void**)&glGetFloati_vEXT_Z_Z = glbindGetProcAddress(`glGetFloati_vEXT`);
  if (*cast(void**)&glGetFloati_vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetFloati_vEXT' not found!`);
  glGetFloati_vEXT_Z_Z(pname, index, params);
}
alias glGetFloati_vNV = glGetFloati_vNV_Z_Z;
__gshared glGetFloati_vNV_Z_Z = function void (GLenum target, GLuint index, GLfloat *data) { glGetFloati_vNV_Z_Z_loader(target, index, data); };
private void glGetFloati_vNV_Z_Z_loader (GLenum target, GLuint index, GLfloat *data) {
  *cast(void**)&glGetFloati_vNV_Z_Z = glbindGetProcAddress(`glGetFloati_vNV`);
  if (*cast(void**)&glGetFloati_vNV_Z_Z is null) assert(0, `OpenGL function 'glGetFloati_vNV' not found!`);
  glGetFloati_vNV_Z_Z(target, index, data);
}
alias glGetFloati_vOES = glGetFloati_vOES_Z_Z;
__gshared glGetFloati_vOES_Z_Z = function void (GLenum target, GLuint index, GLfloat *data) { glGetFloati_vOES_Z_Z_loader(target, index, data); };
private void glGetFloati_vOES_Z_Z_loader (GLenum target, GLuint index, GLfloat *data) {
  *cast(void**)&glGetFloati_vOES_Z_Z = glbindGetProcAddress(`glGetFloati_vOES`);
  if (*cast(void**)&glGetFloati_vOES_Z_Z is null) assert(0, `OpenGL function 'glGetFloati_vOES' not found!`);
  glGetFloati_vOES_Z_Z(target, index, data);
}
alias glGetFloatv = glGetFloatv_Z_Z;
__gshared glGetFloatv_Z_Z = function void (GLenum pname, GLfloat *data) { glGetFloatv_Z_Z_loader(pname, data); };
private void glGetFloatv_Z_Z_loader (GLenum pname, GLfloat *data) {
  *cast(void**)&glGetFloatv_Z_Z = glbindGetProcAddress(`glGetFloatv`);
  if (*cast(void**)&glGetFloatv_Z_Z is null) assert(0, `OpenGL function 'glGetFloatv' not found!`);
  glGetFloatv_Z_Z(pname, data);
}
alias glGetFogFuncSGIS = glGetFogFuncSGIS_Z_Z;
__gshared glGetFogFuncSGIS_Z_Z = function void (GLfloat *points) { glGetFogFuncSGIS_Z_Z_loader(points); };
private void glGetFogFuncSGIS_Z_Z_loader (GLfloat *points) {
  *cast(void**)&glGetFogFuncSGIS_Z_Z = glbindGetProcAddress(`glGetFogFuncSGIS`);
  if (*cast(void**)&glGetFogFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glGetFogFuncSGIS' not found!`);
  glGetFogFuncSGIS_Z_Z(points);
}
alias glGetFragDataIndex = glGetFragDataIndex_Z_Z;
__gshared glGetFragDataIndex_Z_Z = function GLint (GLuint program, const(GLchar)* name) { return glGetFragDataIndex_Z_Z_loader(program, name); };
private GLint glGetFragDataIndex_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glGetFragDataIndex_Z_Z = glbindGetProcAddress(`glGetFragDataIndex`);
  if (*cast(void**)&glGetFragDataIndex_Z_Z is null) assert(0, `OpenGL function 'glGetFragDataIndex' not found!`);
  return glGetFragDataIndex_Z_Z(program, name);
}
alias glGetFragDataIndexEXT = glGetFragDataIndexEXT_Z_Z;
__gshared glGetFragDataIndexEXT_Z_Z = function GLint (GLuint program, const(GLchar)* name) { return glGetFragDataIndexEXT_Z_Z_loader(program, name); };
private GLint glGetFragDataIndexEXT_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glGetFragDataIndexEXT_Z_Z = glbindGetProcAddress(`glGetFragDataIndexEXT`);
  if (*cast(void**)&glGetFragDataIndexEXT_Z_Z is null) assert(0, `OpenGL function 'glGetFragDataIndexEXT' not found!`);
  return glGetFragDataIndexEXT_Z_Z(program, name);
}
alias glGetFragDataLocation = glGetFragDataLocation_Z_Z;
__gshared glGetFragDataLocation_Z_Z = function GLint (GLuint program, const(GLchar)* name) { return glGetFragDataLocation_Z_Z_loader(program, name); };
private GLint glGetFragDataLocation_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glGetFragDataLocation_Z_Z = glbindGetProcAddress(`glGetFragDataLocation`);
  if (*cast(void**)&glGetFragDataLocation_Z_Z is null) assert(0, `OpenGL function 'glGetFragDataLocation' not found!`);
  return glGetFragDataLocation_Z_Z(program, name);
}
alias glGetFragDataLocationEXT = glGetFragDataLocationEXT_Z_Z;
__gshared glGetFragDataLocationEXT_Z_Z = function GLint (GLuint program, const(GLchar)* name) { return glGetFragDataLocationEXT_Z_Z_loader(program, name); };
private GLint glGetFragDataLocationEXT_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glGetFragDataLocationEXT_Z_Z = glbindGetProcAddress(`glGetFragDataLocationEXT`);
  if (*cast(void**)&glGetFragDataLocationEXT_Z_Z is null) assert(0, `OpenGL function 'glGetFragDataLocationEXT' not found!`);
  return glGetFragDataLocationEXT_Z_Z(program, name);
}
alias glGetFragmentLightfvSGIX = glGetFragmentLightfvSGIX_Z_Z;
__gshared glGetFragmentLightfvSGIX_Z_Z = function void (GLenum light, GLenum pname, GLfloat *params) { glGetFragmentLightfvSGIX_Z_Z_loader(light, pname, params); };
private void glGetFragmentLightfvSGIX_Z_Z_loader (GLenum light, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetFragmentLightfvSGIX_Z_Z = glbindGetProcAddress(`glGetFragmentLightfvSGIX`);
  if (*cast(void**)&glGetFragmentLightfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glGetFragmentLightfvSGIX' not found!`);
  glGetFragmentLightfvSGIX_Z_Z(light, pname, params);
}
alias glGetFragmentLightivSGIX = glGetFragmentLightivSGIX_Z_Z;
__gshared glGetFragmentLightivSGIX_Z_Z = function void (GLenum light, GLenum pname, GLint *params) { glGetFragmentLightivSGIX_Z_Z_loader(light, pname, params); };
private void glGetFragmentLightivSGIX_Z_Z_loader (GLenum light, GLenum pname, GLint *params) {
  *cast(void**)&glGetFragmentLightivSGIX_Z_Z = glbindGetProcAddress(`glGetFragmentLightivSGIX`);
  if (*cast(void**)&glGetFragmentLightivSGIX_Z_Z is null) assert(0, `OpenGL function 'glGetFragmentLightivSGIX' not found!`);
  glGetFragmentLightivSGIX_Z_Z(light, pname, params);
}
alias glGetFragmentMaterialfvSGIX = glGetFragmentMaterialfvSGIX_Z_Z;
__gshared glGetFragmentMaterialfvSGIX_Z_Z = function void (GLenum face, GLenum pname, GLfloat *params) { glGetFragmentMaterialfvSGIX_Z_Z_loader(face, pname, params); };
private void glGetFragmentMaterialfvSGIX_Z_Z_loader (GLenum face, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetFragmentMaterialfvSGIX_Z_Z = glbindGetProcAddress(`glGetFragmentMaterialfvSGIX`);
  if (*cast(void**)&glGetFragmentMaterialfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glGetFragmentMaterialfvSGIX' not found!`);
  glGetFragmentMaterialfvSGIX_Z_Z(face, pname, params);
}
alias glGetFragmentMaterialivSGIX = glGetFragmentMaterialivSGIX_Z_Z;
__gshared glGetFragmentMaterialivSGIX_Z_Z = function void (GLenum face, GLenum pname, GLint *params) { glGetFragmentMaterialivSGIX_Z_Z_loader(face, pname, params); };
private void glGetFragmentMaterialivSGIX_Z_Z_loader (GLenum face, GLenum pname, GLint *params) {
  *cast(void**)&glGetFragmentMaterialivSGIX_Z_Z = glbindGetProcAddress(`glGetFragmentMaterialivSGIX`);
  if (*cast(void**)&glGetFragmentMaterialivSGIX_Z_Z is null) assert(0, `OpenGL function 'glGetFragmentMaterialivSGIX' not found!`);
  glGetFragmentMaterialivSGIX_Z_Z(face, pname, params);
}
alias glGetFramebufferAttachmentParameteriv = glGetFramebufferAttachmentParameteriv_Z_Z;
__gshared glGetFramebufferAttachmentParameteriv_Z_Z = function void (GLenum target, GLenum attachment, GLenum pname, GLint *params) { glGetFramebufferAttachmentParameteriv_Z_Z_loader(target, attachment, pname, params); };
private void glGetFramebufferAttachmentParameteriv_Z_Z_loader (GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  *cast(void**)&glGetFramebufferAttachmentParameteriv_Z_Z = glbindGetProcAddress(`glGetFramebufferAttachmentParameteriv`);
  if (*cast(void**)&glGetFramebufferAttachmentParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameteriv' not found!`);
  glGetFramebufferAttachmentParameteriv_Z_Z(target, attachment, pname, params);
}
alias glGetFramebufferAttachmentParameterivEXT = glGetFramebufferAttachmentParameterivEXT_Z_Z;
__gshared glGetFramebufferAttachmentParameterivEXT_Z_Z = function void (GLenum target, GLenum attachment, GLenum pname, GLint *params) { glGetFramebufferAttachmentParameterivEXT_Z_Z_loader(target, attachment, pname, params); };
private void glGetFramebufferAttachmentParameterivEXT_Z_Z_loader (GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  *cast(void**)&glGetFramebufferAttachmentParameterivEXT_Z_Z = glbindGetProcAddress(`glGetFramebufferAttachmentParameterivEXT`);
  if (*cast(void**)&glGetFramebufferAttachmentParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameterivEXT' not found!`);
  glGetFramebufferAttachmentParameterivEXT_Z_Z(target, attachment, pname, params);
}
alias glGetFramebufferAttachmentParameterivOES = glGetFramebufferAttachmentParameterivOES_Z_Z;
__gshared glGetFramebufferAttachmentParameterivOES_Z_Z = function void (GLenum target, GLenum attachment, GLenum pname, GLint *params) { glGetFramebufferAttachmentParameterivOES_Z_Z_loader(target, attachment, pname, params); };
private void glGetFramebufferAttachmentParameterivOES_Z_Z_loader (GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  *cast(void**)&glGetFramebufferAttachmentParameterivOES_Z_Z = glbindGetProcAddress(`glGetFramebufferAttachmentParameterivOES`);
  if (*cast(void**)&glGetFramebufferAttachmentParameterivOES_Z_Z is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameterivOES' not found!`);
  glGetFramebufferAttachmentParameterivOES_Z_Z(target, attachment, pname, params);
}
alias glGetFramebufferParameterfvAMD = glGetFramebufferParameterfvAMD_Z_Z;
__gshared glGetFramebufferParameterfvAMD_Z_Z = function void (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) { glGetFramebufferParameterfvAMD_Z_Z_loader(target, pname, numsamples, pixelindex, size, values); };
private void glGetFramebufferParameterfvAMD_Z_Z_loader (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) {
  *cast(void**)&glGetFramebufferParameterfvAMD_Z_Z = glbindGetProcAddress(`glGetFramebufferParameterfvAMD`);
  if (*cast(void**)&glGetFramebufferParameterfvAMD_Z_Z is null) assert(0, `OpenGL function 'glGetFramebufferParameterfvAMD' not found!`);
  glGetFramebufferParameterfvAMD_Z_Z(target, pname, numsamples, pixelindex, size, values);
}
alias glGetFramebufferParameteriv = glGetFramebufferParameteriv_Z_Z;
__gshared glGetFramebufferParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetFramebufferParameteriv_Z_Z_loader(target, pname, params); };
private void glGetFramebufferParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetFramebufferParameteriv_Z_Z = glbindGetProcAddress(`glGetFramebufferParameteriv`);
  if (*cast(void**)&glGetFramebufferParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetFramebufferParameteriv' not found!`);
  glGetFramebufferParameteriv_Z_Z(target, pname, params);
}
alias glGetFramebufferParameterivEXT = glGetFramebufferParameterivEXT_Z_Z;
__gshared glGetFramebufferParameterivEXT_Z_Z = function void (GLuint framebuffer, GLenum pname, GLint *params) { glGetFramebufferParameterivEXT_Z_Z_loader(framebuffer, pname, params); };
private void glGetFramebufferParameterivEXT_Z_Z_loader (GLuint framebuffer, GLenum pname, GLint *params) {
  *cast(void**)&glGetFramebufferParameterivEXT_Z_Z = glbindGetProcAddress(`glGetFramebufferParameterivEXT`);
  if (*cast(void**)&glGetFramebufferParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetFramebufferParameterivEXT' not found!`);
  glGetFramebufferParameterivEXT_Z_Z(framebuffer, pname, params);
}
alias glGetFramebufferPixelLocalStorageSizeEXT = glGetFramebufferPixelLocalStorageSizeEXT_Z_Z;
__gshared glGetFramebufferPixelLocalStorageSizeEXT_Z_Z = function GLsizei (GLuint target) { return glGetFramebufferPixelLocalStorageSizeEXT_Z_Z_loader(target); };
private GLsizei glGetFramebufferPixelLocalStorageSizeEXT_Z_Z_loader (GLuint target) {
  *cast(void**)&glGetFramebufferPixelLocalStorageSizeEXT_Z_Z = glbindGetProcAddress(`glGetFramebufferPixelLocalStorageSizeEXT`);
  if (*cast(void**)&glGetFramebufferPixelLocalStorageSizeEXT_Z_Z is null) assert(0, `OpenGL function 'glGetFramebufferPixelLocalStorageSizeEXT' not found!`);
  return glGetFramebufferPixelLocalStorageSizeEXT_Z_Z(target);
}
alias glGetGraphicsResetStatus = glGetGraphicsResetStatus_Z_Z;
__gshared glGetGraphicsResetStatus_Z_Z = function GLenum () { return glGetGraphicsResetStatus_Z_Z_loader(); };
private GLenum glGetGraphicsResetStatus_Z_Z_loader () {
  *cast(void**)&glGetGraphicsResetStatus_Z_Z = glbindGetProcAddress(`glGetGraphicsResetStatus`);
  if (*cast(void**)&glGetGraphicsResetStatus_Z_Z is null) assert(0, `OpenGL function 'glGetGraphicsResetStatus' not found!`);
  return glGetGraphicsResetStatus_Z_Z();
}
alias glGetGraphicsResetStatusARB = glGetGraphicsResetStatusARB_Z_Z;
__gshared glGetGraphicsResetStatusARB_Z_Z = function GLenum () { return glGetGraphicsResetStatusARB_Z_Z_loader(); };
private GLenum glGetGraphicsResetStatusARB_Z_Z_loader () {
  *cast(void**)&glGetGraphicsResetStatusARB_Z_Z = glbindGetProcAddress(`glGetGraphicsResetStatusARB`);
  if (*cast(void**)&glGetGraphicsResetStatusARB_Z_Z is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusARB' not found!`);
  return glGetGraphicsResetStatusARB_Z_Z();
}
alias glGetGraphicsResetStatusEXT = glGetGraphicsResetStatusEXT_Z_Z;
__gshared glGetGraphicsResetStatusEXT_Z_Z = function GLenum () { return glGetGraphicsResetStatusEXT_Z_Z_loader(); };
private GLenum glGetGraphicsResetStatusEXT_Z_Z_loader () {
  *cast(void**)&glGetGraphicsResetStatusEXT_Z_Z = glbindGetProcAddress(`glGetGraphicsResetStatusEXT`);
  if (*cast(void**)&glGetGraphicsResetStatusEXT_Z_Z is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusEXT' not found!`);
  return glGetGraphicsResetStatusEXT_Z_Z();
}
alias glGetGraphicsResetStatusKHR = glGetGraphicsResetStatusKHR_Z_Z;
__gshared glGetGraphicsResetStatusKHR_Z_Z = function GLenum () { return glGetGraphicsResetStatusKHR_Z_Z_loader(); };
private GLenum glGetGraphicsResetStatusKHR_Z_Z_loader () {
  *cast(void**)&glGetGraphicsResetStatusKHR_Z_Z = glbindGetProcAddress(`glGetGraphicsResetStatusKHR`);
  if (*cast(void**)&glGetGraphicsResetStatusKHR_Z_Z is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusKHR' not found!`);
  return glGetGraphicsResetStatusKHR_Z_Z();
}
alias glGetHandleARB = glGetHandleARB_Z_Z;
__gshared glGetHandleARB_Z_Z = function GLhandleARB (GLenum pname) { return glGetHandleARB_Z_Z_loader(pname); };
private GLhandleARB glGetHandleARB_Z_Z_loader (GLenum pname) {
  *cast(void**)&glGetHandleARB_Z_Z = glbindGetProcAddress(`glGetHandleARB`);
  if (*cast(void**)&glGetHandleARB_Z_Z is null) assert(0, `OpenGL function 'glGetHandleARB' not found!`);
  return glGetHandleARB_Z_Z(pname);
}
alias glGetHistogram = glGetHistogram_Z_Z;
__gshared glGetHistogram_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { glGetHistogram_Z_Z_loader(target, reset, format, type, values); };
private void glGetHistogram_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
  *cast(void**)&glGetHistogram_Z_Z = glbindGetProcAddress(`glGetHistogram`);
  if (*cast(void**)&glGetHistogram_Z_Z is null) assert(0, `OpenGL function 'glGetHistogram' not found!`);
  glGetHistogram_Z_Z(target, reset, format, type, values);
}
alias glGetHistogramEXT = glGetHistogramEXT_Z_Z;
__gshared glGetHistogramEXT_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { glGetHistogramEXT_Z_Z_loader(target, reset, format, type, values); };
private void glGetHistogramEXT_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
  *cast(void**)&glGetHistogramEXT_Z_Z = glbindGetProcAddress(`glGetHistogramEXT`);
  if (*cast(void**)&glGetHistogramEXT_Z_Z is null) assert(0, `OpenGL function 'glGetHistogramEXT' not found!`);
  glGetHistogramEXT_Z_Z(target, reset, format, type, values);
}
alias glGetHistogramParameterfv = glGetHistogramParameterfv_Z_Z;
__gshared glGetHistogramParameterfv_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetHistogramParameterfv_Z_Z_loader(target, pname, params); };
private void glGetHistogramParameterfv_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetHistogramParameterfv_Z_Z = glbindGetProcAddress(`glGetHistogramParameterfv`);
  if (*cast(void**)&glGetHistogramParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterfv' not found!`);
  glGetHistogramParameterfv_Z_Z(target, pname, params);
}
alias glGetHistogramParameterfvEXT = glGetHistogramParameterfvEXT_Z_Z;
__gshared glGetHistogramParameterfvEXT_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetHistogramParameterfvEXT_Z_Z_loader(target, pname, params); };
private void glGetHistogramParameterfvEXT_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetHistogramParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetHistogramParameterfvEXT`);
  if (*cast(void**)&glGetHistogramParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterfvEXT' not found!`);
  glGetHistogramParameterfvEXT_Z_Z(target, pname, params);
}
alias glGetHistogramParameteriv = glGetHistogramParameteriv_Z_Z;
__gshared glGetHistogramParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetHistogramParameteriv_Z_Z_loader(target, pname, params); };
private void glGetHistogramParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetHistogramParameteriv_Z_Z = glbindGetProcAddress(`glGetHistogramParameteriv`);
  if (*cast(void**)&glGetHistogramParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetHistogramParameteriv' not found!`);
  glGetHistogramParameteriv_Z_Z(target, pname, params);
}
alias glGetHistogramParameterivEXT = glGetHistogramParameterivEXT_Z_Z;
__gshared glGetHistogramParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetHistogramParameterivEXT_Z_Z_loader(target, pname, params); };
private void glGetHistogramParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetHistogramParameterivEXT_Z_Z = glbindGetProcAddress(`glGetHistogramParameterivEXT`);
  if (*cast(void**)&glGetHistogramParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterivEXT' not found!`);
  glGetHistogramParameterivEXT_Z_Z(target, pname, params);
}
alias glGetHistogramParameterxvOES = glGetHistogramParameterxvOES_Z_Z;
__gshared glGetHistogramParameterxvOES_Z_Z = function void (GLenum target, GLenum pname, GLfixed *params) { glGetHistogramParameterxvOES_Z_Z_loader(target, pname, params); };
private void glGetHistogramParameterxvOES_Z_Z_loader (GLenum target, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetHistogramParameterxvOES_Z_Z = glbindGetProcAddress(`glGetHistogramParameterxvOES`);
  if (*cast(void**)&glGetHistogramParameterxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetHistogramParameterxvOES' not found!`);
  glGetHistogramParameterxvOES_Z_Z(target, pname, params);
}
alias glGetImageHandleARB = glGetImageHandleARB_Z_Z;
__gshared glGetImageHandleARB_Z_Z = function GLuint64 (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return glGetImageHandleARB_Z_Z_loader(texture, level, layered, layer, format); };
private GLuint64 glGetImageHandleARB_Z_Z_loader (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  *cast(void**)&glGetImageHandleARB_Z_Z = glbindGetProcAddress(`glGetImageHandleARB`);
  if (*cast(void**)&glGetImageHandleARB_Z_Z is null) assert(0, `OpenGL function 'glGetImageHandleARB' not found!`);
  return glGetImageHandleARB_Z_Z(texture, level, layered, layer, format);
}
alias glGetImageHandleNV = glGetImageHandleNV_Z_Z;
__gshared glGetImageHandleNV_Z_Z = function GLuint64 (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return glGetImageHandleNV_Z_Z_loader(texture, level, layered, layer, format); };
private GLuint64 glGetImageHandleNV_Z_Z_loader (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  *cast(void**)&glGetImageHandleNV_Z_Z = glbindGetProcAddress(`glGetImageHandleNV`);
  if (*cast(void**)&glGetImageHandleNV_Z_Z is null) assert(0, `OpenGL function 'glGetImageHandleNV' not found!`);
  return glGetImageHandleNV_Z_Z(texture, level, layered, layer, format);
}
alias glGetImageTransformParameterfvHP = glGetImageTransformParameterfvHP_Z_Z;
__gshared glGetImageTransformParameterfvHP_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetImageTransformParameterfvHP_Z_Z_loader(target, pname, params); };
private void glGetImageTransformParameterfvHP_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetImageTransformParameterfvHP_Z_Z = glbindGetProcAddress(`glGetImageTransformParameterfvHP`);
  if (*cast(void**)&glGetImageTransformParameterfvHP_Z_Z is null) assert(0, `OpenGL function 'glGetImageTransformParameterfvHP' not found!`);
  glGetImageTransformParameterfvHP_Z_Z(target, pname, params);
}
alias glGetImageTransformParameterivHP = glGetImageTransformParameterivHP_Z_Z;
__gshared glGetImageTransformParameterivHP_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetImageTransformParameterivHP_Z_Z_loader(target, pname, params); };
private void glGetImageTransformParameterivHP_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetImageTransformParameterivHP_Z_Z = glbindGetProcAddress(`glGetImageTransformParameterivHP`);
  if (*cast(void**)&glGetImageTransformParameterivHP_Z_Z is null) assert(0, `OpenGL function 'glGetImageTransformParameterivHP' not found!`);
  glGetImageTransformParameterivHP_Z_Z(target, pname, params);
}
alias glGetInfoLogARB = glGetInfoLogARB_Z_Z;
__gshared glGetInfoLogARB_Z_Z = function void (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) { glGetInfoLogARB_Z_Z_loader(obj, maxLength, length, infoLog); };
private void glGetInfoLogARB_Z_Z_loader (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) {
  *cast(void**)&glGetInfoLogARB_Z_Z = glbindGetProcAddress(`glGetInfoLogARB`);
  if (*cast(void**)&glGetInfoLogARB_Z_Z is null) assert(0, `OpenGL function 'glGetInfoLogARB' not found!`);
  glGetInfoLogARB_Z_Z(obj, maxLength, length, infoLog);
}
alias glGetInstrumentsSGIX = glGetInstrumentsSGIX_Z_Z;
__gshared glGetInstrumentsSGIX_Z_Z = function GLint () { return glGetInstrumentsSGIX_Z_Z_loader(); };
private GLint glGetInstrumentsSGIX_Z_Z_loader () {
  *cast(void**)&glGetInstrumentsSGIX_Z_Z = glbindGetProcAddress(`glGetInstrumentsSGIX`);
  if (*cast(void**)&glGetInstrumentsSGIX_Z_Z is null) assert(0, `OpenGL function 'glGetInstrumentsSGIX' not found!`);
  return glGetInstrumentsSGIX_Z_Z();
}
alias glGetInteger64i_v = glGetInteger64i_v_Z_Z;
__gshared glGetInteger64i_v_Z_Z = function void (GLenum target, GLuint index, GLint64 *data) { glGetInteger64i_v_Z_Z_loader(target, index, data); };
private void glGetInteger64i_v_Z_Z_loader (GLenum target, GLuint index, GLint64 *data) {
  *cast(void**)&glGetInteger64i_v_Z_Z = glbindGetProcAddress(`glGetInteger64i_v`);
  if (*cast(void**)&glGetInteger64i_v_Z_Z is null) assert(0, `OpenGL function 'glGetInteger64i_v' not found!`);
  glGetInteger64i_v_Z_Z(target, index, data);
}
alias glGetInteger64v = glGetInteger64v_Z_Z;
__gshared glGetInteger64v_Z_Z = function void (GLenum pname, GLint64 *data) { glGetInteger64v_Z_Z_loader(pname, data); };
private void glGetInteger64v_Z_Z_loader (GLenum pname, GLint64 *data) {
  *cast(void**)&glGetInteger64v_Z_Z = glbindGetProcAddress(`glGetInteger64v`);
  if (*cast(void**)&glGetInteger64v_Z_Z is null) assert(0, `OpenGL function 'glGetInteger64v' not found!`);
  glGetInteger64v_Z_Z(pname, data);
}
alias glGetInteger64vAPPLE = glGetInteger64vAPPLE_Z_Z;
__gshared glGetInteger64vAPPLE_Z_Z = function void (GLenum pname, GLint64 *params) { glGetInteger64vAPPLE_Z_Z_loader(pname, params); };
private void glGetInteger64vAPPLE_Z_Z_loader (GLenum pname, GLint64 *params) {
  *cast(void**)&glGetInteger64vAPPLE_Z_Z = glbindGetProcAddress(`glGetInteger64vAPPLE`);
  if (*cast(void**)&glGetInteger64vAPPLE_Z_Z is null) assert(0, `OpenGL function 'glGetInteger64vAPPLE' not found!`);
  glGetInteger64vAPPLE_Z_Z(pname, params);
}
alias glGetIntegerIndexedvEXT = glGetIntegerIndexedvEXT_Z_Z;
__gshared glGetIntegerIndexedvEXT_Z_Z = function void (GLenum target, GLuint index, GLint *data) { glGetIntegerIndexedvEXT_Z_Z_loader(target, index, data); };
private void glGetIntegerIndexedvEXT_Z_Z_loader (GLenum target, GLuint index, GLint *data) {
  *cast(void**)&glGetIntegerIndexedvEXT_Z_Z = glbindGetProcAddress(`glGetIntegerIndexedvEXT`);
  if (*cast(void**)&glGetIntegerIndexedvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetIntegerIndexedvEXT' not found!`);
  glGetIntegerIndexedvEXT_Z_Z(target, index, data);
}
alias glGetIntegeri_v = glGetIntegeri_v_Z_Z;
__gshared glGetIntegeri_v_Z_Z = function void (GLenum target, GLuint index, GLint *data) { glGetIntegeri_v_Z_Z_loader(target, index, data); };
private void glGetIntegeri_v_Z_Z_loader (GLenum target, GLuint index, GLint *data) {
  *cast(void**)&glGetIntegeri_v_Z_Z = glbindGetProcAddress(`glGetIntegeri_v`);
  if (*cast(void**)&glGetIntegeri_v_Z_Z is null) assert(0, `OpenGL function 'glGetIntegeri_v' not found!`);
  glGetIntegeri_v_Z_Z(target, index, data);
}
alias glGetIntegeri_vEXT = glGetIntegeri_vEXT_Z_Z;
__gshared glGetIntegeri_vEXT_Z_Z = function void (GLenum target, GLuint index, GLint *data) { glGetIntegeri_vEXT_Z_Z_loader(target, index, data); };
private void glGetIntegeri_vEXT_Z_Z_loader (GLenum target, GLuint index, GLint *data) {
  *cast(void**)&glGetIntegeri_vEXT_Z_Z = glbindGetProcAddress(`glGetIntegeri_vEXT`);
  if (*cast(void**)&glGetIntegeri_vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetIntegeri_vEXT' not found!`);
  glGetIntegeri_vEXT_Z_Z(target, index, data);
}
alias glGetIntegerui64i_vNV = glGetIntegerui64i_vNV_Z_Z;
__gshared glGetIntegerui64i_vNV_Z_Z = function void (GLenum value, GLuint index, GLuint64EXT *result) { glGetIntegerui64i_vNV_Z_Z_loader(value, index, result); };
private void glGetIntegerui64i_vNV_Z_Z_loader (GLenum value, GLuint index, GLuint64EXT *result) {
  *cast(void**)&glGetIntegerui64i_vNV_Z_Z = glbindGetProcAddress(`glGetIntegerui64i_vNV`);
  if (*cast(void**)&glGetIntegerui64i_vNV_Z_Z is null) assert(0, `OpenGL function 'glGetIntegerui64i_vNV' not found!`);
  glGetIntegerui64i_vNV_Z_Z(value, index, result);
}
alias glGetIntegerui64vNV = glGetIntegerui64vNV_Z_Z;
__gshared glGetIntegerui64vNV_Z_Z = function void (GLenum value, GLuint64EXT *result) { glGetIntegerui64vNV_Z_Z_loader(value, result); };
private void glGetIntegerui64vNV_Z_Z_loader (GLenum value, GLuint64EXT *result) {
  *cast(void**)&glGetIntegerui64vNV_Z_Z = glbindGetProcAddress(`glGetIntegerui64vNV`);
  if (*cast(void**)&glGetIntegerui64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetIntegerui64vNV' not found!`);
  glGetIntegerui64vNV_Z_Z(value, result);
}
alias glGetIntegerv = glGetIntegerv_Z_Z;
__gshared glGetIntegerv_Z_Z = function void (GLenum pname, GLint *data) { glGetIntegerv_Z_Z_loader(pname, data); };
private void glGetIntegerv_Z_Z_loader (GLenum pname, GLint *data) {
  *cast(void**)&glGetIntegerv_Z_Z = glbindGetProcAddress(`glGetIntegerv`);
  if (*cast(void**)&glGetIntegerv_Z_Z is null) assert(0, `OpenGL function 'glGetIntegerv' not found!`);
  glGetIntegerv_Z_Z(pname, data);
}
alias glGetInternalformatSampleivNV = glGetInternalformatSampleivNV_Z_Z;
__gshared glGetInternalformatSampleivNV_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) { glGetInternalformatSampleivNV_Z_Z_loader(target, internalformat, samples, pname, bufSize, params); };
private void glGetInternalformatSampleivNV_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) {
  *cast(void**)&glGetInternalformatSampleivNV_Z_Z = glbindGetProcAddress(`glGetInternalformatSampleivNV`);
  if (*cast(void**)&glGetInternalformatSampleivNV_Z_Z is null) assert(0, `OpenGL function 'glGetInternalformatSampleivNV' not found!`);
  glGetInternalformatSampleivNV_Z_Z(target, internalformat, samples, pname, bufSize, params);
}
alias glGetInternalformati64v = glGetInternalformati64v_Z_Z;
__gshared glGetInternalformati64v_Z_Z = function void (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) { glGetInternalformati64v_Z_Z_loader(target, internalformat, pname, bufSize, params); };
private void glGetInternalformati64v_Z_Z_loader (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {
  *cast(void**)&glGetInternalformati64v_Z_Z = glbindGetProcAddress(`glGetInternalformati64v`);
  if (*cast(void**)&glGetInternalformati64v_Z_Z is null) assert(0, `OpenGL function 'glGetInternalformati64v' not found!`);
  glGetInternalformati64v_Z_Z(target, internalformat, pname, bufSize, params);
}
alias glGetInternalformativ = glGetInternalformativ_Z_Z;
__gshared glGetInternalformativ_Z_Z = function void (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) { glGetInternalformativ_Z_Z_loader(target, internalformat, pname, bufSize, params); };
private void glGetInternalformativ_Z_Z_loader (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {
  *cast(void**)&glGetInternalformativ_Z_Z = glbindGetProcAddress(`glGetInternalformativ`);
  if (*cast(void**)&glGetInternalformativ_Z_Z is null) assert(0, `OpenGL function 'glGetInternalformativ' not found!`);
  glGetInternalformativ_Z_Z(target, internalformat, pname, bufSize, params);
}
alias glGetInvariantBooleanvEXT = glGetInvariantBooleanvEXT_Z_Z;
__gshared glGetInvariantBooleanvEXT_Z_Z = function void (GLuint id, GLenum value, GLboolean *data) { glGetInvariantBooleanvEXT_Z_Z_loader(id, value, data); };
private void glGetInvariantBooleanvEXT_Z_Z_loader (GLuint id, GLenum value, GLboolean *data) {
  *cast(void**)&glGetInvariantBooleanvEXT_Z_Z = glbindGetProcAddress(`glGetInvariantBooleanvEXT`);
  if (*cast(void**)&glGetInvariantBooleanvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetInvariantBooleanvEXT' not found!`);
  glGetInvariantBooleanvEXT_Z_Z(id, value, data);
}
alias glGetInvariantFloatvEXT = glGetInvariantFloatvEXT_Z_Z;
__gshared glGetInvariantFloatvEXT_Z_Z = function void (GLuint id, GLenum value, GLfloat *data) { glGetInvariantFloatvEXT_Z_Z_loader(id, value, data); };
private void glGetInvariantFloatvEXT_Z_Z_loader (GLuint id, GLenum value, GLfloat *data) {
  *cast(void**)&glGetInvariantFloatvEXT_Z_Z = glbindGetProcAddress(`glGetInvariantFloatvEXT`);
  if (*cast(void**)&glGetInvariantFloatvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetInvariantFloatvEXT' not found!`);
  glGetInvariantFloatvEXT_Z_Z(id, value, data);
}
alias glGetInvariantIntegervEXT = glGetInvariantIntegervEXT_Z_Z;
__gshared glGetInvariantIntegervEXT_Z_Z = function void (GLuint id, GLenum value, GLint *data) { glGetInvariantIntegervEXT_Z_Z_loader(id, value, data); };
private void glGetInvariantIntegervEXT_Z_Z_loader (GLuint id, GLenum value, GLint *data) {
  *cast(void**)&glGetInvariantIntegervEXT_Z_Z = glbindGetProcAddress(`glGetInvariantIntegervEXT`);
  if (*cast(void**)&glGetInvariantIntegervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetInvariantIntegervEXT' not found!`);
  glGetInvariantIntegervEXT_Z_Z(id, value, data);
}
alias glGetLightfv = glGetLightfv_Z_Z;
__gshared glGetLightfv_Z_Z = function void (GLenum light, GLenum pname, GLfloat *params) { glGetLightfv_Z_Z_loader(light, pname, params); };
private void glGetLightfv_Z_Z_loader (GLenum light, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetLightfv_Z_Z = glbindGetProcAddress(`glGetLightfv`);
  if (*cast(void**)&glGetLightfv_Z_Z is null) assert(0, `OpenGL function 'glGetLightfv' not found!`);
  glGetLightfv_Z_Z(light, pname, params);
}
alias glGetLightiv = glGetLightiv_Z_Z;
__gshared glGetLightiv_Z_Z = function void (GLenum light, GLenum pname, GLint *params) { glGetLightiv_Z_Z_loader(light, pname, params); };
private void glGetLightiv_Z_Z_loader (GLenum light, GLenum pname, GLint *params) {
  *cast(void**)&glGetLightiv_Z_Z = glbindGetProcAddress(`glGetLightiv`);
  if (*cast(void**)&glGetLightiv_Z_Z is null) assert(0, `OpenGL function 'glGetLightiv' not found!`);
  glGetLightiv_Z_Z(light, pname, params);
}
alias glGetLightxOES = glGetLightxOES_Z_Z;
__gshared glGetLightxOES_Z_Z = function void (GLenum light, GLenum pname, GLfixed *params) { glGetLightxOES_Z_Z_loader(light, pname, params); };
private void glGetLightxOES_Z_Z_loader (GLenum light, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetLightxOES_Z_Z = glbindGetProcAddress(`glGetLightxOES`);
  if (*cast(void**)&glGetLightxOES_Z_Z is null) assert(0, `OpenGL function 'glGetLightxOES' not found!`);
  glGetLightxOES_Z_Z(light, pname, params);
}
alias glGetLightxv = glGetLightxv_Z_Z;
__gshared glGetLightxv_Z_Z = function void (GLenum light, GLenum pname, GLfixed *params) { glGetLightxv_Z_Z_loader(light, pname, params); };
private void glGetLightxv_Z_Z_loader (GLenum light, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetLightxv_Z_Z = glbindGetProcAddress(`glGetLightxv`);
  if (*cast(void**)&glGetLightxv_Z_Z is null) assert(0, `OpenGL function 'glGetLightxv' not found!`);
  glGetLightxv_Z_Z(light, pname, params);
}
alias glGetLightxvOES = glGetLightxvOES_Z_Z;
__gshared glGetLightxvOES_Z_Z = function void (GLenum light, GLenum pname, GLfixed *params) { glGetLightxvOES_Z_Z_loader(light, pname, params); };
private void glGetLightxvOES_Z_Z_loader (GLenum light, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetLightxvOES_Z_Z = glbindGetProcAddress(`glGetLightxvOES`);
  if (*cast(void**)&glGetLightxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetLightxvOES' not found!`);
  glGetLightxvOES_Z_Z(light, pname, params);
}
alias glGetListParameterfvSGIX = glGetListParameterfvSGIX_Z_Z;
__gshared glGetListParameterfvSGIX_Z_Z = function void (GLuint list, GLenum pname, GLfloat *params) { glGetListParameterfvSGIX_Z_Z_loader(list, pname, params); };
private void glGetListParameterfvSGIX_Z_Z_loader (GLuint list, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetListParameterfvSGIX_Z_Z = glbindGetProcAddress(`glGetListParameterfvSGIX`);
  if (*cast(void**)&glGetListParameterfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glGetListParameterfvSGIX' not found!`);
  glGetListParameterfvSGIX_Z_Z(list, pname, params);
}
alias glGetListParameterivSGIX = glGetListParameterivSGIX_Z_Z;
__gshared glGetListParameterivSGIX_Z_Z = function void (GLuint list, GLenum pname, GLint *params) { glGetListParameterivSGIX_Z_Z_loader(list, pname, params); };
private void glGetListParameterivSGIX_Z_Z_loader (GLuint list, GLenum pname, GLint *params) {
  *cast(void**)&glGetListParameterivSGIX_Z_Z = glbindGetProcAddress(`glGetListParameterivSGIX`);
  if (*cast(void**)&glGetListParameterivSGIX_Z_Z is null) assert(0, `OpenGL function 'glGetListParameterivSGIX' not found!`);
  glGetListParameterivSGIX_Z_Z(list, pname, params);
}
alias glGetLocalConstantBooleanvEXT = glGetLocalConstantBooleanvEXT_Z_Z;
__gshared glGetLocalConstantBooleanvEXT_Z_Z = function void (GLuint id, GLenum value, GLboolean *data) { glGetLocalConstantBooleanvEXT_Z_Z_loader(id, value, data); };
private void glGetLocalConstantBooleanvEXT_Z_Z_loader (GLuint id, GLenum value, GLboolean *data) {
  *cast(void**)&glGetLocalConstantBooleanvEXT_Z_Z = glbindGetProcAddress(`glGetLocalConstantBooleanvEXT`);
  if (*cast(void**)&glGetLocalConstantBooleanvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetLocalConstantBooleanvEXT' not found!`);
  glGetLocalConstantBooleanvEXT_Z_Z(id, value, data);
}
alias glGetLocalConstantFloatvEXT = glGetLocalConstantFloatvEXT_Z_Z;
__gshared glGetLocalConstantFloatvEXT_Z_Z = function void (GLuint id, GLenum value, GLfloat *data) { glGetLocalConstantFloatvEXT_Z_Z_loader(id, value, data); };
private void glGetLocalConstantFloatvEXT_Z_Z_loader (GLuint id, GLenum value, GLfloat *data) {
  *cast(void**)&glGetLocalConstantFloatvEXT_Z_Z = glbindGetProcAddress(`glGetLocalConstantFloatvEXT`);
  if (*cast(void**)&glGetLocalConstantFloatvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetLocalConstantFloatvEXT' not found!`);
  glGetLocalConstantFloatvEXT_Z_Z(id, value, data);
}
alias glGetLocalConstantIntegervEXT = glGetLocalConstantIntegervEXT_Z_Z;
__gshared glGetLocalConstantIntegervEXT_Z_Z = function void (GLuint id, GLenum value, GLint *data) { glGetLocalConstantIntegervEXT_Z_Z_loader(id, value, data); };
private void glGetLocalConstantIntegervEXT_Z_Z_loader (GLuint id, GLenum value, GLint *data) {
  *cast(void**)&glGetLocalConstantIntegervEXT_Z_Z = glbindGetProcAddress(`glGetLocalConstantIntegervEXT`);
  if (*cast(void**)&glGetLocalConstantIntegervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetLocalConstantIntegervEXT' not found!`);
  glGetLocalConstantIntegervEXT_Z_Z(id, value, data);
}
alias glGetMapAttribParameterfvNV = glGetMapAttribParameterfvNV_Z_Z;
__gshared glGetMapAttribParameterfvNV_Z_Z = function void (GLenum target, GLuint index, GLenum pname, GLfloat *params) { glGetMapAttribParameterfvNV_Z_Z_loader(target, index, pname, params); };
private void glGetMapAttribParameterfvNV_Z_Z_loader (GLenum target, GLuint index, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMapAttribParameterfvNV_Z_Z = glbindGetProcAddress(`glGetMapAttribParameterfvNV`);
  if (*cast(void**)&glGetMapAttribParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetMapAttribParameterfvNV' not found!`);
  glGetMapAttribParameterfvNV_Z_Z(target, index, pname, params);
}
alias glGetMapAttribParameterivNV = glGetMapAttribParameterivNV_Z_Z;
__gshared glGetMapAttribParameterivNV_Z_Z = function void (GLenum target, GLuint index, GLenum pname, GLint *params) { glGetMapAttribParameterivNV_Z_Z_loader(target, index, pname, params); };
private void glGetMapAttribParameterivNV_Z_Z_loader (GLenum target, GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetMapAttribParameterivNV_Z_Z = glbindGetProcAddress(`glGetMapAttribParameterivNV`);
  if (*cast(void**)&glGetMapAttribParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glGetMapAttribParameterivNV' not found!`);
  glGetMapAttribParameterivNV_Z_Z(target, index, pname, params);
}
alias glGetMapControlPointsNV = glGetMapControlPointsNV_Z_Z;
__gshared glGetMapControlPointsNV_Z_Z = function void (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) { glGetMapControlPointsNV_Z_Z_loader(target, index, type, ustride, vstride, packed, points); };
private void glGetMapControlPointsNV_Z_Z_loader (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) {
  *cast(void**)&glGetMapControlPointsNV_Z_Z = glbindGetProcAddress(`glGetMapControlPointsNV`);
  if (*cast(void**)&glGetMapControlPointsNV_Z_Z is null) assert(0, `OpenGL function 'glGetMapControlPointsNV' not found!`);
  glGetMapControlPointsNV_Z_Z(target, index, type, ustride, vstride, packed, points);
}
alias glGetMapParameterfvNV = glGetMapParameterfvNV_Z_Z;
__gshared glGetMapParameterfvNV_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetMapParameterfvNV_Z_Z_loader(target, pname, params); };
private void glGetMapParameterfvNV_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMapParameterfvNV_Z_Z = glbindGetProcAddress(`glGetMapParameterfvNV`);
  if (*cast(void**)&glGetMapParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetMapParameterfvNV' not found!`);
  glGetMapParameterfvNV_Z_Z(target, pname, params);
}
alias glGetMapParameterivNV = glGetMapParameterivNV_Z_Z;
__gshared glGetMapParameterivNV_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetMapParameterivNV_Z_Z_loader(target, pname, params); };
private void glGetMapParameterivNV_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetMapParameterivNV_Z_Z = glbindGetProcAddress(`glGetMapParameterivNV`);
  if (*cast(void**)&glGetMapParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glGetMapParameterivNV' not found!`);
  glGetMapParameterivNV_Z_Z(target, pname, params);
}
alias glGetMapdv = glGetMapdv_Z_Z;
__gshared glGetMapdv_Z_Z = function void (GLenum target, GLenum query, GLdouble *v) { glGetMapdv_Z_Z_loader(target, query, v); };
private void glGetMapdv_Z_Z_loader (GLenum target, GLenum query, GLdouble *v) {
  *cast(void**)&glGetMapdv_Z_Z = glbindGetProcAddress(`glGetMapdv`);
  if (*cast(void**)&glGetMapdv_Z_Z is null) assert(0, `OpenGL function 'glGetMapdv' not found!`);
  glGetMapdv_Z_Z(target, query, v);
}
alias glGetMapfv = glGetMapfv_Z_Z;
__gshared glGetMapfv_Z_Z = function void (GLenum target, GLenum query, GLfloat *v) { glGetMapfv_Z_Z_loader(target, query, v); };
private void glGetMapfv_Z_Z_loader (GLenum target, GLenum query, GLfloat *v) {
  *cast(void**)&glGetMapfv_Z_Z = glbindGetProcAddress(`glGetMapfv`);
  if (*cast(void**)&glGetMapfv_Z_Z is null) assert(0, `OpenGL function 'glGetMapfv' not found!`);
  glGetMapfv_Z_Z(target, query, v);
}
alias glGetMapiv = glGetMapiv_Z_Z;
__gshared glGetMapiv_Z_Z = function void (GLenum target, GLenum query, GLint *v) { glGetMapiv_Z_Z_loader(target, query, v); };
private void glGetMapiv_Z_Z_loader (GLenum target, GLenum query, GLint *v) {
  *cast(void**)&glGetMapiv_Z_Z = glbindGetProcAddress(`glGetMapiv`);
  if (*cast(void**)&glGetMapiv_Z_Z is null) assert(0, `OpenGL function 'glGetMapiv' not found!`);
  glGetMapiv_Z_Z(target, query, v);
}
alias glGetMapxvOES = glGetMapxvOES_Z_Z;
__gshared glGetMapxvOES_Z_Z = function void (GLenum target, GLenum query, GLfixed *v) { glGetMapxvOES_Z_Z_loader(target, query, v); };
private void glGetMapxvOES_Z_Z_loader (GLenum target, GLenum query, GLfixed *v) {
  *cast(void**)&glGetMapxvOES_Z_Z = glbindGetProcAddress(`glGetMapxvOES`);
  if (*cast(void**)&glGetMapxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetMapxvOES' not found!`);
  glGetMapxvOES_Z_Z(target, query, v);
}
alias glGetMaterialfv = glGetMaterialfv_Z_Z;
__gshared glGetMaterialfv_Z_Z = function void (GLenum face, GLenum pname, GLfloat *params) { glGetMaterialfv_Z_Z_loader(face, pname, params); };
private void glGetMaterialfv_Z_Z_loader (GLenum face, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMaterialfv_Z_Z = glbindGetProcAddress(`glGetMaterialfv`);
  if (*cast(void**)&glGetMaterialfv_Z_Z is null) assert(0, `OpenGL function 'glGetMaterialfv' not found!`);
  glGetMaterialfv_Z_Z(face, pname, params);
}
alias glGetMaterialiv = glGetMaterialiv_Z_Z;
__gshared glGetMaterialiv_Z_Z = function void (GLenum face, GLenum pname, GLint *params) { glGetMaterialiv_Z_Z_loader(face, pname, params); };
private void glGetMaterialiv_Z_Z_loader (GLenum face, GLenum pname, GLint *params) {
  *cast(void**)&glGetMaterialiv_Z_Z = glbindGetProcAddress(`glGetMaterialiv`);
  if (*cast(void**)&glGetMaterialiv_Z_Z is null) assert(0, `OpenGL function 'glGetMaterialiv' not found!`);
  glGetMaterialiv_Z_Z(face, pname, params);
}
alias glGetMaterialxOES = glGetMaterialxOES_Z_Z;
__gshared glGetMaterialxOES_Z_Z = function void (GLenum face, GLenum pname, GLfixed param) { glGetMaterialxOES_Z_Z_loader(face, pname, param); };
private void glGetMaterialxOES_Z_Z_loader (GLenum face, GLenum pname, GLfixed param) {
  *cast(void**)&glGetMaterialxOES_Z_Z = glbindGetProcAddress(`glGetMaterialxOES`);
  if (*cast(void**)&glGetMaterialxOES_Z_Z is null) assert(0, `OpenGL function 'glGetMaterialxOES' not found!`);
  glGetMaterialxOES_Z_Z(face, pname, param);
}
alias glGetMaterialxv = glGetMaterialxv_Z_Z;
__gshared glGetMaterialxv_Z_Z = function void (GLenum face, GLenum pname, GLfixed *params) { glGetMaterialxv_Z_Z_loader(face, pname, params); };
private void glGetMaterialxv_Z_Z_loader (GLenum face, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetMaterialxv_Z_Z = glbindGetProcAddress(`glGetMaterialxv`);
  if (*cast(void**)&glGetMaterialxv_Z_Z is null) assert(0, `OpenGL function 'glGetMaterialxv' not found!`);
  glGetMaterialxv_Z_Z(face, pname, params);
}
alias glGetMaterialxvOES = glGetMaterialxvOES_Z_Z;
__gshared glGetMaterialxvOES_Z_Z = function void (GLenum face, GLenum pname, GLfixed *params) { glGetMaterialxvOES_Z_Z_loader(face, pname, params); };
private void glGetMaterialxvOES_Z_Z_loader (GLenum face, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetMaterialxvOES_Z_Z = glbindGetProcAddress(`glGetMaterialxvOES`);
  if (*cast(void**)&glGetMaterialxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetMaterialxvOES' not found!`);
  glGetMaterialxvOES_Z_Z(face, pname, params);
}
alias glGetMemoryObjectParameterivEXT = glGetMemoryObjectParameterivEXT_Z_Z;
__gshared glGetMemoryObjectParameterivEXT_Z_Z = function void (GLuint memoryObject, GLenum pname, GLint *params) { glGetMemoryObjectParameterivEXT_Z_Z_loader(memoryObject, pname, params); };
private void glGetMemoryObjectParameterivEXT_Z_Z_loader (GLuint memoryObject, GLenum pname, GLint *params) {
  *cast(void**)&glGetMemoryObjectParameterivEXT_Z_Z = glbindGetProcAddress(`glGetMemoryObjectParameterivEXT`);
  if (*cast(void**)&glGetMemoryObjectParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMemoryObjectParameterivEXT' not found!`);
  glGetMemoryObjectParameterivEXT_Z_Z(memoryObject, pname, params);
}
alias glGetMinmax = glGetMinmax_Z_Z;
__gshared glGetMinmax_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { glGetMinmax_Z_Z_loader(target, reset, format, type, values); };
private void glGetMinmax_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
  *cast(void**)&glGetMinmax_Z_Z = glbindGetProcAddress(`glGetMinmax`);
  if (*cast(void**)&glGetMinmax_Z_Z is null) assert(0, `OpenGL function 'glGetMinmax' not found!`);
  glGetMinmax_Z_Z(target, reset, format, type, values);
}
alias glGetMinmaxEXT = glGetMinmaxEXT_Z_Z;
__gshared glGetMinmaxEXT_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { glGetMinmaxEXT_Z_Z_loader(target, reset, format, type, values); };
private void glGetMinmaxEXT_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
  *cast(void**)&glGetMinmaxEXT_Z_Z = glbindGetProcAddress(`glGetMinmaxEXT`);
  if (*cast(void**)&glGetMinmaxEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMinmaxEXT' not found!`);
  glGetMinmaxEXT_Z_Z(target, reset, format, type, values);
}
alias glGetMinmaxParameterfv = glGetMinmaxParameterfv_Z_Z;
__gshared glGetMinmaxParameterfv_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetMinmaxParameterfv_Z_Z_loader(target, pname, params); };
private void glGetMinmaxParameterfv_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMinmaxParameterfv_Z_Z = glbindGetProcAddress(`glGetMinmaxParameterfv`);
  if (*cast(void**)&glGetMinmaxParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameterfv' not found!`);
  glGetMinmaxParameterfv_Z_Z(target, pname, params);
}
alias glGetMinmaxParameterfvEXT = glGetMinmaxParameterfvEXT_Z_Z;
__gshared glGetMinmaxParameterfvEXT_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetMinmaxParameterfvEXT_Z_Z_loader(target, pname, params); };
private void glGetMinmaxParameterfvEXT_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMinmaxParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetMinmaxParameterfvEXT`);
  if (*cast(void**)&glGetMinmaxParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameterfvEXT' not found!`);
  glGetMinmaxParameterfvEXT_Z_Z(target, pname, params);
}
alias glGetMinmaxParameteriv = glGetMinmaxParameteriv_Z_Z;
__gshared glGetMinmaxParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetMinmaxParameteriv_Z_Z_loader(target, pname, params); };
private void glGetMinmaxParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetMinmaxParameteriv_Z_Z = glbindGetProcAddress(`glGetMinmaxParameteriv`);
  if (*cast(void**)&glGetMinmaxParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameteriv' not found!`);
  glGetMinmaxParameteriv_Z_Z(target, pname, params);
}
alias glGetMinmaxParameterivEXT = glGetMinmaxParameterivEXT_Z_Z;
__gshared glGetMinmaxParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetMinmaxParameterivEXT_Z_Z_loader(target, pname, params); };
private void glGetMinmaxParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetMinmaxParameterivEXT_Z_Z = glbindGetProcAddress(`glGetMinmaxParameterivEXT`);
  if (*cast(void**)&glGetMinmaxParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMinmaxParameterivEXT' not found!`);
  glGetMinmaxParameterivEXT_Z_Z(target, pname, params);
}
alias glGetMultiTexEnvfvEXT = glGetMultiTexEnvfvEXT_Z_Z;
__gshared glGetMultiTexEnvfvEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLfloat *params) { glGetMultiTexEnvfvEXT_Z_Z_loader(texunit, target, pname, params); };
private void glGetMultiTexEnvfvEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMultiTexEnvfvEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexEnvfvEXT`);
  if (*cast(void**)&glGetMultiTexEnvfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexEnvfvEXT' not found!`);
  glGetMultiTexEnvfvEXT_Z_Z(texunit, target, pname, params);
}
alias glGetMultiTexEnvivEXT = glGetMultiTexEnvivEXT_Z_Z;
__gshared glGetMultiTexEnvivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLint *params) { glGetMultiTexEnvivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glGetMultiTexEnvivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetMultiTexEnvivEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexEnvivEXT`);
  if (*cast(void**)&glGetMultiTexEnvivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexEnvivEXT' not found!`);
  glGetMultiTexEnvivEXT_Z_Z(texunit, target, pname, params);
}
alias glGetMultiTexGendvEXT = glGetMultiTexGendvEXT_Z_Z;
__gshared glGetMultiTexGendvEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) { glGetMultiTexGendvEXT_Z_Z_loader(texunit, coord, pname, params); };
private void glGetMultiTexGendvEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetMultiTexGendvEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexGendvEXT`);
  if (*cast(void**)&glGetMultiTexGendvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexGendvEXT' not found!`);
  glGetMultiTexGendvEXT_Z_Z(texunit, coord, pname, params);
}
alias glGetMultiTexGenfvEXT = glGetMultiTexGenfvEXT_Z_Z;
__gshared glGetMultiTexGenfvEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) { glGetMultiTexGenfvEXT_Z_Z_loader(texunit, coord, pname, params); };
private void glGetMultiTexGenfvEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMultiTexGenfvEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexGenfvEXT`);
  if (*cast(void**)&glGetMultiTexGenfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexGenfvEXT' not found!`);
  glGetMultiTexGenfvEXT_Z_Z(texunit, coord, pname, params);
}
alias glGetMultiTexGenivEXT = glGetMultiTexGenivEXT_Z_Z;
__gshared glGetMultiTexGenivEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, GLint *params) { glGetMultiTexGenivEXT_Z_Z_loader(texunit, coord, pname, params); };
private void glGetMultiTexGenivEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, GLint *params) {
  *cast(void**)&glGetMultiTexGenivEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexGenivEXT`);
  if (*cast(void**)&glGetMultiTexGenivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexGenivEXT' not found!`);
  glGetMultiTexGenivEXT_Z_Z(texunit, coord, pname, params);
}
alias glGetMultiTexImageEXT = glGetMultiTexImageEXT_Z_Z;
__gshared glGetMultiTexImageEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { glGetMultiTexImageEXT_Z_Z_loader(texunit, target, level, format, type, pixels); };
private void glGetMultiTexImageEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  *cast(void**)&glGetMultiTexImageEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexImageEXT`);
  if (*cast(void**)&glGetMultiTexImageEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexImageEXT' not found!`);
  glGetMultiTexImageEXT_Z_Z(texunit, target, level, format, type, pixels);
}
alias glGetMultiTexLevelParameterfvEXT = glGetMultiTexLevelParameterfvEXT_Z_Z;
__gshared glGetMultiTexLevelParameterfvEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) { glGetMultiTexLevelParameterfvEXT_Z_Z_loader(texunit, target, level, pname, params); };
private void glGetMultiTexLevelParameterfvEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMultiTexLevelParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexLevelParameterfvEXT`);
  if (*cast(void**)&glGetMultiTexLevelParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterfvEXT' not found!`);
  glGetMultiTexLevelParameterfvEXT_Z_Z(texunit, target, level, pname, params);
}
alias glGetMultiTexLevelParameterivEXT = glGetMultiTexLevelParameterivEXT_Z_Z;
__gshared glGetMultiTexLevelParameterivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) { glGetMultiTexLevelParameterivEXT_Z_Z_loader(texunit, target, level, pname, params); };
private void glGetMultiTexLevelParameterivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) {
  *cast(void**)&glGetMultiTexLevelParameterivEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexLevelParameterivEXT`);
  if (*cast(void**)&glGetMultiTexLevelParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterivEXT' not found!`);
  glGetMultiTexLevelParameterivEXT_Z_Z(texunit, target, level, pname, params);
}
alias glGetMultiTexParameterIivEXT = glGetMultiTexParameterIivEXT_Z_Z;
__gshared glGetMultiTexParameterIivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLint *params) { glGetMultiTexParameterIivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glGetMultiTexParameterIivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetMultiTexParameterIivEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexParameterIivEXT`);
  if (*cast(void**)&glGetMultiTexParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterIivEXT' not found!`);
  glGetMultiTexParameterIivEXT_Z_Z(texunit, target, pname, params);
}
alias glGetMultiTexParameterIuivEXT = glGetMultiTexParameterIuivEXT_Z_Z;
__gshared glGetMultiTexParameterIuivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLuint *params) { glGetMultiTexParameterIuivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glGetMultiTexParameterIuivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLuint *params) {
  *cast(void**)&glGetMultiTexParameterIuivEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexParameterIuivEXT`);
  if (*cast(void**)&glGetMultiTexParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterIuivEXT' not found!`);
  glGetMultiTexParameterIuivEXT_Z_Z(texunit, target, pname, params);
}
alias glGetMultiTexParameterfvEXT = glGetMultiTexParameterfvEXT_Z_Z;
__gshared glGetMultiTexParameterfvEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLfloat *params) { glGetMultiTexParameterfvEXT_Z_Z_loader(texunit, target, pname, params); };
private void glGetMultiTexParameterfvEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetMultiTexParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexParameterfvEXT`);
  if (*cast(void**)&glGetMultiTexParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterfvEXT' not found!`);
  glGetMultiTexParameterfvEXT_Z_Z(texunit, target, pname, params);
}
alias glGetMultiTexParameterivEXT = glGetMultiTexParameterivEXT_Z_Z;
__gshared glGetMultiTexParameterivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLint *params) { glGetMultiTexParameterivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glGetMultiTexParameterivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetMultiTexParameterivEXT_Z_Z = glbindGetProcAddress(`glGetMultiTexParameterivEXT`);
  if (*cast(void**)&glGetMultiTexParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetMultiTexParameterivEXT' not found!`);
  glGetMultiTexParameterivEXT_Z_Z(texunit, target, pname, params);
}
alias glGetMultisamplefv = glGetMultisamplefv_Z_Z;
__gshared glGetMultisamplefv_Z_Z = function void (GLenum pname, GLuint index, GLfloat *val) { glGetMultisamplefv_Z_Z_loader(pname, index, val); };
private void glGetMultisamplefv_Z_Z_loader (GLenum pname, GLuint index, GLfloat *val) {
  *cast(void**)&glGetMultisamplefv_Z_Z = glbindGetProcAddress(`glGetMultisamplefv`);
  if (*cast(void**)&glGetMultisamplefv_Z_Z is null) assert(0, `OpenGL function 'glGetMultisamplefv' not found!`);
  glGetMultisamplefv_Z_Z(pname, index, val);
}
alias glGetMultisamplefvNV = glGetMultisamplefvNV_Z_Z;
__gshared glGetMultisamplefvNV_Z_Z = function void (GLenum pname, GLuint index, GLfloat *val) { glGetMultisamplefvNV_Z_Z_loader(pname, index, val); };
private void glGetMultisamplefvNV_Z_Z_loader (GLenum pname, GLuint index, GLfloat *val) {
  *cast(void**)&glGetMultisamplefvNV_Z_Z = glbindGetProcAddress(`glGetMultisamplefvNV`);
  if (*cast(void**)&glGetMultisamplefvNV_Z_Z is null) assert(0, `OpenGL function 'glGetMultisamplefvNV' not found!`);
  glGetMultisamplefvNV_Z_Z(pname, index, val);
}
alias glGetNamedBufferParameteri64v = glGetNamedBufferParameteri64v_Z_Z;
__gshared glGetNamedBufferParameteri64v_Z_Z = function void (GLuint buffer, GLenum pname, GLint64 *params) { glGetNamedBufferParameteri64v_Z_Z_loader(buffer, pname, params); };
private void glGetNamedBufferParameteri64v_Z_Z_loader (GLuint buffer, GLenum pname, GLint64 *params) {
  *cast(void**)&glGetNamedBufferParameteri64v_Z_Z = glbindGetProcAddress(`glGetNamedBufferParameteri64v`);
  if (*cast(void**)&glGetNamedBufferParameteri64v_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameteri64v' not found!`);
  glGetNamedBufferParameteri64v_Z_Z(buffer, pname, params);
}
alias glGetNamedBufferParameteriv = glGetNamedBufferParameteriv_Z_Z;
__gshared glGetNamedBufferParameteriv_Z_Z = function void (GLuint buffer, GLenum pname, GLint *params) { glGetNamedBufferParameteriv_Z_Z_loader(buffer, pname, params); };
private void glGetNamedBufferParameteriv_Z_Z_loader (GLuint buffer, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedBufferParameteriv_Z_Z = glbindGetProcAddress(`glGetNamedBufferParameteriv`);
  if (*cast(void**)&glGetNamedBufferParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameteriv' not found!`);
  glGetNamedBufferParameteriv_Z_Z(buffer, pname, params);
}
alias glGetNamedBufferParameterivEXT = glGetNamedBufferParameterivEXT_Z_Z;
__gshared glGetNamedBufferParameterivEXT_Z_Z = function void (GLuint buffer, GLenum pname, GLint *params) { glGetNamedBufferParameterivEXT_Z_Z_loader(buffer, pname, params); };
private void glGetNamedBufferParameterivEXT_Z_Z_loader (GLuint buffer, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedBufferParameterivEXT_Z_Z = glbindGetProcAddress(`glGetNamedBufferParameterivEXT`);
  if (*cast(void**)&glGetNamedBufferParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameterivEXT' not found!`);
  glGetNamedBufferParameterivEXT_Z_Z(buffer, pname, params);
}
alias glGetNamedBufferParameterui64vNV = glGetNamedBufferParameterui64vNV_Z_Z;
__gshared glGetNamedBufferParameterui64vNV_Z_Z = function void (GLuint buffer, GLenum pname, GLuint64EXT *params) { glGetNamedBufferParameterui64vNV_Z_Z_loader(buffer, pname, params); };
private void glGetNamedBufferParameterui64vNV_Z_Z_loader (GLuint buffer, GLenum pname, GLuint64EXT *params) {
  *cast(void**)&glGetNamedBufferParameterui64vNV_Z_Z = glbindGetProcAddress(`glGetNamedBufferParameterui64vNV`);
  if (*cast(void**)&glGetNamedBufferParameterui64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferParameterui64vNV' not found!`);
  glGetNamedBufferParameterui64vNV_Z_Z(buffer, pname, params);
}
alias glGetNamedBufferPointerv = glGetNamedBufferPointerv_Z_Z;
__gshared glGetNamedBufferPointerv_Z_Z = function void (GLuint buffer, GLenum pname, void **params) { glGetNamedBufferPointerv_Z_Z_loader(buffer, pname, params); };
private void glGetNamedBufferPointerv_Z_Z_loader (GLuint buffer, GLenum pname, void **params) {
  *cast(void**)&glGetNamedBufferPointerv_Z_Z = glbindGetProcAddress(`glGetNamedBufferPointerv`);
  if (*cast(void**)&glGetNamedBufferPointerv_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferPointerv' not found!`);
  glGetNamedBufferPointerv_Z_Z(buffer, pname, params);
}
alias glGetNamedBufferPointervEXT = glGetNamedBufferPointervEXT_Z_Z;
__gshared glGetNamedBufferPointervEXT_Z_Z = function void (GLuint buffer, GLenum pname, void **params) { glGetNamedBufferPointervEXT_Z_Z_loader(buffer, pname, params); };
private void glGetNamedBufferPointervEXT_Z_Z_loader (GLuint buffer, GLenum pname, void **params) {
  *cast(void**)&glGetNamedBufferPointervEXT_Z_Z = glbindGetProcAddress(`glGetNamedBufferPointervEXT`);
  if (*cast(void**)&glGetNamedBufferPointervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferPointervEXT' not found!`);
  glGetNamedBufferPointervEXT_Z_Z(buffer, pname, params);
}
alias glGetNamedBufferSubData = glGetNamedBufferSubData_Z_Z;
__gshared glGetNamedBufferSubData_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) { glGetNamedBufferSubData_Z_Z_loader(buffer, offset, size, data); };
private void glGetNamedBufferSubData_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
  *cast(void**)&glGetNamedBufferSubData_Z_Z = glbindGetProcAddress(`glGetNamedBufferSubData`);
  if (*cast(void**)&glGetNamedBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferSubData' not found!`);
  glGetNamedBufferSubData_Z_Z(buffer, offset, size, data);
}
alias glGetNamedBufferSubDataEXT = glGetNamedBufferSubDataEXT_Z_Z;
__gshared glGetNamedBufferSubDataEXT_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) { glGetNamedBufferSubDataEXT_Z_Z_loader(buffer, offset, size, data); };
private void glGetNamedBufferSubDataEXT_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
  *cast(void**)&glGetNamedBufferSubDataEXT_Z_Z = glbindGetProcAddress(`glGetNamedBufferSubDataEXT`);
  if (*cast(void**)&glGetNamedBufferSubDataEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedBufferSubDataEXT' not found!`);
  glGetNamedBufferSubDataEXT_Z_Z(buffer, offset, size, data);
}
alias glGetNamedFramebufferParameterfvAMD = glGetNamedFramebufferParameterfvAMD_Z_Z;
__gshared glGetNamedFramebufferParameterfvAMD_Z_Z = function void (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) { glGetNamedFramebufferParameterfvAMD_Z_Z_loader(framebuffer, pname, numsamples, pixelindex, size, values); };
private void glGetNamedFramebufferParameterfvAMD_Z_Z_loader (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) {
  *cast(void**)&glGetNamedFramebufferParameterfvAMD_Z_Z = glbindGetProcAddress(`glGetNamedFramebufferParameterfvAMD`);
  if (*cast(void**)&glGetNamedFramebufferParameterfvAMD_Z_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameterfvAMD' not found!`);
  glGetNamedFramebufferParameterfvAMD_Z_Z(framebuffer, pname, numsamples, pixelindex, size, values);
}
alias glGetNamedFramebufferAttachmentParameteriv = glGetNamedFramebufferAttachmentParameteriv_Z_Z;
__gshared glGetNamedFramebufferAttachmentParameteriv_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) { glGetNamedFramebufferAttachmentParameteriv_Z_Z_loader(framebuffer, attachment, pname, params); };
private void glGetNamedFramebufferAttachmentParameteriv_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedFramebufferAttachmentParameteriv_Z_Z = glbindGetProcAddress(`glGetNamedFramebufferAttachmentParameteriv`);
  if (*cast(void**)&glGetNamedFramebufferAttachmentParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameteriv' not found!`);
  glGetNamedFramebufferAttachmentParameteriv_Z_Z(framebuffer, attachment, pname, params);
}
alias glGetNamedFramebufferAttachmentParameterivEXT = glGetNamedFramebufferAttachmentParameterivEXT_Z_Z;
__gshared glGetNamedFramebufferAttachmentParameterivEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) { glGetNamedFramebufferAttachmentParameterivEXT_Z_Z_loader(framebuffer, attachment, pname, params); };
private void glGetNamedFramebufferAttachmentParameterivEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedFramebufferAttachmentParameterivEXT_Z_Z = glbindGetProcAddress(`glGetNamedFramebufferAttachmentParameterivEXT`);
  if (*cast(void**)&glGetNamedFramebufferAttachmentParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameterivEXT' not found!`);
  glGetNamedFramebufferAttachmentParameterivEXT_Z_Z(framebuffer, attachment, pname, params);
}
alias glGetNamedFramebufferParameteriv = glGetNamedFramebufferParameteriv_Z_Z;
__gshared glGetNamedFramebufferParameteriv_Z_Z = function void (GLuint framebuffer, GLenum pname, GLint *param) { glGetNamedFramebufferParameteriv_Z_Z_loader(framebuffer, pname, param); };
private void glGetNamedFramebufferParameteriv_Z_Z_loader (GLuint framebuffer, GLenum pname, GLint *param) {
  *cast(void**)&glGetNamedFramebufferParameteriv_Z_Z = glbindGetProcAddress(`glGetNamedFramebufferParameteriv`);
  if (*cast(void**)&glGetNamedFramebufferParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameteriv' not found!`);
  glGetNamedFramebufferParameteriv_Z_Z(framebuffer, pname, param);
}
alias glGetNamedFramebufferParameterivEXT = glGetNamedFramebufferParameterivEXT_Z_Z;
__gshared glGetNamedFramebufferParameterivEXT_Z_Z = function void (GLuint framebuffer, GLenum pname, GLint *params) { glGetNamedFramebufferParameterivEXT_Z_Z_loader(framebuffer, pname, params); };
private void glGetNamedFramebufferParameterivEXT_Z_Z_loader (GLuint framebuffer, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedFramebufferParameterivEXT_Z_Z = glbindGetProcAddress(`glGetNamedFramebufferParameterivEXT`);
  if (*cast(void**)&glGetNamedFramebufferParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameterivEXT' not found!`);
  glGetNamedFramebufferParameterivEXT_Z_Z(framebuffer, pname, params);
}
alias glGetNamedProgramLocalParameterIivEXT = glGetNamedProgramLocalParameterIivEXT_Z_Z;
__gshared glGetNamedProgramLocalParameterIivEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLint *params) { glGetNamedProgramLocalParameterIivEXT_Z_Z_loader(program, target, index, params); };
private void glGetNamedProgramLocalParameterIivEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLint *params) {
  *cast(void**)&glGetNamedProgramLocalParameterIivEXT_Z_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterIivEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIivEXT' not found!`);
  glGetNamedProgramLocalParameterIivEXT_Z_Z(program, target, index, params);
}
alias glGetNamedProgramLocalParameterIuivEXT = glGetNamedProgramLocalParameterIuivEXT_Z_Z;
__gshared glGetNamedProgramLocalParameterIuivEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLuint *params) { glGetNamedProgramLocalParameterIuivEXT_Z_Z_loader(program, target, index, params); };
private void glGetNamedProgramLocalParameterIuivEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLuint *params) {
  *cast(void**)&glGetNamedProgramLocalParameterIuivEXT_Z_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterIuivEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIuivEXT' not found!`);
  glGetNamedProgramLocalParameterIuivEXT_Z_Z(program, target, index, params);
}
alias glGetNamedProgramLocalParameterdvEXT = glGetNamedProgramLocalParameterdvEXT_Z_Z;
__gshared glGetNamedProgramLocalParameterdvEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLdouble *params) { glGetNamedProgramLocalParameterdvEXT_Z_Z_loader(program, target, index, params); };
private void glGetNamedProgramLocalParameterdvEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLdouble *params) {
  *cast(void**)&glGetNamedProgramLocalParameterdvEXT_Z_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterdvEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterdvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterdvEXT' not found!`);
  glGetNamedProgramLocalParameterdvEXT_Z_Z(program, target, index, params);
}
alias glGetNamedProgramLocalParameterfvEXT = glGetNamedProgramLocalParameterfvEXT_Z_Z;
__gshared glGetNamedProgramLocalParameterfvEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLfloat *params) { glGetNamedProgramLocalParameterfvEXT_Z_Z_loader(program, target, index, params); };
private void glGetNamedProgramLocalParameterfvEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLfloat *params) {
  *cast(void**)&glGetNamedProgramLocalParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetNamedProgramLocalParameterfvEXT`);
  if (*cast(void**)&glGetNamedProgramLocalParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterfvEXT' not found!`);
  glGetNamedProgramLocalParameterfvEXT_Z_Z(program, target, index, params);
}
alias glGetNamedProgramStringEXT = glGetNamedProgramStringEXT_Z_Z;
__gshared glGetNamedProgramStringEXT_Z_Z = function void (GLuint program, GLenum target, GLenum pname, void *string) { glGetNamedProgramStringEXT_Z_Z_loader(program, target, pname, string); };
private void glGetNamedProgramStringEXT_Z_Z_loader (GLuint program, GLenum target, GLenum pname, void *string) {
  *cast(void**)&glGetNamedProgramStringEXT_Z_Z = glbindGetProcAddress(`glGetNamedProgramStringEXT`);
  if (*cast(void**)&glGetNamedProgramStringEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedProgramStringEXT' not found!`);
  glGetNamedProgramStringEXT_Z_Z(program, target, pname, string);
}
alias glGetNamedProgramivEXT = glGetNamedProgramivEXT_Z_Z;
__gshared glGetNamedProgramivEXT_Z_Z = function void (GLuint program, GLenum target, GLenum pname, GLint *params) { glGetNamedProgramivEXT_Z_Z_loader(program, target, pname, params); };
private void glGetNamedProgramivEXT_Z_Z_loader (GLuint program, GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedProgramivEXT_Z_Z = glbindGetProcAddress(`glGetNamedProgramivEXT`);
  if (*cast(void**)&glGetNamedProgramivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedProgramivEXT' not found!`);
  glGetNamedProgramivEXT_Z_Z(program, target, pname, params);
}
alias glGetNamedRenderbufferParameteriv = glGetNamedRenderbufferParameteriv_Z_Z;
__gshared glGetNamedRenderbufferParameteriv_Z_Z = function void (GLuint renderbuffer, GLenum pname, GLint *params) { glGetNamedRenderbufferParameteriv_Z_Z_loader(renderbuffer, pname, params); };
private void glGetNamedRenderbufferParameteriv_Z_Z_loader (GLuint renderbuffer, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedRenderbufferParameteriv_Z_Z = glbindGetProcAddress(`glGetNamedRenderbufferParameteriv`);
  if (*cast(void**)&glGetNamedRenderbufferParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameteriv' not found!`);
  glGetNamedRenderbufferParameteriv_Z_Z(renderbuffer, pname, params);
}
alias glGetNamedRenderbufferParameterivEXT = glGetNamedRenderbufferParameterivEXT_Z_Z;
__gshared glGetNamedRenderbufferParameterivEXT_Z_Z = function void (GLuint renderbuffer, GLenum pname, GLint *params) { glGetNamedRenderbufferParameterivEXT_Z_Z_loader(renderbuffer, pname, params); };
private void glGetNamedRenderbufferParameterivEXT_Z_Z_loader (GLuint renderbuffer, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedRenderbufferParameterivEXT_Z_Z = glbindGetProcAddress(`glGetNamedRenderbufferParameterivEXT`);
  if (*cast(void**)&glGetNamedRenderbufferParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameterivEXT' not found!`);
  glGetNamedRenderbufferParameterivEXT_Z_Z(renderbuffer, pname, params);
}
alias glGetNamedStringARB = glGetNamedStringARB_Z_Z;
__gshared glGetNamedStringARB_Z_Z = function void (GLint namelen, const(GLchar)* name, GLsizei bufSize, GLint *stringlen, GLchar *string) { glGetNamedStringARB_Z_Z_loader(namelen, name, bufSize, stringlen, string); };
private void glGetNamedStringARB_Z_Z_loader (GLint namelen, const(GLchar)* name, GLsizei bufSize, GLint *stringlen, GLchar *string) {
  *cast(void**)&glGetNamedStringARB_Z_Z = glbindGetProcAddress(`glGetNamedStringARB`);
  if (*cast(void**)&glGetNamedStringARB_Z_Z is null) assert(0, `OpenGL function 'glGetNamedStringARB' not found!`);
  glGetNamedStringARB_Z_Z(namelen, name, bufSize, stringlen, string);
}
alias glGetNamedStringivARB = glGetNamedStringivARB_Z_Z;
__gshared glGetNamedStringivARB_Z_Z = function void (GLint namelen, const(GLchar)* name, GLenum pname, GLint *params) { glGetNamedStringivARB_Z_Z_loader(namelen, name, pname, params); };
private void glGetNamedStringivARB_Z_Z_loader (GLint namelen, const(GLchar)* name, GLenum pname, GLint *params) {
  *cast(void**)&glGetNamedStringivARB_Z_Z = glbindGetProcAddress(`glGetNamedStringivARB`);
  if (*cast(void**)&glGetNamedStringivARB_Z_Z is null) assert(0, `OpenGL function 'glGetNamedStringivARB' not found!`);
  glGetNamedStringivARB_Z_Z(namelen, name, pname, params);
}
alias glGetNextPerfQueryIdINTEL = glGetNextPerfQueryIdINTEL_Z_Z;
__gshared glGetNextPerfQueryIdINTEL_Z_Z = function void (GLuint queryId, GLuint *nextQueryId) { glGetNextPerfQueryIdINTEL_Z_Z_loader(queryId, nextQueryId); };
private void glGetNextPerfQueryIdINTEL_Z_Z_loader (GLuint queryId, GLuint *nextQueryId) {
  *cast(void**)&glGetNextPerfQueryIdINTEL_Z_Z = glbindGetProcAddress(`glGetNextPerfQueryIdINTEL`);
  if (*cast(void**)&glGetNextPerfQueryIdINTEL_Z_Z is null) assert(0, `OpenGL function 'glGetNextPerfQueryIdINTEL' not found!`);
  glGetNextPerfQueryIdINTEL_Z_Z(queryId, nextQueryId);
}
alias glGetObjectBufferfvATI = glGetObjectBufferfvATI_Z_Z;
__gshared glGetObjectBufferfvATI_Z_Z = function void (GLuint buffer, GLenum pname, GLfloat *params) { glGetObjectBufferfvATI_Z_Z_loader(buffer, pname, params); };
private void glGetObjectBufferfvATI_Z_Z_loader (GLuint buffer, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetObjectBufferfvATI_Z_Z = glbindGetProcAddress(`glGetObjectBufferfvATI`);
  if (*cast(void**)&glGetObjectBufferfvATI_Z_Z is null) assert(0, `OpenGL function 'glGetObjectBufferfvATI' not found!`);
  glGetObjectBufferfvATI_Z_Z(buffer, pname, params);
}
alias glGetObjectBufferivATI = glGetObjectBufferivATI_Z_Z;
__gshared glGetObjectBufferivATI_Z_Z = function void (GLuint buffer, GLenum pname, GLint *params) { glGetObjectBufferivATI_Z_Z_loader(buffer, pname, params); };
private void glGetObjectBufferivATI_Z_Z_loader (GLuint buffer, GLenum pname, GLint *params) {
  *cast(void**)&glGetObjectBufferivATI_Z_Z = glbindGetProcAddress(`glGetObjectBufferivATI`);
  if (*cast(void**)&glGetObjectBufferivATI_Z_Z is null) assert(0, `OpenGL function 'glGetObjectBufferivATI' not found!`);
  glGetObjectBufferivATI_Z_Z(buffer, pname, params);
}
alias glGetObjectLabel = glGetObjectLabel_Z_Z;
__gshared glGetObjectLabel_Z_Z = function void (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) { glGetObjectLabel_Z_Z_loader(identifier, name, bufSize, length, label); };
private void glGetObjectLabel_Z_Z_loader (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
  *cast(void**)&glGetObjectLabel_Z_Z = glbindGetProcAddress(`glGetObjectLabel`);
  if (*cast(void**)&glGetObjectLabel_Z_Z is null) assert(0, `OpenGL function 'glGetObjectLabel' not found!`);
  glGetObjectLabel_Z_Z(identifier, name, bufSize, length, label);
}
alias glGetObjectLabelEXT = glGetObjectLabelEXT_Z_Z;
__gshared glGetObjectLabelEXT_Z_Z = function void (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) { glGetObjectLabelEXT_Z_Z_loader(type, object, bufSize, length, label); };
private void glGetObjectLabelEXT_Z_Z_loader (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) {
  *cast(void**)&glGetObjectLabelEXT_Z_Z = glbindGetProcAddress(`glGetObjectLabelEXT`);
  if (*cast(void**)&glGetObjectLabelEXT_Z_Z is null) assert(0, `OpenGL function 'glGetObjectLabelEXT' not found!`);
  glGetObjectLabelEXT_Z_Z(type, object, bufSize, length, label);
}
alias glGetObjectLabelKHR = glGetObjectLabelKHR_Z_Z;
__gshared glGetObjectLabelKHR_Z_Z = function void (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) { glGetObjectLabelKHR_Z_Z_loader(identifier, name, bufSize, length, label); };
private void glGetObjectLabelKHR_Z_Z_loader (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
  *cast(void**)&glGetObjectLabelKHR_Z_Z = glbindGetProcAddress(`glGetObjectLabelKHR`);
  if (*cast(void**)&glGetObjectLabelKHR_Z_Z is null) assert(0, `OpenGL function 'glGetObjectLabelKHR' not found!`);
  glGetObjectLabelKHR_Z_Z(identifier, name, bufSize, length, label);
}
alias glGetObjectParameterfvARB = glGetObjectParameterfvARB_Z_Z;
__gshared glGetObjectParameterfvARB_Z_Z = function void (GLhandleARB obj, GLenum pname, GLfloat *params) { glGetObjectParameterfvARB_Z_Z_loader(obj, pname, params); };
private void glGetObjectParameterfvARB_Z_Z_loader (GLhandleARB obj, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetObjectParameterfvARB_Z_Z = glbindGetProcAddress(`glGetObjectParameterfvARB`);
  if (*cast(void**)&glGetObjectParameterfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetObjectParameterfvARB' not found!`);
  glGetObjectParameterfvARB_Z_Z(obj, pname, params);
}
alias glGetObjectParameterivAPPLE = glGetObjectParameterivAPPLE_Z_Z;
__gshared glGetObjectParameterivAPPLE_Z_Z = function void (GLenum objectType, GLuint name, GLenum pname, GLint *params) { glGetObjectParameterivAPPLE_Z_Z_loader(objectType, name, pname, params); };
private void glGetObjectParameterivAPPLE_Z_Z_loader (GLenum objectType, GLuint name, GLenum pname, GLint *params) {
  *cast(void**)&glGetObjectParameterivAPPLE_Z_Z = glbindGetProcAddress(`glGetObjectParameterivAPPLE`);
  if (*cast(void**)&glGetObjectParameterivAPPLE_Z_Z is null) assert(0, `OpenGL function 'glGetObjectParameterivAPPLE' not found!`);
  glGetObjectParameterivAPPLE_Z_Z(objectType, name, pname, params);
}
alias glGetObjectParameterivARB = glGetObjectParameterivARB_Z_Z;
__gshared glGetObjectParameterivARB_Z_Z = function void (GLhandleARB obj, GLenum pname, GLint *params) { glGetObjectParameterivARB_Z_Z_loader(obj, pname, params); };
private void glGetObjectParameterivARB_Z_Z_loader (GLhandleARB obj, GLenum pname, GLint *params) {
  *cast(void**)&glGetObjectParameterivARB_Z_Z = glbindGetProcAddress(`glGetObjectParameterivARB`);
  if (*cast(void**)&glGetObjectParameterivARB_Z_Z is null) assert(0, `OpenGL function 'glGetObjectParameterivARB' not found!`);
  glGetObjectParameterivARB_Z_Z(obj, pname, params);
}
alias glGetObjectPtrLabel = glGetObjectPtrLabel_Z_Z;
__gshared glGetObjectPtrLabel_Z_Z = function void (const(void)* ptr, GLsizei bufSize, GLsizei *length, GLchar *label) { glGetObjectPtrLabel_Z_Z_loader(ptr, bufSize, length, label); };
private void glGetObjectPtrLabel_Z_Z_loader (const(void)* ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
  *cast(void**)&glGetObjectPtrLabel_Z_Z = glbindGetProcAddress(`glGetObjectPtrLabel`);
  if (*cast(void**)&glGetObjectPtrLabel_Z_Z is null) assert(0, `OpenGL function 'glGetObjectPtrLabel' not found!`);
  glGetObjectPtrLabel_Z_Z(ptr, bufSize, length, label);
}
alias glGetObjectPtrLabelKHR = glGetObjectPtrLabelKHR_Z_Z;
__gshared glGetObjectPtrLabelKHR_Z_Z = function void (const(void)* ptr, GLsizei bufSize, GLsizei *length, GLchar *label) { glGetObjectPtrLabelKHR_Z_Z_loader(ptr, bufSize, length, label); };
private void glGetObjectPtrLabelKHR_Z_Z_loader (const(void)* ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
  *cast(void**)&glGetObjectPtrLabelKHR_Z_Z = glbindGetProcAddress(`glGetObjectPtrLabelKHR`);
  if (*cast(void**)&glGetObjectPtrLabelKHR_Z_Z is null) assert(0, `OpenGL function 'glGetObjectPtrLabelKHR' not found!`);
  glGetObjectPtrLabelKHR_Z_Z(ptr, bufSize, length, label);
}
alias glGetOcclusionQueryivNV = glGetOcclusionQueryivNV_Z_Z;
__gshared glGetOcclusionQueryivNV_Z_Z = function void (GLuint id, GLenum pname, GLint *params) { glGetOcclusionQueryivNV_Z_Z_loader(id, pname, params); };
private void glGetOcclusionQueryivNV_Z_Z_loader (GLuint id, GLenum pname, GLint *params) {
  *cast(void**)&glGetOcclusionQueryivNV_Z_Z = glbindGetProcAddress(`glGetOcclusionQueryivNV`);
  if (*cast(void**)&glGetOcclusionQueryivNV_Z_Z is null) assert(0, `OpenGL function 'glGetOcclusionQueryivNV' not found!`);
  glGetOcclusionQueryivNV_Z_Z(id, pname, params);
}
alias glGetOcclusionQueryuivNV = glGetOcclusionQueryuivNV_Z_Z;
__gshared glGetOcclusionQueryuivNV_Z_Z = function void (GLuint id, GLenum pname, GLuint *params) { glGetOcclusionQueryuivNV_Z_Z_loader(id, pname, params); };
private void glGetOcclusionQueryuivNV_Z_Z_loader (GLuint id, GLenum pname, GLuint *params) {
  *cast(void**)&glGetOcclusionQueryuivNV_Z_Z = glbindGetProcAddress(`glGetOcclusionQueryuivNV`);
  if (*cast(void**)&glGetOcclusionQueryuivNV_Z_Z is null) assert(0, `OpenGL function 'glGetOcclusionQueryuivNV' not found!`);
  glGetOcclusionQueryuivNV_Z_Z(id, pname, params);
}
alias glGetPathColorGenfvNV = glGetPathColorGenfvNV_Z_Z;
__gshared glGetPathColorGenfvNV_Z_Z = function void (GLenum color, GLenum pname, GLfloat *value) { glGetPathColorGenfvNV_Z_Z_loader(color, pname, value); };
private void glGetPathColorGenfvNV_Z_Z_loader (GLenum color, GLenum pname, GLfloat *value) {
  *cast(void**)&glGetPathColorGenfvNV_Z_Z = glbindGetProcAddress(`glGetPathColorGenfvNV`);
  if (*cast(void**)&glGetPathColorGenfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathColorGenfvNV' not found!`);
  glGetPathColorGenfvNV_Z_Z(color, pname, value);
}
alias glGetPathColorGenivNV = glGetPathColorGenivNV_Z_Z;
__gshared glGetPathColorGenivNV_Z_Z = function void (GLenum color, GLenum pname, GLint *value) { glGetPathColorGenivNV_Z_Z_loader(color, pname, value); };
private void glGetPathColorGenivNV_Z_Z_loader (GLenum color, GLenum pname, GLint *value) {
  *cast(void**)&glGetPathColorGenivNV_Z_Z = glbindGetProcAddress(`glGetPathColorGenivNV`);
  if (*cast(void**)&glGetPathColorGenivNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathColorGenivNV' not found!`);
  glGetPathColorGenivNV_Z_Z(color, pname, value);
}
alias glGetPathCommandsNV = glGetPathCommandsNV_Z_Z;
__gshared glGetPathCommandsNV_Z_Z = function void (GLuint path, GLubyte *commands) { glGetPathCommandsNV_Z_Z_loader(path, commands); };
private void glGetPathCommandsNV_Z_Z_loader (GLuint path, GLubyte *commands) {
  *cast(void**)&glGetPathCommandsNV_Z_Z = glbindGetProcAddress(`glGetPathCommandsNV`);
  if (*cast(void**)&glGetPathCommandsNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathCommandsNV' not found!`);
  glGetPathCommandsNV_Z_Z(path, commands);
}
alias glGetPathCoordsNV = glGetPathCoordsNV_Z_Z;
__gshared glGetPathCoordsNV_Z_Z = function void (GLuint path, GLfloat *coords) { glGetPathCoordsNV_Z_Z_loader(path, coords); };
private void glGetPathCoordsNV_Z_Z_loader (GLuint path, GLfloat *coords) {
  *cast(void**)&glGetPathCoordsNV_Z_Z = glbindGetProcAddress(`glGetPathCoordsNV`);
  if (*cast(void**)&glGetPathCoordsNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathCoordsNV' not found!`);
  glGetPathCoordsNV_Z_Z(path, coords);
}
alias glGetPathDashArrayNV = glGetPathDashArrayNV_Z_Z;
__gshared glGetPathDashArrayNV_Z_Z = function void (GLuint path, GLfloat *dashArray) { glGetPathDashArrayNV_Z_Z_loader(path, dashArray); };
private void glGetPathDashArrayNV_Z_Z_loader (GLuint path, GLfloat *dashArray) {
  *cast(void**)&glGetPathDashArrayNV_Z_Z = glbindGetProcAddress(`glGetPathDashArrayNV`);
  if (*cast(void**)&glGetPathDashArrayNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathDashArrayNV' not found!`);
  glGetPathDashArrayNV_Z_Z(path, dashArray);
}
alias glGetPathLengthNV = glGetPathLengthNV_Z_Z;
__gshared glGetPathLengthNV_Z_Z = function GLfloat (GLuint path, GLsizei startSegment, GLsizei numSegments) { return glGetPathLengthNV_Z_Z_loader(path, startSegment, numSegments); };
private GLfloat glGetPathLengthNV_Z_Z_loader (GLuint path, GLsizei startSegment, GLsizei numSegments) {
  *cast(void**)&glGetPathLengthNV_Z_Z = glbindGetProcAddress(`glGetPathLengthNV`);
  if (*cast(void**)&glGetPathLengthNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathLengthNV' not found!`);
  return glGetPathLengthNV_Z_Z(path, startSegment, numSegments);
}
alias glGetPathMetricRangeNV = glGetPathMetricRangeNV_Z_Z;
__gshared glGetPathMetricRangeNV_Z_Z = function void (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) { glGetPathMetricRangeNV_Z_Z_loader(metricQueryMask, firstPathName, numPaths, stride, metrics); };
private void glGetPathMetricRangeNV_Z_Z_loader (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) {
  *cast(void**)&glGetPathMetricRangeNV_Z_Z = glbindGetProcAddress(`glGetPathMetricRangeNV`);
  if (*cast(void**)&glGetPathMetricRangeNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathMetricRangeNV' not found!`);
  glGetPathMetricRangeNV_Z_Z(metricQueryMask, firstPathName, numPaths, stride, metrics);
}
alias glGetPathMetricsNV = glGetPathMetricsNV_Z_Z;
__gshared glGetPathMetricsNV_Z_Z = function void (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) { glGetPathMetricsNV_Z_Z_loader(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); };
private void glGetPathMetricsNV_Z_Z_loader (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) {
  *cast(void**)&glGetPathMetricsNV_Z_Z = glbindGetProcAddress(`glGetPathMetricsNV`);
  if (*cast(void**)&glGetPathMetricsNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathMetricsNV' not found!`);
  glGetPathMetricsNV_Z_Z(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}
alias glGetPathParameterfvNV = glGetPathParameterfvNV_Z_Z;
__gshared glGetPathParameterfvNV_Z_Z = function void (GLuint path, GLenum pname, GLfloat *value) { glGetPathParameterfvNV_Z_Z_loader(path, pname, value); };
private void glGetPathParameterfvNV_Z_Z_loader (GLuint path, GLenum pname, GLfloat *value) {
  *cast(void**)&glGetPathParameterfvNV_Z_Z = glbindGetProcAddress(`glGetPathParameterfvNV`);
  if (*cast(void**)&glGetPathParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathParameterfvNV' not found!`);
  glGetPathParameterfvNV_Z_Z(path, pname, value);
}
alias glGetPathParameterivNV = glGetPathParameterivNV_Z_Z;
__gshared glGetPathParameterivNV_Z_Z = function void (GLuint path, GLenum pname, GLint *value) { glGetPathParameterivNV_Z_Z_loader(path, pname, value); };
private void glGetPathParameterivNV_Z_Z_loader (GLuint path, GLenum pname, GLint *value) {
  *cast(void**)&glGetPathParameterivNV_Z_Z = glbindGetProcAddress(`glGetPathParameterivNV`);
  if (*cast(void**)&glGetPathParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathParameterivNV' not found!`);
  glGetPathParameterivNV_Z_Z(path, pname, value);
}
alias glGetPathSpacingNV = glGetPathSpacingNV_Z_Z;
__gshared glGetPathSpacingNV_Z_Z = function void (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) { glGetPathSpacingNV_Z_Z_loader(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); };
private void glGetPathSpacingNV_Z_Z_loader (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) {
  *cast(void**)&glGetPathSpacingNV_Z_Z = glbindGetProcAddress(`glGetPathSpacingNV`);
  if (*cast(void**)&glGetPathSpacingNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathSpacingNV' not found!`);
  glGetPathSpacingNV_Z_Z(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}
alias glGetPathTexGenfvNV = glGetPathTexGenfvNV_Z_Z;
__gshared glGetPathTexGenfvNV_Z_Z = function void (GLenum texCoordSet, GLenum pname, GLfloat *value) { glGetPathTexGenfvNV_Z_Z_loader(texCoordSet, pname, value); };
private void glGetPathTexGenfvNV_Z_Z_loader (GLenum texCoordSet, GLenum pname, GLfloat *value) {
  *cast(void**)&glGetPathTexGenfvNV_Z_Z = glbindGetProcAddress(`glGetPathTexGenfvNV`);
  if (*cast(void**)&glGetPathTexGenfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathTexGenfvNV' not found!`);
  glGetPathTexGenfvNV_Z_Z(texCoordSet, pname, value);
}
alias glGetPathTexGenivNV = glGetPathTexGenivNV_Z_Z;
__gshared glGetPathTexGenivNV_Z_Z = function void (GLenum texCoordSet, GLenum pname, GLint *value) { glGetPathTexGenivNV_Z_Z_loader(texCoordSet, pname, value); };
private void glGetPathTexGenivNV_Z_Z_loader (GLenum texCoordSet, GLenum pname, GLint *value) {
  *cast(void**)&glGetPathTexGenivNV_Z_Z = glbindGetProcAddress(`glGetPathTexGenivNV`);
  if (*cast(void**)&glGetPathTexGenivNV_Z_Z is null) assert(0, `OpenGL function 'glGetPathTexGenivNV' not found!`);
  glGetPathTexGenivNV_Z_Z(texCoordSet, pname, value);
}
alias glGetPerfCounterInfoINTEL = glGetPerfCounterInfoINTEL_Z_Z;
__gshared glGetPerfCounterInfoINTEL_Z_Z = function void (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) { glGetPerfCounterInfoINTEL_Z_Z_loader(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); };
private void glGetPerfCounterInfoINTEL_Z_Z_loader (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) {
  *cast(void**)&glGetPerfCounterInfoINTEL_Z_Z = glbindGetProcAddress(`glGetPerfCounterInfoINTEL`);
  if (*cast(void**)&glGetPerfCounterInfoINTEL_Z_Z is null) assert(0, `OpenGL function 'glGetPerfCounterInfoINTEL' not found!`);
  glGetPerfCounterInfoINTEL_Z_Z(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}
alias glGetPerfMonitorCounterDataAMD = glGetPerfMonitorCounterDataAMD_Z_Z;
__gshared glGetPerfMonitorCounterDataAMD_Z_Z = function void (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) { glGetPerfMonitorCounterDataAMD_Z_Z_loader(monitor, pname, dataSize, data, bytesWritten); };
private void glGetPerfMonitorCounterDataAMD_Z_Z_loader (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) {
  *cast(void**)&glGetPerfMonitorCounterDataAMD_Z_Z = glbindGetProcAddress(`glGetPerfMonitorCounterDataAMD`);
  if (*cast(void**)&glGetPerfMonitorCounterDataAMD_Z_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterDataAMD' not found!`);
  glGetPerfMonitorCounterDataAMD_Z_Z(monitor, pname, dataSize, data, bytesWritten);
}
alias glGetPerfMonitorCounterInfoAMD = glGetPerfMonitorCounterInfoAMD_Z_Z;
__gshared glGetPerfMonitorCounterInfoAMD_Z_Z = function void (GLuint group, GLuint counter, GLenum pname, void *data) { glGetPerfMonitorCounterInfoAMD_Z_Z_loader(group, counter, pname, data); };
private void glGetPerfMonitorCounterInfoAMD_Z_Z_loader (GLuint group, GLuint counter, GLenum pname, void *data) {
  *cast(void**)&glGetPerfMonitorCounterInfoAMD_Z_Z = glbindGetProcAddress(`glGetPerfMonitorCounterInfoAMD`);
  if (*cast(void**)&glGetPerfMonitorCounterInfoAMD_Z_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterInfoAMD' not found!`);
  glGetPerfMonitorCounterInfoAMD_Z_Z(group, counter, pname, data);
}
alias glGetPerfMonitorCounterStringAMD = glGetPerfMonitorCounterStringAMD_Z_Z;
__gshared glGetPerfMonitorCounterStringAMD_Z_Z = function void (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) { glGetPerfMonitorCounterStringAMD_Z_Z_loader(group, counter, bufSize, length, counterString); };
private void glGetPerfMonitorCounterStringAMD_Z_Z_loader (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) {
  *cast(void**)&glGetPerfMonitorCounterStringAMD_Z_Z = glbindGetProcAddress(`glGetPerfMonitorCounterStringAMD`);
  if (*cast(void**)&glGetPerfMonitorCounterStringAMD_Z_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterStringAMD' not found!`);
  glGetPerfMonitorCounterStringAMD_Z_Z(group, counter, bufSize, length, counterString);
}
alias glGetPerfMonitorCountersAMD = glGetPerfMonitorCountersAMD_Z_Z;
__gshared glGetPerfMonitorCountersAMD_Z_Z = function void (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) { glGetPerfMonitorCountersAMD_Z_Z_loader(group, numCounters, maxActiveCounters, counterSize, counters); };
private void glGetPerfMonitorCountersAMD_Z_Z_loader (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) {
  *cast(void**)&glGetPerfMonitorCountersAMD_Z_Z = glbindGetProcAddress(`glGetPerfMonitorCountersAMD`);
  if (*cast(void**)&glGetPerfMonitorCountersAMD_Z_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorCountersAMD' not found!`);
  glGetPerfMonitorCountersAMD_Z_Z(group, numCounters, maxActiveCounters, counterSize, counters);
}
alias glGetPerfMonitorGroupStringAMD = glGetPerfMonitorGroupStringAMD_Z_Z;
__gshared glGetPerfMonitorGroupStringAMD_Z_Z = function void (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) { glGetPerfMonitorGroupStringAMD_Z_Z_loader(group, bufSize, length, groupString); };
private void glGetPerfMonitorGroupStringAMD_Z_Z_loader (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) {
  *cast(void**)&glGetPerfMonitorGroupStringAMD_Z_Z = glbindGetProcAddress(`glGetPerfMonitorGroupStringAMD`);
  if (*cast(void**)&glGetPerfMonitorGroupStringAMD_Z_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupStringAMD' not found!`);
  glGetPerfMonitorGroupStringAMD_Z_Z(group, bufSize, length, groupString);
}
alias glGetPerfMonitorGroupsAMD = glGetPerfMonitorGroupsAMD_Z_Z;
__gshared glGetPerfMonitorGroupsAMD_Z_Z = function void (GLint *numGroups, GLsizei groupsSize, GLuint *groups) { glGetPerfMonitorGroupsAMD_Z_Z_loader(numGroups, groupsSize, groups); };
private void glGetPerfMonitorGroupsAMD_Z_Z_loader (GLint *numGroups, GLsizei groupsSize, GLuint *groups) {
  *cast(void**)&glGetPerfMonitorGroupsAMD_Z_Z = glbindGetProcAddress(`glGetPerfMonitorGroupsAMD`);
  if (*cast(void**)&glGetPerfMonitorGroupsAMD_Z_Z is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupsAMD' not found!`);
  glGetPerfMonitorGroupsAMD_Z_Z(numGroups, groupsSize, groups);
}
alias glGetPerfQueryDataINTEL = glGetPerfQueryDataINTEL_Z_Z;
__gshared glGetPerfQueryDataINTEL_Z_Z = function void (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) { glGetPerfQueryDataINTEL_Z_Z_loader(queryHandle, flags, dataSize, data, bytesWritten); };
private void glGetPerfQueryDataINTEL_Z_Z_loader (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) {
  *cast(void**)&glGetPerfQueryDataINTEL_Z_Z = glbindGetProcAddress(`glGetPerfQueryDataINTEL`);
  if (*cast(void**)&glGetPerfQueryDataINTEL_Z_Z is null) assert(0, `OpenGL function 'glGetPerfQueryDataINTEL' not found!`);
  glGetPerfQueryDataINTEL_Z_Z(queryHandle, flags, dataSize, data, bytesWritten);
}
alias glGetPerfQueryIdByNameINTEL = glGetPerfQueryIdByNameINTEL_Z_Z;
__gshared glGetPerfQueryIdByNameINTEL_Z_Z = function void (GLchar *queryName, GLuint *queryId) { glGetPerfQueryIdByNameINTEL_Z_Z_loader(queryName, queryId); };
private void glGetPerfQueryIdByNameINTEL_Z_Z_loader (GLchar *queryName, GLuint *queryId) {
  *cast(void**)&glGetPerfQueryIdByNameINTEL_Z_Z = glbindGetProcAddress(`glGetPerfQueryIdByNameINTEL`);
  if (*cast(void**)&glGetPerfQueryIdByNameINTEL_Z_Z is null) assert(0, `OpenGL function 'glGetPerfQueryIdByNameINTEL' not found!`);
  glGetPerfQueryIdByNameINTEL_Z_Z(queryName, queryId);
}
alias glGetPerfQueryInfoINTEL = glGetPerfQueryInfoINTEL_Z_Z;
__gshared glGetPerfQueryInfoINTEL_Z_Z = function void (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) { glGetPerfQueryInfoINTEL_Z_Z_loader(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); };
private void glGetPerfQueryInfoINTEL_Z_Z_loader (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) {
  *cast(void**)&glGetPerfQueryInfoINTEL_Z_Z = glbindGetProcAddress(`glGetPerfQueryInfoINTEL`);
  if (*cast(void**)&glGetPerfQueryInfoINTEL_Z_Z is null) assert(0, `OpenGL function 'glGetPerfQueryInfoINTEL' not found!`);
  glGetPerfQueryInfoINTEL_Z_Z(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}
alias glGetPixelMapfv = glGetPixelMapfv_Z_Z;
__gshared glGetPixelMapfv_Z_Z = function void (GLenum map, GLfloat *values) { glGetPixelMapfv_Z_Z_loader(map, values); };
private void glGetPixelMapfv_Z_Z_loader (GLenum map, GLfloat *values) {
  *cast(void**)&glGetPixelMapfv_Z_Z = glbindGetProcAddress(`glGetPixelMapfv`);
  if (*cast(void**)&glGetPixelMapfv_Z_Z is null) assert(0, `OpenGL function 'glGetPixelMapfv' not found!`);
  glGetPixelMapfv_Z_Z(map, values);
}
alias glGetPixelMapuiv = glGetPixelMapuiv_Z_Z;
__gshared glGetPixelMapuiv_Z_Z = function void (GLenum map, GLuint *values) { glGetPixelMapuiv_Z_Z_loader(map, values); };
private void glGetPixelMapuiv_Z_Z_loader (GLenum map, GLuint *values) {
  *cast(void**)&glGetPixelMapuiv_Z_Z = glbindGetProcAddress(`glGetPixelMapuiv`);
  if (*cast(void**)&glGetPixelMapuiv_Z_Z is null) assert(0, `OpenGL function 'glGetPixelMapuiv' not found!`);
  glGetPixelMapuiv_Z_Z(map, values);
}
alias glGetPixelMapusv = glGetPixelMapusv_Z_Z;
__gshared glGetPixelMapusv_Z_Z = function void (GLenum map, GLushort *values) { glGetPixelMapusv_Z_Z_loader(map, values); };
private void glGetPixelMapusv_Z_Z_loader (GLenum map, GLushort *values) {
  *cast(void**)&glGetPixelMapusv_Z_Z = glbindGetProcAddress(`glGetPixelMapusv`);
  if (*cast(void**)&glGetPixelMapusv_Z_Z is null) assert(0, `OpenGL function 'glGetPixelMapusv' not found!`);
  glGetPixelMapusv_Z_Z(map, values);
}
alias glGetPixelMapxv = glGetPixelMapxv_Z_Z;
__gshared glGetPixelMapxv_Z_Z = function void (GLenum map, GLint size, GLfixed *values) { glGetPixelMapxv_Z_Z_loader(map, size, values); };
private void glGetPixelMapxv_Z_Z_loader (GLenum map, GLint size, GLfixed *values) {
  *cast(void**)&glGetPixelMapxv_Z_Z = glbindGetProcAddress(`glGetPixelMapxv`);
  if (*cast(void**)&glGetPixelMapxv_Z_Z is null) assert(0, `OpenGL function 'glGetPixelMapxv' not found!`);
  glGetPixelMapxv_Z_Z(map, size, values);
}
alias glGetPixelTexGenParameterfvSGIS = glGetPixelTexGenParameterfvSGIS_Z_Z;
__gshared glGetPixelTexGenParameterfvSGIS_Z_Z = function void (GLenum pname, GLfloat *params) { glGetPixelTexGenParameterfvSGIS_Z_Z_loader(pname, params); };
private void glGetPixelTexGenParameterfvSGIS_Z_Z_loader (GLenum pname, GLfloat *params) {
  *cast(void**)&glGetPixelTexGenParameterfvSGIS_Z_Z = glbindGetProcAddress(`glGetPixelTexGenParameterfvSGIS`);
  if (*cast(void**)&glGetPixelTexGenParameterfvSGIS_Z_Z is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterfvSGIS' not found!`);
  glGetPixelTexGenParameterfvSGIS_Z_Z(pname, params);
}
alias glGetPixelTexGenParameterivSGIS = glGetPixelTexGenParameterivSGIS_Z_Z;
__gshared glGetPixelTexGenParameterivSGIS_Z_Z = function void (GLenum pname, GLint *params) { glGetPixelTexGenParameterivSGIS_Z_Z_loader(pname, params); };
private void glGetPixelTexGenParameterivSGIS_Z_Z_loader (GLenum pname, GLint *params) {
  *cast(void**)&glGetPixelTexGenParameterivSGIS_Z_Z = glbindGetProcAddress(`glGetPixelTexGenParameterivSGIS`);
  if (*cast(void**)&glGetPixelTexGenParameterivSGIS_Z_Z is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterivSGIS' not found!`);
  glGetPixelTexGenParameterivSGIS_Z_Z(pname, params);
}
alias glGetPixelTransformParameterfvEXT = glGetPixelTransformParameterfvEXT_Z_Z;
__gshared glGetPixelTransformParameterfvEXT_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetPixelTransformParameterfvEXT_Z_Z_loader(target, pname, params); };
private void glGetPixelTransformParameterfvEXT_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetPixelTransformParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetPixelTransformParameterfvEXT`);
  if (*cast(void**)&glGetPixelTransformParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetPixelTransformParameterfvEXT' not found!`);
  glGetPixelTransformParameterfvEXT_Z_Z(target, pname, params);
}
alias glGetPixelTransformParameterivEXT = glGetPixelTransformParameterivEXT_Z_Z;
__gshared glGetPixelTransformParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetPixelTransformParameterivEXT_Z_Z_loader(target, pname, params); };
private void glGetPixelTransformParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetPixelTransformParameterivEXT_Z_Z = glbindGetProcAddress(`glGetPixelTransformParameterivEXT`);
  if (*cast(void**)&glGetPixelTransformParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetPixelTransformParameterivEXT' not found!`);
  glGetPixelTransformParameterivEXT_Z_Z(target, pname, params);
}
alias glGetPointerIndexedvEXT = glGetPointerIndexedvEXT_Z_Z;
__gshared glGetPointerIndexedvEXT_Z_Z = function void (GLenum target, GLuint index, void **data) { glGetPointerIndexedvEXT_Z_Z_loader(target, index, data); };
private void glGetPointerIndexedvEXT_Z_Z_loader (GLenum target, GLuint index, void **data) {
  *cast(void**)&glGetPointerIndexedvEXT_Z_Z = glbindGetProcAddress(`glGetPointerIndexedvEXT`);
  if (*cast(void**)&glGetPointerIndexedvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetPointerIndexedvEXT' not found!`);
  glGetPointerIndexedvEXT_Z_Z(target, index, data);
}
alias glGetPointeri_vEXT = glGetPointeri_vEXT_Z_Z;
__gshared glGetPointeri_vEXT_Z_Z = function void (GLenum pname, GLuint index, void **params) { glGetPointeri_vEXT_Z_Z_loader(pname, index, params); };
private void glGetPointeri_vEXT_Z_Z_loader (GLenum pname, GLuint index, void **params) {
  *cast(void**)&glGetPointeri_vEXT_Z_Z = glbindGetProcAddress(`glGetPointeri_vEXT`);
  if (*cast(void**)&glGetPointeri_vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetPointeri_vEXT' not found!`);
  glGetPointeri_vEXT_Z_Z(pname, index, params);
}
alias glGetPointerv = glGetPointerv_Z_Z;
__gshared glGetPointerv_Z_Z = function void (GLenum pname, void **params) { glGetPointerv_Z_Z_loader(pname, params); };
private void glGetPointerv_Z_Z_loader (GLenum pname, void **params) {
  *cast(void**)&glGetPointerv_Z_Z = glbindGetProcAddress(`glGetPointerv`);
  if (*cast(void**)&glGetPointerv_Z_Z is null) assert(0, `OpenGL function 'glGetPointerv' not found!`);
  glGetPointerv_Z_Z(pname, params);
}
alias glGetPointervEXT = glGetPointervEXT_Z_Z;
__gshared glGetPointervEXT_Z_Z = function void (GLenum pname, void **params) { glGetPointervEXT_Z_Z_loader(pname, params); };
private void glGetPointervEXT_Z_Z_loader (GLenum pname, void **params) {
  *cast(void**)&glGetPointervEXT_Z_Z = glbindGetProcAddress(`glGetPointervEXT`);
  if (*cast(void**)&glGetPointervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetPointervEXT' not found!`);
  glGetPointervEXT_Z_Z(pname, params);
}
alias glGetPointervKHR = glGetPointervKHR_Z_Z;
__gshared glGetPointervKHR_Z_Z = function void (GLenum pname, void **params) { glGetPointervKHR_Z_Z_loader(pname, params); };
private void glGetPointervKHR_Z_Z_loader (GLenum pname, void **params) {
  *cast(void**)&glGetPointervKHR_Z_Z = glbindGetProcAddress(`glGetPointervKHR`);
  if (*cast(void**)&glGetPointervKHR_Z_Z is null) assert(0, `OpenGL function 'glGetPointervKHR' not found!`);
  glGetPointervKHR_Z_Z(pname, params);
}
alias glGetPolygonStipple = glGetPolygonStipple_Z_Z;
__gshared glGetPolygonStipple_Z_Z = function void (GLubyte *mask) { glGetPolygonStipple_Z_Z_loader(mask); };
private void glGetPolygonStipple_Z_Z_loader (GLubyte *mask) {
  *cast(void**)&glGetPolygonStipple_Z_Z = glbindGetProcAddress(`glGetPolygonStipple`);
  if (*cast(void**)&glGetPolygonStipple_Z_Z is null) assert(0, `OpenGL function 'glGetPolygonStipple' not found!`);
  glGetPolygonStipple_Z_Z(mask);
}
alias glGetProgramBinary = glGetProgramBinary_Z_Z;
__gshared glGetProgramBinary_Z_Z = function void (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) { glGetProgramBinary_Z_Z_loader(program, bufSize, length, binaryFormat, binary); };
private void glGetProgramBinary_Z_Z_loader (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
  *cast(void**)&glGetProgramBinary_Z_Z = glbindGetProcAddress(`glGetProgramBinary`);
  if (*cast(void**)&glGetProgramBinary_Z_Z is null) assert(0, `OpenGL function 'glGetProgramBinary' not found!`);
  glGetProgramBinary_Z_Z(program, bufSize, length, binaryFormat, binary);
}
alias glGetProgramBinaryOES = glGetProgramBinaryOES_Z_Z;
__gshared glGetProgramBinaryOES_Z_Z = function void (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) { glGetProgramBinaryOES_Z_Z_loader(program, bufSize, length, binaryFormat, binary); };
private void glGetProgramBinaryOES_Z_Z_loader (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
  *cast(void**)&glGetProgramBinaryOES_Z_Z = glbindGetProcAddress(`glGetProgramBinaryOES`);
  if (*cast(void**)&glGetProgramBinaryOES_Z_Z is null) assert(0, `OpenGL function 'glGetProgramBinaryOES' not found!`);
  glGetProgramBinaryOES_Z_Z(program, bufSize, length, binaryFormat, binary);
}
alias glGetProgramEnvParameterIivNV = glGetProgramEnvParameterIivNV_Z_Z;
__gshared glGetProgramEnvParameterIivNV_Z_Z = function void (GLenum target, GLuint index, GLint *params) { glGetProgramEnvParameterIivNV_Z_Z_loader(target, index, params); };
private void glGetProgramEnvParameterIivNV_Z_Z_loader (GLenum target, GLuint index, GLint *params) {
  *cast(void**)&glGetProgramEnvParameterIivNV_Z_Z = glbindGetProcAddress(`glGetProgramEnvParameterIivNV`);
  if (*cast(void**)&glGetProgramEnvParameterIivNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIivNV' not found!`);
  glGetProgramEnvParameterIivNV_Z_Z(target, index, params);
}
alias glGetProgramEnvParameterIuivNV = glGetProgramEnvParameterIuivNV_Z_Z;
__gshared glGetProgramEnvParameterIuivNV_Z_Z = function void (GLenum target, GLuint index, GLuint *params) { glGetProgramEnvParameterIuivNV_Z_Z_loader(target, index, params); };
private void glGetProgramEnvParameterIuivNV_Z_Z_loader (GLenum target, GLuint index, GLuint *params) {
  *cast(void**)&glGetProgramEnvParameterIuivNV_Z_Z = glbindGetProcAddress(`glGetProgramEnvParameterIuivNV`);
  if (*cast(void**)&glGetProgramEnvParameterIuivNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIuivNV' not found!`);
  glGetProgramEnvParameterIuivNV_Z_Z(target, index, params);
}
alias glGetProgramEnvParameterdvARB = glGetProgramEnvParameterdvARB_Z_Z;
__gshared glGetProgramEnvParameterdvARB_Z_Z = function void (GLenum target, GLuint index, GLdouble *params) { glGetProgramEnvParameterdvARB_Z_Z_loader(target, index, params); };
private void glGetProgramEnvParameterdvARB_Z_Z_loader (GLenum target, GLuint index, GLdouble *params) {
  *cast(void**)&glGetProgramEnvParameterdvARB_Z_Z = glbindGetProcAddress(`glGetProgramEnvParameterdvARB`);
  if (*cast(void**)&glGetProgramEnvParameterdvARB_Z_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterdvARB' not found!`);
  glGetProgramEnvParameterdvARB_Z_Z(target, index, params);
}
alias glGetProgramEnvParameterfvARB = glGetProgramEnvParameterfvARB_Z_Z;
__gshared glGetProgramEnvParameterfvARB_Z_Z = function void (GLenum target, GLuint index, GLfloat *params) { glGetProgramEnvParameterfvARB_Z_Z_loader(target, index, params); };
private void glGetProgramEnvParameterfvARB_Z_Z_loader (GLenum target, GLuint index, GLfloat *params) {
  *cast(void**)&glGetProgramEnvParameterfvARB_Z_Z = glbindGetProcAddress(`glGetProgramEnvParameterfvARB`);
  if (*cast(void**)&glGetProgramEnvParameterfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetProgramEnvParameterfvARB' not found!`);
  glGetProgramEnvParameterfvARB_Z_Z(target, index, params);
}
alias glGetProgramInfoLog = glGetProgramInfoLog_Z_Z;
__gshared glGetProgramInfoLog_Z_Z = function void (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { glGetProgramInfoLog_Z_Z_loader(program, bufSize, length, infoLog); };
private void glGetProgramInfoLog_Z_Z_loader (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  *cast(void**)&glGetProgramInfoLog_Z_Z = glbindGetProcAddress(`glGetProgramInfoLog`);
  if (*cast(void**)&glGetProgramInfoLog_Z_Z is null) assert(0, `OpenGL function 'glGetProgramInfoLog' not found!`);
  glGetProgramInfoLog_Z_Z(program, bufSize, length, infoLog);
}
alias glGetProgramInterfaceiv = glGetProgramInterfaceiv_Z_Z;
__gshared glGetProgramInterfaceiv_Z_Z = function void (GLuint program, GLenum programInterface, GLenum pname, GLint *params) { glGetProgramInterfaceiv_Z_Z_loader(program, programInterface, pname, params); };
private void glGetProgramInterfaceiv_Z_Z_loader (GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
  *cast(void**)&glGetProgramInterfaceiv_Z_Z = glbindGetProcAddress(`glGetProgramInterfaceiv`);
  if (*cast(void**)&glGetProgramInterfaceiv_Z_Z is null) assert(0, `OpenGL function 'glGetProgramInterfaceiv' not found!`);
  glGetProgramInterfaceiv_Z_Z(program, programInterface, pname, params);
}
alias glGetProgramLocalParameterIivNV = glGetProgramLocalParameterIivNV_Z_Z;
__gshared glGetProgramLocalParameterIivNV_Z_Z = function void (GLenum target, GLuint index, GLint *params) { glGetProgramLocalParameterIivNV_Z_Z_loader(target, index, params); };
private void glGetProgramLocalParameterIivNV_Z_Z_loader (GLenum target, GLuint index, GLint *params) {
  *cast(void**)&glGetProgramLocalParameterIivNV_Z_Z = glbindGetProcAddress(`glGetProgramLocalParameterIivNV`);
  if (*cast(void**)&glGetProgramLocalParameterIivNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIivNV' not found!`);
  glGetProgramLocalParameterIivNV_Z_Z(target, index, params);
}
alias glGetProgramLocalParameterIuivNV = glGetProgramLocalParameterIuivNV_Z_Z;
__gshared glGetProgramLocalParameterIuivNV_Z_Z = function void (GLenum target, GLuint index, GLuint *params) { glGetProgramLocalParameterIuivNV_Z_Z_loader(target, index, params); };
private void glGetProgramLocalParameterIuivNV_Z_Z_loader (GLenum target, GLuint index, GLuint *params) {
  *cast(void**)&glGetProgramLocalParameterIuivNV_Z_Z = glbindGetProcAddress(`glGetProgramLocalParameterIuivNV`);
  if (*cast(void**)&glGetProgramLocalParameterIuivNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIuivNV' not found!`);
  glGetProgramLocalParameterIuivNV_Z_Z(target, index, params);
}
alias glGetProgramLocalParameterdvARB = glGetProgramLocalParameterdvARB_Z_Z;
__gshared glGetProgramLocalParameterdvARB_Z_Z = function void (GLenum target, GLuint index, GLdouble *params) { glGetProgramLocalParameterdvARB_Z_Z_loader(target, index, params); };
private void glGetProgramLocalParameterdvARB_Z_Z_loader (GLenum target, GLuint index, GLdouble *params) {
  *cast(void**)&glGetProgramLocalParameterdvARB_Z_Z = glbindGetProcAddress(`glGetProgramLocalParameterdvARB`);
  if (*cast(void**)&glGetProgramLocalParameterdvARB_Z_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterdvARB' not found!`);
  glGetProgramLocalParameterdvARB_Z_Z(target, index, params);
}
alias glGetProgramLocalParameterfvARB = glGetProgramLocalParameterfvARB_Z_Z;
__gshared glGetProgramLocalParameterfvARB_Z_Z = function void (GLenum target, GLuint index, GLfloat *params) { glGetProgramLocalParameterfvARB_Z_Z_loader(target, index, params); };
private void glGetProgramLocalParameterfvARB_Z_Z_loader (GLenum target, GLuint index, GLfloat *params) {
  *cast(void**)&glGetProgramLocalParameterfvARB_Z_Z = glbindGetProcAddress(`glGetProgramLocalParameterfvARB`);
  if (*cast(void**)&glGetProgramLocalParameterfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetProgramLocalParameterfvARB' not found!`);
  glGetProgramLocalParameterfvARB_Z_Z(target, index, params);
}
alias glGetProgramNamedParameterdvNV = glGetProgramNamedParameterdvNV_Z_Z;
__gshared glGetProgramNamedParameterdvNV_Z_Z = function void (GLuint id, GLsizei len, const(GLubyte)* name, GLdouble *params) { glGetProgramNamedParameterdvNV_Z_Z_loader(id, len, name, params); };
private void glGetProgramNamedParameterdvNV_Z_Z_loader (GLuint id, GLsizei len, const(GLubyte)* name, GLdouble *params) {
  *cast(void**)&glGetProgramNamedParameterdvNV_Z_Z = glbindGetProcAddress(`glGetProgramNamedParameterdvNV`);
  if (*cast(void**)&glGetProgramNamedParameterdvNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramNamedParameterdvNV' not found!`);
  glGetProgramNamedParameterdvNV_Z_Z(id, len, name, params);
}
alias glGetProgramNamedParameterfvNV = glGetProgramNamedParameterfvNV_Z_Z;
__gshared glGetProgramNamedParameterfvNV_Z_Z = function void (GLuint id, GLsizei len, const(GLubyte)* name, GLfloat *params) { glGetProgramNamedParameterfvNV_Z_Z_loader(id, len, name, params); };
private void glGetProgramNamedParameterfvNV_Z_Z_loader (GLuint id, GLsizei len, const(GLubyte)* name, GLfloat *params) {
  *cast(void**)&glGetProgramNamedParameterfvNV_Z_Z = glbindGetProcAddress(`glGetProgramNamedParameterfvNV`);
  if (*cast(void**)&glGetProgramNamedParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramNamedParameterfvNV' not found!`);
  glGetProgramNamedParameterfvNV_Z_Z(id, len, name, params);
}
alias glGetProgramParameterdvNV = glGetProgramParameterdvNV_Z_Z;
__gshared glGetProgramParameterdvNV_Z_Z = function void (GLenum target, GLuint index, GLenum pname, GLdouble *params) { glGetProgramParameterdvNV_Z_Z_loader(target, index, pname, params); };
private void glGetProgramParameterdvNV_Z_Z_loader (GLenum target, GLuint index, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetProgramParameterdvNV_Z_Z = glbindGetProcAddress(`glGetProgramParameterdvNV`);
  if (*cast(void**)&glGetProgramParameterdvNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramParameterdvNV' not found!`);
  glGetProgramParameterdvNV_Z_Z(target, index, pname, params);
}
alias glGetProgramParameterfvNV = glGetProgramParameterfvNV_Z_Z;
__gshared glGetProgramParameterfvNV_Z_Z = function void (GLenum target, GLuint index, GLenum pname, GLfloat *params) { glGetProgramParameterfvNV_Z_Z_loader(target, index, pname, params); };
private void glGetProgramParameterfvNV_Z_Z_loader (GLenum target, GLuint index, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetProgramParameterfvNV_Z_Z = glbindGetProcAddress(`glGetProgramParameterfvNV`);
  if (*cast(void**)&glGetProgramParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramParameterfvNV' not found!`);
  glGetProgramParameterfvNV_Z_Z(target, index, pname, params);
}
alias glGetProgramPipelineInfoLog = glGetProgramPipelineInfoLog_Z_Z;
__gshared glGetProgramPipelineInfoLog_Z_Z = function void (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { glGetProgramPipelineInfoLog_Z_Z_loader(pipeline, bufSize, length, infoLog); };
private void glGetProgramPipelineInfoLog_Z_Z_loader (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  *cast(void**)&glGetProgramPipelineInfoLog_Z_Z = glbindGetProcAddress(`glGetProgramPipelineInfoLog`);
  if (*cast(void**)&glGetProgramPipelineInfoLog_Z_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLog' not found!`);
  glGetProgramPipelineInfoLog_Z_Z(pipeline, bufSize, length, infoLog);
}
alias glGetProgramPipelineInfoLogEXT = glGetProgramPipelineInfoLogEXT_Z_Z;
__gshared glGetProgramPipelineInfoLogEXT_Z_Z = function void (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { glGetProgramPipelineInfoLogEXT_Z_Z_loader(pipeline, bufSize, length, infoLog); };
private void glGetProgramPipelineInfoLogEXT_Z_Z_loader (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  *cast(void**)&glGetProgramPipelineInfoLogEXT_Z_Z = glbindGetProcAddress(`glGetProgramPipelineInfoLogEXT`);
  if (*cast(void**)&glGetProgramPipelineInfoLogEXT_Z_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLogEXT' not found!`);
  glGetProgramPipelineInfoLogEXT_Z_Z(pipeline, bufSize, length, infoLog);
}
alias glGetProgramPipelineiv = glGetProgramPipelineiv_Z_Z;
__gshared glGetProgramPipelineiv_Z_Z = function void (GLuint pipeline, GLenum pname, GLint *params) { glGetProgramPipelineiv_Z_Z_loader(pipeline, pname, params); };
private void glGetProgramPipelineiv_Z_Z_loader (GLuint pipeline, GLenum pname, GLint *params) {
  *cast(void**)&glGetProgramPipelineiv_Z_Z = glbindGetProcAddress(`glGetProgramPipelineiv`);
  if (*cast(void**)&glGetProgramPipelineiv_Z_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineiv' not found!`);
  glGetProgramPipelineiv_Z_Z(pipeline, pname, params);
}
alias glGetProgramPipelineivEXT = glGetProgramPipelineivEXT_Z_Z;
__gshared glGetProgramPipelineivEXT_Z_Z = function void (GLuint pipeline, GLenum pname, GLint *params) { glGetProgramPipelineivEXT_Z_Z_loader(pipeline, pname, params); };
private void glGetProgramPipelineivEXT_Z_Z_loader (GLuint pipeline, GLenum pname, GLint *params) {
  *cast(void**)&glGetProgramPipelineivEXT_Z_Z = glbindGetProcAddress(`glGetProgramPipelineivEXT`);
  if (*cast(void**)&glGetProgramPipelineivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetProgramPipelineivEXT' not found!`);
  glGetProgramPipelineivEXT_Z_Z(pipeline, pname, params);
}
alias glGetProgramResourceIndex = glGetProgramResourceIndex_Z_Z;
__gshared glGetProgramResourceIndex_Z_Z = function GLuint (GLuint program, GLenum programInterface, const(GLchar)* name) { return glGetProgramResourceIndex_Z_Z_loader(program, programInterface, name); };
private GLuint glGetProgramResourceIndex_Z_Z_loader (GLuint program, GLenum programInterface, const(GLchar)* name) {
  *cast(void**)&glGetProgramResourceIndex_Z_Z = glbindGetProcAddress(`glGetProgramResourceIndex`);
  if (*cast(void**)&glGetProgramResourceIndex_Z_Z is null) assert(0, `OpenGL function 'glGetProgramResourceIndex' not found!`);
  return glGetProgramResourceIndex_Z_Z(program, programInterface, name);
}
alias glGetProgramResourceLocation = glGetProgramResourceLocation_Z_Z;
__gshared glGetProgramResourceLocation_Z_Z = function GLint (GLuint program, GLenum programInterface, const(GLchar)* name) { return glGetProgramResourceLocation_Z_Z_loader(program, programInterface, name); };
private GLint glGetProgramResourceLocation_Z_Z_loader (GLuint program, GLenum programInterface, const(GLchar)* name) {
  *cast(void**)&glGetProgramResourceLocation_Z_Z = glbindGetProcAddress(`glGetProgramResourceLocation`);
  if (*cast(void**)&glGetProgramResourceLocation_Z_Z is null) assert(0, `OpenGL function 'glGetProgramResourceLocation' not found!`);
  return glGetProgramResourceLocation_Z_Z(program, programInterface, name);
}
alias glGetProgramResourceLocationIndex = glGetProgramResourceLocationIndex_Z_Z;
__gshared glGetProgramResourceLocationIndex_Z_Z = function GLint (GLuint program, GLenum programInterface, const(GLchar)* name) { return glGetProgramResourceLocationIndex_Z_Z_loader(program, programInterface, name); };
private GLint glGetProgramResourceLocationIndex_Z_Z_loader (GLuint program, GLenum programInterface, const(GLchar)* name) {
  *cast(void**)&glGetProgramResourceLocationIndex_Z_Z = glbindGetProcAddress(`glGetProgramResourceLocationIndex`);
  if (*cast(void**)&glGetProgramResourceLocationIndex_Z_Z is null) assert(0, `OpenGL function 'glGetProgramResourceLocationIndex' not found!`);
  return glGetProgramResourceLocationIndex_Z_Z(program, programInterface, name);
}
alias glGetProgramResourceLocationIndexEXT = glGetProgramResourceLocationIndexEXT_Z_Z;
__gshared glGetProgramResourceLocationIndexEXT_Z_Z = function GLint (GLuint program, GLenum programInterface, const(GLchar)* name) { return glGetProgramResourceLocationIndexEXT_Z_Z_loader(program, programInterface, name); };
private GLint glGetProgramResourceLocationIndexEXT_Z_Z_loader (GLuint program, GLenum programInterface, const(GLchar)* name) {
  *cast(void**)&glGetProgramResourceLocationIndexEXT_Z_Z = glbindGetProcAddress(`glGetProgramResourceLocationIndexEXT`);
  if (*cast(void**)&glGetProgramResourceLocationIndexEXT_Z_Z is null) assert(0, `OpenGL function 'glGetProgramResourceLocationIndexEXT' not found!`);
  return glGetProgramResourceLocationIndexEXT_Z_Z(program, programInterface, name);
}
alias glGetProgramResourceName = glGetProgramResourceName_Z_Z;
__gshared glGetProgramResourceName_Z_Z = function void (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) { glGetProgramResourceName_Z_Z_loader(program, programInterface, index, bufSize, length, name); };
private void glGetProgramResourceName_Z_Z_loader (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  *cast(void**)&glGetProgramResourceName_Z_Z = glbindGetProcAddress(`glGetProgramResourceName`);
  if (*cast(void**)&glGetProgramResourceName_Z_Z is null) assert(0, `OpenGL function 'glGetProgramResourceName' not found!`);
  glGetProgramResourceName_Z_Z(program, programInterface, index, bufSize, length, name);
}
alias glGetProgramResourcefvNV = glGetProgramResourcefvNV_Z_Z;
__gshared glGetProgramResourcefvNV_Z_Z = function void (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const(GLenum)* props, GLsizei bufSize, GLsizei *length, GLfloat *params) { glGetProgramResourcefvNV_Z_Z_loader(program, programInterface, index, propCount, props, bufSize, length, params); };
private void glGetProgramResourcefvNV_Z_Z_loader (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const(GLenum)* props, GLsizei bufSize, GLsizei *length, GLfloat *params) {
  *cast(void**)&glGetProgramResourcefvNV_Z_Z = glbindGetProcAddress(`glGetProgramResourcefvNV`);
  if (*cast(void**)&glGetProgramResourcefvNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramResourcefvNV' not found!`);
  glGetProgramResourcefvNV_Z_Z(program, programInterface, index, propCount, props, bufSize, length, params);
}
alias glGetProgramResourceiv = glGetProgramResourceiv_Z_Z;
__gshared glGetProgramResourceiv_Z_Z = function void (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const(GLenum)* props, GLsizei bufSize, GLsizei *length, GLint *params) { glGetProgramResourceiv_Z_Z_loader(program, programInterface, index, propCount, props, bufSize, length, params); };
private void glGetProgramResourceiv_Z_Z_loader (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const(GLenum)* props, GLsizei bufSize, GLsizei *length, GLint *params) {
  *cast(void**)&glGetProgramResourceiv_Z_Z = glbindGetProcAddress(`glGetProgramResourceiv`);
  if (*cast(void**)&glGetProgramResourceiv_Z_Z is null) assert(0, `OpenGL function 'glGetProgramResourceiv' not found!`);
  glGetProgramResourceiv_Z_Z(program, programInterface, index, propCount, props, bufSize, length, params);
}
alias glGetProgramStageiv = glGetProgramStageiv_Z_Z;
__gshared glGetProgramStageiv_Z_Z = function void (GLuint program, GLenum shadertype, GLenum pname, GLint *values) { glGetProgramStageiv_Z_Z_loader(program, shadertype, pname, values); };
private void glGetProgramStageiv_Z_Z_loader (GLuint program, GLenum shadertype, GLenum pname, GLint *values) {
  *cast(void**)&glGetProgramStageiv_Z_Z = glbindGetProcAddress(`glGetProgramStageiv`);
  if (*cast(void**)&glGetProgramStageiv_Z_Z is null) assert(0, `OpenGL function 'glGetProgramStageiv' not found!`);
  glGetProgramStageiv_Z_Z(program, shadertype, pname, values);
}
alias glGetProgramStringARB = glGetProgramStringARB_Z_Z;
__gshared glGetProgramStringARB_Z_Z = function void (GLenum target, GLenum pname, void *string) { glGetProgramStringARB_Z_Z_loader(target, pname, string); };
private void glGetProgramStringARB_Z_Z_loader (GLenum target, GLenum pname, void *string) {
  *cast(void**)&glGetProgramStringARB_Z_Z = glbindGetProcAddress(`glGetProgramStringARB`);
  if (*cast(void**)&glGetProgramStringARB_Z_Z is null) assert(0, `OpenGL function 'glGetProgramStringARB' not found!`);
  glGetProgramStringARB_Z_Z(target, pname, string);
}
alias glGetProgramStringNV = glGetProgramStringNV_Z_Z;
__gshared glGetProgramStringNV_Z_Z = function void (GLuint id, GLenum pname, GLubyte *program) { glGetProgramStringNV_Z_Z_loader(id, pname, program); };
private void glGetProgramStringNV_Z_Z_loader (GLuint id, GLenum pname, GLubyte *program) {
  *cast(void**)&glGetProgramStringNV_Z_Z = glbindGetProcAddress(`glGetProgramStringNV`);
  if (*cast(void**)&glGetProgramStringNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramStringNV' not found!`);
  glGetProgramStringNV_Z_Z(id, pname, program);
}
alias glGetProgramSubroutineParameteruivNV = glGetProgramSubroutineParameteruivNV_Z_Z;
__gshared glGetProgramSubroutineParameteruivNV_Z_Z = function void (GLenum target, GLuint index, GLuint *param) { glGetProgramSubroutineParameteruivNV_Z_Z_loader(target, index, param); };
private void glGetProgramSubroutineParameteruivNV_Z_Z_loader (GLenum target, GLuint index, GLuint *param) {
  *cast(void**)&glGetProgramSubroutineParameteruivNV_Z_Z = glbindGetProcAddress(`glGetProgramSubroutineParameteruivNV`);
  if (*cast(void**)&glGetProgramSubroutineParameteruivNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramSubroutineParameteruivNV' not found!`);
  glGetProgramSubroutineParameteruivNV_Z_Z(target, index, param);
}
alias glGetProgramiv = glGetProgramiv_Z_Z;
__gshared glGetProgramiv_Z_Z = function void (GLuint program, GLenum pname, GLint *params) { glGetProgramiv_Z_Z_loader(program, pname, params); };
private void glGetProgramiv_Z_Z_loader (GLuint program, GLenum pname, GLint *params) {
  *cast(void**)&glGetProgramiv_Z_Z = glbindGetProcAddress(`glGetProgramiv`);
  if (*cast(void**)&glGetProgramiv_Z_Z is null) assert(0, `OpenGL function 'glGetProgramiv' not found!`);
  glGetProgramiv_Z_Z(program, pname, params);
}
alias glGetProgramivARB = glGetProgramivARB_Z_Z;
__gshared glGetProgramivARB_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetProgramivARB_Z_Z_loader(target, pname, params); };
private void glGetProgramivARB_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetProgramivARB_Z_Z = glbindGetProcAddress(`glGetProgramivARB`);
  if (*cast(void**)&glGetProgramivARB_Z_Z is null) assert(0, `OpenGL function 'glGetProgramivARB' not found!`);
  glGetProgramivARB_Z_Z(target, pname, params);
}
alias glGetProgramivNV = glGetProgramivNV_Z_Z;
__gshared glGetProgramivNV_Z_Z = function void (GLuint id, GLenum pname, GLint *params) { glGetProgramivNV_Z_Z_loader(id, pname, params); };
private void glGetProgramivNV_Z_Z_loader (GLuint id, GLenum pname, GLint *params) {
  *cast(void**)&glGetProgramivNV_Z_Z = glbindGetProcAddress(`glGetProgramivNV`);
  if (*cast(void**)&glGetProgramivNV_Z_Z is null) assert(0, `OpenGL function 'glGetProgramivNV' not found!`);
  glGetProgramivNV_Z_Z(id, pname, params);
}
alias glGetQueryBufferObjecti64v = glGetQueryBufferObjecti64v_Z_Z;
__gshared glGetQueryBufferObjecti64v_Z_Z = function void (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { glGetQueryBufferObjecti64v_Z_Z_loader(id, buffer, pname, offset); };
private void glGetQueryBufferObjecti64v_Z_Z_loader (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  *cast(void**)&glGetQueryBufferObjecti64v_Z_Z = glbindGetProcAddress(`glGetQueryBufferObjecti64v`);
  if (*cast(void**)&glGetQueryBufferObjecti64v_Z_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjecti64v' not found!`);
  glGetQueryBufferObjecti64v_Z_Z(id, buffer, pname, offset);
}
alias glGetQueryBufferObjectiv = glGetQueryBufferObjectiv_Z_Z;
__gshared glGetQueryBufferObjectiv_Z_Z = function void (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { glGetQueryBufferObjectiv_Z_Z_loader(id, buffer, pname, offset); };
private void glGetQueryBufferObjectiv_Z_Z_loader (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  *cast(void**)&glGetQueryBufferObjectiv_Z_Z = glbindGetProcAddress(`glGetQueryBufferObjectiv`);
  if (*cast(void**)&glGetQueryBufferObjectiv_Z_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjectiv' not found!`);
  glGetQueryBufferObjectiv_Z_Z(id, buffer, pname, offset);
}
alias glGetQueryBufferObjectui64v = glGetQueryBufferObjectui64v_Z_Z;
__gshared glGetQueryBufferObjectui64v_Z_Z = function void (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { glGetQueryBufferObjectui64v_Z_Z_loader(id, buffer, pname, offset); };
private void glGetQueryBufferObjectui64v_Z_Z_loader (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  *cast(void**)&glGetQueryBufferObjectui64v_Z_Z = glbindGetProcAddress(`glGetQueryBufferObjectui64v`);
  if (*cast(void**)&glGetQueryBufferObjectui64v_Z_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjectui64v' not found!`);
  glGetQueryBufferObjectui64v_Z_Z(id, buffer, pname, offset);
}
alias glGetQueryBufferObjectuiv = glGetQueryBufferObjectuiv_Z_Z;
__gshared glGetQueryBufferObjectuiv_Z_Z = function void (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { glGetQueryBufferObjectuiv_Z_Z_loader(id, buffer, pname, offset); };
private void glGetQueryBufferObjectuiv_Z_Z_loader (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  *cast(void**)&glGetQueryBufferObjectuiv_Z_Z = glbindGetProcAddress(`glGetQueryBufferObjectuiv`);
  if (*cast(void**)&glGetQueryBufferObjectuiv_Z_Z is null) assert(0, `OpenGL function 'glGetQueryBufferObjectuiv' not found!`);
  glGetQueryBufferObjectuiv_Z_Z(id, buffer, pname, offset);
}
alias glGetQueryIndexediv = glGetQueryIndexediv_Z_Z;
__gshared glGetQueryIndexediv_Z_Z = function void (GLenum target, GLuint index, GLenum pname, GLint *params) { glGetQueryIndexediv_Z_Z_loader(target, index, pname, params); };
private void glGetQueryIndexediv_Z_Z_loader (GLenum target, GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetQueryIndexediv_Z_Z = glbindGetProcAddress(`glGetQueryIndexediv`);
  if (*cast(void**)&glGetQueryIndexediv_Z_Z is null) assert(0, `OpenGL function 'glGetQueryIndexediv' not found!`);
  glGetQueryIndexediv_Z_Z(target, index, pname, params);
}
alias glGetQueryObjecti64v = glGetQueryObjecti64v_Z_Z;
__gshared glGetQueryObjecti64v_Z_Z = function void (GLuint id, GLenum pname, GLint64 *params) { glGetQueryObjecti64v_Z_Z_loader(id, pname, params); };
private void glGetQueryObjecti64v_Z_Z_loader (GLuint id, GLenum pname, GLint64 *params) {
  *cast(void**)&glGetQueryObjecti64v_Z_Z = glbindGetProcAddress(`glGetQueryObjecti64v`);
  if (*cast(void**)&glGetQueryObjecti64v_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjecti64v' not found!`);
  glGetQueryObjecti64v_Z_Z(id, pname, params);
}
alias glGetQueryObjecti64vEXT = glGetQueryObjecti64vEXT_Z_Z;
__gshared glGetQueryObjecti64vEXT_Z_Z = function void (GLuint id, GLenum pname, GLint64 *params) { glGetQueryObjecti64vEXT_Z_Z_loader(id, pname, params); };
private void glGetQueryObjecti64vEXT_Z_Z_loader (GLuint id, GLenum pname, GLint64 *params) {
  *cast(void**)&glGetQueryObjecti64vEXT_Z_Z = glbindGetProcAddress(`glGetQueryObjecti64vEXT`);
  if (*cast(void**)&glGetQueryObjecti64vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjecti64vEXT' not found!`);
  glGetQueryObjecti64vEXT_Z_Z(id, pname, params);
}
alias glGetQueryObjectiv = glGetQueryObjectiv_Z_Z;
__gshared glGetQueryObjectiv_Z_Z = function void (GLuint id, GLenum pname, GLint *params) { glGetQueryObjectiv_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectiv_Z_Z_loader (GLuint id, GLenum pname, GLint *params) {
  *cast(void**)&glGetQueryObjectiv_Z_Z = glbindGetProcAddress(`glGetQueryObjectiv`);
  if (*cast(void**)&glGetQueryObjectiv_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectiv' not found!`);
  glGetQueryObjectiv_Z_Z(id, pname, params);
}
alias glGetQueryObjectivARB = glGetQueryObjectivARB_Z_Z;
__gshared glGetQueryObjectivARB_Z_Z = function void (GLuint id, GLenum pname, GLint *params) { glGetQueryObjectivARB_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectivARB_Z_Z_loader (GLuint id, GLenum pname, GLint *params) {
  *cast(void**)&glGetQueryObjectivARB_Z_Z = glbindGetProcAddress(`glGetQueryObjectivARB`);
  if (*cast(void**)&glGetQueryObjectivARB_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectivARB' not found!`);
  glGetQueryObjectivARB_Z_Z(id, pname, params);
}
alias glGetQueryObjectivEXT = glGetQueryObjectivEXT_Z_Z;
__gshared glGetQueryObjectivEXT_Z_Z = function void (GLuint id, GLenum pname, GLint *params) { glGetQueryObjectivEXT_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectivEXT_Z_Z_loader (GLuint id, GLenum pname, GLint *params) {
  *cast(void**)&glGetQueryObjectivEXT_Z_Z = glbindGetProcAddress(`glGetQueryObjectivEXT`);
  if (*cast(void**)&glGetQueryObjectivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectivEXT' not found!`);
  glGetQueryObjectivEXT_Z_Z(id, pname, params);
}
alias glGetQueryObjectui64v = glGetQueryObjectui64v_Z_Z;
__gshared glGetQueryObjectui64v_Z_Z = function void (GLuint id, GLenum pname, GLuint64 *params) { glGetQueryObjectui64v_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectui64v_Z_Z_loader (GLuint id, GLenum pname, GLuint64 *params) {
  *cast(void**)&glGetQueryObjectui64v_Z_Z = glbindGetProcAddress(`glGetQueryObjectui64v`);
  if (*cast(void**)&glGetQueryObjectui64v_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectui64v' not found!`);
  glGetQueryObjectui64v_Z_Z(id, pname, params);
}
alias glGetQueryObjectui64vEXT = glGetQueryObjectui64vEXT_Z_Z;
__gshared glGetQueryObjectui64vEXT_Z_Z = function void (GLuint id, GLenum pname, GLuint64 *params) { glGetQueryObjectui64vEXT_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectui64vEXT_Z_Z_loader (GLuint id, GLenum pname, GLuint64 *params) {
  *cast(void**)&glGetQueryObjectui64vEXT_Z_Z = glbindGetProcAddress(`glGetQueryObjectui64vEXT`);
  if (*cast(void**)&glGetQueryObjectui64vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectui64vEXT' not found!`);
  glGetQueryObjectui64vEXT_Z_Z(id, pname, params);
}
alias glGetQueryObjectuiv = glGetQueryObjectuiv_Z_Z;
__gshared glGetQueryObjectuiv_Z_Z = function void (GLuint id, GLenum pname, GLuint *params) { glGetQueryObjectuiv_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectuiv_Z_Z_loader (GLuint id, GLenum pname, GLuint *params) {
  *cast(void**)&glGetQueryObjectuiv_Z_Z = glbindGetProcAddress(`glGetQueryObjectuiv`);
  if (*cast(void**)&glGetQueryObjectuiv_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectuiv' not found!`);
  glGetQueryObjectuiv_Z_Z(id, pname, params);
}
alias glGetQueryObjectuivARB = glGetQueryObjectuivARB_Z_Z;
__gshared glGetQueryObjectuivARB_Z_Z = function void (GLuint id, GLenum pname, GLuint *params) { glGetQueryObjectuivARB_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectuivARB_Z_Z_loader (GLuint id, GLenum pname, GLuint *params) {
  *cast(void**)&glGetQueryObjectuivARB_Z_Z = glbindGetProcAddress(`glGetQueryObjectuivARB`);
  if (*cast(void**)&glGetQueryObjectuivARB_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectuivARB' not found!`);
  glGetQueryObjectuivARB_Z_Z(id, pname, params);
}
alias glGetQueryObjectuivEXT = glGetQueryObjectuivEXT_Z_Z;
__gshared glGetQueryObjectuivEXT_Z_Z = function void (GLuint id, GLenum pname, GLuint *params) { glGetQueryObjectuivEXT_Z_Z_loader(id, pname, params); };
private void glGetQueryObjectuivEXT_Z_Z_loader (GLuint id, GLenum pname, GLuint *params) {
  *cast(void**)&glGetQueryObjectuivEXT_Z_Z = glbindGetProcAddress(`glGetQueryObjectuivEXT`);
  if (*cast(void**)&glGetQueryObjectuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetQueryObjectuivEXT' not found!`);
  glGetQueryObjectuivEXT_Z_Z(id, pname, params);
}
alias glGetQueryiv = glGetQueryiv_Z_Z;
__gshared glGetQueryiv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetQueryiv_Z_Z_loader(target, pname, params); };
private void glGetQueryiv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetQueryiv_Z_Z = glbindGetProcAddress(`glGetQueryiv`);
  if (*cast(void**)&glGetQueryiv_Z_Z is null) assert(0, `OpenGL function 'glGetQueryiv' not found!`);
  glGetQueryiv_Z_Z(target, pname, params);
}
alias glGetQueryivARB = glGetQueryivARB_Z_Z;
__gshared glGetQueryivARB_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetQueryivARB_Z_Z_loader(target, pname, params); };
private void glGetQueryivARB_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetQueryivARB_Z_Z = glbindGetProcAddress(`glGetQueryivARB`);
  if (*cast(void**)&glGetQueryivARB_Z_Z is null) assert(0, `OpenGL function 'glGetQueryivARB' not found!`);
  glGetQueryivARB_Z_Z(target, pname, params);
}
alias glGetQueryivEXT = glGetQueryivEXT_Z_Z;
__gshared glGetQueryivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetQueryivEXT_Z_Z_loader(target, pname, params); };
private void glGetQueryivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetQueryivEXT_Z_Z = glbindGetProcAddress(`glGetQueryivEXT`);
  if (*cast(void**)&glGetQueryivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetQueryivEXT' not found!`);
  glGetQueryivEXT_Z_Z(target, pname, params);
}
alias glGetRenderbufferParameteriv = glGetRenderbufferParameteriv_Z_Z;
__gshared glGetRenderbufferParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetRenderbufferParameteriv_Z_Z_loader(target, pname, params); };
private void glGetRenderbufferParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetRenderbufferParameteriv_Z_Z = glbindGetProcAddress(`glGetRenderbufferParameteriv`);
  if (*cast(void**)&glGetRenderbufferParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetRenderbufferParameteriv' not found!`);
  glGetRenderbufferParameteriv_Z_Z(target, pname, params);
}
alias glGetRenderbufferParameterivEXT = glGetRenderbufferParameterivEXT_Z_Z;
__gshared glGetRenderbufferParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetRenderbufferParameterivEXT_Z_Z_loader(target, pname, params); };
private void glGetRenderbufferParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetRenderbufferParameterivEXT_Z_Z = glbindGetProcAddress(`glGetRenderbufferParameterivEXT`);
  if (*cast(void**)&glGetRenderbufferParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetRenderbufferParameterivEXT' not found!`);
  glGetRenderbufferParameterivEXT_Z_Z(target, pname, params);
}
alias glGetRenderbufferParameterivOES = glGetRenderbufferParameterivOES_Z_Z;
__gshared glGetRenderbufferParameterivOES_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetRenderbufferParameterivOES_Z_Z_loader(target, pname, params); };
private void glGetRenderbufferParameterivOES_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetRenderbufferParameterivOES_Z_Z = glbindGetProcAddress(`glGetRenderbufferParameterivOES`);
  if (*cast(void**)&glGetRenderbufferParameterivOES_Z_Z is null) assert(0, `OpenGL function 'glGetRenderbufferParameterivOES' not found!`);
  glGetRenderbufferParameterivOES_Z_Z(target, pname, params);
}
alias glGetSamplerParameterIiv = glGetSamplerParameterIiv_Z_Z;
__gshared glGetSamplerParameterIiv_Z_Z = function void (GLuint sampler, GLenum pname, GLint *params) { glGetSamplerParameterIiv_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameterIiv_Z_Z_loader (GLuint sampler, GLenum pname, GLint *params) {
  *cast(void**)&glGetSamplerParameterIiv_Z_Z = glbindGetProcAddress(`glGetSamplerParameterIiv`);
  if (*cast(void**)&glGetSamplerParameterIiv_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIiv' not found!`);
  glGetSamplerParameterIiv_Z_Z(sampler, pname, params);
}
alias glGetSamplerParameterIivEXT = glGetSamplerParameterIivEXT_Z_Z;
__gshared glGetSamplerParameterIivEXT_Z_Z = function void (GLuint sampler, GLenum pname, GLint *params) { glGetSamplerParameterIivEXT_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameterIivEXT_Z_Z_loader (GLuint sampler, GLenum pname, GLint *params) {
  *cast(void**)&glGetSamplerParameterIivEXT_Z_Z = glbindGetProcAddress(`glGetSamplerParameterIivEXT`);
  if (*cast(void**)&glGetSamplerParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIivEXT' not found!`);
  glGetSamplerParameterIivEXT_Z_Z(sampler, pname, params);
}
alias glGetSamplerParameterIivOES = glGetSamplerParameterIivOES_Z_Z;
__gshared glGetSamplerParameterIivOES_Z_Z = function void (GLuint sampler, GLenum pname, GLint *params) { glGetSamplerParameterIivOES_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameterIivOES_Z_Z_loader (GLuint sampler, GLenum pname, GLint *params) {
  *cast(void**)&glGetSamplerParameterIivOES_Z_Z = glbindGetProcAddress(`glGetSamplerParameterIivOES`);
  if (*cast(void**)&glGetSamplerParameterIivOES_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIivOES' not found!`);
  glGetSamplerParameterIivOES_Z_Z(sampler, pname, params);
}
alias glGetSamplerParameterIuiv = glGetSamplerParameterIuiv_Z_Z;
__gshared glGetSamplerParameterIuiv_Z_Z = function void (GLuint sampler, GLenum pname, GLuint *params) { glGetSamplerParameterIuiv_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameterIuiv_Z_Z_loader (GLuint sampler, GLenum pname, GLuint *params) {
  *cast(void**)&glGetSamplerParameterIuiv_Z_Z = glbindGetProcAddress(`glGetSamplerParameterIuiv`);
  if (*cast(void**)&glGetSamplerParameterIuiv_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIuiv' not found!`);
  glGetSamplerParameterIuiv_Z_Z(sampler, pname, params);
}
alias glGetSamplerParameterIuivEXT = glGetSamplerParameterIuivEXT_Z_Z;
__gshared glGetSamplerParameterIuivEXT_Z_Z = function void (GLuint sampler, GLenum pname, GLuint *params) { glGetSamplerParameterIuivEXT_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameterIuivEXT_Z_Z_loader (GLuint sampler, GLenum pname, GLuint *params) {
  *cast(void**)&glGetSamplerParameterIuivEXT_Z_Z = glbindGetProcAddress(`glGetSamplerParameterIuivEXT`);
  if (*cast(void**)&glGetSamplerParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIuivEXT' not found!`);
  glGetSamplerParameterIuivEXT_Z_Z(sampler, pname, params);
}
alias glGetSamplerParameterIuivOES = glGetSamplerParameterIuivOES_Z_Z;
__gshared glGetSamplerParameterIuivOES_Z_Z = function void (GLuint sampler, GLenum pname, GLuint *params) { glGetSamplerParameterIuivOES_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameterIuivOES_Z_Z_loader (GLuint sampler, GLenum pname, GLuint *params) {
  *cast(void**)&glGetSamplerParameterIuivOES_Z_Z = glbindGetProcAddress(`glGetSamplerParameterIuivOES`);
  if (*cast(void**)&glGetSamplerParameterIuivOES_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterIuivOES' not found!`);
  glGetSamplerParameterIuivOES_Z_Z(sampler, pname, params);
}
alias glGetSamplerParameterfv = glGetSamplerParameterfv_Z_Z;
__gshared glGetSamplerParameterfv_Z_Z = function void (GLuint sampler, GLenum pname, GLfloat *params) { glGetSamplerParameterfv_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameterfv_Z_Z_loader (GLuint sampler, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetSamplerParameterfv_Z_Z = glbindGetProcAddress(`glGetSamplerParameterfv`);
  if (*cast(void**)&glGetSamplerParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameterfv' not found!`);
  glGetSamplerParameterfv_Z_Z(sampler, pname, params);
}
alias glGetSamplerParameteriv = glGetSamplerParameteriv_Z_Z;
__gshared glGetSamplerParameteriv_Z_Z = function void (GLuint sampler, GLenum pname, GLint *params) { glGetSamplerParameteriv_Z_Z_loader(sampler, pname, params); };
private void glGetSamplerParameteriv_Z_Z_loader (GLuint sampler, GLenum pname, GLint *params) {
  *cast(void**)&glGetSamplerParameteriv_Z_Z = glbindGetProcAddress(`glGetSamplerParameteriv`);
  if (*cast(void**)&glGetSamplerParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetSamplerParameteriv' not found!`);
  glGetSamplerParameteriv_Z_Z(sampler, pname, params);
}
alias glGetSemaphoreParameterui64vEXT = glGetSemaphoreParameterui64vEXT_Z_Z;
__gshared glGetSemaphoreParameterui64vEXT_Z_Z = function void (GLuint semaphore, GLenum pname, GLuint64 *params) { glGetSemaphoreParameterui64vEXT_Z_Z_loader(semaphore, pname, params); };
private void glGetSemaphoreParameterui64vEXT_Z_Z_loader (GLuint semaphore, GLenum pname, GLuint64 *params) {
  *cast(void**)&glGetSemaphoreParameterui64vEXT_Z_Z = glbindGetProcAddress(`glGetSemaphoreParameterui64vEXT`);
  if (*cast(void**)&glGetSemaphoreParameterui64vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetSemaphoreParameterui64vEXT' not found!`);
  glGetSemaphoreParameterui64vEXT_Z_Z(semaphore, pname, params);
}
alias glGetSeparableFilter = glGetSeparableFilter_Z_Z;
__gshared glGetSeparableFilter_Z_Z = function void (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) { glGetSeparableFilter_Z_Z_loader(target, format, type, row, column, span); };
private void glGetSeparableFilter_Z_Z_loader (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) {
  *cast(void**)&glGetSeparableFilter_Z_Z = glbindGetProcAddress(`glGetSeparableFilter`);
  if (*cast(void**)&glGetSeparableFilter_Z_Z is null) assert(0, `OpenGL function 'glGetSeparableFilter' not found!`);
  glGetSeparableFilter_Z_Z(target, format, type, row, column, span);
}
alias glGetSeparableFilterEXT = glGetSeparableFilterEXT_Z_Z;
__gshared glGetSeparableFilterEXT_Z_Z = function void (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) { glGetSeparableFilterEXT_Z_Z_loader(target, format, type, row, column, span); };
private void glGetSeparableFilterEXT_Z_Z_loader (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) {
  *cast(void**)&glGetSeparableFilterEXT_Z_Z = glbindGetProcAddress(`glGetSeparableFilterEXT`);
  if (*cast(void**)&glGetSeparableFilterEXT_Z_Z is null) assert(0, `OpenGL function 'glGetSeparableFilterEXT' not found!`);
  glGetSeparableFilterEXT_Z_Z(target, format, type, row, column, span);
}
alias glGetShaderInfoLog = glGetShaderInfoLog_Z_Z;
__gshared glGetShaderInfoLog_Z_Z = function void (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { glGetShaderInfoLog_Z_Z_loader(shader, bufSize, length, infoLog); };
private void glGetShaderInfoLog_Z_Z_loader (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  *cast(void**)&glGetShaderInfoLog_Z_Z = glbindGetProcAddress(`glGetShaderInfoLog`);
  if (*cast(void**)&glGetShaderInfoLog_Z_Z is null) assert(0, `OpenGL function 'glGetShaderInfoLog' not found!`);
  glGetShaderInfoLog_Z_Z(shader, bufSize, length, infoLog);
}
alias glGetShaderPrecisionFormat = glGetShaderPrecisionFormat_Z_Z;
__gshared glGetShaderPrecisionFormat_Z_Z = function void (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) { glGetShaderPrecisionFormat_Z_Z_loader(shadertype, precisiontype, range, precision); };
private void glGetShaderPrecisionFormat_Z_Z_loader (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
  *cast(void**)&glGetShaderPrecisionFormat_Z_Z = glbindGetProcAddress(`glGetShaderPrecisionFormat`);
  if (*cast(void**)&glGetShaderPrecisionFormat_Z_Z is null) assert(0, `OpenGL function 'glGetShaderPrecisionFormat' not found!`);
  glGetShaderPrecisionFormat_Z_Z(shadertype, precisiontype, range, precision);
}
alias glGetShaderSource = glGetShaderSource_Z_Z;
__gshared glGetShaderSource_Z_Z = function void (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) { glGetShaderSource_Z_Z_loader(shader, bufSize, length, source); };
private void glGetShaderSource_Z_Z_loader (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
  *cast(void**)&glGetShaderSource_Z_Z = glbindGetProcAddress(`glGetShaderSource`);
  if (*cast(void**)&glGetShaderSource_Z_Z is null) assert(0, `OpenGL function 'glGetShaderSource' not found!`);
  glGetShaderSource_Z_Z(shader, bufSize, length, source);
}
alias glGetShaderSourceARB = glGetShaderSourceARB_Z_Z;
__gshared glGetShaderSourceARB_Z_Z = function void (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) { glGetShaderSourceARB_Z_Z_loader(obj, maxLength, length, source); };
private void glGetShaderSourceARB_Z_Z_loader (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) {
  *cast(void**)&glGetShaderSourceARB_Z_Z = glbindGetProcAddress(`glGetShaderSourceARB`);
  if (*cast(void**)&glGetShaderSourceARB_Z_Z is null) assert(0, `OpenGL function 'glGetShaderSourceARB' not found!`);
  glGetShaderSourceARB_Z_Z(obj, maxLength, length, source);
}
alias glGetShaderiv = glGetShaderiv_Z_Z;
__gshared glGetShaderiv_Z_Z = function void (GLuint shader, GLenum pname, GLint *params) { glGetShaderiv_Z_Z_loader(shader, pname, params); };
private void glGetShaderiv_Z_Z_loader (GLuint shader, GLenum pname, GLint *params) {
  *cast(void**)&glGetShaderiv_Z_Z = glbindGetProcAddress(`glGetShaderiv`);
  if (*cast(void**)&glGetShaderiv_Z_Z is null) assert(0, `OpenGL function 'glGetShaderiv' not found!`);
  glGetShaderiv_Z_Z(shader, pname, params);
}
alias glGetSharpenTexFuncSGIS = glGetSharpenTexFuncSGIS_Z_Z;
__gshared glGetSharpenTexFuncSGIS_Z_Z = function void (GLenum target, GLfloat *points) { glGetSharpenTexFuncSGIS_Z_Z_loader(target, points); };
private void glGetSharpenTexFuncSGIS_Z_Z_loader (GLenum target, GLfloat *points) {
  *cast(void**)&glGetSharpenTexFuncSGIS_Z_Z = glbindGetProcAddress(`glGetSharpenTexFuncSGIS`);
  if (*cast(void**)&glGetSharpenTexFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glGetSharpenTexFuncSGIS' not found!`);
  glGetSharpenTexFuncSGIS_Z_Z(target, points);
}
alias glGetStageIndexNV = glGetStageIndexNV_Z_Z;
__gshared glGetStageIndexNV_Z_Z = function GLushort (GLenum shadertype) { return glGetStageIndexNV_Z_Z_loader(shadertype); };
private GLushort glGetStageIndexNV_Z_Z_loader (GLenum shadertype) {
  *cast(void**)&glGetStageIndexNV_Z_Z = glbindGetProcAddress(`glGetStageIndexNV`);
  if (*cast(void**)&glGetStageIndexNV_Z_Z is null) assert(0, `OpenGL function 'glGetStageIndexNV' not found!`);
  return glGetStageIndexNV_Z_Z(shadertype);
}
alias glGetString = glGetString_Z_Z;
__gshared glGetString_Z_Z = function const(GLubyte)* (GLenum name) { return glGetString_Z_Z_loader(name); };
private const(GLubyte)* glGetString_Z_Z_loader (GLenum name) {
  *cast(void**)&glGetString_Z_Z = glbindGetProcAddress(`glGetString`);
  if (*cast(void**)&glGetString_Z_Z is null) assert(0, `OpenGL function 'glGetString' not found!`);
  return glGetString_Z_Z(name);
}
alias glGetStringi = glGetStringi_Z_Z;
__gshared glGetStringi_Z_Z = function const(GLubyte)* (GLenum name, GLuint index) { return glGetStringi_Z_Z_loader(name, index); };
private const(GLubyte)* glGetStringi_Z_Z_loader (GLenum name, GLuint index) {
  *cast(void**)&glGetStringi_Z_Z = glbindGetProcAddress(`glGetStringi`);
  if (*cast(void**)&glGetStringi_Z_Z is null) assert(0, `OpenGL function 'glGetStringi' not found!`);
  return glGetStringi_Z_Z(name, index);
}
alias glGetSubroutineIndex = glGetSubroutineIndex_Z_Z;
__gshared glGetSubroutineIndex_Z_Z = function GLuint (GLuint program, GLenum shadertype, const(GLchar)* name) { return glGetSubroutineIndex_Z_Z_loader(program, shadertype, name); };
private GLuint glGetSubroutineIndex_Z_Z_loader (GLuint program, GLenum shadertype, const(GLchar)* name) {
  *cast(void**)&glGetSubroutineIndex_Z_Z = glbindGetProcAddress(`glGetSubroutineIndex`);
  if (*cast(void**)&glGetSubroutineIndex_Z_Z is null) assert(0, `OpenGL function 'glGetSubroutineIndex' not found!`);
  return glGetSubroutineIndex_Z_Z(program, shadertype, name);
}
alias glGetSubroutineUniformLocation = glGetSubroutineUniformLocation_Z_Z;
__gshared glGetSubroutineUniformLocation_Z_Z = function GLint (GLuint program, GLenum shadertype, const(GLchar)* name) { return glGetSubroutineUniformLocation_Z_Z_loader(program, shadertype, name); };
private GLint glGetSubroutineUniformLocation_Z_Z_loader (GLuint program, GLenum shadertype, const(GLchar)* name) {
  *cast(void**)&glGetSubroutineUniformLocation_Z_Z = glbindGetProcAddress(`glGetSubroutineUniformLocation`);
  if (*cast(void**)&glGetSubroutineUniformLocation_Z_Z is null) assert(0, `OpenGL function 'glGetSubroutineUniformLocation' not found!`);
  return glGetSubroutineUniformLocation_Z_Z(program, shadertype, name);
}
alias glGetSynciv = glGetSynciv_Z_Z;
__gshared glGetSynciv_Z_Z = function void (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { glGetSynciv_Z_Z_loader(sync, pname, bufSize, length, values); };
private void glGetSynciv_Z_Z_loader (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  *cast(void**)&glGetSynciv_Z_Z = glbindGetProcAddress(`glGetSynciv`);
  if (*cast(void**)&glGetSynciv_Z_Z is null) assert(0, `OpenGL function 'glGetSynciv' not found!`);
  glGetSynciv_Z_Z(sync, pname, bufSize, length, values);
}
alias glGetSyncivAPPLE = glGetSyncivAPPLE_Z_Z;
__gshared glGetSyncivAPPLE_Z_Z = function void (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { glGetSyncivAPPLE_Z_Z_loader(sync, pname, bufSize, length, values); };
private void glGetSyncivAPPLE_Z_Z_loader (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  *cast(void**)&glGetSyncivAPPLE_Z_Z = glbindGetProcAddress(`glGetSyncivAPPLE`);
  if (*cast(void**)&glGetSyncivAPPLE_Z_Z is null) assert(0, `OpenGL function 'glGetSyncivAPPLE' not found!`);
  glGetSyncivAPPLE_Z_Z(sync, pname, bufSize, length, values);
}
alias glGetTexBumpParameterfvATI = glGetTexBumpParameterfvATI_Z_Z;
__gshared glGetTexBumpParameterfvATI_Z_Z = function void (GLenum pname, GLfloat *param) { glGetTexBumpParameterfvATI_Z_Z_loader(pname, param); };
private void glGetTexBumpParameterfvATI_Z_Z_loader (GLenum pname, GLfloat *param) {
  *cast(void**)&glGetTexBumpParameterfvATI_Z_Z = glbindGetProcAddress(`glGetTexBumpParameterfvATI`);
  if (*cast(void**)&glGetTexBumpParameterfvATI_Z_Z is null) assert(0, `OpenGL function 'glGetTexBumpParameterfvATI' not found!`);
  glGetTexBumpParameterfvATI_Z_Z(pname, param);
}
alias glGetTexBumpParameterivATI = glGetTexBumpParameterivATI_Z_Z;
__gshared glGetTexBumpParameterivATI_Z_Z = function void (GLenum pname, GLint *param) { glGetTexBumpParameterivATI_Z_Z_loader(pname, param); };
private void glGetTexBumpParameterivATI_Z_Z_loader (GLenum pname, GLint *param) {
  *cast(void**)&glGetTexBumpParameterivATI_Z_Z = glbindGetProcAddress(`glGetTexBumpParameterivATI`);
  if (*cast(void**)&glGetTexBumpParameterivATI_Z_Z is null) assert(0, `OpenGL function 'glGetTexBumpParameterivATI' not found!`);
  glGetTexBumpParameterivATI_Z_Z(pname, param);
}
alias glGetTexEnvfv = glGetTexEnvfv_Z_Z;
__gshared glGetTexEnvfv_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetTexEnvfv_Z_Z_loader(target, pname, params); };
private void glGetTexEnvfv_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTexEnvfv_Z_Z = glbindGetProcAddress(`glGetTexEnvfv`);
  if (*cast(void**)&glGetTexEnvfv_Z_Z is null) assert(0, `OpenGL function 'glGetTexEnvfv' not found!`);
  glGetTexEnvfv_Z_Z(target, pname, params);
}
alias glGetTexEnviv = glGetTexEnviv_Z_Z;
__gshared glGetTexEnviv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetTexEnviv_Z_Z_loader(target, pname, params); };
private void glGetTexEnviv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexEnviv_Z_Z = glbindGetProcAddress(`glGetTexEnviv`);
  if (*cast(void**)&glGetTexEnviv_Z_Z is null) assert(0, `OpenGL function 'glGetTexEnviv' not found!`);
  glGetTexEnviv_Z_Z(target, pname, params);
}
alias glGetTexEnvxv = glGetTexEnvxv_Z_Z;
__gshared glGetTexEnvxv_Z_Z = function void (GLenum target, GLenum pname, GLfixed *params) { glGetTexEnvxv_Z_Z_loader(target, pname, params); };
private void glGetTexEnvxv_Z_Z_loader (GLenum target, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetTexEnvxv_Z_Z = glbindGetProcAddress(`glGetTexEnvxv`);
  if (*cast(void**)&glGetTexEnvxv_Z_Z is null) assert(0, `OpenGL function 'glGetTexEnvxv' not found!`);
  glGetTexEnvxv_Z_Z(target, pname, params);
}
alias glGetTexEnvxvOES = glGetTexEnvxvOES_Z_Z;
__gshared glGetTexEnvxvOES_Z_Z = function void (GLenum target, GLenum pname, GLfixed *params) { glGetTexEnvxvOES_Z_Z_loader(target, pname, params); };
private void glGetTexEnvxvOES_Z_Z_loader (GLenum target, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetTexEnvxvOES_Z_Z = glbindGetProcAddress(`glGetTexEnvxvOES`);
  if (*cast(void**)&glGetTexEnvxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexEnvxvOES' not found!`);
  glGetTexEnvxvOES_Z_Z(target, pname, params);
}
alias glGetTexFilterFuncSGIS = glGetTexFilterFuncSGIS_Z_Z;
__gshared glGetTexFilterFuncSGIS_Z_Z = function void (GLenum target, GLenum filter, GLfloat *weights) { glGetTexFilterFuncSGIS_Z_Z_loader(target, filter, weights); };
private void glGetTexFilterFuncSGIS_Z_Z_loader (GLenum target, GLenum filter, GLfloat *weights) {
  *cast(void**)&glGetTexFilterFuncSGIS_Z_Z = glbindGetProcAddress(`glGetTexFilterFuncSGIS`);
  if (*cast(void**)&glGetTexFilterFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glGetTexFilterFuncSGIS' not found!`);
  glGetTexFilterFuncSGIS_Z_Z(target, filter, weights);
}
alias glGetTexGendv = glGetTexGendv_Z_Z;
__gshared glGetTexGendv_Z_Z = function void (GLenum coord, GLenum pname, GLdouble *params) { glGetTexGendv_Z_Z_loader(coord, pname, params); };
private void glGetTexGendv_Z_Z_loader (GLenum coord, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetTexGendv_Z_Z = glbindGetProcAddress(`glGetTexGendv`);
  if (*cast(void**)&glGetTexGendv_Z_Z is null) assert(0, `OpenGL function 'glGetTexGendv' not found!`);
  glGetTexGendv_Z_Z(coord, pname, params);
}
alias glGetTexGenfv = glGetTexGenfv_Z_Z;
__gshared glGetTexGenfv_Z_Z = function void (GLenum coord, GLenum pname, GLfloat *params) { glGetTexGenfv_Z_Z_loader(coord, pname, params); };
private void glGetTexGenfv_Z_Z_loader (GLenum coord, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTexGenfv_Z_Z = glbindGetProcAddress(`glGetTexGenfv`);
  if (*cast(void**)&glGetTexGenfv_Z_Z is null) assert(0, `OpenGL function 'glGetTexGenfv' not found!`);
  glGetTexGenfv_Z_Z(coord, pname, params);
}
alias glGetTexGenfvOES = glGetTexGenfvOES_Z_Z;
__gshared glGetTexGenfvOES_Z_Z = function void (GLenum coord, GLenum pname, GLfloat *params) { glGetTexGenfvOES_Z_Z_loader(coord, pname, params); };
private void glGetTexGenfvOES_Z_Z_loader (GLenum coord, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTexGenfvOES_Z_Z = glbindGetProcAddress(`glGetTexGenfvOES`);
  if (*cast(void**)&glGetTexGenfvOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexGenfvOES' not found!`);
  glGetTexGenfvOES_Z_Z(coord, pname, params);
}
alias glGetTexGeniv = glGetTexGeniv_Z_Z;
__gshared glGetTexGeniv_Z_Z = function void (GLenum coord, GLenum pname, GLint *params) { glGetTexGeniv_Z_Z_loader(coord, pname, params); };
private void glGetTexGeniv_Z_Z_loader (GLenum coord, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexGeniv_Z_Z = glbindGetProcAddress(`glGetTexGeniv`);
  if (*cast(void**)&glGetTexGeniv_Z_Z is null) assert(0, `OpenGL function 'glGetTexGeniv' not found!`);
  glGetTexGeniv_Z_Z(coord, pname, params);
}
alias glGetTexGenivOES = glGetTexGenivOES_Z_Z;
__gshared glGetTexGenivOES_Z_Z = function void (GLenum coord, GLenum pname, GLint *params) { glGetTexGenivOES_Z_Z_loader(coord, pname, params); };
private void glGetTexGenivOES_Z_Z_loader (GLenum coord, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexGenivOES_Z_Z = glbindGetProcAddress(`glGetTexGenivOES`);
  if (*cast(void**)&glGetTexGenivOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexGenivOES' not found!`);
  glGetTexGenivOES_Z_Z(coord, pname, params);
}
alias glGetTexGenxvOES = glGetTexGenxvOES_Z_Z;
__gshared glGetTexGenxvOES_Z_Z = function void (GLenum coord, GLenum pname, GLfixed *params) { glGetTexGenxvOES_Z_Z_loader(coord, pname, params); };
private void glGetTexGenxvOES_Z_Z_loader (GLenum coord, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetTexGenxvOES_Z_Z = glbindGetProcAddress(`glGetTexGenxvOES`);
  if (*cast(void**)&glGetTexGenxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexGenxvOES' not found!`);
  glGetTexGenxvOES_Z_Z(coord, pname, params);
}
alias glGetTexImage = glGetTexImage_Z_Z;
__gshared glGetTexImage_Z_Z = function void (GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { glGetTexImage_Z_Z_loader(target, level, format, type, pixels); };
private void glGetTexImage_Z_Z_loader (GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  *cast(void**)&glGetTexImage_Z_Z = glbindGetProcAddress(`glGetTexImage`);
  if (*cast(void**)&glGetTexImage_Z_Z is null) assert(0, `OpenGL function 'glGetTexImage' not found!`);
  glGetTexImage_Z_Z(target, level, format, type, pixels);
}
alias glGetTexLevelParameterfv = glGetTexLevelParameterfv_Z_Z;
__gshared glGetTexLevelParameterfv_Z_Z = function void (GLenum target, GLint level, GLenum pname, GLfloat *params) { glGetTexLevelParameterfv_Z_Z_loader(target, level, pname, params); };
private void glGetTexLevelParameterfv_Z_Z_loader (GLenum target, GLint level, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTexLevelParameterfv_Z_Z = glbindGetProcAddress(`glGetTexLevelParameterfv`);
  if (*cast(void**)&glGetTexLevelParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetTexLevelParameterfv' not found!`);
  glGetTexLevelParameterfv_Z_Z(target, level, pname, params);
}
alias glGetTexLevelParameteriv = glGetTexLevelParameteriv_Z_Z;
__gshared glGetTexLevelParameteriv_Z_Z = function void (GLenum target, GLint level, GLenum pname, GLint *params) { glGetTexLevelParameteriv_Z_Z_loader(target, level, pname, params); };
private void glGetTexLevelParameteriv_Z_Z_loader (GLenum target, GLint level, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexLevelParameteriv_Z_Z = glbindGetProcAddress(`glGetTexLevelParameteriv`);
  if (*cast(void**)&glGetTexLevelParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetTexLevelParameteriv' not found!`);
  glGetTexLevelParameteriv_Z_Z(target, level, pname, params);
}
alias glGetTexLevelParameterxvOES = glGetTexLevelParameterxvOES_Z_Z;
__gshared glGetTexLevelParameterxvOES_Z_Z = function void (GLenum target, GLint level, GLenum pname, GLfixed *params) { glGetTexLevelParameterxvOES_Z_Z_loader(target, level, pname, params); };
private void glGetTexLevelParameterxvOES_Z_Z_loader (GLenum target, GLint level, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetTexLevelParameterxvOES_Z_Z = glbindGetProcAddress(`glGetTexLevelParameterxvOES`);
  if (*cast(void**)&glGetTexLevelParameterxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexLevelParameterxvOES' not found!`);
  glGetTexLevelParameterxvOES_Z_Z(target, level, pname, params);
}
alias glGetTexParameterIiv = glGetTexParameterIiv_Z_Z;
__gshared glGetTexParameterIiv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetTexParameterIiv_Z_Z_loader(target, pname, params); };
private void glGetTexParameterIiv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexParameterIiv_Z_Z = glbindGetProcAddress(`glGetTexParameterIiv`);
  if (*cast(void**)&glGetTexParameterIiv_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterIiv' not found!`);
  glGetTexParameterIiv_Z_Z(target, pname, params);
}
alias glGetTexParameterIivEXT = glGetTexParameterIivEXT_Z_Z;
__gshared glGetTexParameterIivEXT_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetTexParameterIivEXT_Z_Z_loader(target, pname, params); };
private void glGetTexParameterIivEXT_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexParameterIivEXT_Z_Z = glbindGetProcAddress(`glGetTexParameterIivEXT`);
  if (*cast(void**)&glGetTexParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterIivEXT' not found!`);
  glGetTexParameterIivEXT_Z_Z(target, pname, params);
}
alias glGetTexParameterIivOES = glGetTexParameterIivOES_Z_Z;
__gshared glGetTexParameterIivOES_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetTexParameterIivOES_Z_Z_loader(target, pname, params); };
private void glGetTexParameterIivOES_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexParameterIivOES_Z_Z = glbindGetProcAddress(`glGetTexParameterIivOES`);
  if (*cast(void**)&glGetTexParameterIivOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterIivOES' not found!`);
  glGetTexParameterIivOES_Z_Z(target, pname, params);
}
alias glGetTexParameterIuiv = glGetTexParameterIuiv_Z_Z;
__gshared glGetTexParameterIuiv_Z_Z = function void (GLenum target, GLenum pname, GLuint *params) { glGetTexParameterIuiv_Z_Z_loader(target, pname, params); };
private void glGetTexParameterIuiv_Z_Z_loader (GLenum target, GLenum pname, GLuint *params) {
  *cast(void**)&glGetTexParameterIuiv_Z_Z = glbindGetProcAddress(`glGetTexParameterIuiv`);
  if (*cast(void**)&glGetTexParameterIuiv_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterIuiv' not found!`);
  glGetTexParameterIuiv_Z_Z(target, pname, params);
}
alias glGetTexParameterIuivEXT = glGetTexParameterIuivEXT_Z_Z;
__gshared glGetTexParameterIuivEXT_Z_Z = function void (GLenum target, GLenum pname, GLuint *params) { glGetTexParameterIuivEXT_Z_Z_loader(target, pname, params); };
private void glGetTexParameterIuivEXT_Z_Z_loader (GLenum target, GLenum pname, GLuint *params) {
  *cast(void**)&glGetTexParameterIuivEXT_Z_Z = glbindGetProcAddress(`glGetTexParameterIuivEXT`);
  if (*cast(void**)&glGetTexParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterIuivEXT' not found!`);
  glGetTexParameterIuivEXT_Z_Z(target, pname, params);
}
alias glGetTexParameterIuivOES = glGetTexParameterIuivOES_Z_Z;
__gshared glGetTexParameterIuivOES_Z_Z = function void (GLenum target, GLenum pname, GLuint *params) { glGetTexParameterIuivOES_Z_Z_loader(target, pname, params); };
private void glGetTexParameterIuivOES_Z_Z_loader (GLenum target, GLenum pname, GLuint *params) {
  *cast(void**)&glGetTexParameterIuivOES_Z_Z = glbindGetProcAddress(`glGetTexParameterIuivOES`);
  if (*cast(void**)&glGetTexParameterIuivOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterIuivOES' not found!`);
  glGetTexParameterIuivOES_Z_Z(target, pname, params);
}
alias glGetTexParameterPointervAPPLE = glGetTexParameterPointervAPPLE_Z_Z;
__gshared glGetTexParameterPointervAPPLE_Z_Z = function void (GLenum target, GLenum pname, void **params) { glGetTexParameterPointervAPPLE_Z_Z_loader(target, pname, params); };
private void glGetTexParameterPointervAPPLE_Z_Z_loader (GLenum target, GLenum pname, void **params) {
  *cast(void**)&glGetTexParameterPointervAPPLE_Z_Z = glbindGetProcAddress(`glGetTexParameterPointervAPPLE`);
  if (*cast(void**)&glGetTexParameterPointervAPPLE_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterPointervAPPLE' not found!`);
  glGetTexParameterPointervAPPLE_Z_Z(target, pname, params);
}
alias glGetTexParameterfv = glGetTexParameterfv_Z_Z;
__gshared glGetTexParameterfv_Z_Z = function void (GLenum target, GLenum pname, GLfloat *params) { glGetTexParameterfv_Z_Z_loader(target, pname, params); };
private void glGetTexParameterfv_Z_Z_loader (GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTexParameterfv_Z_Z = glbindGetProcAddress(`glGetTexParameterfv`);
  if (*cast(void**)&glGetTexParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterfv' not found!`);
  glGetTexParameterfv_Z_Z(target, pname, params);
}
alias glGetTexParameteriv = glGetTexParameteriv_Z_Z;
__gshared glGetTexParameteriv_Z_Z = function void (GLenum target, GLenum pname, GLint *params) { glGetTexParameteriv_Z_Z_loader(target, pname, params); };
private void glGetTexParameteriv_Z_Z_loader (GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetTexParameteriv_Z_Z = glbindGetProcAddress(`glGetTexParameteriv`);
  if (*cast(void**)&glGetTexParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameteriv' not found!`);
  glGetTexParameteriv_Z_Z(target, pname, params);
}
alias glGetTexParameterxv = glGetTexParameterxv_Z_Z;
__gshared glGetTexParameterxv_Z_Z = function void (GLenum target, GLenum pname, GLfixed *params) { glGetTexParameterxv_Z_Z_loader(target, pname, params); };
private void glGetTexParameterxv_Z_Z_loader (GLenum target, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetTexParameterxv_Z_Z = glbindGetProcAddress(`glGetTexParameterxv`);
  if (*cast(void**)&glGetTexParameterxv_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterxv' not found!`);
  glGetTexParameterxv_Z_Z(target, pname, params);
}
alias glGetTexParameterxvOES = glGetTexParameterxvOES_Z_Z;
__gshared glGetTexParameterxvOES_Z_Z = function void (GLenum target, GLenum pname, GLfixed *params) { glGetTexParameterxvOES_Z_Z_loader(target, pname, params); };
private void glGetTexParameterxvOES_Z_Z_loader (GLenum target, GLenum pname, GLfixed *params) {
  *cast(void**)&glGetTexParameterxvOES_Z_Z = glbindGetProcAddress(`glGetTexParameterxvOES`);
  if (*cast(void**)&glGetTexParameterxvOES_Z_Z is null) assert(0, `OpenGL function 'glGetTexParameterxvOES' not found!`);
  glGetTexParameterxvOES_Z_Z(target, pname, params);
}
alias glGetTextureHandleARB = glGetTextureHandleARB_Z_Z;
__gshared glGetTextureHandleARB_Z_Z = function GLuint64 (GLuint texture) { return glGetTextureHandleARB_Z_Z_loader(texture); };
private GLuint64 glGetTextureHandleARB_Z_Z_loader (GLuint texture) {
  *cast(void**)&glGetTextureHandleARB_Z_Z = glbindGetProcAddress(`glGetTextureHandleARB`);
  if (*cast(void**)&glGetTextureHandleARB_Z_Z is null) assert(0, `OpenGL function 'glGetTextureHandleARB' not found!`);
  return glGetTextureHandleARB_Z_Z(texture);
}
alias glGetTextureHandleIMG = glGetTextureHandleIMG_Z_Z;
__gshared glGetTextureHandleIMG_Z_Z = function GLuint64 (GLuint texture) { return glGetTextureHandleIMG_Z_Z_loader(texture); };
private GLuint64 glGetTextureHandleIMG_Z_Z_loader (GLuint texture) {
  *cast(void**)&glGetTextureHandleIMG_Z_Z = glbindGetProcAddress(`glGetTextureHandleIMG`);
  if (*cast(void**)&glGetTextureHandleIMG_Z_Z is null) assert(0, `OpenGL function 'glGetTextureHandleIMG' not found!`);
  return glGetTextureHandleIMG_Z_Z(texture);
}
alias glGetTextureHandleNV = glGetTextureHandleNV_Z_Z;
__gshared glGetTextureHandleNV_Z_Z = function GLuint64 (GLuint texture) { return glGetTextureHandleNV_Z_Z_loader(texture); };
private GLuint64 glGetTextureHandleNV_Z_Z_loader (GLuint texture) {
  *cast(void**)&glGetTextureHandleNV_Z_Z = glbindGetProcAddress(`glGetTextureHandleNV`);
  if (*cast(void**)&glGetTextureHandleNV_Z_Z is null) assert(0, `OpenGL function 'glGetTextureHandleNV' not found!`);
  return glGetTextureHandleNV_Z_Z(texture);
}
alias glGetTextureImage = glGetTextureImage_Z_Z;
__gshared glGetTextureImage_Z_Z = function void (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { glGetTextureImage_Z_Z_loader(texture, level, format, type, bufSize, pixels); };
private void glGetTextureImage_Z_Z_loader (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  *cast(void**)&glGetTextureImage_Z_Z = glbindGetProcAddress(`glGetTextureImage`);
  if (*cast(void**)&glGetTextureImage_Z_Z is null) assert(0, `OpenGL function 'glGetTextureImage' not found!`);
  glGetTextureImage_Z_Z(texture, level, format, type, bufSize, pixels);
}
alias glGetTextureImageEXT = glGetTextureImageEXT_Z_Z;
__gshared glGetTextureImageEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { glGetTextureImageEXT_Z_Z_loader(texture, target, level, format, type, pixels); };
private void glGetTextureImageEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  *cast(void**)&glGetTextureImageEXT_Z_Z = glbindGetProcAddress(`glGetTextureImageEXT`);
  if (*cast(void**)&glGetTextureImageEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTextureImageEXT' not found!`);
  glGetTextureImageEXT_Z_Z(texture, target, level, format, type, pixels);
}
alias glGetTextureLevelParameterfv = glGetTextureLevelParameterfv_Z_Z;
__gshared glGetTextureLevelParameterfv_Z_Z = function void (GLuint texture, GLint level, GLenum pname, GLfloat *params) { glGetTextureLevelParameterfv_Z_Z_loader(texture, level, pname, params); };
private void glGetTextureLevelParameterfv_Z_Z_loader (GLuint texture, GLint level, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTextureLevelParameterfv_Z_Z = glbindGetProcAddress(`glGetTextureLevelParameterfv`);
  if (*cast(void**)&glGetTextureLevelParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfv' not found!`);
  glGetTextureLevelParameterfv_Z_Z(texture, level, pname, params);
}
alias glGetTextureLevelParameterfvEXT = glGetTextureLevelParameterfvEXT_Z_Z;
__gshared glGetTextureLevelParameterfvEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) { glGetTextureLevelParameterfvEXT_Z_Z_loader(texture, target, level, pname, params); };
private void glGetTextureLevelParameterfvEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTextureLevelParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetTextureLevelParameterfvEXT`);
  if (*cast(void**)&glGetTextureLevelParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfvEXT' not found!`);
  glGetTextureLevelParameterfvEXT_Z_Z(texture, target, level, pname, params);
}
alias glGetTextureLevelParameteriv = glGetTextureLevelParameteriv_Z_Z;
__gshared glGetTextureLevelParameteriv_Z_Z = function void (GLuint texture, GLint level, GLenum pname, GLint *params) { glGetTextureLevelParameteriv_Z_Z_loader(texture, level, pname, params); };
private void glGetTextureLevelParameteriv_Z_Z_loader (GLuint texture, GLint level, GLenum pname, GLint *params) {
  *cast(void**)&glGetTextureLevelParameteriv_Z_Z = glbindGetProcAddress(`glGetTextureLevelParameteriv`);
  if (*cast(void**)&glGetTextureLevelParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameteriv' not found!`);
  glGetTextureLevelParameteriv_Z_Z(texture, level, pname, params);
}
alias glGetTextureLevelParameterivEXT = glGetTextureLevelParameterivEXT_Z_Z;
__gshared glGetTextureLevelParameterivEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) { glGetTextureLevelParameterivEXT_Z_Z_loader(texture, target, level, pname, params); };
private void glGetTextureLevelParameterivEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) {
  *cast(void**)&glGetTextureLevelParameterivEXT_Z_Z = glbindGetProcAddress(`glGetTextureLevelParameterivEXT`);
  if (*cast(void**)&glGetTextureLevelParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTextureLevelParameterivEXT' not found!`);
  glGetTextureLevelParameterivEXT_Z_Z(texture, target, level, pname, params);
}
alias glGetTextureParameterIiv = glGetTextureParameterIiv_Z_Z;
__gshared glGetTextureParameterIiv_Z_Z = function void (GLuint texture, GLenum pname, GLint *params) { glGetTextureParameterIiv_Z_Z_loader(texture, pname, params); };
private void glGetTextureParameterIiv_Z_Z_loader (GLuint texture, GLenum pname, GLint *params) {
  *cast(void**)&glGetTextureParameterIiv_Z_Z = glbindGetProcAddress(`glGetTextureParameterIiv`);
  if (*cast(void**)&glGetTextureParameterIiv_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIiv' not found!`);
  glGetTextureParameterIiv_Z_Z(texture, pname, params);
}
alias glGetTextureParameterIivEXT = glGetTextureParameterIivEXT_Z_Z;
__gshared glGetTextureParameterIivEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, GLint *params) { glGetTextureParameterIivEXT_Z_Z_loader(texture, target, pname, params); };
private void glGetTextureParameterIivEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetTextureParameterIivEXT_Z_Z = glbindGetProcAddress(`glGetTextureParameterIivEXT`);
  if (*cast(void**)&glGetTextureParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIivEXT' not found!`);
  glGetTextureParameterIivEXT_Z_Z(texture, target, pname, params);
}
alias glGetTextureParameterIuiv = glGetTextureParameterIuiv_Z_Z;
__gshared glGetTextureParameterIuiv_Z_Z = function void (GLuint texture, GLenum pname, GLuint *params) { glGetTextureParameterIuiv_Z_Z_loader(texture, pname, params); };
private void glGetTextureParameterIuiv_Z_Z_loader (GLuint texture, GLenum pname, GLuint *params) {
  *cast(void**)&glGetTextureParameterIuiv_Z_Z = glbindGetProcAddress(`glGetTextureParameterIuiv`);
  if (*cast(void**)&glGetTextureParameterIuiv_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIuiv' not found!`);
  glGetTextureParameterIuiv_Z_Z(texture, pname, params);
}
alias glGetTextureParameterIuivEXT = glGetTextureParameterIuivEXT_Z_Z;
__gshared glGetTextureParameterIuivEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, GLuint *params) { glGetTextureParameterIuivEXT_Z_Z_loader(texture, target, pname, params); };
private void glGetTextureParameterIuivEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, GLuint *params) {
  *cast(void**)&glGetTextureParameterIuivEXT_Z_Z = glbindGetProcAddress(`glGetTextureParameterIuivEXT`);
  if (*cast(void**)&glGetTextureParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameterIuivEXT' not found!`);
  glGetTextureParameterIuivEXT_Z_Z(texture, target, pname, params);
}
alias glGetTextureParameterfv = glGetTextureParameterfv_Z_Z;
__gshared glGetTextureParameterfv_Z_Z = function void (GLuint texture, GLenum pname, GLfloat *params) { glGetTextureParameterfv_Z_Z_loader(texture, pname, params); };
private void glGetTextureParameterfv_Z_Z_loader (GLuint texture, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTextureParameterfv_Z_Z = glbindGetProcAddress(`glGetTextureParameterfv`);
  if (*cast(void**)&glGetTextureParameterfv_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameterfv' not found!`);
  glGetTextureParameterfv_Z_Z(texture, pname, params);
}
alias glGetTextureParameterfvEXT = glGetTextureParameterfvEXT_Z_Z;
__gshared glGetTextureParameterfvEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, GLfloat *params) { glGetTextureParameterfvEXT_Z_Z_loader(texture, target, pname, params); };
private void glGetTextureParameterfvEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetTextureParameterfvEXT_Z_Z = glbindGetProcAddress(`glGetTextureParameterfvEXT`);
  if (*cast(void**)&glGetTextureParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameterfvEXT' not found!`);
  glGetTextureParameterfvEXT_Z_Z(texture, target, pname, params);
}
alias glGetTextureParameteriv = glGetTextureParameteriv_Z_Z;
__gshared glGetTextureParameteriv_Z_Z = function void (GLuint texture, GLenum pname, GLint *params) { glGetTextureParameteriv_Z_Z_loader(texture, pname, params); };
private void glGetTextureParameteriv_Z_Z_loader (GLuint texture, GLenum pname, GLint *params) {
  *cast(void**)&glGetTextureParameteriv_Z_Z = glbindGetProcAddress(`glGetTextureParameteriv`);
  if (*cast(void**)&glGetTextureParameteriv_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameteriv' not found!`);
  glGetTextureParameteriv_Z_Z(texture, pname, params);
}
alias glGetTextureParameterivEXT = glGetTextureParameterivEXT_Z_Z;
__gshared glGetTextureParameterivEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, GLint *params) { glGetTextureParameterivEXT_Z_Z_loader(texture, target, pname, params); };
private void glGetTextureParameterivEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, GLint *params) {
  *cast(void**)&glGetTextureParameterivEXT_Z_Z = glbindGetProcAddress(`glGetTextureParameterivEXT`);
  if (*cast(void**)&glGetTextureParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTextureParameterivEXT' not found!`);
  glGetTextureParameterivEXT_Z_Z(texture, target, pname, params);
}
alias glGetTextureSamplerHandleARB = glGetTextureSamplerHandleARB_Z_Z;
__gshared glGetTextureSamplerHandleARB_Z_Z = function GLuint64 (GLuint texture, GLuint sampler) { return glGetTextureSamplerHandleARB_Z_Z_loader(texture, sampler); };
private GLuint64 glGetTextureSamplerHandleARB_Z_Z_loader (GLuint texture, GLuint sampler) {
  *cast(void**)&glGetTextureSamplerHandleARB_Z_Z = glbindGetProcAddress(`glGetTextureSamplerHandleARB`);
  if (*cast(void**)&glGetTextureSamplerHandleARB_Z_Z is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleARB' not found!`);
  return glGetTextureSamplerHandleARB_Z_Z(texture, sampler);
}
alias glGetTextureSamplerHandleIMG = glGetTextureSamplerHandleIMG_Z_Z;
__gshared glGetTextureSamplerHandleIMG_Z_Z = function GLuint64 (GLuint texture, GLuint sampler) { return glGetTextureSamplerHandleIMG_Z_Z_loader(texture, sampler); };
private GLuint64 glGetTextureSamplerHandleIMG_Z_Z_loader (GLuint texture, GLuint sampler) {
  *cast(void**)&glGetTextureSamplerHandleIMG_Z_Z = glbindGetProcAddress(`glGetTextureSamplerHandleIMG`);
  if (*cast(void**)&glGetTextureSamplerHandleIMG_Z_Z is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleIMG' not found!`);
  return glGetTextureSamplerHandleIMG_Z_Z(texture, sampler);
}
alias glGetTextureSamplerHandleNV = glGetTextureSamplerHandleNV_Z_Z;
__gshared glGetTextureSamplerHandleNV_Z_Z = function GLuint64 (GLuint texture, GLuint sampler) { return glGetTextureSamplerHandleNV_Z_Z_loader(texture, sampler); };
private GLuint64 glGetTextureSamplerHandleNV_Z_Z_loader (GLuint texture, GLuint sampler) {
  *cast(void**)&glGetTextureSamplerHandleNV_Z_Z = glbindGetProcAddress(`glGetTextureSamplerHandleNV`);
  if (*cast(void**)&glGetTextureSamplerHandleNV_Z_Z is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleNV' not found!`);
  return glGetTextureSamplerHandleNV_Z_Z(texture, sampler);
}
alias glGetTextureSubImage = glGetTextureSubImage_Z_Z;
__gshared glGetTextureSubImage_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { glGetTextureSubImage_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); };
private void glGetTextureSubImage_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  *cast(void**)&glGetTextureSubImage_Z_Z = glbindGetProcAddress(`glGetTextureSubImage`);
  if (*cast(void**)&glGetTextureSubImage_Z_Z is null) assert(0, `OpenGL function 'glGetTextureSubImage' not found!`);
  glGetTextureSubImage_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}
alias glGetTrackMatrixivNV = glGetTrackMatrixivNV_Z_Z;
__gshared glGetTrackMatrixivNV_Z_Z = function void (GLenum target, GLuint address, GLenum pname, GLint *params) { glGetTrackMatrixivNV_Z_Z_loader(target, address, pname, params); };
private void glGetTrackMatrixivNV_Z_Z_loader (GLenum target, GLuint address, GLenum pname, GLint *params) {
  *cast(void**)&glGetTrackMatrixivNV_Z_Z = glbindGetProcAddress(`glGetTrackMatrixivNV`);
  if (*cast(void**)&glGetTrackMatrixivNV_Z_Z is null) assert(0, `OpenGL function 'glGetTrackMatrixivNV' not found!`);
  glGetTrackMatrixivNV_Z_Z(target, address, pname, params);
}
alias glGetTransformFeedbackVarying = glGetTransformFeedbackVarying_Z_Z;
__gshared glGetTransformFeedbackVarying_Z_Z = function void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { glGetTransformFeedbackVarying_Z_Z_loader(program, index, bufSize, length, size, type, name); };
private void glGetTransformFeedbackVarying_Z_Z_loader (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  *cast(void**)&glGetTransformFeedbackVarying_Z_Z = glbindGetProcAddress(`glGetTransformFeedbackVarying`);
  if (*cast(void**)&glGetTransformFeedbackVarying_Z_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackVarying' not found!`);
  glGetTransformFeedbackVarying_Z_Z(program, index, bufSize, length, size, type, name);
}
alias glGetTransformFeedbackVaryingEXT = glGetTransformFeedbackVaryingEXT_Z_Z;
__gshared glGetTransformFeedbackVaryingEXT_Z_Z = function void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { glGetTransformFeedbackVaryingEXT_Z_Z_loader(program, index, bufSize, length, size, type, name); };
private void glGetTransformFeedbackVaryingEXT_Z_Z_loader (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  *cast(void**)&glGetTransformFeedbackVaryingEXT_Z_Z = glbindGetProcAddress(`glGetTransformFeedbackVaryingEXT`);
  if (*cast(void**)&glGetTransformFeedbackVaryingEXT_Z_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingEXT' not found!`);
  glGetTransformFeedbackVaryingEXT_Z_Z(program, index, bufSize, length, size, type, name);
}
alias glGetTransformFeedbackVaryingNV = glGetTransformFeedbackVaryingNV_Z_Z;
__gshared glGetTransformFeedbackVaryingNV_Z_Z = function void (GLuint program, GLuint index, GLint *location) { glGetTransformFeedbackVaryingNV_Z_Z_loader(program, index, location); };
private void glGetTransformFeedbackVaryingNV_Z_Z_loader (GLuint program, GLuint index, GLint *location) {
  *cast(void**)&glGetTransformFeedbackVaryingNV_Z_Z = glbindGetProcAddress(`glGetTransformFeedbackVaryingNV`);
  if (*cast(void**)&glGetTransformFeedbackVaryingNV_Z_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingNV' not found!`);
  glGetTransformFeedbackVaryingNV_Z_Z(program, index, location);
}
alias glGetTransformFeedbacki64_v = glGetTransformFeedbacki64_v_Z_Z;
__gshared glGetTransformFeedbacki64_v_Z_Z = function void (GLuint xfb, GLenum pname, GLuint index, GLint64 *param) { glGetTransformFeedbacki64_v_Z_Z_loader(xfb, pname, index, param); };
private void glGetTransformFeedbacki64_v_Z_Z_loader (GLuint xfb, GLenum pname, GLuint index, GLint64 *param) {
  *cast(void**)&glGetTransformFeedbacki64_v_Z_Z = glbindGetProcAddress(`glGetTransformFeedbacki64_v`);
  if (*cast(void**)&glGetTransformFeedbacki64_v_Z_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbacki64_v' not found!`);
  glGetTransformFeedbacki64_v_Z_Z(xfb, pname, index, param);
}
alias glGetTransformFeedbacki_v = glGetTransformFeedbacki_v_Z_Z;
__gshared glGetTransformFeedbacki_v_Z_Z = function void (GLuint xfb, GLenum pname, GLuint index, GLint *param) { glGetTransformFeedbacki_v_Z_Z_loader(xfb, pname, index, param); };
private void glGetTransformFeedbacki_v_Z_Z_loader (GLuint xfb, GLenum pname, GLuint index, GLint *param) {
  *cast(void**)&glGetTransformFeedbacki_v_Z_Z = glbindGetProcAddress(`glGetTransformFeedbacki_v`);
  if (*cast(void**)&glGetTransformFeedbacki_v_Z_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbacki_v' not found!`);
  glGetTransformFeedbacki_v_Z_Z(xfb, pname, index, param);
}
alias glGetTransformFeedbackiv = glGetTransformFeedbackiv_Z_Z;
__gshared glGetTransformFeedbackiv_Z_Z = function void (GLuint xfb, GLenum pname, GLint *param) { glGetTransformFeedbackiv_Z_Z_loader(xfb, pname, param); };
private void glGetTransformFeedbackiv_Z_Z_loader (GLuint xfb, GLenum pname, GLint *param) {
  *cast(void**)&glGetTransformFeedbackiv_Z_Z = glbindGetProcAddress(`glGetTransformFeedbackiv`);
  if (*cast(void**)&glGetTransformFeedbackiv_Z_Z is null) assert(0, `OpenGL function 'glGetTransformFeedbackiv' not found!`);
  glGetTransformFeedbackiv_Z_Z(xfb, pname, param);
}
alias glGetTranslatedShaderSourceANGLE = glGetTranslatedShaderSourceANGLE_Z_Z;
__gshared glGetTranslatedShaderSourceANGLE_Z_Z = function void (GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source) { glGetTranslatedShaderSourceANGLE_Z_Z_loader(shader, bufsize, length, source); };
private void glGetTranslatedShaderSourceANGLE_Z_Z_loader (GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source) {
  *cast(void**)&glGetTranslatedShaderSourceANGLE_Z_Z = glbindGetProcAddress(`glGetTranslatedShaderSourceANGLE`);
  if (*cast(void**)&glGetTranslatedShaderSourceANGLE_Z_Z is null) assert(0, `OpenGL function 'glGetTranslatedShaderSourceANGLE' not found!`);
  glGetTranslatedShaderSourceANGLE_Z_Z(shader, bufsize, length, source);
}
alias glGetUniformBlockIndex = glGetUniformBlockIndex_Z_Z;
__gshared glGetUniformBlockIndex_Z_Z = function GLuint (GLuint program, const(GLchar)* uniformBlockName) { return glGetUniformBlockIndex_Z_Z_loader(program, uniformBlockName); };
private GLuint glGetUniformBlockIndex_Z_Z_loader (GLuint program, const(GLchar)* uniformBlockName) {
  *cast(void**)&glGetUniformBlockIndex_Z_Z = glbindGetProcAddress(`glGetUniformBlockIndex`);
  if (*cast(void**)&glGetUniformBlockIndex_Z_Z is null) assert(0, `OpenGL function 'glGetUniformBlockIndex' not found!`);
  return glGetUniformBlockIndex_Z_Z(program, uniformBlockName);
}
alias glGetUniformBufferSizeEXT = glGetUniformBufferSizeEXT_Z_Z;
__gshared glGetUniformBufferSizeEXT_Z_Z = function GLint (GLuint program, GLint location) { return glGetUniformBufferSizeEXT_Z_Z_loader(program, location); };
private GLint glGetUniformBufferSizeEXT_Z_Z_loader (GLuint program, GLint location) {
  *cast(void**)&glGetUniformBufferSizeEXT_Z_Z = glbindGetProcAddress(`glGetUniformBufferSizeEXT`);
  if (*cast(void**)&glGetUniformBufferSizeEXT_Z_Z is null) assert(0, `OpenGL function 'glGetUniformBufferSizeEXT' not found!`);
  return glGetUniformBufferSizeEXT_Z_Z(program, location);
}
alias glGetUniformIndices = glGetUniformIndices_Z_Z;
__gshared glGetUniformIndices_Z_Z = function void (GLuint program, GLsizei uniformCount, const(GLchar)* *uniformNames, GLuint *uniformIndices) { glGetUniformIndices_Z_Z_loader(program, uniformCount, uniformNames, uniformIndices); };
private void glGetUniformIndices_Z_Z_loader (GLuint program, GLsizei uniformCount, const(GLchar)* *uniformNames, GLuint *uniformIndices) {
  *cast(void**)&glGetUniformIndices_Z_Z = glbindGetProcAddress(`glGetUniformIndices`);
  if (*cast(void**)&glGetUniformIndices_Z_Z is null) assert(0, `OpenGL function 'glGetUniformIndices' not found!`);
  glGetUniformIndices_Z_Z(program, uniformCount, uniformNames, uniformIndices);
}
alias glGetUniformLocation = glGetUniformLocation_Z_Z;
__gshared glGetUniformLocation_Z_Z = function GLint (GLuint program, const(GLchar)* name) { return glGetUniformLocation_Z_Z_loader(program, name); };
private GLint glGetUniformLocation_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glGetUniformLocation_Z_Z = glbindGetProcAddress(`glGetUniformLocation`);
  if (*cast(void**)&glGetUniformLocation_Z_Z is null) assert(0, `OpenGL function 'glGetUniformLocation' not found!`);
  return glGetUniformLocation_Z_Z(program, name);
}
alias glGetUniformLocationARB = glGetUniformLocationARB_Z_Z;
__gshared glGetUniformLocationARB_Z_Z = function GLint (GLhandleARB programObj, const(GLcharARB)* name) { return glGetUniformLocationARB_Z_Z_loader(programObj, name); };
private GLint glGetUniformLocationARB_Z_Z_loader (GLhandleARB programObj, const(GLcharARB)* name) {
  *cast(void**)&glGetUniformLocationARB_Z_Z = glbindGetProcAddress(`glGetUniformLocationARB`);
  if (*cast(void**)&glGetUniformLocationARB_Z_Z is null) assert(0, `OpenGL function 'glGetUniformLocationARB' not found!`);
  return glGetUniformLocationARB_Z_Z(programObj, name);
}
alias glGetUniformOffsetEXT = glGetUniformOffsetEXT_Z_Z;
__gshared glGetUniformOffsetEXT_Z_Z = function GLintptr (GLuint program, GLint location) { return glGetUniformOffsetEXT_Z_Z_loader(program, location); };
private GLintptr glGetUniformOffsetEXT_Z_Z_loader (GLuint program, GLint location) {
  *cast(void**)&glGetUniformOffsetEXT_Z_Z = glbindGetProcAddress(`glGetUniformOffsetEXT`);
  if (*cast(void**)&glGetUniformOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glGetUniformOffsetEXT' not found!`);
  return glGetUniformOffsetEXT_Z_Z(program, location);
}
alias glGetUniformSubroutineuiv = glGetUniformSubroutineuiv_Z_Z;
__gshared glGetUniformSubroutineuiv_Z_Z = function void (GLenum shadertype, GLint location, GLuint *params) { glGetUniformSubroutineuiv_Z_Z_loader(shadertype, location, params); };
private void glGetUniformSubroutineuiv_Z_Z_loader (GLenum shadertype, GLint location, GLuint *params) {
  *cast(void**)&glGetUniformSubroutineuiv_Z_Z = glbindGetProcAddress(`glGetUniformSubroutineuiv`);
  if (*cast(void**)&glGetUniformSubroutineuiv_Z_Z is null) assert(0, `OpenGL function 'glGetUniformSubroutineuiv' not found!`);
  glGetUniformSubroutineuiv_Z_Z(shadertype, location, params);
}
alias glGetUniformdv = glGetUniformdv_Z_Z;
__gshared glGetUniformdv_Z_Z = function void (GLuint program, GLint location, GLdouble *params) { glGetUniformdv_Z_Z_loader(program, location, params); };
private void glGetUniformdv_Z_Z_loader (GLuint program, GLint location, GLdouble *params) {
  *cast(void**)&glGetUniformdv_Z_Z = glbindGetProcAddress(`glGetUniformdv`);
  if (*cast(void**)&glGetUniformdv_Z_Z is null) assert(0, `OpenGL function 'glGetUniformdv' not found!`);
  glGetUniformdv_Z_Z(program, location, params);
}
alias glGetUniformfv = glGetUniformfv_Z_Z;
__gshared glGetUniformfv_Z_Z = function void (GLuint program, GLint location, GLfloat *params) { glGetUniformfv_Z_Z_loader(program, location, params); };
private void glGetUniformfv_Z_Z_loader (GLuint program, GLint location, GLfloat *params) {
  *cast(void**)&glGetUniformfv_Z_Z = glbindGetProcAddress(`glGetUniformfv`);
  if (*cast(void**)&glGetUniformfv_Z_Z is null) assert(0, `OpenGL function 'glGetUniformfv' not found!`);
  glGetUniformfv_Z_Z(program, location, params);
}
alias glGetUniformfvARB = glGetUniformfvARB_Z_Z;
__gshared glGetUniformfvARB_Z_Z = function void (GLhandleARB programObj, GLint location, GLfloat *params) { glGetUniformfvARB_Z_Z_loader(programObj, location, params); };
private void glGetUniformfvARB_Z_Z_loader (GLhandleARB programObj, GLint location, GLfloat *params) {
  *cast(void**)&glGetUniformfvARB_Z_Z = glbindGetProcAddress(`glGetUniformfvARB`);
  if (*cast(void**)&glGetUniformfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetUniformfvARB' not found!`);
  glGetUniformfvARB_Z_Z(programObj, location, params);
}
alias glGetUniformi64vARB = glGetUniformi64vARB_Z_Z;
__gshared glGetUniformi64vARB_Z_Z = function void (GLuint program, GLint location, GLint64 *params) { glGetUniformi64vARB_Z_Z_loader(program, location, params); };
private void glGetUniformi64vARB_Z_Z_loader (GLuint program, GLint location, GLint64 *params) {
  *cast(void**)&glGetUniformi64vARB_Z_Z = glbindGetProcAddress(`glGetUniformi64vARB`);
  if (*cast(void**)&glGetUniformi64vARB_Z_Z is null) assert(0, `OpenGL function 'glGetUniformi64vARB' not found!`);
  glGetUniformi64vARB_Z_Z(program, location, params);
}
alias glGetUniformi64vNV = glGetUniformi64vNV_Z_Z;
__gshared glGetUniformi64vNV_Z_Z = function void (GLuint program, GLint location, GLint64EXT *params) { glGetUniformi64vNV_Z_Z_loader(program, location, params); };
private void glGetUniformi64vNV_Z_Z_loader (GLuint program, GLint location, GLint64EXT *params) {
  *cast(void**)&glGetUniformi64vNV_Z_Z = glbindGetProcAddress(`glGetUniformi64vNV`);
  if (*cast(void**)&glGetUniformi64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetUniformi64vNV' not found!`);
  glGetUniformi64vNV_Z_Z(program, location, params);
}
alias glGetUniformiv = glGetUniformiv_Z_Z;
__gshared glGetUniformiv_Z_Z = function void (GLuint program, GLint location, GLint *params) { glGetUniformiv_Z_Z_loader(program, location, params); };
private void glGetUniformiv_Z_Z_loader (GLuint program, GLint location, GLint *params) {
  *cast(void**)&glGetUniformiv_Z_Z = glbindGetProcAddress(`glGetUniformiv`);
  if (*cast(void**)&glGetUniformiv_Z_Z is null) assert(0, `OpenGL function 'glGetUniformiv' not found!`);
  glGetUniformiv_Z_Z(program, location, params);
}
alias glGetUniformivARB = glGetUniformivARB_Z_Z;
__gshared glGetUniformivARB_Z_Z = function void (GLhandleARB programObj, GLint location, GLint *params) { glGetUniformivARB_Z_Z_loader(programObj, location, params); };
private void glGetUniformivARB_Z_Z_loader (GLhandleARB programObj, GLint location, GLint *params) {
  *cast(void**)&glGetUniformivARB_Z_Z = glbindGetProcAddress(`glGetUniformivARB`);
  if (*cast(void**)&glGetUniformivARB_Z_Z is null) assert(0, `OpenGL function 'glGetUniformivARB' not found!`);
  glGetUniformivARB_Z_Z(programObj, location, params);
}
alias glGetUniformui64vARB = glGetUniformui64vARB_Z_Z;
__gshared glGetUniformui64vARB_Z_Z = function void (GLuint program, GLint location, GLuint64 *params) { glGetUniformui64vARB_Z_Z_loader(program, location, params); };
private void glGetUniformui64vARB_Z_Z_loader (GLuint program, GLint location, GLuint64 *params) {
  *cast(void**)&glGetUniformui64vARB_Z_Z = glbindGetProcAddress(`glGetUniformui64vARB`);
  if (*cast(void**)&glGetUniformui64vARB_Z_Z is null) assert(0, `OpenGL function 'glGetUniformui64vARB' not found!`);
  glGetUniformui64vARB_Z_Z(program, location, params);
}
alias glGetUniformui64vNV = glGetUniformui64vNV_Z_Z;
__gshared glGetUniformui64vNV_Z_Z = function void (GLuint program, GLint location, GLuint64EXT *params) { glGetUniformui64vNV_Z_Z_loader(program, location, params); };
private void glGetUniformui64vNV_Z_Z_loader (GLuint program, GLint location, GLuint64EXT *params) {
  *cast(void**)&glGetUniformui64vNV_Z_Z = glbindGetProcAddress(`glGetUniformui64vNV`);
  if (*cast(void**)&glGetUniformui64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetUniformui64vNV' not found!`);
  glGetUniformui64vNV_Z_Z(program, location, params);
}
alias glGetUniformuiv = glGetUniformuiv_Z_Z;
__gshared glGetUniformuiv_Z_Z = function void (GLuint program, GLint location, GLuint *params) { glGetUniformuiv_Z_Z_loader(program, location, params); };
private void glGetUniformuiv_Z_Z_loader (GLuint program, GLint location, GLuint *params) {
  *cast(void**)&glGetUniformuiv_Z_Z = glbindGetProcAddress(`glGetUniformuiv`);
  if (*cast(void**)&glGetUniformuiv_Z_Z is null) assert(0, `OpenGL function 'glGetUniformuiv' not found!`);
  glGetUniformuiv_Z_Z(program, location, params);
}
alias glGetUniformuivEXT = glGetUniformuivEXT_Z_Z;
__gshared glGetUniformuivEXT_Z_Z = function void (GLuint program, GLint location, GLuint *params) { glGetUniformuivEXT_Z_Z_loader(program, location, params); };
private void glGetUniformuivEXT_Z_Z_loader (GLuint program, GLint location, GLuint *params) {
  *cast(void**)&glGetUniformuivEXT_Z_Z = glbindGetProcAddress(`glGetUniformuivEXT`);
  if (*cast(void**)&glGetUniformuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetUniformuivEXT' not found!`);
  glGetUniformuivEXT_Z_Z(program, location, params);
}
alias glGetUnsignedBytevEXT = glGetUnsignedBytevEXT_Z_Z;
__gshared glGetUnsignedBytevEXT_Z_Z = function void (GLenum pname, GLubyte *data) { glGetUnsignedBytevEXT_Z_Z_loader(pname, data); };
private void glGetUnsignedBytevEXT_Z_Z_loader (GLenum pname, GLubyte *data) {
  *cast(void**)&glGetUnsignedBytevEXT_Z_Z = glbindGetProcAddress(`glGetUnsignedBytevEXT`);
  if (*cast(void**)&glGetUnsignedBytevEXT_Z_Z is null) assert(0, `OpenGL function 'glGetUnsignedBytevEXT' not found!`);
  glGetUnsignedBytevEXT_Z_Z(pname, data);
}
alias glGetUnsignedBytei_vEXT = glGetUnsignedBytei_vEXT_Z_Z;
__gshared glGetUnsignedBytei_vEXT_Z_Z = function void (GLenum target, GLuint index, GLubyte *data) { glGetUnsignedBytei_vEXT_Z_Z_loader(target, index, data); };
private void glGetUnsignedBytei_vEXT_Z_Z_loader (GLenum target, GLuint index, GLubyte *data) {
  *cast(void**)&glGetUnsignedBytei_vEXT_Z_Z = glbindGetProcAddress(`glGetUnsignedBytei_vEXT`);
  if (*cast(void**)&glGetUnsignedBytei_vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetUnsignedBytei_vEXT' not found!`);
  glGetUnsignedBytei_vEXT_Z_Z(target, index, data);
}
alias glGetVariantArrayObjectfvATI = glGetVariantArrayObjectfvATI_Z_Z;
__gshared glGetVariantArrayObjectfvATI_Z_Z = function void (GLuint id, GLenum pname, GLfloat *params) { glGetVariantArrayObjectfvATI_Z_Z_loader(id, pname, params); };
private void glGetVariantArrayObjectfvATI_Z_Z_loader (GLuint id, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetVariantArrayObjectfvATI_Z_Z = glbindGetProcAddress(`glGetVariantArrayObjectfvATI`);
  if (*cast(void**)&glGetVariantArrayObjectfvATI_Z_Z is null) assert(0, `OpenGL function 'glGetVariantArrayObjectfvATI' not found!`);
  glGetVariantArrayObjectfvATI_Z_Z(id, pname, params);
}
alias glGetVariantArrayObjectivATI = glGetVariantArrayObjectivATI_Z_Z;
__gshared glGetVariantArrayObjectivATI_Z_Z = function void (GLuint id, GLenum pname, GLint *params) { glGetVariantArrayObjectivATI_Z_Z_loader(id, pname, params); };
private void glGetVariantArrayObjectivATI_Z_Z_loader (GLuint id, GLenum pname, GLint *params) {
  *cast(void**)&glGetVariantArrayObjectivATI_Z_Z = glbindGetProcAddress(`glGetVariantArrayObjectivATI`);
  if (*cast(void**)&glGetVariantArrayObjectivATI_Z_Z is null) assert(0, `OpenGL function 'glGetVariantArrayObjectivATI' not found!`);
  glGetVariantArrayObjectivATI_Z_Z(id, pname, params);
}
alias glGetVariantBooleanvEXT = glGetVariantBooleanvEXT_Z_Z;
__gshared glGetVariantBooleanvEXT_Z_Z = function void (GLuint id, GLenum value, GLboolean *data) { glGetVariantBooleanvEXT_Z_Z_loader(id, value, data); };
private void glGetVariantBooleanvEXT_Z_Z_loader (GLuint id, GLenum value, GLboolean *data) {
  *cast(void**)&glGetVariantBooleanvEXT_Z_Z = glbindGetProcAddress(`glGetVariantBooleanvEXT`);
  if (*cast(void**)&glGetVariantBooleanvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVariantBooleanvEXT' not found!`);
  glGetVariantBooleanvEXT_Z_Z(id, value, data);
}
alias glGetVariantFloatvEXT = glGetVariantFloatvEXT_Z_Z;
__gshared glGetVariantFloatvEXT_Z_Z = function void (GLuint id, GLenum value, GLfloat *data) { glGetVariantFloatvEXT_Z_Z_loader(id, value, data); };
private void glGetVariantFloatvEXT_Z_Z_loader (GLuint id, GLenum value, GLfloat *data) {
  *cast(void**)&glGetVariantFloatvEXT_Z_Z = glbindGetProcAddress(`glGetVariantFloatvEXT`);
  if (*cast(void**)&glGetVariantFloatvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVariantFloatvEXT' not found!`);
  glGetVariantFloatvEXT_Z_Z(id, value, data);
}
alias glGetVariantIntegervEXT = glGetVariantIntegervEXT_Z_Z;
__gshared glGetVariantIntegervEXT_Z_Z = function void (GLuint id, GLenum value, GLint *data) { glGetVariantIntegervEXT_Z_Z_loader(id, value, data); };
private void glGetVariantIntegervEXT_Z_Z_loader (GLuint id, GLenum value, GLint *data) {
  *cast(void**)&glGetVariantIntegervEXT_Z_Z = glbindGetProcAddress(`glGetVariantIntegervEXT`);
  if (*cast(void**)&glGetVariantIntegervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVariantIntegervEXT' not found!`);
  glGetVariantIntegervEXT_Z_Z(id, value, data);
}
alias glGetVariantPointervEXT = glGetVariantPointervEXT_Z_Z;
__gshared glGetVariantPointervEXT_Z_Z = function void (GLuint id, GLenum value, void **data) { glGetVariantPointervEXT_Z_Z_loader(id, value, data); };
private void glGetVariantPointervEXT_Z_Z_loader (GLuint id, GLenum value, void **data) {
  *cast(void**)&glGetVariantPointervEXT_Z_Z = glbindGetProcAddress(`glGetVariantPointervEXT`);
  if (*cast(void**)&glGetVariantPointervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVariantPointervEXT' not found!`);
  glGetVariantPointervEXT_Z_Z(id, value, data);
}
alias glGetVaryingLocationNV = glGetVaryingLocationNV_Z_Z;
__gshared glGetVaryingLocationNV_Z_Z = function GLint (GLuint program, const(GLchar)* name) { return glGetVaryingLocationNV_Z_Z_loader(program, name); };
private GLint glGetVaryingLocationNV_Z_Z_loader (GLuint program, const(GLchar)* name) {
  *cast(void**)&glGetVaryingLocationNV_Z_Z = glbindGetProcAddress(`glGetVaryingLocationNV`);
  if (*cast(void**)&glGetVaryingLocationNV_Z_Z is null) assert(0, `OpenGL function 'glGetVaryingLocationNV' not found!`);
  return glGetVaryingLocationNV_Z_Z(program, name);
}
alias glGetVertexArrayIndexed64iv = glGetVertexArrayIndexed64iv_Z_Z;
__gshared glGetVertexArrayIndexed64iv_Z_Z = function void (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) { glGetVertexArrayIndexed64iv_Z_Z_loader(vaobj, index, pname, param); };
private void glGetVertexArrayIndexed64iv_Z_Z_loader (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) {
  *cast(void**)&glGetVertexArrayIndexed64iv_Z_Z = glbindGetProcAddress(`glGetVertexArrayIndexed64iv`);
  if (*cast(void**)&glGetVertexArrayIndexed64iv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIndexed64iv' not found!`);
  glGetVertexArrayIndexed64iv_Z_Z(vaobj, index, pname, param);
}
alias glGetVertexArrayIndexediv = glGetVertexArrayIndexediv_Z_Z;
__gshared glGetVertexArrayIndexediv_Z_Z = function void (GLuint vaobj, GLuint index, GLenum pname, GLint *param) { glGetVertexArrayIndexediv_Z_Z_loader(vaobj, index, pname, param); };
private void glGetVertexArrayIndexediv_Z_Z_loader (GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
  *cast(void**)&glGetVertexArrayIndexediv_Z_Z = glbindGetProcAddress(`glGetVertexArrayIndexediv`);
  if (*cast(void**)&glGetVertexArrayIndexediv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIndexediv' not found!`);
  glGetVertexArrayIndexediv_Z_Z(vaobj, index, pname, param);
}
alias glGetVertexArrayIntegeri_vEXT = glGetVertexArrayIntegeri_vEXT_Z_Z;
__gshared glGetVertexArrayIntegeri_vEXT_Z_Z = function void (GLuint vaobj, GLuint index, GLenum pname, GLint *param) { glGetVertexArrayIntegeri_vEXT_Z_Z_loader(vaobj, index, pname, param); };
private void glGetVertexArrayIntegeri_vEXT_Z_Z_loader (GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
  *cast(void**)&glGetVertexArrayIntegeri_vEXT_Z_Z = glbindGetProcAddress(`glGetVertexArrayIntegeri_vEXT`);
  if (*cast(void**)&glGetVertexArrayIntegeri_vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIntegeri_vEXT' not found!`);
  glGetVertexArrayIntegeri_vEXT_Z_Z(vaobj, index, pname, param);
}
alias glGetVertexArrayIntegervEXT = glGetVertexArrayIntegervEXT_Z_Z;
__gshared glGetVertexArrayIntegervEXT_Z_Z = function void (GLuint vaobj, GLenum pname, GLint *param) { glGetVertexArrayIntegervEXT_Z_Z_loader(vaobj, pname, param); };
private void glGetVertexArrayIntegervEXT_Z_Z_loader (GLuint vaobj, GLenum pname, GLint *param) {
  *cast(void**)&glGetVertexArrayIntegervEXT_Z_Z = glbindGetProcAddress(`glGetVertexArrayIntegervEXT`);
  if (*cast(void**)&glGetVertexArrayIntegervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVertexArrayIntegervEXT' not found!`);
  glGetVertexArrayIntegervEXT_Z_Z(vaobj, pname, param);
}
alias glGetVertexArrayPointeri_vEXT = glGetVertexArrayPointeri_vEXT_Z_Z;
__gshared glGetVertexArrayPointeri_vEXT_Z_Z = function void (GLuint vaobj, GLuint index, GLenum pname, void **param) { glGetVertexArrayPointeri_vEXT_Z_Z_loader(vaobj, index, pname, param); };
private void glGetVertexArrayPointeri_vEXT_Z_Z_loader (GLuint vaobj, GLuint index, GLenum pname, void **param) {
  *cast(void**)&glGetVertexArrayPointeri_vEXT_Z_Z = glbindGetProcAddress(`glGetVertexArrayPointeri_vEXT`);
  if (*cast(void**)&glGetVertexArrayPointeri_vEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVertexArrayPointeri_vEXT' not found!`);
  glGetVertexArrayPointeri_vEXT_Z_Z(vaobj, index, pname, param);
}
alias glGetVertexArrayPointervEXT = glGetVertexArrayPointervEXT_Z_Z;
__gshared glGetVertexArrayPointervEXT_Z_Z = function void (GLuint vaobj, GLenum pname, void **param) { glGetVertexArrayPointervEXT_Z_Z_loader(vaobj, pname, param); };
private void glGetVertexArrayPointervEXT_Z_Z_loader (GLuint vaobj, GLenum pname, void **param) {
  *cast(void**)&glGetVertexArrayPointervEXT_Z_Z = glbindGetProcAddress(`glGetVertexArrayPointervEXT`);
  if (*cast(void**)&glGetVertexArrayPointervEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVertexArrayPointervEXT' not found!`);
  glGetVertexArrayPointervEXT_Z_Z(vaobj, pname, param);
}
alias glGetVertexArrayiv = glGetVertexArrayiv_Z_Z;
__gshared glGetVertexArrayiv_Z_Z = function void (GLuint vaobj, GLenum pname, GLint *param) { glGetVertexArrayiv_Z_Z_loader(vaobj, pname, param); };
private void glGetVertexArrayiv_Z_Z_loader (GLuint vaobj, GLenum pname, GLint *param) {
  *cast(void**)&glGetVertexArrayiv_Z_Z = glbindGetProcAddress(`glGetVertexArrayiv`);
  if (*cast(void**)&glGetVertexArrayiv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexArrayiv' not found!`);
  glGetVertexArrayiv_Z_Z(vaobj, pname, param);
}
alias glGetVertexAttribArrayObjectfvATI = glGetVertexAttribArrayObjectfvATI_Z_Z;
__gshared glGetVertexAttribArrayObjectfvATI_Z_Z = function void (GLuint index, GLenum pname, GLfloat *params) { glGetVertexAttribArrayObjectfvATI_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribArrayObjectfvATI_Z_Z_loader (GLuint index, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetVertexAttribArrayObjectfvATI_Z_Z = glbindGetProcAddress(`glGetVertexAttribArrayObjectfvATI`);
  if (*cast(void**)&glGetVertexAttribArrayObjectfvATI_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectfvATI' not found!`);
  glGetVertexAttribArrayObjectfvATI_Z_Z(index, pname, params);
}
alias glGetVertexAttribArrayObjectivATI = glGetVertexAttribArrayObjectivATI_Z_Z;
__gshared glGetVertexAttribArrayObjectivATI_Z_Z = function void (GLuint index, GLenum pname, GLint *params) { glGetVertexAttribArrayObjectivATI_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribArrayObjectivATI_Z_Z_loader (GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetVertexAttribArrayObjectivATI_Z_Z = glbindGetProcAddress(`glGetVertexAttribArrayObjectivATI`);
  if (*cast(void**)&glGetVertexAttribArrayObjectivATI_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectivATI' not found!`);
  glGetVertexAttribArrayObjectivATI_Z_Z(index, pname, params);
}
alias glGetVertexAttribIiv = glGetVertexAttribIiv_Z_Z;
__gshared glGetVertexAttribIiv_Z_Z = function void (GLuint index, GLenum pname, GLint *params) { glGetVertexAttribIiv_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribIiv_Z_Z_loader (GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetVertexAttribIiv_Z_Z = glbindGetProcAddress(`glGetVertexAttribIiv`);
  if (*cast(void**)&glGetVertexAttribIiv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIiv' not found!`);
  glGetVertexAttribIiv_Z_Z(index, pname, params);
}
alias glGetVertexAttribIivEXT = glGetVertexAttribIivEXT_Z_Z;
__gshared glGetVertexAttribIivEXT_Z_Z = function void (GLuint index, GLenum pname, GLint *params) { glGetVertexAttribIivEXT_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribIivEXT_Z_Z_loader (GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetVertexAttribIivEXT_Z_Z = glbindGetProcAddress(`glGetVertexAttribIivEXT`);
  if (*cast(void**)&glGetVertexAttribIivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIivEXT' not found!`);
  glGetVertexAttribIivEXT_Z_Z(index, pname, params);
}
alias glGetVertexAttribIuiv = glGetVertexAttribIuiv_Z_Z;
__gshared glGetVertexAttribIuiv_Z_Z = function void (GLuint index, GLenum pname, GLuint *params) { glGetVertexAttribIuiv_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribIuiv_Z_Z_loader (GLuint index, GLenum pname, GLuint *params) {
  *cast(void**)&glGetVertexAttribIuiv_Z_Z = glbindGetProcAddress(`glGetVertexAttribIuiv`);
  if (*cast(void**)&glGetVertexAttribIuiv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIuiv' not found!`);
  glGetVertexAttribIuiv_Z_Z(index, pname, params);
}
alias glGetVertexAttribIuivEXT = glGetVertexAttribIuivEXT_Z_Z;
__gshared glGetVertexAttribIuivEXT_Z_Z = function void (GLuint index, GLenum pname, GLuint *params) { glGetVertexAttribIuivEXT_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribIuivEXT_Z_Z_loader (GLuint index, GLenum pname, GLuint *params) {
  *cast(void**)&glGetVertexAttribIuivEXT_Z_Z = glbindGetProcAddress(`glGetVertexAttribIuivEXT`);
  if (*cast(void**)&glGetVertexAttribIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribIuivEXT' not found!`);
  glGetVertexAttribIuivEXT_Z_Z(index, pname, params);
}
alias glGetVertexAttribLdv = glGetVertexAttribLdv_Z_Z;
__gshared glGetVertexAttribLdv_Z_Z = function void (GLuint index, GLenum pname, GLdouble *params) { glGetVertexAttribLdv_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribLdv_Z_Z_loader (GLuint index, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetVertexAttribLdv_Z_Z = glbindGetProcAddress(`glGetVertexAttribLdv`);
  if (*cast(void**)&glGetVertexAttribLdv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLdv' not found!`);
  glGetVertexAttribLdv_Z_Z(index, pname, params);
}
alias glGetVertexAttribLdvEXT = glGetVertexAttribLdvEXT_Z_Z;
__gshared glGetVertexAttribLdvEXT_Z_Z = function void (GLuint index, GLenum pname, GLdouble *params) { glGetVertexAttribLdvEXT_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribLdvEXT_Z_Z_loader (GLuint index, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetVertexAttribLdvEXT_Z_Z = glbindGetProcAddress(`glGetVertexAttribLdvEXT`);
  if (*cast(void**)&glGetVertexAttribLdvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLdvEXT' not found!`);
  glGetVertexAttribLdvEXT_Z_Z(index, pname, params);
}
alias glGetVertexAttribLi64vNV = glGetVertexAttribLi64vNV_Z_Z;
__gshared glGetVertexAttribLi64vNV_Z_Z = function void (GLuint index, GLenum pname, GLint64EXT *params) { glGetVertexAttribLi64vNV_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribLi64vNV_Z_Z_loader (GLuint index, GLenum pname, GLint64EXT *params) {
  *cast(void**)&glGetVertexAttribLi64vNV_Z_Z = glbindGetProcAddress(`glGetVertexAttribLi64vNV`);
  if (*cast(void**)&glGetVertexAttribLi64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLi64vNV' not found!`);
  glGetVertexAttribLi64vNV_Z_Z(index, pname, params);
}
alias glGetVertexAttribLui64vARB = glGetVertexAttribLui64vARB_Z_Z;
__gshared glGetVertexAttribLui64vARB_Z_Z = function void (GLuint index, GLenum pname, GLuint64EXT *params) { glGetVertexAttribLui64vARB_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribLui64vARB_Z_Z_loader (GLuint index, GLenum pname, GLuint64EXT *params) {
  *cast(void**)&glGetVertexAttribLui64vARB_Z_Z = glbindGetProcAddress(`glGetVertexAttribLui64vARB`);
  if (*cast(void**)&glGetVertexAttribLui64vARB_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vARB' not found!`);
  glGetVertexAttribLui64vARB_Z_Z(index, pname, params);
}
alias glGetVertexAttribLui64vNV = glGetVertexAttribLui64vNV_Z_Z;
__gshared glGetVertexAttribLui64vNV_Z_Z = function void (GLuint index, GLenum pname, GLuint64EXT *params) { glGetVertexAttribLui64vNV_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribLui64vNV_Z_Z_loader (GLuint index, GLenum pname, GLuint64EXT *params) {
  *cast(void**)&glGetVertexAttribLui64vNV_Z_Z = glbindGetProcAddress(`glGetVertexAttribLui64vNV`);
  if (*cast(void**)&glGetVertexAttribLui64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vNV' not found!`);
  glGetVertexAttribLui64vNV_Z_Z(index, pname, params);
}
alias glGetVertexAttribPointerv = glGetVertexAttribPointerv_Z_Z;
__gshared glGetVertexAttribPointerv_Z_Z = function void (GLuint index, GLenum pname, void **pointer) { glGetVertexAttribPointerv_Z_Z_loader(index, pname, pointer); };
private void glGetVertexAttribPointerv_Z_Z_loader (GLuint index, GLenum pname, void **pointer) {
  *cast(void**)&glGetVertexAttribPointerv_Z_Z = glbindGetProcAddress(`glGetVertexAttribPointerv`);
  if (*cast(void**)&glGetVertexAttribPointerv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribPointerv' not found!`);
  glGetVertexAttribPointerv_Z_Z(index, pname, pointer);
}
alias glGetVertexAttribPointervARB = glGetVertexAttribPointervARB_Z_Z;
__gshared glGetVertexAttribPointervARB_Z_Z = function void (GLuint index, GLenum pname, void **pointer) { glGetVertexAttribPointervARB_Z_Z_loader(index, pname, pointer); };
private void glGetVertexAttribPointervARB_Z_Z_loader (GLuint index, GLenum pname, void **pointer) {
  *cast(void**)&glGetVertexAttribPointervARB_Z_Z = glbindGetProcAddress(`glGetVertexAttribPointervARB`);
  if (*cast(void**)&glGetVertexAttribPointervARB_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribPointervARB' not found!`);
  glGetVertexAttribPointervARB_Z_Z(index, pname, pointer);
}
alias glGetVertexAttribPointervNV = glGetVertexAttribPointervNV_Z_Z;
__gshared glGetVertexAttribPointervNV_Z_Z = function void (GLuint index, GLenum pname, void **pointer) { glGetVertexAttribPointervNV_Z_Z_loader(index, pname, pointer); };
private void glGetVertexAttribPointervNV_Z_Z_loader (GLuint index, GLenum pname, void **pointer) {
  *cast(void**)&glGetVertexAttribPointervNV_Z_Z = glbindGetProcAddress(`glGetVertexAttribPointervNV`);
  if (*cast(void**)&glGetVertexAttribPointervNV_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribPointervNV' not found!`);
  glGetVertexAttribPointervNV_Z_Z(index, pname, pointer);
}
alias glGetVertexAttribdv = glGetVertexAttribdv_Z_Z;
__gshared glGetVertexAttribdv_Z_Z = function void (GLuint index, GLenum pname, GLdouble *params) { glGetVertexAttribdv_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribdv_Z_Z_loader (GLuint index, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetVertexAttribdv_Z_Z = glbindGetProcAddress(`glGetVertexAttribdv`);
  if (*cast(void**)&glGetVertexAttribdv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribdv' not found!`);
  glGetVertexAttribdv_Z_Z(index, pname, params);
}
alias glGetVertexAttribdvARB = glGetVertexAttribdvARB_Z_Z;
__gshared glGetVertexAttribdvARB_Z_Z = function void (GLuint index, GLenum pname, GLdouble *params) { glGetVertexAttribdvARB_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribdvARB_Z_Z_loader (GLuint index, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetVertexAttribdvARB_Z_Z = glbindGetProcAddress(`glGetVertexAttribdvARB`);
  if (*cast(void**)&glGetVertexAttribdvARB_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribdvARB' not found!`);
  glGetVertexAttribdvARB_Z_Z(index, pname, params);
}
alias glGetVertexAttribdvNV = glGetVertexAttribdvNV_Z_Z;
__gshared glGetVertexAttribdvNV_Z_Z = function void (GLuint index, GLenum pname, GLdouble *params) { glGetVertexAttribdvNV_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribdvNV_Z_Z_loader (GLuint index, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetVertexAttribdvNV_Z_Z = glbindGetProcAddress(`glGetVertexAttribdvNV`);
  if (*cast(void**)&glGetVertexAttribdvNV_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribdvNV' not found!`);
  glGetVertexAttribdvNV_Z_Z(index, pname, params);
}
alias glGetVertexAttribfv = glGetVertexAttribfv_Z_Z;
__gshared glGetVertexAttribfv_Z_Z = function void (GLuint index, GLenum pname, GLfloat *params) { glGetVertexAttribfv_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribfv_Z_Z_loader (GLuint index, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetVertexAttribfv_Z_Z = glbindGetProcAddress(`glGetVertexAttribfv`);
  if (*cast(void**)&glGetVertexAttribfv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribfv' not found!`);
  glGetVertexAttribfv_Z_Z(index, pname, params);
}
alias glGetVertexAttribfvARB = glGetVertexAttribfvARB_Z_Z;
__gshared glGetVertexAttribfvARB_Z_Z = function void (GLuint index, GLenum pname, GLfloat *params) { glGetVertexAttribfvARB_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribfvARB_Z_Z_loader (GLuint index, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetVertexAttribfvARB_Z_Z = glbindGetProcAddress(`glGetVertexAttribfvARB`);
  if (*cast(void**)&glGetVertexAttribfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribfvARB' not found!`);
  glGetVertexAttribfvARB_Z_Z(index, pname, params);
}
alias glGetVertexAttribfvNV = glGetVertexAttribfvNV_Z_Z;
__gshared glGetVertexAttribfvNV_Z_Z = function void (GLuint index, GLenum pname, GLfloat *params) { glGetVertexAttribfvNV_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribfvNV_Z_Z_loader (GLuint index, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetVertexAttribfvNV_Z_Z = glbindGetProcAddress(`glGetVertexAttribfvNV`);
  if (*cast(void**)&glGetVertexAttribfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribfvNV' not found!`);
  glGetVertexAttribfvNV_Z_Z(index, pname, params);
}
alias glGetVertexAttribiv = glGetVertexAttribiv_Z_Z;
__gshared glGetVertexAttribiv_Z_Z = function void (GLuint index, GLenum pname, GLint *params) { glGetVertexAttribiv_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribiv_Z_Z_loader (GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetVertexAttribiv_Z_Z = glbindGetProcAddress(`glGetVertexAttribiv`);
  if (*cast(void**)&glGetVertexAttribiv_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribiv' not found!`);
  glGetVertexAttribiv_Z_Z(index, pname, params);
}
alias glGetVertexAttribivARB = glGetVertexAttribivARB_Z_Z;
__gshared glGetVertexAttribivARB_Z_Z = function void (GLuint index, GLenum pname, GLint *params) { glGetVertexAttribivARB_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribivARB_Z_Z_loader (GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetVertexAttribivARB_Z_Z = glbindGetProcAddress(`glGetVertexAttribivARB`);
  if (*cast(void**)&glGetVertexAttribivARB_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribivARB' not found!`);
  glGetVertexAttribivARB_Z_Z(index, pname, params);
}
alias glGetVertexAttribivNV = glGetVertexAttribivNV_Z_Z;
__gshared glGetVertexAttribivNV_Z_Z = function void (GLuint index, GLenum pname, GLint *params) { glGetVertexAttribivNV_Z_Z_loader(index, pname, params); };
private void glGetVertexAttribivNV_Z_Z_loader (GLuint index, GLenum pname, GLint *params) {
  *cast(void**)&glGetVertexAttribivNV_Z_Z = glbindGetProcAddress(`glGetVertexAttribivNV`);
  if (*cast(void**)&glGetVertexAttribivNV_Z_Z is null) assert(0, `OpenGL function 'glGetVertexAttribivNV' not found!`);
  glGetVertexAttribivNV_Z_Z(index, pname, params);
}
alias glGetVideoCaptureStreamdvNV = glGetVideoCaptureStreamdvNV_Z_Z;
__gshared glGetVideoCaptureStreamdvNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) { glGetVideoCaptureStreamdvNV_Z_Z_loader(video_capture_slot, stream, pname, params); };
private void glGetVideoCaptureStreamdvNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) {
  *cast(void**)&glGetVideoCaptureStreamdvNV_Z_Z = glbindGetProcAddress(`glGetVideoCaptureStreamdvNV`);
  if (*cast(void**)&glGetVideoCaptureStreamdvNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamdvNV' not found!`);
  glGetVideoCaptureStreamdvNV_Z_Z(video_capture_slot, stream, pname, params);
}
alias glGetVideoCaptureStreamfvNV = glGetVideoCaptureStreamfvNV_Z_Z;
__gshared glGetVideoCaptureStreamfvNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) { glGetVideoCaptureStreamfvNV_Z_Z_loader(video_capture_slot, stream, pname, params); };
private void glGetVideoCaptureStreamfvNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) {
  *cast(void**)&glGetVideoCaptureStreamfvNV_Z_Z = glbindGetProcAddress(`glGetVideoCaptureStreamfvNV`);
  if (*cast(void**)&glGetVideoCaptureStreamfvNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamfvNV' not found!`);
  glGetVideoCaptureStreamfvNV_Z_Z(video_capture_slot, stream, pname, params);
}
alias glGetVideoCaptureStreamivNV = glGetVideoCaptureStreamivNV_Z_Z;
__gshared glGetVideoCaptureStreamivNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) { glGetVideoCaptureStreamivNV_Z_Z_loader(video_capture_slot, stream, pname, params); };
private void glGetVideoCaptureStreamivNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) {
  *cast(void**)&glGetVideoCaptureStreamivNV_Z_Z = glbindGetProcAddress(`glGetVideoCaptureStreamivNV`);
  if (*cast(void**)&glGetVideoCaptureStreamivNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamivNV' not found!`);
  glGetVideoCaptureStreamivNV_Z_Z(video_capture_slot, stream, pname, params);
}
alias glGetVideoCaptureivNV = glGetVideoCaptureivNV_Z_Z;
__gshared glGetVideoCaptureivNV_Z_Z = function void (GLuint video_capture_slot, GLenum pname, GLint *params) { glGetVideoCaptureivNV_Z_Z_loader(video_capture_slot, pname, params); };
private void glGetVideoCaptureivNV_Z_Z_loader (GLuint video_capture_slot, GLenum pname, GLint *params) {
  *cast(void**)&glGetVideoCaptureivNV_Z_Z = glbindGetProcAddress(`glGetVideoCaptureivNV`);
  if (*cast(void**)&glGetVideoCaptureivNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideoCaptureivNV' not found!`);
  glGetVideoCaptureivNV_Z_Z(video_capture_slot, pname, params);
}
alias glGetVideoi64vNV = glGetVideoi64vNV_Z_Z;
__gshared glGetVideoi64vNV_Z_Z = function void (GLuint video_slot, GLenum pname, GLint64EXT *params) { glGetVideoi64vNV_Z_Z_loader(video_slot, pname, params); };
private void glGetVideoi64vNV_Z_Z_loader (GLuint video_slot, GLenum pname, GLint64EXT *params) {
  *cast(void**)&glGetVideoi64vNV_Z_Z = glbindGetProcAddress(`glGetVideoi64vNV`);
  if (*cast(void**)&glGetVideoi64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideoi64vNV' not found!`);
  glGetVideoi64vNV_Z_Z(video_slot, pname, params);
}
alias glGetVideoivNV = glGetVideoivNV_Z_Z;
__gshared glGetVideoivNV_Z_Z = function void (GLuint video_slot, GLenum pname, GLint *params) { glGetVideoivNV_Z_Z_loader(video_slot, pname, params); };
private void glGetVideoivNV_Z_Z_loader (GLuint video_slot, GLenum pname, GLint *params) {
  *cast(void**)&glGetVideoivNV_Z_Z = glbindGetProcAddress(`glGetVideoivNV`);
  if (*cast(void**)&glGetVideoivNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideoivNV' not found!`);
  glGetVideoivNV_Z_Z(video_slot, pname, params);
}
alias glGetVideoui64vNV = glGetVideoui64vNV_Z_Z;
__gshared glGetVideoui64vNV_Z_Z = function void (GLuint video_slot, GLenum pname, GLuint64EXT *params) { glGetVideoui64vNV_Z_Z_loader(video_slot, pname, params); };
private void glGetVideoui64vNV_Z_Z_loader (GLuint video_slot, GLenum pname, GLuint64EXT *params) {
  *cast(void**)&glGetVideoui64vNV_Z_Z = glbindGetProcAddress(`glGetVideoui64vNV`);
  if (*cast(void**)&glGetVideoui64vNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideoui64vNV' not found!`);
  glGetVideoui64vNV_Z_Z(video_slot, pname, params);
}
alias glGetVideouivNV = glGetVideouivNV_Z_Z;
__gshared glGetVideouivNV_Z_Z = function void (GLuint video_slot, GLenum pname, GLuint *params) { glGetVideouivNV_Z_Z_loader(video_slot, pname, params); };
private void glGetVideouivNV_Z_Z_loader (GLuint video_slot, GLenum pname, GLuint *params) {
  *cast(void**)&glGetVideouivNV_Z_Z = glbindGetProcAddress(`glGetVideouivNV`);
  if (*cast(void**)&glGetVideouivNV_Z_Z is null) assert(0, `OpenGL function 'glGetVideouivNV' not found!`);
  glGetVideouivNV_Z_Z(video_slot, pname, params);
}
alias glGetnColorTable = glGetnColorTable_Z_Z;
__gshared glGetnColorTable_Z_Z = function void (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) { glGetnColorTable_Z_Z_loader(target, format, type, bufSize, table); };
private void glGetnColorTable_Z_Z_loader (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) {
  *cast(void**)&glGetnColorTable_Z_Z = glbindGetProcAddress(`glGetnColorTable`);
  if (*cast(void**)&glGetnColorTable_Z_Z is null) assert(0, `OpenGL function 'glGetnColorTable' not found!`);
  glGetnColorTable_Z_Z(target, format, type, bufSize, table);
}
alias glGetnColorTableARB = glGetnColorTableARB_Z_Z;
__gshared glGetnColorTableARB_Z_Z = function void (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) { glGetnColorTableARB_Z_Z_loader(target, format, type, bufSize, table); };
private void glGetnColorTableARB_Z_Z_loader (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) {
  *cast(void**)&glGetnColorTableARB_Z_Z = glbindGetProcAddress(`glGetnColorTableARB`);
  if (*cast(void**)&glGetnColorTableARB_Z_Z is null) assert(0, `OpenGL function 'glGetnColorTableARB' not found!`);
  glGetnColorTableARB_Z_Z(target, format, type, bufSize, table);
}
alias glGetnCompressedTexImage = glGetnCompressedTexImage_Z_Z;
__gshared glGetnCompressedTexImage_Z_Z = function void (GLenum target, GLint lod, GLsizei bufSize, void *pixels) { glGetnCompressedTexImage_Z_Z_loader(target, lod, bufSize, pixels); };
private void glGetnCompressedTexImage_Z_Z_loader (GLenum target, GLint lod, GLsizei bufSize, void *pixels) {
  *cast(void**)&glGetnCompressedTexImage_Z_Z = glbindGetProcAddress(`glGetnCompressedTexImage`);
  if (*cast(void**)&glGetnCompressedTexImage_Z_Z is null) assert(0, `OpenGL function 'glGetnCompressedTexImage' not found!`);
  glGetnCompressedTexImage_Z_Z(target, lod, bufSize, pixels);
}
alias glGetnCompressedTexImageARB = glGetnCompressedTexImageARB_Z_Z;
__gshared glGetnCompressedTexImageARB_Z_Z = function void (GLenum target, GLint lod, GLsizei bufSize, void *img) { glGetnCompressedTexImageARB_Z_Z_loader(target, lod, bufSize, img); };
private void glGetnCompressedTexImageARB_Z_Z_loader (GLenum target, GLint lod, GLsizei bufSize, void *img) {
  *cast(void**)&glGetnCompressedTexImageARB_Z_Z = glbindGetProcAddress(`glGetnCompressedTexImageARB`);
  if (*cast(void**)&glGetnCompressedTexImageARB_Z_Z is null) assert(0, `OpenGL function 'glGetnCompressedTexImageARB' not found!`);
  glGetnCompressedTexImageARB_Z_Z(target, lod, bufSize, img);
}
alias glGetnConvolutionFilter = glGetnConvolutionFilter_Z_Z;
__gshared glGetnConvolutionFilter_Z_Z = function void (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) { glGetnConvolutionFilter_Z_Z_loader(target, format, type, bufSize, image); };
private void glGetnConvolutionFilter_Z_Z_loader (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) {
  *cast(void**)&glGetnConvolutionFilter_Z_Z = glbindGetProcAddress(`glGetnConvolutionFilter`);
  if (*cast(void**)&glGetnConvolutionFilter_Z_Z is null) assert(0, `OpenGL function 'glGetnConvolutionFilter' not found!`);
  glGetnConvolutionFilter_Z_Z(target, format, type, bufSize, image);
}
alias glGetnConvolutionFilterARB = glGetnConvolutionFilterARB_Z_Z;
__gshared glGetnConvolutionFilterARB_Z_Z = function void (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) { glGetnConvolutionFilterARB_Z_Z_loader(target, format, type, bufSize, image); };
private void glGetnConvolutionFilterARB_Z_Z_loader (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) {
  *cast(void**)&glGetnConvolutionFilterARB_Z_Z = glbindGetProcAddress(`glGetnConvolutionFilterARB`);
  if (*cast(void**)&glGetnConvolutionFilterARB_Z_Z is null) assert(0, `OpenGL function 'glGetnConvolutionFilterARB' not found!`);
  glGetnConvolutionFilterARB_Z_Z(target, format, type, bufSize, image);
}
alias glGetnHistogram = glGetnHistogram_Z_Z;
__gshared glGetnHistogram_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { glGetnHistogram_Z_Z_loader(target, reset, format, type, bufSize, values); };
private void glGetnHistogram_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
  *cast(void**)&glGetnHistogram_Z_Z = glbindGetProcAddress(`glGetnHistogram`);
  if (*cast(void**)&glGetnHistogram_Z_Z is null) assert(0, `OpenGL function 'glGetnHistogram' not found!`);
  glGetnHistogram_Z_Z(target, reset, format, type, bufSize, values);
}
alias glGetnHistogramARB = glGetnHistogramARB_Z_Z;
__gshared glGetnHistogramARB_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { glGetnHistogramARB_Z_Z_loader(target, reset, format, type, bufSize, values); };
private void glGetnHistogramARB_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
  *cast(void**)&glGetnHistogramARB_Z_Z = glbindGetProcAddress(`glGetnHistogramARB`);
  if (*cast(void**)&glGetnHistogramARB_Z_Z is null) assert(0, `OpenGL function 'glGetnHistogramARB' not found!`);
  glGetnHistogramARB_Z_Z(target, reset, format, type, bufSize, values);
}
alias glGetnMapdv = glGetnMapdv_Z_Z;
__gshared glGetnMapdv_Z_Z = function void (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) { glGetnMapdv_Z_Z_loader(target, query, bufSize, v); };
private void glGetnMapdv_Z_Z_loader (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {
  *cast(void**)&glGetnMapdv_Z_Z = glbindGetProcAddress(`glGetnMapdv`);
  if (*cast(void**)&glGetnMapdv_Z_Z is null) assert(0, `OpenGL function 'glGetnMapdv' not found!`);
  glGetnMapdv_Z_Z(target, query, bufSize, v);
}
alias glGetnMapdvARB = glGetnMapdvARB_Z_Z;
__gshared glGetnMapdvARB_Z_Z = function void (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) { glGetnMapdvARB_Z_Z_loader(target, query, bufSize, v); };
private void glGetnMapdvARB_Z_Z_loader (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {
  *cast(void**)&glGetnMapdvARB_Z_Z = glbindGetProcAddress(`glGetnMapdvARB`);
  if (*cast(void**)&glGetnMapdvARB_Z_Z is null) assert(0, `OpenGL function 'glGetnMapdvARB' not found!`);
  glGetnMapdvARB_Z_Z(target, query, bufSize, v);
}
alias glGetnMapfv = glGetnMapfv_Z_Z;
__gshared glGetnMapfv_Z_Z = function void (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) { glGetnMapfv_Z_Z_loader(target, query, bufSize, v); };
private void glGetnMapfv_Z_Z_loader (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {
  *cast(void**)&glGetnMapfv_Z_Z = glbindGetProcAddress(`glGetnMapfv`);
  if (*cast(void**)&glGetnMapfv_Z_Z is null) assert(0, `OpenGL function 'glGetnMapfv' not found!`);
  glGetnMapfv_Z_Z(target, query, bufSize, v);
}
alias glGetnMapfvARB = glGetnMapfvARB_Z_Z;
__gshared glGetnMapfvARB_Z_Z = function void (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) { glGetnMapfvARB_Z_Z_loader(target, query, bufSize, v); };
private void glGetnMapfvARB_Z_Z_loader (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {
  *cast(void**)&glGetnMapfvARB_Z_Z = glbindGetProcAddress(`glGetnMapfvARB`);
  if (*cast(void**)&glGetnMapfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetnMapfvARB' not found!`);
  glGetnMapfvARB_Z_Z(target, query, bufSize, v);
}
alias glGetnMapiv = glGetnMapiv_Z_Z;
__gshared glGetnMapiv_Z_Z = function void (GLenum target, GLenum query, GLsizei bufSize, GLint *v) { glGetnMapiv_Z_Z_loader(target, query, bufSize, v); };
private void glGetnMapiv_Z_Z_loader (GLenum target, GLenum query, GLsizei bufSize, GLint *v) {
  *cast(void**)&glGetnMapiv_Z_Z = glbindGetProcAddress(`glGetnMapiv`);
  if (*cast(void**)&glGetnMapiv_Z_Z is null) assert(0, `OpenGL function 'glGetnMapiv' not found!`);
  glGetnMapiv_Z_Z(target, query, bufSize, v);
}
alias glGetnMapivARB = glGetnMapivARB_Z_Z;
__gshared glGetnMapivARB_Z_Z = function void (GLenum target, GLenum query, GLsizei bufSize, GLint *v) { glGetnMapivARB_Z_Z_loader(target, query, bufSize, v); };
private void glGetnMapivARB_Z_Z_loader (GLenum target, GLenum query, GLsizei bufSize, GLint *v) {
  *cast(void**)&glGetnMapivARB_Z_Z = glbindGetProcAddress(`glGetnMapivARB`);
  if (*cast(void**)&glGetnMapivARB_Z_Z is null) assert(0, `OpenGL function 'glGetnMapivARB' not found!`);
  glGetnMapivARB_Z_Z(target, query, bufSize, v);
}
alias glGetnMinmax = glGetnMinmax_Z_Z;
__gshared glGetnMinmax_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { glGetnMinmax_Z_Z_loader(target, reset, format, type, bufSize, values); };
private void glGetnMinmax_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
  *cast(void**)&glGetnMinmax_Z_Z = glbindGetProcAddress(`glGetnMinmax`);
  if (*cast(void**)&glGetnMinmax_Z_Z is null) assert(0, `OpenGL function 'glGetnMinmax' not found!`);
  glGetnMinmax_Z_Z(target, reset, format, type, bufSize, values);
}
alias glGetnMinmaxARB = glGetnMinmaxARB_Z_Z;
__gshared glGetnMinmaxARB_Z_Z = function void (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { glGetnMinmaxARB_Z_Z_loader(target, reset, format, type, bufSize, values); };
private void glGetnMinmaxARB_Z_Z_loader (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
  *cast(void**)&glGetnMinmaxARB_Z_Z = glbindGetProcAddress(`glGetnMinmaxARB`);
  if (*cast(void**)&glGetnMinmaxARB_Z_Z is null) assert(0, `OpenGL function 'glGetnMinmaxARB' not found!`);
  glGetnMinmaxARB_Z_Z(target, reset, format, type, bufSize, values);
}
alias glGetnPixelMapfv = glGetnPixelMapfv_Z_Z;
__gshared glGetnPixelMapfv_Z_Z = function void (GLenum map, GLsizei bufSize, GLfloat *values) { glGetnPixelMapfv_Z_Z_loader(map, bufSize, values); };
private void glGetnPixelMapfv_Z_Z_loader (GLenum map, GLsizei bufSize, GLfloat *values) {
  *cast(void**)&glGetnPixelMapfv_Z_Z = glbindGetProcAddress(`glGetnPixelMapfv`);
  if (*cast(void**)&glGetnPixelMapfv_Z_Z is null) assert(0, `OpenGL function 'glGetnPixelMapfv' not found!`);
  glGetnPixelMapfv_Z_Z(map, bufSize, values);
}
alias glGetnPixelMapfvARB = glGetnPixelMapfvARB_Z_Z;
__gshared glGetnPixelMapfvARB_Z_Z = function void (GLenum map, GLsizei bufSize, GLfloat *values) { glGetnPixelMapfvARB_Z_Z_loader(map, bufSize, values); };
private void glGetnPixelMapfvARB_Z_Z_loader (GLenum map, GLsizei bufSize, GLfloat *values) {
  *cast(void**)&glGetnPixelMapfvARB_Z_Z = glbindGetProcAddress(`glGetnPixelMapfvARB`);
  if (*cast(void**)&glGetnPixelMapfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetnPixelMapfvARB' not found!`);
  glGetnPixelMapfvARB_Z_Z(map, bufSize, values);
}
alias glGetnPixelMapuiv = glGetnPixelMapuiv_Z_Z;
__gshared glGetnPixelMapuiv_Z_Z = function void (GLenum map, GLsizei bufSize, GLuint *values) { glGetnPixelMapuiv_Z_Z_loader(map, bufSize, values); };
private void glGetnPixelMapuiv_Z_Z_loader (GLenum map, GLsizei bufSize, GLuint *values) {
  *cast(void**)&glGetnPixelMapuiv_Z_Z = glbindGetProcAddress(`glGetnPixelMapuiv`);
  if (*cast(void**)&glGetnPixelMapuiv_Z_Z is null) assert(0, `OpenGL function 'glGetnPixelMapuiv' not found!`);
  glGetnPixelMapuiv_Z_Z(map, bufSize, values);
}
alias glGetnPixelMapuivARB = glGetnPixelMapuivARB_Z_Z;
__gshared glGetnPixelMapuivARB_Z_Z = function void (GLenum map, GLsizei bufSize, GLuint *values) { glGetnPixelMapuivARB_Z_Z_loader(map, bufSize, values); };
private void glGetnPixelMapuivARB_Z_Z_loader (GLenum map, GLsizei bufSize, GLuint *values) {
  *cast(void**)&glGetnPixelMapuivARB_Z_Z = glbindGetProcAddress(`glGetnPixelMapuivARB`);
  if (*cast(void**)&glGetnPixelMapuivARB_Z_Z is null) assert(0, `OpenGL function 'glGetnPixelMapuivARB' not found!`);
  glGetnPixelMapuivARB_Z_Z(map, bufSize, values);
}
alias glGetnPixelMapusv = glGetnPixelMapusv_Z_Z;
__gshared glGetnPixelMapusv_Z_Z = function void (GLenum map, GLsizei bufSize, GLushort *values) { glGetnPixelMapusv_Z_Z_loader(map, bufSize, values); };
private void glGetnPixelMapusv_Z_Z_loader (GLenum map, GLsizei bufSize, GLushort *values) {
  *cast(void**)&glGetnPixelMapusv_Z_Z = glbindGetProcAddress(`glGetnPixelMapusv`);
  if (*cast(void**)&glGetnPixelMapusv_Z_Z is null) assert(0, `OpenGL function 'glGetnPixelMapusv' not found!`);
  glGetnPixelMapusv_Z_Z(map, bufSize, values);
}
alias glGetnPixelMapusvARB = glGetnPixelMapusvARB_Z_Z;
__gshared glGetnPixelMapusvARB_Z_Z = function void (GLenum map, GLsizei bufSize, GLushort *values) { glGetnPixelMapusvARB_Z_Z_loader(map, bufSize, values); };
private void glGetnPixelMapusvARB_Z_Z_loader (GLenum map, GLsizei bufSize, GLushort *values) {
  *cast(void**)&glGetnPixelMapusvARB_Z_Z = glbindGetProcAddress(`glGetnPixelMapusvARB`);
  if (*cast(void**)&glGetnPixelMapusvARB_Z_Z is null) assert(0, `OpenGL function 'glGetnPixelMapusvARB' not found!`);
  glGetnPixelMapusvARB_Z_Z(map, bufSize, values);
}
alias glGetnPolygonStipple = glGetnPolygonStipple_Z_Z;
__gshared glGetnPolygonStipple_Z_Z = function void (GLsizei bufSize, GLubyte *pattern) { glGetnPolygonStipple_Z_Z_loader(bufSize, pattern); };
private void glGetnPolygonStipple_Z_Z_loader (GLsizei bufSize, GLubyte *pattern) {
  *cast(void**)&glGetnPolygonStipple_Z_Z = glbindGetProcAddress(`glGetnPolygonStipple`);
  if (*cast(void**)&glGetnPolygonStipple_Z_Z is null) assert(0, `OpenGL function 'glGetnPolygonStipple' not found!`);
  glGetnPolygonStipple_Z_Z(bufSize, pattern);
}
alias glGetnPolygonStippleARB = glGetnPolygonStippleARB_Z_Z;
__gshared glGetnPolygonStippleARB_Z_Z = function void (GLsizei bufSize, GLubyte *pattern) { glGetnPolygonStippleARB_Z_Z_loader(bufSize, pattern); };
private void glGetnPolygonStippleARB_Z_Z_loader (GLsizei bufSize, GLubyte *pattern) {
  *cast(void**)&glGetnPolygonStippleARB_Z_Z = glbindGetProcAddress(`glGetnPolygonStippleARB`);
  if (*cast(void**)&glGetnPolygonStippleARB_Z_Z is null) assert(0, `OpenGL function 'glGetnPolygonStippleARB' not found!`);
  glGetnPolygonStippleARB_Z_Z(bufSize, pattern);
}
alias glGetnSeparableFilter = glGetnSeparableFilter_Z_Z;
__gshared glGetnSeparableFilter_Z_Z = function void (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) { glGetnSeparableFilter_Z_Z_loader(target, format, type, rowBufSize, row, columnBufSize, column, span); };
private void glGetnSeparableFilter_Z_Z_loader (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) {
  *cast(void**)&glGetnSeparableFilter_Z_Z = glbindGetProcAddress(`glGetnSeparableFilter`);
  if (*cast(void**)&glGetnSeparableFilter_Z_Z is null) assert(0, `OpenGL function 'glGetnSeparableFilter' not found!`);
  glGetnSeparableFilter_Z_Z(target, format, type, rowBufSize, row, columnBufSize, column, span);
}
alias glGetnSeparableFilterARB = glGetnSeparableFilterARB_Z_Z;
__gshared glGetnSeparableFilterARB_Z_Z = function void (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) { glGetnSeparableFilterARB_Z_Z_loader(target, format, type, rowBufSize, row, columnBufSize, column, span); };
private void glGetnSeparableFilterARB_Z_Z_loader (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) {
  *cast(void**)&glGetnSeparableFilterARB_Z_Z = glbindGetProcAddress(`glGetnSeparableFilterARB`);
  if (*cast(void**)&glGetnSeparableFilterARB_Z_Z is null) assert(0, `OpenGL function 'glGetnSeparableFilterARB' not found!`);
  glGetnSeparableFilterARB_Z_Z(target, format, type, rowBufSize, row, columnBufSize, column, span);
}
alias glGetnTexImage = glGetnTexImage_Z_Z;
__gshared glGetnTexImage_Z_Z = function void (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { glGetnTexImage_Z_Z_loader(target, level, format, type, bufSize, pixels); };
private void glGetnTexImage_Z_Z_loader (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  *cast(void**)&glGetnTexImage_Z_Z = glbindGetProcAddress(`glGetnTexImage`);
  if (*cast(void**)&glGetnTexImage_Z_Z is null) assert(0, `OpenGL function 'glGetnTexImage' not found!`);
  glGetnTexImage_Z_Z(target, level, format, type, bufSize, pixels);
}
alias glGetnTexImageARB = glGetnTexImageARB_Z_Z;
__gshared glGetnTexImageARB_Z_Z = function void (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) { glGetnTexImageARB_Z_Z_loader(target, level, format, type, bufSize, img); };
private void glGetnTexImageARB_Z_Z_loader (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) {
  *cast(void**)&glGetnTexImageARB_Z_Z = glbindGetProcAddress(`glGetnTexImageARB`);
  if (*cast(void**)&glGetnTexImageARB_Z_Z is null) assert(0, `OpenGL function 'glGetnTexImageARB' not found!`);
  glGetnTexImageARB_Z_Z(target, level, format, type, bufSize, img);
}
alias glGetnUniformdv = glGetnUniformdv_Z_Z;
__gshared glGetnUniformdv_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) { glGetnUniformdv_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformdv_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
  *cast(void**)&glGetnUniformdv_Z_Z = glbindGetProcAddress(`glGetnUniformdv`);
  if (*cast(void**)&glGetnUniformdv_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformdv' not found!`);
  glGetnUniformdv_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformdvARB = glGetnUniformdvARB_Z_Z;
__gshared glGetnUniformdvARB_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) { glGetnUniformdvARB_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformdvARB_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
  *cast(void**)&glGetnUniformdvARB_Z_Z = glbindGetProcAddress(`glGetnUniformdvARB`);
  if (*cast(void**)&glGetnUniformdvARB_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformdvARB' not found!`);
  glGetnUniformdvARB_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformfv = glGetnUniformfv_Z_Z;
__gshared glGetnUniformfv_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { glGetnUniformfv_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformfv_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  *cast(void**)&glGetnUniformfv_Z_Z = glbindGetProcAddress(`glGetnUniformfv`);
  if (*cast(void**)&glGetnUniformfv_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformfv' not found!`);
  glGetnUniformfv_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformfvARB = glGetnUniformfvARB_Z_Z;
__gshared glGetnUniformfvARB_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { glGetnUniformfvARB_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformfvARB_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  *cast(void**)&glGetnUniformfvARB_Z_Z = glbindGetProcAddress(`glGetnUniformfvARB`);
  if (*cast(void**)&glGetnUniformfvARB_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformfvARB' not found!`);
  glGetnUniformfvARB_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformfvEXT = glGetnUniformfvEXT_Z_Z;
__gshared glGetnUniformfvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { glGetnUniformfvEXT_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformfvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  *cast(void**)&glGetnUniformfvEXT_Z_Z = glbindGetProcAddress(`glGetnUniformfvEXT`);
  if (*cast(void**)&glGetnUniformfvEXT_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformfvEXT' not found!`);
  glGetnUniformfvEXT_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformfvKHR = glGetnUniformfvKHR_Z_Z;
__gshared glGetnUniformfvKHR_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { glGetnUniformfvKHR_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformfvKHR_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  *cast(void**)&glGetnUniformfvKHR_Z_Z = glbindGetProcAddress(`glGetnUniformfvKHR`);
  if (*cast(void**)&glGetnUniformfvKHR_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformfvKHR' not found!`);
  glGetnUniformfvKHR_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformi64vARB = glGetnUniformi64vARB_Z_Z;
__gshared glGetnUniformi64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLint64 *params) { glGetnUniformi64vARB_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformi64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLint64 *params) {
  *cast(void**)&glGetnUniformi64vARB_Z_Z = glbindGetProcAddress(`glGetnUniformi64vARB`);
  if (*cast(void**)&glGetnUniformi64vARB_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformi64vARB' not found!`);
  glGetnUniformi64vARB_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformiv = glGetnUniformiv_Z_Z;
__gshared glGetnUniformiv_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLint *params) { glGetnUniformiv_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformiv_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  *cast(void**)&glGetnUniformiv_Z_Z = glbindGetProcAddress(`glGetnUniformiv`);
  if (*cast(void**)&glGetnUniformiv_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformiv' not found!`);
  glGetnUniformiv_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformivARB = glGetnUniformivARB_Z_Z;
__gshared glGetnUniformivARB_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLint *params) { glGetnUniformivARB_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformivARB_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  *cast(void**)&glGetnUniformivARB_Z_Z = glbindGetProcAddress(`glGetnUniformivARB`);
  if (*cast(void**)&glGetnUniformivARB_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformivARB' not found!`);
  glGetnUniformivARB_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformivEXT = glGetnUniformivEXT_Z_Z;
__gshared glGetnUniformivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLint *params) { glGetnUniformivEXT_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  *cast(void**)&glGetnUniformivEXT_Z_Z = glbindGetProcAddress(`glGetnUniformivEXT`);
  if (*cast(void**)&glGetnUniformivEXT_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformivEXT' not found!`);
  glGetnUniformivEXT_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformivKHR = glGetnUniformivKHR_Z_Z;
__gshared glGetnUniformivKHR_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLint *params) { glGetnUniformivKHR_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformivKHR_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  *cast(void**)&glGetnUniformivKHR_Z_Z = glbindGetProcAddress(`glGetnUniformivKHR`);
  if (*cast(void**)&glGetnUniformivKHR_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformivKHR' not found!`);
  glGetnUniformivKHR_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformui64vARB = glGetnUniformui64vARB_Z_Z;
__gshared glGetnUniformui64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) { glGetnUniformui64vARB_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformui64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) {
  *cast(void**)&glGetnUniformui64vARB_Z_Z = glbindGetProcAddress(`glGetnUniformui64vARB`);
  if (*cast(void**)&glGetnUniformui64vARB_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformui64vARB' not found!`);
  glGetnUniformui64vARB_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformuiv = glGetnUniformuiv_Z_Z;
__gshared glGetnUniformuiv_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLuint *params) { glGetnUniformuiv_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformuiv_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
  *cast(void**)&glGetnUniformuiv_Z_Z = glbindGetProcAddress(`glGetnUniformuiv`);
  if (*cast(void**)&glGetnUniformuiv_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformuiv' not found!`);
  glGetnUniformuiv_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformuivARB = glGetnUniformuivARB_Z_Z;
__gshared glGetnUniformuivARB_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLuint *params) { glGetnUniformuivARB_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformuivARB_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
  *cast(void**)&glGetnUniformuivARB_Z_Z = glbindGetProcAddress(`glGetnUniformuivARB`);
  if (*cast(void**)&glGetnUniformuivARB_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformuivARB' not found!`);
  glGetnUniformuivARB_Z_Z(program, location, bufSize, params);
}
alias glGetnUniformuivKHR = glGetnUniformuivKHR_Z_Z;
__gshared glGetnUniformuivKHR_Z_Z = function void (GLuint program, GLint location, GLsizei bufSize, GLuint *params) { glGetnUniformuivKHR_Z_Z_loader(program, location, bufSize, params); };
private void glGetnUniformuivKHR_Z_Z_loader (GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
  *cast(void**)&glGetnUniformuivKHR_Z_Z = glbindGetProcAddress(`glGetnUniformuivKHR`);
  if (*cast(void**)&glGetnUniformuivKHR_Z_Z is null) assert(0, `OpenGL function 'glGetnUniformuivKHR' not found!`);
  glGetnUniformuivKHR_Z_Z(program, location, bufSize, params);
}
alias glGlobalAlphaFactorbSUN = glGlobalAlphaFactorbSUN_Z_Z;
__gshared glGlobalAlphaFactorbSUN_Z_Z = function void (GLbyte factor) { glGlobalAlphaFactorbSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactorbSUN_Z_Z_loader (GLbyte factor) {
  *cast(void**)&glGlobalAlphaFactorbSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactorbSUN`);
  if (*cast(void**)&glGlobalAlphaFactorbSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorbSUN' not found!`);
  glGlobalAlphaFactorbSUN_Z_Z(factor);
}
alias glGlobalAlphaFactordSUN = glGlobalAlphaFactordSUN_Z_Z;
__gshared glGlobalAlphaFactordSUN_Z_Z = function void (GLdouble factor) { glGlobalAlphaFactordSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactordSUN_Z_Z_loader (GLdouble factor) {
  *cast(void**)&glGlobalAlphaFactordSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactordSUN`);
  if (*cast(void**)&glGlobalAlphaFactordSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactordSUN' not found!`);
  glGlobalAlphaFactordSUN_Z_Z(factor);
}
alias glGlobalAlphaFactorfSUN = glGlobalAlphaFactorfSUN_Z_Z;
__gshared glGlobalAlphaFactorfSUN_Z_Z = function void (GLfloat factor) { glGlobalAlphaFactorfSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactorfSUN_Z_Z_loader (GLfloat factor) {
  *cast(void**)&glGlobalAlphaFactorfSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactorfSUN`);
  if (*cast(void**)&glGlobalAlphaFactorfSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorfSUN' not found!`);
  glGlobalAlphaFactorfSUN_Z_Z(factor);
}
alias glGlobalAlphaFactoriSUN = glGlobalAlphaFactoriSUN_Z_Z;
__gshared glGlobalAlphaFactoriSUN_Z_Z = function void (GLint factor) { glGlobalAlphaFactoriSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactoriSUN_Z_Z_loader (GLint factor) {
  *cast(void**)&glGlobalAlphaFactoriSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactoriSUN`);
  if (*cast(void**)&glGlobalAlphaFactoriSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactoriSUN' not found!`);
  glGlobalAlphaFactoriSUN_Z_Z(factor);
}
alias glGlobalAlphaFactorsSUN = glGlobalAlphaFactorsSUN_Z_Z;
__gshared glGlobalAlphaFactorsSUN_Z_Z = function void (GLshort factor) { glGlobalAlphaFactorsSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactorsSUN_Z_Z_loader (GLshort factor) {
  *cast(void**)&glGlobalAlphaFactorsSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactorsSUN`);
  if (*cast(void**)&glGlobalAlphaFactorsSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorsSUN' not found!`);
  glGlobalAlphaFactorsSUN_Z_Z(factor);
}
alias glGlobalAlphaFactorubSUN = glGlobalAlphaFactorubSUN_Z_Z;
__gshared glGlobalAlphaFactorubSUN_Z_Z = function void (GLubyte factor) { glGlobalAlphaFactorubSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactorubSUN_Z_Z_loader (GLubyte factor) {
  *cast(void**)&glGlobalAlphaFactorubSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactorubSUN`);
  if (*cast(void**)&glGlobalAlphaFactorubSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorubSUN' not found!`);
  glGlobalAlphaFactorubSUN_Z_Z(factor);
}
alias glGlobalAlphaFactoruiSUN = glGlobalAlphaFactoruiSUN_Z_Z;
__gshared glGlobalAlphaFactoruiSUN_Z_Z = function void (GLuint factor) { glGlobalAlphaFactoruiSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactoruiSUN_Z_Z_loader (GLuint factor) {
  *cast(void**)&glGlobalAlphaFactoruiSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactoruiSUN`);
  if (*cast(void**)&glGlobalAlphaFactoruiSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactoruiSUN' not found!`);
  glGlobalAlphaFactoruiSUN_Z_Z(factor);
}
alias glGlobalAlphaFactorusSUN = glGlobalAlphaFactorusSUN_Z_Z;
__gshared glGlobalAlphaFactorusSUN_Z_Z = function void (GLushort factor) { glGlobalAlphaFactorusSUN_Z_Z_loader(factor); };
private void glGlobalAlphaFactorusSUN_Z_Z_loader (GLushort factor) {
  *cast(void**)&glGlobalAlphaFactorusSUN_Z_Z = glbindGetProcAddress(`glGlobalAlphaFactorusSUN`);
  if (*cast(void**)&glGlobalAlphaFactorusSUN_Z_Z is null) assert(0, `OpenGL function 'glGlobalAlphaFactorusSUN' not found!`);
  glGlobalAlphaFactorusSUN_Z_Z(factor);
}
alias glHint = glHint_Z_Z;
__gshared glHint_Z_Z = function void (GLenum target, GLenum mode) { glHint_Z_Z_loader(target, mode); };
private void glHint_Z_Z_loader (GLenum target, GLenum mode) {
  *cast(void**)&glHint_Z_Z = glbindGetProcAddress(`glHint`);
  if (*cast(void**)&glHint_Z_Z is null) assert(0, `OpenGL function 'glHint' not found!`);
  glHint_Z_Z(target, mode);
}
alias glHintPGI = glHintPGI_Z_Z;
__gshared glHintPGI_Z_Z = function void (GLenum target, GLint mode) { glHintPGI_Z_Z_loader(target, mode); };
private void glHintPGI_Z_Z_loader (GLenum target, GLint mode) {
  *cast(void**)&glHintPGI_Z_Z = glbindGetProcAddress(`glHintPGI`);
  if (*cast(void**)&glHintPGI_Z_Z is null) assert(0, `OpenGL function 'glHintPGI' not found!`);
  glHintPGI_Z_Z(target, mode);
}
alias glHistogram = glHistogram_Z_Z;
__gshared glHistogram_Z_Z = function void (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { glHistogram_Z_Z_loader(target, width, internalformat, sink); };
private void glHistogram_Z_Z_loader (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  *cast(void**)&glHistogram_Z_Z = glbindGetProcAddress(`glHistogram`);
  if (*cast(void**)&glHistogram_Z_Z is null) assert(0, `OpenGL function 'glHistogram' not found!`);
  glHistogram_Z_Z(target, width, internalformat, sink);
}
alias glHistogramEXT = glHistogramEXT_Z_Z;
__gshared glHistogramEXT_Z_Z = function void (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { glHistogramEXT_Z_Z_loader(target, width, internalformat, sink); };
private void glHistogramEXT_Z_Z_loader (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  *cast(void**)&glHistogramEXT_Z_Z = glbindGetProcAddress(`glHistogramEXT`);
  if (*cast(void**)&glHistogramEXT_Z_Z is null) assert(0, `OpenGL function 'glHistogramEXT' not found!`);
  glHistogramEXT_Z_Z(target, width, internalformat, sink);
}
alias glIglooInterfaceSGIX = glIglooInterfaceSGIX_Z_Z;
__gshared glIglooInterfaceSGIX_Z_Z = function void (GLenum pname, const(void)* params) { glIglooInterfaceSGIX_Z_Z_loader(pname, params); };
private void glIglooInterfaceSGIX_Z_Z_loader (GLenum pname, const(void)* params) {
  *cast(void**)&glIglooInterfaceSGIX_Z_Z = glbindGetProcAddress(`glIglooInterfaceSGIX`);
  if (*cast(void**)&glIglooInterfaceSGIX_Z_Z is null) assert(0, `OpenGL function 'glIglooInterfaceSGIX' not found!`);
  glIglooInterfaceSGIX_Z_Z(pname, params);
}
alias glImageTransformParameterfHP = glImageTransformParameterfHP_Z_Z;
__gshared glImageTransformParameterfHP_Z_Z = function void (GLenum target, GLenum pname, GLfloat param) { glImageTransformParameterfHP_Z_Z_loader(target, pname, param); };
private void glImageTransformParameterfHP_Z_Z_loader (GLenum target, GLenum pname, GLfloat param) {
  *cast(void**)&glImageTransformParameterfHP_Z_Z = glbindGetProcAddress(`glImageTransformParameterfHP`);
  if (*cast(void**)&glImageTransformParameterfHP_Z_Z is null) assert(0, `OpenGL function 'glImageTransformParameterfHP' not found!`);
  glImageTransformParameterfHP_Z_Z(target, pname, param);
}
alias glImageTransformParameterfvHP = glImageTransformParameterfvHP_Z_Z;
__gshared glImageTransformParameterfvHP_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glImageTransformParameterfvHP_Z_Z_loader(target, pname, params); };
private void glImageTransformParameterfvHP_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glImageTransformParameterfvHP_Z_Z = glbindGetProcAddress(`glImageTransformParameterfvHP`);
  if (*cast(void**)&glImageTransformParameterfvHP_Z_Z is null) assert(0, `OpenGL function 'glImageTransformParameterfvHP' not found!`);
  glImageTransformParameterfvHP_Z_Z(target, pname, params);
}
alias glImageTransformParameteriHP = glImageTransformParameteriHP_Z_Z;
__gshared glImageTransformParameteriHP_Z_Z = function void (GLenum target, GLenum pname, GLint param) { glImageTransformParameteriHP_Z_Z_loader(target, pname, param); };
private void glImageTransformParameteriHP_Z_Z_loader (GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glImageTransformParameteriHP_Z_Z = glbindGetProcAddress(`glImageTransformParameteriHP`);
  if (*cast(void**)&glImageTransformParameteriHP_Z_Z is null) assert(0, `OpenGL function 'glImageTransformParameteriHP' not found!`);
  glImageTransformParameteriHP_Z_Z(target, pname, param);
}
alias glImageTransformParameterivHP = glImageTransformParameterivHP_Z_Z;
__gshared glImageTransformParameterivHP_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glImageTransformParameterivHP_Z_Z_loader(target, pname, params); };
private void glImageTransformParameterivHP_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glImageTransformParameterivHP_Z_Z = glbindGetProcAddress(`glImageTransformParameterivHP`);
  if (*cast(void**)&glImageTransformParameterivHP_Z_Z is null) assert(0, `OpenGL function 'glImageTransformParameterivHP' not found!`);
  glImageTransformParameterivHP_Z_Z(target, pname, params);
}
alias glImportMemoryFdEXT = glImportMemoryFdEXT_Z_Z;
__gshared glImportMemoryFdEXT_Z_Z = function void (GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { glImportMemoryFdEXT_Z_Z_loader(memory, size, handleType, fd); };
private void glImportMemoryFdEXT_Z_Z_loader (GLuint memory, GLuint64 size, GLenum handleType, GLint fd) {
  *cast(void**)&glImportMemoryFdEXT_Z_Z = glbindGetProcAddress(`glImportMemoryFdEXT`);
  if (*cast(void**)&glImportMemoryFdEXT_Z_Z is null) assert(0, `OpenGL function 'glImportMemoryFdEXT' not found!`);
  glImportMemoryFdEXT_Z_Z(memory, size, handleType, fd);
}
alias glImportMemoryWin32HandleEXT = glImportMemoryWin32HandleEXT_Z_Z;
__gshared glImportMemoryWin32HandleEXT_Z_Z = function void (GLuint memory, GLuint64 size, GLenum handleType, void *handle) { glImportMemoryWin32HandleEXT_Z_Z_loader(memory, size, handleType, handle); };
private void glImportMemoryWin32HandleEXT_Z_Z_loader (GLuint memory, GLuint64 size, GLenum handleType, void *handle) {
  *cast(void**)&glImportMemoryWin32HandleEXT_Z_Z = glbindGetProcAddress(`glImportMemoryWin32HandleEXT`);
  if (*cast(void**)&glImportMemoryWin32HandleEXT_Z_Z is null) assert(0, `OpenGL function 'glImportMemoryWin32HandleEXT' not found!`);
  glImportMemoryWin32HandleEXT_Z_Z(memory, size, handleType, handle);
}
alias glImportMemoryWin32NameEXT = glImportMemoryWin32NameEXT_Z_Z;
__gshared glImportMemoryWin32NameEXT_Z_Z = function void (GLuint memory, GLuint64 size, GLenum handleType, const(void)* name) { glImportMemoryWin32NameEXT_Z_Z_loader(memory, size, handleType, name); };
private void glImportMemoryWin32NameEXT_Z_Z_loader (GLuint memory, GLuint64 size, GLenum handleType, const(void)* name) {
  *cast(void**)&glImportMemoryWin32NameEXT_Z_Z = glbindGetProcAddress(`glImportMemoryWin32NameEXT`);
  if (*cast(void**)&glImportMemoryWin32NameEXT_Z_Z is null) assert(0, `OpenGL function 'glImportMemoryWin32NameEXT' not found!`);
  glImportMemoryWin32NameEXT_Z_Z(memory, size, handleType, name);
}
alias glImportSemaphoreFdEXT = glImportSemaphoreFdEXT_Z_Z;
__gshared glImportSemaphoreFdEXT_Z_Z = function void (GLuint semaphore, GLenum handleType, GLint fd) { glImportSemaphoreFdEXT_Z_Z_loader(semaphore, handleType, fd); };
private void glImportSemaphoreFdEXT_Z_Z_loader (GLuint semaphore, GLenum handleType, GLint fd) {
  *cast(void**)&glImportSemaphoreFdEXT_Z_Z = glbindGetProcAddress(`glImportSemaphoreFdEXT`);
  if (*cast(void**)&glImportSemaphoreFdEXT_Z_Z is null) assert(0, `OpenGL function 'glImportSemaphoreFdEXT' not found!`);
  glImportSemaphoreFdEXT_Z_Z(semaphore, handleType, fd);
}
alias glImportSemaphoreWin32HandleEXT = glImportSemaphoreWin32HandleEXT_Z_Z;
__gshared glImportSemaphoreWin32HandleEXT_Z_Z = function void (GLuint semaphore, GLenum handleType, void *handle) { glImportSemaphoreWin32HandleEXT_Z_Z_loader(semaphore, handleType, handle); };
private void glImportSemaphoreWin32HandleEXT_Z_Z_loader (GLuint semaphore, GLenum handleType, void *handle) {
  *cast(void**)&glImportSemaphoreWin32HandleEXT_Z_Z = glbindGetProcAddress(`glImportSemaphoreWin32HandleEXT`);
  if (*cast(void**)&glImportSemaphoreWin32HandleEXT_Z_Z is null) assert(0, `OpenGL function 'glImportSemaphoreWin32HandleEXT' not found!`);
  glImportSemaphoreWin32HandleEXT_Z_Z(semaphore, handleType, handle);
}
alias glImportSemaphoreWin32NameEXT = glImportSemaphoreWin32NameEXT_Z_Z;
__gshared glImportSemaphoreWin32NameEXT_Z_Z = function void (GLuint semaphore, GLenum handleType, const(void)* name) { glImportSemaphoreWin32NameEXT_Z_Z_loader(semaphore, handleType, name); };
private void glImportSemaphoreWin32NameEXT_Z_Z_loader (GLuint semaphore, GLenum handleType, const(void)* name) {
  *cast(void**)&glImportSemaphoreWin32NameEXT_Z_Z = glbindGetProcAddress(`glImportSemaphoreWin32NameEXT`);
  if (*cast(void**)&glImportSemaphoreWin32NameEXT_Z_Z is null) assert(0, `OpenGL function 'glImportSemaphoreWin32NameEXT' not found!`);
  glImportSemaphoreWin32NameEXT_Z_Z(semaphore, handleType, name);
}
alias glImportSyncEXT = glImportSyncEXT_Z_Z;
__gshared glImportSyncEXT_Z_Z = function GLsync (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return glImportSyncEXT_Z_Z_loader(external_sync_type, external_sync, flags); };
private GLsync glImportSyncEXT_Z_Z_loader (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {
  *cast(void**)&glImportSyncEXT_Z_Z = glbindGetProcAddress(`glImportSyncEXT`);
  if (*cast(void**)&glImportSyncEXT_Z_Z is null) assert(0, `OpenGL function 'glImportSyncEXT' not found!`);
  return glImportSyncEXT_Z_Z(external_sync_type, external_sync, flags);
}
alias glIndexFormatNV = glIndexFormatNV_Z_Z;
__gshared glIndexFormatNV_Z_Z = function void (GLenum type, GLsizei stride) { glIndexFormatNV_Z_Z_loader(type, stride); };
private void glIndexFormatNV_Z_Z_loader (GLenum type, GLsizei stride) {
  *cast(void**)&glIndexFormatNV_Z_Z = glbindGetProcAddress(`glIndexFormatNV`);
  if (*cast(void**)&glIndexFormatNV_Z_Z is null) assert(0, `OpenGL function 'glIndexFormatNV' not found!`);
  glIndexFormatNV_Z_Z(type, stride);
}
alias glIndexFuncEXT = glIndexFuncEXT_Z_Z;
__gshared glIndexFuncEXT_Z_Z = function void (GLenum func, GLclampf ref_) { glIndexFuncEXT_Z_Z_loader(func, ref_); };
private void glIndexFuncEXT_Z_Z_loader (GLenum func, GLclampf ref_) {
  *cast(void**)&glIndexFuncEXT_Z_Z = glbindGetProcAddress(`glIndexFuncEXT`);
  if (*cast(void**)&glIndexFuncEXT_Z_Z is null) assert(0, `OpenGL function 'glIndexFuncEXT' not found!`);
  glIndexFuncEXT_Z_Z(func, ref_);
}
alias glIndexMask = glIndexMask_Z_Z;
__gshared glIndexMask_Z_Z = function void (GLuint mask) { glIndexMask_Z_Z_loader(mask); };
private void glIndexMask_Z_Z_loader (GLuint mask) {
  *cast(void**)&glIndexMask_Z_Z = glbindGetProcAddress(`glIndexMask`);
  if (*cast(void**)&glIndexMask_Z_Z is null) assert(0, `OpenGL function 'glIndexMask' not found!`);
  glIndexMask_Z_Z(mask);
}
alias glIndexMaterialEXT = glIndexMaterialEXT_Z_Z;
__gshared glIndexMaterialEXT_Z_Z = function void (GLenum face, GLenum mode) { glIndexMaterialEXT_Z_Z_loader(face, mode); };
private void glIndexMaterialEXT_Z_Z_loader (GLenum face, GLenum mode) {
  *cast(void**)&glIndexMaterialEXT_Z_Z = glbindGetProcAddress(`glIndexMaterialEXT`);
  if (*cast(void**)&glIndexMaterialEXT_Z_Z is null) assert(0, `OpenGL function 'glIndexMaterialEXT' not found!`);
  glIndexMaterialEXT_Z_Z(face, mode);
}
alias glIndexPointer = glIndexPointer_Z_Z;
__gshared glIndexPointer_Z_Z = function void (GLenum type, GLsizei stride, const(void)* pointer) { glIndexPointer_Z_Z_loader(type, stride, pointer); };
private void glIndexPointer_Z_Z_loader (GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glIndexPointer_Z_Z = glbindGetProcAddress(`glIndexPointer`);
  if (*cast(void**)&glIndexPointer_Z_Z is null) assert(0, `OpenGL function 'glIndexPointer' not found!`);
  glIndexPointer_Z_Z(type, stride, pointer);
}
alias glIndexPointerEXT = glIndexPointerEXT_Z_Z;
__gshared glIndexPointerEXT_Z_Z = function void (GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) { glIndexPointerEXT_Z_Z_loader(type, stride, count, pointer); };
private void glIndexPointerEXT_Z_Z_loader (GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) {
  *cast(void**)&glIndexPointerEXT_Z_Z = glbindGetProcAddress(`glIndexPointerEXT`);
  if (*cast(void**)&glIndexPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glIndexPointerEXT' not found!`);
  glIndexPointerEXT_Z_Z(type, stride, count, pointer);
}
alias glIndexPointerListIBM = glIndexPointerListIBM_Z_Z;
__gshared glIndexPointerListIBM_Z_Z = function void (GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) { glIndexPointerListIBM_Z_Z_loader(type, stride, pointer, ptrstride); };
private void glIndexPointerListIBM_Z_Z_loader (GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) {
  *cast(void**)&glIndexPointerListIBM_Z_Z = glbindGetProcAddress(`glIndexPointerListIBM`);
  if (*cast(void**)&glIndexPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glIndexPointerListIBM' not found!`);
  glIndexPointerListIBM_Z_Z(type, stride, pointer, ptrstride);
}
alias glIndexd = glIndexd_Z_Z;
__gshared glIndexd_Z_Z = function void (GLdouble c) { glIndexd_Z_Z_loader(c); };
private void glIndexd_Z_Z_loader (GLdouble c) {
  *cast(void**)&glIndexd_Z_Z = glbindGetProcAddress(`glIndexd`);
  if (*cast(void**)&glIndexd_Z_Z is null) assert(0, `OpenGL function 'glIndexd' not found!`);
  glIndexd_Z_Z(c);
}
alias glIndexdv = glIndexdv_Z_Z;
__gshared glIndexdv_Z_Z = function void (const(GLdouble)* c) { glIndexdv_Z_Z_loader(c); };
private void glIndexdv_Z_Z_loader (const(GLdouble)* c) {
  *cast(void**)&glIndexdv_Z_Z = glbindGetProcAddress(`glIndexdv`);
  if (*cast(void**)&glIndexdv_Z_Z is null) assert(0, `OpenGL function 'glIndexdv' not found!`);
  glIndexdv_Z_Z(c);
}
alias glIndexf = glIndexf_Z_Z;
__gshared glIndexf_Z_Z = function void (GLfloat c) { glIndexf_Z_Z_loader(c); };
private void glIndexf_Z_Z_loader (GLfloat c) {
  *cast(void**)&glIndexf_Z_Z = glbindGetProcAddress(`glIndexf`);
  if (*cast(void**)&glIndexf_Z_Z is null) assert(0, `OpenGL function 'glIndexf' not found!`);
  glIndexf_Z_Z(c);
}
alias glIndexfv = glIndexfv_Z_Z;
__gshared glIndexfv_Z_Z = function void (const(GLfloat)* c) { glIndexfv_Z_Z_loader(c); };
private void glIndexfv_Z_Z_loader (const(GLfloat)* c) {
  *cast(void**)&glIndexfv_Z_Z = glbindGetProcAddress(`glIndexfv`);
  if (*cast(void**)&glIndexfv_Z_Z is null) assert(0, `OpenGL function 'glIndexfv' not found!`);
  glIndexfv_Z_Z(c);
}
alias glIndexi = glIndexi_Z_Z;
__gshared glIndexi_Z_Z = function void (GLint c) { glIndexi_Z_Z_loader(c); };
private void glIndexi_Z_Z_loader (GLint c) {
  *cast(void**)&glIndexi_Z_Z = glbindGetProcAddress(`glIndexi`);
  if (*cast(void**)&glIndexi_Z_Z is null) assert(0, `OpenGL function 'glIndexi' not found!`);
  glIndexi_Z_Z(c);
}
alias glIndexiv = glIndexiv_Z_Z;
__gshared glIndexiv_Z_Z = function void (const(GLint)* c) { glIndexiv_Z_Z_loader(c); };
private void glIndexiv_Z_Z_loader (const(GLint)* c) {
  *cast(void**)&glIndexiv_Z_Z = glbindGetProcAddress(`glIndexiv`);
  if (*cast(void**)&glIndexiv_Z_Z is null) assert(0, `OpenGL function 'glIndexiv' not found!`);
  glIndexiv_Z_Z(c);
}
alias glIndexs = glIndexs_Z_Z;
__gshared glIndexs_Z_Z = function void (GLshort c) { glIndexs_Z_Z_loader(c); };
private void glIndexs_Z_Z_loader (GLshort c) {
  *cast(void**)&glIndexs_Z_Z = glbindGetProcAddress(`glIndexs`);
  if (*cast(void**)&glIndexs_Z_Z is null) assert(0, `OpenGL function 'glIndexs' not found!`);
  glIndexs_Z_Z(c);
}
alias glIndexsv = glIndexsv_Z_Z;
__gshared glIndexsv_Z_Z = function void (const(GLshort)* c) { glIndexsv_Z_Z_loader(c); };
private void glIndexsv_Z_Z_loader (const(GLshort)* c) {
  *cast(void**)&glIndexsv_Z_Z = glbindGetProcAddress(`glIndexsv`);
  if (*cast(void**)&glIndexsv_Z_Z is null) assert(0, `OpenGL function 'glIndexsv' not found!`);
  glIndexsv_Z_Z(c);
}
alias glIndexub = glIndexub_Z_Z;
__gshared glIndexub_Z_Z = function void (GLubyte c) { glIndexub_Z_Z_loader(c); };
private void glIndexub_Z_Z_loader (GLubyte c) {
  *cast(void**)&glIndexub_Z_Z = glbindGetProcAddress(`glIndexub`);
  if (*cast(void**)&glIndexub_Z_Z is null) assert(0, `OpenGL function 'glIndexub' not found!`);
  glIndexub_Z_Z(c);
}
alias glIndexubv = glIndexubv_Z_Z;
__gshared glIndexubv_Z_Z = function void (const(GLubyte)* c) { glIndexubv_Z_Z_loader(c); };
private void glIndexubv_Z_Z_loader (const(GLubyte)* c) {
  *cast(void**)&glIndexubv_Z_Z = glbindGetProcAddress(`glIndexubv`);
  if (*cast(void**)&glIndexubv_Z_Z is null) assert(0, `OpenGL function 'glIndexubv' not found!`);
  glIndexubv_Z_Z(c);
}
alias glIndexxOES = glIndexxOES_Z_Z;
__gshared glIndexxOES_Z_Z = function void (GLfixed component) { glIndexxOES_Z_Z_loader(component); };
private void glIndexxOES_Z_Z_loader (GLfixed component) {
  *cast(void**)&glIndexxOES_Z_Z = glbindGetProcAddress(`glIndexxOES`);
  if (*cast(void**)&glIndexxOES_Z_Z is null) assert(0, `OpenGL function 'glIndexxOES' not found!`);
  glIndexxOES_Z_Z(component);
}
alias glIndexxvOES = glIndexxvOES_Z_Z;
__gshared glIndexxvOES_Z_Z = function void (const(GLfixed)* component) { glIndexxvOES_Z_Z_loader(component); };
private void glIndexxvOES_Z_Z_loader (const(GLfixed)* component) {
  *cast(void**)&glIndexxvOES_Z_Z = glbindGetProcAddress(`glIndexxvOES`);
  if (*cast(void**)&glIndexxvOES_Z_Z is null) assert(0, `OpenGL function 'glIndexxvOES' not found!`);
  glIndexxvOES_Z_Z(component);
}
alias glInitNames = glInitNames_Z_Z;
__gshared glInitNames_Z_Z = function void () { glInitNames_Z_Z_loader(); };
private void glInitNames_Z_Z_loader () {
  *cast(void**)&glInitNames_Z_Z = glbindGetProcAddress(`glInitNames`);
  if (*cast(void**)&glInitNames_Z_Z is null) assert(0, `OpenGL function 'glInitNames' not found!`);
  glInitNames_Z_Z();
}
alias glInsertComponentEXT = glInsertComponentEXT_Z_Z;
__gshared glInsertComponentEXT_Z_Z = function void (GLuint res, GLuint src, GLuint num) { glInsertComponentEXT_Z_Z_loader(res, src, num); };
private void glInsertComponentEXT_Z_Z_loader (GLuint res, GLuint src, GLuint num) {
  *cast(void**)&glInsertComponentEXT_Z_Z = glbindGetProcAddress(`glInsertComponentEXT`);
  if (*cast(void**)&glInsertComponentEXT_Z_Z is null) assert(0, `OpenGL function 'glInsertComponentEXT' not found!`);
  glInsertComponentEXT_Z_Z(res, src, num);
}
alias glInsertEventMarkerEXT = glInsertEventMarkerEXT_Z_Z;
__gshared glInsertEventMarkerEXT_Z_Z = function void (GLsizei length, const(GLchar)* marker) { glInsertEventMarkerEXT_Z_Z_loader(length, marker); };
private void glInsertEventMarkerEXT_Z_Z_loader (GLsizei length, const(GLchar)* marker) {
  *cast(void**)&glInsertEventMarkerEXT_Z_Z = glbindGetProcAddress(`glInsertEventMarkerEXT`);
  if (*cast(void**)&glInsertEventMarkerEXT_Z_Z is null) assert(0, `OpenGL function 'glInsertEventMarkerEXT' not found!`);
  glInsertEventMarkerEXT_Z_Z(length, marker);
}
alias glInstrumentsBufferSGIX = glInstrumentsBufferSGIX_Z_Z;
__gshared glInstrumentsBufferSGIX_Z_Z = function void (GLsizei size, GLint *buffer) { glInstrumentsBufferSGIX_Z_Z_loader(size, buffer); };
private void glInstrumentsBufferSGIX_Z_Z_loader (GLsizei size, GLint *buffer) {
  *cast(void**)&glInstrumentsBufferSGIX_Z_Z = glbindGetProcAddress(`glInstrumentsBufferSGIX`);
  if (*cast(void**)&glInstrumentsBufferSGIX_Z_Z is null) assert(0, `OpenGL function 'glInstrumentsBufferSGIX' not found!`);
  glInstrumentsBufferSGIX_Z_Z(size, buffer);
}
alias glInterleavedArrays = glInterleavedArrays_Z_Z;
__gshared glInterleavedArrays_Z_Z = function void (GLenum format, GLsizei stride, const(void)* pointer) { glInterleavedArrays_Z_Z_loader(format, stride, pointer); };
private void glInterleavedArrays_Z_Z_loader (GLenum format, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glInterleavedArrays_Z_Z = glbindGetProcAddress(`glInterleavedArrays`);
  if (*cast(void**)&glInterleavedArrays_Z_Z is null) assert(0, `OpenGL function 'glInterleavedArrays' not found!`);
  glInterleavedArrays_Z_Z(format, stride, pointer);
}
alias glInterpolatePathsNV = glInterpolatePathsNV_Z_Z;
__gshared glInterpolatePathsNV_Z_Z = function void (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { glInterpolatePathsNV_Z_Z_loader(resultPath, pathA, pathB, weight); };
private void glInterpolatePathsNV_Z_Z_loader (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
  *cast(void**)&glInterpolatePathsNV_Z_Z = glbindGetProcAddress(`glInterpolatePathsNV`);
  if (*cast(void**)&glInterpolatePathsNV_Z_Z is null) assert(0, `OpenGL function 'glInterpolatePathsNV' not found!`);
  glInterpolatePathsNV_Z_Z(resultPath, pathA, pathB, weight);
}
alias glInvalidateBufferData = glInvalidateBufferData_Z_Z;
__gshared glInvalidateBufferData_Z_Z = function void (GLuint buffer) { glInvalidateBufferData_Z_Z_loader(buffer); };
private void glInvalidateBufferData_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glInvalidateBufferData_Z_Z = glbindGetProcAddress(`glInvalidateBufferData`);
  if (*cast(void**)&glInvalidateBufferData_Z_Z is null) assert(0, `OpenGL function 'glInvalidateBufferData' not found!`);
  glInvalidateBufferData_Z_Z(buffer);
}
alias glInvalidateBufferSubData = glInvalidateBufferSubData_Z_Z;
__gshared glInvalidateBufferSubData_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr length) { glInvalidateBufferSubData_Z_Z_loader(buffer, offset, length); };
private void glInvalidateBufferSubData_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr length) {
  *cast(void**)&glInvalidateBufferSubData_Z_Z = glbindGetProcAddress(`glInvalidateBufferSubData`);
  if (*cast(void**)&glInvalidateBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glInvalidateBufferSubData' not found!`);
  glInvalidateBufferSubData_Z_Z(buffer, offset, length);
}
alias glInvalidateFramebuffer = glInvalidateFramebuffer_Z_Z;
__gshared glInvalidateFramebuffer_Z_Z = function void (GLenum target, GLsizei numAttachments, const(GLenum)* attachments) { glInvalidateFramebuffer_Z_Z_loader(target, numAttachments, attachments); };
private void glInvalidateFramebuffer_Z_Z_loader (GLenum target, GLsizei numAttachments, const(GLenum)* attachments) {
  *cast(void**)&glInvalidateFramebuffer_Z_Z = glbindGetProcAddress(`glInvalidateFramebuffer`);
  if (*cast(void**)&glInvalidateFramebuffer_Z_Z is null) assert(0, `OpenGL function 'glInvalidateFramebuffer' not found!`);
  glInvalidateFramebuffer_Z_Z(target, numAttachments, attachments);
}
alias glInvalidateNamedFramebufferData = glInvalidateNamedFramebufferData_Z_Z;
__gshared glInvalidateNamedFramebufferData_Z_Z = function void (GLuint framebuffer, GLsizei numAttachments, const(GLenum)* attachments) { glInvalidateNamedFramebufferData_Z_Z_loader(framebuffer, numAttachments, attachments); };
private void glInvalidateNamedFramebufferData_Z_Z_loader (GLuint framebuffer, GLsizei numAttachments, const(GLenum)* attachments) {
  *cast(void**)&glInvalidateNamedFramebufferData_Z_Z = glbindGetProcAddress(`glInvalidateNamedFramebufferData`);
  if (*cast(void**)&glInvalidateNamedFramebufferData_Z_Z is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferData' not found!`);
  glInvalidateNamedFramebufferData_Z_Z(framebuffer, numAttachments, attachments);
}
alias glInvalidateNamedFramebufferSubData = glInvalidateNamedFramebufferSubData_Z_Z;
__gshared glInvalidateNamedFramebufferSubData_Z_Z = function void (GLuint framebuffer, GLsizei numAttachments, const(GLenum)* attachments, GLint x, GLint y, GLsizei width, GLsizei height) { glInvalidateNamedFramebufferSubData_Z_Z_loader(framebuffer, numAttachments, attachments, x, y, width, height); };
private void glInvalidateNamedFramebufferSubData_Z_Z_loader (GLuint framebuffer, GLsizei numAttachments, const(GLenum)* attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glInvalidateNamedFramebufferSubData_Z_Z = glbindGetProcAddress(`glInvalidateNamedFramebufferSubData`);
  if (*cast(void**)&glInvalidateNamedFramebufferSubData_Z_Z is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferSubData' not found!`);
  glInvalidateNamedFramebufferSubData_Z_Z(framebuffer, numAttachments, attachments, x, y, width, height);
}
alias glInvalidateSubFramebuffer = glInvalidateSubFramebuffer_Z_Z;
__gshared glInvalidateSubFramebuffer_Z_Z = function void (GLenum target, GLsizei numAttachments, const(GLenum)* attachments, GLint x, GLint y, GLsizei width, GLsizei height) { glInvalidateSubFramebuffer_Z_Z_loader(target, numAttachments, attachments, x, y, width, height); };
private void glInvalidateSubFramebuffer_Z_Z_loader (GLenum target, GLsizei numAttachments, const(GLenum)* attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glInvalidateSubFramebuffer_Z_Z = glbindGetProcAddress(`glInvalidateSubFramebuffer`);
  if (*cast(void**)&glInvalidateSubFramebuffer_Z_Z is null) assert(0, `OpenGL function 'glInvalidateSubFramebuffer' not found!`);
  glInvalidateSubFramebuffer_Z_Z(target, numAttachments, attachments, x, y, width, height);
}
alias glInvalidateTexImage = glInvalidateTexImage_Z_Z;
__gshared glInvalidateTexImage_Z_Z = function void (GLuint texture, GLint level) { glInvalidateTexImage_Z_Z_loader(texture, level); };
private void glInvalidateTexImage_Z_Z_loader (GLuint texture, GLint level) {
  *cast(void**)&glInvalidateTexImage_Z_Z = glbindGetProcAddress(`glInvalidateTexImage`);
  if (*cast(void**)&glInvalidateTexImage_Z_Z is null) assert(0, `OpenGL function 'glInvalidateTexImage' not found!`);
  glInvalidateTexImage_Z_Z(texture, level);
}
alias glInvalidateTexSubImage = glInvalidateTexSubImage_Z_Z;
__gshared glInvalidateTexSubImage_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { glInvalidateTexSubImage_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth); };
private void glInvalidateTexSubImage_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
  *cast(void**)&glInvalidateTexSubImage_Z_Z = glbindGetProcAddress(`glInvalidateTexSubImage`);
  if (*cast(void**)&glInvalidateTexSubImage_Z_Z is null) assert(0, `OpenGL function 'glInvalidateTexSubImage' not found!`);
  glInvalidateTexSubImage_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
alias glIsAsyncMarkerSGIX = glIsAsyncMarkerSGIX_Z_Z;
__gshared glIsAsyncMarkerSGIX_Z_Z = function GLboolean (GLuint marker) { return glIsAsyncMarkerSGIX_Z_Z_loader(marker); };
private GLboolean glIsAsyncMarkerSGIX_Z_Z_loader (GLuint marker) {
  *cast(void**)&glIsAsyncMarkerSGIX_Z_Z = glbindGetProcAddress(`glIsAsyncMarkerSGIX`);
  if (*cast(void**)&glIsAsyncMarkerSGIX_Z_Z is null) assert(0, `OpenGL function 'glIsAsyncMarkerSGIX' not found!`);
  return glIsAsyncMarkerSGIX_Z_Z(marker);
}
alias glIsBuffer = glIsBuffer_Z_Z;
__gshared glIsBuffer_Z_Z = function GLboolean (GLuint buffer) { return glIsBuffer_Z_Z_loader(buffer); };
private GLboolean glIsBuffer_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glIsBuffer_Z_Z = glbindGetProcAddress(`glIsBuffer`);
  if (*cast(void**)&glIsBuffer_Z_Z is null) assert(0, `OpenGL function 'glIsBuffer' not found!`);
  return glIsBuffer_Z_Z(buffer);
}
alias glIsBufferARB = glIsBufferARB_Z_Z;
__gshared glIsBufferARB_Z_Z = function GLboolean (GLuint buffer) { return glIsBufferARB_Z_Z_loader(buffer); };
private GLboolean glIsBufferARB_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glIsBufferARB_Z_Z = glbindGetProcAddress(`glIsBufferARB`);
  if (*cast(void**)&glIsBufferARB_Z_Z is null) assert(0, `OpenGL function 'glIsBufferARB' not found!`);
  return glIsBufferARB_Z_Z(buffer);
}
alias glIsBufferResidentNV = glIsBufferResidentNV_Z_Z;
__gshared glIsBufferResidentNV_Z_Z = function GLboolean (GLenum target) { return glIsBufferResidentNV_Z_Z_loader(target); };
private GLboolean glIsBufferResidentNV_Z_Z_loader (GLenum target) {
  *cast(void**)&glIsBufferResidentNV_Z_Z = glbindGetProcAddress(`glIsBufferResidentNV`);
  if (*cast(void**)&glIsBufferResidentNV_Z_Z is null) assert(0, `OpenGL function 'glIsBufferResidentNV' not found!`);
  return glIsBufferResidentNV_Z_Z(target);
}
alias glIsCommandListNV = glIsCommandListNV_Z_Z;
__gshared glIsCommandListNV_Z_Z = function GLboolean (GLuint list) { return glIsCommandListNV_Z_Z_loader(list); };
private GLboolean glIsCommandListNV_Z_Z_loader (GLuint list) {
  *cast(void**)&glIsCommandListNV_Z_Z = glbindGetProcAddress(`glIsCommandListNV`);
  if (*cast(void**)&glIsCommandListNV_Z_Z is null) assert(0, `OpenGL function 'glIsCommandListNV' not found!`);
  return glIsCommandListNV_Z_Z(list);
}
alias glIsEnabled = glIsEnabled_Z_Z;
__gshared glIsEnabled_Z_Z = function GLboolean (GLenum cap) { return glIsEnabled_Z_Z_loader(cap); };
private GLboolean glIsEnabled_Z_Z_loader (GLenum cap) {
  *cast(void**)&glIsEnabled_Z_Z = glbindGetProcAddress(`glIsEnabled`);
  if (*cast(void**)&glIsEnabled_Z_Z is null) assert(0, `OpenGL function 'glIsEnabled' not found!`);
  return glIsEnabled_Z_Z(cap);
}
alias glIsEnabledIndexedEXT = glIsEnabledIndexedEXT_Z_Z;
__gshared glIsEnabledIndexedEXT_Z_Z = function GLboolean (GLenum target, GLuint index) { return glIsEnabledIndexedEXT_Z_Z_loader(target, index); };
private GLboolean glIsEnabledIndexedEXT_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glIsEnabledIndexedEXT_Z_Z = glbindGetProcAddress(`glIsEnabledIndexedEXT`);
  if (*cast(void**)&glIsEnabledIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glIsEnabledIndexedEXT' not found!`);
  return glIsEnabledIndexedEXT_Z_Z(target, index);
}
alias glIsEnabledi = glIsEnabledi_Z_Z;
__gshared glIsEnabledi_Z_Z = function GLboolean (GLenum target, GLuint index) { return glIsEnabledi_Z_Z_loader(target, index); };
private GLboolean glIsEnabledi_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glIsEnabledi_Z_Z = glbindGetProcAddress(`glIsEnabledi`);
  if (*cast(void**)&glIsEnabledi_Z_Z is null) assert(0, `OpenGL function 'glIsEnabledi' not found!`);
  return glIsEnabledi_Z_Z(target, index);
}
alias glIsEnablediEXT = glIsEnablediEXT_Z_Z;
__gshared glIsEnablediEXT_Z_Z = function GLboolean (GLenum target, GLuint index) { return glIsEnablediEXT_Z_Z_loader(target, index); };
private GLboolean glIsEnablediEXT_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glIsEnablediEXT_Z_Z = glbindGetProcAddress(`glIsEnablediEXT`);
  if (*cast(void**)&glIsEnablediEXT_Z_Z is null) assert(0, `OpenGL function 'glIsEnablediEXT' not found!`);
  return glIsEnablediEXT_Z_Z(target, index);
}
alias glIsEnablediNV = glIsEnablediNV_Z_Z;
__gshared glIsEnablediNV_Z_Z = function GLboolean (GLenum target, GLuint index) { return glIsEnablediNV_Z_Z_loader(target, index); };
private GLboolean glIsEnablediNV_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glIsEnablediNV_Z_Z = glbindGetProcAddress(`glIsEnablediNV`);
  if (*cast(void**)&glIsEnablediNV_Z_Z is null) assert(0, `OpenGL function 'glIsEnablediNV' not found!`);
  return glIsEnablediNV_Z_Z(target, index);
}
alias glIsEnablediOES = glIsEnablediOES_Z_Z;
__gshared glIsEnablediOES_Z_Z = function GLboolean (GLenum target, GLuint index) { return glIsEnablediOES_Z_Z_loader(target, index); };
private GLboolean glIsEnablediOES_Z_Z_loader (GLenum target, GLuint index) {
  *cast(void**)&glIsEnablediOES_Z_Z = glbindGetProcAddress(`glIsEnablediOES`);
  if (*cast(void**)&glIsEnablediOES_Z_Z is null) assert(0, `OpenGL function 'glIsEnablediOES' not found!`);
  return glIsEnablediOES_Z_Z(target, index);
}
alias glIsFenceAPPLE = glIsFenceAPPLE_Z_Z;
__gshared glIsFenceAPPLE_Z_Z = function GLboolean (GLuint fence) { return glIsFenceAPPLE_Z_Z_loader(fence); };
private GLboolean glIsFenceAPPLE_Z_Z_loader (GLuint fence) {
  *cast(void**)&glIsFenceAPPLE_Z_Z = glbindGetProcAddress(`glIsFenceAPPLE`);
  if (*cast(void**)&glIsFenceAPPLE_Z_Z is null) assert(0, `OpenGL function 'glIsFenceAPPLE' not found!`);
  return glIsFenceAPPLE_Z_Z(fence);
}
alias glIsFenceNV = glIsFenceNV_Z_Z;
__gshared glIsFenceNV_Z_Z = function GLboolean (GLuint fence) { return glIsFenceNV_Z_Z_loader(fence); };
private GLboolean glIsFenceNV_Z_Z_loader (GLuint fence) {
  *cast(void**)&glIsFenceNV_Z_Z = glbindGetProcAddress(`glIsFenceNV`);
  if (*cast(void**)&glIsFenceNV_Z_Z is null) assert(0, `OpenGL function 'glIsFenceNV' not found!`);
  return glIsFenceNV_Z_Z(fence);
}
alias glIsFramebuffer = glIsFramebuffer_Z_Z;
__gshared glIsFramebuffer_Z_Z = function GLboolean (GLuint framebuffer) { return glIsFramebuffer_Z_Z_loader(framebuffer); };
private GLboolean glIsFramebuffer_Z_Z_loader (GLuint framebuffer) {
  *cast(void**)&glIsFramebuffer_Z_Z = glbindGetProcAddress(`glIsFramebuffer`);
  if (*cast(void**)&glIsFramebuffer_Z_Z is null) assert(0, `OpenGL function 'glIsFramebuffer' not found!`);
  return glIsFramebuffer_Z_Z(framebuffer);
}
alias glIsFramebufferEXT = glIsFramebufferEXT_Z_Z;
__gshared glIsFramebufferEXT_Z_Z = function GLboolean (GLuint framebuffer) { return glIsFramebufferEXT_Z_Z_loader(framebuffer); };
private GLboolean glIsFramebufferEXT_Z_Z_loader (GLuint framebuffer) {
  *cast(void**)&glIsFramebufferEXT_Z_Z = glbindGetProcAddress(`glIsFramebufferEXT`);
  if (*cast(void**)&glIsFramebufferEXT_Z_Z is null) assert(0, `OpenGL function 'glIsFramebufferEXT' not found!`);
  return glIsFramebufferEXT_Z_Z(framebuffer);
}
alias glIsFramebufferOES = glIsFramebufferOES_Z_Z;
__gshared glIsFramebufferOES_Z_Z = function GLboolean (GLuint framebuffer) { return glIsFramebufferOES_Z_Z_loader(framebuffer); };
private GLboolean glIsFramebufferOES_Z_Z_loader (GLuint framebuffer) {
  *cast(void**)&glIsFramebufferOES_Z_Z = glbindGetProcAddress(`glIsFramebufferOES`);
  if (*cast(void**)&glIsFramebufferOES_Z_Z is null) assert(0, `OpenGL function 'glIsFramebufferOES' not found!`);
  return glIsFramebufferOES_Z_Z(framebuffer);
}
alias glIsImageHandleResidentARB = glIsImageHandleResidentARB_Z_Z;
__gshared glIsImageHandleResidentARB_Z_Z = function GLboolean (GLuint64 handle) { return glIsImageHandleResidentARB_Z_Z_loader(handle); };
private GLboolean glIsImageHandleResidentARB_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glIsImageHandleResidentARB_Z_Z = glbindGetProcAddress(`glIsImageHandleResidentARB`);
  if (*cast(void**)&glIsImageHandleResidentARB_Z_Z is null) assert(0, `OpenGL function 'glIsImageHandleResidentARB' not found!`);
  return glIsImageHandleResidentARB_Z_Z(handle);
}
alias glIsImageHandleResidentNV = glIsImageHandleResidentNV_Z_Z;
__gshared glIsImageHandleResidentNV_Z_Z = function GLboolean (GLuint64 handle) { return glIsImageHandleResidentNV_Z_Z_loader(handle); };
private GLboolean glIsImageHandleResidentNV_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glIsImageHandleResidentNV_Z_Z = glbindGetProcAddress(`glIsImageHandleResidentNV`);
  if (*cast(void**)&glIsImageHandleResidentNV_Z_Z is null) assert(0, `OpenGL function 'glIsImageHandleResidentNV' not found!`);
  return glIsImageHandleResidentNV_Z_Z(handle);
}
alias glIsList = glIsList_Z_Z;
__gshared glIsList_Z_Z = function GLboolean (GLuint list) { return glIsList_Z_Z_loader(list); };
private GLboolean glIsList_Z_Z_loader (GLuint list) {
  *cast(void**)&glIsList_Z_Z = glbindGetProcAddress(`glIsList`);
  if (*cast(void**)&glIsList_Z_Z is null) assert(0, `OpenGL function 'glIsList' not found!`);
  return glIsList_Z_Z(list);
}
alias glIsMemoryObjectEXT = glIsMemoryObjectEXT_Z_Z;
__gshared glIsMemoryObjectEXT_Z_Z = function GLboolean (GLuint memoryObject) { return glIsMemoryObjectEXT_Z_Z_loader(memoryObject); };
private GLboolean glIsMemoryObjectEXT_Z_Z_loader (GLuint memoryObject) {
  *cast(void**)&glIsMemoryObjectEXT_Z_Z = glbindGetProcAddress(`glIsMemoryObjectEXT`);
  if (*cast(void**)&glIsMemoryObjectEXT_Z_Z is null) assert(0, `OpenGL function 'glIsMemoryObjectEXT' not found!`);
  return glIsMemoryObjectEXT_Z_Z(memoryObject);
}
alias glIsNameAMD = glIsNameAMD_Z_Z;
__gshared glIsNameAMD_Z_Z = function GLboolean (GLenum identifier, GLuint name) { return glIsNameAMD_Z_Z_loader(identifier, name); };
private GLboolean glIsNameAMD_Z_Z_loader (GLenum identifier, GLuint name) {
  *cast(void**)&glIsNameAMD_Z_Z = glbindGetProcAddress(`glIsNameAMD`);
  if (*cast(void**)&glIsNameAMD_Z_Z is null) assert(0, `OpenGL function 'glIsNameAMD' not found!`);
  return glIsNameAMD_Z_Z(identifier, name);
}
alias glIsNamedBufferResidentNV = glIsNamedBufferResidentNV_Z_Z;
__gshared glIsNamedBufferResidentNV_Z_Z = function GLboolean (GLuint buffer) { return glIsNamedBufferResidentNV_Z_Z_loader(buffer); };
private GLboolean glIsNamedBufferResidentNV_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glIsNamedBufferResidentNV_Z_Z = glbindGetProcAddress(`glIsNamedBufferResidentNV`);
  if (*cast(void**)&glIsNamedBufferResidentNV_Z_Z is null) assert(0, `OpenGL function 'glIsNamedBufferResidentNV' not found!`);
  return glIsNamedBufferResidentNV_Z_Z(buffer);
}
alias glIsNamedStringARB = glIsNamedStringARB_Z_Z;
__gshared glIsNamedStringARB_Z_Z = function GLboolean (GLint namelen, const(GLchar)* name) { return glIsNamedStringARB_Z_Z_loader(namelen, name); };
private GLboolean glIsNamedStringARB_Z_Z_loader (GLint namelen, const(GLchar)* name) {
  *cast(void**)&glIsNamedStringARB_Z_Z = glbindGetProcAddress(`glIsNamedStringARB`);
  if (*cast(void**)&glIsNamedStringARB_Z_Z is null) assert(0, `OpenGL function 'glIsNamedStringARB' not found!`);
  return glIsNamedStringARB_Z_Z(namelen, name);
}
alias glIsObjectBufferATI = glIsObjectBufferATI_Z_Z;
__gshared glIsObjectBufferATI_Z_Z = function GLboolean (GLuint buffer) { return glIsObjectBufferATI_Z_Z_loader(buffer); };
private GLboolean glIsObjectBufferATI_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glIsObjectBufferATI_Z_Z = glbindGetProcAddress(`glIsObjectBufferATI`);
  if (*cast(void**)&glIsObjectBufferATI_Z_Z is null) assert(0, `OpenGL function 'glIsObjectBufferATI' not found!`);
  return glIsObjectBufferATI_Z_Z(buffer);
}
alias glIsOcclusionQueryNV = glIsOcclusionQueryNV_Z_Z;
__gshared glIsOcclusionQueryNV_Z_Z = function GLboolean (GLuint id) { return glIsOcclusionQueryNV_Z_Z_loader(id); };
private GLboolean glIsOcclusionQueryNV_Z_Z_loader (GLuint id) {
  *cast(void**)&glIsOcclusionQueryNV_Z_Z = glbindGetProcAddress(`glIsOcclusionQueryNV`);
  if (*cast(void**)&glIsOcclusionQueryNV_Z_Z is null) assert(0, `OpenGL function 'glIsOcclusionQueryNV' not found!`);
  return glIsOcclusionQueryNV_Z_Z(id);
}
alias glIsPathNV = glIsPathNV_Z_Z;
__gshared glIsPathNV_Z_Z = function GLboolean (GLuint path) { return glIsPathNV_Z_Z_loader(path); };
private GLboolean glIsPathNV_Z_Z_loader (GLuint path) {
  *cast(void**)&glIsPathNV_Z_Z = glbindGetProcAddress(`glIsPathNV`);
  if (*cast(void**)&glIsPathNV_Z_Z is null) assert(0, `OpenGL function 'glIsPathNV' not found!`);
  return glIsPathNV_Z_Z(path);
}
alias glIsPointInFillPathNV = glIsPointInFillPathNV_Z_Z;
__gshared glIsPointInFillPathNV_Z_Z = function GLboolean (GLuint path, GLuint mask, GLfloat x, GLfloat y) { return glIsPointInFillPathNV_Z_Z_loader(path, mask, x, y); };
private GLboolean glIsPointInFillPathNV_Z_Z_loader (GLuint path, GLuint mask, GLfloat x, GLfloat y) {
  *cast(void**)&glIsPointInFillPathNV_Z_Z = glbindGetProcAddress(`glIsPointInFillPathNV`);
  if (*cast(void**)&glIsPointInFillPathNV_Z_Z is null) assert(0, `OpenGL function 'glIsPointInFillPathNV' not found!`);
  return glIsPointInFillPathNV_Z_Z(path, mask, x, y);
}
alias glIsPointInStrokePathNV = glIsPointInStrokePathNV_Z_Z;
__gshared glIsPointInStrokePathNV_Z_Z = function GLboolean (GLuint path, GLfloat x, GLfloat y) { return glIsPointInStrokePathNV_Z_Z_loader(path, x, y); };
private GLboolean glIsPointInStrokePathNV_Z_Z_loader (GLuint path, GLfloat x, GLfloat y) {
  *cast(void**)&glIsPointInStrokePathNV_Z_Z = glbindGetProcAddress(`glIsPointInStrokePathNV`);
  if (*cast(void**)&glIsPointInStrokePathNV_Z_Z is null) assert(0, `OpenGL function 'glIsPointInStrokePathNV' not found!`);
  return glIsPointInStrokePathNV_Z_Z(path, x, y);
}
alias glIsProgram = glIsProgram_Z_Z;
__gshared glIsProgram_Z_Z = function GLboolean (GLuint program) { return glIsProgram_Z_Z_loader(program); };
private GLboolean glIsProgram_Z_Z_loader (GLuint program) {
  *cast(void**)&glIsProgram_Z_Z = glbindGetProcAddress(`glIsProgram`);
  if (*cast(void**)&glIsProgram_Z_Z is null) assert(0, `OpenGL function 'glIsProgram' not found!`);
  return glIsProgram_Z_Z(program);
}
alias glIsProgramARB = glIsProgramARB_Z_Z;
__gshared glIsProgramARB_Z_Z = function GLboolean (GLuint program) { return glIsProgramARB_Z_Z_loader(program); };
private GLboolean glIsProgramARB_Z_Z_loader (GLuint program) {
  *cast(void**)&glIsProgramARB_Z_Z = glbindGetProcAddress(`glIsProgramARB`);
  if (*cast(void**)&glIsProgramARB_Z_Z is null) assert(0, `OpenGL function 'glIsProgramARB' not found!`);
  return glIsProgramARB_Z_Z(program);
}
alias glIsProgramNV = glIsProgramNV_Z_Z;
__gshared glIsProgramNV_Z_Z = function GLboolean (GLuint id) { return glIsProgramNV_Z_Z_loader(id); };
private GLboolean glIsProgramNV_Z_Z_loader (GLuint id) {
  *cast(void**)&glIsProgramNV_Z_Z = glbindGetProcAddress(`glIsProgramNV`);
  if (*cast(void**)&glIsProgramNV_Z_Z is null) assert(0, `OpenGL function 'glIsProgramNV' not found!`);
  return glIsProgramNV_Z_Z(id);
}
alias glIsProgramPipeline = glIsProgramPipeline_Z_Z;
__gshared glIsProgramPipeline_Z_Z = function GLboolean (GLuint pipeline) { return glIsProgramPipeline_Z_Z_loader(pipeline); };
private GLboolean glIsProgramPipeline_Z_Z_loader (GLuint pipeline) {
  *cast(void**)&glIsProgramPipeline_Z_Z = glbindGetProcAddress(`glIsProgramPipeline`);
  if (*cast(void**)&glIsProgramPipeline_Z_Z is null) assert(0, `OpenGL function 'glIsProgramPipeline' not found!`);
  return glIsProgramPipeline_Z_Z(pipeline);
}
alias glIsProgramPipelineEXT = glIsProgramPipelineEXT_Z_Z;
__gshared glIsProgramPipelineEXT_Z_Z = function GLboolean (GLuint pipeline) { return glIsProgramPipelineEXT_Z_Z_loader(pipeline); };
private GLboolean glIsProgramPipelineEXT_Z_Z_loader (GLuint pipeline) {
  *cast(void**)&glIsProgramPipelineEXT_Z_Z = glbindGetProcAddress(`glIsProgramPipelineEXT`);
  if (*cast(void**)&glIsProgramPipelineEXT_Z_Z is null) assert(0, `OpenGL function 'glIsProgramPipelineEXT' not found!`);
  return glIsProgramPipelineEXT_Z_Z(pipeline);
}
alias glIsQuery = glIsQuery_Z_Z;
__gshared glIsQuery_Z_Z = function GLboolean (GLuint id) { return glIsQuery_Z_Z_loader(id); };
private GLboolean glIsQuery_Z_Z_loader (GLuint id) {
  *cast(void**)&glIsQuery_Z_Z = glbindGetProcAddress(`glIsQuery`);
  if (*cast(void**)&glIsQuery_Z_Z is null) assert(0, `OpenGL function 'glIsQuery' not found!`);
  return glIsQuery_Z_Z(id);
}
alias glIsQueryARB = glIsQueryARB_Z_Z;
__gshared glIsQueryARB_Z_Z = function GLboolean (GLuint id) { return glIsQueryARB_Z_Z_loader(id); };
private GLboolean glIsQueryARB_Z_Z_loader (GLuint id) {
  *cast(void**)&glIsQueryARB_Z_Z = glbindGetProcAddress(`glIsQueryARB`);
  if (*cast(void**)&glIsQueryARB_Z_Z is null) assert(0, `OpenGL function 'glIsQueryARB' not found!`);
  return glIsQueryARB_Z_Z(id);
}
alias glIsQueryEXT = glIsQueryEXT_Z_Z;
__gshared glIsQueryEXT_Z_Z = function GLboolean (GLuint id) { return glIsQueryEXT_Z_Z_loader(id); };
private GLboolean glIsQueryEXT_Z_Z_loader (GLuint id) {
  *cast(void**)&glIsQueryEXT_Z_Z = glbindGetProcAddress(`glIsQueryEXT`);
  if (*cast(void**)&glIsQueryEXT_Z_Z is null) assert(0, `OpenGL function 'glIsQueryEXT' not found!`);
  return glIsQueryEXT_Z_Z(id);
}
alias glIsRenderbuffer = glIsRenderbuffer_Z_Z;
__gshared glIsRenderbuffer_Z_Z = function GLboolean (GLuint renderbuffer) { return glIsRenderbuffer_Z_Z_loader(renderbuffer); };
private GLboolean glIsRenderbuffer_Z_Z_loader (GLuint renderbuffer) {
  *cast(void**)&glIsRenderbuffer_Z_Z = glbindGetProcAddress(`glIsRenderbuffer`);
  if (*cast(void**)&glIsRenderbuffer_Z_Z is null) assert(0, `OpenGL function 'glIsRenderbuffer' not found!`);
  return glIsRenderbuffer_Z_Z(renderbuffer);
}
alias glIsRenderbufferEXT = glIsRenderbufferEXT_Z_Z;
__gshared glIsRenderbufferEXT_Z_Z = function GLboolean (GLuint renderbuffer) { return glIsRenderbufferEXT_Z_Z_loader(renderbuffer); };
private GLboolean glIsRenderbufferEXT_Z_Z_loader (GLuint renderbuffer) {
  *cast(void**)&glIsRenderbufferEXT_Z_Z = glbindGetProcAddress(`glIsRenderbufferEXT`);
  if (*cast(void**)&glIsRenderbufferEXT_Z_Z is null) assert(0, `OpenGL function 'glIsRenderbufferEXT' not found!`);
  return glIsRenderbufferEXT_Z_Z(renderbuffer);
}
alias glIsRenderbufferOES = glIsRenderbufferOES_Z_Z;
__gshared glIsRenderbufferOES_Z_Z = function GLboolean (GLuint renderbuffer) { return glIsRenderbufferOES_Z_Z_loader(renderbuffer); };
private GLboolean glIsRenderbufferOES_Z_Z_loader (GLuint renderbuffer) {
  *cast(void**)&glIsRenderbufferOES_Z_Z = glbindGetProcAddress(`glIsRenderbufferOES`);
  if (*cast(void**)&glIsRenderbufferOES_Z_Z is null) assert(0, `OpenGL function 'glIsRenderbufferOES' not found!`);
  return glIsRenderbufferOES_Z_Z(renderbuffer);
}
alias glIsSemaphoreEXT = glIsSemaphoreEXT_Z_Z;
__gshared glIsSemaphoreEXT_Z_Z = function GLboolean (GLuint semaphore) { return glIsSemaphoreEXT_Z_Z_loader(semaphore); };
private GLboolean glIsSemaphoreEXT_Z_Z_loader (GLuint semaphore) {
  *cast(void**)&glIsSemaphoreEXT_Z_Z = glbindGetProcAddress(`glIsSemaphoreEXT`);
  if (*cast(void**)&glIsSemaphoreEXT_Z_Z is null) assert(0, `OpenGL function 'glIsSemaphoreEXT' not found!`);
  return glIsSemaphoreEXT_Z_Z(semaphore);
}
alias glIsSampler = glIsSampler_Z_Z;
__gshared glIsSampler_Z_Z = function GLboolean (GLuint sampler) { return glIsSampler_Z_Z_loader(sampler); };
private GLboolean glIsSampler_Z_Z_loader (GLuint sampler) {
  *cast(void**)&glIsSampler_Z_Z = glbindGetProcAddress(`glIsSampler`);
  if (*cast(void**)&glIsSampler_Z_Z is null) assert(0, `OpenGL function 'glIsSampler' not found!`);
  return glIsSampler_Z_Z(sampler);
}
alias glIsShader = glIsShader_Z_Z;
__gshared glIsShader_Z_Z = function GLboolean (GLuint shader) { return glIsShader_Z_Z_loader(shader); };
private GLboolean glIsShader_Z_Z_loader (GLuint shader) {
  *cast(void**)&glIsShader_Z_Z = glbindGetProcAddress(`glIsShader`);
  if (*cast(void**)&glIsShader_Z_Z is null) assert(0, `OpenGL function 'glIsShader' not found!`);
  return glIsShader_Z_Z(shader);
}
alias glIsStateNV = glIsStateNV_Z_Z;
__gshared glIsStateNV_Z_Z = function GLboolean (GLuint state) { return glIsStateNV_Z_Z_loader(state); };
private GLboolean glIsStateNV_Z_Z_loader (GLuint state) {
  *cast(void**)&glIsStateNV_Z_Z = glbindGetProcAddress(`glIsStateNV`);
  if (*cast(void**)&glIsStateNV_Z_Z is null) assert(0, `OpenGL function 'glIsStateNV' not found!`);
  return glIsStateNV_Z_Z(state);
}
alias glIsSync = glIsSync_Z_Z;
__gshared glIsSync_Z_Z = function GLboolean (GLsync sync) { return glIsSync_Z_Z_loader(sync); };
private GLboolean glIsSync_Z_Z_loader (GLsync sync) {
  *cast(void**)&glIsSync_Z_Z = glbindGetProcAddress(`glIsSync`);
  if (*cast(void**)&glIsSync_Z_Z is null) assert(0, `OpenGL function 'glIsSync' not found!`);
  return glIsSync_Z_Z(sync);
}
alias glIsSyncAPPLE = glIsSyncAPPLE_Z_Z;
__gshared glIsSyncAPPLE_Z_Z = function GLboolean (GLsync sync) { return glIsSyncAPPLE_Z_Z_loader(sync); };
private GLboolean glIsSyncAPPLE_Z_Z_loader (GLsync sync) {
  *cast(void**)&glIsSyncAPPLE_Z_Z = glbindGetProcAddress(`glIsSyncAPPLE`);
  if (*cast(void**)&glIsSyncAPPLE_Z_Z is null) assert(0, `OpenGL function 'glIsSyncAPPLE' not found!`);
  return glIsSyncAPPLE_Z_Z(sync);
}
alias glIsTexture = glIsTexture_Z_Z;
__gshared glIsTexture_Z_Z = function GLboolean (GLuint texture) { return glIsTexture_Z_Z_loader(texture); };
private GLboolean glIsTexture_Z_Z_loader (GLuint texture) {
  *cast(void**)&glIsTexture_Z_Z = glbindGetProcAddress(`glIsTexture`);
  if (*cast(void**)&glIsTexture_Z_Z is null) assert(0, `OpenGL function 'glIsTexture' not found!`);
  return glIsTexture_Z_Z(texture);
}
alias glIsTextureEXT = glIsTextureEXT_Z_Z;
__gshared glIsTextureEXT_Z_Z = function GLboolean (GLuint texture) { return glIsTextureEXT_Z_Z_loader(texture); };
private GLboolean glIsTextureEXT_Z_Z_loader (GLuint texture) {
  *cast(void**)&glIsTextureEXT_Z_Z = glbindGetProcAddress(`glIsTextureEXT`);
  if (*cast(void**)&glIsTextureEXT_Z_Z is null) assert(0, `OpenGL function 'glIsTextureEXT' not found!`);
  return glIsTextureEXT_Z_Z(texture);
}
alias glIsTextureHandleResidentARB = glIsTextureHandleResidentARB_Z_Z;
__gshared glIsTextureHandleResidentARB_Z_Z = function GLboolean (GLuint64 handle) { return glIsTextureHandleResidentARB_Z_Z_loader(handle); };
private GLboolean glIsTextureHandleResidentARB_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glIsTextureHandleResidentARB_Z_Z = glbindGetProcAddress(`glIsTextureHandleResidentARB`);
  if (*cast(void**)&glIsTextureHandleResidentARB_Z_Z is null) assert(0, `OpenGL function 'glIsTextureHandleResidentARB' not found!`);
  return glIsTextureHandleResidentARB_Z_Z(handle);
}
alias glIsTextureHandleResidentNV = glIsTextureHandleResidentNV_Z_Z;
__gshared glIsTextureHandleResidentNV_Z_Z = function GLboolean (GLuint64 handle) { return glIsTextureHandleResidentNV_Z_Z_loader(handle); };
private GLboolean glIsTextureHandleResidentNV_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glIsTextureHandleResidentNV_Z_Z = glbindGetProcAddress(`glIsTextureHandleResidentNV`);
  if (*cast(void**)&glIsTextureHandleResidentNV_Z_Z is null) assert(0, `OpenGL function 'glIsTextureHandleResidentNV' not found!`);
  return glIsTextureHandleResidentNV_Z_Z(handle);
}
alias glIsTransformFeedback = glIsTransformFeedback_Z_Z;
__gshared glIsTransformFeedback_Z_Z = function GLboolean (GLuint id) { return glIsTransformFeedback_Z_Z_loader(id); };
private GLboolean glIsTransformFeedback_Z_Z_loader (GLuint id) {
  *cast(void**)&glIsTransformFeedback_Z_Z = glbindGetProcAddress(`glIsTransformFeedback`);
  if (*cast(void**)&glIsTransformFeedback_Z_Z is null) assert(0, `OpenGL function 'glIsTransformFeedback' not found!`);
  return glIsTransformFeedback_Z_Z(id);
}
alias glIsTransformFeedbackNV = glIsTransformFeedbackNV_Z_Z;
__gshared glIsTransformFeedbackNV_Z_Z = function GLboolean (GLuint id) { return glIsTransformFeedbackNV_Z_Z_loader(id); };
private GLboolean glIsTransformFeedbackNV_Z_Z_loader (GLuint id) {
  *cast(void**)&glIsTransformFeedbackNV_Z_Z = glbindGetProcAddress(`glIsTransformFeedbackNV`);
  if (*cast(void**)&glIsTransformFeedbackNV_Z_Z is null) assert(0, `OpenGL function 'glIsTransformFeedbackNV' not found!`);
  return glIsTransformFeedbackNV_Z_Z(id);
}
alias glIsVariantEnabledEXT = glIsVariantEnabledEXT_Z_Z;
__gshared glIsVariantEnabledEXT_Z_Z = function GLboolean (GLuint id, GLenum cap) { return glIsVariantEnabledEXT_Z_Z_loader(id, cap); };
private GLboolean glIsVariantEnabledEXT_Z_Z_loader (GLuint id, GLenum cap) {
  *cast(void**)&glIsVariantEnabledEXT_Z_Z = glbindGetProcAddress(`glIsVariantEnabledEXT`);
  if (*cast(void**)&glIsVariantEnabledEXT_Z_Z is null) assert(0, `OpenGL function 'glIsVariantEnabledEXT' not found!`);
  return glIsVariantEnabledEXT_Z_Z(id, cap);
}
alias glIsVertexArray = glIsVertexArray_Z_Z;
__gshared glIsVertexArray_Z_Z = function GLboolean (GLuint array) { return glIsVertexArray_Z_Z_loader(array); };
private GLboolean glIsVertexArray_Z_Z_loader (GLuint array) {
  *cast(void**)&glIsVertexArray_Z_Z = glbindGetProcAddress(`glIsVertexArray`);
  if (*cast(void**)&glIsVertexArray_Z_Z is null) assert(0, `OpenGL function 'glIsVertexArray' not found!`);
  return glIsVertexArray_Z_Z(array);
}
alias glIsVertexArrayAPPLE = glIsVertexArrayAPPLE_Z_Z;
__gshared glIsVertexArrayAPPLE_Z_Z = function GLboolean (GLuint array) { return glIsVertexArrayAPPLE_Z_Z_loader(array); };
private GLboolean glIsVertexArrayAPPLE_Z_Z_loader (GLuint array) {
  *cast(void**)&glIsVertexArrayAPPLE_Z_Z = glbindGetProcAddress(`glIsVertexArrayAPPLE`);
  if (*cast(void**)&glIsVertexArrayAPPLE_Z_Z is null) assert(0, `OpenGL function 'glIsVertexArrayAPPLE' not found!`);
  return glIsVertexArrayAPPLE_Z_Z(array);
}
alias glIsVertexArrayOES = glIsVertexArrayOES_Z_Z;
__gshared glIsVertexArrayOES_Z_Z = function GLboolean (GLuint array) { return glIsVertexArrayOES_Z_Z_loader(array); };
private GLboolean glIsVertexArrayOES_Z_Z_loader (GLuint array) {
  *cast(void**)&glIsVertexArrayOES_Z_Z = glbindGetProcAddress(`glIsVertexArrayOES`);
  if (*cast(void**)&glIsVertexArrayOES_Z_Z is null) assert(0, `OpenGL function 'glIsVertexArrayOES' not found!`);
  return glIsVertexArrayOES_Z_Z(array);
}
alias glIsVertexAttribEnabledAPPLE = glIsVertexAttribEnabledAPPLE_Z_Z;
__gshared glIsVertexAttribEnabledAPPLE_Z_Z = function GLboolean (GLuint index, GLenum pname) { return glIsVertexAttribEnabledAPPLE_Z_Z_loader(index, pname); };
private GLboolean glIsVertexAttribEnabledAPPLE_Z_Z_loader (GLuint index, GLenum pname) {
  *cast(void**)&glIsVertexAttribEnabledAPPLE_Z_Z = glbindGetProcAddress(`glIsVertexAttribEnabledAPPLE`);
  if (*cast(void**)&glIsVertexAttribEnabledAPPLE_Z_Z is null) assert(0, `OpenGL function 'glIsVertexAttribEnabledAPPLE' not found!`);
  return glIsVertexAttribEnabledAPPLE_Z_Z(index, pname);
}
alias glLGPUCopyImageSubDataNVX = glLGPUCopyImageSubDataNVX_Z_Z;
__gshared glLGPUCopyImageSubDataNVX_Z_Z = function void (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { glLGPUCopyImageSubDataNVX_Z_Z_loader(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); };
private void glLGPUCopyImageSubDataNVX_Z_Z_loader (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  *cast(void**)&glLGPUCopyImageSubDataNVX_Z_Z = glbindGetProcAddress(`glLGPUCopyImageSubDataNVX`);
  if (*cast(void**)&glLGPUCopyImageSubDataNVX_Z_Z is null) assert(0, `OpenGL function 'glLGPUCopyImageSubDataNVX' not found!`);
  glLGPUCopyImageSubDataNVX_Z_Z(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}
alias glLGPUInterlockNVX = glLGPUInterlockNVX_Z_Z;
__gshared glLGPUInterlockNVX_Z_Z = function void () { glLGPUInterlockNVX_Z_Z_loader(); };
private void glLGPUInterlockNVX_Z_Z_loader () {
  *cast(void**)&glLGPUInterlockNVX_Z_Z = glbindGetProcAddress(`glLGPUInterlockNVX`);
  if (*cast(void**)&glLGPUInterlockNVX_Z_Z is null) assert(0, `OpenGL function 'glLGPUInterlockNVX' not found!`);
  glLGPUInterlockNVX_Z_Z();
}
alias glLGPUNamedBufferSubDataNVX = glLGPUNamedBufferSubDataNVX_Z_Z;
__gshared glLGPUNamedBufferSubDataNVX_Z_Z = function void (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const(void)* data) { glLGPUNamedBufferSubDataNVX_Z_Z_loader(gpuMask, buffer, offset, size, data); };
private void glLGPUNamedBufferSubDataNVX_Z_Z_loader (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const(void)* data) {
  *cast(void**)&glLGPUNamedBufferSubDataNVX_Z_Z = glbindGetProcAddress(`glLGPUNamedBufferSubDataNVX`);
  if (*cast(void**)&glLGPUNamedBufferSubDataNVX_Z_Z is null) assert(0, `OpenGL function 'glLGPUNamedBufferSubDataNVX' not found!`);
  glLGPUNamedBufferSubDataNVX_Z_Z(gpuMask, buffer, offset, size, data);
}
alias glLabelObjectEXT = glLabelObjectEXT_Z_Z;
__gshared glLabelObjectEXT_Z_Z = function void (GLenum type, GLuint object, GLsizei length, const(GLchar)* label) { glLabelObjectEXT_Z_Z_loader(type, object, length, label); };
private void glLabelObjectEXT_Z_Z_loader (GLenum type, GLuint object, GLsizei length, const(GLchar)* label) {
  *cast(void**)&glLabelObjectEXT_Z_Z = glbindGetProcAddress(`glLabelObjectEXT`);
  if (*cast(void**)&glLabelObjectEXT_Z_Z is null) assert(0, `OpenGL function 'glLabelObjectEXT' not found!`);
  glLabelObjectEXT_Z_Z(type, object, length, label);
}
alias glLightEnviSGIX = glLightEnviSGIX_Z_Z;
__gshared glLightEnviSGIX_Z_Z = function void (GLenum pname, GLint param) { glLightEnviSGIX_Z_Z_loader(pname, param); };
private void glLightEnviSGIX_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glLightEnviSGIX_Z_Z = glbindGetProcAddress(`glLightEnviSGIX`);
  if (*cast(void**)&glLightEnviSGIX_Z_Z is null) assert(0, `OpenGL function 'glLightEnviSGIX' not found!`);
  glLightEnviSGIX_Z_Z(pname, param);
}
alias glLightModelf = glLightModelf_Z_Z;
__gshared glLightModelf_Z_Z = function void (GLenum pname, GLfloat param) { glLightModelf_Z_Z_loader(pname, param); };
private void glLightModelf_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glLightModelf_Z_Z = glbindGetProcAddress(`glLightModelf`);
  if (*cast(void**)&glLightModelf_Z_Z is null) assert(0, `OpenGL function 'glLightModelf' not found!`);
  glLightModelf_Z_Z(pname, param);
}
alias glLightModelfv = glLightModelfv_Z_Z;
__gshared glLightModelfv_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glLightModelfv_Z_Z_loader(pname, params); };
private void glLightModelfv_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glLightModelfv_Z_Z = glbindGetProcAddress(`glLightModelfv`);
  if (*cast(void**)&glLightModelfv_Z_Z is null) assert(0, `OpenGL function 'glLightModelfv' not found!`);
  glLightModelfv_Z_Z(pname, params);
}
alias glLightModeli = glLightModeli_Z_Z;
__gshared glLightModeli_Z_Z = function void (GLenum pname, GLint param) { glLightModeli_Z_Z_loader(pname, param); };
private void glLightModeli_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glLightModeli_Z_Z = glbindGetProcAddress(`glLightModeli`);
  if (*cast(void**)&glLightModeli_Z_Z is null) assert(0, `OpenGL function 'glLightModeli' not found!`);
  glLightModeli_Z_Z(pname, param);
}
alias glLightModeliv = glLightModeliv_Z_Z;
__gshared glLightModeliv_Z_Z = function void (GLenum pname, const(GLint)* params) { glLightModeliv_Z_Z_loader(pname, params); };
private void glLightModeliv_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glLightModeliv_Z_Z = glbindGetProcAddress(`glLightModeliv`);
  if (*cast(void**)&glLightModeliv_Z_Z is null) assert(0, `OpenGL function 'glLightModeliv' not found!`);
  glLightModeliv_Z_Z(pname, params);
}
alias glLightModelx = glLightModelx_Z_Z;
__gshared glLightModelx_Z_Z = function void (GLenum pname, GLfixed param) { glLightModelx_Z_Z_loader(pname, param); };
private void glLightModelx_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glLightModelx_Z_Z = glbindGetProcAddress(`glLightModelx`);
  if (*cast(void**)&glLightModelx_Z_Z is null) assert(0, `OpenGL function 'glLightModelx' not found!`);
  glLightModelx_Z_Z(pname, param);
}
alias glLightModelxOES = glLightModelxOES_Z_Z;
__gshared glLightModelxOES_Z_Z = function void (GLenum pname, GLfixed param) { glLightModelxOES_Z_Z_loader(pname, param); };
private void glLightModelxOES_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glLightModelxOES_Z_Z = glbindGetProcAddress(`glLightModelxOES`);
  if (*cast(void**)&glLightModelxOES_Z_Z is null) assert(0, `OpenGL function 'glLightModelxOES' not found!`);
  glLightModelxOES_Z_Z(pname, param);
}
alias glLightModelxv = glLightModelxv_Z_Z;
__gshared glLightModelxv_Z_Z = function void (GLenum pname, const(GLfixed)* param) { glLightModelxv_Z_Z_loader(pname, param); };
private void glLightModelxv_Z_Z_loader (GLenum pname, const(GLfixed)* param) {
  *cast(void**)&glLightModelxv_Z_Z = glbindGetProcAddress(`glLightModelxv`);
  if (*cast(void**)&glLightModelxv_Z_Z is null) assert(0, `OpenGL function 'glLightModelxv' not found!`);
  glLightModelxv_Z_Z(pname, param);
}
alias glLightModelxvOES = glLightModelxvOES_Z_Z;
__gshared glLightModelxvOES_Z_Z = function void (GLenum pname, const(GLfixed)* param) { glLightModelxvOES_Z_Z_loader(pname, param); };
private void glLightModelxvOES_Z_Z_loader (GLenum pname, const(GLfixed)* param) {
  *cast(void**)&glLightModelxvOES_Z_Z = glbindGetProcAddress(`glLightModelxvOES`);
  if (*cast(void**)&glLightModelxvOES_Z_Z is null) assert(0, `OpenGL function 'glLightModelxvOES' not found!`);
  glLightModelxvOES_Z_Z(pname, param);
}
alias glLightf = glLightf_Z_Z;
__gshared glLightf_Z_Z = function void (GLenum light, GLenum pname, GLfloat param) { glLightf_Z_Z_loader(light, pname, param); };
private void glLightf_Z_Z_loader (GLenum light, GLenum pname, GLfloat param) {
  *cast(void**)&glLightf_Z_Z = glbindGetProcAddress(`glLightf`);
  if (*cast(void**)&glLightf_Z_Z is null) assert(0, `OpenGL function 'glLightf' not found!`);
  glLightf_Z_Z(light, pname, param);
}
alias glLightfv = glLightfv_Z_Z;
__gshared glLightfv_Z_Z = function void (GLenum light, GLenum pname, const(GLfloat)* params) { glLightfv_Z_Z_loader(light, pname, params); };
private void glLightfv_Z_Z_loader (GLenum light, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glLightfv_Z_Z = glbindGetProcAddress(`glLightfv`);
  if (*cast(void**)&glLightfv_Z_Z is null) assert(0, `OpenGL function 'glLightfv' not found!`);
  glLightfv_Z_Z(light, pname, params);
}
alias glLighti = glLighti_Z_Z;
__gshared glLighti_Z_Z = function void (GLenum light, GLenum pname, GLint param) { glLighti_Z_Z_loader(light, pname, param); };
private void glLighti_Z_Z_loader (GLenum light, GLenum pname, GLint param) {
  *cast(void**)&glLighti_Z_Z = glbindGetProcAddress(`glLighti`);
  if (*cast(void**)&glLighti_Z_Z is null) assert(0, `OpenGL function 'glLighti' not found!`);
  glLighti_Z_Z(light, pname, param);
}
alias glLightiv = glLightiv_Z_Z;
__gshared glLightiv_Z_Z = function void (GLenum light, GLenum pname, const(GLint)* params) { glLightiv_Z_Z_loader(light, pname, params); };
private void glLightiv_Z_Z_loader (GLenum light, GLenum pname, const(GLint)* params) {
  *cast(void**)&glLightiv_Z_Z = glbindGetProcAddress(`glLightiv`);
  if (*cast(void**)&glLightiv_Z_Z is null) assert(0, `OpenGL function 'glLightiv' not found!`);
  glLightiv_Z_Z(light, pname, params);
}
alias glLightx = glLightx_Z_Z;
__gshared glLightx_Z_Z = function void (GLenum light, GLenum pname, GLfixed param) { glLightx_Z_Z_loader(light, pname, param); };
private void glLightx_Z_Z_loader (GLenum light, GLenum pname, GLfixed param) {
  *cast(void**)&glLightx_Z_Z = glbindGetProcAddress(`glLightx`);
  if (*cast(void**)&glLightx_Z_Z is null) assert(0, `OpenGL function 'glLightx' not found!`);
  glLightx_Z_Z(light, pname, param);
}
alias glLightxOES = glLightxOES_Z_Z;
__gshared glLightxOES_Z_Z = function void (GLenum light, GLenum pname, GLfixed param) { glLightxOES_Z_Z_loader(light, pname, param); };
private void glLightxOES_Z_Z_loader (GLenum light, GLenum pname, GLfixed param) {
  *cast(void**)&glLightxOES_Z_Z = glbindGetProcAddress(`glLightxOES`);
  if (*cast(void**)&glLightxOES_Z_Z is null) assert(0, `OpenGL function 'glLightxOES' not found!`);
  glLightxOES_Z_Z(light, pname, param);
}
alias glLightxv = glLightxv_Z_Z;
__gshared glLightxv_Z_Z = function void (GLenum light, GLenum pname, const(GLfixed)* params) { glLightxv_Z_Z_loader(light, pname, params); };
private void glLightxv_Z_Z_loader (GLenum light, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glLightxv_Z_Z = glbindGetProcAddress(`glLightxv`);
  if (*cast(void**)&glLightxv_Z_Z is null) assert(0, `OpenGL function 'glLightxv' not found!`);
  glLightxv_Z_Z(light, pname, params);
}
alias glLightxvOES = glLightxvOES_Z_Z;
__gshared glLightxvOES_Z_Z = function void (GLenum light, GLenum pname, const(GLfixed)* params) { glLightxvOES_Z_Z_loader(light, pname, params); };
private void glLightxvOES_Z_Z_loader (GLenum light, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glLightxvOES_Z_Z = glbindGetProcAddress(`glLightxvOES`);
  if (*cast(void**)&glLightxvOES_Z_Z is null) assert(0, `OpenGL function 'glLightxvOES' not found!`);
  glLightxvOES_Z_Z(light, pname, params);
}
alias glLineStipple = glLineStipple_Z_Z;
__gshared glLineStipple_Z_Z = function void (GLint factor, GLushort pattern) { glLineStipple_Z_Z_loader(factor, pattern); };
private void glLineStipple_Z_Z_loader (GLint factor, GLushort pattern) {
  *cast(void**)&glLineStipple_Z_Z = glbindGetProcAddress(`glLineStipple`);
  if (*cast(void**)&glLineStipple_Z_Z is null) assert(0, `OpenGL function 'glLineStipple' not found!`);
  glLineStipple_Z_Z(factor, pattern);
}
alias glLineWidth = glLineWidth_Z_Z;
__gshared glLineWidth_Z_Z = function void (GLfloat width) { glLineWidth_Z_Z_loader(width); };
private void glLineWidth_Z_Z_loader (GLfloat width) {
  *cast(void**)&glLineWidth_Z_Z = glbindGetProcAddress(`glLineWidth`);
  if (*cast(void**)&glLineWidth_Z_Z is null) assert(0, `OpenGL function 'glLineWidth' not found!`);
  glLineWidth_Z_Z(width);
}
alias glLineWidthx = glLineWidthx_Z_Z;
__gshared glLineWidthx_Z_Z = function void (GLfixed width) { glLineWidthx_Z_Z_loader(width); };
private void glLineWidthx_Z_Z_loader (GLfixed width) {
  *cast(void**)&glLineWidthx_Z_Z = glbindGetProcAddress(`glLineWidthx`);
  if (*cast(void**)&glLineWidthx_Z_Z is null) assert(0, `OpenGL function 'glLineWidthx' not found!`);
  glLineWidthx_Z_Z(width);
}
alias glLineWidthxOES = glLineWidthxOES_Z_Z;
__gshared glLineWidthxOES_Z_Z = function void (GLfixed width) { glLineWidthxOES_Z_Z_loader(width); };
private void glLineWidthxOES_Z_Z_loader (GLfixed width) {
  *cast(void**)&glLineWidthxOES_Z_Z = glbindGetProcAddress(`glLineWidthxOES`);
  if (*cast(void**)&glLineWidthxOES_Z_Z is null) assert(0, `OpenGL function 'glLineWidthxOES' not found!`);
  glLineWidthxOES_Z_Z(width);
}
alias glLinkProgram = glLinkProgram_Z_Z;
__gshared glLinkProgram_Z_Z = function void (GLuint program) { glLinkProgram_Z_Z_loader(program); };
private void glLinkProgram_Z_Z_loader (GLuint program) {
  *cast(void**)&glLinkProgram_Z_Z = glbindGetProcAddress(`glLinkProgram`);
  if (*cast(void**)&glLinkProgram_Z_Z is null) assert(0, `OpenGL function 'glLinkProgram' not found!`);
  glLinkProgram_Z_Z(program);
}
alias glLinkProgramARB = glLinkProgramARB_Z_Z;
__gshared glLinkProgramARB_Z_Z = function void (GLhandleARB programObj) { glLinkProgramARB_Z_Z_loader(programObj); };
private void glLinkProgramARB_Z_Z_loader (GLhandleARB programObj) {
  *cast(void**)&glLinkProgramARB_Z_Z = glbindGetProcAddress(`glLinkProgramARB`);
  if (*cast(void**)&glLinkProgramARB_Z_Z is null) assert(0, `OpenGL function 'glLinkProgramARB' not found!`);
  glLinkProgramARB_Z_Z(programObj);
}
alias glListBase = glListBase_Z_Z;
__gshared glListBase_Z_Z = function void (GLuint base) { glListBase_Z_Z_loader(base); };
private void glListBase_Z_Z_loader (GLuint base) {
  *cast(void**)&glListBase_Z_Z = glbindGetProcAddress(`glListBase`);
  if (*cast(void**)&glListBase_Z_Z is null) assert(0, `OpenGL function 'glListBase' not found!`);
  glListBase_Z_Z(base);
}
alias glListDrawCommandsStatesClientNV = glListDrawCommandsStatesClientNV_Z_Z;
__gshared glListDrawCommandsStatesClientNV_Z_Z = function void (GLuint list, GLuint segment, const(void)** indirects, const(GLsizei)* sizes, const(GLuint)* states, const(GLuint)* fbos, GLuint count) { glListDrawCommandsStatesClientNV_Z_Z_loader(list, segment, indirects, sizes, states, fbos, count); };
private void glListDrawCommandsStatesClientNV_Z_Z_loader (GLuint list, GLuint segment, const(void)** indirects, const(GLsizei)* sizes, const(GLuint)* states, const(GLuint)* fbos, GLuint count) {
  *cast(void**)&glListDrawCommandsStatesClientNV_Z_Z = glbindGetProcAddress(`glListDrawCommandsStatesClientNV`);
  if (*cast(void**)&glListDrawCommandsStatesClientNV_Z_Z is null) assert(0, `OpenGL function 'glListDrawCommandsStatesClientNV' not found!`);
  glListDrawCommandsStatesClientNV_Z_Z(list, segment, indirects, sizes, states, fbos, count);
}
alias glListParameterfSGIX = glListParameterfSGIX_Z_Z;
__gshared glListParameterfSGIX_Z_Z = function void (GLuint list, GLenum pname, GLfloat param) { glListParameterfSGIX_Z_Z_loader(list, pname, param); };
private void glListParameterfSGIX_Z_Z_loader (GLuint list, GLenum pname, GLfloat param) {
  *cast(void**)&glListParameterfSGIX_Z_Z = glbindGetProcAddress(`glListParameterfSGIX`);
  if (*cast(void**)&glListParameterfSGIX_Z_Z is null) assert(0, `OpenGL function 'glListParameterfSGIX' not found!`);
  glListParameterfSGIX_Z_Z(list, pname, param);
}
alias glListParameterfvSGIX = glListParameterfvSGIX_Z_Z;
__gshared glListParameterfvSGIX_Z_Z = function void (GLuint list, GLenum pname, const(GLfloat)* params) { glListParameterfvSGIX_Z_Z_loader(list, pname, params); };
private void glListParameterfvSGIX_Z_Z_loader (GLuint list, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glListParameterfvSGIX_Z_Z = glbindGetProcAddress(`glListParameterfvSGIX`);
  if (*cast(void**)&glListParameterfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glListParameterfvSGIX' not found!`);
  glListParameterfvSGIX_Z_Z(list, pname, params);
}
alias glListParameteriSGIX = glListParameteriSGIX_Z_Z;
__gshared glListParameteriSGIX_Z_Z = function void (GLuint list, GLenum pname, GLint param) { glListParameteriSGIX_Z_Z_loader(list, pname, param); };
private void glListParameteriSGIX_Z_Z_loader (GLuint list, GLenum pname, GLint param) {
  *cast(void**)&glListParameteriSGIX_Z_Z = glbindGetProcAddress(`glListParameteriSGIX`);
  if (*cast(void**)&glListParameteriSGIX_Z_Z is null) assert(0, `OpenGL function 'glListParameteriSGIX' not found!`);
  glListParameteriSGIX_Z_Z(list, pname, param);
}
alias glListParameterivSGIX = glListParameterivSGIX_Z_Z;
__gshared glListParameterivSGIX_Z_Z = function void (GLuint list, GLenum pname, const(GLint)* params) { glListParameterivSGIX_Z_Z_loader(list, pname, params); };
private void glListParameterivSGIX_Z_Z_loader (GLuint list, GLenum pname, const(GLint)* params) {
  *cast(void**)&glListParameterivSGIX_Z_Z = glbindGetProcAddress(`glListParameterivSGIX`);
  if (*cast(void**)&glListParameterivSGIX_Z_Z is null) assert(0, `OpenGL function 'glListParameterivSGIX' not found!`);
  glListParameterivSGIX_Z_Z(list, pname, params);
}
alias glLoadIdentity = glLoadIdentity_Z_Z;
__gshared glLoadIdentity_Z_Z = function void () { glLoadIdentity_Z_Z_loader(); };
private void glLoadIdentity_Z_Z_loader () {
  *cast(void**)&glLoadIdentity_Z_Z = glbindGetProcAddress(`glLoadIdentity`);
  if (*cast(void**)&glLoadIdentity_Z_Z is null) assert(0, `OpenGL function 'glLoadIdentity' not found!`);
  glLoadIdentity_Z_Z();
}
alias glLoadIdentityDeformationMapSGIX = glLoadIdentityDeformationMapSGIX_Z_Z;
__gshared glLoadIdentityDeformationMapSGIX_Z_Z = function void (GLbitfield mask) { glLoadIdentityDeformationMapSGIX_Z_Z_loader(mask); };
private void glLoadIdentityDeformationMapSGIX_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glLoadIdentityDeformationMapSGIX_Z_Z = glbindGetProcAddress(`glLoadIdentityDeformationMapSGIX`);
  if (*cast(void**)&glLoadIdentityDeformationMapSGIX_Z_Z is null) assert(0, `OpenGL function 'glLoadIdentityDeformationMapSGIX' not found!`);
  glLoadIdentityDeformationMapSGIX_Z_Z(mask);
}
alias glLoadMatrixd = glLoadMatrixd_Z_Z;
__gshared glLoadMatrixd_Z_Z = function void (const(GLdouble)* m) { glLoadMatrixd_Z_Z_loader(m); };
private void glLoadMatrixd_Z_Z_loader (const(GLdouble)* m) {
  *cast(void**)&glLoadMatrixd_Z_Z = glbindGetProcAddress(`glLoadMatrixd`);
  if (*cast(void**)&glLoadMatrixd_Z_Z is null) assert(0, `OpenGL function 'glLoadMatrixd' not found!`);
  glLoadMatrixd_Z_Z(m);
}
alias glLoadMatrixf = glLoadMatrixf_Z_Z;
__gshared glLoadMatrixf_Z_Z = function void (const(GLfloat)* m) { glLoadMatrixf_Z_Z_loader(m); };
private void glLoadMatrixf_Z_Z_loader (const(GLfloat)* m) {
  *cast(void**)&glLoadMatrixf_Z_Z = glbindGetProcAddress(`glLoadMatrixf`);
  if (*cast(void**)&glLoadMatrixf_Z_Z is null) assert(0, `OpenGL function 'glLoadMatrixf' not found!`);
  glLoadMatrixf_Z_Z(m);
}
alias glLoadMatrixx = glLoadMatrixx_Z_Z;
__gshared glLoadMatrixx_Z_Z = function void (const(GLfixed)* m) { glLoadMatrixx_Z_Z_loader(m); };
private void glLoadMatrixx_Z_Z_loader (const(GLfixed)* m) {
  *cast(void**)&glLoadMatrixx_Z_Z = glbindGetProcAddress(`glLoadMatrixx`);
  if (*cast(void**)&glLoadMatrixx_Z_Z is null) assert(0, `OpenGL function 'glLoadMatrixx' not found!`);
  glLoadMatrixx_Z_Z(m);
}
alias glLoadMatrixxOES = glLoadMatrixxOES_Z_Z;
__gshared glLoadMatrixxOES_Z_Z = function void (const(GLfixed)* m) { glLoadMatrixxOES_Z_Z_loader(m); };
private void glLoadMatrixxOES_Z_Z_loader (const(GLfixed)* m) {
  *cast(void**)&glLoadMatrixxOES_Z_Z = glbindGetProcAddress(`glLoadMatrixxOES`);
  if (*cast(void**)&glLoadMatrixxOES_Z_Z is null) assert(0, `OpenGL function 'glLoadMatrixxOES' not found!`);
  glLoadMatrixxOES_Z_Z(m);
}
alias glLoadName = glLoadName_Z_Z;
__gshared glLoadName_Z_Z = function void (GLuint name) { glLoadName_Z_Z_loader(name); };
private void glLoadName_Z_Z_loader (GLuint name) {
  *cast(void**)&glLoadName_Z_Z = glbindGetProcAddress(`glLoadName`);
  if (*cast(void**)&glLoadName_Z_Z is null) assert(0, `OpenGL function 'glLoadName' not found!`);
  glLoadName_Z_Z(name);
}
alias glLoadPaletteFromModelViewMatrixOES = glLoadPaletteFromModelViewMatrixOES_Z_Z;
__gshared glLoadPaletteFromModelViewMatrixOES_Z_Z = function void () { glLoadPaletteFromModelViewMatrixOES_Z_Z_loader(); };
private void glLoadPaletteFromModelViewMatrixOES_Z_Z_loader () {
  *cast(void**)&glLoadPaletteFromModelViewMatrixOES_Z_Z = glbindGetProcAddress(`glLoadPaletteFromModelViewMatrixOES`);
  if (*cast(void**)&glLoadPaletteFromModelViewMatrixOES_Z_Z is null) assert(0, `OpenGL function 'glLoadPaletteFromModelViewMatrixOES' not found!`);
  glLoadPaletteFromModelViewMatrixOES_Z_Z();
}
alias glLoadProgramNV = glLoadProgramNV_Z_Z;
__gshared glLoadProgramNV_Z_Z = function void (GLenum target, GLuint id, GLsizei len, const(GLubyte)* program) { glLoadProgramNV_Z_Z_loader(target, id, len, program); };
private void glLoadProgramNV_Z_Z_loader (GLenum target, GLuint id, GLsizei len, const(GLubyte)* program) {
  *cast(void**)&glLoadProgramNV_Z_Z = glbindGetProcAddress(`glLoadProgramNV`);
  if (*cast(void**)&glLoadProgramNV_Z_Z is null) assert(0, `OpenGL function 'glLoadProgramNV' not found!`);
  glLoadProgramNV_Z_Z(target, id, len, program);
}
alias glLoadTransposeMatrixd = glLoadTransposeMatrixd_Z_Z;
__gshared glLoadTransposeMatrixd_Z_Z = function void (const(GLdouble)* m) { glLoadTransposeMatrixd_Z_Z_loader(m); };
private void glLoadTransposeMatrixd_Z_Z_loader (const(GLdouble)* m) {
  *cast(void**)&glLoadTransposeMatrixd_Z_Z = glbindGetProcAddress(`glLoadTransposeMatrixd`);
  if (*cast(void**)&glLoadTransposeMatrixd_Z_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixd' not found!`);
  glLoadTransposeMatrixd_Z_Z(m);
}
alias glLoadTransposeMatrixdARB = glLoadTransposeMatrixdARB_Z_Z;
__gshared glLoadTransposeMatrixdARB_Z_Z = function void (const(GLdouble)* m) { glLoadTransposeMatrixdARB_Z_Z_loader(m); };
private void glLoadTransposeMatrixdARB_Z_Z_loader (const(GLdouble)* m) {
  *cast(void**)&glLoadTransposeMatrixdARB_Z_Z = glbindGetProcAddress(`glLoadTransposeMatrixdARB`);
  if (*cast(void**)&glLoadTransposeMatrixdARB_Z_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixdARB' not found!`);
  glLoadTransposeMatrixdARB_Z_Z(m);
}
alias glLoadTransposeMatrixf = glLoadTransposeMatrixf_Z_Z;
__gshared glLoadTransposeMatrixf_Z_Z = function void (const(GLfloat)* m) { glLoadTransposeMatrixf_Z_Z_loader(m); };
private void glLoadTransposeMatrixf_Z_Z_loader (const(GLfloat)* m) {
  *cast(void**)&glLoadTransposeMatrixf_Z_Z = glbindGetProcAddress(`glLoadTransposeMatrixf`);
  if (*cast(void**)&glLoadTransposeMatrixf_Z_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixf' not found!`);
  glLoadTransposeMatrixf_Z_Z(m);
}
alias glLoadTransposeMatrixfARB = glLoadTransposeMatrixfARB_Z_Z;
__gshared glLoadTransposeMatrixfARB_Z_Z = function void (const(GLfloat)* m) { glLoadTransposeMatrixfARB_Z_Z_loader(m); };
private void glLoadTransposeMatrixfARB_Z_Z_loader (const(GLfloat)* m) {
  *cast(void**)&glLoadTransposeMatrixfARB_Z_Z = glbindGetProcAddress(`glLoadTransposeMatrixfARB`);
  if (*cast(void**)&glLoadTransposeMatrixfARB_Z_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixfARB' not found!`);
  glLoadTransposeMatrixfARB_Z_Z(m);
}
alias glLoadTransposeMatrixxOES = glLoadTransposeMatrixxOES_Z_Z;
__gshared glLoadTransposeMatrixxOES_Z_Z = function void (const(GLfixed)* m) { glLoadTransposeMatrixxOES_Z_Z_loader(m); };
private void glLoadTransposeMatrixxOES_Z_Z_loader (const(GLfixed)* m) {
  *cast(void**)&glLoadTransposeMatrixxOES_Z_Z = glbindGetProcAddress(`glLoadTransposeMatrixxOES`);
  if (*cast(void**)&glLoadTransposeMatrixxOES_Z_Z is null) assert(0, `OpenGL function 'glLoadTransposeMatrixxOES' not found!`);
  glLoadTransposeMatrixxOES_Z_Z(m);
}
alias glLockArraysEXT = glLockArraysEXT_Z_Z;
__gshared glLockArraysEXT_Z_Z = function void (GLint first, GLsizei count) { glLockArraysEXT_Z_Z_loader(first, count); };
private void glLockArraysEXT_Z_Z_loader (GLint first, GLsizei count) {
  *cast(void**)&glLockArraysEXT_Z_Z = glbindGetProcAddress(`glLockArraysEXT`);
  if (*cast(void**)&glLockArraysEXT_Z_Z is null) assert(0, `OpenGL function 'glLockArraysEXT' not found!`);
  glLockArraysEXT_Z_Z(first, count);
}
alias glLogicOp = glLogicOp_Z_Z;
__gshared glLogicOp_Z_Z = function void (GLenum opcode) { glLogicOp_Z_Z_loader(opcode); };
private void glLogicOp_Z_Z_loader (GLenum opcode) {
  *cast(void**)&glLogicOp_Z_Z = glbindGetProcAddress(`glLogicOp`);
  if (*cast(void**)&glLogicOp_Z_Z is null) assert(0, `OpenGL function 'glLogicOp' not found!`);
  glLogicOp_Z_Z(opcode);
}
alias glMakeBufferNonResidentNV = glMakeBufferNonResidentNV_Z_Z;
__gshared glMakeBufferNonResidentNV_Z_Z = function void (GLenum target) { glMakeBufferNonResidentNV_Z_Z_loader(target); };
private void glMakeBufferNonResidentNV_Z_Z_loader (GLenum target) {
  *cast(void**)&glMakeBufferNonResidentNV_Z_Z = glbindGetProcAddress(`glMakeBufferNonResidentNV`);
  if (*cast(void**)&glMakeBufferNonResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeBufferNonResidentNV' not found!`);
  glMakeBufferNonResidentNV_Z_Z(target);
}
alias glMakeBufferResidentNV = glMakeBufferResidentNV_Z_Z;
__gshared glMakeBufferResidentNV_Z_Z = function void (GLenum target, GLenum access) { glMakeBufferResidentNV_Z_Z_loader(target, access); };
private void glMakeBufferResidentNV_Z_Z_loader (GLenum target, GLenum access) {
  *cast(void**)&glMakeBufferResidentNV_Z_Z = glbindGetProcAddress(`glMakeBufferResidentNV`);
  if (*cast(void**)&glMakeBufferResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeBufferResidentNV' not found!`);
  glMakeBufferResidentNV_Z_Z(target, access);
}
alias glMakeImageHandleNonResidentARB = glMakeImageHandleNonResidentARB_Z_Z;
__gshared glMakeImageHandleNonResidentARB_Z_Z = function void (GLuint64 handle) { glMakeImageHandleNonResidentARB_Z_Z_loader(handle); };
private void glMakeImageHandleNonResidentARB_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glMakeImageHandleNonResidentARB_Z_Z = glbindGetProcAddress(`glMakeImageHandleNonResidentARB`);
  if (*cast(void**)&glMakeImageHandleNonResidentARB_Z_Z is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentARB' not found!`);
  glMakeImageHandleNonResidentARB_Z_Z(handle);
}
alias glMakeImageHandleNonResidentNV = glMakeImageHandleNonResidentNV_Z_Z;
__gshared glMakeImageHandleNonResidentNV_Z_Z = function void (GLuint64 handle) { glMakeImageHandleNonResidentNV_Z_Z_loader(handle); };
private void glMakeImageHandleNonResidentNV_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glMakeImageHandleNonResidentNV_Z_Z = glbindGetProcAddress(`glMakeImageHandleNonResidentNV`);
  if (*cast(void**)&glMakeImageHandleNonResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentNV' not found!`);
  glMakeImageHandleNonResidentNV_Z_Z(handle);
}
alias glMakeImageHandleResidentARB = glMakeImageHandleResidentARB_Z_Z;
__gshared glMakeImageHandleResidentARB_Z_Z = function void (GLuint64 handle, GLenum access) { glMakeImageHandleResidentARB_Z_Z_loader(handle, access); };
private void glMakeImageHandleResidentARB_Z_Z_loader (GLuint64 handle, GLenum access) {
  *cast(void**)&glMakeImageHandleResidentARB_Z_Z = glbindGetProcAddress(`glMakeImageHandleResidentARB`);
  if (*cast(void**)&glMakeImageHandleResidentARB_Z_Z is null) assert(0, `OpenGL function 'glMakeImageHandleResidentARB' not found!`);
  glMakeImageHandleResidentARB_Z_Z(handle, access);
}
alias glMakeImageHandleResidentNV = glMakeImageHandleResidentNV_Z_Z;
__gshared glMakeImageHandleResidentNV_Z_Z = function void (GLuint64 handle, GLenum access) { glMakeImageHandleResidentNV_Z_Z_loader(handle, access); };
private void glMakeImageHandleResidentNV_Z_Z_loader (GLuint64 handle, GLenum access) {
  *cast(void**)&glMakeImageHandleResidentNV_Z_Z = glbindGetProcAddress(`glMakeImageHandleResidentNV`);
  if (*cast(void**)&glMakeImageHandleResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeImageHandleResidentNV' not found!`);
  glMakeImageHandleResidentNV_Z_Z(handle, access);
}
alias glMakeNamedBufferNonResidentNV = glMakeNamedBufferNonResidentNV_Z_Z;
__gshared glMakeNamedBufferNonResidentNV_Z_Z = function void (GLuint buffer) { glMakeNamedBufferNonResidentNV_Z_Z_loader(buffer); };
private void glMakeNamedBufferNonResidentNV_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glMakeNamedBufferNonResidentNV_Z_Z = glbindGetProcAddress(`glMakeNamedBufferNonResidentNV`);
  if (*cast(void**)&glMakeNamedBufferNonResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeNamedBufferNonResidentNV' not found!`);
  glMakeNamedBufferNonResidentNV_Z_Z(buffer);
}
alias glMakeNamedBufferResidentNV = glMakeNamedBufferResidentNV_Z_Z;
__gshared glMakeNamedBufferResidentNV_Z_Z = function void (GLuint buffer, GLenum access) { glMakeNamedBufferResidentNV_Z_Z_loader(buffer, access); };
private void glMakeNamedBufferResidentNV_Z_Z_loader (GLuint buffer, GLenum access) {
  *cast(void**)&glMakeNamedBufferResidentNV_Z_Z = glbindGetProcAddress(`glMakeNamedBufferResidentNV`);
  if (*cast(void**)&glMakeNamedBufferResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeNamedBufferResidentNV' not found!`);
  glMakeNamedBufferResidentNV_Z_Z(buffer, access);
}
alias glMakeTextureHandleNonResidentARB = glMakeTextureHandleNonResidentARB_Z_Z;
__gshared glMakeTextureHandleNonResidentARB_Z_Z = function void (GLuint64 handle) { glMakeTextureHandleNonResidentARB_Z_Z_loader(handle); };
private void glMakeTextureHandleNonResidentARB_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glMakeTextureHandleNonResidentARB_Z_Z = glbindGetProcAddress(`glMakeTextureHandleNonResidentARB`);
  if (*cast(void**)&glMakeTextureHandleNonResidentARB_Z_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentARB' not found!`);
  glMakeTextureHandleNonResidentARB_Z_Z(handle);
}
alias glMakeTextureHandleNonResidentNV = glMakeTextureHandleNonResidentNV_Z_Z;
__gshared glMakeTextureHandleNonResidentNV_Z_Z = function void (GLuint64 handle) { glMakeTextureHandleNonResidentNV_Z_Z_loader(handle); };
private void glMakeTextureHandleNonResidentNV_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glMakeTextureHandleNonResidentNV_Z_Z = glbindGetProcAddress(`glMakeTextureHandleNonResidentNV`);
  if (*cast(void**)&glMakeTextureHandleNonResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentNV' not found!`);
  glMakeTextureHandleNonResidentNV_Z_Z(handle);
}
alias glMakeTextureHandleResidentARB = glMakeTextureHandleResidentARB_Z_Z;
__gshared glMakeTextureHandleResidentARB_Z_Z = function void (GLuint64 handle) { glMakeTextureHandleResidentARB_Z_Z_loader(handle); };
private void glMakeTextureHandleResidentARB_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glMakeTextureHandleResidentARB_Z_Z = glbindGetProcAddress(`glMakeTextureHandleResidentARB`);
  if (*cast(void**)&glMakeTextureHandleResidentARB_Z_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentARB' not found!`);
  glMakeTextureHandleResidentARB_Z_Z(handle);
}
alias glMakeTextureHandleResidentNV = glMakeTextureHandleResidentNV_Z_Z;
__gshared glMakeTextureHandleResidentNV_Z_Z = function void (GLuint64 handle) { glMakeTextureHandleResidentNV_Z_Z_loader(handle); };
private void glMakeTextureHandleResidentNV_Z_Z_loader (GLuint64 handle) {
  *cast(void**)&glMakeTextureHandleResidentNV_Z_Z = glbindGetProcAddress(`glMakeTextureHandleResidentNV`);
  if (*cast(void**)&glMakeTextureHandleResidentNV_Z_Z is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentNV' not found!`);
  glMakeTextureHandleResidentNV_Z_Z(handle);
}
alias glMap1d = glMap1d_Z_Z;
__gshared glMap1d_Z_Z = function void (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const(GLdouble)* points) { glMap1d_Z_Z_loader(target, u1, u2, stride, order, points); };
private void glMap1d_Z_Z_loader (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const(GLdouble)* points) {
  *cast(void**)&glMap1d_Z_Z = glbindGetProcAddress(`glMap1d`);
  if (*cast(void**)&glMap1d_Z_Z is null) assert(0, `OpenGL function 'glMap1d' not found!`);
  glMap1d_Z_Z(target, u1, u2, stride, order, points);
}
alias glMap1f = glMap1f_Z_Z;
__gshared glMap1f_Z_Z = function void (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const(GLfloat)* points) { glMap1f_Z_Z_loader(target, u1, u2, stride, order, points); };
private void glMap1f_Z_Z_loader (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const(GLfloat)* points) {
  *cast(void**)&glMap1f_Z_Z = glbindGetProcAddress(`glMap1f`);
  if (*cast(void**)&glMap1f_Z_Z is null) assert(0, `OpenGL function 'glMap1f' not found!`);
  glMap1f_Z_Z(target, u1, u2, stride, order, points);
}
alias glMap1xOES = glMap1xOES_Z_Z;
__gshared glMap1xOES_Z_Z = function void (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { glMap1xOES_Z_Z_loader(target, u1, u2, stride, order, points); };
private void glMap1xOES_Z_Z_loader (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) {
  *cast(void**)&glMap1xOES_Z_Z = glbindGetProcAddress(`glMap1xOES`);
  if (*cast(void**)&glMap1xOES_Z_Z is null) assert(0, `OpenGL function 'glMap1xOES' not found!`);
  glMap1xOES_Z_Z(target, u1, u2, stride, order, points);
}
alias glMap2d = glMap2d_Z_Z;
__gshared glMap2d_Z_Z = function void (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const(GLdouble)* points) { glMap2d_Z_Z_loader(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
private void glMap2d_Z_Z_loader (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const(GLdouble)* points) {
  *cast(void**)&glMap2d_Z_Z = glbindGetProcAddress(`glMap2d`);
  if (*cast(void**)&glMap2d_Z_Z is null) assert(0, `OpenGL function 'glMap2d' not found!`);
  glMap2d_Z_Z(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
alias glMap2f = glMap2f_Z_Z;
__gshared glMap2f_Z_Z = function void (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const(GLfloat)* points) { glMap2f_Z_Z_loader(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
private void glMap2f_Z_Z_loader (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const(GLfloat)* points) {
  *cast(void**)&glMap2f_Z_Z = glbindGetProcAddress(`glMap2f`);
  if (*cast(void**)&glMap2f_Z_Z is null) assert(0, `OpenGL function 'glMap2f' not found!`);
  glMap2f_Z_Z(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
alias glMap2xOES = glMap2xOES_Z_Z;
__gshared glMap2xOES_Z_Z = function void (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { glMap2xOES_Z_Z_loader(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
private void glMap2xOES_Z_Z_loader (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) {
  *cast(void**)&glMap2xOES_Z_Z = glbindGetProcAddress(`glMap2xOES`);
  if (*cast(void**)&glMap2xOES_Z_Z is null) assert(0, `OpenGL function 'glMap2xOES' not found!`);
  glMap2xOES_Z_Z(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
alias glMapBuffer = glMapBuffer_Z_Z;
__gshared glMapBuffer_Z_Z = function void * (GLenum target, GLenum access) { return glMapBuffer_Z_Z_loader(target, access); };
private void * glMapBuffer_Z_Z_loader (GLenum target, GLenum access) {
  *cast(void**)&glMapBuffer_Z_Z = glbindGetProcAddress(`glMapBuffer`);
  if (*cast(void**)&glMapBuffer_Z_Z is null) assert(0, `OpenGL function 'glMapBuffer' not found!`);
  return glMapBuffer_Z_Z(target, access);
}
alias glMapBufferARB = glMapBufferARB_Z_Z;
__gshared glMapBufferARB_Z_Z = function void * (GLenum target, GLenum access) { return glMapBufferARB_Z_Z_loader(target, access); };
private void * glMapBufferARB_Z_Z_loader (GLenum target, GLenum access) {
  *cast(void**)&glMapBufferARB_Z_Z = glbindGetProcAddress(`glMapBufferARB`);
  if (*cast(void**)&glMapBufferARB_Z_Z is null) assert(0, `OpenGL function 'glMapBufferARB' not found!`);
  return glMapBufferARB_Z_Z(target, access);
}
alias glMapBufferOES = glMapBufferOES_Z_Z;
__gshared glMapBufferOES_Z_Z = function void * (GLenum target, GLenum access) { return glMapBufferOES_Z_Z_loader(target, access); };
private void * glMapBufferOES_Z_Z_loader (GLenum target, GLenum access) {
  *cast(void**)&glMapBufferOES_Z_Z = glbindGetProcAddress(`glMapBufferOES`);
  if (*cast(void**)&glMapBufferOES_Z_Z is null) assert(0, `OpenGL function 'glMapBufferOES' not found!`);
  return glMapBufferOES_Z_Z(target, access);
}
alias glMapBufferRange = glMapBufferRange_Z_Z;
__gshared glMapBufferRange_Z_Z = function void * (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return glMapBufferRange_Z_Z_loader(target, offset, length, access); };
private void * glMapBufferRange_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  *cast(void**)&glMapBufferRange_Z_Z = glbindGetProcAddress(`glMapBufferRange`);
  if (*cast(void**)&glMapBufferRange_Z_Z is null) assert(0, `OpenGL function 'glMapBufferRange' not found!`);
  return glMapBufferRange_Z_Z(target, offset, length, access);
}
alias glMapBufferRangeEXT = glMapBufferRangeEXT_Z_Z;
__gshared glMapBufferRangeEXT_Z_Z = function void * (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return glMapBufferRangeEXT_Z_Z_loader(target, offset, length, access); };
private void * glMapBufferRangeEXT_Z_Z_loader (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  *cast(void**)&glMapBufferRangeEXT_Z_Z = glbindGetProcAddress(`glMapBufferRangeEXT`);
  if (*cast(void**)&glMapBufferRangeEXT_Z_Z is null) assert(0, `OpenGL function 'glMapBufferRangeEXT' not found!`);
  return glMapBufferRangeEXT_Z_Z(target, offset, length, access);
}
alias glMapControlPointsNV = glMapControlPointsNV_Z_Z;
__gshared glMapControlPointsNV_Z_Z = function void (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const(void)* points) { glMapControlPointsNV_Z_Z_loader(target, index, type, ustride, vstride, uorder, vorder, packed, points); };
private void glMapControlPointsNV_Z_Z_loader (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const(void)* points) {
  *cast(void**)&glMapControlPointsNV_Z_Z = glbindGetProcAddress(`glMapControlPointsNV`);
  if (*cast(void**)&glMapControlPointsNV_Z_Z is null) assert(0, `OpenGL function 'glMapControlPointsNV' not found!`);
  glMapControlPointsNV_Z_Z(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}
alias glMapGrid1d = glMapGrid1d_Z_Z;
__gshared glMapGrid1d_Z_Z = function void (GLint un, GLdouble u1, GLdouble u2) { glMapGrid1d_Z_Z_loader(un, u1, u2); };
private void glMapGrid1d_Z_Z_loader (GLint un, GLdouble u1, GLdouble u2) {
  *cast(void**)&glMapGrid1d_Z_Z = glbindGetProcAddress(`glMapGrid1d`);
  if (*cast(void**)&glMapGrid1d_Z_Z is null) assert(0, `OpenGL function 'glMapGrid1d' not found!`);
  glMapGrid1d_Z_Z(un, u1, u2);
}
alias glMapGrid1f = glMapGrid1f_Z_Z;
__gshared glMapGrid1f_Z_Z = function void (GLint un, GLfloat u1, GLfloat u2) { glMapGrid1f_Z_Z_loader(un, u1, u2); };
private void glMapGrid1f_Z_Z_loader (GLint un, GLfloat u1, GLfloat u2) {
  *cast(void**)&glMapGrid1f_Z_Z = glbindGetProcAddress(`glMapGrid1f`);
  if (*cast(void**)&glMapGrid1f_Z_Z is null) assert(0, `OpenGL function 'glMapGrid1f' not found!`);
  glMapGrid1f_Z_Z(un, u1, u2);
}
alias glMapGrid1xOES = glMapGrid1xOES_Z_Z;
__gshared glMapGrid1xOES_Z_Z = function void (GLint n, GLfixed u1, GLfixed u2) { glMapGrid1xOES_Z_Z_loader(n, u1, u2); };
private void glMapGrid1xOES_Z_Z_loader (GLint n, GLfixed u1, GLfixed u2) {
  *cast(void**)&glMapGrid1xOES_Z_Z = glbindGetProcAddress(`glMapGrid1xOES`);
  if (*cast(void**)&glMapGrid1xOES_Z_Z is null) assert(0, `OpenGL function 'glMapGrid1xOES' not found!`);
  glMapGrid1xOES_Z_Z(n, u1, u2);
}
alias glMapGrid2d = glMapGrid2d_Z_Z;
__gshared glMapGrid2d_Z_Z = function void (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { glMapGrid2d_Z_Z_loader(un, u1, u2, vn, v1, v2); };
private void glMapGrid2d_Z_Z_loader (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
  *cast(void**)&glMapGrid2d_Z_Z = glbindGetProcAddress(`glMapGrid2d`);
  if (*cast(void**)&glMapGrid2d_Z_Z is null) assert(0, `OpenGL function 'glMapGrid2d' not found!`);
  glMapGrid2d_Z_Z(un, u1, u2, vn, v1, v2);
}
alias glMapGrid2f = glMapGrid2f_Z_Z;
__gshared glMapGrid2f_Z_Z = function void (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { glMapGrid2f_Z_Z_loader(un, u1, u2, vn, v1, v2); };
private void glMapGrid2f_Z_Z_loader (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
  *cast(void**)&glMapGrid2f_Z_Z = glbindGetProcAddress(`glMapGrid2f`);
  if (*cast(void**)&glMapGrid2f_Z_Z is null) assert(0, `OpenGL function 'glMapGrid2f' not found!`);
  glMapGrid2f_Z_Z(un, u1, u2, vn, v1, v2);
}
alias glMapGrid2xOES = glMapGrid2xOES_Z_Z;
__gshared glMapGrid2xOES_Z_Z = function void (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { glMapGrid2xOES_Z_Z_loader(n, u1, u2, v1, v2); };
private void glMapGrid2xOES_Z_Z_loader (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) {
  *cast(void**)&glMapGrid2xOES_Z_Z = glbindGetProcAddress(`glMapGrid2xOES`);
  if (*cast(void**)&glMapGrid2xOES_Z_Z is null) assert(0, `OpenGL function 'glMapGrid2xOES' not found!`);
  glMapGrid2xOES_Z_Z(n, u1, u2, v1, v2);
}
alias glMapNamedBuffer = glMapNamedBuffer_Z_Z;
__gshared glMapNamedBuffer_Z_Z = function void * (GLuint buffer, GLenum access) { return glMapNamedBuffer_Z_Z_loader(buffer, access); };
private void * glMapNamedBuffer_Z_Z_loader (GLuint buffer, GLenum access) {
  *cast(void**)&glMapNamedBuffer_Z_Z = glbindGetProcAddress(`glMapNamedBuffer`);
  if (*cast(void**)&glMapNamedBuffer_Z_Z is null) assert(0, `OpenGL function 'glMapNamedBuffer' not found!`);
  return glMapNamedBuffer_Z_Z(buffer, access);
}
alias glMapNamedBufferEXT = glMapNamedBufferEXT_Z_Z;
__gshared glMapNamedBufferEXT_Z_Z = function void * (GLuint buffer, GLenum access) { return glMapNamedBufferEXT_Z_Z_loader(buffer, access); };
private void * glMapNamedBufferEXT_Z_Z_loader (GLuint buffer, GLenum access) {
  *cast(void**)&glMapNamedBufferEXT_Z_Z = glbindGetProcAddress(`glMapNamedBufferEXT`);
  if (*cast(void**)&glMapNamedBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glMapNamedBufferEXT' not found!`);
  return glMapNamedBufferEXT_Z_Z(buffer, access);
}
alias glMapNamedBufferRange = glMapNamedBufferRange_Z_Z;
__gshared glMapNamedBufferRange_Z_Z = function void * (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return glMapNamedBufferRange_Z_Z_loader(buffer, offset, length, access); };
private void * glMapNamedBufferRange_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  *cast(void**)&glMapNamedBufferRange_Z_Z = glbindGetProcAddress(`glMapNamedBufferRange`);
  if (*cast(void**)&glMapNamedBufferRange_Z_Z is null) assert(0, `OpenGL function 'glMapNamedBufferRange' not found!`);
  return glMapNamedBufferRange_Z_Z(buffer, offset, length, access);
}
alias glMapNamedBufferRangeEXT = glMapNamedBufferRangeEXT_Z_Z;
__gshared glMapNamedBufferRangeEXT_Z_Z = function void * (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return glMapNamedBufferRangeEXT_Z_Z_loader(buffer, offset, length, access); };
private void * glMapNamedBufferRangeEXT_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  *cast(void**)&glMapNamedBufferRangeEXT_Z_Z = glbindGetProcAddress(`glMapNamedBufferRangeEXT`);
  if (*cast(void**)&glMapNamedBufferRangeEXT_Z_Z is null) assert(0, `OpenGL function 'glMapNamedBufferRangeEXT' not found!`);
  return glMapNamedBufferRangeEXT_Z_Z(buffer, offset, length, access);
}
alias glMapObjectBufferATI = glMapObjectBufferATI_Z_Z;
__gshared glMapObjectBufferATI_Z_Z = function void * (GLuint buffer) { return glMapObjectBufferATI_Z_Z_loader(buffer); };
private void * glMapObjectBufferATI_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glMapObjectBufferATI_Z_Z = glbindGetProcAddress(`glMapObjectBufferATI`);
  if (*cast(void**)&glMapObjectBufferATI_Z_Z is null) assert(0, `OpenGL function 'glMapObjectBufferATI' not found!`);
  return glMapObjectBufferATI_Z_Z(buffer);
}
alias glMapParameterfvNV = glMapParameterfvNV_Z_Z;
__gshared glMapParameterfvNV_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glMapParameterfvNV_Z_Z_loader(target, pname, params); };
private void glMapParameterfvNV_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glMapParameterfvNV_Z_Z = glbindGetProcAddress(`glMapParameterfvNV`);
  if (*cast(void**)&glMapParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glMapParameterfvNV' not found!`);
  glMapParameterfvNV_Z_Z(target, pname, params);
}
alias glMapParameterivNV = glMapParameterivNV_Z_Z;
__gshared glMapParameterivNV_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glMapParameterivNV_Z_Z_loader(target, pname, params); };
private void glMapParameterivNV_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glMapParameterivNV_Z_Z = glbindGetProcAddress(`glMapParameterivNV`);
  if (*cast(void**)&glMapParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glMapParameterivNV' not found!`);
  glMapParameterivNV_Z_Z(target, pname, params);
}
alias glMapTexture2DINTEL = glMapTexture2DINTEL_Z_Z;
__gshared glMapTexture2DINTEL_Z_Z = function void * (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) { return glMapTexture2DINTEL_Z_Z_loader(texture, level, access, stride, layout); };
private void * glMapTexture2DINTEL_Z_Z_loader (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) {
  *cast(void**)&glMapTexture2DINTEL_Z_Z = glbindGetProcAddress(`glMapTexture2DINTEL`);
  if (*cast(void**)&glMapTexture2DINTEL_Z_Z is null) assert(0, `OpenGL function 'glMapTexture2DINTEL' not found!`);
  return glMapTexture2DINTEL_Z_Z(texture, level, access, stride, layout);
}
alias glMapVertexAttrib1dAPPLE = glMapVertexAttrib1dAPPLE_Z_Z;
__gshared glMapVertexAttrib1dAPPLE_Z_Z = function void (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const(GLdouble)* points) { glMapVertexAttrib1dAPPLE_Z_Z_loader(index, size, u1, u2, stride, order, points); };
private void glMapVertexAttrib1dAPPLE_Z_Z_loader (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const(GLdouble)* points) {
  *cast(void**)&glMapVertexAttrib1dAPPLE_Z_Z = glbindGetProcAddress(`glMapVertexAttrib1dAPPLE`);
  if (*cast(void**)&glMapVertexAttrib1dAPPLE_Z_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib1dAPPLE' not found!`);
  glMapVertexAttrib1dAPPLE_Z_Z(index, size, u1, u2, stride, order, points);
}
alias glMapVertexAttrib1fAPPLE = glMapVertexAttrib1fAPPLE_Z_Z;
__gshared glMapVertexAttrib1fAPPLE_Z_Z = function void (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const(GLfloat)* points) { glMapVertexAttrib1fAPPLE_Z_Z_loader(index, size, u1, u2, stride, order, points); };
private void glMapVertexAttrib1fAPPLE_Z_Z_loader (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const(GLfloat)* points) {
  *cast(void**)&glMapVertexAttrib1fAPPLE_Z_Z = glbindGetProcAddress(`glMapVertexAttrib1fAPPLE`);
  if (*cast(void**)&glMapVertexAttrib1fAPPLE_Z_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib1fAPPLE' not found!`);
  glMapVertexAttrib1fAPPLE_Z_Z(index, size, u1, u2, stride, order, points);
}
alias glMapVertexAttrib2dAPPLE = glMapVertexAttrib2dAPPLE_Z_Z;
__gshared glMapVertexAttrib2dAPPLE_Z_Z = function void (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const(GLdouble)* points) { glMapVertexAttrib2dAPPLE_Z_Z_loader(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
private void glMapVertexAttrib2dAPPLE_Z_Z_loader (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const(GLdouble)* points) {
  *cast(void**)&glMapVertexAttrib2dAPPLE_Z_Z = glbindGetProcAddress(`glMapVertexAttrib2dAPPLE`);
  if (*cast(void**)&glMapVertexAttrib2dAPPLE_Z_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib2dAPPLE' not found!`);
  glMapVertexAttrib2dAPPLE_Z_Z(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
alias glMapVertexAttrib2fAPPLE = glMapVertexAttrib2fAPPLE_Z_Z;
__gshared glMapVertexAttrib2fAPPLE_Z_Z = function void (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const(GLfloat)* points) { glMapVertexAttrib2fAPPLE_Z_Z_loader(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
private void glMapVertexAttrib2fAPPLE_Z_Z_loader (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const(GLfloat)* points) {
  *cast(void**)&glMapVertexAttrib2fAPPLE_Z_Z = glbindGetProcAddress(`glMapVertexAttrib2fAPPLE`);
  if (*cast(void**)&glMapVertexAttrib2fAPPLE_Z_Z is null) assert(0, `OpenGL function 'glMapVertexAttrib2fAPPLE' not found!`);
  glMapVertexAttrib2fAPPLE_Z_Z(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
alias glMaterialf = glMaterialf_Z_Z;
__gshared glMaterialf_Z_Z = function void (GLenum face, GLenum pname, GLfloat param) { glMaterialf_Z_Z_loader(face, pname, param); };
private void glMaterialf_Z_Z_loader (GLenum face, GLenum pname, GLfloat param) {
  *cast(void**)&glMaterialf_Z_Z = glbindGetProcAddress(`glMaterialf`);
  if (*cast(void**)&glMaterialf_Z_Z is null) assert(0, `OpenGL function 'glMaterialf' not found!`);
  glMaterialf_Z_Z(face, pname, param);
}
alias glMaterialfv = glMaterialfv_Z_Z;
__gshared glMaterialfv_Z_Z = function void (GLenum face, GLenum pname, const(GLfloat)* params) { glMaterialfv_Z_Z_loader(face, pname, params); };
private void glMaterialfv_Z_Z_loader (GLenum face, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glMaterialfv_Z_Z = glbindGetProcAddress(`glMaterialfv`);
  if (*cast(void**)&glMaterialfv_Z_Z is null) assert(0, `OpenGL function 'glMaterialfv' not found!`);
  glMaterialfv_Z_Z(face, pname, params);
}
alias glMateriali = glMateriali_Z_Z;
__gshared glMateriali_Z_Z = function void (GLenum face, GLenum pname, GLint param) { glMateriali_Z_Z_loader(face, pname, param); };
private void glMateriali_Z_Z_loader (GLenum face, GLenum pname, GLint param) {
  *cast(void**)&glMateriali_Z_Z = glbindGetProcAddress(`glMateriali`);
  if (*cast(void**)&glMateriali_Z_Z is null) assert(0, `OpenGL function 'glMateriali' not found!`);
  glMateriali_Z_Z(face, pname, param);
}
alias glMaterialiv = glMaterialiv_Z_Z;
__gshared glMaterialiv_Z_Z = function void (GLenum face, GLenum pname, const(GLint)* params) { glMaterialiv_Z_Z_loader(face, pname, params); };
private void glMaterialiv_Z_Z_loader (GLenum face, GLenum pname, const(GLint)* params) {
  *cast(void**)&glMaterialiv_Z_Z = glbindGetProcAddress(`glMaterialiv`);
  if (*cast(void**)&glMaterialiv_Z_Z is null) assert(0, `OpenGL function 'glMaterialiv' not found!`);
  glMaterialiv_Z_Z(face, pname, params);
}
alias glMaterialx = glMaterialx_Z_Z;
__gshared glMaterialx_Z_Z = function void (GLenum face, GLenum pname, GLfixed param) { glMaterialx_Z_Z_loader(face, pname, param); };
private void glMaterialx_Z_Z_loader (GLenum face, GLenum pname, GLfixed param) {
  *cast(void**)&glMaterialx_Z_Z = glbindGetProcAddress(`glMaterialx`);
  if (*cast(void**)&glMaterialx_Z_Z is null) assert(0, `OpenGL function 'glMaterialx' not found!`);
  glMaterialx_Z_Z(face, pname, param);
}
alias glMaterialxOES = glMaterialxOES_Z_Z;
__gshared glMaterialxOES_Z_Z = function void (GLenum face, GLenum pname, GLfixed param) { glMaterialxOES_Z_Z_loader(face, pname, param); };
private void glMaterialxOES_Z_Z_loader (GLenum face, GLenum pname, GLfixed param) {
  *cast(void**)&glMaterialxOES_Z_Z = glbindGetProcAddress(`glMaterialxOES`);
  if (*cast(void**)&glMaterialxOES_Z_Z is null) assert(0, `OpenGL function 'glMaterialxOES' not found!`);
  glMaterialxOES_Z_Z(face, pname, param);
}
alias glMaterialxv = glMaterialxv_Z_Z;
__gshared glMaterialxv_Z_Z = function void (GLenum face, GLenum pname, const(GLfixed)* param) { glMaterialxv_Z_Z_loader(face, pname, param); };
private void glMaterialxv_Z_Z_loader (GLenum face, GLenum pname, const(GLfixed)* param) {
  *cast(void**)&glMaterialxv_Z_Z = glbindGetProcAddress(`glMaterialxv`);
  if (*cast(void**)&glMaterialxv_Z_Z is null) assert(0, `OpenGL function 'glMaterialxv' not found!`);
  glMaterialxv_Z_Z(face, pname, param);
}
alias glMaterialxvOES = glMaterialxvOES_Z_Z;
__gshared glMaterialxvOES_Z_Z = function void (GLenum face, GLenum pname, const(GLfixed)* param) { glMaterialxvOES_Z_Z_loader(face, pname, param); };
private void glMaterialxvOES_Z_Z_loader (GLenum face, GLenum pname, const(GLfixed)* param) {
  *cast(void**)&glMaterialxvOES_Z_Z = glbindGetProcAddress(`glMaterialxvOES`);
  if (*cast(void**)&glMaterialxvOES_Z_Z is null) assert(0, `OpenGL function 'glMaterialxvOES' not found!`);
  glMaterialxvOES_Z_Z(face, pname, param);
}
alias glMatrixFrustumEXT = glMatrixFrustumEXT_Z_Z;
__gshared glMatrixFrustumEXT_Z_Z = function void (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { glMatrixFrustumEXT_Z_Z_loader(mode, left, right, bottom, top, zNear, zFar); };
private void glMatrixFrustumEXT_Z_Z_loader (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  *cast(void**)&glMatrixFrustumEXT_Z_Z = glbindGetProcAddress(`glMatrixFrustumEXT`);
  if (*cast(void**)&glMatrixFrustumEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixFrustumEXT' not found!`);
  glMatrixFrustumEXT_Z_Z(mode, left, right, bottom, top, zNear, zFar);
}
alias glMatrixIndexPointerARB = glMatrixIndexPointerARB_Z_Z;
__gshared glMatrixIndexPointerARB_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glMatrixIndexPointerARB_Z_Z_loader(size, type, stride, pointer); };
private void glMatrixIndexPointerARB_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glMatrixIndexPointerARB_Z_Z = glbindGetProcAddress(`glMatrixIndexPointerARB`);
  if (*cast(void**)&glMatrixIndexPointerARB_Z_Z is null) assert(0, `OpenGL function 'glMatrixIndexPointerARB' not found!`);
  glMatrixIndexPointerARB_Z_Z(size, type, stride, pointer);
}
alias glMatrixIndexPointerOES = glMatrixIndexPointerOES_Z_Z;
__gshared glMatrixIndexPointerOES_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glMatrixIndexPointerOES_Z_Z_loader(size, type, stride, pointer); };
private void glMatrixIndexPointerOES_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glMatrixIndexPointerOES_Z_Z = glbindGetProcAddress(`glMatrixIndexPointerOES`);
  if (*cast(void**)&glMatrixIndexPointerOES_Z_Z is null) assert(0, `OpenGL function 'glMatrixIndexPointerOES' not found!`);
  glMatrixIndexPointerOES_Z_Z(size, type, stride, pointer);
}
alias glMatrixIndexubvARB = glMatrixIndexubvARB_Z_Z;
__gshared glMatrixIndexubvARB_Z_Z = function void (GLint size, const(GLubyte)* indices) { glMatrixIndexubvARB_Z_Z_loader(size, indices); };
private void glMatrixIndexubvARB_Z_Z_loader (GLint size, const(GLubyte)* indices) {
  *cast(void**)&glMatrixIndexubvARB_Z_Z = glbindGetProcAddress(`glMatrixIndexubvARB`);
  if (*cast(void**)&glMatrixIndexubvARB_Z_Z is null) assert(0, `OpenGL function 'glMatrixIndexubvARB' not found!`);
  glMatrixIndexubvARB_Z_Z(size, indices);
}
alias glMatrixIndexuivARB = glMatrixIndexuivARB_Z_Z;
__gshared glMatrixIndexuivARB_Z_Z = function void (GLint size, const(GLuint)* indices) { glMatrixIndexuivARB_Z_Z_loader(size, indices); };
private void glMatrixIndexuivARB_Z_Z_loader (GLint size, const(GLuint)* indices) {
  *cast(void**)&glMatrixIndexuivARB_Z_Z = glbindGetProcAddress(`glMatrixIndexuivARB`);
  if (*cast(void**)&glMatrixIndexuivARB_Z_Z is null) assert(0, `OpenGL function 'glMatrixIndexuivARB' not found!`);
  glMatrixIndexuivARB_Z_Z(size, indices);
}
alias glMatrixIndexusvARB = glMatrixIndexusvARB_Z_Z;
__gshared glMatrixIndexusvARB_Z_Z = function void (GLint size, const(GLushort)* indices) { glMatrixIndexusvARB_Z_Z_loader(size, indices); };
private void glMatrixIndexusvARB_Z_Z_loader (GLint size, const(GLushort)* indices) {
  *cast(void**)&glMatrixIndexusvARB_Z_Z = glbindGetProcAddress(`glMatrixIndexusvARB`);
  if (*cast(void**)&glMatrixIndexusvARB_Z_Z is null) assert(0, `OpenGL function 'glMatrixIndexusvARB' not found!`);
  glMatrixIndexusvARB_Z_Z(size, indices);
}
alias glMatrixLoad3x2fNV = glMatrixLoad3x2fNV_Z_Z;
__gshared glMatrixLoad3x2fNV_Z_Z = function void (GLenum matrixMode, const(GLfloat)* m) { glMatrixLoad3x2fNV_Z_Z_loader(matrixMode, m); };
private void glMatrixLoad3x2fNV_Z_Z_loader (GLenum matrixMode, const(GLfloat)* m) {
  *cast(void**)&glMatrixLoad3x2fNV_Z_Z = glbindGetProcAddress(`glMatrixLoad3x2fNV`);
  if (*cast(void**)&glMatrixLoad3x2fNV_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoad3x2fNV' not found!`);
  glMatrixLoad3x2fNV_Z_Z(matrixMode, m);
}
alias glMatrixLoad3x3fNV = glMatrixLoad3x3fNV_Z_Z;
__gshared glMatrixLoad3x3fNV_Z_Z = function void (GLenum matrixMode, const(GLfloat)* m) { glMatrixLoad3x3fNV_Z_Z_loader(matrixMode, m); };
private void glMatrixLoad3x3fNV_Z_Z_loader (GLenum matrixMode, const(GLfloat)* m) {
  *cast(void**)&glMatrixLoad3x3fNV_Z_Z = glbindGetProcAddress(`glMatrixLoad3x3fNV`);
  if (*cast(void**)&glMatrixLoad3x3fNV_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoad3x3fNV' not found!`);
  glMatrixLoad3x3fNV_Z_Z(matrixMode, m);
}
alias glMatrixLoadIdentityEXT = glMatrixLoadIdentityEXT_Z_Z;
__gshared glMatrixLoadIdentityEXT_Z_Z = function void (GLenum mode) { glMatrixLoadIdentityEXT_Z_Z_loader(mode); };
private void glMatrixLoadIdentityEXT_Z_Z_loader (GLenum mode) {
  *cast(void**)&glMatrixLoadIdentityEXT_Z_Z = glbindGetProcAddress(`glMatrixLoadIdentityEXT`);
  if (*cast(void**)&glMatrixLoadIdentityEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoadIdentityEXT' not found!`);
  glMatrixLoadIdentityEXT_Z_Z(mode);
}
alias glMatrixLoadTranspose3x3fNV = glMatrixLoadTranspose3x3fNV_Z_Z;
__gshared glMatrixLoadTranspose3x3fNV_Z_Z = function void (GLenum matrixMode, const(GLfloat)* m) { glMatrixLoadTranspose3x3fNV_Z_Z_loader(matrixMode, m); };
private void glMatrixLoadTranspose3x3fNV_Z_Z_loader (GLenum matrixMode, const(GLfloat)* m) {
  *cast(void**)&glMatrixLoadTranspose3x3fNV_Z_Z = glbindGetProcAddress(`glMatrixLoadTranspose3x3fNV`);
  if (*cast(void**)&glMatrixLoadTranspose3x3fNV_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoadTranspose3x3fNV' not found!`);
  glMatrixLoadTranspose3x3fNV_Z_Z(matrixMode, m);
}
alias glMatrixLoadTransposedEXT = glMatrixLoadTransposedEXT_Z_Z;
__gshared glMatrixLoadTransposedEXT_Z_Z = function void (GLenum mode, const(GLdouble)* m) { glMatrixLoadTransposedEXT_Z_Z_loader(mode, m); };
private void glMatrixLoadTransposedEXT_Z_Z_loader (GLenum mode, const(GLdouble)* m) {
  *cast(void**)&glMatrixLoadTransposedEXT_Z_Z = glbindGetProcAddress(`glMatrixLoadTransposedEXT`);
  if (*cast(void**)&glMatrixLoadTransposedEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoadTransposedEXT' not found!`);
  glMatrixLoadTransposedEXT_Z_Z(mode, m);
}
alias glMatrixLoadTransposefEXT = glMatrixLoadTransposefEXT_Z_Z;
__gshared glMatrixLoadTransposefEXT_Z_Z = function void (GLenum mode, const(GLfloat)* m) { glMatrixLoadTransposefEXT_Z_Z_loader(mode, m); };
private void glMatrixLoadTransposefEXT_Z_Z_loader (GLenum mode, const(GLfloat)* m) {
  *cast(void**)&glMatrixLoadTransposefEXT_Z_Z = glbindGetProcAddress(`glMatrixLoadTransposefEXT`);
  if (*cast(void**)&glMatrixLoadTransposefEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoadTransposefEXT' not found!`);
  glMatrixLoadTransposefEXT_Z_Z(mode, m);
}
alias glMatrixLoaddEXT = glMatrixLoaddEXT_Z_Z;
__gshared glMatrixLoaddEXT_Z_Z = function void (GLenum mode, const(GLdouble)* m) { glMatrixLoaddEXT_Z_Z_loader(mode, m); };
private void glMatrixLoaddEXT_Z_Z_loader (GLenum mode, const(GLdouble)* m) {
  *cast(void**)&glMatrixLoaddEXT_Z_Z = glbindGetProcAddress(`glMatrixLoaddEXT`);
  if (*cast(void**)&glMatrixLoaddEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoaddEXT' not found!`);
  glMatrixLoaddEXT_Z_Z(mode, m);
}
alias glMatrixLoadfEXT = glMatrixLoadfEXT_Z_Z;
__gshared glMatrixLoadfEXT_Z_Z = function void (GLenum mode, const(GLfloat)* m) { glMatrixLoadfEXT_Z_Z_loader(mode, m); };
private void glMatrixLoadfEXT_Z_Z_loader (GLenum mode, const(GLfloat)* m) {
  *cast(void**)&glMatrixLoadfEXT_Z_Z = glbindGetProcAddress(`glMatrixLoadfEXT`);
  if (*cast(void**)&glMatrixLoadfEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixLoadfEXT' not found!`);
  glMatrixLoadfEXT_Z_Z(mode, m);
}
alias glMatrixMode = glMatrixMode_Z_Z;
__gshared glMatrixMode_Z_Z = function void (GLenum mode) { glMatrixMode_Z_Z_loader(mode); };
private void glMatrixMode_Z_Z_loader (GLenum mode) {
  *cast(void**)&glMatrixMode_Z_Z = glbindGetProcAddress(`glMatrixMode`);
  if (*cast(void**)&glMatrixMode_Z_Z is null) assert(0, `OpenGL function 'glMatrixMode' not found!`);
  glMatrixMode_Z_Z(mode);
}
alias glMatrixMult3x2fNV = glMatrixMult3x2fNV_Z_Z;
__gshared glMatrixMult3x2fNV_Z_Z = function void (GLenum matrixMode, const(GLfloat)* m) { glMatrixMult3x2fNV_Z_Z_loader(matrixMode, m); };
private void glMatrixMult3x2fNV_Z_Z_loader (GLenum matrixMode, const(GLfloat)* m) {
  *cast(void**)&glMatrixMult3x2fNV_Z_Z = glbindGetProcAddress(`glMatrixMult3x2fNV`);
  if (*cast(void**)&glMatrixMult3x2fNV_Z_Z is null) assert(0, `OpenGL function 'glMatrixMult3x2fNV' not found!`);
  glMatrixMult3x2fNV_Z_Z(matrixMode, m);
}
alias glMatrixMult3x3fNV = glMatrixMult3x3fNV_Z_Z;
__gshared glMatrixMult3x3fNV_Z_Z = function void (GLenum matrixMode, const(GLfloat)* m) { glMatrixMult3x3fNV_Z_Z_loader(matrixMode, m); };
private void glMatrixMult3x3fNV_Z_Z_loader (GLenum matrixMode, const(GLfloat)* m) {
  *cast(void**)&glMatrixMult3x3fNV_Z_Z = glbindGetProcAddress(`glMatrixMult3x3fNV`);
  if (*cast(void**)&glMatrixMult3x3fNV_Z_Z is null) assert(0, `OpenGL function 'glMatrixMult3x3fNV' not found!`);
  glMatrixMult3x3fNV_Z_Z(matrixMode, m);
}
alias glMatrixMultTranspose3x3fNV = glMatrixMultTranspose3x3fNV_Z_Z;
__gshared glMatrixMultTranspose3x3fNV_Z_Z = function void (GLenum matrixMode, const(GLfloat)* m) { glMatrixMultTranspose3x3fNV_Z_Z_loader(matrixMode, m); };
private void glMatrixMultTranspose3x3fNV_Z_Z_loader (GLenum matrixMode, const(GLfloat)* m) {
  *cast(void**)&glMatrixMultTranspose3x3fNV_Z_Z = glbindGetProcAddress(`glMatrixMultTranspose3x3fNV`);
  if (*cast(void**)&glMatrixMultTranspose3x3fNV_Z_Z is null) assert(0, `OpenGL function 'glMatrixMultTranspose3x3fNV' not found!`);
  glMatrixMultTranspose3x3fNV_Z_Z(matrixMode, m);
}
alias glMatrixMultTransposedEXT = glMatrixMultTransposedEXT_Z_Z;
__gshared glMatrixMultTransposedEXT_Z_Z = function void (GLenum mode, const(GLdouble)* m) { glMatrixMultTransposedEXT_Z_Z_loader(mode, m); };
private void glMatrixMultTransposedEXT_Z_Z_loader (GLenum mode, const(GLdouble)* m) {
  *cast(void**)&glMatrixMultTransposedEXT_Z_Z = glbindGetProcAddress(`glMatrixMultTransposedEXT`);
  if (*cast(void**)&glMatrixMultTransposedEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixMultTransposedEXT' not found!`);
  glMatrixMultTransposedEXT_Z_Z(mode, m);
}
alias glMatrixMultTransposefEXT = glMatrixMultTransposefEXT_Z_Z;
__gshared glMatrixMultTransposefEXT_Z_Z = function void (GLenum mode, const(GLfloat)* m) { glMatrixMultTransposefEXT_Z_Z_loader(mode, m); };
private void glMatrixMultTransposefEXT_Z_Z_loader (GLenum mode, const(GLfloat)* m) {
  *cast(void**)&glMatrixMultTransposefEXT_Z_Z = glbindGetProcAddress(`glMatrixMultTransposefEXT`);
  if (*cast(void**)&glMatrixMultTransposefEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixMultTransposefEXT' not found!`);
  glMatrixMultTransposefEXT_Z_Z(mode, m);
}
alias glMatrixMultdEXT = glMatrixMultdEXT_Z_Z;
__gshared glMatrixMultdEXT_Z_Z = function void (GLenum mode, const(GLdouble)* m) { glMatrixMultdEXT_Z_Z_loader(mode, m); };
private void glMatrixMultdEXT_Z_Z_loader (GLenum mode, const(GLdouble)* m) {
  *cast(void**)&glMatrixMultdEXT_Z_Z = glbindGetProcAddress(`glMatrixMultdEXT`);
  if (*cast(void**)&glMatrixMultdEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixMultdEXT' not found!`);
  glMatrixMultdEXT_Z_Z(mode, m);
}
alias glMatrixMultfEXT = glMatrixMultfEXT_Z_Z;
__gshared glMatrixMultfEXT_Z_Z = function void (GLenum mode, const(GLfloat)* m) { glMatrixMultfEXT_Z_Z_loader(mode, m); };
private void glMatrixMultfEXT_Z_Z_loader (GLenum mode, const(GLfloat)* m) {
  *cast(void**)&glMatrixMultfEXT_Z_Z = glbindGetProcAddress(`glMatrixMultfEXT`);
  if (*cast(void**)&glMatrixMultfEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixMultfEXT' not found!`);
  glMatrixMultfEXT_Z_Z(mode, m);
}
alias glMatrixOrthoEXT = glMatrixOrthoEXT_Z_Z;
__gshared glMatrixOrthoEXT_Z_Z = function void (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { glMatrixOrthoEXT_Z_Z_loader(mode, left, right, bottom, top, zNear, zFar); };
private void glMatrixOrthoEXT_Z_Z_loader (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  *cast(void**)&glMatrixOrthoEXT_Z_Z = glbindGetProcAddress(`glMatrixOrthoEXT`);
  if (*cast(void**)&glMatrixOrthoEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixOrthoEXT' not found!`);
  glMatrixOrthoEXT_Z_Z(mode, left, right, bottom, top, zNear, zFar);
}
alias glMatrixPopEXT = glMatrixPopEXT_Z_Z;
__gshared glMatrixPopEXT_Z_Z = function void (GLenum mode) { glMatrixPopEXT_Z_Z_loader(mode); };
private void glMatrixPopEXT_Z_Z_loader (GLenum mode) {
  *cast(void**)&glMatrixPopEXT_Z_Z = glbindGetProcAddress(`glMatrixPopEXT`);
  if (*cast(void**)&glMatrixPopEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixPopEXT' not found!`);
  glMatrixPopEXT_Z_Z(mode);
}
alias glMatrixPushEXT = glMatrixPushEXT_Z_Z;
__gshared glMatrixPushEXT_Z_Z = function void (GLenum mode) { glMatrixPushEXT_Z_Z_loader(mode); };
private void glMatrixPushEXT_Z_Z_loader (GLenum mode) {
  *cast(void**)&glMatrixPushEXT_Z_Z = glbindGetProcAddress(`glMatrixPushEXT`);
  if (*cast(void**)&glMatrixPushEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixPushEXT' not found!`);
  glMatrixPushEXT_Z_Z(mode);
}
alias glMatrixRotatedEXT = glMatrixRotatedEXT_Z_Z;
__gshared glMatrixRotatedEXT_Z_Z = function void (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { glMatrixRotatedEXT_Z_Z_loader(mode, angle, x, y, z); };
private void glMatrixRotatedEXT_Z_Z_loader (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glMatrixRotatedEXT_Z_Z = glbindGetProcAddress(`glMatrixRotatedEXT`);
  if (*cast(void**)&glMatrixRotatedEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixRotatedEXT' not found!`);
  glMatrixRotatedEXT_Z_Z(mode, angle, x, y, z);
}
alias glMatrixRotatefEXT = glMatrixRotatefEXT_Z_Z;
__gshared glMatrixRotatefEXT_Z_Z = function void (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { glMatrixRotatefEXT_Z_Z_loader(mode, angle, x, y, z); };
private void glMatrixRotatefEXT_Z_Z_loader (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glMatrixRotatefEXT_Z_Z = glbindGetProcAddress(`glMatrixRotatefEXT`);
  if (*cast(void**)&glMatrixRotatefEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixRotatefEXT' not found!`);
  glMatrixRotatefEXT_Z_Z(mode, angle, x, y, z);
}
alias glMatrixScaledEXT = glMatrixScaledEXT_Z_Z;
__gshared glMatrixScaledEXT_Z_Z = function void (GLenum mode, GLdouble x, GLdouble y, GLdouble z) { glMatrixScaledEXT_Z_Z_loader(mode, x, y, z); };
private void glMatrixScaledEXT_Z_Z_loader (GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glMatrixScaledEXT_Z_Z = glbindGetProcAddress(`glMatrixScaledEXT`);
  if (*cast(void**)&glMatrixScaledEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixScaledEXT' not found!`);
  glMatrixScaledEXT_Z_Z(mode, x, y, z);
}
alias glMatrixScalefEXT = glMatrixScalefEXT_Z_Z;
__gshared glMatrixScalefEXT_Z_Z = function void (GLenum mode, GLfloat x, GLfloat y, GLfloat z) { glMatrixScalefEXT_Z_Z_loader(mode, x, y, z); };
private void glMatrixScalefEXT_Z_Z_loader (GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glMatrixScalefEXT_Z_Z = glbindGetProcAddress(`glMatrixScalefEXT`);
  if (*cast(void**)&glMatrixScalefEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixScalefEXT' not found!`);
  glMatrixScalefEXT_Z_Z(mode, x, y, z);
}
alias glMatrixTranslatedEXT = glMatrixTranslatedEXT_Z_Z;
__gshared glMatrixTranslatedEXT_Z_Z = function void (GLenum mode, GLdouble x, GLdouble y, GLdouble z) { glMatrixTranslatedEXT_Z_Z_loader(mode, x, y, z); };
private void glMatrixTranslatedEXT_Z_Z_loader (GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glMatrixTranslatedEXT_Z_Z = glbindGetProcAddress(`glMatrixTranslatedEXT`);
  if (*cast(void**)&glMatrixTranslatedEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixTranslatedEXT' not found!`);
  glMatrixTranslatedEXT_Z_Z(mode, x, y, z);
}
alias glMatrixTranslatefEXT = glMatrixTranslatefEXT_Z_Z;
__gshared glMatrixTranslatefEXT_Z_Z = function void (GLenum mode, GLfloat x, GLfloat y, GLfloat z) { glMatrixTranslatefEXT_Z_Z_loader(mode, x, y, z); };
private void glMatrixTranslatefEXT_Z_Z_loader (GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glMatrixTranslatefEXT_Z_Z = glbindGetProcAddress(`glMatrixTranslatefEXT`);
  if (*cast(void**)&glMatrixTranslatefEXT_Z_Z is null) assert(0, `OpenGL function 'glMatrixTranslatefEXT' not found!`);
  glMatrixTranslatefEXT_Z_Z(mode, x, y, z);
}
alias glMaxShaderCompilerThreadsARB = glMaxShaderCompilerThreadsARB_Z_Z;
__gshared glMaxShaderCompilerThreadsARB_Z_Z = function void (GLuint count) { glMaxShaderCompilerThreadsARB_Z_Z_loader(count); };
private void glMaxShaderCompilerThreadsARB_Z_Z_loader (GLuint count) {
  *cast(void**)&glMaxShaderCompilerThreadsARB_Z_Z = glbindGetProcAddress(`glMaxShaderCompilerThreadsARB`);
  if (*cast(void**)&glMaxShaderCompilerThreadsARB_Z_Z is null) assert(0, `OpenGL function 'glMaxShaderCompilerThreadsARB' not found!`);
  glMaxShaderCompilerThreadsARB_Z_Z(count);
}
alias glMemoryBarrier = glMemoryBarrier_Z_Z;
__gshared glMemoryBarrier_Z_Z = function void (GLbitfield barriers) { glMemoryBarrier_Z_Z_loader(barriers); };
private void glMemoryBarrier_Z_Z_loader (GLbitfield barriers) {
  *cast(void**)&glMemoryBarrier_Z_Z = glbindGetProcAddress(`glMemoryBarrier`);
  if (*cast(void**)&glMemoryBarrier_Z_Z is null) assert(0, `OpenGL function 'glMemoryBarrier' not found!`);
  glMemoryBarrier_Z_Z(barriers);
}
alias glMemoryBarrierByRegion = glMemoryBarrierByRegion_Z_Z;
__gshared glMemoryBarrierByRegion_Z_Z = function void (GLbitfield barriers) { glMemoryBarrierByRegion_Z_Z_loader(barriers); };
private void glMemoryBarrierByRegion_Z_Z_loader (GLbitfield barriers) {
  *cast(void**)&glMemoryBarrierByRegion_Z_Z = glbindGetProcAddress(`glMemoryBarrierByRegion`);
  if (*cast(void**)&glMemoryBarrierByRegion_Z_Z is null) assert(0, `OpenGL function 'glMemoryBarrierByRegion' not found!`);
  glMemoryBarrierByRegion_Z_Z(barriers);
}
alias glMemoryBarrierEXT = glMemoryBarrierEXT_Z_Z;
__gshared glMemoryBarrierEXT_Z_Z = function void (GLbitfield barriers) { glMemoryBarrierEXT_Z_Z_loader(barriers); };
private void glMemoryBarrierEXT_Z_Z_loader (GLbitfield barriers) {
  *cast(void**)&glMemoryBarrierEXT_Z_Z = glbindGetProcAddress(`glMemoryBarrierEXT`);
  if (*cast(void**)&glMemoryBarrierEXT_Z_Z is null) assert(0, `OpenGL function 'glMemoryBarrierEXT' not found!`);
  glMemoryBarrierEXT_Z_Z(barriers);
}
alias glMemoryObjectParameterivEXT = glMemoryObjectParameterivEXT_Z_Z;
__gshared glMemoryObjectParameterivEXT_Z_Z = function void (GLuint memoryObject, GLenum pname, const(GLint)* params) { glMemoryObjectParameterivEXT_Z_Z_loader(memoryObject, pname, params); };
private void glMemoryObjectParameterivEXT_Z_Z_loader (GLuint memoryObject, GLenum pname, const(GLint)* params) {
  *cast(void**)&glMemoryObjectParameterivEXT_Z_Z = glbindGetProcAddress(`glMemoryObjectParameterivEXT`);
  if (*cast(void**)&glMemoryObjectParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glMemoryObjectParameterivEXT' not found!`);
  glMemoryObjectParameterivEXT_Z_Z(memoryObject, pname, params);
}
alias glMinSampleShading = glMinSampleShading_Z_Z;
__gshared glMinSampleShading_Z_Z = function void (GLfloat value) { glMinSampleShading_Z_Z_loader(value); };
private void glMinSampleShading_Z_Z_loader (GLfloat value) {
  *cast(void**)&glMinSampleShading_Z_Z = glbindGetProcAddress(`glMinSampleShading`);
  if (*cast(void**)&glMinSampleShading_Z_Z is null) assert(0, `OpenGL function 'glMinSampleShading' not found!`);
  glMinSampleShading_Z_Z(value);
}
alias glMinSampleShadingARB = glMinSampleShadingARB_Z_Z;
__gshared glMinSampleShadingARB_Z_Z = function void (GLfloat value) { glMinSampleShadingARB_Z_Z_loader(value); };
private void glMinSampleShadingARB_Z_Z_loader (GLfloat value) {
  *cast(void**)&glMinSampleShadingARB_Z_Z = glbindGetProcAddress(`glMinSampleShadingARB`);
  if (*cast(void**)&glMinSampleShadingARB_Z_Z is null) assert(0, `OpenGL function 'glMinSampleShadingARB' not found!`);
  glMinSampleShadingARB_Z_Z(value);
}
alias glMinSampleShadingOES = glMinSampleShadingOES_Z_Z;
__gshared glMinSampleShadingOES_Z_Z = function void (GLfloat value) { glMinSampleShadingOES_Z_Z_loader(value); };
private void glMinSampleShadingOES_Z_Z_loader (GLfloat value) {
  *cast(void**)&glMinSampleShadingOES_Z_Z = glbindGetProcAddress(`glMinSampleShadingOES`);
  if (*cast(void**)&glMinSampleShadingOES_Z_Z is null) assert(0, `OpenGL function 'glMinSampleShadingOES' not found!`);
  glMinSampleShadingOES_Z_Z(value);
}
alias glMinmax = glMinmax_Z_Z;
__gshared glMinmax_Z_Z = function void (GLenum target, GLenum internalformat, GLboolean sink) { glMinmax_Z_Z_loader(target, internalformat, sink); };
private void glMinmax_Z_Z_loader (GLenum target, GLenum internalformat, GLboolean sink) {
  *cast(void**)&glMinmax_Z_Z = glbindGetProcAddress(`glMinmax`);
  if (*cast(void**)&glMinmax_Z_Z is null) assert(0, `OpenGL function 'glMinmax' not found!`);
  glMinmax_Z_Z(target, internalformat, sink);
}
alias glMinmaxEXT = glMinmaxEXT_Z_Z;
__gshared glMinmaxEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLboolean sink) { glMinmaxEXT_Z_Z_loader(target, internalformat, sink); };
private void glMinmaxEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLboolean sink) {
  *cast(void**)&glMinmaxEXT_Z_Z = glbindGetProcAddress(`glMinmaxEXT`);
  if (*cast(void**)&glMinmaxEXT_Z_Z is null) assert(0, `OpenGL function 'glMinmaxEXT' not found!`);
  glMinmaxEXT_Z_Z(target, internalformat, sink);
}
alias glMultMatrixd = glMultMatrixd_Z_Z;
__gshared glMultMatrixd_Z_Z = function void (const(GLdouble)* m) { glMultMatrixd_Z_Z_loader(m); };
private void glMultMatrixd_Z_Z_loader (const(GLdouble)* m) {
  *cast(void**)&glMultMatrixd_Z_Z = glbindGetProcAddress(`glMultMatrixd`);
  if (*cast(void**)&glMultMatrixd_Z_Z is null) assert(0, `OpenGL function 'glMultMatrixd' not found!`);
  glMultMatrixd_Z_Z(m);
}
alias glMultMatrixf = glMultMatrixf_Z_Z;
__gshared glMultMatrixf_Z_Z = function void (const(GLfloat)* m) { glMultMatrixf_Z_Z_loader(m); };
private void glMultMatrixf_Z_Z_loader (const(GLfloat)* m) {
  *cast(void**)&glMultMatrixf_Z_Z = glbindGetProcAddress(`glMultMatrixf`);
  if (*cast(void**)&glMultMatrixf_Z_Z is null) assert(0, `OpenGL function 'glMultMatrixf' not found!`);
  glMultMatrixf_Z_Z(m);
}
alias glMultMatrixx = glMultMatrixx_Z_Z;
__gshared glMultMatrixx_Z_Z = function void (const(GLfixed)* m) { glMultMatrixx_Z_Z_loader(m); };
private void glMultMatrixx_Z_Z_loader (const(GLfixed)* m) {
  *cast(void**)&glMultMatrixx_Z_Z = glbindGetProcAddress(`glMultMatrixx`);
  if (*cast(void**)&glMultMatrixx_Z_Z is null) assert(0, `OpenGL function 'glMultMatrixx' not found!`);
  glMultMatrixx_Z_Z(m);
}
alias glMultMatrixxOES = glMultMatrixxOES_Z_Z;
__gshared glMultMatrixxOES_Z_Z = function void (const(GLfixed)* m) { glMultMatrixxOES_Z_Z_loader(m); };
private void glMultMatrixxOES_Z_Z_loader (const(GLfixed)* m) {
  *cast(void**)&glMultMatrixxOES_Z_Z = glbindGetProcAddress(`glMultMatrixxOES`);
  if (*cast(void**)&glMultMatrixxOES_Z_Z is null) assert(0, `OpenGL function 'glMultMatrixxOES' not found!`);
  glMultMatrixxOES_Z_Z(m);
}
alias glMultTransposeMatrixd = glMultTransposeMatrixd_Z_Z;
__gshared glMultTransposeMatrixd_Z_Z = function void (const(GLdouble)* m) { glMultTransposeMatrixd_Z_Z_loader(m); };
private void glMultTransposeMatrixd_Z_Z_loader (const(GLdouble)* m) {
  *cast(void**)&glMultTransposeMatrixd_Z_Z = glbindGetProcAddress(`glMultTransposeMatrixd`);
  if (*cast(void**)&glMultTransposeMatrixd_Z_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixd' not found!`);
  glMultTransposeMatrixd_Z_Z(m);
}
alias glMultTransposeMatrixdARB = glMultTransposeMatrixdARB_Z_Z;
__gshared glMultTransposeMatrixdARB_Z_Z = function void (const(GLdouble)* m) { glMultTransposeMatrixdARB_Z_Z_loader(m); };
private void glMultTransposeMatrixdARB_Z_Z_loader (const(GLdouble)* m) {
  *cast(void**)&glMultTransposeMatrixdARB_Z_Z = glbindGetProcAddress(`glMultTransposeMatrixdARB`);
  if (*cast(void**)&glMultTransposeMatrixdARB_Z_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixdARB' not found!`);
  glMultTransposeMatrixdARB_Z_Z(m);
}
alias glMultTransposeMatrixf = glMultTransposeMatrixf_Z_Z;
__gshared glMultTransposeMatrixf_Z_Z = function void (const(GLfloat)* m) { glMultTransposeMatrixf_Z_Z_loader(m); };
private void glMultTransposeMatrixf_Z_Z_loader (const(GLfloat)* m) {
  *cast(void**)&glMultTransposeMatrixf_Z_Z = glbindGetProcAddress(`glMultTransposeMatrixf`);
  if (*cast(void**)&glMultTransposeMatrixf_Z_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixf' not found!`);
  glMultTransposeMatrixf_Z_Z(m);
}
alias glMultTransposeMatrixfARB = glMultTransposeMatrixfARB_Z_Z;
__gshared glMultTransposeMatrixfARB_Z_Z = function void (const(GLfloat)* m) { glMultTransposeMatrixfARB_Z_Z_loader(m); };
private void glMultTransposeMatrixfARB_Z_Z_loader (const(GLfloat)* m) {
  *cast(void**)&glMultTransposeMatrixfARB_Z_Z = glbindGetProcAddress(`glMultTransposeMatrixfARB`);
  if (*cast(void**)&glMultTransposeMatrixfARB_Z_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixfARB' not found!`);
  glMultTransposeMatrixfARB_Z_Z(m);
}
alias glMultTransposeMatrixxOES = glMultTransposeMatrixxOES_Z_Z;
__gshared glMultTransposeMatrixxOES_Z_Z = function void (const(GLfixed)* m) { glMultTransposeMatrixxOES_Z_Z_loader(m); };
private void glMultTransposeMatrixxOES_Z_Z_loader (const(GLfixed)* m) {
  *cast(void**)&glMultTransposeMatrixxOES_Z_Z = glbindGetProcAddress(`glMultTransposeMatrixxOES`);
  if (*cast(void**)&glMultTransposeMatrixxOES_Z_Z is null) assert(0, `OpenGL function 'glMultTransposeMatrixxOES' not found!`);
  glMultTransposeMatrixxOES_Z_Z(m);
}
alias glMultiDrawArrays = glMultiDrawArrays_Z_Z;
__gshared glMultiDrawArrays_Z_Z = function void (GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei drawcount) { glMultiDrawArrays_Z_Z_loader(mode, first, count, drawcount); };
private void glMultiDrawArrays_Z_Z_loader (GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei drawcount) {
  *cast(void**)&glMultiDrawArrays_Z_Z = glbindGetProcAddress(`glMultiDrawArrays`);
  if (*cast(void**)&glMultiDrawArrays_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArrays' not found!`);
  glMultiDrawArrays_Z_Z(mode, first, count, drawcount);
}
alias glMultiDrawArraysEXT = glMultiDrawArraysEXT_Z_Z;
__gshared glMultiDrawArraysEXT_Z_Z = function void (GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei primcount) { glMultiDrawArraysEXT_Z_Z_loader(mode, first, count, primcount); };
private void glMultiDrawArraysEXT_Z_Z_loader (GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei primcount) {
  *cast(void**)&glMultiDrawArraysEXT_Z_Z = glbindGetProcAddress(`glMultiDrawArraysEXT`);
  if (*cast(void**)&glMultiDrawArraysEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysEXT' not found!`);
  glMultiDrawArraysEXT_Z_Z(mode, first, count, primcount);
}
alias glMultiDrawArraysIndirect = glMultiDrawArraysIndirect_Z_Z;
__gshared glMultiDrawArraysIndirect_Z_Z = function void (GLenum mode, const(void)* indirect, GLsizei drawcount, GLsizei stride) { glMultiDrawArraysIndirect_Z_Z_loader(mode, indirect, drawcount, stride); };
private void glMultiDrawArraysIndirect_Z_Z_loader (GLenum mode, const(void)* indirect, GLsizei drawcount, GLsizei stride) {
  *cast(void**)&glMultiDrawArraysIndirect_Z_Z = glbindGetProcAddress(`glMultiDrawArraysIndirect`);
  if (*cast(void**)&glMultiDrawArraysIndirect_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirect' not found!`);
  glMultiDrawArraysIndirect_Z_Z(mode, indirect, drawcount, stride);
}
alias glMultiDrawArraysIndirectAMD = glMultiDrawArraysIndirectAMD_Z_Z;
__gshared glMultiDrawArraysIndirectAMD_Z_Z = function void (GLenum mode, const(void)* indirect, GLsizei primcount, GLsizei stride) { glMultiDrawArraysIndirectAMD_Z_Z_loader(mode, indirect, primcount, stride); };
private void glMultiDrawArraysIndirectAMD_Z_Z_loader (GLenum mode, const(void)* indirect, GLsizei primcount, GLsizei stride) {
  *cast(void**)&glMultiDrawArraysIndirectAMD_Z_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectAMD`);
  if (*cast(void**)&glMultiDrawArraysIndirectAMD_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectAMD' not found!`);
  glMultiDrawArraysIndirectAMD_Z_Z(mode, indirect, primcount, stride);
}
alias glMultiDrawArraysIndirectBindlessCountNV = glMultiDrawArraysIndirectBindlessCountNV_Z_Z;
__gshared glMultiDrawArraysIndirectBindlessCountNV_Z_Z = function void (GLenum mode, const(void)* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { glMultiDrawArraysIndirectBindlessCountNV_Z_Z_loader(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); };
private void glMultiDrawArraysIndirectBindlessCountNV_Z_Z_loader (GLenum mode, const(void)* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  *cast(void**)&glMultiDrawArraysIndirectBindlessCountNV_Z_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectBindlessCountNV`);
  if (*cast(void**)&glMultiDrawArraysIndirectBindlessCountNV_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessCountNV' not found!`);
  glMultiDrawArraysIndirectBindlessCountNV_Z_Z(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}
alias glMultiDrawArraysIndirectBindlessNV = glMultiDrawArraysIndirectBindlessNV_Z_Z;
__gshared glMultiDrawArraysIndirectBindlessNV_Z_Z = function void (GLenum mode, const(void)* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { glMultiDrawArraysIndirectBindlessNV_Z_Z_loader(mode, indirect, drawCount, stride, vertexBufferCount); };
private void glMultiDrawArraysIndirectBindlessNV_Z_Z_loader (GLenum mode, const(void)* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  *cast(void**)&glMultiDrawArraysIndirectBindlessNV_Z_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectBindlessNV`);
  if (*cast(void**)&glMultiDrawArraysIndirectBindlessNV_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessNV' not found!`);
  glMultiDrawArraysIndirectBindlessNV_Z_Z(mode, indirect, drawCount, stride, vertexBufferCount);
}
alias glMultiDrawArraysIndirectCountARB = glMultiDrawArraysIndirectCountARB_Z_Z;
__gshared glMultiDrawArraysIndirectCountARB_Z_Z = function void (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { glMultiDrawArraysIndirectCountARB_Z_Z_loader(mode, indirect, drawcount, maxdrawcount, stride); };
private void glMultiDrawArraysIndirectCountARB_Z_Z_loader (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  *cast(void**)&glMultiDrawArraysIndirectCountARB_Z_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectCountARB`);
  if (*cast(void**)&glMultiDrawArraysIndirectCountARB_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectCountARB' not found!`);
  glMultiDrawArraysIndirectCountARB_Z_Z(mode, indirect, drawcount, maxdrawcount, stride);
}
alias glMultiDrawArraysIndirectEXT = glMultiDrawArraysIndirectEXT_Z_Z;
__gshared glMultiDrawArraysIndirectEXT_Z_Z = function void (GLenum mode, const(void)* indirect, GLsizei drawcount, GLsizei stride) { glMultiDrawArraysIndirectEXT_Z_Z_loader(mode, indirect, drawcount, stride); };
private void glMultiDrawArraysIndirectEXT_Z_Z_loader (GLenum mode, const(void)* indirect, GLsizei drawcount, GLsizei stride) {
  *cast(void**)&glMultiDrawArraysIndirectEXT_Z_Z = glbindGetProcAddress(`glMultiDrawArraysIndirectEXT`);
  if (*cast(void**)&glMultiDrawArraysIndirectEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectEXT' not found!`);
  glMultiDrawArraysIndirectEXT_Z_Z(mode, indirect, drawcount, stride);
}
alias glMultiDrawElementArrayAPPLE = glMultiDrawElementArrayAPPLE_Z_Z;
__gshared glMultiDrawElementArrayAPPLE_Z_Z = function void (GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei primcount) { glMultiDrawElementArrayAPPLE_Z_Z_loader(mode, first, count, primcount); };
private void glMultiDrawElementArrayAPPLE_Z_Z_loader (GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei primcount) {
  *cast(void**)&glMultiDrawElementArrayAPPLE_Z_Z = glbindGetProcAddress(`glMultiDrawElementArrayAPPLE`);
  if (*cast(void**)&glMultiDrawElementArrayAPPLE_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementArrayAPPLE' not found!`);
  glMultiDrawElementArrayAPPLE_Z_Z(mode, first, count, primcount);
}
alias glMultiDrawElements = glMultiDrawElements_Z_Z;
__gshared glMultiDrawElements_Z_Z = function void (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei drawcount) { glMultiDrawElements_Z_Z_loader(mode, count, type, indices, drawcount); };
private void glMultiDrawElements_Z_Z_loader (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei drawcount) {
  *cast(void**)&glMultiDrawElements_Z_Z = glbindGetProcAddress(`glMultiDrawElements`);
  if (*cast(void**)&glMultiDrawElements_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElements' not found!`);
  glMultiDrawElements_Z_Z(mode, count, type, indices, drawcount);
}
alias glMultiDrawElementsBaseVertex = glMultiDrawElementsBaseVertex_Z_Z;
__gshared glMultiDrawElementsBaseVertex_Z_Z = function void (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei drawcount, const(GLint)* basevertex) { glMultiDrawElementsBaseVertex_Z_Z_loader(mode, count, type, indices, drawcount, basevertex); };
private void glMultiDrawElementsBaseVertex_Z_Z_loader (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei drawcount, const(GLint)* basevertex) {
  *cast(void**)&glMultiDrawElementsBaseVertex_Z_Z = glbindGetProcAddress(`glMultiDrawElementsBaseVertex`);
  if (*cast(void**)&glMultiDrawElementsBaseVertex_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsBaseVertex' not found!`);
  glMultiDrawElementsBaseVertex_Z_Z(mode, count, type, indices, drawcount, basevertex);
}
alias glMultiDrawElementsBaseVertexEXT = glMultiDrawElementsBaseVertexEXT_Z_Z;
__gshared glMultiDrawElementsBaseVertexEXT_Z_Z = function void (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount, const(GLint)* basevertex) { glMultiDrawElementsBaseVertexEXT_Z_Z_loader(mode, count, type, indices, primcount, basevertex); };
private void glMultiDrawElementsBaseVertexEXT_Z_Z_loader (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount, const(GLint)* basevertex) {
  *cast(void**)&glMultiDrawElementsBaseVertexEXT_Z_Z = glbindGetProcAddress(`glMultiDrawElementsBaseVertexEXT`);
  if (*cast(void**)&glMultiDrawElementsBaseVertexEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsBaseVertexEXT' not found!`);
  glMultiDrawElementsBaseVertexEXT_Z_Z(mode, count, type, indices, primcount, basevertex);
}
alias glMultiDrawElementsBaseVertexOES = glMultiDrawElementsBaseVertexOES_Z_Z;
__gshared glMultiDrawElementsBaseVertexOES_Z_Z = function void (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount, const(GLint)* basevertex) { glMultiDrawElementsBaseVertexOES_Z_Z_loader(mode, count, type, indices, primcount, basevertex); };
private void glMultiDrawElementsBaseVertexOES_Z_Z_loader (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount, const(GLint)* basevertex) {
  *cast(void**)&glMultiDrawElementsBaseVertexOES_Z_Z = glbindGetProcAddress(`glMultiDrawElementsBaseVertexOES`);
  if (*cast(void**)&glMultiDrawElementsBaseVertexOES_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsBaseVertexOES' not found!`);
  glMultiDrawElementsBaseVertexOES_Z_Z(mode, count, type, indices, primcount, basevertex);
}
alias glMultiDrawElementsEXT = glMultiDrawElementsEXT_Z_Z;
__gshared glMultiDrawElementsEXT_Z_Z = function void (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount) { glMultiDrawElementsEXT_Z_Z_loader(mode, count, type, indices, primcount); };
private void glMultiDrawElementsEXT_Z_Z_loader (GLenum mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount) {
  *cast(void**)&glMultiDrawElementsEXT_Z_Z = glbindGetProcAddress(`glMultiDrawElementsEXT`);
  if (*cast(void**)&glMultiDrawElementsEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsEXT' not found!`);
  glMultiDrawElementsEXT_Z_Z(mode, count, type, indices, primcount);
}
alias glMultiDrawElementsIndirect = glMultiDrawElementsIndirect_Z_Z;
__gshared glMultiDrawElementsIndirect_Z_Z = function void (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawcount, GLsizei stride) { glMultiDrawElementsIndirect_Z_Z_loader(mode, type, indirect, drawcount, stride); };
private void glMultiDrawElementsIndirect_Z_Z_loader (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawcount, GLsizei stride) {
  *cast(void**)&glMultiDrawElementsIndirect_Z_Z = glbindGetProcAddress(`glMultiDrawElementsIndirect`);
  if (*cast(void**)&glMultiDrawElementsIndirect_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirect' not found!`);
  glMultiDrawElementsIndirect_Z_Z(mode, type, indirect, drawcount, stride);
}
alias glMultiDrawElementsIndirectAMD = glMultiDrawElementsIndirectAMD_Z_Z;
__gshared glMultiDrawElementsIndirectAMD_Z_Z = function void (GLenum mode, GLenum type, const(void)* indirect, GLsizei primcount, GLsizei stride) { glMultiDrawElementsIndirectAMD_Z_Z_loader(mode, type, indirect, primcount, stride); };
private void glMultiDrawElementsIndirectAMD_Z_Z_loader (GLenum mode, GLenum type, const(void)* indirect, GLsizei primcount, GLsizei stride) {
  *cast(void**)&glMultiDrawElementsIndirectAMD_Z_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectAMD`);
  if (*cast(void**)&glMultiDrawElementsIndirectAMD_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectAMD' not found!`);
  glMultiDrawElementsIndirectAMD_Z_Z(mode, type, indirect, primcount, stride);
}
alias glMultiDrawElementsIndirectBindlessCountNV = glMultiDrawElementsIndirectBindlessCountNV_Z_Z;
__gshared glMultiDrawElementsIndirectBindlessCountNV_Z_Z = function void (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { glMultiDrawElementsIndirectBindlessCountNV_Z_Z_loader(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); };
private void glMultiDrawElementsIndirectBindlessCountNV_Z_Z_loader (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  *cast(void**)&glMultiDrawElementsIndirectBindlessCountNV_Z_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectBindlessCountNV`);
  if (*cast(void**)&glMultiDrawElementsIndirectBindlessCountNV_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessCountNV' not found!`);
  glMultiDrawElementsIndirectBindlessCountNV_Z_Z(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}
alias glMultiDrawElementsIndirectBindlessNV = glMultiDrawElementsIndirectBindlessNV_Z_Z;
__gshared glMultiDrawElementsIndirectBindlessNV_Z_Z = function void (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { glMultiDrawElementsIndirectBindlessNV_Z_Z_loader(mode, type, indirect, drawCount, stride, vertexBufferCount); };
private void glMultiDrawElementsIndirectBindlessNV_Z_Z_loader (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  *cast(void**)&glMultiDrawElementsIndirectBindlessNV_Z_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectBindlessNV`);
  if (*cast(void**)&glMultiDrawElementsIndirectBindlessNV_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessNV' not found!`);
  glMultiDrawElementsIndirectBindlessNV_Z_Z(mode, type, indirect, drawCount, stride, vertexBufferCount);
}
alias glMultiDrawElementsIndirectCountARB = glMultiDrawElementsIndirectCountARB_Z_Z;
__gshared glMultiDrawElementsIndirectCountARB_Z_Z = function void (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { glMultiDrawElementsIndirectCountARB_Z_Z_loader(mode, type, indirect, drawcount, maxdrawcount, stride); };
private void glMultiDrawElementsIndirectCountARB_Z_Z_loader (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  *cast(void**)&glMultiDrawElementsIndirectCountARB_Z_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectCountARB`);
  if (*cast(void**)&glMultiDrawElementsIndirectCountARB_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectCountARB' not found!`);
  glMultiDrawElementsIndirectCountARB_Z_Z(mode, type, indirect, drawcount, maxdrawcount, stride);
}
alias glMultiDrawElementsIndirectEXT = glMultiDrawElementsIndirectEXT_Z_Z;
__gshared glMultiDrawElementsIndirectEXT_Z_Z = function void (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawcount, GLsizei stride) { glMultiDrawElementsIndirectEXT_Z_Z_loader(mode, type, indirect, drawcount, stride); };
private void glMultiDrawElementsIndirectEXT_Z_Z_loader (GLenum mode, GLenum type, const(void)* indirect, GLsizei drawcount, GLsizei stride) {
  *cast(void**)&glMultiDrawElementsIndirectEXT_Z_Z = glbindGetProcAddress(`glMultiDrawElementsIndirectEXT`);
  if (*cast(void**)&glMultiDrawElementsIndirectEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectEXT' not found!`);
  glMultiDrawElementsIndirectEXT_Z_Z(mode, type, indirect, drawcount, stride);
}
alias glMultiDrawRangeElementArrayAPPLE = glMultiDrawRangeElementArrayAPPLE_Z_Z;
__gshared glMultiDrawRangeElementArrayAPPLE_Z_Z = function void (GLenum mode, GLuint start, GLuint end, const(GLint)* first, const(GLsizei)* count, GLsizei primcount) { glMultiDrawRangeElementArrayAPPLE_Z_Z_loader(mode, start, end, first, count, primcount); };
private void glMultiDrawRangeElementArrayAPPLE_Z_Z_loader (GLenum mode, GLuint start, GLuint end, const(GLint)* first, const(GLsizei)* count, GLsizei primcount) {
  *cast(void**)&glMultiDrawRangeElementArrayAPPLE_Z_Z = glbindGetProcAddress(`glMultiDrawRangeElementArrayAPPLE`);
  if (*cast(void**)&glMultiDrawRangeElementArrayAPPLE_Z_Z is null) assert(0, `OpenGL function 'glMultiDrawRangeElementArrayAPPLE' not found!`);
  glMultiDrawRangeElementArrayAPPLE_Z_Z(mode, start, end, first, count, primcount);
}
alias glMultiModeDrawArraysIBM = glMultiModeDrawArraysIBM_Z_Z;
__gshared glMultiModeDrawArraysIBM_Z_Z = function void (const(GLenum)* mode, const(GLint)* first, const(GLsizei)* count, GLsizei primcount, GLint modestride) { glMultiModeDrawArraysIBM_Z_Z_loader(mode, first, count, primcount, modestride); };
private void glMultiModeDrawArraysIBM_Z_Z_loader (const(GLenum)* mode, const(GLint)* first, const(GLsizei)* count, GLsizei primcount, GLint modestride) {
  *cast(void**)&glMultiModeDrawArraysIBM_Z_Z = glbindGetProcAddress(`glMultiModeDrawArraysIBM`);
  if (*cast(void**)&glMultiModeDrawArraysIBM_Z_Z is null) assert(0, `OpenGL function 'glMultiModeDrawArraysIBM' not found!`);
  glMultiModeDrawArraysIBM_Z_Z(mode, first, count, primcount, modestride);
}
alias glMultiModeDrawElementsIBM = glMultiModeDrawElementsIBM_Z_Z;
__gshared glMultiModeDrawElementsIBM_Z_Z = function void (const(GLenum)* mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount, GLint modestride) { glMultiModeDrawElementsIBM_Z_Z_loader(mode, count, type, indices, primcount, modestride); };
private void glMultiModeDrawElementsIBM_Z_Z_loader (const(GLenum)* mode, const(GLsizei)* count, GLenum type, const(void)* *indices, GLsizei primcount, GLint modestride) {
  *cast(void**)&glMultiModeDrawElementsIBM_Z_Z = glbindGetProcAddress(`glMultiModeDrawElementsIBM`);
  if (*cast(void**)&glMultiModeDrawElementsIBM_Z_Z is null) assert(0, `OpenGL function 'glMultiModeDrawElementsIBM' not found!`);
  glMultiModeDrawElementsIBM_Z_Z(mode, count, type, indices, primcount, modestride);
}
alias glMultiTexBufferEXT = glMultiTexBufferEXT_Z_Z;
__gshared glMultiTexBufferEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { glMultiTexBufferEXT_Z_Z_loader(texunit, target, internalformat, buffer); };
private void glMultiTexBufferEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
  *cast(void**)&glMultiTexBufferEXT_Z_Z = glbindGetProcAddress(`glMultiTexBufferEXT`);
  if (*cast(void**)&glMultiTexBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexBufferEXT' not found!`);
  glMultiTexBufferEXT_Z_Z(texunit, target, internalformat, buffer);
}
alias glMultiTexCoord1bOES = glMultiTexCoord1bOES_Z_Z;
__gshared glMultiTexCoord1bOES_Z_Z = function void (GLenum texture, GLbyte s) { glMultiTexCoord1bOES_Z_Z_loader(texture, s); };
private void glMultiTexCoord1bOES_Z_Z_loader (GLenum texture, GLbyte s) {
  *cast(void**)&glMultiTexCoord1bOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord1bOES`);
  if (*cast(void**)&glMultiTexCoord1bOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1bOES' not found!`);
  glMultiTexCoord1bOES_Z_Z(texture, s);
}
alias glMultiTexCoord1bvOES = glMultiTexCoord1bvOES_Z_Z;
__gshared glMultiTexCoord1bvOES_Z_Z = function void (GLenum texture, const(GLbyte)* coords) { glMultiTexCoord1bvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord1bvOES_Z_Z_loader (GLenum texture, const(GLbyte)* coords) {
  *cast(void**)&glMultiTexCoord1bvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord1bvOES`);
  if (*cast(void**)&glMultiTexCoord1bvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1bvOES' not found!`);
  glMultiTexCoord1bvOES_Z_Z(texture, coords);
}
alias glMultiTexCoord1d = glMultiTexCoord1d_Z_Z;
__gshared glMultiTexCoord1d_Z_Z = function void (GLenum target, GLdouble s) { glMultiTexCoord1d_Z_Z_loader(target, s); };
private void glMultiTexCoord1d_Z_Z_loader (GLenum target, GLdouble s) {
  *cast(void**)&glMultiTexCoord1d_Z_Z = glbindGetProcAddress(`glMultiTexCoord1d`);
  if (*cast(void**)&glMultiTexCoord1d_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1d' not found!`);
  glMultiTexCoord1d_Z_Z(target, s);
}
alias glMultiTexCoord1dARB = glMultiTexCoord1dARB_Z_Z;
__gshared glMultiTexCoord1dARB_Z_Z = function void (GLenum target, GLdouble s) { glMultiTexCoord1dARB_Z_Z_loader(target, s); };
private void glMultiTexCoord1dARB_Z_Z_loader (GLenum target, GLdouble s) {
  *cast(void**)&glMultiTexCoord1dARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1dARB`);
  if (*cast(void**)&glMultiTexCoord1dARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1dARB' not found!`);
  glMultiTexCoord1dARB_Z_Z(target, s);
}
alias glMultiTexCoord1dv = glMultiTexCoord1dv_Z_Z;
__gshared glMultiTexCoord1dv_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord1dv_Z_Z_loader(target, v); };
private void glMultiTexCoord1dv_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord1dv_Z_Z = glbindGetProcAddress(`glMultiTexCoord1dv`);
  if (*cast(void**)&glMultiTexCoord1dv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1dv' not found!`);
  glMultiTexCoord1dv_Z_Z(target, v);
}
alias glMultiTexCoord1dvARB = glMultiTexCoord1dvARB_Z_Z;
__gshared glMultiTexCoord1dvARB_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord1dvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord1dvARB_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord1dvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1dvARB`);
  if (*cast(void**)&glMultiTexCoord1dvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1dvARB' not found!`);
  glMultiTexCoord1dvARB_Z_Z(target, v);
}
alias glMultiTexCoord1f = glMultiTexCoord1f_Z_Z;
__gshared glMultiTexCoord1f_Z_Z = function void (GLenum target, GLfloat s) { glMultiTexCoord1f_Z_Z_loader(target, s); };
private void glMultiTexCoord1f_Z_Z_loader (GLenum target, GLfloat s) {
  *cast(void**)&glMultiTexCoord1f_Z_Z = glbindGetProcAddress(`glMultiTexCoord1f`);
  if (*cast(void**)&glMultiTexCoord1f_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1f' not found!`);
  glMultiTexCoord1f_Z_Z(target, s);
}
alias glMultiTexCoord1fARB = glMultiTexCoord1fARB_Z_Z;
__gshared glMultiTexCoord1fARB_Z_Z = function void (GLenum target, GLfloat s) { glMultiTexCoord1fARB_Z_Z_loader(target, s); };
private void glMultiTexCoord1fARB_Z_Z_loader (GLenum target, GLfloat s) {
  *cast(void**)&glMultiTexCoord1fARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1fARB`);
  if (*cast(void**)&glMultiTexCoord1fARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1fARB' not found!`);
  glMultiTexCoord1fARB_Z_Z(target, s);
}
alias glMultiTexCoord1fv = glMultiTexCoord1fv_Z_Z;
__gshared glMultiTexCoord1fv_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord1fv_Z_Z_loader(target, v); };
private void glMultiTexCoord1fv_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord1fv_Z_Z = glbindGetProcAddress(`glMultiTexCoord1fv`);
  if (*cast(void**)&glMultiTexCoord1fv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1fv' not found!`);
  glMultiTexCoord1fv_Z_Z(target, v);
}
alias glMultiTexCoord1fvARB = glMultiTexCoord1fvARB_Z_Z;
__gshared glMultiTexCoord1fvARB_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord1fvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord1fvARB_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord1fvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1fvARB`);
  if (*cast(void**)&glMultiTexCoord1fvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1fvARB' not found!`);
  glMultiTexCoord1fvARB_Z_Z(target, v);
}
alias glMultiTexCoord1hNV = glMultiTexCoord1hNV_Z_Z;
__gshared glMultiTexCoord1hNV_Z_Z = function void (GLenum target, GLhalfNV s) { glMultiTexCoord1hNV_Z_Z_loader(target, s); };
private void glMultiTexCoord1hNV_Z_Z_loader (GLenum target, GLhalfNV s) {
  *cast(void**)&glMultiTexCoord1hNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord1hNV`);
  if (*cast(void**)&glMultiTexCoord1hNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1hNV' not found!`);
  glMultiTexCoord1hNV_Z_Z(target, s);
}
alias glMultiTexCoord1hvNV = glMultiTexCoord1hvNV_Z_Z;
__gshared glMultiTexCoord1hvNV_Z_Z = function void (GLenum target, const(GLhalfNV)* v) { glMultiTexCoord1hvNV_Z_Z_loader(target, v); };
private void glMultiTexCoord1hvNV_Z_Z_loader (GLenum target, const(GLhalfNV)* v) {
  *cast(void**)&glMultiTexCoord1hvNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord1hvNV`);
  if (*cast(void**)&glMultiTexCoord1hvNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1hvNV' not found!`);
  glMultiTexCoord1hvNV_Z_Z(target, v);
}
alias glMultiTexCoord1i = glMultiTexCoord1i_Z_Z;
__gshared glMultiTexCoord1i_Z_Z = function void (GLenum target, GLint s) { glMultiTexCoord1i_Z_Z_loader(target, s); };
private void glMultiTexCoord1i_Z_Z_loader (GLenum target, GLint s) {
  *cast(void**)&glMultiTexCoord1i_Z_Z = glbindGetProcAddress(`glMultiTexCoord1i`);
  if (*cast(void**)&glMultiTexCoord1i_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1i' not found!`);
  glMultiTexCoord1i_Z_Z(target, s);
}
alias glMultiTexCoord1iARB = glMultiTexCoord1iARB_Z_Z;
__gshared glMultiTexCoord1iARB_Z_Z = function void (GLenum target, GLint s) { glMultiTexCoord1iARB_Z_Z_loader(target, s); };
private void glMultiTexCoord1iARB_Z_Z_loader (GLenum target, GLint s) {
  *cast(void**)&glMultiTexCoord1iARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1iARB`);
  if (*cast(void**)&glMultiTexCoord1iARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1iARB' not found!`);
  glMultiTexCoord1iARB_Z_Z(target, s);
}
alias glMultiTexCoord1iv = glMultiTexCoord1iv_Z_Z;
__gshared glMultiTexCoord1iv_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord1iv_Z_Z_loader(target, v); };
private void glMultiTexCoord1iv_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord1iv_Z_Z = glbindGetProcAddress(`glMultiTexCoord1iv`);
  if (*cast(void**)&glMultiTexCoord1iv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1iv' not found!`);
  glMultiTexCoord1iv_Z_Z(target, v);
}
alias glMultiTexCoord1ivARB = glMultiTexCoord1ivARB_Z_Z;
__gshared glMultiTexCoord1ivARB_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord1ivARB_Z_Z_loader(target, v); };
private void glMultiTexCoord1ivARB_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord1ivARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1ivARB`);
  if (*cast(void**)&glMultiTexCoord1ivARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1ivARB' not found!`);
  glMultiTexCoord1ivARB_Z_Z(target, v);
}
alias glMultiTexCoord1s = glMultiTexCoord1s_Z_Z;
__gshared glMultiTexCoord1s_Z_Z = function void (GLenum target, GLshort s) { glMultiTexCoord1s_Z_Z_loader(target, s); };
private void glMultiTexCoord1s_Z_Z_loader (GLenum target, GLshort s) {
  *cast(void**)&glMultiTexCoord1s_Z_Z = glbindGetProcAddress(`glMultiTexCoord1s`);
  if (*cast(void**)&glMultiTexCoord1s_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1s' not found!`);
  glMultiTexCoord1s_Z_Z(target, s);
}
alias glMultiTexCoord1sARB = glMultiTexCoord1sARB_Z_Z;
__gshared glMultiTexCoord1sARB_Z_Z = function void (GLenum target, GLshort s) { glMultiTexCoord1sARB_Z_Z_loader(target, s); };
private void glMultiTexCoord1sARB_Z_Z_loader (GLenum target, GLshort s) {
  *cast(void**)&glMultiTexCoord1sARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1sARB`);
  if (*cast(void**)&glMultiTexCoord1sARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1sARB' not found!`);
  glMultiTexCoord1sARB_Z_Z(target, s);
}
alias glMultiTexCoord1sv = glMultiTexCoord1sv_Z_Z;
__gshared glMultiTexCoord1sv_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord1sv_Z_Z_loader(target, v); };
private void glMultiTexCoord1sv_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord1sv_Z_Z = glbindGetProcAddress(`glMultiTexCoord1sv`);
  if (*cast(void**)&glMultiTexCoord1sv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1sv' not found!`);
  glMultiTexCoord1sv_Z_Z(target, v);
}
alias glMultiTexCoord1svARB = glMultiTexCoord1svARB_Z_Z;
__gshared glMultiTexCoord1svARB_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord1svARB_Z_Z_loader(target, v); };
private void glMultiTexCoord1svARB_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord1svARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord1svARB`);
  if (*cast(void**)&glMultiTexCoord1svARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1svARB' not found!`);
  glMultiTexCoord1svARB_Z_Z(target, v);
}
alias glMultiTexCoord1xOES = glMultiTexCoord1xOES_Z_Z;
__gshared glMultiTexCoord1xOES_Z_Z = function void (GLenum texture, GLfixed s) { glMultiTexCoord1xOES_Z_Z_loader(texture, s); };
private void glMultiTexCoord1xOES_Z_Z_loader (GLenum texture, GLfixed s) {
  *cast(void**)&glMultiTexCoord1xOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord1xOES`);
  if (*cast(void**)&glMultiTexCoord1xOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1xOES' not found!`);
  glMultiTexCoord1xOES_Z_Z(texture, s);
}
alias glMultiTexCoord1xvOES = glMultiTexCoord1xvOES_Z_Z;
__gshared glMultiTexCoord1xvOES_Z_Z = function void (GLenum texture, const(GLfixed)* coords) { glMultiTexCoord1xvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord1xvOES_Z_Z_loader (GLenum texture, const(GLfixed)* coords) {
  *cast(void**)&glMultiTexCoord1xvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord1xvOES`);
  if (*cast(void**)&glMultiTexCoord1xvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord1xvOES' not found!`);
  glMultiTexCoord1xvOES_Z_Z(texture, coords);
}
alias glMultiTexCoord2bOES = glMultiTexCoord2bOES_Z_Z;
__gshared glMultiTexCoord2bOES_Z_Z = function void (GLenum texture, GLbyte s, GLbyte t) { glMultiTexCoord2bOES_Z_Z_loader(texture, s, t); };
private void glMultiTexCoord2bOES_Z_Z_loader (GLenum texture, GLbyte s, GLbyte t) {
  *cast(void**)&glMultiTexCoord2bOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord2bOES`);
  if (*cast(void**)&glMultiTexCoord2bOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2bOES' not found!`);
  glMultiTexCoord2bOES_Z_Z(texture, s, t);
}
alias glMultiTexCoord2bvOES = glMultiTexCoord2bvOES_Z_Z;
__gshared glMultiTexCoord2bvOES_Z_Z = function void (GLenum texture, const(GLbyte)* coords) { glMultiTexCoord2bvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord2bvOES_Z_Z_loader (GLenum texture, const(GLbyte)* coords) {
  *cast(void**)&glMultiTexCoord2bvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord2bvOES`);
  if (*cast(void**)&glMultiTexCoord2bvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2bvOES' not found!`);
  glMultiTexCoord2bvOES_Z_Z(texture, coords);
}
alias glMultiTexCoord2d = glMultiTexCoord2d_Z_Z;
__gshared glMultiTexCoord2d_Z_Z = function void (GLenum target, GLdouble s, GLdouble t) { glMultiTexCoord2d_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2d_Z_Z_loader (GLenum target, GLdouble s, GLdouble t) {
  *cast(void**)&glMultiTexCoord2d_Z_Z = glbindGetProcAddress(`glMultiTexCoord2d`);
  if (*cast(void**)&glMultiTexCoord2d_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2d' not found!`);
  glMultiTexCoord2d_Z_Z(target, s, t);
}
alias glMultiTexCoord2dARB = glMultiTexCoord2dARB_Z_Z;
__gshared glMultiTexCoord2dARB_Z_Z = function void (GLenum target, GLdouble s, GLdouble t) { glMultiTexCoord2dARB_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2dARB_Z_Z_loader (GLenum target, GLdouble s, GLdouble t) {
  *cast(void**)&glMultiTexCoord2dARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2dARB`);
  if (*cast(void**)&glMultiTexCoord2dARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2dARB' not found!`);
  glMultiTexCoord2dARB_Z_Z(target, s, t);
}
alias glMultiTexCoord2dv = glMultiTexCoord2dv_Z_Z;
__gshared glMultiTexCoord2dv_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord2dv_Z_Z_loader(target, v); };
private void glMultiTexCoord2dv_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord2dv_Z_Z = glbindGetProcAddress(`glMultiTexCoord2dv`);
  if (*cast(void**)&glMultiTexCoord2dv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2dv' not found!`);
  glMultiTexCoord2dv_Z_Z(target, v);
}
alias glMultiTexCoord2dvARB = glMultiTexCoord2dvARB_Z_Z;
__gshared glMultiTexCoord2dvARB_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord2dvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord2dvARB_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord2dvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2dvARB`);
  if (*cast(void**)&glMultiTexCoord2dvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2dvARB' not found!`);
  glMultiTexCoord2dvARB_Z_Z(target, v);
}
alias glMultiTexCoord2f = glMultiTexCoord2f_Z_Z;
__gshared glMultiTexCoord2f_Z_Z = function void (GLenum target, GLfloat s, GLfloat t) { glMultiTexCoord2f_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2f_Z_Z_loader (GLenum target, GLfloat s, GLfloat t) {
  *cast(void**)&glMultiTexCoord2f_Z_Z = glbindGetProcAddress(`glMultiTexCoord2f`);
  if (*cast(void**)&glMultiTexCoord2f_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2f' not found!`);
  glMultiTexCoord2f_Z_Z(target, s, t);
}
alias glMultiTexCoord2fARB = glMultiTexCoord2fARB_Z_Z;
__gshared glMultiTexCoord2fARB_Z_Z = function void (GLenum target, GLfloat s, GLfloat t) { glMultiTexCoord2fARB_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2fARB_Z_Z_loader (GLenum target, GLfloat s, GLfloat t) {
  *cast(void**)&glMultiTexCoord2fARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2fARB`);
  if (*cast(void**)&glMultiTexCoord2fARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2fARB' not found!`);
  glMultiTexCoord2fARB_Z_Z(target, s, t);
}
alias glMultiTexCoord2fv = glMultiTexCoord2fv_Z_Z;
__gshared glMultiTexCoord2fv_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord2fv_Z_Z_loader(target, v); };
private void glMultiTexCoord2fv_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord2fv_Z_Z = glbindGetProcAddress(`glMultiTexCoord2fv`);
  if (*cast(void**)&glMultiTexCoord2fv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2fv' not found!`);
  glMultiTexCoord2fv_Z_Z(target, v);
}
alias glMultiTexCoord2fvARB = glMultiTexCoord2fvARB_Z_Z;
__gshared glMultiTexCoord2fvARB_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord2fvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord2fvARB_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord2fvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2fvARB`);
  if (*cast(void**)&glMultiTexCoord2fvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2fvARB' not found!`);
  glMultiTexCoord2fvARB_Z_Z(target, v);
}
alias glMultiTexCoord2hNV = glMultiTexCoord2hNV_Z_Z;
__gshared glMultiTexCoord2hNV_Z_Z = function void (GLenum target, GLhalfNV s, GLhalfNV t) { glMultiTexCoord2hNV_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2hNV_Z_Z_loader (GLenum target, GLhalfNV s, GLhalfNV t) {
  *cast(void**)&glMultiTexCoord2hNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord2hNV`);
  if (*cast(void**)&glMultiTexCoord2hNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2hNV' not found!`);
  glMultiTexCoord2hNV_Z_Z(target, s, t);
}
alias glMultiTexCoord2hvNV = glMultiTexCoord2hvNV_Z_Z;
__gshared glMultiTexCoord2hvNV_Z_Z = function void (GLenum target, const(GLhalfNV)* v) { glMultiTexCoord2hvNV_Z_Z_loader(target, v); };
private void glMultiTexCoord2hvNV_Z_Z_loader (GLenum target, const(GLhalfNV)* v) {
  *cast(void**)&glMultiTexCoord2hvNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord2hvNV`);
  if (*cast(void**)&glMultiTexCoord2hvNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2hvNV' not found!`);
  glMultiTexCoord2hvNV_Z_Z(target, v);
}
alias glMultiTexCoord2i = glMultiTexCoord2i_Z_Z;
__gshared glMultiTexCoord2i_Z_Z = function void (GLenum target, GLint s, GLint t) { glMultiTexCoord2i_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2i_Z_Z_loader (GLenum target, GLint s, GLint t) {
  *cast(void**)&glMultiTexCoord2i_Z_Z = glbindGetProcAddress(`glMultiTexCoord2i`);
  if (*cast(void**)&glMultiTexCoord2i_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2i' not found!`);
  glMultiTexCoord2i_Z_Z(target, s, t);
}
alias glMultiTexCoord2iARB = glMultiTexCoord2iARB_Z_Z;
__gshared glMultiTexCoord2iARB_Z_Z = function void (GLenum target, GLint s, GLint t) { glMultiTexCoord2iARB_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2iARB_Z_Z_loader (GLenum target, GLint s, GLint t) {
  *cast(void**)&glMultiTexCoord2iARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2iARB`);
  if (*cast(void**)&glMultiTexCoord2iARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2iARB' not found!`);
  glMultiTexCoord2iARB_Z_Z(target, s, t);
}
alias glMultiTexCoord2iv = glMultiTexCoord2iv_Z_Z;
__gshared glMultiTexCoord2iv_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord2iv_Z_Z_loader(target, v); };
private void glMultiTexCoord2iv_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord2iv_Z_Z = glbindGetProcAddress(`glMultiTexCoord2iv`);
  if (*cast(void**)&glMultiTexCoord2iv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2iv' not found!`);
  glMultiTexCoord2iv_Z_Z(target, v);
}
alias glMultiTexCoord2ivARB = glMultiTexCoord2ivARB_Z_Z;
__gshared glMultiTexCoord2ivARB_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord2ivARB_Z_Z_loader(target, v); };
private void glMultiTexCoord2ivARB_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord2ivARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2ivARB`);
  if (*cast(void**)&glMultiTexCoord2ivARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2ivARB' not found!`);
  glMultiTexCoord2ivARB_Z_Z(target, v);
}
alias glMultiTexCoord2s = glMultiTexCoord2s_Z_Z;
__gshared glMultiTexCoord2s_Z_Z = function void (GLenum target, GLshort s, GLshort t) { glMultiTexCoord2s_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2s_Z_Z_loader (GLenum target, GLshort s, GLshort t) {
  *cast(void**)&glMultiTexCoord2s_Z_Z = glbindGetProcAddress(`glMultiTexCoord2s`);
  if (*cast(void**)&glMultiTexCoord2s_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2s' not found!`);
  glMultiTexCoord2s_Z_Z(target, s, t);
}
alias glMultiTexCoord2sARB = glMultiTexCoord2sARB_Z_Z;
__gshared glMultiTexCoord2sARB_Z_Z = function void (GLenum target, GLshort s, GLshort t) { glMultiTexCoord2sARB_Z_Z_loader(target, s, t); };
private void glMultiTexCoord2sARB_Z_Z_loader (GLenum target, GLshort s, GLshort t) {
  *cast(void**)&glMultiTexCoord2sARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2sARB`);
  if (*cast(void**)&glMultiTexCoord2sARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2sARB' not found!`);
  glMultiTexCoord2sARB_Z_Z(target, s, t);
}
alias glMultiTexCoord2sv = glMultiTexCoord2sv_Z_Z;
__gshared glMultiTexCoord2sv_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord2sv_Z_Z_loader(target, v); };
private void glMultiTexCoord2sv_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord2sv_Z_Z = glbindGetProcAddress(`glMultiTexCoord2sv`);
  if (*cast(void**)&glMultiTexCoord2sv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2sv' not found!`);
  glMultiTexCoord2sv_Z_Z(target, v);
}
alias glMultiTexCoord2svARB = glMultiTexCoord2svARB_Z_Z;
__gshared glMultiTexCoord2svARB_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord2svARB_Z_Z_loader(target, v); };
private void glMultiTexCoord2svARB_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord2svARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord2svARB`);
  if (*cast(void**)&glMultiTexCoord2svARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2svARB' not found!`);
  glMultiTexCoord2svARB_Z_Z(target, v);
}
alias glMultiTexCoord2xOES = glMultiTexCoord2xOES_Z_Z;
__gshared glMultiTexCoord2xOES_Z_Z = function void (GLenum texture, GLfixed s, GLfixed t) { glMultiTexCoord2xOES_Z_Z_loader(texture, s, t); };
private void glMultiTexCoord2xOES_Z_Z_loader (GLenum texture, GLfixed s, GLfixed t) {
  *cast(void**)&glMultiTexCoord2xOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord2xOES`);
  if (*cast(void**)&glMultiTexCoord2xOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2xOES' not found!`);
  glMultiTexCoord2xOES_Z_Z(texture, s, t);
}
alias glMultiTexCoord2xvOES = glMultiTexCoord2xvOES_Z_Z;
__gshared glMultiTexCoord2xvOES_Z_Z = function void (GLenum texture, const(GLfixed)* coords) { glMultiTexCoord2xvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord2xvOES_Z_Z_loader (GLenum texture, const(GLfixed)* coords) {
  *cast(void**)&glMultiTexCoord2xvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord2xvOES`);
  if (*cast(void**)&glMultiTexCoord2xvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord2xvOES' not found!`);
  glMultiTexCoord2xvOES_Z_Z(texture, coords);
}
alias glMultiTexCoord3bOES = glMultiTexCoord3bOES_Z_Z;
__gshared glMultiTexCoord3bOES_Z_Z = function void (GLenum texture, GLbyte s, GLbyte t, GLbyte r) { glMultiTexCoord3bOES_Z_Z_loader(texture, s, t, r); };
private void glMultiTexCoord3bOES_Z_Z_loader (GLenum texture, GLbyte s, GLbyte t, GLbyte r) {
  *cast(void**)&glMultiTexCoord3bOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord3bOES`);
  if (*cast(void**)&glMultiTexCoord3bOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3bOES' not found!`);
  glMultiTexCoord3bOES_Z_Z(texture, s, t, r);
}
alias glMultiTexCoord3bvOES = glMultiTexCoord3bvOES_Z_Z;
__gshared glMultiTexCoord3bvOES_Z_Z = function void (GLenum texture, const(GLbyte)* coords) { glMultiTexCoord3bvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord3bvOES_Z_Z_loader (GLenum texture, const(GLbyte)* coords) {
  *cast(void**)&glMultiTexCoord3bvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord3bvOES`);
  if (*cast(void**)&glMultiTexCoord3bvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3bvOES' not found!`);
  glMultiTexCoord3bvOES_Z_Z(texture, coords);
}
alias glMultiTexCoord3d = glMultiTexCoord3d_Z_Z;
__gshared glMultiTexCoord3d_Z_Z = function void (GLenum target, GLdouble s, GLdouble t, GLdouble r) { glMultiTexCoord3d_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3d_Z_Z_loader (GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  *cast(void**)&glMultiTexCoord3d_Z_Z = glbindGetProcAddress(`glMultiTexCoord3d`);
  if (*cast(void**)&glMultiTexCoord3d_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3d' not found!`);
  glMultiTexCoord3d_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3dARB = glMultiTexCoord3dARB_Z_Z;
__gshared glMultiTexCoord3dARB_Z_Z = function void (GLenum target, GLdouble s, GLdouble t, GLdouble r) { glMultiTexCoord3dARB_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3dARB_Z_Z_loader (GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  *cast(void**)&glMultiTexCoord3dARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3dARB`);
  if (*cast(void**)&glMultiTexCoord3dARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3dARB' not found!`);
  glMultiTexCoord3dARB_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3dv = glMultiTexCoord3dv_Z_Z;
__gshared glMultiTexCoord3dv_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord3dv_Z_Z_loader(target, v); };
private void glMultiTexCoord3dv_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord3dv_Z_Z = glbindGetProcAddress(`glMultiTexCoord3dv`);
  if (*cast(void**)&glMultiTexCoord3dv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3dv' not found!`);
  glMultiTexCoord3dv_Z_Z(target, v);
}
alias glMultiTexCoord3dvARB = glMultiTexCoord3dvARB_Z_Z;
__gshared glMultiTexCoord3dvARB_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord3dvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord3dvARB_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord3dvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3dvARB`);
  if (*cast(void**)&glMultiTexCoord3dvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3dvARB' not found!`);
  glMultiTexCoord3dvARB_Z_Z(target, v);
}
alias glMultiTexCoord3f = glMultiTexCoord3f_Z_Z;
__gshared glMultiTexCoord3f_Z_Z = function void (GLenum target, GLfloat s, GLfloat t, GLfloat r) { glMultiTexCoord3f_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3f_Z_Z_loader (GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  *cast(void**)&glMultiTexCoord3f_Z_Z = glbindGetProcAddress(`glMultiTexCoord3f`);
  if (*cast(void**)&glMultiTexCoord3f_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3f' not found!`);
  glMultiTexCoord3f_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3fARB = glMultiTexCoord3fARB_Z_Z;
__gshared glMultiTexCoord3fARB_Z_Z = function void (GLenum target, GLfloat s, GLfloat t, GLfloat r) { glMultiTexCoord3fARB_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3fARB_Z_Z_loader (GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  *cast(void**)&glMultiTexCoord3fARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3fARB`);
  if (*cast(void**)&glMultiTexCoord3fARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3fARB' not found!`);
  glMultiTexCoord3fARB_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3fv = glMultiTexCoord3fv_Z_Z;
__gshared glMultiTexCoord3fv_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord3fv_Z_Z_loader(target, v); };
private void glMultiTexCoord3fv_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord3fv_Z_Z = glbindGetProcAddress(`glMultiTexCoord3fv`);
  if (*cast(void**)&glMultiTexCoord3fv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3fv' not found!`);
  glMultiTexCoord3fv_Z_Z(target, v);
}
alias glMultiTexCoord3fvARB = glMultiTexCoord3fvARB_Z_Z;
__gshared glMultiTexCoord3fvARB_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord3fvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord3fvARB_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord3fvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3fvARB`);
  if (*cast(void**)&glMultiTexCoord3fvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3fvARB' not found!`);
  glMultiTexCoord3fvARB_Z_Z(target, v);
}
alias glMultiTexCoord3hNV = glMultiTexCoord3hNV_Z_Z;
__gshared glMultiTexCoord3hNV_Z_Z = function void (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { glMultiTexCoord3hNV_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3hNV_Z_Z_loader (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  *cast(void**)&glMultiTexCoord3hNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord3hNV`);
  if (*cast(void**)&glMultiTexCoord3hNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3hNV' not found!`);
  glMultiTexCoord3hNV_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3hvNV = glMultiTexCoord3hvNV_Z_Z;
__gshared glMultiTexCoord3hvNV_Z_Z = function void (GLenum target, const(GLhalfNV)* v) { glMultiTexCoord3hvNV_Z_Z_loader(target, v); };
private void glMultiTexCoord3hvNV_Z_Z_loader (GLenum target, const(GLhalfNV)* v) {
  *cast(void**)&glMultiTexCoord3hvNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord3hvNV`);
  if (*cast(void**)&glMultiTexCoord3hvNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3hvNV' not found!`);
  glMultiTexCoord3hvNV_Z_Z(target, v);
}
alias glMultiTexCoord3i = glMultiTexCoord3i_Z_Z;
__gshared glMultiTexCoord3i_Z_Z = function void (GLenum target, GLint s, GLint t, GLint r) { glMultiTexCoord3i_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3i_Z_Z_loader (GLenum target, GLint s, GLint t, GLint r) {
  *cast(void**)&glMultiTexCoord3i_Z_Z = glbindGetProcAddress(`glMultiTexCoord3i`);
  if (*cast(void**)&glMultiTexCoord3i_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3i' not found!`);
  glMultiTexCoord3i_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3iARB = glMultiTexCoord3iARB_Z_Z;
__gshared glMultiTexCoord3iARB_Z_Z = function void (GLenum target, GLint s, GLint t, GLint r) { glMultiTexCoord3iARB_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3iARB_Z_Z_loader (GLenum target, GLint s, GLint t, GLint r) {
  *cast(void**)&glMultiTexCoord3iARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3iARB`);
  if (*cast(void**)&glMultiTexCoord3iARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3iARB' not found!`);
  glMultiTexCoord3iARB_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3iv = glMultiTexCoord3iv_Z_Z;
__gshared glMultiTexCoord3iv_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord3iv_Z_Z_loader(target, v); };
private void glMultiTexCoord3iv_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord3iv_Z_Z = glbindGetProcAddress(`glMultiTexCoord3iv`);
  if (*cast(void**)&glMultiTexCoord3iv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3iv' not found!`);
  glMultiTexCoord3iv_Z_Z(target, v);
}
alias glMultiTexCoord3ivARB = glMultiTexCoord3ivARB_Z_Z;
__gshared glMultiTexCoord3ivARB_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord3ivARB_Z_Z_loader(target, v); };
private void glMultiTexCoord3ivARB_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord3ivARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3ivARB`);
  if (*cast(void**)&glMultiTexCoord3ivARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3ivARB' not found!`);
  glMultiTexCoord3ivARB_Z_Z(target, v);
}
alias glMultiTexCoord3s = glMultiTexCoord3s_Z_Z;
__gshared glMultiTexCoord3s_Z_Z = function void (GLenum target, GLshort s, GLshort t, GLshort r) { glMultiTexCoord3s_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3s_Z_Z_loader (GLenum target, GLshort s, GLshort t, GLshort r) {
  *cast(void**)&glMultiTexCoord3s_Z_Z = glbindGetProcAddress(`glMultiTexCoord3s`);
  if (*cast(void**)&glMultiTexCoord3s_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3s' not found!`);
  glMultiTexCoord3s_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3sARB = glMultiTexCoord3sARB_Z_Z;
__gshared glMultiTexCoord3sARB_Z_Z = function void (GLenum target, GLshort s, GLshort t, GLshort r) { glMultiTexCoord3sARB_Z_Z_loader(target, s, t, r); };
private void glMultiTexCoord3sARB_Z_Z_loader (GLenum target, GLshort s, GLshort t, GLshort r) {
  *cast(void**)&glMultiTexCoord3sARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3sARB`);
  if (*cast(void**)&glMultiTexCoord3sARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3sARB' not found!`);
  glMultiTexCoord3sARB_Z_Z(target, s, t, r);
}
alias glMultiTexCoord3sv = glMultiTexCoord3sv_Z_Z;
__gshared glMultiTexCoord3sv_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord3sv_Z_Z_loader(target, v); };
private void glMultiTexCoord3sv_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord3sv_Z_Z = glbindGetProcAddress(`glMultiTexCoord3sv`);
  if (*cast(void**)&glMultiTexCoord3sv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3sv' not found!`);
  glMultiTexCoord3sv_Z_Z(target, v);
}
alias glMultiTexCoord3svARB = glMultiTexCoord3svARB_Z_Z;
__gshared glMultiTexCoord3svARB_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord3svARB_Z_Z_loader(target, v); };
private void glMultiTexCoord3svARB_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord3svARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord3svARB`);
  if (*cast(void**)&glMultiTexCoord3svARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3svARB' not found!`);
  glMultiTexCoord3svARB_Z_Z(target, v);
}
alias glMultiTexCoord3xOES = glMultiTexCoord3xOES_Z_Z;
__gshared glMultiTexCoord3xOES_Z_Z = function void (GLenum texture, GLfixed s, GLfixed t, GLfixed r) { glMultiTexCoord3xOES_Z_Z_loader(texture, s, t, r); };
private void glMultiTexCoord3xOES_Z_Z_loader (GLenum texture, GLfixed s, GLfixed t, GLfixed r) {
  *cast(void**)&glMultiTexCoord3xOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord3xOES`);
  if (*cast(void**)&glMultiTexCoord3xOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3xOES' not found!`);
  glMultiTexCoord3xOES_Z_Z(texture, s, t, r);
}
alias glMultiTexCoord3xvOES = glMultiTexCoord3xvOES_Z_Z;
__gshared glMultiTexCoord3xvOES_Z_Z = function void (GLenum texture, const(GLfixed)* coords) { glMultiTexCoord3xvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord3xvOES_Z_Z_loader (GLenum texture, const(GLfixed)* coords) {
  *cast(void**)&glMultiTexCoord3xvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord3xvOES`);
  if (*cast(void**)&glMultiTexCoord3xvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord3xvOES' not found!`);
  glMultiTexCoord3xvOES_Z_Z(texture, coords);
}
alias glMultiTexCoord4bOES = glMultiTexCoord4bOES_Z_Z;
__gshared glMultiTexCoord4bOES_Z_Z = function void (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { glMultiTexCoord4bOES_Z_Z_loader(texture, s, t, r, q); };
private void glMultiTexCoord4bOES_Z_Z_loader (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
  *cast(void**)&glMultiTexCoord4bOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord4bOES`);
  if (*cast(void**)&glMultiTexCoord4bOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4bOES' not found!`);
  glMultiTexCoord4bOES_Z_Z(texture, s, t, r, q);
}
alias glMultiTexCoord4bvOES = glMultiTexCoord4bvOES_Z_Z;
__gshared glMultiTexCoord4bvOES_Z_Z = function void (GLenum texture, const(GLbyte)* coords) { glMultiTexCoord4bvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord4bvOES_Z_Z_loader (GLenum texture, const(GLbyte)* coords) {
  *cast(void**)&glMultiTexCoord4bvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord4bvOES`);
  if (*cast(void**)&glMultiTexCoord4bvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4bvOES' not found!`);
  glMultiTexCoord4bvOES_Z_Z(texture, coords);
}
alias glMultiTexCoord4d = glMultiTexCoord4d_Z_Z;
__gshared glMultiTexCoord4d_Z_Z = function void (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { glMultiTexCoord4d_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4d_Z_Z_loader (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  *cast(void**)&glMultiTexCoord4d_Z_Z = glbindGetProcAddress(`glMultiTexCoord4d`);
  if (*cast(void**)&glMultiTexCoord4d_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4d' not found!`);
  glMultiTexCoord4d_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4dARB = glMultiTexCoord4dARB_Z_Z;
__gshared glMultiTexCoord4dARB_Z_Z = function void (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { glMultiTexCoord4dARB_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4dARB_Z_Z_loader (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  *cast(void**)&glMultiTexCoord4dARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4dARB`);
  if (*cast(void**)&glMultiTexCoord4dARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4dARB' not found!`);
  glMultiTexCoord4dARB_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4dv = glMultiTexCoord4dv_Z_Z;
__gshared glMultiTexCoord4dv_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord4dv_Z_Z_loader(target, v); };
private void glMultiTexCoord4dv_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord4dv_Z_Z = glbindGetProcAddress(`glMultiTexCoord4dv`);
  if (*cast(void**)&glMultiTexCoord4dv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4dv' not found!`);
  glMultiTexCoord4dv_Z_Z(target, v);
}
alias glMultiTexCoord4dvARB = glMultiTexCoord4dvARB_Z_Z;
__gshared glMultiTexCoord4dvARB_Z_Z = function void (GLenum target, const(GLdouble)* v) { glMultiTexCoord4dvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord4dvARB_Z_Z_loader (GLenum target, const(GLdouble)* v) {
  *cast(void**)&glMultiTexCoord4dvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4dvARB`);
  if (*cast(void**)&glMultiTexCoord4dvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4dvARB' not found!`);
  glMultiTexCoord4dvARB_Z_Z(target, v);
}
alias glMultiTexCoord4f = glMultiTexCoord4f_Z_Z;
__gshared glMultiTexCoord4f_Z_Z = function void (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { glMultiTexCoord4f_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4f_Z_Z_loader (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  *cast(void**)&glMultiTexCoord4f_Z_Z = glbindGetProcAddress(`glMultiTexCoord4f`);
  if (*cast(void**)&glMultiTexCoord4f_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4f' not found!`);
  glMultiTexCoord4f_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4fARB = glMultiTexCoord4fARB_Z_Z;
__gshared glMultiTexCoord4fARB_Z_Z = function void (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { glMultiTexCoord4fARB_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4fARB_Z_Z_loader (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  *cast(void**)&glMultiTexCoord4fARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4fARB`);
  if (*cast(void**)&glMultiTexCoord4fARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4fARB' not found!`);
  glMultiTexCoord4fARB_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4fv = glMultiTexCoord4fv_Z_Z;
__gshared glMultiTexCoord4fv_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord4fv_Z_Z_loader(target, v); };
private void glMultiTexCoord4fv_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord4fv_Z_Z = glbindGetProcAddress(`glMultiTexCoord4fv`);
  if (*cast(void**)&glMultiTexCoord4fv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4fv' not found!`);
  glMultiTexCoord4fv_Z_Z(target, v);
}
alias glMultiTexCoord4fvARB = glMultiTexCoord4fvARB_Z_Z;
__gshared glMultiTexCoord4fvARB_Z_Z = function void (GLenum target, const(GLfloat)* v) { glMultiTexCoord4fvARB_Z_Z_loader(target, v); };
private void glMultiTexCoord4fvARB_Z_Z_loader (GLenum target, const(GLfloat)* v) {
  *cast(void**)&glMultiTexCoord4fvARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4fvARB`);
  if (*cast(void**)&glMultiTexCoord4fvARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4fvARB' not found!`);
  glMultiTexCoord4fvARB_Z_Z(target, v);
}
alias glMultiTexCoord4hNV = glMultiTexCoord4hNV_Z_Z;
__gshared glMultiTexCoord4hNV_Z_Z = function void (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { glMultiTexCoord4hNV_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4hNV_Z_Z_loader (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  *cast(void**)&glMultiTexCoord4hNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord4hNV`);
  if (*cast(void**)&glMultiTexCoord4hNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4hNV' not found!`);
  glMultiTexCoord4hNV_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4hvNV = glMultiTexCoord4hvNV_Z_Z;
__gshared glMultiTexCoord4hvNV_Z_Z = function void (GLenum target, const(GLhalfNV)* v) { glMultiTexCoord4hvNV_Z_Z_loader(target, v); };
private void glMultiTexCoord4hvNV_Z_Z_loader (GLenum target, const(GLhalfNV)* v) {
  *cast(void**)&glMultiTexCoord4hvNV_Z_Z = glbindGetProcAddress(`glMultiTexCoord4hvNV`);
  if (*cast(void**)&glMultiTexCoord4hvNV_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4hvNV' not found!`);
  glMultiTexCoord4hvNV_Z_Z(target, v);
}
alias glMultiTexCoord4i = glMultiTexCoord4i_Z_Z;
__gshared glMultiTexCoord4i_Z_Z = function void (GLenum target, GLint s, GLint t, GLint r, GLint q) { glMultiTexCoord4i_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4i_Z_Z_loader (GLenum target, GLint s, GLint t, GLint r, GLint q) {
  *cast(void**)&glMultiTexCoord4i_Z_Z = glbindGetProcAddress(`glMultiTexCoord4i`);
  if (*cast(void**)&glMultiTexCoord4i_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4i' not found!`);
  glMultiTexCoord4i_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4iARB = glMultiTexCoord4iARB_Z_Z;
__gshared glMultiTexCoord4iARB_Z_Z = function void (GLenum target, GLint s, GLint t, GLint r, GLint q) { glMultiTexCoord4iARB_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4iARB_Z_Z_loader (GLenum target, GLint s, GLint t, GLint r, GLint q) {
  *cast(void**)&glMultiTexCoord4iARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4iARB`);
  if (*cast(void**)&glMultiTexCoord4iARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4iARB' not found!`);
  glMultiTexCoord4iARB_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4iv = glMultiTexCoord4iv_Z_Z;
__gshared glMultiTexCoord4iv_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord4iv_Z_Z_loader(target, v); };
private void glMultiTexCoord4iv_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord4iv_Z_Z = glbindGetProcAddress(`glMultiTexCoord4iv`);
  if (*cast(void**)&glMultiTexCoord4iv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4iv' not found!`);
  glMultiTexCoord4iv_Z_Z(target, v);
}
alias glMultiTexCoord4ivARB = glMultiTexCoord4ivARB_Z_Z;
__gshared glMultiTexCoord4ivARB_Z_Z = function void (GLenum target, const(GLint)* v) { glMultiTexCoord4ivARB_Z_Z_loader(target, v); };
private void glMultiTexCoord4ivARB_Z_Z_loader (GLenum target, const(GLint)* v) {
  *cast(void**)&glMultiTexCoord4ivARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4ivARB`);
  if (*cast(void**)&glMultiTexCoord4ivARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4ivARB' not found!`);
  glMultiTexCoord4ivARB_Z_Z(target, v);
}
alias glMultiTexCoord4s = glMultiTexCoord4s_Z_Z;
__gshared glMultiTexCoord4s_Z_Z = function void (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { glMultiTexCoord4s_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4s_Z_Z_loader (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  *cast(void**)&glMultiTexCoord4s_Z_Z = glbindGetProcAddress(`glMultiTexCoord4s`);
  if (*cast(void**)&glMultiTexCoord4s_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4s' not found!`);
  glMultiTexCoord4s_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4sARB = glMultiTexCoord4sARB_Z_Z;
__gshared glMultiTexCoord4sARB_Z_Z = function void (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { glMultiTexCoord4sARB_Z_Z_loader(target, s, t, r, q); };
private void glMultiTexCoord4sARB_Z_Z_loader (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  *cast(void**)&glMultiTexCoord4sARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4sARB`);
  if (*cast(void**)&glMultiTexCoord4sARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4sARB' not found!`);
  glMultiTexCoord4sARB_Z_Z(target, s, t, r, q);
}
alias glMultiTexCoord4sv = glMultiTexCoord4sv_Z_Z;
__gshared glMultiTexCoord4sv_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord4sv_Z_Z_loader(target, v); };
private void glMultiTexCoord4sv_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord4sv_Z_Z = glbindGetProcAddress(`glMultiTexCoord4sv`);
  if (*cast(void**)&glMultiTexCoord4sv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4sv' not found!`);
  glMultiTexCoord4sv_Z_Z(target, v);
}
alias glMultiTexCoord4svARB = glMultiTexCoord4svARB_Z_Z;
__gshared glMultiTexCoord4svARB_Z_Z = function void (GLenum target, const(GLshort)* v) { glMultiTexCoord4svARB_Z_Z_loader(target, v); };
private void glMultiTexCoord4svARB_Z_Z_loader (GLenum target, const(GLshort)* v) {
  *cast(void**)&glMultiTexCoord4svARB_Z_Z = glbindGetProcAddress(`glMultiTexCoord4svARB`);
  if (*cast(void**)&glMultiTexCoord4svARB_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4svARB' not found!`);
  glMultiTexCoord4svARB_Z_Z(target, v);
}
alias glMultiTexCoord4x = glMultiTexCoord4x_Z_Z;
__gshared glMultiTexCoord4x_Z_Z = function void (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { glMultiTexCoord4x_Z_Z_loader(texture, s, t, r, q); };
private void glMultiTexCoord4x_Z_Z_loader (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  *cast(void**)&glMultiTexCoord4x_Z_Z = glbindGetProcAddress(`glMultiTexCoord4x`);
  if (*cast(void**)&glMultiTexCoord4x_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4x' not found!`);
  glMultiTexCoord4x_Z_Z(texture, s, t, r, q);
}
alias glMultiTexCoord4xOES = glMultiTexCoord4xOES_Z_Z;
__gshared glMultiTexCoord4xOES_Z_Z = function void (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { glMultiTexCoord4xOES_Z_Z_loader(texture, s, t, r, q); };
private void glMultiTexCoord4xOES_Z_Z_loader (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  *cast(void**)&glMultiTexCoord4xOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord4xOES`);
  if (*cast(void**)&glMultiTexCoord4xOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4xOES' not found!`);
  glMultiTexCoord4xOES_Z_Z(texture, s, t, r, q);
}
alias glMultiTexCoord4xvOES = glMultiTexCoord4xvOES_Z_Z;
__gshared glMultiTexCoord4xvOES_Z_Z = function void (GLenum texture, const(GLfixed)* coords) { glMultiTexCoord4xvOES_Z_Z_loader(texture, coords); };
private void glMultiTexCoord4xvOES_Z_Z_loader (GLenum texture, const(GLfixed)* coords) {
  *cast(void**)&glMultiTexCoord4xvOES_Z_Z = glbindGetProcAddress(`glMultiTexCoord4xvOES`);
  if (*cast(void**)&glMultiTexCoord4xvOES_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoord4xvOES' not found!`);
  glMultiTexCoord4xvOES_Z_Z(texture, coords);
}
alias glMultiTexCoordP1ui = glMultiTexCoordP1ui_Z_Z;
__gshared glMultiTexCoordP1ui_Z_Z = function void (GLenum texture, GLenum type, GLuint coords) { glMultiTexCoordP1ui_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP1ui_Z_Z_loader (GLenum texture, GLenum type, GLuint coords) {
  *cast(void**)&glMultiTexCoordP1ui_Z_Z = glbindGetProcAddress(`glMultiTexCoordP1ui`);
  if (*cast(void**)&glMultiTexCoordP1ui_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP1ui' not found!`);
  glMultiTexCoordP1ui_Z_Z(texture, type, coords);
}
alias glMultiTexCoordP1uiv = glMultiTexCoordP1uiv_Z_Z;
__gshared glMultiTexCoordP1uiv_Z_Z = function void (GLenum texture, GLenum type, const(GLuint)* coords) { glMultiTexCoordP1uiv_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP1uiv_Z_Z_loader (GLenum texture, GLenum type, const(GLuint)* coords) {
  *cast(void**)&glMultiTexCoordP1uiv_Z_Z = glbindGetProcAddress(`glMultiTexCoordP1uiv`);
  if (*cast(void**)&glMultiTexCoordP1uiv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP1uiv' not found!`);
  glMultiTexCoordP1uiv_Z_Z(texture, type, coords);
}
alias glMultiTexCoordP2ui = glMultiTexCoordP2ui_Z_Z;
__gshared glMultiTexCoordP2ui_Z_Z = function void (GLenum texture, GLenum type, GLuint coords) { glMultiTexCoordP2ui_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP2ui_Z_Z_loader (GLenum texture, GLenum type, GLuint coords) {
  *cast(void**)&glMultiTexCoordP2ui_Z_Z = glbindGetProcAddress(`glMultiTexCoordP2ui`);
  if (*cast(void**)&glMultiTexCoordP2ui_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP2ui' not found!`);
  glMultiTexCoordP2ui_Z_Z(texture, type, coords);
}
alias glMultiTexCoordP2uiv = glMultiTexCoordP2uiv_Z_Z;
__gshared glMultiTexCoordP2uiv_Z_Z = function void (GLenum texture, GLenum type, const(GLuint)* coords) { glMultiTexCoordP2uiv_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP2uiv_Z_Z_loader (GLenum texture, GLenum type, const(GLuint)* coords) {
  *cast(void**)&glMultiTexCoordP2uiv_Z_Z = glbindGetProcAddress(`glMultiTexCoordP2uiv`);
  if (*cast(void**)&glMultiTexCoordP2uiv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP2uiv' not found!`);
  glMultiTexCoordP2uiv_Z_Z(texture, type, coords);
}
alias glMultiTexCoordP3ui = glMultiTexCoordP3ui_Z_Z;
__gshared glMultiTexCoordP3ui_Z_Z = function void (GLenum texture, GLenum type, GLuint coords) { glMultiTexCoordP3ui_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP3ui_Z_Z_loader (GLenum texture, GLenum type, GLuint coords) {
  *cast(void**)&glMultiTexCoordP3ui_Z_Z = glbindGetProcAddress(`glMultiTexCoordP3ui`);
  if (*cast(void**)&glMultiTexCoordP3ui_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP3ui' not found!`);
  glMultiTexCoordP3ui_Z_Z(texture, type, coords);
}
alias glMultiTexCoordP3uiv = glMultiTexCoordP3uiv_Z_Z;
__gshared glMultiTexCoordP3uiv_Z_Z = function void (GLenum texture, GLenum type, const(GLuint)* coords) { glMultiTexCoordP3uiv_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP3uiv_Z_Z_loader (GLenum texture, GLenum type, const(GLuint)* coords) {
  *cast(void**)&glMultiTexCoordP3uiv_Z_Z = glbindGetProcAddress(`glMultiTexCoordP3uiv`);
  if (*cast(void**)&glMultiTexCoordP3uiv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP3uiv' not found!`);
  glMultiTexCoordP3uiv_Z_Z(texture, type, coords);
}
alias glMultiTexCoordP4ui = glMultiTexCoordP4ui_Z_Z;
__gshared glMultiTexCoordP4ui_Z_Z = function void (GLenum texture, GLenum type, GLuint coords) { glMultiTexCoordP4ui_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP4ui_Z_Z_loader (GLenum texture, GLenum type, GLuint coords) {
  *cast(void**)&glMultiTexCoordP4ui_Z_Z = glbindGetProcAddress(`glMultiTexCoordP4ui`);
  if (*cast(void**)&glMultiTexCoordP4ui_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP4ui' not found!`);
  glMultiTexCoordP4ui_Z_Z(texture, type, coords);
}
alias glMultiTexCoordP4uiv = glMultiTexCoordP4uiv_Z_Z;
__gshared glMultiTexCoordP4uiv_Z_Z = function void (GLenum texture, GLenum type, const(GLuint)* coords) { glMultiTexCoordP4uiv_Z_Z_loader(texture, type, coords); };
private void glMultiTexCoordP4uiv_Z_Z_loader (GLenum texture, GLenum type, const(GLuint)* coords) {
  *cast(void**)&glMultiTexCoordP4uiv_Z_Z = glbindGetProcAddress(`glMultiTexCoordP4uiv`);
  if (*cast(void**)&glMultiTexCoordP4uiv_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordP4uiv' not found!`);
  glMultiTexCoordP4uiv_Z_Z(texture, type, coords);
}
alias glMultiTexCoordPointerEXT = glMultiTexCoordPointerEXT_Z_Z;
__gshared glMultiTexCoordPointerEXT_Z_Z = function void (GLenum texunit, GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glMultiTexCoordPointerEXT_Z_Z_loader(texunit, size, type, stride, pointer); };
private void glMultiTexCoordPointerEXT_Z_Z_loader (GLenum texunit, GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glMultiTexCoordPointerEXT_Z_Z = glbindGetProcAddress(`glMultiTexCoordPointerEXT`);
  if (*cast(void**)&glMultiTexCoordPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexCoordPointerEXT' not found!`);
  glMultiTexCoordPointerEXT_Z_Z(texunit, size, type, stride, pointer);
}
alias glMultiTexEnvfEXT = glMultiTexEnvfEXT_Z_Z;
__gshared glMultiTexEnvfEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLfloat param) { glMultiTexEnvfEXT_Z_Z_loader(texunit, target, pname, param); };
private void glMultiTexEnvfEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  *cast(void**)&glMultiTexEnvfEXT_Z_Z = glbindGetProcAddress(`glMultiTexEnvfEXT`);
  if (*cast(void**)&glMultiTexEnvfEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexEnvfEXT' not found!`);
  glMultiTexEnvfEXT_Z_Z(texunit, target, pname, param);
}
alias glMultiTexEnvfvEXT = glMultiTexEnvfvEXT_Z_Z;
__gshared glMultiTexEnvfvEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, const(GLfloat)* params) { glMultiTexEnvfvEXT_Z_Z_loader(texunit, target, pname, params); };
private void glMultiTexEnvfvEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glMultiTexEnvfvEXT_Z_Z = glbindGetProcAddress(`glMultiTexEnvfvEXT`);
  if (*cast(void**)&glMultiTexEnvfvEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexEnvfvEXT' not found!`);
  glMultiTexEnvfvEXT_Z_Z(texunit, target, pname, params);
}
alias glMultiTexEnviEXT = glMultiTexEnviEXT_Z_Z;
__gshared glMultiTexEnviEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLint param) { glMultiTexEnviEXT_Z_Z_loader(texunit, target, pname, param); };
private void glMultiTexEnviEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glMultiTexEnviEXT_Z_Z = glbindGetProcAddress(`glMultiTexEnviEXT`);
  if (*cast(void**)&glMultiTexEnviEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexEnviEXT' not found!`);
  glMultiTexEnviEXT_Z_Z(texunit, target, pname, param);
}
alias glMultiTexEnvivEXT = glMultiTexEnvivEXT_Z_Z;
__gshared glMultiTexEnvivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, const(GLint)* params) { glMultiTexEnvivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glMultiTexEnvivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glMultiTexEnvivEXT_Z_Z = glbindGetProcAddress(`glMultiTexEnvivEXT`);
  if (*cast(void**)&glMultiTexEnvivEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexEnvivEXT' not found!`);
  glMultiTexEnvivEXT_Z_Z(texunit, target, pname, params);
}
alias glMultiTexGendEXT = glMultiTexGendEXT_Z_Z;
__gshared glMultiTexGendEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { glMultiTexGendEXT_Z_Z_loader(texunit, coord, pname, param); };
private void glMultiTexGendEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
  *cast(void**)&glMultiTexGendEXT_Z_Z = glbindGetProcAddress(`glMultiTexGendEXT`);
  if (*cast(void**)&glMultiTexGendEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexGendEXT' not found!`);
  glMultiTexGendEXT_Z_Z(texunit, coord, pname, param);
}
alias glMultiTexGendvEXT = glMultiTexGendvEXT_Z_Z;
__gshared glMultiTexGendvEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, const(GLdouble)* params) { glMultiTexGendvEXT_Z_Z_loader(texunit, coord, pname, params); };
private void glMultiTexGendvEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, const(GLdouble)* params) {
  *cast(void**)&glMultiTexGendvEXT_Z_Z = glbindGetProcAddress(`glMultiTexGendvEXT`);
  if (*cast(void**)&glMultiTexGendvEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexGendvEXT' not found!`);
  glMultiTexGendvEXT_Z_Z(texunit, coord, pname, params);
}
alias glMultiTexGenfEXT = glMultiTexGenfEXT_Z_Z;
__gshared glMultiTexGenfEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { glMultiTexGenfEXT_Z_Z_loader(texunit, coord, pname, param); };
private void glMultiTexGenfEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
  *cast(void**)&glMultiTexGenfEXT_Z_Z = glbindGetProcAddress(`glMultiTexGenfEXT`);
  if (*cast(void**)&glMultiTexGenfEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexGenfEXT' not found!`);
  glMultiTexGenfEXT_Z_Z(texunit, coord, pname, param);
}
alias glMultiTexGenfvEXT = glMultiTexGenfvEXT_Z_Z;
__gshared glMultiTexGenfvEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, const(GLfloat)* params) { glMultiTexGenfvEXT_Z_Z_loader(texunit, coord, pname, params); };
private void glMultiTexGenfvEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glMultiTexGenfvEXT_Z_Z = glbindGetProcAddress(`glMultiTexGenfvEXT`);
  if (*cast(void**)&glMultiTexGenfvEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexGenfvEXT' not found!`);
  glMultiTexGenfvEXT_Z_Z(texunit, coord, pname, params);
}
alias glMultiTexGeniEXT = glMultiTexGeniEXT_Z_Z;
__gshared glMultiTexGeniEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, GLint param) { glMultiTexGeniEXT_Z_Z_loader(texunit, coord, pname, param); };
private void glMultiTexGeniEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, GLint param) {
  *cast(void**)&glMultiTexGeniEXT_Z_Z = glbindGetProcAddress(`glMultiTexGeniEXT`);
  if (*cast(void**)&glMultiTexGeniEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexGeniEXT' not found!`);
  glMultiTexGeniEXT_Z_Z(texunit, coord, pname, param);
}
alias glMultiTexGenivEXT = glMultiTexGenivEXT_Z_Z;
__gshared glMultiTexGenivEXT_Z_Z = function void (GLenum texunit, GLenum coord, GLenum pname, const(GLint)* params) { glMultiTexGenivEXT_Z_Z_loader(texunit, coord, pname, params); };
private void glMultiTexGenivEXT_Z_Z_loader (GLenum texunit, GLenum coord, GLenum pname, const(GLint)* params) {
  *cast(void**)&glMultiTexGenivEXT_Z_Z = glbindGetProcAddress(`glMultiTexGenivEXT`);
  if (*cast(void**)&glMultiTexGenivEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexGenivEXT' not found!`);
  glMultiTexGenivEXT_Z_Z(texunit, coord, pname, params);
}
alias glMultiTexImage1DEXT = glMultiTexImage1DEXT_Z_Z;
__gshared glMultiTexImage1DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(void)* pixels) { glMultiTexImage1DEXT_Z_Z_loader(texunit, target, level, internalformat, width, border, format, type, pixels); };
private void glMultiTexImage1DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glMultiTexImage1DEXT_Z_Z = glbindGetProcAddress(`glMultiTexImage1DEXT`);
  if (*cast(void**)&glMultiTexImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexImage1DEXT' not found!`);
  glMultiTexImage1DEXT_Z_Z(texunit, target, level, internalformat, width, border, format, type, pixels);
}
alias glMultiTexImage2DEXT = glMultiTexImage2DEXT_Z_Z;
__gshared glMultiTexImage2DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels) { glMultiTexImage2DEXT_Z_Z_loader(texunit, target, level, internalformat, width, height, border, format, type, pixels); };
private void glMultiTexImage2DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glMultiTexImage2DEXT_Z_Z = glbindGetProcAddress(`glMultiTexImage2DEXT`);
  if (*cast(void**)&glMultiTexImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexImage2DEXT' not found!`);
  glMultiTexImage2DEXT_Z_Z(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}
alias glMultiTexImage3DEXT = glMultiTexImage3DEXT_Z_Z;
__gshared glMultiTexImage3DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) { glMultiTexImage3DEXT_Z_Z_loader(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); };
private void glMultiTexImage3DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glMultiTexImage3DEXT_Z_Z = glbindGetProcAddress(`glMultiTexImage3DEXT`);
  if (*cast(void**)&glMultiTexImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexImage3DEXT' not found!`);
  glMultiTexImage3DEXT_Z_Z(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
alias glMultiTexParameterIivEXT = glMultiTexParameterIivEXT_Z_Z;
__gshared glMultiTexParameterIivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, const(GLint)* params) { glMultiTexParameterIivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glMultiTexParameterIivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glMultiTexParameterIivEXT_Z_Z = glbindGetProcAddress(`glMultiTexParameterIivEXT`);
  if (*cast(void**)&glMultiTexParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexParameterIivEXT' not found!`);
  glMultiTexParameterIivEXT_Z_Z(texunit, target, pname, params);
}
alias glMultiTexParameterIuivEXT = glMultiTexParameterIuivEXT_Z_Z;
__gshared glMultiTexParameterIuivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, const(GLuint)* params) { glMultiTexParameterIuivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glMultiTexParameterIuivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, const(GLuint)* params) {
  *cast(void**)&glMultiTexParameterIuivEXT_Z_Z = glbindGetProcAddress(`glMultiTexParameterIuivEXT`);
  if (*cast(void**)&glMultiTexParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexParameterIuivEXT' not found!`);
  glMultiTexParameterIuivEXT_Z_Z(texunit, target, pname, params);
}
alias glMultiTexParameterfEXT = glMultiTexParameterfEXT_Z_Z;
__gshared glMultiTexParameterfEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLfloat param) { glMultiTexParameterfEXT_Z_Z_loader(texunit, target, pname, param); };
private void glMultiTexParameterfEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  *cast(void**)&glMultiTexParameterfEXT_Z_Z = glbindGetProcAddress(`glMultiTexParameterfEXT`);
  if (*cast(void**)&glMultiTexParameterfEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexParameterfEXT' not found!`);
  glMultiTexParameterfEXT_Z_Z(texunit, target, pname, param);
}
alias glMultiTexParameterfvEXT = glMultiTexParameterfvEXT_Z_Z;
__gshared glMultiTexParameterfvEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, const(GLfloat)* params) { glMultiTexParameterfvEXT_Z_Z_loader(texunit, target, pname, params); };
private void glMultiTexParameterfvEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glMultiTexParameterfvEXT_Z_Z = glbindGetProcAddress(`glMultiTexParameterfvEXT`);
  if (*cast(void**)&glMultiTexParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexParameterfvEXT' not found!`);
  glMultiTexParameterfvEXT_Z_Z(texunit, target, pname, params);
}
alias glMultiTexParameteriEXT = glMultiTexParameteriEXT_Z_Z;
__gshared glMultiTexParameteriEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, GLint param) { glMultiTexParameteriEXT_Z_Z_loader(texunit, target, pname, param); };
private void glMultiTexParameteriEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glMultiTexParameteriEXT_Z_Z = glbindGetProcAddress(`glMultiTexParameteriEXT`);
  if (*cast(void**)&glMultiTexParameteriEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexParameteriEXT' not found!`);
  glMultiTexParameteriEXT_Z_Z(texunit, target, pname, param);
}
alias glMultiTexParameterivEXT = glMultiTexParameterivEXT_Z_Z;
__gshared glMultiTexParameterivEXT_Z_Z = function void (GLenum texunit, GLenum target, GLenum pname, const(GLint)* params) { glMultiTexParameterivEXT_Z_Z_loader(texunit, target, pname, params); };
private void glMultiTexParameterivEXT_Z_Z_loader (GLenum texunit, GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glMultiTexParameterivEXT_Z_Z = glbindGetProcAddress(`glMultiTexParameterivEXT`);
  if (*cast(void**)&glMultiTexParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexParameterivEXT' not found!`);
  glMultiTexParameterivEXT_Z_Z(texunit, target, pname, params);
}
alias glMultiTexRenderbufferEXT = glMultiTexRenderbufferEXT_Z_Z;
__gshared glMultiTexRenderbufferEXT_Z_Z = function void (GLenum texunit, GLenum target, GLuint renderbuffer) { glMultiTexRenderbufferEXT_Z_Z_loader(texunit, target, renderbuffer); };
private void glMultiTexRenderbufferEXT_Z_Z_loader (GLenum texunit, GLenum target, GLuint renderbuffer) {
  *cast(void**)&glMultiTexRenderbufferEXT_Z_Z = glbindGetProcAddress(`glMultiTexRenderbufferEXT`);
  if (*cast(void**)&glMultiTexRenderbufferEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexRenderbufferEXT' not found!`);
  glMultiTexRenderbufferEXT_Z_Z(texunit, target, renderbuffer);
}
alias glMultiTexSubImage1DEXT = glMultiTexSubImage1DEXT_Z_Z;
__gshared glMultiTexSubImage1DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) { glMultiTexSubImage1DEXT_Z_Z_loader(texunit, target, level, xoffset, width, format, type, pixels); };
private void glMultiTexSubImage1DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glMultiTexSubImage1DEXT_Z_Z = glbindGetProcAddress(`glMultiTexSubImage1DEXT`);
  if (*cast(void**)&glMultiTexSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexSubImage1DEXT' not found!`);
  glMultiTexSubImage1DEXT_Z_Z(texunit, target, level, xoffset, width, format, type, pixels);
}
alias glMultiTexSubImage2DEXT = glMultiTexSubImage2DEXT_Z_Z;
__gshared glMultiTexSubImage2DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) { glMultiTexSubImage2DEXT_Z_Z_loader(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); };
private void glMultiTexSubImage2DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glMultiTexSubImage2DEXT_Z_Z = glbindGetProcAddress(`glMultiTexSubImage2DEXT`);
  if (*cast(void**)&glMultiTexSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexSubImage2DEXT' not found!`);
  glMultiTexSubImage2DEXT_Z_Z(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
alias glMultiTexSubImage3DEXT = glMultiTexSubImage3DEXT_Z_Z;
__gshared glMultiTexSubImage3DEXT_Z_Z = function void (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) { glMultiTexSubImage3DEXT_Z_Z_loader(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
private void glMultiTexSubImage3DEXT_Z_Z_loader (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glMultiTexSubImage3DEXT_Z_Z = glbindGetProcAddress(`glMultiTexSubImage3DEXT`);
  if (*cast(void**)&glMultiTexSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glMultiTexSubImage3DEXT' not found!`);
  glMultiTexSubImage3DEXT_Z_Z(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
alias glMulticastBarrierNV = glMulticastBarrierNV_Z_Z;
__gshared glMulticastBarrierNV_Z_Z = function void () { glMulticastBarrierNV_Z_Z_loader(); };
private void glMulticastBarrierNV_Z_Z_loader () {
  *cast(void**)&glMulticastBarrierNV_Z_Z = glbindGetProcAddress(`glMulticastBarrierNV`);
  if (*cast(void**)&glMulticastBarrierNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastBarrierNV' not found!`);
  glMulticastBarrierNV_Z_Z();
}
alias glMulticastBlitFramebufferNV = glMulticastBlitFramebufferNV_Z_Z;
__gshared glMulticastBlitFramebufferNV_Z_Z = function void (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { glMulticastBlitFramebufferNV_Z_Z_loader(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
private void glMulticastBlitFramebufferNV_Z_Z_loader (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  *cast(void**)&glMulticastBlitFramebufferNV_Z_Z = glbindGetProcAddress(`glMulticastBlitFramebufferNV`);
  if (*cast(void**)&glMulticastBlitFramebufferNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastBlitFramebufferNV' not found!`);
  glMulticastBlitFramebufferNV_Z_Z(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
alias glMulticastBufferSubDataNV = glMulticastBufferSubDataNV_Z_Z;
__gshared glMulticastBufferSubDataNV_Z_Z = function void (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const(GLvoid)* data) { glMulticastBufferSubDataNV_Z_Z_loader(gpuMask, buffer, offset, size, data); };
private void glMulticastBufferSubDataNV_Z_Z_loader (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const(GLvoid)* data) {
  *cast(void**)&glMulticastBufferSubDataNV_Z_Z = glbindGetProcAddress(`glMulticastBufferSubDataNV`);
  if (*cast(void**)&glMulticastBufferSubDataNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastBufferSubDataNV' not found!`);
  glMulticastBufferSubDataNV_Z_Z(gpuMask, buffer, offset, size, data);
}
alias glMulticastCopyBufferSubDataNV = glMulticastCopyBufferSubDataNV_Z_Z;
__gshared glMulticastCopyBufferSubDataNV_Z_Z = function void (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { glMulticastCopyBufferSubDataNV_Z_Z_loader(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); };
private void glMulticastCopyBufferSubDataNV_Z_Z_loader (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  *cast(void**)&glMulticastCopyBufferSubDataNV_Z_Z = glbindGetProcAddress(`glMulticastCopyBufferSubDataNV`);
  if (*cast(void**)&glMulticastCopyBufferSubDataNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastCopyBufferSubDataNV' not found!`);
  glMulticastCopyBufferSubDataNV_Z_Z(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
}
alias glMulticastCopyImageSubDataNV = glMulticastCopyImageSubDataNV_Z_Z;
__gshared glMulticastCopyImageSubDataNV_Z_Z = function void (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { glMulticastCopyImageSubDataNV_Z_Z_loader(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
private void glMulticastCopyImageSubDataNV_Z_Z_loader (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  *cast(void**)&glMulticastCopyImageSubDataNV_Z_Z = glbindGetProcAddress(`glMulticastCopyImageSubDataNV`);
  if (*cast(void**)&glMulticastCopyImageSubDataNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastCopyImageSubDataNV' not found!`);
  glMulticastCopyImageSubDataNV_Z_Z(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
alias glMulticastFramebufferSampleLocationsfvNV = glMulticastFramebufferSampleLocationsfvNV_Z_Z;
__gshared glMulticastFramebufferSampleLocationsfvNV_Z_Z = function void (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const(GLfloat)* v) { glMulticastFramebufferSampleLocationsfvNV_Z_Z_loader(gpu, framebuffer, start, count, v); };
private void glMulticastFramebufferSampleLocationsfvNV_Z_Z_loader (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glMulticastFramebufferSampleLocationsfvNV_Z_Z = glbindGetProcAddress(`glMulticastFramebufferSampleLocationsfvNV`);
  if (*cast(void**)&glMulticastFramebufferSampleLocationsfvNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastFramebufferSampleLocationsfvNV' not found!`);
  glMulticastFramebufferSampleLocationsfvNV_Z_Z(gpu, framebuffer, start, count, v);
}
alias glMulticastGetQueryObjecti64vNV = glMulticastGetQueryObjecti64vNV_Z_Z;
__gshared glMulticastGetQueryObjecti64vNV_Z_Z = function void (GLuint gpu, GLuint id, GLenum pname, GLint64 *params) { glMulticastGetQueryObjecti64vNV_Z_Z_loader(gpu, id, pname, params); };
private void glMulticastGetQueryObjecti64vNV_Z_Z_loader (GLuint gpu, GLuint id, GLenum pname, GLint64 *params) {
  *cast(void**)&glMulticastGetQueryObjecti64vNV_Z_Z = glbindGetProcAddress(`glMulticastGetQueryObjecti64vNV`);
  if (*cast(void**)&glMulticastGetQueryObjecti64vNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastGetQueryObjecti64vNV' not found!`);
  glMulticastGetQueryObjecti64vNV_Z_Z(gpu, id, pname, params);
}
alias glMulticastGetQueryObjectivNV = glMulticastGetQueryObjectivNV_Z_Z;
__gshared glMulticastGetQueryObjectivNV_Z_Z = function void (GLuint gpu, GLuint id, GLenum pname, GLint *params) { glMulticastGetQueryObjectivNV_Z_Z_loader(gpu, id, pname, params); };
private void glMulticastGetQueryObjectivNV_Z_Z_loader (GLuint gpu, GLuint id, GLenum pname, GLint *params) {
  *cast(void**)&glMulticastGetQueryObjectivNV_Z_Z = glbindGetProcAddress(`glMulticastGetQueryObjectivNV`);
  if (*cast(void**)&glMulticastGetQueryObjectivNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastGetQueryObjectivNV' not found!`);
  glMulticastGetQueryObjectivNV_Z_Z(gpu, id, pname, params);
}
alias glMulticastGetQueryObjectui64vNV = glMulticastGetQueryObjectui64vNV_Z_Z;
__gshared glMulticastGetQueryObjectui64vNV_Z_Z = function void (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params) { glMulticastGetQueryObjectui64vNV_Z_Z_loader(gpu, id, pname, params); };
private void glMulticastGetQueryObjectui64vNV_Z_Z_loader (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params) {
  *cast(void**)&glMulticastGetQueryObjectui64vNV_Z_Z = glbindGetProcAddress(`glMulticastGetQueryObjectui64vNV`);
  if (*cast(void**)&glMulticastGetQueryObjectui64vNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastGetQueryObjectui64vNV' not found!`);
  glMulticastGetQueryObjectui64vNV_Z_Z(gpu, id, pname, params);
}
alias glMulticastGetQueryObjectuivNV = glMulticastGetQueryObjectuivNV_Z_Z;
__gshared glMulticastGetQueryObjectuivNV_Z_Z = function void (GLuint gpu, GLuint id, GLenum pname, GLuint *params) { glMulticastGetQueryObjectuivNV_Z_Z_loader(gpu, id, pname, params); };
private void glMulticastGetQueryObjectuivNV_Z_Z_loader (GLuint gpu, GLuint id, GLenum pname, GLuint *params) {
  *cast(void**)&glMulticastGetQueryObjectuivNV_Z_Z = glbindGetProcAddress(`glMulticastGetQueryObjectuivNV`);
  if (*cast(void**)&glMulticastGetQueryObjectuivNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastGetQueryObjectuivNV' not found!`);
  glMulticastGetQueryObjectuivNV_Z_Z(gpu, id, pname, params);
}
alias glMulticastWaitSyncNV = glMulticastWaitSyncNV_Z_Z;
__gshared glMulticastWaitSyncNV_Z_Z = function void (GLuint signalGpu, GLbitfield waitGpuMask) { glMulticastWaitSyncNV_Z_Z_loader(signalGpu, waitGpuMask); };
private void glMulticastWaitSyncNV_Z_Z_loader (GLuint signalGpu, GLbitfield waitGpuMask) {
  *cast(void**)&glMulticastWaitSyncNV_Z_Z = glbindGetProcAddress(`glMulticastWaitSyncNV`);
  if (*cast(void**)&glMulticastWaitSyncNV_Z_Z is null) assert(0, `OpenGL function 'glMulticastWaitSyncNV' not found!`);
  glMulticastWaitSyncNV_Z_Z(signalGpu, waitGpuMask);
}
alias glNamedBufferData = glNamedBufferData_Z_Z;
__gshared glNamedBufferData_Z_Z = function void (GLuint buffer, GLsizeiptr size, const(void)* data, GLenum usage) { glNamedBufferData_Z_Z_loader(buffer, size, data, usage); };
private void glNamedBufferData_Z_Z_loader (GLuint buffer, GLsizeiptr size, const(void)* data, GLenum usage) {
  *cast(void**)&glNamedBufferData_Z_Z = glbindGetProcAddress(`glNamedBufferData`);
  if (*cast(void**)&glNamedBufferData_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferData' not found!`);
  glNamedBufferData_Z_Z(buffer, size, data, usage);
}
alias glNamedBufferDataEXT = glNamedBufferDataEXT_Z_Z;
__gshared glNamedBufferDataEXT_Z_Z = function void (GLuint buffer, GLsizeiptr size, const(void)* data, GLenum usage) { glNamedBufferDataEXT_Z_Z_loader(buffer, size, data, usage); };
private void glNamedBufferDataEXT_Z_Z_loader (GLuint buffer, GLsizeiptr size, const(void)* data, GLenum usage) {
  *cast(void**)&glNamedBufferDataEXT_Z_Z = glbindGetProcAddress(`glNamedBufferDataEXT`);
  if (*cast(void**)&glNamedBufferDataEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferDataEXT' not found!`);
  glNamedBufferDataEXT_Z_Z(buffer, size, data, usage);
}
alias glNamedBufferPageCommitmentARB = glNamedBufferPageCommitmentARB_Z_Z;
__gshared glNamedBufferPageCommitmentARB_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { glNamedBufferPageCommitmentARB_Z_Z_loader(buffer, offset, size, commit); };
private void glNamedBufferPageCommitmentARB_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  *cast(void**)&glNamedBufferPageCommitmentARB_Z_Z = glbindGetProcAddress(`glNamedBufferPageCommitmentARB`);
  if (*cast(void**)&glNamedBufferPageCommitmentARB_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentARB' not found!`);
  glNamedBufferPageCommitmentARB_Z_Z(buffer, offset, size, commit);
}
alias glNamedBufferPageCommitmentEXT = glNamedBufferPageCommitmentEXT_Z_Z;
__gshared glNamedBufferPageCommitmentEXT_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { glNamedBufferPageCommitmentEXT_Z_Z_loader(buffer, offset, size, commit); };
private void glNamedBufferPageCommitmentEXT_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  *cast(void**)&glNamedBufferPageCommitmentEXT_Z_Z = glbindGetProcAddress(`glNamedBufferPageCommitmentEXT`);
  if (*cast(void**)&glNamedBufferPageCommitmentEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentEXT' not found!`);
  glNamedBufferPageCommitmentEXT_Z_Z(buffer, offset, size, commit);
}
alias glNamedBufferStorage = glNamedBufferStorage_Z_Z;
__gshared glNamedBufferStorage_Z_Z = function void (GLuint buffer, GLsizeiptr size, const(void)* data, GLbitfield flags) { glNamedBufferStorage_Z_Z_loader(buffer, size, data, flags); };
private void glNamedBufferStorage_Z_Z_loader (GLuint buffer, GLsizeiptr size, const(void)* data, GLbitfield flags) {
  *cast(void**)&glNamedBufferStorage_Z_Z = glbindGetProcAddress(`glNamedBufferStorage`);
  if (*cast(void**)&glNamedBufferStorage_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferStorage' not found!`);
  glNamedBufferStorage_Z_Z(buffer, size, data, flags);
}
alias glNamedBufferStorageExternalEXT = glNamedBufferStorageExternalEXT_Z_Z;
__gshared glNamedBufferStorageExternalEXT_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { glNamedBufferStorageExternalEXT_Z_Z_loader(buffer, offset, size, clientBuffer, flags); };
private void glNamedBufferStorageExternalEXT_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  *cast(void**)&glNamedBufferStorageExternalEXT_Z_Z = glbindGetProcAddress(`glNamedBufferStorageExternalEXT`);
  if (*cast(void**)&glNamedBufferStorageExternalEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferStorageExternalEXT' not found!`);
  glNamedBufferStorageExternalEXT_Z_Z(buffer, offset, size, clientBuffer, flags);
}
alias glNamedBufferStorageEXT = glNamedBufferStorageEXT_Z_Z;
__gshared glNamedBufferStorageEXT_Z_Z = function void (GLuint buffer, GLsizeiptr size, const(void)* data, GLbitfield flags) { glNamedBufferStorageEXT_Z_Z_loader(buffer, size, data, flags); };
private void glNamedBufferStorageEXT_Z_Z_loader (GLuint buffer, GLsizeiptr size, const(void)* data, GLbitfield flags) {
  *cast(void**)&glNamedBufferStorageEXT_Z_Z = glbindGetProcAddress(`glNamedBufferStorageEXT`);
  if (*cast(void**)&glNamedBufferStorageEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferStorageEXT' not found!`);
  glNamedBufferStorageEXT_Z_Z(buffer, size, data, flags);
}
alias glNamedBufferStorageMemEXT = glNamedBufferStorageMemEXT_Z_Z;
__gshared glNamedBufferStorageMemEXT_Z_Z = function void (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { glNamedBufferStorageMemEXT_Z_Z_loader(buffer, size, memory, offset); };
private void glNamedBufferStorageMemEXT_Z_Z_loader (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  *cast(void**)&glNamedBufferStorageMemEXT_Z_Z = glbindGetProcAddress(`glNamedBufferStorageMemEXT`);
  if (*cast(void**)&glNamedBufferStorageMemEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferStorageMemEXT' not found!`);
  glNamedBufferStorageMemEXT_Z_Z(buffer, size, memory, offset);
}
alias glNamedBufferSubData = glNamedBufferSubData_Z_Z;
__gshared glNamedBufferSubData_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr size, const(void)* data) { glNamedBufferSubData_Z_Z_loader(buffer, offset, size, data); };
private void glNamedBufferSubData_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr size, const(void)* data) {
  *cast(void**)&glNamedBufferSubData_Z_Z = glbindGetProcAddress(`glNamedBufferSubData`);
  if (*cast(void**)&glNamedBufferSubData_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferSubData' not found!`);
  glNamedBufferSubData_Z_Z(buffer, offset, size, data);
}
alias glNamedBufferSubDataEXT = glNamedBufferSubDataEXT_Z_Z;
__gshared glNamedBufferSubDataEXT_Z_Z = function void (GLuint buffer, GLintptr offset, GLsizeiptr size, const(void)* data) { glNamedBufferSubDataEXT_Z_Z_loader(buffer, offset, size, data); };
private void glNamedBufferSubDataEXT_Z_Z_loader (GLuint buffer, GLintptr offset, GLsizeiptr size, const(void)* data) {
  *cast(void**)&glNamedBufferSubDataEXT_Z_Z = glbindGetProcAddress(`glNamedBufferSubDataEXT`);
  if (*cast(void**)&glNamedBufferSubDataEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedBufferSubDataEXT' not found!`);
  glNamedBufferSubDataEXT_Z_Z(buffer, offset, size, data);
}
alias glNamedCopyBufferSubDataEXT = glNamedCopyBufferSubDataEXT_Z_Z;
__gshared glNamedCopyBufferSubDataEXT_Z_Z = function void (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { glNamedCopyBufferSubDataEXT_Z_Z_loader(readBuffer, writeBuffer, readOffset, writeOffset, size); };
private void glNamedCopyBufferSubDataEXT_Z_Z_loader (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  *cast(void**)&glNamedCopyBufferSubDataEXT_Z_Z = glbindGetProcAddress(`glNamedCopyBufferSubDataEXT`);
  if (*cast(void**)&glNamedCopyBufferSubDataEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedCopyBufferSubDataEXT' not found!`);
  glNamedCopyBufferSubDataEXT_Z_Z(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
alias glNamedFramebufferDrawBuffer = glNamedFramebufferDrawBuffer_Z_Z;
__gshared glNamedFramebufferDrawBuffer_Z_Z = function void (GLuint framebuffer, GLenum buf) { glNamedFramebufferDrawBuffer_Z_Z_loader(framebuffer, buf); };
private void glNamedFramebufferDrawBuffer_Z_Z_loader (GLuint framebuffer, GLenum buf) {
  *cast(void**)&glNamedFramebufferDrawBuffer_Z_Z = glbindGetProcAddress(`glNamedFramebufferDrawBuffer`);
  if (*cast(void**)&glNamedFramebufferDrawBuffer_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffer' not found!`);
  glNamedFramebufferDrawBuffer_Z_Z(framebuffer, buf);
}
alias glNamedFramebufferDrawBuffers = glNamedFramebufferDrawBuffers_Z_Z;
__gshared glNamedFramebufferDrawBuffers_Z_Z = function void (GLuint framebuffer, GLsizei n, const(GLenum)* bufs) { glNamedFramebufferDrawBuffers_Z_Z_loader(framebuffer, n, bufs); };
private void glNamedFramebufferDrawBuffers_Z_Z_loader (GLuint framebuffer, GLsizei n, const(GLenum)* bufs) {
  *cast(void**)&glNamedFramebufferDrawBuffers_Z_Z = glbindGetProcAddress(`glNamedFramebufferDrawBuffers`);
  if (*cast(void**)&glNamedFramebufferDrawBuffers_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffers' not found!`);
  glNamedFramebufferDrawBuffers_Z_Z(framebuffer, n, bufs);
}
alias glNamedFramebufferParameteri = glNamedFramebufferParameteri_Z_Z;
__gshared glNamedFramebufferParameteri_Z_Z = function void (GLuint framebuffer, GLenum pname, GLint param) { glNamedFramebufferParameteri_Z_Z_loader(framebuffer, pname, param); };
private void glNamedFramebufferParameteri_Z_Z_loader (GLuint framebuffer, GLenum pname, GLint param) {
  *cast(void**)&glNamedFramebufferParameteri_Z_Z = glbindGetProcAddress(`glNamedFramebufferParameteri`);
  if (*cast(void**)&glNamedFramebufferParameteri_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferParameteri' not found!`);
  glNamedFramebufferParameteri_Z_Z(framebuffer, pname, param);
}
alias glNamedFramebufferParameteriEXT = glNamedFramebufferParameteriEXT_Z_Z;
__gshared glNamedFramebufferParameteriEXT_Z_Z = function void (GLuint framebuffer, GLenum pname, GLint param) { glNamedFramebufferParameteriEXT_Z_Z_loader(framebuffer, pname, param); };
private void glNamedFramebufferParameteriEXT_Z_Z_loader (GLuint framebuffer, GLenum pname, GLint param) {
  *cast(void**)&glNamedFramebufferParameteriEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferParameteriEXT`);
  if (*cast(void**)&glNamedFramebufferParameteriEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferParameteriEXT' not found!`);
  glNamedFramebufferParameteriEXT_Z_Z(framebuffer, pname, param);
}
alias glNamedFramebufferReadBuffer = glNamedFramebufferReadBuffer_Z_Z;
__gshared glNamedFramebufferReadBuffer_Z_Z = function void (GLuint framebuffer, GLenum src) { glNamedFramebufferReadBuffer_Z_Z_loader(framebuffer, src); };
private void glNamedFramebufferReadBuffer_Z_Z_loader (GLuint framebuffer, GLenum src) {
  *cast(void**)&glNamedFramebufferReadBuffer_Z_Z = glbindGetProcAddress(`glNamedFramebufferReadBuffer`);
  if (*cast(void**)&glNamedFramebufferReadBuffer_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferReadBuffer' not found!`);
  glNamedFramebufferReadBuffer_Z_Z(framebuffer, src);
}
alias glNamedFramebufferRenderbuffer = glNamedFramebufferRenderbuffer_Z_Z;
__gshared glNamedFramebufferRenderbuffer_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { glNamedFramebufferRenderbuffer_Z_Z_loader(framebuffer, attachment, renderbuffertarget, renderbuffer); };
private void glNamedFramebufferRenderbuffer_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  *cast(void**)&glNamedFramebufferRenderbuffer_Z_Z = glbindGetProcAddress(`glNamedFramebufferRenderbuffer`);
  if (*cast(void**)&glNamedFramebufferRenderbuffer_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbuffer' not found!`);
  glNamedFramebufferRenderbuffer_Z_Z(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
alias glNamedFramebufferRenderbufferEXT = glNamedFramebufferRenderbufferEXT_Z_Z;
__gshared glNamedFramebufferRenderbufferEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { glNamedFramebufferRenderbufferEXT_Z_Z_loader(framebuffer, attachment, renderbuffertarget, renderbuffer); };
private void glNamedFramebufferRenderbufferEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  *cast(void**)&glNamedFramebufferRenderbufferEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferRenderbufferEXT`);
  if (*cast(void**)&glNamedFramebufferRenderbufferEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbufferEXT' not found!`);
  glNamedFramebufferRenderbufferEXT_Z_Z(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
alias glNamedFramebufferSampleLocationsfvARB = glNamedFramebufferSampleLocationsfvARB_Z_Z;
__gshared glNamedFramebufferSampleLocationsfvARB_Z_Z = function void (GLuint framebuffer, GLuint start, GLsizei count, const(GLfloat)* v) { glNamedFramebufferSampleLocationsfvARB_Z_Z_loader(framebuffer, start, count, v); };
private void glNamedFramebufferSampleLocationsfvARB_Z_Z_loader (GLuint framebuffer, GLuint start, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glNamedFramebufferSampleLocationsfvARB_Z_Z = glbindGetProcAddress(`glNamedFramebufferSampleLocationsfvARB`);
  if (*cast(void**)&glNamedFramebufferSampleLocationsfvARB_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvARB' not found!`);
  glNamedFramebufferSampleLocationsfvARB_Z_Z(framebuffer, start, count, v);
}
alias glNamedFramebufferSampleLocationsfvNV = glNamedFramebufferSampleLocationsfvNV_Z_Z;
__gshared glNamedFramebufferSampleLocationsfvNV_Z_Z = function void (GLuint framebuffer, GLuint start, GLsizei count, const(GLfloat)* v) { glNamedFramebufferSampleLocationsfvNV_Z_Z_loader(framebuffer, start, count, v); };
private void glNamedFramebufferSampleLocationsfvNV_Z_Z_loader (GLuint framebuffer, GLuint start, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glNamedFramebufferSampleLocationsfvNV_Z_Z = glbindGetProcAddress(`glNamedFramebufferSampleLocationsfvNV`);
  if (*cast(void**)&glNamedFramebufferSampleLocationsfvNV_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvNV' not found!`);
  glNamedFramebufferSampleLocationsfvNV_Z_Z(framebuffer, start, count, v);
}
alias glNamedFramebufferTexture = glNamedFramebufferTexture_Z_Z;
__gshared glNamedFramebufferTexture_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { glNamedFramebufferTexture_Z_Z_loader(framebuffer, attachment, texture, level); };
private void glNamedFramebufferTexture_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  *cast(void**)&glNamedFramebufferTexture_Z_Z = glbindGetProcAddress(`glNamedFramebufferTexture`);
  if (*cast(void**)&glNamedFramebufferTexture_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture' not found!`);
  glNamedFramebufferTexture_Z_Z(framebuffer, attachment, texture, level);
}
alias glNamedFramebufferSamplePositionsfvAMD = glNamedFramebufferSamplePositionsfvAMD_Z_Z;
__gshared glNamedFramebufferSamplePositionsfvAMD_Z_Z = function void (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const(GLfloat)* values) { glNamedFramebufferSamplePositionsfvAMD_Z_Z_loader(framebuffer, numsamples, pixelindex, values); };
private void glNamedFramebufferSamplePositionsfvAMD_Z_Z_loader (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const(GLfloat)* values) {
  *cast(void**)&glNamedFramebufferSamplePositionsfvAMD_Z_Z = glbindGetProcAddress(`glNamedFramebufferSamplePositionsfvAMD`);
  if (*cast(void**)&glNamedFramebufferSamplePositionsfvAMD_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferSamplePositionsfvAMD' not found!`);
  glNamedFramebufferSamplePositionsfvAMD_Z_Z(framebuffer, numsamples, pixelindex, values);
}
alias glNamedFramebufferTexture1DEXT = glNamedFramebufferTexture1DEXT_Z_Z;
__gshared glNamedFramebufferTexture1DEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { glNamedFramebufferTexture1DEXT_Z_Z_loader(framebuffer, attachment, textarget, texture, level); };
private void glNamedFramebufferTexture1DEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  *cast(void**)&glNamedFramebufferTexture1DEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferTexture1DEXT`);
  if (*cast(void**)&glNamedFramebufferTexture1DEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture1DEXT' not found!`);
  glNamedFramebufferTexture1DEXT_Z_Z(framebuffer, attachment, textarget, texture, level);
}
alias glNamedFramebufferTexture2DEXT = glNamedFramebufferTexture2DEXT_Z_Z;
__gshared glNamedFramebufferTexture2DEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { glNamedFramebufferTexture2DEXT_Z_Z_loader(framebuffer, attachment, textarget, texture, level); };
private void glNamedFramebufferTexture2DEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  *cast(void**)&glNamedFramebufferTexture2DEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferTexture2DEXT`);
  if (*cast(void**)&glNamedFramebufferTexture2DEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture2DEXT' not found!`);
  glNamedFramebufferTexture2DEXT_Z_Z(framebuffer, attachment, textarget, texture, level);
}
alias glNamedFramebufferTexture3DEXT = glNamedFramebufferTexture3DEXT_Z_Z;
__gshared glNamedFramebufferTexture3DEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { glNamedFramebufferTexture3DEXT_Z_Z_loader(framebuffer, attachment, textarget, texture, level, zoffset); };
private void glNamedFramebufferTexture3DEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  *cast(void**)&glNamedFramebufferTexture3DEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferTexture3DEXT`);
  if (*cast(void**)&glNamedFramebufferTexture3DEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTexture3DEXT' not found!`);
  glNamedFramebufferTexture3DEXT_Z_Z(framebuffer, attachment, textarget, texture, level, zoffset);
}
alias glNamedFramebufferTextureEXT = glNamedFramebufferTextureEXT_Z_Z;
__gshared glNamedFramebufferTextureEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { glNamedFramebufferTextureEXT_Z_Z_loader(framebuffer, attachment, texture, level); };
private void glNamedFramebufferTextureEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  *cast(void**)&glNamedFramebufferTextureEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferTextureEXT`);
  if (*cast(void**)&glNamedFramebufferTextureEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureEXT' not found!`);
  glNamedFramebufferTextureEXT_Z_Z(framebuffer, attachment, texture, level);
}
alias glNamedFramebufferTextureFaceEXT = glNamedFramebufferTextureFaceEXT_Z_Z;
__gshared glNamedFramebufferTextureFaceEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { glNamedFramebufferTextureFaceEXT_Z_Z_loader(framebuffer, attachment, texture, level, face); };
private void glNamedFramebufferTextureFaceEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  *cast(void**)&glNamedFramebufferTextureFaceEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferTextureFaceEXT`);
  if (*cast(void**)&glNamedFramebufferTextureFaceEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureFaceEXT' not found!`);
  glNamedFramebufferTextureFaceEXT_Z_Z(framebuffer, attachment, texture, level, face);
}
alias glNamedFramebufferTextureLayer = glNamedFramebufferTextureLayer_Z_Z;
__gshared glNamedFramebufferTextureLayer_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { glNamedFramebufferTextureLayer_Z_Z_loader(framebuffer, attachment, texture, level, layer); };
private void glNamedFramebufferTextureLayer_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  *cast(void**)&glNamedFramebufferTextureLayer_Z_Z = glbindGetProcAddress(`glNamedFramebufferTextureLayer`);
  if (*cast(void**)&glNamedFramebufferTextureLayer_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayer' not found!`);
  glNamedFramebufferTextureLayer_Z_Z(framebuffer, attachment, texture, level, layer);
}
alias glNamedFramebufferTextureLayerEXT = glNamedFramebufferTextureLayerEXT_Z_Z;
__gshared glNamedFramebufferTextureLayerEXT_Z_Z = function void (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { glNamedFramebufferTextureLayerEXT_Z_Z_loader(framebuffer, attachment, texture, level, layer); };
private void glNamedFramebufferTextureLayerEXT_Z_Z_loader (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  *cast(void**)&glNamedFramebufferTextureLayerEXT_Z_Z = glbindGetProcAddress(`glNamedFramebufferTextureLayerEXT`);
  if (*cast(void**)&glNamedFramebufferTextureLayerEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayerEXT' not found!`);
  glNamedFramebufferTextureLayerEXT_Z_Z(framebuffer, attachment, texture, level, layer);
}
alias glNamedProgramLocalParameter4dEXT = glNamedProgramLocalParameter4dEXT_Z_Z;
__gshared glNamedProgramLocalParameter4dEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glNamedProgramLocalParameter4dEXT_Z_Z_loader(program, target, index, x, y, z, w); };
private void glNamedProgramLocalParameter4dEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glNamedProgramLocalParameter4dEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4dEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4dEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dEXT' not found!`);
  glNamedProgramLocalParameter4dEXT_Z_Z(program, target, index, x, y, z, w);
}
alias glNamedProgramLocalParameter4dvEXT = glNamedProgramLocalParameter4dvEXT_Z_Z;
__gshared glNamedProgramLocalParameter4dvEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, const(GLdouble)* params) { glNamedProgramLocalParameter4dvEXT_Z_Z_loader(program, target, index, params); };
private void glNamedProgramLocalParameter4dvEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, const(GLdouble)* params) {
  *cast(void**)&glNamedProgramLocalParameter4dvEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4dvEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4dvEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dvEXT' not found!`);
  glNamedProgramLocalParameter4dvEXT_Z_Z(program, target, index, params);
}
alias glNamedProgramLocalParameter4fEXT = glNamedProgramLocalParameter4fEXT_Z_Z;
__gshared glNamedProgramLocalParameter4fEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glNamedProgramLocalParameter4fEXT_Z_Z_loader(program, target, index, x, y, z, w); };
private void glNamedProgramLocalParameter4fEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glNamedProgramLocalParameter4fEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4fEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4fEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fEXT' not found!`);
  glNamedProgramLocalParameter4fEXT_Z_Z(program, target, index, x, y, z, w);
}
alias glNamedProgramLocalParameter4fvEXT = glNamedProgramLocalParameter4fvEXT_Z_Z;
__gshared glNamedProgramLocalParameter4fvEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, const(GLfloat)* params) { glNamedProgramLocalParameter4fvEXT_Z_Z_loader(program, target, index, params); };
private void glNamedProgramLocalParameter4fvEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, const(GLfloat)* params) {
  *cast(void**)&glNamedProgramLocalParameter4fvEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameter4fvEXT`);
  if (*cast(void**)&glNamedProgramLocalParameter4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fvEXT' not found!`);
  glNamedProgramLocalParameter4fvEXT_Z_Z(program, target, index, params);
}
alias glNamedProgramLocalParameterI4iEXT = glNamedProgramLocalParameterI4iEXT_Z_Z;
__gshared glNamedProgramLocalParameterI4iEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { glNamedProgramLocalParameterI4iEXT_Z_Z_loader(program, target, index, x, y, z, w); };
private void glNamedProgramLocalParameterI4iEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glNamedProgramLocalParameterI4iEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4iEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4iEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4iEXT' not found!`);
  glNamedProgramLocalParameterI4iEXT_Z_Z(program, target, index, x, y, z, w);
}
alias glNamedProgramLocalParameterI4ivEXT = glNamedProgramLocalParameterI4ivEXT_Z_Z;
__gshared glNamedProgramLocalParameterI4ivEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, const(GLint)* params) { glNamedProgramLocalParameterI4ivEXT_Z_Z_loader(program, target, index, params); };
private void glNamedProgramLocalParameterI4ivEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, const(GLint)* params) {
  *cast(void**)&glNamedProgramLocalParameterI4ivEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4ivEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4ivEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4ivEXT' not found!`);
  glNamedProgramLocalParameterI4ivEXT_Z_Z(program, target, index, params);
}
alias glNamedProgramLocalParameterI4uiEXT = glNamedProgramLocalParameterI4uiEXT_Z_Z;
__gshared glNamedProgramLocalParameterI4uiEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { glNamedProgramLocalParameterI4uiEXT_Z_Z_loader(program, target, index, x, y, z, w); };
private void glNamedProgramLocalParameterI4uiEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  *cast(void**)&glNamedProgramLocalParameterI4uiEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4uiEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4uiEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uiEXT' not found!`);
  glNamedProgramLocalParameterI4uiEXT_Z_Z(program, target, index, x, y, z, w);
}
alias glNamedProgramLocalParameterI4uivEXT = glNamedProgramLocalParameterI4uivEXT_Z_Z;
__gshared glNamedProgramLocalParameterI4uivEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, const(GLuint)* params) { glNamedProgramLocalParameterI4uivEXT_Z_Z_loader(program, target, index, params); };
private void glNamedProgramLocalParameterI4uivEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, const(GLuint)* params) {
  *cast(void**)&glNamedProgramLocalParameterI4uivEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameterI4uivEXT`);
  if (*cast(void**)&glNamedProgramLocalParameterI4uivEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uivEXT' not found!`);
  glNamedProgramLocalParameterI4uivEXT_Z_Z(program, target, index, params);
}
alias glNamedProgramLocalParameters4fvEXT = glNamedProgramLocalParameters4fvEXT_Z_Z;
__gshared glNamedProgramLocalParameters4fvEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLsizei count, const(GLfloat)* params) { glNamedProgramLocalParameters4fvEXT_Z_Z_loader(program, target, index, count, params); };
private void glNamedProgramLocalParameters4fvEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLsizei count, const(GLfloat)* params) {
  *cast(void**)&glNamedProgramLocalParameters4fvEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParameters4fvEXT`);
  if (*cast(void**)&glNamedProgramLocalParameters4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParameters4fvEXT' not found!`);
  glNamedProgramLocalParameters4fvEXT_Z_Z(program, target, index, count, params);
}
alias glNamedProgramLocalParametersI4ivEXT = glNamedProgramLocalParametersI4ivEXT_Z_Z;
__gshared glNamedProgramLocalParametersI4ivEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLsizei count, const(GLint)* params) { glNamedProgramLocalParametersI4ivEXT_Z_Z_loader(program, target, index, count, params); };
private void glNamedProgramLocalParametersI4ivEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLsizei count, const(GLint)* params) {
  *cast(void**)&glNamedProgramLocalParametersI4ivEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParametersI4ivEXT`);
  if (*cast(void**)&glNamedProgramLocalParametersI4ivEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4ivEXT' not found!`);
  glNamedProgramLocalParametersI4ivEXT_Z_Z(program, target, index, count, params);
}
alias glNamedProgramLocalParametersI4uivEXT = glNamedProgramLocalParametersI4uivEXT_Z_Z;
__gshared glNamedProgramLocalParametersI4uivEXT_Z_Z = function void (GLuint program, GLenum target, GLuint index, GLsizei count, const(GLuint)* params) { glNamedProgramLocalParametersI4uivEXT_Z_Z_loader(program, target, index, count, params); };
private void glNamedProgramLocalParametersI4uivEXT_Z_Z_loader (GLuint program, GLenum target, GLuint index, GLsizei count, const(GLuint)* params) {
  *cast(void**)&glNamedProgramLocalParametersI4uivEXT_Z_Z = glbindGetProcAddress(`glNamedProgramLocalParametersI4uivEXT`);
  if (*cast(void**)&glNamedProgramLocalParametersI4uivEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4uivEXT' not found!`);
  glNamedProgramLocalParametersI4uivEXT_Z_Z(program, target, index, count, params);
}
alias glNamedProgramStringEXT = glNamedProgramStringEXT_Z_Z;
__gshared glNamedProgramStringEXT_Z_Z = function void (GLuint program, GLenum target, GLenum format, GLsizei len, const(void)* string) { glNamedProgramStringEXT_Z_Z_loader(program, target, format, len, string); };
private void glNamedProgramStringEXT_Z_Z_loader (GLuint program, GLenum target, GLenum format, GLsizei len, const(void)* string) {
  *cast(void**)&glNamedProgramStringEXT_Z_Z = glbindGetProcAddress(`glNamedProgramStringEXT`);
  if (*cast(void**)&glNamedProgramStringEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedProgramStringEXT' not found!`);
  glNamedProgramStringEXT_Z_Z(program, target, format, len, string);
}
alias glNamedRenderbufferStorage = glNamedRenderbufferStorage_Z_Z;
__gshared glNamedRenderbufferStorage_Z_Z = function void (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { glNamedRenderbufferStorage_Z_Z_loader(renderbuffer, internalformat, width, height); };
private void glNamedRenderbufferStorage_Z_Z_loader (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glNamedRenderbufferStorage_Z_Z = glbindGetProcAddress(`glNamedRenderbufferStorage`);
  if (*cast(void**)&glNamedRenderbufferStorage_Z_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorage' not found!`);
  glNamedRenderbufferStorage_Z_Z(renderbuffer, internalformat, width, height);
}
alias glNamedRenderbufferStorageEXT = glNamedRenderbufferStorageEXT_Z_Z;
__gshared glNamedRenderbufferStorageEXT_Z_Z = function void (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { glNamedRenderbufferStorageEXT_Z_Z_loader(renderbuffer, internalformat, width, height); };
private void glNamedRenderbufferStorageEXT_Z_Z_loader (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glNamedRenderbufferStorageEXT_Z_Z = glbindGetProcAddress(`glNamedRenderbufferStorageEXT`);
  if (*cast(void**)&glNamedRenderbufferStorageEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageEXT' not found!`);
  glNamedRenderbufferStorageEXT_Z_Z(renderbuffer, internalformat, width, height);
}
alias glNamedRenderbufferStorageMultisample = glNamedRenderbufferStorageMultisample_Z_Z;
__gshared glNamedRenderbufferStorageMultisample_Z_Z = function void (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glNamedRenderbufferStorageMultisample_Z_Z_loader(renderbuffer, samples, internalformat, width, height); };
private void glNamedRenderbufferStorageMultisample_Z_Z_loader (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glNamedRenderbufferStorageMultisample_Z_Z = glbindGetProcAddress(`glNamedRenderbufferStorageMultisample`);
  if (*cast(void**)&glNamedRenderbufferStorageMultisample_Z_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisample' not found!`);
  glNamedRenderbufferStorageMultisample_Z_Z(renderbuffer, samples, internalformat, width, height);
}
alias glNamedRenderbufferStorageMultisampleCoverageEXT = glNamedRenderbufferStorageMultisampleCoverageEXT_Z_Z;
__gshared glNamedRenderbufferStorageMultisampleCoverageEXT_Z_Z = function void (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { glNamedRenderbufferStorageMultisampleCoverageEXT_Z_Z_loader(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); };
private void glNamedRenderbufferStorageMultisampleCoverageEXT_Z_Z_loader (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glNamedRenderbufferStorageMultisampleCoverageEXT_Z_Z = glbindGetProcAddress(`glNamedRenderbufferStorageMultisampleCoverageEXT`);
  if (*cast(void**)&glNamedRenderbufferStorageMultisampleCoverageEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleCoverageEXT' not found!`);
  glNamedRenderbufferStorageMultisampleCoverageEXT_Z_Z(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}
alias glNamedRenderbufferStorageMultisampleEXT = glNamedRenderbufferStorageMultisampleEXT_Z_Z;
__gshared glNamedRenderbufferStorageMultisampleEXT_Z_Z = function void (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glNamedRenderbufferStorageMultisampleEXT_Z_Z_loader(renderbuffer, samples, internalformat, width, height); };
private void glNamedRenderbufferStorageMultisampleEXT_Z_Z_loader (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glNamedRenderbufferStorageMultisampleEXT_Z_Z = glbindGetProcAddress(`glNamedRenderbufferStorageMultisampleEXT`);
  if (*cast(void**)&glNamedRenderbufferStorageMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleEXT' not found!`);
  glNamedRenderbufferStorageMultisampleEXT_Z_Z(renderbuffer, samples, internalformat, width, height);
}
alias glNamedStringARB = glNamedStringARB_Z_Z;
__gshared glNamedStringARB_Z_Z = function void (GLenum type, GLint namelen, const(GLchar)* name, GLint stringlen, const(GLchar)* string) { glNamedStringARB_Z_Z_loader(type, namelen, name, stringlen, string); };
private void glNamedStringARB_Z_Z_loader (GLenum type, GLint namelen, const(GLchar)* name, GLint stringlen, const(GLchar)* string) {
  *cast(void**)&glNamedStringARB_Z_Z = glbindGetProcAddress(`glNamedStringARB`);
  if (*cast(void**)&glNamedStringARB_Z_Z is null) assert(0, `OpenGL function 'glNamedStringARB' not found!`);
  glNamedStringARB_Z_Z(type, namelen, name, stringlen, string);
}
alias glNewList = glNewList_Z_Z;
__gshared glNewList_Z_Z = function void (GLuint list, GLenum mode) { glNewList_Z_Z_loader(list, mode); };
private void glNewList_Z_Z_loader (GLuint list, GLenum mode) {
  *cast(void**)&glNewList_Z_Z = glbindGetProcAddress(`glNewList`);
  if (*cast(void**)&glNewList_Z_Z is null) assert(0, `OpenGL function 'glNewList' not found!`);
  glNewList_Z_Z(list, mode);
}
alias glNewObjectBufferATI = glNewObjectBufferATI_Z_Z;
__gshared glNewObjectBufferATI_Z_Z = function GLuint (GLsizei size, const(void)* pointer, GLenum usage) { return glNewObjectBufferATI_Z_Z_loader(size, pointer, usage); };
private GLuint glNewObjectBufferATI_Z_Z_loader (GLsizei size, const(void)* pointer, GLenum usage) {
  *cast(void**)&glNewObjectBufferATI_Z_Z = glbindGetProcAddress(`glNewObjectBufferATI`);
  if (*cast(void**)&glNewObjectBufferATI_Z_Z is null) assert(0, `OpenGL function 'glNewObjectBufferATI' not found!`);
  return glNewObjectBufferATI_Z_Z(size, pointer, usage);
}
alias glNormal3b = glNormal3b_Z_Z;
__gshared glNormal3b_Z_Z = function void (GLbyte nx, GLbyte ny, GLbyte nz) { glNormal3b_Z_Z_loader(nx, ny, nz); };
private void glNormal3b_Z_Z_loader (GLbyte nx, GLbyte ny, GLbyte nz) {
  *cast(void**)&glNormal3b_Z_Z = glbindGetProcAddress(`glNormal3b`);
  if (*cast(void**)&glNormal3b_Z_Z is null) assert(0, `OpenGL function 'glNormal3b' not found!`);
  glNormal3b_Z_Z(nx, ny, nz);
}
alias glNormal3bv = glNormal3bv_Z_Z;
__gshared glNormal3bv_Z_Z = function void (const(GLbyte)* v) { glNormal3bv_Z_Z_loader(v); };
private void glNormal3bv_Z_Z_loader (const(GLbyte)* v) {
  *cast(void**)&glNormal3bv_Z_Z = glbindGetProcAddress(`glNormal3bv`);
  if (*cast(void**)&glNormal3bv_Z_Z is null) assert(0, `OpenGL function 'glNormal3bv' not found!`);
  glNormal3bv_Z_Z(v);
}
alias glNormal3d = glNormal3d_Z_Z;
__gshared glNormal3d_Z_Z = function void (GLdouble nx, GLdouble ny, GLdouble nz) { glNormal3d_Z_Z_loader(nx, ny, nz); };
private void glNormal3d_Z_Z_loader (GLdouble nx, GLdouble ny, GLdouble nz) {
  *cast(void**)&glNormal3d_Z_Z = glbindGetProcAddress(`glNormal3d`);
  if (*cast(void**)&glNormal3d_Z_Z is null) assert(0, `OpenGL function 'glNormal3d' not found!`);
  glNormal3d_Z_Z(nx, ny, nz);
}
alias glNormal3dv = glNormal3dv_Z_Z;
__gshared glNormal3dv_Z_Z = function void (const(GLdouble)* v) { glNormal3dv_Z_Z_loader(v); };
private void glNormal3dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glNormal3dv_Z_Z = glbindGetProcAddress(`glNormal3dv`);
  if (*cast(void**)&glNormal3dv_Z_Z is null) assert(0, `OpenGL function 'glNormal3dv' not found!`);
  glNormal3dv_Z_Z(v);
}
alias glNormal3f = glNormal3f_Z_Z;
__gshared glNormal3f_Z_Z = function void (GLfloat nx, GLfloat ny, GLfloat nz) { glNormal3f_Z_Z_loader(nx, ny, nz); };
private void glNormal3f_Z_Z_loader (GLfloat nx, GLfloat ny, GLfloat nz) {
  *cast(void**)&glNormal3f_Z_Z = glbindGetProcAddress(`glNormal3f`);
  if (*cast(void**)&glNormal3f_Z_Z is null) assert(0, `OpenGL function 'glNormal3f' not found!`);
  glNormal3f_Z_Z(nx, ny, nz);
}
alias glNormal3fVertex3fSUN = glNormal3fVertex3fSUN_Z_Z;
__gshared glNormal3fVertex3fSUN_Z_Z = function void (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glNormal3fVertex3fSUN_Z_Z_loader(nx, ny, nz, x, y, z); };
private void glNormal3fVertex3fSUN_Z_Z_loader (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glNormal3fVertex3fSUN`);
  if (*cast(void**)&glNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glNormal3fVertex3fSUN' not found!`);
  glNormal3fVertex3fSUN_Z_Z(nx, ny, nz, x, y, z);
}
alias glNormal3fVertex3fvSUN = glNormal3fVertex3fvSUN_Z_Z;
__gshared glNormal3fVertex3fvSUN_Z_Z = function void (const(GLfloat)* n, const(GLfloat)* v) { glNormal3fVertex3fvSUN_Z_Z_loader(n, v); };
private void glNormal3fVertex3fvSUN_Z_Z_loader (const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glNormal3fVertex3fvSUN`);
  if (*cast(void**)&glNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glNormal3fVertex3fvSUN' not found!`);
  glNormal3fVertex3fvSUN_Z_Z(n, v);
}
alias glNormal3fv = glNormal3fv_Z_Z;
__gshared glNormal3fv_Z_Z = function void (const(GLfloat)* v) { glNormal3fv_Z_Z_loader(v); };
private void glNormal3fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glNormal3fv_Z_Z = glbindGetProcAddress(`glNormal3fv`);
  if (*cast(void**)&glNormal3fv_Z_Z is null) assert(0, `OpenGL function 'glNormal3fv' not found!`);
  glNormal3fv_Z_Z(v);
}
alias glNormal3hNV = glNormal3hNV_Z_Z;
__gshared glNormal3hNV_Z_Z = function void (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { glNormal3hNV_Z_Z_loader(nx, ny, nz); };
private void glNormal3hNV_Z_Z_loader (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {
  *cast(void**)&glNormal3hNV_Z_Z = glbindGetProcAddress(`glNormal3hNV`);
  if (*cast(void**)&glNormal3hNV_Z_Z is null) assert(0, `OpenGL function 'glNormal3hNV' not found!`);
  glNormal3hNV_Z_Z(nx, ny, nz);
}
alias glNormal3hvNV = glNormal3hvNV_Z_Z;
__gshared glNormal3hvNV_Z_Z = function void (const(GLhalfNV)* v) { glNormal3hvNV_Z_Z_loader(v); };
private void glNormal3hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glNormal3hvNV_Z_Z = glbindGetProcAddress(`glNormal3hvNV`);
  if (*cast(void**)&glNormal3hvNV_Z_Z is null) assert(0, `OpenGL function 'glNormal3hvNV' not found!`);
  glNormal3hvNV_Z_Z(v);
}
alias glNormal3i = glNormal3i_Z_Z;
__gshared glNormal3i_Z_Z = function void (GLint nx, GLint ny, GLint nz) { glNormal3i_Z_Z_loader(nx, ny, nz); };
private void glNormal3i_Z_Z_loader (GLint nx, GLint ny, GLint nz) {
  *cast(void**)&glNormal3i_Z_Z = glbindGetProcAddress(`glNormal3i`);
  if (*cast(void**)&glNormal3i_Z_Z is null) assert(0, `OpenGL function 'glNormal3i' not found!`);
  glNormal3i_Z_Z(nx, ny, nz);
}
alias glNormal3iv = glNormal3iv_Z_Z;
__gshared glNormal3iv_Z_Z = function void (const(GLint)* v) { glNormal3iv_Z_Z_loader(v); };
private void glNormal3iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glNormal3iv_Z_Z = glbindGetProcAddress(`glNormal3iv`);
  if (*cast(void**)&glNormal3iv_Z_Z is null) assert(0, `OpenGL function 'glNormal3iv' not found!`);
  glNormal3iv_Z_Z(v);
}
alias glNormal3s = glNormal3s_Z_Z;
__gshared glNormal3s_Z_Z = function void (GLshort nx, GLshort ny, GLshort nz) { glNormal3s_Z_Z_loader(nx, ny, nz); };
private void glNormal3s_Z_Z_loader (GLshort nx, GLshort ny, GLshort nz) {
  *cast(void**)&glNormal3s_Z_Z = glbindGetProcAddress(`glNormal3s`);
  if (*cast(void**)&glNormal3s_Z_Z is null) assert(0, `OpenGL function 'glNormal3s' not found!`);
  glNormal3s_Z_Z(nx, ny, nz);
}
alias glNormal3sv = glNormal3sv_Z_Z;
__gshared glNormal3sv_Z_Z = function void (const(GLshort)* v) { glNormal3sv_Z_Z_loader(v); };
private void glNormal3sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glNormal3sv_Z_Z = glbindGetProcAddress(`glNormal3sv`);
  if (*cast(void**)&glNormal3sv_Z_Z is null) assert(0, `OpenGL function 'glNormal3sv' not found!`);
  glNormal3sv_Z_Z(v);
}
alias glNormal3x = glNormal3x_Z_Z;
__gshared glNormal3x_Z_Z = function void (GLfixed nx, GLfixed ny, GLfixed nz) { glNormal3x_Z_Z_loader(nx, ny, nz); };
private void glNormal3x_Z_Z_loader (GLfixed nx, GLfixed ny, GLfixed nz) {
  *cast(void**)&glNormal3x_Z_Z = glbindGetProcAddress(`glNormal3x`);
  if (*cast(void**)&glNormal3x_Z_Z is null) assert(0, `OpenGL function 'glNormal3x' not found!`);
  glNormal3x_Z_Z(nx, ny, nz);
}
alias glNormal3xOES = glNormal3xOES_Z_Z;
__gshared glNormal3xOES_Z_Z = function void (GLfixed nx, GLfixed ny, GLfixed nz) { glNormal3xOES_Z_Z_loader(nx, ny, nz); };
private void glNormal3xOES_Z_Z_loader (GLfixed nx, GLfixed ny, GLfixed nz) {
  *cast(void**)&glNormal3xOES_Z_Z = glbindGetProcAddress(`glNormal3xOES`);
  if (*cast(void**)&glNormal3xOES_Z_Z is null) assert(0, `OpenGL function 'glNormal3xOES' not found!`);
  glNormal3xOES_Z_Z(nx, ny, nz);
}
alias glNormal3xvOES = glNormal3xvOES_Z_Z;
__gshared glNormal3xvOES_Z_Z = function void (const(GLfixed)* coords) { glNormal3xvOES_Z_Z_loader(coords); };
private void glNormal3xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glNormal3xvOES_Z_Z = glbindGetProcAddress(`glNormal3xvOES`);
  if (*cast(void**)&glNormal3xvOES_Z_Z is null) assert(0, `OpenGL function 'glNormal3xvOES' not found!`);
  glNormal3xvOES_Z_Z(coords);
}
alias glNormalFormatNV = glNormalFormatNV_Z_Z;
__gshared glNormalFormatNV_Z_Z = function void (GLenum type, GLsizei stride) { glNormalFormatNV_Z_Z_loader(type, stride); };
private void glNormalFormatNV_Z_Z_loader (GLenum type, GLsizei stride) {
  *cast(void**)&glNormalFormatNV_Z_Z = glbindGetProcAddress(`glNormalFormatNV`);
  if (*cast(void**)&glNormalFormatNV_Z_Z is null) assert(0, `OpenGL function 'glNormalFormatNV' not found!`);
  glNormalFormatNV_Z_Z(type, stride);
}
alias glNormalP3ui = glNormalP3ui_Z_Z;
__gshared glNormalP3ui_Z_Z = function void (GLenum type, GLuint coords) { glNormalP3ui_Z_Z_loader(type, coords); };
private void glNormalP3ui_Z_Z_loader (GLenum type, GLuint coords) {
  *cast(void**)&glNormalP3ui_Z_Z = glbindGetProcAddress(`glNormalP3ui`);
  if (*cast(void**)&glNormalP3ui_Z_Z is null) assert(0, `OpenGL function 'glNormalP3ui' not found!`);
  glNormalP3ui_Z_Z(type, coords);
}
alias glNormalP3uiv = glNormalP3uiv_Z_Z;
__gshared glNormalP3uiv_Z_Z = function void (GLenum type, const(GLuint)* coords) { glNormalP3uiv_Z_Z_loader(type, coords); };
private void glNormalP3uiv_Z_Z_loader (GLenum type, const(GLuint)* coords) {
  *cast(void**)&glNormalP3uiv_Z_Z = glbindGetProcAddress(`glNormalP3uiv`);
  if (*cast(void**)&glNormalP3uiv_Z_Z is null) assert(0, `OpenGL function 'glNormalP3uiv' not found!`);
  glNormalP3uiv_Z_Z(type, coords);
}
alias glNormalPointer = glNormalPointer_Z_Z;
__gshared glNormalPointer_Z_Z = function void (GLenum type, GLsizei stride, const(void)* pointer) { glNormalPointer_Z_Z_loader(type, stride, pointer); };
private void glNormalPointer_Z_Z_loader (GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glNormalPointer_Z_Z = glbindGetProcAddress(`glNormalPointer`);
  if (*cast(void**)&glNormalPointer_Z_Z is null) assert(0, `OpenGL function 'glNormalPointer' not found!`);
  glNormalPointer_Z_Z(type, stride, pointer);
}
alias glNormalPointerEXT = glNormalPointerEXT_Z_Z;
__gshared glNormalPointerEXT_Z_Z = function void (GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) { glNormalPointerEXT_Z_Z_loader(type, stride, count, pointer); };
private void glNormalPointerEXT_Z_Z_loader (GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) {
  *cast(void**)&glNormalPointerEXT_Z_Z = glbindGetProcAddress(`glNormalPointerEXT`);
  if (*cast(void**)&glNormalPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glNormalPointerEXT' not found!`);
  glNormalPointerEXT_Z_Z(type, stride, count, pointer);
}
alias glNormalPointerListIBM = glNormalPointerListIBM_Z_Z;
__gshared glNormalPointerListIBM_Z_Z = function void (GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) { glNormalPointerListIBM_Z_Z_loader(type, stride, pointer, ptrstride); };
private void glNormalPointerListIBM_Z_Z_loader (GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) {
  *cast(void**)&glNormalPointerListIBM_Z_Z = glbindGetProcAddress(`glNormalPointerListIBM`);
  if (*cast(void**)&glNormalPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glNormalPointerListIBM' not found!`);
  glNormalPointerListIBM_Z_Z(type, stride, pointer, ptrstride);
}
alias glNormalPointervINTEL = glNormalPointervINTEL_Z_Z;
__gshared glNormalPointervINTEL_Z_Z = function void (GLenum type, const(void)** pointer) { glNormalPointervINTEL_Z_Z_loader(type, pointer); };
private void glNormalPointervINTEL_Z_Z_loader (GLenum type, const(void)** pointer) {
  *cast(void**)&glNormalPointervINTEL_Z_Z = glbindGetProcAddress(`glNormalPointervINTEL`);
  if (*cast(void**)&glNormalPointervINTEL_Z_Z is null) assert(0, `OpenGL function 'glNormalPointervINTEL' not found!`);
  glNormalPointervINTEL_Z_Z(type, pointer);
}
alias glNormalStream3bATI = glNormalStream3bATI_Z_Z;
__gshared glNormalStream3bATI_Z_Z = function void (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { glNormalStream3bATI_Z_Z_loader(stream, nx, ny, nz); };
private void glNormalStream3bATI_Z_Z_loader (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) {
  *cast(void**)&glNormalStream3bATI_Z_Z = glbindGetProcAddress(`glNormalStream3bATI`);
  if (*cast(void**)&glNormalStream3bATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3bATI' not found!`);
  glNormalStream3bATI_Z_Z(stream, nx, ny, nz);
}
alias glNormalStream3bvATI = glNormalStream3bvATI_Z_Z;
__gshared glNormalStream3bvATI_Z_Z = function void (GLenum stream, const(GLbyte)* coords) { glNormalStream3bvATI_Z_Z_loader(stream, coords); };
private void glNormalStream3bvATI_Z_Z_loader (GLenum stream, const(GLbyte)* coords) {
  *cast(void**)&glNormalStream3bvATI_Z_Z = glbindGetProcAddress(`glNormalStream3bvATI`);
  if (*cast(void**)&glNormalStream3bvATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3bvATI' not found!`);
  glNormalStream3bvATI_Z_Z(stream, coords);
}
alias glNormalStream3dATI = glNormalStream3dATI_Z_Z;
__gshared glNormalStream3dATI_Z_Z = function void (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { glNormalStream3dATI_Z_Z_loader(stream, nx, ny, nz); };
private void glNormalStream3dATI_Z_Z_loader (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) {
  *cast(void**)&glNormalStream3dATI_Z_Z = glbindGetProcAddress(`glNormalStream3dATI`);
  if (*cast(void**)&glNormalStream3dATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3dATI' not found!`);
  glNormalStream3dATI_Z_Z(stream, nx, ny, nz);
}
alias glNormalStream3dvATI = glNormalStream3dvATI_Z_Z;
__gshared glNormalStream3dvATI_Z_Z = function void (GLenum stream, const(GLdouble)* coords) { glNormalStream3dvATI_Z_Z_loader(stream, coords); };
private void glNormalStream3dvATI_Z_Z_loader (GLenum stream, const(GLdouble)* coords) {
  *cast(void**)&glNormalStream3dvATI_Z_Z = glbindGetProcAddress(`glNormalStream3dvATI`);
  if (*cast(void**)&glNormalStream3dvATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3dvATI' not found!`);
  glNormalStream3dvATI_Z_Z(stream, coords);
}
alias glNormalStream3fATI = glNormalStream3fATI_Z_Z;
__gshared glNormalStream3fATI_Z_Z = function void (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { glNormalStream3fATI_Z_Z_loader(stream, nx, ny, nz); };
private void glNormalStream3fATI_Z_Z_loader (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) {
  *cast(void**)&glNormalStream3fATI_Z_Z = glbindGetProcAddress(`glNormalStream3fATI`);
  if (*cast(void**)&glNormalStream3fATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3fATI' not found!`);
  glNormalStream3fATI_Z_Z(stream, nx, ny, nz);
}
alias glNormalStream3fvATI = glNormalStream3fvATI_Z_Z;
__gshared glNormalStream3fvATI_Z_Z = function void (GLenum stream, const(GLfloat)* coords) { glNormalStream3fvATI_Z_Z_loader(stream, coords); };
private void glNormalStream3fvATI_Z_Z_loader (GLenum stream, const(GLfloat)* coords) {
  *cast(void**)&glNormalStream3fvATI_Z_Z = glbindGetProcAddress(`glNormalStream3fvATI`);
  if (*cast(void**)&glNormalStream3fvATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3fvATI' not found!`);
  glNormalStream3fvATI_Z_Z(stream, coords);
}
alias glNormalStream3iATI = glNormalStream3iATI_Z_Z;
__gshared glNormalStream3iATI_Z_Z = function void (GLenum stream, GLint nx, GLint ny, GLint nz) { glNormalStream3iATI_Z_Z_loader(stream, nx, ny, nz); };
private void glNormalStream3iATI_Z_Z_loader (GLenum stream, GLint nx, GLint ny, GLint nz) {
  *cast(void**)&glNormalStream3iATI_Z_Z = glbindGetProcAddress(`glNormalStream3iATI`);
  if (*cast(void**)&glNormalStream3iATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3iATI' not found!`);
  glNormalStream3iATI_Z_Z(stream, nx, ny, nz);
}
alias glNormalStream3ivATI = glNormalStream3ivATI_Z_Z;
__gshared glNormalStream3ivATI_Z_Z = function void (GLenum stream, const(GLint)* coords) { glNormalStream3ivATI_Z_Z_loader(stream, coords); };
private void glNormalStream3ivATI_Z_Z_loader (GLenum stream, const(GLint)* coords) {
  *cast(void**)&glNormalStream3ivATI_Z_Z = glbindGetProcAddress(`glNormalStream3ivATI`);
  if (*cast(void**)&glNormalStream3ivATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3ivATI' not found!`);
  glNormalStream3ivATI_Z_Z(stream, coords);
}
alias glNormalStream3sATI = glNormalStream3sATI_Z_Z;
__gshared glNormalStream3sATI_Z_Z = function void (GLenum stream, GLshort nx, GLshort ny, GLshort nz) { glNormalStream3sATI_Z_Z_loader(stream, nx, ny, nz); };
private void glNormalStream3sATI_Z_Z_loader (GLenum stream, GLshort nx, GLshort ny, GLshort nz) {
  *cast(void**)&glNormalStream3sATI_Z_Z = glbindGetProcAddress(`glNormalStream3sATI`);
  if (*cast(void**)&glNormalStream3sATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3sATI' not found!`);
  glNormalStream3sATI_Z_Z(stream, nx, ny, nz);
}
alias glNormalStream3svATI = glNormalStream3svATI_Z_Z;
__gshared glNormalStream3svATI_Z_Z = function void (GLenum stream, const(GLshort)* coords) { glNormalStream3svATI_Z_Z_loader(stream, coords); };
private void glNormalStream3svATI_Z_Z_loader (GLenum stream, const(GLshort)* coords) {
  *cast(void**)&glNormalStream3svATI_Z_Z = glbindGetProcAddress(`glNormalStream3svATI`);
  if (*cast(void**)&glNormalStream3svATI_Z_Z is null) assert(0, `OpenGL function 'glNormalStream3svATI' not found!`);
  glNormalStream3svATI_Z_Z(stream, coords);
}
alias glObjectLabel = glObjectLabel_Z_Z;
__gshared glObjectLabel_Z_Z = function void (GLenum identifier, GLuint name, GLsizei length, const(GLchar)* label) { glObjectLabel_Z_Z_loader(identifier, name, length, label); };
private void glObjectLabel_Z_Z_loader (GLenum identifier, GLuint name, GLsizei length, const(GLchar)* label) {
  *cast(void**)&glObjectLabel_Z_Z = glbindGetProcAddress(`glObjectLabel`);
  if (*cast(void**)&glObjectLabel_Z_Z is null) assert(0, `OpenGL function 'glObjectLabel' not found!`);
  glObjectLabel_Z_Z(identifier, name, length, label);
}
alias glObjectLabelKHR = glObjectLabelKHR_Z_Z;
__gshared glObjectLabelKHR_Z_Z = function void (GLenum identifier, GLuint name, GLsizei length, const(GLchar)* label) { glObjectLabelKHR_Z_Z_loader(identifier, name, length, label); };
private void glObjectLabelKHR_Z_Z_loader (GLenum identifier, GLuint name, GLsizei length, const(GLchar)* label) {
  *cast(void**)&glObjectLabelKHR_Z_Z = glbindGetProcAddress(`glObjectLabelKHR`);
  if (*cast(void**)&glObjectLabelKHR_Z_Z is null) assert(0, `OpenGL function 'glObjectLabelKHR' not found!`);
  glObjectLabelKHR_Z_Z(identifier, name, length, label);
}
alias glObjectPtrLabel = glObjectPtrLabel_Z_Z;
__gshared glObjectPtrLabel_Z_Z = function void (const(void)* ptr, GLsizei length, const(GLchar)* label) { glObjectPtrLabel_Z_Z_loader(ptr, length, label); };
private void glObjectPtrLabel_Z_Z_loader (const(void)* ptr, GLsizei length, const(GLchar)* label) {
  *cast(void**)&glObjectPtrLabel_Z_Z = glbindGetProcAddress(`glObjectPtrLabel`);
  if (*cast(void**)&glObjectPtrLabel_Z_Z is null) assert(0, `OpenGL function 'glObjectPtrLabel' not found!`);
  glObjectPtrLabel_Z_Z(ptr, length, label);
}
alias glObjectPtrLabelKHR = glObjectPtrLabelKHR_Z_Z;
__gshared glObjectPtrLabelKHR_Z_Z = function void (const(void)* ptr, GLsizei length, const(GLchar)* label) { glObjectPtrLabelKHR_Z_Z_loader(ptr, length, label); };
private void glObjectPtrLabelKHR_Z_Z_loader (const(void)* ptr, GLsizei length, const(GLchar)* label) {
  *cast(void**)&glObjectPtrLabelKHR_Z_Z = glbindGetProcAddress(`glObjectPtrLabelKHR`);
  if (*cast(void**)&glObjectPtrLabelKHR_Z_Z is null) assert(0, `OpenGL function 'glObjectPtrLabelKHR' not found!`);
  glObjectPtrLabelKHR_Z_Z(ptr, length, label);
}
alias glObjectPurgeableAPPLE = glObjectPurgeableAPPLE_Z_Z;
__gshared glObjectPurgeableAPPLE_Z_Z = function GLenum (GLenum objectType, GLuint name, GLenum option) { return glObjectPurgeableAPPLE_Z_Z_loader(objectType, name, option); };
private GLenum glObjectPurgeableAPPLE_Z_Z_loader (GLenum objectType, GLuint name, GLenum option) {
  *cast(void**)&glObjectPurgeableAPPLE_Z_Z = glbindGetProcAddress(`glObjectPurgeableAPPLE`);
  if (*cast(void**)&glObjectPurgeableAPPLE_Z_Z is null) assert(0, `OpenGL function 'glObjectPurgeableAPPLE' not found!`);
  return glObjectPurgeableAPPLE_Z_Z(objectType, name, option);
}
alias glObjectUnpurgeableAPPLE = glObjectUnpurgeableAPPLE_Z_Z;
__gshared glObjectUnpurgeableAPPLE_Z_Z = function GLenum (GLenum objectType, GLuint name, GLenum option) { return glObjectUnpurgeableAPPLE_Z_Z_loader(objectType, name, option); };
private GLenum glObjectUnpurgeableAPPLE_Z_Z_loader (GLenum objectType, GLuint name, GLenum option) {
  *cast(void**)&glObjectUnpurgeableAPPLE_Z_Z = glbindGetProcAddress(`glObjectUnpurgeableAPPLE`);
  if (*cast(void**)&glObjectUnpurgeableAPPLE_Z_Z is null) assert(0, `OpenGL function 'glObjectUnpurgeableAPPLE' not found!`);
  return glObjectUnpurgeableAPPLE_Z_Z(objectType, name, option);
}
alias glOrtho = glOrtho_Z_Z;
__gshared glOrtho_Z_Z = function void (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { glOrtho_Z_Z_loader(left, right, bottom, top, zNear, zFar); };
private void glOrtho_Z_Z_loader (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  *cast(void**)&glOrtho_Z_Z = glbindGetProcAddress(`glOrtho`);
  if (*cast(void**)&glOrtho_Z_Z is null) assert(0, `OpenGL function 'glOrtho' not found!`);
  glOrtho_Z_Z(left, right, bottom, top, zNear, zFar);
}
alias glOrthof = glOrthof_Z_Z;
__gshared glOrthof_Z_Z = function void (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { glOrthof_Z_Z_loader(l, r, b, t, n, f); };
private void glOrthof_Z_Z_loader (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  *cast(void**)&glOrthof_Z_Z = glbindGetProcAddress(`glOrthof`);
  if (*cast(void**)&glOrthof_Z_Z is null) assert(0, `OpenGL function 'glOrthof' not found!`);
  glOrthof_Z_Z(l, r, b, t, n, f);
}
alias glOrthofOES = glOrthofOES_Z_Z;
__gshared glOrthofOES_Z_Z = function void (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { glOrthofOES_Z_Z_loader(l, r, b, t, n, f); };
private void glOrthofOES_Z_Z_loader (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  *cast(void**)&glOrthofOES_Z_Z = glbindGetProcAddress(`glOrthofOES`);
  if (*cast(void**)&glOrthofOES_Z_Z is null) assert(0, `OpenGL function 'glOrthofOES' not found!`);
  glOrthofOES_Z_Z(l, r, b, t, n, f);
}
alias glOrthox = glOrthox_Z_Z;
__gshared glOrthox_Z_Z = function void (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { glOrthox_Z_Z_loader(l, r, b, t, n, f); };
private void glOrthox_Z_Z_loader (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  *cast(void**)&glOrthox_Z_Z = glbindGetProcAddress(`glOrthox`);
  if (*cast(void**)&glOrthox_Z_Z is null) assert(0, `OpenGL function 'glOrthox' not found!`);
  glOrthox_Z_Z(l, r, b, t, n, f);
}
alias glOrthoxOES = glOrthoxOES_Z_Z;
__gshared glOrthoxOES_Z_Z = function void (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { glOrthoxOES_Z_Z_loader(l, r, b, t, n, f); };
private void glOrthoxOES_Z_Z_loader (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  *cast(void**)&glOrthoxOES_Z_Z = glbindGetProcAddress(`glOrthoxOES`);
  if (*cast(void**)&glOrthoxOES_Z_Z is null) assert(0, `OpenGL function 'glOrthoxOES' not found!`);
  glOrthoxOES_Z_Z(l, r, b, t, n, f);
}
alias glPNTrianglesfATI = glPNTrianglesfATI_Z_Z;
__gshared glPNTrianglesfATI_Z_Z = function void (GLenum pname, GLfloat param) { glPNTrianglesfATI_Z_Z_loader(pname, param); };
private void glPNTrianglesfATI_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPNTrianglesfATI_Z_Z = glbindGetProcAddress(`glPNTrianglesfATI`);
  if (*cast(void**)&glPNTrianglesfATI_Z_Z is null) assert(0, `OpenGL function 'glPNTrianglesfATI' not found!`);
  glPNTrianglesfATI_Z_Z(pname, param);
}
alias glPNTrianglesiATI = glPNTrianglesiATI_Z_Z;
__gshared glPNTrianglesiATI_Z_Z = function void (GLenum pname, GLint param) { glPNTrianglesiATI_Z_Z_loader(pname, param); };
private void glPNTrianglesiATI_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glPNTrianglesiATI_Z_Z = glbindGetProcAddress(`glPNTrianglesiATI`);
  if (*cast(void**)&glPNTrianglesiATI_Z_Z is null) assert(0, `OpenGL function 'glPNTrianglesiATI' not found!`);
  glPNTrianglesiATI_Z_Z(pname, param);
}
alias glPassTexCoordATI = glPassTexCoordATI_Z_Z;
__gshared glPassTexCoordATI_Z_Z = function void (GLuint dst, GLuint coord, GLenum swizzle) { glPassTexCoordATI_Z_Z_loader(dst, coord, swizzle); };
private void glPassTexCoordATI_Z_Z_loader (GLuint dst, GLuint coord, GLenum swizzle) {
  *cast(void**)&glPassTexCoordATI_Z_Z = glbindGetProcAddress(`glPassTexCoordATI`);
  if (*cast(void**)&glPassTexCoordATI_Z_Z is null) assert(0, `OpenGL function 'glPassTexCoordATI' not found!`);
  glPassTexCoordATI_Z_Z(dst, coord, swizzle);
}
alias glPassThrough = glPassThrough_Z_Z;
__gshared glPassThrough_Z_Z = function void (GLfloat token) { glPassThrough_Z_Z_loader(token); };
private void glPassThrough_Z_Z_loader (GLfloat token) {
  *cast(void**)&glPassThrough_Z_Z = glbindGetProcAddress(`glPassThrough`);
  if (*cast(void**)&glPassThrough_Z_Z is null) assert(0, `OpenGL function 'glPassThrough' not found!`);
  glPassThrough_Z_Z(token);
}
alias glPassThroughxOES = glPassThroughxOES_Z_Z;
__gshared glPassThroughxOES_Z_Z = function void (GLfixed token) { glPassThroughxOES_Z_Z_loader(token); };
private void glPassThroughxOES_Z_Z_loader (GLfixed token) {
  *cast(void**)&glPassThroughxOES_Z_Z = glbindGetProcAddress(`glPassThroughxOES`);
  if (*cast(void**)&glPassThroughxOES_Z_Z is null) assert(0, `OpenGL function 'glPassThroughxOES' not found!`);
  glPassThroughxOES_Z_Z(token);
}
alias glPatchParameterfv = glPatchParameterfv_Z_Z;
__gshared glPatchParameterfv_Z_Z = function void (GLenum pname, const(GLfloat)* values) { glPatchParameterfv_Z_Z_loader(pname, values); };
private void glPatchParameterfv_Z_Z_loader (GLenum pname, const(GLfloat)* values) {
  *cast(void**)&glPatchParameterfv_Z_Z = glbindGetProcAddress(`glPatchParameterfv`);
  if (*cast(void**)&glPatchParameterfv_Z_Z is null) assert(0, `OpenGL function 'glPatchParameterfv' not found!`);
  glPatchParameterfv_Z_Z(pname, values);
}
alias glPatchParameteri = glPatchParameteri_Z_Z;
__gshared glPatchParameteri_Z_Z = function void (GLenum pname, GLint value) { glPatchParameteri_Z_Z_loader(pname, value); };
private void glPatchParameteri_Z_Z_loader (GLenum pname, GLint value) {
  *cast(void**)&glPatchParameteri_Z_Z = glbindGetProcAddress(`glPatchParameteri`);
  if (*cast(void**)&glPatchParameteri_Z_Z is null) assert(0, `OpenGL function 'glPatchParameteri' not found!`);
  glPatchParameteri_Z_Z(pname, value);
}
alias glPatchParameteriEXT = glPatchParameteriEXT_Z_Z;
__gshared glPatchParameteriEXT_Z_Z = function void (GLenum pname, GLint value) { glPatchParameteriEXT_Z_Z_loader(pname, value); };
private void glPatchParameteriEXT_Z_Z_loader (GLenum pname, GLint value) {
  *cast(void**)&glPatchParameteriEXT_Z_Z = glbindGetProcAddress(`glPatchParameteriEXT`);
  if (*cast(void**)&glPatchParameteriEXT_Z_Z is null) assert(0, `OpenGL function 'glPatchParameteriEXT' not found!`);
  glPatchParameteriEXT_Z_Z(pname, value);
}
alias glPatchParameteriOES = glPatchParameteriOES_Z_Z;
__gshared glPatchParameteriOES_Z_Z = function void (GLenum pname, GLint value) { glPatchParameteriOES_Z_Z_loader(pname, value); };
private void glPatchParameteriOES_Z_Z_loader (GLenum pname, GLint value) {
  *cast(void**)&glPatchParameteriOES_Z_Z = glbindGetProcAddress(`glPatchParameteriOES`);
  if (*cast(void**)&glPatchParameteriOES_Z_Z is null) assert(0, `OpenGL function 'glPatchParameteriOES' not found!`);
  glPatchParameteriOES_Z_Z(pname, value);
}
alias glPathColorGenNV = glPathColorGenNV_Z_Z;
__gshared glPathColorGenNV_Z_Z = function void (GLenum color, GLenum genMode, GLenum colorFormat, const(GLfloat)* coeffs) { glPathColorGenNV_Z_Z_loader(color, genMode, colorFormat, coeffs); };
private void glPathColorGenNV_Z_Z_loader (GLenum color, GLenum genMode, GLenum colorFormat, const(GLfloat)* coeffs) {
  *cast(void**)&glPathColorGenNV_Z_Z = glbindGetProcAddress(`glPathColorGenNV`);
  if (*cast(void**)&glPathColorGenNV_Z_Z is null) assert(0, `OpenGL function 'glPathColorGenNV' not found!`);
  glPathColorGenNV_Z_Z(color, genMode, colorFormat, coeffs);
}
alias glPathCommandsNV = glPathCommandsNV_Z_Z;
__gshared glPathCommandsNV_Z_Z = function void (GLuint path, GLsizei numCommands, const(GLubyte)* commands, GLsizei numCoords, GLenum coordType, const(void)* coords) { glPathCommandsNV_Z_Z_loader(path, numCommands, commands, numCoords, coordType, coords); };
private void glPathCommandsNV_Z_Z_loader (GLuint path, GLsizei numCommands, const(GLubyte)* commands, GLsizei numCoords, GLenum coordType, const(void)* coords) {
  *cast(void**)&glPathCommandsNV_Z_Z = glbindGetProcAddress(`glPathCommandsNV`);
  if (*cast(void**)&glPathCommandsNV_Z_Z is null) assert(0, `OpenGL function 'glPathCommandsNV' not found!`);
  glPathCommandsNV_Z_Z(path, numCommands, commands, numCoords, coordType, coords);
}
alias glPathCoordsNV = glPathCoordsNV_Z_Z;
__gshared glPathCoordsNV_Z_Z = function void (GLuint path, GLsizei numCoords, GLenum coordType, const(void)* coords) { glPathCoordsNV_Z_Z_loader(path, numCoords, coordType, coords); };
private void glPathCoordsNV_Z_Z_loader (GLuint path, GLsizei numCoords, GLenum coordType, const(void)* coords) {
  *cast(void**)&glPathCoordsNV_Z_Z = glbindGetProcAddress(`glPathCoordsNV`);
  if (*cast(void**)&glPathCoordsNV_Z_Z is null) assert(0, `OpenGL function 'glPathCoordsNV' not found!`);
  glPathCoordsNV_Z_Z(path, numCoords, coordType, coords);
}
alias glPathCoverDepthFuncNV = glPathCoverDepthFuncNV_Z_Z;
__gshared glPathCoverDepthFuncNV_Z_Z = function void (GLenum func) { glPathCoverDepthFuncNV_Z_Z_loader(func); };
private void glPathCoverDepthFuncNV_Z_Z_loader (GLenum func) {
  *cast(void**)&glPathCoverDepthFuncNV_Z_Z = glbindGetProcAddress(`glPathCoverDepthFuncNV`);
  if (*cast(void**)&glPathCoverDepthFuncNV_Z_Z is null) assert(0, `OpenGL function 'glPathCoverDepthFuncNV' not found!`);
  glPathCoverDepthFuncNV_Z_Z(func);
}
alias glPathDashArrayNV = glPathDashArrayNV_Z_Z;
__gshared glPathDashArrayNV_Z_Z = function void (GLuint path, GLsizei dashCount, const(GLfloat)* dashArray) { glPathDashArrayNV_Z_Z_loader(path, dashCount, dashArray); };
private void glPathDashArrayNV_Z_Z_loader (GLuint path, GLsizei dashCount, const(GLfloat)* dashArray) {
  *cast(void**)&glPathDashArrayNV_Z_Z = glbindGetProcAddress(`glPathDashArrayNV`);
  if (*cast(void**)&glPathDashArrayNV_Z_Z is null) assert(0, `OpenGL function 'glPathDashArrayNV' not found!`);
  glPathDashArrayNV_Z_Z(path, dashCount, dashArray);
}
alias glPathFogGenNV = glPathFogGenNV_Z_Z;
__gshared glPathFogGenNV_Z_Z = function void (GLenum genMode) { glPathFogGenNV_Z_Z_loader(genMode); };
private void glPathFogGenNV_Z_Z_loader (GLenum genMode) {
  *cast(void**)&glPathFogGenNV_Z_Z = glbindGetProcAddress(`glPathFogGenNV`);
  if (*cast(void**)&glPathFogGenNV_Z_Z is null) assert(0, `OpenGL function 'glPathFogGenNV' not found!`);
  glPathFogGenNV_Z_Z(genMode);
}
alias glPathGlyphIndexArrayNV = glPathGlyphIndexArrayNV_Z_Z;
__gshared glPathGlyphIndexArrayNV_Z_Z = function GLenum (GLuint firstPathName, GLenum fontTarget, const(void)* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return glPathGlyphIndexArrayNV_Z_Z_loader(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); };
private GLenum glPathGlyphIndexArrayNV_Z_Z_loader (GLuint firstPathName, GLenum fontTarget, const(void)* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  *cast(void**)&glPathGlyphIndexArrayNV_Z_Z = glbindGetProcAddress(`glPathGlyphIndexArrayNV`);
  if (*cast(void**)&glPathGlyphIndexArrayNV_Z_Z is null) assert(0, `OpenGL function 'glPathGlyphIndexArrayNV' not found!`);
  return glPathGlyphIndexArrayNV_Z_Z(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}
alias glPathGlyphRangeNV = glPathGlyphRangeNV_Z_Z;
__gshared glPathGlyphRangeNV_Z_Z = function void (GLuint firstPathName, GLenum fontTarget, const(void)* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { glPathGlyphRangeNV_Z_Z_loader(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); };
private void glPathGlyphRangeNV_Z_Z_loader (GLuint firstPathName, GLenum fontTarget, const(void)* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  *cast(void**)&glPathGlyphRangeNV_Z_Z = glbindGetProcAddress(`glPathGlyphRangeNV`);
  if (*cast(void**)&glPathGlyphRangeNV_Z_Z is null) assert(0, `OpenGL function 'glPathGlyphRangeNV' not found!`);
  glPathGlyphRangeNV_Z_Z(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}
alias glPathGlyphsNV = glPathGlyphsNV_Z_Z;
__gshared glPathGlyphsNV_Z_Z = function void (GLuint firstPathName, GLenum fontTarget, const(void)* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const(void)* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { glPathGlyphsNV_Z_Z_loader(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); };
private void glPathGlyphsNV_Z_Z_loader (GLuint firstPathName, GLenum fontTarget, const(void)* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const(void)* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  *cast(void**)&glPathGlyphsNV_Z_Z = glbindGetProcAddress(`glPathGlyphsNV`);
  if (*cast(void**)&glPathGlyphsNV_Z_Z is null) assert(0, `OpenGL function 'glPathGlyphsNV' not found!`);
  glPathGlyphsNV_Z_Z(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}
alias glPathMemoryGlyphIndexArrayNV = glPathMemoryGlyphIndexArrayNV_Z_Z;
__gshared glPathMemoryGlyphIndexArrayNV_Z_Z = function GLenum (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const(void)* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return glPathMemoryGlyphIndexArrayNV_Z_Z_loader(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); };
private GLenum glPathMemoryGlyphIndexArrayNV_Z_Z_loader (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const(void)* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  *cast(void**)&glPathMemoryGlyphIndexArrayNV_Z_Z = glbindGetProcAddress(`glPathMemoryGlyphIndexArrayNV`);
  if (*cast(void**)&glPathMemoryGlyphIndexArrayNV_Z_Z is null) assert(0, `OpenGL function 'glPathMemoryGlyphIndexArrayNV' not found!`);
  return glPathMemoryGlyphIndexArrayNV_Z_Z(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}
alias glPathParameterfNV = glPathParameterfNV_Z_Z;
__gshared glPathParameterfNV_Z_Z = function void (GLuint path, GLenum pname, GLfloat value) { glPathParameterfNV_Z_Z_loader(path, pname, value); };
private void glPathParameterfNV_Z_Z_loader (GLuint path, GLenum pname, GLfloat value) {
  *cast(void**)&glPathParameterfNV_Z_Z = glbindGetProcAddress(`glPathParameterfNV`);
  if (*cast(void**)&glPathParameterfNV_Z_Z is null) assert(0, `OpenGL function 'glPathParameterfNV' not found!`);
  glPathParameterfNV_Z_Z(path, pname, value);
}
alias glPathParameterfvNV = glPathParameterfvNV_Z_Z;
__gshared glPathParameterfvNV_Z_Z = function void (GLuint path, GLenum pname, const(GLfloat)* value) { glPathParameterfvNV_Z_Z_loader(path, pname, value); };
private void glPathParameterfvNV_Z_Z_loader (GLuint path, GLenum pname, const(GLfloat)* value) {
  *cast(void**)&glPathParameterfvNV_Z_Z = glbindGetProcAddress(`glPathParameterfvNV`);
  if (*cast(void**)&glPathParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glPathParameterfvNV' not found!`);
  glPathParameterfvNV_Z_Z(path, pname, value);
}
alias glPathParameteriNV = glPathParameteriNV_Z_Z;
__gshared glPathParameteriNV_Z_Z = function void (GLuint path, GLenum pname, GLint value) { glPathParameteriNV_Z_Z_loader(path, pname, value); };
private void glPathParameteriNV_Z_Z_loader (GLuint path, GLenum pname, GLint value) {
  *cast(void**)&glPathParameteriNV_Z_Z = glbindGetProcAddress(`glPathParameteriNV`);
  if (*cast(void**)&glPathParameteriNV_Z_Z is null) assert(0, `OpenGL function 'glPathParameteriNV' not found!`);
  glPathParameteriNV_Z_Z(path, pname, value);
}
alias glPathParameterivNV = glPathParameterivNV_Z_Z;
__gshared glPathParameterivNV_Z_Z = function void (GLuint path, GLenum pname, const(GLint)* value) { glPathParameterivNV_Z_Z_loader(path, pname, value); };
private void glPathParameterivNV_Z_Z_loader (GLuint path, GLenum pname, const(GLint)* value) {
  *cast(void**)&glPathParameterivNV_Z_Z = glbindGetProcAddress(`glPathParameterivNV`);
  if (*cast(void**)&glPathParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glPathParameterivNV' not found!`);
  glPathParameterivNV_Z_Z(path, pname, value);
}
alias glPathStencilDepthOffsetNV = glPathStencilDepthOffsetNV_Z_Z;
__gshared glPathStencilDepthOffsetNV_Z_Z = function void (GLfloat factor, GLfloat units) { glPathStencilDepthOffsetNV_Z_Z_loader(factor, units); };
private void glPathStencilDepthOffsetNV_Z_Z_loader (GLfloat factor, GLfloat units) {
  *cast(void**)&glPathStencilDepthOffsetNV_Z_Z = glbindGetProcAddress(`glPathStencilDepthOffsetNV`);
  if (*cast(void**)&glPathStencilDepthOffsetNV_Z_Z is null) assert(0, `OpenGL function 'glPathStencilDepthOffsetNV' not found!`);
  glPathStencilDepthOffsetNV_Z_Z(factor, units);
}
alias glPathStencilFuncNV = glPathStencilFuncNV_Z_Z;
__gshared glPathStencilFuncNV_Z_Z = function void (GLenum func, GLint ref_, GLuint mask) { glPathStencilFuncNV_Z_Z_loader(func, ref_, mask); };
private void glPathStencilFuncNV_Z_Z_loader (GLenum func, GLint ref_, GLuint mask) {
  *cast(void**)&glPathStencilFuncNV_Z_Z = glbindGetProcAddress(`glPathStencilFuncNV`);
  if (*cast(void**)&glPathStencilFuncNV_Z_Z is null) assert(0, `OpenGL function 'glPathStencilFuncNV' not found!`);
  glPathStencilFuncNV_Z_Z(func, ref_, mask);
}
alias glPathStringNV = glPathStringNV_Z_Z;
__gshared glPathStringNV_Z_Z = function void (GLuint path, GLenum format, GLsizei length, const(void)* pathString) { glPathStringNV_Z_Z_loader(path, format, length, pathString); };
private void glPathStringNV_Z_Z_loader (GLuint path, GLenum format, GLsizei length, const(void)* pathString) {
  *cast(void**)&glPathStringNV_Z_Z = glbindGetProcAddress(`glPathStringNV`);
  if (*cast(void**)&glPathStringNV_Z_Z is null) assert(0, `OpenGL function 'glPathStringNV' not found!`);
  glPathStringNV_Z_Z(path, format, length, pathString);
}
alias glPathSubCommandsNV = glPathSubCommandsNV_Z_Z;
__gshared glPathSubCommandsNV_Z_Z = function void (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const(GLubyte)* commands, GLsizei numCoords, GLenum coordType, const(void)* coords) { glPathSubCommandsNV_Z_Z_loader(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); };
private void glPathSubCommandsNV_Z_Z_loader (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const(GLubyte)* commands, GLsizei numCoords, GLenum coordType, const(void)* coords) {
  *cast(void**)&glPathSubCommandsNV_Z_Z = glbindGetProcAddress(`glPathSubCommandsNV`);
  if (*cast(void**)&glPathSubCommandsNV_Z_Z is null) assert(0, `OpenGL function 'glPathSubCommandsNV' not found!`);
  glPathSubCommandsNV_Z_Z(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}
alias glPathSubCoordsNV = glPathSubCoordsNV_Z_Z;
__gshared glPathSubCoordsNV_Z_Z = function void (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const(void)* coords) { glPathSubCoordsNV_Z_Z_loader(path, coordStart, numCoords, coordType, coords); };
private void glPathSubCoordsNV_Z_Z_loader (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const(void)* coords) {
  *cast(void**)&glPathSubCoordsNV_Z_Z = glbindGetProcAddress(`glPathSubCoordsNV`);
  if (*cast(void**)&glPathSubCoordsNV_Z_Z is null) assert(0, `OpenGL function 'glPathSubCoordsNV' not found!`);
  glPathSubCoordsNV_Z_Z(path, coordStart, numCoords, coordType, coords);
}
alias glPathTexGenNV = glPathTexGenNV_Z_Z;
__gshared glPathTexGenNV_Z_Z = function void (GLenum texCoordSet, GLenum genMode, GLint components, const(GLfloat)* coeffs) { glPathTexGenNV_Z_Z_loader(texCoordSet, genMode, components, coeffs); };
private void glPathTexGenNV_Z_Z_loader (GLenum texCoordSet, GLenum genMode, GLint components, const(GLfloat)* coeffs) {
  *cast(void**)&glPathTexGenNV_Z_Z = glbindGetProcAddress(`glPathTexGenNV`);
  if (*cast(void**)&glPathTexGenNV_Z_Z is null) assert(0, `OpenGL function 'glPathTexGenNV' not found!`);
  glPathTexGenNV_Z_Z(texCoordSet, genMode, components, coeffs);
}
alias glPauseTransformFeedback = glPauseTransformFeedback_Z_Z;
__gshared glPauseTransformFeedback_Z_Z = function void () { glPauseTransformFeedback_Z_Z_loader(); };
private void glPauseTransformFeedback_Z_Z_loader () {
  *cast(void**)&glPauseTransformFeedback_Z_Z = glbindGetProcAddress(`glPauseTransformFeedback`);
  if (*cast(void**)&glPauseTransformFeedback_Z_Z is null) assert(0, `OpenGL function 'glPauseTransformFeedback' not found!`);
  glPauseTransformFeedback_Z_Z();
}
alias glPauseTransformFeedbackNV = glPauseTransformFeedbackNV_Z_Z;
__gshared glPauseTransformFeedbackNV_Z_Z = function void () { glPauseTransformFeedbackNV_Z_Z_loader(); };
private void glPauseTransformFeedbackNV_Z_Z_loader () {
  *cast(void**)&glPauseTransformFeedbackNV_Z_Z = glbindGetProcAddress(`glPauseTransformFeedbackNV`);
  if (*cast(void**)&glPauseTransformFeedbackNV_Z_Z is null) assert(0, `OpenGL function 'glPauseTransformFeedbackNV' not found!`);
  glPauseTransformFeedbackNV_Z_Z();
}
alias glPixelDataRangeNV = glPixelDataRangeNV_Z_Z;
__gshared glPixelDataRangeNV_Z_Z = function void (GLenum target, GLsizei length, const(void)* pointer) { glPixelDataRangeNV_Z_Z_loader(target, length, pointer); };
private void glPixelDataRangeNV_Z_Z_loader (GLenum target, GLsizei length, const(void)* pointer) {
  *cast(void**)&glPixelDataRangeNV_Z_Z = glbindGetProcAddress(`glPixelDataRangeNV`);
  if (*cast(void**)&glPixelDataRangeNV_Z_Z is null) assert(0, `OpenGL function 'glPixelDataRangeNV' not found!`);
  glPixelDataRangeNV_Z_Z(target, length, pointer);
}
alias glPixelMapfv = glPixelMapfv_Z_Z;
__gshared glPixelMapfv_Z_Z = function void (GLenum map, GLsizei mapsize, const(GLfloat)* values) { glPixelMapfv_Z_Z_loader(map, mapsize, values); };
private void glPixelMapfv_Z_Z_loader (GLenum map, GLsizei mapsize, const(GLfloat)* values) {
  *cast(void**)&glPixelMapfv_Z_Z = glbindGetProcAddress(`glPixelMapfv`);
  if (*cast(void**)&glPixelMapfv_Z_Z is null) assert(0, `OpenGL function 'glPixelMapfv' not found!`);
  glPixelMapfv_Z_Z(map, mapsize, values);
}
alias glPixelMapuiv = glPixelMapuiv_Z_Z;
__gshared glPixelMapuiv_Z_Z = function void (GLenum map, GLsizei mapsize, const(GLuint)* values) { glPixelMapuiv_Z_Z_loader(map, mapsize, values); };
private void glPixelMapuiv_Z_Z_loader (GLenum map, GLsizei mapsize, const(GLuint)* values) {
  *cast(void**)&glPixelMapuiv_Z_Z = glbindGetProcAddress(`glPixelMapuiv`);
  if (*cast(void**)&glPixelMapuiv_Z_Z is null) assert(0, `OpenGL function 'glPixelMapuiv' not found!`);
  glPixelMapuiv_Z_Z(map, mapsize, values);
}
alias glPixelMapusv = glPixelMapusv_Z_Z;
__gshared glPixelMapusv_Z_Z = function void (GLenum map, GLsizei mapsize, const(GLushort)* values) { glPixelMapusv_Z_Z_loader(map, mapsize, values); };
private void glPixelMapusv_Z_Z_loader (GLenum map, GLsizei mapsize, const(GLushort)* values) {
  *cast(void**)&glPixelMapusv_Z_Z = glbindGetProcAddress(`glPixelMapusv`);
  if (*cast(void**)&glPixelMapusv_Z_Z is null) assert(0, `OpenGL function 'glPixelMapusv' not found!`);
  glPixelMapusv_Z_Z(map, mapsize, values);
}
alias glPixelMapx = glPixelMapx_Z_Z;
__gshared glPixelMapx_Z_Z = function void (GLenum map, GLint size, const(GLfixed)* values) { glPixelMapx_Z_Z_loader(map, size, values); };
private void glPixelMapx_Z_Z_loader (GLenum map, GLint size, const(GLfixed)* values) {
  *cast(void**)&glPixelMapx_Z_Z = glbindGetProcAddress(`glPixelMapx`);
  if (*cast(void**)&glPixelMapx_Z_Z is null) assert(0, `OpenGL function 'glPixelMapx' not found!`);
  glPixelMapx_Z_Z(map, size, values);
}
alias glPixelStoref = glPixelStoref_Z_Z;
__gshared glPixelStoref_Z_Z = function void (GLenum pname, GLfloat param) { glPixelStoref_Z_Z_loader(pname, param); };
private void glPixelStoref_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPixelStoref_Z_Z = glbindGetProcAddress(`glPixelStoref`);
  if (*cast(void**)&glPixelStoref_Z_Z is null) assert(0, `OpenGL function 'glPixelStoref' not found!`);
  glPixelStoref_Z_Z(pname, param);
}
alias glPixelStorei = glPixelStorei_Z_Z;
__gshared glPixelStorei_Z_Z = function void (GLenum pname, GLint param) { glPixelStorei_Z_Z_loader(pname, param); };
private void glPixelStorei_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glPixelStorei_Z_Z = glbindGetProcAddress(`glPixelStorei`);
  if (*cast(void**)&glPixelStorei_Z_Z is null) assert(0, `OpenGL function 'glPixelStorei' not found!`);
  glPixelStorei_Z_Z(pname, param);
}
alias glPixelStorex = glPixelStorex_Z_Z;
__gshared glPixelStorex_Z_Z = function void (GLenum pname, GLfixed param) { glPixelStorex_Z_Z_loader(pname, param); };
private void glPixelStorex_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glPixelStorex_Z_Z = glbindGetProcAddress(`glPixelStorex`);
  if (*cast(void**)&glPixelStorex_Z_Z is null) assert(0, `OpenGL function 'glPixelStorex' not found!`);
  glPixelStorex_Z_Z(pname, param);
}
alias glPixelTexGenParameterfSGIS = glPixelTexGenParameterfSGIS_Z_Z;
__gshared glPixelTexGenParameterfSGIS_Z_Z = function void (GLenum pname, GLfloat param) { glPixelTexGenParameterfSGIS_Z_Z_loader(pname, param); };
private void glPixelTexGenParameterfSGIS_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPixelTexGenParameterfSGIS_Z_Z = glbindGetProcAddress(`glPixelTexGenParameterfSGIS`);
  if (*cast(void**)&glPixelTexGenParameterfSGIS_Z_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameterfSGIS' not found!`);
  glPixelTexGenParameterfSGIS_Z_Z(pname, param);
}
alias glPixelTexGenParameterfvSGIS = glPixelTexGenParameterfvSGIS_Z_Z;
__gshared glPixelTexGenParameterfvSGIS_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glPixelTexGenParameterfvSGIS_Z_Z_loader(pname, params); };
private void glPixelTexGenParameterfvSGIS_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glPixelTexGenParameterfvSGIS_Z_Z = glbindGetProcAddress(`glPixelTexGenParameterfvSGIS`);
  if (*cast(void**)&glPixelTexGenParameterfvSGIS_Z_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameterfvSGIS' not found!`);
  glPixelTexGenParameterfvSGIS_Z_Z(pname, params);
}
alias glPixelTexGenParameteriSGIS = glPixelTexGenParameteriSGIS_Z_Z;
__gshared glPixelTexGenParameteriSGIS_Z_Z = function void (GLenum pname, GLint param) { glPixelTexGenParameteriSGIS_Z_Z_loader(pname, param); };
private void glPixelTexGenParameteriSGIS_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glPixelTexGenParameteriSGIS_Z_Z = glbindGetProcAddress(`glPixelTexGenParameteriSGIS`);
  if (*cast(void**)&glPixelTexGenParameteriSGIS_Z_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameteriSGIS' not found!`);
  glPixelTexGenParameteriSGIS_Z_Z(pname, param);
}
alias glPixelTexGenParameterivSGIS = glPixelTexGenParameterivSGIS_Z_Z;
__gshared glPixelTexGenParameterivSGIS_Z_Z = function void (GLenum pname, const(GLint)* params) { glPixelTexGenParameterivSGIS_Z_Z_loader(pname, params); };
private void glPixelTexGenParameterivSGIS_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glPixelTexGenParameterivSGIS_Z_Z = glbindGetProcAddress(`glPixelTexGenParameterivSGIS`);
  if (*cast(void**)&glPixelTexGenParameterivSGIS_Z_Z is null) assert(0, `OpenGL function 'glPixelTexGenParameterivSGIS' not found!`);
  glPixelTexGenParameterivSGIS_Z_Z(pname, params);
}
alias glPixelTexGenSGIX = glPixelTexGenSGIX_Z_Z;
__gshared glPixelTexGenSGIX_Z_Z = function void (GLenum mode) { glPixelTexGenSGIX_Z_Z_loader(mode); };
private void glPixelTexGenSGIX_Z_Z_loader (GLenum mode) {
  *cast(void**)&glPixelTexGenSGIX_Z_Z = glbindGetProcAddress(`glPixelTexGenSGIX`);
  if (*cast(void**)&glPixelTexGenSGIX_Z_Z is null) assert(0, `OpenGL function 'glPixelTexGenSGIX' not found!`);
  glPixelTexGenSGIX_Z_Z(mode);
}
alias glPixelTransferf = glPixelTransferf_Z_Z;
__gshared glPixelTransferf_Z_Z = function void (GLenum pname, GLfloat param) { glPixelTransferf_Z_Z_loader(pname, param); };
private void glPixelTransferf_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPixelTransferf_Z_Z = glbindGetProcAddress(`glPixelTransferf`);
  if (*cast(void**)&glPixelTransferf_Z_Z is null) assert(0, `OpenGL function 'glPixelTransferf' not found!`);
  glPixelTransferf_Z_Z(pname, param);
}
alias glPixelTransferi = glPixelTransferi_Z_Z;
__gshared glPixelTransferi_Z_Z = function void (GLenum pname, GLint param) { glPixelTransferi_Z_Z_loader(pname, param); };
private void glPixelTransferi_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glPixelTransferi_Z_Z = glbindGetProcAddress(`glPixelTransferi`);
  if (*cast(void**)&glPixelTransferi_Z_Z is null) assert(0, `OpenGL function 'glPixelTransferi' not found!`);
  glPixelTransferi_Z_Z(pname, param);
}
alias glPixelTransferxOES = glPixelTransferxOES_Z_Z;
__gshared glPixelTransferxOES_Z_Z = function void (GLenum pname, GLfixed param) { glPixelTransferxOES_Z_Z_loader(pname, param); };
private void glPixelTransferxOES_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glPixelTransferxOES_Z_Z = glbindGetProcAddress(`glPixelTransferxOES`);
  if (*cast(void**)&glPixelTransferxOES_Z_Z is null) assert(0, `OpenGL function 'glPixelTransferxOES' not found!`);
  glPixelTransferxOES_Z_Z(pname, param);
}
alias glPixelTransformParameterfEXT = glPixelTransformParameterfEXT_Z_Z;
__gshared glPixelTransformParameterfEXT_Z_Z = function void (GLenum target, GLenum pname, GLfloat param) { glPixelTransformParameterfEXT_Z_Z_loader(target, pname, param); };
private void glPixelTransformParameterfEXT_Z_Z_loader (GLenum target, GLenum pname, GLfloat param) {
  *cast(void**)&glPixelTransformParameterfEXT_Z_Z = glbindGetProcAddress(`glPixelTransformParameterfEXT`);
  if (*cast(void**)&glPixelTransformParameterfEXT_Z_Z is null) assert(0, `OpenGL function 'glPixelTransformParameterfEXT' not found!`);
  glPixelTransformParameterfEXT_Z_Z(target, pname, param);
}
alias glPixelTransformParameterfvEXT = glPixelTransformParameterfvEXT_Z_Z;
__gshared glPixelTransformParameterfvEXT_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glPixelTransformParameterfvEXT_Z_Z_loader(target, pname, params); };
private void glPixelTransformParameterfvEXT_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glPixelTransformParameterfvEXT_Z_Z = glbindGetProcAddress(`glPixelTransformParameterfvEXT`);
  if (*cast(void**)&glPixelTransformParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glPixelTransformParameterfvEXT' not found!`);
  glPixelTransformParameterfvEXT_Z_Z(target, pname, params);
}
alias glPixelTransformParameteriEXT = glPixelTransformParameteriEXT_Z_Z;
__gshared glPixelTransformParameteriEXT_Z_Z = function void (GLenum target, GLenum pname, GLint param) { glPixelTransformParameteriEXT_Z_Z_loader(target, pname, param); };
private void glPixelTransformParameteriEXT_Z_Z_loader (GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glPixelTransformParameteriEXT_Z_Z = glbindGetProcAddress(`glPixelTransformParameteriEXT`);
  if (*cast(void**)&glPixelTransformParameteriEXT_Z_Z is null) assert(0, `OpenGL function 'glPixelTransformParameteriEXT' not found!`);
  glPixelTransformParameteriEXT_Z_Z(target, pname, param);
}
alias glPixelTransformParameterivEXT = glPixelTransformParameterivEXT_Z_Z;
__gshared glPixelTransformParameterivEXT_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glPixelTransformParameterivEXT_Z_Z_loader(target, pname, params); };
private void glPixelTransformParameterivEXT_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glPixelTransformParameterivEXT_Z_Z = glbindGetProcAddress(`glPixelTransformParameterivEXT`);
  if (*cast(void**)&glPixelTransformParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glPixelTransformParameterivEXT' not found!`);
  glPixelTransformParameterivEXT_Z_Z(target, pname, params);
}
alias glPixelZoom = glPixelZoom_Z_Z;
__gshared glPixelZoom_Z_Z = function void (GLfloat xfactor, GLfloat yfactor) { glPixelZoom_Z_Z_loader(xfactor, yfactor); };
private void glPixelZoom_Z_Z_loader (GLfloat xfactor, GLfloat yfactor) {
  *cast(void**)&glPixelZoom_Z_Z = glbindGetProcAddress(`glPixelZoom`);
  if (*cast(void**)&glPixelZoom_Z_Z is null) assert(0, `OpenGL function 'glPixelZoom' not found!`);
  glPixelZoom_Z_Z(xfactor, yfactor);
}
alias glPixelZoomxOES = glPixelZoomxOES_Z_Z;
__gshared glPixelZoomxOES_Z_Z = function void (GLfixed xfactor, GLfixed yfactor) { glPixelZoomxOES_Z_Z_loader(xfactor, yfactor); };
private void glPixelZoomxOES_Z_Z_loader (GLfixed xfactor, GLfixed yfactor) {
  *cast(void**)&glPixelZoomxOES_Z_Z = glbindGetProcAddress(`glPixelZoomxOES`);
  if (*cast(void**)&glPixelZoomxOES_Z_Z is null) assert(0, `OpenGL function 'glPixelZoomxOES' not found!`);
  glPixelZoomxOES_Z_Z(xfactor, yfactor);
}
alias glPointAlongPathNV = glPointAlongPathNV_Z_Z;
__gshared glPointAlongPathNV_Z_Z = function GLboolean (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) { return glPointAlongPathNV_Z_Z_loader(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); };
private GLboolean glPointAlongPathNV_Z_Z_loader (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) {
  *cast(void**)&glPointAlongPathNV_Z_Z = glbindGetProcAddress(`glPointAlongPathNV`);
  if (*cast(void**)&glPointAlongPathNV_Z_Z is null) assert(0, `OpenGL function 'glPointAlongPathNV' not found!`);
  return glPointAlongPathNV_Z_Z(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}
alias glPointParameterf = glPointParameterf_Z_Z;
__gshared glPointParameterf_Z_Z = function void (GLenum pname, GLfloat param) { glPointParameterf_Z_Z_loader(pname, param); };
private void glPointParameterf_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPointParameterf_Z_Z = glbindGetProcAddress(`glPointParameterf`);
  if (*cast(void**)&glPointParameterf_Z_Z is null) assert(0, `OpenGL function 'glPointParameterf' not found!`);
  glPointParameterf_Z_Z(pname, param);
}
alias glPointParameterfARB = glPointParameterfARB_Z_Z;
__gshared glPointParameterfARB_Z_Z = function void (GLenum pname, GLfloat param) { glPointParameterfARB_Z_Z_loader(pname, param); };
private void glPointParameterfARB_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPointParameterfARB_Z_Z = glbindGetProcAddress(`glPointParameterfARB`);
  if (*cast(void**)&glPointParameterfARB_Z_Z is null) assert(0, `OpenGL function 'glPointParameterfARB' not found!`);
  glPointParameterfARB_Z_Z(pname, param);
}
alias glPointParameterfEXT = glPointParameterfEXT_Z_Z;
__gshared glPointParameterfEXT_Z_Z = function void (GLenum pname, GLfloat param) { glPointParameterfEXT_Z_Z_loader(pname, param); };
private void glPointParameterfEXT_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPointParameterfEXT_Z_Z = glbindGetProcAddress(`glPointParameterfEXT`);
  if (*cast(void**)&glPointParameterfEXT_Z_Z is null) assert(0, `OpenGL function 'glPointParameterfEXT' not found!`);
  glPointParameterfEXT_Z_Z(pname, param);
}
alias glPointParameterfSGIS = glPointParameterfSGIS_Z_Z;
__gshared glPointParameterfSGIS_Z_Z = function void (GLenum pname, GLfloat param) { glPointParameterfSGIS_Z_Z_loader(pname, param); };
private void glPointParameterfSGIS_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glPointParameterfSGIS_Z_Z = glbindGetProcAddress(`glPointParameterfSGIS`);
  if (*cast(void**)&glPointParameterfSGIS_Z_Z is null) assert(0, `OpenGL function 'glPointParameterfSGIS' not found!`);
  glPointParameterfSGIS_Z_Z(pname, param);
}
alias glPointParameterfv = glPointParameterfv_Z_Z;
__gshared glPointParameterfv_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glPointParameterfv_Z_Z_loader(pname, params); };
private void glPointParameterfv_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glPointParameterfv_Z_Z = glbindGetProcAddress(`glPointParameterfv`);
  if (*cast(void**)&glPointParameterfv_Z_Z is null) assert(0, `OpenGL function 'glPointParameterfv' not found!`);
  glPointParameterfv_Z_Z(pname, params);
}
alias glPointParameterfvARB = glPointParameterfvARB_Z_Z;
__gshared glPointParameterfvARB_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glPointParameterfvARB_Z_Z_loader(pname, params); };
private void glPointParameterfvARB_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glPointParameterfvARB_Z_Z = glbindGetProcAddress(`glPointParameterfvARB`);
  if (*cast(void**)&glPointParameterfvARB_Z_Z is null) assert(0, `OpenGL function 'glPointParameterfvARB' not found!`);
  glPointParameterfvARB_Z_Z(pname, params);
}
alias glPointParameterfvEXT = glPointParameterfvEXT_Z_Z;
__gshared glPointParameterfvEXT_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glPointParameterfvEXT_Z_Z_loader(pname, params); };
private void glPointParameterfvEXT_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glPointParameterfvEXT_Z_Z = glbindGetProcAddress(`glPointParameterfvEXT`);
  if (*cast(void**)&glPointParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glPointParameterfvEXT' not found!`);
  glPointParameterfvEXT_Z_Z(pname, params);
}
alias glPointParameterfvSGIS = glPointParameterfvSGIS_Z_Z;
__gshared glPointParameterfvSGIS_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glPointParameterfvSGIS_Z_Z_loader(pname, params); };
private void glPointParameterfvSGIS_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glPointParameterfvSGIS_Z_Z = glbindGetProcAddress(`glPointParameterfvSGIS`);
  if (*cast(void**)&glPointParameterfvSGIS_Z_Z is null) assert(0, `OpenGL function 'glPointParameterfvSGIS' not found!`);
  glPointParameterfvSGIS_Z_Z(pname, params);
}
alias glPointParameteri = glPointParameteri_Z_Z;
__gshared glPointParameteri_Z_Z = function void (GLenum pname, GLint param) { glPointParameteri_Z_Z_loader(pname, param); };
private void glPointParameteri_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glPointParameteri_Z_Z = glbindGetProcAddress(`glPointParameteri`);
  if (*cast(void**)&glPointParameteri_Z_Z is null) assert(0, `OpenGL function 'glPointParameteri' not found!`);
  glPointParameteri_Z_Z(pname, param);
}
alias glPointParameteriNV = glPointParameteriNV_Z_Z;
__gshared glPointParameteriNV_Z_Z = function void (GLenum pname, GLint param) { glPointParameteriNV_Z_Z_loader(pname, param); };
private void glPointParameteriNV_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glPointParameteriNV_Z_Z = glbindGetProcAddress(`glPointParameteriNV`);
  if (*cast(void**)&glPointParameteriNV_Z_Z is null) assert(0, `OpenGL function 'glPointParameteriNV' not found!`);
  glPointParameteriNV_Z_Z(pname, param);
}
alias glPointParameteriv = glPointParameteriv_Z_Z;
__gshared glPointParameteriv_Z_Z = function void (GLenum pname, const(GLint)* params) { glPointParameteriv_Z_Z_loader(pname, params); };
private void glPointParameteriv_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glPointParameteriv_Z_Z = glbindGetProcAddress(`glPointParameteriv`);
  if (*cast(void**)&glPointParameteriv_Z_Z is null) assert(0, `OpenGL function 'glPointParameteriv' not found!`);
  glPointParameteriv_Z_Z(pname, params);
}
alias glPointParameterivNV = glPointParameterivNV_Z_Z;
__gshared glPointParameterivNV_Z_Z = function void (GLenum pname, const(GLint)* params) { glPointParameterivNV_Z_Z_loader(pname, params); };
private void glPointParameterivNV_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glPointParameterivNV_Z_Z = glbindGetProcAddress(`glPointParameterivNV`);
  if (*cast(void**)&glPointParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glPointParameterivNV' not found!`);
  glPointParameterivNV_Z_Z(pname, params);
}
alias glPointParameterx = glPointParameterx_Z_Z;
__gshared glPointParameterx_Z_Z = function void (GLenum pname, GLfixed param) { glPointParameterx_Z_Z_loader(pname, param); };
private void glPointParameterx_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glPointParameterx_Z_Z = glbindGetProcAddress(`glPointParameterx`);
  if (*cast(void**)&glPointParameterx_Z_Z is null) assert(0, `OpenGL function 'glPointParameterx' not found!`);
  glPointParameterx_Z_Z(pname, param);
}
alias glPointParameterxOES = glPointParameterxOES_Z_Z;
__gshared glPointParameterxOES_Z_Z = function void (GLenum pname, GLfixed param) { glPointParameterxOES_Z_Z_loader(pname, param); };
private void glPointParameterxOES_Z_Z_loader (GLenum pname, GLfixed param) {
  *cast(void**)&glPointParameterxOES_Z_Z = glbindGetProcAddress(`glPointParameterxOES`);
  if (*cast(void**)&glPointParameterxOES_Z_Z is null) assert(0, `OpenGL function 'glPointParameterxOES' not found!`);
  glPointParameterxOES_Z_Z(pname, param);
}
alias glPointParameterxv = glPointParameterxv_Z_Z;
__gshared glPointParameterxv_Z_Z = function void (GLenum pname, const(GLfixed)* params) { glPointParameterxv_Z_Z_loader(pname, params); };
private void glPointParameterxv_Z_Z_loader (GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glPointParameterxv_Z_Z = glbindGetProcAddress(`glPointParameterxv`);
  if (*cast(void**)&glPointParameterxv_Z_Z is null) assert(0, `OpenGL function 'glPointParameterxv' not found!`);
  glPointParameterxv_Z_Z(pname, params);
}
alias glPointParameterxvOES = glPointParameterxvOES_Z_Z;
__gshared glPointParameterxvOES_Z_Z = function void (GLenum pname, const(GLfixed)* params) { glPointParameterxvOES_Z_Z_loader(pname, params); };
private void glPointParameterxvOES_Z_Z_loader (GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glPointParameterxvOES_Z_Z = glbindGetProcAddress(`glPointParameterxvOES`);
  if (*cast(void**)&glPointParameterxvOES_Z_Z is null) assert(0, `OpenGL function 'glPointParameterxvOES' not found!`);
  glPointParameterxvOES_Z_Z(pname, params);
}
alias glPointSize = glPointSize_Z_Z;
__gshared glPointSize_Z_Z = function void (GLfloat size) { glPointSize_Z_Z_loader(size); };
private void glPointSize_Z_Z_loader (GLfloat size) {
  *cast(void**)&glPointSize_Z_Z = glbindGetProcAddress(`glPointSize`);
  if (*cast(void**)&glPointSize_Z_Z is null) assert(0, `OpenGL function 'glPointSize' not found!`);
  glPointSize_Z_Z(size);
}
alias glPointSizePointerOES = glPointSizePointerOES_Z_Z;
__gshared glPointSizePointerOES_Z_Z = function void (GLenum type, GLsizei stride, const(void)* pointer) { glPointSizePointerOES_Z_Z_loader(type, stride, pointer); };
private void glPointSizePointerOES_Z_Z_loader (GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glPointSizePointerOES_Z_Z = glbindGetProcAddress(`glPointSizePointerOES`);
  if (*cast(void**)&glPointSizePointerOES_Z_Z is null) assert(0, `OpenGL function 'glPointSizePointerOES' not found!`);
  glPointSizePointerOES_Z_Z(type, stride, pointer);
}
alias glPointSizex = glPointSizex_Z_Z;
__gshared glPointSizex_Z_Z = function void (GLfixed size) { glPointSizex_Z_Z_loader(size); };
private void glPointSizex_Z_Z_loader (GLfixed size) {
  *cast(void**)&glPointSizex_Z_Z = glbindGetProcAddress(`glPointSizex`);
  if (*cast(void**)&glPointSizex_Z_Z is null) assert(0, `OpenGL function 'glPointSizex' not found!`);
  glPointSizex_Z_Z(size);
}
alias glPointSizexOES = glPointSizexOES_Z_Z;
__gshared glPointSizexOES_Z_Z = function void (GLfixed size) { glPointSizexOES_Z_Z_loader(size); };
private void glPointSizexOES_Z_Z_loader (GLfixed size) {
  *cast(void**)&glPointSizexOES_Z_Z = glbindGetProcAddress(`glPointSizexOES`);
  if (*cast(void**)&glPointSizexOES_Z_Z is null) assert(0, `OpenGL function 'glPointSizexOES' not found!`);
  glPointSizexOES_Z_Z(size);
}
alias glPollAsyncSGIX = glPollAsyncSGIX_Z_Z;
__gshared glPollAsyncSGIX_Z_Z = function GLint (GLuint *markerp) { return glPollAsyncSGIX_Z_Z_loader(markerp); };
private GLint glPollAsyncSGIX_Z_Z_loader (GLuint *markerp) {
  *cast(void**)&glPollAsyncSGIX_Z_Z = glbindGetProcAddress(`glPollAsyncSGIX`);
  if (*cast(void**)&glPollAsyncSGIX_Z_Z is null) assert(0, `OpenGL function 'glPollAsyncSGIX' not found!`);
  return glPollAsyncSGIX_Z_Z(markerp);
}
alias glPollInstrumentsSGIX = glPollInstrumentsSGIX_Z_Z;
__gshared glPollInstrumentsSGIX_Z_Z = function GLint (GLint *marker_p) { return glPollInstrumentsSGIX_Z_Z_loader(marker_p); };
private GLint glPollInstrumentsSGIX_Z_Z_loader (GLint *marker_p) {
  *cast(void**)&glPollInstrumentsSGIX_Z_Z = glbindGetProcAddress(`glPollInstrumentsSGIX`);
  if (*cast(void**)&glPollInstrumentsSGIX_Z_Z is null) assert(0, `OpenGL function 'glPollInstrumentsSGIX' not found!`);
  return glPollInstrumentsSGIX_Z_Z(marker_p);
}
alias glPolygonMode = glPolygonMode_Z_Z;
__gshared glPolygonMode_Z_Z = function void (GLenum face, GLenum mode) { glPolygonMode_Z_Z_loader(face, mode); };
private void glPolygonMode_Z_Z_loader (GLenum face, GLenum mode) {
  *cast(void**)&glPolygonMode_Z_Z = glbindGetProcAddress(`glPolygonMode`);
  if (*cast(void**)&glPolygonMode_Z_Z is null) assert(0, `OpenGL function 'glPolygonMode' not found!`);
  glPolygonMode_Z_Z(face, mode);
}
alias glPolygonModeNV = glPolygonModeNV_Z_Z;
__gshared glPolygonModeNV_Z_Z = function void (GLenum face, GLenum mode) { glPolygonModeNV_Z_Z_loader(face, mode); };
private void glPolygonModeNV_Z_Z_loader (GLenum face, GLenum mode) {
  *cast(void**)&glPolygonModeNV_Z_Z = glbindGetProcAddress(`glPolygonModeNV`);
  if (*cast(void**)&glPolygonModeNV_Z_Z is null) assert(0, `OpenGL function 'glPolygonModeNV' not found!`);
  glPolygonModeNV_Z_Z(face, mode);
}
alias glPolygonOffset = glPolygonOffset_Z_Z;
__gshared glPolygonOffset_Z_Z = function void (GLfloat factor, GLfloat units) { glPolygonOffset_Z_Z_loader(factor, units); };
private void glPolygonOffset_Z_Z_loader (GLfloat factor, GLfloat units) {
  *cast(void**)&glPolygonOffset_Z_Z = glbindGetProcAddress(`glPolygonOffset`);
  if (*cast(void**)&glPolygonOffset_Z_Z is null) assert(0, `OpenGL function 'glPolygonOffset' not found!`);
  glPolygonOffset_Z_Z(factor, units);
}
alias glPolygonOffsetClampEXT = glPolygonOffsetClampEXT_Z_Z;
__gshared glPolygonOffsetClampEXT_Z_Z = function void (GLfloat factor, GLfloat units, GLfloat clamp) { glPolygonOffsetClampEXT_Z_Z_loader(factor, units, clamp); };
private void glPolygonOffsetClampEXT_Z_Z_loader (GLfloat factor, GLfloat units, GLfloat clamp) {
  *cast(void**)&glPolygonOffsetClampEXT_Z_Z = glbindGetProcAddress(`glPolygonOffsetClampEXT`);
  if (*cast(void**)&glPolygonOffsetClampEXT_Z_Z is null) assert(0, `OpenGL function 'glPolygonOffsetClampEXT' not found!`);
  glPolygonOffsetClampEXT_Z_Z(factor, units, clamp);
}
alias glPolygonOffsetEXT = glPolygonOffsetEXT_Z_Z;
__gshared glPolygonOffsetEXT_Z_Z = function void (GLfloat factor, GLfloat bias) { glPolygonOffsetEXT_Z_Z_loader(factor, bias); };
private void glPolygonOffsetEXT_Z_Z_loader (GLfloat factor, GLfloat bias) {
  *cast(void**)&glPolygonOffsetEXT_Z_Z = glbindGetProcAddress(`glPolygonOffsetEXT`);
  if (*cast(void**)&glPolygonOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glPolygonOffsetEXT' not found!`);
  glPolygonOffsetEXT_Z_Z(factor, bias);
}
alias glPolygonOffsetx = glPolygonOffsetx_Z_Z;
__gshared glPolygonOffsetx_Z_Z = function void (GLfixed factor, GLfixed units) { glPolygonOffsetx_Z_Z_loader(factor, units); };
private void glPolygonOffsetx_Z_Z_loader (GLfixed factor, GLfixed units) {
  *cast(void**)&glPolygonOffsetx_Z_Z = glbindGetProcAddress(`glPolygonOffsetx`);
  if (*cast(void**)&glPolygonOffsetx_Z_Z is null) assert(0, `OpenGL function 'glPolygonOffsetx' not found!`);
  glPolygonOffsetx_Z_Z(factor, units);
}
alias glPolygonOffsetxOES = glPolygonOffsetxOES_Z_Z;
__gshared glPolygonOffsetxOES_Z_Z = function void (GLfixed factor, GLfixed units) { glPolygonOffsetxOES_Z_Z_loader(factor, units); };
private void glPolygonOffsetxOES_Z_Z_loader (GLfixed factor, GLfixed units) {
  *cast(void**)&glPolygonOffsetxOES_Z_Z = glbindGetProcAddress(`glPolygonOffsetxOES`);
  if (*cast(void**)&glPolygonOffsetxOES_Z_Z is null) assert(0, `OpenGL function 'glPolygonOffsetxOES' not found!`);
  glPolygonOffsetxOES_Z_Z(factor, units);
}
alias glPolygonStipple = glPolygonStipple_Z_Z;
__gshared glPolygonStipple_Z_Z = function void (const(GLubyte)* mask) { glPolygonStipple_Z_Z_loader(mask); };
private void glPolygonStipple_Z_Z_loader (const(GLubyte)* mask) {
  *cast(void**)&glPolygonStipple_Z_Z = glbindGetProcAddress(`glPolygonStipple`);
  if (*cast(void**)&glPolygonStipple_Z_Z is null) assert(0, `OpenGL function 'glPolygonStipple' not found!`);
  glPolygonStipple_Z_Z(mask);
}
alias glPopAttrib = glPopAttrib_Z_Z;
__gshared glPopAttrib_Z_Z = function void () { glPopAttrib_Z_Z_loader(); };
private void glPopAttrib_Z_Z_loader () {
  *cast(void**)&glPopAttrib_Z_Z = glbindGetProcAddress(`glPopAttrib`);
  if (*cast(void**)&glPopAttrib_Z_Z is null) assert(0, `OpenGL function 'glPopAttrib' not found!`);
  glPopAttrib_Z_Z();
}
alias glPopClientAttrib = glPopClientAttrib_Z_Z;
__gshared glPopClientAttrib_Z_Z = function void () { glPopClientAttrib_Z_Z_loader(); };
private void glPopClientAttrib_Z_Z_loader () {
  *cast(void**)&glPopClientAttrib_Z_Z = glbindGetProcAddress(`glPopClientAttrib`);
  if (*cast(void**)&glPopClientAttrib_Z_Z is null) assert(0, `OpenGL function 'glPopClientAttrib' not found!`);
  glPopClientAttrib_Z_Z();
}
alias glPopDebugGroup = glPopDebugGroup_Z_Z;
__gshared glPopDebugGroup_Z_Z = function void () { glPopDebugGroup_Z_Z_loader(); };
private void glPopDebugGroup_Z_Z_loader () {
  *cast(void**)&glPopDebugGroup_Z_Z = glbindGetProcAddress(`glPopDebugGroup`);
  if (*cast(void**)&glPopDebugGroup_Z_Z is null) assert(0, `OpenGL function 'glPopDebugGroup' not found!`);
  glPopDebugGroup_Z_Z();
}
alias glPopDebugGroupKHR = glPopDebugGroupKHR_Z_Z;
__gshared glPopDebugGroupKHR_Z_Z = function void () { glPopDebugGroupKHR_Z_Z_loader(); };
private void glPopDebugGroupKHR_Z_Z_loader () {
  *cast(void**)&glPopDebugGroupKHR_Z_Z = glbindGetProcAddress(`glPopDebugGroupKHR`);
  if (*cast(void**)&glPopDebugGroupKHR_Z_Z is null) assert(0, `OpenGL function 'glPopDebugGroupKHR' not found!`);
  glPopDebugGroupKHR_Z_Z();
}
alias glPopGroupMarkerEXT = glPopGroupMarkerEXT_Z_Z;
__gshared glPopGroupMarkerEXT_Z_Z = function void () { glPopGroupMarkerEXT_Z_Z_loader(); };
private void glPopGroupMarkerEXT_Z_Z_loader () {
  *cast(void**)&glPopGroupMarkerEXT_Z_Z = glbindGetProcAddress(`glPopGroupMarkerEXT`);
  if (*cast(void**)&glPopGroupMarkerEXT_Z_Z is null) assert(0, `OpenGL function 'glPopGroupMarkerEXT' not found!`);
  glPopGroupMarkerEXT_Z_Z();
}
alias glPopMatrix = glPopMatrix_Z_Z;
__gshared glPopMatrix_Z_Z = function void () { glPopMatrix_Z_Z_loader(); };
private void glPopMatrix_Z_Z_loader () {
  *cast(void**)&glPopMatrix_Z_Z = glbindGetProcAddress(`glPopMatrix`);
  if (*cast(void**)&glPopMatrix_Z_Z is null) assert(0, `OpenGL function 'glPopMatrix' not found!`);
  glPopMatrix_Z_Z();
}
alias glPopName = glPopName_Z_Z;
__gshared glPopName_Z_Z = function void () { glPopName_Z_Z_loader(); };
private void glPopName_Z_Z_loader () {
  *cast(void**)&glPopName_Z_Z = glbindGetProcAddress(`glPopName`);
  if (*cast(void**)&glPopName_Z_Z is null) assert(0, `OpenGL function 'glPopName' not found!`);
  glPopName_Z_Z();
}
alias glPresentFrameDualFillNV = glPresentFrameDualFillNV_Z_Z;
__gshared glPresentFrameDualFillNV_Z_Z = function void (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { glPresentFrameDualFillNV_Z_Z_loader(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); };
private void glPresentFrameDualFillNV_Z_Z_loader (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {
  *cast(void**)&glPresentFrameDualFillNV_Z_Z = glbindGetProcAddress(`glPresentFrameDualFillNV`);
  if (*cast(void**)&glPresentFrameDualFillNV_Z_Z is null) assert(0, `OpenGL function 'glPresentFrameDualFillNV' not found!`);
  glPresentFrameDualFillNV_Z_Z(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}
alias glPresentFrameKeyedNV = glPresentFrameKeyedNV_Z_Z;
__gshared glPresentFrameKeyedNV_Z_Z = function void (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { glPresentFrameKeyedNV_Z_Z_loader(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); };
private void glPresentFrameKeyedNV_Z_Z_loader (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {
  *cast(void**)&glPresentFrameKeyedNV_Z_Z = glbindGetProcAddress(`glPresentFrameKeyedNV`);
  if (*cast(void**)&glPresentFrameKeyedNV_Z_Z is null) assert(0, `OpenGL function 'glPresentFrameKeyedNV' not found!`);
  glPresentFrameKeyedNV_Z_Z(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}
alias glPrimitiveBoundingBox = glPrimitiveBoundingBox_Z_Z;
__gshared glPrimitiveBoundingBox_Z_Z = function void (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { glPrimitiveBoundingBox_Z_Z_loader(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); };
private void glPrimitiveBoundingBox_Z_Z_loader (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  *cast(void**)&glPrimitiveBoundingBox_Z_Z = glbindGetProcAddress(`glPrimitiveBoundingBox`);
  if (*cast(void**)&glPrimitiveBoundingBox_Z_Z is null) assert(0, `OpenGL function 'glPrimitiveBoundingBox' not found!`);
  glPrimitiveBoundingBox_Z_Z(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
alias glPrimitiveBoundingBoxARB = glPrimitiveBoundingBoxARB_Z_Z;
__gshared glPrimitiveBoundingBoxARB_Z_Z = function void (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { glPrimitiveBoundingBoxARB_Z_Z_loader(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); };
private void glPrimitiveBoundingBoxARB_Z_Z_loader (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  *cast(void**)&glPrimitiveBoundingBoxARB_Z_Z = glbindGetProcAddress(`glPrimitiveBoundingBoxARB`);
  if (*cast(void**)&glPrimitiveBoundingBoxARB_Z_Z is null) assert(0, `OpenGL function 'glPrimitiveBoundingBoxARB' not found!`);
  glPrimitiveBoundingBoxARB_Z_Z(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
alias glPrimitiveBoundingBoxEXT = glPrimitiveBoundingBoxEXT_Z_Z;
__gshared glPrimitiveBoundingBoxEXT_Z_Z = function void (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { glPrimitiveBoundingBoxEXT_Z_Z_loader(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); };
private void glPrimitiveBoundingBoxEXT_Z_Z_loader (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  *cast(void**)&glPrimitiveBoundingBoxEXT_Z_Z = glbindGetProcAddress(`glPrimitiveBoundingBoxEXT`);
  if (*cast(void**)&glPrimitiveBoundingBoxEXT_Z_Z is null) assert(0, `OpenGL function 'glPrimitiveBoundingBoxEXT' not found!`);
  glPrimitiveBoundingBoxEXT_Z_Z(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
alias glPrimitiveBoundingBoxOES = glPrimitiveBoundingBoxOES_Z_Z;
__gshared glPrimitiveBoundingBoxOES_Z_Z = function void (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { glPrimitiveBoundingBoxOES_Z_Z_loader(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); };
private void glPrimitiveBoundingBoxOES_Z_Z_loader (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  *cast(void**)&glPrimitiveBoundingBoxOES_Z_Z = glbindGetProcAddress(`glPrimitiveBoundingBoxOES`);
  if (*cast(void**)&glPrimitiveBoundingBoxOES_Z_Z is null) assert(0, `OpenGL function 'glPrimitiveBoundingBoxOES' not found!`);
  glPrimitiveBoundingBoxOES_Z_Z(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
alias glPrimitiveRestartIndex = glPrimitiveRestartIndex_Z_Z;
__gshared glPrimitiveRestartIndex_Z_Z = function void (GLuint index) { glPrimitiveRestartIndex_Z_Z_loader(index); };
private void glPrimitiveRestartIndex_Z_Z_loader (GLuint index) {
  *cast(void**)&glPrimitiveRestartIndex_Z_Z = glbindGetProcAddress(`glPrimitiveRestartIndex`);
  if (*cast(void**)&glPrimitiveRestartIndex_Z_Z is null) assert(0, `OpenGL function 'glPrimitiveRestartIndex' not found!`);
  glPrimitiveRestartIndex_Z_Z(index);
}
alias glPrimitiveRestartIndexNV = glPrimitiveRestartIndexNV_Z_Z;
__gshared glPrimitiveRestartIndexNV_Z_Z = function void (GLuint index) { glPrimitiveRestartIndexNV_Z_Z_loader(index); };
private void glPrimitiveRestartIndexNV_Z_Z_loader (GLuint index) {
  *cast(void**)&glPrimitiveRestartIndexNV_Z_Z = glbindGetProcAddress(`glPrimitiveRestartIndexNV`);
  if (*cast(void**)&glPrimitiveRestartIndexNV_Z_Z is null) assert(0, `OpenGL function 'glPrimitiveRestartIndexNV' not found!`);
  glPrimitiveRestartIndexNV_Z_Z(index);
}
alias glPrimitiveRestartNV = glPrimitiveRestartNV_Z_Z;
__gshared glPrimitiveRestartNV_Z_Z = function void () { glPrimitiveRestartNV_Z_Z_loader(); };
private void glPrimitiveRestartNV_Z_Z_loader () {
  *cast(void**)&glPrimitiveRestartNV_Z_Z = glbindGetProcAddress(`glPrimitiveRestartNV`);
  if (*cast(void**)&glPrimitiveRestartNV_Z_Z is null) assert(0, `OpenGL function 'glPrimitiveRestartNV' not found!`);
  glPrimitiveRestartNV_Z_Z();
}
alias glPrioritizeTextures = glPrioritizeTextures_Z_Z;
__gshared glPrioritizeTextures_Z_Z = function void (GLsizei n, const(GLuint)* textures, const(GLfloat)* priorities) { glPrioritizeTextures_Z_Z_loader(n, textures, priorities); };
private void glPrioritizeTextures_Z_Z_loader (GLsizei n, const(GLuint)* textures, const(GLfloat)* priorities) {
  *cast(void**)&glPrioritizeTextures_Z_Z = glbindGetProcAddress(`glPrioritizeTextures`);
  if (*cast(void**)&glPrioritizeTextures_Z_Z is null) assert(0, `OpenGL function 'glPrioritizeTextures' not found!`);
  glPrioritizeTextures_Z_Z(n, textures, priorities);
}
alias glPrioritizeTexturesEXT = glPrioritizeTexturesEXT_Z_Z;
__gshared glPrioritizeTexturesEXT_Z_Z = function void (GLsizei n, const(GLuint)* textures, const(GLclampf)* priorities) { glPrioritizeTexturesEXT_Z_Z_loader(n, textures, priorities); };
private void glPrioritizeTexturesEXT_Z_Z_loader (GLsizei n, const(GLuint)* textures, const(GLclampf)* priorities) {
  *cast(void**)&glPrioritizeTexturesEXT_Z_Z = glbindGetProcAddress(`glPrioritizeTexturesEXT`);
  if (*cast(void**)&glPrioritizeTexturesEXT_Z_Z is null) assert(0, `OpenGL function 'glPrioritizeTexturesEXT' not found!`);
  glPrioritizeTexturesEXT_Z_Z(n, textures, priorities);
}
alias glPrioritizeTexturesxOES = glPrioritizeTexturesxOES_Z_Z;
__gshared glPrioritizeTexturesxOES_Z_Z = function void (GLsizei n, const(GLuint)* textures, const(GLfixed)* priorities) { glPrioritizeTexturesxOES_Z_Z_loader(n, textures, priorities); };
private void glPrioritizeTexturesxOES_Z_Z_loader (GLsizei n, const(GLuint)* textures, const(GLfixed)* priorities) {
  *cast(void**)&glPrioritizeTexturesxOES_Z_Z = glbindGetProcAddress(`glPrioritizeTexturesxOES`);
  if (*cast(void**)&glPrioritizeTexturesxOES_Z_Z is null) assert(0, `OpenGL function 'glPrioritizeTexturesxOES' not found!`);
  glPrioritizeTexturesxOES_Z_Z(n, textures, priorities);
}
alias glProgramBinary = glProgramBinary_Z_Z;
__gshared glProgramBinary_Z_Z = function void (GLuint program, GLenum binaryFormat, const(void)* binary, GLsizei length) { glProgramBinary_Z_Z_loader(program, binaryFormat, binary, length); };
private void glProgramBinary_Z_Z_loader (GLuint program, GLenum binaryFormat, const(void)* binary, GLsizei length) {
  *cast(void**)&glProgramBinary_Z_Z = glbindGetProcAddress(`glProgramBinary`);
  if (*cast(void**)&glProgramBinary_Z_Z is null) assert(0, `OpenGL function 'glProgramBinary' not found!`);
  glProgramBinary_Z_Z(program, binaryFormat, binary, length);
}
alias glProgramBinaryOES = glProgramBinaryOES_Z_Z;
__gshared glProgramBinaryOES_Z_Z = function void (GLuint program, GLenum binaryFormat, const(void)* binary, GLint length) { glProgramBinaryOES_Z_Z_loader(program, binaryFormat, binary, length); };
private void glProgramBinaryOES_Z_Z_loader (GLuint program, GLenum binaryFormat, const(void)* binary, GLint length) {
  *cast(void**)&glProgramBinaryOES_Z_Z = glbindGetProcAddress(`glProgramBinaryOES`);
  if (*cast(void**)&glProgramBinaryOES_Z_Z is null) assert(0, `OpenGL function 'glProgramBinaryOES' not found!`);
  glProgramBinaryOES_Z_Z(program, binaryFormat, binary, length);
}
alias glProgramBufferParametersIivNV = glProgramBufferParametersIivNV_Z_Z;
__gshared glProgramBufferParametersIivNV_Z_Z = function void (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const(GLint)* params) { glProgramBufferParametersIivNV_Z_Z_loader(target, bindingIndex, wordIndex, count, params); };
private void glProgramBufferParametersIivNV_Z_Z_loader (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const(GLint)* params) {
  *cast(void**)&glProgramBufferParametersIivNV_Z_Z = glbindGetProcAddress(`glProgramBufferParametersIivNV`);
  if (*cast(void**)&glProgramBufferParametersIivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramBufferParametersIivNV' not found!`);
  glProgramBufferParametersIivNV_Z_Z(target, bindingIndex, wordIndex, count, params);
}
alias glProgramBufferParametersIuivNV = glProgramBufferParametersIuivNV_Z_Z;
__gshared glProgramBufferParametersIuivNV_Z_Z = function void (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const(GLuint)* params) { glProgramBufferParametersIuivNV_Z_Z_loader(target, bindingIndex, wordIndex, count, params); };
private void glProgramBufferParametersIuivNV_Z_Z_loader (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const(GLuint)* params) {
  *cast(void**)&glProgramBufferParametersIuivNV_Z_Z = glbindGetProcAddress(`glProgramBufferParametersIuivNV`);
  if (*cast(void**)&glProgramBufferParametersIuivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramBufferParametersIuivNV' not found!`);
  glProgramBufferParametersIuivNV_Z_Z(target, bindingIndex, wordIndex, count, params);
}
alias glProgramBufferParametersfvNV = glProgramBufferParametersfvNV_Z_Z;
__gshared glProgramBufferParametersfvNV_Z_Z = function void (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const(GLfloat)* params) { glProgramBufferParametersfvNV_Z_Z_loader(target, bindingIndex, wordIndex, count, params); };
private void glProgramBufferParametersfvNV_Z_Z_loader (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const(GLfloat)* params) {
  *cast(void**)&glProgramBufferParametersfvNV_Z_Z = glbindGetProcAddress(`glProgramBufferParametersfvNV`);
  if (*cast(void**)&glProgramBufferParametersfvNV_Z_Z is null) assert(0, `OpenGL function 'glProgramBufferParametersfvNV' not found!`);
  glProgramBufferParametersfvNV_Z_Z(target, bindingIndex, wordIndex, count, params);
}
alias glProgramEnvParameter4dARB = glProgramEnvParameter4dARB_Z_Z;
__gshared glProgramEnvParameter4dARB_Z_Z = function void (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glProgramEnvParameter4dARB_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramEnvParameter4dARB_Z_Z_loader (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glProgramEnvParameter4dARB_Z_Z = glbindGetProcAddress(`glProgramEnvParameter4dARB`);
  if (*cast(void**)&glProgramEnvParameter4dARB_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4dARB' not found!`);
  glProgramEnvParameter4dARB_Z_Z(target, index, x, y, z, w);
}
alias glProgramEnvParameter4dvARB = glProgramEnvParameter4dvARB_Z_Z;
__gshared glProgramEnvParameter4dvARB_Z_Z = function void (GLenum target, GLuint index, const(GLdouble)* params) { glProgramEnvParameter4dvARB_Z_Z_loader(target, index, params); };
private void glProgramEnvParameter4dvARB_Z_Z_loader (GLenum target, GLuint index, const(GLdouble)* params) {
  *cast(void**)&glProgramEnvParameter4dvARB_Z_Z = glbindGetProcAddress(`glProgramEnvParameter4dvARB`);
  if (*cast(void**)&glProgramEnvParameter4dvARB_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4dvARB' not found!`);
  glProgramEnvParameter4dvARB_Z_Z(target, index, params);
}
alias glProgramEnvParameter4fARB = glProgramEnvParameter4fARB_Z_Z;
__gshared glProgramEnvParameter4fARB_Z_Z = function void (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glProgramEnvParameter4fARB_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramEnvParameter4fARB_Z_Z_loader (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glProgramEnvParameter4fARB_Z_Z = glbindGetProcAddress(`glProgramEnvParameter4fARB`);
  if (*cast(void**)&glProgramEnvParameter4fARB_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4fARB' not found!`);
  glProgramEnvParameter4fARB_Z_Z(target, index, x, y, z, w);
}
alias glProgramEnvParameter4fvARB = glProgramEnvParameter4fvARB_Z_Z;
__gshared glProgramEnvParameter4fvARB_Z_Z = function void (GLenum target, GLuint index, const(GLfloat)* params) { glProgramEnvParameter4fvARB_Z_Z_loader(target, index, params); };
private void glProgramEnvParameter4fvARB_Z_Z_loader (GLenum target, GLuint index, const(GLfloat)* params) {
  *cast(void**)&glProgramEnvParameter4fvARB_Z_Z = glbindGetProcAddress(`glProgramEnvParameter4fvARB`);
  if (*cast(void**)&glProgramEnvParameter4fvARB_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameter4fvARB' not found!`);
  glProgramEnvParameter4fvARB_Z_Z(target, index, params);
}
alias glProgramEnvParameterI4iNV = glProgramEnvParameterI4iNV_Z_Z;
__gshared glProgramEnvParameterI4iNV_Z_Z = function void (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { glProgramEnvParameterI4iNV_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramEnvParameterI4iNV_Z_Z_loader (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glProgramEnvParameterI4iNV_Z_Z = glbindGetProcAddress(`glProgramEnvParameterI4iNV`);
  if (*cast(void**)&glProgramEnvParameterI4iNV_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4iNV' not found!`);
  glProgramEnvParameterI4iNV_Z_Z(target, index, x, y, z, w);
}
alias glProgramEnvParameterI4ivNV = glProgramEnvParameterI4ivNV_Z_Z;
__gshared glProgramEnvParameterI4ivNV_Z_Z = function void (GLenum target, GLuint index, const(GLint)* params) { glProgramEnvParameterI4ivNV_Z_Z_loader(target, index, params); };
private void glProgramEnvParameterI4ivNV_Z_Z_loader (GLenum target, GLuint index, const(GLint)* params) {
  *cast(void**)&glProgramEnvParameterI4ivNV_Z_Z = glbindGetProcAddress(`glProgramEnvParameterI4ivNV`);
  if (*cast(void**)&glProgramEnvParameterI4ivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4ivNV' not found!`);
  glProgramEnvParameterI4ivNV_Z_Z(target, index, params);
}
alias glProgramEnvParameterI4uiNV = glProgramEnvParameterI4uiNV_Z_Z;
__gshared glProgramEnvParameterI4uiNV_Z_Z = function void (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { glProgramEnvParameterI4uiNV_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramEnvParameterI4uiNV_Z_Z_loader (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  *cast(void**)&glProgramEnvParameterI4uiNV_Z_Z = glbindGetProcAddress(`glProgramEnvParameterI4uiNV`);
  if (*cast(void**)&glProgramEnvParameterI4uiNV_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uiNV' not found!`);
  glProgramEnvParameterI4uiNV_Z_Z(target, index, x, y, z, w);
}
alias glProgramEnvParameterI4uivNV = glProgramEnvParameterI4uivNV_Z_Z;
__gshared glProgramEnvParameterI4uivNV_Z_Z = function void (GLenum target, GLuint index, const(GLuint)* params) { glProgramEnvParameterI4uivNV_Z_Z_loader(target, index, params); };
private void glProgramEnvParameterI4uivNV_Z_Z_loader (GLenum target, GLuint index, const(GLuint)* params) {
  *cast(void**)&glProgramEnvParameterI4uivNV_Z_Z = glbindGetProcAddress(`glProgramEnvParameterI4uivNV`);
  if (*cast(void**)&glProgramEnvParameterI4uivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uivNV' not found!`);
  glProgramEnvParameterI4uivNV_Z_Z(target, index, params);
}
alias glProgramEnvParameters4fvEXT = glProgramEnvParameters4fvEXT_Z_Z;
__gshared glProgramEnvParameters4fvEXT_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLfloat)* params) { glProgramEnvParameters4fvEXT_Z_Z_loader(target, index, count, params); };
private void glProgramEnvParameters4fvEXT_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLfloat)* params) {
  *cast(void**)&glProgramEnvParameters4fvEXT_Z_Z = glbindGetProcAddress(`glProgramEnvParameters4fvEXT`);
  if (*cast(void**)&glProgramEnvParameters4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParameters4fvEXT' not found!`);
  glProgramEnvParameters4fvEXT_Z_Z(target, index, count, params);
}
alias glProgramEnvParametersI4ivNV = glProgramEnvParametersI4ivNV_Z_Z;
__gshared glProgramEnvParametersI4ivNV_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLint)* params) { glProgramEnvParametersI4ivNV_Z_Z_loader(target, index, count, params); };
private void glProgramEnvParametersI4ivNV_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLint)* params) {
  *cast(void**)&glProgramEnvParametersI4ivNV_Z_Z = glbindGetProcAddress(`glProgramEnvParametersI4ivNV`);
  if (*cast(void**)&glProgramEnvParametersI4ivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParametersI4ivNV' not found!`);
  glProgramEnvParametersI4ivNV_Z_Z(target, index, count, params);
}
alias glProgramEnvParametersI4uivNV = glProgramEnvParametersI4uivNV_Z_Z;
__gshared glProgramEnvParametersI4uivNV_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLuint)* params) { glProgramEnvParametersI4uivNV_Z_Z_loader(target, index, count, params); };
private void glProgramEnvParametersI4uivNV_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLuint)* params) {
  *cast(void**)&glProgramEnvParametersI4uivNV_Z_Z = glbindGetProcAddress(`glProgramEnvParametersI4uivNV`);
  if (*cast(void**)&glProgramEnvParametersI4uivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramEnvParametersI4uivNV' not found!`);
  glProgramEnvParametersI4uivNV_Z_Z(target, index, count, params);
}
alias glProgramLocalParameter4dARB = glProgramLocalParameter4dARB_Z_Z;
__gshared glProgramLocalParameter4dARB_Z_Z = function void (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glProgramLocalParameter4dARB_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramLocalParameter4dARB_Z_Z_loader (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glProgramLocalParameter4dARB_Z_Z = glbindGetProcAddress(`glProgramLocalParameter4dARB`);
  if (*cast(void**)&glProgramLocalParameter4dARB_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4dARB' not found!`);
  glProgramLocalParameter4dARB_Z_Z(target, index, x, y, z, w);
}
alias glProgramLocalParameter4dvARB = glProgramLocalParameter4dvARB_Z_Z;
__gshared glProgramLocalParameter4dvARB_Z_Z = function void (GLenum target, GLuint index, const(GLdouble)* params) { glProgramLocalParameter4dvARB_Z_Z_loader(target, index, params); };
private void glProgramLocalParameter4dvARB_Z_Z_loader (GLenum target, GLuint index, const(GLdouble)* params) {
  *cast(void**)&glProgramLocalParameter4dvARB_Z_Z = glbindGetProcAddress(`glProgramLocalParameter4dvARB`);
  if (*cast(void**)&glProgramLocalParameter4dvARB_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4dvARB' not found!`);
  glProgramLocalParameter4dvARB_Z_Z(target, index, params);
}
alias glProgramLocalParameter4fARB = glProgramLocalParameter4fARB_Z_Z;
__gshared glProgramLocalParameter4fARB_Z_Z = function void (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glProgramLocalParameter4fARB_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramLocalParameter4fARB_Z_Z_loader (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glProgramLocalParameter4fARB_Z_Z = glbindGetProcAddress(`glProgramLocalParameter4fARB`);
  if (*cast(void**)&glProgramLocalParameter4fARB_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4fARB' not found!`);
  glProgramLocalParameter4fARB_Z_Z(target, index, x, y, z, w);
}
alias glProgramLocalParameter4fvARB = glProgramLocalParameter4fvARB_Z_Z;
__gshared glProgramLocalParameter4fvARB_Z_Z = function void (GLenum target, GLuint index, const(GLfloat)* params) { glProgramLocalParameter4fvARB_Z_Z_loader(target, index, params); };
private void glProgramLocalParameter4fvARB_Z_Z_loader (GLenum target, GLuint index, const(GLfloat)* params) {
  *cast(void**)&glProgramLocalParameter4fvARB_Z_Z = glbindGetProcAddress(`glProgramLocalParameter4fvARB`);
  if (*cast(void**)&glProgramLocalParameter4fvARB_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameter4fvARB' not found!`);
  glProgramLocalParameter4fvARB_Z_Z(target, index, params);
}
alias glProgramLocalParameterI4iNV = glProgramLocalParameterI4iNV_Z_Z;
__gshared glProgramLocalParameterI4iNV_Z_Z = function void (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { glProgramLocalParameterI4iNV_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramLocalParameterI4iNV_Z_Z_loader (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glProgramLocalParameterI4iNV_Z_Z = glbindGetProcAddress(`glProgramLocalParameterI4iNV`);
  if (*cast(void**)&glProgramLocalParameterI4iNV_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4iNV' not found!`);
  glProgramLocalParameterI4iNV_Z_Z(target, index, x, y, z, w);
}
alias glProgramLocalParameterI4ivNV = glProgramLocalParameterI4ivNV_Z_Z;
__gshared glProgramLocalParameterI4ivNV_Z_Z = function void (GLenum target, GLuint index, const(GLint)* params) { glProgramLocalParameterI4ivNV_Z_Z_loader(target, index, params); };
private void glProgramLocalParameterI4ivNV_Z_Z_loader (GLenum target, GLuint index, const(GLint)* params) {
  *cast(void**)&glProgramLocalParameterI4ivNV_Z_Z = glbindGetProcAddress(`glProgramLocalParameterI4ivNV`);
  if (*cast(void**)&glProgramLocalParameterI4ivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4ivNV' not found!`);
  glProgramLocalParameterI4ivNV_Z_Z(target, index, params);
}
alias glProgramLocalParameterI4uiNV = glProgramLocalParameterI4uiNV_Z_Z;
__gshared glProgramLocalParameterI4uiNV_Z_Z = function void (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { glProgramLocalParameterI4uiNV_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramLocalParameterI4uiNV_Z_Z_loader (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  *cast(void**)&glProgramLocalParameterI4uiNV_Z_Z = glbindGetProcAddress(`glProgramLocalParameterI4uiNV`);
  if (*cast(void**)&glProgramLocalParameterI4uiNV_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uiNV' not found!`);
  glProgramLocalParameterI4uiNV_Z_Z(target, index, x, y, z, w);
}
alias glProgramLocalParameterI4uivNV = glProgramLocalParameterI4uivNV_Z_Z;
__gshared glProgramLocalParameterI4uivNV_Z_Z = function void (GLenum target, GLuint index, const(GLuint)* params) { glProgramLocalParameterI4uivNV_Z_Z_loader(target, index, params); };
private void glProgramLocalParameterI4uivNV_Z_Z_loader (GLenum target, GLuint index, const(GLuint)* params) {
  *cast(void**)&glProgramLocalParameterI4uivNV_Z_Z = glbindGetProcAddress(`glProgramLocalParameterI4uivNV`);
  if (*cast(void**)&glProgramLocalParameterI4uivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uivNV' not found!`);
  glProgramLocalParameterI4uivNV_Z_Z(target, index, params);
}
alias glProgramLocalParameters4fvEXT = glProgramLocalParameters4fvEXT_Z_Z;
__gshared glProgramLocalParameters4fvEXT_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLfloat)* params) { glProgramLocalParameters4fvEXT_Z_Z_loader(target, index, count, params); };
private void glProgramLocalParameters4fvEXT_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLfloat)* params) {
  *cast(void**)&glProgramLocalParameters4fvEXT_Z_Z = glbindGetProcAddress(`glProgramLocalParameters4fvEXT`);
  if (*cast(void**)&glProgramLocalParameters4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParameters4fvEXT' not found!`);
  glProgramLocalParameters4fvEXT_Z_Z(target, index, count, params);
}
alias glProgramLocalParametersI4ivNV = glProgramLocalParametersI4ivNV_Z_Z;
__gshared glProgramLocalParametersI4ivNV_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLint)* params) { glProgramLocalParametersI4ivNV_Z_Z_loader(target, index, count, params); };
private void glProgramLocalParametersI4ivNV_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLint)* params) {
  *cast(void**)&glProgramLocalParametersI4ivNV_Z_Z = glbindGetProcAddress(`glProgramLocalParametersI4ivNV`);
  if (*cast(void**)&glProgramLocalParametersI4ivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParametersI4ivNV' not found!`);
  glProgramLocalParametersI4ivNV_Z_Z(target, index, count, params);
}
alias glProgramLocalParametersI4uivNV = glProgramLocalParametersI4uivNV_Z_Z;
__gshared glProgramLocalParametersI4uivNV_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLuint)* params) { glProgramLocalParametersI4uivNV_Z_Z_loader(target, index, count, params); };
private void glProgramLocalParametersI4uivNV_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLuint)* params) {
  *cast(void**)&glProgramLocalParametersI4uivNV_Z_Z = glbindGetProcAddress(`glProgramLocalParametersI4uivNV`);
  if (*cast(void**)&glProgramLocalParametersI4uivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramLocalParametersI4uivNV' not found!`);
  glProgramLocalParametersI4uivNV_Z_Z(target, index, count, params);
}
alias glProgramNamedParameter4dNV = glProgramNamedParameter4dNV_Z_Z;
__gshared glProgramNamedParameter4dNV_Z_Z = function void (GLuint id, GLsizei len, const(GLubyte)* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glProgramNamedParameter4dNV_Z_Z_loader(id, len, name, x, y, z, w); };
private void glProgramNamedParameter4dNV_Z_Z_loader (GLuint id, GLsizei len, const(GLubyte)* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glProgramNamedParameter4dNV_Z_Z = glbindGetProcAddress(`glProgramNamedParameter4dNV`);
  if (*cast(void**)&glProgramNamedParameter4dNV_Z_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4dNV' not found!`);
  glProgramNamedParameter4dNV_Z_Z(id, len, name, x, y, z, w);
}
alias glProgramNamedParameter4dvNV = glProgramNamedParameter4dvNV_Z_Z;
__gshared glProgramNamedParameter4dvNV_Z_Z = function void (GLuint id, GLsizei len, const(GLubyte)* name, const(GLdouble)* v) { glProgramNamedParameter4dvNV_Z_Z_loader(id, len, name, v); };
private void glProgramNamedParameter4dvNV_Z_Z_loader (GLuint id, GLsizei len, const(GLubyte)* name, const(GLdouble)* v) {
  *cast(void**)&glProgramNamedParameter4dvNV_Z_Z = glbindGetProcAddress(`glProgramNamedParameter4dvNV`);
  if (*cast(void**)&glProgramNamedParameter4dvNV_Z_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4dvNV' not found!`);
  glProgramNamedParameter4dvNV_Z_Z(id, len, name, v);
}
alias glProgramNamedParameter4fNV = glProgramNamedParameter4fNV_Z_Z;
__gshared glProgramNamedParameter4fNV_Z_Z = function void (GLuint id, GLsizei len, const(GLubyte)* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glProgramNamedParameter4fNV_Z_Z_loader(id, len, name, x, y, z, w); };
private void glProgramNamedParameter4fNV_Z_Z_loader (GLuint id, GLsizei len, const(GLubyte)* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glProgramNamedParameter4fNV_Z_Z = glbindGetProcAddress(`glProgramNamedParameter4fNV`);
  if (*cast(void**)&glProgramNamedParameter4fNV_Z_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4fNV' not found!`);
  glProgramNamedParameter4fNV_Z_Z(id, len, name, x, y, z, w);
}
alias glProgramNamedParameter4fvNV = glProgramNamedParameter4fvNV_Z_Z;
__gshared glProgramNamedParameter4fvNV_Z_Z = function void (GLuint id, GLsizei len, const(GLubyte)* name, const(GLfloat)* v) { glProgramNamedParameter4fvNV_Z_Z_loader(id, len, name, v); };
private void glProgramNamedParameter4fvNV_Z_Z_loader (GLuint id, GLsizei len, const(GLubyte)* name, const(GLfloat)* v) {
  *cast(void**)&glProgramNamedParameter4fvNV_Z_Z = glbindGetProcAddress(`glProgramNamedParameter4fvNV`);
  if (*cast(void**)&glProgramNamedParameter4fvNV_Z_Z is null) assert(0, `OpenGL function 'glProgramNamedParameter4fvNV' not found!`);
  glProgramNamedParameter4fvNV_Z_Z(id, len, name, v);
}
alias glProgramParameter4dNV = glProgramParameter4dNV_Z_Z;
__gshared glProgramParameter4dNV_Z_Z = function void (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glProgramParameter4dNV_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramParameter4dNV_Z_Z_loader (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glProgramParameter4dNV_Z_Z = glbindGetProcAddress(`glProgramParameter4dNV`);
  if (*cast(void**)&glProgramParameter4dNV_Z_Z is null) assert(0, `OpenGL function 'glProgramParameter4dNV' not found!`);
  glProgramParameter4dNV_Z_Z(target, index, x, y, z, w);
}
alias glProgramParameter4dvNV = glProgramParameter4dvNV_Z_Z;
__gshared glProgramParameter4dvNV_Z_Z = function void (GLenum target, GLuint index, const(GLdouble)* v) { glProgramParameter4dvNV_Z_Z_loader(target, index, v); };
private void glProgramParameter4dvNV_Z_Z_loader (GLenum target, GLuint index, const(GLdouble)* v) {
  *cast(void**)&glProgramParameter4dvNV_Z_Z = glbindGetProcAddress(`glProgramParameter4dvNV`);
  if (*cast(void**)&glProgramParameter4dvNV_Z_Z is null) assert(0, `OpenGL function 'glProgramParameter4dvNV' not found!`);
  glProgramParameter4dvNV_Z_Z(target, index, v);
}
alias glProgramParameter4fNV = glProgramParameter4fNV_Z_Z;
__gshared glProgramParameter4fNV_Z_Z = function void (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glProgramParameter4fNV_Z_Z_loader(target, index, x, y, z, w); };
private void glProgramParameter4fNV_Z_Z_loader (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glProgramParameter4fNV_Z_Z = glbindGetProcAddress(`glProgramParameter4fNV`);
  if (*cast(void**)&glProgramParameter4fNV_Z_Z is null) assert(0, `OpenGL function 'glProgramParameter4fNV' not found!`);
  glProgramParameter4fNV_Z_Z(target, index, x, y, z, w);
}
alias glProgramParameter4fvNV = glProgramParameter4fvNV_Z_Z;
__gshared glProgramParameter4fvNV_Z_Z = function void (GLenum target, GLuint index, const(GLfloat)* v) { glProgramParameter4fvNV_Z_Z_loader(target, index, v); };
private void glProgramParameter4fvNV_Z_Z_loader (GLenum target, GLuint index, const(GLfloat)* v) {
  *cast(void**)&glProgramParameter4fvNV_Z_Z = glbindGetProcAddress(`glProgramParameter4fvNV`);
  if (*cast(void**)&glProgramParameter4fvNV_Z_Z is null) assert(0, `OpenGL function 'glProgramParameter4fvNV' not found!`);
  glProgramParameter4fvNV_Z_Z(target, index, v);
}
alias glProgramParameteri = glProgramParameteri_Z_Z;
__gshared glProgramParameteri_Z_Z = function void (GLuint program, GLenum pname, GLint value) { glProgramParameteri_Z_Z_loader(program, pname, value); };
private void glProgramParameteri_Z_Z_loader (GLuint program, GLenum pname, GLint value) {
  *cast(void**)&glProgramParameteri_Z_Z = glbindGetProcAddress(`glProgramParameteri`);
  if (*cast(void**)&glProgramParameteri_Z_Z is null) assert(0, `OpenGL function 'glProgramParameteri' not found!`);
  glProgramParameteri_Z_Z(program, pname, value);
}
alias glProgramParameteriARB = glProgramParameteriARB_Z_Z;
__gshared glProgramParameteriARB_Z_Z = function void (GLuint program, GLenum pname, GLint value) { glProgramParameteriARB_Z_Z_loader(program, pname, value); };
private void glProgramParameteriARB_Z_Z_loader (GLuint program, GLenum pname, GLint value) {
  *cast(void**)&glProgramParameteriARB_Z_Z = glbindGetProcAddress(`glProgramParameteriARB`);
  if (*cast(void**)&glProgramParameteriARB_Z_Z is null) assert(0, `OpenGL function 'glProgramParameteriARB' not found!`);
  glProgramParameteriARB_Z_Z(program, pname, value);
}
alias glProgramParameteriEXT = glProgramParameteriEXT_Z_Z;
__gshared glProgramParameteriEXT_Z_Z = function void (GLuint program, GLenum pname, GLint value) { glProgramParameteriEXT_Z_Z_loader(program, pname, value); };
private void glProgramParameteriEXT_Z_Z_loader (GLuint program, GLenum pname, GLint value) {
  *cast(void**)&glProgramParameteriEXT_Z_Z = glbindGetProcAddress(`glProgramParameteriEXT`);
  if (*cast(void**)&glProgramParameteriEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramParameteriEXT' not found!`);
  glProgramParameteriEXT_Z_Z(program, pname, value);
}
alias glProgramParameters4dvNV = glProgramParameters4dvNV_Z_Z;
__gshared glProgramParameters4dvNV_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLdouble)* v) { glProgramParameters4dvNV_Z_Z_loader(target, index, count, v); };
private void glProgramParameters4dvNV_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLdouble)* v) {
  *cast(void**)&glProgramParameters4dvNV_Z_Z = glbindGetProcAddress(`glProgramParameters4dvNV`);
  if (*cast(void**)&glProgramParameters4dvNV_Z_Z is null) assert(0, `OpenGL function 'glProgramParameters4dvNV' not found!`);
  glProgramParameters4dvNV_Z_Z(target, index, count, v);
}
alias glProgramParameters4fvNV = glProgramParameters4fvNV_Z_Z;
__gshared glProgramParameters4fvNV_Z_Z = function void (GLenum target, GLuint index, GLsizei count, const(GLfloat)* v) { glProgramParameters4fvNV_Z_Z_loader(target, index, count, v); };
private void glProgramParameters4fvNV_Z_Z_loader (GLenum target, GLuint index, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glProgramParameters4fvNV_Z_Z = glbindGetProcAddress(`glProgramParameters4fvNV`);
  if (*cast(void**)&glProgramParameters4fvNV_Z_Z is null) assert(0, `OpenGL function 'glProgramParameters4fvNV' not found!`);
  glProgramParameters4fvNV_Z_Z(target, index, count, v);
}
alias glProgramPathFragmentInputGenNV = glProgramPathFragmentInputGenNV_Z_Z;
__gshared glProgramPathFragmentInputGenNV_Z_Z = function void (GLuint program, GLint location, GLenum genMode, GLint components, const(GLfloat)* coeffs) { glProgramPathFragmentInputGenNV_Z_Z_loader(program, location, genMode, components, coeffs); };
private void glProgramPathFragmentInputGenNV_Z_Z_loader (GLuint program, GLint location, GLenum genMode, GLint components, const(GLfloat)* coeffs) {
  *cast(void**)&glProgramPathFragmentInputGenNV_Z_Z = glbindGetProcAddress(`glProgramPathFragmentInputGenNV`);
  if (*cast(void**)&glProgramPathFragmentInputGenNV_Z_Z is null) assert(0, `OpenGL function 'glProgramPathFragmentInputGenNV' not found!`);
  glProgramPathFragmentInputGenNV_Z_Z(program, location, genMode, components, coeffs);
}
alias glProgramStringARB = glProgramStringARB_Z_Z;
__gshared glProgramStringARB_Z_Z = function void (GLenum target, GLenum format, GLsizei len, const(void)* string) { glProgramStringARB_Z_Z_loader(target, format, len, string); };
private void glProgramStringARB_Z_Z_loader (GLenum target, GLenum format, GLsizei len, const(void)* string) {
  *cast(void**)&glProgramStringARB_Z_Z = glbindGetProcAddress(`glProgramStringARB`);
  if (*cast(void**)&glProgramStringARB_Z_Z is null) assert(0, `OpenGL function 'glProgramStringARB' not found!`);
  glProgramStringARB_Z_Z(target, format, len, string);
}
alias glProgramSubroutineParametersuivNV = glProgramSubroutineParametersuivNV_Z_Z;
__gshared glProgramSubroutineParametersuivNV_Z_Z = function void (GLenum target, GLsizei count, const(GLuint)* params) { glProgramSubroutineParametersuivNV_Z_Z_loader(target, count, params); };
private void glProgramSubroutineParametersuivNV_Z_Z_loader (GLenum target, GLsizei count, const(GLuint)* params) {
  *cast(void**)&glProgramSubroutineParametersuivNV_Z_Z = glbindGetProcAddress(`glProgramSubroutineParametersuivNV`);
  if (*cast(void**)&glProgramSubroutineParametersuivNV_Z_Z is null) assert(0, `OpenGL function 'glProgramSubroutineParametersuivNV' not found!`);
  glProgramSubroutineParametersuivNV_Z_Z(target, count, params);
}
alias glProgramUniform1d = glProgramUniform1d_Z_Z;
__gshared glProgramUniform1d_Z_Z = function void (GLuint program, GLint location, GLdouble v0) { glProgramUniform1d_Z_Z_loader(program, location, v0); };
private void glProgramUniform1d_Z_Z_loader (GLuint program, GLint location, GLdouble v0) {
  *cast(void**)&glProgramUniform1d_Z_Z = glbindGetProcAddress(`glProgramUniform1d`);
  if (*cast(void**)&glProgramUniform1d_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1d' not found!`);
  glProgramUniform1d_Z_Z(program, location, v0);
}
alias glProgramUniform1dEXT = glProgramUniform1dEXT_Z_Z;
__gshared glProgramUniform1dEXT_Z_Z = function void (GLuint program, GLint location, GLdouble x) { glProgramUniform1dEXT_Z_Z_loader(program, location, x); };
private void glProgramUniform1dEXT_Z_Z_loader (GLuint program, GLint location, GLdouble x) {
  *cast(void**)&glProgramUniform1dEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1dEXT`);
  if (*cast(void**)&glProgramUniform1dEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1dEXT' not found!`);
  glProgramUniform1dEXT_Z_Z(program, location, x);
}
alias glProgramUniform1dv = glProgramUniform1dv_Z_Z;
__gshared glProgramUniform1dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform1dv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform1dv_Z_Z = glbindGetProcAddress(`glProgramUniform1dv`);
  if (*cast(void**)&glProgramUniform1dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1dv' not found!`);
  glProgramUniform1dv_Z_Z(program, location, count, value);
}
alias glProgramUniform1dvEXT = glProgramUniform1dvEXT_Z_Z;
__gshared glProgramUniform1dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform1dvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform1dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1dvEXT`);
  if (*cast(void**)&glProgramUniform1dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1dvEXT' not found!`);
  glProgramUniform1dvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform1f = glProgramUniform1f_Z_Z;
__gshared glProgramUniform1f_Z_Z = function void (GLuint program, GLint location, GLfloat v0) { glProgramUniform1f_Z_Z_loader(program, location, v0); };
private void glProgramUniform1f_Z_Z_loader (GLuint program, GLint location, GLfloat v0) {
  *cast(void**)&glProgramUniform1f_Z_Z = glbindGetProcAddress(`glProgramUniform1f`);
  if (*cast(void**)&glProgramUniform1f_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1f' not found!`);
  glProgramUniform1f_Z_Z(program, location, v0);
}
alias glProgramUniform1fEXT = glProgramUniform1fEXT_Z_Z;
__gshared glProgramUniform1fEXT_Z_Z = function void (GLuint program, GLint location, GLfloat v0) { glProgramUniform1fEXT_Z_Z_loader(program, location, v0); };
private void glProgramUniform1fEXT_Z_Z_loader (GLuint program, GLint location, GLfloat v0) {
  *cast(void**)&glProgramUniform1fEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1fEXT`);
  if (*cast(void**)&glProgramUniform1fEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1fEXT' not found!`);
  glProgramUniform1fEXT_Z_Z(program, location, v0);
}
alias glProgramUniform1fv = glProgramUniform1fv_Z_Z;
__gshared glProgramUniform1fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform1fv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform1fv_Z_Z = glbindGetProcAddress(`glProgramUniform1fv`);
  if (*cast(void**)&glProgramUniform1fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1fv' not found!`);
  glProgramUniform1fv_Z_Z(program, location, count, value);
}
alias glProgramUniform1fvEXT = glProgramUniform1fvEXT_Z_Z;
__gshared glProgramUniform1fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform1fvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform1fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1fvEXT`);
  if (*cast(void**)&glProgramUniform1fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1fvEXT' not found!`);
  glProgramUniform1fvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform1i = glProgramUniform1i_Z_Z;
__gshared glProgramUniform1i_Z_Z = function void (GLuint program, GLint location, GLint v0) { glProgramUniform1i_Z_Z_loader(program, location, v0); };
private void glProgramUniform1i_Z_Z_loader (GLuint program, GLint location, GLint v0) {
  *cast(void**)&glProgramUniform1i_Z_Z = glbindGetProcAddress(`glProgramUniform1i`);
  if (*cast(void**)&glProgramUniform1i_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1i' not found!`);
  glProgramUniform1i_Z_Z(program, location, v0);
}
alias glProgramUniform1i64ARB = glProgramUniform1i64ARB_Z_Z;
__gshared glProgramUniform1i64ARB_Z_Z = function void (GLuint program, GLint location, GLint64 x) { glProgramUniform1i64ARB_Z_Z_loader(program, location, x); };
private void glProgramUniform1i64ARB_Z_Z_loader (GLuint program, GLint location, GLint64 x) {
  *cast(void**)&glProgramUniform1i64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform1i64ARB`);
  if (*cast(void**)&glProgramUniform1i64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64ARB' not found!`);
  glProgramUniform1i64ARB_Z_Z(program, location, x);
}
alias glProgramUniform1i64NV = glProgramUniform1i64NV_Z_Z;
__gshared glProgramUniform1i64NV_Z_Z = function void (GLuint program, GLint location, GLint64EXT x) { glProgramUniform1i64NV_Z_Z_loader(program, location, x); };
private void glProgramUniform1i64NV_Z_Z_loader (GLuint program, GLint location, GLint64EXT x) {
  *cast(void**)&glProgramUniform1i64NV_Z_Z = glbindGetProcAddress(`glProgramUniform1i64NV`);
  if (*cast(void**)&glProgramUniform1i64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64NV' not found!`);
  glProgramUniform1i64NV_Z_Z(program, location, x);
}
alias glProgramUniform1i64vARB = glProgramUniform1i64vARB_Z_Z;
__gshared glProgramUniform1i64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64)* value) { glProgramUniform1i64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1i64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glProgramUniform1i64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform1i64vARB`);
  if (*cast(void**)&glProgramUniform1i64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64vARB' not found!`);
  glProgramUniform1i64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform1i64vNV = glProgramUniform1i64vNV_Z_Z;
__gshared glProgramUniform1i64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) { glProgramUniform1i64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1i64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glProgramUniform1i64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform1i64vNV`);
  if (*cast(void**)&glProgramUniform1i64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1i64vNV' not found!`);
  glProgramUniform1i64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform1iEXT = glProgramUniform1iEXT_Z_Z;
__gshared glProgramUniform1iEXT_Z_Z = function void (GLuint program, GLint location, GLint v0) { glProgramUniform1iEXT_Z_Z_loader(program, location, v0); };
private void glProgramUniform1iEXT_Z_Z_loader (GLuint program, GLint location, GLint v0) {
  *cast(void**)&glProgramUniform1iEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1iEXT`);
  if (*cast(void**)&glProgramUniform1iEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1iEXT' not found!`);
  glProgramUniform1iEXT_Z_Z(program, location, v0);
}
alias glProgramUniform1iv = glProgramUniform1iv_Z_Z;
__gshared glProgramUniform1iv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform1iv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1iv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform1iv_Z_Z = glbindGetProcAddress(`glProgramUniform1iv`);
  if (*cast(void**)&glProgramUniform1iv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1iv' not found!`);
  glProgramUniform1iv_Z_Z(program, location, count, value);
}
alias glProgramUniform1ivEXT = glProgramUniform1ivEXT_Z_Z;
__gshared glProgramUniform1ivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform1ivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1ivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform1ivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1ivEXT`);
  if (*cast(void**)&glProgramUniform1ivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1ivEXT' not found!`);
  glProgramUniform1ivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform1ui = glProgramUniform1ui_Z_Z;
__gshared glProgramUniform1ui_Z_Z = function void (GLuint program, GLint location, GLuint v0) { glProgramUniform1ui_Z_Z_loader(program, location, v0); };
private void glProgramUniform1ui_Z_Z_loader (GLuint program, GLint location, GLuint v0) {
  *cast(void**)&glProgramUniform1ui_Z_Z = glbindGetProcAddress(`glProgramUniform1ui`);
  if (*cast(void**)&glProgramUniform1ui_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui' not found!`);
  glProgramUniform1ui_Z_Z(program, location, v0);
}
alias glProgramUniform1ui64ARB = glProgramUniform1ui64ARB_Z_Z;
__gshared glProgramUniform1ui64ARB_Z_Z = function void (GLuint program, GLint location, GLuint64 x) { glProgramUniform1ui64ARB_Z_Z_loader(program, location, x); };
private void glProgramUniform1ui64ARB_Z_Z_loader (GLuint program, GLint location, GLuint64 x) {
  *cast(void**)&glProgramUniform1ui64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform1ui64ARB`);
  if (*cast(void**)&glProgramUniform1ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64ARB' not found!`);
  glProgramUniform1ui64ARB_Z_Z(program, location, x);
}
alias glProgramUniform1ui64NV = glProgramUniform1ui64NV_Z_Z;
__gshared glProgramUniform1ui64NV_Z_Z = function void (GLuint program, GLint location, GLuint64EXT x) { glProgramUniform1ui64NV_Z_Z_loader(program, location, x); };
private void glProgramUniform1ui64NV_Z_Z_loader (GLuint program, GLint location, GLuint64EXT x) {
  *cast(void**)&glProgramUniform1ui64NV_Z_Z = glbindGetProcAddress(`glProgramUniform1ui64NV`);
  if (*cast(void**)&glProgramUniform1ui64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64NV' not found!`);
  glProgramUniform1ui64NV_Z_Z(program, location, x);
}
alias glProgramUniform1ui64vARB = glProgramUniform1ui64vARB_Z_Z;
__gshared glProgramUniform1ui64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) { glProgramUniform1ui64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1ui64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glProgramUniform1ui64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform1ui64vARB`);
  if (*cast(void**)&glProgramUniform1ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64vARB' not found!`);
  glProgramUniform1ui64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform1ui64vNV = glProgramUniform1ui64vNV_Z_Z;
__gshared glProgramUniform1ui64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) { glProgramUniform1ui64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1ui64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glProgramUniform1ui64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform1ui64vNV`);
  if (*cast(void**)&glProgramUniform1ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1ui64vNV' not found!`);
  glProgramUniform1ui64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform1uiEXT = glProgramUniform1uiEXT_Z_Z;
__gshared glProgramUniform1uiEXT_Z_Z = function void (GLuint program, GLint location, GLuint v0) { glProgramUniform1uiEXT_Z_Z_loader(program, location, v0); };
private void glProgramUniform1uiEXT_Z_Z_loader (GLuint program, GLint location, GLuint v0) {
  *cast(void**)&glProgramUniform1uiEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1uiEXT`);
  if (*cast(void**)&glProgramUniform1uiEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1uiEXT' not found!`);
  glProgramUniform1uiEXT_Z_Z(program, location, v0);
}
alias glProgramUniform1uiv = glProgramUniform1uiv_Z_Z;
__gshared glProgramUniform1uiv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform1uiv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1uiv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform1uiv_Z_Z = glbindGetProcAddress(`glProgramUniform1uiv`);
  if (*cast(void**)&glProgramUniform1uiv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1uiv' not found!`);
  glProgramUniform1uiv_Z_Z(program, location, count, value);
}
alias glProgramUniform1uivEXT = glProgramUniform1uivEXT_Z_Z;
__gshared glProgramUniform1uivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform1uivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform1uivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform1uivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform1uivEXT`);
  if (*cast(void**)&glProgramUniform1uivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform1uivEXT' not found!`);
  glProgramUniform1uivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform2d = glProgramUniform2d_Z_Z;
__gshared glProgramUniform2d_Z_Z = function void (GLuint program, GLint location, GLdouble v0, GLdouble v1) { glProgramUniform2d_Z_Z_loader(program, location, v0, v1); };
private void glProgramUniform2d_Z_Z_loader (GLuint program, GLint location, GLdouble v0, GLdouble v1) {
  *cast(void**)&glProgramUniform2d_Z_Z = glbindGetProcAddress(`glProgramUniform2d`);
  if (*cast(void**)&glProgramUniform2d_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2d' not found!`);
  glProgramUniform2d_Z_Z(program, location, v0, v1);
}
alias glProgramUniform2dEXT = glProgramUniform2dEXT_Z_Z;
__gshared glProgramUniform2dEXT_Z_Z = function void (GLuint program, GLint location, GLdouble x, GLdouble y) { glProgramUniform2dEXT_Z_Z_loader(program, location, x, y); };
private void glProgramUniform2dEXT_Z_Z_loader (GLuint program, GLint location, GLdouble x, GLdouble y) {
  *cast(void**)&glProgramUniform2dEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2dEXT`);
  if (*cast(void**)&glProgramUniform2dEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2dEXT' not found!`);
  glProgramUniform2dEXT_Z_Z(program, location, x, y);
}
alias glProgramUniform2dv = glProgramUniform2dv_Z_Z;
__gshared glProgramUniform2dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform2dv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform2dv_Z_Z = glbindGetProcAddress(`glProgramUniform2dv`);
  if (*cast(void**)&glProgramUniform2dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2dv' not found!`);
  glProgramUniform2dv_Z_Z(program, location, count, value);
}
alias glProgramUniform2dvEXT = glProgramUniform2dvEXT_Z_Z;
__gshared glProgramUniform2dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform2dvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform2dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2dvEXT`);
  if (*cast(void**)&glProgramUniform2dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2dvEXT' not found!`);
  glProgramUniform2dvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform2f = glProgramUniform2f_Z_Z;
__gshared glProgramUniform2f_Z_Z = function void (GLuint program, GLint location, GLfloat v0, GLfloat v1) { glProgramUniform2f_Z_Z_loader(program, location, v0, v1); };
private void glProgramUniform2f_Z_Z_loader (GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  *cast(void**)&glProgramUniform2f_Z_Z = glbindGetProcAddress(`glProgramUniform2f`);
  if (*cast(void**)&glProgramUniform2f_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2f' not found!`);
  glProgramUniform2f_Z_Z(program, location, v0, v1);
}
alias glProgramUniform2fEXT = glProgramUniform2fEXT_Z_Z;
__gshared glProgramUniform2fEXT_Z_Z = function void (GLuint program, GLint location, GLfloat v0, GLfloat v1) { glProgramUniform2fEXT_Z_Z_loader(program, location, v0, v1); };
private void glProgramUniform2fEXT_Z_Z_loader (GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  *cast(void**)&glProgramUniform2fEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2fEXT`);
  if (*cast(void**)&glProgramUniform2fEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2fEXT' not found!`);
  glProgramUniform2fEXT_Z_Z(program, location, v0, v1);
}
alias glProgramUniform2fv = glProgramUniform2fv_Z_Z;
__gshared glProgramUniform2fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform2fv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform2fv_Z_Z = glbindGetProcAddress(`glProgramUniform2fv`);
  if (*cast(void**)&glProgramUniform2fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2fv' not found!`);
  glProgramUniform2fv_Z_Z(program, location, count, value);
}
alias glProgramUniform2fvEXT = glProgramUniform2fvEXT_Z_Z;
__gshared glProgramUniform2fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform2fvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform2fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2fvEXT`);
  if (*cast(void**)&glProgramUniform2fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2fvEXT' not found!`);
  glProgramUniform2fvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform2i = glProgramUniform2i_Z_Z;
__gshared glProgramUniform2i_Z_Z = function void (GLuint program, GLint location, GLint v0, GLint v1) { glProgramUniform2i_Z_Z_loader(program, location, v0, v1); };
private void glProgramUniform2i_Z_Z_loader (GLuint program, GLint location, GLint v0, GLint v1) {
  *cast(void**)&glProgramUniform2i_Z_Z = glbindGetProcAddress(`glProgramUniform2i`);
  if (*cast(void**)&glProgramUniform2i_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2i' not found!`);
  glProgramUniform2i_Z_Z(program, location, v0, v1);
}
alias glProgramUniform2i64ARB = glProgramUniform2i64ARB_Z_Z;
__gshared glProgramUniform2i64ARB_Z_Z = function void (GLuint program, GLint location, GLint64 x, GLint64 y) { glProgramUniform2i64ARB_Z_Z_loader(program, location, x, y); };
private void glProgramUniform2i64ARB_Z_Z_loader (GLuint program, GLint location, GLint64 x, GLint64 y) {
  *cast(void**)&glProgramUniform2i64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform2i64ARB`);
  if (*cast(void**)&glProgramUniform2i64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64ARB' not found!`);
  glProgramUniform2i64ARB_Z_Z(program, location, x, y);
}
alias glProgramUniform2i64NV = glProgramUniform2i64NV_Z_Z;
__gshared glProgramUniform2i64NV_Z_Z = function void (GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { glProgramUniform2i64NV_Z_Z_loader(program, location, x, y); };
private void glProgramUniform2i64NV_Z_Z_loader (GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
  *cast(void**)&glProgramUniform2i64NV_Z_Z = glbindGetProcAddress(`glProgramUniform2i64NV`);
  if (*cast(void**)&glProgramUniform2i64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64NV' not found!`);
  glProgramUniform2i64NV_Z_Z(program, location, x, y);
}
alias glProgramUniform2i64vARB = glProgramUniform2i64vARB_Z_Z;
__gshared glProgramUniform2i64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64)* value) { glProgramUniform2i64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2i64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glProgramUniform2i64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform2i64vARB`);
  if (*cast(void**)&glProgramUniform2i64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64vARB' not found!`);
  glProgramUniform2i64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform2i64vNV = glProgramUniform2i64vNV_Z_Z;
__gshared glProgramUniform2i64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) { glProgramUniform2i64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2i64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glProgramUniform2i64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform2i64vNV`);
  if (*cast(void**)&glProgramUniform2i64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2i64vNV' not found!`);
  glProgramUniform2i64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform2iEXT = glProgramUniform2iEXT_Z_Z;
__gshared glProgramUniform2iEXT_Z_Z = function void (GLuint program, GLint location, GLint v0, GLint v1) { glProgramUniform2iEXT_Z_Z_loader(program, location, v0, v1); };
private void glProgramUniform2iEXT_Z_Z_loader (GLuint program, GLint location, GLint v0, GLint v1) {
  *cast(void**)&glProgramUniform2iEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2iEXT`);
  if (*cast(void**)&glProgramUniform2iEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2iEXT' not found!`);
  glProgramUniform2iEXT_Z_Z(program, location, v0, v1);
}
alias glProgramUniform2iv = glProgramUniform2iv_Z_Z;
__gshared glProgramUniform2iv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform2iv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2iv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform2iv_Z_Z = glbindGetProcAddress(`glProgramUniform2iv`);
  if (*cast(void**)&glProgramUniform2iv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2iv' not found!`);
  glProgramUniform2iv_Z_Z(program, location, count, value);
}
alias glProgramUniform2ivEXT = glProgramUniform2ivEXT_Z_Z;
__gshared glProgramUniform2ivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform2ivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2ivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform2ivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2ivEXT`);
  if (*cast(void**)&glProgramUniform2ivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2ivEXT' not found!`);
  glProgramUniform2ivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform2ui = glProgramUniform2ui_Z_Z;
__gshared glProgramUniform2ui_Z_Z = function void (GLuint program, GLint location, GLuint v0, GLuint v1) { glProgramUniform2ui_Z_Z_loader(program, location, v0, v1); };
private void glProgramUniform2ui_Z_Z_loader (GLuint program, GLint location, GLuint v0, GLuint v1) {
  *cast(void**)&glProgramUniform2ui_Z_Z = glbindGetProcAddress(`glProgramUniform2ui`);
  if (*cast(void**)&glProgramUniform2ui_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui' not found!`);
  glProgramUniform2ui_Z_Z(program, location, v0, v1);
}
alias glProgramUniform2ui64ARB = glProgramUniform2ui64ARB_Z_Z;
__gshared glProgramUniform2ui64ARB_Z_Z = function void (GLuint program, GLint location, GLuint64 x, GLuint64 y) { glProgramUniform2ui64ARB_Z_Z_loader(program, location, x, y); };
private void glProgramUniform2ui64ARB_Z_Z_loader (GLuint program, GLint location, GLuint64 x, GLuint64 y) {
  *cast(void**)&glProgramUniform2ui64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform2ui64ARB`);
  if (*cast(void**)&glProgramUniform2ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64ARB' not found!`);
  glProgramUniform2ui64ARB_Z_Z(program, location, x, y);
}
alias glProgramUniform2ui64NV = glProgramUniform2ui64NV_Z_Z;
__gshared glProgramUniform2ui64NV_Z_Z = function void (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { glProgramUniform2ui64NV_Z_Z_loader(program, location, x, y); };
private void glProgramUniform2ui64NV_Z_Z_loader (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
  *cast(void**)&glProgramUniform2ui64NV_Z_Z = glbindGetProcAddress(`glProgramUniform2ui64NV`);
  if (*cast(void**)&glProgramUniform2ui64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64NV' not found!`);
  glProgramUniform2ui64NV_Z_Z(program, location, x, y);
}
alias glProgramUniform2ui64vARB = glProgramUniform2ui64vARB_Z_Z;
__gshared glProgramUniform2ui64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) { glProgramUniform2ui64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2ui64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glProgramUniform2ui64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform2ui64vARB`);
  if (*cast(void**)&glProgramUniform2ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64vARB' not found!`);
  glProgramUniform2ui64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform2ui64vNV = glProgramUniform2ui64vNV_Z_Z;
__gshared glProgramUniform2ui64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) { glProgramUniform2ui64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2ui64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glProgramUniform2ui64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform2ui64vNV`);
  if (*cast(void**)&glProgramUniform2ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2ui64vNV' not found!`);
  glProgramUniform2ui64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform2uiEXT = glProgramUniform2uiEXT_Z_Z;
__gshared glProgramUniform2uiEXT_Z_Z = function void (GLuint program, GLint location, GLuint v0, GLuint v1) { glProgramUniform2uiEXT_Z_Z_loader(program, location, v0, v1); };
private void glProgramUniform2uiEXT_Z_Z_loader (GLuint program, GLint location, GLuint v0, GLuint v1) {
  *cast(void**)&glProgramUniform2uiEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2uiEXT`);
  if (*cast(void**)&glProgramUniform2uiEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2uiEXT' not found!`);
  glProgramUniform2uiEXT_Z_Z(program, location, v0, v1);
}
alias glProgramUniform2uiv = glProgramUniform2uiv_Z_Z;
__gshared glProgramUniform2uiv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform2uiv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2uiv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform2uiv_Z_Z = glbindGetProcAddress(`glProgramUniform2uiv`);
  if (*cast(void**)&glProgramUniform2uiv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2uiv' not found!`);
  glProgramUniform2uiv_Z_Z(program, location, count, value);
}
alias glProgramUniform2uivEXT = glProgramUniform2uivEXT_Z_Z;
__gshared glProgramUniform2uivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform2uivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform2uivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform2uivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform2uivEXT`);
  if (*cast(void**)&glProgramUniform2uivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform2uivEXT' not found!`);
  glProgramUniform2uivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform3d = glProgramUniform3d_Z_Z;
__gshared glProgramUniform3d_Z_Z = function void (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { glProgramUniform3d_Z_Z_loader(program, location, v0, v1, v2); };
private void glProgramUniform3d_Z_Z_loader (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
  *cast(void**)&glProgramUniform3d_Z_Z = glbindGetProcAddress(`glProgramUniform3d`);
  if (*cast(void**)&glProgramUniform3d_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3d' not found!`);
  glProgramUniform3d_Z_Z(program, location, v0, v1, v2);
}
alias glProgramUniform3dEXT = glProgramUniform3dEXT_Z_Z;
__gshared glProgramUniform3dEXT_Z_Z = function void (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { glProgramUniform3dEXT_Z_Z_loader(program, location, x, y, z); };
private void glProgramUniform3dEXT_Z_Z_loader (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glProgramUniform3dEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3dEXT`);
  if (*cast(void**)&glProgramUniform3dEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3dEXT' not found!`);
  glProgramUniform3dEXT_Z_Z(program, location, x, y, z);
}
alias glProgramUniform3dv = glProgramUniform3dv_Z_Z;
__gshared glProgramUniform3dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform3dv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform3dv_Z_Z = glbindGetProcAddress(`glProgramUniform3dv`);
  if (*cast(void**)&glProgramUniform3dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3dv' not found!`);
  glProgramUniform3dv_Z_Z(program, location, count, value);
}
alias glProgramUniform3dvEXT = glProgramUniform3dvEXT_Z_Z;
__gshared glProgramUniform3dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform3dvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform3dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3dvEXT`);
  if (*cast(void**)&glProgramUniform3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3dvEXT' not found!`);
  glProgramUniform3dvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform3f = glProgramUniform3f_Z_Z;
__gshared glProgramUniform3f_Z_Z = function void (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { glProgramUniform3f_Z_Z_loader(program, location, v0, v1, v2); };
private void glProgramUniform3f_Z_Z_loader (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  *cast(void**)&glProgramUniform3f_Z_Z = glbindGetProcAddress(`glProgramUniform3f`);
  if (*cast(void**)&glProgramUniform3f_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3f' not found!`);
  glProgramUniform3f_Z_Z(program, location, v0, v1, v2);
}
alias glProgramUniform3fEXT = glProgramUniform3fEXT_Z_Z;
__gshared glProgramUniform3fEXT_Z_Z = function void (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { glProgramUniform3fEXT_Z_Z_loader(program, location, v0, v1, v2); };
private void glProgramUniform3fEXT_Z_Z_loader (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  *cast(void**)&glProgramUniform3fEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3fEXT`);
  if (*cast(void**)&glProgramUniform3fEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3fEXT' not found!`);
  glProgramUniform3fEXT_Z_Z(program, location, v0, v1, v2);
}
alias glProgramUniform3fv = glProgramUniform3fv_Z_Z;
__gshared glProgramUniform3fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform3fv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform3fv_Z_Z = glbindGetProcAddress(`glProgramUniform3fv`);
  if (*cast(void**)&glProgramUniform3fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3fv' not found!`);
  glProgramUniform3fv_Z_Z(program, location, count, value);
}
alias glProgramUniform3fvEXT = glProgramUniform3fvEXT_Z_Z;
__gshared glProgramUniform3fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform3fvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform3fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3fvEXT`);
  if (*cast(void**)&glProgramUniform3fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3fvEXT' not found!`);
  glProgramUniform3fvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform3i = glProgramUniform3i_Z_Z;
__gshared glProgramUniform3i_Z_Z = function void (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { glProgramUniform3i_Z_Z_loader(program, location, v0, v1, v2); };
private void glProgramUniform3i_Z_Z_loader (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  *cast(void**)&glProgramUniform3i_Z_Z = glbindGetProcAddress(`glProgramUniform3i`);
  if (*cast(void**)&glProgramUniform3i_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3i' not found!`);
  glProgramUniform3i_Z_Z(program, location, v0, v1, v2);
}
alias glProgramUniform3i64ARB = glProgramUniform3i64ARB_Z_Z;
__gshared glProgramUniform3i64ARB_Z_Z = function void (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { glProgramUniform3i64ARB_Z_Z_loader(program, location, x, y, z); };
private void glProgramUniform3i64ARB_Z_Z_loader (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {
  *cast(void**)&glProgramUniform3i64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform3i64ARB`);
  if (*cast(void**)&glProgramUniform3i64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64ARB' not found!`);
  glProgramUniform3i64ARB_Z_Z(program, location, x, y, z);
}
alias glProgramUniform3i64NV = glProgramUniform3i64NV_Z_Z;
__gshared glProgramUniform3i64NV_Z_Z = function void (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { glProgramUniform3i64NV_Z_Z_loader(program, location, x, y, z); };
private void glProgramUniform3i64NV_Z_Z_loader (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  *cast(void**)&glProgramUniform3i64NV_Z_Z = glbindGetProcAddress(`glProgramUniform3i64NV`);
  if (*cast(void**)&glProgramUniform3i64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64NV' not found!`);
  glProgramUniform3i64NV_Z_Z(program, location, x, y, z);
}
alias glProgramUniform3i64vARB = glProgramUniform3i64vARB_Z_Z;
__gshared glProgramUniform3i64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64)* value) { glProgramUniform3i64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3i64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glProgramUniform3i64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform3i64vARB`);
  if (*cast(void**)&glProgramUniform3i64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64vARB' not found!`);
  glProgramUniform3i64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform3i64vNV = glProgramUniform3i64vNV_Z_Z;
__gshared glProgramUniform3i64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) { glProgramUniform3i64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3i64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glProgramUniform3i64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform3i64vNV`);
  if (*cast(void**)&glProgramUniform3i64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3i64vNV' not found!`);
  glProgramUniform3i64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform3iEXT = glProgramUniform3iEXT_Z_Z;
__gshared glProgramUniform3iEXT_Z_Z = function void (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { glProgramUniform3iEXT_Z_Z_loader(program, location, v0, v1, v2); };
private void glProgramUniform3iEXT_Z_Z_loader (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  *cast(void**)&glProgramUniform3iEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3iEXT`);
  if (*cast(void**)&glProgramUniform3iEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3iEXT' not found!`);
  glProgramUniform3iEXT_Z_Z(program, location, v0, v1, v2);
}
alias glProgramUniform3iv = glProgramUniform3iv_Z_Z;
__gshared glProgramUniform3iv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform3iv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3iv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform3iv_Z_Z = glbindGetProcAddress(`glProgramUniform3iv`);
  if (*cast(void**)&glProgramUniform3iv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3iv' not found!`);
  glProgramUniform3iv_Z_Z(program, location, count, value);
}
alias glProgramUniform3ivEXT = glProgramUniform3ivEXT_Z_Z;
__gshared glProgramUniform3ivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform3ivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3ivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform3ivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3ivEXT`);
  if (*cast(void**)&glProgramUniform3ivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3ivEXT' not found!`);
  glProgramUniform3ivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform3ui = glProgramUniform3ui_Z_Z;
__gshared glProgramUniform3ui_Z_Z = function void (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { glProgramUniform3ui_Z_Z_loader(program, location, v0, v1, v2); };
private void glProgramUniform3ui_Z_Z_loader (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  *cast(void**)&glProgramUniform3ui_Z_Z = glbindGetProcAddress(`glProgramUniform3ui`);
  if (*cast(void**)&glProgramUniform3ui_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui' not found!`);
  glProgramUniform3ui_Z_Z(program, location, v0, v1, v2);
}
alias glProgramUniform3ui64ARB = glProgramUniform3ui64ARB_Z_Z;
__gshared glProgramUniform3ui64ARB_Z_Z = function void (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { glProgramUniform3ui64ARB_Z_Z_loader(program, location, x, y, z); };
private void glProgramUniform3ui64ARB_Z_Z_loader (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  *cast(void**)&glProgramUniform3ui64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform3ui64ARB`);
  if (*cast(void**)&glProgramUniform3ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64ARB' not found!`);
  glProgramUniform3ui64ARB_Z_Z(program, location, x, y, z);
}
alias glProgramUniform3ui64NV = glProgramUniform3ui64NV_Z_Z;
__gshared glProgramUniform3ui64NV_Z_Z = function void (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { glProgramUniform3ui64NV_Z_Z_loader(program, location, x, y, z); };
private void glProgramUniform3ui64NV_Z_Z_loader (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  *cast(void**)&glProgramUniform3ui64NV_Z_Z = glbindGetProcAddress(`glProgramUniform3ui64NV`);
  if (*cast(void**)&glProgramUniform3ui64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64NV' not found!`);
  glProgramUniform3ui64NV_Z_Z(program, location, x, y, z);
}
alias glProgramUniform3ui64vARB = glProgramUniform3ui64vARB_Z_Z;
__gshared glProgramUniform3ui64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) { glProgramUniform3ui64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3ui64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glProgramUniform3ui64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform3ui64vARB`);
  if (*cast(void**)&glProgramUniform3ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64vARB' not found!`);
  glProgramUniform3ui64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform3ui64vNV = glProgramUniform3ui64vNV_Z_Z;
__gshared glProgramUniform3ui64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) { glProgramUniform3ui64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3ui64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glProgramUniform3ui64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform3ui64vNV`);
  if (*cast(void**)&glProgramUniform3ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3ui64vNV' not found!`);
  glProgramUniform3ui64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform3uiEXT = glProgramUniform3uiEXT_Z_Z;
__gshared glProgramUniform3uiEXT_Z_Z = function void (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { glProgramUniform3uiEXT_Z_Z_loader(program, location, v0, v1, v2); };
private void glProgramUniform3uiEXT_Z_Z_loader (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  *cast(void**)&glProgramUniform3uiEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3uiEXT`);
  if (*cast(void**)&glProgramUniform3uiEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3uiEXT' not found!`);
  glProgramUniform3uiEXT_Z_Z(program, location, v0, v1, v2);
}
alias glProgramUniform3uiv = glProgramUniform3uiv_Z_Z;
__gshared glProgramUniform3uiv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform3uiv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3uiv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform3uiv_Z_Z = glbindGetProcAddress(`glProgramUniform3uiv`);
  if (*cast(void**)&glProgramUniform3uiv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3uiv' not found!`);
  glProgramUniform3uiv_Z_Z(program, location, count, value);
}
alias glProgramUniform3uivEXT = glProgramUniform3uivEXT_Z_Z;
__gshared glProgramUniform3uivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform3uivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform3uivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform3uivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform3uivEXT`);
  if (*cast(void**)&glProgramUniform3uivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform3uivEXT' not found!`);
  glProgramUniform3uivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform4d = glProgramUniform4d_Z_Z;
__gshared glProgramUniform4d_Z_Z = function void (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { glProgramUniform4d_Z_Z_loader(program, location, v0, v1, v2, v3); };
private void glProgramUniform4d_Z_Z_loader (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
  *cast(void**)&glProgramUniform4d_Z_Z = glbindGetProcAddress(`glProgramUniform4d`);
  if (*cast(void**)&glProgramUniform4d_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4d' not found!`);
  glProgramUniform4d_Z_Z(program, location, v0, v1, v2, v3);
}
alias glProgramUniform4dEXT = glProgramUniform4dEXT_Z_Z;
__gshared glProgramUniform4dEXT_Z_Z = function void (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glProgramUniform4dEXT_Z_Z_loader(program, location, x, y, z, w); };
private void glProgramUniform4dEXT_Z_Z_loader (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glProgramUniform4dEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4dEXT`);
  if (*cast(void**)&glProgramUniform4dEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4dEXT' not found!`);
  glProgramUniform4dEXT_Z_Z(program, location, x, y, z, w);
}
alias glProgramUniform4dv = glProgramUniform4dv_Z_Z;
__gshared glProgramUniform4dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform4dv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform4dv_Z_Z = glbindGetProcAddress(`glProgramUniform4dv`);
  if (*cast(void**)&glProgramUniform4dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4dv' not found!`);
  glProgramUniform4dv_Z_Z(program, location, count, value);
}
alias glProgramUniform4dvEXT = glProgramUniform4dvEXT_Z_Z;
__gshared glProgramUniform4dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) { glProgramUniform4dvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glProgramUniform4dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4dvEXT`);
  if (*cast(void**)&glProgramUniform4dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4dvEXT' not found!`);
  glProgramUniform4dvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform4f = glProgramUniform4f_Z_Z;
__gshared glProgramUniform4f_Z_Z = function void (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { glProgramUniform4f_Z_Z_loader(program, location, v0, v1, v2, v3); };
private void glProgramUniform4f_Z_Z_loader (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  *cast(void**)&glProgramUniform4f_Z_Z = glbindGetProcAddress(`glProgramUniform4f`);
  if (*cast(void**)&glProgramUniform4f_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4f' not found!`);
  glProgramUniform4f_Z_Z(program, location, v0, v1, v2, v3);
}
alias glProgramUniform4fEXT = glProgramUniform4fEXT_Z_Z;
__gshared glProgramUniform4fEXT_Z_Z = function void (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { glProgramUniform4fEXT_Z_Z_loader(program, location, v0, v1, v2, v3); };
private void glProgramUniform4fEXT_Z_Z_loader (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  *cast(void**)&glProgramUniform4fEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4fEXT`);
  if (*cast(void**)&glProgramUniform4fEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4fEXT' not found!`);
  glProgramUniform4fEXT_Z_Z(program, location, v0, v1, v2, v3);
}
alias glProgramUniform4fv = glProgramUniform4fv_Z_Z;
__gshared glProgramUniform4fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform4fv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform4fv_Z_Z = glbindGetProcAddress(`glProgramUniform4fv`);
  if (*cast(void**)&glProgramUniform4fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4fv' not found!`);
  glProgramUniform4fv_Z_Z(program, location, count, value);
}
alias glProgramUniform4fvEXT = glProgramUniform4fvEXT_Z_Z;
__gshared glProgramUniform4fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) { glProgramUniform4fvEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glProgramUniform4fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4fvEXT`);
  if (*cast(void**)&glProgramUniform4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4fvEXT' not found!`);
  glProgramUniform4fvEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform4i = glProgramUniform4i_Z_Z;
__gshared glProgramUniform4i_Z_Z = function void (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { glProgramUniform4i_Z_Z_loader(program, location, v0, v1, v2, v3); };
private void glProgramUniform4i_Z_Z_loader (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  *cast(void**)&glProgramUniform4i_Z_Z = glbindGetProcAddress(`glProgramUniform4i`);
  if (*cast(void**)&glProgramUniform4i_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4i' not found!`);
  glProgramUniform4i_Z_Z(program, location, v0, v1, v2, v3);
}
alias glProgramUniform4i64ARB = glProgramUniform4i64ARB_Z_Z;
__gshared glProgramUniform4i64ARB_Z_Z = function void (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { glProgramUniform4i64ARB_Z_Z_loader(program, location, x, y, z, w); };
private void glProgramUniform4i64ARB_Z_Z_loader (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  *cast(void**)&glProgramUniform4i64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform4i64ARB`);
  if (*cast(void**)&glProgramUniform4i64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64ARB' not found!`);
  glProgramUniform4i64ARB_Z_Z(program, location, x, y, z, w);
}
alias glProgramUniform4i64NV = glProgramUniform4i64NV_Z_Z;
__gshared glProgramUniform4i64NV_Z_Z = function void (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { glProgramUniform4i64NV_Z_Z_loader(program, location, x, y, z, w); };
private void glProgramUniform4i64NV_Z_Z_loader (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  *cast(void**)&glProgramUniform4i64NV_Z_Z = glbindGetProcAddress(`glProgramUniform4i64NV`);
  if (*cast(void**)&glProgramUniform4i64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64NV' not found!`);
  glProgramUniform4i64NV_Z_Z(program, location, x, y, z, w);
}
alias glProgramUniform4i64vARB = glProgramUniform4i64vARB_Z_Z;
__gshared glProgramUniform4i64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64)* value) { glProgramUniform4i64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4i64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glProgramUniform4i64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform4i64vARB`);
  if (*cast(void**)&glProgramUniform4i64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64vARB' not found!`);
  glProgramUniform4i64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform4i64vNV = glProgramUniform4i64vNV_Z_Z;
__gshared glProgramUniform4i64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) { glProgramUniform4i64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4i64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glProgramUniform4i64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform4i64vNV`);
  if (*cast(void**)&glProgramUniform4i64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4i64vNV' not found!`);
  glProgramUniform4i64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform4iEXT = glProgramUniform4iEXT_Z_Z;
__gshared glProgramUniform4iEXT_Z_Z = function void (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { glProgramUniform4iEXT_Z_Z_loader(program, location, v0, v1, v2, v3); };
private void glProgramUniform4iEXT_Z_Z_loader (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  *cast(void**)&glProgramUniform4iEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4iEXT`);
  if (*cast(void**)&glProgramUniform4iEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4iEXT' not found!`);
  glProgramUniform4iEXT_Z_Z(program, location, v0, v1, v2, v3);
}
alias glProgramUniform4iv = glProgramUniform4iv_Z_Z;
__gshared glProgramUniform4iv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform4iv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4iv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform4iv_Z_Z = glbindGetProcAddress(`glProgramUniform4iv`);
  if (*cast(void**)&glProgramUniform4iv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4iv' not found!`);
  glProgramUniform4iv_Z_Z(program, location, count, value);
}
alias glProgramUniform4ivEXT = glProgramUniform4ivEXT_Z_Z;
__gshared glProgramUniform4ivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLint)* value) { glProgramUniform4ivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4ivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glProgramUniform4ivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4ivEXT`);
  if (*cast(void**)&glProgramUniform4ivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4ivEXT' not found!`);
  glProgramUniform4ivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniform4ui = glProgramUniform4ui_Z_Z;
__gshared glProgramUniform4ui_Z_Z = function void (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { glProgramUniform4ui_Z_Z_loader(program, location, v0, v1, v2, v3); };
private void glProgramUniform4ui_Z_Z_loader (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  *cast(void**)&glProgramUniform4ui_Z_Z = glbindGetProcAddress(`glProgramUniform4ui`);
  if (*cast(void**)&glProgramUniform4ui_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui' not found!`);
  glProgramUniform4ui_Z_Z(program, location, v0, v1, v2, v3);
}
alias glProgramUniform4ui64ARB = glProgramUniform4ui64ARB_Z_Z;
__gshared glProgramUniform4ui64ARB_Z_Z = function void (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { glProgramUniform4ui64ARB_Z_Z_loader(program, location, x, y, z, w); };
private void glProgramUniform4ui64ARB_Z_Z_loader (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  *cast(void**)&glProgramUniform4ui64ARB_Z_Z = glbindGetProcAddress(`glProgramUniform4ui64ARB`);
  if (*cast(void**)&glProgramUniform4ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64ARB' not found!`);
  glProgramUniform4ui64ARB_Z_Z(program, location, x, y, z, w);
}
alias glProgramUniform4ui64NV = glProgramUniform4ui64NV_Z_Z;
__gshared glProgramUniform4ui64NV_Z_Z = function void (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { glProgramUniform4ui64NV_Z_Z_loader(program, location, x, y, z, w); };
private void glProgramUniform4ui64NV_Z_Z_loader (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  *cast(void**)&glProgramUniform4ui64NV_Z_Z = glbindGetProcAddress(`glProgramUniform4ui64NV`);
  if (*cast(void**)&glProgramUniform4ui64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64NV' not found!`);
  glProgramUniform4ui64NV_Z_Z(program, location, x, y, z, w);
}
alias glProgramUniform4ui64vARB = glProgramUniform4ui64vARB_Z_Z;
__gshared glProgramUniform4ui64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) { glProgramUniform4ui64vARB_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4ui64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glProgramUniform4ui64vARB_Z_Z = glbindGetProcAddress(`glProgramUniform4ui64vARB`);
  if (*cast(void**)&glProgramUniform4ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64vARB' not found!`);
  glProgramUniform4ui64vARB_Z_Z(program, location, count, value);
}
alias glProgramUniform4ui64vNV = glProgramUniform4ui64vNV_Z_Z;
__gshared glProgramUniform4ui64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) { glProgramUniform4ui64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4ui64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glProgramUniform4ui64vNV_Z_Z = glbindGetProcAddress(`glProgramUniform4ui64vNV`);
  if (*cast(void**)&glProgramUniform4ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4ui64vNV' not found!`);
  glProgramUniform4ui64vNV_Z_Z(program, location, count, value);
}
alias glProgramUniform4uiEXT = glProgramUniform4uiEXT_Z_Z;
__gshared glProgramUniform4uiEXT_Z_Z = function void (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { glProgramUniform4uiEXT_Z_Z_loader(program, location, v0, v1, v2, v3); };
private void glProgramUniform4uiEXT_Z_Z_loader (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  *cast(void**)&glProgramUniform4uiEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4uiEXT`);
  if (*cast(void**)&glProgramUniform4uiEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4uiEXT' not found!`);
  glProgramUniform4uiEXT_Z_Z(program, location, v0, v1, v2, v3);
}
alias glProgramUniform4uiv = glProgramUniform4uiv_Z_Z;
__gshared glProgramUniform4uiv_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform4uiv_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4uiv_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform4uiv_Z_Z = glbindGetProcAddress(`glProgramUniform4uiv`);
  if (*cast(void**)&glProgramUniform4uiv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4uiv' not found!`);
  glProgramUniform4uiv_Z_Z(program, location, count, value);
}
alias glProgramUniform4uivEXT = glProgramUniform4uivEXT_Z_Z;
__gshared glProgramUniform4uivEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint)* value) { glProgramUniform4uivEXT_Z_Z_loader(program, location, count, value); };
private void glProgramUniform4uivEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glProgramUniform4uivEXT_Z_Z = glbindGetProcAddress(`glProgramUniform4uivEXT`);
  if (*cast(void**)&glProgramUniform4uivEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniform4uivEXT' not found!`);
  glProgramUniform4uivEXT_Z_Z(program, location, count, value);
}
alias glProgramUniformHandleui64ARB = glProgramUniformHandleui64ARB_Z_Z;
__gshared glProgramUniformHandleui64ARB_Z_Z = function void (GLuint program, GLint location, GLuint64 value) { glProgramUniformHandleui64ARB_Z_Z_loader(program, location, value); };
private void glProgramUniformHandleui64ARB_Z_Z_loader (GLuint program, GLint location, GLuint64 value) {
  *cast(void**)&glProgramUniformHandleui64ARB_Z_Z = glbindGetProcAddress(`glProgramUniformHandleui64ARB`);
  if (*cast(void**)&glProgramUniformHandleui64ARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64ARB' not found!`);
  glProgramUniformHandleui64ARB_Z_Z(program, location, value);
}
alias glProgramUniformHandleui64IMG = glProgramUniformHandleui64IMG_Z_Z;
__gshared glProgramUniformHandleui64IMG_Z_Z = function void (GLuint program, GLint location, GLuint64 value) { glProgramUniformHandleui64IMG_Z_Z_loader(program, location, value); };
private void glProgramUniformHandleui64IMG_Z_Z_loader (GLuint program, GLint location, GLuint64 value) {
  *cast(void**)&glProgramUniformHandleui64IMG_Z_Z = glbindGetProcAddress(`glProgramUniformHandleui64IMG`);
  if (*cast(void**)&glProgramUniformHandleui64IMG_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64IMG' not found!`);
  glProgramUniformHandleui64IMG_Z_Z(program, location, value);
}
alias glProgramUniformHandleui64NV = glProgramUniformHandleui64NV_Z_Z;
__gshared glProgramUniformHandleui64NV_Z_Z = function void (GLuint program, GLint location, GLuint64 value) { glProgramUniformHandleui64NV_Z_Z_loader(program, location, value); };
private void glProgramUniformHandleui64NV_Z_Z_loader (GLuint program, GLint location, GLuint64 value) {
  *cast(void**)&glProgramUniformHandleui64NV_Z_Z = glbindGetProcAddress(`glProgramUniformHandleui64NV`);
  if (*cast(void**)&glProgramUniformHandleui64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64NV' not found!`);
  glProgramUniformHandleui64NV_Z_Z(program, location, value);
}
alias glProgramUniformHandleui64vARB = glProgramUniformHandleui64vARB_Z_Z;
__gshared glProgramUniformHandleui64vARB_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64)* values) { glProgramUniformHandleui64vARB_Z_Z_loader(program, location, count, values); };
private void glProgramUniformHandleui64vARB_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64)* values) {
  *cast(void**)&glProgramUniformHandleui64vARB_Z_Z = glbindGetProcAddress(`glProgramUniformHandleui64vARB`);
  if (*cast(void**)&glProgramUniformHandleui64vARB_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vARB' not found!`);
  glProgramUniformHandleui64vARB_Z_Z(program, location, count, values);
}
alias glProgramUniformHandleui64vIMG = glProgramUniformHandleui64vIMG_Z_Z;
__gshared glProgramUniformHandleui64vIMG_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64)* values) { glProgramUniformHandleui64vIMG_Z_Z_loader(program, location, count, values); };
private void glProgramUniformHandleui64vIMG_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64)* values) {
  *cast(void**)&glProgramUniformHandleui64vIMG_Z_Z = glbindGetProcAddress(`glProgramUniformHandleui64vIMG`);
  if (*cast(void**)&glProgramUniformHandleui64vIMG_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vIMG' not found!`);
  glProgramUniformHandleui64vIMG_Z_Z(program, location, count, values);
}
alias glProgramUniformHandleui64vNV = glProgramUniformHandleui64vNV_Z_Z;
__gshared glProgramUniformHandleui64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64)* values) { glProgramUniformHandleui64vNV_Z_Z_loader(program, location, count, values); };
private void glProgramUniformHandleui64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64)* values) {
  *cast(void**)&glProgramUniformHandleui64vNV_Z_Z = glbindGetProcAddress(`glProgramUniformHandleui64vNV`);
  if (*cast(void**)&glProgramUniformHandleui64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vNV' not found!`);
  glProgramUniformHandleui64vNV_Z_Z(program, location, count, values);
}
alias glProgramUniformMatrix2dv = glProgramUniformMatrix2dv_Z_Z;
__gshared glProgramUniformMatrix2dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix2dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix2dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2dv`);
  if (*cast(void**)&glProgramUniformMatrix2dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dv' not found!`);
  glProgramUniformMatrix2dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2dvEXT = glProgramUniformMatrix2dvEXT_Z_Z;
__gshared glProgramUniformMatrix2dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix2dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix2dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dvEXT' not found!`);
  glProgramUniformMatrix2dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2fv = glProgramUniformMatrix2fv_Z_Z;
__gshared glProgramUniformMatrix2fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix2fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix2fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2fv`);
  if (*cast(void**)&glProgramUniformMatrix2fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fv' not found!`);
  glProgramUniformMatrix2fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2fvEXT = glProgramUniformMatrix2fvEXT_Z_Z;
__gshared glProgramUniformMatrix2fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix2fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix2fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fvEXT' not found!`);
  glProgramUniformMatrix2fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x3dv = glProgramUniformMatrix2x3dv_Z_Z;
__gshared glProgramUniformMatrix2x3dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix2x3dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x3dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix2x3dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3dv`);
  if (*cast(void**)&glProgramUniformMatrix2x3dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dv' not found!`);
  glProgramUniformMatrix2x3dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x3dvEXT = glProgramUniformMatrix2x3dvEXT_Z_Z;
__gshared glProgramUniformMatrix2x3dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix2x3dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x3dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix2x3dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dvEXT' not found!`);
  glProgramUniformMatrix2x3dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x3fv = glProgramUniformMatrix2x3fv_Z_Z;
__gshared glProgramUniformMatrix2x3fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix2x3fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x3fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix2x3fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3fv`);
  if (*cast(void**)&glProgramUniformMatrix2x3fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fv' not found!`);
  glProgramUniformMatrix2x3fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x3fvEXT = glProgramUniformMatrix2x3fvEXT_Z_Z;
__gshared glProgramUniformMatrix2x3fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix2x3fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x3fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix2x3fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x3fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x3fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fvEXT' not found!`);
  glProgramUniformMatrix2x3fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x4dv = glProgramUniformMatrix2x4dv_Z_Z;
__gshared glProgramUniformMatrix2x4dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix2x4dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x4dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix2x4dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4dv`);
  if (*cast(void**)&glProgramUniformMatrix2x4dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dv' not found!`);
  glProgramUniformMatrix2x4dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x4dvEXT = glProgramUniformMatrix2x4dvEXT_Z_Z;
__gshared glProgramUniformMatrix2x4dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix2x4dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x4dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix2x4dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x4dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dvEXT' not found!`);
  glProgramUniformMatrix2x4dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x4fv = glProgramUniformMatrix2x4fv_Z_Z;
__gshared glProgramUniformMatrix2x4fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix2x4fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x4fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix2x4fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4fv`);
  if (*cast(void**)&glProgramUniformMatrix2x4fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fv' not found!`);
  glProgramUniformMatrix2x4fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix2x4fvEXT = glProgramUniformMatrix2x4fvEXT_Z_Z;
__gshared glProgramUniformMatrix2x4fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix2x4fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix2x4fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix2x4fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix2x4fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix2x4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fvEXT' not found!`);
  glProgramUniformMatrix2x4fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3dv = glProgramUniformMatrix3dv_Z_Z;
__gshared glProgramUniformMatrix3dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix3dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix3dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3dv`);
  if (*cast(void**)&glProgramUniformMatrix3dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dv' not found!`);
  glProgramUniformMatrix3dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3dvEXT = glProgramUniformMatrix3dvEXT_Z_Z;
__gshared glProgramUniformMatrix3dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix3dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix3dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dvEXT' not found!`);
  glProgramUniformMatrix3dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3fv = glProgramUniformMatrix3fv_Z_Z;
__gshared glProgramUniformMatrix3fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix3fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix3fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3fv`);
  if (*cast(void**)&glProgramUniformMatrix3fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fv' not found!`);
  glProgramUniformMatrix3fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3fvEXT = glProgramUniformMatrix3fvEXT_Z_Z;
__gshared glProgramUniformMatrix3fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix3fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix3fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fvEXT' not found!`);
  glProgramUniformMatrix3fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x2dv = glProgramUniformMatrix3x2dv_Z_Z;
__gshared glProgramUniformMatrix3x2dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix3x2dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x2dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix3x2dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2dv`);
  if (*cast(void**)&glProgramUniformMatrix3x2dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dv' not found!`);
  glProgramUniformMatrix3x2dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x2dvEXT = glProgramUniformMatrix3x2dvEXT_Z_Z;
__gshared glProgramUniformMatrix3x2dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix3x2dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x2dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix3x2dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x2dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dvEXT' not found!`);
  glProgramUniformMatrix3x2dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x2fv = glProgramUniformMatrix3x2fv_Z_Z;
__gshared glProgramUniformMatrix3x2fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix3x2fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x2fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix3x2fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2fv`);
  if (*cast(void**)&glProgramUniformMatrix3x2fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fv' not found!`);
  glProgramUniformMatrix3x2fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x2fvEXT = glProgramUniformMatrix3x2fvEXT_Z_Z;
__gshared glProgramUniformMatrix3x2fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix3x2fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x2fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix3x2fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x2fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x2fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fvEXT' not found!`);
  glProgramUniformMatrix3x2fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x4dv = glProgramUniformMatrix3x4dv_Z_Z;
__gshared glProgramUniformMatrix3x4dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix3x4dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x4dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix3x4dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4dv`);
  if (*cast(void**)&glProgramUniformMatrix3x4dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dv' not found!`);
  glProgramUniformMatrix3x4dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x4dvEXT = glProgramUniformMatrix3x4dvEXT_Z_Z;
__gshared glProgramUniformMatrix3x4dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix3x4dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x4dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix3x4dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x4dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dvEXT' not found!`);
  glProgramUniformMatrix3x4dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x4fv = glProgramUniformMatrix3x4fv_Z_Z;
__gshared glProgramUniformMatrix3x4fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix3x4fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x4fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix3x4fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4fv`);
  if (*cast(void**)&glProgramUniformMatrix3x4fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fv' not found!`);
  glProgramUniformMatrix3x4fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix3x4fvEXT = glProgramUniformMatrix3x4fvEXT_Z_Z;
__gshared glProgramUniformMatrix3x4fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix3x4fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix3x4fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix3x4fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix3x4fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix3x4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fvEXT' not found!`);
  glProgramUniformMatrix3x4fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4dv = glProgramUniformMatrix4dv_Z_Z;
__gshared glProgramUniformMatrix4dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix4dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix4dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4dv`);
  if (*cast(void**)&glProgramUniformMatrix4dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dv' not found!`);
  glProgramUniformMatrix4dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4dvEXT = glProgramUniformMatrix4dvEXT_Z_Z;
__gshared glProgramUniformMatrix4dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix4dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix4dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dvEXT' not found!`);
  glProgramUniformMatrix4dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4fv = glProgramUniformMatrix4fv_Z_Z;
__gshared glProgramUniformMatrix4fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix4fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix4fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4fv`);
  if (*cast(void**)&glProgramUniformMatrix4fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fv' not found!`);
  glProgramUniformMatrix4fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4fvEXT = glProgramUniformMatrix4fvEXT_Z_Z;
__gshared glProgramUniformMatrix4fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix4fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix4fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fvEXT' not found!`);
  glProgramUniformMatrix4fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x2dv = glProgramUniformMatrix4x2dv_Z_Z;
__gshared glProgramUniformMatrix4x2dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix4x2dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x2dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix4x2dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2dv`);
  if (*cast(void**)&glProgramUniformMatrix4x2dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dv' not found!`);
  glProgramUniformMatrix4x2dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x2dvEXT = glProgramUniformMatrix4x2dvEXT_Z_Z;
__gshared glProgramUniformMatrix4x2dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix4x2dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x2dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix4x2dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x2dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dvEXT' not found!`);
  glProgramUniformMatrix4x2dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x2fv = glProgramUniformMatrix4x2fv_Z_Z;
__gshared glProgramUniformMatrix4x2fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix4x2fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x2fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix4x2fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2fv`);
  if (*cast(void**)&glProgramUniformMatrix4x2fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fv' not found!`);
  glProgramUniformMatrix4x2fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x2fvEXT = glProgramUniformMatrix4x2fvEXT_Z_Z;
__gshared glProgramUniformMatrix4x2fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix4x2fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x2fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix4x2fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x2fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x2fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fvEXT' not found!`);
  glProgramUniformMatrix4x2fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x3dv = glProgramUniformMatrix4x3dv_Z_Z;
__gshared glProgramUniformMatrix4x3dv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix4x3dv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x3dv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix4x3dv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3dv`);
  if (*cast(void**)&glProgramUniformMatrix4x3dv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dv' not found!`);
  glProgramUniformMatrix4x3dv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x3dvEXT = glProgramUniformMatrix4x3dvEXT_Z_Z;
__gshared glProgramUniformMatrix4x3dvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glProgramUniformMatrix4x3dvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x3dvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glProgramUniformMatrix4x3dvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3dvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dvEXT' not found!`);
  glProgramUniformMatrix4x3dvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x3fv = glProgramUniformMatrix4x3fv_Z_Z;
__gshared glProgramUniformMatrix4x3fv_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix4x3fv_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x3fv_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix4x3fv_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3fv`);
  if (*cast(void**)&glProgramUniformMatrix4x3fv_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fv' not found!`);
  glProgramUniformMatrix4x3fv_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformMatrix4x3fvEXT = glProgramUniformMatrix4x3fvEXT_Z_Z;
__gshared glProgramUniformMatrix4x3fvEXT_Z_Z = function void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glProgramUniformMatrix4x3fvEXT_Z_Z_loader(program, location, count, transpose, value); };
private void glProgramUniformMatrix4x3fvEXT_Z_Z_loader (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glProgramUniformMatrix4x3fvEXT_Z_Z = glbindGetProcAddress(`glProgramUniformMatrix4x3fvEXT`);
  if (*cast(void**)&glProgramUniformMatrix4x3fvEXT_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fvEXT' not found!`);
  glProgramUniformMatrix4x3fvEXT_Z_Z(program, location, count, transpose, value);
}
alias glProgramUniformui64NV = glProgramUniformui64NV_Z_Z;
__gshared glProgramUniformui64NV_Z_Z = function void (GLuint program, GLint location, GLuint64EXT value) { glProgramUniformui64NV_Z_Z_loader(program, location, value); };
private void glProgramUniformui64NV_Z_Z_loader (GLuint program, GLint location, GLuint64EXT value) {
  *cast(void**)&glProgramUniformui64NV_Z_Z = glbindGetProcAddress(`glProgramUniformui64NV`);
  if (*cast(void**)&glProgramUniformui64NV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformui64NV' not found!`);
  glProgramUniformui64NV_Z_Z(program, location, value);
}
alias glProgramUniformui64vNV = glProgramUniformui64vNV_Z_Z;
__gshared glProgramUniformui64vNV_Z_Z = function void (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) { glProgramUniformui64vNV_Z_Z_loader(program, location, count, value); };
private void glProgramUniformui64vNV_Z_Z_loader (GLuint program, GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glProgramUniformui64vNV_Z_Z = glbindGetProcAddress(`glProgramUniformui64vNV`);
  if (*cast(void**)&glProgramUniformui64vNV_Z_Z is null) assert(0, `OpenGL function 'glProgramUniformui64vNV' not found!`);
  glProgramUniformui64vNV_Z_Z(program, location, count, value);
}
alias glProgramVertexLimitNV = glProgramVertexLimitNV_Z_Z;
__gshared glProgramVertexLimitNV_Z_Z = function void (GLenum target, GLint limit) { glProgramVertexLimitNV_Z_Z_loader(target, limit); };
private void glProgramVertexLimitNV_Z_Z_loader (GLenum target, GLint limit) {
  *cast(void**)&glProgramVertexLimitNV_Z_Z = glbindGetProcAddress(`glProgramVertexLimitNV`);
  if (*cast(void**)&glProgramVertexLimitNV_Z_Z is null) assert(0, `OpenGL function 'glProgramVertexLimitNV' not found!`);
  glProgramVertexLimitNV_Z_Z(target, limit);
}
alias glProvokingVertex = glProvokingVertex_Z_Z;
__gshared glProvokingVertex_Z_Z = function void (GLenum mode) { glProvokingVertex_Z_Z_loader(mode); };
private void glProvokingVertex_Z_Z_loader (GLenum mode) {
  *cast(void**)&glProvokingVertex_Z_Z = glbindGetProcAddress(`glProvokingVertex`);
  if (*cast(void**)&glProvokingVertex_Z_Z is null) assert(0, `OpenGL function 'glProvokingVertex' not found!`);
  glProvokingVertex_Z_Z(mode);
}
alias glProvokingVertexEXT = glProvokingVertexEXT_Z_Z;
__gshared glProvokingVertexEXT_Z_Z = function void (GLenum mode) { glProvokingVertexEXT_Z_Z_loader(mode); };
private void glProvokingVertexEXT_Z_Z_loader (GLenum mode) {
  *cast(void**)&glProvokingVertexEXT_Z_Z = glbindGetProcAddress(`glProvokingVertexEXT`);
  if (*cast(void**)&glProvokingVertexEXT_Z_Z is null) assert(0, `OpenGL function 'glProvokingVertexEXT' not found!`);
  glProvokingVertexEXT_Z_Z(mode);
}
alias glPushAttrib = glPushAttrib_Z_Z;
__gshared glPushAttrib_Z_Z = function void (GLbitfield mask) { glPushAttrib_Z_Z_loader(mask); };
private void glPushAttrib_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glPushAttrib_Z_Z = glbindGetProcAddress(`glPushAttrib`);
  if (*cast(void**)&glPushAttrib_Z_Z is null) assert(0, `OpenGL function 'glPushAttrib' not found!`);
  glPushAttrib_Z_Z(mask);
}
alias glPushClientAttrib = glPushClientAttrib_Z_Z;
__gshared glPushClientAttrib_Z_Z = function void (GLbitfield mask) { glPushClientAttrib_Z_Z_loader(mask); };
private void glPushClientAttrib_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glPushClientAttrib_Z_Z = glbindGetProcAddress(`glPushClientAttrib`);
  if (*cast(void**)&glPushClientAttrib_Z_Z is null) assert(0, `OpenGL function 'glPushClientAttrib' not found!`);
  glPushClientAttrib_Z_Z(mask);
}
alias glPushClientAttribDefaultEXT = glPushClientAttribDefaultEXT_Z_Z;
__gshared glPushClientAttribDefaultEXT_Z_Z = function void (GLbitfield mask) { glPushClientAttribDefaultEXT_Z_Z_loader(mask); };
private void glPushClientAttribDefaultEXT_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glPushClientAttribDefaultEXT_Z_Z = glbindGetProcAddress(`glPushClientAttribDefaultEXT`);
  if (*cast(void**)&glPushClientAttribDefaultEXT_Z_Z is null) assert(0, `OpenGL function 'glPushClientAttribDefaultEXT' not found!`);
  glPushClientAttribDefaultEXT_Z_Z(mask);
}
alias glPushDebugGroup = glPushDebugGroup_Z_Z;
__gshared glPushDebugGroup_Z_Z = function void (GLenum source, GLuint id, GLsizei length, const(GLchar)* message) { glPushDebugGroup_Z_Z_loader(source, id, length, message); };
private void glPushDebugGroup_Z_Z_loader (GLenum source, GLuint id, GLsizei length, const(GLchar)* message) {
  *cast(void**)&glPushDebugGroup_Z_Z = glbindGetProcAddress(`glPushDebugGroup`);
  if (*cast(void**)&glPushDebugGroup_Z_Z is null) assert(0, `OpenGL function 'glPushDebugGroup' not found!`);
  glPushDebugGroup_Z_Z(source, id, length, message);
}
alias glPushDebugGroupKHR = glPushDebugGroupKHR_Z_Z;
__gshared glPushDebugGroupKHR_Z_Z = function void (GLenum source, GLuint id, GLsizei length, const(GLchar)* message) { glPushDebugGroupKHR_Z_Z_loader(source, id, length, message); };
private void glPushDebugGroupKHR_Z_Z_loader (GLenum source, GLuint id, GLsizei length, const(GLchar)* message) {
  *cast(void**)&glPushDebugGroupKHR_Z_Z = glbindGetProcAddress(`glPushDebugGroupKHR`);
  if (*cast(void**)&glPushDebugGroupKHR_Z_Z is null) assert(0, `OpenGL function 'glPushDebugGroupKHR' not found!`);
  glPushDebugGroupKHR_Z_Z(source, id, length, message);
}
alias glPushGroupMarkerEXT = glPushGroupMarkerEXT_Z_Z;
__gshared glPushGroupMarkerEXT_Z_Z = function void (GLsizei length, const(GLchar)* marker) { glPushGroupMarkerEXT_Z_Z_loader(length, marker); };
private void glPushGroupMarkerEXT_Z_Z_loader (GLsizei length, const(GLchar)* marker) {
  *cast(void**)&glPushGroupMarkerEXT_Z_Z = glbindGetProcAddress(`glPushGroupMarkerEXT`);
  if (*cast(void**)&glPushGroupMarkerEXT_Z_Z is null) assert(0, `OpenGL function 'glPushGroupMarkerEXT' not found!`);
  glPushGroupMarkerEXT_Z_Z(length, marker);
}
alias glPushMatrix = glPushMatrix_Z_Z;
__gshared glPushMatrix_Z_Z = function void () { glPushMatrix_Z_Z_loader(); };
private void glPushMatrix_Z_Z_loader () {
  *cast(void**)&glPushMatrix_Z_Z = glbindGetProcAddress(`glPushMatrix`);
  if (*cast(void**)&glPushMatrix_Z_Z is null) assert(0, `OpenGL function 'glPushMatrix' not found!`);
  glPushMatrix_Z_Z();
}
alias glPushName = glPushName_Z_Z;
__gshared glPushName_Z_Z = function void (GLuint name) { glPushName_Z_Z_loader(name); };
private void glPushName_Z_Z_loader (GLuint name) {
  *cast(void**)&glPushName_Z_Z = glbindGetProcAddress(`glPushName`);
  if (*cast(void**)&glPushName_Z_Z is null) assert(0, `OpenGL function 'glPushName' not found!`);
  glPushName_Z_Z(name);
}
alias glQueryCounter = glQueryCounter_Z_Z;
__gshared glQueryCounter_Z_Z = function void (GLuint id, GLenum target) { glQueryCounter_Z_Z_loader(id, target); };
private void glQueryCounter_Z_Z_loader (GLuint id, GLenum target) {
  *cast(void**)&glQueryCounter_Z_Z = glbindGetProcAddress(`glQueryCounter`);
  if (*cast(void**)&glQueryCounter_Z_Z is null) assert(0, `OpenGL function 'glQueryCounter' not found!`);
  glQueryCounter_Z_Z(id, target);
}
alias glQueryCounterEXT = glQueryCounterEXT_Z_Z;
__gshared glQueryCounterEXT_Z_Z = function void (GLuint id, GLenum target) { glQueryCounterEXT_Z_Z_loader(id, target); };
private void glQueryCounterEXT_Z_Z_loader (GLuint id, GLenum target) {
  *cast(void**)&glQueryCounterEXT_Z_Z = glbindGetProcAddress(`glQueryCounterEXT`);
  if (*cast(void**)&glQueryCounterEXT_Z_Z is null) assert(0, `OpenGL function 'glQueryCounterEXT' not found!`);
  glQueryCounterEXT_Z_Z(id, target);
}
alias glQueryMatrixxOES = glQueryMatrixxOES_Z_Z;
__gshared glQueryMatrixxOES_Z_Z = function GLbitfield (GLfixed *mantissa, GLint *exponent) { return glQueryMatrixxOES_Z_Z_loader(mantissa, exponent); };
private GLbitfield glQueryMatrixxOES_Z_Z_loader (GLfixed *mantissa, GLint *exponent) {
  *cast(void**)&glQueryMatrixxOES_Z_Z = glbindGetProcAddress(`glQueryMatrixxOES`);
  if (*cast(void**)&glQueryMatrixxOES_Z_Z is null) assert(0, `OpenGL function 'glQueryMatrixxOES' not found!`);
  return glQueryMatrixxOES_Z_Z(mantissa, exponent);
}
alias glQueryObjectParameteruiAMD = glQueryObjectParameteruiAMD_Z_Z;
__gshared glQueryObjectParameteruiAMD_Z_Z = function void (GLenum target, GLuint id, GLenum pname, GLuint param) { glQueryObjectParameteruiAMD_Z_Z_loader(target, id, pname, param); };
private void glQueryObjectParameteruiAMD_Z_Z_loader (GLenum target, GLuint id, GLenum pname, GLuint param) {
  *cast(void**)&glQueryObjectParameteruiAMD_Z_Z = glbindGetProcAddress(`glQueryObjectParameteruiAMD`);
  if (*cast(void**)&glQueryObjectParameteruiAMD_Z_Z is null) assert(0, `OpenGL function 'glQueryObjectParameteruiAMD' not found!`);
  glQueryObjectParameteruiAMD_Z_Z(target, id, pname, param);
}
alias glRasterPos2d = glRasterPos2d_Z_Z;
__gshared glRasterPos2d_Z_Z = function void (GLdouble x, GLdouble y) { glRasterPos2d_Z_Z_loader(x, y); };
private void glRasterPos2d_Z_Z_loader (GLdouble x, GLdouble y) {
  *cast(void**)&glRasterPos2d_Z_Z = glbindGetProcAddress(`glRasterPos2d`);
  if (*cast(void**)&glRasterPos2d_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2d' not found!`);
  glRasterPos2d_Z_Z(x, y);
}
alias glRasterPos2dv = glRasterPos2dv_Z_Z;
__gshared glRasterPos2dv_Z_Z = function void (const(GLdouble)* v) { glRasterPos2dv_Z_Z_loader(v); };
private void glRasterPos2dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glRasterPos2dv_Z_Z = glbindGetProcAddress(`glRasterPos2dv`);
  if (*cast(void**)&glRasterPos2dv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2dv' not found!`);
  glRasterPos2dv_Z_Z(v);
}
alias glRasterPos2f = glRasterPos2f_Z_Z;
__gshared glRasterPos2f_Z_Z = function void (GLfloat x, GLfloat y) { glRasterPos2f_Z_Z_loader(x, y); };
private void glRasterPos2f_Z_Z_loader (GLfloat x, GLfloat y) {
  *cast(void**)&glRasterPos2f_Z_Z = glbindGetProcAddress(`glRasterPos2f`);
  if (*cast(void**)&glRasterPos2f_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2f' not found!`);
  glRasterPos2f_Z_Z(x, y);
}
alias glRasterPos2fv = glRasterPos2fv_Z_Z;
__gshared glRasterPos2fv_Z_Z = function void (const(GLfloat)* v) { glRasterPos2fv_Z_Z_loader(v); };
private void glRasterPos2fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glRasterPos2fv_Z_Z = glbindGetProcAddress(`glRasterPos2fv`);
  if (*cast(void**)&glRasterPos2fv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2fv' not found!`);
  glRasterPos2fv_Z_Z(v);
}
alias glRasterPos2i = glRasterPos2i_Z_Z;
__gshared glRasterPos2i_Z_Z = function void (GLint x, GLint y) { glRasterPos2i_Z_Z_loader(x, y); };
private void glRasterPos2i_Z_Z_loader (GLint x, GLint y) {
  *cast(void**)&glRasterPos2i_Z_Z = glbindGetProcAddress(`glRasterPos2i`);
  if (*cast(void**)&glRasterPos2i_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2i' not found!`);
  glRasterPos2i_Z_Z(x, y);
}
alias glRasterPos2iv = glRasterPos2iv_Z_Z;
__gshared glRasterPos2iv_Z_Z = function void (const(GLint)* v) { glRasterPos2iv_Z_Z_loader(v); };
private void glRasterPos2iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glRasterPos2iv_Z_Z = glbindGetProcAddress(`glRasterPos2iv`);
  if (*cast(void**)&glRasterPos2iv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2iv' not found!`);
  glRasterPos2iv_Z_Z(v);
}
alias glRasterPos2s = glRasterPos2s_Z_Z;
__gshared glRasterPos2s_Z_Z = function void (GLshort x, GLshort y) { glRasterPos2s_Z_Z_loader(x, y); };
private void glRasterPos2s_Z_Z_loader (GLshort x, GLshort y) {
  *cast(void**)&glRasterPos2s_Z_Z = glbindGetProcAddress(`glRasterPos2s`);
  if (*cast(void**)&glRasterPos2s_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2s' not found!`);
  glRasterPos2s_Z_Z(x, y);
}
alias glRasterPos2sv = glRasterPos2sv_Z_Z;
__gshared glRasterPos2sv_Z_Z = function void (const(GLshort)* v) { glRasterPos2sv_Z_Z_loader(v); };
private void glRasterPos2sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glRasterPos2sv_Z_Z = glbindGetProcAddress(`glRasterPos2sv`);
  if (*cast(void**)&glRasterPos2sv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2sv' not found!`);
  glRasterPos2sv_Z_Z(v);
}
alias glRasterPos2xOES = glRasterPos2xOES_Z_Z;
__gshared glRasterPos2xOES_Z_Z = function void (GLfixed x, GLfixed y) { glRasterPos2xOES_Z_Z_loader(x, y); };
private void glRasterPos2xOES_Z_Z_loader (GLfixed x, GLfixed y) {
  *cast(void**)&glRasterPos2xOES_Z_Z = glbindGetProcAddress(`glRasterPos2xOES`);
  if (*cast(void**)&glRasterPos2xOES_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2xOES' not found!`);
  glRasterPos2xOES_Z_Z(x, y);
}
alias glRasterPos2xvOES = glRasterPos2xvOES_Z_Z;
__gshared glRasterPos2xvOES_Z_Z = function void (const(GLfixed)* coords) { glRasterPos2xvOES_Z_Z_loader(coords); };
private void glRasterPos2xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glRasterPos2xvOES_Z_Z = glbindGetProcAddress(`glRasterPos2xvOES`);
  if (*cast(void**)&glRasterPos2xvOES_Z_Z is null) assert(0, `OpenGL function 'glRasterPos2xvOES' not found!`);
  glRasterPos2xvOES_Z_Z(coords);
}
alias glRasterPos3d = glRasterPos3d_Z_Z;
__gshared glRasterPos3d_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z) { glRasterPos3d_Z_Z_loader(x, y, z); };
private void glRasterPos3d_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glRasterPos3d_Z_Z = glbindGetProcAddress(`glRasterPos3d`);
  if (*cast(void**)&glRasterPos3d_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3d' not found!`);
  glRasterPos3d_Z_Z(x, y, z);
}
alias glRasterPos3dv = glRasterPos3dv_Z_Z;
__gshared glRasterPos3dv_Z_Z = function void (const(GLdouble)* v) { glRasterPos3dv_Z_Z_loader(v); };
private void glRasterPos3dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glRasterPos3dv_Z_Z = glbindGetProcAddress(`glRasterPos3dv`);
  if (*cast(void**)&glRasterPos3dv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3dv' not found!`);
  glRasterPos3dv_Z_Z(v);
}
alias glRasterPos3f = glRasterPos3f_Z_Z;
__gshared glRasterPos3f_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z) { glRasterPos3f_Z_Z_loader(x, y, z); };
private void glRasterPos3f_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glRasterPos3f_Z_Z = glbindGetProcAddress(`glRasterPos3f`);
  if (*cast(void**)&glRasterPos3f_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3f' not found!`);
  glRasterPos3f_Z_Z(x, y, z);
}
alias glRasterPos3fv = glRasterPos3fv_Z_Z;
__gshared glRasterPos3fv_Z_Z = function void (const(GLfloat)* v) { glRasterPos3fv_Z_Z_loader(v); };
private void glRasterPos3fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glRasterPos3fv_Z_Z = glbindGetProcAddress(`glRasterPos3fv`);
  if (*cast(void**)&glRasterPos3fv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3fv' not found!`);
  glRasterPos3fv_Z_Z(v);
}
alias glRasterPos3i = glRasterPos3i_Z_Z;
__gshared glRasterPos3i_Z_Z = function void (GLint x, GLint y, GLint z) { glRasterPos3i_Z_Z_loader(x, y, z); };
private void glRasterPos3i_Z_Z_loader (GLint x, GLint y, GLint z) {
  *cast(void**)&glRasterPos3i_Z_Z = glbindGetProcAddress(`glRasterPos3i`);
  if (*cast(void**)&glRasterPos3i_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3i' not found!`);
  glRasterPos3i_Z_Z(x, y, z);
}
alias glRasterPos3iv = glRasterPos3iv_Z_Z;
__gshared glRasterPos3iv_Z_Z = function void (const(GLint)* v) { glRasterPos3iv_Z_Z_loader(v); };
private void glRasterPos3iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glRasterPos3iv_Z_Z = glbindGetProcAddress(`glRasterPos3iv`);
  if (*cast(void**)&glRasterPos3iv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3iv' not found!`);
  glRasterPos3iv_Z_Z(v);
}
alias glRasterPos3s = glRasterPos3s_Z_Z;
__gshared glRasterPos3s_Z_Z = function void (GLshort x, GLshort y, GLshort z) { glRasterPos3s_Z_Z_loader(x, y, z); };
private void glRasterPos3s_Z_Z_loader (GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glRasterPos3s_Z_Z = glbindGetProcAddress(`glRasterPos3s`);
  if (*cast(void**)&glRasterPos3s_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3s' not found!`);
  glRasterPos3s_Z_Z(x, y, z);
}
alias glRasterPos3sv = glRasterPos3sv_Z_Z;
__gshared glRasterPos3sv_Z_Z = function void (const(GLshort)* v) { glRasterPos3sv_Z_Z_loader(v); };
private void glRasterPos3sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glRasterPos3sv_Z_Z = glbindGetProcAddress(`glRasterPos3sv`);
  if (*cast(void**)&glRasterPos3sv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3sv' not found!`);
  glRasterPos3sv_Z_Z(v);
}
alias glRasterPos3xOES = glRasterPos3xOES_Z_Z;
__gshared glRasterPos3xOES_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z) { glRasterPos3xOES_Z_Z_loader(x, y, z); };
private void glRasterPos3xOES_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glRasterPos3xOES_Z_Z = glbindGetProcAddress(`glRasterPos3xOES`);
  if (*cast(void**)&glRasterPos3xOES_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3xOES' not found!`);
  glRasterPos3xOES_Z_Z(x, y, z);
}
alias glRasterPos3xvOES = glRasterPos3xvOES_Z_Z;
__gshared glRasterPos3xvOES_Z_Z = function void (const(GLfixed)* coords) { glRasterPos3xvOES_Z_Z_loader(coords); };
private void glRasterPos3xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glRasterPos3xvOES_Z_Z = glbindGetProcAddress(`glRasterPos3xvOES`);
  if (*cast(void**)&glRasterPos3xvOES_Z_Z is null) assert(0, `OpenGL function 'glRasterPos3xvOES' not found!`);
  glRasterPos3xvOES_Z_Z(coords);
}
alias glRasterPos4d = glRasterPos4d_Z_Z;
__gshared glRasterPos4d_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glRasterPos4d_Z_Z_loader(x, y, z, w); };
private void glRasterPos4d_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glRasterPos4d_Z_Z = glbindGetProcAddress(`glRasterPos4d`);
  if (*cast(void**)&glRasterPos4d_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4d' not found!`);
  glRasterPos4d_Z_Z(x, y, z, w);
}
alias glRasterPos4dv = glRasterPos4dv_Z_Z;
__gshared glRasterPos4dv_Z_Z = function void (const(GLdouble)* v) { glRasterPos4dv_Z_Z_loader(v); };
private void glRasterPos4dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glRasterPos4dv_Z_Z = glbindGetProcAddress(`glRasterPos4dv`);
  if (*cast(void**)&glRasterPos4dv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4dv' not found!`);
  glRasterPos4dv_Z_Z(v);
}
alias glRasterPos4f = glRasterPos4f_Z_Z;
__gshared glRasterPos4f_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glRasterPos4f_Z_Z_loader(x, y, z, w); };
private void glRasterPos4f_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glRasterPos4f_Z_Z = glbindGetProcAddress(`glRasterPos4f`);
  if (*cast(void**)&glRasterPos4f_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4f' not found!`);
  glRasterPos4f_Z_Z(x, y, z, w);
}
alias glRasterPos4fv = glRasterPos4fv_Z_Z;
__gshared glRasterPos4fv_Z_Z = function void (const(GLfloat)* v) { glRasterPos4fv_Z_Z_loader(v); };
private void glRasterPos4fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glRasterPos4fv_Z_Z = glbindGetProcAddress(`glRasterPos4fv`);
  if (*cast(void**)&glRasterPos4fv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4fv' not found!`);
  glRasterPos4fv_Z_Z(v);
}
alias glRasterPos4i = glRasterPos4i_Z_Z;
__gshared glRasterPos4i_Z_Z = function void (GLint x, GLint y, GLint z, GLint w) { glRasterPos4i_Z_Z_loader(x, y, z, w); };
private void glRasterPos4i_Z_Z_loader (GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glRasterPos4i_Z_Z = glbindGetProcAddress(`glRasterPos4i`);
  if (*cast(void**)&glRasterPos4i_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4i' not found!`);
  glRasterPos4i_Z_Z(x, y, z, w);
}
alias glRasterPos4iv = glRasterPos4iv_Z_Z;
__gshared glRasterPos4iv_Z_Z = function void (const(GLint)* v) { glRasterPos4iv_Z_Z_loader(v); };
private void glRasterPos4iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glRasterPos4iv_Z_Z = glbindGetProcAddress(`glRasterPos4iv`);
  if (*cast(void**)&glRasterPos4iv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4iv' not found!`);
  glRasterPos4iv_Z_Z(v);
}
alias glRasterPos4s = glRasterPos4s_Z_Z;
__gshared glRasterPos4s_Z_Z = function void (GLshort x, GLshort y, GLshort z, GLshort w) { glRasterPos4s_Z_Z_loader(x, y, z, w); };
private void glRasterPos4s_Z_Z_loader (GLshort x, GLshort y, GLshort z, GLshort w) {
  *cast(void**)&glRasterPos4s_Z_Z = glbindGetProcAddress(`glRasterPos4s`);
  if (*cast(void**)&glRasterPos4s_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4s' not found!`);
  glRasterPos4s_Z_Z(x, y, z, w);
}
alias glRasterPos4sv = glRasterPos4sv_Z_Z;
__gshared glRasterPos4sv_Z_Z = function void (const(GLshort)* v) { glRasterPos4sv_Z_Z_loader(v); };
private void glRasterPos4sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glRasterPos4sv_Z_Z = glbindGetProcAddress(`glRasterPos4sv`);
  if (*cast(void**)&glRasterPos4sv_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4sv' not found!`);
  glRasterPos4sv_Z_Z(v);
}
alias glRasterPos4xOES = glRasterPos4xOES_Z_Z;
__gshared glRasterPos4xOES_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z, GLfixed w) { glRasterPos4xOES_Z_Z_loader(x, y, z, w); };
private void glRasterPos4xOES_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z, GLfixed w) {
  *cast(void**)&glRasterPos4xOES_Z_Z = glbindGetProcAddress(`glRasterPos4xOES`);
  if (*cast(void**)&glRasterPos4xOES_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4xOES' not found!`);
  glRasterPos4xOES_Z_Z(x, y, z, w);
}
alias glRasterPos4xvOES = glRasterPos4xvOES_Z_Z;
__gshared glRasterPos4xvOES_Z_Z = function void (const(GLfixed)* coords) { glRasterPos4xvOES_Z_Z_loader(coords); };
private void glRasterPos4xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glRasterPos4xvOES_Z_Z = glbindGetProcAddress(`glRasterPos4xvOES`);
  if (*cast(void**)&glRasterPos4xvOES_Z_Z is null) assert(0, `OpenGL function 'glRasterPos4xvOES' not found!`);
  glRasterPos4xvOES_Z_Z(coords);
}
alias glRasterSamplesEXT = glRasterSamplesEXT_Z_Z;
__gshared glRasterSamplesEXT_Z_Z = function void (GLuint samples, GLboolean fixedsamplelocations) { glRasterSamplesEXT_Z_Z_loader(samples, fixedsamplelocations); };
private void glRasterSamplesEXT_Z_Z_loader (GLuint samples, GLboolean fixedsamplelocations) {
  *cast(void**)&glRasterSamplesEXT_Z_Z = glbindGetProcAddress(`glRasterSamplesEXT`);
  if (*cast(void**)&glRasterSamplesEXT_Z_Z is null) assert(0, `OpenGL function 'glRasterSamplesEXT' not found!`);
  glRasterSamplesEXT_Z_Z(samples, fixedsamplelocations);
}
alias glReadBuffer = glReadBuffer_Z_Z;
__gshared glReadBuffer_Z_Z = function void (GLenum src) { glReadBuffer_Z_Z_loader(src); };
private void glReadBuffer_Z_Z_loader (GLenum src) {
  *cast(void**)&glReadBuffer_Z_Z = glbindGetProcAddress(`glReadBuffer`);
  if (*cast(void**)&glReadBuffer_Z_Z is null) assert(0, `OpenGL function 'glReadBuffer' not found!`);
  glReadBuffer_Z_Z(src);
}
alias glReadBufferIndexedEXT = glReadBufferIndexedEXT_Z_Z;
__gshared glReadBufferIndexedEXT_Z_Z = function void (GLenum src, GLint index) { glReadBufferIndexedEXT_Z_Z_loader(src, index); };
private void glReadBufferIndexedEXT_Z_Z_loader (GLenum src, GLint index) {
  *cast(void**)&glReadBufferIndexedEXT_Z_Z = glbindGetProcAddress(`glReadBufferIndexedEXT`);
  if (*cast(void**)&glReadBufferIndexedEXT_Z_Z is null) assert(0, `OpenGL function 'glReadBufferIndexedEXT' not found!`);
  glReadBufferIndexedEXT_Z_Z(src, index);
}
alias glReadBufferNV = glReadBufferNV_Z_Z;
__gshared glReadBufferNV_Z_Z = function void (GLenum mode) { glReadBufferNV_Z_Z_loader(mode); };
private void glReadBufferNV_Z_Z_loader (GLenum mode) {
  *cast(void**)&glReadBufferNV_Z_Z = glbindGetProcAddress(`glReadBufferNV`);
  if (*cast(void**)&glReadBufferNV_Z_Z is null) assert(0, `OpenGL function 'glReadBufferNV' not found!`);
  glReadBufferNV_Z_Z(mode);
}
alias glReadInstrumentsSGIX = glReadInstrumentsSGIX_Z_Z;
__gshared glReadInstrumentsSGIX_Z_Z = function void (GLint marker) { glReadInstrumentsSGIX_Z_Z_loader(marker); };
private void glReadInstrumentsSGIX_Z_Z_loader (GLint marker) {
  *cast(void**)&glReadInstrumentsSGIX_Z_Z = glbindGetProcAddress(`glReadInstrumentsSGIX`);
  if (*cast(void**)&glReadInstrumentsSGIX_Z_Z is null) assert(0, `OpenGL function 'glReadInstrumentsSGIX' not found!`);
  glReadInstrumentsSGIX_Z_Z(marker);
}
alias glReadPixels = glReadPixels_Z_Z;
__gshared glReadPixels_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) { glReadPixels_Z_Z_loader(x, y, width, height, format, type, pixels); };
private void glReadPixels_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {
  *cast(void**)&glReadPixels_Z_Z = glbindGetProcAddress(`glReadPixels`);
  if (*cast(void**)&glReadPixels_Z_Z is null) assert(0, `OpenGL function 'glReadPixels' not found!`);
  glReadPixels_Z_Z(x, y, width, height, format, type, pixels);
}
alias glReadnPixels = glReadnPixels_Z_Z;
__gshared glReadnPixels_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { glReadnPixels_Z_Z_loader(x, y, width, height, format, type, bufSize, data); };
private void glReadnPixels_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
  *cast(void**)&glReadnPixels_Z_Z = glbindGetProcAddress(`glReadnPixels`);
  if (*cast(void**)&glReadnPixels_Z_Z is null) assert(0, `OpenGL function 'glReadnPixels' not found!`);
  glReadnPixels_Z_Z(x, y, width, height, format, type, bufSize, data);
}
alias glReadnPixelsARB = glReadnPixelsARB_Z_Z;
__gshared glReadnPixelsARB_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { glReadnPixelsARB_Z_Z_loader(x, y, width, height, format, type, bufSize, data); };
private void glReadnPixelsARB_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
  *cast(void**)&glReadnPixelsARB_Z_Z = glbindGetProcAddress(`glReadnPixelsARB`);
  if (*cast(void**)&glReadnPixelsARB_Z_Z is null) assert(0, `OpenGL function 'glReadnPixelsARB' not found!`);
  glReadnPixelsARB_Z_Z(x, y, width, height, format, type, bufSize, data);
}
alias glReadnPixelsEXT = glReadnPixelsEXT_Z_Z;
__gshared glReadnPixelsEXT_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { glReadnPixelsEXT_Z_Z_loader(x, y, width, height, format, type, bufSize, data); };
private void glReadnPixelsEXT_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
  *cast(void**)&glReadnPixelsEXT_Z_Z = glbindGetProcAddress(`glReadnPixelsEXT`);
  if (*cast(void**)&glReadnPixelsEXT_Z_Z is null) assert(0, `OpenGL function 'glReadnPixelsEXT' not found!`);
  glReadnPixelsEXT_Z_Z(x, y, width, height, format, type, bufSize, data);
}
alias glReadnPixelsKHR = glReadnPixelsKHR_Z_Z;
__gshared glReadnPixelsKHR_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { glReadnPixelsKHR_Z_Z_loader(x, y, width, height, format, type, bufSize, data); };
private void glReadnPixelsKHR_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
  *cast(void**)&glReadnPixelsKHR_Z_Z = glbindGetProcAddress(`glReadnPixelsKHR`);
  if (*cast(void**)&glReadnPixelsKHR_Z_Z is null) assert(0, `OpenGL function 'glReadnPixelsKHR' not found!`);
  glReadnPixelsKHR_Z_Z(x, y, width, height, format, type, bufSize, data);
}
alias glReleaseKeyedMutexWin32EXT = glReleaseKeyedMutexWin32EXT_Z_Z;
__gshared glReleaseKeyedMutexWin32EXT_Z_Z = function GLboolean (GLuint memory, GLuint64 key) { return glReleaseKeyedMutexWin32EXT_Z_Z_loader(memory, key); };
private GLboolean glReleaseKeyedMutexWin32EXT_Z_Z_loader (GLuint memory, GLuint64 key) {
  *cast(void**)&glReleaseKeyedMutexWin32EXT_Z_Z = glbindGetProcAddress(`glReleaseKeyedMutexWin32EXT`);
  if (*cast(void**)&glReleaseKeyedMutexWin32EXT_Z_Z is null) assert(0, `OpenGL function 'glReleaseKeyedMutexWin32EXT' not found!`);
  return glReleaseKeyedMutexWin32EXT_Z_Z(memory, key);
}
alias glRectd = glRectd_Z_Z;
__gshared glRectd_Z_Z = function void (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { glRectd_Z_Z_loader(x1, y1, x2, y2); };
private void glRectd_Z_Z_loader (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
  *cast(void**)&glRectd_Z_Z = glbindGetProcAddress(`glRectd`);
  if (*cast(void**)&glRectd_Z_Z is null) assert(0, `OpenGL function 'glRectd' not found!`);
  glRectd_Z_Z(x1, y1, x2, y2);
}
alias glRectdv = glRectdv_Z_Z;
__gshared glRectdv_Z_Z = function void (const(GLdouble)* v1, const(GLdouble)* v2) { glRectdv_Z_Z_loader(v1, v2); };
private void glRectdv_Z_Z_loader (const(GLdouble)* v1, const(GLdouble)* v2) {
  *cast(void**)&glRectdv_Z_Z = glbindGetProcAddress(`glRectdv`);
  if (*cast(void**)&glRectdv_Z_Z is null) assert(0, `OpenGL function 'glRectdv' not found!`);
  glRectdv_Z_Z(v1, v2);
}
alias glRectf = glRectf_Z_Z;
__gshared glRectf_Z_Z = function void (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { glRectf_Z_Z_loader(x1, y1, x2, y2); };
private void glRectf_Z_Z_loader (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
  *cast(void**)&glRectf_Z_Z = glbindGetProcAddress(`glRectf`);
  if (*cast(void**)&glRectf_Z_Z is null) assert(0, `OpenGL function 'glRectf' not found!`);
  glRectf_Z_Z(x1, y1, x2, y2);
}
alias glRectfv = glRectfv_Z_Z;
__gshared glRectfv_Z_Z = function void (const(GLfloat)* v1, const(GLfloat)* v2) { glRectfv_Z_Z_loader(v1, v2); };
private void glRectfv_Z_Z_loader (const(GLfloat)* v1, const(GLfloat)* v2) {
  *cast(void**)&glRectfv_Z_Z = glbindGetProcAddress(`glRectfv`);
  if (*cast(void**)&glRectfv_Z_Z is null) assert(0, `OpenGL function 'glRectfv' not found!`);
  glRectfv_Z_Z(v1, v2);
}
alias glRecti = glRecti_Z_Z;
__gshared glRecti_Z_Z = function void (GLint x1, GLint y1, GLint x2, GLint y2) { glRecti_Z_Z_loader(x1, y1, x2, y2); };
private void glRecti_Z_Z_loader (GLint x1, GLint y1, GLint x2, GLint y2) {
  *cast(void**)&glRecti_Z_Z = glbindGetProcAddress(`glRecti`);
  if (*cast(void**)&glRecti_Z_Z is null) assert(0, `OpenGL function 'glRecti' not found!`);
  glRecti_Z_Z(x1, y1, x2, y2);
}
alias glRectiv = glRectiv_Z_Z;
__gshared glRectiv_Z_Z = function void (const(GLint)* v1, const(GLint)* v2) { glRectiv_Z_Z_loader(v1, v2); };
private void glRectiv_Z_Z_loader (const(GLint)* v1, const(GLint)* v2) {
  *cast(void**)&glRectiv_Z_Z = glbindGetProcAddress(`glRectiv`);
  if (*cast(void**)&glRectiv_Z_Z is null) assert(0, `OpenGL function 'glRectiv' not found!`);
  glRectiv_Z_Z(v1, v2);
}
alias glRects = glRects_Z_Z;
__gshared glRects_Z_Z = function void (GLshort x1, GLshort y1, GLshort x2, GLshort y2) { glRects_Z_Z_loader(x1, y1, x2, y2); };
private void glRects_Z_Z_loader (GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
  *cast(void**)&glRects_Z_Z = glbindGetProcAddress(`glRects`);
  if (*cast(void**)&glRects_Z_Z is null) assert(0, `OpenGL function 'glRects' not found!`);
  glRects_Z_Z(x1, y1, x2, y2);
}
alias glRectsv = glRectsv_Z_Z;
__gshared glRectsv_Z_Z = function void (const(GLshort)* v1, const(GLshort)* v2) { glRectsv_Z_Z_loader(v1, v2); };
private void glRectsv_Z_Z_loader (const(GLshort)* v1, const(GLshort)* v2) {
  *cast(void**)&glRectsv_Z_Z = glbindGetProcAddress(`glRectsv`);
  if (*cast(void**)&glRectsv_Z_Z is null) assert(0, `OpenGL function 'glRectsv' not found!`);
  glRectsv_Z_Z(v1, v2);
}
alias glRectxOES = glRectxOES_Z_Z;
__gshared glRectxOES_Z_Z = function void (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { glRectxOES_Z_Z_loader(x1, y1, x2, y2); };
private void glRectxOES_Z_Z_loader (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) {
  *cast(void**)&glRectxOES_Z_Z = glbindGetProcAddress(`glRectxOES`);
  if (*cast(void**)&glRectxOES_Z_Z is null) assert(0, `OpenGL function 'glRectxOES' not found!`);
  glRectxOES_Z_Z(x1, y1, x2, y2);
}
alias glRectxvOES = glRectxvOES_Z_Z;
__gshared glRectxvOES_Z_Z = function void (const(GLfixed)* v1, const(GLfixed)* v2) { glRectxvOES_Z_Z_loader(v1, v2); };
private void glRectxvOES_Z_Z_loader (const(GLfixed)* v1, const(GLfixed)* v2) {
  *cast(void**)&glRectxvOES_Z_Z = glbindGetProcAddress(`glRectxvOES`);
  if (*cast(void**)&glRectxvOES_Z_Z is null) assert(0, `OpenGL function 'glRectxvOES' not found!`);
  glRectxvOES_Z_Z(v1, v2);
}
alias glReferencePlaneSGIX = glReferencePlaneSGIX_Z_Z;
__gshared glReferencePlaneSGIX_Z_Z = function void (const(GLdouble)* equation) { glReferencePlaneSGIX_Z_Z_loader(equation); };
private void glReferencePlaneSGIX_Z_Z_loader (const(GLdouble)* equation) {
  *cast(void**)&glReferencePlaneSGIX_Z_Z = glbindGetProcAddress(`glReferencePlaneSGIX`);
  if (*cast(void**)&glReferencePlaneSGIX_Z_Z is null) assert(0, `OpenGL function 'glReferencePlaneSGIX' not found!`);
  glReferencePlaneSGIX_Z_Z(equation);
}
alias glReleaseShaderCompiler = glReleaseShaderCompiler_Z_Z;
__gshared glReleaseShaderCompiler_Z_Z = function void () { glReleaseShaderCompiler_Z_Z_loader(); };
private void glReleaseShaderCompiler_Z_Z_loader () {
  *cast(void**)&glReleaseShaderCompiler_Z_Z = glbindGetProcAddress(`glReleaseShaderCompiler`);
  if (*cast(void**)&glReleaseShaderCompiler_Z_Z is null) assert(0, `OpenGL function 'glReleaseShaderCompiler' not found!`);
  glReleaseShaderCompiler_Z_Z();
}
alias glRenderGpuMaskNV = glRenderGpuMaskNV_Z_Z;
__gshared glRenderGpuMaskNV_Z_Z = function void (GLbitfield mask) { glRenderGpuMaskNV_Z_Z_loader(mask); };
private void glRenderGpuMaskNV_Z_Z_loader (GLbitfield mask) {
  *cast(void**)&glRenderGpuMaskNV_Z_Z = glbindGetProcAddress(`glRenderGpuMaskNV`);
  if (*cast(void**)&glRenderGpuMaskNV_Z_Z is null) assert(0, `OpenGL function 'glRenderGpuMaskNV' not found!`);
  glRenderGpuMaskNV_Z_Z(mask);
}
alias glRenderMode = glRenderMode_Z_Z;
__gshared glRenderMode_Z_Z = function GLint (GLenum mode) { return glRenderMode_Z_Z_loader(mode); };
private GLint glRenderMode_Z_Z_loader (GLenum mode) {
  *cast(void**)&glRenderMode_Z_Z = glbindGetProcAddress(`glRenderMode`);
  if (*cast(void**)&glRenderMode_Z_Z is null) assert(0, `OpenGL function 'glRenderMode' not found!`);
  return glRenderMode_Z_Z(mode);
}
alias glRenderbufferStorage = glRenderbufferStorage_Z_Z;
__gshared glRenderbufferStorage_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorage_Z_Z_loader(target, internalformat, width, height); };
private void glRenderbufferStorage_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorage_Z_Z = glbindGetProcAddress(`glRenderbufferStorage`);
  if (*cast(void**)&glRenderbufferStorage_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorage' not found!`);
  glRenderbufferStorage_Z_Z(target, internalformat, width, height);
}
alias glRenderbufferStorageEXT = glRenderbufferStorageEXT_Z_Z;
__gshared glRenderbufferStorageEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageEXT_Z_Z_loader(target, internalformat, width, height); };
private void glRenderbufferStorageEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageEXT_Z_Z = glbindGetProcAddress(`glRenderbufferStorageEXT`);
  if (*cast(void**)&glRenderbufferStorageEXT_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageEXT' not found!`);
  glRenderbufferStorageEXT_Z_Z(target, internalformat, width, height);
}
alias glRenderbufferStorageMultisample = glRenderbufferStorageMultisample_Z_Z;
__gshared glRenderbufferStorageMultisample_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageMultisample_Z_Z_loader(target, samples, internalformat, width, height); };
private void glRenderbufferStorageMultisample_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageMultisample_Z_Z = glbindGetProcAddress(`glRenderbufferStorageMultisample`);
  if (*cast(void**)&glRenderbufferStorageMultisample_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisample' not found!`);
  glRenderbufferStorageMultisample_Z_Z(target, samples, internalformat, width, height);
}
alias glRenderbufferStorageMultisampleANGLE = glRenderbufferStorageMultisampleANGLE_Z_Z;
__gshared glRenderbufferStorageMultisampleANGLE_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageMultisampleANGLE_Z_Z_loader(target, samples, internalformat, width, height); };
private void glRenderbufferStorageMultisampleANGLE_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageMultisampleANGLE_Z_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleANGLE`);
  if (*cast(void**)&glRenderbufferStorageMultisampleANGLE_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleANGLE' not found!`);
  glRenderbufferStorageMultisampleANGLE_Z_Z(target, samples, internalformat, width, height);
}
alias glRenderbufferStorageMultisampleAPPLE = glRenderbufferStorageMultisampleAPPLE_Z_Z;
__gshared glRenderbufferStorageMultisampleAPPLE_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageMultisampleAPPLE_Z_Z_loader(target, samples, internalformat, width, height); };
private void glRenderbufferStorageMultisampleAPPLE_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageMultisampleAPPLE_Z_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleAPPLE`);
  if (*cast(void**)&glRenderbufferStorageMultisampleAPPLE_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleAPPLE' not found!`);
  glRenderbufferStorageMultisampleAPPLE_Z_Z(target, samples, internalformat, width, height);
}
alias glRenderbufferStorageMultisampleCoverageNV = glRenderbufferStorageMultisampleCoverageNV_Z_Z;
__gshared glRenderbufferStorageMultisampleCoverageNV_Z_Z = function void (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageMultisampleCoverageNV_Z_Z_loader(target, coverageSamples, colorSamples, internalformat, width, height); };
private void glRenderbufferStorageMultisampleCoverageNV_Z_Z_loader (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageMultisampleCoverageNV_Z_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleCoverageNV`);
  if (*cast(void**)&glRenderbufferStorageMultisampleCoverageNV_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleCoverageNV' not found!`);
  glRenderbufferStorageMultisampleCoverageNV_Z_Z(target, coverageSamples, colorSamples, internalformat, width, height);
}
alias glRenderbufferStorageMultisampleEXT = glRenderbufferStorageMultisampleEXT_Z_Z;
__gshared glRenderbufferStorageMultisampleEXT_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageMultisampleEXT_Z_Z_loader(target, samples, internalformat, width, height); };
private void glRenderbufferStorageMultisampleEXT_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageMultisampleEXT_Z_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleEXT`);
  if (*cast(void**)&glRenderbufferStorageMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleEXT' not found!`);
  glRenderbufferStorageMultisampleEXT_Z_Z(target, samples, internalformat, width, height);
}
alias glRenderbufferStorageMultisampleIMG = glRenderbufferStorageMultisampleIMG_Z_Z;
__gshared glRenderbufferStorageMultisampleIMG_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageMultisampleIMG_Z_Z_loader(target, samples, internalformat, width, height); };
private void glRenderbufferStorageMultisampleIMG_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageMultisampleIMG_Z_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleIMG`);
  if (*cast(void**)&glRenderbufferStorageMultisampleIMG_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleIMG' not found!`);
  glRenderbufferStorageMultisampleIMG_Z_Z(target, samples, internalformat, width, height);
}
alias glRenderbufferStorageMultisampleNV = glRenderbufferStorageMultisampleNV_Z_Z;
__gshared glRenderbufferStorageMultisampleNV_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageMultisampleNV_Z_Z_loader(target, samples, internalformat, width, height); };
private void glRenderbufferStorageMultisampleNV_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageMultisampleNV_Z_Z = glbindGetProcAddress(`glRenderbufferStorageMultisampleNV`);
  if (*cast(void**)&glRenderbufferStorageMultisampleNV_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleNV' not found!`);
  glRenderbufferStorageMultisampleNV_Z_Z(target, samples, internalformat, width, height);
}
alias glRenderbufferStorageOES = glRenderbufferStorageOES_Z_Z;
__gshared glRenderbufferStorageOES_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { glRenderbufferStorageOES_Z_Z_loader(target, internalformat, width, height); };
private void glRenderbufferStorageOES_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glRenderbufferStorageOES_Z_Z = glbindGetProcAddress(`glRenderbufferStorageOES`);
  if (*cast(void**)&glRenderbufferStorageOES_Z_Z is null) assert(0, `OpenGL function 'glRenderbufferStorageOES' not found!`);
  glRenderbufferStorageOES_Z_Z(target, internalformat, width, height);
}
alias glReplacementCodePointerSUN = glReplacementCodePointerSUN_Z_Z;
__gshared glReplacementCodePointerSUN_Z_Z = function void (GLenum type, GLsizei stride, const(void)** pointer) { glReplacementCodePointerSUN_Z_Z_loader(type, stride, pointer); };
private void glReplacementCodePointerSUN_Z_Z_loader (GLenum type, GLsizei stride, const(void)** pointer) {
  *cast(void**)&glReplacementCodePointerSUN_Z_Z = glbindGetProcAddress(`glReplacementCodePointerSUN`);
  if (*cast(void**)&glReplacementCodePointerSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodePointerSUN' not found!`);
  glReplacementCodePointerSUN_Z_Z(type, stride, pointer);
}
alias glReplacementCodeubSUN = glReplacementCodeubSUN_Z_Z;
__gshared glReplacementCodeubSUN_Z_Z = function void (GLubyte code) { glReplacementCodeubSUN_Z_Z_loader(code); };
private void glReplacementCodeubSUN_Z_Z_loader (GLubyte code) {
  *cast(void**)&glReplacementCodeubSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeubSUN`);
  if (*cast(void**)&glReplacementCodeubSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeubSUN' not found!`);
  glReplacementCodeubSUN_Z_Z(code);
}
alias glReplacementCodeubvSUN = glReplacementCodeubvSUN_Z_Z;
__gshared glReplacementCodeubvSUN_Z_Z = function void (const(GLubyte)* code) { glReplacementCodeubvSUN_Z_Z_loader(code); };
private void glReplacementCodeubvSUN_Z_Z_loader (const(GLubyte)* code) {
  *cast(void**)&glReplacementCodeubvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeubvSUN`);
  if (*cast(void**)&glReplacementCodeubvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeubvSUN' not found!`);
  glReplacementCodeubvSUN_Z_Z(code);
}
alias glReplacementCodeuiColor3fVertex3fSUN = glReplacementCodeuiColor3fVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiColor3fVertex3fSUN_Z_Z = function void (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiColor3fVertex3fSUN_Z_Z_loader(rc, r, g, b, x, y, z); };
private void glReplacementCodeuiColor3fVertex3fSUN_Z_Z_loader (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiColor3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiColor3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiColor3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fSUN' not found!`);
  glReplacementCodeuiColor3fVertex3fSUN_Z_Z(rc, r, g, b, x, y, z);
}
alias glReplacementCodeuiColor3fVertex3fvSUN = glReplacementCodeuiColor3fVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiColor3fVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLfloat)* c, const(GLfloat)* v) { glReplacementCodeuiColor3fVertex3fvSUN_Z_Z_loader(rc, c, v); };
private void glReplacementCodeuiColor3fVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLfloat)* c, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiColor3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiColor3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiColor3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fvSUN' not found!`);
  glReplacementCodeuiColor3fVertex3fvSUN_Z_Z(rc, c, v);
}
alias glReplacementCodeuiColor4fNormal3fVertex3fSUN = glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z_Z = function void (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z_Z_loader(rc, r, g, b, a, nx, ny, nz, x, y, z); };
private void glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z_Z_loader (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiColor4fNormal3fVertex3fSUN_Z_Z(rc, r, g, b, a, nx, ny, nz, x, y, z);
}
alias glReplacementCodeuiColor4fNormal3fVertex3fvSUN = glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) { glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z_Z_loader(rc, c, n, v); };
private void glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Z_Z(rc, c, n, v);
}
alias glReplacementCodeuiColor4ubVertex3fSUN = glReplacementCodeuiColor4ubVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiColor4ubVertex3fSUN_Z_Z = function void (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiColor4ubVertex3fSUN_Z_Z_loader(rc, r, g, b, a, x, y, z); };
private void glReplacementCodeuiColor4ubVertex3fSUN_Z_Z_loader (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiColor4ubVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiColor4ubVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4ubVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fSUN' not found!`);
  glReplacementCodeuiColor4ubVertex3fSUN_Z_Z(rc, r, g, b, a, x, y, z);
}
alias glReplacementCodeuiColor4ubVertex3fvSUN = glReplacementCodeuiColor4ubVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiColor4ubVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLubyte)* c, const(GLfloat)* v) { glReplacementCodeuiColor4ubVertex3fvSUN_Z_Z_loader(rc, c, v); };
private void glReplacementCodeuiColor4ubVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLubyte)* c, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiColor4ubVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiColor4ubVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiColor4ubVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fvSUN' not found!`);
  glReplacementCodeuiColor4ubVertex3fvSUN_Z_Z(rc, c, v);
}
alias glReplacementCodeuiNormal3fVertex3fSUN = glReplacementCodeuiNormal3fVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiNormal3fVertex3fSUN_Z_Z = function void (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiNormal3fVertex3fSUN_Z_Z_loader(rc, nx, ny, nz, x, y, z); };
private void glReplacementCodeuiNormal3fVertex3fSUN_Z_Z_loader (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiNormal3fVertex3fSUN_Z_Z(rc, nx, ny, nz, x, y, z);
}
alias glReplacementCodeuiNormal3fVertex3fvSUN = glReplacementCodeuiNormal3fVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiNormal3fVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLfloat)* n, const(GLfloat)* v) { glReplacementCodeuiNormal3fVertex3fvSUN_Z_Z_loader(rc, n, v); };
private void glReplacementCodeuiNormal3fVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiNormal3fVertex3fvSUN_Z_Z(rc, n, v);
}
alias glReplacementCodeuiSUN = glReplacementCodeuiSUN_Z_Z;
__gshared glReplacementCodeuiSUN_Z_Z = function void (GLuint code) { glReplacementCodeuiSUN_Z_Z_loader(code); };
private void glReplacementCodeuiSUN_Z_Z_loader (GLuint code) {
  *cast(void**)&glReplacementCodeuiSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiSUN`);
  if (*cast(void**)&glReplacementCodeuiSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiSUN' not found!`);
  glReplacementCodeuiSUN_Z_Z(code);
}
alias glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z = function void (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z_loader(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); };
private void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z_loader (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}
alias glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) { glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z_loader(rc, tc, c, n, v); };
private void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z(rc, tc, c, n, v);
}
alias glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z_Z = function void (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z_Z_loader(rc, s, t, nx, ny, nz, x, y, z); };
private void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z_Z_loader (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Z_Z(rc, s, t, nx, ny, nz, x, y, z);
}
alias glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLfloat)* tc, const(GLfloat)* n, const(GLfloat)* v) { glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z_Z_loader(rc, tc, n, v); };
private void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLfloat)* tc, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Z_Z(rc, tc, n, v);
}
alias glReplacementCodeuiTexCoord2fVertex3fSUN = glReplacementCodeuiTexCoord2fVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiTexCoord2fVertex3fSUN_Z_Z = function void (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiTexCoord2fVertex3fSUN_Z_Z_loader(rc, s, t, x, y, z); };
private void glReplacementCodeuiTexCoord2fVertex3fSUN_Z_Z_loader (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiTexCoord2fVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fSUN' not found!`);
  glReplacementCodeuiTexCoord2fVertex3fSUN_Z_Z(rc, s, t, x, y, z);
}
alias glReplacementCodeuiTexCoord2fVertex3fvSUN = glReplacementCodeuiTexCoord2fVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiTexCoord2fVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLfloat)* tc, const(GLfloat)* v) { glReplacementCodeuiTexCoord2fVertex3fvSUN_Z_Z_loader(rc, tc, v); };
private void glReplacementCodeuiTexCoord2fVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLfloat)* tc, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiTexCoord2fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiTexCoord2fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fvSUN' not found!`);
  glReplacementCodeuiTexCoord2fVertex3fvSUN_Z_Z(rc, tc, v);
}
alias glReplacementCodeuiVertex3fSUN = glReplacementCodeuiVertex3fSUN_Z_Z;
__gshared glReplacementCodeuiVertex3fSUN_Z_Z = function void (GLuint rc, GLfloat x, GLfloat y, GLfloat z) { glReplacementCodeuiVertex3fSUN_Z_Z_loader(rc, x, y, z); };
private void glReplacementCodeuiVertex3fSUN_Z_Z_loader (GLuint rc, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glReplacementCodeuiVertex3fSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiVertex3fSUN`);
  if (*cast(void**)&glReplacementCodeuiVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fSUN' not found!`);
  glReplacementCodeuiVertex3fSUN_Z_Z(rc, x, y, z);
}
alias glReplacementCodeuiVertex3fvSUN = glReplacementCodeuiVertex3fvSUN_Z_Z;
__gshared glReplacementCodeuiVertex3fvSUN_Z_Z = function void (const(GLuint)* rc, const(GLfloat)* v) { glReplacementCodeuiVertex3fvSUN_Z_Z_loader(rc, v); };
private void glReplacementCodeuiVertex3fvSUN_Z_Z_loader (const(GLuint)* rc, const(GLfloat)* v) {
  *cast(void**)&glReplacementCodeuiVertex3fvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuiVertex3fvSUN`);
  if (*cast(void**)&glReplacementCodeuiVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fvSUN' not found!`);
  glReplacementCodeuiVertex3fvSUN_Z_Z(rc, v);
}
alias glReplacementCodeuivSUN = glReplacementCodeuivSUN_Z_Z;
__gshared glReplacementCodeuivSUN_Z_Z = function void (const(GLuint)* code) { glReplacementCodeuivSUN_Z_Z_loader(code); };
private void glReplacementCodeuivSUN_Z_Z_loader (const(GLuint)* code) {
  *cast(void**)&glReplacementCodeuivSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeuivSUN`);
  if (*cast(void**)&glReplacementCodeuivSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeuivSUN' not found!`);
  glReplacementCodeuivSUN_Z_Z(code);
}
alias glReplacementCodeusSUN = glReplacementCodeusSUN_Z_Z;
__gshared glReplacementCodeusSUN_Z_Z = function void (GLushort code) { glReplacementCodeusSUN_Z_Z_loader(code); };
private void glReplacementCodeusSUN_Z_Z_loader (GLushort code) {
  *cast(void**)&glReplacementCodeusSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeusSUN`);
  if (*cast(void**)&glReplacementCodeusSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeusSUN' not found!`);
  glReplacementCodeusSUN_Z_Z(code);
}
alias glReplacementCodeusvSUN = glReplacementCodeusvSUN_Z_Z;
__gshared glReplacementCodeusvSUN_Z_Z = function void (const(GLushort)* code) { glReplacementCodeusvSUN_Z_Z_loader(code); };
private void glReplacementCodeusvSUN_Z_Z_loader (const(GLushort)* code) {
  *cast(void**)&glReplacementCodeusvSUN_Z_Z = glbindGetProcAddress(`glReplacementCodeusvSUN`);
  if (*cast(void**)&glReplacementCodeusvSUN_Z_Z is null) assert(0, `OpenGL function 'glReplacementCodeusvSUN' not found!`);
  glReplacementCodeusvSUN_Z_Z(code);
}
alias glRequestResidentProgramsNV = glRequestResidentProgramsNV_Z_Z;
__gshared glRequestResidentProgramsNV_Z_Z = function void (GLsizei n, const(GLuint)* programs) { glRequestResidentProgramsNV_Z_Z_loader(n, programs); };
private void glRequestResidentProgramsNV_Z_Z_loader (GLsizei n, const(GLuint)* programs) {
  *cast(void**)&glRequestResidentProgramsNV_Z_Z = glbindGetProcAddress(`glRequestResidentProgramsNV`);
  if (*cast(void**)&glRequestResidentProgramsNV_Z_Z is null) assert(0, `OpenGL function 'glRequestResidentProgramsNV' not found!`);
  glRequestResidentProgramsNV_Z_Z(n, programs);
}
alias glResetHistogram = glResetHistogram_Z_Z;
__gshared glResetHistogram_Z_Z = function void (GLenum target) { glResetHistogram_Z_Z_loader(target); };
private void glResetHistogram_Z_Z_loader (GLenum target) {
  *cast(void**)&glResetHistogram_Z_Z = glbindGetProcAddress(`glResetHistogram`);
  if (*cast(void**)&glResetHistogram_Z_Z is null) assert(0, `OpenGL function 'glResetHistogram' not found!`);
  glResetHistogram_Z_Z(target);
}
alias glResetHistogramEXT = glResetHistogramEXT_Z_Z;
__gshared glResetHistogramEXT_Z_Z = function void (GLenum target) { glResetHistogramEXT_Z_Z_loader(target); };
private void glResetHistogramEXT_Z_Z_loader (GLenum target) {
  *cast(void**)&glResetHistogramEXT_Z_Z = glbindGetProcAddress(`glResetHistogramEXT`);
  if (*cast(void**)&glResetHistogramEXT_Z_Z is null) assert(0, `OpenGL function 'glResetHistogramEXT' not found!`);
  glResetHistogramEXT_Z_Z(target);
}
alias glResetMinmax = glResetMinmax_Z_Z;
__gshared glResetMinmax_Z_Z = function void (GLenum target) { glResetMinmax_Z_Z_loader(target); };
private void glResetMinmax_Z_Z_loader (GLenum target) {
  *cast(void**)&glResetMinmax_Z_Z = glbindGetProcAddress(`glResetMinmax`);
  if (*cast(void**)&glResetMinmax_Z_Z is null) assert(0, `OpenGL function 'glResetMinmax' not found!`);
  glResetMinmax_Z_Z(target);
}
alias glResetMinmaxEXT = glResetMinmaxEXT_Z_Z;
__gshared glResetMinmaxEXT_Z_Z = function void (GLenum target) { glResetMinmaxEXT_Z_Z_loader(target); };
private void glResetMinmaxEXT_Z_Z_loader (GLenum target) {
  *cast(void**)&glResetMinmaxEXT_Z_Z = glbindGetProcAddress(`glResetMinmaxEXT`);
  if (*cast(void**)&glResetMinmaxEXT_Z_Z is null) assert(0, `OpenGL function 'glResetMinmaxEXT' not found!`);
  glResetMinmaxEXT_Z_Z(target);
}
alias glResizeBuffersMESA = glResizeBuffersMESA_Z_Z;
__gshared glResizeBuffersMESA_Z_Z = function void () { glResizeBuffersMESA_Z_Z_loader(); };
private void glResizeBuffersMESA_Z_Z_loader () {
  *cast(void**)&glResizeBuffersMESA_Z_Z = glbindGetProcAddress(`glResizeBuffersMESA`);
  if (*cast(void**)&glResizeBuffersMESA_Z_Z is null) assert(0, `OpenGL function 'glResizeBuffersMESA' not found!`);
  glResizeBuffersMESA_Z_Z();
}
alias glResolveDepthValuesNV = glResolveDepthValuesNV_Z_Z;
__gshared glResolveDepthValuesNV_Z_Z = function void () { glResolveDepthValuesNV_Z_Z_loader(); };
private void glResolveDepthValuesNV_Z_Z_loader () {
  *cast(void**)&glResolveDepthValuesNV_Z_Z = glbindGetProcAddress(`glResolveDepthValuesNV`);
  if (*cast(void**)&glResolveDepthValuesNV_Z_Z is null) assert(0, `OpenGL function 'glResolveDepthValuesNV' not found!`);
  glResolveDepthValuesNV_Z_Z();
}
alias glResolveMultisampleFramebufferAPPLE = glResolveMultisampleFramebufferAPPLE_Z_Z;
__gshared glResolveMultisampleFramebufferAPPLE_Z_Z = function void () { glResolveMultisampleFramebufferAPPLE_Z_Z_loader(); };
private void glResolveMultisampleFramebufferAPPLE_Z_Z_loader () {
  *cast(void**)&glResolveMultisampleFramebufferAPPLE_Z_Z = glbindGetProcAddress(`glResolveMultisampleFramebufferAPPLE`);
  if (*cast(void**)&glResolveMultisampleFramebufferAPPLE_Z_Z is null) assert(0, `OpenGL function 'glResolveMultisampleFramebufferAPPLE' not found!`);
  glResolveMultisampleFramebufferAPPLE_Z_Z();
}
alias glResumeTransformFeedback = glResumeTransformFeedback_Z_Z;
__gshared glResumeTransformFeedback_Z_Z = function void () { glResumeTransformFeedback_Z_Z_loader(); };
private void glResumeTransformFeedback_Z_Z_loader () {
  *cast(void**)&glResumeTransformFeedback_Z_Z = glbindGetProcAddress(`glResumeTransformFeedback`);
  if (*cast(void**)&glResumeTransformFeedback_Z_Z is null) assert(0, `OpenGL function 'glResumeTransformFeedback' not found!`);
  glResumeTransformFeedback_Z_Z();
}
alias glResumeTransformFeedbackNV = glResumeTransformFeedbackNV_Z_Z;
__gshared glResumeTransformFeedbackNV_Z_Z = function void () { glResumeTransformFeedbackNV_Z_Z_loader(); };
private void glResumeTransformFeedbackNV_Z_Z_loader () {
  *cast(void**)&glResumeTransformFeedbackNV_Z_Z = glbindGetProcAddress(`glResumeTransformFeedbackNV`);
  if (*cast(void**)&glResumeTransformFeedbackNV_Z_Z is null) assert(0, `OpenGL function 'glResumeTransformFeedbackNV' not found!`);
  glResumeTransformFeedbackNV_Z_Z();
}
alias glRotated = glRotated_Z_Z;
__gshared glRotated_Z_Z = function void (GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { glRotated_Z_Z_loader(angle, x, y, z); };
private void glRotated_Z_Z_loader (GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glRotated_Z_Z = glbindGetProcAddress(`glRotated`);
  if (*cast(void**)&glRotated_Z_Z is null) assert(0, `OpenGL function 'glRotated' not found!`);
  glRotated_Z_Z(angle, x, y, z);
}
alias glRotatef = glRotatef_Z_Z;
__gshared glRotatef_Z_Z = function void (GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { glRotatef_Z_Z_loader(angle, x, y, z); };
private void glRotatef_Z_Z_loader (GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glRotatef_Z_Z = glbindGetProcAddress(`glRotatef`);
  if (*cast(void**)&glRotatef_Z_Z is null) assert(0, `OpenGL function 'glRotatef' not found!`);
  glRotatef_Z_Z(angle, x, y, z);
}
alias glRotatex = glRotatex_Z_Z;
__gshared glRotatex_Z_Z = function void (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { glRotatex_Z_Z_loader(angle, x, y, z); };
private void glRotatex_Z_Z_loader (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glRotatex_Z_Z = glbindGetProcAddress(`glRotatex`);
  if (*cast(void**)&glRotatex_Z_Z is null) assert(0, `OpenGL function 'glRotatex' not found!`);
  glRotatex_Z_Z(angle, x, y, z);
}
alias glRotatexOES = glRotatexOES_Z_Z;
__gshared glRotatexOES_Z_Z = function void (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { glRotatexOES_Z_Z_loader(angle, x, y, z); };
private void glRotatexOES_Z_Z_loader (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glRotatexOES_Z_Z = glbindGetProcAddress(`glRotatexOES`);
  if (*cast(void**)&glRotatexOES_Z_Z is null) assert(0, `OpenGL function 'glRotatexOES' not found!`);
  glRotatexOES_Z_Z(angle, x, y, z);
}
alias glSampleCoverage = glSampleCoverage_Z_Z;
__gshared glSampleCoverage_Z_Z = function void (GLfloat value, GLboolean invert) { glSampleCoverage_Z_Z_loader(value, invert); };
private void glSampleCoverage_Z_Z_loader (GLfloat value, GLboolean invert) {
  *cast(void**)&glSampleCoverage_Z_Z = glbindGetProcAddress(`glSampleCoverage`);
  if (*cast(void**)&glSampleCoverage_Z_Z is null) assert(0, `OpenGL function 'glSampleCoverage' not found!`);
  glSampleCoverage_Z_Z(value, invert);
}
alias glSampleCoverageARB = glSampleCoverageARB_Z_Z;
__gshared glSampleCoverageARB_Z_Z = function void (GLfloat value, GLboolean invert) { glSampleCoverageARB_Z_Z_loader(value, invert); };
private void glSampleCoverageARB_Z_Z_loader (GLfloat value, GLboolean invert) {
  *cast(void**)&glSampleCoverageARB_Z_Z = glbindGetProcAddress(`glSampleCoverageARB`);
  if (*cast(void**)&glSampleCoverageARB_Z_Z is null) assert(0, `OpenGL function 'glSampleCoverageARB' not found!`);
  glSampleCoverageARB_Z_Z(value, invert);
}
alias glSampleCoveragex = glSampleCoveragex_Z_Z;
__gshared glSampleCoveragex_Z_Z = function void (GLclampx value, GLboolean invert) { glSampleCoveragex_Z_Z_loader(value, invert); };
private void glSampleCoveragex_Z_Z_loader (GLclampx value, GLboolean invert) {
  *cast(void**)&glSampleCoveragex_Z_Z = glbindGetProcAddress(`glSampleCoveragex`);
  if (*cast(void**)&glSampleCoveragex_Z_Z is null) assert(0, `OpenGL function 'glSampleCoveragex' not found!`);
  glSampleCoveragex_Z_Z(value, invert);
}
alias glSampleCoveragexOES = glSampleCoveragexOES_Z_Z;
__gshared glSampleCoveragexOES_Z_Z = function void (GLclampx value, GLboolean invert) { glSampleCoveragexOES_Z_Z_loader(value, invert); };
private void glSampleCoveragexOES_Z_Z_loader (GLclampx value, GLboolean invert) {
  *cast(void**)&glSampleCoveragexOES_Z_Z = glbindGetProcAddress(`glSampleCoveragexOES`);
  if (*cast(void**)&glSampleCoveragexOES_Z_Z is null) assert(0, `OpenGL function 'glSampleCoveragexOES' not found!`);
  glSampleCoveragexOES_Z_Z(value, invert);
}
alias glSampleMapATI = glSampleMapATI_Z_Z;
__gshared glSampleMapATI_Z_Z = function void (GLuint dst, GLuint interp, GLenum swizzle) { glSampleMapATI_Z_Z_loader(dst, interp, swizzle); };
private void glSampleMapATI_Z_Z_loader (GLuint dst, GLuint interp, GLenum swizzle) {
  *cast(void**)&glSampleMapATI_Z_Z = glbindGetProcAddress(`glSampleMapATI`);
  if (*cast(void**)&glSampleMapATI_Z_Z is null) assert(0, `OpenGL function 'glSampleMapATI' not found!`);
  glSampleMapATI_Z_Z(dst, interp, swizzle);
}
alias glSampleMaskEXT = glSampleMaskEXT_Z_Z;
__gshared glSampleMaskEXT_Z_Z = function void (GLclampf value, GLboolean invert) { glSampleMaskEXT_Z_Z_loader(value, invert); };
private void glSampleMaskEXT_Z_Z_loader (GLclampf value, GLboolean invert) {
  *cast(void**)&glSampleMaskEXT_Z_Z = glbindGetProcAddress(`glSampleMaskEXT`);
  if (*cast(void**)&glSampleMaskEXT_Z_Z is null) assert(0, `OpenGL function 'glSampleMaskEXT' not found!`);
  glSampleMaskEXT_Z_Z(value, invert);
}
alias glSampleMaskIndexedNV = glSampleMaskIndexedNV_Z_Z;
__gshared glSampleMaskIndexedNV_Z_Z = function void (GLuint index, GLbitfield mask) { glSampleMaskIndexedNV_Z_Z_loader(index, mask); };
private void glSampleMaskIndexedNV_Z_Z_loader (GLuint index, GLbitfield mask) {
  *cast(void**)&glSampleMaskIndexedNV_Z_Z = glbindGetProcAddress(`glSampleMaskIndexedNV`);
  if (*cast(void**)&glSampleMaskIndexedNV_Z_Z is null) assert(0, `OpenGL function 'glSampleMaskIndexedNV' not found!`);
  glSampleMaskIndexedNV_Z_Z(index, mask);
}
alias glSampleMaskSGIS = glSampleMaskSGIS_Z_Z;
__gshared glSampleMaskSGIS_Z_Z = function void (GLclampf value, GLboolean invert) { glSampleMaskSGIS_Z_Z_loader(value, invert); };
private void glSampleMaskSGIS_Z_Z_loader (GLclampf value, GLboolean invert) {
  *cast(void**)&glSampleMaskSGIS_Z_Z = glbindGetProcAddress(`glSampleMaskSGIS`);
  if (*cast(void**)&glSampleMaskSGIS_Z_Z is null) assert(0, `OpenGL function 'glSampleMaskSGIS' not found!`);
  glSampleMaskSGIS_Z_Z(value, invert);
}
alias glSampleMaski = glSampleMaski_Z_Z;
__gshared glSampleMaski_Z_Z = function void (GLuint maskNumber, GLbitfield mask) { glSampleMaski_Z_Z_loader(maskNumber, mask); };
private void glSampleMaski_Z_Z_loader (GLuint maskNumber, GLbitfield mask) {
  *cast(void**)&glSampleMaski_Z_Z = glbindGetProcAddress(`glSampleMaski`);
  if (*cast(void**)&glSampleMaski_Z_Z is null) assert(0, `OpenGL function 'glSampleMaski' not found!`);
  glSampleMaski_Z_Z(maskNumber, mask);
}
alias glSamplePatternEXT = glSamplePatternEXT_Z_Z;
__gshared glSamplePatternEXT_Z_Z = function void (GLenum pattern) { glSamplePatternEXT_Z_Z_loader(pattern); };
private void glSamplePatternEXT_Z_Z_loader (GLenum pattern) {
  *cast(void**)&glSamplePatternEXT_Z_Z = glbindGetProcAddress(`glSamplePatternEXT`);
  if (*cast(void**)&glSamplePatternEXT_Z_Z is null) assert(0, `OpenGL function 'glSamplePatternEXT' not found!`);
  glSamplePatternEXT_Z_Z(pattern);
}
alias glSamplePatternSGIS = glSamplePatternSGIS_Z_Z;
__gshared glSamplePatternSGIS_Z_Z = function void (GLenum pattern) { glSamplePatternSGIS_Z_Z_loader(pattern); };
private void glSamplePatternSGIS_Z_Z_loader (GLenum pattern) {
  *cast(void**)&glSamplePatternSGIS_Z_Z = glbindGetProcAddress(`glSamplePatternSGIS`);
  if (*cast(void**)&glSamplePatternSGIS_Z_Z is null) assert(0, `OpenGL function 'glSamplePatternSGIS' not found!`);
  glSamplePatternSGIS_Z_Z(pattern);
}
alias glSamplerParameterIiv = glSamplerParameterIiv_Z_Z;
__gshared glSamplerParameterIiv_Z_Z = function void (GLuint sampler, GLenum pname, const(GLint)* param) { glSamplerParameterIiv_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterIiv_Z_Z_loader (GLuint sampler, GLenum pname, const(GLint)* param) {
  *cast(void**)&glSamplerParameterIiv_Z_Z = glbindGetProcAddress(`glSamplerParameterIiv`);
  if (*cast(void**)&glSamplerParameterIiv_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterIiv' not found!`);
  glSamplerParameterIiv_Z_Z(sampler, pname, param);
}
alias glSamplerParameterIivEXT = glSamplerParameterIivEXT_Z_Z;
__gshared glSamplerParameterIivEXT_Z_Z = function void (GLuint sampler, GLenum pname, const(GLint)* param) { glSamplerParameterIivEXT_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterIivEXT_Z_Z_loader (GLuint sampler, GLenum pname, const(GLint)* param) {
  *cast(void**)&glSamplerParameterIivEXT_Z_Z = glbindGetProcAddress(`glSamplerParameterIivEXT`);
  if (*cast(void**)&glSamplerParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterIivEXT' not found!`);
  glSamplerParameterIivEXT_Z_Z(sampler, pname, param);
}
alias glSamplerParameterIivOES = glSamplerParameterIivOES_Z_Z;
__gshared glSamplerParameterIivOES_Z_Z = function void (GLuint sampler, GLenum pname, const(GLint)* param) { glSamplerParameterIivOES_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterIivOES_Z_Z_loader (GLuint sampler, GLenum pname, const(GLint)* param) {
  *cast(void**)&glSamplerParameterIivOES_Z_Z = glbindGetProcAddress(`glSamplerParameterIivOES`);
  if (*cast(void**)&glSamplerParameterIivOES_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterIivOES' not found!`);
  glSamplerParameterIivOES_Z_Z(sampler, pname, param);
}
alias glSamplerParameterIuiv = glSamplerParameterIuiv_Z_Z;
__gshared glSamplerParameterIuiv_Z_Z = function void (GLuint sampler, GLenum pname, const(GLuint)* param) { glSamplerParameterIuiv_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterIuiv_Z_Z_loader (GLuint sampler, GLenum pname, const(GLuint)* param) {
  *cast(void**)&glSamplerParameterIuiv_Z_Z = glbindGetProcAddress(`glSamplerParameterIuiv`);
  if (*cast(void**)&glSamplerParameterIuiv_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterIuiv' not found!`);
  glSamplerParameterIuiv_Z_Z(sampler, pname, param);
}
alias glSamplerParameterIuivEXT = glSamplerParameterIuivEXT_Z_Z;
__gshared glSamplerParameterIuivEXT_Z_Z = function void (GLuint sampler, GLenum pname, const(GLuint)* param) { glSamplerParameterIuivEXT_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterIuivEXT_Z_Z_loader (GLuint sampler, GLenum pname, const(GLuint)* param) {
  *cast(void**)&glSamplerParameterIuivEXT_Z_Z = glbindGetProcAddress(`glSamplerParameterIuivEXT`);
  if (*cast(void**)&glSamplerParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterIuivEXT' not found!`);
  glSamplerParameterIuivEXT_Z_Z(sampler, pname, param);
}
alias glSamplerParameterIuivOES = glSamplerParameterIuivOES_Z_Z;
__gshared glSamplerParameterIuivOES_Z_Z = function void (GLuint sampler, GLenum pname, const(GLuint)* param) { glSamplerParameterIuivOES_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterIuivOES_Z_Z_loader (GLuint sampler, GLenum pname, const(GLuint)* param) {
  *cast(void**)&glSamplerParameterIuivOES_Z_Z = glbindGetProcAddress(`glSamplerParameterIuivOES`);
  if (*cast(void**)&glSamplerParameterIuivOES_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterIuivOES' not found!`);
  glSamplerParameterIuivOES_Z_Z(sampler, pname, param);
}
alias glSamplerParameterf = glSamplerParameterf_Z_Z;
__gshared glSamplerParameterf_Z_Z = function void (GLuint sampler, GLenum pname, GLfloat param) { glSamplerParameterf_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterf_Z_Z_loader (GLuint sampler, GLenum pname, GLfloat param) {
  *cast(void**)&glSamplerParameterf_Z_Z = glbindGetProcAddress(`glSamplerParameterf`);
  if (*cast(void**)&glSamplerParameterf_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterf' not found!`);
  glSamplerParameterf_Z_Z(sampler, pname, param);
}
alias glSamplerParameterfv = glSamplerParameterfv_Z_Z;
__gshared glSamplerParameterfv_Z_Z = function void (GLuint sampler, GLenum pname, const(GLfloat)* param) { glSamplerParameterfv_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameterfv_Z_Z_loader (GLuint sampler, GLenum pname, const(GLfloat)* param) {
  *cast(void**)&glSamplerParameterfv_Z_Z = glbindGetProcAddress(`glSamplerParameterfv`);
  if (*cast(void**)&glSamplerParameterfv_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameterfv' not found!`);
  glSamplerParameterfv_Z_Z(sampler, pname, param);
}
alias glSamplerParameteri = glSamplerParameteri_Z_Z;
__gshared glSamplerParameteri_Z_Z = function void (GLuint sampler, GLenum pname, GLint param) { glSamplerParameteri_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameteri_Z_Z_loader (GLuint sampler, GLenum pname, GLint param) {
  *cast(void**)&glSamplerParameteri_Z_Z = glbindGetProcAddress(`glSamplerParameteri`);
  if (*cast(void**)&glSamplerParameteri_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameteri' not found!`);
  glSamplerParameteri_Z_Z(sampler, pname, param);
}
alias glSamplerParameteriv = glSamplerParameteriv_Z_Z;
__gshared glSamplerParameteriv_Z_Z = function void (GLuint sampler, GLenum pname, const(GLint)* param) { glSamplerParameteriv_Z_Z_loader(sampler, pname, param); };
private void glSamplerParameteriv_Z_Z_loader (GLuint sampler, GLenum pname, const(GLint)* param) {
  *cast(void**)&glSamplerParameteriv_Z_Z = glbindGetProcAddress(`glSamplerParameteriv`);
  if (*cast(void**)&glSamplerParameteriv_Z_Z is null) assert(0, `OpenGL function 'glSamplerParameteriv' not found!`);
  glSamplerParameteriv_Z_Z(sampler, pname, param);
}
alias glScaled = glScaled_Z_Z;
__gshared glScaled_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z) { glScaled_Z_Z_loader(x, y, z); };
private void glScaled_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glScaled_Z_Z = glbindGetProcAddress(`glScaled`);
  if (*cast(void**)&glScaled_Z_Z is null) assert(0, `OpenGL function 'glScaled' not found!`);
  glScaled_Z_Z(x, y, z);
}
alias glScalef = glScalef_Z_Z;
__gshared glScalef_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z) { glScalef_Z_Z_loader(x, y, z); };
private void glScalef_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glScalef_Z_Z = glbindGetProcAddress(`glScalef`);
  if (*cast(void**)&glScalef_Z_Z is null) assert(0, `OpenGL function 'glScalef' not found!`);
  glScalef_Z_Z(x, y, z);
}
alias glScalex = glScalex_Z_Z;
__gshared glScalex_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z) { glScalex_Z_Z_loader(x, y, z); };
private void glScalex_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glScalex_Z_Z = glbindGetProcAddress(`glScalex`);
  if (*cast(void**)&glScalex_Z_Z is null) assert(0, `OpenGL function 'glScalex' not found!`);
  glScalex_Z_Z(x, y, z);
}
alias glScalexOES = glScalexOES_Z_Z;
__gshared glScalexOES_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z) { glScalexOES_Z_Z_loader(x, y, z); };
private void glScalexOES_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glScalexOES_Z_Z = glbindGetProcAddress(`glScalexOES`);
  if (*cast(void**)&glScalexOES_Z_Z is null) assert(0, `OpenGL function 'glScalexOES' not found!`);
  glScalexOES_Z_Z(x, y, z);
}
alias glScissor = glScissor_Z_Z;
__gshared glScissor_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height) { glScissor_Z_Z_loader(x, y, width, height); };
private void glScissor_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glScissor_Z_Z = glbindGetProcAddress(`glScissor`);
  if (*cast(void**)&glScissor_Z_Z is null) assert(0, `OpenGL function 'glScissor' not found!`);
  glScissor_Z_Z(x, y, width, height);
}
alias glScissorArrayv = glScissorArrayv_Z_Z;
__gshared glScissorArrayv_Z_Z = function void (GLuint first, GLsizei count, const(GLint)* v) { glScissorArrayv_Z_Z_loader(first, count, v); };
private void glScissorArrayv_Z_Z_loader (GLuint first, GLsizei count, const(GLint)* v) {
  *cast(void**)&glScissorArrayv_Z_Z = glbindGetProcAddress(`glScissorArrayv`);
  if (*cast(void**)&glScissorArrayv_Z_Z is null) assert(0, `OpenGL function 'glScissorArrayv' not found!`);
  glScissorArrayv_Z_Z(first, count, v);
}
alias glScissorArrayvNV = glScissorArrayvNV_Z_Z;
__gshared glScissorArrayvNV_Z_Z = function void (GLuint first, GLsizei count, const(GLint)* v) { glScissorArrayvNV_Z_Z_loader(first, count, v); };
private void glScissorArrayvNV_Z_Z_loader (GLuint first, GLsizei count, const(GLint)* v) {
  *cast(void**)&glScissorArrayvNV_Z_Z = glbindGetProcAddress(`glScissorArrayvNV`);
  if (*cast(void**)&glScissorArrayvNV_Z_Z is null) assert(0, `OpenGL function 'glScissorArrayvNV' not found!`);
  glScissorArrayvNV_Z_Z(first, count, v);
}
alias glScissorArrayvOES = glScissorArrayvOES_Z_Z;
__gshared glScissorArrayvOES_Z_Z = function void (GLuint first, GLsizei count, const(GLint)* v) { glScissorArrayvOES_Z_Z_loader(first, count, v); };
private void glScissorArrayvOES_Z_Z_loader (GLuint first, GLsizei count, const(GLint)* v) {
  *cast(void**)&glScissorArrayvOES_Z_Z = glbindGetProcAddress(`glScissorArrayvOES`);
  if (*cast(void**)&glScissorArrayvOES_Z_Z is null) assert(0, `OpenGL function 'glScissorArrayvOES' not found!`);
  glScissorArrayvOES_Z_Z(first, count, v);
}
alias glScissorIndexed = glScissorIndexed_Z_Z;
__gshared glScissorIndexed_Z_Z = function void (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { glScissorIndexed_Z_Z_loader(index, left, bottom, width, height); };
private void glScissorIndexed_Z_Z_loader (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  *cast(void**)&glScissorIndexed_Z_Z = glbindGetProcAddress(`glScissorIndexed`);
  if (*cast(void**)&glScissorIndexed_Z_Z is null) assert(0, `OpenGL function 'glScissorIndexed' not found!`);
  glScissorIndexed_Z_Z(index, left, bottom, width, height);
}
alias glScissorIndexedNV = glScissorIndexedNV_Z_Z;
__gshared glScissorIndexedNV_Z_Z = function void (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { glScissorIndexedNV_Z_Z_loader(index, left, bottom, width, height); };
private void glScissorIndexedNV_Z_Z_loader (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  *cast(void**)&glScissorIndexedNV_Z_Z = glbindGetProcAddress(`glScissorIndexedNV`);
  if (*cast(void**)&glScissorIndexedNV_Z_Z is null) assert(0, `OpenGL function 'glScissorIndexedNV' not found!`);
  glScissorIndexedNV_Z_Z(index, left, bottom, width, height);
}
alias glScissorIndexedOES = glScissorIndexedOES_Z_Z;
__gshared glScissorIndexedOES_Z_Z = function void (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { glScissorIndexedOES_Z_Z_loader(index, left, bottom, width, height); };
private void glScissorIndexedOES_Z_Z_loader (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  *cast(void**)&glScissorIndexedOES_Z_Z = glbindGetProcAddress(`glScissorIndexedOES`);
  if (*cast(void**)&glScissorIndexedOES_Z_Z is null) assert(0, `OpenGL function 'glScissorIndexedOES' not found!`);
  glScissorIndexedOES_Z_Z(index, left, bottom, width, height);
}
alias glScissorIndexedv = glScissorIndexedv_Z_Z;
__gshared glScissorIndexedv_Z_Z = function void (GLuint index, const(GLint)* v) { glScissorIndexedv_Z_Z_loader(index, v); };
private void glScissorIndexedv_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glScissorIndexedv_Z_Z = glbindGetProcAddress(`glScissorIndexedv`);
  if (*cast(void**)&glScissorIndexedv_Z_Z is null) assert(0, `OpenGL function 'glScissorIndexedv' not found!`);
  glScissorIndexedv_Z_Z(index, v);
}
alias glScissorIndexedvNV = glScissorIndexedvNV_Z_Z;
__gshared glScissorIndexedvNV_Z_Z = function void (GLuint index, const(GLint)* v) { glScissorIndexedvNV_Z_Z_loader(index, v); };
private void glScissorIndexedvNV_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glScissorIndexedvNV_Z_Z = glbindGetProcAddress(`glScissorIndexedvNV`);
  if (*cast(void**)&glScissorIndexedvNV_Z_Z is null) assert(0, `OpenGL function 'glScissorIndexedvNV' not found!`);
  glScissorIndexedvNV_Z_Z(index, v);
}
alias glScissorIndexedvOES = glScissorIndexedvOES_Z_Z;
__gshared glScissorIndexedvOES_Z_Z = function void (GLuint index, const(GLint)* v) { glScissorIndexedvOES_Z_Z_loader(index, v); };
private void glScissorIndexedvOES_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glScissorIndexedvOES_Z_Z = glbindGetProcAddress(`glScissorIndexedvOES`);
  if (*cast(void**)&glScissorIndexedvOES_Z_Z is null) assert(0, `OpenGL function 'glScissorIndexedvOES' not found!`);
  glScissorIndexedvOES_Z_Z(index, v);
}
alias glSecondaryColor3b = glSecondaryColor3b_Z_Z;
__gshared glSecondaryColor3b_Z_Z = function void (GLbyte red, GLbyte green, GLbyte blue) { glSecondaryColor3b_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3b_Z_Z_loader (GLbyte red, GLbyte green, GLbyte blue) {
  *cast(void**)&glSecondaryColor3b_Z_Z = glbindGetProcAddress(`glSecondaryColor3b`);
  if (*cast(void**)&glSecondaryColor3b_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3b' not found!`);
  glSecondaryColor3b_Z_Z(red, green, blue);
}
alias glSecondaryColor3bEXT = glSecondaryColor3bEXT_Z_Z;
__gshared glSecondaryColor3bEXT_Z_Z = function void (GLbyte red, GLbyte green, GLbyte blue) { glSecondaryColor3bEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3bEXT_Z_Z_loader (GLbyte red, GLbyte green, GLbyte blue) {
  *cast(void**)&glSecondaryColor3bEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3bEXT`);
  if (*cast(void**)&glSecondaryColor3bEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3bEXT' not found!`);
  glSecondaryColor3bEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3bv = glSecondaryColor3bv_Z_Z;
__gshared glSecondaryColor3bv_Z_Z = function void (const(GLbyte)* v) { glSecondaryColor3bv_Z_Z_loader(v); };
private void glSecondaryColor3bv_Z_Z_loader (const(GLbyte)* v) {
  *cast(void**)&glSecondaryColor3bv_Z_Z = glbindGetProcAddress(`glSecondaryColor3bv`);
  if (*cast(void**)&glSecondaryColor3bv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3bv' not found!`);
  glSecondaryColor3bv_Z_Z(v);
}
alias glSecondaryColor3bvEXT = glSecondaryColor3bvEXT_Z_Z;
__gshared glSecondaryColor3bvEXT_Z_Z = function void (const(GLbyte)* v) { glSecondaryColor3bvEXT_Z_Z_loader(v); };
private void glSecondaryColor3bvEXT_Z_Z_loader (const(GLbyte)* v) {
  *cast(void**)&glSecondaryColor3bvEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3bvEXT`);
  if (*cast(void**)&glSecondaryColor3bvEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3bvEXT' not found!`);
  glSecondaryColor3bvEXT_Z_Z(v);
}
alias glSecondaryColor3d = glSecondaryColor3d_Z_Z;
__gshared glSecondaryColor3d_Z_Z = function void (GLdouble red, GLdouble green, GLdouble blue) { glSecondaryColor3d_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3d_Z_Z_loader (GLdouble red, GLdouble green, GLdouble blue) {
  *cast(void**)&glSecondaryColor3d_Z_Z = glbindGetProcAddress(`glSecondaryColor3d`);
  if (*cast(void**)&glSecondaryColor3d_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3d' not found!`);
  glSecondaryColor3d_Z_Z(red, green, blue);
}
alias glSecondaryColor3dEXT = glSecondaryColor3dEXT_Z_Z;
__gshared glSecondaryColor3dEXT_Z_Z = function void (GLdouble red, GLdouble green, GLdouble blue) { glSecondaryColor3dEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3dEXT_Z_Z_loader (GLdouble red, GLdouble green, GLdouble blue) {
  *cast(void**)&glSecondaryColor3dEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3dEXT`);
  if (*cast(void**)&glSecondaryColor3dEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3dEXT' not found!`);
  glSecondaryColor3dEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3dv = glSecondaryColor3dv_Z_Z;
__gshared glSecondaryColor3dv_Z_Z = function void (const(GLdouble)* v) { glSecondaryColor3dv_Z_Z_loader(v); };
private void glSecondaryColor3dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glSecondaryColor3dv_Z_Z = glbindGetProcAddress(`glSecondaryColor3dv`);
  if (*cast(void**)&glSecondaryColor3dv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3dv' not found!`);
  glSecondaryColor3dv_Z_Z(v);
}
alias glSecondaryColor3dvEXT = glSecondaryColor3dvEXT_Z_Z;
__gshared glSecondaryColor3dvEXT_Z_Z = function void (const(GLdouble)* v) { glSecondaryColor3dvEXT_Z_Z_loader(v); };
private void glSecondaryColor3dvEXT_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glSecondaryColor3dvEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3dvEXT`);
  if (*cast(void**)&glSecondaryColor3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3dvEXT' not found!`);
  glSecondaryColor3dvEXT_Z_Z(v);
}
alias glSecondaryColor3f = glSecondaryColor3f_Z_Z;
__gshared glSecondaryColor3f_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue) { glSecondaryColor3f_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3f_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue) {
  *cast(void**)&glSecondaryColor3f_Z_Z = glbindGetProcAddress(`glSecondaryColor3f`);
  if (*cast(void**)&glSecondaryColor3f_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3f' not found!`);
  glSecondaryColor3f_Z_Z(red, green, blue);
}
alias glSecondaryColor3fEXT = glSecondaryColor3fEXT_Z_Z;
__gshared glSecondaryColor3fEXT_Z_Z = function void (GLfloat red, GLfloat green, GLfloat blue) { glSecondaryColor3fEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3fEXT_Z_Z_loader (GLfloat red, GLfloat green, GLfloat blue) {
  *cast(void**)&glSecondaryColor3fEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3fEXT`);
  if (*cast(void**)&glSecondaryColor3fEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3fEXT' not found!`);
  glSecondaryColor3fEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3fv = glSecondaryColor3fv_Z_Z;
__gshared glSecondaryColor3fv_Z_Z = function void (const(GLfloat)* v) { glSecondaryColor3fv_Z_Z_loader(v); };
private void glSecondaryColor3fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glSecondaryColor3fv_Z_Z = glbindGetProcAddress(`glSecondaryColor3fv`);
  if (*cast(void**)&glSecondaryColor3fv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3fv' not found!`);
  glSecondaryColor3fv_Z_Z(v);
}
alias glSecondaryColor3fvEXT = glSecondaryColor3fvEXT_Z_Z;
__gshared glSecondaryColor3fvEXT_Z_Z = function void (const(GLfloat)* v) { glSecondaryColor3fvEXT_Z_Z_loader(v); };
private void glSecondaryColor3fvEXT_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glSecondaryColor3fvEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3fvEXT`);
  if (*cast(void**)&glSecondaryColor3fvEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3fvEXT' not found!`);
  glSecondaryColor3fvEXT_Z_Z(v);
}
alias glSecondaryColor3hNV = glSecondaryColor3hNV_Z_Z;
__gshared glSecondaryColor3hNV_Z_Z = function void (GLhalfNV red, GLhalfNV green, GLhalfNV blue) { glSecondaryColor3hNV_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3hNV_Z_Z_loader (GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  *cast(void**)&glSecondaryColor3hNV_Z_Z = glbindGetProcAddress(`glSecondaryColor3hNV`);
  if (*cast(void**)&glSecondaryColor3hNV_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3hNV' not found!`);
  glSecondaryColor3hNV_Z_Z(red, green, blue);
}
alias glSecondaryColor3hvNV = glSecondaryColor3hvNV_Z_Z;
__gshared glSecondaryColor3hvNV_Z_Z = function void (const(GLhalfNV)* v) { glSecondaryColor3hvNV_Z_Z_loader(v); };
private void glSecondaryColor3hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glSecondaryColor3hvNV_Z_Z = glbindGetProcAddress(`glSecondaryColor3hvNV`);
  if (*cast(void**)&glSecondaryColor3hvNV_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3hvNV' not found!`);
  glSecondaryColor3hvNV_Z_Z(v);
}
alias glSecondaryColor3i = glSecondaryColor3i_Z_Z;
__gshared glSecondaryColor3i_Z_Z = function void (GLint red, GLint green, GLint blue) { glSecondaryColor3i_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3i_Z_Z_loader (GLint red, GLint green, GLint blue) {
  *cast(void**)&glSecondaryColor3i_Z_Z = glbindGetProcAddress(`glSecondaryColor3i`);
  if (*cast(void**)&glSecondaryColor3i_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3i' not found!`);
  glSecondaryColor3i_Z_Z(red, green, blue);
}
alias glSecondaryColor3iEXT = glSecondaryColor3iEXT_Z_Z;
__gshared glSecondaryColor3iEXT_Z_Z = function void (GLint red, GLint green, GLint blue) { glSecondaryColor3iEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3iEXT_Z_Z_loader (GLint red, GLint green, GLint blue) {
  *cast(void**)&glSecondaryColor3iEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3iEXT`);
  if (*cast(void**)&glSecondaryColor3iEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3iEXT' not found!`);
  glSecondaryColor3iEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3iv = glSecondaryColor3iv_Z_Z;
__gshared glSecondaryColor3iv_Z_Z = function void (const(GLint)* v) { glSecondaryColor3iv_Z_Z_loader(v); };
private void glSecondaryColor3iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glSecondaryColor3iv_Z_Z = glbindGetProcAddress(`glSecondaryColor3iv`);
  if (*cast(void**)&glSecondaryColor3iv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3iv' not found!`);
  glSecondaryColor3iv_Z_Z(v);
}
alias glSecondaryColor3ivEXT = glSecondaryColor3ivEXT_Z_Z;
__gshared glSecondaryColor3ivEXT_Z_Z = function void (const(GLint)* v) { glSecondaryColor3ivEXT_Z_Z_loader(v); };
private void glSecondaryColor3ivEXT_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glSecondaryColor3ivEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3ivEXT`);
  if (*cast(void**)&glSecondaryColor3ivEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ivEXT' not found!`);
  glSecondaryColor3ivEXT_Z_Z(v);
}
alias glSecondaryColor3s = glSecondaryColor3s_Z_Z;
__gshared glSecondaryColor3s_Z_Z = function void (GLshort red, GLshort green, GLshort blue) { glSecondaryColor3s_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3s_Z_Z_loader (GLshort red, GLshort green, GLshort blue) {
  *cast(void**)&glSecondaryColor3s_Z_Z = glbindGetProcAddress(`glSecondaryColor3s`);
  if (*cast(void**)&glSecondaryColor3s_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3s' not found!`);
  glSecondaryColor3s_Z_Z(red, green, blue);
}
alias glSecondaryColor3sEXT = glSecondaryColor3sEXT_Z_Z;
__gshared glSecondaryColor3sEXT_Z_Z = function void (GLshort red, GLshort green, GLshort blue) { glSecondaryColor3sEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3sEXT_Z_Z_loader (GLshort red, GLshort green, GLshort blue) {
  *cast(void**)&glSecondaryColor3sEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3sEXT`);
  if (*cast(void**)&glSecondaryColor3sEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3sEXT' not found!`);
  glSecondaryColor3sEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3sv = glSecondaryColor3sv_Z_Z;
__gshared glSecondaryColor3sv_Z_Z = function void (const(GLshort)* v) { glSecondaryColor3sv_Z_Z_loader(v); };
private void glSecondaryColor3sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glSecondaryColor3sv_Z_Z = glbindGetProcAddress(`glSecondaryColor3sv`);
  if (*cast(void**)&glSecondaryColor3sv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3sv' not found!`);
  glSecondaryColor3sv_Z_Z(v);
}
alias glSecondaryColor3svEXT = glSecondaryColor3svEXT_Z_Z;
__gshared glSecondaryColor3svEXT_Z_Z = function void (const(GLshort)* v) { glSecondaryColor3svEXT_Z_Z_loader(v); };
private void glSecondaryColor3svEXT_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glSecondaryColor3svEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3svEXT`);
  if (*cast(void**)&glSecondaryColor3svEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3svEXT' not found!`);
  glSecondaryColor3svEXT_Z_Z(v);
}
alias glSecondaryColor3ub = glSecondaryColor3ub_Z_Z;
__gshared glSecondaryColor3ub_Z_Z = function void (GLubyte red, GLubyte green, GLubyte blue) { glSecondaryColor3ub_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3ub_Z_Z_loader (GLubyte red, GLubyte green, GLubyte blue) {
  *cast(void**)&glSecondaryColor3ub_Z_Z = glbindGetProcAddress(`glSecondaryColor3ub`);
  if (*cast(void**)&glSecondaryColor3ub_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ub' not found!`);
  glSecondaryColor3ub_Z_Z(red, green, blue);
}
alias glSecondaryColor3ubEXT = glSecondaryColor3ubEXT_Z_Z;
__gshared glSecondaryColor3ubEXT_Z_Z = function void (GLubyte red, GLubyte green, GLubyte blue) { glSecondaryColor3ubEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3ubEXT_Z_Z_loader (GLubyte red, GLubyte green, GLubyte blue) {
  *cast(void**)&glSecondaryColor3ubEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3ubEXT`);
  if (*cast(void**)&glSecondaryColor3ubEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ubEXT' not found!`);
  glSecondaryColor3ubEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3ubv = glSecondaryColor3ubv_Z_Z;
__gshared glSecondaryColor3ubv_Z_Z = function void (const(GLubyte)* v) { glSecondaryColor3ubv_Z_Z_loader(v); };
private void glSecondaryColor3ubv_Z_Z_loader (const(GLubyte)* v) {
  *cast(void**)&glSecondaryColor3ubv_Z_Z = glbindGetProcAddress(`glSecondaryColor3ubv`);
  if (*cast(void**)&glSecondaryColor3ubv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ubv' not found!`);
  glSecondaryColor3ubv_Z_Z(v);
}
alias glSecondaryColor3ubvEXT = glSecondaryColor3ubvEXT_Z_Z;
__gshared glSecondaryColor3ubvEXT_Z_Z = function void (const(GLubyte)* v) { glSecondaryColor3ubvEXT_Z_Z_loader(v); };
private void glSecondaryColor3ubvEXT_Z_Z_loader (const(GLubyte)* v) {
  *cast(void**)&glSecondaryColor3ubvEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3ubvEXT`);
  if (*cast(void**)&glSecondaryColor3ubvEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ubvEXT' not found!`);
  glSecondaryColor3ubvEXT_Z_Z(v);
}
alias glSecondaryColor3ui = glSecondaryColor3ui_Z_Z;
__gshared glSecondaryColor3ui_Z_Z = function void (GLuint red, GLuint green, GLuint blue) { glSecondaryColor3ui_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3ui_Z_Z_loader (GLuint red, GLuint green, GLuint blue) {
  *cast(void**)&glSecondaryColor3ui_Z_Z = glbindGetProcAddress(`glSecondaryColor3ui`);
  if (*cast(void**)&glSecondaryColor3ui_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3ui' not found!`);
  glSecondaryColor3ui_Z_Z(red, green, blue);
}
alias glSecondaryColor3uiEXT = glSecondaryColor3uiEXT_Z_Z;
__gshared glSecondaryColor3uiEXT_Z_Z = function void (GLuint red, GLuint green, GLuint blue) { glSecondaryColor3uiEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3uiEXT_Z_Z_loader (GLuint red, GLuint green, GLuint blue) {
  *cast(void**)&glSecondaryColor3uiEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3uiEXT`);
  if (*cast(void**)&glSecondaryColor3uiEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3uiEXT' not found!`);
  glSecondaryColor3uiEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3uiv = glSecondaryColor3uiv_Z_Z;
__gshared glSecondaryColor3uiv_Z_Z = function void (const(GLuint)* v) { glSecondaryColor3uiv_Z_Z_loader(v); };
private void glSecondaryColor3uiv_Z_Z_loader (const(GLuint)* v) {
  *cast(void**)&glSecondaryColor3uiv_Z_Z = glbindGetProcAddress(`glSecondaryColor3uiv`);
  if (*cast(void**)&glSecondaryColor3uiv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3uiv' not found!`);
  glSecondaryColor3uiv_Z_Z(v);
}
alias glSecondaryColor3uivEXT = glSecondaryColor3uivEXT_Z_Z;
__gshared glSecondaryColor3uivEXT_Z_Z = function void (const(GLuint)* v) { glSecondaryColor3uivEXT_Z_Z_loader(v); };
private void glSecondaryColor3uivEXT_Z_Z_loader (const(GLuint)* v) {
  *cast(void**)&glSecondaryColor3uivEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3uivEXT`);
  if (*cast(void**)&glSecondaryColor3uivEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3uivEXT' not found!`);
  glSecondaryColor3uivEXT_Z_Z(v);
}
alias glSecondaryColor3us = glSecondaryColor3us_Z_Z;
__gshared glSecondaryColor3us_Z_Z = function void (GLushort red, GLushort green, GLushort blue) { glSecondaryColor3us_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3us_Z_Z_loader (GLushort red, GLushort green, GLushort blue) {
  *cast(void**)&glSecondaryColor3us_Z_Z = glbindGetProcAddress(`glSecondaryColor3us`);
  if (*cast(void**)&glSecondaryColor3us_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3us' not found!`);
  glSecondaryColor3us_Z_Z(red, green, blue);
}
alias glSecondaryColor3usEXT = glSecondaryColor3usEXT_Z_Z;
__gshared glSecondaryColor3usEXT_Z_Z = function void (GLushort red, GLushort green, GLushort blue) { glSecondaryColor3usEXT_Z_Z_loader(red, green, blue); };
private void glSecondaryColor3usEXT_Z_Z_loader (GLushort red, GLushort green, GLushort blue) {
  *cast(void**)&glSecondaryColor3usEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3usEXT`);
  if (*cast(void**)&glSecondaryColor3usEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3usEXT' not found!`);
  glSecondaryColor3usEXT_Z_Z(red, green, blue);
}
alias glSecondaryColor3usv = glSecondaryColor3usv_Z_Z;
__gshared glSecondaryColor3usv_Z_Z = function void (const(GLushort)* v) { glSecondaryColor3usv_Z_Z_loader(v); };
private void glSecondaryColor3usv_Z_Z_loader (const(GLushort)* v) {
  *cast(void**)&glSecondaryColor3usv_Z_Z = glbindGetProcAddress(`glSecondaryColor3usv`);
  if (*cast(void**)&glSecondaryColor3usv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3usv' not found!`);
  glSecondaryColor3usv_Z_Z(v);
}
alias glSecondaryColor3usvEXT = glSecondaryColor3usvEXT_Z_Z;
__gshared glSecondaryColor3usvEXT_Z_Z = function void (const(GLushort)* v) { glSecondaryColor3usvEXT_Z_Z_loader(v); };
private void glSecondaryColor3usvEXT_Z_Z_loader (const(GLushort)* v) {
  *cast(void**)&glSecondaryColor3usvEXT_Z_Z = glbindGetProcAddress(`glSecondaryColor3usvEXT`);
  if (*cast(void**)&glSecondaryColor3usvEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColor3usvEXT' not found!`);
  glSecondaryColor3usvEXT_Z_Z(v);
}
alias glSecondaryColorFormatNV = glSecondaryColorFormatNV_Z_Z;
__gshared glSecondaryColorFormatNV_Z_Z = function void (GLint size, GLenum type, GLsizei stride) { glSecondaryColorFormatNV_Z_Z_loader(size, type, stride); };
private void glSecondaryColorFormatNV_Z_Z_loader (GLint size, GLenum type, GLsizei stride) {
  *cast(void**)&glSecondaryColorFormatNV_Z_Z = glbindGetProcAddress(`glSecondaryColorFormatNV`);
  if (*cast(void**)&glSecondaryColorFormatNV_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColorFormatNV' not found!`);
  glSecondaryColorFormatNV_Z_Z(size, type, stride);
}
alias glSecondaryColorP3ui = glSecondaryColorP3ui_Z_Z;
__gshared glSecondaryColorP3ui_Z_Z = function void (GLenum type, GLuint color) { glSecondaryColorP3ui_Z_Z_loader(type, color); };
private void glSecondaryColorP3ui_Z_Z_loader (GLenum type, GLuint color) {
  *cast(void**)&glSecondaryColorP3ui_Z_Z = glbindGetProcAddress(`glSecondaryColorP3ui`);
  if (*cast(void**)&glSecondaryColorP3ui_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColorP3ui' not found!`);
  glSecondaryColorP3ui_Z_Z(type, color);
}
alias glSecondaryColorP3uiv = glSecondaryColorP3uiv_Z_Z;
__gshared glSecondaryColorP3uiv_Z_Z = function void (GLenum type, const(GLuint)* color) { glSecondaryColorP3uiv_Z_Z_loader(type, color); };
private void glSecondaryColorP3uiv_Z_Z_loader (GLenum type, const(GLuint)* color) {
  *cast(void**)&glSecondaryColorP3uiv_Z_Z = glbindGetProcAddress(`glSecondaryColorP3uiv`);
  if (*cast(void**)&glSecondaryColorP3uiv_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColorP3uiv' not found!`);
  glSecondaryColorP3uiv_Z_Z(type, color);
}
alias glSecondaryColorPointer = glSecondaryColorPointer_Z_Z;
__gshared glSecondaryColorPointer_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glSecondaryColorPointer_Z_Z_loader(size, type, stride, pointer); };
private void glSecondaryColorPointer_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glSecondaryColorPointer_Z_Z = glbindGetProcAddress(`glSecondaryColorPointer`);
  if (*cast(void**)&glSecondaryColorPointer_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColorPointer' not found!`);
  glSecondaryColorPointer_Z_Z(size, type, stride, pointer);
}
alias glSecondaryColorPointerEXT = glSecondaryColorPointerEXT_Z_Z;
__gshared glSecondaryColorPointerEXT_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glSecondaryColorPointerEXT_Z_Z_loader(size, type, stride, pointer); };
private void glSecondaryColorPointerEXT_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glSecondaryColorPointerEXT_Z_Z = glbindGetProcAddress(`glSecondaryColorPointerEXT`);
  if (*cast(void**)&glSecondaryColorPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColorPointerEXT' not found!`);
  glSecondaryColorPointerEXT_Z_Z(size, type, stride, pointer);
}
alias glSecondaryColorPointerListIBM = glSecondaryColorPointerListIBM_Z_Z;
__gshared glSecondaryColorPointerListIBM_Z_Z = function void (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) { glSecondaryColorPointerListIBM_Z_Z_loader(size, type, stride, pointer, ptrstride); };
private void glSecondaryColorPointerListIBM_Z_Z_loader (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) {
  *cast(void**)&glSecondaryColorPointerListIBM_Z_Z = glbindGetProcAddress(`glSecondaryColorPointerListIBM`);
  if (*cast(void**)&glSecondaryColorPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glSecondaryColorPointerListIBM' not found!`);
  glSecondaryColorPointerListIBM_Z_Z(size, type, stride, pointer, ptrstride);
}
alias glSelectBuffer = glSelectBuffer_Z_Z;
__gshared glSelectBuffer_Z_Z = function void (GLsizei size, GLuint *buffer) { glSelectBuffer_Z_Z_loader(size, buffer); };
private void glSelectBuffer_Z_Z_loader (GLsizei size, GLuint *buffer) {
  *cast(void**)&glSelectBuffer_Z_Z = glbindGetProcAddress(`glSelectBuffer`);
  if (*cast(void**)&glSelectBuffer_Z_Z is null) assert(0, `OpenGL function 'glSelectBuffer' not found!`);
  glSelectBuffer_Z_Z(size, buffer);
}
alias glSelectPerfMonitorCountersAMD = glSelectPerfMonitorCountersAMD_Z_Z;
__gshared glSelectPerfMonitorCountersAMD_Z_Z = function void (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) { glSelectPerfMonitorCountersAMD_Z_Z_loader(monitor, enable, group, numCounters, counterList); };
private void glSelectPerfMonitorCountersAMD_Z_Z_loader (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) {
  *cast(void**)&glSelectPerfMonitorCountersAMD_Z_Z = glbindGetProcAddress(`glSelectPerfMonitorCountersAMD`);
  if (*cast(void**)&glSelectPerfMonitorCountersAMD_Z_Z is null) assert(0, `OpenGL function 'glSelectPerfMonitorCountersAMD' not found!`);
  glSelectPerfMonitorCountersAMD_Z_Z(monitor, enable, group, numCounters, counterList);
}
alias glSemaphoreParameterui64vEXT = glSemaphoreParameterui64vEXT_Z_Z;
__gshared glSemaphoreParameterui64vEXT_Z_Z = function void (GLuint semaphore, GLenum pname, const(GLuint64)* params) { glSemaphoreParameterui64vEXT_Z_Z_loader(semaphore, pname, params); };
private void glSemaphoreParameterui64vEXT_Z_Z_loader (GLuint semaphore, GLenum pname, const(GLuint64)* params) {
  *cast(void**)&glSemaphoreParameterui64vEXT_Z_Z = glbindGetProcAddress(`glSemaphoreParameterui64vEXT`);
  if (*cast(void**)&glSemaphoreParameterui64vEXT_Z_Z is null) assert(0, `OpenGL function 'glSemaphoreParameterui64vEXT' not found!`);
  glSemaphoreParameterui64vEXT_Z_Z(semaphore, pname, params);
}
alias glSeparableFilter2D = glSeparableFilter2D_Z_Z;
__gshared glSeparableFilter2D_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* row, const(void)* column) { glSeparableFilter2D_Z_Z_loader(target, internalformat, width, height, format, type, row, column); };
private void glSeparableFilter2D_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* row, const(void)* column) {
  *cast(void**)&glSeparableFilter2D_Z_Z = glbindGetProcAddress(`glSeparableFilter2D`);
  if (*cast(void**)&glSeparableFilter2D_Z_Z is null) assert(0, `OpenGL function 'glSeparableFilter2D' not found!`);
  glSeparableFilter2D_Z_Z(target, internalformat, width, height, format, type, row, column);
}
alias glSeparableFilter2DEXT = glSeparableFilter2DEXT_Z_Z;
__gshared glSeparableFilter2DEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* row, const(void)* column) { glSeparableFilter2DEXT_Z_Z_loader(target, internalformat, width, height, format, type, row, column); };
private void glSeparableFilter2DEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* row, const(void)* column) {
  *cast(void**)&glSeparableFilter2DEXT_Z_Z = glbindGetProcAddress(`glSeparableFilter2DEXT`);
  if (*cast(void**)&glSeparableFilter2DEXT_Z_Z is null) assert(0, `OpenGL function 'glSeparableFilter2DEXT' not found!`);
  glSeparableFilter2DEXT_Z_Z(target, internalformat, width, height, format, type, row, column);
}
alias glSetFenceAPPLE = glSetFenceAPPLE_Z_Z;
__gshared glSetFenceAPPLE_Z_Z = function void (GLuint fence) { glSetFenceAPPLE_Z_Z_loader(fence); };
private void glSetFenceAPPLE_Z_Z_loader (GLuint fence) {
  *cast(void**)&glSetFenceAPPLE_Z_Z = glbindGetProcAddress(`glSetFenceAPPLE`);
  if (*cast(void**)&glSetFenceAPPLE_Z_Z is null) assert(0, `OpenGL function 'glSetFenceAPPLE' not found!`);
  glSetFenceAPPLE_Z_Z(fence);
}
alias glSetFenceNV = glSetFenceNV_Z_Z;
__gshared glSetFenceNV_Z_Z = function void (GLuint fence, GLenum condition) { glSetFenceNV_Z_Z_loader(fence, condition); };
private void glSetFenceNV_Z_Z_loader (GLuint fence, GLenum condition) {
  *cast(void**)&glSetFenceNV_Z_Z = glbindGetProcAddress(`glSetFenceNV`);
  if (*cast(void**)&glSetFenceNV_Z_Z is null) assert(0, `OpenGL function 'glSetFenceNV' not found!`);
  glSetFenceNV_Z_Z(fence, condition);
}
alias glSetFragmentShaderConstantATI = glSetFragmentShaderConstantATI_Z_Z;
__gshared glSetFragmentShaderConstantATI_Z_Z = function void (GLuint dst, const(GLfloat)* value) { glSetFragmentShaderConstantATI_Z_Z_loader(dst, value); };
private void glSetFragmentShaderConstantATI_Z_Z_loader (GLuint dst, const(GLfloat)* value) {
  *cast(void**)&glSetFragmentShaderConstantATI_Z_Z = glbindGetProcAddress(`glSetFragmentShaderConstantATI`);
  if (*cast(void**)&glSetFragmentShaderConstantATI_Z_Z is null) assert(0, `OpenGL function 'glSetFragmentShaderConstantATI' not found!`);
  glSetFragmentShaderConstantATI_Z_Z(dst, value);
}
alias glSetInvariantEXT = glSetInvariantEXT_Z_Z;
__gshared glSetInvariantEXT_Z_Z = function void (GLuint id, GLenum type, const(void)* addr) { glSetInvariantEXT_Z_Z_loader(id, type, addr); };
private void glSetInvariantEXT_Z_Z_loader (GLuint id, GLenum type, const(void)* addr) {
  *cast(void**)&glSetInvariantEXT_Z_Z = glbindGetProcAddress(`glSetInvariantEXT`);
  if (*cast(void**)&glSetInvariantEXT_Z_Z is null) assert(0, `OpenGL function 'glSetInvariantEXT' not found!`);
  glSetInvariantEXT_Z_Z(id, type, addr);
}
alias glSetLocalConstantEXT = glSetLocalConstantEXT_Z_Z;
__gshared glSetLocalConstantEXT_Z_Z = function void (GLuint id, GLenum type, const(void)* addr) { glSetLocalConstantEXT_Z_Z_loader(id, type, addr); };
private void glSetLocalConstantEXT_Z_Z_loader (GLuint id, GLenum type, const(void)* addr) {
  *cast(void**)&glSetLocalConstantEXT_Z_Z = glbindGetProcAddress(`glSetLocalConstantEXT`);
  if (*cast(void**)&glSetLocalConstantEXT_Z_Z is null) assert(0, `OpenGL function 'glSetLocalConstantEXT' not found!`);
  glSetLocalConstantEXT_Z_Z(id, type, addr);
}
alias glSetMultisamplefvAMD = glSetMultisamplefvAMD_Z_Z;
__gshared glSetMultisamplefvAMD_Z_Z = function void (GLenum pname, GLuint index, const(GLfloat)* val) { glSetMultisamplefvAMD_Z_Z_loader(pname, index, val); };
private void glSetMultisamplefvAMD_Z_Z_loader (GLenum pname, GLuint index, const(GLfloat)* val) {
  *cast(void**)&glSetMultisamplefvAMD_Z_Z = glbindGetProcAddress(`glSetMultisamplefvAMD`);
  if (*cast(void**)&glSetMultisamplefvAMD_Z_Z is null) assert(0, `OpenGL function 'glSetMultisamplefvAMD' not found!`);
  glSetMultisamplefvAMD_Z_Z(pname, index, val);
}
alias glShadeModel = glShadeModel_Z_Z;
__gshared glShadeModel_Z_Z = function void (GLenum mode) { glShadeModel_Z_Z_loader(mode); };
private void glShadeModel_Z_Z_loader (GLenum mode) {
  *cast(void**)&glShadeModel_Z_Z = glbindGetProcAddress(`glShadeModel`);
  if (*cast(void**)&glShadeModel_Z_Z is null) assert(0, `OpenGL function 'glShadeModel' not found!`);
  glShadeModel_Z_Z(mode);
}
alias glShaderBinary = glShaderBinary_Z_Z;
__gshared glShaderBinary_Z_Z = function void (GLsizei count, const(GLuint)* shaders, GLenum binaryformat, const(void)* binary, GLsizei length) { glShaderBinary_Z_Z_loader(count, shaders, binaryformat, binary, length); };
private void glShaderBinary_Z_Z_loader (GLsizei count, const(GLuint)* shaders, GLenum binaryformat, const(void)* binary, GLsizei length) {
  *cast(void**)&glShaderBinary_Z_Z = glbindGetProcAddress(`glShaderBinary`);
  if (*cast(void**)&glShaderBinary_Z_Z is null) assert(0, `OpenGL function 'glShaderBinary' not found!`);
  glShaderBinary_Z_Z(count, shaders, binaryformat, binary, length);
}
alias glShaderOp1EXT = glShaderOp1EXT_Z_Z;
__gshared glShaderOp1EXT_Z_Z = function void (GLenum op, GLuint res, GLuint arg1) { glShaderOp1EXT_Z_Z_loader(op, res, arg1); };
private void glShaderOp1EXT_Z_Z_loader (GLenum op, GLuint res, GLuint arg1) {
  *cast(void**)&glShaderOp1EXT_Z_Z = glbindGetProcAddress(`glShaderOp1EXT`);
  if (*cast(void**)&glShaderOp1EXT_Z_Z is null) assert(0, `OpenGL function 'glShaderOp1EXT' not found!`);
  glShaderOp1EXT_Z_Z(op, res, arg1);
}
alias glShaderOp2EXT = glShaderOp2EXT_Z_Z;
__gshared glShaderOp2EXT_Z_Z = function void (GLenum op, GLuint res, GLuint arg1, GLuint arg2) { glShaderOp2EXT_Z_Z_loader(op, res, arg1, arg2); };
private void glShaderOp2EXT_Z_Z_loader (GLenum op, GLuint res, GLuint arg1, GLuint arg2) {
  *cast(void**)&glShaderOp2EXT_Z_Z = glbindGetProcAddress(`glShaderOp2EXT`);
  if (*cast(void**)&glShaderOp2EXT_Z_Z is null) assert(0, `OpenGL function 'glShaderOp2EXT' not found!`);
  glShaderOp2EXT_Z_Z(op, res, arg1, arg2);
}
alias glShaderOp3EXT = glShaderOp3EXT_Z_Z;
__gshared glShaderOp3EXT_Z_Z = function void (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { glShaderOp3EXT_Z_Z_loader(op, res, arg1, arg2, arg3); };
private void glShaderOp3EXT_Z_Z_loader (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {
  *cast(void**)&glShaderOp3EXT_Z_Z = glbindGetProcAddress(`glShaderOp3EXT`);
  if (*cast(void**)&glShaderOp3EXT_Z_Z is null) assert(0, `OpenGL function 'glShaderOp3EXT' not found!`);
  glShaderOp3EXT_Z_Z(op, res, arg1, arg2, arg3);
}
alias glShaderSource = glShaderSource_Z_Z;
__gshared glShaderSource_Z_Z = function void (GLuint shader, GLsizei count, const(GLchar)* *string, const(GLint)* length) { glShaderSource_Z_Z_loader(shader, count, string, length); };
private void glShaderSource_Z_Z_loader (GLuint shader, GLsizei count, const(GLchar)* *string, const(GLint)* length) {
  *cast(void**)&glShaderSource_Z_Z = glbindGetProcAddress(`glShaderSource`);
  if (*cast(void**)&glShaderSource_Z_Z is null) assert(0, `OpenGL function 'glShaderSource' not found!`);
  glShaderSource_Z_Z(shader, count, string, length);
}
alias glShaderSourceARB = glShaderSourceARB_Z_Z;
__gshared glShaderSourceARB_Z_Z = function void (GLhandleARB shaderObj, GLsizei count, const(GLcharARB)** string, const(GLint)* length) { glShaderSourceARB_Z_Z_loader(shaderObj, count, string, length); };
private void glShaderSourceARB_Z_Z_loader (GLhandleARB shaderObj, GLsizei count, const(GLcharARB)** string, const(GLint)* length) {
  *cast(void**)&glShaderSourceARB_Z_Z = glbindGetProcAddress(`glShaderSourceARB`);
  if (*cast(void**)&glShaderSourceARB_Z_Z is null) assert(0, `OpenGL function 'glShaderSourceARB' not found!`);
  glShaderSourceARB_Z_Z(shaderObj, count, string, length);
}
alias glShaderStorageBlockBinding = glShaderStorageBlockBinding_Z_Z;
__gshared glShaderStorageBlockBinding_Z_Z = function void (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { glShaderStorageBlockBinding_Z_Z_loader(program, storageBlockIndex, storageBlockBinding); };
private void glShaderStorageBlockBinding_Z_Z_loader (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
  *cast(void**)&glShaderStorageBlockBinding_Z_Z = glbindGetProcAddress(`glShaderStorageBlockBinding`);
  if (*cast(void**)&glShaderStorageBlockBinding_Z_Z is null) assert(0, `OpenGL function 'glShaderStorageBlockBinding' not found!`);
  glShaderStorageBlockBinding_Z_Z(program, storageBlockIndex, storageBlockBinding);
}
alias glSharpenTexFuncSGIS = glSharpenTexFuncSGIS_Z_Z;
__gshared glSharpenTexFuncSGIS_Z_Z = function void (GLenum target, GLsizei n, const(GLfloat)* points) { glSharpenTexFuncSGIS_Z_Z_loader(target, n, points); };
private void glSharpenTexFuncSGIS_Z_Z_loader (GLenum target, GLsizei n, const(GLfloat)* points) {
  *cast(void**)&glSharpenTexFuncSGIS_Z_Z = glbindGetProcAddress(`glSharpenTexFuncSGIS`);
  if (*cast(void**)&glSharpenTexFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glSharpenTexFuncSGIS' not found!`);
  glSharpenTexFuncSGIS_Z_Z(target, n, points);
}
alias glSignalSemaphoreEXT = glSignalSemaphoreEXT_Z_Z;
__gshared glSignalSemaphoreEXT_Z_Z = function void (GLuint semaphore, GLuint numBufferBarriers, const(GLuint)* buffers, GLuint numTextureBarriers, const(GLuint)* textures, const(GLenum)* dstLayouts) { glSignalSemaphoreEXT_Z_Z_loader(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); };
private void glSignalSemaphoreEXT_Z_Z_loader (GLuint semaphore, GLuint numBufferBarriers, const(GLuint)* buffers, GLuint numTextureBarriers, const(GLuint)* textures, const(GLenum)* dstLayouts) {
  *cast(void**)&glSignalSemaphoreEXT_Z_Z = glbindGetProcAddress(`glSignalSemaphoreEXT`);
  if (*cast(void**)&glSignalSemaphoreEXT_Z_Z is null) assert(0, `OpenGL function 'glSignalSemaphoreEXT' not found!`);
  glSignalSemaphoreEXT_Z_Z(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}
alias glSpecializeShaderARB = glSpecializeShaderARB_Z_Z;
__gshared glSpecializeShaderARB_Z_Z = function void (GLuint shader, const(GLchar)* pEntryPoint, GLuint numSpecializationConstants, const(GLuint)* pConstantIndex, const(GLuint)* pConstantValue) { glSpecializeShaderARB_Z_Z_loader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); };
private void glSpecializeShaderARB_Z_Z_loader (GLuint shader, const(GLchar)* pEntryPoint, GLuint numSpecializationConstants, const(GLuint)* pConstantIndex, const(GLuint)* pConstantValue) {
  *cast(void**)&glSpecializeShaderARB_Z_Z = glbindGetProcAddress(`glSpecializeShaderARB`);
  if (*cast(void**)&glSpecializeShaderARB_Z_Z is null) assert(0, `OpenGL function 'glSpecializeShaderARB' not found!`);
  glSpecializeShaderARB_Z_Z(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}
alias glSpriteParameterfSGIX = glSpriteParameterfSGIX_Z_Z;
__gshared glSpriteParameterfSGIX_Z_Z = function void (GLenum pname, GLfloat param) { glSpriteParameterfSGIX_Z_Z_loader(pname, param); };
private void glSpriteParameterfSGIX_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glSpriteParameterfSGIX_Z_Z = glbindGetProcAddress(`glSpriteParameterfSGIX`);
  if (*cast(void**)&glSpriteParameterfSGIX_Z_Z is null) assert(0, `OpenGL function 'glSpriteParameterfSGIX' not found!`);
  glSpriteParameterfSGIX_Z_Z(pname, param);
}
alias glSpriteParameterfvSGIX = glSpriteParameterfvSGIX_Z_Z;
__gshared glSpriteParameterfvSGIX_Z_Z = function void (GLenum pname, const(GLfloat)* params) { glSpriteParameterfvSGIX_Z_Z_loader(pname, params); };
private void glSpriteParameterfvSGIX_Z_Z_loader (GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glSpriteParameterfvSGIX_Z_Z = glbindGetProcAddress(`glSpriteParameterfvSGIX`);
  if (*cast(void**)&glSpriteParameterfvSGIX_Z_Z is null) assert(0, `OpenGL function 'glSpriteParameterfvSGIX' not found!`);
  glSpriteParameterfvSGIX_Z_Z(pname, params);
}
alias glSpriteParameteriSGIX = glSpriteParameteriSGIX_Z_Z;
__gshared glSpriteParameteriSGIX_Z_Z = function void (GLenum pname, GLint param) { glSpriteParameteriSGIX_Z_Z_loader(pname, param); };
private void glSpriteParameteriSGIX_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glSpriteParameteriSGIX_Z_Z = glbindGetProcAddress(`glSpriteParameteriSGIX`);
  if (*cast(void**)&glSpriteParameteriSGIX_Z_Z is null) assert(0, `OpenGL function 'glSpriteParameteriSGIX' not found!`);
  glSpriteParameteriSGIX_Z_Z(pname, param);
}
alias glSpriteParameterivSGIX = glSpriteParameterivSGIX_Z_Z;
__gshared glSpriteParameterivSGIX_Z_Z = function void (GLenum pname, const(GLint)* params) { glSpriteParameterivSGIX_Z_Z_loader(pname, params); };
private void glSpriteParameterivSGIX_Z_Z_loader (GLenum pname, const(GLint)* params) {
  *cast(void**)&glSpriteParameterivSGIX_Z_Z = glbindGetProcAddress(`glSpriteParameterivSGIX`);
  if (*cast(void**)&glSpriteParameterivSGIX_Z_Z is null) assert(0, `OpenGL function 'glSpriteParameterivSGIX' not found!`);
  glSpriteParameterivSGIX_Z_Z(pname, params);
}
alias glStartInstrumentsSGIX = glStartInstrumentsSGIX_Z_Z;
__gshared glStartInstrumentsSGIX_Z_Z = function void () { glStartInstrumentsSGIX_Z_Z_loader(); };
private void glStartInstrumentsSGIX_Z_Z_loader () {
  *cast(void**)&glStartInstrumentsSGIX_Z_Z = glbindGetProcAddress(`glStartInstrumentsSGIX`);
  if (*cast(void**)&glStartInstrumentsSGIX_Z_Z is null) assert(0, `OpenGL function 'glStartInstrumentsSGIX' not found!`);
  glStartInstrumentsSGIX_Z_Z();
}
alias glStartTilingQCOM = glStartTilingQCOM_Z_Z;
__gshared glStartTilingQCOM_Z_Z = function void (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) { glStartTilingQCOM_Z_Z_loader(x, y, width, height, preserveMask); };
private void glStartTilingQCOM_Z_Z_loader (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) {
  *cast(void**)&glStartTilingQCOM_Z_Z = glbindGetProcAddress(`glStartTilingQCOM`);
  if (*cast(void**)&glStartTilingQCOM_Z_Z is null) assert(0, `OpenGL function 'glStartTilingQCOM' not found!`);
  glStartTilingQCOM_Z_Z(x, y, width, height, preserveMask);
}
alias glStateCaptureNV = glStateCaptureNV_Z_Z;
__gshared glStateCaptureNV_Z_Z = function void (GLuint state, GLenum mode) { glStateCaptureNV_Z_Z_loader(state, mode); };
private void glStateCaptureNV_Z_Z_loader (GLuint state, GLenum mode) {
  *cast(void**)&glStateCaptureNV_Z_Z = glbindGetProcAddress(`glStateCaptureNV`);
  if (*cast(void**)&glStateCaptureNV_Z_Z is null) assert(0, `OpenGL function 'glStateCaptureNV' not found!`);
  glStateCaptureNV_Z_Z(state, mode);
}
alias glStencilClearTagEXT = glStencilClearTagEXT_Z_Z;
__gshared glStencilClearTagEXT_Z_Z = function void (GLsizei stencilTagBits, GLuint stencilClearTag) { glStencilClearTagEXT_Z_Z_loader(stencilTagBits, stencilClearTag); };
private void glStencilClearTagEXT_Z_Z_loader (GLsizei stencilTagBits, GLuint stencilClearTag) {
  *cast(void**)&glStencilClearTagEXT_Z_Z = glbindGetProcAddress(`glStencilClearTagEXT`);
  if (*cast(void**)&glStencilClearTagEXT_Z_Z is null) assert(0, `OpenGL function 'glStencilClearTagEXT' not found!`);
  glStencilClearTagEXT_Z_Z(stencilTagBits, stencilClearTag);
}
alias glStencilFillPathInstancedNV = glStencilFillPathInstancedNV_Z_Z;
__gshared glStencilFillPathInstancedNV_Z_Z = function void (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const(GLfloat)* transformValues) { glStencilFillPathInstancedNV_Z_Z_loader(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); };
private void glStencilFillPathInstancedNV_Z_Z_loader (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const(GLfloat)* transformValues) {
  *cast(void**)&glStencilFillPathInstancedNV_Z_Z = glbindGetProcAddress(`glStencilFillPathInstancedNV`);
  if (*cast(void**)&glStencilFillPathInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glStencilFillPathInstancedNV' not found!`);
  glStencilFillPathInstancedNV_Z_Z(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}
alias glStencilFillPathNV = glStencilFillPathNV_Z_Z;
__gshared glStencilFillPathNV_Z_Z = function void (GLuint path, GLenum fillMode, GLuint mask) { glStencilFillPathNV_Z_Z_loader(path, fillMode, mask); };
private void glStencilFillPathNV_Z_Z_loader (GLuint path, GLenum fillMode, GLuint mask) {
  *cast(void**)&glStencilFillPathNV_Z_Z = glbindGetProcAddress(`glStencilFillPathNV`);
  if (*cast(void**)&glStencilFillPathNV_Z_Z is null) assert(0, `OpenGL function 'glStencilFillPathNV' not found!`);
  glStencilFillPathNV_Z_Z(path, fillMode, mask);
}
alias glStencilFunc = glStencilFunc_Z_Z;
__gshared glStencilFunc_Z_Z = function void (GLenum func, GLint ref_, GLuint mask) { glStencilFunc_Z_Z_loader(func, ref_, mask); };
private void glStencilFunc_Z_Z_loader (GLenum func, GLint ref_, GLuint mask) {
  *cast(void**)&glStencilFunc_Z_Z = glbindGetProcAddress(`glStencilFunc`);
  if (*cast(void**)&glStencilFunc_Z_Z is null) assert(0, `OpenGL function 'glStencilFunc' not found!`);
  glStencilFunc_Z_Z(func, ref_, mask);
}
alias glStencilFuncSeparate = glStencilFuncSeparate_Z_Z;
__gshared glStencilFuncSeparate_Z_Z = function void (GLenum face, GLenum func, GLint ref_, GLuint mask) { glStencilFuncSeparate_Z_Z_loader(face, func, ref_, mask); };
private void glStencilFuncSeparate_Z_Z_loader (GLenum face, GLenum func, GLint ref_, GLuint mask) {
  *cast(void**)&glStencilFuncSeparate_Z_Z = glbindGetProcAddress(`glStencilFuncSeparate`);
  if (*cast(void**)&glStencilFuncSeparate_Z_Z is null) assert(0, `OpenGL function 'glStencilFuncSeparate' not found!`);
  glStencilFuncSeparate_Z_Z(face, func, ref_, mask);
}
alias glStencilFuncSeparateATI = glStencilFuncSeparateATI_Z_Z;
__gshared glStencilFuncSeparateATI_Z_Z = function void (GLenum frontfunc, GLenum backfunc, GLint ref_, GLuint mask) { glStencilFuncSeparateATI_Z_Z_loader(frontfunc, backfunc, ref_, mask); };
private void glStencilFuncSeparateATI_Z_Z_loader (GLenum frontfunc, GLenum backfunc, GLint ref_, GLuint mask) {
  *cast(void**)&glStencilFuncSeparateATI_Z_Z = glbindGetProcAddress(`glStencilFuncSeparateATI`);
  if (*cast(void**)&glStencilFuncSeparateATI_Z_Z is null) assert(0, `OpenGL function 'glStencilFuncSeparateATI' not found!`);
  glStencilFuncSeparateATI_Z_Z(frontfunc, backfunc, ref_, mask);
}
alias glStencilMask = glStencilMask_Z_Z;
__gshared glStencilMask_Z_Z = function void (GLuint mask) { glStencilMask_Z_Z_loader(mask); };
private void glStencilMask_Z_Z_loader (GLuint mask) {
  *cast(void**)&glStencilMask_Z_Z = glbindGetProcAddress(`glStencilMask`);
  if (*cast(void**)&glStencilMask_Z_Z is null) assert(0, `OpenGL function 'glStencilMask' not found!`);
  glStencilMask_Z_Z(mask);
}
alias glStencilMaskSeparate = glStencilMaskSeparate_Z_Z;
__gshared glStencilMaskSeparate_Z_Z = function void (GLenum face, GLuint mask) { glStencilMaskSeparate_Z_Z_loader(face, mask); };
private void glStencilMaskSeparate_Z_Z_loader (GLenum face, GLuint mask) {
  *cast(void**)&glStencilMaskSeparate_Z_Z = glbindGetProcAddress(`glStencilMaskSeparate`);
  if (*cast(void**)&glStencilMaskSeparate_Z_Z is null) assert(0, `OpenGL function 'glStencilMaskSeparate' not found!`);
  glStencilMaskSeparate_Z_Z(face, mask);
}
alias glStencilOp = glStencilOp_Z_Z;
__gshared glStencilOp_Z_Z = function void (GLenum fail, GLenum zfail, GLenum zpass) { glStencilOp_Z_Z_loader(fail, zfail, zpass); };
private void glStencilOp_Z_Z_loader (GLenum fail, GLenum zfail, GLenum zpass) {
  *cast(void**)&glStencilOp_Z_Z = glbindGetProcAddress(`glStencilOp`);
  if (*cast(void**)&glStencilOp_Z_Z is null) assert(0, `OpenGL function 'glStencilOp' not found!`);
  glStencilOp_Z_Z(fail, zfail, zpass);
}
alias glStencilOpSeparate = glStencilOpSeparate_Z_Z;
__gshared glStencilOpSeparate_Z_Z = function void (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { glStencilOpSeparate_Z_Z_loader(face, sfail, dpfail, dppass); };
private void glStencilOpSeparate_Z_Z_loader (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  *cast(void**)&glStencilOpSeparate_Z_Z = glbindGetProcAddress(`glStencilOpSeparate`);
  if (*cast(void**)&glStencilOpSeparate_Z_Z is null) assert(0, `OpenGL function 'glStencilOpSeparate' not found!`);
  glStencilOpSeparate_Z_Z(face, sfail, dpfail, dppass);
}
alias glStencilOpSeparateATI = glStencilOpSeparateATI_Z_Z;
__gshared glStencilOpSeparateATI_Z_Z = function void (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { glStencilOpSeparateATI_Z_Z_loader(face, sfail, dpfail, dppass); };
private void glStencilOpSeparateATI_Z_Z_loader (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  *cast(void**)&glStencilOpSeparateATI_Z_Z = glbindGetProcAddress(`glStencilOpSeparateATI`);
  if (*cast(void**)&glStencilOpSeparateATI_Z_Z is null) assert(0, `OpenGL function 'glStencilOpSeparateATI' not found!`);
  glStencilOpSeparateATI_Z_Z(face, sfail, dpfail, dppass);
}
alias glStencilOpValueAMD = glStencilOpValueAMD_Z_Z;
__gshared glStencilOpValueAMD_Z_Z = function void (GLenum face, GLuint value) { glStencilOpValueAMD_Z_Z_loader(face, value); };
private void glStencilOpValueAMD_Z_Z_loader (GLenum face, GLuint value) {
  *cast(void**)&glStencilOpValueAMD_Z_Z = glbindGetProcAddress(`glStencilOpValueAMD`);
  if (*cast(void**)&glStencilOpValueAMD_Z_Z is null) assert(0, `OpenGL function 'glStencilOpValueAMD' not found!`);
  glStencilOpValueAMD_Z_Z(face, value);
}
alias glStencilStrokePathInstancedNV = glStencilStrokePathInstancedNV_Z_Z;
__gshared glStencilStrokePathInstancedNV_Z_Z = function void (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const(GLfloat)* transformValues) { glStencilStrokePathInstancedNV_Z_Z_loader(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); };
private void glStencilStrokePathInstancedNV_Z_Z_loader (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const(GLfloat)* transformValues) {
  *cast(void**)&glStencilStrokePathInstancedNV_Z_Z = glbindGetProcAddress(`glStencilStrokePathInstancedNV`);
  if (*cast(void**)&glStencilStrokePathInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glStencilStrokePathInstancedNV' not found!`);
  glStencilStrokePathInstancedNV_Z_Z(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}
alias glStencilStrokePathNV = glStencilStrokePathNV_Z_Z;
__gshared glStencilStrokePathNV_Z_Z = function void (GLuint path, GLint reference, GLuint mask) { glStencilStrokePathNV_Z_Z_loader(path, reference, mask); };
private void glStencilStrokePathNV_Z_Z_loader (GLuint path, GLint reference, GLuint mask) {
  *cast(void**)&glStencilStrokePathNV_Z_Z = glbindGetProcAddress(`glStencilStrokePathNV`);
  if (*cast(void**)&glStencilStrokePathNV_Z_Z is null) assert(0, `OpenGL function 'glStencilStrokePathNV' not found!`);
  glStencilStrokePathNV_Z_Z(path, reference, mask);
}
alias glStencilThenCoverFillPathInstancedNV = glStencilThenCoverFillPathInstancedNV_Z_Z;
__gshared glStencilThenCoverFillPathInstancedNV_Z_Z = function void (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) { glStencilThenCoverFillPathInstancedNV_Z_Z_loader(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); };
private void glStencilThenCoverFillPathInstancedNV_Z_Z_loader (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) {
  *cast(void**)&glStencilThenCoverFillPathInstancedNV_Z_Z = glbindGetProcAddress(`glStencilThenCoverFillPathInstancedNV`);
  if (*cast(void**)&glStencilThenCoverFillPathInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathInstancedNV' not found!`);
  glStencilThenCoverFillPathInstancedNV_Z_Z(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
}
alias glStencilThenCoverFillPathNV = glStencilThenCoverFillPathNV_Z_Z;
__gshared glStencilThenCoverFillPathNV_Z_Z = function void (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { glStencilThenCoverFillPathNV_Z_Z_loader(path, fillMode, mask, coverMode); };
private void glStencilThenCoverFillPathNV_Z_Z_loader (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
  *cast(void**)&glStencilThenCoverFillPathNV_Z_Z = glbindGetProcAddress(`glStencilThenCoverFillPathNV`);
  if (*cast(void**)&glStencilThenCoverFillPathNV_Z_Z is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathNV' not found!`);
  glStencilThenCoverFillPathNV_Z_Z(path, fillMode, mask, coverMode);
}
alias glStencilThenCoverStrokePathInstancedNV = glStencilThenCoverStrokePathInstancedNV_Z_Z;
__gshared glStencilThenCoverStrokePathInstancedNV_Z_Z = function void (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) { glStencilThenCoverStrokePathInstancedNV_Z_Z_loader(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); };
private void glStencilThenCoverStrokePathInstancedNV_Z_Z_loader (GLsizei numPaths, GLenum pathNameType, const(void)* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const(GLfloat)* transformValues) {
  *cast(void**)&glStencilThenCoverStrokePathInstancedNV_Z_Z = glbindGetProcAddress(`glStencilThenCoverStrokePathInstancedNV`);
  if (*cast(void**)&glStencilThenCoverStrokePathInstancedNV_Z_Z is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathInstancedNV' not found!`);
  glStencilThenCoverStrokePathInstancedNV_Z_Z(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
}
alias glStencilThenCoverStrokePathNV = glStencilThenCoverStrokePathNV_Z_Z;
__gshared glStencilThenCoverStrokePathNV_Z_Z = function void (GLuint path, GLint reference, GLuint mask, GLenum coverMode) { glStencilThenCoverStrokePathNV_Z_Z_loader(path, reference, mask, coverMode); };
private void glStencilThenCoverStrokePathNV_Z_Z_loader (GLuint path, GLint reference, GLuint mask, GLenum coverMode) {
  *cast(void**)&glStencilThenCoverStrokePathNV_Z_Z = glbindGetProcAddress(`glStencilThenCoverStrokePathNV`);
  if (*cast(void**)&glStencilThenCoverStrokePathNV_Z_Z is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathNV' not found!`);
  glStencilThenCoverStrokePathNV_Z_Z(path, reference, mask, coverMode);
}
alias glStopInstrumentsSGIX = glStopInstrumentsSGIX_Z_Z;
__gshared glStopInstrumentsSGIX_Z_Z = function void (GLint marker) { glStopInstrumentsSGIX_Z_Z_loader(marker); };
private void glStopInstrumentsSGIX_Z_Z_loader (GLint marker) {
  *cast(void**)&glStopInstrumentsSGIX_Z_Z = glbindGetProcAddress(`glStopInstrumentsSGIX`);
  if (*cast(void**)&glStopInstrumentsSGIX_Z_Z is null) assert(0, `OpenGL function 'glStopInstrumentsSGIX' not found!`);
  glStopInstrumentsSGIX_Z_Z(marker);
}
alias glStringMarkerGREMEDY = glStringMarkerGREMEDY_Z_Z;
__gshared glStringMarkerGREMEDY_Z_Z = function void (GLsizei len, const(void)* string) { glStringMarkerGREMEDY_Z_Z_loader(len, string); };
private void glStringMarkerGREMEDY_Z_Z_loader (GLsizei len, const(void)* string) {
  *cast(void**)&glStringMarkerGREMEDY_Z_Z = glbindGetProcAddress(`glStringMarkerGREMEDY`);
  if (*cast(void**)&glStringMarkerGREMEDY_Z_Z is null) assert(0, `OpenGL function 'glStringMarkerGREMEDY' not found!`);
  glStringMarkerGREMEDY_Z_Z(len, string);
}
alias glSubpixelPrecisionBiasNV = glSubpixelPrecisionBiasNV_Z_Z;
__gshared glSubpixelPrecisionBiasNV_Z_Z = function void (GLuint xbits, GLuint ybits) { glSubpixelPrecisionBiasNV_Z_Z_loader(xbits, ybits); };
private void glSubpixelPrecisionBiasNV_Z_Z_loader (GLuint xbits, GLuint ybits) {
  *cast(void**)&glSubpixelPrecisionBiasNV_Z_Z = glbindGetProcAddress(`glSubpixelPrecisionBiasNV`);
  if (*cast(void**)&glSubpixelPrecisionBiasNV_Z_Z is null) assert(0, `OpenGL function 'glSubpixelPrecisionBiasNV' not found!`);
  glSubpixelPrecisionBiasNV_Z_Z(xbits, ybits);
}
alias glSwizzleEXT = glSwizzleEXT_Z_Z;
__gshared glSwizzleEXT_Z_Z = function void (GLuint res, GLuint in_, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { glSwizzleEXT_Z_Z_loader(res, in_, outX, outY, outZ, outW); };
private void glSwizzleEXT_Z_Z_loader (GLuint res, GLuint in_, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  *cast(void**)&glSwizzleEXT_Z_Z = glbindGetProcAddress(`glSwizzleEXT`);
  if (*cast(void**)&glSwizzleEXT_Z_Z is null) assert(0, `OpenGL function 'glSwizzleEXT' not found!`);
  glSwizzleEXT_Z_Z(res, in_, outX, outY, outZ, outW);
}
alias glSyncTextureINTEL = glSyncTextureINTEL_Z_Z;
__gshared glSyncTextureINTEL_Z_Z = function void (GLuint texture) { glSyncTextureINTEL_Z_Z_loader(texture); };
private void glSyncTextureINTEL_Z_Z_loader (GLuint texture) {
  *cast(void**)&glSyncTextureINTEL_Z_Z = glbindGetProcAddress(`glSyncTextureINTEL`);
  if (*cast(void**)&glSyncTextureINTEL_Z_Z is null) assert(0, `OpenGL function 'glSyncTextureINTEL' not found!`);
  glSyncTextureINTEL_Z_Z(texture);
}
alias glTagSampleBufferSGIX = glTagSampleBufferSGIX_Z_Z;
__gshared glTagSampleBufferSGIX_Z_Z = function void () { glTagSampleBufferSGIX_Z_Z_loader(); };
private void glTagSampleBufferSGIX_Z_Z_loader () {
  *cast(void**)&glTagSampleBufferSGIX_Z_Z = glbindGetProcAddress(`glTagSampleBufferSGIX`);
  if (*cast(void**)&glTagSampleBufferSGIX_Z_Z is null) assert(0, `OpenGL function 'glTagSampleBufferSGIX' not found!`);
  glTagSampleBufferSGIX_Z_Z();
}
alias glTangent3bEXT = glTangent3bEXT_Z_Z;
__gshared glTangent3bEXT_Z_Z = function void (GLbyte tx, GLbyte ty, GLbyte tz) { glTangent3bEXT_Z_Z_loader(tx, ty, tz); };
private void glTangent3bEXT_Z_Z_loader (GLbyte tx, GLbyte ty, GLbyte tz) {
  *cast(void**)&glTangent3bEXT_Z_Z = glbindGetProcAddress(`glTangent3bEXT`);
  if (*cast(void**)&glTangent3bEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3bEXT' not found!`);
  glTangent3bEXT_Z_Z(tx, ty, tz);
}
alias glTangent3bvEXT = glTangent3bvEXT_Z_Z;
__gshared glTangent3bvEXT_Z_Z = function void (const(GLbyte)* v) { glTangent3bvEXT_Z_Z_loader(v); };
private void glTangent3bvEXT_Z_Z_loader (const(GLbyte)* v) {
  *cast(void**)&glTangent3bvEXT_Z_Z = glbindGetProcAddress(`glTangent3bvEXT`);
  if (*cast(void**)&glTangent3bvEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3bvEXT' not found!`);
  glTangent3bvEXT_Z_Z(v);
}
alias glTangent3dEXT = glTangent3dEXT_Z_Z;
__gshared glTangent3dEXT_Z_Z = function void (GLdouble tx, GLdouble ty, GLdouble tz) { glTangent3dEXT_Z_Z_loader(tx, ty, tz); };
private void glTangent3dEXT_Z_Z_loader (GLdouble tx, GLdouble ty, GLdouble tz) {
  *cast(void**)&glTangent3dEXT_Z_Z = glbindGetProcAddress(`glTangent3dEXT`);
  if (*cast(void**)&glTangent3dEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3dEXT' not found!`);
  glTangent3dEXT_Z_Z(tx, ty, tz);
}
alias glTangent3dvEXT = glTangent3dvEXT_Z_Z;
__gshared glTangent3dvEXT_Z_Z = function void (const(GLdouble)* v) { glTangent3dvEXT_Z_Z_loader(v); };
private void glTangent3dvEXT_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glTangent3dvEXT_Z_Z = glbindGetProcAddress(`glTangent3dvEXT`);
  if (*cast(void**)&glTangent3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3dvEXT' not found!`);
  glTangent3dvEXT_Z_Z(v);
}
alias glTangent3fEXT = glTangent3fEXT_Z_Z;
__gshared glTangent3fEXT_Z_Z = function void (GLfloat tx, GLfloat ty, GLfloat tz) { glTangent3fEXT_Z_Z_loader(tx, ty, tz); };
private void glTangent3fEXT_Z_Z_loader (GLfloat tx, GLfloat ty, GLfloat tz) {
  *cast(void**)&glTangent3fEXT_Z_Z = glbindGetProcAddress(`glTangent3fEXT`);
  if (*cast(void**)&glTangent3fEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3fEXT' not found!`);
  glTangent3fEXT_Z_Z(tx, ty, tz);
}
alias glTangent3fvEXT = glTangent3fvEXT_Z_Z;
__gshared glTangent3fvEXT_Z_Z = function void (const(GLfloat)* v) { glTangent3fvEXT_Z_Z_loader(v); };
private void glTangent3fvEXT_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glTangent3fvEXT_Z_Z = glbindGetProcAddress(`glTangent3fvEXT`);
  if (*cast(void**)&glTangent3fvEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3fvEXT' not found!`);
  glTangent3fvEXT_Z_Z(v);
}
alias glTangent3iEXT = glTangent3iEXT_Z_Z;
__gshared glTangent3iEXT_Z_Z = function void (GLint tx, GLint ty, GLint tz) { glTangent3iEXT_Z_Z_loader(tx, ty, tz); };
private void glTangent3iEXT_Z_Z_loader (GLint tx, GLint ty, GLint tz) {
  *cast(void**)&glTangent3iEXT_Z_Z = glbindGetProcAddress(`glTangent3iEXT`);
  if (*cast(void**)&glTangent3iEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3iEXT' not found!`);
  glTangent3iEXT_Z_Z(tx, ty, tz);
}
alias glTangent3ivEXT = glTangent3ivEXT_Z_Z;
__gshared glTangent3ivEXT_Z_Z = function void (const(GLint)* v) { glTangent3ivEXT_Z_Z_loader(v); };
private void glTangent3ivEXT_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glTangent3ivEXT_Z_Z = glbindGetProcAddress(`glTangent3ivEXT`);
  if (*cast(void**)&glTangent3ivEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3ivEXT' not found!`);
  glTangent3ivEXT_Z_Z(v);
}
alias glTangent3sEXT = glTangent3sEXT_Z_Z;
__gshared glTangent3sEXT_Z_Z = function void (GLshort tx, GLshort ty, GLshort tz) { glTangent3sEXT_Z_Z_loader(tx, ty, tz); };
private void glTangent3sEXT_Z_Z_loader (GLshort tx, GLshort ty, GLshort tz) {
  *cast(void**)&glTangent3sEXT_Z_Z = glbindGetProcAddress(`glTangent3sEXT`);
  if (*cast(void**)&glTangent3sEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3sEXT' not found!`);
  glTangent3sEXT_Z_Z(tx, ty, tz);
}
alias glTangent3svEXT = glTangent3svEXT_Z_Z;
__gshared glTangent3svEXT_Z_Z = function void (const(GLshort)* v) { glTangent3svEXT_Z_Z_loader(v); };
private void glTangent3svEXT_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glTangent3svEXT_Z_Z = glbindGetProcAddress(`glTangent3svEXT`);
  if (*cast(void**)&glTangent3svEXT_Z_Z is null) assert(0, `OpenGL function 'glTangent3svEXT' not found!`);
  glTangent3svEXT_Z_Z(v);
}
alias glTangentPointerEXT = glTangentPointerEXT_Z_Z;
__gshared glTangentPointerEXT_Z_Z = function void (GLenum type, GLsizei stride, const(void)* pointer) { glTangentPointerEXT_Z_Z_loader(type, stride, pointer); };
private void glTangentPointerEXT_Z_Z_loader (GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glTangentPointerEXT_Z_Z = glbindGetProcAddress(`glTangentPointerEXT`);
  if (*cast(void**)&glTangentPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glTangentPointerEXT' not found!`);
  glTangentPointerEXT_Z_Z(type, stride, pointer);
}
alias glTbufferMask3DFX = glTbufferMask3DFX_Z_Z;
__gshared glTbufferMask3DFX_Z_Z = function void (GLuint mask) { glTbufferMask3DFX_Z_Z_loader(mask); };
private void glTbufferMask3DFX_Z_Z_loader (GLuint mask) {
  *cast(void**)&glTbufferMask3DFX_Z_Z = glbindGetProcAddress(`glTbufferMask3DFX`);
  if (*cast(void**)&glTbufferMask3DFX_Z_Z is null) assert(0, `OpenGL function 'glTbufferMask3DFX' not found!`);
  glTbufferMask3DFX_Z_Z(mask);
}
alias glTessellationFactorAMD = glTessellationFactorAMD_Z_Z;
__gshared glTessellationFactorAMD_Z_Z = function void (GLfloat factor) { glTessellationFactorAMD_Z_Z_loader(factor); };
private void glTessellationFactorAMD_Z_Z_loader (GLfloat factor) {
  *cast(void**)&glTessellationFactorAMD_Z_Z = glbindGetProcAddress(`glTessellationFactorAMD`);
  if (*cast(void**)&glTessellationFactorAMD_Z_Z is null) assert(0, `OpenGL function 'glTessellationFactorAMD' not found!`);
  glTessellationFactorAMD_Z_Z(factor);
}
alias glTessellationModeAMD = glTessellationModeAMD_Z_Z;
__gshared glTessellationModeAMD_Z_Z = function void (GLenum mode) { glTessellationModeAMD_Z_Z_loader(mode); };
private void glTessellationModeAMD_Z_Z_loader (GLenum mode) {
  *cast(void**)&glTessellationModeAMD_Z_Z = glbindGetProcAddress(`glTessellationModeAMD`);
  if (*cast(void**)&glTessellationModeAMD_Z_Z is null) assert(0, `OpenGL function 'glTessellationModeAMD' not found!`);
  glTessellationModeAMD_Z_Z(mode);
}
alias glTestFenceAPPLE = glTestFenceAPPLE_Z_Z;
__gshared glTestFenceAPPLE_Z_Z = function GLboolean (GLuint fence) { return glTestFenceAPPLE_Z_Z_loader(fence); };
private GLboolean glTestFenceAPPLE_Z_Z_loader (GLuint fence) {
  *cast(void**)&glTestFenceAPPLE_Z_Z = glbindGetProcAddress(`glTestFenceAPPLE`);
  if (*cast(void**)&glTestFenceAPPLE_Z_Z is null) assert(0, `OpenGL function 'glTestFenceAPPLE' not found!`);
  return glTestFenceAPPLE_Z_Z(fence);
}
alias glTestFenceNV = glTestFenceNV_Z_Z;
__gshared glTestFenceNV_Z_Z = function GLboolean (GLuint fence) { return glTestFenceNV_Z_Z_loader(fence); };
private GLboolean glTestFenceNV_Z_Z_loader (GLuint fence) {
  *cast(void**)&glTestFenceNV_Z_Z = glbindGetProcAddress(`glTestFenceNV`);
  if (*cast(void**)&glTestFenceNV_Z_Z is null) assert(0, `OpenGL function 'glTestFenceNV' not found!`);
  return glTestFenceNV_Z_Z(fence);
}
alias glTestObjectAPPLE = glTestObjectAPPLE_Z_Z;
__gshared glTestObjectAPPLE_Z_Z = function GLboolean (GLenum object, GLuint name) { return glTestObjectAPPLE_Z_Z_loader(object, name); };
private GLboolean glTestObjectAPPLE_Z_Z_loader (GLenum object, GLuint name) {
  *cast(void**)&glTestObjectAPPLE_Z_Z = glbindGetProcAddress(`glTestObjectAPPLE`);
  if (*cast(void**)&glTestObjectAPPLE_Z_Z is null) assert(0, `OpenGL function 'glTestObjectAPPLE' not found!`);
  return glTestObjectAPPLE_Z_Z(object, name);
}
alias glTexBuffer = glTexBuffer_Z_Z;
__gshared glTexBuffer_Z_Z = function void (GLenum target, GLenum internalformat, GLuint buffer) { glTexBuffer_Z_Z_loader(target, internalformat, buffer); };
private void glTexBuffer_Z_Z_loader (GLenum target, GLenum internalformat, GLuint buffer) {
  *cast(void**)&glTexBuffer_Z_Z = glbindGetProcAddress(`glTexBuffer`);
  if (*cast(void**)&glTexBuffer_Z_Z is null) assert(0, `OpenGL function 'glTexBuffer' not found!`);
  glTexBuffer_Z_Z(target, internalformat, buffer);
}
alias glTexBufferARB = glTexBufferARB_Z_Z;
__gshared glTexBufferARB_Z_Z = function void (GLenum target, GLenum internalformat, GLuint buffer) { glTexBufferARB_Z_Z_loader(target, internalformat, buffer); };
private void glTexBufferARB_Z_Z_loader (GLenum target, GLenum internalformat, GLuint buffer) {
  *cast(void**)&glTexBufferARB_Z_Z = glbindGetProcAddress(`glTexBufferARB`);
  if (*cast(void**)&glTexBufferARB_Z_Z is null) assert(0, `OpenGL function 'glTexBufferARB' not found!`);
  glTexBufferARB_Z_Z(target, internalformat, buffer);
}
alias glTexBufferEXT = glTexBufferEXT_Z_Z;
__gshared glTexBufferEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLuint buffer) { glTexBufferEXT_Z_Z_loader(target, internalformat, buffer); };
private void glTexBufferEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLuint buffer) {
  *cast(void**)&glTexBufferEXT_Z_Z = glbindGetProcAddress(`glTexBufferEXT`);
  if (*cast(void**)&glTexBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glTexBufferEXT' not found!`);
  glTexBufferEXT_Z_Z(target, internalformat, buffer);
}
alias glTexBufferOES = glTexBufferOES_Z_Z;
__gshared glTexBufferOES_Z_Z = function void (GLenum target, GLenum internalformat, GLuint buffer) { glTexBufferOES_Z_Z_loader(target, internalformat, buffer); };
private void glTexBufferOES_Z_Z_loader (GLenum target, GLenum internalformat, GLuint buffer) {
  *cast(void**)&glTexBufferOES_Z_Z = glbindGetProcAddress(`glTexBufferOES`);
  if (*cast(void**)&glTexBufferOES_Z_Z is null) assert(0, `OpenGL function 'glTexBufferOES' not found!`);
  glTexBufferOES_Z_Z(target, internalformat, buffer);
}
alias glTexBufferRange = glTexBufferRange_Z_Z;
__gshared glTexBufferRange_Z_Z = function void (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { glTexBufferRange_Z_Z_loader(target, internalformat, buffer, offset, size); };
private void glTexBufferRange_Z_Z_loader (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glTexBufferRange_Z_Z = glbindGetProcAddress(`glTexBufferRange`);
  if (*cast(void**)&glTexBufferRange_Z_Z is null) assert(0, `OpenGL function 'glTexBufferRange' not found!`);
  glTexBufferRange_Z_Z(target, internalformat, buffer, offset, size);
}
alias glTexBufferRangeEXT = glTexBufferRangeEXT_Z_Z;
__gshared glTexBufferRangeEXT_Z_Z = function void (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { glTexBufferRangeEXT_Z_Z_loader(target, internalformat, buffer, offset, size); };
private void glTexBufferRangeEXT_Z_Z_loader (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glTexBufferRangeEXT_Z_Z = glbindGetProcAddress(`glTexBufferRangeEXT`);
  if (*cast(void**)&glTexBufferRangeEXT_Z_Z is null) assert(0, `OpenGL function 'glTexBufferRangeEXT' not found!`);
  glTexBufferRangeEXT_Z_Z(target, internalformat, buffer, offset, size);
}
alias glTexBufferRangeOES = glTexBufferRangeOES_Z_Z;
__gshared glTexBufferRangeOES_Z_Z = function void (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { glTexBufferRangeOES_Z_Z_loader(target, internalformat, buffer, offset, size); };
private void glTexBufferRangeOES_Z_Z_loader (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glTexBufferRangeOES_Z_Z = glbindGetProcAddress(`glTexBufferRangeOES`);
  if (*cast(void**)&glTexBufferRangeOES_Z_Z is null) assert(0, `OpenGL function 'glTexBufferRangeOES' not found!`);
  glTexBufferRangeOES_Z_Z(target, internalformat, buffer, offset, size);
}
alias glTexBumpParameterfvATI = glTexBumpParameterfvATI_Z_Z;
__gshared glTexBumpParameterfvATI_Z_Z = function void (GLenum pname, const(GLfloat)* param) { glTexBumpParameterfvATI_Z_Z_loader(pname, param); };
private void glTexBumpParameterfvATI_Z_Z_loader (GLenum pname, const(GLfloat)* param) {
  *cast(void**)&glTexBumpParameterfvATI_Z_Z = glbindGetProcAddress(`glTexBumpParameterfvATI`);
  if (*cast(void**)&glTexBumpParameterfvATI_Z_Z is null) assert(0, `OpenGL function 'glTexBumpParameterfvATI' not found!`);
  glTexBumpParameterfvATI_Z_Z(pname, param);
}
alias glTexBumpParameterivATI = glTexBumpParameterivATI_Z_Z;
__gshared glTexBumpParameterivATI_Z_Z = function void (GLenum pname, const(GLint)* param) { glTexBumpParameterivATI_Z_Z_loader(pname, param); };
private void glTexBumpParameterivATI_Z_Z_loader (GLenum pname, const(GLint)* param) {
  *cast(void**)&glTexBumpParameterivATI_Z_Z = glbindGetProcAddress(`glTexBumpParameterivATI`);
  if (*cast(void**)&glTexBumpParameterivATI_Z_Z is null) assert(0, `OpenGL function 'glTexBumpParameterivATI' not found!`);
  glTexBumpParameterivATI_Z_Z(pname, param);
}
alias glTexCoord1bOES = glTexCoord1bOES_Z_Z;
__gshared glTexCoord1bOES_Z_Z = function void (GLbyte s) { glTexCoord1bOES_Z_Z_loader(s); };
private void glTexCoord1bOES_Z_Z_loader (GLbyte s) {
  *cast(void**)&glTexCoord1bOES_Z_Z = glbindGetProcAddress(`glTexCoord1bOES`);
  if (*cast(void**)&glTexCoord1bOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1bOES' not found!`);
  glTexCoord1bOES_Z_Z(s);
}
alias glTexCoord1bvOES = glTexCoord1bvOES_Z_Z;
__gshared glTexCoord1bvOES_Z_Z = function void (const(GLbyte)* coords) { glTexCoord1bvOES_Z_Z_loader(coords); };
private void glTexCoord1bvOES_Z_Z_loader (const(GLbyte)* coords) {
  *cast(void**)&glTexCoord1bvOES_Z_Z = glbindGetProcAddress(`glTexCoord1bvOES`);
  if (*cast(void**)&glTexCoord1bvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1bvOES' not found!`);
  glTexCoord1bvOES_Z_Z(coords);
}
alias glTexCoord1d = glTexCoord1d_Z_Z;
__gshared glTexCoord1d_Z_Z = function void (GLdouble s) { glTexCoord1d_Z_Z_loader(s); };
private void glTexCoord1d_Z_Z_loader (GLdouble s) {
  *cast(void**)&glTexCoord1d_Z_Z = glbindGetProcAddress(`glTexCoord1d`);
  if (*cast(void**)&glTexCoord1d_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1d' not found!`);
  glTexCoord1d_Z_Z(s);
}
alias glTexCoord1dv = glTexCoord1dv_Z_Z;
__gshared glTexCoord1dv_Z_Z = function void (const(GLdouble)* v) { glTexCoord1dv_Z_Z_loader(v); };
private void glTexCoord1dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glTexCoord1dv_Z_Z = glbindGetProcAddress(`glTexCoord1dv`);
  if (*cast(void**)&glTexCoord1dv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1dv' not found!`);
  glTexCoord1dv_Z_Z(v);
}
alias glTexCoord1f = glTexCoord1f_Z_Z;
__gshared glTexCoord1f_Z_Z = function void (GLfloat s) { glTexCoord1f_Z_Z_loader(s); };
private void glTexCoord1f_Z_Z_loader (GLfloat s) {
  *cast(void**)&glTexCoord1f_Z_Z = glbindGetProcAddress(`glTexCoord1f`);
  if (*cast(void**)&glTexCoord1f_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1f' not found!`);
  glTexCoord1f_Z_Z(s);
}
alias glTexCoord1fv = glTexCoord1fv_Z_Z;
__gshared glTexCoord1fv_Z_Z = function void (const(GLfloat)* v) { glTexCoord1fv_Z_Z_loader(v); };
private void glTexCoord1fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glTexCoord1fv_Z_Z = glbindGetProcAddress(`glTexCoord1fv`);
  if (*cast(void**)&glTexCoord1fv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1fv' not found!`);
  glTexCoord1fv_Z_Z(v);
}
alias glTexCoord1hNV = glTexCoord1hNV_Z_Z;
__gshared glTexCoord1hNV_Z_Z = function void (GLhalfNV s) { glTexCoord1hNV_Z_Z_loader(s); };
private void glTexCoord1hNV_Z_Z_loader (GLhalfNV s) {
  *cast(void**)&glTexCoord1hNV_Z_Z = glbindGetProcAddress(`glTexCoord1hNV`);
  if (*cast(void**)&glTexCoord1hNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1hNV' not found!`);
  glTexCoord1hNV_Z_Z(s);
}
alias glTexCoord1hvNV = glTexCoord1hvNV_Z_Z;
__gshared glTexCoord1hvNV_Z_Z = function void (const(GLhalfNV)* v) { glTexCoord1hvNV_Z_Z_loader(v); };
private void glTexCoord1hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glTexCoord1hvNV_Z_Z = glbindGetProcAddress(`glTexCoord1hvNV`);
  if (*cast(void**)&glTexCoord1hvNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1hvNV' not found!`);
  glTexCoord1hvNV_Z_Z(v);
}
alias glTexCoord1i = glTexCoord1i_Z_Z;
__gshared glTexCoord1i_Z_Z = function void (GLint s) { glTexCoord1i_Z_Z_loader(s); };
private void glTexCoord1i_Z_Z_loader (GLint s) {
  *cast(void**)&glTexCoord1i_Z_Z = glbindGetProcAddress(`glTexCoord1i`);
  if (*cast(void**)&glTexCoord1i_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1i' not found!`);
  glTexCoord1i_Z_Z(s);
}
alias glTexCoord1iv = glTexCoord1iv_Z_Z;
__gshared glTexCoord1iv_Z_Z = function void (const(GLint)* v) { glTexCoord1iv_Z_Z_loader(v); };
private void glTexCoord1iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glTexCoord1iv_Z_Z = glbindGetProcAddress(`glTexCoord1iv`);
  if (*cast(void**)&glTexCoord1iv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1iv' not found!`);
  glTexCoord1iv_Z_Z(v);
}
alias glTexCoord1s = glTexCoord1s_Z_Z;
__gshared glTexCoord1s_Z_Z = function void (GLshort s) { glTexCoord1s_Z_Z_loader(s); };
private void glTexCoord1s_Z_Z_loader (GLshort s) {
  *cast(void**)&glTexCoord1s_Z_Z = glbindGetProcAddress(`glTexCoord1s`);
  if (*cast(void**)&glTexCoord1s_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1s' not found!`);
  glTexCoord1s_Z_Z(s);
}
alias glTexCoord1sv = glTexCoord1sv_Z_Z;
__gshared glTexCoord1sv_Z_Z = function void (const(GLshort)* v) { glTexCoord1sv_Z_Z_loader(v); };
private void glTexCoord1sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glTexCoord1sv_Z_Z = glbindGetProcAddress(`glTexCoord1sv`);
  if (*cast(void**)&glTexCoord1sv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1sv' not found!`);
  glTexCoord1sv_Z_Z(v);
}
alias glTexCoord1xOES = glTexCoord1xOES_Z_Z;
__gshared glTexCoord1xOES_Z_Z = function void (GLfixed s) { glTexCoord1xOES_Z_Z_loader(s); };
private void glTexCoord1xOES_Z_Z_loader (GLfixed s) {
  *cast(void**)&glTexCoord1xOES_Z_Z = glbindGetProcAddress(`glTexCoord1xOES`);
  if (*cast(void**)&glTexCoord1xOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1xOES' not found!`);
  glTexCoord1xOES_Z_Z(s);
}
alias glTexCoord1xvOES = glTexCoord1xvOES_Z_Z;
__gshared glTexCoord1xvOES_Z_Z = function void (const(GLfixed)* coords) { glTexCoord1xvOES_Z_Z_loader(coords); };
private void glTexCoord1xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glTexCoord1xvOES_Z_Z = glbindGetProcAddress(`glTexCoord1xvOES`);
  if (*cast(void**)&glTexCoord1xvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord1xvOES' not found!`);
  glTexCoord1xvOES_Z_Z(coords);
}
alias glTexCoord2bOES = glTexCoord2bOES_Z_Z;
__gshared glTexCoord2bOES_Z_Z = function void (GLbyte s, GLbyte t) { glTexCoord2bOES_Z_Z_loader(s, t); };
private void glTexCoord2bOES_Z_Z_loader (GLbyte s, GLbyte t) {
  *cast(void**)&glTexCoord2bOES_Z_Z = glbindGetProcAddress(`glTexCoord2bOES`);
  if (*cast(void**)&glTexCoord2bOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2bOES' not found!`);
  glTexCoord2bOES_Z_Z(s, t);
}
alias glTexCoord2bvOES = glTexCoord2bvOES_Z_Z;
__gshared glTexCoord2bvOES_Z_Z = function void (const(GLbyte)* coords) { glTexCoord2bvOES_Z_Z_loader(coords); };
private void glTexCoord2bvOES_Z_Z_loader (const(GLbyte)* coords) {
  *cast(void**)&glTexCoord2bvOES_Z_Z = glbindGetProcAddress(`glTexCoord2bvOES`);
  if (*cast(void**)&glTexCoord2bvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2bvOES' not found!`);
  glTexCoord2bvOES_Z_Z(coords);
}
alias glTexCoord2d = glTexCoord2d_Z_Z;
__gshared glTexCoord2d_Z_Z = function void (GLdouble s, GLdouble t) { glTexCoord2d_Z_Z_loader(s, t); };
private void glTexCoord2d_Z_Z_loader (GLdouble s, GLdouble t) {
  *cast(void**)&glTexCoord2d_Z_Z = glbindGetProcAddress(`glTexCoord2d`);
  if (*cast(void**)&glTexCoord2d_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2d' not found!`);
  glTexCoord2d_Z_Z(s, t);
}
alias glTexCoord2dv = glTexCoord2dv_Z_Z;
__gshared glTexCoord2dv_Z_Z = function void (const(GLdouble)* v) { glTexCoord2dv_Z_Z_loader(v); };
private void glTexCoord2dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glTexCoord2dv_Z_Z = glbindGetProcAddress(`glTexCoord2dv`);
  if (*cast(void**)&glTexCoord2dv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2dv' not found!`);
  glTexCoord2dv_Z_Z(v);
}
alias glTexCoord2f = glTexCoord2f_Z_Z;
__gshared glTexCoord2f_Z_Z = function void (GLfloat s, GLfloat t) { glTexCoord2f_Z_Z_loader(s, t); };
private void glTexCoord2f_Z_Z_loader (GLfloat s, GLfloat t) {
  *cast(void**)&glTexCoord2f_Z_Z = glbindGetProcAddress(`glTexCoord2f`);
  if (*cast(void**)&glTexCoord2f_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2f' not found!`);
  glTexCoord2f_Z_Z(s, t);
}
alias glTexCoord2fColor3fVertex3fSUN = glTexCoord2fColor3fVertex3fSUN_Z_Z;
__gshared glTexCoord2fColor3fVertex3fSUN_Z_Z = function void (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { glTexCoord2fColor3fVertex3fSUN_Z_Z_loader(s, t, r, g, b, x, y, z); };
private void glTexCoord2fColor3fVertex3fSUN_Z_Z_loader (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glTexCoord2fColor3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fColor3fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fColor3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fSUN' not found!`);
  glTexCoord2fColor3fVertex3fSUN_Z_Z(s, t, r, g, b, x, y, z);
}
alias glTexCoord2fColor3fVertex3fvSUN = glTexCoord2fColor3fVertex3fvSUN_Z_Z;
__gshared glTexCoord2fColor3fVertex3fvSUN_Z_Z = function void (const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* v) { glTexCoord2fColor3fVertex3fvSUN_Z_Z_loader(tc, c, v); };
private void glTexCoord2fColor3fVertex3fvSUN_Z_Z_loader (const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* v) {
  *cast(void**)&glTexCoord2fColor3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fColor3fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fColor3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fvSUN' not found!`);
  glTexCoord2fColor3fVertex3fvSUN_Z_Z(tc, c, v);
}
alias glTexCoord2fColor4fNormal3fVertex3fSUN = glTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z;
__gshared glTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z = function void (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z_loader(s, t, r, g, b, a, nx, ny, nz, x, y, z); };
private void glTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z_loader (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  glTexCoord2fColor4fNormal3fVertex3fSUN_Z_Z(s, t, r, g, b, a, nx, ny, nz, x, y, z);
}
alias glTexCoord2fColor4fNormal3fVertex3fvSUN = glTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z;
__gshared glTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z = function void (const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) { glTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z_loader(tc, c, n, v); };
private void glTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z_loader (const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  glTexCoord2fColor4fNormal3fVertex3fvSUN_Z_Z(tc, c, n, v);
}
alias glTexCoord2fColor4ubVertex3fSUN = glTexCoord2fColor4ubVertex3fSUN_Z_Z;
__gshared glTexCoord2fColor4ubVertex3fSUN_Z_Z = function void (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { glTexCoord2fColor4ubVertex3fSUN_Z_Z_loader(s, t, r, g, b, a, x, y, z); };
private void glTexCoord2fColor4ubVertex3fSUN_Z_Z_loader (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glTexCoord2fColor4ubVertex3fSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fColor4ubVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fColor4ubVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fSUN' not found!`);
  glTexCoord2fColor4ubVertex3fSUN_Z_Z(s, t, r, g, b, a, x, y, z);
}
alias glTexCoord2fColor4ubVertex3fvSUN = glTexCoord2fColor4ubVertex3fvSUN_Z_Z;
__gshared glTexCoord2fColor4ubVertex3fvSUN_Z_Z = function void (const(GLfloat)* tc, const(GLubyte)* c, const(GLfloat)* v) { glTexCoord2fColor4ubVertex3fvSUN_Z_Z_loader(tc, c, v); };
private void glTexCoord2fColor4ubVertex3fvSUN_Z_Z_loader (const(GLfloat)* tc, const(GLubyte)* c, const(GLfloat)* v) {
  *cast(void**)&glTexCoord2fColor4ubVertex3fvSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fColor4ubVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fColor4ubVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fvSUN' not found!`);
  glTexCoord2fColor4ubVertex3fvSUN_Z_Z(tc, c, v);
}
alias glTexCoord2fNormal3fVertex3fSUN = glTexCoord2fNormal3fVertex3fSUN_Z_Z;
__gshared glTexCoord2fNormal3fVertex3fSUN_Z_Z = function void (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { glTexCoord2fNormal3fVertex3fSUN_Z_Z_loader(s, t, nx, ny, nz, x, y, z); };
private void glTexCoord2fNormal3fVertex3fSUN_Z_Z_loader (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glTexCoord2fNormal3fVertex3fSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fNormal3fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fNormal3fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fSUN' not found!`);
  glTexCoord2fNormal3fVertex3fSUN_Z_Z(s, t, nx, ny, nz, x, y, z);
}
alias glTexCoord2fNormal3fVertex3fvSUN = glTexCoord2fNormal3fVertex3fvSUN_Z_Z;
__gshared glTexCoord2fNormal3fVertex3fvSUN_Z_Z = function void (const(GLfloat)* tc, const(GLfloat)* n, const(GLfloat)* v) { glTexCoord2fNormal3fVertex3fvSUN_Z_Z_loader(tc, n, v); };
private void glTexCoord2fNormal3fVertex3fvSUN_Z_Z_loader (const(GLfloat)* tc, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glTexCoord2fNormal3fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fNormal3fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fNormal3fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fvSUN' not found!`);
  glTexCoord2fNormal3fVertex3fvSUN_Z_Z(tc, n, v);
}
alias glTexCoord2fVertex3fSUN = glTexCoord2fVertex3fSUN_Z_Z;
__gshared glTexCoord2fVertex3fSUN_Z_Z = function void (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { glTexCoord2fVertex3fSUN_Z_Z_loader(s, t, x, y, z); };
private void glTexCoord2fVertex3fSUN_Z_Z_loader (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glTexCoord2fVertex3fSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fVertex3fSUN`);
  if (*cast(void**)&glTexCoord2fVertex3fSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fSUN' not found!`);
  glTexCoord2fVertex3fSUN_Z_Z(s, t, x, y, z);
}
alias glTexCoord2fVertex3fvSUN = glTexCoord2fVertex3fvSUN_Z_Z;
__gshared glTexCoord2fVertex3fvSUN_Z_Z = function void (const(GLfloat)* tc, const(GLfloat)* v) { glTexCoord2fVertex3fvSUN_Z_Z_loader(tc, v); };
private void glTexCoord2fVertex3fvSUN_Z_Z_loader (const(GLfloat)* tc, const(GLfloat)* v) {
  *cast(void**)&glTexCoord2fVertex3fvSUN_Z_Z = glbindGetProcAddress(`glTexCoord2fVertex3fvSUN`);
  if (*cast(void**)&glTexCoord2fVertex3fvSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fvSUN' not found!`);
  glTexCoord2fVertex3fvSUN_Z_Z(tc, v);
}
alias glTexCoord2fv = glTexCoord2fv_Z_Z;
__gshared glTexCoord2fv_Z_Z = function void (const(GLfloat)* v) { glTexCoord2fv_Z_Z_loader(v); };
private void glTexCoord2fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glTexCoord2fv_Z_Z = glbindGetProcAddress(`glTexCoord2fv`);
  if (*cast(void**)&glTexCoord2fv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2fv' not found!`);
  glTexCoord2fv_Z_Z(v);
}
alias glTexCoord2hNV = glTexCoord2hNV_Z_Z;
__gshared glTexCoord2hNV_Z_Z = function void (GLhalfNV s, GLhalfNV t) { glTexCoord2hNV_Z_Z_loader(s, t); };
private void glTexCoord2hNV_Z_Z_loader (GLhalfNV s, GLhalfNV t) {
  *cast(void**)&glTexCoord2hNV_Z_Z = glbindGetProcAddress(`glTexCoord2hNV`);
  if (*cast(void**)&glTexCoord2hNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2hNV' not found!`);
  glTexCoord2hNV_Z_Z(s, t);
}
alias glTexCoord2hvNV = glTexCoord2hvNV_Z_Z;
__gshared glTexCoord2hvNV_Z_Z = function void (const(GLhalfNV)* v) { glTexCoord2hvNV_Z_Z_loader(v); };
private void glTexCoord2hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glTexCoord2hvNV_Z_Z = glbindGetProcAddress(`glTexCoord2hvNV`);
  if (*cast(void**)&glTexCoord2hvNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2hvNV' not found!`);
  glTexCoord2hvNV_Z_Z(v);
}
alias glTexCoord2i = glTexCoord2i_Z_Z;
__gshared glTexCoord2i_Z_Z = function void (GLint s, GLint t) { glTexCoord2i_Z_Z_loader(s, t); };
private void glTexCoord2i_Z_Z_loader (GLint s, GLint t) {
  *cast(void**)&glTexCoord2i_Z_Z = glbindGetProcAddress(`glTexCoord2i`);
  if (*cast(void**)&glTexCoord2i_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2i' not found!`);
  glTexCoord2i_Z_Z(s, t);
}
alias glTexCoord2iv = glTexCoord2iv_Z_Z;
__gshared glTexCoord2iv_Z_Z = function void (const(GLint)* v) { glTexCoord2iv_Z_Z_loader(v); };
private void glTexCoord2iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glTexCoord2iv_Z_Z = glbindGetProcAddress(`glTexCoord2iv`);
  if (*cast(void**)&glTexCoord2iv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2iv' not found!`);
  glTexCoord2iv_Z_Z(v);
}
alias glTexCoord2s = glTexCoord2s_Z_Z;
__gshared glTexCoord2s_Z_Z = function void (GLshort s, GLshort t) { glTexCoord2s_Z_Z_loader(s, t); };
private void glTexCoord2s_Z_Z_loader (GLshort s, GLshort t) {
  *cast(void**)&glTexCoord2s_Z_Z = glbindGetProcAddress(`glTexCoord2s`);
  if (*cast(void**)&glTexCoord2s_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2s' not found!`);
  glTexCoord2s_Z_Z(s, t);
}
alias glTexCoord2sv = glTexCoord2sv_Z_Z;
__gshared glTexCoord2sv_Z_Z = function void (const(GLshort)* v) { glTexCoord2sv_Z_Z_loader(v); };
private void glTexCoord2sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glTexCoord2sv_Z_Z = glbindGetProcAddress(`glTexCoord2sv`);
  if (*cast(void**)&glTexCoord2sv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2sv' not found!`);
  glTexCoord2sv_Z_Z(v);
}
alias glTexCoord2xOES = glTexCoord2xOES_Z_Z;
__gshared glTexCoord2xOES_Z_Z = function void (GLfixed s, GLfixed t) { glTexCoord2xOES_Z_Z_loader(s, t); };
private void glTexCoord2xOES_Z_Z_loader (GLfixed s, GLfixed t) {
  *cast(void**)&glTexCoord2xOES_Z_Z = glbindGetProcAddress(`glTexCoord2xOES`);
  if (*cast(void**)&glTexCoord2xOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2xOES' not found!`);
  glTexCoord2xOES_Z_Z(s, t);
}
alias glTexCoord2xvOES = glTexCoord2xvOES_Z_Z;
__gshared glTexCoord2xvOES_Z_Z = function void (const(GLfixed)* coords) { glTexCoord2xvOES_Z_Z_loader(coords); };
private void glTexCoord2xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glTexCoord2xvOES_Z_Z = glbindGetProcAddress(`glTexCoord2xvOES`);
  if (*cast(void**)&glTexCoord2xvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord2xvOES' not found!`);
  glTexCoord2xvOES_Z_Z(coords);
}
alias glTexCoord3bOES = glTexCoord3bOES_Z_Z;
__gshared glTexCoord3bOES_Z_Z = function void (GLbyte s, GLbyte t, GLbyte r) { glTexCoord3bOES_Z_Z_loader(s, t, r); };
private void glTexCoord3bOES_Z_Z_loader (GLbyte s, GLbyte t, GLbyte r) {
  *cast(void**)&glTexCoord3bOES_Z_Z = glbindGetProcAddress(`glTexCoord3bOES`);
  if (*cast(void**)&glTexCoord3bOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3bOES' not found!`);
  glTexCoord3bOES_Z_Z(s, t, r);
}
alias glTexCoord3bvOES = glTexCoord3bvOES_Z_Z;
__gshared glTexCoord3bvOES_Z_Z = function void (const(GLbyte)* coords) { glTexCoord3bvOES_Z_Z_loader(coords); };
private void glTexCoord3bvOES_Z_Z_loader (const(GLbyte)* coords) {
  *cast(void**)&glTexCoord3bvOES_Z_Z = glbindGetProcAddress(`glTexCoord3bvOES`);
  if (*cast(void**)&glTexCoord3bvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3bvOES' not found!`);
  glTexCoord3bvOES_Z_Z(coords);
}
alias glTexCoord3d = glTexCoord3d_Z_Z;
__gshared glTexCoord3d_Z_Z = function void (GLdouble s, GLdouble t, GLdouble r) { glTexCoord3d_Z_Z_loader(s, t, r); };
private void glTexCoord3d_Z_Z_loader (GLdouble s, GLdouble t, GLdouble r) {
  *cast(void**)&glTexCoord3d_Z_Z = glbindGetProcAddress(`glTexCoord3d`);
  if (*cast(void**)&glTexCoord3d_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3d' not found!`);
  glTexCoord3d_Z_Z(s, t, r);
}
alias glTexCoord3dv = glTexCoord3dv_Z_Z;
__gshared glTexCoord3dv_Z_Z = function void (const(GLdouble)* v) { glTexCoord3dv_Z_Z_loader(v); };
private void glTexCoord3dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glTexCoord3dv_Z_Z = glbindGetProcAddress(`glTexCoord3dv`);
  if (*cast(void**)&glTexCoord3dv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3dv' not found!`);
  glTexCoord3dv_Z_Z(v);
}
alias glTexCoord3f = glTexCoord3f_Z_Z;
__gshared glTexCoord3f_Z_Z = function void (GLfloat s, GLfloat t, GLfloat r) { glTexCoord3f_Z_Z_loader(s, t, r); };
private void glTexCoord3f_Z_Z_loader (GLfloat s, GLfloat t, GLfloat r) {
  *cast(void**)&glTexCoord3f_Z_Z = glbindGetProcAddress(`glTexCoord3f`);
  if (*cast(void**)&glTexCoord3f_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3f' not found!`);
  glTexCoord3f_Z_Z(s, t, r);
}
alias glTexCoord3fv = glTexCoord3fv_Z_Z;
__gshared glTexCoord3fv_Z_Z = function void (const(GLfloat)* v) { glTexCoord3fv_Z_Z_loader(v); };
private void glTexCoord3fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glTexCoord3fv_Z_Z = glbindGetProcAddress(`glTexCoord3fv`);
  if (*cast(void**)&glTexCoord3fv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3fv' not found!`);
  glTexCoord3fv_Z_Z(v);
}
alias glTexCoord3hNV = glTexCoord3hNV_Z_Z;
__gshared glTexCoord3hNV_Z_Z = function void (GLhalfNV s, GLhalfNV t, GLhalfNV r) { glTexCoord3hNV_Z_Z_loader(s, t, r); };
private void glTexCoord3hNV_Z_Z_loader (GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  *cast(void**)&glTexCoord3hNV_Z_Z = glbindGetProcAddress(`glTexCoord3hNV`);
  if (*cast(void**)&glTexCoord3hNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3hNV' not found!`);
  glTexCoord3hNV_Z_Z(s, t, r);
}
alias glTexCoord3hvNV = glTexCoord3hvNV_Z_Z;
__gshared glTexCoord3hvNV_Z_Z = function void (const(GLhalfNV)* v) { glTexCoord3hvNV_Z_Z_loader(v); };
private void glTexCoord3hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glTexCoord3hvNV_Z_Z = glbindGetProcAddress(`glTexCoord3hvNV`);
  if (*cast(void**)&glTexCoord3hvNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3hvNV' not found!`);
  glTexCoord3hvNV_Z_Z(v);
}
alias glTexCoord3i = glTexCoord3i_Z_Z;
__gshared glTexCoord3i_Z_Z = function void (GLint s, GLint t, GLint r) { glTexCoord3i_Z_Z_loader(s, t, r); };
private void glTexCoord3i_Z_Z_loader (GLint s, GLint t, GLint r) {
  *cast(void**)&glTexCoord3i_Z_Z = glbindGetProcAddress(`glTexCoord3i`);
  if (*cast(void**)&glTexCoord3i_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3i' not found!`);
  glTexCoord3i_Z_Z(s, t, r);
}
alias glTexCoord3iv = glTexCoord3iv_Z_Z;
__gshared glTexCoord3iv_Z_Z = function void (const(GLint)* v) { glTexCoord3iv_Z_Z_loader(v); };
private void glTexCoord3iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glTexCoord3iv_Z_Z = glbindGetProcAddress(`glTexCoord3iv`);
  if (*cast(void**)&glTexCoord3iv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3iv' not found!`);
  glTexCoord3iv_Z_Z(v);
}
alias glTexCoord3s = glTexCoord3s_Z_Z;
__gshared glTexCoord3s_Z_Z = function void (GLshort s, GLshort t, GLshort r) { glTexCoord3s_Z_Z_loader(s, t, r); };
private void glTexCoord3s_Z_Z_loader (GLshort s, GLshort t, GLshort r) {
  *cast(void**)&glTexCoord3s_Z_Z = glbindGetProcAddress(`glTexCoord3s`);
  if (*cast(void**)&glTexCoord3s_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3s' not found!`);
  glTexCoord3s_Z_Z(s, t, r);
}
alias glTexCoord3sv = glTexCoord3sv_Z_Z;
__gshared glTexCoord3sv_Z_Z = function void (const(GLshort)* v) { glTexCoord3sv_Z_Z_loader(v); };
private void glTexCoord3sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glTexCoord3sv_Z_Z = glbindGetProcAddress(`glTexCoord3sv`);
  if (*cast(void**)&glTexCoord3sv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3sv' not found!`);
  glTexCoord3sv_Z_Z(v);
}
alias glTexCoord3xOES = glTexCoord3xOES_Z_Z;
__gshared glTexCoord3xOES_Z_Z = function void (GLfixed s, GLfixed t, GLfixed r) { glTexCoord3xOES_Z_Z_loader(s, t, r); };
private void glTexCoord3xOES_Z_Z_loader (GLfixed s, GLfixed t, GLfixed r) {
  *cast(void**)&glTexCoord3xOES_Z_Z = glbindGetProcAddress(`glTexCoord3xOES`);
  if (*cast(void**)&glTexCoord3xOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3xOES' not found!`);
  glTexCoord3xOES_Z_Z(s, t, r);
}
alias glTexCoord3xvOES = glTexCoord3xvOES_Z_Z;
__gshared glTexCoord3xvOES_Z_Z = function void (const(GLfixed)* coords) { glTexCoord3xvOES_Z_Z_loader(coords); };
private void glTexCoord3xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glTexCoord3xvOES_Z_Z = glbindGetProcAddress(`glTexCoord3xvOES`);
  if (*cast(void**)&glTexCoord3xvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord3xvOES' not found!`);
  glTexCoord3xvOES_Z_Z(coords);
}
alias glTexCoord4bOES = glTexCoord4bOES_Z_Z;
__gshared glTexCoord4bOES_Z_Z = function void (GLbyte s, GLbyte t, GLbyte r, GLbyte q) { glTexCoord4bOES_Z_Z_loader(s, t, r, q); };
private void glTexCoord4bOES_Z_Z_loader (GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
  *cast(void**)&glTexCoord4bOES_Z_Z = glbindGetProcAddress(`glTexCoord4bOES`);
  if (*cast(void**)&glTexCoord4bOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4bOES' not found!`);
  glTexCoord4bOES_Z_Z(s, t, r, q);
}
alias glTexCoord4bvOES = glTexCoord4bvOES_Z_Z;
__gshared glTexCoord4bvOES_Z_Z = function void (const(GLbyte)* coords) { glTexCoord4bvOES_Z_Z_loader(coords); };
private void glTexCoord4bvOES_Z_Z_loader (const(GLbyte)* coords) {
  *cast(void**)&glTexCoord4bvOES_Z_Z = glbindGetProcAddress(`glTexCoord4bvOES`);
  if (*cast(void**)&glTexCoord4bvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4bvOES' not found!`);
  glTexCoord4bvOES_Z_Z(coords);
}
alias glTexCoord4d = glTexCoord4d_Z_Z;
__gshared glTexCoord4d_Z_Z = function void (GLdouble s, GLdouble t, GLdouble r, GLdouble q) { glTexCoord4d_Z_Z_loader(s, t, r, q); };
private void glTexCoord4d_Z_Z_loader (GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  *cast(void**)&glTexCoord4d_Z_Z = glbindGetProcAddress(`glTexCoord4d`);
  if (*cast(void**)&glTexCoord4d_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4d' not found!`);
  glTexCoord4d_Z_Z(s, t, r, q);
}
alias glTexCoord4dv = glTexCoord4dv_Z_Z;
__gshared glTexCoord4dv_Z_Z = function void (const(GLdouble)* v) { glTexCoord4dv_Z_Z_loader(v); };
private void glTexCoord4dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glTexCoord4dv_Z_Z = glbindGetProcAddress(`glTexCoord4dv`);
  if (*cast(void**)&glTexCoord4dv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4dv' not found!`);
  glTexCoord4dv_Z_Z(v);
}
alias glTexCoord4f = glTexCoord4f_Z_Z;
__gshared glTexCoord4f_Z_Z = function void (GLfloat s, GLfloat t, GLfloat r, GLfloat q) { glTexCoord4f_Z_Z_loader(s, t, r, q); };
private void glTexCoord4f_Z_Z_loader (GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  *cast(void**)&glTexCoord4f_Z_Z = glbindGetProcAddress(`glTexCoord4f`);
  if (*cast(void**)&glTexCoord4f_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4f' not found!`);
  glTexCoord4f_Z_Z(s, t, r, q);
}
alias glTexCoord4fColor4fNormal3fVertex4fSUN = glTexCoord4fColor4fNormal3fVertex4fSUN_Z_Z;
__gshared glTexCoord4fColor4fNormal3fVertex4fSUN_Z_Z = function void (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glTexCoord4fColor4fNormal3fVertex4fSUN_Z_Z_loader(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); };
private void glTexCoord4fColor4fNormal3fVertex4fSUN_Z_Z_loader (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glTexCoord4fColor4fNormal3fVertex4fSUN_Z_Z = glbindGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fSUN`);
  if (*cast(void**)&glTexCoord4fColor4fNormal3fVertex4fSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fSUN' not found!`);
  glTexCoord4fColor4fNormal3fVertex4fSUN_Z_Z(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}
alias glTexCoord4fColor4fNormal3fVertex4fvSUN = glTexCoord4fColor4fNormal3fVertex4fvSUN_Z_Z;
__gshared glTexCoord4fColor4fNormal3fVertex4fvSUN_Z_Z = function void (const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) { glTexCoord4fColor4fNormal3fVertex4fvSUN_Z_Z_loader(tc, c, n, v); };
private void glTexCoord4fColor4fNormal3fVertex4fvSUN_Z_Z_loader (const(GLfloat)* tc, const(GLfloat)* c, const(GLfloat)* n, const(GLfloat)* v) {
  *cast(void**)&glTexCoord4fColor4fNormal3fVertex4fvSUN_Z_Z = glbindGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fvSUN`);
  if (*cast(void**)&glTexCoord4fColor4fNormal3fVertex4fvSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fvSUN' not found!`);
  glTexCoord4fColor4fNormal3fVertex4fvSUN_Z_Z(tc, c, n, v);
}
alias glTexCoord4fVertex4fSUN = glTexCoord4fVertex4fSUN_Z_Z;
__gshared glTexCoord4fVertex4fSUN_Z_Z = function void (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glTexCoord4fVertex4fSUN_Z_Z_loader(s, t, p, q, x, y, z, w); };
private void glTexCoord4fVertex4fSUN_Z_Z_loader (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glTexCoord4fVertex4fSUN_Z_Z = glbindGetProcAddress(`glTexCoord4fVertex4fSUN`);
  if (*cast(void**)&glTexCoord4fVertex4fSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fSUN' not found!`);
  glTexCoord4fVertex4fSUN_Z_Z(s, t, p, q, x, y, z, w);
}
alias glTexCoord4fVertex4fvSUN = glTexCoord4fVertex4fvSUN_Z_Z;
__gshared glTexCoord4fVertex4fvSUN_Z_Z = function void (const(GLfloat)* tc, const(GLfloat)* v) { glTexCoord4fVertex4fvSUN_Z_Z_loader(tc, v); };
private void glTexCoord4fVertex4fvSUN_Z_Z_loader (const(GLfloat)* tc, const(GLfloat)* v) {
  *cast(void**)&glTexCoord4fVertex4fvSUN_Z_Z = glbindGetProcAddress(`glTexCoord4fVertex4fvSUN`);
  if (*cast(void**)&glTexCoord4fVertex4fvSUN_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fvSUN' not found!`);
  glTexCoord4fVertex4fvSUN_Z_Z(tc, v);
}
alias glTexCoord4fv = glTexCoord4fv_Z_Z;
__gshared glTexCoord4fv_Z_Z = function void (const(GLfloat)* v) { glTexCoord4fv_Z_Z_loader(v); };
private void glTexCoord4fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glTexCoord4fv_Z_Z = glbindGetProcAddress(`glTexCoord4fv`);
  if (*cast(void**)&glTexCoord4fv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4fv' not found!`);
  glTexCoord4fv_Z_Z(v);
}
alias glTexCoord4hNV = glTexCoord4hNV_Z_Z;
__gshared glTexCoord4hNV_Z_Z = function void (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { glTexCoord4hNV_Z_Z_loader(s, t, r, q); };
private void glTexCoord4hNV_Z_Z_loader (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  *cast(void**)&glTexCoord4hNV_Z_Z = glbindGetProcAddress(`glTexCoord4hNV`);
  if (*cast(void**)&glTexCoord4hNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4hNV' not found!`);
  glTexCoord4hNV_Z_Z(s, t, r, q);
}
alias glTexCoord4hvNV = glTexCoord4hvNV_Z_Z;
__gshared glTexCoord4hvNV_Z_Z = function void (const(GLhalfNV)* v) { glTexCoord4hvNV_Z_Z_loader(v); };
private void glTexCoord4hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glTexCoord4hvNV_Z_Z = glbindGetProcAddress(`glTexCoord4hvNV`);
  if (*cast(void**)&glTexCoord4hvNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4hvNV' not found!`);
  glTexCoord4hvNV_Z_Z(v);
}
alias glTexCoord4i = glTexCoord4i_Z_Z;
__gshared glTexCoord4i_Z_Z = function void (GLint s, GLint t, GLint r, GLint q) { glTexCoord4i_Z_Z_loader(s, t, r, q); };
private void glTexCoord4i_Z_Z_loader (GLint s, GLint t, GLint r, GLint q) {
  *cast(void**)&glTexCoord4i_Z_Z = glbindGetProcAddress(`glTexCoord4i`);
  if (*cast(void**)&glTexCoord4i_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4i' not found!`);
  glTexCoord4i_Z_Z(s, t, r, q);
}
alias glTexCoord4iv = glTexCoord4iv_Z_Z;
__gshared glTexCoord4iv_Z_Z = function void (const(GLint)* v) { glTexCoord4iv_Z_Z_loader(v); };
private void glTexCoord4iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glTexCoord4iv_Z_Z = glbindGetProcAddress(`glTexCoord4iv`);
  if (*cast(void**)&glTexCoord4iv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4iv' not found!`);
  glTexCoord4iv_Z_Z(v);
}
alias glTexCoord4s = glTexCoord4s_Z_Z;
__gshared glTexCoord4s_Z_Z = function void (GLshort s, GLshort t, GLshort r, GLshort q) { glTexCoord4s_Z_Z_loader(s, t, r, q); };
private void glTexCoord4s_Z_Z_loader (GLshort s, GLshort t, GLshort r, GLshort q) {
  *cast(void**)&glTexCoord4s_Z_Z = glbindGetProcAddress(`glTexCoord4s`);
  if (*cast(void**)&glTexCoord4s_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4s' not found!`);
  glTexCoord4s_Z_Z(s, t, r, q);
}
alias glTexCoord4sv = glTexCoord4sv_Z_Z;
__gshared glTexCoord4sv_Z_Z = function void (const(GLshort)* v) { glTexCoord4sv_Z_Z_loader(v); };
private void glTexCoord4sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glTexCoord4sv_Z_Z = glbindGetProcAddress(`glTexCoord4sv`);
  if (*cast(void**)&glTexCoord4sv_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4sv' not found!`);
  glTexCoord4sv_Z_Z(v);
}
alias glTexCoord4xOES = glTexCoord4xOES_Z_Z;
__gshared glTexCoord4xOES_Z_Z = function void (GLfixed s, GLfixed t, GLfixed r, GLfixed q) { glTexCoord4xOES_Z_Z_loader(s, t, r, q); };
private void glTexCoord4xOES_Z_Z_loader (GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  *cast(void**)&glTexCoord4xOES_Z_Z = glbindGetProcAddress(`glTexCoord4xOES`);
  if (*cast(void**)&glTexCoord4xOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4xOES' not found!`);
  glTexCoord4xOES_Z_Z(s, t, r, q);
}
alias glTexCoord4xvOES = glTexCoord4xvOES_Z_Z;
__gshared glTexCoord4xvOES_Z_Z = function void (const(GLfixed)* coords) { glTexCoord4xvOES_Z_Z_loader(coords); };
private void glTexCoord4xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glTexCoord4xvOES_Z_Z = glbindGetProcAddress(`glTexCoord4xvOES`);
  if (*cast(void**)&glTexCoord4xvOES_Z_Z is null) assert(0, `OpenGL function 'glTexCoord4xvOES' not found!`);
  glTexCoord4xvOES_Z_Z(coords);
}
alias glTexCoordFormatNV = glTexCoordFormatNV_Z_Z;
__gshared glTexCoordFormatNV_Z_Z = function void (GLint size, GLenum type, GLsizei stride) { glTexCoordFormatNV_Z_Z_loader(size, type, stride); };
private void glTexCoordFormatNV_Z_Z_loader (GLint size, GLenum type, GLsizei stride) {
  *cast(void**)&glTexCoordFormatNV_Z_Z = glbindGetProcAddress(`glTexCoordFormatNV`);
  if (*cast(void**)&glTexCoordFormatNV_Z_Z is null) assert(0, `OpenGL function 'glTexCoordFormatNV' not found!`);
  glTexCoordFormatNV_Z_Z(size, type, stride);
}
alias glTexCoordP1ui = glTexCoordP1ui_Z_Z;
__gshared glTexCoordP1ui_Z_Z = function void (GLenum type, GLuint coords) { glTexCoordP1ui_Z_Z_loader(type, coords); };
private void glTexCoordP1ui_Z_Z_loader (GLenum type, GLuint coords) {
  *cast(void**)&glTexCoordP1ui_Z_Z = glbindGetProcAddress(`glTexCoordP1ui`);
  if (*cast(void**)&glTexCoordP1ui_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP1ui' not found!`);
  glTexCoordP1ui_Z_Z(type, coords);
}
alias glTexCoordP1uiv = glTexCoordP1uiv_Z_Z;
__gshared glTexCoordP1uiv_Z_Z = function void (GLenum type, const(GLuint)* coords) { glTexCoordP1uiv_Z_Z_loader(type, coords); };
private void glTexCoordP1uiv_Z_Z_loader (GLenum type, const(GLuint)* coords) {
  *cast(void**)&glTexCoordP1uiv_Z_Z = glbindGetProcAddress(`glTexCoordP1uiv`);
  if (*cast(void**)&glTexCoordP1uiv_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP1uiv' not found!`);
  glTexCoordP1uiv_Z_Z(type, coords);
}
alias glTexCoordP2ui = glTexCoordP2ui_Z_Z;
__gshared glTexCoordP2ui_Z_Z = function void (GLenum type, GLuint coords) { glTexCoordP2ui_Z_Z_loader(type, coords); };
private void glTexCoordP2ui_Z_Z_loader (GLenum type, GLuint coords) {
  *cast(void**)&glTexCoordP2ui_Z_Z = glbindGetProcAddress(`glTexCoordP2ui`);
  if (*cast(void**)&glTexCoordP2ui_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP2ui' not found!`);
  glTexCoordP2ui_Z_Z(type, coords);
}
alias glTexCoordP2uiv = glTexCoordP2uiv_Z_Z;
__gshared glTexCoordP2uiv_Z_Z = function void (GLenum type, const(GLuint)* coords) { glTexCoordP2uiv_Z_Z_loader(type, coords); };
private void glTexCoordP2uiv_Z_Z_loader (GLenum type, const(GLuint)* coords) {
  *cast(void**)&glTexCoordP2uiv_Z_Z = glbindGetProcAddress(`glTexCoordP2uiv`);
  if (*cast(void**)&glTexCoordP2uiv_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP2uiv' not found!`);
  glTexCoordP2uiv_Z_Z(type, coords);
}
alias glTexCoordP3ui = glTexCoordP3ui_Z_Z;
__gshared glTexCoordP3ui_Z_Z = function void (GLenum type, GLuint coords) { glTexCoordP3ui_Z_Z_loader(type, coords); };
private void glTexCoordP3ui_Z_Z_loader (GLenum type, GLuint coords) {
  *cast(void**)&glTexCoordP3ui_Z_Z = glbindGetProcAddress(`glTexCoordP3ui`);
  if (*cast(void**)&glTexCoordP3ui_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP3ui' not found!`);
  glTexCoordP3ui_Z_Z(type, coords);
}
alias glTexCoordP3uiv = glTexCoordP3uiv_Z_Z;
__gshared glTexCoordP3uiv_Z_Z = function void (GLenum type, const(GLuint)* coords) { glTexCoordP3uiv_Z_Z_loader(type, coords); };
private void glTexCoordP3uiv_Z_Z_loader (GLenum type, const(GLuint)* coords) {
  *cast(void**)&glTexCoordP3uiv_Z_Z = glbindGetProcAddress(`glTexCoordP3uiv`);
  if (*cast(void**)&glTexCoordP3uiv_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP3uiv' not found!`);
  glTexCoordP3uiv_Z_Z(type, coords);
}
alias glTexCoordP4ui = glTexCoordP4ui_Z_Z;
__gshared glTexCoordP4ui_Z_Z = function void (GLenum type, GLuint coords) { glTexCoordP4ui_Z_Z_loader(type, coords); };
private void glTexCoordP4ui_Z_Z_loader (GLenum type, GLuint coords) {
  *cast(void**)&glTexCoordP4ui_Z_Z = glbindGetProcAddress(`glTexCoordP4ui`);
  if (*cast(void**)&glTexCoordP4ui_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP4ui' not found!`);
  glTexCoordP4ui_Z_Z(type, coords);
}
alias glTexCoordP4uiv = glTexCoordP4uiv_Z_Z;
__gshared glTexCoordP4uiv_Z_Z = function void (GLenum type, const(GLuint)* coords) { glTexCoordP4uiv_Z_Z_loader(type, coords); };
private void glTexCoordP4uiv_Z_Z_loader (GLenum type, const(GLuint)* coords) {
  *cast(void**)&glTexCoordP4uiv_Z_Z = glbindGetProcAddress(`glTexCoordP4uiv`);
  if (*cast(void**)&glTexCoordP4uiv_Z_Z is null) assert(0, `OpenGL function 'glTexCoordP4uiv' not found!`);
  glTexCoordP4uiv_Z_Z(type, coords);
}
alias glTexCoordPointer = glTexCoordPointer_Z_Z;
__gshared glTexCoordPointer_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glTexCoordPointer_Z_Z_loader(size, type, stride, pointer); };
private void glTexCoordPointer_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glTexCoordPointer_Z_Z = glbindGetProcAddress(`glTexCoordPointer`);
  if (*cast(void**)&glTexCoordPointer_Z_Z is null) assert(0, `OpenGL function 'glTexCoordPointer' not found!`);
  glTexCoordPointer_Z_Z(size, type, stride, pointer);
}
alias glTexCoordPointerEXT = glTexCoordPointerEXT_Z_Z;
__gshared glTexCoordPointerEXT_Z_Z = function void (GLint size, GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) { glTexCoordPointerEXT_Z_Z_loader(size, type, stride, count, pointer); };
private void glTexCoordPointerEXT_Z_Z_loader (GLint size, GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) {
  *cast(void**)&glTexCoordPointerEXT_Z_Z = glbindGetProcAddress(`glTexCoordPointerEXT`);
  if (*cast(void**)&glTexCoordPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glTexCoordPointerEXT' not found!`);
  glTexCoordPointerEXT_Z_Z(size, type, stride, count, pointer);
}
alias glTexCoordPointerListIBM = glTexCoordPointerListIBM_Z_Z;
__gshared glTexCoordPointerListIBM_Z_Z = function void (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) { glTexCoordPointerListIBM_Z_Z_loader(size, type, stride, pointer, ptrstride); };
private void glTexCoordPointerListIBM_Z_Z_loader (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) {
  *cast(void**)&glTexCoordPointerListIBM_Z_Z = glbindGetProcAddress(`glTexCoordPointerListIBM`);
  if (*cast(void**)&glTexCoordPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glTexCoordPointerListIBM' not found!`);
  glTexCoordPointerListIBM_Z_Z(size, type, stride, pointer, ptrstride);
}
alias glTexCoordPointervINTEL = glTexCoordPointervINTEL_Z_Z;
__gshared glTexCoordPointervINTEL_Z_Z = function void (GLint size, GLenum type, const(void)** pointer) { glTexCoordPointervINTEL_Z_Z_loader(size, type, pointer); };
private void glTexCoordPointervINTEL_Z_Z_loader (GLint size, GLenum type, const(void)** pointer) {
  *cast(void**)&glTexCoordPointervINTEL_Z_Z = glbindGetProcAddress(`glTexCoordPointervINTEL`);
  if (*cast(void**)&glTexCoordPointervINTEL_Z_Z is null) assert(0, `OpenGL function 'glTexCoordPointervINTEL' not found!`);
  glTexCoordPointervINTEL_Z_Z(size, type, pointer);
}
alias glTexEnvf = glTexEnvf_Z_Z;
__gshared glTexEnvf_Z_Z = function void (GLenum target, GLenum pname, GLfloat param) { glTexEnvf_Z_Z_loader(target, pname, param); };
private void glTexEnvf_Z_Z_loader (GLenum target, GLenum pname, GLfloat param) {
  *cast(void**)&glTexEnvf_Z_Z = glbindGetProcAddress(`glTexEnvf`);
  if (*cast(void**)&glTexEnvf_Z_Z is null) assert(0, `OpenGL function 'glTexEnvf' not found!`);
  glTexEnvf_Z_Z(target, pname, param);
}
alias glTexEnvfv = glTexEnvfv_Z_Z;
__gshared glTexEnvfv_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glTexEnvfv_Z_Z_loader(target, pname, params); };
private void glTexEnvfv_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glTexEnvfv_Z_Z = glbindGetProcAddress(`glTexEnvfv`);
  if (*cast(void**)&glTexEnvfv_Z_Z is null) assert(0, `OpenGL function 'glTexEnvfv' not found!`);
  glTexEnvfv_Z_Z(target, pname, params);
}
alias glTexEnvi = glTexEnvi_Z_Z;
__gshared glTexEnvi_Z_Z = function void (GLenum target, GLenum pname, GLint param) { glTexEnvi_Z_Z_loader(target, pname, param); };
private void glTexEnvi_Z_Z_loader (GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glTexEnvi_Z_Z = glbindGetProcAddress(`glTexEnvi`);
  if (*cast(void**)&glTexEnvi_Z_Z is null) assert(0, `OpenGL function 'glTexEnvi' not found!`);
  glTexEnvi_Z_Z(target, pname, param);
}
alias glTexEnviv = glTexEnviv_Z_Z;
__gshared glTexEnviv_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glTexEnviv_Z_Z_loader(target, pname, params); };
private void glTexEnviv_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTexEnviv_Z_Z = glbindGetProcAddress(`glTexEnviv`);
  if (*cast(void**)&glTexEnviv_Z_Z is null) assert(0, `OpenGL function 'glTexEnviv' not found!`);
  glTexEnviv_Z_Z(target, pname, params);
}
alias glTexEnvx = glTexEnvx_Z_Z;
__gshared glTexEnvx_Z_Z = function void (GLenum target, GLenum pname, GLfixed param) { glTexEnvx_Z_Z_loader(target, pname, param); };
private void glTexEnvx_Z_Z_loader (GLenum target, GLenum pname, GLfixed param) {
  *cast(void**)&glTexEnvx_Z_Z = glbindGetProcAddress(`glTexEnvx`);
  if (*cast(void**)&glTexEnvx_Z_Z is null) assert(0, `OpenGL function 'glTexEnvx' not found!`);
  glTexEnvx_Z_Z(target, pname, param);
}
alias glTexEnvxOES = glTexEnvxOES_Z_Z;
__gshared glTexEnvxOES_Z_Z = function void (GLenum target, GLenum pname, GLfixed param) { glTexEnvxOES_Z_Z_loader(target, pname, param); };
private void glTexEnvxOES_Z_Z_loader (GLenum target, GLenum pname, GLfixed param) {
  *cast(void**)&glTexEnvxOES_Z_Z = glbindGetProcAddress(`glTexEnvxOES`);
  if (*cast(void**)&glTexEnvxOES_Z_Z is null) assert(0, `OpenGL function 'glTexEnvxOES' not found!`);
  glTexEnvxOES_Z_Z(target, pname, param);
}
alias glTexEnvxv = glTexEnvxv_Z_Z;
__gshared glTexEnvxv_Z_Z = function void (GLenum target, GLenum pname, const(GLfixed)* params) { glTexEnvxv_Z_Z_loader(target, pname, params); };
private void glTexEnvxv_Z_Z_loader (GLenum target, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glTexEnvxv_Z_Z = glbindGetProcAddress(`glTexEnvxv`);
  if (*cast(void**)&glTexEnvxv_Z_Z is null) assert(0, `OpenGL function 'glTexEnvxv' not found!`);
  glTexEnvxv_Z_Z(target, pname, params);
}
alias glTexEnvxvOES = glTexEnvxvOES_Z_Z;
__gshared glTexEnvxvOES_Z_Z = function void (GLenum target, GLenum pname, const(GLfixed)* params) { glTexEnvxvOES_Z_Z_loader(target, pname, params); };
private void glTexEnvxvOES_Z_Z_loader (GLenum target, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glTexEnvxvOES_Z_Z = glbindGetProcAddress(`glTexEnvxvOES`);
  if (*cast(void**)&glTexEnvxvOES_Z_Z is null) assert(0, `OpenGL function 'glTexEnvxvOES' not found!`);
  glTexEnvxvOES_Z_Z(target, pname, params);
}
alias glTexFilterFuncSGIS = glTexFilterFuncSGIS_Z_Z;
__gshared glTexFilterFuncSGIS_Z_Z = function void (GLenum target, GLenum filter, GLsizei n, const(GLfloat)* weights) { glTexFilterFuncSGIS_Z_Z_loader(target, filter, n, weights); };
private void glTexFilterFuncSGIS_Z_Z_loader (GLenum target, GLenum filter, GLsizei n, const(GLfloat)* weights) {
  *cast(void**)&glTexFilterFuncSGIS_Z_Z = glbindGetProcAddress(`glTexFilterFuncSGIS`);
  if (*cast(void**)&glTexFilterFuncSGIS_Z_Z is null) assert(0, `OpenGL function 'glTexFilterFuncSGIS' not found!`);
  glTexFilterFuncSGIS_Z_Z(target, filter, n, weights);
}
alias glTexGend = glTexGend_Z_Z;
__gshared glTexGend_Z_Z = function void (GLenum coord, GLenum pname, GLdouble param) { glTexGend_Z_Z_loader(coord, pname, param); };
private void glTexGend_Z_Z_loader (GLenum coord, GLenum pname, GLdouble param) {
  *cast(void**)&glTexGend_Z_Z = glbindGetProcAddress(`glTexGend`);
  if (*cast(void**)&glTexGend_Z_Z is null) assert(0, `OpenGL function 'glTexGend' not found!`);
  glTexGend_Z_Z(coord, pname, param);
}
alias glTexGendv = glTexGendv_Z_Z;
__gshared glTexGendv_Z_Z = function void (GLenum coord, GLenum pname, const(GLdouble)* params) { glTexGendv_Z_Z_loader(coord, pname, params); };
private void glTexGendv_Z_Z_loader (GLenum coord, GLenum pname, const(GLdouble)* params) {
  *cast(void**)&glTexGendv_Z_Z = glbindGetProcAddress(`glTexGendv`);
  if (*cast(void**)&glTexGendv_Z_Z is null) assert(0, `OpenGL function 'glTexGendv' not found!`);
  glTexGendv_Z_Z(coord, pname, params);
}
alias glTexGenf = glTexGenf_Z_Z;
__gshared glTexGenf_Z_Z = function void (GLenum coord, GLenum pname, GLfloat param) { glTexGenf_Z_Z_loader(coord, pname, param); };
private void glTexGenf_Z_Z_loader (GLenum coord, GLenum pname, GLfloat param) {
  *cast(void**)&glTexGenf_Z_Z = glbindGetProcAddress(`glTexGenf`);
  if (*cast(void**)&glTexGenf_Z_Z is null) assert(0, `OpenGL function 'glTexGenf' not found!`);
  glTexGenf_Z_Z(coord, pname, param);
}
alias glTexGenfOES = glTexGenfOES_Z_Z;
__gshared glTexGenfOES_Z_Z = function void (GLenum coord, GLenum pname, GLfloat param) { glTexGenfOES_Z_Z_loader(coord, pname, param); };
private void glTexGenfOES_Z_Z_loader (GLenum coord, GLenum pname, GLfloat param) {
  *cast(void**)&glTexGenfOES_Z_Z = glbindGetProcAddress(`glTexGenfOES`);
  if (*cast(void**)&glTexGenfOES_Z_Z is null) assert(0, `OpenGL function 'glTexGenfOES' not found!`);
  glTexGenfOES_Z_Z(coord, pname, param);
}
alias glTexGenfv = glTexGenfv_Z_Z;
__gshared glTexGenfv_Z_Z = function void (GLenum coord, GLenum pname, const(GLfloat)* params) { glTexGenfv_Z_Z_loader(coord, pname, params); };
private void glTexGenfv_Z_Z_loader (GLenum coord, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glTexGenfv_Z_Z = glbindGetProcAddress(`glTexGenfv`);
  if (*cast(void**)&glTexGenfv_Z_Z is null) assert(0, `OpenGL function 'glTexGenfv' not found!`);
  glTexGenfv_Z_Z(coord, pname, params);
}
alias glTexGenfvOES = glTexGenfvOES_Z_Z;
__gshared glTexGenfvOES_Z_Z = function void (GLenum coord, GLenum pname, const(GLfloat)* params) { glTexGenfvOES_Z_Z_loader(coord, pname, params); };
private void glTexGenfvOES_Z_Z_loader (GLenum coord, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glTexGenfvOES_Z_Z = glbindGetProcAddress(`glTexGenfvOES`);
  if (*cast(void**)&glTexGenfvOES_Z_Z is null) assert(0, `OpenGL function 'glTexGenfvOES' not found!`);
  glTexGenfvOES_Z_Z(coord, pname, params);
}
alias glTexGeni = glTexGeni_Z_Z;
__gshared glTexGeni_Z_Z = function void (GLenum coord, GLenum pname, GLint param) { glTexGeni_Z_Z_loader(coord, pname, param); };
private void glTexGeni_Z_Z_loader (GLenum coord, GLenum pname, GLint param) {
  *cast(void**)&glTexGeni_Z_Z = glbindGetProcAddress(`glTexGeni`);
  if (*cast(void**)&glTexGeni_Z_Z is null) assert(0, `OpenGL function 'glTexGeni' not found!`);
  glTexGeni_Z_Z(coord, pname, param);
}
alias glTexGeniOES = glTexGeniOES_Z_Z;
__gshared glTexGeniOES_Z_Z = function void (GLenum coord, GLenum pname, GLint param) { glTexGeniOES_Z_Z_loader(coord, pname, param); };
private void glTexGeniOES_Z_Z_loader (GLenum coord, GLenum pname, GLint param) {
  *cast(void**)&glTexGeniOES_Z_Z = glbindGetProcAddress(`glTexGeniOES`);
  if (*cast(void**)&glTexGeniOES_Z_Z is null) assert(0, `OpenGL function 'glTexGeniOES' not found!`);
  glTexGeniOES_Z_Z(coord, pname, param);
}
alias glTexGeniv = glTexGeniv_Z_Z;
__gshared glTexGeniv_Z_Z = function void (GLenum coord, GLenum pname, const(GLint)* params) { glTexGeniv_Z_Z_loader(coord, pname, params); };
private void glTexGeniv_Z_Z_loader (GLenum coord, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTexGeniv_Z_Z = glbindGetProcAddress(`glTexGeniv`);
  if (*cast(void**)&glTexGeniv_Z_Z is null) assert(0, `OpenGL function 'glTexGeniv' not found!`);
  glTexGeniv_Z_Z(coord, pname, params);
}
alias glTexGenivOES = glTexGenivOES_Z_Z;
__gshared glTexGenivOES_Z_Z = function void (GLenum coord, GLenum pname, const(GLint)* params) { glTexGenivOES_Z_Z_loader(coord, pname, params); };
private void glTexGenivOES_Z_Z_loader (GLenum coord, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTexGenivOES_Z_Z = glbindGetProcAddress(`glTexGenivOES`);
  if (*cast(void**)&glTexGenivOES_Z_Z is null) assert(0, `OpenGL function 'glTexGenivOES' not found!`);
  glTexGenivOES_Z_Z(coord, pname, params);
}
alias glTexGenxOES = glTexGenxOES_Z_Z;
__gshared glTexGenxOES_Z_Z = function void (GLenum coord, GLenum pname, GLfixed param) { glTexGenxOES_Z_Z_loader(coord, pname, param); };
private void glTexGenxOES_Z_Z_loader (GLenum coord, GLenum pname, GLfixed param) {
  *cast(void**)&glTexGenxOES_Z_Z = glbindGetProcAddress(`glTexGenxOES`);
  if (*cast(void**)&glTexGenxOES_Z_Z is null) assert(0, `OpenGL function 'glTexGenxOES' not found!`);
  glTexGenxOES_Z_Z(coord, pname, param);
}
alias glTexGenxvOES = glTexGenxvOES_Z_Z;
__gshared glTexGenxvOES_Z_Z = function void (GLenum coord, GLenum pname, const(GLfixed)* params) { glTexGenxvOES_Z_Z_loader(coord, pname, params); };
private void glTexGenxvOES_Z_Z_loader (GLenum coord, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glTexGenxvOES_Z_Z = glbindGetProcAddress(`glTexGenxvOES`);
  if (*cast(void**)&glTexGenxvOES_Z_Z is null) assert(0, `OpenGL function 'glTexGenxvOES' not found!`);
  glTexGenxvOES_Z_Z(coord, pname, params);
}
alias glTexImage1D = glTexImage1D_Z_Z;
__gshared glTexImage1D_Z_Z = function void (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTexImage1D_Z_Z_loader(target, level, internalformat, width, border, format, type, pixels); };
private void glTexImage1D_Z_Z_loader (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexImage1D_Z_Z = glbindGetProcAddress(`glTexImage1D`);
  if (*cast(void**)&glTexImage1D_Z_Z is null) assert(0, `OpenGL function 'glTexImage1D' not found!`);
  glTexImage1D_Z_Z(target, level, internalformat, width, border, format, type, pixels);
}
alias glTexImage2D = glTexImage2D_Z_Z;
__gshared glTexImage2D_Z_Z = function void (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTexImage2D_Z_Z_loader(target, level, internalformat, width, height, border, format, type, pixels); };
private void glTexImage2D_Z_Z_loader (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexImage2D_Z_Z = glbindGetProcAddress(`glTexImage2D`);
  if (*cast(void**)&glTexImage2D_Z_Z is null) assert(0, `OpenGL function 'glTexImage2D' not found!`);
  glTexImage2D_Z_Z(target, level, internalformat, width, height, border, format, type, pixels);
}
alias glTexImage2DMultisample = glTexImage2DMultisample_Z_Z;
__gshared glTexImage2DMultisample_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { glTexImage2DMultisample_Z_Z_loader(target, samples, internalformat, width, height, fixedsamplelocations); };
private void glTexImage2DMultisample_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  *cast(void**)&glTexImage2DMultisample_Z_Z = glbindGetProcAddress(`glTexImage2DMultisample`);
  if (*cast(void**)&glTexImage2DMultisample_Z_Z is null) assert(0, `OpenGL function 'glTexImage2DMultisample' not found!`);
  glTexImage2DMultisample_Z_Z(target, samples, internalformat, width, height, fixedsamplelocations);
}
alias glTexImage2DMultisampleCoverageNV = glTexImage2DMultisampleCoverageNV_Z_Z;
__gshared glTexImage2DMultisampleCoverageNV_Z_Z = function void (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { glTexImage2DMultisampleCoverageNV_Z_Z_loader(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); };
private void glTexImage2DMultisampleCoverageNV_Z_Z_loader (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  *cast(void**)&glTexImage2DMultisampleCoverageNV_Z_Z = glbindGetProcAddress(`glTexImage2DMultisampleCoverageNV`);
  if (*cast(void**)&glTexImage2DMultisampleCoverageNV_Z_Z is null) assert(0, `OpenGL function 'glTexImage2DMultisampleCoverageNV' not found!`);
  glTexImage2DMultisampleCoverageNV_Z_Z(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}
alias glTexImage3D = glTexImage3D_Z_Z;
__gshared glTexImage3D_Z_Z = function void (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTexImage3D_Z_Z_loader(target, level, internalformat, width, height, depth, border, format, type, pixels); };
private void glTexImage3D_Z_Z_loader (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexImage3D_Z_Z = glbindGetProcAddress(`glTexImage3D`);
  if (*cast(void**)&glTexImage3D_Z_Z is null) assert(0, `OpenGL function 'glTexImage3D' not found!`);
  glTexImage3D_Z_Z(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
alias glTexImage3DEXT = glTexImage3DEXT_Z_Z;
__gshared glTexImage3DEXT_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTexImage3DEXT_Z_Z_loader(target, level, internalformat, width, height, depth, border, format, type, pixels); };
private void glTexImage3DEXT_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexImage3DEXT_Z_Z = glbindGetProcAddress(`glTexImage3DEXT`);
  if (*cast(void**)&glTexImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexImage3DEXT' not found!`);
  glTexImage3DEXT_Z_Z(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
alias glTexImage3DMultisample = glTexImage3DMultisample_Z_Z;
__gshared glTexImage3DMultisample_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { glTexImage3DMultisample_Z_Z_loader(target, samples, internalformat, width, height, depth, fixedsamplelocations); };
private void glTexImage3DMultisample_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  *cast(void**)&glTexImage3DMultisample_Z_Z = glbindGetProcAddress(`glTexImage3DMultisample`);
  if (*cast(void**)&glTexImage3DMultisample_Z_Z is null) assert(0, `OpenGL function 'glTexImage3DMultisample' not found!`);
  glTexImage3DMultisample_Z_Z(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
alias glTexImage3DMultisampleCoverageNV = glTexImage3DMultisampleCoverageNV_Z_Z;
__gshared glTexImage3DMultisampleCoverageNV_Z_Z = function void (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { glTexImage3DMultisampleCoverageNV_Z_Z_loader(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); };
private void glTexImage3DMultisampleCoverageNV_Z_Z_loader (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  *cast(void**)&glTexImage3DMultisampleCoverageNV_Z_Z = glbindGetProcAddress(`glTexImage3DMultisampleCoverageNV`);
  if (*cast(void**)&glTexImage3DMultisampleCoverageNV_Z_Z is null) assert(0, `OpenGL function 'glTexImage3DMultisampleCoverageNV' not found!`);
  glTexImage3DMultisampleCoverageNV_Z_Z(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}
alias glTexImage3DOES = glTexImage3DOES_Z_Z;
__gshared glTexImage3DOES_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTexImage3DOES_Z_Z_loader(target, level, internalformat, width, height, depth, border, format, type, pixels); };
private void glTexImage3DOES_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexImage3DOES_Z_Z = glbindGetProcAddress(`glTexImage3DOES`);
  if (*cast(void**)&glTexImage3DOES_Z_Z is null) assert(0, `OpenGL function 'glTexImage3DOES' not found!`);
  glTexImage3DOES_Z_Z(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
alias glTexImage4DSGIS = glTexImage4DSGIS_Z_Z;
__gshared glTexImage4DSGIS_Z_Z = function void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTexImage4DSGIS_Z_Z_loader(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); };
private void glTexImage4DSGIS_Z_Z_loader (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexImage4DSGIS_Z_Z = glbindGetProcAddress(`glTexImage4DSGIS`);
  if (*cast(void**)&glTexImage4DSGIS_Z_Z is null) assert(0, `OpenGL function 'glTexImage4DSGIS' not found!`);
  glTexImage4DSGIS_Z_Z(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}
alias glTexPageCommitmentARB = glTexPageCommitmentARB_Z_Z;
__gshared glTexPageCommitmentARB_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { glTexPageCommitmentARB_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); };
private void glTexPageCommitmentARB_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  *cast(void**)&glTexPageCommitmentARB_Z_Z = glbindGetProcAddress(`glTexPageCommitmentARB`);
  if (*cast(void**)&glTexPageCommitmentARB_Z_Z is null) assert(0, `OpenGL function 'glTexPageCommitmentARB' not found!`);
  glTexPageCommitmentARB_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
alias glTexPageCommitmentEXT = glTexPageCommitmentEXT_Z_Z;
__gshared glTexPageCommitmentEXT_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { glTexPageCommitmentEXT_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); };
private void glTexPageCommitmentEXT_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  *cast(void**)&glTexPageCommitmentEXT_Z_Z = glbindGetProcAddress(`glTexPageCommitmentEXT`);
  if (*cast(void**)&glTexPageCommitmentEXT_Z_Z is null) assert(0, `OpenGL function 'glTexPageCommitmentEXT' not found!`);
  glTexPageCommitmentEXT_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
alias glTexParameterIiv = glTexParameterIiv_Z_Z;
__gshared glTexParameterIiv_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glTexParameterIiv_Z_Z_loader(target, pname, params); };
private void glTexParameterIiv_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTexParameterIiv_Z_Z = glbindGetProcAddress(`glTexParameterIiv`);
  if (*cast(void**)&glTexParameterIiv_Z_Z is null) assert(0, `OpenGL function 'glTexParameterIiv' not found!`);
  glTexParameterIiv_Z_Z(target, pname, params);
}
alias glTexParameterIivEXT = glTexParameterIivEXT_Z_Z;
__gshared glTexParameterIivEXT_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glTexParameterIivEXT_Z_Z_loader(target, pname, params); };
private void glTexParameterIivEXT_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTexParameterIivEXT_Z_Z = glbindGetProcAddress(`glTexParameterIivEXT`);
  if (*cast(void**)&glTexParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glTexParameterIivEXT' not found!`);
  glTexParameterIivEXT_Z_Z(target, pname, params);
}
alias glTexParameterIivOES = glTexParameterIivOES_Z_Z;
__gshared glTexParameterIivOES_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glTexParameterIivOES_Z_Z_loader(target, pname, params); };
private void glTexParameterIivOES_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTexParameterIivOES_Z_Z = glbindGetProcAddress(`glTexParameterIivOES`);
  if (*cast(void**)&glTexParameterIivOES_Z_Z is null) assert(0, `OpenGL function 'glTexParameterIivOES' not found!`);
  glTexParameterIivOES_Z_Z(target, pname, params);
}
alias glTexParameterIuiv = glTexParameterIuiv_Z_Z;
__gshared glTexParameterIuiv_Z_Z = function void (GLenum target, GLenum pname, const(GLuint)* params) { glTexParameterIuiv_Z_Z_loader(target, pname, params); };
private void glTexParameterIuiv_Z_Z_loader (GLenum target, GLenum pname, const(GLuint)* params) {
  *cast(void**)&glTexParameterIuiv_Z_Z = glbindGetProcAddress(`glTexParameterIuiv`);
  if (*cast(void**)&glTexParameterIuiv_Z_Z is null) assert(0, `OpenGL function 'glTexParameterIuiv' not found!`);
  glTexParameterIuiv_Z_Z(target, pname, params);
}
alias glTexParameterIuivEXT = glTexParameterIuivEXT_Z_Z;
__gshared glTexParameterIuivEXT_Z_Z = function void (GLenum target, GLenum pname, const(GLuint)* params) { glTexParameterIuivEXT_Z_Z_loader(target, pname, params); };
private void glTexParameterIuivEXT_Z_Z_loader (GLenum target, GLenum pname, const(GLuint)* params) {
  *cast(void**)&glTexParameterIuivEXT_Z_Z = glbindGetProcAddress(`glTexParameterIuivEXT`);
  if (*cast(void**)&glTexParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glTexParameterIuivEXT' not found!`);
  glTexParameterIuivEXT_Z_Z(target, pname, params);
}
alias glTexParameterIuivOES = glTexParameterIuivOES_Z_Z;
__gshared glTexParameterIuivOES_Z_Z = function void (GLenum target, GLenum pname, const(GLuint)* params) { glTexParameterIuivOES_Z_Z_loader(target, pname, params); };
private void glTexParameterIuivOES_Z_Z_loader (GLenum target, GLenum pname, const(GLuint)* params) {
  *cast(void**)&glTexParameterIuivOES_Z_Z = glbindGetProcAddress(`glTexParameterIuivOES`);
  if (*cast(void**)&glTexParameterIuivOES_Z_Z is null) assert(0, `OpenGL function 'glTexParameterIuivOES' not found!`);
  glTexParameterIuivOES_Z_Z(target, pname, params);
}
alias glTexParameterf = glTexParameterf_Z_Z;
__gshared glTexParameterf_Z_Z = function void (GLenum target, GLenum pname, GLfloat param) { glTexParameterf_Z_Z_loader(target, pname, param); };
private void glTexParameterf_Z_Z_loader (GLenum target, GLenum pname, GLfloat param) {
  *cast(void**)&glTexParameterf_Z_Z = glbindGetProcAddress(`glTexParameterf`);
  if (*cast(void**)&glTexParameterf_Z_Z is null) assert(0, `OpenGL function 'glTexParameterf' not found!`);
  glTexParameterf_Z_Z(target, pname, param);
}
alias glTexParameterfv = glTexParameterfv_Z_Z;
__gshared glTexParameterfv_Z_Z = function void (GLenum target, GLenum pname, const(GLfloat)* params) { glTexParameterfv_Z_Z_loader(target, pname, params); };
private void glTexParameterfv_Z_Z_loader (GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glTexParameterfv_Z_Z = glbindGetProcAddress(`glTexParameterfv`);
  if (*cast(void**)&glTexParameterfv_Z_Z is null) assert(0, `OpenGL function 'glTexParameterfv' not found!`);
  glTexParameterfv_Z_Z(target, pname, params);
}
alias glTexParameteri = glTexParameteri_Z_Z;
__gshared glTexParameteri_Z_Z = function void (GLenum target, GLenum pname, GLint param) { glTexParameteri_Z_Z_loader(target, pname, param); };
private void glTexParameteri_Z_Z_loader (GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glTexParameteri_Z_Z = glbindGetProcAddress(`glTexParameteri`);
  if (*cast(void**)&glTexParameteri_Z_Z is null) assert(0, `OpenGL function 'glTexParameteri' not found!`);
  glTexParameteri_Z_Z(target, pname, param);
}
alias glTexParameteriv = glTexParameteriv_Z_Z;
__gshared glTexParameteriv_Z_Z = function void (GLenum target, GLenum pname, const(GLint)* params) { glTexParameteriv_Z_Z_loader(target, pname, params); };
private void glTexParameteriv_Z_Z_loader (GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTexParameteriv_Z_Z = glbindGetProcAddress(`glTexParameteriv`);
  if (*cast(void**)&glTexParameteriv_Z_Z is null) assert(0, `OpenGL function 'glTexParameteriv' not found!`);
  glTexParameteriv_Z_Z(target, pname, params);
}
alias glTexParameterx = glTexParameterx_Z_Z;
__gshared glTexParameterx_Z_Z = function void (GLenum target, GLenum pname, GLfixed param) { glTexParameterx_Z_Z_loader(target, pname, param); };
private void glTexParameterx_Z_Z_loader (GLenum target, GLenum pname, GLfixed param) {
  *cast(void**)&glTexParameterx_Z_Z = glbindGetProcAddress(`glTexParameterx`);
  if (*cast(void**)&glTexParameterx_Z_Z is null) assert(0, `OpenGL function 'glTexParameterx' not found!`);
  glTexParameterx_Z_Z(target, pname, param);
}
alias glTexParameterxOES = glTexParameterxOES_Z_Z;
__gshared glTexParameterxOES_Z_Z = function void (GLenum target, GLenum pname, GLfixed param) { glTexParameterxOES_Z_Z_loader(target, pname, param); };
private void glTexParameterxOES_Z_Z_loader (GLenum target, GLenum pname, GLfixed param) {
  *cast(void**)&glTexParameterxOES_Z_Z = glbindGetProcAddress(`glTexParameterxOES`);
  if (*cast(void**)&glTexParameterxOES_Z_Z is null) assert(0, `OpenGL function 'glTexParameterxOES' not found!`);
  glTexParameterxOES_Z_Z(target, pname, param);
}
alias glTexParameterxv = glTexParameterxv_Z_Z;
__gshared glTexParameterxv_Z_Z = function void (GLenum target, GLenum pname, const(GLfixed)* params) { glTexParameterxv_Z_Z_loader(target, pname, params); };
private void glTexParameterxv_Z_Z_loader (GLenum target, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glTexParameterxv_Z_Z = glbindGetProcAddress(`glTexParameterxv`);
  if (*cast(void**)&glTexParameterxv_Z_Z is null) assert(0, `OpenGL function 'glTexParameterxv' not found!`);
  glTexParameterxv_Z_Z(target, pname, params);
}
alias glTexParameterxvOES = glTexParameterxvOES_Z_Z;
__gshared glTexParameterxvOES_Z_Z = function void (GLenum target, GLenum pname, const(GLfixed)* params) { glTexParameterxvOES_Z_Z_loader(target, pname, params); };
private void glTexParameterxvOES_Z_Z_loader (GLenum target, GLenum pname, const(GLfixed)* params) {
  *cast(void**)&glTexParameterxvOES_Z_Z = glbindGetProcAddress(`glTexParameterxvOES`);
  if (*cast(void**)&glTexParameterxvOES_Z_Z is null) assert(0, `OpenGL function 'glTexParameterxvOES' not found!`);
  glTexParameterxvOES_Z_Z(target, pname, params);
}
alias glTexRenderbufferNV = glTexRenderbufferNV_Z_Z;
__gshared glTexRenderbufferNV_Z_Z = function void (GLenum target, GLuint renderbuffer) { glTexRenderbufferNV_Z_Z_loader(target, renderbuffer); };
private void glTexRenderbufferNV_Z_Z_loader (GLenum target, GLuint renderbuffer) {
  *cast(void**)&glTexRenderbufferNV_Z_Z = glbindGetProcAddress(`glTexRenderbufferNV`);
  if (*cast(void**)&glTexRenderbufferNV_Z_Z is null) assert(0, `OpenGL function 'glTexRenderbufferNV' not found!`);
  glTexRenderbufferNV_Z_Z(target, renderbuffer);
}
alias glTexStorage1D = glTexStorage1D_Z_Z;
__gshared glTexStorage1D_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { glTexStorage1D_Z_Z_loader(target, levels, internalformat, width); };
private void glTexStorage1D_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  *cast(void**)&glTexStorage1D_Z_Z = glbindGetProcAddress(`glTexStorage1D`);
  if (*cast(void**)&glTexStorage1D_Z_Z is null) assert(0, `OpenGL function 'glTexStorage1D' not found!`);
  glTexStorage1D_Z_Z(target, levels, internalformat, width);
}
alias glTexStorage1DEXT = glTexStorage1DEXT_Z_Z;
__gshared glTexStorage1DEXT_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { glTexStorage1DEXT_Z_Z_loader(target, levels, internalformat, width); };
private void glTexStorage1DEXT_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  *cast(void**)&glTexStorage1DEXT_Z_Z = glbindGetProcAddress(`glTexStorage1DEXT`);
  if (*cast(void**)&glTexStorage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorage1DEXT' not found!`);
  glTexStorage1DEXT_Z_Z(target, levels, internalformat, width);
}
alias glTexStorage2D = glTexStorage2D_Z_Z;
__gshared glTexStorage2D_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { glTexStorage2D_Z_Z_loader(target, levels, internalformat, width, height); };
private void glTexStorage2D_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glTexStorage2D_Z_Z = glbindGetProcAddress(`glTexStorage2D`);
  if (*cast(void**)&glTexStorage2D_Z_Z is null) assert(0, `OpenGL function 'glTexStorage2D' not found!`);
  glTexStorage2D_Z_Z(target, levels, internalformat, width, height);
}
alias glTexStorage2DEXT = glTexStorage2DEXT_Z_Z;
__gshared glTexStorage2DEXT_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { glTexStorage2DEXT_Z_Z_loader(target, levels, internalformat, width, height); };
private void glTexStorage2DEXT_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glTexStorage2DEXT_Z_Z = glbindGetProcAddress(`glTexStorage2DEXT`);
  if (*cast(void**)&glTexStorage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorage2DEXT' not found!`);
  glTexStorage2DEXT_Z_Z(target, levels, internalformat, width, height);
}
alias glTexStorage2DMultisample = glTexStorage2DMultisample_Z_Z;
__gshared glTexStorage2DMultisample_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { glTexStorage2DMultisample_Z_Z_loader(target, samples, internalformat, width, height, fixedsamplelocations); };
private void glTexStorage2DMultisample_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  *cast(void**)&glTexStorage2DMultisample_Z_Z = glbindGetProcAddress(`glTexStorage2DMultisample`);
  if (*cast(void**)&glTexStorage2DMultisample_Z_Z is null) assert(0, `OpenGL function 'glTexStorage2DMultisample' not found!`);
  glTexStorage2DMultisample_Z_Z(target, samples, internalformat, width, height, fixedsamplelocations);
}
alias glTexStorage3D = glTexStorage3D_Z_Z;
__gshared glTexStorage3D_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { glTexStorage3D_Z_Z_loader(target, levels, internalformat, width, height, depth); };
private void glTexStorage3D_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  *cast(void**)&glTexStorage3D_Z_Z = glbindGetProcAddress(`glTexStorage3D`);
  if (*cast(void**)&glTexStorage3D_Z_Z is null) assert(0, `OpenGL function 'glTexStorage3D' not found!`);
  glTexStorage3D_Z_Z(target, levels, internalformat, width, height, depth);
}
alias glTexStorage3DEXT = glTexStorage3DEXT_Z_Z;
__gshared glTexStorage3DEXT_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { glTexStorage3DEXT_Z_Z_loader(target, levels, internalformat, width, height, depth); };
private void glTexStorage3DEXT_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  *cast(void**)&glTexStorage3DEXT_Z_Z = glbindGetProcAddress(`glTexStorage3DEXT`);
  if (*cast(void**)&glTexStorage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorage3DEXT' not found!`);
  glTexStorage3DEXT_Z_Z(target, levels, internalformat, width, height, depth);
}
alias glTexStorage3DMultisample = glTexStorage3DMultisample_Z_Z;
__gshared glTexStorage3DMultisample_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { glTexStorage3DMultisample_Z_Z_loader(target, samples, internalformat, width, height, depth, fixedsamplelocations); };
private void glTexStorage3DMultisample_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  *cast(void**)&glTexStorage3DMultisample_Z_Z = glbindGetProcAddress(`glTexStorage3DMultisample`);
  if (*cast(void**)&glTexStorage3DMultisample_Z_Z is null) assert(0, `OpenGL function 'glTexStorage3DMultisample' not found!`);
  glTexStorage3DMultisample_Z_Z(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
alias glTexStorage3DMultisampleOES = glTexStorage3DMultisampleOES_Z_Z;
__gshared glTexStorage3DMultisampleOES_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { glTexStorage3DMultisampleOES_Z_Z_loader(target, samples, internalformat, width, height, depth, fixedsamplelocations); };
private void glTexStorage3DMultisampleOES_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  *cast(void**)&glTexStorage3DMultisampleOES_Z_Z = glbindGetProcAddress(`glTexStorage3DMultisampleOES`);
  if (*cast(void**)&glTexStorage3DMultisampleOES_Z_Z is null) assert(0, `OpenGL function 'glTexStorage3DMultisampleOES' not found!`);
  glTexStorage3DMultisampleOES_Z_Z(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
alias glTexStorageMem1DEXT = glTexStorageMem1DEXT_Z_Z;
__gshared glTexStorageMem1DEXT_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { glTexStorageMem1DEXT_Z_Z_loader(target, levels, internalFormat, width, memory, offset); };
private void glTexStorageMem1DEXT_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTexStorageMem1DEXT_Z_Z = glbindGetProcAddress(`glTexStorageMem1DEXT`);
  if (*cast(void**)&glTexStorageMem1DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorageMem1DEXT' not found!`);
  glTexStorageMem1DEXT_Z_Z(target, levels, internalFormat, width, memory, offset);
}
alias glTexStorageMem2DEXT = glTexStorageMem2DEXT_Z_Z;
__gshared glTexStorageMem2DEXT_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { glTexStorageMem2DEXT_Z_Z_loader(target, levels, internalFormat, width, height, memory, offset); };
private void glTexStorageMem2DEXT_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTexStorageMem2DEXT_Z_Z = glbindGetProcAddress(`glTexStorageMem2DEXT`);
  if (*cast(void**)&glTexStorageMem2DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorageMem2DEXT' not found!`);
  glTexStorageMem2DEXT_Z_Z(target, levels, internalFormat, width, height, memory, offset);
}
alias glTexStorageMem2DMultisampleEXT = glTexStorageMem2DMultisampleEXT_Z_Z;
__gshared glTexStorageMem2DMultisampleEXT_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { glTexStorageMem2DMultisampleEXT_Z_Z_loader(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); };
private void glTexStorageMem2DMultisampleEXT_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTexStorageMem2DMultisampleEXT_Z_Z = glbindGetProcAddress(`glTexStorageMem2DMultisampleEXT`);
  if (*cast(void**)&glTexStorageMem2DMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorageMem2DMultisampleEXT' not found!`);
  glTexStorageMem2DMultisampleEXT_Z_Z(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}
alias glTexStorageMem3DEXT = glTexStorageMem3DEXT_Z_Z;
__gshared glTexStorageMem3DEXT_Z_Z = function void (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { glTexStorageMem3DEXT_Z_Z_loader(target, levels, internalFormat, width, height, depth, memory, offset); };
private void glTexStorageMem3DEXT_Z_Z_loader (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTexStorageMem3DEXT_Z_Z = glbindGetProcAddress(`glTexStorageMem3DEXT`);
  if (*cast(void**)&glTexStorageMem3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorageMem3DEXT' not found!`);
  glTexStorageMem3DEXT_Z_Z(target, levels, internalFormat, width, height, depth, memory, offset);
}
alias glTexStorageMem3DMultisampleEXT = glTexStorageMem3DMultisampleEXT_Z_Z;
__gshared glTexStorageMem3DMultisampleEXT_Z_Z = function void (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { glTexStorageMem3DMultisampleEXT_Z_Z_loader(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); };
private void glTexStorageMem3DMultisampleEXT_Z_Z_loader (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTexStorageMem3DMultisampleEXT_Z_Z = glbindGetProcAddress(`glTexStorageMem3DMultisampleEXT`);
  if (*cast(void**)&glTexStorageMem3DMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glTexStorageMem3DMultisampleEXT' not found!`);
  glTexStorageMem3DMultisampleEXT_Z_Z(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}
alias glTexStorageSparseAMD = glTexStorageSparseAMD_Z_Z;
__gshared glTexStorageSparseAMD_Z_Z = function void (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { glTexStorageSparseAMD_Z_Z_loader(target, internalFormat, width, height, depth, layers, flags); };
private void glTexStorageSparseAMD_Z_Z_loader (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
  *cast(void**)&glTexStorageSparseAMD_Z_Z = glbindGetProcAddress(`glTexStorageSparseAMD`);
  if (*cast(void**)&glTexStorageSparseAMD_Z_Z is null) assert(0, `OpenGL function 'glTexStorageSparseAMD' not found!`);
  glTexStorageSparseAMD_Z_Z(target, internalFormat, width, height, depth, layers, flags);
}
alias glTexSubImage1D = glTexSubImage1D_Z_Z;
__gshared glTexSubImage1D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage1D_Z_Z_loader(target, level, xoffset, width, format, type, pixels); };
private void glTexSubImage1D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage1D_Z_Z = glbindGetProcAddress(`glTexSubImage1D`);
  if (*cast(void**)&glTexSubImage1D_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage1D' not found!`);
  glTexSubImage1D_Z_Z(target, level, xoffset, width, format, type, pixels);
}
alias glTexSubImage1DEXT = glTexSubImage1DEXT_Z_Z;
__gshared glTexSubImage1DEXT_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage1DEXT_Z_Z_loader(target, level, xoffset, width, format, type, pixels); };
private void glTexSubImage1DEXT_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage1DEXT_Z_Z = glbindGetProcAddress(`glTexSubImage1DEXT`);
  if (*cast(void**)&glTexSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage1DEXT' not found!`);
  glTexSubImage1DEXT_Z_Z(target, level, xoffset, width, format, type, pixels);
}
alias glTexSubImage2D = glTexSubImage2D_Z_Z;
__gshared glTexSubImage2D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage2D_Z_Z_loader(target, level, xoffset, yoffset, width, height, format, type, pixels); };
private void glTexSubImage2D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage2D_Z_Z = glbindGetProcAddress(`glTexSubImage2D`);
  if (*cast(void**)&glTexSubImage2D_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage2D' not found!`);
  glTexSubImage2D_Z_Z(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
alias glTexSubImage2DEXT = glTexSubImage2DEXT_Z_Z;
__gshared glTexSubImage2DEXT_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage2DEXT_Z_Z_loader(target, level, xoffset, yoffset, width, height, format, type, pixels); };
private void glTexSubImage2DEXT_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage2DEXT_Z_Z = glbindGetProcAddress(`glTexSubImage2DEXT`);
  if (*cast(void**)&glTexSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage2DEXT' not found!`);
  glTexSubImage2DEXT_Z_Z(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
alias glTexSubImage3D = glTexSubImage3D_Z_Z;
__gshared glTexSubImage3D_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage3D_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
private void glTexSubImage3D_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage3D_Z_Z = glbindGetProcAddress(`glTexSubImage3D`);
  if (*cast(void**)&glTexSubImage3D_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage3D' not found!`);
  glTexSubImage3D_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
alias glTexSubImage3DEXT = glTexSubImage3DEXT_Z_Z;
__gshared glTexSubImage3DEXT_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage3DEXT_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
private void glTexSubImage3DEXT_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage3DEXT_Z_Z = glbindGetProcAddress(`glTexSubImage3DEXT`);
  if (*cast(void**)&glTexSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage3DEXT' not found!`);
  glTexSubImage3DEXT_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
alias glTexSubImage3DOES = glTexSubImage3DOES_Z_Z;
__gshared glTexSubImage3DOES_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage3DOES_Z_Z_loader(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
private void glTexSubImage3DOES_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage3DOES_Z_Z = glbindGetProcAddress(`glTexSubImage3DOES`);
  if (*cast(void**)&glTexSubImage3DOES_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage3DOES' not found!`);
  glTexSubImage3DOES_Z_Z(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
alias glTexSubImage4DSGIS = glTexSubImage4DSGIS_Z_Z;
__gshared glTexSubImage4DSGIS_Z_Z = function void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const(void)* pixels) { glTexSubImage4DSGIS_Z_Z_loader(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); };
private void glTexSubImage4DSGIS_Z_Z_loader (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTexSubImage4DSGIS_Z_Z = glbindGetProcAddress(`glTexSubImage4DSGIS`);
  if (*cast(void**)&glTexSubImage4DSGIS_Z_Z is null) assert(0, `OpenGL function 'glTexSubImage4DSGIS' not found!`);
  glTexSubImage4DSGIS_Z_Z(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}
alias glTextureBarrier = glTextureBarrier_Z_Z;
__gshared glTextureBarrier_Z_Z = function void () { glTextureBarrier_Z_Z_loader(); };
private void glTextureBarrier_Z_Z_loader () {
  *cast(void**)&glTextureBarrier_Z_Z = glbindGetProcAddress(`glTextureBarrier`);
  if (*cast(void**)&glTextureBarrier_Z_Z is null) assert(0, `OpenGL function 'glTextureBarrier' not found!`);
  glTextureBarrier_Z_Z();
}
alias glTextureBarrierNV = glTextureBarrierNV_Z_Z;
__gshared glTextureBarrierNV_Z_Z = function void () { glTextureBarrierNV_Z_Z_loader(); };
private void glTextureBarrierNV_Z_Z_loader () {
  *cast(void**)&glTextureBarrierNV_Z_Z = glbindGetProcAddress(`glTextureBarrierNV`);
  if (*cast(void**)&glTextureBarrierNV_Z_Z is null) assert(0, `OpenGL function 'glTextureBarrierNV' not found!`);
  glTextureBarrierNV_Z_Z();
}
alias glTextureBuffer = glTextureBuffer_Z_Z;
__gshared glTextureBuffer_Z_Z = function void (GLuint texture, GLenum internalformat, GLuint buffer) { glTextureBuffer_Z_Z_loader(texture, internalformat, buffer); };
private void glTextureBuffer_Z_Z_loader (GLuint texture, GLenum internalformat, GLuint buffer) {
  *cast(void**)&glTextureBuffer_Z_Z = glbindGetProcAddress(`glTextureBuffer`);
  if (*cast(void**)&glTextureBuffer_Z_Z is null) assert(0, `OpenGL function 'glTextureBuffer' not found!`);
  glTextureBuffer_Z_Z(texture, internalformat, buffer);
}
alias glTextureBufferEXT = glTextureBufferEXT_Z_Z;
__gshared glTextureBufferEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { glTextureBufferEXT_Z_Z_loader(texture, target, internalformat, buffer); };
private void glTextureBufferEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
  *cast(void**)&glTextureBufferEXT_Z_Z = glbindGetProcAddress(`glTextureBufferEXT`);
  if (*cast(void**)&glTextureBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureBufferEXT' not found!`);
  glTextureBufferEXT_Z_Z(texture, target, internalformat, buffer);
}
alias glTextureBufferRange = glTextureBufferRange_Z_Z;
__gshared glTextureBufferRange_Z_Z = function void (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { glTextureBufferRange_Z_Z_loader(texture, internalformat, buffer, offset, size); };
private void glTextureBufferRange_Z_Z_loader (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glTextureBufferRange_Z_Z = glbindGetProcAddress(`glTextureBufferRange`);
  if (*cast(void**)&glTextureBufferRange_Z_Z is null) assert(0, `OpenGL function 'glTextureBufferRange' not found!`);
  glTextureBufferRange_Z_Z(texture, internalformat, buffer, offset, size);
}
alias glTextureBufferRangeEXT = glTextureBufferRangeEXT_Z_Z;
__gshared glTextureBufferRangeEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { glTextureBufferRangeEXT_Z_Z_loader(texture, target, internalformat, buffer, offset, size); };
private void glTextureBufferRangeEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glTextureBufferRangeEXT_Z_Z = glbindGetProcAddress(`glTextureBufferRangeEXT`);
  if (*cast(void**)&glTextureBufferRangeEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureBufferRangeEXT' not found!`);
  glTextureBufferRangeEXT_Z_Z(texture, target, internalformat, buffer, offset, size);
}
alias glTextureColorMaskSGIS = glTextureColorMaskSGIS_Z_Z;
__gshared glTextureColorMaskSGIS_Z_Z = function void (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { glTextureColorMaskSGIS_Z_Z_loader(red, green, blue, alpha); };
private void glTextureColorMaskSGIS_Z_Z_loader (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  *cast(void**)&glTextureColorMaskSGIS_Z_Z = glbindGetProcAddress(`glTextureColorMaskSGIS`);
  if (*cast(void**)&glTextureColorMaskSGIS_Z_Z is null) assert(0, `OpenGL function 'glTextureColorMaskSGIS' not found!`);
  glTextureColorMaskSGIS_Z_Z(red, green, blue, alpha);
}
alias glTextureImage1DEXT = glTextureImage1DEXT_Z_Z;
__gshared glTextureImage1DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTextureImage1DEXT_Z_Z_loader(texture, target, level, internalformat, width, border, format, type, pixels); };
private void glTextureImage1DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureImage1DEXT_Z_Z = glbindGetProcAddress(`glTextureImage1DEXT`);
  if (*cast(void**)&glTextureImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureImage1DEXT' not found!`);
  glTextureImage1DEXT_Z_Z(texture, target, level, internalformat, width, border, format, type, pixels);
}
alias glTextureImage2DEXT = glTextureImage2DEXT_Z_Z;
__gshared glTextureImage2DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTextureImage2DEXT_Z_Z_loader(texture, target, level, internalformat, width, height, border, format, type, pixels); };
private void glTextureImage2DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureImage2DEXT_Z_Z = glbindGetProcAddress(`glTextureImage2DEXT`);
  if (*cast(void**)&glTextureImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureImage2DEXT' not found!`);
  glTextureImage2DEXT_Z_Z(texture, target, level, internalformat, width, height, border, format, type, pixels);
}
alias glTextureImage2DMultisampleCoverageNV = glTextureImage2DMultisampleCoverageNV_Z_Z;
__gshared glTextureImage2DMultisampleCoverageNV_Z_Z = function void (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { glTextureImage2DMultisampleCoverageNV_Z_Z_loader(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); };
private void glTextureImage2DMultisampleCoverageNV_Z_Z_loader (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  *cast(void**)&glTextureImage2DMultisampleCoverageNV_Z_Z = glbindGetProcAddress(`glTextureImage2DMultisampleCoverageNV`);
  if (*cast(void**)&glTextureImage2DMultisampleCoverageNV_Z_Z is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleCoverageNV' not found!`);
  glTextureImage2DMultisampleCoverageNV_Z_Z(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}
alias glTextureImage2DMultisampleNV = glTextureImage2DMultisampleNV_Z_Z;
__gshared glTextureImage2DMultisampleNV_Z_Z = function void (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { glTextureImage2DMultisampleNV_Z_Z_loader(texture, target, samples, internalFormat, width, height, fixedSampleLocations); };
private void glTextureImage2DMultisampleNV_Z_Z_loader (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  *cast(void**)&glTextureImage2DMultisampleNV_Z_Z = glbindGetProcAddress(`glTextureImage2DMultisampleNV`);
  if (*cast(void**)&glTextureImage2DMultisampleNV_Z_Z is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleNV' not found!`);
  glTextureImage2DMultisampleNV_Z_Z(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}
alias glTextureImage3DEXT = glTextureImage3DEXT_Z_Z;
__gshared glTextureImage3DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) { glTextureImage3DEXT_Z_Z_loader(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); };
private void glTextureImage3DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureImage3DEXT_Z_Z = glbindGetProcAddress(`glTextureImage3DEXT`);
  if (*cast(void**)&glTextureImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureImage3DEXT' not found!`);
  glTextureImage3DEXT_Z_Z(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
alias glTextureImage3DMultisampleCoverageNV = glTextureImage3DMultisampleCoverageNV_Z_Z;
__gshared glTextureImage3DMultisampleCoverageNV_Z_Z = function void (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { glTextureImage3DMultisampleCoverageNV_Z_Z_loader(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); };
private void glTextureImage3DMultisampleCoverageNV_Z_Z_loader (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  *cast(void**)&glTextureImage3DMultisampleCoverageNV_Z_Z = glbindGetProcAddress(`glTextureImage3DMultisampleCoverageNV`);
  if (*cast(void**)&glTextureImage3DMultisampleCoverageNV_Z_Z is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleCoverageNV' not found!`);
  glTextureImage3DMultisampleCoverageNV_Z_Z(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}
alias glTextureImage3DMultisampleNV = glTextureImage3DMultisampleNV_Z_Z;
__gshared glTextureImage3DMultisampleNV_Z_Z = function void (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { glTextureImage3DMultisampleNV_Z_Z_loader(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); };
private void glTextureImage3DMultisampleNV_Z_Z_loader (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  *cast(void**)&glTextureImage3DMultisampleNV_Z_Z = glbindGetProcAddress(`glTextureImage3DMultisampleNV`);
  if (*cast(void**)&glTextureImage3DMultisampleNV_Z_Z is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleNV' not found!`);
  glTextureImage3DMultisampleNV_Z_Z(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}
alias glTextureLightEXT = glTextureLightEXT_Z_Z;
__gshared glTextureLightEXT_Z_Z = function void (GLenum pname) { glTextureLightEXT_Z_Z_loader(pname); };
private void glTextureLightEXT_Z_Z_loader (GLenum pname) {
  *cast(void**)&glTextureLightEXT_Z_Z = glbindGetProcAddress(`glTextureLightEXT`);
  if (*cast(void**)&glTextureLightEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureLightEXT' not found!`);
  glTextureLightEXT_Z_Z(pname);
}
alias glTextureMaterialEXT = glTextureMaterialEXT_Z_Z;
__gshared glTextureMaterialEXT_Z_Z = function void (GLenum face, GLenum mode) { glTextureMaterialEXT_Z_Z_loader(face, mode); };
private void glTextureMaterialEXT_Z_Z_loader (GLenum face, GLenum mode) {
  *cast(void**)&glTextureMaterialEXT_Z_Z = glbindGetProcAddress(`glTextureMaterialEXT`);
  if (*cast(void**)&glTextureMaterialEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureMaterialEXT' not found!`);
  glTextureMaterialEXT_Z_Z(face, mode);
}
alias glTextureNormalEXT = glTextureNormalEXT_Z_Z;
__gshared glTextureNormalEXT_Z_Z = function void (GLenum mode) { glTextureNormalEXT_Z_Z_loader(mode); };
private void glTextureNormalEXT_Z_Z_loader (GLenum mode) {
  *cast(void**)&glTextureNormalEXT_Z_Z = glbindGetProcAddress(`glTextureNormalEXT`);
  if (*cast(void**)&glTextureNormalEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureNormalEXT' not found!`);
  glTextureNormalEXT_Z_Z(mode);
}
alias glTexturePageCommitmentEXT = glTexturePageCommitmentEXT_Z_Z;
__gshared glTexturePageCommitmentEXT_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { glTexturePageCommitmentEXT_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); };
private void glTexturePageCommitmentEXT_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  *cast(void**)&glTexturePageCommitmentEXT_Z_Z = glbindGetProcAddress(`glTexturePageCommitmentEXT`);
  if (*cast(void**)&glTexturePageCommitmentEXT_Z_Z is null) assert(0, `OpenGL function 'glTexturePageCommitmentEXT' not found!`);
  glTexturePageCommitmentEXT_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
alias glTextureParameterIiv = glTextureParameterIiv_Z_Z;
__gshared glTextureParameterIiv_Z_Z = function void (GLuint texture, GLenum pname, const(GLint)* params) { glTextureParameterIiv_Z_Z_loader(texture, pname, params); };
private void glTextureParameterIiv_Z_Z_loader (GLuint texture, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTextureParameterIiv_Z_Z = glbindGetProcAddress(`glTextureParameterIiv`);
  if (*cast(void**)&glTextureParameterIiv_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterIiv' not found!`);
  glTextureParameterIiv_Z_Z(texture, pname, params);
}
alias glTextureParameterIivEXT = glTextureParameterIivEXT_Z_Z;
__gshared glTextureParameterIivEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, const(GLint)* params) { glTextureParameterIivEXT_Z_Z_loader(texture, target, pname, params); };
private void glTextureParameterIivEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTextureParameterIivEXT_Z_Z = glbindGetProcAddress(`glTextureParameterIivEXT`);
  if (*cast(void**)&glTextureParameterIivEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterIivEXT' not found!`);
  glTextureParameterIivEXT_Z_Z(texture, target, pname, params);
}
alias glTextureParameterIuiv = glTextureParameterIuiv_Z_Z;
__gshared glTextureParameterIuiv_Z_Z = function void (GLuint texture, GLenum pname, const(GLuint)* params) { glTextureParameterIuiv_Z_Z_loader(texture, pname, params); };
private void glTextureParameterIuiv_Z_Z_loader (GLuint texture, GLenum pname, const(GLuint)* params) {
  *cast(void**)&glTextureParameterIuiv_Z_Z = glbindGetProcAddress(`glTextureParameterIuiv`);
  if (*cast(void**)&glTextureParameterIuiv_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterIuiv' not found!`);
  glTextureParameterIuiv_Z_Z(texture, pname, params);
}
alias glTextureParameterIuivEXT = glTextureParameterIuivEXT_Z_Z;
__gshared glTextureParameterIuivEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, const(GLuint)* params) { glTextureParameterIuivEXT_Z_Z_loader(texture, target, pname, params); };
private void glTextureParameterIuivEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, const(GLuint)* params) {
  *cast(void**)&glTextureParameterIuivEXT_Z_Z = glbindGetProcAddress(`glTextureParameterIuivEXT`);
  if (*cast(void**)&glTextureParameterIuivEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterIuivEXT' not found!`);
  glTextureParameterIuivEXT_Z_Z(texture, target, pname, params);
}
alias glTextureParameterf = glTextureParameterf_Z_Z;
__gshared glTextureParameterf_Z_Z = function void (GLuint texture, GLenum pname, GLfloat param) { glTextureParameterf_Z_Z_loader(texture, pname, param); };
private void glTextureParameterf_Z_Z_loader (GLuint texture, GLenum pname, GLfloat param) {
  *cast(void**)&glTextureParameterf_Z_Z = glbindGetProcAddress(`glTextureParameterf`);
  if (*cast(void**)&glTextureParameterf_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterf' not found!`);
  glTextureParameterf_Z_Z(texture, pname, param);
}
alias glTextureParameterfEXT = glTextureParameterfEXT_Z_Z;
__gshared glTextureParameterfEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, GLfloat param) { glTextureParameterfEXT_Z_Z_loader(texture, target, pname, param); };
private void glTextureParameterfEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, GLfloat param) {
  *cast(void**)&glTextureParameterfEXT_Z_Z = glbindGetProcAddress(`glTextureParameterfEXT`);
  if (*cast(void**)&glTextureParameterfEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterfEXT' not found!`);
  glTextureParameterfEXT_Z_Z(texture, target, pname, param);
}
alias glTextureParameterfv = glTextureParameterfv_Z_Z;
__gshared glTextureParameterfv_Z_Z = function void (GLuint texture, GLenum pname, const(GLfloat)* param) { glTextureParameterfv_Z_Z_loader(texture, pname, param); };
private void glTextureParameterfv_Z_Z_loader (GLuint texture, GLenum pname, const(GLfloat)* param) {
  *cast(void**)&glTextureParameterfv_Z_Z = glbindGetProcAddress(`glTextureParameterfv`);
  if (*cast(void**)&glTextureParameterfv_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterfv' not found!`);
  glTextureParameterfv_Z_Z(texture, pname, param);
}
alias glTextureParameterfvEXT = glTextureParameterfvEXT_Z_Z;
__gshared glTextureParameterfvEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, const(GLfloat)* params) { glTextureParameterfvEXT_Z_Z_loader(texture, target, pname, params); };
private void glTextureParameterfvEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glTextureParameterfvEXT_Z_Z = glbindGetProcAddress(`glTextureParameterfvEXT`);
  if (*cast(void**)&glTextureParameterfvEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterfvEXT' not found!`);
  glTextureParameterfvEXT_Z_Z(texture, target, pname, params);
}
alias glTextureParameteri = glTextureParameteri_Z_Z;
__gshared glTextureParameteri_Z_Z = function void (GLuint texture, GLenum pname, GLint param) { glTextureParameteri_Z_Z_loader(texture, pname, param); };
private void glTextureParameteri_Z_Z_loader (GLuint texture, GLenum pname, GLint param) {
  *cast(void**)&glTextureParameteri_Z_Z = glbindGetProcAddress(`glTextureParameteri`);
  if (*cast(void**)&glTextureParameteri_Z_Z is null) assert(0, `OpenGL function 'glTextureParameteri' not found!`);
  glTextureParameteri_Z_Z(texture, pname, param);
}
alias glTextureParameteriEXT = glTextureParameteriEXT_Z_Z;
__gshared glTextureParameteriEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, GLint param) { glTextureParameteriEXT_Z_Z_loader(texture, target, pname, param); };
private void glTextureParameteriEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, GLint param) {
  *cast(void**)&glTextureParameteriEXT_Z_Z = glbindGetProcAddress(`glTextureParameteriEXT`);
  if (*cast(void**)&glTextureParameteriEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureParameteriEXT' not found!`);
  glTextureParameteriEXT_Z_Z(texture, target, pname, param);
}
alias glTextureParameteriv = glTextureParameteriv_Z_Z;
__gshared glTextureParameteriv_Z_Z = function void (GLuint texture, GLenum pname, const(GLint)* param) { glTextureParameteriv_Z_Z_loader(texture, pname, param); };
private void glTextureParameteriv_Z_Z_loader (GLuint texture, GLenum pname, const(GLint)* param) {
  *cast(void**)&glTextureParameteriv_Z_Z = glbindGetProcAddress(`glTextureParameteriv`);
  if (*cast(void**)&glTextureParameteriv_Z_Z is null) assert(0, `OpenGL function 'glTextureParameteriv' not found!`);
  glTextureParameteriv_Z_Z(texture, pname, param);
}
alias glTextureParameterivEXT = glTextureParameterivEXT_Z_Z;
__gshared glTextureParameterivEXT_Z_Z = function void (GLuint texture, GLenum target, GLenum pname, const(GLint)* params) { glTextureParameterivEXT_Z_Z_loader(texture, target, pname, params); };
private void glTextureParameterivEXT_Z_Z_loader (GLuint texture, GLenum target, GLenum pname, const(GLint)* params) {
  *cast(void**)&glTextureParameterivEXT_Z_Z = glbindGetProcAddress(`glTextureParameterivEXT`);
  if (*cast(void**)&glTextureParameterivEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureParameterivEXT' not found!`);
  glTextureParameterivEXT_Z_Z(texture, target, pname, params);
}
alias glTextureRangeAPPLE = glTextureRangeAPPLE_Z_Z;
__gshared glTextureRangeAPPLE_Z_Z = function void (GLenum target, GLsizei length, const(void)* pointer) { glTextureRangeAPPLE_Z_Z_loader(target, length, pointer); };
private void glTextureRangeAPPLE_Z_Z_loader (GLenum target, GLsizei length, const(void)* pointer) {
  *cast(void**)&glTextureRangeAPPLE_Z_Z = glbindGetProcAddress(`glTextureRangeAPPLE`);
  if (*cast(void**)&glTextureRangeAPPLE_Z_Z is null) assert(0, `OpenGL function 'glTextureRangeAPPLE' not found!`);
  glTextureRangeAPPLE_Z_Z(target, length, pointer);
}
alias glTextureRenderbufferEXT = glTextureRenderbufferEXT_Z_Z;
__gshared glTextureRenderbufferEXT_Z_Z = function void (GLuint texture, GLenum target, GLuint renderbuffer) { glTextureRenderbufferEXT_Z_Z_loader(texture, target, renderbuffer); };
private void glTextureRenderbufferEXT_Z_Z_loader (GLuint texture, GLenum target, GLuint renderbuffer) {
  *cast(void**)&glTextureRenderbufferEXT_Z_Z = glbindGetProcAddress(`glTextureRenderbufferEXT`);
  if (*cast(void**)&glTextureRenderbufferEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureRenderbufferEXT' not found!`);
  glTextureRenderbufferEXT_Z_Z(texture, target, renderbuffer);
}
alias glTextureStorage1D = glTextureStorage1D_Z_Z;
__gshared glTextureStorage1D_Z_Z = function void (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { glTextureStorage1D_Z_Z_loader(texture, levels, internalformat, width); };
private void glTextureStorage1D_Z_Z_loader (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
  *cast(void**)&glTextureStorage1D_Z_Z = glbindGetProcAddress(`glTextureStorage1D`);
  if (*cast(void**)&glTextureStorage1D_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage1D' not found!`);
  glTextureStorage1D_Z_Z(texture, levels, internalformat, width);
}
alias glTextureStorage1DEXT = glTextureStorage1DEXT_Z_Z;
__gshared glTextureStorage1DEXT_Z_Z = function void (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { glTextureStorage1DEXT_Z_Z_loader(texture, target, levels, internalformat, width); };
private void glTextureStorage1DEXT_Z_Z_loader (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  *cast(void**)&glTextureStorage1DEXT_Z_Z = glbindGetProcAddress(`glTextureStorage1DEXT`);
  if (*cast(void**)&glTextureStorage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage1DEXT' not found!`);
  glTextureStorage1DEXT_Z_Z(texture, target, levels, internalformat, width);
}
alias glTextureStorage2D = glTextureStorage2D_Z_Z;
__gshared glTextureStorage2D_Z_Z = function void (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { glTextureStorage2D_Z_Z_loader(texture, levels, internalformat, width, height); };
private void glTextureStorage2D_Z_Z_loader (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glTextureStorage2D_Z_Z = glbindGetProcAddress(`glTextureStorage2D`);
  if (*cast(void**)&glTextureStorage2D_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage2D' not found!`);
  glTextureStorage2D_Z_Z(texture, levels, internalformat, width, height);
}
alias glTextureStorage2DEXT = glTextureStorage2DEXT_Z_Z;
__gshared glTextureStorage2DEXT_Z_Z = function void (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { glTextureStorage2DEXT_Z_Z_loader(texture, target, levels, internalformat, width, height); };
private void glTextureStorage2DEXT_Z_Z_loader (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  *cast(void**)&glTextureStorage2DEXT_Z_Z = glbindGetProcAddress(`glTextureStorage2DEXT`);
  if (*cast(void**)&glTextureStorage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage2DEXT' not found!`);
  glTextureStorage2DEXT_Z_Z(texture, target, levels, internalformat, width, height);
}
alias glTextureStorage2DMultisample = glTextureStorage2DMultisample_Z_Z;
__gshared glTextureStorage2DMultisample_Z_Z = function void (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { glTextureStorage2DMultisample_Z_Z_loader(texture, samples, internalformat, width, height, fixedsamplelocations); };
private void glTextureStorage2DMultisample_Z_Z_loader (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  *cast(void**)&glTextureStorage2DMultisample_Z_Z = glbindGetProcAddress(`glTextureStorage2DMultisample`);
  if (*cast(void**)&glTextureStorage2DMultisample_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage2DMultisample' not found!`);
  glTextureStorage2DMultisample_Z_Z(texture, samples, internalformat, width, height, fixedsamplelocations);
}
alias glTextureStorage2DMultisampleEXT = glTextureStorage2DMultisampleEXT_Z_Z;
__gshared glTextureStorage2DMultisampleEXT_Z_Z = function void (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { glTextureStorage2DMultisampleEXT_Z_Z_loader(texture, target, samples, internalformat, width, height, fixedsamplelocations); };
private void glTextureStorage2DMultisampleEXT_Z_Z_loader (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  *cast(void**)&glTextureStorage2DMultisampleEXT_Z_Z = glbindGetProcAddress(`glTextureStorage2DMultisampleEXT`);
  if (*cast(void**)&glTextureStorage2DMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage2DMultisampleEXT' not found!`);
  glTextureStorage2DMultisampleEXT_Z_Z(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}
alias glTextureStorage3D = glTextureStorage3D_Z_Z;
__gshared glTextureStorage3D_Z_Z = function void (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { glTextureStorage3D_Z_Z_loader(texture, levels, internalformat, width, height, depth); };
private void glTextureStorage3D_Z_Z_loader (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  *cast(void**)&glTextureStorage3D_Z_Z = glbindGetProcAddress(`glTextureStorage3D`);
  if (*cast(void**)&glTextureStorage3D_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage3D' not found!`);
  glTextureStorage3D_Z_Z(texture, levels, internalformat, width, height, depth);
}
alias glTextureStorage3DEXT = glTextureStorage3DEXT_Z_Z;
__gshared glTextureStorage3DEXT_Z_Z = function void (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { glTextureStorage3DEXT_Z_Z_loader(texture, target, levels, internalformat, width, height, depth); };
private void glTextureStorage3DEXT_Z_Z_loader (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  *cast(void**)&glTextureStorage3DEXT_Z_Z = glbindGetProcAddress(`glTextureStorage3DEXT`);
  if (*cast(void**)&glTextureStorage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage3DEXT' not found!`);
  glTextureStorage3DEXT_Z_Z(texture, target, levels, internalformat, width, height, depth);
}
alias glTextureStorage3DMultisample = glTextureStorage3DMultisample_Z_Z;
__gshared glTextureStorage3DMultisample_Z_Z = function void (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { glTextureStorage3DMultisample_Z_Z_loader(texture, samples, internalformat, width, height, depth, fixedsamplelocations); };
private void glTextureStorage3DMultisample_Z_Z_loader (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  *cast(void**)&glTextureStorage3DMultisample_Z_Z = glbindGetProcAddress(`glTextureStorage3DMultisample`);
  if (*cast(void**)&glTextureStorage3DMultisample_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage3DMultisample' not found!`);
  glTextureStorage3DMultisample_Z_Z(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}
alias glTextureStorage3DMultisampleEXT = glTextureStorage3DMultisampleEXT_Z_Z;
__gshared glTextureStorage3DMultisampleEXT_Z_Z = function void (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { glTextureStorage3DMultisampleEXT_Z_Z_loader(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); };
private void glTextureStorage3DMultisampleEXT_Z_Z_loader (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  *cast(void**)&glTextureStorage3DMultisampleEXT_Z_Z = glbindGetProcAddress(`glTextureStorage3DMultisampleEXT`);
  if (*cast(void**)&glTextureStorage3DMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorage3DMultisampleEXT' not found!`);
  glTextureStorage3DMultisampleEXT_Z_Z(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
alias glTextureStorageMem1DEXT = glTextureStorageMem1DEXT_Z_Z;
__gshared glTextureStorageMem1DEXT_Z_Z = function void (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { glTextureStorageMem1DEXT_Z_Z_loader(texture, levels, internalFormat, width, memory, offset); };
private void glTextureStorageMem1DEXT_Z_Z_loader (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTextureStorageMem1DEXT_Z_Z = glbindGetProcAddress(`glTextureStorageMem1DEXT`);
  if (*cast(void**)&glTextureStorageMem1DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorageMem1DEXT' not found!`);
  glTextureStorageMem1DEXT_Z_Z(texture, levels, internalFormat, width, memory, offset);
}
alias glTextureStorageMem2DEXT = glTextureStorageMem2DEXT_Z_Z;
__gshared glTextureStorageMem2DEXT_Z_Z = function void (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { glTextureStorageMem2DEXT_Z_Z_loader(texture, levels, internalFormat, width, height, memory, offset); };
private void glTextureStorageMem2DEXT_Z_Z_loader (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTextureStorageMem2DEXT_Z_Z = glbindGetProcAddress(`glTextureStorageMem2DEXT`);
  if (*cast(void**)&glTextureStorageMem2DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorageMem2DEXT' not found!`);
  glTextureStorageMem2DEXT_Z_Z(texture, levels, internalFormat, width, height, memory, offset);
}
alias glTextureStorageMem2DMultisampleEXT = glTextureStorageMem2DMultisampleEXT_Z_Z;
__gshared glTextureStorageMem2DMultisampleEXT_Z_Z = function void (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { glTextureStorageMem2DMultisampleEXT_Z_Z_loader(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); };
private void glTextureStorageMem2DMultisampleEXT_Z_Z_loader (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTextureStorageMem2DMultisampleEXT_Z_Z = glbindGetProcAddress(`glTextureStorageMem2DMultisampleEXT`);
  if (*cast(void**)&glTextureStorageMem2DMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorageMem2DMultisampleEXT' not found!`);
  glTextureStorageMem2DMultisampleEXT_Z_Z(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}
alias glTextureStorageMem3DEXT = glTextureStorageMem3DEXT_Z_Z;
__gshared glTextureStorageMem3DEXT_Z_Z = function void (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { glTextureStorageMem3DEXT_Z_Z_loader(texture, levels, internalFormat, width, height, depth, memory, offset); };
private void glTextureStorageMem3DEXT_Z_Z_loader (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTextureStorageMem3DEXT_Z_Z = glbindGetProcAddress(`glTextureStorageMem3DEXT`);
  if (*cast(void**)&glTextureStorageMem3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorageMem3DEXT' not found!`);
  glTextureStorageMem3DEXT_Z_Z(texture, levels, internalFormat, width, height, depth, memory, offset);
}
alias glTextureStorageMem3DMultisampleEXT = glTextureStorageMem3DMultisampleEXT_Z_Z;
__gshared glTextureStorageMem3DMultisampleEXT_Z_Z = function void (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { glTextureStorageMem3DMultisampleEXT_Z_Z_loader(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); };
private void glTextureStorageMem3DMultisampleEXT_Z_Z_loader (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  *cast(void**)&glTextureStorageMem3DMultisampleEXT_Z_Z = glbindGetProcAddress(`glTextureStorageMem3DMultisampleEXT`);
  if (*cast(void**)&glTextureStorageMem3DMultisampleEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureStorageMem3DMultisampleEXT' not found!`);
  glTextureStorageMem3DMultisampleEXT_Z_Z(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}
alias glTextureStorageSparseAMD = glTextureStorageSparseAMD_Z_Z;
__gshared glTextureStorageSparseAMD_Z_Z = function void (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { glTextureStorageSparseAMD_Z_Z_loader(texture, target, internalFormat, width, height, depth, layers, flags); };
private void glTextureStorageSparseAMD_Z_Z_loader (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
  *cast(void**)&glTextureStorageSparseAMD_Z_Z = glbindGetProcAddress(`glTextureStorageSparseAMD`);
  if (*cast(void**)&glTextureStorageSparseAMD_Z_Z is null) assert(0, `OpenGL function 'glTextureStorageSparseAMD' not found!`);
  glTextureStorageSparseAMD_Z_Z(texture, target, internalFormat, width, height, depth, layers, flags);
}
alias glTextureSubImage1D = glTextureSubImage1D_Z_Z;
__gshared glTextureSubImage1D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) { glTextureSubImage1D_Z_Z_loader(texture, level, xoffset, width, format, type, pixels); };
private void glTextureSubImage1D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureSubImage1D_Z_Z = glbindGetProcAddress(`glTextureSubImage1D`);
  if (*cast(void**)&glTextureSubImage1D_Z_Z is null) assert(0, `OpenGL function 'glTextureSubImage1D' not found!`);
  glTextureSubImage1D_Z_Z(texture, level, xoffset, width, format, type, pixels);
}
alias glTextureSubImage1DEXT = glTextureSubImage1DEXT_Z_Z;
__gshared glTextureSubImage1DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) { glTextureSubImage1DEXT_Z_Z_loader(texture, target, level, xoffset, width, format, type, pixels); };
private void glTextureSubImage1DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureSubImage1DEXT_Z_Z = glbindGetProcAddress(`glTextureSubImage1DEXT`);
  if (*cast(void**)&glTextureSubImage1DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureSubImage1DEXT' not found!`);
  glTextureSubImage1DEXT_Z_Z(texture, target, level, xoffset, width, format, type, pixels);
}
alias glTextureSubImage2D = glTextureSubImage2D_Z_Z;
__gshared glTextureSubImage2D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) { glTextureSubImage2D_Z_Z_loader(texture, level, xoffset, yoffset, width, height, format, type, pixels); };
private void glTextureSubImage2D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureSubImage2D_Z_Z = glbindGetProcAddress(`glTextureSubImage2D`);
  if (*cast(void**)&glTextureSubImage2D_Z_Z is null) assert(0, `OpenGL function 'glTextureSubImage2D' not found!`);
  glTextureSubImage2D_Z_Z(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}
alias glTextureSubImage2DEXT = glTextureSubImage2DEXT_Z_Z;
__gshared glTextureSubImage2DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) { glTextureSubImage2DEXT_Z_Z_loader(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); };
private void glTextureSubImage2DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureSubImage2DEXT_Z_Z = glbindGetProcAddress(`glTextureSubImage2DEXT`);
  if (*cast(void**)&glTextureSubImage2DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureSubImage2DEXT' not found!`);
  glTextureSubImage2DEXT_Z_Z(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
alias glTextureSubImage3D = glTextureSubImage3D_Z_Z;
__gshared glTextureSubImage3D_Z_Z = function void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) { glTextureSubImage3D_Z_Z_loader(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
private void glTextureSubImage3D_Z_Z_loader (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureSubImage3D_Z_Z = glbindGetProcAddress(`glTextureSubImage3D`);
  if (*cast(void**)&glTextureSubImage3D_Z_Z is null) assert(0, `OpenGL function 'glTextureSubImage3D' not found!`);
  glTextureSubImage3D_Z_Z(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
alias glTextureSubImage3DEXT = glTextureSubImage3DEXT_Z_Z;
__gshared glTextureSubImage3DEXT_Z_Z = function void (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) { glTextureSubImage3DEXT_Z_Z_loader(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
private void glTextureSubImage3DEXT_Z_Z_loader (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels) {
  *cast(void**)&glTextureSubImage3DEXT_Z_Z = glbindGetProcAddress(`glTextureSubImage3DEXT`);
  if (*cast(void**)&glTextureSubImage3DEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureSubImage3DEXT' not found!`);
  glTextureSubImage3DEXT_Z_Z(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
alias glTextureView = glTextureView_Z_Z;
__gshared glTextureView_Z_Z = function void (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { glTextureView_Z_Z_loader(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); };
private void glTextureView_Z_Z_loader (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  *cast(void**)&glTextureView_Z_Z = glbindGetProcAddress(`glTextureView`);
  if (*cast(void**)&glTextureView_Z_Z is null) assert(0, `OpenGL function 'glTextureView' not found!`);
  glTextureView_Z_Z(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
alias glTextureViewEXT = glTextureViewEXT_Z_Z;
__gshared glTextureViewEXT_Z_Z = function void (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { glTextureViewEXT_Z_Z_loader(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); };
private void glTextureViewEXT_Z_Z_loader (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  *cast(void**)&glTextureViewEXT_Z_Z = glbindGetProcAddress(`glTextureViewEXT`);
  if (*cast(void**)&glTextureViewEXT_Z_Z is null) assert(0, `OpenGL function 'glTextureViewEXT' not found!`);
  glTextureViewEXT_Z_Z(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
alias glTextureViewOES = glTextureViewOES_Z_Z;
__gshared glTextureViewOES_Z_Z = function void (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { glTextureViewOES_Z_Z_loader(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); };
private void glTextureViewOES_Z_Z_loader (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  *cast(void**)&glTextureViewOES_Z_Z = glbindGetProcAddress(`glTextureViewOES`);
  if (*cast(void**)&glTextureViewOES_Z_Z is null) assert(0, `OpenGL function 'glTextureViewOES' not found!`);
  glTextureViewOES_Z_Z(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
alias glTrackMatrixNV = glTrackMatrixNV_Z_Z;
__gshared glTrackMatrixNV_Z_Z = function void (GLenum target, GLuint address, GLenum matrix, GLenum transform) { glTrackMatrixNV_Z_Z_loader(target, address, matrix, transform); };
private void glTrackMatrixNV_Z_Z_loader (GLenum target, GLuint address, GLenum matrix, GLenum transform) {
  *cast(void**)&glTrackMatrixNV_Z_Z = glbindGetProcAddress(`glTrackMatrixNV`);
  if (*cast(void**)&glTrackMatrixNV_Z_Z is null) assert(0, `OpenGL function 'glTrackMatrixNV' not found!`);
  glTrackMatrixNV_Z_Z(target, address, matrix, transform);
}
alias glTransformFeedbackAttribsNV = glTransformFeedbackAttribsNV_Z_Z;
__gshared glTransformFeedbackAttribsNV_Z_Z = function void (GLsizei count, const(GLint)* attribs, GLenum bufferMode) { glTransformFeedbackAttribsNV_Z_Z_loader(count, attribs, bufferMode); };
private void glTransformFeedbackAttribsNV_Z_Z_loader (GLsizei count, const(GLint)* attribs, GLenum bufferMode) {
  *cast(void**)&glTransformFeedbackAttribsNV_Z_Z = glbindGetProcAddress(`glTransformFeedbackAttribsNV`);
  if (*cast(void**)&glTransformFeedbackAttribsNV_Z_Z is null) assert(0, `OpenGL function 'glTransformFeedbackAttribsNV' not found!`);
  glTransformFeedbackAttribsNV_Z_Z(count, attribs, bufferMode);
}
alias glTransformFeedbackBufferBase = glTransformFeedbackBufferBase_Z_Z;
__gshared glTransformFeedbackBufferBase_Z_Z = function void (GLuint xfb, GLuint index, GLuint buffer) { glTransformFeedbackBufferBase_Z_Z_loader(xfb, index, buffer); };
private void glTransformFeedbackBufferBase_Z_Z_loader (GLuint xfb, GLuint index, GLuint buffer) {
  *cast(void**)&glTransformFeedbackBufferBase_Z_Z = glbindGetProcAddress(`glTransformFeedbackBufferBase`);
  if (*cast(void**)&glTransformFeedbackBufferBase_Z_Z is null) assert(0, `OpenGL function 'glTransformFeedbackBufferBase' not found!`);
  glTransformFeedbackBufferBase_Z_Z(xfb, index, buffer);
}
alias glTransformFeedbackBufferRange = glTransformFeedbackBufferRange_Z_Z;
__gshared glTransformFeedbackBufferRange_Z_Z = function void (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { glTransformFeedbackBufferRange_Z_Z_loader(xfb, index, buffer, offset, size); };
private void glTransformFeedbackBufferRange_Z_Z_loader (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  *cast(void**)&glTransformFeedbackBufferRange_Z_Z = glbindGetProcAddress(`glTransformFeedbackBufferRange`);
  if (*cast(void**)&glTransformFeedbackBufferRange_Z_Z is null) assert(0, `OpenGL function 'glTransformFeedbackBufferRange' not found!`);
  glTransformFeedbackBufferRange_Z_Z(xfb, index, buffer, offset, size);
}
alias glTransformFeedbackStreamAttribsNV = glTransformFeedbackStreamAttribsNV_Z_Z;
__gshared glTransformFeedbackStreamAttribsNV_Z_Z = function void (GLsizei count, const(GLint)* attribs, GLsizei nbuffers, const(GLint)* bufstreams, GLenum bufferMode) { glTransformFeedbackStreamAttribsNV_Z_Z_loader(count, attribs, nbuffers, bufstreams, bufferMode); };
private void glTransformFeedbackStreamAttribsNV_Z_Z_loader (GLsizei count, const(GLint)* attribs, GLsizei nbuffers, const(GLint)* bufstreams, GLenum bufferMode) {
  *cast(void**)&glTransformFeedbackStreamAttribsNV_Z_Z = glbindGetProcAddress(`glTransformFeedbackStreamAttribsNV`);
  if (*cast(void**)&glTransformFeedbackStreamAttribsNV_Z_Z is null) assert(0, `OpenGL function 'glTransformFeedbackStreamAttribsNV' not found!`);
  glTransformFeedbackStreamAttribsNV_Z_Z(count, attribs, nbuffers, bufstreams, bufferMode);
}
alias glTransformFeedbackVaryings = glTransformFeedbackVaryings_Z_Z;
__gshared glTransformFeedbackVaryings_Z_Z = function void (GLuint program, GLsizei count, const(GLchar)* *varyings, GLenum bufferMode) { glTransformFeedbackVaryings_Z_Z_loader(program, count, varyings, bufferMode); };
private void glTransformFeedbackVaryings_Z_Z_loader (GLuint program, GLsizei count, const(GLchar)* *varyings, GLenum bufferMode) {
  *cast(void**)&glTransformFeedbackVaryings_Z_Z = glbindGetProcAddress(`glTransformFeedbackVaryings`);
  if (*cast(void**)&glTransformFeedbackVaryings_Z_Z is null) assert(0, `OpenGL function 'glTransformFeedbackVaryings' not found!`);
  glTransformFeedbackVaryings_Z_Z(program, count, varyings, bufferMode);
}
alias glTransformFeedbackVaryingsEXT = glTransformFeedbackVaryingsEXT_Z_Z;
__gshared glTransformFeedbackVaryingsEXT_Z_Z = function void (GLuint program, GLsizei count, const(GLchar)* *varyings, GLenum bufferMode) { glTransformFeedbackVaryingsEXT_Z_Z_loader(program, count, varyings, bufferMode); };
private void glTransformFeedbackVaryingsEXT_Z_Z_loader (GLuint program, GLsizei count, const(GLchar)* *varyings, GLenum bufferMode) {
  *cast(void**)&glTransformFeedbackVaryingsEXT_Z_Z = glbindGetProcAddress(`glTransformFeedbackVaryingsEXT`);
  if (*cast(void**)&glTransformFeedbackVaryingsEXT_Z_Z is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsEXT' not found!`);
  glTransformFeedbackVaryingsEXT_Z_Z(program, count, varyings, bufferMode);
}
alias glTransformFeedbackVaryingsNV = glTransformFeedbackVaryingsNV_Z_Z;
__gshared glTransformFeedbackVaryingsNV_Z_Z = function void (GLuint program, GLsizei count, const(GLint)* locations, GLenum bufferMode) { glTransformFeedbackVaryingsNV_Z_Z_loader(program, count, locations, bufferMode); };
private void glTransformFeedbackVaryingsNV_Z_Z_loader (GLuint program, GLsizei count, const(GLint)* locations, GLenum bufferMode) {
  *cast(void**)&glTransformFeedbackVaryingsNV_Z_Z = glbindGetProcAddress(`glTransformFeedbackVaryingsNV`);
  if (*cast(void**)&glTransformFeedbackVaryingsNV_Z_Z is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsNV' not found!`);
  glTransformFeedbackVaryingsNV_Z_Z(program, count, locations, bufferMode);
}
alias glTransformPathNV = glTransformPathNV_Z_Z;
__gshared glTransformPathNV_Z_Z = function void (GLuint resultPath, GLuint srcPath, GLenum transformType, const(GLfloat)* transformValues) { glTransformPathNV_Z_Z_loader(resultPath, srcPath, transformType, transformValues); };
private void glTransformPathNV_Z_Z_loader (GLuint resultPath, GLuint srcPath, GLenum transformType, const(GLfloat)* transformValues) {
  *cast(void**)&glTransformPathNV_Z_Z = glbindGetProcAddress(`glTransformPathNV`);
  if (*cast(void**)&glTransformPathNV_Z_Z is null) assert(0, `OpenGL function 'glTransformPathNV' not found!`);
  glTransformPathNV_Z_Z(resultPath, srcPath, transformType, transformValues);
}
alias glTranslated = glTranslated_Z_Z;
__gshared glTranslated_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z) { glTranslated_Z_Z_loader(x, y, z); };
private void glTranslated_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glTranslated_Z_Z = glbindGetProcAddress(`glTranslated`);
  if (*cast(void**)&glTranslated_Z_Z is null) assert(0, `OpenGL function 'glTranslated' not found!`);
  glTranslated_Z_Z(x, y, z);
}
alias glTranslatef = glTranslatef_Z_Z;
__gshared glTranslatef_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z) { glTranslatef_Z_Z_loader(x, y, z); };
private void glTranslatef_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glTranslatef_Z_Z = glbindGetProcAddress(`glTranslatef`);
  if (*cast(void**)&glTranslatef_Z_Z is null) assert(0, `OpenGL function 'glTranslatef' not found!`);
  glTranslatef_Z_Z(x, y, z);
}
alias glTranslatex = glTranslatex_Z_Z;
__gshared glTranslatex_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z) { glTranslatex_Z_Z_loader(x, y, z); };
private void glTranslatex_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glTranslatex_Z_Z = glbindGetProcAddress(`glTranslatex`);
  if (*cast(void**)&glTranslatex_Z_Z is null) assert(0, `OpenGL function 'glTranslatex' not found!`);
  glTranslatex_Z_Z(x, y, z);
}
alias glTranslatexOES = glTranslatexOES_Z_Z;
__gshared glTranslatexOES_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z) { glTranslatexOES_Z_Z_loader(x, y, z); };
private void glTranslatexOES_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glTranslatexOES_Z_Z = glbindGetProcAddress(`glTranslatexOES`);
  if (*cast(void**)&glTranslatexOES_Z_Z is null) assert(0, `OpenGL function 'glTranslatexOES' not found!`);
  glTranslatexOES_Z_Z(x, y, z);
}
alias glUniform1d = glUniform1d_Z_Z;
__gshared glUniform1d_Z_Z = function void (GLint location, GLdouble x) { glUniform1d_Z_Z_loader(location, x); };
private void glUniform1d_Z_Z_loader (GLint location, GLdouble x) {
  *cast(void**)&glUniform1d_Z_Z = glbindGetProcAddress(`glUniform1d`);
  if (*cast(void**)&glUniform1d_Z_Z is null) assert(0, `OpenGL function 'glUniform1d' not found!`);
  glUniform1d_Z_Z(location, x);
}
alias glUniform1dv = glUniform1dv_Z_Z;
__gshared glUniform1dv_Z_Z = function void (GLint location, GLsizei count, const(GLdouble)* value) { glUniform1dv_Z_Z_loader(location, count, value); };
private void glUniform1dv_Z_Z_loader (GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glUniform1dv_Z_Z = glbindGetProcAddress(`glUniform1dv`);
  if (*cast(void**)&glUniform1dv_Z_Z is null) assert(0, `OpenGL function 'glUniform1dv' not found!`);
  glUniform1dv_Z_Z(location, count, value);
}
alias glUniform1f = glUniform1f_Z_Z;
__gshared glUniform1f_Z_Z = function void (GLint location, GLfloat v0) { glUniform1f_Z_Z_loader(location, v0); };
private void glUniform1f_Z_Z_loader (GLint location, GLfloat v0) {
  *cast(void**)&glUniform1f_Z_Z = glbindGetProcAddress(`glUniform1f`);
  if (*cast(void**)&glUniform1f_Z_Z is null) assert(0, `OpenGL function 'glUniform1f' not found!`);
  glUniform1f_Z_Z(location, v0);
}
alias glUniform1fARB = glUniform1fARB_Z_Z;
__gshared glUniform1fARB_Z_Z = function void (GLint location, GLfloat v0) { glUniform1fARB_Z_Z_loader(location, v0); };
private void glUniform1fARB_Z_Z_loader (GLint location, GLfloat v0) {
  *cast(void**)&glUniform1fARB_Z_Z = glbindGetProcAddress(`glUniform1fARB`);
  if (*cast(void**)&glUniform1fARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1fARB' not found!`);
  glUniform1fARB_Z_Z(location, v0);
}
alias glUniform1fv = glUniform1fv_Z_Z;
__gshared glUniform1fv_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform1fv_Z_Z_loader(location, count, value); };
private void glUniform1fv_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform1fv_Z_Z = glbindGetProcAddress(`glUniform1fv`);
  if (*cast(void**)&glUniform1fv_Z_Z is null) assert(0, `OpenGL function 'glUniform1fv' not found!`);
  glUniform1fv_Z_Z(location, count, value);
}
alias glUniform1fvARB = glUniform1fvARB_Z_Z;
__gshared glUniform1fvARB_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform1fvARB_Z_Z_loader(location, count, value); };
private void glUniform1fvARB_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform1fvARB_Z_Z = glbindGetProcAddress(`glUniform1fvARB`);
  if (*cast(void**)&glUniform1fvARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1fvARB' not found!`);
  glUniform1fvARB_Z_Z(location, count, value);
}
alias glUniform1i = glUniform1i_Z_Z;
__gshared glUniform1i_Z_Z = function void (GLint location, GLint v0) { glUniform1i_Z_Z_loader(location, v0); };
private void glUniform1i_Z_Z_loader (GLint location, GLint v0) {
  *cast(void**)&glUniform1i_Z_Z = glbindGetProcAddress(`glUniform1i`);
  if (*cast(void**)&glUniform1i_Z_Z is null) assert(0, `OpenGL function 'glUniform1i' not found!`);
  glUniform1i_Z_Z(location, v0);
}
alias glUniform1i64ARB = glUniform1i64ARB_Z_Z;
__gshared glUniform1i64ARB_Z_Z = function void (GLint location, GLint64 x) { glUniform1i64ARB_Z_Z_loader(location, x); };
private void glUniform1i64ARB_Z_Z_loader (GLint location, GLint64 x) {
  *cast(void**)&glUniform1i64ARB_Z_Z = glbindGetProcAddress(`glUniform1i64ARB`);
  if (*cast(void**)&glUniform1i64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1i64ARB' not found!`);
  glUniform1i64ARB_Z_Z(location, x);
}
alias glUniform1i64NV = glUniform1i64NV_Z_Z;
__gshared glUniform1i64NV_Z_Z = function void (GLint location, GLint64EXT x) { glUniform1i64NV_Z_Z_loader(location, x); };
private void glUniform1i64NV_Z_Z_loader (GLint location, GLint64EXT x) {
  *cast(void**)&glUniform1i64NV_Z_Z = glbindGetProcAddress(`glUniform1i64NV`);
  if (*cast(void**)&glUniform1i64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform1i64NV' not found!`);
  glUniform1i64NV_Z_Z(location, x);
}
alias glUniform1i64vARB = glUniform1i64vARB_Z_Z;
__gshared glUniform1i64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLint64)* value) { glUniform1i64vARB_Z_Z_loader(location, count, value); };
private void glUniform1i64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glUniform1i64vARB_Z_Z = glbindGetProcAddress(`glUniform1i64vARB`);
  if (*cast(void**)&glUniform1i64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1i64vARB' not found!`);
  glUniform1i64vARB_Z_Z(location, count, value);
}
alias glUniform1i64vNV = glUniform1i64vNV_Z_Z;
__gshared glUniform1i64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLint64EXT)* value) { glUniform1i64vNV_Z_Z_loader(location, count, value); };
private void glUniform1i64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glUniform1i64vNV_Z_Z = glbindGetProcAddress(`glUniform1i64vNV`);
  if (*cast(void**)&glUniform1i64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform1i64vNV' not found!`);
  glUniform1i64vNV_Z_Z(location, count, value);
}
alias glUniform1iARB = glUniform1iARB_Z_Z;
__gshared glUniform1iARB_Z_Z = function void (GLint location, GLint v0) { glUniform1iARB_Z_Z_loader(location, v0); };
private void glUniform1iARB_Z_Z_loader (GLint location, GLint v0) {
  *cast(void**)&glUniform1iARB_Z_Z = glbindGetProcAddress(`glUniform1iARB`);
  if (*cast(void**)&glUniform1iARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1iARB' not found!`);
  glUniform1iARB_Z_Z(location, v0);
}
alias glUniform1iv = glUniform1iv_Z_Z;
__gshared glUniform1iv_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform1iv_Z_Z_loader(location, count, value); };
private void glUniform1iv_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform1iv_Z_Z = glbindGetProcAddress(`glUniform1iv`);
  if (*cast(void**)&glUniform1iv_Z_Z is null) assert(0, `OpenGL function 'glUniform1iv' not found!`);
  glUniform1iv_Z_Z(location, count, value);
}
alias glUniform1ivARB = glUniform1ivARB_Z_Z;
__gshared glUniform1ivARB_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform1ivARB_Z_Z_loader(location, count, value); };
private void glUniform1ivARB_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform1ivARB_Z_Z = glbindGetProcAddress(`glUniform1ivARB`);
  if (*cast(void**)&glUniform1ivARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1ivARB' not found!`);
  glUniform1ivARB_Z_Z(location, count, value);
}
alias glUniform1ui = glUniform1ui_Z_Z;
__gshared glUniform1ui_Z_Z = function void (GLint location, GLuint v0) { glUniform1ui_Z_Z_loader(location, v0); };
private void glUniform1ui_Z_Z_loader (GLint location, GLuint v0) {
  *cast(void**)&glUniform1ui_Z_Z = glbindGetProcAddress(`glUniform1ui`);
  if (*cast(void**)&glUniform1ui_Z_Z is null) assert(0, `OpenGL function 'glUniform1ui' not found!`);
  glUniform1ui_Z_Z(location, v0);
}
alias glUniform1ui64ARB = glUniform1ui64ARB_Z_Z;
__gshared glUniform1ui64ARB_Z_Z = function void (GLint location, GLuint64 x) { glUniform1ui64ARB_Z_Z_loader(location, x); };
private void glUniform1ui64ARB_Z_Z_loader (GLint location, GLuint64 x) {
  *cast(void**)&glUniform1ui64ARB_Z_Z = glbindGetProcAddress(`glUniform1ui64ARB`);
  if (*cast(void**)&glUniform1ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1ui64ARB' not found!`);
  glUniform1ui64ARB_Z_Z(location, x);
}
alias glUniform1ui64NV = glUniform1ui64NV_Z_Z;
__gshared glUniform1ui64NV_Z_Z = function void (GLint location, GLuint64EXT x) { glUniform1ui64NV_Z_Z_loader(location, x); };
private void glUniform1ui64NV_Z_Z_loader (GLint location, GLuint64EXT x) {
  *cast(void**)&glUniform1ui64NV_Z_Z = glbindGetProcAddress(`glUniform1ui64NV`);
  if (*cast(void**)&glUniform1ui64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform1ui64NV' not found!`);
  glUniform1ui64NV_Z_Z(location, x);
}
alias glUniform1ui64vARB = glUniform1ui64vARB_Z_Z;
__gshared glUniform1ui64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLuint64)* value) { glUniform1ui64vARB_Z_Z_loader(location, count, value); };
private void glUniform1ui64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glUniform1ui64vARB_Z_Z = glbindGetProcAddress(`glUniform1ui64vARB`);
  if (*cast(void**)&glUniform1ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform1ui64vARB' not found!`);
  glUniform1ui64vARB_Z_Z(location, count, value);
}
alias glUniform1ui64vNV = glUniform1ui64vNV_Z_Z;
__gshared glUniform1ui64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLuint64EXT)* value) { glUniform1ui64vNV_Z_Z_loader(location, count, value); };
private void glUniform1ui64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glUniform1ui64vNV_Z_Z = glbindGetProcAddress(`glUniform1ui64vNV`);
  if (*cast(void**)&glUniform1ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform1ui64vNV' not found!`);
  glUniform1ui64vNV_Z_Z(location, count, value);
}
alias glUniform1uiEXT = glUniform1uiEXT_Z_Z;
__gshared glUniform1uiEXT_Z_Z = function void (GLint location, GLuint v0) { glUniform1uiEXT_Z_Z_loader(location, v0); };
private void glUniform1uiEXT_Z_Z_loader (GLint location, GLuint v0) {
  *cast(void**)&glUniform1uiEXT_Z_Z = glbindGetProcAddress(`glUniform1uiEXT`);
  if (*cast(void**)&glUniform1uiEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform1uiEXT' not found!`);
  glUniform1uiEXT_Z_Z(location, v0);
}
alias glUniform1uiv = glUniform1uiv_Z_Z;
__gshared glUniform1uiv_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform1uiv_Z_Z_loader(location, count, value); };
private void glUniform1uiv_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform1uiv_Z_Z = glbindGetProcAddress(`glUniform1uiv`);
  if (*cast(void**)&glUniform1uiv_Z_Z is null) assert(0, `OpenGL function 'glUniform1uiv' not found!`);
  glUniform1uiv_Z_Z(location, count, value);
}
alias glUniform1uivEXT = glUniform1uivEXT_Z_Z;
__gshared glUniform1uivEXT_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform1uivEXT_Z_Z_loader(location, count, value); };
private void glUniform1uivEXT_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform1uivEXT_Z_Z = glbindGetProcAddress(`glUniform1uivEXT`);
  if (*cast(void**)&glUniform1uivEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform1uivEXT' not found!`);
  glUniform1uivEXT_Z_Z(location, count, value);
}
alias glUniform2d = glUniform2d_Z_Z;
__gshared glUniform2d_Z_Z = function void (GLint location, GLdouble x, GLdouble y) { glUniform2d_Z_Z_loader(location, x, y); };
private void glUniform2d_Z_Z_loader (GLint location, GLdouble x, GLdouble y) {
  *cast(void**)&glUniform2d_Z_Z = glbindGetProcAddress(`glUniform2d`);
  if (*cast(void**)&glUniform2d_Z_Z is null) assert(0, `OpenGL function 'glUniform2d' not found!`);
  glUniform2d_Z_Z(location, x, y);
}
alias glUniform2dv = glUniform2dv_Z_Z;
__gshared glUniform2dv_Z_Z = function void (GLint location, GLsizei count, const(GLdouble)* value) { glUniform2dv_Z_Z_loader(location, count, value); };
private void glUniform2dv_Z_Z_loader (GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glUniform2dv_Z_Z = glbindGetProcAddress(`glUniform2dv`);
  if (*cast(void**)&glUniform2dv_Z_Z is null) assert(0, `OpenGL function 'glUniform2dv' not found!`);
  glUniform2dv_Z_Z(location, count, value);
}
alias glUniform2f = glUniform2f_Z_Z;
__gshared glUniform2f_Z_Z = function void (GLint location, GLfloat v0, GLfloat v1) { glUniform2f_Z_Z_loader(location, v0, v1); };
private void glUniform2f_Z_Z_loader (GLint location, GLfloat v0, GLfloat v1) {
  *cast(void**)&glUniform2f_Z_Z = glbindGetProcAddress(`glUniform2f`);
  if (*cast(void**)&glUniform2f_Z_Z is null) assert(0, `OpenGL function 'glUniform2f' not found!`);
  glUniform2f_Z_Z(location, v0, v1);
}
alias glUniform2fARB = glUniform2fARB_Z_Z;
__gshared glUniform2fARB_Z_Z = function void (GLint location, GLfloat v0, GLfloat v1) { glUniform2fARB_Z_Z_loader(location, v0, v1); };
private void glUniform2fARB_Z_Z_loader (GLint location, GLfloat v0, GLfloat v1) {
  *cast(void**)&glUniform2fARB_Z_Z = glbindGetProcAddress(`glUniform2fARB`);
  if (*cast(void**)&glUniform2fARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2fARB' not found!`);
  glUniform2fARB_Z_Z(location, v0, v1);
}
alias glUniform2fv = glUniform2fv_Z_Z;
__gshared glUniform2fv_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform2fv_Z_Z_loader(location, count, value); };
private void glUniform2fv_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform2fv_Z_Z = glbindGetProcAddress(`glUniform2fv`);
  if (*cast(void**)&glUniform2fv_Z_Z is null) assert(0, `OpenGL function 'glUniform2fv' not found!`);
  glUniform2fv_Z_Z(location, count, value);
}
alias glUniform2fvARB = glUniform2fvARB_Z_Z;
__gshared glUniform2fvARB_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform2fvARB_Z_Z_loader(location, count, value); };
private void glUniform2fvARB_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform2fvARB_Z_Z = glbindGetProcAddress(`glUniform2fvARB`);
  if (*cast(void**)&glUniform2fvARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2fvARB' not found!`);
  glUniform2fvARB_Z_Z(location, count, value);
}
alias glUniform2i = glUniform2i_Z_Z;
__gshared glUniform2i_Z_Z = function void (GLint location, GLint v0, GLint v1) { glUniform2i_Z_Z_loader(location, v0, v1); };
private void glUniform2i_Z_Z_loader (GLint location, GLint v0, GLint v1) {
  *cast(void**)&glUniform2i_Z_Z = glbindGetProcAddress(`glUniform2i`);
  if (*cast(void**)&glUniform2i_Z_Z is null) assert(0, `OpenGL function 'glUniform2i' not found!`);
  glUniform2i_Z_Z(location, v0, v1);
}
alias glUniform2i64ARB = glUniform2i64ARB_Z_Z;
__gshared glUniform2i64ARB_Z_Z = function void (GLint location, GLint64 x, GLint64 y) { glUniform2i64ARB_Z_Z_loader(location, x, y); };
private void glUniform2i64ARB_Z_Z_loader (GLint location, GLint64 x, GLint64 y) {
  *cast(void**)&glUniform2i64ARB_Z_Z = glbindGetProcAddress(`glUniform2i64ARB`);
  if (*cast(void**)&glUniform2i64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2i64ARB' not found!`);
  glUniform2i64ARB_Z_Z(location, x, y);
}
alias glUniform2i64NV = glUniform2i64NV_Z_Z;
__gshared glUniform2i64NV_Z_Z = function void (GLint location, GLint64EXT x, GLint64EXT y) { glUniform2i64NV_Z_Z_loader(location, x, y); };
private void glUniform2i64NV_Z_Z_loader (GLint location, GLint64EXT x, GLint64EXT y) {
  *cast(void**)&glUniform2i64NV_Z_Z = glbindGetProcAddress(`glUniform2i64NV`);
  if (*cast(void**)&glUniform2i64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform2i64NV' not found!`);
  glUniform2i64NV_Z_Z(location, x, y);
}
alias glUniform2i64vARB = glUniform2i64vARB_Z_Z;
__gshared glUniform2i64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLint64)* value) { glUniform2i64vARB_Z_Z_loader(location, count, value); };
private void glUniform2i64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glUniform2i64vARB_Z_Z = glbindGetProcAddress(`glUniform2i64vARB`);
  if (*cast(void**)&glUniform2i64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2i64vARB' not found!`);
  glUniform2i64vARB_Z_Z(location, count, value);
}
alias glUniform2i64vNV = glUniform2i64vNV_Z_Z;
__gshared glUniform2i64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLint64EXT)* value) { glUniform2i64vNV_Z_Z_loader(location, count, value); };
private void glUniform2i64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glUniform2i64vNV_Z_Z = glbindGetProcAddress(`glUniform2i64vNV`);
  if (*cast(void**)&glUniform2i64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform2i64vNV' not found!`);
  glUniform2i64vNV_Z_Z(location, count, value);
}
alias glUniform2iARB = glUniform2iARB_Z_Z;
__gshared glUniform2iARB_Z_Z = function void (GLint location, GLint v0, GLint v1) { glUniform2iARB_Z_Z_loader(location, v0, v1); };
private void glUniform2iARB_Z_Z_loader (GLint location, GLint v0, GLint v1) {
  *cast(void**)&glUniform2iARB_Z_Z = glbindGetProcAddress(`glUniform2iARB`);
  if (*cast(void**)&glUniform2iARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2iARB' not found!`);
  glUniform2iARB_Z_Z(location, v0, v1);
}
alias glUniform2iv = glUniform2iv_Z_Z;
__gshared glUniform2iv_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform2iv_Z_Z_loader(location, count, value); };
private void glUniform2iv_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform2iv_Z_Z = glbindGetProcAddress(`glUniform2iv`);
  if (*cast(void**)&glUniform2iv_Z_Z is null) assert(0, `OpenGL function 'glUniform2iv' not found!`);
  glUniform2iv_Z_Z(location, count, value);
}
alias glUniform2ivARB = glUniform2ivARB_Z_Z;
__gshared glUniform2ivARB_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform2ivARB_Z_Z_loader(location, count, value); };
private void glUniform2ivARB_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform2ivARB_Z_Z = glbindGetProcAddress(`glUniform2ivARB`);
  if (*cast(void**)&glUniform2ivARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2ivARB' not found!`);
  glUniform2ivARB_Z_Z(location, count, value);
}
alias glUniform2ui = glUniform2ui_Z_Z;
__gshared glUniform2ui_Z_Z = function void (GLint location, GLuint v0, GLuint v1) { glUniform2ui_Z_Z_loader(location, v0, v1); };
private void glUniform2ui_Z_Z_loader (GLint location, GLuint v0, GLuint v1) {
  *cast(void**)&glUniform2ui_Z_Z = glbindGetProcAddress(`glUniform2ui`);
  if (*cast(void**)&glUniform2ui_Z_Z is null) assert(0, `OpenGL function 'glUniform2ui' not found!`);
  glUniform2ui_Z_Z(location, v0, v1);
}
alias glUniform2ui64ARB = glUniform2ui64ARB_Z_Z;
__gshared glUniform2ui64ARB_Z_Z = function void (GLint location, GLuint64 x, GLuint64 y) { glUniform2ui64ARB_Z_Z_loader(location, x, y); };
private void glUniform2ui64ARB_Z_Z_loader (GLint location, GLuint64 x, GLuint64 y) {
  *cast(void**)&glUniform2ui64ARB_Z_Z = glbindGetProcAddress(`glUniform2ui64ARB`);
  if (*cast(void**)&glUniform2ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2ui64ARB' not found!`);
  glUniform2ui64ARB_Z_Z(location, x, y);
}
alias glUniform2ui64NV = glUniform2ui64NV_Z_Z;
__gshared glUniform2ui64NV_Z_Z = function void (GLint location, GLuint64EXT x, GLuint64EXT y) { glUniform2ui64NV_Z_Z_loader(location, x, y); };
private void glUniform2ui64NV_Z_Z_loader (GLint location, GLuint64EXT x, GLuint64EXT y) {
  *cast(void**)&glUniform2ui64NV_Z_Z = glbindGetProcAddress(`glUniform2ui64NV`);
  if (*cast(void**)&glUniform2ui64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform2ui64NV' not found!`);
  glUniform2ui64NV_Z_Z(location, x, y);
}
alias glUniform2ui64vARB = glUniform2ui64vARB_Z_Z;
__gshared glUniform2ui64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLuint64)* value) { glUniform2ui64vARB_Z_Z_loader(location, count, value); };
private void glUniform2ui64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glUniform2ui64vARB_Z_Z = glbindGetProcAddress(`glUniform2ui64vARB`);
  if (*cast(void**)&glUniform2ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform2ui64vARB' not found!`);
  glUniform2ui64vARB_Z_Z(location, count, value);
}
alias glUniform2ui64vNV = glUniform2ui64vNV_Z_Z;
__gshared glUniform2ui64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLuint64EXT)* value) { glUniform2ui64vNV_Z_Z_loader(location, count, value); };
private void glUniform2ui64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glUniform2ui64vNV_Z_Z = glbindGetProcAddress(`glUniform2ui64vNV`);
  if (*cast(void**)&glUniform2ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform2ui64vNV' not found!`);
  glUniform2ui64vNV_Z_Z(location, count, value);
}
alias glUniform2uiEXT = glUniform2uiEXT_Z_Z;
__gshared glUniform2uiEXT_Z_Z = function void (GLint location, GLuint v0, GLuint v1) { glUniform2uiEXT_Z_Z_loader(location, v0, v1); };
private void glUniform2uiEXT_Z_Z_loader (GLint location, GLuint v0, GLuint v1) {
  *cast(void**)&glUniform2uiEXT_Z_Z = glbindGetProcAddress(`glUniform2uiEXT`);
  if (*cast(void**)&glUniform2uiEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform2uiEXT' not found!`);
  glUniform2uiEXT_Z_Z(location, v0, v1);
}
alias glUniform2uiv = glUniform2uiv_Z_Z;
__gshared glUniform2uiv_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform2uiv_Z_Z_loader(location, count, value); };
private void glUniform2uiv_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform2uiv_Z_Z = glbindGetProcAddress(`glUniform2uiv`);
  if (*cast(void**)&glUniform2uiv_Z_Z is null) assert(0, `OpenGL function 'glUniform2uiv' not found!`);
  glUniform2uiv_Z_Z(location, count, value);
}
alias glUniform2uivEXT = glUniform2uivEXT_Z_Z;
__gshared glUniform2uivEXT_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform2uivEXT_Z_Z_loader(location, count, value); };
private void glUniform2uivEXT_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform2uivEXT_Z_Z = glbindGetProcAddress(`glUniform2uivEXT`);
  if (*cast(void**)&glUniform2uivEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform2uivEXT' not found!`);
  glUniform2uivEXT_Z_Z(location, count, value);
}
alias glUniform3d = glUniform3d_Z_Z;
__gshared glUniform3d_Z_Z = function void (GLint location, GLdouble x, GLdouble y, GLdouble z) { glUniform3d_Z_Z_loader(location, x, y, z); };
private void glUniform3d_Z_Z_loader (GLint location, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glUniform3d_Z_Z = glbindGetProcAddress(`glUniform3d`);
  if (*cast(void**)&glUniform3d_Z_Z is null) assert(0, `OpenGL function 'glUniform3d' not found!`);
  glUniform3d_Z_Z(location, x, y, z);
}
alias glUniform3dv = glUniform3dv_Z_Z;
__gshared glUniform3dv_Z_Z = function void (GLint location, GLsizei count, const(GLdouble)* value) { glUniform3dv_Z_Z_loader(location, count, value); };
private void glUniform3dv_Z_Z_loader (GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glUniform3dv_Z_Z = glbindGetProcAddress(`glUniform3dv`);
  if (*cast(void**)&glUniform3dv_Z_Z is null) assert(0, `OpenGL function 'glUniform3dv' not found!`);
  glUniform3dv_Z_Z(location, count, value);
}
alias glUniform3f = glUniform3f_Z_Z;
__gshared glUniform3f_Z_Z = function void (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { glUniform3f_Z_Z_loader(location, v0, v1, v2); };
private void glUniform3f_Z_Z_loader (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  *cast(void**)&glUniform3f_Z_Z = glbindGetProcAddress(`glUniform3f`);
  if (*cast(void**)&glUniform3f_Z_Z is null) assert(0, `OpenGL function 'glUniform3f' not found!`);
  glUniform3f_Z_Z(location, v0, v1, v2);
}
alias glUniform3fARB = glUniform3fARB_Z_Z;
__gshared glUniform3fARB_Z_Z = function void (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { glUniform3fARB_Z_Z_loader(location, v0, v1, v2); };
private void glUniform3fARB_Z_Z_loader (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  *cast(void**)&glUniform3fARB_Z_Z = glbindGetProcAddress(`glUniform3fARB`);
  if (*cast(void**)&glUniform3fARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3fARB' not found!`);
  glUniform3fARB_Z_Z(location, v0, v1, v2);
}
alias glUniform3fv = glUniform3fv_Z_Z;
__gshared glUniform3fv_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform3fv_Z_Z_loader(location, count, value); };
private void glUniform3fv_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform3fv_Z_Z = glbindGetProcAddress(`glUniform3fv`);
  if (*cast(void**)&glUniform3fv_Z_Z is null) assert(0, `OpenGL function 'glUniform3fv' not found!`);
  glUniform3fv_Z_Z(location, count, value);
}
alias glUniform3fvARB = glUniform3fvARB_Z_Z;
__gshared glUniform3fvARB_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform3fvARB_Z_Z_loader(location, count, value); };
private void glUniform3fvARB_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform3fvARB_Z_Z = glbindGetProcAddress(`glUniform3fvARB`);
  if (*cast(void**)&glUniform3fvARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3fvARB' not found!`);
  glUniform3fvARB_Z_Z(location, count, value);
}
alias glUniform3i = glUniform3i_Z_Z;
__gshared glUniform3i_Z_Z = function void (GLint location, GLint v0, GLint v1, GLint v2) { glUniform3i_Z_Z_loader(location, v0, v1, v2); };
private void glUniform3i_Z_Z_loader (GLint location, GLint v0, GLint v1, GLint v2) {
  *cast(void**)&glUniform3i_Z_Z = glbindGetProcAddress(`glUniform3i`);
  if (*cast(void**)&glUniform3i_Z_Z is null) assert(0, `OpenGL function 'glUniform3i' not found!`);
  glUniform3i_Z_Z(location, v0, v1, v2);
}
alias glUniform3i64ARB = glUniform3i64ARB_Z_Z;
__gshared glUniform3i64ARB_Z_Z = function void (GLint location, GLint64 x, GLint64 y, GLint64 z) { glUniform3i64ARB_Z_Z_loader(location, x, y, z); };
private void glUniform3i64ARB_Z_Z_loader (GLint location, GLint64 x, GLint64 y, GLint64 z) {
  *cast(void**)&glUniform3i64ARB_Z_Z = glbindGetProcAddress(`glUniform3i64ARB`);
  if (*cast(void**)&glUniform3i64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3i64ARB' not found!`);
  glUniform3i64ARB_Z_Z(location, x, y, z);
}
alias glUniform3i64NV = glUniform3i64NV_Z_Z;
__gshared glUniform3i64NV_Z_Z = function void (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { glUniform3i64NV_Z_Z_loader(location, x, y, z); };
private void glUniform3i64NV_Z_Z_loader (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  *cast(void**)&glUniform3i64NV_Z_Z = glbindGetProcAddress(`glUniform3i64NV`);
  if (*cast(void**)&glUniform3i64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform3i64NV' not found!`);
  glUniform3i64NV_Z_Z(location, x, y, z);
}
alias glUniform3i64vARB = glUniform3i64vARB_Z_Z;
__gshared glUniform3i64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLint64)* value) { glUniform3i64vARB_Z_Z_loader(location, count, value); };
private void glUniform3i64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glUniform3i64vARB_Z_Z = glbindGetProcAddress(`glUniform3i64vARB`);
  if (*cast(void**)&glUniform3i64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3i64vARB' not found!`);
  glUniform3i64vARB_Z_Z(location, count, value);
}
alias glUniform3i64vNV = glUniform3i64vNV_Z_Z;
__gshared glUniform3i64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLint64EXT)* value) { glUniform3i64vNV_Z_Z_loader(location, count, value); };
private void glUniform3i64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glUniform3i64vNV_Z_Z = glbindGetProcAddress(`glUniform3i64vNV`);
  if (*cast(void**)&glUniform3i64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform3i64vNV' not found!`);
  glUniform3i64vNV_Z_Z(location, count, value);
}
alias glUniform3iARB = glUniform3iARB_Z_Z;
__gshared glUniform3iARB_Z_Z = function void (GLint location, GLint v0, GLint v1, GLint v2) { glUniform3iARB_Z_Z_loader(location, v0, v1, v2); };
private void glUniform3iARB_Z_Z_loader (GLint location, GLint v0, GLint v1, GLint v2) {
  *cast(void**)&glUniform3iARB_Z_Z = glbindGetProcAddress(`glUniform3iARB`);
  if (*cast(void**)&glUniform3iARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3iARB' not found!`);
  glUniform3iARB_Z_Z(location, v0, v1, v2);
}
alias glUniform3iv = glUniform3iv_Z_Z;
__gshared glUniform3iv_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform3iv_Z_Z_loader(location, count, value); };
private void glUniform3iv_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform3iv_Z_Z = glbindGetProcAddress(`glUniform3iv`);
  if (*cast(void**)&glUniform3iv_Z_Z is null) assert(0, `OpenGL function 'glUniform3iv' not found!`);
  glUniform3iv_Z_Z(location, count, value);
}
alias glUniform3ivARB = glUniform3ivARB_Z_Z;
__gshared glUniform3ivARB_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform3ivARB_Z_Z_loader(location, count, value); };
private void glUniform3ivARB_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform3ivARB_Z_Z = glbindGetProcAddress(`glUniform3ivARB`);
  if (*cast(void**)&glUniform3ivARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3ivARB' not found!`);
  glUniform3ivARB_Z_Z(location, count, value);
}
alias glUniform3ui = glUniform3ui_Z_Z;
__gshared glUniform3ui_Z_Z = function void (GLint location, GLuint v0, GLuint v1, GLuint v2) { glUniform3ui_Z_Z_loader(location, v0, v1, v2); };
private void glUniform3ui_Z_Z_loader (GLint location, GLuint v0, GLuint v1, GLuint v2) {
  *cast(void**)&glUniform3ui_Z_Z = glbindGetProcAddress(`glUniform3ui`);
  if (*cast(void**)&glUniform3ui_Z_Z is null) assert(0, `OpenGL function 'glUniform3ui' not found!`);
  glUniform3ui_Z_Z(location, v0, v1, v2);
}
alias glUniform3ui64ARB = glUniform3ui64ARB_Z_Z;
__gshared glUniform3ui64ARB_Z_Z = function void (GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { glUniform3ui64ARB_Z_Z_loader(location, x, y, z); };
private void glUniform3ui64ARB_Z_Z_loader (GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  *cast(void**)&glUniform3ui64ARB_Z_Z = glbindGetProcAddress(`glUniform3ui64ARB`);
  if (*cast(void**)&glUniform3ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3ui64ARB' not found!`);
  glUniform3ui64ARB_Z_Z(location, x, y, z);
}
alias glUniform3ui64NV = glUniform3ui64NV_Z_Z;
__gshared glUniform3ui64NV_Z_Z = function void (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { glUniform3ui64NV_Z_Z_loader(location, x, y, z); };
private void glUniform3ui64NV_Z_Z_loader (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  *cast(void**)&glUniform3ui64NV_Z_Z = glbindGetProcAddress(`glUniform3ui64NV`);
  if (*cast(void**)&glUniform3ui64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform3ui64NV' not found!`);
  glUniform3ui64NV_Z_Z(location, x, y, z);
}
alias glUniform3ui64vARB = glUniform3ui64vARB_Z_Z;
__gshared glUniform3ui64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLuint64)* value) { glUniform3ui64vARB_Z_Z_loader(location, count, value); };
private void glUniform3ui64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glUniform3ui64vARB_Z_Z = glbindGetProcAddress(`glUniform3ui64vARB`);
  if (*cast(void**)&glUniform3ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform3ui64vARB' not found!`);
  glUniform3ui64vARB_Z_Z(location, count, value);
}
alias glUniform3ui64vNV = glUniform3ui64vNV_Z_Z;
__gshared glUniform3ui64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLuint64EXT)* value) { glUniform3ui64vNV_Z_Z_loader(location, count, value); };
private void glUniform3ui64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glUniform3ui64vNV_Z_Z = glbindGetProcAddress(`glUniform3ui64vNV`);
  if (*cast(void**)&glUniform3ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform3ui64vNV' not found!`);
  glUniform3ui64vNV_Z_Z(location, count, value);
}
alias glUniform3uiEXT = glUniform3uiEXT_Z_Z;
__gshared glUniform3uiEXT_Z_Z = function void (GLint location, GLuint v0, GLuint v1, GLuint v2) { glUniform3uiEXT_Z_Z_loader(location, v0, v1, v2); };
private void glUniform3uiEXT_Z_Z_loader (GLint location, GLuint v0, GLuint v1, GLuint v2) {
  *cast(void**)&glUniform3uiEXT_Z_Z = glbindGetProcAddress(`glUniform3uiEXT`);
  if (*cast(void**)&glUniform3uiEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform3uiEXT' not found!`);
  glUniform3uiEXT_Z_Z(location, v0, v1, v2);
}
alias glUniform3uiv = glUniform3uiv_Z_Z;
__gshared glUniform3uiv_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform3uiv_Z_Z_loader(location, count, value); };
private void glUniform3uiv_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform3uiv_Z_Z = glbindGetProcAddress(`glUniform3uiv`);
  if (*cast(void**)&glUniform3uiv_Z_Z is null) assert(0, `OpenGL function 'glUniform3uiv' not found!`);
  glUniform3uiv_Z_Z(location, count, value);
}
alias glUniform3uivEXT = glUniform3uivEXT_Z_Z;
__gshared glUniform3uivEXT_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform3uivEXT_Z_Z_loader(location, count, value); };
private void glUniform3uivEXT_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform3uivEXT_Z_Z = glbindGetProcAddress(`glUniform3uivEXT`);
  if (*cast(void**)&glUniform3uivEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform3uivEXT' not found!`);
  glUniform3uivEXT_Z_Z(location, count, value);
}
alias glUniform4d = glUniform4d_Z_Z;
__gshared glUniform4d_Z_Z = function void (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glUniform4d_Z_Z_loader(location, x, y, z, w); };
private void glUniform4d_Z_Z_loader (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glUniform4d_Z_Z = glbindGetProcAddress(`glUniform4d`);
  if (*cast(void**)&glUniform4d_Z_Z is null) assert(0, `OpenGL function 'glUniform4d' not found!`);
  glUniform4d_Z_Z(location, x, y, z, w);
}
alias glUniform4dv = glUniform4dv_Z_Z;
__gshared glUniform4dv_Z_Z = function void (GLint location, GLsizei count, const(GLdouble)* value) { glUniform4dv_Z_Z_loader(location, count, value); };
private void glUniform4dv_Z_Z_loader (GLint location, GLsizei count, const(GLdouble)* value) {
  *cast(void**)&glUniform4dv_Z_Z = glbindGetProcAddress(`glUniform4dv`);
  if (*cast(void**)&glUniform4dv_Z_Z is null) assert(0, `OpenGL function 'glUniform4dv' not found!`);
  glUniform4dv_Z_Z(location, count, value);
}
alias glUniform4f = glUniform4f_Z_Z;
__gshared glUniform4f_Z_Z = function void (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { glUniform4f_Z_Z_loader(location, v0, v1, v2, v3); };
private void glUniform4f_Z_Z_loader (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  *cast(void**)&glUniform4f_Z_Z = glbindGetProcAddress(`glUniform4f`);
  if (*cast(void**)&glUniform4f_Z_Z is null) assert(0, `OpenGL function 'glUniform4f' not found!`);
  glUniform4f_Z_Z(location, v0, v1, v2, v3);
}
alias glUniform4fARB = glUniform4fARB_Z_Z;
__gshared glUniform4fARB_Z_Z = function void (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { glUniform4fARB_Z_Z_loader(location, v0, v1, v2, v3); };
private void glUniform4fARB_Z_Z_loader (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  *cast(void**)&glUniform4fARB_Z_Z = glbindGetProcAddress(`glUniform4fARB`);
  if (*cast(void**)&glUniform4fARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4fARB' not found!`);
  glUniform4fARB_Z_Z(location, v0, v1, v2, v3);
}
alias glUniform4fv = glUniform4fv_Z_Z;
__gshared glUniform4fv_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform4fv_Z_Z_loader(location, count, value); };
private void glUniform4fv_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform4fv_Z_Z = glbindGetProcAddress(`glUniform4fv`);
  if (*cast(void**)&glUniform4fv_Z_Z is null) assert(0, `OpenGL function 'glUniform4fv' not found!`);
  glUniform4fv_Z_Z(location, count, value);
}
alias glUniform4fvARB = glUniform4fvARB_Z_Z;
__gshared glUniform4fvARB_Z_Z = function void (GLint location, GLsizei count, const(GLfloat)* value) { glUniform4fvARB_Z_Z_loader(location, count, value); };
private void glUniform4fvARB_Z_Z_loader (GLint location, GLsizei count, const(GLfloat)* value) {
  *cast(void**)&glUniform4fvARB_Z_Z = glbindGetProcAddress(`glUniform4fvARB`);
  if (*cast(void**)&glUniform4fvARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4fvARB' not found!`);
  glUniform4fvARB_Z_Z(location, count, value);
}
alias glUniform4i = glUniform4i_Z_Z;
__gshared glUniform4i_Z_Z = function void (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { glUniform4i_Z_Z_loader(location, v0, v1, v2, v3); };
private void glUniform4i_Z_Z_loader (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  *cast(void**)&glUniform4i_Z_Z = glbindGetProcAddress(`glUniform4i`);
  if (*cast(void**)&glUniform4i_Z_Z is null) assert(0, `OpenGL function 'glUniform4i' not found!`);
  glUniform4i_Z_Z(location, v0, v1, v2, v3);
}
alias glUniform4i64ARB = glUniform4i64ARB_Z_Z;
__gshared glUniform4i64ARB_Z_Z = function void (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { glUniform4i64ARB_Z_Z_loader(location, x, y, z, w); };
private void glUniform4i64ARB_Z_Z_loader (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  *cast(void**)&glUniform4i64ARB_Z_Z = glbindGetProcAddress(`glUniform4i64ARB`);
  if (*cast(void**)&glUniform4i64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4i64ARB' not found!`);
  glUniform4i64ARB_Z_Z(location, x, y, z, w);
}
alias glUniform4i64NV = glUniform4i64NV_Z_Z;
__gshared glUniform4i64NV_Z_Z = function void (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { glUniform4i64NV_Z_Z_loader(location, x, y, z, w); };
private void glUniform4i64NV_Z_Z_loader (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  *cast(void**)&glUniform4i64NV_Z_Z = glbindGetProcAddress(`glUniform4i64NV`);
  if (*cast(void**)&glUniform4i64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform4i64NV' not found!`);
  glUniform4i64NV_Z_Z(location, x, y, z, w);
}
alias glUniform4i64vARB = glUniform4i64vARB_Z_Z;
__gshared glUniform4i64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLint64)* value) { glUniform4i64vARB_Z_Z_loader(location, count, value); };
private void glUniform4i64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLint64)* value) {
  *cast(void**)&glUniform4i64vARB_Z_Z = glbindGetProcAddress(`glUniform4i64vARB`);
  if (*cast(void**)&glUniform4i64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4i64vARB' not found!`);
  glUniform4i64vARB_Z_Z(location, count, value);
}
alias glUniform4i64vNV = glUniform4i64vNV_Z_Z;
__gshared glUniform4i64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLint64EXT)* value) { glUniform4i64vNV_Z_Z_loader(location, count, value); };
private void glUniform4i64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLint64EXT)* value) {
  *cast(void**)&glUniform4i64vNV_Z_Z = glbindGetProcAddress(`glUniform4i64vNV`);
  if (*cast(void**)&glUniform4i64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform4i64vNV' not found!`);
  glUniform4i64vNV_Z_Z(location, count, value);
}
alias glUniform4iARB = glUniform4iARB_Z_Z;
__gshared glUniform4iARB_Z_Z = function void (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { glUniform4iARB_Z_Z_loader(location, v0, v1, v2, v3); };
private void glUniform4iARB_Z_Z_loader (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  *cast(void**)&glUniform4iARB_Z_Z = glbindGetProcAddress(`glUniform4iARB`);
  if (*cast(void**)&glUniform4iARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4iARB' not found!`);
  glUniform4iARB_Z_Z(location, v0, v1, v2, v3);
}
alias glUniform4iv = glUniform4iv_Z_Z;
__gshared glUniform4iv_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform4iv_Z_Z_loader(location, count, value); };
private void glUniform4iv_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform4iv_Z_Z = glbindGetProcAddress(`glUniform4iv`);
  if (*cast(void**)&glUniform4iv_Z_Z is null) assert(0, `OpenGL function 'glUniform4iv' not found!`);
  glUniform4iv_Z_Z(location, count, value);
}
alias glUniform4ivARB = glUniform4ivARB_Z_Z;
__gshared glUniform4ivARB_Z_Z = function void (GLint location, GLsizei count, const(GLint)* value) { glUniform4ivARB_Z_Z_loader(location, count, value); };
private void glUniform4ivARB_Z_Z_loader (GLint location, GLsizei count, const(GLint)* value) {
  *cast(void**)&glUniform4ivARB_Z_Z = glbindGetProcAddress(`glUniform4ivARB`);
  if (*cast(void**)&glUniform4ivARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4ivARB' not found!`);
  glUniform4ivARB_Z_Z(location, count, value);
}
alias glUniform4ui = glUniform4ui_Z_Z;
__gshared glUniform4ui_Z_Z = function void (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { glUniform4ui_Z_Z_loader(location, v0, v1, v2, v3); };
private void glUniform4ui_Z_Z_loader (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  *cast(void**)&glUniform4ui_Z_Z = glbindGetProcAddress(`glUniform4ui`);
  if (*cast(void**)&glUniform4ui_Z_Z is null) assert(0, `OpenGL function 'glUniform4ui' not found!`);
  glUniform4ui_Z_Z(location, v0, v1, v2, v3);
}
alias glUniform4ui64ARB = glUniform4ui64ARB_Z_Z;
__gshared glUniform4ui64ARB_Z_Z = function void (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { glUniform4ui64ARB_Z_Z_loader(location, x, y, z, w); };
private void glUniform4ui64ARB_Z_Z_loader (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  *cast(void**)&glUniform4ui64ARB_Z_Z = glbindGetProcAddress(`glUniform4ui64ARB`);
  if (*cast(void**)&glUniform4ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4ui64ARB' not found!`);
  glUniform4ui64ARB_Z_Z(location, x, y, z, w);
}
alias glUniform4ui64NV = glUniform4ui64NV_Z_Z;
__gshared glUniform4ui64NV_Z_Z = function void (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { glUniform4ui64NV_Z_Z_loader(location, x, y, z, w); };
private void glUniform4ui64NV_Z_Z_loader (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  *cast(void**)&glUniform4ui64NV_Z_Z = glbindGetProcAddress(`glUniform4ui64NV`);
  if (*cast(void**)&glUniform4ui64NV_Z_Z is null) assert(0, `OpenGL function 'glUniform4ui64NV' not found!`);
  glUniform4ui64NV_Z_Z(location, x, y, z, w);
}
alias glUniform4ui64vARB = glUniform4ui64vARB_Z_Z;
__gshared glUniform4ui64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLuint64)* value) { glUniform4ui64vARB_Z_Z_loader(location, count, value); };
private void glUniform4ui64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glUniform4ui64vARB_Z_Z = glbindGetProcAddress(`glUniform4ui64vARB`);
  if (*cast(void**)&glUniform4ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniform4ui64vARB' not found!`);
  glUniform4ui64vARB_Z_Z(location, count, value);
}
alias glUniform4ui64vNV = glUniform4ui64vNV_Z_Z;
__gshared glUniform4ui64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLuint64EXT)* value) { glUniform4ui64vNV_Z_Z_loader(location, count, value); };
private void glUniform4ui64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glUniform4ui64vNV_Z_Z = glbindGetProcAddress(`glUniform4ui64vNV`);
  if (*cast(void**)&glUniform4ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniform4ui64vNV' not found!`);
  glUniform4ui64vNV_Z_Z(location, count, value);
}
alias glUniform4uiEXT = glUniform4uiEXT_Z_Z;
__gshared glUniform4uiEXT_Z_Z = function void (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { glUniform4uiEXT_Z_Z_loader(location, v0, v1, v2, v3); };
private void glUniform4uiEXT_Z_Z_loader (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  *cast(void**)&glUniform4uiEXT_Z_Z = glbindGetProcAddress(`glUniform4uiEXT`);
  if (*cast(void**)&glUniform4uiEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform4uiEXT' not found!`);
  glUniform4uiEXT_Z_Z(location, v0, v1, v2, v3);
}
alias glUniform4uiv = glUniform4uiv_Z_Z;
__gshared glUniform4uiv_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform4uiv_Z_Z_loader(location, count, value); };
private void glUniform4uiv_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform4uiv_Z_Z = glbindGetProcAddress(`glUniform4uiv`);
  if (*cast(void**)&glUniform4uiv_Z_Z is null) assert(0, `OpenGL function 'glUniform4uiv' not found!`);
  glUniform4uiv_Z_Z(location, count, value);
}
alias glUniform4uivEXT = glUniform4uivEXT_Z_Z;
__gshared glUniform4uivEXT_Z_Z = function void (GLint location, GLsizei count, const(GLuint)* value) { glUniform4uivEXT_Z_Z_loader(location, count, value); };
private void glUniform4uivEXT_Z_Z_loader (GLint location, GLsizei count, const(GLuint)* value) {
  *cast(void**)&glUniform4uivEXT_Z_Z = glbindGetProcAddress(`glUniform4uivEXT`);
  if (*cast(void**)&glUniform4uivEXT_Z_Z is null) assert(0, `OpenGL function 'glUniform4uivEXT' not found!`);
  glUniform4uivEXT_Z_Z(location, count, value);
}
alias glUniformBlockBinding = glUniformBlockBinding_Z_Z;
__gshared glUniformBlockBinding_Z_Z = function void (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { glUniformBlockBinding_Z_Z_loader(program, uniformBlockIndex, uniformBlockBinding); };
private void glUniformBlockBinding_Z_Z_loader (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  *cast(void**)&glUniformBlockBinding_Z_Z = glbindGetProcAddress(`glUniformBlockBinding`);
  if (*cast(void**)&glUniformBlockBinding_Z_Z is null) assert(0, `OpenGL function 'glUniformBlockBinding' not found!`);
  glUniformBlockBinding_Z_Z(program, uniformBlockIndex, uniformBlockBinding);
}
alias glUniformBufferEXT = glUniformBufferEXT_Z_Z;
__gshared glUniformBufferEXT_Z_Z = function void (GLuint program, GLint location, GLuint buffer) { glUniformBufferEXT_Z_Z_loader(program, location, buffer); };
private void glUniformBufferEXT_Z_Z_loader (GLuint program, GLint location, GLuint buffer) {
  *cast(void**)&glUniformBufferEXT_Z_Z = glbindGetProcAddress(`glUniformBufferEXT`);
  if (*cast(void**)&glUniformBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glUniformBufferEXT' not found!`);
  glUniformBufferEXT_Z_Z(program, location, buffer);
}
alias glUniformHandleui64ARB = glUniformHandleui64ARB_Z_Z;
__gshared glUniformHandleui64ARB_Z_Z = function void (GLint location, GLuint64 value) { glUniformHandleui64ARB_Z_Z_loader(location, value); };
private void glUniformHandleui64ARB_Z_Z_loader (GLint location, GLuint64 value) {
  *cast(void**)&glUniformHandleui64ARB_Z_Z = glbindGetProcAddress(`glUniformHandleui64ARB`);
  if (*cast(void**)&glUniformHandleui64ARB_Z_Z is null) assert(0, `OpenGL function 'glUniformHandleui64ARB' not found!`);
  glUniformHandleui64ARB_Z_Z(location, value);
}
alias glUniformHandleui64IMG = glUniformHandleui64IMG_Z_Z;
__gshared glUniformHandleui64IMG_Z_Z = function void (GLint location, GLuint64 value) { glUniformHandleui64IMG_Z_Z_loader(location, value); };
private void glUniformHandleui64IMG_Z_Z_loader (GLint location, GLuint64 value) {
  *cast(void**)&glUniformHandleui64IMG_Z_Z = glbindGetProcAddress(`glUniformHandleui64IMG`);
  if (*cast(void**)&glUniformHandleui64IMG_Z_Z is null) assert(0, `OpenGL function 'glUniformHandleui64IMG' not found!`);
  glUniformHandleui64IMG_Z_Z(location, value);
}
alias glUniformHandleui64NV = glUniformHandleui64NV_Z_Z;
__gshared glUniformHandleui64NV_Z_Z = function void (GLint location, GLuint64 value) { glUniformHandleui64NV_Z_Z_loader(location, value); };
private void glUniformHandleui64NV_Z_Z_loader (GLint location, GLuint64 value) {
  *cast(void**)&glUniformHandleui64NV_Z_Z = glbindGetProcAddress(`glUniformHandleui64NV`);
  if (*cast(void**)&glUniformHandleui64NV_Z_Z is null) assert(0, `OpenGL function 'glUniformHandleui64NV' not found!`);
  glUniformHandleui64NV_Z_Z(location, value);
}
alias glUniformHandleui64vARB = glUniformHandleui64vARB_Z_Z;
__gshared glUniformHandleui64vARB_Z_Z = function void (GLint location, GLsizei count, const(GLuint64)* value) { glUniformHandleui64vARB_Z_Z_loader(location, count, value); };
private void glUniformHandleui64vARB_Z_Z_loader (GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glUniformHandleui64vARB_Z_Z = glbindGetProcAddress(`glUniformHandleui64vARB`);
  if (*cast(void**)&glUniformHandleui64vARB_Z_Z is null) assert(0, `OpenGL function 'glUniformHandleui64vARB' not found!`);
  glUniformHandleui64vARB_Z_Z(location, count, value);
}
alias glUniformHandleui64vIMG = glUniformHandleui64vIMG_Z_Z;
__gshared glUniformHandleui64vIMG_Z_Z = function void (GLint location, GLsizei count, const(GLuint64)* value) { glUniformHandleui64vIMG_Z_Z_loader(location, count, value); };
private void glUniformHandleui64vIMG_Z_Z_loader (GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glUniformHandleui64vIMG_Z_Z = glbindGetProcAddress(`glUniformHandleui64vIMG`);
  if (*cast(void**)&glUniformHandleui64vIMG_Z_Z is null) assert(0, `OpenGL function 'glUniformHandleui64vIMG' not found!`);
  glUniformHandleui64vIMG_Z_Z(location, count, value);
}
alias glUniformHandleui64vNV = glUniformHandleui64vNV_Z_Z;
__gshared glUniformHandleui64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLuint64)* value) { glUniformHandleui64vNV_Z_Z_loader(location, count, value); };
private void glUniformHandleui64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLuint64)* value) {
  *cast(void**)&glUniformHandleui64vNV_Z_Z = glbindGetProcAddress(`glUniformHandleui64vNV`);
  if (*cast(void**)&glUniformHandleui64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniformHandleui64vNV' not found!`);
  glUniformHandleui64vNV_Z_Z(location, count, value);
}
alias glUniformMatrix2dv = glUniformMatrix2dv_Z_Z;
__gshared glUniformMatrix2dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix2dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix2dv_Z_Z = glbindGetProcAddress(`glUniformMatrix2dv`);
  if (*cast(void**)&glUniformMatrix2dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2dv' not found!`);
  glUniformMatrix2dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2fv = glUniformMatrix2fv_Z_Z;
__gshared glUniformMatrix2fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix2fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix2fv_Z_Z = glbindGetProcAddress(`glUniformMatrix2fv`);
  if (*cast(void**)&glUniformMatrix2fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2fv' not found!`);
  glUniformMatrix2fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2fvARB = glUniformMatrix2fvARB_Z_Z;
__gshared glUniformMatrix2fvARB_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix2fvARB_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2fvARB_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix2fvARB_Z_Z = glbindGetProcAddress(`glUniformMatrix2fvARB`);
  if (*cast(void**)&glUniformMatrix2fvARB_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2fvARB' not found!`);
  glUniformMatrix2fvARB_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2x3dv = glUniformMatrix2x3dv_Z_Z;
__gshared glUniformMatrix2x3dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix2x3dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2x3dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix2x3dv_Z_Z = glbindGetProcAddress(`glUniformMatrix2x3dv`);
  if (*cast(void**)&glUniformMatrix2x3dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x3dv' not found!`);
  glUniformMatrix2x3dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2x3fv = glUniformMatrix2x3fv_Z_Z;
__gshared glUniformMatrix2x3fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix2x3fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2x3fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix2x3fv_Z_Z = glbindGetProcAddress(`glUniformMatrix2x3fv`);
  if (*cast(void**)&glUniformMatrix2x3fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x3fv' not found!`);
  glUniformMatrix2x3fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2x3fvNV = glUniformMatrix2x3fvNV_Z_Z;
__gshared glUniformMatrix2x3fvNV_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix2x3fvNV_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2x3fvNV_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix2x3fvNV_Z_Z = glbindGetProcAddress(`glUniformMatrix2x3fvNV`);
  if (*cast(void**)&glUniformMatrix2x3fvNV_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x3fvNV' not found!`);
  glUniformMatrix2x3fvNV_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2x4dv = glUniformMatrix2x4dv_Z_Z;
__gshared glUniformMatrix2x4dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix2x4dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2x4dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix2x4dv_Z_Z = glbindGetProcAddress(`glUniformMatrix2x4dv`);
  if (*cast(void**)&glUniformMatrix2x4dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x4dv' not found!`);
  glUniformMatrix2x4dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2x4fv = glUniformMatrix2x4fv_Z_Z;
__gshared glUniformMatrix2x4fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix2x4fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2x4fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix2x4fv_Z_Z = glbindGetProcAddress(`glUniformMatrix2x4fv`);
  if (*cast(void**)&glUniformMatrix2x4fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x4fv' not found!`);
  glUniformMatrix2x4fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix2x4fvNV = glUniformMatrix2x4fvNV_Z_Z;
__gshared glUniformMatrix2x4fvNV_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix2x4fvNV_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix2x4fvNV_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix2x4fvNV_Z_Z = glbindGetProcAddress(`glUniformMatrix2x4fvNV`);
  if (*cast(void**)&glUniformMatrix2x4fvNV_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix2x4fvNV' not found!`);
  glUniformMatrix2x4fvNV_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3dv = glUniformMatrix3dv_Z_Z;
__gshared glUniformMatrix3dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix3dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix3dv_Z_Z = glbindGetProcAddress(`glUniformMatrix3dv`);
  if (*cast(void**)&glUniformMatrix3dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3dv' not found!`);
  glUniformMatrix3dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3fv = glUniformMatrix3fv_Z_Z;
__gshared glUniformMatrix3fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix3fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix3fv_Z_Z = glbindGetProcAddress(`glUniformMatrix3fv`);
  if (*cast(void**)&glUniformMatrix3fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3fv' not found!`);
  glUniformMatrix3fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3fvARB = glUniformMatrix3fvARB_Z_Z;
__gshared glUniformMatrix3fvARB_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix3fvARB_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3fvARB_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix3fvARB_Z_Z = glbindGetProcAddress(`glUniformMatrix3fvARB`);
  if (*cast(void**)&glUniformMatrix3fvARB_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3fvARB' not found!`);
  glUniformMatrix3fvARB_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3x2dv = glUniformMatrix3x2dv_Z_Z;
__gshared glUniformMatrix3x2dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix3x2dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3x2dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix3x2dv_Z_Z = glbindGetProcAddress(`glUniformMatrix3x2dv`);
  if (*cast(void**)&glUniformMatrix3x2dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x2dv' not found!`);
  glUniformMatrix3x2dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3x2fv = glUniformMatrix3x2fv_Z_Z;
__gshared glUniformMatrix3x2fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix3x2fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3x2fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix3x2fv_Z_Z = glbindGetProcAddress(`glUniformMatrix3x2fv`);
  if (*cast(void**)&glUniformMatrix3x2fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x2fv' not found!`);
  glUniformMatrix3x2fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3x2fvNV = glUniformMatrix3x2fvNV_Z_Z;
__gshared glUniformMatrix3x2fvNV_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix3x2fvNV_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3x2fvNV_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix3x2fvNV_Z_Z = glbindGetProcAddress(`glUniformMatrix3x2fvNV`);
  if (*cast(void**)&glUniformMatrix3x2fvNV_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x2fvNV' not found!`);
  glUniformMatrix3x2fvNV_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3x4dv = glUniformMatrix3x4dv_Z_Z;
__gshared glUniformMatrix3x4dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix3x4dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3x4dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix3x4dv_Z_Z = glbindGetProcAddress(`glUniformMatrix3x4dv`);
  if (*cast(void**)&glUniformMatrix3x4dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x4dv' not found!`);
  glUniformMatrix3x4dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3x4fv = glUniformMatrix3x4fv_Z_Z;
__gshared glUniformMatrix3x4fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix3x4fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3x4fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix3x4fv_Z_Z = glbindGetProcAddress(`glUniformMatrix3x4fv`);
  if (*cast(void**)&glUniformMatrix3x4fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x4fv' not found!`);
  glUniformMatrix3x4fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix3x4fvNV = glUniformMatrix3x4fvNV_Z_Z;
__gshared glUniformMatrix3x4fvNV_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix3x4fvNV_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix3x4fvNV_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix3x4fvNV_Z_Z = glbindGetProcAddress(`glUniformMatrix3x4fvNV`);
  if (*cast(void**)&glUniformMatrix3x4fvNV_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix3x4fvNV' not found!`);
  glUniformMatrix3x4fvNV_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4dv = glUniformMatrix4dv_Z_Z;
__gshared glUniformMatrix4dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix4dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix4dv_Z_Z = glbindGetProcAddress(`glUniformMatrix4dv`);
  if (*cast(void**)&glUniformMatrix4dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4dv' not found!`);
  glUniformMatrix4dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4fv = glUniformMatrix4fv_Z_Z;
__gshared glUniformMatrix4fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix4fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix4fv_Z_Z = glbindGetProcAddress(`glUniformMatrix4fv`);
  if (*cast(void**)&glUniformMatrix4fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4fv' not found!`);
  glUniformMatrix4fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4fvARB = glUniformMatrix4fvARB_Z_Z;
__gshared glUniformMatrix4fvARB_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix4fvARB_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4fvARB_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix4fvARB_Z_Z = glbindGetProcAddress(`glUniformMatrix4fvARB`);
  if (*cast(void**)&glUniformMatrix4fvARB_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4fvARB' not found!`);
  glUniformMatrix4fvARB_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4x2dv = glUniformMatrix4x2dv_Z_Z;
__gshared glUniformMatrix4x2dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix4x2dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4x2dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix4x2dv_Z_Z = glbindGetProcAddress(`glUniformMatrix4x2dv`);
  if (*cast(void**)&glUniformMatrix4x2dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x2dv' not found!`);
  glUniformMatrix4x2dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4x2fv = glUniformMatrix4x2fv_Z_Z;
__gshared glUniformMatrix4x2fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix4x2fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4x2fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix4x2fv_Z_Z = glbindGetProcAddress(`glUniformMatrix4x2fv`);
  if (*cast(void**)&glUniformMatrix4x2fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x2fv' not found!`);
  glUniformMatrix4x2fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4x2fvNV = glUniformMatrix4x2fvNV_Z_Z;
__gshared glUniformMatrix4x2fvNV_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix4x2fvNV_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4x2fvNV_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix4x2fvNV_Z_Z = glbindGetProcAddress(`glUniformMatrix4x2fvNV`);
  if (*cast(void**)&glUniformMatrix4x2fvNV_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x2fvNV' not found!`);
  glUniformMatrix4x2fvNV_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4x3dv = glUniformMatrix4x3dv_Z_Z;
__gshared glUniformMatrix4x3dv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) { glUniformMatrix4x3dv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4x3dv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLdouble)* value) {
  *cast(void**)&glUniformMatrix4x3dv_Z_Z = glbindGetProcAddress(`glUniformMatrix4x3dv`);
  if (*cast(void**)&glUniformMatrix4x3dv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x3dv' not found!`);
  glUniformMatrix4x3dv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4x3fv = glUniformMatrix4x3fv_Z_Z;
__gshared glUniformMatrix4x3fv_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix4x3fv_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4x3fv_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix4x3fv_Z_Z = glbindGetProcAddress(`glUniformMatrix4x3fv`);
  if (*cast(void**)&glUniformMatrix4x3fv_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x3fv' not found!`);
  glUniformMatrix4x3fv_Z_Z(location, count, transpose, value);
}
alias glUniformMatrix4x3fvNV = glUniformMatrix4x3fvNV_Z_Z;
__gshared glUniformMatrix4x3fvNV_Z_Z = function void (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) { glUniformMatrix4x3fvNV_Z_Z_loader(location, count, transpose, value); };
private void glUniformMatrix4x3fvNV_Z_Z_loader (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) {
  *cast(void**)&glUniformMatrix4x3fvNV_Z_Z = glbindGetProcAddress(`glUniformMatrix4x3fvNV`);
  if (*cast(void**)&glUniformMatrix4x3fvNV_Z_Z is null) assert(0, `OpenGL function 'glUniformMatrix4x3fvNV' not found!`);
  glUniformMatrix4x3fvNV_Z_Z(location, count, transpose, value);
}
alias glUniformSubroutinesuiv = glUniformSubroutinesuiv_Z_Z;
__gshared glUniformSubroutinesuiv_Z_Z = function void (GLenum shadertype, GLsizei count, const(GLuint)* indices) { glUniformSubroutinesuiv_Z_Z_loader(shadertype, count, indices); };
private void glUniformSubroutinesuiv_Z_Z_loader (GLenum shadertype, GLsizei count, const(GLuint)* indices) {
  *cast(void**)&glUniformSubroutinesuiv_Z_Z = glbindGetProcAddress(`glUniformSubroutinesuiv`);
  if (*cast(void**)&glUniformSubroutinesuiv_Z_Z is null) assert(0, `OpenGL function 'glUniformSubroutinesuiv' not found!`);
  glUniformSubroutinesuiv_Z_Z(shadertype, count, indices);
}
alias glUniformui64NV = glUniformui64NV_Z_Z;
__gshared glUniformui64NV_Z_Z = function void (GLint location, GLuint64EXT value) { glUniformui64NV_Z_Z_loader(location, value); };
private void glUniformui64NV_Z_Z_loader (GLint location, GLuint64EXT value) {
  *cast(void**)&glUniformui64NV_Z_Z = glbindGetProcAddress(`glUniformui64NV`);
  if (*cast(void**)&glUniformui64NV_Z_Z is null) assert(0, `OpenGL function 'glUniformui64NV' not found!`);
  glUniformui64NV_Z_Z(location, value);
}
alias glUniformui64vNV = glUniformui64vNV_Z_Z;
__gshared glUniformui64vNV_Z_Z = function void (GLint location, GLsizei count, const(GLuint64EXT)* value) { glUniformui64vNV_Z_Z_loader(location, count, value); };
private void glUniformui64vNV_Z_Z_loader (GLint location, GLsizei count, const(GLuint64EXT)* value) {
  *cast(void**)&glUniformui64vNV_Z_Z = glbindGetProcAddress(`glUniformui64vNV`);
  if (*cast(void**)&glUniformui64vNV_Z_Z is null) assert(0, `OpenGL function 'glUniformui64vNV' not found!`);
  glUniformui64vNV_Z_Z(location, count, value);
}
alias glUnlockArraysEXT = glUnlockArraysEXT_Z_Z;
__gshared glUnlockArraysEXT_Z_Z = function void () { glUnlockArraysEXT_Z_Z_loader(); };
private void glUnlockArraysEXT_Z_Z_loader () {
  *cast(void**)&glUnlockArraysEXT_Z_Z = glbindGetProcAddress(`glUnlockArraysEXT`);
  if (*cast(void**)&glUnlockArraysEXT_Z_Z is null) assert(0, `OpenGL function 'glUnlockArraysEXT' not found!`);
  glUnlockArraysEXT_Z_Z();
}
alias glUnmapBuffer = glUnmapBuffer_Z_Z;
__gshared glUnmapBuffer_Z_Z = function GLboolean (GLenum target) { return glUnmapBuffer_Z_Z_loader(target); };
private GLboolean glUnmapBuffer_Z_Z_loader (GLenum target) {
  *cast(void**)&glUnmapBuffer_Z_Z = glbindGetProcAddress(`glUnmapBuffer`);
  if (*cast(void**)&glUnmapBuffer_Z_Z is null) assert(0, `OpenGL function 'glUnmapBuffer' not found!`);
  return glUnmapBuffer_Z_Z(target);
}
alias glUnmapBufferARB = glUnmapBufferARB_Z_Z;
__gshared glUnmapBufferARB_Z_Z = function GLboolean (GLenum target) { return glUnmapBufferARB_Z_Z_loader(target); };
private GLboolean glUnmapBufferARB_Z_Z_loader (GLenum target) {
  *cast(void**)&glUnmapBufferARB_Z_Z = glbindGetProcAddress(`glUnmapBufferARB`);
  if (*cast(void**)&glUnmapBufferARB_Z_Z is null) assert(0, `OpenGL function 'glUnmapBufferARB' not found!`);
  return glUnmapBufferARB_Z_Z(target);
}
alias glUnmapBufferOES = glUnmapBufferOES_Z_Z;
__gshared glUnmapBufferOES_Z_Z = function GLboolean (GLenum target) { return glUnmapBufferOES_Z_Z_loader(target); };
private GLboolean glUnmapBufferOES_Z_Z_loader (GLenum target) {
  *cast(void**)&glUnmapBufferOES_Z_Z = glbindGetProcAddress(`glUnmapBufferOES`);
  if (*cast(void**)&glUnmapBufferOES_Z_Z is null) assert(0, `OpenGL function 'glUnmapBufferOES' not found!`);
  return glUnmapBufferOES_Z_Z(target);
}
alias glUnmapNamedBuffer = glUnmapNamedBuffer_Z_Z;
__gshared glUnmapNamedBuffer_Z_Z = function GLboolean (GLuint buffer) { return glUnmapNamedBuffer_Z_Z_loader(buffer); };
private GLboolean glUnmapNamedBuffer_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glUnmapNamedBuffer_Z_Z = glbindGetProcAddress(`glUnmapNamedBuffer`);
  if (*cast(void**)&glUnmapNamedBuffer_Z_Z is null) assert(0, `OpenGL function 'glUnmapNamedBuffer' not found!`);
  return glUnmapNamedBuffer_Z_Z(buffer);
}
alias glUnmapNamedBufferEXT = glUnmapNamedBufferEXT_Z_Z;
__gshared glUnmapNamedBufferEXT_Z_Z = function GLboolean (GLuint buffer) { return glUnmapNamedBufferEXT_Z_Z_loader(buffer); };
private GLboolean glUnmapNamedBufferEXT_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glUnmapNamedBufferEXT_Z_Z = glbindGetProcAddress(`glUnmapNamedBufferEXT`);
  if (*cast(void**)&glUnmapNamedBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glUnmapNamedBufferEXT' not found!`);
  return glUnmapNamedBufferEXT_Z_Z(buffer);
}
alias glUnmapObjectBufferATI = glUnmapObjectBufferATI_Z_Z;
__gshared glUnmapObjectBufferATI_Z_Z = function void (GLuint buffer) { glUnmapObjectBufferATI_Z_Z_loader(buffer); };
private void glUnmapObjectBufferATI_Z_Z_loader (GLuint buffer) {
  *cast(void**)&glUnmapObjectBufferATI_Z_Z = glbindGetProcAddress(`glUnmapObjectBufferATI`);
  if (*cast(void**)&glUnmapObjectBufferATI_Z_Z is null) assert(0, `OpenGL function 'glUnmapObjectBufferATI' not found!`);
  glUnmapObjectBufferATI_Z_Z(buffer);
}
alias glUnmapTexture2DINTEL = glUnmapTexture2DINTEL_Z_Z;
__gshared glUnmapTexture2DINTEL_Z_Z = function void (GLuint texture, GLint level) { glUnmapTexture2DINTEL_Z_Z_loader(texture, level); };
private void glUnmapTexture2DINTEL_Z_Z_loader (GLuint texture, GLint level) {
  *cast(void**)&glUnmapTexture2DINTEL_Z_Z = glbindGetProcAddress(`glUnmapTexture2DINTEL`);
  if (*cast(void**)&glUnmapTexture2DINTEL_Z_Z is null) assert(0, `OpenGL function 'glUnmapTexture2DINTEL' not found!`);
  glUnmapTexture2DINTEL_Z_Z(texture, level);
}
alias glUpdateObjectBufferATI = glUpdateObjectBufferATI_Z_Z;
__gshared glUpdateObjectBufferATI_Z_Z = function void (GLuint buffer, GLuint offset, GLsizei size, const(void)* pointer, GLenum preserve) { glUpdateObjectBufferATI_Z_Z_loader(buffer, offset, size, pointer, preserve); };
private void glUpdateObjectBufferATI_Z_Z_loader (GLuint buffer, GLuint offset, GLsizei size, const(void)* pointer, GLenum preserve) {
  *cast(void**)&glUpdateObjectBufferATI_Z_Z = glbindGetProcAddress(`glUpdateObjectBufferATI`);
  if (*cast(void**)&glUpdateObjectBufferATI_Z_Z is null) assert(0, `OpenGL function 'glUpdateObjectBufferATI' not found!`);
  glUpdateObjectBufferATI_Z_Z(buffer, offset, size, pointer, preserve);
}
alias glUseProgram = glUseProgram_Z_Z;
__gshared glUseProgram_Z_Z = function void (GLuint program) { glUseProgram_Z_Z_loader(program); };
private void glUseProgram_Z_Z_loader (GLuint program) {
  *cast(void**)&glUseProgram_Z_Z = glbindGetProcAddress(`glUseProgram`);
  if (*cast(void**)&glUseProgram_Z_Z is null) assert(0, `OpenGL function 'glUseProgram' not found!`);
  glUseProgram_Z_Z(program);
}
alias glUseProgramObjectARB = glUseProgramObjectARB_Z_Z;
__gshared glUseProgramObjectARB_Z_Z = function void (GLhandleARB programObj) { glUseProgramObjectARB_Z_Z_loader(programObj); };
private void glUseProgramObjectARB_Z_Z_loader (GLhandleARB programObj) {
  *cast(void**)&glUseProgramObjectARB_Z_Z = glbindGetProcAddress(`glUseProgramObjectARB`);
  if (*cast(void**)&glUseProgramObjectARB_Z_Z is null) assert(0, `OpenGL function 'glUseProgramObjectARB' not found!`);
  glUseProgramObjectARB_Z_Z(programObj);
}
alias glUseProgramStages = glUseProgramStages_Z_Z;
__gshared glUseProgramStages_Z_Z = function void (GLuint pipeline, GLbitfield stages, GLuint program) { glUseProgramStages_Z_Z_loader(pipeline, stages, program); };
private void glUseProgramStages_Z_Z_loader (GLuint pipeline, GLbitfield stages, GLuint program) {
  *cast(void**)&glUseProgramStages_Z_Z = glbindGetProcAddress(`glUseProgramStages`);
  if (*cast(void**)&glUseProgramStages_Z_Z is null) assert(0, `OpenGL function 'glUseProgramStages' not found!`);
  glUseProgramStages_Z_Z(pipeline, stages, program);
}
alias glUseProgramStagesEXT = glUseProgramStagesEXT_Z_Z;
__gshared glUseProgramStagesEXT_Z_Z = function void (GLuint pipeline, GLbitfield stages, GLuint program) { glUseProgramStagesEXT_Z_Z_loader(pipeline, stages, program); };
private void glUseProgramStagesEXT_Z_Z_loader (GLuint pipeline, GLbitfield stages, GLuint program) {
  *cast(void**)&glUseProgramStagesEXT_Z_Z = glbindGetProcAddress(`glUseProgramStagesEXT`);
  if (*cast(void**)&glUseProgramStagesEXT_Z_Z is null) assert(0, `OpenGL function 'glUseProgramStagesEXT' not found!`);
  glUseProgramStagesEXT_Z_Z(pipeline, stages, program);
}
alias glUseShaderProgramEXT = glUseShaderProgramEXT_Z_Z;
__gshared glUseShaderProgramEXT_Z_Z = function void (GLenum type, GLuint program) { glUseShaderProgramEXT_Z_Z_loader(type, program); };
private void glUseShaderProgramEXT_Z_Z_loader (GLenum type, GLuint program) {
  *cast(void**)&glUseShaderProgramEXT_Z_Z = glbindGetProcAddress(`glUseShaderProgramEXT`);
  if (*cast(void**)&glUseShaderProgramEXT_Z_Z is null) assert(0, `OpenGL function 'glUseShaderProgramEXT' not found!`);
  glUseShaderProgramEXT_Z_Z(type, program);
}
alias glVDPAUFiniNV = glVDPAUFiniNV_Z_Z;
__gshared glVDPAUFiniNV_Z_Z = function void () { glVDPAUFiniNV_Z_Z_loader(); };
private void glVDPAUFiniNV_Z_Z_loader () {
  *cast(void**)&glVDPAUFiniNV_Z_Z = glbindGetProcAddress(`glVDPAUFiniNV`);
  if (*cast(void**)&glVDPAUFiniNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUFiniNV' not found!`);
  glVDPAUFiniNV_Z_Z();
}
alias glVDPAUGetSurfaceivNV = glVDPAUGetSurfaceivNV_Z_Z;
__gshared glVDPAUGetSurfaceivNV_Z_Z = function void (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { glVDPAUGetSurfaceivNV_Z_Z_loader(surface, pname, bufSize, length, values); };
private void glVDPAUGetSurfaceivNV_Z_Z_loader (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  *cast(void**)&glVDPAUGetSurfaceivNV_Z_Z = glbindGetProcAddress(`glVDPAUGetSurfaceivNV`);
  if (*cast(void**)&glVDPAUGetSurfaceivNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUGetSurfaceivNV' not found!`);
  glVDPAUGetSurfaceivNV_Z_Z(surface, pname, bufSize, length, values);
}
alias glVDPAUInitNV = glVDPAUInitNV_Z_Z;
__gshared glVDPAUInitNV_Z_Z = function void (const(void)* vdpDevice, const(void)* getProcAddress) { glVDPAUInitNV_Z_Z_loader(vdpDevice, getProcAddress); };
private void glVDPAUInitNV_Z_Z_loader (const(void)* vdpDevice, const(void)* getProcAddress) {
  *cast(void**)&glVDPAUInitNV_Z_Z = glbindGetProcAddress(`glVDPAUInitNV`);
  if (*cast(void**)&glVDPAUInitNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUInitNV' not found!`);
  glVDPAUInitNV_Z_Z(vdpDevice, getProcAddress);
}
alias glVDPAUIsSurfaceNV = glVDPAUIsSurfaceNV_Z_Z;
__gshared glVDPAUIsSurfaceNV_Z_Z = function GLboolean (GLvdpauSurfaceNV surface) { return glVDPAUIsSurfaceNV_Z_Z_loader(surface); };
private GLboolean glVDPAUIsSurfaceNV_Z_Z_loader (GLvdpauSurfaceNV surface) {
  *cast(void**)&glVDPAUIsSurfaceNV_Z_Z = glbindGetProcAddress(`glVDPAUIsSurfaceNV`);
  if (*cast(void**)&glVDPAUIsSurfaceNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUIsSurfaceNV' not found!`);
  return glVDPAUIsSurfaceNV_Z_Z(surface);
}
alias glVDPAUMapSurfacesNV = glVDPAUMapSurfacesNV_Z_Z;
__gshared glVDPAUMapSurfacesNV_Z_Z = function void (GLsizei numSurfaces, const(GLvdpauSurfaceNV)* surfaces) { glVDPAUMapSurfacesNV_Z_Z_loader(numSurfaces, surfaces); };
private void glVDPAUMapSurfacesNV_Z_Z_loader (GLsizei numSurfaces, const(GLvdpauSurfaceNV)* surfaces) {
  *cast(void**)&glVDPAUMapSurfacesNV_Z_Z = glbindGetProcAddress(`glVDPAUMapSurfacesNV`);
  if (*cast(void**)&glVDPAUMapSurfacesNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUMapSurfacesNV' not found!`);
  glVDPAUMapSurfacesNV_Z_Z(numSurfaces, surfaces);
}
alias glVDPAURegisterOutputSurfaceNV = glVDPAURegisterOutputSurfaceNV_Z_Z;
__gshared glVDPAURegisterOutputSurfaceNV_Z_Z = function GLvdpauSurfaceNV (const(void)* vdpSurface, GLenum target, GLsizei numTextureNames, const(GLuint)* textureNames) { return glVDPAURegisterOutputSurfaceNV_Z_Z_loader(vdpSurface, target, numTextureNames, textureNames); };
private GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV_Z_Z_loader (const(void)* vdpSurface, GLenum target, GLsizei numTextureNames, const(GLuint)* textureNames) {
  *cast(void**)&glVDPAURegisterOutputSurfaceNV_Z_Z = glbindGetProcAddress(`glVDPAURegisterOutputSurfaceNV`);
  if (*cast(void**)&glVDPAURegisterOutputSurfaceNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAURegisterOutputSurfaceNV' not found!`);
  return glVDPAURegisterOutputSurfaceNV_Z_Z(vdpSurface, target, numTextureNames, textureNames);
}
alias glVDPAURegisterVideoSurfaceNV = glVDPAURegisterVideoSurfaceNV_Z_Z;
__gshared glVDPAURegisterVideoSurfaceNV_Z_Z = function GLvdpauSurfaceNV (const(void)* vdpSurface, GLenum target, GLsizei numTextureNames, const(GLuint)* textureNames) { return glVDPAURegisterVideoSurfaceNV_Z_Z_loader(vdpSurface, target, numTextureNames, textureNames); };
private GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV_Z_Z_loader (const(void)* vdpSurface, GLenum target, GLsizei numTextureNames, const(GLuint)* textureNames) {
  *cast(void**)&glVDPAURegisterVideoSurfaceNV_Z_Z = glbindGetProcAddress(`glVDPAURegisterVideoSurfaceNV`);
  if (*cast(void**)&glVDPAURegisterVideoSurfaceNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAURegisterVideoSurfaceNV' not found!`);
  return glVDPAURegisterVideoSurfaceNV_Z_Z(vdpSurface, target, numTextureNames, textureNames);
}
alias glVDPAUSurfaceAccessNV = glVDPAUSurfaceAccessNV_Z_Z;
__gshared glVDPAUSurfaceAccessNV_Z_Z = function void (GLvdpauSurfaceNV surface, GLenum access) { glVDPAUSurfaceAccessNV_Z_Z_loader(surface, access); };
private void glVDPAUSurfaceAccessNV_Z_Z_loader (GLvdpauSurfaceNV surface, GLenum access) {
  *cast(void**)&glVDPAUSurfaceAccessNV_Z_Z = glbindGetProcAddress(`glVDPAUSurfaceAccessNV`);
  if (*cast(void**)&glVDPAUSurfaceAccessNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUSurfaceAccessNV' not found!`);
  glVDPAUSurfaceAccessNV_Z_Z(surface, access);
}
alias glVDPAUUnmapSurfacesNV = glVDPAUUnmapSurfacesNV_Z_Z;
__gshared glVDPAUUnmapSurfacesNV_Z_Z = function void (GLsizei numSurface, const(GLvdpauSurfaceNV)* surfaces) { glVDPAUUnmapSurfacesNV_Z_Z_loader(numSurface, surfaces); };
private void glVDPAUUnmapSurfacesNV_Z_Z_loader (GLsizei numSurface, const(GLvdpauSurfaceNV)* surfaces) {
  *cast(void**)&glVDPAUUnmapSurfacesNV_Z_Z = glbindGetProcAddress(`glVDPAUUnmapSurfacesNV`);
  if (*cast(void**)&glVDPAUUnmapSurfacesNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUUnmapSurfacesNV' not found!`);
  glVDPAUUnmapSurfacesNV_Z_Z(numSurface, surfaces);
}
alias glVDPAUUnregisterSurfaceNV = glVDPAUUnregisterSurfaceNV_Z_Z;
__gshared glVDPAUUnregisterSurfaceNV_Z_Z = function void (GLvdpauSurfaceNV surface) { glVDPAUUnregisterSurfaceNV_Z_Z_loader(surface); };
private void glVDPAUUnregisterSurfaceNV_Z_Z_loader (GLvdpauSurfaceNV surface) {
  *cast(void**)&glVDPAUUnregisterSurfaceNV_Z_Z = glbindGetProcAddress(`glVDPAUUnregisterSurfaceNV`);
  if (*cast(void**)&glVDPAUUnregisterSurfaceNV_Z_Z is null) assert(0, `OpenGL function 'glVDPAUUnregisterSurfaceNV' not found!`);
  glVDPAUUnregisterSurfaceNV_Z_Z(surface);
}
alias glValidateProgram = glValidateProgram_Z_Z;
__gshared glValidateProgram_Z_Z = function void (GLuint program) { glValidateProgram_Z_Z_loader(program); };
private void glValidateProgram_Z_Z_loader (GLuint program) {
  *cast(void**)&glValidateProgram_Z_Z = glbindGetProcAddress(`glValidateProgram`);
  if (*cast(void**)&glValidateProgram_Z_Z is null) assert(0, `OpenGL function 'glValidateProgram' not found!`);
  glValidateProgram_Z_Z(program);
}
alias glValidateProgramARB = glValidateProgramARB_Z_Z;
__gshared glValidateProgramARB_Z_Z = function void (GLhandleARB programObj) { glValidateProgramARB_Z_Z_loader(programObj); };
private void glValidateProgramARB_Z_Z_loader (GLhandleARB programObj) {
  *cast(void**)&glValidateProgramARB_Z_Z = glbindGetProcAddress(`glValidateProgramARB`);
  if (*cast(void**)&glValidateProgramARB_Z_Z is null) assert(0, `OpenGL function 'glValidateProgramARB' not found!`);
  glValidateProgramARB_Z_Z(programObj);
}
alias glValidateProgramPipeline = glValidateProgramPipeline_Z_Z;
__gshared glValidateProgramPipeline_Z_Z = function void (GLuint pipeline) { glValidateProgramPipeline_Z_Z_loader(pipeline); };
private void glValidateProgramPipeline_Z_Z_loader (GLuint pipeline) {
  *cast(void**)&glValidateProgramPipeline_Z_Z = glbindGetProcAddress(`glValidateProgramPipeline`);
  if (*cast(void**)&glValidateProgramPipeline_Z_Z is null) assert(0, `OpenGL function 'glValidateProgramPipeline' not found!`);
  glValidateProgramPipeline_Z_Z(pipeline);
}
alias glValidateProgramPipelineEXT = glValidateProgramPipelineEXT_Z_Z;
__gshared glValidateProgramPipelineEXT_Z_Z = function void (GLuint pipeline) { glValidateProgramPipelineEXT_Z_Z_loader(pipeline); };
private void glValidateProgramPipelineEXT_Z_Z_loader (GLuint pipeline) {
  *cast(void**)&glValidateProgramPipelineEXT_Z_Z = glbindGetProcAddress(`glValidateProgramPipelineEXT`);
  if (*cast(void**)&glValidateProgramPipelineEXT_Z_Z is null) assert(0, `OpenGL function 'glValidateProgramPipelineEXT' not found!`);
  glValidateProgramPipelineEXT_Z_Z(pipeline);
}
alias glVariantArrayObjectATI = glVariantArrayObjectATI_Z_Z;
__gshared glVariantArrayObjectATI_Z_Z = function void (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { glVariantArrayObjectATI_Z_Z_loader(id, type, stride, buffer, offset); };
private void glVariantArrayObjectATI_Z_Z_loader (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  *cast(void**)&glVariantArrayObjectATI_Z_Z = glbindGetProcAddress(`glVariantArrayObjectATI`);
  if (*cast(void**)&glVariantArrayObjectATI_Z_Z is null) assert(0, `OpenGL function 'glVariantArrayObjectATI' not found!`);
  glVariantArrayObjectATI_Z_Z(id, type, stride, buffer, offset);
}
alias glVariantPointerEXT = glVariantPointerEXT_Z_Z;
__gshared glVariantPointerEXT_Z_Z = function void (GLuint id, GLenum type, GLuint stride, const(void)* addr) { glVariantPointerEXT_Z_Z_loader(id, type, stride, addr); };
private void glVariantPointerEXT_Z_Z_loader (GLuint id, GLenum type, GLuint stride, const(void)* addr) {
  *cast(void**)&glVariantPointerEXT_Z_Z = glbindGetProcAddress(`glVariantPointerEXT`);
  if (*cast(void**)&glVariantPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantPointerEXT' not found!`);
  glVariantPointerEXT_Z_Z(id, type, stride, addr);
}
alias glVariantbvEXT = glVariantbvEXT_Z_Z;
__gshared glVariantbvEXT_Z_Z = function void (GLuint id, const(GLbyte)* addr) { glVariantbvEXT_Z_Z_loader(id, addr); };
private void glVariantbvEXT_Z_Z_loader (GLuint id, const(GLbyte)* addr) {
  *cast(void**)&glVariantbvEXT_Z_Z = glbindGetProcAddress(`glVariantbvEXT`);
  if (*cast(void**)&glVariantbvEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantbvEXT' not found!`);
  glVariantbvEXT_Z_Z(id, addr);
}
alias glVariantdvEXT = glVariantdvEXT_Z_Z;
__gshared glVariantdvEXT_Z_Z = function void (GLuint id, const(GLdouble)* addr) { glVariantdvEXT_Z_Z_loader(id, addr); };
private void glVariantdvEXT_Z_Z_loader (GLuint id, const(GLdouble)* addr) {
  *cast(void**)&glVariantdvEXT_Z_Z = glbindGetProcAddress(`glVariantdvEXT`);
  if (*cast(void**)&glVariantdvEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantdvEXT' not found!`);
  glVariantdvEXT_Z_Z(id, addr);
}
alias glVariantfvEXT = glVariantfvEXT_Z_Z;
__gshared glVariantfvEXT_Z_Z = function void (GLuint id, const(GLfloat)* addr) { glVariantfvEXT_Z_Z_loader(id, addr); };
private void glVariantfvEXT_Z_Z_loader (GLuint id, const(GLfloat)* addr) {
  *cast(void**)&glVariantfvEXT_Z_Z = glbindGetProcAddress(`glVariantfvEXT`);
  if (*cast(void**)&glVariantfvEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantfvEXT' not found!`);
  glVariantfvEXT_Z_Z(id, addr);
}
alias glVariantivEXT = glVariantivEXT_Z_Z;
__gshared glVariantivEXT_Z_Z = function void (GLuint id, const(GLint)* addr) { glVariantivEXT_Z_Z_loader(id, addr); };
private void glVariantivEXT_Z_Z_loader (GLuint id, const(GLint)* addr) {
  *cast(void**)&glVariantivEXT_Z_Z = glbindGetProcAddress(`glVariantivEXT`);
  if (*cast(void**)&glVariantivEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantivEXT' not found!`);
  glVariantivEXT_Z_Z(id, addr);
}
alias glVariantsvEXT = glVariantsvEXT_Z_Z;
__gshared glVariantsvEXT_Z_Z = function void (GLuint id, const(GLshort)* addr) { glVariantsvEXT_Z_Z_loader(id, addr); };
private void glVariantsvEXT_Z_Z_loader (GLuint id, const(GLshort)* addr) {
  *cast(void**)&glVariantsvEXT_Z_Z = glbindGetProcAddress(`glVariantsvEXT`);
  if (*cast(void**)&glVariantsvEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantsvEXT' not found!`);
  glVariantsvEXT_Z_Z(id, addr);
}
alias glVariantubvEXT = glVariantubvEXT_Z_Z;
__gshared glVariantubvEXT_Z_Z = function void (GLuint id, const(GLubyte)* addr) { glVariantubvEXT_Z_Z_loader(id, addr); };
private void glVariantubvEXT_Z_Z_loader (GLuint id, const(GLubyte)* addr) {
  *cast(void**)&glVariantubvEXT_Z_Z = glbindGetProcAddress(`glVariantubvEXT`);
  if (*cast(void**)&glVariantubvEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantubvEXT' not found!`);
  glVariantubvEXT_Z_Z(id, addr);
}
alias glVariantuivEXT = glVariantuivEXT_Z_Z;
__gshared glVariantuivEXT_Z_Z = function void (GLuint id, const(GLuint)* addr) { glVariantuivEXT_Z_Z_loader(id, addr); };
private void glVariantuivEXT_Z_Z_loader (GLuint id, const(GLuint)* addr) {
  *cast(void**)&glVariantuivEXT_Z_Z = glbindGetProcAddress(`glVariantuivEXT`);
  if (*cast(void**)&glVariantuivEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantuivEXT' not found!`);
  glVariantuivEXT_Z_Z(id, addr);
}
alias glVariantusvEXT = glVariantusvEXT_Z_Z;
__gshared glVariantusvEXT_Z_Z = function void (GLuint id, const(GLushort)* addr) { glVariantusvEXT_Z_Z_loader(id, addr); };
private void glVariantusvEXT_Z_Z_loader (GLuint id, const(GLushort)* addr) {
  *cast(void**)&glVariantusvEXT_Z_Z = glbindGetProcAddress(`glVariantusvEXT`);
  if (*cast(void**)&glVariantusvEXT_Z_Z is null) assert(0, `OpenGL function 'glVariantusvEXT' not found!`);
  glVariantusvEXT_Z_Z(id, addr);
}
alias glVertex2bOES = glVertex2bOES_Z_Z;
__gshared glVertex2bOES_Z_Z = function void (GLbyte x, GLbyte y) { glVertex2bOES_Z_Z_loader(x, y); };
private void glVertex2bOES_Z_Z_loader (GLbyte x, GLbyte y) {
  *cast(void**)&glVertex2bOES_Z_Z = glbindGetProcAddress(`glVertex2bOES`);
  if (*cast(void**)&glVertex2bOES_Z_Z is null) assert(0, `OpenGL function 'glVertex2bOES' not found!`);
  glVertex2bOES_Z_Z(x, y);
}
alias glVertex2bvOES = glVertex2bvOES_Z_Z;
__gshared glVertex2bvOES_Z_Z = function void (const(GLbyte)* coords) { glVertex2bvOES_Z_Z_loader(coords); };
private void glVertex2bvOES_Z_Z_loader (const(GLbyte)* coords) {
  *cast(void**)&glVertex2bvOES_Z_Z = glbindGetProcAddress(`glVertex2bvOES`);
  if (*cast(void**)&glVertex2bvOES_Z_Z is null) assert(0, `OpenGL function 'glVertex2bvOES' not found!`);
  glVertex2bvOES_Z_Z(coords);
}
alias glVertex2d = glVertex2d_Z_Z;
__gshared glVertex2d_Z_Z = function void (GLdouble x, GLdouble y) { glVertex2d_Z_Z_loader(x, y); };
private void glVertex2d_Z_Z_loader (GLdouble x, GLdouble y) {
  *cast(void**)&glVertex2d_Z_Z = glbindGetProcAddress(`glVertex2d`);
  if (*cast(void**)&glVertex2d_Z_Z is null) assert(0, `OpenGL function 'glVertex2d' not found!`);
  glVertex2d_Z_Z(x, y);
}
alias glVertex2dv = glVertex2dv_Z_Z;
__gshared glVertex2dv_Z_Z = function void (const(GLdouble)* v) { glVertex2dv_Z_Z_loader(v); };
private void glVertex2dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glVertex2dv_Z_Z = glbindGetProcAddress(`glVertex2dv`);
  if (*cast(void**)&glVertex2dv_Z_Z is null) assert(0, `OpenGL function 'glVertex2dv' not found!`);
  glVertex2dv_Z_Z(v);
}
alias glVertex2f = glVertex2f_Z_Z;
__gshared glVertex2f_Z_Z = function void (GLfloat x, GLfloat y) { glVertex2f_Z_Z_loader(x, y); };
private void glVertex2f_Z_Z_loader (GLfloat x, GLfloat y) {
  *cast(void**)&glVertex2f_Z_Z = glbindGetProcAddress(`glVertex2f`);
  if (*cast(void**)&glVertex2f_Z_Z is null) assert(0, `OpenGL function 'glVertex2f' not found!`);
  glVertex2f_Z_Z(x, y);
}
alias glVertex2fv = glVertex2fv_Z_Z;
__gshared glVertex2fv_Z_Z = function void (const(GLfloat)* v) { glVertex2fv_Z_Z_loader(v); };
private void glVertex2fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glVertex2fv_Z_Z = glbindGetProcAddress(`glVertex2fv`);
  if (*cast(void**)&glVertex2fv_Z_Z is null) assert(0, `OpenGL function 'glVertex2fv' not found!`);
  glVertex2fv_Z_Z(v);
}
alias glVertex2hNV = glVertex2hNV_Z_Z;
__gshared glVertex2hNV_Z_Z = function void (GLhalfNV x, GLhalfNV y) { glVertex2hNV_Z_Z_loader(x, y); };
private void glVertex2hNV_Z_Z_loader (GLhalfNV x, GLhalfNV y) {
  *cast(void**)&glVertex2hNV_Z_Z = glbindGetProcAddress(`glVertex2hNV`);
  if (*cast(void**)&glVertex2hNV_Z_Z is null) assert(0, `OpenGL function 'glVertex2hNV' not found!`);
  glVertex2hNV_Z_Z(x, y);
}
alias glVertex2hvNV = glVertex2hvNV_Z_Z;
__gshared glVertex2hvNV_Z_Z = function void (const(GLhalfNV)* v) { glVertex2hvNV_Z_Z_loader(v); };
private void glVertex2hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glVertex2hvNV_Z_Z = glbindGetProcAddress(`glVertex2hvNV`);
  if (*cast(void**)&glVertex2hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertex2hvNV' not found!`);
  glVertex2hvNV_Z_Z(v);
}
alias glVertex2i = glVertex2i_Z_Z;
__gshared glVertex2i_Z_Z = function void (GLint x, GLint y) { glVertex2i_Z_Z_loader(x, y); };
private void glVertex2i_Z_Z_loader (GLint x, GLint y) {
  *cast(void**)&glVertex2i_Z_Z = glbindGetProcAddress(`glVertex2i`);
  if (*cast(void**)&glVertex2i_Z_Z is null) assert(0, `OpenGL function 'glVertex2i' not found!`);
  glVertex2i_Z_Z(x, y);
}
alias glVertex2iv = glVertex2iv_Z_Z;
__gshared glVertex2iv_Z_Z = function void (const(GLint)* v) { glVertex2iv_Z_Z_loader(v); };
private void glVertex2iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glVertex2iv_Z_Z = glbindGetProcAddress(`glVertex2iv`);
  if (*cast(void**)&glVertex2iv_Z_Z is null) assert(0, `OpenGL function 'glVertex2iv' not found!`);
  glVertex2iv_Z_Z(v);
}
alias glVertex2s = glVertex2s_Z_Z;
__gshared glVertex2s_Z_Z = function void (GLshort x, GLshort y) { glVertex2s_Z_Z_loader(x, y); };
private void glVertex2s_Z_Z_loader (GLshort x, GLshort y) {
  *cast(void**)&glVertex2s_Z_Z = glbindGetProcAddress(`glVertex2s`);
  if (*cast(void**)&glVertex2s_Z_Z is null) assert(0, `OpenGL function 'glVertex2s' not found!`);
  glVertex2s_Z_Z(x, y);
}
alias glVertex2sv = glVertex2sv_Z_Z;
__gshared glVertex2sv_Z_Z = function void (const(GLshort)* v) { glVertex2sv_Z_Z_loader(v); };
private void glVertex2sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glVertex2sv_Z_Z = glbindGetProcAddress(`glVertex2sv`);
  if (*cast(void**)&glVertex2sv_Z_Z is null) assert(0, `OpenGL function 'glVertex2sv' not found!`);
  glVertex2sv_Z_Z(v);
}
alias glVertex2xOES = glVertex2xOES_Z_Z;
__gshared glVertex2xOES_Z_Z = function void (GLfixed x) { glVertex2xOES_Z_Z_loader(x); };
private void glVertex2xOES_Z_Z_loader (GLfixed x) {
  *cast(void**)&glVertex2xOES_Z_Z = glbindGetProcAddress(`glVertex2xOES`);
  if (*cast(void**)&glVertex2xOES_Z_Z is null) assert(0, `OpenGL function 'glVertex2xOES' not found!`);
  glVertex2xOES_Z_Z(x);
}
alias glVertex2xvOES = glVertex2xvOES_Z_Z;
__gshared glVertex2xvOES_Z_Z = function void (const(GLfixed)* coords) { glVertex2xvOES_Z_Z_loader(coords); };
private void glVertex2xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glVertex2xvOES_Z_Z = glbindGetProcAddress(`glVertex2xvOES`);
  if (*cast(void**)&glVertex2xvOES_Z_Z is null) assert(0, `OpenGL function 'glVertex2xvOES' not found!`);
  glVertex2xvOES_Z_Z(coords);
}
alias glVertex3bOES = glVertex3bOES_Z_Z;
__gshared glVertex3bOES_Z_Z = function void (GLbyte x, GLbyte y, GLbyte z) { glVertex3bOES_Z_Z_loader(x, y, z); };
private void glVertex3bOES_Z_Z_loader (GLbyte x, GLbyte y, GLbyte z) {
  *cast(void**)&glVertex3bOES_Z_Z = glbindGetProcAddress(`glVertex3bOES`);
  if (*cast(void**)&glVertex3bOES_Z_Z is null) assert(0, `OpenGL function 'glVertex3bOES' not found!`);
  glVertex3bOES_Z_Z(x, y, z);
}
alias glVertex3bvOES = glVertex3bvOES_Z_Z;
__gshared glVertex3bvOES_Z_Z = function void (const(GLbyte)* coords) { glVertex3bvOES_Z_Z_loader(coords); };
private void glVertex3bvOES_Z_Z_loader (const(GLbyte)* coords) {
  *cast(void**)&glVertex3bvOES_Z_Z = glbindGetProcAddress(`glVertex3bvOES`);
  if (*cast(void**)&glVertex3bvOES_Z_Z is null) assert(0, `OpenGL function 'glVertex3bvOES' not found!`);
  glVertex3bvOES_Z_Z(coords);
}
alias glVertex3d = glVertex3d_Z_Z;
__gshared glVertex3d_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z) { glVertex3d_Z_Z_loader(x, y, z); };
private void glVertex3d_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glVertex3d_Z_Z = glbindGetProcAddress(`glVertex3d`);
  if (*cast(void**)&glVertex3d_Z_Z is null) assert(0, `OpenGL function 'glVertex3d' not found!`);
  glVertex3d_Z_Z(x, y, z);
}
alias glVertex3dv = glVertex3dv_Z_Z;
__gshared glVertex3dv_Z_Z = function void (const(GLdouble)* v) { glVertex3dv_Z_Z_loader(v); };
private void glVertex3dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glVertex3dv_Z_Z = glbindGetProcAddress(`glVertex3dv`);
  if (*cast(void**)&glVertex3dv_Z_Z is null) assert(0, `OpenGL function 'glVertex3dv' not found!`);
  glVertex3dv_Z_Z(v);
}
alias glVertex3f = glVertex3f_Z_Z;
__gshared glVertex3f_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z) { glVertex3f_Z_Z_loader(x, y, z); };
private void glVertex3f_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glVertex3f_Z_Z = glbindGetProcAddress(`glVertex3f`);
  if (*cast(void**)&glVertex3f_Z_Z is null) assert(0, `OpenGL function 'glVertex3f' not found!`);
  glVertex3f_Z_Z(x, y, z);
}
alias glVertex3fv = glVertex3fv_Z_Z;
__gshared glVertex3fv_Z_Z = function void (const(GLfloat)* v) { glVertex3fv_Z_Z_loader(v); };
private void glVertex3fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glVertex3fv_Z_Z = glbindGetProcAddress(`glVertex3fv`);
  if (*cast(void**)&glVertex3fv_Z_Z is null) assert(0, `OpenGL function 'glVertex3fv' not found!`);
  glVertex3fv_Z_Z(v);
}
alias glVertex3hNV = glVertex3hNV_Z_Z;
__gshared glVertex3hNV_Z_Z = function void (GLhalfNV x, GLhalfNV y, GLhalfNV z) { glVertex3hNV_Z_Z_loader(x, y, z); };
private void glVertex3hNV_Z_Z_loader (GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  *cast(void**)&glVertex3hNV_Z_Z = glbindGetProcAddress(`glVertex3hNV`);
  if (*cast(void**)&glVertex3hNV_Z_Z is null) assert(0, `OpenGL function 'glVertex3hNV' not found!`);
  glVertex3hNV_Z_Z(x, y, z);
}
alias glVertex3hvNV = glVertex3hvNV_Z_Z;
__gshared glVertex3hvNV_Z_Z = function void (const(GLhalfNV)* v) { glVertex3hvNV_Z_Z_loader(v); };
private void glVertex3hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glVertex3hvNV_Z_Z = glbindGetProcAddress(`glVertex3hvNV`);
  if (*cast(void**)&glVertex3hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertex3hvNV' not found!`);
  glVertex3hvNV_Z_Z(v);
}
alias glVertex3i = glVertex3i_Z_Z;
__gshared glVertex3i_Z_Z = function void (GLint x, GLint y, GLint z) { glVertex3i_Z_Z_loader(x, y, z); };
private void glVertex3i_Z_Z_loader (GLint x, GLint y, GLint z) {
  *cast(void**)&glVertex3i_Z_Z = glbindGetProcAddress(`glVertex3i`);
  if (*cast(void**)&glVertex3i_Z_Z is null) assert(0, `OpenGL function 'glVertex3i' not found!`);
  glVertex3i_Z_Z(x, y, z);
}
alias glVertex3iv = glVertex3iv_Z_Z;
__gshared glVertex3iv_Z_Z = function void (const(GLint)* v) { glVertex3iv_Z_Z_loader(v); };
private void glVertex3iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glVertex3iv_Z_Z = glbindGetProcAddress(`glVertex3iv`);
  if (*cast(void**)&glVertex3iv_Z_Z is null) assert(0, `OpenGL function 'glVertex3iv' not found!`);
  glVertex3iv_Z_Z(v);
}
alias glVertex3s = glVertex3s_Z_Z;
__gshared glVertex3s_Z_Z = function void (GLshort x, GLshort y, GLshort z) { glVertex3s_Z_Z_loader(x, y, z); };
private void glVertex3s_Z_Z_loader (GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glVertex3s_Z_Z = glbindGetProcAddress(`glVertex3s`);
  if (*cast(void**)&glVertex3s_Z_Z is null) assert(0, `OpenGL function 'glVertex3s' not found!`);
  glVertex3s_Z_Z(x, y, z);
}
alias glVertex3sv = glVertex3sv_Z_Z;
__gshared glVertex3sv_Z_Z = function void (const(GLshort)* v) { glVertex3sv_Z_Z_loader(v); };
private void glVertex3sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glVertex3sv_Z_Z = glbindGetProcAddress(`glVertex3sv`);
  if (*cast(void**)&glVertex3sv_Z_Z is null) assert(0, `OpenGL function 'glVertex3sv' not found!`);
  glVertex3sv_Z_Z(v);
}
alias glVertex3xOES = glVertex3xOES_Z_Z;
__gshared glVertex3xOES_Z_Z = function void (GLfixed x, GLfixed y) { glVertex3xOES_Z_Z_loader(x, y); };
private void glVertex3xOES_Z_Z_loader (GLfixed x, GLfixed y) {
  *cast(void**)&glVertex3xOES_Z_Z = glbindGetProcAddress(`glVertex3xOES`);
  if (*cast(void**)&glVertex3xOES_Z_Z is null) assert(0, `OpenGL function 'glVertex3xOES' not found!`);
  glVertex3xOES_Z_Z(x, y);
}
alias glVertex3xvOES = glVertex3xvOES_Z_Z;
__gshared glVertex3xvOES_Z_Z = function void (const(GLfixed)* coords) { glVertex3xvOES_Z_Z_loader(coords); };
private void glVertex3xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glVertex3xvOES_Z_Z = glbindGetProcAddress(`glVertex3xvOES`);
  if (*cast(void**)&glVertex3xvOES_Z_Z is null) assert(0, `OpenGL function 'glVertex3xvOES' not found!`);
  glVertex3xvOES_Z_Z(coords);
}
alias glVertex4bOES = glVertex4bOES_Z_Z;
__gshared glVertex4bOES_Z_Z = function void (GLbyte x, GLbyte y, GLbyte z, GLbyte w) { glVertex4bOES_Z_Z_loader(x, y, z, w); };
private void glVertex4bOES_Z_Z_loader (GLbyte x, GLbyte y, GLbyte z, GLbyte w) {
  *cast(void**)&glVertex4bOES_Z_Z = glbindGetProcAddress(`glVertex4bOES`);
  if (*cast(void**)&glVertex4bOES_Z_Z is null) assert(0, `OpenGL function 'glVertex4bOES' not found!`);
  glVertex4bOES_Z_Z(x, y, z, w);
}
alias glVertex4bvOES = glVertex4bvOES_Z_Z;
__gshared glVertex4bvOES_Z_Z = function void (const(GLbyte)* coords) { glVertex4bvOES_Z_Z_loader(coords); };
private void glVertex4bvOES_Z_Z_loader (const(GLbyte)* coords) {
  *cast(void**)&glVertex4bvOES_Z_Z = glbindGetProcAddress(`glVertex4bvOES`);
  if (*cast(void**)&glVertex4bvOES_Z_Z is null) assert(0, `OpenGL function 'glVertex4bvOES' not found!`);
  glVertex4bvOES_Z_Z(coords);
}
alias glVertex4d = glVertex4d_Z_Z;
__gshared glVertex4d_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glVertex4d_Z_Z_loader(x, y, z, w); };
private void glVertex4d_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glVertex4d_Z_Z = glbindGetProcAddress(`glVertex4d`);
  if (*cast(void**)&glVertex4d_Z_Z is null) assert(0, `OpenGL function 'glVertex4d' not found!`);
  glVertex4d_Z_Z(x, y, z, w);
}
alias glVertex4dv = glVertex4dv_Z_Z;
__gshared glVertex4dv_Z_Z = function void (const(GLdouble)* v) { glVertex4dv_Z_Z_loader(v); };
private void glVertex4dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glVertex4dv_Z_Z = glbindGetProcAddress(`glVertex4dv`);
  if (*cast(void**)&glVertex4dv_Z_Z is null) assert(0, `OpenGL function 'glVertex4dv' not found!`);
  glVertex4dv_Z_Z(v);
}
alias glVertex4f = glVertex4f_Z_Z;
__gshared glVertex4f_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glVertex4f_Z_Z_loader(x, y, z, w); };
private void glVertex4f_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glVertex4f_Z_Z = glbindGetProcAddress(`glVertex4f`);
  if (*cast(void**)&glVertex4f_Z_Z is null) assert(0, `OpenGL function 'glVertex4f' not found!`);
  glVertex4f_Z_Z(x, y, z, w);
}
alias glVertex4fv = glVertex4fv_Z_Z;
__gshared glVertex4fv_Z_Z = function void (const(GLfloat)* v) { glVertex4fv_Z_Z_loader(v); };
private void glVertex4fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glVertex4fv_Z_Z = glbindGetProcAddress(`glVertex4fv`);
  if (*cast(void**)&glVertex4fv_Z_Z is null) assert(0, `OpenGL function 'glVertex4fv' not found!`);
  glVertex4fv_Z_Z(v);
}
alias glVertex4hNV = glVertex4hNV_Z_Z;
__gshared glVertex4hNV_Z_Z = function void (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { glVertex4hNV_Z_Z_loader(x, y, z, w); };
private void glVertex4hNV_Z_Z_loader (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  *cast(void**)&glVertex4hNV_Z_Z = glbindGetProcAddress(`glVertex4hNV`);
  if (*cast(void**)&glVertex4hNV_Z_Z is null) assert(0, `OpenGL function 'glVertex4hNV' not found!`);
  glVertex4hNV_Z_Z(x, y, z, w);
}
alias glVertex4hvNV = glVertex4hvNV_Z_Z;
__gshared glVertex4hvNV_Z_Z = function void (const(GLhalfNV)* v) { glVertex4hvNV_Z_Z_loader(v); };
private void glVertex4hvNV_Z_Z_loader (const(GLhalfNV)* v) {
  *cast(void**)&glVertex4hvNV_Z_Z = glbindGetProcAddress(`glVertex4hvNV`);
  if (*cast(void**)&glVertex4hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertex4hvNV' not found!`);
  glVertex4hvNV_Z_Z(v);
}
alias glVertex4i = glVertex4i_Z_Z;
__gshared glVertex4i_Z_Z = function void (GLint x, GLint y, GLint z, GLint w) { glVertex4i_Z_Z_loader(x, y, z, w); };
private void glVertex4i_Z_Z_loader (GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glVertex4i_Z_Z = glbindGetProcAddress(`glVertex4i`);
  if (*cast(void**)&glVertex4i_Z_Z is null) assert(0, `OpenGL function 'glVertex4i' not found!`);
  glVertex4i_Z_Z(x, y, z, w);
}
alias glVertex4iv = glVertex4iv_Z_Z;
__gshared glVertex4iv_Z_Z = function void (const(GLint)* v) { glVertex4iv_Z_Z_loader(v); };
private void glVertex4iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glVertex4iv_Z_Z = glbindGetProcAddress(`glVertex4iv`);
  if (*cast(void**)&glVertex4iv_Z_Z is null) assert(0, `OpenGL function 'glVertex4iv' not found!`);
  glVertex4iv_Z_Z(v);
}
alias glVertex4s = glVertex4s_Z_Z;
__gshared glVertex4s_Z_Z = function void (GLshort x, GLshort y, GLshort z, GLshort w) { glVertex4s_Z_Z_loader(x, y, z, w); };
private void glVertex4s_Z_Z_loader (GLshort x, GLshort y, GLshort z, GLshort w) {
  *cast(void**)&glVertex4s_Z_Z = glbindGetProcAddress(`glVertex4s`);
  if (*cast(void**)&glVertex4s_Z_Z is null) assert(0, `OpenGL function 'glVertex4s' not found!`);
  glVertex4s_Z_Z(x, y, z, w);
}
alias glVertex4sv = glVertex4sv_Z_Z;
__gshared glVertex4sv_Z_Z = function void (const(GLshort)* v) { glVertex4sv_Z_Z_loader(v); };
private void glVertex4sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glVertex4sv_Z_Z = glbindGetProcAddress(`glVertex4sv`);
  if (*cast(void**)&glVertex4sv_Z_Z is null) assert(0, `OpenGL function 'glVertex4sv' not found!`);
  glVertex4sv_Z_Z(v);
}
alias glVertex4xOES = glVertex4xOES_Z_Z;
__gshared glVertex4xOES_Z_Z = function void (GLfixed x, GLfixed y, GLfixed z) { glVertex4xOES_Z_Z_loader(x, y, z); };
private void glVertex4xOES_Z_Z_loader (GLfixed x, GLfixed y, GLfixed z) {
  *cast(void**)&glVertex4xOES_Z_Z = glbindGetProcAddress(`glVertex4xOES`);
  if (*cast(void**)&glVertex4xOES_Z_Z is null) assert(0, `OpenGL function 'glVertex4xOES' not found!`);
  glVertex4xOES_Z_Z(x, y, z);
}
alias glVertex4xvOES = glVertex4xvOES_Z_Z;
__gshared glVertex4xvOES_Z_Z = function void (const(GLfixed)* coords) { glVertex4xvOES_Z_Z_loader(coords); };
private void glVertex4xvOES_Z_Z_loader (const(GLfixed)* coords) {
  *cast(void**)&glVertex4xvOES_Z_Z = glbindGetProcAddress(`glVertex4xvOES`);
  if (*cast(void**)&glVertex4xvOES_Z_Z is null) assert(0, `OpenGL function 'glVertex4xvOES' not found!`);
  glVertex4xvOES_Z_Z(coords);
}
alias glVertexArrayAttribBinding = glVertexArrayAttribBinding_Z_Z;
__gshared glVertexArrayAttribBinding_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLuint bindingindex) { glVertexArrayAttribBinding_Z_Z_loader(vaobj, attribindex, bindingindex); };
private void glVertexArrayAttribBinding_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  *cast(void**)&glVertexArrayAttribBinding_Z_Z = glbindGetProcAddress(`glVertexArrayAttribBinding`);
  if (*cast(void**)&glVertexArrayAttribBinding_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribBinding' not found!`);
  glVertexArrayAttribBinding_Z_Z(vaobj, attribindex, bindingindex);
}
alias glVertexArrayAttribFormat = glVertexArrayAttribFormat_Z_Z;
__gshared glVertexArrayAttribFormat_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { glVertexArrayAttribFormat_Z_Z_loader(vaobj, attribindex, size, type, normalized, relativeoffset); };
private void glVertexArrayAttribFormat_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  *cast(void**)&glVertexArrayAttribFormat_Z_Z = glbindGetProcAddress(`glVertexArrayAttribFormat`);
  if (*cast(void**)&glVertexArrayAttribFormat_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribFormat' not found!`);
  glVertexArrayAttribFormat_Z_Z(vaobj, attribindex, size, type, normalized, relativeoffset);
}
alias glVertexArrayAttribIFormat = glVertexArrayAttribIFormat_Z_Z;
__gshared glVertexArrayAttribIFormat_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { glVertexArrayAttribIFormat_Z_Z_loader(vaobj, attribindex, size, type, relativeoffset); };
private void glVertexArrayAttribIFormat_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  *cast(void**)&glVertexArrayAttribIFormat_Z_Z = glbindGetProcAddress(`glVertexArrayAttribIFormat`);
  if (*cast(void**)&glVertexArrayAttribIFormat_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribIFormat' not found!`);
  glVertexArrayAttribIFormat_Z_Z(vaobj, attribindex, size, type, relativeoffset);
}
alias glVertexArrayAttribLFormat = glVertexArrayAttribLFormat_Z_Z;
__gshared glVertexArrayAttribLFormat_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { glVertexArrayAttribLFormat_Z_Z_loader(vaobj, attribindex, size, type, relativeoffset); };
private void glVertexArrayAttribLFormat_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  *cast(void**)&glVertexArrayAttribLFormat_Z_Z = glbindGetProcAddress(`glVertexArrayAttribLFormat`);
  if (*cast(void**)&glVertexArrayAttribLFormat_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayAttribLFormat' not found!`);
  glVertexArrayAttribLFormat_Z_Z(vaobj, attribindex, size, type, relativeoffset);
}
alias glVertexArrayBindVertexBufferEXT = glVertexArrayBindVertexBufferEXT_Z_Z;
__gshared glVertexArrayBindVertexBufferEXT_Z_Z = function void (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { glVertexArrayBindVertexBufferEXT_Z_Z_loader(vaobj, bindingindex, buffer, offset, stride); };
private void glVertexArrayBindVertexBufferEXT_Z_Z_loader (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  *cast(void**)&glVertexArrayBindVertexBufferEXT_Z_Z = glbindGetProcAddress(`glVertexArrayBindVertexBufferEXT`);
  if (*cast(void**)&glVertexArrayBindVertexBufferEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayBindVertexBufferEXT' not found!`);
  glVertexArrayBindVertexBufferEXT_Z_Z(vaobj, bindingindex, buffer, offset, stride);
}
alias glVertexArrayBindingDivisor = glVertexArrayBindingDivisor_Z_Z;
__gshared glVertexArrayBindingDivisor_Z_Z = function void (GLuint vaobj, GLuint bindingindex, GLuint divisor) { glVertexArrayBindingDivisor_Z_Z_loader(vaobj, bindingindex, divisor); };
private void glVertexArrayBindingDivisor_Z_Z_loader (GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  *cast(void**)&glVertexArrayBindingDivisor_Z_Z = glbindGetProcAddress(`glVertexArrayBindingDivisor`);
  if (*cast(void**)&glVertexArrayBindingDivisor_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayBindingDivisor' not found!`);
  glVertexArrayBindingDivisor_Z_Z(vaobj, bindingindex, divisor);
}
alias glVertexArrayColorOffsetEXT = glVertexArrayColorOffsetEXT_Z_Z;
__gshared glVertexArrayColorOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayColorOffsetEXT_Z_Z_loader(vaobj, buffer, size, type, stride, offset); };
private void glVertexArrayColorOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayColorOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayColorOffsetEXT`);
  if (*cast(void**)&glVertexArrayColorOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayColorOffsetEXT' not found!`);
  glVertexArrayColorOffsetEXT_Z_Z(vaobj, buffer, size, type, stride, offset);
}
alias glVertexArrayEdgeFlagOffsetEXT = glVertexArrayEdgeFlagOffsetEXT_Z_Z;
__gshared glVertexArrayEdgeFlagOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { glVertexArrayEdgeFlagOffsetEXT_Z_Z_loader(vaobj, buffer, stride, offset); };
private void glVertexArrayEdgeFlagOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayEdgeFlagOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayEdgeFlagOffsetEXT`);
  if (*cast(void**)&glVertexArrayEdgeFlagOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayEdgeFlagOffsetEXT' not found!`);
  glVertexArrayEdgeFlagOffsetEXT_Z_Z(vaobj, buffer, stride, offset);
}
alias glVertexArrayElementBuffer = glVertexArrayElementBuffer_Z_Z;
__gshared glVertexArrayElementBuffer_Z_Z = function void (GLuint vaobj, GLuint buffer) { glVertexArrayElementBuffer_Z_Z_loader(vaobj, buffer); };
private void glVertexArrayElementBuffer_Z_Z_loader (GLuint vaobj, GLuint buffer) {
  *cast(void**)&glVertexArrayElementBuffer_Z_Z = glbindGetProcAddress(`glVertexArrayElementBuffer`);
  if (*cast(void**)&glVertexArrayElementBuffer_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayElementBuffer' not found!`);
  glVertexArrayElementBuffer_Z_Z(vaobj, buffer);
}
alias glVertexArrayFogCoordOffsetEXT = glVertexArrayFogCoordOffsetEXT_Z_Z;
__gshared glVertexArrayFogCoordOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayFogCoordOffsetEXT_Z_Z_loader(vaobj, buffer, type, stride, offset); };
private void glVertexArrayFogCoordOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayFogCoordOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayFogCoordOffsetEXT`);
  if (*cast(void**)&glVertexArrayFogCoordOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayFogCoordOffsetEXT' not found!`);
  glVertexArrayFogCoordOffsetEXT_Z_Z(vaobj, buffer, type, stride, offset);
}
alias glVertexArrayIndexOffsetEXT = glVertexArrayIndexOffsetEXT_Z_Z;
__gshared glVertexArrayIndexOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayIndexOffsetEXT_Z_Z_loader(vaobj, buffer, type, stride, offset); };
private void glVertexArrayIndexOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayIndexOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayIndexOffsetEXT`);
  if (*cast(void**)&glVertexArrayIndexOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayIndexOffsetEXT' not found!`);
  glVertexArrayIndexOffsetEXT_Z_Z(vaobj, buffer, type, stride, offset);
}
alias glVertexArrayMultiTexCoordOffsetEXT = glVertexArrayMultiTexCoordOffsetEXT_Z_Z;
__gshared glVertexArrayMultiTexCoordOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayMultiTexCoordOffsetEXT_Z_Z_loader(vaobj, buffer, texunit, size, type, stride, offset); };
private void glVertexArrayMultiTexCoordOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayMultiTexCoordOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayMultiTexCoordOffsetEXT`);
  if (*cast(void**)&glVertexArrayMultiTexCoordOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayMultiTexCoordOffsetEXT' not found!`);
  glVertexArrayMultiTexCoordOffsetEXT_Z_Z(vaobj, buffer, texunit, size, type, stride, offset);
}
alias glVertexArrayNormalOffsetEXT = glVertexArrayNormalOffsetEXT_Z_Z;
__gshared glVertexArrayNormalOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayNormalOffsetEXT_Z_Z_loader(vaobj, buffer, type, stride, offset); };
private void glVertexArrayNormalOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayNormalOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayNormalOffsetEXT`);
  if (*cast(void**)&glVertexArrayNormalOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayNormalOffsetEXT' not found!`);
  glVertexArrayNormalOffsetEXT_Z_Z(vaobj, buffer, type, stride, offset);
}
alias glVertexArrayParameteriAPPLE = glVertexArrayParameteriAPPLE_Z_Z;
__gshared glVertexArrayParameteriAPPLE_Z_Z = function void (GLenum pname, GLint param) { glVertexArrayParameteriAPPLE_Z_Z_loader(pname, param); };
private void glVertexArrayParameteriAPPLE_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glVertexArrayParameteriAPPLE_Z_Z = glbindGetProcAddress(`glVertexArrayParameteriAPPLE`);
  if (*cast(void**)&glVertexArrayParameteriAPPLE_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayParameteriAPPLE' not found!`);
  glVertexArrayParameteriAPPLE_Z_Z(pname, param);
}
alias glVertexArrayRangeAPPLE = glVertexArrayRangeAPPLE_Z_Z;
__gshared glVertexArrayRangeAPPLE_Z_Z = function void (GLsizei length, void *pointer) { glVertexArrayRangeAPPLE_Z_Z_loader(length, pointer); };
private void glVertexArrayRangeAPPLE_Z_Z_loader (GLsizei length, void *pointer) {
  *cast(void**)&glVertexArrayRangeAPPLE_Z_Z = glbindGetProcAddress(`glVertexArrayRangeAPPLE`);
  if (*cast(void**)&glVertexArrayRangeAPPLE_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayRangeAPPLE' not found!`);
  glVertexArrayRangeAPPLE_Z_Z(length, pointer);
}
alias glVertexArrayRangeNV = glVertexArrayRangeNV_Z_Z;
__gshared glVertexArrayRangeNV_Z_Z = function void (GLsizei length, const(void)* pointer) { glVertexArrayRangeNV_Z_Z_loader(length, pointer); };
private void glVertexArrayRangeNV_Z_Z_loader (GLsizei length, const(void)* pointer) {
  *cast(void**)&glVertexArrayRangeNV_Z_Z = glbindGetProcAddress(`glVertexArrayRangeNV`);
  if (*cast(void**)&glVertexArrayRangeNV_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayRangeNV' not found!`);
  glVertexArrayRangeNV_Z_Z(length, pointer);
}
alias glVertexArraySecondaryColorOffsetEXT = glVertexArraySecondaryColorOffsetEXT_Z_Z;
__gshared glVertexArraySecondaryColorOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { glVertexArraySecondaryColorOffsetEXT_Z_Z_loader(vaobj, buffer, size, type, stride, offset); };
private void glVertexArraySecondaryColorOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArraySecondaryColorOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArraySecondaryColorOffsetEXT`);
  if (*cast(void**)&glVertexArraySecondaryColorOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArraySecondaryColorOffsetEXT' not found!`);
  glVertexArraySecondaryColorOffsetEXT_Z_Z(vaobj, buffer, size, type, stride, offset);
}
alias glVertexArrayTexCoordOffsetEXT = glVertexArrayTexCoordOffsetEXT_Z_Z;
__gshared glVertexArrayTexCoordOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayTexCoordOffsetEXT_Z_Z_loader(vaobj, buffer, size, type, stride, offset); };
private void glVertexArrayTexCoordOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayTexCoordOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayTexCoordOffsetEXT`);
  if (*cast(void**)&glVertexArrayTexCoordOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayTexCoordOffsetEXT' not found!`);
  glVertexArrayTexCoordOffsetEXT_Z_Z(vaobj, buffer, size, type, stride, offset);
}
alias glVertexArrayVertexAttribBindingEXT = glVertexArrayVertexAttribBindingEXT_Z_Z;
__gshared glVertexArrayVertexAttribBindingEXT_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLuint bindingindex) { glVertexArrayVertexAttribBindingEXT_Z_Z_loader(vaobj, attribindex, bindingindex); };
private void glVertexArrayVertexAttribBindingEXT_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  *cast(void**)&glVertexArrayVertexAttribBindingEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribBindingEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribBindingEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribBindingEXT' not found!`);
  glVertexArrayVertexAttribBindingEXT_Z_Z(vaobj, attribindex, bindingindex);
}
alias glVertexArrayVertexAttribDivisorEXT = glVertexArrayVertexAttribDivisorEXT_Z_Z;
__gshared glVertexArrayVertexAttribDivisorEXT_Z_Z = function void (GLuint vaobj, GLuint index, GLuint divisor) { glVertexArrayVertexAttribDivisorEXT_Z_Z_loader(vaobj, index, divisor); };
private void glVertexArrayVertexAttribDivisorEXT_Z_Z_loader (GLuint vaobj, GLuint index, GLuint divisor) {
  *cast(void**)&glVertexArrayVertexAttribDivisorEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribDivisorEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribDivisorEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribDivisorEXT' not found!`);
  glVertexArrayVertexAttribDivisorEXT_Z_Z(vaobj, index, divisor);
}
alias glVertexArrayVertexAttribFormatEXT = glVertexArrayVertexAttribFormatEXT_Z_Z;
__gshared glVertexArrayVertexAttribFormatEXT_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { glVertexArrayVertexAttribFormatEXT_Z_Z_loader(vaobj, attribindex, size, type, normalized, relativeoffset); };
private void glVertexArrayVertexAttribFormatEXT_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  *cast(void**)&glVertexArrayVertexAttribFormatEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribFormatEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribFormatEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribFormatEXT' not found!`);
  glVertexArrayVertexAttribFormatEXT_Z_Z(vaobj, attribindex, size, type, normalized, relativeoffset);
}
alias glVertexArrayVertexAttribIFormatEXT = glVertexArrayVertexAttribIFormatEXT_Z_Z;
__gshared glVertexArrayVertexAttribIFormatEXT_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { glVertexArrayVertexAttribIFormatEXT_Z_Z_loader(vaobj, attribindex, size, type, relativeoffset); };
private void glVertexArrayVertexAttribIFormatEXT_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  *cast(void**)&glVertexArrayVertexAttribIFormatEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribIFormatEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribIFormatEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIFormatEXT' not found!`);
  glVertexArrayVertexAttribIFormatEXT_Z_Z(vaobj, attribindex, size, type, relativeoffset);
}
alias glVertexArrayVertexAttribIOffsetEXT = glVertexArrayVertexAttribIOffsetEXT_Z_Z;
__gshared glVertexArrayVertexAttribIOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayVertexAttribIOffsetEXT_Z_Z_loader(vaobj, buffer, index, size, type, stride, offset); };
private void glVertexArrayVertexAttribIOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayVertexAttribIOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribIOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribIOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIOffsetEXT' not found!`);
  glVertexArrayVertexAttribIOffsetEXT_Z_Z(vaobj, buffer, index, size, type, stride, offset);
}
alias glVertexArrayVertexAttribLFormatEXT = glVertexArrayVertexAttribLFormatEXT_Z_Z;
__gshared glVertexArrayVertexAttribLFormatEXT_Z_Z = function void (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { glVertexArrayVertexAttribLFormatEXT_Z_Z_loader(vaobj, attribindex, size, type, relativeoffset); };
private void glVertexArrayVertexAttribLFormatEXT_Z_Z_loader (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  *cast(void**)&glVertexArrayVertexAttribLFormatEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribLFormatEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribLFormatEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLFormatEXT' not found!`);
  glVertexArrayVertexAttribLFormatEXT_Z_Z(vaobj, attribindex, size, type, relativeoffset);
}
alias glVertexArrayVertexAttribLOffsetEXT = glVertexArrayVertexAttribLOffsetEXT_Z_Z;
__gshared glVertexArrayVertexAttribLOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayVertexAttribLOffsetEXT_Z_Z_loader(vaobj, buffer, index, size, type, stride, offset); };
private void glVertexArrayVertexAttribLOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayVertexAttribLOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribLOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribLOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLOffsetEXT' not found!`);
  glVertexArrayVertexAttribLOffsetEXT_Z_Z(vaobj, buffer, index, size, type, stride, offset);
}
alias glVertexArrayVertexAttribOffsetEXT = glVertexArrayVertexAttribOffsetEXT_Z_Z;
__gshared glVertexArrayVertexAttribOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { glVertexArrayVertexAttribOffsetEXT_Z_Z_loader(vaobj, buffer, index, size, type, normalized, stride, offset); };
private void glVertexArrayVertexAttribOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayVertexAttribOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexAttribOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexAttribOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribOffsetEXT' not found!`);
  glVertexArrayVertexAttribOffsetEXT_Z_Z(vaobj, buffer, index, size, type, normalized, stride, offset);
}
alias glVertexArrayVertexBindingDivisorEXT = glVertexArrayVertexBindingDivisorEXT_Z_Z;
__gshared glVertexArrayVertexBindingDivisorEXT_Z_Z = function void (GLuint vaobj, GLuint bindingindex, GLuint divisor) { glVertexArrayVertexBindingDivisorEXT_Z_Z_loader(vaobj, bindingindex, divisor); };
private void glVertexArrayVertexBindingDivisorEXT_Z_Z_loader (GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  *cast(void**)&glVertexArrayVertexBindingDivisorEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexBindingDivisorEXT`);
  if (*cast(void**)&glVertexArrayVertexBindingDivisorEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexBindingDivisorEXT' not found!`);
  glVertexArrayVertexBindingDivisorEXT_Z_Z(vaobj, bindingindex, divisor);
}
alias glVertexArrayVertexBuffer = glVertexArrayVertexBuffer_Z_Z;
__gshared glVertexArrayVertexBuffer_Z_Z = function void (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { glVertexArrayVertexBuffer_Z_Z_loader(vaobj, bindingindex, buffer, offset, stride); };
private void glVertexArrayVertexBuffer_Z_Z_loader (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  *cast(void**)&glVertexArrayVertexBuffer_Z_Z = glbindGetProcAddress(`glVertexArrayVertexBuffer`);
  if (*cast(void**)&glVertexArrayVertexBuffer_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffer' not found!`);
  glVertexArrayVertexBuffer_Z_Z(vaobj, bindingindex, buffer, offset, stride);
}
alias glVertexArrayVertexBuffers = glVertexArrayVertexBuffers_Z_Z;
__gshared glVertexArrayVertexBuffers_Z_Z = function void (GLuint vaobj, GLuint first, GLsizei count, const(GLuint)* buffers, const(GLintptr)* offsets, const(GLsizei)* strides) { glVertexArrayVertexBuffers_Z_Z_loader(vaobj, first, count, buffers, offsets, strides); };
private void glVertexArrayVertexBuffers_Z_Z_loader (GLuint vaobj, GLuint first, GLsizei count, const(GLuint)* buffers, const(GLintptr)* offsets, const(GLsizei)* strides) {
  *cast(void**)&glVertexArrayVertexBuffers_Z_Z = glbindGetProcAddress(`glVertexArrayVertexBuffers`);
  if (*cast(void**)&glVertexArrayVertexBuffers_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffers' not found!`);
  glVertexArrayVertexBuffers_Z_Z(vaobj, first, count, buffers, offsets, strides);
}
alias glVertexArrayVertexOffsetEXT = glVertexArrayVertexOffsetEXT_Z_Z;
__gshared glVertexArrayVertexOffsetEXT_Z_Z = function void (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { glVertexArrayVertexOffsetEXT_Z_Z_loader(vaobj, buffer, size, type, stride, offset); };
private void glVertexArrayVertexOffsetEXT_Z_Z_loader (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  *cast(void**)&glVertexArrayVertexOffsetEXT_Z_Z = glbindGetProcAddress(`glVertexArrayVertexOffsetEXT`);
  if (*cast(void**)&glVertexArrayVertexOffsetEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexArrayVertexOffsetEXT' not found!`);
  glVertexArrayVertexOffsetEXT_Z_Z(vaobj, buffer, size, type, stride, offset);
}
alias glVertexAttrib1d = glVertexAttrib1d_Z_Z;
__gshared glVertexAttrib1d_Z_Z = function void (GLuint index, GLdouble x) { glVertexAttrib1d_Z_Z_loader(index, x); };
private void glVertexAttrib1d_Z_Z_loader (GLuint index, GLdouble x) {
  *cast(void**)&glVertexAttrib1d_Z_Z = glbindGetProcAddress(`glVertexAttrib1d`);
  if (*cast(void**)&glVertexAttrib1d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1d' not found!`);
  glVertexAttrib1d_Z_Z(index, x);
}
alias glVertexAttrib1dARB = glVertexAttrib1dARB_Z_Z;
__gshared glVertexAttrib1dARB_Z_Z = function void (GLuint index, GLdouble x) { glVertexAttrib1dARB_Z_Z_loader(index, x); };
private void glVertexAttrib1dARB_Z_Z_loader (GLuint index, GLdouble x) {
  *cast(void**)&glVertexAttrib1dARB_Z_Z = glbindGetProcAddress(`glVertexAttrib1dARB`);
  if (*cast(void**)&glVertexAttrib1dARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dARB' not found!`);
  glVertexAttrib1dARB_Z_Z(index, x);
}
alias glVertexAttrib1dNV = glVertexAttrib1dNV_Z_Z;
__gshared glVertexAttrib1dNV_Z_Z = function void (GLuint index, GLdouble x) { glVertexAttrib1dNV_Z_Z_loader(index, x); };
private void glVertexAttrib1dNV_Z_Z_loader (GLuint index, GLdouble x) {
  *cast(void**)&glVertexAttrib1dNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1dNV`);
  if (*cast(void**)&glVertexAttrib1dNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dNV' not found!`);
  glVertexAttrib1dNV_Z_Z(index, x);
}
alias glVertexAttrib1dv = glVertexAttrib1dv_Z_Z;
__gshared glVertexAttrib1dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib1dv_Z_Z_loader(index, v); };
private void glVertexAttrib1dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib1dv_Z_Z = glbindGetProcAddress(`glVertexAttrib1dv`);
  if (*cast(void**)&glVertexAttrib1dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dv' not found!`);
  glVertexAttrib1dv_Z_Z(index, v);
}
alias glVertexAttrib1dvARB = glVertexAttrib1dvARB_Z_Z;
__gshared glVertexAttrib1dvARB_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib1dvARB_Z_Z_loader(index, v); };
private void glVertexAttrib1dvARB_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib1dvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib1dvARB`);
  if (*cast(void**)&glVertexAttrib1dvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dvARB' not found!`);
  glVertexAttrib1dvARB_Z_Z(index, v);
}
alias glVertexAttrib1dvNV = glVertexAttrib1dvNV_Z_Z;
__gshared glVertexAttrib1dvNV_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib1dvNV_Z_Z_loader(index, v); };
private void glVertexAttrib1dvNV_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib1dvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1dvNV`);
  if (*cast(void**)&glVertexAttrib1dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1dvNV' not found!`);
  glVertexAttrib1dvNV_Z_Z(index, v);
}
alias glVertexAttrib1f = glVertexAttrib1f_Z_Z;
__gshared glVertexAttrib1f_Z_Z = function void (GLuint index, GLfloat x) { glVertexAttrib1f_Z_Z_loader(index, x); };
private void glVertexAttrib1f_Z_Z_loader (GLuint index, GLfloat x) {
  *cast(void**)&glVertexAttrib1f_Z_Z = glbindGetProcAddress(`glVertexAttrib1f`);
  if (*cast(void**)&glVertexAttrib1f_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1f' not found!`);
  glVertexAttrib1f_Z_Z(index, x);
}
alias glVertexAttrib1fARB = glVertexAttrib1fARB_Z_Z;
__gshared glVertexAttrib1fARB_Z_Z = function void (GLuint index, GLfloat x) { glVertexAttrib1fARB_Z_Z_loader(index, x); };
private void glVertexAttrib1fARB_Z_Z_loader (GLuint index, GLfloat x) {
  *cast(void**)&glVertexAttrib1fARB_Z_Z = glbindGetProcAddress(`glVertexAttrib1fARB`);
  if (*cast(void**)&glVertexAttrib1fARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fARB' not found!`);
  glVertexAttrib1fARB_Z_Z(index, x);
}
alias glVertexAttrib1fNV = glVertexAttrib1fNV_Z_Z;
__gshared glVertexAttrib1fNV_Z_Z = function void (GLuint index, GLfloat x) { glVertexAttrib1fNV_Z_Z_loader(index, x); };
private void glVertexAttrib1fNV_Z_Z_loader (GLuint index, GLfloat x) {
  *cast(void**)&glVertexAttrib1fNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1fNV`);
  if (*cast(void**)&glVertexAttrib1fNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fNV' not found!`);
  glVertexAttrib1fNV_Z_Z(index, x);
}
alias glVertexAttrib1fv = glVertexAttrib1fv_Z_Z;
__gshared glVertexAttrib1fv_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib1fv_Z_Z_loader(index, v); };
private void glVertexAttrib1fv_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib1fv_Z_Z = glbindGetProcAddress(`glVertexAttrib1fv`);
  if (*cast(void**)&glVertexAttrib1fv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fv' not found!`);
  glVertexAttrib1fv_Z_Z(index, v);
}
alias glVertexAttrib1fvARB = glVertexAttrib1fvARB_Z_Z;
__gshared glVertexAttrib1fvARB_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib1fvARB_Z_Z_loader(index, v); };
private void glVertexAttrib1fvARB_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib1fvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib1fvARB`);
  if (*cast(void**)&glVertexAttrib1fvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fvARB' not found!`);
  glVertexAttrib1fvARB_Z_Z(index, v);
}
alias glVertexAttrib1fvNV = glVertexAttrib1fvNV_Z_Z;
__gshared glVertexAttrib1fvNV_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib1fvNV_Z_Z_loader(index, v); };
private void glVertexAttrib1fvNV_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib1fvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1fvNV`);
  if (*cast(void**)&glVertexAttrib1fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1fvNV' not found!`);
  glVertexAttrib1fvNV_Z_Z(index, v);
}
alias glVertexAttrib1hNV = glVertexAttrib1hNV_Z_Z;
__gshared glVertexAttrib1hNV_Z_Z = function void (GLuint index, GLhalfNV x) { glVertexAttrib1hNV_Z_Z_loader(index, x); };
private void glVertexAttrib1hNV_Z_Z_loader (GLuint index, GLhalfNV x) {
  *cast(void**)&glVertexAttrib1hNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1hNV`);
  if (*cast(void**)&glVertexAttrib1hNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1hNV' not found!`);
  glVertexAttrib1hNV_Z_Z(index, x);
}
alias glVertexAttrib1hvNV = glVertexAttrib1hvNV_Z_Z;
__gshared glVertexAttrib1hvNV_Z_Z = function void (GLuint index, const(GLhalfNV)* v) { glVertexAttrib1hvNV_Z_Z_loader(index, v); };
private void glVertexAttrib1hvNV_Z_Z_loader (GLuint index, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttrib1hvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1hvNV`);
  if (*cast(void**)&glVertexAttrib1hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1hvNV' not found!`);
  glVertexAttrib1hvNV_Z_Z(index, v);
}
alias glVertexAttrib1s = glVertexAttrib1s_Z_Z;
__gshared glVertexAttrib1s_Z_Z = function void (GLuint index, GLshort x) { glVertexAttrib1s_Z_Z_loader(index, x); };
private void glVertexAttrib1s_Z_Z_loader (GLuint index, GLshort x) {
  *cast(void**)&glVertexAttrib1s_Z_Z = glbindGetProcAddress(`glVertexAttrib1s`);
  if (*cast(void**)&glVertexAttrib1s_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1s' not found!`);
  glVertexAttrib1s_Z_Z(index, x);
}
alias glVertexAttrib1sARB = glVertexAttrib1sARB_Z_Z;
__gshared glVertexAttrib1sARB_Z_Z = function void (GLuint index, GLshort x) { glVertexAttrib1sARB_Z_Z_loader(index, x); };
private void glVertexAttrib1sARB_Z_Z_loader (GLuint index, GLshort x) {
  *cast(void**)&glVertexAttrib1sARB_Z_Z = glbindGetProcAddress(`glVertexAttrib1sARB`);
  if (*cast(void**)&glVertexAttrib1sARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1sARB' not found!`);
  glVertexAttrib1sARB_Z_Z(index, x);
}
alias glVertexAttrib1sNV = glVertexAttrib1sNV_Z_Z;
__gshared glVertexAttrib1sNV_Z_Z = function void (GLuint index, GLshort x) { glVertexAttrib1sNV_Z_Z_loader(index, x); };
private void glVertexAttrib1sNV_Z_Z_loader (GLuint index, GLshort x) {
  *cast(void**)&glVertexAttrib1sNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1sNV`);
  if (*cast(void**)&glVertexAttrib1sNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1sNV' not found!`);
  glVertexAttrib1sNV_Z_Z(index, x);
}
alias glVertexAttrib1sv = glVertexAttrib1sv_Z_Z;
__gshared glVertexAttrib1sv_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib1sv_Z_Z_loader(index, v); };
private void glVertexAttrib1sv_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib1sv_Z_Z = glbindGetProcAddress(`glVertexAttrib1sv`);
  if (*cast(void**)&glVertexAttrib1sv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1sv' not found!`);
  glVertexAttrib1sv_Z_Z(index, v);
}
alias glVertexAttrib1svARB = glVertexAttrib1svARB_Z_Z;
__gshared glVertexAttrib1svARB_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib1svARB_Z_Z_loader(index, v); };
private void glVertexAttrib1svARB_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib1svARB_Z_Z = glbindGetProcAddress(`glVertexAttrib1svARB`);
  if (*cast(void**)&glVertexAttrib1svARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1svARB' not found!`);
  glVertexAttrib1svARB_Z_Z(index, v);
}
alias glVertexAttrib1svNV = glVertexAttrib1svNV_Z_Z;
__gshared glVertexAttrib1svNV_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib1svNV_Z_Z_loader(index, v); };
private void glVertexAttrib1svNV_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib1svNV_Z_Z = glbindGetProcAddress(`glVertexAttrib1svNV`);
  if (*cast(void**)&glVertexAttrib1svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib1svNV' not found!`);
  glVertexAttrib1svNV_Z_Z(index, v);
}
alias glVertexAttrib2d = glVertexAttrib2d_Z_Z;
__gshared glVertexAttrib2d_Z_Z = function void (GLuint index, GLdouble x, GLdouble y) { glVertexAttrib2d_Z_Z_loader(index, x, y); };
private void glVertexAttrib2d_Z_Z_loader (GLuint index, GLdouble x, GLdouble y) {
  *cast(void**)&glVertexAttrib2d_Z_Z = glbindGetProcAddress(`glVertexAttrib2d`);
  if (*cast(void**)&glVertexAttrib2d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2d' not found!`);
  glVertexAttrib2d_Z_Z(index, x, y);
}
alias glVertexAttrib2dARB = glVertexAttrib2dARB_Z_Z;
__gshared glVertexAttrib2dARB_Z_Z = function void (GLuint index, GLdouble x, GLdouble y) { glVertexAttrib2dARB_Z_Z_loader(index, x, y); };
private void glVertexAttrib2dARB_Z_Z_loader (GLuint index, GLdouble x, GLdouble y) {
  *cast(void**)&glVertexAttrib2dARB_Z_Z = glbindGetProcAddress(`glVertexAttrib2dARB`);
  if (*cast(void**)&glVertexAttrib2dARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dARB' not found!`);
  glVertexAttrib2dARB_Z_Z(index, x, y);
}
alias glVertexAttrib2dNV = glVertexAttrib2dNV_Z_Z;
__gshared glVertexAttrib2dNV_Z_Z = function void (GLuint index, GLdouble x, GLdouble y) { glVertexAttrib2dNV_Z_Z_loader(index, x, y); };
private void glVertexAttrib2dNV_Z_Z_loader (GLuint index, GLdouble x, GLdouble y) {
  *cast(void**)&glVertexAttrib2dNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2dNV`);
  if (*cast(void**)&glVertexAttrib2dNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dNV' not found!`);
  glVertexAttrib2dNV_Z_Z(index, x, y);
}
alias glVertexAttrib2dv = glVertexAttrib2dv_Z_Z;
__gshared glVertexAttrib2dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib2dv_Z_Z_loader(index, v); };
private void glVertexAttrib2dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib2dv_Z_Z = glbindGetProcAddress(`glVertexAttrib2dv`);
  if (*cast(void**)&glVertexAttrib2dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dv' not found!`);
  glVertexAttrib2dv_Z_Z(index, v);
}
alias glVertexAttrib2dvARB = glVertexAttrib2dvARB_Z_Z;
__gshared glVertexAttrib2dvARB_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib2dvARB_Z_Z_loader(index, v); };
private void glVertexAttrib2dvARB_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib2dvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib2dvARB`);
  if (*cast(void**)&glVertexAttrib2dvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dvARB' not found!`);
  glVertexAttrib2dvARB_Z_Z(index, v);
}
alias glVertexAttrib2dvNV = glVertexAttrib2dvNV_Z_Z;
__gshared glVertexAttrib2dvNV_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib2dvNV_Z_Z_loader(index, v); };
private void glVertexAttrib2dvNV_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib2dvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2dvNV`);
  if (*cast(void**)&glVertexAttrib2dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2dvNV' not found!`);
  glVertexAttrib2dvNV_Z_Z(index, v);
}
alias glVertexAttrib2f = glVertexAttrib2f_Z_Z;
__gshared glVertexAttrib2f_Z_Z = function void (GLuint index, GLfloat x, GLfloat y) { glVertexAttrib2f_Z_Z_loader(index, x, y); };
private void glVertexAttrib2f_Z_Z_loader (GLuint index, GLfloat x, GLfloat y) {
  *cast(void**)&glVertexAttrib2f_Z_Z = glbindGetProcAddress(`glVertexAttrib2f`);
  if (*cast(void**)&glVertexAttrib2f_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2f' not found!`);
  glVertexAttrib2f_Z_Z(index, x, y);
}
alias glVertexAttrib2fARB = glVertexAttrib2fARB_Z_Z;
__gshared glVertexAttrib2fARB_Z_Z = function void (GLuint index, GLfloat x, GLfloat y) { glVertexAttrib2fARB_Z_Z_loader(index, x, y); };
private void glVertexAttrib2fARB_Z_Z_loader (GLuint index, GLfloat x, GLfloat y) {
  *cast(void**)&glVertexAttrib2fARB_Z_Z = glbindGetProcAddress(`glVertexAttrib2fARB`);
  if (*cast(void**)&glVertexAttrib2fARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fARB' not found!`);
  glVertexAttrib2fARB_Z_Z(index, x, y);
}
alias glVertexAttrib2fNV = glVertexAttrib2fNV_Z_Z;
__gshared glVertexAttrib2fNV_Z_Z = function void (GLuint index, GLfloat x, GLfloat y) { glVertexAttrib2fNV_Z_Z_loader(index, x, y); };
private void glVertexAttrib2fNV_Z_Z_loader (GLuint index, GLfloat x, GLfloat y) {
  *cast(void**)&glVertexAttrib2fNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2fNV`);
  if (*cast(void**)&glVertexAttrib2fNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fNV' not found!`);
  glVertexAttrib2fNV_Z_Z(index, x, y);
}
alias glVertexAttrib2fv = glVertexAttrib2fv_Z_Z;
__gshared glVertexAttrib2fv_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib2fv_Z_Z_loader(index, v); };
private void glVertexAttrib2fv_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib2fv_Z_Z = glbindGetProcAddress(`glVertexAttrib2fv`);
  if (*cast(void**)&glVertexAttrib2fv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fv' not found!`);
  glVertexAttrib2fv_Z_Z(index, v);
}
alias glVertexAttrib2fvARB = glVertexAttrib2fvARB_Z_Z;
__gshared glVertexAttrib2fvARB_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib2fvARB_Z_Z_loader(index, v); };
private void glVertexAttrib2fvARB_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib2fvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib2fvARB`);
  if (*cast(void**)&glVertexAttrib2fvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fvARB' not found!`);
  glVertexAttrib2fvARB_Z_Z(index, v);
}
alias glVertexAttrib2fvNV = glVertexAttrib2fvNV_Z_Z;
__gshared glVertexAttrib2fvNV_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib2fvNV_Z_Z_loader(index, v); };
private void glVertexAttrib2fvNV_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib2fvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2fvNV`);
  if (*cast(void**)&glVertexAttrib2fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2fvNV' not found!`);
  glVertexAttrib2fvNV_Z_Z(index, v);
}
alias glVertexAttrib2hNV = glVertexAttrib2hNV_Z_Z;
__gshared glVertexAttrib2hNV_Z_Z = function void (GLuint index, GLhalfNV x, GLhalfNV y) { glVertexAttrib2hNV_Z_Z_loader(index, x, y); };
private void glVertexAttrib2hNV_Z_Z_loader (GLuint index, GLhalfNV x, GLhalfNV y) {
  *cast(void**)&glVertexAttrib2hNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2hNV`);
  if (*cast(void**)&glVertexAttrib2hNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2hNV' not found!`);
  glVertexAttrib2hNV_Z_Z(index, x, y);
}
alias glVertexAttrib2hvNV = glVertexAttrib2hvNV_Z_Z;
__gshared glVertexAttrib2hvNV_Z_Z = function void (GLuint index, const(GLhalfNV)* v) { glVertexAttrib2hvNV_Z_Z_loader(index, v); };
private void glVertexAttrib2hvNV_Z_Z_loader (GLuint index, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttrib2hvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2hvNV`);
  if (*cast(void**)&glVertexAttrib2hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2hvNV' not found!`);
  glVertexAttrib2hvNV_Z_Z(index, v);
}
alias glVertexAttrib2s = glVertexAttrib2s_Z_Z;
__gshared glVertexAttrib2s_Z_Z = function void (GLuint index, GLshort x, GLshort y) { glVertexAttrib2s_Z_Z_loader(index, x, y); };
private void glVertexAttrib2s_Z_Z_loader (GLuint index, GLshort x, GLshort y) {
  *cast(void**)&glVertexAttrib2s_Z_Z = glbindGetProcAddress(`glVertexAttrib2s`);
  if (*cast(void**)&glVertexAttrib2s_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2s' not found!`);
  glVertexAttrib2s_Z_Z(index, x, y);
}
alias glVertexAttrib2sARB = glVertexAttrib2sARB_Z_Z;
__gshared glVertexAttrib2sARB_Z_Z = function void (GLuint index, GLshort x, GLshort y) { glVertexAttrib2sARB_Z_Z_loader(index, x, y); };
private void glVertexAttrib2sARB_Z_Z_loader (GLuint index, GLshort x, GLshort y) {
  *cast(void**)&glVertexAttrib2sARB_Z_Z = glbindGetProcAddress(`glVertexAttrib2sARB`);
  if (*cast(void**)&glVertexAttrib2sARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2sARB' not found!`);
  glVertexAttrib2sARB_Z_Z(index, x, y);
}
alias glVertexAttrib2sNV = glVertexAttrib2sNV_Z_Z;
__gshared glVertexAttrib2sNV_Z_Z = function void (GLuint index, GLshort x, GLshort y) { glVertexAttrib2sNV_Z_Z_loader(index, x, y); };
private void glVertexAttrib2sNV_Z_Z_loader (GLuint index, GLshort x, GLshort y) {
  *cast(void**)&glVertexAttrib2sNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2sNV`);
  if (*cast(void**)&glVertexAttrib2sNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2sNV' not found!`);
  glVertexAttrib2sNV_Z_Z(index, x, y);
}
alias glVertexAttrib2sv = glVertexAttrib2sv_Z_Z;
__gshared glVertexAttrib2sv_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib2sv_Z_Z_loader(index, v); };
private void glVertexAttrib2sv_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib2sv_Z_Z = glbindGetProcAddress(`glVertexAttrib2sv`);
  if (*cast(void**)&glVertexAttrib2sv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2sv' not found!`);
  glVertexAttrib2sv_Z_Z(index, v);
}
alias glVertexAttrib2svARB = glVertexAttrib2svARB_Z_Z;
__gshared glVertexAttrib2svARB_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib2svARB_Z_Z_loader(index, v); };
private void glVertexAttrib2svARB_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib2svARB_Z_Z = glbindGetProcAddress(`glVertexAttrib2svARB`);
  if (*cast(void**)&glVertexAttrib2svARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2svARB' not found!`);
  glVertexAttrib2svARB_Z_Z(index, v);
}
alias glVertexAttrib2svNV = glVertexAttrib2svNV_Z_Z;
__gshared glVertexAttrib2svNV_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib2svNV_Z_Z_loader(index, v); };
private void glVertexAttrib2svNV_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib2svNV_Z_Z = glbindGetProcAddress(`glVertexAttrib2svNV`);
  if (*cast(void**)&glVertexAttrib2svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib2svNV' not found!`);
  glVertexAttrib2svNV_Z_Z(index, v);
}
alias glVertexAttrib3d = glVertexAttrib3d_Z_Z;
__gshared glVertexAttrib3d_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z) { glVertexAttrib3d_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3d_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glVertexAttrib3d_Z_Z = glbindGetProcAddress(`glVertexAttrib3d`);
  if (*cast(void**)&glVertexAttrib3d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3d' not found!`);
  glVertexAttrib3d_Z_Z(index, x, y, z);
}
alias glVertexAttrib3dARB = glVertexAttrib3dARB_Z_Z;
__gshared glVertexAttrib3dARB_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z) { glVertexAttrib3dARB_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3dARB_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glVertexAttrib3dARB_Z_Z = glbindGetProcAddress(`glVertexAttrib3dARB`);
  if (*cast(void**)&glVertexAttrib3dARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dARB' not found!`);
  glVertexAttrib3dARB_Z_Z(index, x, y, z);
}
alias glVertexAttrib3dNV = glVertexAttrib3dNV_Z_Z;
__gshared glVertexAttrib3dNV_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z) { glVertexAttrib3dNV_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3dNV_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glVertexAttrib3dNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3dNV`);
  if (*cast(void**)&glVertexAttrib3dNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dNV' not found!`);
  glVertexAttrib3dNV_Z_Z(index, x, y, z);
}
alias glVertexAttrib3dv = glVertexAttrib3dv_Z_Z;
__gshared glVertexAttrib3dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib3dv_Z_Z_loader(index, v); };
private void glVertexAttrib3dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib3dv_Z_Z = glbindGetProcAddress(`glVertexAttrib3dv`);
  if (*cast(void**)&glVertexAttrib3dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dv' not found!`);
  glVertexAttrib3dv_Z_Z(index, v);
}
alias glVertexAttrib3dvARB = glVertexAttrib3dvARB_Z_Z;
__gshared glVertexAttrib3dvARB_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib3dvARB_Z_Z_loader(index, v); };
private void glVertexAttrib3dvARB_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib3dvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib3dvARB`);
  if (*cast(void**)&glVertexAttrib3dvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dvARB' not found!`);
  glVertexAttrib3dvARB_Z_Z(index, v);
}
alias glVertexAttrib3dvNV = glVertexAttrib3dvNV_Z_Z;
__gshared glVertexAttrib3dvNV_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib3dvNV_Z_Z_loader(index, v); };
private void glVertexAttrib3dvNV_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib3dvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3dvNV`);
  if (*cast(void**)&glVertexAttrib3dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3dvNV' not found!`);
  glVertexAttrib3dvNV_Z_Z(index, v);
}
alias glVertexAttrib3f = glVertexAttrib3f_Z_Z;
__gshared glVertexAttrib3f_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat z) { glVertexAttrib3f_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3f_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glVertexAttrib3f_Z_Z = glbindGetProcAddress(`glVertexAttrib3f`);
  if (*cast(void**)&glVertexAttrib3f_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3f' not found!`);
  glVertexAttrib3f_Z_Z(index, x, y, z);
}
alias glVertexAttrib3fARB = glVertexAttrib3fARB_Z_Z;
__gshared glVertexAttrib3fARB_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat z) { glVertexAttrib3fARB_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3fARB_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glVertexAttrib3fARB_Z_Z = glbindGetProcAddress(`glVertexAttrib3fARB`);
  if (*cast(void**)&glVertexAttrib3fARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fARB' not found!`);
  glVertexAttrib3fARB_Z_Z(index, x, y, z);
}
alias glVertexAttrib3fNV = glVertexAttrib3fNV_Z_Z;
__gshared glVertexAttrib3fNV_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat z) { glVertexAttrib3fNV_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3fNV_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glVertexAttrib3fNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3fNV`);
  if (*cast(void**)&glVertexAttrib3fNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fNV' not found!`);
  glVertexAttrib3fNV_Z_Z(index, x, y, z);
}
alias glVertexAttrib3fv = glVertexAttrib3fv_Z_Z;
__gshared glVertexAttrib3fv_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib3fv_Z_Z_loader(index, v); };
private void glVertexAttrib3fv_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib3fv_Z_Z = glbindGetProcAddress(`glVertexAttrib3fv`);
  if (*cast(void**)&glVertexAttrib3fv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fv' not found!`);
  glVertexAttrib3fv_Z_Z(index, v);
}
alias glVertexAttrib3fvARB = glVertexAttrib3fvARB_Z_Z;
__gshared glVertexAttrib3fvARB_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib3fvARB_Z_Z_loader(index, v); };
private void glVertexAttrib3fvARB_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib3fvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib3fvARB`);
  if (*cast(void**)&glVertexAttrib3fvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fvARB' not found!`);
  glVertexAttrib3fvARB_Z_Z(index, v);
}
alias glVertexAttrib3fvNV = glVertexAttrib3fvNV_Z_Z;
__gshared glVertexAttrib3fvNV_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib3fvNV_Z_Z_loader(index, v); };
private void glVertexAttrib3fvNV_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib3fvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3fvNV`);
  if (*cast(void**)&glVertexAttrib3fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3fvNV' not found!`);
  glVertexAttrib3fvNV_Z_Z(index, v);
}
alias glVertexAttrib3hNV = glVertexAttrib3hNV_Z_Z;
__gshared glVertexAttrib3hNV_Z_Z = function void (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { glVertexAttrib3hNV_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3hNV_Z_Z_loader (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  *cast(void**)&glVertexAttrib3hNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3hNV`);
  if (*cast(void**)&glVertexAttrib3hNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3hNV' not found!`);
  glVertexAttrib3hNV_Z_Z(index, x, y, z);
}
alias glVertexAttrib3hvNV = glVertexAttrib3hvNV_Z_Z;
__gshared glVertexAttrib3hvNV_Z_Z = function void (GLuint index, const(GLhalfNV)* v) { glVertexAttrib3hvNV_Z_Z_loader(index, v); };
private void glVertexAttrib3hvNV_Z_Z_loader (GLuint index, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttrib3hvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3hvNV`);
  if (*cast(void**)&glVertexAttrib3hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3hvNV' not found!`);
  glVertexAttrib3hvNV_Z_Z(index, v);
}
alias glVertexAttrib3s = glVertexAttrib3s_Z_Z;
__gshared glVertexAttrib3s_Z_Z = function void (GLuint index, GLshort x, GLshort y, GLshort z) { glVertexAttrib3s_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3s_Z_Z_loader (GLuint index, GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glVertexAttrib3s_Z_Z = glbindGetProcAddress(`glVertexAttrib3s`);
  if (*cast(void**)&glVertexAttrib3s_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3s' not found!`);
  glVertexAttrib3s_Z_Z(index, x, y, z);
}
alias glVertexAttrib3sARB = glVertexAttrib3sARB_Z_Z;
__gshared glVertexAttrib3sARB_Z_Z = function void (GLuint index, GLshort x, GLshort y, GLshort z) { glVertexAttrib3sARB_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3sARB_Z_Z_loader (GLuint index, GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glVertexAttrib3sARB_Z_Z = glbindGetProcAddress(`glVertexAttrib3sARB`);
  if (*cast(void**)&glVertexAttrib3sARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3sARB' not found!`);
  glVertexAttrib3sARB_Z_Z(index, x, y, z);
}
alias glVertexAttrib3sNV = glVertexAttrib3sNV_Z_Z;
__gshared glVertexAttrib3sNV_Z_Z = function void (GLuint index, GLshort x, GLshort y, GLshort z) { glVertexAttrib3sNV_Z_Z_loader(index, x, y, z); };
private void glVertexAttrib3sNV_Z_Z_loader (GLuint index, GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glVertexAttrib3sNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3sNV`);
  if (*cast(void**)&glVertexAttrib3sNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3sNV' not found!`);
  glVertexAttrib3sNV_Z_Z(index, x, y, z);
}
alias glVertexAttrib3sv = glVertexAttrib3sv_Z_Z;
__gshared glVertexAttrib3sv_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib3sv_Z_Z_loader(index, v); };
private void glVertexAttrib3sv_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib3sv_Z_Z = glbindGetProcAddress(`glVertexAttrib3sv`);
  if (*cast(void**)&glVertexAttrib3sv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3sv' not found!`);
  glVertexAttrib3sv_Z_Z(index, v);
}
alias glVertexAttrib3svARB = glVertexAttrib3svARB_Z_Z;
__gshared glVertexAttrib3svARB_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib3svARB_Z_Z_loader(index, v); };
private void glVertexAttrib3svARB_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib3svARB_Z_Z = glbindGetProcAddress(`glVertexAttrib3svARB`);
  if (*cast(void**)&glVertexAttrib3svARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3svARB' not found!`);
  glVertexAttrib3svARB_Z_Z(index, v);
}
alias glVertexAttrib3svNV = glVertexAttrib3svNV_Z_Z;
__gshared glVertexAttrib3svNV_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib3svNV_Z_Z_loader(index, v); };
private void glVertexAttrib3svNV_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib3svNV_Z_Z = glbindGetProcAddress(`glVertexAttrib3svNV`);
  if (*cast(void**)&glVertexAttrib3svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib3svNV' not found!`);
  glVertexAttrib3svNV_Z_Z(index, v);
}
alias glVertexAttrib4Nbv = glVertexAttrib4Nbv_Z_Z;
__gshared glVertexAttrib4Nbv_Z_Z = function void (GLuint index, const(GLbyte)* v) { glVertexAttrib4Nbv_Z_Z_loader(index, v); };
private void glVertexAttrib4Nbv_Z_Z_loader (GLuint index, const(GLbyte)* v) {
  *cast(void**)&glVertexAttrib4Nbv_Z_Z = glbindGetProcAddress(`glVertexAttrib4Nbv`);
  if (*cast(void**)&glVertexAttrib4Nbv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nbv' not found!`);
  glVertexAttrib4Nbv_Z_Z(index, v);
}
alias glVertexAttrib4NbvARB = glVertexAttrib4NbvARB_Z_Z;
__gshared glVertexAttrib4NbvARB_Z_Z = function void (GLuint index, const(GLbyte)* v) { glVertexAttrib4NbvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4NbvARB_Z_Z_loader (GLuint index, const(GLbyte)* v) {
  *cast(void**)&glVertexAttrib4NbvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4NbvARB`);
  if (*cast(void**)&glVertexAttrib4NbvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NbvARB' not found!`);
  glVertexAttrib4NbvARB_Z_Z(index, v);
}
alias glVertexAttrib4Niv = glVertexAttrib4Niv_Z_Z;
__gshared glVertexAttrib4Niv_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttrib4Niv_Z_Z_loader(index, v); };
private void glVertexAttrib4Niv_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttrib4Niv_Z_Z = glbindGetProcAddress(`glVertexAttrib4Niv`);
  if (*cast(void**)&glVertexAttrib4Niv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Niv' not found!`);
  glVertexAttrib4Niv_Z_Z(index, v);
}
alias glVertexAttrib4NivARB = glVertexAttrib4NivARB_Z_Z;
__gshared glVertexAttrib4NivARB_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttrib4NivARB_Z_Z_loader(index, v); };
private void glVertexAttrib4NivARB_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttrib4NivARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4NivARB`);
  if (*cast(void**)&glVertexAttrib4NivARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NivARB' not found!`);
  glVertexAttrib4NivARB_Z_Z(index, v);
}
alias glVertexAttrib4Nsv = glVertexAttrib4Nsv_Z_Z;
__gshared glVertexAttrib4Nsv_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib4Nsv_Z_Z_loader(index, v); };
private void glVertexAttrib4Nsv_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib4Nsv_Z_Z = glbindGetProcAddress(`glVertexAttrib4Nsv`);
  if (*cast(void**)&glVertexAttrib4Nsv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nsv' not found!`);
  glVertexAttrib4Nsv_Z_Z(index, v);
}
alias glVertexAttrib4NsvARB = glVertexAttrib4NsvARB_Z_Z;
__gshared glVertexAttrib4NsvARB_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib4NsvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4NsvARB_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib4NsvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4NsvARB`);
  if (*cast(void**)&glVertexAttrib4NsvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NsvARB' not found!`);
  glVertexAttrib4NsvARB_Z_Z(index, v);
}
alias glVertexAttrib4Nub = glVertexAttrib4Nub_Z_Z;
__gshared glVertexAttrib4Nub_Z_Z = function void (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { glVertexAttrib4Nub_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4Nub_Z_Z_loader (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  *cast(void**)&glVertexAttrib4Nub_Z_Z = glbindGetProcAddress(`glVertexAttrib4Nub`);
  if (*cast(void**)&glVertexAttrib4Nub_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nub' not found!`);
  glVertexAttrib4Nub_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4NubARB = glVertexAttrib4NubARB_Z_Z;
__gshared glVertexAttrib4NubARB_Z_Z = function void (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { glVertexAttrib4NubARB_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4NubARB_Z_Z_loader (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  *cast(void**)&glVertexAttrib4NubARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4NubARB`);
  if (*cast(void**)&glVertexAttrib4NubARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NubARB' not found!`);
  glVertexAttrib4NubARB_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4Nubv = glVertexAttrib4Nubv_Z_Z;
__gshared glVertexAttrib4Nubv_Z_Z = function void (GLuint index, const(GLubyte)* v) { glVertexAttrib4Nubv_Z_Z_loader(index, v); };
private void glVertexAttrib4Nubv_Z_Z_loader (GLuint index, const(GLubyte)* v) {
  *cast(void**)&glVertexAttrib4Nubv_Z_Z = glbindGetProcAddress(`glVertexAttrib4Nubv`);
  if (*cast(void**)&glVertexAttrib4Nubv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nubv' not found!`);
  glVertexAttrib4Nubv_Z_Z(index, v);
}
alias glVertexAttrib4NubvARB = glVertexAttrib4NubvARB_Z_Z;
__gshared glVertexAttrib4NubvARB_Z_Z = function void (GLuint index, const(GLubyte)* v) { glVertexAttrib4NubvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4NubvARB_Z_Z_loader (GLuint index, const(GLubyte)* v) {
  *cast(void**)&glVertexAttrib4NubvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4NubvARB`);
  if (*cast(void**)&glVertexAttrib4NubvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NubvARB' not found!`);
  glVertexAttrib4NubvARB_Z_Z(index, v);
}
alias glVertexAttrib4Nuiv = glVertexAttrib4Nuiv_Z_Z;
__gshared glVertexAttrib4Nuiv_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttrib4Nuiv_Z_Z_loader(index, v); };
private void glVertexAttrib4Nuiv_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttrib4Nuiv_Z_Z = glbindGetProcAddress(`glVertexAttrib4Nuiv`);
  if (*cast(void**)&glVertexAttrib4Nuiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nuiv' not found!`);
  glVertexAttrib4Nuiv_Z_Z(index, v);
}
alias glVertexAttrib4NuivARB = glVertexAttrib4NuivARB_Z_Z;
__gshared glVertexAttrib4NuivARB_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttrib4NuivARB_Z_Z_loader(index, v); };
private void glVertexAttrib4NuivARB_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttrib4NuivARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4NuivARB`);
  if (*cast(void**)&glVertexAttrib4NuivARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NuivARB' not found!`);
  glVertexAttrib4NuivARB_Z_Z(index, v);
}
alias glVertexAttrib4Nusv = glVertexAttrib4Nusv_Z_Z;
__gshared glVertexAttrib4Nusv_Z_Z = function void (GLuint index, const(GLushort)* v) { glVertexAttrib4Nusv_Z_Z_loader(index, v); };
private void glVertexAttrib4Nusv_Z_Z_loader (GLuint index, const(GLushort)* v) {
  *cast(void**)&glVertexAttrib4Nusv_Z_Z = glbindGetProcAddress(`glVertexAttrib4Nusv`);
  if (*cast(void**)&glVertexAttrib4Nusv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4Nusv' not found!`);
  glVertexAttrib4Nusv_Z_Z(index, v);
}
alias glVertexAttrib4NusvARB = glVertexAttrib4NusvARB_Z_Z;
__gshared glVertexAttrib4NusvARB_Z_Z = function void (GLuint index, const(GLushort)* v) { glVertexAttrib4NusvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4NusvARB_Z_Z_loader (GLuint index, const(GLushort)* v) {
  *cast(void**)&glVertexAttrib4NusvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4NusvARB`);
  if (*cast(void**)&glVertexAttrib4NusvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4NusvARB' not found!`);
  glVertexAttrib4NusvARB_Z_Z(index, v);
}
alias glVertexAttrib4bv = glVertexAttrib4bv_Z_Z;
__gshared glVertexAttrib4bv_Z_Z = function void (GLuint index, const(GLbyte)* v) { glVertexAttrib4bv_Z_Z_loader(index, v); };
private void glVertexAttrib4bv_Z_Z_loader (GLuint index, const(GLbyte)* v) {
  *cast(void**)&glVertexAttrib4bv_Z_Z = glbindGetProcAddress(`glVertexAttrib4bv`);
  if (*cast(void**)&glVertexAttrib4bv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4bv' not found!`);
  glVertexAttrib4bv_Z_Z(index, v);
}
alias glVertexAttrib4bvARB = glVertexAttrib4bvARB_Z_Z;
__gshared glVertexAttrib4bvARB_Z_Z = function void (GLuint index, const(GLbyte)* v) { glVertexAttrib4bvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4bvARB_Z_Z_loader (GLuint index, const(GLbyte)* v) {
  *cast(void**)&glVertexAttrib4bvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4bvARB`);
  if (*cast(void**)&glVertexAttrib4bvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4bvARB' not found!`);
  glVertexAttrib4bvARB_Z_Z(index, v);
}
alias glVertexAttrib4d = glVertexAttrib4d_Z_Z;
__gshared glVertexAttrib4d_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glVertexAttrib4d_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4d_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glVertexAttrib4d_Z_Z = glbindGetProcAddress(`glVertexAttrib4d`);
  if (*cast(void**)&glVertexAttrib4d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4d' not found!`);
  glVertexAttrib4d_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4dARB = glVertexAttrib4dARB_Z_Z;
__gshared glVertexAttrib4dARB_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glVertexAttrib4dARB_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4dARB_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glVertexAttrib4dARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4dARB`);
  if (*cast(void**)&glVertexAttrib4dARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dARB' not found!`);
  glVertexAttrib4dARB_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4dNV = glVertexAttrib4dNV_Z_Z;
__gshared glVertexAttrib4dNV_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glVertexAttrib4dNV_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4dNV_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glVertexAttrib4dNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4dNV`);
  if (*cast(void**)&glVertexAttrib4dNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dNV' not found!`);
  glVertexAttrib4dNV_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4dv = glVertexAttrib4dv_Z_Z;
__gshared glVertexAttrib4dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib4dv_Z_Z_loader(index, v); };
private void glVertexAttrib4dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib4dv_Z_Z = glbindGetProcAddress(`glVertexAttrib4dv`);
  if (*cast(void**)&glVertexAttrib4dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dv' not found!`);
  glVertexAttrib4dv_Z_Z(index, v);
}
alias glVertexAttrib4dvARB = glVertexAttrib4dvARB_Z_Z;
__gshared glVertexAttrib4dvARB_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib4dvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4dvARB_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib4dvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4dvARB`);
  if (*cast(void**)&glVertexAttrib4dvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dvARB' not found!`);
  glVertexAttrib4dvARB_Z_Z(index, v);
}
alias glVertexAttrib4dvNV = glVertexAttrib4dvNV_Z_Z;
__gshared glVertexAttrib4dvNV_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttrib4dvNV_Z_Z_loader(index, v); };
private void glVertexAttrib4dvNV_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttrib4dvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4dvNV`);
  if (*cast(void**)&glVertexAttrib4dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4dvNV' not found!`);
  glVertexAttrib4dvNV_Z_Z(index, v);
}
alias glVertexAttrib4f = glVertexAttrib4f_Z_Z;
__gshared glVertexAttrib4f_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glVertexAttrib4f_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4f_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glVertexAttrib4f_Z_Z = glbindGetProcAddress(`glVertexAttrib4f`);
  if (*cast(void**)&glVertexAttrib4f_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4f' not found!`);
  glVertexAttrib4f_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4fARB = glVertexAttrib4fARB_Z_Z;
__gshared glVertexAttrib4fARB_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glVertexAttrib4fARB_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4fARB_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glVertexAttrib4fARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4fARB`);
  if (*cast(void**)&glVertexAttrib4fARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fARB' not found!`);
  glVertexAttrib4fARB_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4fNV = glVertexAttrib4fNV_Z_Z;
__gshared glVertexAttrib4fNV_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glVertexAttrib4fNV_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4fNV_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glVertexAttrib4fNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4fNV`);
  if (*cast(void**)&glVertexAttrib4fNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fNV' not found!`);
  glVertexAttrib4fNV_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4fv = glVertexAttrib4fv_Z_Z;
__gshared glVertexAttrib4fv_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib4fv_Z_Z_loader(index, v); };
private void glVertexAttrib4fv_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib4fv_Z_Z = glbindGetProcAddress(`glVertexAttrib4fv`);
  if (*cast(void**)&glVertexAttrib4fv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fv' not found!`);
  glVertexAttrib4fv_Z_Z(index, v);
}
alias glVertexAttrib4fvARB = glVertexAttrib4fvARB_Z_Z;
__gshared glVertexAttrib4fvARB_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib4fvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4fvARB_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib4fvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4fvARB`);
  if (*cast(void**)&glVertexAttrib4fvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fvARB' not found!`);
  glVertexAttrib4fvARB_Z_Z(index, v);
}
alias glVertexAttrib4fvNV = glVertexAttrib4fvNV_Z_Z;
__gshared glVertexAttrib4fvNV_Z_Z = function void (GLuint index, const(GLfloat)* v) { glVertexAttrib4fvNV_Z_Z_loader(index, v); };
private void glVertexAttrib4fvNV_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glVertexAttrib4fvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4fvNV`);
  if (*cast(void**)&glVertexAttrib4fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4fvNV' not found!`);
  glVertexAttrib4fvNV_Z_Z(index, v);
}
alias glVertexAttrib4hNV = glVertexAttrib4hNV_Z_Z;
__gshared glVertexAttrib4hNV_Z_Z = function void (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { glVertexAttrib4hNV_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4hNV_Z_Z_loader (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  *cast(void**)&glVertexAttrib4hNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4hNV`);
  if (*cast(void**)&glVertexAttrib4hNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4hNV' not found!`);
  glVertexAttrib4hNV_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4hvNV = glVertexAttrib4hvNV_Z_Z;
__gshared glVertexAttrib4hvNV_Z_Z = function void (GLuint index, const(GLhalfNV)* v) { glVertexAttrib4hvNV_Z_Z_loader(index, v); };
private void glVertexAttrib4hvNV_Z_Z_loader (GLuint index, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttrib4hvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4hvNV`);
  if (*cast(void**)&glVertexAttrib4hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4hvNV' not found!`);
  glVertexAttrib4hvNV_Z_Z(index, v);
}
alias glVertexAttrib4iv = glVertexAttrib4iv_Z_Z;
__gshared glVertexAttrib4iv_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttrib4iv_Z_Z_loader(index, v); };
private void glVertexAttrib4iv_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttrib4iv_Z_Z = glbindGetProcAddress(`glVertexAttrib4iv`);
  if (*cast(void**)&glVertexAttrib4iv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4iv' not found!`);
  glVertexAttrib4iv_Z_Z(index, v);
}
alias glVertexAttrib4ivARB = glVertexAttrib4ivARB_Z_Z;
__gshared glVertexAttrib4ivARB_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttrib4ivARB_Z_Z_loader(index, v); };
private void glVertexAttrib4ivARB_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttrib4ivARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4ivARB`);
  if (*cast(void**)&glVertexAttrib4ivARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ivARB' not found!`);
  glVertexAttrib4ivARB_Z_Z(index, v);
}
alias glVertexAttrib4s = glVertexAttrib4s_Z_Z;
__gshared glVertexAttrib4s_Z_Z = function void (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { glVertexAttrib4s_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4s_Z_Z_loader (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  *cast(void**)&glVertexAttrib4s_Z_Z = glbindGetProcAddress(`glVertexAttrib4s`);
  if (*cast(void**)&glVertexAttrib4s_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4s' not found!`);
  glVertexAttrib4s_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4sARB = glVertexAttrib4sARB_Z_Z;
__gshared glVertexAttrib4sARB_Z_Z = function void (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { glVertexAttrib4sARB_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4sARB_Z_Z_loader (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  *cast(void**)&glVertexAttrib4sARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4sARB`);
  if (*cast(void**)&glVertexAttrib4sARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4sARB' not found!`);
  glVertexAttrib4sARB_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4sNV = glVertexAttrib4sNV_Z_Z;
__gshared glVertexAttrib4sNV_Z_Z = function void (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { glVertexAttrib4sNV_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4sNV_Z_Z_loader (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  *cast(void**)&glVertexAttrib4sNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4sNV`);
  if (*cast(void**)&glVertexAttrib4sNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4sNV' not found!`);
  glVertexAttrib4sNV_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4sv = glVertexAttrib4sv_Z_Z;
__gshared glVertexAttrib4sv_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib4sv_Z_Z_loader(index, v); };
private void glVertexAttrib4sv_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib4sv_Z_Z = glbindGetProcAddress(`glVertexAttrib4sv`);
  if (*cast(void**)&glVertexAttrib4sv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4sv' not found!`);
  glVertexAttrib4sv_Z_Z(index, v);
}
alias glVertexAttrib4svARB = glVertexAttrib4svARB_Z_Z;
__gshared glVertexAttrib4svARB_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib4svARB_Z_Z_loader(index, v); };
private void glVertexAttrib4svARB_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib4svARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4svARB`);
  if (*cast(void**)&glVertexAttrib4svARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4svARB' not found!`);
  glVertexAttrib4svARB_Z_Z(index, v);
}
alias glVertexAttrib4svNV = glVertexAttrib4svNV_Z_Z;
__gshared glVertexAttrib4svNV_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttrib4svNV_Z_Z_loader(index, v); };
private void glVertexAttrib4svNV_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttrib4svNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4svNV`);
  if (*cast(void**)&glVertexAttrib4svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4svNV' not found!`);
  glVertexAttrib4svNV_Z_Z(index, v);
}
alias glVertexAttrib4ubNV = glVertexAttrib4ubNV_Z_Z;
__gshared glVertexAttrib4ubNV_Z_Z = function void (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { glVertexAttrib4ubNV_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttrib4ubNV_Z_Z_loader (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  *cast(void**)&glVertexAttrib4ubNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4ubNV`);
  if (*cast(void**)&glVertexAttrib4ubNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubNV' not found!`);
  glVertexAttrib4ubNV_Z_Z(index, x, y, z, w);
}
alias glVertexAttrib4ubv = glVertexAttrib4ubv_Z_Z;
__gshared glVertexAttrib4ubv_Z_Z = function void (GLuint index, const(GLubyte)* v) { glVertexAttrib4ubv_Z_Z_loader(index, v); };
private void glVertexAttrib4ubv_Z_Z_loader (GLuint index, const(GLubyte)* v) {
  *cast(void**)&glVertexAttrib4ubv_Z_Z = glbindGetProcAddress(`glVertexAttrib4ubv`);
  if (*cast(void**)&glVertexAttrib4ubv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubv' not found!`);
  glVertexAttrib4ubv_Z_Z(index, v);
}
alias glVertexAttrib4ubvARB = glVertexAttrib4ubvARB_Z_Z;
__gshared glVertexAttrib4ubvARB_Z_Z = function void (GLuint index, const(GLubyte)* v) { glVertexAttrib4ubvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4ubvARB_Z_Z_loader (GLuint index, const(GLubyte)* v) {
  *cast(void**)&glVertexAttrib4ubvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4ubvARB`);
  if (*cast(void**)&glVertexAttrib4ubvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubvARB' not found!`);
  glVertexAttrib4ubvARB_Z_Z(index, v);
}
alias glVertexAttrib4ubvNV = glVertexAttrib4ubvNV_Z_Z;
__gshared glVertexAttrib4ubvNV_Z_Z = function void (GLuint index, const(GLubyte)* v) { glVertexAttrib4ubvNV_Z_Z_loader(index, v); };
private void glVertexAttrib4ubvNV_Z_Z_loader (GLuint index, const(GLubyte)* v) {
  *cast(void**)&glVertexAttrib4ubvNV_Z_Z = glbindGetProcAddress(`glVertexAttrib4ubvNV`);
  if (*cast(void**)&glVertexAttrib4ubvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4ubvNV' not found!`);
  glVertexAttrib4ubvNV_Z_Z(index, v);
}
alias glVertexAttrib4uiv = glVertexAttrib4uiv_Z_Z;
__gshared glVertexAttrib4uiv_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttrib4uiv_Z_Z_loader(index, v); };
private void glVertexAttrib4uiv_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttrib4uiv_Z_Z = glbindGetProcAddress(`glVertexAttrib4uiv`);
  if (*cast(void**)&glVertexAttrib4uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4uiv' not found!`);
  glVertexAttrib4uiv_Z_Z(index, v);
}
alias glVertexAttrib4uivARB = glVertexAttrib4uivARB_Z_Z;
__gshared glVertexAttrib4uivARB_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttrib4uivARB_Z_Z_loader(index, v); };
private void glVertexAttrib4uivARB_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttrib4uivARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4uivARB`);
  if (*cast(void**)&glVertexAttrib4uivARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4uivARB' not found!`);
  glVertexAttrib4uivARB_Z_Z(index, v);
}
alias glVertexAttrib4usv = glVertexAttrib4usv_Z_Z;
__gshared glVertexAttrib4usv_Z_Z = function void (GLuint index, const(GLushort)* v) { glVertexAttrib4usv_Z_Z_loader(index, v); };
private void glVertexAttrib4usv_Z_Z_loader (GLuint index, const(GLushort)* v) {
  *cast(void**)&glVertexAttrib4usv_Z_Z = glbindGetProcAddress(`glVertexAttrib4usv`);
  if (*cast(void**)&glVertexAttrib4usv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4usv' not found!`);
  glVertexAttrib4usv_Z_Z(index, v);
}
alias glVertexAttrib4usvARB = glVertexAttrib4usvARB_Z_Z;
__gshared glVertexAttrib4usvARB_Z_Z = function void (GLuint index, const(GLushort)* v) { glVertexAttrib4usvARB_Z_Z_loader(index, v); };
private void glVertexAttrib4usvARB_Z_Z_loader (GLuint index, const(GLushort)* v) {
  *cast(void**)&glVertexAttrib4usvARB_Z_Z = glbindGetProcAddress(`glVertexAttrib4usvARB`);
  if (*cast(void**)&glVertexAttrib4usvARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttrib4usvARB' not found!`);
  glVertexAttrib4usvARB_Z_Z(index, v);
}
alias glVertexAttribArrayObjectATI = glVertexAttribArrayObjectATI_Z_Z;
__gshared glVertexAttribArrayObjectATI_Z_Z = function void (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { glVertexAttribArrayObjectATI_Z_Z_loader(index, size, type, normalized, stride, buffer, offset); };
private void glVertexAttribArrayObjectATI_Z_Z_loader (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {
  *cast(void**)&glVertexAttribArrayObjectATI_Z_Z = glbindGetProcAddress(`glVertexAttribArrayObjectATI`);
  if (*cast(void**)&glVertexAttribArrayObjectATI_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribArrayObjectATI' not found!`);
  glVertexAttribArrayObjectATI_Z_Z(index, size, type, normalized, stride, buffer, offset);
}
alias glVertexAttribBinding = glVertexAttribBinding_Z_Z;
__gshared glVertexAttribBinding_Z_Z = function void (GLuint attribindex, GLuint bindingindex) { glVertexAttribBinding_Z_Z_loader(attribindex, bindingindex); };
private void glVertexAttribBinding_Z_Z_loader (GLuint attribindex, GLuint bindingindex) {
  *cast(void**)&glVertexAttribBinding_Z_Z = glbindGetProcAddress(`glVertexAttribBinding`);
  if (*cast(void**)&glVertexAttribBinding_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribBinding' not found!`);
  glVertexAttribBinding_Z_Z(attribindex, bindingindex);
}
alias glVertexAttribDivisor = glVertexAttribDivisor_Z_Z;
__gshared glVertexAttribDivisor_Z_Z = function void (GLuint index, GLuint divisor) { glVertexAttribDivisor_Z_Z_loader(index, divisor); };
private void glVertexAttribDivisor_Z_Z_loader (GLuint index, GLuint divisor) {
  *cast(void**)&glVertexAttribDivisor_Z_Z = glbindGetProcAddress(`glVertexAttribDivisor`);
  if (*cast(void**)&glVertexAttribDivisor_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribDivisor' not found!`);
  glVertexAttribDivisor_Z_Z(index, divisor);
}
alias glVertexAttribDivisorANGLE = glVertexAttribDivisorANGLE_Z_Z;
__gshared glVertexAttribDivisorANGLE_Z_Z = function void (GLuint index, GLuint divisor) { glVertexAttribDivisorANGLE_Z_Z_loader(index, divisor); };
private void glVertexAttribDivisorANGLE_Z_Z_loader (GLuint index, GLuint divisor) {
  *cast(void**)&glVertexAttribDivisorANGLE_Z_Z = glbindGetProcAddress(`glVertexAttribDivisorANGLE`);
  if (*cast(void**)&glVertexAttribDivisorANGLE_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribDivisorANGLE' not found!`);
  glVertexAttribDivisorANGLE_Z_Z(index, divisor);
}
alias glVertexAttribDivisorARB = glVertexAttribDivisorARB_Z_Z;
__gshared glVertexAttribDivisorARB_Z_Z = function void (GLuint index, GLuint divisor) { glVertexAttribDivisorARB_Z_Z_loader(index, divisor); };
private void glVertexAttribDivisorARB_Z_Z_loader (GLuint index, GLuint divisor) {
  *cast(void**)&glVertexAttribDivisorARB_Z_Z = glbindGetProcAddress(`glVertexAttribDivisorARB`);
  if (*cast(void**)&glVertexAttribDivisorARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribDivisorARB' not found!`);
  glVertexAttribDivisorARB_Z_Z(index, divisor);
}
alias glVertexAttribDivisorEXT = glVertexAttribDivisorEXT_Z_Z;
__gshared glVertexAttribDivisorEXT_Z_Z = function void (GLuint index, GLuint divisor) { glVertexAttribDivisorEXT_Z_Z_loader(index, divisor); };
private void glVertexAttribDivisorEXT_Z_Z_loader (GLuint index, GLuint divisor) {
  *cast(void**)&glVertexAttribDivisorEXT_Z_Z = glbindGetProcAddress(`glVertexAttribDivisorEXT`);
  if (*cast(void**)&glVertexAttribDivisorEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribDivisorEXT' not found!`);
  glVertexAttribDivisorEXT_Z_Z(index, divisor);
}
alias glVertexAttribDivisorNV = glVertexAttribDivisorNV_Z_Z;
__gshared glVertexAttribDivisorNV_Z_Z = function void (GLuint index, GLuint divisor) { glVertexAttribDivisorNV_Z_Z_loader(index, divisor); };
private void glVertexAttribDivisorNV_Z_Z_loader (GLuint index, GLuint divisor) {
  *cast(void**)&glVertexAttribDivisorNV_Z_Z = glbindGetProcAddress(`glVertexAttribDivisorNV`);
  if (*cast(void**)&glVertexAttribDivisorNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribDivisorNV' not found!`);
  glVertexAttribDivisorNV_Z_Z(index, divisor);
}
alias glVertexAttribFormat = glVertexAttribFormat_Z_Z;
__gshared glVertexAttribFormat_Z_Z = function void (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { glVertexAttribFormat_Z_Z_loader(attribindex, size, type, normalized, relativeoffset); };
private void glVertexAttribFormat_Z_Z_loader (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  *cast(void**)&glVertexAttribFormat_Z_Z = glbindGetProcAddress(`glVertexAttribFormat`);
  if (*cast(void**)&glVertexAttribFormat_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribFormat' not found!`);
  glVertexAttribFormat_Z_Z(attribindex, size, type, normalized, relativeoffset);
}
alias glVertexAttribFormatNV = glVertexAttribFormatNV_Z_Z;
__gshared glVertexAttribFormatNV_Z_Z = function void (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { glVertexAttribFormatNV_Z_Z_loader(index, size, type, normalized, stride); };
private void glVertexAttribFormatNV_Z_Z_loader (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) {
  *cast(void**)&glVertexAttribFormatNV_Z_Z = glbindGetProcAddress(`glVertexAttribFormatNV`);
  if (*cast(void**)&glVertexAttribFormatNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribFormatNV' not found!`);
  glVertexAttribFormatNV_Z_Z(index, size, type, normalized, stride);
}
alias glVertexAttribI1i = glVertexAttribI1i_Z_Z;
__gshared glVertexAttribI1i_Z_Z = function void (GLuint index, GLint x) { glVertexAttribI1i_Z_Z_loader(index, x); };
private void glVertexAttribI1i_Z_Z_loader (GLuint index, GLint x) {
  *cast(void**)&glVertexAttribI1i_Z_Z = glbindGetProcAddress(`glVertexAttribI1i`);
  if (*cast(void**)&glVertexAttribI1i_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1i' not found!`);
  glVertexAttribI1i_Z_Z(index, x);
}
alias glVertexAttribI1iEXT = glVertexAttribI1iEXT_Z_Z;
__gshared glVertexAttribI1iEXT_Z_Z = function void (GLuint index, GLint x) { glVertexAttribI1iEXT_Z_Z_loader(index, x); };
private void glVertexAttribI1iEXT_Z_Z_loader (GLuint index, GLint x) {
  *cast(void**)&glVertexAttribI1iEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI1iEXT`);
  if (*cast(void**)&glVertexAttribI1iEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1iEXT' not found!`);
  glVertexAttribI1iEXT_Z_Z(index, x);
}
alias glVertexAttribI1iv = glVertexAttribI1iv_Z_Z;
__gshared glVertexAttribI1iv_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI1iv_Z_Z_loader(index, v); };
private void glVertexAttribI1iv_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI1iv_Z_Z = glbindGetProcAddress(`glVertexAttribI1iv`);
  if (*cast(void**)&glVertexAttribI1iv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1iv' not found!`);
  glVertexAttribI1iv_Z_Z(index, v);
}
alias glVertexAttribI1ivEXT = glVertexAttribI1ivEXT_Z_Z;
__gshared glVertexAttribI1ivEXT_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI1ivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI1ivEXT_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI1ivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI1ivEXT`);
  if (*cast(void**)&glVertexAttribI1ivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1ivEXT' not found!`);
  glVertexAttribI1ivEXT_Z_Z(index, v);
}
alias glVertexAttribI1ui = glVertexAttribI1ui_Z_Z;
__gshared glVertexAttribI1ui_Z_Z = function void (GLuint index, GLuint x) { glVertexAttribI1ui_Z_Z_loader(index, x); };
private void glVertexAttribI1ui_Z_Z_loader (GLuint index, GLuint x) {
  *cast(void**)&glVertexAttribI1ui_Z_Z = glbindGetProcAddress(`glVertexAttribI1ui`);
  if (*cast(void**)&glVertexAttribI1ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1ui' not found!`);
  glVertexAttribI1ui_Z_Z(index, x);
}
alias glVertexAttribI1uiEXT = glVertexAttribI1uiEXT_Z_Z;
__gshared glVertexAttribI1uiEXT_Z_Z = function void (GLuint index, GLuint x) { glVertexAttribI1uiEXT_Z_Z_loader(index, x); };
private void glVertexAttribI1uiEXT_Z_Z_loader (GLuint index, GLuint x) {
  *cast(void**)&glVertexAttribI1uiEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI1uiEXT`);
  if (*cast(void**)&glVertexAttribI1uiEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1uiEXT' not found!`);
  glVertexAttribI1uiEXT_Z_Z(index, x);
}
alias glVertexAttribI1uiv = glVertexAttribI1uiv_Z_Z;
__gshared glVertexAttribI1uiv_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI1uiv_Z_Z_loader(index, v); };
private void glVertexAttribI1uiv_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI1uiv_Z_Z = glbindGetProcAddress(`glVertexAttribI1uiv`);
  if (*cast(void**)&glVertexAttribI1uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1uiv' not found!`);
  glVertexAttribI1uiv_Z_Z(index, v);
}
alias glVertexAttribI1uivEXT = glVertexAttribI1uivEXT_Z_Z;
__gshared glVertexAttribI1uivEXT_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI1uivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI1uivEXT_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI1uivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI1uivEXT`);
  if (*cast(void**)&glVertexAttribI1uivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI1uivEXT' not found!`);
  glVertexAttribI1uivEXT_Z_Z(index, v);
}
alias glVertexAttribI2i = glVertexAttribI2i_Z_Z;
__gshared glVertexAttribI2i_Z_Z = function void (GLuint index, GLint x, GLint y) { glVertexAttribI2i_Z_Z_loader(index, x, y); };
private void glVertexAttribI2i_Z_Z_loader (GLuint index, GLint x, GLint y) {
  *cast(void**)&glVertexAttribI2i_Z_Z = glbindGetProcAddress(`glVertexAttribI2i`);
  if (*cast(void**)&glVertexAttribI2i_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2i' not found!`);
  glVertexAttribI2i_Z_Z(index, x, y);
}
alias glVertexAttribI2iEXT = glVertexAttribI2iEXT_Z_Z;
__gshared glVertexAttribI2iEXT_Z_Z = function void (GLuint index, GLint x, GLint y) { glVertexAttribI2iEXT_Z_Z_loader(index, x, y); };
private void glVertexAttribI2iEXT_Z_Z_loader (GLuint index, GLint x, GLint y) {
  *cast(void**)&glVertexAttribI2iEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI2iEXT`);
  if (*cast(void**)&glVertexAttribI2iEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2iEXT' not found!`);
  glVertexAttribI2iEXT_Z_Z(index, x, y);
}
alias glVertexAttribI2iv = glVertexAttribI2iv_Z_Z;
__gshared glVertexAttribI2iv_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI2iv_Z_Z_loader(index, v); };
private void glVertexAttribI2iv_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI2iv_Z_Z = glbindGetProcAddress(`glVertexAttribI2iv`);
  if (*cast(void**)&glVertexAttribI2iv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2iv' not found!`);
  glVertexAttribI2iv_Z_Z(index, v);
}
alias glVertexAttribI2ivEXT = glVertexAttribI2ivEXT_Z_Z;
__gshared glVertexAttribI2ivEXT_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI2ivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI2ivEXT_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI2ivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI2ivEXT`);
  if (*cast(void**)&glVertexAttribI2ivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2ivEXT' not found!`);
  glVertexAttribI2ivEXT_Z_Z(index, v);
}
alias glVertexAttribI2ui = glVertexAttribI2ui_Z_Z;
__gshared glVertexAttribI2ui_Z_Z = function void (GLuint index, GLuint x, GLuint y) { glVertexAttribI2ui_Z_Z_loader(index, x, y); };
private void glVertexAttribI2ui_Z_Z_loader (GLuint index, GLuint x, GLuint y) {
  *cast(void**)&glVertexAttribI2ui_Z_Z = glbindGetProcAddress(`glVertexAttribI2ui`);
  if (*cast(void**)&glVertexAttribI2ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2ui' not found!`);
  glVertexAttribI2ui_Z_Z(index, x, y);
}
alias glVertexAttribI2uiEXT = glVertexAttribI2uiEXT_Z_Z;
__gshared glVertexAttribI2uiEXT_Z_Z = function void (GLuint index, GLuint x, GLuint y) { glVertexAttribI2uiEXT_Z_Z_loader(index, x, y); };
private void glVertexAttribI2uiEXT_Z_Z_loader (GLuint index, GLuint x, GLuint y) {
  *cast(void**)&glVertexAttribI2uiEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI2uiEXT`);
  if (*cast(void**)&glVertexAttribI2uiEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2uiEXT' not found!`);
  glVertexAttribI2uiEXT_Z_Z(index, x, y);
}
alias glVertexAttribI2uiv = glVertexAttribI2uiv_Z_Z;
__gshared glVertexAttribI2uiv_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI2uiv_Z_Z_loader(index, v); };
private void glVertexAttribI2uiv_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI2uiv_Z_Z = glbindGetProcAddress(`glVertexAttribI2uiv`);
  if (*cast(void**)&glVertexAttribI2uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2uiv' not found!`);
  glVertexAttribI2uiv_Z_Z(index, v);
}
alias glVertexAttribI2uivEXT = glVertexAttribI2uivEXT_Z_Z;
__gshared glVertexAttribI2uivEXT_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI2uivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI2uivEXT_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI2uivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI2uivEXT`);
  if (*cast(void**)&glVertexAttribI2uivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI2uivEXT' not found!`);
  glVertexAttribI2uivEXT_Z_Z(index, v);
}
alias glVertexAttribI3i = glVertexAttribI3i_Z_Z;
__gshared glVertexAttribI3i_Z_Z = function void (GLuint index, GLint x, GLint y, GLint z) { glVertexAttribI3i_Z_Z_loader(index, x, y, z); };
private void glVertexAttribI3i_Z_Z_loader (GLuint index, GLint x, GLint y, GLint z) {
  *cast(void**)&glVertexAttribI3i_Z_Z = glbindGetProcAddress(`glVertexAttribI3i`);
  if (*cast(void**)&glVertexAttribI3i_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3i' not found!`);
  glVertexAttribI3i_Z_Z(index, x, y, z);
}
alias glVertexAttribI3iEXT = glVertexAttribI3iEXT_Z_Z;
__gshared glVertexAttribI3iEXT_Z_Z = function void (GLuint index, GLint x, GLint y, GLint z) { glVertexAttribI3iEXT_Z_Z_loader(index, x, y, z); };
private void glVertexAttribI3iEXT_Z_Z_loader (GLuint index, GLint x, GLint y, GLint z) {
  *cast(void**)&glVertexAttribI3iEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI3iEXT`);
  if (*cast(void**)&glVertexAttribI3iEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3iEXT' not found!`);
  glVertexAttribI3iEXT_Z_Z(index, x, y, z);
}
alias glVertexAttribI3iv = glVertexAttribI3iv_Z_Z;
__gshared glVertexAttribI3iv_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI3iv_Z_Z_loader(index, v); };
private void glVertexAttribI3iv_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI3iv_Z_Z = glbindGetProcAddress(`glVertexAttribI3iv`);
  if (*cast(void**)&glVertexAttribI3iv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3iv' not found!`);
  glVertexAttribI3iv_Z_Z(index, v);
}
alias glVertexAttribI3ivEXT = glVertexAttribI3ivEXT_Z_Z;
__gshared glVertexAttribI3ivEXT_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI3ivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI3ivEXT_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI3ivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI3ivEXT`);
  if (*cast(void**)&glVertexAttribI3ivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3ivEXT' not found!`);
  glVertexAttribI3ivEXT_Z_Z(index, v);
}
alias glVertexAttribI3ui = glVertexAttribI3ui_Z_Z;
__gshared glVertexAttribI3ui_Z_Z = function void (GLuint index, GLuint x, GLuint y, GLuint z) { glVertexAttribI3ui_Z_Z_loader(index, x, y, z); };
private void glVertexAttribI3ui_Z_Z_loader (GLuint index, GLuint x, GLuint y, GLuint z) {
  *cast(void**)&glVertexAttribI3ui_Z_Z = glbindGetProcAddress(`glVertexAttribI3ui`);
  if (*cast(void**)&glVertexAttribI3ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3ui' not found!`);
  glVertexAttribI3ui_Z_Z(index, x, y, z);
}
alias glVertexAttribI3uiEXT = glVertexAttribI3uiEXT_Z_Z;
__gshared glVertexAttribI3uiEXT_Z_Z = function void (GLuint index, GLuint x, GLuint y, GLuint z) { glVertexAttribI3uiEXT_Z_Z_loader(index, x, y, z); };
private void glVertexAttribI3uiEXT_Z_Z_loader (GLuint index, GLuint x, GLuint y, GLuint z) {
  *cast(void**)&glVertexAttribI3uiEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI3uiEXT`);
  if (*cast(void**)&glVertexAttribI3uiEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3uiEXT' not found!`);
  glVertexAttribI3uiEXT_Z_Z(index, x, y, z);
}
alias glVertexAttribI3uiv = glVertexAttribI3uiv_Z_Z;
__gshared glVertexAttribI3uiv_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI3uiv_Z_Z_loader(index, v); };
private void glVertexAttribI3uiv_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI3uiv_Z_Z = glbindGetProcAddress(`glVertexAttribI3uiv`);
  if (*cast(void**)&glVertexAttribI3uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3uiv' not found!`);
  glVertexAttribI3uiv_Z_Z(index, v);
}
alias glVertexAttribI3uivEXT = glVertexAttribI3uivEXT_Z_Z;
__gshared glVertexAttribI3uivEXT_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI3uivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI3uivEXT_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI3uivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI3uivEXT`);
  if (*cast(void**)&glVertexAttribI3uivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI3uivEXT' not found!`);
  glVertexAttribI3uivEXT_Z_Z(index, v);
}
alias glVertexAttribI4bv = glVertexAttribI4bv_Z_Z;
__gshared glVertexAttribI4bv_Z_Z = function void (GLuint index, const(GLbyte)* v) { glVertexAttribI4bv_Z_Z_loader(index, v); };
private void glVertexAttribI4bv_Z_Z_loader (GLuint index, const(GLbyte)* v) {
  *cast(void**)&glVertexAttribI4bv_Z_Z = glbindGetProcAddress(`glVertexAttribI4bv`);
  if (*cast(void**)&glVertexAttribI4bv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4bv' not found!`);
  glVertexAttribI4bv_Z_Z(index, v);
}
alias glVertexAttribI4bvEXT = glVertexAttribI4bvEXT_Z_Z;
__gshared glVertexAttribI4bvEXT_Z_Z = function void (GLuint index, const(GLbyte)* v) { glVertexAttribI4bvEXT_Z_Z_loader(index, v); };
private void glVertexAttribI4bvEXT_Z_Z_loader (GLuint index, const(GLbyte)* v) {
  *cast(void**)&glVertexAttribI4bvEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4bvEXT`);
  if (*cast(void**)&glVertexAttribI4bvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4bvEXT' not found!`);
  glVertexAttribI4bvEXT_Z_Z(index, v);
}
alias glVertexAttribI4i = glVertexAttribI4i_Z_Z;
__gshared glVertexAttribI4i_Z_Z = function void (GLuint index, GLint x, GLint y, GLint z, GLint w) { glVertexAttribI4i_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribI4i_Z_Z_loader (GLuint index, GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glVertexAttribI4i_Z_Z = glbindGetProcAddress(`glVertexAttribI4i`);
  if (*cast(void**)&glVertexAttribI4i_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4i' not found!`);
  glVertexAttribI4i_Z_Z(index, x, y, z, w);
}
alias glVertexAttribI4iEXT = glVertexAttribI4iEXT_Z_Z;
__gshared glVertexAttribI4iEXT_Z_Z = function void (GLuint index, GLint x, GLint y, GLint z, GLint w) { glVertexAttribI4iEXT_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribI4iEXT_Z_Z_loader (GLuint index, GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glVertexAttribI4iEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4iEXT`);
  if (*cast(void**)&glVertexAttribI4iEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4iEXT' not found!`);
  glVertexAttribI4iEXT_Z_Z(index, x, y, z, w);
}
alias glVertexAttribI4iv = glVertexAttribI4iv_Z_Z;
__gshared glVertexAttribI4iv_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI4iv_Z_Z_loader(index, v); };
private void glVertexAttribI4iv_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI4iv_Z_Z = glbindGetProcAddress(`glVertexAttribI4iv`);
  if (*cast(void**)&glVertexAttribI4iv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4iv' not found!`);
  glVertexAttribI4iv_Z_Z(index, v);
}
alias glVertexAttribI4ivEXT = glVertexAttribI4ivEXT_Z_Z;
__gshared glVertexAttribI4ivEXT_Z_Z = function void (GLuint index, const(GLint)* v) { glVertexAttribI4ivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI4ivEXT_Z_Z_loader (GLuint index, const(GLint)* v) {
  *cast(void**)&glVertexAttribI4ivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4ivEXT`);
  if (*cast(void**)&glVertexAttribI4ivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ivEXT' not found!`);
  glVertexAttribI4ivEXT_Z_Z(index, v);
}
alias glVertexAttribI4sv = glVertexAttribI4sv_Z_Z;
__gshared glVertexAttribI4sv_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttribI4sv_Z_Z_loader(index, v); };
private void glVertexAttribI4sv_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttribI4sv_Z_Z = glbindGetProcAddress(`glVertexAttribI4sv`);
  if (*cast(void**)&glVertexAttribI4sv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4sv' not found!`);
  glVertexAttribI4sv_Z_Z(index, v);
}
alias glVertexAttribI4svEXT = glVertexAttribI4svEXT_Z_Z;
__gshared glVertexAttribI4svEXT_Z_Z = function void (GLuint index, const(GLshort)* v) { glVertexAttribI4svEXT_Z_Z_loader(index, v); };
private void glVertexAttribI4svEXT_Z_Z_loader (GLuint index, const(GLshort)* v) {
  *cast(void**)&glVertexAttribI4svEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4svEXT`);
  if (*cast(void**)&glVertexAttribI4svEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4svEXT' not found!`);
  glVertexAttribI4svEXT_Z_Z(index, v);
}
alias glVertexAttribI4ubv = glVertexAttribI4ubv_Z_Z;
__gshared glVertexAttribI4ubv_Z_Z = function void (GLuint index, const(GLubyte)* v) { glVertexAttribI4ubv_Z_Z_loader(index, v); };
private void glVertexAttribI4ubv_Z_Z_loader (GLuint index, const(GLubyte)* v) {
  *cast(void**)&glVertexAttribI4ubv_Z_Z = glbindGetProcAddress(`glVertexAttribI4ubv`);
  if (*cast(void**)&glVertexAttribI4ubv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ubv' not found!`);
  glVertexAttribI4ubv_Z_Z(index, v);
}
alias glVertexAttribI4ubvEXT = glVertexAttribI4ubvEXT_Z_Z;
__gshared glVertexAttribI4ubvEXT_Z_Z = function void (GLuint index, const(GLubyte)* v) { glVertexAttribI4ubvEXT_Z_Z_loader(index, v); };
private void glVertexAttribI4ubvEXT_Z_Z_loader (GLuint index, const(GLubyte)* v) {
  *cast(void**)&glVertexAttribI4ubvEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4ubvEXT`);
  if (*cast(void**)&glVertexAttribI4ubvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ubvEXT' not found!`);
  glVertexAttribI4ubvEXT_Z_Z(index, v);
}
alias glVertexAttribI4ui = glVertexAttribI4ui_Z_Z;
__gshared glVertexAttribI4ui_Z_Z = function void (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { glVertexAttribI4ui_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribI4ui_Z_Z_loader (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  *cast(void**)&glVertexAttribI4ui_Z_Z = glbindGetProcAddress(`glVertexAttribI4ui`);
  if (*cast(void**)&glVertexAttribI4ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4ui' not found!`);
  glVertexAttribI4ui_Z_Z(index, x, y, z, w);
}
alias glVertexAttribI4uiEXT = glVertexAttribI4uiEXT_Z_Z;
__gshared glVertexAttribI4uiEXT_Z_Z = function void (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { glVertexAttribI4uiEXT_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribI4uiEXT_Z_Z_loader (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  *cast(void**)&glVertexAttribI4uiEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4uiEXT`);
  if (*cast(void**)&glVertexAttribI4uiEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4uiEXT' not found!`);
  glVertexAttribI4uiEXT_Z_Z(index, x, y, z, w);
}
alias glVertexAttribI4uiv = glVertexAttribI4uiv_Z_Z;
__gshared glVertexAttribI4uiv_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI4uiv_Z_Z_loader(index, v); };
private void glVertexAttribI4uiv_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI4uiv_Z_Z = glbindGetProcAddress(`glVertexAttribI4uiv`);
  if (*cast(void**)&glVertexAttribI4uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4uiv' not found!`);
  glVertexAttribI4uiv_Z_Z(index, v);
}
alias glVertexAttribI4uivEXT = glVertexAttribI4uivEXT_Z_Z;
__gshared glVertexAttribI4uivEXT_Z_Z = function void (GLuint index, const(GLuint)* v) { glVertexAttribI4uivEXT_Z_Z_loader(index, v); };
private void glVertexAttribI4uivEXT_Z_Z_loader (GLuint index, const(GLuint)* v) {
  *cast(void**)&glVertexAttribI4uivEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4uivEXT`);
  if (*cast(void**)&glVertexAttribI4uivEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4uivEXT' not found!`);
  glVertexAttribI4uivEXT_Z_Z(index, v);
}
alias glVertexAttribI4usv = glVertexAttribI4usv_Z_Z;
__gshared glVertexAttribI4usv_Z_Z = function void (GLuint index, const(GLushort)* v) { glVertexAttribI4usv_Z_Z_loader(index, v); };
private void glVertexAttribI4usv_Z_Z_loader (GLuint index, const(GLushort)* v) {
  *cast(void**)&glVertexAttribI4usv_Z_Z = glbindGetProcAddress(`glVertexAttribI4usv`);
  if (*cast(void**)&glVertexAttribI4usv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4usv' not found!`);
  glVertexAttribI4usv_Z_Z(index, v);
}
alias glVertexAttribI4usvEXT = glVertexAttribI4usvEXT_Z_Z;
__gshared glVertexAttribI4usvEXT_Z_Z = function void (GLuint index, const(GLushort)* v) { glVertexAttribI4usvEXT_Z_Z_loader(index, v); };
private void glVertexAttribI4usvEXT_Z_Z_loader (GLuint index, const(GLushort)* v) {
  *cast(void**)&glVertexAttribI4usvEXT_Z_Z = glbindGetProcAddress(`glVertexAttribI4usvEXT`);
  if (*cast(void**)&glVertexAttribI4usvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribI4usvEXT' not found!`);
  glVertexAttribI4usvEXT_Z_Z(index, v);
}
alias glVertexAttribIFormat = glVertexAttribIFormat_Z_Z;
__gshared glVertexAttribIFormat_Z_Z = function void (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { glVertexAttribIFormat_Z_Z_loader(attribindex, size, type, relativeoffset); };
private void glVertexAttribIFormat_Z_Z_loader (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  *cast(void**)&glVertexAttribIFormat_Z_Z = glbindGetProcAddress(`glVertexAttribIFormat`);
  if (*cast(void**)&glVertexAttribIFormat_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribIFormat' not found!`);
  glVertexAttribIFormat_Z_Z(attribindex, size, type, relativeoffset);
}
alias glVertexAttribIFormatNV = glVertexAttribIFormatNV_Z_Z;
__gshared glVertexAttribIFormatNV_Z_Z = function void (GLuint index, GLint size, GLenum type, GLsizei stride) { glVertexAttribIFormatNV_Z_Z_loader(index, size, type, stride); };
private void glVertexAttribIFormatNV_Z_Z_loader (GLuint index, GLint size, GLenum type, GLsizei stride) {
  *cast(void**)&glVertexAttribIFormatNV_Z_Z = glbindGetProcAddress(`glVertexAttribIFormatNV`);
  if (*cast(void**)&glVertexAttribIFormatNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribIFormatNV' not found!`);
  glVertexAttribIFormatNV_Z_Z(index, size, type, stride);
}
alias glVertexAttribIPointer = glVertexAttribIPointer_Z_Z;
__gshared glVertexAttribIPointer_Z_Z = function void (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glVertexAttribIPointer_Z_Z_loader(index, size, type, stride, pointer); };
private void glVertexAttribIPointer_Z_Z_loader (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexAttribIPointer_Z_Z = glbindGetProcAddress(`glVertexAttribIPointer`);
  if (*cast(void**)&glVertexAttribIPointer_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribIPointer' not found!`);
  glVertexAttribIPointer_Z_Z(index, size, type, stride, pointer);
}
alias glVertexAttribIPointerEXT = glVertexAttribIPointerEXT_Z_Z;
__gshared glVertexAttribIPointerEXT_Z_Z = function void (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glVertexAttribIPointerEXT_Z_Z_loader(index, size, type, stride, pointer); };
private void glVertexAttribIPointerEXT_Z_Z_loader (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexAttribIPointerEXT_Z_Z = glbindGetProcAddress(`glVertexAttribIPointerEXT`);
  if (*cast(void**)&glVertexAttribIPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribIPointerEXT' not found!`);
  glVertexAttribIPointerEXT_Z_Z(index, size, type, stride, pointer);
}
alias glVertexAttribL1d = glVertexAttribL1d_Z_Z;
__gshared glVertexAttribL1d_Z_Z = function void (GLuint index, GLdouble x) { glVertexAttribL1d_Z_Z_loader(index, x); };
private void glVertexAttribL1d_Z_Z_loader (GLuint index, GLdouble x) {
  *cast(void**)&glVertexAttribL1d_Z_Z = glbindGetProcAddress(`glVertexAttribL1d`);
  if (*cast(void**)&glVertexAttribL1d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1d' not found!`);
  glVertexAttribL1d_Z_Z(index, x);
}
alias glVertexAttribL1dEXT = glVertexAttribL1dEXT_Z_Z;
__gshared glVertexAttribL1dEXT_Z_Z = function void (GLuint index, GLdouble x) { glVertexAttribL1dEXT_Z_Z_loader(index, x); };
private void glVertexAttribL1dEXT_Z_Z_loader (GLuint index, GLdouble x) {
  *cast(void**)&glVertexAttribL1dEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL1dEXT`);
  if (*cast(void**)&glVertexAttribL1dEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1dEXT' not found!`);
  glVertexAttribL1dEXT_Z_Z(index, x);
}
alias glVertexAttribL1dv = glVertexAttribL1dv_Z_Z;
__gshared glVertexAttribL1dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL1dv_Z_Z_loader(index, v); };
private void glVertexAttribL1dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL1dv_Z_Z = glbindGetProcAddress(`glVertexAttribL1dv`);
  if (*cast(void**)&glVertexAttribL1dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1dv' not found!`);
  glVertexAttribL1dv_Z_Z(index, v);
}
alias glVertexAttribL1dvEXT = glVertexAttribL1dvEXT_Z_Z;
__gshared glVertexAttribL1dvEXT_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL1dvEXT_Z_Z_loader(index, v); };
private void glVertexAttribL1dvEXT_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL1dvEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL1dvEXT`);
  if (*cast(void**)&glVertexAttribL1dvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1dvEXT' not found!`);
  glVertexAttribL1dvEXT_Z_Z(index, v);
}
alias glVertexAttribL1i64NV = glVertexAttribL1i64NV_Z_Z;
__gshared glVertexAttribL1i64NV_Z_Z = function void (GLuint index, GLint64EXT x) { glVertexAttribL1i64NV_Z_Z_loader(index, x); };
private void glVertexAttribL1i64NV_Z_Z_loader (GLuint index, GLint64EXT x) {
  *cast(void**)&glVertexAttribL1i64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL1i64NV`);
  if (*cast(void**)&glVertexAttribL1i64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1i64NV' not found!`);
  glVertexAttribL1i64NV_Z_Z(index, x);
}
alias glVertexAttribL1i64vNV = glVertexAttribL1i64vNV_Z_Z;
__gshared glVertexAttribL1i64vNV_Z_Z = function void (GLuint index, const(GLint64EXT)* v) { glVertexAttribL1i64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL1i64vNV_Z_Z_loader (GLuint index, const(GLint64EXT)* v) {
  *cast(void**)&glVertexAttribL1i64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL1i64vNV`);
  if (*cast(void**)&glVertexAttribL1i64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1i64vNV' not found!`);
  glVertexAttribL1i64vNV_Z_Z(index, v);
}
alias glVertexAttribL1ui64ARB = glVertexAttribL1ui64ARB_Z_Z;
__gshared glVertexAttribL1ui64ARB_Z_Z = function void (GLuint index, GLuint64EXT x) { glVertexAttribL1ui64ARB_Z_Z_loader(index, x); };
private void glVertexAttribL1ui64ARB_Z_Z_loader (GLuint index, GLuint64EXT x) {
  *cast(void**)&glVertexAttribL1ui64ARB_Z_Z = glbindGetProcAddress(`glVertexAttribL1ui64ARB`);
  if (*cast(void**)&glVertexAttribL1ui64ARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64ARB' not found!`);
  glVertexAttribL1ui64ARB_Z_Z(index, x);
}
alias glVertexAttribL1ui64NV = glVertexAttribL1ui64NV_Z_Z;
__gshared glVertexAttribL1ui64NV_Z_Z = function void (GLuint index, GLuint64EXT x) { glVertexAttribL1ui64NV_Z_Z_loader(index, x); };
private void glVertexAttribL1ui64NV_Z_Z_loader (GLuint index, GLuint64EXT x) {
  *cast(void**)&glVertexAttribL1ui64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL1ui64NV`);
  if (*cast(void**)&glVertexAttribL1ui64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64NV' not found!`);
  glVertexAttribL1ui64NV_Z_Z(index, x);
}
alias glVertexAttribL1ui64vARB = glVertexAttribL1ui64vARB_Z_Z;
__gshared glVertexAttribL1ui64vARB_Z_Z = function void (GLuint index, const(GLuint64EXT)* v) { glVertexAttribL1ui64vARB_Z_Z_loader(index, v); };
private void glVertexAttribL1ui64vARB_Z_Z_loader (GLuint index, const(GLuint64EXT)* v) {
  *cast(void**)&glVertexAttribL1ui64vARB_Z_Z = glbindGetProcAddress(`glVertexAttribL1ui64vARB`);
  if (*cast(void**)&glVertexAttribL1ui64vARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vARB' not found!`);
  glVertexAttribL1ui64vARB_Z_Z(index, v);
}
alias glVertexAttribL1ui64vNV = glVertexAttribL1ui64vNV_Z_Z;
__gshared glVertexAttribL1ui64vNV_Z_Z = function void (GLuint index, const(GLuint64EXT)* v) { glVertexAttribL1ui64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL1ui64vNV_Z_Z_loader (GLuint index, const(GLuint64EXT)* v) {
  *cast(void**)&glVertexAttribL1ui64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL1ui64vNV`);
  if (*cast(void**)&glVertexAttribL1ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vNV' not found!`);
  glVertexAttribL1ui64vNV_Z_Z(index, v);
}
alias glVertexAttribL2d = glVertexAttribL2d_Z_Z;
__gshared glVertexAttribL2d_Z_Z = function void (GLuint index, GLdouble x, GLdouble y) { glVertexAttribL2d_Z_Z_loader(index, x, y); };
private void glVertexAttribL2d_Z_Z_loader (GLuint index, GLdouble x, GLdouble y) {
  *cast(void**)&glVertexAttribL2d_Z_Z = glbindGetProcAddress(`glVertexAttribL2d`);
  if (*cast(void**)&glVertexAttribL2d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2d' not found!`);
  glVertexAttribL2d_Z_Z(index, x, y);
}
alias glVertexAttribL2dEXT = glVertexAttribL2dEXT_Z_Z;
__gshared glVertexAttribL2dEXT_Z_Z = function void (GLuint index, GLdouble x, GLdouble y) { glVertexAttribL2dEXT_Z_Z_loader(index, x, y); };
private void glVertexAttribL2dEXT_Z_Z_loader (GLuint index, GLdouble x, GLdouble y) {
  *cast(void**)&glVertexAttribL2dEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL2dEXT`);
  if (*cast(void**)&glVertexAttribL2dEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2dEXT' not found!`);
  glVertexAttribL2dEXT_Z_Z(index, x, y);
}
alias glVertexAttribL2dv = glVertexAttribL2dv_Z_Z;
__gshared glVertexAttribL2dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL2dv_Z_Z_loader(index, v); };
private void glVertexAttribL2dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL2dv_Z_Z = glbindGetProcAddress(`glVertexAttribL2dv`);
  if (*cast(void**)&glVertexAttribL2dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2dv' not found!`);
  glVertexAttribL2dv_Z_Z(index, v);
}
alias glVertexAttribL2dvEXT = glVertexAttribL2dvEXT_Z_Z;
__gshared glVertexAttribL2dvEXT_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL2dvEXT_Z_Z_loader(index, v); };
private void glVertexAttribL2dvEXT_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL2dvEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL2dvEXT`);
  if (*cast(void**)&glVertexAttribL2dvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2dvEXT' not found!`);
  glVertexAttribL2dvEXT_Z_Z(index, v);
}
alias glVertexAttribL2i64NV = glVertexAttribL2i64NV_Z_Z;
__gshared glVertexAttribL2i64NV_Z_Z = function void (GLuint index, GLint64EXT x, GLint64EXT y) { glVertexAttribL2i64NV_Z_Z_loader(index, x, y); };
private void glVertexAttribL2i64NV_Z_Z_loader (GLuint index, GLint64EXT x, GLint64EXT y) {
  *cast(void**)&glVertexAttribL2i64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL2i64NV`);
  if (*cast(void**)&glVertexAttribL2i64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2i64NV' not found!`);
  glVertexAttribL2i64NV_Z_Z(index, x, y);
}
alias glVertexAttribL2i64vNV = glVertexAttribL2i64vNV_Z_Z;
__gshared glVertexAttribL2i64vNV_Z_Z = function void (GLuint index, const(GLint64EXT)* v) { glVertexAttribL2i64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL2i64vNV_Z_Z_loader (GLuint index, const(GLint64EXT)* v) {
  *cast(void**)&glVertexAttribL2i64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL2i64vNV`);
  if (*cast(void**)&glVertexAttribL2i64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2i64vNV' not found!`);
  glVertexAttribL2i64vNV_Z_Z(index, v);
}
alias glVertexAttribL2ui64NV = glVertexAttribL2ui64NV_Z_Z;
__gshared glVertexAttribL2ui64NV_Z_Z = function void (GLuint index, GLuint64EXT x, GLuint64EXT y) { glVertexAttribL2ui64NV_Z_Z_loader(index, x, y); };
private void glVertexAttribL2ui64NV_Z_Z_loader (GLuint index, GLuint64EXT x, GLuint64EXT y) {
  *cast(void**)&glVertexAttribL2ui64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL2ui64NV`);
  if (*cast(void**)&glVertexAttribL2ui64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2ui64NV' not found!`);
  glVertexAttribL2ui64NV_Z_Z(index, x, y);
}
alias glVertexAttribL2ui64vNV = glVertexAttribL2ui64vNV_Z_Z;
__gshared glVertexAttribL2ui64vNV_Z_Z = function void (GLuint index, const(GLuint64EXT)* v) { glVertexAttribL2ui64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL2ui64vNV_Z_Z_loader (GLuint index, const(GLuint64EXT)* v) {
  *cast(void**)&glVertexAttribL2ui64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL2ui64vNV`);
  if (*cast(void**)&glVertexAttribL2ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL2ui64vNV' not found!`);
  glVertexAttribL2ui64vNV_Z_Z(index, v);
}
alias glVertexAttribL3d = glVertexAttribL3d_Z_Z;
__gshared glVertexAttribL3d_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z) { glVertexAttribL3d_Z_Z_loader(index, x, y, z); };
private void glVertexAttribL3d_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glVertexAttribL3d_Z_Z = glbindGetProcAddress(`glVertexAttribL3d`);
  if (*cast(void**)&glVertexAttribL3d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3d' not found!`);
  glVertexAttribL3d_Z_Z(index, x, y, z);
}
alias glVertexAttribL3dEXT = glVertexAttribL3dEXT_Z_Z;
__gshared glVertexAttribL3dEXT_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z) { glVertexAttribL3dEXT_Z_Z_loader(index, x, y, z); };
private void glVertexAttribL3dEXT_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glVertexAttribL3dEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL3dEXT`);
  if (*cast(void**)&glVertexAttribL3dEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3dEXT' not found!`);
  glVertexAttribL3dEXT_Z_Z(index, x, y, z);
}
alias glVertexAttribL3dv = glVertexAttribL3dv_Z_Z;
__gshared glVertexAttribL3dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL3dv_Z_Z_loader(index, v); };
private void glVertexAttribL3dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL3dv_Z_Z = glbindGetProcAddress(`glVertexAttribL3dv`);
  if (*cast(void**)&glVertexAttribL3dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3dv' not found!`);
  glVertexAttribL3dv_Z_Z(index, v);
}
alias glVertexAttribL3dvEXT = glVertexAttribL3dvEXT_Z_Z;
__gshared glVertexAttribL3dvEXT_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL3dvEXT_Z_Z_loader(index, v); };
private void glVertexAttribL3dvEXT_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL3dvEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL3dvEXT`);
  if (*cast(void**)&glVertexAttribL3dvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3dvEXT' not found!`);
  glVertexAttribL3dvEXT_Z_Z(index, v);
}
alias glVertexAttribL3i64NV = glVertexAttribL3i64NV_Z_Z;
__gshared glVertexAttribL3i64NV_Z_Z = function void (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { glVertexAttribL3i64NV_Z_Z_loader(index, x, y, z); };
private void glVertexAttribL3i64NV_Z_Z_loader (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  *cast(void**)&glVertexAttribL3i64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL3i64NV`);
  if (*cast(void**)&glVertexAttribL3i64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3i64NV' not found!`);
  glVertexAttribL3i64NV_Z_Z(index, x, y, z);
}
alias glVertexAttribL3i64vNV = glVertexAttribL3i64vNV_Z_Z;
__gshared glVertexAttribL3i64vNV_Z_Z = function void (GLuint index, const(GLint64EXT)* v) { glVertexAttribL3i64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL3i64vNV_Z_Z_loader (GLuint index, const(GLint64EXT)* v) {
  *cast(void**)&glVertexAttribL3i64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL3i64vNV`);
  if (*cast(void**)&glVertexAttribL3i64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3i64vNV' not found!`);
  glVertexAttribL3i64vNV_Z_Z(index, v);
}
alias glVertexAttribL3ui64NV = glVertexAttribL3ui64NV_Z_Z;
__gshared glVertexAttribL3ui64NV_Z_Z = function void (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { glVertexAttribL3ui64NV_Z_Z_loader(index, x, y, z); };
private void glVertexAttribL3ui64NV_Z_Z_loader (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  *cast(void**)&glVertexAttribL3ui64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL3ui64NV`);
  if (*cast(void**)&glVertexAttribL3ui64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3ui64NV' not found!`);
  glVertexAttribL3ui64NV_Z_Z(index, x, y, z);
}
alias glVertexAttribL3ui64vNV = glVertexAttribL3ui64vNV_Z_Z;
__gshared glVertexAttribL3ui64vNV_Z_Z = function void (GLuint index, const(GLuint64EXT)* v) { glVertexAttribL3ui64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL3ui64vNV_Z_Z_loader (GLuint index, const(GLuint64EXT)* v) {
  *cast(void**)&glVertexAttribL3ui64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL3ui64vNV`);
  if (*cast(void**)&glVertexAttribL3ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL3ui64vNV' not found!`);
  glVertexAttribL3ui64vNV_Z_Z(index, v);
}
alias glVertexAttribL4d = glVertexAttribL4d_Z_Z;
__gshared glVertexAttribL4d_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glVertexAttribL4d_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribL4d_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glVertexAttribL4d_Z_Z = glbindGetProcAddress(`glVertexAttribL4d`);
  if (*cast(void**)&glVertexAttribL4d_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4d' not found!`);
  glVertexAttribL4d_Z_Z(index, x, y, z, w);
}
alias glVertexAttribL4dEXT = glVertexAttribL4dEXT_Z_Z;
__gshared glVertexAttribL4dEXT_Z_Z = function void (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glVertexAttribL4dEXT_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribL4dEXT_Z_Z_loader (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glVertexAttribL4dEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL4dEXT`);
  if (*cast(void**)&glVertexAttribL4dEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4dEXT' not found!`);
  glVertexAttribL4dEXT_Z_Z(index, x, y, z, w);
}
alias glVertexAttribL4dv = glVertexAttribL4dv_Z_Z;
__gshared glVertexAttribL4dv_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL4dv_Z_Z_loader(index, v); };
private void glVertexAttribL4dv_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL4dv_Z_Z = glbindGetProcAddress(`glVertexAttribL4dv`);
  if (*cast(void**)&glVertexAttribL4dv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4dv' not found!`);
  glVertexAttribL4dv_Z_Z(index, v);
}
alias glVertexAttribL4dvEXT = glVertexAttribL4dvEXT_Z_Z;
__gshared glVertexAttribL4dvEXT_Z_Z = function void (GLuint index, const(GLdouble)* v) { glVertexAttribL4dvEXT_Z_Z_loader(index, v); };
private void glVertexAttribL4dvEXT_Z_Z_loader (GLuint index, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribL4dvEXT_Z_Z = glbindGetProcAddress(`glVertexAttribL4dvEXT`);
  if (*cast(void**)&glVertexAttribL4dvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4dvEXT' not found!`);
  glVertexAttribL4dvEXT_Z_Z(index, v);
}
alias glVertexAttribL4i64NV = glVertexAttribL4i64NV_Z_Z;
__gshared glVertexAttribL4i64NV_Z_Z = function void (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { glVertexAttribL4i64NV_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribL4i64NV_Z_Z_loader (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  *cast(void**)&glVertexAttribL4i64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL4i64NV`);
  if (*cast(void**)&glVertexAttribL4i64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4i64NV' not found!`);
  glVertexAttribL4i64NV_Z_Z(index, x, y, z, w);
}
alias glVertexAttribL4i64vNV = glVertexAttribL4i64vNV_Z_Z;
__gshared glVertexAttribL4i64vNV_Z_Z = function void (GLuint index, const(GLint64EXT)* v) { glVertexAttribL4i64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL4i64vNV_Z_Z_loader (GLuint index, const(GLint64EXT)* v) {
  *cast(void**)&glVertexAttribL4i64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL4i64vNV`);
  if (*cast(void**)&glVertexAttribL4i64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4i64vNV' not found!`);
  glVertexAttribL4i64vNV_Z_Z(index, v);
}
alias glVertexAttribL4ui64NV = glVertexAttribL4ui64NV_Z_Z;
__gshared glVertexAttribL4ui64NV_Z_Z = function void (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { glVertexAttribL4ui64NV_Z_Z_loader(index, x, y, z, w); };
private void glVertexAttribL4ui64NV_Z_Z_loader (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  *cast(void**)&glVertexAttribL4ui64NV_Z_Z = glbindGetProcAddress(`glVertexAttribL4ui64NV`);
  if (*cast(void**)&glVertexAttribL4ui64NV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4ui64NV' not found!`);
  glVertexAttribL4ui64NV_Z_Z(index, x, y, z, w);
}
alias glVertexAttribL4ui64vNV = glVertexAttribL4ui64vNV_Z_Z;
__gshared glVertexAttribL4ui64vNV_Z_Z = function void (GLuint index, const(GLuint64EXT)* v) { glVertexAttribL4ui64vNV_Z_Z_loader(index, v); };
private void glVertexAttribL4ui64vNV_Z_Z_loader (GLuint index, const(GLuint64EXT)* v) {
  *cast(void**)&glVertexAttribL4ui64vNV_Z_Z = glbindGetProcAddress(`glVertexAttribL4ui64vNV`);
  if (*cast(void**)&glVertexAttribL4ui64vNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribL4ui64vNV' not found!`);
  glVertexAttribL4ui64vNV_Z_Z(index, v);
}
alias glVertexAttribLFormat = glVertexAttribLFormat_Z_Z;
__gshared glVertexAttribLFormat_Z_Z = function void (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { glVertexAttribLFormat_Z_Z_loader(attribindex, size, type, relativeoffset); };
private void glVertexAttribLFormat_Z_Z_loader (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  *cast(void**)&glVertexAttribLFormat_Z_Z = glbindGetProcAddress(`glVertexAttribLFormat`);
  if (*cast(void**)&glVertexAttribLFormat_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribLFormat' not found!`);
  glVertexAttribLFormat_Z_Z(attribindex, size, type, relativeoffset);
}
alias glVertexAttribLFormatNV = glVertexAttribLFormatNV_Z_Z;
__gshared glVertexAttribLFormatNV_Z_Z = function void (GLuint index, GLint size, GLenum type, GLsizei stride) { glVertexAttribLFormatNV_Z_Z_loader(index, size, type, stride); };
private void glVertexAttribLFormatNV_Z_Z_loader (GLuint index, GLint size, GLenum type, GLsizei stride) {
  *cast(void**)&glVertexAttribLFormatNV_Z_Z = glbindGetProcAddress(`glVertexAttribLFormatNV`);
  if (*cast(void**)&glVertexAttribLFormatNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribLFormatNV' not found!`);
  glVertexAttribLFormatNV_Z_Z(index, size, type, stride);
}
alias glVertexAttribLPointer = glVertexAttribLPointer_Z_Z;
__gshared glVertexAttribLPointer_Z_Z = function void (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glVertexAttribLPointer_Z_Z_loader(index, size, type, stride, pointer); };
private void glVertexAttribLPointer_Z_Z_loader (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexAttribLPointer_Z_Z = glbindGetProcAddress(`glVertexAttribLPointer`);
  if (*cast(void**)&glVertexAttribLPointer_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribLPointer' not found!`);
  glVertexAttribLPointer_Z_Z(index, size, type, stride, pointer);
}
alias glVertexAttribLPointerEXT = glVertexAttribLPointerEXT_Z_Z;
__gshared glVertexAttribLPointerEXT_Z_Z = function void (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glVertexAttribLPointerEXT_Z_Z_loader(index, size, type, stride, pointer); };
private void glVertexAttribLPointerEXT_Z_Z_loader (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexAttribLPointerEXT_Z_Z = glbindGetProcAddress(`glVertexAttribLPointerEXT`);
  if (*cast(void**)&glVertexAttribLPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribLPointerEXT' not found!`);
  glVertexAttribLPointerEXT_Z_Z(index, size, type, stride, pointer);
}
alias glVertexAttribP1ui = glVertexAttribP1ui_Z_Z;
__gshared glVertexAttribP1ui_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, GLuint value) { glVertexAttribP1ui_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP1ui_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  *cast(void**)&glVertexAttribP1ui_Z_Z = glbindGetProcAddress(`glVertexAttribP1ui`);
  if (*cast(void**)&glVertexAttribP1ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP1ui' not found!`);
  glVertexAttribP1ui_Z_Z(index, type, normalized, value);
}
alias glVertexAttribP1uiv = glVertexAttribP1uiv_Z_Z;
__gshared glVertexAttribP1uiv_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) { glVertexAttribP1uiv_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP1uiv_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) {
  *cast(void**)&glVertexAttribP1uiv_Z_Z = glbindGetProcAddress(`glVertexAttribP1uiv`);
  if (*cast(void**)&glVertexAttribP1uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP1uiv' not found!`);
  glVertexAttribP1uiv_Z_Z(index, type, normalized, value);
}
alias glVertexAttribP2ui = glVertexAttribP2ui_Z_Z;
__gshared glVertexAttribP2ui_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, GLuint value) { glVertexAttribP2ui_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP2ui_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  *cast(void**)&glVertexAttribP2ui_Z_Z = glbindGetProcAddress(`glVertexAttribP2ui`);
  if (*cast(void**)&glVertexAttribP2ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP2ui' not found!`);
  glVertexAttribP2ui_Z_Z(index, type, normalized, value);
}
alias glVertexAttribP2uiv = glVertexAttribP2uiv_Z_Z;
__gshared glVertexAttribP2uiv_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) { glVertexAttribP2uiv_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP2uiv_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) {
  *cast(void**)&glVertexAttribP2uiv_Z_Z = glbindGetProcAddress(`glVertexAttribP2uiv`);
  if (*cast(void**)&glVertexAttribP2uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP2uiv' not found!`);
  glVertexAttribP2uiv_Z_Z(index, type, normalized, value);
}
alias glVertexAttribP3ui = glVertexAttribP3ui_Z_Z;
__gshared glVertexAttribP3ui_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, GLuint value) { glVertexAttribP3ui_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP3ui_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  *cast(void**)&glVertexAttribP3ui_Z_Z = glbindGetProcAddress(`glVertexAttribP3ui`);
  if (*cast(void**)&glVertexAttribP3ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP3ui' not found!`);
  glVertexAttribP3ui_Z_Z(index, type, normalized, value);
}
alias glVertexAttribP3uiv = glVertexAttribP3uiv_Z_Z;
__gshared glVertexAttribP3uiv_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) { glVertexAttribP3uiv_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP3uiv_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) {
  *cast(void**)&glVertexAttribP3uiv_Z_Z = glbindGetProcAddress(`glVertexAttribP3uiv`);
  if (*cast(void**)&glVertexAttribP3uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP3uiv' not found!`);
  glVertexAttribP3uiv_Z_Z(index, type, normalized, value);
}
alias glVertexAttribP4ui = glVertexAttribP4ui_Z_Z;
__gshared glVertexAttribP4ui_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, GLuint value) { glVertexAttribP4ui_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP4ui_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  *cast(void**)&glVertexAttribP4ui_Z_Z = glbindGetProcAddress(`glVertexAttribP4ui`);
  if (*cast(void**)&glVertexAttribP4ui_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP4ui' not found!`);
  glVertexAttribP4ui_Z_Z(index, type, normalized, value);
}
alias glVertexAttribP4uiv = glVertexAttribP4uiv_Z_Z;
__gshared glVertexAttribP4uiv_Z_Z = function void (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) { glVertexAttribP4uiv_Z_Z_loader(index, type, normalized, value); };
private void glVertexAttribP4uiv_Z_Z_loader (GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) {
  *cast(void**)&glVertexAttribP4uiv_Z_Z = glbindGetProcAddress(`glVertexAttribP4uiv`);
  if (*cast(void**)&glVertexAttribP4uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribP4uiv' not found!`);
  glVertexAttribP4uiv_Z_Z(index, type, normalized, value);
}
alias glVertexAttribParameteriAMD = glVertexAttribParameteriAMD_Z_Z;
__gshared glVertexAttribParameteriAMD_Z_Z = function void (GLuint index, GLenum pname, GLint param) { glVertexAttribParameteriAMD_Z_Z_loader(index, pname, param); };
private void glVertexAttribParameteriAMD_Z_Z_loader (GLuint index, GLenum pname, GLint param) {
  *cast(void**)&glVertexAttribParameteriAMD_Z_Z = glbindGetProcAddress(`glVertexAttribParameteriAMD`);
  if (*cast(void**)&glVertexAttribParameteriAMD_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribParameteriAMD' not found!`);
  glVertexAttribParameteriAMD_Z_Z(index, pname, param);
}
alias glVertexAttribPointer = glVertexAttribPointer_Z_Z;
__gshared glVertexAttribPointer_Z_Z = function void (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(void)* pointer) { glVertexAttribPointer_Z_Z_loader(index, size, type, normalized, stride, pointer); };
private void glVertexAttribPointer_Z_Z_loader (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexAttribPointer_Z_Z = glbindGetProcAddress(`glVertexAttribPointer`);
  if (*cast(void**)&glVertexAttribPointer_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribPointer' not found!`);
  glVertexAttribPointer_Z_Z(index, size, type, normalized, stride, pointer);
}
alias glVertexAttribPointerARB = glVertexAttribPointerARB_Z_Z;
__gshared glVertexAttribPointerARB_Z_Z = function void (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(void)* pointer) { glVertexAttribPointerARB_Z_Z_loader(index, size, type, normalized, stride, pointer); };
private void glVertexAttribPointerARB_Z_Z_loader (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexAttribPointerARB_Z_Z = glbindGetProcAddress(`glVertexAttribPointerARB`);
  if (*cast(void**)&glVertexAttribPointerARB_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribPointerARB' not found!`);
  glVertexAttribPointerARB_Z_Z(index, size, type, normalized, stride, pointer);
}
alias glVertexAttribPointerNV = glVertexAttribPointerNV_Z_Z;
__gshared glVertexAttribPointerNV_Z_Z = function void (GLuint index, GLint fsize, GLenum type, GLsizei stride, const(void)* pointer) { glVertexAttribPointerNV_Z_Z_loader(index, fsize, type, stride, pointer); };
private void glVertexAttribPointerNV_Z_Z_loader (GLuint index, GLint fsize, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexAttribPointerNV_Z_Z = glbindGetProcAddress(`glVertexAttribPointerNV`);
  if (*cast(void**)&glVertexAttribPointerNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribPointerNV' not found!`);
  glVertexAttribPointerNV_Z_Z(index, fsize, type, stride, pointer);
}
alias glVertexAttribs1dvNV = glVertexAttribs1dvNV_Z_Z;
__gshared glVertexAttribs1dvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLdouble)* v) { glVertexAttribs1dvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs1dvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribs1dvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs1dvNV`);
  if (*cast(void**)&glVertexAttribs1dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs1dvNV' not found!`);
  glVertexAttribs1dvNV_Z_Z(index, count, v);
}
alias glVertexAttribs1fvNV = glVertexAttribs1fvNV_Z_Z;
__gshared glVertexAttribs1fvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLfloat)* v) { glVertexAttribs1fvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs1fvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glVertexAttribs1fvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs1fvNV`);
  if (*cast(void**)&glVertexAttribs1fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs1fvNV' not found!`);
  glVertexAttribs1fvNV_Z_Z(index, count, v);
}
alias glVertexAttribs1hvNV = glVertexAttribs1hvNV_Z_Z;
__gshared glVertexAttribs1hvNV_Z_Z = function void (GLuint index, GLsizei n, const(GLhalfNV)* v) { glVertexAttribs1hvNV_Z_Z_loader(index, n, v); };
private void glVertexAttribs1hvNV_Z_Z_loader (GLuint index, GLsizei n, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttribs1hvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs1hvNV`);
  if (*cast(void**)&glVertexAttribs1hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs1hvNV' not found!`);
  glVertexAttribs1hvNV_Z_Z(index, n, v);
}
alias glVertexAttribs1svNV = glVertexAttribs1svNV_Z_Z;
__gshared glVertexAttribs1svNV_Z_Z = function void (GLuint index, GLsizei count, const(GLshort)* v) { glVertexAttribs1svNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs1svNV_Z_Z_loader (GLuint index, GLsizei count, const(GLshort)* v) {
  *cast(void**)&glVertexAttribs1svNV_Z_Z = glbindGetProcAddress(`glVertexAttribs1svNV`);
  if (*cast(void**)&glVertexAttribs1svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs1svNV' not found!`);
  glVertexAttribs1svNV_Z_Z(index, count, v);
}
alias glVertexAttribs2dvNV = glVertexAttribs2dvNV_Z_Z;
__gshared glVertexAttribs2dvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLdouble)* v) { glVertexAttribs2dvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs2dvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribs2dvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs2dvNV`);
  if (*cast(void**)&glVertexAttribs2dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs2dvNV' not found!`);
  glVertexAttribs2dvNV_Z_Z(index, count, v);
}
alias glVertexAttribs2fvNV = glVertexAttribs2fvNV_Z_Z;
__gshared glVertexAttribs2fvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLfloat)* v) { glVertexAttribs2fvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs2fvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glVertexAttribs2fvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs2fvNV`);
  if (*cast(void**)&glVertexAttribs2fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs2fvNV' not found!`);
  glVertexAttribs2fvNV_Z_Z(index, count, v);
}
alias glVertexAttribs2hvNV = glVertexAttribs2hvNV_Z_Z;
__gshared glVertexAttribs2hvNV_Z_Z = function void (GLuint index, GLsizei n, const(GLhalfNV)* v) { glVertexAttribs2hvNV_Z_Z_loader(index, n, v); };
private void glVertexAttribs2hvNV_Z_Z_loader (GLuint index, GLsizei n, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttribs2hvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs2hvNV`);
  if (*cast(void**)&glVertexAttribs2hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs2hvNV' not found!`);
  glVertexAttribs2hvNV_Z_Z(index, n, v);
}
alias glVertexAttribs2svNV = glVertexAttribs2svNV_Z_Z;
__gshared glVertexAttribs2svNV_Z_Z = function void (GLuint index, GLsizei count, const(GLshort)* v) { glVertexAttribs2svNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs2svNV_Z_Z_loader (GLuint index, GLsizei count, const(GLshort)* v) {
  *cast(void**)&glVertexAttribs2svNV_Z_Z = glbindGetProcAddress(`glVertexAttribs2svNV`);
  if (*cast(void**)&glVertexAttribs2svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs2svNV' not found!`);
  glVertexAttribs2svNV_Z_Z(index, count, v);
}
alias glVertexAttribs3dvNV = glVertexAttribs3dvNV_Z_Z;
__gshared glVertexAttribs3dvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLdouble)* v) { glVertexAttribs3dvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs3dvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribs3dvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs3dvNV`);
  if (*cast(void**)&glVertexAttribs3dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs3dvNV' not found!`);
  glVertexAttribs3dvNV_Z_Z(index, count, v);
}
alias glVertexAttribs3fvNV = glVertexAttribs3fvNV_Z_Z;
__gshared glVertexAttribs3fvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLfloat)* v) { glVertexAttribs3fvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs3fvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glVertexAttribs3fvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs3fvNV`);
  if (*cast(void**)&glVertexAttribs3fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs3fvNV' not found!`);
  glVertexAttribs3fvNV_Z_Z(index, count, v);
}
alias glVertexAttribs3hvNV = glVertexAttribs3hvNV_Z_Z;
__gshared glVertexAttribs3hvNV_Z_Z = function void (GLuint index, GLsizei n, const(GLhalfNV)* v) { glVertexAttribs3hvNV_Z_Z_loader(index, n, v); };
private void glVertexAttribs3hvNV_Z_Z_loader (GLuint index, GLsizei n, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttribs3hvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs3hvNV`);
  if (*cast(void**)&glVertexAttribs3hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs3hvNV' not found!`);
  glVertexAttribs3hvNV_Z_Z(index, n, v);
}
alias glVertexAttribs3svNV = glVertexAttribs3svNV_Z_Z;
__gshared glVertexAttribs3svNV_Z_Z = function void (GLuint index, GLsizei count, const(GLshort)* v) { glVertexAttribs3svNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs3svNV_Z_Z_loader (GLuint index, GLsizei count, const(GLshort)* v) {
  *cast(void**)&glVertexAttribs3svNV_Z_Z = glbindGetProcAddress(`glVertexAttribs3svNV`);
  if (*cast(void**)&glVertexAttribs3svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs3svNV' not found!`);
  glVertexAttribs3svNV_Z_Z(index, count, v);
}
alias glVertexAttribs4dvNV = glVertexAttribs4dvNV_Z_Z;
__gshared glVertexAttribs4dvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLdouble)* v) { glVertexAttribs4dvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs4dvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLdouble)* v) {
  *cast(void**)&glVertexAttribs4dvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs4dvNV`);
  if (*cast(void**)&glVertexAttribs4dvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs4dvNV' not found!`);
  glVertexAttribs4dvNV_Z_Z(index, count, v);
}
alias glVertexAttribs4fvNV = glVertexAttribs4fvNV_Z_Z;
__gshared glVertexAttribs4fvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLfloat)* v) { glVertexAttribs4fvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs4fvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glVertexAttribs4fvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs4fvNV`);
  if (*cast(void**)&glVertexAttribs4fvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs4fvNV' not found!`);
  glVertexAttribs4fvNV_Z_Z(index, count, v);
}
alias glVertexAttribs4hvNV = glVertexAttribs4hvNV_Z_Z;
__gshared glVertexAttribs4hvNV_Z_Z = function void (GLuint index, GLsizei n, const(GLhalfNV)* v) { glVertexAttribs4hvNV_Z_Z_loader(index, n, v); };
private void glVertexAttribs4hvNV_Z_Z_loader (GLuint index, GLsizei n, const(GLhalfNV)* v) {
  *cast(void**)&glVertexAttribs4hvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs4hvNV`);
  if (*cast(void**)&glVertexAttribs4hvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs4hvNV' not found!`);
  glVertexAttribs4hvNV_Z_Z(index, n, v);
}
alias glVertexAttribs4svNV = glVertexAttribs4svNV_Z_Z;
__gshared glVertexAttribs4svNV_Z_Z = function void (GLuint index, GLsizei count, const(GLshort)* v) { glVertexAttribs4svNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs4svNV_Z_Z_loader (GLuint index, GLsizei count, const(GLshort)* v) {
  *cast(void**)&glVertexAttribs4svNV_Z_Z = glbindGetProcAddress(`glVertexAttribs4svNV`);
  if (*cast(void**)&glVertexAttribs4svNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs4svNV' not found!`);
  glVertexAttribs4svNV_Z_Z(index, count, v);
}
alias glVertexAttribs4ubvNV = glVertexAttribs4ubvNV_Z_Z;
__gshared glVertexAttribs4ubvNV_Z_Z = function void (GLuint index, GLsizei count, const(GLubyte)* v) { glVertexAttribs4ubvNV_Z_Z_loader(index, count, v); };
private void glVertexAttribs4ubvNV_Z_Z_loader (GLuint index, GLsizei count, const(GLubyte)* v) {
  *cast(void**)&glVertexAttribs4ubvNV_Z_Z = glbindGetProcAddress(`glVertexAttribs4ubvNV`);
  if (*cast(void**)&glVertexAttribs4ubvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexAttribs4ubvNV' not found!`);
  glVertexAttribs4ubvNV_Z_Z(index, count, v);
}
alias glVertexBindingDivisor = glVertexBindingDivisor_Z_Z;
__gshared glVertexBindingDivisor_Z_Z = function void (GLuint bindingindex, GLuint divisor) { glVertexBindingDivisor_Z_Z_loader(bindingindex, divisor); };
private void glVertexBindingDivisor_Z_Z_loader (GLuint bindingindex, GLuint divisor) {
  *cast(void**)&glVertexBindingDivisor_Z_Z = glbindGetProcAddress(`glVertexBindingDivisor`);
  if (*cast(void**)&glVertexBindingDivisor_Z_Z is null) assert(0, `OpenGL function 'glVertexBindingDivisor' not found!`);
  glVertexBindingDivisor_Z_Z(bindingindex, divisor);
}
alias glVertexBlendARB = glVertexBlendARB_Z_Z;
__gshared glVertexBlendARB_Z_Z = function void (GLint count) { glVertexBlendARB_Z_Z_loader(count); };
private void glVertexBlendARB_Z_Z_loader (GLint count) {
  *cast(void**)&glVertexBlendARB_Z_Z = glbindGetProcAddress(`glVertexBlendARB`);
  if (*cast(void**)&glVertexBlendARB_Z_Z is null) assert(0, `OpenGL function 'glVertexBlendARB' not found!`);
  glVertexBlendARB_Z_Z(count);
}
alias glVertexBlendEnvfATI = glVertexBlendEnvfATI_Z_Z;
__gshared glVertexBlendEnvfATI_Z_Z = function void (GLenum pname, GLfloat param) { glVertexBlendEnvfATI_Z_Z_loader(pname, param); };
private void glVertexBlendEnvfATI_Z_Z_loader (GLenum pname, GLfloat param) {
  *cast(void**)&glVertexBlendEnvfATI_Z_Z = glbindGetProcAddress(`glVertexBlendEnvfATI`);
  if (*cast(void**)&glVertexBlendEnvfATI_Z_Z is null) assert(0, `OpenGL function 'glVertexBlendEnvfATI' not found!`);
  glVertexBlendEnvfATI_Z_Z(pname, param);
}
alias glVertexBlendEnviATI = glVertexBlendEnviATI_Z_Z;
__gshared glVertexBlendEnviATI_Z_Z = function void (GLenum pname, GLint param) { glVertexBlendEnviATI_Z_Z_loader(pname, param); };
private void glVertexBlendEnviATI_Z_Z_loader (GLenum pname, GLint param) {
  *cast(void**)&glVertexBlendEnviATI_Z_Z = glbindGetProcAddress(`glVertexBlendEnviATI`);
  if (*cast(void**)&glVertexBlendEnviATI_Z_Z is null) assert(0, `OpenGL function 'glVertexBlendEnviATI' not found!`);
  glVertexBlendEnviATI_Z_Z(pname, param);
}
alias glVertexFormatNV = glVertexFormatNV_Z_Z;
__gshared glVertexFormatNV_Z_Z = function void (GLint size, GLenum type, GLsizei stride) { glVertexFormatNV_Z_Z_loader(size, type, stride); };
private void glVertexFormatNV_Z_Z_loader (GLint size, GLenum type, GLsizei stride) {
  *cast(void**)&glVertexFormatNV_Z_Z = glbindGetProcAddress(`glVertexFormatNV`);
  if (*cast(void**)&glVertexFormatNV_Z_Z is null) assert(0, `OpenGL function 'glVertexFormatNV' not found!`);
  glVertexFormatNV_Z_Z(size, type, stride);
}
alias glVertexP2ui = glVertexP2ui_Z_Z;
__gshared glVertexP2ui_Z_Z = function void (GLenum type, GLuint value) { glVertexP2ui_Z_Z_loader(type, value); };
private void glVertexP2ui_Z_Z_loader (GLenum type, GLuint value) {
  *cast(void**)&glVertexP2ui_Z_Z = glbindGetProcAddress(`glVertexP2ui`);
  if (*cast(void**)&glVertexP2ui_Z_Z is null) assert(0, `OpenGL function 'glVertexP2ui' not found!`);
  glVertexP2ui_Z_Z(type, value);
}
alias glVertexP2uiv = glVertexP2uiv_Z_Z;
__gshared glVertexP2uiv_Z_Z = function void (GLenum type, const(GLuint)* value) { glVertexP2uiv_Z_Z_loader(type, value); };
private void glVertexP2uiv_Z_Z_loader (GLenum type, const(GLuint)* value) {
  *cast(void**)&glVertexP2uiv_Z_Z = glbindGetProcAddress(`glVertexP2uiv`);
  if (*cast(void**)&glVertexP2uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexP2uiv' not found!`);
  glVertexP2uiv_Z_Z(type, value);
}
alias glVertexP3ui = glVertexP3ui_Z_Z;
__gshared glVertexP3ui_Z_Z = function void (GLenum type, GLuint value) { glVertexP3ui_Z_Z_loader(type, value); };
private void glVertexP3ui_Z_Z_loader (GLenum type, GLuint value) {
  *cast(void**)&glVertexP3ui_Z_Z = glbindGetProcAddress(`glVertexP3ui`);
  if (*cast(void**)&glVertexP3ui_Z_Z is null) assert(0, `OpenGL function 'glVertexP3ui' not found!`);
  glVertexP3ui_Z_Z(type, value);
}
alias glVertexP3uiv = glVertexP3uiv_Z_Z;
__gshared glVertexP3uiv_Z_Z = function void (GLenum type, const(GLuint)* value) { glVertexP3uiv_Z_Z_loader(type, value); };
private void glVertexP3uiv_Z_Z_loader (GLenum type, const(GLuint)* value) {
  *cast(void**)&glVertexP3uiv_Z_Z = glbindGetProcAddress(`glVertexP3uiv`);
  if (*cast(void**)&glVertexP3uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexP3uiv' not found!`);
  glVertexP3uiv_Z_Z(type, value);
}
alias glVertexP4ui = glVertexP4ui_Z_Z;
__gshared glVertexP4ui_Z_Z = function void (GLenum type, GLuint value) { glVertexP4ui_Z_Z_loader(type, value); };
private void glVertexP4ui_Z_Z_loader (GLenum type, GLuint value) {
  *cast(void**)&glVertexP4ui_Z_Z = glbindGetProcAddress(`glVertexP4ui`);
  if (*cast(void**)&glVertexP4ui_Z_Z is null) assert(0, `OpenGL function 'glVertexP4ui' not found!`);
  glVertexP4ui_Z_Z(type, value);
}
alias glVertexP4uiv = glVertexP4uiv_Z_Z;
__gshared glVertexP4uiv_Z_Z = function void (GLenum type, const(GLuint)* value) { glVertexP4uiv_Z_Z_loader(type, value); };
private void glVertexP4uiv_Z_Z_loader (GLenum type, const(GLuint)* value) {
  *cast(void**)&glVertexP4uiv_Z_Z = glbindGetProcAddress(`glVertexP4uiv`);
  if (*cast(void**)&glVertexP4uiv_Z_Z is null) assert(0, `OpenGL function 'glVertexP4uiv' not found!`);
  glVertexP4uiv_Z_Z(type, value);
}
alias glVertexPointer = glVertexPointer_Z_Z;
__gshared glVertexPointer_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glVertexPointer_Z_Z_loader(size, type, stride, pointer); };
private void glVertexPointer_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexPointer_Z_Z = glbindGetProcAddress(`glVertexPointer`);
  if (*cast(void**)&glVertexPointer_Z_Z is null) assert(0, `OpenGL function 'glVertexPointer' not found!`);
  glVertexPointer_Z_Z(size, type, stride, pointer);
}
alias glVertexPointerEXT = glVertexPointerEXT_Z_Z;
__gshared glVertexPointerEXT_Z_Z = function void (GLint size, GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) { glVertexPointerEXT_Z_Z_loader(size, type, stride, count, pointer); };
private void glVertexPointerEXT_Z_Z_loader (GLint size, GLenum type, GLsizei stride, GLsizei count, const(void)* pointer) {
  *cast(void**)&glVertexPointerEXT_Z_Z = glbindGetProcAddress(`glVertexPointerEXT`);
  if (*cast(void**)&glVertexPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexPointerEXT' not found!`);
  glVertexPointerEXT_Z_Z(size, type, stride, count, pointer);
}
alias glVertexPointerListIBM = glVertexPointerListIBM_Z_Z;
__gshared glVertexPointerListIBM_Z_Z = function void (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) { glVertexPointerListIBM_Z_Z_loader(size, type, stride, pointer, ptrstride); };
private void glVertexPointerListIBM_Z_Z_loader (GLint size, GLenum type, GLint stride, const(void)** pointer, GLint ptrstride) {
  *cast(void**)&glVertexPointerListIBM_Z_Z = glbindGetProcAddress(`glVertexPointerListIBM`);
  if (*cast(void**)&glVertexPointerListIBM_Z_Z is null) assert(0, `OpenGL function 'glVertexPointerListIBM' not found!`);
  glVertexPointerListIBM_Z_Z(size, type, stride, pointer, ptrstride);
}
alias glVertexPointervINTEL = glVertexPointervINTEL_Z_Z;
__gshared glVertexPointervINTEL_Z_Z = function void (GLint size, GLenum type, const(void)** pointer) { glVertexPointervINTEL_Z_Z_loader(size, type, pointer); };
private void glVertexPointervINTEL_Z_Z_loader (GLint size, GLenum type, const(void)** pointer) {
  *cast(void**)&glVertexPointervINTEL_Z_Z = glbindGetProcAddress(`glVertexPointervINTEL`);
  if (*cast(void**)&glVertexPointervINTEL_Z_Z is null) assert(0, `OpenGL function 'glVertexPointervINTEL' not found!`);
  glVertexPointervINTEL_Z_Z(size, type, pointer);
}
alias glVertexStream1dATI = glVertexStream1dATI_Z_Z;
__gshared glVertexStream1dATI_Z_Z = function void (GLenum stream, GLdouble x) { glVertexStream1dATI_Z_Z_loader(stream, x); };
private void glVertexStream1dATI_Z_Z_loader (GLenum stream, GLdouble x) {
  *cast(void**)&glVertexStream1dATI_Z_Z = glbindGetProcAddress(`glVertexStream1dATI`);
  if (*cast(void**)&glVertexStream1dATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1dATI' not found!`);
  glVertexStream1dATI_Z_Z(stream, x);
}
alias glVertexStream1dvATI = glVertexStream1dvATI_Z_Z;
__gshared glVertexStream1dvATI_Z_Z = function void (GLenum stream, const(GLdouble)* coords) { glVertexStream1dvATI_Z_Z_loader(stream, coords); };
private void glVertexStream1dvATI_Z_Z_loader (GLenum stream, const(GLdouble)* coords) {
  *cast(void**)&glVertexStream1dvATI_Z_Z = glbindGetProcAddress(`glVertexStream1dvATI`);
  if (*cast(void**)&glVertexStream1dvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1dvATI' not found!`);
  glVertexStream1dvATI_Z_Z(stream, coords);
}
alias glVertexStream1fATI = glVertexStream1fATI_Z_Z;
__gshared glVertexStream1fATI_Z_Z = function void (GLenum stream, GLfloat x) { glVertexStream1fATI_Z_Z_loader(stream, x); };
private void glVertexStream1fATI_Z_Z_loader (GLenum stream, GLfloat x) {
  *cast(void**)&glVertexStream1fATI_Z_Z = glbindGetProcAddress(`glVertexStream1fATI`);
  if (*cast(void**)&glVertexStream1fATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1fATI' not found!`);
  glVertexStream1fATI_Z_Z(stream, x);
}
alias glVertexStream1fvATI = glVertexStream1fvATI_Z_Z;
__gshared glVertexStream1fvATI_Z_Z = function void (GLenum stream, const(GLfloat)* coords) { glVertexStream1fvATI_Z_Z_loader(stream, coords); };
private void glVertexStream1fvATI_Z_Z_loader (GLenum stream, const(GLfloat)* coords) {
  *cast(void**)&glVertexStream1fvATI_Z_Z = glbindGetProcAddress(`glVertexStream1fvATI`);
  if (*cast(void**)&glVertexStream1fvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1fvATI' not found!`);
  glVertexStream1fvATI_Z_Z(stream, coords);
}
alias glVertexStream1iATI = glVertexStream1iATI_Z_Z;
__gshared glVertexStream1iATI_Z_Z = function void (GLenum stream, GLint x) { glVertexStream1iATI_Z_Z_loader(stream, x); };
private void glVertexStream1iATI_Z_Z_loader (GLenum stream, GLint x) {
  *cast(void**)&glVertexStream1iATI_Z_Z = glbindGetProcAddress(`glVertexStream1iATI`);
  if (*cast(void**)&glVertexStream1iATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1iATI' not found!`);
  glVertexStream1iATI_Z_Z(stream, x);
}
alias glVertexStream1ivATI = glVertexStream1ivATI_Z_Z;
__gshared glVertexStream1ivATI_Z_Z = function void (GLenum stream, const(GLint)* coords) { glVertexStream1ivATI_Z_Z_loader(stream, coords); };
private void glVertexStream1ivATI_Z_Z_loader (GLenum stream, const(GLint)* coords) {
  *cast(void**)&glVertexStream1ivATI_Z_Z = glbindGetProcAddress(`glVertexStream1ivATI`);
  if (*cast(void**)&glVertexStream1ivATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1ivATI' not found!`);
  glVertexStream1ivATI_Z_Z(stream, coords);
}
alias glVertexStream1sATI = glVertexStream1sATI_Z_Z;
__gshared glVertexStream1sATI_Z_Z = function void (GLenum stream, GLshort x) { glVertexStream1sATI_Z_Z_loader(stream, x); };
private void glVertexStream1sATI_Z_Z_loader (GLenum stream, GLshort x) {
  *cast(void**)&glVertexStream1sATI_Z_Z = glbindGetProcAddress(`glVertexStream1sATI`);
  if (*cast(void**)&glVertexStream1sATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1sATI' not found!`);
  glVertexStream1sATI_Z_Z(stream, x);
}
alias glVertexStream1svATI = glVertexStream1svATI_Z_Z;
__gshared glVertexStream1svATI_Z_Z = function void (GLenum stream, const(GLshort)* coords) { glVertexStream1svATI_Z_Z_loader(stream, coords); };
private void glVertexStream1svATI_Z_Z_loader (GLenum stream, const(GLshort)* coords) {
  *cast(void**)&glVertexStream1svATI_Z_Z = glbindGetProcAddress(`glVertexStream1svATI`);
  if (*cast(void**)&glVertexStream1svATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream1svATI' not found!`);
  glVertexStream1svATI_Z_Z(stream, coords);
}
alias glVertexStream2dATI = glVertexStream2dATI_Z_Z;
__gshared glVertexStream2dATI_Z_Z = function void (GLenum stream, GLdouble x, GLdouble y) { glVertexStream2dATI_Z_Z_loader(stream, x, y); };
private void glVertexStream2dATI_Z_Z_loader (GLenum stream, GLdouble x, GLdouble y) {
  *cast(void**)&glVertexStream2dATI_Z_Z = glbindGetProcAddress(`glVertexStream2dATI`);
  if (*cast(void**)&glVertexStream2dATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2dATI' not found!`);
  glVertexStream2dATI_Z_Z(stream, x, y);
}
alias glVertexStream2dvATI = glVertexStream2dvATI_Z_Z;
__gshared glVertexStream2dvATI_Z_Z = function void (GLenum stream, const(GLdouble)* coords) { glVertexStream2dvATI_Z_Z_loader(stream, coords); };
private void glVertexStream2dvATI_Z_Z_loader (GLenum stream, const(GLdouble)* coords) {
  *cast(void**)&glVertexStream2dvATI_Z_Z = glbindGetProcAddress(`glVertexStream2dvATI`);
  if (*cast(void**)&glVertexStream2dvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2dvATI' not found!`);
  glVertexStream2dvATI_Z_Z(stream, coords);
}
alias glVertexStream2fATI = glVertexStream2fATI_Z_Z;
__gshared glVertexStream2fATI_Z_Z = function void (GLenum stream, GLfloat x, GLfloat y) { glVertexStream2fATI_Z_Z_loader(stream, x, y); };
private void glVertexStream2fATI_Z_Z_loader (GLenum stream, GLfloat x, GLfloat y) {
  *cast(void**)&glVertexStream2fATI_Z_Z = glbindGetProcAddress(`glVertexStream2fATI`);
  if (*cast(void**)&glVertexStream2fATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2fATI' not found!`);
  glVertexStream2fATI_Z_Z(stream, x, y);
}
alias glVertexStream2fvATI = glVertexStream2fvATI_Z_Z;
__gshared glVertexStream2fvATI_Z_Z = function void (GLenum stream, const(GLfloat)* coords) { glVertexStream2fvATI_Z_Z_loader(stream, coords); };
private void glVertexStream2fvATI_Z_Z_loader (GLenum stream, const(GLfloat)* coords) {
  *cast(void**)&glVertexStream2fvATI_Z_Z = glbindGetProcAddress(`glVertexStream2fvATI`);
  if (*cast(void**)&glVertexStream2fvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2fvATI' not found!`);
  glVertexStream2fvATI_Z_Z(stream, coords);
}
alias glVertexStream2iATI = glVertexStream2iATI_Z_Z;
__gshared glVertexStream2iATI_Z_Z = function void (GLenum stream, GLint x, GLint y) { glVertexStream2iATI_Z_Z_loader(stream, x, y); };
private void glVertexStream2iATI_Z_Z_loader (GLenum stream, GLint x, GLint y) {
  *cast(void**)&glVertexStream2iATI_Z_Z = glbindGetProcAddress(`glVertexStream2iATI`);
  if (*cast(void**)&glVertexStream2iATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2iATI' not found!`);
  glVertexStream2iATI_Z_Z(stream, x, y);
}
alias glVertexStream2ivATI = glVertexStream2ivATI_Z_Z;
__gshared glVertexStream2ivATI_Z_Z = function void (GLenum stream, const(GLint)* coords) { glVertexStream2ivATI_Z_Z_loader(stream, coords); };
private void glVertexStream2ivATI_Z_Z_loader (GLenum stream, const(GLint)* coords) {
  *cast(void**)&glVertexStream2ivATI_Z_Z = glbindGetProcAddress(`glVertexStream2ivATI`);
  if (*cast(void**)&glVertexStream2ivATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2ivATI' not found!`);
  glVertexStream2ivATI_Z_Z(stream, coords);
}
alias glVertexStream2sATI = glVertexStream2sATI_Z_Z;
__gshared glVertexStream2sATI_Z_Z = function void (GLenum stream, GLshort x, GLshort y) { glVertexStream2sATI_Z_Z_loader(stream, x, y); };
private void glVertexStream2sATI_Z_Z_loader (GLenum stream, GLshort x, GLshort y) {
  *cast(void**)&glVertexStream2sATI_Z_Z = glbindGetProcAddress(`glVertexStream2sATI`);
  if (*cast(void**)&glVertexStream2sATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2sATI' not found!`);
  glVertexStream2sATI_Z_Z(stream, x, y);
}
alias glVertexStream2svATI = glVertexStream2svATI_Z_Z;
__gshared glVertexStream2svATI_Z_Z = function void (GLenum stream, const(GLshort)* coords) { glVertexStream2svATI_Z_Z_loader(stream, coords); };
private void glVertexStream2svATI_Z_Z_loader (GLenum stream, const(GLshort)* coords) {
  *cast(void**)&glVertexStream2svATI_Z_Z = glbindGetProcAddress(`glVertexStream2svATI`);
  if (*cast(void**)&glVertexStream2svATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream2svATI' not found!`);
  glVertexStream2svATI_Z_Z(stream, coords);
}
alias glVertexStream3dATI = glVertexStream3dATI_Z_Z;
__gshared glVertexStream3dATI_Z_Z = function void (GLenum stream, GLdouble x, GLdouble y, GLdouble z) { glVertexStream3dATI_Z_Z_loader(stream, x, y, z); };
private void glVertexStream3dATI_Z_Z_loader (GLenum stream, GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glVertexStream3dATI_Z_Z = glbindGetProcAddress(`glVertexStream3dATI`);
  if (*cast(void**)&glVertexStream3dATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3dATI' not found!`);
  glVertexStream3dATI_Z_Z(stream, x, y, z);
}
alias glVertexStream3dvATI = glVertexStream3dvATI_Z_Z;
__gshared glVertexStream3dvATI_Z_Z = function void (GLenum stream, const(GLdouble)* coords) { glVertexStream3dvATI_Z_Z_loader(stream, coords); };
private void glVertexStream3dvATI_Z_Z_loader (GLenum stream, const(GLdouble)* coords) {
  *cast(void**)&glVertexStream3dvATI_Z_Z = glbindGetProcAddress(`glVertexStream3dvATI`);
  if (*cast(void**)&glVertexStream3dvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3dvATI' not found!`);
  glVertexStream3dvATI_Z_Z(stream, coords);
}
alias glVertexStream3fATI = glVertexStream3fATI_Z_Z;
__gshared glVertexStream3fATI_Z_Z = function void (GLenum stream, GLfloat x, GLfloat y, GLfloat z) { glVertexStream3fATI_Z_Z_loader(stream, x, y, z); };
private void glVertexStream3fATI_Z_Z_loader (GLenum stream, GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glVertexStream3fATI_Z_Z = glbindGetProcAddress(`glVertexStream3fATI`);
  if (*cast(void**)&glVertexStream3fATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3fATI' not found!`);
  glVertexStream3fATI_Z_Z(stream, x, y, z);
}
alias glVertexStream3fvATI = glVertexStream3fvATI_Z_Z;
__gshared glVertexStream3fvATI_Z_Z = function void (GLenum stream, const(GLfloat)* coords) { glVertexStream3fvATI_Z_Z_loader(stream, coords); };
private void glVertexStream3fvATI_Z_Z_loader (GLenum stream, const(GLfloat)* coords) {
  *cast(void**)&glVertexStream3fvATI_Z_Z = glbindGetProcAddress(`glVertexStream3fvATI`);
  if (*cast(void**)&glVertexStream3fvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3fvATI' not found!`);
  glVertexStream3fvATI_Z_Z(stream, coords);
}
alias glVertexStream3iATI = glVertexStream3iATI_Z_Z;
__gshared glVertexStream3iATI_Z_Z = function void (GLenum stream, GLint x, GLint y, GLint z) { glVertexStream3iATI_Z_Z_loader(stream, x, y, z); };
private void glVertexStream3iATI_Z_Z_loader (GLenum stream, GLint x, GLint y, GLint z) {
  *cast(void**)&glVertexStream3iATI_Z_Z = glbindGetProcAddress(`glVertexStream3iATI`);
  if (*cast(void**)&glVertexStream3iATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3iATI' not found!`);
  glVertexStream3iATI_Z_Z(stream, x, y, z);
}
alias glVertexStream3ivATI = glVertexStream3ivATI_Z_Z;
__gshared glVertexStream3ivATI_Z_Z = function void (GLenum stream, const(GLint)* coords) { glVertexStream3ivATI_Z_Z_loader(stream, coords); };
private void glVertexStream3ivATI_Z_Z_loader (GLenum stream, const(GLint)* coords) {
  *cast(void**)&glVertexStream3ivATI_Z_Z = glbindGetProcAddress(`glVertexStream3ivATI`);
  if (*cast(void**)&glVertexStream3ivATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3ivATI' not found!`);
  glVertexStream3ivATI_Z_Z(stream, coords);
}
alias glVertexStream3sATI = glVertexStream3sATI_Z_Z;
__gshared glVertexStream3sATI_Z_Z = function void (GLenum stream, GLshort x, GLshort y, GLshort z) { glVertexStream3sATI_Z_Z_loader(stream, x, y, z); };
private void glVertexStream3sATI_Z_Z_loader (GLenum stream, GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glVertexStream3sATI_Z_Z = glbindGetProcAddress(`glVertexStream3sATI`);
  if (*cast(void**)&glVertexStream3sATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3sATI' not found!`);
  glVertexStream3sATI_Z_Z(stream, x, y, z);
}
alias glVertexStream3svATI = glVertexStream3svATI_Z_Z;
__gshared glVertexStream3svATI_Z_Z = function void (GLenum stream, const(GLshort)* coords) { glVertexStream3svATI_Z_Z_loader(stream, coords); };
private void glVertexStream3svATI_Z_Z_loader (GLenum stream, const(GLshort)* coords) {
  *cast(void**)&glVertexStream3svATI_Z_Z = glbindGetProcAddress(`glVertexStream3svATI`);
  if (*cast(void**)&glVertexStream3svATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream3svATI' not found!`);
  glVertexStream3svATI_Z_Z(stream, coords);
}
alias glVertexStream4dATI = glVertexStream4dATI_Z_Z;
__gshared glVertexStream4dATI_Z_Z = function void (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glVertexStream4dATI_Z_Z_loader(stream, x, y, z, w); };
private void glVertexStream4dATI_Z_Z_loader (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glVertexStream4dATI_Z_Z = glbindGetProcAddress(`glVertexStream4dATI`);
  if (*cast(void**)&glVertexStream4dATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4dATI' not found!`);
  glVertexStream4dATI_Z_Z(stream, x, y, z, w);
}
alias glVertexStream4dvATI = glVertexStream4dvATI_Z_Z;
__gshared glVertexStream4dvATI_Z_Z = function void (GLenum stream, const(GLdouble)* coords) { glVertexStream4dvATI_Z_Z_loader(stream, coords); };
private void glVertexStream4dvATI_Z_Z_loader (GLenum stream, const(GLdouble)* coords) {
  *cast(void**)&glVertexStream4dvATI_Z_Z = glbindGetProcAddress(`glVertexStream4dvATI`);
  if (*cast(void**)&glVertexStream4dvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4dvATI' not found!`);
  glVertexStream4dvATI_Z_Z(stream, coords);
}
alias glVertexStream4fATI = glVertexStream4fATI_Z_Z;
__gshared glVertexStream4fATI_Z_Z = function void (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glVertexStream4fATI_Z_Z_loader(stream, x, y, z, w); };
private void glVertexStream4fATI_Z_Z_loader (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glVertexStream4fATI_Z_Z = glbindGetProcAddress(`glVertexStream4fATI`);
  if (*cast(void**)&glVertexStream4fATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4fATI' not found!`);
  glVertexStream4fATI_Z_Z(stream, x, y, z, w);
}
alias glVertexStream4fvATI = glVertexStream4fvATI_Z_Z;
__gshared glVertexStream4fvATI_Z_Z = function void (GLenum stream, const(GLfloat)* coords) { glVertexStream4fvATI_Z_Z_loader(stream, coords); };
private void glVertexStream4fvATI_Z_Z_loader (GLenum stream, const(GLfloat)* coords) {
  *cast(void**)&glVertexStream4fvATI_Z_Z = glbindGetProcAddress(`glVertexStream4fvATI`);
  if (*cast(void**)&glVertexStream4fvATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4fvATI' not found!`);
  glVertexStream4fvATI_Z_Z(stream, coords);
}
alias glVertexStream4iATI = glVertexStream4iATI_Z_Z;
__gshared glVertexStream4iATI_Z_Z = function void (GLenum stream, GLint x, GLint y, GLint z, GLint w) { glVertexStream4iATI_Z_Z_loader(stream, x, y, z, w); };
private void glVertexStream4iATI_Z_Z_loader (GLenum stream, GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glVertexStream4iATI_Z_Z = glbindGetProcAddress(`glVertexStream4iATI`);
  if (*cast(void**)&glVertexStream4iATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4iATI' not found!`);
  glVertexStream4iATI_Z_Z(stream, x, y, z, w);
}
alias glVertexStream4ivATI = glVertexStream4ivATI_Z_Z;
__gshared glVertexStream4ivATI_Z_Z = function void (GLenum stream, const(GLint)* coords) { glVertexStream4ivATI_Z_Z_loader(stream, coords); };
private void glVertexStream4ivATI_Z_Z_loader (GLenum stream, const(GLint)* coords) {
  *cast(void**)&glVertexStream4ivATI_Z_Z = glbindGetProcAddress(`glVertexStream4ivATI`);
  if (*cast(void**)&glVertexStream4ivATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4ivATI' not found!`);
  glVertexStream4ivATI_Z_Z(stream, coords);
}
alias glVertexStream4sATI = glVertexStream4sATI_Z_Z;
__gshared glVertexStream4sATI_Z_Z = function void (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { glVertexStream4sATI_Z_Z_loader(stream, x, y, z, w); };
private void glVertexStream4sATI_Z_Z_loader (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {
  *cast(void**)&glVertexStream4sATI_Z_Z = glbindGetProcAddress(`glVertexStream4sATI`);
  if (*cast(void**)&glVertexStream4sATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4sATI' not found!`);
  glVertexStream4sATI_Z_Z(stream, x, y, z, w);
}
alias glVertexStream4svATI = glVertexStream4svATI_Z_Z;
__gshared glVertexStream4svATI_Z_Z = function void (GLenum stream, const(GLshort)* coords) { glVertexStream4svATI_Z_Z_loader(stream, coords); };
private void glVertexStream4svATI_Z_Z_loader (GLenum stream, const(GLshort)* coords) {
  *cast(void**)&glVertexStream4svATI_Z_Z = glbindGetProcAddress(`glVertexStream4svATI`);
  if (*cast(void**)&glVertexStream4svATI_Z_Z is null) assert(0, `OpenGL function 'glVertexStream4svATI' not found!`);
  glVertexStream4svATI_Z_Z(stream, coords);
}
alias glVertexWeightPointerEXT = glVertexWeightPointerEXT_Z_Z;
__gshared glVertexWeightPointerEXT_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glVertexWeightPointerEXT_Z_Z_loader(size, type, stride, pointer); };
private void glVertexWeightPointerEXT_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glVertexWeightPointerEXT_Z_Z = glbindGetProcAddress(`glVertexWeightPointerEXT`);
  if (*cast(void**)&glVertexWeightPointerEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexWeightPointerEXT' not found!`);
  glVertexWeightPointerEXT_Z_Z(size, type, stride, pointer);
}
alias glVertexWeightfEXT = glVertexWeightfEXT_Z_Z;
__gshared glVertexWeightfEXT_Z_Z = function void (GLfloat weight) { glVertexWeightfEXT_Z_Z_loader(weight); };
private void glVertexWeightfEXT_Z_Z_loader (GLfloat weight) {
  *cast(void**)&glVertexWeightfEXT_Z_Z = glbindGetProcAddress(`glVertexWeightfEXT`);
  if (*cast(void**)&glVertexWeightfEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexWeightfEXT' not found!`);
  glVertexWeightfEXT_Z_Z(weight);
}
alias glVertexWeightfvEXT = glVertexWeightfvEXT_Z_Z;
__gshared glVertexWeightfvEXT_Z_Z = function void (const(GLfloat)* weight) { glVertexWeightfvEXT_Z_Z_loader(weight); };
private void glVertexWeightfvEXT_Z_Z_loader (const(GLfloat)* weight) {
  *cast(void**)&glVertexWeightfvEXT_Z_Z = glbindGetProcAddress(`glVertexWeightfvEXT`);
  if (*cast(void**)&glVertexWeightfvEXT_Z_Z is null) assert(0, `OpenGL function 'glVertexWeightfvEXT' not found!`);
  glVertexWeightfvEXT_Z_Z(weight);
}
alias glVertexWeighthNV = glVertexWeighthNV_Z_Z;
__gshared glVertexWeighthNV_Z_Z = function void (GLhalfNV weight) { glVertexWeighthNV_Z_Z_loader(weight); };
private void glVertexWeighthNV_Z_Z_loader (GLhalfNV weight) {
  *cast(void**)&glVertexWeighthNV_Z_Z = glbindGetProcAddress(`glVertexWeighthNV`);
  if (*cast(void**)&glVertexWeighthNV_Z_Z is null) assert(0, `OpenGL function 'glVertexWeighthNV' not found!`);
  glVertexWeighthNV_Z_Z(weight);
}
alias glVertexWeighthvNV = glVertexWeighthvNV_Z_Z;
__gshared glVertexWeighthvNV_Z_Z = function void (const(GLhalfNV)* weight) { glVertexWeighthvNV_Z_Z_loader(weight); };
private void glVertexWeighthvNV_Z_Z_loader (const(GLhalfNV)* weight) {
  *cast(void**)&glVertexWeighthvNV_Z_Z = glbindGetProcAddress(`glVertexWeighthvNV`);
  if (*cast(void**)&glVertexWeighthvNV_Z_Z is null) assert(0, `OpenGL function 'glVertexWeighthvNV' not found!`);
  glVertexWeighthvNV_Z_Z(weight);
}
alias glVideoCaptureNV = glVideoCaptureNV_Z_Z;
__gshared glVideoCaptureNV_Z_Z = function GLenum (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) { return glVideoCaptureNV_Z_Z_loader(video_capture_slot, sequence_num, capture_time); };
private GLenum glVideoCaptureNV_Z_Z_loader (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) {
  *cast(void**)&glVideoCaptureNV_Z_Z = glbindGetProcAddress(`glVideoCaptureNV`);
  if (*cast(void**)&glVideoCaptureNV_Z_Z is null) assert(0, `OpenGL function 'glVideoCaptureNV' not found!`);
  return glVideoCaptureNV_Z_Z(video_capture_slot, sequence_num, capture_time);
}
alias glVideoCaptureStreamParameterdvNV = glVideoCaptureStreamParameterdvNV_Z_Z;
__gshared glVideoCaptureStreamParameterdvNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum pname, const(GLdouble)* params) { glVideoCaptureStreamParameterdvNV_Z_Z_loader(video_capture_slot, stream, pname, params); };
private void glVideoCaptureStreamParameterdvNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum pname, const(GLdouble)* params) {
  *cast(void**)&glVideoCaptureStreamParameterdvNV_Z_Z = glbindGetProcAddress(`glVideoCaptureStreamParameterdvNV`);
  if (*cast(void**)&glVideoCaptureStreamParameterdvNV_Z_Z is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterdvNV' not found!`);
  glVideoCaptureStreamParameterdvNV_Z_Z(video_capture_slot, stream, pname, params);
}
alias glVideoCaptureStreamParameterfvNV = glVideoCaptureStreamParameterfvNV_Z_Z;
__gshared glVideoCaptureStreamParameterfvNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum pname, const(GLfloat)* params) { glVideoCaptureStreamParameterfvNV_Z_Z_loader(video_capture_slot, stream, pname, params); };
private void glVideoCaptureStreamParameterfvNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum pname, const(GLfloat)* params) {
  *cast(void**)&glVideoCaptureStreamParameterfvNV_Z_Z = glbindGetProcAddress(`glVideoCaptureStreamParameterfvNV`);
  if (*cast(void**)&glVideoCaptureStreamParameterfvNV_Z_Z is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterfvNV' not found!`);
  glVideoCaptureStreamParameterfvNV_Z_Z(video_capture_slot, stream, pname, params);
}
alias glVideoCaptureStreamParameterivNV = glVideoCaptureStreamParameterivNV_Z_Z;
__gshared glVideoCaptureStreamParameterivNV_Z_Z = function void (GLuint video_capture_slot, GLuint stream, GLenum pname, const(GLint)* params) { glVideoCaptureStreamParameterivNV_Z_Z_loader(video_capture_slot, stream, pname, params); };
private void glVideoCaptureStreamParameterivNV_Z_Z_loader (GLuint video_capture_slot, GLuint stream, GLenum pname, const(GLint)* params) {
  *cast(void**)&glVideoCaptureStreamParameterivNV_Z_Z = glbindGetProcAddress(`glVideoCaptureStreamParameterivNV`);
  if (*cast(void**)&glVideoCaptureStreamParameterivNV_Z_Z is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterivNV' not found!`);
  glVideoCaptureStreamParameterivNV_Z_Z(video_capture_slot, stream, pname, params);
}
alias glViewport = glViewport_Z_Z;
__gshared glViewport_Z_Z = function void (GLint x, GLint y, GLsizei width, GLsizei height) { glViewport_Z_Z_loader(x, y, width, height); };
private void glViewport_Z_Z_loader (GLint x, GLint y, GLsizei width, GLsizei height) {
  *cast(void**)&glViewport_Z_Z = glbindGetProcAddress(`glViewport`);
  if (*cast(void**)&glViewport_Z_Z is null) assert(0, `OpenGL function 'glViewport' not found!`);
  glViewport_Z_Z(x, y, width, height);
}
alias glViewportArrayv = glViewportArrayv_Z_Z;
__gshared glViewportArrayv_Z_Z = function void (GLuint first, GLsizei count, const(GLfloat)* v) { glViewportArrayv_Z_Z_loader(first, count, v); };
private void glViewportArrayv_Z_Z_loader (GLuint first, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glViewportArrayv_Z_Z = glbindGetProcAddress(`glViewportArrayv`);
  if (*cast(void**)&glViewportArrayv_Z_Z is null) assert(0, `OpenGL function 'glViewportArrayv' not found!`);
  glViewportArrayv_Z_Z(first, count, v);
}
alias glViewportArrayvNV = glViewportArrayvNV_Z_Z;
__gshared glViewportArrayvNV_Z_Z = function void (GLuint first, GLsizei count, const(GLfloat)* v) { glViewportArrayvNV_Z_Z_loader(first, count, v); };
private void glViewportArrayvNV_Z_Z_loader (GLuint first, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glViewportArrayvNV_Z_Z = glbindGetProcAddress(`glViewportArrayvNV`);
  if (*cast(void**)&glViewportArrayvNV_Z_Z is null) assert(0, `OpenGL function 'glViewportArrayvNV' not found!`);
  glViewportArrayvNV_Z_Z(first, count, v);
}
alias glViewportArrayvOES = glViewportArrayvOES_Z_Z;
__gshared glViewportArrayvOES_Z_Z = function void (GLuint first, GLsizei count, const(GLfloat)* v) { glViewportArrayvOES_Z_Z_loader(first, count, v); };
private void glViewportArrayvOES_Z_Z_loader (GLuint first, GLsizei count, const(GLfloat)* v) {
  *cast(void**)&glViewportArrayvOES_Z_Z = glbindGetProcAddress(`glViewportArrayvOES`);
  if (*cast(void**)&glViewportArrayvOES_Z_Z is null) assert(0, `OpenGL function 'glViewportArrayvOES' not found!`);
  glViewportArrayvOES_Z_Z(first, count, v);
}
alias glViewportIndexedf = glViewportIndexedf_Z_Z;
__gshared glViewportIndexedf_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { glViewportIndexedf_Z_Z_loader(index, x, y, w, h); };
private void glViewportIndexedf_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  *cast(void**)&glViewportIndexedf_Z_Z = glbindGetProcAddress(`glViewportIndexedf`);
  if (*cast(void**)&glViewportIndexedf_Z_Z is null) assert(0, `OpenGL function 'glViewportIndexedf' not found!`);
  glViewportIndexedf_Z_Z(index, x, y, w, h);
}
alias glViewportIndexedfOES = glViewportIndexedfOES_Z_Z;
__gshared glViewportIndexedfOES_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { glViewportIndexedfOES_Z_Z_loader(index, x, y, w, h); };
private void glViewportIndexedfOES_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  *cast(void**)&glViewportIndexedfOES_Z_Z = glbindGetProcAddress(`glViewportIndexedfOES`);
  if (*cast(void**)&glViewportIndexedfOES_Z_Z is null) assert(0, `OpenGL function 'glViewportIndexedfOES' not found!`);
  glViewportIndexedfOES_Z_Z(index, x, y, w, h);
}
alias glViewportIndexedfNV = glViewportIndexedfNV_Z_Z;
__gshared glViewportIndexedfNV_Z_Z = function void (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { glViewportIndexedfNV_Z_Z_loader(index, x, y, w, h); };
private void glViewportIndexedfNV_Z_Z_loader (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  *cast(void**)&glViewportIndexedfNV_Z_Z = glbindGetProcAddress(`glViewportIndexedfNV`);
  if (*cast(void**)&glViewportIndexedfNV_Z_Z is null) assert(0, `OpenGL function 'glViewportIndexedfNV' not found!`);
  glViewportIndexedfNV_Z_Z(index, x, y, w, h);
}
alias glViewportIndexedfv = glViewportIndexedfv_Z_Z;
__gshared glViewportIndexedfv_Z_Z = function void (GLuint index, const(GLfloat)* v) { glViewportIndexedfv_Z_Z_loader(index, v); };
private void glViewportIndexedfv_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glViewportIndexedfv_Z_Z = glbindGetProcAddress(`glViewportIndexedfv`);
  if (*cast(void**)&glViewportIndexedfv_Z_Z is null) assert(0, `OpenGL function 'glViewportIndexedfv' not found!`);
  glViewportIndexedfv_Z_Z(index, v);
}
alias glViewportIndexedfvOES = glViewportIndexedfvOES_Z_Z;
__gshared glViewportIndexedfvOES_Z_Z = function void (GLuint index, const(GLfloat)* v) { glViewportIndexedfvOES_Z_Z_loader(index, v); };
private void glViewportIndexedfvOES_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glViewportIndexedfvOES_Z_Z = glbindGetProcAddress(`glViewportIndexedfvOES`);
  if (*cast(void**)&glViewportIndexedfvOES_Z_Z is null) assert(0, `OpenGL function 'glViewportIndexedfvOES' not found!`);
  glViewportIndexedfvOES_Z_Z(index, v);
}
alias glViewportIndexedfvNV = glViewportIndexedfvNV_Z_Z;
__gshared glViewportIndexedfvNV_Z_Z = function void (GLuint index, const(GLfloat)* v) { glViewportIndexedfvNV_Z_Z_loader(index, v); };
private void glViewportIndexedfvNV_Z_Z_loader (GLuint index, const(GLfloat)* v) {
  *cast(void**)&glViewportIndexedfvNV_Z_Z = glbindGetProcAddress(`glViewportIndexedfvNV`);
  if (*cast(void**)&glViewportIndexedfvNV_Z_Z is null) assert(0, `OpenGL function 'glViewportIndexedfvNV' not found!`);
  glViewportIndexedfvNV_Z_Z(index, v);
}
alias glViewportPositionWScaleNV = glViewportPositionWScaleNV_Z_Z;
__gshared glViewportPositionWScaleNV_Z_Z = function void (GLuint index, GLfloat xcoeff, GLfloat ycoeff) { glViewportPositionWScaleNV_Z_Z_loader(index, xcoeff, ycoeff); };
private void glViewportPositionWScaleNV_Z_Z_loader (GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
  *cast(void**)&glViewportPositionWScaleNV_Z_Z = glbindGetProcAddress(`glViewportPositionWScaleNV`);
  if (*cast(void**)&glViewportPositionWScaleNV_Z_Z is null) assert(0, `OpenGL function 'glViewportPositionWScaleNV' not found!`);
  glViewportPositionWScaleNV_Z_Z(index, xcoeff, ycoeff);
}
alias glViewportSwizzleNV = glViewportSwizzleNV_Z_Z;
__gshared glViewportSwizzleNV_Z_Z = function void (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { glViewportSwizzleNV_Z_Z_loader(index, swizzlex, swizzley, swizzlez, swizzlew); };
private void glViewportSwizzleNV_Z_Z_loader (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
  *cast(void**)&glViewportSwizzleNV_Z_Z = glbindGetProcAddress(`glViewportSwizzleNV`);
  if (*cast(void**)&glViewportSwizzleNV_Z_Z is null) assert(0, `OpenGL function 'glViewportSwizzleNV' not found!`);
  glViewportSwizzleNV_Z_Z(index, swizzlex, swizzley, swizzlez, swizzlew);
}
alias glWaitSemaphoreEXT = glWaitSemaphoreEXT_Z_Z;
__gshared glWaitSemaphoreEXT_Z_Z = function void (GLuint semaphore, GLuint numBufferBarriers, const(GLuint)* buffers, GLuint numTextureBarriers, const(GLuint)* textures, const(GLenum)* srcLayouts) { glWaitSemaphoreEXT_Z_Z_loader(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); };
private void glWaitSemaphoreEXT_Z_Z_loader (GLuint semaphore, GLuint numBufferBarriers, const(GLuint)* buffers, GLuint numTextureBarriers, const(GLuint)* textures, const(GLenum)* srcLayouts) {
  *cast(void**)&glWaitSemaphoreEXT_Z_Z = glbindGetProcAddress(`glWaitSemaphoreEXT`);
  if (*cast(void**)&glWaitSemaphoreEXT_Z_Z is null) assert(0, `OpenGL function 'glWaitSemaphoreEXT' not found!`);
  glWaitSemaphoreEXT_Z_Z(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}
alias glWaitSync = glWaitSync_Z_Z;
__gshared glWaitSync_Z_Z = function void (GLsync sync, GLbitfield flags, GLuint64 timeout) { glWaitSync_Z_Z_loader(sync, flags, timeout); };
private void glWaitSync_Z_Z_loader (GLsync sync, GLbitfield flags, GLuint64 timeout) {
  *cast(void**)&glWaitSync_Z_Z = glbindGetProcAddress(`glWaitSync`);
  if (*cast(void**)&glWaitSync_Z_Z is null) assert(0, `OpenGL function 'glWaitSync' not found!`);
  glWaitSync_Z_Z(sync, flags, timeout);
}
alias glWaitSyncAPPLE = glWaitSyncAPPLE_Z_Z;
__gshared glWaitSyncAPPLE_Z_Z = function void (GLsync sync, GLbitfield flags, GLuint64 timeout) { glWaitSyncAPPLE_Z_Z_loader(sync, flags, timeout); };
private void glWaitSyncAPPLE_Z_Z_loader (GLsync sync, GLbitfield flags, GLuint64 timeout) {
  *cast(void**)&glWaitSyncAPPLE_Z_Z = glbindGetProcAddress(`glWaitSyncAPPLE`);
  if (*cast(void**)&glWaitSyncAPPLE_Z_Z is null) assert(0, `OpenGL function 'glWaitSyncAPPLE' not found!`);
  glWaitSyncAPPLE_Z_Z(sync, flags, timeout);
}
alias glWeightPathsNV = glWeightPathsNV_Z_Z;
__gshared glWeightPathsNV_Z_Z = function void (GLuint resultPath, GLsizei numPaths, const(GLuint)* paths, const(GLfloat)* weights) { glWeightPathsNV_Z_Z_loader(resultPath, numPaths, paths, weights); };
private void glWeightPathsNV_Z_Z_loader (GLuint resultPath, GLsizei numPaths, const(GLuint)* paths, const(GLfloat)* weights) {
  *cast(void**)&glWeightPathsNV_Z_Z = glbindGetProcAddress(`glWeightPathsNV`);
  if (*cast(void**)&glWeightPathsNV_Z_Z is null) assert(0, `OpenGL function 'glWeightPathsNV' not found!`);
  glWeightPathsNV_Z_Z(resultPath, numPaths, paths, weights);
}
alias glWeightPointerARB = glWeightPointerARB_Z_Z;
__gshared glWeightPointerARB_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glWeightPointerARB_Z_Z_loader(size, type, stride, pointer); };
private void glWeightPointerARB_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glWeightPointerARB_Z_Z = glbindGetProcAddress(`glWeightPointerARB`);
  if (*cast(void**)&glWeightPointerARB_Z_Z is null) assert(0, `OpenGL function 'glWeightPointerARB' not found!`);
  glWeightPointerARB_Z_Z(size, type, stride, pointer);
}
alias glWeightPointerOES = glWeightPointerOES_Z_Z;
__gshared glWeightPointerOES_Z_Z = function void (GLint size, GLenum type, GLsizei stride, const(void)* pointer) { glWeightPointerOES_Z_Z_loader(size, type, stride, pointer); };
private void glWeightPointerOES_Z_Z_loader (GLint size, GLenum type, GLsizei stride, const(void)* pointer) {
  *cast(void**)&glWeightPointerOES_Z_Z = glbindGetProcAddress(`glWeightPointerOES`);
  if (*cast(void**)&glWeightPointerOES_Z_Z is null) assert(0, `OpenGL function 'glWeightPointerOES' not found!`);
  glWeightPointerOES_Z_Z(size, type, stride, pointer);
}
alias glWeightbvARB = glWeightbvARB_Z_Z;
__gshared glWeightbvARB_Z_Z = function void (GLint size, const(GLbyte)* weights) { glWeightbvARB_Z_Z_loader(size, weights); };
private void glWeightbvARB_Z_Z_loader (GLint size, const(GLbyte)* weights) {
  *cast(void**)&glWeightbvARB_Z_Z = glbindGetProcAddress(`glWeightbvARB`);
  if (*cast(void**)&glWeightbvARB_Z_Z is null) assert(0, `OpenGL function 'glWeightbvARB' not found!`);
  glWeightbvARB_Z_Z(size, weights);
}
alias glWeightdvARB = glWeightdvARB_Z_Z;
__gshared glWeightdvARB_Z_Z = function void (GLint size, const(GLdouble)* weights) { glWeightdvARB_Z_Z_loader(size, weights); };
private void glWeightdvARB_Z_Z_loader (GLint size, const(GLdouble)* weights) {
  *cast(void**)&glWeightdvARB_Z_Z = glbindGetProcAddress(`glWeightdvARB`);
  if (*cast(void**)&glWeightdvARB_Z_Z is null) assert(0, `OpenGL function 'glWeightdvARB' not found!`);
  glWeightdvARB_Z_Z(size, weights);
}
alias glWeightfvARB = glWeightfvARB_Z_Z;
__gshared glWeightfvARB_Z_Z = function void (GLint size, const(GLfloat)* weights) { glWeightfvARB_Z_Z_loader(size, weights); };
private void glWeightfvARB_Z_Z_loader (GLint size, const(GLfloat)* weights) {
  *cast(void**)&glWeightfvARB_Z_Z = glbindGetProcAddress(`glWeightfvARB`);
  if (*cast(void**)&glWeightfvARB_Z_Z is null) assert(0, `OpenGL function 'glWeightfvARB' not found!`);
  glWeightfvARB_Z_Z(size, weights);
}
alias glWeightivARB = glWeightivARB_Z_Z;
__gshared glWeightivARB_Z_Z = function void (GLint size, const(GLint)* weights) { glWeightivARB_Z_Z_loader(size, weights); };
private void glWeightivARB_Z_Z_loader (GLint size, const(GLint)* weights) {
  *cast(void**)&glWeightivARB_Z_Z = glbindGetProcAddress(`glWeightivARB`);
  if (*cast(void**)&glWeightivARB_Z_Z is null) assert(0, `OpenGL function 'glWeightivARB' not found!`);
  glWeightivARB_Z_Z(size, weights);
}
alias glWeightsvARB = glWeightsvARB_Z_Z;
__gshared glWeightsvARB_Z_Z = function void (GLint size, const(GLshort)* weights) { glWeightsvARB_Z_Z_loader(size, weights); };
private void glWeightsvARB_Z_Z_loader (GLint size, const(GLshort)* weights) {
  *cast(void**)&glWeightsvARB_Z_Z = glbindGetProcAddress(`glWeightsvARB`);
  if (*cast(void**)&glWeightsvARB_Z_Z is null) assert(0, `OpenGL function 'glWeightsvARB' not found!`);
  glWeightsvARB_Z_Z(size, weights);
}
alias glWeightubvARB = glWeightubvARB_Z_Z;
__gshared glWeightubvARB_Z_Z = function void (GLint size, const(GLubyte)* weights) { glWeightubvARB_Z_Z_loader(size, weights); };
private void glWeightubvARB_Z_Z_loader (GLint size, const(GLubyte)* weights) {
  *cast(void**)&glWeightubvARB_Z_Z = glbindGetProcAddress(`glWeightubvARB`);
  if (*cast(void**)&glWeightubvARB_Z_Z is null) assert(0, `OpenGL function 'glWeightubvARB' not found!`);
  glWeightubvARB_Z_Z(size, weights);
}
alias glWeightuivARB = glWeightuivARB_Z_Z;
__gshared glWeightuivARB_Z_Z = function void (GLint size, const(GLuint)* weights) { glWeightuivARB_Z_Z_loader(size, weights); };
private void glWeightuivARB_Z_Z_loader (GLint size, const(GLuint)* weights) {
  *cast(void**)&glWeightuivARB_Z_Z = glbindGetProcAddress(`glWeightuivARB`);
  if (*cast(void**)&glWeightuivARB_Z_Z is null) assert(0, `OpenGL function 'glWeightuivARB' not found!`);
  glWeightuivARB_Z_Z(size, weights);
}
alias glWeightusvARB = glWeightusvARB_Z_Z;
__gshared glWeightusvARB_Z_Z = function void (GLint size, const(GLushort)* weights) { glWeightusvARB_Z_Z_loader(size, weights); };
private void glWeightusvARB_Z_Z_loader (GLint size, const(GLushort)* weights) {
  *cast(void**)&glWeightusvARB_Z_Z = glbindGetProcAddress(`glWeightusvARB`);
  if (*cast(void**)&glWeightusvARB_Z_Z is null) assert(0, `OpenGL function 'glWeightusvARB' not found!`);
  glWeightusvARB_Z_Z(size, weights);
}
alias glWindowPos2d = glWindowPos2d_Z_Z;
__gshared glWindowPos2d_Z_Z = function void (GLdouble x, GLdouble y) { glWindowPos2d_Z_Z_loader(x, y); };
private void glWindowPos2d_Z_Z_loader (GLdouble x, GLdouble y) {
  *cast(void**)&glWindowPos2d_Z_Z = glbindGetProcAddress(`glWindowPos2d`);
  if (*cast(void**)&glWindowPos2d_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2d' not found!`);
  glWindowPos2d_Z_Z(x, y);
}
alias glWindowPos2dARB = glWindowPos2dARB_Z_Z;
__gshared glWindowPos2dARB_Z_Z = function void (GLdouble x, GLdouble y) { glWindowPos2dARB_Z_Z_loader(x, y); };
private void glWindowPos2dARB_Z_Z_loader (GLdouble x, GLdouble y) {
  *cast(void**)&glWindowPos2dARB_Z_Z = glbindGetProcAddress(`glWindowPos2dARB`);
  if (*cast(void**)&glWindowPos2dARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2dARB' not found!`);
  glWindowPos2dARB_Z_Z(x, y);
}
alias glWindowPos2dMESA = glWindowPos2dMESA_Z_Z;
__gshared glWindowPos2dMESA_Z_Z = function void (GLdouble x, GLdouble y) { glWindowPos2dMESA_Z_Z_loader(x, y); };
private void glWindowPos2dMESA_Z_Z_loader (GLdouble x, GLdouble y) {
  *cast(void**)&glWindowPos2dMESA_Z_Z = glbindGetProcAddress(`glWindowPos2dMESA`);
  if (*cast(void**)&glWindowPos2dMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2dMESA' not found!`);
  glWindowPos2dMESA_Z_Z(x, y);
}
alias glWindowPos2dv = glWindowPos2dv_Z_Z;
__gshared glWindowPos2dv_Z_Z = function void (const(GLdouble)* v) { glWindowPos2dv_Z_Z_loader(v); };
private void glWindowPos2dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glWindowPos2dv_Z_Z = glbindGetProcAddress(`glWindowPos2dv`);
  if (*cast(void**)&glWindowPos2dv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2dv' not found!`);
  glWindowPos2dv_Z_Z(v);
}
alias glWindowPos2dvARB = glWindowPos2dvARB_Z_Z;
__gshared glWindowPos2dvARB_Z_Z = function void (const(GLdouble)* v) { glWindowPos2dvARB_Z_Z_loader(v); };
private void glWindowPos2dvARB_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glWindowPos2dvARB_Z_Z = glbindGetProcAddress(`glWindowPos2dvARB`);
  if (*cast(void**)&glWindowPos2dvARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2dvARB' not found!`);
  glWindowPos2dvARB_Z_Z(v);
}
alias glWindowPos2dvMESA = glWindowPos2dvMESA_Z_Z;
__gshared glWindowPos2dvMESA_Z_Z = function void (const(GLdouble)* v) { glWindowPos2dvMESA_Z_Z_loader(v); };
private void glWindowPos2dvMESA_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glWindowPos2dvMESA_Z_Z = glbindGetProcAddress(`glWindowPos2dvMESA`);
  if (*cast(void**)&glWindowPos2dvMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2dvMESA' not found!`);
  glWindowPos2dvMESA_Z_Z(v);
}
alias glWindowPos2f = glWindowPos2f_Z_Z;
__gshared glWindowPos2f_Z_Z = function void (GLfloat x, GLfloat y) { glWindowPos2f_Z_Z_loader(x, y); };
private void glWindowPos2f_Z_Z_loader (GLfloat x, GLfloat y) {
  *cast(void**)&glWindowPos2f_Z_Z = glbindGetProcAddress(`glWindowPos2f`);
  if (*cast(void**)&glWindowPos2f_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2f' not found!`);
  glWindowPos2f_Z_Z(x, y);
}
alias glWindowPos2fARB = glWindowPos2fARB_Z_Z;
__gshared glWindowPos2fARB_Z_Z = function void (GLfloat x, GLfloat y) { glWindowPos2fARB_Z_Z_loader(x, y); };
private void glWindowPos2fARB_Z_Z_loader (GLfloat x, GLfloat y) {
  *cast(void**)&glWindowPos2fARB_Z_Z = glbindGetProcAddress(`glWindowPos2fARB`);
  if (*cast(void**)&glWindowPos2fARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2fARB' not found!`);
  glWindowPos2fARB_Z_Z(x, y);
}
alias glWindowPos2fMESA = glWindowPos2fMESA_Z_Z;
__gshared glWindowPos2fMESA_Z_Z = function void (GLfloat x, GLfloat y) { glWindowPos2fMESA_Z_Z_loader(x, y); };
private void glWindowPos2fMESA_Z_Z_loader (GLfloat x, GLfloat y) {
  *cast(void**)&glWindowPos2fMESA_Z_Z = glbindGetProcAddress(`glWindowPos2fMESA`);
  if (*cast(void**)&glWindowPos2fMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2fMESA' not found!`);
  glWindowPos2fMESA_Z_Z(x, y);
}
alias glWindowPos2fv = glWindowPos2fv_Z_Z;
__gshared glWindowPos2fv_Z_Z = function void (const(GLfloat)* v) { glWindowPos2fv_Z_Z_loader(v); };
private void glWindowPos2fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glWindowPos2fv_Z_Z = glbindGetProcAddress(`glWindowPos2fv`);
  if (*cast(void**)&glWindowPos2fv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2fv' not found!`);
  glWindowPos2fv_Z_Z(v);
}
alias glWindowPos2fvARB = glWindowPos2fvARB_Z_Z;
__gshared glWindowPos2fvARB_Z_Z = function void (const(GLfloat)* v) { glWindowPos2fvARB_Z_Z_loader(v); };
private void glWindowPos2fvARB_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glWindowPos2fvARB_Z_Z = glbindGetProcAddress(`glWindowPos2fvARB`);
  if (*cast(void**)&glWindowPos2fvARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2fvARB' not found!`);
  glWindowPos2fvARB_Z_Z(v);
}
alias glWindowPos2fvMESA = glWindowPos2fvMESA_Z_Z;
__gshared glWindowPos2fvMESA_Z_Z = function void (const(GLfloat)* v) { glWindowPos2fvMESA_Z_Z_loader(v); };
private void glWindowPos2fvMESA_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glWindowPos2fvMESA_Z_Z = glbindGetProcAddress(`glWindowPos2fvMESA`);
  if (*cast(void**)&glWindowPos2fvMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2fvMESA' not found!`);
  glWindowPos2fvMESA_Z_Z(v);
}
alias glWindowPos2i = glWindowPos2i_Z_Z;
__gshared glWindowPos2i_Z_Z = function void (GLint x, GLint y) { glWindowPos2i_Z_Z_loader(x, y); };
private void glWindowPos2i_Z_Z_loader (GLint x, GLint y) {
  *cast(void**)&glWindowPos2i_Z_Z = glbindGetProcAddress(`glWindowPos2i`);
  if (*cast(void**)&glWindowPos2i_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2i' not found!`);
  glWindowPos2i_Z_Z(x, y);
}
alias glWindowPos2iARB = glWindowPos2iARB_Z_Z;
__gshared glWindowPos2iARB_Z_Z = function void (GLint x, GLint y) { glWindowPos2iARB_Z_Z_loader(x, y); };
private void glWindowPos2iARB_Z_Z_loader (GLint x, GLint y) {
  *cast(void**)&glWindowPos2iARB_Z_Z = glbindGetProcAddress(`glWindowPos2iARB`);
  if (*cast(void**)&glWindowPos2iARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2iARB' not found!`);
  glWindowPos2iARB_Z_Z(x, y);
}
alias glWindowPos2iMESA = glWindowPos2iMESA_Z_Z;
__gshared glWindowPos2iMESA_Z_Z = function void (GLint x, GLint y) { glWindowPos2iMESA_Z_Z_loader(x, y); };
private void glWindowPos2iMESA_Z_Z_loader (GLint x, GLint y) {
  *cast(void**)&glWindowPos2iMESA_Z_Z = glbindGetProcAddress(`glWindowPos2iMESA`);
  if (*cast(void**)&glWindowPos2iMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2iMESA' not found!`);
  glWindowPos2iMESA_Z_Z(x, y);
}
alias glWindowPos2iv = glWindowPos2iv_Z_Z;
__gshared glWindowPos2iv_Z_Z = function void (const(GLint)* v) { glWindowPos2iv_Z_Z_loader(v); };
private void glWindowPos2iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glWindowPos2iv_Z_Z = glbindGetProcAddress(`glWindowPos2iv`);
  if (*cast(void**)&glWindowPos2iv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2iv' not found!`);
  glWindowPos2iv_Z_Z(v);
}
alias glWindowPos2ivARB = glWindowPos2ivARB_Z_Z;
__gshared glWindowPos2ivARB_Z_Z = function void (const(GLint)* v) { glWindowPos2ivARB_Z_Z_loader(v); };
private void glWindowPos2ivARB_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glWindowPos2ivARB_Z_Z = glbindGetProcAddress(`glWindowPos2ivARB`);
  if (*cast(void**)&glWindowPos2ivARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2ivARB' not found!`);
  glWindowPos2ivARB_Z_Z(v);
}
alias glWindowPos2ivMESA = glWindowPos2ivMESA_Z_Z;
__gshared glWindowPos2ivMESA_Z_Z = function void (const(GLint)* v) { glWindowPos2ivMESA_Z_Z_loader(v); };
private void glWindowPos2ivMESA_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glWindowPos2ivMESA_Z_Z = glbindGetProcAddress(`glWindowPos2ivMESA`);
  if (*cast(void**)&glWindowPos2ivMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2ivMESA' not found!`);
  glWindowPos2ivMESA_Z_Z(v);
}
alias glWindowPos2s = glWindowPos2s_Z_Z;
__gshared glWindowPos2s_Z_Z = function void (GLshort x, GLshort y) { glWindowPos2s_Z_Z_loader(x, y); };
private void glWindowPos2s_Z_Z_loader (GLshort x, GLshort y) {
  *cast(void**)&glWindowPos2s_Z_Z = glbindGetProcAddress(`glWindowPos2s`);
  if (*cast(void**)&glWindowPos2s_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2s' not found!`);
  glWindowPos2s_Z_Z(x, y);
}
alias glWindowPos2sARB = glWindowPos2sARB_Z_Z;
__gshared glWindowPos2sARB_Z_Z = function void (GLshort x, GLshort y) { glWindowPos2sARB_Z_Z_loader(x, y); };
private void glWindowPos2sARB_Z_Z_loader (GLshort x, GLshort y) {
  *cast(void**)&glWindowPos2sARB_Z_Z = glbindGetProcAddress(`glWindowPos2sARB`);
  if (*cast(void**)&glWindowPos2sARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2sARB' not found!`);
  glWindowPos2sARB_Z_Z(x, y);
}
alias glWindowPos2sMESA = glWindowPos2sMESA_Z_Z;
__gshared glWindowPos2sMESA_Z_Z = function void (GLshort x, GLshort y) { glWindowPos2sMESA_Z_Z_loader(x, y); };
private void glWindowPos2sMESA_Z_Z_loader (GLshort x, GLshort y) {
  *cast(void**)&glWindowPos2sMESA_Z_Z = glbindGetProcAddress(`glWindowPos2sMESA`);
  if (*cast(void**)&glWindowPos2sMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2sMESA' not found!`);
  glWindowPos2sMESA_Z_Z(x, y);
}
alias glWindowPos2sv = glWindowPos2sv_Z_Z;
__gshared glWindowPos2sv_Z_Z = function void (const(GLshort)* v) { glWindowPos2sv_Z_Z_loader(v); };
private void glWindowPos2sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glWindowPos2sv_Z_Z = glbindGetProcAddress(`glWindowPos2sv`);
  if (*cast(void**)&glWindowPos2sv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2sv' not found!`);
  glWindowPos2sv_Z_Z(v);
}
alias glWindowPos2svARB = glWindowPos2svARB_Z_Z;
__gshared glWindowPos2svARB_Z_Z = function void (const(GLshort)* v) { glWindowPos2svARB_Z_Z_loader(v); };
private void glWindowPos2svARB_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glWindowPos2svARB_Z_Z = glbindGetProcAddress(`glWindowPos2svARB`);
  if (*cast(void**)&glWindowPos2svARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2svARB' not found!`);
  glWindowPos2svARB_Z_Z(v);
}
alias glWindowPos2svMESA = glWindowPos2svMESA_Z_Z;
__gshared glWindowPos2svMESA_Z_Z = function void (const(GLshort)* v) { glWindowPos2svMESA_Z_Z_loader(v); };
private void glWindowPos2svMESA_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glWindowPos2svMESA_Z_Z = glbindGetProcAddress(`glWindowPos2svMESA`);
  if (*cast(void**)&glWindowPos2svMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos2svMESA' not found!`);
  glWindowPos2svMESA_Z_Z(v);
}
alias glWindowPos3d = glWindowPos3d_Z_Z;
__gshared glWindowPos3d_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z) { glWindowPos3d_Z_Z_loader(x, y, z); };
private void glWindowPos3d_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glWindowPos3d_Z_Z = glbindGetProcAddress(`glWindowPos3d`);
  if (*cast(void**)&glWindowPos3d_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3d' not found!`);
  glWindowPos3d_Z_Z(x, y, z);
}
alias glWindowPos3dARB = glWindowPos3dARB_Z_Z;
__gshared glWindowPos3dARB_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z) { glWindowPos3dARB_Z_Z_loader(x, y, z); };
private void glWindowPos3dARB_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glWindowPos3dARB_Z_Z = glbindGetProcAddress(`glWindowPos3dARB`);
  if (*cast(void**)&glWindowPos3dARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3dARB' not found!`);
  glWindowPos3dARB_Z_Z(x, y, z);
}
alias glWindowPos3dMESA = glWindowPos3dMESA_Z_Z;
__gshared glWindowPos3dMESA_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z) { glWindowPos3dMESA_Z_Z_loader(x, y, z); };
private void glWindowPos3dMESA_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z) {
  *cast(void**)&glWindowPos3dMESA_Z_Z = glbindGetProcAddress(`glWindowPos3dMESA`);
  if (*cast(void**)&glWindowPos3dMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3dMESA' not found!`);
  glWindowPos3dMESA_Z_Z(x, y, z);
}
alias glWindowPos3dv = glWindowPos3dv_Z_Z;
__gshared glWindowPos3dv_Z_Z = function void (const(GLdouble)* v) { glWindowPos3dv_Z_Z_loader(v); };
private void glWindowPos3dv_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glWindowPos3dv_Z_Z = glbindGetProcAddress(`glWindowPos3dv`);
  if (*cast(void**)&glWindowPos3dv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3dv' not found!`);
  glWindowPos3dv_Z_Z(v);
}
alias glWindowPos3dvARB = glWindowPos3dvARB_Z_Z;
__gshared glWindowPos3dvARB_Z_Z = function void (const(GLdouble)* v) { glWindowPos3dvARB_Z_Z_loader(v); };
private void glWindowPos3dvARB_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glWindowPos3dvARB_Z_Z = glbindGetProcAddress(`glWindowPos3dvARB`);
  if (*cast(void**)&glWindowPos3dvARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3dvARB' not found!`);
  glWindowPos3dvARB_Z_Z(v);
}
alias glWindowPos3dvMESA = glWindowPos3dvMESA_Z_Z;
__gshared glWindowPos3dvMESA_Z_Z = function void (const(GLdouble)* v) { glWindowPos3dvMESA_Z_Z_loader(v); };
private void glWindowPos3dvMESA_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glWindowPos3dvMESA_Z_Z = glbindGetProcAddress(`glWindowPos3dvMESA`);
  if (*cast(void**)&glWindowPos3dvMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3dvMESA' not found!`);
  glWindowPos3dvMESA_Z_Z(v);
}
alias glWindowPos3f = glWindowPos3f_Z_Z;
__gshared glWindowPos3f_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z) { glWindowPos3f_Z_Z_loader(x, y, z); };
private void glWindowPos3f_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glWindowPos3f_Z_Z = glbindGetProcAddress(`glWindowPos3f`);
  if (*cast(void**)&glWindowPos3f_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3f' not found!`);
  glWindowPos3f_Z_Z(x, y, z);
}
alias glWindowPos3fARB = glWindowPos3fARB_Z_Z;
__gshared glWindowPos3fARB_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z) { glWindowPos3fARB_Z_Z_loader(x, y, z); };
private void glWindowPos3fARB_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glWindowPos3fARB_Z_Z = glbindGetProcAddress(`glWindowPos3fARB`);
  if (*cast(void**)&glWindowPos3fARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3fARB' not found!`);
  glWindowPos3fARB_Z_Z(x, y, z);
}
alias glWindowPos3fMESA = glWindowPos3fMESA_Z_Z;
__gshared glWindowPos3fMESA_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z) { glWindowPos3fMESA_Z_Z_loader(x, y, z); };
private void glWindowPos3fMESA_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z) {
  *cast(void**)&glWindowPos3fMESA_Z_Z = glbindGetProcAddress(`glWindowPos3fMESA`);
  if (*cast(void**)&glWindowPos3fMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3fMESA' not found!`);
  glWindowPos3fMESA_Z_Z(x, y, z);
}
alias glWindowPos3fv = glWindowPos3fv_Z_Z;
__gshared glWindowPos3fv_Z_Z = function void (const(GLfloat)* v) { glWindowPos3fv_Z_Z_loader(v); };
private void glWindowPos3fv_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glWindowPos3fv_Z_Z = glbindGetProcAddress(`glWindowPos3fv`);
  if (*cast(void**)&glWindowPos3fv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3fv' not found!`);
  glWindowPos3fv_Z_Z(v);
}
alias glWindowPos3fvARB = glWindowPos3fvARB_Z_Z;
__gshared glWindowPos3fvARB_Z_Z = function void (const(GLfloat)* v) { glWindowPos3fvARB_Z_Z_loader(v); };
private void glWindowPos3fvARB_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glWindowPos3fvARB_Z_Z = glbindGetProcAddress(`glWindowPos3fvARB`);
  if (*cast(void**)&glWindowPos3fvARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3fvARB' not found!`);
  glWindowPos3fvARB_Z_Z(v);
}
alias glWindowPos3fvMESA = glWindowPos3fvMESA_Z_Z;
__gshared glWindowPos3fvMESA_Z_Z = function void (const(GLfloat)* v) { glWindowPos3fvMESA_Z_Z_loader(v); };
private void glWindowPos3fvMESA_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glWindowPos3fvMESA_Z_Z = glbindGetProcAddress(`glWindowPos3fvMESA`);
  if (*cast(void**)&glWindowPos3fvMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3fvMESA' not found!`);
  glWindowPos3fvMESA_Z_Z(v);
}
alias glWindowPos3i = glWindowPos3i_Z_Z;
__gshared glWindowPos3i_Z_Z = function void (GLint x, GLint y, GLint z) { glWindowPos3i_Z_Z_loader(x, y, z); };
private void glWindowPos3i_Z_Z_loader (GLint x, GLint y, GLint z) {
  *cast(void**)&glWindowPos3i_Z_Z = glbindGetProcAddress(`glWindowPos3i`);
  if (*cast(void**)&glWindowPos3i_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3i' not found!`);
  glWindowPos3i_Z_Z(x, y, z);
}
alias glWindowPos3iARB = glWindowPos3iARB_Z_Z;
__gshared glWindowPos3iARB_Z_Z = function void (GLint x, GLint y, GLint z) { glWindowPos3iARB_Z_Z_loader(x, y, z); };
private void glWindowPos3iARB_Z_Z_loader (GLint x, GLint y, GLint z) {
  *cast(void**)&glWindowPos3iARB_Z_Z = glbindGetProcAddress(`glWindowPos3iARB`);
  if (*cast(void**)&glWindowPos3iARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3iARB' not found!`);
  glWindowPos3iARB_Z_Z(x, y, z);
}
alias glWindowPos3iMESA = glWindowPos3iMESA_Z_Z;
__gshared glWindowPos3iMESA_Z_Z = function void (GLint x, GLint y, GLint z) { glWindowPos3iMESA_Z_Z_loader(x, y, z); };
private void glWindowPos3iMESA_Z_Z_loader (GLint x, GLint y, GLint z) {
  *cast(void**)&glWindowPos3iMESA_Z_Z = glbindGetProcAddress(`glWindowPos3iMESA`);
  if (*cast(void**)&glWindowPos3iMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3iMESA' not found!`);
  glWindowPos3iMESA_Z_Z(x, y, z);
}
alias glWindowPos3iv = glWindowPos3iv_Z_Z;
__gshared glWindowPos3iv_Z_Z = function void (const(GLint)* v) { glWindowPos3iv_Z_Z_loader(v); };
private void glWindowPos3iv_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glWindowPos3iv_Z_Z = glbindGetProcAddress(`glWindowPos3iv`);
  if (*cast(void**)&glWindowPos3iv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3iv' not found!`);
  glWindowPos3iv_Z_Z(v);
}
alias glWindowPos3ivARB = glWindowPos3ivARB_Z_Z;
__gshared glWindowPos3ivARB_Z_Z = function void (const(GLint)* v) { glWindowPos3ivARB_Z_Z_loader(v); };
private void glWindowPos3ivARB_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glWindowPos3ivARB_Z_Z = glbindGetProcAddress(`glWindowPos3ivARB`);
  if (*cast(void**)&glWindowPos3ivARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3ivARB' not found!`);
  glWindowPos3ivARB_Z_Z(v);
}
alias glWindowPos3ivMESA = glWindowPos3ivMESA_Z_Z;
__gshared glWindowPos3ivMESA_Z_Z = function void (const(GLint)* v) { glWindowPos3ivMESA_Z_Z_loader(v); };
private void glWindowPos3ivMESA_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glWindowPos3ivMESA_Z_Z = glbindGetProcAddress(`glWindowPos3ivMESA`);
  if (*cast(void**)&glWindowPos3ivMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3ivMESA' not found!`);
  glWindowPos3ivMESA_Z_Z(v);
}
alias glWindowPos3s = glWindowPos3s_Z_Z;
__gshared glWindowPos3s_Z_Z = function void (GLshort x, GLshort y, GLshort z) { glWindowPos3s_Z_Z_loader(x, y, z); };
private void glWindowPos3s_Z_Z_loader (GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glWindowPos3s_Z_Z = glbindGetProcAddress(`glWindowPos3s`);
  if (*cast(void**)&glWindowPos3s_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3s' not found!`);
  glWindowPos3s_Z_Z(x, y, z);
}
alias glWindowPos3sARB = glWindowPos3sARB_Z_Z;
__gshared glWindowPos3sARB_Z_Z = function void (GLshort x, GLshort y, GLshort z) { glWindowPos3sARB_Z_Z_loader(x, y, z); };
private void glWindowPos3sARB_Z_Z_loader (GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glWindowPos3sARB_Z_Z = glbindGetProcAddress(`glWindowPos3sARB`);
  if (*cast(void**)&glWindowPos3sARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3sARB' not found!`);
  glWindowPos3sARB_Z_Z(x, y, z);
}
alias glWindowPos3sMESA = glWindowPos3sMESA_Z_Z;
__gshared glWindowPos3sMESA_Z_Z = function void (GLshort x, GLshort y, GLshort z) { glWindowPos3sMESA_Z_Z_loader(x, y, z); };
private void glWindowPos3sMESA_Z_Z_loader (GLshort x, GLshort y, GLshort z) {
  *cast(void**)&glWindowPos3sMESA_Z_Z = glbindGetProcAddress(`glWindowPos3sMESA`);
  if (*cast(void**)&glWindowPos3sMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3sMESA' not found!`);
  glWindowPos3sMESA_Z_Z(x, y, z);
}
alias glWindowPos3sv = glWindowPos3sv_Z_Z;
__gshared glWindowPos3sv_Z_Z = function void (const(GLshort)* v) { glWindowPos3sv_Z_Z_loader(v); };
private void glWindowPos3sv_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glWindowPos3sv_Z_Z = glbindGetProcAddress(`glWindowPos3sv`);
  if (*cast(void**)&glWindowPos3sv_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3sv' not found!`);
  glWindowPos3sv_Z_Z(v);
}
alias glWindowPos3svARB = glWindowPos3svARB_Z_Z;
__gshared glWindowPos3svARB_Z_Z = function void (const(GLshort)* v) { glWindowPos3svARB_Z_Z_loader(v); };
private void glWindowPos3svARB_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glWindowPos3svARB_Z_Z = glbindGetProcAddress(`glWindowPos3svARB`);
  if (*cast(void**)&glWindowPos3svARB_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3svARB' not found!`);
  glWindowPos3svARB_Z_Z(v);
}
alias glWindowPos3svMESA = glWindowPos3svMESA_Z_Z;
__gshared glWindowPos3svMESA_Z_Z = function void (const(GLshort)* v) { glWindowPos3svMESA_Z_Z_loader(v); };
private void glWindowPos3svMESA_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glWindowPos3svMESA_Z_Z = glbindGetProcAddress(`glWindowPos3svMESA`);
  if (*cast(void**)&glWindowPos3svMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos3svMESA' not found!`);
  glWindowPos3svMESA_Z_Z(v);
}
alias glWindowPos4dMESA = glWindowPos4dMESA_Z_Z;
__gshared glWindowPos4dMESA_Z_Z = function void (GLdouble x, GLdouble y, GLdouble z, GLdouble w) { glWindowPos4dMESA_Z_Z_loader(x, y, z, w); };
private void glWindowPos4dMESA_Z_Z_loader (GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  *cast(void**)&glWindowPos4dMESA_Z_Z = glbindGetProcAddress(`glWindowPos4dMESA`);
  if (*cast(void**)&glWindowPos4dMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4dMESA' not found!`);
  glWindowPos4dMESA_Z_Z(x, y, z, w);
}
alias glWindowPos4dvMESA = glWindowPos4dvMESA_Z_Z;
__gshared glWindowPos4dvMESA_Z_Z = function void (const(GLdouble)* v) { glWindowPos4dvMESA_Z_Z_loader(v); };
private void glWindowPos4dvMESA_Z_Z_loader (const(GLdouble)* v) {
  *cast(void**)&glWindowPos4dvMESA_Z_Z = glbindGetProcAddress(`glWindowPos4dvMESA`);
  if (*cast(void**)&glWindowPos4dvMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4dvMESA' not found!`);
  glWindowPos4dvMESA_Z_Z(v);
}
alias glWindowPos4fMESA = glWindowPos4fMESA_Z_Z;
__gshared glWindowPos4fMESA_Z_Z = function void (GLfloat x, GLfloat y, GLfloat z, GLfloat w) { glWindowPos4fMESA_Z_Z_loader(x, y, z, w); };
private void glWindowPos4fMESA_Z_Z_loader (GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  *cast(void**)&glWindowPos4fMESA_Z_Z = glbindGetProcAddress(`glWindowPos4fMESA`);
  if (*cast(void**)&glWindowPos4fMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4fMESA' not found!`);
  glWindowPos4fMESA_Z_Z(x, y, z, w);
}
alias glWindowPos4fvMESA = glWindowPos4fvMESA_Z_Z;
__gshared glWindowPos4fvMESA_Z_Z = function void (const(GLfloat)* v) { glWindowPos4fvMESA_Z_Z_loader(v); };
private void glWindowPos4fvMESA_Z_Z_loader (const(GLfloat)* v) {
  *cast(void**)&glWindowPos4fvMESA_Z_Z = glbindGetProcAddress(`glWindowPos4fvMESA`);
  if (*cast(void**)&glWindowPos4fvMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4fvMESA' not found!`);
  glWindowPos4fvMESA_Z_Z(v);
}
alias glWindowPos4iMESA = glWindowPos4iMESA_Z_Z;
__gshared glWindowPos4iMESA_Z_Z = function void (GLint x, GLint y, GLint z, GLint w) { glWindowPos4iMESA_Z_Z_loader(x, y, z, w); };
private void glWindowPos4iMESA_Z_Z_loader (GLint x, GLint y, GLint z, GLint w) {
  *cast(void**)&glWindowPos4iMESA_Z_Z = glbindGetProcAddress(`glWindowPos4iMESA`);
  if (*cast(void**)&glWindowPos4iMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4iMESA' not found!`);
  glWindowPos4iMESA_Z_Z(x, y, z, w);
}
alias glWindowPos4ivMESA = glWindowPos4ivMESA_Z_Z;
__gshared glWindowPos4ivMESA_Z_Z = function void (const(GLint)* v) { glWindowPos4ivMESA_Z_Z_loader(v); };
private void glWindowPos4ivMESA_Z_Z_loader (const(GLint)* v) {
  *cast(void**)&glWindowPos4ivMESA_Z_Z = glbindGetProcAddress(`glWindowPos4ivMESA`);
  if (*cast(void**)&glWindowPos4ivMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4ivMESA' not found!`);
  glWindowPos4ivMESA_Z_Z(v);
}
alias glWindowPos4sMESA = glWindowPos4sMESA_Z_Z;
__gshared glWindowPos4sMESA_Z_Z = function void (GLshort x, GLshort y, GLshort z, GLshort w) { glWindowPos4sMESA_Z_Z_loader(x, y, z, w); };
private void glWindowPos4sMESA_Z_Z_loader (GLshort x, GLshort y, GLshort z, GLshort w) {
  *cast(void**)&glWindowPos4sMESA_Z_Z = glbindGetProcAddress(`glWindowPos4sMESA`);
  if (*cast(void**)&glWindowPos4sMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4sMESA' not found!`);
  glWindowPos4sMESA_Z_Z(x, y, z, w);
}
alias glWindowPos4svMESA = glWindowPos4svMESA_Z_Z;
__gshared glWindowPos4svMESA_Z_Z = function void (const(GLshort)* v) { glWindowPos4svMESA_Z_Z_loader(v); };
private void glWindowPos4svMESA_Z_Z_loader (const(GLshort)* v) {
  *cast(void**)&glWindowPos4svMESA_Z_Z = glbindGetProcAddress(`glWindowPos4svMESA`);
  if (*cast(void**)&glWindowPos4svMESA_Z_Z is null) assert(0, `OpenGL function 'glWindowPos4svMESA' not found!`);
  glWindowPos4svMESA_Z_Z(v);
}
alias glWindowRectanglesEXT = glWindowRectanglesEXT_Z_Z;
__gshared glWindowRectanglesEXT_Z_Z = function void (GLenum mode, GLsizei count, const(GLint)* box) { glWindowRectanglesEXT_Z_Z_loader(mode, count, box); };
private void glWindowRectanglesEXT_Z_Z_loader (GLenum mode, GLsizei count, const(GLint)* box) {
  *cast(void**)&glWindowRectanglesEXT_Z_Z = glbindGetProcAddress(`glWindowRectanglesEXT`);
  if (*cast(void**)&glWindowRectanglesEXT_Z_Z is null) assert(0, `OpenGL function 'glWindowRectanglesEXT' not found!`);
  glWindowRectanglesEXT_Z_Z(mode, count, box);
}
alias glWriteMaskEXT = glWriteMaskEXT_Z_Z;
__gshared glWriteMaskEXT_Z_Z = function void (GLuint res, GLuint in_, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { glWriteMaskEXT_Z_Z_loader(res, in_, outX, outY, outZ, outW); };
private void glWriteMaskEXT_Z_Z_loader (GLuint res, GLuint in_, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  *cast(void**)&glWriteMaskEXT_Z_Z = glbindGetProcAddress(`glWriteMaskEXT`);
  if (*cast(void**)&glWriteMaskEXT_Z_Z is null) assert(0, `OpenGL function 'glWriteMaskEXT' not found!`);
  glWriteMaskEXT_Z_Z(res, in_, outX, outY, outZ, outW);
}
alias glDrawVkImageNV = glDrawVkImageNV_Z_Z;
__gshared glDrawVkImageNV_Z_Z = function void (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { glDrawVkImageNV_Z_Z_loader(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); };
private void glDrawVkImageNV_Z_Z_loader (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  *cast(void**)&glDrawVkImageNV_Z_Z = glbindGetProcAddress(`glDrawVkImageNV`);
  if (*cast(void**)&glDrawVkImageNV_Z_Z is null) assert(0, `OpenGL function 'glDrawVkImageNV' not found!`);
  glDrawVkImageNV_Z_Z(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}
alias glGetVkProcAddrNV = glGetVkProcAddrNV_Z_Z;
__gshared glGetVkProcAddrNV_Z_Z = function GLVULKANPROCNV (const(GLchar)* name) { return glGetVkProcAddrNV_Z_Z_loader(name); };
private GLVULKANPROCNV glGetVkProcAddrNV_Z_Z_loader (const(GLchar)* name) {
  *cast(void**)&glGetVkProcAddrNV_Z_Z = glbindGetProcAddress(`glGetVkProcAddrNV`);
  if (*cast(void**)&glGetVkProcAddrNV_Z_Z is null) assert(0, `OpenGL function 'glGetVkProcAddrNV' not found!`);
  return glGetVkProcAddrNV_Z_Z(name);
}
alias glWaitVkSemaphoreNV = glWaitVkSemaphoreNV_Z_Z;
__gshared glWaitVkSemaphoreNV_Z_Z = function void (GLuint64 vkSemaphore) { glWaitVkSemaphoreNV_Z_Z_loader(vkSemaphore); };
private void glWaitVkSemaphoreNV_Z_Z_loader (GLuint64 vkSemaphore) {
  *cast(void**)&glWaitVkSemaphoreNV_Z_Z = glbindGetProcAddress(`glWaitVkSemaphoreNV`);
  if (*cast(void**)&glWaitVkSemaphoreNV_Z_Z is null) assert(0, `OpenGL function 'glWaitVkSemaphoreNV' not found!`);
  glWaitVkSemaphoreNV_Z_Z(vkSemaphore);
}
alias glSignalVkSemaphoreNV = glSignalVkSemaphoreNV_Z_Z;
__gshared glSignalVkSemaphoreNV_Z_Z = function void (GLuint64 vkSemaphore) { glSignalVkSemaphoreNV_Z_Z_loader(vkSemaphore); };
private void glSignalVkSemaphoreNV_Z_Z_loader (GLuint64 vkSemaphore) {
  *cast(void**)&glSignalVkSemaphoreNV_Z_Z = glbindGetProcAddress(`glSignalVkSemaphoreNV`);
  if (*cast(void**)&glSignalVkSemaphoreNV_Z_Z is null) assert(0, `OpenGL function 'glSignalVkSemaphoreNV' not found!`);
  glSignalVkSemaphoreNV_Z_Z(vkSemaphore);
}
alias glSignalVkFenceNV = glSignalVkFenceNV_Z_Z;
__gshared glSignalVkFenceNV_Z_Z = function void (GLuint64 vkFence) { glSignalVkFenceNV_Z_Z_loader(vkFence); };
private void glSignalVkFenceNV_Z_Z_loader (GLuint64 vkFence) {
  *cast(void**)&glSignalVkFenceNV_Z_Z = glbindGetProcAddress(`glSignalVkFenceNV`);
  if (*cast(void**)&glSignalVkFenceNV_Z_Z is null) assert(0, `OpenGL function 'glSignalVkFenceNV' not found!`);
  glSignalVkFenceNV_Z_Z(vkFence);
}

}
}
