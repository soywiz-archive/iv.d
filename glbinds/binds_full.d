// WTFPL or Public Domain, on your choice
module iv.glbinds.binds_full;

// lazy loading
version = glbind_lazy_load;

// show loaded functions
//version = glbind_debug;


public import arsd.simpledisplay;


// ////////////////////////////////////////////////////////////////////////// //
extern(C) nothrow @nogc {

alias GLvoid = void;
alias GLintptr = ptrdiff_t;
alias GLsizei = int;
alias GLchar = char;
alias GLcharARB = byte;
alias GLushort = ushort;
alias GLint64EXT = long;
alias GLshort = short;
alias GLuint64 = ulong;
alias GLhalfARB = ushort;
alias GLubyte = ubyte;
alias GLdouble = double;
alias GLhandleARB = uint;
alias GLint64 = long;
alias GLenum = uint;
alias GLeglImageOES = void*;
alias GLintptrARB = ptrdiff_t;
alias GLsizeiptr = ptrdiff_t;
alias GLint = int;
alias GLboolean = ubyte;
alias GLbitfield = uint;
alias GLsizeiptrARB = ptrdiff_t;
alias GLfloat = float;
alias GLuint64EXT = ulong;
alias GLclampf = float;
alias GLbyte = byte;
alias GLclampd = double;
alias GLuint = uint;
alias GLvdpauSurfaceNV = ptrdiff_t;
alias GLfixed = int;
alias GLhalf = ushort;
alias GLclampx = int;
alias GLhalfNV = ushort;
//struct ___GLsync; alias __GLsync = ___GLsync*;
//alias GLsync = __GLsync*;
//struct __cl_context; alias _cl_context = __cl_context*;
//struct __cl_event; alias _cl_event = __cl_event*;

enum ubyte GL_FALSE = 0;
enum ubyte GL_TRUE = 1;
enum uint GL_NO_ERROR = 0;
enum uint GL_NONE = 0;
enum uint GL_ZERO = 0;
enum uint GL_ONE = 1;
enum uint GL_NONE_OES = 0;
enum uint GL_INVALID_INDEX = 0xFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
enum uint GL_VERSION_ES_CL_1_0 = 1;
enum uint GL_VERSION_ES_CM_1_1 = 1;
enum uint GL_VERSION_ES_CL_1_1 = 1;
enum uint GL_DEPTH_BUFFER_BIT = 0x00000100;
enum uint GL_STENCIL_BUFFER_BIT = 0x00000400;
enum uint GL_COLOR_BUFFER_BIT = 0x00004000;
enum uint GL_POINTS = 0x0000;
enum uint GL_LINES = 0x0001;
enum uint GL_LINE_LOOP = 0x0002;
enum uint GL_LINE_STRIP = 0x0003;
enum uint GL_TRIANGLES = 0x0004;
enum uint GL_TRIANGLE_STRIP = 0x0005;
enum uint GL_TRIANGLE_FAN = 0x0006;
enum uint GL_QUADS = 0x0007;
enum uint GL_NEVER = 0x0200;
enum uint GL_LESS = 0x0201;
enum uint GL_EQUAL = 0x0202;
enum uint GL_LEQUAL = 0x0203;
enum uint GL_GREATER = 0x0204;
enum uint GL_NOTEQUAL = 0x0205;
enum uint GL_GEQUAL = 0x0206;
enum uint GL_ALWAYS = 0x0207;
enum uint GL_SRC_COLOR = 0x0300;
enum uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum uint GL_SRC_ALPHA = 0x0302;
enum uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum uint GL_DST_ALPHA = 0x0304;
enum uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum uint GL_DST_COLOR = 0x0306;
enum uint GL_ONE_MINUS_DST_COLOR = 0x0307;
enum uint GL_SRC_ALPHA_SATURATE = 0x0308;
enum uint GL_FRONT_LEFT = 0x0400;
enum uint GL_FRONT_RIGHT = 0x0401;
enum uint GL_BACK_LEFT = 0x0402;
enum uint GL_BACK_RIGHT = 0x0403;
enum uint GL_FRONT = 0x0404;
enum uint GL_BACK = 0x0405;
enum uint GL_LEFT = 0x0406;
enum uint GL_RIGHT = 0x0407;
enum uint GL_FRONT_AND_BACK = 0x0408;
enum uint GL_INVALID_ENUM = 0x0500;
enum uint GL_INVALID_VALUE = 0x0501;
enum uint GL_INVALID_OPERATION = 0x0502;
enum uint GL_OUT_OF_MEMORY = 0x0505;
enum uint GL_CW = 0x0900;
enum uint GL_CCW = 0x0901;
enum uint GL_POINT_SIZE = 0x0B11;
enum uint GL_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_LINE_SMOOTH = 0x0B20;
enum uint GL_LINE_WIDTH = 0x0B21;
enum uint GL_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_POLYGON_MODE = 0x0B40;
enum uint GL_POLYGON_SMOOTH = 0x0B41;
enum uint GL_CULL_FACE = 0x0B44;
enum uint GL_CULL_FACE_MODE = 0x0B45;
enum uint GL_FRONT_FACE = 0x0B46;
enum uint GL_DEPTH_RANGE = 0x0B70;
enum uint GL_DEPTH_TEST = 0x0B71;
enum uint GL_DEPTH_WRITEMASK = 0x0B72;
enum uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum uint GL_DEPTH_FUNC = 0x0B74;
enum uint GL_STENCIL_TEST = 0x0B90;
enum uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum uint GL_STENCIL_FUNC = 0x0B92;
enum uint GL_STENCIL_VALUE_MASK = 0x0B93;
enum uint GL_STENCIL_FAIL = 0x0B94;
enum uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum uint GL_STENCIL_REF = 0x0B97;
enum uint GL_STENCIL_WRITEMASK = 0x0B98;
enum uint GL_VIEWPORT = 0x0BA2;
enum uint GL_DITHER = 0x0BD0;
enum uint GL_BLEND_DST = 0x0BE0;
enum uint GL_BLEND_SRC = 0x0BE1;
enum uint GL_BLEND = 0x0BE2;
enum uint GL_LOGIC_OP_MODE = 0x0BF0;
enum uint GL_COLOR_LOGIC_OP = 0x0BF2;
enum uint GL_DRAW_BUFFER = 0x0C01;
enum uint GL_READ_BUFFER = 0x0C02;
enum uint GL_SCISSOR_BOX = 0x0C10;
enum uint GL_SCISSOR_TEST = 0x0C11;
enum uint GL_COLOR_CLEAR_VALUE = 0x0C22;
enum uint GL_COLOR_WRITEMASK = 0x0C23;
enum uint GL_DOUBLEBUFFER = 0x0C32;
enum uint GL_STEREO = 0x0C33;
enum uint GL_LINE_SMOOTH_HINT = 0x0C52;
enum uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
enum uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
enum uint GL_UNPACK_LSB_FIRST = 0x0CF1;
enum uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum uint GL_UNPACK_ALIGNMENT = 0x0CF5;
enum uint GL_PACK_SWAP_BYTES = 0x0D00;
enum uint GL_PACK_LSB_FIRST = 0x0D01;
enum uint GL_PACK_ROW_LENGTH = 0x0D02;
enum uint GL_PACK_SKIP_ROWS = 0x0D03;
enum uint GL_PACK_SKIP_PIXELS = 0x0D04;
enum uint GL_PACK_ALIGNMENT = 0x0D05;
enum uint GL_MAX_TEXTURE_SIZE = 0x0D33;
enum uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum uint GL_SUBPIXEL_BITS = 0x0D50;
enum uint GL_TEXTURE_1D = 0x0DE0;
enum uint GL_TEXTURE_2D = 0x0DE1;
enum uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum uint GL_POLYGON_OFFSET_POINT = 0x2A01;
enum uint GL_POLYGON_OFFSET_LINE = 0x2A02;
enum uint GL_POLYGON_OFFSET_FILL = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum uint GL_TEXTURE_BINDING_1D = 0x8068;
enum uint GL_TEXTURE_BINDING_2D = 0x8069;
enum uint GL_TEXTURE_WIDTH = 0x1000;
enum uint GL_TEXTURE_HEIGHT = 0x1001;
enum uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum uint GL_TEXTURE_BORDER_COLOR = 0x1004;
enum uint GL_TEXTURE_RED_SIZE = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum uint GL_DONT_CARE = 0x1100;
enum uint GL_FASTEST = 0x1101;
enum uint GL_NICEST = 0x1102;
enum uint GL_BYTE = 0x1400;
enum uint GL_UNSIGNED_BYTE = 0x1401;
enum uint GL_SHORT = 0x1402;
enum uint GL_UNSIGNED_SHORT = 0x1403;
enum uint GL_INT = 0x1404;
enum uint GL_UNSIGNED_INT = 0x1405;
enum uint GL_FLOAT = 0x1406;
enum uint GL_DOUBLE = 0x140A;
enum uint GL_STACK_OVERFLOW = 0x0503;
enum uint GL_STACK_UNDERFLOW = 0x0504;
enum uint GL_CLEAR = 0x1500;
enum uint GL_AND = 0x1501;
enum uint GL_AND_REVERSE = 0x1502;
enum uint GL_COPY = 0x1503;
enum uint GL_AND_INVERTED = 0x1504;
enum uint GL_NOOP = 0x1505;
enum uint GL_XOR = 0x1506;
enum uint GL_OR = 0x1507;
enum uint GL_NOR = 0x1508;
enum uint GL_EQUIV = 0x1509;
enum uint GL_INVERT = 0x150A;
enum uint GL_OR_REVERSE = 0x150B;
enum uint GL_COPY_INVERTED = 0x150C;
enum uint GL_OR_INVERTED = 0x150D;
enum uint GL_NAND = 0x150E;
enum uint GL_SET = 0x150F;
enum uint GL_TEXTURE = 0x1702;
enum uint GL_COLOR = 0x1800;
enum uint GL_DEPTH = 0x1801;
enum uint GL_STENCIL = 0x1802;
enum uint GL_STENCIL_INDEX = 0x1901;
enum uint GL_DEPTH_COMPONENT = 0x1902;
enum uint GL_RED = 0x1903;
enum uint GL_GREEN = 0x1904;
enum uint GL_BLUE = 0x1905;
enum uint GL_ALPHA = 0x1906;
enum uint GL_RGB = 0x1907;
enum uint GL_RGBA = 0x1908;
enum uint GL_POINT = 0x1B00;
enum uint GL_LINE = 0x1B01;
enum uint GL_FILL = 0x1B02;
enum uint GL_KEEP = 0x1E00;
enum uint GL_REPLACE = 0x1E01;
enum uint GL_INCR = 0x1E02;
enum uint GL_DECR = 0x1E03;
enum uint GL_VENDOR = 0x1F00;
enum uint GL_RENDERER = 0x1F01;
enum uint GL_VERSION = 0x1F02;
enum uint GL_EXTENSIONS = 0x1F03;
enum uint GL_NEAREST = 0x2600;
enum uint GL_LINEAR = 0x2601;
enum uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum uint GL_TEXTURE_MAG_FILTER = 0x2800;
enum uint GL_TEXTURE_MIN_FILTER = 0x2801;
enum uint GL_TEXTURE_WRAP_S = 0x2802;
enum uint GL_TEXTURE_WRAP_T = 0x2803;
enum uint GL_PROXY_TEXTURE_1D = 0x8063;
enum uint GL_PROXY_TEXTURE_2D = 0x8064;
enum uint GL_REPEAT = 0x2901;
enum uint GL_R3_G3_B2 = 0x2A10;
enum uint GL_RGB4 = 0x804F;
enum uint GL_RGB5 = 0x8050;
enum uint GL_RGB8 = 0x8051;
enum uint GL_RGB10 = 0x8052;
enum uint GL_RGB12 = 0x8053;
enum uint GL_RGB16 = 0x8054;
enum uint GL_RGBA2 = 0x8055;
enum uint GL_RGBA4 = 0x8056;
enum uint GL_RGB5_A1 = 0x8057;
enum uint GL_RGBA8 = 0x8058;
enum uint GL_RGB10_A2 = 0x8059;
enum uint GL_RGBA12 = 0x805A;
enum uint GL_RGBA16 = 0x805B;
enum uint GL_CURRENT_BIT = 0x00000001;
enum uint GL_POINT_BIT = 0x00000002;
enum uint GL_LINE_BIT = 0x00000004;
enum uint GL_POLYGON_BIT = 0x00000008;
enum uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
enum uint GL_PIXEL_MODE_BIT = 0x00000020;
enum uint GL_LIGHTING_BIT = 0x00000040;
enum uint GL_FOG_BIT = 0x00000080;
enum uint GL_ACCUM_BUFFER_BIT = 0x00000200;
enum uint GL_VIEWPORT_BIT = 0x00000800;
enum uint GL_TRANSFORM_BIT = 0x00001000;
enum uint GL_ENABLE_BIT = 0x00002000;
enum uint GL_HINT_BIT = 0x00008000;
enum uint GL_EVAL_BIT = 0x00010000;
enum uint GL_LIST_BIT = 0x00020000;
enum uint GL_TEXTURE_BIT = 0x00040000;
enum uint GL_SCISSOR_BIT = 0x00080000;
enum uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
enum uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
enum uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_QUAD_STRIP = 0x0008;
enum uint GL_POLYGON = 0x0009;
enum uint GL_ACCUM = 0x0100;
enum uint GL_LOAD = 0x0101;
enum uint GL_RETURN = 0x0102;
enum uint GL_MULT = 0x0103;
enum uint GL_ADD = 0x0104;
enum uint GL_AUX0 = 0x0409;
enum uint GL_AUX1 = 0x040A;
enum uint GL_AUX2 = 0x040B;
enum uint GL_AUX3 = 0x040C;
enum uint GL_2D = 0x0600;
enum uint GL_3D = 0x0601;
enum uint GL_3D_COLOR = 0x0602;
enum uint GL_3D_COLOR_TEXTURE = 0x0603;
enum uint GL_4D_COLOR_TEXTURE = 0x0604;
enum uint GL_PASS_THROUGH_TOKEN = 0x0700;
enum uint GL_POINT_TOKEN = 0x0701;
enum uint GL_LINE_TOKEN = 0x0702;
enum uint GL_POLYGON_TOKEN = 0x0703;
enum uint GL_BITMAP_TOKEN = 0x0704;
enum uint GL_DRAW_PIXEL_TOKEN = 0x0705;
enum uint GL_COPY_PIXEL_TOKEN = 0x0706;
enum uint GL_LINE_RESET_TOKEN = 0x0707;
enum uint GL_EXP = 0x0800;
enum uint GL_EXP2 = 0x0801;
enum uint GL_COEFF = 0x0A00;
enum uint GL_ORDER = 0x0A01;
enum uint GL_DOMAIN = 0x0A02;
enum uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
enum uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
enum uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
enum uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
enum uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
enum uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
enum uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
enum uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
enum uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
enum uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
enum uint GL_VERTEX_ARRAY_POINTER = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
enum uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
enum uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
enum uint GL_CURRENT_COLOR = 0x0B00;
enum uint GL_CURRENT_INDEX = 0x0B01;
enum uint GL_CURRENT_NORMAL = 0x0B02;
enum uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
enum uint GL_CURRENT_RASTER_COLOR = 0x0B04;
enum uint GL_CURRENT_RASTER_INDEX = 0x0B05;
enum uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
enum uint GL_CURRENT_RASTER_POSITION = 0x0B07;
enum uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
enum uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
enum uint GL_POINT_SMOOTH = 0x0B10;
enum uint GL_LINE_STIPPLE = 0x0B24;
enum uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
enum uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
enum uint GL_LIST_MODE = 0x0B30;
enum uint GL_MAX_LIST_NESTING = 0x0B31;
enum uint GL_LIST_BASE = 0x0B32;
enum uint GL_LIST_INDEX = 0x0B33;
enum uint GL_POLYGON_STIPPLE = 0x0B42;
enum uint GL_EDGE_FLAG = 0x0B43;
enum uint GL_LIGHTING = 0x0B50;
enum uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
enum uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
enum uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
enum uint GL_SHADE_MODEL = 0x0B54;
enum uint GL_COLOR_MATERIAL_FACE = 0x0B55;
enum uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
enum uint GL_COLOR_MATERIAL = 0x0B57;
enum uint GL_FOG = 0x0B60;
enum uint GL_FOG_INDEX = 0x0B61;
enum uint GL_FOG_DENSITY = 0x0B62;
enum uint GL_FOG_START = 0x0B63;
enum uint GL_FOG_END = 0x0B64;
enum uint GL_FOG_MODE = 0x0B65;
enum uint GL_FOG_COLOR = 0x0B66;
enum uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
enum uint GL_MATRIX_MODE = 0x0BA0;
enum uint GL_NORMALIZE = 0x0BA1;
enum uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
enum uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
enum uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
enum uint GL_MODELVIEW_MATRIX = 0x0BA6;
enum uint GL_PROJECTION_MATRIX = 0x0BA7;
enum uint GL_TEXTURE_MATRIX = 0x0BA8;
enum uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
enum uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
enum uint GL_ALPHA_TEST = 0x0BC0;
enum uint GL_ALPHA_TEST_FUNC = 0x0BC1;
enum uint GL_ALPHA_TEST_REF = 0x0BC2;
enum uint GL_INDEX_LOGIC_OP = 0x0BF1;
enum uint GL_LOGIC_OP = 0x0BF1;
enum uint GL_AUX_BUFFERS = 0x0C00;
enum uint GL_INDEX_CLEAR_VALUE = 0x0C20;
enum uint GL_INDEX_WRITEMASK = 0x0C21;
enum uint GL_INDEX_MODE = 0x0C30;
enum uint GL_RGBA_MODE = 0x0C31;
enum uint GL_RENDER_MODE = 0x0C40;
enum uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
enum uint GL_POINT_SMOOTH_HINT = 0x0C51;
enum uint GL_FOG_HINT = 0x0C54;
enum uint GL_TEXTURE_GEN_S = 0x0C60;
enum uint GL_TEXTURE_GEN_T = 0x0C61;
enum uint GL_TEXTURE_GEN_R = 0x0C62;
enum uint GL_TEXTURE_GEN_Q = 0x0C63;
enum uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
enum uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
enum uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
enum uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
enum uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
enum uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
enum uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
enum uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
enum uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
enum uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
enum uint GL_MAP_COLOR = 0x0D10;
enum uint GL_MAP_STENCIL = 0x0D11;
enum uint GL_INDEX_SHIFT = 0x0D12;
enum uint GL_INDEX_OFFSET = 0x0D13;
enum uint GL_RED_SCALE = 0x0D14;
enum uint GL_RED_BIAS = 0x0D15;
enum uint GL_ZOOM_X = 0x0D16;
enum uint GL_ZOOM_Y = 0x0D17;
enum uint GL_GREEN_SCALE = 0x0D18;
enum uint GL_GREEN_BIAS = 0x0D19;
enum uint GL_BLUE_SCALE = 0x0D1A;
enum uint GL_BLUE_BIAS = 0x0D1B;
enum uint GL_ALPHA_SCALE = 0x0D1C;
enum uint GL_ALPHA_BIAS = 0x0D1D;
enum uint GL_DEPTH_SCALE = 0x0D1E;
enum uint GL_DEPTH_BIAS = 0x0D1F;
enum uint GL_MAX_EVAL_ORDER = 0x0D30;
enum uint GL_MAX_LIGHTS = 0x0D31;
enum uint GL_MAX_CLIP_PLANES = 0x0D32;
enum uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
enum uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
enum uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
enum uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
enum uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
enum uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
enum uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
enum uint GL_INDEX_BITS = 0x0D51;
enum uint GL_RED_BITS = 0x0D52;
enum uint GL_GREEN_BITS = 0x0D53;
enum uint GL_BLUE_BITS = 0x0D54;
enum uint GL_ALPHA_BITS = 0x0D55;
enum uint GL_DEPTH_BITS = 0x0D56;
enum uint GL_STENCIL_BITS = 0x0D57;
enum uint GL_ACCUM_RED_BITS = 0x0D58;
enum uint GL_ACCUM_GREEN_BITS = 0x0D59;
enum uint GL_ACCUM_BLUE_BITS = 0x0D5A;
enum uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
enum uint GL_NAME_STACK_DEPTH = 0x0D70;
enum uint GL_AUTO_NORMAL = 0x0D80;
enum uint GL_MAP1_COLOR_4 = 0x0D90;
enum uint GL_MAP1_INDEX = 0x0D91;
enum uint GL_MAP1_NORMAL = 0x0D92;
enum uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
enum uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
enum uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
enum uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
enum uint GL_MAP1_VERTEX_3 = 0x0D97;
enum uint GL_MAP1_VERTEX_4 = 0x0D98;
enum uint GL_MAP2_COLOR_4 = 0x0DB0;
enum uint GL_MAP2_INDEX = 0x0DB1;
enum uint GL_MAP2_NORMAL = 0x0DB2;
enum uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
enum uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
enum uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
enum uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
enum uint GL_MAP2_VERTEX_3 = 0x0DB7;
enum uint GL_MAP2_VERTEX_4 = 0x0DB8;
enum uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
enum uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
enum uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
enum uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
enum uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
enum uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
enum uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
enum uint GL_VERTEX_ARRAY = 0x8074;
enum uint GL_NORMAL_ARRAY = 0x8075;
enum uint GL_COLOR_ARRAY = 0x8076;
enum uint GL_INDEX_ARRAY = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
enum uint GL_NORMAL_ARRAY_TYPE = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
enum uint GL_COLOR_ARRAY_SIZE = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE = 0x8083;
enum uint GL_INDEX_ARRAY_TYPE = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE = 0x8086;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
enum uint GL_TEXTURE_COMPONENTS = 0x1003;
enum uint GL_TEXTURE_BORDER = 0x1005;
enum uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
enum uint GL_TEXTURE_PRIORITY = 0x8066;
enum uint GL_TEXTURE_RESIDENT = 0x8067;
enum uint GL_AMBIENT = 0x1200;
enum uint GL_DIFFUSE = 0x1201;
enum uint GL_SPECULAR = 0x1202;
enum uint GL_POSITION = 0x1203;
enum uint GL_SPOT_DIRECTION = 0x1204;
enum uint GL_SPOT_EXPONENT = 0x1205;
enum uint GL_SPOT_CUTOFF = 0x1206;
enum uint GL_CONSTANT_ATTENUATION = 0x1207;
enum uint GL_LINEAR_ATTENUATION = 0x1208;
enum uint GL_QUADRATIC_ATTENUATION = 0x1209;
enum uint GL_COMPILE = 0x1300;
enum uint GL_COMPILE_AND_EXECUTE = 0x1301;
enum uint GL_2_BYTES = 0x1407;
enum uint GL_3_BYTES = 0x1408;
enum uint GL_4_BYTES = 0x1409;
enum uint GL_EMISSION = 0x1600;
enum uint GL_SHININESS = 0x1601;
enum uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
enum uint GL_COLOR_INDEXES = 0x1603;
enum uint GL_MODELVIEW = 0x1700;
enum uint GL_PROJECTION = 0x1701;
enum uint GL_COLOR_INDEX = 0x1900;
enum uint GL_LUMINANCE = 0x1909;
enum uint GL_LUMINANCE_ALPHA = 0x190A;
enum uint GL_BITMAP = 0x1A00;
enum uint GL_RENDER = 0x1C00;
enum uint GL_FEEDBACK = 0x1C01;
enum uint GL_SELECT = 0x1C02;
enum uint GL_FLAT = 0x1D00;
enum uint GL_SMOOTH = 0x1D01;
enum uint GL_S = 0x2000;
enum uint GL_T = 0x2001;
enum uint GL_R = 0x2002;
enum uint GL_Q = 0x2003;
enum uint GL_MODULATE = 0x2100;
enum uint GL_DECAL = 0x2101;
enum uint GL_TEXTURE_ENV_MODE = 0x2200;
enum uint GL_TEXTURE_ENV_COLOR = 0x2201;
enum uint GL_TEXTURE_ENV = 0x2300;
enum uint GL_EYE_LINEAR = 0x2400;
enum uint GL_OBJECT_LINEAR = 0x2401;
enum uint GL_SPHERE_MAP = 0x2402;
enum uint GL_TEXTURE_GEN_MODE = 0x2500;
enum uint GL_OBJECT_PLANE = 0x2501;
enum uint GL_EYE_PLANE = 0x2502;
enum uint GL_CLAMP = 0x2900;
enum uint GL_ALPHA4 = 0x803B;
enum uint GL_ALPHA8 = 0x803C;
enum uint GL_ALPHA12 = 0x803D;
enum uint GL_ALPHA16 = 0x803E;
enum uint GL_LUMINANCE4 = 0x803F;
enum uint GL_LUMINANCE8 = 0x8040;
enum uint GL_LUMINANCE12 = 0x8041;
enum uint GL_LUMINANCE16 = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4 = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2 = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8 = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4 = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12 = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16 = 0x8048;
enum uint GL_INTENSITY = 0x8049;
enum uint GL_INTENSITY4 = 0x804A;
enum uint GL_INTENSITY8 = 0x804B;
enum uint GL_INTENSITY12 = 0x804C;
enum uint GL_INTENSITY16 = 0x804D;
enum uint GL_V2F = 0x2A20;
enum uint GL_V3F = 0x2A21;
enum uint GL_C4UB_V2F = 0x2A22;
enum uint GL_C4UB_V3F = 0x2A23;
enum uint GL_C3F_V3F = 0x2A24;
enum uint GL_N3F_V3F = 0x2A25;
enum uint GL_C4F_N3F_V3F = 0x2A26;
enum uint GL_T2F_V3F = 0x2A27;
enum uint GL_T4F_V4F = 0x2A28;
enum uint GL_T2F_C4UB_V3F = 0x2A29;
enum uint GL_T2F_C3F_V3F = 0x2A2A;
enum uint GL_T2F_N3F_V3F = 0x2A2B;
enum uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
enum uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
enum uint GL_CLIP_PLANE0 = 0x3000;
enum uint GL_CLIP_PLANE1 = 0x3001;
enum uint GL_CLIP_PLANE2 = 0x3002;
enum uint GL_CLIP_PLANE3 = 0x3003;
enum uint GL_CLIP_PLANE4 = 0x3004;
enum uint GL_CLIP_PLANE5 = 0x3005;
enum uint GL_LIGHT0 = 0x4000;
enum uint GL_LIGHT1 = 0x4001;
enum uint GL_LIGHT2 = 0x4002;
enum uint GL_LIGHT3 = 0x4003;
enum uint GL_LIGHT4 = 0x4004;
enum uint GL_LIGHT5 = 0x4005;
enum uint GL_LIGHT6 = 0x4006;
enum uint GL_LIGHT7 = 0x4007;
enum uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
enum uint GL_TEXTURE_BINDING_3D = 0x806A;
enum uint GL_PACK_SKIP_IMAGES = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum uint GL_TEXTURE_3D = 0x806F;
enum uint GL_PROXY_TEXTURE_3D = 0x8070;
enum uint GL_TEXTURE_DEPTH = 0x8071;
enum uint GL_TEXTURE_WRAP_R = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
enum uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
enum uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
enum uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
enum uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum uint GL_BGR = 0x80E0;
enum uint GL_BGRA = 0x80E1;
enum uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum uint GL_CLAMP_TO_EDGE = 0x812F;
enum uint GL_TEXTURE_MIN_LOD = 0x813A;
enum uint GL_TEXTURE_MAX_LOD = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL = 0x813D;
enum uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
enum uint GL_RESCALE_NORMAL = 0x803A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
enum uint GL_SINGLE_COLOR = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
enum uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
enum uint GL_TEXTURE0 = 0x84C0;
enum uint GL_TEXTURE1 = 0x84C1;
enum uint GL_TEXTURE2 = 0x84C2;
enum uint GL_TEXTURE3 = 0x84C3;
enum uint GL_TEXTURE4 = 0x84C4;
enum uint GL_TEXTURE5 = 0x84C5;
enum uint GL_TEXTURE6 = 0x84C6;
enum uint GL_TEXTURE7 = 0x84C7;
enum uint GL_TEXTURE8 = 0x84C8;
enum uint GL_TEXTURE9 = 0x84C9;
enum uint GL_TEXTURE10 = 0x84CA;
enum uint GL_TEXTURE11 = 0x84CB;
enum uint GL_TEXTURE12 = 0x84CC;
enum uint GL_TEXTURE13 = 0x84CD;
enum uint GL_TEXTURE14 = 0x84CE;
enum uint GL_TEXTURE15 = 0x84CF;
enum uint GL_TEXTURE16 = 0x84D0;
enum uint GL_TEXTURE17 = 0x84D1;
enum uint GL_TEXTURE18 = 0x84D2;
enum uint GL_TEXTURE19 = 0x84D3;
enum uint GL_TEXTURE20 = 0x84D4;
enum uint GL_TEXTURE21 = 0x84D5;
enum uint GL_TEXTURE22 = 0x84D6;
enum uint GL_TEXTURE23 = 0x84D7;
enum uint GL_TEXTURE24 = 0x84D8;
enum uint GL_TEXTURE25 = 0x84D9;
enum uint GL_TEXTURE26 = 0x84DA;
enum uint GL_TEXTURE27 = 0x84DB;
enum uint GL_TEXTURE28 = 0x84DC;
enum uint GL_TEXTURE29 = 0x84DD;
enum uint GL_TEXTURE30 = 0x84DE;
enum uint GL_TEXTURE31 = 0x84DF;
enum uint GL_ACTIVE_TEXTURE = 0x84E0;
enum uint GL_MULTISAMPLE = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
enum uint GL_SAMPLE_COVERAGE = 0x80A0;
enum uint GL_SAMPLE_BUFFERS = 0x80A8;
enum uint GL_SAMPLES = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum uint GL_TEXTURE_CUBE_MAP = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum uint GL_COMPRESSED_RGB = 0x84ED;
enum uint GL_COMPRESSED_RGBA = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum uint GL_CLAMP_TO_BORDER = 0x812D;
enum uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS = 0x84E2;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
enum uint GL_MULTISAMPLE_BIT = 0x20000000;
enum uint GL_NORMAL_MAP = 0x8511;
enum uint GL_REFLECTION_MAP = 0x8512;
enum uint GL_COMPRESSED_ALPHA = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY = 0x84EC;
enum uint GL_COMBINE = 0x8570;
enum uint GL_COMBINE_RGB = 0x8571;
enum uint GL_COMBINE_ALPHA = 0x8572;
enum uint GL_SOURCE0_RGB = 0x8580;
enum uint GL_SOURCE1_RGB = 0x8581;
enum uint GL_SOURCE2_RGB = 0x8582;
enum uint GL_SOURCE0_ALPHA = 0x8588;
enum uint GL_SOURCE1_ALPHA = 0x8589;
enum uint GL_SOURCE2_ALPHA = 0x858A;
enum uint GL_OPERAND0_RGB = 0x8590;
enum uint GL_OPERAND1_RGB = 0x8591;
enum uint GL_OPERAND2_RGB = 0x8592;
enum uint GL_OPERAND0_ALPHA = 0x8598;
enum uint GL_OPERAND1_ALPHA = 0x8599;
enum uint GL_OPERAND2_ALPHA = 0x859A;
enum uint GL_RGB_SCALE = 0x8573;
enum uint GL_ADD_SIGNED = 0x8574;
enum uint GL_INTERPOLATE = 0x8575;
enum uint GL_SUBTRACT = 0x84E7;
enum uint GL_CONSTANT = 0x8576;
enum uint GL_PRIMARY_COLOR = 0x8577;
enum uint GL_PREVIOUS = 0x8578;
enum uint GL_DOT3_RGB = 0x86AE;
enum uint GL_DOT3_RGBA = 0x86AF;
enum uint GL_BLEND_DST_RGB = 0x80C8;
enum uint GL_BLEND_SRC_RGB = 0x80C9;
enum uint GL_BLEND_DST_ALPHA = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA = 0x80CB;
enum uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
enum uint GL_DEPTH_COMPONENT16 = 0x81A5;
enum uint GL_DEPTH_COMPONENT24 = 0x81A6;
enum uint GL_DEPTH_COMPONENT32 = 0x81A7;
enum uint GL_MIRRORED_REPEAT = 0x8370;
enum uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum uint GL_TEXTURE_LOD_BIAS = 0x8501;
enum uint GL_INCR_WRAP = 0x8507;
enum uint GL_DECR_WRAP = 0x8508;
enum uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum uint GL_TEXTURE_COMPARE_MODE = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
enum uint GL_POINT_SIZE_MIN = 0x8126;
enum uint GL_POINT_SIZE_MAX = 0x8127;
enum uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
enum uint GL_GENERATE_MIPMAP = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT = 0x8192;
enum uint GL_FOG_COORDINATE_SOURCE = 0x8450;
enum uint GL_FOG_COORDINATE = 0x8451;
enum uint GL_FRAGMENT_DEPTH = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY = 0x8457;
enum uint GL_COLOR_SUM = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY = 0x845E;
enum uint GL_TEXTURE_FILTER_CONTROL = 0x8500;
enum uint GL_DEPTH_TEXTURE_MODE = 0x884B;
enum uint GL_COMPARE_R_TO_TEXTURE = 0x884E;
enum uint GL_FUNC_ADD = 0x8006;
enum uint GL_FUNC_SUBTRACT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
enum uint GL_MIN = 0x8007;
enum uint GL_MAX = 0x8008;
enum uint GL_CONSTANT_COLOR = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum uint GL_CONSTANT_ALPHA = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
enum uint GL_BUFFER_SIZE = 0x8764;
enum uint GL_BUFFER_USAGE = 0x8765;
enum uint GL_QUERY_COUNTER_BITS = 0x8864;
enum uint GL_CURRENT_QUERY = 0x8865;
enum uint GL_QUERY_RESULT = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum uint GL_ARRAY_BUFFER = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum uint GL_READ_ONLY = 0x88B8;
enum uint GL_WRITE_ONLY = 0x88B9;
enum uint GL_READ_WRITE = 0x88BA;
enum uint GL_BUFFER_ACCESS = 0x88BB;
enum uint GL_BUFFER_MAPPED = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER = 0x88BD;
enum uint GL_STREAM_DRAW = 0x88E0;
enum uint GL_STREAM_READ = 0x88E1;
enum uint GL_STREAM_COPY = 0x88E2;
enum uint GL_STATIC_DRAW = 0x88E4;
enum uint GL_STATIC_READ = 0x88E5;
enum uint GL_STATIC_COPY = 0x88E6;
enum uint GL_DYNAMIC_DRAW = 0x88E8;
enum uint GL_DYNAMIC_READ = 0x88E9;
enum uint GL_DYNAMIC_COPY = 0x88EA;
enum uint GL_SAMPLES_PASSED = 0x8914;
enum uint GL_SRC1_ALPHA = 0x8589;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
enum uint GL_FOG_COORD_SRC = 0x8450;
enum uint GL_FOG_COORD = 0x8451;
enum uint GL_CURRENT_FOG_COORD = 0x8453;
enum uint GL_FOG_COORD_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORD_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORD_ARRAY = 0x8457;
enum uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_SRC0_RGB = 0x8580;
enum uint GL_SRC1_RGB = 0x8581;
enum uint GL_SRC2_RGB = 0x8582;
enum uint GL_SRC0_ALPHA = 0x8588;
enum uint GL_SRC2_ALPHA = 0x858A;
enum uint GL_BLEND_EQUATION_RGB = 0x8009;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum uint GL_STENCIL_BACK_FUNC = 0x8800;
enum uint GL_STENCIL_BACK_FAIL = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum uint GL_MAX_DRAW_BUFFERS = 0x8824;
enum uint GL_DRAW_BUFFER0 = 0x8825;
enum uint GL_DRAW_BUFFER1 = 0x8826;
enum uint GL_DRAW_BUFFER2 = 0x8827;
enum uint GL_DRAW_BUFFER3 = 0x8828;
enum uint GL_DRAW_BUFFER4 = 0x8829;
enum uint GL_DRAW_BUFFER5 = 0x882A;
enum uint GL_DRAW_BUFFER6 = 0x882B;
enum uint GL_DRAW_BUFFER7 = 0x882C;
enum uint GL_DRAW_BUFFER8 = 0x882D;
enum uint GL_DRAW_BUFFER9 = 0x882E;
enum uint GL_DRAW_BUFFER10 = 0x882F;
enum uint GL_DRAW_BUFFER11 = 0x8830;
enum uint GL_DRAW_BUFFER12 = 0x8831;
enum uint GL_DRAW_BUFFER13 = 0x8832;
enum uint GL_DRAW_BUFFER14 = 0x8833;
enum uint GL_DRAW_BUFFER15 = 0x8834;
enum uint GL_BLEND_EQUATION_ALPHA = 0x883D;
enum uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum uint GL_FRAGMENT_SHADER = 0x8B30;
enum uint GL_VERTEX_SHADER = 0x8B31;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum uint GL_SHADER_TYPE = 0x8B4F;
enum uint GL_FLOAT_VEC2 = 0x8B50;
enum uint GL_FLOAT_VEC3 = 0x8B51;
enum uint GL_FLOAT_VEC4 = 0x8B52;
enum uint GL_INT_VEC2 = 0x8B53;
enum uint GL_INT_VEC3 = 0x8B54;
enum uint GL_INT_VEC4 = 0x8B55;
enum uint GL_BOOL = 0x8B56;
enum uint GL_BOOL_VEC2 = 0x8B57;
enum uint GL_BOOL_VEC3 = 0x8B58;
enum uint GL_BOOL_VEC4 = 0x8B59;
enum uint GL_FLOAT_MAT2 = 0x8B5A;
enum uint GL_FLOAT_MAT3 = 0x8B5B;
enum uint GL_FLOAT_MAT4 = 0x8B5C;
enum uint GL_SAMPLER_1D = 0x8B5D;
enum uint GL_SAMPLER_2D = 0x8B5E;
enum uint GL_SAMPLER_3D = 0x8B5F;
enum uint GL_SAMPLER_CUBE = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW = 0x8B62;
enum uint GL_DELETE_STATUS = 0x8B80;
enum uint GL_COMPILE_STATUS = 0x8B81;
enum uint GL_LINK_STATUS = 0x8B82;
enum uint GL_VALIDATE_STATUS = 0x8B83;
enum uint GL_INFO_LOG_LENGTH = 0x8B84;
enum uint GL_ATTACHED_SHADERS = 0x8B85;
enum uint GL_ACTIVE_UNIFORMS = 0x8B86;
enum uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum uint GL_CURRENT_PROGRAM = 0x8B8D;
enum uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
enum uint GL_LOWER_LEFT = 0x8CA1;
enum uint GL_UPPER_LEFT = 0x8CA2;
enum uint GL_STENCIL_BACK_REF = 0x8CA3;
enum uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
enum uint GL_POINT_SPRITE = 0x8861;
enum uint GL_COORD_REPLACE = 0x8862;
enum uint GL_MAX_TEXTURE_COORDS = 0x8871;
enum uint GL_PIXEL_PACK_BUFFER = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum uint GL_FLOAT_MAT2x3 = 0x8B65;
enum uint GL_FLOAT_MAT2x4 = 0x8B66;
enum uint GL_FLOAT_MAT3x2 = 0x8B67;
enum uint GL_FLOAT_MAT3x4 = 0x8B68;
enum uint GL_FLOAT_MAT4x2 = 0x8B69;
enum uint GL_FLOAT_MAT4x3 = 0x8B6A;
enum uint GL_SRGB = 0x8C40;
enum uint GL_SRGB8 = 0x8C41;
enum uint GL_SRGB_ALPHA = 0x8C42;
enum uint GL_SRGB8_ALPHA8 = 0x8C43;
enum uint GL_COMPRESSED_SRGB = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
enum uint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
enum uint GL_SLUMINANCE_ALPHA = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
enum uint GL_SLUMINANCE = 0x8C46;
enum uint GL_SLUMINANCE8 = 0x8C47;
enum uint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
enum uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum uint GL_CLIP_DISTANCE0 = 0x3000;
enum uint GL_CLIP_DISTANCE1 = 0x3001;
enum uint GL_CLIP_DISTANCE2 = 0x3002;
enum uint GL_CLIP_DISTANCE3 = 0x3003;
enum uint GL_CLIP_DISTANCE4 = 0x3004;
enum uint GL_CLIP_DISTANCE5 = 0x3005;
enum uint GL_CLIP_DISTANCE6 = 0x3006;
enum uint GL_CLIP_DISTANCE7 = 0x3007;
enum uint GL_MAX_CLIP_DISTANCES = 0x0D32;
enum uint GL_MAJOR_VERSION = 0x821B;
enum uint GL_MINOR_VERSION = 0x821C;
enum uint GL_NUM_EXTENSIONS = 0x821D;
enum uint GL_CONTEXT_FLAGS = 0x821E;
enum uint GL_COMPRESSED_RED = 0x8225;
enum uint GL_COMPRESSED_RG = 0x8226;
enum uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
enum uint GL_RGBA32F = 0x8814;
enum uint GL_RGB32F = 0x8815;
enum uint GL_RGBA16F = 0x881A;
enum uint GL_RGB16F = 0x881B;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum uint GL_CLAMP_READ_COLOR = 0x891C;
enum uint GL_FIXED_ONLY = 0x891D;
enum uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum uint GL_TEXTURE_1D_ARRAY = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum uint GL_R11F_G11F_B10F = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum uint GL_RGB9_E5 = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum uint GL_PRIMITIVES_GENERATED = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum uint GL_RASTERIZER_DISCARD = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum uint GL_RGBA32UI = 0x8D70;
enum uint GL_RGB32UI = 0x8D71;
enum uint GL_RGBA16UI = 0x8D76;
enum uint GL_RGB16UI = 0x8D77;
enum uint GL_RGBA8UI = 0x8D7C;
enum uint GL_RGB8UI = 0x8D7D;
enum uint GL_RGBA32I = 0x8D82;
enum uint GL_RGB32I = 0x8D83;
enum uint GL_RGBA16I = 0x8D88;
enum uint GL_RGB16I = 0x8D89;
enum uint GL_RGBA8I = 0x8D8E;
enum uint GL_RGB8I = 0x8D8F;
enum uint GL_RED_INTEGER = 0x8D94;
enum uint GL_GREEN_INTEGER = 0x8D95;
enum uint GL_BLUE_INTEGER = 0x8D96;
enum uint GL_RGB_INTEGER = 0x8D98;
enum uint GL_RGBA_INTEGER = 0x8D99;
enum uint GL_BGR_INTEGER = 0x8D9A;
enum uint GL_BGRA_INTEGER = 0x8D9B;
enum uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum uint GL_INT_SAMPLER_1D = 0x8DC9;
enum uint GL_INT_SAMPLER_2D = 0x8DCA;
enum uint GL_INT_SAMPLER_3D = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE = 0x8DCC;
enum uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum uint GL_QUERY_WAIT = 0x8E13;
enum uint GL_QUERY_NO_WAIT = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
enum uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum uint GL_BUFFER_MAP_LENGTH = 0x9120;
enum uint GL_BUFFER_MAP_OFFSET = 0x9121;
enum uint GL_DEPTH_COMPONENT32F = 0x8CAC;
enum uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum uint GL_DEPTH_STENCIL = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8 = 0x84FA;
enum uint GL_DEPTH24_STENCIL8 = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum uint GL_TEXTURE_RED_TYPE = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED = 0x8C17;
enum uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING = 0x8CA7;
enum uint GL_READ_FRAMEBUFFER = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13 = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum uint GL_COLOR_ATTACHMENT16 = 0x8CF0;
enum uint GL_COLOR_ATTACHMENT17 = 0x8CF1;
enum uint GL_COLOR_ATTACHMENT18 = 0x8CF2;
enum uint GL_COLOR_ATTACHMENT19 = 0x8CF3;
enum uint GL_COLOR_ATTACHMENT20 = 0x8CF4;
enum uint GL_COLOR_ATTACHMENT21 = 0x8CF5;
enum uint GL_COLOR_ATTACHMENT22 = 0x8CF6;
enum uint GL_COLOR_ATTACHMENT23 = 0x8CF7;
enum uint GL_COLOR_ATTACHMENT24 = 0x8CF8;
enum uint GL_COLOR_ATTACHMENT25 = 0x8CF9;
enum uint GL_COLOR_ATTACHMENT26 = 0x8CFA;
enum uint GL_COLOR_ATTACHMENT27 = 0x8CFB;
enum uint GL_COLOR_ATTACHMENT28 = 0x8CFC;
enum uint GL_COLOR_ATTACHMENT29 = 0x8CFD;
enum uint GL_COLOR_ATTACHMENT30 = 0x8CFE;
enum uint GL_COLOR_ATTACHMENT31 = 0x8CFF;
enum uint GL_DEPTH_ATTACHMENT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT = 0x8D20;
enum uint GL_FRAMEBUFFER = 0x8D40;
enum uint GL_RENDERBUFFER = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum uint GL_STENCIL_INDEX1 = 0x8D46;
enum uint GL_STENCIL_INDEX4 = 0x8D47;
enum uint GL_STENCIL_INDEX8 = 0x8D48;
enum uint GL_STENCIL_INDEX16 = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum uint GL_MAX_SAMPLES = 0x8D57;
enum uint GL_INDEX = 0x8222;
enum uint GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
enum uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
enum uint GL_HALF_FLOAT = 0x140B;
enum uint GL_MAP_READ_BIT = 0x0001;
enum uint GL_MAP_WRITE_BIT = 0x0002;
enum uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
enum uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
enum uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
enum uint GL_RG = 0x8227;
enum uint GL_RG_INTEGER = 0x8228;
enum uint GL_R8 = 0x8229;
enum uint GL_R16 = 0x822A;
enum uint GL_RG8 = 0x822B;
enum uint GL_RG16 = 0x822C;
enum uint GL_R16F = 0x822D;
enum uint GL_R32F = 0x822E;
enum uint GL_RG16F = 0x822F;
enum uint GL_RG32F = 0x8230;
enum uint GL_R8I = 0x8231;
enum uint GL_R8UI = 0x8232;
enum uint GL_R16I = 0x8233;
enum uint GL_R16UI = 0x8234;
enum uint GL_R32I = 0x8235;
enum uint GL_R32UI = 0x8236;
enum uint GL_RG8I = 0x8237;
enum uint GL_RG8UI = 0x8238;
enum uint GL_RG16I = 0x8239;
enum uint GL_RG16UI = 0x823A;
enum uint GL_RG32I = 0x823B;
enum uint GL_RG32UI = 0x823C;
enum uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
enum uint GL_CLAMP_VERTEX_COLOR = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR = 0x891B;
enum uint GL_ALPHA_INTEGER = 0x8D97;
enum uint GL_SAMPLER_2D_RECT = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
enum uint GL_SAMPLER_BUFFER = 0x8DC2;
enum uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
enum uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
enum uint GL_TEXTURE_BUFFER = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
enum uint GL_TEXTURE_RECTANGLE = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
enum uint GL_R8_SNORM = 0x8F94;
enum uint GL_RG8_SNORM = 0x8F95;
enum uint GL_RGB8_SNORM = 0x8F96;
enum uint GL_RGBA8_SNORM = 0x8F97;
enum uint GL_R16_SNORM = 0x8F98;
enum uint GL_RG16_SNORM = 0x8F99;
enum uint GL_RGB16_SNORM = 0x8F9A;
enum uint GL_RGBA16_SNORM = 0x8F9B;
enum uint GL_SIGNED_NORMALIZED = 0x8F9C;
enum uint GL_PRIMITIVE_RESTART = 0x8F9D;
enum uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
enum uint GL_COPY_READ_BUFFER = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER = 0x8F37;
enum uint GL_UNIFORM_BUFFER = 0x8A11;
enum uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum uint GL_UNIFORM_BUFFER_START = 0x8A29;
enum uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
enum uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
enum uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum uint GL_UNIFORM_TYPE = 0x8A37;
enum uint GL_UNIFORM_SIZE = 0x8A38;
enum uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum uint GL_UNIFORM_OFFSET = 0x8A3B;
enum uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
enum uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
enum uint GL_LINES_ADJACENCY = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
enum uint GL_GEOMETRY_SHADER = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
enum uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
enum uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
enum uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
enum uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
enum uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum uint GL_CONTEXT_PROFILE_MASK = 0x9126;
enum uint GL_DEPTH_CLAMP = 0x864F;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
enum uint GL_PROVOKING_VERTEX = 0x8E4F;
enum uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
enum uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum uint GL_OBJECT_TYPE = 0x9112;
enum uint GL_SYNC_CONDITION = 0x9113;
enum uint GL_SYNC_STATUS = 0x9114;
enum uint GL_SYNC_FLAGS = 0x9115;
enum uint GL_SYNC_FENCE = 0x9116;
enum uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum uint GL_UNSIGNALED = 0x9118;
enum uint GL_SIGNALED = 0x9119;
enum uint GL_ALREADY_SIGNALED = 0x911A;
enum uint GL_TIMEOUT_EXPIRED = 0x911B;
enum uint GL_CONDITION_SATISFIED = 0x911C;
enum uint GL_WAIT_FAILED = 0x911D;
enum uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum uint GL_SAMPLE_POSITION = 0x8E50;
enum uint GL_SAMPLE_MASK = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE = 0x8E52;
enum uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
enum uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
enum uint GL_TEXTURE_SAMPLES = 0x9106;
enum uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
enum uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum uint GL_MAX_INTEGER_SAMPLES = 0x9110;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
enum uint GL_SRC1_COLOR = 0x88F9;
enum uint GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
enum uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
enum uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
enum uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
enum uint GL_SAMPLER_BINDING = 0x8919;
enum uint GL_RGB10_A2UI = 0x906F;
enum uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
enum uint GL_TIME_ELAPSED = 0x88BF;
enum uint GL_TIMESTAMP = 0x8E28;
enum uint GL_INT_2_10_10_10_REV = 0x8D9F;
enum uint GL_SAMPLE_SHADING = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
enum uint GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
enum uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
enum uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
enum uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
enum uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
enum uint GL_MAX_VERTEX_STREAMS = 0x8E71;
enum uint GL_DOUBLE_VEC2 = 0x8FFC;
enum uint GL_DOUBLE_VEC3 = 0x8FFD;
enum uint GL_DOUBLE_VEC4 = 0x8FFE;
enum uint GL_DOUBLE_MAT2 = 0x8F46;
enum uint GL_DOUBLE_MAT3 = 0x8F47;
enum uint GL_DOUBLE_MAT4 = 0x8F48;
enum uint GL_DOUBLE_MAT2x3 = 0x8F49;
enum uint GL_DOUBLE_MAT2x4 = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2 = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4 = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2 = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3 = 0x8F4E;
enum uint GL_ACTIVE_SUBROUTINES = 0x8DE5;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
enum uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
enum uint GL_MAX_SUBROUTINES = 0x8DE7;
enum uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
enum uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
enum uint GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
enum uint GL_PATCHES = 0x000E;
enum uint GL_PATCH_VERTICES = 0x8E72;
enum uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
enum uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
enum uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
enum uint GL_TESS_GEN_MODE = 0x8E76;
enum uint GL_TESS_GEN_SPACING = 0x8E77;
enum uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
enum uint GL_TESS_GEN_POINT_MODE = 0x8E79;
enum uint GL_ISOLINES = 0x8E7A;
enum uint GL_FRACTIONAL_ODD = 0x8E7B;
enum uint GL_FRACTIONAL_EVEN = 0x8E7C;
enum uint GL_MAX_PATCH_VERTICES = 0x8E7D;
enum uint GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
enum uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
enum uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
enum uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
enum uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
enum uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
enum uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
enum uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
enum uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
enum uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
enum uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
enum uint GL_TESS_EVALUATION_SHADER = 0x8E87;
enum uint GL_TESS_CONTROL_SHADER = 0x8E88;
enum uint GL_TRANSFORM_FEEDBACK = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
enum uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
enum uint GL_FIXED = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
enum uint GL_LOW_FLOAT = 0x8DF0;
enum uint GL_MEDIUM_FLOAT = 0x8DF1;
enum uint GL_HIGH_FLOAT = 0x8DF2;
enum uint GL_LOW_INT = 0x8DF3;
enum uint GL_MEDIUM_INT = 0x8DF4;
enum uint GL_HIGH_INT = 0x8DF5;
enum uint GL_SHADER_COMPILER = 0x8DFA;
enum uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
enum uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
enum uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
enum uint GL_MAX_VARYING_VECTORS = 0x8DFC;
enum uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
enum uint GL_RGB565 = 0x8D62;
enum uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
enum uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
enum uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
enum uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
enum uint GL_VERTEX_SHADER_BIT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT = 0x00000002;
enum uint GL_GEOMETRY_SHADER_BIT = 0x00000004;
enum uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
enum uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
enum uint GL_ALL_SHADER_BITS = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE = 0x8258;
enum uint GL_ACTIVE_PROGRAM = 0x8259;
enum uint GL_PROGRAM_PIPELINE_BINDING = 0x825A;
enum uint GL_MAX_VIEWPORTS = 0x825B;
enum uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
enum uint GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
enum uint GL_LAYER_PROVOKING_VERTEX = 0x825E;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
enum uint GL_UNDEFINED_VERTEX = 0x8260;
enum uint GL_COPY_READ_BUFFER_BINDING = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
enum uint GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
enum uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
enum uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
enum uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
enum uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
enum uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
enum uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
enum uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
enum uint GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
enum uint GL_NUM_SAMPLE_COUNTS = 0x9380;
enum uint GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
enum uint GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
enum uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
enum uint GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
enum uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
enum uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
enum uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
enum uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
enum uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
enum uint GL_MAX_IMAGE_UNITS = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS = 0x8F3E;
enum uint GL_IMAGE_1D = 0x904C;
enum uint GL_IMAGE_2D = 0x904D;
enum uint GL_IMAGE_3D = 0x904E;
enum uint GL_IMAGE_2D_RECT = 0x904F;
enum uint GL_IMAGE_CUBE = 0x9050;
enum uint GL_IMAGE_BUFFER = 0x9051;
enum uint GL_IMAGE_1D_ARRAY = 0x9052;
enum uint GL_IMAGE_2D_ARRAY = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
enum uint GL_INT_IMAGE_1D = 0x9057;
enum uint GL_INT_IMAGE_2D = 0x9058;
enum uint GL_INT_IMAGE_3D = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT = 0x905A;
enum uint GL_INT_IMAGE_CUBE = 0x905B;
enum uint GL_INT_IMAGE_BUFFER = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT = 0x906E;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
enum uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
enum uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
enum uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
enum uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
enum uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
enum uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
enum uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
enum uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
enum uint GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
enum uint GL_COMPRESSED_RGB8_ETC2 = 0x9274;
enum uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
enum uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
enum uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
enum uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
enum uint GL_COMPRESSED_R11_EAC = 0x9270;
enum uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
enum uint GL_COMPRESSED_RG11_EAC = 0x9272;
enum uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
enum uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
enum uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
enum uint GL_MAX_ELEMENT_INDEX = 0x8D6B;
enum uint GL_COMPUTE_SHADER = 0x91B9;
enum uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
enum uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
enum uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
enum uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
enum uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
enum uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
enum uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
enum uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
enum uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
enum uint GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
enum uint GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
enum uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
enum uint GL_COMPUTE_SHADER_BIT = 0x00000020;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
enum uint GL_DEBUG_SOURCE_API = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW = 0x9148;
enum uint GL_DEBUG_TYPE_MARKER = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
enum uint GL_BUFFER = 0x82E0;
enum uint GL_SHADER = 0x82E1;
enum uint GL_PROGRAM = 0x82E2;
enum uint GL_QUERY = 0x82E3;
enum uint GL_PROGRAM_PIPELINE = 0x82E4;
enum uint GL_SAMPLER = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH = 0x82E8;
enum uint GL_DEBUG_OUTPUT = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
enum uint GL_MAX_UNIFORM_LOCATIONS = 0x826E;
enum uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
enum uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
enum uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
enum uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
enum uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
enum uint GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
enum uint GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
enum uint GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
enum uint GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
enum uint GL_INTERNALFORMAT_SUPPORTED = 0x826F;
enum uint GL_INTERNALFORMAT_PREFERRED = 0x8270;
enum uint GL_INTERNALFORMAT_RED_SIZE = 0x8271;
enum uint GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
enum uint GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
enum uint GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
enum uint GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
enum uint GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
enum uint GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
enum uint GL_INTERNALFORMAT_RED_TYPE = 0x8278;
enum uint GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
enum uint GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
enum uint GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
enum uint GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
enum uint GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
enum uint GL_MAX_WIDTH = 0x827E;
enum uint GL_MAX_HEIGHT = 0x827F;
enum uint GL_MAX_DEPTH = 0x8280;
enum uint GL_MAX_LAYERS = 0x8281;
enum uint GL_MAX_COMBINED_DIMENSIONS = 0x8282;
enum uint GL_COLOR_COMPONENTS = 0x8283;
enum uint GL_DEPTH_COMPONENTS = 0x8284;
enum uint GL_STENCIL_COMPONENTS = 0x8285;
enum uint GL_COLOR_RENDERABLE = 0x8286;
enum uint GL_DEPTH_RENDERABLE = 0x8287;
enum uint GL_STENCIL_RENDERABLE = 0x8288;
enum uint GL_FRAMEBUFFER_RENDERABLE = 0x8289;
enum uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
enum uint GL_FRAMEBUFFER_BLEND = 0x828B;
enum uint GL_READ_PIXELS = 0x828C;
enum uint GL_READ_PIXELS_FORMAT = 0x828D;
enum uint GL_READ_PIXELS_TYPE = 0x828E;
enum uint GL_TEXTURE_IMAGE_FORMAT = 0x828F;
enum uint GL_TEXTURE_IMAGE_TYPE = 0x8290;
enum uint GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
enum uint GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
enum uint GL_MIPMAP = 0x8293;
enum uint GL_MANUAL_GENERATE_MIPMAP = 0x8294;
enum uint GL_AUTO_GENERATE_MIPMAP = 0x8295;
enum uint GL_COLOR_ENCODING = 0x8296;
enum uint GL_SRGB_READ = 0x8297;
enum uint GL_SRGB_WRITE = 0x8298;
enum uint GL_FILTER = 0x829A;
enum uint GL_VERTEX_TEXTURE = 0x829B;
enum uint GL_TESS_CONTROL_TEXTURE = 0x829C;
enum uint GL_TESS_EVALUATION_TEXTURE = 0x829D;
enum uint GL_GEOMETRY_TEXTURE = 0x829E;
enum uint GL_FRAGMENT_TEXTURE = 0x829F;
enum uint GL_COMPUTE_TEXTURE = 0x82A0;
enum uint GL_TEXTURE_SHADOW = 0x82A1;
enum uint GL_TEXTURE_GATHER = 0x82A2;
enum uint GL_TEXTURE_GATHER_SHADOW = 0x82A3;
enum uint GL_SHADER_IMAGE_LOAD = 0x82A4;
enum uint GL_SHADER_IMAGE_STORE = 0x82A5;
enum uint GL_SHADER_IMAGE_ATOMIC = 0x82A6;
enum uint GL_IMAGE_TEXEL_SIZE = 0x82A7;
enum uint GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
enum uint GL_IMAGE_PIXEL_FORMAT = 0x82A9;
enum uint GL_IMAGE_PIXEL_TYPE = 0x82AA;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
enum uint GL_CLEAR_BUFFER = 0x82B4;
enum uint GL_TEXTURE_VIEW = 0x82B5;
enum uint GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
enum uint GL_FULL_SUPPORT = 0x82B7;
enum uint GL_CAVEAT_SUPPORT = 0x82B8;
enum uint GL_IMAGE_CLASS_4_X_32 = 0x82B9;
enum uint GL_IMAGE_CLASS_2_X_32 = 0x82BA;
enum uint GL_IMAGE_CLASS_1_X_32 = 0x82BB;
enum uint GL_IMAGE_CLASS_4_X_16 = 0x82BC;
enum uint GL_IMAGE_CLASS_2_X_16 = 0x82BD;
enum uint GL_IMAGE_CLASS_1_X_16 = 0x82BE;
enum uint GL_IMAGE_CLASS_4_X_8 = 0x82BF;
enum uint GL_IMAGE_CLASS_2_X_8 = 0x82C0;
enum uint GL_IMAGE_CLASS_1_X_8 = 0x82C1;
enum uint GL_IMAGE_CLASS_11_11_10 = 0x82C2;
enum uint GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
enum uint GL_VIEW_CLASS_128_BITS = 0x82C4;
enum uint GL_VIEW_CLASS_96_BITS = 0x82C5;
enum uint GL_VIEW_CLASS_64_BITS = 0x82C6;
enum uint GL_VIEW_CLASS_48_BITS = 0x82C7;
enum uint GL_VIEW_CLASS_32_BITS = 0x82C8;
enum uint GL_VIEW_CLASS_24_BITS = 0x82C9;
enum uint GL_VIEW_CLASS_16_BITS = 0x82CA;
enum uint GL_VIEW_CLASS_8_BITS = 0x82CB;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
enum uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
enum uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
enum uint GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
enum uint GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
enum uint GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
enum uint GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
enum uint GL_UNIFORM = 0x92E1;
enum uint GL_UNIFORM_BLOCK = 0x92E2;
enum uint GL_PROGRAM_INPUT = 0x92E3;
enum uint GL_PROGRAM_OUTPUT = 0x92E4;
enum uint GL_BUFFER_VARIABLE = 0x92E5;
enum uint GL_SHADER_STORAGE_BLOCK = 0x92E6;
enum uint GL_VERTEX_SUBROUTINE = 0x92E8;
enum uint GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
enum uint GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
enum uint GL_GEOMETRY_SUBROUTINE = 0x92EB;
enum uint GL_FRAGMENT_SUBROUTINE = 0x92EC;
enum uint GL_COMPUTE_SUBROUTINE = 0x92ED;
enum uint GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
enum uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
enum uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
enum uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
enum uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
enum uint GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
enum uint GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
enum uint GL_ACTIVE_RESOURCES = 0x92F5;
enum uint GL_MAX_NAME_LENGTH = 0x92F6;
enum uint GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
enum uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
enum uint GL_NAME_LENGTH = 0x92F9;
enum uint GL_TYPE = 0x92FA;
enum uint GL_ARRAY_SIZE = 0x92FB;
enum uint GL_OFFSET = 0x92FC;
enum uint GL_BLOCK_INDEX = 0x92FD;
enum uint GL_ARRAY_STRIDE = 0x92FE;
enum uint GL_MATRIX_STRIDE = 0x92FF;
enum uint GL_IS_ROW_MAJOR = 0x9300;
enum uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
enum uint GL_BUFFER_BINDING = 0x9302;
enum uint GL_BUFFER_DATA_SIZE = 0x9303;
enum uint GL_NUM_ACTIVE_VARIABLES = 0x9304;
enum uint GL_ACTIVE_VARIABLES = 0x9305;
enum uint GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
enum uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
enum uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
enum uint GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
enum uint GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
enum uint GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
enum uint GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
enum uint GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
enum uint GL_LOCATION = 0x930E;
enum uint GL_LOCATION_INDEX = 0x930F;
enum uint GL_IS_PER_PATCH = 0x92E7;
enum uint GL_SHADER_STORAGE_BUFFER = 0x90D2;
enum uint GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
enum uint GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
enum uint GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
enum uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
enum uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
enum uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
enum uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
enum uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
enum uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
enum uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
enum uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
enum uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
enum uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
enum uint GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
enum uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
enum uint GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
enum uint GL_TEXTURE_BUFFER_OFFSET = 0x919D;
enum uint GL_TEXTURE_BUFFER_SIZE = 0x919E;
enum uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
enum uint GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
enum uint GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
enum uint GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
enum uint GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
enum uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
enum uint GL_VERTEX_ATTRIB_BINDING = 0x82D4;
enum uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
enum uint GL_VERTEX_BINDING_DIVISOR = 0x82D6;
enum uint GL_VERTEX_BINDING_OFFSET = 0x82D7;
enum uint GL_VERTEX_BINDING_STRIDE = 0x82D8;
enum uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
enum uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
enum uint GL_VERTEX_BINDING_BUFFER = 0x8F4F;
enum uint GL_DISPLAY_LIST = 0x82E7;
enum uint GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
enum uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
enum uint GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
enum uint GL_MAP_PERSISTENT_BIT = 0x0040;
enum uint GL_MAP_COHERENT_BIT = 0x0080;
enum uint GL_DYNAMIC_STORAGE_BIT = 0x0100;
enum uint GL_CLIENT_STORAGE_BIT = 0x0200;
enum uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
enum uint GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
enum uint GL_BUFFER_STORAGE_FLAGS = 0x8220;
enum uint GL_CLEAR_TEXTURE = 0x9365;
enum uint GL_LOCATION_COMPONENT = 0x934A;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
enum uint GL_QUERY_BUFFER = 0x9192;
enum uint GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
enum uint GL_QUERY_BUFFER_BINDING = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT = 0x9194;
enum uint GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
enum uint GL_CONTEXT_LOST = 0x0507;
enum uint GL_NEGATIVE_ONE_TO_ONE = 0x935E;
enum uint GL_ZERO_TO_ONE = 0x935F;
enum uint GL_CLIP_ORIGIN = 0x935C;
enum uint GL_CLIP_DEPTH_MODE = 0x935D;
enum uint GL_QUERY_WAIT_INVERTED = 0x8E17;
enum uint GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
enum uint GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
enum uint GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
enum uint GL_MAX_CULL_DISTANCES = 0x82F9;
enum uint GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
enum uint GL_TEXTURE_TARGET = 0x1006;
enum uint GL_QUERY_TARGET = 0x82EA;
enum uint GL_GUILTY_CONTEXT_RESET = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
enum uint GL_LOSE_CONTEXT_ON_RESET = 0x8252;
enum uint GL_NO_RESET_NOTIFICATION = 0x8261;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
enum uint GL_MULTISAMPLE_3DFX = 0x86B2;
enum uint GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
enum uint GL_SAMPLES_3DFX = 0x86B4;
enum uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
enum uint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
enum uint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
enum uint GL_FACTOR_MIN_AMD = 0x901C;
enum uint GL_FACTOR_MAX_AMD = 0x901D;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
enum uint GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
enum uint GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
enum uint GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
enum uint GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
enum uint GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
enum uint GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
enum uint GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
enum uint GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
enum uint GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
enum uint GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
enum uint GL_INT64_NV = 0x140E;
enum uint GL_UNSIGNED_INT64_NV = 0x140F;
enum uint GL_INT8_NV = 0x8FE0;
enum uint GL_INT8_VEC2_NV = 0x8FE1;
enum uint GL_INT8_VEC3_NV = 0x8FE2;
enum uint GL_INT8_VEC4_NV = 0x8FE3;
enum uint GL_INT16_NV = 0x8FE4;
enum uint GL_INT16_VEC2_NV = 0x8FE5;
enum uint GL_INT16_VEC3_NV = 0x8FE6;
enum uint GL_INT16_VEC4_NV = 0x8FE7;
enum uint GL_INT64_VEC2_NV = 0x8FE9;
enum uint GL_INT64_VEC3_NV = 0x8FEA;
enum uint GL_INT64_VEC4_NV = 0x8FEB;
enum uint GL_UNSIGNED_INT8_NV = 0x8FEC;
enum uint GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
enum uint GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
enum uint GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
enum uint GL_UNSIGNED_INT16_NV = 0x8FF0;
enum uint GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
enum uint GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
enum uint GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
enum uint GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
enum uint GL_FLOAT16_NV = 0x8FF8;
enum uint GL_FLOAT16_VEC2_NV = 0x8FF9;
enum uint GL_FLOAT16_VEC3_NV = 0x8FFA;
enum uint GL_FLOAT16_VEC4_NV = 0x8FFB;
enum uint GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
enum uint GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
enum uint GL_DATA_BUFFER_AMD = 0x9151;
enum uint GL_PERFORMANCE_MONITOR_AMD = 0x9152;
enum uint GL_QUERY_OBJECT_AMD = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
enum uint GL_SAMPLER_OBJECT_AMD = 0x9155;
enum uint GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
enum uint GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
enum uint GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
enum uint GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
enum uint GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
enum uint GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
enum uint GL_COUNTER_TYPE_AMD = 0x8BC0;
enum uint GL_COUNTER_RANGE_AMD = 0x8BC1;
enum uint GL_UNSIGNED_INT64_AMD = 0x8BC2;
enum uint GL_PERCENTAGE_AMD = 0x8BC3;
enum uint GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
enum uint GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
enum uint GL_PERFMON_RESULT_AMD = 0x8BC6;
enum uint GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
enum uint GL_QUERY_BUFFER_AMD = 0x9192;
enum uint GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
enum uint GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
enum uint GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
enum uint GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
enum uint GL_MIN_LOD_WARNING_AMD = 0x919C;
enum uint GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
enum uint GL_SET_AMD = 0x874A;
enum uint GL_REPLACE_VALUE_AMD = 0x874B;
enum uint GL_STENCIL_OP_VALUE_AMD = 0x874C;
enum uint GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
enum uint GL_STREAM_RASTERIZATION_AMD = 0x91A0;
enum uint GL_SAMPLER_BUFFER_AMD = 0x9001;
enum uint GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
enum uint GL_TESSELLATION_MODE_AMD = 0x9004;
enum uint GL_TESSELLATION_FACTOR_AMD = 0x9005;
enum uint GL_DISCRETE_AMD = 0x9006;
enum uint GL_CONTINUOUS_AMD = 0x9007;
enum uint GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
enum uint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
enum uint GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
enum uint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
enum uint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
enum uint GL_DRAW_PIXELS_APPLE = 0x8A0A;
enum uint GL_FENCE_APPLE = 0x8A0B;
enum uint GL_HALF_APPLE = 0x140B;
enum uint GL_RGBA_FLOAT32_APPLE = 0x8814;
enum uint GL_RGB_FLOAT32_APPLE = 0x8815;
enum uint GL_ALPHA_FLOAT32_APPLE = 0x8816;
enum uint GL_INTENSITY_FLOAT32_APPLE = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
enum uint GL_RGBA_FLOAT16_APPLE = 0x881A;
enum uint GL_RGB_FLOAT16_APPLE = 0x881B;
enum uint GL_ALPHA_FLOAT16_APPLE = 0x881C;
enum uint GL_INTENSITY_FLOAT16_APPLE = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
enum uint GL_COLOR_FLOAT_APPLE = 0x8A0F;
enum uint GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
enum uint GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
enum uint GL_BUFFER_OBJECT_APPLE = 0x85B3;
enum uint GL_RELEASED_APPLE = 0x8A19;
enum uint GL_VOLATILE_APPLE = 0x8A1A;
enum uint GL_RETAINED_APPLE = 0x8A1B;
enum uint GL_UNDEFINED_APPLE = 0x8A1C;
enum uint GL_PURGEABLE_APPLE = 0x8A1D;
enum uint GL_RGB_422_APPLE = 0x8A1F;
enum uint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
enum uint GL_RGB_RAW_422_APPLE = 0x8A51;
enum uint GL_PACK_ROW_BYTES_APPLE = 0x8A15;
enum uint GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
enum uint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
enum uint GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
enum uint GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
enum uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
enum uint GL_STORAGE_PRIVATE_APPLE = 0x85BD;
enum uint GL_STORAGE_CACHED_APPLE = 0x85BE;
enum uint GL_STORAGE_SHARED_APPLE = 0x85BF;
enum uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
enum uint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
enum uint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
enum uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
enum uint GL_STORAGE_CLIENT_APPLE = 0x85B4;
enum uint GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
enum uint GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
enum uint GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
enum uint GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
enum uint GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
enum uint GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
enum uint GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
enum uint GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
enum uint GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
enum uint GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
enum uint GL_YCBCR_422_APPLE = 0x85B9;
enum uint GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
enum uint GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
enum uint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
enum uint GL_UNSIGNED_INT64_ARB = 0x140F;
enum uint GL_SYNC_CL_EVENT_ARB = 0x8240;
enum uint GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
enum uint GL_RGBA_FLOAT_MODE_ARB = 0x8820;
enum uint GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
enum uint GL_CLAMP_READ_COLOR_ARB = 0x891C;
enum uint GL_FIXED_ONLY_ARB = 0x891D;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
enum uint GL_DEBUG_SOURCE_API_ARB = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
enum uint GL_DEPTH_COMPONENT16_ARB = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_ARB = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_ARB = 0x81A7;
enum uint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
enum uint GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
enum uint GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
enum uint GL_DRAW_BUFFER0_ARB = 0x8825;
enum uint GL_DRAW_BUFFER1_ARB = 0x8826;
enum uint GL_DRAW_BUFFER2_ARB = 0x8827;
enum uint GL_DRAW_BUFFER3_ARB = 0x8828;
enum uint GL_DRAW_BUFFER4_ARB = 0x8829;
enum uint GL_DRAW_BUFFER5_ARB = 0x882A;
enum uint GL_DRAW_BUFFER6_ARB = 0x882B;
enum uint GL_DRAW_BUFFER7_ARB = 0x882C;
enum uint GL_DRAW_BUFFER8_ARB = 0x882D;
enum uint GL_DRAW_BUFFER9_ARB = 0x882E;
enum uint GL_DRAW_BUFFER10_ARB = 0x882F;
enum uint GL_DRAW_BUFFER11_ARB = 0x8830;
enum uint GL_DRAW_BUFFER12_ARB = 0x8831;
enum uint GL_DRAW_BUFFER13_ARB = 0x8832;
enum uint GL_DRAW_BUFFER14_ARB = 0x8833;
enum uint GL_DRAW_BUFFER15_ARB = 0x8834;
enum uint GL_FRAGMENT_PROGRAM_ARB = 0x8804;
enum uint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
enum uint GL_PROGRAM_LENGTH_ARB = 0x8627;
enum uint GL_PROGRAM_FORMAT_ARB = 0x8876;
enum uint GL_PROGRAM_BINDING_ARB = 0x8677;
enum uint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
enum uint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
enum uint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
enum uint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
enum uint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
enum uint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
enum uint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
enum uint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
enum uint GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
enum uint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
enum uint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
enum uint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
enum uint GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
enum uint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
enum uint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
enum uint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
enum uint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
enum uint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
enum uint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
enum uint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
enum uint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
enum uint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
enum uint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
enum uint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
enum uint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
enum uint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
enum uint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
enum uint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
enum uint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
enum uint GL_PROGRAM_STRING_ARB = 0x8628;
enum uint GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
enum uint GL_CURRENT_MATRIX_ARB = 0x8641;
enum uint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
enum uint GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
enum uint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
enum uint GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
enum uint GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
enum uint GL_MATRIX0_ARB = 0x88C0;
enum uint GL_MATRIX1_ARB = 0x88C1;
enum uint GL_MATRIX2_ARB = 0x88C2;
enum uint GL_MATRIX3_ARB = 0x88C3;
enum uint GL_MATRIX4_ARB = 0x88C4;
enum uint GL_MATRIX5_ARB = 0x88C5;
enum uint GL_MATRIX6_ARB = 0x88C6;
enum uint GL_MATRIX7_ARB = 0x88C7;
enum uint GL_MATRIX8_ARB = 0x88C8;
enum uint GL_MATRIX9_ARB = 0x88C9;
enum uint GL_MATRIX10_ARB = 0x88CA;
enum uint GL_MATRIX11_ARB = 0x88CB;
enum uint GL_MATRIX12_ARB = 0x88CC;
enum uint GL_MATRIX13_ARB = 0x88CD;
enum uint GL_MATRIX14_ARB = 0x88CE;
enum uint GL_MATRIX15_ARB = 0x88CF;
enum uint GL_MATRIX16_ARB = 0x88D0;
enum uint GL_MATRIX17_ARB = 0x88D1;
enum uint GL_MATRIX18_ARB = 0x88D2;
enum uint GL_MATRIX19_ARB = 0x88D3;
enum uint GL_MATRIX20_ARB = 0x88D4;
enum uint GL_MATRIX21_ARB = 0x88D5;
enum uint GL_MATRIX22_ARB = 0x88D6;
enum uint GL_MATRIX23_ARB = 0x88D7;
enum uint GL_MATRIX24_ARB = 0x88D8;
enum uint GL_MATRIX25_ARB = 0x88D9;
enum uint GL_MATRIX26_ARB = 0x88DA;
enum uint GL_MATRIX27_ARB = 0x88DB;
enum uint GL_MATRIX28_ARB = 0x88DC;
enum uint GL_MATRIX29_ARB = 0x88DD;
enum uint GL_MATRIX30_ARB = 0x88DE;
enum uint GL_MATRIX31_ARB = 0x88DF;
enum uint GL_FRAGMENT_SHADER_ARB = 0x8B30;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
enum uint GL_LINES_ADJACENCY_ARB = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
enum uint GL_GEOMETRY_SHADER_ARB = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
enum uint GL_INT64_ARB = 0x140E;
enum uint GL_INT64_VEC2_ARB = 0x8FE9;
enum uint GL_INT64_VEC3_ARB = 0x8FEA;
enum uint GL_INT64_VEC4_ARB = 0x8FEB;
enum uint GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
enum uint GL_HALF_FLOAT_ARB = 0x140B;
enum uint GL_BLEND_COLOR = 0x8005;
enum uint GL_BLEND_EQUATION = 0x8009;
enum uint GL_CONVOLUTION_1D = 0x8010;
enum uint GL_CONVOLUTION_2D = 0x8011;
enum uint GL_SEPARABLE_2D = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS = 0x8015;
enum uint GL_REDUCE = 0x8016;
enum uint GL_CONVOLUTION_FORMAT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
enum uint GL_HISTOGRAM = 0x8024;
enum uint GL_PROXY_HISTOGRAM = 0x8025;
enum uint GL_HISTOGRAM_WIDTH = 0x8026;
enum uint GL_HISTOGRAM_FORMAT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
enum uint GL_HISTOGRAM_SINK = 0x802D;
enum uint GL_MINMAX = 0x802E;
enum uint GL_MINMAX_FORMAT = 0x802F;
enum uint GL_MINMAX_SINK = 0x8030;
enum uint GL_TABLE_TOO_LARGE = 0x8031;
enum uint GL_COLOR_MATRIX = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
enum uint GL_COLOR_TABLE = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
enum uint GL_CONSTANT_BORDER = 0x8151;
enum uint GL_REPLICATE_BORDER = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR = 0x8154;
enum uint GL_PARAMETER_BUFFER_ARB = 0x80EE;
enum uint GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
enum uint GL_SRGB_DECODE_ARB = 0x8299;
enum uint GL_MATRIX_PALETTE_ARB = 0x8840;
enum uint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
enum uint GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
enum uint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
enum uint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
enum uint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
enum uint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
enum uint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
enum uint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
enum uint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
enum uint GL_MULTISAMPLE_ARB = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
enum uint GL_SAMPLE_COVERAGE_ARB = 0x80A0;
enum uint GL_SAMPLE_BUFFERS_ARB = 0x80A8;
enum uint GL_SAMPLES_ARB = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
enum uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
enum uint GL_TEXTURE0_ARB = 0x84C0;
enum uint GL_TEXTURE1_ARB = 0x84C1;
enum uint GL_TEXTURE2_ARB = 0x84C2;
enum uint GL_TEXTURE3_ARB = 0x84C3;
enum uint GL_TEXTURE4_ARB = 0x84C4;
enum uint GL_TEXTURE5_ARB = 0x84C5;
enum uint GL_TEXTURE6_ARB = 0x84C6;
enum uint GL_TEXTURE7_ARB = 0x84C7;
enum uint GL_TEXTURE8_ARB = 0x84C8;
enum uint GL_TEXTURE9_ARB = 0x84C9;
enum uint GL_TEXTURE10_ARB = 0x84CA;
enum uint GL_TEXTURE11_ARB = 0x84CB;
enum uint GL_TEXTURE12_ARB = 0x84CC;
enum uint GL_TEXTURE13_ARB = 0x84CD;
enum uint GL_TEXTURE14_ARB = 0x84CE;
enum uint GL_TEXTURE15_ARB = 0x84CF;
enum uint GL_TEXTURE16_ARB = 0x84D0;
enum uint GL_TEXTURE17_ARB = 0x84D1;
enum uint GL_TEXTURE18_ARB = 0x84D2;
enum uint GL_TEXTURE19_ARB = 0x84D3;
enum uint GL_TEXTURE20_ARB = 0x84D4;
enum uint GL_TEXTURE21_ARB = 0x84D5;
enum uint GL_TEXTURE22_ARB = 0x84D6;
enum uint GL_TEXTURE23_ARB = 0x84D7;
enum uint GL_TEXTURE24_ARB = 0x84D8;
enum uint GL_TEXTURE25_ARB = 0x84D9;
enum uint GL_TEXTURE26_ARB = 0x84DA;
enum uint GL_TEXTURE27_ARB = 0x84DB;
enum uint GL_TEXTURE28_ARB = 0x84DC;
enum uint GL_TEXTURE29_ARB = 0x84DD;
enum uint GL_TEXTURE30_ARB = 0x84DE;
enum uint GL_TEXTURE31_ARB = 0x84DF;
enum uint GL_ACTIVE_TEXTURE_ARB = 0x84E0;
enum uint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
enum uint GL_QUERY_COUNTER_BITS_ARB = 0x8864;
enum uint GL_CURRENT_QUERY_ARB = 0x8865;
enum uint GL_QUERY_RESULT_ARB = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
enum uint GL_SAMPLES_PASSED_ARB = 0x8914;
enum uint GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
enum uint GL_COMPLETION_STATUS_ARB = 0x91B1;
enum uint GL_VERTICES_SUBMITTED_ARB = 0x82EE;
enum uint GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
enum uint GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
enum uint GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
enum uint GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
enum uint GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
enum uint GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
enum uint GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
enum uint GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
enum uint GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
enum uint GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
enum uint GL_POINT_SIZE_MIN_ARB = 0x8126;
enum uint GL_POINT_SIZE_MAX_ARB = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
enum uint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
enum uint GL_POINT_SPRITE_ARB = 0x8861;
enum uint GL_COORD_REPLACE_ARB = 0x8862;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
enum uint GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
enum uint GL_SAMPLE_LOCATION_ARB = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
enum uint GL_SAMPLE_SHADING_ARB = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
enum uint GL_PROGRAM_OBJECT_ARB = 0x8B40;
enum uint GL_SHADER_OBJECT_ARB = 0x8B48;
enum uint GL_OBJECT_TYPE_ARB = 0x8B4E;
enum uint GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
enum uint GL_FLOAT_VEC2_ARB = 0x8B50;
enum uint GL_FLOAT_VEC3_ARB = 0x8B51;
enum uint GL_FLOAT_VEC4_ARB = 0x8B52;
enum uint GL_INT_VEC2_ARB = 0x8B53;
enum uint GL_INT_VEC3_ARB = 0x8B54;
enum uint GL_INT_VEC4_ARB = 0x8B55;
enum uint GL_BOOL_ARB = 0x8B56;
enum uint GL_BOOL_VEC2_ARB = 0x8B57;
enum uint GL_BOOL_VEC3_ARB = 0x8B58;
enum uint GL_BOOL_VEC4_ARB = 0x8B59;
enum uint GL_FLOAT_MAT2_ARB = 0x8B5A;
enum uint GL_FLOAT_MAT3_ARB = 0x8B5B;
enum uint GL_FLOAT_MAT4_ARB = 0x8B5C;
enum uint GL_SAMPLER_1D_ARB = 0x8B5D;
enum uint GL_SAMPLER_2D_ARB = 0x8B5E;
enum uint GL_SAMPLER_3D_ARB = 0x8B5F;
enum uint GL_SAMPLER_CUBE_ARB = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
enum uint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
enum uint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
enum uint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
enum uint GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
enum uint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
enum uint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
enum uint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
enum uint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
enum uint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
enum uint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
enum uint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
enum uint GL_SHADER_INCLUDE_ARB = 0x8DAE;
enum uint GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
enum uint GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
enum uint GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
enum uint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
enum uint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
enum uint GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
enum uint GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
enum uint GL_TEXTURE_SPARSE_ARB = 0x91A6;
enum uint GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
enum uint GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
enum uint GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
enum uint GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
enum uint GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
enum uint GL_CLAMP_TO_BORDER_ARB = 0x812D;
enum uint GL_TEXTURE_BUFFER_ARB = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
enum uint GL_COMPRESSED_ALPHA_ARB = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
enum uint GL_COMPRESSED_RGB_ARB = 0x84ED;
enum uint GL_COMPRESSED_RGBA_ARB = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
enum uint GL_NORMAL_MAP_ARB = 0x8511;
enum uint GL_REFLECTION_MAP_ARB = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
enum uint GL_COMBINE_ARB = 0x8570;
enum uint GL_COMBINE_RGB_ARB = 0x8571;
enum uint GL_COMBINE_ALPHA_ARB = 0x8572;
enum uint GL_SOURCE0_RGB_ARB = 0x8580;
enum uint GL_SOURCE1_RGB_ARB = 0x8581;
enum uint GL_SOURCE2_RGB_ARB = 0x8582;
enum uint GL_SOURCE0_ALPHA_ARB = 0x8588;
enum uint GL_SOURCE1_ALPHA_ARB = 0x8589;
enum uint GL_SOURCE2_ALPHA_ARB = 0x858A;
enum uint GL_OPERAND0_RGB_ARB = 0x8590;
enum uint GL_OPERAND1_RGB_ARB = 0x8591;
enum uint GL_OPERAND2_RGB_ARB = 0x8592;
enum uint GL_OPERAND0_ALPHA_ARB = 0x8598;
enum uint GL_OPERAND1_ALPHA_ARB = 0x8599;
enum uint GL_OPERAND2_ALPHA_ARB = 0x859A;
enum uint GL_RGB_SCALE_ARB = 0x8573;
enum uint GL_ADD_SIGNED_ARB = 0x8574;
enum uint GL_INTERPOLATE_ARB = 0x8575;
enum uint GL_SUBTRACT_ARB = 0x84E7;
enum uint GL_CONSTANT_ARB = 0x8576;
enum uint GL_PRIMARY_COLOR_ARB = 0x8577;
enum uint GL_PREVIOUS_ARB = 0x8578;
enum uint GL_DOT3_RGB_ARB = 0x86AE;
enum uint GL_DOT3_RGBA_ARB = 0x86AF;
enum uint GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
enum uint GL_WEIGHTED_AVERAGE_ARB = 0x9367;
enum uint GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
enum uint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
enum uint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
enum uint GL_RGBA32F_ARB = 0x8814;
enum uint GL_RGB32F_ARB = 0x8815;
enum uint GL_ALPHA32F_ARB = 0x8816;
enum uint GL_INTENSITY32F_ARB = 0x8817;
enum uint GL_LUMINANCE32F_ARB = 0x8818;
enum uint GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
enum uint GL_RGBA16F_ARB = 0x881A;
enum uint GL_RGB16F_ARB = 0x881B;
enum uint GL_ALPHA16F_ARB = 0x881C;
enum uint GL_INTENSITY16F_ARB = 0x881D;
enum uint GL_LUMINANCE16F_ARB = 0x881E;
enum uint GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
enum uint GL_MIRRORED_REPEAT_ARB = 0x8370;
enum uint GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
enum uint GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
enum uint GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
enum uint GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
enum uint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
enum uint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
enum uint GL_VERTEX_BLEND_ARB = 0x86A7;
enum uint GL_CURRENT_WEIGHT_ARB = 0x86A8;
enum uint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
enum uint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
enum uint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
enum uint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
enum uint GL_WEIGHT_ARRAY_ARB = 0x86AD;
enum uint GL_MODELVIEW0_ARB = 0x1700;
enum uint GL_MODELVIEW1_ARB = 0x850A;
enum uint GL_MODELVIEW2_ARB = 0x8722;
enum uint GL_MODELVIEW3_ARB = 0x8723;
enum uint GL_MODELVIEW4_ARB = 0x8724;
enum uint GL_MODELVIEW5_ARB = 0x8725;
enum uint GL_MODELVIEW6_ARB = 0x8726;
enum uint GL_MODELVIEW7_ARB = 0x8727;
enum uint GL_MODELVIEW8_ARB = 0x8728;
enum uint GL_MODELVIEW9_ARB = 0x8729;
enum uint GL_MODELVIEW10_ARB = 0x872A;
enum uint GL_MODELVIEW11_ARB = 0x872B;
enum uint GL_MODELVIEW12_ARB = 0x872C;
enum uint GL_MODELVIEW13_ARB = 0x872D;
enum uint GL_MODELVIEW14_ARB = 0x872E;
enum uint GL_MODELVIEW15_ARB = 0x872F;
enum uint GL_MODELVIEW16_ARB = 0x8730;
enum uint GL_MODELVIEW17_ARB = 0x8731;
enum uint GL_MODELVIEW18_ARB = 0x8732;
enum uint GL_MODELVIEW19_ARB = 0x8733;
enum uint GL_MODELVIEW20_ARB = 0x8734;
enum uint GL_MODELVIEW21_ARB = 0x8735;
enum uint GL_MODELVIEW22_ARB = 0x8736;
enum uint GL_MODELVIEW23_ARB = 0x8737;
enum uint GL_MODELVIEW24_ARB = 0x8738;
enum uint GL_MODELVIEW25_ARB = 0x8739;
enum uint GL_MODELVIEW26_ARB = 0x873A;
enum uint GL_MODELVIEW27_ARB = 0x873B;
enum uint GL_MODELVIEW28_ARB = 0x873C;
enum uint GL_MODELVIEW29_ARB = 0x873D;
enum uint GL_MODELVIEW30_ARB = 0x873E;
enum uint GL_MODELVIEW31_ARB = 0x873F;
enum uint GL_BUFFER_SIZE_ARB = 0x8764;
enum uint GL_BUFFER_USAGE_ARB = 0x8765;
enum uint GL_ARRAY_BUFFER_ARB = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
enum uint GL_READ_ONLY_ARB = 0x88B8;
enum uint GL_WRITE_ONLY_ARB = 0x88B9;
enum uint GL_READ_WRITE_ARB = 0x88BA;
enum uint GL_BUFFER_ACCESS_ARB = 0x88BB;
enum uint GL_BUFFER_MAPPED_ARB = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
enum uint GL_STREAM_DRAW_ARB = 0x88E0;
enum uint GL_STREAM_READ_ARB = 0x88E1;
enum uint GL_STREAM_COPY_ARB = 0x88E2;
enum uint GL_STATIC_DRAW_ARB = 0x88E4;
enum uint GL_STATIC_READ_ARB = 0x88E5;
enum uint GL_STATIC_COPY_ARB = 0x88E6;
enum uint GL_DYNAMIC_DRAW_ARB = 0x88E8;
enum uint GL_DYNAMIC_READ_ARB = 0x88E9;
enum uint GL_DYNAMIC_COPY_ARB = 0x88EA;
enum uint GL_COLOR_SUM_ARB = 0x8458;
enum uint GL_VERTEX_PROGRAM_ARB = 0x8620;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
enum uint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
enum uint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
enum uint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
enum uint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
enum uint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
enum uint GL_VERTEX_SHADER_ARB = 0x8B31;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
enum uint GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
enum uint GL_DRAW_BUFFER0_ATI = 0x8825;
enum uint GL_DRAW_BUFFER1_ATI = 0x8826;
enum uint GL_DRAW_BUFFER2_ATI = 0x8827;
enum uint GL_DRAW_BUFFER3_ATI = 0x8828;
enum uint GL_DRAW_BUFFER4_ATI = 0x8829;
enum uint GL_DRAW_BUFFER5_ATI = 0x882A;
enum uint GL_DRAW_BUFFER6_ATI = 0x882B;
enum uint GL_DRAW_BUFFER7_ATI = 0x882C;
enum uint GL_DRAW_BUFFER8_ATI = 0x882D;
enum uint GL_DRAW_BUFFER9_ATI = 0x882E;
enum uint GL_DRAW_BUFFER10_ATI = 0x882F;
enum uint GL_DRAW_BUFFER11_ATI = 0x8830;
enum uint GL_DRAW_BUFFER12_ATI = 0x8831;
enum uint GL_DRAW_BUFFER13_ATI = 0x8832;
enum uint GL_DRAW_BUFFER14_ATI = 0x8833;
enum uint GL_DRAW_BUFFER15_ATI = 0x8834;
enum uint GL_ELEMENT_ARRAY_ATI = 0x8768;
enum uint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
enum uint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
enum uint GL_BUMP_ROT_MATRIX_ATI = 0x8775;
enum uint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
enum uint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
enum uint GL_BUMP_TEX_UNITS_ATI = 0x8778;
enum uint GL_DUDV_ATI = 0x8779;
enum uint GL_DU8DV8_ATI = 0x877A;
enum uint GL_BUMP_ENVMAP_ATI = 0x877B;
enum uint GL_BUMP_TARGET_ATI = 0x877C;
enum uint GL_FRAGMENT_SHADER_ATI = 0x8920;
enum uint GL_REG_0_ATI = 0x8921;
enum uint GL_REG_1_ATI = 0x8922;
enum uint GL_REG_2_ATI = 0x8923;
enum uint GL_REG_3_ATI = 0x8924;
enum uint GL_REG_4_ATI = 0x8925;
enum uint GL_REG_5_ATI = 0x8926;
enum uint GL_REG_6_ATI = 0x8927;
enum uint GL_REG_7_ATI = 0x8928;
enum uint GL_REG_8_ATI = 0x8929;
enum uint GL_REG_9_ATI = 0x892A;
enum uint GL_REG_10_ATI = 0x892B;
enum uint GL_REG_11_ATI = 0x892C;
enum uint GL_REG_12_ATI = 0x892D;
enum uint GL_REG_13_ATI = 0x892E;
enum uint GL_REG_14_ATI = 0x892F;
enum uint GL_REG_15_ATI = 0x8930;
enum uint GL_REG_16_ATI = 0x8931;
enum uint GL_REG_17_ATI = 0x8932;
enum uint GL_REG_18_ATI = 0x8933;
enum uint GL_REG_19_ATI = 0x8934;
enum uint GL_REG_20_ATI = 0x8935;
enum uint GL_REG_21_ATI = 0x8936;
enum uint GL_REG_22_ATI = 0x8937;
enum uint GL_REG_23_ATI = 0x8938;
enum uint GL_REG_24_ATI = 0x8939;
enum uint GL_REG_25_ATI = 0x893A;
enum uint GL_REG_26_ATI = 0x893B;
enum uint GL_REG_27_ATI = 0x893C;
enum uint GL_REG_28_ATI = 0x893D;
enum uint GL_REG_29_ATI = 0x893E;
enum uint GL_REG_30_ATI = 0x893F;
enum uint GL_REG_31_ATI = 0x8940;
enum uint GL_CON_0_ATI = 0x8941;
enum uint GL_CON_1_ATI = 0x8942;
enum uint GL_CON_2_ATI = 0x8943;
enum uint GL_CON_3_ATI = 0x8944;
enum uint GL_CON_4_ATI = 0x8945;
enum uint GL_CON_5_ATI = 0x8946;
enum uint GL_CON_6_ATI = 0x8947;
enum uint GL_CON_7_ATI = 0x8948;
enum uint GL_CON_8_ATI = 0x8949;
enum uint GL_CON_9_ATI = 0x894A;
enum uint GL_CON_10_ATI = 0x894B;
enum uint GL_CON_11_ATI = 0x894C;
enum uint GL_CON_12_ATI = 0x894D;
enum uint GL_CON_13_ATI = 0x894E;
enum uint GL_CON_14_ATI = 0x894F;
enum uint GL_CON_15_ATI = 0x8950;
enum uint GL_CON_16_ATI = 0x8951;
enum uint GL_CON_17_ATI = 0x8952;
enum uint GL_CON_18_ATI = 0x8953;
enum uint GL_CON_19_ATI = 0x8954;
enum uint GL_CON_20_ATI = 0x8955;
enum uint GL_CON_21_ATI = 0x8956;
enum uint GL_CON_22_ATI = 0x8957;
enum uint GL_CON_23_ATI = 0x8958;
enum uint GL_CON_24_ATI = 0x8959;
enum uint GL_CON_25_ATI = 0x895A;
enum uint GL_CON_26_ATI = 0x895B;
enum uint GL_CON_27_ATI = 0x895C;
enum uint GL_CON_28_ATI = 0x895D;
enum uint GL_CON_29_ATI = 0x895E;
enum uint GL_CON_30_ATI = 0x895F;
enum uint GL_CON_31_ATI = 0x8960;
enum uint GL_MOV_ATI = 0x8961;
enum uint GL_ADD_ATI = 0x8963;
enum uint GL_MUL_ATI = 0x8964;
enum uint GL_SUB_ATI = 0x8965;
enum uint GL_DOT3_ATI = 0x8966;
enum uint GL_DOT4_ATI = 0x8967;
enum uint GL_MAD_ATI = 0x8968;
enum uint GL_LERP_ATI = 0x8969;
enum uint GL_CND_ATI = 0x896A;
enum uint GL_CND0_ATI = 0x896B;
enum uint GL_DOT2_ADD_ATI = 0x896C;
enum uint GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
enum uint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
enum uint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
enum uint GL_NUM_PASSES_ATI = 0x8970;
enum uint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
enum uint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
enum uint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
enum uint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
enum uint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
enum uint GL_SWIZZLE_STR_ATI = 0x8976;
enum uint GL_SWIZZLE_STQ_ATI = 0x8977;
enum uint GL_SWIZZLE_STR_DR_ATI = 0x8978;
enum uint GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
enum uint GL_SWIZZLE_STRQ_ATI = 0x897A;
enum uint GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
enum uint GL_RED_BIT_ATI = 0x00000001;
enum uint GL_GREEN_BIT_ATI = 0x00000002;
enum uint GL_BLUE_BIT_ATI = 0x00000004;
enum uint GL_2X_BIT_ATI = 0x00000001;
enum uint GL_4X_BIT_ATI = 0x00000002;
enum uint GL_8X_BIT_ATI = 0x00000004;
enum uint GL_HALF_BIT_ATI = 0x00000008;
enum uint GL_QUARTER_BIT_ATI = 0x00000010;
enum uint GL_EIGHTH_BIT_ATI = 0x00000020;
enum uint GL_SATURATE_BIT_ATI = 0x00000040;
enum uint GL_COMP_BIT_ATI = 0x00000002;
enum uint GL_NEGATE_BIT_ATI = 0x00000004;
enum uint GL_BIAS_BIT_ATI = 0x00000008;
enum uint GL_VBO_FREE_MEMORY_ATI = 0x87FB;
enum uint GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
enum uint GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
enum uint GL_RGBA_FLOAT_MODE_ATI = 0x8820;
enum uint GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
enum uint GL_PN_TRIANGLES_ATI = 0x87F0;
enum uint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
enum uint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
enum uint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
enum uint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
enum uint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
enum uint GL_STENCIL_BACK_FUNC_ATI = 0x8800;
enum uint GL_STENCIL_BACK_FAIL_ATI = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
enum uint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
enum uint GL_MODULATE_ADD_ATI = 0x8744;
enum uint GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
enum uint GL_MODULATE_SUBTRACT_ATI = 0x8746;
enum uint GL_RGBA_FLOAT32_ATI = 0x8814;
enum uint GL_RGB_FLOAT32_ATI = 0x8815;
enum uint GL_ALPHA_FLOAT32_ATI = 0x8816;
enum uint GL_INTENSITY_FLOAT32_ATI = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_ATI = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
enum uint GL_RGBA_FLOAT16_ATI = 0x881A;
enum uint GL_RGB_FLOAT16_ATI = 0x881B;
enum uint GL_ALPHA_FLOAT16_ATI = 0x881C;
enum uint GL_INTENSITY_FLOAT16_ATI = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_ATI = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
enum uint GL_MIRROR_CLAMP_ATI = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
enum uint GL_STATIC_ATI = 0x8760;
enum uint GL_DYNAMIC_ATI = 0x8761;
enum uint GL_PRESERVE_ATI = 0x8762;
enum uint GL_DISCARD_ATI = 0x8763;
enum uint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
enum uint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
enum uint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
enum uint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
enum uint GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
enum uint GL_VERTEX_STREAM0_ATI = 0x876C;
enum uint GL_VERTEX_STREAM1_ATI = 0x876D;
enum uint GL_VERTEX_STREAM2_ATI = 0x876E;
enum uint GL_VERTEX_STREAM3_ATI = 0x876F;
enum uint GL_VERTEX_STREAM4_ATI = 0x8770;
enum uint GL_VERTEX_STREAM5_ATI = 0x8771;
enum uint GL_VERTEX_STREAM6_ATI = 0x8772;
enum uint GL_VERTEX_STREAM7_ATI = 0x8773;
enum uint GL_VERTEX_SOURCE_ATI = 0x8774;
enum uint GL_422_EXT = 0x80CC;
enum uint GL_422_REV_EXT = 0x80CD;
enum uint GL_422_AVERAGE_EXT = 0x80CE;
enum uint GL_422_REV_AVERAGE_EXT = 0x80CF;
enum uint GL_ABGR_EXT = 0x8000;
enum uint GL_BGR_EXT = 0x80E0;
enum uint GL_BGRA_EXT = 0x80E1;
enum uint GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
enum uint GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
enum uint GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
enum uint GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
enum uint GL_UNIFORM_BUFFER_EXT = 0x8DEE;
enum uint GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
enum uint GL_CONSTANT_COLOR_EXT = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
enum uint GL_CONSTANT_ALPHA_EXT = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
enum uint GL_BLEND_COLOR_EXT = 0x8005;
enum uint GL_BLEND_EQUATION_RGB_EXT = 0x8009;
enum uint GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
enum uint GL_BLEND_DST_RGB_EXT = 0x80C8;
enum uint GL_BLEND_SRC_RGB_EXT = 0x80C9;
enum uint GL_BLEND_DST_ALPHA_EXT = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
enum uint GL_MIN_EXT = 0x8007;
enum uint GL_MAX_EXT = 0x8008;
enum uint GL_FUNC_ADD_EXT = 0x8006;
enum uint GL_BLEND_EQUATION_EXT = 0x8009;
enum uint GL_FUNC_SUBTRACT_EXT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
enum uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
enum uint GL_CMYK_EXT = 0x800C;
enum uint GL_CMYKA_EXT = 0x800D;
enum uint GL_PACK_CMYK_HINT_EXT = 0x800E;
enum uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
enum uint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
enum uint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
enum uint GL_CONVOLUTION_1D_EXT = 0x8010;
enum uint GL_CONVOLUTION_2D_EXT = 0x8011;
enum uint GL_SEPARABLE_2D_EXT = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
enum uint GL_REDUCE_EXT = 0x8016;
enum uint GL_CONVOLUTION_FORMAT_EXT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH_EXT = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
enum uint GL_TANGENT_ARRAY_EXT = 0x8439;
enum uint GL_BINORMAL_ARRAY_EXT = 0x843A;
enum uint GL_CURRENT_TANGENT_EXT = 0x843B;
enum uint GL_CURRENT_BINORMAL_EXT = 0x843C;
enum uint GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
enum uint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
enum uint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
enum uint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
enum uint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
enum uint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
enum uint GL_MAP1_TANGENT_EXT = 0x8444;
enum uint GL_MAP2_TANGENT_EXT = 0x8445;
enum uint GL_MAP1_BINORMAL_EXT = 0x8446;
enum uint GL_MAP2_BINORMAL_EXT = 0x8447;
enum uint GL_CULL_VERTEX_EXT = 0x81AA;
enum uint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
enum uint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
enum uint GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
enum uint GL_PROGRAM_OBJECT_EXT = 0x8B40;
enum uint GL_SHADER_OBJECT_EXT = 0x8B48;
enum uint GL_BUFFER_OBJECT_EXT = 0x9151;
enum uint GL_QUERY_OBJECT_EXT = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
enum uint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
enum uint GL_DEPTH_BOUNDS_EXT = 0x8891;
enum uint GL_PROGRAM_MATRIX_EXT = 0x8E2D;
enum uint GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
enum uint GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
enum uint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
enum uint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
enum uint GL_FOG_COORDINATE_EXT = 0x8451;
enum uint GL_FRAGMENT_DEPTH_EXT = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
enum uint GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
enum uint GL_MAX_SAMPLES_EXT = 0x8D57;
enum uint GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
enum uint GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
enum uint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
enum uint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
enum uint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
enum uint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
enum uint GL_FRAMEBUFFER_EXT = 0x8D40;
enum uint GL_RENDERBUFFER_EXT = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
enum uint GL_STENCIL_INDEX1_EXT = 0x8D46;
enum uint GL_STENCIL_INDEX4_EXT = 0x8D47;
enum uint GL_STENCIL_INDEX8_EXT = 0x8D48;
enum uint GL_STENCIL_INDEX16_EXT = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
enum uint GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
enum uint GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
enum uint GL_GEOMETRY_SHADER_EXT = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
enum uint GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
enum uint GL_LINES_ADJACENCY_EXT = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
enum uint GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
enum uint GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
enum uint GL_SAMPLER_BUFFER_EXT = 0x8DC2;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
enum uint GL_INT_SAMPLER_1D_EXT = 0x8DC9;
enum uint GL_INT_SAMPLER_2D_EXT = 0x8DCA;
enum uint GL_INT_SAMPLER_3D_EXT = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
enum uint GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
enum uint GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
enum uint GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
enum uint GL_HISTOGRAM_EXT = 0x8024;
enum uint GL_PROXY_HISTOGRAM_EXT = 0x8025;
enum uint GL_HISTOGRAM_WIDTH_EXT = 0x8026;
enum uint GL_HISTOGRAM_FORMAT_EXT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
enum uint GL_HISTOGRAM_SINK_EXT = 0x802D;
enum uint GL_MINMAX_EXT = 0x802E;
enum uint GL_MINMAX_FORMAT_EXT = 0x802F;
enum uint GL_MINMAX_SINK_EXT = 0x8030;
enum uint GL_TABLE_TOO_LARGE_EXT = 0x8031;
enum uint GL_IUI_V2F_EXT = 0x81AD;
enum uint GL_IUI_V3F_EXT = 0x81AE;
enum uint GL_IUI_N3F_V2F_EXT = 0x81AF;
enum uint GL_IUI_N3F_V3F_EXT = 0x81B0;
enum uint GL_T2F_IUI_V2F_EXT = 0x81B1;
enum uint GL_T2F_IUI_V3F_EXT = 0x81B2;
enum uint GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
enum uint GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
enum uint GL_INDEX_TEST_EXT = 0x81B5;
enum uint GL_INDEX_TEST_FUNC_EXT = 0x81B6;
enum uint GL_INDEX_TEST_REF_EXT = 0x81B7;
enum uint GL_INDEX_MATERIAL_EXT = 0x81B8;
enum uint GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
enum uint GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
enum uint GL_FRAGMENT_MATERIAL_EXT = 0x8349;
enum uint GL_FRAGMENT_NORMAL_EXT = 0x834A;
enum uint GL_FRAGMENT_COLOR_EXT = 0x834C;
enum uint GL_ATTENUATION_EXT = 0x834D;
enum uint GL_SHADOW_ATTENUATION_EXT = 0x834E;
enum uint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
enum uint GL_TEXTURE_LIGHT_EXT = 0x8350;
enum uint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
enum uint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
enum uint GL_MULTISAMPLE_EXT = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
enum uint GL_SAMPLE_MASK_EXT = 0x80A0;
enum uint GL_1PASS_EXT = 0x80A1;
enum uint GL_2PASS_0_EXT = 0x80A2;
enum uint GL_2PASS_1_EXT = 0x80A3;
enum uint GL_4PASS_0_EXT = 0x80A4;
enum uint GL_4PASS_1_EXT = 0x80A5;
enum uint GL_4PASS_2_EXT = 0x80A6;
enum uint GL_4PASS_3_EXT = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_EXT = 0x80A8;
enum uint GL_SAMPLES_EXT = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
enum uint GL_SAMPLE_PATTERN_EXT = 0x80AC;
enum uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
enum uint GL_DEPTH_STENCIL_EXT = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
enum uint GL_DEPTH24_STENCIL8_EXT = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
enum uint GL_R11F_G11F_B10F_EXT = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
enum uint GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
enum uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
enum uint GL_COLOR_INDEX1_EXT = 0x80E2;
enum uint GL_COLOR_INDEX2_EXT = 0x80E3;
enum uint GL_COLOR_INDEX4_EXT = 0x80E4;
enum uint GL_COLOR_INDEX8_EXT = 0x80E5;
enum uint GL_COLOR_INDEX12_EXT = 0x80E6;
enum uint GL_COLOR_INDEX16_EXT = 0x80E7;
enum uint GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
enum uint GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
enum uint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
enum uint GL_PIXEL_MAG_FILTER_EXT = 0x8331;
enum uint GL_PIXEL_MIN_FILTER_EXT = 0x8332;
enum uint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
enum uint GL_CUBIC_EXT = 0x8334;
enum uint GL_AVERAGE_EXT = 0x8335;
enum uint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
enum uint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
enum uint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
enum uint GL_POINT_SIZE_MIN_EXT = 0x8126;
enum uint GL_POINT_SIZE_MAX_EXT = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_EXT = 0x8129;
enum uint GL_POLYGON_OFFSET_EXT = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
enum uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
enum uint GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
enum uint GL_PROVOKING_VERTEX_EXT = 0x8E4F;
enum uint GL_RASTER_MULTISAMPLE_EXT = 0x9327;
enum uint GL_RASTER_SAMPLES_EXT = 0x9328;
enum uint GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
enum uint GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
enum uint GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
enum uint GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
enum uint GL_RESCALE_NORMAL_EXT = 0x803A;
enum uint GL_COLOR_SUM_EXT = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
enum uint GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
enum uint GL_VERTEX_SHADER_BIT_EXT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002;
enum uint GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE_EXT = 0x8258;
enum uint GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
enum uint GL_SINGLE_COLOR_EXT = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
enum uint GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
enum uint GL_IMAGE_1D_EXT = 0x904C;
enum uint GL_IMAGE_2D_EXT = 0x904D;
enum uint GL_IMAGE_3D_EXT = 0x904E;
enum uint GL_IMAGE_2D_RECT_EXT = 0x904F;
enum uint GL_IMAGE_CUBE_EXT = 0x9050;
enum uint GL_IMAGE_BUFFER_EXT = 0x9051;
enum uint GL_IMAGE_1D_ARRAY_EXT = 0x9052;
enum uint GL_IMAGE_2D_ARRAY_EXT = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
enum uint GL_INT_IMAGE_1D_EXT = 0x9057;
enum uint GL_INT_IMAGE_2D_EXT = 0x9058;
enum uint GL_INT_IMAGE_3D_EXT = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
enum uint GL_INT_IMAGE_CUBE_EXT = 0x905B;
enum uint GL_INT_IMAGE_BUFFER_EXT = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
enum uint GL_STENCIL_TAG_BITS_EXT = 0x88F2;
enum uint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
enum uint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
enum uint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
enum uint GL_INCR_WRAP_EXT = 0x8507;
enum uint GL_DECR_WRAP_EXT = 0x8508;
enum uint GL_ALPHA4_EXT = 0x803B;
enum uint GL_ALPHA8_EXT = 0x803C;
enum uint GL_ALPHA12_EXT = 0x803D;
enum uint GL_ALPHA16_EXT = 0x803E;
enum uint GL_LUMINANCE4_EXT = 0x803F;
enum uint GL_LUMINANCE8_EXT = 0x8040;
enum uint GL_LUMINANCE12_EXT = 0x8041;
enum uint GL_LUMINANCE16_EXT = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
enum uint GL_INTENSITY_EXT = 0x8049;
enum uint GL_INTENSITY4_EXT = 0x804A;
enum uint GL_INTENSITY8_EXT = 0x804B;
enum uint GL_INTENSITY12_EXT = 0x804C;
enum uint GL_INTENSITY16_EXT = 0x804D;
enum uint GL_RGB2_EXT = 0x804E;
enum uint GL_RGB4_EXT = 0x804F;
enum uint GL_RGB5_EXT = 0x8050;
enum uint GL_RGB8_EXT = 0x8051;
enum uint GL_RGB10_EXT = 0x8052;
enum uint GL_RGB12_EXT = 0x8053;
enum uint GL_RGB16_EXT = 0x8054;
enum uint GL_RGBA2_EXT = 0x8055;
enum uint GL_RGBA4_EXT = 0x8056;
enum uint GL_RGB5_A1_EXT = 0x8057;
enum uint GL_RGBA8_EXT = 0x8058;
enum uint GL_RGB10_A2_EXT = 0x8059;
enum uint GL_RGBA12_EXT = 0x805A;
enum uint GL_RGBA16_EXT = 0x805B;
enum uint GL_TEXTURE_RED_SIZE_EXT = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
enum uint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
enum uint GL_REPLACE_EXT = 0x8062;
enum uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
enum uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
enum uint GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
enum uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
enum uint GL_TEXTURE_3D_EXT = 0x806F;
enum uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
enum uint GL_TEXTURE_DEPTH_EXT = 0x8071;
enum uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
enum uint GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
enum uint GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
enum uint GL_TEXTURE_BUFFER_EXT = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
enum uint GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
enum uint GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
enum uint GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
enum uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
enum uint GL_NORMAL_MAP_EXT = 0x8511;
enum uint GL_REFLECTION_MAP_EXT = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
enum uint GL_COMBINE_EXT = 0x8570;
enum uint GL_COMBINE_RGB_EXT = 0x8571;
enum uint GL_COMBINE_ALPHA_EXT = 0x8572;
enum uint GL_RGB_SCALE_EXT = 0x8573;
enum uint GL_ADD_SIGNED_EXT = 0x8574;
enum uint GL_INTERPOLATE_EXT = 0x8575;
enum uint GL_CONSTANT_EXT = 0x8576;
enum uint GL_PRIMARY_COLOR_EXT = 0x8577;
enum uint GL_PREVIOUS_EXT = 0x8578;
enum uint GL_SOURCE0_RGB_EXT = 0x8580;
enum uint GL_SOURCE1_RGB_EXT = 0x8581;
enum uint GL_SOURCE2_RGB_EXT = 0x8582;
enum uint GL_SOURCE0_ALPHA_EXT = 0x8588;
enum uint GL_SOURCE1_ALPHA_EXT = 0x8589;
enum uint GL_SOURCE2_ALPHA_EXT = 0x858A;
enum uint GL_OPERAND0_RGB_EXT = 0x8590;
enum uint GL_OPERAND1_RGB_EXT = 0x8591;
enum uint GL_OPERAND2_RGB_EXT = 0x8592;
enum uint GL_OPERAND0_ALPHA_EXT = 0x8598;
enum uint GL_OPERAND1_ALPHA_EXT = 0x8599;
enum uint GL_OPERAND2_ALPHA_EXT = 0x859A;
enum uint GL_DOT3_RGB_EXT = 0x8740;
enum uint GL_DOT3_RGBA_EXT = 0x8741;
enum uint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
enum uint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
enum uint GL_RGBA32UI_EXT = 0x8D70;
enum uint GL_RGB32UI_EXT = 0x8D71;
enum uint GL_ALPHA32UI_EXT = 0x8D72;
enum uint GL_INTENSITY32UI_EXT = 0x8D73;
enum uint GL_LUMINANCE32UI_EXT = 0x8D74;
enum uint GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
enum uint GL_RGBA16UI_EXT = 0x8D76;
enum uint GL_RGB16UI_EXT = 0x8D77;
enum uint GL_ALPHA16UI_EXT = 0x8D78;
enum uint GL_INTENSITY16UI_EXT = 0x8D79;
enum uint GL_LUMINANCE16UI_EXT = 0x8D7A;
enum uint GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
enum uint GL_RGBA8UI_EXT = 0x8D7C;
enum uint GL_RGB8UI_EXT = 0x8D7D;
enum uint GL_ALPHA8UI_EXT = 0x8D7E;
enum uint GL_INTENSITY8UI_EXT = 0x8D7F;
enum uint GL_LUMINANCE8UI_EXT = 0x8D80;
enum uint GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
enum uint GL_RGBA32I_EXT = 0x8D82;
enum uint GL_RGB32I_EXT = 0x8D83;
enum uint GL_ALPHA32I_EXT = 0x8D84;
enum uint GL_INTENSITY32I_EXT = 0x8D85;
enum uint GL_LUMINANCE32I_EXT = 0x8D86;
enum uint GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
enum uint GL_RGBA16I_EXT = 0x8D88;
enum uint GL_RGB16I_EXT = 0x8D89;
enum uint GL_ALPHA16I_EXT = 0x8D8A;
enum uint GL_INTENSITY16I_EXT = 0x8D8B;
enum uint GL_LUMINANCE16I_EXT = 0x8D8C;
enum uint GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
enum uint GL_RGBA8I_EXT = 0x8D8E;
enum uint GL_RGB8I_EXT = 0x8D8F;
enum uint GL_ALPHA8I_EXT = 0x8D90;
enum uint GL_INTENSITY8I_EXT = 0x8D91;
enum uint GL_LUMINANCE8I_EXT = 0x8D92;
enum uint GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
enum uint GL_RED_INTEGER_EXT = 0x8D94;
enum uint GL_GREEN_INTEGER_EXT = 0x8D95;
enum uint GL_BLUE_INTEGER_EXT = 0x8D96;
enum uint GL_ALPHA_INTEGER_EXT = 0x8D97;
enum uint GL_RGB_INTEGER_EXT = 0x8D98;
enum uint GL_RGBA_INTEGER_EXT = 0x8D99;
enum uint GL_BGR_INTEGER_EXT = 0x8D9A;
enum uint GL_BGRA_INTEGER_EXT = 0x8D9B;
enum uint GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
enum uint GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
enum uint GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
enum uint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
enum uint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
enum uint GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
enum uint GL_MIRROR_CLAMP_EXT = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
enum uint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
enum uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
enum uint GL_TEXTURE_RESIDENT_EXT = 0x8067;
enum uint GL_TEXTURE_1D_BINDING_EXT = 0x8068;
enum uint GL_TEXTURE_2D_BINDING_EXT = 0x8069;
enum uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
enum uint GL_PERTURB_EXT = 0x85AE;
enum uint GL_TEXTURE_NORMAL_EXT = 0x85AF;
enum uint GL_SRGB_EXT = 0x8C40;
enum uint GL_SRGB8_EXT = 0x8C41;
enum uint GL_SRGB_ALPHA_EXT = 0x8C42;
enum uint GL_SRGB8_ALPHA8_EXT = 0x8C43;
enum uint GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
enum uint GL_SLUMINANCE_EXT = 0x8C46;
enum uint GL_SLUMINANCE8_EXT = 0x8C47;
enum uint GL_COMPRESSED_SRGB_EXT = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
enum uint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
enum uint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
enum uint GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
enum uint GL_DECODE_EXT = 0x8A49;
enum uint GL_SKIP_DECODE_EXT = 0x8A4A;
enum uint GL_RGB9_E5_EXT = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
enum uint GL_ALPHA_SNORM = 0x9010;
enum uint GL_LUMINANCE_SNORM = 0x9011;
enum uint GL_LUMINANCE_ALPHA_SNORM = 0x9012;
enum uint GL_INTENSITY_SNORM = 0x9013;
enum uint GL_ALPHA8_SNORM = 0x9014;
enum uint GL_LUMINANCE8_SNORM = 0x9015;
enum uint GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
enum uint GL_INTENSITY8_SNORM = 0x9017;
enum uint GL_ALPHA16_SNORM = 0x9018;
enum uint GL_LUMINANCE16_SNORM = 0x9019;
enum uint GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
enum uint GL_INTENSITY16_SNORM = 0x901B;
enum uint GL_RED_SNORM = 0x8F90;
enum uint GL_RG_SNORM = 0x8F91;
enum uint GL_RGB_SNORM = 0x8F92;
enum uint GL_RGBA_SNORM = 0x8F93;
enum uint GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
enum uint GL_TIME_ELAPSED_EXT = 0x88BF;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
enum uint GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
enum uint GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_EXT = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
enum uint GL_VERTEX_ARRAY_EXT = 0x8074;
enum uint GL_NORMAL_ARRAY_EXT = 0x8075;
enum uint GL_COLOR_ARRAY_EXT = 0x8076;
enum uint GL_INDEX_ARRAY_EXT = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
enum uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
enum uint GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
enum uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
enum uint GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
enum uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
enum uint GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
enum uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
enum uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
enum uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
enum uint GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
enum uint GL_DOUBLE_VEC2_EXT = 0x8FFC;
enum uint GL_DOUBLE_VEC3_EXT = 0x8FFD;
enum uint GL_DOUBLE_VEC4_EXT = 0x8FFE;
enum uint GL_DOUBLE_MAT2_EXT = 0x8F46;
enum uint GL_DOUBLE_MAT3_EXT = 0x8F47;
enum uint GL_DOUBLE_MAT4_EXT = 0x8F48;
enum uint GL_DOUBLE_MAT2x3_EXT = 0x8F49;
enum uint GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
enum uint GL_VERTEX_SHADER_EXT = 0x8780;
enum uint GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
enum uint GL_OP_INDEX_EXT = 0x8782;
enum uint GL_OP_NEGATE_EXT = 0x8783;
enum uint GL_OP_DOT3_EXT = 0x8784;
enum uint GL_OP_DOT4_EXT = 0x8785;
enum uint GL_OP_MUL_EXT = 0x8786;
enum uint GL_OP_ADD_EXT = 0x8787;
enum uint GL_OP_MADD_EXT = 0x8788;
enum uint GL_OP_FRAC_EXT = 0x8789;
enum uint GL_OP_MAX_EXT = 0x878A;
enum uint GL_OP_MIN_EXT = 0x878B;
enum uint GL_OP_SET_GE_EXT = 0x878C;
enum uint GL_OP_SET_LT_EXT = 0x878D;
enum uint GL_OP_CLAMP_EXT = 0x878E;
enum uint GL_OP_FLOOR_EXT = 0x878F;
enum uint GL_OP_ROUND_EXT = 0x8790;
enum uint GL_OP_EXP_BASE_2_EXT = 0x8791;
enum uint GL_OP_LOG_BASE_2_EXT = 0x8792;
enum uint GL_OP_POWER_EXT = 0x8793;
enum uint GL_OP_RECIP_EXT = 0x8794;
enum uint GL_OP_RECIP_SQRT_EXT = 0x8795;
enum uint GL_OP_SUB_EXT = 0x8796;
enum uint GL_OP_CROSS_PRODUCT_EXT = 0x8797;
enum uint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
enum uint GL_OP_MOV_EXT = 0x8799;
enum uint GL_OUTPUT_VERTEX_EXT = 0x879A;
enum uint GL_OUTPUT_COLOR0_EXT = 0x879B;
enum uint GL_OUTPUT_COLOR1_EXT = 0x879C;
enum uint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
enum uint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
enum uint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
enum uint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
enum uint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
enum uint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
enum uint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
enum uint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
enum uint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
enum uint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
enum uint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
enum uint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
enum uint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
enum uint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
enum uint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
enum uint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
enum uint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
enum uint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
enum uint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
enum uint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
enum uint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
enum uint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
enum uint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
enum uint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
enum uint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
enum uint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
enum uint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
enum uint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
enum uint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
enum uint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
enum uint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
enum uint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
enum uint GL_OUTPUT_FOG_EXT = 0x87BD;
enum uint GL_SCALAR_EXT = 0x87BE;
enum uint GL_VECTOR_EXT = 0x87BF;
enum uint GL_MATRIX_EXT = 0x87C0;
enum uint GL_VARIANT_EXT = 0x87C1;
enum uint GL_INVARIANT_EXT = 0x87C2;
enum uint GL_LOCAL_CONSTANT_EXT = 0x87C3;
enum uint GL_LOCAL_EXT = 0x87C4;
enum uint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
enum uint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
enum uint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
enum uint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
enum uint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
enum uint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
enum uint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
enum uint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
enum uint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
enum uint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
enum uint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
enum uint GL_X_EXT = 0x87D5;
enum uint GL_Y_EXT = 0x87D6;
enum uint GL_Z_EXT = 0x87D7;
enum uint GL_W_EXT = 0x87D8;
enum uint GL_NEGATIVE_X_EXT = 0x87D9;
enum uint GL_NEGATIVE_Y_EXT = 0x87DA;
enum uint GL_NEGATIVE_Z_EXT = 0x87DB;
enum uint GL_NEGATIVE_W_EXT = 0x87DC;
enum uint GL_ZERO_EXT = 0x87DD;
enum uint GL_ONE_EXT = 0x87DE;
enum uint GL_NEGATIVE_ONE_EXT = 0x87DF;
enum uint GL_NORMALIZED_RANGE_EXT = 0x87E0;
enum uint GL_FULL_RANGE_EXT = 0x87E1;
enum uint GL_CURRENT_VERTEX_EXT = 0x87E2;
enum uint GL_MVP_MATRIX_EXT = 0x87E3;
enum uint GL_VARIANT_VALUE_EXT = 0x87E4;
enum uint GL_VARIANT_DATATYPE_EXT = 0x87E5;
enum uint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
enum uint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
enum uint GL_VARIANT_ARRAY_EXT = 0x87E8;
enum uint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
enum uint GL_INVARIANT_VALUE_EXT = 0x87EA;
enum uint GL_INVARIANT_DATATYPE_EXT = 0x87EB;
enum uint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
enum uint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
enum uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
enum uint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
enum uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
enum uint GL_MODELVIEW1_MATRIX_EXT = 0x8506;
enum uint GL_VERTEX_WEIGHTING_EXT = 0x8509;
enum uint GL_MODELVIEW0_EXT = 0x1700;
enum uint GL_MODELVIEW1_EXT = 0x850A;
enum uint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
enum uint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
enum uint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
enum uint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
enum uint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
enum uint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
enum uint GL_SYNC_X11_FENCE_EXT = 0x90E1;
enum uint GL_IGNORE_BORDER_HP = 0x8150;
enum uint GL_CONSTANT_BORDER_HP = 0x8151;
enum uint GL_REPLICATE_BORDER_HP = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
enum uint GL_IMAGE_SCALE_X_HP = 0x8155;
enum uint GL_IMAGE_SCALE_Y_HP = 0x8156;
enum uint GL_IMAGE_TRANSLATE_X_HP = 0x8157;
enum uint GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
enum uint GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
enum uint GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
enum uint GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
enum uint GL_IMAGE_MAG_FILTER_HP = 0x815C;
enum uint GL_IMAGE_MIN_FILTER_HP = 0x815D;
enum uint GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
enum uint GL_CUBIC_HP = 0x815F;
enum uint GL_AVERAGE_HP = 0x8160;
enum uint GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
enum uint GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
enum uint GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
enum uint GL_OCCLUSION_TEST_HP = 0x8165;
enum uint GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
enum uint GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
enum uint GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
enum uint GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
enum uint GL_CULL_VERTEX_IBM = 103050;
enum uint GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
enum uint GL_ALL_STATIC_DATA_IBM = 103060;
enum uint GL_STATIC_VERTEX_ARRAY_IBM = 103061;
enum uint GL_MIRRORED_REPEAT_IBM = 0x8370;
enum uint GL_VERTEX_ARRAY_LIST_IBM = 103070;
enum uint GL_NORMAL_ARRAY_LIST_IBM = 103071;
enum uint GL_COLOR_ARRAY_LIST_IBM = 103072;
enum uint GL_INDEX_ARRAY_LIST_IBM = 103073;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
enum uint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
enum uint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
enum uint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
enum uint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
enum uint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
enum uint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
enum uint GL_RED_MIN_CLAMP_INGR = 0x8560;
enum uint GL_GREEN_MIN_CLAMP_INGR = 0x8561;
enum uint GL_BLUE_MIN_CLAMP_INGR = 0x8562;
enum uint GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
enum uint GL_RED_MAX_CLAMP_INGR = 0x8564;
enum uint GL_GREEN_MAX_CLAMP_INGR = 0x8565;
enum uint GL_BLUE_MAX_CLAMP_INGR = 0x8566;
enum uint GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
enum uint GL_INTERLACE_READ_INGR = 0x8568;
enum uint GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
enum uint GL_LAYOUT_DEFAULT_INTEL = 0;
enum uint GL_LAYOUT_LINEAR_INTEL = 1;
enum uint GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
enum uint GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
enum uint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
enum uint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
enum uint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
enum uint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
enum uint GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
enum uint GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
enum uint GL_PERFQUERY_WAIT_INTEL = 0x83FB;
enum uint GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
enum uint GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
enum uint GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
enum uint GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
enum uint GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
enum uint GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
enum uint GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
enum uint GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
enum uint GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
enum uint GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
enum uint GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
enum uint GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
enum uint GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
enum uint GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
enum uint GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
enum uint GL_MULTIPLY_KHR = 0x9294;
enum uint GL_SCREEN_KHR = 0x9295;
enum uint GL_OVERLAY_KHR = 0x9296;
enum uint GL_DARKEN_KHR = 0x9297;
enum uint GL_LIGHTEN_KHR = 0x9298;
enum uint GL_COLORDODGE_KHR = 0x9299;
enum uint GL_COLORBURN_KHR = 0x929A;
enum uint GL_HARDLIGHT_KHR = 0x929B;
enum uint GL_SOFTLIGHT_KHR = 0x929C;
enum uint GL_DIFFERENCE_KHR = 0x929E;
enum uint GL_EXCLUSION_KHR = 0x92A0;
enum uint GL_HSL_HUE_KHR = 0x92AD;
enum uint GL_HSL_SATURATION_KHR = 0x92AE;
enum uint GL_HSL_COLOR_KHR = 0x92AF;
enum uint GL_HSL_LUMINOSITY_KHR = 0x92B0;
enum uint GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
enum uint GL_DEBUG_SOURCE_API_KHR = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_KHR = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_KHR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_KHR = 0x8251;
enum uint GL_DEBUG_TYPE_MARKER_KHR = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
enum uint GL_BUFFER_KHR = 0x82E0;
enum uint GL_SHADER_KHR = 0x82E1;
enum uint GL_PROGRAM_KHR = 0x82E2;
enum uint GL_VERTEX_ARRAY_KHR = 0x8074;
enum uint GL_QUERY_KHR = 0x82E3;
enum uint GL_PROGRAM_PIPELINE_KHR = 0x82E4;
enum uint GL_SAMPLER_KHR = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH_KHR = 0x82E8;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_KHR = 0x9148;
enum uint GL_DEBUG_OUTPUT_KHR = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
enum uint GL_STACK_OVERFLOW_KHR = 0x0503;
enum uint GL_STACK_UNDERFLOW_KHR = 0x0504;
enum uint GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
enum uint GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
enum uint GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
enum uint GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_KHR = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_KHR = 0x8261;
enum uint GL_CONTEXT_LOST_KHR = 0x0507;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
enum uint GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
enum uint GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
enum uint GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
enum uint GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
enum uint GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
enum uint GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
enum uint GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
enum uint GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
enum uint GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
enum uint GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
enum uint GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
enum uint GL_TEXTURE_1D_STACK_MESAX = 0x8759;
enum uint GL_TEXTURE_2D_STACK_MESAX = 0x875A;
enum uint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
enum uint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
enum uint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
enum uint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
enum uint GL_PACK_INVERT_MESA = 0x8758;
enum uint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
enum uint GL_YCBCR_MESA = 0x8757;
enum uint GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
enum uint GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
enum uint GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
enum uint GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
enum uint GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
enum uint GL_BLEND_OVERLAP_NV = 0x9281;
enum uint GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
enum uint GL_BLUE_NV = 0x1905;
enum uint GL_COLORBURN_NV = 0x929A;
enum uint GL_COLORDODGE_NV = 0x9299;
enum uint GL_CONJOINT_NV = 0x9284;
enum uint GL_CONTRAST_NV = 0x92A1;
enum uint GL_DARKEN_NV = 0x9297;
enum uint GL_DIFFERENCE_NV = 0x929E;
enum uint GL_DISJOINT_NV = 0x9283;
enum uint GL_DST_ATOP_NV = 0x928F;
enum uint GL_DST_IN_NV = 0x928B;
enum uint GL_DST_NV = 0x9287;
enum uint GL_DST_OUT_NV = 0x928D;
enum uint GL_DST_OVER_NV = 0x9289;
enum uint GL_EXCLUSION_NV = 0x92A0;
enum uint GL_GREEN_NV = 0x1904;
enum uint GL_HARDLIGHT_NV = 0x929B;
enum uint GL_HARDMIX_NV = 0x92A9;
enum uint GL_HSL_COLOR_NV = 0x92AF;
enum uint GL_HSL_HUE_NV = 0x92AD;
enum uint GL_HSL_LUMINOSITY_NV = 0x92B0;
enum uint GL_HSL_SATURATION_NV = 0x92AE;
enum uint GL_INVERT_OVG_NV = 0x92B4;
enum uint GL_INVERT_RGB_NV = 0x92A3;
enum uint GL_LIGHTEN_NV = 0x9298;
enum uint GL_LINEARBURN_NV = 0x92A5;
enum uint GL_LINEARDODGE_NV = 0x92A4;
enum uint GL_LINEARLIGHT_NV = 0x92A7;
enum uint GL_MINUS_CLAMPED_NV = 0x92B3;
enum uint GL_MINUS_NV = 0x929F;
enum uint GL_MULTIPLY_NV = 0x9294;
enum uint GL_OVERLAY_NV = 0x9296;
enum uint GL_PINLIGHT_NV = 0x92A8;
enum uint GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
enum uint GL_PLUS_CLAMPED_NV = 0x92B1;
enum uint GL_PLUS_DARKER_NV = 0x9292;
enum uint GL_PLUS_NV = 0x9291;
enum uint GL_RED_NV = 0x1903;
enum uint GL_SCREEN_NV = 0x9295;
enum uint GL_SOFTLIGHT_NV = 0x929C;
enum uint GL_SRC_ATOP_NV = 0x928E;
enum uint GL_SRC_IN_NV = 0x928A;
enum uint GL_SRC_NV = 0x9286;
enum uint GL_SRC_OUT_NV = 0x928C;
enum uint GL_SRC_OVER_NV = 0x9288;
enum uint GL_UNCORRELATED_NV = 0x9282;
enum uint GL_VIVIDLIGHT_NV = 0x92A6;
enum uint GL_XOR_NV = 0x1506;
enum uint GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
enum uint GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
enum uint GL_NOP_COMMAND_NV = 0x0001;
enum uint GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
enum uint GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
enum uint GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
enum uint GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
enum uint GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
enum uint GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
enum uint GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
enum uint GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
enum uint GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
enum uint GL_BLEND_COLOR_COMMAND_NV = 0x000B;
enum uint GL_STENCIL_REF_COMMAND_NV = 0x000C;
enum uint GL_LINE_WIDTH_COMMAND_NV = 0x000D;
enum uint GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
enum uint GL_ALPHA_REF_COMMAND_NV = 0x000F;
enum uint GL_VIEWPORT_COMMAND_NV = 0x0010;
enum uint GL_SCISSOR_COMMAND_NV = 0x0011;
enum uint GL_FRONT_FACE_COMMAND_NV = 0x0012;
enum uint GL_COMPUTE_PROGRAM_NV = 0x90FB;
enum uint GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
enum uint GL_QUERY_WAIT_NV = 0x8E13;
enum uint GL_QUERY_NO_WAIT_NV = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
enum uint GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
enum uint GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
enum uint GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
enum uint GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
enum uint GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
enum uint GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
enum uint GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
enum uint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
enum uint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
enum uint GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
enum uint GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
enum uint GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
enum uint GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
enum uint GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
enum uint GL_DEPTH_CLAMP_NV = 0x864F;
enum uint GL_EVAL_2D_NV = 0x86C0;
enum uint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
enum uint GL_MAP_TESSELLATION_NV = 0x86C2;
enum uint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
enum uint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
enum uint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
enum uint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
enum uint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
enum uint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
enum uint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
enum uint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
enum uint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
enum uint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
enum uint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
enum uint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
enum uint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
enum uint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
enum uint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
enum uint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
enum uint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
enum uint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
enum uint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
enum uint GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
enum uint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
enum uint GL_SAMPLE_POSITION_NV = 0x8E50;
enum uint GL_SAMPLE_MASK_NV = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
enum uint GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
enum uint GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
enum uint GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
enum uint GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
enum uint GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
enum uint GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
enum uint GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
enum uint GL_ALL_COMPLETED_NV = 0x84F2;
enum uint GL_FENCE_STATUS_NV = 0x84F3;
enum uint GL_FENCE_CONDITION_NV = 0x84F4;
enum uint GL_FILL_RECTANGLE_NV = 0x933C;
enum uint GL_FLOAT_R_NV = 0x8880;
enum uint GL_FLOAT_RG_NV = 0x8881;
enum uint GL_FLOAT_RGB_NV = 0x8882;
enum uint GL_FLOAT_RGBA_NV = 0x8883;
enum uint GL_FLOAT_R16_NV = 0x8884;
enum uint GL_FLOAT_R32_NV = 0x8885;
enum uint GL_FLOAT_RG16_NV = 0x8886;
enum uint GL_FLOAT_RG32_NV = 0x8887;
enum uint GL_FLOAT_RGB16_NV = 0x8888;
enum uint GL_FLOAT_RGB32_NV = 0x8889;
enum uint GL_FLOAT_RGBA16_NV = 0x888A;
enum uint GL_FLOAT_RGBA32_NV = 0x888B;
enum uint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
enum uint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
enum uint GL_FLOAT_RGBA_MODE_NV = 0x888E;
enum uint GL_FOG_DISTANCE_MODE_NV = 0x855A;
enum uint GL_EYE_RADIAL_NV = 0x855B;
enum uint GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
enum uint GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
enum uint GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
enum uint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
enum uint GL_FRAGMENT_PROGRAM_NV = 0x8870;
enum uint GL_MAX_TEXTURE_COORDS_NV = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
enum uint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
enum uint GL_PROGRAM_ERROR_STRING_NV = 0x8874;
enum uint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
enum uint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
enum uint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
enum uint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
enum uint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
enum uint GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
enum uint GL_COLOR_SAMPLES_NV = 0x8E20;
enum uint GL_DEPTH_SAMPLES_NV = 0x932D;
enum uint GL_STENCIL_SAMPLES_NV = 0x932E;
enum uint GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
enum uint GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
enum uint GL_COVERAGE_MODULATION_NV = 0x9332;
enum uint GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
enum uint GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
enum uint GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
enum uint GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
enum uint GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
enum uint GL_GEOMETRY_PROGRAM_NV = 0x8C26;
enum uint GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
enum uint GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
enum uint GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
enum uint GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
enum uint GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
enum uint GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
enum uint GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
enum uint GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
enum uint GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
enum uint GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
enum uint GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
enum uint GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
enum uint GL_HALF_FLOAT_NV = 0x140B;
enum uint GL_MULTISAMPLES_NV = 0x9371;
enum uint GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
enum uint GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
enum uint GL_CONFORMANT_NV = 0x9374;
enum uint GL_MAX_SHININESS_NV = 0x8504;
enum uint GL_MAX_SPOT_EXPONENT_NV = 0x8505;
enum uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
enum uint GL_PIXEL_COUNTER_BITS_NV = 0x8864;
enum uint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
enum uint GL_PIXEL_COUNT_NV = 0x8866;
enum uint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
enum uint GL_DEPTH_STENCIL_NV = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_NV = 0x84FA;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
enum uint GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
enum uint GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
enum uint GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
enum uint GL_PATH_FORMAT_SVG_NV = 0x9070;
enum uint GL_PATH_FORMAT_PS_NV = 0x9071;
enum uint GL_STANDARD_FONT_NAME_NV = 0x9072;
enum uint GL_SYSTEM_FONT_NAME_NV = 0x9073;
enum uint GL_FILE_NAME_NV = 0x9074;
enum uint GL_PATH_STROKE_WIDTH_NV = 0x9075;
enum uint GL_PATH_END_CAPS_NV = 0x9076;
enum uint GL_PATH_INITIAL_END_CAP_NV = 0x9077;
enum uint GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
enum uint GL_PATH_JOIN_STYLE_NV = 0x9079;
enum uint GL_PATH_MITER_LIMIT_NV = 0x907A;
enum uint GL_PATH_DASH_CAPS_NV = 0x907B;
enum uint GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
enum uint GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
enum uint GL_PATH_DASH_OFFSET_NV = 0x907E;
enum uint GL_PATH_CLIENT_LENGTH_NV = 0x907F;
enum uint GL_PATH_FILL_MODE_NV = 0x9080;
enum uint GL_PATH_FILL_MASK_NV = 0x9081;
enum uint GL_PATH_FILL_COVER_MODE_NV = 0x9082;
enum uint GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
enum uint GL_PATH_STROKE_MASK_NV = 0x9084;
enum uint GL_COUNT_UP_NV = 0x9088;
enum uint GL_COUNT_DOWN_NV = 0x9089;
enum uint GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
enum uint GL_CONVEX_HULL_NV = 0x908B;
enum uint GL_BOUNDING_BOX_NV = 0x908D;
enum uint GL_TRANSLATE_X_NV = 0x908E;
enum uint GL_TRANSLATE_Y_NV = 0x908F;
enum uint GL_TRANSLATE_2D_NV = 0x9090;
enum uint GL_TRANSLATE_3D_NV = 0x9091;
enum uint GL_AFFINE_2D_NV = 0x9092;
enum uint GL_AFFINE_3D_NV = 0x9094;
enum uint GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
enum uint GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
enum uint GL_UTF8_NV = 0x909A;
enum uint GL_UTF16_NV = 0x909B;
enum uint GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
enum uint GL_PATH_COMMAND_COUNT_NV = 0x909D;
enum uint GL_PATH_COORD_COUNT_NV = 0x909E;
enum uint GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
enum uint GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
enum uint GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
enum uint GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
enum uint GL_SQUARE_NV = 0x90A3;
enum uint GL_ROUND_NV = 0x90A4;
enum uint GL_TRIANGULAR_NV = 0x90A5;
enum uint GL_BEVEL_NV = 0x90A6;
enum uint GL_MITER_REVERT_NV = 0x90A7;
enum uint GL_MITER_TRUNCATE_NV = 0x90A8;
enum uint GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
enum uint GL_USE_MISSING_GLYPH_NV = 0x90AA;
enum uint GL_PATH_ERROR_POSITION_NV = 0x90AB;
enum uint GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
enum uint GL_ADJACENT_PAIRS_NV = 0x90AE;
enum uint GL_FIRST_TO_REST_NV = 0x90AF;
enum uint GL_PATH_GEN_MODE_NV = 0x90B0;
enum uint GL_PATH_GEN_COEFF_NV = 0x90B1;
enum uint GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
enum uint GL_PATH_STENCIL_FUNC_NV = 0x90B7;
enum uint GL_PATH_STENCIL_REF_NV = 0x90B8;
enum uint GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
enum uint GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
enum uint GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
enum uint GL_MOVE_TO_RESETS_NV = 0x90B5;
enum uint GL_MOVE_TO_CONTINUES_NV = 0x90B6;
enum uint GL_CLOSE_PATH_NV = 0x00;
enum uint GL_MOVE_TO_NV = 0x02;
enum uint GL_RELATIVE_MOVE_TO_NV = 0x03;
enum uint GL_LINE_TO_NV = 0x04;
enum uint GL_RELATIVE_LINE_TO_NV = 0x05;
enum uint GL_HORIZONTAL_LINE_TO_NV = 0x06;
enum uint GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
enum uint GL_VERTICAL_LINE_TO_NV = 0x08;
enum uint GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
enum uint GL_QUADRATIC_CURVE_TO_NV = 0x0A;
enum uint GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
enum uint GL_CUBIC_CURVE_TO_NV = 0x0C;
enum uint GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
enum uint GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
enum uint GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
enum uint GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
enum uint GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
enum uint GL_SMALL_CCW_ARC_TO_NV = 0x12;
enum uint GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
enum uint GL_SMALL_CW_ARC_TO_NV = 0x14;
enum uint GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
enum uint GL_LARGE_CCW_ARC_TO_NV = 0x16;
enum uint GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
enum uint GL_LARGE_CW_ARC_TO_NV = 0x18;
enum uint GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
enum uint GL_RESTART_PATH_NV = 0xF0;
enum uint GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
enum uint GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
enum uint GL_RECT_NV = 0xF6;
enum uint GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
enum uint GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
enum uint GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
enum uint GL_ARC_TO_NV = 0xFE;
enum uint GL_RELATIVE_ARC_TO_NV = 0xFF;
enum uint GL_BOLD_BIT_NV = 0x01;
enum uint GL_ITALIC_BIT_NV = 0x02;
enum uint GL_GLYPH_WIDTH_BIT_NV = 0x01;
enum uint GL_GLYPH_HEIGHT_BIT_NV = 0x02;
enum uint GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
enum uint GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
enum uint GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
enum uint GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
enum uint GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
enum uint GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
enum uint GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
enum uint GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
enum uint GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
enum uint GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
enum uint GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
enum uint GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
enum uint GL_FONT_ASCENDER_BIT_NV = 0x00200000;
enum uint GL_FONT_DESCENDER_BIT_NV = 0x00400000;
enum uint GL_FONT_HEIGHT_BIT_NV = 0x00800000;
enum uint GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
enum uint GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
enum uint GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
enum uint GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
enum uint GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
enum uint GL_ROUNDED_RECT_NV = 0xE8;
enum uint GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
enum uint GL_ROUNDED_RECT2_NV = 0xEA;
enum uint GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
enum uint GL_ROUNDED_RECT4_NV = 0xEC;
enum uint GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
enum uint GL_ROUNDED_RECT8_NV = 0xEE;
enum uint GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
enum uint GL_RELATIVE_RECT_NV = 0xF7;
enum uint GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
enum uint GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
enum uint GL_FONT_UNAVAILABLE_NV = 0x936A;
enum uint GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
enum uint GL_CONIC_CURVE_TO_NV = 0x1A;
enum uint GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
enum uint GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
enum uint GL_STANDARD_FONT_FORMAT_NV = 0x936C;
enum uint GL_2_BYTES_NV = 0x1407;
enum uint GL_3_BYTES_NV = 0x1408;
enum uint GL_4_BYTES_NV = 0x1409;
enum uint GL_EYE_LINEAR_NV = 0x2400;
enum uint GL_OBJECT_LINEAR_NV = 0x2401;
enum uint GL_CONSTANT_NV = 0x8576;
enum uint GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
enum uint GL_PRIMARY_COLOR_NV = 0x852C;
enum uint GL_SECONDARY_COLOR_NV = 0x852D;
enum uint GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
enum uint GL_PATH_PROJECTION_NV = 0x1701;
enum uint GL_PATH_MODELVIEW_NV = 0x1700;
enum uint GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
enum uint GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
enum uint GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
enum uint GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
enum uint GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
enum uint GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
enum uint GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
enum uint GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
enum uint GL_FRAGMENT_INPUT_NV = 0x936D;
enum uint GL_SHARED_EDGE_NV = 0xC0;
enum uint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
enum uint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
enum uint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
enum uint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
enum uint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
enum uint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
enum uint GL_POINT_SPRITE_NV = 0x8861;
enum uint GL_COORD_REPLACE_NV = 0x8862;
enum uint GL_POINT_SPRITE_R_MODE_NV = 0x8863;
enum uint GL_FRAME_NV = 0x8E26;
enum uint GL_FIELDS_NV = 0x8E27;
enum uint GL_CURRENT_TIME_NV = 0x8E28;
enum uint GL_NUM_FILL_STREAMS_NV = 0x8E29;
enum uint GL_PRESENT_TIME_NV = 0x8E2A;
enum uint GL_PRESENT_DURATION_NV = 0x8E2B;
enum uint GL_PRIMITIVE_RESTART_NV = 0x8558;
enum uint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
enum uint GL_REGISTER_COMBINERS_NV = 0x8522;
enum uint GL_VARIABLE_A_NV = 0x8523;
enum uint GL_VARIABLE_B_NV = 0x8524;
enum uint GL_VARIABLE_C_NV = 0x8525;
enum uint GL_VARIABLE_D_NV = 0x8526;
enum uint GL_VARIABLE_E_NV = 0x8527;
enum uint GL_VARIABLE_F_NV = 0x8528;
enum uint GL_VARIABLE_G_NV = 0x8529;
enum uint GL_CONSTANT_COLOR0_NV = 0x852A;
enum uint GL_CONSTANT_COLOR1_NV = 0x852B;
enum uint GL_SPARE0_NV = 0x852E;
enum uint GL_SPARE1_NV = 0x852F;
enum uint GL_DISCARD_NV = 0x8530;
enum uint GL_E_TIMES_F_NV = 0x8531;
enum uint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
enum uint GL_UNSIGNED_IDENTITY_NV = 0x8536;
enum uint GL_UNSIGNED_INVERT_NV = 0x8537;
enum uint GL_EXPAND_NORMAL_NV = 0x8538;
enum uint GL_EXPAND_NEGATE_NV = 0x8539;
enum uint GL_HALF_BIAS_NORMAL_NV = 0x853A;
enum uint GL_HALF_BIAS_NEGATE_NV = 0x853B;
enum uint GL_SIGNED_IDENTITY_NV = 0x853C;
enum uint GL_SIGNED_NEGATE_NV = 0x853D;
enum uint GL_SCALE_BY_TWO_NV = 0x853E;
enum uint GL_SCALE_BY_FOUR_NV = 0x853F;
enum uint GL_SCALE_BY_ONE_HALF_NV = 0x8540;
enum uint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
enum uint GL_COMBINER_INPUT_NV = 0x8542;
enum uint GL_COMBINER_MAPPING_NV = 0x8543;
enum uint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
enum uint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
enum uint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
enum uint GL_COMBINER_MUX_SUM_NV = 0x8547;
enum uint GL_COMBINER_SCALE_NV = 0x8548;
enum uint GL_COMBINER_BIAS_NV = 0x8549;
enum uint GL_COMBINER_AB_OUTPUT_NV = 0x854A;
enum uint GL_COMBINER_CD_OUTPUT_NV = 0x854B;
enum uint GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
enum uint GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
enum uint GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
enum uint GL_COLOR_SUM_CLAMP_NV = 0x854F;
enum uint GL_COMBINER0_NV = 0x8550;
enum uint GL_COMBINER1_NV = 0x8551;
enum uint GL_COMBINER2_NV = 0x8552;
enum uint GL_COMBINER3_NV = 0x8553;
enum uint GL_COMBINER4_NV = 0x8554;
enum uint GL_COMBINER5_NV = 0x8555;
enum uint GL_COMBINER6_NV = 0x8556;
enum uint GL_COMBINER7_NV = 0x8557;
enum uint GL_PER_STAGE_CONSTANTS_NV = 0x8535;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
enum uint GL_SAMPLE_LOCATION_NV = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
enum uint GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
enum uint GL_GPU_ADDRESS_NV = 0x8F34;
enum uint GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
enum uint GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
enum uint GL_WARP_SIZE_NV = 0x9339;
enum uint GL_WARPS_PER_SM_NV = 0x933A;
enum uint GL_SM_COUNT_NV = 0x933B;
enum uint GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
enum uint GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
enum uint GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
enum uint GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
enum uint GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
enum uint GL_EMBOSS_LIGHT_NV = 0x855D;
enum uint GL_EMBOSS_CONSTANT_NV = 0x855E;
enum uint GL_EMBOSS_MAP_NV = 0x855F;
enum uint GL_NORMAL_MAP_NV = 0x8511;
enum uint GL_REFLECTION_MAP_NV = 0x8512;
enum uint GL_COMBINE4_NV = 0x8503;
enum uint GL_SOURCE3_RGB_NV = 0x8583;
enum uint GL_SOURCE3_ALPHA_NV = 0x858B;
enum uint GL_OPERAND3_RGB_NV = 0x8593;
enum uint GL_OPERAND3_ALPHA_NV = 0x859B;
enum uint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
enum uint GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
enum uint GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
enum uint GL_TEXTURE_RECTANGLE_NV = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
enum uint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
enum uint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
enum uint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
enum uint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
enum uint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
enum uint GL_SHADER_CONSISTENT_NV = 0x86DD;
enum uint GL_TEXTURE_SHADER_NV = 0x86DE;
enum uint GL_SHADER_OPERATION_NV = 0x86DF;
enum uint GL_CULL_MODES_NV = 0x86E0;
enum uint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
enum uint GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
enum uint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
enum uint GL_CONST_EYE_NV = 0x86E5;
enum uint GL_PASS_THROUGH_NV = 0x86E6;
enum uint GL_CULL_FRAGMENT_NV = 0x86E7;
enum uint GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
enum uint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
enum uint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
enum uint GL_DOT_PRODUCT_NV = 0x86EC;
enum uint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
enum uint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
enum uint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
enum uint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
enum uint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
enum uint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
enum uint GL_HILO_NV = 0x86F4;
enum uint GL_DSDT_NV = 0x86F5;
enum uint GL_DSDT_MAG_NV = 0x86F6;
enum uint GL_DSDT_MAG_VIB_NV = 0x86F7;
enum uint GL_HILO16_NV = 0x86F8;
enum uint GL_SIGNED_HILO_NV = 0x86F9;
enum uint GL_SIGNED_HILO16_NV = 0x86FA;
enum uint GL_SIGNED_RGBA_NV = 0x86FB;
enum uint GL_SIGNED_RGBA8_NV = 0x86FC;
enum uint GL_SIGNED_RGB_NV = 0x86FE;
enum uint GL_SIGNED_RGB8_NV = 0x86FF;
enum uint GL_SIGNED_LUMINANCE_NV = 0x8701;
enum uint GL_SIGNED_LUMINANCE8_NV = 0x8702;
enum uint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
enum uint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
enum uint GL_SIGNED_ALPHA_NV = 0x8705;
enum uint GL_SIGNED_ALPHA8_NV = 0x8706;
enum uint GL_SIGNED_INTENSITY_NV = 0x8707;
enum uint GL_SIGNED_INTENSITY8_NV = 0x8708;
enum uint GL_DSDT8_NV = 0x8709;
enum uint GL_DSDT8_MAG8_NV = 0x870A;
enum uint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
enum uint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
enum uint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
enum uint GL_HI_SCALE_NV = 0x870E;
enum uint GL_LO_SCALE_NV = 0x870F;
enum uint GL_DS_SCALE_NV = 0x8710;
enum uint GL_DT_SCALE_NV = 0x8711;
enum uint GL_MAGNITUDE_SCALE_NV = 0x8712;
enum uint GL_VIBRANCE_SCALE_NV = 0x8713;
enum uint GL_HI_BIAS_NV = 0x8714;
enum uint GL_LO_BIAS_NV = 0x8715;
enum uint GL_DS_BIAS_NV = 0x8716;
enum uint GL_DT_BIAS_NV = 0x8717;
enum uint GL_MAGNITUDE_BIAS_NV = 0x8718;
enum uint GL_VIBRANCE_BIAS_NV = 0x8719;
enum uint GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
enum uint GL_TEXTURE_HI_SIZE_NV = 0x871B;
enum uint GL_TEXTURE_LO_SIZE_NV = 0x871C;
enum uint GL_TEXTURE_DS_SIZE_NV = 0x871D;
enum uint GL_TEXTURE_DT_SIZE_NV = 0x871E;
enum uint GL_TEXTURE_MAG_SIZE_NV = 0x871F;
enum uint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
enum uint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
enum uint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
enum uint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
enum uint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
enum uint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
enum uint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
enum uint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
enum uint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
enum uint GL_HILO8_NV = 0x885E;
enum uint GL_SIGNED_HILO8_NV = 0x885F;
enum uint GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
enum uint GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
enum uint GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
enum uint GL_TEXTURE_COORD_NV = 0x8C79;
enum uint GL_CLIP_DISTANCE_NV = 0x8C7A;
enum uint GL_VERTEX_ID_NV = 0x8C7B;
enum uint GL_PRIMITIVE_ID_NV = 0x8C7C;
enum uint GL_GENERIC_ATTRIB_NV = 0x8C7D;
enum uint GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
enum uint GL_ACTIVE_VARYINGS_NV = 0x8C81;
enum uint GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
enum uint GL_PRIMITIVES_GENERATED_NV = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_NV = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
enum uint GL_LAYER_NV = 0x8DAA;
enum uint GL_NEXT_BUFFER_NV = -2;
enum uint GL_SKIP_COMPONENTS4_NV = -3;
enum uint GL_SKIP_COMPONENTS3_NV = -4;
enum uint GL_SKIP_COMPONENTS2_NV = -5;
enum uint GL_SKIP_COMPONENTS1_NV = -6;
enum uint GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
enum uint GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
enum uint GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
enum uint GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
enum uint GL_SURFACE_STATE_NV = 0x86EB;
enum uint GL_SURFACE_REGISTERED_NV = 0x86FD;
enum uint GL_SURFACE_MAPPED_NV = 0x8700;
enum uint GL_WRITE_DISCARD_NV = 0x88BE;
enum uint GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
enum uint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
enum uint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
enum uint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
enum uint GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
enum uint GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
enum uint GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
enum uint GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
enum uint GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
enum uint GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
enum uint GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
enum uint GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
enum uint GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
enum uint GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
enum uint GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
enum uint GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
enum uint GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
enum uint GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
enum uint GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
enum uint GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
enum uint GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
enum uint GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
enum uint GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
enum uint GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
enum uint GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
enum uint GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
enum uint GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
enum uint GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
enum uint GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
enum uint GL_VERTEX_PROGRAM_NV = 0x8620;
enum uint GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
enum uint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
enum uint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
enum uint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
enum uint GL_CURRENT_ATTRIB_NV = 0x8626;
enum uint GL_PROGRAM_LENGTH_NV = 0x8627;
enum uint GL_PROGRAM_STRING_NV = 0x8628;
enum uint GL_MODELVIEW_PROJECTION_NV = 0x8629;
enum uint GL_IDENTITY_NV = 0x862A;
enum uint GL_INVERSE_NV = 0x862B;
enum uint GL_TRANSPOSE_NV = 0x862C;
enum uint GL_INVERSE_TRANSPOSE_NV = 0x862D;
enum uint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
enum uint GL_MAX_TRACK_MATRICES_NV = 0x862F;
enum uint GL_MATRIX0_NV = 0x8630;
enum uint GL_MATRIX1_NV = 0x8631;
enum uint GL_MATRIX2_NV = 0x8632;
enum uint GL_MATRIX3_NV = 0x8633;
enum uint GL_MATRIX4_NV = 0x8634;
enum uint GL_MATRIX5_NV = 0x8635;
enum uint GL_MATRIX6_NV = 0x8636;
enum uint GL_MATRIX7_NV = 0x8637;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
enum uint GL_CURRENT_MATRIX_NV = 0x8641;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
enum uint GL_PROGRAM_PARAMETER_NV = 0x8644;
enum uint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
enum uint GL_PROGRAM_TARGET_NV = 0x8646;
enum uint GL_PROGRAM_RESIDENT_NV = 0x8647;
enum uint GL_TRACK_MATRIX_NV = 0x8648;
enum uint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
enum uint GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
enum uint GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
enum uint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
enum uint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
enum uint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
enum uint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
enum uint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
enum uint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
enum uint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
enum uint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
enum uint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
enum uint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
enum uint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
enum uint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
enum uint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
enum uint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
enum uint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
enum uint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
enum uint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
enum uint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
enum uint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
enum uint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
enum uint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
enum uint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
enum uint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
enum uint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
enum uint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
enum uint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
enum uint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
enum uint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
enum uint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
enum uint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
enum uint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
enum uint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
enum uint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
enum uint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
enum uint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
enum uint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
enum uint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
enum uint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
enum uint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
enum uint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
enum uint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
enum uint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
enum uint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
enum uint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
enum uint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
enum uint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
enum uint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
enum uint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
enum uint GL_VIDEO_BUFFER_NV = 0x9020;
enum uint GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
enum uint GL_FIELD_UPPER_NV = 0x9022;
enum uint GL_FIELD_LOWER_NV = 0x9023;
enum uint GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
enum uint GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
enum uint GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
enum uint GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
enum uint GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
enum uint GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
enum uint GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
enum uint GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
enum uint GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
enum uint GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
enum uint GL_PARTIAL_SUCCESS_NV = 0x902E;
enum uint GL_SUCCESS_NV = 0x902F;
enum uint GL_FAILURE_NV = 0x9030;
enum uint GL_YCBYCR8_422_NV = 0x9031;
enum uint GL_YCBAYCR8A_4224_NV = 0x9032;
enum uint GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
enum uint GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
enum uint GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
enum uint GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
enum uint GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
enum uint GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
enum uint GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
enum uint GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
enum uint GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
enum uint GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
enum uint GL_PALETTE4_RGB8_OES = 0x8B90;
enum uint GL_PALETTE4_RGBA8_OES = 0x8B91;
enum uint GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
enum uint GL_PALETTE4_RGBA4_OES = 0x8B93;
enum uint GL_PALETTE4_RGB5_A1_OES = 0x8B94;
enum uint GL_PALETTE8_RGB8_OES = 0x8B95;
enum uint GL_PALETTE8_RGBA8_OES = 0x8B96;
enum uint GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
enum uint GL_PALETTE8_RGBA4_OES = 0x8B98;
enum uint GL_PALETTE8_RGB5_A1_OES = 0x8B99;
enum uint GL_FIXED_OES = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
enum uint GL_INTERLACE_OML = 0x8980;
enum uint GL_INTERLACE_READ_OML = 0x8981;
enum uint GL_PACK_RESAMPLE_OML = 0x8984;
enum uint GL_UNPACK_RESAMPLE_OML = 0x8985;
enum uint GL_RESAMPLE_REPLICATE_OML = 0x8986;
enum uint GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
enum uint GL_RESAMPLE_AVERAGE_OML = 0x8988;
enum uint GL_RESAMPLE_DECIMATE_OML = 0x8989;
enum uint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
enum uint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
enum uint GL_MAX_VIEWS_OVR = 0x9631;
enum uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
enum uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
enum uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
enum uint GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
enum uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
enum uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
enum uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
enum uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
enum uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
enum uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
enum uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
enum uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
enum uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
enum uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
enum uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
enum uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
enum uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
enum uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
enum uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
enum uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
enum uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
enum uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
enum uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
enum uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
enum uint GL_COLOR3_BIT_PGI = 0x00010000;
enum uint GL_COLOR4_BIT_PGI = 0x00020000;
enum uint GL_EDGEFLAG_BIT_PGI = 0x00040000;
enum uint GL_INDEX_BIT_PGI = 0x00080000;
enum uint GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
enum uint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
enum uint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
enum uint GL_MAT_EMISSION_BIT_PGI = 0x00800000;
enum uint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
enum uint GL_MAT_SHININESS_BIT_PGI = 0x02000000;
enum uint GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
enum uint GL_NORMAL_BIT_PGI = 0x08000000;
enum uint GL_TEXCOORD1_BIT_PGI = 0x10000000;
enum uint GL_TEXCOORD2_BIT_PGI = 0x20000000;
enum uint GL_TEXCOORD3_BIT_PGI = 0x40000000;
enum uint GL_TEXCOORD4_BIT_PGI = 0x80000000;
enum uint GL_VERTEX23_BIT_PGI = 0x00000004;
enum uint GL_VERTEX4_BIT_PGI = 0x00000008;
enum uint GL_SCREEN_COORDINATES_REND = 0x8490;
enum uint GL_INVERTED_SCREEN_W_REND = 0x8491;
enum uint GL_RGB_S3TC = 0x83A0;
enum uint GL_RGB4_S3TC = 0x83A1;
enum uint GL_RGBA_S3TC = 0x83A2;
enum uint GL_RGBA4_S3TC = 0x83A3;
enum uint GL_RGBA_DXT5_S3TC = 0x83A4;
enum uint GL_RGBA4_DXT5_S3TC = 0x83A5;
enum uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
enum uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
enum uint GL_LINEAR_DETAIL_SGIS = 0x8097;
enum uint GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
enum uint GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
enum uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
enum uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
enum uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
enum uint GL_FOG_FUNC_SGIS = 0x812A;
enum uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
enum uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
enum uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
enum uint GL_MULTISAMPLE_SGIS = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
enum uint GL_SAMPLE_MASK_SGIS = 0x80A0;
enum uint GL_1PASS_SGIS = 0x80A1;
enum uint GL_2PASS_0_SGIS = 0x80A2;
enum uint GL_2PASS_1_SGIS = 0x80A3;
enum uint GL_4PASS_0_SGIS = 0x80A4;
enum uint GL_4PASS_1_SGIS = 0x80A5;
enum uint GL_4PASS_2_SGIS = 0x80A6;
enum uint GL_4PASS_3_SGIS = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
enum uint GL_SAMPLES_SGIS = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
enum uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
enum uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
enum uint GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
enum uint GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
enum uint GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
enum uint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
enum uint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
enum uint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
enum uint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
enum uint GL_EYE_POINT_SGIS = 0x81F4;
enum uint GL_OBJECT_POINT_SGIS = 0x81F5;
enum uint GL_EYE_LINE_SGIS = 0x81F6;
enum uint GL_OBJECT_LINE_SGIS = 0x81F7;
enum uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
enum uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
enum uint GL_LINEAR_SHARPEN_SGIS = 0x80AD;
enum uint GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
enum uint GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
enum uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
enum uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
enum uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
enum uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
enum uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
enum uint GL_TEXTURE_4D_SGIS = 0x8134;
enum uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
enum uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
enum uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
enum uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
enum uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
enum uint GL_CLAMP_TO_BORDER_SGIS = 0x812D;
enum uint GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
enum uint GL_CLAMP_TO_EDGE_SGIS = 0x812F;
enum uint GL_FILTER4_SGIS = 0x8146;
enum uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
enum uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
enum uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
enum uint GL_DUAL_ALPHA4_SGIS = 0x8110;
enum uint GL_DUAL_ALPHA8_SGIS = 0x8111;
enum uint GL_DUAL_ALPHA12_SGIS = 0x8112;
enum uint GL_DUAL_ALPHA16_SGIS = 0x8113;
enum uint GL_DUAL_LUMINANCE4_SGIS = 0x8114;
enum uint GL_DUAL_LUMINANCE8_SGIS = 0x8115;
enum uint GL_DUAL_LUMINANCE12_SGIS = 0x8116;
enum uint GL_DUAL_LUMINANCE16_SGIS = 0x8117;
enum uint GL_DUAL_INTENSITY4_SGIS = 0x8118;
enum uint GL_DUAL_INTENSITY8_SGIS = 0x8119;
enum uint GL_DUAL_INTENSITY12_SGIS = 0x811A;
enum uint GL_DUAL_INTENSITY16_SGIS = 0x811B;
enum uint GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
enum uint GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
enum uint GL_QUAD_ALPHA4_SGIS = 0x811E;
enum uint GL_QUAD_ALPHA8_SGIS = 0x811F;
enum uint GL_QUAD_LUMINANCE4_SGIS = 0x8120;
enum uint GL_QUAD_LUMINANCE8_SGIS = 0x8121;
enum uint GL_QUAD_INTENSITY4_SGIS = 0x8122;
enum uint GL_QUAD_INTENSITY8_SGIS = 0x8123;
enum uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
enum uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
enum uint GL_ASYNC_MARKER_SGIX = 0x8329;
enum uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
enum uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
enum uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
enum uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
enum uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
enum uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
enum uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
enum uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
enum uint GL_ALPHA_MIN_SGIX = 0x8320;
enum uint GL_ALPHA_MAX_SGIX = 0x8321;
enum uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
enum uint GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
enum uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
enum uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
enum uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
enum uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
enum uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
enum uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
enum uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
enum uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
enum uint GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
enum uint GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
enum uint GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
enum uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
enum uint GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
enum uint GL_FOG_OFFSET_SGIX = 0x8198;
enum uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
enum uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
enum uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
enum uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
enum uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
enum uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
enum uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
enum uint GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
enum uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
enum uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
enum uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
enum uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
enum uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
enum uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
enum uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
enum uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
enum uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
enum uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
enum uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
enum uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
enum uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
enum uint GL_FRAMEZOOM_SGIX = 0x818B;
enum uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
enum uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
enum uint GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
enum uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
enum uint GL_INTERLACE_SGIX = 0x8094;
enum uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
enum uint GL_LIST_PRIORITY_SGIX = 0x8182;
enum uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
enum uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
enum uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
enum uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
enum uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
enum uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
enum uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
enum uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
enum uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
enum uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
enum uint GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
enum uint GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
enum uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
enum uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
enum uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
enum uint GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
enum uint GL_REFERENCE_PLANE_SGIX = 0x817D;
enum uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
enum uint GL_PACK_RESAMPLE_SGIX = 0x842E;
enum uint GL_UNPACK_RESAMPLE_SGIX = 0x842F;
enum uint GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
enum uint GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
enum uint GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
enum uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
enum uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
enum uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
enum uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
enum uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
enum uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
enum uint GL_SPRITE_SGIX = 0x8148;
enum uint GL_SPRITE_MODE_SGIX = 0x8149;
enum uint GL_SPRITE_AXIS_SGIX = 0x814A;
enum uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
enum uint GL_SPRITE_AXIAL_SGIX = 0x814C;
enum uint GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
enum uint GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
enum uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
enum uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
enum uint GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
enum uint GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
enum uint GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
enum uint GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
enum uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
enum uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
enum uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
enum uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
enum uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
enum uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
enum uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
enum uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
enum uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
enum uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
enum uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
enum uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
enum uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
enum uint GL_YCRCB_422_SGIX = 0x81BB;
enum uint GL_YCRCB_444_SGIX = 0x81BC;
enum uint GL_YCRCB_SGIX = 0x8318;
enum uint GL_YCRCBA_SGIX = 0x8319;
enum uint GL_COLOR_MATRIX_SGI = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
enum uint GL_COLOR_TABLE_SGI = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
enum uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
enum uint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
enum uint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
enum uint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
enum uint GL_WRAP_BORDER_SUN = 0x81D4;
enum uint GL_GLOBAL_ALPHA_SUN = 0x81D9;
enum uint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
enum uint GL_QUAD_MESH_SUN = 0x8614;
enum uint GL_TRIANGLE_MESH_SUN = 0x8615;
enum uint GL_SLICE_ACCUM_SUN = 0x85CC;
enum uint GL_RESTART_SUN = 0x0001;
enum uint GL_REPLACE_MIDDLE_SUN = 0x0002;
enum uint GL_REPLACE_OLDEST_SUN = 0x0003;
enum uint GL_TRIANGLE_LIST_SUN = 0x81D7;
enum uint GL_REPLACEMENT_CODE_SUN = 0x81D8;
enum uint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
enum uint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
enum uint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
enum uint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
enum uint GL_R1UI_V3F_SUN = 0x85C4;
enum uint GL_R1UI_C4UB_V3F_SUN = 0x85C5;
enum uint GL_R1UI_C3F_V3F_SUN = 0x85C6;
enum uint GL_R1UI_N3F_V3F_SUN = 0x85C7;
enum uint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
enum uint GL_R1UI_T2F_V3F_SUN = 0x85C9;
enum uint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
enum uint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
enum uint GL_PHONG_WIN = 0x80EA;
enum uint GL_PHONG_HINT_WIN = 0x80EB;
enum uint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;

alias glbfn_glCullFace = void function(GLenum);
alias glbfn_glFrontFace = void function(GLenum);
alias glbfn_glHint = void function(GLenum, GLenum);
alias glbfn_glLineWidth = void function(GLfloat);
alias glbfn_glPointSize = void function(GLfloat);
alias glbfn_glPolygonMode = void function(GLenum, GLenum);
alias glbfn_glScissor = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glTexParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexImage1D = void function(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage2D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glDrawBuffer = void function(GLenum);
alias glbfn_glClear = void function(GLbitfield);
alias glbfn_glClearColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearStencil = void function(GLint);
alias glbfn_glClearDepth = void function(GLdouble);
alias glbfn_glStencilMask = void function(GLuint);
alias glbfn_glColorMask = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDepthMask = void function(GLboolean);
alias glbfn_glDisable = void function(GLenum);
alias glbfn_glEnable = void function(GLenum);
alias glbfn_glFinish = void function();
alias glbfn_glFlush = void function();
alias glbfn_glBlendFunc = void function(GLenum, GLenum);
alias glbfn_glLogicOp = void function(GLenum);
alias glbfn_glStencilFunc = void function(GLenum, GLint, GLuint);
alias glbfn_glStencilOp = void function(GLenum, GLenum, GLenum);
alias glbfn_glDepthFunc = void function(GLenum);
alias glbfn_glPixelStoref = void function(GLenum, GLfloat);
alias glbfn_glPixelStorei = void function(GLenum, GLint);
alias glbfn_glReadBuffer = void function(GLenum);
alias glbfn_glReadPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*);
alias glbfn_glGetBooleanv = void function(GLenum, GLboolean*);
alias glbfn_glGetDoublev = void function(GLenum, GLdouble*);
alias glbfn_glGetError = GLenum function();
alias glbfn_glGetFloatv = void function(GLenum, GLfloat*);
alias glbfn_glGetIntegerv = void function(GLenum, GLint*);
alias glbfn_glGetString = const(char)* function(GLenum);
alias glbfn_glGetTexImage = void function(GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTexParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexLevelParameterfv = void function(GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTexLevelParameteriv = void function(GLenum, GLint, GLenum, GLint*);
alias glbfn_glIsEnabled = GLboolean function(GLenum);
alias glbfn_glDepthRange = void function(GLdouble, GLdouble);
alias glbfn_glViewport = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glNewList = void function(GLuint, GLenum);
alias glbfn_glEndList = void function();
alias glbfn_glCallList = void function(GLuint);
alias glbfn_glCallLists = void function(GLsizei, GLenum, const(void)*);
alias glbfn_glDeleteLists = void function(GLuint, GLsizei);
alias glbfn_glGenLists = GLuint function(GLsizei);
alias glbfn_glListBase = void function(GLuint);
alias glbfn_glBegin = void function(GLenum);
alias glbfn_glBitmap = void function(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const(GLubyte)*);
alias glbfn_glColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glColor3bv = void function(const(GLbyte)*);
alias glbfn_glColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glColor3dv = void function(const(GLdouble)*);
alias glbfn_glColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fv = void function(const(GLfloat)*);
alias glbfn_glColor3i = void function(GLint, GLint, GLint);
alias glbfn_glColor3iv = void function(const(GLint)*);
alias glbfn_glColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glColor3sv = void function(const(GLshort)*);
alias glbfn_glColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glColor3ubv = void function(const(GLubyte)*);
alias glbfn_glColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glColor3uiv = void function(const(GLuint)*);
alias glbfn_glColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glColor3usv = void function(const(GLushort)*);
alias glbfn_glColor4b = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glColor4bv = void function(const(GLbyte)*);
alias glbfn_glColor4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glColor4dv = void function(const(GLdouble)*);
alias glbfn_glColor4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fv = void function(const(GLfloat)*);
alias glbfn_glColor4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glColor4iv = void function(const(GLint)*);
alias glbfn_glColor4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glColor4sv = void function(const(GLshort)*);
alias glbfn_glColor4ub = void function(GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glColor4ubv = void function(const(GLubyte)*);
alias glbfn_glColor4ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColor4uiv = void function(const(GLuint)*);
alias glbfn_glColor4us = void function(GLushort, GLushort, GLushort, GLushort);
alias glbfn_glColor4usv = void function(const(GLushort)*);
alias glbfn_glEdgeFlag = void function(GLboolean);
alias glbfn_glEdgeFlagv = void function(const(GLboolean)*);
alias glbfn_glEnd = void function();
alias glbfn_glIndexd = void function(GLdouble);
alias glbfn_glIndexdv = void function(const(GLdouble)*);
alias glbfn_glIndexf = void function(GLfloat);
alias glbfn_glIndexfv = void function(const(GLfloat)*);
alias glbfn_glIndexi = void function(GLint);
alias glbfn_glIndexiv = void function(const(GLint)*);
alias glbfn_glIndexs = void function(GLshort);
alias glbfn_glIndexsv = void function(const(GLshort)*);
alias glbfn_glNormal3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glNormal3bv = void function(const(GLbyte)*);
alias glbfn_glNormal3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glNormal3dv = void function(const(GLdouble)*);
alias glbfn_glNormal3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fv = void function(const(GLfloat)*);
alias glbfn_glNormal3i = void function(GLint, GLint, GLint);
alias glbfn_glNormal3iv = void function(const(GLint)*);
alias glbfn_glNormal3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glNormal3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos2d = void function(GLdouble, GLdouble);
alias glbfn_glRasterPos2dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos2f = void function(GLfloat, GLfloat);
alias glbfn_glRasterPos2fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos2i = void function(GLint, GLint);
alias glbfn_glRasterPos2iv = void function(const(GLint)*);
alias glbfn_glRasterPos2s = void function(GLshort, GLshort);
alias glbfn_glRasterPos2sv = void function(const(GLshort)*);
alias glbfn_glRasterPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos3dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos3fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos3i = void function(GLint, GLint, GLint);
alias glbfn_glRasterPos3iv = void function(const(GLint)*);
alias glbfn_glRasterPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glRasterPos3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos4dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos4fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRasterPos4iv = void function(const(GLint)*);
alias glbfn_glRasterPos4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRasterPos4sv = void function(const(GLshort)*);
alias glbfn_glRectd = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRectdv = void function(const(GLdouble)*, const(GLdouble)*);
alias glbfn_glRectf = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRectfv = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glRecti = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRectiv = void function(const(GLint)*, const(GLint)*);
alias glbfn_glRects = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRectsv = void function(const(GLshort)*, const(GLshort)*);
alias glbfn_glTexCoord1d = void function(GLdouble);
alias glbfn_glTexCoord1dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord1f = void function(GLfloat);
alias glbfn_glTexCoord1fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord1i = void function(GLint);
alias glbfn_glTexCoord1iv = void function(const(GLint)*);
alias glbfn_glTexCoord1s = void function(GLshort);
alias glbfn_glTexCoord1sv = void function(const(GLshort)*);
alias glbfn_glTexCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glTexCoord2dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glTexCoord2fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord2i = void function(GLint, GLint);
alias glbfn_glTexCoord2iv = void function(const(GLint)*);
alias glbfn_glTexCoord2s = void function(GLshort, GLshort);
alias glbfn_glTexCoord2sv = void function(const(GLshort)*);
alias glbfn_glTexCoord3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord3dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord3fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord3i = void function(GLint, GLint, GLint);
alias glbfn_glTexCoord3iv = void function(const(GLint)*);
alias glbfn_glTexCoord3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glTexCoord3sv = void function(const(GLshort)*);
alias glbfn_glTexCoord4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord4dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glTexCoord4iv = void function(const(GLint)*);
alias glbfn_glTexCoord4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glTexCoord4sv = void function(const(GLshort)*);
alias glbfn_glVertex2d = void function(GLdouble, GLdouble);
alias glbfn_glVertex2dv = void function(const(GLdouble)*);
alias glbfn_glVertex2f = void function(GLfloat, GLfloat);
alias glbfn_glVertex2fv = void function(const(GLfloat)*);
alias glbfn_glVertex2i = void function(GLint, GLint);
alias glbfn_glVertex2iv = void function(const(GLint)*);
alias glbfn_glVertex2s = void function(GLshort, GLshort);
alias glbfn_glVertex2sv = void function(const(GLshort)*);
alias glbfn_glVertex3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex3dv = void function(const(GLdouble)*);
alias glbfn_glVertex3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex3fv = void function(const(GLfloat)*);
alias glbfn_glVertex3i = void function(GLint, GLint, GLint);
alias glbfn_glVertex3iv = void function(const(GLint)*);
alias glbfn_glVertex3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glVertex3sv = void function(const(GLshort)*);
alias glbfn_glVertex4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex4dv = void function(const(GLdouble)*);
alias glbfn_glVertex4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex4fv = void function(const(GLfloat)*);
alias glbfn_glVertex4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glVertex4iv = void function(const(GLint)*);
alias glbfn_glVertex4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertex4sv = void function(const(GLshort)*);
alias glbfn_glClipPlane = void function(GLenum, const(GLdouble)*);
alias glbfn_glColorMaterial = void function(GLenum, GLenum);
alias glbfn_glFogf = void function(GLenum, GLfloat);
alias glbfn_glFogfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glFogi = void function(GLenum, GLint);
alias glbfn_glFogiv = void function(GLenum, const(GLint)*);
alias glbfn_glLightf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glLightfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glLighti = void function(GLenum, GLenum, GLint);
alias glbfn_glLightiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glLightModelf = void function(GLenum, GLfloat);
alias glbfn_glLightModelfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glLightModeli = void function(GLenum, GLint);
alias glbfn_glLightModeliv = void function(GLenum, const(GLint)*);
alias glbfn_glLineStipple = void function(GLint, GLushort);
alias glbfn_glMaterialf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glMaterialfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMateriali = void function(GLenum, GLenum, GLint);
alias glbfn_glMaterialiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPolygonStipple = void function(const(GLubyte)*);
alias glbfn_glShadeModel = void function(GLenum);
alias glbfn_glTexEnvf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexEnvfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexEnvi = void function(GLenum, GLenum, GLint);
alias glbfn_glTexEnviv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexGend = void function(GLenum, GLenum, GLdouble);
alias glbfn_glTexGendv = void function(GLenum, GLenum, const(GLdouble)*);
alias glbfn_glTexGenf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexGenfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexGeni = void function(GLenum, GLenum, GLint);
alias glbfn_glTexGeniv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFeedbackBuffer = void function(GLsizei, GLenum, GLfloat*);
alias glbfn_glSelectBuffer = void function(GLsizei, GLuint*);
alias glbfn_glRenderMode = GLint function(GLenum);
alias glbfn_glInitNames = void function();
alias glbfn_glLoadName = void function(GLuint);
alias glbfn_glPassThrough = void function(GLfloat);
alias glbfn_glPopName = void function();
alias glbfn_glPushName = void function(GLuint);
alias glbfn_glClearAccum = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearIndex = void function(GLfloat);
alias glbfn_glIndexMask = void function(GLuint);
alias glbfn_glAccum = void function(GLenum, GLfloat);
alias glbfn_glPopAttrib = void function();
alias glbfn_glPushAttrib = void function(GLbitfield);
alias glbfn_glMap1d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap1f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMap2d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap2f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapGrid1d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid1f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glMapGrid2d = void function(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid2f = void function(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
alias glbfn_glEvalCoord1d = void function(GLdouble);
alias glbfn_glEvalCoord1dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord1f = void function(GLfloat);
alias glbfn_glEvalCoord1fv = void function(const(GLfloat)*);
alias glbfn_glEvalCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glEvalCoord2dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glEvalCoord2fv = void function(const(GLfloat)*);
alias glbfn_glEvalMesh1 = void function(GLenum, GLint, GLint);
alias glbfn_glEvalPoint1 = void function(GLint);
alias glbfn_glEvalMesh2 = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glEvalPoint2 = void function(GLint, GLint);
alias glbfn_glAlphaFunc = void function(GLenum, GLfloat);
alias glbfn_glPixelZoom = void function(GLfloat, GLfloat);
alias glbfn_glPixelTransferf = void function(GLenum, GLfloat);
alias glbfn_glPixelTransferi = void function(GLenum, GLint);
alias glbfn_glPixelMapfv = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glPixelMapuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glPixelMapusv = void function(GLenum, GLsizei, const(GLushort)*);
alias glbfn_glCopyPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum);
alias glbfn_glDrawPixels = void function(GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetClipPlane = void function(GLenum, GLdouble*);
alias glbfn_glGetLightfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetLightiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapdv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetMapfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMaterialfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMaterialiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelMapfv = void function(GLenum, GLfloat*);
alias glbfn_glGetPixelMapuiv = void function(GLenum, GLuint*);
alias glbfn_glGetPixelMapusv = void function(GLenum, GLushort*);
alias glbfn_glGetPolygonStipple = void function(GLubyte*);
alias glbfn_glGetTexEnvfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexEnviv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexGendv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetTexGenfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexGeniv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsList = GLboolean function(GLuint);
alias glbfn_glFrustum = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glLoadIdentity = void function();
alias glbfn_glLoadMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadMatrixd = void function(const(GLdouble)*);
alias glbfn_glMatrixMode = void function(GLenum);
alias glbfn_glMultMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultMatrixd = void function(const(GLdouble)*);
alias glbfn_glOrtho = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glPopMatrix = void function();
alias glbfn_glPushMatrix = void function();
alias glbfn_glRotated = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRotatef = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glScaled = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glScalef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTranslated = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTranslatef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glDrawArrays = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawElements = void function(GLenum, GLsizei, GLenum, const(void)*);
alias glbfn_glGetPointerv = void function(GLenum, void**);
alias glbfn_glPolygonOffset = void function(GLfloat, GLfloat);
alias glbfn_glCopyTexImage1D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindTexture = void function(GLenum, GLuint);
alias glbfn_glDeleteTextures = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTextures = void function(GLsizei, GLuint*);
alias glbfn_glIsTexture = GLboolean function(GLuint);
alias glbfn_glArrayElement = void function(GLint);
alias glbfn_glColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glDisableClientState = void function(GLenum);
alias glbfn_glEdgeFlagPointer = void function(GLsizei, const(void)*);
alias glbfn_glEnableClientState = void function(GLenum);
alias glbfn_glIndexPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glInterleavedArrays = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glNormalPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glTexCoordPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glAreTexturesResident = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glPrioritizeTextures = void function(GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glIndexub = void function(GLubyte);
alias glbfn_glIndexubv = void function(const(GLubyte)*);
alias glbfn_glPopClientAttrib = void function();
alias glbfn_glPushClientAttrib = void function(GLbitfield);
alias glbfn_glDrawRangeElements = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glTexImage3D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glActiveTexture = void function(GLenum);
alias glbfn_glSampleCoverage = void function(GLfloat, GLboolean);
alias glbfn_glCompressedTexImage3D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1D = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImage = void function(GLenum, GLint, void*);
alias glbfn_glClientActiveTexture = void function(GLenum);
alias glbfn_glMultiTexCoord1d = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1f = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1i = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1s = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2d = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2f = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2i = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2s = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3d = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3f = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3i = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3s = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4d = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4f = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4i = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4s = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4sv = void function(GLenum, const(GLshort)*);
alias glbfn_glLoadTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glBlendFuncSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glMultiDrawArrays = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElements = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glPointParameterf = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glPointParameteri = void function(GLenum, GLint);
alias glbfn_glPointParameteriv = void function(GLenum, const(GLint)*);
alias glbfn_glFogCoordf = void function(GLfloat);
alias glbfn_glFogCoordfv = void function(const(GLfloat)*);
alias glbfn_glFogCoordd = void function(GLdouble);
alias glbfn_glFogCoorddv = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glSecondaryColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bv = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dv = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fv = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3i = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3iv = void function(const(GLint)*);
alias glbfn_glSecondaryColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3sv = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubv = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uiv = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usv = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glWindowPos2d = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos2f = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos2i = void function(GLint, GLint);
alias glbfn_glWindowPos2iv = void function(const(GLint)*);
alias glbfn_glWindowPos2s = void function(GLshort, GLshort);
alias glbfn_glWindowPos2sv = void function(const(GLshort)*);
alias glbfn_glWindowPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos3i = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3iv = void function(const(GLint)*);
alias glbfn_glWindowPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3sv = void function(const(GLshort)*);
alias glbfn_glBlendColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquation = void function(GLenum);
alias glbfn_glGenQueries = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueries = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQuery = GLboolean function(GLuint);
alias glbfn_glBeginQuery = void function(GLenum, GLuint);
alias glbfn_glEndQuery = void function(GLenum);
alias glbfn_glGetQueryiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBindBuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffers = void function(GLsizei, GLuint*);
alias glbfn_glIsBuffer = GLboolean function(GLuint);
alias glbfn_glBufferData = void function(GLenum, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glGetBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, void*);
alias glbfn_glMapBuffer = void* function(GLenum, GLenum);
alias glbfn_glUnmapBuffer = GLboolean function(GLenum);
alias glbfn_glGetBufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointerv = void function(GLenum, GLenum, void**);
alias glbfn_glBlendEquationSeparate = void function(GLenum, GLenum);
alias glbfn_glDrawBuffers = void function(GLsizei, const(GLenum)*);
alias glbfn_glStencilOpSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparate = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glStencilMaskSeparate = void function(GLenum, GLuint);
alias glbfn_glAttachShader = void function(GLuint, GLuint);
alias glbfn_glBindAttribLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glCompileShader = void function(GLuint);
alias glbfn_glCreateProgram = GLuint function();
alias glbfn_glCreateShader = GLuint function(GLenum);
alias glbfn_glDeleteProgram = void function(GLuint);
alias glbfn_glDeleteShader = void function(GLuint);
alias glbfn_glDetachShader = void function(GLuint, GLuint);
alias glbfn_glDisableVertexAttribArray = void function(GLuint);
alias glbfn_glEnableVertexAttribArray = void function(GLuint);
alias glbfn_glGetActiveAttrib = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetActiveUniform = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetAttachedShaders = void function(GLuint, GLsizei, GLsizei*, GLuint*);
alias glbfn_glGetAttribLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetProgramiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetShaderInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderSource = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetUniformfv = void function(GLuint, GLint, GLfloat*);
alias glbfn_glGetUniformiv = void function(GLuint, GLint, GLint*);
alias glbfn_glGetVertexAttribdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgram = GLboolean function(GLuint);
alias glbfn_glIsShader = GLboolean function(GLuint);
alias glbfn_glLinkProgram = void function(GLuint);
alias glbfn_glShaderSource = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glUseProgram = void function(GLuint);
alias glbfn_glUniform1f = void function(GLint, GLfloat);
alias glbfn_glUniform2f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3f = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4f = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1i = void function(GLint, GLint);
alias glbfn_glUniform2i = void function(GLint, GLint, GLint);
alias glbfn_glUniform3i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4i = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glValidateProgram = void function(GLuint);
alias glbfn_glVertexAttrib1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1f = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1s = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2f = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2s = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3f = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3s = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nbv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4Niv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4Nsv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nub = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4Nubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4Nuiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4Nusv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4f = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4s = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointer = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glUniformMatrix2x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix2x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glColorMaski = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetBooleani_v = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glGetIntegeri_v = void function(GLenum, GLuint, GLint*);
alias glbfn_glEnablei = void function(GLenum, GLuint);
alias glbfn_glDisablei = void function(GLenum, GLuint);
alias glbfn_glIsEnabledi = GLboolean function(GLenum, GLuint);
alias glbfn_glBeginTransformFeedback = void function(GLenum);
alias glbfn_glEndTransformFeedback = void function();
alias glbfn_glBindBufferRange = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferBase = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryings = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVarying = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glClampColor = void function(GLenum, GLenum);
alias glbfn_glBeginConditionalRender = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRender = void function();
alias glbfn_glVertexAttribIPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glVertexAttribI1i = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2i = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1ui = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4ui = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glGetUniformuiv = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1ui = void function(GLint, GLuint);
alias glbfn_glUniform2ui = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3ui = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4ui = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glTexParameterIiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuiv = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearBufferiv = void function(GLenum, GLint, const(GLint)*);
alias glbfn_glClearBufferuiv = void function(GLenum, GLint, const(GLuint)*);
alias glbfn_glClearBufferfv = void function(GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearBufferfi = void function(GLenum, GLint, GLfloat, GLint);
alias glbfn_glGetStringi = const(char)* function(GLenum, GLuint);
alias glbfn_glIsRenderbuffer = GLboolean function(GLuint);
alias glbfn_glBindRenderbuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorage = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebuffer = GLboolean function(GLuint);
alias glbfn_glBindFramebuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatus = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3D = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbuffer = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameteriv = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmap = void function(GLenum);
alias glbfn_glBlitFramebuffer = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glFramebufferTextureLayer = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glMapBufferRange = void* function(GLenum, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedBufferRange = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glBindVertexArray = void function(GLuint);
alias glbfn_glDeleteVertexArrays = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArray = GLboolean function(GLuint);
alias glbfn_glDrawArraysInstanced = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstanced = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glTexBuffer = void function(GLenum, GLenum, GLuint);
alias glbfn_glPrimitiveRestartIndex = void function(GLuint);
alias glbfn_glCopyBufferSubData = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glGetUniformIndices = void function(GLuint, GLsizei, const(GLchar*)*, GLuint*);
alias glbfn_glGetActiveUniformsiv = void function(GLuint, GLsizei, const(GLuint)*, GLenum, GLint*);
alias glbfn_glGetActiveUniformName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformBlockIndex = GLuint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveUniformBlockiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveUniformBlockName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glDrawElementsBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawRangeElementsBaseVertex = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawElementsInstancedBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint);
alias glbfn_glMultiDrawElementsBaseVertex = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei, const(GLint)*);
alias glbfn_glProvokingVertex = void function(GLenum);
//alias glbfn_glFenceSync = GLsync function(GLenum, GLbitfield);
//alias glbfn_glIsSync = GLboolean function(GLsync);
//alias glbfn_glDeleteSync = void function(GLsync);
//alias glbfn_glClientWaitSync = GLenum function(GLsync, GLbitfield, GLuint64);
//alias glbfn_glWaitSync = void function(GLsync, GLbitfield, GLuint64);
alias glbfn_glGetInteger64v = void function(GLenum, GLint64*);
//alias glbfn_glGetSynciv = void function(GLsync, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetInteger64i_v = void function(GLenum, GLuint, GLint64*);
alias glbfn_glGetBufferParameteri64v = void function(GLenum, GLenum, GLint64*);
alias glbfn_glFramebufferTexture = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glTexImage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glGetMultisamplefv = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaski = void function(GLuint, GLbitfield);
alias glbfn_glBindFragDataLocationIndexed = void function(GLuint, GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataIndex = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGenSamplers = void function(GLsizei, GLuint*);
alias glbfn_glDeleteSamplers = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsSampler = GLboolean function(GLuint);
alias glbfn_glBindSampler = void function(GLuint, GLuint);
alias glbfn_glSamplerParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glSamplerParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glSamplerParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glSamplerParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glGetSamplerParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetSamplerParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glQueryCounter = void function(GLuint, GLenum);
alias glbfn_glGetQueryObjecti64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64v = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glVertexAttribDivisor = void function(GLuint, GLuint);
alias glbfn_glVertexAttribP1ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP1uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP2ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP2uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP3ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP3uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP4ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP4uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexP2ui = void function(GLenum, GLuint);
alias glbfn_glVertexP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP3ui = void function(GLenum, GLuint);
alias glbfn_glVertexP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP4ui = void function(GLenum, GLuint);
alias glbfn_glVertexP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP1ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP1uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP2ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP3ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP4ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP1ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP1uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP2ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP2uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP3ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP3uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP4ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP4uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glNormalP3ui = void function(GLenum, GLuint);
alias glbfn_glNormalP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP3ui = void function(GLenum, GLuint);
alias glbfn_glColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP4ui = void function(GLenum, GLuint);
alias glbfn_glColorP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glSecondaryColorP3ui = void function(GLenum, GLuint);
alias glbfn_glSecondaryColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMinSampleShading = void function(GLfloat);
alias glbfn_glBlendEquationi = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparatei = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunci = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparatei = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysIndirect = void function(GLenum, const(void)*);
alias glbfn_glDrawElementsIndirect = void function(GLenum, GLenum, const(void)*);
alias glbfn_glUniform1d = void function(GLint, GLdouble);
alias glbfn_glUniform2d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glUniform3d = void function(GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform4d = void function(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform1dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform2dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform3dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform4dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniformMatrix2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glGetUniformdv = void function(GLuint, GLint, GLdouble*);
alias glbfn_glGetSubroutineUniformLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetSubroutineIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetActiveSubroutineUniformiv = void function(GLuint, GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveSubroutineUniformName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetActiveSubroutineName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformSubroutinesuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetUniformSubroutineuiv = void function(GLenum, GLint, GLuint*);
alias glbfn_glGetProgramStageiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glPatchParameteri = void function(GLenum, GLint);
alias glbfn_glPatchParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glBindTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacks = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedback = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedback = void function();
alias glbfn_glResumeTransformFeedback = void function();
alias glbfn_glDrawTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDrawTransformFeedbackStream = void function(GLenum, GLuint, GLuint);
alias glbfn_glBeginQueryIndexed = void function(GLenum, GLuint, GLuint);
alias glbfn_glEndQueryIndexed = void function(GLenum, GLuint);
alias glbfn_glGetQueryIndexediv = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glReleaseShaderCompiler = void function();
alias glbfn_glShaderBinary = void function(GLsizei, const(GLuint)*, GLenum, const(void)*, GLsizei);
alias glbfn_glGetShaderPrecisionFormat = void function(GLenum, GLenum, GLint*, GLint*);
alias glbfn_glDepthRangef = void function(GLfloat, GLfloat);
alias glbfn_glClearDepthf = void function(GLfloat);
alias glbfn_glGetProgramBinary = void function(GLuint, GLsizei, GLsizei*, GLenum*, void*);
alias glbfn_glProgramBinary = void function(GLuint, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glUseProgramStages = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glActiveShaderProgram = void function(GLuint, GLuint);
alias glbfn_glCreateShaderProgramv = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glBindProgramPipeline = void function(GLuint);
alias glbfn_glDeleteProgramPipelines = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glIsProgramPipeline = GLboolean function(GLuint);
alias glbfn_glGetProgramPipelineiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1i = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform1iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform1f = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform1fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1d = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform1dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform1ui = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform1uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform2iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2f = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform2fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2d = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform2dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2ui = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform2uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3ui = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4i = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4ui = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniformMatrix2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glValidateProgramPipeline = void function(GLuint);
alias glbfn_glGetProgramPipelineInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glVertexAttribL1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glViewportArrayv = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glViewportIndexedf = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glViewportIndexedfv = void function(GLuint, const(GLfloat)*);
alias glbfn_glScissorArrayv = void function(GLuint, GLsizei, const(GLint)*);
alias glbfn_glScissorIndexed = void function(GLuint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glScissorIndexedv = void function(GLuint, const(GLint)*);
alias glbfn_glDepthRangeArrayv = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glDepthRangeIndexed = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glGetFloati_v = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_v = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glDrawArraysInstancedBaseInstance = void function(GLenum, GLint, GLsizei, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseVertexBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint, GLuint);
alias glbfn_glGetInternalformativ = void function(GLenum, GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetActiveAtomicCounterBufferiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glBindImageTexture = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
alias glbfn_glMemoryBarrier = void function(GLbitfield);
alias glbfn_glTexStorage1D = void function(GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTexStorage2D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTexStorage3D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glDrawTransformFeedbackInstanced = void function(GLenum, GLuint, GLsizei);
alias glbfn_glDrawTransformFeedbackStreamInstanced = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glClearBufferData = void function(GLenum, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearBufferSubData = void function(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glDispatchCompute = void function(GLuint, GLuint, GLuint);
alias glbfn_glDispatchComputeIndirect = void function(GLintptr);
alias glbfn_glCopyImageSubData = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glFramebufferParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glGetFramebufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetInternalformati64v = void function(GLenum, GLenum, GLenum, GLsizei, GLint64*);
alias glbfn_glInvalidateTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glInvalidateTexImage = void function(GLuint, GLint);
alias glbfn_glInvalidateBufferSubData = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glInvalidateBufferData = void function(GLuint);
alias glbfn_glInvalidateFramebuffer = void function(GLenum, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateSubFramebuffer = void function(GLenum, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glMultiDrawArraysIndirect = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirect = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGetProgramInterfaceiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetProgramResourceIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramResourceiv = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetProgramResourceLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceLocationIndex = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glShaderStorageBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glTexBufferRange = void function(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTexStorage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexStorage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureView = void function(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glBindVertexBuffer = void function(GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexAttribFormat = void function(GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribIFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribLFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribBinding = void function(GLuint, GLuint);
alias glbfn_glVertexBindingDivisor = void function(GLuint, GLuint);
alias glbfn_glDebugMessageControl = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsert = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallback = void function(GLDEBUGPROC, const(void)*);
alias glbfn_glGetDebugMessageLog = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroup = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroup = void function();
alias glbfn_glObjectLabel = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabel = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabel = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabel = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glBufferStorage = void function(GLenum, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearTexImage = void function(GLuint, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glClearTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindBuffersBase = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindBuffersRange = void function(GLenum, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizeiptr)*);
alias glbfn_glBindTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindSamplers = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindImageTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindVertexBuffers = void function(GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glClipControl = void function(GLenum, GLenum);
alias glbfn_glCreateTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glTransformFeedbackBufferBase = void function(GLuint, GLuint, GLuint);
alias glbfn_glTransformFeedbackBufferRange = void function(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetTransformFeedbackiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTransformFeedbacki_v = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetTransformFeedbacki64_v = void function(GLuint, GLenum, GLuint, GLint64*);
alias glbfn_glCreateBuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedBufferStorage = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glNamedBufferData = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glCopyNamedBufferSubData = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glClearNamedBufferData = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubData = void function(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glMapNamedBuffer = void* function(GLuint, GLenum);
alias glbfn_glMapNamedBufferRange = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glUnmapNamedBuffer = GLboolean function(GLuint);
alias glbfn_glFlushMappedNamedBufferRange = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetNamedBufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferParameteri64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetNamedBufferPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glCreateFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedFramebufferRenderbuffer = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glNamedFramebufferParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glNamedFramebufferTexture = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayer = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferDrawBuffer = void function(GLuint, GLenum);
alias glbfn_glNamedFramebufferDrawBuffers = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glNamedFramebufferReadBuffer = void function(GLuint, GLenum);
alias glbfn_glInvalidateNamedFramebufferData = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateNamedFramebufferSubData = void function(GLuint, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glClearNamedFramebufferiv = void function(GLuint, GLenum, GLint, const(GLint)*);
alias glbfn_glClearNamedFramebufferuiv = void function(GLuint, GLenum, GLint, const(GLuint)*);
alias glbfn_glClearNamedFramebufferfv = void function(GLuint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearNamedFramebufferfi = void function(GLuint, GLenum, GLint, GLfloat, GLint);
alias glbfn_glBlitNamedFramebuffer = void function(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glCheckNamedFramebufferStatus = GLenum function(GLuint, GLenum);
alias glbfn_glGetNamedFramebufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedFramebufferAttachmentParameteriv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glCreateRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedRenderbufferStorage = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateTextures = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glTextureBuffer = void function(GLuint, GLenum, GLuint);
alias glbfn_glTextureBufferRange = void function(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1D = void function(GLuint, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCompressedTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTextureSubImage1D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTextureParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glTextureParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glTextureParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glTextureParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glGenerateTextureMipmap = void function(GLuint);
alias glbfn_glBindTextureUnit = void function(GLuint, GLuint);
alias glbfn_glGetTextureImage = void function(GLuint, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureImage = void function(GLuint, GLint, GLsizei, void*);
alias glbfn_glGetTextureLevelParameterfv = void function(GLuint, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameteriv = void function(GLuint, GLint, GLenum, GLint*);
alias glbfn_glGetTextureParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetTextureParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glDisableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glEnableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glVertexArrayElementBuffer = void function(GLuint, GLuint);
alias glbfn_glVertexArrayVertexBuffer = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexBuffers = void function(GLuint, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glVertexArrayAttribBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayAttribFormat = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayAttribIFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayAttribLFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayBindingDivisor = void function(GLuint, GLuint, GLuint);
alias glbfn_glGetVertexArrayiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexediv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexed64iv = void function(GLuint, GLuint, GLenum, GLint64*);
alias glbfn_glCreateSamplers = void function(GLsizei, GLuint*);
alias glbfn_glCreateProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glCreateQueries = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetQueryBufferObjecti64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectui64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectuiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glMemoryBarrierByRegion = void function(GLbitfield);
alias glbfn_glGetTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void*);
alias glbfn_glGetGraphicsResetStatus = GLenum function();
alias glbfn_glGetnCompressedTexImage = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnTexImage = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformdv = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnUniformfv = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformiv = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuiv = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glReadnPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMapdv = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfv = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapiv = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfv = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuiv = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusv = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStipple = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTable = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogram = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmax = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glTextureBarrier = void function();

// ////////////////////////////////////////////////////////////////////////// //
alias glbfn_glTbufferMask3DFX = void function(GLuint);
alias glbfn_glDebugMessageEnableAMD = void function(GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertAMD = void function(GLenum, GLenum, GLuint, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackAMD = void function(GLDEBUGPROCAMD, void*);
alias glbfn_glGetDebugMessageLogAMD = GLuint function(GLuint, GLsizei, GLenum*, GLuint*, GLuint*, GLsizei*, GLchar*);
alias glbfn_glBlendFuncIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateIndexedAMD = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationIndexedAMD = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glUniform1i64NV = void function(GLint, GLint64EXT);
alias glbfn_glUniform2i64NV = void function(GLint, GLint64EXT, GLint64EXT);
alias glbfn_glUniform3i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform4i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform1i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform2i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform3i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform4i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform1ui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniform2ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform3ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform4ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform1ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform2ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform3ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform4ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glGetUniformi64vNV = void function(GLuint, GLint, GLint64EXT*);
alias glbfn_glGetUniformui64vNV = void function(GLuint, GLint, GLuint64EXT*);
alias glbfn_glProgramUniform1i64NV = void function(GLuint, GLint, GLint64EXT);
alias glbfn_glProgramUniform2i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform3i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform4i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform1i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform2i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform3i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform4i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform1ui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniform2ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform3ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform4ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform1ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform2ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform3ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform4ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glVertexAttribParameteriAMD = void function(GLuint, GLenum, GLint);
alias glbfn_glMultiDrawArraysIndirectAMD = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectAMD = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGenNamesAMD = void function(GLenum, GLuint, GLuint*);
alias glbfn_glDeleteNamesAMD = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glIsNameAMD = GLboolean function(GLenum, GLuint);
alias glbfn_glQueryObjectParameteruiAMD = void function(GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetPerfMonitorGroupsAMD = void function(GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorCountersAMD = void function(GLuint, GLint*, GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorGroupStringAMD = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterStringAMD = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterInfoAMD = void function(GLuint, GLuint, GLenum, void*);
alias glbfn_glGenPerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glDeletePerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glSelectPerfMonitorCountersAMD = void function(GLuint, GLboolean, GLuint, GLint, GLuint*);
alias glbfn_glBeginPerfMonitorAMD = void function(GLuint);
alias glbfn_glEndPerfMonitorAMD = void function(GLuint);
alias glbfn_glGetPerfMonitorCounterDataAMD = void function(GLuint, GLenum, GLsizei, GLuint*, GLint*);
alias glbfn_glSetMultisamplefvAMD = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glTexStorageSparseAMD = void function(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glTextureStorageSparseAMD = void function(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glStencilOpValueAMD = void function(GLenum, GLuint);
alias glbfn_glTessellationFactorAMD = void function(GLfloat);
alias glbfn_glTessellationModeAMD = void function(GLenum);
alias glbfn_glElementPointerAPPLE = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayAPPLE = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, GLint, GLsizei);
alias glbfn_glMultiDrawElementArrayAPPLE = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glGenFencesAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glDeleteFencesAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glSetFenceAPPLE = void function(GLuint);
alias glbfn_glIsFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glTestFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glFinishFenceAPPLE = void function(GLuint);
alias glbfn_glTestObjectAPPLE = GLboolean function(GLenum, GLuint);
alias glbfn_glFinishObjectAPPLE = void function(GLenum, GLint);
alias glbfn_glBufferParameteriAPPLE = void function(GLenum, GLenum, GLint);
alias glbfn_glFlushMappedBufferRangeAPPLE = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glObjectPurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glObjectUnpurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glGetObjectParameterivAPPLE = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glTextureRangeAPPLE = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glGetTexParameterPointervAPPLE = void function(GLenum, GLenum, void**);
alias glbfn_glBindVertexArrayAPPLE = void function(GLuint);
alias glbfn_glDeleteVertexArraysAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArraysAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArrayAPPLE = GLboolean function(GLuint);
alias glbfn_glVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glFlushVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glVertexArrayParameteriAPPLE = void function(GLenum, GLint);
alias glbfn_glEnableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glDisableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glIsVertexAttribEnabledAPPLE = GLboolean function(GLuint, GLenum);
alias glbfn_glMapVertexAttrib1dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib1fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapVertexAttrib2dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib2fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glPrimitiveBoundingBoxARB = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetTextureHandleARB = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleARB = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentARB = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentARB = void function(GLuint64);
alias glbfn_glGetImageHandleARB = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentARB = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentARB = void function(GLuint64);
alias glbfn_glUniformHandleui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glVertexAttribL1ui64ARB = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vARB = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLui64vARB = void function(GLuint, GLenum, GLuint64EXT*);
//alias glbfn_glCreateSyncFromCLeventARB = GLsync function(_cl_context*, _cl_event*, GLbitfield);
alias glbfn_glClampColorARB = void function(GLenum, GLenum);
alias glbfn_glDispatchComputeGroupSizeARB = void function(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glDebugMessageControlARB = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertARB = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackARB = void function(GLDEBUGPROCARB, const(void)*);
alias glbfn_glGetDebugMessageLogARB = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glDrawBuffersARB = void function(GLsizei, const(GLenum)*);
alias glbfn_glBlendEquationiARB = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateiARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunciARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateiARB = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysInstancedARB = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedARB = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramStringARB = void function(GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glBindProgramARB = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramsARB = void function(GLsizei, GLuint*);
alias glbfn_glProgramEnvParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramEnvParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramEnvParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramEnvParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramLocalParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramLocalParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramLocalParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramLocalParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetProgramEnvParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramEnvParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramLocalParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramLocalParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetProgramStringARB = void function(GLenum, GLenum, void*);
alias glbfn_glIsProgramARB = GLboolean function(GLuint);
alias glbfn_glProgramParameteriARB = void function(GLuint, GLenum, GLint);
alias glbfn_glFramebufferTextureARB = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureLayerARB = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferTextureFaceARB = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glUniform1i64ARB = void function(GLint, GLint64);
alias glbfn_glUniform2i64ARB = void function(GLint, GLint64, GLint64);
alias glbfn_glUniform3i64ARB = void function(GLint, GLint64, GLint64, GLint64);
alias glbfn_glUniform4i64ARB = void function(GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glUniform1i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform2i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform3i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform4i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform1ui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniform2ui64ARB = void function(GLint, GLuint64, GLuint64);
alias glbfn_glUniform3ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform4ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform1ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform2ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform3ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform4ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glGetUniformi64vARB = void function(GLuint, GLint, GLint64*);
alias glbfn_glGetUniformui64vARB = void function(GLuint, GLint, GLuint64*);
alias glbfn_glGetnUniformi64vARB = void function(GLuint, GLint, GLsizei, GLint64*);
alias glbfn_glGetnUniformui64vARB = void function(GLuint, GLint, GLsizei, GLuint64*);
alias glbfn_glProgramUniform1i64ARB = void function(GLuint, GLint, GLint64);
alias glbfn_glProgramUniform2i64ARB = void function(GLuint, GLint, GLint64, GLint64);
alias glbfn_glProgramUniform3i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform4i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform1i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform2i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform3i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform4i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform1ui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniform2ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64);
alias glbfn_glProgramUniform3ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform4ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform1ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform2ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform3ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform4ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glColorTable = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTable = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTable = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glColorSubTable = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTable = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glConvolutionFilter1D = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1D = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2D = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilter = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilter = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glGetHistogram = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmax = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogram = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmax = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogram = void function(GLenum);
alias glbfn_glResetMinmax = void function(GLenum);
alias glbfn_glMultiDrawArraysIndirectCountARB = void function(GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectCountARB = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glVertexAttribDivisorARB = void function(GLuint, GLuint);
alias glbfn_glCurrentPaletteMatrixARB = void function(GLint);
alias glbfn_glMatrixIndexubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glMatrixIndexusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glMatrixIndexuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glMatrixIndexPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glSampleCoverageARB = void function(GLfloat, GLboolean);
alias glbfn_glActiveTextureARB = void function(GLenum);
alias glbfn_glClientActiveTextureARB = void function(GLenum);
alias glbfn_glMultiTexCoord1dARB = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1fARB = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1iARB = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1sARB = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2dARB = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2fARB = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2iARB = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2sARB = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3dARB = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3fARB = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3iARB = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3sARB = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4dARB = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4fARB = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4iARB = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4sARB = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glGenQueriesARB = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueriesARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQueryARB = GLboolean function(GLuint);
alias glbfn_glBeginQueryARB = void function(GLenum, GLuint);
alias glbfn_glEndQueryARB = void function(GLenum);
alias glbfn_glGetQueryivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuivARB = void function(GLuint, GLenum, GLuint*);
alias glbfn_glMaxShaderCompilerThreadsARB = void function(GLuint);
alias glbfn_glPointParameterfARB = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetGraphicsResetStatusARB = GLenum function();
alias glbfn_glGetnTexImageARB = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glReadnPixelsARB = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnCompressedTexImageARB = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnUniformfvARB = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivARB = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivARB = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glGetnUniformdvARB = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnMapdvARB = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfvARB = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapivARB = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfvARB = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuivARB = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusvARB = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStippleARB = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTableARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogramARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmaxARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glFramebufferSampleLocationsfvARB = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvARB = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glEvaluateDepthValuesARB = void function();
alias glbfn_glMinSampleShadingARB = void function(GLfloat);
alias glbfn_glDeleteObjectARB = void function(GLhandleARB);
alias glbfn_glGetHandleARB = GLhandleARB function(GLenum);
alias glbfn_glDetachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glCreateShaderObjectARB = GLhandleARB function(GLenum);
alias glbfn_glShaderSourceARB = void function(GLhandleARB, GLsizei, const(GLcharARB*)*, const(GLint)*);
alias glbfn_glCompileShaderARB = void function(GLhandleARB);
alias glbfn_glCreateProgramObjectARB = GLhandleARB function();
alias glbfn_glAttachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glLinkProgramARB = void function(GLhandleARB);
alias glbfn_glUseProgramObjectARB = void function(GLhandleARB);
alias glbfn_glValidateProgramARB = void function(GLhandleARB);
alias glbfn_glUniform1fARB = void function(GLint, GLfloat);
alias glbfn_glUniform2fARB = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3fARB = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4fARB = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1iARB = void function(GLint, GLint);
alias glbfn_glUniform2iARB = void function(GLint, GLint, GLint);
alias glbfn_glUniform3iARB = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4iARB = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glGetObjectParameterfvARB = void function(GLhandleARB, GLenum, GLfloat*);
alias glbfn_glGetObjectParameterivARB = void function(GLhandleARB, GLenum, GLint*);
alias glbfn_glGetInfoLogARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glGetAttachedObjectsARB = void function(GLhandleARB, GLsizei, GLsizei*, GLhandleARB*);
alias glbfn_glGetUniformLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glGetActiveUniformARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetUniformfvARB = void function(GLhandleARB, GLint, GLfloat*);
alias glbfn_glGetUniformivARB = void function(GLhandleARB, GLint, GLint*);
alias glbfn_glGetShaderSourceARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glNamedStringARB = void function(GLenum, GLint, const(GLchar)*, GLint, const(GLchar)*);
alias glbfn_glDeleteNamedStringARB = void function(GLint, const(GLchar)*);
alias glbfn_glCompileShaderIncludeARB = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glIsNamedStringARB = GLboolean function(GLint, const(GLchar)*);
alias glbfn_glGetNamedStringARB = void function(GLint, const(GLchar)*, GLsizei, GLint*, GLchar*);
alias glbfn_glGetNamedStringivARB = void function(GLint, const(GLchar)*, GLenum, GLint*);
alias glbfn_glBufferPageCommitmentARB = void function(GLenum, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentEXT = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentARB = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glTexPageCommitmentARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexBufferARB = void function(GLenum, GLenum, GLuint);
alias glbfn_glCompressedTexImage3DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1DARB = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3DARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2DARB = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1DARB = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImageARB = void function(GLenum, GLint, void*);
alias glbfn_glLoadTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glWeightbvARB = void function(GLint, const(GLbyte)*);
alias glbfn_glWeightsvARB = void function(GLint, const(GLshort)*);
alias glbfn_glWeightivARB = void function(GLint, const(GLint)*);
alias glbfn_glWeightfvARB = void function(GLint, const(GLfloat)*);
alias glbfn_glWeightdvARB = void function(GLint, const(GLdouble)*);
alias glbfn_glWeightubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glWeightusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glWeightuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glWeightPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexBlendARB = void function(GLint);
alias glbfn_glBindBufferARB = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffersARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffersARB = void function(GLsizei, GLuint*);
alias glbfn_glIsBufferARB = GLboolean function(GLuint);
alias glbfn_glBufferDataARB = void function(GLenum, GLsizeiptrARB, const(void)*, GLenum);
alias glbfn_glBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, const(void)*);
alias glbfn_glGetBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, void*);
alias glbfn_glMapBufferARB = void* function(GLenum, GLenum);
alias glbfn_glUnmapBufferARB = GLboolean function(GLenum);
alias glbfn_glGetBufferParameterivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointervARB = void function(GLenum, GLenum, void**);
alias glbfn_glVertexAttrib1dARB = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fARB = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sARB = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dARB = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fARB = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sARB = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dARB = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fARB = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sARB = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NbvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4NivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4NsvARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NubARB = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4NubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4NuivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4NusvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4dARB = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fARB = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4ivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4sARB = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointerARB = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glEnableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glDisableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glGetVertexAttribdvARB = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvARB = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervARB = void function(GLuint, GLenum, void**);
alias glbfn_glBindAttribLocationARB = void function(GLhandleARB, GLuint, const(GLcharARB)*);
alias glbfn_glGetActiveAttribARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetAttribLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glWindowPos2dARB = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fARB = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iARB = void function(GLint, GLint);
alias glbfn_glWindowPos2ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos2sARB = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svARB = void function(const(GLshort)*);
alias glbfn_glWindowPos3dARB = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fARB = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iARB = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos3sARB = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svARB = void function(const(GLshort)*);
alias glbfn_glDrawBuffersATI = void function(GLsizei, const(GLenum)*);
alias glbfn_glElementPointerATI = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayATI = void function(GLenum, GLsizei);
alias glbfn_glDrawRangeElementArrayATI = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glTexBumpParameterivATI = void function(GLenum, const(GLint)*);
alias glbfn_glTexBumpParameterfvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetTexBumpParameterivATI = void function(GLenum, GLint*);
alias glbfn_glGetTexBumpParameterfvATI = void function(GLenum, GLfloat*);
alias glbfn_glGenFragmentShadersATI = GLuint function(GLuint);
alias glbfn_glBindFragmentShaderATI = void function(GLuint);
alias glbfn_glDeleteFragmentShaderATI = void function(GLuint);
alias glbfn_glBeginFragmentShaderATI = void function();
alias glbfn_glEndFragmentShaderATI = void function();
alias glbfn_glPassTexCoordATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glSampleMapATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glColorFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSetFragmentShaderConstantATI = void function(GLuint, const(GLfloat)*);
alias glbfn_glMapObjectBufferATI = void* function(GLuint);
alias glbfn_glUnmapObjectBufferATI = void function(GLuint);
alias glbfn_glPNTrianglesiATI = void function(GLenum, GLint);
alias glbfn_glPNTrianglesfATI = void function(GLenum, GLfloat);
alias glbfn_glStencilOpSeparateATI = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparateATI = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glNewObjectBufferATI = GLuint function(GLsizei, const(void)*, GLenum);
alias glbfn_glIsObjectBufferATI = GLboolean function(GLuint);
alias glbfn_glUpdateObjectBufferATI = void function(GLuint, GLuint, GLsizei, const(void)*, GLenum);
alias glbfn_glGetObjectBufferfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetObjectBufferivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glFreeObjectBufferATI = void function(GLuint);
alias glbfn_glArrayObjectATI = void function(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetArrayObjectfvATI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetArrayObjectivATI = void function(GLenum, GLenum, GLint*);
alias glbfn_glVariantArrayObjectATI = void function(GLuint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetVariantArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexAttribArrayObjectATI = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
alias glbfn_glGetVertexAttribArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexStream1sATI = void function(GLenum, GLshort);
alias glbfn_glVertexStream1svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream1iATI = void function(GLenum, GLint);
alias glbfn_glVertexStream1ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream1fATI = void function(GLenum, GLfloat);
alias glbfn_glVertexStream1fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream1dATI = void function(GLenum, GLdouble);
alias glbfn_glVertexStream1dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream2sATI = void function(GLenum, GLshort, GLshort);
alias glbfn_glVertexStream2svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream2iATI = void function(GLenum, GLint, GLint);
alias glbfn_glVertexStream2ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream2fATI = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glVertexStream2fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream2dATI = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glVertexStream2dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glVertexStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream4sATI = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream4svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream4iATI = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glVertexStream4ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream4fATI = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream4fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream4dATI = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream4dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glNormalStream3bATI = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glNormalStream3bvATI = void function(GLenum, const(GLbyte)*);
alias glbfn_glNormalStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glNormalStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glNormalStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glNormalStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glNormalStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormalStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glNormalStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glNormalStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glClientActiveVertexStreamATI = void function(GLenum);
alias glbfn_glVertexBlendEnviATI = void function(GLenum, GLint);
alias glbfn_glVertexBlendEnvfATI = void function(GLenum, GLfloat);
alias glbfn_glUniformBufferEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glGetUniformBufferSizeEXT = GLint function(GLuint, GLint);
alias glbfn_glGetUniformOffsetEXT = GLintptr function(GLuint, GLint);
alias glbfn_glBlendColorEXT = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquationSeparateEXT = void function(GLenum, GLenum);
alias glbfn_glBlendFuncSeparateEXT = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationEXT = void function(GLenum);
alias glbfn_glColorSubTableEXT = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTableEXT = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glLockArraysEXT = void function(GLint, GLsizei);
alias glbfn_glUnlockArraysEXT = void function();
alias glbfn_glConvolutionFilter1DEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilterEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilterEXT = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glTangent3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTangent3bvEXT = void function(const(GLbyte)*);
alias glbfn_glTangent3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTangent3dvEXT = void function(const(GLdouble)*);
alias glbfn_glTangent3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTangent3fvEXT = void function(const(GLfloat)*);
alias glbfn_glTangent3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glTangent3ivEXT = void function(const(GLint)*);
alias glbfn_glTangent3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glTangent3svEXT = void function(const(GLshort)*);
alias glbfn_glBinormal3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glBinormal3bvEXT = void function(const(GLbyte)*);
alias glbfn_glBinormal3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glBinormal3dvEXT = void function(const(GLdouble)*);
alias glbfn_glBinormal3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glBinormal3fvEXT = void function(const(GLfloat)*);
alias glbfn_glBinormal3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glBinormal3ivEXT = void function(const(GLint)*);
alias glbfn_glBinormal3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glBinormal3svEXT = void function(const(GLshort)*);
alias glbfn_glTangentPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBinormalPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTexImage1DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCullParameterdvEXT = void function(GLenum, GLdouble*);
alias glbfn_glCullParameterfvEXT = void function(GLenum, GLfloat*);
alias glbfn_glLabelObjectEXT = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelEXT = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glInsertEventMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPushGroupMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPopGroupMarkerEXT = void function();
alias glbfn_glDepthBoundsEXT = void function(GLclampd, GLclampd);
alias glbfn_glMatrixLoadfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoaddEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultdEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixLoadIdentityEXT = void function(GLenum);
alias glbfn_glMatrixRotatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixRotatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixScalefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixScaledEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixTranslatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixTranslatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixFrustumEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixOrthoEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixPopEXT = void function(GLenum);
alias glbfn_glMatrixPushEXT = void function(GLenum);
alias glbfn_glClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glPushClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glTextureParameterfEXT = void function(GLuint, GLenum, GLenum, GLfloat);
alias glbfn_glTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteriEXT = void function(GLuint, GLenum, GLenum, GLint);
alias glbfn_glTextureParameterivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetTextureImageEXT = void function(GLuint, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureLevelParameterfvEXT = void function(GLuint, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameterivEXT = void function(GLuint, GLenum, GLint, GLenum, GLint*);
alias glbfn_glTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glBindMultiTextureEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordPointerEXT = void function(GLenum, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glMultiTexEnvfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexEnviEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexGendEXT = void function(GLenum, GLenum, GLenum, GLdouble);
alias glbfn_glMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexGenfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexGeniEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glGetMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, GLdouble*);
alias glbfn_glGetMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glMultiTexParameteriEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetMultiTexImageEXT = void function(GLenum, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexLevelParameterfvEXT = void function(GLenum, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetMultiTexLevelParameterivEXT = void function(GLenum, GLenum, GLint, GLenum, GLint*);
alias glbfn_glMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glEnableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloatIndexedvEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoubleIndexedvEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointerIndexedvEXT = void function(GLenum, GLuint, void**);
alias glbfn_glEnableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glIsEnabledIndexedEXT = GLboolean function(GLenum, GLuint);
alias glbfn_glGetIntegerIndexedvEXT = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetBooleanIndexedvEXT = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glCompressedTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTextureImageEXT = void function(GLuint, GLenum, GLint, void*);
alias glbfn_glCompressedMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedMultiTexImageEXT = void function(GLenum, GLenum, GLint, void*);
alias glbfn_glMatrixLoadTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glNamedBufferDataEXT = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glMapNamedBufferEXT = void* function(GLuint, GLenum);
alias glbfn_glUnmapNamedBufferEXT = GLboolean function(GLuint);
alias glbfn_glGetNamedBufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glProgramUniform1fEXT = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform2fEXT = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform1iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform2iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform1fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniformMatrix2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glTextureBufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glMultiTexBufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, GLuint*);
alias glbfn_glMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, GLuint*);
alias glbfn_glProgramUniform1uiEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform2uiEXT = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform1uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glNamedProgramLocalParameters4fvEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedProgramLocalParameterI4iEXT = void function(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glNamedProgramLocalParameterI4ivEXT = void function(GLuint, GLenum, GLuint, const(GLint)*);
alias glbfn_glNamedProgramLocalParametersI4ivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glNamedProgramLocalParameterI4uiEXT = void function(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glNamedProgramLocalParameterI4uivEXT = void function(GLuint, GLenum, GLuint, const(GLuint)*);
alias glbfn_glNamedProgramLocalParametersI4uivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetNamedProgramLocalParameterIivEXT = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetNamedProgramLocalParameterIuivEXT = void function(GLuint, GLenum, GLuint, GLuint*);
alias glbfn_glEnableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloati_vEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_vEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointeri_vEXT = void function(GLenum, GLuint, void**);
alias glbfn_glNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glNamedProgramLocalParameter4dEXT = void function(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glNamedProgramLocalParameter4dvEXT = void function(GLuint, GLenum, GLuint, const(GLdouble)*);
alias glbfn_glNamedProgramLocalParameter4fEXT = void function(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNamedProgramLocalParameter4fvEXT = void function(GLuint, GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetNamedProgramLocalParameterdvEXT = void function(GLuint, GLenum, GLuint, GLdouble*);
alias glbfn_glGetNamedProgramLocalParameterfvEXT = void function(GLuint, GLenum, GLuint, GLfloat*);
alias glbfn_glGetNamedProgramivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, void*);
alias glbfn_glNamedRenderbufferStorageEXT = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedRenderbufferStorageMultisampleEXT = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT = void function(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glCheckNamedFramebufferStatusEXT = GLenum function(GLuint, GLenum);
alias glbfn_glNamedFramebufferTexture1DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture2DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture3DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferRenderbufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glGetNamedFramebufferAttachmentParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGenerateTextureMipmapEXT = void function(GLuint, GLenum);
alias glbfn_glGenerateMultiTexMipmapEXT = void function(GLenum, GLenum);
alias glbfn_glFramebufferDrawBufferEXT = void function(GLuint, GLenum);
alias glbfn_glFramebufferDrawBuffersEXT = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glFramebufferReadBufferEXT = void function(GLuint, GLenum);
alias glbfn_glGetFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedCopyBufferSubDataEXT = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glNamedFramebufferTextureEXT = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayerEXT = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferTextureFaceEXT = void function(GLuint, GLenum, GLuint, GLint, GLenum);
alias glbfn_glTextureRenderbufferEXT = void function(GLuint, GLenum, GLuint);
alias glbfn_glMultiTexRenderbufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glVertexArrayVertexOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayEdgeFlagOffsetEXT = void function(GLuint, GLuint, GLsizei, GLintptr);
alias glbfn_glVertexArrayIndexOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayNormalOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayTexCoordOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayMultiTexCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayFogCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArraySecondaryColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribIOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glEnableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glDisableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glEnableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glDisableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glGetVertexArrayIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetVertexArrayIntegeri_vEXT = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointeri_vEXT = void function(GLuint, GLuint, GLenum, void**);
alias glbfn_glMapNamedBufferRangeEXT = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedNamedBufferRangeEXT = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glNamedBufferStorageEXT = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearNamedBufferDataEXT = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubDataEXT = void function(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glNamedFramebufferParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glGetNamedFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1dEXT = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform2dEXT = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform1dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glTextureBufferRangeEXT = void function(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayBindVertexBufferEXT = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexAttribFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayVertexAttribIFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribLFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribBindingEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexBindingDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexAttribLOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glTexturePageCommitmentEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayVertexAttribDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glColorMaskIndexedEXT = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDrawArraysInstancedEXT = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedEXT = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glDrawRangeElementsEXT = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glFogCoordfEXT = void function(GLfloat);
alias glbfn_glFogCoordfvEXT = void function(const(GLfloat)*);
alias glbfn_glFogCoorddEXT = void function(GLdouble);
alias glbfn_glFogCoorddvEXT = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBlitFramebufferEXT = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisampleEXT = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glIsRenderbufferEXT = GLboolean function(GLuint);
alias glbfn_glBindRenderbufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorageEXT = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebufferEXT = GLboolean function(GLuint);
alias glbfn_glBindFramebufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatusEXT = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmapEXT = void function(GLenum);
alias glbfn_glProgramParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glProgramEnvParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramLocalParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glGetUniformuivEXT = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocationEXT = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocationEXT = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1uiEXT = void function(GLint, GLuint);
alias glbfn_glUniform2uiEXT = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3uiEXT = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4uiEXT = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glGetHistogramEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmaxEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogramEXT = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmaxEXT = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogramEXT = void function(GLenum);
alias glbfn_glResetMinmaxEXT = void function(GLenum);
alias glbfn_glIndexFuncEXT = void function(GLenum, GLclampf);
alias glbfn_glIndexMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glApplyTextureEXT = void function(GLenum);
alias glbfn_glTextureLightEXT = void function(GLenum);
alias glbfn_glTextureMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glMultiDrawArraysEXT = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElementsEXT = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glSampleMaskEXT = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternEXT = void function(GLenum);
alias glbfn_glColorTableEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetColorTableEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetColorTableParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelTransformParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glPixelTransformParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glPixelTransformParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPixelTransformParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTransformParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelTransformParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPointParameterfEXT = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glPolygonOffsetEXT = void function(GLfloat, GLfloat);
alias glbfn_glPolygonOffsetClampEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glProvokingVertexEXT = void function(GLenum);
alias glbfn_glRasterSamplesEXT = void function(GLuint, GLboolean);
alias glbfn_glSecondaryColor3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bvEXT = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dvEXT = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fvEXT = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3ivEXT = void function(const(GLint)*);
alias glbfn_glSecondaryColor3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3svEXT = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ubEXT = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubvEXT = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uivEXT = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3usEXT = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usvEXT = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glUseShaderProgramEXT = void function(GLenum, GLuint);
alias glbfn_glActiveProgramEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramEXT = GLuint function(GLenum, const(GLchar)*);
alias glbfn_glActiveShaderProgramEXT = void function(GLuint, GLuint);
alias glbfn_glBindProgramPipelineEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramvEXT = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glDeleteProgramPipelinesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelinesEXT = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramPipelineInfoLogEXT = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramPipelineivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glIsProgramPipelineEXT = GLboolean function(GLuint);
alias glbfn_glUseProgramStagesEXT = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glValidateProgramPipelineEXT = void function(GLuint);
alias glbfn_glBindImageTextureEXT = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
alias glbfn_glMemoryBarrierEXT = void function(GLbitfield);
alias glbfn_glStencilClearTagEXT = void function(GLsizei, GLuint);
alias glbfn_glActiveStencilFaceEXT = void function(GLenum);
alias glbfn_glTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage3DEXT = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glFramebufferTextureLayerEXT = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glTexBufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glTexParameterIivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuivEXT = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuivEXT = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearColorIiEXT = void function(GLint, GLint, GLint, GLint);
alias glbfn_glClearColorIuiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAreTexturesResidentEXT = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindTextureEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteTexturesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTexturesEXT = void function(GLsizei, GLuint*);
alias glbfn_glIsTextureEXT = GLboolean function(GLuint);
alias glbfn_glPrioritizeTexturesEXT = void function(GLsizei, const(GLuint)*, const(GLclampf)*);
alias glbfn_glTextureNormalEXT = void function(GLenum);
alias glbfn_glGetQueryObjecti64vEXT = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64vEXT = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glBeginTransformFeedbackEXT = void function(GLenum);
alias glbfn_glEndTransformFeedbackEXT = void function();
alias glbfn_glBindBufferRangeEXT = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetEXT = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseEXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsEXT = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVaryingEXT = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glArrayElementEXT = void function(GLint);
alias glbfn_glColorPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glDrawArraysEXT = void function(GLenum, GLint, GLsizei);
alias glbfn_glEdgeFlagPointerEXT = void function(GLsizei, GLsizei, const(GLboolean)*);
alias glbfn_glGetPointervEXT = void function(GLenum, void**);
alias glbfn_glIndexPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glNormalPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glTexCoordPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexAttribL1dEXT = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2dEXT = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdvEXT = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glBeginVertexShaderEXT = void function();
alias glbfn_glEndVertexShaderEXT = void function();
alias glbfn_glBindVertexShaderEXT = void function(GLuint);
alias glbfn_glGenVertexShadersEXT = GLuint function(GLuint);
alias glbfn_glDeleteVertexShaderEXT = void function(GLuint);
alias glbfn_glShaderOp1EXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glShaderOp2EXT = void function(GLenum, GLuint, GLuint, GLuint);
alias glbfn_glShaderOp3EXT = void function(GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSwizzleEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glWriteMaskEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glInsertComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glExtractComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glGenSymbolsEXT = GLuint function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glSetInvariantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glSetLocalConstantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glVariantbvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVariantsvEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVariantivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVariantfvEXT = void function(GLuint, const(GLfloat)*);
alias glbfn_glVariantdvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVariantubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVariantusvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVariantuivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVariantPointerEXT = void function(GLuint, GLenum, GLuint, const(void)*);
alias glbfn_glEnableVariantClientStateEXT = void function(GLuint);
alias glbfn_glDisableVariantClientStateEXT = void function(GLuint);
alias glbfn_glBindLightParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindMaterialParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindTexGenParameterEXT = GLuint function(GLenum, GLenum, GLenum);
alias glbfn_glBindTextureUnitParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindParameterEXT = GLuint function(GLenum);
alias glbfn_glIsVariantEnabledEXT = GLboolean function(GLuint, GLenum);
alias glbfn_glGetVariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetVariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetInvariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetInvariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetInvariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetLocalConstantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetLocalConstantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetLocalConstantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glVertexWeightfEXT = void function(GLfloat);
alias glbfn_glVertexWeightfvEXT = void function(const(GLfloat)*);
alias glbfn_glVertexWeightPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
//alias glbfn_glImportSyncEXT = GLsync function(GLenum, GLintptr, GLbitfield);
alias glbfn_glFrameTerminatorGREMEDY = void function();
alias glbfn_glStringMarkerGREMEDY = void function(GLsizei, const(void)*);
alias glbfn_glImageTransformParameteriHP = void function(GLenum, GLenum, GLint);
alias glbfn_glImageTransformParameterfHP = void function(GLenum, GLenum, GLfloat);
alias glbfn_glImageTransformParameterivHP = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glImageTransformParameterfvHP = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetImageTransformParameterivHP = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetImageTransformParameterfvHP = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glMultiModeDrawArraysIBM = void function(const(GLenum)*, const(GLint)*, const(GLsizei)*, GLsizei, GLint);
alias glbfn_glMultiModeDrawElementsIBM = void function(const(GLenum)*, const(GLsizei)*, GLenum, const(void*)*, GLsizei, GLint);
alias glbfn_glFlushStaticDataIBM = void function(GLenum);
alias glbfn_glColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glSecondaryColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glEdgeFlagPointerListIBM = void function(GLint, const(GLboolean*)*, GLint);
alias glbfn_glFogCoordPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glIndexPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glNormalPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glTexCoordPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glVertexPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glBlendFuncSeparateINGR = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glApplyFramebufferAttachmentCMAAINTEL = void function();
alias glbfn_glSyncTextureINTEL = void function(GLuint);
alias glbfn_glUnmapTexture2DINTEL = void function(GLuint, GLint);
alias glbfn_glMapTexture2DINTEL = void* function(GLuint, GLint, GLbitfield, GLint*, GLenum*);
alias glbfn_glVertexPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glNormalPointervINTEL = void function(GLenum, const(void*)*);
alias glbfn_glColorPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glTexCoordPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glBeginPerfQueryINTEL = void function(GLuint);
alias glbfn_glCreatePerfQueryINTEL = void function(GLuint, GLuint*);
alias glbfn_glDeletePerfQueryINTEL = void function(GLuint);
alias glbfn_glEndPerfQueryINTEL = void function(GLuint);
alias glbfn_glGetFirstPerfQueryIdINTEL = void function(GLuint*);
alias glbfn_glGetNextPerfQueryIdINTEL = void function(GLuint, GLuint*);
alias glbfn_glGetPerfCounterInfoINTEL = void function(GLuint, GLuint, GLuint, GLchar*, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*, GLuint64*);
alias glbfn_glGetPerfQueryDataINTEL = void function(GLuint, GLuint, GLsizei, GLvoid*, GLuint*);
alias glbfn_glGetPerfQueryIdByNameINTEL = void function(GLchar*, GLuint*);
alias glbfn_glGetPerfQueryInfoINTEL = void function(GLuint, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*);
alias glbfn_glBlendBarrierKHR = void function();
alias glbfn_glDebugMessageControlKHR = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertKHR = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackKHR = void function(GLDEBUGPROCKHR, const(void)*);
alias glbfn_glGetDebugMessageLogKHR = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroupKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroupKHR = void function();
alias glbfn_glObjectLabelKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelKHR = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabelKHR = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabelKHR = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPointervKHR = void function(GLenum, void**);
alias glbfn_glGetGraphicsResetStatusKHR = GLenum function();
alias glbfn_glReadnPixelsKHR = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformfvKHR = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivKHR = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivKHR = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glResizeBuffersMESA = void function();
alias glbfn_glWindowPos2dMESA = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fMESA = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iMESA = void function(GLint, GLint);
alias glbfn_glWindowPos2ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos2sMESA = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos3dMESA = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fMESA = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iMESA = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos3sMESA = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos4dMESA = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos4dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos4fMESA = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos4fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos4iMESA = void function(GLint, GLint, GLint, GLint);
alias glbfn_glWindowPos4ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos4sMESA = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glWindowPos4svMESA = void function(const(GLshort)*);
alias glbfn_glBeginConditionalRenderNVX = void function(GLuint);
alias glbfn_glEndConditionalRenderNVX = void function();
alias glbfn_glMultiDrawArraysIndirectBindlessNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawArraysIndirectBindlessCountNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessCountNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glGetTextureHandleNV = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleNV = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentNV = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentNV = void function(GLuint64);
alias glbfn_glGetImageHandleNV = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentNV = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentNV = void function(GLuint64);
alias glbfn_glUniformHandleui64NV = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vNV = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64NV = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glBlendParameteriNV = void function(GLenum, GLint);
alias glbfn_glBlendBarrierNV = void function();
alias glbfn_glCreateStatesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteStatesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsStateNV = GLboolean function(GLuint);
alias glbfn_glStateCaptureNV = void function(GLuint, GLenum);
alias glbfn_glGetCommandHeaderNV = GLuint function(GLenum, GLuint);
alias glbfn_glGetStageIndexNV = GLushort function(GLenum);
alias glbfn_glDrawCommandsNV = void function(GLenum, GLuint, const(GLintptr)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsAddressNV = void function(GLenum, const(GLuint64)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsStatesNV = void function(GLuint, const(GLintptr)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glDrawCommandsStatesAddressNV = void function(const(GLuint64)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCreateCommandListsNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteCommandListsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsCommandListNV = GLboolean function(GLuint);
alias glbfn_glListDrawCommandsStatesClientNV = void function(GLuint, GLuint, const(void*)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCommandListSegmentsNV = void function(GLuint, GLuint);
alias glbfn_glCompileCommandListNV = void function(GLuint);
alias glbfn_glCallCommandListNV = void function(GLuint);
alias glbfn_glBeginConditionalRenderNV = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRenderNV = void function();
alias glbfn_glSubpixelPrecisionBiasNV = void function(GLuint, GLuint);
alias glbfn_glConservativeRasterParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCopyImageSubDataNV = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glDepthRangedNV = void function(GLdouble, GLdouble);
alias glbfn_glClearDepthdNV = void function(GLdouble);
alias glbfn_glDepthBoundsdNV = void function(GLdouble, GLdouble);
alias glbfn_glDrawTextureNV = void function(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const(void)*);
alias glbfn_glMapParameterivNV = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glMapParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void*);
alias glbfn_glGetMapParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapAttribParameterivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetMapAttribParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glEvalMapsNV = void function(GLenum, GLenum);
alias glbfn_glGetMultisamplefvNV = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaskIndexedNV = void function(GLuint, GLbitfield);
alias glbfn_glTexRenderbufferNV = void function(GLenum, GLuint);
alias glbfn_glDeleteFencesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFencesNV = void function(GLsizei, GLuint*);
alias glbfn_glIsFenceNV = GLboolean function(GLuint);
alias glbfn_glTestFenceNV = GLboolean function(GLuint);
alias glbfn_glGetFenceivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glFinishFenceNV = void function(GLuint);
alias glbfn_glSetFenceNV = void function(GLuint, GLenum);
alias glbfn_glFragmentCoverageColorNV = void function(GLuint);
alias glbfn_glProgramNamedParameter4fNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramNamedParameter4fvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glProgramNamedParameter4dNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramNamedParameter4dvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLdouble)*);
alias glbfn_glGetProgramNamedParameterfvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat*);
alias glbfn_glGetProgramNamedParameterdvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble*);
alias glbfn_glCoverageModulationTableNV = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetCoverageModulationTableNV = void function(GLsizei, GLfloat*);
alias glbfn_glCoverageModulationNV = void function(GLenum);
alias glbfn_glRenderbufferStorageMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glProgramVertexLimitNV = void function(GLenum, GLint);
alias glbfn_glFramebufferTextureEXT = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureFaceEXT = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glProgramLocalParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramLocalParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramLocalParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramLocalParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramLocalParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramLocalParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glProgramEnvParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramEnvParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramEnvParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramEnvParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramEnvParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramEnvParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramLocalParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramLocalParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glGetProgramEnvParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramEnvParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glProgramSubroutineParametersuivNV = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramSubroutineParameteruivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glVertex2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glVertex2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glNormal3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glNormal3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord1hNV = void function(GLhalfNV);
alias glbfn_glTexCoord1hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glMultiTexCoord1hNV = void function(GLenum, GLhalfNV);
alias glbfn_glMultiTexCoord1hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord2hNV = void function(GLenum, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord2hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord3hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord3hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord4hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord4hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glFogCoordhNV = void function(GLhalfNV);
alias glbfn_glFogCoordhvNV = void function(const(GLhalfNV)*);
alias glbfn_glSecondaryColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glSecondaryColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexWeighthNV = void function(GLhalfNV);
alias glbfn_glVertexWeighthvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexAttrib1hNV = void function(GLuint, GLhalfNV);
alias glbfn_glVertexAttrib1hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib2hNV = void function(GLuint, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib2hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib3hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib3hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib4hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib4hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttribs1hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs2hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs3hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs4hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glGetInternalformatSampleivNV = void function(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint*);
alias glbfn_glGenOcclusionQueriesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteOcclusionQueriesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsOcclusionQueryNV = GLboolean function(GLuint);
alias glbfn_glBeginOcclusionQueryNV = void function(GLuint);
alias glbfn_glEndOcclusionQueryNV = void function();
alias glbfn_glGetOcclusionQueryivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetOcclusionQueryuivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glProgramBufferParametersfvNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramBufferParametersIivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramBufferParametersIuivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGenPathsNV = GLuint function(GLsizei);
alias glbfn_glDeletePathsNV = void function(GLuint, GLsizei);
alias glbfn_glIsPathNV = GLboolean function(GLuint);
alias glbfn_glPathCommandsNV = void function(GLuint, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathCoordsNV = void function(GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCommandsNV = void function(GLuint, GLsizei, GLsizei, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCoordsNV = void function(GLuint, GLsizei, GLsizei, GLenum, const(void)*);
alias glbfn_glPathStringNV = void function(GLuint, GLenum, GLsizei, const(void)*);
alias glbfn_glPathGlyphsNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLsizei, GLenum, const(void)*, GLenum, GLuint, GLfloat);
alias glbfn_glPathGlyphRangeNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
alias glbfn_glWeightPathsNV = void function(GLuint, GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glCopyPathNV = void function(GLuint, GLuint);
alias glbfn_glInterpolatePathsNV = void function(GLuint, GLuint, GLuint, GLfloat);
alias glbfn_glTransformPathNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterivNV = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPathParameteriNV = void function(GLuint, GLenum, GLint);
alias glbfn_glPathParameterfvNV = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterfNV = void function(GLuint, GLenum, GLfloat);
alias glbfn_glPathDashArrayNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glPathStencilFuncNV = void function(GLenum, GLint, GLuint);
alias glbfn_glPathStencilDepthOffsetNV = void function(GLfloat, GLfloat);
alias glbfn_glStencilFillPathNV = void function(GLuint, GLenum, GLuint);
alias glbfn_glStencilStrokePathNV = void function(GLuint, GLint, GLuint);
alias glbfn_glStencilFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glStencilStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathCoverDepthFuncNV = void function(GLenum);
alias glbfn_glCoverFillPathNV = void function(GLuint, GLenum);
alias glbfn_glCoverStrokePathNV = void function(GLuint, GLenum);
alias glbfn_glCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPathParameterivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetPathParameterfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetPathCommandsNV = void function(GLuint, GLubyte*);
alias glbfn_glGetPathCoordsNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathDashArrayNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathMetricsNV = void function(GLbitfield, GLsizei, GLenum, const(void)*, GLuint, GLsizei, GLfloat*);
alias glbfn_glGetPathMetricRangeNV = void function(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat*);
alias glbfn_glGetPathSpacingNV = void function(GLenum, GLsizei, GLenum, const(void)*, GLuint, GLfloat, GLfloat, GLenum, GLfloat*);
alias glbfn_glIsPointInFillPathNV = GLboolean function(GLuint, GLuint, GLfloat, GLfloat);
alias glbfn_glIsPointInStrokePathNV = GLboolean function(GLuint, GLfloat, GLfloat);
alias glbfn_glGetPathLengthNV = GLfloat function(GLuint, GLsizei, GLsizei);
alias glbfn_glPointAlongPathNV = GLboolean function(GLuint, GLsizei, GLsizei, GLfloat, GLfloat*, GLfloat*, GLfloat*, GLfloat*);
alias glbfn_glMatrixLoad3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoad3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverFillPathNV = void function(GLuint, GLenum, GLuint, GLenum);
alias glbfn_glStencilThenCoverStrokePathNV = void function(GLuint, GLint, GLuint, GLenum);
alias glbfn_glStencilThenCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathGlyphIndexRangeNV = GLenum function(GLenum, const(void)*, GLbitfield, GLuint, GLfloat, GLuint*);
alias glbfn_glPathGlyphIndexArrayNV = GLenum function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glPathMemoryGlyphIndexArrayNV = GLenum function(GLuint, GLenum, GLsizeiptr, const(void)*, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glProgramPathFragmentInputGenNV = void function(GLuint, GLint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glGetProgramResourcefvNV = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLfloat*);
alias glbfn_glPathColorGenNV = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathTexGenNV = void function(GLenum, GLenum, GLint, const(GLfloat)*);
alias glbfn_glPathFogGenNV = void function(GLenum);
alias glbfn_glGetPathColorGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathColorGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetPathTexGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathTexGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelDataRangeNV = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glFlushPixelDataRangeNV = void function(GLenum);
alias glbfn_glPointParameteriNV = void function(GLenum, GLint);
alias glbfn_glPointParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glPresentFrameKeyedNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
alias glbfn_glPresentFrameDualFillNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetVideoivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideouivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetVideoi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVideoui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glPrimitiveRestartNV = void function();
alias glbfn_glPrimitiveRestartIndexNV = void function(GLuint);
alias glbfn_glCombinerParameterfvNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glCombinerParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCombinerParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glCombinerParameteriNV = void function(GLenum, GLint);
alias glbfn_glCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glCombinerOutputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
alias glbfn_glFinalCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glGetCombinerInputParameterfvNV = void function(GLenum, GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerInputParameterivNV = void function(GLenum, GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetCombinerOutputParameterfvNV = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerOutputParameterivNV = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetFinalCombinerInputParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFinalCombinerInputParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glCombinerStageParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetCombinerStageParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glFramebufferSampleLocationsfvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvNV = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glResolveDepthValuesNV = void function();
alias glbfn_glMakeBufferResidentNV = void function(GLenum, GLenum);
alias glbfn_glMakeBufferNonResidentNV = void function(GLenum);
alias glbfn_glIsBufferResidentNV = GLboolean function(GLenum);
alias glbfn_glMakeNamedBufferResidentNV = void function(GLuint, GLenum);
alias glbfn_glMakeNamedBufferNonResidentNV = void function(GLuint);
alias glbfn_glIsNamedBufferResidentNV = GLboolean function(GLuint);
alias glbfn_glGetBufferParameterui64vNV = void function(GLenum, GLenum, GLuint64EXT*);
alias glbfn_glGetNamedBufferParameterui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glGetIntegerui64vNV = void function(GLenum, GLuint64EXT*);
alias glbfn_glUniformui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniformui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniformui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniformui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glTextureBarrierNV = void function();
alias glbfn_glTexImage2DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glBeginTransformFeedbackNV = void function(GLenum);
alias glbfn_glEndTransformFeedbackNV = void function();
alias glbfn_glTransformFeedbackAttribsNV = void function(GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindBufferRangeNV = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetNV = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseNV = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsNV = void function(GLuint, GLsizei, const(GLint)*, GLenum);
alias glbfn_glActiveVaryingNV = void function(GLuint, const(GLchar)*);
alias glbfn_glGetVaryingLocationNV = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveVaryingNV = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glGetTransformFeedbackVaryingNV = void function(GLuint, GLuint, GLint*);
alias glbfn_glTransformFeedbackStreamAttribsNV = void function(GLsizei, const(GLint)*, GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacksNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacksNV = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedbackNV = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedbackNV = void function();
alias glbfn_glResumeTransformFeedbackNV = void function();
alias glbfn_glDrawTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glVDPAUInitNV = void function(const(void)*, const(void)*);
alias glbfn_glVDPAUFiniNV = void function();
alias glbfn_glVDPAURegisterVideoSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAURegisterOutputSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAUIsSurfaceNV = GLboolean function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUUnregisterSurfaceNV = void function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUGetSurfaceivNV = void function(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glVDPAUSurfaceAccessNV = void function(GLvdpauSurfaceNV, GLenum);
alias glbfn_glVDPAUMapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glVDPAUUnmapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glFlushVertexArrayRangeNV = void function();
alias glbfn_glVertexArrayRangeNV = void function(GLsizei, const(void)*);
alias glbfn_glVertexAttribL1i64NV = void function(GLuint, GLint64EXT);
alias glbfn_glVertexAttribL2i64NV = void function(GLuint, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL3i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL4i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL1i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL2i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL3i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL4i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL1ui64NV = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL2ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL3ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL4ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL2ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL3ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL4ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVertexAttribLui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glVertexAttribLFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glBufferAddressRangeNV = void function(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
alias glbfn_glVertexFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glNormalFormatNV = void function(GLenum, GLsizei);
alias glbfn_glColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glIndexFormatNV = void function(GLenum, GLsizei);
alias glbfn_glTexCoordFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glEdgeFlagFormatNV = void function(GLsizei);
alias glbfn_glSecondaryColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glFogCoordFormatNV = void function(GLenum, GLsizei);
alias glbfn_glVertexAttribFormatNV = void function(GLuint, GLint, GLenum, GLboolean, GLsizei);
alias glbfn_glVertexAttribIFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glGetIntegerui64i_vNV = void function(GLenum, GLuint, GLuint64EXT*);
alias glbfn_glAreProgramsResidentNV = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindProgramNV = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glExecuteProgramNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGenProgramsNV = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramParameterdvNV = void function(GLenum, GLuint, GLenum, GLdouble*);
alias glbfn_glGetProgramParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glGetProgramivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramStringNV = void function(GLuint, GLenum, GLubyte*);
alias glbfn_glGetTrackMatrixivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribdvNV = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervNV = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgramNV = GLboolean function(GLuint);
alias glbfn_glLoadProgramNV = void function(GLenum, GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glProgramParameter4dNV = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramParameter4dvNV = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramParameter4fNV = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramParameter4fvNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramParameters4dvNV = void function(GLenum, GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramParameters4fvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glRequestResidentProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glTrackMatrixNV = void function(GLenum, GLuint, GLenum, GLenum);
alias glbfn_glVertexAttribPointerNV = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexAttrib1dNV = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fNV = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sNV = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dNV = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fNV = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sNV = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dNV = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fNV = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sNV = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4dNV = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fNV = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4sNV = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubNV = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4ubvNV = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribs1dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs1fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs1svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs2dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs2fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs2svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs3dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs3fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs3svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs4fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs4svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4ubvNV = void function(GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glVertexAttribI1iEXT = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1uiEXT = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3uiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4uiEXT = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4svEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribIPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuivEXT = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBeginVideoCaptureNV = void function(GLuint);
alias glbfn_glBindVideoCaptureStreamBufferNV = void function(GLuint, GLuint, GLenum, GLintptrARB);
alias glbfn_glBindVideoCaptureStreamTextureNV = void function(GLuint, GLuint, GLenum, GLenum, GLuint);
alias glbfn_glEndVideoCaptureNV = void function(GLuint);
alias glbfn_glGetVideoCaptureivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamivNV = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamfvNV = void function(GLuint, GLuint, GLenum, GLfloat*);
alias glbfn_glGetVideoCaptureStreamdvNV = void function(GLuint, GLuint, GLenum, GLdouble*);
alias glbfn_glVideoCaptureNV = GLenum function(GLuint, GLuint*, GLuint64EXT*);
alias glbfn_glVideoCaptureStreamParameterivNV = void function(GLuint, GLuint, GLenum, const(GLint)*);
alias glbfn_glVideoCaptureStreamParameterfvNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glVideoCaptureStreamParameterdvNV = void function(GLuint, GLuint, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1bOES = void function(GLenum, GLbyte);
alias glbfn_glMultiTexCoord1bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord2bOES = void function(GLenum, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord2bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord3bOES = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord3bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord4bOES = void function(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord4bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glTexCoord1bOES = void function(GLbyte);
alias glbfn_glTexCoord1bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord2bOES = void function(GLbyte, GLbyte);
alias glbfn_glTexCoord2bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord3bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord4bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex2bOES = void function(GLbyte, GLbyte);
alias glbfn_glVertex2bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex3bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex4bvOES = void function(const(GLbyte)*);
alias glbfn_glAlphaFuncxOES = void function(GLenum, GLfixed);
alias glbfn_glClearColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearDepthxOES = void function(GLfixed);
alias glbfn_glClipPlanexOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glColor4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glDepthRangexOES = void function(GLfixed, GLfixed);
alias glbfn_glFogxOES = void function(GLenum, GLfixed);
alias glbfn_glFogxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glFrustumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glGetClipPlanexOES = void function(GLenum, GLfixed*);
alias glbfn_glGetFixedvOES = void function(GLenum, GLfixed*);
alias glbfn_glGetTexEnvxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glLightModelxOES = void function(GLenum, GLfixed);
alias glbfn_glLightModelxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glLightxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glLightxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glLineWidthxOES = void function(GLfixed);
alias glbfn_glLoadMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glMaterialxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glMultMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord4xOES = void function(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glNormal3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glOrthoxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glPointParameterxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glPointSizexOES = void function(GLfixed);
alias glbfn_glPolygonOffsetxOES = void function(GLfixed, GLfixed);
alias glbfn_glRotatexOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glScalexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexEnvxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexEnvxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTexParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTranslatexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glGetLightxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glPointParameterxOES = void function(GLenum, GLfixed);
alias glbfn_glSampleCoveragexOES = void function(GLclampx, GLboolean);
alias glbfn_glAccumxOES = void function(GLenum, GLfixed);
alias glbfn_glBitmapxOES = void function(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const(GLubyte)*);
alias glbfn_glBlendColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearAccumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xvOES = void function(const(GLfixed)*);
alias glbfn_glColor4xvOES = void function(const(GLfixed)*);
alias glbfn_glConvolutionParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glConvolutionParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glEvalCoord1xOES = void function(GLfixed);
alias glbfn_glEvalCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glEvalCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glEvalCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glFeedbackBufferxOES = void function(GLsizei, GLenum, const(GLfixed)*);
alias glbfn_glGetConvolutionParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetHistogramParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetLightxOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMapxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glGetPixelMapxv = void function(GLenum, GLint, GLfixed*);
alias glbfn_glGetTexGenxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexLevelParameterxvOES = void function(GLenum, GLint, GLenum, GLfixed*);
alias glbfn_glIndexxOES = void function(GLfixed);
alias glbfn_glIndexxvOES = void function(const(GLfixed)*);
alias glbfn_glLoadTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMap1xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMap2xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMapGrid1xOES = void function(GLint, GLfixed, GLfixed);
alias glbfn_glMapGrid2xOES = void function(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord1xOES = void function(GLenum, GLfixed);
alias glbfn_glMultiTexCoord1xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord2xOES = void function(GLenum, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord2xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord3xOES = void function(GLenum, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord3xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord4xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glNormal3xvOES = void function(const(GLfixed)*);
alias glbfn_glPassThroughxOES = void function(GLfixed);
alias glbfn_glPixelMapx = void function(GLenum, GLint, const(GLfixed)*);
alias glbfn_glPixelStorex = void function(GLenum, GLfixed);
alias glbfn_glPixelTransferxOES = void function(GLenum, GLfixed);
alias glbfn_glPixelZoomxOES = void function(GLfixed, GLfixed);
alias glbfn_glPrioritizeTexturesxOES = void function(GLsizei, const(GLuint)*, const(GLfixed)*);
alias glbfn_glRasterPos2xOES = void function(GLfixed, GLfixed);
alias glbfn_glRasterPos2xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos3xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos4xvOES = void function(const(GLfixed)*);
alias glbfn_glRectxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRectxvOES = void function(const(GLfixed)*, const(GLfixed)*);
alias glbfn_glTexCoord1xOES = void function(GLfixed);
alias glbfn_glTexCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glTexCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord3xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord4xvOES = void function(const(GLfixed)*);
alias glbfn_glTexGenxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexGenxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glVertex2xOES = void function(GLfixed);
alias glbfn_glVertex2xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex3xOES = void function(GLfixed, GLfixed);
alias glbfn_glVertex3xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex4xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glVertex4xvOES = void function(const(GLfixed)*);
alias glbfn_glQueryMatrixxOES = GLbitfield function(GLfixed*, GLint*);
alias glbfn_glClearDepthfOES = void function(GLclampf);
alias glbfn_glClipPlanefOES = void function(GLenum, const(GLfloat)*);
alias glbfn_glDepthRangefOES = void function(GLclampf, GLclampf);
alias glbfn_glFrustumfOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetClipPlanefOES = void function(GLenum, GLfloat*);
alias glbfn_glOrthofOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glFramebufferTextureMultiviewOVR = void function(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
alias glbfn_glHintPGI = void function(GLenum, GLint);
alias glbfn_glDetailTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetDetailTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glFogFuncSGIS = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetFogFuncSGIS = void function(GLfloat*);
alias glbfn_glSampleMaskSGIS = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternSGIS = void function(GLenum);
alias glbfn_glPixelTexGenParameteriSGIS = void function(GLenum, GLint);
alias glbfn_glPixelTexGenParameterivSGIS = void function(GLenum, const(GLint)*);
alias glbfn_glPixelTexGenParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPixelTexGenParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTexGenParameterivSGIS = void function(GLenum, GLint*);
alias glbfn_glGetPixelTexGenParameterfvSGIS = void function(GLenum, GLfloat*);
alias glbfn_glPointParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glSharpenTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetSharpenTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glTexImage4DSGIS = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage4DSGIS = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureColorMaskSGIS = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetTexFilterFuncSGIS = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glTexFilterFuncSGIS = void function(GLenum, GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glAsyncMarkerSGIX = void function(GLuint);
alias glbfn_glFinishAsyncSGIX = GLint function(GLuint*);
alias glbfn_glPollAsyncSGIX = GLint function(GLuint*);
alias glbfn_glGenAsyncMarkersSGIX = GLuint function(GLsizei);
alias glbfn_glDeleteAsyncMarkersSGIX = void function(GLuint, GLsizei);
alias glbfn_glIsAsyncMarkerSGIX = GLboolean function(GLuint);
alias glbfn_glFlushRasterSGIX = void function();
alias glbfn_glFragmentColorMaterialSGIX = void function(GLenum, GLenum);
alias glbfn_glFragmentLightfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentLightfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentLightivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFragmentLightModelfSGIX = void function(GLenum, GLfloat);
alias glbfn_glFragmentLightModelfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightModeliSGIX = void function(GLenum, GLint);
alias glbfn_glFragmentLightModelivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glFragmentMaterialfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentMaterialfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentMaterialiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentMaterialivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glGetFragmentLightfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentLightivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetFragmentMaterialfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentMaterialivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glLightEnviSGIX = void function(GLenum, GLint);
alias glbfn_glFrameZoomSGIX = void function(GLint);
alias glbfn_glIglooInterfaceSGIX = void function(GLenum, const(void)*);
alias glbfn_glGetInstrumentsSGIX = GLint function();
alias glbfn_glInstrumentsBufferSGIX = void function(GLsizei, GLint*);
alias glbfn_glPollInstrumentsSGIX = GLint function(GLint*);
alias glbfn_glReadInstrumentsSGIX = void function(GLint);
alias glbfn_glStartInstrumentsSGIX = void function();
alias glbfn_glStopInstrumentsSGIX = void function(GLint);
alias glbfn_glGetListParameterfvSGIX = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetListParameterivSGIX = void function(GLuint, GLenum, GLint*);
alias glbfn_glListParameterfSGIX = void function(GLuint, GLenum, GLfloat);
alias glbfn_glListParameterfvSGIX = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glListParameteriSGIX = void function(GLuint, GLenum, GLint);
alias glbfn_glListParameterivSGIX = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPixelTexGenSGIX = void function(GLenum);
alias glbfn_glDeformationMap3dSGIX = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glDeformationMap3fSGIX = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glDeformSGIX = void function(GLbitfield);
alias glbfn_glLoadIdentityDeformationMapSGIX = void function(GLbitfield);
alias glbfn_glReferencePlaneSGIX = void function(const(GLdouble)*);
alias glbfn_glSpriteParameterfSGIX = void function(GLenum, GLfloat);
alias glbfn_glSpriteParameterfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glSpriteParameteriSGIX = void function(GLenum, GLint);
alias glbfn_glSpriteParameterivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glTagSampleBufferSGIX = void function();
alias glbfn_glColorTableSGI = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfvSGI = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameterivSGI = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTableSGI = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTableSGI = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfvSGI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameterivSGI = void function(GLenum, GLenum, GLint*);
alias glbfn_glFinishTextureSUNX = void function();
alias glbfn_glGlobalAlphaFactorbSUN = void function(GLbyte);
alias glbfn_glGlobalAlphaFactorsSUN = void function(GLshort);
alias glbfn_glGlobalAlphaFactoriSUN = void function(GLint);
alias glbfn_glGlobalAlphaFactorfSUN = void function(GLfloat);
alias glbfn_glGlobalAlphaFactordSUN = void function(GLdouble);
alias glbfn_glGlobalAlphaFactorubSUN = void function(GLubyte);
alias glbfn_glGlobalAlphaFactorusSUN = void function(GLushort);
alias glbfn_glGlobalAlphaFactoruiSUN = void function(GLuint);
alias glbfn_glDrawMeshArraysSUN = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glReplacementCodeuiSUN = void function(GLuint);
alias glbfn_glReplacementCodeusSUN = void function(GLushort);
alias glbfn_glReplacementCodeubSUN = void function(GLubyte);
alias glbfn_glReplacementCodeuivSUN = void function(const(GLuint)*);
alias glbfn_glReplacementCodeusvSUN = void function(const(GLushort)*);
alias glbfn_glReplacementCodeubvSUN = void function(const(GLubyte)*);
alias glbfn_glReplacementCodePointerSUN = void function(GLenum, GLsizei, const(void*)*);
alias glbfn_glColor4ubVertex2fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex2fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor4ubVertex3fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex3fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4ubVertex3fSUN = void function(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4ubVertex3fvSUN = void function(const(GLfloat)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4ubVertex3fSUN = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4ubVertex3fvSUN = void function(const(GLuint)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
}



__gshared glbfn_glCullFace glCullFace = function void (GLenum a0) nothrow {
  glCullFace = cast(glbfn_glCullFace)glGetProcAddress(`glCullFace`);
  if (glCullFace is null) assert(0, `OpenGL function 'glCullFace' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCullFace'\n"); }
  glCullFace(a0,);
};
__gshared glbfn_glFrontFace glFrontFace = function void (GLenum a0) nothrow {
  glFrontFace = cast(glbfn_glFrontFace)glGetProcAddress(`glFrontFace`);
  if (glFrontFace is null) assert(0, `OpenGL function 'glFrontFace' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFrontFace'\n"); }
  glFrontFace(a0,);
};
__gshared glbfn_glHint glHint = function void (GLenum a0, GLenum a1) nothrow {
  glHint = cast(glbfn_glHint)glGetProcAddress(`glHint`);
  if (glHint is null) assert(0, `OpenGL function 'glHint' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glHint'\n"); }
  glHint(a0,a1,);
};
__gshared glbfn_glLineWidth glLineWidth = function void (GLfloat a0) nothrow {
  glLineWidth = cast(glbfn_glLineWidth)glGetProcAddress(`glLineWidth`);
  if (glLineWidth is null) assert(0, `OpenGL function 'glLineWidth' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLineWidth'\n"); }
  glLineWidth(a0,);
};
__gshared glbfn_glPointSize glPointSize = function void (GLfloat a0) nothrow {
  glPointSize = cast(glbfn_glPointSize)glGetProcAddress(`glPointSize`);
  if (glPointSize is null) assert(0, `OpenGL function 'glPointSize' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointSize'\n"); }
  glPointSize(a0,);
};
__gshared glbfn_glPolygonMode glPolygonMode = function void (GLenum a0, GLenum a1) nothrow {
  glPolygonMode = cast(glbfn_glPolygonMode)glGetProcAddress(`glPolygonMode`);
  if (glPolygonMode is null) assert(0, `OpenGL function 'glPolygonMode' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPolygonMode'\n"); }
  glPolygonMode(a0,a1,);
};
__gshared glbfn_glScissor glScissor = function void (GLint a0, GLint a1, GLsizei a2, GLsizei a3) nothrow {
  glScissor = cast(glbfn_glScissor)glGetProcAddress(`glScissor`);
  if (glScissor is null) assert(0, `OpenGL function 'glScissor' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glScissor'\n"); }
  glScissor(a0,a1,a2,a3,);
};
__gshared glbfn_glTexParameterf glTexParameterf = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glTexParameterf = cast(glbfn_glTexParameterf)glGetProcAddress(`glTexParameterf`);
  if (glTexParameterf is null) assert(0, `OpenGL function 'glTexParameterf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterf'\n"); }
  glTexParameterf(a0,a1,a2,);
};
__gshared glbfn_glTexParameterfv glTexParameterfv = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glTexParameterfv = cast(glbfn_glTexParameterfv)glGetProcAddress(`glTexParameterfv`);
  if (glTexParameterfv is null) assert(0, `OpenGL function 'glTexParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterfv'\n"); }
  glTexParameterfv(a0,a1,a2,);
};
__gshared glbfn_glTexParameteri glTexParameteri = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glTexParameteri = cast(glbfn_glTexParameteri)glGetProcAddress(`glTexParameteri`);
  if (glTexParameteri is null) assert(0, `OpenGL function 'glTexParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameteri'\n"); }
  glTexParameteri(a0,a1,a2,);
};
__gshared glbfn_glTexParameteriv glTexParameteriv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glTexParameteriv = cast(glbfn_glTexParameteriv)glGetProcAddress(`glTexParameteriv`);
  if (glTexParameteriv is null) assert(0, `OpenGL function 'glTexParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameteriv'\n"); }
  glTexParameteriv(a0,a1,a2,);
};
__gshared glbfn_glTexImage1D glTexImage1D = function void (GLenum a0, GLint a1, GLint a2, GLsizei a3, GLint a4, GLenum a5, GLenum a6, const(void)* a7) nothrow {
  glTexImage1D = cast(glbfn_glTexImage1D)glGetProcAddress(`glTexImage1D`);
  if (glTexImage1D is null) assert(0, `OpenGL function 'glTexImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage1D'\n"); }
  glTexImage1D(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTexImage2D glTexImage2D = function void (GLenum a0, GLint a1, GLint a2, GLsizei a3, GLsizei a4, GLint a5, GLenum a6, GLenum a7, const(void)* a8) nothrow {
  glTexImage2D = cast(glbfn_glTexImage2D)glGetProcAddress(`glTexImage2D`);
  if (glTexImage2D is null) assert(0, `OpenGL function 'glTexImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage2D'\n"); }
  glTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glDrawBuffer glDrawBuffer = function void (GLenum a0) nothrow {
  glDrawBuffer = cast(glbfn_glDrawBuffer)glGetProcAddress(`glDrawBuffer`);
  if (glDrawBuffer is null) assert(0, `OpenGL function 'glDrawBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawBuffer'\n"); }
  glDrawBuffer(a0,);
};
__gshared glbfn_glClear glClear = function void (GLbitfield a0) nothrow {
  glClear = cast(glbfn_glClear)glGetProcAddress(`glClear`);
  if (glClear is null) assert(0, `OpenGL function 'glClear' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClear'\n"); }
  glClear(a0,);
};
__gshared glbfn_glClearColor glClearColor = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glClearColor = cast(glbfn_glClearColor)glGetProcAddress(`glClearColor`);
  if (glClearColor is null) assert(0, `OpenGL function 'glClearColor' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearColor'\n"); }
  glClearColor(a0,a1,a2,a3,);
};
__gshared glbfn_glClearStencil glClearStencil = function void (GLint a0) nothrow {
  glClearStencil = cast(glbfn_glClearStencil)glGetProcAddress(`glClearStencil`);
  if (glClearStencil is null) assert(0, `OpenGL function 'glClearStencil' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearStencil'\n"); }
  glClearStencil(a0,);
};
__gshared glbfn_glClearDepth glClearDepth = function void (GLdouble a0) nothrow {
  glClearDepth = cast(glbfn_glClearDepth)glGetProcAddress(`glClearDepth`);
  if (glClearDepth is null) assert(0, `OpenGL function 'glClearDepth' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearDepth'\n"); }
  glClearDepth(a0,);
};
__gshared glbfn_glStencilMask glStencilMask = function void (GLuint a0) nothrow {
  glStencilMask = cast(glbfn_glStencilMask)glGetProcAddress(`glStencilMask`);
  if (glStencilMask is null) assert(0, `OpenGL function 'glStencilMask' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilMask'\n"); }
  glStencilMask(a0,);
};
__gshared glbfn_glColorMask glColorMask = function void (GLboolean a0, GLboolean a1, GLboolean a2, GLboolean a3) nothrow {
  glColorMask = cast(glbfn_glColorMask)glGetProcAddress(`glColorMask`);
  if (glColorMask is null) assert(0, `OpenGL function 'glColorMask' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorMask'\n"); }
  glColorMask(a0,a1,a2,a3,);
};
__gshared glbfn_glDepthMask glDepthMask = function void (GLboolean a0) nothrow {
  glDepthMask = cast(glbfn_glDepthMask)glGetProcAddress(`glDepthMask`);
  if (glDepthMask is null) assert(0, `OpenGL function 'glDepthMask' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthMask'\n"); }
  glDepthMask(a0,);
};
__gshared glbfn_glDisable glDisable = function void (GLenum a0) nothrow {
  glDisable = cast(glbfn_glDisable)glGetProcAddress(`glDisable`);
  if (glDisable is null) assert(0, `OpenGL function 'glDisable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisable'\n"); }
  glDisable(a0,);
};
__gshared glbfn_glEnable glEnable = function void (GLenum a0) nothrow {
  glEnable = cast(glbfn_glEnable)glGetProcAddress(`glEnable`);
  if (glEnable is null) assert(0, `OpenGL function 'glEnable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnable'\n"); }
  glEnable(a0,);
};
__gshared glbfn_glFinish glFinish = function void () nothrow {
  glFinish = cast(glbfn_glFinish)glGetProcAddress(`glFinish`);
  if (glFinish is null) assert(0, `OpenGL function 'glFinish' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFinish'\n"); }
  glFinish();
};
__gshared glbfn_glFlush glFlush = function void () nothrow {
  glFlush = cast(glbfn_glFlush)glGetProcAddress(`glFlush`);
  if (glFlush is null) assert(0, `OpenGL function 'glFlush' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlush'\n"); }
  glFlush();
};
__gshared glbfn_glBlendFunc glBlendFunc = function void (GLenum a0, GLenum a1) nothrow {
  glBlendFunc = cast(glbfn_glBlendFunc)glGetProcAddress(`glBlendFunc`);
  if (glBlendFunc is null) assert(0, `OpenGL function 'glBlendFunc' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFunc'\n"); }
  glBlendFunc(a0,a1,);
};
__gshared glbfn_glLogicOp glLogicOp = function void (GLenum a0) nothrow {
  glLogicOp = cast(glbfn_glLogicOp)glGetProcAddress(`glLogicOp`);
  if (glLogicOp is null) assert(0, `OpenGL function 'glLogicOp' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLogicOp'\n"); }
  glLogicOp(a0,);
};
__gshared glbfn_glStencilFunc glStencilFunc = function void (GLenum a0, GLint a1, GLuint a2) nothrow {
  glStencilFunc = cast(glbfn_glStencilFunc)glGetProcAddress(`glStencilFunc`);
  if (glStencilFunc is null) assert(0, `OpenGL function 'glStencilFunc' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilFunc'\n"); }
  glStencilFunc(a0,a1,a2,);
};
__gshared glbfn_glStencilOp glStencilOp = function void (GLenum a0, GLenum a1, GLenum a2) nothrow {
  glStencilOp = cast(glbfn_glStencilOp)glGetProcAddress(`glStencilOp`);
  if (glStencilOp is null) assert(0, `OpenGL function 'glStencilOp' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilOp'\n"); }
  glStencilOp(a0,a1,a2,);
};
__gshared glbfn_glDepthFunc glDepthFunc = function void (GLenum a0) nothrow {
  glDepthFunc = cast(glbfn_glDepthFunc)glGetProcAddress(`glDepthFunc`);
  if (glDepthFunc is null) assert(0, `OpenGL function 'glDepthFunc' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthFunc'\n"); }
  glDepthFunc(a0,);
};
__gshared glbfn_glPixelStoref glPixelStoref = function void (GLenum a0, GLfloat a1) nothrow {
  glPixelStoref = cast(glbfn_glPixelStoref)glGetProcAddress(`glPixelStoref`);
  if (glPixelStoref is null) assert(0, `OpenGL function 'glPixelStoref' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelStoref'\n"); }
  glPixelStoref(a0,a1,);
};
__gshared glbfn_glPixelStorei glPixelStorei = function void (GLenum a0, GLint a1) nothrow {
  glPixelStorei = cast(glbfn_glPixelStorei)glGetProcAddress(`glPixelStorei`);
  if (glPixelStorei is null) assert(0, `OpenGL function 'glPixelStorei' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelStorei'\n"); }
  glPixelStorei(a0,a1,);
};
__gshared glbfn_glReadBuffer glReadBuffer = function void (GLenum a0) nothrow {
  glReadBuffer = cast(glbfn_glReadBuffer)glGetProcAddress(`glReadBuffer`);
  if (glReadBuffer is null) assert(0, `OpenGL function 'glReadBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReadBuffer'\n"); }
  glReadBuffer(a0,);
};
__gshared glbfn_glReadPixels glReadPixels = function void (GLint a0, GLint a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, void* a6) nothrow {
  glReadPixels = cast(glbfn_glReadPixels)glGetProcAddress(`glReadPixels`);
  if (glReadPixels is null) assert(0, `OpenGL function 'glReadPixels' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReadPixels'\n"); }
  glReadPixels(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetBooleanv glGetBooleanv = function void (GLenum a0, GLboolean* a1) nothrow {
  glGetBooleanv = cast(glbfn_glGetBooleanv)glGetProcAddress(`glGetBooleanv`);
  if (glGetBooleanv is null) assert(0, `OpenGL function 'glGetBooleanv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBooleanv'\n"); }
  glGetBooleanv(a0,a1,);
};
__gshared glbfn_glGetDoublev glGetDoublev = function void (GLenum a0, GLdouble* a1) nothrow {
  glGetDoublev = cast(glbfn_glGetDoublev)glGetProcAddress(`glGetDoublev`);
  if (glGetDoublev is null) assert(0, `OpenGL function 'glGetDoublev' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDoublev'\n"); }
  glGetDoublev(a0,a1,);
};
__gshared glbfn_glGetError glGetError = function GLenum () nothrow {
  glGetError = cast(glbfn_glGetError)glGetProcAddress(`glGetError`);
  if (glGetError is null) assert(0, `OpenGL function 'glGetError' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetError'\n"); }
  return glGetError();
};
__gshared glbfn_glGetFloatv glGetFloatv = function void (GLenum a0, GLfloat* a1) nothrow {
  glGetFloatv = cast(glbfn_glGetFloatv)glGetProcAddress(`glGetFloatv`);
  if (glGetFloatv is null) assert(0, `OpenGL function 'glGetFloatv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFloatv'\n"); }
  glGetFloatv(a0,a1,);
};
__gshared glbfn_glGetIntegerv glGetIntegerv = function void (GLenum a0, GLint* a1) nothrow {
  glGetIntegerv = cast(glbfn_glGetIntegerv)glGetProcAddress(`glGetIntegerv`);
  if (glGetIntegerv is null) assert(0, `OpenGL function 'glGetIntegerv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetIntegerv'\n"); }
  glGetIntegerv(a0,a1,);
};
__gshared glbfn_glGetString glGetString = function const(char)* (GLenum a0) nothrow {
  glGetString = cast(glbfn_glGetString)glGetProcAddress(`glGetString`);
  if (glGetString is null) assert(0, `OpenGL function 'glGetString' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetString'\n"); }
  return glGetString(a0,);
};
__gshared glbfn_glGetTexImage glGetTexImage = function void (GLenum a0, GLint a1, GLenum a2, GLenum a3, void* a4) nothrow {
  glGetTexImage = cast(glbfn_glGetTexImage)glGetProcAddress(`glGetTexImage`);
  if (glGetTexImage is null) assert(0, `OpenGL function 'glGetTexImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexImage'\n"); }
  glGetTexImage(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetTexParameterfv glGetTexParameterfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetTexParameterfv = cast(glbfn_glGetTexParameterfv)glGetProcAddress(`glGetTexParameterfv`);
  if (glGetTexParameterfv is null) assert(0, `OpenGL function 'glGetTexParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameterfv'\n"); }
  glGetTexParameterfv(a0,a1,a2,);
};
__gshared glbfn_glGetTexParameteriv glGetTexParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetTexParameteriv = cast(glbfn_glGetTexParameteriv)glGetProcAddress(`glGetTexParameteriv`);
  if (glGetTexParameteriv is null) assert(0, `OpenGL function 'glGetTexParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameteriv'\n"); }
  glGetTexParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetTexLevelParameterfv glGetTexLevelParameterfv = function void (GLenum a0, GLint a1, GLenum a2, GLfloat* a3) nothrow {
  glGetTexLevelParameterfv = cast(glbfn_glGetTexLevelParameterfv)glGetProcAddress(`glGetTexLevelParameterfv`);
  if (glGetTexLevelParameterfv is null) assert(0, `OpenGL function 'glGetTexLevelParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexLevelParameterfv'\n"); }
  glGetTexLevelParameterfv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTexLevelParameteriv glGetTexLevelParameteriv = function void (GLenum a0, GLint a1, GLenum a2, GLint* a3) nothrow {
  glGetTexLevelParameteriv = cast(glbfn_glGetTexLevelParameteriv)glGetProcAddress(`glGetTexLevelParameteriv`);
  if (glGetTexLevelParameteriv is null) assert(0, `OpenGL function 'glGetTexLevelParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexLevelParameteriv'\n"); }
  glGetTexLevelParameteriv(a0,a1,a2,a3,);
};
__gshared glbfn_glIsEnabled glIsEnabled = function GLboolean (GLenum a0) nothrow {
  glIsEnabled = cast(glbfn_glIsEnabled)glGetProcAddress(`glIsEnabled`);
  if (glIsEnabled is null) assert(0, `OpenGL function 'glIsEnabled' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsEnabled'\n"); }
  return glIsEnabled(a0,);
};
__gshared glbfn_glDepthRange glDepthRange = function void (GLdouble a0, GLdouble a1) nothrow {
  glDepthRange = cast(glbfn_glDepthRange)glGetProcAddress(`glDepthRange`);
  if (glDepthRange is null) assert(0, `OpenGL function 'glDepthRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthRange'\n"); }
  glDepthRange(a0,a1,);
};
__gshared glbfn_glViewport glViewport = function void (GLint a0, GLint a1, GLsizei a2, GLsizei a3) nothrow {
  glViewport = cast(glbfn_glViewport)glGetProcAddress(`glViewport`);
  if (glViewport is null) assert(0, `OpenGL function 'glViewport' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glViewport'\n"); }
  glViewport(a0,a1,a2,a3,);
};
__gshared glbfn_glNewList glNewList = function void (GLuint a0, GLenum a1) nothrow {
  glNewList = cast(glbfn_glNewList)glGetProcAddress(`glNewList`);
  if (glNewList is null) assert(0, `OpenGL function 'glNewList' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNewList'\n"); }
  glNewList(a0,a1,);
};
__gshared glbfn_glEndList glEndList = function void () nothrow {
  glEndList = cast(glbfn_glEndList)glGetProcAddress(`glEndList`);
  if (glEndList is null) assert(0, `OpenGL function 'glEndList' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndList'\n"); }
  glEndList();
};
__gshared glbfn_glCallList glCallList = function void (GLuint a0) nothrow {
  glCallList = cast(glbfn_glCallList)glGetProcAddress(`glCallList`);
  if (glCallList is null) assert(0, `OpenGL function 'glCallList' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCallList'\n"); }
  glCallList(a0,);
};
__gshared glbfn_glCallLists glCallLists = function void (GLsizei a0, GLenum a1, const(void)* a2) nothrow {
  glCallLists = cast(glbfn_glCallLists)glGetProcAddress(`glCallLists`);
  if (glCallLists is null) assert(0, `OpenGL function 'glCallLists' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCallLists'\n"); }
  glCallLists(a0,a1,a2,);
};
__gshared glbfn_glDeleteLists glDeleteLists = function void (GLuint a0, GLsizei a1) nothrow {
  glDeleteLists = cast(glbfn_glDeleteLists)glGetProcAddress(`glDeleteLists`);
  if (glDeleteLists is null) assert(0, `OpenGL function 'glDeleteLists' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteLists'\n"); }
  glDeleteLists(a0,a1,);
};
__gshared glbfn_glGenLists glGenLists = function GLuint (GLsizei a0) nothrow {
  glGenLists = cast(glbfn_glGenLists)glGetProcAddress(`glGenLists`);
  if (glGenLists is null) assert(0, `OpenGL function 'glGenLists' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenLists'\n"); }
  return glGenLists(a0,);
};
__gshared glbfn_glListBase glListBase = function void (GLuint a0) nothrow {
  glListBase = cast(glbfn_glListBase)glGetProcAddress(`glListBase`);
  if (glListBase is null) assert(0, `OpenGL function 'glListBase' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glListBase'\n"); }
  glListBase(a0,);
};
__gshared glbfn_glBegin glBegin = function void (GLenum a0) nothrow {
  glBegin = cast(glbfn_glBegin)glGetProcAddress(`glBegin`);
  if (glBegin is null) assert(0, `OpenGL function 'glBegin' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBegin'\n"); }
  glBegin(a0,);
};
__gshared glbfn_glBitmap glBitmap = function void (GLsizei a0, GLsizei a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, const(GLubyte)* a6) nothrow {
  glBitmap = cast(glbfn_glBitmap)glGetProcAddress(`glBitmap`);
  if (glBitmap is null) assert(0, `OpenGL function 'glBitmap' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBitmap'\n"); }
  glBitmap(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glColor3b glColor3b = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glColor3b = cast(glbfn_glColor3b)glGetProcAddress(`glColor3b`);
  if (glColor3b is null) assert(0, `OpenGL function 'glColor3b' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3b'\n"); }
  glColor3b(a0,a1,a2,);
};
__gshared glbfn_glColor3bv glColor3bv = function void (const(GLbyte)* a0) nothrow {
  glColor3bv = cast(glbfn_glColor3bv)glGetProcAddress(`glColor3bv`);
  if (glColor3bv is null) assert(0, `OpenGL function 'glColor3bv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3bv'\n"); }
  glColor3bv(a0,);
};
__gshared glbfn_glColor3d glColor3d = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glColor3d = cast(glbfn_glColor3d)glGetProcAddress(`glColor3d`);
  if (glColor3d is null) assert(0, `OpenGL function 'glColor3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3d'\n"); }
  glColor3d(a0,a1,a2,);
};
__gshared glbfn_glColor3dv glColor3dv = function void (const(GLdouble)* a0) nothrow {
  glColor3dv = cast(glbfn_glColor3dv)glGetProcAddress(`glColor3dv`);
  if (glColor3dv is null) assert(0, `OpenGL function 'glColor3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3dv'\n"); }
  glColor3dv(a0,);
};
__gshared glbfn_glColor3f glColor3f = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glColor3f = cast(glbfn_glColor3f)glGetProcAddress(`glColor3f`);
  if (glColor3f is null) assert(0, `OpenGL function 'glColor3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3f'\n"); }
  glColor3f(a0,a1,a2,);
};
__gshared glbfn_glColor3fv glColor3fv = function void (const(GLfloat)* a0) nothrow {
  glColor3fv = cast(glbfn_glColor3fv)glGetProcAddress(`glColor3fv`);
  if (glColor3fv is null) assert(0, `OpenGL function 'glColor3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3fv'\n"); }
  glColor3fv(a0,);
};
__gshared glbfn_glColor3i glColor3i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glColor3i = cast(glbfn_glColor3i)glGetProcAddress(`glColor3i`);
  if (glColor3i is null) assert(0, `OpenGL function 'glColor3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3i'\n"); }
  glColor3i(a0,a1,a2,);
};
__gshared glbfn_glColor3iv glColor3iv = function void (const(GLint)* a0) nothrow {
  glColor3iv = cast(glbfn_glColor3iv)glGetProcAddress(`glColor3iv`);
  if (glColor3iv is null) assert(0, `OpenGL function 'glColor3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3iv'\n"); }
  glColor3iv(a0,);
};
__gshared glbfn_glColor3s glColor3s = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glColor3s = cast(glbfn_glColor3s)glGetProcAddress(`glColor3s`);
  if (glColor3s is null) assert(0, `OpenGL function 'glColor3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3s'\n"); }
  glColor3s(a0,a1,a2,);
};
__gshared glbfn_glColor3sv glColor3sv = function void (const(GLshort)* a0) nothrow {
  glColor3sv = cast(glbfn_glColor3sv)glGetProcAddress(`glColor3sv`);
  if (glColor3sv is null) assert(0, `OpenGL function 'glColor3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3sv'\n"); }
  glColor3sv(a0,);
};
__gshared glbfn_glColor3ub glColor3ub = function void (GLubyte a0, GLubyte a1, GLubyte a2) nothrow {
  glColor3ub = cast(glbfn_glColor3ub)glGetProcAddress(`glColor3ub`);
  if (glColor3ub is null) assert(0, `OpenGL function 'glColor3ub' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3ub'\n"); }
  glColor3ub(a0,a1,a2,);
};
__gshared glbfn_glColor3ubv glColor3ubv = function void (const(GLubyte)* a0) nothrow {
  glColor3ubv = cast(glbfn_glColor3ubv)glGetProcAddress(`glColor3ubv`);
  if (glColor3ubv is null) assert(0, `OpenGL function 'glColor3ubv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3ubv'\n"); }
  glColor3ubv(a0,);
};
__gshared glbfn_glColor3ui glColor3ui = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glColor3ui = cast(glbfn_glColor3ui)glGetProcAddress(`glColor3ui`);
  if (glColor3ui is null) assert(0, `OpenGL function 'glColor3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3ui'\n"); }
  glColor3ui(a0,a1,a2,);
};
__gshared glbfn_glColor3uiv glColor3uiv = function void (const(GLuint)* a0) nothrow {
  glColor3uiv = cast(glbfn_glColor3uiv)glGetProcAddress(`glColor3uiv`);
  if (glColor3uiv is null) assert(0, `OpenGL function 'glColor3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3uiv'\n"); }
  glColor3uiv(a0,);
};
__gshared glbfn_glColor3us glColor3us = function void (GLushort a0, GLushort a1, GLushort a2) nothrow {
  glColor3us = cast(glbfn_glColor3us)glGetProcAddress(`glColor3us`);
  if (glColor3us is null) assert(0, `OpenGL function 'glColor3us' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3us'\n"); }
  glColor3us(a0,a1,a2,);
};
__gshared glbfn_glColor3usv glColor3usv = function void (const(GLushort)* a0) nothrow {
  glColor3usv = cast(glbfn_glColor3usv)glGetProcAddress(`glColor3usv`);
  if (glColor3usv is null) assert(0, `OpenGL function 'glColor3usv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3usv'\n"); }
  glColor3usv(a0,);
};
__gshared glbfn_glColor4b glColor4b = function void (GLbyte a0, GLbyte a1, GLbyte a2, GLbyte a3) nothrow {
  glColor4b = cast(glbfn_glColor4b)glGetProcAddress(`glColor4b`);
  if (glColor4b is null) assert(0, `OpenGL function 'glColor4b' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4b'\n"); }
  glColor4b(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4bv glColor4bv = function void (const(GLbyte)* a0) nothrow {
  glColor4bv = cast(glbfn_glColor4bv)glGetProcAddress(`glColor4bv`);
  if (glColor4bv is null) assert(0, `OpenGL function 'glColor4bv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4bv'\n"); }
  glColor4bv(a0,);
};
__gshared glbfn_glColor4d glColor4d = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glColor4d = cast(glbfn_glColor4d)glGetProcAddress(`glColor4d`);
  if (glColor4d is null) assert(0, `OpenGL function 'glColor4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4d'\n"); }
  glColor4d(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4dv glColor4dv = function void (const(GLdouble)* a0) nothrow {
  glColor4dv = cast(glbfn_glColor4dv)glGetProcAddress(`glColor4dv`);
  if (glColor4dv is null) assert(0, `OpenGL function 'glColor4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4dv'\n"); }
  glColor4dv(a0,);
};
__gshared glbfn_glColor4f glColor4f = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glColor4f = cast(glbfn_glColor4f)glGetProcAddress(`glColor4f`);
  if (glColor4f is null) assert(0, `OpenGL function 'glColor4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4f'\n"); }
  glColor4f(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4fv glColor4fv = function void (const(GLfloat)* a0) nothrow {
  glColor4fv = cast(glbfn_glColor4fv)glGetProcAddress(`glColor4fv`);
  if (glColor4fv is null) assert(0, `OpenGL function 'glColor4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4fv'\n"); }
  glColor4fv(a0,);
};
__gshared glbfn_glColor4i glColor4i = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glColor4i = cast(glbfn_glColor4i)glGetProcAddress(`glColor4i`);
  if (glColor4i is null) assert(0, `OpenGL function 'glColor4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4i'\n"); }
  glColor4i(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4iv glColor4iv = function void (const(GLint)* a0) nothrow {
  glColor4iv = cast(glbfn_glColor4iv)glGetProcAddress(`glColor4iv`);
  if (glColor4iv is null) assert(0, `OpenGL function 'glColor4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4iv'\n"); }
  glColor4iv(a0,);
};
__gshared glbfn_glColor4s glColor4s = function void (GLshort a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glColor4s = cast(glbfn_glColor4s)glGetProcAddress(`glColor4s`);
  if (glColor4s is null) assert(0, `OpenGL function 'glColor4s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4s'\n"); }
  glColor4s(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4sv glColor4sv = function void (const(GLshort)* a0) nothrow {
  glColor4sv = cast(glbfn_glColor4sv)glGetProcAddress(`glColor4sv`);
  if (glColor4sv is null) assert(0, `OpenGL function 'glColor4sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4sv'\n"); }
  glColor4sv(a0,);
};
__gshared glbfn_glColor4ub glColor4ub = function void (GLubyte a0, GLubyte a1, GLubyte a2, GLubyte a3) nothrow {
  glColor4ub = cast(glbfn_glColor4ub)glGetProcAddress(`glColor4ub`);
  if (glColor4ub is null) assert(0, `OpenGL function 'glColor4ub' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4ub'\n"); }
  glColor4ub(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4ubv glColor4ubv = function void (const(GLubyte)* a0) nothrow {
  glColor4ubv = cast(glbfn_glColor4ubv)glGetProcAddress(`glColor4ubv`);
  if (glColor4ubv is null) assert(0, `OpenGL function 'glColor4ubv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4ubv'\n"); }
  glColor4ubv(a0,);
};
__gshared glbfn_glColor4ui glColor4ui = function void (GLuint a0, GLuint a1, GLuint a2, GLuint a3) nothrow {
  glColor4ui = cast(glbfn_glColor4ui)glGetProcAddress(`glColor4ui`);
  if (glColor4ui is null) assert(0, `OpenGL function 'glColor4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4ui'\n"); }
  glColor4ui(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4uiv glColor4uiv = function void (const(GLuint)* a0) nothrow {
  glColor4uiv = cast(glbfn_glColor4uiv)glGetProcAddress(`glColor4uiv`);
  if (glColor4uiv is null) assert(0, `OpenGL function 'glColor4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4uiv'\n"); }
  glColor4uiv(a0,);
};
__gshared glbfn_glColor4us glColor4us = function void (GLushort a0, GLushort a1, GLushort a2, GLushort a3) nothrow {
  glColor4us = cast(glbfn_glColor4us)glGetProcAddress(`glColor4us`);
  if (glColor4us is null) assert(0, `OpenGL function 'glColor4us' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4us'\n"); }
  glColor4us(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4usv glColor4usv = function void (const(GLushort)* a0) nothrow {
  glColor4usv = cast(glbfn_glColor4usv)glGetProcAddress(`glColor4usv`);
  if (glColor4usv is null) assert(0, `OpenGL function 'glColor4usv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4usv'\n"); }
  glColor4usv(a0,);
};
__gshared glbfn_glEdgeFlag glEdgeFlag = function void (GLboolean a0) nothrow {
  glEdgeFlag = cast(glbfn_glEdgeFlag)glGetProcAddress(`glEdgeFlag`);
  if (glEdgeFlag is null) assert(0, `OpenGL function 'glEdgeFlag' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEdgeFlag'\n"); }
  glEdgeFlag(a0,);
};
__gshared glbfn_glEdgeFlagv glEdgeFlagv = function void (const(GLboolean)* a0) nothrow {
  glEdgeFlagv = cast(glbfn_glEdgeFlagv)glGetProcAddress(`glEdgeFlagv`);
  if (glEdgeFlagv is null) assert(0, `OpenGL function 'glEdgeFlagv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEdgeFlagv'\n"); }
  glEdgeFlagv(a0,);
};
__gshared glbfn_glEnd glEnd = function void () nothrow {
  glEnd = cast(glbfn_glEnd)glGetProcAddress(`glEnd`);
  if (glEnd is null) assert(0, `OpenGL function 'glEnd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnd'\n"); }
  glEnd();
};
__gshared glbfn_glIndexd glIndexd = function void (GLdouble a0) nothrow {
  glIndexd = cast(glbfn_glIndexd)glGetProcAddress(`glIndexd`);
  if (glIndexd is null) assert(0, `OpenGL function 'glIndexd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexd'\n"); }
  glIndexd(a0,);
};
__gshared glbfn_glIndexdv glIndexdv = function void (const(GLdouble)* a0) nothrow {
  glIndexdv = cast(glbfn_glIndexdv)glGetProcAddress(`glIndexdv`);
  if (glIndexdv is null) assert(0, `OpenGL function 'glIndexdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexdv'\n"); }
  glIndexdv(a0,);
};
__gshared glbfn_glIndexf glIndexf = function void (GLfloat a0) nothrow {
  glIndexf = cast(glbfn_glIndexf)glGetProcAddress(`glIndexf`);
  if (glIndexf is null) assert(0, `OpenGL function 'glIndexf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexf'\n"); }
  glIndexf(a0,);
};
__gshared glbfn_glIndexfv glIndexfv = function void (const(GLfloat)* a0) nothrow {
  glIndexfv = cast(glbfn_glIndexfv)glGetProcAddress(`glIndexfv`);
  if (glIndexfv is null) assert(0, `OpenGL function 'glIndexfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexfv'\n"); }
  glIndexfv(a0,);
};
__gshared glbfn_glIndexi glIndexi = function void (GLint a0) nothrow {
  glIndexi = cast(glbfn_glIndexi)glGetProcAddress(`glIndexi`);
  if (glIndexi is null) assert(0, `OpenGL function 'glIndexi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexi'\n"); }
  glIndexi(a0,);
};
__gshared glbfn_glIndexiv glIndexiv = function void (const(GLint)* a0) nothrow {
  glIndexiv = cast(glbfn_glIndexiv)glGetProcAddress(`glIndexiv`);
  if (glIndexiv is null) assert(0, `OpenGL function 'glIndexiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexiv'\n"); }
  glIndexiv(a0,);
};
__gshared glbfn_glIndexs glIndexs = function void (GLshort a0) nothrow {
  glIndexs = cast(glbfn_glIndexs)glGetProcAddress(`glIndexs`);
  if (glIndexs is null) assert(0, `OpenGL function 'glIndexs' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexs'\n"); }
  glIndexs(a0,);
};
__gshared glbfn_glIndexsv glIndexsv = function void (const(GLshort)* a0) nothrow {
  glIndexsv = cast(glbfn_glIndexsv)glGetProcAddress(`glIndexsv`);
  if (glIndexsv is null) assert(0, `OpenGL function 'glIndexsv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexsv'\n"); }
  glIndexsv(a0,);
};
__gshared glbfn_glNormal3b glNormal3b = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glNormal3b = cast(glbfn_glNormal3b)glGetProcAddress(`glNormal3b`);
  if (glNormal3b is null) assert(0, `OpenGL function 'glNormal3b' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3b'\n"); }
  glNormal3b(a0,a1,a2,);
};
__gshared glbfn_glNormal3bv glNormal3bv = function void (const(GLbyte)* a0) nothrow {
  glNormal3bv = cast(glbfn_glNormal3bv)glGetProcAddress(`glNormal3bv`);
  if (glNormal3bv is null) assert(0, `OpenGL function 'glNormal3bv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3bv'\n"); }
  glNormal3bv(a0,);
};
__gshared glbfn_glNormal3d glNormal3d = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glNormal3d = cast(glbfn_glNormal3d)glGetProcAddress(`glNormal3d`);
  if (glNormal3d is null) assert(0, `OpenGL function 'glNormal3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3d'\n"); }
  glNormal3d(a0,a1,a2,);
};
__gshared glbfn_glNormal3dv glNormal3dv = function void (const(GLdouble)* a0) nothrow {
  glNormal3dv = cast(glbfn_glNormal3dv)glGetProcAddress(`glNormal3dv`);
  if (glNormal3dv is null) assert(0, `OpenGL function 'glNormal3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3dv'\n"); }
  glNormal3dv(a0,);
};
__gshared glbfn_glNormal3f glNormal3f = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glNormal3f = cast(glbfn_glNormal3f)glGetProcAddress(`glNormal3f`);
  if (glNormal3f is null) assert(0, `OpenGL function 'glNormal3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3f'\n"); }
  glNormal3f(a0,a1,a2,);
};
__gshared glbfn_glNormal3fv glNormal3fv = function void (const(GLfloat)* a0) nothrow {
  glNormal3fv = cast(glbfn_glNormal3fv)glGetProcAddress(`glNormal3fv`);
  if (glNormal3fv is null) assert(0, `OpenGL function 'glNormal3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3fv'\n"); }
  glNormal3fv(a0,);
};
__gshared glbfn_glNormal3i glNormal3i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glNormal3i = cast(glbfn_glNormal3i)glGetProcAddress(`glNormal3i`);
  if (glNormal3i is null) assert(0, `OpenGL function 'glNormal3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3i'\n"); }
  glNormal3i(a0,a1,a2,);
};
__gshared glbfn_glNormal3iv glNormal3iv = function void (const(GLint)* a0) nothrow {
  glNormal3iv = cast(glbfn_glNormal3iv)glGetProcAddress(`glNormal3iv`);
  if (glNormal3iv is null) assert(0, `OpenGL function 'glNormal3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3iv'\n"); }
  glNormal3iv(a0,);
};
__gshared glbfn_glNormal3s glNormal3s = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glNormal3s = cast(glbfn_glNormal3s)glGetProcAddress(`glNormal3s`);
  if (glNormal3s is null) assert(0, `OpenGL function 'glNormal3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3s'\n"); }
  glNormal3s(a0,a1,a2,);
};
__gshared glbfn_glNormal3sv glNormal3sv = function void (const(GLshort)* a0) nothrow {
  glNormal3sv = cast(glbfn_glNormal3sv)glGetProcAddress(`glNormal3sv`);
  if (glNormal3sv is null) assert(0, `OpenGL function 'glNormal3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3sv'\n"); }
  glNormal3sv(a0,);
};
__gshared glbfn_glRasterPos2d glRasterPos2d = function void (GLdouble a0, GLdouble a1) nothrow {
  glRasterPos2d = cast(glbfn_glRasterPos2d)glGetProcAddress(`glRasterPos2d`);
  if (glRasterPos2d is null) assert(0, `OpenGL function 'glRasterPos2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2d'\n"); }
  glRasterPos2d(a0,a1,);
};
__gshared glbfn_glRasterPos2dv glRasterPos2dv = function void (const(GLdouble)* a0) nothrow {
  glRasterPos2dv = cast(glbfn_glRasterPos2dv)glGetProcAddress(`glRasterPos2dv`);
  if (glRasterPos2dv is null) assert(0, `OpenGL function 'glRasterPos2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2dv'\n"); }
  glRasterPos2dv(a0,);
};
__gshared glbfn_glRasterPos2f glRasterPos2f = function void (GLfloat a0, GLfloat a1) nothrow {
  glRasterPos2f = cast(glbfn_glRasterPos2f)glGetProcAddress(`glRasterPos2f`);
  if (glRasterPos2f is null) assert(0, `OpenGL function 'glRasterPos2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2f'\n"); }
  glRasterPos2f(a0,a1,);
};
__gshared glbfn_glRasterPos2fv glRasterPos2fv = function void (const(GLfloat)* a0) nothrow {
  glRasterPos2fv = cast(glbfn_glRasterPos2fv)glGetProcAddress(`glRasterPos2fv`);
  if (glRasterPos2fv is null) assert(0, `OpenGL function 'glRasterPos2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2fv'\n"); }
  glRasterPos2fv(a0,);
};
__gshared glbfn_glRasterPos2i glRasterPos2i = function void (GLint a0, GLint a1) nothrow {
  glRasterPos2i = cast(glbfn_glRasterPos2i)glGetProcAddress(`glRasterPos2i`);
  if (glRasterPos2i is null) assert(0, `OpenGL function 'glRasterPos2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2i'\n"); }
  glRasterPos2i(a0,a1,);
};
__gshared glbfn_glRasterPos2iv glRasterPos2iv = function void (const(GLint)* a0) nothrow {
  glRasterPos2iv = cast(glbfn_glRasterPos2iv)glGetProcAddress(`glRasterPos2iv`);
  if (glRasterPos2iv is null) assert(0, `OpenGL function 'glRasterPos2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2iv'\n"); }
  glRasterPos2iv(a0,);
};
__gshared glbfn_glRasterPos2s glRasterPos2s = function void (GLshort a0, GLshort a1) nothrow {
  glRasterPos2s = cast(glbfn_glRasterPos2s)glGetProcAddress(`glRasterPos2s`);
  if (glRasterPos2s is null) assert(0, `OpenGL function 'glRasterPos2s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2s'\n"); }
  glRasterPos2s(a0,a1,);
};
__gshared glbfn_glRasterPos2sv glRasterPos2sv = function void (const(GLshort)* a0) nothrow {
  glRasterPos2sv = cast(glbfn_glRasterPos2sv)glGetProcAddress(`glRasterPos2sv`);
  if (glRasterPos2sv is null) assert(0, `OpenGL function 'glRasterPos2sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2sv'\n"); }
  glRasterPos2sv(a0,);
};
__gshared glbfn_glRasterPos3d glRasterPos3d = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glRasterPos3d = cast(glbfn_glRasterPos3d)glGetProcAddress(`glRasterPos3d`);
  if (glRasterPos3d is null) assert(0, `OpenGL function 'glRasterPos3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3d'\n"); }
  glRasterPos3d(a0,a1,a2,);
};
__gshared glbfn_glRasterPos3dv glRasterPos3dv = function void (const(GLdouble)* a0) nothrow {
  glRasterPos3dv = cast(glbfn_glRasterPos3dv)glGetProcAddress(`glRasterPos3dv`);
  if (glRasterPos3dv is null) assert(0, `OpenGL function 'glRasterPos3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3dv'\n"); }
  glRasterPos3dv(a0,);
};
__gshared glbfn_glRasterPos3f glRasterPos3f = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glRasterPos3f = cast(glbfn_glRasterPos3f)glGetProcAddress(`glRasterPos3f`);
  if (glRasterPos3f is null) assert(0, `OpenGL function 'glRasterPos3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3f'\n"); }
  glRasterPos3f(a0,a1,a2,);
};
__gshared glbfn_glRasterPos3fv glRasterPos3fv = function void (const(GLfloat)* a0) nothrow {
  glRasterPos3fv = cast(glbfn_glRasterPos3fv)glGetProcAddress(`glRasterPos3fv`);
  if (glRasterPos3fv is null) assert(0, `OpenGL function 'glRasterPos3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3fv'\n"); }
  glRasterPos3fv(a0,);
};
__gshared glbfn_glRasterPos3i glRasterPos3i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glRasterPos3i = cast(glbfn_glRasterPos3i)glGetProcAddress(`glRasterPos3i`);
  if (glRasterPos3i is null) assert(0, `OpenGL function 'glRasterPos3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3i'\n"); }
  glRasterPos3i(a0,a1,a2,);
};
__gshared glbfn_glRasterPos3iv glRasterPos3iv = function void (const(GLint)* a0) nothrow {
  glRasterPos3iv = cast(glbfn_glRasterPos3iv)glGetProcAddress(`glRasterPos3iv`);
  if (glRasterPos3iv is null) assert(0, `OpenGL function 'glRasterPos3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3iv'\n"); }
  glRasterPos3iv(a0,);
};
__gshared glbfn_glRasterPos3s glRasterPos3s = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glRasterPos3s = cast(glbfn_glRasterPos3s)glGetProcAddress(`glRasterPos3s`);
  if (glRasterPos3s is null) assert(0, `OpenGL function 'glRasterPos3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3s'\n"); }
  glRasterPos3s(a0,a1,a2,);
};
__gshared glbfn_glRasterPos3sv glRasterPos3sv = function void (const(GLshort)* a0) nothrow {
  glRasterPos3sv = cast(glbfn_glRasterPos3sv)glGetProcAddress(`glRasterPos3sv`);
  if (glRasterPos3sv is null) assert(0, `OpenGL function 'glRasterPos3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3sv'\n"); }
  glRasterPos3sv(a0,);
};
__gshared glbfn_glRasterPos4d glRasterPos4d = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glRasterPos4d = cast(glbfn_glRasterPos4d)glGetProcAddress(`glRasterPos4d`);
  if (glRasterPos4d is null) assert(0, `OpenGL function 'glRasterPos4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4d'\n"); }
  glRasterPos4d(a0,a1,a2,a3,);
};
__gshared glbfn_glRasterPos4dv glRasterPos4dv = function void (const(GLdouble)* a0) nothrow {
  glRasterPos4dv = cast(glbfn_glRasterPos4dv)glGetProcAddress(`glRasterPos4dv`);
  if (glRasterPos4dv is null) assert(0, `OpenGL function 'glRasterPos4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4dv'\n"); }
  glRasterPos4dv(a0,);
};
__gshared glbfn_glRasterPos4f glRasterPos4f = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glRasterPos4f = cast(glbfn_glRasterPos4f)glGetProcAddress(`glRasterPos4f`);
  if (glRasterPos4f is null) assert(0, `OpenGL function 'glRasterPos4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4f'\n"); }
  glRasterPos4f(a0,a1,a2,a3,);
};
__gshared glbfn_glRasterPos4fv glRasterPos4fv = function void (const(GLfloat)* a0) nothrow {
  glRasterPos4fv = cast(glbfn_glRasterPos4fv)glGetProcAddress(`glRasterPos4fv`);
  if (glRasterPos4fv is null) assert(0, `OpenGL function 'glRasterPos4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4fv'\n"); }
  glRasterPos4fv(a0,);
};
__gshared glbfn_glRasterPos4i glRasterPos4i = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glRasterPos4i = cast(glbfn_glRasterPos4i)glGetProcAddress(`glRasterPos4i`);
  if (glRasterPos4i is null) assert(0, `OpenGL function 'glRasterPos4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4i'\n"); }
  glRasterPos4i(a0,a1,a2,a3,);
};
__gshared glbfn_glRasterPos4iv glRasterPos4iv = function void (const(GLint)* a0) nothrow {
  glRasterPos4iv = cast(glbfn_glRasterPos4iv)glGetProcAddress(`glRasterPos4iv`);
  if (glRasterPos4iv is null) assert(0, `OpenGL function 'glRasterPos4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4iv'\n"); }
  glRasterPos4iv(a0,);
};
__gshared glbfn_glRasterPos4s glRasterPos4s = function void (GLshort a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glRasterPos4s = cast(glbfn_glRasterPos4s)glGetProcAddress(`glRasterPos4s`);
  if (glRasterPos4s is null) assert(0, `OpenGL function 'glRasterPos4s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4s'\n"); }
  glRasterPos4s(a0,a1,a2,a3,);
};
__gshared glbfn_glRasterPos4sv glRasterPos4sv = function void (const(GLshort)* a0) nothrow {
  glRasterPos4sv = cast(glbfn_glRasterPos4sv)glGetProcAddress(`glRasterPos4sv`);
  if (glRasterPos4sv is null) assert(0, `OpenGL function 'glRasterPos4sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4sv'\n"); }
  glRasterPos4sv(a0,);
};
__gshared glbfn_glRectd glRectd = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glRectd = cast(glbfn_glRectd)glGetProcAddress(`glRectd`);
  if (glRectd is null) assert(0, `OpenGL function 'glRectd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectd'\n"); }
  glRectd(a0,a1,a2,a3,);
};
__gshared glbfn_glRectdv glRectdv = function void (const(GLdouble)* a0, const(GLdouble)* a1) nothrow {
  glRectdv = cast(glbfn_glRectdv)glGetProcAddress(`glRectdv`);
  if (glRectdv is null) assert(0, `OpenGL function 'glRectdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectdv'\n"); }
  glRectdv(a0,a1,);
};
__gshared glbfn_glRectf glRectf = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glRectf = cast(glbfn_glRectf)glGetProcAddress(`glRectf`);
  if (glRectf is null) assert(0, `OpenGL function 'glRectf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectf'\n"); }
  glRectf(a0,a1,a2,a3,);
};
__gshared glbfn_glRectfv glRectfv = function void (const(GLfloat)* a0, const(GLfloat)* a1) nothrow {
  glRectfv = cast(glbfn_glRectfv)glGetProcAddress(`glRectfv`);
  if (glRectfv is null) assert(0, `OpenGL function 'glRectfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectfv'\n"); }
  glRectfv(a0,a1,);
};
__gshared glbfn_glRecti glRecti = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glRecti = cast(glbfn_glRecti)glGetProcAddress(`glRecti`);
  if (glRecti is null) assert(0, `OpenGL function 'glRecti' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRecti'\n"); }
  glRecti(a0,a1,a2,a3,);
};
__gshared glbfn_glRectiv glRectiv = function void (const(GLint)* a0, const(GLint)* a1) nothrow {
  glRectiv = cast(glbfn_glRectiv)glGetProcAddress(`glRectiv`);
  if (glRectiv is null) assert(0, `OpenGL function 'glRectiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectiv'\n"); }
  glRectiv(a0,a1,);
};
__gshared glbfn_glRects glRects = function void (GLshort a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glRects = cast(glbfn_glRects)glGetProcAddress(`glRects`);
  if (glRects is null) assert(0, `OpenGL function 'glRects' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRects'\n"); }
  glRects(a0,a1,a2,a3,);
};
__gshared glbfn_glRectsv glRectsv = function void (const(GLshort)* a0, const(GLshort)* a1) nothrow {
  glRectsv = cast(glbfn_glRectsv)glGetProcAddress(`glRectsv`);
  if (glRectsv is null) assert(0, `OpenGL function 'glRectsv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectsv'\n"); }
  glRectsv(a0,a1,);
};
__gshared glbfn_glTexCoord1d glTexCoord1d = function void (GLdouble a0) nothrow {
  glTexCoord1d = cast(glbfn_glTexCoord1d)glGetProcAddress(`glTexCoord1d`);
  if (glTexCoord1d is null) assert(0, `OpenGL function 'glTexCoord1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1d'\n"); }
  glTexCoord1d(a0,);
};
__gshared glbfn_glTexCoord1dv glTexCoord1dv = function void (const(GLdouble)* a0) nothrow {
  glTexCoord1dv = cast(glbfn_glTexCoord1dv)glGetProcAddress(`glTexCoord1dv`);
  if (glTexCoord1dv is null) assert(0, `OpenGL function 'glTexCoord1dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1dv'\n"); }
  glTexCoord1dv(a0,);
};
__gshared glbfn_glTexCoord1f glTexCoord1f = function void (GLfloat a0) nothrow {
  glTexCoord1f = cast(glbfn_glTexCoord1f)glGetProcAddress(`glTexCoord1f`);
  if (glTexCoord1f is null) assert(0, `OpenGL function 'glTexCoord1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1f'\n"); }
  glTexCoord1f(a0,);
};
__gshared glbfn_glTexCoord1fv glTexCoord1fv = function void (const(GLfloat)* a0) nothrow {
  glTexCoord1fv = cast(glbfn_glTexCoord1fv)glGetProcAddress(`glTexCoord1fv`);
  if (glTexCoord1fv is null) assert(0, `OpenGL function 'glTexCoord1fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1fv'\n"); }
  glTexCoord1fv(a0,);
};
__gshared glbfn_glTexCoord1i glTexCoord1i = function void (GLint a0) nothrow {
  glTexCoord1i = cast(glbfn_glTexCoord1i)glGetProcAddress(`glTexCoord1i`);
  if (glTexCoord1i is null) assert(0, `OpenGL function 'glTexCoord1i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1i'\n"); }
  glTexCoord1i(a0,);
};
__gshared glbfn_glTexCoord1iv glTexCoord1iv = function void (const(GLint)* a0) nothrow {
  glTexCoord1iv = cast(glbfn_glTexCoord1iv)glGetProcAddress(`glTexCoord1iv`);
  if (glTexCoord1iv is null) assert(0, `OpenGL function 'glTexCoord1iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1iv'\n"); }
  glTexCoord1iv(a0,);
};
__gshared glbfn_glTexCoord1s glTexCoord1s = function void (GLshort a0) nothrow {
  glTexCoord1s = cast(glbfn_glTexCoord1s)glGetProcAddress(`glTexCoord1s`);
  if (glTexCoord1s is null) assert(0, `OpenGL function 'glTexCoord1s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1s'\n"); }
  glTexCoord1s(a0,);
};
__gshared glbfn_glTexCoord1sv glTexCoord1sv = function void (const(GLshort)* a0) nothrow {
  glTexCoord1sv = cast(glbfn_glTexCoord1sv)glGetProcAddress(`glTexCoord1sv`);
  if (glTexCoord1sv is null) assert(0, `OpenGL function 'glTexCoord1sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1sv'\n"); }
  glTexCoord1sv(a0,);
};
__gshared glbfn_glTexCoord2d glTexCoord2d = function void (GLdouble a0, GLdouble a1) nothrow {
  glTexCoord2d = cast(glbfn_glTexCoord2d)glGetProcAddress(`glTexCoord2d`);
  if (glTexCoord2d is null) assert(0, `OpenGL function 'glTexCoord2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2d'\n"); }
  glTexCoord2d(a0,a1,);
};
__gshared glbfn_glTexCoord2dv glTexCoord2dv = function void (const(GLdouble)* a0) nothrow {
  glTexCoord2dv = cast(glbfn_glTexCoord2dv)glGetProcAddress(`glTexCoord2dv`);
  if (glTexCoord2dv is null) assert(0, `OpenGL function 'glTexCoord2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2dv'\n"); }
  glTexCoord2dv(a0,);
};
__gshared glbfn_glTexCoord2f glTexCoord2f = function void (GLfloat a0, GLfloat a1) nothrow {
  glTexCoord2f = cast(glbfn_glTexCoord2f)glGetProcAddress(`glTexCoord2f`);
  if (glTexCoord2f is null) assert(0, `OpenGL function 'glTexCoord2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2f'\n"); }
  glTexCoord2f(a0,a1,);
};
__gshared glbfn_glTexCoord2fv glTexCoord2fv = function void (const(GLfloat)* a0) nothrow {
  glTexCoord2fv = cast(glbfn_glTexCoord2fv)glGetProcAddress(`glTexCoord2fv`);
  if (glTexCoord2fv is null) assert(0, `OpenGL function 'glTexCoord2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fv'\n"); }
  glTexCoord2fv(a0,);
};
__gshared glbfn_glTexCoord2i glTexCoord2i = function void (GLint a0, GLint a1) nothrow {
  glTexCoord2i = cast(glbfn_glTexCoord2i)glGetProcAddress(`glTexCoord2i`);
  if (glTexCoord2i is null) assert(0, `OpenGL function 'glTexCoord2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2i'\n"); }
  glTexCoord2i(a0,a1,);
};
__gshared glbfn_glTexCoord2iv glTexCoord2iv = function void (const(GLint)* a0) nothrow {
  glTexCoord2iv = cast(glbfn_glTexCoord2iv)glGetProcAddress(`glTexCoord2iv`);
  if (glTexCoord2iv is null) assert(0, `OpenGL function 'glTexCoord2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2iv'\n"); }
  glTexCoord2iv(a0,);
};
__gshared glbfn_glTexCoord2s glTexCoord2s = function void (GLshort a0, GLshort a1) nothrow {
  glTexCoord2s = cast(glbfn_glTexCoord2s)glGetProcAddress(`glTexCoord2s`);
  if (glTexCoord2s is null) assert(0, `OpenGL function 'glTexCoord2s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2s'\n"); }
  glTexCoord2s(a0,a1,);
};
__gshared glbfn_glTexCoord2sv glTexCoord2sv = function void (const(GLshort)* a0) nothrow {
  glTexCoord2sv = cast(glbfn_glTexCoord2sv)glGetProcAddress(`glTexCoord2sv`);
  if (glTexCoord2sv is null) assert(0, `OpenGL function 'glTexCoord2sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2sv'\n"); }
  glTexCoord2sv(a0,);
};
__gshared glbfn_glTexCoord3d glTexCoord3d = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glTexCoord3d = cast(glbfn_glTexCoord3d)glGetProcAddress(`glTexCoord3d`);
  if (glTexCoord3d is null) assert(0, `OpenGL function 'glTexCoord3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3d'\n"); }
  glTexCoord3d(a0,a1,a2,);
};
__gshared glbfn_glTexCoord3dv glTexCoord3dv = function void (const(GLdouble)* a0) nothrow {
  glTexCoord3dv = cast(glbfn_glTexCoord3dv)glGetProcAddress(`glTexCoord3dv`);
  if (glTexCoord3dv is null) assert(0, `OpenGL function 'glTexCoord3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3dv'\n"); }
  glTexCoord3dv(a0,);
};
__gshared glbfn_glTexCoord3f glTexCoord3f = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glTexCoord3f = cast(glbfn_glTexCoord3f)glGetProcAddress(`glTexCoord3f`);
  if (glTexCoord3f is null) assert(0, `OpenGL function 'glTexCoord3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3f'\n"); }
  glTexCoord3f(a0,a1,a2,);
};
__gshared glbfn_glTexCoord3fv glTexCoord3fv = function void (const(GLfloat)* a0) nothrow {
  glTexCoord3fv = cast(glbfn_glTexCoord3fv)glGetProcAddress(`glTexCoord3fv`);
  if (glTexCoord3fv is null) assert(0, `OpenGL function 'glTexCoord3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3fv'\n"); }
  glTexCoord3fv(a0,);
};
__gshared glbfn_glTexCoord3i glTexCoord3i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glTexCoord3i = cast(glbfn_glTexCoord3i)glGetProcAddress(`glTexCoord3i`);
  if (glTexCoord3i is null) assert(0, `OpenGL function 'glTexCoord3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3i'\n"); }
  glTexCoord3i(a0,a1,a2,);
};
__gshared glbfn_glTexCoord3iv glTexCoord3iv = function void (const(GLint)* a0) nothrow {
  glTexCoord3iv = cast(glbfn_glTexCoord3iv)glGetProcAddress(`glTexCoord3iv`);
  if (glTexCoord3iv is null) assert(0, `OpenGL function 'glTexCoord3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3iv'\n"); }
  glTexCoord3iv(a0,);
};
__gshared glbfn_glTexCoord3s glTexCoord3s = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glTexCoord3s = cast(glbfn_glTexCoord3s)glGetProcAddress(`glTexCoord3s`);
  if (glTexCoord3s is null) assert(0, `OpenGL function 'glTexCoord3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3s'\n"); }
  glTexCoord3s(a0,a1,a2,);
};
__gshared glbfn_glTexCoord3sv glTexCoord3sv = function void (const(GLshort)* a0) nothrow {
  glTexCoord3sv = cast(glbfn_glTexCoord3sv)glGetProcAddress(`glTexCoord3sv`);
  if (glTexCoord3sv is null) assert(0, `OpenGL function 'glTexCoord3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3sv'\n"); }
  glTexCoord3sv(a0,);
};
__gshared glbfn_glTexCoord4d glTexCoord4d = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glTexCoord4d = cast(glbfn_glTexCoord4d)glGetProcAddress(`glTexCoord4d`);
  if (glTexCoord4d is null) assert(0, `OpenGL function 'glTexCoord4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4d'\n"); }
  glTexCoord4d(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4dv glTexCoord4dv = function void (const(GLdouble)* a0) nothrow {
  glTexCoord4dv = cast(glbfn_glTexCoord4dv)glGetProcAddress(`glTexCoord4dv`);
  if (glTexCoord4dv is null) assert(0, `OpenGL function 'glTexCoord4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4dv'\n"); }
  glTexCoord4dv(a0,);
};
__gshared glbfn_glTexCoord4f glTexCoord4f = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glTexCoord4f = cast(glbfn_glTexCoord4f)glGetProcAddress(`glTexCoord4f`);
  if (glTexCoord4f is null) assert(0, `OpenGL function 'glTexCoord4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4f'\n"); }
  glTexCoord4f(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4fv glTexCoord4fv = function void (const(GLfloat)* a0) nothrow {
  glTexCoord4fv = cast(glbfn_glTexCoord4fv)glGetProcAddress(`glTexCoord4fv`);
  if (glTexCoord4fv is null) assert(0, `OpenGL function 'glTexCoord4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4fv'\n"); }
  glTexCoord4fv(a0,);
};
__gshared glbfn_glTexCoord4i glTexCoord4i = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glTexCoord4i = cast(glbfn_glTexCoord4i)glGetProcAddress(`glTexCoord4i`);
  if (glTexCoord4i is null) assert(0, `OpenGL function 'glTexCoord4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4i'\n"); }
  glTexCoord4i(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4iv glTexCoord4iv = function void (const(GLint)* a0) nothrow {
  glTexCoord4iv = cast(glbfn_glTexCoord4iv)glGetProcAddress(`glTexCoord4iv`);
  if (glTexCoord4iv is null) assert(0, `OpenGL function 'glTexCoord4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4iv'\n"); }
  glTexCoord4iv(a0,);
};
__gshared glbfn_glTexCoord4s glTexCoord4s = function void (GLshort a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glTexCoord4s = cast(glbfn_glTexCoord4s)glGetProcAddress(`glTexCoord4s`);
  if (glTexCoord4s is null) assert(0, `OpenGL function 'glTexCoord4s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4s'\n"); }
  glTexCoord4s(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4sv glTexCoord4sv = function void (const(GLshort)* a0) nothrow {
  glTexCoord4sv = cast(glbfn_glTexCoord4sv)glGetProcAddress(`glTexCoord4sv`);
  if (glTexCoord4sv is null) assert(0, `OpenGL function 'glTexCoord4sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4sv'\n"); }
  glTexCoord4sv(a0,);
};
__gshared glbfn_glVertex2d glVertex2d = function void (GLdouble a0, GLdouble a1) nothrow {
  glVertex2d = cast(glbfn_glVertex2d)glGetProcAddress(`glVertex2d`);
  if (glVertex2d is null) assert(0, `OpenGL function 'glVertex2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2d'\n"); }
  glVertex2d(a0,a1,);
};
__gshared glbfn_glVertex2dv glVertex2dv = function void (const(GLdouble)* a0) nothrow {
  glVertex2dv = cast(glbfn_glVertex2dv)glGetProcAddress(`glVertex2dv`);
  if (glVertex2dv is null) assert(0, `OpenGL function 'glVertex2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2dv'\n"); }
  glVertex2dv(a0,);
};
__gshared glbfn_glVertex2f glVertex2f = function void (GLfloat a0, GLfloat a1) nothrow {
  glVertex2f = cast(glbfn_glVertex2f)glGetProcAddress(`glVertex2f`);
  if (glVertex2f is null) assert(0, `OpenGL function 'glVertex2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2f'\n"); }
  glVertex2f(a0,a1,);
};
__gshared glbfn_glVertex2fv glVertex2fv = function void (const(GLfloat)* a0) nothrow {
  glVertex2fv = cast(glbfn_glVertex2fv)glGetProcAddress(`glVertex2fv`);
  if (glVertex2fv is null) assert(0, `OpenGL function 'glVertex2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2fv'\n"); }
  glVertex2fv(a0,);
};
__gshared glbfn_glVertex2i glVertex2i = function void (GLint a0, GLint a1) nothrow {
  glVertex2i = cast(glbfn_glVertex2i)glGetProcAddress(`glVertex2i`);
  if (glVertex2i is null) assert(0, `OpenGL function 'glVertex2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2i'\n"); }
  glVertex2i(a0,a1,);
};
__gshared glbfn_glVertex2iv glVertex2iv = function void (const(GLint)* a0) nothrow {
  glVertex2iv = cast(glbfn_glVertex2iv)glGetProcAddress(`glVertex2iv`);
  if (glVertex2iv is null) assert(0, `OpenGL function 'glVertex2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2iv'\n"); }
  glVertex2iv(a0,);
};
__gshared glbfn_glVertex2s glVertex2s = function void (GLshort a0, GLshort a1) nothrow {
  glVertex2s = cast(glbfn_glVertex2s)glGetProcAddress(`glVertex2s`);
  if (glVertex2s is null) assert(0, `OpenGL function 'glVertex2s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2s'\n"); }
  glVertex2s(a0,a1,);
};
__gshared glbfn_glVertex2sv glVertex2sv = function void (const(GLshort)* a0) nothrow {
  glVertex2sv = cast(glbfn_glVertex2sv)glGetProcAddress(`glVertex2sv`);
  if (glVertex2sv is null) assert(0, `OpenGL function 'glVertex2sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2sv'\n"); }
  glVertex2sv(a0,);
};
__gshared glbfn_glVertex3d glVertex3d = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glVertex3d = cast(glbfn_glVertex3d)glGetProcAddress(`glVertex3d`);
  if (glVertex3d is null) assert(0, `OpenGL function 'glVertex3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3d'\n"); }
  glVertex3d(a0,a1,a2,);
};
__gshared glbfn_glVertex3dv glVertex3dv = function void (const(GLdouble)* a0) nothrow {
  glVertex3dv = cast(glbfn_glVertex3dv)glGetProcAddress(`glVertex3dv`);
  if (glVertex3dv is null) assert(0, `OpenGL function 'glVertex3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3dv'\n"); }
  glVertex3dv(a0,);
};
__gshared glbfn_glVertex3f glVertex3f = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glVertex3f = cast(glbfn_glVertex3f)glGetProcAddress(`glVertex3f`);
  if (glVertex3f is null) assert(0, `OpenGL function 'glVertex3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3f'\n"); }
  glVertex3f(a0,a1,a2,);
};
__gshared glbfn_glVertex3fv glVertex3fv = function void (const(GLfloat)* a0) nothrow {
  glVertex3fv = cast(glbfn_glVertex3fv)glGetProcAddress(`glVertex3fv`);
  if (glVertex3fv is null) assert(0, `OpenGL function 'glVertex3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3fv'\n"); }
  glVertex3fv(a0,);
};
__gshared glbfn_glVertex3i glVertex3i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glVertex3i = cast(glbfn_glVertex3i)glGetProcAddress(`glVertex3i`);
  if (glVertex3i is null) assert(0, `OpenGL function 'glVertex3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3i'\n"); }
  glVertex3i(a0,a1,a2,);
};
__gshared glbfn_glVertex3iv glVertex3iv = function void (const(GLint)* a0) nothrow {
  glVertex3iv = cast(glbfn_glVertex3iv)glGetProcAddress(`glVertex3iv`);
  if (glVertex3iv is null) assert(0, `OpenGL function 'glVertex3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3iv'\n"); }
  glVertex3iv(a0,);
};
__gshared glbfn_glVertex3s glVertex3s = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glVertex3s = cast(glbfn_glVertex3s)glGetProcAddress(`glVertex3s`);
  if (glVertex3s is null) assert(0, `OpenGL function 'glVertex3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3s'\n"); }
  glVertex3s(a0,a1,a2,);
};
__gshared glbfn_glVertex3sv glVertex3sv = function void (const(GLshort)* a0) nothrow {
  glVertex3sv = cast(glbfn_glVertex3sv)glGetProcAddress(`glVertex3sv`);
  if (glVertex3sv is null) assert(0, `OpenGL function 'glVertex3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3sv'\n"); }
  glVertex3sv(a0,);
};
__gshared glbfn_glVertex4d glVertex4d = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glVertex4d = cast(glbfn_glVertex4d)glGetProcAddress(`glVertex4d`);
  if (glVertex4d is null) assert(0, `OpenGL function 'glVertex4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4d'\n"); }
  glVertex4d(a0,a1,a2,a3,);
};
__gshared glbfn_glVertex4dv glVertex4dv = function void (const(GLdouble)* a0) nothrow {
  glVertex4dv = cast(glbfn_glVertex4dv)glGetProcAddress(`glVertex4dv`);
  if (glVertex4dv is null) assert(0, `OpenGL function 'glVertex4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4dv'\n"); }
  glVertex4dv(a0,);
};
__gshared glbfn_glVertex4f glVertex4f = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glVertex4f = cast(glbfn_glVertex4f)glGetProcAddress(`glVertex4f`);
  if (glVertex4f is null) assert(0, `OpenGL function 'glVertex4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4f'\n"); }
  glVertex4f(a0,a1,a2,a3,);
};
__gshared glbfn_glVertex4fv glVertex4fv = function void (const(GLfloat)* a0) nothrow {
  glVertex4fv = cast(glbfn_glVertex4fv)glGetProcAddress(`glVertex4fv`);
  if (glVertex4fv is null) assert(0, `OpenGL function 'glVertex4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4fv'\n"); }
  glVertex4fv(a0,);
};
__gshared glbfn_glVertex4i glVertex4i = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glVertex4i = cast(glbfn_glVertex4i)glGetProcAddress(`glVertex4i`);
  if (glVertex4i is null) assert(0, `OpenGL function 'glVertex4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4i'\n"); }
  glVertex4i(a0,a1,a2,a3,);
};
__gshared glbfn_glVertex4iv glVertex4iv = function void (const(GLint)* a0) nothrow {
  glVertex4iv = cast(glbfn_glVertex4iv)glGetProcAddress(`glVertex4iv`);
  if (glVertex4iv is null) assert(0, `OpenGL function 'glVertex4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4iv'\n"); }
  glVertex4iv(a0,);
};
__gshared glbfn_glVertex4s glVertex4s = function void (GLshort a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glVertex4s = cast(glbfn_glVertex4s)glGetProcAddress(`glVertex4s`);
  if (glVertex4s is null) assert(0, `OpenGL function 'glVertex4s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4s'\n"); }
  glVertex4s(a0,a1,a2,a3,);
};
__gshared glbfn_glVertex4sv glVertex4sv = function void (const(GLshort)* a0) nothrow {
  glVertex4sv = cast(glbfn_glVertex4sv)glGetProcAddress(`glVertex4sv`);
  if (glVertex4sv is null) assert(0, `OpenGL function 'glVertex4sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4sv'\n"); }
  glVertex4sv(a0,);
};
__gshared glbfn_glClipPlane glClipPlane = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glClipPlane = cast(glbfn_glClipPlane)glGetProcAddress(`glClipPlane`);
  if (glClipPlane is null) assert(0, `OpenGL function 'glClipPlane' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClipPlane'\n"); }
  glClipPlane(a0,a1,);
};
__gshared glbfn_glColorMaterial glColorMaterial = function void (GLenum a0, GLenum a1) nothrow {
  glColorMaterial = cast(glbfn_glColorMaterial)glGetProcAddress(`glColorMaterial`);
  if (glColorMaterial is null) assert(0, `OpenGL function 'glColorMaterial' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorMaterial'\n"); }
  glColorMaterial(a0,a1,);
};
__gshared glbfn_glFogf glFogf = function void (GLenum a0, GLfloat a1) nothrow {
  glFogf = cast(glbfn_glFogf)glGetProcAddress(`glFogf`);
  if (glFogf is null) assert(0, `OpenGL function 'glFogf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogf'\n"); }
  glFogf(a0,a1,);
};
__gshared glbfn_glFogfv glFogfv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glFogfv = cast(glbfn_glFogfv)glGetProcAddress(`glFogfv`);
  if (glFogfv is null) assert(0, `OpenGL function 'glFogfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogfv'\n"); }
  glFogfv(a0,a1,);
};
__gshared glbfn_glFogi glFogi = function void (GLenum a0, GLint a1) nothrow {
  glFogi = cast(glbfn_glFogi)glGetProcAddress(`glFogi`);
  if (glFogi is null) assert(0, `OpenGL function 'glFogi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogi'\n"); }
  glFogi(a0,a1,);
};
__gshared glbfn_glFogiv glFogiv = function void (GLenum a0, const(GLint)* a1) nothrow {
  glFogiv = cast(glbfn_glFogiv)glGetProcAddress(`glFogiv`);
  if (glFogiv is null) assert(0, `OpenGL function 'glFogiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogiv'\n"); }
  glFogiv(a0,a1,);
};
__gshared glbfn_glLightf glLightf = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glLightf = cast(glbfn_glLightf)glGetProcAddress(`glLightf`);
  if (glLightf is null) assert(0, `OpenGL function 'glLightf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightf'\n"); }
  glLightf(a0,a1,a2,);
};
__gshared glbfn_glLightfv glLightfv = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glLightfv = cast(glbfn_glLightfv)glGetProcAddress(`glLightfv`);
  if (glLightfv is null) assert(0, `OpenGL function 'glLightfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightfv'\n"); }
  glLightfv(a0,a1,a2,);
};
__gshared glbfn_glLighti glLighti = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glLighti = cast(glbfn_glLighti)glGetProcAddress(`glLighti`);
  if (glLighti is null) assert(0, `OpenGL function 'glLighti' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLighti'\n"); }
  glLighti(a0,a1,a2,);
};
__gshared glbfn_glLightiv glLightiv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glLightiv = cast(glbfn_glLightiv)glGetProcAddress(`glLightiv`);
  if (glLightiv is null) assert(0, `OpenGL function 'glLightiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightiv'\n"); }
  glLightiv(a0,a1,a2,);
};
__gshared glbfn_glLightModelf glLightModelf = function void (GLenum a0, GLfloat a1) nothrow {
  glLightModelf = cast(glbfn_glLightModelf)glGetProcAddress(`glLightModelf`);
  if (glLightModelf is null) assert(0, `OpenGL function 'glLightModelf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightModelf'\n"); }
  glLightModelf(a0,a1,);
};
__gshared glbfn_glLightModelfv glLightModelfv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glLightModelfv = cast(glbfn_glLightModelfv)glGetProcAddress(`glLightModelfv`);
  if (glLightModelfv is null) assert(0, `OpenGL function 'glLightModelfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightModelfv'\n"); }
  glLightModelfv(a0,a1,);
};
__gshared glbfn_glLightModeli glLightModeli = function void (GLenum a0, GLint a1) nothrow {
  glLightModeli = cast(glbfn_glLightModeli)glGetProcAddress(`glLightModeli`);
  if (glLightModeli is null) assert(0, `OpenGL function 'glLightModeli' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightModeli'\n"); }
  glLightModeli(a0,a1,);
};
__gshared glbfn_glLightModeliv glLightModeliv = function void (GLenum a0, const(GLint)* a1) nothrow {
  glLightModeliv = cast(glbfn_glLightModeliv)glGetProcAddress(`glLightModeliv`);
  if (glLightModeliv is null) assert(0, `OpenGL function 'glLightModeliv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightModeliv'\n"); }
  glLightModeliv(a0,a1,);
};
__gshared glbfn_glLineStipple glLineStipple = function void (GLint a0, GLushort a1) nothrow {
  glLineStipple = cast(glbfn_glLineStipple)glGetProcAddress(`glLineStipple`);
  if (glLineStipple is null) assert(0, `OpenGL function 'glLineStipple' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLineStipple'\n"); }
  glLineStipple(a0,a1,);
};
__gshared glbfn_glMaterialf glMaterialf = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glMaterialf = cast(glbfn_glMaterialf)glGetProcAddress(`glMaterialf`);
  if (glMaterialf is null) assert(0, `OpenGL function 'glMaterialf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMaterialf'\n"); }
  glMaterialf(a0,a1,a2,);
};
__gshared glbfn_glMaterialfv glMaterialfv = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glMaterialfv = cast(glbfn_glMaterialfv)glGetProcAddress(`glMaterialfv`);
  if (glMaterialfv is null) assert(0, `OpenGL function 'glMaterialfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMaterialfv'\n"); }
  glMaterialfv(a0,a1,a2,);
};
__gshared glbfn_glMateriali glMateriali = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glMateriali = cast(glbfn_glMateriali)glGetProcAddress(`glMateriali`);
  if (glMateriali is null) assert(0, `OpenGL function 'glMateriali' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMateriali'\n"); }
  glMateriali(a0,a1,a2,);
};
__gshared glbfn_glMaterialiv glMaterialiv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glMaterialiv = cast(glbfn_glMaterialiv)glGetProcAddress(`glMaterialiv`);
  if (glMaterialiv is null) assert(0, `OpenGL function 'glMaterialiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMaterialiv'\n"); }
  glMaterialiv(a0,a1,a2,);
};
__gshared glbfn_glPolygonStipple glPolygonStipple = function void (const(GLubyte)* a0) nothrow {
  glPolygonStipple = cast(glbfn_glPolygonStipple)glGetProcAddress(`glPolygonStipple`);
  if (glPolygonStipple is null) assert(0, `OpenGL function 'glPolygonStipple' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPolygonStipple'\n"); }
  glPolygonStipple(a0,);
};
__gshared glbfn_glShadeModel glShadeModel = function void (GLenum a0) nothrow {
  glShadeModel = cast(glbfn_glShadeModel)glGetProcAddress(`glShadeModel`);
  if (glShadeModel is null) assert(0, `OpenGL function 'glShadeModel' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShadeModel'\n"); }
  glShadeModel(a0,);
};
__gshared glbfn_glTexEnvf glTexEnvf = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glTexEnvf = cast(glbfn_glTexEnvf)glGetProcAddress(`glTexEnvf`);
  if (glTexEnvf is null) assert(0, `OpenGL function 'glTexEnvf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexEnvf'\n"); }
  glTexEnvf(a0,a1,a2,);
};
__gshared glbfn_glTexEnvfv glTexEnvfv = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glTexEnvfv = cast(glbfn_glTexEnvfv)glGetProcAddress(`glTexEnvfv`);
  if (glTexEnvfv is null) assert(0, `OpenGL function 'glTexEnvfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexEnvfv'\n"); }
  glTexEnvfv(a0,a1,a2,);
};
__gshared glbfn_glTexEnvi glTexEnvi = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glTexEnvi = cast(glbfn_glTexEnvi)glGetProcAddress(`glTexEnvi`);
  if (glTexEnvi is null) assert(0, `OpenGL function 'glTexEnvi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexEnvi'\n"); }
  glTexEnvi(a0,a1,a2,);
};
__gshared glbfn_glTexEnviv glTexEnviv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glTexEnviv = cast(glbfn_glTexEnviv)glGetProcAddress(`glTexEnviv`);
  if (glTexEnviv is null) assert(0, `OpenGL function 'glTexEnviv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexEnviv'\n"); }
  glTexEnviv(a0,a1,a2,);
};
__gshared glbfn_glTexGend glTexGend = function void (GLenum a0, GLenum a1, GLdouble a2) nothrow {
  glTexGend = cast(glbfn_glTexGend)glGetProcAddress(`glTexGend`);
  if (glTexGend is null) assert(0, `OpenGL function 'glTexGend' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGend'\n"); }
  glTexGend(a0,a1,a2,);
};
__gshared glbfn_glTexGendv glTexGendv = function void (GLenum a0, GLenum a1, const(GLdouble)* a2) nothrow {
  glTexGendv = cast(glbfn_glTexGendv)glGetProcAddress(`glTexGendv`);
  if (glTexGendv is null) assert(0, `OpenGL function 'glTexGendv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGendv'\n"); }
  glTexGendv(a0,a1,a2,);
};
__gshared glbfn_glTexGenf glTexGenf = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glTexGenf = cast(glbfn_glTexGenf)glGetProcAddress(`glTexGenf`);
  if (glTexGenf is null) assert(0, `OpenGL function 'glTexGenf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGenf'\n"); }
  glTexGenf(a0,a1,a2,);
};
__gshared glbfn_glTexGenfv glTexGenfv = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glTexGenfv = cast(glbfn_glTexGenfv)glGetProcAddress(`glTexGenfv`);
  if (glTexGenfv is null) assert(0, `OpenGL function 'glTexGenfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGenfv'\n"); }
  glTexGenfv(a0,a1,a2,);
};
__gshared glbfn_glTexGeni glTexGeni = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glTexGeni = cast(glbfn_glTexGeni)glGetProcAddress(`glTexGeni`);
  if (glTexGeni is null) assert(0, `OpenGL function 'glTexGeni' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGeni'\n"); }
  glTexGeni(a0,a1,a2,);
};
__gshared glbfn_glTexGeniv glTexGeniv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glTexGeniv = cast(glbfn_glTexGeniv)glGetProcAddress(`glTexGeniv`);
  if (glTexGeniv is null) assert(0, `OpenGL function 'glTexGeniv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGeniv'\n"); }
  glTexGeniv(a0,a1,a2,);
};
__gshared glbfn_glFeedbackBuffer glFeedbackBuffer = function void (GLsizei a0, GLenum a1, GLfloat* a2) nothrow {
  glFeedbackBuffer = cast(glbfn_glFeedbackBuffer)glGetProcAddress(`glFeedbackBuffer`);
  if (glFeedbackBuffer is null) assert(0, `OpenGL function 'glFeedbackBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFeedbackBuffer'\n"); }
  glFeedbackBuffer(a0,a1,a2,);
};
__gshared glbfn_glSelectBuffer glSelectBuffer = function void (GLsizei a0, GLuint* a1) nothrow {
  glSelectBuffer = cast(glbfn_glSelectBuffer)glGetProcAddress(`glSelectBuffer`);
  if (glSelectBuffer is null) assert(0, `OpenGL function 'glSelectBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSelectBuffer'\n"); }
  glSelectBuffer(a0,a1,);
};
__gshared glbfn_glRenderMode glRenderMode = function GLint (GLenum a0) nothrow {
  glRenderMode = cast(glbfn_glRenderMode)glGetProcAddress(`glRenderMode`);
  if (glRenderMode is null) assert(0, `OpenGL function 'glRenderMode' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRenderMode'\n"); }
  return glRenderMode(a0,);
};
__gshared glbfn_glInitNames glInitNames = function void () nothrow {
  glInitNames = cast(glbfn_glInitNames)glGetProcAddress(`glInitNames`);
  if (glInitNames is null) assert(0, `OpenGL function 'glInitNames' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInitNames'\n"); }
  glInitNames();
};
__gshared glbfn_glLoadName glLoadName = function void (GLuint a0) nothrow {
  glLoadName = cast(glbfn_glLoadName)glGetProcAddress(`glLoadName`);
  if (glLoadName is null) assert(0, `OpenGL function 'glLoadName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadName'\n"); }
  glLoadName(a0,);
};
__gshared glbfn_glPassThrough glPassThrough = function void (GLfloat a0) nothrow {
  glPassThrough = cast(glbfn_glPassThrough)glGetProcAddress(`glPassThrough`);
  if (glPassThrough is null) assert(0, `OpenGL function 'glPassThrough' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPassThrough'\n"); }
  glPassThrough(a0,);
};
__gshared glbfn_glPopName glPopName = function void () nothrow {
  glPopName = cast(glbfn_glPopName)glGetProcAddress(`glPopName`);
  if (glPopName is null) assert(0, `OpenGL function 'glPopName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPopName'\n"); }
  glPopName();
};
__gshared glbfn_glPushName glPushName = function void (GLuint a0) nothrow {
  glPushName = cast(glbfn_glPushName)glGetProcAddress(`glPushName`);
  if (glPushName is null) assert(0, `OpenGL function 'glPushName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushName'\n"); }
  glPushName(a0,);
};
__gshared glbfn_glClearAccum glClearAccum = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glClearAccum = cast(glbfn_glClearAccum)glGetProcAddress(`glClearAccum`);
  if (glClearAccum is null) assert(0, `OpenGL function 'glClearAccum' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearAccum'\n"); }
  glClearAccum(a0,a1,a2,a3,);
};
__gshared glbfn_glClearIndex glClearIndex = function void (GLfloat a0) nothrow {
  glClearIndex = cast(glbfn_glClearIndex)glGetProcAddress(`glClearIndex`);
  if (glClearIndex is null) assert(0, `OpenGL function 'glClearIndex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearIndex'\n"); }
  glClearIndex(a0,);
};
__gshared glbfn_glIndexMask glIndexMask = function void (GLuint a0) nothrow {
  glIndexMask = cast(glbfn_glIndexMask)glGetProcAddress(`glIndexMask`);
  if (glIndexMask is null) assert(0, `OpenGL function 'glIndexMask' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexMask'\n"); }
  glIndexMask(a0,);
};
__gshared glbfn_glAccum glAccum = function void (GLenum a0, GLfloat a1) nothrow {
  glAccum = cast(glbfn_glAccum)glGetProcAddress(`glAccum`);
  if (glAccum is null) assert(0, `OpenGL function 'glAccum' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAccum'\n"); }
  glAccum(a0,a1,);
};
__gshared glbfn_glPopAttrib glPopAttrib = function void () nothrow {
  glPopAttrib = cast(glbfn_glPopAttrib)glGetProcAddress(`glPopAttrib`);
  if (glPopAttrib is null) assert(0, `OpenGL function 'glPopAttrib' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPopAttrib'\n"); }
  glPopAttrib();
};
__gshared glbfn_glPushAttrib glPushAttrib = function void (GLbitfield a0) nothrow {
  glPushAttrib = cast(glbfn_glPushAttrib)glGetProcAddress(`glPushAttrib`);
  if (glPushAttrib is null) assert(0, `OpenGL function 'glPushAttrib' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushAttrib'\n"); }
  glPushAttrib(a0,);
};
__gshared glbfn_glMap1d glMap1d = function void (GLenum a0, GLdouble a1, GLdouble a2, GLint a3, GLint a4, const(GLdouble)* a5) nothrow {
  glMap1d = cast(glbfn_glMap1d)glGetProcAddress(`glMap1d`);
  if (glMap1d is null) assert(0, `OpenGL function 'glMap1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMap1d'\n"); }
  glMap1d(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glMap1f glMap1f = function void (GLenum a0, GLfloat a1, GLfloat a2, GLint a3, GLint a4, const(GLfloat)* a5) nothrow {
  glMap1f = cast(glbfn_glMap1f)glGetProcAddress(`glMap1f`);
  if (glMap1f is null) assert(0, `OpenGL function 'glMap1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMap1f'\n"); }
  glMap1f(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glMap2d glMap2d = function void (GLenum a0, GLdouble a1, GLdouble a2, GLint a3, GLint a4, GLdouble a5, GLdouble a6, GLint a7, GLint a8, const(GLdouble)* a9) nothrow {
  glMap2d = cast(glbfn_glMap2d)glGetProcAddress(`glMap2d`);
  if (glMap2d is null) assert(0, `OpenGL function 'glMap2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMap2d'\n"); }
  glMap2d(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glMap2f glMap2f = function void (GLenum a0, GLfloat a1, GLfloat a2, GLint a3, GLint a4, GLfloat a5, GLfloat a6, GLint a7, GLint a8, const(GLfloat)* a9) nothrow {
  glMap2f = cast(glbfn_glMap2f)glGetProcAddress(`glMap2f`);
  if (glMap2f is null) assert(0, `OpenGL function 'glMap2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMap2f'\n"); }
  glMap2f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glMapGrid1d glMapGrid1d = function void (GLint a0, GLdouble a1, GLdouble a2) nothrow {
  glMapGrid1d = cast(glbfn_glMapGrid1d)glGetProcAddress(`glMapGrid1d`);
  if (glMapGrid1d is null) assert(0, `OpenGL function 'glMapGrid1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapGrid1d'\n"); }
  glMapGrid1d(a0,a1,a2,);
};
__gshared glbfn_glMapGrid1f glMapGrid1f = function void (GLint a0, GLfloat a1, GLfloat a2) nothrow {
  glMapGrid1f = cast(glbfn_glMapGrid1f)glGetProcAddress(`glMapGrid1f`);
  if (glMapGrid1f is null) assert(0, `OpenGL function 'glMapGrid1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapGrid1f'\n"); }
  glMapGrid1f(a0,a1,a2,);
};
__gshared glbfn_glMapGrid2d glMapGrid2d = function void (GLint a0, GLdouble a1, GLdouble a2, GLint a3, GLdouble a4, GLdouble a5) nothrow {
  glMapGrid2d = cast(glbfn_glMapGrid2d)glGetProcAddress(`glMapGrid2d`);
  if (glMapGrid2d is null) assert(0, `OpenGL function 'glMapGrid2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapGrid2d'\n"); }
  glMapGrid2d(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glMapGrid2f glMapGrid2f = function void (GLint a0, GLfloat a1, GLfloat a2, GLint a3, GLfloat a4, GLfloat a5) nothrow {
  glMapGrid2f = cast(glbfn_glMapGrid2f)glGetProcAddress(`glMapGrid2f`);
  if (glMapGrid2f is null) assert(0, `OpenGL function 'glMapGrid2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapGrid2f'\n"); }
  glMapGrid2f(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glEvalCoord1d glEvalCoord1d = function void (GLdouble a0) nothrow {
  glEvalCoord1d = cast(glbfn_glEvalCoord1d)glGetProcAddress(`glEvalCoord1d`);
  if (glEvalCoord1d is null) assert(0, `OpenGL function 'glEvalCoord1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord1d'\n"); }
  glEvalCoord1d(a0,);
};
__gshared glbfn_glEvalCoord1dv glEvalCoord1dv = function void (const(GLdouble)* a0) nothrow {
  glEvalCoord1dv = cast(glbfn_glEvalCoord1dv)glGetProcAddress(`glEvalCoord1dv`);
  if (glEvalCoord1dv is null) assert(0, `OpenGL function 'glEvalCoord1dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord1dv'\n"); }
  glEvalCoord1dv(a0,);
};
__gshared glbfn_glEvalCoord1f glEvalCoord1f = function void (GLfloat a0) nothrow {
  glEvalCoord1f = cast(glbfn_glEvalCoord1f)glGetProcAddress(`glEvalCoord1f`);
  if (glEvalCoord1f is null) assert(0, `OpenGL function 'glEvalCoord1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord1f'\n"); }
  glEvalCoord1f(a0,);
};
__gshared glbfn_glEvalCoord1fv glEvalCoord1fv = function void (const(GLfloat)* a0) nothrow {
  glEvalCoord1fv = cast(glbfn_glEvalCoord1fv)glGetProcAddress(`glEvalCoord1fv`);
  if (glEvalCoord1fv is null) assert(0, `OpenGL function 'glEvalCoord1fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord1fv'\n"); }
  glEvalCoord1fv(a0,);
};
__gshared glbfn_glEvalCoord2d glEvalCoord2d = function void (GLdouble a0, GLdouble a1) nothrow {
  glEvalCoord2d = cast(glbfn_glEvalCoord2d)glGetProcAddress(`glEvalCoord2d`);
  if (glEvalCoord2d is null) assert(0, `OpenGL function 'glEvalCoord2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord2d'\n"); }
  glEvalCoord2d(a0,a1,);
};
__gshared glbfn_glEvalCoord2dv glEvalCoord2dv = function void (const(GLdouble)* a0) nothrow {
  glEvalCoord2dv = cast(glbfn_glEvalCoord2dv)glGetProcAddress(`glEvalCoord2dv`);
  if (glEvalCoord2dv is null) assert(0, `OpenGL function 'glEvalCoord2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord2dv'\n"); }
  glEvalCoord2dv(a0,);
};
__gshared glbfn_glEvalCoord2f glEvalCoord2f = function void (GLfloat a0, GLfloat a1) nothrow {
  glEvalCoord2f = cast(glbfn_glEvalCoord2f)glGetProcAddress(`glEvalCoord2f`);
  if (glEvalCoord2f is null) assert(0, `OpenGL function 'glEvalCoord2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord2f'\n"); }
  glEvalCoord2f(a0,a1,);
};
__gshared glbfn_glEvalCoord2fv glEvalCoord2fv = function void (const(GLfloat)* a0) nothrow {
  glEvalCoord2fv = cast(glbfn_glEvalCoord2fv)glGetProcAddress(`glEvalCoord2fv`);
  if (glEvalCoord2fv is null) assert(0, `OpenGL function 'glEvalCoord2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord2fv'\n"); }
  glEvalCoord2fv(a0,);
};
__gshared glbfn_glEvalMesh1 glEvalMesh1 = function void (GLenum a0, GLint a1, GLint a2) nothrow {
  glEvalMesh1 = cast(glbfn_glEvalMesh1)glGetProcAddress(`glEvalMesh1`);
  if (glEvalMesh1 is null) assert(0, `OpenGL function 'glEvalMesh1' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalMesh1'\n"); }
  glEvalMesh1(a0,a1,a2,);
};
__gshared glbfn_glEvalPoint1 glEvalPoint1 = function void (GLint a0) nothrow {
  glEvalPoint1 = cast(glbfn_glEvalPoint1)glGetProcAddress(`glEvalPoint1`);
  if (glEvalPoint1 is null) assert(0, `OpenGL function 'glEvalPoint1' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalPoint1'\n"); }
  glEvalPoint1(a0,);
};
__gshared glbfn_glEvalMesh2 glEvalMesh2 = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glEvalMesh2 = cast(glbfn_glEvalMesh2)glGetProcAddress(`glEvalMesh2`);
  if (glEvalMesh2 is null) assert(0, `OpenGL function 'glEvalMesh2' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalMesh2'\n"); }
  glEvalMesh2(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glEvalPoint2 glEvalPoint2 = function void (GLint a0, GLint a1) nothrow {
  glEvalPoint2 = cast(glbfn_glEvalPoint2)glGetProcAddress(`glEvalPoint2`);
  if (glEvalPoint2 is null) assert(0, `OpenGL function 'glEvalPoint2' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalPoint2'\n"); }
  glEvalPoint2(a0,a1,);
};
__gshared glbfn_glAlphaFunc glAlphaFunc = function void (GLenum a0, GLfloat a1) nothrow {
  glAlphaFunc = cast(glbfn_glAlphaFunc)glGetProcAddress(`glAlphaFunc`);
  if (glAlphaFunc is null) assert(0, `OpenGL function 'glAlphaFunc' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAlphaFunc'\n"); }
  glAlphaFunc(a0,a1,);
};
__gshared glbfn_glPixelZoom glPixelZoom = function void (GLfloat a0, GLfloat a1) nothrow {
  glPixelZoom = cast(glbfn_glPixelZoom)glGetProcAddress(`glPixelZoom`);
  if (glPixelZoom is null) assert(0, `OpenGL function 'glPixelZoom' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelZoom'\n"); }
  glPixelZoom(a0,a1,);
};
__gshared glbfn_glPixelTransferf glPixelTransferf = function void (GLenum a0, GLfloat a1) nothrow {
  glPixelTransferf = cast(glbfn_glPixelTransferf)glGetProcAddress(`glPixelTransferf`);
  if (glPixelTransferf is null) assert(0, `OpenGL function 'glPixelTransferf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTransferf'\n"); }
  glPixelTransferf(a0,a1,);
};
__gshared glbfn_glPixelTransferi glPixelTransferi = function void (GLenum a0, GLint a1) nothrow {
  glPixelTransferi = cast(glbfn_glPixelTransferi)glGetProcAddress(`glPixelTransferi`);
  if (glPixelTransferi is null) assert(0, `OpenGL function 'glPixelTransferi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTransferi'\n"); }
  glPixelTransferi(a0,a1,);
};
__gshared glbfn_glPixelMapfv glPixelMapfv = function void (GLenum a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glPixelMapfv = cast(glbfn_glPixelMapfv)glGetProcAddress(`glPixelMapfv`);
  if (glPixelMapfv is null) assert(0, `OpenGL function 'glPixelMapfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelMapfv'\n"); }
  glPixelMapfv(a0,a1,a2,);
};
__gshared glbfn_glPixelMapuiv glPixelMapuiv = function void (GLenum a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glPixelMapuiv = cast(glbfn_glPixelMapuiv)glGetProcAddress(`glPixelMapuiv`);
  if (glPixelMapuiv is null) assert(0, `OpenGL function 'glPixelMapuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelMapuiv'\n"); }
  glPixelMapuiv(a0,a1,a2,);
};
__gshared glbfn_glPixelMapusv glPixelMapusv = function void (GLenum a0, GLsizei a1, const(GLushort)* a2) nothrow {
  glPixelMapusv = cast(glbfn_glPixelMapusv)glGetProcAddress(`glPixelMapusv`);
  if (glPixelMapusv is null) assert(0, `OpenGL function 'glPixelMapusv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelMapusv'\n"); }
  glPixelMapusv(a0,a1,a2,);
};
__gshared glbfn_glCopyPixels glCopyPixels = function void (GLint a0, GLint a1, GLsizei a2, GLsizei a3, GLenum a4) nothrow {
  glCopyPixels = cast(glbfn_glCopyPixels)glGetProcAddress(`glCopyPixels`);
  if (glCopyPixels is null) assert(0, `OpenGL function 'glCopyPixels' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyPixels'\n"); }
  glCopyPixels(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawPixels glDrawPixels = function void (GLsizei a0, GLsizei a1, GLenum a2, GLenum a3, const(void)* a4) nothrow {
  glDrawPixels = cast(glbfn_glDrawPixels)glGetProcAddress(`glDrawPixels`);
  if (glDrawPixels is null) assert(0, `OpenGL function 'glDrawPixels' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawPixels'\n"); }
  glDrawPixels(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetClipPlane glGetClipPlane = function void (GLenum a0, GLdouble* a1) nothrow {
  glGetClipPlane = cast(glbfn_glGetClipPlane)glGetProcAddress(`glGetClipPlane`);
  if (glGetClipPlane is null) assert(0, `OpenGL function 'glGetClipPlane' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetClipPlane'\n"); }
  glGetClipPlane(a0,a1,);
};
__gshared glbfn_glGetLightfv glGetLightfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetLightfv = cast(glbfn_glGetLightfv)glGetProcAddress(`glGetLightfv`);
  if (glGetLightfv is null) assert(0, `OpenGL function 'glGetLightfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetLightfv'\n"); }
  glGetLightfv(a0,a1,a2,);
};
__gshared glbfn_glGetLightiv glGetLightiv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetLightiv = cast(glbfn_glGetLightiv)glGetProcAddress(`glGetLightiv`);
  if (glGetLightiv is null) assert(0, `OpenGL function 'glGetLightiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetLightiv'\n"); }
  glGetLightiv(a0,a1,a2,);
};
__gshared glbfn_glGetMapdv glGetMapdv = function void (GLenum a0, GLenum a1, GLdouble* a2) nothrow {
  glGetMapdv = cast(glbfn_glGetMapdv)glGetProcAddress(`glGetMapdv`);
  if (glGetMapdv is null) assert(0, `OpenGL function 'glGetMapdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapdv'\n"); }
  glGetMapdv(a0,a1,a2,);
};
__gshared glbfn_glGetMapfv glGetMapfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetMapfv = cast(glbfn_glGetMapfv)glGetProcAddress(`glGetMapfv`);
  if (glGetMapfv is null) assert(0, `OpenGL function 'glGetMapfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapfv'\n"); }
  glGetMapfv(a0,a1,a2,);
};
__gshared glbfn_glGetMapiv glGetMapiv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetMapiv = cast(glbfn_glGetMapiv)glGetProcAddress(`glGetMapiv`);
  if (glGetMapiv is null) assert(0, `OpenGL function 'glGetMapiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapiv'\n"); }
  glGetMapiv(a0,a1,a2,);
};
__gshared glbfn_glGetMaterialfv glGetMaterialfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetMaterialfv = cast(glbfn_glGetMaterialfv)glGetProcAddress(`glGetMaterialfv`);
  if (glGetMaterialfv is null) assert(0, `OpenGL function 'glGetMaterialfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMaterialfv'\n"); }
  glGetMaterialfv(a0,a1,a2,);
};
__gshared glbfn_glGetMaterialiv glGetMaterialiv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetMaterialiv = cast(glbfn_glGetMaterialiv)glGetProcAddress(`glGetMaterialiv`);
  if (glGetMaterialiv is null) assert(0, `OpenGL function 'glGetMaterialiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMaterialiv'\n"); }
  glGetMaterialiv(a0,a1,a2,);
};
__gshared glbfn_glGetPixelMapfv glGetPixelMapfv = function void (GLenum a0, GLfloat* a1) nothrow {
  glGetPixelMapfv = cast(glbfn_glGetPixelMapfv)glGetProcAddress(`glGetPixelMapfv`);
  if (glGetPixelMapfv is null) assert(0, `OpenGL function 'glGetPixelMapfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelMapfv'\n"); }
  glGetPixelMapfv(a0,a1,);
};
__gshared glbfn_glGetPixelMapuiv glGetPixelMapuiv = function void (GLenum a0, GLuint* a1) nothrow {
  glGetPixelMapuiv = cast(glbfn_glGetPixelMapuiv)glGetProcAddress(`glGetPixelMapuiv`);
  if (glGetPixelMapuiv is null) assert(0, `OpenGL function 'glGetPixelMapuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelMapuiv'\n"); }
  glGetPixelMapuiv(a0,a1,);
};
__gshared glbfn_glGetPixelMapusv glGetPixelMapusv = function void (GLenum a0, GLushort* a1) nothrow {
  glGetPixelMapusv = cast(glbfn_glGetPixelMapusv)glGetProcAddress(`glGetPixelMapusv`);
  if (glGetPixelMapusv is null) assert(0, `OpenGL function 'glGetPixelMapusv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelMapusv'\n"); }
  glGetPixelMapusv(a0,a1,);
};
__gshared glbfn_glGetPolygonStipple glGetPolygonStipple = function void (GLubyte* a0) nothrow {
  glGetPolygonStipple = cast(glbfn_glGetPolygonStipple)glGetProcAddress(`glGetPolygonStipple`);
  if (glGetPolygonStipple is null) assert(0, `OpenGL function 'glGetPolygonStipple' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPolygonStipple'\n"); }
  glGetPolygonStipple(a0,);
};
__gshared glbfn_glGetTexEnvfv glGetTexEnvfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetTexEnvfv = cast(glbfn_glGetTexEnvfv)glGetProcAddress(`glGetTexEnvfv`);
  if (glGetTexEnvfv is null) assert(0, `OpenGL function 'glGetTexEnvfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexEnvfv'\n"); }
  glGetTexEnvfv(a0,a1,a2,);
};
__gshared glbfn_glGetTexEnviv glGetTexEnviv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetTexEnviv = cast(glbfn_glGetTexEnviv)glGetProcAddress(`glGetTexEnviv`);
  if (glGetTexEnviv is null) assert(0, `OpenGL function 'glGetTexEnviv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexEnviv'\n"); }
  glGetTexEnviv(a0,a1,a2,);
};
__gshared glbfn_glGetTexGendv glGetTexGendv = function void (GLenum a0, GLenum a1, GLdouble* a2) nothrow {
  glGetTexGendv = cast(glbfn_glGetTexGendv)glGetProcAddress(`glGetTexGendv`);
  if (glGetTexGendv is null) assert(0, `OpenGL function 'glGetTexGendv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexGendv'\n"); }
  glGetTexGendv(a0,a1,a2,);
};
__gshared glbfn_glGetTexGenfv glGetTexGenfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetTexGenfv = cast(glbfn_glGetTexGenfv)glGetProcAddress(`glGetTexGenfv`);
  if (glGetTexGenfv is null) assert(0, `OpenGL function 'glGetTexGenfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexGenfv'\n"); }
  glGetTexGenfv(a0,a1,a2,);
};
__gshared glbfn_glGetTexGeniv glGetTexGeniv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetTexGeniv = cast(glbfn_glGetTexGeniv)glGetProcAddress(`glGetTexGeniv`);
  if (glGetTexGeniv is null) assert(0, `OpenGL function 'glGetTexGeniv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexGeniv'\n"); }
  glGetTexGeniv(a0,a1,a2,);
};
__gshared glbfn_glIsList glIsList = function GLboolean (GLuint a0) nothrow {
  glIsList = cast(glbfn_glIsList)glGetProcAddress(`glIsList`);
  if (glIsList is null) assert(0, `OpenGL function 'glIsList' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsList'\n"); }
  return glIsList(a0,);
};
__gshared glbfn_glFrustum glFrustum = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5) nothrow {
  glFrustum = cast(glbfn_glFrustum)glGetProcAddress(`glFrustum`);
  if (glFrustum is null) assert(0, `OpenGL function 'glFrustum' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFrustum'\n"); }
  glFrustum(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glLoadIdentity glLoadIdentity = function void () nothrow {
  glLoadIdentity = cast(glbfn_glLoadIdentity)glGetProcAddress(`glLoadIdentity`);
  if (glLoadIdentity is null) assert(0, `OpenGL function 'glLoadIdentity' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadIdentity'\n"); }
  glLoadIdentity();
};
__gshared glbfn_glLoadMatrixf glLoadMatrixf = function void (const(GLfloat)* a0) nothrow {
  glLoadMatrixf = cast(glbfn_glLoadMatrixf)glGetProcAddress(`glLoadMatrixf`);
  if (glLoadMatrixf is null) assert(0, `OpenGL function 'glLoadMatrixf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadMatrixf'\n"); }
  glLoadMatrixf(a0,);
};
__gshared glbfn_glLoadMatrixd glLoadMatrixd = function void (const(GLdouble)* a0) nothrow {
  glLoadMatrixd = cast(glbfn_glLoadMatrixd)glGetProcAddress(`glLoadMatrixd`);
  if (glLoadMatrixd is null) assert(0, `OpenGL function 'glLoadMatrixd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadMatrixd'\n"); }
  glLoadMatrixd(a0,);
};
__gshared glbfn_glMatrixMode glMatrixMode = function void (GLenum a0) nothrow {
  glMatrixMode = cast(glbfn_glMatrixMode)glGetProcAddress(`glMatrixMode`);
  if (glMatrixMode is null) assert(0, `OpenGL function 'glMatrixMode' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMode'\n"); }
  glMatrixMode(a0,);
};
__gshared glbfn_glMultMatrixf glMultMatrixf = function void (const(GLfloat)* a0) nothrow {
  glMultMatrixf = cast(glbfn_glMultMatrixf)glGetProcAddress(`glMultMatrixf`);
  if (glMultMatrixf is null) assert(0, `OpenGL function 'glMultMatrixf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultMatrixf'\n"); }
  glMultMatrixf(a0,);
};
__gshared glbfn_glMultMatrixd glMultMatrixd = function void (const(GLdouble)* a0) nothrow {
  glMultMatrixd = cast(glbfn_glMultMatrixd)glGetProcAddress(`glMultMatrixd`);
  if (glMultMatrixd is null) assert(0, `OpenGL function 'glMultMatrixd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultMatrixd'\n"); }
  glMultMatrixd(a0,);
};
__gshared glbfn_glOrtho glOrtho = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5) nothrow {
  glOrtho = cast(glbfn_glOrtho)glGetProcAddress(`glOrtho`);
  if (glOrtho is null) assert(0, `OpenGL function 'glOrtho' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glOrtho'\n"); }
  glOrtho(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glPopMatrix glPopMatrix = function void () nothrow {
  glPopMatrix = cast(glbfn_glPopMatrix)glGetProcAddress(`glPopMatrix`);
  if (glPopMatrix is null) assert(0, `OpenGL function 'glPopMatrix' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPopMatrix'\n"); }
  glPopMatrix();
};
__gshared glbfn_glPushMatrix glPushMatrix = function void () nothrow {
  glPushMatrix = cast(glbfn_glPushMatrix)glGetProcAddress(`glPushMatrix`);
  if (glPushMatrix is null) assert(0, `OpenGL function 'glPushMatrix' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushMatrix'\n"); }
  glPushMatrix();
};
__gshared glbfn_glRotated glRotated = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glRotated = cast(glbfn_glRotated)glGetProcAddress(`glRotated`);
  if (glRotated is null) assert(0, `OpenGL function 'glRotated' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRotated'\n"); }
  glRotated(a0,a1,a2,a3,);
};
__gshared glbfn_glRotatef glRotatef = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glRotatef = cast(glbfn_glRotatef)glGetProcAddress(`glRotatef`);
  if (glRotatef is null) assert(0, `OpenGL function 'glRotatef' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRotatef'\n"); }
  glRotatef(a0,a1,a2,a3,);
};
__gshared glbfn_glScaled glScaled = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glScaled = cast(glbfn_glScaled)glGetProcAddress(`glScaled`);
  if (glScaled is null) assert(0, `OpenGL function 'glScaled' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glScaled'\n"); }
  glScaled(a0,a1,a2,);
};
__gshared glbfn_glScalef glScalef = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glScalef = cast(glbfn_glScalef)glGetProcAddress(`glScalef`);
  if (glScalef is null) assert(0, `OpenGL function 'glScalef' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glScalef'\n"); }
  glScalef(a0,a1,a2,);
};
__gshared glbfn_glTranslated glTranslated = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glTranslated = cast(glbfn_glTranslated)glGetProcAddress(`glTranslated`);
  if (glTranslated is null) assert(0, `OpenGL function 'glTranslated' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTranslated'\n"); }
  glTranslated(a0,a1,a2,);
};
__gshared glbfn_glTranslatef glTranslatef = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glTranslatef = cast(glbfn_glTranslatef)glGetProcAddress(`glTranslatef`);
  if (glTranslatef is null) assert(0, `OpenGL function 'glTranslatef' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTranslatef'\n"); }
  glTranslatef(a0,a1,a2,);
};
__gshared glbfn_glDrawArrays glDrawArrays = function void (GLenum a0, GLint a1, GLsizei a2) nothrow {
  glDrawArrays = cast(glbfn_glDrawArrays)glGetProcAddress(`glDrawArrays`);
  if (glDrawArrays is null) assert(0, `OpenGL function 'glDrawArrays' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawArrays'\n"); }
  glDrawArrays(a0,a1,a2,);
};
__gshared glbfn_glDrawElements glDrawElements = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3) nothrow {
  glDrawElements = cast(glbfn_glDrawElements)glGetProcAddress(`glDrawElements`);
  if (glDrawElements is null) assert(0, `OpenGL function 'glDrawElements' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElements'\n"); }
  glDrawElements(a0,a1,a2,a3,);
};
__gshared glbfn_glGetPointerv glGetPointerv = function void (GLenum a0, void** a1) nothrow {
  glGetPointerv = cast(glbfn_glGetPointerv)glGetProcAddress(`glGetPointerv`);
  if (glGetPointerv is null) assert(0, `OpenGL function 'glGetPointerv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPointerv'\n"); }
  glGetPointerv(a0,a1,);
};
__gshared glbfn_glPolygonOffset glPolygonOffset = function void (GLfloat a0, GLfloat a1) nothrow {
  glPolygonOffset = cast(glbfn_glPolygonOffset)glGetProcAddress(`glPolygonOffset`);
  if (glPolygonOffset is null) assert(0, `OpenGL function 'glPolygonOffset' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPolygonOffset'\n"); }
  glPolygonOffset(a0,a1,);
};
__gshared glbfn_glCopyTexImage1D glCopyTexImage1D = function void (GLenum a0, GLint a1, GLenum a2, GLint a3, GLint a4, GLsizei a5, GLint a6) nothrow {
  glCopyTexImage1D = cast(glbfn_glCopyTexImage1D)glGetProcAddress(`glCopyTexImage1D`);
  if (glCopyTexImage1D is null) assert(0, `OpenGL function 'glCopyTexImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexImage1D'\n"); }
  glCopyTexImage1D(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCopyTexImage2D glCopyTexImage2D = function void (GLenum a0, GLint a1, GLenum a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLint a7) nothrow {
  glCopyTexImage2D = cast(glbfn_glCopyTexImage2D)glGetProcAddress(`glCopyTexImage2D`);
  if (glCopyTexImage2D is null) assert(0, `OpenGL function 'glCopyTexImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexImage2D'\n"); }
  glCopyTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCopyTexSubImage1D glCopyTexSubImage1D = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5) nothrow {
  glCopyTexSubImage1D = cast(glbfn_glCopyTexSubImage1D)glGetProcAddress(`glCopyTexSubImage1D`);
  if (glCopyTexSubImage1D is null) assert(0, `OpenGL function 'glCopyTexSubImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexSubImage1D'\n"); }
  glCopyTexSubImage1D(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glCopyTexSubImage2D glCopyTexSubImage2D = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7) nothrow {
  glCopyTexSubImage2D = cast(glbfn_glCopyTexSubImage2D)glGetProcAddress(`glCopyTexSubImage2D`);
  if (glCopyTexSubImage2D is null) assert(0, `OpenGL function 'glCopyTexSubImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexSubImage2D'\n"); }
  glCopyTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTexSubImage1D glTexSubImage1D = function void (GLenum a0, GLint a1, GLint a2, GLsizei a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glTexSubImage1D = cast(glbfn_glTexSubImage1D)glGetProcAddress(`glTexSubImage1D`);
  if (glTexSubImage1D is null) assert(0, `OpenGL function 'glTexSubImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexSubImage1D'\n"); }
  glTexSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTexSubImage2D glTexSubImage2D = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLenum a6, GLenum a7, const(void)* a8) nothrow {
  glTexSubImage2D = cast(glbfn_glTexSubImage2D)glGetProcAddress(`glTexSubImage2D`);
  if (glTexSubImage2D is null) assert(0, `OpenGL function 'glTexSubImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexSubImage2D'\n"); }
  glTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glBindTexture glBindTexture = function void (GLenum a0, GLuint a1) nothrow {
  glBindTexture = cast(glbfn_glBindTexture)glGetProcAddress(`glBindTexture`);
  if (glBindTexture is null) assert(0, `OpenGL function 'glBindTexture' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTexture'\n"); }
  glBindTexture(a0,a1,);
};
__gshared glbfn_glDeleteTextures glDeleteTextures = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteTextures = cast(glbfn_glDeleteTextures)glGetProcAddress(`glDeleteTextures`);
  if (glDeleteTextures is null) assert(0, `OpenGL function 'glDeleteTextures' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteTextures'\n"); }
  glDeleteTextures(a0,a1,);
};
__gshared glbfn_glGenTextures glGenTextures = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenTextures = cast(glbfn_glGenTextures)glGetProcAddress(`glGenTextures`);
  if (glGenTextures is null) assert(0, `OpenGL function 'glGenTextures' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenTextures'\n"); }
  glGenTextures(a0,a1,);
};
__gshared glbfn_glIsTexture glIsTexture = function GLboolean (GLuint a0) nothrow {
  glIsTexture = cast(glbfn_glIsTexture)glGetProcAddress(`glIsTexture`);
  if (glIsTexture is null) assert(0, `OpenGL function 'glIsTexture' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsTexture'\n"); }
  return glIsTexture(a0,);
};
__gshared glbfn_glArrayElement glArrayElement = function void (GLint a0) nothrow {
  glArrayElement = cast(glbfn_glArrayElement)glGetProcAddress(`glArrayElement`);
  if (glArrayElement is null) assert(0, `OpenGL function 'glArrayElement' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glArrayElement'\n"); }
  glArrayElement(a0,);
};
__gshared glbfn_glColorPointer glColorPointer = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glColorPointer = cast(glbfn_glColorPointer)glGetProcAddress(`glColorPointer`);
  if (glColorPointer is null) assert(0, `OpenGL function 'glColorPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorPointer'\n"); }
  glColorPointer(a0,a1,a2,a3,);
};
__gshared glbfn_glDisableClientState glDisableClientState = function void (GLenum a0) nothrow {
  glDisableClientState = cast(glbfn_glDisableClientState)glGetProcAddress(`glDisableClientState`);
  if (glDisableClientState is null) assert(0, `OpenGL function 'glDisableClientState' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableClientState'\n"); }
  glDisableClientState(a0,);
};
__gshared glbfn_glEdgeFlagPointer glEdgeFlagPointer = function void (GLsizei a0, const(void)* a1) nothrow {
  glEdgeFlagPointer = cast(glbfn_glEdgeFlagPointer)glGetProcAddress(`glEdgeFlagPointer`);
  if (glEdgeFlagPointer is null) assert(0, `OpenGL function 'glEdgeFlagPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEdgeFlagPointer'\n"); }
  glEdgeFlagPointer(a0,a1,);
};
__gshared glbfn_glEnableClientState glEnableClientState = function void (GLenum a0) nothrow {
  glEnableClientState = cast(glbfn_glEnableClientState)glGetProcAddress(`glEnableClientState`);
  if (glEnableClientState is null) assert(0, `OpenGL function 'glEnableClientState' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableClientState'\n"); }
  glEnableClientState(a0,);
};
__gshared glbfn_glIndexPointer glIndexPointer = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glIndexPointer = cast(glbfn_glIndexPointer)glGetProcAddress(`glIndexPointer`);
  if (glIndexPointer is null) assert(0, `OpenGL function 'glIndexPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexPointer'\n"); }
  glIndexPointer(a0,a1,a2,);
};
__gshared glbfn_glInterleavedArrays glInterleavedArrays = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glInterleavedArrays = cast(glbfn_glInterleavedArrays)glGetProcAddress(`glInterleavedArrays`);
  if (glInterleavedArrays is null) assert(0, `OpenGL function 'glInterleavedArrays' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInterleavedArrays'\n"); }
  glInterleavedArrays(a0,a1,a2,);
};
__gshared glbfn_glNormalPointer glNormalPointer = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glNormalPointer = cast(glbfn_glNormalPointer)glGetProcAddress(`glNormalPointer`);
  if (glNormalPointer is null) assert(0, `OpenGL function 'glNormalPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalPointer'\n"); }
  glNormalPointer(a0,a1,a2,);
};
__gshared glbfn_glTexCoordPointer glTexCoordPointer = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glTexCoordPointer = cast(glbfn_glTexCoordPointer)glGetProcAddress(`glTexCoordPointer`);
  if (glTexCoordPointer is null) assert(0, `OpenGL function 'glTexCoordPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordPointer'\n"); }
  glTexCoordPointer(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexPointer glVertexPointer = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glVertexPointer = cast(glbfn_glVertexPointer)glGetProcAddress(`glVertexPointer`);
  if (glVertexPointer is null) assert(0, `OpenGL function 'glVertexPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexPointer'\n"); }
  glVertexPointer(a0,a1,a2,a3,);
};
__gshared glbfn_glAreTexturesResident glAreTexturesResident = function GLboolean (GLsizei a0, const(GLuint)* a1, GLboolean* a2) nothrow {
  glAreTexturesResident = cast(glbfn_glAreTexturesResident)glGetProcAddress(`glAreTexturesResident`);
  if (glAreTexturesResident is null) assert(0, `OpenGL function 'glAreTexturesResident' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAreTexturesResident'\n"); }
  return glAreTexturesResident(a0,a1,a2,);
};
__gshared glbfn_glPrioritizeTextures glPrioritizeTextures = function void (GLsizei a0, const(GLuint)* a1, const(GLfloat)* a2) nothrow {
  glPrioritizeTextures = cast(glbfn_glPrioritizeTextures)glGetProcAddress(`glPrioritizeTextures`);
  if (glPrioritizeTextures is null) assert(0, `OpenGL function 'glPrioritizeTextures' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPrioritizeTextures'\n"); }
  glPrioritizeTextures(a0,a1,a2,);
};
__gshared glbfn_glIndexub glIndexub = function void (GLubyte a0) nothrow {
  glIndexub = cast(glbfn_glIndexub)glGetProcAddress(`glIndexub`);
  if (glIndexub is null) assert(0, `OpenGL function 'glIndexub' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexub'\n"); }
  glIndexub(a0,);
};
__gshared glbfn_glIndexubv glIndexubv = function void (const(GLubyte)* a0) nothrow {
  glIndexubv = cast(glbfn_glIndexubv)glGetProcAddress(`glIndexubv`);
  if (glIndexubv is null) assert(0, `OpenGL function 'glIndexubv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexubv'\n"); }
  glIndexubv(a0,);
};
__gshared glbfn_glPopClientAttrib glPopClientAttrib = function void () nothrow {
  glPopClientAttrib = cast(glbfn_glPopClientAttrib)glGetProcAddress(`glPopClientAttrib`);
  if (glPopClientAttrib is null) assert(0, `OpenGL function 'glPopClientAttrib' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPopClientAttrib'\n"); }
  glPopClientAttrib();
};
__gshared glbfn_glPushClientAttrib glPushClientAttrib = function void (GLbitfield a0) nothrow {
  glPushClientAttrib = cast(glbfn_glPushClientAttrib)glGetProcAddress(`glPushClientAttrib`);
  if (glPushClientAttrib is null) assert(0, `OpenGL function 'glPushClientAttrib' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushClientAttrib'\n"); }
  glPushClientAttrib(a0,);
};
__gshared glbfn_glDrawRangeElements glDrawRangeElements = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3, GLenum a4, const(void)* a5) nothrow {
  glDrawRangeElements = cast(glbfn_glDrawRangeElements)glGetProcAddress(`glDrawRangeElements`);
  if (glDrawRangeElements is null) assert(0, `OpenGL function 'glDrawRangeElements' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawRangeElements'\n"); }
  glDrawRangeElements(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTexImage3D glTexImage3D = function void (GLenum a0, GLint a1, GLint a2, GLsizei a3, GLsizei a4, GLsizei a5, GLint a6, GLenum a7, GLenum a8, const(void)* a9) nothrow {
  glTexImage3D = cast(glbfn_glTexImage3D)glGetProcAddress(`glTexImage3D`);
  if (glTexImage3D is null) assert(0, `OpenGL function 'glTexImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage3D'\n"); }
  glTexImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glTexSubImage3D glTexSubImage3D = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLenum a9, const(void)* a10) nothrow {
  glTexSubImage3D = cast(glbfn_glTexSubImage3D)glGetProcAddress(`glTexSubImage3D`);
  if (glTexSubImage3D is null) assert(0, `OpenGL function 'glTexSubImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexSubImage3D'\n"); }
  glTexSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glCopyTexSubImage3D glCopyTexSubImage3D = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLsizei a7, GLsizei a8) nothrow {
  glCopyTexSubImage3D = cast(glbfn_glCopyTexSubImage3D)glGetProcAddress(`glCopyTexSubImage3D`);
  if (glCopyTexSubImage3D is null) assert(0, `OpenGL function 'glCopyTexSubImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexSubImage3D'\n"); }
  glCopyTexSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glActiveTexture glActiveTexture = function void (GLenum a0) nothrow {
  glActiveTexture = cast(glbfn_glActiveTexture)glGetProcAddress(`glActiveTexture`);
  if (glActiveTexture is null) assert(0, `OpenGL function 'glActiveTexture' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glActiveTexture'\n"); }
  glActiveTexture(a0,);
};
__gshared glbfn_glSampleCoverage glSampleCoverage = function void (GLfloat a0, GLboolean a1) nothrow {
  glSampleCoverage = cast(glbfn_glSampleCoverage)glGetProcAddress(`glSampleCoverage`);
  if (glSampleCoverage is null) assert(0, `OpenGL function 'glSampleCoverage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleCoverage'\n"); }
  glSampleCoverage(a0,a1,);
};
__gshared glbfn_glCompressedTexImage3D glCompressedTexImage3D = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLint a6, GLsizei a7, const(void)* a8) nothrow {
  glCompressedTexImage3D = cast(glbfn_glCompressedTexImage3D)glGetProcAddress(`glCompressedTexImage3D`);
  if (glCompressedTexImage3D is null) assert(0, `OpenGL function 'glCompressedTexImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexImage3D'\n"); }
  glCompressedTexImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCompressedTexImage2D glCompressedTexImage2D = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLsizei a4, GLint a5, GLsizei a6, const(void)* a7) nothrow {
  glCompressedTexImage2D = cast(glbfn_glCompressedTexImage2D)glGetProcAddress(`glCompressedTexImage2D`);
  if (glCompressedTexImage2D is null) assert(0, `OpenGL function 'glCompressedTexImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexImage2D'\n"); }
  glCompressedTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCompressedTexImage1D glCompressedTexImage1D = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLint a4, GLsizei a5, const(void)* a6) nothrow {
  glCompressedTexImage1D = cast(glbfn_glCompressedTexImage1D)glGetProcAddress(`glCompressedTexImage1D`);
  if (glCompressedTexImage1D is null) assert(0, `OpenGL function 'glCompressedTexImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexImage1D'\n"); }
  glCompressedTexImage1D(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCompressedTexSubImage3D glCompressedTexSubImage3D = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLsizei a9, const(void)* a10) nothrow {
  glCompressedTexSubImage3D = cast(glbfn_glCompressedTexSubImage3D)glGetProcAddress(`glCompressedTexSubImage3D`);
  if (glCompressedTexSubImage3D is null) assert(0, `OpenGL function 'glCompressedTexSubImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexSubImage3D'\n"); }
  glCompressedTexSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glCompressedTexSubImage2D glCompressedTexSubImage2D = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLenum a6, GLsizei a7, const(void)* a8) nothrow {
  glCompressedTexSubImage2D = cast(glbfn_glCompressedTexSubImage2D)glGetProcAddress(`glCompressedTexSubImage2D`);
  if (glCompressedTexSubImage2D is null) assert(0, `OpenGL function 'glCompressedTexSubImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexSubImage2D'\n"); }
  glCompressedTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCompressedTexSubImage1D glCompressedTexSubImage1D = function void (GLenum a0, GLint a1, GLint a2, GLsizei a3, GLenum a4, GLsizei a5, const(void)* a6) nothrow {
  glCompressedTexSubImage1D = cast(glbfn_glCompressedTexSubImage1D)glGetProcAddress(`glCompressedTexSubImage1D`);
  if (glCompressedTexSubImage1D is null) assert(0, `OpenGL function 'glCompressedTexSubImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexSubImage1D'\n"); }
  glCompressedTexSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetCompressedTexImage glGetCompressedTexImage = function void (GLenum a0, GLint a1, void* a2) nothrow {
  glGetCompressedTexImage = cast(glbfn_glGetCompressedTexImage)glGetProcAddress(`glGetCompressedTexImage`);
  if (glGetCompressedTexImage is null) assert(0, `OpenGL function 'glGetCompressedTexImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCompressedTexImage'\n"); }
  glGetCompressedTexImage(a0,a1,a2,);
};
__gshared glbfn_glClientActiveTexture glClientActiveTexture = function void (GLenum a0) nothrow {
  glClientActiveTexture = cast(glbfn_glClientActiveTexture)glGetProcAddress(`glClientActiveTexture`);
  if (glClientActiveTexture is null) assert(0, `OpenGL function 'glClientActiveTexture' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClientActiveTexture'\n"); }
  glClientActiveTexture(a0,);
};
__gshared glbfn_glMultiTexCoord1d glMultiTexCoord1d = function void (GLenum a0, GLdouble a1) nothrow {
  glMultiTexCoord1d = cast(glbfn_glMultiTexCoord1d)glGetProcAddress(`glMultiTexCoord1d`);
  if (glMultiTexCoord1d is null) assert(0, `OpenGL function 'glMultiTexCoord1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1d'\n"); }
  glMultiTexCoord1d(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1dv glMultiTexCoord1dv = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord1dv = cast(glbfn_glMultiTexCoord1dv)glGetProcAddress(`glMultiTexCoord1dv`);
  if (glMultiTexCoord1dv is null) assert(0, `OpenGL function 'glMultiTexCoord1dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1dv'\n"); }
  glMultiTexCoord1dv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1f glMultiTexCoord1f = function void (GLenum a0, GLfloat a1) nothrow {
  glMultiTexCoord1f = cast(glbfn_glMultiTexCoord1f)glGetProcAddress(`glMultiTexCoord1f`);
  if (glMultiTexCoord1f is null) assert(0, `OpenGL function 'glMultiTexCoord1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1f'\n"); }
  glMultiTexCoord1f(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1fv glMultiTexCoord1fv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord1fv = cast(glbfn_glMultiTexCoord1fv)glGetProcAddress(`glMultiTexCoord1fv`);
  if (glMultiTexCoord1fv is null) assert(0, `OpenGL function 'glMultiTexCoord1fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1fv'\n"); }
  glMultiTexCoord1fv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1i glMultiTexCoord1i = function void (GLenum a0, GLint a1) nothrow {
  glMultiTexCoord1i = cast(glbfn_glMultiTexCoord1i)glGetProcAddress(`glMultiTexCoord1i`);
  if (glMultiTexCoord1i is null) assert(0, `OpenGL function 'glMultiTexCoord1i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1i'\n"); }
  glMultiTexCoord1i(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1iv glMultiTexCoord1iv = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord1iv = cast(glbfn_glMultiTexCoord1iv)glGetProcAddress(`glMultiTexCoord1iv`);
  if (glMultiTexCoord1iv is null) assert(0, `OpenGL function 'glMultiTexCoord1iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1iv'\n"); }
  glMultiTexCoord1iv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1s glMultiTexCoord1s = function void (GLenum a0, GLshort a1) nothrow {
  glMultiTexCoord1s = cast(glbfn_glMultiTexCoord1s)glGetProcAddress(`glMultiTexCoord1s`);
  if (glMultiTexCoord1s is null) assert(0, `OpenGL function 'glMultiTexCoord1s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1s'\n"); }
  glMultiTexCoord1s(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1sv glMultiTexCoord1sv = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord1sv = cast(glbfn_glMultiTexCoord1sv)glGetProcAddress(`glMultiTexCoord1sv`);
  if (glMultiTexCoord1sv is null) assert(0, `OpenGL function 'glMultiTexCoord1sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1sv'\n"); }
  glMultiTexCoord1sv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2d glMultiTexCoord2d = function void (GLenum a0, GLdouble a1, GLdouble a2) nothrow {
  glMultiTexCoord2d = cast(glbfn_glMultiTexCoord2d)glGetProcAddress(`glMultiTexCoord2d`);
  if (glMultiTexCoord2d is null) assert(0, `OpenGL function 'glMultiTexCoord2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2d'\n"); }
  glMultiTexCoord2d(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2dv glMultiTexCoord2dv = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord2dv = cast(glbfn_glMultiTexCoord2dv)glGetProcAddress(`glMultiTexCoord2dv`);
  if (glMultiTexCoord2dv is null) assert(0, `OpenGL function 'glMultiTexCoord2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2dv'\n"); }
  glMultiTexCoord2dv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2f glMultiTexCoord2f = function void (GLenum a0, GLfloat a1, GLfloat a2) nothrow {
  glMultiTexCoord2f = cast(glbfn_glMultiTexCoord2f)glGetProcAddress(`glMultiTexCoord2f`);
  if (glMultiTexCoord2f is null) assert(0, `OpenGL function 'glMultiTexCoord2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2f'\n"); }
  glMultiTexCoord2f(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2fv glMultiTexCoord2fv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord2fv = cast(glbfn_glMultiTexCoord2fv)glGetProcAddress(`glMultiTexCoord2fv`);
  if (glMultiTexCoord2fv is null) assert(0, `OpenGL function 'glMultiTexCoord2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2fv'\n"); }
  glMultiTexCoord2fv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2i glMultiTexCoord2i = function void (GLenum a0, GLint a1, GLint a2) nothrow {
  glMultiTexCoord2i = cast(glbfn_glMultiTexCoord2i)glGetProcAddress(`glMultiTexCoord2i`);
  if (glMultiTexCoord2i is null) assert(0, `OpenGL function 'glMultiTexCoord2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2i'\n"); }
  glMultiTexCoord2i(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2iv glMultiTexCoord2iv = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord2iv = cast(glbfn_glMultiTexCoord2iv)glGetProcAddress(`glMultiTexCoord2iv`);
  if (glMultiTexCoord2iv is null) assert(0, `OpenGL function 'glMultiTexCoord2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2iv'\n"); }
  glMultiTexCoord2iv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2s glMultiTexCoord2s = function void (GLenum a0, GLshort a1, GLshort a2) nothrow {
  glMultiTexCoord2s = cast(glbfn_glMultiTexCoord2s)glGetProcAddress(`glMultiTexCoord2s`);
  if (glMultiTexCoord2s is null) assert(0, `OpenGL function 'glMultiTexCoord2s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2s'\n"); }
  glMultiTexCoord2s(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2sv glMultiTexCoord2sv = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord2sv = cast(glbfn_glMultiTexCoord2sv)glGetProcAddress(`glMultiTexCoord2sv`);
  if (glMultiTexCoord2sv is null) assert(0, `OpenGL function 'glMultiTexCoord2sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2sv'\n"); }
  glMultiTexCoord2sv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3d glMultiTexCoord3d = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glMultiTexCoord3d = cast(glbfn_glMultiTexCoord3d)glGetProcAddress(`glMultiTexCoord3d`);
  if (glMultiTexCoord3d is null) assert(0, `OpenGL function 'glMultiTexCoord3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3d'\n"); }
  glMultiTexCoord3d(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3dv glMultiTexCoord3dv = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord3dv = cast(glbfn_glMultiTexCoord3dv)glGetProcAddress(`glMultiTexCoord3dv`);
  if (glMultiTexCoord3dv is null) assert(0, `OpenGL function 'glMultiTexCoord3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3dv'\n"); }
  glMultiTexCoord3dv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3f glMultiTexCoord3f = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glMultiTexCoord3f = cast(glbfn_glMultiTexCoord3f)glGetProcAddress(`glMultiTexCoord3f`);
  if (glMultiTexCoord3f is null) assert(0, `OpenGL function 'glMultiTexCoord3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3f'\n"); }
  glMultiTexCoord3f(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3fv glMultiTexCoord3fv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord3fv = cast(glbfn_glMultiTexCoord3fv)glGetProcAddress(`glMultiTexCoord3fv`);
  if (glMultiTexCoord3fv is null) assert(0, `OpenGL function 'glMultiTexCoord3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3fv'\n"); }
  glMultiTexCoord3fv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3i glMultiTexCoord3i = function void (GLenum a0, GLint a1, GLint a2, GLint a3) nothrow {
  glMultiTexCoord3i = cast(glbfn_glMultiTexCoord3i)glGetProcAddress(`glMultiTexCoord3i`);
  if (glMultiTexCoord3i is null) assert(0, `OpenGL function 'glMultiTexCoord3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3i'\n"); }
  glMultiTexCoord3i(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3iv glMultiTexCoord3iv = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord3iv = cast(glbfn_glMultiTexCoord3iv)glGetProcAddress(`glMultiTexCoord3iv`);
  if (glMultiTexCoord3iv is null) assert(0, `OpenGL function 'glMultiTexCoord3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3iv'\n"); }
  glMultiTexCoord3iv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3s glMultiTexCoord3s = function void (GLenum a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glMultiTexCoord3s = cast(glbfn_glMultiTexCoord3s)glGetProcAddress(`glMultiTexCoord3s`);
  if (glMultiTexCoord3s is null) assert(0, `OpenGL function 'glMultiTexCoord3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3s'\n"); }
  glMultiTexCoord3s(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3sv glMultiTexCoord3sv = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord3sv = cast(glbfn_glMultiTexCoord3sv)glGetProcAddress(`glMultiTexCoord3sv`);
  if (glMultiTexCoord3sv is null) assert(0, `OpenGL function 'glMultiTexCoord3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3sv'\n"); }
  glMultiTexCoord3sv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4d glMultiTexCoord4d = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glMultiTexCoord4d = cast(glbfn_glMultiTexCoord4d)glGetProcAddress(`glMultiTexCoord4d`);
  if (glMultiTexCoord4d is null) assert(0, `OpenGL function 'glMultiTexCoord4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4d'\n"); }
  glMultiTexCoord4d(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4dv glMultiTexCoord4dv = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord4dv = cast(glbfn_glMultiTexCoord4dv)glGetProcAddress(`glMultiTexCoord4dv`);
  if (glMultiTexCoord4dv is null) assert(0, `OpenGL function 'glMultiTexCoord4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4dv'\n"); }
  glMultiTexCoord4dv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4f glMultiTexCoord4f = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glMultiTexCoord4f = cast(glbfn_glMultiTexCoord4f)glGetProcAddress(`glMultiTexCoord4f`);
  if (glMultiTexCoord4f is null) assert(0, `OpenGL function 'glMultiTexCoord4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4f'\n"); }
  glMultiTexCoord4f(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4fv glMultiTexCoord4fv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord4fv = cast(glbfn_glMultiTexCoord4fv)glGetProcAddress(`glMultiTexCoord4fv`);
  if (glMultiTexCoord4fv is null) assert(0, `OpenGL function 'glMultiTexCoord4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4fv'\n"); }
  glMultiTexCoord4fv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4i glMultiTexCoord4i = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glMultiTexCoord4i = cast(glbfn_glMultiTexCoord4i)glGetProcAddress(`glMultiTexCoord4i`);
  if (glMultiTexCoord4i is null) assert(0, `OpenGL function 'glMultiTexCoord4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4i'\n"); }
  glMultiTexCoord4i(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4iv glMultiTexCoord4iv = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord4iv = cast(glbfn_glMultiTexCoord4iv)glGetProcAddress(`glMultiTexCoord4iv`);
  if (glMultiTexCoord4iv is null) assert(0, `OpenGL function 'glMultiTexCoord4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4iv'\n"); }
  glMultiTexCoord4iv(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4s glMultiTexCoord4s = function void (GLenum a0, GLshort a1, GLshort a2, GLshort a3, GLshort a4) nothrow {
  glMultiTexCoord4s = cast(glbfn_glMultiTexCoord4s)glGetProcAddress(`glMultiTexCoord4s`);
  if (glMultiTexCoord4s is null) assert(0, `OpenGL function 'glMultiTexCoord4s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4s'\n"); }
  glMultiTexCoord4s(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4sv glMultiTexCoord4sv = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord4sv = cast(glbfn_glMultiTexCoord4sv)glGetProcAddress(`glMultiTexCoord4sv`);
  if (glMultiTexCoord4sv is null) assert(0, `OpenGL function 'glMultiTexCoord4sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4sv'\n"); }
  glMultiTexCoord4sv(a0,a1,);
};
__gshared glbfn_glLoadTransposeMatrixf glLoadTransposeMatrixf = function void (const(GLfloat)* a0) nothrow {
  glLoadTransposeMatrixf = cast(glbfn_glLoadTransposeMatrixf)glGetProcAddress(`glLoadTransposeMatrixf`);
  if (glLoadTransposeMatrixf is null) assert(0, `OpenGL function 'glLoadTransposeMatrixf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadTransposeMatrixf'\n"); }
  glLoadTransposeMatrixf(a0,);
};
__gshared glbfn_glLoadTransposeMatrixd glLoadTransposeMatrixd = function void (const(GLdouble)* a0) nothrow {
  glLoadTransposeMatrixd = cast(glbfn_glLoadTransposeMatrixd)glGetProcAddress(`glLoadTransposeMatrixd`);
  if (glLoadTransposeMatrixd is null) assert(0, `OpenGL function 'glLoadTransposeMatrixd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadTransposeMatrixd'\n"); }
  glLoadTransposeMatrixd(a0,);
};
__gshared glbfn_glMultTransposeMatrixf glMultTransposeMatrixf = function void (const(GLfloat)* a0) nothrow {
  glMultTransposeMatrixf = cast(glbfn_glMultTransposeMatrixf)glGetProcAddress(`glMultTransposeMatrixf`);
  if (glMultTransposeMatrixf is null) assert(0, `OpenGL function 'glMultTransposeMatrixf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultTransposeMatrixf'\n"); }
  glMultTransposeMatrixf(a0,);
};
__gshared glbfn_glMultTransposeMatrixd glMultTransposeMatrixd = function void (const(GLdouble)* a0) nothrow {
  glMultTransposeMatrixd = cast(glbfn_glMultTransposeMatrixd)glGetProcAddress(`glMultTransposeMatrixd`);
  if (glMultTransposeMatrixd is null) assert(0, `OpenGL function 'glMultTransposeMatrixd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultTransposeMatrixd'\n"); }
  glMultTransposeMatrixd(a0,);
};
__gshared glbfn_glBlendFuncSeparate glBlendFuncSeparate = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3) nothrow {
  glBlendFuncSeparate = cast(glbfn_glBlendFuncSeparate)glGetProcAddress(`glBlendFuncSeparate`);
  if (glBlendFuncSeparate is null) assert(0, `OpenGL function 'glBlendFuncSeparate' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFuncSeparate'\n"); }
  glBlendFuncSeparate(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiDrawArrays glMultiDrawArrays = function void (GLenum a0, const(GLint)* a1, const(GLsizei)* a2, GLsizei a3) nothrow {
  glMultiDrawArrays = cast(glbfn_glMultiDrawArrays)glGetProcAddress(`glMultiDrawArrays`);
  if (glMultiDrawArrays is null) assert(0, `OpenGL function 'glMultiDrawArrays' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawArrays'\n"); }
  glMultiDrawArrays(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiDrawElements glMultiDrawElements = function void (GLenum a0, const(GLsizei)* a1, GLenum a2, const(void*)* a3, GLsizei a4) nothrow {
  glMultiDrawElements = cast(glbfn_glMultiDrawElements)glGetProcAddress(`glMultiDrawElements`);
  if (glMultiDrawElements is null) assert(0, `OpenGL function 'glMultiDrawElements' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElements'\n"); }
  glMultiDrawElements(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glPointParameterf glPointParameterf = function void (GLenum a0, GLfloat a1) nothrow {
  glPointParameterf = cast(glbfn_glPointParameterf)glGetProcAddress(`glPointParameterf`);
  if (glPointParameterf is null) assert(0, `OpenGL function 'glPointParameterf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterf'\n"); }
  glPointParameterf(a0,a1,);
};
__gshared glbfn_glPointParameterfv glPointParameterfv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glPointParameterfv = cast(glbfn_glPointParameterfv)glGetProcAddress(`glPointParameterfv`);
  if (glPointParameterfv is null) assert(0, `OpenGL function 'glPointParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterfv'\n"); }
  glPointParameterfv(a0,a1,);
};
__gshared glbfn_glPointParameteri glPointParameteri = function void (GLenum a0, GLint a1) nothrow {
  glPointParameteri = cast(glbfn_glPointParameteri)glGetProcAddress(`glPointParameteri`);
  if (glPointParameteri is null) assert(0, `OpenGL function 'glPointParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameteri'\n"); }
  glPointParameteri(a0,a1,);
};
__gshared glbfn_glPointParameteriv glPointParameteriv = function void (GLenum a0, const(GLint)* a1) nothrow {
  glPointParameteriv = cast(glbfn_glPointParameteriv)glGetProcAddress(`glPointParameteriv`);
  if (glPointParameteriv is null) assert(0, `OpenGL function 'glPointParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameteriv'\n"); }
  glPointParameteriv(a0,a1,);
};
__gshared glbfn_glFogCoordf glFogCoordf = function void (GLfloat a0) nothrow {
  glFogCoordf = cast(glbfn_glFogCoordf)glGetProcAddress(`glFogCoordf`);
  if (glFogCoordf is null) assert(0, `OpenGL function 'glFogCoordf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordf'\n"); }
  glFogCoordf(a0,);
};
__gshared glbfn_glFogCoordfv glFogCoordfv = function void (const(GLfloat)* a0) nothrow {
  glFogCoordfv = cast(glbfn_glFogCoordfv)glGetProcAddress(`glFogCoordfv`);
  if (glFogCoordfv is null) assert(0, `OpenGL function 'glFogCoordfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordfv'\n"); }
  glFogCoordfv(a0,);
};
__gshared glbfn_glFogCoordd glFogCoordd = function void (GLdouble a0) nothrow {
  glFogCoordd = cast(glbfn_glFogCoordd)glGetProcAddress(`glFogCoordd`);
  if (glFogCoordd is null) assert(0, `OpenGL function 'glFogCoordd' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordd'\n"); }
  glFogCoordd(a0,);
};
__gshared glbfn_glFogCoorddv glFogCoorddv = function void (const(GLdouble)* a0) nothrow {
  glFogCoorddv = cast(glbfn_glFogCoorddv)glGetProcAddress(`glFogCoorddv`);
  if (glFogCoorddv is null) assert(0, `OpenGL function 'glFogCoorddv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoorddv'\n"); }
  glFogCoorddv(a0,);
};
__gshared glbfn_glFogCoordPointer glFogCoordPointer = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glFogCoordPointer = cast(glbfn_glFogCoordPointer)glGetProcAddress(`glFogCoordPointer`);
  if (glFogCoordPointer is null) assert(0, `OpenGL function 'glFogCoordPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordPointer'\n"); }
  glFogCoordPointer(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3b glSecondaryColor3b = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glSecondaryColor3b = cast(glbfn_glSecondaryColor3b)glGetProcAddress(`glSecondaryColor3b`);
  if (glSecondaryColor3b is null) assert(0, `OpenGL function 'glSecondaryColor3b' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3b'\n"); }
  glSecondaryColor3b(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3bv glSecondaryColor3bv = function void (const(GLbyte)* a0) nothrow {
  glSecondaryColor3bv = cast(glbfn_glSecondaryColor3bv)glGetProcAddress(`glSecondaryColor3bv`);
  if (glSecondaryColor3bv is null) assert(0, `OpenGL function 'glSecondaryColor3bv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3bv'\n"); }
  glSecondaryColor3bv(a0,);
};
__gshared glbfn_glSecondaryColor3d glSecondaryColor3d = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glSecondaryColor3d = cast(glbfn_glSecondaryColor3d)glGetProcAddress(`glSecondaryColor3d`);
  if (glSecondaryColor3d is null) assert(0, `OpenGL function 'glSecondaryColor3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3d'\n"); }
  glSecondaryColor3d(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3dv glSecondaryColor3dv = function void (const(GLdouble)* a0) nothrow {
  glSecondaryColor3dv = cast(glbfn_glSecondaryColor3dv)glGetProcAddress(`glSecondaryColor3dv`);
  if (glSecondaryColor3dv is null) assert(0, `OpenGL function 'glSecondaryColor3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3dv'\n"); }
  glSecondaryColor3dv(a0,);
};
__gshared glbfn_glSecondaryColor3f glSecondaryColor3f = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glSecondaryColor3f = cast(glbfn_glSecondaryColor3f)glGetProcAddress(`glSecondaryColor3f`);
  if (glSecondaryColor3f is null) assert(0, `OpenGL function 'glSecondaryColor3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3f'\n"); }
  glSecondaryColor3f(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3fv glSecondaryColor3fv = function void (const(GLfloat)* a0) nothrow {
  glSecondaryColor3fv = cast(glbfn_glSecondaryColor3fv)glGetProcAddress(`glSecondaryColor3fv`);
  if (glSecondaryColor3fv is null) assert(0, `OpenGL function 'glSecondaryColor3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3fv'\n"); }
  glSecondaryColor3fv(a0,);
};
__gshared glbfn_glSecondaryColor3i glSecondaryColor3i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glSecondaryColor3i = cast(glbfn_glSecondaryColor3i)glGetProcAddress(`glSecondaryColor3i`);
  if (glSecondaryColor3i is null) assert(0, `OpenGL function 'glSecondaryColor3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3i'\n"); }
  glSecondaryColor3i(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3iv glSecondaryColor3iv = function void (const(GLint)* a0) nothrow {
  glSecondaryColor3iv = cast(glbfn_glSecondaryColor3iv)glGetProcAddress(`glSecondaryColor3iv`);
  if (glSecondaryColor3iv is null) assert(0, `OpenGL function 'glSecondaryColor3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3iv'\n"); }
  glSecondaryColor3iv(a0,);
};
__gshared glbfn_glSecondaryColor3s glSecondaryColor3s = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glSecondaryColor3s = cast(glbfn_glSecondaryColor3s)glGetProcAddress(`glSecondaryColor3s`);
  if (glSecondaryColor3s is null) assert(0, `OpenGL function 'glSecondaryColor3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3s'\n"); }
  glSecondaryColor3s(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3sv glSecondaryColor3sv = function void (const(GLshort)* a0) nothrow {
  glSecondaryColor3sv = cast(glbfn_glSecondaryColor3sv)glGetProcAddress(`glSecondaryColor3sv`);
  if (glSecondaryColor3sv is null) assert(0, `OpenGL function 'glSecondaryColor3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3sv'\n"); }
  glSecondaryColor3sv(a0,);
};
__gshared glbfn_glSecondaryColor3ub glSecondaryColor3ub = function void (GLubyte a0, GLubyte a1, GLubyte a2) nothrow {
  glSecondaryColor3ub = cast(glbfn_glSecondaryColor3ub)glGetProcAddress(`glSecondaryColor3ub`);
  if (glSecondaryColor3ub is null) assert(0, `OpenGL function 'glSecondaryColor3ub' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3ub'\n"); }
  glSecondaryColor3ub(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3ubv glSecondaryColor3ubv = function void (const(GLubyte)* a0) nothrow {
  glSecondaryColor3ubv = cast(glbfn_glSecondaryColor3ubv)glGetProcAddress(`glSecondaryColor3ubv`);
  if (glSecondaryColor3ubv is null) assert(0, `OpenGL function 'glSecondaryColor3ubv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3ubv'\n"); }
  glSecondaryColor3ubv(a0,);
};
__gshared glbfn_glSecondaryColor3ui glSecondaryColor3ui = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glSecondaryColor3ui = cast(glbfn_glSecondaryColor3ui)glGetProcAddress(`glSecondaryColor3ui`);
  if (glSecondaryColor3ui is null) assert(0, `OpenGL function 'glSecondaryColor3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3ui'\n"); }
  glSecondaryColor3ui(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3uiv glSecondaryColor3uiv = function void (const(GLuint)* a0) nothrow {
  glSecondaryColor3uiv = cast(glbfn_glSecondaryColor3uiv)glGetProcAddress(`glSecondaryColor3uiv`);
  if (glSecondaryColor3uiv is null) assert(0, `OpenGL function 'glSecondaryColor3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3uiv'\n"); }
  glSecondaryColor3uiv(a0,);
};
__gshared glbfn_glSecondaryColor3us glSecondaryColor3us = function void (GLushort a0, GLushort a1, GLushort a2) nothrow {
  glSecondaryColor3us = cast(glbfn_glSecondaryColor3us)glGetProcAddress(`glSecondaryColor3us`);
  if (glSecondaryColor3us is null) assert(0, `OpenGL function 'glSecondaryColor3us' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3us'\n"); }
  glSecondaryColor3us(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3usv glSecondaryColor3usv = function void (const(GLushort)* a0) nothrow {
  glSecondaryColor3usv = cast(glbfn_glSecondaryColor3usv)glGetProcAddress(`glSecondaryColor3usv`);
  if (glSecondaryColor3usv is null) assert(0, `OpenGL function 'glSecondaryColor3usv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3usv'\n"); }
  glSecondaryColor3usv(a0,);
};
__gshared glbfn_glSecondaryColorPointer glSecondaryColorPointer = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glSecondaryColorPointer = cast(glbfn_glSecondaryColorPointer)glGetProcAddress(`glSecondaryColorPointer`);
  if (glSecondaryColorPointer is null) assert(0, `OpenGL function 'glSecondaryColorPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColorPointer'\n"); }
  glSecondaryColorPointer(a0,a1,a2,a3,);
};
__gshared glbfn_glWindowPos2d glWindowPos2d = function void (GLdouble a0, GLdouble a1) nothrow {
  glWindowPos2d = cast(glbfn_glWindowPos2d)glGetProcAddress(`glWindowPos2d`);
  if (glWindowPos2d is null) assert(0, `OpenGL function 'glWindowPos2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2d'\n"); }
  glWindowPos2d(a0,a1,);
};
__gshared glbfn_glWindowPos2dv glWindowPos2dv = function void (const(GLdouble)* a0) nothrow {
  glWindowPos2dv = cast(glbfn_glWindowPos2dv)glGetProcAddress(`glWindowPos2dv`);
  if (glWindowPos2dv is null) assert(0, `OpenGL function 'glWindowPos2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2dv'\n"); }
  glWindowPos2dv(a0,);
};
__gshared glbfn_glWindowPos2f glWindowPos2f = function void (GLfloat a0, GLfloat a1) nothrow {
  glWindowPos2f = cast(glbfn_glWindowPos2f)glGetProcAddress(`glWindowPos2f`);
  if (glWindowPos2f is null) assert(0, `OpenGL function 'glWindowPos2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2f'\n"); }
  glWindowPos2f(a0,a1,);
};
__gshared glbfn_glWindowPos2fv glWindowPos2fv = function void (const(GLfloat)* a0) nothrow {
  glWindowPos2fv = cast(glbfn_glWindowPos2fv)glGetProcAddress(`glWindowPos2fv`);
  if (glWindowPos2fv is null) assert(0, `OpenGL function 'glWindowPos2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2fv'\n"); }
  glWindowPos2fv(a0,);
};
__gshared glbfn_glWindowPos2i glWindowPos2i = function void (GLint a0, GLint a1) nothrow {
  glWindowPos2i = cast(glbfn_glWindowPos2i)glGetProcAddress(`glWindowPos2i`);
  if (glWindowPos2i is null) assert(0, `OpenGL function 'glWindowPos2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2i'\n"); }
  glWindowPos2i(a0,a1,);
};
__gshared glbfn_glWindowPos2iv glWindowPos2iv = function void (const(GLint)* a0) nothrow {
  glWindowPos2iv = cast(glbfn_glWindowPos2iv)glGetProcAddress(`glWindowPos2iv`);
  if (glWindowPos2iv is null) assert(0, `OpenGL function 'glWindowPos2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2iv'\n"); }
  glWindowPos2iv(a0,);
};
__gshared glbfn_glWindowPos2s glWindowPos2s = function void (GLshort a0, GLshort a1) nothrow {
  glWindowPos2s = cast(glbfn_glWindowPos2s)glGetProcAddress(`glWindowPos2s`);
  if (glWindowPos2s is null) assert(0, `OpenGL function 'glWindowPos2s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2s'\n"); }
  glWindowPos2s(a0,a1,);
};
__gshared glbfn_glWindowPos2sv glWindowPos2sv = function void (const(GLshort)* a0) nothrow {
  glWindowPos2sv = cast(glbfn_glWindowPos2sv)glGetProcAddress(`glWindowPos2sv`);
  if (glWindowPos2sv is null) assert(0, `OpenGL function 'glWindowPos2sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2sv'\n"); }
  glWindowPos2sv(a0,);
};
__gshared glbfn_glWindowPos3d glWindowPos3d = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glWindowPos3d = cast(glbfn_glWindowPos3d)glGetProcAddress(`glWindowPos3d`);
  if (glWindowPos3d is null) assert(0, `OpenGL function 'glWindowPos3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3d'\n"); }
  glWindowPos3d(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3dv glWindowPos3dv = function void (const(GLdouble)* a0) nothrow {
  glWindowPos3dv = cast(glbfn_glWindowPos3dv)glGetProcAddress(`glWindowPos3dv`);
  if (glWindowPos3dv is null) assert(0, `OpenGL function 'glWindowPos3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3dv'\n"); }
  glWindowPos3dv(a0,);
};
__gshared glbfn_glWindowPos3f glWindowPos3f = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glWindowPos3f = cast(glbfn_glWindowPos3f)glGetProcAddress(`glWindowPos3f`);
  if (glWindowPos3f is null) assert(0, `OpenGL function 'glWindowPos3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3f'\n"); }
  glWindowPos3f(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3fv glWindowPos3fv = function void (const(GLfloat)* a0) nothrow {
  glWindowPos3fv = cast(glbfn_glWindowPos3fv)glGetProcAddress(`glWindowPos3fv`);
  if (glWindowPos3fv is null) assert(0, `OpenGL function 'glWindowPos3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3fv'\n"); }
  glWindowPos3fv(a0,);
};
__gshared glbfn_glWindowPos3i glWindowPos3i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glWindowPos3i = cast(glbfn_glWindowPos3i)glGetProcAddress(`glWindowPos3i`);
  if (glWindowPos3i is null) assert(0, `OpenGL function 'glWindowPos3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3i'\n"); }
  glWindowPos3i(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3iv glWindowPos3iv = function void (const(GLint)* a0) nothrow {
  glWindowPos3iv = cast(glbfn_glWindowPos3iv)glGetProcAddress(`glWindowPos3iv`);
  if (glWindowPos3iv is null) assert(0, `OpenGL function 'glWindowPos3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3iv'\n"); }
  glWindowPos3iv(a0,);
};
__gshared glbfn_glWindowPos3s glWindowPos3s = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glWindowPos3s = cast(glbfn_glWindowPos3s)glGetProcAddress(`glWindowPos3s`);
  if (glWindowPos3s is null) assert(0, `OpenGL function 'glWindowPos3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3s'\n"); }
  glWindowPos3s(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3sv glWindowPos3sv = function void (const(GLshort)* a0) nothrow {
  glWindowPos3sv = cast(glbfn_glWindowPos3sv)glGetProcAddress(`glWindowPos3sv`);
  if (glWindowPos3sv is null) assert(0, `OpenGL function 'glWindowPos3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3sv'\n"); }
  glWindowPos3sv(a0,);
};
__gshared glbfn_glBlendColor glBlendColor = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glBlendColor = cast(glbfn_glBlendColor)glGetProcAddress(`glBlendColor`);
  if (glBlendColor is null) assert(0, `OpenGL function 'glBlendColor' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendColor'\n"); }
  glBlendColor(a0,a1,a2,a3,);
};
__gshared glbfn_glBlendEquation glBlendEquation = function void (GLenum a0) nothrow {
  glBlendEquation = cast(glbfn_glBlendEquation)glGetProcAddress(`glBlendEquation`);
  if (glBlendEquation is null) assert(0, `OpenGL function 'glBlendEquation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquation'\n"); }
  glBlendEquation(a0,);
};
__gshared glbfn_glGenQueries glGenQueries = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenQueries = cast(glbfn_glGenQueries)glGetProcAddress(`glGenQueries`);
  if (glGenQueries is null) assert(0, `OpenGL function 'glGenQueries' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenQueries'\n"); }
  glGenQueries(a0,a1,);
};
__gshared glbfn_glDeleteQueries glDeleteQueries = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteQueries = cast(glbfn_glDeleteQueries)glGetProcAddress(`glDeleteQueries`);
  if (glDeleteQueries is null) assert(0, `OpenGL function 'glDeleteQueries' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteQueries'\n"); }
  glDeleteQueries(a0,a1,);
};
__gshared glbfn_glIsQuery glIsQuery = function GLboolean (GLuint a0) nothrow {
  glIsQuery = cast(glbfn_glIsQuery)glGetProcAddress(`glIsQuery`);
  if (glIsQuery is null) assert(0, `OpenGL function 'glIsQuery' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsQuery'\n"); }
  return glIsQuery(a0,);
};
__gshared glbfn_glBeginQuery glBeginQuery = function void (GLenum a0, GLuint a1) nothrow {
  glBeginQuery = cast(glbfn_glBeginQuery)glGetProcAddress(`glBeginQuery`);
  if (glBeginQuery is null) assert(0, `OpenGL function 'glBeginQuery' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginQuery'\n"); }
  glBeginQuery(a0,a1,);
};
__gshared glbfn_glEndQuery glEndQuery = function void (GLenum a0) nothrow {
  glEndQuery = cast(glbfn_glEndQuery)glGetProcAddress(`glEndQuery`);
  if (glEndQuery is null) assert(0, `OpenGL function 'glEndQuery' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndQuery'\n"); }
  glEndQuery(a0,);
};
__gshared glbfn_glGetQueryiv glGetQueryiv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetQueryiv = cast(glbfn_glGetQueryiv)glGetProcAddress(`glGetQueryiv`);
  if (glGetQueryiv is null) assert(0, `OpenGL function 'glGetQueryiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryiv'\n"); }
  glGetQueryiv(a0,a1,a2,);
};
__gshared glbfn_glGetQueryObjectiv glGetQueryObjectiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetQueryObjectiv = cast(glbfn_glGetQueryObjectiv)glGetProcAddress(`glGetQueryObjectiv`);
  if (glGetQueryObjectiv is null) assert(0, `OpenGL function 'glGetQueryObjectiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjectiv'\n"); }
  glGetQueryObjectiv(a0,a1,a2,);
};
__gshared glbfn_glGetQueryObjectuiv glGetQueryObjectuiv = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetQueryObjectuiv = cast(glbfn_glGetQueryObjectuiv)glGetProcAddress(`glGetQueryObjectuiv`);
  if (glGetQueryObjectuiv is null) assert(0, `OpenGL function 'glGetQueryObjectuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjectuiv'\n"); }
  glGetQueryObjectuiv(a0,a1,a2,);
};
__gshared glbfn_glBindBuffer glBindBuffer = function void (GLenum a0, GLuint a1) nothrow {
  glBindBuffer = cast(glbfn_glBindBuffer)glGetProcAddress(`glBindBuffer`);
  if (glBindBuffer is null) assert(0, `OpenGL function 'glBindBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBuffer'\n"); }
  glBindBuffer(a0,a1,);
};
__gshared glbfn_glDeleteBuffers glDeleteBuffers = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteBuffers = cast(glbfn_glDeleteBuffers)glGetProcAddress(`glDeleteBuffers`);
  if (glDeleteBuffers is null) assert(0, `OpenGL function 'glDeleteBuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteBuffers'\n"); }
  glDeleteBuffers(a0,a1,);
};
__gshared glbfn_glGenBuffers glGenBuffers = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenBuffers = cast(glbfn_glGenBuffers)glGetProcAddress(`glGenBuffers`);
  if (glGenBuffers is null) assert(0, `OpenGL function 'glGenBuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenBuffers'\n"); }
  glGenBuffers(a0,a1,);
};
__gshared glbfn_glIsBuffer glIsBuffer = function GLboolean (GLuint a0) nothrow {
  glIsBuffer = cast(glbfn_glIsBuffer)glGetProcAddress(`glIsBuffer`);
  if (glIsBuffer is null) assert(0, `OpenGL function 'glIsBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsBuffer'\n"); }
  return glIsBuffer(a0,);
};
__gshared glbfn_glBufferData glBufferData = function void (GLenum a0, GLsizeiptr a1, const(void)* a2, GLenum a3) nothrow {
  glBufferData = cast(glbfn_glBufferData)glGetProcAddress(`glBufferData`);
  if (glBufferData is null) assert(0, `OpenGL function 'glBufferData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferData'\n"); }
  glBufferData(a0,a1,a2,a3,);
};
__gshared glbfn_glBufferSubData glBufferSubData = function void (GLenum a0, GLintptr a1, GLsizeiptr a2, const(void)* a3) nothrow {
  glBufferSubData = cast(glbfn_glBufferSubData)glGetProcAddress(`glBufferSubData`);
  if (glBufferSubData is null) assert(0, `OpenGL function 'glBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferSubData'\n"); }
  glBufferSubData(a0,a1,a2,a3,);
};
__gshared glbfn_glGetBufferSubData glGetBufferSubData = function void (GLenum a0, GLintptr a1, GLsizeiptr a2, void* a3) nothrow {
  glGetBufferSubData = cast(glbfn_glGetBufferSubData)glGetProcAddress(`glGetBufferSubData`);
  if (glGetBufferSubData is null) assert(0, `OpenGL function 'glGetBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferSubData'\n"); }
  glGetBufferSubData(a0,a1,a2,a3,);
};
__gshared glbfn_glMapBuffer glMapBuffer = function void* (GLenum a0, GLenum a1) nothrow {
  glMapBuffer = cast(glbfn_glMapBuffer)glGetProcAddress(`glMapBuffer`);
  if (glMapBuffer is null) assert(0, `OpenGL function 'glMapBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapBuffer'\n"); }
  return glMapBuffer(a0,a1,);
};
__gshared glbfn_glUnmapBuffer glUnmapBuffer = function GLboolean (GLenum a0) nothrow {
  glUnmapBuffer = cast(glbfn_glUnmapBuffer)glGetProcAddress(`glUnmapBuffer`);
  if (glUnmapBuffer is null) assert(0, `OpenGL function 'glUnmapBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUnmapBuffer'\n"); }
  return glUnmapBuffer(a0,);
};
__gshared glbfn_glGetBufferParameteriv glGetBufferParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetBufferParameteriv = cast(glbfn_glGetBufferParameteriv)glGetProcAddress(`glGetBufferParameteriv`);
  if (glGetBufferParameteriv is null) assert(0, `OpenGL function 'glGetBufferParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferParameteriv'\n"); }
  glGetBufferParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetBufferPointerv glGetBufferPointerv = function void (GLenum a0, GLenum a1, void** a2) nothrow {
  glGetBufferPointerv = cast(glbfn_glGetBufferPointerv)glGetProcAddress(`glGetBufferPointerv`);
  if (glGetBufferPointerv is null) assert(0, `OpenGL function 'glGetBufferPointerv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferPointerv'\n"); }
  glGetBufferPointerv(a0,a1,a2,);
};
__gshared glbfn_glBlendEquationSeparate glBlendEquationSeparate = function void (GLenum a0, GLenum a1) nothrow {
  glBlendEquationSeparate = cast(glbfn_glBlendEquationSeparate)glGetProcAddress(`glBlendEquationSeparate`);
  if (glBlendEquationSeparate is null) assert(0, `OpenGL function 'glBlendEquationSeparate' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationSeparate'\n"); }
  glBlendEquationSeparate(a0,a1,);
};
__gshared glbfn_glDrawBuffers glDrawBuffers = function void (GLsizei a0, const(GLenum)* a1) nothrow {
  glDrawBuffers = cast(glbfn_glDrawBuffers)glGetProcAddress(`glDrawBuffers`);
  if (glDrawBuffers is null) assert(0, `OpenGL function 'glDrawBuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawBuffers'\n"); }
  glDrawBuffers(a0,a1,);
};
__gshared glbfn_glStencilOpSeparate glStencilOpSeparate = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3) nothrow {
  glStencilOpSeparate = cast(glbfn_glStencilOpSeparate)glGetProcAddress(`glStencilOpSeparate`);
  if (glStencilOpSeparate is null) assert(0, `OpenGL function 'glStencilOpSeparate' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilOpSeparate'\n"); }
  glStencilOpSeparate(a0,a1,a2,a3,);
};
__gshared glbfn_glStencilFuncSeparate glStencilFuncSeparate = function void (GLenum a0, GLenum a1, GLint a2, GLuint a3) nothrow {
  glStencilFuncSeparate = cast(glbfn_glStencilFuncSeparate)glGetProcAddress(`glStencilFuncSeparate`);
  if (glStencilFuncSeparate is null) assert(0, `OpenGL function 'glStencilFuncSeparate' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilFuncSeparate'\n"); }
  glStencilFuncSeparate(a0,a1,a2,a3,);
};
__gshared glbfn_glStencilMaskSeparate glStencilMaskSeparate = function void (GLenum a0, GLuint a1) nothrow {
  glStencilMaskSeparate = cast(glbfn_glStencilMaskSeparate)glGetProcAddress(`glStencilMaskSeparate`);
  if (glStencilMaskSeparate is null) assert(0, `OpenGL function 'glStencilMaskSeparate' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilMaskSeparate'\n"); }
  glStencilMaskSeparate(a0,a1,);
};
__gshared glbfn_glAttachShader glAttachShader = function void (GLuint a0, GLuint a1) nothrow {
  glAttachShader = cast(glbfn_glAttachShader)glGetProcAddress(`glAttachShader`);
  if (glAttachShader is null) assert(0, `OpenGL function 'glAttachShader' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAttachShader'\n"); }
  glAttachShader(a0,a1,);
};
__gshared glbfn_glBindAttribLocation glBindAttribLocation = function void (GLuint a0, GLuint a1, const(GLchar)* a2) nothrow {
  glBindAttribLocation = cast(glbfn_glBindAttribLocation)glGetProcAddress(`glBindAttribLocation`);
  if (glBindAttribLocation is null) assert(0, `OpenGL function 'glBindAttribLocation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindAttribLocation'\n"); }
  glBindAttribLocation(a0,a1,a2,);
};
__gshared glbfn_glCompileShader glCompileShader = function void (GLuint a0) nothrow {
  glCompileShader = cast(glbfn_glCompileShader)glGetProcAddress(`glCompileShader`);
  if (glCompileShader is null) assert(0, `OpenGL function 'glCompileShader' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompileShader'\n"); }
  glCompileShader(a0,);
};
__gshared glbfn_glCreateProgram glCreateProgram = function GLuint () nothrow {
  glCreateProgram = cast(glbfn_glCreateProgram)glGetProcAddress(`glCreateProgram`);
  if (glCreateProgram is null) assert(0, `OpenGL function 'glCreateProgram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateProgram'\n"); }
  return glCreateProgram();
};
__gshared glbfn_glCreateShader glCreateShader = function GLuint (GLenum a0) nothrow {
  glCreateShader = cast(glbfn_glCreateShader)glGetProcAddress(`glCreateShader`);
  if (glCreateShader is null) assert(0, `OpenGL function 'glCreateShader' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateShader'\n"); }
  return glCreateShader(a0,);
};
__gshared glbfn_glDeleteProgram glDeleteProgram = function void (GLuint a0) nothrow {
  glDeleteProgram = cast(glbfn_glDeleteProgram)glGetProcAddress(`glDeleteProgram`);
  if (glDeleteProgram is null) assert(0, `OpenGL function 'glDeleteProgram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteProgram'\n"); }
  glDeleteProgram(a0,);
};
__gshared glbfn_glDeleteShader glDeleteShader = function void (GLuint a0) nothrow {
  glDeleteShader = cast(glbfn_glDeleteShader)glGetProcAddress(`glDeleteShader`);
  if (glDeleteShader is null) assert(0, `OpenGL function 'glDeleteShader' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteShader'\n"); }
  glDeleteShader(a0,);
};
__gshared glbfn_glDetachShader glDetachShader = function void (GLuint a0, GLuint a1) nothrow {
  glDetachShader = cast(glbfn_glDetachShader)glGetProcAddress(`glDetachShader`);
  if (glDetachShader is null) assert(0, `OpenGL function 'glDetachShader' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDetachShader'\n"); }
  glDetachShader(a0,a1,);
};
__gshared glbfn_glDisableVertexAttribArray glDisableVertexAttribArray = function void (GLuint a0) nothrow {
  glDisableVertexAttribArray = cast(glbfn_glDisableVertexAttribArray)glGetProcAddress(`glDisableVertexAttribArray`);
  if (glDisableVertexAttribArray is null) assert(0, `OpenGL function 'glDisableVertexAttribArray' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableVertexAttribArray'\n"); }
  glDisableVertexAttribArray(a0,);
};
__gshared glbfn_glEnableVertexAttribArray glEnableVertexAttribArray = function void (GLuint a0) nothrow {
  glEnableVertexAttribArray = cast(glbfn_glEnableVertexAttribArray)glGetProcAddress(`glEnableVertexAttribArray`);
  if (glEnableVertexAttribArray is null) assert(0, `OpenGL function 'glEnableVertexAttribArray' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableVertexAttribArray'\n"); }
  glEnableVertexAttribArray(a0,);
};
__gshared glbfn_glGetActiveAttrib glGetActiveAttrib = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLint* a4, GLenum* a5, GLchar* a6) nothrow {
  glGetActiveAttrib = cast(glbfn_glGetActiveAttrib)glGetProcAddress(`glGetActiveAttrib`);
  if (glGetActiveAttrib is null) assert(0, `OpenGL function 'glGetActiveAttrib' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveAttrib'\n"); }
  glGetActiveAttrib(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetActiveUniform glGetActiveUniform = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLint* a4, GLenum* a5, GLchar* a6) nothrow {
  glGetActiveUniform = cast(glbfn_glGetActiveUniform)glGetProcAddress(`glGetActiveUniform`);
  if (glGetActiveUniform is null) assert(0, `OpenGL function 'glGetActiveUniform' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveUniform'\n"); }
  glGetActiveUniform(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetAttachedShaders glGetAttachedShaders = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLuint* a3) nothrow {
  glGetAttachedShaders = cast(glbfn_glGetAttachedShaders)glGetProcAddress(`glGetAttachedShaders`);
  if (glGetAttachedShaders is null) assert(0, `OpenGL function 'glGetAttachedShaders' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetAttachedShaders'\n"); }
  glGetAttachedShaders(a0,a1,a2,a3,);
};
__gshared glbfn_glGetAttribLocation glGetAttribLocation = function GLint (GLuint a0, const(GLchar)* a1) nothrow {
  glGetAttribLocation = cast(glbfn_glGetAttribLocation)glGetProcAddress(`glGetAttribLocation`);
  if (glGetAttribLocation is null) assert(0, `OpenGL function 'glGetAttribLocation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetAttribLocation'\n"); }
  return glGetAttribLocation(a0,a1,);
};
__gshared glbfn_glGetProgramiv glGetProgramiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetProgramiv = cast(glbfn_glGetProgramiv)glGetProcAddress(`glGetProgramiv`);
  if (glGetProgramiv is null) assert(0, `OpenGL function 'glGetProgramiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramiv'\n"); }
  glGetProgramiv(a0,a1,a2,);
};
__gshared glbfn_glGetProgramInfoLog glGetProgramInfoLog = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetProgramInfoLog = cast(glbfn_glGetProgramInfoLog)glGetProcAddress(`glGetProgramInfoLog`);
  if (glGetProgramInfoLog is null) assert(0, `OpenGL function 'glGetProgramInfoLog' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramInfoLog'\n"); }
  glGetProgramInfoLog(a0,a1,a2,a3,);
};
__gshared glbfn_glGetShaderiv glGetShaderiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetShaderiv = cast(glbfn_glGetShaderiv)glGetProcAddress(`glGetShaderiv`);
  if (glGetShaderiv is null) assert(0, `OpenGL function 'glGetShaderiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetShaderiv'\n"); }
  glGetShaderiv(a0,a1,a2,);
};
__gshared glbfn_glGetShaderInfoLog glGetShaderInfoLog = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetShaderInfoLog = cast(glbfn_glGetShaderInfoLog)glGetProcAddress(`glGetShaderInfoLog`);
  if (glGetShaderInfoLog is null) assert(0, `OpenGL function 'glGetShaderInfoLog' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetShaderInfoLog'\n"); }
  glGetShaderInfoLog(a0,a1,a2,a3,);
};
__gshared glbfn_glGetShaderSource glGetShaderSource = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetShaderSource = cast(glbfn_glGetShaderSource)glGetProcAddress(`glGetShaderSource`);
  if (glGetShaderSource is null) assert(0, `OpenGL function 'glGetShaderSource' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetShaderSource'\n"); }
  glGetShaderSource(a0,a1,a2,a3,);
};
__gshared glbfn_glGetUniformLocation glGetUniformLocation = function GLint (GLuint a0, const(GLchar)* a1) nothrow {
  glGetUniformLocation = cast(glbfn_glGetUniformLocation)glGetProcAddress(`glGetUniformLocation`);
  if (glGetUniformLocation is null) assert(0, `OpenGL function 'glGetUniformLocation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformLocation'\n"); }
  return glGetUniformLocation(a0,a1,);
};
__gshared glbfn_glGetUniformfv glGetUniformfv = function void (GLuint a0, GLint a1, GLfloat* a2) nothrow {
  glGetUniformfv = cast(glbfn_glGetUniformfv)glGetProcAddress(`glGetUniformfv`);
  if (glGetUniformfv is null) assert(0, `OpenGL function 'glGetUniformfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformfv'\n"); }
  glGetUniformfv(a0,a1,a2,);
};
__gshared glbfn_glGetUniformiv glGetUniformiv = function void (GLuint a0, GLint a1, GLint* a2) nothrow {
  glGetUniformiv = cast(glbfn_glGetUniformiv)glGetProcAddress(`glGetUniformiv`);
  if (glGetUniformiv is null) assert(0, `OpenGL function 'glGetUniformiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformiv'\n"); }
  glGetUniformiv(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribdv glGetVertexAttribdv = function void (GLuint a0, GLenum a1, GLdouble* a2) nothrow {
  glGetVertexAttribdv = cast(glbfn_glGetVertexAttribdv)glGetProcAddress(`glGetVertexAttribdv`);
  if (glGetVertexAttribdv is null) assert(0, `OpenGL function 'glGetVertexAttribdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribdv'\n"); }
  glGetVertexAttribdv(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribfv glGetVertexAttribfv = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetVertexAttribfv = cast(glbfn_glGetVertexAttribfv)glGetProcAddress(`glGetVertexAttribfv`);
  if (glGetVertexAttribfv is null) assert(0, `OpenGL function 'glGetVertexAttribfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribfv'\n"); }
  glGetVertexAttribfv(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribiv glGetVertexAttribiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexAttribiv = cast(glbfn_glGetVertexAttribiv)glGetProcAddress(`glGetVertexAttribiv`);
  if (glGetVertexAttribiv is null) assert(0, `OpenGL function 'glGetVertexAttribiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribiv'\n"); }
  glGetVertexAttribiv(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribPointerv glGetVertexAttribPointerv = function void (GLuint a0, GLenum a1, void** a2) nothrow {
  glGetVertexAttribPointerv = cast(glbfn_glGetVertexAttribPointerv)glGetProcAddress(`glGetVertexAttribPointerv`);
  if (glGetVertexAttribPointerv is null) assert(0, `OpenGL function 'glGetVertexAttribPointerv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribPointerv'\n"); }
  glGetVertexAttribPointerv(a0,a1,a2,);
};
__gshared glbfn_glIsProgram glIsProgram = function GLboolean (GLuint a0) nothrow {
  glIsProgram = cast(glbfn_glIsProgram)glGetProcAddress(`glIsProgram`);
  if (glIsProgram is null) assert(0, `OpenGL function 'glIsProgram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsProgram'\n"); }
  return glIsProgram(a0,);
};
__gshared glbfn_glIsShader glIsShader = function GLboolean (GLuint a0) nothrow {
  glIsShader = cast(glbfn_glIsShader)glGetProcAddress(`glIsShader`);
  if (glIsShader is null) assert(0, `OpenGL function 'glIsShader' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsShader'\n"); }
  return glIsShader(a0,);
};
__gshared glbfn_glLinkProgram glLinkProgram = function void (GLuint a0) nothrow {
  glLinkProgram = cast(glbfn_glLinkProgram)glGetProcAddress(`glLinkProgram`);
  if (glLinkProgram is null) assert(0, `OpenGL function 'glLinkProgram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLinkProgram'\n"); }
  glLinkProgram(a0,);
};
__gshared glbfn_glShaderSource glShaderSource = function void (GLuint a0, GLsizei a1, const(GLchar*)* a2, const(GLint)* a3) nothrow {
  glShaderSource = cast(glbfn_glShaderSource)glGetProcAddress(`glShaderSource`);
  if (glShaderSource is null) assert(0, `OpenGL function 'glShaderSource' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShaderSource'\n"); }
  glShaderSource(a0,a1,a2,a3,);
};
__gshared glbfn_glUseProgram glUseProgram = function void (GLuint a0) nothrow {
  glUseProgram = cast(glbfn_glUseProgram)glGetProcAddress(`glUseProgram`);
  if (glUseProgram is null) assert(0, `OpenGL function 'glUseProgram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUseProgram'\n"); }
  glUseProgram(a0,);
};
__gshared glbfn_glUniform1f glUniform1f = function void (GLint a0, GLfloat a1) nothrow {
  glUniform1f = cast(glbfn_glUniform1f)glGetProcAddress(`glUniform1f`);
  if (glUniform1f is null) assert(0, `OpenGL function 'glUniform1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1f'\n"); }
  glUniform1f(a0,a1,);
};
__gshared glbfn_glUniform2f glUniform2f = function void (GLint a0, GLfloat a1, GLfloat a2) nothrow {
  glUniform2f = cast(glbfn_glUniform2f)glGetProcAddress(`glUniform2f`);
  if (glUniform2f is null) assert(0, `OpenGL function 'glUniform2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2f'\n"); }
  glUniform2f(a0,a1,a2,);
};
__gshared glbfn_glUniform3f glUniform3f = function void (GLint a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glUniform3f = cast(glbfn_glUniform3f)glGetProcAddress(`glUniform3f`);
  if (glUniform3f is null) assert(0, `OpenGL function 'glUniform3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3f'\n"); }
  glUniform3f(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4f glUniform4f = function void (GLint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glUniform4f = cast(glbfn_glUniform4f)glGetProcAddress(`glUniform4f`);
  if (glUniform4f is null) assert(0, `OpenGL function 'glUniform4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4f'\n"); }
  glUniform4f(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1i glUniform1i = function void (GLint a0, GLint a1) nothrow {
  glUniform1i = cast(glbfn_glUniform1i)glGetProcAddress(`glUniform1i`);
  if (glUniform1i is null) assert(0, `OpenGL function 'glUniform1i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1i'\n"); }
  glUniform1i(a0,a1,);
};
__gshared glbfn_glUniform2i glUniform2i = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glUniform2i = cast(glbfn_glUniform2i)glGetProcAddress(`glUniform2i`);
  if (glUniform2i is null) assert(0, `OpenGL function 'glUniform2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2i'\n"); }
  glUniform2i(a0,a1,a2,);
};
__gshared glbfn_glUniform3i glUniform3i = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glUniform3i = cast(glbfn_glUniform3i)glGetProcAddress(`glUniform3i`);
  if (glUniform3i is null) assert(0, `OpenGL function 'glUniform3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3i'\n"); }
  glUniform3i(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4i glUniform4i = function void (GLint a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glUniform4i = cast(glbfn_glUniform4i)glGetProcAddress(`glUniform4i`);
  if (glUniform4i is null) assert(0, `OpenGL function 'glUniform4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4i'\n"); }
  glUniform4i(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1fv glUniform1fv = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform1fv = cast(glbfn_glUniform1fv)glGetProcAddress(`glUniform1fv`);
  if (glUniform1fv is null) assert(0, `OpenGL function 'glUniform1fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1fv'\n"); }
  glUniform1fv(a0,a1,a2,);
};
__gshared glbfn_glUniform2fv glUniform2fv = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform2fv = cast(glbfn_glUniform2fv)glGetProcAddress(`glUniform2fv`);
  if (glUniform2fv is null) assert(0, `OpenGL function 'glUniform2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2fv'\n"); }
  glUniform2fv(a0,a1,a2,);
};
__gshared glbfn_glUniform3fv glUniform3fv = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform3fv = cast(glbfn_glUniform3fv)glGetProcAddress(`glUniform3fv`);
  if (glUniform3fv is null) assert(0, `OpenGL function 'glUniform3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3fv'\n"); }
  glUniform3fv(a0,a1,a2,);
};
__gshared glbfn_glUniform4fv glUniform4fv = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform4fv = cast(glbfn_glUniform4fv)glGetProcAddress(`glUniform4fv`);
  if (glUniform4fv is null) assert(0, `OpenGL function 'glUniform4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4fv'\n"); }
  glUniform4fv(a0,a1,a2,);
};
__gshared glbfn_glUniform1iv glUniform1iv = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform1iv = cast(glbfn_glUniform1iv)glGetProcAddress(`glUniform1iv`);
  if (glUniform1iv is null) assert(0, `OpenGL function 'glUniform1iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1iv'\n"); }
  glUniform1iv(a0,a1,a2,);
};
__gshared glbfn_glUniform2iv glUniform2iv = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform2iv = cast(glbfn_glUniform2iv)glGetProcAddress(`glUniform2iv`);
  if (glUniform2iv is null) assert(0, `OpenGL function 'glUniform2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2iv'\n"); }
  glUniform2iv(a0,a1,a2,);
};
__gshared glbfn_glUniform3iv glUniform3iv = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform3iv = cast(glbfn_glUniform3iv)glGetProcAddress(`glUniform3iv`);
  if (glUniform3iv is null) assert(0, `OpenGL function 'glUniform3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3iv'\n"); }
  glUniform3iv(a0,a1,a2,);
};
__gshared glbfn_glUniform4iv glUniform4iv = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform4iv = cast(glbfn_glUniform4iv)glGetProcAddress(`glUniform4iv`);
  if (glUniform4iv is null) assert(0, `OpenGL function 'glUniform4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4iv'\n"); }
  glUniform4iv(a0,a1,a2,);
};
__gshared glbfn_glUniformMatrix2fv glUniformMatrix2fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix2fv = cast(glbfn_glUniformMatrix2fv)glGetProcAddress(`glUniformMatrix2fv`);
  if (glUniformMatrix2fv is null) assert(0, `OpenGL function 'glUniformMatrix2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix2fv'\n"); }
  glUniformMatrix2fv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix3fv glUniformMatrix3fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix3fv = cast(glbfn_glUniformMatrix3fv)glGetProcAddress(`glUniformMatrix3fv`);
  if (glUniformMatrix3fv is null) assert(0, `OpenGL function 'glUniformMatrix3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix3fv'\n"); }
  glUniformMatrix3fv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix4fv glUniformMatrix4fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix4fv = cast(glbfn_glUniformMatrix4fv)glGetProcAddress(`glUniformMatrix4fv`);
  if (glUniformMatrix4fv is null) assert(0, `OpenGL function 'glUniformMatrix4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix4fv'\n"); }
  glUniformMatrix4fv(a0,a1,a2,a3,);
};
__gshared glbfn_glValidateProgram glValidateProgram = function void (GLuint a0) nothrow {
  glValidateProgram = cast(glbfn_glValidateProgram)glGetProcAddress(`glValidateProgram`);
  if (glValidateProgram is null) assert(0, `OpenGL function 'glValidateProgram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glValidateProgram'\n"); }
  glValidateProgram(a0,);
};
__gshared glbfn_glVertexAttrib1d glVertexAttrib1d = function void (GLuint a0, GLdouble a1) nothrow {
  glVertexAttrib1d = cast(glbfn_glVertexAttrib1d)glGetProcAddress(`glVertexAttrib1d`);
  if (glVertexAttrib1d is null) assert(0, `OpenGL function 'glVertexAttrib1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1d'\n"); }
  glVertexAttrib1d(a0,a1,);
};
__gshared glbfn_glVertexAttrib1dv glVertexAttrib1dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib1dv = cast(glbfn_glVertexAttrib1dv)glGetProcAddress(`glVertexAttrib1dv`);
  if (glVertexAttrib1dv is null) assert(0, `OpenGL function 'glVertexAttrib1dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1dv'\n"); }
  glVertexAttrib1dv(a0,a1,);
};
__gshared glbfn_glVertexAttrib1f glVertexAttrib1f = function void (GLuint a0, GLfloat a1) nothrow {
  glVertexAttrib1f = cast(glbfn_glVertexAttrib1f)glGetProcAddress(`glVertexAttrib1f`);
  if (glVertexAttrib1f is null) assert(0, `OpenGL function 'glVertexAttrib1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1f'\n"); }
  glVertexAttrib1f(a0,a1,);
};
__gshared glbfn_glVertexAttrib1fv glVertexAttrib1fv = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib1fv = cast(glbfn_glVertexAttrib1fv)glGetProcAddress(`glVertexAttrib1fv`);
  if (glVertexAttrib1fv is null) assert(0, `OpenGL function 'glVertexAttrib1fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1fv'\n"); }
  glVertexAttrib1fv(a0,a1,);
};
__gshared glbfn_glVertexAttrib1s glVertexAttrib1s = function void (GLuint a0, GLshort a1) nothrow {
  glVertexAttrib1s = cast(glbfn_glVertexAttrib1s)glGetProcAddress(`glVertexAttrib1s`);
  if (glVertexAttrib1s is null) assert(0, `OpenGL function 'glVertexAttrib1s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1s'\n"); }
  glVertexAttrib1s(a0,a1,);
};
__gshared glbfn_glVertexAttrib1sv glVertexAttrib1sv = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib1sv = cast(glbfn_glVertexAttrib1sv)glGetProcAddress(`glVertexAttrib1sv`);
  if (glVertexAttrib1sv is null) assert(0, `OpenGL function 'glVertexAttrib1sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1sv'\n"); }
  glVertexAttrib1sv(a0,a1,);
};
__gshared glbfn_glVertexAttrib2d glVertexAttrib2d = function void (GLuint a0, GLdouble a1, GLdouble a2) nothrow {
  glVertexAttrib2d = cast(glbfn_glVertexAttrib2d)glGetProcAddress(`glVertexAttrib2d`);
  if (glVertexAttrib2d is null) assert(0, `OpenGL function 'glVertexAttrib2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2d'\n"); }
  glVertexAttrib2d(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2dv glVertexAttrib2dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib2dv = cast(glbfn_glVertexAttrib2dv)glGetProcAddress(`glVertexAttrib2dv`);
  if (glVertexAttrib2dv is null) assert(0, `OpenGL function 'glVertexAttrib2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2dv'\n"); }
  glVertexAttrib2dv(a0,a1,);
};
__gshared glbfn_glVertexAttrib2f glVertexAttrib2f = function void (GLuint a0, GLfloat a1, GLfloat a2) nothrow {
  glVertexAttrib2f = cast(glbfn_glVertexAttrib2f)glGetProcAddress(`glVertexAttrib2f`);
  if (glVertexAttrib2f is null) assert(0, `OpenGL function 'glVertexAttrib2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2f'\n"); }
  glVertexAttrib2f(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2fv glVertexAttrib2fv = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib2fv = cast(glbfn_glVertexAttrib2fv)glGetProcAddress(`glVertexAttrib2fv`);
  if (glVertexAttrib2fv is null) assert(0, `OpenGL function 'glVertexAttrib2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2fv'\n"); }
  glVertexAttrib2fv(a0,a1,);
};
__gshared glbfn_glVertexAttrib2s glVertexAttrib2s = function void (GLuint a0, GLshort a1, GLshort a2) nothrow {
  glVertexAttrib2s = cast(glbfn_glVertexAttrib2s)glGetProcAddress(`glVertexAttrib2s`);
  if (glVertexAttrib2s is null) assert(0, `OpenGL function 'glVertexAttrib2s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2s'\n"); }
  glVertexAttrib2s(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2sv glVertexAttrib2sv = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib2sv = cast(glbfn_glVertexAttrib2sv)glGetProcAddress(`glVertexAttrib2sv`);
  if (glVertexAttrib2sv is null) assert(0, `OpenGL function 'glVertexAttrib2sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2sv'\n"); }
  glVertexAttrib2sv(a0,a1,);
};
__gshared glbfn_glVertexAttrib3d glVertexAttrib3d = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glVertexAttrib3d = cast(glbfn_glVertexAttrib3d)glGetProcAddress(`glVertexAttrib3d`);
  if (glVertexAttrib3d is null) assert(0, `OpenGL function 'glVertexAttrib3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3d'\n"); }
  glVertexAttrib3d(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3dv glVertexAttrib3dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib3dv = cast(glbfn_glVertexAttrib3dv)glGetProcAddress(`glVertexAttrib3dv`);
  if (glVertexAttrib3dv is null) assert(0, `OpenGL function 'glVertexAttrib3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3dv'\n"); }
  glVertexAttrib3dv(a0,a1,);
};
__gshared glbfn_glVertexAttrib3f glVertexAttrib3f = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glVertexAttrib3f = cast(glbfn_glVertexAttrib3f)glGetProcAddress(`glVertexAttrib3f`);
  if (glVertexAttrib3f is null) assert(0, `OpenGL function 'glVertexAttrib3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3f'\n"); }
  glVertexAttrib3f(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3fv glVertexAttrib3fv = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib3fv = cast(glbfn_glVertexAttrib3fv)glGetProcAddress(`glVertexAttrib3fv`);
  if (glVertexAttrib3fv is null) assert(0, `OpenGL function 'glVertexAttrib3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3fv'\n"); }
  glVertexAttrib3fv(a0,a1,);
};
__gshared glbfn_glVertexAttrib3s glVertexAttrib3s = function void (GLuint a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glVertexAttrib3s = cast(glbfn_glVertexAttrib3s)glGetProcAddress(`glVertexAttrib3s`);
  if (glVertexAttrib3s is null) assert(0, `OpenGL function 'glVertexAttrib3s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3s'\n"); }
  glVertexAttrib3s(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3sv glVertexAttrib3sv = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib3sv = cast(glbfn_glVertexAttrib3sv)glGetProcAddress(`glVertexAttrib3sv`);
  if (glVertexAttrib3sv is null) assert(0, `OpenGL function 'glVertexAttrib3sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3sv'\n"); }
  glVertexAttrib3sv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4Nbv glVertexAttrib4Nbv = function void (GLuint a0, const(GLbyte)* a1) nothrow {
  glVertexAttrib4Nbv = cast(glbfn_glVertexAttrib4Nbv)glGetProcAddress(`glVertexAttrib4Nbv`);
  if (glVertexAttrib4Nbv is null) assert(0, `OpenGL function 'glVertexAttrib4Nbv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4Nbv'\n"); }
  glVertexAttrib4Nbv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4Niv glVertexAttrib4Niv = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttrib4Niv = cast(glbfn_glVertexAttrib4Niv)glGetProcAddress(`glVertexAttrib4Niv`);
  if (glVertexAttrib4Niv is null) assert(0, `OpenGL function 'glVertexAttrib4Niv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4Niv'\n"); }
  glVertexAttrib4Niv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4Nsv glVertexAttrib4Nsv = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib4Nsv = cast(glbfn_glVertexAttrib4Nsv)glGetProcAddress(`glVertexAttrib4Nsv`);
  if (glVertexAttrib4Nsv is null) assert(0, `OpenGL function 'glVertexAttrib4Nsv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4Nsv'\n"); }
  glVertexAttrib4Nsv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4Nub glVertexAttrib4Nub = function void (GLuint a0, GLubyte a1, GLubyte a2, GLubyte a3, GLubyte a4) nothrow {
  glVertexAttrib4Nub = cast(glbfn_glVertexAttrib4Nub)glGetProcAddress(`glVertexAttrib4Nub`);
  if (glVertexAttrib4Nub is null) assert(0, `OpenGL function 'glVertexAttrib4Nub' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4Nub'\n"); }
  glVertexAttrib4Nub(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4Nubv glVertexAttrib4Nubv = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVertexAttrib4Nubv = cast(glbfn_glVertexAttrib4Nubv)glGetProcAddress(`glVertexAttrib4Nubv`);
  if (glVertexAttrib4Nubv is null) assert(0, `OpenGL function 'glVertexAttrib4Nubv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4Nubv'\n"); }
  glVertexAttrib4Nubv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4Nuiv glVertexAttrib4Nuiv = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttrib4Nuiv = cast(glbfn_glVertexAttrib4Nuiv)glGetProcAddress(`glVertexAttrib4Nuiv`);
  if (glVertexAttrib4Nuiv is null) assert(0, `OpenGL function 'glVertexAttrib4Nuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4Nuiv'\n"); }
  glVertexAttrib4Nuiv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4Nusv glVertexAttrib4Nusv = function void (GLuint a0, const(GLushort)* a1) nothrow {
  glVertexAttrib4Nusv = cast(glbfn_glVertexAttrib4Nusv)glGetProcAddress(`glVertexAttrib4Nusv`);
  if (glVertexAttrib4Nusv is null) assert(0, `OpenGL function 'glVertexAttrib4Nusv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4Nusv'\n"); }
  glVertexAttrib4Nusv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4bv glVertexAttrib4bv = function void (GLuint a0, const(GLbyte)* a1) nothrow {
  glVertexAttrib4bv = cast(glbfn_glVertexAttrib4bv)glGetProcAddress(`glVertexAttrib4bv`);
  if (glVertexAttrib4bv is null) assert(0, `OpenGL function 'glVertexAttrib4bv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4bv'\n"); }
  glVertexAttrib4bv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4d glVertexAttrib4d = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glVertexAttrib4d = cast(glbfn_glVertexAttrib4d)glGetProcAddress(`glVertexAttrib4d`);
  if (glVertexAttrib4d is null) assert(0, `OpenGL function 'glVertexAttrib4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4d'\n"); }
  glVertexAttrib4d(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4dv glVertexAttrib4dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib4dv = cast(glbfn_glVertexAttrib4dv)glGetProcAddress(`glVertexAttrib4dv`);
  if (glVertexAttrib4dv is null) assert(0, `OpenGL function 'glVertexAttrib4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4dv'\n"); }
  glVertexAttrib4dv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4f glVertexAttrib4f = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glVertexAttrib4f = cast(glbfn_glVertexAttrib4f)glGetProcAddress(`glVertexAttrib4f`);
  if (glVertexAttrib4f is null) assert(0, `OpenGL function 'glVertexAttrib4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4f'\n"); }
  glVertexAttrib4f(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4fv glVertexAttrib4fv = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib4fv = cast(glbfn_glVertexAttrib4fv)glGetProcAddress(`glVertexAttrib4fv`);
  if (glVertexAttrib4fv is null) assert(0, `OpenGL function 'glVertexAttrib4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4fv'\n"); }
  glVertexAttrib4fv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4iv glVertexAttrib4iv = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttrib4iv = cast(glbfn_glVertexAttrib4iv)glGetProcAddress(`glVertexAttrib4iv`);
  if (glVertexAttrib4iv is null) assert(0, `OpenGL function 'glVertexAttrib4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4iv'\n"); }
  glVertexAttrib4iv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4s glVertexAttrib4s = function void (GLuint a0, GLshort a1, GLshort a2, GLshort a3, GLshort a4) nothrow {
  glVertexAttrib4s = cast(glbfn_glVertexAttrib4s)glGetProcAddress(`glVertexAttrib4s`);
  if (glVertexAttrib4s is null) assert(0, `OpenGL function 'glVertexAttrib4s' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4s'\n"); }
  glVertexAttrib4s(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4sv glVertexAttrib4sv = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib4sv = cast(glbfn_glVertexAttrib4sv)glGetProcAddress(`glVertexAttrib4sv`);
  if (glVertexAttrib4sv is null) assert(0, `OpenGL function 'glVertexAttrib4sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4sv'\n"); }
  glVertexAttrib4sv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4ubv glVertexAttrib4ubv = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVertexAttrib4ubv = cast(glbfn_glVertexAttrib4ubv)glGetProcAddress(`glVertexAttrib4ubv`);
  if (glVertexAttrib4ubv is null) assert(0, `OpenGL function 'glVertexAttrib4ubv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4ubv'\n"); }
  glVertexAttrib4ubv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4uiv glVertexAttrib4uiv = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttrib4uiv = cast(glbfn_glVertexAttrib4uiv)glGetProcAddress(`glVertexAttrib4uiv`);
  if (glVertexAttrib4uiv is null) assert(0, `OpenGL function 'glVertexAttrib4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4uiv'\n"); }
  glVertexAttrib4uiv(a0,a1,);
};
__gshared glbfn_glVertexAttrib4usv glVertexAttrib4usv = function void (GLuint a0, const(GLushort)* a1) nothrow {
  glVertexAttrib4usv = cast(glbfn_glVertexAttrib4usv)glGetProcAddress(`glVertexAttrib4usv`);
  if (glVertexAttrib4usv is null) assert(0, `OpenGL function 'glVertexAttrib4usv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4usv'\n"); }
  glVertexAttrib4usv(a0,a1,);
};
__gshared glbfn_glVertexAttribPointer glVertexAttribPointer = function void (GLuint a0, GLint a1, GLenum a2, GLboolean a3, GLsizei a4, const(void)* a5) nothrow {
  glVertexAttribPointer = cast(glbfn_glVertexAttribPointer)glGetProcAddress(`glVertexAttribPointer`);
  if (glVertexAttribPointer is null) assert(0, `OpenGL function 'glVertexAttribPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribPointer'\n"); }
  glVertexAttribPointer(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glUniformMatrix2x3fv glUniformMatrix2x3fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix2x3fv = cast(glbfn_glUniformMatrix2x3fv)glGetProcAddress(`glUniformMatrix2x3fv`);
  if (glUniformMatrix2x3fv is null) assert(0, `OpenGL function 'glUniformMatrix2x3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix2x3fv'\n"); }
  glUniformMatrix2x3fv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix3x2fv glUniformMatrix3x2fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix3x2fv = cast(glbfn_glUniformMatrix3x2fv)glGetProcAddress(`glUniformMatrix3x2fv`);
  if (glUniformMatrix3x2fv is null) assert(0, `OpenGL function 'glUniformMatrix3x2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix3x2fv'\n"); }
  glUniformMatrix3x2fv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix2x4fv glUniformMatrix2x4fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix2x4fv = cast(glbfn_glUniformMatrix2x4fv)glGetProcAddress(`glUniformMatrix2x4fv`);
  if (glUniformMatrix2x4fv is null) assert(0, `OpenGL function 'glUniformMatrix2x4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix2x4fv'\n"); }
  glUniformMatrix2x4fv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix4x2fv glUniformMatrix4x2fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix4x2fv = cast(glbfn_glUniformMatrix4x2fv)glGetProcAddress(`glUniformMatrix4x2fv`);
  if (glUniformMatrix4x2fv is null) assert(0, `OpenGL function 'glUniformMatrix4x2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix4x2fv'\n"); }
  glUniformMatrix4x2fv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix3x4fv glUniformMatrix3x4fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix3x4fv = cast(glbfn_glUniformMatrix3x4fv)glGetProcAddress(`glUniformMatrix3x4fv`);
  if (glUniformMatrix3x4fv is null) assert(0, `OpenGL function 'glUniformMatrix3x4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix3x4fv'\n"); }
  glUniformMatrix3x4fv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix4x3fv glUniformMatrix4x3fv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix4x3fv = cast(glbfn_glUniformMatrix4x3fv)glGetProcAddress(`glUniformMatrix4x3fv`);
  if (glUniformMatrix4x3fv is null) assert(0, `OpenGL function 'glUniformMatrix4x3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix4x3fv'\n"); }
  glUniformMatrix4x3fv(a0,a1,a2,a3,);
};
__gshared glbfn_glColorMaski glColorMaski = function void (GLuint a0, GLboolean a1, GLboolean a2, GLboolean a3, GLboolean a4) nothrow {
  glColorMaski = cast(glbfn_glColorMaski)glGetProcAddress(`glColorMaski`);
  if (glColorMaski is null) assert(0, `OpenGL function 'glColorMaski' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorMaski'\n"); }
  glColorMaski(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetBooleani_v glGetBooleani_v = function void (GLenum a0, GLuint a1, GLboolean* a2) nothrow {
  glGetBooleani_v = cast(glbfn_glGetBooleani_v)glGetProcAddress(`glGetBooleani_v`);
  if (glGetBooleani_v is null) assert(0, `OpenGL function 'glGetBooleani_v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBooleani_v'\n"); }
  glGetBooleani_v(a0,a1,a2,);
};
__gshared glbfn_glGetIntegeri_v glGetIntegeri_v = function void (GLenum a0, GLuint a1, GLint* a2) nothrow {
  glGetIntegeri_v = cast(glbfn_glGetIntegeri_v)glGetProcAddress(`glGetIntegeri_v`);
  if (glGetIntegeri_v is null) assert(0, `OpenGL function 'glGetIntegeri_v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetIntegeri_v'\n"); }
  glGetIntegeri_v(a0,a1,a2,);
};
__gshared glbfn_glEnablei glEnablei = function void (GLenum a0, GLuint a1) nothrow {
  glEnablei = cast(glbfn_glEnablei)glGetProcAddress(`glEnablei`);
  if (glEnablei is null) assert(0, `OpenGL function 'glEnablei' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnablei'\n"); }
  glEnablei(a0,a1,);
};
__gshared glbfn_glDisablei glDisablei = function void (GLenum a0, GLuint a1) nothrow {
  glDisablei = cast(glbfn_glDisablei)glGetProcAddress(`glDisablei`);
  if (glDisablei is null) assert(0, `OpenGL function 'glDisablei' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisablei'\n"); }
  glDisablei(a0,a1,);
};
__gshared glbfn_glIsEnabledi glIsEnabledi = function GLboolean (GLenum a0, GLuint a1) nothrow {
  glIsEnabledi = cast(glbfn_glIsEnabledi)glGetProcAddress(`glIsEnabledi`);
  if (glIsEnabledi is null) assert(0, `OpenGL function 'glIsEnabledi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsEnabledi'\n"); }
  return glIsEnabledi(a0,a1,);
};
__gshared glbfn_glBeginTransformFeedback glBeginTransformFeedback = function void (GLenum a0) nothrow {
  glBeginTransformFeedback = cast(glbfn_glBeginTransformFeedback)glGetProcAddress(`glBeginTransformFeedback`);
  if (glBeginTransformFeedback is null) assert(0, `OpenGL function 'glBeginTransformFeedback' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginTransformFeedback'\n"); }
  glBeginTransformFeedback(a0,);
};
__gshared glbfn_glEndTransformFeedback glEndTransformFeedback = function void () nothrow {
  glEndTransformFeedback = cast(glbfn_glEndTransformFeedback)glGetProcAddress(`glEndTransformFeedback`);
  if (glEndTransformFeedback is null) assert(0, `OpenGL function 'glEndTransformFeedback' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndTransformFeedback'\n"); }
  glEndTransformFeedback();
};
__gshared glbfn_glBindBufferRange glBindBufferRange = function void (GLenum a0, GLuint a1, GLuint a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glBindBufferRange = cast(glbfn_glBindBufferRange)glGetProcAddress(`glBindBufferRange`);
  if (glBindBufferRange is null) assert(0, `OpenGL function 'glBindBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferRange'\n"); }
  glBindBufferRange(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBindBufferBase glBindBufferBase = function void (GLenum a0, GLuint a1, GLuint a2) nothrow {
  glBindBufferBase = cast(glbfn_glBindBufferBase)glGetProcAddress(`glBindBufferBase`);
  if (glBindBufferBase is null) assert(0, `OpenGL function 'glBindBufferBase' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferBase'\n"); }
  glBindBufferBase(a0,a1,a2,);
};
__gshared glbfn_glTransformFeedbackVaryings glTransformFeedbackVaryings = function void (GLuint a0, GLsizei a1, const(GLchar*)* a2, GLenum a3) nothrow {
  glTransformFeedbackVaryings = cast(glbfn_glTransformFeedbackVaryings)glGetProcAddress(`glTransformFeedbackVaryings`);
  if (glTransformFeedbackVaryings is null) assert(0, `OpenGL function 'glTransformFeedbackVaryings' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformFeedbackVaryings'\n"); }
  glTransformFeedbackVaryings(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTransformFeedbackVarying glGetTransformFeedbackVarying = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLsizei* a4, GLenum* a5, GLchar* a6) nothrow {
  glGetTransformFeedbackVarying = cast(glbfn_glGetTransformFeedbackVarying)glGetProcAddress(`glGetTransformFeedbackVarying`);
  if (glGetTransformFeedbackVarying is null) assert(0, `OpenGL function 'glGetTransformFeedbackVarying' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTransformFeedbackVarying'\n"); }
  glGetTransformFeedbackVarying(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glClampColor glClampColor = function void (GLenum a0, GLenum a1) nothrow {
  glClampColor = cast(glbfn_glClampColor)glGetProcAddress(`glClampColor`);
  if (glClampColor is null) assert(0, `OpenGL function 'glClampColor' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClampColor'\n"); }
  glClampColor(a0,a1,);
};
__gshared glbfn_glBeginConditionalRender glBeginConditionalRender = function void (GLuint a0, GLenum a1) nothrow {
  glBeginConditionalRender = cast(glbfn_glBeginConditionalRender)glGetProcAddress(`glBeginConditionalRender`);
  if (glBeginConditionalRender is null) assert(0, `OpenGL function 'glBeginConditionalRender' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginConditionalRender'\n"); }
  glBeginConditionalRender(a0,a1,);
};
__gshared glbfn_glEndConditionalRender glEndConditionalRender = function void () nothrow {
  glEndConditionalRender = cast(glbfn_glEndConditionalRender)glGetProcAddress(`glEndConditionalRender`);
  if (glEndConditionalRender is null) assert(0, `OpenGL function 'glEndConditionalRender' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndConditionalRender'\n"); }
  glEndConditionalRender();
};
__gshared glbfn_glVertexAttribIPointer glVertexAttribIPointer = function void (GLuint a0, GLint a1, GLenum a2, GLsizei a3, const(void)* a4) nothrow {
  glVertexAttribIPointer = cast(glbfn_glVertexAttribIPointer)glGetProcAddress(`glVertexAttribIPointer`);
  if (glVertexAttribIPointer is null) assert(0, `OpenGL function 'glVertexAttribIPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribIPointer'\n"); }
  glVertexAttribIPointer(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetVertexAttribIiv glGetVertexAttribIiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexAttribIiv = cast(glbfn_glGetVertexAttribIiv)glGetProcAddress(`glGetVertexAttribIiv`);
  if (glGetVertexAttribIiv is null) assert(0, `OpenGL function 'glGetVertexAttribIiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribIiv'\n"); }
  glGetVertexAttribIiv(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribIuiv glGetVertexAttribIuiv = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetVertexAttribIuiv = cast(glbfn_glGetVertexAttribIuiv)glGetProcAddress(`glGetVertexAttribIuiv`);
  if (glGetVertexAttribIuiv is null) assert(0, `OpenGL function 'glGetVertexAttribIuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribIuiv'\n"); }
  glGetVertexAttribIuiv(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribI1i glVertexAttribI1i = function void (GLuint a0, GLint a1) nothrow {
  glVertexAttribI1i = cast(glbfn_glVertexAttribI1i)glGetProcAddress(`glVertexAttribI1i`);
  if (glVertexAttribI1i is null) assert(0, `OpenGL function 'glVertexAttribI1i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1i'\n"); }
  glVertexAttribI1i(a0,a1,);
};
__gshared glbfn_glVertexAttribI2i glVertexAttribI2i = function void (GLuint a0, GLint a1, GLint a2) nothrow {
  glVertexAttribI2i = cast(glbfn_glVertexAttribI2i)glGetProcAddress(`glVertexAttribI2i`);
  if (glVertexAttribI2i is null) assert(0, `OpenGL function 'glVertexAttribI2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2i'\n"); }
  glVertexAttribI2i(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribI3i glVertexAttribI3i = function void (GLuint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glVertexAttribI3i = cast(glbfn_glVertexAttribI3i)glGetProcAddress(`glVertexAttribI3i`);
  if (glVertexAttribI3i is null) assert(0, `OpenGL function 'glVertexAttribI3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3i'\n"); }
  glVertexAttribI3i(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribI4i glVertexAttribI4i = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glVertexAttribI4i = cast(glbfn_glVertexAttribI4i)glGetProcAddress(`glVertexAttribI4i`);
  if (glVertexAttribI4i is null) assert(0, `OpenGL function 'glVertexAttribI4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4i'\n"); }
  glVertexAttribI4i(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribI1ui glVertexAttribI1ui = function void (GLuint a0, GLuint a1) nothrow {
  glVertexAttribI1ui = cast(glbfn_glVertexAttribI1ui)glGetProcAddress(`glVertexAttribI1ui`);
  if (glVertexAttribI1ui is null) assert(0, `OpenGL function 'glVertexAttribI1ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1ui'\n"); }
  glVertexAttribI1ui(a0,a1,);
};
__gshared glbfn_glVertexAttribI2ui glVertexAttribI2ui = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glVertexAttribI2ui = cast(glbfn_glVertexAttribI2ui)glGetProcAddress(`glVertexAttribI2ui`);
  if (glVertexAttribI2ui is null) assert(0, `OpenGL function 'glVertexAttribI2ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2ui'\n"); }
  glVertexAttribI2ui(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribI3ui glVertexAttribI3ui = function void (GLuint a0, GLuint a1, GLuint a2, GLuint a3) nothrow {
  glVertexAttribI3ui = cast(glbfn_glVertexAttribI3ui)glGetProcAddress(`glVertexAttribI3ui`);
  if (glVertexAttribI3ui is null) assert(0, `OpenGL function 'glVertexAttribI3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3ui'\n"); }
  glVertexAttribI3ui(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribI4ui glVertexAttribI4ui = function void (GLuint a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4) nothrow {
  glVertexAttribI4ui = cast(glbfn_glVertexAttribI4ui)glGetProcAddress(`glVertexAttribI4ui`);
  if (glVertexAttribI4ui is null) assert(0, `OpenGL function 'glVertexAttribI4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4ui'\n"); }
  glVertexAttribI4ui(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribI1iv glVertexAttribI1iv = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI1iv = cast(glbfn_glVertexAttribI1iv)glGetProcAddress(`glVertexAttribI1iv`);
  if (glVertexAttribI1iv is null) assert(0, `OpenGL function 'glVertexAttribI1iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1iv'\n"); }
  glVertexAttribI1iv(a0,a1,);
};
__gshared glbfn_glVertexAttribI2iv glVertexAttribI2iv = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI2iv = cast(glbfn_glVertexAttribI2iv)glGetProcAddress(`glVertexAttribI2iv`);
  if (glVertexAttribI2iv is null) assert(0, `OpenGL function 'glVertexAttribI2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2iv'\n"); }
  glVertexAttribI2iv(a0,a1,);
};
__gshared glbfn_glVertexAttribI3iv glVertexAttribI3iv = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI3iv = cast(glbfn_glVertexAttribI3iv)glGetProcAddress(`glVertexAttribI3iv`);
  if (glVertexAttribI3iv is null) assert(0, `OpenGL function 'glVertexAttribI3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3iv'\n"); }
  glVertexAttribI3iv(a0,a1,);
};
__gshared glbfn_glVertexAttribI4iv glVertexAttribI4iv = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI4iv = cast(glbfn_glVertexAttribI4iv)glGetProcAddress(`glVertexAttribI4iv`);
  if (glVertexAttribI4iv is null) assert(0, `OpenGL function 'glVertexAttribI4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4iv'\n"); }
  glVertexAttribI4iv(a0,a1,);
};
__gshared glbfn_glVertexAttribI1uiv glVertexAttribI1uiv = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI1uiv = cast(glbfn_glVertexAttribI1uiv)glGetProcAddress(`glVertexAttribI1uiv`);
  if (glVertexAttribI1uiv is null) assert(0, `OpenGL function 'glVertexAttribI1uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1uiv'\n"); }
  glVertexAttribI1uiv(a0,a1,);
};
__gshared glbfn_glVertexAttribI2uiv glVertexAttribI2uiv = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI2uiv = cast(glbfn_glVertexAttribI2uiv)glGetProcAddress(`glVertexAttribI2uiv`);
  if (glVertexAttribI2uiv is null) assert(0, `OpenGL function 'glVertexAttribI2uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2uiv'\n"); }
  glVertexAttribI2uiv(a0,a1,);
};
__gshared glbfn_glVertexAttribI3uiv glVertexAttribI3uiv = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI3uiv = cast(glbfn_glVertexAttribI3uiv)glGetProcAddress(`glVertexAttribI3uiv`);
  if (glVertexAttribI3uiv is null) assert(0, `OpenGL function 'glVertexAttribI3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3uiv'\n"); }
  glVertexAttribI3uiv(a0,a1,);
};
__gshared glbfn_glVertexAttribI4uiv glVertexAttribI4uiv = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI4uiv = cast(glbfn_glVertexAttribI4uiv)glGetProcAddress(`glVertexAttribI4uiv`);
  if (glVertexAttribI4uiv is null) assert(0, `OpenGL function 'glVertexAttribI4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4uiv'\n"); }
  glVertexAttribI4uiv(a0,a1,);
};
__gshared glbfn_glVertexAttribI4bv glVertexAttribI4bv = function void (GLuint a0, const(GLbyte)* a1) nothrow {
  glVertexAttribI4bv = cast(glbfn_glVertexAttribI4bv)glGetProcAddress(`glVertexAttribI4bv`);
  if (glVertexAttribI4bv is null) assert(0, `OpenGL function 'glVertexAttribI4bv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4bv'\n"); }
  glVertexAttribI4bv(a0,a1,);
};
__gshared glbfn_glVertexAttribI4sv glVertexAttribI4sv = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttribI4sv = cast(glbfn_glVertexAttribI4sv)glGetProcAddress(`glVertexAttribI4sv`);
  if (glVertexAttribI4sv is null) assert(0, `OpenGL function 'glVertexAttribI4sv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4sv'\n"); }
  glVertexAttribI4sv(a0,a1,);
};
__gshared glbfn_glVertexAttribI4ubv glVertexAttribI4ubv = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVertexAttribI4ubv = cast(glbfn_glVertexAttribI4ubv)glGetProcAddress(`glVertexAttribI4ubv`);
  if (glVertexAttribI4ubv is null) assert(0, `OpenGL function 'glVertexAttribI4ubv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4ubv'\n"); }
  glVertexAttribI4ubv(a0,a1,);
};
__gshared glbfn_glVertexAttribI4usv glVertexAttribI4usv = function void (GLuint a0, const(GLushort)* a1) nothrow {
  glVertexAttribI4usv = cast(glbfn_glVertexAttribI4usv)glGetProcAddress(`glVertexAttribI4usv`);
  if (glVertexAttribI4usv is null) assert(0, `OpenGL function 'glVertexAttribI4usv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4usv'\n"); }
  glVertexAttribI4usv(a0,a1,);
};
__gshared glbfn_glGetUniformuiv glGetUniformuiv = function void (GLuint a0, GLint a1, GLuint* a2) nothrow {
  glGetUniformuiv = cast(glbfn_glGetUniformuiv)glGetProcAddress(`glGetUniformuiv`);
  if (glGetUniformuiv is null) assert(0, `OpenGL function 'glGetUniformuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformuiv'\n"); }
  glGetUniformuiv(a0,a1,a2,);
};
__gshared glbfn_glBindFragDataLocation glBindFragDataLocation = function void (GLuint a0, GLuint a1, const(GLchar)* a2) nothrow {
  glBindFragDataLocation = cast(glbfn_glBindFragDataLocation)glGetProcAddress(`glBindFragDataLocation`);
  if (glBindFragDataLocation is null) assert(0, `OpenGL function 'glBindFragDataLocation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindFragDataLocation'\n"); }
  glBindFragDataLocation(a0,a1,a2,);
};
__gshared glbfn_glGetFragDataLocation glGetFragDataLocation = function GLint (GLuint a0, const(GLchar)* a1) nothrow {
  glGetFragDataLocation = cast(glbfn_glGetFragDataLocation)glGetProcAddress(`glGetFragDataLocation`);
  if (glGetFragDataLocation is null) assert(0, `OpenGL function 'glGetFragDataLocation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFragDataLocation'\n"); }
  return glGetFragDataLocation(a0,a1,);
};
__gshared glbfn_glUniform1ui glUniform1ui = function void (GLint a0, GLuint a1) nothrow {
  glUniform1ui = cast(glbfn_glUniform1ui)glGetProcAddress(`glUniform1ui`);
  if (glUniform1ui is null) assert(0, `OpenGL function 'glUniform1ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1ui'\n"); }
  glUniform1ui(a0,a1,);
};
__gshared glbfn_glUniform2ui glUniform2ui = function void (GLint a0, GLuint a1, GLuint a2) nothrow {
  glUniform2ui = cast(glbfn_glUniform2ui)glGetProcAddress(`glUniform2ui`);
  if (glUniform2ui is null) assert(0, `OpenGL function 'glUniform2ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2ui'\n"); }
  glUniform2ui(a0,a1,a2,);
};
__gshared glbfn_glUniform3ui glUniform3ui = function void (GLint a0, GLuint a1, GLuint a2, GLuint a3) nothrow {
  glUniform3ui = cast(glbfn_glUniform3ui)glGetProcAddress(`glUniform3ui`);
  if (glUniform3ui is null) assert(0, `OpenGL function 'glUniform3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3ui'\n"); }
  glUniform3ui(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4ui glUniform4ui = function void (GLint a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4) nothrow {
  glUniform4ui = cast(glbfn_glUniform4ui)glGetProcAddress(`glUniform4ui`);
  if (glUniform4ui is null) assert(0, `OpenGL function 'glUniform4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4ui'\n"); }
  glUniform4ui(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1uiv glUniform1uiv = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform1uiv = cast(glbfn_glUniform1uiv)glGetProcAddress(`glUniform1uiv`);
  if (glUniform1uiv is null) assert(0, `OpenGL function 'glUniform1uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1uiv'\n"); }
  glUniform1uiv(a0,a1,a2,);
};
__gshared glbfn_glUniform2uiv glUniform2uiv = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform2uiv = cast(glbfn_glUniform2uiv)glGetProcAddress(`glUniform2uiv`);
  if (glUniform2uiv is null) assert(0, `OpenGL function 'glUniform2uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2uiv'\n"); }
  glUniform2uiv(a0,a1,a2,);
};
__gshared glbfn_glUniform3uiv glUniform3uiv = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform3uiv = cast(glbfn_glUniform3uiv)glGetProcAddress(`glUniform3uiv`);
  if (glUniform3uiv is null) assert(0, `OpenGL function 'glUniform3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3uiv'\n"); }
  glUniform3uiv(a0,a1,a2,);
};
__gshared glbfn_glUniform4uiv glUniform4uiv = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform4uiv = cast(glbfn_glUniform4uiv)glGetProcAddress(`glUniform4uiv`);
  if (glUniform4uiv is null) assert(0, `OpenGL function 'glUniform4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4uiv'\n"); }
  glUniform4uiv(a0,a1,a2,);
};
__gshared glbfn_glTexParameterIiv glTexParameterIiv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glTexParameterIiv = cast(glbfn_glTexParameterIiv)glGetProcAddress(`glTexParameterIiv`);
  if (glTexParameterIiv is null) assert(0, `OpenGL function 'glTexParameterIiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterIiv'\n"); }
  glTexParameterIiv(a0,a1,a2,);
};
__gshared glbfn_glTexParameterIuiv glTexParameterIuiv = function void (GLenum a0, GLenum a1, const(GLuint)* a2) nothrow {
  glTexParameterIuiv = cast(glbfn_glTexParameterIuiv)glGetProcAddress(`glTexParameterIuiv`);
  if (glTexParameterIuiv is null) assert(0, `OpenGL function 'glTexParameterIuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterIuiv'\n"); }
  glTexParameterIuiv(a0,a1,a2,);
};
__gshared glbfn_glGetTexParameterIiv glGetTexParameterIiv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetTexParameterIiv = cast(glbfn_glGetTexParameterIiv)glGetProcAddress(`glGetTexParameterIiv`);
  if (glGetTexParameterIiv is null) assert(0, `OpenGL function 'glGetTexParameterIiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameterIiv'\n"); }
  glGetTexParameterIiv(a0,a1,a2,);
};
__gshared glbfn_glGetTexParameterIuiv glGetTexParameterIuiv = function void (GLenum a0, GLenum a1, GLuint* a2) nothrow {
  glGetTexParameterIuiv = cast(glbfn_glGetTexParameterIuiv)glGetProcAddress(`glGetTexParameterIuiv`);
  if (glGetTexParameterIuiv is null) assert(0, `OpenGL function 'glGetTexParameterIuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameterIuiv'\n"); }
  glGetTexParameterIuiv(a0,a1,a2,);
};
__gshared glbfn_glClearBufferiv glClearBufferiv = function void (GLenum a0, GLint a1, const(GLint)* a2) nothrow {
  glClearBufferiv = cast(glbfn_glClearBufferiv)glGetProcAddress(`glClearBufferiv`);
  if (glClearBufferiv is null) assert(0, `OpenGL function 'glClearBufferiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearBufferiv'\n"); }
  glClearBufferiv(a0,a1,a2,);
};
__gshared glbfn_glClearBufferuiv glClearBufferuiv = function void (GLenum a0, GLint a1, const(GLuint)* a2) nothrow {
  glClearBufferuiv = cast(glbfn_glClearBufferuiv)glGetProcAddress(`glClearBufferuiv`);
  if (glClearBufferuiv is null) assert(0, `OpenGL function 'glClearBufferuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearBufferuiv'\n"); }
  glClearBufferuiv(a0,a1,a2,);
};
__gshared glbfn_glClearBufferfv glClearBufferfv = function void (GLenum a0, GLint a1, const(GLfloat)* a2) nothrow {
  glClearBufferfv = cast(glbfn_glClearBufferfv)glGetProcAddress(`glClearBufferfv`);
  if (glClearBufferfv is null) assert(0, `OpenGL function 'glClearBufferfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearBufferfv'\n"); }
  glClearBufferfv(a0,a1,a2,);
};
__gshared glbfn_glClearBufferfi glClearBufferfi = function void (GLenum a0, GLint a1, GLfloat a2, GLint a3) nothrow {
  glClearBufferfi = cast(glbfn_glClearBufferfi)glGetProcAddress(`glClearBufferfi`);
  if (glClearBufferfi is null) assert(0, `OpenGL function 'glClearBufferfi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearBufferfi'\n"); }
  glClearBufferfi(a0,a1,a2,a3,);
};
__gshared glbfn_glGetStringi glGetStringi = function const(char)* (GLenum a0, GLuint a1) nothrow {
  glGetStringi = cast(glbfn_glGetStringi)glGetProcAddress(`glGetStringi`);
  if (glGetStringi is null) assert(0, `OpenGL function 'glGetStringi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetStringi'\n"); }
  return glGetStringi(a0,a1,);
};
__gshared glbfn_glIsRenderbuffer glIsRenderbuffer = function GLboolean (GLuint a0) nothrow {
  glIsRenderbuffer = cast(glbfn_glIsRenderbuffer)glGetProcAddress(`glIsRenderbuffer`);
  if (glIsRenderbuffer is null) assert(0, `OpenGL function 'glIsRenderbuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsRenderbuffer'\n"); }
  return glIsRenderbuffer(a0,);
};
__gshared glbfn_glBindRenderbuffer glBindRenderbuffer = function void (GLenum a0, GLuint a1) nothrow {
  glBindRenderbuffer = cast(glbfn_glBindRenderbuffer)glGetProcAddress(`glBindRenderbuffer`);
  if (glBindRenderbuffer is null) assert(0, `OpenGL function 'glBindRenderbuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindRenderbuffer'\n"); }
  glBindRenderbuffer(a0,a1,);
};
__gshared glbfn_glDeleteRenderbuffers glDeleteRenderbuffers = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteRenderbuffers = cast(glbfn_glDeleteRenderbuffers)glGetProcAddress(`glDeleteRenderbuffers`);
  if (glDeleteRenderbuffers is null) assert(0, `OpenGL function 'glDeleteRenderbuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteRenderbuffers'\n"); }
  glDeleteRenderbuffers(a0,a1,);
};
__gshared glbfn_glGenRenderbuffers glGenRenderbuffers = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenRenderbuffers = cast(glbfn_glGenRenderbuffers)glGetProcAddress(`glGenRenderbuffers`);
  if (glGenRenderbuffers is null) assert(0, `OpenGL function 'glGenRenderbuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenRenderbuffers'\n"); }
  glGenRenderbuffers(a0,a1,);
};
__gshared glbfn_glRenderbufferStorage glRenderbufferStorage = function void (GLenum a0, GLenum a1, GLsizei a2, GLsizei a3) nothrow {
  glRenderbufferStorage = cast(glbfn_glRenderbufferStorage)glGetProcAddress(`glRenderbufferStorage`);
  if (glRenderbufferStorage is null) assert(0, `OpenGL function 'glRenderbufferStorage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRenderbufferStorage'\n"); }
  glRenderbufferStorage(a0,a1,a2,a3,);
};
__gshared glbfn_glGetRenderbufferParameteriv glGetRenderbufferParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetRenderbufferParameteriv = cast(glbfn_glGetRenderbufferParameteriv)glGetProcAddress(`glGetRenderbufferParameteriv`);
  if (glGetRenderbufferParameteriv is null) assert(0, `OpenGL function 'glGetRenderbufferParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetRenderbufferParameteriv'\n"); }
  glGetRenderbufferParameteriv(a0,a1,a2,);
};
__gshared glbfn_glIsFramebuffer glIsFramebuffer = function GLboolean (GLuint a0) nothrow {
  glIsFramebuffer = cast(glbfn_glIsFramebuffer)glGetProcAddress(`glIsFramebuffer`);
  if (glIsFramebuffer is null) assert(0, `OpenGL function 'glIsFramebuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsFramebuffer'\n"); }
  return glIsFramebuffer(a0,);
};
__gshared glbfn_glBindFramebuffer glBindFramebuffer = function void (GLenum a0, GLuint a1) nothrow {
  glBindFramebuffer = cast(glbfn_glBindFramebuffer)glGetProcAddress(`glBindFramebuffer`);
  if (glBindFramebuffer is null) assert(0, `OpenGL function 'glBindFramebuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindFramebuffer'\n"); }
  glBindFramebuffer(a0,a1,);
};
__gshared glbfn_glDeleteFramebuffers glDeleteFramebuffers = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteFramebuffers = cast(glbfn_glDeleteFramebuffers)glGetProcAddress(`glDeleteFramebuffers`);
  if (glDeleteFramebuffers is null) assert(0, `OpenGL function 'glDeleteFramebuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteFramebuffers'\n"); }
  glDeleteFramebuffers(a0,a1,);
};
__gshared glbfn_glGenFramebuffers glGenFramebuffers = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenFramebuffers = cast(glbfn_glGenFramebuffers)glGetProcAddress(`glGenFramebuffers`);
  if (glGenFramebuffers is null) assert(0, `OpenGL function 'glGenFramebuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenFramebuffers'\n"); }
  glGenFramebuffers(a0,a1,);
};
__gshared glbfn_glCheckFramebufferStatus glCheckFramebufferStatus = function GLenum (GLenum a0) nothrow {
  glCheckFramebufferStatus = cast(glbfn_glCheckFramebufferStatus)glGetProcAddress(`glCheckFramebufferStatus`);
  if (glCheckFramebufferStatus is null) assert(0, `OpenGL function 'glCheckFramebufferStatus' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCheckFramebufferStatus'\n"); }
  return glCheckFramebufferStatus(a0,);
};
__gshared glbfn_glFramebufferTexture1D glFramebufferTexture1D = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3, GLint a4) nothrow {
  glFramebufferTexture1D = cast(glbfn_glFramebufferTexture1D)glGetProcAddress(`glFramebufferTexture1D`);
  if (glFramebufferTexture1D is null) assert(0, `OpenGL function 'glFramebufferTexture1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTexture1D'\n"); }
  glFramebufferTexture1D(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glFramebufferTexture2D glFramebufferTexture2D = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3, GLint a4) nothrow {
  glFramebufferTexture2D = cast(glbfn_glFramebufferTexture2D)glGetProcAddress(`glFramebufferTexture2D`);
  if (glFramebufferTexture2D is null) assert(0, `OpenGL function 'glFramebufferTexture2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTexture2D'\n"); }
  glFramebufferTexture2D(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glFramebufferTexture3D glFramebufferTexture3D = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3, GLint a4, GLint a5) nothrow {
  glFramebufferTexture3D = cast(glbfn_glFramebufferTexture3D)glGetProcAddress(`glFramebufferTexture3D`);
  if (glFramebufferTexture3D is null) assert(0, `OpenGL function 'glFramebufferTexture3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTexture3D'\n"); }
  glFramebufferTexture3D(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glFramebufferRenderbuffer glFramebufferRenderbuffer = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3) nothrow {
  glFramebufferRenderbuffer = cast(glbfn_glFramebufferRenderbuffer)glGetProcAddress(`glFramebufferRenderbuffer`);
  if (glFramebufferRenderbuffer is null) assert(0, `OpenGL function 'glFramebufferRenderbuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferRenderbuffer'\n"); }
  glFramebufferRenderbuffer(a0,a1,a2,a3,);
};
__gshared glbfn_glGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv = function void (GLenum a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetFramebufferAttachmentParameteriv = cast(glbfn_glGetFramebufferAttachmentParameteriv)glGetProcAddress(`glGetFramebufferAttachmentParameteriv`);
  if (glGetFramebufferAttachmentParameteriv is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFramebufferAttachmentParameteriv'\n"); }
  glGetFramebufferAttachmentParameteriv(a0,a1,a2,a3,);
};
__gshared glbfn_glGenerateMipmap glGenerateMipmap = function void (GLenum a0) nothrow {
  glGenerateMipmap = cast(glbfn_glGenerateMipmap)glGetProcAddress(`glGenerateMipmap`);
  if (glGenerateMipmap is null) assert(0, `OpenGL function 'glGenerateMipmap' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenerateMipmap'\n"); }
  glGenerateMipmap(a0,);
};
__gshared glbfn_glBlitFramebuffer glBlitFramebuffer = function void (GLint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLint a7, GLbitfield a8, GLenum a9) nothrow {
  glBlitFramebuffer = cast(glbfn_glBlitFramebuffer)glGetProcAddress(`glBlitFramebuffer`);
  if (glBlitFramebuffer is null) assert(0, `OpenGL function 'glBlitFramebuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlitFramebuffer'\n"); }
  glBlitFramebuffer(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glRenderbufferStorageMultisample glRenderbufferStorageMultisample = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4) nothrow {
  glRenderbufferStorageMultisample = cast(glbfn_glRenderbufferStorageMultisample)glGetProcAddress(`glRenderbufferStorageMultisample`);
  if (glRenderbufferStorageMultisample is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRenderbufferStorageMultisample'\n"); }
  glRenderbufferStorageMultisample(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glFramebufferTextureLayer glFramebufferTextureLayer = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3, GLint a4) nothrow {
  glFramebufferTextureLayer = cast(glbfn_glFramebufferTextureLayer)glGetProcAddress(`glFramebufferTextureLayer`);
  if (glFramebufferTextureLayer is null) assert(0, `OpenGL function 'glFramebufferTextureLayer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureLayer'\n"); }
  glFramebufferTextureLayer(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMapBufferRange glMapBufferRange = function void* (GLenum a0, GLintptr a1, GLsizeiptr a2, GLbitfield a3) nothrow {
  glMapBufferRange = cast(glbfn_glMapBufferRange)glGetProcAddress(`glMapBufferRange`);
  if (glMapBufferRange is null) assert(0, `OpenGL function 'glMapBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapBufferRange'\n"); }
  return glMapBufferRange(a0,a1,a2,a3,);
};
__gshared glbfn_glFlushMappedBufferRange glFlushMappedBufferRange = function void (GLenum a0, GLintptr a1, GLsizeiptr a2) nothrow {
  glFlushMappedBufferRange = cast(glbfn_glFlushMappedBufferRange)glGetProcAddress(`glFlushMappedBufferRange`);
  if (glFlushMappedBufferRange is null) assert(0, `OpenGL function 'glFlushMappedBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushMappedBufferRange'\n"); }
  glFlushMappedBufferRange(a0,a1,a2,);
};
__gshared glbfn_glBindVertexArray glBindVertexArray = function void (GLuint a0) nothrow {
  glBindVertexArray = cast(glbfn_glBindVertexArray)glGetProcAddress(`glBindVertexArray`);
  if (glBindVertexArray is null) assert(0, `OpenGL function 'glBindVertexArray' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindVertexArray'\n"); }
  glBindVertexArray(a0,);
};
__gshared glbfn_glDeleteVertexArrays glDeleteVertexArrays = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteVertexArrays = cast(glbfn_glDeleteVertexArrays)glGetProcAddress(`glDeleteVertexArrays`);
  if (glDeleteVertexArrays is null) assert(0, `OpenGL function 'glDeleteVertexArrays' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteVertexArrays'\n"); }
  glDeleteVertexArrays(a0,a1,);
};
__gshared glbfn_glGenVertexArrays glGenVertexArrays = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenVertexArrays = cast(glbfn_glGenVertexArrays)glGetProcAddress(`glGenVertexArrays`);
  if (glGenVertexArrays is null) assert(0, `OpenGL function 'glGenVertexArrays' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenVertexArrays'\n"); }
  glGenVertexArrays(a0,a1,);
};
__gshared glbfn_glIsVertexArray glIsVertexArray = function GLboolean (GLuint a0) nothrow {
  glIsVertexArray = cast(glbfn_glIsVertexArray)glGetProcAddress(`glIsVertexArray`);
  if (glIsVertexArray is null) assert(0, `OpenGL function 'glIsVertexArray' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsVertexArray'\n"); }
  return glIsVertexArray(a0,);
};
__gshared glbfn_glDrawArraysInstanced glDrawArraysInstanced = function void (GLenum a0, GLint a1, GLsizei a2, GLsizei a3) nothrow {
  glDrawArraysInstanced = cast(glbfn_glDrawArraysInstanced)glGetProcAddress(`glDrawArraysInstanced`);
  if (glDrawArraysInstanced is null) assert(0, `OpenGL function 'glDrawArraysInstanced' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawArraysInstanced'\n"); }
  glDrawArraysInstanced(a0,a1,a2,a3,);
};
__gshared glbfn_glDrawElementsInstanced glDrawElementsInstanced = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLsizei a4) nothrow {
  glDrawElementsInstanced = cast(glbfn_glDrawElementsInstanced)glGetProcAddress(`glDrawElementsInstanced`);
  if (glDrawElementsInstanced is null) assert(0, `OpenGL function 'glDrawElementsInstanced' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsInstanced'\n"); }
  glDrawElementsInstanced(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTexBuffer glTexBuffer = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glTexBuffer = cast(glbfn_glTexBuffer)glGetProcAddress(`glTexBuffer`);
  if (glTexBuffer is null) assert(0, `OpenGL function 'glTexBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexBuffer'\n"); }
  glTexBuffer(a0,a1,a2,);
};
__gshared glbfn_glPrimitiveRestartIndex glPrimitiveRestartIndex = function void (GLuint a0) nothrow {
  glPrimitiveRestartIndex = cast(glbfn_glPrimitiveRestartIndex)glGetProcAddress(`glPrimitiveRestartIndex`);
  if (glPrimitiveRestartIndex is null) assert(0, `OpenGL function 'glPrimitiveRestartIndex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPrimitiveRestartIndex'\n"); }
  glPrimitiveRestartIndex(a0,);
};
__gshared glbfn_glCopyBufferSubData glCopyBufferSubData = function void (GLenum a0, GLenum a1, GLintptr a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glCopyBufferSubData = cast(glbfn_glCopyBufferSubData)glGetProcAddress(`glCopyBufferSubData`);
  if (glCopyBufferSubData is null) assert(0, `OpenGL function 'glCopyBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyBufferSubData'\n"); }
  glCopyBufferSubData(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetUniformIndices glGetUniformIndices = function void (GLuint a0, GLsizei a1, const(GLchar*)* a2, GLuint* a3) nothrow {
  glGetUniformIndices = cast(glbfn_glGetUniformIndices)glGetProcAddress(`glGetUniformIndices`);
  if (glGetUniformIndices is null) assert(0, `OpenGL function 'glGetUniformIndices' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformIndices'\n"); }
  glGetUniformIndices(a0,a1,a2,a3,);
};
__gshared glbfn_glGetActiveUniformsiv glGetActiveUniformsiv = function void (GLuint a0, GLsizei a1, const(GLuint)* a2, GLenum a3, GLint* a4) nothrow {
  glGetActiveUniformsiv = cast(glbfn_glGetActiveUniformsiv)glGetProcAddress(`glGetActiveUniformsiv`);
  if (glGetActiveUniformsiv is null) assert(0, `OpenGL function 'glGetActiveUniformsiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveUniformsiv'\n"); }
  glGetActiveUniformsiv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetActiveUniformName glGetActiveUniformName = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLchar* a4) nothrow {
  glGetActiveUniformName = cast(glbfn_glGetActiveUniformName)glGetProcAddress(`glGetActiveUniformName`);
  if (glGetActiveUniformName is null) assert(0, `OpenGL function 'glGetActiveUniformName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveUniformName'\n"); }
  glGetActiveUniformName(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetUniformBlockIndex glGetUniformBlockIndex = function GLuint (GLuint a0, const(GLchar)* a1) nothrow {
  glGetUniformBlockIndex = cast(glbfn_glGetUniformBlockIndex)glGetProcAddress(`glGetUniformBlockIndex`);
  if (glGetUniformBlockIndex is null) assert(0, `OpenGL function 'glGetUniformBlockIndex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformBlockIndex'\n"); }
  return glGetUniformBlockIndex(a0,a1,);
};
__gshared glbfn_glGetActiveUniformBlockiv glGetActiveUniformBlockiv = function void (GLuint a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetActiveUniformBlockiv = cast(glbfn_glGetActiveUniformBlockiv)glGetProcAddress(`glGetActiveUniformBlockiv`);
  if (glGetActiveUniformBlockiv is null) assert(0, `OpenGL function 'glGetActiveUniformBlockiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveUniformBlockiv'\n"); }
  glGetActiveUniformBlockiv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetActiveUniformBlockName glGetActiveUniformBlockName = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLchar* a4) nothrow {
  glGetActiveUniformBlockName = cast(glbfn_glGetActiveUniformBlockName)glGetProcAddress(`glGetActiveUniformBlockName`);
  if (glGetActiveUniformBlockName is null) assert(0, `OpenGL function 'glGetActiveUniformBlockName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveUniformBlockName'\n"); }
  glGetActiveUniformBlockName(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniformBlockBinding glUniformBlockBinding = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glUniformBlockBinding = cast(glbfn_glUniformBlockBinding)glGetProcAddress(`glUniformBlockBinding`);
  if (glUniformBlockBinding is null) assert(0, `OpenGL function 'glUniformBlockBinding' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformBlockBinding'\n"); }
  glUniformBlockBinding(a0,a1,a2,);
};
__gshared glbfn_glDrawElementsBaseVertex glDrawElementsBaseVertex = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLint a4) nothrow {
  glDrawElementsBaseVertex = cast(glbfn_glDrawElementsBaseVertex)glGetProcAddress(`glDrawElementsBaseVertex`);
  if (glDrawElementsBaseVertex is null) assert(0, `OpenGL function 'glDrawElementsBaseVertex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsBaseVertex'\n"); }
  glDrawElementsBaseVertex(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3, GLenum a4, const(void)* a5, GLint a6) nothrow {
  glDrawRangeElementsBaseVertex = cast(glbfn_glDrawRangeElementsBaseVertex)glGetProcAddress(`glDrawRangeElementsBaseVertex`);
  if (glDrawRangeElementsBaseVertex is null) assert(0, `OpenGL function 'glDrawRangeElementsBaseVertex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawRangeElementsBaseVertex'\n"); }
  glDrawRangeElementsBaseVertex(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLsizei a4, GLint a5) nothrow {
  glDrawElementsInstancedBaseVertex = cast(glbfn_glDrawElementsInstancedBaseVertex)glGetProcAddress(`glDrawElementsInstancedBaseVertex`);
  if (glDrawElementsInstancedBaseVertex is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsInstancedBaseVertex'\n"); }
  glDrawElementsInstancedBaseVertex(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex = function void (GLenum a0, const(GLsizei)* a1, GLenum a2, const(void*)* a3, GLsizei a4, const(GLint)* a5) nothrow {
  glMultiDrawElementsBaseVertex = cast(glbfn_glMultiDrawElementsBaseVertex)glGetProcAddress(`glMultiDrawElementsBaseVertex`);
  if (glMultiDrawElementsBaseVertex is null) assert(0, `OpenGL function 'glMultiDrawElementsBaseVertex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementsBaseVertex'\n"); }
  glMultiDrawElementsBaseVertex(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProvokingVertex glProvokingVertex = function void (GLenum a0) nothrow {
  glProvokingVertex = cast(glbfn_glProvokingVertex)glGetProcAddress(`glProvokingVertex`);
  if (glProvokingVertex is null) assert(0, `OpenGL function 'glProvokingVertex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProvokingVertex'\n"); }
  glProvokingVertex(a0,);
};
__gshared glbfn_glGetInteger64v glGetInteger64v = function void (GLenum a0, GLint64* a1) nothrow {
  glGetInteger64v = cast(glbfn_glGetInteger64v)glGetProcAddress(`glGetInteger64v`);
  if (glGetInteger64v is null) assert(0, `OpenGL function 'glGetInteger64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInteger64v'\n"); }
  glGetInteger64v(a0,a1,);
};
__gshared glbfn_glGetInteger64i_v glGetInteger64i_v = function void (GLenum a0, GLuint a1, GLint64* a2) nothrow {
  glGetInteger64i_v = cast(glbfn_glGetInteger64i_v)glGetProcAddress(`glGetInteger64i_v`);
  if (glGetInteger64i_v is null) assert(0, `OpenGL function 'glGetInteger64i_v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInteger64i_v'\n"); }
  glGetInteger64i_v(a0,a1,a2,);
};
__gshared glbfn_glGetBufferParameteri64v glGetBufferParameteri64v = function void (GLenum a0, GLenum a1, GLint64* a2) nothrow {
  glGetBufferParameteri64v = cast(glbfn_glGetBufferParameteri64v)glGetProcAddress(`glGetBufferParameteri64v`);
  if (glGetBufferParameteri64v is null) assert(0, `OpenGL function 'glGetBufferParameteri64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferParameteri64v'\n"); }
  glGetBufferParameteri64v(a0,a1,a2,);
};
__gshared glbfn_glFramebufferTexture glFramebufferTexture = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3) nothrow {
  glFramebufferTexture = cast(glbfn_glFramebufferTexture)glGetProcAddress(`glFramebufferTexture`);
  if (glFramebufferTexture is null) assert(0, `OpenGL function 'glFramebufferTexture' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTexture'\n"); }
  glFramebufferTexture(a0,a1,a2,a3,);
};
__gshared glbfn_glTexImage2DMultisample glTexImage2DMultisample = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLboolean a5) nothrow {
  glTexImage2DMultisample = cast(glbfn_glTexImage2DMultisample)glGetProcAddress(`glTexImage2DMultisample`);
  if (glTexImage2DMultisample is null) assert(0, `OpenGL function 'glTexImage2DMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage2DMultisample'\n"); }
  glTexImage2DMultisample(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTexImage3DMultisample glTexImage3DMultisample = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLboolean a6) nothrow {
  glTexImage3DMultisample = cast(glbfn_glTexImage3DMultisample)glGetProcAddress(`glTexImage3DMultisample`);
  if (glTexImage3DMultisample is null) assert(0, `OpenGL function 'glTexImage3DMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage3DMultisample'\n"); }
  glTexImage3DMultisample(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetMultisamplefv glGetMultisamplefv = function void (GLenum a0, GLuint a1, GLfloat* a2) nothrow {
  glGetMultisamplefv = cast(glbfn_glGetMultisamplefv)glGetProcAddress(`glGetMultisamplefv`);
  if (glGetMultisamplefv is null) assert(0, `OpenGL function 'glGetMultisamplefv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultisamplefv'\n"); }
  glGetMultisamplefv(a0,a1,a2,);
};
__gshared glbfn_glSampleMaski glSampleMaski = function void (GLuint a0, GLbitfield a1) nothrow {
  glSampleMaski = cast(glbfn_glSampleMaski)glGetProcAddress(`glSampleMaski`);
  if (glSampleMaski is null) assert(0, `OpenGL function 'glSampleMaski' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleMaski'\n"); }
  glSampleMaski(a0,a1,);
};
__gshared glbfn_glBindFragDataLocationIndexed glBindFragDataLocationIndexed = function void (GLuint a0, GLuint a1, GLuint a2, const(GLchar)* a3) nothrow {
  glBindFragDataLocationIndexed = cast(glbfn_glBindFragDataLocationIndexed)glGetProcAddress(`glBindFragDataLocationIndexed`);
  if (glBindFragDataLocationIndexed is null) assert(0, `OpenGL function 'glBindFragDataLocationIndexed' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindFragDataLocationIndexed'\n"); }
  glBindFragDataLocationIndexed(a0,a1,a2,a3,);
};
__gshared glbfn_glGetFragDataIndex glGetFragDataIndex = function GLint (GLuint a0, const(GLchar)* a1) nothrow {
  glGetFragDataIndex = cast(glbfn_glGetFragDataIndex)glGetProcAddress(`glGetFragDataIndex`);
  if (glGetFragDataIndex is null) assert(0, `OpenGL function 'glGetFragDataIndex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFragDataIndex'\n"); }
  return glGetFragDataIndex(a0,a1,);
};
__gshared glbfn_glGenSamplers glGenSamplers = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenSamplers = cast(glbfn_glGenSamplers)glGetProcAddress(`glGenSamplers`);
  if (glGenSamplers is null) assert(0, `OpenGL function 'glGenSamplers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenSamplers'\n"); }
  glGenSamplers(a0,a1,);
};
__gshared glbfn_glDeleteSamplers glDeleteSamplers = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteSamplers = cast(glbfn_glDeleteSamplers)glGetProcAddress(`glDeleteSamplers`);
  if (glDeleteSamplers is null) assert(0, `OpenGL function 'glDeleteSamplers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteSamplers'\n"); }
  glDeleteSamplers(a0,a1,);
};
__gshared glbfn_glIsSampler glIsSampler = function GLboolean (GLuint a0) nothrow {
  glIsSampler = cast(glbfn_glIsSampler)glGetProcAddress(`glIsSampler`);
  if (glIsSampler is null) assert(0, `OpenGL function 'glIsSampler' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsSampler'\n"); }
  return glIsSampler(a0,);
};
__gshared glbfn_glBindSampler glBindSampler = function void (GLuint a0, GLuint a1) nothrow {
  glBindSampler = cast(glbfn_glBindSampler)glGetProcAddress(`glBindSampler`);
  if (glBindSampler is null) assert(0, `OpenGL function 'glBindSampler' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindSampler'\n"); }
  glBindSampler(a0,a1,);
};
__gshared glbfn_glSamplerParameteri glSamplerParameteri = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glSamplerParameteri = cast(glbfn_glSamplerParameteri)glGetProcAddress(`glSamplerParameteri`);
  if (glSamplerParameteri is null) assert(0, `OpenGL function 'glSamplerParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplerParameteri'\n"); }
  glSamplerParameteri(a0,a1,a2,);
};
__gshared glbfn_glSamplerParameteriv glSamplerParameteriv = function void (GLuint a0, GLenum a1, const(GLint)* a2) nothrow {
  glSamplerParameteriv = cast(glbfn_glSamplerParameteriv)glGetProcAddress(`glSamplerParameteriv`);
  if (glSamplerParameteriv is null) assert(0, `OpenGL function 'glSamplerParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplerParameteriv'\n"); }
  glSamplerParameteriv(a0,a1,a2,);
};
__gshared glbfn_glSamplerParameterf glSamplerParameterf = function void (GLuint a0, GLenum a1, GLfloat a2) nothrow {
  glSamplerParameterf = cast(glbfn_glSamplerParameterf)glGetProcAddress(`glSamplerParameterf`);
  if (glSamplerParameterf is null) assert(0, `OpenGL function 'glSamplerParameterf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplerParameterf'\n"); }
  glSamplerParameterf(a0,a1,a2,);
};
__gshared glbfn_glSamplerParameterfv glSamplerParameterfv = function void (GLuint a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glSamplerParameterfv = cast(glbfn_glSamplerParameterfv)glGetProcAddress(`glSamplerParameterfv`);
  if (glSamplerParameterfv is null) assert(0, `OpenGL function 'glSamplerParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplerParameterfv'\n"); }
  glSamplerParameterfv(a0,a1,a2,);
};
__gshared glbfn_glSamplerParameterIiv glSamplerParameterIiv = function void (GLuint a0, GLenum a1, const(GLint)* a2) nothrow {
  glSamplerParameterIiv = cast(glbfn_glSamplerParameterIiv)glGetProcAddress(`glSamplerParameterIiv`);
  if (glSamplerParameterIiv is null) assert(0, `OpenGL function 'glSamplerParameterIiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplerParameterIiv'\n"); }
  glSamplerParameterIiv(a0,a1,a2,);
};
__gshared glbfn_glSamplerParameterIuiv glSamplerParameterIuiv = function void (GLuint a0, GLenum a1, const(GLuint)* a2) nothrow {
  glSamplerParameterIuiv = cast(glbfn_glSamplerParameterIuiv)glGetProcAddress(`glSamplerParameterIuiv`);
  if (glSamplerParameterIuiv is null) assert(0, `OpenGL function 'glSamplerParameterIuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplerParameterIuiv'\n"); }
  glSamplerParameterIuiv(a0,a1,a2,);
};
__gshared glbfn_glGetSamplerParameteriv glGetSamplerParameteriv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetSamplerParameteriv = cast(glbfn_glGetSamplerParameteriv)glGetProcAddress(`glGetSamplerParameteriv`);
  if (glGetSamplerParameteriv is null) assert(0, `OpenGL function 'glGetSamplerParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSamplerParameteriv'\n"); }
  glGetSamplerParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetSamplerParameterIiv glGetSamplerParameterIiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetSamplerParameterIiv = cast(glbfn_glGetSamplerParameterIiv)glGetProcAddress(`glGetSamplerParameterIiv`);
  if (glGetSamplerParameterIiv is null) assert(0, `OpenGL function 'glGetSamplerParameterIiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSamplerParameterIiv'\n"); }
  glGetSamplerParameterIiv(a0,a1,a2,);
};
__gshared glbfn_glGetSamplerParameterfv glGetSamplerParameterfv = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetSamplerParameterfv = cast(glbfn_glGetSamplerParameterfv)glGetProcAddress(`glGetSamplerParameterfv`);
  if (glGetSamplerParameterfv is null) assert(0, `OpenGL function 'glGetSamplerParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSamplerParameterfv'\n"); }
  glGetSamplerParameterfv(a0,a1,a2,);
};
__gshared glbfn_glGetSamplerParameterIuiv glGetSamplerParameterIuiv = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetSamplerParameterIuiv = cast(glbfn_glGetSamplerParameterIuiv)glGetProcAddress(`glGetSamplerParameterIuiv`);
  if (glGetSamplerParameterIuiv is null) assert(0, `OpenGL function 'glGetSamplerParameterIuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSamplerParameterIuiv'\n"); }
  glGetSamplerParameterIuiv(a0,a1,a2,);
};
__gshared glbfn_glQueryCounter glQueryCounter = function void (GLuint a0, GLenum a1) nothrow {
  glQueryCounter = cast(glbfn_glQueryCounter)glGetProcAddress(`glQueryCounter`);
  if (glQueryCounter is null) assert(0, `OpenGL function 'glQueryCounter' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glQueryCounter'\n"); }
  glQueryCounter(a0,a1,);
};
__gshared glbfn_glGetQueryObjecti64v glGetQueryObjecti64v = function void (GLuint a0, GLenum a1, GLint64* a2) nothrow {
  glGetQueryObjecti64v = cast(glbfn_glGetQueryObjecti64v)glGetProcAddress(`glGetQueryObjecti64v`);
  if (glGetQueryObjecti64v is null) assert(0, `OpenGL function 'glGetQueryObjecti64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjecti64v'\n"); }
  glGetQueryObjecti64v(a0,a1,a2,);
};
__gshared glbfn_glGetQueryObjectui64v glGetQueryObjectui64v = function void (GLuint a0, GLenum a1, GLuint64* a2) nothrow {
  glGetQueryObjectui64v = cast(glbfn_glGetQueryObjectui64v)glGetProcAddress(`glGetQueryObjectui64v`);
  if (glGetQueryObjectui64v is null) assert(0, `OpenGL function 'glGetQueryObjectui64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjectui64v'\n"); }
  glGetQueryObjectui64v(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribDivisor glVertexAttribDivisor = function void (GLuint a0, GLuint a1) nothrow {
  glVertexAttribDivisor = cast(glbfn_glVertexAttribDivisor)glGetProcAddress(`glVertexAttribDivisor`);
  if (glVertexAttribDivisor is null) assert(0, `OpenGL function 'glVertexAttribDivisor' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribDivisor'\n"); }
  glVertexAttribDivisor(a0,a1,);
};
__gshared glbfn_glVertexAttribP1ui glVertexAttribP1ui = function void (GLuint a0, GLenum a1, GLboolean a2, GLuint a3) nothrow {
  glVertexAttribP1ui = cast(glbfn_glVertexAttribP1ui)glGetProcAddress(`glVertexAttribP1ui`);
  if (glVertexAttribP1ui is null) assert(0, `OpenGL function 'glVertexAttribP1ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP1ui'\n"); }
  glVertexAttribP1ui(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribP1uiv glVertexAttribP1uiv = function void (GLuint a0, GLenum a1, GLboolean a2, const(GLuint)* a3) nothrow {
  glVertexAttribP1uiv = cast(glbfn_glVertexAttribP1uiv)glGetProcAddress(`glVertexAttribP1uiv`);
  if (glVertexAttribP1uiv is null) assert(0, `OpenGL function 'glVertexAttribP1uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP1uiv'\n"); }
  glVertexAttribP1uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribP2ui glVertexAttribP2ui = function void (GLuint a0, GLenum a1, GLboolean a2, GLuint a3) nothrow {
  glVertexAttribP2ui = cast(glbfn_glVertexAttribP2ui)glGetProcAddress(`glVertexAttribP2ui`);
  if (glVertexAttribP2ui is null) assert(0, `OpenGL function 'glVertexAttribP2ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP2ui'\n"); }
  glVertexAttribP2ui(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribP2uiv glVertexAttribP2uiv = function void (GLuint a0, GLenum a1, GLboolean a2, const(GLuint)* a3) nothrow {
  glVertexAttribP2uiv = cast(glbfn_glVertexAttribP2uiv)glGetProcAddress(`glVertexAttribP2uiv`);
  if (glVertexAttribP2uiv is null) assert(0, `OpenGL function 'glVertexAttribP2uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP2uiv'\n"); }
  glVertexAttribP2uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribP3ui glVertexAttribP3ui = function void (GLuint a0, GLenum a1, GLboolean a2, GLuint a3) nothrow {
  glVertexAttribP3ui = cast(glbfn_glVertexAttribP3ui)glGetProcAddress(`glVertexAttribP3ui`);
  if (glVertexAttribP3ui is null) assert(0, `OpenGL function 'glVertexAttribP3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP3ui'\n"); }
  glVertexAttribP3ui(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribP3uiv glVertexAttribP3uiv = function void (GLuint a0, GLenum a1, GLboolean a2, const(GLuint)* a3) nothrow {
  glVertexAttribP3uiv = cast(glbfn_glVertexAttribP3uiv)glGetProcAddress(`glVertexAttribP3uiv`);
  if (glVertexAttribP3uiv is null) assert(0, `OpenGL function 'glVertexAttribP3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP3uiv'\n"); }
  glVertexAttribP3uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribP4ui glVertexAttribP4ui = function void (GLuint a0, GLenum a1, GLboolean a2, GLuint a3) nothrow {
  glVertexAttribP4ui = cast(glbfn_glVertexAttribP4ui)glGetProcAddress(`glVertexAttribP4ui`);
  if (glVertexAttribP4ui is null) assert(0, `OpenGL function 'glVertexAttribP4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP4ui'\n"); }
  glVertexAttribP4ui(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribP4uiv glVertexAttribP4uiv = function void (GLuint a0, GLenum a1, GLboolean a2, const(GLuint)* a3) nothrow {
  glVertexAttribP4uiv = cast(glbfn_glVertexAttribP4uiv)glGetProcAddress(`glVertexAttribP4uiv`);
  if (glVertexAttribP4uiv is null) assert(0, `OpenGL function 'glVertexAttribP4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribP4uiv'\n"); }
  glVertexAttribP4uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexP2ui glVertexP2ui = function void (GLenum a0, GLuint a1) nothrow {
  glVertexP2ui = cast(glbfn_glVertexP2ui)glGetProcAddress(`glVertexP2ui`);
  if (glVertexP2ui is null) assert(0, `OpenGL function 'glVertexP2ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexP2ui'\n"); }
  glVertexP2ui(a0,a1,);
};
__gshared glbfn_glVertexP2uiv glVertexP2uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glVertexP2uiv = cast(glbfn_glVertexP2uiv)glGetProcAddress(`glVertexP2uiv`);
  if (glVertexP2uiv is null) assert(0, `OpenGL function 'glVertexP2uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexP2uiv'\n"); }
  glVertexP2uiv(a0,a1,);
};
__gshared glbfn_glVertexP3ui glVertexP3ui = function void (GLenum a0, GLuint a1) nothrow {
  glVertexP3ui = cast(glbfn_glVertexP3ui)glGetProcAddress(`glVertexP3ui`);
  if (glVertexP3ui is null) assert(0, `OpenGL function 'glVertexP3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexP3ui'\n"); }
  glVertexP3ui(a0,a1,);
};
__gshared glbfn_glVertexP3uiv glVertexP3uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glVertexP3uiv = cast(glbfn_glVertexP3uiv)glGetProcAddress(`glVertexP3uiv`);
  if (glVertexP3uiv is null) assert(0, `OpenGL function 'glVertexP3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexP3uiv'\n"); }
  glVertexP3uiv(a0,a1,);
};
__gshared glbfn_glVertexP4ui glVertexP4ui = function void (GLenum a0, GLuint a1) nothrow {
  glVertexP4ui = cast(glbfn_glVertexP4ui)glGetProcAddress(`glVertexP4ui`);
  if (glVertexP4ui is null) assert(0, `OpenGL function 'glVertexP4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexP4ui'\n"); }
  glVertexP4ui(a0,a1,);
};
__gshared glbfn_glVertexP4uiv glVertexP4uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glVertexP4uiv = cast(glbfn_glVertexP4uiv)glGetProcAddress(`glVertexP4uiv`);
  if (glVertexP4uiv is null) assert(0, `OpenGL function 'glVertexP4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexP4uiv'\n"); }
  glVertexP4uiv(a0,a1,);
};
__gshared glbfn_glTexCoordP1ui glTexCoordP1ui = function void (GLenum a0, GLuint a1) nothrow {
  glTexCoordP1ui = cast(glbfn_glTexCoordP1ui)glGetProcAddress(`glTexCoordP1ui`);
  if (glTexCoordP1ui is null) assert(0, `OpenGL function 'glTexCoordP1ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP1ui'\n"); }
  glTexCoordP1ui(a0,a1,);
};
__gshared glbfn_glTexCoordP1uiv glTexCoordP1uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glTexCoordP1uiv = cast(glbfn_glTexCoordP1uiv)glGetProcAddress(`glTexCoordP1uiv`);
  if (glTexCoordP1uiv is null) assert(0, `OpenGL function 'glTexCoordP1uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP1uiv'\n"); }
  glTexCoordP1uiv(a0,a1,);
};
__gshared glbfn_glTexCoordP2ui glTexCoordP2ui = function void (GLenum a0, GLuint a1) nothrow {
  glTexCoordP2ui = cast(glbfn_glTexCoordP2ui)glGetProcAddress(`glTexCoordP2ui`);
  if (glTexCoordP2ui is null) assert(0, `OpenGL function 'glTexCoordP2ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP2ui'\n"); }
  glTexCoordP2ui(a0,a1,);
};
__gshared glbfn_glTexCoordP2uiv glTexCoordP2uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glTexCoordP2uiv = cast(glbfn_glTexCoordP2uiv)glGetProcAddress(`glTexCoordP2uiv`);
  if (glTexCoordP2uiv is null) assert(0, `OpenGL function 'glTexCoordP2uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP2uiv'\n"); }
  glTexCoordP2uiv(a0,a1,);
};
__gshared glbfn_glTexCoordP3ui glTexCoordP3ui = function void (GLenum a0, GLuint a1) nothrow {
  glTexCoordP3ui = cast(glbfn_glTexCoordP3ui)glGetProcAddress(`glTexCoordP3ui`);
  if (glTexCoordP3ui is null) assert(0, `OpenGL function 'glTexCoordP3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP3ui'\n"); }
  glTexCoordP3ui(a0,a1,);
};
__gshared glbfn_glTexCoordP3uiv glTexCoordP3uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glTexCoordP3uiv = cast(glbfn_glTexCoordP3uiv)glGetProcAddress(`glTexCoordP3uiv`);
  if (glTexCoordP3uiv is null) assert(0, `OpenGL function 'glTexCoordP3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP3uiv'\n"); }
  glTexCoordP3uiv(a0,a1,);
};
__gshared glbfn_glTexCoordP4ui glTexCoordP4ui = function void (GLenum a0, GLuint a1) nothrow {
  glTexCoordP4ui = cast(glbfn_glTexCoordP4ui)glGetProcAddress(`glTexCoordP4ui`);
  if (glTexCoordP4ui is null) assert(0, `OpenGL function 'glTexCoordP4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP4ui'\n"); }
  glTexCoordP4ui(a0,a1,);
};
__gshared glbfn_glTexCoordP4uiv glTexCoordP4uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glTexCoordP4uiv = cast(glbfn_glTexCoordP4uiv)glGetProcAddress(`glTexCoordP4uiv`);
  if (glTexCoordP4uiv is null) assert(0, `OpenGL function 'glTexCoordP4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordP4uiv'\n"); }
  glTexCoordP4uiv(a0,a1,);
};
__gshared glbfn_glMultiTexCoordP1ui glMultiTexCoordP1ui = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glMultiTexCoordP1ui = cast(glbfn_glMultiTexCoordP1ui)glGetProcAddress(`glMultiTexCoordP1ui`);
  if (glMultiTexCoordP1ui is null) assert(0, `OpenGL function 'glMultiTexCoordP1ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP1ui'\n"); }
  glMultiTexCoordP1ui(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordP1uiv glMultiTexCoordP1uiv = function void (GLenum a0, GLenum a1, const(GLuint)* a2) nothrow {
  glMultiTexCoordP1uiv = cast(glbfn_glMultiTexCoordP1uiv)glGetProcAddress(`glMultiTexCoordP1uiv`);
  if (glMultiTexCoordP1uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP1uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP1uiv'\n"); }
  glMultiTexCoordP1uiv(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordP2ui glMultiTexCoordP2ui = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glMultiTexCoordP2ui = cast(glbfn_glMultiTexCoordP2ui)glGetProcAddress(`glMultiTexCoordP2ui`);
  if (glMultiTexCoordP2ui is null) assert(0, `OpenGL function 'glMultiTexCoordP2ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP2ui'\n"); }
  glMultiTexCoordP2ui(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordP2uiv glMultiTexCoordP2uiv = function void (GLenum a0, GLenum a1, const(GLuint)* a2) nothrow {
  glMultiTexCoordP2uiv = cast(glbfn_glMultiTexCoordP2uiv)glGetProcAddress(`glMultiTexCoordP2uiv`);
  if (glMultiTexCoordP2uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP2uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP2uiv'\n"); }
  glMultiTexCoordP2uiv(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordP3ui glMultiTexCoordP3ui = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glMultiTexCoordP3ui = cast(glbfn_glMultiTexCoordP3ui)glGetProcAddress(`glMultiTexCoordP3ui`);
  if (glMultiTexCoordP3ui is null) assert(0, `OpenGL function 'glMultiTexCoordP3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP3ui'\n"); }
  glMultiTexCoordP3ui(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordP3uiv glMultiTexCoordP3uiv = function void (GLenum a0, GLenum a1, const(GLuint)* a2) nothrow {
  glMultiTexCoordP3uiv = cast(glbfn_glMultiTexCoordP3uiv)glGetProcAddress(`glMultiTexCoordP3uiv`);
  if (glMultiTexCoordP3uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP3uiv'\n"); }
  glMultiTexCoordP3uiv(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordP4ui glMultiTexCoordP4ui = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glMultiTexCoordP4ui = cast(glbfn_glMultiTexCoordP4ui)glGetProcAddress(`glMultiTexCoordP4ui`);
  if (glMultiTexCoordP4ui is null) assert(0, `OpenGL function 'glMultiTexCoordP4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP4ui'\n"); }
  glMultiTexCoordP4ui(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordP4uiv glMultiTexCoordP4uiv = function void (GLenum a0, GLenum a1, const(GLuint)* a2) nothrow {
  glMultiTexCoordP4uiv = cast(glbfn_glMultiTexCoordP4uiv)glGetProcAddress(`glMultiTexCoordP4uiv`);
  if (glMultiTexCoordP4uiv is null) assert(0, `OpenGL function 'glMultiTexCoordP4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordP4uiv'\n"); }
  glMultiTexCoordP4uiv(a0,a1,a2,);
};
__gshared glbfn_glNormalP3ui glNormalP3ui = function void (GLenum a0, GLuint a1) nothrow {
  glNormalP3ui = cast(glbfn_glNormalP3ui)glGetProcAddress(`glNormalP3ui`);
  if (glNormalP3ui is null) assert(0, `OpenGL function 'glNormalP3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalP3ui'\n"); }
  glNormalP3ui(a0,a1,);
};
__gshared glbfn_glNormalP3uiv glNormalP3uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glNormalP3uiv = cast(glbfn_glNormalP3uiv)glGetProcAddress(`glNormalP3uiv`);
  if (glNormalP3uiv is null) assert(0, `OpenGL function 'glNormalP3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalP3uiv'\n"); }
  glNormalP3uiv(a0,a1,);
};
__gshared glbfn_glColorP3ui glColorP3ui = function void (GLenum a0, GLuint a1) nothrow {
  glColorP3ui = cast(glbfn_glColorP3ui)glGetProcAddress(`glColorP3ui`);
  if (glColorP3ui is null) assert(0, `OpenGL function 'glColorP3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorP3ui'\n"); }
  glColorP3ui(a0,a1,);
};
__gshared glbfn_glColorP3uiv glColorP3uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glColorP3uiv = cast(glbfn_glColorP3uiv)glGetProcAddress(`glColorP3uiv`);
  if (glColorP3uiv is null) assert(0, `OpenGL function 'glColorP3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorP3uiv'\n"); }
  glColorP3uiv(a0,a1,);
};
__gshared glbfn_glColorP4ui glColorP4ui = function void (GLenum a0, GLuint a1) nothrow {
  glColorP4ui = cast(glbfn_glColorP4ui)glGetProcAddress(`glColorP4ui`);
  if (glColorP4ui is null) assert(0, `OpenGL function 'glColorP4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorP4ui'\n"); }
  glColorP4ui(a0,a1,);
};
__gshared glbfn_glColorP4uiv glColorP4uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glColorP4uiv = cast(glbfn_glColorP4uiv)glGetProcAddress(`glColorP4uiv`);
  if (glColorP4uiv is null) assert(0, `OpenGL function 'glColorP4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorP4uiv'\n"); }
  glColorP4uiv(a0,a1,);
};
__gshared glbfn_glSecondaryColorP3ui glSecondaryColorP3ui = function void (GLenum a0, GLuint a1) nothrow {
  glSecondaryColorP3ui = cast(glbfn_glSecondaryColorP3ui)glGetProcAddress(`glSecondaryColorP3ui`);
  if (glSecondaryColorP3ui is null) assert(0, `OpenGL function 'glSecondaryColorP3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColorP3ui'\n"); }
  glSecondaryColorP3ui(a0,a1,);
};
__gshared glbfn_glSecondaryColorP3uiv glSecondaryColorP3uiv = function void (GLenum a0, const(GLuint)* a1) nothrow {
  glSecondaryColorP3uiv = cast(glbfn_glSecondaryColorP3uiv)glGetProcAddress(`glSecondaryColorP3uiv`);
  if (glSecondaryColorP3uiv is null) assert(0, `OpenGL function 'glSecondaryColorP3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColorP3uiv'\n"); }
  glSecondaryColorP3uiv(a0,a1,);
};
__gshared glbfn_glMinSampleShading glMinSampleShading = function void (GLfloat a0) nothrow {
  glMinSampleShading = cast(glbfn_glMinSampleShading)glGetProcAddress(`glMinSampleShading`);
  if (glMinSampleShading is null) assert(0, `OpenGL function 'glMinSampleShading' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMinSampleShading'\n"); }
  glMinSampleShading(a0,);
};
__gshared glbfn_glBlendEquationi glBlendEquationi = function void (GLuint a0, GLenum a1) nothrow {
  glBlendEquationi = cast(glbfn_glBlendEquationi)glGetProcAddress(`glBlendEquationi`);
  if (glBlendEquationi is null) assert(0, `OpenGL function 'glBlendEquationi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationi'\n"); }
  glBlendEquationi(a0,a1,);
};
__gshared glbfn_glBlendEquationSeparatei glBlendEquationSeparatei = function void (GLuint a0, GLenum a1, GLenum a2) nothrow {
  glBlendEquationSeparatei = cast(glbfn_glBlendEquationSeparatei)glGetProcAddress(`glBlendEquationSeparatei`);
  if (glBlendEquationSeparatei is null) assert(0, `OpenGL function 'glBlendEquationSeparatei' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationSeparatei'\n"); }
  glBlendEquationSeparatei(a0,a1,a2,);
};
__gshared glbfn_glBlendFunci glBlendFunci = function void (GLuint a0, GLenum a1, GLenum a2) nothrow {
  glBlendFunci = cast(glbfn_glBlendFunci)glGetProcAddress(`glBlendFunci`);
  if (glBlendFunci is null) assert(0, `OpenGL function 'glBlendFunci' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFunci'\n"); }
  glBlendFunci(a0,a1,a2,);
};
__gshared glbfn_glBlendFuncSeparatei glBlendFuncSeparatei = function void (GLuint a0, GLenum a1, GLenum a2, GLenum a3, GLenum a4) nothrow {
  glBlendFuncSeparatei = cast(glbfn_glBlendFuncSeparatei)glGetProcAddress(`glBlendFuncSeparatei`);
  if (glBlendFuncSeparatei is null) assert(0, `OpenGL function 'glBlendFuncSeparatei' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFuncSeparatei'\n"); }
  glBlendFuncSeparatei(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawArraysIndirect glDrawArraysIndirect = function void (GLenum a0, const(void)* a1) nothrow {
  glDrawArraysIndirect = cast(glbfn_glDrawArraysIndirect)glGetProcAddress(`glDrawArraysIndirect`);
  if (glDrawArraysIndirect is null) assert(0, `OpenGL function 'glDrawArraysIndirect' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawArraysIndirect'\n"); }
  glDrawArraysIndirect(a0,a1,);
};
__gshared glbfn_glDrawElementsIndirect glDrawElementsIndirect = function void (GLenum a0, GLenum a1, const(void)* a2) nothrow {
  glDrawElementsIndirect = cast(glbfn_glDrawElementsIndirect)glGetProcAddress(`glDrawElementsIndirect`);
  if (glDrawElementsIndirect is null) assert(0, `OpenGL function 'glDrawElementsIndirect' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsIndirect'\n"); }
  glDrawElementsIndirect(a0,a1,a2,);
};
__gshared glbfn_glUniform1d glUniform1d = function void (GLint a0, GLdouble a1) nothrow {
  glUniform1d = cast(glbfn_glUniform1d)glGetProcAddress(`glUniform1d`);
  if (glUniform1d is null) assert(0, `OpenGL function 'glUniform1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1d'\n"); }
  glUniform1d(a0,a1,);
};
__gshared glbfn_glUniform2d glUniform2d = function void (GLint a0, GLdouble a1, GLdouble a2) nothrow {
  glUniform2d = cast(glbfn_glUniform2d)glGetProcAddress(`glUniform2d`);
  if (glUniform2d is null) assert(0, `OpenGL function 'glUniform2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2d'\n"); }
  glUniform2d(a0,a1,a2,);
};
__gshared glbfn_glUniform3d glUniform3d = function void (GLint a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glUniform3d = cast(glbfn_glUniform3d)glGetProcAddress(`glUniform3d`);
  if (glUniform3d is null) assert(0, `OpenGL function 'glUniform3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3d'\n"); }
  glUniform3d(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4d glUniform4d = function void (GLint a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glUniform4d = cast(glbfn_glUniform4d)glGetProcAddress(`glUniform4d`);
  if (glUniform4d is null) assert(0, `OpenGL function 'glUniform4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4d'\n"); }
  glUniform4d(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1dv glUniform1dv = function void (GLint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glUniform1dv = cast(glbfn_glUniform1dv)glGetProcAddress(`glUniform1dv`);
  if (glUniform1dv is null) assert(0, `OpenGL function 'glUniform1dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1dv'\n"); }
  glUniform1dv(a0,a1,a2,);
};
__gshared glbfn_glUniform2dv glUniform2dv = function void (GLint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glUniform2dv = cast(glbfn_glUniform2dv)glGetProcAddress(`glUniform2dv`);
  if (glUniform2dv is null) assert(0, `OpenGL function 'glUniform2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2dv'\n"); }
  glUniform2dv(a0,a1,a2,);
};
__gshared glbfn_glUniform3dv glUniform3dv = function void (GLint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glUniform3dv = cast(glbfn_glUniform3dv)glGetProcAddress(`glUniform3dv`);
  if (glUniform3dv is null) assert(0, `OpenGL function 'glUniform3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3dv'\n"); }
  glUniform3dv(a0,a1,a2,);
};
__gshared glbfn_glUniform4dv glUniform4dv = function void (GLint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glUniform4dv = cast(glbfn_glUniform4dv)glGetProcAddress(`glUniform4dv`);
  if (glUniform4dv is null) assert(0, `OpenGL function 'glUniform4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4dv'\n"); }
  glUniform4dv(a0,a1,a2,);
};
__gshared glbfn_glUniformMatrix2dv glUniformMatrix2dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix2dv = cast(glbfn_glUniformMatrix2dv)glGetProcAddress(`glUniformMatrix2dv`);
  if (glUniformMatrix2dv is null) assert(0, `OpenGL function 'glUniformMatrix2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix2dv'\n"); }
  glUniformMatrix2dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix3dv glUniformMatrix3dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix3dv = cast(glbfn_glUniformMatrix3dv)glGetProcAddress(`glUniformMatrix3dv`);
  if (glUniformMatrix3dv is null) assert(0, `OpenGL function 'glUniformMatrix3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix3dv'\n"); }
  glUniformMatrix3dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix4dv glUniformMatrix4dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix4dv = cast(glbfn_glUniformMatrix4dv)glGetProcAddress(`glUniformMatrix4dv`);
  if (glUniformMatrix4dv is null) assert(0, `OpenGL function 'glUniformMatrix4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix4dv'\n"); }
  glUniformMatrix4dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix2x3dv glUniformMatrix2x3dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix2x3dv = cast(glbfn_glUniformMatrix2x3dv)glGetProcAddress(`glUniformMatrix2x3dv`);
  if (glUniformMatrix2x3dv is null) assert(0, `OpenGL function 'glUniformMatrix2x3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix2x3dv'\n"); }
  glUniformMatrix2x3dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix2x4dv glUniformMatrix2x4dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix2x4dv = cast(glbfn_glUniformMatrix2x4dv)glGetProcAddress(`glUniformMatrix2x4dv`);
  if (glUniformMatrix2x4dv is null) assert(0, `OpenGL function 'glUniformMatrix2x4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix2x4dv'\n"); }
  glUniformMatrix2x4dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix3x2dv glUniformMatrix3x2dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix3x2dv = cast(glbfn_glUniformMatrix3x2dv)glGetProcAddress(`glUniformMatrix3x2dv`);
  if (glUniformMatrix3x2dv is null) assert(0, `OpenGL function 'glUniformMatrix3x2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix3x2dv'\n"); }
  glUniformMatrix3x2dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix3x4dv glUniformMatrix3x4dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix3x4dv = cast(glbfn_glUniformMatrix3x4dv)glGetProcAddress(`glUniformMatrix3x4dv`);
  if (glUniformMatrix3x4dv is null) assert(0, `OpenGL function 'glUniformMatrix3x4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix3x4dv'\n"); }
  glUniformMatrix3x4dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix4x2dv glUniformMatrix4x2dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix4x2dv = cast(glbfn_glUniformMatrix4x2dv)glGetProcAddress(`glUniformMatrix4x2dv`);
  if (glUniformMatrix4x2dv is null) assert(0, `OpenGL function 'glUniformMatrix4x2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix4x2dv'\n"); }
  glUniformMatrix4x2dv(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix4x3dv glUniformMatrix4x3dv = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLdouble)* a3) nothrow {
  glUniformMatrix4x3dv = cast(glbfn_glUniformMatrix4x3dv)glGetProcAddress(`glUniformMatrix4x3dv`);
  if (glUniformMatrix4x3dv is null) assert(0, `OpenGL function 'glUniformMatrix4x3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix4x3dv'\n"); }
  glUniformMatrix4x3dv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetUniformdv glGetUniformdv = function void (GLuint a0, GLint a1, GLdouble* a2) nothrow {
  glGetUniformdv = cast(glbfn_glGetUniformdv)glGetProcAddress(`glGetUniformdv`);
  if (glGetUniformdv is null) assert(0, `OpenGL function 'glGetUniformdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformdv'\n"); }
  glGetUniformdv(a0,a1,a2,);
};
__gshared glbfn_glGetSubroutineUniformLocation glGetSubroutineUniformLocation = function GLint (GLuint a0, GLenum a1, const(GLchar)* a2) nothrow {
  glGetSubroutineUniformLocation = cast(glbfn_glGetSubroutineUniformLocation)glGetProcAddress(`glGetSubroutineUniformLocation`);
  if (glGetSubroutineUniformLocation is null) assert(0, `OpenGL function 'glGetSubroutineUniformLocation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSubroutineUniformLocation'\n"); }
  return glGetSubroutineUniformLocation(a0,a1,a2,);
};
__gshared glbfn_glGetSubroutineIndex glGetSubroutineIndex = function GLuint (GLuint a0, GLenum a1, const(GLchar)* a2) nothrow {
  glGetSubroutineIndex = cast(glbfn_glGetSubroutineIndex)glGetProcAddress(`glGetSubroutineIndex`);
  if (glGetSubroutineIndex is null) assert(0, `OpenGL function 'glGetSubroutineIndex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSubroutineIndex'\n"); }
  return glGetSubroutineIndex(a0,a1,a2,);
};
__gshared glbfn_glGetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv = function void (GLuint a0, GLenum a1, GLuint a2, GLenum a3, GLint* a4) nothrow {
  glGetActiveSubroutineUniformiv = cast(glbfn_glGetActiveSubroutineUniformiv)glGetProcAddress(`glGetActiveSubroutineUniformiv`);
  if (glGetActiveSubroutineUniformiv is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveSubroutineUniformiv'\n"); }
  glGetActiveSubroutineUniformiv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetActiveSubroutineUniformName glGetActiveSubroutineUniformName = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, GLsizei* a4, GLchar* a5) nothrow {
  glGetActiveSubroutineUniformName = cast(glbfn_glGetActiveSubroutineUniformName)glGetProcAddress(`glGetActiveSubroutineUniformName`);
  if (glGetActiveSubroutineUniformName is null) assert(0, `OpenGL function 'glGetActiveSubroutineUniformName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveSubroutineUniformName'\n"); }
  glGetActiveSubroutineUniformName(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetActiveSubroutineName glGetActiveSubroutineName = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, GLsizei* a4, GLchar* a5) nothrow {
  glGetActiveSubroutineName = cast(glbfn_glGetActiveSubroutineName)glGetProcAddress(`glGetActiveSubroutineName`);
  if (glGetActiveSubroutineName is null) assert(0, `OpenGL function 'glGetActiveSubroutineName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveSubroutineName'\n"); }
  glGetActiveSubroutineName(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glUniformSubroutinesuiv glUniformSubroutinesuiv = function void (GLenum a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniformSubroutinesuiv = cast(glbfn_glUniformSubroutinesuiv)glGetProcAddress(`glUniformSubroutinesuiv`);
  if (glUniformSubroutinesuiv is null) assert(0, `OpenGL function 'glUniformSubroutinesuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformSubroutinesuiv'\n"); }
  glUniformSubroutinesuiv(a0,a1,a2,);
};
__gshared glbfn_glGetUniformSubroutineuiv glGetUniformSubroutineuiv = function void (GLenum a0, GLint a1, GLuint* a2) nothrow {
  glGetUniformSubroutineuiv = cast(glbfn_glGetUniformSubroutineuiv)glGetProcAddress(`glGetUniformSubroutineuiv`);
  if (glGetUniformSubroutineuiv is null) assert(0, `OpenGL function 'glGetUniformSubroutineuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformSubroutineuiv'\n"); }
  glGetUniformSubroutineuiv(a0,a1,a2,);
};
__gshared glbfn_glGetProgramStageiv glGetProgramStageiv = function void (GLuint a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetProgramStageiv = cast(glbfn_glGetProgramStageiv)glGetProcAddress(`glGetProgramStageiv`);
  if (glGetProgramStageiv is null) assert(0, `OpenGL function 'glGetProgramStageiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramStageiv'\n"); }
  glGetProgramStageiv(a0,a1,a2,a3,);
};
__gshared glbfn_glPatchParameteri glPatchParameteri = function void (GLenum a0, GLint a1) nothrow {
  glPatchParameteri = cast(glbfn_glPatchParameteri)glGetProcAddress(`glPatchParameteri`);
  if (glPatchParameteri is null) assert(0, `OpenGL function 'glPatchParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPatchParameteri'\n"); }
  glPatchParameteri(a0,a1,);
};
__gshared glbfn_glPatchParameterfv glPatchParameterfv = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glPatchParameterfv = cast(glbfn_glPatchParameterfv)glGetProcAddress(`glPatchParameterfv`);
  if (glPatchParameterfv is null) assert(0, `OpenGL function 'glPatchParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPatchParameterfv'\n"); }
  glPatchParameterfv(a0,a1,);
};
__gshared glbfn_glBindTransformFeedback glBindTransformFeedback = function void (GLenum a0, GLuint a1) nothrow {
  glBindTransformFeedback = cast(glbfn_glBindTransformFeedback)glGetProcAddress(`glBindTransformFeedback`);
  if (glBindTransformFeedback is null) assert(0, `OpenGL function 'glBindTransformFeedback' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTransformFeedback'\n"); }
  glBindTransformFeedback(a0,a1,);
};
__gshared glbfn_glDeleteTransformFeedbacks glDeleteTransformFeedbacks = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteTransformFeedbacks = cast(glbfn_glDeleteTransformFeedbacks)glGetProcAddress(`glDeleteTransformFeedbacks`);
  if (glDeleteTransformFeedbacks is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacks' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteTransformFeedbacks'\n"); }
  glDeleteTransformFeedbacks(a0,a1,);
};
__gshared glbfn_glGenTransformFeedbacks glGenTransformFeedbacks = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenTransformFeedbacks = cast(glbfn_glGenTransformFeedbacks)glGetProcAddress(`glGenTransformFeedbacks`);
  if (glGenTransformFeedbacks is null) assert(0, `OpenGL function 'glGenTransformFeedbacks' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenTransformFeedbacks'\n"); }
  glGenTransformFeedbacks(a0,a1,);
};
__gshared glbfn_glIsTransformFeedback glIsTransformFeedback = function GLboolean (GLuint a0) nothrow {
  glIsTransformFeedback = cast(glbfn_glIsTransformFeedback)glGetProcAddress(`glIsTransformFeedback`);
  if (glIsTransformFeedback is null) assert(0, `OpenGL function 'glIsTransformFeedback' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsTransformFeedback'\n"); }
  return glIsTransformFeedback(a0,);
};
__gshared glbfn_glPauseTransformFeedback glPauseTransformFeedback = function void () nothrow {
  glPauseTransformFeedback = cast(glbfn_glPauseTransformFeedback)glGetProcAddress(`glPauseTransformFeedback`);
  if (glPauseTransformFeedback is null) assert(0, `OpenGL function 'glPauseTransformFeedback' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPauseTransformFeedback'\n"); }
  glPauseTransformFeedback();
};
__gshared glbfn_glResumeTransformFeedback glResumeTransformFeedback = function void () nothrow {
  glResumeTransformFeedback = cast(glbfn_glResumeTransformFeedback)glGetProcAddress(`glResumeTransformFeedback`);
  if (glResumeTransformFeedback is null) assert(0, `OpenGL function 'glResumeTransformFeedback' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResumeTransformFeedback'\n"); }
  glResumeTransformFeedback();
};
__gshared glbfn_glDrawTransformFeedback glDrawTransformFeedback = function void (GLenum a0, GLuint a1) nothrow {
  glDrawTransformFeedback = cast(glbfn_glDrawTransformFeedback)glGetProcAddress(`glDrawTransformFeedback`);
  if (glDrawTransformFeedback is null) assert(0, `OpenGL function 'glDrawTransformFeedback' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawTransformFeedback'\n"); }
  glDrawTransformFeedback(a0,a1,);
};
__gshared glbfn_glDrawTransformFeedbackStream glDrawTransformFeedbackStream = function void (GLenum a0, GLuint a1, GLuint a2) nothrow {
  glDrawTransformFeedbackStream = cast(glbfn_glDrawTransformFeedbackStream)glGetProcAddress(`glDrawTransformFeedbackStream`);
  if (glDrawTransformFeedbackStream is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStream' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawTransformFeedbackStream'\n"); }
  glDrawTransformFeedbackStream(a0,a1,a2,);
};
__gshared glbfn_glBeginQueryIndexed glBeginQueryIndexed = function void (GLenum a0, GLuint a1, GLuint a2) nothrow {
  glBeginQueryIndexed = cast(glbfn_glBeginQueryIndexed)glGetProcAddress(`glBeginQueryIndexed`);
  if (glBeginQueryIndexed is null) assert(0, `OpenGL function 'glBeginQueryIndexed' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginQueryIndexed'\n"); }
  glBeginQueryIndexed(a0,a1,a2,);
};
__gshared glbfn_glEndQueryIndexed glEndQueryIndexed = function void (GLenum a0, GLuint a1) nothrow {
  glEndQueryIndexed = cast(glbfn_glEndQueryIndexed)glGetProcAddress(`glEndQueryIndexed`);
  if (glEndQueryIndexed is null) assert(0, `OpenGL function 'glEndQueryIndexed' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndQueryIndexed'\n"); }
  glEndQueryIndexed(a0,a1,);
};
__gshared glbfn_glGetQueryIndexediv glGetQueryIndexediv = function void (GLenum a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetQueryIndexediv = cast(glbfn_glGetQueryIndexediv)glGetProcAddress(`glGetQueryIndexediv`);
  if (glGetQueryIndexediv is null) assert(0, `OpenGL function 'glGetQueryIndexediv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryIndexediv'\n"); }
  glGetQueryIndexediv(a0,a1,a2,a3,);
};
__gshared glbfn_glReleaseShaderCompiler glReleaseShaderCompiler = function void () nothrow {
  glReleaseShaderCompiler = cast(glbfn_glReleaseShaderCompiler)glGetProcAddress(`glReleaseShaderCompiler`);
  if (glReleaseShaderCompiler is null) assert(0, `OpenGL function 'glReleaseShaderCompiler' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReleaseShaderCompiler'\n"); }
  glReleaseShaderCompiler();
};
__gshared glbfn_glShaderBinary glShaderBinary = function void (GLsizei a0, const(GLuint)* a1, GLenum a2, const(void)* a3, GLsizei a4) nothrow {
  glShaderBinary = cast(glbfn_glShaderBinary)glGetProcAddress(`glShaderBinary`);
  if (glShaderBinary is null) assert(0, `OpenGL function 'glShaderBinary' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShaderBinary'\n"); }
  glShaderBinary(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetShaderPrecisionFormat glGetShaderPrecisionFormat = function void (GLenum a0, GLenum a1, GLint* a2, GLint* a3) nothrow {
  glGetShaderPrecisionFormat = cast(glbfn_glGetShaderPrecisionFormat)glGetProcAddress(`glGetShaderPrecisionFormat`);
  if (glGetShaderPrecisionFormat is null) assert(0, `OpenGL function 'glGetShaderPrecisionFormat' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetShaderPrecisionFormat'\n"); }
  glGetShaderPrecisionFormat(a0,a1,a2,a3,);
};
__gshared glbfn_glDepthRangef glDepthRangef = function void (GLfloat a0, GLfloat a1) nothrow {
  glDepthRangef = cast(glbfn_glDepthRangef)glGetProcAddress(`glDepthRangef`);
  if (glDepthRangef is null) assert(0, `OpenGL function 'glDepthRangef' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthRangef'\n"); }
  glDepthRangef(a0,a1,);
};
__gshared glbfn_glClearDepthf glClearDepthf = function void (GLfloat a0) nothrow {
  glClearDepthf = cast(glbfn_glClearDepthf)glGetProcAddress(`glClearDepthf`);
  if (glClearDepthf is null) assert(0, `OpenGL function 'glClearDepthf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearDepthf'\n"); }
  glClearDepthf(a0,);
};
__gshared glbfn_glGetProgramBinary glGetProgramBinary = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLenum* a3, void* a4) nothrow {
  glGetProgramBinary = cast(glbfn_glGetProgramBinary)glGetProcAddress(`glGetProgramBinary`);
  if (glGetProgramBinary is null) assert(0, `OpenGL function 'glGetProgramBinary' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramBinary'\n"); }
  glGetProgramBinary(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramBinary glProgramBinary = function void (GLuint a0, GLenum a1, const(void)* a2, GLsizei a3) nothrow {
  glProgramBinary = cast(glbfn_glProgramBinary)glGetProcAddress(`glProgramBinary`);
  if (glProgramBinary is null) assert(0, `OpenGL function 'glProgramBinary' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramBinary'\n"); }
  glProgramBinary(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramParameteri glProgramParameteri = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glProgramParameteri = cast(glbfn_glProgramParameteri)glGetProcAddress(`glProgramParameteri`);
  if (glProgramParameteri is null) assert(0, `OpenGL function 'glProgramParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameteri'\n"); }
  glProgramParameteri(a0,a1,a2,);
};
__gshared glbfn_glUseProgramStages glUseProgramStages = function void (GLuint a0, GLbitfield a1, GLuint a2) nothrow {
  glUseProgramStages = cast(glbfn_glUseProgramStages)glGetProcAddress(`glUseProgramStages`);
  if (glUseProgramStages is null) assert(0, `OpenGL function 'glUseProgramStages' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUseProgramStages'\n"); }
  glUseProgramStages(a0,a1,a2,);
};
__gshared glbfn_glActiveShaderProgram glActiveShaderProgram = function void (GLuint a0, GLuint a1) nothrow {
  glActiveShaderProgram = cast(glbfn_glActiveShaderProgram)glGetProcAddress(`glActiveShaderProgram`);
  if (glActiveShaderProgram is null) assert(0, `OpenGL function 'glActiveShaderProgram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glActiveShaderProgram'\n"); }
  glActiveShaderProgram(a0,a1,);
};
__gshared glbfn_glCreateShaderProgramv glCreateShaderProgramv = function GLuint (GLenum a0, GLsizei a1, const(GLchar*)* a2) nothrow {
  glCreateShaderProgramv = cast(glbfn_glCreateShaderProgramv)glGetProcAddress(`glCreateShaderProgramv`);
  if (glCreateShaderProgramv is null) assert(0, `OpenGL function 'glCreateShaderProgramv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateShaderProgramv'\n"); }
  return glCreateShaderProgramv(a0,a1,a2,);
};
__gshared glbfn_glBindProgramPipeline glBindProgramPipeline = function void (GLuint a0) nothrow {
  glBindProgramPipeline = cast(glbfn_glBindProgramPipeline)glGetProcAddress(`glBindProgramPipeline`);
  if (glBindProgramPipeline is null) assert(0, `OpenGL function 'glBindProgramPipeline' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindProgramPipeline'\n"); }
  glBindProgramPipeline(a0,);
};
__gshared glbfn_glDeleteProgramPipelines glDeleteProgramPipelines = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteProgramPipelines = cast(glbfn_glDeleteProgramPipelines)glGetProcAddress(`glDeleteProgramPipelines`);
  if (glDeleteProgramPipelines is null) assert(0, `OpenGL function 'glDeleteProgramPipelines' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteProgramPipelines'\n"); }
  glDeleteProgramPipelines(a0,a1,);
};
__gshared glbfn_glGenProgramPipelines glGenProgramPipelines = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenProgramPipelines = cast(glbfn_glGenProgramPipelines)glGetProcAddress(`glGenProgramPipelines`);
  if (glGenProgramPipelines is null) assert(0, `OpenGL function 'glGenProgramPipelines' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenProgramPipelines'\n"); }
  glGenProgramPipelines(a0,a1,);
};
__gshared glbfn_glIsProgramPipeline glIsProgramPipeline = function GLboolean (GLuint a0) nothrow {
  glIsProgramPipeline = cast(glbfn_glIsProgramPipeline)glGetProcAddress(`glIsProgramPipeline`);
  if (glIsProgramPipeline is null) assert(0, `OpenGL function 'glIsProgramPipeline' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsProgramPipeline'\n"); }
  return glIsProgramPipeline(a0,);
};
__gshared glbfn_glGetProgramPipelineiv glGetProgramPipelineiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetProgramPipelineiv = cast(glbfn_glGetProgramPipelineiv)glGetProcAddress(`glGetProgramPipelineiv`);
  if (glGetProgramPipelineiv is null) assert(0, `OpenGL function 'glGetProgramPipelineiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramPipelineiv'\n"); }
  glGetProgramPipelineiv(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform1i glProgramUniform1i = function void (GLuint a0, GLint a1, GLint a2) nothrow {
  glProgramUniform1i = cast(glbfn_glProgramUniform1i)glGetProcAddress(`glProgramUniform1i`);
  if (glProgramUniform1i is null) assert(0, `OpenGL function 'glProgramUniform1i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1i'\n"); }
  glProgramUniform1i(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform1iv glProgramUniform1iv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform1iv = cast(glbfn_glProgramUniform1iv)glGetProcAddress(`glProgramUniform1iv`);
  if (glProgramUniform1iv is null) assert(0, `OpenGL function 'glProgramUniform1iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1iv'\n"); }
  glProgramUniform1iv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1f glProgramUniform1f = function void (GLuint a0, GLint a1, GLfloat a2) nothrow {
  glProgramUniform1f = cast(glbfn_glProgramUniform1f)glGetProcAddress(`glProgramUniform1f`);
  if (glProgramUniform1f is null) assert(0, `OpenGL function 'glProgramUniform1f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1f'\n"); }
  glProgramUniform1f(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform1fv glProgramUniform1fv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform1fv = cast(glbfn_glProgramUniform1fv)glGetProcAddress(`glProgramUniform1fv`);
  if (glProgramUniform1fv is null) assert(0, `OpenGL function 'glProgramUniform1fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1fv'\n"); }
  glProgramUniform1fv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1d glProgramUniform1d = function void (GLuint a0, GLint a1, GLdouble a2) nothrow {
  glProgramUniform1d = cast(glbfn_glProgramUniform1d)glGetProcAddress(`glProgramUniform1d`);
  if (glProgramUniform1d is null) assert(0, `OpenGL function 'glProgramUniform1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1d'\n"); }
  glProgramUniform1d(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform1dv glProgramUniform1dv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform1dv = cast(glbfn_glProgramUniform1dv)glGetProcAddress(`glProgramUniform1dv`);
  if (glProgramUniform1dv is null) assert(0, `OpenGL function 'glProgramUniform1dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1dv'\n"); }
  glProgramUniform1dv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1ui glProgramUniform1ui = function void (GLuint a0, GLint a1, GLuint a2) nothrow {
  glProgramUniform1ui = cast(glbfn_glProgramUniform1ui)glGetProcAddress(`glProgramUniform1ui`);
  if (glProgramUniform1ui is null) assert(0, `OpenGL function 'glProgramUniform1ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1ui'\n"); }
  glProgramUniform1ui(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform1uiv glProgramUniform1uiv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform1uiv = cast(glbfn_glProgramUniform1uiv)glGetProcAddress(`glProgramUniform1uiv`);
  if (glProgramUniform1uiv is null) assert(0, `OpenGL function 'glProgramUniform1uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1uiv'\n"); }
  glProgramUniform1uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2i glProgramUniform2i = function void (GLuint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glProgramUniform2i = cast(glbfn_glProgramUniform2i)glGetProcAddress(`glProgramUniform2i`);
  if (glProgramUniform2i is null) assert(0, `OpenGL function 'glProgramUniform2i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2i'\n"); }
  glProgramUniform2i(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2iv glProgramUniform2iv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform2iv = cast(glbfn_glProgramUniform2iv)glGetProcAddress(`glProgramUniform2iv`);
  if (glProgramUniform2iv is null) assert(0, `OpenGL function 'glProgramUniform2iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2iv'\n"); }
  glProgramUniform2iv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2f glProgramUniform2f = function void (GLuint a0, GLint a1, GLfloat a2, GLfloat a3) nothrow {
  glProgramUniform2f = cast(glbfn_glProgramUniform2f)glGetProcAddress(`glProgramUniform2f`);
  if (glProgramUniform2f is null) assert(0, `OpenGL function 'glProgramUniform2f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2f'\n"); }
  glProgramUniform2f(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2fv glProgramUniform2fv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform2fv = cast(glbfn_glProgramUniform2fv)glGetProcAddress(`glProgramUniform2fv`);
  if (glProgramUniform2fv is null) assert(0, `OpenGL function 'glProgramUniform2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2fv'\n"); }
  glProgramUniform2fv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2d glProgramUniform2d = function void (GLuint a0, GLint a1, GLdouble a2, GLdouble a3) nothrow {
  glProgramUniform2d = cast(glbfn_glProgramUniform2d)glGetProcAddress(`glProgramUniform2d`);
  if (glProgramUniform2d is null) assert(0, `OpenGL function 'glProgramUniform2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2d'\n"); }
  glProgramUniform2d(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2dv glProgramUniform2dv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform2dv = cast(glbfn_glProgramUniform2dv)glGetProcAddress(`glProgramUniform2dv`);
  if (glProgramUniform2dv is null) assert(0, `OpenGL function 'glProgramUniform2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2dv'\n"); }
  glProgramUniform2dv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2ui glProgramUniform2ui = function void (GLuint a0, GLint a1, GLuint a2, GLuint a3) nothrow {
  glProgramUniform2ui = cast(glbfn_glProgramUniform2ui)glGetProcAddress(`glProgramUniform2ui`);
  if (glProgramUniform2ui is null) assert(0, `OpenGL function 'glProgramUniform2ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2ui'\n"); }
  glProgramUniform2ui(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2uiv glProgramUniform2uiv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform2uiv = cast(glbfn_glProgramUniform2uiv)glGetProcAddress(`glProgramUniform2uiv`);
  if (glProgramUniform2uiv is null) assert(0, `OpenGL function 'glProgramUniform2uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2uiv'\n"); }
  glProgramUniform2uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3i glProgramUniform3i = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glProgramUniform3i = cast(glbfn_glProgramUniform3i)glGetProcAddress(`glProgramUniform3i`);
  if (glProgramUniform3i is null) assert(0, `OpenGL function 'glProgramUniform3i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3i'\n"); }
  glProgramUniform3i(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform3iv glProgramUniform3iv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform3iv = cast(glbfn_glProgramUniform3iv)glGetProcAddress(`glProgramUniform3iv`);
  if (glProgramUniform3iv is null) assert(0, `OpenGL function 'glProgramUniform3iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3iv'\n"); }
  glProgramUniform3iv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3f glProgramUniform3f = function void (GLuint a0, GLint a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glProgramUniform3f = cast(glbfn_glProgramUniform3f)glGetProcAddress(`glProgramUniform3f`);
  if (glProgramUniform3f is null) assert(0, `OpenGL function 'glProgramUniform3f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3f'\n"); }
  glProgramUniform3f(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform3fv glProgramUniform3fv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform3fv = cast(glbfn_glProgramUniform3fv)glGetProcAddress(`glProgramUniform3fv`);
  if (glProgramUniform3fv is null) assert(0, `OpenGL function 'glProgramUniform3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3fv'\n"); }
  glProgramUniform3fv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3d glProgramUniform3d = function void (GLuint a0, GLint a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glProgramUniform3d = cast(glbfn_glProgramUniform3d)glGetProcAddress(`glProgramUniform3d`);
  if (glProgramUniform3d is null) assert(0, `OpenGL function 'glProgramUniform3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3d'\n"); }
  glProgramUniform3d(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform3dv glProgramUniform3dv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform3dv = cast(glbfn_glProgramUniform3dv)glGetProcAddress(`glProgramUniform3dv`);
  if (glProgramUniform3dv is null) assert(0, `OpenGL function 'glProgramUniform3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3dv'\n"); }
  glProgramUniform3dv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3ui glProgramUniform3ui = function void (GLuint a0, GLint a1, GLuint a2, GLuint a3, GLuint a4) nothrow {
  glProgramUniform3ui = cast(glbfn_glProgramUniform3ui)glGetProcAddress(`glProgramUniform3ui`);
  if (glProgramUniform3ui is null) assert(0, `OpenGL function 'glProgramUniform3ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3ui'\n"); }
  glProgramUniform3ui(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform3uiv glProgramUniform3uiv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform3uiv = cast(glbfn_glProgramUniform3uiv)glGetProcAddress(`glProgramUniform3uiv`);
  if (glProgramUniform3uiv is null) assert(0, `OpenGL function 'glProgramUniform3uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3uiv'\n"); }
  glProgramUniform3uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4i glProgramUniform4i = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5) nothrow {
  glProgramUniform4i = cast(glbfn_glProgramUniform4i)glGetProcAddress(`glProgramUniform4i`);
  if (glProgramUniform4i is null) assert(0, `OpenGL function 'glProgramUniform4i' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4i'\n"); }
  glProgramUniform4i(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform4iv glProgramUniform4iv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform4iv = cast(glbfn_glProgramUniform4iv)glGetProcAddress(`glProgramUniform4iv`);
  if (glProgramUniform4iv is null) assert(0, `OpenGL function 'glProgramUniform4iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4iv'\n"); }
  glProgramUniform4iv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4f glProgramUniform4f = function void (GLuint a0, GLint a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glProgramUniform4f = cast(glbfn_glProgramUniform4f)glGetProcAddress(`glProgramUniform4f`);
  if (glProgramUniform4f is null) assert(0, `OpenGL function 'glProgramUniform4f' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4f'\n"); }
  glProgramUniform4f(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform4fv glProgramUniform4fv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform4fv = cast(glbfn_glProgramUniform4fv)glGetProcAddress(`glProgramUniform4fv`);
  if (glProgramUniform4fv is null) assert(0, `OpenGL function 'glProgramUniform4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4fv'\n"); }
  glProgramUniform4fv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4d glProgramUniform4d = function void (GLuint a0, GLint a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5) nothrow {
  glProgramUniform4d = cast(glbfn_glProgramUniform4d)glGetProcAddress(`glProgramUniform4d`);
  if (glProgramUniform4d is null) assert(0, `OpenGL function 'glProgramUniform4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4d'\n"); }
  glProgramUniform4d(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform4dv glProgramUniform4dv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform4dv = cast(glbfn_glProgramUniform4dv)glGetProcAddress(`glProgramUniform4dv`);
  if (glProgramUniform4dv is null) assert(0, `OpenGL function 'glProgramUniform4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4dv'\n"); }
  glProgramUniform4dv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4ui glProgramUniform4ui = function void (GLuint a0, GLint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5) nothrow {
  glProgramUniform4ui = cast(glbfn_glProgramUniform4ui)glGetProcAddress(`glProgramUniform4ui`);
  if (glProgramUniform4ui is null) assert(0, `OpenGL function 'glProgramUniform4ui' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4ui'\n"); }
  glProgramUniform4ui(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform4uiv glProgramUniform4uiv = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform4uiv = cast(glbfn_glProgramUniform4uiv)glGetProcAddress(`glProgramUniform4uiv`);
  if (glProgramUniform4uiv is null) assert(0, `OpenGL function 'glProgramUniform4uiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4uiv'\n"); }
  glProgramUniform4uiv(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniformMatrix2fv glProgramUniformMatrix2fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix2fv = cast(glbfn_glProgramUniformMatrix2fv)glGetProcAddress(`glProgramUniformMatrix2fv`);
  if (glProgramUniformMatrix2fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2fv'\n"); }
  glProgramUniformMatrix2fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3fv glProgramUniformMatrix3fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix3fv = cast(glbfn_glProgramUniformMatrix3fv)glGetProcAddress(`glProgramUniformMatrix3fv`);
  if (glProgramUniformMatrix3fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3fv'\n"); }
  glProgramUniformMatrix3fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4fv glProgramUniformMatrix4fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix4fv = cast(glbfn_glProgramUniformMatrix4fv)glGetProcAddress(`glProgramUniformMatrix4fv`);
  if (glProgramUniformMatrix4fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4fv'\n"); }
  glProgramUniformMatrix4fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2dv glProgramUniformMatrix2dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix2dv = cast(glbfn_glProgramUniformMatrix2dv)glGetProcAddress(`glProgramUniformMatrix2dv`);
  if (glProgramUniformMatrix2dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2dv'\n"); }
  glProgramUniformMatrix2dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3dv glProgramUniformMatrix3dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix3dv = cast(glbfn_glProgramUniformMatrix3dv)glGetProcAddress(`glProgramUniformMatrix3dv`);
  if (glProgramUniformMatrix3dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3dv'\n"); }
  glProgramUniformMatrix3dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4dv glProgramUniformMatrix4dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix4dv = cast(glbfn_glProgramUniformMatrix4dv)glGetProcAddress(`glProgramUniformMatrix4dv`);
  if (glProgramUniformMatrix4dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4dv'\n"); }
  glProgramUniformMatrix4dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix2x3fv = cast(glbfn_glProgramUniformMatrix2x3fv)glGetProcAddress(`glProgramUniformMatrix2x3fv`);
  if (glProgramUniformMatrix2x3fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x3fv'\n"); }
  glProgramUniformMatrix2x3fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix3x2fv = cast(glbfn_glProgramUniformMatrix3x2fv)glGetProcAddress(`glProgramUniformMatrix3x2fv`);
  if (glProgramUniformMatrix3x2fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x2fv'\n"); }
  glProgramUniformMatrix3x2fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix2x4fv = cast(glbfn_glProgramUniformMatrix2x4fv)glGetProcAddress(`glProgramUniformMatrix2x4fv`);
  if (glProgramUniformMatrix2x4fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x4fv'\n"); }
  glProgramUniformMatrix2x4fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix4x2fv = cast(glbfn_glProgramUniformMatrix4x2fv)glGetProcAddress(`glProgramUniformMatrix4x2fv`);
  if (glProgramUniformMatrix4x2fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x2fv'\n"); }
  glProgramUniformMatrix4x2fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix3x4fv = cast(glbfn_glProgramUniformMatrix3x4fv)glGetProcAddress(`glProgramUniformMatrix3x4fv`);
  if (glProgramUniformMatrix3x4fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x4fv'\n"); }
  glProgramUniformMatrix3x4fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix4x3fv = cast(glbfn_glProgramUniformMatrix4x3fv)glGetProcAddress(`glProgramUniformMatrix4x3fv`);
  if (glProgramUniformMatrix4x3fv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x3fv'\n"); }
  glProgramUniformMatrix4x3fv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix2x3dv = cast(glbfn_glProgramUniformMatrix2x3dv)glGetProcAddress(`glProgramUniformMatrix2x3dv`);
  if (glProgramUniformMatrix2x3dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x3dv'\n"); }
  glProgramUniformMatrix2x3dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix3x2dv = cast(glbfn_glProgramUniformMatrix3x2dv)glGetProcAddress(`glProgramUniformMatrix3x2dv`);
  if (glProgramUniformMatrix3x2dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x2dv'\n"); }
  glProgramUniformMatrix3x2dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix2x4dv = cast(glbfn_glProgramUniformMatrix2x4dv)glGetProcAddress(`glProgramUniformMatrix2x4dv`);
  if (glProgramUniformMatrix2x4dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x4dv'\n"); }
  glProgramUniformMatrix2x4dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix4x2dv = cast(glbfn_glProgramUniformMatrix4x2dv)glGetProcAddress(`glProgramUniformMatrix4x2dv`);
  if (glProgramUniformMatrix4x2dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x2dv'\n"); }
  glProgramUniformMatrix4x2dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix3x4dv = cast(glbfn_glProgramUniformMatrix3x4dv)glGetProcAddress(`glProgramUniformMatrix3x4dv`);
  if (glProgramUniformMatrix3x4dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x4dv'\n"); }
  glProgramUniformMatrix3x4dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix4x3dv = cast(glbfn_glProgramUniformMatrix4x3dv)glGetProcAddress(`glProgramUniformMatrix4x3dv`);
  if (glProgramUniformMatrix4x3dv is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x3dv'\n"); }
  glProgramUniformMatrix4x3dv(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glValidateProgramPipeline glValidateProgramPipeline = function void (GLuint a0) nothrow {
  glValidateProgramPipeline = cast(glbfn_glValidateProgramPipeline)glGetProcAddress(`glValidateProgramPipeline`);
  if (glValidateProgramPipeline is null) assert(0, `OpenGL function 'glValidateProgramPipeline' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glValidateProgramPipeline'\n"); }
  glValidateProgramPipeline(a0,);
};
__gshared glbfn_glGetProgramPipelineInfoLog glGetProgramPipelineInfoLog = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetProgramPipelineInfoLog = cast(glbfn_glGetProgramPipelineInfoLog)glGetProcAddress(`glGetProgramPipelineInfoLog`);
  if (glGetProgramPipelineInfoLog is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLog' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramPipelineInfoLog'\n"); }
  glGetProgramPipelineInfoLog(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribL1d glVertexAttribL1d = function void (GLuint a0, GLdouble a1) nothrow {
  glVertexAttribL1d = cast(glbfn_glVertexAttribL1d)glGetProcAddress(`glVertexAttribL1d`);
  if (glVertexAttribL1d is null) assert(0, `OpenGL function 'glVertexAttribL1d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1d'\n"); }
  glVertexAttribL1d(a0,a1,);
};
__gshared glbfn_glVertexAttribL2d glVertexAttribL2d = function void (GLuint a0, GLdouble a1, GLdouble a2) nothrow {
  glVertexAttribL2d = cast(glbfn_glVertexAttribL2d)glGetProcAddress(`glVertexAttribL2d`);
  if (glVertexAttribL2d is null) assert(0, `OpenGL function 'glVertexAttribL2d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2d'\n"); }
  glVertexAttribL2d(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribL3d glVertexAttribL3d = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glVertexAttribL3d = cast(glbfn_glVertexAttribL3d)glGetProcAddress(`glVertexAttribL3d`);
  if (glVertexAttribL3d is null) assert(0, `OpenGL function 'glVertexAttribL3d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3d'\n"); }
  glVertexAttribL3d(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribL4d glVertexAttribL4d = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glVertexAttribL4d = cast(glbfn_glVertexAttribL4d)glGetProcAddress(`glVertexAttribL4d`);
  if (glVertexAttribL4d is null) assert(0, `OpenGL function 'glVertexAttribL4d' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4d'\n"); }
  glVertexAttribL4d(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribL1dv glVertexAttribL1dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL1dv = cast(glbfn_glVertexAttribL1dv)glGetProcAddress(`glVertexAttribL1dv`);
  if (glVertexAttribL1dv is null) assert(0, `OpenGL function 'glVertexAttribL1dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1dv'\n"); }
  glVertexAttribL1dv(a0,a1,);
};
__gshared glbfn_glVertexAttribL2dv glVertexAttribL2dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL2dv = cast(glbfn_glVertexAttribL2dv)glGetProcAddress(`glVertexAttribL2dv`);
  if (glVertexAttribL2dv is null) assert(0, `OpenGL function 'glVertexAttribL2dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2dv'\n"); }
  glVertexAttribL2dv(a0,a1,);
};
__gshared glbfn_glVertexAttribL3dv glVertexAttribL3dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL3dv = cast(glbfn_glVertexAttribL3dv)glGetProcAddress(`glVertexAttribL3dv`);
  if (glVertexAttribL3dv is null) assert(0, `OpenGL function 'glVertexAttribL3dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3dv'\n"); }
  glVertexAttribL3dv(a0,a1,);
};
__gshared glbfn_glVertexAttribL4dv glVertexAttribL4dv = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL4dv = cast(glbfn_glVertexAttribL4dv)glGetProcAddress(`glVertexAttribL4dv`);
  if (glVertexAttribL4dv is null) assert(0, `OpenGL function 'glVertexAttribL4dv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4dv'\n"); }
  glVertexAttribL4dv(a0,a1,);
};
__gshared glbfn_glVertexAttribLPointer glVertexAttribLPointer = function void (GLuint a0, GLint a1, GLenum a2, GLsizei a3, const(void)* a4) nothrow {
  glVertexAttribLPointer = cast(glbfn_glVertexAttribLPointer)glGetProcAddress(`glVertexAttribLPointer`);
  if (glVertexAttribLPointer is null) assert(0, `OpenGL function 'glVertexAttribLPointer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribLPointer'\n"); }
  glVertexAttribLPointer(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetVertexAttribLdv glGetVertexAttribLdv = function void (GLuint a0, GLenum a1, GLdouble* a2) nothrow {
  glGetVertexAttribLdv = cast(glbfn_glGetVertexAttribLdv)glGetProcAddress(`glGetVertexAttribLdv`);
  if (glGetVertexAttribLdv is null) assert(0, `OpenGL function 'glGetVertexAttribLdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribLdv'\n"); }
  glGetVertexAttribLdv(a0,a1,a2,);
};
__gshared glbfn_glViewportArrayv glViewportArrayv = function void (GLuint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glViewportArrayv = cast(glbfn_glViewportArrayv)glGetProcAddress(`glViewportArrayv`);
  if (glViewportArrayv is null) assert(0, `OpenGL function 'glViewportArrayv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glViewportArrayv'\n"); }
  glViewportArrayv(a0,a1,a2,);
};
__gshared glbfn_glViewportIndexedf glViewportIndexedf = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glViewportIndexedf = cast(glbfn_glViewportIndexedf)glGetProcAddress(`glViewportIndexedf`);
  if (glViewportIndexedf is null) assert(0, `OpenGL function 'glViewportIndexedf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glViewportIndexedf'\n"); }
  glViewportIndexedf(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glViewportIndexedfv glViewportIndexedfv = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glViewportIndexedfv = cast(glbfn_glViewportIndexedfv)glGetProcAddress(`glViewportIndexedfv`);
  if (glViewportIndexedfv is null) assert(0, `OpenGL function 'glViewportIndexedfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glViewportIndexedfv'\n"); }
  glViewportIndexedfv(a0,a1,);
};
__gshared glbfn_glScissorArrayv glScissorArrayv = function void (GLuint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glScissorArrayv = cast(glbfn_glScissorArrayv)glGetProcAddress(`glScissorArrayv`);
  if (glScissorArrayv is null) assert(0, `OpenGL function 'glScissorArrayv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glScissorArrayv'\n"); }
  glScissorArrayv(a0,a1,a2,);
};
__gshared glbfn_glScissorIndexed glScissorIndexed = function void (GLuint a0, GLint a1, GLint a2, GLsizei a3, GLsizei a4) nothrow {
  glScissorIndexed = cast(glbfn_glScissorIndexed)glGetProcAddress(`glScissorIndexed`);
  if (glScissorIndexed is null) assert(0, `OpenGL function 'glScissorIndexed' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glScissorIndexed'\n"); }
  glScissorIndexed(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glScissorIndexedv glScissorIndexedv = function void (GLuint a0, const(GLint)* a1) nothrow {
  glScissorIndexedv = cast(glbfn_glScissorIndexedv)glGetProcAddress(`glScissorIndexedv`);
  if (glScissorIndexedv is null) assert(0, `OpenGL function 'glScissorIndexedv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glScissorIndexedv'\n"); }
  glScissorIndexedv(a0,a1,);
};
__gshared glbfn_glDepthRangeArrayv glDepthRangeArrayv = function void (GLuint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glDepthRangeArrayv = cast(glbfn_glDepthRangeArrayv)glGetProcAddress(`glDepthRangeArrayv`);
  if (glDepthRangeArrayv is null) assert(0, `OpenGL function 'glDepthRangeArrayv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthRangeArrayv'\n"); }
  glDepthRangeArrayv(a0,a1,a2,);
};
__gshared glbfn_glDepthRangeIndexed glDepthRangeIndexed = function void (GLuint a0, GLdouble a1, GLdouble a2) nothrow {
  glDepthRangeIndexed = cast(glbfn_glDepthRangeIndexed)glGetProcAddress(`glDepthRangeIndexed`);
  if (glDepthRangeIndexed is null) assert(0, `OpenGL function 'glDepthRangeIndexed' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthRangeIndexed'\n"); }
  glDepthRangeIndexed(a0,a1,a2,);
};
__gshared glbfn_glGetFloati_v glGetFloati_v = function void (GLenum a0, GLuint a1, GLfloat* a2) nothrow {
  glGetFloati_v = cast(glbfn_glGetFloati_v)glGetProcAddress(`glGetFloati_v`);
  if (glGetFloati_v is null) assert(0, `OpenGL function 'glGetFloati_v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFloati_v'\n"); }
  glGetFloati_v(a0,a1,a2,);
};
__gshared glbfn_glGetDoublei_v glGetDoublei_v = function void (GLenum a0, GLuint a1, GLdouble* a2) nothrow {
  glGetDoublei_v = cast(glbfn_glGetDoublei_v)glGetProcAddress(`glGetDoublei_v`);
  if (glGetDoublei_v is null) assert(0, `OpenGL function 'glGetDoublei_v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDoublei_v'\n"); }
  glGetDoublei_v(a0,a1,a2,);
};
__gshared glbfn_glDrawArraysInstancedBaseInstance glDrawArraysInstancedBaseInstance = function void (GLenum a0, GLint a1, GLsizei a2, GLsizei a3, GLuint a4) nothrow {
  glDrawArraysInstancedBaseInstance = cast(glbfn_glDrawArraysInstancedBaseInstance)glGetProcAddress(`glDrawArraysInstancedBaseInstance`);
  if (glDrawArraysInstancedBaseInstance is null) assert(0, `OpenGL function 'glDrawArraysInstancedBaseInstance' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawArraysInstancedBaseInstance'\n"); }
  glDrawArraysInstancedBaseInstance(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawElementsInstancedBaseInstance glDrawElementsInstancedBaseInstance = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLsizei a4, GLuint a5) nothrow {
  glDrawElementsInstancedBaseInstance = cast(glbfn_glDrawElementsInstancedBaseInstance)glGetProcAddress(`glDrawElementsInstancedBaseInstance`);
  if (glDrawElementsInstancedBaseInstance is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseInstance' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsInstancedBaseInstance'\n"); }
  glDrawElementsInstancedBaseInstance(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glDrawElementsInstancedBaseVertexBaseInstance glDrawElementsInstancedBaseVertexBaseInstance = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLsizei a4, GLint a5, GLuint a6) nothrow {
  glDrawElementsInstancedBaseVertexBaseInstance = cast(glbfn_glDrawElementsInstancedBaseVertexBaseInstance)glGetProcAddress(`glDrawElementsInstancedBaseVertexBaseInstance`);
  if (glDrawElementsInstancedBaseVertexBaseInstance is null) assert(0, `OpenGL function 'glDrawElementsInstancedBaseVertexBaseInstance' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsInstancedBaseVertexBaseInstance'\n"); }
  glDrawElementsInstancedBaseVertexBaseInstance(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetInternalformativ glGetInternalformativ = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, GLint* a4) nothrow {
  glGetInternalformativ = cast(glbfn_glGetInternalformativ)glGetProcAddress(`glGetInternalformativ`);
  if (glGetInternalformativ is null) assert(0, `OpenGL function 'glGetInternalformativ' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInternalformativ'\n"); }
  glGetInternalformativ(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetActiveAtomicCounterBufferiv glGetActiveAtomicCounterBufferiv = function void (GLuint a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetActiveAtomicCounterBufferiv = cast(glbfn_glGetActiveAtomicCounterBufferiv)glGetProcAddress(`glGetActiveAtomicCounterBufferiv`);
  if (glGetActiveAtomicCounterBufferiv is null) assert(0, `OpenGL function 'glGetActiveAtomicCounterBufferiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveAtomicCounterBufferiv'\n"); }
  glGetActiveAtomicCounterBufferiv(a0,a1,a2,a3,);
};
__gshared glbfn_glBindImageTexture glBindImageTexture = function void (GLuint a0, GLuint a1, GLint a2, GLboolean a3, GLint a4, GLenum a5, GLenum a6) nothrow {
  glBindImageTexture = cast(glbfn_glBindImageTexture)glGetProcAddress(`glBindImageTexture`);
  if (glBindImageTexture is null) assert(0, `OpenGL function 'glBindImageTexture' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindImageTexture'\n"); }
  glBindImageTexture(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMemoryBarrier glMemoryBarrier = function void (GLbitfield a0) nothrow {
  glMemoryBarrier = cast(glbfn_glMemoryBarrier)glGetProcAddress(`glMemoryBarrier`);
  if (glMemoryBarrier is null) assert(0, `OpenGL function 'glMemoryBarrier' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMemoryBarrier'\n"); }
  glMemoryBarrier(a0,);
};
__gshared glbfn_glTexStorage1D glTexStorage1D = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3) nothrow {
  glTexStorage1D = cast(glbfn_glTexStorage1D)glGetProcAddress(`glTexStorage1D`);
  if (glTexStorage1D is null) assert(0, `OpenGL function 'glTexStorage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexStorage1D'\n"); }
  glTexStorage1D(a0,a1,a2,a3,);
};
__gshared glbfn_glTexStorage2D glTexStorage2D = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4) nothrow {
  glTexStorage2D = cast(glbfn_glTexStorage2D)glGetProcAddress(`glTexStorage2D`);
  if (glTexStorage2D is null) assert(0, `OpenGL function 'glTexStorage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexStorage2D'\n"); }
  glTexStorage2D(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTexStorage3D glTexStorage3D = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5) nothrow {
  glTexStorage3D = cast(glbfn_glTexStorage3D)glGetProcAddress(`glTexStorage3D`);
  if (glTexStorage3D is null) assert(0, `OpenGL function 'glTexStorage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexStorage3D'\n"); }
  glTexStorage3D(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glDrawTransformFeedbackInstanced glDrawTransformFeedbackInstanced = function void (GLenum a0, GLuint a1, GLsizei a2) nothrow {
  glDrawTransformFeedbackInstanced = cast(glbfn_glDrawTransformFeedbackInstanced)glGetProcAddress(`glDrawTransformFeedbackInstanced`);
  if (glDrawTransformFeedbackInstanced is null) assert(0, `OpenGL function 'glDrawTransformFeedbackInstanced' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawTransformFeedbackInstanced'\n"); }
  glDrawTransformFeedbackInstanced(a0,a1,a2,);
};
__gshared glbfn_glDrawTransformFeedbackStreamInstanced glDrawTransformFeedbackStreamInstanced = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3) nothrow {
  glDrawTransformFeedbackStreamInstanced = cast(glbfn_glDrawTransformFeedbackStreamInstanced)glGetProcAddress(`glDrawTransformFeedbackStreamInstanced`);
  if (glDrawTransformFeedbackStreamInstanced is null) assert(0, `OpenGL function 'glDrawTransformFeedbackStreamInstanced' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawTransformFeedbackStreamInstanced'\n"); }
  glDrawTransformFeedbackStreamInstanced(a0,a1,a2,a3,);
};
__gshared glbfn_glClearBufferData glClearBufferData = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3, const(void)* a4) nothrow {
  glClearBufferData = cast(glbfn_glClearBufferData)glGetProcAddress(`glClearBufferData`);
  if (glClearBufferData is null) assert(0, `OpenGL function 'glClearBufferData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearBufferData'\n"); }
  glClearBufferData(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glClearBufferSubData glClearBufferSubData = function void (GLenum a0, GLenum a1, GLintptr a2, GLsizeiptr a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glClearBufferSubData = cast(glbfn_glClearBufferSubData)glGetProcAddress(`glClearBufferSubData`);
  if (glClearBufferSubData is null) assert(0, `OpenGL function 'glClearBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearBufferSubData'\n"); }
  glClearBufferSubData(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glDispatchCompute glDispatchCompute = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glDispatchCompute = cast(glbfn_glDispatchCompute)glGetProcAddress(`glDispatchCompute`);
  if (glDispatchCompute is null) assert(0, `OpenGL function 'glDispatchCompute' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDispatchCompute'\n"); }
  glDispatchCompute(a0,a1,a2,);
};
__gshared glbfn_glDispatchComputeIndirect glDispatchComputeIndirect = function void (GLintptr a0) nothrow {
  glDispatchComputeIndirect = cast(glbfn_glDispatchComputeIndirect)glGetProcAddress(`glDispatchComputeIndirect`);
  if (glDispatchComputeIndirect is null) assert(0, `OpenGL function 'glDispatchComputeIndirect' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDispatchComputeIndirect'\n"); }
  glDispatchComputeIndirect(a0,);
};
__gshared glbfn_glCopyImageSubData glCopyImageSubData = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLuint a6, GLenum a7, GLint a8, GLint a9, GLint a10, GLint a11, GLsizei a12, GLsizei a13, GLsizei a14) nothrow {
  glCopyImageSubData = cast(glbfn_glCopyImageSubData)glGetProcAddress(`glCopyImageSubData`);
  if (glCopyImageSubData is null) assert(0, `OpenGL function 'glCopyImageSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyImageSubData'\n"); }
  glCopyImageSubData(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
};
__gshared glbfn_glFramebufferParameteri glFramebufferParameteri = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glFramebufferParameteri = cast(glbfn_glFramebufferParameteri)glGetProcAddress(`glFramebufferParameteri`);
  if (glFramebufferParameteri is null) assert(0, `OpenGL function 'glFramebufferParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferParameteri'\n"); }
  glFramebufferParameteri(a0,a1,a2,);
};
__gshared glbfn_glGetFramebufferParameteriv glGetFramebufferParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetFramebufferParameteriv = cast(glbfn_glGetFramebufferParameteriv)glGetProcAddress(`glGetFramebufferParameteriv`);
  if (glGetFramebufferParameteriv is null) assert(0, `OpenGL function 'glGetFramebufferParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFramebufferParameteriv'\n"); }
  glGetFramebufferParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetInternalformati64v glGetInternalformati64v = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, GLint64* a4) nothrow {
  glGetInternalformati64v = cast(glbfn_glGetInternalformati64v)glGetProcAddress(`glGetInternalformati64v`);
  if (glGetInternalformati64v is null) assert(0, `OpenGL function 'glGetInternalformati64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInternalformati64v'\n"); }
  glGetInternalformati64v(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glInvalidateTexSubImage glInvalidateTexSubImage = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7) nothrow {
  glInvalidateTexSubImage = cast(glbfn_glInvalidateTexSubImage)glGetProcAddress(`glInvalidateTexSubImage`);
  if (glInvalidateTexSubImage is null) assert(0, `OpenGL function 'glInvalidateTexSubImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateTexSubImage'\n"); }
  glInvalidateTexSubImage(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glInvalidateTexImage glInvalidateTexImage = function void (GLuint a0, GLint a1) nothrow {
  glInvalidateTexImage = cast(glbfn_glInvalidateTexImage)glGetProcAddress(`glInvalidateTexImage`);
  if (glInvalidateTexImage is null) assert(0, `OpenGL function 'glInvalidateTexImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateTexImage'\n"); }
  glInvalidateTexImage(a0,a1,);
};
__gshared glbfn_glInvalidateBufferSubData glInvalidateBufferSubData = function void (GLuint a0, GLintptr a1, GLsizeiptr a2) nothrow {
  glInvalidateBufferSubData = cast(glbfn_glInvalidateBufferSubData)glGetProcAddress(`glInvalidateBufferSubData`);
  if (glInvalidateBufferSubData is null) assert(0, `OpenGL function 'glInvalidateBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateBufferSubData'\n"); }
  glInvalidateBufferSubData(a0,a1,a2,);
};
__gshared glbfn_glInvalidateBufferData glInvalidateBufferData = function void (GLuint a0) nothrow {
  glInvalidateBufferData = cast(glbfn_glInvalidateBufferData)glGetProcAddress(`glInvalidateBufferData`);
  if (glInvalidateBufferData is null) assert(0, `OpenGL function 'glInvalidateBufferData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateBufferData'\n"); }
  glInvalidateBufferData(a0,);
};
__gshared glbfn_glInvalidateFramebuffer glInvalidateFramebuffer = function void (GLenum a0, GLsizei a1, const(GLenum)* a2) nothrow {
  glInvalidateFramebuffer = cast(glbfn_glInvalidateFramebuffer)glGetProcAddress(`glInvalidateFramebuffer`);
  if (glInvalidateFramebuffer is null) assert(0, `OpenGL function 'glInvalidateFramebuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateFramebuffer'\n"); }
  glInvalidateFramebuffer(a0,a1,a2,);
};
__gshared glbfn_glInvalidateSubFramebuffer glInvalidateSubFramebuffer = function void (GLenum a0, GLsizei a1, const(GLenum)* a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6) nothrow {
  glInvalidateSubFramebuffer = cast(glbfn_glInvalidateSubFramebuffer)glGetProcAddress(`glInvalidateSubFramebuffer`);
  if (glInvalidateSubFramebuffer is null) assert(0, `OpenGL function 'glInvalidateSubFramebuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateSubFramebuffer'\n"); }
  glInvalidateSubFramebuffer(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMultiDrawArraysIndirect glMultiDrawArraysIndirect = function void (GLenum a0, const(void)* a1, GLsizei a2, GLsizei a3) nothrow {
  glMultiDrawArraysIndirect = cast(glbfn_glMultiDrawArraysIndirect)glGetProcAddress(`glMultiDrawArraysIndirect`);
  if (glMultiDrawArraysIndirect is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirect' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawArraysIndirect'\n"); }
  glMultiDrawArraysIndirect(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiDrawElementsIndirect glMultiDrawElementsIndirect = function void (GLenum a0, GLenum a1, const(void)* a2, GLsizei a3, GLsizei a4) nothrow {
  glMultiDrawElementsIndirect = cast(glbfn_glMultiDrawElementsIndirect)glGetProcAddress(`glMultiDrawElementsIndirect`);
  if (glMultiDrawElementsIndirect is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirect' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementsIndirect'\n"); }
  glMultiDrawElementsIndirect(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetProgramInterfaceiv glGetProgramInterfaceiv = function void (GLuint a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetProgramInterfaceiv = cast(glbfn_glGetProgramInterfaceiv)glGetProcAddress(`glGetProgramInterfaceiv`);
  if (glGetProgramInterfaceiv is null) assert(0, `OpenGL function 'glGetProgramInterfaceiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramInterfaceiv'\n"); }
  glGetProgramInterfaceiv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetProgramResourceIndex glGetProgramResourceIndex = function GLuint (GLuint a0, GLenum a1, const(GLchar)* a2) nothrow {
  glGetProgramResourceIndex = cast(glbfn_glGetProgramResourceIndex)glGetProcAddress(`glGetProgramResourceIndex`);
  if (glGetProgramResourceIndex is null) assert(0, `OpenGL function 'glGetProgramResourceIndex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramResourceIndex'\n"); }
  return glGetProgramResourceIndex(a0,a1,a2,);
};
__gshared glbfn_glGetProgramResourceName glGetProgramResourceName = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, GLsizei* a4, GLchar* a5) nothrow {
  glGetProgramResourceName = cast(glbfn_glGetProgramResourceName)glGetProcAddress(`glGetProgramResourceName`);
  if (glGetProgramResourceName is null) assert(0, `OpenGL function 'glGetProgramResourceName' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramResourceName'\n"); }
  glGetProgramResourceName(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetProgramResourceiv glGetProgramResourceiv = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, const(GLenum)* a4, GLsizei a5, GLsizei* a6, GLint* a7) nothrow {
  glGetProgramResourceiv = cast(glbfn_glGetProgramResourceiv)glGetProcAddress(`glGetProgramResourceiv`);
  if (glGetProgramResourceiv is null) assert(0, `OpenGL function 'glGetProgramResourceiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramResourceiv'\n"); }
  glGetProgramResourceiv(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetProgramResourceLocation glGetProgramResourceLocation = function GLint (GLuint a0, GLenum a1, const(GLchar)* a2) nothrow {
  glGetProgramResourceLocation = cast(glbfn_glGetProgramResourceLocation)glGetProcAddress(`glGetProgramResourceLocation`);
  if (glGetProgramResourceLocation is null) assert(0, `OpenGL function 'glGetProgramResourceLocation' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramResourceLocation'\n"); }
  return glGetProgramResourceLocation(a0,a1,a2,);
};
__gshared glbfn_glGetProgramResourceLocationIndex glGetProgramResourceLocationIndex = function GLint (GLuint a0, GLenum a1, const(GLchar)* a2) nothrow {
  glGetProgramResourceLocationIndex = cast(glbfn_glGetProgramResourceLocationIndex)glGetProcAddress(`glGetProgramResourceLocationIndex`);
  if (glGetProgramResourceLocationIndex is null) assert(0, `OpenGL function 'glGetProgramResourceLocationIndex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramResourceLocationIndex'\n"); }
  return glGetProgramResourceLocationIndex(a0,a1,a2,);
};
__gshared glbfn_glShaderStorageBlockBinding glShaderStorageBlockBinding = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glShaderStorageBlockBinding = cast(glbfn_glShaderStorageBlockBinding)glGetProcAddress(`glShaderStorageBlockBinding`);
  if (glShaderStorageBlockBinding is null) assert(0, `OpenGL function 'glShaderStorageBlockBinding' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShaderStorageBlockBinding'\n"); }
  glShaderStorageBlockBinding(a0,a1,a2,);
};
__gshared glbfn_glTexBufferRange glTexBufferRange = function void (GLenum a0, GLenum a1, GLuint a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glTexBufferRange = cast(glbfn_glTexBufferRange)glGetProcAddress(`glTexBufferRange`);
  if (glTexBufferRange is null) assert(0, `OpenGL function 'glTexBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexBufferRange'\n"); }
  glTexBufferRange(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTexStorage2DMultisample glTexStorage2DMultisample = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLboolean a5) nothrow {
  glTexStorage2DMultisample = cast(glbfn_glTexStorage2DMultisample)glGetProcAddress(`glTexStorage2DMultisample`);
  if (glTexStorage2DMultisample is null) assert(0, `OpenGL function 'glTexStorage2DMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexStorage2DMultisample'\n"); }
  glTexStorage2DMultisample(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTexStorage3DMultisample glTexStorage3DMultisample = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLboolean a6) nothrow {
  glTexStorage3DMultisample = cast(glbfn_glTexStorage3DMultisample)glGetProcAddress(`glTexStorage3DMultisample`);
  if (glTexStorage3DMultisample is null) assert(0, `OpenGL function 'glTexStorage3DMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexStorage3DMultisample'\n"); }
  glTexStorage3DMultisample(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTextureView glTextureView = function void (GLuint a0, GLenum a1, GLuint a2, GLenum a3, GLuint a4, GLuint a5, GLuint a6, GLuint a7) nothrow {
  glTextureView = cast(glbfn_glTextureView)glGetProcAddress(`glTextureView`);
  if (glTextureView is null) assert(0, `OpenGL function 'glTextureView' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureView'\n"); }
  glTextureView(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glBindVertexBuffer glBindVertexBuffer = function void (GLuint a0, GLuint a1, GLintptr a2, GLsizei a3) nothrow {
  glBindVertexBuffer = cast(glbfn_glBindVertexBuffer)glGetProcAddress(`glBindVertexBuffer`);
  if (glBindVertexBuffer is null) assert(0, `OpenGL function 'glBindVertexBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindVertexBuffer'\n"); }
  glBindVertexBuffer(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribFormat glVertexAttribFormat = function void (GLuint a0, GLint a1, GLenum a2, GLboolean a3, GLuint a4) nothrow {
  glVertexAttribFormat = cast(glbfn_glVertexAttribFormat)glGetProcAddress(`glVertexAttribFormat`);
  if (glVertexAttribFormat is null) assert(0, `OpenGL function 'glVertexAttribFormat' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribFormat'\n"); }
  glVertexAttribFormat(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribIFormat glVertexAttribIFormat = function void (GLuint a0, GLint a1, GLenum a2, GLuint a3) nothrow {
  glVertexAttribIFormat = cast(glbfn_glVertexAttribIFormat)glGetProcAddress(`glVertexAttribIFormat`);
  if (glVertexAttribIFormat is null) assert(0, `OpenGL function 'glVertexAttribIFormat' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribIFormat'\n"); }
  glVertexAttribIFormat(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribLFormat glVertexAttribLFormat = function void (GLuint a0, GLint a1, GLenum a2, GLuint a3) nothrow {
  glVertexAttribLFormat = cast(glbfn_glVertexAttribLFormat)glGetProcAddress(`glVertexAttribLFormat`);
  if (glVertexAttribLFormat is null) assert(0, `OpenGL function 'glVertexAttribLFormat' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribLFormat'\n"); }
  glVertexAttribLFormat(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribBinding glVertexAttribBinding = function void (GLuint a0, GLuint a1) nothrow {
  glVertexAttribBinding = cast(glbfn_glVertexAttribBinding)glGetProcAddress(`glVertexAttribBinding`);
  if (glVertexAttribBinding is null) assert(0, `OpenGL function 'glVertexAttribBinding' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribBinding'\n"); }
  glVertexAttribBinding(a0,a1,);
};
__gshared glbfn_glVertexBindingDivisor glVertexBindingDivisor = function void (GLuint a0, GLuint a1) nothrow {
  glVertexBindingDivisor = cast(glbfn_glVertexBindingDivisor)glGetProcAddress(`glVertexBindingDivisor`);
  if (glVertexBindingDivisor is null) assert(0, `OpenGL function 'glVertexBindingDivisor' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexBindingDivisor'\n"); }
  glVertexBindingDivisor(a0,a1,);
};
__gshared glbfn_glDebugMessageControl glDebugMessageControl = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, const(GLuint)* a4, GLboolean a5) nothrow {
  glDebugMessageControl = cast(glbfn_glDebugMessageControl)glGetProcAddress(`glDebugMessageControl`);
  if (glDebugMessageControl is null) assert(0, `OpenGL function 'glDebugMessageControl' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageControl'\n"); }
  glDebugMessageControl(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glDebugMessageInsert glDebugMessageInsert = function void (GLenum a0, GLenum a1, GLuint a2, GLenum a3, GLsizei a4, const(GLchar)* a5) nothrow {
  glDebugMessageInsert = cast(glbfn_glDebugMessageInsert)glGetProcAddress(`glDebugMessageInsert`);
  if (glDebugMessageInsert is null) assert(0, `OpenGL function 'glDebugMessageInsert' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageInsert'\n"); }
  glDebugMessageInsert(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetDebugMessageLog glGetDebugMessageLog = function GLuint (GLuint a0, GLsizei a1, GLenum* a2, GLenum* a3, GLuint* a4, GLenum* a5, GLsizei* a6, GLchar* a7) nothrow {
  glGetDebugMessageLog = cast(glbfn_glGetDebugMessageLog)glGetProcAddress(`glGetDebugMessageLog`);
  if (glGetDebugMessageLog is null) assert(0, `OpenGL function 'glGetDebugMessageLog' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDebugMessageLog'\n"); }
  return glGetDebugMessageLog(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glPushDebugGroup glPushDebugGroup = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLchar)* a3) nothrow {
  glPushDebugGroup = cast(glbfn_glPushDebugGroup)glGetProcAddress(`glPushDebugGroup`);
  if (glPushDebugGroup is null) assert(0, `OpenGL function 'glPushDebugGroup' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushDebugGroup'\n"); }
  glPushDebugGroup(a0,a1,a2,a3,);
};
__gshared glbfn_glPopDebugGroup glPopDebugGroup = function void () nothrow {
  glPopDebugGroup = cast(glbfn_glPopDebugGroup)glGetProcAddress(`glPopDebugGroup`);
  if (glPopDebugGroup is null) assert(0, `OpenGL function 'glPopDebugGroup' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPopDebugGroup'\n"); }
  glPopDebugGroup();
};
__gshared glbfn_glObjectLabel glObjectLabel = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLchar)* a3) nothrow {
  glObjectLabel = cast(glbfn_glObjectLabel)glGetProcAddress(`glObjectLabel`);
  if (glObjectLabel is null) assert(0, `OpenGL function 'glObjectLabel' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glObjectLabel'\n"); }
  glObjectLabel(a0,a1,a2,a3,);
};
__gshared glbfn_glGetObjectLabel glGetObjectLabel = function void (GLenum a0, GLuint a1, GLsizei a2, GLsizei* a3, GLchar* a4) nothrow {
  glGetObjectLabel = cast(glbfn_glGetObjectLabel)glGetProcAddress(`glGetObjectLabel`);
  if (glGetObjectLabel is null) assert(0, `OpenGL function 'glGetObjectLabel' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectLabel'\n"); }
  glGetObjectLabel(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glObjectPtrLabel glObjectPtrLabel = function void (const(void)* a0, GLsizei a1, const(GLchar)* a2) nothrow {
  glObjectPtrLabel = cast(glbfn_glObjectPtrLabel)glGetProcAddress(`glObjectPtrLabel`);
  if (glObjectPtrLabel is null) assert(0, `OpenGL function 'glObjectPtrLabel' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glObjectPtrLabel'\n"); }
  glObjectPtrLabel(a0,a1,a2,);
};
__gshared glbfn_glGetObjectPtrLabel glGetObjectPtrLabel = function void (const(void)* a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetObjectPtrLabel = cast(glbfn_glGetObjectPtrLabel)glGetProcAddress(`glGetObjectPtrLabel`);
  if (glGetObjectPtrLabel is null) assert(0, `OpenGL function 'glGetObjectPtrLabel' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectPtrLabel'\n"); }
  glGetObjectPtrLabel(a0,a1,a2,a3,);
};
__gshared glbfn_glBufferStorage glBufferStorage = function void (GLenum a0, GLsizeiptr a1, const(void)* a2, GLbitfield a3) nothrow {
  glBufferStorage = cast(glbfn_glBufferStorage)glGetProcAddress(`glBufferStorage`);
  if (glBufferStorage is null) assert(0, `OpenGL function 'glBufferStorage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferStorage'\n"); }
  glBufferStorage(a0,a1,a2,a3,);
};
__gshared glbfn_glClearTexImage glClearTexImage = function void (GLuint a0, GLint a1, GLenum a2, GLenum a3, const(void)* a4) nothrow {
  glClearTexImage = cast(glbfn_glClearTexImage)glGetProcAddress(`glClearTexImage`);
  if (glClearTexImage is null) assert(0, `OpenGL function 'glClearTexImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearTexImage'\n"); }
  glClearTexImage(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glClearTexSubImage glClearTexSubImage = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLenum a9, const(void)* a10) nothrow {
  glClearTexSubImage = cast(glbfn_glClearTexSubImage)glGetProcAddress(`glClearTexSubImage`);
  if (glClearTexSubImage is null) assert(0, `OpenGL function 'glClearTexSubImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearTexSubImage'\n"); }
  glClearTexSubImage(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glBindBuffersBase glBindBuffersBase = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glBindBuffersBase = cast(glbfn_glBindBuffersBase)glGetProcAddress(`glBindBuffersBase`);
  if (glBindBuffersBase is null) assert(0, `OpenGL function 'glBindBuffersBase' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBuffersBase'\n"); }
  glBindBuffersBase(a0,a1,a2,a3,);
};
__gshared glbfn_glBindBuffersRange glBindBuffersRange = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLuint)* a3, const(GLintptr)* a4, const(GLsizeiptr)* a5) nothrow {
  glBindBuffersRange = cast(glbfn_glBindBuffersRange)glGetProcAddress(`glBindBuffersRange`);
  if (glBindBuffersRange is null) assert(0, `OpenGL function 'glBindBuffersRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBuffersRange'\n"); }
  glBindBuffersRange(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glBindTextures glBindTextures = function void (GLuint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glBindTextures = cast(glbfn_glBindTextures)glGetProcAddress(`glBindTextures`);
  if (glBindTextures is null) assert(0, `OpenGL function 'glBindTextures' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTextures'\n"); }
  glBindTextures(a0,a1,a2,);
};
__gshared glbfn_glBindSamplers glBindSamplers = function void (GLuint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glBindSamplers = cast(glbfn_glBindSamplers)glGetProcAddress(`glBindSamplers`);
  if (glBindSamplers is null) assert(0, `OpenGL function 'glBindSamplers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindSamplers'\n"); }
  glBindSamplers(a0,a1,a2,);
};
__gshared glbfn_glBindImageTextures glBindImageTextures = function void (GLuint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glBindImageTextures = cast(glbfn_glBindImageTextures)glGetProcAddress(`glBindImageTextures`);
  if (glBindImageTextures is null) assert(0, `OpenGL function 'glBindImageTextures' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindImageTextures'\n"); }
  glBindImageTextures(a0,a1,a2,);
};
__gshared glbfn_glBindVertexBuffers glBindVertexBuffers = function void (GLuint a0, GLsizei a1, const(GLuint)* a2, const(GLintptr)* a3, const(GLsizei)* a4) nothrow {
  glBindVertexBuffers = cast(glbfn_glBindVertexBuffers)glGetProcAddress(`glBindVertexBuffers`);
  if (glBindVertexBuffers is null) assert(0, `OpenGL function 'glBindVertexBuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindVertexBuffers'\n"); }
  glBindVertexBuffers(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glClipControl glClipControl = function void (GLenum a0, GLenum a1) nothrow {
  glClipControl = cast(glbfn_glClipControl)glGetProcAddress(`glClipControl`);
  if (glClipControl is null) assert(0, `OpenGL function 'glClipControl' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClipControl'\n"); }
  glClipControl(a0,a1,);
};
__gshared glbfn_glCreateTransformFeedbacks glCreateTransformFeedbacks = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateTransformFeedbacks = cast(glbfn_glCreateTransformFeedbacks)glGetProcAddress(`glCreateTransformFeedbacks`);
  if (glCreateTransformFeedbacks is null) assert(0, `OpenGL function 'glCreateTransformFeedbacks' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateTransformFeedbacks'\n"); }
  glCreateTransformFeedbacks(a0,a1,);
};
__gshared glbfn_glTransformFeedbackBufferBase glTransformFeedbackBufferBase = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glTransformFeedbackBufferBase = cast(glbfn_glTransformFeedbackBufferBase)glGetProcAddress(`glTransformFeedbackBufferBase`);
  if (glTransformFeedbackBufferBase is null) assert(0, `OpenGL function 'glTransformFeedbackBufferBase' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformFeedbackBufferBase'\n"); }
  glTransformFeedbackBufferBase(a0,a1,a2,);
};
__gshared glbfn_glTransformFeedbackBufferRange glTransformFeedbackBufferRange = function void (GLuint a0, GLuint a1, GLuint a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glTransformFeedbackBufferRange = cast(glbfn_glTransformFeedbackBufferRange)glGetProcAddress(`glTransformFeedbackBufferRange`);
  if (glTransformFeedbackBufferRange is null) assert(0, `OpenGL function 'glTransformFeedbackBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformFeedbackBufferRange'\n"); }
  glTransformFeedbackBufferRange(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetTransformFeedbackiv glGetTransformFeedbackiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetTransformFeedbackiv = cast(glbfn_glGetTransformFeedbackiv)glGetProcAddress(`glGetTransformFeedbackiv`);
  if (glGetTransformFeedbackiv is null) assert(0, `OpenGL function 'glGetTransformFeedbackiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTransformFeedbackiv'\n"); }
  glGetTransformFeedbackiv(a0,a1,a2,);
};
__gshared glbfn_glGetTransformFeedbacki_v glGetTransformFeedbacki_v = function void (GLuint a0, GLenum a1, GLuint a2, GLint* a3) nothrow {
  glGetTransformFeedbacki_v = cast(glbfn_glGetTransformFeedbacki_v)glGetProcAddress(`glGetTransformFeedbacki_v`);
  if (glGetTransformFeedbacki_v is null) assert(0, `OpenGL function 'glGetTransformFeedbacki_v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTransformFeedbacki_v'\n"); }
  glGetTransformFeedbacki_v(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTransformFeedbacki64_v glGetTransformFeedbacki64_v = function void (GLuint a0, GLenum a1, GLuint a2, GLint64* a3) nothrow {
  glGetTransformFeedbacki64_v = cast(glbfn_glGetTransformFeedbacki64_v)glGetProcAddress(`glGetTransformFeedbacki64_v`);
  if (glGetTransformFeedbacki64_v is null) assert(0, `OpenGL function 'glGetTransformFeedbacki64_v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTransformFeedbacki64_v'\n"); }
  glGetTransformFeedbacki64_v(a0,a1,a2,a3,);
};
__gshared glbfn_glCreateBuffers glCreateBuffers = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateBuffers = cast(glbfn_glCreateBuffers)glGetProcAddress(`glCreateBuffers`);
  if (glCreateBuffers is null) assert(0, `OpenGL function 'glCreateBuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateBuffers'\n"); }
  glCreateBuffers(a0,a1,);
};
__gshared glbfn_glNamedBufferStorage glNamedBufferStorage = function void (GLuint a0, GLsizeiptr a1, const(void)* a2, GLbitfield a3) nothrow {
  glNamedBufferStorage = cast(glbfn_glNamedBufferStorage)glGetProcAddress(`glNamedBufferStorage`);
  if (glNamedBufferStorage is null) assert(0, `OpenGL function 'glNamedBufferStorage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferStorage'\n"); }
  glNamedBufferStorage(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedBufferData glNamedBufferData = function void (GLuint a0, GLsizeiptr a1, const(void)* a2, GLenum a3) nothrow {
  glNamedBufferData = cast(glbfn_glNamedBufferData)glGetProcAddress(`glNamedBufferData`);
  if (glNamedBufferData is null) assert(0, `OpenGL function 'glNamedBufferData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferData'\n"); }
  glNamedBufferData(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedBufferSubData glNamedBufferSubData = function void (GLuint a0, GLintptr a1, GLsizeiptr a2, const(void)* a3) nothrow {
  glNamedBufferSubData = cast(glbfn_glNamedBufferSubData)glGetProcAddress(`glNamedBufferSubData`);
  if (glNamedBufferSubData is null) assert(0, `OpenGL function 'glNamedBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferSubData'\n"); }
  glNamedBufferSubData(a0,a1,a2,a3,);
};
__gshared glbfn_glCopyNamedBufferSubData glCopyNamedBufferSubData = function void (GLuint a0, GLuint a1, GLintptr a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glCopyNamedBufferSubData = cast(glbfn_glCopyNamedBufferSubData)glGetProcAddress(`glCopyNamedBufferSubData`);
  if (glCopyNamedBufferSubData is null) assert(0, `OpenGL function 'glCopyNamedBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyNamedBufferSubData'\n"); }
  glCopyNamedBufferSubData(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glClearNamedBufferData glClearNamedBufferData = function void (GLuint a0, GLenum a1, GLenum a2, GLenum a3, const(void)* a4) nothrow {
  glClearNamedBufferData = cast(glbfn_glClearNamedBufferData)glGetProcAddress(`glClearNamedBufferData`);
  if (glClearNamedBufferData is null) assert(0, `OpenGL function 'glClearNamedBufferData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedBufferData'\n"); }
  glClearNamedBufferData(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glClearNamedBufferSubData glClearNamedBufferSubData = function void (GLuint a0, GLenum a1, GLintptr a2, GLsizeiptr a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glClearNamedBufferSubData = cast(glbfn_glClearNamedBufferSubData)glGetProcAddress(`glClearNamedBufferSubData`);
  if (glClearNamedBufferSubData is null) assert(0, `OpenGL function 'glClearNamedBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedBufferSubData'\n"); }
  glClearNamedBufferSubData(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMapNamedBuffer glMapNamedBuffer = function void* (GLuint a0, GLenum a1) nothrow {
  glMapNamedBuffer = cast(glbfn_glMapNamedBuffer)glGetProcAddress(`glMapNamedBuffer`);
  if (glMapNamedBuffer is null) assert(0, `OpenGL function 'glMapNamedBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapNamedBuffer'\n"); }
  return glMapNamedBuffer(a0,a1,);
};
__gshared glbfn_glMapNamedBufferRange glMapNamedBufferRange = function void* (GLuint a0, GLintptr a1, GLsizeiptr a2, GLbitfield a3) nothrow {
  glMapNamedBufferRange = cast(glbfn_glMapNamedBufferRange)glGetProcAddress(`glMapNamedBufferRange`);
  if (glMapNamedBufferRange is null) assert(0, `OpenGL function 'glMapNamedBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapNamedBufferRange'\n"); }
  return glMapNamedBufferRange(a0,a1,a2,a3,);
};
__gshared glbfn_glUnmapNamedBuffer glUnmapNamedBuffer = function GLboolean (GLuint a0) nothrow {
  glUnmapNamedBuffer = cast(glbfn_glUnmapNamedBuffer)glGetProcAddress(`glUnmapNamedBuffer`);
  if (glUnmapNamedBuffer is null) assert(0, `OpenGL function 'glUnmapNamedBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUnmapNamedBuffer'\n"); }
  return glUnmapNamedBuffer(a0,);
};
__gshared glbfn_glFlushMappedNamedBufferRange glFlushMappedNamedBufferRange = function void (GLuint a0, GLintptr a1, GLsizeiptr a2) nothrow {
  glFlushMappedNamedBufferRange = cast(glbfn_glFlushMappedNamedBufferRange)glGetProcAddress(`glFlushMappedNamedBufferRange`);
  if (glFlushMappedNamedBufferRange is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushMappedNamedBufferRange'\n"); }
  glFlushMappedNamedBufferRange(a0,a1,a2,);
};
__gshared glbfn_glGetNamedBufferParameteriv glGetNamedBufferParameteriv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetNamedBufferParameteriv = cast(glbfn_glGetNamedBufferParameteriv)glGetProcAddress(`glGetNamedBufferParameteriv`);
  if (glGetNamedBufferParameteriv is null) assert(0, `OpenGL function 'glGetNamedBufferParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferParameteriv'\n"); }
  glGetNamedBufferParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetNamedBufferParameteri64v glGetNamedBufferParameteri64v = function void (GLuint a0, GLenum a1, GLint64* a2) nothrow {
  glGetNamedBufferParameteri64v = cast(glbfn_glGetNamedBufferParameteri64v)glGetProcAddress(`glGetNamedBufferParameteri64v`);
  if (glGetNamedBufferParameteri64v is null) assert(0, `OpenGL function 'glGetNamedBufferParameteri64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferParameteri64v'\n"); }
  glGetNamedBufferParameteri64v(a0,a1,a2,);
};
__gshared glbfn_glGetNamedBufferPointerv glGetNamedBufferPointerv = function void (GLuint a0, GLenum a1, void** a2) nothrow {
  glGetNamedBufferPointerv = cast(glbfn_glGetNamedBufferPointerv)glGetProcAddress(`glGetNamedBufferPointerv`);
  if (glGetNamedBufferPointerv is null) assert(0, `OpenGL function 'glGetNamedBufferPointerv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferPointerv'\n"); }
  glGetNamedBufferPointerv(a0,a1,a2,);
};
__gshared glbfn_glGetNamedBufferSubData glGetNamedBufferSubData = function void (GLuint a0, GLintptr a1, GLsizeiptr a2, void* a3) nothrow {
  glGetNamedBufferSubData = cast(glbfn_glGetNamedBufferSubData)glGetProcAddress(`glGetNamedBufferSubData`);
  if (glGetNamedBufferSubData is null) assert(0, `OpenGL function 'glGetNamedBufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferSubData'\n"); }
  glGetNamedBufferSubData(a0,a1,a2,a3,);
};
__gshared glbfn_glCreateFramebuffers glCreateFramebuffers = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateFramebuffers = cast(glbfn_glCreateFramebuffers)glGetProcAddress(`glCreateFramebuffers`);
  if (glCreateFramebuffers is null) assert(0, `OpenGL function 'glCreateFramebuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateFramebuffers'\n"); }
  glCreateFramebuffers(a0,a1,);
};
__gshared glbfn_glNamedFramebufferRenderbuffer glNamedFramebufferRenderbuffer = function void (GLuint a0, GLenum a1, GLenum a2, GLuint a3) nothrow {
  glNamedFramebufferRenderbuffer = cast(glbfn_glNamedFramebufferRenderbuffer)glGetProcAddress(`glNamedFramebufferRenderbuffer`);
  if (glNamedFramebufferRenderbuffer is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferRenderbuffer'\n"); }
  glNamedFramebufferRenderbuffer(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedFramebufferParameteri glNamedFramebufferParameteri = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glNamedFramebufferParameteri = cast(glbfn_glNamedFramebufferParameteri)glGetProcAddress(`glNamedFramebufferParameteri`);
  if (glNamedFramebufferParameteri is null) assert(0, `OpenGL function 'glNamedFramebufferParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferParameteri'\n"); }
  glNamedFramebufferParameteri(a0,a1,a2,);
};
__gshared glbfn_glNamedFramebufferTexture glNamedFramebufferTexture = function void (GLuint a0, GLenum a1, GLuint a2, GLint a3) nothrow {
  glNamedFramebufferTexture = cast(glbfn_glNamedFramebufferTexture)glGetProcAddress(`glNamedFramebufferTexture`);
  if (glNamedFramebufferTexture is null) assert(0, `OpenGL function 'glNamedFramebufferTexture' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTexture'\n"); }
  glNamedFramebufferTexture(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedFramebufferTextureLayer glNamedFramebufferTextureLayer = function void (GLuint a0, GLenum a1, GLuint a2, GLint a3, GLint a4) nothrow {
  glNamedFramebufferTextureLayer = cast(glbfn_glNamedFramebufferTextureLayer)glGetProcAddress(`glNamedFramebufferTextureLayer`);
  if (glNamedFramebufferTextureLayer is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTextureLayer'\n"); }
  glNamedFramebufferTextureLayer(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedFramebufferDrawBuffer glNamedFramebufferDrawBuffer = function void (GLuint a0, GLenum a1) nothrow {
  glNamedFramebufferDrawBuffer = cast(glbfn_glNamedFramebufferDrawBuffer)glGetProcAddress(`glNamedFramebufferDrawBuffer`);
  if (glNamedFramebufferDrawBuffer is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferDrawBuffer'\n"); }
  glNamedFramebufferDrawBuffer(a0,a1,);
};
__gshared glbfn_glNamedFramebufferDrawBuffers glNamedFramebufferDrawBuffers = function void (GLuint a0, GLsizei a1, const(GLenum)* a2) nothrow {
  glNamedFramebufferDrawBuffers = cast(glbfn_glNamedFramebufferDrawBuffers)glGetProcAddress(`glNamedFramebufferDrawBuffers`);
  if (glNamedFramebufferDrawBuffers is null) assert(0, `OpenGL function 'glNamedFramebufferDrawBuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferDrawBuffers'\n"); }
  glNamedFramebufferDrawBuffers(a0,a1,a2,);
};
__gshared glbfn_glNamedFramebufferReadBuffer glNamedFramebufferReadBuffer = function void (GLuint a0, GLenum a1) nothrow {
  glNamedFramebufferReadBuffer = cast(glbfn_glNamedFramebufferReadBuffer)glGetProcAddress(`glNamedFramebufferReadBuffer`);
  if (glNamedFramebufferReadBuffer is null) assert(0, `OpenGL function 'glNamedFramebufferReadBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferReadBuffer'\n"); }
  glNamedFramebufferReadBuffer(a0,a1,);
};
__gshared glbfn_glInvalidateNamedFramebufferData glInvalidateNamedFramebufferData = function void (GLuint a0, GLsizei a1, const(GLenum)* a2) nothrow {
  glInvalidateNamedFramebufferData = cast(glbfn_glInvalidateNamedFramebufferData)glGetProcAddress(`glInvalidateNamedFramebufferData`);
  if (glInvalidateNamedFramebufferData is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateNamedFramebufferData'\n"); }
  glInvalidateNamedFramebufferData(a0,a1,a2,);
};
__gshared glbfn_glInvalidateNamedFramebufferSubData glInvalidateNamedFramebufferSubData = function void (GLuint a0, GLsizei a1, const(GLenum)* a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6) nothrow {
  glInvalidateNamedFramebufferSubData = cast(glbfn_glInvalidateNamedFramebufferSubData)glGetProcAddress(`glInvalidateNamedFramebufferSubData`);
  if (glInvalidateNamedFramebufferSubData is null) assert(0, `OpenGL function 'glInvalidateNamedFramebufferSubData' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInvalidateNamedFramebufferSubData'\n"); }
  glInvalidateNamedFramebufferSubData(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glClearNamedFramebufferiv glClearNamedFramebufferiv = function void (GLuint a0, GLenum a1, GLint a2, const(GLint)* a3) nothrow {
  glClearNamedFramebufferiv = cast(glbfn_glClearNamedFramebufferiv)glGetProcAddress(`glClearNamedFramebufferiv`);
  if (glClearNamedFramebufferiv is null) assert(0, `OpenGL function 'glClearNamedFramebufferiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedFramebufferiv'\n"); }
  glClearNamedFramebufferiv(a0,a1,a2,a3,);
};
__gshared glbfn_glClearNamedFramebufferuiv glClearNamedFramebufferuiv = function void (GLuint a0, GLenum a1, GLint a2, const(GLuint)* a3) nothrow {
  glClearNamedFramebufferuiv = cast(glbfn_glClearNamedFramebufferuiv)glGetProcAddress(`glClearNamedFramebufferuiv`);
  if (glClearNamedFramebufferuiv is null) assert(0, `OpenGL function 'glClearNamedFramebufferuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedFramebufferuiv'\n"); }
  glClearNamedFramebufferuiv(a0,a1,a2,a3,);
};
__gshared glbfn_glClearNamedFramebufferfv glClearNamedFramebufferfv = function void (GLuint a0, GLenum a1, GLint a2, const(GLfloat)* a3) nothrow {
  glClearNamedFramebufferfv = cast(glbfn_glClearNamedFramebufferfv)glGetProcAddress(`glClearNamedFramebufferfv`);
  if (glClearNamedFramebufferfv is null) assert(0, `OpenGL function 'glClearNamedFramebufferfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedFramebufferfv'\n"); }
  glClearNamedFramebufferfv(a0,a1,a2,a3,);
};
__gshared glbfn_glClearNamedFramebufferfi glClearNamedFramebufferfi = function void (GLuint a0, GLenum a1, GLint a2, GLfloat a3, GLint a4) nothrow {
  glClearNamedFramebufferfi = cast(glbfn_glClearNamedFramebufferfi)glGetProcAddress(`glClearNamedFramebufferfi`);
  if (glClearNamedFramebufferfi is null) assert(0, `OpenGL function 'glClearNamedFramebufferfi' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedFramebufferfi'\n"); }
  glClearNamedFramebufferfi(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBlitNamedFramebuffer glBlitNamedFramebuffer = function void (GLuint a0, GLuint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLint a7, GLint a8, GLint a9, GLbitfield a10, GLenum a11) nothrow {
  glBlitNamedFramebuffer = cast(glbfn_glBlitNamedFramebuffer)glGetProcAddress(`glBlitNamedFramebuffer`);
  if (glBlitNamedFramebuffer is null) assert(0, `OpenGL function 'glBlitNamedFramebuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlitNamedFramebuffer'\n"); }
  glBlitNamedFramebuffer(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glCheckNamedFramebufferStatus glCheckNamedFramebufferStatus = function GLenum (GLuint a0, GLenum a1) nothrow {
  glCheckNamedFramebufferStatus = cast(glbfn_glCheckNamedFramebufferStatus)glGetProcAddress(`glCheckNamedFramebufferStatus`);
  if (glCheckNamedFramebufferStatus is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatus' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCheckNamedFramebufferStatus'\n"); }
  return glCheckNamedFramebufferStatus(a0,a1,);
};
__gshared glbfn_glGetNamedFramebufferParameteriv glGetNamedFramebufferParameteriv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetNamedFramebufferParameteriv = cast(glbfn_glGetNamedFramebufferParameteriv)glGetProcAddress(`glGetNamedFramebufferParameteriv`);
  if (glGetNamedFramebufferParameteriv is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedFramebufferParameteriv'\n"); }
  glGetNamedFramebufferParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetNamedFramebufferAttachmentParameteriv glGetNamedFramebufferAttachmentParameteriv = function void (GLuint a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetNamedFramebufferAttachmentParameteriv = cast(glbfn_glGetNamedFramebufferAttachmentParameteriv)glGetProcAddress(`glGetNamedFramebufferAttachmentParameteriv`);
  if (glGetNamedFramebufferAttachmentParameteriv is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedFramebufferAttachmentParameteriv'\n"); }
  glGetNamedFramebufferAttachmentParameteriv(a0,a1,a2,a3,);
};
__gshared glbfn_glCreateRenderbuffers glCreateRenderbuffers = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateRenderbuffers = cast(glbfn_glCreateRenderbuffers)glGetProcAddress(`glCreateRenderbuffers`);
  if (glCreateRenderbuffers is null) assert(0, `OpenGL function 'glCreateRenderbuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateRenderbuffers'\n"); }
  glCreateRenderbuffers(a0,a1,);
};
__gshared glbfn_glNamedRenderbufferStorage glNamedRenderbufferStorage = function void (GLuint a0, GLenum a1, GLsizei a2, GLsizei a3) nothrow {
  glNamedRenderbufferStorage = cast(glbfn_glNamedRenderbufferStorage)glGetProcAddress(`glNamedRenderbufferStorage`);
  if (glNamedRenderbufferStorage is null) assert(0, `OpenGL function 'glNamedRenderbufferStorage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedRenderbufferStorage'\n"); }
  glNamedRenderbufferStorage(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedRenderbufferStorageMultisample glNamedRenderbufferStorageMultisample = function void (GLuint a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4) nothrow {
  glNamedRenderbufferStorageMultisample = cast(glbfn_glNamedRenderbufferStorageMultisample)glGetProcAddress(`glNamedRenderbufferStorageMultisample`);
  if (glNamedRenderbufferStorageMultisample is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedRenderbufferStorageMultisample'\n"); }
  glNamedRenderbufferStorageMultisample(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetNamedRenderbufferParameteriv glGetNamedRenderbufferParameteriv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetNamedRenderbufferParameteriv = cast(glbfn_glGetNamedRenderbufferParameteriv)glGetProcAddress(`glGetNamedRenderbufferParameteriv`);
  if (glGetNamedRenderbufferParameteriv is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedRenderbufferParameteriv'\n"); }
  glGetNamedRenderbufferParameteriv(a0,a1,a2,);
};
__gshared glbfn_glCreateTextures glCreateTextures = function void (GLenum a0, GLsizei a1, GLuint* a2) nothrow {
  glCreateTextures = cast(glbfn_glCreateTextures)glGetProcAddress(`glCreateTextures`);
  if (glCreateTextures is null) assert(0, `OpenGL function 'glCreateTextures' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateTextures'\n"); }
  glCreateTextures(a0,a1,a2,);
};
__gshared glbfn_glTextureBuffer glTextureBuffer = function void (GLuint a0, GLenum a1, GLuint a2) nothrow {
  glTextureBuffer = cast(glbfn_glTextureBuffer)glGetProcAddress(`glTextureBuffer`);
  if (glTextureBuffer is null) assert(0, `OpenGL function 'glTextureBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureBuffer'\n"); }
  glTextureBuffer(a0,a1,a2,);
};
__gshared glbfn_glTextureBufferRange glTextureBufferRange = function void (GLuint a0, GLenum a1, GLuint a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glTextureBufferRange = cast(glbfn_glTextureBufferRange)glGetProcAddress(`glTextureBufferRange`);
  if (glTextureBufferRange is null) assert(0, `OpenGL function 'glTextureBufferRange' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureBufferRange'\n"); }
  glTextureBufferRange(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTextureStorage1D glTextureStorage1D = function void (GLuint a0, GLsizei a1, GLenum a2, GLsizei a3) nothrow {
  glTextureStorage1D = cast(glbfn_glTextureStorage1D)glGetProcAddress(`glTextureStorage1D`);
  if (glTextureStorage1D is null) assert(0, `OpenGL function 'glTextureStorage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage1D'\n"); }
  glTextureStorage1D(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureStorage2D glTextureStorage2D = function void (GLuint a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4) nothrow {
  glTextureStorage2D = cast(glbfn_glTextureStorage2D)glGetProcAddress(`glTextureStorage2D`);
  if (glTextureStorage2D is null) assert(0, `OpenGL function 'glTextureStorage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage2D'\n"); }
  glTextureStorage2D(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTextureStorage3D glTextureStorage3D = function void (GLuint a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5) nothrow {
  glTextureStorage3D = cast(glbfn_glTextureStorage3D)glGetProcAddress(`glTextureStorage3D`);
  if (glTextureStorage3D is null) assert(0, `OpenGL function 'glTextureStorage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage3D'\n"); }
  glTextureStorage3D(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTextureStorage2DMultisample glTextureStorage2DMultisample = function void (GLuint a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLboolean a5) nothrow {
  glTextureStorage2DMultisample = cast(glbfn_glTextureStorage2DMultisample)glGetProcAddress(`glTextureStorage2DMultisample`);
  if (glTextureStorage2DMultisample is null) assert(0, `OpenGL function 'glTextureStorage2DMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage2DMultisample'\n"); }
  glTextureStorage2DMultisample(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTextureStorage3DMultisample glTextureStorage3DMultisample = function void (GLuint a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLboolean a6) nothrow {
  glTextureStorage3DMultisample = cast(glbfn_glTextureStorage3DMultisample)glGetProcAddress(`glTextureStorage3DMultisample`);
  if (glTextureStorage3DMultisample is null) assert(0, `OpenGL function 'glTextureStorage3DMultisample' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage3DMultisample'\n"); }
  glTextureStorage3DMultisample(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTextureSubImage1D glTextureSubImage1D = function void (GLuint a0, GLint a1, GLint a2, GLsizei a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glTextureSubImage1D = cast(glbfn_glTextureSubImage1D)glGetProcAddress(`glTextureSubImage1D`);
  if (glTextureSubImage1D is null) assert(0, `OpenGL function 'glTextureSubImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureSubImage1D'\n"); }
  glTextureSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTextureSubImage2D glTextureSubImage2D = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLenum a6, GLenum a7, const(void)* a8) nothrow {
  glTextureSubImage2D = cast(glbfn_glTextureSubImage2D)glGetProcAddress(`glTextureSubImage2D`);
  if (glTextureSubImage2D is null) assert(0, `OpenGL function 'glTextureSubImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureSubImage2D'\n"); }
  glTextureSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glTextureSubImage3D glTextureSubImage3D = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLenum a9, const(void)* a10) nothrow {
  glTextureSubImage3D = cast(glbfn_glTextureSubImage3D)glGetProcAddress(`glTextureSubImage3D`);
  if (glTextureSubImage3D is null) assert(0, `OpenGL function 'glTextureSubImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureSubImage3D'\n"); }
  glTextureSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glCompressedTextureSubImage1D glCompressedTextureSubImage1D = function void (GLuint a0, GLint a1, GLint a2, GLsizei a3, GLenum a4, GLsizei a5, const(void)* a6) nothrow {
  glCompressedTextureSubImage1D = cast(glbfn_glCompressedTextureSubImage1D)glGetProcAddress(`glCompressedTextureSubImage1D`);
  if (glCompressedTextureSubImage1D is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureSubImage1D'\n"); }
  glCompressedTextureSubImage1D(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCompressedTextureSubImage2D glCompressedTextureSubImage2D = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLenum a6, GLsizei a7, const(void)* a8) nothrow {
  glCompressedTextureSubImage2D = cast(glbfn_glCompressedTextureSubImage2D)glGetProcAddress(`glCompressedTextureSubImage2D`);
  if (glCompressedTextureSubImage2D is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureSubImage2D'\n"); }
  glCompressedTextureSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCompressedTextureSubImage3D glCompressedTextureSubImage3D = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLsizei a9, const(void)* a10) nothrow {
  glCompressedTextureSubImage3D = cast(glbfn_glCompressedTextureSubImage3D)glGetProcAddress(`glCompressedTextureSubImage3D`);
  if (glCompressedTextureSubImage3D is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureSubImage3D'\n"); }
  glCompressedTextureSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glCopyTextureSubImage1D glCopyTextureSubImage1D = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5) nothrow {
  glCopyTextureSubImage1D = cast(glbfn_glCopyTextureSubImage1D)glGetProcAddress(`glCopyTextureSubImage1D`);
  if (glCopyTextureSubImage1D is null) assert(0, `OpenGL function 'glCopyTextureSubImage1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureSubImage1D'\n"); }
  glCopyTextureSubImage1D(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glCopyTextureSubImage2D glCopyTextureSubImage2D = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7) nothrow {
  glCopyTextureSubImage2D = cast(glbfn_glCopyTextureSubImage2D)glGetProcAddress(`glCopyTextureSubImage2D`);
  if (glCopyTextureSubImage2D is null) assert(0, `OpenGL function 'glCopyTextureSubImage2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureSubImage2D'\n"); }
  glCopyTextureSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCopyTextureSubImage3D glCopyTextureSubImage3D = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLsizei a7, GLsizei a8) nothrow {
  glCopyTextureSubImage3D = cast(glbfn_glCopyTextureSubImage3D)glGetProcAddress(`glCopyTextureSubImage3D`);
  if (glCopyTextureSubImage3D is null) assert(0, `OpenGL function 'glCopyTextureSubImage3D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureSubImage3D'\n"); }
  glCopyTextureSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glTextureParameterf glTextureParameterf = function void (GLuint a0, GLenum a1, GLfloat a2) nothrow {
  glTextureParameterf = cast(glbfn_glTextureParameterf)glGetProcAddress(`glTextureParameterf`);
  if (glTextureParameterf is null) assert(0, `OpenGL function 'glTextureParameterf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterf'\n"); }
  glTextureParameterf(a0,a1,a2,);
};
__gshared glbfn_glTextureParameterfv glTextureParameterfv = function void (GLuint a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glTextureParameterfv = cast(glbfn_glTextureParameterfv)glGetProcAddress(`glTextureParameterfv`);
  if (glTextureParameterfv is null) assert(0, `OpenGL function 'glTextureParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterfv'\n"); }
  glTextureParameterfv(a0,a1,a2,);
};
__gshared glbfn_glTextureParameteri glTextureParameteri = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glTextureParameteri = cast(glbfn_glTextureParameteri)glGetProcAddress(`glTextureParameteri`);
  if (glTextureParameteri is null) assert(0, `OpenGL function 'glTextureParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameteri'\n"); }
  glTextureParameteri(a0,a1,a2,);
};
__gshared glbfn_glTextureParameterIiv glTextureParameterIiv = function void (GLuint a0, GLenum a1, const(GLint)* a2) nothrow {
  glTextureParameterIiv = cast(glbfn_glTextureParameterIiv)glGetProcAddress(`glTextureParameterIiv`);
  if (glTextureParameterIiv is null) assert(0, `OpenGL function 'glTextureParameterIiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterIiv'\n"); }
  glTextureParameterIiv(a0,a1,a2,);
};
__gshared glbfn_glTextureParameterIuiv glTextureParameterIuiv = function void (GLuint a0, GLenum a1, const(GLuint)* a2) nothrow {
  glTextureParameterIuiv = cast(glbfn_glTextureParameterIuiv)glGetProcAddress(`glTextureParameterIuiv`);
  if (glTextureParameterIuiv is null) assert(0, `OpenGL function 'glTextureParameterIuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterIuiv'\n"); }
  glTextureParameterIuiv(a0,a1,a2,);
};
__gshared glbfn_glTextureParameteriv glTextureParameteriv = function void (GLuint a0, GLenum a1, const(GLint)* a2) nothrow {
  glTextureParameteriv = cast(glbfn_glTextureParameteriv)glGetProcAddress(`glTextureParameteriv`);
  if (glTextureParameteriv is null) assert(0, `OpenGL function 'glTextureParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameteriv'\n"); }
  glTextureParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGenerateTextureMipmap glGenerateTextureMipmap = function void (GLuint a0) nothrow {
  glGenerateTextureMipmap = cast(glbfn_glGenerateTextureMipmap)glGetProcAddress(`glGenerateTextureMipmap`);
  if (glGenerateTextureMipmap is null) assert(0, `OpenGL function 'glGenerateTextureMipmap' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenerateTextureMipmap'\n"); }
  glGenerateTextureMipmap(a0,);
};
__gshared glbfn_glBindTextureUnit glBindTextureUnit = function void (GLuint a0, GLuint a1) nothrow {
  glBindTextureUnit = cast(glbfn_glBindTextureUnit)glGetProcAddress(`glBindTextureUnit`);
  if (glBindTextureUnit is null) assert(0, `OpenGL function 'glBindTextureUnit' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTextureUnit'\n"); }
  glBindTextureUnit(a0,a1,);
};
__gshared glbfn_glGetTextureImage glGetTextureImage = function void (GLuint a0, GLint a1, GLenum a2, GLenum a3, GLsizei a4, void* a5) nothrow {
  glGetTextureImage = cast(glbfn_glGetTextureImage)glGetProcAddress(`glGetTextureImage`);
  if (glGetTextureImage is null) assert(0, `OpenGL function 'glGetTextureImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureImage'\n"); }
  glGetTextureImage(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetCompressedTextureImage glGetCompressedTextureImage = function void (GLuint a0, GLint a1, GLsizei a2, void* a3) nothrow {
  glGetCompressedTextureImage = cast(glbfn_glGetCompressedTextureImage)glGetProcAddress(`glGetCompressedTextureImage`);
  if (glGetCompressedTextureImage is null) assert(0, `OpenGL function 'glGetCompressedTextureImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCompressedTextureImage'\n"); }
  glGetCompressedTextureImage(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTextureLevelParameterfv glGetTextureLevelParameterfv = function void (GLuint a0, GLint a1, GLenum a2, GLfloat* a3) nothrow {
  glGetTextureLevelParameterfv = cast(glbfn_glGetTextureLevelParameterfv)glGetProcAddress(`glGetTextureLevelParameterfv`);
  if (glGetTextureLevelParameterfv is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureLevelParameterfv'\n"); }
  glGetTextureLevelParameterfv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTextureLevelParameteriv glGetTextureLevelParameteriv = function void (GLuint a0, GLint a1, GLenum a2, GLint* a3) nothrow {
  glGetTextureLevelParameteriv = cast(glbfn_glGetTextureLevelParameteriv)glGetProcAddress(`glGetTextureLevelParameteriv`);
  if (glGetTextureLevelParameteriv is null) assert(0, `OpenGL function 'glGetTextureLevelParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureLevelParameteriv'\n"); }
  glGetTextureLevelParameteriv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTextureParameterfv glGetTextureParameterfv = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetTextureParameterfv = cast(glbfn_glGetTextureParameterfv)glGetProcAddress(`glGetTextureParameterfv`);
  if (glGetTextureParameterfv is null) assert(0, `OpenGL function 'glGetTextureParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameterfv'\n"); }
  glGetTextureParameterfv(a0,a1,a2,);
};
__gshared glbfn_glGetTextureParameterIiv glGetTextureParameterIiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetTextureParameterIiv = cast(glbfn_glGetTextureParameterIiv)glGetProcAddress(`glGetTextureParameterIiv`);
  if (glGetTextureParameterIiv is null) assert(0, `OpenGL function 'glGetTextureParameterIiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameterIiv'\n"); }
  glGetTextureParameterIiv(a0,a1,a2,);
};
__gshared glbfn_glGetTextureParameterIuiv glGetTextureParameterIuiv = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetTextureParameterIuiv = cast(glbfn_glGetTextureParameterIuiv)glGetProcAddress(`glGetTextureParameterIuiv`);
  if (glGetTextureParameterIuiv is null) assert(0, `OpenGL function 'glGetTextureParameterIuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameterIuiv'\n"); }
  glGetTextureParameterIuiv(a0,a1,a2,);
};
__gshared glbfn_glGetTextureParameteriv glGetTextureParameteriv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetTextureParameteriv = cast(glbfn_glGetTextureParameteriv)glGetProcAddress(`glGetTextureParameteriv`);
  if (glGetTextureParameteriv is null) assert(0, `OpenGL function 'glGetTextureParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameteriv'\n"); }
  glGetTextureParameteriv(a0,a1,a2,);
};
__gshared glbfn_glCreateVertexArrays glCreateVertexArrays = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateVertexArrays = cast(glbfn_glCreateVertexArrays)glGetProcAddress(`glCreateVertexArrays`);
  if (glCreateVertexArrays is null) assert(0, `OpenGL function 'glCreateVertexArrays' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateVertexArrays'\n"); }
  glCreateVertexArrays(a0,a1,);
};
__gshared glbfn_glDisableVertexArrayAttrib glDisableVertexArrayAttrib = function void (GLuint a0, GLuint a1) nothrow {
  glDisableVertexArrayAttrib = cast(glbfn_glDisableVertexArrayAttrib)glGetProcAddress(`glDisableVertexArrayAttrib`);
  if (glDisableVertexArrayAttrib is null) assert(0, `OpenGL function 'glDisableVertexArrayAttrib' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableVertexArrayAttrib'\n"); }
  glDisableVertexArrayAttrib(a0,a1,);
};
__gshared glbfn_glEnableVertexArrayAttrib glEnableVertexArrayAttrib = function void (GLuint a0, GLuint a1) nothrow {
  glEnableVertexArrayAttrib = cast(glbfn_glEnableVertexArrayAttrib)glGetProcAddress(`glEnableVertexArrayAttrib`);
  if (glEnableVertexArrayAttrib is null) assert(0, `OpenGL function 'glEnableVertexArrayAttrib' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableVertexArrayAttrib'\n"); }
  glEnableVertexArrayAttrib(a0,a1,);
};
__gshared glbfn_glVertexArrayElementBuffer glVertexArrayElementBuffer = function void (GLuint a0, GLuint a1) nothrow {
  glVertexArrayElementBuffer = cast(glbfn_glVertexArrayElementBuffer)glGetProcAddress(`glVertexArrayElementBuffer`);
  if (glVertexArrayElementBuffer is null) assert(0, `OpenGL function 'glVertexArrayElementBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayElementBuffer'\n"); }
  glVertexArrayElementBuffer(a0,a1,);
};
__gshared glbfn_glVertexArrayVertexBuffer glVertexArrayVertexBuffer = function void (GLuint a0, GLuint a1, GLuint a2, GLintptr a3, GLsizei a4) nothrow {
  glVertexArrayVertexBuffer = cast(glbfn_glVertexArrayVertexBuffer)glGetProcAddress(`glVertexArrayVertexBuffer`);
  if (glVertexArrayVertexBuffer is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffer' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexBuffer'\n"); }
  glVertexArrayVertexBuffer(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayVertexBuffers glVertexArrayVertexBuffers = function void (GLuint a0, GLuint a1, GLsizei a2, const(GLuint)* a3, const(GLintptr)* a4, const(GLsizei)* a5) nothrow {
  glVertexArrayVertexBuffers = cast(glbfn_glVertexArrayVertexBuffers)glGetProcAddress(`glVertexArrayVertexBuffers`);
  if (glVertexArrayVertexBuffers is null) assert(0, `OpenGL function 'glVertexArrayVertexBuffers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexBuffers'\n"); }
  glVertexArrayVertexBuffers(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexArrayAttribBinding glVertexArrayAttribBinding = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glVertexArrayAttribBinding = cast(glbfn_glVertexArrayAttribBinding)glGetProcAddress(`glVertexArrayAttribBinding`);
  if (glVertexArrayAttribBinding is null) assert(0, `OpenGL function 'glVertexArrayAttribBinding' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayAttribBinding'\n"); }
  glVertexArrayAttribBinding(a0,a1,a2,);
};
__gshared glbfn_glVertexArrayAttribFormat glVertexArrayAttribFormat = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLboolean a4, GLuint a5) nothrow {
  glVertexArrayAttribFormat = cast(glbfn_glVertexArrayAttribFormat)glGetProcAddress(`glVertexArrayAttribFormat`);
  if (glVertexArrayAttribFormat is null) assert(0, `OpenGL function 'glVertexArrayAttribFormat' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayAttribFormat'\n"); }
  glVertexArrayAttribFormat(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexArrayAttribIFormat glVertexArrayAttribIFormat = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLuint a4) nothrow {
  glVertexArrayAttribIFormat = cast(glbfn_glVertexArrayAttribIFormat)glGetProcAddress(`glVertexArrayAttribIFormat`);
  if (glVertexArrayAttribIFormat is null) assert(0, `OpenGL function 'glVertexArrayAttribIFormat' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayAttribIFormat'\n"); }
  glVertexArrayAttribIFormat(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayAttribLFormat glVertexArrayAttribLFormat = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLuint a4) nothrow {
  glVertexArrayAttribLFormat = cast(glbfn_glVertexArrayAttribLFormat)glGetProcAddress(`glVertexArrayAttribLFormat`);
  if (glVertexArrayAttribLFormat is null) assert(0, `OpenGL function 'glVertexArrayAttribLFormat' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayAttribLFormat'\n"); }
  glVertexArrayAttribLFormat(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayBindingDivisor glVertexArrayBindingDivisor = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glVertexArrayBindingDivisor = cast(glbfn_glVertexArrayBindingDivisor)glGetProcAddress(`glVertexArrayBindingDivisor`);
  if (glVertexArrayBindingDivisor is null) assert(0, `OpenGL function 'glVertexArrayBindingDivisor' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayBindingDivisor'\n"); }
  glVertexArrayBindingDivisor(a0,a1,a2,);
};
__gshared glbfn_glGetVertexArrayiv glGetVertexArrayiv = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexArrayiv = cast(glbfn_glGetVertexArrayiv)glGetProcAddress(`glGetVertexArrayiv`);
  if (glGetVertexArrayiv is null) assert(0, `OpenGL function 'glGetVertexArrayiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexArrayiv'\n"); }
  glGetVertexArrayiv(a0,a1,a2,);
};
__gshared glbfn_glGetVertexArrayIndexediv glGetVertexArrayIndexediv = function void (GLuint a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetVertexArrayIndexediv = cast(glbfn_glGetVertexArrayIndexediv)glGetProcAddress(`glGetVertexArrayIndexediv`);
  if (glGetVertexArrayIndexediv is null) assert(0, `OpenGL function 'glGetVertexArrayIndexediv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexArrayIndexediv'\n"); }
  glGetVertexArrayIndexediv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetVertexArrayIndexed64iv glGetVertexArrayIndexed64iv = function void (GLuint a0, GLuint a1, GLenum a2, GLint64* a3) nothrow {
  glGetVertexArrayIndexed64iv = cast(glbfn_glGetVertexArrayIndexed64iv)glGetProcAddress(`glGetVertexArrayIndexed64iv`);
  if (glGetVertexArrayIndexed64iv is null) assert(0, `OpenGL function 'glGetVertexArrayIndexed64iv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexArrayIndexed64iv'\n"); }
  glGetVertexArrayIndexed64iv(a0,a1,a2,a3,);
};
__gshared glbfn_glCreateSamplers glCreateSamplers = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateSamplers = cast(glbfn_glCreateSamplers)glGetProcAddress(`glCreateSamplers`);
  if (glCreateSamplers is null) assert(0, `OpenGL function 'glCreateSamplers' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateSamplers'\n"); }
  glCreateSamplers(a0,a1,);
};
__gshared glbfn_glCreateProgramPipelines glCreateProgramPipelines = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateProgramPipelines = cast(glbfn_glCreateProgramPipelines)glGetProcAddress(`glCreateProgramPipelines`);
  if (glCreateProgramPipelines is null) assert(0, `OpenGL function 'glCreateProgramPipelines' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateProgramPipelines'\n"); }
  glCreateProgramPipelines(a0,a1,);
};
__gshared glbfn_glCreateQueries glCreateQueries = function void (GLenum a0, GLsizei a1, GLuint* a2) nothrow {
  glCreateQueries = cast(glbfn_glCreateQueries)glGetProcAddress(`glCreateQueries`);
  if (glCreateQueries is null) assert(0, `OpenGL function 'glCreateQueries' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateQueries'\n"); }
  glCreateQueries(a0,a1,a2,);
};
__gshared glbfn_glGetQueryBufferObjecti64v glGetQueryBufferObjecti64v = function void (GLuint a0, GLuint a1, GLenum a2, GLintptr a3) nothrow {
  glGetQueryBufferObjecti64v = cast(glbfn_glGetQueryBufferObjecti64v)glGetProcAddress(`glGetQueryBufferObjecti64v`);
  if (glGetQueryBufferObjecti64v is null) assert(0, `OpenGL function 'glGetQueryBufferObjecti64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryBufferObjecti64v'\n"); }
  glGetQueryBufferObjecti64v(a0,a1,a2,a3,);
};
__gshared glbfn_glGetQueryBufferObjectiv glGetQueryBufferObjectiv = function void (GLuint a0, GLuint a1, GLenum a2, GLintptr a3) nothrow {
  glGetQueryBufferObjectiv = cast(glbfn_glGetQueryBufferObjectiv)glGetProcAddress(`glGetQueryBufferObjectiv`);
  if (glGetQueryBufferObjectiv is null) assert(0, `OpenGL function 'glGetQueryBufferObjectiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryBufferObjectiv'\n"); }
  glGetQueryBufferObjectiv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetQueryBufferObjectui64v glGetQueryBufferObjectui64v = function void (GLuint a0, GLuint a1, GLenum a2, GLintptr a3) nothrow {
  glGetQueryBufferObjectui64v = cast(glbfn_glGetQueryBufferObjectui64v)glGetProcAddress(`glGetQueryBufferObjectui64v`);
  if (glGetQueryBufferObjectui64v is null) assert(0, `OpenGL function 'glGetQueryBufferObjectui64v' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryBufferObjectui64v'\n"); }
  glGetQueryBufferObjectui64v(a0,a1,a2,a3,);
};
__gshared glbfn_glGetQueryBufferObjectuiv glGetQueryBufferObjectuiv = function void (GLuint a0, GLuint a1, GLenum a2, GLintptr a3) nothrow {
  glGetQueryBufferObjectuiv = cast(glbfn_glGetQueryBufferObjectuiv)glGetProcAddress(`glGetQueryBufferObjectuiv`);
  if (glGetQueryBufferObjectuiv is null) assert(0, `OpenGL function 'glGetQueryBufferObjectuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryBufferObjectuiv'\n"); }
  glGetQueryBufferObjectuiv(a0,a1,a2,a3,);
};
__gshared glbfn_glMemoryBarrierByRegion glMemoryBarrierByRegion = function void (GLbitfield a0) nothrow {
  glMemoryBarrierByRegion = cast(glbfn_glMemoryBarrierByRegion)glGetProcAddress(`glMemoryBarrierByRegion`);
  if (glMemoryBarrierByRegion is null) assert(0, `OpenGL function 'glMemoryBarrierByRegion' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMemoryBarrierByRegion'\n"); }
  glMemoryBarrierByRegion(a0,);
};
__gshared glbfn_glGetTextureSubImage glGetTextureSubImage = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLenum a9, GLsizei a10, void* a11) nothrow {
  glGetTextureSubImage = cast(glbfn_glGetTextureSubImage)glGetProcAddress(`glGetTextureSubImage`);
  if (glGetTextureSubImage is null) assert(0, `OpenGL function 'glGetTextureSubImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureSubImage'\n"); }
  glGetTextureSubImage(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glGetCompressedTextureSubImage glGetCompressedTextureSubImage = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLsizei a8, void* a9) nothrow {
  glGetCompressedTextureSubImage = cast(glbfn_glGetCompressedTextureSubImage)glGetProcAddress(`glGetCompressedTextureSubImage`);
  if (glGetCompressedTextureSubImage is null) assert(0, `OpenGL function 'glGetCompressedTextureSubImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCompressedTextureSubImage'\n"); }
  glGetCompressedTextureSubImage(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glGetGraphicsResetStatus glGetGraphicsResetStatus = function GLenum () nothrow {
  glGetGraphicsResetStatus = cast(glbfn_glGetGraphicsResetStatus)glGetProcAddress(`glGetGraphicsResetStatus`);
  if (glGetGraphicsResetStatus is null) assert(0, `OpenGL function 'glGetGraphicsResetStatus' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetGraphicsResetStatus'\n"); }
  return glGetGraphicsResetStatus();
};
__gshared glbfn_glGetnCompressedTexImage glGetnCompressedTexImage = function void (GLenum a0, GLint a1, GLsizei a2, void* a3) nothrow {
  glGetnCompressedTexImage = cast(glbfn_glGetnCompressedTexImage)glGetProcAddress(`glGetnCompressedTexImage`);
  if (glGetnCompressedTexImage is null) assert(0, `OpenGL function 'glGetnCompressedTexImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnCompressedTexImage'\n"); }
  glGetnCompressedTexImage(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnTexImage glGetnTexImage = function void (GLenum a0, GLint a1, GLenum a2, GLenum a3, GLsizei a4, void* a5) nothrow {
  glGetnTexImage = cast(glbfn_glGetnTexImage)glGetProcAddress(`glGetnTexImage`);
  if (glGetnTexImage is null) assert(0, `OpenGL function 'glGetnTexImage' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnTexImage'\n"); }
  glGetnTexImage(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetnUniformdv glGetnUniformdv = function void (GLuint a0, GLint a1, GLsizei a2, GLdouble* a3) nothrow {
  glGetnUniformdv = cast(glbfn_glGetnUniformdv)glGetProcAddress(`glGetnUniformdv`);
  if (glGetnUniformdv is null) assert(0, `OpenGL function 'glGetnUniformdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformdv'\n"); }
  glGetnUniformdv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformfv glGetnUniformfv = function void (GLuint a0, GLint a1, GLsizei a2, GLfloat* a3) nothrow {
  glGetnUniformfv = cast(glbfn_glGetnUniformfv)glGetProcAddress(`glGetnUniformfv`);
  if (glGetnUniformfv is null) assert(0, `OpenGL function 'glGetnUniformfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformfv'\n"); }
  glGetnUniformfv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformiv glGetnUniformiv = function void (GLuint a0, GLint a1, GLsizei a2, GLint* a3) nothrow {
  glGetnUniformiv = cast(glbfn_glGetnUniformiv)glGetProcAddress(`glGetnUniformiv`);
  if (glGetnUniformiv is null) assert(0, `OpenGL function 'glGetnUniformiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformiv'\n"); }
  glGetnUniformiv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformuiv glGetnUniformuiv = function void (GLuint a0, GLint a1, GLsizei a2, GLuint* a3) nothrow {
  glGetnUniformuiv = cast(glbfn_glGetnUniformuiv)glGetProcAddress(`glGetnUniformuiv`);
  if (glGetnUniformuiv is null) assert(0, `OpenGL function 'glGetnUniformuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformuiv'\n"); }
  glGetnUniformuiv(a0,a1,a2,a3,);
};
__gshared glbfn_glReadnPixels glReadnPixels = function void (GLint a0, GLint a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, GLsizei a6, void* a7) nothrow {
  glReadnPixels = cast(glbfn_glReadnPixels)glGetProcAddress(`glReadnPixels`);
  if (glReadnPixels is null) assert(0, `OpenGL function 'glReadnPixels' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReadnPixels'\n"); }
  glReadnPixels(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetnMapdv glGetnMapdv = function void (GLenum a0, GLenum a1, GLsizei a2, GLdouble* a3) nothrow {
  glGetnMapdv = cast(glbfn_glGetnMapdv)glGetProcAddress(`glGetnMapdv`);
  if (glGetnMapdv is null) assert(0, `OpenGL function 'glGetnMapdv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMapdv'\n"); }
  glGetnMapdv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnMapfv glGetnMapfv = function void (GLenum a0, GLenum a1, GLsizei a2, GLfloat* a3) nothrow {
  glGetnMapfv = cast(glbfn_glGetnMapfv)glGetProcAddress(`glGetnMapfv`);
  if (glGetnMapfv is null) assert(0, `OpenGL function 'glGetnMapfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMapfv'\n"); }
  glGetnMapfv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnMapiv glGetnMapiv = function void (GLenum a0, GLenum a1, GLsizei a2, GLint* a3) nothrow {
  glGetnMapiv = cast(glbfn_glGetnMapiv)glGetProcAddress(`glGetnMapiv`);
  if (glGetnMapiv is null) assert(0, `OpenGL function 'glGetnMapiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMapiv'\n"); }
  glGetnMapiv(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnPixelMapfv glGetnPixelMapfv = function void (GLenum a0, GLsizei a1, GLfloat* a2) nothrow {
  glGetnPixelMapfv = cast(glbfn_glGetnPixelMapfv)glGetProcAddress(`glGetnPixelMapfv`);
  if (glGetnPixelMapfv is null) assert(0, `OpenGL function 'glGetnPixelMapfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPixelMapfv'\n"); }
  glGetnPixelMapfv(a0,a1,a2,);
};
__gshared glbfn_glGetnPixelMapuiv glGetnPixelMapuiv = function void (GLenum a0, GLsizei a1, GLuint* a2) nothrow {
  glGetnPixelMapuiv = cast(glbfn_glGetnPixelMapuiv)glGetProcAddress(`glGetnPixelMapuiv`);
  if (glGetnPixelMapuiv is null) assert(0, `OpenGL function 'glGetnPixelMapuiv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPixelMapuiv'\n"); }
  glGetnPixelMapuiv(a0,a1,a2,);
};
__gshared glbfn_glGetnPixelMapusv glGetnPixelMapusv = function void (GLenum a0, GLsizei a1, GLushort* a2) nothrow {
  glGetnPixelMapusv = cast(glbfn_glGetnPixelMapusv)glGetProcAddress(`glGetnPixelMapusv`);
  if (glGetnPixelMapusv is null) assert(0, `OpenGL function 'glGetnPixelMapusv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPixelMapusv'\n"); }
  glGetnPixelMapusv(a0,a1,a2,);
};
__gshared glbfn_glGetnPolygonStipple glGetnPolygonStipple = function void (GLsizei a0, GLubyte* a1) nothrow {
  glGetnPolygonStipple = cast(glbfn_glGetnPolygonStipple)glGetProcAddress(`glGetnPolygonStipple`);
  if (glGetnPolygonStipple is null) assert(0, `OpenGL function 'glGetnPolygonStipple' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPolygonStipple'\n"); }
  glGetnPolygonStipple(a0,a1,);
};
__gshared glbfn_glGetnColorTable glGetnColorTable = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, void* a4) nothrow {
  glGetnColorTable = cast(glbfn_glGetnColorTable)glGetProcAddress(`glGetnColorTable`);
  if (glGetnColorTable is null) assert(0, `OpenGL function 'glGetnColorTable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnColorTable'\n"); }
  glGetnColorTable(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetnConvolutionFilter glGetnConvolutionFilter = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, void* a4) nothrow {
  glGetnConvolutionFilter = cast(glbfn_glGetnConvolutionFilter)glGetProcAddress(`glGetnConvolutionFilter`);
  if (glGetnConvolutionFilter is null) assert(0, `OpenGL function 'glGetnConvolutionFilter' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnConvolutionFilter'\n"); }
  glGetnConvolutionFilter(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetnSeparableFilter glGetnSeparableFilter = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, void* a4, GLsizei a5, void* a6, void* a7) nothrow {
  glGetnSeparableFilter = cast(glbfn_glGetnSeparableFilter)glGetProcAddress(`glGetnSeparableFilter`);
  if (glGetnSeparableFilter is null) assert(0, `OpenGL function 'glGetnSeparableFilter' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnSeparableFilter'\n"); }
  glGetnSeparableFilter(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetnHistogram glGetnHistogram = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, GLsizei a4, void* a5) nothrow {
  glGetnHistogram = cast(glbfn_glGetnHistogram)glGetProcAddress(`glGetnHistogram`);
  if (glGetnHistogram is null) assert(0, `OpenGL function 'glGetnHistogram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnHistogram'\n"); }
  glGetnHistogram(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetnMinmax glGetnMinmax = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, GLsizei a4, void* a5) nothrow {
  glGetnMinmax = cast(glbfn_glGetnMinmax)glGetProcAddress(`glGetnMinmax`);
  if (glGetnMinmax is null) assert(0, `OpenGL function 'glGetnMinmax' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMinmax'\n"); }
  glGetnMinmax(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTextureBarrier glTextureBarrier = function void () nothrow {
  glTextureBarrier = cast(glbfn_glTextureBarrier)glGetProcAddress(`glTextureBarrier`);
  if (glTextureBarrier is null) assert(0, `OpenGL function 'glTextureBarrier' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureBarrier'\n"); }
  glTextureBarrier();
};
__gshared glbfn_glTbufferMask3DFX glTbufferMask3DFX = function void (GLuint a0) nothrow {
  glTbufferMask3DFX = cast(glbfn_glTbufferMask3DFX)glGetProcAddress(`glTbufferMask3DFX`);
  if (glTbufferMask3DFX is null) assert(0, `OpenGL function 'glTbufferMask3DFX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTbufferMask3DFX'\n"); }
  glTbufferMask3DFX(a0,);
};
__gshared glbfn_glDebugMessageEnableAMD glDebugMessageEnableAMD = function void (GLenum a0, GLenum a1, GLsizei a2, const(GLuint)* a3, GLboolean a4) nothrow {
  glDebugMessageEnableAMD = cast(glbfn_glDebugMessageEnableAMD)glGetProcAddress(`glDebugMessageEnableAMD`);
  if (glDebugMessageEnableAMD is null) assert(0, `OpenGL function 'glDebugMessageEnableAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageEnableAMD'\n"); }
  glDebugMessageEnableAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDebugMessageInsertAMD glDebugMessageInsertAMD = function void (GLenum a0, GLenum a1, GLuint a2, GLsizei a3, const(GLchar)* a4) nothrow {
  glDebugMessageInsertAMD = cast(glbfn_glDebugMessageInsertAMD)glGetProcAddress(`glDebugMessageInsertAMD`);
  if (glDebugMessageInsertAMD is null) assert(0, `OpenGL function 'glDebugMessageInsertAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageInsertAMD'\n"); }
  glDebugMessageInsertAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetDebugMessageLogAMD glGetDebugMessageLogAMD = function GLuint (GLuint a0, GLsizei a1, GLenum* a2, GLuint* a3, GLuint* a4, GLsizei* a5, GLchar* a6) nothrow {
  glGetDebugMessageLogAMD = cast(glbfn_glGetDebugMessageLogAMD)glGetProcAddress(`glGetDebugMessageLogAMD`);
  if (glGetDebugMessageLogAMD is null) assert(0, `OpenGL function 'glGetDebugMessageLogAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDebugMessageLogAMD'\n"); }
  return glGetDebugMessageLogAMD(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glBlendFuncIndexedAMD glBlendFuncIndexedAMD = function void (GLuint a0, GLenum a1, GLenum a2) nothrow {
  glBlendFuncIndexedAMD = cast(glbfn_glBlendFuncIndexedAMD)glGetProcAddress(`glBlendFuncIndexedAMD`);
  if (glBlendFuncIndexedAMD is null) assert(0, `OpenGL function 'glBlendFuncIndexedAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFuncIndexedAMD'\n"); }
  glBlendFuncIndexedAMD(a0,a1,a2,);
};
__gshared glbfn_glBlendFuncSeparateIndexedAMD glBlendFuncSeparateIndexedAMD = function void (GLuint a0, GLenum a1, GLenum a2, GLenum a3, GLenum a4) nothrow {
  glBlendFuncSeparateIndexedAMD = cast(glbfn_glBlendFuncSeparateIndexedAMD)glGetProcAddress(`glBlendFuncSeparateIndexedAMD`);
  if (glBlendFuncSeparateIndexedAMD is null) assert(0, `OpenGL function 'glBlendFuncSeparateIndexedAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFuncSeparateIndexedAMD'\n"); }
  glBlendFuncSeparateIndexedAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBlendEquationIndexedAMD glBlendEquationIndexedAMD = function void (GLuint a0, GLenum a1) nothrow {
  glBlendEquationIndexedAMD = cast(glbfn_glBlendEquationIndexedAMD)glGetProcAddress(`glBlendEquationIndexedAMD`);
  if (glBlendEquationIndexedAMD is null) assert(0, `OpenGL function 'glBlendEquationIndexedAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationIndexedAMD'\n"); }
  glBlendEquationIndexedAMD(a0,a1,);
};
__gshared glbfn_glBlendEquationSeparateIndexedAMD glBlendEquationSeparateIndexedAMD = function void (GLuint a0, GLenum a1, GLenum a2) nothrow {
  glBlendEquationSeparateIndexedAMD = cast(glbfn_glBlendEquationSeparateIndexedAMD)glGetProcAddress(`glBlendEquationSeparateIndexedAMD`);
  if (glBlendEquationSeparateIndexedAMD is null) assert(0, `OpenGL function 'glBlendEquationSeparateIndexedAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationSeparateIndexedAMD'\n"); }
  glBlendEquationSeparateIndexedAMD(a0,a1,a2,);
};
__gshared glbfn_glUniform1i64NV glUniform1i64NV = function void (GLint a0, GLint64EXT a1) nothrow {
  glUniform1i64NV = cast(glbfn_glUniform1i64NV)glGetProcAddress(`glUniform1i64NV`);
  if (glUniform1i64NV is null) assert(0, `OpenGL function 'glUniform1i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1i64NV'\n"); }
  glUniform1i64NV(a0,a1,);
};
__gshared glbfn_glUniform2i64NV glUniform2i64NV = function void (GLint a0, GLint64EXT a1, GLint64EXT a2) nothrow {
  glUniform2i64NV = cast(glbfn_glUniform2i64NV)glGetProcAddress(`glUniform2i64NV`);
  if (glUniform2i64NV is null) assert(0, `OpenGL function 'glUniform2i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2i64NV'\n"); }
  glUniform2i64NV(a0,a1,a2,);
};
__gshared glbfn_glUniform3i64NV glUniform3i64NV = function void (GLint a0, GLint64EXT a1, GLint64EXT a2, GLint64EXT a3) nothrow {
  glUniform3i64NV = cast(glbfn_glUniform3i64NV)glGetProcAddress(`glUniform3i64NV`);
  if (glUniform3i64NV is null) assert(0, `OpenGL function 'glUniform3i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3i64NV'\n"); }
  glUniform3i64NV(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4i64NV glUniform4i64NV = function void (GLint a0, GLint64EXT a1, GLint64EXT a2, GLint64EXT a3, GLint64EXT a4) nothrow {
  glUniform4i64NV = cast(glbfn_glUniform4i64NV)glGetProcAddress(`glUniform4i64NV`);
  if (glUniform4i64NV is null) assert(0, `OpenGL function 'glUniform4i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4i64NV'\n"); }
  glUniform4i64NV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1i64vNV glUniform1i64vNV = function void (GLint a0, GLsizei a1, const(GLint64EXT)* a2) nothrow {
  glUniform1i64vNV = cast(glbfn_glUniform1i64vNV)glGetProcAddress(`glUniform1i64vNV`);
  if (glUniform1i64vNV is null) assert(0, `OpenGL function 'glUniform1i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1i64vNV'\n"); }
  glUniform1i64vNV(a0,a1,a2,);
};
__gshared glbfn_glUniform2i64vNV glUniform2i64vNV = function void (GLint a0, GLsizei a1, const(GLint64EXT)* a2) nothrow {
  glUniform2i64vNV = cast(glbfn_glUniform2i64vNV)glGetProcAddress(`glUniform2i64vNV`);
  if (glUniform2i64vNV is null) assert(0, `OpenGL function 'glUniform2i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2i64vNV'\n"); }
  glUniform2i64vNV(a0,a1,a2,);
};
__gshared glbfn_glUniform3i64vNV glUniform3i64vNV = function void (GLint a0, GLsizei a1, const(GLint64EXT)* a2) nothrow {
  glUniform3i64vNV = cast(glbfn_glUniform3i64vNV)glGetProcAddress(`glUniform3i64vNV`);
  if (glUniform3i64vNV is null) assert(0, `OpenGL function 'glUniform3i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3i64vNV'\n"); }
  glUniform3i64vNV(a0,a1,a2,);
};
__gshared glbfn_glUniform4i64vNV glUniform4i64vNV = function void (GLint a0, GLsizei a1, const(GLint64EXT)* a2) nothrow {
  glUniform4i64vNV = cast(glbfn_glUniform4i64vNV)glGetProcAddress(`glUniform4i64vNV`);
  if (glUniform4i64vNV is null) assert(0, `OpenGL function 'glUniform4i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4i64vNV'\n"); }
  glUniform4i64vNV(a0,a1,a2,);
};
__gshared glbfn_glUniform1ui64NV glUniform1ui64NV = function void (GLint a0, GLuint64EXT a1) nothrow {
  glUniform1ui64NV = cast(glbfn_glUniform1ui64NV)glGetProcAddress(`glUniform1ui64NV`);
  if (glUniform1ui64NV is null) assert(0, `OpenGL function 'glUniform1ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1ui64NV'\n"); }
  glUniform1ui64NV(a0,a1,);
};
__gshared glbfn_glUniform2ui64NV glUniform2ui64NV = function void (GLint a0, GLuint64EXT a1, GLuint64EXT a2) nothrow {
  glUniform2ui64NV = cast(glbfn_glUniform2ui64NV)glGetProcAddress(`glUniform2ui64NV`);
  if (glUniform2ui64NV is null) assert(0, `OpenGL function 'glUniform2ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2ui64NV'\n"); }
  glUniform2ui64NV(a0,a1,a2,);
};
__gshared glbfn_glUniform3ui64NV glUniform3ui64NV = function void (GLint a0, GLuint64EXT a1, GLuint64EXT a2, GLuint64EXT a3) nothrow {
  glUniform3ui64NV = cast(glbfn_glUniform3ui64NV)glGetProcAddress(`glUniform3ui64NV`);
  if (glUniform3ui64NV is null) assert(0, `OpenGL function 'glUniform3ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3ui64NV'\n"); }
  glUniform3ui64NV(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4ui64NV glUniform4ui64NV = function void (GLint a0, GLuint64EXT a1, GLuint64EXT a2, GLuint64EXT a3, GLuint64EXT a4) nothrow {
  glUniform4ui64NV = cast(glbfn_glUniform4ui64NV)glGetProcAddress(`glUniform4ui64NV`);
  if (glUniform4ui64NV is null) assert(0, `OpenGL function 'glUniform4ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4ui64NV'\n"); }
  glUniform4ui64NV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1ui64vNV glUniform1ui64vNV = function void (GLint a0, GLsizei a1, const(GLuint64EXT)* a2) nothrow {
  glUniform1ui64vNV = cast(glbfn_glUniform1ui64vNV)glGetProcAddress(`glUniform1ui64vNV`);
  if (glUniform1ui64vNV is null) assert(0, `OpenGL function 'glUniform1ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1ui64vNV'\n"); }
  glUniform1ui64vNV(a0,a1,a2,);
};
__gshared glbfn_glUniform2ui64vNV glUniform2ui64vNV = function void (GLint a0, GLsizei a1, const(GLuint64EXT)* a2) nothrow {
  glUniform2ui64vNV = cast(glbfn_glUniform2ui64vNV)glGetProcAddress(`glUniform2ui64vNV`);
  if (glUniform2ui64vNV is null) assert(0, `OpenGL function 'glUniform2ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2ui64vNV'\n"); }
  glUniform2ui64vNV(a0,a1,a2,);
};
__gshared glbfn_glUniform3ui64vNV glUniform3ui64vNV = function void (GLint a0, GLsizei a1, const(GLuint64EXT)* a2) nothrow {
  glUniform3ui64vNV = cast(glbfn_glUniform3ui64vNV)glGetProcAddress(`glUniform3ui64vNV`);
  if (glUniform3ui64vNV is null) assert(0, `OpenGL function 'glUniform3ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3ui64vNV'\n"); }
  glUniform3ui64vNV(a0,a1,a2,);
};
__gshared glbfn_glUniform4ui64vNV glUniform4ui64vNV = function void (GLint a0, GLsizei a1, const(GLuint64EXT)* a2) nothrow {
  glUniform4ui64vNV = cast(glbfn_glUniform4ui64vNV)glGetProcAddress(`glUniform4ui64vNV`);
  if (glUniform4ui64vNV is null) assert(0, `OpenGL function 'glUniform4ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4ui64vNV'\n"); }
  glUniform4ui64vNV(a0,a1,a2,);
};
__gshared glbfn_glGetUniformi64vNV glGetUniformi64vNV = function void (GLuint a0, GLint a1, GLint64EXT* a2) nothrow {
  glGetUniformi64vNV = cast(glbfn_glGetUniformi64vNV)glGetProcAddress(`glGetUniformi64vNV`);
  if (glGetUniformi64vNV is null) assert(0, `OpenGL function 'glGetUniformi64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformi64vNV'\n"); }
  glGetUniformi64vNV(a0,a1,a2,);
};
__gshared glbfn_glGetUniformui64vNV glGetUniformui64vNV = function void (GLuint a0, GLint a1, GLuint64EXT* a2) nothrow {
  glGetUniformui64vNV = cast(glbfn_glGetUniformui64vNV)glGetProcAddress(`glGetUniformui64vNV`);
  if (glGetUniformui64vNV is null) assert(0, `OpenGL function 'glGetUniformui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformui64vNV'\n"); }
  glGetUniformui64vNV(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform1i64NV glProgramUniform1i64NV = function void (GLuint a0, GLint a1, GLint64EXT a2) nothrow {
  glProgramUniform1i64NV = cast(glbfn_glProgramUniform1i64NV)glGetProcAddress(`glProgramUniform1i64NV`);
  if (glProgramUniform1i64NV is null) assert(0, `OpenGL function 'glProgramUniform1i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1i64NV'\n"); }
  glProgramUniform1i64NV(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2i64NV glProgramUniform2i64NV = function void (GLuint a0, GLint a1, GLint64EXT a2, GLint64EXT a3) nothrow {
  glProgramUniform2i64NV = cast(glbfn_glProgramUniform2i64NV)glGetProcAddress(`glProgramUniform2i64NV`);
  if (glProgramUniform2i64NV is null) assert(0, `OpenGL function 'glProgramUniform2i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2i64NV'\n"); }
  glProgramUniform2i64NV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3i64NV glProgramUniform3i64NV = function void (GLuint a0, GLint a1, GLint64EXT a2, GLint64EXT a3, GLint64EXT a4) nothrow {
  glProgramUniform3i64NV = cast(glbfn_glProgramUniform3i64NV)glGetProcAddress(`glProgramUniform3i64NV`);
  if (glProgramUniform3i64NV is null) assert(0, `OpenGL function 'glProgramUniform3i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3i64NV'\n"); }
  glProgramUniform3i64NV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4i64NV glProgramUniform4i64NV = function void (GLuint a0, GLint a1, GLint64EXT a2, GLint64EXT a3, GLint64EXT a4, GLint64EXT a5) nothrow {
  glProgramUniform4i64NV = cast(glbfn_glProgramUniform4i64NV)glGetProcAddress(`glProgramUniform4i64NV`);
  if (glProgramUniform4i64NV is null) assert(0, `OpenGL function 'glProgramUniform4i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4i64NV'\n"); }
  glProgramUniform4i64NV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1i64vNV glProgramUniform1i64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64EXT)* a3) nothrow {
  glProgramUniform1i64vNV = cast(glbfn_glProgramUniform1i64vNV)glGetProcAddress(`glProgramUniform1i64vNV`);
  if (glProgramUniform1i64vNV is null) assert(0, `OpenGL function 'glProgramUniform1i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1i64vNV'\n"); }
  glProgramUniform1i64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2i64vNV glProgramUniform2i64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64EXT)* a3) nothrow {
  glProgramUniform2i64vNV = cast(glbfn_glProgramUniform2i64vNV)glGetProcAddress(`glProgramUniform2i64vNV`);
  if (glProgramUniform2i64vNV is null) assert(0, `OpenGL function 'glProgramUniform2i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2i64vNV'\n"); }
  glProgramUniform2i64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3i64vNV glProgramUniform3i64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64EXT)* a3) nothrow {
  glProgramUniform3i64vNV = cast(glbfn_glProgramUniform3i64vNV)glGetProcAddress(`glProgramUniform3i64vNV`);
  if (glProgramUniform3i64vNV is null) assert(0, `OpenGL function 'glProgramUniform3i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3i64vNV'\n"); }
  glProgramUniform3i64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4i64vNV glProgramUniform4i64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64EXT)* a3) nothrow {
  glProgramUniform4i64vNV = cast(glbfn_glProgramUniform4i64vNV)glGetProcAddress(`glProgramUniform4i64vNV`);
  if (glProgramUniform4i64vNV is null) assert(0, `OpenGL function 'glProgramUniform4i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4i64vNV'\n"); }
  glProgramUniform4i64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1ui64NV glProgramUniform1ui64NV = function void (GLuint a0, GLint a1, GLuint64EXT a2) nothrow {
  glProgramUniform1ui64NV = cast(glbfn_glProgramUniform1ui64NV)glGetProcAddress(`glProgramUniform1ui64NV`);
  if (glProgramUniform1ui64NV is null) assert(0, `OpenGL function 'glProgramUniform1ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1ui64NV'\n"); }
  glProgramUniform1ui64NV(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2ui64NV glProgramUniform2ui64NV = function void (GLuint a0, GLint a1, GLuint64EXT a2, GLuint64EXT a3) nothrow {
  glProgramUniform2ui64NV = cast(glbfn_glProgramUniform2ui64NV)glGetProcAddress(`glProgramUniform2ui64NV`);
  if (glProgramUniform2ui64NV is null) assert(0, `OpenGL function 'glProgramUniform2ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2ui64NV'\n"); }
  glProgramUniform2ui64NV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3ui64NV glProgramUniform3ui64NV = function void (GLuint a0, GLint a1, GLuint64EXT a2, GLuint64EXT a3, GLuint64EXT a4) nothrow {
  glProgramUniform3ui64NV = cast(glbfn_glProgramUniform3ui64NV)glGetProcAddress(`glProgramUniform3ui64NV`);
  if (glProgramUniform3ui64NV is null) assert(0, `OpenGL function 'glProgramUniform3ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3ui64NV'\n"); }
  glProgramUniform3ui64NV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4ui64NV glProgramUniform4ui64NV = function void (GLuint a0, GLint a1, GLuint64EXT a2, GLuint64EXT a3, GLuint64EXT a4, GLuint64EXT a5) nothrow {
  glProgramUniform4ui64NV = cast(glbfn_glProgramUniform4ui64NV)glGetProcAddress(`glProgramUniform4ui64NV`);
  if (glProgramUniform4ui64NV is null) assert(0, `OpenGL function 'glProgramUniform4ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4ui64NV'\n"); }
  glProgramUniform4ui64NV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1ui64vNV glProgramUniform1ui64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64EXT)* a3) nothrow {
  glProgramUniform1ui64vNV = cast(glbfn_glProgramUniform1ui64vNV)glGetProcAddress(`glProgramUniform1ui64vNV`);
  if (glProgramUniform1ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform1ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1ui64vNV'\n"); }
  glProgramUniform1ui64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2ui64vNV glProgramUniform2ui64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64EXT)* a3) nothrow {
  glProgramUniform2ui64vNV = cast(glbfn_glProgramUniform2ui64vNV)glGetProcAddress(`glProgramUniform2ui64vNV`);
  if (glProgramUniform2ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform2ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2ui64vNV'\n"); }
  glProgramUniform2ui64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3ui64vNV glProgramUniform3ui64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64EXT)* a3) nothrow {
  glProgramUniform3ui64vNV = cast(glbfn_glProgramUniform3ui64vNV)glGetProcAddress(`glProgramUniform3ui64vNV`);
  if (glProgramUniform3ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform3ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3ui64vNV'\n"); }
  glProgramUniform3ui64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4ui64vNV glProgramUniform4ui64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64EXT)* a3) nothrow {
  glProgramUniform4ui64vNV = cast(glbfn_glProgramUniform4ui64vNV)glGetProcAddress(`glProgramUniform4ui64vNV`);
  if (glProgramUniform4ui64vNV is null) assert(0, `OpenGL function 'glProgramUniform4ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4ui64vNV'\n"); }
  glProgramUniform4ui64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribParameteriAMD glVertexAttribParameteriAMD = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glVertexAttribParameteriAMD = cast(glbfn_glVertexAttribParameteriAMD)glGetProcAddress(`glVertexAttribParameteriAMD`);
  if (glVertexAttribParameteriAMD is null) assert(0, `OpenGL function 'glVertexAttribParameteriAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribParameteriAMD'\n"); }
  glVertexAttribParameteriAMD(a0,a1,a2,);
};
__gshared glbfn_glMultiDrawArraysIndirectAMD glMultiDrawArraysIndirectAMD = function void (GLenum a0, const(void)* a1, GLsizei a2, GLsizei a3) nothrow {
  glMultiDrawArraysIndirectAMD = cast(glbfn_glMultiDrawArraysIndirectAMD)glGetProcAddress(`glMultiDrawArraysIndirectAMD`);
  if (glMultiDrawArraysIndirectAMD is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawArraysIndirectAMD'\n"); }
  glMultiDrawArraysIndirectAMD(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiDrawElementsIndirectAMD glMultiDrawElementsIndirectAMD = function void (GLenum a0, GLenum a1, const(void)* a2, GLsizei a3, GLsizei a4) nothrow {
  glMultiDrawElementsIndirectAMD = cast(glbfn_glMultiDrawElementsIndirectAMD)glGetProcAddress(`glMultiDrawElementsIndirectAMD`);
  if (glMultiDrawElementsIndirectAMD is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementsIndirectAMD'\n"); }
  glMultiDrawElementsIndirectAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGenNamesAMD glGenNamesAMD = function void (GLenum a0, GLuint a1, GLuint* a2) nothrow {
  glGenNamesAMD = cast(glbfn_glGenNamesAMD)glGetProcAddress(`glGenNamesAMD`);
  if (glGenNamesAMD is null) assert(0, `OpenGL function 'glGenNamesAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenNamesAMD'\n"); }
  glGenNamesAMD(a0,a1,a2,);
};
__gshared glbfn_glDeleteNamesAMD glDeleteNamesAMD = function void (GLenum a0, GLuint a1, const(GLuint)* a2) nothrow {
  glDeleteNamesAMD = cast(glbfn_glDeleteNamesAMD)glGetProcAddress(`glDeleteNamesAMD`);
  if (glDeleteNamesAMD is null) assert(0, `OpenGL function 'glDeleteNamesAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteNamesAMD'\n"); }
  glDeleteNamesAMD(a0,a1,a2,);
};
__gshared glbfn_glIsNameAMD glIsNameAMD = function GLboolean (GLenum a0, GLuint a1) nothrow {
  glIsNameAMD = cast(glbfn_glIsNameAMD)glGetProcAddress(`glIsNameAMD`);
  if (glIsNameAMD is null) assert(0, `OpenGL function 'glIsNameAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsNameAMD'\n"); }
  return glIsNameAMD(a0,a1,);
};
__gshared glbfn_glQueryObjectParameteruiAMD glQueryObjectParameteruiAMD = function void (GLenum a0, GLuint a1, GLenum a2, GLuint a3) nothrow {
  glQueryObjectParameteruiAMD = cast(glbfn_glQueryObjectParameteruiAMD)glGetProcAddress(`glQueryObjectParameteruiAMD`);
  if (glQueryObjectParameteruiAMD is null) assert(0, `OpenGL function 'glQueryObjectParameteruiAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glQueryObjectParameteruiAMD'\n"); }
  glQueryObjectParameteruiAMD(a0,a1,a2,a3,);
};
__gshared glbfn_glGetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD = function void (GLint* a0, GLsizei a1, GLuint* a2) nothrow {
  glGetPerfMonitorGroupsAMD = cast(glbfn_glGetPerfMonitorGroupsAMD)glGetProcAddress(`glGetPerfMonitorGroupsAMD`);
  if (glGetPerfMonitorGroupsAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupsAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfMonitorGroupsAMD'\n"); }
  glGetPerfMonitorGroupsAMD(a0,a1,a2,);
};
__gshared glbfn_glGetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD = function void (GLuint a0, GLint* a1, GLint* a2, GLsizei a3, GLuint* a4) nothrow {
  glGetPerfMonitorCountersAMD = cast(glbfn_glGetPerfMonitorCountersAMD)glGetProcAddress(`glGetPerfMonitorCountersAMD`);
  if (glGetPerfMonitorCountersAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCountersAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfMonitorCountersAMD'\n"); }
  glGetPerfMonitorCountersAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetPerfMonitorGroupStringAMD = cast(glbfn_glGetPerfMonitorGroupStringAMD)glGetProcAddress(`glGetPerfMonitorGroupStringAMD`);
  if (glGetPerfMonitorGroupStringAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorGroupStringAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfMonitorGroupStringAMD'\n"); }
  glGetPerfMonitorGroupStringAMD(a0,a1,a2,a3,);
};
__gshared glbfn_glGetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLchar* a4) nothrow {
  glGetPerfMonitorCounterStringAMD = cast(glbfn_glGetPerfMonitorCounterStringAMD)glGetProcAddress(`glGetPerfMonitorCounterStringAMD`);
  if (glGetPerfMonitorCounterStringAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterStringAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfMonitorCounterStringAMD'\n"); }
  glGetPerfMonitorCounterStringAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD = function void (GLuint a0, GLuint a1, GLenum a2, void* a3) nothrow {
  glGetPerfMonitorCounterInfoAMD = cast(glbfn_glGetPerfMonitorCounterInfoAMD)glGetProcAddress(`glGetPerfMonitorCounterInfoAMD`);
  if (glGetPerfMonitorCounterInfoAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterInfoAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfMonitorCounterInfoAMD'\n"); }
  glGetPerfMonitorCounterInfoAMD(a0,a1,a2,a3,);
};
__gshared glbfn_glGenPerfMonitorsAMD glGenPerfMonitorsAMD = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenPerfMonitorsAMD = cast(glbfn_glGenPerfMonitorsAMD)glGetProcAddress(`glGenPerfMonitorsAMD`);
  if (glGenPerfMonitorsAMD is null) assert(0, `OpenGL function 'glGenPerfMonitorsAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenPerfMonitorsAMD'\n"); }
  glGenPerfMonitorsAMD(a0,a1,);
};
__gshared glbfn_glDeletePerfMonitorsAMD glDeletePerfMonitorsAMD = function void (GLsizei a0, GLuint* a1) nothrow {
  glDeletePerfMonitorsAMD = cast(glbfn_glDeletePerfMonitorsAMD)glGetProcAddress(`glDeletePerfMonitorsAMD`);
  if (glDeletePerfMonitorsAMD is null) assert(0, `OpenGL function 'glDeletePerfMonitorsAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeletePerfMonitorsAMD'\n"); }
  glDeletePerfMonitorsAMD(a0,a1,);
};
__gshared glbfn_glSelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD = function void (GLuint a0, GLboolean a1, GLuint a2, GLint a3, GLuint* a4) nothrow {
  glSelectPerfMonitorCountersAMD = cast(glbfn_glSelectPerfMonitorCountersAMD)glGetProcAddress(`glSelectPerfMonitorCountersAMD`);
  if (glSelectPerfMonitorCountersAMD is null) assert(0, `OpenGL function 'glSelectPerfMonitorCountersAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSelectPerfMonitorCountersAMD'\n"); }
  glSelectPerfMonitorCountersAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBeginPerfMonitorAMD glBeginPerfMonitorAMD = function void (GLuint a0) nothrow {
  glBeginPerfMonitorAMD = cast(glbfn_glBeginPerfMonitorAMD)glGetProcAddress(`glBeginPerfMonitorAMD`);
  if (glBeginPerfMonitorAMD is null) assert(0, `OpenGL function 'glBeginPerfMonitorAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginPerfMonitorAMD'\n"); }
  glBeginPerfMonitorAMD(a0,);
};
__gshared glbfn_glEndPerfMonitorAMD glEndPerfMonitorAMD = function void (GLuint a0) nothrow {
  glEndPerfMonitorAMD = cast(glbfn_glEndPerfMonitorAMD)glGetProcAddress(`glEndPerfMonitorAMD`);
  if (glEndPerfMonitorAMD is null) assert(0, `OpenGL function 'glEndPerfMonitorAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndPerfMonitorAMD'\n"); }
  glEndPerfMonitorAMD(a0,);
};
__gshared glbfn_glGetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD = function void (GLuint a0, GLenum a1, GLsizei a2, GLuint* a3, GLint* a4) nothrow {
  glGetPerfMonitorCounterDataAMD = cast(glbfn_glGetPerfMonitorCounterDataAMD)glGetProcAddress(`glGetPerfMonitorCounterDataAMD`);
  if (glGetPerfMonitorCounterDataAMD is null) assert(0, `OpenGL function 'glGetPerfMonitorCounterDataAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfMonitorCounterDataAMD'\n"); }
  glGetPerfMonitorCounterDataAMD(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glSetMultisamplefvAMD glSetMultisamplefvAMD = function void (GLenum a0, GLuint a1, const(GLfloat)* a2) nothrow {
  glSetMultisamplefvAMD = cast(glbfn_glSetMultisamplefvAMD)glGetProcAddress(`glSetMultisamplefvAMD`);
  if (glSetMultisamplefvAMD is null) assert(0, `OpenGL function 'glSetMultisamplefvAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSetMultisamplefvAMD'\n"); }
  glSetMultisamplefvAMD(a0,a1,a2,);
};
__gshared glbfn_glTexStorageSparseAMD glTexStorageSparseAMD = function void (GLenum a0, GLenum a1, GLsizei a2, GLsizei a3, GLsizei a4, GLsizei a5, GLbitfield a6) nothrow {
  glTexStorageSparseAMD = cast(glbfn_glTexStorageSparseAMD)glGetProcAddress(`glTexStorageSparseAMD`);
  if (glTexStorageSparseAMD is null) assert(0, `OpenGL function 'glTexStorageSparseAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexStorageSparseAMD'\n"); }
  glTexStorageSparseAMD(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTextureStorageSparseAMD glTextureStorageSparseAMD = function void (GLuint a0, GLenum a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLsizei a6, GLbitfield a7) nothrow {
  glTextureStorageSparseAMD = cast(glbfn_glTextureStorageSparseAMD)glGetProcAddress(`glTextureStorageSparseAMD`);
  if (glTextureStorageSparseAMD is null) assert(0, `OpenGL function 'glTextureStorageSparseAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorageSparseAMD'\n"); }
  glTextureStorageSparseAMD(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glStencilOpValueAMD glStencilOpValueAMD = function void (GLenum a0, GLuint a1) nothrow {
  glStencilOpValueAMD = cast(glbfn_glStencilOpValueAMD)glGetProcAddress(`glStencilOpValueAMD`);
  if (glStencilOpValueAMD is null) assert(0, `OpenGL function 'glStencilOpValueAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilOpValueAMD'\n"); }
  glStencilOpValueAMD(a0,a1,);
};
__gshared glbfn_glTessellationFactorAMD glTessellationFactorAMD = function void (GLfloat a0) nothrow {
  glTessellationFactorAMD = cast(glbfn_glTessellationFactorAMD)glGetProcAddress(`glTessellationFactorAMD`);
  if (glTessellationFactorAMD is null) assert(0, `OpenGL function 'glTessellationFactorAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTessellationFactorAMD'\n"); }
  glTessellationFactorAMD(a0,);
};
__gshared glbfn_glTessellationModeAMD glTessellationModeAMD = function void (GLenum a0) nothrow {
  glTessellationModeAMD = cast(glbfn_glTessellationModeAMD)glGetProcAddress(`glTessellationModeAMD`);
  if (glTessellationModeAMD is null) assert(0, `OpenGL function 'glTessellationModeAMD' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTessellationModeAMD'\n"); }
  glTessellationModeAMD(a0,);
};
__gshared glbfn_glElementPointerAPPLE glElementPointerAPPLE = function void (GLenum a0, const(void)* a1) nothrow {
  glElementPointerAPPLE = cast(glbfn_glElementPointerAPPLE)glGetProcAddress(`glElementPointerAPPLE`);
  if (glElementPointerAPPLE is null) assert(0, `OpenGL function 'glElementPointerAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glElementPointerAPPLE'\n"); }
  glElementPointerAPPLE(a0,a1,);
};
__gshared glbfn_glDrawElementArrayAPPLE glDrawElementArrayAPPLE = function void (GLenum a0, GLint a1, GLsizei a2) nothrow {
  glDrawElementArrayAPPLE = cast(glbfn_glDrawElementArrayAPPLE)glGetProcAddress(`glDrawElementArrayAPPLE`);
  if (glDrawElementArrayAPPLE is null) assert(0, `OpenGL function 'glDrawElementArrayAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementArrayAPPLE'\n"); }
  glDrawElementArrayAPPLE(a0,a1,a2,);
};
__gshared glbfn_glDrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE = function void (GLenum a0, GLuint a1, GLuint a2, GLint a3, GLsizei a4) nothrow {
  glDrawRangeElementArrayAPPLE = cast(glbfn_glDrawRangeElementArrayAPPLE)glGetProcAddress(`glDrawRangeElementArrayAPPLE`);
  if (glDrawRangeElementArrayAPPLE is null) assert(0, `OpenGL function 'glDrawRangeElementArrayAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawRangeElementArrayAPPLE'\n"); }
  glDrawRangeElementArrayAPPLE(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE = function void (GLenum a0, const(GLint)* a1, const(GLsizei)* a2, GLsizei a3) nothrow {
  glMultiDrawElementArrayAPPLE = cast(glbfn_glMultiDrawElementArrayAPPLE)glGetProcAddress(`glMultiDrawElementArrayAPPLE`);
  if (glMultiDrawElementArrayAPPLE is null) assert(0, `OpenGL function 'glMultiDrawElementArrayAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementArrayAPPLE'\n"); }
  glMultiDrawElementArrayAPPLE(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE = function void (GLenum a0, GLuint a1, GLuint a2, const(GLint)* a3, const(GLsizei)* a4, GLsizei a5) nothrow {
  glMultiDrawRangeElementArrayAPPLE = cast(glbfn_glMultiDrawRangeElementArrayAPPLE)glGetProcAddress(`glMultiDrawRangeElementArrayAPPLE`);
  if (glMultiDrawRangeElementArrayAPPLE is null) assert(0, `OpenGL function 'glMultiDrawRangeElementArrayAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawRangeElementArrayAPPLE'\n"); }
  glMultiDrawRangeElementArrayAPPLE(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGenFencesAPPLE glGenFencesAPPLE = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenFencesAPPLE = cast(glbfn_glGenFencesAPPLE)glGetProcAddress(`glGenFencesAPPLE`);
  if (glGenFencesAPPLE is null) assert(0, `OpenGL function 'glGenFencesAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenFencesAPPLE'\n"); }
  glGenFencesAPPLE(a0,a1,);
};
__gshared glbfn_glDeleteFencesAPPLE glDeleteFencesAPPLE = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteFencesAPPLE = cast(glbfn_glDeleteFencesAPPLE)glGetProcAddress(`glDeleteFencesAPPLE`);
  if (glDeleteFencesAPPLE is null) assert(0, `OpenGL function 'glDeleteFencesAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteFencesAPPLE'\n"); }
  glDeleteFencesAPPLE(a0,a1,);
};
__gshared glbfn_glSetFenceAPPLE glSetFenceAPPLE = function void (GLuint a0) nothrow {
  glSetFenceAPPLE = cast(glbfn_glSetFenceAPPLE)glGetProcAddress(`glSetFenceAPPLE`);
  if (glSetFenceAPPLE is null) assert(0, `OpenGL function 'glSetFenceAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSetFenceAPPLE'\n"); }
  glSetFenceAPPLE(a0,);
};
__gshared glbfn_glIsFenceAPPLE glIsFenceAPPLE = function GLboolean (GLuint a0) nothrow {
  glIsFenceAPPLE = cast(glbfn_glIsFenceAPPLE)glGetProcAddress(`glIsFenceAPPLE`);
  if (glIsFenceAPPLE is null) assert(0, `OpenGL function 'glIsFenceAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsFenceAPPLE'\n"); }
  return glIsFenceAPPLE(a0,);
};
__gshared glbfn_glTestFenceAPPLE glTestFenceAPPLE = function GLboolean (GLuint a0) nothrow {
  glTestFenceAPPLE = cast(glbfn_glTestFenceAPPLE)glGetProcAddress(`glTestFenceAPPLE`);
  if (glTestFenceAPPLE is null) assert(0, `OpenGL function 'glTestFenceAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTestFenceAPPLE'\n"); }
  return glTestFenceAPPLE(a0,);
};
__gshared glbfn_glFinishFenceAPPLE glFinishFenceAPPLE = function void (GLuint a0) nothrow {
  glFinishFenceAPPLE = cast(glbfn_glFinishFenceAPPLE)glGetProcAddress(`glFinishFenceAPPLE`);
  if (glFinishFenceAPPLE is null) assert(0, `OpenGL function 'glFinishFenceAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFinishFenceAPPLE'\n"); }
  glFinishFenceAPPLE(a0,);
};
__gshared glbfn_glTestObjectAPPLE glTestObjectAPPLE = function GLboolean (GLenum a0, GLuint a1) nothrow {
  glTestObjectAPPLE = cast(glbfn_glTestObjectAPPLE)glGetProcAddress(`glTestObjectAPPLE`);
  if (glTestObjectAPPLE is null) assert(0, `OpenGL function 'glTestObjectAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTestObjectAPPLE'\n"); }
  return glTestObjectAPPLE(a0,a1,);
};
__gshared glbfn_glFinishObjectAPPLE glFinishObjectAPPLE = function void (GLenum a0, GLint a1) nothrow {
  glFinishObjectAPPLE = cast(glbfn_glFinishObjectAPPLE)glGetProcAddress(`glFinishObjectAPPLE`);
  if (glFinishObjectAPPLE is null) assert(0, `OpenGL function 'glFinishObjectAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFinishObjectAPPLE'\n"); }
  glFinishObjectAPPLE(a0,a1,);
};
__gshared glbfn_glBufferParameteriAPPLE glBufferParameteriAPPLE = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glBufferParameteriAPPLE = cast(glbfn_glBufferParameteriAPPLE)glGetProcAddress(`glBufferParameteriAPPLE`);
  if (glBufferParameteriAPPLE is null) assert(0, `OpenGL function 'glBufferParameteriAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferParameteriAPPLE'\n"); }
  glBufferParameteriAPPLE(a0,a1,a2,);
};
__gshared glbfn_glFlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE = function void (GLenum a0, GLintptr a1, GLsizeiptr a2) nothrow {
  glFlushMappedBufferRangeAPPLE = cast(glbfn_glFlushMappedBufferRangeAPPLE)glGetProcAddress(`glFlushMappedBufferRangeAPPLE`);
  if (glFlushMappedBufferRangeAPPLE is null) assert(0, `OpenGL function 'glFlushMappedBufferRangeAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushMappedBufferRangeAPPLE'\n"); }
  glFlushMappedBufferRangeAPPLE(a0,a1,a2,);
};
__gshared glbfn_glObjectPurgeableAPPLE glObjectPurgeableAPPLE = function GLenum (GLenum a0, GLuint a1, GLenum a2) nothrow {
  glObjectPurgeableAPPLE = cast(glbfn_glObjectPurgeableAPPLE)glGetProcAddress(`glObjectPurgeableAPPLE`);
  if (glObjectPurgeableAPPLE is null) assert(0, `OpenGL function 'glObjectPurgeableAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glObjectPurgeableAPPLE'\n"); }
  return glObjectPurgeableAPPLE(a0,a1,a2,);
};
__gshared glbfn_glObjectUnpurgeableAPPLE glObjectUnpurgeableAPPLE = function GLenum (GLenum a0, GLuint a1, GLenum a2) nothrow {
  glObjectUnpurgeableAPPLE = cast(glbfn_glObjectUnpurgeableAPPLE)glGetProcAddress(`glObjectUnpurgeableAPPLE`);
  if (glObjectUnpurgeableAPPLE is null) assert(0, `OpenGL function 'glObjectUnpurgeableAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glObjectUnpurgeableAPPLE'\n"); }
  return glObjectUnpurgeableAPPLE(a0,a1,a2,);
};
__gshared glbfn_glGetObjectParameterivAPPLE glGetObjectParameterivAPPLE = function void (GLenum a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetObjectParameterivAPPLE = cast(glbfn_glGetObjectParameterivAPPLE)glGetProcAddress(`glGetObjectParameterivAPPLE`);
  if (glGetObjectParameterivAPPLE is null) assert(0, `OpenGL function 'glGetObjectParameterivAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectParameterivAPPLE'\n"); }
  glGetObjectParameterivAPPLE(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureRangeAPPLE glTextureRangeAPPLE = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glTextureRangeAPPLE = cast(glbfn_glTextureRangeAPPLE)glGetProcAddress(`glTextureRangeAPPLE`);
  if (glTextureRangeAPPLE is null) assert(0, `OpenGL function 'glTextureRangeAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureRangeAPPLE'\n"); }
  glTextureRangeAPPLE(a0,a1,a2,);
};
__gshared glbfn_glGetTexParameterPointervAPPLE glGetTexParameterPointervAPPLE = function void (GLenum a0, GLenum a1, void** a2) nothrow {
  glGetTexParameterPointervAPPLE = cast(glbfn_glGetTexParameterPointervAPPLE)glGetProcAddress(`glGetTexParameterPointervAPPLE`);
  if (glGetTexParameterPointervAPPLE is null) assert(0, `OpenGL function 'glGetTexParameterPointervAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameterPointervAPPLE'\n"); }
  glGetTexParameterPointervAPPLE(a0,a1,a2,);
};
__gshared glbfn_glBindVertexArrayAPPLE glBindVertexArrayAPPLE = function void (GLuint a0) nothrow {
  glBindVertexArrayAPPLE = cast(glbfn_glBindVertexArrayAPPLE)glGetProcAddress(`glBindVertexArrayAPPLE`);
  if (glBindVertexArrayAPPLE is null) assert(0, `OpenGL function 'glBindVertexArrayAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindVertexArrayAPPLE'\n"); }
  glBindVertexArrayAPPLE(a0,);
};
__gshared glbfn_glDeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteVertexArraysAPPLE = cast(glbfn_glDeleteVertexArraysAPPLE)glGetProcAddress(`glDeleteVertexArraysAPPLE`);
  if (glDeleteVertexArraysAPPLE is null) assert(0, `OpenGL function 'glDeleteVertexArraysAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteVertexArraysAPPLE'\n"); }
  glDeleteVertexArraysAPPLE(a0,a1,);
};
__gshared glbfn_glGenVertexArraysAPPLE glGenVertexArraysAPPLE = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenVertexArraysAPPLE = cast(glbfn_glGenVertexArraysAPPLE)glGetProcAddress(`glGenVertexArraysAPPLE`);
  if (glGenVertexArraysAPPLE is null) assert(0, `OpenGL function 'glGenVertexArraysAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenVertexArraysAPPLE'\n"); }
  glGenVertexArraysAPPLE(a0,a1,);
};
__gshared glbfn_glIsVertexArrayAPPLE glIsVertexArrayAPPLE = function GLboolean (GLuint a0) nothrow {
  glIsVertexArrayAPPLE = cast(glbfn_glIsVertexArrayAPPLE)glGetProcAddress(`glIsVertexArrayAPPLE`);
  if (glIsVertexArrayAPPLE is null) assert(0, `OpenGL function 'glIsVertexArrayAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsVertexArrayAPPLE'\n"); }
  return glIsVertexArrayAPPLE(a0,);
};
__gshared glbfn_glVertexArrayRangeAPPLE glVertexArrayRangeAPPLE = function void (GLsizei a0, void* a1) nothrow {
  glVertexArrayRangeAPPLE = cast(glbfn_glVertexArrayRangeAPPLE)glGetProcAddress(`glVertexArrayRangeAPPLE`);
  if (glVertexArrayRangeAPPLE is null) assert(0, `OpenGL function 'glVertexArrayRangeAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayRangeAPPLE'\n"); }
  glVertexArrayRangeAPPLE(a0,a1,);
};
__gshared glbfn_glFlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE = function void (GLsizei a0, void* a1) nothrow {
  glFlushVertexArrayRangeAPPLE = cast(glbfn_glFlushVertexArrayRangeAPPLE)glGetProcAddress(`glFlushVertexArrayRangeAPPLE`);
  if (glFlushVertexArrayRangeAPPLE is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushVertexArrayRangeAPPLE'\n"); }
  glFlushVertexArrayRangeAPPLE(a0,a1,);
};
__gshared glbfn_glVertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE = function void (GLenum a0, GLint a1) nothrow {
  glVertexArrayParameteriAPPLE = cast(glbfn_glVertexArrayParameteriAPPLE)glGetProcAddress(`glVertexArrayParameteriAPPLE`);
  if (glVertexArrayParameteriAPPLE is null) assert(0, `OpenGL function 'glVertexArrayParameteriAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayParameteriAPPLE'\n"); }
  glVertexArrayParameteriAPPLE(a0,a1,);
};
__gshared glbfn_glEnableVertexAttribAPPLE glEnableVertexAttribAPPLE = function void (GLuint a0, GLenum a1) nothrow {
  glEnableVertexAttribAPPLE = cast(glbfn_glEnableVertexAttribAPPLE)glGetProcAddress(`glEnableVertexAttribAPPLE`);
  if (glEnableVertexAttribAPPLE is null) assert(0, `OpenGL function 'glEnableVertexAttribAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableVertexAttribAPPLE'\n"); }
  glEnableVertexAttribAPPLE(a0,a1,);
};
__gshared glbfn_glDisableVertexAttribAPPLE glDisableVertexAttribAPPLE = function void (GLuint a0, GLenum a1) nothrow {
  glDisableVertexAttribAPPLE = cast(glbfn_glDisableVertexAttribAPPLE)glGetProcAddress(`glDisableVertexAttribAPPLE`);
  if (glDisableVertexAttribAPPLE is null) assert(0, `OpenGL function 'glDisableVertexAttribAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableVertexAttribAPPLE'\n"); }
  glDisableVertexAttribAPPLE(a0,a1,);
};
__gshared glbfn_glIsVertexAttribEnabledAPPLE glIsVertexAttribEnabledAPPLE = function GLboolean (GLuint a0, GLenum a1) nothrow {
  glIsVertexAttribEnabledAPPLE = cast(glbfn_glIsVertexAttribEnabledAPPLE)glGetProcAddress(`glIsVertexAttribEnabledAPPLE`);
  if (glIsVertexAttribEnabledAPPLE is null) assert(0, `OpenGL function 'glIsVertexAttribEnabledAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsVertexAttribEnabledAPPLE'\n"); }
  return glIsVertexAttribEnabledAPPLE(a0,a1,);
};
__gshared glbfn_glMapVertexAttrib1dAPPLE glMapVertexAttrib1dAPPLE = function void (GLuint a0, GLuint a1, GLdouble a2, GLdouble a3, GLint a4, GLint a5, const(GLdouble)* a6) nothrow {
  glMapVertexAttrib1dAPPLE = cast(glbfn_glMapVertexAttrib1dAPPLE)glGetProcAddress(`glMapVertexAttrib1dAPPLE`);
  if (glMapVertexAttrib1dAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib1dAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapVertexAttrib1dAPPLE'\n"); }
  glMapVertexAttrib1dAPPLE(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMapVertexAttrib1fAPPLE glMapVertexAttrib1fAPPLE = function void (GLuint a0, GLuint a1, GLfloat a2, GLfloat a3, GLint a4, GLint a5, const(GLfloat)* a6) nothrow {
  glMapVertexAttrib1fAPPLE = cast(glbfn_glMapVertexAttrib1fAPPLE)glGetProcAddress(`glMapVertexAttrib1fAPPLE`);
  if (glMapVertexAttrib1fAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib1fAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapVertexAttrib1fAPPLE'\n"); }
  glMapVertexAttrib1fAPPLE(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMapVertexAttrib2dAPPLE glMapVertexAttrib2dAPPLE = function void (GLuint a0, GLuint a1, GLdouble a2, GLdouble a3, GLint a4, GLint a5, GLdouble a6, GLdouble a7, GLint a8, GLint a9, const(GLdouble)* a10) nothrow {
  glMapVertexAttrib2dAPPLE = cast(glbfn_glMapVertexAttrib2dAPPLE)glGetProcAddress(`glMapVertexAttrib2dAPPLE`);
  if (glMapVertexAttrib2dAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib2dAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapVertexAttrib2dAPPLE'\n"); }
  glMapVertexAttrib2dAPPLE(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glMapVertexAttrib2fAPPLE glMapVertexAttrib2fAPPLE = function void (GLuint a0, GLuint a1, GLfloat a2, GLfloat a3, GLint a4, GLint a5, GLfloat a6, GLfloat a7, GLint a8, GLint a9, const(GLfloat)* a10) nothrow {
  glMapVertexAttrib2fAPPLE = cast(glbfn_glMapVertexAttrib2fAPPLE)glGetProcAddress(`glMapVertexAttrib2fAPPLE`);
  if (glMapVertexAttrib2fAPPLE is null) assert(0, `OpenGL function 'glMapVertexAttrib2fAPPLE' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapVertexAttrib2fAPPLE'\n"); }
  glMapVertexAttrib2fAPPLE(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glPrimitiveBoundingBoxARB glPrimitiveBoundingBoxARB = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7) nothrow {
  glPrimitiveBoundingBoxARB = cast(glbfn_glPrimitiveBoundingBoxARB)glGetProcAddress(`glPrimitiveBoundingBoxARB`);
  if (glPrimitiveBoundingBoxARB is null) assert(0, `OpenGL function 'glPrimitiveBoundingBoxARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPrimitiveBoundingBoxARB'\n"); }
  glPrimitiveBoundingBoxARB(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetTextureHandleARB glGetTextureHandleARB = function GLuint64 (GLuint a0) nothrow {
  glGetTextureHandleARB = cast(glbfn_glGetTextureHandleARB)glGetProcAddress(`glGetTextureHandleARB`);
  if (glGetTextureHandleARB is null) assert(0, `OpenGL function 'glGetTextureHandleARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureHandleARB'\n"); }
  return glGetTextureHandleARB(a0,);
};
__gshared glbfn_glGetTextureSamplerHandleARB glGetTextureSamplerHandleARB = function GLuint64 (GLuint a0, GLuint a1) nothrow {
  glGetTextureSamplerHandleARB = cast(glbfn_glGetTextureSamplerHandleARB)glGetProcAddress(`glGetTextureSamplerHandleARB`);
  if (glGetTextureSamplerHandleARB is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureSamplerHandleARB'\n"); }
  return glGetTextureSamplerHandleARB(a0,a1,);
};
__gshared glbfn_glMakeTextureHandleResidentARB glMakeTextureHandleResidentARB = function void (GLuint64 a0) nothrow {
  glMakeTextureHandleResidentARB = cast(glbfn_glMakeTextureHandleResidentARB)glGetProcAddress(`glMakeTextureHandleResidentARB`);
  if (glMakeTextureHandleResidentARB is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeTextureHandleResidentARB'\n"); }
  glMakeTextureHandleResidentARB(a0,);
};
__gshared glbfn_glMakeTextureHandleNonResidentARB glMakeTextureHandleNonResidentARB = function void (GLuint64 a0) nothrow {
  glMakeTextureHandleNonResidentARB = cast(glbfn_glMakeTextureHandleNonResidentARB)glGetProcAddress(`glMakeTextureHandleNonResidentARB`);
  if (glMakeTextureHandleNonResidentARB is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeTextureHandleNonResidentARB'\n"); }
  glMakeTextureHandleNonResidentARB(a0,);
};
__gshared glbfn_glGetImageHandleARB glGetImageHandleARB = function GLuint64 (GLuint a0, GLint a1, GLboolean a2, GLint a3, GLenum a4) nothrow {
  glGetImageHandleARB = cast(glbfn_glGetImageHandleARB)glGetProcAddress(`glGetImageHandleARB`);
  if (glGetImageHandleARB is null) assert(0, `OpenGL function 'glGetImageHandleARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetImageHandleARB'\n"); }
  return glGetImageHandleARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMakeImageHandleResidentARB glMakeImageHandleResidentARB = function void (GLuint64 a0, GLenum a1) nothrow {
  glMakeImageHandleResidentARB = cast(glbfn_glMakeImageHandleResidentARB)glGetProcAddress(`glMakeImageHandleResidentARB`);
  if (glMakeImageHandleResidentARB is null) assert(0, `OpenGL function 'glMakeImageHandleResidentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeImageHandleResidentARB'\n"); }
  glMakeImageHandleResidentARB(a0,a1,);
};
__gshared glbfn_glMakeImageHandleNonResidentARB glMakeImageHandleNonResidentARB = function void (GLuint64 a0) nothrow {
  glMakeImageHandleNonResidentARB = cast(glbfn_glMakeImageHandleNonResidentARB)glGetProcAddress(`glMakeImageHandleNonResidentARB`);
  if (glMakeImageHandleNonResidentARB is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeImageHandleNonResidentARB'\n"); }
  glMakeImageHandleNonResidentARB(a0,);
};
__gshared glbfn_glUniformHandleui64ARB glUniformHandleui64ARB = function void (GLint a0, GLuint64 a1) nothrow {
  glUniformHandleui64ARB = cast(glbfn_glUniformHandleui64ARB)glGetProcAddress(`glUniformHandleui64ARB`);
  if (glUniformHandleui64ARB is null) assert(0, `OpenGL function 'glUniformHandleui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformHandleui64ARB'\n"); }
  glUniformHandleui64ARB(a0,a1,);
};
__gshared glbfn_glUniformHandleui64vARB glUniformHandleui64vARB = function void (GLint a0, GLsizei a1, const(GLuint64)* a2) nothrow {
  glUniformHandleui64vARB = cast(glbfn_glUniformHandleui64vARB)glGetProcAddress(`glUniformHandleui64vARB`);
  if (glUniformHandleui64vARB is null) assert(0, `OpenGL function 'glUniformHandleui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformHandleui64vARB'\n"); }
  glUniformHandleui64vARB(a0,a1,a2,);
};
__gshared glbfn_glProgramUniformHandleui64ARB glProgramUniformHandleui64ARB = function void (GLuint a0, GLint a1, GLuint64 a2) nothrow {
  glProgramUniformHandleui64ARB = cast(glbfn_glProgramUniformHandleui64ARB)glGetProcAddress(`glProgramUniformHandleui64ARB`);
  if (glProgramUniformHandleui64ARB is null) assert(0, `OpenGL function 'glProgramUniformHandleui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformHandleui64ARB'\n"); }
  glProgramUniformHandleui64ARB(a0,a1,a2,);
};
__gshared glbfn_glProgramUniformHandleui64vARB glProgramUniformHandleui64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64)* a3) nothrow {
  glProgramUniformHandleui64vARB = cast(glbfn_glProgramUniformHandleui64vARB)glGetProcAddress(`glProgramUniformHandleui64vARB`);
  if (glProgramUniformHandleui64vARB is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformHandleui64vARB'\n"); }
  glProgramUniformHandleui64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glIsTextureHandleResidentARB glIsTextureHandleResidentARB = function GLboolean (GLuint64 a0) nothrow {
  glIsTextureHandleResidentARB = cast(glbfn_glIsTextureHandleResidentARB)glGetProcAddress(`glIsTextureHandleResidentARB`);
  if (glIsTextureHandleResidentARB is null) assert(0, `OpenGL function 'glIsTextureHandleResidentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsTextureHandleResidentARB'\n"); }
  return glIsTextureHandleResidentARB(a0,);
};
__gshared glbfn_glIsImageHandleResidentARB glIsImageHandleResidentARB = function GLboolean (GLuint64 a0) nothrow {
  glIsImageHandleResidentARB = cast(glbfn_glIsImageHandleResidentARB)glGetProcAddress(`glIsImageHandleResidentARB`);
  if (glIsImageHandleResidentARB is null) assert(0, `OpenGL function 'glIsImageHandleResidentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsImageHandleResidentARB'\n"); }
  return glIsImageHandleResidentARB(a0,);
};
__gshared glbfn_glVertexAttribL1ui64ARB glVertexAttribL1ui64ARB = function void (GLuint a0, GLuint64EXT a1) nothrow {
  glVertexAttribL1ui64ARB = cast(glbfn_glVertexAttribL1ui64ARB)glGetProcAddress(`glVertexAttribL1ui64ARB`);
  if (glVertexAttribL1ui64ARB is null) assert(0, `OpenGL function 'glVertexAttribL1ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1ui64ARB'\n"); }
  glVertexAttribL1ui64ARB(a0,a1,);
};
__gshared glbfn_glVertexAttribL1ui64vARB glVertexAttribL1ui64vARB = function void (GLuint a0, const(GLuint64EXT)* a1) nothrow {
  glVertexAttribL1ui64vARB = cast(glbfn_glVertexAttribL1ui64vARB)glGetProcAddress(`glVertexAttribL1ui64vARB`);
  if (glVertexAttribL1ui64vARB is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1ui64vARB'\n"); }
  glVertexAttribL1ui64vARB(a0,a1,);
};
__gshared glbfn_glGetVertexAttribLui64vARB glGetVertexAttribLui64vARB = function void (GLuint a0, GLenum a1, GLuint64EXT* a2) nothrow {
  glGetVertexAttribLui64vARB = cast(glbfn_glGetVertexAttribLui64vARB)glGetProcAddress(`glGetVertexAttribLui64vARB`);
  if (glGetVertexAttribLui64vARB is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribLui64vARB'\n"); }
  glGetVertexAttribLui64vARB(a0,a1,a2,);
};
__gshared glbfn_glClampColorARB glClampColorARB = function void (GLenum a0, GLenum a1) nothrow {
  glClampColorARB = cast(glbfn_glClampColorARB)glGetProcAddress(`glClampColorARB`);
  if (glClampColorARB is null) assert(0, `OpenGL function 'glClampColorARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClampColorARB'\n"); }
  glClampColorARB(a0,a1,);
};
__gshared glbfn_glDispatchComputeGroupSizeARB glDispatchComputeGroupSizeARB = function void (GLuint a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5) nothrow {
  glDispatchComputeGroupSizeARB = cast(glbfn_glDispatchComputeGroupSizeARB)glGetProcAddress(`glDispatchComputeGroupSizeARB`);
  if (glDispatchComputeGroupSizeARB is null) assert(0, `OpenGL function 'glDispatchComputeGroupSizeARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDispatchComputeGroupSizeARB'\n"); }
  glDispatchComputeGroupSizeARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glDebugMessageControlARB glDebugMessageControlARB = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, const(GLuint)* a4, GLboolean a5) nothrow {
  glDebugMessageControlARB = cast(glbfn_glDebugMessageControlARB)glGetProcAddress(`glDebugMessageControlARB`);
  if (glDebugMessageControlARB is null) assert(0, `OpenGL function 'glDebugMessageControlARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageControlARB'\n"); }
  glDebugMessageControlARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glDebugMessageInsertARB glDebugMessageInsertARB = function void (GLenum a0, GLenum a1, GLuint a2, GLenum a3, GLsizei a4, const(GLchar)* a5) nothrow {
  glDebugMessageInsertARB = cast(glbfn_glDebugMessageInsertARB)glGetProcAddress(`glDebugMessageInsertARB`);
  if (glDebugMessageInsertARB is null) assert(0, `OpenGL function 'glDebugMessageInsertARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageInsertARB'\n"); }
  glDebugMessageInsertARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetDebugMessageLogARB glGetDebugMessageLogARB = function GLuint (GLuint a0, GLsizei a1, GLenum* a2, GLenum* a3, GLuint* a4, GLenum* a5, GLsizei* a6, GLchar* a7) nothrow {
  glGetDebugMessageLogARB = cast(glbfn_glGetDebugMessageLogARB)glGetProcAddress(`glGetDebugMessageLogARB`);
  if (glGetDebugMessageLogARB is null) assert(0, `OpenGL function 'glGetDebugMessageLogARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDebugMessageLogARB'\n"); }
  return glGetDebugMessageLogARB(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glDrawBuffersARB glDrawBuffersARB = function void (GLsizei a0, const(GLenum)* a1) nothrow {
  glDrawBuffersARB = cast(glbfn_glDrawBuffersARB)glGetProcAddress(`glDrawBuffersARB`);
  if (glDrawBuffersARB is null) assert(0, `OpenGL function 'glDrawBuffersARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawBuffersARB'\n"); }
  glDrawBuffersARB(a0,a1,);
};
__gshared glbfn_glBlendEquationiARB glBlendEquationiARB = function void (GLuint a0, GLenum a1) nothrow {
  glBlendEquationiARB = cast(glbfn_glBlendEquationiARB)glGetProcAddress(`glBlendEquationiARB`);
  if (glBlendEquationiARB is null) assert(0, `OpenGL function 'glBlendEquationiARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationiARB'\n"); }
  glBlendEquationiARB(a0,a1,);
};
__gshared glbfn_glBlendEquationSeparateiARB glBlendEquationSeparateiARB = function void (GLuint a0, GLenum a1, GLenum a2) nothrow {
  glBlendEquationSeparateiARB = cast(glbfn_glBlendEquationSeparateiARB)glGetProcAddress(`glBlendEquationSeparateiARB`);
  if (glBlendEquationSeparateiARB is null) assert(0, `OpenGL function 'glBlendEquationSeparateiARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationSeparateiARB'\n"); }
  glBlendEquationSeparateiARB(a0,a1,a2,);
};
__gshared glbfn_glBlendFunciARB glBlendFunciARB = function void (GLuint a0, GLenum a1, GLenum a2) nothrow {
  glBlendFunciARB = cast(glbfn_glBlendFunciARB)glGetProcAddress(`glBlendFunciARB`);
  if (glBlendFunciARB is null) assert(0, `OpenGL function 'glBlendFunciARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFunciARB'\n"); }
  glBlendFunciARB(a0,a1,a2,);
};
__gshared glbfn_glBlendFuncSeparateiARB glBlendFuncSeparateiARB = function void (GLuint a0, GLenum a1, GLenum a2, GLenum a3, GLenum a4) nothrow {
  glBlendFuncSeparateiARB = cast(glbfn_glBlendFuncSeparateiARB)glGetProcAddress(`glBlendFuncSeparateiARB`);
  if (glBlendFuncSeparateiARB is null) assert(0, `OpenGL function 'glBlendFuncSeparateiARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFuncSeparateiARB'\n"); }
  glBlendFuncSeparateiARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawArraysInstancedARB glDrawArraysInstancedARB = function void (GLenum a0, GLint a1, GLsizei a2, GLsizei a3) nothrow {
  glDrawArraysInstancedARB = cast(glbfn_glDrawArraysInstancedARB)glGetProcAddress(`glDrawArraysInstancedARB`);
  if (glDrawArraysInstancedARB is null) assert(0, `OpenGL function 'glDrawArraysInstancedARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawArraysInstancedARB'\n"); }
  glDrawArraysInstancedARB(a0,a1,a2,a3,);
};
__gshared glbfn_glDrawElementsInstancedARB glDrawElementsInstancedARB = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLsizei a4) nothrow {
  glDrawElementsInstancedARB = cast(glbfn_glDrawElementsInstancedARB)glGetProcAddress(`glDrawElementsInstancedARB`);
  if (glDrawElementsInstancedARB is null) assert(0, `OpenGL function 'glDrawElementsInstancedARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsInstancedARB'\n"); }
  glDrawElementsInstancedARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramStringARB glProgramStringARB = function void (GLenum a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glProgramStringARB = cast(glbfn_glProgramStringARB)glGetProcAddress(`glProgramStringARB`);
  if (glProgramStringARB is null) assert(0, `OpenGL function 'glProgramStringARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramStringARB'\n"); }
  glProgramStringARB(a0,a1,a2,a3,);
};
__gshared glbfn_glBindProgramARB glBindProgramARB = function void (GLenum a0, GLuint a1) nothrow {
  glBindProgramARB = cast(glbfn_glBindProgramARB)glGetProcAddress(`glBindProgramARB`);
  if (glBindProgramARB is null) assert(0, `OpenGL function 'glBindProgramARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindProgramARB'\n"); }
  glBindProgramARB(a0,a1,);
};
__gshared glbfn_glDeleteProgramsARB glDeleteProgramsARB = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteProgramsARB = cast(glbfn_glDeleteProgramsARB)glGetProcAddress(`glDeleteProgramsARB`);
  if (glDeleteProgramsARB is null) assert(0, `OpenGL function 'glDeleteProgramsARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteProgramsARB'\n"); }
  glDeleteProgramsARB(a0,a1,);
};
__gshared glbfn_glGenProgramsARB glGenProgramsARB = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenProgramsARB = cast(glbfn_glGenProgramsARB)glGetProcAddress(`glGenProgramsARB`);
  if (glGenProgramsARB is null) assert(0, `OpenGL function 'glGenProgramsARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenProgramsARB'\n"); }
  glGenProgramsARB(a0,a1,);
};
__gshared glbfn_glProgramEnvParameter4dARB glProgramEnvParameter4dARB = function void (GLenum a0, GLuint a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5) nothrow {
  glProgramEnvParameter4dARB = cast(glbfn_glProgramEnvParameter4dARB)glGetProcAddress(`glProgramEnvParameter4dARB`);
  if (glProgramEnvParameter4dARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameter4dARB'\n"); }
  glProgramEnvParameter4dARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramEnvParameter4dvARB glProgramEnvParameter4dvARB = function void (GLenum a0, GLuint a1, const(GLdouble)* a2) nothrow {
  glProgramEnvParameter4dvARB = cast(glbfn_glProgramEnvParameter4dvARB)glGetProcAddress(`glProgramEnvParameter4dvARB`);
  if (glProgramEnvParameter4dvARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameter4dvARB'\n"); }
  glProgramEnvParameter4dvARB(a0,a1,a2,);
};
__gshared glbfn_glProgramEnvParameter4fARB glProgramEnvParameter4fARB = function void (GLenum a0, GLuint a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glProgramEnvParameter4fARB = cast(glbfn_glProgramEnvParameter4fARB)glGetProcAddress(`glProgramEnvParameter4fARB`);
  if (glProgramEnvParameter4fARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameter4fARB'\n"); }
  glProgramEnvParameter4fARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramEnvParameter4fvARB glProgramEnvParameter4fvARB = function void (GLenum a0, GLuint a1, const(GLfloat)* a2) nothrow {
  glProgramEnvParameter4fvARB = cast(glbfn_glProgramEnvParameter4fvARB)glGetProcAddress(`glProgramEnvParameter4fvARB`);
  if (glProgramEnvParameter4fvARB is null) assert(0, `OpenGL function 'glProgramEnvParameter4fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameter4fvARB'\n"); }
  glProgramEnvParameter4fvARB(a0,a1,a2,);
};
__gshared glbfn_glProgramLocalParameter4dARB glProgramLocalParameter4dARB = function void (GLenum a0, GLuint a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5) nothrow {
  glProgramLocalParameter4dARB = cast(glbfn_glProgramLocalParameter4dARB)glGetProcAddress(`glProgramLocalParameter4dARB`);
  if (glProgramLocalParameter4dARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameter4dARB'\n"); }
  glProgramLocalParameter4dARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramLocalParameter4dvARB glProgramLocalParameter4dvARB = function void (GLenum a0, GLuint a1, const(GLdouble)* a2) nothrow {
  glProgramLocalParameter4dvARB = cast(glbfn_glProgramLocalParameter4dvARB)glGetProcAddress(`glProgramLocalParameter4dvARB`);
  if (glProgramLocalParameter4dvARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameter4dvARB'\n"); }
  glProgramLocalParameter4dvARB(a0,a1,a2,);
};
__gshared glbfn_glProgramLocalParameter4fARB glProgramLocalParameter4fARB = function void (GLenum a0, GLuint a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glProgramLocalParameter4fARB = cast(glbfn_glProgramLocalParameter4fARB)glGetProcAddress(`glProgramLocalParameter4fARB`);
  if (glProgramLocalParameter4fARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameter4fARB'\n"); }
  glProgramLocalParameter4fARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramLocalParameter4fvARB glProgramLocalParameter4fvARB = function void (GLenum a0, GLuint a1, const(GLfloat)* a2) nothrow {
  glProgramLocalParameter4fvARB = cast(glbfn_glProgramLocalParameter4fvARB)glGetProcAddress(`glProgramLocalParameter4fvARB`);
  if (glProgramLocalParameter4fvARB is null) assert(0, `OpenGL function 'glProgramLocalParameter4fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameter4fvARB'\n"); }
  glProgramLocalParameter4fvARB(a0,a1,a2,);
};
__gshared glbfn_glGetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB = function void (GLenum a0, GLuint a1, GLdouble* a2) nothrow {
  glGetProgramEnvParameterdvARB = cast(glbfn_glGetProgramEnvParameterdvARB)glGetProcAddress(`glGetProgramEnvParameterdvARB`);
  if (glGetProgramEnvParameterdvARB is null) assert(0, `OpenGL function 'glGetProgramEnvParameterdvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramEnvParameterdvARB'\n"); }
  glGetProgramEnvParameterdvARB(a0,a1,a2,);
};
__gshared glbfn_glGetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB = function void (GLenum a0, GLuint a1, GLfloat* a2) nothrow {
  glGetProgramEnvParameterfvARB = cast(glbfn_glGetProgramEnvParameterfvARB)glGetProcAddress(`glGetProgramEnvParameterfvARB`);
  if (glGetProgramEnvParameterfvARB is null) assert(0, `OpenGL function 'glGetProgramEnvParameterfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramEnvParameterfvARB'\n"); }
  glGetProgramEnvParameterfvARB(a0,a1,a2,);
};
__gshared glbfn_glGetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB = function void (GLenum a0, GLuint a1, GLdouble* a2) nothrow {
  glGetProgramLocalParameterdvARB = cast(glbfn_glGetProgramLocalParameterdvARB)glGetProcAddress(`glGetProgramLocalParameterdvARB`);
  if (glGetProgramLocalParameterdvARB is null) assert(0, `OpenGL function 'glGetProgramLocalParameterdvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramLocalParameterdvARB'\n"); }
  glGetProgramLocalParameterdvARB(a0,a1,a2,);
};
__gshared glbfn_glGetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB = function void (GLenum a0, GLuint a1, GLfloat* a2) nothrow {
  glGetProgramLocalParameterfvARB = cast(glbfn_glGetProgramLocalParameterfvARB)glGetProcAddress(`glGetProgramLocalParameterfvARB`);
  if (glGetProgramLocalParameterfvARB is null) assert(0, `OpenGL function 'glGetProgramLocalParameterfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramLocalParameterfvARB'\n"); }
  glGetProgramLocalParameterfvARB(a0,a1,a2,);
};
__gshared glbfn_glGetProgramivARB glGetProgramivARB = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetProgramivARB = cast(glbfn_glGetProgramivARB)glGetProcAddress(`glGetProgramivARB`);
  if (glGetProgramivARB is null) assert(0, `OpenGL function 'glGetProgramivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramivARB'\n"); }
  glGetProgramivARB(a0,a1,a2,);
};
__gshared glbfn_glGetProgramStringARB glGetProgramStringARB = function void (GLenum a0, GLenum a1, void* a2) nothrow {
  glGetProgramStringARB = cast(glbfn_glGetProgramStringARB)glGetProcAddress(`glGetProgramStringARB`);
  if (glGetProgramStringARB is null) assert(0, `OpenGL function 'glGetProgramStringARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramStringARB'\n"); }
  glGetProgramStringARB(a0,a1,a2,);
};
__gshared glbfn_glIsProgramARB glIsProgramARB = function GLboolean (GLuint a0) nothrow {
  glIsProgramARB = cast(glbfn_glIsProgramARB)glGetProcAddress(`glIsProgramARB`);
  if (glIsProgramARB is null) assert(0, `OpenGL function 'glIsProgramARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsProgramARB'\n"); }
  return glIsProgramARB(a0,);
};
__gshared glbfn_glProgramParameteriARB glProgramParameteriARB = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glProgramParameteriARB = cast(glbfn_glProgramParameteriARB)glGetProcAddress(`glProgramParameteriARB`);
  if (glProgramParameteriARB is null) assert(0, `OpenGL function 'glProgramParameteriARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameteriARB'\n"); }
  glProgramParameteriARB(a0,a1,a2,);
};
__gshared glbfn_glFramebufferTextureARB glFramebufferTextureARB = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3) nothrow {
  glFramebufferTextureARB = cast(glbfn_glFramebufferTextureARB)glGetProcAddress(`glFramebufferTextureARB`);
  if (glFramebufferTextureARB is null) assert(0, `OpenGL function 'glFramebufferTextureARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureARB'\n"); }
  glFramebufferTextureARB(a0,a1,a2,a3,);
};
__gshared glbfn_glFramebufferTextureLayerARB glFramebufferTextureLayerARB = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3, GLint a4) nothrow {
  glFramebufferTextureLayerARB = cast(glbfn_glFramebufferTextureLayerARB)glGetProcAddress(`glFramebufferTextureLayerARB`);
  if (glFramebufferTextureLayerARB is null) assert(0, `OpenGL function 'glFramebufferTextureLayerARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureLayerARB'\n"); }
  glFramebufferTextureLayerARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glFramebufferTextureFaceARB glFramebufferTextureFaceARB = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3, GLenum a4) nothrow {
  glFramebufferTextureFaceARB = cast(glbfn_glFramebufferTextureFaceARB)glGetProcAddress(`glFramebufferTextureFaceARB`);
  if (glFramebufferTextureFaceARB is null) assert(0, `OpenGL function 'glFramebufferTextureFaceARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureFaceARB'\n"); }
  glFramebufferTextureFaceARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1i64ARB glUniform1i64ARB = function void (GLint a0, GLint64 a1) nothrow {
  glUniform1i64ARB = cast(glbfn_glUniform1i64ARB)glGetProcAddress(`glUniform1i64ARB`);
  if (glUniform1i64ARB is null) assert(0, `OpenGL function 'glUniform1i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1i64ARB'\n"); }
  glUniform1i64ARB(a0,a1,);
};
__gshared glbfn_glUniform2i64ARB glUniform2i64ARB = function void (GLint a0, GLint64 a1, GLint64 a2) nothrow {
  glUniform2i64ARB = cast(glbfn_glUniform2i64ARB)glGetProcAddress(`glUniform2i64ARB`);
  if (glUniform2i64ARB is null) assert(0, `OpenGL function 'glUniform2i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2i64ARB'\n"); }
  glUniform2i64ARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3i64ARB glUniform3i64ARB = function void (GLint a0, GLint64 a1, GLint64 a2, GLint64 a3) nothrow {
  glUniform3i64ARB = cast(glbfn_glUniform3i64ARB)glGetProcAddress(`glUniform3i64ARB`);
  if (glUniform3i64ARB is null) assert(0, `OpenGL function 'glUniform3i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3i64ARB'\n"); }
  glUniform3i64ARB(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4i64ARB glUniform4i64ARB = function void (GLint a0, GLint64 a1, GLint64 a2, GLint64 a3, GLint64 a4) nothrow {
  glUniform4i64ARB = cast(glbfn_glUniform4i64ARB)glGetProcAddress(`glUniform4i64ARB`);
  if (glUniform4i64ARB is null) assert(0, `OpenGL function 'glUniform4i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4i64ARB'\n"); }
  glUniform4i64ARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1i64vARB glUniform1i64vARB = function void (GLint a0, GLsizei a1, const(GLint64)* a2) nothrow {
  glUniform1i64vARB = cast(glbfn_glUniform1i64vARB)glGetProcAddress(`glUniform1i64vARB`);
  if (glUniform1i64vARB is null) assert(0, `OpenGL function 'glUniform1i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1i64vARB'\n"); }
  glUniform1i64vARB(a0,a1,a2,);
};
__gshared glbfn_glUniform2i64vARB glUniform2i64vARB = function void (GLint a0, GLsizei a1, const(GLint64)* a2) nothrow {
  glUniform2i64vARB = cast(glbfn_glUniform2i64vARB)glGetProcAddress(`glUniform2i64vARB`);
  if (glUniform2i64vARB is null) assert(0, `OpenGL function 'glUniform2i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2i64vARB'\n"); }
  glUniform2i64vARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3i64vARB glUniform3i64vARB = function void (GLint a0, GLsizei a1, const(GLint64)* a2) nothrow {
  glUniform3i64vARB = cast(glbfn_glUniform3i64vARB)glGetProcAddress(`glUniform3i64vARB`);
  if (glUniform3i64vARB is null) assert(0, `OpenGL function 'glUniform3i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3i64vARB'\n"); }
  glUniform3i64vARB(a0,a1,a2,);
};
__gshared glbfn_glUniform4i64vARB glUniform4i64vARB = function void (GLint a0, GLsizei a1, const(GLint64)* a2) nothrow {
  glUniform4i64vARB = cast(glbfn_glUniform4i64vARB)glGetProcAddress(`glUniform4i64vARB`);
  if (glUniform4i64vARB is null) assert(0, `OpenGL function 'glUniform4i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4i64vARB'\n"); }
  glUniform4i64vARB(a0,a1,a2,);
};
__gshared glbfn_glUniform1ui64ARB glUniform1ui64ARB = function void (GLint a0, GLuint64 a1) nothrow {
  glUniform1ui64ARB = cast(glbfn_glUniform1ui64ARB)glGetProcAddress(`glUniform1ui64ARB`);
  if (glUniform1ui64ARB is null) assert(0, `OpenGL function 'glUniform1ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1ui64ARB'\n"); }
  glUniform1ui64ARB(a0,a1,);
};
__gshared glbfn_glUniform2ui64ARB glUniform2ui64ARB = function void (GLint a0, GLuint64 a1, GLuint64 a2) nothrow {
  glUniform2ui64ARB = cast(glbfn_glUniform2ui64ARB)glGetProcAddress(`glUniform2ui64ARB`);
  if (glUniform2ui64ARB is null) assert(0, `OpenGL function 'glUniform2ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2ui64ARB'\n"); }
  glUniform2ui64ARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3ui64ARB glUniform3ui64ARB = function void (GLint a0, GLuint64 a1, GLuint64 a2, GLuint64 a3) nothrow {
  glUniform3ui64ARB = cast(glbfn_glUniform3ui64ARB)glGetProcAddress(`glUniform3ui64ARB`);
  if (glUniform3ui64ARB is null) assert(0, `OpenGL function 'glUniform3ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3ui64ARB'\n"); }
  glUniform3ui64ARB(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4ui64ARB glUniform4ui64ARB = function void (GLint a0, GLuint64 a1, GLuint64 a2, GLuint64 a3, GLuint64 a4) nothrow {
  glUniform4ui64ARB = cast(glbfn_glUniform4ui64ARB)glGetProcAddress(`glUniform4ui64ARB`);
  if (glUniform4ui64ARB is null) assert(0, `OpenGL function 'glUniform4ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4ui64ARB'\n"); }
  glUniform4ui64ARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1ui64vARB glUniform1ui64vARB = function void (GLint a0, GLsizei a1, const(GLuint64)* a2) nothrow {
  glUniform1ui64vARB = cast(glbfn_glUniform1ui64vARB)glGetProcAddress(`glUniform1ui64vARB`);
  if (glUniform1ui64vARB is null) assert(0, `OpenGL function 'glUniform1ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1ui64vARB'\n"); }
  glUniform1ui64vARB(a0,a1,a2,);
};
__gshared glbfn_glUniform2ui64vARB glUniform2ui64vARB = function void (GLint a0, GLsizei a1, const(GLuint64)* a2) nothrow {
  glUniform2ui64vARB = cast(glbfn_glUniform2ui64vARB)glGetProcAddress(`glUniform2ui64vARB`);
  if (glUniform2ui64vARB is null) assert(0, `OpenGL function 'glUniform2ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2ui64vARB'\n"); }
  glUniform2ui64vARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3ui64vARB glUniform3ui64vARB = function void (GLint a0, GLsizei a1, const(GLuint64)* a2) nothrow {
  glUniform3ui64vARB = cast(glbfn_glUniform3ui64vARB)glGetProcAddress(`glUniform3ui64vARB`);
  if (glUniform3ui64vARB is null) assert(0, `OpenGL function 'glUniform3ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3ui64vARB'\n"); }
  glUniform3ui64vARB(a0,a1,a2,);
};
__gshared glbfn_glUniform4ui64vARB glUniform4ui64vARB = function void (GLint a0, GLsizei a1, const(GLuint64)* a2) nothrow {
  glUniform4ui64vARB = cast(glbfn_glUniform4ui64vARB)glGetProcAddress(`glUniform4ui64vARB`);
  if (glUniform4ui64vARB is null) assert(0, `OpenGL function 'glUniform4ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4ui64vARB'\n"); }
  glUniform4ui64vARB(a0,a1,a2,);
};
__gshared glbfn_glGetUniformi64vARB glGetUniformi64vARB = function void (GLuint a0, GLint a1, GLint64* a2) nothrow {
  glGetUniformi64vARB = cast(glbfn_glGetUniformi64vARB)glGetProcAddress(`glGetUniformi64vARB`);
  if (glGetUniformi64vARB is null) assert(0, `OpenGL function 'glGetUniformi64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformi64vARB'\n"); }
  glGetUniformi64vARB(a0,a1,a2,);
};
__gshared glbfn_glGetUniformui64vARB glGetUniformui64vARB = function void (GLuint a0, GLint a1, GLuint64* a2) nothrow {
  glGetUniformui64vARB = cast(glbfn_glGetUniformui64vARB)glGetProcAddress(`glGetUniformui64vARB`);
  if (glGetUniformui64vARB is null) assert(0, `OpenGL function 'glGetUniformui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformui64vARB'\n"); }
  glGetUniformui64vARB(a0,a1,a2,);
};
__gshared glbfn_glGetnUniformi64vARB glGetnUniformi64vARB = function void (GLuint a0, GLint a1, GLsizei a2, GLint64* a3) nothrow {
  glGetnUniformi64vARB = cast(glbfn_glGetnUniformi64vARB)glGetProcAddress(`glGetnUniformi64vARB`);
  if (glGetnUniformi64vARB is null) assert(0, `OpenGL function 'glGetnUniformi64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformi64vARB'\n"); }
  glGetnUniformi64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformui64vARB glGetnUniformui64vARB = function void (GLuint a0, GLint a1, GLsizei a2, GLuint64* a3) nothrow {
  glGetnUniformui64vARB = cast(glbfn_glGetnUniformui64vARB)glGetProcAddress(`glGetnUniformui64vARB`);
  if (glGetnUniformui64vARB is null) assert(0, `OpenGL function 'glGetnUniformui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformui64vARB'\n"); }
  glGetnUniformui64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1i64ARB glProgramUniform1i64ARB = function void (GLuint a0, GLint a1, GLint64 a2) nothrow {
  glProgramUniform1i64ARB = cast(glbfn_glProgramUniform1i64ARB)glGetProcAddress(`glProgramUniform1i64ARB`);
  if (glProgramUniform1i64ARB is null) assert(0, `OpenGL function 'glProgramUniform1i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1i64ARB'\n"); }
  glProgramUniform1i64ARB(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2i64ARB glProgramUniform2i64ARB = function void (GLuint a0, GLint a1, GLint64 a2, GLint64 a3) nothrow {
  glProgramUniform2i64ARB = cast(glbfn_glProgramUniform2i64ARB)glGetProcAddress(`glProgramUniform2i64ARB`);
  if (glProgramUniform2i64ARB is null) assert(0, `OpenGL function 'glProgramUniform2i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2i64ARB'\n"); }
  glProgramUniform2i64ARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3i64ARB glProgramUniform3i64ARB = function void (GLuint a0, GLint a1, GLint64 a2, GLint64 a3, GLint64 a4) nothrow {
  glProgramUniform3i64ARB = cast(glbfn_glProgramUniform3i64ARB)glGetProcAddress(`glProgramUniform3i64ARB`);
  if (glProgramUniform3i64ARB is null) assert(0, `OpenGL function 'glProgramUniform3i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3i64ARB'\n"); }
  glProgramUniform3i64ARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4i64ARB glProgramUniform4i64ARB = function void (GLuint a0, GLint a1, GLint64 a2, GLint64 a3, GLint64 a4, GLint64 a5) nothrow {
  glProgramUniform4i64ARB = cast(glbfn_glProgramUniform4i64ARB)glGetProcAddress(`glProgramUniform4i64ARB`);
  if (glProgramUniform4i64ARB is null) assert(0, `OpenGL function 'glProgramUniform4i64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4i64ARB'\n"); }
  glProgramUniform4i64ARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1i64vARB glProgramUniform1i64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64)* a3) nothrow {
  glProgramUniform1i64vARB = cast(glbfn_glProgramUniform1i64vARB)glGetProcAddress(`glProgramUniform1i64vARB`);
  if (glProgramUniform1i64vARB is null) assert(0, `OpenGL function 'glProgramUniform1i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1i64vARB'\n"); }
  glProgramUniform1i64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2i64vARB glProgramUniform2i64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64)* a3) nothrow {
  glProgramUniform2i64vARB = cast(glbfn_glProgramUniform2i64vARB)glGetProcAddress(`glProgramUniform2i64vARB`);
  if (glProgramUniform2i64vARB is null) assert(0, `OpenGL function 'glProgramUniform2i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2i64vARB'\n"); }
  glProgramUniform2i64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3i64vARB glProgramUniform3i64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64)* a3) nothrow {
  glProgramUniform3i64vARB = cast(glbfn_glProgramUniform3i64vARB)glGetProcAddress(`glProgramUniform3i64vARB`);
  if (glProgramUniform3i64vARB is null) assert(0, `OpenGL function 'glProgramUniform3i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3i64vARB'\n"); }
  glProgramUniform3i64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4i64vARB glProgramUniform4i64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint64)* a3) nothrow {
  glProgramUniform4i64vARB = cast(glbfn_glProgramUniform4i64vARB)glGetProcAddress(`glProgramUniform4i64vARB`);
  if (glProgramUniform4i64vARB is null) assert(0, `OpenGL function 'glProgramUniform4i64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4i64vARB'\n"); }
  glProgramUniform4i64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1ui64ARB glProgramUniform1ui64ARB = function void (GLuint a0, GLint a1, GLuint64 a2) nothrow {
  glProgramUniform1ui64ARB = cast(glbfn_glProgramUniform1ui64ARB)glGetProcAddress(`glProgramUniform1ui64ARB`);
  if (glProgramUniform1ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform1ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1ui64ARB'\n"); }
  glProgramUniform1ui64ARB(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2ui64ARB glProgramUniform2ui64ARB = function void (GLuint a0, GLint a1, GLuint64 a2, GLuint64 a3) nothrow {
  glProgramUniform2ui64ARB = cast(glbfn_glProgramUniform2ui64ARB)glGetProcAddress(`glProgramUniform2ui64ARB`);
  if (glProgramUniform2ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform2ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2ui64ARB'\n"); }
  glProgramUniform2ui64ARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3ui64ARB glProgramUniform3ui64ARB = function void (GLuint a0, GLint a1, GLuint64 a2, GLuint64 a3, GLuint64 a4) nothrow {
  glProgramUniform3ui64ARB = cast(glbfn_glProgramUniform3ui64ARB)glGetProcAddress(`glProgramUniform3ui64ARB`);
  if (glProgramUniform3ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform3ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3ui64ARB'\n"); }
  glProgramUniform3ui64ARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4ui64ARB glProgramUniform4ui64ARB = function void (GLuint a0, GLint a1, GLuint64 a2, GLuint64 a3, GLuint64 a4, GLuint64 a5) nothrow {
  glProgramUniform4ui64ARB = cast(glbfn_glProgramUniform4ui64ARB)glGetProcAddress(`glProgramUniform4ui64ARB`);
  if (glProgramUniform4ui64ARB is null) assert(0, `OpenGL function 'glProgramUniform4ui64ARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4ui64ARB'\n"); }
  glProgramUniform4ui64ARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1ui64vARB glProgramUniform1ui64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64)* a3) nothrow {
  glProgramUniform1ui64vARB = cast(glbfn_glProgramUniform1ui64vARB)glGetProcAddress(`glProgramUniform1ui64vARB`);
  if (glProgramUniform1ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform1ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1ui64vARB'\n"); }
  glProgramUniform1ui64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2ui64vARB glProgramUniform2ui64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64)* a3) nothrow {
  glProgramUniform2ui64vARB = cast(glbfn_glProgramUniform2ui64vARB)glGetProcAddress(`glProgramUniform2ui64vARB`);
  if (glProgramUniform2ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform2ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2ui64vARB'\n"); }
  glProgramUniform2ui64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3ui64vARB glProgramUniform3ui64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64)* a3) nothrow {
  glProgramUniform3ui64vARB = cast(glbfn_glProgramUniform3ui64vARB)glGetProcAddress(`glProgramUniform3ui64vARB`);
  if (glProgramUniform3ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform3ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3ui64vARB'\n"); }
  glProgramUniform3ui64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4ui64vARB glProgramUniform4ui64vARB = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64)* a3) nothrow {
  glProgramUniform4ui64vARB = cast(glbfn_glProgramUniform4ui64vARB)glGetProcAddress(`glProgramUniform4ui64vARB`);
  if (glProgramUniform4ui64vARB is null) assert(0, `OpenGL function 'glProgramUniform4ui64vARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4ui64vARB'\n"); }
  glProgramUniform4ui64vARB(a0,a1,a2,a3,);
};
__gshared glbfn_glColorTable glColorTable = function void (GLenum a0, GLenum a1, GLsizei a2, GLenum a3, GLenum a4, const(void)* a5) nothrow {
  glColorTable = cast(glbfn_glColorTable)glGetProcAddress(`glColorTable`);
  if (glColorTable is null) assert(0, `OpenGL function 'glColorTable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorTable'\n"); }
  glColorTable(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glColorTableParameterfv glColorTableParameterfv = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glColorTableParameterfv = cast(glbfn_glColorTableParameterfv)glGetProcAddress(`glColorTableParameterfv`);
  if (glColorTableParameterfv is null) assert(0, `OpenGL function 'glColorTableParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorTableParameterfv'\n"); }
  glColorTableParameterfv(a0,a1,a2,);
};
__gshared glbfn_glColorTableParameteriv glColorTableParameteriv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glColorTableParameteriv = cast(glbfn_glColorTableParameteriv)glGetProcAddress(`glColorTableParameteriv`);
  if (glColorTableParameteriv is null) assert(0, `OpenGL function 'glColorTableParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorTableParameteriv'\n"); }
  glColorTableParameteriv(a0,a1,a2,);
};
__gshared glbfn_glCopyColorTable glCopyColorTable = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4) nothrow {
  glCopyColorTable = cast(glbfn_glCopyColorTable)glGetProcAddress(`glCopyColorTable`);
  if (glCopyColorTable is null) assert(0, `OpenGL function 'glCopyColorTable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyColorTable'\n"); }
  glCopyColorTable(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetColorTable glGetColorTable = function void (GLenum a0, GLenum a1, GLenum a2, void* a3) nothrow {
  glGetColorTable = cast(glbfn_glGetColorTable)glGetProcAddress(`glGetColorTable`);
  if (glGetColorTable is null) assert(0, `OpenGL function 'glGetColorTable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTable'\n"); }
  glGetColorTable(a0,a1,a2,a3,);
};
__gshared glbfn_glGetColorTableParameterfv glGetColorTableParameterfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetColorTableParameterfv = cast(glbfn_glGetColorTableParameterfv)glGetProcAddress(`glGetColorTableParameterfv`);
  if (glGetColorTableParameterfv is null) assert(0, `OpenGL function 'glGetColorTableParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableParameterfv'\n"); }
  glGetColorTableParameterfv(a0,a1,a2,);
};
__gshared glbfn_glGetColorTableParameteriv glGetColorTableParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetColorTableParameteriv = cast(glbfn_glGetColorTableParameteriv)glGetProcAddress(`glGetColorTableParameteriv`);
  if (glGetColorTableParameteriv is null) assert(0, `OpenGL function 'glGetColorTableParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableParameteriv'\n"); }
  glGetColorTableParameteriv(a0,a1,a2,);
};
__gshared glbfn_glColorSubTable glColorSubTable = function void (GLenum a0, GLsizei a1, GLsizei a2, GLenum a3, GLenum a4, const(void)* a5) nothrow {
  glColorSubTable = cast(glbfn_glColorSubTable)glGetProcAddress(`glColorSubTable`);
  if (glColorSubTable is null) assert(0, `OpenGL function 'glColorSubTable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorSubTable'\n"); }
  glColorSubTable(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glCopyColorSubTable glCopyColorSubTable = function void (GLenum a0, GLsizei a1, GLint a2, GLint a3, GLsizei a4) nothrow {
  glCopyColorSubTable = cast(glbfn_glCopyColorSubTable)glGetProcAddress(`glCopyColorSubTable`);
  if (glCopyColorSubTable is null) assert(0, `OpenGL function 'glCopyColorSubTable' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyColorSubTable'\n"); }
  glCopyColorSubTable(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glConvolutionFilter1D glConvolutionFilter1D = function void (GLenum a0, GLenum a1, GLsizei a2, GLenum a3, GLenum a4, const(void)* a5) nothrow {
  glConvolutionFilter1D = cast(glbfn_glConvolutionFilter1D)glGetProcAddress(`glConvolutionFilter1D`);
  if (glConvolutionFilter1D is null) assert(0, `OpenGL function 'glConvolutionFilter1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionFilter1D'\n"); }
  glConvolutionFilter1D(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glConvolutionFilter2D glConvolutionFilter2D = function void (GLenum a0, GLenum a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glConvolutionFilter2D = cast(glbfn_glConvolutionFilter2D)glGetProcAddress(`glConvolutionFilter2D`);
  if (glConvolutionFilter2D is null) assert(0, `OpenGL function 'glConvolutionFilter2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionFilter2D'\n"); }
  glConvolutionFilter2D(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glConvolutionParameterf glConvolutionParameterf = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glConvolutionParameterf = cast(glbfn_glConvolutionParameterf)glGetProcAddress(`glConvolutionParameterf`);
  if (glConvolutionParameterf is null) assert(0, `OpenGL function 'glConvolutionParameterf' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameterf'\n"); }
  glConvolutionParameterf(a0,a1,a2,);
};
__gshared glbfn_glConvolutionParameterfv glConvolutionParameterfv = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glConvolutionParameterfv = cast(glbfn_glConvolutionParameterfv)glGetProcAddress(`glConvolutionParameterfv`);
  if (glConvolutionParameterfv is null) assert(0, `OpenGL function 'glConvolutionParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameterfv'\n"); }
  glConvolutionParameterfv(a0,a1,a2,);
};
__gshared glbfn_glConvolutionParameteri glConvolutionParameteri = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glConvolutionParameteri = cast(glbfn_glConvolutionParameteri)glGetProcAddress(`glConvolutionParameteri`);
  if (glConvolutionParameteri is null) assert(0, `OpenGL function 'glConvolutionParameteri' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameteri'\n"); }
  glConvolutionParameteri(a0,a1,a2,);
};
__gshared glbfn_glConvolutionParameteriv glConvolutionParameteriv = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glConvolutionParameteriv = cast(glbfn_glConvolutionParameteriv)glGetProcAddress(`glConvolutionParameteriv`);
  if (glConvolutionParameteriv is null) assert(0, `OpenGL function 'glConvolutionParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameteriv'\n"); }
  glConvolutionParameteriv(a0,a1,a2,);
};
__gshared glbfn_glCopyConvolutionFilter1D glCopyConvolutionFilter1D = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4) nothrow {
  glCopyConvolutionFilter1D = cast(glbfn_glCopyConvolutionFilter1D)glGetProcAddress(`glCopyConvolutionFilter1D`);
  if (glCopyConvolutionFilter1D is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyConvolutionFilter1D'\n"); }
  glCopyConvolutionFilter1D(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glCopyConvolutionFilter2D glCopyConvolutionFilter2D = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5) nothrow {
  glCopyConvolutionFilter2D = cast(glbfn_glCopyConvolutionFilter2D)glGetProcAddress(`glCopyConvolutionFilter2D`);
  if (glCopyConvolutionFilter2D is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyConvolutionFilter2D'\n"); }
  glCopyConvolutionFilter2D(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetConvolutionFilter glGetConvolutionFilter = function void (GLenum a0, GLenum a1, GLenum a2, void* a3) nothrow {
  glGetConvolutionFilter = cast(glbfn_glGetConvolutionFilter)glGetProcAddress(`glGetConvolutionFilter`);
  if (glGetConvolutionFilter is null) assert(0, `OpenGL function 'glGetConvolutionFilter' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetConvolutionFilter'\n"); }
  glGetConvolutionFilter(a0,a1,a2,a3,);
};
__gshared glbfn_glGetConvolutionParameterfv glGetConvolutionParameterfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetConvolutionParameterfv = cast(glbfn_glGetConvolutionParameterfv)glGetProcAddress(`glGetConvolutionParameterfv`);
  if (glGetConvolutionParameterfv is null) assert(0, `OpenGL function 'glGetConvolutionParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetConvolutionParameterfv'\n"); }
  glGetConvolutionParameterfv(a0,a1,a2,);
};
__gshared glbfn_glGetConvolutionParameteriv glGetConvolutionParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetConvolutionParameteriv = cast(glbfn_glGetConvolutionParameteriv)glGetProcAddress(`glGetConvolutionParameteriv`);
  if (glGetConvolutionParameteriv is null) assert(0, `OpenGL function 'glGetConvolutionParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetConvolutionParameteriv'\n"); }
  glGetConvolutionParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetSeparableFilter glGetSeparableFilter = function void (GLenum a0, GLenum a1, GLenum a2, void* a3, void* a4, void* a5) nothrow {
  glGetSeparableFilter = cast(glbfn_glGetSeparableFilter)glGetProcAddress(`glGetSeparableFilter`);
  if (glGetSeparableFilter is null) assert(0, `OpenGL function 'glGetSeparableFilter' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSeparableFilter'\n"); }
  glGetSeparableFilter(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glSeparableFilter2D glSeparableFilter2D = function void (GLenum a0, GLenum a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, const(void)* a6, const(void)* a7) nothrow {
  glSeparableFilter2D = cast(glbfn_glSeparableFilter2D)glGetProcAddress(`glSeparableFilter2D`);
  if (glSeparableFilter2D is null) assert(0, `OpenGL function 'glSeparableFilter2D' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSeparableFilter2D'\n"); }
  glSeparableFilter2D(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetHistogram glGetHistogram = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, void* a4) nothrow {
  glGetHistogram = cast(glbfn_glGetHistogram)glGetProcAddress(`glGetHistogram`);
  if (glGetHistogram is null) assert(0, `OpenGL function 'glGetHistogram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHistogram'\n"); }
  glGetHistogram(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetHistogramParameterfv glGetHistogramParameterfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetHistogramParameterfv = cast(glbfn_glGetHistogramParameterfv)glGetProcAddress(`glGetHistogramParameterfv`);
  if (glGetHistogramParameterfv is null) assert(0, `OpenGL function 'glGetHistogramParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHistogramParameterfv'\n"); }
  glGetHistogramParameterfv(a0,a1,a2,);
};
__gshared glbfn_glGetHistogramParameteriv glGetHistogramParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetHistogramParameteriv = cast(glbfn_glGetHistogramParameteriv)glGetProcAddress(`glGetHistogramParameteriv`);
  if (glGetHistogramParameteriv is null) assert(0, `OpenGL function 'glGetHistogramParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHistogramParameteriv'\n"); }
  glGetHistogramParameteriv(a0,a1,a2,);
};
__gshared glbfn_glGetMinmax glGetMinmax = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, void* a4) nothrow {
  glGetMinmax = cast(glbfn_glGetMinmax)glGetProcAddress(`glGetMinmax`);
  if (glGetMinmax is null) assert(0, `OpenGL function 'glGetMinmax' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMinmax'\n"); }
  glGetMinmax(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetMinmaxParameterfv glGetMinmaxParameterfv = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetMinmaxParameterfv = cast(glbfn_glGetMinmaxParameterfv)glGetProcAddress(`glGetMinmaxParameterfv`);
  if (glGetMinmaxParameterfv is null) assert(0, `OpenGL function 'glGetMinmaxParameterfv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMinmaxParameterfv'\n"); }
  glGetMinmaxParameterfv(a0,a1,a2,);
};
__gshared glbfn_glGetMinmaxParameteriv glGetMinmaxParameteriv = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetMinmaxParameteriv = cast(glbfn_glGetMinmaxParameteriv)glGetProcAddress(`glGetMinmaxParameteriv`);
  if (glGetMinmaxParameteriv is null) assert(0, `OpenGL function 'glGetMinmaxParameteriv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMinmaxParameteriv'\n"); }
  glGetMinmaxParameteriv(a0,a1,a2,);
};
__gshared glbfn_glHistogram glHistogram = function void (GLenum a0, GLsizei a1, GLenum a2, GLboolean a3) nothrow {
  glHistogram = cast(glbfn_glHistogram)glGetProcAddress(`glHistogram`);
  if (glHistogram is null) assert(0, `OpenGL function 'glHistogram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glHistogram'\n"); }
  glHistogram(a0,a1,a2,a3,);
};
__gshared glbfn_glMinmax glMinmax = function void (GLenum a0, GLenum a1, GLboolean a2) nothrow {
  glMinmax = cast(glbfn_glMinmax)glGetProcAddress(`glMinmax`);
  if (glMinmax is null) assert(0, `OpenGL function 'glMinmax' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMinmax'\n"); }
  glMinmax(a0,a1,a2,);
};
__gshared glbfn_glResetHistogram glResetHistogram = function void (GLenum a0) nothrow {
  glResetHistogram = cast(glbfn_glResetHistogram)glGetProcAddress(`glResetHistogram`);
  if (glResetHistogram is null) assert(0, `OpenGL function 'glResetHistogram' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResetHistogram'\n"); }
  glResetHistogram(a0,);
};
__gshared glbfn_glResetMinmax glResetMinmax = function void (GLenum a0) nothrow {
  glResetMinmax = cast(glbfn_glResetMinmax)glGetProcAddress(`glResetMinmax`);
  if (glResetMinmax is null) assert(0, `OpenGL function 'glResetMinmax' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResetMinmax'\n"); }
  glResetMinmax(a0,);
};
__gshared glbfn_glMultiDrawArraysIndirectCountARB glMultiDrawArraysIndirectCountARB = function void (GLenum a0, GLintptr a1, GLintptr a2, GLsizei a3, GLsizei a4) nothrow {
  glMultiDrawArraysIndirectCountARB = cast(glbfn_glMultiDrawArraysIndirectCountARB)glGetProcAddress(`glMultiDrawArraysIndirectCountARB`);
  if (glMultiDrawArraysIndirectCountARB is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectCountARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawArraysIndirectCountARB'\n"); }
  glMultiDrawArraysIndirectCountARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiDrawElementsIndirectCountARB glMultiDrawElementsIndirectCountARB = function void (GLenum a0, GLenum a1, GLintptr a2, GLintptr a3, GLsizei a4, GLsizei a5) nothrow {
  glMultiDrawElementsIndirectCountARB = cast(glbfn_glMultiDrawElementsIndirectCountARB)glGetProcAddress(`glMultiDrawElementsIndirectCountARB`);
  if (glMultiDrawElementsIndirectCountARB is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectCountARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementsIndirectCountARB'\n"); }
  glMultiDrawElementsIndirectCountARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexAttribDivisorARB glVertexAttribDivisorARB = function void (GLuint a0, GLuint a1) nothrow {
  glVertexAttribDivisorARB = cast(glbfn_glVertexAttribDivisorARB)glGetProcAddress(`glVertexAttribDivisorARB`);
  if (glVertexAttribDivisorARB is null) assert(0, `OpenGL function 'glVertexAttribDivisorARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribDivisorARB'\n"); }
  glVertexAttribDivisorARB(a0,a1,);
};
__gshared glbfn_glCurrentPaletteMatrixARB glCurrentPaletteMatrixARB = function void (GLint a0) nothrow {
  glCurrentPaletteMatrixARB = cast(glbfn_glCurrentPaletteMatrixARB)glGetProcAddress(`glCurrentPaletteMatrixARB`);
  if (glCurrentPaletteMatrixARB is null) assert(0, `OpenGL function 'glCurrentPaletteMatrixARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCurrentPaletteMatrixARB'\n"); }
  glCurrentPaletteMatrixARB(a0,);
};
__gshared glbfn_glMatrixIndexubvARB glMatrixIndexubvARB = function void (GLint a0, const(GLubyte)* a1) nothrow {
  glMatrixIndexubvARB = cast(glbfn_glMatrixIndexubvARB)glGetProcAddress(`glMatrixIndexubvARB`);
  if (glMatrixIndexubvARB is null) assert(0, `OpenGL function 'glMatrixIndexubvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixIndexubvARB'\n"); }
  glMatrixIndexubvARB(a0,a1,);
};
__gshared glbfn_glMatrixIndexusvARB glMatrixIndexusvARB = function void (GLint a0, const(GLushort)* a1) nothrow {
  glMatrixIndexusvARB = cast(glbfn_glMatrixIndexusvARB)glGetProcAddress(`glMatrixIndexusvARB`);
  if (glMatrixIndexusvARB is null) assert(0, `OpenGL function 'glMatrixIndexusvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixIndexusvARB'\n"); }
  glMatrixIndexusvARB(a0,a1,);
};
__gshared glbfn_glMatrixIndexuivARB glMatrixIndexuivARB = function void (GLint a0, const(GLuint)* a1) nothrow {
  glMatrixIndexuivARB = cast(glbfn_glMatrixIndexuivARB)glGetProcAddress(`glMatrixIndexuivARB`);
  if (glMatrixIndexuivARB is null) assert(0, `OpenGL function 'glMatrixIndexuivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixIndexuivARB'\n"); }
  glMatrixIndexuivARB(a0,a1,);
};
__gshared glbfn_glMatrixIndexPointerARB glMatrixIndexPointerARB = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glMatrixIndexPointerARB = cast(glbfn_glMatrixIndexPointerARB)glGetProcAddress(`glMatrixIndexPointerARB`);
  if (glMatrixIndexPointerARB is null) assert(0, `OpenGL function 'glMatrixIndexPointerARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixIndexPointerARB'\n"); }
  glMatrixIndexPointerARB(a0,a1,a2,a3,);
};
__gshared glbfn_glSampleCoverageARB glSampleCoverageARB = function void (GLfloat a0, GLboolean a1) nothrow {
  glSampleCoverageARB = cast(glbfn_glSampleCoverageARB)glGetProcAddress(`glSampleCoverageARB`);
  if (glSampleCoverageARB is null) assert(0, `OpenGL function 'glSampleCoverageARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleCoverageARB'\n"); }
  glSampleCoverageARB(a0,a1,);
};
__gshared glbfn_glActiveTextureARB glActiveTextureARB = function void (GLenum a0) nothrow {
  glActiveTextureARB = cast(glbfn_glActiveTextureARB)glGetProcAddress(`glActiveTextureARB`);
  if (glActiveTextureARB is null) assert(0, `OpenGL function 'glActiveTextureARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glActiveTextureARB'\n"); }
  glActiveTextureARB(a0,);
};
__gshared glbfn_glClientActiveTextureARB glClientActiveTextureARB = function void (GLenum a0) nothrow {
  glClientActiveTextureARB = cast(glbfn_glClientActiveTextureARB)glGetProcAddress(`glClientActiveTextureARB`);
  if (glClientActiveTextureARB is null) assert(0, `OpenGL function 'glClientActiveTextureARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClientActiveTextureARB'\n"); }
  glClientActiveTextureARB(a0,);
};
__gshared glbfn_glMultiTexCoord1dARB glMultiTexCoord1dARB = function void (GLenum a0, GLdouble a1) nothrow {
  glMultiTexCoord1dARB = cast(glbfn_glMultiTexCoord1dARB)glGetProcAddress(`glMultiTexCoord1dARB`);
  if (glMultiTexCoord1dARB is null) assert(0, `OpenGL function 'glMultiTexCoord1dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1dARB'\n"); }
  glMultiTexCoord1dARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1dvARB glMultiTexCoord1dvARB = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord1dvARB = cast(glbfn_glMultiTexCoord1dvARB)glGetProcAddress(`glMultiTexCoord1dvARB`);
  if (glMultiTexCoord1dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord1dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1dvARB'\n"); }
  glMultiTexCoord1dvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1fARB glMultiTexCoord1fARB = function void (GLenum a0, GLfloat a1) nothrow {
  glMultiTexCoord1fARB = cast(glbfn_glMultiTexCoord1fARB)glGetProcAddress(`glMultiTexCoord1fARB`);
  if (glMultiTexCoord1fARB is null) assert(0, `OpenGL function 'glMultiTexCoord1fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1fARB'\n"); }
  glMultiTexCoord1fARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1fvARB glMultiTexCoord1fvARB = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord1fvARB = cast(glbfn_glMultiTexCoord1fvARB)glGetProcAddress(`glMultiTexCoord1fvARB`);
  if (glMultiTexCoord1fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord1fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1fvARB'\n"); }
  glMultiTexCoord1fvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1iARB glMultiTexCoord1iARB = function void (GLenum a0, GLint a1) nothrow {
  glMultiTexCoord1iARB = cast(glbfn_glMultiTexCoord1iARB)glGetProcAddress(`glMultiTexCoord1iARB`);
  if (glMultiTexCoord1iARB is null) assert(0, `OpenGL function 'glMultiTexCoord1iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1iARB'\n"); }
  glMultiTexCoord1iARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1ivARB glMultiTexCoord1ivARB = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord1ivARB = cast(glbfn_glMultiTexCoord1ivARB)glGetProcAddress(`glMultiTexCoord1ivARB`);
  if (glMultiTexCoord1ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord1ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1ivARB'\n"); }
  glMultiTexCoord1ivARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1sARB glMultiTexCoord1sARB = function void (GLenum a0, GLshort a1) nothrow {
  glMultiTexCoord1sARB = cast(glbfn_glMultiTexCoord1sARB)glGetProcAddress(`glMultiTexCoord1sARB`);
  if (glMultiTexCoord1sARB is null) assert(0, `OpenGL function 'glMultiTexCoord1sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1sARB'\n"); }
  glMultiTexCoord1sARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1svARB glMultiTexCoord1svARB = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord1svARB = cast(glbfn_glMultiTexCoord1svARB)glGetProcAddress(`glMultiTexCoord1svARB`);
  if (glMultiTexCoord1svARB is null) assert(0, `OpenGL function 'glMultiTexCoord1svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1svARB'\n"); }
  glMultiTexCoord1svARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2dARB glMultiTexCoord2dARB = function void (GLenum a0, GLdouble a1, GLdouble a2) nothrow {
  glMultiTexCoord2dARB = cast(glbfn_glMultiTexCoord2dARB)glGetProcAddress(`glMultiTexCoord2dARB`);
  if (glMultiTexCoord2dARB is null) assert(0, `OpenGL function 'glMultiTexCoord2dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2dARB'\n"); }
  glMultiTexCoord2dARB(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2dvARB glMultiTexCoord2dvARB = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord2dvARB = cast(glbfn_glMultiTexCoord2dvARB)glGetProcAddress(`glMultiTexCoord2dvARB`);
  if (glMultiTexCoord2dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord2dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2dvARB'\n"); }
  glMultiTexCoord2dvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2fARB glMultiTexCoord2fARB = function void (GLenum a0, GLfloat a1, GLfloat a2) nothrow {
  glMultiTexCoord2fARB = cast(glbfn_glMultiTexCoord2fARB)glGetProcAddress(`glMultiTexCoord2fARB`);
  if (glMultiTexCoord2fARB is null) assert(0, `OpenGL function 'glMultiTexCoord2fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2fARB'\n"); }
  glMultiTexCoord2fARB(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2fvARB glMultiTexCoord2fvARB = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord2fvARB = cast(glbfn_glMultiTexCoord2fvARB)glGetProcAddress(`glMultiTexCoord2fvARB`);
  if (glMultiTexCoord2fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord2fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2fvARB'\n"); }
  glMultiTexCoord2fvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2iARB glMultiTexCoord2iARB = function void (GLenum a0, GLint a1, GLint a2) nothrow {
  glMultiTexCoord2iARB = cast(glbfn_glMultiTexCoord2iARB)glGetProcAddress(`glMultiTexCoord2iARB`);
  if (glMultiTexCoord2iARB is null) assert(0, `OpenGL function 'glMultiTexCoord2iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2iARB'\n"); }
  glMultiTexCoord2iARB(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2ivARB glMultiTexCoord2ivARB = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord2ivARB = cast(glbfn_glMultiTexCoord2ivARB)glGetProcAddress(`glMultiTexCoord2ivARB`);
  if (glMultiTexCoord2ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord2ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2ivARB'\n"); }
  glMultiTexCoord2ivARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2sARB glMultiTexCoord2sARB = function void (GLenum a0, GLshort a1, GLshort a2) nothrow {
  glMultiTexCoord2sARB = cast(glbfn_glMultiTexCoord2sARB)glGetProcAddress(`glMultiTexCoord2sARB`);
  if (glMultiTexCoord2sARB is null) assert(0, `OpenGL function 'glMultiTexCoord2sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2sARB'\n"); }
  glMultiTexCoord2sARB(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2svARB glMultiTexCoord2svARB = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord2svARB = cast(glbfn_glMultiTexCoord2svARB)glGetProcAddress(`glMultiTexCoord2svARB`);
  if (glMultiTexCoord2svARB is null) assert(0, `OpenGL function 'glMultiTexCoord2svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2svARB'\n"); }
  glMultiTexCoord2svARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3dARB glMultiTexCoord3dARB = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glMultiTexCoord3dARB = cast(glbfn_glMultiTexCoord3dARB)glGetProcAddress(`glMultiTexCoord3dARB`);
  if (glMultiTexCoord3dARB is null) assert(0, `OpenGL function 'glMultiTexCoord3dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3dARB'\n"); }
  glMultiTexCoord3dARB(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3dvARB glMultiTexCoord3dvARB = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord3dvARB = cast(glbfn_glMultiTexCoord3dvARB)glGetProcAddress(`glMultiTexCoord3dvARB`);
  if (glMultiTexCoord3dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord3dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3dvARB'\n"); }
  glMultiTexCoord3dvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3fARB glMultiTexCoord3fARB = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glMultiTexCoord3fARB = cast(glbfn_glMultiTexCoord3fARB)glGetProcAddress(`glMultiTexCoord3fARB`);
  if (glMultiTexCoord3fARB is null) assert(0, `OpenGL function 'glMultiTexCoord3fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3fARB'\n"); }
  glMultiTexCoord3fARB(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3fvARB glMultiTexCoord3fvARB = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord3fvARB = cast(glbfn_glMultiTexCoord3fvARB)glGetProcAddress(`glMultiTexCoord3fvARB`);
  if (glMultiTexCoord3fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord3fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3fvARB'\n"); }
  glMultiTexCoord3fvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3iARB glMultiTexCoord3iARB = function void (GLenum a0, GLint a1, GLint a2, GLint a3) nothrow {
  glMultiTexCoord3iARB = cast(glbfn_glMultiTexCoord3iARB)glGetProcAddress(`glMultiTexCoord3iARB`);
  if (glMultiTexCoord3iARB is null) assert(0, `OpenGL function 'glMultiTexCoord3iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3iARB'\n"); }
  glMultiTexCoord3iARB(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3ivARB glMultiTexCoord3ivARB = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord3ivARB = cast(glbfn_glMultiTexCoord3ivARB)glGetProcAddress(`glMultiTexCoord3ivARB`);
  if (glMultiTexCoord3ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord3ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3ivARB'\n"); }
  glMultiTexCoord3ivARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3sARB glMultiTexCoord3sARB = function void (GLenum a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glMultiTexCoord3sARB = cast(glbfn_glMultiTexCoord3sARB)glGetProcAddress(`glMultiTexCoord3sARB`);
  if (glMultiTexCoord3sARB is null) assert(0, `OpenGL function 'glMultiTexCoord3sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3sARB'\n"); }
  glMultiTexCoord3sARB(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3svARB glMultiTexCoord3svARB = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord3svARB = cast(glbfn_glMultiTexCoord3svARB)glGetProcAddress(`glMultiTexCoord3svARB`);
  if (glMultiTexCoord3svARB is null) assert(0, `OpenGL function 'glMultiTexCoord3svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3svARB'\n"); }
  glMultiTexCoord3svARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4dARB glMultiTexCoord4dARB = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glMultiTexCoord4dARB = cast(glbfn_glMultiTexCoord4dARB)glGetProcAddress(`glMultiTexCoord4dARB`);
  if (glMultiTexCoord4dARB is null) assert(0, `OpenGL function 'glMultiTexCoord4dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4dARB'\n"); }
  glMultiTexCoord4dARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4dvARB glMultiTexCoord4dvARB = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMultiTexCoord4dvARB = cast(glbfn_glMultiTexCoord4dvARB)glGetProcAddress(`glMultiTexCoord4dvARB`);
  if (glMultiTexCoord4dvARB is null) assert(0, `OpenGL function 'glMultiTexCoord4dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4dvARB'\n"); }
  glMultiTexCoord4dvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4fARB glMultiTexCoord4fARB = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glMultiTexCoord4fARB = cast(glbfn_glMultiTexCoord4fARB)glGetProcAddress(`glMultiTexCoord4fARB`);
  if (glMultiTexCoord4fARB is null) assert(0, `OpenGL function 'glMultiTexCoord4fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4fARB'\n"); }
  glMultiTexCoord4fARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4fvARB glMultiTexCoord4fvARB = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMultiTexCoord4fvARB = cast(glbfn_glMultiTexCoord4fvARB)glGetProcAddress(`glMultiTexCoord4fvARB`);
  if (glMultiTexCoord4fvARB is null) assert(0, `OpenGL function 'glMultiTexCoord4fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4fvARB'\n"); }
  glMultiTexCoord4fvARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4iARB glMultiTexCoord4iARB = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glMultiTexCoord4iARB = cast(glbfn_glMultiTexCoord4iARB)glGetProcAddress(`glMultiTexCoord4iARB`);
  if (glMultiTexCoord4iARB is null) assert(0, `OpenGL function 'glMultiTexCoord4iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4iARB'\n"); }
  glMultiTexCoord4iARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4ivARB glMultiTexCoord4ivARB = function void (GLenum a0, const(GLint)* a1) nothrow {
  glMultiTexCoord4ivARB = cast(glbfn_glMultiTexCoord4ivARB)glGetProcAddress(`glMultiTexCoord4ivARB`);
  if (glMultiTexCoord4ivARB is null) assert(0, `OpenGL function 'glMultiTexCoord4ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4ivARB'\n"); }
  glMultiTexCoord4ivARB(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4sARB glMultiTexCoord4sARB = function void (GLenum a0, GLshort a1, GLshort a2, GLshort a3, GLshort a4) nothrow {
  glMultiTexCoord4sARB = cast(glbfn_glMultiTexCoord4sARB)glGetProcAddress(`glMultiTexCoord4sARB`);
  if (glMultiTexCoord4sARB is null) assert(0, `OpenGL function 'glMultiTexCoord4sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4sARB'\n"); }
  glMultiTexCoord4sARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4svARB glMultiTexCoord4svARB = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glMultiTexCoord4svARB = cast(glbfn_glMultiTexCoord4svARB)glGetProcAddress(`glMultiTexCoord4svARB`);
  if (glMultiTexCoord4svARB is null) assert(0, `OpenGL function 'glMultiTexCoord4svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4svARB'\n"); }
  glMultiTexCoord4svARB(a0,a1,);
};
__gshared glbfn_glGenQueriesARB glGenQueriesARB = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenQueriesARB = cast(glbfn_glGenQueriesARB)glGetProcAddress(`glGenQueriesARB`);
  if (glGenQueriesARB is null) assert(0, `OpenGL function 'glGenQueriesARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenQueriesARB'\n"); }
  glGenQueriesARB(a0,a1,);
};
__gshared glbfn_glDeleteQueriesARB glDeleteQueriesARB = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteQueriesARB = cast(glbfn_glDeleteQueriesARB)glGetProcAddress(`glDeleteQueriesARB`);
  if (glDeleteQueriesARB is null) assert(0, `OpenGL function 'glDeleteQueriesARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteQueriesARB'\n"); }
  glDeleteQueriesARB(a0,a1,);
};
__gshared glbfn_glIsQueryARB glIsQueryARB = function GLboolean (GLuint a0) nothrow {
  glIsQueryARB = cast(glbfn_glIsQueryARB)glGetProcAddress(`glIsQueryARB`);
  if (glIsQueryARB is null) assert(0, `OpenGL function 'glIsQueryARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsQueryARB'\n"); }
  return glIsQueryARB(a0,);
};
__gshared glbfn_glBeginQueryARB glBeginQueryARB = function void (GLenum a0, GLuint a1) nothrow {
  glBeginQueryARB = cast(glbfn_glBeginQueryARB)glGetProcAddress(`glBeginQueryARB`);
  if (glBeginQueryARB is null) assert(0, `OpenGL function 'glBeginQueryARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginQueryARB'\n"); }
  glBeginQueryARB(a0,a1,);
};
__gshared glbfn_glEndQueryARB glEndQueryARB = function void (GLenum a0) nothrow {
  glEndQueryARB = cast(glbfn_glEndQueryARB)glGetProcAddress(`glEndQueryARB`);
  if (glEndQueryARB is null) assert(0, `OpenGL function 'glEndQueryARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndQueryARB'\n"); }
  glEndQueryARB(a0,);
};
__gshared glbfn_glGetQueryivARB glGetQueryivARB = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetQueryivARB = cast(glbfn_glGetQueryivARB)glGetProcAddress(`glGetQueryivARB`);
  if (glGetQueryivARB is null) assert(0, `OpenGL function 'glGetQueryivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryivARB'\n"); }
  glGetQueryivARB(a0,a1,a2,);
};
__gshared glbfn_glGetQueryObjectivARB glGetQueryObjectivARB = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetQueryObjectivARB = cast(glbfn_glGetQueryObjectivARB)glGetProcAddress(`glGetQueryObjectivARB`);
  if (glGetQueryObjectivARB is null) assert(0, `OpenGL function 'glGetQueryObjectivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjectivARB'\n"); }
  glGetQueryObjectivARB(a0,a1,a2,);
};
__gshared glbfn_glGetQueryObjectuivARB glGetQueryObjectuivARB = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetQueryObjectuivARB = cast(glbfn_glGetQueryObjectuivARB)glGetProcAddress(`glGetQueryObjectuivARB`);
  if (glGetQueryObjectuivARB is null) assert(0, `OpenGL function 'glGetQueryObjectuivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjectuivARB'\n"); }
  glGetQueryObjectuivARB(a0,a1,a2,);
};
__gshared glbfn_glMaxShaderCompilerThreadsARB glMaxShaderCompilerThreadsARB = function void (GLuint a0) nothrow {
  glMaxShaderCompilerThreadsARB = cast(glbfn_glMaxShaderCompilerThreadsARB)glGetProcAddress(`glMaxShaderCompilerThreadsARB`);
  if (glMaxShaderCompilerThreadsARB is null) assert(0, `OpenGL function 'glMaxShaderCompilerThreadsARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMaxShaderCompilerThreadsARB'\n"); }
  glMaxShaderCompilerThreadsARB(a0,);
};
__gshared glbfn_glPointParameterfARB glPointParameterfARB = function void (GLenum a0, GLfloat a1) nothrow {
  glPointParameterfARB = cast(glbfn_glPointParameterfARB)glGetProcAddress(`glPointParameterfARB`);
  if (glPointParameterfARB is null) assert(0, `OpenGL function 'glPointParameterfARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterfARB'\n"); }
  glPointParameterfARB(a0,a1,);
};
__gshared glbfn_glPointParameterfvARB glPointParameterfvARB = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glPointParameterfvARB = cast(glbfn_glPointParameterfvARB)glGetProcAddress(`glPointParameterfvARB`);
  if (glPointParameterfvARB is null) assert(0, `OpenGL function 'glPointParameterfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterfvARB'\n"); }
  glPointParameterfvARB(a0,a1,);
};
__gshared glbfn_glGetGraphicsResetStatusARB glGetGraphicsResetStatusARB = function GLenum () nothrow {
  glGetGraphicsResetStatusARB = cast(glbfn_glGetGraphicsResetStatusARB)glGetProcAddress(`glGetGraphicsResetStatusARB`);
  if (glGetGraphicsResetStatusARB is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetGraphicsResetStatusARB'\n"); }
  return glGetGraphicsResetStatusARB();
};
__gshared glbfn_glGetnTexImageARB glGetnTexImageARB = function void (GLenum a0, GLint a1, GLenum a2, GLenum a3, GLsizei a4, void* a5) nothrow {
  glGetnTexImageARB = cast(glbfn_glGetnTexImageARB)glGetProcAddress(`glGetnTexImageARB`);
  if (glGetnTexImageARB is null) assert(0, `OpenGL function 'glGetnTexImageARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnTexImageARB'\n"); }
  glGetnTexImageARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glReadnPixelsARB glReadnPixelsARB = function void (GLint a0, GLint a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, GLsizei a6, void* a7) nothrow {
  glReadnPixelsARB = cast(glbfn_glReadnPixelsARB)glGetProcAddress(`glReadnPixelsARB`);
  if (glReadnPixelsARB is null) assert(0, `OpenGL function 'glReadnPixelsARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReadnPixelsARB'\n"); }
  glReadnPixelsARB(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetnCompressedTexImageARB glGetnCompressedTexImageARB = function void (GLenum a0, GLint a1, GLsizei a2, void* a3) nothrow {
  glGetnCompressedTexImageARB = cast(glbfn_glGetnCompressedTexImageARB)glGetProcAddress(`glGetnCompressedTexImageARB`);
  if (glGetnCompressedTexImageARB is null) assert(0, `OpenGL function 'glGetnCompressedTexImageARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnCompressedTexImageARB'\n"); }
  glGetnCompressedTexImageARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformfvARB glGetnUniformfvARB = function void (GLuint a0, GLint a1, GLsizei a2, GLfloat* a3) nothrow {
  glGetnUniformfvARB = cast(glbfn_glGetnUniformfvARB)glGetProcAddress(`glGetnUniformfvARB`);
  if (glGetnUniformfvARB is null) assert(0, `OpenGL function 'glGetnUniformfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformfvARB'\n"); }
  glGetnUniformfvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformivARB glGetnUniformivARB = function void (GLuint a0, GLint a1, GLsizei a2, GLint* a3) nothrow {
  glGetnUniformivARB = cast(glbfn_glGetnUniformivARB)glGetProcAddress(`glGetnUniformivARB`);
  if (glGetnUniformivARB is null) assert(0, `OpenGL function 'glGetnUniformivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformivARB'\n"); }
  glGetnUniformivARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformuivARB glGetnUniformuivARB = function void (GLuint a0, GLint a1, GLsizei a2, GLuint* a3) nothrow {
  glGetnUniformuivARB = cast(glbfn_glGetnUniformuivARB)glGetProcAddress(`glGetnUniformuivARB`);
  if (glGetnUniformuivARB is null) assert(0, `OpenGL function 'glGetnUniformuivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformuivARB'\n"); }
  glGetnUniformuivARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformdvARB glGetnUniformdvARB = function void (GLuint a0, GLint a1, GLsizei a2, GLdouble* a3) nothrow {
  glGetnUniformdvARB = cast(glbfn_glGetnUniformdvARB)glGetProcAddress(`glGetnUniformdvARB`);
  if (glGetnUniformdvARB is null) assert(0, `OpenGL function 'glGetnUniformdvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformdvARB'\n"); }
  glGetnUniformdvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnMapdvARB glGetnMapdvARB = function void (GLenum a0, GLenum a1, GLsizei a2, GLdouble* a3) nothrow {
  glGetnMapdvARB = cast(glbfn_glGetnMapdvARB)glGetProcAddress(`glGetnMapdvARB`);
  if (glGetnMapdvARB is null) assert(0, `OpenGL function 'glGetnMapdvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMapdvARB'\n"); }
  glGetnMapdvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnMapfvARB glGetnMapfvARB = function void (GLenum a0, GLenum a1, GLsizei a2, GLfloat* a3) nothrow {
  glGetnMapfvARB = cast(glbfn_glGetnMapfvARB)glGetProcAddress(`glGetnMapfvARB`);
  if (glGetnMapfvARB is null) assert(0, `OpenGL function 'glGetnMapfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMapfvARB'\n"); }
  glGetnMapfvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnMapivARB glGetnMapivARB = function void (GLenum a0, GLenum a1, GLsizei a2, GLint* a3) nothrow {
  glGetnMapivARB = cast(glbfn_glGetnMapivARB)glGetProcAddress(`glGetnMapivARB`);
  if (glGetnMapivARB is null) assert(0, `OpenGL function 'glGetnMapivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMapivARB'\n"); }
  glGetnMapivARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnPixelMapfvARB glGetnPixelMapfvARB = function void (GLenum a0, GLsizei a1, GLfloat* a2) nothrow {
  glGetnPixelMapfvARB = cast(glbfn_glGetnPixelMapfvARB)glGetProcAddress(`glGetnPixelMapfvARB`);
  if (glGetnPixelMapfvARB is null) assert(0, `OpenGL function 'glGetnPixelMapfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPixelMapfvARB'\n"); }
  glGetnPixelMapfvARB(a0,a1,a2,);
};
__gshared glbfn_glGetnPixelMapuivARB glGetnPixelMapuivARB = function void (GLenum a0, GLsizei a1, GLuint* a2) nothrow {
  glGetnPixelMapuivARB = cast(glbfn_glGetnPixelMapuivARB)glGetProcAddress(`glGetnPixelMapuivARB`);
  if (glGetnPixelMapuivARB is null) assert(0, `OpenGL function 'glGetnPixelMapuivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPixelMapuivARB'\n"); }
  glGetnPixelMapuivARB(a0,a1,a2,);
};
__gshared glbfn_glGetnPixelMapusvARB glGetnPixelMapusvARB = function void (GLenum a0, GLsizei a1, GLushort* a2) nothrow {
  glGetnPixelMapusvARB = cast(glbfn_glGetnPixelMapusvARB)glGetProcAddress(`glGetnPixelMapusvARB`);
  if (glGetnPixelMapusvARB is null) assert(0, `OpenGL function 'glGetnPixelMapusvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPixelMapusvARB'\n"); }
  glGetnPixelMapusvARB(a0,a1,a2,);
};
__gshared glbfn_glGetnPolygonStippleARB glGetnPolygonStippleARB = function void (GLsizei a0, GLubyte* a1) nothrow {
  glGetnPolygonStippleARB = cast(glbfn_glGetnPolygonStippleARB)glGetProcAddress(`glGetnPolygonStippleARB`);
  if (glGetnPolygonStippleARB is null) assert(0, `OpenGL function 'glGetnPolygonStippleARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnPolygonStippleARB'\n"); }
  glGetnPolygonStippleARB(a0,a1,);
};
__gshared glbfn_glGetnColorTableARB glGetnColorTableARB = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, void* a4) nothrow {
  glGetnColorTableARB = cast(glbfn_glGetnColorTableARB)glGetProcAddress(`glGetnColorTableARB`);
  if (glGetnColorTableARB is null) assert(0, `OpenGL function 'glGetnColorTableARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnColorTableARB'\n"); }
  glGetnColorTableARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetnConvolutionFilterARB glGetnConvolutionFilterARB = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, void* a4) nothrow {
  glGetnConvolutionFilterARB = cast(glbfn_glGetnConvolutionFilterARB)glGetProcAddress(`glGetnConvolutionFilterARB`);
  if (glGetnConvolutionFilterARB is null) assert(0, `OpenGL function 'glGetnConvolutionFilterARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnConvolutionFilterARB'\n"); }
  glGetnConvolutionFilterARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetnSeparableFilterARB glGetnSeparableFilterARB = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, void* a4, GLsizei a5, void* a6, void* a7) nothrow {
  glGetnSeparableFilterARB = cast(glbfn_glGetnSeparableFilterARB)glGetProcAddress(`glGetnSeparableFilterARB`);
  if (glGetnSeparableFilterARB is null) assert(0, `OpenGL function 'glGetnSeparableFilterARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnSeparableFilterARB'\n"); }
  glGetnSeparableFilterARB(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetnHistogramARB glGetnHistogramARB = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, GLsizei a4, void* a5) nothrow {
  glGetnHistogramARB = cast(glbfn_glGetnHistogramARB)glGetProcAddress(`glGetnHistogramARB`);
  if (glGetnHistogramARB is null) assert(0, `OpenGL function 'glGetnHistogramARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnHistogramARB'\n"); }
  glGetnHistogramARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetnMinmaxARB glGetnMinmaxARB = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, GLsizei a4, void* a5) nothrow {
  glGetnMinmaxARB = cast(glbfn_glGetnMinmaxARB)glGetProcAddress(`glGetnMinmaxARB`);
  if (glGetnMinmaxARB is null) assert(0, `OpenGL function 'glGetnMinmaxARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnMinmaxARB'\n"); }
  glGetnMinmaxARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glFramebufferSampleLocationsfvARB glFramebufferSampleLocationsfvARB = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glFramebufferSampleLocationsfvARB = cast(glbfn_glFramebufferSampleLocationsfvARB)glGetProcAddress(`glFramebufferSampleLocationsfvARB`);
  if (glFramebufferSampleLocationsfvARB is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferSampleLocationsfvARB'\n"); }
  glFramebufferSampleLocationsfvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedFramebufferSampleLocationsfvARB glNamedFramebufferSampleLocationsfvARB = function void (GLuint a0, GLuint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glNamedFramebufferSampleLocationsfvARB = cast(glbfn_glNamedFramebufferSampleLocationsfvARB)glGetProcAddress(`glNamedFramebufferSampleLocationsfvARB`);
  if (glNamedFramebufferSampleLocationsfvARB is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferSampleLocationsfvARB'\n"); }
  glNamedFramebufferSampleLocationsfvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glEvaluateDepthValuesARB glEvaluateDepthValuesARB = function void () nothrow {
  glEvaluateDepthValuesARB = cast(glbfn_glEvaluateDepthValuesARB)glGetProcAddress(`glEvaluateDepthValuesARB`);
  if (glEvaluateDepthValuesARB is null) assert(0, `OpenGL function 'glEvaluateDepthValuesARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvaluateDepthValuesARB'\n"); }
  glEvaluateDepthValuesARB();
};
__gshared glbfn_glMinSampleShadingARB glMinSampleShadingARB = function void (GLfloat a0) nothrow {
  glMinSampleShadingARB = cast(glbfn_glMinSampleShadingARB)glGetProcAddress(`glMinSampleShadingARB`);
  if (glMinSampleShadingARB is null) assert(0, `OpenGL function 'glMinSampleShadingARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMinSampleShadingARB'\n"); }
  glMinSampleShadingARB(a0,);
};
__gshared glbfn_glDeleteObjectARB glDeleteObjectARB = function void (GLhandleARB a0) nothrow {
  glDeleteObjectARB = cast(glbfn_glDeleteObjectARB)glGetProcAddress(`glDeleteObjectARB`);
  if (glDeleteObjectARB is null) assert(0, `OpenGL function 'glDeleteObjectARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteObjectARB'\n"); }
  glDeleteObjectARB(a0,);
};
__gshared glbfn_glGetHandleARB glGetHandleARB = function GLhandleARB (GLenum a0) nothrow {
  glGetHandleARB = cast(glbfn_glGetHandleARB)glGetProcAddress(`glGetHandleARB`);
  if (glGetHandleARB is null) assert(0, `OpenGL function 'glGetHandleARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHandleARB'\n"); }
  return glGetHandleARB(a0,);
};
__gshared glbfn_glDetachObjectARB glDetachObjectARB = function void (GLhandleARB a0, GLhandleARB a1) nothrow {
  glDetachObjectARB = cast(glbfn_glDetachObjectARB)glGetProcAddress(`glDetachObjectARB`);
  if (glDetachObjectARB is null) assert(0, `OpenGL function 'glDetachObjectARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDetachObjectARB'\n"); }
  glDetachObjectARB(a0,a1,);
};
__gshared glbfn_glCreateShaderObjectARB glCreateShaderObjectARB = function GLhandleARB (GLenum a0) nothrow {
  glCreateShaderObjectARB = cast(glbfn_glCreateShaderObjectARB)glGetProcAddress(`glCreateShaderObjectARB`);
  if (glCreateShaderObjectARB is null) assert(0, `OpenGL function 'glCreateShaderObjectARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateShaderObjectARB'\n"); }
  return glCreateShaderObjectARB(a0,);
};
__gshared glbfn_glShaderSourceARB glShaderSourceARB = function void (GLhandleARB a0, GLsizei a1, const(GLcharARB*)* a2, const(GLint)* a3) nothrow {
  glShaderSourceARB = cast(glbfn_glShaderSourceARB)glGetProcAddress(`glShaderSourceARB`);
  if (glShaderSourceARB is null) assert(0, `OpenGL function 'glShaderSourceARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShaderSourceARB'\n"); }
  glShaderSourceARB(a0,a1,a2,a3,);
};
__gshared glbfn_glCompileShaderARB glCompileShaderARB = function void (GLhandleARB a0) nothrow {
  glCompileShaderARB = cast(glbfn_glCompileShaderARB)glGetProcAddress(`glCompileShaderARB`);
  if (glCompileShaderARB is null) assert(0, `OpenGL function 'glCompileShaderARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompileShaderARB'\n"); }
  glCompileShaderARB(a0,);
};
__gshared glbfn_glCreateProgramObjectARB glCreateProgramObjectARB = function GLhandleARB () nothrow {
  glCreateProgramObjectARB = cast(glbfn_glCreateProgramObjectARB)glGetProcAddress(`glCreateProgramObjectARB`);
  if (glCreateProgramObjectARB is null) assert(0, `OpenGL function 'glCreateProgramObjectARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateProgramObjectARB'\n"); }
  return glCreateProgramObjectARB();
};
__gshared glbfn_glAttachObjectARB glAttachObjectARB = function void (GLhandleARB a0, GLhandleARB a1) nothrow {
  glAttachObjectARB = cast(glbfn_glAttachObjectARB)glGetProcAddress(`glAttachObjectARB`);
  if (glAttachObjectARB is null) assert(0, `OpenGL function 'glAttachObjectARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAttachObjectARB'\n"); }
  glAttachObjectARB(a0,a1,);
};
__gshared glbfn_glLinkProgramARB glLinkProgramARB = function void (GLhandleARB a0) nothrow {
  glLinkProgramARB = cast(glbfn_glLinkProgramARB)glGetProcAddress(`glLinkProgramARB`);
  if (glLinkProgramARB is null) assert(0, `OpenGL function 'glLinkProgramARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLinkProgramARB'\n"); }
  glLinkProgramARB(a0,);
};
__gshared glbfn_glUseProgramObjectARB glUseProgramObjectARB = function void (GLhandleARB a0) nothrow {
  glUseProgramObjectARB = cast(glbfn_glUseProgramObjectARB)glGetProcAddress(`glUseProgramObjectARB`);
  if (glUseProgramObjectARB is null) assert(0, `OpenGL function 'glUseProgramObjectARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUseProgramObjectARB'\n"); }
  glUseProgramObjectARB(a0,);
};
__gshared glbfn_glValidateProgramARB glValidateProgramARB = function void (GLhandleARB a0) nothrow {
  glValidateProgramARB = cast(glbfn_glValidateProgramARB)glGetProcAddress(`glValidateProgramARB`);
  if (glValidateProgramARB is null) assert(0, `OpenGL function 'glValidateProgramARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glValidateProgramARB'\n"); }
  glValidateProgramARB(a0,);
};
__gshared glbfn_glUniform1fARB glUniform1fARB = function void (GLint a0, GLfloat a1) nothrow {
  glUniform1fARB = cast(glbfn_glUniform1fARB)glGetProcAddress(`glUniform1fARB`);
  if (glUniform1fARB is null) assert(0, `OpenGL function 'glUniform1fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1fARB'\n"); }
  glUniform1fARB(a0,a1,);
};
__gshared glbfn_glUniform2fARB glUniform2fARB = function void (GLint a0, GLfloat a1, GLfloat a2) nothrow {
  glUniform2fARB = cast(glbfn_glUniform2fARB)glGetProcAddress(`glUniform2fARB`);
  if (glUniform2fARB is null) assert(0, `OpenGL function 'glUniform2fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2fARB'\n"); }
  glUniform2fARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3fARB glUniform3fARB = function void (GLint a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glUniform3fARB = cast(glbfn_glUniform3fARB)glGetProcAddress(`glUniform3fARB`);
  if (glUniform3fARB is null) assert(0, `OpenGL function 'glUniform3fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3fARB'\n"); }
  glUniform3fARB(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4fARB glUniform4fARB = function void (GLint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glUniform4fARB = cast(glbfn_glUniform4fARB)glGetProcAddress(`glUniform4fARB`);
  if (glUniform4fARB is null) assert(0, `OpenGL function 'glUniform4fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4fARB'\n"); }
  glUniform4fARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1iARB glUniform1iARB = function void (GLint a0, GLint a1) nothrow {
  glUniform1iARB = cast(glbfn_glUniform1iARB)glGetProcAddress(`glUniform1iARB`);
  if (glUniform1iARB is null) assert(0, `OpenGL function 'glUniform1iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1iARB'\n"); }
  glUniform1iARB(a0,a1,);
};
__gshared glbfn_glUniform2iARB glUniform2iARB = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glUniform2iARB = cast(glbfn_glUniform2iARB)glGetProcAddress(`glUniform2iARB`);
  if (glUniform2iARB is null) assert(0, `OpenGL function 'glUniform2iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2iARB'\n"); }
  glUniform2iARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3iARB glUniform3iARB = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glUniform3iARB = cast(glbfn_glUniform3iARB)glGetProcAddress(`glUniform3iARB`);
  if (glUniform3iARB is null) assert(0, `OpenGL function 'glUniform3iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3iARB'\n"); }
  glUniform3iARB(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4iARB glUniform4iARB = function void (GLint a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glUniform4iARB = cast(glbfn_glUniform4iARB)glGetProcAddress(`glUniform4iARB`);
  if (glUniform4iARB is null) assert(0, `OpenGL function 'glUniform4iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4iARB'\n"); }
  glUniform4iARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1fvARB glUniform1fvARB = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform1fvARB = cast(glbfn_glUniform1fvARB)glGetProcAddress(`glUniform1fvARB`);
  if (glUniform1fvARB is null) assert(0, `OpenGL function 'glUniform1fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1fvARB'\n"); }
  glUniform1fvARB(a0,a1,a2,);
};
__gshared glbfn_glUniform2fvARB glUniform2fvARB = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform2fvARB = cast(glbfn_glUniform2fvARB)glGetProcAddress(`glUniform2fvARB`);
  if (glUniform2fvARB is null) assert(0, `OpenGL function 'glUniform2fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2fvARB'\n"); }
  glUniform2fvARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3fvARB glUniform3fvARB = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform3fvARB = cast(glbfn_glUniform3fvARB)glGetProcAddress(`glUniform3fvARB`);
  if (glUniform3fvARB is null) assert(0, `OpenGL function 'glUniform3fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3fvARB'\n"); }
  glUniform3fvARB(a0,a1,a2,);
};
__gshared glbfn_glUniform4fvARB glUniform4fvARB = function void (GLint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glUniform4fvARB = cast(glbfn_glUniform4fvARB)glGetProcAddress(`glUniform4fvARB`);
  if (glUniform4fvARB is null) assert(0, `OpenGL function 'glUniform4fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4fvARB'\n"); }
  glUniform4fvARB(a0,a1,a2,);
};
__gshared glbfn_glUniform1ivARB glUniform1ivARB = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform1ivARB = cast(glbfn_glUniform1ivARB)glGetProcAddress(`glUniform1ivARB`);
  if (glUniform1ivARB is null) assert(0, `OpenGL function 'glUniform1ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1ivARB'\n"); }
  glUniform1ivARB(a0,a1,a2,);
};
__gshared glbfn_glUniform2ivARB glUniform2ivARB = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform2ivARB = cast(glbfn_glUniform2ivARB)glGetProcAddress(`glUniform2ivARB`);
  if (glUniform2ivARB is null) assert(0, `OpenGL function 'glUniform2ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2ivARB'\n"); }
  glUniform2ivARB(a0,a1,a2,);
};
__gshared glbfn_glUniform3ivARB glUniform3ivARB = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform3ivARB = cast(glbfn_glUniform3ivARB)glGetProcAddress(`glUniform3ivARB`);
  if (glUniform3ivARB is null) assert(0, `OpenGL function 'glUniform3ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3ivARB'\n"); }
  glUniform3ivARB(a0,a1,a2,);
};
__gshared glbfn_glUniform4ivARB glUniform4ivARB = function void (GLint a0, GLsizei a1, const(GLint)* a2) nothrow {
  glUniform4ivARB = cast(glbfn_glUniform4ivARB)glGetProcAddress(`glUniform4ivARB`);
  if (glUniform4ivARB is null) assert(0, `OpenGL function 'glUniform4ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4ivARB'\n"); }
  glUniform4ivARB(a0,a1,a2,);
};
__gshared glbfn_glUniformMatrix2fvARB glUniformMatrix2fvARB = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix2fvARB = cast(glbfn_glUniformMatrix2fvARB)glGetProcAddress(`glUniformMatrix2fvARB`);
  if (glUniformMatrix2fvARB is null) assert(0, `OpenGL function 'glUniformMatrix2fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix2fvARB'\n"); }
  glUniformMatrix2fvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix3fvARB glUniformMatrix3fvARB = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix3fvARB = cast(glbfn_glUniformMatrix3fvARB)glGetProcAddress(`glUniformMatrix3fvARB`);
  if (glUniformMatrix3fvARB is null) assert(0, `OpenGL function 'glUniformMatrix3fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix3fvARB'\n"); }
  glUniformMatrix3fvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glUniformMatrix4fvARB glUniformMatrix4fvARB = function void (GLint a0, GLsizei a1, GLboolean a2, const(GLfloat)* a3) nothrow {
  glUniformMatrix4fvARB = cast(glbfn_glUniformMatrix4fvARB)glGetProcAddress(`glUniformMatrix4fvARB`);
  if (glUniformMatrix4fvARB is null) assert(0, `OpenGL function 'glUniformMatrix4fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformMatrix4fvARB'\n"); }
  glUniformMatrix4fvARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetObjectParameterfvARB glGetObjectParameterfvARB = function void (GLhandleARB a0, GLenum a1, GLfloat* a2) nothrow {
  glGetObjectParameterfvARB = cast(glbfn_glGetObjectParameterfvARB)glGetProcAddress(`glGetObjectParameterfvARB`);
  if (glGetObjectParameterfvARB is null) assert(0, `OpenGL function 'glGetObjectParameterfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectParameterfvARB'\n"); }
  glGetObjectParameterfvARB(a0,a1,a2,);
};
__gshared glbfn_glGetObjectParameterivARB glGetObjectParameterivARB = function void (GLhandleARB a0, GLenum a1, GLint* a2) nothrow {
  glGetObjectParameterivARB = cast(glbfn_glGetObjectParameterivARB)glGetProcAddress(`glGetObjectParameterivARB`);
  if (glGetObjectParameterivARB is null) assert(0, `OpenGL function 'glGetObjectParameterivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectParameterivARB'\n"); }
  glGetObjectParameterivARB(a0,a1,a2,);
};
__gshared glbfn_glGetInfoLogARB glGetInfoLogARB = function void (GLhandleARB a0, GLsizei a1, GLsizei* a2, GLcharARB* a3) nothrow {
  glGetInfoLogARB = cast(glbfn_glGetInfoLogARB)glGetProcAddress(`glGetInfoLogARB`);
  if (glGetInfoLogARB is null) assert(0, `OpenGL function 'glGetInfoLogARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInfoLogARB'\n"); }
  glGetInfoLogARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetAttachedObjectsARB glGetAttachedObjectsARB = function void (GLhandleARB a0, GLsizei a1, GLsizei* a2, GLhandleARB* a3) nothrow {
  glGetAttachedObjectsARB = cast(glbfn_glGetAttachedObjectsARB)glGetProcAddress(`glGetAttachedObjectsARB`);
  if (glGetAttachedObjectsARB is null) assert(0, `OpenGL function 'glGetAttachedObjectsARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetAttachedObjectsARB'\n"); }
  glGetAttachedObjectsARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetUniformLocationARB glGetUniformLocationARB = function GLint (GLhandleARB a0, const(GLcharARB)* a1) nothrow {
  glGetUniformLocationARB = cast(glbfn_glGetUniformLocationARB)glGetProcAddress(`glGetUniformLocationARB`);
  if (glGetUniformLocationARB is null) assert(0, `OpenGL function 'glGetUniformLocationARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformLocationARB'\n"); }
  return glGetUniformLocationARB(a0,a1,);
};
__gshared glbfn_glGetActiveUniformARB glGetActiveUniformARB = function void (GLhandleARB a0, GLuint a1, GLsizei a2, GLsizei* a3, GLint* a4, GLenum* a5, GLcharARB* a6) nothrow {
  glGetActiveUniformARB = cast(glbfn_glGetActiveUniformARB)glGetProcAddress(`glGetActiveUniformARB`);
  if (glGetActiveUniformARB is null) assert(0, `OpenGL function 'glGetActiveUniformARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveUniformARB'\n"); }
  glGetActiveUniformARB(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetUniformfvARB glGetUniformfvARB = function void (GLhandleARB a0, GLint a1, GLfloat* a2) nothrow {
  glGetUniformfvARB = cast(glbfn_glGetUniformfvARB)glGetProcAddress(`glGetUniformfvARB`);
  if (glGetUniformfvARB is null) assert(0, `OpenGL function 'glGetUniformfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformfvARB'\n"); }
  glGetUniformfvARB(a0,a1,a2,);
};
__gshared glbfn_glGetUniformivARB glGetUniformivARB = function void (GLhandleARB a0, GLint a1, GLint* a2) nothrow {
  glGetUniformivARB = cast(glbfn_glGetUniformivARB)glGetProcAddress(`glGetUniformivARB`);
  if (glGetUniformivARB is null) assert(0, `OpenGL function 'glGetUniformivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformivARB'\n"); }
  glGetUniformivARB(a0,a1,a2,);
};
__gshared glbfn_glGetShaderSourceARB glGetShaderSourceARB = function void (GLhandleARB a0, GLsizei a1, GLsizei* a2, GLcharARB* a3) nothrow {
  glGetShaderSourceARB = cast(glbfn_glGetShaderSourceARB)glGetProcAddress(`glGetShaderSourceARB`);
  if (glGetShaderSourceARB is null) assert(0, `OpenGL function 'glGetShaderSourceARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetShaderSourceARB'\n"); }
  glGetShaderSourceARB(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedStringARB glNamedStringARB = function void (GLenum a0, GLint a1, const(GLchar)* a2, GLint a3, const(GLchar)* a4) nothrow {
  glNamedStringARB = cast(glbfn_glNamedStringARB)glGetProcAddress(`glNamedStringARB`);
  if (glNamedStringARB is null) assert(0, `OpenGL function 'glNamedStringARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedStringARB'\n"); }
  glNamedStringARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDeleteNamedStringARB glDeleteNamedStringARB = function void (GLint a0, const(GLchar)* a1) nothrow {
  glDeleteNamedStringARB = cast(glbfn_glDeleteNamedStringARB)glGetProcAddress(`glDeleteNamedStringARB`);
  if (glDeleteNamedStringARB is null) assert(0, `OpenGL function 'glDeleteNamedStringARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteNamedStringARB'\n"); }
  glDeleteNamedStringARB(a0,a1,);
};
__gshared glbfn_glCompileShaderIncludeARB glCompileShaderIncludeARB = function void (GLuint a0, GLsizei a1, const(GLchar*)* a2, const(GLint)* a3) nothrow {
  glCompileShaderIncludeARB = cast(glbfn_glCompileShaderIncludeARB)glGetProcAddress(`glCompileShaderIncludeARB`);
  if (glCompileShaderIncludeARB is null) assert(0, `OpenGL function 'glCompileShaderIncludeARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompileShaderIncludeARB'\n"); }
  glCompileShaderIncludeARB(a0,a1,a2,a3,);
};
__gshared glbfn_glIsNamedStringARB glIsNamedStringARB = function GLboolean (GLint a0, const(GLchar)* a1) nothrow {
  glIsNamedStringARB = cast(glbfn_glIsNamedStringARB)glGetProcAddress(`glIsNamedStringARB`);
  if (glIsNamedStringARB is null) assert(0, `OpenGL function 'glIsNamedStringARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsNamedStringARB'\n"); }
  return glIsNamedStringARB(a0,a1,);
};
__gshared glbfn_glGetNamedStringARB glGetNamedStringARB = function void (GLint a0, const(GLchar)* a1, GLsizei a2, GLint* a3, GLchar* a4) nothrow {
  glGetNamedStringARB = cast(glbfn_glGetNamedStringARB)glGetProcAddress(`glGetNamedStringARB`);
  if (glGetNamedStringARB is null) assert(0, `OpenGL function 'glGetNamedStringARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedStringARB'\n"); }
  glGetNamedStringARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetNamedStringivARB glGetNamedStringivARB = function void (GLint a0, const(GLchar)* a1, GLenum a2, GLint* a3) nothrow {
  glGetNamedStringivARB = cast(glbfn_glGetNamedStringivARB)glGetProcAddress(`glGetNamedStringivARB`);
  if (glGetNamedStringivARB is null) assert(0, `OpenGL function 'glGetNamedStringivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedStringivARB'\n"); }
  glGetNamedStringivARB(a0,a1,a2,a3,);
};
__gshared glbfn_glBufferPageCommitmentARB glBufferPageCommitmentARB = function void (GLenum a0, GLintptr a1, GLsizeiptr a2, GLboolean a3) nothrow {
  glBufferPageCommitmentARB = cast(glbfn_glBufferPageCommitmentARB)glGetProcAddress(`glBufferPageCommitmentARB`);
  if (glBufferPageCommitmentARB is null) assert(0, `OpenGL function 'glBufferPageCommitmentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferPageCommitmentARB'\n"); }
  glBufferPageCommitmentARB(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedBufferPageCommitmentEXT glNamedBufferPageCommitmentEXT = function void (GLuint a0, GLintptr a1, GLsizeiptr a2, GLboolean a3) nothrow {
  glNamedBufferPageCommitmentEXT = cast(glbfn_glNamedBufferPageCommitmentEXT)glGetProcAddress(`glNamedBufferPageCommitmentEXT`);
  if (glNamedBufferPageCommitmentEXT is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferPageCommitmentEXT'\n"); }
  glNamedBufferPageCommitmentEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedBufferPageCommitmentARB glNamedBufferPageCommitmentARB = function void (GLuint a0, GLintptr a1, GLsizeiptr a2, GLboolean a3) nothrow {
  glNamedBufferPageCommitmentARB = cast(glbfn_glNamedBufferPageCommitmentARB)glGetProcAddress(`glNamedBufferPageCommitmentARB`);
  if (glNamedBufferPageCommitmentARB is null) assert(0, `OpenGL function 'glNamedBufferPageCommitmentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferPageCommitmentARB'\n"); }
  glNamedBufferPageCommitmentARB(a0,a1,a2,a3,);
};
__gshared glbfn_glTexPageCommitmentARB glTexPageCommitmentARB = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLboolean a8) nothrow {
  glTexPageCommitmentARB = cast(glbfn_glTexPageCommitmentARB)glGetProcAddress(`glTexPageCommitmentARB`);
  if (glTexPageCommitmentARB is null) assert(0, `OpenGL function 'glTexPageCommitmentARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexPageCommitmentARB'\n"); }
  glTexPageCommitmentARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glTexBufferARB glTexBufferARB = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glTexBufferARB = cast(glbfn_glTexBufferARB)glGetProcAddress(`glTexBufferARB`);
  if (glTexBufferARB is null) assert(0, `OpenGL function 'glTexBufferARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexBufferARB'\n"); }
  glTexBufferARB(a0,a1,a2,);
};
__gshared glbfn_glCompressedTexImage3DARB glCompressedTexImage3DARB = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLint a6, GLsizei a7, const(void)* a8) nothrow {
  glCompressedTexImage3DARB = cast(glbfn_glCompressedTexImage3DARB)glGetProcAddress(`glCompressedTexImage3DARB`);
  if (glCompressedTexImage3DARB is null) assert(0, `OpenGL function 'glCompressedTexImage3DARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexImage3DARB'\n"); }
  glCompressedTexImage3DARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCompressedTexImage2DARB glCompressedTexImage2DARB = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLsizei a4, GLint a5, GLsizei a6, const(void)* a7) nothrow {
  glCompressedTexImage2DARB = cast(glbfn_glCompressedTexImage2DARB)glGetProcAddress(`glCompressedTexImage2DARB`);
  if (glCompressedTexImage2DARB is null) assert(0, `OpenGL function 'glCompressedTexImage2DARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexImage2DARB'\n"); }
  glCompressedTexImage2DARB(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCompressedTexImage1DARB glCompressedTexImage1DARB = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLint a4, GLsizei a5, const(void)* a6) nothrow {
  glCompressedTexImage1DARB = cast(glbfn_glCompressedTexImage1DARB)glGetProcAddress(`glCompressedTexImage1DARB`);
  if (glCompressedTexImage1DARB is null) assert(0, `OpenGL function 'glCompressedTexImage1DARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexImage1DARB'\n"); }
  glCompressedTexImage1DARB(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCompressedTexSubImage3DARB glCompressedTexSubImage3DARB = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLsizei a9, const(void)* a10) nothrow {
  glCompressedTexSubImage3DARB = cast(glbfn_glCompressedTexSubImage3DARB)glGetProcAddress(`glCompressedTexSubImage3DARB`);
  if (glCompressedTexSubImage3DARB is null) assert(0, `OpenGL function 'glCompressedTexSubImage3DARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexSubImage3DARB'\n"); }
  glCompressedTexSubImage3DARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glCompressedTexSubImage2DARB glCompressedTexSubImage2DARB = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLenum a6, GLsizei a7, const(void)* a8) nothrow {
  glCompressedTexSubImage2DARB = cast(glbfn_glCompressedTexSubImage2DARB)glGetProcAddress(`glCompressedTexSubImage2DARB`);
  if (glCompressedTexSubImage2DARB is null) assert(0, `OpenGL function 'glCompressedTexSubImage2DARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexSubImage2DARB'\n"); }
  glCompressedTexSubImage2DARB(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCompressedTexSubImage1DARB glCompressedTexSubImage1DARB = function void (GLenum a0, GLint a1, GLint a2, GLsizei a3, GLenum a4, GLsizei a5, const(void)* a6) nothrow {
  glCompressedTexSubImage1DARB = cast(glbfn_glCompressedTexSubImage1DARB)glGetProcAddress(`glCompressedTexSubImage1DARB`);
  if (glCompressedTexSubImage1DARB is null) assert(0, `OpenGL function 'glCompressedTexSubImage1DARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTexSubImage1DARB'\n"); }
  glCompressedTexSubImage1DARB(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetCompressedTexImageARB glGetCompressedTexImageARB = function void (GLenum a0, GLint a1, void* a2) nothrow {
  glGetCompressedTexImageARB = cast(glbfn_glGetCompressedTexImageARB)glGetProcAddress(`glGetCompressedTexImageARB`);
  if (glGetCompressedTexImageARB is null) assert(0, `OpenGL function 'glGetCompressedTexImageARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCompressedTexImageARB'\n"); }
  glGetCompressedTexImageARB(a0,a1,a2,);
};
__gshared glbfn_glLoadTransposeMatrixfARB glLoadTransposeMatrixfARB = function void (const(GLfloat)* a0) nothrow {
  glLoadTransposeMatrixfARB = cast(glbfn_glLoadTransposeMatrixfARB)glGetProcAddress(`glLoadTransposeMatrixfARB`);
  if (glLoadTransposeMatrixfARB is null) assert(0, `OpenGL function 'glLoadTransposeMatrixfARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadTransposeMatrixfARB'\n"); }
  glLoadTransposeMatrixfARB(a0,);
};
__gshared glbfn_glLoadTransposeMatrixdARB glLoadTransposeMatrixdARB = function void (const(GLdouble)* a0) nothrow {
  glLoadTransposeMatrixdARB = cast(glbfn_glLoadTransposeMatrixdARB)glGetProcAddress(`glLoadTransposeMatrixdARB`);
  if (glLoadTransposeMatrixdARB is null) assert(0, `OpenGL function 'glLoadTransposeMatrixdARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadTransposeMatrixdARB'\n"); }
  glLoadTransposeMatrixdARB(a0,);
};
__gshared glbfn_glMultTransposeMatrixfARB glMultTransposeMatrixfARB = function void (const(GLfloat)* a0) nothrow {
  glMultTransposeMatrixfARB = cast(glbfn_glMultTransposeMatrixfARB)glGetProcAddress(`glMultTransposeMatrixfARB`);
  if (glMultTransposeMatrixfARB is null) assert(0, `OpenGL function 'glMultTransposeMatrixfARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultTransposeMatrixfARB'\n"); }
  glMultTransposeMatrixfARB(a0,);
};
__gshared glbfn_glMultTransposeMatrixdARB glMultTransposeMatrixdARB = function void (const(GLdouble)* a0) nothrow {
  glMultTransposeMatrixdARB = cast(glbfn_glMultTransposeMatrixdARB)glGetProcAddress(`glMultTransposeMatrixdARB`);
  if (glMultTransposeMatrixdARB is null) assert(0, `OpenGL function 'glMultTransposeMatrixdARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultTransposeMatrixdARB'\n"); }
  glMultTransposeMatrixdARB(a0,);
};
__gshared glbfn_glWeightbvARB glWeightbvARB = function void (GLint a0, const(GLbyte)* a1) nothrow {
  glWeightbvARB = cast(glbfn_glWeightbvARB)glGetProcAddress(`glWeightbvARB`);
  if (glWeightbvARB is null) assert(0, `OpenGL function 'glWeightbvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightbvARB'\n"); }
  glWeightbvARB(a0,a1,);
};
__gshared glbfn_glWeightsvARB glWeightsvARB = function void (GLint a0, const(GLshort)* a1) nothrow {
  glWeightsvARB = cast(glbfn_glWeightsvARB)glGetProcAddress(`glWeightsvARB`);
  if (glWeightsvARB is null) assert(0, `OpenGL function 'glWeightsvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightsvARB'\n"); }
  glWeightsvARB(a0,a1,);
};
__gshared glbfn_glWeightivARB glWeightivARB = function void (GLint a0, const(GLint)* a1) nothrow {
  glWeightivARB = cast(glbfn_glWeightivARB)glGetProcAddress(`glWeightivARB`);
  if (glWeightivARB is null) assert(0, `OpenGL function 'glWeightivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightivARB'\n"); }
  glWeightivARB(a0,a1,);
};
__gshared glbfn_glWeightfvARB glWeightfvARB = function void (GLint a0, const(GLfloat)* a1) nothrow {
  glWeightfvARB = cast(glbfn_glWeightfvARB)glGetProcAddress(`glWeightfvARB`);
  if (glWeightfvARB is null) assert(0, `OpenGL function 'glWeightfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightfvARB'\n"); }
  glWeightfvARB(a0,a1,);
};
__gshared glbfn_glWeightdvARB glWeightdvARB = function void (GLint a0, const(GLdouble)* a1) nothrow {
  glWeightdvARB = cast(glbfn_glWeightdvARB)glGetProcAddress(`glWeightdvARB`);
  if (glWeightdvARB is null) assert(0, `OpenGL function 'glWeightdvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightdvARB'\n"); }
  glWeightdvARB(a0,a1,);
};
__gshared glbfn_glWeightubvARB glWeightubvARB = function void (GLint a0, const(GLubyte)* a1) nothrow {
  glWeightubvARB = cast(glbfn_glWeightubvARB)glGetProcAddress(`glWeightubvARB`);
  if (glWeightubvARB is null) assert(0, `OpenGL function 'glWeightubvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightubvARB'\n"); }
  glWeightubvARB(a0,a1,);
};
__gshared glbfn_glWeightusvARB glWeightusvARB = function void (GLint a0, const(GLushort)* a1) nothrow {
  glWeightusvARB = cast(glbfn_glWeightusvARB)glGetProcAddress(`glWeightusvARB`);
  if (glWeightusvARB is null) assert(0, `OpenGL function 'glWeightusvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightusvARB'\n"); }
  glWeightusvARB(a0,a1,);
};
__gshared glbfn_glWeightuivARB glWeightuivARB = function void (GLint a0, const(GLuint)* a1) nothrow {
  glWeightuivARB = cast(glbfn_glWeightuivARB)glGetProcAddress(`glWeightuivARB`);
  if (glWeightuivARB is null) assert(0, `OpenGL function 'glWeightuivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightuivARB'\n"); }
  glWeightuivARB(a0,a1,);
};
__gshared glbfn_glWeightPointerARB glWeightPointerARB = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glWeightPointerARB = cast(glbfn_glWeightPointerARB)glGetProcAddress(`glWeightPointerARB`);
  if (glWeightPointerARB is null) assert(0, `OpenGL function 'glWeightPointerARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightPointerARB'\n"); }
  glWeightPointerARB(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexBlendARB glVertexBlendARB = function void (GLint a0) nothrow {
  glVertexBlendARB = cast(glbfn_glVertexBlendARB)glGetProcAddress(`glVertexBlendARB`);
  if (glVertexBlendARB is null) assert(0, `OpenGL function 'glVertexBlendARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexBlendARB'\n"); }
  glVertexBlendARB(a0,);
};
__gshared glbfn_glBindBufferARB glBindBufferARB = function void (GLenum a0, GLuint a1) nothrow {
  glBindBufferARB = cast(glbfn_glBindBufferARB)glGetProcAddress(`glBindBufferARB`);
  if (glBindBufferARB is null) assert(0, `OpenGL function 'glBindBufferARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferARB'\n"); }
  glBindBufferARB(a0,a1,);
};
__gshared glbfn_glDeleteBuffersARB glDeleteBuffersARB = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteBuffersARB = cast(glbfn_glDeleteBuffersARB)glGetProcAddress(`glDeleteBuffersARB`);
  if (glDeleteBuffersARB is null) assert(0, `OpenGL function 'glDeleteBuffersARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteBuffersARB'\n"); }
  glDeleteBuffersARB(a0,a1,);
};
__gshared glbfn_glGenBuffersARB glGenBuffersARB = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenBuffersARB = cast(glbfn_glGenBuffersARB)glGetProcAddress(`glGenBuffersARB`);
  if (glGenBuffersARB is null) assert(0, `OpenGL function 'glGenBuffersARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenBuffersARB'\n"); }
  glGenBuffersARB(a0,a1,);
};
__gshared glbfn_glIsBufferARB glIsBufferARB = function GLboolean (GLuint a0) nothrow {
  glIsBufferARB = cast(glbfn_glIsBufferARB)glGetProcAddress(`glIsBufferARB`);
  if (glIsBufferARB is null) assert(0, `OpenGL function 'glIsBufferARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsBufferARB'\n"); }
  return glIsBufferARB(a0,);
};
__gshared glbfn_glBufferDataARB glBufferDataARB = function void (GLenum a0, GLsizeiptrARB a1, const(void)* a2, GLenum a3) nothrow {
  glBufferDataARB = cast(glbfn_glBufferDataARB)glGetProcAddress(`glBufferDataARB`);
  if (glBufferDataARB is null) assert(0, `OpenGL function 'glBufferDataARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferDataARB'\n"); }
  glBufferDataARB(a0,a1,a2,a3,);
};
__gshared glbfn_glBufferSubDataARB glBufferSubDataARB = function void (GLenum a0, GLintptrARB a1, GLsizeiptrARB a2, const(void)* a3) nothrow {
  glBufferSubDataARB = cast(glbfn_glBufferSubDataARB)glGetProcAddress(`glBufferSubDataARB`);
  if (glBufferSubDataARB is null) assert(0, `OpenGL function 'glBufferSubDataARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferSubDataARB'\n"); }
  glBufferSubDataARB(a0,a1,a2,a3,);
};
__gshared glbfn_glGetBufferSubDataARB glGetBufferSubDataARB = function void (GLenum a0, GLintptrARB a1, GLsizeiptrARB a2, void* a3) nothrow {
  glGetBufferSubDataARB = cast(glbfn_glGetBufferSubDataARB)glGetProcAddress(`glGetBufferSubDataARB`);
  if (glGetBufferSubDataARB is null) assert(0, `OpenGL function 'glGetBufferSubDataARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferSubDataARB'\n"); }
  glGetBufferSubDataARB(a0,a1,a2,a3,);
};
__gshared glbfn_glMapBufferARB glMapBufferARB = function void* (GLenum a0, GLenum a1) nothrow {
  glMapBufferARB = cast(glbfn_glMapBufferARB)glGetProcAddress(`glMapBufferARB`);
  if (glMapBufferARB is null) assert(0, `OpenGL function 'glMapBufferARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapBufferARB'\n"); }
  return glMapBufferARB(a0,a1,);
};
__gshared glbfn_glUnmapBufferARB glUnmapBufferARB = function GLboolean (GLenum a0) nothrow {
  glUnmapBufferARB = cast(glbfn_glUnmapBufferARB)glGetProcAddress(`glUnmapBufferARB`);
  if (glUnmapBufferARB is null) assert(0, `OpenGL function 'glUnmapBufferARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUnmapBufferARB'\n"); }
  return glUnmapBufferARB(a0,);
};
__gshared glbfn_glGetBufferParameterivARB glGetBufferParameterivARB = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetBufferParameterivARB = cast(glbfn_glGetBufferParameterivARB)glGetProcAddress(`glGetBufferParameterivARB`);
  if (glGetBufferParameterivARB is null) assert(0, `OpenGL function 'glGetBufferParameterivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferParameterivARB'\n"); }
  glGetBufferParameterivARB(a0,a1,a2,);
};
__gshared glbfn_glGetBufferPointervARB glGetBufferPointervARB = function void (GLenum a0, GLenum a1, void** a2) nothrow {
  glGetBufferPointervARB = cast(glbfn_glGetBufferPointervARB)glGetProcAddress(`glGetBufferPointervARB`);
  if (glGetBufferPointervARB is null) assert(0, `OpenGL function 'glGetBufferPointervARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferPointervARB'\n"); }
  glGetBufferPointervARB(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib1dARB glVertexAttrib1dARB = function void (GLuint a0, GLdouble a1) nothrow {
  glVertexAttrib1dARB = cast(glbfn_glVertexAttrib1dARB)glGetProcAddress(`glVertexAttrib1dARB`);
  if (glVertexAttrib1dARB is null) assert(0, `OpenGL function 'glVertexAttrib1dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1dARB'\n"); }
  glVertexAttrib1dARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib1dvARB glVertexAttrib1dvARB = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib1dvARB = cast(glbfn_glVertexAttrib1dvARB)glGetProcAddress(`glVertexAttrib1dvARB`);
  if (glVertexAttrib1dvARB is null) assert(0, `OpenGL function 'glVertexAttrib1dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1dvARB'\n"); }
  glVertexAttrib1dvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib1fARB glVertexAttrib1fARB = function void (GLuint a0, GLfloat a1) nothrow {
  glVertexAttrib1fARB = cast(glbfn_glVertexAttrib1fARB)glGetProcAddress(`glVertexAttrib1fARB`);
  if (glVertexAttrib1fARB is null) assert(0, `OpenGL function 'glVertexAttrib1fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1fARB'\n"); }
  glVertexAttrib1fARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib1fvARB glVertexAttrib1fvARB = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib1fvARB = cast(glbfn_glVertexAttrib1fvARB)glGetProcAddress(`glVertexAttrib1fvARB`);
  if (glVertexAttrib1fvARB is null) assert(0, `OpenGL function 'glVertexAttrib1fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1fvARB'\n"); }
  glVertexAttrib1fvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib1sARB glVertexAttrib1sARB = function void (GLuint a0, GLshort a1) nothrow {
  glVertexAttrib1sARB = cast(glbfn_glVertexAttrib1sARB)glGetProcAddress(`glVertexAttrib1sARB`);
  if (glVertexAttrib1sARB is null) assert(0, `OpenGL function 'glVertexAttrib1sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1sARB'\n"); }
  glVertexAttrib1sARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib1svARB glVertexAttrib1svARB = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib1svARB = cast(glbfn_glVertexAttrib1svARB)glGetProcAddress(`glVertexAttrib1svARB`);
  if (glVertexAttrib1svARB is null) assert(0, `OpenGL function 'glVertexAttrib1svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1svARB'\n"); }
  glVertexAttrib1svARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib2dARB glVertexAttrib2dARB = function void (GLuint a0, GLdouble a1, GLdouble a2) nothrow {
  glVertexAttrib2dARB = cast(glbfn_glVertexAttrib2dARB)glGetProcAddress(`glVertexAttrib2dARB`);
  if (glVertexAttrib2dARB is null) assert(0, `OpenGL function 'glVertexAttrib2dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2dARB'\n"); }
  glVertexAttrib2dARB(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2dvARB glVertexAttrib2dvARB = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib2dvARB = cast(glbfn_glVertexAttrib2dvARB)glGetProcAddress(`glVertexAttrib2dvARB`);
  if (glVertexAttrib2dvARB is null) assert(0, `OpenGL function 'glVertexAttrib2dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2dvARB'\n"); }
  glVertexAttrib2dvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib2fARB glVertexAttrib2fARB = function void (GLuint a0, GLfloat a1, GLfloat a2) nothrow {
  glVertexAttrib2fARB = cast(glbfn_glVertexAttrib2fARB)glGetProcAddress(`glVertexAttrib2fARB`);
  if (glVertexAttrib2fARB is null) assert(0, `OpenGL function 'glVertexAttrib2fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2fARB'\n"); }
  glVertexAttrib2fARB(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2fvARB glVertexAttrib2fvARB = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib2fvARB = cast(glbfn_glVertexAttrib2fvARB)glGetProcAddress(`glVertexAttrib2fvARB`);
  if (glVertexAttrib2fvARB is null) assert(0, `OpenGL function 'glVertexAttrib2fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2fvARB'\n"); }
  glVertexAttrib2fvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib2sARB glVertexAttrib2sARB = function void (GLuint a0, GLshort a1, GLshort a2) nothrow {
  glVertexAttrib2sARB = cast(glbfn_glVertexAttrib2sARB)glGetProcAddress(`glVertexAttrib2sARB`);
  if (glVertexAttrib2sARB is null) assert(0, `OpenGL function 'glVertexAttrib2sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2sARB'\n"); }
  glVertexAttrib2sARB(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2svARB glVertexAttrib2svARB = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib2svARB = cast(glbfn_glVertexAttrib2svARB)glGetProcAddress(`glVertexAttrib2svARB`);
  if (glVertexAttrib2svARB is null) assert(0, `OpenGL function 'glVertexAttrib2svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2svARB'\n"); }
  glVertexAttrib2svARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib3dARB glVertexAttrib3dARB = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glVertexAttrib3dARB = cast(glbfn_glVertexAttrib3dARB)glGetProcAddress(`glVertexAttrib3dARB`);
  if (glVertexAttrib3dARB is null) assert(0, `OpenGL function 'glVertexAttrib3dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3dARB'\n"); }
  glVertexAttrib3dARB(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3dvARB glVertexAttrib3dvARB = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib3dvARB = cast(glbfn_glVertexAttrib3dvARB)glGetProcAddress(`glVertexAttrib3dvARB`);
  if (glVertexAttrib3dvARB is null) assert(0, `OpenGL function 'glVertexAttrib3dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3dvARB'\n"); }
  glVertexAttrib3dvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib3fARB glVertexAttrib3fARB = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glVertexAttrib3fARB = cast(glbfn_glVertexAttrib3fARB)glGetProcAddress(`glVertexAttrib3fARB`);
  if (glVertexAttrib3fARB is null) assert(0, `OpenGL function 'glVertexAttrib3fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3fARB'\n"); }
  glVertexAttrib3fARB(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3fvARB glVertexAttrib3fvARB = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib3fvARB = cast(glbfn_glVertexAttrib3fvARB)glGetProcAddress(`glVertexAttrib3fvARB`);
  if (glVertexAttrib3fvARB is null) assert(0, `OpenGL function 'glVertexAttrib3fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3fvARB'\n"); }
  glVertexAttrib3fvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib3sARB glVertexAttrib3sARB = function void (GLuint a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glVertexAttrib3sARB = cast(glbfn_glVertexAttrib3sARB)glGetProcAddress(`glVertexAttrib3sARB`);
  if (glVertexAttrib3sARB is null) assert(0, `OpenGL function 'glVertexAttrib3sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3sARB'\n"); }
  glVertexAttrib3sARB(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3svARB glVertexAttrib3svARB = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib3svARB = cast(glbfn_glVertexAttrib3svARB)glGetProcAddress(`glVertexAttrib3svARB`);
  if (glVertexAttrib3svARB is null) assert(0, `OpenGL function 'glVertexAttrib3svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3svARB'\n"); }
  glVertexAttrib3svARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4NbvARB glVertexAttrib4NbvARB = function void (GLuint a0, const(GLbyte)* a1) nothrow {
  glVertexAttrib4NbvARB = cast(glbfn_glVertexAttrib4NbvARB)glGetProcAddress(`glVertexAttrib4NbvARB`);
  if (glVertexAttrib4NbvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NbvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4NbvARB'\n"); }
  glVertexAttrib4NbvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4NivARB glVertexAttrib4NivARB = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttrib4NivARB = cast(glbfn_glVertexAttrib4NivARB)glGetProcAddress(`glVertexAttrib4NivARB`);
  if (glVertexAttrib4NivARB is null) assert(0, `OpenGL function 'glVertexAttrib4NivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4NivARB'\n"); }
  glVertexAttrib4NivARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4NsvARB glVertexAttrib4NsvARB = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib4NsvARB = cast(glbfn_glVertexAttrib4NsvARB)glGetProcAddress(`glVertexAttrib4NsvARB`);
  if (glVertexAttrib4NsvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NsvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4NsvARB'\n"); }
  glVertexAttrib4NsvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4NubARB glVertexAttrib4NubARB = function void (GLuint a0, GLubyte a1, GLubyte a2, GLubyte a3, GLubyte a4) nothrow {
  glVertexAttrib4NubARB = cast(glbfn_glVertexAttrib4NubARB)glGetProcAddress(`glVertexAttrib4NubARB`);
  if (glVertexAttrib4NubARB is null) assert(0, `OpenGL function 'glVertexAttrib4NubARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4NubARB'\n"); }
  glVertexAttrib4NubARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4NubvARB glVertexAttrib4NubvARB = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVertexAttrib4NubvARB = cast(glbfn_glVertexAttrib4NubvARB)glGetProcAddress(`glVertexAttrib4NubvARB`);
  if (glVertexAttrib4NubvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NubvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4NubvARB'\n"); }
  glVertexAttrib4NubvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4NuivARB glVertexAttrib4NuivARB = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttrib4NuivARB = cast(glbfn_glVertexAttrib4NuivARB)glGetProcAddress(`glVertexAttrib4NuivARB`);
  if (glVertexAttrib4NuivARB is null) assert(0, `OpenGL function 'glVertexAttrib4NuivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4NuivARB'\n"); }
  glVertexAttrib4NuivARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4NusvARB glVertexAttrib4NusvARB = function void (GLuint a0, const(GLushort)* a1) nothrow {
  glVertexAttrib4NusvARB = cast(glbfn_glVertexAttrib4NusvARB)glGetProcAddress(`glVertexAttrib4NusvARB`);
  if (glVertexAttrib4NusvARB is null) assert(0, `OpenGL function 'glVertexAttrib4NusvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4NusvARB'\n"); }
  glVertexAttrib4NusvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4bvARB glVertexAttrib4bvARB = function void (GLuint a0, const(GLbyte)* a1) nothrow {
  glVertexAttrib4bvARB = cast(glbfn_glVertexAttrib4bvARB)glGetProcAddress(`glVertexAttrib4bvARB`);
  if (glVertexAttrib4bvARB is null) assert(0, `OpenGL function 'glVertexAttrib4bvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4bvARB'\n"); }
  glVertexAttrib4bvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4dARB glVertexAttrib4dARB = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glVertexAttrib4dARB = cast(glbfn_glVertexAttrib4dARB)glGetProcAddress(`glVertexAttrib4dARB`);
  if (glVertexAttrib4dARB is null) assert(0, `OpenGL function 'glVertexAttrib4dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4dARB'\n"); }
  glVertexAttrib4dARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4dvARB glVertexAttrib4dvARB = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib4dvARB = cast(glbfn_glVertexAttrib4dvARB)glGetProcAddress(`glVertexAttrib4dvARB`);
  if (glVertexAttrib4dvARB is null) assert(0, `OpenGL function 'glVertexAttrib4dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4dvARB'\n"); }
  glVertexAttrib4dvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4fARB glVertexAttrib4fARB = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glVertexAttrib4fARB = cast(glbfn_glVertexAttrib4fARB)glGetProcAddress(`glVertexAttrib4fARB`);
  if (glVertexAttrib4fARB is null) assert(0, `OpenGL function 'glVertexAttrib4fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4fARB'\n"); }
  glVertexAttrib4fARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4fvARB glVertexAttrib4fvARB = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib4fvARB = cast(glbfn_glVertexAttrib4fvARB)glGetProcAddress(`glVertexAttrib4fvARB`);
  if (glVertexAttrib4fvARB is null) assert(0, `OpenGL function 'glVertexAttrib4fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4fvARB'\n"); }
  glVertexAttrib4fvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4ivARB glVertexAttrib4ivARB = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttrib4ivARB = cast(glbfn_glVertexAttrib4ivARB)glGetProcAddress(`glVertexAttrib4ivARB`);
  if (glVertexAttrib4ivARB is null) assert(0, `OpenGL function 'glVertexAttrib4ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4ivARB'\n"); }
  glVertexAttrib4ivARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4sARB glVertexAttrib4sARB = function void (GLuint a0, GLshort a1, GLshort a2, GLshort a3, GLshort a4) nothrow {
  glVertexAttrib4sARB = cast(glbfn_glVertexAttrib4sARB)glGetProcAddress(`glVertexAttrib4sARB`);
  if (glVertexAttrib4sARB is null) assert(0, `OpenGL function 'glVertexAttrib4sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4sARB'\n"); }
  glVertexAttrib4sARB(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4svARB glVertexAttrib4svARB = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib4svARB = cast(glbfn_glVertexAttrib4svARB)glGetProcAddress(`glVertexAttrib4svARB`);
  if (glVertexAttrib4svARB is null) assert(0, `OpenGL function 'glVertexAttrib4svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4svARB'\n"); }
  glVertexAttrib4svARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4ubvARB glVertexAttrib4ubvARB = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVertexAttrib4ubvARB = cast(glbfn_glVertexAttrib4ubvARB)glGetProcAddress(`glVertexAttrib4ubvARB`);
  if (glVertexAttrib4ubvARB is null) assert(0, `OpenGL function 'glVertexAttrib4ubvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4ubvARB'\n"); }
  glVertexAttrib4ubvARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4uivARB glVertexAttrib4uivARB = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttrib4uivARB = cast(glbfn_glVertexAttrib4uivARB)glGetProcAddress(`glVertexAttrib4uivARB`);
  if (glVertexAttrib4uivARB is null) assert(0, `OpenGL function 'glVertexAttrib4uivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4uivARB'\n"); }
  glVertexAttrib4uivARB(a0,a1,);
};
__gshared glbfn_glVertexAttrib4usvARB glVertexAttrib4usvARB = function void (GLuint a0, const(GLushort)* a1) nothrow {
  glVertexAttrib4usvARB = cast(glbfn_glVertexAttrib4usvARB)glGetProcAddress(`glVertexAttrib4usvARB`);
  if (glVertexAttrib4usvARB is null) assert(0, `OpenGL function 'glVertexAttrib4usvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4usvARB'\n"); }
  glVertexAttrib4usvARB(a0,a1,);
};
__gshared glbfn_glVertexAttribPointerARB glVertexAttribPointerARB = function void (GLuint a0, GLint a1, GLenum a2, GLboolean a3, GLsizei a4, const(void)* a5) nothrow {
  glVertexAttribPointerARB = cast(glbfn_glVertexAttribPointerARB)glGetProcAddress(`glVertexAttribPointerARB`);
  if (glVertexAttribPointerARB is null) assert(0, `OpenGL function 'glVertexAttribPointerARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribPointerARB'\n"); }
  glVertexAttribPointerARB(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glEnableVertexAttribArrayARB glEnableVertexAttribArrayARB = function void (GLuint a0) nothrow {
  glEnableVertexAttribArrayARB = cast(glbfn_glEnableVertexAttribArrayARB)glGetProcAddress(`glEnableVertexAttribArrayARB`);
  if (glEnableVertexAttribArrayARB is null) assert(0, `OpenGL function 'glEnableVertexAttribArrayARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableVertexAttribArrayARB'\n"); }
  glEnableVertexAttribArrayARB(a0,);
};
__gshared glbfn_glDisableVertexAttribArrayARB glDisableVertexAttribArrayARB = function void (GLuint a0) nothrow {
  glDisableVertexAttribArrayARB = cast(glbfn_glDisableVertexAttribArrayARB)glGetProcAddress(`glDisableVertexAttribArrayARB`);
  if (glDisableVertexAttribArrayARB is null) assert(0, `OpenGL function 'glDisableVertexAttribArrayARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableVertexAttribArrayARB'\n"); }
  glDisableVertexAttribArrayARB(a0,);
};
__gshared glbfn_glGetVertexAttribdvARB glGetVertexAttribdvARB = function void (GLuint a0, GLenum a1, GLdouble* a2) nothrow {
  glGetVertexAttribdvARB = cast(glbfn_glGetVertexAttribdvARB)glGetProcAddress(`glGetVertexAttribdvARB`);
  if (glGetVertexAttribdvARB is null) assert(0, `OpenGL function 'glGetVertexAttribdvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribdvARB'\n"); }
  glGetVertexAttribdvARB(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribfvARB glGetVertexAttribfvARB = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetVertexAttribfvARB = cast(glbfn_glGetVertexAttribfvARB)glGetProcAddress(`glGetVertexAttribfvARB`);
  if (glGetVertexAttribfvARB is null) assert(0, `OpenGL function 'glGetVertexAttribfvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribfvARB'\n"); }
  glGetVertexAttribfvARB(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribivARB glGetVertexAttribivARB = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexAttribivARB = cast(glbfn_glGetVertexAttribivARB)glGetProcAddress(`glGetVertexAttribivARB`);
  if (glGetVertexAttribivARB is null) assert(0, `OpenGL function 'glGetVertexAttribivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribivARB'\n"); }
  glGetVertexAttribivARB(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribPointervARB glGetVertexAttribPointervARB = function void (GLuint a0, GLenum a1, void** a2) nothrow {
  glGetVertexAttribPointervARB = cast(glbfn_glGetVertexAttribPointervARB)glGetProcAddress(`glGetVertexAttribPointervARB`);
  if (glGetVertexAttribPointervARB is null) assert(0, `OpenGL function 'glGetVertexAttribPointervARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribPointervARB'\n"); }
  glGetVertexAttribPointervARB(a0,a1,a2,);
};
__gshared glbfn_glBindAttribLocationARB glBindAttribLocationARB = function void (GLhandleARB a0, GLuint a1, const(GLcharARB)* a2) nothrow {
  glBindAttribLocationARB = cast(glbfn_glBindAttribLocationARB)glGetProcAddress(`glBindAttribLocationARB`);
  if (glBindAttribLocationARB is null) assert(0, `OpenGL function 'glBindAttribLocationARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindAttribLocationARB'\n"); }
  glBindAttribLocationARB(a0,a1,a2,);
};
__gshared glbfn_glGetActiveAttribARB glGetActiveAttribARB = function void (GLhandleARB a0, GLuint a1, GLsizei a2, GLsizei* a3, GLint* a4, GLenum* a5, GLcharARB* a6) nothrow {
  glGetActiveAttribARB = cast(glbfn_glGetActiveAttribARB)glGetProcAddress(`glGetActiveAttribARB`);
  if (glGetActiveAttribARB is null) assert(0, `OpenGL function 'glGetActiveAttribARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveAttribARB'\n"); }
  glGetActiveAttribARB(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetAttribLocationARB glGetAttribLocationARB = function GLint (GLhandleARB a0, const(GLcharARB)* a1) nothrow {
  glGetAttribLocationARB = cast(glbfn_glGetAttribLocationARB)glGetProcAddress(`glGetAttribLocationARB`);
  if (glGetAttribLocationARB is null) assert(0, `OpenGL function 'glGetAttribLocationARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetAttribLocationARB'\n"); }
  return glGetAttribLocationARB(a0,a1,);
};
__gshared glbfn_glWindowPos2dARB glWindowPos2dARB = function void (GLdouble a0, GLdouble a1) nothrow {
  glWindowPos2dARB = cast(glbfn_glWindowPos2dARB)glGetProcAddress(`glWindowPos2dARB`);
  if (glWindowPos2dARB is null) assert(0, `OpenGL function 'glWindowPos2dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2dARB'\n"); }
  glWindowPos2dARB(a0,a1,);
};
__gshared glbfn_glWindowPos2dvARB glWindowPos2dvARB = function void (const(GLdouble)* a0) nothrow {
  glWindowPos2dvARB = cast(glbfn_glWindowPos2dvARB)glGetProcAddress(`glWindowPos2dvARB`);
  if (glWindowPos2dvARB is null) assert(0, `OpenGL function 'glWindowPos2dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2dvARB'\n"); }
  glWindowPos2dvARB(a0,);
};
__gshared glbfn_glWindowPos2fARB glWindowPos2fARB = function void (GLfloat a0, GLfloat a1) nothrow {
  glWindowPos2fARB = cast(glbfn_glWindowPos2fARB)glGetProcAddress(`glWindowPos2fARB`);
  if (glWindowPos2fARB is null) assert(0, `OpenGL function 'glWindowPos2fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2fARB'\n"); }
  glWindowPos2fARB(a0,a1,);
};
__gshared glbfn_glWindowPos2fvARB glWindowPos2fvARB = function void (const(GLfloat)* a0) nothrow {
  glWindowPos2fvARB = cast(glbfn_glWindowPos2fvARB)glGetProcAddress(`glWindowPos2fvARB`);
  if (glWindowPos2fvARB is null) assert(0, `OpenGL function 'glWindowPos2fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2fvARB'\n"); }
  glWindowPos2fvARB(a0,);
};
__gshared glbfn_glWindowPos2iARB glWindowPos2iARB = function void (GLint a0, GLint a1) nothrow {
  glWindowPos2iARB = cast(glbfn_glWindowPos2iARB)glGetProcAddress(`glWindowPos2iARB`);
  if (glWindowPos2iARB is null) assert(0, `OpenGL function 'glWindowPos2iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2iARB'\n"); }
  glWindowPos2iARB(a0,a1,);
};
__gshared glbfn_glWindowPos2ivARB glWindowPos2ivARB = function void (const(GLint)* a0) nothrow {
  glWindowPos2ivARB = cast(glbfn_glWindowPos2ivARB)glGetProcAddress(`glWindowPos2ivARB`);
  if (glWindowPos2ivARB is null) assert(0, `OpenGL function 'glWindowPos2ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2ivARB'\n"); }
  glWindowPos2ivARB(a0,);
};
__gshared glbfn_glWindowPos2sARB glWindowPos2sARB = function void (GLshort a0, GLshort a1) nothrow {
  glWindowPos2sARB = cast(glbfn_glWindowPos2sARB)glGetProcAddress(`glWindowPos2sARB`);
  if (glWindowPos2sARB is null) assert(0, `OpenGL function 'glWindowPos2sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2sARB'\n"); }
  glWindowPos2sARB(a0,a1,);
};
__gshared glbfn_glWindowPos2svARB glWindowPos2svARB = function void (const(GLshort)* a0) nothrow {
  glWindowPos2svARB = cast(glbfn_glWindowPos2svARB)glGetProcAddress(`glWindowPos2svARB`);
  if (glWindowPos2svARB is null) assert(0, `OpenGL function 'glWindowPos2svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2svARB'\n"); }
  glWindowPos2svARB(a0,);
};
__gshared glbfn_glWindowPos3dARB glWindowPos3dARB = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glWindowPos3dARB = cast(glbfn_glWindowPos3dARB)glGetProcAddress(`glWindowPos3dARB`);
  if (glWindowPos3dARB is null) assert(0, `OpenGL function 'glWindowPos3dARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3dARB'\n"); }
  glWindowPos3dARB(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3dvARB glWindowPos3dvARB = function void (const(GLdouble)* a0) nothrow {
  glWindowPos3dvARB = cast(glbfn_glWindowPos3dvARB)glGetProcAddress(`glWindowPos3dvARB`);
  if (glWindowPos3dvARB is null) assert(0, `OpenGL function 'glWindowPos3dvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3dvARB'\n"); }
  glWindowPos3dvARB(a0,);
};
__gshared glbfn_glWindowPos3fARB glWindowPos3fARB = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glWindowPos3fARB = cast(glbfn_glWindowPos3fARB)glGetProcAddress(`glWindowPos3fARB`);
  if (glWindowPos3fARB is null) assert(0, `OpenGL function 'glWindowPos3fARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3fARB'\n"); }
  glWindowPos3fARB(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3fvARB glWindowPos3fvARB = function void (const(GLfloat)* a0) nothrow {
  glWindowPos3fvARB = cast(glbfn_glWindowPos3fvARB)glGetProcAddress(`glWindowPos3fvARB`);
  if (glWindowPos3fvARB is null) assert(0, `OpenGL function 'glWindowPos3fvARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3fvARB'\n"); }
  glWindowPos3fvARB(a0,);
};
__gshared glbfn_glWindowPos3iARB glWindowPos3iARB = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glWindowPos3iARB = cast(glbfn_glWindowPos3iARB)glGetProcAddress(`glWindowPos3iARB`);
  if (glWindowPos3iARB is null) assert(0, `OpenGL function 'glWindowPos3iARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3iARB'\n"); }
  glWindowPos3iARB(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3ivARB glWindowPos3ivARB = function void (const(GLint)* a0) nothrow {
  glWindowPos3ivARB = cast(glbfn_glWindowPos3ivARB)glGetProcAddress(`glWindowPos3ivARB`);
  if (glWindowPos3ivARB is null) assert(0, `OpenGL function 'glWindowPos3ivARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3ivARB'\n"); }
  glWindowPos3ivARB(a0,);
};
__gshared glbfn_glWindowPos3sARB glWindowPos3sARB = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glWindowPos3sARB = cast(glbfn_glWindowPos3sARB)glGetProcAddress(`glWindowPos3sARB`);
  if (glWindowPos3sARB is null) assert(0, `OpenGL function 'glWindowPos3sARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3sARB'\n"); }
  glWindowPos3sARB(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3svARB glWindowPos3svARB = function void (const(GLshort)* a0) nothrow {
  glWindowPos3svARB = cast(glbfn_glWindowPos3svARB)glGetProcAddress(`glWindowPos3svARB`);
  if (glWindowPos3svARB is null) assert(0, `OpenGL function 'glWindowPos3svARB' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3svARB'\n"); }
  glWindowPos3svARB(a0,);
};
__gshared glbfn_glDrawBuffersATI glDrawBuffersATI = function void (GLsizei a0, const(GLenum)* a1) nothrow {
  glDrawBuffersATI = cast(glbfn_glDrawBuffersATI)glGetProcAddress(`glDrawBuffersATI`);
  if (glDrawBuffersATI is null) assert(0, `OpenGL function 'glDrawBuffersATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawBuffersATI'\n"); }
  glDrawBuffersATI(a0,a1,);
};
__gshared glbfn_glElementPointerATI glElementPointerATI = function void (GLenum a0, const(void)* a1) nothrow {
  glElementPointerATI = cast(glbfn_glElementPointerATI)glGetProcAddress(`glElementPointerATI`);
  if (glElementPointerATI is null) assert(0, `OpenGL function 'glElementPointerATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glElementPointerATI'\n"); }
  glElementPointerATI(a0,a1,);
};
__gshared glbfn_glDrawElementArrayATI glDrawElementArrayATI = function void (GLenum a0, GLsizei a1) nothrow {
  glDrawElementArrayATI = cast(glbfn_glDrawElementArrayATI)glGetProcAddress(`glDrawElementArrayATI`);
  if (glDrawElementArrayATI is null) assert(0, `OpenGL function 'glDrawElementArrayATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementArrayATI'\n"); }
  glDrawElementArrayATI(a0,a1,);
};
__gshared glbfn_glDrawRangeElementArrayATI glDrawRangeElementArrayATI = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3) nothrow {
  glDrawRangeElementArrayATI = cast(glbfn_glDrawRangeElementArrayATI)glGetProcAddress(`glDrawRangeElementArrayATI`);
  if (glDrawRangeElementArrayATI is null) assert(0, `OpenGL function 'glDrawRangeElementArrayATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawRangeElementArrayATI'\n"); }
  glDrawRangeElementArrayATI(a0,a1,a2,a3,);
};
__gshared glbfn_glTexBumpParameterivATI glTexBumpParameterivATI = function void (GLenum a0, const(GLint)* a1) nothrow {
  glTexBumpParameterivATI = cast(glbfn_glTexBumpParameterivATI)glGetProcAddress(`glTexBumpParameterivATI`);
  if (glTexBumpParameterivATI is null) assert(0, `OpenGL function 'glTexBumpParameterivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexBumpParameterivATI'\n"); }
  glTexBumpParameterivATI(a0,a1,);
};
__gshared glbfn_glTexBumpParameterfvATI glTexBumpParameterfvATI = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glTexBumpParameterfvATI = cast(glbfn_glTexBumpParameterfvATI)glGetProcAddress(`glTexBumpParameterfvATI`);
  if (glTexBumpParameterfvATI is null) assert(0, `OpenGL function 'glTexBumpParameterfvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexBumpParameterfvATI'\n"); }
  glTexBumpParameterfvATI(a0,a1,);
};
__gshared glbfn_glGetTexBumpParameterivATI glGetTexBumpParameterivATI = function void (GLenum a0, GLint* a1) nothrow {
  glGetTexBumpParameterivATI = cast(glbfn_glGetTexBumpParameterivATI)glGetProcAddress(`glGetTexBumpParameterivATI`);
  if (glGetTexBumpParameterivATI is null) assert(0, `OpenGL function 'glGetTexBumpParameterivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexBumpParameterivATI'\n"); }
  glGetTexBumpParameterivATI(a0,a1,);
};
__gshared glbfn_glGetTexBumpParameterfvATI glGetTexBumpParameterfvATI = function void (GLenum a0, GLfloat* a1) nothrow {
  glGetTexBumpParameterfvATI = cast(glbfn_glGetTexBumpParameterfvATI)glGetProcAddress(`glGetTexBumpParameterfvATI`);
  if (glGetTexBumpParameterfvATI is null) assert(0, `OpenGL function 'glGetTexBumpParameterfvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexBumpParameterfvATI'\n"); }
  glGetTexBumpParameterfvATI(a0,a1,);
};
__gshared glbfn_glGenFragmentShadersATI glGenFragmentShadersATI = function GLuint (GLuint a0) nothrow {
  glGenFragmentShadersATI = cast(glbfn_glGenFragmentShadersATI)glGetProcAddress(`glGenFragmentShadersATI`);
  if (glGenFragmentShadersATI is null) assert(0, `OpenGL function 'glGenFragmentShadersATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenFragmentShadersATI'\n"); }
  return glGenFragmentShadersATI(a0,);
};
__gshared glbfn_glBindFragmentShaderATI glBindFragmentShaderATI = function void (GLuint a0) nothrow {
  glBindFragmentShaderATI = cast(glbfn_glBindFragmentShaderATI)glGetProcAddress(`glBindFragmentShaderATI`);
  if (glBindFragmentShaderATI is null) assert(0, `OpenGL function 'glBindFragmentShaderATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindFragmentShaderATI'\n"); }
  glBindFragmentShaderATI(a0,);
};
__gshared glbfn_glDeleteFragmentShaderATI glDeleteFragmentShaderATI = function void (GLuint a0) nothrow {
  glDeleteFragmentShaderATI = cast(glbfn_glDeleteFragmentShaderATI)glGetProcAddress(`glDeleteFragmentShaderATI`);
  if (glDeleteFragmentShaderATI is null) assert(0, `OpenGL function 'glDeleteFragmentShaderATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteFragmentShaderATI'\n"); }
  glDeleteFragmentShaderATI(a0,);
};
__gshared glbfn_glBeginFragmentShaderATI glBeginFragmentShaderATI = function void () nothrow {
  glBeginFragmentShaderATI = cast(glbfn_glBeginFragmentShaderATI)glGetProcAddress(`glBeginFragmentShaderATI`);
  if (glBeginFragmentShaderATI is null) assert(0, `OpenGL function 'glBeginFragmentShaderATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginFragmentShaderATI'\n"); }
  glBeginFragmentShaderATI();
};
__gshared glbfn_glEndFragmentShaderATI glEndFragmentShaderATI = function void () nothrow {
  glEndFragmentShaderATI = cast(glbfn_glEndFragmentShaderATI)glGetProcAddress(`glEndFragmentShaderATI`);
  if (glEndFragmentShaderATI is null) assert(0, `OpenGL function 'glEndFragmentShaderATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndFragmentShaderATI'\n"); }
  glEndFragmentShaderATI();
};
__gshared glbfn_glPassTexCoordATI glPassTexCoordATI = function void (GLuint a0, GLuint a1, GLenum a2) nothrow {
  glPassTexCoordATI = cast(glbfn_glPassTexCoordATI)glGetProcAddress(`glPassTexCoordATI`);
  if (glPassTexCoordATI is null) assert(0, `OpenGL function 'glPassTexCoordATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPassTexCoordATI'\n"); }
  glPassTexCoordATI(a0,a1,a2,);
};
__gshared glbfn_glSampleMapATI glSampleMapATI = function void (GLuint a0, GLuint a1, GLenum a2) nothrow {
  glSampleMapATI = cast(glbfn_glSampleMapATI)glGetProcAddress(`glSampleMapATI`);
  if (glSampleMapATI is null) assert(0, `OpenGL function 'glSampleMapATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleMapATI'\n"); }
  glSampleMapATI(a0,a1,a2,);
};
__gshared glbfn_glColorFragmentOp1ATI glColorFragmentOp1ATI = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5, GLuint a6) nothrow {
  glColorFragmentOp1ATI = cast(glbfn_glColorFragmentOp1ATI)glGetProcAddress(`glColorFragmentOp1ATI`);
  if (glColorFragmentOp1ATI is null) assert(0, `OpenGL function 'glColorFragmentOp1ATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorFragmentOp1ATI'\n"); }
  glColorFragmentOp1ATI(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glColorFragmentOp2ATI glColorFragmentOp2ATI = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5, GLuint a6, GLuint a7, GLuint a8, GLuint a9) nothrow {
  glColorFragmentOp2ATI = cast(glbfn_glColorFragmentOp2ATI)glGetProcAddress(`glColorFragmentOp2ATI`);
  if (glColorFragmentOp2ATI is null) assert(0, `OpenGL function 'glColorFragmentOp2ATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorFragmentOp2ATI'\n"); }
  glColorFragmentOp2ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glColorFragmentOp3ATI glColorFragmentOp3ATI = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5, GLuint a6, GLuint a7, GLuint a8, GLuint a9, GLuint a10, GLuint a11, GLuint a12) nothrow {
  glColorFragmentOp3ATI = cast(glbfn_glColorFragmentOp3ATI)glGetProcAddress(`glColorFragmentOp3ATI`);
  if (glColorFragmentOp3ATI is null) assert(0, `OpenGL function 'glColorFragmentOp3ATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorFragmentOp3ATI'\n"); }
  glColorFragmentOp3ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
__gshared glbfn_glAlphaFragmentOp1ATI glAlphaFragmentOp1ATI = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5) nothrow {
  glAlphaFragmentOp1ATI = cast(glbfn_glAlphaFragmentOp1ATI)glGetProcAddress(`glAlphaFragmentOp1ATI`);
  if (glAlphaFragmentOp1ATI is null) assert(0, `OpenGL function 'glAlphaFragmentOp1ATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAlphaFragmentOp1ATI'\n"); }
  glAlphaFragmentOp1ATI(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glAlphaFragmentOp2ATI glAlphaFragmentOp2ATI = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5, GLuint a6, GLuint a7, GLuint a8) nothrow {
  glAlphaFragmentOp2ATI = cast(glbfn_glAlphaFragmentOp2ATI)glGetProcAddress(`glAlphaFragmentOp2ATI`);
  if (glAlphaFragmentOp2ATI is null) assert(0, `OpenGL function 'glAlphaFragmentOp2ATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAlphaFragmentOp2ATI'\n"); }
  glAlphaFragmentOp2ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glAlphaFragmentOp3ATI glAlphaFragmentOp3ATI = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5, GLuint a6, GLuint a7, GLuint a8, GLuint a9, GLuint a10, GLuint a11) nothrow {
  glAlphaFragmentOp3ATI = cast(glbfn_glAlphaFragmentOp3ATI)glGetProcAddress(`glAlphaFragmentOp3ATI`);
  if (glAlphaFragmentOp3ATI is null) assert(0, `OpenGL function 'glAlphaFragmentOp3ATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAlphaFragmentOp3ATI'\n"); }
  glAlphaFragmentOp3ATI(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glSetFragmentShaderConstantATI glSetFragmentShaderConstantATI = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glSetFragmentShaderConstantATI = cast(glbfn_glSetFragmentShaderConstantATI)glGetProcAddress(`glSetFragmentShaderConstantATI`);
  if (glSetFragmentShaderConstantATI is null) assert(0, `OpenGL function 'glSetFragmentShaderConstantATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSetFragmentShaderConstantATI'\n"); }
  glSetFragmentShaderConstantATI(a0,a1,);
};
__gshared glbfn_glMapObjectBufferATI glMapObjectBufferATI = function void* (GLuint a0) nothrow {
  glMapObjectBufferATI = cast(glbfn_glMapObjectBufferATI)glGetProcAddress(`glMapObjectBufferATI`);
  if (glMapObjectBufferATI is null) assert(0, `OpenGL function 'glMapObjectBufferATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapObjectBufferATI'\n"); }
  return glMapObjectBufferATI(a0,);
};
__gshared glbfn_glUnmapObjectBufferATI glUnmapObjectBufferATI = function void (GLuint a0) nothrow {
  glUnmapObjectBufferATI = cast(glbfn_glUnmapObjectBufferATI)glGetProcAddress(`glUnmapObjectBufferATI`);
  if (glUnmapObjectBufferATI is null) assert(0, `OpenGL function 'glUnmapObjectBufferATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUnmapObjectBufferATI'\n"); }
  glUnmapObjectBufferATI(a0,);
};
__gshared glbfn_glPNTrianglesiATI glPNTrianglesiATI = function void (GLenum a0, GLint a1) nothrow {
  glPNTrianglesiATI = cast(glbfn_glPNTrianglesiATI)glGetProcAddress(`glPNTrianglesiATI`);
  if (glPNTrianglesiATI is null) assert(0, `OpenGL function 'glPNTrianglesiATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPNTrianglesiATI'\n"); }
  glPNTrianglesiATI(a0,a1,);
};
__gshared glbfn_glPNTrianglesfATI glPNTrianglesfATI = function void (GLenum a0, GLfloat a1) nothrow {
  glPNTrianglesfATI = cast(glbfn_glPNTrianglesfATI)glGetProcAddress(`glPNTrianglesfATI`);
  if (glPNTrianglesfATI is null) assert(0, `OpenGL function 'glPNTrianglesfATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPNTrianglesfATI'\n"); }
  glPNTrianglesfATI(a0,a1,);
};
__gshared glbfn_glStencilOpSeparateATI glStencilOpSeparateATI = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3) nothrow {
  glStencilOpSeparateATI = cast(glbfn_glStencilOpSeparateATI)glGetProcAddress(`glStencilOpSeparateATI`);
  if (glStencilOpSeparateATI is null) assert(0, `OpenGL function 'glStencilOpSeparateATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilOpSeparateATI'\n"); }
  glStencilOpSeparateATI(a0,a1,a2,a3,);
};
__gshared glbfn_glStencilFuncSeparateATI glStencilFuncSeparateATI = function void (GLenum a0, GLenum a1, GLint a2, GLuint a3) nothrow {
  glStencilFuncSeparateATI = cast(glbfn_glStencilFuncSeparateATI)glGetProcAddress(`glStencilFuncSeparateATI`);
  if (glStencilFuncSeparateATI is null) assert(0, `OpenGL function 'glStencilFuncSeparateATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilFuncSeparateATI'\n"); }
  glStencilFuncSeparateATI(a0,a1,a2,a3,);
};
__gshared glbfn_glNewObjectBufferATI glNewObjectBufferATI = function GLuint (GLsizei a0, const(void)* a1, GLenum a2) nothrow {
  glNewObjectBufferATI = cast(glbfn_glNewObjectBufferATI)glGetProcAddress(`glNewObjectBufferATI`);
  if (glNewObjectBufferATI is null) assert(0, `OpenGL function 'glNewObjectBufferATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNewObjectBufferATI'\n"); }
  return glNewObjectBufferATI(a0,a1,a2,);
};
__gshared glbfn_glIsObjectBufferATI glIsObjectBufferATI = function GLboolean (GLuint a0) nothrow {
  glIsObjectBufferATI = cast(glbfn_glIsObjectBufferATI)glGetProcAddress(`glIsObjectBufferATI`);
  if (glIsObjectBufferATI is null) assert(0, `OpenGL function 'glIsObjectBufferATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsObjectBufferATI'\n"); }
  return glIsObjectBufferATI(a0,);
};
__gshared glbfn_glUpdateObjectBufferATI glUpdateObjectBufferATI = function void (GLuint a0, GLuint a1, GLsizei a2, const(void)* a3, GLenum a4) nothrow {
  glUpdateObjectBufferATI = cast(glbfn_glUpdateObjectBufferATI)glGetProcAddress(`glUpdateObjectBufferATI`);
  if (glUpdateObjectBufferATI is null) assert(0, `OpenGL function 'glUpdateObjectBufferATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUpdateObjectBufferATI'\n"); }
  glUpdateObjectBufferATI(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetObjectBufferfvATI glGetObjectBufferfvATI = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetObjectBufferfvATI = cast(glbfn_glGetObjectBufferfvATI)glGetProcAddress(`glGetObjectBufferfvATI`);
  if (glGetObjectBufferfvATI is null) assert(0, `OpenGL function 'glGetObjectBufferfvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectBufferfvATI'\n"); }
  glGetObjectBufferfvATI(a0,a1,a2,);
};
__gshared glbfn_glGetObjectBufferivATI glGetObjectBufferivATI = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetObjectBufferivATI = cast(glbfn_glGetObjectBufferivATI)glGetProcAddress(`glGetObjectBufferivATI`);
  if (glGetObjectBufferivATI is null) assert(0, `OpenGL function 'glGetObjectBufferivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectBufferivATI'\n"); }
  glGetObjectBufferivATI(a0,a1,a2,);
};
__gshared glbfn_glFreeObjectBufferATI glFreeObjectBufferATI = function void (GLuint a0) nothrow {
  glFreeObjectBufferATI = cast(glbfn_glFreeObjectBufferATI)glGetProcAddress(`glFreeObjectBufferATI`);
  if (glFreeObjectBufferATI is null) assert(0, `OpenGL function 'glFreeObjectBufferATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFreeObjectBufferATI'\n"); }
  glFreeObjectBufferATI(a0,);
};
__gshared glbfn_glArrayObjectATI glArrayObjectATI = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLuint a4, GLuint a5) nothrow {
  glArrayObjectATI = cast(glbfn_glArrayObjectATI)glGetProcAddress(`glArrayObjectATI`);
  if (glArrayObjectATI is null) assert(0, `OpenGL function 'glArrayObjectATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glArrayObjectATI'\n"); }
  glArrayObjectATI(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetArrayObjectfvATI glGetArrayObjectfvATI = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetArrayObjectfvATI = cast(glbfn_glGetArrayObjectfvATI)glGetProcAddress(`glGetArrayObjectfvATI`);
  if (glGetArrayObjectfvATI is null) assert(0, `OpenGL function 'glGetArrayObjectfvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetArrayObjectfvATI'\n"); }
  glGetArrayObjectfvATI(a0,a1,a2,);
};
__gshared glbfn_glGetArrayObjectivATI glGetArrayObjectivATI = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetArrayObjectivATI = cast(glbfn_glGetArrayObjectivATI)glGetProcAddress(`glGetArrayObjectivATI`);
  if (glGetArrayObjectivATI is null) assert(0, `OpenGL function 'glGetArrayObjectivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetArrayObjectivATI'\n"); }
  glGetArrayObjectivATI(a0,a1,a2,);
};
__gshared glbfn_glVariantArrayObjectATI glVariantArrayObjectATI = function void (GLuint a0, GLenum a1, GLsizei a2, GLuint a3, GLuint a4) nothrow {
  glVariantArrayObjectATI = cast(glbfn_glVariantArrayObjectATI)glGetProcAddress(`glVariantArrayObjectATI`);
  if (glVariantArrayObjectATI is null) assert(0, `OpenGL function 'glVariantArrayObjectATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantArrayObjectATI'\n"); }
  glVariantArrayObjectATI(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetVariantArrayObjectfvATI = cast(glbfn_glGetVariantArrayObjectfvATI)glGetProcAddress(`glGetVariantArrayObjectfvATI`);
  if (glGetVariantArrayObjectfvATI is null) assert(0, `OpenGL function 'glGetVariantArrayObjectfvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVariantArrayObjectfvATI'\n"); }
  glGetVariantArrayObjectfvATI(a0,a1,a2,);
};
__gshared glbfn_glGetVariantArrayObjectivATI glGetVariantArrayObjectivATI = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVariantArrayObjectivATI = cast(glbfn_glGetVariantArrayObjectivATI)glGetProcAddress(`glGetVariantArrayObjectivATI`);
  if (glGetVariantArrayObjectivATI is null) assert(0, `OpenGL function 'glGetVariantArrayObjectivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVariantArrayObjectivATI'\n"); }
  glGetVariantArrayObjectivATI(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribArrayObjectATI glVertexAttribArrayObjectATI = function void (GLuint a0, GLint a1, GLenum a2, GLboolean a3, GLsizei a4, GLuint a5, GLuint a6) nothrow {
  glVertexAttribArrayObjectATI = cast(glbfn_glVertexAttribArrayObjectATI)glGetProcAddress(`glVertexAttribArrayObjectATI`);
  if (glVertexAttribArrayObjectATI is null) assert(0, `OpenGL function 'glVertexAttribArrayObjectATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribArrayObjectATI'\n"); }
  glVertexAttribArrayObjectATI(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetVertexAttribArrayObjectfvATI = cast(glbfn_glGetVertexAttribArrayObjectfvATI)glGetProcAddress(`glGetVertexAttribArrayObjectfvATI`);
  if (glGetVertexAttribArrayObjectfvATI is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectfvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribArrayObjectfvATI'\n"); }
  glGetVertexAttribArrayObjectfvATI(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexAttribArrayObjectivATI = cast(glbfn_glGetVertexAttribArrayObjectivATI)glGetProcAddress(`glGetVertexAttribArrayObjectivATI`);
  if (glGetVertexAttribArrayObjectivATI is null) assert(0, `OpenGL function 'glGetVertexAttribArrayObjectivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribArrayObjectivATI'\n"); }
  glGetVertexAttribArrayObjectivATI(a0,a1,a2,);
};
__gshared glbfn_glVertexStream1sATI glVertexStream1sATI = function void (GLenum a0, GLshort a1) nothrow {
  glVertexStream1sATI = cast(glbfn_glVertexStream1sATI)glGetProcAddress(`glVertexStream1sATI`);
  if (glVertexStream1sATI is null) assert(0, `OpenGL function 'glVertexStream1sATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1sATI'\n"); }
  glVertexStream1sATI(a0,a1,);
};
__gshared glbfn_glVertexStream1svATI glVertexStream1svATI = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glVertexStream1svATI = cast(glbfn_glVertexStream1svATI)glGetProcAddress(`glVertexStream1svATI`);
  if (glVertexStream1svATI is null) assert(0, `OpenGL function 'glVertexStream1svATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1svATI'\n"); }
  glVertexStream1svATI(a0,a1,);
};
__gshared glbfn_glVertexStream1iATI glVertexStream1iATI = function void (GLenum a0, GLint a1) nothrow {
  glVertexStream1iATI = cast(glbfn_glVertexStream1iATI)glGetProcAddress(`glVertexStream1iATI`);
  if (glVertexStream1iATI is null) assert(0, `OpenGL function 'glVertexStream1iATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1iATI'\n"); }
  glVertexStream1iATI(a0,a1,);
};
__gshared glbfn_glVertexStream1ivATI glVertexStream1ivATI = function void (GLenum a0, const(GLint)* a1) nothrow {
  glVertexStream1ivATI = cast(glbfn_glVertexStream1ivATI)glGetProcAddress(`glVertexStream1ivATI`);
  if (glVertexStream1ivATI is null) assert(0, `OpenGL function 'glVertexStream1ivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1ivATI'\n"); }
  glVertexStream1ivATI(a0,a1,);
};
__gshared glbfn_glVertexStream1fATI glVertexStream1fATI = function void (GLenum a0, GLfloat a1) nothrow {
  glVertexStream1fATI = cast(glbfn_glVertexStream1fATI)glGetProcAddress(`glVertexStream1fATI`);
  if (glVertexStream1fATI is null) assert(0, `OpenGL function 'glVertexStream1fATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1fATI'\n"); }
  glVertexStream1fATI(a0,a1,);
};
__gshared glbfn_glVertexStream1fvATI glVertexStream1fvATI = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glVertexStream1fvATI = cast(glbfn_glVertexStream1fvATI)glGetProcAddress(`glVertexStream1fvATI`);
  if (glVertexStream1fvATI is null) assert(0, `OpenGL function 'glVertexStream1fvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1fvATI'\n"); }
  glVertexStream1fvATI(a0,a1,);
};
__gshared glbfn_glVertexStream1dATI glVertexStream1dATI = function void (GLenum a0, GLdouble a1) nothrow {
  glVertexStream1dATI = cast(glbfn_glVertexStream1dATI)glGetProcAddress(`glVertexStream1dATI`);
  if (glVertexStream1dATI is null) assert(0, `OpenGL function 'glVertexStream1dATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1dATI'\n"); }
  glVertexStream1dATI(a0,a1,);
};
__gshared glbfn_glVertexStream1dvATI glVertexStream1dvATI = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glVertexStream1dvATI = cast(glbfn_glVertexStream1dvATI)glGetProcAddress(`glVertexStream1dvATI`);
  if (glVertexStream1dvATI is null) assert(0, `OpenGL function 'glVertexStream1dvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream1dvATI'\n"); }
  glVertexStream1dvATI(a0,a1,);
};
__gshared glbfn_glVertexStream2sATI glVertexStream2sATI = function void (GLenum a0, GLshort a1, GLshort a2) nothrow {
  glVertexStream2sATI = cast(glbfn_glVertexStream2sATI)glGetProcAddress(`glVertexStream2sATI`);
  if (glVertexStream2sATI is null) assert(0, `OpenGL function 'glVertexStream2sATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2sATI'\n"); }
  glVertexStream2sATI(a0,a1,a2,);
};
__gshared glbfn_glVertexStream2svATI glVertexStream2svATI = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glVertexStream2svATI = cast(glbfn_glVertexStream2svATI)glGetProcAddress(`glVertexStream2svATI`);
  if (glVertexStream2svATI is null) assert(0, `OpenGL function 'glVertexStream2svATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2svATI'\n"); }
  glVertexStream2svATI(a0,a1,);
};
__gshared glbfn_glVertexStream2iATI glVertexStream2iATI = function void (GLenum a0, GLint a1, GLint a2) nothrow {
  glVertexStream2iATI = cast(glbfn_glVertexStream2iATI)glGetProcAddress(`glVertexStream2iATI`);
  if (glVertexStream2iATI is null) assert(0, `OpenGL function 'glVertexStream2iATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2iATI'\n"); }
  glVertexStream2iATI(a0,a1,a2,);
};
__gshared glbfn_glVertexStream2ivATI glVertexStream2ivATI = function void (GLenum a0, const(GLint)* a1) nothrow {
  glVertexStream2ivATI = cast(glbfn_glVertexStream2ivATI)glGetProcAddress(`glVertexStream2ivATI`);
  if (glVertexStream2ivATI is null) assert(0, `OpenGL function 'glVertexStream2ivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2ivATI'\n"); }
  glVertexStream2ivATI(a0,a1,);
};
__gshared glbfn_glVertexStream2fATI glVertexStream2fATI = function void (GLenum a0, GLfloat a1, GLfloat a2) nothrow {
  glVertexStream2fATI = cast(glbfn_glVertexStream2fATI)glGetProcAddress(`glVertexStream2fATI`);
  if (glVertexStream2fATI is null) assert(0, `OpenGL function 'glVertexStream2fATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2fATI'\n"); }
  glVertexStream2fATI(a0,a1,a2,);
};
__gshared glbfn_glVertexStream2fvATI glVertexStream2fvATI = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glVertexStream2fvATI = cast(glbfn_glVertexStream2fvATI)glGetProcAddress(`glVertexStream2fvATI`);
  if (glVertexStream2fvATI is null) assert(0, `OpenGL function 'glVertexStream2fvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2fvATI'\n"); }
  glVertexStream2fvATI(a0,a1,);
};
__gshared glbfn_glVertexStream2dATI glVertexStream2dATI = function void (GLenum a0, GLdouble a1, GLdouble a2) nothrow {
  glVertexStream2dATI = cast(glbfn_glVertexStream2dATI)glGetProcAddress(`glVertexStream2dATI`);
  if (glVertexStream2dATI is null) assert(0, `OpenGL function 'glVertexStream2dATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2dATI'\n"); }
  glVertexStream2dATI(a0,a1,a2,);
};
__gshared glbfn_glVertexStream2dvATI glVertexStream2dvATI = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glVertexStream2dvATI = cast(glbfn_glVertexStream2dvATI)glGetProcAddress(`glVertexStream2dvATI`);
  if (glVertexStream2dvATI is null) assert(0, `OpenGL function 'glVertexStream2dvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream2dvATI'\n"); }
  glVertexStream2dvATI(a0,a1,);
};
__gshared glbfn_glVertexStream3sATI glVertexStream3sATI = function void (GLenum a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glVertexStream3sATI = cast(glbfn_glVertexStream3sATI)glGetProcAddress(`glVertexStream3sATI`);
  if (glVertexStream3sATI is null) assert(0, `OpenGL function 'glVertexStream3sATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3sATI'\n"); }
  glVertexStream3sATI(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexStream3svATI glVertexStream3svATI = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glVertexStream3svATI = cast(glbfn_glVertexStream3svATI)glGetProcAddress(`glVertexStream3svATI`);
  if (glVertexStream3svATI is null) assert(0, `OpenGL function 'glVertexStream3svATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3svATI'\n"); }
  glVertexStream3svATI(a0,a1,);
};
__gshared glbfn_glVertexStream3iATI glVertexStream3iATI = function void (GLenum a0, GLint a1, GLint a2, GLint a3) nothrow {
  glVertexStream3iATI = cast(glbfn_glVertexStream3iATI)glGetProcAddress(`glVertexStream3iATI`);
  if (glVertexStream3iATI is null) assert(0, `OpenGL function 'glVertexStream3iATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3iATI'\n"); }
  glVertexStream3iATI(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexStream3ivATI glVertexStream3ivATI = function void (GLenum a0, const(GLint)* a1) nothrow {
  glVertexStream3ivATI = cast(glbfn_glVertexStream3ivATI)glGetProcAddress(`glVertexStream3ivATI`);
  if (glVertexStream3ivATI is null) assert(0, `OpenGL function 'glVertexStream3ivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3ivATI'\n"); }
  glVertexStream3ivATI(a0,a1,);
};
__gshared glbfn_glVertexStream3fATI glVertexStream3fATI = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glVertexStream3fATI = cast(glbfn_glVertexStream3fATI)glGetProcAddress(`glVertexStream3fATI`);
  if (glVertexStream3fATI is null) assert(0, `OpenGL function 'glVertexStream3fATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3fATI'\n"); }
  glVertexStream3fATI(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexStream3fvATI glVertexStream3fvATI = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glVertexStream3fvATI = cast(glbfn_glVertexStream3fvATI)glGetProcAddress(`glVertexStream3fvATI`);
  if (glVertexStream3fvATI is null) assert(0, `OpenGL function 'glVertexStream3fvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3fvATI'\n"); }
  glVertexStream3fvATI(a0,a1,);
};
__gshared glbfn_glVertexStream3dATI glVertexStream3dATI = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glVertexStream3dATI = cast(glbfn_glVertexStream3dATI)glGetProcAddress(`glVertexStream3dATI`);
  if (glVertexStream3dATI is null) assert(0, `OpenGL function 'glVertexStream3dATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3dATI'\n"); }
  glVertexStream3dATI(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexStream3dvATI glVertexStream3dvATI = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glVertexStream3dvATI = cast(glbfn_glVertexStream3dvATI)glGetProcAddress(`glVertexStream3dvATI`);
  if (glVertexStream3dvATI is null) assert(0, `OpenGL function 'glVertexStream3dvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream3dvATI'\n"); }
  glVertexStream3dvATI(a0,a1,);
};
__gshared glbfn_glVertexStream4sATI glVertexStream4sATI = function void (GLenum a0, GLshort a1, GLshort a2, GLshort a3, GLshort a4) nothrow {
  glVertexStream4sATI = cast(glbfn_glVertexStream4sATI)glGetProcAddress(`glVertexStream4sATI`);
  if (glVertexStream4sATI is null) assert(0, `OpenGL function 'glVertexStream4sATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4sATI'\n"); }
  glVertexStream4sATI(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexStream4svATI glVertexStream4svATI = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glVertexStream4svATI = cast(glbfn_glVertexStream4svATI)glGetProcAddress(`glVertexStream4svATI`);
  if (glVertexStream4svATI is null) assert(0, `OpenGL function 'glVertexStream4svATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4svATI'\n"); }
  glVertexStream4svATI(a0,a1,);
};
__gshared glbfn_glVertexStream4iATI glVertexStream4iATI = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glVertexStream4iATI = cast(glbfn_glVertexStream4iATI)glGetProcAddress(`glVertexStream4iATI`);
  if (glVertexStream4iATI is null) assert(0, `OpenGL function 'glVertexStream4iATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4iATI'\n"); }
  glVertexStream4iATI(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexStream4ivATI glVertexStream4ivATI = function void (GLenum a0, const(GLint)* a1) nothrow {
  glVertexStream4ivATI = cast(glbfn_glVertexStream4ivATI)glGetProcAddress(`glVertexStream4ivATI`);
  if (glVertexStream4ivATI is null) assert(0, `OpenGL function 'glVertexStream4ivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4ivATI'\n"); }
  glVertexStream4ivATI(a0,a1,);
};
__gshared glbfn_glVertexStream4fATI glVertexStream4fATI = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glVertexStream4fATI = cast(glbfn_glVertexStream4fATI)glGetProcAddress(`glVertexStream4fATI`);
  if (glVertexStream4fATI is null) assert(0, `OpenGL function 'glVertexStream4fATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4fATI'\n"); }
  glVertexStream4fATI(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexStream4fvATI glVertexStream4fvATI = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glVertexStream4fvATI = cast(glbfn_glVertexStream4fvATI)glGetProcAddress(`glVertexStream4fvATI`);
  if (glVertexStream4fvATI is null) assert(0, `OpenGL function 'glVertexStream4fvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4fvATI'\n"); }
  glVertexStream4fvATI(a0,a1,);
};
__gshared glbfn_glVertexStream4dATI glVertexStream4dATI = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glVertexStream4dATI = cast(glbfn_glVertexStream4dATI)glGetProcAddress(`glVertexStream4dATI`);
  if (glVertexStream4dATI is null) assert(0, `OpenGL function 'glVertexStream4dATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4dATI'\n"); }
  glVertexStream4dATI(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexStream4dvATI glVertexStream4dvATI = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glVertexStream4dvATI = cast(glbfn_glVertexStream4dvATI)glGetProcAddress(`glVertexStream4dvATI`);
  if (glVertexStream4dvATI is null) assert(0, `OpenGL function 'glVertexStream4dvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexStream4dvATI'\n"); }
  glVertexStream4dvATI(a0,a1,);
};
__gshared glbfn_glNormalStream3bATI glNormalStream3bATI = function void (GLenum a0, GLbyte a1, GLbyte a2, GLbyte a3) nothrow {
  glNormalStream3bATI = cast(glbfn_glNormalStream3bATI)glGetProcAddress(`glNormalStream3bATI`);
  if (glNormalStream3bATI is null) assert(0, `OpenGL function 'glNormalStream3bATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3bATI'\n"); }
  glNormalStream3bATI(a0,a1,a2,a3,);
};
__gshared glbfn_glNormalStream3bvATI glNormalStream3bvATI = function void (GLenum a0, const(GLbyte)* a1) nothrow {
  glNormalStream3bvATI = cast(glbfn_glNormalStream3bvATI)glGetProcAddress(`glNormalStream3bvATI`);
  if (glNormalStream3bvATI is null) assert(0, `OpenGL function 'glNormalStream3bvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3bvATI'\n"); }
  glNormalStream3bvATI(a0,a1,);
};
__gshared glbfn_glNormalStream3sATI glNormalStream3sATI = function void (GLenum a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glNormalStream3sATI = cast(glbfn_glNormalStream3sATI)glGetProcAddress(`glNormalStream3sATI`);
  if (glNormalStream3sATI is null) assert(0, `OpenGL function 'glNormalStream3sATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3sATI'\n"); }
  glNormalStream3sATI(a0,a1,a2,a3,);
};
__gshared glbfn_glNormalStream3svATI glNormalStream3svATI = function void (GLenum a0, const(GLshort)* a1) nothrow {
  glNormalStream3svATI = cast(glbfn_glNormalStream3svATI)glGetProcAddress(`glNormalStream3svATI`);
  if (glNormalStream3svATI is null) assert(0, `OpenGL function 'glNormalStream3svATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3svATI'\n"); }
  glNormalStream3svATI(a0,a1,);
};
__gshared glbfn_glNormalStream3iATI glNormalStream3iATI = function void (GLenum a0, GLint a1, GLint a2, GLint a3) nothrow {
  glNormalStream3iATI = cast(glbfn_glNormalStream3iATI)glGetProcAddress(`glNormalStream3iATI`);
  if (glNormalStream3iATI is null) assert(0, `OpenGL function 'glNormalStream3iATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3iATI'\n"); }
  glNormalStream3iATI(a0,a1,a2,a3,);
};
__gshared glbfn_glNormalStream3ivATI glNormalStream3ivATI = function void (GLenum a0, const(GLint)* a1) nothrow {
  glNormalStream3ivATI = cast(glbfn_glNormalStream3ivATI)glGetProcAddress(`glNormalStream3ivATI`);
  if (glNormalStream3ivATI is null) assert(0, `OpenGL function 'glNormalStream3ivATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3ivATI'\n"); }
  glNormalStream3ivATI(a0,a1,);
};
__gshared glbfn_glNormalStream3fATI glNormalStream3fATI = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glNormalStream3fATI = cast(glbfn_glNormalStream3fATI)glGetProcAddress(`glNormalStream3fATI`);
  if (glNormalStream3fATI is null) assert(0, `OpenGL function 'glNormalStream3fATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3fATI'\n"); }
  glNormalStream3fATI(a0,a1,a2,a3,);
};
__gshared glbfn_glNormalStream3fvATI glNormalStream3fvATI = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glNormalStream3fvATI = cast(glbfn_glNormalStream3fvATI)glGetProcAddress(`glNormalStream3fvATI`);
  if (glNormalStream3fvATI is null) assert(0, `OpenGL function 'glNormalStream3fvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3fvATI'\n"); }
  glNormalStream3fvATI(a0,a1,);
};
__gshared glbfn_glNormalStream3dATI glNormalStream3dATI = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glNormalStream3dATI = cast(glbfn_glNormalStream3dATI)glGetProcAddress(`glNormalStream3dATI`);
  if (glNormalStream3dATI is null) assert(0, `OpenGL function 'glNormalStream3dATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3dATI'\n"); }
  glNormalStream3dATI(a0,a1,a2,a3,);
};
__gshared glbfn_glNormalStream3dvATI glNormalStream3dvATI = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glNormalStream3dvATI = cast(glbfn_glNormalStream3dvATI)glGetProcAddress(`glNormalStream3dvATI`);
  if (glNormalStream3dvATI is null) assert(0, `OpenGL function 'glNormalStream3dvATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalStream3dvATI'\n"); }
  glNormalStream3dvATI(a0,a1,);
};
__gshared glbfn_glClientActiveVertexStreamATI glClientActiveVertexStreamATI = function void (GLenum a0) nothrow {
  glClientActiveVertexStreamATI = cast(glbfn_glClientActiveVertexStreamATI)glGetProcAddress(`glClientActiveVertexStreamATI`);
  if (glClientActiveVertexStreamATI is null) assert(0, `OpenGL function 'glClientActiveVertexStreamATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClientActiveVertexStreamATI'\n"); }
  glClientActiveVertexStreamATI(a0,);
};
__gshared glbfn_glVertexBlendEnviATI glVertexBlendEnviATI = function void (GLenum a0, GLint a1) nothrow {
  glVertexBlendEnviATI = cast(glbfn_glVertexBlendEnviATI)glGetProcAddress(`glVertexBlendEnviATI`);
  if (glVertexBlendEnviATI is null) assert(0, `OpenGL function 'glVertexBlendEnviATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexBlendEnviATI'\n"); }
  glVertexBlendEnviATI(a0,a1,);
};
__gshared glbfn_glVertexBlendEnvfATI glVertexBlendEnvfATI = function void (GLenum a0, GLfloat a1) nothrow {
  glVertexBlendEnvfATI = cast(glbfn_glVertexBlendEnvfATI)glGetProcAddress(`glVertexBlendEnvfATI`);
  if (glVertexBlendEnvfATI is null) assert(0, `OpenGL function 'glVertexBlendEnvfATI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexBlendEnvfATI'\n"); }
  glVertexBlendEnvfATI(a0,a1,);
};
__gshared glbfn_glUniformBufferEXT glUniformBufferEXT = function void (GLuint a0, GLint a1, GLuint a2) nothrow {
  glUniformBufferEXT = cast(glbfn_glUniformBufferEXT)glGetProcAddress(`glUniformBufferEXT`);
  if (glUniformBufferEXT is null) assert(0, `OpenGL function 'glUniformBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformBufferEXT'\n"); }
  glUniformBufferEXT(a0,a1,a2,);
};
__gshared glbfn_glGetUniformBufferSizeEXT glGetUniformBufferSizeEXT = function GLint (GLuint a0, GLint a1) nothrow {
  glGetUniformBufferSizeEXT = cast(glbfn_glGetUniformBufferSizeEXT)glGetProcAddress(`glGetUniformBufferSizeEXT`);
  if (glGetUniformBufferSizeEXT is null) assert(0, `OpenGL function 'glGetUniformBufferSizeEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformBufferSizeEXT'\n"); }
  return glGetUniformBufferSizeEXT(a0,a1,);
};
__gshared glbfn_glGetUniformOffsetEXT glGetUniformOffsetEXT = function GLintptr (GLuint a0, GLint a1) nothrow {
  glGetUniformOffsetEXT = cast(glbfn_glGetUniformOffsetEXT)glGetProcAddress(`glGetUniformOffsetEXT`);
  if (glGetUniformOffsetEXT is null) assert(0, `OpenGL function 'glGetUniformOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformOffsetEXT'\n"); }
  return glGetUniformOffsetEXT(a0,a1,);
};
__gshared glbfn_glBlendColorEXT glBlendColorEXT = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glBlendColorEXT = cast(glbfn_glBlendColorEXT)glGetProcAddress(`glBlendColorEXT`);
  if (glBlendColorEXT is null) assert(0, `OpenGL function 'glBlendColorEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendColorEXT'\n"); }
  glBlendColorEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glBlendEquationSeparateEXT glBlendEquationSeparateEXT = function void (GLenum a0, GLenum a1) nothrow {
  glBlendEquationSeparateEXT = cast(glbfn_glBlendEquationSeparateEXT)glGetProcAddress(`glBlendEquationSeparateEXT`);
  if (glBlendEquationSeparateEXT is null) assert(0, `OpenGL function 'glBlendEquationSeparateEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationSeparateEXT'\n"); }
  glBlendEquationSeparateEXT(a0,a1,);
};
__gshared glbfn_glBlendFuncSeparateEXT glBlendFuncSeparateEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3) nothrow {
  glBlendFuncSeparateEXT = cast(glbfn_glBlendFuncSeparateEXT)glGetProcAddress(`glBlendFuncSeparateEXT`);
  if (glBlendFuncSeparateEXT is null) assert(0, `OpenGL function 'glBlendFuncSeparateEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFuncSeparateEXT'\n"); }
  glBlendFuncSeparateEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glBlendEquationEXT glBlendEquationEXT = function void (GLenum a0) nothrow {
  glBlendEquationEXT = cast(glbfn_glBlendEquationEXT)glGetProcAddress(`glBlendEquationEXT`);
  if (glBlendEquationEXT is null) assert(0, `OpenGL function 'glBlendEquationEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendEquationEXT'\n"); }
  glBlendEquationEXT(a0,);
};
__gshared glbfn_glColorSubTableEXT glColorSubTableEXT = function void (GLenum a0, GLsizei a1, GLsizei a2, GLenum a3, GLenum a4, const(void)* a5) nothrow {
  glColorSubTableEXT = cast(glbfn_glColorSubTableEXT)glGetProcAddress(`glColorSubTableEXT`);
  if (glColorSubTableEXT is null) assert(0, `OpenGL function 'glColorSubTableEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorSubTableEXT'\n"); }
  glColorSubTableEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glCopyColorSubTableEXT glCopyColorSubTableEXT = function void (GLenum a0, GLsizei a1, GLint a2, GLint a3, GLsizei a4) nothrow {
  glCopyColorSubTableEXT = cast(glbfn_glCopyColorSubTableEXT)glGetProcAddress(`glCopyColorSubTableEXT`);
  if (glCopyColorSubTableEXT is null) assert(0, `OpenGL function 'glCopyColorSubTableEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyColorSubTableEXT'\n"); }
  glCopyColorSubTableEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glLockArraysEXT glLockArraysEXT = function void (GLint a0, GLsizei a1) nothrow {
  glLockArraysEXT = cast(glbfn_glLockArraysEXT)glGetProcAddress(`glLockArraysEXT`);
  if (glLockArraysEXT is null) assert(0, `OpenGL function 'glLockArraysEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLockArraysEXT'\n"); }
  glLockArraysEXT(a0,a1,);
};
__gshared glbfn_glUnlockArraysEXT glUnlockArraysEXT = function void () nothrow {
  glUnlockArraysEXT = cast(glbfn_glUnlockArraysEXT)glGetProcAddress(`glUnlockArraysEXT`);
  if (glUnlockArraysEXT is null) assert(0, `OpenGL function 'glUnlockArraysEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUnlockArraysEXT'\n"); }
  glUnlockArraysEXT();
};
__gshared glbfn_glConvolutionFilter1DEXT glConvolutionFilter1DEXT = function void (GLenum a0, GLenum a1, GLsizei a2, GLenum a3, GLenum a4, const(void)* a5) nothrow {
  glConvolutionFilter1DEXT = cast(glbfn_glConvolutionFilter1DEXT)glGetProcAddress(`glConvolutionFilter1DEXT`);
  if (glConvolutionFilter1DEXT is null) assert(0, `OpenGL function 'glConvolutionFilter1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionFilter1DEXT'\n"); }
  glConvolutionFilter1DEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glConvolutionFilter2DEXT glConvolutionFilter2DEXT = function void (GLenum a0, GLenum a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glConvolutionFilter2DEXT = cast(glbfn_glConvolutionFilter2DEXT)glGetProcAddress(`glConvolutionFilter2DEXT`);
  if (glConvolutionFilter2DEXT is null) assert(0, `OpenGL function 'glConvolutionFilter2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionFilter2DEXT'\n"); }
  glConvolutionFilter2DEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glConvolutionParameterfEXT glConvolutionParameterfEXT = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glConvolutionParameterfEXT = cast(glbfn_glConvolutionParameterfEXT)glGetProcAddress(`glConvolutionParameterfEXT`);
  if (glConvolutionParameterfEXT is null) assert(0, `OpenGL function 'glConvolutionParameterfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameterfEXT'\n"); }
  glConvolutionParameterfEXT(a0,a1,a2,);
};
__gshared glbfn_glConvolutionParameterfvEXT glConvolutionParameterfvEXT = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glConvolutionParameterfvEXT = cast(glbfn_glConvolutionParameterfvEXT)glGetProcAddress(`glConvolutionParameterfvEXT`);
  if (glConvolutionParameterfvEXT is null) assert(0, `OpenGL function 'glConvolutionParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameterfvEXT'\n"); }
  glConvolutionParameterfvEXT(a0,a1,a2,);
};
__gshared glbfn_glConvolutionParameteriEXT glConvolutionParameteriEXT = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glConvolutionParameteriEXT = cast(glbfn_glConvolutionParameteriEXT)glGetProcAddress(`glConvolutionParameteriEXT`);
  if (glConvolutionParameteriEXT is null) assert(0, `OpenGL function 'glConvolutionParameteriEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameteriEXT'\n"); }
  glConvolutionParameteriEXT(a0,a1,a2,);
};
__gshared glbfn_glConvolutionParameterivEXT glConvolutionParameterivEXT = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glConvolutionParameterivEXT = cast(glbfn_glConvolutionParameterivEXT)glGetProcAddress(`glConvolutionParameterivEXT`);
  if (glConvolutionParameterivEXT is null) assert(0, `OpenGL function 'glConvolutionParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameterivEXT'\n"); }
  glConvolutionParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glCopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4) nothrow {
  glCopyConvolutionFilter1DEXT = cast(glbfn_glCopyConvolutionFilter1DEXT)glGetProcAddress(`glCopyConvolutionFilter1DEXT`);
  if (glCopyConvolutionFilter1DEXT is null) assert(0, `OpenGL function 'glCopyConvolutionFilter1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyConvolutionFilter1DEXT'\n"); }
  glCopyConvolutionFilter1DEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glCopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5) nothrow {
  glCopyConvolutionFilter2DEXT = cast(glbfn_glCopyConvolutionFilter2DEXT)glGetProcAddress(`glCopyConvolutionFilter2DEXT`);
  if (glCopyConvolutionFilter2DEXT is null) assert(0, `OpenGL function 'glCopyConvolutionFilter2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyConvolutionFilter2DEXT'\n"); }
  glCopyConvolutionFilter2DEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetConvolutionFilterEXT glGetConvolutionFilterEXT = function void (GLenum a0, GLenum a1, GLenum a2, void* a3) nothrow {
  glGetConvolutionFilterEXT = cast(glbfn_glGetConvolutionFilterEXT)glGetProcAddress(`glGetConvolutionFilterEXT`);
  if (glGetConvolutionFilterEXT is null) assert(0, `OpenGL function 'glGetConvolutionFilterEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetConvolutionFilterEXT'\n"); }
  glGetConvolutionFilterEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetConvolutionParameterfvEXT = cast(glbfn_glGetConvolutionParameterfvEXT)glGetProcAddress(`glGetConvolutionParameterfvEXT`);
  if (glGetConvolutionParameterfvEXT is null) assert(0, `OpenGL function 'glGetConvolutionParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetConvolutionParameterfvEXT'\n"); }
  glGetConvolutionParameterfvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetConvolutionParameterivEXT glGetConvolutionParameterivEXT = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetConvolutionParameterivEXT = cast(glbfn_glGetConvolutionParameterivEXT)glGetProcAddress(`glGetConvolutionParameterivEXT`);
  if (glGetConvolutionParameterivEXT is null) assert(0, `OpenGL function 'glGetConvolutionParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetConvolutionParameterivEXT'\n"); }
  glGetConvolutionParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetSeparableFilterEXT glGetSeparableFilterEXT = function void (GLenum a0, GLenum a1, GLenum a2, void* a3, void* a4, void* a5) nothrow {
  glGetSeparableFilterEXT = cast(glbfn_glGetSeparableFilterEXT)glGetProcAddress(`glGetSeparableFilterEXT`);
  if (glGetSeparableFilterEXT is null) assert(0, `OpenGL function 'glGetSeparableFilterEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSeparableFilterEXT'\n"); }
  glGetSeparableFilterEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glSeparableFilter2DEXT glSeparableFilter2DEXT = function void (GLenum a0, GLenum a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, const(void)* a6, const(void)* a7) nothrow {
  glSeparableFilter2DEXT = cast(glbfn_glSeparableFilter2DEXT)glGetProcAddress(`glSeparableFilter2DEXT`);
  if (glSeparableFilter2DEXT is null) assert(0, `OpenGL function 'glSeparableFilter2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSeparableFilter2DEXT'\n"); }
  glSeparableFilter2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTangent3bEXT glTangent3bEXT = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glTangent3bEXT = cast(glbfn_glTangent3bEXT)glGetProcAddress(`glTangent3bEXT`);
  if (glTangent3bEXT is null) assert(0, `OpenGL function 'glTangent3bEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3bEXT'\n"); }
  glTangent3bEXT(a0,a1,a2,);
};
__gshared glbfn_glTangent3bvEXT glTangent3bvEXT = function void (const(GLbyte)* a0) nothrow {
  glTangent3bvEXT = cast(glbfn_glTangent3bvEXT)glGetProcAddress(`glTangent3bvEXT`);
  if (glTangent3bvEXT is null) assert(0, `OpenGL function 'glTangent3bvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3bvEXT'\n"); }
  glTangent3bvEXT(a0,);
};
__gshared glbfn_glTangent3dEXT glTangent3dEXT = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glTangent3dEXT = cast(glbfn_glTangent3dEXT)glGetProcAddress(`glTangent3dEXT`);
  if (glTangent3dEXT is null) assert(0, `OpenGL function 'glTangent3dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3dEXT'\n"); }
  glTangent3dEXT(a0,a1,a2,);
};
__gshared glbfn_glTangent3dvEXT glTangent3dvEXT = function void (const(GLdouble)* a0) nothrow {
  glTangent3dvEXT = cast(glbfn_glTangent3dvEXT)glGetProcAddress(`glTangent3dvEXT`);
  if (glTangent3dvEXT is null) assert(0, `OpenGL function 'glTangent3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3dvEXT'\n"); }
  glTangent3dvEXT(a0,);
};
__gshared glbfn_glTangent3fEXT glTangent3fEXT = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glTangent3fEXT = cast(glbfn_glTangent3fEXT)glGetProcAddress(`glTangent3fEXT`);
  if (glTangent3fEXT is null) assert(0, `OpenGL function 'glTangent3fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3fEXT'\n"); }
  glTangent3fEXT(a0,a1,a2,);
};
__gshared glbfn_glTangent3fvEXT glTangent3fvEXT = function void (const(GLfloat)* a0) nothrow {
  glTangent3fvEXT = cast(glbfn_glTangent3fvEXT)glGetProcAddress(`glTangent3fvEXT`);
  if (glTangent3fvEXT is null) assert(0, `OpenGL function 'glTangent3fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3fvEXT'\n"); }
  glTangent3fvEXT(a0,);
};
__gshared glbfn_glTangent3iEXT glTangent3iEXT = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glTangent3iEXT = cast(glbfn_glTangent3iEXT)glGetProcAddress(`glTangent3iEXT`);
  if (glTangent3iEXT is null) assert(0, `OpenGL function 'glTangent3iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3iEXT'\n"); }
  glTangent3iEXT(a0,a1,a2,);
};
__gshared glbfn_glTangent3ivEXT glTangent3ivEXT = function void (const(GLint)* a0) nothrow {
  glTangent3ivEXT = cast(glbfn_glTangent3ivEXT)glGetProcAddress(`glTangent3ivEXT`);
  if (glTangent3ivEXT is null) assert(0, `OpenGL function 'glTangent3ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3ivEXT'\n"); }
  glTangent3ivEXT(a0,);
};
__gshared glbfn_glTangent3sEXT glTangent3sEXT = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glTangent3sEXT = cast(glbfn_glTangent3sEXT)glGetProcAddress(`glTangent3sEXT`);
  if (glTangent3sEXT is null) assert(0, `OpenGL function 'glTangent3sEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3sEXT'\n"); }
  glTangent3sEXT(a0,a1,a2,);
};
__gshared glbfn_glTangent3svEXT glTangent3svEXT = function void (const(GLshort)* a0) nothrow {
  glTangent3svEXT = cast(glbfn_glTangent3svEXT)glGetProcAddress(`glTangent3svEXT`);
  if (glTangent3svEXT is null) assert(0, `OpenGL function 'glTangent3svEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangent3svEXT'\n"); }
  glTangent3svEXT(a0,);
};
__gshared glbfn_glBinormal3bEXT glBinormal3bEXT = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glBinormal3bEXT = cast(glbfn_glBinormal3bEXT)glGetProcAddress(`glBinormal3bEXT`);
  if (glBinormal3bEXT is null) assert(0, `OpenGL function 'glBinormal3bEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3bEXT'\n"); }
  glBinormal3bEXT(a0,a1,a2,);
};
__gshared glbfn_glBinormal3bvEXT glBinormal3bvEXT = function void (const(GLbyte)* a0) nothrow {
  glBinormal3bvEXT = cast(glbfn_glBinormal3bvEXT)glGetProcAddress(`glBinormal3bvEXT`);
  if (glBinormal3bvEXT is null) assert(0, `OpenGL function 'glBinormal3bvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3bvEXT'\n"); }
  glBinormal3bvEXT(a0,);
};
__gshared glbfn_glBinormal3dEXT glBinormal3dEXT = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glBinormal3dEXT = cast(glbfn_glBinormal3dEXT)glGetProcAddress(`glBinormal3dEXT`);
  if (glBinormal3dEXT is null) assert(0, `OpenGL function 'glBinormal3dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3dEXT'\n"); }
  glBinormal3dEXT(a0,a1,a2,);
};
__gshared glbfn_glBinormal3dvEXT glBinormal3dvEXT = function void (const(GLdouble)* a0) nothrow {
  glBinormal3dvEXT = cast(glbfn_glBinormal3dvEXT)glGetProcAddress(`glBinormal3dvEXT`);
  if (glBinormal3dvEXT is null) assert(0, `OpenGL function 'glBinormal3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3dvEXT'\n"); }
  glBinormal3dvEXT(a0,);
};
__gshared glbfn_glBinormal3fEXT glBinormal3fEXT = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glBinormal3fEXT = cast(glbfn_glBinormal3fEXT)glGetProcAddress(`glBinormal3fEXT`);
  if (glBinormal3fEXT is null) assert(0, `OpenGL function 'glBinormal3fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3fEXT'\n"); }
  glBinormal3fEXT(a0,a1,a2,);
};
__gshared glbfn_glBinormal3fvEXT glBinormal3fvEXT = function void (const(GLfloat)* a0) nothrow {
  glBinormal3fvEXT = cast(glbfn_glBinormal3fvEXT)glGetProcAddress(`glBinormal3fvEXT`);
  if (glBinormal3fvEXT is null) assert(0, `OpenGL function 'glBinormal3fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3fvEXT'\n"); }
  glBinormal3fvEXT(a0,);
};
__gshared glbfn_glBinormal3iEXT glBinormal3iEXT = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glBinormal3iEXT = cast(glbfn_glBinormal3iEXT)glGetProcAddress(`glBinormal3iEXT`);
  if (glBinormal3iEXT is null) assert(0, `OpenGL function 'glBinormal3iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3iEXT'\n"); }
  glBinormal3iEXT(a0,a1,a2,);
};
__gshared glbfn_glBinormal3ivEXT glBinormal3ivEXT = function void (const(GLint)* a0) nothrow {
  glBinormal3ivEXT = cast(glbfn_glBinormal3ivEXT)glGetProcAddress(`glBinormal3ivEXT`);
  if (glBinormal3ivEXT is null) assert(0, `OpenGL function 'glBinormal3ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3ivEXT'\n"); }
  glBinormal3ivEXT(a0,);
};
__gshared glbfn_glBinormal3sEXT glBinormal3sEXT = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glBinormal3sEXT = cast(glbfn_glBinormal3sEXT)glGetProcAddress(`glBinormal3sEXT`);
  if (glBinormal3sEXT is null) assert(0, `OpenGL function 'glBinormal3sEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3sEXT'\n"); }
  glBinormal3sEXT(a0,a1,a2,);
};
__gshared glbfn_glBinormal3svEXT glBinormal3svEXT = function void (const(GLshort)* a0) nothrow {
  glBinormal3svEXT = cast(glbfn_glBinormal3svEXT)glGetProcAddress(`glBinormal3svEXT`);
  if (glBinormal3svEXT is null) assert(0, `OpenGL function 'glBinormal3svEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormal3svEXT'\n"); }
  glBinormal3svEXT(a0,);
};
__gshared glbfn_glTangentPointerEXT glTangentPointerEXT = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glTangentPointerEXT = cast(glbfn_glTangentPointerEXT)glGetProcAddress(`glTangentPointerEXT`);
  if (glTangentPointerEXT is null) assert(0, `OpenGL function 'glTangentPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTangentPointerEXT'\n"); }
  glTangentPointerEXT(a0,a1,a2,);
};
__gshared glbfn_glBinormalPointerEXT glBinormalPointerEXT = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glBinormalPointerEXT = cast(glbfn_glBinormalPointerEXT)glGetProcAddress(`glBinormalPointerEXT`);
  if (glBinormalPointerEXT is null) assert(0, `OpenGL function 'glBinormalPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBinormalPointerEXT'\n"); }
  glBinormalPointerEXT(a0,a1,a2,);
};
__gshared glbfn_glCopyTexImage1DEXT glCopyTexImage1DEXT = function void (GLenum a0, GLint a1, GLenum a2, GLint a3, GLint a4, GLsizei a5, GLint a6) nothrow {
  glCopyTexImage1DEXT = cast(glbfn_glCopyTexImage1DEXT)glGetProcAddress(`glCopyTexImage1DEXT`);
  if (glCopyTexImage1DEXT is null) assert(0, `OpenGL function 'glCopyTexImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexImage1DEXT'\n"); }
  glCopyTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCopyTexImage2DEXT glCopyTexImage2DEXT = function void (GLenum a0, GLint a1, GLenum a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLint a7) nothrow {
  glCopyTexImage2DEXT = cast(glbfn_glCopyTexImage2DEXT)glGetProcAddress(`glCopyTexImage2DEXT`);
  if (glCopyTexImage2DEXT is null) assert(0, `OpenGL function 'glCopyTexImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexImage2DEXT'\n"); }
  glCopyTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCopyTexSubImage1DEXT glCopyTexSubImage1DEXT = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5) nothrow {
  glCopyTexSubImage1DEXT = cast(glbfn_glCopyTexSubImage1DEXT)glGetProcAddress(`glCopyTexSubImage1DEXT`);
  if (glCopyTexSubImage1DEXT is null) assert(0, `OpenGL function 'glCopyTexSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexSubImage1DEXT'\n"); }
  glCopyTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glCopyTexSubImage2DEXT glCopyTexSubImage2DEXT = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7) nothrow {
  glCopyTexSubImage2DEXT = cast(glbfn_glCopyTexSubImage2DEXT)glGetProcAddress(`glCopyTexSubImage2DEXT`);
  if (glCopyTexSubImage2DEXT is null) assert(0, `OpenGL function 'glCopyTexSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexSubImage2DEXT'\n"); }
  glCopyTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCopyTexSubImage3DEXT glCopyTexSubImage3DEXT = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLsizei a7, GLsizei a8) nothrow {
  glCopyTexSubImage3DEXT = cast(glbfn_glCopyTexSubImage3DEXT)glGetProcAddress(`glCopyTexSubImage3DEXT`);
  if (glCopyTexSubImage3DEXT is null) assert(0, `OpenGL function 'glCopyTexSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTexSubImage3DEXT'\n"); }
  glCopyTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCullParameterdvEXT glCullParameterdvEXT = function void (GLenum a0, GLdouble* a1) nothrow {
  glCullParameterdvEXT = cast(glbfn_glCullParameterdvEXT)glGetProcAddress(`glCullParameterdvEXT`);
  if (glCullParameterdvEXT is null) assert(0, `OpenGL function 'glCullParameterdvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCullParameterdvEXT'\n"); }
  glCullParameterdvEXT(a0,a1,);
};
__gshared glbfn_glCullParameterfvEXT glCullParameterfvEXT = function void (GLenum a0, GLfloat* a1) nothrow {
  glCullParameterfvEXT = cast(glbfn_glCullParameterfvEXT)glGetProcAddress(`glCullParameterfvEXT`);
  if (glCullParameterfvEXT is null) assert(0, `OpenGL function 'glCullParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCullParameterfvEXT'\n"); }
  glCullParameterfvEXT(a0,a1,);
};
__gshared glbfn_glLabelObjectEXT glLabelObjectEXT = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLchar)* a3) nothrow {
  glLabelObjectEXT = cast(glbfn_glLabelObjectEXT)glGetProcAddress(`glLabelObjectEXT`);
  if (glLabelObjectEXT is null) assert(0, `OpenGL function 'glLabelObjectEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLabelObjectEXT'\n"); }
  glLabelObjectEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetObjectLabelEXT glGetObjectLabelEXT = function void (GLenum a0, GLuint a1, GLsizei a2, GLsizei* a3, GLchar* a4) nothrow {
  glGetObjectLabelEXT = cast(glbfn_glGetObjectLabelEXT)glGetProcAddress(`glGetObjectLabelEXT`);
  if (glGetObjectLabelEXT is null) assert(0, `OpenGL function 'glGetObjectLabelEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectLabelEXT'\n"); }
  glGetObjectLabelEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glInsertEventMarkerEXT glInsertEventMarkerEXT = function void (GLsizei a0, const(GLchar)* a1) nothrow {
  glInsertEventMarkerEXT = cast(glbfn_glInsertEventMarkerEXT)glGetProcAddress(`glInsertEventMarkerEXT`);
  if (glInsertEventMarkerEXT is null) assert(0, `OpenGL function 'glInsertEventMarkerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInsertEventMarkerEXT'\n"); }
  glInsertEventMarkerEXT(a0,a1,);
};
__gshared glbfn_glPushGroupMarkerEXT glPushGroupMarkerEXT = function void (GLsizei a0, const(GLchar)* a1) nothrow {
  glPushGroupMarkerEXT = cast(glbfn_glPushGroupMarkerEXT)glGetProcAddress(`glPushGroupMarkerEXT`);
  if (glPushGroupMarkerEXT is null) assert(0, `OpenGL function 'glPushGroupMarkerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushGroupMarkerEXT'\n"); }
  glPushGroupMarkerEXT(a0,a1,);
};
__gshared glbfn_glPopGroupMarkerEXT glPopGroupMarkerEXT = function void () nothrow {
  glPopGroupMarkerEXT = cast(glbfn_glPopGroupMarkerEXT)glGetProcAddress(`glPopGroupMarkerEXT`);
  if (glPopGroupMarkerEXT is null) assert(0, `OpenGL function 'glPopGroupMarkerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPopGroupMarkerEXT'\n"); }
  glPopGroupMarkerEXT();
};
__gshared glbfn_glDepthBoundsEXT glDepthBoundsEXT = function void (GLclampd a0, GLclampd a1) nothrow {
  glDepthBoundsEXT = cast(glbfn_glDepthBoundsEXT)glGetProcAddress(`glDepthBoundsEXT`);
  if (glDepthBoundsEXT is null) assert(0, `OpenGL function 'glDepthBoundsEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthBoundsEXT'\n"); }
  glDepthBoundsEXT(a0,a1,);
};
__gshared glbfn_glMatrixLoadfEXT glMatrixLoadfEXT = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixLoadfEXT = cast(glbfn_glMatrixLoadfEXT)glGetProcAddress(`glMatrixLoadfEXT`);
  if (glMatrixLoadfEXT is null) assert(0, `OpenGL function 'glMatrixLoadfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoadfEXT'\n"); }
  glMatrixLoadfEXT(a0,a1,);
};
__gshared glbfn_glMatrixLoaddEXT glMatrixLoaddEXT = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMatrixLoaddEXT = cast(glbfn_glMatrixLoaddEXT)glGetProcAddress(`glMatrixLoaddEXT`);
  if (glMatrixLoaddEXT is null) assert(0, `OpenGL function 'glMatrixLoaddEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoaddEXT'\n"); }
  glMatrixLoaddEXT(a0,a1,);
};
__gshared glbfn_glMatrixMultfEXT glMatrixMultfEXT = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixMultfEXT = cast(glbfn_glMatrixMultfEXT)glGetProcAddress(`glMatrixMultfEXT`);
  if (glMatrixMultfEXT is null) assert(0, `OpenGL function 'glMatrixMultfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMultfEXT'\n"); }
  glMatrixMultfEXT(a0,a1,);
};
__gshared glbfn_glMatrixMultdEXT glMatrixMultdEXT = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMatrixMultdEXT = cast(glbfn_glMatrixMultdEXT)glGetProcAddress(`glMatrixMultdEXT`);
  if (glMatrixMultdEXT is null) assert(0, `OpenGL function 'glMatrixMultdEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMultdEXT'\n"); }
  glMatrixMultdEXT(a0,a1,);
};
__gshared glbfn_glMatrixLoadIdentityEXT glMatrixLoadIdentityEXT = function void (GLenum a0) nothrow {
  glMatrixLoadIdentityEXT = cast(glbfn_glMatrixLoadIdentityEXT)glGetProcAddress(`glMatrixLoadIdentityEXT`);
  if (glMatrixLoadIdentityEXT is null) assert(0, `OpenGL function 'glMatrixLoadIdentityEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoadIdentityEXT'\n"); }
  glMatrixLoadIdentityEXT(a0,);
};
__gshared glbfn_glMatrixRotatefEXT glMatrixRotatefEXT = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glMatrixRotatefEXT = cast(glbfn_glMatrixRotatefEXT)glGetProcAddress(`glMatrixRotatefEXT`);
  if (glMatrixRotatefEXT is null) assert(0, `OpenGL function 'glMatrixRotatefEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixRotatefEXT'\n"); }
  glMatrixRotatefEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMatrixRotatedEXT glMatrixRotatedEXT = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glMatrixRotatedEXT = cast(glbfn_glMatrixRotatedEXT)glGetProcAddress(`glMatrixRotatedEXT`);
  if (glMatrixRotatedEXT is null) assert(0, `OpenGL function 'glMatrixRotatedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixRotatedEXT'\n"); }
  glMatrixRotatedEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMatrixScalefEXT glMatrixScalefEXT = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glMatrixScalefEXT = cast(glbfn_glMatrixScalefEXT)glGetProcAddress(`glMatrixScalefEXT`);
  if (glMatrixScalefEXT is null) assert(0, `OpenGL function 'glMatrixScalefEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixScalefEXT'\n"); }
  glMatrixScalefEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMatrixScaledEXT glMatrixScaledEXT = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glMatrixScaledEXT = cast(glbfn_glMatrixScaledEXT)glGetProcAddress(`glMatrixScaledEXT`);
  if (glMatrixScaledEXT is null) assert(0, `OpenGL function 'glMatrixScaledEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixScaledEXT'\n"); }
  glMatrixScaledEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMatrixTranslatefEXT glMatrixTranslatefEXT = function void (GLenum a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glMatrixTranslatefEXT = cast(glbfn_glMatrixTranslatefEXT)glGetProcAddress(`glMatrixTranslatefEXT`);
  if (glMatrixTranslatefEXT is null) assert(0, `OpenGL function 'glMatrixTranslatefEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixTranslatefEXT'\n"); }
  glMatrixTranslatefEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMatrixTranslatedEXT glMatrixTranslatedEXT = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glMatrixTranslatedEXT = cast(glbfn_glMatrixTranslatedEXT)glGetProcAddress(`glMatrixTranslatedEXT`);
  if (glMatrixTranslatedEXT is null) assert(0, `OpenGL function 'glMatrixTranslatedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixTranslatedEXT'\n"); }
  glMatrixTranslatedEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMatrixFrustumEXT glMatrixFrustumEXT = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5, GLdouble a6) nothrow {
  glMatrixFrustumEXT = cast(glbfn_glMatrixFrustumEXT)glGetProcAddress(`glMatrixFrustumEXT`);
  if (glMatrixFrustumEXT is null) assert(0, `OpenGL function 'glMatrixFrustumEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixFrustumEXT'\n"); }
  glMatrixFrustumEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMatrixOrthoEXT glMatrixOrthoEXT = function void (GLenum a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5, GLdouble a6) nothrow {
  glMatrixOrthoEXT = cast(glbfn_glMatrixOrthoEXT)glGetProcAddress(`glMatrixOrthoEXT`);
  if (glMatrixOrthoEXT is null) assert(0, `OpenGL function 'glMatrixOrthoEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixOrthoEXT'\n"); }
  glMatrixOrthoEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMatrixPopEXT glMatrixPopEXT = function void (GLenum a0) nothrow {
  glMatrixPopEXT = cast(glbfn_glMatrixPopEXT)glGetProcAddress(`glMatrixPopEXT`);
  if (glMatrixPopEXT is null) assert(0, `OpenGL function 'glMatrixPopEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixPopEXT'\n"); }
  glMatrixPopEXT(a0,);
};
__gshared glbfn_glMatrixPushEXT glMatrixPushEXT = function void (GLenum a0) nothrow {
  glMatrixPushEXT = cast(glbfn_glMatrixPushEXT)glGetProcAddress(`glMatrixPushEXT`);
  if (glMatrixPushEXT is null) assert(0, `OpenGL function 'glMatrixPushEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixPushEXT'\n"); }
  glMatrixPushEXT(a0,);
};
__gshared glbfn_glClientAttribDefaultEXT glClientAttribDefaultEXT = function void (GLbitfield a0) nothrow {
  glClientAttribDefaultEXT = cast(glbfn_glClientAttribDefaultEXT)glGetProcAddress(`glClientAttribDefaultEXT`);
  if (glClientAttribDefaultEXT is null) assert(0, `OpenGL function 'glClientAttribDefaultEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClientAttribDefaultEXT'\n"); }
  glClientAttribDefaultEXT(a0,);
};
__gshared glbfn_glPushClientAttribDefaultEXT glPushClientAttribDefaultEXT = function void (GLbitfield a0) nothrow {
  glPushClientAttribDefaultEXT = cast(glbfn_glPushClientAttribDefaultEXT)glGetProcAddress(`glPushClientAttribDefaultEXT`);
  if (glPushClientAttribDefaultEXT is null) assert(0, `OpenGL function 'glPushClientAttribDefaultEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushClientAttribDefaultEXT'\n"); }
  glPushClientAttribDefaultEXT(a0,);
};
__gshared glbfn_glTextureParameterfEXT glTextureParameterfEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLfloat a3) nothrow {
  glTextureParameterfEXT = cast(glbfn_glTextureParameterfEXT)glGetProcAddress(`glTextureParameterfEXT`);
  if (glTextureParameterfEXT is null) assert(0, `OpenGL function 'glTextureParameterfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterfEXT'\n"); }
  glTextureParameterfEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureParameterfvEXT glTextureParameterfvEXT = function void (GLuint a0, GLenum a1, GLenum a2, const(GLfloat)* a3) nothrow {
  glTextureParameterfvEXT = cast(glbfn_glTextureParameterfvEXT)glGetProcAddress(`glTextureParameterfvEXT`);
  if (glTextureParameterfvEXT is null) assert(0, `OpenGL function 'glTextureParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterfvEXT'\n"); }
  glTextureParameterfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureParameteriEXT glTextureParameteriEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLint a3) nothrow {
  glTextureParameteriEXT = cast(glbfn_glTextureParameteriEXT)glGetProcAddress(`glTextureParameteriEXT`);
  if (glTextureParameteriEXT is null) assert(0, `OpenGL function 'glTextureParameteriEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameteriEXT'\n"); }
  glTextureParameteriEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureParameterivEXT glTextureParameterivEXT = function void (GLuint a0, GLenum a1, GLenum a2, const(GLint)* a3) nothrow {
  glTextureParameterivEXT = cast(glbfn_glTextureParameterivEXT)glGetProcAddress(`glTextureParameterivEXT`);
  if (glTextureParameterivEXT is null) assert(0, `OpenGL function 'glTextureParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterivEXT'\n"); }
  glTextureParameterivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureImage1DEXT glTextureImage1DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLint a5, GLenum a6, GLenum a7, const(void)* a8) nothrow {
  glTextureImage1DEXT = cast(glbfn_glTextureImage1DEXT)glGetProcAddress(`glTextureImage1DEXT`);
  if (glTextureImage1DEXT is null) assert(0, `OpenGL function 'glTextureImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureImage1DEXT'\n"); }
  glTextureImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glTextureImage2DEXT glTextureImage2DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLint a6, GLenum a7, GLenum a8, const(void)* a9) nothrow {
  glTextureImage2DEXT = cast(glbfn_glTextureImage2DEXT)glGetProcAddress(`glTextureImage2DEXT`);
  if (glTextureImage2DEXT is null) assert(0, `OpenGL function 'glTextureImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureImage2DEXT'\n"); }
  glTextureImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glTextureSubImage1DEXT glTextureSubImage1DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLenum a5, GLenum a6, const(void)* a7) nothrow {
  glTextureSubImage1DEXT = cast(glbfn_glTextureSubImage1DEXT)glGetProcAddress(`glTextureSubImage1DEXT`);
  if (glTextureSubImage1DEXT is null) assert(0, `OpenGL function 'glTextureSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureSubImage1DEXT'\n"); }
  glTextureSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTextureSubImage2DEXT glTextureSubImage2DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLenum a7, GLenum a8, const(void)* a9) nothrow {
  glTextureSubImage2DEXT = cast(glbfn_glTextureSubImage2DEXT)glGetProcAddress(`glTextureSubImage2DEXT`);
  if (glTextureSubImage2DEXT is null) assert(0, `OpenGL function 'glTextureSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureSubImage2DEXT'\n"); }
  glTextureSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glCopyTextureImage1DEXT glCopyTextureImage1DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLint a4, GLint a5, GLsizei a6, GLint a7) nothrow {
  glCopyTextureImage1DEXT = cast(glbfn_glCopyTextureImage1DEXT)glGetProcAddress(`glCopyTextureImage1DEXT`);
  if (glCopyTextureImage1DEXT is null) assert(0, `OpenGL function 'glCopyTextureImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureImage1DEXT'\n"); }
  glCopyTextureImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCopyTextureImage2DEXT glCopyTextureImage2DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7, GLint a8) nothrow {
  glCopyTextureImage2DEXT = cast(glbfn_glCopyTextureImage2DEXT)glGetProcAddress(`glCopyTextureImage2DEXT`);
  if (glCopyTextureImage2DEXT is null) assert(0, `OpenGL function 'glCopyTextureImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureImage2DEXT'\n"); }
  glCopyTextureImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6) nothrow {
  glCopyTextureSubImage1DEXT = cast(glbfn_glCopyTextureSubImage1DEXT)glGetProcAddress(`glCopyTextureSubImage1DEXT`);
  if (glCopyTextureSubImage1DEXT is null) assert(0, `OpenGL function 'glCopyTextureSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureSubImage1DEXT'\n"); }
  glCopyTextureSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLsizei a7, GLsizei a8) nothrow {
  glCopyTextureSubImage2DEXT = cast(glbfn_glCopyTextureSubImage2DEXT)glGetProcAddress(`glCopyTextureSubImage2DEXT`);
  if (glCopyTextureSubImage2DEXT is null) assert(0, `OpenGL function 'glCopyTextureSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureSubImage2DEXT'\n"); }
  glCopyTextureSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glGetTextureImageEXT glGetTextureImageEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLenum a4, void* a5) nothrow {
  glGetTextureImageEXT = cast(glbfn_glGetTextureImageEXT)glGetProcAddress(`glGetTextureImageEXT`);
  if (glGetTextureImageEXT is null) assert(0, `OpenGL function 'glGetTextureImageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureImageEXT'\n"); }
  glGetTextureImageEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetTextureParameterfvEXT glGetTextureParameterfvEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLfloat* a3) nothrow {
  glGetTextureParameterfvEXT = cast(glbfn_glGetTextureParameterfvEXT)glGetProcAddress(`glGetTextureParameterfvEXT`);
  if (glGetTextureParameterfvEXT is null) assert(0, `OpenGL function 'glGetTextureParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameterfvEXT'\n"); }
  glGetTextureParameterfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTextureParameterivEXT glGetTextureParameterivEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetTextureParameterivEXT = cast(glbfn_glGetTextureParameterivEXT)glGetProcAddress(`glGetTextureParameterivEXT`);
  if (glGetTextureParameterivEXT is null) assert(0, `OpenGL function 'glGetTextureParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameterivEXT'\n"); }
  glGetTextureParameterivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLfloat* a4) nothrow {
  glGetTextureLevelParameterfvEXT = cast(glbfn_glGetTextureLevelParameterfvEXT)glGetProcAddress(`glGetTextureLevelParameterfvEXT`);
  if (glGetTextureLevelParameterfvEXT is null) assert(0, `OpenGL function 'glGetTextureLevelParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureLevelParameterfvEXT'\n"); }
  glGetTextureLevelParameterfvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLint* a4) nothrow {
  glGetTextureLevelParameterivEXT = cast(glbfn_glGetTextureLevelParameterivEXT)glGetProcAddress(`glGetTextureLevelParameterivEXT`);
  if (glGetTextureLevelParameterivEXT is null) assert(0, `OpenGL function 'glGetTextureLevelParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureLevelParameterivEXT'\n"); }
  glGetTextureLevelParameterivEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTextureImage3DEXT glTextureImage3DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLsizei a6, GLint a7, GLenum a8, GLenum a9, const(void)* a10) nothrow {
  glTextureImage3DEXT = cast(glbfn_glTextureImage3DEXT)glGetProcAddress(`glTextureImage3DEXT`);
  if (glTextureImage3DEXT is null) assert(0, `OpenGL function 'glTextureImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureImage3DEXT'\n"); }
  glTextureImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glTextureSubImage3DEXT glTextureSubImage3DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7, GLsizei a8, GLenum a9, GLenum a10, const(void)* a11) nothrow {
  glTextureSubImage3DEXT = cast(glbfn_glTextureSubImage3DEXT)glGetProcAddress(`glTextureSubImage3DEXT`);
  if (glTextureSubImage3DEXT is null) assert(0, `OpenGL function 'glTextureSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureSubImage3DEXT'\n"); }
  glTextureSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glCopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLint a7, GLsizei a8, GLsizei a9) nothrow {
  glCopyTextureSubImage3DEXT = cast(glbfn_glCopyTextureSubImage3DEXT)glGetProcAddress(`glCopyTextureSubImage3DEXT`);
  if (glCopyTextureSubImage3DEXT is null) assert(0, `OpenGL function 'glCopyTextureSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyTextureSubImage3DEXT'\n"); }
  glCopyTextureSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glBindMultiTextureEXT glBindMultiTextureEXT = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glBindMultiTextureEXT = cast(glbfn_glBindMultiTextureEXT)glGetProcAddress(`glBindMultiTextureEXT`);
  if (glBindMultiTextureEXT is null) assert(0, `OpenGL function 'glBindMultiTextureEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindMultiTextureEXT'\n"); }
  glBindMultiTextureEXT(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoordPointerEXT glMultiTexCoordPointerEXT = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, const(void)* a4) nothrow {
  glMultiTexCoordPointerEXT = cast(glbfn_glMultiTexCoordPointerEXT)glGetProcAddress(`glMultiTexCoordPointerEXT`);
  if (glMultiTexCoordPointerEXT is null) assert(0, `OpenGL function 'glMultiTexCoordPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoordPointerEXT'\n"); }
  glMultiTexCoordPointerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexEnvfEXT glMultiTexEnvfEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLfloat a3) nothrow {
  glMultiTexEnvfEXT = cast(glbfn_glMultiTexEnvfEXT)glGetProcAddress(`glMultiTexEnvfEXT`);
  if (glMultiTexEnvfEXT is null) assert(0, `OpenGL function 'glMultiTexEnvfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexEnvfEXT'\n"); }
  glMultiTexEnvfEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexEnvfvEXT glMultiTexEnvfvEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLfloat)* a3) nothrow {
  glMultiTexEnvfvEXT = cast(glbfn_glMultiTexEnvfvEXT)glGetProcAddress(`glMultiTexEnvfvEXT`);
  if (glMultiTexEnvfvEXT is null) assert(0, `OpenGL function 'glMultiTexEnvfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexEnvfvEXT'\n"); }
  glMultiTexEnvfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexEnviEXT glMultiTexEnviEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint a3) nothrow {
  glMultiTexEnviEXT = cast(glbfn_glMultiTexEnviEXT)glGetProcAddress(`glMultiTexEnviEXT`);
  if (glMultiTexEnviEXT is null) assert(0, `OpenGL function 'glMultiTexEnviEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexEnviEXT'\n"); }
  glMultiTexEnviEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexEnvivEXT glMultiTexEnvivEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLint)* a3) nothrow {
  glMultiTexEnvivEXT = cast(glbfn_glMultiTexEnvivEXT)glGetProcAddress(`glMultiTexEnvivEXT`);
  if (glMultiTexEnvivEXT is null) assert(0, `OpenGL function 'glMultiTexEnvivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexEnvivEXT'\n"); }
  glMultiTexEnvivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexGendEXT glMultiTexGendEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLdouble a3) nothrow {
  glMultiTexGendEXT = cast(glbfn_glMultiTexGendEXT)glGetProcAddress(`glMultiTexGendEXT`);
  if (glMultiTexGendEXT is null) assert(0, `OpenGL function 'glMultiTexGendEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexGendEXT'\n"); }
  glMultiTexGendEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexGendvEXT glMultiTexGendvEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLdouble)* a3) nothrow {
  glMultiTexGendvEXT = cast(glbfn_glMultiTexGendvEXT)glGetProcAddress(`glMultiTexGendvEXT`);
  if (glMultiTexGendvEXT is null) assert(0, `OpenGL function 'glMultiTexGendvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexGendvEXT'\n"); }
  glMultiTexGendvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexGenfEXT glMultiTexGenfEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLfloat a3) nothrow {
  glMultiTexGenfEXT = cast(glbfn_glMultiTexGenfEXT)glGetProcAddress(`glMultiTexGenfEXT`);
  if (glMultiTexGenfEXT is null) assert(0, `OpenGL function 'glMultiTexGenfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexGenfEXT'\n"); }
  glMultiTexGenfEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexGenfvEXT glMultiTexGenfvEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLfloat)* a3) nothrow {
  glMultiTexGenfvEXT = cast(glbfn_glMultiTexGenfvEXT)glGetProcAddress(`glMultiTexGenfvEXT`);
  if (glMultiTexGenfvEXT is null) assert(0, `OpenGL function 'glMultiTexGenfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexGenfvEXT'\n"); }
  glMultiTexGenfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexGeniEXT glMultiTexGeniEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint a3) nothrow {
  glMultiTexGeniEXT = cast(glbfn_glMultiTexGeniEXT)glGetProcAddress(`glMultiTexGeniEXT`);
  if (glMultiTexGeniEXT is null) assert(0, `OpenGL function 'glMultiTexGeniEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexGeniEXT'\n"); }
  glMultiTexGeniEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexGenivEXT glMultiTexGenivEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLint)* a3) nothrow {
  glMultiTexGenivEXT = cast(glbfn_glMultiTexGenivEXT)glGetProcAddress(`glMultiTexGenivEXT`);
  if (glMultiTexGenivEXT is null) assert(0, `OpenGL function 'glMultiTexGenivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexGenivEXT'\n"); }
  glMultiTexGenivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLfloat* a3) nothrow {
  glGetMultiTexEnvfvEXT = cast(glbfn_glGetMultiTexEnvfvEXT)glGetProcAddress(`glGetMultiTexEnvfvEXT`);
  if (glGetMultiTexEnvfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexEnvfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexEnvfvEXT'\n"); }
  glGetMultiTexEnvfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexEnvivEXT glGetMultiTexEnvivEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetMultiTexEnvivEXT = cast(glbfn_glGetMultiTexEnvivEXT)glGetProcAddress(`glGetMultiTexEnvivEXT`);
  if (glGetMultiTexEnvivEXT is null) assert(0, `OpenGL function 'glGetMultiTexEnvivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexEnvivEXT'\n"); }
  glGetMultiTexEnvivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexGendvEXT glGetMultiTexGendvEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLdouble* a3) nothrow {
  glGetMultiTexGendvEXT = cast(glbfn_glGetMultiTexGendvEXT)glGetProcAddress(`glGetMultiTexGendvEXT`);
  if (glGetMultiTexGendvEXT is null) assert(0, `OpenGL function 'glGetMultiTexGendvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexGendvEXT'\n"); }
  glGetMultiTexGendvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexGenfvEXT glGetMultiTexGenfvEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLfloat* a3) nothrow {
  glGetMultiTexGenfvEXT = cast(glbfn_glGetMultiTexGenfvEXT)glGetProcAddress(`glGetMultiTexGenfvEXT`);
  if (glGetMultiTexGenfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexGenfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexGenfvEXT'\n"); }
  glGetMultiTexGenfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexGenivEXT glGetMultiTexGenivEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetMultiTexGenivEXT = cast(glbfn_glGetMultiTexGenivEXT)glGetProcAddress(`glGetMultiTexGenivEXT`);
  if (glGetMultiTexGenivEXT is null) assert(0, `OpenGL function 'glGetMultiTexGenivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexGenivEXT'\n"); }
  glGetMultiTexGenivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexParameteriEXT glMultiTexParameteriEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint a3) nothrow {
  glMultiTexParameteriEXT = cast(glbfn_glMultiTexParameteriEXT)glGetProcAddress(`glMultiTexParameteriEXT`);
  if (glMultiTexParameteriEXT is null) assert(0, `OpenGL function 'glMultiTexParameteriEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexParameteriEXT'\n"); }
  glMultiTexParameteriEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexParameterivEXT glMultiTexParameterivEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLint)* a3) nothrow {
  glMultiTexParameterivEXT = cast(glbfn_glMultiTexParameterivEXT)glGetProcAddress(`glMultiTexParameterivEXT`);
  if (glMultiTexParameterivEXT is null) assert(0, `OpenGL function 'glMultiTexParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexParameterivEXT'\n"); }
  glMultiTexParameterivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexParameterfEXT glMultiTexParameterfEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLfloat a3) nothrow {
  glMultiTexParameterfEXT = cast(glbfn_glMultiTexParameterfEXT)glGetProcAddress(`glMultiTexParameterfEXT`);
  if (glMultiTexParameterfEXT is null) assert(0, `OpenGL function 'glMultiTexParameterfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexParameterfEXT'\n"); }
  glMultiTexParameterfEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexParameterfvEXT glMultiTexParameterfvEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLfloat)* a3) nothrow {
  glMultiTexParameterfvEXT = cast(glbfn_glMultiTexParameterfvEXT)glGetProcAddress(`glMultiTexParameterfvEXT`);
  if (glMultiTexParameterfvEXT is null) assert(0, `OpenGL function 'glMultiTexParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexParameterfvEXT'\n"); }
  glMultiTexParameterfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexImage1DEXT glMultiTexImage1DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLint a5, GLenum a6, GLenum a7, const(void)* a8) nothrow {
  glMultiTexImage1DEXT = cast(glbfn_glMultiTexImage1DEXT)glGetProcAddress(`glMultiTexImage1DEXT`);
  if (glMultiTexImage1DEXT is null) assert(0, `OpenGL function 'glMultiTexImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexImage1DEXT'\n"); }
  glMultiTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glMultiTexImage2DEXT glMultiTexImage2DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLint a6, GLenum a7, GLenum a8, const(void)* a9) nothrow {
  glMultiTexImage2DEXT = cast(glbfn_glMultiTexImage2DEXT)glGetProcAddress(`glMultiTexImage2DEXT`);
  if (glMultiTexImage2DEXT is null) assert(0, `OpenGL function 'glMultiTexImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexImage2DEXT'\n"); }
  glMultiTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glMultiTexSubImage1DEXT glMultiTexSubImage1DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLenum a5, GLenum a6, const(void)* a7) nothrow {
  glMultiTexSubImage1DEXT = cast(glbfn_glMultiTexSubImage1DEXT)glGetProcAddress(`glMultiTexSubImage1DEXT`);
  if (glMultiTexSubImage1DEXT is null) assert(0, `OpenGL function 'glMultiTexSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexSubImage1DEXT'\n"); }
  glMultiTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glMultiTexSubImage2DEXT glMultiTexSubImage2DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLenum a7, GLenum a8, const(void)* a9) nothrow {
  glMultiTexSubImage2DEXT = cast(glbfn_glMultiTexSubImage2DEXT)glGetProcAddress(`glMultiTexSubImage2DEXT`);
  if (glMultiTexSubImage2DEXT is null) assert(0, `OpenGL function 'glMultiTexSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexSubImage2DEXT'\n"); }
  glMultiTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glCopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLint a4, GLint a5, GLsizei a6, GLint a7) nothrow {
  glCopyMultiTexImage1DEXT = cast(glbfn_glCopyMultiTexImage1DEXT)glGetProcAddress(`glCopyMultiTexImage1DEXT`);
  if (glCopyMultiTexImage1DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyMultiTexImage1DEXT'\n"); }
  glCopyMultiTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7, GLint a8) nothrow {
  glCopyMultiTexImage2DEXT = cast(glbfn_glCopyMultiTexImage2DEXT)glGetProcAddress(`glCopyMultiTexImage2DEXT`);
  if (glCopyMultiTexImage2DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyMultiTexImage2DEXT'\n"); }
  glCopyMultiTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6) nothrow {
  glCopyMultiTexSubImage1DEXT = cast(glbfn_glCopyMultiTexSubImage1DEXT)glGetProcAddress(`glCopyMultiTexSubImage1DEXT`);
  if (glCopyMultiTexSubImage1DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyMultiTexSubImage1DEXT'\n"); }
  glCopyMultiTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLsizei a7, GLsizei a8) nothrow {
  glCopyMultiTexSubImage2DEXT = cast(glbfn_glCopyMultiTexSubImage2DEXT)glGetProcAddress(`glCopyMultiTexSubImage2DEXT`);
  if (glCopyMultiTexSubImage2DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyMultiTexSubImage2DEXT'\n"); }
  glCopyMultiTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glGetMultiTexImageEXT glGetMultiTexImageEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLenum a4, void* a5) nothrow {
  glGetMultiTexImageEXT = cast(glbfn_glGetMultiTexImageEXT)glGetProcAddress(`glGetMultiTexImageEXT`);
  if (glGetMultiTexImageEXT is null) assert(0, `OpenGL function 'glGetMultiTexImageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexImageEXT'\n"); }
  glGetMultiTexImageEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLfloat* a3) nothrow {
  glGetMultiTexParameterfvEXT = cast(glbfn_glGetMultiTexParameterfvEXT)glGetProcAddress(`glGetMultiTexParameterfvEXT`);
  if (glGetMultiTexParameterfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexParameterfvEXT'\n"); }
  glGetMultiTexParameterfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexParameterivEXT glGetMultiTexParameterivEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetMultiTexParameterivEXT = cast(glbfn_glGetMultiTexParameterivEXT)glGetProcAddress(`glGetMultiTexParameterivEXT`);
  if (glGetMultiTexParameterivEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexParameterivEXT'\n"); }
  glGetMultiTexParameterivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLfloat* a4) nothrow {
  glGetMultiTexLevelParameterfvEXT = cast(glbfn_glGetMultiTexLevelParameterfvEXT)glGetProcAddress(`glGetMultiTexLevelParameterfvEXT`);
  if (glGetMultiTexLevelParameterfvEXT is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexLevelParameterfvEXT'\n"); }
  glGetMultiTexLevelParameterfvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLint* a4) nothrow {
  glGetMultiTexLevelParameterivEXT = cast(glbfn_glGetMultiTexLevelParameterivEXT)glGetProcAddress(`glGetMultiTexLevelParameterivEXT`);
  if (glGetMultiTexLevelParameterivEXT is null) assert(0, `OpenGL function 'glGetMultiTexLevelParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexLevelParameterivEXT'\n"); }
  glGetMultiTexLevelParameterivEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexImage3DEXT glMultiTexImage3DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLsizei a6, GLint a7, GLenum a8, GLenum a9, const(void)* a10) nothrow {
  glMultiTexImage3DEXT = cast(glbfn_glMultiTexImage3DEXT)glGetProcAddress(`glMultiTexImage3DEXT`);
  if (glMultiTexImage3DEXT is null) assert(0, `OpenGL function 'glMultiTexImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexImage3DEXT'\n"); }
  glMultiTexImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glMultiTexSubImage3DEXT glMultiTexSubImage3DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7, GLsizei a8, GLenum a9, GLenum a10, const(void)* a11) nothrow {
  glMultiTexSubImage3DEXT = cast(glbfn_glMultiTexSubImage3DEXT)glGetProcAddress(`glMultiTexSubImage3DEXT`);
  if (glMultiTexSubImage3DEXT is null) assert(0, `OpenGL function 'glMultiTexSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexSubImage3DEXT'\n"); }
  glMultiTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glCopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLint a7, GLsizei a8, GLsizei a9) nothrow {
  glCopyMultiTexSubImage3DEXT = cast(glbfn_glCopyMultiTexSubImage3DEXT)glGetProcAddress(`glCopyMultiTexSubImage3DEXT`);
  if (glCopyMultiTexSubImage3DEXT is null) assert(0, `OpenGL function 'glCopyMultiTexSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyMultiTexSubImage3DEXT'\n"); }
  glCopyMultiTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glEnableClientStateIndexedEXT glEnableClientStateIndexedEXT = function void (GLenum a0, GLuint a1) nothrow {
  glEnableClientStateIndexedEXT = cast(glbfn_glEnableClientStateIndexedEXT)glGetProcAddress(`glEnableClientStateIndexedEXT`);
  if (glEnableClientStateIndexedEXT is null) assert(0, `OpenGL function 'glEnableClientStateIndexedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableClientStateIndexedEXT'\n"); }
  glEnableClientStateIndexedEXT(a0,a1,);
};
__gshared glbfn_glDisableClientStateIndexedEXT glDisableClientStateIndexedEXT = function void (GLenum a0, GLuint a1) nothrow {
  glDisableClientStateIndexedEXT = cast(glbfn_glDisableClientStateIndexedEXT)glGetProcAddress(`glDisableClientStateIndexedEXT`);
  if (glDisableClientStateIndexedEXT is null) assert(0, `OpenGL function 'glDisableClientStateIndexedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableClientStateIndexedEXT'\n"); }
  glDisableClientStateIndexedEXT(a0,a1,);
};
__gshared glbfn_glGetFloatIndexedvEXT glGetFloatIndexedvEXT = function void (GLenum a0, GLuint a1, GLfloat* a2) nothrow {
  glGetFloatIndexedvEXT = cast(glbfn_glGetFloatIndexedvEXT)glGetProcAddress(`glGetFloatIndexedvEXT`);
  if (glGetFloatIndexedvEXT is null) assert(0, `OpenGL function 'glGetFloatIndexedvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFloatIndexedvEXT'\n"); }
  glGetFloatIndexedvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetDoubleIndexedvEXT glGetDoubleIndexedvEXT = function void (GLenum a0, GLuint a1, GLdouble* a2) nothrow {
  glGetDoubleIndexedvEXT = cast(glbfn_glGetDoubleIndexedvEXT)glGetProcAddress(`glGetDoubleIndexedvEXT`);
  if (glGetDoubleIndexedvEXT is null) assert(0, `OpenGL function 'glGetDoubleIndexedvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDoubleIndexedvEXT'\n"); }
  glGetDoubleIndexedvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetPointerIndexedvEXT glGetPointerIndexedvEXT = function void (GLenum a0, GLuint a1, void** a2) nothrow {
  glGetPointerIndexedvEXT = cast(glbfn_glGetPointerIndexedvEXT)glGetProcAddress(`glGetPointerIndexedvEXT`);
  if (glGetPointerIndexedvEXT is null) assert(0, `OpenGL function 'glGetPointerIndexedvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPointerIndexedvEXT'\n"); }
  glGetPointerIndexedvEXT(a0,a1,a2,);
};
__gshared glbfn_glEnableIndexedEXT glEnableIndexedEXT = function void (GLenum a0, GLuint a1) nothrow {
  glEnableIndexedEXT = cast(glbfn_glEnableIndexedEXT)glGetProcAddress(`glEnableIndexedEXT`);
  if (glEnableIndexedEXT is null) assert(0, `OpenGL function 'glEnableIndexedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableIndexedEXT'\n"); }
  glEnableIndexedEXT(a0,a1,);
};
__gshared glbfn_glDisableIndexedEXT glDisableIndexedEXT = function void (GLenum a0, GLuint a1) nothrow {
  glDisableIndexedEXT = cast(glbfn_glDisableIndexedEXT)glGetProcAddress(`glDisableIndexedEXT`);
  if (glDisableIndexedEXT is null) assert(0, `OpenGL function 'glDisableIndexedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableIndexedEXT'\n"); }
  glDisableIndexedEXT(a0,a1,);
};
__gshared glbfn_glIsEnabledIndexedEXT glIsEnabledIndexedEXT = function GLboolean (GLenum a0, GLuint a1) nothrow {
  glIsEnabledIndexedEXT = cast(glbfn_glIsEnabledIndexedEXT)glGetProcAddress(`glIsEnabledIndexedEXT`);
  if (glIsEnabledIndexedEXT is null) assert(0, `OpenGL function 'glIsEnabledIndexedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsEnabledIndexedEXT'\n"); }
  return glIsEnabledIndexedEXT(a0,a1,);
};
__gshared glbfn_glGetIntegerIndexedvEXT glGetIntegerIndexedvEXT = function void (GLenum a0, GLuint a1, GLint* a2) nothrow {
  glGetIntegerIndexedvEXT = cast(glbfn_glGetIntegerIndexedvEXT)glGetProcAddress(`glGetIntegerIndexedvEXT`);
  if (glGetIntegerIndexedvEXT is null) assert(0, `OpenGL function 'glGetIntegerIndexedvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetIntegerIndexedvEXT'\n"); }
  glGetIntegerIndexedvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetBooleanIndexedvEXT glGetBooleanIndexedvEXT = function void (GLenum a0, GLuint a1, GLboolean* a2) nothrow {
  glGetBooleanIndexedvEXT = cast(glbfn_glGetBooleanIndexedvEXT)glGetProcAddress(`glGetBooleanIndexedvEXT`);
  if (glGetBooleanIndexedvEXT is null) assert(0, `OpenGL function 'glGetBooleanIndexedvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBooleanIndexedvEXT'\n"); }
  glGetBooleanIndexedvEXT(a0,a1,a2,);
};
__gshared glbfn_glCompressedTextureImage3DEXT glCompressedTextureImage3DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLsizei a4, GLsizei a5, GLsizei a6, GLint a7, GLsizei a8, const(void)* a9) nothrow {
  glCompressedTextureImage3DEXT = cast(glbfn_glCompressedTextureImage3DEXT)glGetProcAddress(`glCompressedTextureImage3DEXT`);
  if (glCompressedTextureImage3DEXT is null) assert(0, `OpenGL function 'glCompressedTextureImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureImage3DEXT'\n"); }
  glCompressedTextureImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glCompressedTextureImage2DEXT glCompressedTextureImage2DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLsizei a4, GLsizei a5, GLint a6, GLsizei a7, const(void)* a8) nothrow {
  glCompressedTextureImage2DEXT = cast(glbfn_glCompressedTextureImage2DEXT)glGetProcAddress(`glCompressedTextureImage2DEXT`);
  if (glCompressedTextureImage2DEXT is null) assert(0, `OpenGL function 'glCompressedTextureImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureImage2DEXT'\n"); }
  glCompressedTextureImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCompressedTextureImage1DEXT glCompressedTextureImage1DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLenum a3, GLsizei a4, GLint a5, GLsizei a6, const(void)* a7) nothrow {
  glCompressedTextureImage1DEXT = cast(glbfn_glCompressedTextureImage1DEXT)glGetProcAddress(`glCompressedTextureImage1DEXT`);
  if (glCompressedTextureImage1DEXT is null) assert(0, `OpenGL function 'glCompressedTextureImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureImage1DEXT'\n"); }
  glCompressedTextureImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7, GLsizei a8, GLenum a9, GLsizei a10, const(void)* a11) nothrow {
  glCompressedTextureSubImage3DEXT = cast(glbfn_glCompressedTextureSubImage3DEXT)glGetProcAddress(`glCompressedTextureSubImage3DEXT`);
  if (glCompressedTextureSubImage3DEXT is null) assert(0, `OpenGL function 'glCompressedTextureSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureSubImage3DEXT'\n"); }
  glCompressedTextureSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glCompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLenum a7, GLsizei a8, const(void)* a9) nothrow {
  glCompressedTextureSubImage2DEXT = cast(glbfn_glCompressedTextureSubImage2DEXT)glGetProcAddress(`glCompressedTextureSubImage2DEXT`);
  if (glCompressedTextureSubImage2DEXT is null) assert(0, `OpenGL function 'glCompressedTextureSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureSubImage2DEXT'\n"); }
  glCompressedTextureSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glCompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLenum a5, GLsizei a6, const(void)* a7) nothrow {
  glCompressedTextureSubImage1DEXT = cast(glbfn_glCompressedTextureSubImage1DEXT)glGetProcAddress(`glCompressedTextureSubImage1DEXT`);
  if (glCompressedTextureSubImage1DEXT is null) assert(0, `OpenGL function 'glCompressedTextureSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedTextureSubImage1DEXT'\n"); }
  glCompressedTextureSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetCompressedTextureImageEXT glGetCompressedTextureImageEXT = function void (GLuint a0, GLenum a1, GLint a2, void* a3) nothrow {
  glGetCompressedTextureImageEXT = cast(glbfn_glGetCompressedTextureImageEXT)glGetProcAddress(`glGetCompressedTextureImageEXT`);
  if (glGetCompressedTextureImageEXT is null) assert(0, `OpenGL function 'glGetCompressedTextureImageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCompressedTextureImageEXT'\n"); }
  glGetCompressedTextureImageEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glCompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLsizei a4, GLsizei a5, GLsizei a6, GLint a7, GLsizei a8, const(void)* a9) nothrow {
  glCompressedMultiTexImage3DEXT = cast(glbfn_glCompressedMultiTexImage3DEXT)glGetProcAddress(`glCompressedMultiTexImage3DEXT`);
  if (glCompressedMultiTexImage3DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedMultiTexImage3DEXT'\n"); }
  glCompressedMultiTexImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glCompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLsizei a4, GLsizei a5, GLint a6, GLsizei a7, const(void)* a8) nothrow {
  glCompressedMultiTexImage2DEXT = cast(glbfn_glCompressedMultiTexImage2DEXT)glGetProcAddress(`glCompressedMultiTexImage2DEXT`);
  if (glCompressedMultiTexImage2DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedMultiTexImage2DEXT'\n"); }
  glCompressedMultiTexImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glCompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLenum a3, GLsizei a4, GLint a5, GLsizei a6, const(void)* a7) nothrow {
  glCompressedMultiTexImage1DEXT = cast(glbfn_glCompressedMultiTexImage1DEXT)glGetProcAddress(`glCompressedMultiTexImage1DEXT`);
  if (glCompressedMultiTexImage1DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedMultiTexImage1DEXT'\n"); }
  glCompressedMultiTexImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glCompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7, GLsizei a8, GLenum a9, GLsizei a10, const(void)* a11) nothrow {
  glCompressedMultiTexSubImage3DEXT = cast(glbfn_glCompressedMultiTexSubImage3DEXT)glGetProcAddress(`glCompressedMultiTexSubImage3DEXT`);
  if (glCompressedMultiTexSubImage3DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedMultiTexSubImage3DEXT'\n"); }
  glCompressedMultiTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glCompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLenum a7, GLsizei a8, const(void)* a9) nothrow {
  glCompressedMultiTexSubImage2DEXT = cast(glbfn_glCompressedMultiTexSubImage2DEXT)glGetProcAddress(`glCompressedMultiTexSubImage2DEXT`);
  if (glCompressedMultiTexSubImage2DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedMultiTexSubImage2DEXT'\n"); }
  glCompressedMultiTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4, GLenum a5, GLsizei a6, const(void)* a7) nothrow {
  glCompressedMultiTexSubImage1DEXT = cast(glbfn_glCompressedMultiTexSubImage1DEXT)glGetProcAddress(`glCompressedMultiTexSubImage1DEXT`);
  if (glCompressedMultiTexSubImage1DEXT is null) assert(0, `OpenGL function 'glCompressedMultiTexSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompressedMultiTexSubImage1DEXT'\n"); }
  glCompressedMultiTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT = function void (GLenum a0, GLenum a1, GLint a2, void* a3) nothrow {
  glGetCompressedMultiTexImageEXT = cast(glbfn_glGetCompressedMultiTexImageEXT)glGetProcAddress(`glGetCompressedMultiTexImageEXT`);
  if (glGetCompressedMultiTexImageEXT is null) assert(0, `OpenGL function 'glGetCompressedMultiTexImageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCompressedMultiTexImageEXT'\n"); }
  glGetCompressedMultiTexImageEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMatrixLoadTransposefEXT glMatrixLoadTransposefEXT = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixLoadTransposefEXT = cast(glbfn_glMatrixLoadTransposefEXT)glGetProcAddress(`glMatrixLoadTransposefEXT`);
  if (glMatrixLoadTransposefEXT is null) assert(0, `OpenGL function 'glMatrixLoadTransposefEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoadTransposefEXT'\n"); }
  glMatrixLoadTransposefEXT(a0,a1,);
};
__gshared glbfn_glMatrixLoadTransposedEXT glMatrixLoadTransposedEXT = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMatrixLoadTransposedEXT = cast(glbfn_glMatrixLoadTransposedEXT)glGetProcAddress(`glMatrixLoadTransposedEXT`);
  if (glMatrixLoadTransposedEXT is null) assert(0, `OpenGL function 'glMatrixLoadTransposedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoadTransposedEXT'\n"); }
  glMatrixLoadTransposedEXT(a0,a1,);
};
__gshared glbfn_glMatrixMultTransposefEXT glMatrixMultTransposefEXT = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixMultTransposefEXT = cast(glbfn_glMatrixMultTransposefEXT)glGetProcAddress(`glMatrixMultTransposefEXT`);
  if (glMatrixMultTransposefEXT is null) assert(0, `OpenGL function 'glMatrixMultTransposefEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMultTransposefEXT'\n"); }
  glMatrixMultTransposefEXT(a0,a1,);
};
__gshared glbfn_glMatrixMultTransposedEXT glMatrixMultTransposedEXT = function void (GLenum a0, const(GLdouble)* a1) nothrow {
  glMatrixMultTransposedEXT = cast(glbfn_glMatrixMultTransposedEXT)glGetProcAddress(`glMatrixMultTransposedEXT`);
  if (glMatrixMultTransposedEXT is null) assert(0, `OpenGL function 'glMatrixMultTransposedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMultTransposedEXT'\n"); }
  glMatrixMultTransposedEXT(a0,a1,);
};
__gshared glbfn_glNamedBufferDataEXT glNamedBufferDataEXT = function void (GLuint a0, GLsizeiptr a1, const(void)* a2, GLenum a3) nothrow {
  glNamedBufferDataEXT = cast(glbfn_glNamedBufferDataEXT)glGetProcAddress(`glNamedBufferDataEXT`);
  if (glNamedBufferDataEXT is null) assert(0, `OpenGL function 'glNamedBufferDataEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferDataEXT'\n"); }
  glNamedBufferDataEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedBufferSubDataEXT glNamedBufferSubDataEXT = function void (GLuint a0, GLintptr a1, GLsizeiptr a2, const(void)* a3) nothrow {
  glNamedBufferSubDataEXT = cast(glbfn_glNamedBufferSubDataEXT)glGetProcAddress(`glNamedBufferSubDataEXT`);
  if (glNamedBufferSubDataEXT is null) assert(0, `OpenGL function 'glNamedBufferSubDataEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferSubDataEXT'\n"); }
  glNamedBufferSubDataEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMapNamedBufferEXT glMapNamedBufferEXT = function void* (GLuint a0, GLenum a1) nothrow {
  glMapNamedBufferEXT = cast(glbfn_glMapNamedBufferEXT)glGetProcAddress(`glMapNamedBufferEXT`);
  if (glMapNamedBufferEXT is null) assert(0, `OpenGL function 'glMapNamedBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapNamedBufferEXT'\n"); }
  return glMapNamedBufferEXT(a0,a1,);
};
__gshared glbfn_glUnmapNamedBufferEXT glUnmapNamedBufferEXT = function GLboolean (GLuint a0) nothrow {
  glUnmapNamedBufferEXT = cast(glbfn_glUnmapNamedBufferEXT)glGetProcAddress(`glUnmapNamedBufferEXT`);
  if (glUnmapNamedBufferEXT is null) assert(0, `OpenGL function 'glUnmapNamedBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUnmapNamedBufferEXT'\n"); }
  return glUnmapNamedBufferEXT(a0,);
};
__gshared glbfn_glGetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetNamedBufferParameterivEXT = cast(glbfn_glGetNamedBufferParameterivEXT)glGetProcAddress(`glGetNamedBufferParameterivEXT`);
  if (glGetNamedBufferParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedBufferParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferParameterivEXT'\n"); }
  glGetNamedBufferParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetNamedBufferPointervEXT glGetNamedBufferPointervEXT = function void (GLuint a0, GLenum a1, void** a2) nothrow {
  glGetNamedBufferPointervEXT = cast(glbfn_glGetNamedBufferPointervEXT)glGetProcAddress(`glGetNamedBufferPointervEXT`);
  if (glGetNamedBufferPointervEXT is null) assert(0, `OpenGL function 'glGetNamedBufferPointervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferPointervEXT'\n"); }
  glGetNamedBufferPointervEXT(a0,a1,a2,);
};
__gshared glbfn_glGetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT = function void (GLuint a0, GLintptr a1, GLsizeiptr a2, void* a3) nothrow {
  glGetNamedBufferSubDataEXT = cast(glbfn_glGetNamedBufferSubDataEXT)glGetProcAddress(`glGetNamedBufferSubDataEXT`);
  if (glGetNamedBufferSubDataEXT is null) assert(0, `OpenGL function 'glGetNamedBufferSubDataEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferSubDataEXT'\n"); }
  glGetNamedBufferSubDataEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1fEXT glProgramUniform1fEXT = function void (GLuint a0, GLint a1, GLfloat a2) nothrow {
  glProgramUniform1fEXT = cast(glbfn_glProgramUniform1fEXT)glGetProcAddress(`glProgramUniform1fEXT`);
  if (glProgramUniform1fEXT is null) assert(0, `OpenGL function 'glProgramUniform1fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1fEXT'\n"); }
  glProgramUniform1fEXT(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2fEXT glProgramUniform2fEXT = function void (GLuint a0, GLint a1, GLfloat a2, GLfloat a3) nothrow {
  glProgramUniform2fEXT = cast(glbfn_glProgramUniform2fEXT)glGetProcAddress(`glProgramUniform2fEXT`);
  if (glProgramUniform2fEXT is null) assert(0, `OpenGL function 'glProgramUniform2fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2fEXT'\n"); }
  glProgramUniform2fEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3fEXT glProgramUniform3fEXT = function void (GLuint a0, GLint a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glProgramUniform3fEXT = cast(glbfn_glProgramUniform3fEXT)glGetProcAddress(`glProgramUniform3fEXT`);
  if (glProgramUniform3fEXT is null) assert(0, `OpenGL function 'glProgramUniform3fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3fEXT'\n"); }
  glProgramUniform3fEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4fEXT glProgramUniform4fEXT = function void (GLuint a0, GLint a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glProgramUniform4fEXT = cast(glbfn_glProgramUniform4fEXT)glGetProcAddress(`glProgramUniform4fEXT`);
  if (glProgramUniform4fEXT is null) assert(0, `OpenGL function 'glProgramUniform4fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4fEXT'\n"); }
  glProgramUniform4fEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1iEXT glProgramUniform1iEXT = function void (GLuint a0, GLint a1, GLint a2) nothrow {
  glProgramUniform1iEXT = cast(glbfn_glProgramUniform1iEXT)glGetProcAddress(`glProgramUniform1iEXT`);
  if (glProgramUniform1iEXT is null) assert(0, `OpenGL function 'glProgramUniform1iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1iEXT'\n"); }
  glProgramUniform1iEXT(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2iEXT glProgramUniform2iEXT = function void (GLuint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glProgramUniform2iEXT = cast(glbfn_glProgramUniform2iEXT)glGetProcAddress(`glProgramUniform2iEXT`);
  if (glProgramUniform2iEXT is null) assert(0, `OpenGL function 'glProgramUniform2iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2iEXT'\n"); }
  glProgramUniform2iEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3iEXT glProgramUniform3iEXT = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glProgramUniform3iEXT = cast(glbfn_glProgramUniform3iEXT)glGetProcAddress(`glProgramUniform3iEXT`);
  if (glProgramUniform3iEXT is null) assert(0, `OpenGL function 'glProgramUniform3iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3iEXT'\n"); }
  glProgramUniform3iEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4iEXT glProgramUniform4iEXT = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5) nothrow {
  glProgramUniform4iEXT = cast(glbfn_glProgramUniform4iEXT)glGetProcAddress(`glProgramUniform4iEXT`);
  if (glProgramUniform4iEXT is null) assert(0, `OpenGL function 'glProgramUniform4iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4iEXT'\n"); }
  glProgramUniform4iEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1fvEXT glProgramUniform1fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform1fvEXT = cast(glbfn_glProgramUniform1fvEXT)glGetProcAddress(`glProgramUniform1fvEXT`);
  if (glProgramUniform1fvEXT is null) assert(0, `OpenGL function 'glProgramUniform1fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1fvEXT'\n"); }
  glProgramUniform1fvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2fvEXT glProgramUniform2fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform2fvEXT = cast(glbfn_glProgramUniform2fvEXT)glGetProcAddress(`glProgramUniform2fvEXT`);
  if (glProgramUniform2fvEXT is null) assert(0, `OpenGL function 'glProgramUniform2fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2fvEXT'\n"); }
  glProgramUniform2fvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3fvEXT glProgramUniform3fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform3fvEXT = cast(glbfn_glProgramUniform3fvEXT)glGetProcAddress(`glProgramUniform3fvEXT`);
  if (glProgramUniform3fvEXT is null) assert(0, `OpenGL function 'glProgramUniform3fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3fvEXT'\n"); }
  glProgramUniform3fvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4fvEXT glProgramUniform4fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramUniform4fvEXT = cast(glbfn_glProgramUniform4fvEXT)glGetProcAddress(`glProgramUniform4fvEXT`);
  if (glProgramUniform4fvEXT is null) assert(0, `OpenGL function 'glProgramUniform4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4fvEXT'\n"); }
  glProgramUniform4fvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1ivEXT glProgramUniform1ivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform1ivEXT = cast(glbfn_glProgramUniform1ivEXT)glGetProcAddress(`glProgramUniform1ivEXT`);
  if (glProgramUniform1ivEXT is null) assert(0, `OpenGL function 'glProgramUniform1ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1ivEXT'\n"); }
  glProgramUniform1ivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2ivEXT glProgramUniform2ivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform2ivEXT = cast(glbfn_glProgramUniform2ivEXT)glGetProcAddress(`glProgramUniform2ivEXT`);
  if (glProgramUniform2ivEXT is null) assert(0, `OpenGL function 'glProgramUniform2ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2ivEXT'\n"); }
  glProgramUniform2ivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3ivEXT glProgramUniform3ivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform3ivEXT = cast(glbfn_glProgramUniform3ivEXT)glGetProcAddress(`glProgramUniform3ivEXT`);
  if (glProgramUniform3ivEXT is null) assert(0, `OpenGL function 'glProgramUniform3ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3ivEXT'\n"); }
  glProgramUniform3ivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4ivEXT glProgramUniform4ivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramUniform4ivEXT = cast(glbfn_glProgramUniform4ivEXT)glGetProcAddress(`glProgramUniform4ivEXT`);
  if (glProgramUniform4ivEXT is null) assert(0, `OpenGL function 'glProgramUniform4ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4ivEXT'\n"); }
  glProgramUniform4ivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix2fvEXT = cast(glbfn_glProgramUniformMatrix2fvEXT)glGetProcAddress(`glProgramUniformMatrix2fvEXT`);
  if (glProgramUniformMatrix2fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2fvEXT'\n"); }
  glProgramUniformMatrix2fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix3fvEXT = cast(glbfn_glProgramUniformMatrix3fvEXT)glGetProcAddress(`glProgramUniformMatrix3fvEXT`);
  if (glProgramUniformMatrix3fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3fvEXT'\n"); }
  glProgramUniformMatrix3fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix4fvEXT = cast(glbfn_glProgramUniformMatrix4fvEXT)glGetProcAddress(`glProgramUniformMatrix4fvEXT`);
  if (glProgramUniformMatrix4fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4fvEXT'\n"); }
  glProgramUniformMatrix4fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix2x3fvEXT = cast(glbfn_glProgramUniformMatrix2x3fvEXT)glGetProcAddress(`glProgramUniformMatrix2x3fvEXT`);
  if (glProgramUniformMatrix2x3fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x3fvEXT'\n"); }
  glProgramUniformMatrix2x3fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix3x2fvEXT = cast(glbfn_glProgramUniformMatrix3x2fvEXT)glGetProcAddress(`glProgramUniformMatrix3x2fvEXT`);
  if (glProgramUniformMatrix3x2fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x2fvEXT'\n"); }
  glProgramUniformMatrix3x2fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix2x4fvEXT = cast(glbfn_glProgramUniformMatrix2x4fvEXT)glGetProcAddress(`glProgramUniformMatrix2x4fvEXT`);
  if (glProgramUniformMatrix2x4fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x4fvEXT'\n"); }
  glProgramUniformMatrix2x4fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix4x2fvEXT = cast(glbfn_glProgramUniformMatrix4x2fvEXT)glGetProcAddress(`glProgramUniformMatrix4x2fvEXT`);
  if (glProgramUniformMatrix4x2fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x2fvEXT'\n"); }
  glProgramUniformMatrix4x2fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix3x4fvEXT = cast(glbfn_glProgramUniformMatrix3x4fvEXT)glGetProcAddress(`glProgramUniformMatrix3x4fvEXT`);
  if (glProgramUniformMatrix3x4fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x4fvEXT'\n"); }
  glProgramUniformMatrix3x4fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLfloat)* a4) nothrow {
  glProgramUniformMatrix4x3fvEXT = cast(glbfn_glProgramUniformMatrix4x3fvEXT)glGetProcAddress(`glProgramUniformMatrix4x3fvEXT`);
  if (glProgramUniformMatrix4x3fvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x3fvEXT'\n"); }
  glProgramUniformMatrix4x3fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTextureBufferEXT glTextureBufferEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLuint a3) nothrow {
  glTextureBufferEXT = cast(glbfn_glTextureBufferEXT)glGetProcAddress(`glTextureBufferEXT`);
  if (glTextureBufferEXT is null) assert(0, `OpenGL function 'glTextureBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureBufferEXT'\n"); }
  glTextureBufferEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexBufferEXT glMultiTexBufferEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3) nothrow {
  glMultiTexBufferEXT = cast(glbfn_glMultiTexBufferEXT)glGetProcAddress(`glMultiTexBufferEXT`);
  if (glMultiTexBufferEXT is null) assert(0, `OpenGL function 'glMultiTexBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexBufferEXT'\n"); }
  glMultiTexBufferEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureParameterIivEXT glTextureParameterIivEXT = function void (GLuint a0, GLenum a1, GLenum a2, const(GLint)* a3) nothrow {
  glTextureParameterIivEXT = cast(glbfn_glTextureParameterIivEXT)glGetProcAddress(`glTextureParameterIivEXT`);
  if (glTextureParameterIivEXT is null) assert(0, `OpenGL function 'glTextureParameterIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterIivEXT'\n"); }
  glTextureParameterIivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureParameterIuivEXT glTextureParameterIuivEXT = function void (GLuint a0, GLenum a1, GLenum a2, const(GLuint)* a3) nothrow {
  glTextureParameterIuivEXT = cast(glbfn_glTextureParameterIuivEXT)glGetProcAddress(`glTextureParameterIuivEXT`);
  if (glTextureParameterIuivEXT is null) assert(0, `OpenGL function 'glTextureParameterIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureParameterIuivEXT'\n"); }
  glTextureParameterIuivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTextureParameterIivEXT glGetTextureParameterIivEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetTextureParameterIivEXT = cast(glbfn_glGetTextureParameterIivEXT)glGetProcAddress(`glGetTextureParameterIivEXT`);
  if (glGetTextureParameterIivEXT is null) assert(0, `OpenGL function 'glGetTextureParameterIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameterIivEXT'\n"); }
  glGetTextureParameterIivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTextureParameterIuivEXT glGetTextureParameterIuivEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLuint* a3) nothrow {
  glGetTextureParameterIuivEXT = cast(glbfn_glGetTextureParameterIuivEXT)glGetProcAddress(`glGetTextureParameterIuivEXT`);
  if (glGetTextureParameterIuivEXT is null) assert(0, `OpenGL function 'glGetTextureParameterIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureParameterIuivEXT'\n"); }
  glGetTextureParameterIuivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexParameterIivEXT glMultiTexParameterIivEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLint)* a3) nothrow {
  glMultiTexParameterIivEXT = cast(glbfn_glMultiTexParameterIivEXT)glGetProcAddress(`glMultiTexParameterIivEXT`);
  if (glMultiTexParameterIivEXT is null) assert(0, `OpenGL function 'glMultiTexParameterIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexParameterIivEXT'\n"); }
  glMultiTexParameterIivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexParameterIuivEXT glMultiTexParameterIuivEXT = function void (GLenum a0, GLenum a1, GLenum a2, const(GLuint)* a3) nothrow {
  glMultiTexParameterIuivEXT = cast(glbfn_glMultiTexParameterIuivEXT)glGetProcAddress(`glMultiTexParameterIuivEXT`);
  if (glMultiTexParameterIuivEXT is null) assert(0, `OpenGL function 'glMultiTexParameterIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexParameterIuivEXT'\n"); }
  glMultiTexParameterIuivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetMultiTexParameterIivEXT = cast(glbfn_glGetMultiTexParameterIivEXT)glGetProcAddress(`glGetMultiTexParameterIivEXT`);
  if (glGetMultiTexParameterIivEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexParameterIivEXT'\n"); }
  glGetMultiTexParameterIivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLuint* a3) nothrow {
  glGetMultiTexParameterIuivEXT = cast(glbfn_glGetMultiTexParameterIuivEXT)glGetProcAddress(`glGetMultiTexParameterIuivEXT`);
  if (glGetMultiTexParameterIuivEXT is null) assert(0, `OpenGL function 'glGetMultiTexParameterIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultiTexParameterIuivEXT'\n"); }
  glGetMultiTexParameterIuivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform1uiEXT glProgramUniform1uiEXT = function void (GLuint a0, GLint a1, GLuint a2) nothrow {
  glProgramUniform1uiEXT = cast(glbfn_glProgramUniform1uiEXT)glGetProcAddress(`glProgramUniform1uiEXT`);
  if (glProgramUniform1uiEXT is null) assert(0, `OpenGL function 'glProgramUniform1uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1uiEXT'\n"); }
  glProgramUniform1uiEXT(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2uiEXT glProgramUniform2uiEXT = function void (GLuint a0, GLint a1, GLuint a2, GLuint a3) nothrow {
  glProgramUniform2uiEXT = cast(glbfn_glProgramUniform2uiEXT)glGetProcAddress(`glProgramUniform2uiEXT`);
  if (glProgramUniform2uiEXT is null) assert(0, `OpenGL function 'glProgramUniform2uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2uiEXT'\n"); }
  glProgramUniform2uiEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3uiEXT glProgramUniform3uiEXT = function void (GLuint a0, GLint a1, GLuint a2, GLuint a3, GLuint a4) nothrow {
  glProgramUniform3uiEXT = cast(glbfn_glProgramUniform3uiEXT)glGetProcAddress(`glProgramUniform3uiEXT`);
  if (glProgramUniform3uiEXT is null) assert(0, `OpenGL function 'glProgramUniform3uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3uiEXT'\n"); }
  glProgramUniform3uiEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4uiEXT glProgramUniform4uiEXT = function void (GLuint a0, GLint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5) nothrow {
  glProgramUniform4uiEXT = cast(glbfn_glProgramUniform4uiEXT)glGetProcAddress(`glProgramUniform4uiEXT`);
  if (glProgramUniform4uiEXT is null) assert(0, `OpenGL function 'glProgramUniform4uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4uiEXT'\n"); }
  glProgramUniform4uiEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1uivEXT glProgramUniform1uivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform1uivEXT = cast(glbfn_glProgramUniform1uivEXT)glGetProcAddress(`glProgramUniform1uivEXT`);
  if (glProgramUniform1uivEXT is null) assert(0, `OpenGL function 'glProgramUniform1uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1uivEXT'\n"); }
  glProgramUniform1uivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2uivEXT glProgramUniform2uivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform2uivEXT = cast(glbfn_glProgramUniform2uivEXT)glGetProcAddress(`glProgramUniform2uivEXT`);
  if (glProgramUniform2uivEXT is null) assert(0, `OpenGL function 'glProgramUniform2uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2uivEXT'\n"); }
  glProgramUniform2uivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3uivEXT glProgramUniform3uivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform3uivEXT = cast(glbfn_glProgramUniform3uivEXT)glGetProcAddress(`glProgramUniform3uivEXT`);
  if (glProgramUniform3uivEXT is null) assert(0, `OpenGL function 'glProgramUniform3uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3uivEXT'\n"); }
  glProgramUniform3uivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4uivEXT glProgramUniform4uivEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramUniform4uivEXT = cast(glbfn_glProgramUniform4uivEXT)glGetProcAddress(`glProgramUniform4uivEXT`);
  if (glProgramUniform4uivEXT is null) assert(0, `OpenGL function 'glProgramUniform4uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4uivEXT'\n"); }
  glProgramUniform4uivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, const(GLfloat)* a4) nothrow {
  glNamedProgramLocalParameters4fvEXT = cast(glbfn_glNamedProgramLocalParameters4fvEXT)glGetProcAddress(`glNamedProgramLocalParameters4fvEXT`);
  if (glNamedProgramLocalParameters4fvEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameters4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameters4fvEXT'\n"); }
  glNamedProgramLocalParameters4fvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLint a3, GLint a4, GLint a5, GLint a6) nothrow {
  glNamedProgramLocalParameterI4iEXT = cast(glbfn_glNamedProgramLocalParameterI4iEXT)glGetProcAddress(`glNamedProgramLocalParameterI4iEXT`);
  if (glNamedProgramLocalParameterI4iEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameterI4iEXT'\n"); }
  glNamedProgramLocalParameterI4iEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glNamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT = function void (GLuint a0, GLenum a1, GLuint a2, const(GLint)* a3) nothrow {
  glNamedProgramLocalParameterI4ivEXT = cast(glbfn_glNamedProgramLocalParameterI4ivEXT)glGetProcAddress(`glNamedProgramLocalParameterI4ivEXT`);
  if (glNamedProgramLocalParameterI4ivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameterI4ivEXT'\n"); }
  glNamedProgramLocalParameterI4ivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, const(GLint)* a4) nothrow {
  glNamedProgramLocalParametersI4ivEXT = cast(glbfn_glNamedProgramLocalParametersI4ivEXT)glGetProcAddress(`glNamedProgramLocalParametersI4ivEXT`);
  if (glNamedProgramLocalParametersI4ivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParametersI4ivEXT'\n"); }
  glNamedProgramLocalParametersI4ivEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5, GLuint a6) nothrow {
  glNamedProgramLocalParameterI4uiEXT = cast(glbfn_glNamedProgramLocalParameterI4uiEXT)glGetProcAddress(`glNamedProgramLocalParameterI4uiEXT`);
  if (glNamedProgramLocalParameterI4uiEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameterI4uiEXT'\n"); }
  glNamedProgramLocalParameterI4uiEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT = function void (GLuint a0, GLenum a1, GLuint a2, const(GLuint)* a3) nothrow {
  glNamedProgramLocalParameterI4uivEXT = cast(glbfn_glNamedProgramLocalParameterI4uivEXT)glGetProcAddress(`glNamedProgramLocalParameterI4uivEXT`);
  if (glNamedProgramLocalParameterI4uivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameterI4uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameterI4uivEXT'\n"); }
  glNamedProgramLocalParameterI4uivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, const(GLuint)* a4) nothrow {
  glNamedProgramLocalParametersI4uivEXT = cast(glbfn_glNamedProgramLocalParametersI4uivEXT)glGetProcAddress(`glNamedProgramLocalParametersI4uivEXT`);
  if (glNamedProgramLocalParametersI4uivEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParametersI4uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParametersI4uivEXT'\n"); }
  glNamedProgramLocalParametersI4uivEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLint* a3) nothrow {
  glGetNamedProgramLocalParameterIivEXT = cast(glbfn_glGetNamedProgramLocalParameterIivEXT)glGetProcAddress(`glGetNamedProgramLocalParameterIivEXT`);
  if (glGetNamedProgramLocalParameterIivEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedProgramLocalParameterIivEXT'\n"); }
  glGetNamedProgramLocalParameterIivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLuint* a3) nothrow {
  glGetNamedProgramLocalParameterIuivEXT = cast(glbfn_glGetNamedProgramLocalParameterIuivEXT)glGetProcAddress(`glGetNamedProgramLocalParameterIuivEXT`);
  if (glGetNamedProgramLocalParameterIuivEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedProgramLocalParameterIuivEXT'\n"); }
  glGetNamedProgramLocalParameterIuivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glEnableClientStateiEXT glEnableClientStateiEXT = function void (GLenum a0, GLuint a1) nothrow {
  glEnableClientStateiEXT = cast(glbfn_glEnableClientStateiEXT)glGetProcAddress(`glEnableClientStateiEXT`);
  if (glEnableClientStateiEXT is null) assert(0, `OpenGL function 'glEnableClientStateiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableClientStateiEXT'\n"); }
  glEnableClientStateiEXT(a0,a1,);
};
__gshared glbfn_glDisableClientStateiEXT glDisableClientStateiEXT = function void (GLenum a0, GLuint a1) nothrow {
  glDisableClientStateiEXT = cast(glbfn_glDisableClientStateiEXT)glGetProcAddress(`glDisableClientStateiEXT`);
  if (glDisableClientStateiEXT is null) assert(0, `OpenGL function 'glDisableClientStateiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableClientStateiEXT'\n"); }
  glDisableClientStateiEXT(a0,a1,);
};
__gshared glbfn_glGetFloati_vEXT glGetFloati_vEXT = function void (GLenum a0, GLuint a1, GLfloat* a2) nothrow {
  glGetFloati_vEXT = cast(glbfn_glGetFloati_vEXT)glGetProcAddress(`glGetFloati_vEXT`);
  if (glGetFloati_vEXT is null) assert(0, `OpenGL function 'glGetFloati_vEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFloati_vEXT'\n"); }
  glGetFloati_vEXT(a0,a1,a2,);
};
__gshared glbfn_glGetDoublei_vEXT glGetDoublei_vEXT = function void (GLenum a0, GLuint a1, GLdouble* a2) nothrow {
  glGetDoublei_vEXT = cast(glbfn_glGetDoublei_vEXT)glGetProcAddress(`glGetDoublei_vEXT`);
  if (glGetDoublei_vEXT is null) assert(0, `OpenGL function 'glGetDoublei_vEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDoublei_vEXT'\n"); }
  glGetDoublei_vEXT(a0,a1,a2,);
};
__gshared glbfn_glGetPointeri_vEXT glGetPointeri_vEXT = function void (GLenum a0, GLuint a1, void** a2) nothrow {
  glGetPointeri_vEXT = cast(glbfn_glGetPointeri_vEXT)glGetProcAddress(`glGetPointeri_vEXT`);
  if (glGetPointeri_vEXT is null) assert(0, `OpenGL function 'glGetPointeri_vEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPointeri_vEXT'\n"); }
  glGetPointeri_vEXT(a0,a1,a2,);
};
__gshared glbfn_glNamedProgramStringEXT glNamedProgramStringEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLsizei a3, const(void)* a4) nothrow {
  glNamedProgramStringEXT = cast(glbfn_glNamedProgramStringEXT)glGetProcAddress(`glNamedProgramStringEXT`);
  if (glNamedProgramStringEXT is null) assert(0, `OpenGL function 'glNamedProgramStringEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramStringEXT'\n"); }
  glNamedProgramStringEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLdouble a3, GLdouble a4, GLdouble a5, GLdouble a6) nothrow {
  glNamedProgramLocalParameter4dEXT = cast(glbfn_glNamedProgramLocalParameter4dEXT)glGetProcAddress(`glNamedProgramLocalParameter4dEXT`);
  if (glNamedProgramLocalParameter4dEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameter4dEXT'\n"); }
  glNamedProgramLocalParameter4dEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT = function void (GLuint a0, GLenum a1, GLuint a2, const(GLdouble)* a3) nothrow {
  glNamedProgramLocalParameter4dvEXT = cast(glbfn_glNamedProgramLocalParameter4dvEXT)glGetProcAddress(`glNamedProgramLocalParameter4dvEXT`);
  if (glNamedProgramLocalParameter4dvEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameter4dvEXT'\n"); }
  glNamedProgramLocalParameter4dvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6) nothrow {
  glNamedProgramLocalParameter4fEXT = cast(glbfn_glNamedProgramLocalParameter4fEXT)glGetProcAddress(`glNamedProgramLocalParameter4fEXT`);
  if (glNamedProgramLocalParameter4fEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameter4fEXT'\n"); }
  glNamedProgramLocalParameter4fEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glNamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT = function void (GLuint a0, GLenum a1, GLuint a2, const(GLfloat)* a3) nothrow {
  glNamedProgramLocalParameter4fvEXT = cast(glbfn_glNamedProgramLocalParameter4fvEXT)glGetProcAddress(`glNamedProgramLocalParameter4fvEXT`);
  if (glNamedProgramLocalParameter4fvEXT is null) assert(0, `OpenGL function 'glNamedProgramLocalParameter4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedProgramLocalParameter4fvEXT'\n"); }
  glNamedProgramLocalParameter4fvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLdouble* a3) nothrow {
  glGetNamedProgramLocalParameterdvEXT = cast(glbfn_glGetNamedProgramLocalParameterdvEXT)glGetProcAddress(`glGetNamedProgramLocalParameterdvEXT`);
  if (glGetNamedProgramLocalParameterdvEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterdvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedProgramLocalParameterdvEXT'\n"); }
  glGetNamedProgramLocalParameterdvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLfloat* a3) nothrow {
  glGetNamedProgramLocalParameterfvEXT = cast(glbfn_glGetNamedProgramLocalParameterfvEXT)glGetProcAddress(`glGetNamedProgramLocalParameterfvEXT`);
  if (glGetNamedProgramLocalParameterfvEXT is null) assert(0, `OpenGL function 'glGetNamedProgramLocalParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedProgramLocalParameterfvEXT'\n"); }
  glGetNamedProgramLocalParameterfvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetNamedProgramivEXT glGetNamedProgramivEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetNamedProgramivEXT = cast(glbfn_glGetNamedProgramivEXT)glGetProcAddress(`glGetNamedProgramivEXT`);
  if (glGetNamedProgramivEXT is null) assert(0, `OpenGL function 'glGetNamedProgramivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedProgramivEXT'\n"); }
  glGetNamedProgramivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetNamedProgramStringEXT glGetNamedProgramStringEXT = function void (GLuint a0, GLenum a1, GLenum a2, void* a3) nothrow {
  glGetNamedProgramStringEXT = cast(glbfn_glGetNamedProgramStringEXT)glGetProcAddress(`glGetNamedProgramStringEXT`);
  if (glGetNamedProgramStringEXT is null) assert(0, `OpenGL function 'glGetNamedProgramStringEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedProgramStringEXT'\n"); }
  glGetNamedProgramStringEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT = function void (GLuint a0, GLenum a1, GLsizei a2, GLsizei a3) nothrow {
  glNamedRenderbufferStorageEXT = cast(glbfn_glNamedRenderbufferStorageEXT)glGetProcAddress(`glNamedRenderbufferStorageEXT`);
  if (glNamedRenderbufferStorageEXT is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedRenderbufferStorageEXT'\n"); }
  glNamedRenderbufferStorageEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetNamedRenderbufferParameterivEXT = cast(glbfn_glGetNamedRenderbufferParameterivEXT)glGetProcAddress(`glGetNamedRenderbufferParameterivEXT`);
  if (glGetNamedRenderbufferParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedRenderbufferParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedRenderbufferParameterivEXT'\n"); }
  glGetNamedRenderbufferParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glNamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT = function void (GLuint a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4) nothrow {
  glNamedRenderbufferStorageMultisampleEXT = cast(glbfn_glNamedRenderbufferStorageMultisampleEXT)glGetProcAddress(`glNamedRenderbufferStorageMultisampleEXT`);
  if (glNamedRenderbufferStorageMultisampleEXT is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedRenderbufferStorageMultisampleEXT'\n"); }
  glNamedRenderbufferStorageMultisampleEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT = function void (GLuint a0, GLsizei a1, GLsizei a2, GLenum a3, GLsizei a4, GLsizei a5) nothrow {
  glNamedRenderbufferStorageMultisampleCoverageEXT = cast(glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT)glGetProcAddress(`glNamedRenderbufferStorageMultisampleCoverageEXT`);
  if (glNamedRenderbufferStorageMultisampleCoverageEXT is null) assert(0, `OpenGL function 'glNamedRenderbufferStorageMultisampleCoverageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedRenderbufferStorageMultisampleCoverageEXT'\n"); }
  glNamedRenderbufferStorageMultisampleCoverageEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glCheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT = function GLenum (GLuint a0, GLenum a1) nothrow {
  glCheckNamedFramebufferStatusEXT = cast(glbfn_glCheckNamedFramebufferStatusEXT)glGetProcAddress(`glCheckNamedFramebufferStatusEXT`);
  if (glCheckNamedFramebufferStatusEXT is null) assert(0, `OpenGL function 'glCheckNamedFramebufferStatusEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCheckNamedFramebufferStatusEXT'\n"); }
  return glCheckNamedFramebufferStatusEXT(a0,a1,);
};
__gshared glbfn_glNamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLuint a3, GLint a4) nothrow {
  glNamedFramebufferTexture1DEXT = cast(glbfn_glNamedFramebufferTexture1DEXT)glGetProcAddress(`glNamedFramebufferTexture1DEXT`);
  if (glNamedFramebufferTexture1DEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTexture1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTexture1DEXT'\n"); }
  glNamedFramebufferTexture1DEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLuint a3, GLint a4) nothrow {
  glNamedFramebufferTexture2DEXT = cast(glbfn_glNamedFramebufferTexture2DEXT)glGetProcAddress(`glNamedFramebufferTexture2DEXT`);
  if (glNamedFramebufferTexture2DEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTexture2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTexture2DEXT'\n"); }
  glNamedFramebufferTexture2DEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLuint a3, GLint a4, GLint a5) nothrow {
  glNamedFramebufferTexture3DEXT = cast(glbfn_glNamedFramebufferTexture3DEXT)glGetProcAddress(`glNamedFramebufferTexture3DEXT`);
  if (glNamedFramebufferTexture3DEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTexture3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTexture3DEXT'\n"); }
  glNamedFramebufferTexture3DEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glNamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLuint a3) nothrow {
  glNamedFramebufferRenderbufferEXT = cast(glbfn_glNamedFramebufferRenderbufferEXT)glGetProcAddress(`glNamedFramebufferRenderbufferEXT`);
  if (glNamedFramebufferRenderbufferEXT is null) assert(0, `OpenGL function 'glNamedFramebufferRenderbufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferRenderbufferEXT'\n"); }
  glNamedFramebufferRenderbufferEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetNamedFramebufferAttachmentParameterivEXT = cast(glbfn_glGetNamedFramebufferAttachmentParameterivEXT)glGetProcAddress(`glGetNamedFramebufferAttachmentParameterivEXT`);
  if (glGetNamedFramebufferAttachmentParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedFramebufferAttachmentParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedFramebufferAttachmentParameterivEXT'\n"); }
  glGetNamedFramebufferAttachmentParameterivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGenerateTextureMipmapEXT glGenerateTextureMipmapEXT = function void (GLuint a0, GLenum a1) nothrow {
  glGenerateTextureMipmapEXT = cast(glbfn_glGenerateTextureMipmapEXT)glGetProcAddress(`glGenerateTextureMipmapEXT`);
  if (glGenerateTextureMipmapEXT is null) assert(0, `OpenGL function 'glGenerateTextureMipmapEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenerateTextureMipmapEXT'\n"); }
  glGenerateTextureMipmapEXT(a0,a1,);
};
__gshared glbfn_glGenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT = function void (GLenum a0, GLenum a1) nothrow {
  glGenerateMultiTexMipmapEXT = cast(glbfn_glGenerateMultiTexMipmapEXT)glGetProcAddress(`glGenerateMultiTexMipmapEXT`);
  if (glGenerateMultiTexMipmapEXT is null) assert(0, `OpenGL function 'glGenerateMultiTexMipmapEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenerateMultiTexMipmapEXT'\n"); }
  glGenerateMultiTexMipmapEXT(a0,a1,);
};
__gshared glbfn_glFramebufferDrawBufferEXT glFramebufferDrawBufferEXT = function void (GLuint a0, GLenum a1) nothrow {
  glFramebufferDrawBufferEXT = cast(glbfn_glFramebufferDrawBufferEXT)glGetProcAddress(`glFramebufferDrawBufferEXT`);
  if (glFramebufferDrawBufferEXT is null) assert(0, `OpenGL function 'glFramebufferDrawBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferDrawBufferEXT'\n"); }
  glFramebufferDrawBufferEXT(a0,a1,);
};
__gshared glbfn_glFramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT = function void (GLuint a0, GLsizei a1, const(GLenum)* a2) nothrow {
  glFramebufferDrawBuffersEXT = cast(glbfn_glFramebufferDrawBuffersEXT)glGetProcAddress(`glFramebufferDrawBuffersEXT`);
  if (glFramebufferDrawBuffersEXT is null) assert(0, `OpenGL function 'glFramebufferDrawBuffersEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferDrawBuffersEXT'\n"); }
  glFramebufferDrawBuffersEXT(a0,a1,a2,);
};
__gshared glbfn_glFramebufferReadBufferEXT glFramebufferReadBufferEXT = function void (GLuint a0, GLenum a1) nothrow {
  glFramebufferReadBufferEXT = cast(glbfn_glFramebufferReadBufferEXT)glGetProcAddress(`glFramebufferReadBufferEXT`);
  if (glFramebufferReadBufferEXT is null) assert(0, `OpenGL function 'glFramebufferReadBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferReadBufferEXT'\n"); }
  glFramebufferReadBufferEXT(a0,a1,);
};
__gshared glbfn_glGetFramebufferParameterivEXT glGetFramebufferParameterivEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetFramebufferParameterivEXT = cast(glbfn_glGetFramebufferParameterivEXT)glGetProcAddress(`glGetFramebufferParameterivEXT`);
  if (glGetFramebufferParameterivEXT is null) assert(0, `OpenGL function 'glGetFramebufferParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFramebufferParameterivEXT'\n"); }
  glGetFramebufferParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glNamedCopyBufferSubDataEXT glNamedCopyBufferSubDataEXT = function void (GLuint a0, GLuint a1, GLintptr a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glNamedCopyBufferSubDataEXT = cast(glbfn_glNamedCopyBufferSubDataEXT)glGetProcAddress(`glNamedCopyBufferSubDataEXT`);
  if (glNamedCopyBufferSubDataEXT is null) assert(0, `OpenGL function 'glNamedCopyBufferSubDataEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedCopyBufferSubDataEXT'\n"); }
  glNamedCopyBufferSubDataEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedFramebufferTextureEXT glNamedFramebufferTextureEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLint a3) nothrow {
  glNamedFramebufferTextureEXT = cast(glbfn_glNamedFramebufferTextureEXT)glGetProcAddress(`glNamedFramebufferTextureEXT`);
  if (glNamedFramebufferTextureEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTextureEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTextureEXT'\n"); }
  glNamedFramebufferTextureEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLint a3, GLint a4) nothrow {
  glNamedFramebufferTextureLayerEXT = cast(glbfn_glNamedFramebufferTextureLayerEXT)glGetProcAddress(`glNamedFramebufferTextureLayerEXT`);
  if (glNamedFramebufferTextureLayerEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTextureLayerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTextureLayerEXT'\n"); }
  glNamedFramebufferTextureLayerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT = function void (GLuint a0, GLenum a1, GLuint a2, GLint a3, GLenum a4) nothrow {
  glNamedFramebufferTextureFaceEXT = cast(glbfn_glNamedFramebufferTextureFaceEXT)glGetProcAddress(`glNamedFramebufferTextureFaceEXT`);
  if (glNamedFramebufferTextureFaceEXT is null) assert(0, `OpenGL function 'glNamedFramebufferTextureFaceEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferTextureFaceEXT'\n"); }
  glNamedFramebufferTextureFaceEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTextureRenderbufferEXT glTextureRenderbufferEXT = function void (GLuint a0, GLenum a1, GLuint a2) nothrow {
  glTextureRenderbufferEXT = cast(glbfn_glTextureRenderbufferEXT)glGetProcAddress(`glTextureRenderbufferEXT`);
  if (glTextureRenderbufferEXT is null) assert(0, `OpenGL function 'glTextureRenderbufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureRenderbufferEXT'\n"); }
  glTextureRenderbufferEXT(a0,a1,a2,);
};
__gshared glbfn_glMultiTexRenderbufferEXT glMultiTexRenderbufferEXT = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glMultiTexRenderbufferEXT = cast(glbfn_glMultiTexRenderbufferEXT)glGetProcAddress(`glMultiTexRenderbufferEXT`);
  if (glMultiTexRenderbufferEXT is null) assert(0, `OpenGL function 'glMultiTexRenderbufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexRenderbufferEXT'\n"); }
  glMultiTexRenderbufferEXT(a0,a1,a2,);
};
__gshared glbfn_glVertexArrayVertexOffsetEXT glVertexArrayVertexOffsetEXT = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLsizei a4, GLintptr a5) nothrow {
  glVertexArrayVertexOffsetEXT = cast(glbfn_glVertexArrayVertexOffsetEXT)glGetProcAddress(`glVertexArrayVertexOffsetEXT`);
  if (glVertexArrayVertexOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexOffsetEXT'\n"); }
  glVertexArrayVertexOffsetEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexArrayColorOffsetEXT glVertexArrayColorOffsetEXT = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLsizei a4, GLintptr a5) nothrow {
  glVertexArrayColorOffsetEXT = cast(glbfn_glVertexArrayColorOffsetEXT)glGetProcAddress(`glVertexArrayColorOffsetEXT`);
  if (glVertexArrayColorOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayColorOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayColorOffsetEXT'\n"); }
  glVertexArrayColorOffsetEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexArrayEdgeFlagOffsetEXT glVertexArrayEdgeFlagOffsetEXT = function void (GLuint a0, GLuint a1, GLsizei a2, GLintptr a3) nothrow {
  glVertexArrayEdgeFlagOffsetEXT = cast(glbfn_glVertexArrayEdgeFlagOffsetEXT)glGetProcAddress(`glVertexArrayEdgeFlagOffsetEXT`);
  if (glVertexArrayEdgeFlagOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayEdgeFlagOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayEdgeFlagOffsetEXT'\n"); }
  glVertexArrayEdgeFlagOffsetEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexArrayIndexOffsetEXT glVertexArrayIndexOffsetEXT = function void (GLuint a0, GLuint a1, GLenum a2, GLsizei a3, GLintptr a4) nothrow {
  glVertexArrayIndexOffsetEXT = cast(glbfn_glVertexArrayIndexOffsetEXT)glGetProcAddress(`glVertexArrayIndexOffsetEXT`);
  if (glVertexArrayIndexOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayIndexOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayIndexOffsetEXT'\n"); }
  glVertexArrayIndexOffsetEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayNormalOffsetEXT glVertexArrayNormalOffsetEXT = function void (GLuint a0, GLuint a1, GLenum a2, GLsizei a3, GLintptr a4) nothrow {
  glVertexArrayNormalOffsetEXT = cast(glbfn_glVertexArrayNormalOffsetEXT)glGetProcAddress(`glVertexArrayNormalOffsetEXT`);
  if (glVertexArrayNormalOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayNormalOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayNormalOffsetEXT'\n"); }
  glVertexArrayNormalOffsetEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayTexCoordOffsetEXT glVertexArrayTexCoordOffsetEXT = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLsizei a4, GLintptr a5) nothrow {
  glVertexArrayTexCoordOffsetEXT = cast(glbfn_glVertexArrayTexCoordOffsetEXT)glGetProcAddress(`glVertexArrayTexCoordOffsetEXT`);
  if (glVertexArrayTexCoordOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayTexCoordOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayTexCoordOffsetEXT'\n"); }
  glVertexArrayTexCoordOffsetEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexArrayMultiTexCoordOffsetEXT glVertexArrayMultiTexCoordOffsetEXT = function void (GLuint a0, GLuint a1, GLenum a2, GLint a3, GLenum a4, GLsizei a5, GLintptr a6) nothrow {
  glVertexArrayMultiTexCoordOffsetEXT = cast(glbfn_glVertexArrayMultiTexCoordOffsetEXT)glGetProcAddress(`glVertexArrayMultiTexCoordOffsetEXT`);
  if (glVertexArrayMultiTexCoordOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayMultiTexCoordOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayMultiTexCoordOffsetEXT'\n"); }
  glVertexArrayMultiTexCoordOffsetEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glVertexArrayFogCoordOffsetEXT glVertexArrayFogCoordOffsetEXT = function void (GLuint a0, GLuint a1, GLenum a2, GLsizei a3, GLintptr a4) nothrow {
  glVertexArrayFogCoordOffsetEXT = cast(glbfn_glVertexArrayFogCoordOffsetEXT)glGetProcAddress(`glVertexArrayFogCoordOffsetEXT`);
  if (glVertexArrayFogCoordOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayFogCoordOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayFogCoordOffsetEXT'\n"); }
  glVertexArrayFogCoordOffsetEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArraySecondaryColorOffsetEXT glVertexArraySecondaryColorOffsetEXT = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLsizei a4, GLintptr a5) nothrow {
  glVertexArraySecondaryColorOffsetEXT = cast(glbfn_glVertexArraySecondaryColorOffsetEXT)glGetProcAddress(`glVertexArraySecondaryColorOffsetEXT`);
  if (glVertexArraySecondaryColorOffsetEXT is null) assert(0, `OpenGL function 'glVertexArraySecondaryColorOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArraySecondaryColorOffsetEXT'\n"); }
  glVertexArraySecondaryColorOffsetEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexArrayVertexAttribOffsetEXT glVertexArrayVertexAttribOffsetEXT = function void (GLuint a0, GLuint a1, GLuint a2, GLint a3, GLenum a4, GLboolean a5, GLsizei a6, GLintptr a7) nothrow {
  glVertexArrayVertexAttribOffsetEXT = cast(glbfn_glVertexArrayVertexAttribOffsetEXT)glGetProcAddress(`glVertexArrayVertexAttribOffsetEXT`);
  if (glVertexArrayVertexAttribOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribOffsetEXT'\n"); }
  glVertexArrayVertexAttribOffsetEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glVertexArrayVertexAttribIOffsetEXT glVertexArrayVertexAttribIOffsetEXT = function void (GLuint a0, GLuint a1, GLuint a2, GLint a3, GLenum a4, GLsizei a5, GLintptr a6) nothrow {
  glVertexArrayVertexAttribIOffsetEXT = cast(glbfn_glVertexArrayVertexAttribIOffsetEXT)glGetProcAddress(`glVertexArrayVertexAttribIOffsetEXT`);
  if (glVertexArrayVertexAttribIOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribIOffsetEXT'\n"); }
  glVertexArrayVertexAttribIOffsetEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glEnableVertexArrayEXT glEnableVertexArrayEXT = function void (GLuint a0, GLenum a1) nothrow {
  glEnableVertexArrayEXT = cast(glbfn_glEnableVertexArrayEXT)glGetProcAddress(`glEnableVertexArrayEXT`);
  if (glEnableVertexArrayEXT is null) assert(0, `OpenGL function 'glEnableVertexArrayEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableVertexArrayEXT'\n"); }
  glEnableVertexArrayEXT(a0,a1,);
};
__gshared glbfn_glDisableVertexArrayEXT glDisableVertexArrayEXT = function void (GLuint a0, GLenum a1) nothrow {
  glDisableVertexArrayEXT = cast(glbfn_glDisableVertexArrayEXT)glGetProcAddress(`glDisableVertexArrayEXT`);
  if (glDisableVertexArrayEXT is null) assert(0, `OpenGL function 'glDisableVertexArrayEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableVertexArrayEXT'\n"); }
  glDisableVertexArrayEXT(a0,a1,);
};
__gshared glbfn_glEnableVertexArrayAttribEXT glEnableVertexArrayAttribEXT = function void (GLuint a0, GLuint a1) nothrow {
  glEnableVertexArrayAttribEXT = cast(glbfn_glEnableVertexArrayAttribEXT)glGetProcAddress(`glEnableVertexArrayAttribEXT`);
  if (glEnableVertexArrayAttribEXT is null) assert(0, `OpenGL function 'glEnableVertexArrayAttribEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableVertexArrayAttribEXT'\n"); }
  glEnableVertexArrayAttribEXT(a0,a1,);
};
__gshared glbfn_glDisableVertexArrayAttribEXT glDisableVertexArrayAttribEXT = function void (GLuint a0, GLuint a1) nothrow {
  glDisableVertexArrayAttribEXT = cast(glbfn_glDisableVertexArrayAttribEXT)glGetProcAddress(`glDisableVertexArrayAttribEXT`);
  if (glDisableVertexArrayAttribEXT is null) assert(0, `OpenGL function 'glDisableVertexArrayAttribEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableVertexArrayAttribEXT'\n"); }
  glDisableVertexArrayAttribEXT(a0,a1,);
};
__gshared glbfn_glGetVertexArrayIntegervEXT glGetVertexArrayIntegervEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexArrayIntegervEXT = cast(glbfn_glGetVertexArrayIntegervEXT)glGetProcAddress(`glGetVertexArrayIntegervEXT`);
  if (glGetVertexArrayIntegervEXT is null) assert(0, `OpenGL function 'glGetVertexArrayIntegervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexArrayIntegervEXT'\n"); }
  glGetVertexArrayIntegervEXT(a0,a1,a2,);
};
__gshared glbfn_glGetVertexArrayPointervEXT glGetVertexArrayPointervEXT = function void (GLuint a0, GLenum a1, void** a2) nothrow {
  glGetVertexArrayPointervEXT = cast(glbfn_glGetVertexArrayPointervEXT)glGetProcAddress(`glGetVertexArrayPointervEXT`);
  if (glGetVertexArrayPointervEXT is null) assert(0, `OpenGL function 'glGetVertexArrayPointervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexArrayPointervEXT'\n"); }
  glGetVertexArrayPointervEXT(a0,a1,a2,);
};
__gshared glbfn_glGetVertexArrayIntegeri_vEXT glGetVertexArrayIntegeri_vEXT = function void (GLuint a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetVertexArrayIntegeri_vEXT = cast(glbfn_glGetVertexArrayIntegeri_vEXT)glGetProcAddress(`glGetVertexArrayIntegeri_vEXT`);
  if (glGetVertexArrayIntegeri_vEXT is null) assert(0, `OpenGL function 'glGetVertexArrayIntegeri_vEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexArrayIntegeri_vEXT'\n"); }
  glGetVertexArrayIntegeri_vEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetVertexArrayPointeri_vEXT glGetVertexArrayPointeri_vEXT = function void (GLuint a0, GLuint a1, GLenum a2, void** a3) nothrow {
  glGetVertexArrayPointeri_vEXT = cast(glbfn_glGetVertexArrayPointeri_vEXT)glGetProcAddress(`glGetVertexArrayPointeri_vEXT`);
  if (glGetVertexArrayPointeri_vEXT is null) assert(0, `OpenGL function 'glGetVertexArrayPointeri_vEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexArrayPointeri_vEXT'\n"); }
  glGetVertexArrayPointeri_vEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMapNamedBufferRangeEXT glMapNamedBufferRangeEXT = function void* (GLuint a0, GLintptr a1, GLsizeiptr a2, GLbitfield a3) nothrow {
  glMapNamedBufferRangeEXT = cast(glbfn_glMapNamedBufferRangeEXT)glGetProcAddress(`glMapNamedBufferRangeEXT`);
  if (glMapNamedBufferRangeEXT is null) assert(0, `OpenGL function 'glMapNamedBufferRangeEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapNamedBufferRangeEXT'\n"); }
  return glMapNamedBufferRangeEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glFlushMappedNamedBufferRangeEXT glFlushMappedNamedBufferRangeEXT = function void (GLuint a0, GLintptr a1, GLsizeiptr a2) nothrow {
  glFlushMappedNamedBufferRangeEXT = cast(glbfn_glFlushMappedNamedBufferRangeEXT)glGetProcAddress(`glFlushMappedNamedBufferRangeEXT`);
  if (glFlushMappedNamedBufferRangeEXT is null) assert(0, `OpenGL function 'glFlushMappedNamedBufferRangeEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushMappedNamedBufferRangeEXT'\n"); }
  glFlushMappedNamedBufferRangeEXT(a0,a1,a2,);
};
__gshared glbfn_glNamedBufferStorageEXT glNamedBufferStorageEXT = function void (GLuint a0, GLsizeiptr a1, const(void)* a2, GLbitfield a3) nothrow {
  glNamedBufferStorageEXT = cast(glbfn_glNamedBufferStorageEXT)glGetProcAddress(`glNamedBufferStorageEXT`);
  if (glNamedBufferStorageEXT is null) assert(0, `OpenGL function 'glNamedBufferStorageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedBufferStorageEXT'\n"); }
  glNamedBufferStorageEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glClearNamedBufferDataEXT glClearNamedBufferDataEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLenum a3, const(void)* a4) nothrow {
  glClearNamedBufferDataEXT = cast(glbfn_glClearNamedBufferDataEXT)glGetProcAddress(`glClearNamedBufferDataEXT`);
  if (glClearNamedBufferDataEXT is null) assert(0, `OpenGL function 'glClearNamedBufferDataEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedBufferDataEXT'\n"); }
  glClearNamedBufferDataEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glClearNamedBufferSubDataEXT glClearNamedBufferSubDataEXT = function void (GLuint a0, GLenum a1, GLsizeiptr a2, GLsizeiptr a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glClearNamedBufferSubDataEXT = cast(glbfn_glClearNamedBufferSubDataEXT)glGetProcAddress(`glClearNamedBufferSubDataEXT`);
  if (glClearNamedBufferSubDataEXT is null) assert(0, `OpenGL function 'glClearNamedBufferSubDataEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearNamedBufferSubDataEXT'\n"); }
  glClearNamedBufferSubDataEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glNamedFramebufferParameteriEXT glNamedFramebufferParameteriEXT = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glNamedFramebufferParameteriEXT = cast(glbfn_glNamedFramebufferParameteriEXT)glGetProcAddress(`glNamedFramebufferParameteriEXT`);
  if (glNamedFramebufferParameteriEXT is null) assert(0, `OpenGL function 'glNamedFramebufferParameteriEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferParameteriEXT'\n"); }
  glNamedFramebufferParameteriEXT(a0,a1,a2,);
};
__gshared glbfn_glGetNamedFramebufferParameterivEXT glGetNamedFramebufferParameterivEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetNamedFramebufferParameterivEXT = cast(glbfn_glGetNamedFramebufferParameterivEXT)glGetProcAddress(`glGetNamedFramebufferParameterivEXT`);
  if (glGetNamedFramebufferParameterivEXT is null) assert(0, `OpenGL function 'glGetNamedFramebufferParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedFramebufferParameterivEXT'\n"); }
  glGetNamedFramebufferParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform1dEXT glProgramUniform1dEXT = function void (GLuint a0, GLint a1, GLdouble a2) nothrow {
  glProgramUniform1dEXT = cast(glbfn_glProgramUniform1dEXT)glGetProcAddress(`glProgramUniform1dEXT`);
  if (glProgramUniform1dEXT is null) assert(0, `OpenGL function 'glProgramUniform1dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1dEXT'\n"); }
  glProgramUniform1dEXT(a0,a1,a2,);
};
__gshared glbfn_glProgramUniform2dEXT glProgramUniform2dEXT = function void (GLuint a0, GLint a1, GLdouble a2, GLdouble a3) nothrow {
  glProgramUniform2dEXT = cast(glbfn_glProgramUniform2dEXT)glGetProcAddress(`glProgramUniform2dEXT`);
  if (glProgramUniform2dEXT is null) assert(0, `OpenGL function 'glProgramUniform2dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2dEXT'\n"); }
  glProgramUniform2dEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3dEXT glProgramUniform3dEXT = function void (GLuint a0, GLint a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glProgramUniform3dEXT = cast(glbfn_glProgramUniform3dEXT)glGetProcAddress(`glProgramUniform3dEXT`);
  if (glProgramUniform3dEXT is null) assert(0, `OpenGL function 'glProgramUniform3dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3dEXT'\n"); }
  glProgramUniform3dEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniform4dEXT glProgramUniform4dEXT = function void (GLuint a0, GLint a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5) nothrow {
  glProgramUniform4dEXT = cast(glbfn_glProgramUniform4dEXT)glGetProcAddress(`glProgramUniform4dEXT`);
  if (glProgramUniform4dEXT is null) assert(0, `OpenGL function 'glProgramUniform4dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4dEXT'\n"); }
  glProgramUniform4dEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramUniform1dvEXT glProgramUniform1dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform1dvEXT = cast(glbfn_glProgramUniform1dvEXT)glGetProcAddress(`glProgramUniform1dvEXT`);
  if (glProgramUniform1dvEXT is null) assert(0, `OpenGL function 'glProgramUniform1dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform1dvEXT'\n"); }
  glProgramUniform1dvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform2dvEXT glProgramUniform2dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform2dvEXT = cast(glbfn_glProgramUniform2dvEXT)glGetProcAddress(`glProgramUniform2dvEXT`);
  if (glProgramUniform2dvEXT is null) assert(0, `OpenGL function 'glProgramUniform2dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform2dvEXT'\n"); }
  glProgramUniform2dvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform3dvEXT glProgramUniform3dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform3dvEXT = cast(glbfn_glProgramUniform3dvEXT)glGetProcAddress(`glProgramUniform3dvEXT`);
  if (glProgramUniform3dvEXT is null) assert(0, `OpenGL function 'glProgramUniform3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform3dvEXT'\n"); }
  glProgramUniform3dvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniform4dvEXT glProgramUniform4dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramUniform4dvEXT = cast(glbfn_glProgramUniform4dvEXT)glGetProcAddress(`glProgramUniform4dvEXT`);
  if (glProgramUniform4dvEXT is null) assert(0, `OpenGL function 'glProgramUniform4dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniform4dvEXT'\n"); }
  glProgramUniform4dvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramUniformMatrix2dvEXT glProgramUniformMatrix2dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix2dvEXT = cast(glbfn_glProgramUniformMatrix2dvEXT)glGetProcAddress(`glProgramUniformMatrix2dvEXT`);
  if (glProgramUniformMatrix2dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2dvEXT'\n"); }
  glProgramUniformMatrix2dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3dvEXT glProgramUniformMatrix3dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix3dvEXT = cast(glbfn_glProgramUniformMatrix3dvEXT)glGetProcAddress(`glProgramUniformMatrix3dvEXT`);
  if (glProgramUniformMatrix3dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3dvEXT'\n"); }
  glProgramUniformMatrix3dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4dvEXT glProgramUniformMatrix4dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix4dvEXT = cast(glbfn_glProgramUniformMatrix4dvEXT)glGetProcAddress(`glProgramUniformMatrix4dvEXT`);
  if (glProgramUniformMatrix4dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4dvEXT'\n"); }
  glProgramUniformMatrix4dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x3dvEXT glProgramUniformMatrix2x3dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix2x3dvEXT = cast(glbfn_glProgramUniformMatrix2x3dvEXT)glGetProcAddress(`glProgramUniformMatrix2x3dvEXT`);
  if (glProgramUniformMatrix2x3dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x3dvEXT'\n"); }
  glProgramUniformMatrix2x3dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix2x4dvEXT glProgramUniformMatrix2x4dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix2x4dvEXT = cast(glbfn_glProgramUniformMatrix2x4dvEXT)glGetProcAddress(`glProgramUniformMatrix2x4dvEXT`);
  if (glProgramUniformMatrix2x4dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix2x4dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix2x4dvEXT'\n"); }
  glProgramUniformMatrix2x4dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x2dvEXT glProgramUniformMatrix3x2dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix3x2dvEXT = cast(glbfn_glProgramUniformMatrix3x2dvEXT)glGetProcAddress(`glProgramUniformMatrix3x2dvEXT`);
  if (glProgramUniformMatrix3x2dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x2dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x2dvEXT'\n"); }
  glProgramUniformMatrix3x2dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix3x4dvEXT glProgramUniformMatrix3x4dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix3x4dvEXT = cast(glbfn_glProgramUniformMatrix3x4dvEXT)glGetProcAddress(`glProgramUniformMatrix3x4dvEXT`);
  if (glProgramUniformMatrix3x4dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix3x4dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix3x4dvEXT'\n"); }
  glProgramUniformMatrix3x4dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x2dvEXT glProgramUniformMatrix4x2dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix4x2dvEXT = cast(glbfn_glProgramUniformMatrix4x2dvEXT)glGetProcAddress(`glProgramUniformMatrix4x2dvEXT`);
  if (glProgramUniformMatrix4x2dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x2dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x2dvEXT'\n"); }
  glProgramUniformMatrix4x2dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramUniformMatrix4x3dvEXT glProgramUniformMatrix4x3dvEXT = function void (GLuint a0, GLint a1, GLsizei a2, GLboolean a3, const(GLdouble)* a4) nothrow {
  glProgramUniformMatrix4x3dvEXT = cast(glbfn_glProgramUniformMatrix4x3dvEXT)glGetProcAddress(`glProgramUniformMatrix4x3dvEXT`);
  if (glProgramUniformMatrix4x3dvEXT is null) assert(0, `OpenGL function 'glProgramUniformMatrix4x3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformMatrix4x3dvEXT'\n"); }
  glProgramUniformMatrix4x3dvEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTextureBufferRangeEXT glTextureBufferRangeEXT = function void (GLuint a0, GLenum a1, GLenum a2, GLuint a3, GLintptr a4, GLsizeiptr a5) nothrow {
  glTextureBufferRangeEXT = cast(glbfn_glTextureBufferRangeEXT)glGetProcAddress(`glTextureBufferRangeEXT`);
  if (glTextureBufferRangeEXT is null) assert(0, `OpenGL function 'glTextureBufferRangeEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureBufferRangeEXT'\n"); }
  glTextureBufferRangeEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTextureStorage1DEXT glTextureStorage1DEXT = function void (GLuint a0, GLenum a1, GLsizei a2, GLenum a3, GLsizei a4) nothrow {
  glTextureStorage1DEXT = cast(glbfn_glTextureStorage1DEXT)glGetProcAddress(`glTextureStorage1DEXT`);
  if (glTextureStorage1DEXT is null) assert(0, `OpenGL function 'glTextureStorage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage1DEXT'\n"); }
  glTextureStorage1DEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTextureStorage2DEXT glTextureStorage2DEXT = function void (GLuint a0, GLenum a1, GLsizei a2, GLenum a3, GLsizei a4, GLsizei a5) nothrow {
  glTextureStorage2DEXT = cast(glbfn_glTextureStorage2DEXT)glGetProcAddress(`glTextureStorage2DEXT`);
  if (glTextureStorage2DEXT is null) assert(0, `OpenGL function 'glTextureStorage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage2DEXT'\n"); }
  glTextureStorage2DEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glTextureStorage3DEXT glTextureStorage3DEXT = function void (GLuint a0, GLenum a1, GLsizei a2, GLenum a3, GLsizei a4, GLsizei a5, GLsizei a6) nothrow {
  glTextureStorage3DEXT = cast(glbfn_glTextureStorage3DEXT)glGetProcAddress(`glTextureStorage3DEXT`);
  if (glTextureStorage3DEXT is null) assert(0, `OpenGL function 'glTextureStorage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage3DEXT'\n"); }
  glTextureStorage3DEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTextureStorage2DMultisampleEXT glTextureStorage2DMultisampleEXT = function void (GLuint a0, GLenum a1, GLsizei a2, GLenum a3, GLsizei a4, GLsizei a5, GLboolean a6) nothrow {
  glTextureStorage2DMultisampleEXT = cast(glbfn_glTextureStorage2DMultisampleEXT)glGetProcAddress(`glTextureStorage2DMultisampleEXT`);
  if (glTextureStorage2DMultisampleEXT is null) assert(0, `OpenGL function 'glTextureStorage2DMultisampleEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage2DMultisampleEXT'\n"); }
  glTextureStorage2DMultisampleEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTextureStorage3DMultisampleEXT glTextureStorage3DMultisampleEXT = function void (GLuint a0, GLenum a1, GLsizei a2, GLenum a3, GLsizei a4, GLsizei a5, GLsizei a6, GLboolean a7) nothrow {
  glTextureStorage3DMultisampleEXT = cast(glbfn_glTextureStorage3DMultisampleEXT)glGetProcAddress(`glTextureStorage3DMultisampleEXT`);
  if (glTextureStorage3DMultisampleEXT is null) assert(0, `OpenGL function 'glTextureStorage3DMultisampleEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureStorage3DMultisampleEXT'\n"); }
  glTextureStorage3DMultisampleEXT(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glVertexArrayBindVertexBufferEXT glVertexArrayBindVertexBufferEXT = function void (GLuint a0, GLuint a1, GLuint a2, GLintptr a3, GLsizei a4) nothrow {
  glVertexArrayBindVertexBufferEXT = cast(glbfn_glVertexArrayBindVertexBufferEXT)glGetProcAddress(`glVertexArrayBindVertexBufferEXT`);
  if (glVertexArrayBindVertexBufferEXT is null) assert(0, `OpenGL function 'glVertexArrayBindVertexBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayBindVertexBufferEXT'\n"); }
  glVertexArrayBindVertexBufferEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayVertexAttribFormatEXT glVertexArrayVertexAttribFormatEXT = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLboolean a4, GLuint a5) nothrow {
  glVertexArrayVertexAttribFormatEXT = cast(glbfn_glVertexArrayVertexAttribFormatEXT)glGetProcAddress(`glVertexArrayVertexAttribFormatEXT`);
  if (glVertexArrayVertexAttribFormatEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribFormatEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribFormatEXT'\n"); }
  glVertexArrayVertexAttribFormatEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glVertexArrayVertexAttribIFormatEXT glVertexArrayVertexAttribIFormatEXT = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLuint a4) nothrow {
  glVertexArrayVertexAttribIFormatEXT = cast(glbfn_glVertexArrayVertexAttribIFormatEXT)glGetProcAddress(`glVertexArrayVertexAttribIFormatEXT`);
  if (glVertexArrayVertexAttribIFormatEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribIFormatEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribIFormatEXT'\n"); }
  glVertexArrayVertexAttribIFormatEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayVertexAttribLFormatEXT glVertexArrayVertexAttribLFormatEXT = function void (GLuint a0, GLuint a1, GLint a2, GLenum a3, GLuint a4) nothrow {
  glVertexArrayVertexAttribLFormatEXT = cast(glbfn_glVertexArrayVertexAttribLFormatEXT)glGetProcAddress(`glVertexArrayVertexAttribLFormatEXT`);
  if (glVertexArrayVertexAttribLFormatEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLFormatEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribLFormatEXT'\n"); }
  glVertexArrayVertexAttribLFormatEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexArrayVertexAttribBindingEXT glVertexArrayVertexAttribBindingEXT = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glVertexArrayVertexAttribBindingEXT = cast(glbfn_glVertexArrayVertexAttribBindingEXT)glGetProcAddress(`glVertexArrayVertexAttribBindingEXT`);
  if (glVertexArrayVertexAttribBindingEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribBindingEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribBindingEXT'\n"); }
  glVertexArrayVertexAttribBindingEXT(a0,a1,a2,);
};
__gshared glbfn_glVertexArrayVertexBindingDivisorEXT glVertexArrayVertexBindingDivisorEXT = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glVertexArrayVertexBindingDivisorEXT = cast(glbfn_glVertexArrayVertexBindingDivisorEXT)glGetProcAddress(`glVertexArrayVertexBindingDivisorEXT`);
  if (glVertexArrayVertexBindingDivisorEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexBindingDivisorEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexBindingDivisorEXT'\n"); }
  glVertexArrayVertexBindingDivisorEXT(a0,a1,a2,);
};
__gshared glbfn_glVertexArrayVertexAttribLOffsetEXT glVertexArrayVertexAttribLOffsetEXT = function void (GLuint a0, GLuint a1, GLuint a2, GLint a3, GLenum a4, GLsizei a5, GLintptr a6) nothrow {
  glVertexArrayVertexAttribLOffsetEXT = cast(glbfn_glVertexArrayVertexAttribLOffsetEXT)glGetProcAddress(`glVertexArrayVertexAttribLOffsetEXT`);
  if (glVertexArrayVertexAttribLOffsetEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribLOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribLOffsetEXT'\n"); }
  glVertexArrayVertexAttribLOffsetEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTexturePageCommitmentEXT glTexturePageCommitmentEXT = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLboolean a8) nothrow {
  glTexturePageCommitmentEXT = cast(glbfn_glTexturePageCommitmentEXT)glGetProcAddress(`glTexturePageCommitmentEXT`);
  if (glTexturePageCommitmentEXT is null) assert(0, `OpenGL function 'glTexturePageCommitmentEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexturePageCommitmentEXT'\n"); }
  glTexturePageCommitmentEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glVertexArrayVertexAttribDivisorEXT glVertexArrayVertexAttribDivisorEXT = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glVertexArrayVertexAttribDivisorEXT = cast(glbfn_glVertexArrayVertexAttribDivisorEXT)glGetProcAddress(`glVertexArrayVertexAttribDivisorEXT`);
  if (glVertexArrayVertexAttribDivisorEXT is null) assert(0, `OpenGL function 'glVertexArrayVertexAttribDivisorEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayVertexAttribDivisorEXT'\n"); }
  glVertexArrayVertexAttribDivisorEXT(a0,a1,a2,);
};
__gshared glbfn_glColorMaskIndexedEXT glColorMaskIndexedEXT = function void (GLuint a0, GLboolean a1, GLboolean a2, GLboolean a3, GLboolean a4) nothrow {
  glColorMaskIndexedEXT = cast(glbfn_glColorMaskIndexedEXT)glGetProcAddress(`glColorMaskIndexedEXT`);
  if (glColorMaskIndexedEXT is null) assert(0, `OpenGL function 'glColorMaskIndexedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorMaskIndexedEXT'\n"); }
  glColorMaskIndexedEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawArraysInstancedEXT glDrawArraysInstancedEXT = function void (GLenum a0, GLint a1, GLsizei a2, GLsizei a3) nothrow {
  glDrawArraysInstancedEXT = cast(glbfn_glDrawArraysInstancedEXT)glGetProcAddress(`glDrawArraysInstancedEXT`);
  if (glDrawArraysInstancedEXT is null) assert(0, `OpenGL function 'glDrawArraysInstancedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawArraysInstancedEXT'\n"); }
  glDrawArraysInstancedEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glDrawElementsInstancedEXT glDrawElementsInstancedEXT = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLsizei a4) nothrow {
  glDrawElementsInstancedEXT = cast(glbfn_glDrawElementsInstancedEXT)glGetProcAddress(`glDrawElementsInstancedEXT`);
  if (glDrawElementsInstancedEXT is null) assert(0, `OpenGL function 'glDrawElementsInstancedEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawElementsInstancedEXT'\n"); }
  glDrawElementsInstancedEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawRangeElementsEXT glDrawRangeElementsEXT = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3, GLenum a4, const(void)* a5) nothrow {
  glDrawRangeElementsEXT = cast(glbfn_glDrawRangeElementsEXT)glGetProcAddress(`glDrawRangeElementsEXT`);
  if (glDrawRangeElementsEXT is null) assert(0, `OpenGL function 'glDrawRangeElementsEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawRangeElementsEXT'\n"); }
  glDrawRangeElementsEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glFogCoordfEXT glFogCoordfEXT = function void (GLfloat a0) nothrow {
  glFogCoordfEXT = cast(glbfn_glFogCoordfEXT)glGetProcAddress(`glFogCoordfEXT`);
  if (glFogCoordfEXT is null) assert(0, `OpenGL function 'glFogCoordfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordfEXT'\n"); }
  glFogCoordfEXT(a0,);
};
__gshared glbfn_glFogCoordfvEXT glFogCoordfvEXT = function void (const(GLfloat)* a0) nothrow {
  glFogCoordfvEXT = cast(glbfn_glFogCoordfvEXT)glGetProcAddress(`glFogCoordfvEXT`);
  if (glFogCoordfvEXT is null) assert(0, `OpenGL function 'glFogCoordfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordfvEXT'\n"); }
  glFogCoordfvEXT(a0,);
};
__gshared glbfn_glFogCoorddEXT glFogCoorddEXT = function void (GLdouble a0) nothrow {
  glFogCoorddEXT = cast(glbfn_glFogCoorddEXT)glGetProcAddress(`glFogCoorddEXT`);
  if (glFogCoorddEXT is null) assert(0, `OpenGL function 'glFogCoorddEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoorddEXT'\n"); }
  glFogCoorddEXT(a0,);
};
__gshared glbfn_glFogCoorddvEXT glFogCoorddvEXT = function void (const(GLdouble)* a0) nothrow {
  glFogCoorddvEXT = cast(glbfn_glFogCoorddvEXT)glGetProcAddress(`glFogCoorddvEXT`);
  if (glFogCoorddvEXT is null) assert(0, `OpenGL function 'glFogCoorddvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoorddvEXT'\n"); }
  glFogCoorddvEXT(a0,);
};
__gshared glbfn_glFogCoordPointerEXT glFogCoordPointerEXT = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glFogCoordPointerEXT = cast(glbfn_glFogCoordPointerEXT)glGetProcAddress(`glFogCoordPointerEXT`);
  if (glFogCoordPointerEXT is null) assert(0, `OpenGL function 'glFogCoordPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordPointerEXT'\n"); }
  glFogCoordPointerEXT(a0,a1,a2,);
};
__gshared glbfn_glBlitFramebufferEXT glBlitFramebufferEXT = function void (GLint a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLint a6, GLint a7, GLbitfield a8, GLenum a9) nothrow {
  glBlitFramebufferEXT = cast(glbfn_glBlitFramebufferEXT)glGetProcAddress(`glBlitFramebufferEXT`);
  if (glBlitFramebufferEXT is null) assert(0, `OpenGL function 'glBlitFramebufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlitFramebufferEXT'\n"); }
  glBlitFramebufferEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glRenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT = function void (GLenum a0, GLsizei a1, GLenum a2, GLsizei a3, GLsizei a4) nothrow {
  glRenderbufferStorageMultisampleEXT = cast(glbfn_glRenderbufferStorageMultisampleEXT)glGetProcAddress(`glRenderbufferStorageMultisampleEXT`);
  if (glRenderbufferStorageMultisampleEXT is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRenderbufferStorageMultisampleEXT'\n"); }
  glRenderbufferStorageMultisampleEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glIsRenderbufferEXT glIsRenderbufferEXT = function GLboolean (GLuint a0) nothrow {
  glIsRenderbufferEXT = cast(glbfn_glIsRenderbufferEXT)glGetProcAddress(`glIsRenderbufferEXT`);
  if (glIsRenderbufferEXT is null) assert(0, `OpenGL function 'glIsRenderbufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsRenderbufferEXT'\n"); }
  return glIsRenderbufferEXT(a0,);
};
__gshared glbfn_glBindRenderbufferEXT glBindRenderbufferEXT = function void (GLenum a0, GLuint a1) nothrow {
  glBindRenderbufferEXT = cast(glbfn_glBindRenderbufferEXT)glGetProcAddress(`glBindRenderbufferEXT`);
  if (glBindRenderbufferEXT is null) assert(0, `OpenGL function 'glBindRenderbufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindRenderbufferEXT'\n"); }
  glBindRenderbufferEXT(a0,a1,);
};
__gshared glbfn_glDeleteRenderbuffersEXT glDeleteRenderbuffersEXT = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteRenderbuffersEXT = cast(glbfn_glDeleteRenderbuffersEXT)glGetProcAddress(`glDeleteRenderbuffersEXT`);
  if (glDeleteRenderbuffersEXT is null) assert(0, `OpenGL function 'glDeleteRenderbuffersEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteRenderbuffersEXT'\n"); }
  glDeleteRenderbuffersEXT(a0,a1,);
};
__gshared glbfn_glGenRenderbuffersEXT glGenRenderbuffersEXT = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenRenderbuffersEXT = cast(glbfn_glGenRenderbuffersEXT)glGetProcAddress(`glGenRenderbuffersEXT`);
  if (glGenRenderbuffersEXT is null) assert(0, `OpenGL function 'glGenRenderbuffersEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenRenderbuffersEXT'\n"); }
  glGenRenderbuffersEXT(a0,a1,);
};
__gshared glbfn_glRenderbufferStorageEXT glRenderbufferStorageEXT = function void (GLenum a0, GLenum a1, GLsizei a2, GLsizei a3) nothrow {
  glRenderbufferStorageEXT = cast(glbfn_glRenderbufferStorageEXT)glGetProcAddress(`glRenderbufferStorageEXT`);
  if (glRenderbufferStorageEXT is null) assert(0, `OpenGL function 'glRenderbufferStorageEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRenderbufferStorageEXT'\n"); }
  glRenderbufferStorageEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetRenderbufferParameterivEXT = cast(glbfn_glGetRenderbufferParameterivEXT)glGetProcAddress(`glGetRenderbufferParameterivEXT`);
  if (glGetRenderbufferParameterivEXT is null) assert(0, `OpenGL function 'glGetRenderbufferParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetRenderbufferParameterivEXT'\n"); }
  glGetRenderbufferParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glIsFramebufferEXT glIsFramebufferEXT = function GLboolean (GLuint a0) nothrow {
  glIsFramebufferEXT = cast(glbfn_glIsFramebufferEXT)glGetProcAddress(`glIsFramebufferEXT`);
  if (glIsFramebufferEXT is null) assert(0, `OpenGL function 'glIsFramebufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsFramebufferEXT'\n"); }
  return glIsFramebufferEXT(a0,);
};
__gshared glbfn_glBindFramebufferEXT glBindFramebufferEXT = function void (GLenum a0, GLuint a1) nothrow {
  glBindFramebufferEXT = cast(glbfn_glBindFramebufferEXT)glGetProcAddress(`glBindFramebufferEXT`);
  if (glBindFramebufferEXT is null) assert(0, `OpenGL function 'glBindFramebufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindFramebufferEXT'\n"); }
  glBindFramebufferEXT(a0,a1,);
};
__gshared glbfn_glDeleteFramebuffersEXT glDeleteFramebuffersEXT = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteFramebuffersEXT = cast(glbfn_glDeleteFramebuffersEXT)glGetProcAddress(`glDeleteFramebuffersEXT`);
  if (glDeleteFramebuffersEXT is null) assert(0, `OpenGL function 'glDeleteFramebuffersEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteFramebuffersEXT'\n"); }
  glDeleteFramebuffersEXT(a0,a1,);
};
__gshared glbfn_glGenFramebuffersEXT glGenFramebuffersEXT = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenFramebuffersEXT = cast(glbfn_glGenFramebuffersEXT)glGetProcAddress(`glGenFramebuffersEXT`);
  if (glGenFramebuffersEXT is null) assert(0, `OpenGL function 'glGenFramebuffersEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenFramebuffersEXT'\n"); }
  glGenFramebuffersEXT(a0,a1,);
};
__gshared glbfn_glCheckFramebufferStatusEXT glCheckFramebufferStatusEXT = function GLenum (GLenum a0) nothrow {
  glCheckFramebufferStatusEXT = cast(glbfn_glCheckFramebufferStatusEXT)glGetProcAddress(`glCheckFramebufferStatusEXT`);
  if (glCheckFramebufferStatusEXT is null) assert(0, `OpenGL function 'glCheckFramebufferStatusEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCheckFramebufferStatusEXT'\n"); }
  return glCheckFramebufferStatusEXT(a0,);
};
__gshared glbfn_glFramebufferTexture1DEXT glFramebufferTexture1DEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3, GLint a4) nothrow {
  glFramebufferTexture1DEXT = cast(glbfn_glFramebufferTexture1DEXT)glGetProcAddress(`glFramebufferTexture1DEXT`);
  if (glFramebufferTexture1DEXT is null) assert(0, `OpenGL function 'glFramebufferTexture1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTexture1DEXT'\n"); }
  glFramebufferTexture1DEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glFramebufferTexture2DEXT glFramebufferTexture2DEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3, GLint a4) nothrow {
  glFramebufferTexture2DEXT = cast(glbfn_glFramebufferTexture2DEXT)glGetProcAddress(`glFramebufferTexture2DEXT`);
  if (glFramebufferTexture2DEXT is null) assert(0, `OpenGL function 'glFramebufferTexture2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTexture2DEXT'\n"); }
  glFramebufferTexture2DEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glFramebufferTexture3DEXT glFramebufferTexture3DEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3, GLint a4, GLint a5) nothrow {
  glFramebufferTexture3DEXT = cast(glbfn_glFramebufferTexture3DEXT)glGetProcAddress(`glFramebufferTexture3DEXT`);
  if (glFramebufferTexture3DEXT is null) assert(0, `OpenGL function 'glFramebufferTexture3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTexture3DEXT'\n"); }
  glFramebufferTexture3DEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glFramebufferRenderbufferEXT glFramebufferRenderbufferEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLuint a3) nothrow {
  glFramebufferRenderbufferEXT = cast(glbfn_glFramebufferRenderbufferEXT)glGetProcAddress(`glFramebufferRenderbufferEXT`);
  if (glFramebufferRenderbufferEXT is null) assert(0, `OpenGL function 'glFramebufferRenderbufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferRenderbufferEXT'\n"); }
  glFramebufferRenderbufferEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT = function void (GLenum a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetFramebufferAttachmentParameterivEXT = cast(glbfn_glGetFramebufferAttachmentParameterivEXT)glGetProcAddress(`glGetFramebufferAttachmentParameterivEXT`);
  if (glGetFramebufferAttachmentParameterivEXT is null) assert(0, `OpenGL function 'glGetFramebufferAttachmentParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFramebufferAttachmentParameterivEXT'\n"); }
  glGetFramebufferAttachmentParameterivEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGenerateMipmapEXT glGenerateMipmapEXT = function void (GLenum a0) nothrow {
  glGenerateMipmapEXT = cast(glbfn_glGenerateMipmapEXT)glGetProcAddress(`glGenerateMipmapEXT`);
  if (glGenerateMipmapEXT is null) assert(0, `OpenGL function 'glGenerateMipmapEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenerateMipmapEXT'\n"); }
  glGenerateMipmapEXT(a0,);
};
__gshared glbfn_glProgramParameteriEXT glProgramParameteriEXT = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glProgramParameteriEXT = cast(glbfn_glProgramParameteriEXT)glGetProcAddress(`glProgramParameteriEXT`);
  if (glProgramParameteriEXT is null) assert(0, `OpenGL function 'glProgramParameteriEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameteriEXT'\n"); }
  glProgramParameteriEXT(a0,a1,a2,);
};
__gshared glbfn_glProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramEnvParameters4fvEXT = cast(glbfn_glProgramEnvParameters4fvEXT)glGetProcAddress(`glProgramEnvParameters4fvEXT`);
  if (glProgramEnvParameters4fvEXT is null) assert(0, `OpenGL function 'glProgramEnvParameters4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameters4fvEXT'\n"); }
  glProgramEnvParameters4fvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramLocalParameters4fvEXT = cast(glbfn_glProgramLocalParameters4fvEXT)glGetProcAddress(`glProgramLocalParameters4fvEXT`);
  if (glProgramLocalParameters4fvEXT is null) assert(0, `OpenGL function 'glProgramLocalParameters4fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameters4fvEXT'\n"); }
  glProgramLocalParameters4fvEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetUniformuivEXT glGetUniformuivEXT = function void (GLuint a0, GLint a1, GLuint* a2) nothrow {
  glGetUniformuivEXT = cast(glbfn_glGetUniformuivEXT)glGetProcAddress(`glGetUniformuivEXT`);
  if (glGetUniformuivEXT is null) assert(0, `OpenGL function 'glGetUniformuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetUniformuivEXT'\n"); }
  glGetUniformuivEXT(a0,a1,a2,);
};
__gshared glbfn_glBindFragDataLocationEXT glBindFragDataLocationEXT = function void (GLuint a0, GLuint a1, const(GLchar)* a2) nothrow {
  glBindFragDataLocationEXT = cast(glbfn_glBindFragDataLocationEXT)glGetProcAddress(`glBindFragDataLocationEXT`);
  if (glBindFragDataLocationEXT is null) assert(0, `OpenGL function 'glBindFragDataLocationEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindFragDataLocationEXT'\n"); }
  glBindFragDataLocationEXT(a0,a1,a2,);
};
__gshared glbfn_glGetFragDataLocationEXT glGetFragDataLocationEXT = function GLint (GLuint a0, const(GLchar)* a1) nothrow {
  glGetFragDataLocationEXT = cast(glbfn_glGetFragDataLocationEXT)glGetProcAddress(`glGetFragDataLocationEXT`);
  if (glGetFragDataLocationEXT is null) assert(0, `OpenGL function 'glGetFragDataLocationEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFragDataLocationEXT'\n"); }
  return glGetFragDataLocationEXT(a0,a1,);
};
__gshared glbfn_glUniform1uiEXT glUniform1uiEXT = function void (GLint a0, GLuint a1) nothrow {
  glUniform1uiEXT = cast(glbfn_glUniform1uiEXT)glGetProcAddress(`glUniform1uiEXT`);
  if (glUniform1uiEXT is null) assert(0, `OpenGL function 'glUniform1uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1uiEXT'\n"); }
  glUniform1uiEXT(a0,a1,);
};
__gshared glbfn_glUniform2uiEXT glUniform2uiEXT = function void (GLint a0, GLuint a1, GLuint a2) nothrow {
  glUniform2uiEXT = cast(glbfn_glUniform2uiEXT)glGetProcAddress(`glUniform2uiEXT`);
  if (glUniform2uiEXT is null) assert(0, `OpenGL function 'glUniform2uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2uiEXT'\n"); }
  glUniform2uiEXT(a0,a1,a2,);
};
__gshared glbfn_glUniform3uiEXT glUniform3uiEXT = function void (GLint a0, GLuint a1, GLuint a2, GLuint a3) nothrow {
  glUniform3uiEXT = cast(glbfn_glUniform3uiEXT)glGetProcAddress(`glUniform3uiEXT`);
  if (glUniform3uiEXT is null) assert(0, `OpenGL function 'glUniform3uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3uiEXT'\n"); }
  glUniform3uiEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glUniform4uiEXT glUniform4uiEXT = function void (GLint a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4) nothrow {
  glUniform4uiEXT = cast(glbfn_glUniform4uiEXT)glGetProcAddress(`glUniform4uiEXT`);
  if (glUniform4uiEXT is null) assert(0, `OpenGL function 'glUniform4uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4uiEXT'\n"); }
  glUniform4uiEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glUniform1uivEXT glUniform1uivEXT = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform1uivEXT = cast(glbfn_glUniform1uivEXT)glGetProcAddress(`glUniform1uivEXT`);
  if (glUniform1uivEXT is null) assert(0, `OpenGL function 'glUniform1uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform1uivEXT'\n"); }
  glUniform1uivEXT(a0,a1,a2,);
};
__gshared glbfn_glUniform2uivEXT glUniform2uivEXT = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform2uivEXT = cast(glbfn_glUniform2uivEXT)glGetProcAddress(`glUniform2uivEXT`);
  if (glUniform2uivEXT is null) assert(0, `OpenGL function 'glUniform2uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform2uivEXT'\n"); }
  glUniform2uivEXT(a0,a1,a2,);
};
__gshared glbfn_glUniform3uivEXT glUniform3uivEXT = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform3uivEXT = cast(glbfn_glUniform3uivEXT)glGetProcAddress(`glUniform3uivEXT`);
  if (glUniform3uivEXT is null) assert(0, `OpenGL function 'glUniform3uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform3uivEXT'\n"); }
  glUniform3uivEXT(a0,a1,a2,);
};
__gshared glbfn_glUniform4uivEXT glUniform4uivEXT = function void (GLint a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glUniform4uivEXT = cast(glbfn_glUniform4uivEXT)glGetProcAddress(`glUniform4uivEXT`);
  if (glUniform4uivEXT is null) assert(0, `OpenGL function 'glUniform4uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniform4uivEXT'\n"); }
  glUniform4uivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetHistogramEXT glGetHistogramEXT = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, void* a4) nothrow {
  glGetHistogramEXT = cast(glbfn_glGetHistogramEXT)glGetProcAddress(`glGetHistogramEXT`);
  if (glGetHistogramEXT is null) assert(0, `OpenGL function 'glGetHistogramEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHistogramEXT'\n"); }
  glGetHistogramEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetHistogramParameterfvEXT glGetHistogramParameterfvEXT = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetHistogramParameterfvEXT = cast(glbfn_glGetHistogramParameterfvEXT)glGetProcAddress(`glGetHistogramParameterfvEXT`);
  if (glGetHistogramParameterfvEXT is null) assert(0, `OpenGL function 'glGetHistogramParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHistogramParameterfvEXT'\n"); }
  glGetHistogramParameterfvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetHistogramParameterivEXT glGetHistogramParameterivEXT = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetHistogramParameterivEXT = cast(glbfn_glGetHistogramParameterivEXT)glGetProcAddress(`glGetHistogramParameterivEXT`);
  if (glGetHistogramParameterivEXT is null) assert(0, `OpenGL function 'glGetHistogramParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHistogramParameterivEXT'\n"); }
  glGetHistogramParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetMinmaxEXT glGetMinmaxEXT = function void (GLenum a0, GLboolean a1, GLenum a2, GLenum a3, void* a4) nothrow {
  glGetMinmaxEXT = cast(glbfn_glGetMinmaxEXT)glGetProcAddress(`glGetMinmaxEXT`);
  if (glGetMinmaxEXT is null) assert(0, `OpenGL function 'glGetMinmaxEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMinmaxEXT'\n"); }
  glGetMinmaxEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetMinmaxParameterfvEXT = cast(glbfn_glGetMinmaxParameterfvEXT)glGetProcAddress(`glGetMinmaxParameterfvEXT`);
  if (glGetMinmaxParameterfvEXT is null) assert(0, `OpenGL function 'glGetMinmaxParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMinmaxParameterfvEXT'\n"); }
  glGetMinmaxParameterfvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetMinmaxParameterivEXT glGetMinmaxParameterivEXT = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetMinmaxParameterivEXT = cast(glbfn_glGetMinmaxParameterivEXT)glGetProcAddress(`glGetMinmaxParameterivEXT`);
  if (glGetMinmaxParameterivEXT is null) assert(0, `OpenGL function 'glGetMinmaxParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMinmaxParameterivEXT'\n"); }
  glGetMinmaxParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glHistogramEXT glHistogramEXT = function void (GLenum a0, GLsizei a1, GLenum a2, GLboolean a3) nothrow {
  glHistogramEXT = cast(glbfn_glHistogramEXT)glGetProcAddress(`glHistogramEXT`);
  if (glHistogramEXT is null) assert(0, `OpenGL function 'glHistogramEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glHistogramEXT'\n"); }
  glHistogramEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMinmaxEXT glMinmaxEXT = function void (GLenum a0, GLenum a1, GLboolean a2) nothrow {
  glMinmaxEXT = cast(glbfn_glMinmaxEXT)glGetProcAddress(`glMinmaxEXT`);
  if (glMinmaxEXT is null) assert(0, `OpenGL function 'glMinmaxEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMinmaxEXT'\n"); }
  glMinmaxEXT(a0,a1,a2,);
};
__gshared glbfn_glResetHistogramEXT glResetHistogramEXT = function void (GLenum a0) nothrow {
  glResetHistogramEXT = cast(glbfn_glResetHistogramEXT)glGetProcAddress(`glResetHistogramEXT`);
  if (glResetHistogramEXT is null) assert(0, `OpenGL function 'glResetHistogramEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResetHistogramEXT'\n"); }
  glResetHistogramEXT(a0,);
};
__gshared glbfn_glResetMinmaxEXT glResetMinmaxEXT = function void (GLenum a0) nothrow {
  glResetMinmaxEXT = cast(glbfn_glResetMinmaxEXT)glGetProcAddress(`glResetMinmaxEXT`);
  if (glResetMinmaxEXT is null) assert(0, `OpenGL function 'glResetMinmaxEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResetMinmaxEXT'\n"); }
  glResetMinmaxEXT(a0,);
};
__gshared glbfn_glIndexFuncEXT glIndexFuncEXT = function void (GLenum a0, GLclampf a1) nothrow {
  glIndexFuncEXT = cast(glbfn_glIndexFuncEXT)glGetProcAddress(`glIndexFuncEXT`);
  if (glIndexFuncEXT is null) assert(0, `OpenGL function 'glIndexFuncEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexFuncEXT'\n"); }
  glIndexFuncEXT(a0,a1,);
};
__gshared glbfn_glIndexMaterialEXT glIndexMaterialEXT = function void (GLenum a0, GLenum a1) nothrow {
  glIndexMaterialEXT = cast(glbfn_glIndexMaterialEXT)glGetProcAddress(`glIndexMaterialEXT`);
  if (glIndexMaterialEXT is null) assert(0, `OpenGL function 'glIndexMaterialEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexMaterialEXT'\n"); }
  glIndexMaterialEXT(a0,a1,);
};
__gshared glbfn_glApplyTextureEXT glApplyTextureEXT = function void (GLenum a0) nothrow {
  glApplyTextureEXT = cast(glbfn_glApplyTextureEXT)glGetProcAddress(`glApplyTextureEXT`);
  if (glApplyTextureEXT is null) assert(0, `OpenGL function 'glApplyTextureEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glApplyTextureEXT'\n"); }
  glApplyTextureEXT(a0,);
};
__gshared glbfn_glTextureLightEXT glTextureLightEXT = function void (GLenum a0) nothrow {
  glTextureLightEXT = cast(glbfn_glTextureLightEXT)glGetProcAddress(`glTextureLightEXT`);
  if (glTextureLightEXT is null) assert(0, `OpenGL function 'glTextureLightEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureLightEXT'\n"); }
  glTextureLightEXT(a0,);
};
__gshared glbfn_glTextureMaterialEXT glTextureMaterialEXT = function void (GLenum a0, GLenum a1) nothrow {
  glTextureMaterialEXT = cast(glbfn_glTextureMaterialEXT)glGetProcAddress(`glTextureMaterialEXT`);
  if (glTextureMaterialEXT is null) assert(0, `OpenGL function 'glTextureMaterialEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureMaterialEXT'\n"); }
  glTextureMaterialEXT(a0,a1,);
};
__gshared glbfn_glMultiDrawArraysEXT glMultiDrawArraysEXT = function void (GLenum a0, const(GLint)* a1, const(GLsizei)* a2, GLsizei a3) nothrow {
  glMultiDrawArraysEXT = cast(glbfn_glMultiDrawArraysEXT)glGetProcAddress(`glMultiDrawArraysEXT`);
  if (glMultiDrawArraysEXT is null) assert(0, `OpenGL function 'glMultiDrawArraysEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawArraysEXT'\n"); }
  glMultiDrawArraysEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiDrawElementsEXT glMultiDrawElementsEXT = function void (GLenum a0, const(GLsizei)* a1, GLenum a2, const(void*)* a3, GLsizei a4) nothrow {
  glMultiDrawElementsEXT = cast(glbfn_glMultiDrawElementsEXT)glGetProcAddress(`glMultiDrawElementsEXT`);
  if (glMultiDrawElementsEXT is null) assert(0, `OpenGL function 'glMultiDrawElementsEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementsEXT'\n"); }
  glMultiDrawElementsEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glSampleMaskEXT glSampleMaskEXT = function void (GLclampf a0, GLboolean a1) nothrow {
  glSampleMaskEXT = cast(glbfn_glSampleMaskEXT)glGetProcAddress(`glSampleMaskEXT`);
  if (glSampleMaskEXT is null) assert(0, `OpenGL function 'glSampleMaskEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleMaskEXT'\n"); }
  glSampleMaskEXT(a0,a1,);
};
__gshared glbfn_glSamplePatternEXT glSamplePatternEXT = function void (GLenum a0) nothrow {
  glSamplePatternEXT = cast(glbfn_glSamplePatternEXT)glGetProcAddress(`glSamplePatternEXT`);
  if (glSamplePatternEXT is null) assert(0, `OpenGL function 'glSamplePatternEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplePatternEXT'\n"); }
  glSamplePatternEXT(a0,);
};
__gshared glbfn_glColorTableEXT glColorTableEXT = function void (GLenum a0, GLenum a1, GLsizei a2, GLenum a3, GLenum a4, const(void)* a5) nothrow {
  glColorTableEXT = cast(glbfn_glColorTableEXT)glGetProcAddress(`glColorTableEXT`);
  if (glColorTableEXT is null) assert(0, `OpenGL function 'glColorTableEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorTableEXT'\n"); }
  glColorTableEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetColorTableEXT glGetColorTableEXT = function void (GLenum a0, GLenum a1, GLenum a2, void* a3) nothrow {
  glGetColorTableEXT = cast(glbfn_glGetColorTableEXT)glGetProcAddress(`glGetColorTableEXT`);
  if (glGetColorTableEXT is null) assert(0, `OpenGL function 'glGetColorTableEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableEXT'\n"); }
  glGetColorTableEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetColorTableParameterivEXT glGetColorTableParameterivEXT = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetColorTableParameterivEXT = cast(glbfn_glGetColorTableParameterivEXT)glGetProcAddress(`glGetColorTableParameterivEXT`);
  if (glGetColorTableParameterivEXT is null) assert(0, `OpenGL function 'glGetColorTableParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableParameterivEXT'\n"); }
  glGetColorTableParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetColorTableParameterfvEXT glGetColorTableParameterfvEXT = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetColorTableParameterfvEXT = cast(glbfn_glGetColorTableParameterfvEXT)glGetProcAddress(`glGetColorTableParameterfvEXT`);
  if (glGetColorTableParameterfvEXT is null) assert(0, `OpenGL function 'glGetColorTableParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableParameterfvEXT'\n"); }
  glGetColorTableParameterfvEXT(a0,a1,a2,);
};
__gshared glbfn_glPixelTransformParameteriEXT glPixelTransformParameteriEXT = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glPixelTransformParameteriEXT = cast(glbfn_glPixelTransformParameteriEXT)glGetProcAddress(`glPixelTransformParameteriEXT`);
  if (glPixelTransformParameteriEXT is null) assert(0, `OpenGL function 'glPixelTransformParameteriEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTransformParameteriEXT'\n"); }
  glPixelTransformParameteriEXT(a0,a1,a2,);
};
__gshared glbfn_glPixelTransformParameterfEXT glPixelTransformParameterfEXT = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glPixelTransformParameterfEXT = cast(glbfn_glPixelTransformParameterfEXT)glGetProcAddress(`glPixelTransformParameterfEXT`);
  if (glPixelTransformParameterfEXT is null) assert(0, `OpenGL function 'glPixelTransformParameterfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTransformParameterfEXT'\n"); }
  glPixelTransformParameterfEXT(a0,a1,a2,);
};
__gshared glbfn_glPixelTransformParameterivEXT glPixelTransformParameterivEXT = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glPixelTransformParameterivEXT = cast(glbfn_glPixelTransformParameterivEXT)glGetProcAddress(`glPixelTransformParameterivEXT`);
  if (glPixelTransformParameterivEXT is null) assert(0, `OpenGL function 'glPixelTransformParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTransformParameterivEXT'\n"); }
  glPixelTransformParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glPixelTransformParameterfvEXT glPixelTransformParameterfvEXT = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glPixelTransformParameterfvEXT = cast(glbfn_glPixelTransformParameterfvEXT)glGetProcAddress(`glPixelTransformParameterfvEXT`);
  if (glPixelTransformParameterfvEXT is null) assert(0, `OpenGL function 'glPixelTransformParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTransformParameterfvEXT'\n"); }
  glPixelTransformParameterfvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetPixelTransformParameterivEXT glGetPixelTransformParameterivEXT = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetPixelTransformParameterivEXT = cast(glbfn_glGetPixelTransformParameterivEXT)glGetProcAddress(`glGetPixelTransformParameterivEXT`);
  if (glGetPixelTransformParameterivEXT is null) assert(0, `OpenGL function 'glGetPixelTransformParameterivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelTransformParameterivEXT'\n"); }
  glGetPixelTransformParameterivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetPixelTransformParameterfvEXT glGetPixelTransformParameterfvEXT = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetPixelTransformParameterfvEXT = cast(glbfn_glGetPixelTransformParameterfvEXT)glGetProcAddress(`glGetPixelTransformParameterfvEXT`);
  if (glGetPixelTransformParameterfvEXT is null) assert(0, `OpenGL function 'glGetPixelTransformParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelTransformParameterfvEXT'\n"); }
  glGetPixelTransformParameterfvEXT(a0,a1,a2,);
};
__gshared glbfn_glPointParameterfEXT glPointParameterfEXT = function void (GLenum a0, GLfloat a1) nothrow {
  glPointParameterfEXT = cast(glbfn_glPointParameterfEXT)glGetProcAddress(`glPointParameterfEXT`);
  if (glPointParameterfEXT is null) assert(0, `OpenGL function 'glPointParameterfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterfEXT'\n"); }
  glPointParameterfEXT(a0,a1,);
};
__gshared glbfn_glPointParameterfvEXT glPointParameterfvEXT = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glPointParameterfvEXT = cast(glbfn_glPointParameterfvEXT)glGetProcAddress(`glPointParameterfvEXT`);
  if (glPointParameterfvEXT is null) assert(0, `OpenGL function 'glPointParameterfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterfvEXT'\n"); }
  glPointParameterfvEXT(a0,a1,);
};
__gshared glbfn_glPolygonOffsetEXT glPolygonOffsetEXT = function void (GLfloat a0, GLfloat a1) nothrow {
  glPolygonOffsetEXT = cast(glbfn_glPolygonOffsetEXT)glGetProcAddress(`glPolygonOffsetEXT`);
  if (glPolygonOffsetEXT is null) assert(0, `OpenGL function 'glPolygonOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPolygonOffsetEXT'\n"); }
  glPolygonOffsetEXT(a0,a1,);
};
__gshared glbfn_glPolygonOffsetClampEXT glPolygonOffsetClampEXT = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glPolygonOffsetClampEXT = cast(glbfn_glPolygonOffsetClampEXT)glGetProcAddress(`glPolygonOffsetClampEXT`);
  if (glPolygonOffsetClampEXT is null) assert(0, `OpenGL function 'glPolygonOffsetClampEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPolygonOffsetClampEXT'\n"); }
  glPolygonOffsetClampEXT(a0,a1,a2,);
};
__gshared glbfn_glProvokingVertexEXT glProvokingVertexEXT = function void (GLenum a0) nothrow {
  glProvokingVertexEXT = cast(glbfn_glProvokingVertexEXT)glGetProcAddress(`glProvokingVertexEXT`);
  if (glProvokingVertexEXT is null) assert(0, `OpenGL function 'glProvokingVertexEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProvokingVertexEXT'\n"); }
  glProvokingVertexEXT(a0,);
};
__gshared glbfn_glRasterSamplesEXT glRasterSamplesEXT = function void (GLuint a0, GLboolean a1) nothrow {
  glRasterSamplesEXT = cast(glbfn_glRasterSamplesEXT)glGetProcAddress(`glRasterSamplesEXT`);
  if (glRasterSamplesEXT is null) assert(0, `OpenGL function 'glRasterSamplesEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterSamplesEXT'\n"); }
  glRasterSamplesEXT(a0,a1,);
};
__gshared glbfn_glSecondaryColor3bEXT glSecondaryColor3bEXT = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glSecondaryColor3bEXT = cast(glbfn_glSecondaryColor3bEXT)glGetProcAddress(`glSecondaryColor3bEXT`);
  if (glSecondaryColor3bEXT is null) assert(0, `OpenGL function 'glSecondaryColor3bEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3bEXT'\n"); }
  glSecondaryColor3bEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3bvEXT glSecondaryColor3bvEXT = function void (const(GLbyte)* a0) nothrow {
  glSecondaryColor3bvEXT = cast(glbfn_glSecondaryColor3bvEXT)glGetProcAddress(`glSecondaryColor3bvEXT`);
  if (glSecondaryColor3bvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3bvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3bvEXT'\n"); }
  glSecondaryColor3bvEXT(a0,);
};
__gshared glbfn_glSecondaryColor3dEXT glSecondaryColor3dEXT = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glSecondaryColor3dEXT = cast(glbfn_glSecondaryColor3dEXT)glGetProcAddress(`glSecondaryColor3dEXT`);
  if (glSecondaryColor3dEXT is null) assert(0, `OpenGL function 'glSecondaryColor3dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3dEXT'\n"); }
  glSecondaryColor3dEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3dvEXT glSecondaryColor3dvEXT = function void (const(GLdouble)* a0) nothrow {
  glSecondaryColor3dvEXT = cast(glbfn_glSecondaryColor3dvEXT)glGetProcAddress(`glSecondaryColor3dvEXT`);
  if (glSecondaryColor3dvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3dvEXT'\n"); }
  glSecondaryColor3dvEXT(a0,);
};
__gshared glbfn_glSecondaryColor3fEXT glSecondaryColor3fEXT = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glSecondaryColor3fEXT = cast(glbfn_glSecondaryColor3fEXT)glGetProcAddress(`glSecondaryColor3fEXT`);
  if (glSecondaryColor3fEXT is null) assert(0, `OpenGL function 'glSecondaryColor3fEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3fEXT'\n"); }
  glSecondaryColor3fEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3fvEXT glSecondaryColor3fvEXT = function void (const(GLfloat)* a0) nothrow {
  glSecondaryColor3fvEXT = cast(glbfn_glSecondaryColor3fvEXT)glGetProcAddress(`glSecondaryColor3fvEXT`);
  if (glSecondaryColor3fvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3fvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3fvEXT'\n"); }
  glSecondaryColor3fvEXT(a0,);
};
__gshared glbfn_glSecondaryColor3iEXT glSecondaryColor3iEXT = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glSecondaryColor3iEXT = cast(glbfn_glSecondaryColor3iEXT)glGetProcAddress(`glSecondaryColor3iEXT`);
  if (glSecondaryColor3iEXT is null) assert(0, `OpenGL function 'glSecondaryColor3iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3iEXT'\n"); }
  glSecondaryColor3iEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3ivEXT glSecondaryColor3ivEXT = function void (const(GLint)* a0) nothrow {
  glSecondaryColor3ivEXT = cast(glbfn_glSecondaryColor3ivEXT)glGetProcAddress(`glSecondaryColor3ivEXT`);
  if (glSecondaryColor3ivEXT is null) assert(0, `OpenGL function 'glSecondaryColor3ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3ivEXT'\n"); }
  glSecondaryColor3ivEXT(a0,);
};
__gshared glbfn_glSecondaryColor3sEXT glSecondaryColor3sEXT = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glSecondaryColor3sEXT = cast(glbfn_glSecondaryColor3sEXT)glGetProcAddress(`glSecondaryColor3sEXT`);
  if (glSecondaryColor3sEXT is null) assert(0, `OpenGL function 'glSecondaryColor3sEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3sEXT'\n"); }
  glSecondaryColor3sEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3svEXT glSecondaryColor3svEXT = function void (const(GLshort)* a0) nothrow {
  glSecondaryColor3svEXT = cast(glbfn_glSecondaryColor3svEXT)glGetProcAddress(`glSecondaryColor3svEXT`);
  if (glSecondaryColor3svEXT is null) assert(0, `OpenGL function 'glSecondaryColor3svEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3svEXT'\n"); }
  glSecondaryColor3svEXT(a0,);
};
__gshared glbfn_glSecondaryColor3ubEXT glSecondaryColor3ubEXT = function void (GLubyte a0, GLubyte a1, GLubyte a2) nothrow {
  glSecondaryColor3ubEXT = cast(glbfn_glSecondaryColor3ubEXT)glGetProcAddress(`glSecondaryColor3ubEXT`);
  if (glSecondaryColor3ubEXT is null) assert(0, `OpenGL function 'glSecondaryColor3ubEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3ubEXT'\n"); }
  glSecondaryColor3ubEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3ubvEXT glSecondaryColor3ubvEXT = function void (const(GLubyte)* a0) nothrow {
  glSecondaryColor3ubvEXT = cast(glbfn_glSecondaryColor3ubvEXT)glGetProcAddress(`glSecondaryColor3ubvEXT`);
  if (glSecondaryColor3ubvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3ubvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3ubvEXT'\n"); }
  glSecondaryColor3ubvEXT(a0,);
};
__gshared glbfn_glSecondaryColor3uiEXT glSecondaryColor3uiEXT = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glSecondaryColor3uiEXT = cast(glbfn_glSecondaryColor3uiEXT)glGetProcAddress(`glSecondaryColor3uiEXT`);
  if (glSecondaryColor3uiEXT is null) assert(0, `OpenGL function 'glSecondaryColor3uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3uiEXT'\n"); }
  glSecondaryColor3uiEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3uivEXT glSecondaryColor3uivEXT = function void (const(GLuint)* a0) nothrow {
  glSecondaryColor3uivEXT = cast(glbfn_glSecondaryColor3uivEXT)glGetProcAddress(`glSecondaryColor3uivEXT`);
  if (glSecondaryColor3uivEXT is null) assert(0, `OpenGL function 'glSecondaryColor3uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3uivEXT'\n"); }
  glSecondaryColor3uivEXT(a0,);
};
__gshared glbfn_glSecondaryColor3usEXT glSecondaryColor3usEXT = function void (GLushort a0, GLushort a1, GLushort a2) nothrow {
  glSecondaryColor3usEXT = cast(glbfn_glSecondaryColor3usEXT)glGetProcAddress(`glSecondaryColor3usEXT`);
  if (glSecondaryColor3usEXT is null) assert(0, `OpenGL function 'glSecondaryColor3usEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3usEXT'\n"); }
  glSecondaryColor3usEXT(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3usvEXT glSecondaryColor3usvEXT = function void (const(GLushort)* a0) nothrow {
  glSecondaryColor3usvEXT = cast(glbfn_glSecondaryColor3usvEXT)glGetProcAddress(`glSecondaryColor3usvEXT`);
  if (glSecondaryColor3usvEXT is null) assert(0, `OpenGL function 'glSecondaryColor3usvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3usvEXT'\n"); }
  glSecondaryColor3usvEXT(a0,);
};
__gshared glbfn_glSecondaryColorPointerEXT glSecondaryColorPointerEXT = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glSecondaryColorPointerEXT = cast(glbfn_glSecondaryColorPointerEXT)glGetProcAddress(`glSecondaryColorPointerEXT`);
  if (glSecondaryColorPointerEXT is null) assert(0, `OpenGL function 'glSecondaryColorPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColorPointerEXT'\n"); }
  glSecondaryColorPointerEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glUseShaderProgramEXT glUseShaderProgramEXT = function void (GLenum a0, GLuint a1) nothrow {
  glUseShaderProgramEXT = cast(glbfn_glUseShaderProgramEXT)glGetProcAddress(`glUseShaderProgramEXT`);
  if (glUseShaderProgramEXT is null) assert(0, `OpenGL function 'glUseShaderProgramEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUseShaderProgramEXT'\n"); }
  glUseShaderProgramEXT(a0,a1,);
};
__gshared glbfn_glActiveProgramEXT glActiveProgramEXT = function void (GLuint a0) nothrow {
  glActiveProgramEXT = cast(glbfn_glActiveProgramEXT)glGetProcAddress(`glActiveProgramEXT`);
  if (glActiveProgramEXT is null) assert(0, `OpenGL function 'glActiveProgramEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glActiveProgramEXT'\n"); }
  glActiveProgramEXT(a0,);
};
__gshared glbfn_glCreateShaderProgramEXT glCreateShaderProgramEXT = function GLuint (GLenum a0, const(GLchar)* a1) nothrow {
  glCreateShaderProgramEXT = cast(glbfn_glCreateShaderProgramEXT)glGetProcAddress(`glCreateShaderProgramEXT`);
  if (glCreateShaderProgramEXT is null) assert(0, `OpenGL function 'glCreateShaderProgramEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateShaderProgramEXT'\n"); }
  return glCreateShaderProgramEXT(a0,a1,);
};
__gshared glbfn_glActiveShaderProgramEXT glActiveShaderProgramEXT = function void (GLuint a0, GLuint a1) nothrow {
  glActiveShaderProgramEXT = cast(glbfn_glActiveShaderProgramEXT)glGetProcAddress(`glActiveShaderProgramEXT`);
  if (glActiveShaderProgramEXT is null) assert(0, `OpenGL function 'glActiveShaderProgramEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glActiveShaderProgramEXT'\n"); }
  glActiveShaderProgramEXT(a0,a1,);
};
__gshared glbfn_glBindProgramPipelineEXT glBindProgramPipelineEXT = function void (GLuint a0) nothrow {
  glBindProgramPipelineEXT = cast(glbfn_glBindProgramPipelineEXT)glGetProcAddress(`glBindProgramPipelineEXT`);
  if (glBindProgramPipelineEXT is null) assert(0, `OpenGL function 'glBindProgramPipelineEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindProgramPipelineEXT'\n"); }
  glBindProgramPipelineEXT(a0,);
};
__gshared glbfn_glCreateShaderProgramvEXT glCreateShaderProgramvEXT = function GLuint (GLenum a0, GLsizei a1, const(GLchar*)* a2) nothrow {
  glCreateShaderProgramvEXT = cast(glbfn_glCreateShaderProgramvEXT)glGetProcAddress(`glCreateShaderProgramvEXT`);
  if (glCreateShaderProgramvEXT is null) assert(0, `OpenGL function 'glCreateShaderProgramvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateShaderProgramvEXT'\n"); }
  return glCreateShaderProgramvEXT(a0,a1,a2,);
};
__gshared glbfn_glDeleteProgramPipelinesEXT glDeleteProgramPipelinesEXT = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteProgramPipelinesEXT = cast(glbfn_glDeleteProgramPipelinesEXT)glGetProcAddress(`glDeleteProgramPipelinesEXT`);
  if (glDeleteProgramPipelinesEXT is null) assert(0, `OpenGL function 'glDeleteProgramPipelinesEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteProgramPipelinesEXT'\n"); }
  glDeleteProgramPipelinesEXT(a0,a1,);
};
__gshared glbfn_glGenProgramPipelinesEXT glGenProgramPipelinesEXT = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenProgramPipelinesEXT = cast(glbfn_glGenProgramPipelinesEXT)glGetProcAddress(`glGenProgramPipelinesEXT`);
  if (glGenProgramPipelinesEXT is null) assert(0, `OpenGL function 'glGenProgramPipelinesEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenProgramPipelinesEXT'\n"); }
  glGenProgramPipelinesEXT(a0,a1,);
};
__gshared glbfn_glGetProgramPipelineInfoLogEXT glGetProgramPipelineInfoLogEXT = function void (GLuint a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetProgramPipelineInfoLogEXT = cast(glbfn_glGetProgramPipelineInfoLogEXT)glGetProcAddress(`glGetProgramPipelineInfoLogEXT`);
  if (glGetProgramPipelineInfoLogEXT is null) assert(0, `OpenGL function 'glGetProgramPipelineInfoLogEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramPipelineInfoLogEXT'\n"); }
  glGetProgramPipelineInfoLogEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetProgramPipelineivEXT glGetProgramPipelineivEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetProgramPipelineivEXT = cast(glbfn_glGetProgramPipelineivEXT)glGetProcAddress(`glGetProgramPipelineivEXT`);
  if (glGetProgramPipelineivEXT is null) assert(0, `OpenGL function 'glGetProgramPipelineivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramPipelineivEXT'\n"); }
  glGetProgramPipelineivEXT(a0,a1,a2,);
};
__gshared glbfn_glIsProgramPipelineEXT glIsProgramPipelineEXT = function GLboolean (GLuint a0) nothrow {
  glIsProgramPipelineEXT = cast(glbfn_glIsProgramPipelineEXT)glGetProcAddress(`glIsProgramPipelineEXT`);
  if (glIsProgramPipelineEXT is null) assert(0, `OpenGL function 'glIsProgramPipelineEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsProgramPipelineEXT'\n"); }
  return glIsProgramPipelineEXT(a0,);
};
__gshared glbfn_glUseProgramStagesEXT glUseProgramStagesEXT = function void (GLuint a0, GLbitfield a1, GLuint a2) nothrow {
  glUseProgramStagesEXT = cast(glbfn_glUseProgramStagesEXT)glGetProcAddress(`glUseProgramStagesEXT`);
  if (glUseProgramStagesEXT is null) assert(0, `OpenGL function 'glUseProgramStagesEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUseProgramStagesEXT'\n"); }
  glUseProgramStagesEXT(a0,a1,a2,);
};
__gshared glbfn_glValidateProgramPipelineEXT glValidateProgramPipelineEXT = function void (GLuint a0) nothrow {
  glValidateProgramPipelineEXT = cast(glbfn_glValidateProgramPipelineEXT)glGetProcAddress(`glValidateProgramPipelineEXT`);
  if (glValidateProgramPipelineEXT is null) assert(0, `OpenGL function 'glValidateProgramPipelineEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glValidateProgramPipelineEXT'\n"); }
  glValidateProgramPipelineEXT(a0,);
};
__gshared glbfn_glBindImageTextureEXT glBindImageTextureEXT = function void (GLuint a0, GLuint a1, GLint a2, GLboolean a3, GLint a4, GLenum a5, GLint a6) nothrow {
  glBindImageTextureEXT = cast(glbfn_glBindImageTextureEXT)glGetProcAddress(`glBindImageTextureEXT`);
  if (glBindImageTextureEXT is null) assert(0, `OpenGL function 'glBindImageTextureEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindImageTextureEXT'\n"); }
  glBindImageTextureEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glMemoryBarrierEXT glMemoryBarrierEXT = function void (GLbitfield a0) nothrow {
  glMemoryBarrierEXT = cast(glbfn_glMemoryBarrierEXT)glGetProcAddress(`glMemoryBarrierEXT`);
  if (glMemoryBarrierEXT is null) assert(0, `OpenGL function 'glMemoryBarrierEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMemoryBarrierEXT'\n"); }
  glMemoryBarrierEXT(a0,);
};
__gshared glbfn_glStencilClearTagEXT glStencilClearTagEXT = function void (GLsizei a0, GLuint a1) nothrow {
  glStencilClearTagEXT = cast(glbfn_glStencilClearTagEXT)glGetProcAddress(`glStencilClearTagEXT`);
  if (glStencilClearTagEXT is null) assert(0, `OpenGL function 'glStencilClearTagEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilClearTagEXT'\n"); }
  glStencilClearTagEXT(a0,a1,);
};
__gshared glbfn_glActiveStencilFaceEXT glActiveStencilFaceEXT = function void (GLenum a0) nothrow {
  glActiveStencilFaceEXT = cast(glbfn_glActiveStencilFaceEXT)glGetProcAddress(`glActiveStencilFaceEXT`);
  if (glActiveStencilFaceEXT is null) assert(0, `OpenGL function 'glActiveStencilFaceEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glActiveStencilFaceEXT'\n"); }
  glActiveStencilFaceEXT(a0,);
};
__gshared glbfn_glTexSubImage1DEXT glTexSubImage1DEXT = function void (GLenum a0, GLint a1, GLint a2, GLsizei a3, GLenum a4, GLenum a5, const(void)* a6) nothrow {
  glTexSubImage1DEXT = cast(glbfn_glTexSubImage1DEXT)glGetProcAddress(`glTexSubImage1DEXT`);
  if (glTexSubImage1DEXT is null) assert(0, `OpenGL function 'glTexSubImage1DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexSubImage1DEXT'\n"); }
  glTexSubImage1DEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTexSubImage2DEXT glTexSubImage2DEXT = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLsizei a4, GLsizei a5, GLenum a6, GLenum a7, const(void)* a8) nothrow {
  glTexSubImage2DEXT = cast(glbfn_glTexSubImage2DEXT)glGetProcAddress(`glTexSubImage2DEXT`);
  if (glTexSubImage2DEXT is null) assert(0, `OpenGL function 'glTexSubImage2DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexSubImage2DEXT'\n"); }
  glTexSubImage2DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glTexImage3DEXT glTexImage3DEXT = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLint a6, GLenum a7, GLenum a8, const(void)* a9) nothrow {
  glTexImage3DEXT = cast(glbfn_glTexImage3DEXT)glGetProcAddress(`glTexImage3DEXT`);
  if (glTexImage3DEXT is null) assert(0, `OpenGL function 'glTexImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage3DEXT'\n"); }
  glTexImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glTexSubImage3DEXT glTexSubImage3DEXT = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLenum a8, GLenum a9, const(void)* a10) nothrow {
  glTexSubImage3DEXT = cast(glbfn_glTexSubImage3DEXT)glGetProcAddress(`glTexSubImage3DEXT`);
  if (glTexSubImage3DEXT is null) assert(0, `OpenGL function 'glTexSubImage3DEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexSubImage3DEXT'\n"); }
  glTexSubImage3DEXT(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glFramebufferTextureLayerEXT glFramebufferTextureLayerEXT = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3, GLint a4) nothrow {
  glFramebufferTextureLayerEXT = cast(glbfn_glFramebufferTextureLayerEXT)glGetProcAddress(`glFramebufferTextureLayerEXT`);
  if (glFramebufferTextureLayerEXT is null) assert(0, `OpenGL function 'glFramebufferTextureLayerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureLayerEXT'\n"); }
  glFramebufferTextureLayerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTexBufferEXT glTexBufferEXT = function void (GLenum a0, GLenum a1, GLuint a2) nothrow {
  glTexBufferEXT = cast(glbfn_glTexBufferEXT)glGetProcAddress(`glTexBufferEXT`);
  if (glTexBufferEXT is null) assert(0, `OpenGL function 'glTexBufferEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexBufferEXT'\n"); }
  glTexBufferEXT(a0,a1,a2,);
};
__gshared glbfn_glTexParameterIivEXT glTexParameterIivEXT = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glTexParameterIivEXT = cast(glbfn_glTexParameterIivEXT)glGetProcAddress(`glTexParameterIivEXT`);
  if (glTexParameterIivEXT is null) assert(0, `OpenGL function 'glTexParameterIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterIivEXT'\n"); }
  glTexParameterIivEXT(a0,a1,a2,);
};
__gshared glbfn_glTexParameterIuivEXT glTexParameterIuivEXT = function void (GLenum a0, GLenum a1, const(GLuint)* a2) nothrow {
  glTexParameterIuivEXT = cast(glbfn_glTexParameterIuivEXT)glGetProcAddress(`glTexParameterIuivEXT`);
  if (glTexParameterIuivEXT is null) assert(0, `OpenGL function 'glTexParameterIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterIuivEXT'\n"); }
  glTexParameterIuivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetTexParameterIivEXT glGetTexParameterIivEXT = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetTexParameterIivEXT = cast(glbfn_glGetTexParameterIivEXT)glGetProcAddress(`glGetTexParameterIivEXT`);
  if (glGetTexParameterIivEXT is null) assert(0, `OpenGL function 'glGetTexParameterIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameterIivEXT'\n"); }
  glGetTexParameterIivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetTexParameterIuivEXT glGetTexParameterIuivEXT = function void (GLenum a0, GLenum a1, GLuint* a2) nothrow {
  glGetTexParameterIuivEXT = cast(glbfn_glGetTexParameterIuivEXT)glGetProcAddress(`glGetTexParameterIuivEXT`);
  if (glGetTexParameterIuivEXT is null) assert(0, `OpenGL function 'glGetTexParameterIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameterIuivEXT'\n"); }
  glGetTexParameterIuivEXT(a0,a1,a2,);
};
__gshared glbfn_glClearColorIiEXT glClearColorIiEXT = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glClearColorIiEXT = cast(glbfn_glClearColorIiEXT)glGetProcAddress(`glClearColorIiEXT`);
  if (glClearColorIiEXT is null) assert(0, `OpenGL function 'glClearColorIiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearColorIiEXT'\n"); }
  glClearColorIiEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glClearColorIuiEXT glClearColorIuiEXT = function void (GLuint a0, GLuint a1, GLuint a2, GLuint a3) nothrow {
  glClearColorIuiEXT = cast(glbfn_glClearColorIuiEXT)glGetProcAddress(`glClearColorIuiEXT`);
  if (glClearColorIuiEXT is null) assert(0, `OpenGL function 'glClearColorIuiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearColorIuiEXT'\n"); }
  glClearColorIuiEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glAreTexturesResidentEXT glAreTexturesResidentEXT = function GLboolean (GLsizei a0, const(GLuint)* a1, GLboolean* a2) nothrow {
  glAreTexturesResidentEXT = cast(glbfn_glAreTexturesResidentEXT)glGetProcAddress(`glAreTexturesResidentEXT`);
  if (glAreTexturesResidentEXT is null) assert(0, `OpenGL function 'glAreTexturesResidentEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAreTexturesResidentEXT'\n"); }
  return glAreTexturesResidentEXT(a0,a1,a2,);
};
__gshared glbfn_glBindTextureEXT glBindTextureEXT = function void (GLenum a0, GLuint a1) nothrow {
  glBindTextureEXT = cast(glbfn_glBindTextureEXT)glGetProcAddress(`glBindTextureEXT`);
  if (glBindTextureEXT is null) assert(0, `OpenGL function 'glBindTextureEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTextureEXT'\n"); }
  glBindTextureEXT(a0,a1,);
};
__gshared glbfn_glDeleteTexturesEXT glDeleteTexturesEXT = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteTexturesEXT = cast(glbfn_glDeleteTexturesEXT)glGetProcAddress(`glDeleteTexturesEXT`);
  if (glDeleteTexturesEXT is null) assert(0, `OpenGL function 'glDeleteTexturesEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteTexturesEXT'\n"); }
  glDeleteTexturesEXT(a0,a1,);
};
__gshared glbfn_glGenTexturesEXT glGenTexturesEXT = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenTexturesEXT = cast(glbfn_glGenTexturesEXT)glGetProcAddress(`glGenTexturesEXT`);
  if (glGenTexturesEXT is null) assert(0, `OpenGL function 'glGenTexturesEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenTexturesEXT'\n"); }
  glGenTexturesEXT(a0,a1,);
};
__gshared glbfn_glIsTextureEXT glIsTextureEXT = function GLboolean (GLuint a0) nothrow {
  glIsTextureEXT = cast(glbfn_glIsTextureEXT)glGetProcAddress(`glIsTextureEXT`);
  if (glIsTextureEXT is null) assert(0, `OpenGL function 'glIsTextureEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsTextureEXT'\n"); }
  return glIsTextureEXT(a0,);
};
__gshared glbfn_glPrioritizeTexturesEXT glPrioritizeTexturesEXT = function void (GLsizei a0, const(GLuint)* a1, const(GLclampf)* a2) nothrow {
  glPrioritizeTexturesEXT = cast(glbfn_glPrioritizeTexturesEXT)glGetProcAddress(`glPrioritizeTexturesEXT`);
  if (glPrioritizeTexturesEXT is null) assert(0, `OpenGL function 'glPrioritizeTexturesEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPrioritizeTexturesEXT'\n"); }
  glPrioritizeTexturesEXT(a0,a1,a2,);
};
__gshared glbfn_glTextureNormalEXT glTextureNormalEXT = function void (GLenum a0) nothrow {
  glTextureNormalEXT = cast(glbfn_glTextureNormalEXT)glGetProcAddress(`glTextureNormalEXT`);
  if (glTextureNormalEXT is null) assert(0, `OpenGL function 'glTextureNormalEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureNormalEXT'\n"); }
  glTextureNormalEXT(a0,);
};
__gshared glbfn_glGetQueryObjecti64vEXT glGetQueryObjecti64vEXT = function void (GLuint a0, GLenum a1, GLint64* a2) nothrow {
  glGetQueryObjecti64vEXT = cast(glbfn_glGetQueryObjecti64vEXT)glGetProcAddress(`glGetQueryObjecti64vEXT`);
  if (glGetQueryObjecti64vEXT is null) assert(0, `OpenGL function 'glGetQueryObjecti64vEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjecti64vEXT'\n"); }
  glGetQueryObjecti64vEXT(a0,a1,a2,);
};
__gshared glbfn_glGetQueryObjectui64vEXT glGetQueryObjectui64vEXT = function void (GLuint a0, GLenum a1, GLuint64* a2) nothrow {
  glGetQueryObjectui64vEXT = cast(glbfn_glGetQueryObjectui64vEXT)glGetProcAddress(`glGetQueryObjectui64vEXT`);
  if (glGetQueryObjectui64vEXT is null) assert(0, `OpenGL function 'glGetQueryObjectui64vEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetQueryObjectui64vEXT'\n"); }
  glGetQueryObjectui64vEXT(a0,a1,a2,);
};
__gshared glbfn_glBeginTransformFeedbackEXT glBeginTransformFeedbackEXT = function void (GLenum a0) nothrow {
  glBeginTransformFeedbackEXT = cast(glbfn_glBeginTransformFeedbackEXT)glGetProcAddress(`glBeginTransformFeedbackEXT`);
  if (glBeginTransformFeedbackEXT is null) assert(0, `OpenGL function 'glBeginTransformFeedbackEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginTransformFeedbackEXT'\n"); }
  glBeginTransformFeedbackEXT(a0,);
};
__gshared glbfn_glEndTransformFeedbackEXT glEndTransformFeedbackEXT = function void () nothrow {
  glEndTransformFeedbackEXT = cast(glbfn_glEndTransformFeedbackEXT)glGetProcAddress(`glEndTransformFeedbackEXT`);
  if (glEndTransformFeedbackEXT is null) assert(0, `OpenGL function 'glEndTransformFeedbackEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndTransformFeedbackEXT'\n"); }
  glEndTransformFeedbackEXT();
};
__gshared glbfn_glBindBufferRangeEXT glBindBufferRangeEXT = function void (GLenum a0, GLuint a1, GLuint a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glBindBufferRangeEXT = cast(glbfn_glBindBufferRangeEXT)glGetProcAddress(`glBindBufferRangeEXT`);
  if (glBindBufferRangeEXT is null) assert(0, `OpenGL function 'glBindBufferRangeEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferRangeEXT'\n"); }
  glBindBufferRangeEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBindBufferOffsetEXT glBindBufferOffsetEXT = function void (GLenum a0, GLuint a1, GLuint a2, GLintptr a3) nothrow {
  glBindBufferOffsetEXT = cast(glbfn_glBindBufferOffsetEXT)glGetProcAddress(`glBindBufferOffsetEXT`);
  if (glBindBufferOffsetEXT is null) assert(0, `OpenGL function 'glBindBufferOffsetEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferOffsetEXT'\n"); }
  glBindBufferOffsetEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glBindBufferBaseEXT glBindBufferBaseEXT = function void (GLenum a0, GLuint a1, GLuint a2) nothrow {
  glBindBufferBaseEXT = cast(glbfn_glBindBufferBaseEXT)glGetProcAddress(`glBindBufferBaseEXT`);
  if (glBindBufferBaseEXT is null) assert(0, `OpenGL function 'glBindBufferBaseEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferBaseEXT'\n"); }
  glBindBufferBaseEXT(a0,a1,a2,);
};
__gshared glbfn_glTransformFeedbackVaryingsEXT glTransformFeedbackVaryingsEXT = function void (GLuint a0, GLsizei a1, const(GLchar*)* a2, GLenum a3) nothrow {
  glTransformFeedbackVaryingsEXT = cast(glbfn_glTransformFeedbackVaryingsEXT)glGetProcAddress(`glTransformFeedbackVaryingsEXT`);
  if (glTransformFeedbackVaryingsEXT is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformFeedbackVaryingsEXT'\n"); }
  glTransformFeedbackVaryingsEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTransformFeedbackVaryingEXT glGetTransformFeedbackVaryingEXT = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLsizei* a4, GLenum* a5, GLchar* a6) nothrow {
  glGetTransformFeedbackVaryingEXT = cast(glbfn_glGetTransformFeedbackVaryingEXT)glGetProcAddress(`glGetTransformFeedbackVaryingEXT`);
  if (glGetTransformFeedbackVaryingEXT is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTransformFeedbackVaryingEXT'\n"); }
  glGetTransformFeedbackVaryingEXT(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glArrayElementEXT glArrayElementEXT = function void (GLint a0) nothrow {
  glArrayElementEXT = cast(glbfn_glArrayElementEXT)glGetProcAddress(`glArrayElementEXT`);
  if (glArrayElementEXT is null) assert(0, `OpenGL function 'glArrayElementEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glArrayElementEXT'\n"); }
  glArrayElementEXT(a0,);
};
__gshared glbfn_glColorPointerEXT glColorPointerEXT = function void (GLint a0, GLenum a1, GLsizei a2, GLsizei a3, const(void)* a4) nothrow {
  glColorPointerEXT = cast(glbfn_glColorPointerEXT)glGetProcAddress(`glColorPointerEXT`);
  if (glColorPointerEXT is null) assert(0, `OpenGL function 'glColorPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorPointerEXT'\n"); }
  glColorPointerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawArraysEXT glDrawArraysEXT = function void (GLenum a0, GLint a1, GLsizei a2) nothrow {
  glDrawArraysEXT = cast(glbfn_glDrawArraysEXT)glGetProcAddress(`glDrawArraysEXT`);
  if (glDrawArraysEXT is null) assert(0, `OpenGL function 'glDrawArraysEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawArraysEXT'\n"); }
  glDrawArraysEXT(a0,a1,a2,);
};
__gshared glbfn_glEdgeFlagPointerEXT glEdgeFlagPointerEXT = function void (GLsizei a0, GLsizei a1, const(GLboolean)* a2) nothrow {
  glEdgeFlagPointerEXT = cast(glbfn_glEdgeFlagPointerEXT)glGetProcAddress(`glEdgeFlagPointerEXT`);
  if (glEdgeFlagPointerEXT is null) assert(0, `OpenGL function 'glEdgeFlagPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEdgeFlagPointerEXT'\n"); }
  glEdgeFlagPointerEXT(a0,a1,a2,);
};
__gshared glbfn_glGetPointervEXT glGetPointervEXT = function void (GLenum a0, void** a1) nothrow {
  glGetPointervEXT = cast(glbfn_glGetPointervEXT)glGetProcAddress(`glGetPointervEXT`);
  if (glGetPointervEXT is null) assert(0, `OpenGL function 'glGetPointervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPointervEXT'\n"); }
  glGetPointervEXT(a0,a1,);
};
__gshared glbfn_glIndexPointerEXT glIndexPointerEXT = function void (GLenum a0, GLsizei a1, GLsizei a2, const(void)* a3) nothrow {
  glIndexPointerEXT = cast(glbfn_glIndexPointerEXT)glGetProcAddress(`glIndexPointerEXT`);
  if (glIndexPointerEXT is null) assert(0, `OpenGL function 'glIndexPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexPointerEXT'\n"); }
  glIndexPointerEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glNormalPointerEXT glNormalPointerEXT = function void (GLenum a0, GLsizei a1, GLsizei a2, const(void)* a3) nothrow {
  glNormalPointerEXT = cast(glbfn_glNormalPointerEXT)glGetProcAddress(`glNormalPointerEXT`);
  if (glNormalPointerEXT is null) assert(0, `OpenGL function 'glNormalPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalPointerEXT'\n"); }
  glNormalPointerEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoordPointerEXT glTexCoordPointerEXT = function void (GLint a0, GLenum a1, GLsizei a2, GLsizei a3, const(void)* a4) nothrow {
  glTexCoordPointerEXT = cast(glbfn_glTexCoordPointerEXT)glGetProcAddress(`glTexCoordPointerEXT`);
  if (glTexCoordPointerEXT is null) assert(0, `OpenGL function 'glTexCoordPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordPointerEXT'\n"); }
  glTexCoordPointerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexPointerEXT glVertexPointerEXT = function void (GLint a0, GLenum a1, GLsizei a2, GLsizei a3, const(void)* a4) nothrow {
  glVertexPointerEXT = cast(glbfn_glVertexPointerEXT)glGetProcAddress(`glVertexPointerEXT`);
  if (glVertexPointerEXT is null) assert(0, `OpenGL function 'glVertexPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexPointerEXT'\n"); }
  glVertexPointerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribL1dEXT glVertexAttribL1dEXT = function void (GLuint a0, GLdouble a1) nothrow {
  glVertexAttribL1dEXT = cast(glbfn_glVertexAttribL1dEXT)glGetProcAddress(`glVertexAttribL1dEXT`);
  if (glVertexAttribL1dEXT is null) assert(0, `OpenGL function 'glVertexAttribL1dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1dEXT'\n"); }
  glVertexAttribL1dEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribL2dEXT glVertexAttribL2dEXT = function void (GLuint a0, GLdouble a1, GLdouble a2) nothrow {
  glVertexAttribL2dEXT = cast(glbfn_glVertexAttribL2dEXT)glGetProcAddress(`glVertexAttribL2dEXT`);
  if (glVertexAttribL2dEXT is null) assert(0, `OpenGL function 'glVertexAttribL2dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2dEXT'\n"); }
  glVertexAttribL2dEXT(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribL3dEXT glVertexAttribL3dEXT = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glVertexAttribL3dEXT = cast(glbfn_glVertexAttribL3dEXT)glGetProcAddress(`glVertexAttribL3dEXT`);
  if (glVertexAttribL3dEXT is null) assert(0, `OpenGL function 'glVertexAttribL3dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3dEXT'\n"); }
  glVertexAttribL3dEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribL4dEXT glVertexAttribL4dEXT = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glVertexAttribL4dEXT = cast(glbfn_glVertexAttribL4dEXT)glGetProcAddress(`glVertexAttribL4dEXT`);
  if (glVertexAttribL4dEXT is null) assert(0, `OpenGL function 'glVertexAttribL4dEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4dEXT'\n"); }
  glVertexAttribL4dEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribL1dvEXT glVertexAttribL1dvEXT = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL1dvEXT = cast(glbfn_glVertexAttribL1dvEXT)glGetProcAddress(`glVertexAttribL1dvEXT`);
  if (glVertexAttribL1dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL1dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1dvEXT'\n"); }
  glVertexAttribL1dvEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribL2dvEXT glVertexAttribL2dvEXT = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL2dvEXT = cast(glbfn_glVertexAttribL2dvEXT)glGetProcAddress(`glVertexAttribL2dvEXT`);
  if (glVertexAttribL2dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL2dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2dvEXT'\n"); }
  glVertexAttribL2dvEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribL3dvEXT glVertexAttribL3dvEXT = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL3dvEXT = cast(glbfn_glVertexAttribL3dvEXT)glGetProcAddress(`glVertexAttribL3dvEXT`);
  if (glVertexAttribL3dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL3dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3dvEXT'\n"); }
  glVertexAttribL3dvEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribL4dvEXT glVertexAttribL4dvEXT = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttribL4dvEXT = cast(glbfn_glVertexAttribL4dvEXT)glGetProcAddress(`glVertexAttribL4dvEXT`);
  if (glVertexAttribL4dvEXT is null) assert(0, `OpenGL function 'glVertexAttribL4dvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4dvEXT'\n"); }
  glVertexAttribL4dvEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribLPointerEXT glVertexAttribLPointerEXT = function void (GLuint a0, GLint a1, GLenum a2, GLsizei a3, const(void)* a4) nothrow {
  glVertexAttribLPointerEXT = cast(glbfn_glVertexAttribLPointerEXT)glGetProcAddress(`glVertexAttribLPointerEXT`);
  if (glVertexAttribLPointerEXT is null) assert(0, `OpenGL function 'glVertexAttribLPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribLPointerEXT'\n"); }
  glVertexAttribLPointerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetVertexAttribLdvEXT glGetVertexAttribLdvEXT = function void (GLuint a0, GLenum a1, GLdouble* a2) nothrow {
  glGetVertexAttribLdvEXT = cast(glbfn_glGetVertexAttribLdvEXT)glGetProcAddress(`glGetVertexAttribLdvEXT`);
  if (glGetVertexAttribLdvEXT is null) assert(0, `OpenGL function 'glGetVertexAttribLdvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribLdvEXT'\n"); }
  glGetVertexAttribLdvEXT(a0,a1,a2,);
};
__gshared glbfn_glBeginVertexShaderEXT glBeginVertexShaderEXT = function void () nothrow {
  glBeginVertexShaderEXT = cast(glbfn_glBeginVertexShaderEXT)glGetProcAddress(`glBeginVertexShaderEXT`);
  if (glBeginVertexShaderEXT is null) assert(0, `OpenGL function 'glBeginVertexShaderEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginVertexShaderEXT'\n"); }
  glBeginVertexShaderEXT();
};
__gshared glbfn_glEndVertexShaderEXT glEndVertexShaderEXT = function void () nothrow {
  glEndVertexShaderEXT = cast(glbfn_glEndVertexShaderEXT)glGetProcAddress(`glEndVertexShaderEXT`);
  if (glEndVertexShaderEXT is null) assert(0, `OpenGL function 'glEndVertexShaderEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndVertexShaderEXT'\n"); }
  glEndVertexShaderEXT();
};
__gshared glbfn_glBindVertexShaderEXT glBindVertexShaderEXT = function void (GLuint a0) nothrow {
  glBindVertexShaderEXT = cast(glbfn_glBindVertexShaderEXT)glGetProcAddress(`glBindVertexShaderEXT`);
  if (glBindVertexShaderEXT is null) assert(0, `OpenGL function 'glBindVertexShaderEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindVertexShaderEXT'\n"); }
  glBindVertexShaderEXT(a0,);
};
__gshared glbfn_glGenVertexShadersEXT glGenVertexShadersEXT = function GLuint (GLuint a0) nothrow {
  glGenVertexShadersEXT = cast(glbfn_glGenVertexShadersEXT)glGetProcAddress(`glGenVertexShadersEXT`);
  if (glGenVertexShadersEXT is null) assert(0, `OpenGL function 'glGenVertexShadersEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenVertexShadersEXT'\n"); }
  return glGenVertexShadersEXT(a0,);
};
__gshared glbfn_glDeleteVertexShaderEXT glDeleteVertexShaderEXT = function void (GLuint a0) nothrow {
  glDeleteVertexShaderEXT = cast(glbfn_glDeleteVertexShaderEXT)glGetProcAddress(`glDeleteVertexShaderEXT`);
  if (glDeleteVertexShaderEXT is null) assert(0, `OpenGL function 'glDeleteVertexShaderEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteVertexShaderEXT'\n"); }
  glDeleteVertexShaderEXT(a0,);
};
__gshared glbfn_glShaderOp1EXT glShaderOp1EXT = function void (GLenum a0, GLuint a1, GLuint a2) nothrow {
  glShaderOp1EXT = cast(glbfn_glShaderOp1EXT)glGetProcAddress(`glShaderOp1EXT`);
  if (glShaderOp1EXT is null) assert(0, `OpenGL function 'glShaderOp1EXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShaderOp1EXT'\n"); }
  glShaderOp1EXT(a0,a1,a2,);
};
__gshared glbfn_glShaderOp2EXT glShaderOp2EXT = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3) nothrow {
  glShaderOp2EXT = cast(glbfn_glShaderOp2EXT)glGetProcAddress(`glShaderOp2EXT`);
  if (glShaderOp2EXT is null) assert(0, `OpenGL function 'glShaderOp2EXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShaderOp2EXT'\n"); }
  glShaderOp2EXT(a0,a1,a2,a3,);
};
__gshared glbfn_glShaderOp3EXT glShaderOp3EXT = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4) nothrow {
  glShaderOp3EXT = cast(glbfn_glShaderOp3EXT)glGetProcAddress(`glShaderOp3EXT`);
  if (glShaderOp3EXT is null) assert(0, `OpenGL function 'glShaderOp3EXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glShaderOp3EXT'\n"); }
  glShaderOp3EXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glSwizzleEXT glSwizzleEXT = function void (GLuint a0, GLuint a1, GLenum a2, GLenum a3, GLenum a4, GLenum a5) nothrow {
  glSwizzleEXT = cast(glbfn_glSwizzleEXT)glGetProcAddress(`glSwizzleEXT`);
  if (glSwizzleEXT is null) assert(0, `OpenGL function 'glSwizzleEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSwizzleEXT'\n"); }
  glSwizzleEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glWriteMaskEXT glWriteMaskEXT = function void (GLuint a0, GLuint a1, GLenum a2, GLenum a3, GLenum a4, GLenum a5) nothrow {
  glWriteMaskEXT = cast(glbfn_glWriteMaskEXT)glGetProcAddress(`glWriteMaskEXT`);
  if (glWriteMaskEXT is null) assert(0, `OpenGL function 'glWriteMaskEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWriteMaskEXT'\n"); }
  glWriteMaskEXT(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glInsertComponentEXT glInsertComponentEXT = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glInsertComponentEXT = cast(glbfn_glInsertComponentEXT)glGetProcAddress(`glInsertComponentEXT`);
  if (glInsertComponentEXT is null) assert(0, `OpenGL function 'glInsertComponentEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInsertComponentEXT'\n"); }
  glInsertComponentEXT(a0,a1,a2,);
};
__gshared glbfn_glExtractComponentEXT glExtractComponentEXT = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glExtractComponentEXT = cast(glbfn_glExtractComponentEXT)glGetProcAddress(`glExtractComponentEXT`);
  if (glExtractComponentEXT is null) assert(0, `OpenGL function 'glExtractComponentEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glExtractComponentEXT'\n"); }
  glExtractComponentEXT(a0,a1,a2,);
};
__gshared glbfn_glGenSymbolsEXT glGenSymbolsEXT = function GLuint (GLenum a0, GLenum a1, GLenum a2, GLuint a3) nothrow {
  glGenSymbolsEXT = cast(glbfn_glGenSymbolsEXT)glGetProcAddress(`glGenSymbolsEXT`);
  if (glGenSymbolsEXT is null) assert(0, `OpenGL function 'glGenSymbolsEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenSymbolsEXT'\n"); }
  return glGenSymbolsEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glSetInvariantEXT glSetInvariantEXT = function void (GLuint a0, GLenum a1, const(void)* a2) nothrow {
  glSetInvariantEXT = cast(glbfn_glSetInvariantEXT)glGetProcAddress(`glSetInvariantEXT`);
  if (glSetInvariantEXT is null) assert(0, `OpenGL function 'glSetInvariantEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSetInvariantEXT'\n"); }
  glSetInvariantEXT(a0,a1,a2,);
};
__gshared glbfn_glSetLocalConstantEXT glSetLocalConstantEXT = function void (GLuint a0, GLenum a1, const(void)* a2) nothrow {
  glSetLocalConstantEXT = cast(glbfn_glSetLocalConstantEXT)glGetProcAddress(`glSetLocalConstantEXT`);
  if (glSetLocalConstantEXT is null) assert(0, `OpenGL function 'glSetLocalConstantEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSetLocalConstantEXT'\n"); }
  glSetLocalConstantEXT(a0,a1,a2,);
};
__gshared glbfn_glVariantbvEXT glVariantbvEXT = function void (GLuint a0, const(GLbyte)* a1) nothrow {
  glVariantbvEXT = cast(glbfn_glVariantbvEXT)glGetProcAddress(`glVariantbvEXT`);
  if (glVariantbvEXT is null) assert(0, `OpenGL function 'glVariantbvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantbvEXT'\n"); }
  glVariantbvEXT(a0,a1,);
};
__gshared glbfn_glVariantsvEXT glVariantsvEXT = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVariantsvEXT = cast(glbfn_glVariantsvEXT)glGetProcAddress(`glVariantsvEXT`);
  if (glVariantsvEXT is null) assert(0, `OpenGL function 'glVariantsvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantsvEXT'\n"); }
  glVariantsvEXT(a0,a1,);
};
__gshared glbfn_glVariantivEXT glVariantivEXT = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVariantivEXT = cast(glbfn_glVariantivEXT)glGetProcAddress(`glVariantivEXT`);
  if (glVariantivEXT is null) assert(0, `OpenGL function 'glVariantivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantivEXT'\n"); }
  glVariantivEXT(a0,a1,);
};
__gshared glbfn_glVariantfvEXT glVariantfvEXT = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVariantfvEXT = cast(glbfn_glVariantfvEXT)glGetProcAddress(`glVariantfvEXT`);
  if (glVariantfvEXT is null) assert(0, `OpenGL function 'glVariantfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantfvEXT'\n"); }
  glVariantfvEXT(a0,a1,);
};
__gshared glbfn_glVariantdvEXT glVariantdvEXT = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVariantdvEXT = cast(glbfn_glVariantdvEXT)glGetProcAddress(`glVariantdvEXT`);
  if (glVariantdvEXT is null) assert(0, `OpenGL function 'glVariantdvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantdvEXT'\n"); }
  glVariantdvEXT(a0,a1,);
};
__gshared glbfn_glVariantubvEXT glVariantubvEXT = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVariantubvEXT = cast(glbfn_glVariantubvEXT)glGetProcAddress(`glVariantubvEXT`);
  if (glVariantubvEXT is null) assert(0, `OpenGL function 'glVariantubvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantubvEXT'\n"); }
  glVariantubvEXT(a0,a1,);
};
__gshared glbfn_glVariantusvEXT glVariantusvEXT = function void (GLuint a0, const(GLushort)* a1) nothrow {
  glVariantusvEXT = cast(glbfn_glVariantusvEXT)glGetProcAddress(`glVariantusvEXT`);
  if (glVariantusvEXT is null) assert(0, `OpenGL function 'glVariantusvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantusvEXT'\n"); }
  glVariantusvEXT(a0,a1,);
};
__gshared glbfn_glVariantuivEXT glVariantuivEXT = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVariantuivEXT = cast(glbfn_glVariantuivEXT)glGetProcAddress(`glVariantuivEXT`);
  if (glVariantuivEXT is null) assert(0, `OpenGL function 'glVariantuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantuivEXT'\n"); }
  glVariantuivEXT(a0,a1,);
};
__gshared glbfn_glVariantPointerEXT glVariantPointerEXT = function void (GLuint a0, GLenum a1, GLuint a2, const(void)* a3) nothrow {
  glVariantPointerEXT = cast(glbfn_glVariantPointerEXT)glGetProcAddress(`glVariantPointerEXT`);
  if (glVariantPointerEXT is null) assert(0, `OpenGL function 'glVariantPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVariantPointerEXT'\n"); }
  glVariantPointerEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glEnableVariantClientStateEXT glEnableVariantClientStateEXT = function void (GLuint a0) nothrow {
  glEnableVariantClientStateEXT = cast(glbfn_glEnableVariantClientStateEXT)glGetProcAddress(`glEnableVariantClientStateEXT`);
  if (glEnableVariantClientStateEXT is null) assert(0, `OpenGL function 'glEnableVariantClientStateEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEnableVariantClientStateEXT'\n"); }
  glEnableVariantClientStateEXT(a0,);
};
__gshared glbfn_glDisableVariantClientStateEXT glDisableVariantClientStateEXT = function void (GLuint a0) nothrow {
  glDisableVariantClientStateEXT = cast(glbfn_glDisableVariantClientStateEXT)glGetProcAddress(`glDisableVariantClientStateEXT`);
  if (glDisableVariantClientStateEXT is null) assert(0, `OpenGL function 'glDisableVariantClientStateEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDisableVariantClientStateEXT'\n"); }
  glDisableVariantClientStateEXT(a0,);
};
__gshared glbfn_glBindLightParameterEXT glBindLightParameterEXT = function GLuint (GLenum a0, GLenum a1) nothrow {
  glBindLightParameterEXT = cast(glbfn_glBindLightParameterEXT)glGetProcAddress(`glBindLightParameterEXT`);
  if (glBindLightParameterEXT is null) assert(0, `OpenGL function 'glBindLightParameterEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindLightParameterEXT'\n"); }
  return glBindLightParameterEXT(a0,a1,);
};
__gshared glbfn_glBindMaterialParameterEXT glBindMaterialParameterEXT = function GLuint (GLenum a0, GLenum a1) nothrow {
  glBindMaterialParameterEXT = cast(glbfn_glBindMaterialParameterEXT)glGetProcAddress(`glBindMaterialParameterEXT`);
  if (glBindMaterialParameterEXT is null) assert(0, `OpenGL function 'glBindMaterialParameterEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindMaterialParameterEXT'\n"); }
  return glBindMaterialParameterEXT(a0,a1,);
};
__gshared glbfn_glBindTexGenParameterEXT glBindTexGenParameterEXT = function GLuint (GLenum a0, GLenum a1, GLenum a2) nothrow {
  glBindTexGenParameterEXT = cast(glbfn_glBindTexGenParameterEXT)glGetProcAddress(`glBindTexGenParameterEXT`);
  if (glBindTexGenParameterEXT is null) assert(0, `OpenGL function 'glBindTexGenParameterEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTexGenParameterEXT'\n"); }
  return glBindTexGenParameterEXT(a0,a1,a2,);
};
__gshared glbfn_glBindTextureUnitParameterEXT glBindTextureUnitParameterEXT = function GLuint (GLenum a0, GLenum a1) nothrow {
  glBindTextureUnitParameterEXT = cast(glbfn_glBindTextureUnitParameterEXT)glGetProcAddress(`glBindTextureUnitParameterEXT`);
  if (glBindTextureUnitParameterEXT is null) assert(0, `OpenGL function 'glBindTextureUnitParameterEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTextureUnitParameterEXT'\n"); }
  return glBindTextureUnitParameterEXT(a0,a1,);
};
__gshared glbfn_glBindParameterEXT glBindParameterEXT = function GLuint (GLenum a0) nothrow {
  glBindParameterEXT = cast(glbfn_glBindParameterEXT)glGetProcAddress(`glBindParameterEXT`);
  if (glBindParameterEXT is null) assert(0, `OpenGL function 'glBindParameterEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindParameterEXT'\n"); }
  return glBindParameterEXT(a0,);
};
__gshared glbfn_glIsVariantEnabledEXT glIsVariantEnabledEXT = function GLboolean (GLuint a0, GLenum a1) nothrow {
  glIsVariantEnabledEXT = cast(glbfn_glIsVariantEnabledEXT)glGetProcAddress(`glIsVariantEnabledEXT`);
  if (glIsVariantEnabledEXT is null) assert(0, `OpenGL function 'glIsVariantEnabledEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsVariantEnabledEXT'\n"); }
  return glIsVariantEnabledEXT(a0,a1,);
};
__gshared glbfn_glGetVariantBooleanvEXT glGetVariantBooleanvEXT = function void (GLuint a0, GLenum a1, GLboolean* a2) nothrow {
  glGetVariantBooleanvEXT = cast(glbfn_glGetVariantBooleanvEXT)glGetProcAddress(`glGetVariantBooleanvEXT`);
  if (glGetVariantBooleanvEXT is null) assert(0, `OpenGL function 'glGetVariantBooleanvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVariantBooleanvEXT'\n"); }
  glGetVariantBooleanvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetVariantIntegervEXT glGetVariantIntegervEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVariantIntegervEXT = cast(glbfn_glGetVariantIntegervEXT)glGetProcAddress(`glGetVariantIntegervEXT`);
  if (glGetVariantIntegervEXT is null) assert(0, `OpenGL function 'glGetVariantIntegervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVariantIntegervEXT'\n"); }
  glGetVariantIntegervEXT(a0,a1,a2,);
};
__gshared glbfn_glGetVariantFloatvEXT glGetVariantFloatvEXT = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetVariantFloatvEXT = cast(glbfn_glGetVariantFloatvEXT)glGetProcAddress(`glGetVariantFloatvEXT`);
  if (glGetVariantFloatvEXT is null) assert(0, `OpenGL function 'glGetVariantFloatvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVariantFloatvEXT'\n"); }
  glGetVariantFloatvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetVariantPointervEXT glGetVariantPointervEXT = function void (GLuint a0, GLenum a1, void** a2) nothrow {
  glGetVariantPointervEXT = cast(glbfn_glGetVariantPointervEXT)glGetProcAddress(`glGetVariantPointervEXT`);
  if (glGetVariantPointervEXT is null) assert(0, `OpenGL function 'glGetVariantPointervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVariantPointervEXT'\n"); }
  glGetVariantPointervEXT(a0,a1,a2,);
};
__gshared glbfn_glGetInvariantBooleanvEXT glGetInvariantBooleanvEXT = function void (GLuint a0, GLenum a1, GLboolean* a2) nothrow {
  glGetInvariantBooleanvEXT = cast(glbfn_glGetInvariantBooleanvEXT)glGetProcAddress(`glGetInvariantBooleanvEXT`);
  if (glGetInvariantBooleanvEXT is null) assert(0, `OpenGL function 'glGetInvariantBooleanvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInvariantBooleanvEXT'\n"); }
  glGetInvariantBooleanvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetInvariantIntegervEXT glGetInvariantIntegervEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetInvariantIntegervEXT = cast(glbfn_glGetInvariantIntegervEXT)glGetProcAddress(`glGetInvariantIntegervEXT`);
  if (glGetInvariantIntegervEXT is null) assert(0, `OpenGL function 'glGetInvariantIntegervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInvariantIntegervEXT'\n"); }
  glGetInvariantIntegervEXT(a0,a1,a2,);
};
__gshared glbfn_glGetInvariantFloatvEXT glGetInvariantFloatvEXT = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetInvariantFloatvEXT = cast(glbfn_glGetInvariantFloatvEXT)glGetProcAddress(`glGetInvariantFloatvEXT`);
  if (glGetInvariantFloatvEXT is null) assert(0, `OpenGL function 'glGetInvariantFloatvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInvariantFloatvEXT'\n"); }
  glGetInvariantFloatvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT = function void (GLuint a0, GLenum a1, GLboolean* a2) nothrow {
  glGetLocalConstantBooleanvEXT = cast(glbfn_glGetLocalConstantBooleanvEXT)glGetProcAddress(`glGetLocalConstantBooleanvEXT`);
  if (glGetLocalConstantBooleanvEXT is null) assert(0, `OpenGL function 'glGetLocalConstantBooleanvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetLocalConstantBooleanvEXT'\n"); }
  glGetLocalConstantBooleanvEXT(a0,a1,a2,);
};
__gshared glbfn_glGetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetLocalConstantIntegervEXT = cast(glbfn_glGetLocalConstantIntegervEXT)glGetProcAddress(`glGetLocalConstantIntegervEXT`);
  if (glGetLocalConstantIntegervEXT is null) assert(0, `OpenGL function 'glGetLocalConstantIntegervEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetLocalConstantIntegervEXT'\n"); }
  glGetLocalConstantIntegervEXT(a0,a1,a2,);
};
__gshared glbfn_glGetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetLocalConstantFloatvEXT = cast(glbfn_glGetLocalConstantFloatvEXT)glGetProcAddress(`glGetLocalConstantFloatvEXT`);
  if (glGetLocalConstantFloatvEXT is null) assert(0, `OpenGL function 'glGetLocalConstantFloatvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetLocalConstantFloatvEXT'\n"); }
  glGetLocalConstantFloatvEXT(a0,a1,a2,);
};
__gshared glbfn_glVertexWeightfEXT glVertexWeightfEXT = function void (GLfloat a0) nothrow {
  glVertexWeightfEXT = cast(glbfn_glVertexWeightfEXT)glGetProcAddress(`glVertexWeightfEXT`);
  if (glVertexWeightfEXT is null) assert(0, `OpenGL function 'glVertexWeightfEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexWeightfEXT'\n"); }
  glVertexWeightfEXT(a0,);
};
__gshared glbfn_glVertexWeightfvEXT glVertexWeightfvEXT = function void (const(GLfloat)* a0) nothrow {
  glVertexWeightfvEXT = cast(glbfn_glVertexWeightfvEXT)glGetProcAddress(`glVertexWeightfvEXT`);
  if (glVertexWeightfvEXT is null) assert(0, `OpenGL function 'glVertexWeightfvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexWeightfvEXT'\n"); }
  glVertexWeightfvEXT(a0,);
};
__gshared glbfn_glVertexWeightPointerEXT glVertexWeightPointerEXT = function void (GLint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glVertexWeightPointerEXT = cast(glbfn_glVertexWeightPointerEXT)glGetProcAddress(`glVertexWeightPointerEXT`);
  if (glVertexWeightPointerEXT is null) assert(0, `OpenGL function 'glVertexWeightPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexWeightPointerEXT'\n"); }
  glVertexWeightPointerEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glFrameTerminatorGREMEDY glFrameTerminatorGREMEDY = function void () nothrow {
  glFrameTerminatorGREMEDY = cast(glbfn_glFrameTerminatorGREMEDY)glGetProcAddress(`glFrameTerminatorGREMEDY`);
  if (glFrameTerminatorGREMEDY is null) assert(0, `OpenGL function 'glFrameTerminatorGREMEDY' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFrameTerminatorGREMEDY'\n"); }
  glFrameTerminatorGREMEDY();
};
__gshared glbfn_glStringMarkerGREMEDY glStringMarkerGREMEDY = function void (GLsizei a0, const(void)* a1) nothrow {
  glStringMarkerGREMEDY = cast(glbfn_glStringMarkerGREMEDY)glGetProcAddress(`glStringMarkerGREMEDY`);
  if (glStringMarkerGREMEDY is null) assert(0, `OpenGL function 'glStringMarkerGREMEDY' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStringMarkerGREMEDY'\n"); }
  glStringMarkerGREMEDY(a0,a1,);
};
__gshared glbfn_glImageTransformParameteriHP glImageTransformParameteriHP = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glImageTransformParameteriHP = cast(glbfn_glImageTransformParameteriHP)glGetProcAddress(`glImageTransformParameteriHP`);
  if (glImageTransformParameteriHP is null) assert(0, `OpenGL function 'glImageTransformParameteriHP' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glImageTransformParameteriHP'\n"); }
  glImageTransformParameteriHP(a0,a1,a2,);
};
__gshared glbfn_glImageTransformParameterfHP glImageTransformParameterfHP = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glImageTransformParameterfHP = cast(glbfn_glImageTransformParameterfHP)glGetProcAddress(`glImageTransformParameterfHP`);
  if (glImageTransformParameterfHP is null) assert(0, `OpenGL function 'glImageTransformParameterfHP' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glImageTransformParameterfHP'\n"); }
  glImageTransformParameterfHP(a0,a1,a2,);
};
__gshared glbfn_glImageTransformParameterivHP glImageTransformParameterivHP = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glImageTransformParameterivHP = cast(glbfn_glImageTransformParameterivHP)glGetProcAddress(`glImageTransformParameterivHP`);
  if (glImageTransformParameterivHP is null) assert(0, `OpenGL function 'glImageTransformParameterivHP' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glImageTransformParameterivHP'\n"); }
  glImageTransformParameterivHP(a0,a1,a2,);
};
__gshared glbfn_glImageTransformParameterfvHP glImageTransformParameterfvHP = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glImageTransformParameterfvHP = cast(glbfn_glImageTransformParameterfvHP)glGetProcAddress(`glImageTransformParameterfvHP`);
  if (glImageTransformParameterfvHP is null) assert(0, `OpenGL function 'glImageTransformParameterfvHP' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glImageTransformParameterfvHP'\n"); }
  glImageTransformParameterfvHP(a0,a1,a2,);
};
__gshared glbfn_glGetImageTransformParameterivHP glGetImageTransformParameterivHP = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetImageTransformParameterivHP = cast(glbfn_glGetImageTransformParameterivHP)glGetProcAddress(`glGetImageTransformParameterivHP`);
  if (glGetImageTransformParameterivHP is null) assert(0, `OpenGL function 'glGetImageTransformParameterivHP' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetImageTransformParameterivHP'\n"); }
  glGetImageTransformParameterivHP(a0,a1,a2,);
};
__gshared glbfn_glGetImageTransformParameterfvHP glGetImageTransformParameterfvHP = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetImageTransformParameterfvHP = cast(glbfn_glGetImageTransformParameterfvHP)glGetProcAddress(`glGetImageTransformParameterfvHP`);
  if (glGetImageTransformParameterfvHP is null) assert(0, `OpenGL function 'glGetImageTransformParameterfvHP' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetImageTransformParameterfvHP'\n"); }
  glGetImageTransformParameterfvHP(a0,a1,a2,);
};
__gshared glbfn_glMultiModeDrawArraysIBM glMultiModeDrawArraysIBM = function void (const(GLenum)* a0, const(GLint)* a1, const(GLsizei)* a2, GLsizei a3, GLint a4) nothrow {
  glMultiModeDrawArraysIBM = cast(glbfn_glMultiModeDrawArraysIBM)glGetProcAddress(`glMultiModeDrawArraysIBM`);
  if (glMultiModeDrawArraysIBM is null) assert(0, `OpenGL function 'glMultiModeDrawArraysIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiModeDrawArraysIBM'\n"); }
  glMultiModeDrawArraysIBM(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiModeDrawElementsIBM glMultiModeDrawElementsIBM = function void (const(GLenum)* a0, const(GLsizei)* a1, GLenum a2, const(void*)* a3, GLsizei a4, GLint a5) nothrow {
  glMultiModeDrawElementsIBM = cast(glbfn_glMultiModeDrawElementsIBM)glGetProcAddress(`glMultiModeDrawElementsIBM`);
  if (glMultiModeDrawElementsIBM is null) assert(0, `OpenGL function 'glMultiModeDrawElementsIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiModeDrawElementsIBM'\n"); }
  glMultiModeDrawElementsIBM(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glFlushStaticDataIBM glFlushStaticDataIBM = function void (GLenum a0) nothrow {
  glFlushStaticDataIBM = cast(glbfn_glFlushStaticDataIBM)glGetProcAddress(`glFlushStaticDataIBM`);
  if (glFlushStaticDataIBM is null) assert(0, `OpenGL function 'glFlushStaticDataIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushStaticDataIBM'\n"); }
  glFlushStaticDataIBM(a0,);
};
__gshared glbfn_glColorPointerListIBM glColorPointerListIBM = function void (GLint a0, GLenum a1, GLint a2, const(void*)* a3, GLint a4) nothrow {
  glColorPointerListIBM = cast(glbfn_glColorPointerListIBM)glGetProcAddress(`glColorPointerListIBM`);
  if (glColorPointerListIBM is null) assert(0, `OpenGL function 'glColorPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorPointerListIBM'\n"); }
  glColorPointerListIBM(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glSecondaryColorPointerListIBM glSecondaryColorPointerListIBM = function void (GLint a0, GLenum a1, GLint a2, const(void*)* a3, GLint a4) nothrow {
  glSecondaryColorPointerListIBM = cast(glbfn_glSecondaryColorPointerListIBM)glGetProcAddress(`glSecondaryColorPointerListIBM`);
  if (glSecondaryColorPointerListIBM is null) assert(0, `OpenGL function 'glSecondaryColorPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColorPointerListIBM'\n"); }
  glSecondaryColorPointerListIBM(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glEdgeFlagPointerListIBM glEdgeFlagPointerListIBM = function void (GLint a0, const(GLboolean*)* a1, GLint a2) nothrow {
  glEdgeFlagPointerListIBM = cast(glbfn_glEdgeFlagPointerListIBM)glGetProcAddress(`glEdgeFlagPointerListIBM`);
  if (glEdgeFlagPointerListIBM is null) assert(0, `OpenGL function 'glEdgeFlagPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEdgeFlagPointerListIBM'\n"); }
  glEdgeFlagPointerListIBM(a0,a1,a2,);
};
__gshared glbfn_glFogCoordPointerListIBM glFogCoordPointerListIBM = function void (GLenum a0, GLint a1, const(void*)* a2, GLint a3) nothrow {
  glFogCoordPointerListIBM = cast(glbfn_glFogCoordPointerListIBM)glGetProcAddress(`glFogCoordPointerListIBM`);
  if (glFogCoordPointerListIBM is null) assert(0, `OpenGL function 'glFogCoordPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordPointerListIBM'\n"); }
  glFogCoordPointerListIBM(a0,a1,a2,a3,);
};
__gshared glbfn_glIndexPointerListIBM glIndexPointerListIBM = function void (GLenum a0, GLint a1, const(void*)* a2, GLint a3) nothrow {
  glIndexPointerListIBM = cast(glbfn_glIndexPointerListIBM)glGetProcAddress(`glIndexPointerListIBM`);
  if (glIndexPointerListIBM is null) assert(0, `OpenGL function 'glIndexPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexPointerListIBM'\n"); }
  glIndexPointerListIBM(a0,a1,a2,a3,);
};
__gshared glbfn_glNormalPointerListIBM glNormalPointerListIBM = function void (GLenum a0, GLint a1, const(void*)* a2, GLint a3) nothrow {
  glNormalPointerListIBM = cast(glbfn_glNormalPointerListIBM)glGetProcAddress(`glNormalPointerListIBM`);
  if (glNormalPointerListIBM is null) assert(0, `OpenGL function 'glNormalPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalPointerListIBM'\n"); }
  glNormalPointerListIBM(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoordPointerListIBM glTexCoordPointerListIBM = function void (GLint a0, GLenum a1, GLint a2, const(void*)* a3, GLint a4) nothrow {
  glTexCoordPointerListIBM = cast(glbfn_glTexCoordPointerListIBM)glGetProcAddress(`glTexCoordPointerListIBM`);
  if (glTexCoordPointerListIBM is null) assert(0, `OpenGL function 'glTexCoordPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordPointerListIBM'\n"); }
  glTexCoordPointerListIBM(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexPointerListIBM glVertexPointerListIBM = function void (GLint a0, GLenum a1, GLint a2, const(void*)* a3, GLint a4) nothrow {
  glVertexPointerListIBM = cast(glbfn_glVertexPointerListIBM)glGetProcAddress(`glVertexPointerListIBM`);
  if (glVertexPointerListIBM is null) assert(0, `OpenGL function 'glVertexPointerListIBM' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexPointerListIBM'\n"); }
  glVertexPointerListIBM(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBlendFuncSeparateINGR glBlendFuncSeparateINGR = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3) nothrow {
  glBlendFuncSeparateINGR = cast(glbfn_glBlendFuncSeparateINGR)glGetProcAddress(`glBlendFuncSeparateINGR`);
  if (glBlendFuncSeparateINGR is null) assert(0, `OpenGL function 'glBlendFuncSeparateINGR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendFuncSeparateINGR'\n"); }
  glBlendFuncSeparateINGR(a0,a1,a2,a3,);
};
__gshared glbfn_glApplyFramebufferAttachmentCMAAINTEL glApplyFramebufferAttachmentCMAAINTEL = function void () nothrow {
  glApplyFramebufferAttachmentCMAAINTEL = cast(glbfn_glApplyFramebufferAttachmentCMAAINTEL)glGetProcAddress(`glApplyFramebufferAttachmentCMAAINTEL`);
  if (glApplyFramebufferAttachmentCMAAINTEL is null) assert(0, `OpenGL function 'glApplyFramebufferAttachmentCMAAINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glApplyFramebufferAttachmentCMAAINTEL'\n"); }
  glApplyFramebufferAttachmentCMAAINTEL();
};
__gshared glbfn_glSyncTextureINTEL glSyncTextureINTEL = function void (GLuint a0) nothrow {
  glSyncTextureINTEL = cast(glbfn_glSyncTextureINTEL)glGetProcAddress(`glSyncTextureINTEL`);
  if (glSyncTextureINTEL is null) assert(0, `OpenGL function 'glSyncTextureINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSyncTextureINTEL'\n"); }
  glSyncTextureINTEL(a0,);
};
__gshared glbfn_glUnmapTexture2DINTEL glUnmapTexture2DINTEL = function void (GLuint a0, GLint a1) nothrow {
  glUnmapTexture2DINTEL = cast(glbfn_glUnmapTexture2DINTEL)glGetProcAddress(`glUnmapTexture2DINTEL`);
  if (glUnmapTexture2DINTEL is null) assert(0, `OpenGL function 'glUnmapTexture2DINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUnmapTexture2DINTEL'\n"); }
  glUnmapTexture2DINTEL(a0,a1,);
};
__gshared glbfn_glMapTexture2DINTEL glMapTexture2DINTEL = function void* (GLuint a0, GLint a1, GLbitfield a2, GLint* a3, GLenum* a4) nothrow {
  glMapTexture2DINTEL = cast(glbfn_glMapTexture2DINTEL)glGetProcAddress(`glMapTexture2DINTEL`);
  if (glMapTexture2DINTEL is null) assert(0, `OpenGL function 'glMapTexture2DINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapTexture2DINTEL'\n"); }
  return glMapTexture2DINTEL(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexPointervINTEL glVertexPointervINTEL = function void (GLint a0, GLenum a1, const(void*)* a2) nothrow {
  glVertexPointervINTEL = cast(glbfn_glVertexPointervINTEL)glGetProcAddress(`glVertexPointervINTEL`);
  if (glVertexPointervINTEL is null) assert(0, `OpenGL function 'glVertexPointervINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexPointervINTEL'\n"); }
  glVertexPointervINTEL(a0,a1,a2,);
};
__gshared glbfn_glNormalPointervINTEL glNormalPointervINTEL = function void (GLenum a0, const(void*)* a1) nothrow {
  glNormalPointervINTEL = cast(glbfn_glNormalPointervINTEL)glGetProcAddress(`glNormalPointervINTEL`);
  if (glNormalPointervINTEL is null) assert(0, `OpenGL function 'glNormalPointervINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalPointervINTEL'\n"); }
  glNormalPointervINTEL(a0,a1,);
};
__gshared glbfn_glColorPointervINTEL glColorPointervINTEL = function void (GLint a0, GLenum a1, const(void*)* a2) nothrow {
  glColorPointervINTEL = cast(glbfn_glColorPointervINTEL)glGetProcAddress(`glColorPointervINTEL`);
  if (glColorPointervINTEL is null) assert(0, `OpenGL function 'glColorPointervINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorPointervINTEL'\n"); }
  glColorPointervINTEL(a0,a1,a2,);
};
__gshared glbfn_glTexCoordPointervINTEL glTexCoordPointervINTEL = function void (GLint a0, GLenum a1, const(void*)* a2) nothrow {
  glTexCoordPointervINTEL = cast(glbfn_glTexCoordPointervINTEL)glGetProcAddress(`glTexCoordPointervINTEL`);
  if (glTexCoordPointervINTEL is null) assert(0, `OpenGL function 'glTexCoordPointervINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordPointervINTEL'\n"); }
  glTexCoordPointervINTEL(a0,a1,a2,);
};
__gshared glbfn_glBeginPerfQueryINTEL glBeginPerfQueryINTEL = function void (GLuint a0) nothrow {
  glBeginPerfQueryINTEL = cast(glbfn_glBeginPerfQueryINTEL)glGetProcAddress(`glBeginPerfQueryINTEL`);
  if (glBeginPerfQueryINTEL is null) assert(0, `OpenGL function 'glBeginPerfQueryINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginPerfQueryINTEL'\n"); }
  glBeginPerfQueryINTEL(a0,);
};
__gshared glbfn_glCreatePerfQueryINTEL glCreatePerfQueryINTEL = function void (GLuint a0, GLuint* a1) nothrow {
  glCreatePerfQueryINTEL = cast(glbfn_glCreatePerfQueryINTEL)glGetProcAddress(`glCreatePerfQueryINTEL`);
  if (glCreatePerfQueryINTEL is null) assert(0, `OpenGL function 'glCreatePerfQueryINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreatePerfQueryINTEL'\n"); }
  glCreatePerfQueryINTEL(a0,a1,);
};
__gshared glbfn_glDeletePerfQueryINTEL glDeletePerfQueryINTEL = function void (GLuint a0) nothrow {
  glDeletePerfQueryINTEL = cast(glbfn_glDeletePerfQueryINTEL)glGetProcAddress(`glDeletePerfQueryINTEL`);
  if (glDeletePerfQueryINTEL is null) assert(0, `OpenGL function 'glDeletePerfQueryINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeletePerfQueryINTEL'\n"); }
  glDeletePerfQueryINTEL(a0,);
};
__gshared glbfn_glEndPerfQueryINTEL glEndPerfQueryINTEL = function void (GLuint a0) nothrow {
  glEndPerfQueryINTEL = cast(glbfn_glEndPerfQueryINTEL)glGetProcAddress(`glEndPerfQueryINTEL`);
  if (glEndPerfQueryINTEL is null) assert(0, `OpenGL function 'glEndPerfQueryINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndPerfQueryINTEL'\n"); }
  glEndPerfQueryINTEL(a0,);
};
__gshared glbfn_glGetFirstPerfQueryIdINTEL glGetFirstPerfQueryIdINTEL = function void (GLuint* a0) nothrow {
  glGetFirstPerfQueryIdINTEL = cast(glbfn_glGetFirstPerfQueryIdINTEL)glGetProcAddress(`glGetFirstPerfQueryIdINTEL`);
  if (glGetFirstPerfQueryIdINTEL is null) assert(0, `OpenGL function 'glGetFirstPerfQueryIdINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFirstPerfQueryIdINTEL'\n"); }
  glGetFirstPerfQueryIdINTEL(a0,);
};
__gshared glbfn_glGetNextPerfQueryIdINTEL glGetNextPerfQueryIdINTEL = function void (GLuint a0, GLuint* a1) nothrow {
  glGetNextPerfQueryIdINTEL = cast(glbfn_glGetNextPerfQueryIdINTEL)glGetProcAddress(`glGetNextPerfQueryIdINTEL`);
  if (glGetNextPerfQueryIdINTEL is null) assert(0, `OpenGL function 'glGetNextPerfQueryIdINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNextPerfQueryIdINTEL'\n"); }
  glGetNextPerfQueryIdINTEL(a0,a1,);
};
__gshared glbfn_glGetPerfCounterInfoINTEL glGetPerfCounterInfoINTEL = function void (GLuint a0, GLuint a1, GLuint a2, GLchar* a3, GLuint a4, GLchar* a5, GLuint* a6, GLuint* a7, GLuint* a8, GLuint* a9, GLuint64* a10) nothrow {
  glGetPerfCounterInfoINTEL = cast(glbfn_glGetPerfCounterInfoINTEL)glGetProcAddress(`glGetPerfCounterInfoINTEL`);
  if (glGetPerfCounterInfoINTEL is null) assert(0, `OpenGL function 'glGetPerfCounterInfoINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfCounterInfoINTEL'\n"); }
  glGetPerfCounterInfoINTEL(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glGetPerfQueryDataINTEL glGetPerfQueryDataINTEL = function void (GLuint a0, GLuint a1, GLsizei a2, GLvoid* a3, GLuint* a4) nothrow {
  glGetPerfQueryDataINTEL = cast(glbfn_glGetPerfQueryDataINTEL)glGetProcAddress(`glGetPerfQueryDataINTEL`);
  if (glGetPerfQueryDataINTEL is null) assert(0, `OpenGL function 'glGetPerfQueryDataINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfQueryDataINTEL'\n"); }
  glGetPerfQueryDataINTEL(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetPerfQueryIdByNameINTEL glGetPerfQueryIdByNameINTEL = function void (GLchar* a0, GLuint* a1) nothrow {
  glGetPerfQueryIdByNameINTEL = cast(glbfn_glGetPerfQueryIdByNameINTEL)glGetProcAddress(`glGetPerfQueryIdByNameINTEL`);
  if (glGetPerfQueryIdByNameINTEL is null) assert(0, `OpenGL function 'glGetPerfQueryIdByNameINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfQueryIdByNameINTEL'\n"); }
  glGetPerfQueryIdByNameINTEL(a0,a1,);
};
__gshared glbfn_glGetPerfQueryInfoINTEL glGetPerfQueryInfoINTEL = function void (GLuint a0, GLuint a1, GLchar* a2, GLuint* a3, GLuint* a4, GLuint* a5, GLuint* a6) nothrow {
  glGetPerfQueryInfoINTEL = cast(glbfn_glGetPerfQueryInfoINTEL)glGetProcAddress(`glGetPerfQueryInfoINTEL`);
  if (glGetPerfQueryInfoINTEL is null) assert(0, `OpenGL function 'glGetPerfQueryInfoINTEL' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPerfQueryInfoINTEL'\n"); }
  glGetPerfQueryInfoINTEL(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glBlendBarrierKHR glBlendBarrierKHR = function void () nothrow {
  glBlendBarrierKHR = cast(glbfn_glBlendBarrierKHR)glGetProcAddress(`glBlendBarrierKHR`);
  if (glBlendBarrierKHR is null) assert(0, `OpenGL function 'glBlendBarrierKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendBarrierKHR'\n"); }
  glBlendBarrierKHR();
};
__gshared glbfn_glDebugMessageControlKHR glDebugMessageControlKHR = function void (GLenum a0, GLenum a1, GLenum a2, GLsizei a3, const(GLuint)* a4, GLboolean a5) nothrow {
  glDebugMessageControlKHR = cast(glbfn_glDebugMessageControlKHR)glGetProcAddress(`glDebugMessageControlKHR`);
  if (glDebugMessageControlKHR is null) assert(0, `OpenGL function 'glDebugMessageControlKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageControlKHR'\n"); }
  glDebugMessageControlKHR(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glDebugMessageInsertKHR glDebugMessageInsertKHR = function void (GLenum a0, GLenum a1, GLuint a2, GLenum a3, GLsizei a4, const(GLchar)* a5) nothrow {
  glDebugMessageInsertKHR = cast(glbfn_glDebugMessageInsertKHR)glGetProcAddress(`glDebugMessageInsertKHR`);
  if (glDebugMessageInsertKHR is null) assert(0, `OpenGL function 'glDebugMessageInsertKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDebugMessageInsertKHR'\n"); }
  glDebugMessageInsertKHR(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetDebugMessageLogKHR glGetDebugMessageLogKHR = function GLuint (GLuint a0, GLsizei a1, GLenum* a2, GLenum* a3, GLuint* a4, GLenum* a5, GLsizei* a6, GLchar* a7) nothrow {
  glGetDebugMessageLogKHR = cast(glbfn_glGetDebugMessageLogKHR)glGetProcAddress(`glGetDebugMessageLogKHR`);
  if (glGetDebugMessageLogKHR is null) assert(0, `OpenGL function 'glGetDebugMessageLogKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDebugMessageLogKHR'\n"); }
  return glGetDebugMessageLogKHR(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glPushDebugGroupKHR glPushDebugGroupKHR = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLchar)* a3) nothrow {
  glPushDebugGroupKHR = cast(glbfn_glPushDebugGroupKHR)glGetProcAddress(`glPushDebugGroupKHR`);
  if (glPushDebugGroupKHR is null) assert(0, `OpenGL function 'glPushDebugGroupKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPushDebugGroupKHR'\n"); }
  glPushDebugGroupKHR(a0,a1,a2,a3,);
};
__gshared glbfn_glPopDebugGroupKHR glPopDebugGroupKHR = function void () nothrow {
  glPopDebugGroupKHR = cast(glbfn_glPopDebugGroupKHR)glGetProcAddress(`glPopDebugGroupKHR`);
  if (glPopDebugGroupKHR is null) assert(0, `OpenGL function 'glPopDebugGroupKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPopDebugGroupKHR'\n"); }
  glPopDebugGroupKHR();
};
__gshared glbfn_glObjectLabelKHR glObjectLabelKHR = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLchar)* a3) nothrow {
  glObjectLabelKHR = cast(glbfn_glObjectLabelKHR)glGetProcAddress(`glObjectLabelKHR`);
  if (glObjectLabelKHR is null) assert(0, `OpenGL function 'glObjectLabelKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glObjectLabelKHR'\n"); }
  glObjectLabelKHR(a0,a1,a2,a3,);
};
__gshared glbfn_glGetObjectLabelKHR glGetObjectLabelKHR = function void (GLenum a0, GLuint a1, GLsizei a2, GLsizei* a3, GLchar* a4) nothrow {
  glGetObjectLabelKHR = cast(glbfn_glGetObjectLabelKHR)glGetProcAddress(`glGetObjectLabelKHR`);
  if (glGetObjectLabelKHR is null) assert(0, `OpenGL function 'glGetObjectLabelKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectLabelKHR'\n"); }
  glGetObjectLabelKHR(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glObjectPtrLabelKHR glObjectPtrLabelKHR = function void (const(void)* a0, GLsizei a1, const(GLchar)* a2) nothrow {
  glObjectPtrLabelKHR = cast(glbfn_glObjectPtrLabelKHR)glGetProcAddress(`glObjectPtrLabelKHR`);
  if (glObjectPtrLabelKHR is null) assert(0, `OpenGL function 'glObjectPtrLabelKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glObjectPtrLabelKHR'\n"); }
  glObjectPtrLabelKHR(a0,a1,a2,);
};
__gshared glbfn_glGetObjectPtrLabelKHR glGetObjectPtrLabelKHR = function void (const(void)* a0, GLsizei a1, GLsizei* a2, GLchar* a3) nothrow {
  glGetObjectPtrLabelKHR = cast(glbfn_glGetObjectPtrLabelKHR)glGetProcAddress(`glGetObjectPtrLabelKHR`);
  if (glGetObjectPtrLabelKHR is null) assert(0, `OpenGL function 'glGetObjectPtrLabelKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetObjectPtrLabelKHR'\n"); }
  glGetObjectPtrLabelKHR(a0,a1,a2,a3,);
};
__gshared glbfn_glGetPointervKHR glGetPointervKHR = function void (GLenum a0, void** a1) nothrow {
  glGetPointervKHR = cast(glbfn_glGetPointervKHR)glGetProcAddress(`glGetPointervKHR`);
  if (glGetPointervKHR is null) assert(0, `OpenGL function 'glGetPointervKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPointervKHR'\n"); }
  glGetPointervKHR(a0,a1,);
};
__gshared glbfn_glGetGraphicsResetStatusKHR glGetGraphicsResetStatusKHR = function GLenum () nothrow {
  glGetGraphicsResetStatusKHR = cast(glbfn_glGetGraphicsResetStatusKHR)glGetProcAddress(`glGetGraphicsResetStatusKHR`);
  if (glGetGraphicsResetStatusKHR is null) assert(0, `OpenGL function 'glGetGraphicsResetStatusKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetGraphicsResetStatusKHR'\n"); }
  return glGetGraphicsResetStatusKHR();
};
__gshared glbfn_glReadnPixelsKHR glReadnPixelsKHR = function void (GLint a0, GLint a1, GLsizei a2, GLsizei a3, GLenum a4, GLenum a5, GLsizei a6, void* a7) nothrow {
  glReadnPixelsKHR = cast(glbfn_glReadnPixelsKHR)glGetProcAddress(`glReadnPixelsKHR`);
  if (glReadnPixelsKHR is null) assert(0, `OpenGL function 'glReadnPixelsKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReadnPixelsKHR'\n"); }
  glReadnPixelsKHR(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glGetnUniformfvKHR glGetnUniformfvKHR = function void (GLuint a0, GLint a1, GLsizei a2, GLfloat* a3) nothrow {
  glGetnUniformfvKHR = cast(glbfn_glGetnUniformfvKHR)glGetProcAddress(`glGetnUniformfvKHR`);
  if (glGetnUniformfvKHR is null) assert(0, `OpenGL function 'glGetnUniformfvKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformfvKHR'\n"); }
  glGetnUniformfvKHR(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformivKHR glGetnUniformivKHR = function void (GLuint a0, GLint a1, GLsizei a2, GLint* a3) nothrow {
  glGetnUniformivKHR = cast(glbfn_glGetnUniformivKHR)glGetProcAddress(`glGetnUniformivKHR`);
  if (glGetnUniformivKHR is null) assert(0, `OpenGL function 'glGetnUniformivKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformivKHR'\n"); }
  glGetnUniformivKHR(a0,a1,a2,a3,);
};
__gshared glbfn_glGetnUniformuivKHR glGetnUniformuivKHR = function void (GLuint a0, GLint a1, GLsizei a2, GLuint* a3) nothrow {
  glGetnUniformuivKHR = cast(glbfn_glGetnUniformuivKHR)glGetProcAddress(`glGetnUniformuivKHR`);
  if (glGetnUniformuivKHR is null) assert(0, `OpenGL function 'glGetnUniformuivKHR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetnUniformuivKHR'\n"); }
  glGetnUniformuivKHR(a0,a1,a2,a3,);
};
__gshared glbfn_glResizeBuffersMESA glResizeBuffersMESA = function void () nothrow {
  glResizeBuffersMESA = cast(glbfn_glResizeBuffersMESA)glGetProcAddress(`glResizeBuffersMESA`);
  if (glResizeBuffersMESA is null) assert(0, `OpenGL function 'glResizeBuffersMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResizeBuffersMESA'\n"); }
  glResizeBuffersMESA();
};
__gshared glbfn_glWindowPos2dMESA glWindowPos2dMESA = function void (GLdouble a0, GLdouble a1) nothrow {
  glWindowPos2dMESA = cast(glbfn_glWindowPos2dMESA)glGetProcAddress(`glWindowPos2dMESA`);
  if (glWindowPos2dMESA is null) assert(0, `OpenGL function 'glWindowPos2dMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2dMESA'\n"); }
  glWindowPos2dMESA(a0,a1,);
};
__gshared glbfn_glWindowPos2dvMESA glWindowPos2dvMESA = function void (const(GLdouble)* a0) nothrow {
  glWindowPos2dvMESA = cast(glbfn_glWindowPos2dvMESA)glGetProcAddress(`glWindowPos2dvMESA`);
  if (glWindowPos2dvMESA is null) assert(0, `OpenGL function 'glWindowPos2dvMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2dvMESA'\n"); }
  glWindowPos2dvMESA(a0,);
};
__gshared glbfn_glWindowPos2fMESA glWindowPos2fMESA = function void (GLfloat a0, GLfloat a1) nothrow {
  glWindowPos2fMESA = cast(glbfn_glWindowPos2fMESA)glGetProcAddress(`glWindowPos2fMESA`);
  if (glWindowPos2fMESA is null) assert(0, `OpenGL function 'glWindowPos2fMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2fMESA'\n"); }
  glWindowPos2fMESA(a0,a1,);
};
__gshared glbfn_glWindowPos2fvMESA glWindowPos2fvMESA = function void (const(GLfloat)* a0) nothrow {
  glWindowPos2fvMESA = cast(glbfn_glWindowPos2fvMESA)glGetProcAddress(`glWindowPos2fvMESA`);
  if (glWindowPos2fvMESA is null) assert(0, `OpenGL function 'glWindowPos2fvMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2fvMESA'\n"); }
  glWindowPos2fvMESA(a0,);
};
__gshared glbfn_glWindowPos2iMESA glWindowPos2iMESA = function void (GLint a0, GLint a1) nothrow {
  glWindowPos2iMESA = cast(glbfn_glWindowPos2iMESA)glGetProcAddress(`glWindowPos2iMESA`);
  if (glWindowPos2iMESA is null) assert(0, `OpenGL function 'glWindowPos2iMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2iMESA'\n"); }
  glWindowPos2iMESA(a0,a1,);
};
__gshared glbfn_glWindowPos2ivMESA glWindowPos2ivMESA = function void (const(GLint)* a0) nothrow {
  glWindowPos2ivMESA = cast(glbfn_glWindowPos2ivMESA)glGetProcAddress(`glWindowPos2ivMESA`);
  if (glWindowPos2ivMESA is null) assert(0, `OpenGL function 'glWindowPos2ivMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2ivMESA'\n"); }
  glWindowPos2ivMESA(a0,);
};
__gshared glbfn_glWindowPos2sMESA glWindowPos2sMESA = function void (GLshort a0, GLshort a1) nothrow {
  glWindowPos2sMESA = cast(glbfn_glWindowPos2sMESA)glGetProcAddress(`glWindowPos2sMESA`);
  if (glWindowPos2sMESA is null) assert(0, `OpenGL function 'glWindowPos2sMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2sMESA'\n"); }
  glWindowPos2sMESA(a0,a1,);
};
__gshared glbfn_glWindowPos2svMESA glWindowPos2svMESA = function void (const(GLshort)* a0) nothrow {
  glWindowPos2svMESA = cast(glbfn_glWindowPos2svMESA)glGetProcAddress(`glWindowPos2svMESA`);
  if (glWindowPos2svMESA is null) assert(0, `OpenGL function 'glWindowPos2svMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos2svMESA'\n"); }
  glWindowPos2svMESA(a0,);
};
__gshared glbfn_glWindowPos3dMESA glWindowPos3dMESA = function void (GLdouble a0, GLdouble a1, GLdouble a2) nothrow {
  glWindowPos3dMESA = cast(glbfn_glWindowPos3dMESA)glGetProcAddress(`glWindowPos3dMESA`);
  if (glWindowPos3dMESA is null) assert(0, `OpenGL function 'glWindowPos3dMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3dMESA'\n"); }
  glWindowPos3dMESA(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3dvMESA glWindowPos3dvMESA = function void (const(GLdouble)* a0) nothrow {
  glWindowPos3dvMESA = cast(glbfn_glWindowPos3dvMESA)glGetProcAddress(`glWindowPos3dvMESA`);
  if (glWindowPos3dvMESA is null) assert(0, `OpenGL function 'glWindowPos3dvMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3dvMESA'\n"); }
  glWindowPos3dvMESA(a0,);
};
__gshared glbfn_glWindowPos3fMESA glWindowPos3fMESA = function void (GLfloat a0, GLfloat a1, GLfloat a2) nothrow {
  glWindowPos3fMESA = cast(glbfn_glWindowPos3fMESA)glGetProcAddress(`glWindowPos3fMESA`);
  if (glWindowPos3fMESA is null) assert(0, `OpenGL function 'glWindowPos3fMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3fMESA'\n"); }
  glWindowPos3fMESA(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3fvMESA glWindowPos3fvMESA = function void (const(GLfloat)* a0) nothrow {
  glWindowPos3fvMESA = cast(glbfn_glWindowPos3fvMESA)glGetProcAddress(`glWindowPos3fvMESA`);
  if (glWindowPos3fvMESA is null) assert(0, `OpenGL function 'glWindowPos3fvMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3fvMESA'\n"); }
  glWindowPos3fvMESA(a0,);
};
__gshared glbfn_glWindowPos3iMESA glWindowPos3iMESA = function void (GLint a0, GLint a1, GLint a2) nothrow {
  glWindowPos3iMESA = cast(glbfn_glWindowPos3iMESA)glGetProcAddress(`glWindowPos3iMESA`);
  if (glWindowPos3iMESA is null) assert(0, `OpenGL function 'glWindowPos3iMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3iMESA'\n"); }
  glWindowPos3iMESA(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3ivMESA glWindowPos3ivMESA = function void (const(GLint)* a0) nothrow {
  glWindowPos3ivMESA = cast(glbfn_glWindowPos3ivMESA)glGetProcAddress(`glWindowPos3ivMESA`);
  if (glWindowPos3ivMESA is null) assert(0, `OpenGL function 'glWindowPos3ivMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3ivMESA'\n"); }
  glWindowPos3ivMESA(a0,);
};
__gshared glbfn_glWindowPos3sMESA glWindowPos3sMESA = function void (GLshort a0, GLshort a1, GLshort a2) nothrow {
  glWindowPos3sMESA = cast(glbfn_glWindowPos3sMESA)glGetProcAddress(`glWindowPos3sMESA`);
  if (glWindowPos3sMESA is null) assert(0, `OpenGL function 'glWindowPos3sMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3sMESA'\n"); }
  glWindowPos3sMESA(a0,a1,a2,);
};
__gshared glbfn_glWindowPos3svMESA glWindowPos3svMESA = function void (const(GLshort)* a0) nothrow {
  glWindowPos3svMESA = cast(glbfn_glWindowPos3svMESA)glGetProcAddress(`glWindowPos3svMESA`);
  if (glWindowPos3svMESA is null) assert(0, `OpenGL function 'glWindowPos3svMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos3svMESA'\n"); }
  glWindowPos3svMESA(a0,);
};
__gshared glbfn_glWindowPos4dMESA glWindowPos4dMESA = function void (GLdouble a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glWindowPos4dMESA = cast(glbfn_glWindowPos4dMESA)glGetProcAddress(`glWindowPos4dMESA`);
  if (glWindowPos4dMESA is null) assert(0, `OpenGL function 'glWindowPos4dMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4dMESA'\n"); }
  glWindowPos4dMESA(a0,a1,a2,a3,);
};
__gshared glbfn_glWindowPos4dvMESA glWindowPos4dvMESA = function void (const(GLdouble)* a0) nothrow {
  glWindowPos4dvMESA = cast(glbfn_glWindowPos4dvMESA)glGetProcAddress(`glWindowPos4dvMESA`);
  if (glWindowPos4dvMESA is null) assert(0, `OpenGL function 'glWindowPos4dvMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4dvMESA'\n"); }
  glWindowPos4dvMESA(a0,);
};
__gshared glbfn_glWindowPos4fMESA glWindowPos4fMESA = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glWindowPos4fMESA = cast(glbfn_glWindowPos4fMESA)glGetProcAddress(`glWindowPos4fMESA`);
  if (glWindowPos4fMESA is null) assert(0, `OpenGL function 'glWindowPos4fMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4fMESA'\n"); }
  glWindowPos4fMESA(a0,a1,a2,a3,);
};
__gshared glbfn_glWindowPos4fvMESA glWindowPos4fvMESA = function void (const(GLfloat)* a0) nothrow {
  glWindowPos4fvMESA = cast(glbfn_glWindowPos4fvMESA)glGetProcAddress(`glWindowPos4fvMESA`);
  if (glWindowPos4fvMESA is null) assert(0, `OpenGL function 'glWindowPos4fvMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4fvMESA'\n"); }
  glWindowPos4fvMESA(a0,);
};
__gshared glbfn_glWindowPos4iMESA glWindowPos4iMESA = function void (GLint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glWindowPos4iMESA = cast(glbfn_glWindowPos4iMESA)glGetProcAddress(`glWindowPos4iMESA`);
  if (glWindowPos4iMESA is null) assert(0, `OpenGL function 'glWindowPos4iMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4iMESA'\n"); }
  glWindowPos4iMESA(a0,a1,a2,a3,);
};
__gshared glbfn_glWindowPos4ivMESA glWindowPos4ivMESA = function void (const(GLint)* a0) nothrow {
  glWindowPos4ivMESA = cast(glbfn_glWindowPos4ivMESA)glGetProcAddress(`glWindowPos4ivMESA`);
  if (glWindowPos4ivMESA is null) assert(0, `OpenGL function 'glWindowPos4ivMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4ivMESA'\n"); }
  glWindowPos4ivMESA(a0,);
};
__gshared glbfn_glWindowPos4sMESA glWindowPos4sMESA = function void (GLshort a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glWindowPos4sMESA = cast(glbfn_glWindowPos4sMESA)glGetProcAddress(`glWindowPos4sMESA`);
  if (glWindowPos4sMESA is null) assert(0, `OpenGL function 'glWindowPos4sMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4sMESA'\n"); }
  glWindowPos4sMESA(a0,a1,a2,a3,);
};
__gshared glbfn_glWindowPos4svMESA glWindowPos4svMESA = function void (const(GLshort)* a0) nothrow {
  glWindowPos4svMESA = cast(glbfn_glWindowPos4svMESA)glGetProcAddress(`glWindowPos4svMESA`);
  if (glWindowPos4svMESA is null) assert(0, `OpenGL function 'glWindowPos4svMESA' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWindowPos4svMESA'\n"); }
  glWindowPos4svMESA(a0,);
};
__gshared glbfn_glBeginConditionalRenderNVX glBeginConditionalRenderNVX = function void (GLuint a0) nothrow {
  glBeginConditionalRenderNVX = cast(glbfn_glBeginConditionalRenderNVX)glGetProcAddress(`glBeginConditionalRenderNVX`);
  if (glBeginConditionalRenderNVX is null) assert(0, `OpenGL function 'glBeginConditionalRenderNVX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginConditionalRenderNVX'\n"); }
  glBeginConditionalRenderNVX(a0,);
};
__gshared glbfn_glEndConditionalRenderNVX glEndConditionalRenderNVX = function void () nothrow {
  glEndConditionalRenderNVX = cast(glbfn_glEndConditionalRenderNVX)glGetProcAddress(`glEndConditionalRenderNVX`);
  if (glEndConditionalRenderNVX is null) assert(0, `OpenGL function 'glEndConditionalRenderNVX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndConditionalRenderNVX'\n"); }
  glEndConditionalRenderNVX();
};
__gshared glbfn_glMultiDrawArraysIndirectBindlessNV glMultiDrawArraysIndirectBindlessNV = function void (GLenum a0, const(void)* a1, GLsizei a2, GLsizei a3, GLint a4) nothrow {
  glMultiDrawArraysIndirectBindlessNV = cast(glbfn_glMultiDrawArraysIndirectBindlessNV)glGetProcAddress(`glMultiDrawArraysIndirectBindlessNV`);
  if (glMultiDrawArraysIndirectBindlessNV is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawArraysIndirectBindlessNV'\n"); }
  glMultiDrawArraysIndirectBindlessNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiDrawElementsIndirectBindlessNV glMultiDrawElementsIndirectBindlessNV = function void (GLenum a0, GLenum a1, const(void)* a2, GLsizei a3, GLsizei a4, GLint a5) nothrow {
  glMultiDrawElementsIndirectBindlessNV = cast(glbfn_glMultiDrawElementsIndirectBindlessNV)glGetProcAddress(`glMultiDrawElementsIndirectBindlessNV`);
  if (glMultiDrawElementsIndirectBindlessNV is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementsIndirectBindlessNV'\n"); }
  glMultiDrawElementsIndirectBindlessNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glMultiDrawArraysIndirectBindlessCountNV glMultiDrawArraysIndirectBindlessCountNV = function void (GLenum a0, const(void)* a1, GLsizei a2, GLsizei a3, GLsizei a4, GLint a5) nothrow {
  glMultiDrawArraysIndirectBindlessCountNV = cast(glbfn_glMultiDrawArraysIndirectBindlessCountNV)glGetProcAddress(`glMultiDrawArraysIndirectBindlessCountNV`);
  if (glMultiDrawArraysIndirectBindlessCountNV is null) assert(0, `OpenGL function 'glMultiDrawArraysIndirectBindlessCountNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawArraysIndirectBindlessCountNV'\n"); }
  glMultiDrawArraysIndirectBindlessCountNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glMultiDrawElementsIndirectBindlessCountNV glMultiDrawElementsIndirectBindlessCountNV = function void (GLenum a0, GLenum a1, const(void)* a2, GLsizei a3, GLsizei a4, GLsizei a5, GLint a6) nothrow {
  glMultiDrawElementsIndirectBindlessCountNV = cast(glbfn_glMultiDrawElementsIndirectBindlessCountNV)glGetProcAddress(`glMultiDrawElementsIndirectBindlessCountNV`);
  if (glMultiDrawElementsIndirectBindlessCountNV is null) assert(0, `OpenGL function 'glMultiDrawElementsIndirectBindlessCountNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiDrawElementsIndirectBindlessCountNV'\n"); }
  glMultiDrawElementsIndirectBindlessCountNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetTextureHandleNV glGetTextureHandleNV = function GLuint64 (GLuint a0) nothrow {
  glGetTextureHandleNV = cast(glbfn_glGetTextureHandleNV)glGetProcAddress(`glGetTextureHandleNV`);
  if (glGetTextureHandleNV is null) assert(0, `OpenGL function 'glGetTextureHandleNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureHandleNV'\n"); }
  return glGetTextureHandleNV(a0,);
};
__gshared glbfn_glGetTextureSamplerHandleNV glGetTextureSamplerHandleNV = function GLuint64 (GLuint a0, GLuint a1) nothrow {
  glGetTextureSamplerHandleNV = cast(glbfn_glGetTextureSamplerHandleNV)glGetProcAddress(`glGetTextureSamplerHandleNV`);
  if (glGetTextureSamplerHandleNV is null) assert(0, `OpenGL function 'glGetTextureSamplerHandleNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTextureSamplerHandleNV'\n"); }
  return glGetTextureSamplerHandleNV(a0,a1,);
};
__gshared glbfn_glMakeTextureHandleResidentNV glMakeTextureHandleResidentNV = function void (GLuint64 a0) nothrow {
  glMakeTextureHandleResidentNV = cast(glbfn_glMakeTextureHandleResidentNV)glGetProcAddress(`glMakeTextureHandleResidentNV`);
  if (glMakeTextureHandleResidentNV is null) assert(0, `OpenGL function 'glMakeTextureHandleResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeTextureHandleResidentNV'\n"); }
  glMakeTextureHandleResidentNV(a0,);
};
__gshared glbfn_glMakeTextureHandleNonResidentNV glMakeTextureHandleNonResidentNV = function void (GLuint64 a0) nothrow {
  glMakeTextureHandleNonResidentNV = cast(glbfn_glMakeTextureHandleNonResidentNV)glGetProcAddress(`glMakeTextureHandleNonResidentNV`);
  if (glMakeTextureHandleNonResidentNV is null) assert(0, `OpenGL function 'glMakeTextureHandleNonResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeTextureHandleNonResidentNV'\n"); }
  glMakeTextureHandleNonResidentNV(a0,);
};
__gshared glbfn_glGetImageHandleNV glGetImageHandleNV = function GLuint64 (GLuint a0, GLint a1, GLboolean a2, GLint a3, GLenum a4) nothrow {
  glGetImageHandleNV = cast(glbfn_glGetImageHandleNV)glGetProcAddress(`glGetImageHandleNV`);
  if (glGetImageHandleNV is null) assert(0, `OpenGL function 'glGetImageHandleNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetImageHandleNV'\n"); }
  return glGetImageHandleNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMakeImageHandleResidentNV glMakeImageHandleResidentNV = function void (GLuint64 a0, GLenum a1) nothrow {
  glMakeImageHandleResidentNV = cast(glbfn_glMakeImageHandleResidentNV)glGetProcAddress(`glMakeImageHandleResidentNV`);
  if (glMakeImageHandleResidentNV is null) assert(0, `OpenGL function 'glMakeImageHandleResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeImageHandleResidentNV'\n"); }
  glMakeImageHandleResidentNV(a0,a1,);
};
__gshared glbfn_glMakeImageHandleNonResidentNV glMakeImageHandleNonResidentNV = function void (GLuint64 a0) nothrow {
  glMakeImageHandleNonResidentNV = cast(glbfn_glMakeImageHandleNonResidentNV)glGetProcAddress(`glMakeImageHandleNonResidentNV`);
  if (glMakeImageHandleNonResidentNV is null) assert(0, `OpenGL function 'glMakeImageHandleNonResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeImageHandleNonResidentNV'\n"); }
  glMakeImageHandleNonResidentNV(a0,);
};
__gshared glbfn_glUniformHandleui64NV glUniformHandleui64NV = function void (GLint a0, GLuint64 a1) nothrow {
  glUniformHandleui64NV = cast(glbfn_glUniformHandleui64NV)glGetProcAddress(`glUniformHandleui64NV`);
  if (glUniformHandleui64NV is null) assert(0, `OpenGL function 'glUniformHandleui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformHandleui64NV'\n"); }
  glUniformHandleui64NV(a0,a1,);
};
__gshared glbfn_glUniformHandleui64vNV glUniformHandleui64vNV = function void (GLint a0, GLsizei a1, const(GLuint64)* a2) nothrow {
  glUniformHandleui64vNV = cast(glbfn_glUniformHandleui64vNV)glGetProcAddress(`glUniformHandleui64vNV`);
  if (glUniformHandleui64vNV is null) assert(0, `OpenGL function 'glUniformHandleui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformHandleui64vNV'\n"); }
  glUniformHandleui64vNV(a0,a1,a2,);
};
__gshared glbfn_glProgramUniformHandleui64NV glProgramUniformHandleui64NV = function void (GLuint a0, GLint a1, GLuint64 a2) nothrow {
  glProgramUniformHandleui64NV = cast(glbfn_glProgramUniformHandleui64NV)glGetProcAddress(`glProgramUniformHandleui64NV`);
  if (glProgramUniformHandleui64NV is null) assert(0, `OpenGL function 'glProgramUniformHandleui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformHandleui64NV'\n"); }
  glProgramUniformHandleui64NV(a0,a1,a2,);
};
__gshared glbfn_glProgramUniformHandleui64vNV glProgramUniformHandleui64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64)* a3) nothrow {
  glProgramUniformHandleui64vNV = cast(glbfn_glProgramUniformHandleui64vNV)glGetProcAddress(`glProgramUniformHandleui64vNV`);
  if (glProgramUniformHandleui64vNV is null) assert(0, `OpenGL function 'glProgramUniformHandleui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformHandleui64vNV'\n"); }
  glProgramUniformHandleui64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glIsTextureHandleResidentNV glIsTextureHandleResidentNV = function GLboolean (GLuint64 a0) nothrow {
  glIsTextureHandleResidentNV = cast(glbfn_glIsTextureHandleResidentNV)glGetProcAddress(`glIsTextureHandleResidentNV`);
  if (glIsTextureHandleResidentNV is null) assert(0, `OpenGL function 'glIsTextureHandleResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsTextureHandleResidentNV'\n"); }
  return glIsTextureHandleResidentNV(a0,);
};
__gshared glbfn_glIsImageHandleResidentNV glIsImageHandleResidentNV = function GLboolean (GLuint64 a0) nothrow {
  glIsImageHandleResidentNV = cast(glbfn_glIsImageHandleResidentNV)glGetProcAddress(`glIsImageHandleResidentNV`);
  if (glIsImageHandleResidentNV is null) assert(0, `OpenGL function 'glIsImageHandleResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsImageHandleResidentNV'\n"); }
  return glIsImageHandleResidentNV(a0,);
};
__gshared glbfn_glBlendParameteriNV glBlendParameteriNV = function void (GLenum a0, GLint a1) nothrow {
  glBlendParameteriNV = cast(glbfn_glBlendParameteriNV)glGetProcAddress(`glBlendParameteriNV`);
  if (glBlendParameteriNV is null) assert(0, `OpenGL function 'glBlendParameteriNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendParameteriNV'\n"); }
  glBlendParameteriNV(a0,a1,);
};
__gshared glbfn_glBlendBarrierNV glBlendBarrierNV = function void () nothrow {
  glBlendBarrierNV = cast(glbfn_glBlendBarrierNV)glGetProcAddress(`glBlendBarrierNV`);
  if (glBlendBarrierNV is null) assert(0, `OpenGL function 'glBlendBarrierNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendBarrierNV'\n"); }
  glBlendBarrierNV();
};
__gshared glbfn_glCreateStatesNV glCreateStatesNV = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateStatesNV = cast(glbfn_glCreateStatesNV)glGetProcAddress(`glCreateStatesNV`);
  if (glCreateStatesNV is null) assert(0, `OpenGL function 'glCreateStatesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateStatesNV'\n"); }
  glCreateStatesNV(a0,a1,);
};
__gshared glbfn_glDeleteStatesNV glDeleteStatesNV = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteStatesNV = cast(glbfn_glDeleteStatesNV)glGetProcAddress(`glDeleteStatesNV`);
  if (glDeleteStatesNV is null) assert(0, `OpenGL function 'glDeleteStatesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteStatesNV'\n"); }
  glDeleteStatesNV(a0,a1,);
};
__gshared glbfn_glIsStateNV glIsStateNV = function GLboolean (GLuint a0) nothrow {
  glIsStateNV = cast(glbfn_glIsStateNV)glGetProcAddress(`glIsStateNV`);
  if (glIsStateNV is null) assert(0, `OpenGL function 'glIsStateNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsStateNV'\n"); }
  return glIsStateNV(a0,);
};
__gshared glbfn_glStateCaptureNV glStateCaptureNV = function void (GLuint a0, GLenum a1) nothrow {
  glStateCaptureNV = cast(glbfn_glStateCaptureNV)glGetProcAddress(`glStateCaptureNV`);
  if (glStateCaptureNV is null) assert(0, `OpenGL function 'glStateCaptureNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStateCaptureNV'\n"); }
  glStateCaptureNV(a0,a1,);
};
__gshared glbfn_glGetCommandHeaderNV glGetCommandHeaderNV = function GLuint (GLenum a0, GLuint a1) nothrow {
  glGetCommandHeaderNV = cast(glbfn_glGetCommandHeaderNV)glGetProcAddress(`glGetCommandHeaderNV`);
  if (glGetCommandHeaderNV is null) assert(0, `OpenGL function 'glGetCommandHeaderNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCommandHeaderNV'\n"); }
  return glGetCommandHeaderNV(a0,a1,);
};
__gshared glbfn_glGetStageIndexNV glGetStageIndexNV = function GLushort (GLenum a0) nothrow {
  glGetStageIndexNV = cast(glbfn_glGetStageIndexNV)glGetProcAddress(`glGetStageIndexNV`);
  if (glGetStageIndexNV is null) assert(0, `OpenGL function 'glGetStageIndexNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetStageIndexNV'\n"); }
  return glGetStageIndexNV(a0,);
};
__gshared glbfn_glDrawCommandsNV glDrawCommandsNV = function void (GLenum a0, GLuint a1, const(GLintptr)* a2, const(GLsizei)* a3, GLuint a4) nothrow {
  glDrawCommandsNV = cast(glbfn_glDrawCommandsNV)glGetProcAddress(`glDrawCommandsNV`);
  if (glDrawCommandsNV is null) assert(0, `OpenGL function 'glDrawCommandsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawCommandsNV'\n"); }
  glDrawCommandsNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glDrawCommandsAddressNV glDrawCommandsAddressNV = function void (GLenum a0, const(GLuint64)* a1, const(GLsizei)* a2, GLuint a3) nothrow {
  glDrawCommandsAddressNV = cast(glbfn_glDrawCommandsAddressNV)glGetProcAddress(`glDrawCommandsAddressNV`);
  if (glDrawCommandsAddressNV is null) assert(0, `OpenGL function 'glDrawCommandsAddressNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawCommandsAddressNV'\n"); }
  glDrawCommandsAddressNV(a0,a1,a2,a3,);
};
__gshared glbfn_glDrawCommandsStatesNV glDrawCommandsStatesNV = function void (GLuint a0, const(GLintptr)* a1, const(GLsizei)* a2, const(GLuint)* a3, const(GLuint)* a4, GLuint a5) nothrow {
  glDrawCommandsStatesNV = cast(glbfn_glDrawCommandsStatesNV)glGetProcAddress(`glDrawCommandsStatesNV`);
  if (glDrawCommandsStatesNV is null) assert(0, `OpenGL function 'glDrawCommandsStatesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawCommandsStatesNV'\n"); }
  glDrawCommandsStatesNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glDrawCommandsStatesAddressNV glDrawCommandsStatesAddressNV = function void (const(GLuint64)* a0, const(GLsizei)* a1, const(GLuint)* a2, const(GLuint)* a3, GLuint a4) nothrow {
  glDrawCommandsStatesAddressNV = cast(glbfn_glDrawCommandsStatesAddressNV)glGetProcAddress(`glDrawCommandsStatesAddressNV`);
  if (glDrawCommandsStatesAddressNV is null) assert(0, `OpenGL function 'glDrawCommandsStatesAddressNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawCommandsStatesAddressNV'\n"); }
  glDrawCommandsStatesAddressNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glCreateCommandListsNV glCreateCommandListsNV = function void (GLsizei a0, GLuint* a1) nothrow {
  glCreateCommandListsNV = cast(glbfn_glCreateCommandListsNV)glGetProcAddress(`glCreateCommandListsNV`);
  if (glCreateCommandListsNV is null) assert(0, `OpenGL function 'glCreateCommandListsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCreateCommandListsNV'\n"); }
  glCreateCommandListsNV(a0,a1,);
};
__gshared glbfn_glDeleteCommandListsNV glDeleteCommandListsNV = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteCommandListsNV = cast(glbfn_glDeleteCommandListsNV)glGetProcAddress(`glDeleteCommandListsNV`);
  if (glDeleteCommandListsNV is null) assert(0, `OpenGL function 'glDeleteCommandListsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteCommandListsNV'\n"); }
  glDeleteCommandListsNV(a0,a1,);
};
__gshared glbfn_glIsCommandListNV glIsCommandListNV = function GLboolean (GLuint a0) nothrow {
  glIsCommandListNV = cast(glbfn_glIsCommandListNV)glGetProcAddress(`glIsCommandListNV`);
  if (glIsCommandListNV is null) assert(0, `OpenGL function 'glIsCommandListNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsCommandListNV'\n"); }
  return glIsCommandListNV(a0,);
};
__gshared glbfn_glListDrawCommandsStatesClientNV glListDrawCommandsStatesClientNV = function void (GLuint a0, GLuint a1, const(void*)* a2, const(GLsizei)* a3, const(GLuint)* a4, const(GLuint)* a5, GLuint a6) nothrow {
  glListDrawCommandsStatesClientNV = cast(glbfn_glListDrawCommandsStatesClientNV)glGetProcAddress(`glListDrawCommandsStatesClientNV`);
  if (glListDrawCommandsStatesClientNV is null) assert(0, `OpenGL function 'glListDrawCommandsStatesClientNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glListDrawCommandsStatesClientNV'\n"); }
  glListDrawCommandsStatesClientNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCommandListSegmentsNV glCommandListSegmentsNV = function void (GLuint a0, GLuint a1) nothrow {
  glCommandListSegmentsNV = cast(glbfn_glCommandListSegmentsNV)glGetProcAddress(`glCommandListSegmentsNV`);
  if (glCommandListSegmentsNV is null) assert(0, `OpenGL function 'glCommandListSegmentsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCommandListSegmentsNV'\n"); }
  glCommandListSegmentsNV(a0,a1,);
};
__gshared glbfn_glCompileCommandListNV glCompileCommandListNV = function void (GLuint a0) nothrow {
  glCompileCommandListNV = cast(glbfn_glCompileCommandListNV)glGetProcAddress(`glCompileCommandListNV`);
  if (glCompileCommandListNV is null) assert(0, `OpenGL function 'glCompileCommandListNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCompileCommandListNV'\n"); }
  glCompileCommandListNV(a0,);
};
__gshared glbfn_glCallCommandListNV glCallCommandListNV = function void (GLuint a0) nothrow {
  glCallCommandListNV = cast(glbfn_glCallCommandListNV)glGetProcAddress(`glCallCommandListNV`);
  if (glCallCommandListNV is null) assert(0, `OpenGL function 'glCallCommandListNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCallCommandListNV'\n"); }
  glCallCommandListNV(a0,);
};
__gshared glbfn_glBeginConditionalRenderNV glBeginConditionalRenderNV = function void (GLuint a0, GLenum a1) nothrow {
  glBeginConditionalRenderNV = cast(glbfn_glBeginConditionalRenderNV)glGetProcAddress(`glBeginConditionalRenderNV`);
  if (glBeginConditionalRenderNV is null) assert(0, `OpenGL function 'glBeginConditionalRenderNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginConditionalRenderNV'\n"); }
  glBeginConditionalRenderNV(a0,a1,);
};
__gshared glbfn_glEndConditionalRenderNV glEndConditionalRenderNV = function void () nothrow {
  glEndConditionalRenderNV = cast(glbfn_glEndConditionalRenderNV)glGetProcAddress(`glEndConditionalRenderNV`);
  if (glEndConditionalRenderNV is null) assert(0, `OpenGL function 'glEndConditionalRenderNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndConditionalRenderNV'\n"); }
  glEndConditionalRenderNV();
};
__gshared glbfn_glSubpixelPrecisionBiasNV glSubpixelPrecisionBiasNV = function void (GLuint a0, GLuint a1) nothrow {
  glSubpixelPrecisionBiasNV = cast(glbfn_glSubpixelPrecisionBiasNV)glGetProcAddress(`glSubpixelPrecisionBiasNV`);
  if (glSubpixelPrecisionBiasNV is null) assert(0, `OpenGL function 'glSubpixelPrecisionBiasNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSubpixelPrecisionBiasNV'\n"); }
  glSubpixelPrecisionBiasNV(a0,a1,);
};
__gshared glbfn_glConservativeRasterParameterfNV glConservativeRasterParameterfNV = function void (GLenum a0, GLfloat a1) nothrow {
  glConservativeRasterParameterfNV = cast(glbfn_glConservativeRasterParameterfNV)glGetProcAddress(`glConservativeRasterParameterfNV`);
  if (glConservativeRasterParameterfNV is null) assert(0, `OpenGL function 'glConservativeRasterParameterfNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConservativeRasterParameterfNV'\n"); }
  glConservativeRasterParameterfNV(a0,a1,);
};
__gshared glbfn_glCopyImageSubDataNV glCopyImageSubDataNV = function void (GLuint a0, GLenum a1, GLint a2, GLint a3, GLint a4, GLint a5, GLuint a6, GLenum a7, GLint a8, GLint a9, GLint a10, GLint a11, GLsizei a12, GLsizei a13, GLsizei a14) nothrow {
  glCopyImageSubDataNV = cast(glbfn_glCopyImageSubDataNV)glGetProcAddress(`glCopyImageSubDataNV`);
  if (glCopyImageSubDataNV is null) assert(0, `OpenGL function 'glCopyImageSubDataNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyImageSubDataNV'\n"); }
  glCopyImageSubDataNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
};
__gshared glbfn_glDepthRangedNV glDepthRangedNV = function void (GLdouble a0, GLdouble a1) nothrow {
  glDepthRangedNV = cast(glbfn_glDepthRangedNV)glGetProcAddress(`glDepthRangedNV`);
  if (glDepthRangedNV is null) assert(0, `OpenGL function 'glDepthRangedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthRangedNV'\n"); }
  glDepthRangedNV(a0,a1,);
};
__gshared glbfn_glClearDepthdNV glClearDepthdNV = function void (GLdouble a0) nothrow {
  glClearDepthdNV = cast(glbfn_glClearDepthdNV)glGetProcAddress(`glClearDepthdNV`);
  if (glClearDepthdNV is null) assert(0, `OpenGL function 'glClearDepthdNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearDepthdNV'\n"); }
  glClearDepthdNV(a0,);
};
__gshared glbfn_glDepthBoundsdNV glDepthBoundsdNV = function void (GLdouble a0, GLdouble a1) nothrow {
  glDepthBoundsdNV = cast(glbfn_glDepthBoundsdNV)glGetProcAddress(`glDepthBoundsdNV`);
  if (glDepthBoundsdNV is null) assert(0, `OpenGL function 'glDepthBoundsdNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthBoundsdNV'\n"); }
  glDepthBoundsdNV(a0,a1,);
};
__gshared glbfn_glDrawTextureNV glDrawTextureNV = function void (GLuint a0, GLuint a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7, GLfloat a8, GLfloat a9, GLfloat a10) nothrow {
  glDrawTextureNV = cast(glbfn_glDrawTextureNV)glGetProcAddress(`glDrawTextureNV`);
  if (glDrawTextureNV is null) assert(0, `OpenGL function 'glDrawTextureNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawTextureNV'\n"); }
  glDrawTextureNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glMapControlPointsNV glMapControlPointsNV = function void (GLenum a0, GLuint a1, GLenum a2, GLsizei a3, GLsizei a4, GLint a5, GLint a6, GLboolean a7, const(void)* a8) nothrow {
  glMapControlPointsNV = cast(glbfn_glMapControlPointsNV)glGetProcAddress(`glMapControlPointsNV`);
  if (glMapControlPointsNV is null) assert(0, `OpenGL function 'glMapControlPointsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapControlPointsNV'\n"); }
  glMapControlPointsNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glMapParameterivNV glMapParameterivNV = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glMapParameterivNV = cast(glbfn_glMapParameterivNV)glGetProcAddress(`glMapParameterivNV`);
  if (glMapParameterivNV is null) assert(0, `OpenGL function 'glMapParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapParameterivNV'\n"); }
  glMapParameterivNV(a0,a1,a2,);
};
__gshared glbfn_glMapParameterfvNV glMapParameterfvNV = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glMapParameterfvNV = cast(glbfn_glMapParameterfvNV)glGetProcAddress(`glMapParameterfvNV`);
  if (glMapParameterfvNV is null) assert(0, `OpenGL function 'glMapParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapParameterfvNV'\n"); }
  glMapParameterfvNV(a0,a1,a2,);
};
__gshared glbfn_glGetMapControlPointsNV glGetMapControlPointsNV = function void (GLenum a0, GLuint a1, GLenum a2, GLsizei a3, GLsizei a4, GLboolean a5, void* a6) nothrow {
  glGetMapControlPointsNV = cast(glbfn_glGetMapControlPointsNV)glGetProcAddress(`glGetMapControlPointsNV`);
  if (glGetMapControlPointsNV is null) assert(0, `OpenGL function 'glGetMapControlPointsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapControlPointsNV'\n"); }
  glGetMapControlPointsNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetMapParameterivNV glGetMapParameterivNV = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetMapParameterivNV = cast(glbfn_glGetMapParameterivNV)glGetProcAddress(`glGetMapParameterivNV`);
  if (glGetMapParameterivNV is null) assert(0, `OpenGL function 'glGetMapParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapParameterivNV'\n"); }
  glGetMapParameterivNV(a0,a1,a2,);
};
__gshared glbfn_glGetMapParameterfvNV glGetMapParameterfvNV = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetMapParameterfvNV = cast(glbfn_glGetMapParameterfvNV)glGetProcAddress(`glGetMapParameterfvNV`);
  if (glGetMapParameterfvNV is null) assert(0, `OpenGL function 'glGetMapParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapParameterfvNV'\n"); }
  glGetMapParameterfvNV(a0,a1,a2,);
};
__gshared glbfn_glGetMapAttribParameterivNV glGetMapAttribParameterivNV = function void (GLenum a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetMapAttribParameterivNV = cast(glbfn_glGetMapAttribParameterivNV)glGetProcAddress(`glGetMapAttribParameterivNV`);
  if (glGetMapAttribParameterivNV is null) assert(0, `OpenGL function 'glGetMapAttribParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapAttribParameterivNV'\n"); }
  glGetMapAttribParameterivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetMapAttribParameterfvNV glGetMapAttribParameterfvNV = function void (GLenum a0, GLuint a1, GLenum a2, GLfloat* a3) nothrow {
  glGetMapAttribParameterfvNV = cast(glbfn_glGetMapAttribParameterfvNV)glGetProcAddress(`glGetMapAttribParameterfvNV`);
  if (glGetMapAttribParameterfvNV is null) assert(0, `OpenGL function 'glGetMapAttribParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapAttribParameterfvNV'\n"); }
  glGetMapAttribParameterfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glEvalMapsNV glEvalMapsNV = function void (GLenum a0, GLenum a1) nothrow {
  glEvalMapsNV = cast(glbfn_glEvalMapsNV)glGetProcAddress(`glEvalMapsNV`);
  if (glEvalMapsNV is null) assert(0, `OpenGL function 'glEvalMapsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalMapsNV'\n"); }
  glEvalMapsNV(a0,a1,);
};
__gshared glbfn_glGetMultisamplefvNV glGetMultisamplefvNV = function void (GLenum a0, GLuint a1, GLfloat* a2) nothrow {
  glGetMultisamplefvNV = cast(glbfn_glGetMultisamplefvNV)glGetProcAddress(`glGetMultisamplefvNV`);
  if (glGetMultisamplefvNV is null) assert(0, `OpenGL function 'glGetMultisamplefvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMultisamplefvNV'\n"); }
  glGetMultisamplefvNV(a0,a1,a2,);
};
__gshared glbfn_glSampleMaskIndexedNV glSampleMaskIndexedNV = function void (GLuint a0, GLbitfield a1) nothrow {
  glSampleMaskIndexedNV = cast(glbfn_glSampleMaskIndexedNV)glGetProcAddress(`glSampleMaskIndexedNV`);
  if (glSampleMaskIndexedNV is null) assert(0, `OpenGL function 'glSampleMaskIndexedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleMaskIndexedNV'\n"); }
  glSampleMaskIndexedNV(a0,a1,);
};
__gshared glbfn_glTexRenderbufferNV glTexRenderbufferNV = function void (GLenum a0, GLuint a1) nothrow {
  glTexRenderbufferNV = cast(glbfn_glTexRenderbufferNV)glGetProcAddress(`glTexRenderbufferNV`);
  if (glTexRenderbufferNV is null) assert(0, `OpenGL function 'glTexRenderbufferNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexRenderbufferNV'\n"); }
  glTexRenderbufferNV(a0,a1,);
};
__gshared glbfn_glDeleteFencesNV glDeleteFencesNV = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteFencesNV = cast(glbfn_glDeleteFencesNV)glGetProcAddress(`glDeleteFencesNV`);
  if (glDeleteFencesNV is null) assert(0, `OpenGL function 'glDeleteFencesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteFencesNV'\n"); }
  glDeleteFencesNV(a0,a1,);
};
__gshared glbfn_glGenFencesNV glGenFencesNV = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenFencesNV = cast(glbfn_glGenFencesNV)glGetProcAddress(`glGenFencesNV`);
  if (glGenFencesNV is null) assert(0, `OpenGL function 'glGenFencesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenFencesNV'\n"); }
  glGenFencesNV(a0,a1,);
};
__gshared glbfn_glIsFenceNV glIsFenceNV = function GLboolean (GLuint a0) nothrow {
  glIsFenceNV = cast(glbfn_glIsFenceNV)glGetProcAddress(`glIsFenceNV`);
  if (glIsFenceNV is null) assert(0, `OpenGL function 'glIsFenceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsFenceNV'\n"); }
  return glIsFenceNV(a0,);
};
__gshared glbfn_glTestFenceNV glTestFenceNV = function GLboolean (GLuint a0) nothrow {
  glTestFenceNV = cast(glbfn_glTestFenceNV)glGetProcAddress(`glTestFenceNV`);
  if (glTestFenceNV is null) assert(0, `OpenGL function 'glTestFenceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTestFenceNV'\n"); }
  return glTestFenceNV(a0,);
};
__gshared glbfn_glGetFenceivNV glGetFenceivNV = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetFenceivNV = cast(glbfn_glGetFenceivNV)glGetProcAddress(`glGetFenceivNV`);
  if (glGetFenceivNV is null) assert(0, `OpenGL function 'glGetFenceivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFenceivNV'\n"); }
  glGetFenceivNV(a0,a1,a2,);
};
__gshared glbfn_glFinishFenceNV glFinishFenceNV = function void (GLuint a0) nothrow {
  glFinishFenceNV = cast(glbfn_glFinishFenceNV)glGetProcAddress(`glFinishFenceNV`);
  if (glFinishFenceNV is null) assert(0, `OpenGL function 'glFinishFenceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFinishFenceNV'\n"); }
  glFinishFenceNV(a0,);
};
__gshared glbfn_glSetFenceNV glSetFenceNV = function void (GLuint a0, GLenum a1) nothrow {
  glSetFenceNV = cast(glbfn_glSetFenceNV)glGetProcAddress(`glSetFenceNV`);
  if (glSetFenceNV is null) assert(0, `OpenGL function 'glSetFenceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSetFenceNV'\n"); }
  glSetFenceNV(a0,a1,);
};
__gshared glbfn_glFragmentCoverageColorNV glFragmentCoverageColorNV = function void (GLuint a0) nothrow {
  glFragmentCoverageColorNV = cast(glbfn_glFragmentCoverageColorNV)glGetProcAddress(`glFragmentCoverageColorNV`);
  if (glFragmentCoverageColorNV is null) assert(0, `OpenGL function 'glFragmentCoverageColorNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentCoverageColorNV'\n"); }
  glFragmentCoverageColorNV(a0,);
};
__gshared glbfn_glProgramNamedParameter4fNV glProgramNamedParameter4fNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6) nothrow {
  glProgramNamedParameter4fNV = cast(glbfn_glProgramNamedParameter4fNV)glGetProcAddress(`glProgramNamedParameter4fNV`);
  if (glProgramNamedParameter4fNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramNamedParameter4fNV'\n"); }
  glProgramNamedParameter4fNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glProgramNamedParameter4fvNV glProgramNamedParameter4fvNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2, const(GLfloat)* a3) nothrow {
  glProgramNamedParameter4fvNV = cast(glbfn_glProgramNamedParameter4fvNV)glGetProcAddress(`glProgramNamedParameter4fvNV`);
  if (glProgramNamedParameter4fvNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramNamedParameter4fvNV'\n"); }
  glProgramNamedParameter4fvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramNamedParameter4dNV glProgramNamedParameter4dNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2, GLdouble a3, GLdouble a4, GLdouble a5, GLdouble a6) nothrow {
  glProgramNamedParameter4dNV = cast(glbfn_glProgramNamedParameter4dNV)glGetProcAddress(`glProgramNamedParameter4dNV`);
  if (glProgramNamedParameter4dNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4dNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramNamedParameter4dNV'\n"); }
  glProgramNamedParameter4dNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glProgramNamedParameter4dvNV glProgramNamedParameter4dvNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2, const(GLdouble)* a3) nothrow {
  glProgramNamedParameter4dvNV = cast(glbfn_glProgramNamedParameter4dvNV)glGetProcAddress(`glProgramNamedParameter4dvNV`);
  if (glProgramNamedParameter4dvNV is null) assert(0, `OpenGL function 'glProgramNamedParameter4dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramNamedParameter4dvNV'\n"); }
  glProgramNamedParameter4dvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2, GLfloat* a3) nothrow {
  glGetProgramNamedParameterfvNV = cast(glbfn_glGetProgramNamedParameterfvNV)glGetProcAddress(`glGetProgramNamedParameterfvNV`);
  if (glGetProgramNamedParameterfvNV is null) assert(0, `OpenGL function 'glGetProgramNamedParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramNamedParameterfvNV'\n"); }
  glGetProgramNamedParameterfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2, GLdouble* a3) nothrow {
  glGetProgramNamedParameterdvNV = cast(glbfn_glGetProgramNamedParameterdvNV)glGetProcAddress(`glGetProgramNamedParameterdvNV`);
  if (glGetProgramNamedParameterdvNV is null) assert(0, `OpenGL function 'glGetProgramNamedParameterdvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramNamedParameterdvNV'\n"); }
  glGetProgramNamedParameterdvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glCoverageModulationTableNV glCoverageModulationTableNV = function void (GLsizei a0, const(GLfloat)* a1) nothrow {
  glCoverageModulationTableNV = cast(glbfn_glCoverageModulationTableNV)glGetProcAddress(`glCoverageModulationTableNV`);
  if (glCoverageModulationTableNV is null) assert(0, `OpenGL function 'glCoverageModulationTableNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCoverageModulationTableNV'\n"); }
  glCoverageModulationTableNV(a0,a1,);
};
__gshared glbfn_glGetCoverageModulationTableNV glGetCoverageModulationTableNV = function void (GLsizei a0, GLfloat* a1) nothrow {
  glGetCoverageModulationTableNV = cast(glbfn_glGetCoverageModulationTableNV)glGetProcAddress(`glGetCoverageModulationTableNV`);
  if (glGetCoverageModulationTableNV is null) assert(0, `OpenGL function 'glGetCoverageModulationTableNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCoverageModulationTableNV'\n"); }
  glGetCoverageModulationTableNV(a0,a1,);
};
__gshared glbfn_glCoverageModulationNV glCoverageModulationNV = function void (GLenum a0) nothrow {
  glCoverageModulationNV = cast(glbfn_glCoverageModulationNV)glGetProcAddress(`glCoverageModulationNV`);
  if (glCoverageModulationNV is null) assert(0, `OpenGL function 'glCoverageModulationNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCoverageModulationNV'\n"); }
  glCoverageModulationNV(a0,);
};
__gshared glbfn_glRenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV = function void (GLenum a0, GLsizei a1, GLsizei a2, GLenum a3, GLsizei a4, GLsizei a5) nothrow {
  glRenderbufferStorageMultisampleCoverageNV = cast(glbfn_glRenderbufferStorageMultisampleCoverageNV)glGetProcAddress(`glRenderbufferStorageMultisampleCoverageNV`);
  if (glRenderbufferStorageMultisampleCoverageNV is null) assert(0, `OpenGL function 'glRenderbufferStorageMultisampleCoverageNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRenderbufferStorageMultisampleCoverageNV'\n"); }
  glRenderbufferStorageMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramVertexLimitNV glProgramVertexLimitNV = function void (GLenum a0, GLint a1) nothrow {
  glProgramVertexLimitNV = cast(glbfn_glProgramVertexLimitNV)glGetProcAddress(`glProgramVertexLimitNV`);
  if (glProgramVertexLimitNV is null) assert(0, `OpenGL function 'glProgramVertexLimitNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramVertexLimitNV'\n"); }
  glProgramVertexLimitNV(a0,a1,);
};
__gshared glbfn_glFramebufferTextureEXT glFramebufferTextureEXT = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3) nothrow {
  glFramebufferTextureEXT = cast(glbfn_glFramebufferTextureEXT)glGetProcAddress(`glFramebufferTextureEXT`);
  if (glFramebufferTextureEXT is null) assert(0, `OpenGL function 'glFramebufferTextureEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureEXT'\n"); }
  glFramebufferTextureEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glFramebufferTextureFaceEXT glFramebufferTextureFaceEXT = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3, GLenum a4) nothrow {
  glFramebufferTextureFaceEXT = cast(glbfn_glFramebufferTextureFaceEXT)glGetProcAddress(`glFramebufferTextureFaceEXT`);
  if (glFramebufferTextureFaceEXT is null) assert(0, `OpenGL function 'glFramebufferTextureFaceEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureFaceEXT'\n"); }
  glFramebufferTextureFaceEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramLocalParameterI4iNV glProgramLocalParameterI4iNV = function void (GLenum a0, GLuint a1, GLint a2, GLint a3, GLint a4, GLint a5) nothrow {
  glProgramLocalParameterI4iNV = cast(glbfn_glProgramLocalParameterI4iNV)glGetProcAddress(`glProgramLocalParameterI4iNV`);
  if (glProgramLocalParameterI4iNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4iNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameterI4iNV'\n"); }
  glProgramLocalParameterI4iNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV = function void (GLenum a0, GLuint a1, const(GLint)* a2) nothrow {
  glProgramLocalParameterI4ivNV = cast(glbfn_glProgramLocalParameterI4ivNV)glGetProcAddress(`glProgramLocalParameterI4ivNV`);
  if (glProgramLocalParameterI4ivNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4ivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameterI4ivNV'\n"); }
  glProgramLocalParameterI4ivNV(a0,a1,a2,);
};
__gshared glbfn_glProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramLocalParametersI4ivNV = cast(glbfn_glProgramLocalParametersI4ivNV)glGetProcAddress(`glProgramLocalParametersI4ivNV`);
  if (glProgramLocalParametersI4ivNV is null) assert(0, `OpenGL function 'glProgramLocalParametersI4ivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParametersI4ivNV'\n"); }
  glProgramLocalParametersI4ivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5) nothrow {
  glProgramLocalParameterI4uiNV = cast(glbfn_glProgramLocalParameterI4uiNV)glGetProcAddress(`glProgramLocalParameterI4uiNV`);
  if (glProgramLocalParameterI4uiNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uiNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameterI4uiNV'\n"); }
  glProgramLocalParameterI4uiNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV = function void (GLenum a0, GLuint a1, const(GLuint)* a2) nothrow {
  glProgramLocalParameterI4uivNV = cast(glbfn_glProgramLocalParameterI4uivNV)glGetProcAddress(`glProgramLocalParameterI4uivNV`);
  if (glProgramLocalParameterI4uivNV is null) assert(0, `OpenGL function 'glProgramLocalParameterI4uivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParameterI4uivNV'\n"); }
  glProgramLocalParameterI4uivNV(a0,a1,a2,);
};
__gshared glbfn_glProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramLocalParametersI4uivNV = cast(glbfn_glProgramLocalParametersI4uivNV)glGetProcAddress(`glProgramLocalParametersI4uivNV`);
  if (glProgramLocalParametersI4uivNV is null) assert(0, `OpenGL function 'glProgramLocalParametersI4uivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramLocalParametersI4uivNV'\n"); }
  glProgramLocalParametersI4uivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramEnvParameterI4iNV glProgramEnvParameterI4iNV = function void (GLenum a0, GLuint a1, GLint a2, GLint a3, GLint a4, GLint a5) nothrow {
  glProgramEnvParameterI4iNV = cast(glbfn_glProgramEnvParameterI4iNV)glGetProcAddress(`glProgramEnvParameterI4iNV`);
  if (glProgramEnvParameterI4iNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4iNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameterI4iNV'\n"); }
  glProgramEnvParameterI4iNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV = function void (GLenum a0, GLuint a1, const(GLint)* a2) nothrow {
  glProgramEnvParameterI4ivNV = cast(glbfn_glProgramEnvParameterI4ivNV)glGetProcAddress(`glProgramEnvParameterI4ivNV`);
  if (glProgramEnvParameterI4ivNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4ivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameterI4ivNV'\n"); }
  glProgramEnvParameterI4ivNV(a0,a1,a2,);
};
__gshared glbfn_glProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLint)* a3) nothrow {
  glProgramEnvParametersI4ivNV = cast(glbfn_glProgramEnvParametersI4ivNV)glGetProcAddress(`glProgramEnvParametersI4ivNV`);
  if (glProgramEnvParametersI4ivNV is null) assert(0, `OpenGL function 'glProgramEnvParametersI4ivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParametersI4ivNV'\n"); }
  glProgramEnvParametersI4ivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV = function void (GLenum a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4, GLuint a5) nothrow {
  glProgramEnvParameterI4uiNV = cast(glbfn_glProgramEnvParameterI4uiNV)glGetProcAddress(`glProgramEnvParameterI4uiNV`);
  if (glProgramEnvParameterI4uiNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uiNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameterI4uiNV'\n"); }
  glProgramEnvParameterI4uiNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV = function void (GLenum a0, GLuint a1, const(GLuint)* a2) nothrow {
  glProgramEnvParameterI4uivNV = cast(glbfn_glProgramEnvParameterI4uivNV)glGetProcAddress(`glProgramEnvParameterI4uivNV`);
  if (glProgramEnvParameterI4uivNV is null) assert(0, `OpenGL function 'glProgramEnvParameterI4uivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParameterI4uivNV'\n"); }
  glProgramEnvParameterI4uivNV(a0,a1,a2,);
};
__gshared glbfn_glProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glProgramEnvParametersI4uivNV = cast(glbfn_glProgramEnvParametersI4uivNV)glGetProcAddress(`glProgramEnvParametersI4uivNV`);
  if (glProgramEnvParametersI4uivNV is null) assert(0, `OpenGL function 'glProgramEnvParametersI4uivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramEnvParametersI4uivNV'\n"); }
  glProgramEnvParametersI4uivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV = function void (GLenum a0, GLuint a1, GLint* a2) nothrow {
  glGetProgramLocalParameterIivNV = cast(glbfn_glGetProgramLocalParameterIivNV)glGetProcAddress(`glGetProgramLocalParameterIivNV`);
  if (glGetProgramLocalParameterIivNV is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramLocalParameterIivNV'\n"); }
  glGetProgramLocalParameterIivNV(a0,a1,a2,);
};
__gshared glbfn_glGetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV = function void (GLenum a0, GLuint a1, GLuint* a2) nothrow {
  glGetProgramLocalParameterIuivNV = cast(glbfn_glGetProgramLocalParameterIuivNV)glGetProcAddress(`glGetProgramLocalParameterIuivNV`);
  if (glGetProgramLocalParameterIuivNV is null) assert(0, `OpenGL function 'glGetProgramLocalParameterIuivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramLocalParameterIuivNV'\n"); }
  glGetProgramLocalParameterIuivNV(a0,a1,a2,);
};
__gshared glbfn_glGetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV = function void (GLenum a0, GLuint a1, GLint* a2) nothrow {
  glGetProgramEnvParameterIivNV = cast(glbfn_glGetProgramEnvParameterIivNV)glGetProcAddress(`glGetProgramEnvParameterIivNV`);
  if (glGetProgramEnvParameterIivNV is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramEnvParameterIivNV'\n"); }
  glGetProgramEnvParameterIivNV(a0,a1,a2,);
};
__gshared glbfn_glGetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV = function void (GLenum a0, GLuint a1, GLuint* a2) nothrow {
  glGetProgramEnvParameterIuivNV = cast(glbfn_glGetProgramEnvParameterIuivNV)glGetProcAddress(`glGetProgramEnvParameterIuivNV`);
  if (glGetProgramEnvParameterIuivNV is null) assert(0, `OpenGL function 'glGetProgramEnvParameterIuivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramEnvParameterIuivNV'\n"); }
  glGetProgramEnvParameterIuivNV(a0,a1,a2,);
};
__gshared glbfn_glProgramSubroutineParametersuivNV glProgramSubroutineParametersuivNV = function void (GLenum a0, GLsizei a1, const(GLuint)* a2) nothrow {
  glProgramSubroutineParametersuivNV = cast(glbfn_glProgramSubroutineParametersuivNV)glGetProcAddress(`glProgramSubroutineParametersuivNV`);
  if (glProgramSubroutineParametersuivNV is null) assert(0, `OpenGL function 'glProgramSubroutineParametersuivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramSubroutineParametersuivNV'\n"); }
  glProgramSubroutineParametersuivNV(a0,a1,a2,);
};
__gshared glbfn_glGetProgramSubroutineParameteruivNV glGetProgramSubroutineParameteruivNV = function void (GLenum a0, GLuint a1, GLuint* a2) nothrow {
  glGetProgramSubroutineParameteruivNV = cast(glbfn_glGetProgramSubroutineParameteruivNV)glGetProcAddress(`glGetProgramSubroutineParameteruivNV`);
  if (glGetProgramSubroutineParameteruivNV is null) assert(0, `OpenGL function 'glGetProgramSubroutineParameteruivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramSubroutineParameteruivNV'\n"); }
  glGetProgramSubroutineParameteruivNV(a0,a1,a2,);
};
__gshared glbfn_glVertex2hNV glVertex2hNV = function void (GLhalfNV a0, GLhalfNV a1) nothrow {
  glVertex2hNV = cast(glbfn_glVertex2hNV)glGetProcAddress(`glVertex2hNV`);
  if (glVertex2hNV is null) assert(0, `OpenGL function 'glVertex2hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2hNV'\n"); }
  glVertex2hNV(a0,a1,);
};
__gshared glbfn_glVertex2hvNV glVertex2hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glVertex2hvNV = cast(glbfn_glVertex2hvNV)glGetProcAddress(`glVertex2hvNV`);
  if (glVertex2hvNV is null) assert(0, `OpenGL function 'glVertex2hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2hvNV'\n"); }
  glVertex2hvNV(a0,);
};
__gshared glbfn_glVertex3hNV glVertex3hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2) nothrow {
  glVertex3hNV = cast(glbfn_glVertex3hNV)glGetProcAddress(`glVertex3hNV`);
  if (glVertex3hNV is null) assert(0, `OpenGL function 'glVertex3hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3hNV'\n"); }
  glVertex3hNV(a0,a1,a2,);
};
__gshared glbfn_glVertex3hvNV glVertex3hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glVertex3hvNV = cast(glbfn_glVertex3hvNV)glGetProcAddress(`glVertex3hvNV`);
  if (glVertex3hvNV is null) assert(0, `OpenGL function 'glVertex3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3hvNV'\n"); }
  glVertex3hvNV(a0,);
};
__gshared glbfn_glVertex4hNV glVertex4hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2, GLhalfNV a3) nothrow {
  glVertex4hNV = cast(glbfn_glVertex4hNV)glGetProcAddress(`glVertex4hNV`);
  if (glVertex4hNV is null) assert(0, `OpenGL function 'glVertex4hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4hNV'\n"); }
  glVertex4hNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertex4hvNV glVertex4hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glVertex4hvNV = cast(glbfn_glVertex4hvNV)glGetProcAddress(`glVertex4hvNV`);
  if (glVertex4hvNV is null) assert(0, `OpenGL function 'glVertex4hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4hvNV'\n"); }
  glVertex4hvNV(a0,);
};
__gshared glbfn_glNormal3hNV glNormal3hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2) nothrow {
  glNormal3hNV = cast(glbfn_glNormal3hNV)glGetProcAddress(`glNormal3hNV`);
  if (glNormal3hNV is null) assert(0, `OpenGL function 'glNormal3hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3hNV'\n"); }
  glNormal3hNV(a0,a1,a2,);
};
__gshared glbfn_glNormal3hvNV glNormal3hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glNormal3hvNV = cast(glbfn_glNormal3hvNV)glGetProcAddress(`glNormal3hvNV`);
  if (glNormal3hvNV is null) assert(0, `OpenGL function 'glNormal3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3hvNV'\n"); }
  glNormal3hvNV(a0,);
};
__gshared glbfn_glColor3hNV glColor3hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2) nothrow {
  glColor3hNV = cast(glbfn_glColor3hNV)glGetProcAddress(`glColor3hNV`);
  if (glColor3hNV is null) assert(0, `OpenGL function 'glColor3hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3hNV'\n"); }
  glColor3hNV(a0,a1,a2,);
};
__gshared glbfn_glColor3hvNV glColor3hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glColor3hvNV = cast(glbfn_glColor3hvNV)glGetProcAddress(`glColor3hvNV`);
  if (glColor3hvNV is null) assert(0, `OpenGL function 'glColor3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3hvNV'\n"); }
  glColor3hvNV(a0,);
};
__gshared glbfn_glColor4hNV glColor4hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2, GLhalfNV a3) nothrow {
  glColor4hNV = cast(glbfn_glColor4hNV)glGetProcAddress(`glColor4hNV`);
  if (glColor4hNV is null) assert(0, `OpenGL function 'glColor4hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4hNV'\n"); }
  glColor4hNV(a0,a1,a2,a3,);
};
__gshared glbfn_glColor4hvNV glColor4hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glColor4hvNV = cast(glbfn_glColor4hvNV)glGetProcAddress(`glColor4hvNV`);
  if (glColor4hvNV is null) assert(0, `OpenGL function 'glColor4hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4hvNV'\n"); }
  glColor4hvNV(a0,);
};
__gshared glbfn_glTexCoord1hNV glTexCoord1hNV = function void (GLhalfNV a0) nothrow {
  glTexCoord1hNV = cast(glbfn_glTexCoord1hNV)glGetProcAddress(`glTexCoord1hNV`);
  if (glTexCoord1hNV is null) assert(0, `OpenGL function 'glTexCoord1hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1hNV'\n"); }
  glTexCoord1hNV(a0,);
};
__gshared glbfn_glTexCoord1hvNV glTexCoord1hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glTexCoord1hvNV = cast(glbfn_glTexCoord1hvNV)glGetProcAddress(`glTexCoord1hvNV`);
  if (glTexCoord1hvNV is null) assert(0, `OpenGL function 'glTexCoord1hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1hvNV'\n"); }
  glTexCoord1hvNV(a0,);
};
__gshared glbfn_glTexCoord2hNV glTexCoord2hNV = function void (GLhalfNV a0, GLhalfNV a1) nothrow {
  glTexCoord2hNV = cast(glbfn_glTexCoord2hNV)glGetProcAddress(`glTexCoord2hNV`);
  if (glTexCoord2hNV is null) assert(0, `OpenGL function 'glTexCoord2hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2hNV'\n"); }
  glTexCoord2hNV(a0,a1,);
};
__gshared glbfn_glTexCoord2hvNV glTexCoord2hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glTexCoord2hvNV = cast(glbfn_glTexCoord2hvNV)glGetProcAddress(`glTexCoord2hvNV`);
  if (glTexCoord2hvNV is null) assert(0, `OpenGL function 'glTexCoord2hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2hvNV'\n"); }
  glTexCoord2hvNV(a0,);
};
__gshared glbfn_glTexCoord3hNV glTexCoord3hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2) nothrow {
  glTexCoord3hNV = cast(glbfn_glTexCoord3hNV)glGetProcAddress(`glTexCoord3hNV`);
  if (glTexCoord3hNV is null) assert(0, `OpenGL function 'glTexCoord3hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3hNV'\n"); }
  glTexCoord3hNV(a0,a1,a2,);
};
__gshared glbfn_glTexCoord3hvNV glTexCoord3hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glTexCoord3hvNV = cast(glbfn_glTexCoord3hvNV)glGetProcAddress(`glTexCoord3hvNV`);
  if (glTexCoord3hvNV is null) assert(0, `OpenGL function 'glTexCoord3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3hvNV'\n"); }
  glTexCoord3hvNV(a0,);
};
__gshared glbfn_glTexCoord4hNV glTexCoord4hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2, GLhalfNV a3) nothrow {
  glTexCoord4hNV = cast(glbfn_glTexCoord4hNV)glGetProcAddress(`glTexCoord4hNV`);
  if (glTexCoord4hNV is null) assert(0, `OpenGL function 'glTexCoord4hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4hNV'\n"); }
  glTexCoord4hNV(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4hvNV glTexCoord4hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glTexCoord4hvNV = cast(glbfn_glTexCoord4hvNV)glGetProcAddress(`glTexCoord4hvNV`);
  if (glTexCoord4hvNV is null) assert(0, `OpenGL function 'glTexCoord4hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4hvNV'\n"); }
  glTexCoord4hvNV(a0,);
};
__gshared glbfn_glMultiTexCoord1hNV glMultiTexCoord1hNV = function void (GLenum a0, GLhalfNV a1) nothrow {
  glMultiTexCoord1hNV = cast(glbfn_glMultiTexCoord1hNV)glGetProcAddress(`glMultiTexCoord1hNV`);
  if (glMultiTexCoord1hNV is null) assert(0, `OpenGL function 'glMultiTexCoord1hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1hNV'\n"); }
  glMultiTexCoord1hNV(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1hvNV glMultiTexCoord1hvNV = function void (GLenum a0, const(GLhalfNV)* a1) nothrow {
  glMultiTexCoord1hvNV = cast(glbfn_glMultiTexCoord1hvNV)glGetProcAddress(`glMultiTexCoord1hvNV`);
  if (glMultiTexCoord1hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord1hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1hvNV'\n"); }
  glMultiTexCoord1hvNV(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2hNV glMultiTexCoord2hNV = function void (GLenum a0, GLhalfNV a1, GLhalfNV a2) nothrow {
  glMultiTexCoord2hNV = cast(glbfn_glMultiTexCoord2hNV)glGetProcAddress(`glMultiTexCoord2hNV`);
  if (glMultiTexCoord2hNV is null) assert(0, `OpenGL function 'glMultiTexCoord2hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2hNV'\n"); }
  glMultiTexCoord2hNV(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2hvNV glMultiTexCoord2hvNV = function void (GLenum a0, const(GLhalfNV)* a1) nothrow {
  glMultiTexCoord2hvNV = cast(glbfn_glMultiTexCoord2hvNV)glGetProcAddress(`glMultiTexCoord2hvNV`);
  if (glMultiTexCoord2hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord2hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2hvNV'\n"); }
  glMultiTexCoord2hvNV(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3hNV glMultiTexCoord3hNV = function void (GLenum a0, GLhalfNV a1, GLhalfNV a2, GLhalfNV a3) nothrow {
  glMultiTexCoord3hNV = cast(glbfn_glMultiTexCoord3hNV)glGetProcAddress(`glMultiTexCoord3hNV`);
  if (glMultiTexCoord3hNV is null) assert(0, `OpenGL function 'glMultiTexCoord3hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3hNV'\n"); }
  glMultiTexCoord3hNV(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3hvNV glMultiTexCoord3hvNV = function void (GLenum a0, const(GLhalfNV)* a1) nothrow {
  glMultiTexCoord3hvNV = cast(glbfn_glMultiTexCoord3hvNV)glGetProcAddress(`glMultiTexCoord3hvNV`);
  if (glMultiTexCoord3hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3hvNV'\n"); }
  glMultiTexCoord3hvNV(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4hNV glMultiTexCoord4hNV = function void (GLenum a0, GLhalfNV a1, GLhalfNV a2, GLhalfNV a3, GLhalfNV a4) nothrow {
  glMultiTexCoord4hNV = cast(glbfn_glMultiTexCoord4hNV)glGetProcAddress(`glMultiTexCoord4hNV`);
  if (glMultiTexCoord4hNV is null) assert(0, `OpenGL function 'glMultiTexCoord4hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4hNV'\n"); }
  glMultiTexCoord4hNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4hvNV glMultiTexCoord4hvNV = function void (GLenum a0, const(GLhalfNV)* a1) nothrow {
  glMultiTexCoord4hvNV = cast(glbfn_glMultiTexCoord4hvNV)glGetProcAddress(`glMultiTexCoord4hvNV`);
  if (glMultiTexCoord4hvNV is null) assert(0, `OpenGL function 'glMultiTexCoord4hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4hvNV'\n"); }
  glMultiTexCoord4hvNV(a0,a1,);
};
__gshared glbfn_glFogCoordhNV glFogCoordhNV = function void (GLhalfNV a0) nothrow {
  glFogCoordhNV = cast(glbfn_glFogCoordhNV)glGetProcAddress(`glFogCoordhNV`);
  if (glFogCoordhNV is null) assert(0, `OpenGL function 'glFogCoordhNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordhNV'\n"); }
  glFogCoordhNV(a0,);
};
__gshared glbfn_glFogCoordhvNV glFogCoordhvNV = function void (const(GLhalfNV)* a0) nothrow {
  glFogCoordhvNV = cast(glbfn_glFogCoordhvNV)glGetProcAddress(`glFogCoordhvNV`);
  if (glFogCoordhvNV is null) assert(0, `OpenGL function 'glFogCoordhvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordhvNV'\n"); }
  glFogCoordhvNV(a0,);
};
__gshared glbfn_glSecondaryColor3hNV glSecondaryColor3hNV = function void (GLhalfNV a0, GLhalfNV a1, GLhalfNV a2) nothrow {
  glSecondaryColor3hNV = cast(glbfn_glSecondaryColor3hNV)glGetProcAddress(`glSecondaryColor3hNV`);
  if (glSecondaryColor3hNV is null) assert(0, `OpenGL function 'glSecondaryColor3hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3hNV'\n"); }
  glSecondaryColor3hNV(a0,a1,a2,);
};
__gshared glbfn_glSecondaryColor3hvNV glSecondaryColor3hvNV = function void (const(GLhalfNV)* a0) nothrow {
  glSecondaryColor3hvNV = cast(glbfn_glSecondaryColor3hvNV)glGetProcAddress(`glSecondaryColor3hvNV`);
  if (glSecondaryColor3hvNV is null) assert(0, `OpenGL function 'glSecondaryColor3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColor3hvNV'\n"); }
  glSecondaryColor3hvNV(a0,);
};
__gshared glbfn_glVertexWeighthNV glVertexWeighthNV = function void (GLhalfNV a0) nothrow {
  glVertexWeighthNV = cast(glbfn_glVertexWeighthNV)glGetProcAddress(`glVertexWeighthNV`);
  if (glVertexWeighthNV is null) assert(0, `OpenGL function 'glVertexWeighthNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexWeighthNV'\n"); }
  glVertexWeighthNV(a0,);
};
__gshared glbfn_glVertexWeighthvNV glVertexWeighthvNV = function void (const(GLhalfNV)* a0) nothrow {
  glVertexWeighthvNV = cast(glbfn_glVertexWeighthvNV)glGetProcAddress(`glVertexWeighthvNV`);
  if (glVertexWeighthvNV is null) assert(0, `OpenGL function 'glVertexWeighthvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexWeighthvNV'\n"); }
  glVertexWeighthvNV(a0,);
};
__gshared glbfn_glVertexAttrib1hNV glVertexAttrib1hNV = function void (GLuint a0, GLhalfNV a1) nothrow {
  glVertexAttrib1hNV = cast(glbfn_glVertexAttrib1hNV)glGetProcAddress(`glVertexAttrib1hNV`);
  if (glVertexAttrib1hNV is null) assert(0, `OpenGL function 'glVertexAttrib1hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1hNV'\n"); }
  glVertexAttrib1hNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib1hvNV glVertexAttrib1hvNV = function void (GLuint a0, const(GLhalfNV)* a1) nothrow {
  glVertexAttrib1hvNV = cast(glbfn_glVertexAttrib1hvNV)glGetProcAddress(`glVertexAttrib1hvNV`);
  if (glVertexAttrib1hvNV is null) assert(0, `OpenGL function 'glVertexAttrib1hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1hvNV'\n"); }
  glVertexAttrib1hvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib2hNV glVertexAttrib2hNV = function void (GLuint a0, GLhalfNV a1, GLhalfNV a2) nothrow {
  glVertexAttrib2hNV = cast(glbfn_glVertexAttrib2hNV)glGetProcAddress(`glVertexAttrib2hNV`);
  if (glVertexAttrib2hNV is null) assert(0, `OpenGL function 'glVertexAttrib2hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2hNV'\n"); }
  glVertexAttrib2hNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2hvNV glVertexAttrib2hvNV = function void (GLuint a0, const(GLhalfNV)* a1) nothrow {
  glVertexAttrib2hvNV = cast(glbfn_glVertexAttrib2hvNV)glGetProcAddress(`glVertexAttrib2hvNV`);
  if (glVertexAttrib2hvNV is null) assert(0, `OpenGL function 'glVertexAttrib2hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2hvNV'\n"); }
  glVertexAttrib2hvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib3hNV glVertexAttrib3hNV = function void (GLuint a0, GLhalfNV a1, GLhalfNV a2, GLhalfNV a3) nothrow {
  glVertexAttrib3hNV = cast(glbfn_glVertexAttrib3hNV)glGetProcAddress(`glVertexAttrib3hNV`);
  if (glVertexAttrib3hNV is null) assert(0, `OpenGL function 'glVertexAttrib3hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3hNV'\n"); }
  glVertexAttrib3hNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3hvNV glVertexAttrib3hvNV = function void (GLuint a0, const(GLhalfNV)* a1) nothrow {
  glVertexAttrib3hvNV = cast(glbfn_glVertexAttrib3hvNV)glGetProcAddress(`glVertexAttrib3hvNV`);
  if (glVertexAttrib3hvNV is null) assert(0, `OpenGL function 'glVertexAttrib3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3hvNV'\n"); }
  glVertexAttrib3hvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib4hNV glVertexAttrib4hNV = function void (GLuint a0, GLhalfNV a1, GLhalfNV a2, GLhalfNV a3, GLhalfNV a4) nothrow {
  glVertexAttrib4hNV = cast(glbfn_glVertexAttrib4hNV)glGetProcAddress(`glVertexAttrib4hNV`);
  if (glVertexAttrib4hNV is null) assert(0, `OpenGL function 'glVertexAttrib4hNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4hNV'\n"); }
  glVertexAttrib4hNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4hvNV glVertexAttrib4hvNV = function void (GLuint a0, const(GLhalfNV)* a1) nothrow {
  glVertexAttrib4hvNV = cast(glbfn_glVertexAttrib4hvNV)glGetProcAddress(`glVertexAttrib4hvNV`);
  if (glVertexAttrib4hvNV is null) assert(0, `OpenGL function 'glVertexAttrib4hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4hvNV'\n"); }
  glVertexAttrib4hvNV(a0,a1,);
};
__gshared glbfn_glVertexAttribs1hvNV glVertexAttribs1hvNV = function void (GLuint a0, GLsizei a1, const(GLhalfNV)* a2) nothrow {
  glVertexAttribs1hvNV = cast(glbfn_glVertexAttribs1hvNV)glGetProcAddress(`glVertexAttribs1hvNV`);
  if (glVertexAttribs1hvNV is null) assert(0, `OpenGL function 'glVertexAttribs1hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs1hvNV'\n"); }
  glVertexAttribs1hvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs2hvNV glVertexAttribs2hvNV = function void (GLuint a0, GLsizei a1, const(GLhalfNV)* a2) nothrow {
  glVertexAttribs2hvNV = cast(glbfn_glVertexAttribs2hvNV)glGetProcAddress(`glVertexAttribs2hvNV`);
  if (glVertexAttribs2hvNV is null) assert(0, `OpenGL function 'glVertexAttribs2hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs2hvNV'\n"); }
  glVertexAttribs2hvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs3hvNV glVertexAttribs3hvNV = function void (GLuint a0, GLsizei a1, const(GLhalfNV)* a2) nothrow {
  glVertexAttribs3hvNV = cast(glbfn_glVertexAttribs3hvNV)glGetProcAddress(`glVertexAttribs3hvNV`);
  if (glVertexAttribs3hvNV is null) assert(0, `OpenGL function 'glVertexAttribs3hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs3hvNV'\n"); }
  glVertexAttribs3hvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs4hvNV glVertexAttribs4hvNV = function void (GLuint a0, GLsizei a1, const(GLhalfNV)* a2) nothrow {
  glVertexAttribs4hvNV = cast(glbfn_glVertexAttribs4hvNV)glGetProcAddress(`glVertexAttribs4hvNV`);
  if (glVertexAttribs4hvNV is null) assert(0, `OpenGL function 'glVertexAttribs4hvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs4hvNV'\n"); }
  glVertexAttribs4hvNV(a0,a1,a2,);
};
__gshared glbfn_glGetInternalformatSampleivNV glGetInternalformatSampleivNV = function void (GLenum a0, GLenum a1, GLsizei a2, GLenum a3, GLsizei a4, GLint* a5) nothrow {
  glGetInternalformatSampleivNV = cast(glbfn_glGetInternalformatSampleivNV)glGetProcAddress(`glGetInternalformatSampleivNV`);
  if (glGetInternalformatSampleivNV is null) assert(0, `OpenGL function 'glGetInternalformatSampleivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInternalformatSampleivNV'\n"); }
  glGetInternalformatSampleivNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGenOcclusionQueriesNV glGenOcclusionQueriesNV = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenOcclusionQueriesNV = cast(glbfn_glGenOcclusionQueriesNV)glGetProcAddress(`glGenOcclusionQueriesNV`);
  if (glGenOcclusionQueriesNV is null) assert(0, `OpenGL function 'glGenOcclusionQueriesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenOcclusionQueriesNV'\n"); }
  glGenOcclusionQueriesNV(a0,a1,);
};
__gshared glbfn_glDeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteOcclusionQueriesNV = cast(glbfn_glDeleteOcclusionQueriesNV)glGetProcAddress(`glDeleteOcclusionQueriesNV`);
  if (glDeleteOcclusionQueriesNV is null) assert(0, `OpenGL function 'glDeleteOcclusionQueriesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteOcclusionQueriesNV'\n"); }
  glDeleteOcclusionQueriesNV(a0,a1,);
};
__gshared glbfn_glIsOcclusionQueryNV glIsOcclusionQueryNV = function GLboolean (GLuint a0) nothrow {
  glIsOcclusionQueryNV = cast(glbfn_glIsOcclusionQueryNV)glGetProcAddress(`glIsOcclusionQueryNV`);
  if (glIsOcclusionQueryNV is null) assert(0, `OpenGL function 'glIsOcclusionQueryNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsOcclusionQueryNV'\n"); }
  return glIsOcclusionQueryNV(a0,);
};
__gshared glbfn_glBeginOcclusionQueryNV glBeginOcclusionQueryNV = function void (GLuint a0) nothrow {
  glBeginOcclusionQueryNV = cast(glbfn_glBeginOcclusionQueryNV)glGetProcAddress(`glBeginOcclusionQueryNV`);
  if (glBeginOcclusionQueryNV is null) assert(0, `OpenGL function 'glBeginOcclusionQueryNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginOcclusionQueryNV'\n"); }
  glBeginOcclusionQueryNV(a0,);
};
__gshared glbfn_glEndOcclusionQueryNV glEndOcclusionQueryNV = function void () nothrow {
  glEndOcclusionQueryNV = cast(glbfn_glEndOcclusionQueryNV)glGetProcAddress(`glEndOcclusionQueryNV`);
  if (glEndOcclusionQueryNV is null) assert(0, `OpenGL function 'glEndOcclusionQueryNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndOcclusionQueryNV'\n"); }
  glEndOcclusionQueryNV();
};
__gshared glbfn_glGetOcclusionQueryivNV glGetOcclusionQueryivNV = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetOcclusionQueryivNV = cast(glbfn_glGetOcclusionQueryivNV)glGetProcAddress(`glGetOcclusionQueryivNV`);
  if (glGetOcclusionQueryivNV is null) assert(0, `OpenGL function 'glGetOcclusionQueryivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetOcclusionQueryivNV'\n"); }
  glGetOcclusionQueryivNV(a0,a1,a2,);
};
__gshared glbfn_glGetOcclusionQueryuivNV glGetOcclusionQueryuivNV = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetOcclusionQueryuivNV = cast(glbfn_glGetOcclusionQueryuivNV)glGetProcAddress(`glGetOcclusionQueryuivNV`);
  if (glGetOcclusionQueryuivNV is null) assert(0, `OpenGL function 'glGetOcclusionQueryuivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetOcclusionQueryuivNV'\n"); }
  glGetOcclusionQueryuivNV(a0,a1,a2,);
};
__gshared glbfn_glProgramBufferParametersfvNV glProgramBufferParametersfvNV = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3, const(GLfloat)* a4) nothrow {
  glProgramBufferParametersfvNV = cast(glbfn_glProgramBufferParametersfvNV)glGetProcAddress(`glProgramBufferParametersfvNV`);
  if (glProgramBufferParametersfvNV is null) assert(0, `OpenGL function 'glProgramBufferParametersfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramBufferParametersfvNV'\n"); }
  glProgramBufferParametersfvNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramBufferParametersIivNV glProgramBufferParametersIivNV = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3, const(GLint)* a4) nothrow {
  glProgramBufferParametersIivNV = cast(glbfn_glProgramBufferParametersIivNV)glGetProcAddress(`glProgramBufferParametersIivNV`);
  if (glProgramBufferParametersIivNV is null) assert(0, `OpenGL function 'glProgramBufferParametersIivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramBufferParametersIivNV'\n"); }
  glProgramBufferParametersIivNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glProgramBufferParametersIuivNV glProgramBufferParametersIuivNV = function void (GLenum a0, GLuint a1, GLuint a2, GLsizei a3, const(GLuint)* a4) nothrow {
  glProgramBufferParametersIuivNV = cast(glbfn_glProgramBufferParametersIuivNV)glGetProcAddress(`glProgramBufferParametersIuivNV`);
  if (glProgramBufferParametersIuivNV is null) assert(0, `OpenGL function 'glProgramBufferParametersIuivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramBufferParametersIuivNV'\n"); }
  glProgramBufferParametersIuivNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGenPathsNV glGenPathsNV = function GLuint (GLsizei a0) nothrow {
  glGenPathsNV = cast(glbfn_glGenPathsNV)glGetProcAddress(`glGenPathsNV`);
  if (glGenPathsNV is null) assert(0, `OpenGL function 'glGenPathsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenPathsNV'\n"); }
  return glGenPathsNV(a0,);
};
__gshared glbfn_glDeletePathsNV glDeletePathsNV = function void (GLuint a0, GLsizei a1) nothrow {
  glDeletePathsNV = cast(glbfn_glDeletePathsNV)glGetProcAddress(`glDeletePathsNV`);
  if (glDeletePathsNV is null) assert(0, `OpenGL function 'glDeletePathsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeletePathsNV'\n"); }
  glDeletePathsNV(a0,a1,);
};
__gshared glbfn_glIsPathNV glIsPathNV = function GLboolean (GLuint a0) nothrow {
  glIsPathNV = cast(glbfn_glIsPathNV)glGetProcAddress(`glIsPathNV`);
  if (glIsPathNV is null) assert(0, `OpenGL function 'glIsPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsPathNV'\n"); }
  return glIsPathNV(a0,);
};
__gshared glbfn_glPathCommandsNV glPathCommandsNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2, GLsizei a3, GLenum a4, const(void)* a5) nothrow {
  glPathCommandsNV = cast(glbfn_glPathCommandsNV)glGetProcAddress(`glPathCommandsNV`);
  if (glPathCommandsNV is null) assert(0, `OpenGL function 'glPathCommandsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathCommandsNV'\n"); }
  glPathCommandsNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glPathCoordsNV glPathCoordsNV = function void (GLuint a0, GLsizei a1, GLenum a2, const(void)* a3) nothrow {
  glPathCoordsNV = cast(glbfn_glPathCoordsNV)glGetProcAddress(`glPathCoordsNV`);
  if (glPathCoordsNV is null) assert(0, `OpenGL function 'glPathCoordsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathCoordsNV'\n"); }
  glPathCoordsNV(a0,a1,a2,a3,);
};
__gshared glbfn_glPathSubCommandsNV glPathSubCommandsNV = function void (GLuint a0, GLsizei a1, GLsizei a2, GLsizei a3, const(GLubyte)* a4, GLsizei a5, GLenum a6, const(void)* a7) nothrow {
  glPathSubCommandsNV = cast(glbfn_glPathSubCommandsNV)glGetProcAddress(`glPathSubCommandsNV`);
  if (glPathSubCommandsNV is null) assert(0, `OpenGL function 'glPathSubCommandsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathSubCommandsNV'\n"); }
  glPathSubCommandsNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glPathSubCoordsNV glPathSubCoordsNV = function void (GLuint a0, GLsizei a1, GLsizei a2, GLenum a3, const(void)* a4) nothrow {
  glPathSubCoordsNV = cast(glbfn_glPathSubCoordsNV)glGetProcAddress(`glPathSubCoordsNV`);
  if (glPathSubCoordsNV is null) assert(0, `OpenGL function 'glPathSubCoordsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathSubCoordsNV'\n"); }
  glPathSubCoordsNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glPathStringNV glPathStringNV = function void (GLuint a0, GLenum a1, GLsizei a2, const(void)* a3) nothrow {
  glPathStringNV = cast(glbfn_glPathStringNV)glGetProcAddress(`glPathStringNV`);
  if (glPathStringNV is null) assert(0, `OpenGL function 'glPathStringNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathStringNV'\n"); }
  glPathStringNV(a0,a1,a2,a3,);
};
__gshared glbfn_glPathGlyphsNV glPathGlyphsNV = function void (GLuint a0, GLenum a1, const(void)* a2, GLbitfield a3, GLsizei a4, GLenum a5, const(void)* a6, GLenum a7, GLuint a8, GLfloat a9) nothrow {
  glPathGlyphsNV = cast(glbfn_glPathGlyphsNV)glGetProcAddress(`glPathGlyphsNV`);
  if (glPathGlyphsNV is null) assert(0, `OpenGL function 'glPathGlyphsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathGlyphsNV'\n"); }
  glPathGlyphsNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glPathGlyphRangeNV glPathGlyphRangeNV = function void (GLuint a0, GLenum a1, const(void)* a2, GLbitfield a3, GLuint a4, GLsizei a5, GLenum a6, GLuint a7, GLfloat a8) nothrow {
  glPathGlyphRangeNV = cast(glbfn_glPathGlyphRangeNV)glGetProcAddress(`glPathGlyphRangeNV`);
  if (glPathGlyphRangeNV is null) assert(0, `OpenGL function 'glPathGlyphRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathGlyphRangeNV'\n"); }
  glPathGlyphRangeNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glWeightPathsNV glWeightPathsNV = function void (GLuint a0, GLsizei a1, const(GLuint)* a2, const(GLfloat)* a3) nothrow {
  glWeightPathsNV = cast(glbfn_glWeightPathsNV)glGetProcAddress(`glWeightPathsNV`);
  if (glWeightPathsNV is null) assert(0, `OpenGL function 'glWeightPathsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glWeightPathsNV'\n"); }
  glWeightPathsNV(a0,a1,a2,a3,);
};
__gshared glbfn_glCopyPathNV glCopyPathNV = function void (GLuint a0, GLuint a1) nothrow {
  glCopyPathNV = cast(glbfn_glCopyPathNV)glGetProcAddress(`glCopyPathNV`);
  if (glCopyPathNV is null) assert(0, `OpenGL function 'glCopyPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyPathNV'\n"); }
  glCopyPathNV(a0,a1,);
};
__gshared glbfn_glInterpolatePathsNV glInterpolatePathsNV = function void (GLuint a0, GLuint a1, GLuint a2, GLfloat a3) nothrow {
  glInterpolatePathsNV = cast(glbfn_glInterpolatePathsNV)glGetProcAddress(`glInterpolatePathsNV`);
  if (glInterpolatePathsNV is null) assert(0, `OpenGL function 'glInterpolatePathsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInterpolatePathsNV'\n"); }
  glInterpolatePathsNV(a0,a1,a2,a3,);
};
__gshared glbfn_glTransformPathNV glTransformPathNV = function void (GLuint a0, GLuint a1, GLenum a2, const(GLfloat)* a3) nothrow {
  glTransformPathNV = cast(glbfn_glTransformPathNV)glGetProcAddress(`glTransformPathNV`);
  if (glTransformPathNV is null) assert(0, `OpenGL function 'glTransformPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformPathNV'\n"); }
  glTransformPathNV(a0,a1,a2,a3,);
};
__gshared glbfn_glPathParameterivNV glPathParameterivNV = function void (GLuint a0, GLenum a1, const(GLint)* a2) nothrow {
  glPathParameterivNV = cast(glbfn_glPathParameterivNV)glGetProcAddress(`glPathParameterivNV`);
  if (glPathParameterivNV is null) assert(0, `OpenGL function 'glPathParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathParameterivNV'\n"); }
  glPathParameterivNV(a0,a1,a2,);
};
__gshared glbfn_glPathParameteriNV glPathParameteriNV = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glPathParameteriNV = cast(glbfn_glPathParameteriNV)glGetProcAddress(`glPathParameteriNV`);
  if (glPathParameteriNV is null) assert(0, `OpenGL function 'glPathParameteriNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathParameteriNV'\n"); }
  glPathParameteriNV(a0,a1,a2,);
};
__gshared glbfn_glPathParameterfvNV glPathParameterfvNV = function void (GLuint a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glPathParameterfvNV = cast(glbfn_glPathParameterfvNV)glGetProcAddress(`glPathParameterfvNV`);
  if (glPathParameterfvNV is null) assert(0, `OpenGL function 'glPathParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathParameterfvNV'\n"); }
  glPathParameterfvNV(a0,a1,a2,);
};
__gshared glbfn_glPathParameterfNV glPathParameterfNV = function void (GLuint a0, GLenum a1, GLfloat a2) nothrow {
  glPathParameterfNV = cast(glbfn_glPathParameterfNV)glGetProcAddress(`glPathParameterfNV`);
  if (glPathParameterfNV is null) assert(0, `OpenGL function 'glPathParameterfNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathParameterfNV'\n"); }
  glPathParameterfNV(a0,a1,a2,);
};
__gshared glbfn_glPathDashArrayNV glPathDashArrayNV = function void (GLuint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glPathDashArrayNV = cast(glbfn_glPathDashArrayNV)glGetProcAddress(`glPathDashArrayNV`);
  if (glPathDashArrayNV is null) assert(0, `OpenGL function 'glPathDashArrayNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathDashArrayNV'\n"); }
  glPathDashArrayNV(a0,a1,a2,);
};
__gshared glbfn_glPathStencilFuncNV glPathStencilFuncNV = function void (GLenum a0, GLint a1, GLuint a2) nothrow {
  glPathStencilFuncNV = cast(glbfn_glPathStencilFuncNV)glGetProcAddress(`glPathStencilFuncNV`);
  if (glPathStencilFuncNV is null) assert(0, `OpenGL function 'glPathStencilFuncNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathStencilFuncNV'\n"); }
  glPathStencilFuncNV(a0,a1,a2,);
};
__gshared glbfn_glPathStencilDepthOffsetNV glPathStencilDepthOffsetNV = function void (GLfloat a0, GLfloat a1) nothrow {
  glPathStencilDepthOffsetNV = cast(glbfn_glPathStencilDepthOffsetNV)glGetProcAddress(`glPathStencilDepthOffsetNV`);
  if (glPathStencilDepthOffsetNV is null) assert(0, `OpenGL function 'glPathStencilDepthOffsetNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathStencilDepthOffsetNV'\n"); }
  glPathStencilDepthOffsetNV(a0,a1,);
};
__gshared glbfn_glStencilFillPathNV glStencilFillPathNV = function void (GLuint a0, GLenum a1, GLuint a2) nothrow {
  glStencilFillPathNV = cast(glbfn_glStencilFillPathNV)glGetProcAddress(`glStencilFillPathNV`);
  if (glStencilFillPathNV is null) assert(0, `OpenGL function 'glStencilFillPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilFillPathNV'\n"); }
  glStencilFillPathNV(a0,a1,a2,);
};
__gshared glbfn_glStencilStrokePathNV glStencilStrokePathNV = function void (GLuint a0, GLint a1, GLuint a2) nothrow {
  glStencilStrokePathNV = cast(glbfn_glStencilStrokePathNV)glGetProcAddress(`glStencilStrokePathNV`);
  if (glStencilStrokePathNV is null) assert(0, `OpenGL function 'glStencilStrokePathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilStrokePathNV'\n"); }
  glStencilStrokePathNV(a0,a1,a2,);
};
__gshared glbfn_glStencilFillPathInstancedNV glStencilFillPathInstancedNV = function void (GLsizei a0, GLenum a1, const(void)* a2, GLuint a3, GLenum a4, GLuint a5, GLenum a6, const(GLfloat)* a7) nothrow {
  glStencilFillPathInstancedNV = cast(glbfn_glStencilFillPathInstancedNV)glGetProcAddress(`glStencilFillPathInstancedNV`);
  if (glStencilFillPathInstancedNV is null) assert(0, `OpenGL function 'glStencilFillPathInstancedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilFillPathInstancedNV'\n"); }
  glStencilFillPathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glStencilStrokePathInstancedNV glStencilStrokePathInstancedNV = function void (GLsizei a0, GLenum a1, const(void)* a2, GLuint a3, GLint a4, GLuint a5, GLenum a6, const(GLfloat)* a7) nothrow {
  glStencilStrokePathInstancedNV = cast(glbfn_glStencilStrokePathInstancedNV)glGetProcAddress(`glStencilStrokePathInstancedNV`);
  if (glStencilStrokePathInstancedNV is null) assert(0, `OpenGL function 'glStencilStrokePathInstancedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilStrokePathInstancedNV'\n"); }
  glStencilStrokePathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glPathCoverDepthFuncNV glPathCoverDepthFuncNV = function void (GLenum a0) nothrow {
  glPathCoverDepthFuncNV = cast(glbfn_glPathCoverDepthFuncNV)glGetProcAddress(`glPathCoverDepthFuncNV`);
  if (glPathCoverDepthFuncNV is null) assert(0, `OpenGL function 'glPathCoverDepthFuncNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathCoverDepthFuncNV'\n"); }
  glPathCoverDepthFuncNV(a0,);
};
__gshared glbfn_glCoverFillPathNV glCoverFillPathNV = function void (GLuint a0, GLenum a1) nothrow {
  glCoverFillPathNV = cast(glbfn_glCoverFillPathNV)glGetProcAddress(`glCoverFillPathNV`);
  if (glCoverFillPathNV is null) assert(0, `OpenGL function 'glCoverFillPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCoverFillPathNV'\n"); }
  glCoverFillPathNV(a0,a1,);
};
__gshared glbfn_glCoverStrokePathNV glCoverStrokePathNV = function void (GLuint a0, GLenum a1) nothrow {
  glCoverStrokePathNV = cast(glbfn_glCoverStrokePathNV)glGetProcAddress(`glCoverStrokePathNV`);
  if (glCoverStrokePathNV is null) assert(0, `OpenGL function 'glCoverStrokePathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCoverStrokePathNV'\n"); }
  glCoverStrokePathNV(a0,a1,);
};
__gshared glbfn_glCoverFillPathInstancedNV glCoverFillPathInstancedNV = function void (GLsizei a0, GLenum a1, const(void)* a2, GLuint a3, GLenum a4, GLenum a5, const(GLfloat)* a6) nothrow {
  glCoverFillPathInstancedNV = cast(glbfn_glCoverFillPathInstancedNV)glGetProcAddress(`glCoverFillPathInstancedNV`);
  if (glCoverFillPathInstancedNV is null) assert(0, `OpenGL function 'glCoverFillPathInstancedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCoverFillPathInstancedNV'\n"); }
  glCoverFillPathInstancedNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glCoverStrokePathInstancedNV glCoverStrokePathInstancedNV = function void (GLsizei a0, GLenum a1, const(void)* a2, GLuint a3, GLenum a4, GLenum a5, const(GLfloat)* a6) nothrow {
  glCoverStrokePathInstancedNV = cast(glbfn_glCoverStrokePathInstancedNV)glGetProcAddress(`glCoverStrokePathInstancedNV`);
  if (glCoverStrokePathInstancedNV is null) assert(0, `OpenGL function 'glCoverStrokePathInstancedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCoverStrokePathInstancedNV'\n"); }
  glCoverStrokePathInstancedNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetPathParameterivNV glGetPathParameterivNV = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetPathParameterivNV = cast(glbfn_glGetPathParameterivNV)glGetProcAddress(`glGetPathParameterivNV`);
  if (glGetPathParameterivNV is null) assert(0, `OpenGL function 'glGetPathParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathParameterivNV'\n"); }
  glGetPathParameterivNV(a0,a1,a2,);
};
__gshared glbfn_glGetPathParameterfvNV glGetPathParameterfvNV = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetPathParameterfvNV = cast(glbfn_glGetPathParameterfvNV)glGetProcAddress(`glGetPathParameterfvNV`);
  if (glGetPathParameterfvNV is null) assert(0, `OpenGL function 'glGetPathParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathParameterfvNV'\n"); }
  glGetPathParameterfvNV(a0,a1,a2,);
};
__gshared glbfn_glGetPathCommandsNV glGetPathCommandsNV = function void (GLuint a0, GLubyte* a1) nothrow {
  glGetPathCommandsNV = cast(glbfn_glGetPathCommandsNV)glGetProcAddress(`glGetPathCommandsNV`);
  if (glGetPathCommandsNV is null) assert(0, `OpenGL function 'glGetPathCommandsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathCommandsNV'\n"); }
  glGetPathCommandsNV(a0,a1,);
};
__gshared glbfn_glGetPathCoordsNV glGetPathCoordsNV = function void (GLuint a0, GLfloat* a1) nothrow {
  glGetPathCoordsNV = cast(glbfn_glGetPathCoordsNV)glGetProcAddress(`glGetPathCoordsNV`);
  if (glGetPathCoordsNV is null) assert(0, `OpenGL function 'glGetPathCoordsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathCoordsNV'\n"); }
  glGetPathCoordsNV(a0,a1,);
};
__gshared glbfn_glGetPathDashArrayNV glGetPathDashArrayNV = function void (GLuint a0, GLfloat* a1) nothrow {
  glGetPathDashArrayNV = cast(glbfn_glGetPathDashArrayNV)glGetProcAddress(`glGetPathDashArrayNV`);
  if (glGetPathDashArrayNV is null) assert(0, `OpenGL function 'glGetPathDashArrayNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathDashArrayNV'\n"); }
  glGetPathDashArrayNV(a0,a1,);
};
__gshared glbfn_glGetPathMetricsNV glGetPathMetricsNV = function void (GLbitfield a0, GLsizei a1, GLenum a2, const(void)* a3, GLuint a4, GLsizei a5, GLfloat* a6) nothrow {
  glGetPathMetricsNV = cast(glbfn_glGetPathMetricsNV)glGetProcAddress(`glGetPathMetricsNV`);
  if (glGetPathMetricsNV is null) assert(0, `OpenGL function 'glGetPathMetricsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathMetricsNV'\n"); }
  glGetPathMetricsNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetPathMetricRangeNV glGetPathMetricRangeNV = function void (GLbitfield a0, GLuint a1, GLsizei a2, GLsizei a3, GLfloat* a4) nothrow {
  glGetPathMetricRangeNV = cast(glbfn_glGetPathMetricRangeNV)glGetProcAddress(`glGetPathMetricRangeNV`);
  if (glGetPathMetricRangeNV is null) assert(0, `OpenGL function 'glGetPathMetricRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathMetricRangeNV'\n"); }
  glGetPathMetricRangeNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetPathSpacingNV glGetPathSpacingNV = function void (GLenum a0, GLsizei a1, GLenum a2, const(void)* a3, GLuint a4, GLfloat a5, GLfloat a6, GLenum a7, GLfloat* a8) nothrow {
  glGetPathSpacingNV = cast(glbfn_glGetPathSpacingNV)glGetProcAddress(`glGetPathSpacingNV`);
  if (glGetPathSpacingNV is null) assert(0, `OpenGL function 'glGetPathSpacingNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathSpacingNV'\n"); }
  glGetPathSpacingNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glIsPointInFillPathNV glIsPointInFillPathNV = function GLboolean (GLuint a0, GLuint a1, GLfloat a2, GLfloat a3) nothrow {
  glIsPointInFillPathNV = cast(glbfn_glIsPointInFillPathNV)glGetProcAddress(`glIsPointInFillPathNV`);
  if (glIsPointInFillPathNV is null) assert(0, `OpenGL function 'glIsPointInFillPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsPointInFillPathNV'\n"); }
  return glIsPointInFillPathNV(a0,a1,a2,a3,);
};
__gshared glbfn_glIsPointInStrokePathNV glIsPointInStrokePathNV = function GLboolean (GLuint a0, GLfloat a1, GLfloat a2) nothrow {
  glIsPointInStrokePathNV = cast(glbfn_glIsPointInStrokePathNV)glGetProcAddress(`glIsPointInStrokePathNV`);
  if (glIsPointInStrokePathNV is null) assert(0, `OpenGL function 'glIsPointInStrokePathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsPointInStrokePathNV'\n"); }
  return glIsPointInStrokePathNV(a0,a1,a2,);
};
__gshared glbfn_glGetPathLengthNV glGetPathLengthNV = function GLfloat (GLuint a0, GLsizei a1, GLsizei a2) nothrow {
  glGetPathLengthNV = cast(glbfn_glGetPathLengthNV)glGetProcAddress(`glGetPathLengthNV`);
  if (glGetPathLengthNV is null) assert(0, `OpenGL function 'glGetPathLengthNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathLengthNV'\n"); }
  return glGetPathLengthNV(a0,a1,a2,);
};
__gshared glbfn_glPointAlongPathNV glPointAlongPathNV = function GLboolean (GLuint a0, GLsizei a1, GLsizei a2, GLfloat a3, GLfloat* a4, GLfloat* a5, GLfloat* a6, GLfloat* a7) nothrow {
  glPointAlongPathNV = cast(glbfn_glPointAlongPathNV)glGetProcAddress(`glPointAlongPathNV`);
  if (glPointAlongPathNV is null) assert(0, `OpenGL function 'glPointAlongPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointAlongPathNV'\n"); }
  return glPointAlongPathNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glMatrixLoad3x2fNV glMatrixLoad3x2fNV = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixLoad3x2fNV = cast(glbfn_glMatrixLoad3x2fNV)glGetProcAddress(`glMatrixLoad3x2fNV`);
  if (glMatrixLoad3x2fNV is null) assert(0, `OpenGL function 'glMatrixLoad3x2fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoad3x2fNV'\n"); }
  glMatrixLoad3x2fNV(a0,a1,);
};
__gshared glbfn_glMatrixLoad3x3fNV glMatrixLoad3x3fNV = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixLoad3x3fNV = cast(glbfn_glMatrixLoad3x3fNV)glGetProcAddress(`glMatrixLoad3x3fNV`);
  if (glMatrixLoad3x3fNV is null) assert(0, `OpenGL function 'glMatrixLoad3x3fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoad3x3fNV'\n"); }
  glMatrixLoad3x3fNV(a0,a1,);
};
__gshared glbfn_glMatrixLoadTranspose3x3fNV glMatrixLoadTranspose3x3fNV = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixLoadTranspose3x3fNV = cast(glbfn_glMatrixLoadTranspose3x3fNV)glGetProcAddress(`glMatrixLoadTranspose3x3fNV`);
  if (glMatrixLoadTranspose3x3fNV is null) assert(0, `OpenGL function 'glMatrixLoadTranspose3x3fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixLoadTranspose3x3fNV'\n"); }
  glMatrixLoadTranspose3x3fNV(a0,a1,);
};
__gshared glbfn_glMatrixMult3x2fNV glMatrixMult3x2fNV = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixMult3x2fNV = cast(glbfn_glMatrixMult3x2fNV)glGetProcAddress(`glMatrixMult3x2fNV`);
  if (glMatrixMult3x2fNV is null) assert(0, `OpenGL function 'glMatrixMult3x2fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMult3x2fNV'\n"); }
  glMatrixMult3x2fNV(a0,a1,);
};
__gshared glbfn_glMatrixMult3x3fNV glMatrixMult3x3fNV = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixMult3x3fNV = cast(glbfn_glMatrixMult3x3fNV)glGetProcAddress(`glMatrixMult3x3fNV`);
  if (glMatrixMult3x3fNV is null) assert(0, `OpenGL function 'glMatrixMult3x3fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMult3x3fNV'\n"); }
  glMatrixMult3x3fNV(a0,a1,);
};
__gshared glbfn_glMatrixMultTranspose3x3fNV glMatrixMultTranspose3x3fNV = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glMatrixMultTranspose3x3fNV = cast(glbfn_glMatrixMultTranspose3x3fNV)glGetProcAddress(`glMatrixMultTranspose3x3fNV`);
  if (glMatrixMultTranspose3x3fNV is null) assert(0, `OpenGL function 'glMatrixMultTranspose3x3fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMatrixMultTranspose3x3fNV'\n"); }
  glMatrixMultTranspose3x3fNV(a0,a1,);
};
__gshared glbfn_glStencilThenCoverFillPathNV glStencilThenCoverFillPathNV = function void (GLuint a0, GLenum a1, GLuint a2, GLenum a3) nothrow {
  glStencilThenCoverFillPathNV = cast(glbfn_glStencilThenCoverFillPathNV)glGetProcAddress(`glStencilThenCoverFillPathNV`);
  if (glStencilThenCoverFillPathNV is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilThenCoverFillPathNV'\n"); }
  glStencilThenCoverFillPathNV(a0,a1,a2,a3,);
};
__gshared glbfn_glStencilThenCoverStrokePathNV glStencilThenCoverStrokePathNV = function void (GLuint a0, GLint a1, GLuint a2, GLenum a3) nothrow {
  glStencilThenCoverStrokePathNV = cast(glbfn_glStencilThenCoverStrokePathNV)glGetProcAddress(`glStencilThenCoverStrokePathNV`);
  if (glStencilThenCoverStrokePathNV is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilThenCoverStrokePathNV'\n"); }
  glStencilThenCoverStrokePathNV(a0,a1,a2,a3,);
};
__gshared glbfn_glStencilThenCoverFillPathInstancedNV glStencilThenCoverFillPathInstancedNV = function void (GLsizei a0, GLenum a1, const(void)* a2, GLuint a3, GLenum a4, GLuint a5, GLenum a6, GLenum a7, const(GLfloat)* a8) nothrow {
  glStencilThenCoverFillPathInstancedNV = cast(glbfn_glStencilThenCoverFillPathInstancedNV)glGetProcAddress(`glStencilThenCoverFillPathInstancedNV`);
  if (glStencilThenCoverFillPathInstancedNV is null) assert(0, `OpenGL function 'glStencilThenCoverFillPathInstancedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilThenCoverFillPathInstancedNV'\n"); }
  glStencilThenCoverFillPathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glStencilThenCoverStrokePathInstancedNV glStencilThenCoverStrokePathInstancedNV = function void (GLsizei a0, GLenum a1, const(void)* a2, GLuint a3, GLint a4, GLuint a5, GLenum a6, GLenum a7, const(GLfloat)* a8) nothrow {
  glStencilThenCoverStrokePathInstancedNV = cast(glbfn_glStencilThenCoverStrokePathInstancedNV)glGetProcAddress(`glStencilThenCoverStrokePathInstancedNV`);
  if (glStencilThenCoverStrokePathInstancedNV is null) assert(0, `OpenGL function 'glStencilThenCoverStrokePathInstancedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStencilThenCoverStrokePathInstancedNV'\n"); }
  glStencilThenCoverStrokePathInstancedNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glPathGlyphIndexRangeNV glPathGlyphIndexRangeNV = function GLenum (GLenum a0, const(void)* a1, GLbitfield a2, GLuint a3, GLfloat a4, GLuint* a5) nothrow {
  glPathGlyphIndexRangeNV = cast(glbfn_glPathGlyphIndexRangeNV)glGetProcAddress(`glPathGlyphIndexRangeNV`);
  if (glPathGlyphIndexRangeNV is null) assert(0, `OpenGL function 'glPathGlyphIndexRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathGlyphIndexRangeNV'\n"); }
  return glPathGlyphIndexRangeNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glPathGlyphIndexArrayNV glPathGlyphIndexArrayNV = function GLenum (GLuint a0, GLenum a1, const(void)* a2, GLbitfield a3, GLuint a4, GLsizei a5, GLuint a6, GLfloat a7) nothrow {
  glPathGlyphIndexArrayNV = cast(glbfn_glPathGlyphIndexArrayNV)glGetProcAddress(`glPathGlyphIndexArrayNV`);
  if (glPathGlyphIndexArrayNV is null) assert(0, `OpenGL function 'glPathGlyphIndexArrayNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathGlyphIndexArrayNV'\n"); }
  return glPathGlyphIndexArrayNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glPathMemoryGlyphIndexArrayNV glPathMemoryGlyphIndexArrayNV = function GLenum (GLuint a0, GLenum a1, GLsizeiptr a2, const(void)* a3, GLsizei a4, GLuint a5, GLsizei a6, GLuint a7, GLfloat a8) nothrow {
  glPathMemoryGlyphIndexArrayNV = cast(glbfn_glPathMemoryGlyphIndexArrayNV)glGetProcAddress(`glPathMemoryGlyphIndexArrayNV`);
  if (glPathMemoryGlyphIndexArrayNV is null) assert(0, `OpenGL function 'glPathMemoryGlyphIndexArrayNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathMemoryGlyphIndexArrayNV'\n"); }
  return glPathMemoryGlyphIndexArrayNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glProgramPathFragmentInputGenNV glProgramPathFragmentInputGenNV = function void (GLuint a0, GLint a1, GLenum a2, GLint a3, const(GLfloat)* a4) nothrow {
  glProgramPathFragmentInputGenNV = cast(glbfn_glProgramPathFragmentInputGenNV)glGetProcAddress(`glProgramPathFragmentInputGenNV`);
  if (glProgramPathFragmentInputGenNV is null) assert(0, `OpenGL function 'glProgramPathFragmentInputGenNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramPathFragmentInputGenNV'\n"); }
  glProgramPathFragmentInputGenNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetProgramResourcefvNV glGetProgramResourcefvNV = function void (GLuint a0, GLenum a1, GLuint a2, GLsizei a3, const(GLenum)* a4, GLsizei a5, GLsizei* a6, GLfloat* a7) nothrow {
  glGetProgramResourcefvNV = cast(glbfn_glGetProgramResourcefvNV)glGetProcAddress(`glGetProgramResourcefvNV`);
  if (glGetProgramResourcefvNV is null) assert(0, `OpenGL function 'glGetProgramResourcefvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramResourcefvNV'\n"); }
  glGetProgramResourcefvNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glPathColorGenNV glPathColorGenNV = function void (GLenum a0, GLenum a1, GLenum a2, const(GLfloat)* a3) nothrow {
  glPathColorGenNV = cast(glbfn_glPathColorGenNV)glGetProcAddress(`glPathColorGenNV`);
  if (glPathColorGenNV is null) assert(0, `OpenGL function 'glPathColorGenNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathColorGenNV'\n"); }
  glPathColorGenNV(a0,a1,a2,a3,);
};
__gshared glbfn_glPathTexGenNV glPathTexGenNV = function void (GLenum a0, GLenum a1, GLint a2, const(GLfloat)* a3) nothrow {
  glPathTexGenNV = cast(glbfn_glPathTexGenNV)glGetProcAddress(`glPathTexGenNV`);
  if (glPathTexGenNV is null) assert(0, `OpenGL function 'glPathTexGenNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathTexGenNV'\n"); }
  glPathTexGenNV(a0,a1,a2,a3,);
};
__gshared glbfn_glPathFogGenNV glPathFogGenNV = function void (GLenum a0) nothrow {
  glPathFogGenNV = cast(glbfn_glPathFogGenNV)glGetProcAddress(`glPathFogGenNV`);
  if (glPathFogGenNV is null) assert(0, `OpenGL function 'glPathFogGenNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPathFogGenNV'\n"); }
  glPathFogGenNV(a0,);
};
__gshared glbfn_glGetPathColorGenivNV glGetPathColorGenivNV = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetPathColorGenivNV = cast(glbfn_glGetPathColorGenivNV)glGetProcAddress(`glGetPathColorGenivNV`);
  if (glGetPathColorGenivNV is null) assert(0, `OpenGL function 'glGetPathColorGenivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathColorGenivNV'\n"); }
  glGetPathColorGenivNV(a0,a1,a2,);
};
__gshared glbfn_glGetPathColorGenfvNV glGetPathColorGenfvNV = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetPathColorGenfvNV = cast(glbfn_glGetPathColorGenfvNV)glGetProcAddress(`glGetPathColorGenfvNV`);
  if (glGetPathColorGenfvNV is null) assert(0, `OpenGL function 'glGetPathColorGenfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathColorGenfvNV'\n"); }
  glGetPathColorGenfvNV(a0,a1,a2,);
};
__gshared glbfn_glGetPathTexGenivNV glGetPathTexGenivNV = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetPathTexGenivNV = cast(glbfn_glGetPathTexGenivNV)glGetProcAddress(`glGetPathTexGenivNV`);
  if (glGetPathTexGenivNV is null) assert(0, `OpenGL function 'glGetPathTexGenivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathTexGenivNV'\n"); }
  glGetPathTexGenivNV(a0,a1,a2,);
};
__gshared glbfn_glGetPathTexGenfvNV glGetPathTexGenfvNV = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetPathTexGenfvNV = cast(glbfn_glGetPathTexGenfvNV)glGetProcAddress(`glGetPathTexGenfvNV`);
  if (glGetPathTexGenfvNV is null) assert(0, `OpenGL function 'glGetPathTexGenfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPathTexGenfvNV'\n"); }
  glGetPathTexGenfvNV(a0,a1,a2,);
};
__gshared glbfn_glPixelDataRangeNV glPixelDataRangeNV = function void (GLenum a0, GLsizei a1, const(void)* a2) nothrow {
  glPixelDataRangeNV = cast(glbfn_glPixelDataRangeNV)glGetProcAddress(`glPixelDataRangeNV`);
  if (glPixelDataRangeNV is null) assert(0, `OpenGL function 'glPixelDataRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelDataRangeNV'\n"); }
  glPixelDataRangeNV(a0,a1,a2,);
};
__gshared glbfn_glFlushPixelDataRangeNV glFlushPixelDataRangeNV = function void (GLenum a0) nothrow {
  glFlushPixelDataRangeNV = cast(glbfn_glFlushPixelDataRangeNV)glGetProcAddress(`glFlushPixelDataRangeNV`);
  if (glFlushPixelDataRangeNV is null) assert(0, `OpenGL function 'glFlushPixelDataRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushPixelDataRangeNV'\n"); }
  glFlushPixelDataRangeNV(a0,);
};
__gshared glbfn_glPointParameteriNV glPointParameteriNV = function void (GLenum a0, GLint a1) nothrow {
  glPointParameteriNV = cast(glbfn_glPointParameteriNV)glGetProcAddress(`glPointParameteriNV`);
  if (glPointParameteriNV is null) assert(0, `OpenGL function 'glPointParameteriNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameteriNV'\n"); }
  glPointParameteriNV(a0,a1,);
};
__gshared glbfn_glPointParameterivNV glPointParameterivNV = function void (GLenum a0, const(GLint)* a1) nothrow {
  glPointParameterivNV = cast(glbfn_glPointParameterivNV)glGetProcAddress(`glPointParameterivNV`);
  if (glPointParameterivNV is null) assert(0, `OpenGL function 'glPointParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterivNV'\n"); }
  glPointParameterivNV(a0,a1,);
};
__gshared glbfn_glPresentFrameKeyedNV glPresentFrameKeyedNV = function void (GLuint a0, GLuint64EXT a1, GLuint a2, GLuint a3, GLenum a4, GLenum a5, GLuint a6, GLuint a7, GLenum a8, GLuint a9, GLuint a10) nothrow {
  glPresentFrameKeyedNV = cast(glbfn_glPresentFrameKeyedNV)glGetProcAddress(`glPresentFrameKeyedNV`);
  if (glPresentFrameKeyedNV is null) assert(0, `OpenGL function 'glPresentFrameKeyedNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPresentFrameKeyedNV'\n"); }
  glPresentFrameKeyedNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glPresentFrameDualFillNV glPresentFrameDualFillNV = function void (GLuint a0, GLuint64EXT a1, GLuint a2, GLuint a3, GLenum a4, GLenum a5, GLuint a6, GLenum a7, GLuint a8, GLenum a9, GLuint a10, GLenum a11, GLuint a12) nothrow {
  glPresentFrameDualFillNV = cast(glbfn_glPresentFrameDualFillNV)glGetProcAddress(`glPresentFrameDualFillNV`);
  if (glPresentFrameDualFillNV is null) assert(0, `OpenGL function 'glPresentFrameDualFillNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPresentFrameDualFillNV'\n"); }
  glPresentFrameDualFillNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
__gshared glbfn_glGetVideoivNV glGetVideoivNV = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVideoivNV = cast(glbfn_glGetVideoivNV)glGetProcAddress(`glGetVideoivNV`);
  if (glGetVideoivNV is null) assert(0, `OpenGL function 'glGetVideoivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideoivNV'\n"); }
  glGetVideoivNV(a0,a1,a2,);
};
__gshared glbfn_glGetVideouivNV glGetVideouivNV = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetVideouivNV = cast(glbfn_glGetVideouivNV)glGetProcAddress(`glGetVideouivNV`);
  if (glGetVideouivNV is null) assert(0, `OpenGL function 'glGetVideouivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideouivNV'\n"); }
  glGetVideouivNV(a0,a1,a2,);
};
__gshared glbfn_glGetVideoi64vNV glGetVideoi64vNV = function void (GLuint a0, GLenum a1, GLint64EXT* a2) nothrow {
  glGetVideoi64vNV = cast(glbfn_glGetVideoi64vNV)glGetProcAddress(`glGetVideoi64vNV`);
  if (glGetVideoi64vNV is null) assert(0, `OpenGL function 'glGetVideoi64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideoi64vNV'\n"); }
  glGetVideoi64vNV(a0,a1,a2,);
};
__gshared glbfn_glGetVideoui64vNV glGetVideoui64vNV = function void (GLuint a0, GLenum a1, GLuint64EXT* a2) nothrow {
  glGetVideoui64vNV = cast(glbfn_glGetVideoui64vNV)glGetProcAddress(`glGetVideoui64vNV`);
  if (glGetVideoui64vNV is null) assert(0, `OpenGL function 'glGetVideoui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideoui64vNV'\n"); }
  glGetVideoui64vNV(a0,a1,a2,);
};
__gshared glbfn_glPrimitiveRestartNV glPrimitiveRestartNV = function void () nothrow {
  glPrimitiveRestartNV = cast(glbfn_glPrimitiveRestartNV)glGetProcAddress(`glPrimitiveRestartNV`);
  if (glPrimitiveRestartNV is null) assert(0, `OpenGL function 'glPrimitiveRestartNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPrimitiveRestartNV'\n"); }
  glPrimitiveRestartNV();
};
__gshared glbfn_glPrimitiveRestartIndexNV glPrimitiveRestartIndexNV = function void (GLuint a0) nothrow {
  glPrimitiveRestartIndexNV = cast(glbfn_glPrimitiveRestartIndexNV)glGetProcAddress(`glPrimitiveRestartIndexNV`);
  if (glPrimitiveRestartIndexNV is null) assert(0, `OpenGL function 'glPrimitiveRestartIndexNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPrimitiveRestartIndexNV'\n"); }
  glPrimitiveRestartIndexNV(a0,);
};
__gshared glbfn_glCombinerParameterfvNV glCombinerParameterfvNV = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glCombinerParameterfvNV = cast(glbfn_glCombinerParameterfvNV)glGetProcAddress(`glCombinerParameterfvNV`);
  if (glCombinerParameterfvNV is null) assert(0, `OpenGL function 'glCombinerParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCombinerParameterfvNV'\n"); }
  glCombinerParameterfvNV(a0,a1,);
};
__gshared glbfn_glCombinerParameterfNV glCombinerParameterfNV = function void (GLenum a0, GLfloat a1) nothrow {
  glCombinerParameterfNV = cast(glbfn_glCombinerParameterfNV)glGetProcAddress(`glCombinerParameterfNV`);
  if (glCombinerParameterfNV is null) assert(0, `OpenGL function 'glCombinerParameterfNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCombinerParameterfNV'\n"); }
  glCombinerParameterfNV(a0,a1,);
};
__gshared glbfn_glCombinerParameterivNV glCombinerParameterivNV = function void (GLenum a0, const(GLint)* a1) nothrow {
  glCombinerParameterivNV = cast(glbfn_glCombinerParameterivNV)glGetProcAddress(`glCombinerParameterivNV`);
  if (glCombinerParameterivNV is null) assert(0, `OpenGL function 'glCombinerParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCombinerParameterivNV'\n"); }
  glCombinerParameterivNV(a0,a1,);
};
__gshared glbfn_glCombinerParameteriNV glCombinerParameteriNV = function void (GLenum a0, GLint a1) nothrow {
  glCombinerParameteriNV = cast(glbfn_glCombinerParameteriNV)glGetProcAddress(`glCombinerParameteriNV`);
  if (glCombinerParameteriNV is null) assert(0, `OpenGL function 'glCombinerParameteriNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCombinerParameteriNV'\n"); }
  glCombinerParameteriNV(a0,a1,);
};
__gshared glbfn_glCombinerInputNV glCombinerInputNV = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3, GLenum a4, GLenum a5) nothrow {
  glCombinerInputNV = cast(glbfn_glCombinerInputNV)glGetProcAddress(`glCombinerInputNV`);
  if (glCombinerInputNV is null) assert(0, `OpenGL function 'glCombinerInputNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCombinerInputNV'\n"); }
  glCombinerInputNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glCombinerOutputNV glCombinerOutputNV = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3, GLenum a4, GLenum a5, GLenum a6, GLboolean a7, GLboolean a8, GLboolean a9) nothrow {
  glCombinerOutputNV = cast(glbfn_glCombinerOutputNV)glGetProcAddress(`glCombinerOutputNV`);
  if (glCombinerOutputNV is null) assert(0, `OpenGL function 'glCombinerOutputNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCombinerOutputNV'\n"); }
  glCombinerOutputNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glFinalCombinerInputNV glFinalCombinerInputNV = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3) nothrow {
  glFinalCombinerInputNV = cast(glbfn_glFinalCombinerInputNV)glGetProcAddress(`glFinalCombinerInputNV`);
  if (glFinalCombinerInputNV is null) assert(0, `OpenGL function 'glFinalCombinerInputNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFinalCombinerInputNV'\n"); }
  glFinalCombinerInputNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3, GLfloat* a4) nothrow {
  glGetCombinerInputParameterfvNV = cast(glbfn_glGetCombinerInputParameterfvNV)glGetProcAddress(`glGetCombinerInputParameterfvNV`);
  if (glGetCombinerInputParameterfvNV is null) assert(0, `OpenGL function 'glGetCombinerInputParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCombinerInputParameterfvNV'\n"); }
  glGetCombinerInputParameterfvNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetCombinerInputParameterivNV glGetCombinerInputParameterivNV = function void (GLenum a0, GLenum a1, GLenum a2, GLenum a3, GLint* a4) nothrow {
  glGetCombinerInputParameterivNV = cast(glbfn_glGetCombinerInputParameterivNV)glGetProcAddress(`glGetCombinerInputParameterivNV`);
  if (glGetCombinerInputParameterivNV is null) assert(0, `OpenGL function 'glGetCombinerInputParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCombinerInputParameterivNV'\n"); }
  glGetCombinerInputParameterivNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV = function void (GLenum a0, GLenum a1, GLenum a2, GLfloat* a3) nothrow {
  glGetCombinerOutputParameterfvNV = cast(glbfn_glGetCombinerOutputParameterfvNV)glGetProcAddress(`glGetCombinerOutputParameterfvNV`);
  if (glGetCombinerOutputParameterfvNV is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCombinerOutputParameterfvNV'\n"); }
  glGetCombinerOutputParameterfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV = function void (GLenum a0, GLenum a1, GLenum a2, GLint* a3) nothrow {
  glGetCombinerOutputParameterivNV = cast(glbfn_glGetCombinerOutputParameterivNV)glGetProcAddress(`glGetCombinerOutputParameterivNV`);
  if (glGetCombinerOutputParameterivNV is null) assert(0, `OpenGL function 'glGetCombinerOutputParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCombinerOutputParameterivNV'\n"); }
  glGetCombinerOutputParameterivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetFinalCombinerInputParameterfvNV = cast(glbfn_glGetFinalCombinerInputParameterfvNV)glGetProcAddress(`glGetFinalCombinerInputParameterfvNV`);
  if (glGetFinalCombinerInputParameterfvNV is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFinalCombinerInputParameterfvNV'\n"); }
  glGetFinalCombinerInputParameterfvNV(a0,a1,a2,);
};
__gshared glbfn_glGetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetFinalCombinerInputParameterivNV = cast(glbfn_glGetFinalCombinerInputParameterivNV)glGetProcAddress(`glGetFinalCombinerInputParameterivNV`);
  if (glGetFinalCombinerInputParameterivNV is null) assert(0, `OpenGL function 'glGetFinalCombinerInputParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFinalCombinerInputParameterivNV'\n"); }
  glGetFinalCombinerInputParameterivNV(a0,a1,a2,);
};
__gshared glbfn_glCombinerStageParameterfvNV glCombinerStageParameterfvNV = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glCombinerStageParameterfvNV = cast(glbfn_glCombinerStageParameterfvNV)glGetProcAddress(`glCombinerStageParameterfvNV`);
  if (glCombinerStageParameterfvNV is null) assert(0, `OpenGL function 'glCombinerStageParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCombinerStageParameterfvNV'\n"); }
  glCombinerStageParameterfvNV(a0,a1,a2,);
};
__gshared glbfn_glGetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetCombinerStageParameterfvNV = cast(glbfn_glGetCombinerStageParameterfvNV)glGetProcAddress(`glGetCombinerStageParameterfvNV`);
  if (glGetCombinerStageParameterfvNV is null) assert(0, `OpenGL function 'glGetCombinerStageParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetCombinerStageParameterfvNV'\n"); }
  glGetCombinerStageParameterfvNV(a0,a1,a2,);
};
__gshared glbfn_glFramebufferSampleLocationsfvNV glFramebufferSampleLocationsfvNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glFramebufferSampleLocationsfvNV = cast(glbfn_glFramebufferSampleLocationsfvNV)glGetProcAddress(`glFramebufferSampleLocationsfvNV`);
  if (glFramebufferSampleLocationsfvNV is null) assert(0, `OpenGL function 'glFramebufferSampleLocationsfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferSampleLocationsfvNV'\n"); }
  glFramebufferSampleLocationsfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glNamedFramebufferSampleLocationsfvNV glNamedFramebufferSampleLocationsfvNV = function void (GLuint a0, GLuint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glNamedFramebufferSampleLocationsfvNV = cast(glbfn_glNamedFramebufferSampleLocationsfvNV)glGetProcAddress(`glNamedFramebufferSampleLocationsfvNV`);
  if (glNamedFramebufferSampleLocationsfvNV is null) assert(0, `OpenGL function 'glNamedFramebufferSampleLocationsfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNamedFramebufferSampleLocationsfvNV'\n"); }
  glNamedFramebufferSampleLocationsfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glResolveDepthValuesNV glResolveDepthValuesNV = function void () nothrow {
  glResolveDepthValuesNV = cast(glbfn_glResolveDepthValuesNV)glGetProcAddress(`glResolveDepthValuesNV`);
  if (glResolveDepthValuesNV is null) assert(0, `OpenGL function 'glResolveDepthValuesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResolveDepthValuesNV'\n"); }
  glResolveDepthValuesNV();
};
__gshared glbfn_glMakeBufferResidentNV glMakeBufferResidentNV = function void (GLenum a0, GLenum a1) nothrow {
  glMakeBufferResidentNV = cast(glbfn_glMakeBufferResidentNV)glGetProcAddress(`glMakeBufferResidentNV`);
  if (glMakeBufferResidentNV is null) assert(0, `OpenGL function 'glMakeBufferResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeBufferResidentNV'\n"); }
  glMakeBufferResidentNV(a0,a1,);
};
__gshared glbfn_glMakeBufferNonResidentNV glMakeBufferNonResidentNV = function void (GLenum a0) nothrow {
  glMakeBufferNonResidentNV = cast(glbfn_glMakeBufferNonResidentNV)glGetProcAddress(`glMakeBufferNonResidentNV`);
  if (glMakeBufferNonResidentNV is null) assert(0, `OpenGL function 'glMakeBufferNonResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeBufferNonResidentNV'\n"); }
  glMakeBufferNonResidentNV(a0,);
};
__gshared glbfn_glIsBufferResidentNV glIsBufferResidentNV = function GLboolean (GLenum a0) nothrow {
  glIsBufferResidentNV = cast(glbfn_glIsBufferResidentNV)glGetProcAddress(`glIsBufferResidentNV`);
  if (glIsBufferResidentNV is null) assert(0, `OpenGL function 'glIsBufferResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsBufferResidentNV'\n"); }
  return glIsBufferResidentNV(a0,);
};
__gshared glbfn_glMakeNamedBufferResidentNV glMakeNamedBufferResidentNV = function void (GLuint a0, GLenum a1) nothrow {
  glMakeNamedBufferResidentNV = cast(glbfn_glMakeNamedBufferResidentNV)glGetProcAddress(`glMakeNamedBufferResidentNV`);
  if (glMakeNamedBufferResidentNV is null) assert(0, `OpenGL function 'glMakeNamedBufferResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeNamedBufferResidentNV'\n"); }
  glMakeNamedBufferResidentNV(a0,a1,);
};
__gshared glbfn_glMakeNamedBufferNonResidentNV glMakeNamedBufferNonResidentNV = function void (GLuint a0) nothrow {
  glMakeNamedBufferNonResidentNV = cast(glbfn_glMakeNamedBufferNonResidentNV)glGetProcAddress(`glMakeNamedBufferNonResidentNV`);
  if (glMakeNamedBufferNonResidentNV is null) assert(0, `OpenGL function 'glMakeNamedBufferNonResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMakeNamedBufferNonResidentNV'\n"); }
  glMakeNamedBufferNonResidentNV(a0,);
};
__gshared glbfn_glIsNamedBufferResidentNV glIsNamedBufferResidentNV = function GLboolean (GLuint a0) nothrow {
  glIsNamedBufferResidentNV = cast(glbfn_glIsNamedBufferResidentNV)glGetProcAddress(`glIsNamedBufferResidentNV`);
  if (glIsNamedBufferResidentNV is null) assert(0, `OpenGL function 'glIsNamedBufferResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsNamedBufferResidentNV'\n"); }
  return glIsNamedBufferResidentNV(a0,);
};
__gshared glbfn_glGetBufferParameterui64vNV glGetBufferParameterui64vNV = function void (GLenum a0, GLenum a1, GLuint64EXT* a2) nothrow {
  glGetBufferParameterui64vNV = cast(glbfn_glGetBufferParameterui64vNV)glGetProcAddress(`glGetBufferParameterui64vNV`);
  if (glGetBufferParameterui64vNV is null) assert(0, `OpenGL function 'glGetBufferParameterui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetBufferParameterui64vNV'\n"); }
  glGetBufferParameterui64vNV(a0,a1,a2,);
};
__gshared glbfn_glGetNamedBufferParameterui64vNV glGetNamedBufferParameterui64vNV = function void (GLuint a0, GLenum a1, GLuint64EXT* a2) nothrow {
  glGetNamedBufferParameterui64vNV = cast(glbfn_glGetNamedBufferParameterui64vNV)glGetProcAddress(`glGetNamedBufferParameterui64vNV`);
  if (glGetNamedBufferParameterui64vNV is null) assert(0, `OpenGL function 'glGetNamedBufferParameterui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetNamedBufferParameterui64vNV'\n"); }
  glGetNamedBufferParameterui64vNV(a0,a1,a2,);
};
__gshared glbfn_glGetIntegerui64vNV glGetIntegerui64vNV = function void (GLenum a0, GLuint64EXT* a1) nothrow {
  glGetIntegerui64vNV = cast(glbfn_glGetIntegerui64vNV)glGetProcAddress(`glGetIntegerui64vNV`);
  if (glGetIntegerui64vNV is null) assert(0, `OpenGL function 'glGetIntegerui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetIntegerui64vNV'\n"); }
  glGetIntegerui64vNV(a0,a1,);
};
__gshared glbfn_glUniformui64NV glUniformui64NV = function void (GLint a0, GLuint64EXT a1) nothrow {
  glUniformui64NV = cast(glbfn_glUniformui64NV)glGetProcAddress(`glUniformui64NV`);
  if (glUniformui64NV is null) assert(0, `OpenGL function 'glUniformui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformui64NV'\n"); }
  glUniformui64NV(a0,a1,);
};
__gshared glbfn_glUniformui64vNV glUniformui64vNV = function void (GLint a0, GLsizei a1, const(GLuint64EXT)* a2) nothrow {
  glUniformui64vNV = cast(glbfn_glUniformui64vNV)glGetProcAddress(`glUniformui64vNV`);
  if (glUniformui64vNV is null) assert(0, `OpenGL function 'glUniformui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glUniformui64vNV'\n"); }
  glUniformui64vNV(a0,a1,a2,);
};
__gshared glbfn_glProgramUniformui64NV glProgramUniformui64NV = function void (GLuint a0, GLint a1, GLuint64EXT a2) nothrow {
  glProgramUniformui64NV = cast(glbfn_glProgramUniformui64NV)glGetProcAddress(`glProgramUniformui64NV`);
  if (glProgramUniformui64NV is null) assert(0, `OpenGL function 'glProgramUniformui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformui64NV'\n"); }
  glProgramUniformui64NV(a0,a1,a2,);
};
__gshared glbfn_glProgramUniformui64vNV glProgramUniformui64vNV = function void (GLuint a0, GLint a1, GLsizei a2, const(GLuint64EXT)* a3) nothrow {
  glProgramUniformui64vNV = cast(glbfn_glProgramUniformui64vNV)glGetProcAddress(`glProgramUniformui64vNV`);
  if (glProgramUniformui64vNV is null) assert(0, `OpenGL function 'glProgramUniformui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramUniformui64vNV'\n"); }
  glProgramUniformui64vNV(a0,a1,a2,a3,);
};
__gshared glbfn_glTextureBarrierNV glTextureBarrierNV = function void () nothrow {
  glTextureBarrierNV = cast(glbfn_glTextureBarrierNV)glGetProcAddress(`glTextureBarrierNV`);
  if (glTextureBarrierNV is null) assert(0, `OpenGL function 'glTextureBarrierNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureBarrierNV'\n"); }
  glTextureBarrierNV();
};
__gshared glbfn_glTexImage2DMultisampleCoverageNV glTexImage2DMultisampleCoverageNV = function void (GLenum a0, GLsizei a1, GLsizei a2, GLint a3, GLsizei a4, GLsizei a5, GLboolean a6) nothrow {
  glTexImage2DMultisampleCoverageNV = cast(glbfn_glTexImage2DMultisampleCoverageNV)glGetProcAddress(`glTexImage2DMultisampleCoverageNV`);
  if (glTexImage2DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTexImage2DMultisampleCoverageNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage2DMultisampleCoverageNV'\n"); }
  glTexImage2DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTexImage3DMultisampleCoverageNV glTexImage3DMultisampleCoverageNV = function void (GLenum a0, GLsizei a1, GLsizei a2, GLint a3, GLsizei a4, GLsizei a5, GLsizei a6, GLboolean a7) nothrow {
  glTexImage3DMultisampleCoverageNV = cast(glbfn_glTexImage3DMultisampleCoverageNV)glGetProcAddress(`glTexImage3DMultisampleCoverageNV`);
  if (glTexImage3DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTexImage3DMultisampleCoverageNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage3DMultisampleCoverageNV'\n"); }
  glTexImage3DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTextureImage2DMultisampleNV glTextureImage2DMultisampleNV = function void (GLuint a0, GLenum a1, GLsizei a2, GLint a3, GLsizei a4, GLsizei a5, GLboolean a6) nothrow {
  glTextureImage2DMultisampleNV = cast(glbfn_glTextureImage2DMultisampleNV)glGetProcAddress(`glTextureImage2DMultisampleNV`);
  if (glTextureImage2DMultisampleNV is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureImage2DMultisampleNV'\n"); }
  glTextureImage2DMultisampleNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glTextureImage3DMultisampleNV glTextureImage3DMultisampleNV = function void (GLuint a0, GLenum a1, GLsizei a2, GLint a3, GLsizei a4, GLsizei a5, GLsizei a6, GLboolean a7) nothrow {
  glTextureImage3DMultisampleNV = cast(glbfn_glTextureImage3DMultisampleNV)glGetProcAddress(`glTextureImage3DMultisampleNV`);
  if (glTextureImage3DMultisampleNV is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureImage3DMultisampleNV'\n"); }
  glTextureImage3DMultisampleNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTextureImage2DMultisampleCoverageNV glTextureImage2DMultisampleCoverageNV = function void (GLuint a0, GLenum a1, GLsizei a2, GLsizei a3, GLint a4, GLsizei a5, GLsizei a6, GLboolean a7) nothrow {
  glTextureImage2DMultisampleCoverageNV = cast(glbfn_glTextureImage2DMultisampleCoverageNV)glGetProcAddress(`glTextureImage2DMultisampleCoverageNV`);
  if (glTextureImage2DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTextureImage2DMultisampleCoverageNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureImage2DMultisampleCoverageNV'\n"); }
  glTextureImage2DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTextureImage3DMultisampleCoverageNV glTextureImage3DMultisampleCoverageNV = function void (GLuint a0, GLenum a1, GLsizei a2, GLsizei a3, GLint a4, GLsizei a5, GLsizei a6, GLsizei a7, GLboolean a8) nothrow {
  glTextureImage3DMultisampleCoverageNV = cast(glbfn_glTextureImage3DMultisampleCoverageNV)glGetProcAddress(`glTextureImage3DMultisampleCoverageNV`);
  if (glTextureImage3DMultisampleCoverageNV is null) assert(0, `OpenGL function 'glTextureImage3DMultisampleCoverageNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureImage3DMultisampleCoverageNV'\n"); }
  glTextureImage3DMultisampleCoverageNV(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glBeginTransformFeedbackNV glBeginTransformFeedbackNV = function void (GLenum a0) nothrow {
  glBeginTransformFeedbackNV = cast(glbfn_glBeginTransformFeedbackNV)glGetProcAddress(`glBeginTransformFeedbackNV`);
  if (glBeginTransformFeedbackNV is null) assert(0, `OpenGL function 'glBeginTransformFeedbackNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginTransformFeedbackNV'\n"); }
  glBeginTransformFeedbackNV(a0,);
};
__gshared glbfn_glEndTransformFeedbackNV glEndTransformFeedbackNV = function void () nothrow {
  glEndTransformFeedbackNV = cast(glbfn_glEndTransformFeedbackNV)glGetProcAddress(`glEndTransformFeedbackNV`);
  if (glEndTransformFeedbackNV is null) assert(0, `OpenGL function 'glEndTransformFeedbackNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndTransformFeedbackNV'\n"); }
  glEndTransformFeedbackNV();
};
__gshared glbfn_glTransformFeedbackAttribsNV glTransformFeedbackAttribsNV = function void (GLsizei a0, const(GLint)* a1, GLenum a2) nothrow {
  glTransformFeedbackAttribsNV = cast(glbfn_glTransformFeedbackAttribsNV)glGetProcAddress(`glTransformFeedbackAttribsNV`);
  if (glTransformFeedbackAttribsNV is null) assert(0, `OpenGL function 'glTransformFeedbackAttribsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformFeedbackAttribsNV'\n"); }
  glTransformFeedbackAttribsNV(a0,a1,a2,);
};
__gshared glbfn_glBindBufferRangeNV glBindBufferRangeNV = function void (GLenum a0, GLuint a1, GLuint a2, GLintptr a3, GLsizeiptr a4) nothrow {
  glBindBufferRangeNV = cast(glbfn_glBindBufferRangeNV)glGetProcAddress(`glBindBufferRangeNV`);
  if (glBindBufferRangeNV is null) assert(0, `OpenGL function 'glBindBufferRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferRangeNV'\n"); }
  glBindBufferRangeNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBindBufferOffsetNV glBindBufferOffsetNV = function void (GLenum a0, GLuint a1, GLuint a2, GLintptr a3) nothrow {
  glBindBufferOffsetNV = cast(glbfn_glBindBufferOffsetNV)glGetProcAddress(`glBindBufferOffsetNV`);
  if (glBindBufferOffsetNV is null) assert(0, `OpenGL function 'glBindBufferOffsetNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferOffsetNV'\n"); }
  glBindBufferOffsetNV(a0,a1,a2,a3,);
};
__gshared glbfn_glBindBufferBaseNV glBindBufferBaseNV = function void (GLenum a0, GLuint a1, GLuint a2) nothrow {
  glBindBufferBaseNV = cast(glbfn_glBindBufferBaseNV)glGetProcAddress(`glBindBufferBaseNV`);
  if (glBindBufferBaseNV is null) assert(0, `OpenGL function 'glBindBufferBaseNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindBufferBaseNV'\n"); }
  glBindBufferBaseNV(a0,a1,a2,);
};
__gshared glbfn_glTransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV = function void (GLuint a0, GLsizei a1, const(GLint)* a2, GLenum a3) nothrow {
  glTransformFeedbackVaryingsNV = cast(glbfn_glTransformFeedbackVaryingsNV)glGetProcAddress(`glTransformFeedbackVaryingsNV`);
  if (glTransformFeedbackVaryingsNV is null) assert(0, `OpenGL function 'glTransformFeedbackVaryingsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformFeedbackVaryingsNV'\n"); }
  glTransformFeedbackVaryingsNV(a0,a1,a2,a3,);
};
__gshared glbfn_glActiveVaryingNV glActiveVaryingNV = function void (GLuint a0, const(GLchar)* a1) nothrow {
  glActiveVaryingNV = cast(glbfn_glActiveVaryingNV)glGetProcAddress(`glActiveVaryingNV`);
  if (glActiveVaryingNV is null) assert(0, `OpenGL function 'glActiveVaryingNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glActiveVaryingNV'\n"); }
  glActiveVaryingNV(a0,a1,);
};
__gshared glbfn_glGetVaryingLocationNV glGetVaryingLocationNV = function GLint (GLuint a0, const(GLchar)* a1) nothrow {
  glGetVaryingLocationNV = cast(glbfn_glGetVaryingLocationNV)glGetProcAddress(`glGetVaryingLocationNV`);
  if (glGetVaryingLocationNV is null) assert(0, `OpenGL function 'glGetVaryingLocationNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVaryingLocationNV'\n"); }
  return glGetVaryingLocationNV(a0,a1,);
};
__gshared glbfn_glGetActiveVaryingNV glGetActiveVaryingNV = function void (GLuint a0, GLuint a1, GLsizei a2, GLsizei* a3, GLsizei* a4, GLenum* a5, GLchar* a6) nothrow {
  glGetActiveVaryingNV = cast(glbfn_glGetActiveVaryingNV)glGetProcAddress(`glGetActiveVaryingNV`);
  if (glGetActiveVaryingNV is null) assert(0, `OpenGL function 'glGetActiveVaryingNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetActiveVaryingNV'\n"); }
  glGetActiveVaryingNV(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glGetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV = function void (GLuint a0, GLuint a1, GLint* a2) nothrow {
  glGetTransformFeedbackVaryingNV = cast(glbfn_glGetTransformFeedbackVaryingNV)glGetProcAddress(`glGetTransformFeedbackVaryingNV`);
  if (glGetTransformFeedbackVaryingNV is null) assert(0, `OpenGL function 'glGetTransformFeedbackVaryingNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTransformFeedbackVaryingNV'\n"); }
  glGetTransformFeedbackVaryingNV(a0,a1,a2,);
};
__gshared glbfn_glTransformFeedbackStreamAttribsNV glTransformFeedbackStreamAttribsNV = function void (GLsizei a0, const(GLint)* a1, GLsizei a2, const(GLint)* a3, GLenum a4) nothrow {
  glTransformFeedbackStreamAttribsNV = cast(glbfn_glTransformFeedbackStreamAttribsNV)glGetProcAddress(`glTransformFeedbackStreamAttribsNV`);
  if (glTransformFeedbackStreamAttribsNV is null) assert(0, `OpenGL function 'glTransformFeedbackStreamAttribsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTransformFeedbackStreamAttribsNV'\n"); }
  glTransformFeedbackStreamAttribsNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glBindTransformFeedbackNV glBindTransformFeedbackNV = function void (GLenum a0, GLuint a1) nothrow {
  glBindTransformFeedbackNV = cast(glbfn_glBindTransformFeedbackNV)glGetProcAddress(`glBindTransformFeedbackNV`);
  if (glBindTransformFeedbackNV is null) assert(0, `OpenGL function 'glBindTransformFeedbackNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindTransformFeedbackNV'\n"); }
  glBindTransformFeedbackNV(a0,a1,);
};
__gshared glbfn_glDeleteTransformFeedbacksNV glDeleteTransformFeedbacksNV = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteTransformFeedbacksNV = cast(glbfn_glDeleteTransformFeedbacksNV)glGetProcAddress(`glDeleteTransformFeedbacksNV`);
  if (glDeleteTransformFeedbacksNV is null) assert(0, `OpenGL function 'glDeleteTransformFeedbacksNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteTransformFeedbacksNV'\n"); }
  glDeleteTransformFeedbacksNV(a0,a1,);
};
__gshared glbfn_glGenTransformFeedbacksNV glGenTransformFeedbacksNV = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenTransformFeedbacksNV = cast(glbfn_glGenTransformFeedbacksNV)glGetProcAddress(`glGenTransformFeedbacksNV`);
  if (glGenTransformFeedbacksNV is null) assert(0, `OpenGL function 'glGenTransformFeedbacksNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenTransformFeedbacksNV'\n"); }
  glGenTransformFeedbacksNV(a0,a1,);
};
__gshared glbfn_glIsTransformFeedbackNV glIsTransformFeedbackNV = function GLboolean (GLuint a0) nothrow {
  glIsTransformFeedbackNV = cast(glbfn_glIsTransformFeedbackNV)glGetProcAddress(`glIsTransformFeedbackNV`);
  if (glIsTransformFeedbackNV is null) assert(0, `OpenGL function 'glIsTransformFeedbackNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsTransformFeedbackNV'\n"); }
  return glIsTransformFeedbackNV(a0,);
};
__gshared glbfn_glPauseTransformFeedbackNV glPauseTransformFeedbackNV = function void () nothrow {
  glPauseTransformFeedbackNV = cast(glbfn_glPauseTransformFeedbackNV)glGetProcAddress(`glPauseTransformFeedbackNV`);
  if (glPauseTransformFeedbackNV is null) assert(0, `OpenGL function 'glPauseTransformFeedbackNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPauseTransformFeedbackNV'\n"); }
  glPauseTransformFeedbackNV();
};
__gshared glbfn_glResumeTransformFeedbackNV glResumeTransformFeedbackNV = function void () nothrow {
  glResumeTransformFeedbackNV = cast(glbfn_glResumeTransformFeedbackNV)glGetProcAddress(`glResumeTransformFeedbackNV`);
  if (glResumeTransformFeedbackNV is null) assert(0, `OpenGL function 'glResumeTransformFeedbackNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glResumeTransformFeedbackNV'\n"); }
  glResumeTransformFeedbackNV();
};
__gshared glbfn_glDrawTransformFeedbackNV glDrawTransformFeedbackNV = function void (GLenum a0, GLuint a1) nothrow {
  glDrawTransformFeedbackNV = cast(glbfn_glDrawTransformFeedbackNV)glGetProcAddress(`glDrawTransformFeedbackNV`);
  if (glDrawTransformFeedbackNV is null) assert(0, `OpenGL function 'glDrawTransformFeedbackNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawTransformFeedbackNV'\n"); }
  glDrawTransformFeedbackNV(a0,a1,);
};
__gshared glbfn_glVDPAUInitNV glVDPAUInitNV = function void (const(void)* a0, const(void)* a1) nothrow {
  glVDPAUInitNV = cast(glbfn_glVDPAUInitNV)glGetProcAddress(`glVDPAUInitNV`);
  if (glVDPAUInitNV is null) assert(0, `OpenGL function 'glVDPAUInitNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUInitNV'\n"); }
  glVDPAUInitNV(a0,a1,);
};
__gshared glbfn_glVDPAUFiniNV glVDPAUFiniNV = function void () nothrow {
  glVDPAUFiniNV = cast(glbfn_glVDPAUFiniNV)glGetProcAddress(`glVDPAUFiniNV`);
  if (glVDPAUFiniNV is null) assert(0, `OpenGL function 'glVDPAUFiniNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUFiniNV'\n"); }
  glVDPAUFiniNV();
};
__gshared glbfn_glVDPAURegisterVideoSurfaceNV glVDPAURegisterVideoSurfaceNV = function GLvdpauSurfaceNV (const(void)* a0, GLenum a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glVDPAURegisterVideoSurfaceNV = cast(glbfn_glVDPAURegisterVideoSurfaceNV)glGetProcAddress(`glVDPAURegisterVideoSurfaceNV`);
  if (glVDPAURegisterVideoSurfaceNV is null) assert(0, `OpenGL function 'glVDPAURegisterVideoSurfaceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAURegisterVideoSurfaceNV'\n"); }
  return glVDPAURegisterVideoSurfaceNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVDPAURegisterOutputSurfaceNV glVDPAURegisterOutputSurfaceNV = function GLvdpauSurfaceNV (const(void)* a0, GLenum a1, GLsizei a2, const(GLuint)* a3) nothrow {
  glVDPAURegisterOutputSurfaceNV = cast(glbfn_glVDPAURegisterOutputSurfaceNV)glGetProcAddress(`glVDPAURegisterOutputSurfaceNV`);
  if (glVDPAURegisterOutputSurfaceNV is null) assert(0, `OpenGL function 'glVDPAURegisterOutputSurfaceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAURegisterOutputSurfaceNV'\n"); }
  return glVDPAURegisterOutputSurfaceNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVDPAUIsSurfaceNV glVDPAUIsSurfaceNV = function GLboolean (GLvdpauSurfaceNV a0) nothrow {
  glVDPAUIsSurfaceNV = cast(glbfn_glVDPAUIsSurfaceNV)glGetProcAddress(`glVDPAUIsSurfaceNV`);
  if (glVDPAUIsSurfaceNV is null) assert(0, `OpenGL function 'glVDPAUIsSurfaceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUIsSurfaceNV'\n"); }
  return glVDPAUIsSurfaceNV(a0,);
};
__gshared glbfn_glVDPAUUnregisterSurfaceNV glVDPAUUnregisterSurfaceNV = function void (GLvdpauSurfaceNV a0) nothrow {
  glVDPAUUnregisterSurfaceNV = cast(glbfn_glVDPAUUnregisterSurfaceNV)glGetProcAddress(`glVDPAUUnregisterSurfaceNV`);
  if (glVDPAUUnregisterSurfaceNV is null) assert(0, `OpenGL function 'glVDPAUUnregisterSurfaceNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUUnregisterSurfaceNV'\n"); }
  glVDPAUUnregisterSurfaceNV(a0,);
};
__gshared glbfn_glVDPAUGetSurfaceivNV glVDPAUGetSurfaceivNV = function void (GLvdpauSurfaceNV a0, GLenum a1, GLsizei a2, GLsizei* a3, GLint* a4) nothrow {
  glVDPAUGetSurfaceivNV = cast(glbfn_glVDPAUGetSurfaceivNV)glGetProcAddress(`glVDPAUGetSurfaceivNV`);
  if (glVDPAUGetSurfaceivNV is null) assert(0, `OpenGL function 'glVDPAUGetSurfaceivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUGetSurfaceivNV'\n"); }
  glVDPAUGetSurfaceivNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVDPAUSurfaceAccessNV glVDPAUSurfaceAccessNV = function void (GLvdpauSurfaceNV a0, GLenum a1) nothrow {
  glVDPAUSurfaceAccessNV = cast(glbfn_glVDPAUSurfaceAccessNV)glGetProcAddress(`glVDPAUSurfaceAccessNV`);
  if (glVDPAUSurfaceAccessNV is null) assert(0, `OpenGL function 'glVDPAUSurfaceAccessNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUSurfaceAccessNV'\n"); }
  glVDPAUSurfaceAccessNV(a0,a1,);
};
__gshared glbfn_glVDPAUMapSurfacesNV glVDPAUMapSurfacesNV = function void (GLsizei a0, const(GLvdpauSurfaceNV)* a1) nothrow {
  glVDPAUMapSurfacesNV = cast(glbfn_glVDPAUMapSurfacesNV)glGetProcAddress(`glVDPAUMapSurfacesNV`);
  if (glVDPAUMapSurfacesNV is null) assert(0, `OpenGL function 'glVDPAUMapSurfacesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUMapSurfacesNV'\n"); }
  glVDPAUMapSurfacesNV(a0,a1,);
};
__gshared glbfn_glVDPAUUnmapSurfacesNV glVDPAUUnmapSurfacesNV = function void (GLsizei a0, const(GLvdpauSurfaceNV)* a1) nothrow {
  glVDPAUUnmapSurfacesNV = cast(glbfn_glVDPAUUnmapSurfacesNV)glGetProcAddress(`glVDPAUUnmapSurfacesNV`);
  if (glVDPAUUnmapSurfacesNV is null) assert(0, `OpenGL function 'glVDPAUUnmapSurfacesNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVDPAUUnmapSurfacesNV'\n"); }
  glVDPAUUnmapSurfacesNV(a0,a1,);
};
__gshared glbfn_glFlushVertexArrayRangeNV glFlushVertexArrayRangeNV = function void () nothrow {
  glFlushVertexArrayRangeNV = cast(glbfn_glFlushVertexArrayRangeNV)glGetProcAddress(`glFlushVertexArrayRangeNV`);
  if (glFlushVertexArrayRangeNV is null) assert(0, `OpenGL function 'glFlushVertexArrayRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushVertexArrayRangeNV'\n"); }
  glFlushVertexArrayRangeNV();
};
__gshared glbfn_glVertexArrayRangeNV glVertexArrayRangeNV = function void (GLsizei a0, const(void)* a1) nothrow {
  glVertexArrayRangeNV = cast(glbfn_glVertexArrayRangeNV)glGetProcAddress(`glVertexArrayRangeNV`);
  if (glVertexArrayRangeNV is null) assert(0, `OpenGL function 'glVertexArrayRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexArrayRangeNV'\n"); }
  glVertexArrayRangeNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL1i64NV glVertexAttribL1i64NV = function void (GLuint a0, GLint64EXT a1) nothrow {
  glVertexAttribL1i64NV = cast(glbfn_glVertexAttribL1i64NV)glGetProcAddress(`glVertexAttribL1i64NV`);
  if (glVertexAttribL1i64NV is null) assert(0, `OpenGL function 'glVertexAttribL1i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1i64NV'\n"); }
  glVertexAttribL1i64NV(a0,a1,);
};
__gshared glbfn_glVertexAttribL2i64NV glVertexAttribL2i64NV = function void (GLuint a0, GLint64EXT a1, GLint64EXT a2) nothrow {
  glVertexAttribL2i64NV = cast(glbfn_glVertexAttribL2i64NV)glGetProcAddress(`glVertexAttribL2i64NV`);
  if (glVertexAttribL2i64NV is null) assert(0, `OpenGL function 'glVertexAttribL2i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2i64NV'\n"); }
  glVertexAttribL2i64NV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribL3i64NV glVertexAttribL3i64NV = function void (GLuint a0, GLint64EXT a1, GLint64EXT a2, GLint64EXT a3) nothrow {
  glVertexAttribL3i64NV = cast(glbfn_glVertexAttribL3i64NV)glGetProcAddress(`glVertexAttribL3i64NV`);
  if (glVertexAttribL3i64NV is null) assert(0, `OpenGL function 'glVertexAttribL3i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3i64NV'\n"); }
  glVertexAttribL3i64NV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribL4i64NV glVertexAttribL4i64NV = function void (GLuint a0, GLint64EXT a1, GLint64EXT a2, GLint64EXT a3, GLint64EXT a4) nothrow {
  glVertexAttribL4i64NV = cast(glbfn_glVertexAttribL4i64NV)glGetProcAddress(`glVertexAttribL4i64NV`);
  if (glVertexAttribL4i64NV is null) assert(0, `OpenGL function 'glVertexAttribL4i64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4i64NV'\n"); }
  glVertexAttribL4i64NV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribL1i64vNV glVertexAttribL1i64vNV = function void (GLuint a0, const(GLint64EXT)* a1) nothrow {
  glVertexAttribL1i64vNV = cast(glbfn_glVertexAttribL1i64vNV)glGetProcAddress(`glVertexAttribL1i64vNV`);
  if (glVertexAttribL1i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL1i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1i64vNV'\n"); }
  glVertexAttribL1i64vNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL2i64vNV glVertexAttribL2i64vNV = function void (GLuint a0, const(GLint64EXT)* a1) nothrow {
  glVertexAttribL2i64vNV = cast(glbfn_glVertexAttribL2i64vNV)glGetProcAddress(`glVertexAttribL2i64vNV`);
  if (glVertexAttribL2i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL2i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2i64vNV'\n"); }
  glVertexAttribL2i64vNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL3i64vNV glVertexAttribL3i64vNV = function void (GLuint a0, const(GLint64EXT)* a1) nothrow {
  glVertexAttribL3i64vNV = cast(glbfn_glVertexAttribL3i64vNV)glGetProcAddress(`glVertexAttribL3i64vNV`);
  if (glVertexAttribL3i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL3i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3i64vNV'\n"); }
  glVertexAttribL3i64vNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL4i64vNV glVertexAttribL4i64vNV = function void (GLuint a0, const(GLint64EXT)* a1) nothrow {
  glVertexAttribL4i64vNV = cast(glbfn_glVertexAttribL4i64vNV)glGetProcAddress(`glVertexAttribL4i64vNV`);
  if (glVertexAttribL4i64vNV is null) assert(0, `OpenGL function 'glVertexAttribL4i64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4i64vNV'\n"); }
  glVertexAttribL4i64vNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL1ui64NV glVertexAttribL1ui64NV = function void (GLuint a0, GLuint64EXT a1) nothrow {
  glVertexAttribL1ui64NV = cast(glbfn_glVertexAttribL1ui64NV)glGetProcAddress(`glVertexAttribL1ui64NV`);
  if (glVertexAttribL1ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL1ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1ui64NV'\n"); }
  glVertexAttribL1ui64NV(a0,a1,);
};
__gshared glbfn_glVertexAttribL2ui64NV glVertexAttribL2ui64NV = function void (GLuint a0, GLuint64EXT a1, GLuint64EXT a2) nothrow {
  glVertexAttribL2ui64NV = cast(glbfn_glVertexAttribL2ui64NV)glGetProcAddress(`glVertexAttribL2ui64NV`);
  if (glVertexAttribL2ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL2ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2ui64NV'\n"); }
  glVertexAttribL2ui64NV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribL3ui64NV glVertexAttribL3ui64NV = function void (GLuint a0, GLuint64EXT a1, GLuint64EXT a2, GLuint64EXT a3) nothrow {
  glVertexAttribL3ui64NV = cast(glbfn_glVertexAttribL3ui64NV)glGetProcAddress(`glVertexAttribL3ui64NV`);
  if (glVertexAttribL3ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL3ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3ui64NV'\n"); }
  glVertexAttribL3ui64NV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribL4ui64NV glVertexAttribL4ui64NV = function void (GLuint a0, GLuint64EXT a1, GLuint64EXT a2, GLuint64EXT a3, GLuint64EXT a4) nothrow {
  glVertexAttribL4ui64NV = cast(glbfn_glVertexAttribL4ui64NV)glGetProcAddress(`glVertexAttribL4ui64NV`);
  if (glVertexAttribL4ui64NV is null) assert(0, `OpenGL function 'glVertexAttribL4ui64NV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4ui64NV'\n"); }
  glVertexAttribL4ui64NV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribL1ui64vNV glVertexAttribL1ui64vNV = function void (GLuint a0, const(GLuint64EXT)* a1) nothrow {
  glVertexAttribL1ui64vNV = cast(glbfn_glVertexAttribL1ui64vNV)glGetProcAddress(`glVertexAttribL1ui64vNV`);
  if (glVertexAttribL1ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL1ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL1ui64vNV'\n"); }
  glVertexAttribL1ui64vNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL2ui64vNV glVertexAttribL2ui64vNV = function void (GLuint a0, const(GLuint64EXT)* a1) nothrow {
  glVertexAttribL2ui64vNV = cast(glbfn_glVertexAttribL2ui64vNV)glGetProcAddress(`glVertexAttribL2ui64vNV`);
  if (glVertexAttribL2ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL2ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL2ui64vNV'\n"); }
  glVertexAttribL2ui64vNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL3ui64vNV glVertexAttribL3ui64vNV = function void (GLuint a0, const(GLuint64EXT)* a1) nothrow {
  glVertexAttribL3ui64vNV = cast(glbfn_glVertexAttribL3ui64vNV)glGetProcAddress(`glVertexAttribL3ui64vNV`);
  if (glVertexAttribL3ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL3ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL3ui64vNV'\n"); }
  glVertexAttribL3ui64vNV(a0,a1,);
};
__gshared glbfn_glVertexAttribL4ui64vNV glVertexAttribL4ui64vNV = function void (GLuint a0, const(GLuint64EXT)* a1) nothrow {
  glVertexAttribL4ui64vNV = cast(glbfn_glVertexAttribL4ui64vNV)glGetProcAddress(`glVertexAttribL4ui64vNV`);
  if (glVertexAttribL4ui64vNV is null) assert(0, `OpenGL function 'glVertexAttribL4ui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribL4ui64vNV'\n"); }
  glVertexAttribL4ui64vNV(a0,a1,);
};
__gshared glbfn_glGetVertexAttribLi64vNV glGetVertexAttribLi64vNV = function void (GLuint a0, GLenum a1, GLint64EXT* a2) nothrow {
  glGetVertexAttribLi64vNV = cast(glbfn_glGetVertexAttribLi64vNV)glGetProcAddress(`glGetVertexAttribLi64vNV`);
  if (glGetVertexAttribLi64vNV is null) assert(0, `OpenGL function 'glGetVertexAttribLi64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribLi64vNV'\n"); }
  glGetVertexAttribLi64vNV(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribLui64vNV glGetVertexAttribLui64vNV = function void (GLuint a0, GLenum a1, GLuint64EXT* a2) nothrow {
  glGetVertexAttribLui64vNV = cast(glbfn_glGetVertexAttribLui64vNV)glGetProcAddress(`glGetVertexAttribLui64vNV`);
  if (glGetVertexAttribLui64vNV is null) assert(0, `OpenGL function 'glGetVertexAttribLui64vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribLui64vNV'\n"); }
  glGetVertexAttribLui64vNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribLFormatNV glVertexAttribLFormatNV = function void (GLuint a0, GLint a1, GLenum a2, GLsizei a3) nothrow {
  glVertexAttribLFormatNV = cast(glbfn_glVertexAttribLFormatNV)glGetProcAddress(`glVertexAttribLFormatNV`);
  if (glVertexAttribLFormatNV is null) assert(0, `OpenGL function 'glVertexAttribLFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribLFormatNV'\n"); }
  glVertexAttribLFormatNV(a0,a1,a2,a3,);
};
__gshared glbfn_glBufferAddressRangeNV glBufferAddressRangeNV = function void (GLenum a0, GLuint a1, GLuint64EXT a2, GLsizeiptr a3) nothrow {
  glBufferAddressRangeNV = cast(glbfn_glBufferAddressRangeNV)glGetProcAddress(`glBufferAddressRangeNV`);
  if (glBufferAddressRangeNV is null) assert(0, `OpenGL function 'glBufferAddressRangeNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBufferAddressRangeNV'\n"); }
  glBufferAddressRangeNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexFormatNV glVertexFormatNV = function void (GLint a0, GLenum a1, GLsizei a2) nothrow {
  glVertexFormatNV = cast(glbfn_glVertexFormatNV)glGetProcAddress(`glVertexFormatNV`);
  if (glVertexFormatNV is null) assert(0, `OpenGL function 'glVertexFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexFormatNV'\n"); }
  glVertexFormatNV(a0,a1,a2,);
};
__gshared glbfn_glNormalFormatNV glNormalFormatNV = function void (GLenum a0, GLsizei a1) nothrow {
  glNormalFormatNV = cast(glbfn_glNormalFormatNV)glGetProcAddress(`glNormalFormatNV`);
  if (glNormalFormatNV is null) assert(0, `OpenGL function 'glNormalFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormalFormatNV'\n"); }
  glNormalFormatNV(a0,a1,);
};
__gshared glbfn_glColorFormatNV glColorFormatNV = function void (GLint a0, GLenum a1, GLsizei a2) nothrow {
  glColorFormatNV = cast(glbfn_glColorFormatNV)glGetProcAddress(`glColorFormatNV`);
  if (glColorFormatNV is null) assert(0, `OpenGL function 'glColorFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorFormatNV'\n"); }
  glColorFormatNV(a0,a1,a2,);
};
__gshared glbfn_glIndexFormatNV glIndexFormatNV = function void (GLenum a0, GLsizei a1) nothrow {
  glIndexFormatNV = cast(glbfn_glIndexFormatNV)glGetProcAddress(`glIndexFormatNV`);
  if (glIndexFormatNV is null) assert(0, `OpenGL function 'glIndexFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexFormatNV'\n"); }
  glIndexFormatNV(a0,a1,);
};
__gshared glbfn_glTexCoordFormatNV glTexCoordFormatNV = function void (GLint a0, GLenum a1, GLsizei a2) nothrow {
  glTexCoordFormatNV = cast(glbfn_glTexCoordFormatNV)glGetProcAddress(`glTexCoordFormatNV`);
  if (glTexCoordFormatNV is null) assert(0, `OpenGL function 'glTexCoordFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoordFormatNV'\n"); }
  glTexCoordFormatNV(a0,a1,a2,);
};
__gshared glbfn_glEdgeFlagFormatNV glEdgeFlagFormatNV = function void (GLsizei a0) nothrow {
  glEdgeFlagFormatNV = cast(glbfn_glEdgeFlagFormatNV)glGetProcAddress(`glEdgeFlagFormatNV`);
  if (glEdgeFlagFormatNV is null) assert(0, `OpenGL function 'glEdgeFlagFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEdgeFlagFormatNV'\n"); }
  glEdgeFlagFormatNV(a0,);
};
__gshared glbfn_glSecondaryColorFormatNV glSecondaryColorFormatNV = function void (GLint a0, GLenum a1, GLsizei a2) nothrow {
  glSecondaryColorFormatNV = cast(glbfn_glSecondaryColorFormatNV)glGetProcAddress(`glSecondaryColorFormatNV`);
  if (glSecondaryColorFormatNV is null) assert(0, `OpenGL function 'glSecondaryColorFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSecondaryColorFormatNV'\n"); }
  glSecondaryColorFormatNV(a0,a1,a2,);
};
__gshared glbfn_glFogCoordFormatNV glFogCoordFormatNV = function void (GLenum a0, GLsizei a1) nothrow {
  glFogCoordFormatNV = cast(glbfn_glFogCoordFormatNV)glGetProcAddress(`glFogCoordFormatNV`);
  if (glFogCoordFormatNV is null) assert(0, `OpenGL function 'glFogCoordFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogCoordFormatNV'\n"); }
  glFogCoordFormatNV(a0,a1,);
};
__gshared glbfn_glVertexAttribFormatNV glVertexAttribFormatNV = function void (GLuint a0, GLint a1, GLenum a2, GLboolean a3, GLsizei a4) nothrow {
  glVertexAttribFormatNV = cast(glbfn_glVertexAttribFormatNV)glGetProcAddress(`glVertexAttribFormatNV`);
  if (glVertexAttribFormatNV is null) assert(0, `OpenGL function 'glVertexAttribFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribFormatNV'\n"); }
  glVertexAttribFormatNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribIFormatNV glVertexAttribIFormatNV = function void (GLuint a0, GLint a1, GLenum a2, GLsizei a3) nothrow {
  glVertexAttribIFormatNV = cast(glbfn_glVertexAttribIFormatNV)glGetProcAddress(`glVertexAttribIFormatNV`);
  if (glVertexAttribIFormatNV is null) assert(0, `OpenGL function 'glVertexAttribIFormatNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribIFormatNV'\n"); }
  glVertexAttribIFormatNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetIntegerui64i_vNV glGetIntegerui64i_vNV = function void (GLenum a0, GLuint a1, GLuint64EXT* a2) nothrow {
  glGetIntegerui64i_vNV = cast(glbfn_glGetIntegerui64i_vNV)glGetProcAddress(`glGetIntegerui64i_vNV`);
  if (glGetIntegerui64i_vNV is null) assert(0, `OpenGL function 'glGetIntegerui64i_vNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetIntegerui64i_vNV'\n"); }
  glGetIntegerui64i_vNV(a0,a1,a2,);
};
__gshared glbfn_glAreProgramsResidentNV glAreProgramsResidentNV = function GLboolean (GLsizei a0, const(GLuint)* a1, GLboolean* a2) nothrow {
  glAreProgramsResidentNV = cast(glbfn_glAreProgramsResidentNV)glGetProcAddress(`glAreProgramsResidentNV`);
  if (glAreProgramsResidentNV is null) assert(0, `OpenGL function 'glAreProgramsResidentNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAreProgramsResidentNV'\n"); }
  return glAreProgramsResidentNV(a0,a1,a2,);
};
__gshared glbfn_glBindProgramNV glBindProgramNV = function void (GLenum a0, GLuint a1) nothrow {
  glBindProgramNV = cast(glbfn_glBindProgramNV)glGetProcAddress(`glBindProgramNV`);
  if (glBindProgramNV is null) assert(0, `OpenGL function 'glBindProgramNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindProgramNV'\n"); }
  glBindProgramNV(a0,a1,);
};
__gshared glbfn_glDeleteProgramsNV glDeleteProgramsNV = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glDeleteProgramsNV = cast(glbfn_glDeleteProgramsNV)glGetProcAddress(`glDeleteProgramsNV`);
  if (glDeleteProgramsNV is null) assert(0, `OpenGL function 'glDeleteProgramsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteProgramsNV'\n"); }
  glDeleteProgramsNV(a0,a1,);
};
__gshared glbfn_glExecuteProgramNV glExecuteProgramNV = function void (GLenum a0, GLuint a1, const(GLfloat)* a2) nothrow {
  glExecuteProgramNV = cast(glbfn_glExecuteProgramNV)glGetProcAddress(`glExecuteProgramNV`);
  if (glExecuteProgramNV is null) assert(0, `OpenGL function 'glExecuteProgramNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glExecuteProgramNV'\n"); }
  glExecuteProgramNV(a0,a1,a2,);
};
__gshared glbfn_glGenProgramsNV glGenProgramsNV = function void (GLsizei a0, GLuint* a1) nothrow {
  glGenProgramsNV = cast(glbfn_glGenProgramsNV)glGetProcAddress(`glGenProgramsNV`);
  if (glGenProgramsNV is null) assert(0, `OpenGL function 'glGenProgramsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenProgramsNV'\n"); }
  glGenProgramsNV(a0,a1,);
};
__gshared glbfn_glGetProgramParameterdvNV glGetProgramParameterdvNV = function void (GLenum a0, GLuint a1, GLenum a2, GLdouble* a3) nothrow {
  glGetProgramParameterdvNV = cast(glbfn_glGetProgramParameterdvNV)glGetProcAddress(`glGetProgramParameterdvNV`);
  if (glGetProgramParameterdvNV is null) assert(0, `OpenGL function 'glGetProgramParameterdvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramParameterdvNV'\n"); }
  glGetProgramParameterdvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetProgramParameterfvNV glGetProgramParameterfvNV = function void (GLenum a0, GLuint a1, GLenum a2, GLfloat* a3) nothrow {
  glGetProgramParameterfvNV = cast(glbfn_glGetProgramParameterfvNV)glGetProcAddress(`glGetProgramParameterfvNV`);
  if (glGetProgramParameterfvNV is null) assert(0, `OpenGL function 'glGetProgramParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramParameterfvNV'\n"); }
  glGetProgramParameterfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetProgramivNV glGetProgramivNV = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetProgramivNV = cast(glbfn_glGetProgramivNV)glGetProcAddress(`glGetProgramivNV`);
  if (glGetProgramivNV is null) assert(0, `OpenGL function 'glGetProgramivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramivNV'\n"); }
  glGetProgramivNV(a0,a1,a2,);
};
__gshared glbfn_glGetProgramStringNV glGetProgramStringNV = function void (GLuint a0, GLenum a1, GLubyte* a2) nothrow {
  glGetProgramStringNV = cast(glbfn_glGetProgramStringNV)glGetProcAddress(`glGetProgramStringNV`);
  if (glGetProgramStringNV is null) assert(0, `OpenGL function 'glGetProgramStringNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetProgramStringNV'\n"); }
  glGetProgramStringNV(a0,a1,a2,);
};
__gshared glbfn_glGetTrackMatrixivNV glGetTrackMatrixivNV = function void (GLenum a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetTrackMatrixivNV = cast(glbfn_glGetTrackMatrixivNV)glGetProcAddress(`glGetTrackMatrixivNV`);
  if (glGetTrackMatrixivNV is null) assert(0, `OpenGL function 'glGetTrackMatrixivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTrackMatrixivNV'\n"); }
  glGetTrackMatrixivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetVertexAttribdvNV glGetVertexAttribdvNV = function void (GLuint a0, GLenum a1, GLdouble* a2) nothrow {
  glGetVertexAttribdvNV = cast(glbfn_glGetVertexAttribdvNV)glGetProcAddress(`glGetVertexAttribdvNV`);
  if (glGetVertexAttribdvNV is null) assert(0, `OpenGL function 'glGetVertexAttribdvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribdvNV'\n"); }
  glGetVertexAttribdvNV(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribfvNV glGetVertexAttribfvNV = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetVertexAttribfvNV = cast(glbfn_glGetVertexAttribfvNV)glGetProcAddress(`glGetVertexAttribfvNV`);
  if (glGetVertexAttribfvNV is null) assert(0, `OpenGL function 'glGetVertexAttribfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribfvNV'\n"); }
  glGetVertexAttribfvNV(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribivNV glGetVertexAttribivNV = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexAttribivNV = cast(glbfn_glGetVertexAttribivNV)glGetProcAddress(`glGetVertexAttribivNV`);
  if (glGetVertexAttribivNV is null) assert(0, `OpenGL function 'glGetVertexAttribivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribivNV'\n"); }
  glGetVertexAttribivNV(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribPointervNV glGetVertexAttribPointervNV = function void (GLuint a0, GLenum a1, void** a2) nothrow {
  glGetVertexAttribPointervNV = cast(glbfn_glGetVertexAttribPointervNV)glGetProcAddress(`glGetVertexAttribPointervNV`);
  if (glGetVertexAttribPointervNV is null) assert(0, `OpenGL function 'glGetVertexAttribPointervNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribPointervNV'\n"); }
  glGetVertexAttribPointervNV(a0,a1,a2,);
};
__gshared glbfn_glIsProgramNV glIsProgramNV = function GLboolean (GLuint a0) nothrow {
  glIsProgramNV = cast(glbfn_glIsProgramNV)glGetProcAddress(`glIsProgramNV`);
  if (glIsProgramNV is null) assert(0, `OpenGL function 'glIsProgramNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsProgramNV'\n"); }
  return glIsProgramNV(a0,);
};
__gshared glbfn_glLoadProgramNV glLoadProgramNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLubyte)* a3) nothrow {
  glLoadProgramNV = cast(glbfn_glLoadProgramNV)glGetProcAddress(`glLoadProgramNV`);
  if (glLoadProgramNV is null) assert(0, `OpenGL function 'glLoadProgramNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadProgramNV'\n"); }
  glLoadProgramNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramParameter4dNV glProgramParameter4dNV = function void (GLenum a0, GLuint a1, GLdouble a2, GLdouble a3, GLdouble a4, GLdouble a5) nothrow {
  glProgramParameter4dNV = cast(glbfn_glProgramParameter4dNV)glGetProcAddress(`glProgramParameter4dNV`);
  if (glProgramParameter4dNV is null) assert(0, `OpenGL function 'glProgramParameter4dNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameter4dNV'\n"); }
  glProgramParameter4dNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramParameter4dvNV glProgramParameter4dvNV = function void (GLenum a0, GLuint a1, const(GLdouble)* a2) nothrow {
  glProgramParameter4dvNV = cast(glbfn_glProgramParameter4dvNV)glGetProcAddress(`glProgramParameter4dvNV`);
  if (glProgramParameter4dvNV is null) assert(0, `OpenGL function 'glProgramParameter4dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameter4dvNV'\n"); }
  glProgramParameter4dvNV(a0,a1,a2,);
};
__gshared glbfn_glProgramParameter4fNV glProgramParameter4fNV = function void (GLenum a0, GLuint a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glProgramParameter4fNV = cast(glbfn_glProgramParameter4fNV)glGetProcAddress(`glProgramParameter4fNV`);
  if (glProgramParameter4fNV is null) assert(0, `OpenGL function 'glProgramParameter4fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameter4fNV'\n"); }
  glProgramParameter4fNV(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glProgramParameter4fvNV glProgramParameter4fvNV = function void (GLenum a0, GLuint a1, const(GLfloat)* a2) nothrow {
  glProgramParameter4fvNV = cast(glbfn_glProgramParameter4fvNV)glGetProcAddress(`glProgramParameter4fvNV`);
  if (glProgramParameter4fvNV is null) assert(0, `OpenGL function 'glProgramParameter4fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameter4fvNV'\n"); }
  glProgramParameter4fvNV(a0,a1,a2,);
};
__gshared glbfn_glProgramParameters4dvNV glProgramParameters4dvNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLdouble)* a3) nothrow {
  glProgramParameters4dvNV = cast(glbfn_glProgramParameters4dvNV)glGetProcAddress(`glProgramParameters4dvNV`);
  if (glProgramParameters4dvNV is null) assert(0, `OpenGL function 'glProgramParameters4dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameters4dvNV'\n"); }
  glProgramParameters4dvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glProgramParameters4fvNV glProgramParameters4fvNV = function void (GLenum a0, GLuint a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glProgramParameters4fvNV = cast(glbfn_glProgramParameters4fvNV)glGetProcAddress(`glProgramParameters4fvNV`);
  if (glProgramParameters4fvNV is null) assert(0, `OpenGL function 'glProgramParameters4fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glProgramParameters4fvNV'\n"); }
  glProgramParameters4fvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glRequestResidentProgramsNV glRequestResidentProgramsNV = function void (GLsizei a0, const(GLuint)* a1) nothrow {
  glRequestResidentProgramsNV = cast(glbfn_glRequestResidentProgramsNV)glGetProcAddress(`glRequestResidentProgramsNV`);
  if (glRequestResidentProgramsNV is null) assert(0, `OpenGL function 'glRequestResidentProgramsNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRequestResidentProgramsNV'\n"); }
  glRequestResidentProgramsNV(a0,a1,);
};
__gshared glbfn_glTrackMatrixNV glTrackMatrixNV = function void (GLenum a0, GLuint a1, GLenum a2, GLenum a3) nothrow {
  glTrackMatrixNV = cast(glbfn_glTrackMatrixNV)glGetProcAddress(`glTrackMatrixNV`);
  if (glTrackMatrixNV is null) assert(0, `OpenGL function 'glTrackMatrixNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTrackMatrixNV'\n"); }
  glTrackMatrixNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribPointerNV glVertexAttribPointerNV = function void (GLuint a0, GLint a1, GLenum a2, GLsizei a3, const(void)* a4) nothrow {
  glVertexAttribPointerNV = cast(glbfn_glVertexAttribPointerNV)glGetProcAddress(`glVertexAttribPointerNV`);
  if (glVertexAttribPointerNV is null) assert(0, `OpenGL function 'glVertexAttribPointerNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribPointerNV'\n"); }
  glVertexAttribPointerNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib1dNV glVertexAttrib1dNV = function void (GLuint a0, GLdouble a1) nothrow {
  glVertexAttrib1dNV = cast(glbfn_glVertexAttrib1dNV)glGetProcAddress(`glVertexAttrib1dNV`);
  if (glVertexAttrib1dNV is null) assert(0, `OpenGL function 'glVertexAttrib1dNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1dNV'\n"); }
  glVertexAttrib1dNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib1dvNV glVertexAttrib1dvNV = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib1dvNV = cast(glbfn_glVertexAttrib1dvNV)glGetProcAddress(`glVertexAttrib1dvNV`);
  if (glVertexAttrib1dvNV is null) assert(0, `OpenGL function 'glVertexAttrib1dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1dvNV'\n"); }
  glVertexAttrib1dvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib1fNV glVertexAttrib1fNV = function void (GLuint a0, GLfloat a1) nothrow {
  glVertexAttrib1fNV = cast(glbfn_glVertexAttrib1fNV)glGetProcAddress(`glVertexAttrib1fNV`);
  if (glVertexAttrib1fNV is null) assert(0, `OpenGL function 'glVertexAttrib1fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1fNV'\n"); }
  glVertexAttrib1fNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib1fvNV glVertexAttrib1fvNV = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib1fvNV = cast(glbfn_glVertexAttrib1fvNV)glGetProcAddress(`glVertexAttrib1fvNV`);
  if (glVertexAttrib1fvNV is null) assert(0, `OpenGL function 'glVertexAttrib1fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1fvNV'\n"); }
  glVertexAttrib1fvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib1sNV glVertexAttrib1sNV = function void (GLuint a0, GLshort a1) nothrow {
  glVertexAttrib1sNV = cast(glbfn_glVertexAttrib1sNV)glGetProcAddress(`glVertexAttrib1sNV`);
  if (glVertexAttrib1sNV is null) assert(0, `OpenGL function 'glVertexAttrib1sNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1sNV'\n"); }
  glVertexAttrib1sNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib1svNV glVertexAttrib1svNV = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib1svNV = cast(glbfn_glVertexAttrib1svNV)glGetProcAddress(`glVertexAttrib1svNV`);
  if (glVertexAttrib1svNV is null) assert(0, `OpenGL function 'glVertexAttrib1svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib1svNV'\n"); }
  glVertexAttrib1svNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib2dNV glVertexAttrib2dNV = function void (GLuint a0, GLdouble a1, GLdouble a2) nothrow {
  glVertexAttrib2dNV = cast(glbfn_glVertexAttrib2dNV)glGetProcAddress(`glVertexAttrib2dNV`);
  if (glVertexAttrib2dNV is null) assert(0, `OpenGL function 'glVertexAttrib2dNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2dNV'\n"); }
  glVertexAttrib2dNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2dvNV glVertexAttrib2dvNV = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib2dvNV = cast(glbfn_glVertexAttrib2dvNV)glGetProcAddress(`glVertexAttrib2dvNV`);
  if (glVertexAttrib2dvNV is null) assert(0, `OpenGL function 'glVertexAttrib2dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2dvNV'\n"); }
  glVertexAttrib2dvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib2fNV glVertexAttrib2fNV = function void (GLuint a0, GLfloat a1, GLfloat a2) nothrow {
  glVertexAttrib2fNV = cast(glbfn_glVertexAttrib2fNV)glGetProcAddress(`glVertexAttrib2fNV`);
  if (glVertexAttrib2fNV is null) assert(0, `OpenGL function 'glVertexAttrib2fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2fNV'\n"); }
  glVertexAttrib2fNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2fvNV glVertexAttrib2fvNV = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib2fvNV = cast(glbfn_glVertexAttrib2fvNV)glGetProcAddress(`glVertexAttrib2fvNV`);
  if (glVertexAttrib2fvNV is null) assert(0, `OpenGL function 'glVertexAttrib2fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2fvNV'\n"); }
  glVertexAttrib2fvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib2sNV glVertexAttrib2sNV = function void (GLuint a0, GLshort a1, GLshort a2) nothrow {
  glVertexAttrib2sNV = cast(glbfn_glVertexAttrib2sNV)glGetProcAddress(`glVertexAttrib2sNV`);
  if (glVertexAttrib2sNV is null) assert(0, `OpenGL function 'glVertexAttrib2sNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2sNV'\n"); }
  glVertexAttrib2sNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttrib2svNV glVertexAttrib2svNV = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib2svNV = cast(glbfn_glVertexAttrib2svNV)glGetProcAddress(`glVertexAttrib2svNV`);
  if (glVertexAttrib2svNV is null) assert(0, `OpenGL function 'glVertexAttrib2svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib2svNV'\n"); }
  glVertexAttrib2svNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib3dNV glVertexAttrib3dNV = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3) nothrow {
  glVertexAttrib3dNV = cast(glbfn_glVertexAttrib3dNV)glGetProcAddress(`glVertexAttrib3dNV`);
  if (glVertexAttrib3dNV is null) assert(0, `OpenGL function 'glVertexAttrib3dNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3dNV'\n"); }
  glVertexAttrib3dNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3dvNV glVertexAttrib3dvNV = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib3dvNV = cast(glbfn_glVertexAttrib3dvNV)glGetProcAddress(`glVertexAttrib3dvNV`);
  if (glVertexAttrib3dvNV is null) assert(0, `OpenGL function 'glVertexAttrib3dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3dvNV'\n"); }
  glVertexAttrib3dvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib3fNV glVertexAttrib3fNV = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glVertexAttrib3fNV = cast(glbfn_glVertexAttrib3fNV)glGetProcAddress(`glVertexAttrib3fNV`);
  if (glVertexAttrib3fNV is null) assert(0, `OpenGL function 'glVertexAttrib3fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3fNV'\n"); }
  glVertexAttrib3fNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3fvNV glVertexAttrib3fvNV = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib3fvNV = cast(glbfn_glVertexAttrib3fvNV)glGetProcAddress(`glVertexAttrib3fvNV`);
  if (glVertexAttrib3fvNV is null) assert(0, `OpenGL function 'glVertexAttrib3fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3fvNV'\n"); }
  glVertexAttrib3fvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib3sNV glVertexAttrib3sNV = function void (GLuint a0, GLshort a1, GLshort a2, GLshort a3) nothrow {
  glVertexAttrib3sNV = cast(glbfn_glVertexAttrib3sNV)glGetProcAddress(`glVertexAttrib3sNV`);
  if (glVertexAttrib3sNV is null) assert(0, `OpenGL function 'glVertexAttrib3sNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3sNV'\n"); }
  glVertexAttrib3sNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttrib3svNV glVertexAttrib3svNV = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib3svNV = cast(glbfn_glVertexAttrib3svNV)glGetProcAddress(`glVertexAttrib3svNV`);
  if (glVertexAttrib3svNV is null) assert(0, `OpenGL function 'glVertexAttrib3svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib3svNV'\n"); }
  glVertexAttrib3svNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib4dNV glVertexAttrib4dNV = function void (GLuint a0, GLdouble a1, GLdouble a2, GLdouble a3, GLdouble a4) nothrow {
  glVertexAttrib4dNV = cast(glbfn_glVertexAttrib4dNV)glGetProcAddress(`glVertexAttrib4dNV`);
  if (glVertexAttrib4dNV is null) assert(0, `OpenGL function 'glVertexAttrib4dNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4dNV'\n"); }
  glVertexAttrib4dNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4dvNV glVertexAttrib4dvNV = function void (GLuint a0, const(GLdouble)* a1) nothrow {
  glVertexAttrib4dvNV = cast(glbfn_glVertexAttrib4dvNV)glGetProcAddress(`glVertexAttrib4dvNV`);
  if (glVertexAttrib4dvNV is null) assert(0, `OpenGL function 'glVertexAttrib4dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4dvNV'\n"); }
  glVertexAttrib4dvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib4fNV glVertexAttrib4fNV = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glVertexAttrib4fNV = cast(glbfn_glVertexAttrib4fNV)glGetProcAddress(`glVertexAttrib4fNV`);
  if (glVertexAttrib4fNV is null) assert(0, `OpenGL function 'glVertexAttrib4fNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4fNV'\n"); }
  glVertexAttrib4fNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4fvNV glVertexAttrib4fvNV = function void (GLuint a0, const(GLfloat)* a1) nothrow {
  glVertexAttrib4fvNV = cast(glbfn_glVertexAttrib4fvNV)glGetProcAddress(`glVertexAttrib4fvNV`);
  if (glVertexAttrib4fvNV is null) assert(0, `OpenGL function 'glVertexAttrib4fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4fvNV'\n"); }
  glVertexAttrib4fvNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib4sNV glVertexAttrib4sNV = function void (GLuint a0, GLshort a1, GLshort a2, GLshort a3, GLshort a4) nothrow {
  glVertexAttrib4sNV = cast(glbfn_glVertexAttrib4sNV)glGetProcAddress(`glVertexAttrib4sNV`);
  if (glVertexAttrib4sNV is null) assert(0, `OpenGL function 'glVertexAttrib4sNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4sNV'\n"); }
  glVertexAttrib4sNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4svNV glVertexAttrib4svNV = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttrib4svNV = cast(glbfn_glVertexAttrib4svNV)glGetProcAddress(`glVertexAttrib4svNV`);
  if (glVertexAttrib4svNV is null) assert(0, `OpenGL function 'glVertexAttrib4svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4svNV'\n"); }
  glVertexAttrib4svNV(a0,a1,);
};
__gshared glbfn_glVertexAttrib4ubNV glVertexAttrib4ubNV = function void (GLuint a0, GLubyte a1, GLubyte a2, GLubyte a3, GLubyte a4) nothrow {
  glVertexAttrib4ubNV = cast(glbfn_glVertexAttrib4ubNV)glGetProcAddress(`glVertexAttrib4ubNV`);
  if (glVertexAttrib4ubNV is null) assert(0, `OpenGL function 'glVertexAttrib4ubNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4ubNV'\n"); }
  glVertexAttrib4ubNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttrib4ubvNV glVertexAttrib4ubvNV = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVertexAttrib4ubvNV = cast(glbfn_glVertexAttrib4ubvNV)glGetProcAddress(`glVertexAttrib4ubvNV`);
  if (glVertexAttrib4ubvNV is null) assert(0, `OpenGL function 'glVertexAttrib4ubvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttrib4ubvNV'\n"); }
  glVertexAttrib4ubvNV(a0,a1,);
};
__gshared glbfn_glVertexAttribs1dvNV glVertexAttribs1dvNV = function void (GLuint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glVertexAttribs1dvNV = cast(glbfn_glVertexAttribs1dvNV)glGetProcAddress(`glVertexAttribs1dvNV`);
  if (glVertexAttribs1dvNV is null) assert(0, `OpenGL function 'glVertexAttribs1dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs1dvNV'\n"); }
  glVertexAttribs1dvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs1fvNV glVertexAttribs1fvNV = function void (GLuint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glVertexAttribs1fvNV = cast(glbfn_glVertexAttribs1fvNV)glGetProcAddress(`glVertexAttribs1fvNV`);
  if (glVertexAttribs1fvNV is null) assert(0, `OpenGL function 'glVertexAttribs1fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs1fvNV'\n"); }
  glVertexAttribs1fvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs1svNV glVertexAttribs1svNV = function void (GLuint a0, GLsizei a1, const(GLshort)* a2) nothrow {
  glVertexAttribs1svNV = cast(glbfn_glVertexAttribs1svNV)glGetProcAddress(`glVertexAttribs1svNV`);
  if (glVertexAttribs1svNV is null) assert(0, `OpenGL function 'glVertexAttribs1svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs1svNV'\n"); }
  glVertexAttribs1svNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs2dvNV glVertexAttribs2dvNV = function void (GLuint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glVertexAttribs2dvNV = cast(glbfn_glVertexAttribs2dvNV)glGetProcAddress(`glVertexAttribs2dvNV`);
  if (glVertexAttribs2dvNV is null) assert(0, `OpenGL function 'glVertexAttribs2dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs2dvNV'\n"); }
  glVertexAttribs2dvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs2fvNV glVertexAttribs2fvNV = function void (GLuint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glVertexAttribs2fvNV = cast(glbfn_glVertexAttribs2fvNV)glGetProcAddress(`glVertexAttribs2fvNV`);
  if (glVertexAttribs2fvNV is null) assert(0, `OpenGL function 'glVertexAttribs2fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs2fvNV'\n"); }
  glVertexAttribs2fvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs2svNV glVertexAttribs2svNV = function void (GLuint a0, GLsizei a1, const(GLshort)* a2) nothrow {
  glVertexAttribs2svNV = cast(glbfn_glVertexAttribs2svNV)glGetProcAddress(`glVertexAttribs2svNV`);
  if (glVertexAttribs2svNV is null) assert(0, `OpenGL function 'glVertexAttribs2svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs2svNV'\n"); }
  glVertexAttribs2svNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs3dvNV glVertexAttribs3dvNV = function void (GLuint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glVertexAttribs3dvNV = cast(glbfn_glVertexAttribs3dvNV)glGetProcAddress(`glVertexAttribs3dvNV`);
  if (glVertexAttribs3dvNV is null) assert(0, `OpenGL function 'glVertexAttribs3dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs3dvNV'\n"); }
  glVertexAttribs3dvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs3fvNV glVertexAttribs3fvNV = function void (GLuint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glVertexAttribs3fvNV = cast(glbfn_glVertexAttribs3fvNV)glGetProcAddress(`glVertexAttribs3fvNV`);
  if (glVertexAttribs3fvNV is null) assert(0, `OpenGL function 'glVertexAttribs3fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs3fvNV'\n"); }
  glVertexAttribs3fvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs3svNV glVertexAttribs3svNV = function void (GLuint a0, GLsizei a1, const(GLshort)* a2) nothrow {
  glVertexAttribs3svNV = cast(glbfn_glVertexAttribs3svNV)glGetProcAddress(`glVertexAttribs3svNV`);
  if (glVertexAttribs3svNV is null) assert(0, `OpenGL function 'glVertexAttribs3svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs3svNV'\n"); }
  glVertexAttribs3svNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs4dvNV glVertexAttribs4dvNV = function void (GLuint a0, GLsizei a1, const(GLdouble)* a2) nothrow {
  glVertexAttribs4dvNV = cast(glbfn_glVertexAttribs4dvNV)glGetProcAddress(`glVertexAttribs4dvNV`);
  if (glVertexAttribs4dvNV is null) assert(0, `OpenGL function 'glVertexAttribs4dvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs4dvNV'\n"); }
  glVertexAttribs4dvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs4fvNV glVertexAttribs4fvNV = function void (GLuint a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glVertexAttribs4fvNV = cast(glbfn_glVertexAttribs4fvNV)glGetProcAddress(`glVertexAttribs4fvNV`);
  if (glVertexAttribs4fvNV is null) assert(0, `OpenGL function 'glVertexAttribs4fvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs4fvNV'\n"); }
  glVertexAttribs4fvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs4svNV glVertexAttribs4svNV = function void (GLuint a0, GLsizei a1, const(GLshort)* a2) nothrow {
  glVertexAttribs4svNV = cast(glbfn_glVertexAttribs4svNV)glGetProcAddress(`glVertexAttribs4svNV`);
  if (glVertexAttribs4svNV is null) assert(0, `OpenGL function 'glVertexAttribs4svNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs4svNV'\n"); }
  glVertexAttribs4svNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribs4ubvNV glVertexAttribs4ubvNV = function void (GLuint a0, GLsizei a1, const(GLubyte)* a2) nothrow {
  glVertexAttribs4ubvNV = cast(glbfn_glVertexAttribs4ubvNV)glGetProcAddress(`glVertexAttribs4ubvNV`);
  if (glVertexAttribs4ubvNV is null) assert(0, `OpenGL function 'glVertexAttribs4ubvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribs4ubvNV'\n"); }
  glVertexAttribs4ubvNV(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribI1iEXT glVertexAttribI1iEXT = function void (GLuint a0, GLint a1) nothrow {
  glVertexAttribI1iEXT = cast(glbfn_glVertexAttribI1iEXT)glGetProcAddress(`glVertexAttribI1iEXT`);
  if (glVertexAttribI1iEXT is null) assert(0, `OpenGL function 'glVertexAttribI1iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1iEXT'\n"); }
  glVertexAttribI1iEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI2iEXT glVertexAttribI2iEXT = function void (GLuint a0, GLint a1, GLint a2) nothrow {
  glVertexAttribI2iEXT = cast(glbfn_glVertexAttribI2iEXT)glGetProcAddress(`glVertexAttribI2iEXT`);
  if (glVertexAttribI2iEXT is null) assert(0, `OpenGL function 'glVertexAttribI2iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2iEXT'\n"); }
  glVertexAttribI2iEXT(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribI3iEXT glVertexAttribI3iEXT = function void (GLuint a0, GLint a1, GLint a2, GLint a3) nothrow {
  glVertexAttribI3iEXT = cast(glbfn_glVertexAttribI3iEXT)glGetProcAddress(`glVertexAttribI3iEXT`);
  if (glVertexAttribI3iEXT is null) assert(0, `OpenGL function 'glVertexAttribI3iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3iEXT'\n"); }
  glVertexAttribI3iEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribI4iEXT glVertexAttribI4iEXT = function void (GLuint a0, GLint a1, GLint a2, GLint a3, GLint a4) nothrow {
  glVertexAttribI4iEXT = cast(glbfn_glVertexAttribI4iEXT)glGetProcAddress(`glVertexAttribI4iEXT`);
  if (glVertexAttribI4iEXT is null) assert(0, `OpenGL function 'glVertexAttribI4iEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4iEXT'\n"); }
  glVertexAttribI4iEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribI1uiEXT glVertexAttribI1uiEXT = function void (GLuint a0, GLuint a1) nothrow {
  glVertexAttribI1uiEXT = cast(glbfn_glVertexAttribI1uiEXT)glGetProcAddress(`glVertexAttribI1uiEXT`);
  if (glVertexAttribI1uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI1uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1uiEXT'\n"); }
  glVertexAttribI1uiEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI2uiEXT glVertexAttribI2uiEXT = function void (GLuint a0, GLuint a1, GLuint a2) nothrow {
  glVertexAttribI2uiEXT = cast(glbfn_glVertexAttribI2uiEXT)glGetProcAddress(`glVertexAttribI2uiEXT`);
  if (glVertexAttribI2uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI2uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2uiEXT'\n"); }
  glVertexAttribI2uiEXT(a0,a1,a2,);
};
__gshared glbfn_glVertexAttribI3uiEXT glVertexAttribI3uiEXT = function void (GLuint a0, GLuint a1, GLuint a2, GLuint a3) nothrow {
  glVertexAttribI3uiEXT = cast(glbfn_glVertexAttribI3uiEXT)glGetProcAddress(`glVertexAttribI3uiEXT`);
  if (glVertexAttribI3uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI3uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3uiEXT'\n"); }
  glVertexAttribI3uiEXT(a0,a1,a2,a3,);
};
__gshared glbfn_glVertexAttribI4uiEXT glVertexAttribI4uiEXT = function void (GLuint a0, GLuint a1, GLuint a2, GLuint a3, GLuint a4) nothrow {
  glVertexAttribI4uiEXT = cast(glbfn_glVertexAttribI4uiEXT)glGetProcAddress(`glVertexAttribI4uiEXT`);
  if (glVertexAttribI4uiEXT is null) assert(0, `OpenGL function 'glVertexAttribI4uiEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4uiEXT'\n"); }
  glVertexAttribI4uiEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glVertexAttribI1ivEXT glVertexAttribI1ivEXT = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI1ivEXT = cast(glbfn_glVertexAttribI1ivEXT)glGetProcAddress(`glVertexAttribI1ivEXT`);
  if (glVertexAttribI1ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI1ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1ivEXT'\n"); }
  glVertexAttribI1ivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI2ivEXT glVertexAttribI2ivEXT = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI2ivEXT = cast(glbfn_glVertexAttribI2ivEXT)glGetProcAddress(`glVertexAttribI2ivEXT`);
  if (glVertexAttribI2ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI2ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2ivEXT'\n"); }
  glVertexAttribI2ivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI3ivEXT glVertexAttribI3ivEXT = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI3ivEXT = cast(glbfn_glVertexAttribI3ivEXT)glGetProcAddress(`glVertexAttribI3ivEXT`);
  if (glVertexAttribI3ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI3ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3ivEXT'\n"); }
  glVertexAttribI3ivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI4ivEXT glVertexAttribI4ivEXT = function void (GLuint a0, const(GLint)* a1) nothrow {
  glVertexAttribI4ivEXT = cast(glbfn_glVertexAttribI4ivEXT)glGetProcAddress(`glVertexAttribI4ivEXT`);
  if (glVertexAttribI4ivEXT is null) assert(0, `OpenGL function 'glVertexAttribI4ivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4ivEXT'\n"); }
  glVertexAttribI4ivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI1uivEXT glVertexAttribI1uivEXT = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI1uivEXT = cast(glbfn_glVertexAttribI1uivEXT)glGetProcAddress(`glVertexAttribI1uivEXT`);
  if (glVertexAttribI1uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI1uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI1uivEXT'\n"); }
  glVertexAttribI1uivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI2uivEXT glVertexAttribI2uivEXT = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI2uivEXT = cast(glbfn_glVertexAttribI2uivEXT)glGetProcAddress(`glVertexAttribI2uivEXT`);
  if (glVertexAttribI2uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI2uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI2uivEXT'\n"); }
  glVertexAttribI2uivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI3uivEXT glVertexAttribI3uivEXT = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI3uivEXT = cast(glbfn_glVertexAttribI3uivEXT)glGetProcAddress(`glVertexAttribI3uivEXT`);
  if (glVertexAttribI3uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI3uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI3uivEXT'\n"); }
  glVertexAttribI3uivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI4uivEXT glVertexAttribI4uivEXT = function void (GLuint a0, const(GLuint)* a1) nothrow {
  glVertexAttribI4uivEXT = cast(glbfn_glVertexAttribI4uivEXT)glGetProcAddress(`glVertexAttribI4uivEXT`);
  if (glVertexAttribI4uivEXT is null) assert(0, `OpenGL function 'glVertexAttribI4uivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4uivEXT'\n"); }
  glVertexAttribI4uivEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI4bvEXT glVertexAttribI4bvEXT = function void (GLuint a0, const(GLbyte)* a1) nothrow {
  glVertexAttribI4bvEXT = cast(glbfn_glVertexAttribI4bvEXT)glGetProcAddress(`glVertexAttribI4bvEXT`);
  if (glVertexAttribI4bvEXT is null) assert(0, `OpenGL function 'glVertexAttribI4bvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4bvEXT'\n"); }
  glVertexAttribI4bvEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI4svEXT glVertexAttribI4svEXT = function void (GLuint a0, const(GLshort)* a1) nothrow {
  glVertexAttribI4svEXT = cast(glbfn_glVertexAttribI4svEXT)glGetProcAddress(`glVertexAttribI4svEXT`);
  if (glVertexAttribI4svEXT is null) assert(0, `OpenGL function 'glVertexAttribI4svEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4svEXT'\n"); }
  glVertexAttribI4svEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI4ubvEXT glVertexAttribI4ubvEXT = function void (GLuint a0, const(GLubyte)* a1) nothrow {
  glVertexAttribI4ubvEXT = cast(glbfn_glVertexAttribI4ubvEXT)glGetProcAddress(`glVertexAttribI4ubvEXT`);
  if (glVertexAttribI4ubvEXT is null) assert(0, `OpenGL function 'glVertexAttribI4ubvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4ubvEXT'\n"); }
  glVertexAttribI4ubvEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribI4usvEXT glVertexAttribI4usvEXT = function void (GLuint a0, const(GLushort)* a1) nothrow {
  glVertexAttribI4usvEXT = cast(glbfn_glVertexAttribI4usvEXT)glGetProcAddress(`glVertexAttribI4usvEXT`);
  if (glVertexAttribI4usvEXT is null) assert(0, `OpenGL function 'glVertexAttribI4usvEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribI4usvEXT'\n"); }
  glVertexAttribI4usvEXT(a0,a1,);
};
__gshared glbfn_glVertexAttribIPointerEXT glVertexAttribIPointerEXT = function void (GLuint a0, GLint a1, GLenum a2, GLsizei a3, const(void)* a4) nothrow {
  glVertexAttribIPointerEXT = cast(glbfn_glVertexAttribIPointerEXT)glGetProcAddress(`glVertexAttribIPointerEXT`);
  if (glVertexAttribIPointerEXT is null) assert(0, `OpenGL function 'glVertexAttribIPointerEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertexAttribIPointerEXT'\n"); }
  glVertexAttribIPointerEXT(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetVertexAttribIivEXT glGetVertexAttribIivEXT = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVertexAttribIivEXT = cast(glbfn_glGetVertexAttribIivEXT)glGetProcAddress(`glGetVertexAttribIivEXT`);
  if (glGetVertexAttribIivEXT is null) assert(0, `OpenGL function 'glGetVertexAttribIivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribIivEXT'\n"); }
  glGetVertexAttribIivEXT(a0,a1,a2,);
};
__gshared glbfn_glGetVertexAttribIuivEXT glGetVertexAttribIuivEXT = function void (GLuint a0, GLenum a1, GLuint* a2) nothrow {
  glGetVertexAttribIuivEXT = cast(glbfn_glGetVertexAttribIuivEXT)glGetProcAddress(`glGetVertexAttribIuivEXT`);
  if (glGetVertexAttribIuivEXT is null) assert(0, `OpenGL function 'glGetVertexAttribIuivEXT' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVertexAttribIuivEXT'\n"); }
  glGetVertexAttribIuivEXT(a0,a1,a2,);
};
__gshared glbfn_glBeginVideoCaptureNV glBeginVideoCaptureNV = function void (GLuint a0) nothrow {
  glBeginVideoCaptureNV = cast(glbfn_glBeginVideoCaptureNV)glGetProcAddress(`glBeginVideoCaptureNV`);
  if (glBeginVideoCaptureNV is null) assert(0, `OpenGL function 'glBeginVideoCaptureNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBeginVideoCaptureNV'\n"); }
  glBeginVideoCaptureNV(a0,);
};
__gshared glbfn_glBindVideoCaptureStreamBufferNV glBindVideoCaptureStreamBufferNV = function void (GLuint a0, GLuint a1, GLenum a2, GLintptrARB a3) nothrow {
  glBindVideoCaptureStreamBufferNV = cast(glbfn_glBindVideoCaptureStreamBufferNV)glGetProcAddress(`glBindVideoCaptureStreamBufferNV`);
  if (glBindVideoCaptureStreamBufferNV is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamBufferNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindVideoCaptureStreamBufferNV'\n"); }
  glBindVideoCaptureStreamBufferNV(a0,a1,a2,a3,);
};
__gshared glbfn_glBindVideoCaptureStreamTextureNV glBindVideoCaptureStreamTextureNV = function void (GLuint a0, GLuint a1, GLenum a2, GLenum a3, GLuint a4) nothrow {
  glBindVideoCaptureStreamTextureNV = cast(glbfn_glBindVideoCaptureStreamTextureNV)glGetProcAddress(`glBindVideoCaptureStreamTextureNV`);
  if (glBindVideoCaptureStreamTextureNV is null) assert(0, `OpenGL function 'glBindVideoCaptureStreamTextureNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBindVideoCaptureStreamTextureNV'\n"); }
  glBindVideoCaptureStreamTextureNV(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glEndVideoCaptureNV glEndVideoCaptureNV = function void (GLuint a0) nothrow {
  glEndVideoCaptureNV = cast(glbfn_glEndVideoCaptureNV)glGetProcAddress(`glEndVideoCaptureNV`);
  if (glEndVideoCaptureNV is null) assert(0, `OpenGL function 'glEndVideoCaptureNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEndVideoCaptureNV'\n"); }
  glEndVideoCaptureNV(a0,);
};
__gshared glbfn_glGetVideoCaptureivNV glGetVideoCaptureivNV = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetVideoCaptureivNV = cast(glbfn_glGetVideoCaptureivNV)glGetProcAddress(`glGetVideoCaptureivNV`);
  if (glGetVideoCaptureivNV is null) assert(0, `OpenGL function 'glGetVideoCaptureivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideoCaptureivNV'\n"); }
  glGetVideoCaptureivNV(a0,a1,a2,);
};
__gshared glbfn_glGetVideoCaptureStreamivNV glGetVideoCaptureStreamivNV = function void (GLuint a0, GLuint a1, GLenum a2, GLint* a3) nothrow {
  glGetVideoCaptureStreamivNV = cast(glbfn_glGetVideoCaptureStreamivNV)glGetProcAddress(`glGetVideoCaptureStreamivNV`);
  if (glGetVideoCaptureStreamivNV is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideoCaptureStreamivNV'\n"); }
  glGetVideoCaptureStreamivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetVideoCaptureStreamfvNV glGetVideoCaptureStreamfvNV = function void (GLuint a0, GLuint a1, GLenum a2, GLfloat* a3) nothrow {
  glGetVideoCaptureStreamfvNV = cast(glbfn_glGetVideoCaptureStreamfvNV)glGetProcAddress(`glGetVideoCaptureStreamfvNV`);
  if (glGetVideoCaptureStreamfvNV is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideoCaptureStreamfvNV'\n"); }
  glGetVideoCaptureStreamfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glGetVideoCaptureStreamdvNV glGetVideoCaptureStreamdvNV = function void (GLuint a0, GLuint a1, GLenum a2, GLdouble* a3) nothrow {
  glGetVideoCaptureStreamdvNV = cast(glbfn_glGetVideoCaptureStreamdvNV)glGetProcAddress(`glGetVideoCaptureStreamdvNV`);
  if (glGetVideoCaptureStreamdvNV is null) assert(0, `OpenGL function 'glGetVideoCaptureStreamdvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetVideoCaptureStreamdvNV'\n"); }
  glGetVideoCaptureStreamdvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVideoCaptureNV glVideoCaptureNV = function GLenum (GLuint a0, GLuint* a1, GLuint64EXT* a2) nothrow {
  glVideoCaptureNV = cast(glbfn_glVideoCaptureNV)glGetProcAddress(`glVideoCaptureNV`);
  if (glVideoCaptureNV is null) assert(0, `OpenGL function 'glVideoCaptureNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVideoCaptureNV'\n"); }
  return glVideoCaptureNV(a0,a1,a2,);
};
__gshared glbfn_glVideoCaptureStreamParameterivNV glVideoCaptureStreamParameterivNV = function void (GLuint a0, GLuint a1, GLenum a2, const(GLint)* a3) nothrow {
  glVideoCaptureStreamParameterivNV = cast(glbfn_glVideoCaptureStreamParameterivNV)glGetProcAddress(`glVideoCaptureStreamParameterivNV`);
  if (glVideoCaptureStreamParameterivNV is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterivNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVideoCaptureStreamParameterivNV'\n"); }
  glVideoCaptureStreamParameterivNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVideoCaptureStreamParameterfvNV glVideoCaptureStreamParameterfvNV = function void (GLuint a0, GLuint a1, GLenum a2, const(GLfloat)* a3) nothrow {
  glVideoCaptureStreamParameterfvNV = cast(glbfn_glVideoCaptureStreamParameterfvNV)glGetProcAddress(`glVideoCaptureStreamParameterfvNV`);
  if (glVideoCaptureStreamParameterfvNV is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterfvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVideoCaptureStreamParameterfvNV'\n"); }
  glVideoCaptureStreamParameterfvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glVideoCaptureStreamParameterdvNV glVideoCaptureStreamParameterdvNV = function void (GLuint a0, GLuint a1, GLenum a2, const(GLdouble)* a3) nothrow {
  glVideoCaptureStreamParameterdvNV = cast(glbfn_glVideoCaptureStreamParameterdvNV)glGetProcAddress(`glVideoCaptureStreamParameterdvNV`);
  if (glVideoCaptureStreamParameterdvNV is null) assert(0, `OpenGL function 'glVideoCaptureStreamParameterdvNV' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVideoCaptureStreamParameterdvNV'\n"); }
  glVideoCaptureStreamParameterdvNV(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord1bOES glMultiTexCoord1bOES = function void (GLenum a0, GLbyte a1) nothrow {
  glMultiTexCoord1bOES = cast(glbfn_glMultiTexCoord1bOES)glGetProcAddress(`glMultiTexCoord1bOES`);
  if (glMultiTexCoord1bOES is null) assert(0, `OpenGL function 'glMultiTexCoord1bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1bOES'\n"); }
  glMultiTexCoord1bOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1bvOES glMultiTexCoord1bvOES = function void (GLenum a0, const(GLbyte)* a1) nothrow {
  glMultiTexCoord1bvOES = cast(glbfn_glMultiTexCoord1bvOES)glGetProcAddress(`glMultiTexCoord1bvOES`);
  if (glMultiTexCoord1bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord1bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1bvOES'\n"); }
  glMultiTexCoord1bvOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2bOES glMultiTexCoord2bOES = function void (GLenum a0, GLbyte a1, GLbyte a2) nothrow {
  glMultiTexCoord2bOES = cast(glbfn_glMultiTexCoord2bOES)glGetProcAddress(`glMultiTexCoord2bOES`);
  if (glMultiTexCoord2bOES is null) assert(0, `OpenGL function 'glMultiTexCoord2bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2bOES'\n"); }
  glMultiTexCoord2bOES(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2bvOES glMultiTexCoord2bvOES = function void (GLenum a0, const(GLbyte)* a1) nothrow {
  glMultiTexCoord2bvOES = cast(glbfn_glMultiTexCoord2bvOES)glGetProcAddress(`glMultiTexCoord2bvOES`);
  if (glMultiTexCoord2bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord2bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2bvOES'\n"); }
  glMultiTexCoord2bvOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3bOES glMultiTexCoord3bOES = function void (GLenum a0, GLbyte a1, GLbyte a2, GLbyte a3) nothrow {
  glMultiTexCoord3bOES = cast(glbfn_glMultiTexCoord3bOES)glGetProcAddress(`glMultiTexCoord3bOES`);
  if (glMultiTexCoord3bOES is null) assert(0, `OpenGL function 'glMultiTexCoord3bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3bOES'\n"); }
  glMultiTexCoord3bOES(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3bvOES glMultiTexCoord3bvOES = function void (GLenum a0, const(GLbyte)* a1) nothrow {
  glMultiTexCoord3bvOES = cast(glbfn_glMultiTexCoord3bvOES)glGetProcAddress(`glMultiTexCoord3bvOES`);
  if (glMultiTexCoord3bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord3bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3bvOES'\n"); }
  glMultiTexCoord3bvOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4bOES glMultiTexCoord4bOES = function void (GLenum a0, GLbyte a1, GLbyte a2, GLbyte a3, GLbyte a4) nothrow {
  glMultiTexCoord4bOES = cast(glbfn_glMultiTexCoord4bOES)glGetProcAddress(`glMultiTexCoord4bOES`);
  if (glMultiTexCoord4bOES is null) assert(0, `OpenGL function 'glMultiTexCoord4bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4bOES'\n"); }
  glMultiTexCoord4bOES(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultiTexCoord4bvOES glMultiTexCoord4bvOES = function void (GLenum a0, const(GLbyte)* a1) nothrow {
  glMultiTexCoord4bvOES = cast(glbfn_glMultiTexCoord4bvOES)glGetProcAddress(`glMultiTexCoord4bvOES`);
  if (glMultiTexCoord4bvOES is null) assert(0, `OpenGL function 'glMultiTexCoord4bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4bvOES'\n"); }
  glMultiTexCoord4bvOES(a0,a1,);
};
__gshared glbfn_glTexCoord1bOES glTexCoord1bOES = function void (GLbyte a0) nothrow {
  glTexCoord1bOES = cast(glbfn_glTexCoord1bOES)glGetProcAddress(`glTexCoord1bOES`);
  if (glTexCoord1bOES is null) assert(0, `OpenGL function 'glTexCoord1bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1bOES'\n"); }
  glTexCoord1bOES(a0,);
};
__gshared glbfn_glTexCoord1bvOES glTexCoord1bvOES = function void (const(GLbyte)* a0) nothrow {
  glTexCoord1bvOES = cast(glbfn_glTexCoord1bvOES)glGetProcAddress(`glTexCoord1bvOES`);
  if (glTexCoord1bvOES is null) assert(0, `OpenGL function 'glTexCoord1bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1bvOES'\n"); }
  glTexCoord1bvOES(a0,);
};
__gshared glbfn_glTexCoord2bOES glTexCoord2bOES = function void (GLbyte a0, GLbyte a1) nothrow {
  glTexCoord2bOES = cast(glbfn_glTexCoord2bOES)glGetProcAddress(`glTexCoord2bOES`);
  if (glTexCoord2bOES is null) assert(0, `OpenGL function 'glTexCoord2bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2bOES'\n"); }
  glTexCoord2bOES(a0,a1,);
};
__gshared glbfn_glTexCoord2bvOES glTexCoord2bvOES = function void (const(GLbyte)* a0) nothrow {
  glTexCoord2bvOES = cast(glbfn_glTexCoord2bvOES)glGetProcAddress(`glTexCoord2bvOES`);
  if (glTexCoord2bvOES is null) assert(0, `OpenGL function 'glTexCoord2bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2bvOES'\n"); }
  glTexCoord2bvOES(a0,);
};
__gshared glbfn_glTexCoord3bOES glTexCoord3bOES = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glTexCoord3bOES = cast(glbfn_glTexCoord3bOES)glGetProcAddress(`glTexCoord3bOES`);
  if (glTexCoord3bOES is null) assert(0, `OpenGL function 'glTexCoord3bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3bOES'\n"); }
  glTexCoord3bOES(a0,a1,a2,);
};
__gshared glbfn_glTexCoord3bvOES glTexCoord3bvOES = function void (const(GLbyte)* a0) nothrow {
  glTexCoord3bvOES = cast(glbfn_glTexCoord3bvOES)glGetProcAddress(`glTexCoord3bvOES`);
  if (glTexCoord3bvOES is null) assert(0, `OpenGL function 'glTexCoord3bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3bvOES'\n"); }
  glTexCoord3bvOES(a0,);
};
__gshared glbfn_glTexCoord4bOES glTexCoord4bOES = function void (GLbyte a0, GLbyte a1, GLbyte a2, GLbyte a3) nothrow {
  glTexCoord4bOES = cast(glbfn_glTexCoord4bOES)glGetProcAddress(`glTexCoord4bOES`);
  if (glTexCoord4bOES is null) assert(0, `OpenGL function 'glTexCoord4bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4bOES'\n"); }
  glTexCoord4bOES(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4bvOES glTexCoord4bvOES = function void (const(GLbyte)* a0) nothrow {
  glTexCoord4bvOES = cast(glbfn_glTexCoord4bvOES)glGetProcAddress(`glTexCoord4bvOES`);
  if (glTexCoord4bvOES is null) assert(0, `OpenGL function 'glTexCoord4bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4bvOES'\n"); }
  glTexCoord4bvOES(a0,);
};
__gshared glbfn_glVertex2bOES glVertex2bOES = function void (GLbyte a0, GLbyte a1) nothrow {
  glVertex2bOES = cast(glbfn_glVertex2bOES)glGetProcAddress(`glVertex2bOES`);
  if (glVertex2bOES is null) assert(0, `OpenGL function 'glVertex2bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2bOES'\n"); }
  glVertex2bOES(a0,a1,);
};
__gshared glbfn_glVertex2bvOES glVertex2bvOES = function void (const(GLbyte)* a0) nothrow {
  glVertex2bvOES = cast(glbfn_glVertex2bvOES)glGetProcAddress(`glVertex2bvOES`);
  if (glVertex2bvOES is null) assert(0, `OpenGL function 'glVertex2bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2bvOES'\n"); }
  glVertex2bvOES(a0,);
};
__gshared glbfn_glVertex3bOES glVertex3bOES = function void (GLbyte a0, GLbyte a1, GLbyte a2) nothrow {
  glVertex3bOES = cast(glbfn_glVertex3bOES)glGetProcAddress(`glVertex3bOES`);
  if (glVertex3bOES is null) assert(0, `OpenGL function 'glVertex3bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3bOES'\n"); }
  glVertex3bOES(a0,a1,a2,);
};
__gshared glbfn_glVertex3bvOES glVertex3bvOES = function void (const(GLbyte)* a0) nothrow {
  glVertex3bvOES = cast(glbfn_glVertex3bvOES)glGetProcAddress(`glVertex3bvOES`);
  if (glVertex3bvOES is null) assert(0, `OpenGL function 'glVertex3bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3bvOES'\n"); }
  glVertex3bvOES(a0,);
};
__gshared glbfn_glVertex4bOES glVertex4bOES = function void (GLbyte a0, GLbyte a1, GLbyte a2, GLbyte a3) nothrow {
  glVertex4bOES = cast(glbfn_glVertex4bOES)glGetProcAddress(`glVertex4bOES`);
  if (glVertex4bOES is null) assert(0, `OpenGL function 'glVertex4bOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4bOES'\n"); }
  glVertex4bOES(a0,a1,a2,a3,);
};
__gshared glbfn_glVertex4bvOES glVertex4bvOES = function void (const(GLbyte)* a0) nothrow {
  glVertex4bvOES = cast(glbfn_glVertex4bvOES)glGetProcAddress(`glVertex4bvOES`);
  if (glVertex4bvOES is null) assert(0, `OpenGL function 'glVertex4bvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4bvOES'\n"); }
  glVertex4bvOES(a0,);
};
__gshared glbfn_glAlphaFuncxOES glAlphaFuncxOES = function void (GLenum a0, GLfixed a1) nothrow {
  glAlphaFuncxOES = cast(glbfn_glAlphaFuncxOES)glGetProcAddress(`glAlphaFuncxOES`);
  if (glAlphaFuncxOES is null) assert(0, `OpenGL function 'glAlphaFuncxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAlphaFuncxOES'\n"); }
  glAlphaFuncxOES(a0,a1,);
};
__gshared glbfn_glClearColorxOES glClearColorxOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glClearColorxOES = cast(glbfn_glClearColorxOES)glGetProcAddress(`glClearColorxOES`);
  if (glClearColorxOES is null) assert(0, `OpenGL function 'glClearColorxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearColorxOES'\n"); }
  glClearColorxOES(a0,a1,a2,a3,);
};
__gshared glbfn_glClearDepthxOES glClearDepthxOES = function void (GLfixed a0) nothrow {
  glClearDepthxOES = cast(glbfn_glClearDepthxOES)glGetProcAddress(`glClearDepthxOES`);
  if (glClearDepthxOES is null) assert(0, `OpenGL function 'glClearDepthxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearDepthxOES'\n"); }
  glClearDepthxOES(a0,);
};
__gshared glbfn_glClipPlanexOES glClipPlanexOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glClipPlanexOES = cast(glbfn_glClipPlanexOES)glGetProcAddress(`glClipPlanexOES`);
  if (glClipPlanexOES is null) assert(0, `OpenGL function 'glClipPlanexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClipPlanexOES'\n"); }
  glClipPlanexOES(a0,a1,);
};
__gshared glbfn_glColor4xOES glColor4xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glColor4xOES = cast(glbfn_glColor4xOES)glGetProcAddress(`glColor4xOES`);
  if (glColor4xOES is null) assert(0, `OpenGL function 'glColor4xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4xOES'\n"); }
  glColor4xOES(a0,a1,a2,a3,);
};
__gshared glbfn_glDepthRangexOES glDepthRangexOES = function void (GLfixed a0, GLfixed a1) nothrow {
  glDepthRangexOES = cast(glbfn_glDepthRangexOES)glGetProcAddress(`glDepthRangexOES`);
  if (glDepthRangexOES is null) assert(0, `OpenGL function 'glDepthRangexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthRangexOES'\n"); }
  glDepthRangexOES(a0,a1,);
};
__gshared glbfn_glFogxOES glFogxOES = function void (GLenum a0, GLfixed a1) nothrow {
  glFogxOES = cast(glbfn_glFogxOES)glGetProcAddress(`glFogxOES`);
  if (glFogxOES is null) assert(0, `OpenGL function 'glFogxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogxOES'\n"); }
  glFogxOES(a0,a1,);
};
__gshared glbfn_glFogxvOES glFogxvOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glFogxvOES = cast(glbfn_glFogxvOES)glGetProcAddress(`glFogxvOES`);
  if (glFogxvOES is null) assert(0, `OpenGL function 'glFogxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogxvOES'\n"); }
  glFogxvOES(a0,a1,);
};
__gshared glbfn_glFrustumxOES glFrustumxOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3, GLfixed a4, GLfixed a5) nothrow {
  glFrustumxOES = cast(glbfn_glFrustumxOES)glGetProcAddress(`glFrustumxOES`);
  if (glFrustumxOES is null) assert(0, `OpenGL function 'glFrustumxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFrustumxOES'\n"); }
  glFrustumxOES(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetClipPlanexOES glGetClipPlanexOES = function void (GLenum a0, GLfixed* a1) nothrow {
  glGetClipPlanexOES = cast(glbfn_glGetClipPlanexOES)glGetProcAddress(`glGetClipPlanexOES`);
  if (glGetClipPlanexOES is null) assert(0, `OpenGL function 'glGetClipPlanexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetClipPlanexOES'\n"); }
  glGetClipPlanexOES(a0,a1,);
};
__gshared glbfn_glGetFixedvOES glGetFixedvOES = function void (GLenum a0, GLfixed* a1) nothrow {
  glGetFixedvOES = cast(glbfn_glGetFixedvOES)glGetProcAddress(`glGetFixedvOES`);
  if (glGetFixedvOES is null) assert(0, `OpenGL function 'glGetFixedvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFixedvOES'\n"); }
  glGetFixedvOES(a0,a1,);
};
__gshared glbfn_glGetTexEnvxvOES glGetTexEnvxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetTexEnvxvOES = cast(glbfn_glGetTexEnvxvOES)glGetProcAddress(`glGetTexEnvxvOES`);
  if (glGetTexEnvxvOES is null) assert(0, `OpenGL function 'glGetTexEnvxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexEnvxvOES'\n"); }
  glGetTexEnvxvOES(a0,a1,a2,);
};
__gshared glbfn_glGetTexParameterxvOES glGetTexParameterxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetTexParameterxvOES = cast(glbfn_glGetTexParameterxvOES)glGetProcAddress(`glGetTexParameterxvOES`);
  if (glGetTexParameterxvOES is null) assert(0, `OpenGL function 'glGetTexParameterxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexParameterxvOES'\n"); }
  glGetTexParameterxvOES(a0,a1,a2,);
};
__gshared glbfn_glLightModelxOES glLightModelxOES = function void (GLenum a0, GLfixed a1) nothrow {
  glLightModelxOES = cast(glbfn_glLightModelxOES)glGetProcAddress(`glLightModelxOES`);
  if (glLightModelxOES is null) assert(0, `OpenGL function 'glLightModelxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightModelxOES'\n"); }
  glLightModelxOES(a0,a1,);
};
__gshared glbfn_glLightModelxvOES glLightModelxvOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glLightModelxvOES = cast(glbfn_glLightModelxvOES)glGetProcAddress(`glLightModelxvOES`);
  if (glLightModelxvOES is null) assert(0, `OpenGL function 'glLightModelxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightModelxvOES'\n"); }
  glLightModelxvOES(a0,a1,);
};
__gshared glbfn_glLightxOES glLightxOES = function void (GLenum a0, GLenum a1, GLfixed a2) nothrow {
  glLightxOES = cast(glbfn_glLightxOES)glGetProcAddress(`glLightxOES`);
  if (glLightxOES is null) assert(0, `OpenGL function 'glLightxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightxOES'\n"); }
  glLightxOES(a0,a1,a2,);
};
__gshared glbfn_glLightxvOES glLightxvOES = function void (GLenum a0, GLenum a1, const(GLfixed)* a2) nothrow {
  glLightxvOES = cast(glbfn_glLightxvOES)glGetProcAddress(`glLightxvOES`);
  if (glLightxvOES is null) assert(0, `OpenGL function 'glLightxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightxvOES'\n"); }
  glLightxvOES(a0,a1,a2,);
};
__gshared glbfn_glLineWidthxOES glLineWidthxOES = function void (GLfixed a0) nothrow {
  glLineWidthxOES = cast(glbfn_glLineWidthxOES)glGetProcAddress(`glLineWidthxOES`);
  if (glLineWidthxOES is null) assert(0, `OpenGL function 'glLineWidthxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLineWidthxOES'\n"); }
  glLineWidthxOES(a0,);
};
__gshared glbfn_glLoadMatrixxOES glLoadMatrixxOES = function void (const(GLfixed)* a0) nothrow {
  glLoadMatrixxOES = cast(glbfn_glLoadMatrixxOES)glGetProcAddress(`glLoadMatrixxOES`);
  if (glLoadMatrixxOES is null) assert(0, `OpenGL function 'glLoadMatrixxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadMatrixxOES'\n"); }
  glLoadMatrixxOES(a0,);
};
__gshared glbfn_glMaterialxOES glMaterialxOES = function void (GLenum a0, GLenum a1, GLfixed a2) nothrow {
  glMaterialxOES = cast(glbfn_glMaterialxOES)glGetProcAddress(`glMaterialxOES`);
  if (glMaterialxOES is null) assert(0, `OpenGL function 'glMaterialxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMaterialxOES'\n"); }
  glMaterialxOES(a0,a1,a2,);
};
__gshared glbfn_glMaterialxvOES glMaterialxvOES = function void (GLenum a0, GLenum a1, const(GLfixed)* a2) nothrow {
  glMaterialxvOES = cast(glbfn_glMaterialxvOES)glGetProcAddress(`glMaterialxvOES`);
  if (glMaterialxvOES is null) assert(0, `OpenGL function 'glMaterialxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMaterialxvOES'\n"); }
  glMaterialxvOES(a0,a1,a2,);
};
__gshared glbfn_glMultMatrixxOES glMultMatrixxOES = function void (const(GLfixed)* a0) nothrow {
  glMultMatrixxOES = cast(glbfn_glMultMatrixxOES)glGetProcAddress(`glMultMatrixxOES`);
  if (glMultMatrixxOES is null) assert(0, `OpenGL function 'glMultMatrixxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultMatrixxOES'\n"); }
  glMultMatrixxOES(a0,);
};
__gshared glbfn_glMultiTexCoord4xOES glMultiTexCoord4xOES = function void (GLenum a0, GLfixed a1, GLfixed a2, GLfixed a3, GLfixed a4) nothrow {
  glMultiTexCoord4xOES = cast(glbfn_glMultiTexCoord4xOES)glGetProcAddress(`glMultiTexCoord4xOES`);
  if (glMultiTexCoord4xOES is null) assert(0, `OpenGL function 'glMultiTexCoord4xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4xOES'\n"); }
  glMultiTexCoord4xOES(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glNormal3xOES glNormal3xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2) nothrow {
  glNormal3xOES = cast(glbfn_glNormal3xOES)glGetProcAddress(`glNormal3xOES`);
  if (glNormal3xOES is null) assert(0, `OpenGL function 'glNormal3xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3xOES'\n"); }
  glNormal3xOES(a0,a1,a2,);
};
__gshared glbfn_glOrthoxOES glOrthoxOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3, GLfixed a4, GLfixed a5) nothrow {
  glOrthoxOES = cast(glbfn_glOrthoxOES)glGetProcAddress(`glOrthoxOES`);
  if (glOrthoxOES is null) assert(0, `OpenGL function 'glOrthoxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glOrthoxOES'\n"); }
  glOrthoxOES(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glPointParameterxvOES glPointParameterxvOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glPointParameterxvOES = cast(glbfn_glPointParameterxvOES)glGetProcAddress(`glPointParameterxvOES`);
  if (glPointParameterxvOES is null) assert(0, `OpenGL function 'glPointParameterxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterxvOES'\n"); }
  glPointParameterxvOES(a0,a1,);
};
__gshared glbfn_glPointSizexOES glPointSizexOES = function void (GLfixed a0) nothrow {
  glPointSizexOES = cast(glbfn_glPointSizexOES)glGetProcAddress(`glPointSizexOES`);
  if (glPointSizexOES is null) assert(0, `OpenGL function 'glPointSizexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointSizexOES'\n"); }
  glPointSizexOES(a0,);
};
__gshared glbfn_glPolygonOffsetxOES glPolygonOffsetxOES = function void (GLfixed a0, GLfixed a1) nothrow {
  glPolygonOffsetxOES = cast(glbfn_glPolygonOffsetxOES)glGetProcAddress(`glPolygonOffsetxOES`);
  if (glPolygonOffsetxOES is null) assert(0, `OpenGL function 'glPolygonOffsetxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPolygonOffsetxOES'\n"); }
  glPolygonOffsetxOES(a0,a1,);
};
__gshared glbfn_glRotatexOES glRotatexOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glRotatexOES = cast(glbfn_glRotatexOES)glGetProcAddress(`glRotatexOES`);
  if (glRotatexOES is null) assert(0, `OpenGL function 'glRotatexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRotatexOES'\n"); }
  glRotatexOES(a0,a1,a2,a3,);
};
__gshared glbfn_glScalexOES glScalexOES = function void (GLfixed a0, GLfixed a1, GLfixed a2) nothrow {
  glScalexOES = cast(glbfn_glScalexOES)glGetProcAddress(`glScalexOES`);
  if (glScalexOES is null) assert(0, `OpenGL function 'glScalexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glScalexOES'\n"); }
  glScalexOES(a0,a1,a2,);
};
__gshared glbfn_glTexEnvxOES glTexEnvxOES = function void (GLenum a0, GLenum a1, GLfixed a2) nothrow {
  glTexEnvxOES = cast(glbfn_glTexEnvxOES)glGetProcAddress(`glTexEnvxOES`);
  if (glTexEnvxOES is null) assert(0, `OpenGL function 'glTexEnvxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexEnvxOES'\n"); }
  glTexEnvxOES(a0,a1,a2,);
};
__gshared glbfn_glTexEnvxvOES glTexEnvxvOES = function void (GLenum a0, GLenum a1, const(GLfixed)* a2) nothrow {
  glTexEnvxvOES = cast(glbfn_glTexEnvxvOES)glGetProcAddress(`glTexEnvxvOES`);
  if (glTexEnvxvOES is null) assert(0, `OpenGL function 'glTexEnvxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexEnvxvOES'\n"); }
  glTexEnvxvOES(a0,a1,a2,);
};
__gshared glbfn_glTexParameterxOES glTexParameterxOES = function void (GLenum a0, GLenum a1, GLfixed a2) nothrow {
  glTexParameterxOES = cast(glbfn_glTexParameterxOES)glGetProcAddress(`glTexParameterxOES`);
  if (glTexParameterxOES is null) assert(0, `OpenGL function 'glTexParameterxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterxOES'\n"); }
  glTexParameterxOES(a0,a1,a2,);
};
__gshared glbfn_glTexParameterxvOES glTexParameterxvOES = function void (GLenum a0, GLenum a1, const(GLfixed)* a2) nothrow {
  glTexParameterxvOES = cast(glbfn_glTexParameterxvOES)glGetProcAddress(`glTexParameterxvOES`);
  if (glTexParameterxvOES is null) assert(0, `OpenGL function 'glTexParameterxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexParameterxvOES'\n"); }
  glTexParameterxvOES(a0,a1,a2,);
};
__gshared glbfn_glTranslatexOES glTranslatexOES = function void (GLfixed a0, GLfixed a1, GLfixed a2) nothrow {
  glTranslatexOES = cast(glbfn_glTranslatexOES)glGetProcAddress(`glTranslatexOES`);
  if (glTranslatexOES is null) assert(0, `OpenGL function 'glTranslatexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTranslatexOES'\n"); }
  glTranslatexOES(a0,a1,a2,);
};
__gshared glbfn_glGetLightxvOES glGetLightxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetLightxvOES = cast(glbfn_glGetLightxvOES)glGetProcAddress(`glGetLightxvOES`);
  if (glGetLightxvOES is null) assert(0, `OpenGL function 'glGetLightxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetLightxvOES'\n"); }
  glGetLightxvOES(a0,a1,a2,);
};
__gshared glbfn_glGetMaterialxvOES glGetMaterialxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetMaterialxvOES = cast(glbfn_glGetMaterialxvOES)glGetProcAddress(`glGetMaterialxvOES`);
  if (glGetMaterialxvOES is null) assert(0, `OpenGL function 'glGetMaterialxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMaterialxvOES'\n"); }
  glGetMaterialxvOES(a0,a1,a2,);
};
__gshared glbfn_glPointParameterxOES glPointParameterxOES = function void (GLenum a0, GLfixed a1) nothrow {
  glPointParameterxOES = cast(glbfn_glPointParameterxOES)glGetProcAddress(`glPointParameterxOES`);
  if (glPointParameterxOES is null) assert(0, `OpenGL function 'glPointParameterxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterxOES'\n"); }
  glPointParameterxOES(a0,a1,);
};
__gshared glbfn_glSampleCoveragexOES glSampleCoveragexOES = function void (GLclampx a0, GLboolean a1) nothrow {
  glSampleCoveragexOES = cast(glbfn_glSampleCoveragexOES)glGetProcAddress(`glSampleCoveragexOES`);
  if (glSampleCoveragexOES is null) assert(0, `OpenGL function 'glSampleCoveragexOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleCoveragexOES'\n"); }
  glSampleCoveragexOES(a0,a1,);
};
__gshared glbfn_glAccumxOES glAccumxOES = function void (GLenum a0, GLfixed a1) nothrow {
  glAccumxOES = cast(glbfn_glAccumxOES)glGetProcAddress(`glAccumxOES`);
  if (glAccumxOES is null) assert(0, `OpenGL function 'glAccumxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAccumxOES'\n"); }
  glAccumxOES(a0,a1,);
};
__gshared glbfn_glBitmapxOES glBitmapxOES = function void (GLsizei a0, GLsizei a1, GLfixed a2, GLfixed a3, GLfixed a4, GLfixed a5, const(GLubyte)* a6) nothrow {
  glBitmapxOES = cast(glbfn_glBitmapxOES)glGetProcAddress(`glBitmapxOES`);
  if (glBitmapxOES is null) assert(0, `OpenGL function 'glBitmapxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBitmapxOES'\n"); }
  glBitmapxOES(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glBlendColorxOES glBlendColorxOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glBlendColorxOES = cast(glbfn_glBlendColorxOES)glGetProcAddress(`glBlendColorxOES`);
  if (glBlendColorxOES is null) assert(0, `OpenGL function 'glBlendColorxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glBlendColorxOES'\n"); }
  glBlendColorxOES(a0,a1,a2,a3,);
};
__gshared glbfn_glClearAccumxOES glClearAccumxOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glClearAccumxOES = cast(glbfn_glClearAccumxOES)glGetProcAddress(`glClearAccumxOES`);
  if (glClearAccumxOES is null) assert(0, `OpenGL function 'glClearAccumxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearAccumxOES'\n"); }
  glClearAccumxOES(a0,a1,a2,a3,);
};
__gshared glbfn_glColor3xOES glColor3xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2) nothrow {
  glColor3xOES = cast(glbfn_glColor3xOES)glGetProcAddress(`glColor3xOES`);
  if (glColor3xOES is null) assert(0, `OpenGL function 'glColor3xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3xOES'\n"); }
  glColor3xOES(a0,a1,a2,);
};
__gshared glbfn_glColor3xvOES glColor3xvOES = function void (const(GLfixed)* a0) nothrow {
  glColor3xvOES = cast(glbfn_glColor3xvOES)glGetProcAddress(`glColor3xvOES`);
  if (glColor3xvOES is null) assert(0, `OpenGL function 'glColor3xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3xvOES'\n"); }
  glColor3xvOES(a0,);
};
__gshared glbfn_glColor4xvOES glColor4xvOES = function void (const(GLfixed)* a0) nothrow {
  glColor4xvOES = cast(glbfn_glColor4xvOES)glGetProcAddress(`glColor4xvOES`);
  if (glColor4xvOES is null) assert(0, `OpenGL function 'glColor4xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4xvOES'\n"); }
  glColor4xvOES(a0,);
};
__gshared glbfn_glConvolutionParameterxOES glConvolutionParameterxOES = function void (GLenum a0, GLenum a1, GLfixed a2) nothrow {
  glConvolutionParameterxOES = cast(glbfn_glConvolutionParameterxOES)glGetProcAddress(`glConvolutionParameterxOES`);
  if (glConvolutionParameterxOES is null) assert(0, `OpenGL function 'glConvolutionParameterxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameterxOES'\n"); }
  glConvolutionParameterxOES(a0,a1,a2,);
};
__gshared glbfn_glConvolutionParameterxvOES glConvolutionParameterxvOES = function void (GLenum a0, GLenum a1, const(GLfixed)* a2) nothrow {
  glConvolutionParameterxvOES = cast(glbfn_glConvolutionParameterxvOES)glGetProcAddress(`glConvolutionParameterxvOES`);
  if (glConvolutionParameterxvOES is null) assert(0, `OpenGL function 'glConvolutionParameterxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glConvolutionParameterxvOES'\n"); }
  glConvolutionParameterxvOES(a0,a1,a2,);
};
__gshared glbfn_glEvalCoord1xOES glEvalCoord1xOES = function void (GLfixed a0) nothrow {
  glEvalCoord1xOES = cast(glbfn_glEvalCoord1xOES)glGetProcAddress(`glEvalCoord1xOES`);
  if (glEvalCoord1xOES is null) assert(0, `OpenGL function 'glEvalCoord1xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord1xOES'\n"); }
  glEvalCoord1xOES(a0,);
};
__gshared glbfn_glEvalCoord1xvOES glEvalCoord1xvOES = function void (const(GLfixed)* a0) nothrow {
  glEvalCoord1xvOES = cast(glbfn_glEvalCoord1xvOES)glGetProcAddress(`glEvalCoord1xvOES`);
  if (glEvalCoord1xvOES is null) assert(0, `OpenGL function 'glEvalCoord1xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord1xvOES'\n"); }
  glEvalCoord1xvOES(a0,);
};
__gshared glbfn_glEvalCoord2xOES glEvalCoord2xOES = function void (GLfixed a0, GLfixed a1) nothrow {
  glEvalCoord2xOES = cast(glbfn_glEvalCoord2xOES)glGetProcAddress(`glEvalCoord2xOES`);
  if (glEvalCoord2xOES is null) assert(0, `OpenGL function 'glEvalCoord2xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord2xOES'\n"); }
  glEvalCoord2xOES(a0,a1,);
};
__gshared glbfn_glEvalCoord2xvOES glEvalCoord2xvOES = function void (const(GLfixed)* a0) nothrow {
  glEvalCoord2xvOES = cast(glbfn_glEvalCoord2xvOES)glGetProcAddress(`glEvalCoord2xvOES`);
  if (glEvalCoord2xvOES is null) assert(0, `OpenGL function 'glEvalCoord2xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glEvalCoord2xvOES'\n"); }
  glEvalCoord2xvOES(a0,);
};
__gshared glbfn_glFeedbackBufferxOES glFeedbackBufferxOES = function void (GLsizei a0, GLenum a1, const(GLfixed)* a2) nothrow {
  glFeedbackBufferxOES = cast(glbfn_glFeedbackBufferxOES)glGetProcAddress(`glFeedbackBufferxOES`);
  if (glFeedbackBufferxOES is null) assert(0, `OpenGL function 'glFeedbackBufferxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFeedbackBufferxOES'\n"); }
  glFeedbackBufferxOES(a0,a1,a2,);
};
__gshared glbfn_glGetConvolutionParameterxvOES glGetConvolutionParameterxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetConvolutionParameterxvOES = cast(glbfn_glGetConvolutionParameterxvOES)glGetProcAddress(`glGetConvolutionParameterxvOES`);
  if (glGetConvolutionParameterxvOES is null) assert(0, `OpenGL function 'glGetConvolutionParameterxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetConvolutionParameterxvOES'\n"); }
  glGetConvolutionParameterxvOES(a0,a1,a2,);
};
__gshared glbfn_glGetHistogramParameterxvOES glGetHistogramParameterxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetHistogramParameterxvOES = cast(glbfn_glGetHistogramParameterxvOES)glGetProcAddress(`glGetHistogramParameterxvOES`);
  if (glGetHistogramParameterxvOES is null) assert(0, `OpenGL function 'glGetHistogramParameterxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetHistogramParameterxvOES'\n"); }
  glGetHistogramParameterxvOES(a0,a1,a2,);
};
__gshared glbfn_glGetLightxOES glGetLightxOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetLightxOES = cast(glbfn_glGetLightxOES)glGetProcAddress(`glGetLightxOES`);
  if (glGetLightxOES is null) assert(0, `OpenGL function 'glGetLightxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetLightxOES'\n"); }
  glGetLightxOES(a0,a1,a2,);
};
__gshared glbfn_glGetMapxvOES glGetMapxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetMapxvOES = cast(glbfn_glGetMapxvOES)glGetProcAddress(`glGetMapxvOES`);
  if (glGetMapxvOES is null) assert(0, `OpenGL function 'glGetMapxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMapxvOES'\n"); }
  glGetMapxvOES(a0,a1,a2,);
};
__gshared glbfn_glGetMaterialxOES glGetMaterialxOES = function void (GLenum a0, GLenum a1, GLfixed a2) nothrow {
  glGetMaterialxOES = cast(glbfn_glGetMaterialxOES)glGetProcAddress(`glGetMaterialxOES`);
  if (glGetMaterialxOES is null) assert(0, `OpenGL function 'glGetMaterialxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetMaterialxOES'\n"); }
  glGetMaterialxOES(a0,a1,a2,);
};
__gshared glbfn_glGetPixelMapxv glGetPixelMapxv = function void (GLenum a0, GLint a1, GLfixed* a2) nothrow {
  glGetPixelMapxv = cast(glbfn_glGetPixelMapxv)glGetProcAddress(`glGetPixelMapxv`);
  if (glGetPixelMapxv is null) assert(0, `OpenGL function 'glGetPixelMapxv' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelMapxv'\n"); }
  glGetPixelMapxv(a0,a1,a2,);
};
__gshared glbfn_glGetTexGenxvOES glGetTexGenxvOES = function void (GLenum a0, GLenum a1, GLfixed* a2) nothrow {
  glGetTexGenxvOES = cast(glbfn_glGetTexGenxvOES)glGetProcAddress(`glGetTexGenxvOES`);
  if (glGetTexGenxvOES is null) assert(0, `OpenGL function 'glGetTexGenxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexGenxvOES'\n"); }
  glGetTexGenxvOES(a0,a1,a2,);
};
__gshared glbfn_glGetTexLevelParameterxvOES glGetTexLevelParameterxvOES = function void (GLenum a0, GLint a1, GLenum a2, GLfixed* a3) nothrow {
  glGetTexLevelParameterxvOES = cast(glbfn_glGetTexLevelParameterxvOES)glGetProcAddress(`glGetTexLevelParameterxvOES`);
  if (glGetTexLevelParameterxvOES is null) assert(0, `OpenGL function 'glGetTexLevelParameterxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexLevelParameterxvOES'\n"); }
  glGetTexLevelParameterxvOES(a0,a1,a2,a3,);
};
__gshared glbfn_glIndexxOES glIndexxOES = function void (GLfixed a0) nothrow {
  glIndexxOES = cast(glbfn_glIndexxOES)glGetProcAddress(`glIndexxOES`);
  if (glIndexxOES is null) assert(0, `OpenGL function 'glIndexxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexxOES'\n"); }
  glIndexxOES(a0,);
};
__gshared glbfn_glIndexxvOES glIndexxvOES = function void (const(GLfixed)* a0) nothrow {
  glIndexxvOES = cast(glbfn_glIndexxvOES)glGetProcAddress(`glIndexxvOES`);
  if (glIndexxvOES is null) assert(0, `OpenGL function 'glIndexxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIndexxvOES'\n"); }
  glIndexxvOES(a0,);
};
__gshared glbfn_glLoadTransposeMatrixxOES glLoadTransposeMatrixxOES = function void (const(GLfixed)* a0) nothrow {
  glLoadTransposeMatrixxOES = cast(glbfn_glLoadTransposeMatrixxOES)glGetProcAddress(`glLoadTransposeMatrixxOES`);
  if (glLoadTransposeMatrixxOES is null) assert(0, `OpenGL function 'glLoadTransposeMatrixxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadTransposeMatrixxOES'\n"); }
  glLoadTransposeMatrixxOES(a0,);
};
__gshared glbfn_glMap1xOES glMap1xOES = function void (GLenum a0, GLfixed a1, GLfixed a2, GLint a3, GLint a4, GLfixed a5) nothrow {
  glMap1xOES = cast(glbfn_glMap1xOES)glGetProcAddress(`glMap1xOES`);
  if (glMap1xOES is null) assert(0, `OpenGL function 'glMap1xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMap1xOES'\n"); }
  glMap1xOES(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glMap2xOES glMap2xOES = function void (GLenum a0, GLfixed a1, GLfixed a2, GLint a3, GLint a4, GLfixed a5, GLfixed a6, GLint a7, GLint a8, GLfixed a9) nothrow {
  glMap2xOES = cast(glbfn_glMap2xOES)glGetProcAddress(`glMap2xOES`);
  if (glMap2xOES is null) assert(0, `OpenGL function 'glMap2xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMap2xOES'\n"); }
  glMap2xOES(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glMapGrid1xOES glMapGrid1xOES = function void (GLint a0, GLfixed a1, GLfixed a2) nothrow {
  glMapGrid1xOES = cast(glbfn_glMapGrid1xOES)glGetProcAddress(`glMapGrid1xOES`);
  if (glMapGrid1xOES is null) assert(0, `OpenGL function 'glMapGrid1xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapGrid1xOES'\n"); }
  glMapGrid1xOES(a0,a1,a2,);
};
__gshared glbfn_glMapGrid2xOES glMapGrid2xOES = function void (GLint a0, GLfixed a1, GLfixed a2, GLfixed a3, GLfixed a4) nothrow {
  glMapGrid2xOES = cast(glbfn_glMapGrid2xOES)glGetProcAddress(`glMapGrid2xOES`);
  if (glMapGrid2xOES is null) assert(0, `OpenGL function 'glMapGrid2xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMapGrid2xOES'\n"); }
  glMapGrid2xOES(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glMultTransposeMatrixxOES glMultTransposeMatrixxOES = function void (const(GLfixed)* a0) nothrow {
  glMultTransposeMatrixxOES = cast(glbfn_glMultTransposeMatrixxOES)glGetProcAddress(`glMultTransposeMatrixxOES`);
  if (glMultTransposeMatrixxOES is null) assert(0, `OpenGL function 'glMultTransposeMatrixxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultTransposeMatrixxOES'\n"); }
  glMultTransposeMatrixxOES(a0,);
};
__gshared glbfn_glMultiTexCoord1xOES glMultiTexCoord1xOES = function void (GLenum a0, GLfixed a1) nothrow {
  glMultiTexCoord1xOES = cast(glbfn_glMultiTexCoord1xOES)glGetProcAddress(`glMultiTexCoord1xOES`);
  if (glMultiTexCoord1xOES is null) assert(0, `OpenGL function 'glMultiTexCoord1xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1xOES'\n"); }
  glMultiTexCoord1xOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord1xvOES glMultiTexCoord1xvOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glMultiTexCoord1xvOES = cast(glbfn_glMultiTexCoord1xvOES)glGetProcAddress(`glMultiTexCoord1xvOES`);
  if (glMultiTexCoord1xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord1xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord1xvOES'\n"); }
  glMultiTexCoord1xvOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord2xOES glMultiTexCoord2xOES = function void (GLenum a0, GLfixed a1, GLfixed a2) nothrow {
  glMultiTexCoord2xOES = cast(glbfn_glMultiTexCoord2xOES)glGetProcAddress(`glMultiTexCoord2xOES`);
  if (glMultiTexCoord2xOES is null) assert(0, `OpenGL function 'glMultiTexCoord2xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2xOES'\n"); }
  glMultiTexCoord2xOES(a0,a1,a2,);
};
__gshared glbfn_glMultiTexCoord2xvOES glMultiTexCoord2xvOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glMultiTexCoord2xvOES = cast(glbfn_glMultiTexCoord2xvOES)glGetProcAddress(`glMultiTexCoord2xvOES`);
  if (glMultiTexCoord2xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord2xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord2xvOES'\n"); }
  glMultiTexCoord2xvOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord3xOES glMultiTexCoord3xOES = function void (GLenum a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glMultiTexCoord3xOES = cast(glbfn_glMultiTexCoord3xOES)glGetProcAddress(`glMultiTexCoord3xOES`);
  if (glMultiTexCoord3xOES is null) assert(0, `OpenGL function 'glMultiTexCoord3xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3xOES'\n"); }
  glMultiTexCoord3xOES(a0,a1,a2,a3,);
};
__gshared glbfn_glMultiTexCoord3xvOES glMultiTexCoord3xvOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glMultiTexCoord3xvOES = cast(glbfn_glMultiTexCoord3xvOES)glGetProcAddress(`glMultiTexCoord3xvOES`);
  if (glMultiTexCoord3xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord3xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord3xvOES'\n"); }
  glMultiTexCoord3xvOES(a0,a1,);
};
__gshared glbfn_glMultiTexCoord4xvOES glMultiTexCoord4xvOES = function void (GLenum a0, const(GLfixed)* a1) nothrow {
  glMultiTexCoord4xvOES = cast(glbfn_glMultiTexCoord4xvOES)glGetProcAddress(`glMultiTexCoord4xvOES`);
  if (glMultiTexCoord4xvOES is null) assert(0, `OpenGL function 'glMultiTexCoord4xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glMultiTexCoord4xvOES'\n"); }
  glMultiTexCoord4xvOES(a0,a1,);
};
__gshared glbfn_glNormal3xvOES glNormal3xvOES = function void (const(GLfixed)* a0) nothrow {
  glNormal3xvOES = cast(glbfn_glNormal3xvOES)glGetProcAddress(`glNormal3xvOES`);
  if (glNormal3xvOES is null) assert(0, `OpenGL function 'glNormal3xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3xvOES'\n"); }
  glNormal3xvOES(a0,);
};
__gshared glbfn_glPassThroughxOES glPassThroughxOES = function void (GLfixed a0) nothrow {
  glPassThroughxOES = cast(glbfn_glPassThroughxOES)glGetProcAddress(`glPassThroughxOES`);
  if (glPassThroughxOES is null) assert(0, `OpenGL function 'glPassThroughxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPassThroughxOES'\n"); }
  glPassThroughxOES(a0,);
};
__gshared glbfn_glPixelMapx glPixelMapx = function void (GLenum a0, GLint a1, const(GLfixed)* a2) nothrow {
  glPixelMapx = cast(glbfn_glPixelMapx)glGetProcAddress(`glPixelMapx`);
  if (glPixelMapx is null) assert(0, `OpenGL function 'glPixelMapx' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelMapx'\n"); }
  glPixelMapx(a0,a1,a2,);
};
__gshared glbfn_glPixelStorex glPixelStorex = function void (GLenum a0, GLfixed a1) nothrow {
  glPixelStorex = cast(glbfn_glPixelStorex)glGetProcAddress(`glPixelStorex`);
  if (glPixelStorex is null) assert(0, `OpenGL function 'glPixelStorex' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelStorex'\n"); }
  glPixelStorex(a0,a1,);
};
__gshared glbfn_glPixelTransferxOES glPixelTransferxOES = function void (GLenum a0, GLfixed a1) nothrow {
  glPixelTransferxOES = cast(glbfn_glPixelTransferxOES)glGetProcAddress(`glPixelTransferxOES`);
  if (glPixelTransferxOES is null) assert(0, `OpenGL function 'glPixelTransferxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTransferxOES'\n"); }
  glPixelTransferxOES(a0,a1,);
};
__gshared glbfn_glPixelZoomxOES glPixelZoomxOES = function void (GLfixed a0, GLfixed a1) nothrow {
  glPixelZoomxOES = cast(glbfn_glPixelZoomxOES)glGetProcAddress(`glPixelZoomxOES`);
  if (glPixelZoomxOES is null) assert(0, `OpenGL function 'glPixelZoomxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelZoomxOES'\n"); }
  glPixelZoomxOES(a0,a1,);
};
__gshared glbfn_glPrioritizeTexturesxOES glPrioritizeTexturesxOES = function void (GLsizei a0, const(GLuint)* a1, const(GLfixed)* a2) nothrow {
  glPrioritizeTexturesxOES = cast(glbfn_glPrioritizeTexturesxOES)glGetProcAddress(`glPrioritizeTexturesxOES`);
  if (glPrioritizeTexturesxOES is null) assert(0, `OpenGL function 'glPrioritizeTexturesxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPrioritizeTexturesxOES'\n"); }
  glPrioritizeTexturesxOES(a0,a1,a2,);
};
__gshared glbfn_glRasterPos2xOES glRasterPos2xOES = function void (GLfixed a0, GLfixed a1) nothrow {
  glRasterPos2xOES = cast(glbfn_glRasterPos2xOES)glGetProcAddress(`glRasterPos2xOES`);
  if (glRasterPos2xOES is null) assert(0, `OpenGL function 'glRasterPos2xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2xOES'\n"); }
  glRasterPos2xOES(a0,a1,);
};
__gshared glbfn_glRasterPos2xvOES glRasterPos2xvOES = function void (const(GLfixed)* a0) nothrow {
  glRasterPos2xvOES = cast(glbfn_glRasterPos2xvOES)glGetProcAddress(`glRasterPos2xvOES`);
  if (glRasterPos2xvOES is null) assert(0, `OpenGL function 'glRasterPos2xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos2xvOES'\n"); }
  glRasterPos2xvOES(a0,);
};
__gshared glbfn_glRasterPos3xOES glRasterPos3xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2) nothrow {
  glRasterPos3xOES = cast(glbfn_glRasterPos3xOES)glGetProcAddress(`glRasterPos3xOES`);
  if (glRasterPos3xOES is null) assert(0, `OpenGL function 'glRasterPos3xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3xOES'\n"); }
  glRasterPos3xOES(a0,a1,a2,);
};
__gshared glbfn_glRasterPos3xvOES glRasterPos3xvOES = function void (const(GLfixed)* a0) nothrow {
  glRasterPos3xvOES = cast(glbfn_glRasterPos3xvOES)glGetProcAddress(`glRasterPos3xvOES`);
  if (glRasterPos3xvOES is null) assert(0, `OpenGL function 'glRasterPos3xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos3xvOES'\n"); }
  glRasterPos3xvOES(a0,);
};
__gshared glbfn_glRasterPos4xOES glRasterPos4xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glRasterPos4xOES = cast(glbfn_glRasterPos4xOES)glGetProcAddress(`glRasterPos4xOES`);
  if (glRasterPos4xOES is null) assert(0, `OpenGL function 'glRasterPos4xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4xOES'\n"); }
  glRasterPos4xOES(a0,a1,a2,a3,);
};
__gshared glbfn_glRasterPos4xvOES glRasterPos4xvOES = function void (const(GLfixed)* a0) nothrow {
  glRasterPos4xvOES = cast(glbfn_glRasterPos4xvOES)glGetProcAddress(`glRasterPos4xvOES`);
  if (glRasterPos4xvOES is null) assert(0, `OpenGL function 'glRasterPos4xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRasterPos4xvOES'\n"); }
  glRasterPos4xvOES(a0,);
};
__gshared glbfn_glRectxOES glRectxOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glRectxOES = cast(glbfn_glRectxOES)glGetProcAddress(`glRectxOES`);
  if (glRectxOES is null) assert(0, `OpenGL function 'glRectxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectxOES'\n"); }
  glRectxOES(a0,a1,a2,a3,);
};
__gshared glbfn_glRectxvOES glRectxvOES = function void (const(GLfixed)* a0, const(GLfixed)* a1) nothrow {
  glRectxvOES = cast(glbfn_glRectxvOES)glGetProcAddress(`glRectxvOES`);
  if (glRectxvOES is null) assert(0, `OpenGL function 'glRectxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glRectxvOES'\n"); }
  glRectxvOES(a0,a1,);
};
__gshared glbfn_glTexCoord1xOES glTexCoord1xOES = function void (GLfixed a0) nothrow {
  glTexCoord1xOES = cast(glbfn_glTexCoord1xOES)glGetProcAddress(`glTexCoord1xOES`);
  if (glTexCoord1xOES is null) assert(0, `OpenGL function 'glTexCoord1xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1xOES'\n"); }
  glTexCoord1xOES(a0,);
};
__gshared glbfn_glTexCoord1xvOES glTexCoord1xvOES = function void (const(GLfixed)* a0) nothrow {
  glTexCoord1xvOES = cast(glbfn_glTexCoord1xvOES)glGetProcAddress(`glTexCoord1xvOES`);
  if (glTexCoord1xvOES is null) assert(0, `OpenGL function 'glTexCoord1xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord1xvOES'\n"); }
  glTexCoord1xvOES(a0,);
};
__gshared glbfn_glTexCoord2xOES glTexCoord2xOES = function void (GLfixed a0, GLfixed a1) nothrow {
  glTexCoord2xOES = cast(glbfn_glTexCoord2xOES)glGetProcAddress(`glTexCoord2xOES`);
  if (glTexCoord2xOES is null) assert(0, `OpenGL function 'glTexCoord2xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2xOES'\n"); }
  glTexCoord2xOES(a0,a1,);
};
__gshared glbfn_glTexCoord2xvOES glTexCoord2xvOES = function void (const(GLfixed)* a0) nothrow {
  glTexCoord2xvOES = cast(glbfn_glTexCoord2xvOES)glGetProcAddress(`glTexCoord2xvOES`);
  if (glTexCoord2xvOES is null) assert(0, `OpenGL function 'glTexCoord2xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2xvOES'\n"); }
  glTexCoord2xvOES(a0,);
};
__gshared glbfn_glTexCoord3xOES glTexCoord3xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2) nothrow {
  glTexCoord3xOES = cast(glbfn_glTexCoord3xOES)glGetProcAddress(`glTexCoord3xOES`);
  if (glTexCoord3xOES is null) assert(0, `OpenGL function 'glTexCoord3xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3xOES'\n"); }
  glTexCoord3xOES(a0,a1,a2,);
};
__gshared glbfn_glTexCoord3xvOES glTexCoord3xvOES = function void (const(GLfixed)* a0) nothrow {
  glTexCoord3xvOES = cast(glbfn_glTexCoord3xvOES)glGetProcAddress(`glTexCoord3xvOES`);
  if (glTexCoord3xvOES is null) assert(0, `OpenGL function 'glTexCoord3xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord3xvOES'\n"); }
  glTexCoord3xvOES(a0,);
};
__gshared glbfn_glTexCoord4xOES glTexCoord4xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2, GLfixed a3) nothrow {
  glTexCoord4xOES = cast(glbfn_glTexCoord4xOES)glGetProcAddress(`glTexCoord4xOES`);
  if (glTexCoord4xOES is null) assert(0, `OpenGL function 'glTexCoord4xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4xOES'\n"); }
  glTexCoord4xOES(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4xvOES glTexCoord4xvOES = function void (const(GLfixed)* a0) nothrow {
  glTexCoord4xvOES = cast(glbfn_glTexCoord4xvOES)glGetProcAddress(`glTexCoord4xvOES`);
  if (glTexCoord4xvOES is null) assert(0, `OpenGL function 'glTexCoord4xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4xvOES'\n"); }
  glTexCoord4xvOES(a0,);
};
__gshared glbfn_glTexGenxOES glTexGenxOES = function void (GLenum a0, GLenum a1, GLfixed a2) nothrow {
  glTexGenxOES = cast(glbfn_glTexGenxOES)glGetProcAddress(`glTexGenxOES`);
  if (glTexGenxOES is null) assert(0, `OpenGL function 'glTexGenxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGenxOES'\n"); }
  glTexGenxOES(a0,a1,a2,);
};
__gshared glbfn_glTexGenxvOES glTexGenxvOES = function void (GLenum a0, GLenum a1, const(GLfixed)* a2) nothrow {
  glTexGenxvOES = cast(glbfn_glTexGenxvOES)glGetProcAddress(`glTexGenxvOES`);
  if (glTexGenxvOES is null) assert(0, `OpenGL function 'glTexGenxvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexGenxvOES'\n"); }
  glTexGenxvOES(a0,a1,a2,);
};
__gshared glbfn_glVertex2xOES glVertex2xOES = function void (GLfixed a0) nothrow {
  glVertex2xOES = cast(glbfn_glVertex2xOES)glGetProcAddress(`glVertex2xOES`);
  if (glVertex2xOES is null) assert(0, `OpenGL function 'glVertex2xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2xOES'\n"); }
  glVertex2xOES(a0,);
};
__gshared glbfn_glVertex2xvOES glVertex2xvOES = function void (const(GLfixed)* a0) nothrow {
  glVertex2xvOES = cast(glbfn_glVertex2xvOES)glGetProcAddress(`glVertex2xvOES`);
  if (glVertex2xvOES is null) assert(0, `OpenGL function 'glVertex2xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex2xvOES'\n"); }
  glVertex2xvOES(a0,);
};
__gshared glbfn_glVertex3xOES glVertex3xOES = function void (GLfixed a0, GLfixed a1) nothrow {
  glVertex3xOES = cast(glbfn_glVertex3xOES)glGetProcAddress(`glVertex3xOES`);
  if (glVertex3xOES is null) assert(0, `OpenGL function 'glVertex3xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3xOES'\n"); }
  glVertex3xOES(a0,a1,);
};
__gshared glbfn_glVertex3xvOES glVertex3xvOES = function void (const(GLfixed)* a0) nothrow {
  glVertex3xvOES = cast(glbfn_glVertex3xvOES)glGetProcAddress(`glVertex3xvOES`);
  if (glVertex3xvOES is null) assert(0, `OpenGL function 'glVertex3xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex3xvOES'\n"); }
  glVertex3xvOES(a0,);
};
__gshared glbfn_glVertex4xOES glVertex4xOES = function void (GLfixed a0, GLfixed a1, GLfixed a2) nothrow {
  glVertex4xOES = cast(glbfn_glVertex4xOES)glGetProcAddress(`glVertex4xOES`);
  if (glVertex4xOES is null) assert(0, `OpenGL function 'glVertex4xOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4xOES'\n"); }
  glVertex4xOES(a0,a1,a2,);
};
__gshared glbfn_glVertex4xvOES glVertex4xvOES = function void (const(GLfixed)* a0) nothrow {
  glVertex4xvOES = cast(glbfn_glVertex4xvOES)glGetProcAddress(`glVertex4xvOES`);
  if (glVertex4xvOES is null) assert(0, `OpenGL function 'glVertex4xvOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glVertex4xvOES'\n"); }
  glVertex4xvOES(a0,);
};
__gshared glbfn_glQueryMatrixxOES glQueryMatrixxOES = function GLbitfield (GLfixed* a0, GLint* a1) nothrow {
  glQueryMatrixxOES = cast(glbfn_glQueryMatrixxOES)glGetProcAddress(`glQueryMatrixxOES`);
  if (glQueryMatrixxOES is null) assert(0, `OpenGL function 'glQueryMatrixxOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glQueryMatrixxOES'\n"); }
  return glQueryMatrixxOES(a0,a1,);
};
__gshared glbfn_glClearDepthfOES glClearDepthfOES = function void (GLclampf a0) nothrow {
  glClearDepthfOES = cast(glbfn_glClearDepthfOES)glGetProcAddress(`glClearDepthfOES`);
  if (glClearDepthfOES is null) assert(0, `OpenGL function 'glClearDepthfOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClearDepthfOES'\n"); }
  glClearDepthfOES(a0,);
};
__gshared glbfn_glClipPlanefOES glClipPlanefOES = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glClipPlanefOES = cast(glbfn_glClipPlanefOES)glGetProcAddress(`glClipPlanefOES`);
  if (glClipPlanefOES is null) assert(0, `OpenGL function 'glClipPlanefOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glClipPlanefOES'\n"); }
  glClipPlanefOES(a0,a1,);
};
__gshared glbfn_glDepthRangefOES glDepthRangefOES = function void (GLclampf a0, GLclampf a1) nothrow {
  glDepthRangefOES = cast(glbfn_glDepthRangefOES)glGetProcAddress(`glDepthRangefOES`);
  if (glDepthRangefOES is null) assert(0, `OpenGL function 'glDepthRangefOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDepthRangefOES'\n"); }
  glDepthRangefOES(a0,a1,);
};
__gshared glbfn_glFrustumfOES glFrustumfOES = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glFrustumfOES = cast(glbfn_glFrustumfOES)glGetProcAddress(`glFrustumfOES`);
  if (glFrustumfOES is null) assert(0, `OpenGL function 'glFrustumfOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFrustumfOES'\n"); }
  glFrustumfOES(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glGetClipPlanefOES glGetClipPlanefOES = function void (GLenum a0, GLfloat* a1) nothrow {
  glGetClipPlanefOES = cast(glbfn_glGetClipPlanefOES)glGetProcAddress(`glGetClipPlanefOES`);
  if (glGetClipPlanefOES is null) assert(0, `OpenGL function 'glGetClipPlanefOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetClipPlanefOES'\n"); }
  glGetClipPlanefOES(a0,a1,);
};
__gshared glbfn_glOrthofOES glOrthofOES = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glOrthofOES = cast(glbfn_glOrthofOES)glGetProcAddress(`glOrthofOES`);
  if (glOrthofOES is null) assert(0, `OpenGL function 'glOrthofOES' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glOrthofOES'\n"); }
  glOrthofOES(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glFramebufferTextureMultiviewOVR glFramebufferTextureMultiviewOVR = function void (GLenum a0, GLenum a1, GLuint a2, GLint a3, GLint a4, GLsizei a5) nothrow {
  glFramebufferTextureMultiviewOVR = cast(glbfn_glFramebufferTextureMultiviewOVR)glGetProcAddress(`glFramebufferTextureMultiviewOVR`);
  if (glFramebufferTextureMultiviewOVR is null) assert(0, `OpenGL function 'glFramebufferTextureMultiviewOVR' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFramebufferTextureMultiviewOVR'\n"); }
  glFramebufferTextureMultiviewOVR(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glHintPGI glHintPGI = function void (GLenum a0, GLint a1) nothrow {
  glHintPGI = cast(glbfn_glHintPGI)glGetProcAddress(`glHintPGI`);
  if (glHintPGI is null) assert(0, `OpenGL function 'glHintPGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glHintPGI'\n"); }
  glHintPGI(a0,a1,);
};
__gshared glbfn_glDetailTexFuncSGIS glDetailTexFuncSGIS = function void (GLenum a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glDetailTexFuncSGIS = cast(glbfn_glDetailTexFuncSGIS)glGetProcAddress(`glDetailTexFuncSGIS`);
  if (glDetailTexFuncSGIS is null) assert(0, `OpenGL function 'glDetailTexFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDetailTexFuncSGIS'\n"); }
  glDetailTexFuncSGIS(a0,a1,a2,);
};
__gshared glbfn_glGetDetailTexFuncSGIS glGetDetailTexFuncSGIS = function void (GLenum a0, GLfloat* a1) nothrow {
  glGetDetailTexFuncSGIS = cast(glbfn_glGetDetailTexFuncSGIS)glGetProcAddress(`glGetDetailTexFuncSGIS`);
  if (glGetDetailTexFuncSGIS is null) assert(0, `OpenGL function 'glGetDetailTexFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetDetailTexFuncSGIS'\n"); }
  glGetDetailTexFuncSGIS(a0,a1,);
};
__gshared glbfn_glFogFuncSGIS glFogFuncSGIS = function void (GLsizei a0, const(GLfloat)* a1) nothrow {
  glFogFuncSGIS = cast(glbfn_glFogFuncSGIS)glGetProcAddress(`glFogFuncSGIS`);
  if (glFogFuncSGIS is null) assert(0, `OpenGL function 'glFogFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFogFuncSGIS'\n"); }
  glFogFuncSGIS(a0,a1,);
};
__gshared glbfn_glGetFogFuncSGIS glGetFogFuncSGIS = function void (GLfloat* a0) nothrow {
  glGetFogFuncSGIS = cast(glbfn_glGetFogFuncSGIS)glGetProcAddress(`glGetFogFuncSGIS`);
  if (glGetFogFuncSGIS is null) assert(0, `OpenGL function 'glGetFogFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFogFuncSGIS'\n"); }
  glGetFogFuncSGIS(a0,);
};
__gshared glbfn_glSampleMaskSGIS glSampleMaskSGIS = function void (GLclampf a0, GLboolean a1) nothrow {
  glSampleMaskSGIS = cast(glbfn_glSampleMaskSGIS)glGetProcAddress(`glSampleMaskSGIS`);
  if (glSampleMaskSGIS is null) assert(0, `OpenGL function 'glSampleMaskSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSampleMaskSGIS'\n"); }
  glSampleMaskSGIS(a0,a1,);
};
__gshared glbfn_glSamplePatternSGIS glSamplePatternSGIS = function void (GLenum a0) nothrow {
  glSamplePatternSGIS = cast(glbfn_glSamplePatternSGIS)glGetProcAddress(`glSamplePatternSGIS`);
  if (glSamplePatternSGIS is null) assert(0, `OpenGL function 'glSamplePatternSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSamplePatternSGIS'\n"); }
  glSamplePatternSGIS(a0,);
};
__gshared glbfn_glPixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS = function void (GLenum a0, GLint a1) nothrow {
  glPixelTexGenParameteriSGIS = cast(glbfn_glPixelTexGenParameteriSGIS)glGetProcAddress(`glPixelTexGenParameteriSGIS`);
  if (glPixelTexGenParameteriSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameteriSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTexGenParameteriSGIS'\n"); }
  glPixelTexGenParameteriSGIS(a0,a1,);
};
__gshared glbfn_glPixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS = function void (GLenum a0, const(GLint)* a1) nothrow {
  glPixelTexGenParameterivSGIS = cast(glbfn_glPixelTexGenParameterivSGIS)glGetProcAddress(`glPixelTexGenParameterivSGIS`);
  if (glPixelTexGenParameterivSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameterivSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTexGenParameterivSGIS'\n"); }
  glPixelTexGenParameterivSGIS(a0,a1,);
};
__gshared glbfn_glPixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS = function void (GLenum a0, GLfloat a1) nothrow {
  glPixelTexGenParameterfSGIS = cast(glbfn_glPixelTexGenParameterfSGIS)glGetProcAddress(`glPixelTexGenParameterfSGIS`);
  if (glPixelTexGenParameterfSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameterfSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTexGenParameterfSGIS'\n"); }
  glPixelTexGenParameterfSGIS(a0,a1,);
};
__gshared glbfn_glPixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glPixelTexGenParameterfvSGIS = cast(glbfn_glPixelTexGenParameterfvSGIS)glGetProcAddress(`glPixelTexGenParameterfvSGIS`);
  if (glPixelTexGenParameterfvSGIS is null) assert(0, `OpenGL function 'glPixelTexGenParameterfvSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTexGenParameterfvSGIS'\n"); }
  glPixelTexGenParameterfvSGIS(a0,a1,);
};
__gshared glbfn_glGetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS = function void (GLenum a0, GLint* a1) nothrow {
  glGetPixelTexGenParameterivSGIS = cast(glbfn_glGetPixelTexGenParameterivSGIS)glGetProcAddress(`glGetPixelTexGenParameterivSGIS`);
  if (glGetPixelTexGenParameterivSGIS is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterivSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelTexGenParameterivSGIS'\n"); }
  glGetPixelTexGenParameterivSGIS(a0,a1,);
};
__gshared glbfn_glGetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS = function void (GLenum a0, GLfloat* a1) nothrow {
  glGetPixelTexGenParameterfvSGIS = cast(glbfn_glGetPixelTexGenParameterfvSGIS)glGetProcAddress(`glGetPixelTexGenParameterfvSGIS`);
  if (glGetPixelTexGenParameterfvSGIS is null) assert(0, `OpenGL function 'glGetPixelTexGenParameterfvSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetPixelTexGenParameterfvSGIS'\n"); }
  glGetPixelTexGenParameterfvSGIS(a0,a1,);
};
__gshared glbfn_glPointParameterfSGIS glPointParameterfSGIS = function void (GLenum a0, GLfloat a1) nothrow {
  glPointParameterfSGIS = cast(glbfn_glPointParameterfSGIS)glGetProcAddress(`glPointParameterfSGIS`);
  if (glPointParameterfSGIS is null) assert(0, `OpenGL function 'glPointParameterfSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterfSGIS'\n"); }
  glPointParameterfSGIS(a0,a1,);
};
__gshared glbfn_glPointParameterfvSGIS glPointParameterfvSGIS = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glPointParameterfvSGIS = cast(glbfn_glPointParameterfvSGIS)glGetProcAddress(`glPointParameterfvSGIS`);
  if (glPointParameterfvSGIS is null) assert(0, `OpenGL function 'glPointParameterfvSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPointParameterfvSGIS'\n"); }
  glPointParameterfvSGIS(a0,a1,);
};
__gshared glbfn_glSharpenTexFuncSGIS glSharpenTexFuncSGIS = function void (GLenum a0, GLsizei a1, const(GLfloat)* a2) nothrow {
  glSharpenTexFuncSGIS = cast(glbfn_glSharpenTexFuncSGIS)glGetProcAddress(`glSharpenTexFuncSGIS`);
  if (glSharpenTexFuncSGIS is null) assert(0, `OpenGL function 'glSharpenTexFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSharpenTexFuncSGIS'\n"); }
  glSharpenTexFuncSGIS(a0,a1,a2,);
};
__gshared glbfn_glGetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS = function void (GLenum a0, GLfloat* a1) nothrow {
  glGetSharpenTexFuncSGIS = cast(glbfn_glGetSharpenTexFuncSGIS)glGetProcAddress(`glGetSharpenTexFuncSGIS`);
  if (glGetSharpenTexFuncSGIS is null) assert(0, `OpenGL function 'glGetSharpenTexFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetSharpenTexFuncSGIS'\n"); }
  glGetSharpenTexFuncSGIS(a0,a1,);
};
__gshared glbfn_glTexImage4DSGIS glTexImage4DSGIS = function void (GLenum a0, GLint a1, GLenum a2, GLsizei a3, GLsizei a4, GLsizei a5, GLsizei a6, GLint a7, GLenum a8, GLenum a9, const(void)* a10) nothrow {
  glTexImage4DSGIS = cast(glbfn_glTexImage4DSGIS)glGetProcAddress(`glTexImage4DSGIS`);
  if (glTexImage4DSGIS is null) assert(0, `OpenGL function 'glTexImage4DSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexImage4DSGIS'\n"); }
  glTexImage4DSGIS(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glTexSubImage4DSGIS glTexSubImage4DSGIS = function void (GLenum a0, GLint a1, GLint a2, GLint a3, GLint a4, GLint a5, GLsizei a6, GLsizei a7, GLsizei a8, GLsizei a9, GLenum a10, GLenum a11, const(void)* a12) nothrow {
  glTexSubImage4DSGIS = cast(glbfn_glTexSubImage4DSGIS)glGetProcAddress(`glTexSubImage4DSGIS`);
  if (glTexSubImage4DSGIS is null) assert(0, `OpenGL function 'glTexSubImage4DSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexSubImage4DSGIS'\n"); }
  glTexSubImage4DSGIS(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
__gshared glbfn_glTextureColorMaskSGIS glTextureColorMaskSGIS = function void (GLboolean a0, GLboolean a1, GLboolean a2, GLboolean a3) nothrow {
  glTextureColorMaskSGIS = cast(glbfn_glTextureColorMaskSGIS)glGetProcAddress(`glTextureColorMaskSGIS`);
  if (glTextureColorMaskSGIS is null) assert(0, `OpenGL function 'glTextureColorMaskSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTextureColorMaskSGIS'\n"); }
  glTextureColorMaskSGIS(a0,a1,a2,a3,);
};
__gshared glbfn_glGetTexFilterFuncSGIS glGetTexFilterFuncSGIS = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetTexFilterFuncSGIS = cast(glbfn_glGetTexFilterFuncSGIS)glGetProcAddress(`glGetTexFilterFuncSGIS`);
  if (glGetTexFilterFuncSGIS is null) assert(0, `OpenGL function 'glGetTexFilterFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetTexFilterFuncSGIS'\n"); }
  glGetTexFilterFuncSGIS(a0,a1,a2,);
};
__gshared glbfn_glTexFilterFuncSGIS glTexFilterFuncSGIS = function void (GLenum a0, GLenum a1, GLsizei a2, const(GLfloat)* a3) nothrow {
  glTexFilterFuncSGIS = cast(glbfn_glTexFilterFuncSGIS)glGetProcAddress(`glTexFilterFuncSGIS`);
  if (glTexFilterFuncSGIS is null) assert(0, `OpenGL function 'glTexFilterFuncSGIS' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexFilterFuncSGIS'\n"); }
  glTexFilterFuncSGIS(a0,a1,a2,a3,);
};
__gshared glbfn_glAsyncMarkerSGIX glAsyncMarkerSGIX = function void (GLuint a0) nothrow {
  glAsyncMarkerSGIX = cast(glbfn_glAsyncMarkerSGIX)glGetProcAddress(`glAsyncMarkerSGIX`);
  if (glAsyncMarkerSGIX is null) assert(0, `OpenGL function 'glAsyncMarkerSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glAsyncMarkerSGIX'\n"); }
  glAsyncMarkerSGIX(a0,);
};
__gshared glbfn_glFinishAsyncSGIX glFinishAsyncSGIX = function GLint (GLuint* a0) nothrow {
  glFinishAsyncSGIX = cast(glbfn_glFinishAsyncSGIX)glGetProcAddress(`glFinishAsyncSGIX`);
  if (glFinishAsyncSGIX is null) assert(0, `OpenGL function 'glFinishAsyncSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFinishAsyncSGIX'\n"); }
  return glFinishAsyncSGIX(a0,);
};
__gshared glbfn_glPollAsyncSGIX glPollAsyncSGIX = function GLint (GLuint* a0) nothrow {
  glPollAsyncSGIX = cast(glbfn_glPollAsyncSGIX)glGetProcAddress(`glPollAsyncSGIX`);
  if (glPollAsyncSGIX is null) assert(0, `OpenGL function 'glPollAsyncSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPollAsyncSGIX'\n"); }
  return glPollAsyncSGIX(a0,);
};
__gshared glbfn_glGenAsyncMarkersSGIX glGenAsyncMarkersSGIX = function GLuint (GLsizei a0) nothrow {
  glGenAsyncMarkersSGIX = cast(glbfn_glGenAsyncMarkersSGIX)glGetProcAddress(`glGenAsyncMarkersSGIX`);
  if (glGenAsyncMarkersSGIX is null) assert(0, `OpenGL function 'glGenAsyncMarkersSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGenAsyncMarkersSGIX'\n"); }
  return glGenAsyncMarkersSGIX(a0,);
};
__gshared glbfn_glDeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX = function void (GLuint a0, GLsizei a1) nothrow {
  glDeleteAsyncMarkersSGIX = cast(glbfn_glDeleteAsyncMarkersSGIX)glGetProcAddress(`glDeleteAsyncMarkersSGIX`);
  if (glDeleteAsyncMarkersSGIX is null) assert(0, `OpenGL function 'glDeleteAsyncMarkersSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeleteAsyncMarkersSGIX'\n"); }
  glDeleteAsyncMarkersSGIX(a0,a1,);
};
__gshared glbfn_glIsAsyncMarkerSGIX glIsAsyncMarkerSGIX = function GLboolean (GLuint a0) nothrow {
  glIsAsyncMarkerSGIX = cast(glbfn_glIsAsyncMarkerSGIX)glGetProcAddress(`glIsAsyncMarkerSGIX`);
  if (glIsAsyncMarkerSGIX is null) assert(0, `OpenGL function 'glIsAsyncMarkerSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIsAsyncMarkerSGIX'\n"); }
  return glIsAsyncMarkerSGIX(a0,);
};
__gshared glbfn_glFlushRasterSGIX glFlushRasterSGIX = function void () nothrow {
  glFlushRasterSGIX = cast(glbfn_glFlushRasterSGIX)glGetProcAddress(`glFlushRasterSGIX`);
  if (glFlushRasterSGIX is null) assert(0, `OpenGL function 'glFlushRasterSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFlushRasterSGIX'\n"); }
  glFlushRasterSGIX();
};
__gshared glbfn_glFragmentColorMaterialSGIX glFragmentColorMaterialSGIX = function void (GLenum a0, GLenum a1) nothrow {
  glFragmentColorMaterialSGIX = cast(glbfn_glFragmentColorMaterialSGIX)glGetProcAddress(`glFragmentColorMaterialSGIX`);
  if (glFragmentColorMaterialSGIX is null) assert(0, `OpenGL function 'glFragmentColorMaterialSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentColorMaterialSGIX'\n"); }
  glFragmentColorMaterialSGIX(a0,a1,);
};
__gshared glbfn_glFragmentLightfSGIX glFragmentLightfSGIX = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glFragmentLightfSGIX = cast(glbfn_glFragmentLightfSGIX)glGetProcAddress(`glFragmentLightfSGIX`);
  if (glFragmentLightfSGIX is null) assert(0, `OpenGL function 'glFragmentLightfSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightfSGIX'\n"); }
  glFragmentLightfSGIX(a0,a1,a2,);
};
__gshared glbfn_glFragmentLightfvSGIX glFragmentLightfvSGIX = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glFragmentLightfvSGIX = cast(glbfn_glFragmentLightfvSGIX)glGetProcAddress(`glFragmentLightfvSGIX`);
  if (glFragmentLightfvSGIX is null) assert(0, `OpenGL function 'glFragmentLightfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightfvSGIX'\n"); }
  glFragmentLightfvSGIX(a0,a1,a2,);
};
__gshared glbfn_glFragmentLightiSGIX glFragmentLightiSGIX = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glFragmentLightiSGIX = cast(glbfn_glFragmentLightiSGIX)glGetProcAddress(`glFragmentLightiSGIX`);
  if (glFragmentLightiSGIX is null) assert(0, `OpenGL function 'glFragmentLightiSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightiSGIX'\n"); }
  glFragmentLightiSGIX(a0,a1,a2,);
};
__gshared glbfn_glFragmentLightivSGIX glFragmentLightivSGIX = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glFragmentLightivSGIX = cast(glbfn_glFragmentLightivSGIX)glGetProcAddress(`glFragmentLightivSGIX`);
  if (glFragmentLightivSGIX is null) assert(0, `OpenGL function 'glFragmentLightivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightivSGIX'\n"); }
  glFragmentLightivSGIX(a0,a1,a2,);
};
__gshared glbfn_glFragmentLightModelfSGIX glFragmentLightModelfSGIX = function void (GLenum a0, GLfloat a1) nothrow {
  glFragmentLightModelfSGIX = cast(glbfn_glFragmentLightModelfSGIX)glGetProcAddress(`glFragmentLightModelfSGIX`);
  if (glFragmentLightModelfSGIX is null) assert(0, `OpenGL function 'glFragmentLightModelfSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightModelfSGIX'\n"); }
  glFragmentLightModelfSGIX(a0,a1,);
};
__gshared glbfn_glFragmentLightModelfvSGIX glFragmentLightModelfvSGIX = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glFragmentLightModelfvSGIX = cast(glbfn_glFragmentLightModelfvSGIX)glGetProcAddress(`glFragmentLightModelfvSGIX`);
  if (glFragmentLightModelfvSGIX is null) assert(0, `OpenGL function 'glFragmentLightModelfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightModelfvSGIX'\n"); }
  glFragmentLightModelfvSGIX(a0,a1,);
};
__gshared glbfn_glFragmentLightModeliSGIX glFragmentLightModeliSGIX = function void (GLenum a0, GLint a1) nothrow {
  glFragmentLightModeliSGIX = cast(glbfn_glFragmentLightModeliSGIX)glGetProcAddress(`glFragmentLightModeliSGIX`);
  if (glFragmentLightModeliSGIX is null) assert(0, `OpenGL function 'glFragmentLightModeliSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightModeliSGIX'\n"); }
  glFragmentLightModeliSGIX(a0,a1,);
};
__gshared glbfn_glFragmentLightModelivSGIX glFragmentLightModelivSGIX = function void (GLenum a0, const(GLint)* a1) nothrow {
  glFragmentLightModelivSGIX = cast(glbfn_glFragmentLightModelivSGIX)glGetProcAddress(`glFragmentLightModelivSGIX`);
  if (glFragmentLightModelivSGIX is null) assert(0, `OpenGL function 'glFragmentLightModelivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentLightModelivSGIX'\n"); }
  glFragmentLightModelivSGIX(a0,a1,);
};
__gshared glbfn_glFragmentMaterialfSGIX glFragmentMaterialfSGIX = function void (GLenum a0, GLenum a1, GLfloat a2) nothrow {
  glFragmentMaterialfSGIX = cast(glbfn_glFragmentMaterialfSGIX)glGetProcAddress(`glFragmentMaterialfSGIX`);
  if (glFragmentMaterialfSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialfSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentMaterialfSGIX'\n"); }
  glFragmentMaterialfSGIX(a0,a1,a2,);
};
__gshared glbfn_glFragmentMaterialfvSGIX glFragmentMaterialfvSGIX = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glFragmentMaterialfvSGIX = cast(glbfn_glFragmentMaterialfvSGIX)glGetProcAddress(`glFragmentMaterialfvSGIX`);
  if (glFragmentMaterialfvSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentMaterialfvSGIX'\n"); }
  glFragmentMaterialfvSGIX(a0,a1,a2,);
};
__gshared glbfn_glFragmentMaterialiSGIX glFragmentMaterialiSGIX = function void (GLenum a0, GLenum a1, GLint a2) nothrow {
  glFragmentMaterialiSGIX = cast(glbfn_glFragmentMaterialiSGIX)glGetProcAddress(`glFragmentMaterialiSGIX`);
  if (glFragmentMaterialiSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialiSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentMaterialiSGIX'\n"); }
  glFragmentMaterialiSGIX(a0,a1,a2,);
};
__gshared glbfn_glFragmentMaterialivSGIX glFragmentMaterialivSGIX = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glFragmentMaterialivSGIX = cast(glbfn_glFragmentMaterialivSGIX)glGetProcAddress(`glFragmentMaterialivSGIX`);
  if (glFragmentMaterialivSGIX is null) assert(0, `OpenGL function 'glFragmentMaterialivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFragmentMaterialivSGIX'\n"); }
  glFragmentMaterialivSGIX(a0,a1,a2,);
};
__gshared glbfn_glGetFragmentLightfvSGIX glGetFragmentLightfvSGIX = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetFragmentLightfvSGIX = cast(glbfn_glGetFragmentLightfvSGIX)glGetProcAddress(`glGetFragmentLightfvSGIX`);
  if (glGetFragmentLightfvSGIX is null) assert(0, `OpenGL function 'glGetFragmentLightfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFragmentLightfvSGIX'\n"); }
  glGetFragmentLightfvSGIX(a0,a1,a2,);
};
__gshared glbfn_glGetFragmentLightivSGIX glGetFragmentLightivSGIX = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetFragmentLightivSGIX = cast(glbfn_glGetFragmentLightivSGIX)glGetProcAddress(`glGetFragmentLightivSGIX`);
  if (glGetFragmentLightivSGIX is null) assert(0, `OpenGL function 'glGetFragmentLightivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFragmentLightivSGIX'\n"); }
  glGetFragmentLightivSGIX(a0,a1,a2,);
};
__gshared glbfn_glGetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetFragmentMaterialfvSGIX = cast(glbfn_glGetFragmentMaterialfvSGIX)glGetProcAddress(`glGetFragmentMaterialfvSGIX`);
  if (glGetFragmentMaterialfvSGIX is null) assert(0, `OpenGL function 'glGetFragmentMaterialfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFragmentMaterialfvSGIX'\n"); }
  glGetFragmentMaterialfvSGIX(a0,a1,a2,);
};
__gshared glbfn_glGetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetFragmentMaterialivSGIX = cast(glbfn_glGetFragmentMaterialivSGIX)glGetProcAddress(`glGetFragmentMaterialivSGIX`);
  if (glGetFragmentMaterialivSGIX is null) assert(0, `OpenGL function 'glGetFragmentMaterialivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetFragmentMaterialivSGIX'\n"); }
  glGetFragmentMaterialivSGIX(a0,a1,a2,);
};
__gshared glbfn_glLightEnviSGIX glLightEnviSGIX = function void (GLenum a0, GLint a1) nothrow {
  glLightEnviSGIX = cast(glbfn_glLightEnviSGIX)glGetProcAddress(`glLightEnviSGIX`);
  if (glLightEnviSGIX is null) assert(0, `OpenGL function 'glLightEnviSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLightEnviSGIX'\n"); }
  glLightEnviSGIX(a0,a1,);
};
__gshared glbfn_glFrameZoomSGIX glFrameZoomSGIX = function void (GLint a0) nothrow {
  glFrameZoomSGIX = cast(glbfn_glFrameZoomSGIX)glGetProcAddress(`glFrameZoomSGIX`);
  if (glFrameZoomSGIX is null) assert(0, `OpenGL function 'glFrameZoomSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFrameZoomSGIX'\n"); }
  glFrameZoomSGIX(a0,);
};
__gshared glbfn_glIglooInterfaceSGIX glIglooInterfaceSGIX = function void (GLenum a0, const(void)* a1) nothrow {
  glIglooInterfaceSGIX = cast(glbfn_glIglooInterfaceSGIX)glGetProcAddress(`glIglooInterfaceSGIX`);
  if (glIglooInterfaceSGIX is null) assert(0, `OpenGL function 'glIglooInterfaceSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glIglooInterfaceSGIX'\n"); }
  glIglooInterfaceSGIX(a0,a1,);
};
__gshared glbfn_glGetInstrumentsSGIX glGetInstrumentsSGIX = function GLint () nothrow {
  glGetInstrumentsSGIX = cast(glbfn_glGetInstrumentsSGIX)glGetProcAddress(`glGetInstrumentsSGIX`);
  if (glGetInstrumentsSGIX is null) assert(0, `OpenGL function 'glGetInstrumentsSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetInstrumentsSGIX'\n"); }
  return glGetInstrumentsSGIX();
};
__gshared glbfn_glInstrumentsBufferSGIX glInstrumentsBufferSGIX = function void (GLsizei a0, GLint* a1) nothrow {
  glInstrumentsBufferSGIX = cast(glbfn_glInstrumentsBufferSGIX)glGetProcAddress(`glInstrumentsBufferSGIX`);
  if (glInstrumentsBufferSGIX is null) assert(0, `OpenGL function 'glInstrumentsBufferSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glInstrumentsBufferSGIX'\n"); }
  glInstrumentsBufferSGIX(a0,a1,);
};
__gshared glbfn_glPollInstrumentsSGIX glPollInstrumentsSGIX = function GLint (GLint* a0) nothrow {
  glPollInstrumentsSGIX = cast(glbfn_glPollInstrumentsSGIX)glGetProcAddress(`glPollInstrumentsSGIX`);
  if (glPollInstrumentsSGIX is null) assert(0, `OpenGL function 'glPollInstrumentsSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPollInstrumentsSGIX'\n"); }
  return glPollInstrumentsSGIX(a0,);
};
__gshared glbfn_glReadInstrumentsSGIX glReadInstrumentsSGIX = function void (GLint a0) nothrow {
  glReadInstrumentsSGIX = cast(glbfn_glReadInstrumentsSGIX)glGetProcAddress(`glReadInstrumentsSGIX`);
  if (glReadInstrumentsSGIX is null) assert(0, `OpenGL function 'glReadInstrumentsSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReadInstrumentsSGIX'\n"); }
  glReadInstrumentsSGIX(a0,);
};
__gshared glbfn_glStartInstrumentsSGIX glStartInstrumentsSGIX = function void () nothrow {
  glStartInstrumentsSGIX = cast(glbfn_glStartInstrumentsSGIX)glGetProcAddress(`glStartInstrumentsSGIX`);
  if (glStartInstrumentsSGIX is null) assert(0, `OpenGL function 'glStartInstrumentsSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStartInstrumentsSGIX'\n"); }
  glStartInstrumentsSGIX();
};
__gshared glbfn_glStopInstrumentsSGIX glStopInstrumentsSGIX = function void (GLint a0) nothrow {
  glStopInstrumentsSGIX = cast(glbfn_glStopInstrumentsSGIX)glGetProcAddress(`glStopInstrumentsSGIX`);
  if (glStopInstrumentsSGIX is null) assert(0, `OpenGL function 'glStopInstrumentsSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glStopInstrumentsSGIX'\n"); }
  glStopInstrumentsSGIX(a0,);
};
__gshared glbfn_glGetListParameterfvSGIX glGetListParameterfvSGIX = function void (GLuint a0, GLenum a1, GLfloat* a2) nothrow {
  glGetListParameterfvSGIX = cast(glbfn_glGetListParameterfvSGIX)glGetProcAddress(`glGetListParameterfvSGIX`);
  if (glGetListParameterfvSGIX is null) assert(0, `OpenGL function 'glGetListParameterfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetListParameterfvSGIX'\n"); }
  glGetListParameterfvSGIX(a0,a1,a2,);
};
__gshared glbfn_glGetListParameterivSGIX glGetListParameterivSGIX = function void (GLuint a0, GLenum a1, GLint* a2) nothrow {
  glGetListParameterivSGIX = cast(glbfn_glGetListParameterivSGIX)glGetProcAddress(`glGetListParameterivSGIX`);
  if (glGetListParameterivSGIX is null) assert(0, `OpenGL function 'glGetListParameterivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetListParameterivSGIX'\n"); }
  glGetListParameterivSGIX(a0,a1,a2,);
};
__gshared glbfn_glListParameterfSGIX glListParameterfSGIX = function void (GLuint a0, GLenum a1, GLfloat a2) nothrow {
  glListParameterfSGIX = cast(glbfn_glListParameterfSGIX)glGetProcAddress(`glListParameterfSGIX`);
  if (glListParameterfSGIX is null) assert(0, `OpenGL function 'glListParameterfSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glListParameterfSGIX'\n"); }
  glListParameterfSGIX(a0,a1,a2,);
};
__gshared glbfn_glListParameterfvSGIX glListParameterfvSGIX = function void (GLuint a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glListParameterfvSGIX = cast(glbfn_glListParameterfvSGIX)glGetProcAddress(`glListParameterfvSGIX`);
  if (glListParameterfvSGIX is null) assert(0, `OpenGL function 'glListParameterfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glListParameterfvSGIX'\n"); }
  glListParameterfvSGIX(a0,a1,a2,);
};
__gshared glbfn_glListParameteriSGIX glListParameteriSGIX = function void (GLuint a0, GLenum a1, GLint a2) nothrow {
  glListParameteriSGIX = cast(glbfn_glListParameteriSGIX)glGetProcAddress(`glListParameteriSGIX`);
  if (glListParameteriSGIX is null) assert(0, `OpenGL function 'glListParameteriSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glListParameteriSGIX'\n"); }
  glListParameteriSGIX(a0,a1,a2,);
};
__gshared glbfn_glListParameterivSGIX glListParameterivSGIX = function void (GLuint a0, GLenum a1, const(GLint)* a2) nothrow {
  glListParameterivSGIX = cast(glbfn_glListParameterivSGIX)glGetProcAddress(`glListParameterivSGIX`);
  if (glListParameterivSGIX is null) assert(0, `OpenGL function 'glListParameterivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glListParameterivSGIX'\n"); }
  glListParameterivSGIX(a0,a1,a2,);
};
__gshared glbfn_glPixelTexGenSGIX glPixelTexGenSGIX = function void (GLenum a0) nothrow {
  glPixelTexGenSGIX = cast(glbfn_glPixelTexGenSGIX)glGetProcAddress(`glPixelTexGenSGIX`);
  if (glPixelTexGenSGIX is null) assert(0, `OpenGL function 'glPixelTexGenSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glPixelTexGenSGIX'\n"); }
  glPixelTexGenSGIX(a0,);
};
__gshared glbfn_glDeformationMap3dSGIX glDeformationMap3dSGIX = function void (GLenum a0, GLdouble a1, GLdouble a2, GLint a3, GLint a4, GLdouble a5, GLdouble a6, GLint a7, GLint a8, GLdouble a9, GLdouble a10, GLint a11, GLint a12, const(GLdouble)* a13) nothrow {
  glDeformationMap3dSGIX = cast(glbfn_glDeformationMap3dSGIX)glGetProcAddress(`glDeformationMap3dSGIX`);
  if (glDeformationMap3dSGIX is null) assert(0, `OpenGL function 'glDeformationMap3dSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeformationMap3dSGIX'\n"); }
  glDeformationMap3dSGIX(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,);
};
__gshared glbfn_glDeformationMap3fSGIX glDeformationMap3fSGIX = function void (GLenum a0, GLfloat a1, GLfloat a2, GLint a3, GLint a4, GLfloat a5, GLfloat a6, GLint a7, GLint a8, GLfloat a9, GLfloat a10, GLint a11, GLint a12, const(GLfloat)* a13) nothrow {
  glDeformationMap3fSGIX = cast(glbfn_glDeformationMap3fSGIX)glGetProcAddress(`glDeformationMap3fSGIX`);
  if (glDeformationMap3fSGIX is null) assert(0, `OpenGL function 'glDeformationMap3fSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeformationMap3fSGIX'\n"); }
  glDeformationMap3fSGIX(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,);
};
__gshared glbfn_glDeformSGIX glDeformSGIX = function void (GLbitfield a0) nothrow {
  glDeformSGIX = cast(glbfn_glDeformSGIX)glGetProcAddress(`glDeformSGIX`);
  if (glDeformSGIX is null) assert(0, `OpenGL function 'glDeformSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDeformSGIX'\n"); }
  glDeformSGIX(a0,);
};
__gshared glbfn_glLoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX = function void (GLbitfield a0) nothrow {
  glLoadIdentityDeformationMapSGIX = cast(glbfn_glLoadIdentityDeformationMapSGIX)glGetProcAddress(`glLoadIdentityDeformationMapSGIX`);
  if (glLoadIdentityDeformationMapSGIX is null) assert(0, `OpenGL function 'glLoadIdentityDeformationMapSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glLoadIdentityDeformationMapSGIX'\n"); }
  glLoadIdentityDeformationMapSGIX(a0,);
};
__gshared glbfn_glReferencePlaneSGIX glReferencePlaneSGIX = function void (const(GLdouble)* a0) nothrow {
  glReferencePlaneSGIX = cast(glbfn_glReferencePlaneSGIX)glGetProcAddress(`glReferencePlaneSGIX`);
  if (glReferencePlaneSGIX is null) assert(0, `OpenGL function 'glReferencePlaneSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReferencePlaneSGIX'\n"); }
  glReferencePlaneSGIX(a0,);
};
__gshared glbfn_glSpriteParameterfSGIX glSpriteParameterfSGIX = function void (GLenum a0, GLfloat a1) nothrow {
  glSpriteParameterfSGIX = cast(glbfn_glSpriteParameterfSGIX)glGetProcAddress(`glSpriteParameterfSGIX`);
  if (glSpriteParameterfSGIX is null) assert(0, `OpenGL function 'glSpriteParameterfSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSpriteParameterfSGIX'\n"); }
  glSpriteParameterfSGIX(a0,a1,);
};
__gshared glbfn_glSpriteParameterfvSGIX glSpriteParameterfvSGIX = function void (GLenum a0, const(GLfloat)* a1) nothrow {
  glSpriteParameterfvSGIX = cast(glbfn_glSpriteParameterfvSGIX)glGetProcAddress(`glSpriteParameterfvSGIX`);
  if (glSpriteParameterfvSGIX is null) assert(0, `OpenGL function 'glSpriteParameterfvSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSpriteParameterfvSGIX'\n"); }
  glSpriteParameterfvSGIX(a0,a1,);
};
__gshared glbfn_glSpriteParameteriSGIX glSpriteParameteriSGIX = function void (GLenum a0, GLint a1) nothrow {
  glSpriteParameteriSGIX = cast(glbfn_glSpriteParameteriSGIX)glGetProcAddress(`glSpriteParameteriSGIX`);
  if (glSpriteParameteriSGIX is null) assert(0, `OpenGL function 'glSpriteParameteriSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSpriteParameteriSGIX'\n"); }
  glSpriteParameteriSGIX(a0,a1,);
};
__gshared glbfn_glSpriteParameterivSGIX glSpriteParameterivSGIX = function void (GLenum a0, const(GLint)* a1) nothrow {
  glSpriteParameterivSGIX = cast(glbfn_glSpriteParameterivSGIX)glGetProcAddress(`glSpriteParameterivSGIX`);
  if (glSpriteParameterivSGIX is null) assert(0, `OpenGL function 'glSpriteParameterivSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glSpriteParameterivSGIX'\n"); }
  glSpriteParameterivSGIX(a0,a1,);
};
__gshared glbfn_glTagSampleBufferSGIX glTagSampleBufferSGIX = function void () nothrow {
  glTagSampleBufferSGIX = cast(glbfn_glTagSampleBufferSGIX)glGetProcAddress(`glTagSampleBufferSGIX`);
  if (glTagSampleBufferSGIX is null) assert(0, `OpenGL function 'glTagSampleBufferSGIX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTagSampleBufferSGIX'\n"); }
  glTagSampleBufferSGIX();
};
__gshared glbfn_glColorTableSGI glColorTableSGI = function void (GLenum a0, GLenum a1, GLsizei a2, GLenum a3, GLenum a4, const(void)* a5) nothrow {
  glColorTableSGI = cast(glbfn_glColorTableSGI)glGetProcAddress(`glColorTableSGI`);
  if (glColorTableSGI is null) assert(0, `OpenGL function 'glColorTableSGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorTableSGI'\n"); }
  glColorTableSGI(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glColorTableParameterfvSGI glColorTableParameterfvSGI = function void (GLenum a0, GLenum a1, const(GLfloat)* a2) nothrow {
  glColorTableParameterfvSGI = cast(glbfn_glColorTableParameterfvSGI)glGetProcAddress(`glColorTableParameterfvSGI`);
  if (glColorTableParameterfvSGI is null) assert(0, `OpenGL function 'glColorTableParameterfvSGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorTableParameterfvSGI'\n"); }
  glColorTableParameterfvSGI(a0,a1,a2,);
};
__gshared glbfn_glColorTableParameterivSGI glColorTableParameterivSGI = function void (GLenum a0, GLenum a1, const(GLint)* a2) nothrow {
  glColorTableParameterivSGI = cast(glbfn_glColorTableParameterivSGI)glGetProcAddress(`glColorTableParameterivSGI`);
  if (glColorTableParameterivSGI is null) assert(0, `OpenGL function 'glColorTableParameterivSGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColorTableParameterivSGI'\n"); }
  glColorTableParameterivSGI(a0,a1,a2,);
};
__gshared glbfn_glCopyColorTableSGI glCopyColorTableSGI = function void (GLenum a0, GLenum a1, GLint a2, GLint a3, GLsizei a4) nothrow {
  glCopyColorTableSGI = cast(glbfn_glCopyColorTableSGI)glGetProcAddress(`glCopyColorTableSGI`);
  if (glCopyColorTableSGI is null) assert(0, `OpenGL function 'glCopyColorTableSGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glCopyColorTableSGI'\n"); }
  glCopyColorTableSGI(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glGetColorTableSGI glGetColorTableSGI = function void (GLenum a0, GLenum a1, GLenum a2, void* a3) nothrow {
  glGetColorTableSGI = cast(glbfn_glGetColorTableSGI)glGetProcAddress(`glGetColorTableSGI`);
  if (glGetColorTableSGI is null) assert(0, `OpenGL function 'glGetColorTableSGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableSGI'\n"); }
  glGetColorTableSGI(a0,a1,a2,a3,);
};
__gshared glbfn_glGetColorTableParameterfvSGI glGetColorTableParameterfvSGI = function void (GLenum a0, GLenum a1, GLfloat* a2) nothrow {
  glGetColorTableParameterfvSGI = cast(glbfn_glGetColorTableParameterfvSGI)glGetProcAddress(`glGetColorTableParameterfvSGI`);
  if (glGetColorTableParameterfvSGI is null) assert(0, `OpenGL function 'glGetColorTableParameterfvSGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableParameterfvSGI'\n"); }
  glGetColorTableParameterfvSGI(a0,a1,a2,);
};
__gshared glbfn_glGetColorTableParameterivSGI glGetColorTableParameterivSGI = function void (GLenum a0, GLenum a1, GLint* a2) nothrow {
  glGetColorTableParameterivSGI = cast(glbfn_glGetColorTableParameterivSGI)glGetProcAddress(`glGetColorTableParameterivSGI`);
  if (glGetColorTableParameterivSGI is null) assert(0, `OpenGL function 'glGetColorTableParameterivSGI' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGetColorTableParameterivSGI'\n"); }
  glGetColorTableParameterivSGI(a0,a1,a2,);
};
__gshared glbfn_glFinishTextureSUNX glFinishTextureSUNX = function void () nothrow {
  glFinishTextureSUNX = cast(glbfn_glFinishTextureSUNX)glGetProcAddress(`glFinishTextureSUNX`);
  if (glFinishTextureSUNX is null) assert(0, `OpenGL function 'glFinishTextureSUNX' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glFinishTextureSUNX'\n"); }
  glFinishTextureSUNX();
};
__gshared glbfn_glGlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN = function void (GLbyte a0) nothrow {
  glGlobalAlphaFactorbSUN = cast(glbfn_glGlobalAlphaFactorbSUN)glGetProcAddress(`glGlobalAlphaFactorbSUN`);
  if (glGlobalAlphaFactorbSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorbSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactorbSUN'\n"); }
  glGlobalAlphaFactorbSUN(a0,);
};
__gshared glbfn_glGlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN = function void (GLshort a0) nothrow {
  glGlobalAlphaFactorsSUN = cast(glbfn_glGlobalAlphaFactorsSUN)glGetProcAddress(`glGlobalAlphaFactorsSUN`);
  if (glGlobalAlphaFactorsSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorsSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactorsSUN'\n"); }
  glGlobalAlphaFactorsSUN(a0,);
};
__gshared glbfn_glGlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN = function void (GLint a0) nothrow {
  glGlobalAlphaFactoriSUN = cast(glbfn_glGlobalAlphaFactoriSUN)glGetProcAddress(`glGlobalAlphaFactoriSUN`);
  if (glGlobalAlphaFactoriSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactoriSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactoriSUN'\n"); }
  glGlobalAlphaFactoriSUN(a0,);
};
__gshared glbfn_glGlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN = function void (GLfloat a0) nothrow {
  glGlobalAlphaFactorfSUN = cast(glbfn_glGlobalAlphaFactorfSUN)glGetProcAddress(`glGlobalAlphaFactorfSUN`);
  if (glGlobalAlphaFactorfSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorfSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactorfSUN'\n"); }
  glGlobalAlphaFactorfSUN(a0,);
};
__gshared glbfn_glGlobalAlphaFactordSUN glGlobalAlphaFactordSUN = function void (GLdouble a0) nothrow {
  glGlobalAlphaFactordSUN = cast(glbfn_glGlobalAlphaFactordSUN)glGetProcAddress(`glGlobalAlphaFactordSUN`);
  if (glGlobalAlphaFactordSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactordSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactordSUN'\n"); }
  glGlobalAlphaFactordSUN(a0,);
};
__gshared glbfn_glGlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN = function void (GLubyte a0) nothrow {
  glGlobalAlphaFactorubSUN = cast(glbfn_glGlobalAlphaFactorubSUN)glGetProcAddress(`glGlobalAlphaFactorubSUN`);
  if (glGlobalAlphaFactorubSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorubSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactorubSUN'\n"); }
  glGlobalAlphaFactorubSUN(a0,);
};
__gshared glbfn_glGlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN = function void (GLushort a0) nothrow {
  glGlobalAlphaFactorusSUN = cast(glbfn_glGlobalAlphaFactorusSUN)glGetProcAddress(`glGlobalAlphaFactorusSUN`);
  if (glGlobalAlphaFactorusSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactorusSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactorusSUN'\n"); }
  glGlobalAlphaFactorusSUN(a0,);
};
__gshared glbfn_glGlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN = function void (GLuint a0) nothrow {
  glGlobalAlphaFactoruiSUN = cast(glbfn_glGlobalAlphaFactoruiSUN)glGetProcAddress(`glGlobalAlphaFactoruiSUN`);
  if (glGlobalAlphaFactoruiSUN is null) assert(0, `OpenGL function 'glGlobalAlphaFactoruiSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glGlobalAlphaFactoruiSUN'\n"); }
  glGlobalAlphaFactoruiSUN(a0,);
};
__gshared glbfn_glDrawMeshArraysSUN glDrawMeshArraysSUN = function void (GLenum a0, GLint a1, GLsizei a2, GLsizei a3) nothrow {
  glDrawMeshArraysSUN = cast(glbfn_glDrawMeshArraysSUN)glGetProcAddress(`glDrawMeshArraysSUN`);
  if (glDrawMeshArraysSUN is null) assert(0, `OpenGL function 'glDrawMeshArraysSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glDrawMeshArraysSUN'\n"); }
  glDrawMeshArraysSUN(a0,a1,a2,a3,);
};
__gshared glbfn_glReplacementCodeuiSUN glReplacementCodeuiSUN = function void (GLuint a0) nothrow {
  glReplacementCodeuiSUN = cast(glbfn_glReplacementCodeuiSUN)glGetProcAddress(`glReplacementCodeuiSUN`);
  if (glReplacementCodeuiSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiSUN'\n"); }
  glReplacementCodeuiSUN(a0,);
};
__gshared glbfn_glReplacementCodeusSUN glReplacementCodeusSUN = function void (GLushort a0) nothrow {
  glReplacementCodeusSUN = cast(glbfn_glReplacementCodeusSUN)glGetProcAddress(`glReplacementCodeusSUN`);
  if (glReplacementCodeusSUN is null) assert(0, `OpenGL function 'glReplacementCodeusSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeusSUN'\n"); }
  glReplacementCodeusSUN(a0,);
};
__gshared glbfn_glReplacementCodeubSUN glReplacementCodeubSUN = function void (GLubyte a0) nothrow {
  glReplacementCodeubSUN = cast(glbfn_glReplacementCodeubSUN)glGetProcAddress(`glReplacementCodeubSUN`);
  if (glReplacementCodeubSUN is null) assert(0, `OpenGL function 'glReplacementCodeubSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeubSUN'\n"); }
  glReplacementCodeubSUN(a0,);
};
__gshared glbfn_glReplacementCodeuivSUN glReplacementCodeuivSUN = function void (const(GLuint)* a0) nothrow {
  glReplacementCodeuivSUN = cast(glbfn_glReplacementCodeuivSUN)glGetProcAddress(`glReplacementCodeuivSUN`);
  if (glReplacementCodeuivSUN is null) assert(0, `OpenGL function 'glReplacementCodeuivSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuivSUN'\n"); }
  glReplacementCodeuivSUN(a0,);
};
__gshared glbfn_glReplacementCodeusvSUN glReplacementCodeusvSUN = function void (const(GLushort)* a0) nothrow {
  glReplacementCodeusvSUN = cast(glbfn_glReplacementCodeusvSUN)glGetProcAddress(`glReplacementCodeusvSUN`);
  if (glReplacementCodeusvSUN is null) assert(0, `OpenGL function 'glReplacementCodeusvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeusvSUN'\n"); }
  glReplacementCodeusvSUN(a0,);
};
__gshared glbfn_glReplacementCodeubvSUN glReplacementCodeubvSUN = function void (const(GLubyte)* a0) nothrow {
  glReplacementCodeubvSUN = cast(glbfn_glReplacementCodeubvSUN)glGetProcAddress(`glReplacementCodeubvSUN`);
  if (glReplacementCodeubvSUN is null) assert(0, `OpenGL function 'glReplacementCodeubvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeubvSUN'\n"); }
  glReplacementCodeubvSUN(a0,);
};
__gshared glbfn_glReplacementCodePointerSUN glReplacementCodePointerSUN = function void (GLenum a0, GLsizei a1, const(void*)* a2) nothrow {
  glReplacementCodePointerSUN = cast(glbfn_glReplacementCodePointerSUN)glGetProcAddress(`glReplacementCodePointerSUN`);
  if (glReplacementCodePointerSUN is null) assert(0, `OpenGL function 'glReplacementCodePointerSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodePointerSUN'\n"); }
  glReplacementCodePointerSUN(a0,a1,a2,);
};
__gshared glbfn_glColor4ubVertex2fSUN glColor4ubVertex2fSUN = function void (GLubyte a0, GLubyte a1, GLubyte a2, GLubyte a3, GLfloat a4, GLfloat a5) nothrow {
  glColor4ubVertex2fSUN = cast(glbfn_glColor4ubVertex2fSUN)glGetProcAddress(`glColor4ubVertex2fSUN`);
  if (glColor4ubVertex2fSUN is null) assert(0, `OpenGL function 'glColor4ubVertex2fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4ubVertex2fSUN'\n"); }
  glColor4ubVertex2fSUN(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glColor4ubVertex2fvSUN glColor4ubVertex2fvSUN = function void (const(GLubyte)* a0, const(GLfloat)* a1) nothrow {
  glColor4ubVertex2fvSUN = cast(glbfn_glColor4ubVertex2fvSUN)glGetProcAddress(`glColor4ubVertex2fvSUN`);
  if (glColor4ubVertex2fvSUN is null) assert(0, `OpenGL function 'glColor4ubVertex2fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4ubVertex2fvSUN'\n"); }
  glColor4ubVertex2fvSUN(a0,a1,);
};
__gshared glbfn_glColor4ubVertex3fSUN glColor4ubVertex3fSUN = function void (GLubyte a0, GLubyte a1, GLubyte a2, GLubyte a3, GLfloat a4, GLfloat a5, GLfloat a6) nothrow {
  glColor4ubVertex3fSUN = cast(glbfn_glColor4ubVertex3fSUN)glGetProcAddress(`glColor4ubVertex3fSUN`);
  if (glColor4ubVertex3fSUN is null) assert(0, `OpenGL function 'glColor4ubVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4ubVertex3fSUN'\n"); }
  glColor4ubVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glColor4ubVertex3fvSUN glColor4ubVertex3fvSUN = function void (const(GLubyte)* a0, const(GLfloat)* a1) nothrow {
  glColor4ubVertex3fvSUN = cast(glbfn_glColor4ubVertex3fvSUN)glGetProcAddress(`glColor4ubVertex3fvSUN`);
  if (glColor4ubVertex3fvSUN is null) assert(0, `OpenGL function 'glColor4ubVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4ubVertex3fvSUN'\n"); }
  glColor4ubVertex3fvSUN(a0,a1,);
};
__gshared glbfn_glColor3fVertex3fSUN glColor3fVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glColor3fVertex3fSUN = cast(glbfn_glColor3fVertex3fSUN)glGetProcAddress(`glColor3fVertex3fSUN`);
  if (glColor3fVertex3fSUN is null) assert(0, `OpenGL function 'glColor3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3fVertex3fSUN'\n"); }
  glColor3fVertex3fSUN(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glColor3fVertex3fvSUN glColor3fVertex3fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1) nothrow {
  glColor3fVertex3fvSUN = cast(glbfn_glColor3fVertex3fvSUN)glGetProcAddress(`glColor3fVertex3fvSUN`);
  if (glColor3fVertex3fvSUN is null) assert(0, `OpenGL function 'glColor3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor3fVertex3fvSUN'\n"); }
  glColor3fVertex3fvSUN(a0,a1,);
};
__gshared glbfn_glNormal3fVertex3fSUN glNormal3fVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glNormal3fVertex3fSUN = cast(glbfn_glNormal3fVertex3fSUN)glGetProcAddress(`glNormal3fVertex3fSUN`);
  if (glNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3fVertex3fSUN'\n"); }
  glNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glNormal3fVertex3fvSUN glNormal3fVertex3fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1) nothrow {
  glNormal3fVertex3fvSUN = cast(glbfn_glNormal3fVertex3fvSUN)glGetProcAddress(`glNormal3fVertex3fvSUN`);
  if (glNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glNormal3fVertex3fvSUN'\n"); }
  glNormal3fVertex3fvSUN(a0,a1,);
};
__gshared glbfn_glColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7, GLfloat a8, GLfloat a9) nothrow {
  glColor4fNormal3fVertex3fSUN = cast(glbfn_glColor4fNormal3fVertex3fSUN)glGetProcAddress(`glColor4fNormal3fVertex3fSUN`);
  if (glColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4fNormal3fVertex3fSUN'\n"); }
  glColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,);
};
__gshared glbfn_glColor4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1, const(GLfloat)* a2) nothrow {
  glColor4fNormal3fVertex3fvSUN = cast(glbfn_glColor4fNormal3fVertex3fvSUN)glGetProcAddress(`glColor4fNormal3fVertex3fvSUN`);
  if (glColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glColor4fNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glColor4fNormal3fVertex3fvSUN'\n"); }
  glColor4fNormal3fVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glTexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4) nothrow {
  glTexCoord2fVertex3fSUN = cast(glbfn_glTexCoord2fVertex3fSUN)glGetProcAddress(`glTexCoord2fVertex3fSUN`);
  if (glTexCoord2fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fVertex3fSUN'\n"); }
  glTexCoord2fVertex3fSUN(a0,a1,a2,a3,a4,);
};
__gshared glbfn_glTexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1) nothrow {
  glTexCoord2fVertex3fvSUN = cast(glbfn_glTexCoord2fVertex3fvSUN)glGetProcAddress(`glTexCoord2fVertex3fvSUN`);
  if (glTexCoord2fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fVertex3fvSUN'\n"); }
  glTexCoord2fVertex3fvSUN(a0,a1,);
};
__gshared glbfn_glTexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7) nothrow {
  glTexCoord4fVertex4fSUN = cast(glbfn_glTexCoord4fVertex4fSUN)glGetProcAddress(`glTexCoord4fVertex4fSUN`);
  if (glTexCoord4fVertex4fSUN is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4fVertex4fSUN'\n"); }
  glTexCoord4fVertex4fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1) nothrow {
  glTexCoord4fVertex4fvSUN = cast(glbfn_glTexCoord4fVertex4fvSUN)glGetProcAddress(`glTexCoord4fVertex4fvSUN`);
  if (glTexCoord4fVertex4fvSUN is null) assert(0, `OpenGL function 'glTexCoord4fVertex4fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4fVertex4fvSUN'\n"); }
  glTexCoord4fVertex4fvSUN(a0,a1,);
};
__gshared glbfn_glTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLubyte a2, GLubyte a3, GLubyte a4, GLubyte a5, GLfloat a6, GLfloat a7, GLfloat a8) nothrow {
  glTexCoord2fColor4ubVertex3fSUN = cast(glbfn_glTexCoord2fColor4ubVertex3fSUN)glGetProcAddress(`glTexCoord2fColor4ubVertex3fSUN`);
  if (glTexCoord2fColor4ubVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fColor4ubVertex3fSUN'\n"); }
  glTexCoord2fColor4ubVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glTexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN = function void (const(GLfloat)* a0, const(GLubyte)* a1, const(GLfloat)* a2) nothrow {
  glTexCoord2fColor4ubVertex3fvSUN = cast(glbfn_glTexCoord2fColor4ubVertex3fvSUN)glGetProcAddress(`glTexCoord2fColor4ubVertex3fvSUN`);
  if (glTexCoord2fColor4ubVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4ubVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fColor4ubVertex3fvSUN'\n"); }
  glTexCoord2fColor4ubVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7) nothrow {
  glTexCoord2fColor3fVertex3fSUN = cast(glbfn_glTexCoord2fColor3fVertex3fSUN)glGetProcAddress(`glTexCoord2fColor3fVertex3fSUN`);
  if (glTexCoord2fColor3fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fColor3fVertex3fSUN'\n"); }
  glTexCoord2fColor3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1, const(GLfloat)* a2) nothrow {
  glTexCoord2fColor3fVertex3fvSUN = cast(glbfn_glTexCoord2fColor3fVertex3fvSUN)glGetProcAddress(`glTexCoord2fColor3fVertex3fvSUN`);
  if (glTexCoord2fColor3fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fColor3fVertex3fvSUN'\n"); }
  glTexCoord2fColor3fVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7) nothrow {
  glTexCoord2fNormal3fVertex3fSUN = cast(glbfn_glTexCoord2fNormal3fVertex3fSUN)glGetProcAddress(`glTexCoord2fNormal3fVertex3fSUN`);
  if (glTexCoord2fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fNormal3fVertex3fSUN'\n"); }
  glTexCoord2fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glTexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1, const(GLfloat)* a2) nothrow {
  glTexCoord2fNormal3fVertex3fvSUN = cast(glbfn_glTexCoord2fNormal3fVertex3fvSUN)glGetProcAddress(`glTexCoord2fNormal3fVertex3fvSUN`);
  if (glTexCoord2fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fNormal3fVertex3fvSUN'\n"); }
  glTexCoord2fNormal3fVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7, GLfloat a8, GLfloat a9, GLfloat a10, GLfloat a11) nothrow {
  glTexCoord2fColor4fNormal3fVertex3fSUN = cast(glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN)glGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (glTexCoord2fColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fColor4fNormal3fVertex3fSUN'\n"); }
  glTexCoord2fColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,);
};
__gshared glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1, const(GLfloat)* a2, const(GLfloat)* a3) nothrow {
  glTexCoord2fColor4fNormal3fVertex3fvSUN = cast(glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN)glGetProcAddress(`glTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (glTexCoord2fColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord2fColor4fNormal3fVertex3fvSUN'\n"); }
  glTexCoord2fColor4fNormal3fVertex3fvSUN(a0,a1,a2,a3,);
};
__gshared glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN = function void (GLfloat a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7, GLfloat a8, GLfloat a9, GLfloat a10, GLfloat a11, GLfloat a12, GLfloat a13, GLfloat a14) nothrow {
  glTexCoord4fColor4fNormal3fVertex4fSUN = cast(glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN)glGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fSUN`);
  if (glTexCoord4fColor4fNormal3fVertex4fSUN is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4fColor4fNormal3fVertex4fSUN'\n"); }
  glTexCoord4fColor4fNormal3fVertex4fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,);
};
__gshared glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN = function void (const(GLfloat)* a0, const(GLfloat)* a1, const(GLfloat)* a2, const(GLfloat)* a3) nothrow {
  glTexCoord4fColor4fNormal3fVertex4fvSUN = cast(glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN)glGetProcAddress(`glTexCoord4fColor4fNormal3fVertex4fvSUN`);
  if (glTexCoord4fColor4fNormal3fVertex4fvSUN is null) assert(0, `OpenGL function 'glTexCoord4fColor4fNormal3fVertex4fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glTexCoord4fColor4fNormal3fVertex4fvSUN'\n"); }
  glTexCoord4fColor4fNormal3fVertex4fvSUN(a0,a1,a2,a3,);
};
__gshared glbfn_glReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3) nothrow {
  glReplacementCodeuiVertex3fSUN = cast(glbfn_glReplacementCodeuiVertex3fSUN)glGetProcAddress(`glReplacementCodeuiVertex3fSUN`);
  if (glReplacementCodeuiVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiVertex3fSUN'\n"); }
  glReplacementCodeuiVertex3fSUN(a0,a1,a2,a3,);
};
__gshared glbfn_glReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN = function void (const(GLuint)* a0, const(GLfloat)* a1) nothrow {
  glReplacementCodeuiVertex3fvSUN = cast(glbfn_glReplacementCodeuiVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiVertex3fvSUN`);
  if (glReplacementCodeuiVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiVertex3fvSUN'\n"); }
  glReplacementCodeuiVertex3fvSUN(a0,a1,);
};
__gshared glbfn_glReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN = function void (GLuint a0, GLubyte a1, GLubyte a2, GLubyte a3, GLubyte a4, GLfloat a5, GLfloat a6, GLfloat a7) nothrow {
  glReplacementCodeuiColor4ubVertex3fSUN = cast(glbfn_glReplacementCodeuiColor4ubVertex3fSUN)glGetProcAddress(`glReplacementCodeuiColor4ubVertex3fSUN`);
  if (glReplacementCodeuiColor4ubVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiColor4ubVertex3fSUN'\n"); }
  glReplacementCodeuiColor4ubVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,);
};
__gshared glbfn_glReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN = function void (const(GLuint)* a0, const(GLubyte)* a1, const(GLfloat)* a2) nothrow {
  glReplacementCodeuiColor4ubVertex3fvSUN = cast(glbfn_glReplacementCodeuiColor4ubVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiColor4ubVertex3fvSUN`);
  if (glReplacementCodeuiColor4ubVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4ubVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiColor4ubVertex3fvSUN'\n"); }
  glReplacementCodeuiColor4ubVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6) nothrow {
  glReplacementCodeuiColor3fVertex3fSUN = cast(glbfn_glReplacementCodeuiColor3fVertex3fSUN)glGetProcAddress(`glReplacementCodeuiColor3fVertex3fSUN`);
  if (glReplacementCodeuiColor3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiColor3fVertex3fSUN'\n"); }
  glReplacementCodeuiColor3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN = function void (const(GLuint)* a0, const(GLfloat)* a1, const(GLfloat)* a2) nothrow {
  glReplacementCodeuiColor3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiColor3fVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiColor3fVertex3fvSUN`);
  if (glReplacementCodeuiColor3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiColor3fVertex3fvSUN'\n"); }
  glReplacementCodeuiColor3fVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6) nothrow {
  glReplacementCodeuiNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiNormal3fVertex3fSUN)glGetProcAddress(`glReplacementCodeuiNormal3fVertex3fSUN`);
  if (glReplacementCodeuiNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiNormal3fVertex3fSUN'\n"); }
  glReplacementCodeuiNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,);
};
__gshared glbfn_glReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN = function void (const(GLuint)* a0, const(GLfloat)* a1, const(GLfloat)* a2) nothrow {
  glReplacementCodeuiNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiNormal3fVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiNormal3fVertex3fvSUN'\n"); }
  glReplacementCodeuiNormal3fVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7, GLfloat a8, GLfloat a9, GLfloat a10) nothrow {
  glReplacementCodeuiColor4fNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN)glGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fSUN`);
  if (glReplacementCodeuiColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiColor4fNormal3fVertex3fSUN'\n"); }
  glReplacementCodeuiColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,);
};
__gshared glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN = function void (const(GLuint)* a0, const(GLfloat)* a1, const(GLfloat)* a2, const(GLfloat)* a3) nothrow {
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiColor4fNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiColor4fNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiColor4fNormal3fVertex3fvSUN'\n"); }
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN(a0,a1,a2,a3,);
};
__gshared glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5) nothrow {
  glReplacementCodeuiTexCoord2fVertex3fSUN = cast(glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN)glGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fSUN`);
  if (glReplacementCodeuiTexCoord2fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiTexCoord2fVertex3fSUN'\n"); }
  glReplacementCodeuiTexCoord2fVertex3fSUN(a0,a1,a2,a3,a4,a5,);
};
__gshared glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN = function void (const(GLuint)* a0, const(GLfloat)* a1, const(GLfloat)* a2) nothrow {
  glReplacementCodeuiTexCoord2fVertex3fvSUN = cast(glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiTexCoord2fVertex3fvSUN`);
  if (glReplacementCodeuiTexCoord2fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiTexCoord2fVertex3fvSUN'\n"); }
  glReplacementCodeuiTexCoord2fVertex3fvSUN(a0,a1,a2,);
};
__gshared glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7, GLfloat a8) nothrow {
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)glGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN`);
  if (glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN'\n"); }
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,);
};
__gshared glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = function void (const(GLuint)* a0, const(GLfloat)* a1, const(GLfloat)* a2, const(GLfloat)* a3) nothrow {
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN'\n"); }
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(a0,a1,a2,a3,);
};
__gshared glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = function void (GLuint a0, GLfloat a1, GLfloat a2, GLfloat a3, GLfloat a4, GLfloat a5, GLfloat a6, GLfloat a7, GLfloat a8, GLfloat a9, GLfloat a10, GLfloat a11, GLfloat a12) nothrow {
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = cast(glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)glGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN`);
  if (glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN'\n"); }
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,);
};
__gshared glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = function void (const(GLuint)* a0, const(GLfloat)* a1, const(GLfloat)* a2, const(GLfloat)* a3, const(GLfloat)* a4) nothrow {
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = cast(glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)glGetProcAddress(`glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN`);
  if (glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN is null) assert(0, `OpenGL function 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN' not found!`);
  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, "GLBIND: 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN'\n"); }
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(a0,a1,a2,a3,a4,);
};


public void glbindLoadFunctions () {}

