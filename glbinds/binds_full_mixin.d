// WTFPL or Public Domain, on your choice
module iv.glbinds.binds_full_mixin /*is aliced*/;
//import iv.alice;

// lazy loading
//version = glbind_lazy_load;

// show loaded functions
//version = glbind_debug;


//public import arsd.simpledisplay;
// ////////////////////////////////////////////////////////////////////////// //
nothrow @nogc {
version(Windows) {
  pragma(lib, "opengl32");
  private void* glbindGetProcAddress (const(char)* name) {
    import core.sys.windows.wingdi : wglGetProcAddress;
    void* res = wglGetProcAddress(name);
    if (res is null) {
      import core.sys.windows.windef, core.sys.windows.winbase;
      static HINSTANCE dll = null;
      if (dll is null) {
        dll = LoadLibraryA("opengl32.dll");
        if (dll is null) return null; // <32, but idc
      }
      return GetProcAddress(dll, name);
    }
    return res;
  }
} else {
  pragma(lib, "GL");
  extern(C) {
    void* glXGetProcAddress (const(char)* name);
    alias glbindGetProcAddress = glXGetProcAddress;
  }
}

public bool glHasFunction (const(char)[] name) {
  if (name.length == 0 || name.length > 255) return false; // arbitrary limit
  char[256] xname = 0;
  xname[0..name.length] = name[];
  return (glbindGetProcAddress(xname.ptr) !is null);
}

// convenient template checker
public bool glHasFunc(string name) () {
  static int flag = -1;
  if (flag < 0) flag = (glHasFunction(name) ? 1 : 0);
  return (flag == 1);
}
}


// ////////////////////////////////////////////////////////////////////////// //
extern(System) nothrow @nogc {

alias GLvoid = void;
alias GLintptr = ptrdiff_t;
alias GLsizei = int;
alias GLchar = char;
alias GLcharARB = byte;
alias GLushort = ushort;
alias GLint64EXT = long;
alias GLshort = short;
alias GLuint64 = ulong;
alias GLhalfARB = ushort;
alias GLubyte = ubyte;
alias GLdouble = double;
alias GLhandleARB = uint;
alias GLint64 = long;
alias GLenum = uint;
alias GLeglImageOES = void*;
alias GLintptrARB = ptrdiff_t;
alias GLsizeiptr = ptrdiff_t;
alias GLint = int;
alias GLboolean = ubyte;
alias GLbitfield = uint;
alias GLsizeiptrARB = ptrdiff_t;
alias GLfloat = float;
alias GLuint64EXT = ulong;
alias GLclampf = float;
alias GLbyte = byte;
alias GLclampd = double;
alias GLuint = uint;
alias GLvdpauSurfaceNV = ptrdiff_t;
alias GLfixed = int;
alias GLhalf = ushort;
alias GLclampx = int;
alias GLhalfNV = ushort;
//struct ___GLsync; alias __GLsync = ___GLsync*;
//alias GLsync = __GLsync*;
//struct __cl_context; alias _cl_context = __cl_context*;
//struct __cl_event; alias _cl_event = __cl_event*;

enum ubyte GL_FALSE = 0;
enum ubyte GL_TRUE = 1;
enum uint GL_NO_ERROR = 0;
enum uint GL_NONE = 0;
enum uint GL_ZERO = 0;
enum uint GL_ONE = 1;
enum uint GL_NONE_OES = 0;
enum uint GL_INVALID_INDEX = 0xFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
enum ulong GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
enum uint GL_VERSION_ES_CL_1_0 = 1;
enum uint GL_VERSION_ES_CM_1_1 = 1;
enum uint GL_VERSION_ES_CL_1_1 = 1;
enum uint GL_DEPTH_BUFFER_BIT = 0x00000100;
enum uint GL_STENCIL_BUFFER_BIT = 0x00000400;
enum uint GL_COLOR_BUFFER_BIT = 0x00004000;
enum uint GL_POINTS = 0x0000;
enum uint GL_LINES = 0x0001;
enum uint GL_LINE_LOOP = 0x0002;
enum uint GL_LINE_STRIP = 0x0003;
enum uint GL_TRIANGLES = 0x0004;
enum uint GL_TRIANGLE_STRIP = 0x0005;
enum uint GL_TRIANGLE_FAN = 0x0006;
enum uint GL_QUADS = 0x0007;
enum uint GL_NEVER = 0x0200;
enum uint GL_LESS = 0x0201;
enum uint GL_EQUAL = 0x0202;
enum uint GL_LEQUAL = 0x0203;
enum uint GL_GREATER = 0x0204;
enum uint GL_NOTEQUAL = 0x0205;
enum uint GL_GEQUAL = 0x0206;
enum uint GL_ALWAYS = 0x0207;
enum uint GL_SRC_COLOR = 0x0300;
enum uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum uint GL_SRC_ALPHA = 0x0302;
enum uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum uint GL_DST_ALPHA = 0x0304;
enum uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum uint GL_DST_COLOR = 0x0306;
enum uint GL_ONE_MINUS_DST_COLOR = 0x0307;
enum uint GL_SRC_ALPHA_SATURATE = 0x0308;
enum uint GL_FRONT_LEFT = 0x0400;
enum uint GL_FRONT_RIGHT = 0x0401;
enum uint GL_BACK_LEFT = 0x0402;
enum uint GL_BACK_RIGHT = 0x0403;
enum uint GL_FRONT = 0x0404;
enum uint GL_BACK = 0x0405;
enum uint GL_LEFT = 0x0406;
enum uint GL_RIGHT = 0x0407;
enum uint GL_FRONT_AND_BACK = 0x0408;
enum uint GL_INVALID_ENUM = 0x0500;
enum uint GL_INVALID_VALUE = 0x0501;
enum uint GL_INVALID_OPERATION = 0x0502;
enum uint GL_OUT_OF_MEMORY = 0x0505;
enum uint GL_CW = 0x0900;
enum uint GL_CCW = 0x0901;
enum uint GL_POINT_SIZE = 0x0B11;
enum uint GL_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_LINE_SMOOTH = 0x0B20;
enum uint GL_LINE_WIDTH = 0x0B21;
enum uint GL_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_POLYGON_MODE = 0x0B40;
enum uint GL_POLYGON_SMOOTH = 0x0B41;
enum uint GL_CULL_FACE = 0x0B44;
enum uint GL_CULL_FACE_MODE = 0x0B45;
enum uint GL_FRONT_FACE = 0x0B46;
enum uint GL_DEPTH_RANGE = 0x0B70;
enum uint GL_DEPTH_TEST = 0x0B71;
enum uint GL_DEPTH_WRITEMASK = 0x0B72;
enum uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum uint GL_DEPTH_FUNC = 0x0B74;
enum uint GL_STENCIL_TEST = 0x0B90;
enum uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum uint GL_STENCIL_FUNC = 0x0B92;
enum uint GL_STENCIL_VALUE_MASK = 0x0B93;
enum uint GL_STENCIL_FAIL = 0x0B94;
enum uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum uint GL_STENCIL_REF = 0x0B97;
enum uint GL_STENCIL_WRITEMASK = 0x0B98;
enum uint GL_VIEWPORT = 0x0BA2;
enum uint GL_DITHER = 0x0BD0;
enum uint GL_BLEND_DST = 0x0BE0;
enum uint GL_BLEND_SRC = 0x0BE1;
enum uint GL_BLEND = 0x0BE2;
enum uint GL_LOGIC_OP_MODE = 0x0BF0;
enum uint GL_COLOR_LOGIC_OP = 0x0BF2;
enum uint GL_DRAW_BUFFER = 0x0C01;
enum uint GL_READ_BUFFER = 0x0C02;
enum uint GL_SCISSOR_BOX = 0x0C10;
enum uint GL_SCISSOR_TEST = 0x0C11;
enum uint GL_COLOR_CLEAR_VALUE = 0x0C22;
enum uint GL_COLOR_WRITEMASK = 0x0C23;
enum uint GL_DOUBLEBUFFER = 0x0C32;
enum uint GL_STEREO = 0x0C33;
enum uint GL_LINE_SMOOTH_HINT = 0x0C52;
enum uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
enum uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
enum uint GL_UNPACK_LSB_FIRST = 0x0CF1;
enum uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum uint GL_UNPACK_ALIGNMENT = 0x0CF5;
enum uint GL_PACK_SWAP_BYTES = 0x0D00;
enum uint GL_PACK_LSB_FIRST = 0x0D01;
enum uint GL_PACK_ROW_LENGTH = 0x0D02;
enum uint GL_PACK_SKIP_ROWS = 0x0D03;
enum uint GL_PACK_SKIP_PIXELS = 0x0D04;
enum uint GL_PACK_ALIGNMENT = 0x0D05;
enum uint GL_MAX_TEXTURE_SIZE = 0x0D33;
enum uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum uint GL_SUBPIXEL_BITS = 0x0D50;
enum uint GL_TEXTURE_1D = 0x0DE0;
enum uint GL_TEXTURE_2D = 0x0DE1;
enum uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum uint GL_POLYGON_OFFSET_POINT = 0x2A01;
enum uint GL_POLYGON_OFFSET_LINE = 0x2A02;
enum uint GL_POLYGON_OFFSET_FILL = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum uint GL_TEXTURE_BINDING_1D = 0x8068;
enum uint GL_TEXTURE_BINDING_2D = 0x8069;
enum uint GL_TEXTURE_WIDTH = 0x1000;
enum uint GL_TEXTURE_HEIGHT = 0x1001;
enum uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum uint GL_TEXTURE_BORDER_COLOR = 0x1004;
enum uint GL_TEXTURE_RED_SIZE = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum uint GL_DONT_CARE = 0x1100;
enum uint GL_FASTEST = 0x1101;
enum uint GL_NICEST = 0x1102;
enum uint GL_BYTE = 0x1400;
enum uint GL_UNSIGNED_BYTE = 0x1401;
enum uint GL_SHORT = 0x1402;
enum uint GL_UNSIGNED_SHORT = 0x1403;
enum uint GL_INT = 0x1404;
enum uint GL_UNSIGNED_INT = 0x1405;
enum uint GL_FLOAT = 0x1406;
enum uint GL_DOUBLE = 0x140A;
enum uint GL_STACK_OVERFLOW = 0x0503;
enum uint GL_STACK_UNDERFLOW = 0x0504;
enum uint GL_CLEAR = 0x1500;
enum uint GL_AND = 0x1501;
enum uint GL_AND_REVERSE = 0x1502;
enum uint GL_COPY = 0x1503;
enum uint GL_AND_INVERTED = 0x1504;
enum uint GL_NOOP = 0x1505;
enum uint GL_XOR = 0x1506;
enum uint GL_OR = 0x1507;
enum uint GL_NOR = 0x1508;
enum uint GL_EQUIV = 0x1509;
enum uint GL_INVERT = 0x150A;
enum uint GL_OR_REVERSE = 0x150B;
enum uint GL_COPY_INVERTED = 0x150C;
enum uint GL_OR_INVERTED = 0x150D;
enum uint GL_NAND = 0x150E;
enum uint GL_SET = 0x150F;
enum uint GL_TEXTURE = 0x1702;
enum uint GL_COLOR = 0x1800;
enum uint GL_DEPTH = 0x1801;
enum uint GL_STENCIL = 0x1802;
enum uint GL_STENCIL_INDEX = 0x1901;
enum uint GL_DEPTH_COMPONENT = 0x1902;
enum uint GL_RED = 0x1903;
enum uint GL_GREEN = 0x1904;
enum uint GL_BLUE = 0x1905;
enum uint GL_ALPHA = 0x1906;
enum uint GL_RGB = 0x1907;
enum uint GL_RGBA = 0x1908;
enum uint GL_POINT = 0x1B00;
enum uint GL_LINE = 0x1B01;
enum uint GL_FILL = 0x1B02;
enum uint GL_KEEP = 0x1E00;
enum uint GL_REPLACE = 0x1E01;
enum uint GL_INCR = 0x1E02;
enum uint GL_DECR = 0x1E03;
enum uint GL_VENDOR = 0x1F00;
enum uint GL_RENDERER = 0x1F01;
enum uint GL_VERSION = 0x1F02;
enum uint GL_EXTENSIONS = 0x1F03;
enum uint GL_NEAREST = 0x2600;
enum uint GL_LINEAR = 0x2601;
enum uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum uint GL_TEXTURE_MAG_FILTER = 0x2800;
enum uint GL_TEXTURE_MIN_FILTER = 0x2801;
enum uint GL_TEXTURE_WRAP_S = 0x2802;
enum uint GL_TEXTURE_WRAP_T = 0x2803;
enum uint GL_PROXY_TEXTURE_1D = 0x8063;
enum uint GL_PROXY_TEXTURE_2D = 0x8064;
enum uint GL_REPEAT = 0x2901;
enum uint GL_R3_G3_B2 = 0x2A10;
enum uint GL_RGB4 = 0x804F;
enum uint GL_RGB5 = 0x8050;
enum uint GL_RGB8 = 0x8051;
enum uint GL_RGB10 = 0x8052;
enum uint GL_RGB12 = 0x8053;
enum uint GL_RGB16 = 0x8054;
enum uint GL_RGBA2 = 0x8055;
enum uint GL_RGBA4 = 0x8056;
enum uint GL_RGB5_A1 = 0x8057;
enum uint GL_RGBA8 = 0x8058;
enum uint GL_RGB10_A2 = 0x8059;
enum uint GL_RGBA12 = 0x805A;
enum uint GL_RGBA16 = 0x805B;
enum uint GL_CURRENT_BIT = 0x00000001;
enum uint GL_POINT_BIT = 0x00000002;
enum uint GL_LINE_BIT = 0x00000004;
enum uint GL_POLYGON_BIT = 0x00000008;
enum uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
enum uint GL_PIXEL_MODE_BIT = 0x00000020;
enum uint GL_LIGHTING_BIT = 0x00000040;
enum uint GL_FOG_BIT = 0x00000080;
enum uint GL_ACCUM_BUFFER_BIT = 0x00000200;
enum uint GL_VIEWPORT_BIT = 0x00000800;
enum uint GL_TRANSFORM_BIT = 0x00001000;
enum uint GL_ENABLE_BIT = 0x00002000;
enum uint GL_HINT_BIT = 0x00008000;
enum uint GL_EVAL_BIT = 0x00010000;
enum uint GL_LIST_BIT = 0x00020000;
enum uint GL_TEXTURE_BIT = 0x00040000;
enum uint GL_SCISSOR_BIT = 0x00080000;
enum uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
enum uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
enum uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
enum uint GL_QUAD_STRIP = 0x0008;
enum uint GL_POLYGON = 0x0009;
enum uint GL_ACCUM = 0x0100;
enum uint GL_LOAD = 0x0101;
enum uint GL_RETURN = 0x0102;
enum uint GL_MULT = 0x0103;
enum uint GL_ADD = 0x0104;
enum uint GL_AUX0 = 0x0409;
enum uint GL_AUX1 = 0x040A;
enum uint GL_AUX2 = 0x040B;
enum uint GL_AUX3 = 0x040C;
enum uint GL_2D = 0x0600;
enum uint GL_3D = 0x0601;
enum uint GL_3D_COLOR = 0x0602;
enum uint GL_3D_COLOR_TEXTURE = 0x0603;
enum uint GL_4D_COLOR_TEXTURE = 0x0604;
enum uint GL_PASS_THROUGH_TOKEN = 0x0700;
enum uint GL_POINT_TOKEN = 0x0701;
enum uint GL_LINE_TOKEN = 0x0702;
enum uint GL_POLYGON_TOKEN = 0x0703;
enum uint GL_BITMAP_TOKEN = 0x0704;
enum uint GL_DRAW_PIXEL_TOKEN = 0x0705;
enum uint GL_COPY_PIXEL_TOKEN = 0x0706;
enum uint GL_LINE_RESET_TOKEN = 0x0707;
enum uint GL_EXP = 0x0800;
enum uint GL_EXP2 = 0x0801;
enum uint GL_COEFF = 0x0A00;
enum uint GL_ORDER = 0x0A01;
enum uint GL_DOMAIN = 0x0A02;
enum uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
enum uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
enum uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
enum uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
enum uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
enum uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
enum uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
enum uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
enum uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
enum uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
enum uint GL_VERTEX_ARRAY_POINTER = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
enum uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
enum uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
enum uint GL_CURRENT_COLOR = 0x0B00;
enum uint GL_CURRENT_INDEX = 0x0B01;
enum uint GL_CURRENT_NORMAL = 0x0B02;
enum uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
enum uint GL_CURRENT_RASTER_COLOR = 0x0B04;
enum uint GL_CURRENT_RASTER_INDEX = 0x0B05;
enum uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
enum uint GL_CURRENT_RASTER_POSITION = 0x0B07;
enum uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
enum uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
enum uint GL_POINT_SMOOTH = 0x0B10;
enum uint GL_LINE_STIPPLE = 0x0B24;
enum uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
enum uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
enum uint GL_LIST_MODE = 0x0B30;
enum uint GL_MAX_LIST_NESTING = 0x0B31;
enum uint GL_LIST_BASE = 0x0B32;
enum uint GL_LIST_INDEX = 0x0B33;
enum uint GL_POLYGON_STIPPLE = 0x0B42;
enum uint GL_EDGE_FLAG = 0x0B43;
enum uint GL_LIGHTING = 0x0B50;
enum uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
enum uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
enum uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
enum uint GL_SHADE_MODEL = 0x0B54;
enum uint GL_COLOR_MATERIAL_FACE = 0x0B55;
enum uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
enum uint GL_COLOR_MATERIAL = 0x0B57;
enum uint GL_FOG = 0x0B60;
enum uint GL_FOG_INDEX = 0x0B61;
enum uint GL_FOG_DENSITY = 0x0B62;
enum uint GL_FOG_START = 0x0B63;
enum uint GL_FOG_END = 0x0B64;
enum uint GL_FOG_MODE = 0x0B65;
enum uint GL_FOG_COLOR = 0x0B66;
enum uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
enum uint GL_MATRIX_MODE = 0x0BA0;
enum uint GL_NORMALIZE = 0x0BA1;
enum uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
enum uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
enum uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
enum uint GL_MODELVIEW_MATRIX = 0x0BA6;
enum uint GL_PROJECTION_MATRIX = 0x0BA7;
enum uint GL_TEXTURE_MATRIX = 0x0BA8;
enum uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
enum uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
enum uint GL_ALPHA_TEST = 0x0BC0;
enum uint GL_ALPHA_TEST_FUNC = 0x0BC1;
enum uint GL_ALPHA_TEST_REF = 0x0BC2;
enum uint GL_INDEX_LOGIC_OP = 0x0BF1;
enum uint GL_LOGIC_OP = 0x0BF1;
enum uint GL_AUX_BUFFERS = 0x0C00;
enum uint GL_INDEX_CLEAR_VALUE = 0x0C20;
enum uint GL_INDEX_WRITEMASK = 0x0C21;
enum uint GL_INDEX_MODE = 0x0C30;
enum uint GL_RGBA_MODE = 0x0C31;
enum uint GL_RENDER_MODE = 0x0C40;
enum uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
enum uint GL_POINT_SMOOTH_HINT = 0x0C51;
enum uint GL_FOG_HINT = 0x0C54;
enum uint GL_TEXTURE_GEN_S = 0x0C60;
enum uint GL_TEXTURE_GEN_T = 0x0C61;
enum uint GL_TEXTURE_GEN_R = 0x0C62;
enum uint GL_TEXTURE_GEN_Q = 0x0C63;
enum uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
enum uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
enum uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
enum uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
enum uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
enum uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
enum uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
enum uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
enum uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
enum uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
enum uint GL_MAP_COLOR = 0x0D10;
enum uint GL_MAP_STENCIL = 0x0D11;
enum uint GL_INDEX_SHIFT = 0x0D12;
enum uint GL_INDEX_OFFSET = 0x0D13;
enum uint GL_RED_SCALE = 0x0D14;
enum uint GL_RED_BIAS = 0x0D15;
enum uint GL_ZOOM_X = 0x0D16;
enum uint GL_ZOOM_Y = 0x0D17;
enum uint GL_GREEN_SCALE = 0x0D18;
enum uint GL_GREEN_BIAS = 0x0D19;
enum uint GL_BLUE_SCALE = 0x0D1A;
enum uint GL_BLUE_BIAS = 0x0D1B;
enum uint GL_ALPHA_SCALE = 0x0D1C;
enum uint GL_ALPHA_BIAS = 0x0D1D;
enum uint GL_DEPTH_SCALE = 0x0D1E;
enum uint GL_DEPTH_BIAS = 0x0D1F;
enum uint GL_MAX_EVAL_ORDER = 0x0D30;
enum uint GL_MAX_LIGHTS = 0x0D31;
enum uint GL_MAX_CLIP_PLANES = 0x0D32;
enum uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
enum uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
enum uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
enum uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
enum uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
enum uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
enum uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
enum uint GL_INDEX_BITS = 0x0D51;
enum uint GL_RED_BITS = 0x0D52;
enum uint GL_GREEN_BITS = 0x0D53;
enum uint GL_BLUE_BITS = 0x0D54;
enum uint GL_ALPHA_BITS = 0x0D55;
enum uint GL_DEPTH_BITS = 0x0D56;
enum uint GL_STENCIL_BITS = 0x0D57;
enum uint GL_ACCUM_RED_BITS = 0x0D58;
enum uint GL_ACCUM_GREEN_BITS = 0x0D59;
enum uint GL_ACCUM_BLUE_BITS = 0x0D5A;
enum uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
enum uint GL_NAME_STACK_DEPTH = 0x0D70;
enum uint GL_AUTO_NORMAL = 0x0D80;
enum uint GL_MAP1_COLOR_4 = 0x0D90;
enum uint GL_MAP1_INDEX = 0x0D91;
enum uint GL_MAP1_NORMAL = 0x0D92;
enum uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
enum uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
enum uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
enum uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
enum uint GL_MAP1_VERTEX_3 = 0x0D97;
enum uint GL_MAP1_VERTEX_4 = 0x0D98;
enum uint GL_MAP2_COLOR_4 = 0x0DB0;
enum uint GL_MAP2_INDEX = 0x0DB1;
enum uint GL_MAP2_NORMAL = 0x0DB2;
enum uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
enum uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
enum uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
enum uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
enum uint GL_MAP2_VERTEX_3 = 0x0DB7;
enum uint GL_MAP2_VERTEX_4 = 0x0DB8;
enum uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
enum uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
enum uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
enum uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
enum uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
enum uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
enum uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
enum uint GL_VERTEX_ARRAY = 0x8074;
enum uint GL_NORMAL_ARRAY = 0x8075;
enum uint GL_COLOR_ARRAY = 0x8076;
enum uint GL_INDEX_ARRAY = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
enum uint GL_NORMAL_ARRAY_TYPE = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
enum uint GL_COLOR_ARRAY_SIZE = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE = 0x8083;
enum uint GL_INDEX_ARRAY_TYPE = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE = 0x8086;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
enum uint GL_TEXTURE_COMPONENTS = 0x1003;
enum uint GL_TEXTURE_BORDER = 0x1005;
enum uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
enum uint GL_TEXTURE_PRIORITY = 0x8066;
enum uint GL_TEXTURE_RESIDENT = 0x8067;
enum uint GL_AMBIENT = 0x1200;
enum uint GL_DIFFUSE = 0x1201;
enum uint GL_SPECULAR = 0x1202;
enum uint GL_POSITION = 0x1203;
enum uint GL_SPOT_DIRECTION = 0x1204;
enum uint GL_SPOT_EXPONENT = 0x1205;
enum uint GL_SPOT_CUTOFF = 0x1206;
enum uint GL_CONSTANT_ATTENUATION = 0x1207;
enum uint GL_LINEAR_ATTENUATION = 0x1208;
enum uint GL_QUADRATIC_ATTENUATION = 0x1209;
enum uint GL_COMPILE = 0x1300;
enum uint GL_COMPILE_AND_EXECUTE = 0x1301;
enum uint GL_2_BYTES = 0x1407;
enum uint GL_3_BYTES = 0x1408;
enum uint GL_4_BYTES = 0x1409;
enum uint GL_EMISSION = 0x1600;
enum uint GL_SHININESS = 0x1601;
enum uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
enum uint GL_COLOR_INDEXES = 0x1603;
enum uint GL_MODELVIEW = 0x1700;
enum uint GL_PROJECTION = 0x1701;
enum uint GL_COLOR_INDEX = 0x1900;
enum uint GL_LUMINANCE = 0x1909;
enum uint GL_LUMINANCE_ALPHA = 0x190A;
enum uint GL_BITMAP = 0x1A00;
enum uint GL_RENDER = 0x1C00;
enum uint GL_FEEDBACK = 0x1C01;
enum uint GL_SELECT = 0x1C02;
enum uint GL_FLAT = 0x1D00;
enum uint GL_SMOOTH = 0x1D01;
enum uint GL_S = 0x2000;
enum uint GL_T = 0x2001;
enum uint GL_R = 0x2002;
enum uint GL_Q = 0x2003;
enum uint GL_MODULATE = 0x2100;
enum uint GL_DECAL = 0x2101;
enum uint GL_TEXTURE_ENV_MODE = 0x2200;
enum uint GL_TEXTURE_ENV_COLOR = 0x2201;
enum uint GL_TEXTURE_ENV = 0x2300;
enum uint GL_EYE_LINEAR = 0x2400;
enum uint GL_OBJECT_LINEAR = 0x2401;
enum uint GL_SPHERE_MAP = 0x2402;
enum uint GL_TEXTURE_GEN_MODE = 0x2500;
enum uint GL_OBJECT_PLANE = 0x2501;
enum uint GL_EYE_PLANE = 0x2502;
enum uint GL_CLAMP = 0x2900;
enum uint GL_ALPHA4 = 0x803B;
enum uint GL_ALPHA8 = 0x803C;
enum uint GL_ALPHA12 = 0x803D;
enum uint GL_ALPHA16 = 0x803E;
enum uint GL_LUMINANCE4 = 0x803F;
enum uint GL_LUMINANCE8 = 0x8040;
enum uint GL_LUMINANCE12 = 0x8041;
enum uint GL_LUMINANCE16 = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4 = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2 = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8 = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4 = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12 = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16 = 0x8048;
enum uint GL_INTENSITY = 0x8049;
enum uint GL_INTENSITY4 = 0x804A;
enum uint GL_INTENSITY8 = 0x804B;
enum uint GL_INTENSITY12 = 0x804C;
enum uint GL_INTENSITY16 = 0x804D;
enum uint GL_V2F = 0x2A20;
enum uint GL_V3F = 0x2A21;
enum uint GL_C4UB_V2F = 0x2A22;
enum uint GL_C4UB_V3F = 0x2A23;
enum uint GL_C3F_V3F = 0x2A24;
enum uint GL_N3F_V3F = 0x2A25;
enum uint GL_C4F_N3F_V3F = 0x2A26;
enum uint GL_T2F_V3F = 0x2A27;
enum uint GL_T4F_V4F = 0x2A28;
enum uint GL_T2F_C4UB_V3F = 0x2A29;
enum uint GL_T2F_C3F_V3F = 0x2A2A;
enum uint GL_T2F_N3F_V3F = 0x2A2B;
enum uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
enum uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
enum uint GL_CLIP_PLANE0 = 0x3000;
enum uint GL_CLIP_PLANE1 = 0x3001;
enum uint GL_CLIP_PLANE2 = 0x3002;
enum uint GL_CLIP_PLANE3 = 0x3003;
enum uint GL_CLIP_PLANE4 = 0x3004;
enum uint GL_CLIP_PLANE5 = 0x3005;
enum uint GL_LIGHT0 = 0x4000;
enum uint GL_LIGHT1 = 0x4001;
enum uint GL_LIGHT2 = 0x4002;
enum uint GL_LIGHT3 = 0x4003;
enum uint GL_LIGHT4 = 0x4004;
enum uint GL_LIGHT5 = 0x4005;
enum uint GL_LIGHT6 = 0x4006;
enum uint GL_LIGHT7 = 0x4007;
enum uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
enum uint GL_TEXTURE_BINDING_3D = 0x806A;
enum uint GL_PACK_SKIP_IMAGES = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum uint GL_TEXTURE_3D = 0x806F;
enum uint GL_PROXY_TEXTURE_3D = 0x8070;
enum uint GL_TEXTURE_DEPTH = 0x8071;
enum uint GL_TEXTURE_WRAP_R = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
enum uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
enum uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
enum uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
enum uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum uint GL_BGR = 0x80E0;
enum uint GL_BGRA = 0x80E1;
enum uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum uint GL_CLAMP_TO_EDGE = 0x812F;
enum uint GL_TEXTURE_MIN_LOD = 0x813A;
enum uint GL_TEXTURE_MAX_LOD = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL = 0x813D;
enum uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
enum uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
enum uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
enum uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
enum uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
enum uint GL_RESCALE_NORMAL = 0x803A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
enum uint GL_SINGLE_COLOR = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
enum uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
enum uint GL_TEXTURE0 = 0x84C0;
enum uint GL_TEXTURE1 = 0x84C1;
enum uint GL_TEXTURE2 = 0x84C2;
enum uint GL_TEXTURE3 = 0x84C3;
enum uint GL_TEXTURE4 = 0x84C4;
enum uint GL_TEXTURE5 = 0x84C5;
enum uint GL_TEXTURE6 = 0x84C6;
enum uint GL_TEXTURE7 = 0x84C7;
enum uint GL_TEXTURE8 = 0x84C8;
enum uint GL_TEXTURE9 = 0x84C9;
enum uint GL_TEXTURE10 = 0x84CA;
enum uint GL_TEXTURE11 = 0x84CB;
enum uint GL_TEXTURE12 = 0x84CC;
enum uint GL_TEXTURE13 = 0x84CD;
enum uint GL_TEXTURE14 = 0x84CE;
enum uint GL_TEXTURE15 = 0x84CF;
enum uint GL_TEXTURE16 = 0x84D0;
enum uint GL_TEXTURE17 = 0x84D1;
enum uint GL_TEXTURE18 = 0x84D2;
enum uint GL_TEXTURE19 = 0x84D3;
enum uint GL_TEXTURE20 = 0x84D4;
enum uint GL_TEXTURE21 = 0x84D5;
enum uint GL_TEXTURE22 = 0x84D6;
enum uint GL_TEXTURE23 = 0x84D7;
enum uint GL_TEXTURE24 = 0x84D8;
enum uint GL_TEXTURE25 = 0x84D9;
enum uint GL_TEXTURE26 = 0x84DA;
enum uint GL_TEXTURE27 = 0x84DB;
enum uint GL_TEXTURE28 = 0x84DC;
enum uint GL_TEXTURE29 = 0x84DD;
enum uint GL_TEXTURE30 = 0x84DE;
enum uint GL_TEXTURE31 = 0x84DF;
enum uint GL_ACTIVE_TEXTURE = 0x84E0;
enum uint GL_MULTISAMPLE = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
enum uint GL_SAMPLE_COVERAGE = 0x80A0;
enum uint GL_SAMPLE_BUFFERS = 0x80A8;
enum uint GL_SAMPLES = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum uint GL_TEXTURE_CUBE_MAP = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum uint GL_COMPRESSED_RGB = 0x84ED;
enum uint GL_COMPRESSED_RGBA = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum uint GL_CLAMP_TO_BORDER = 0x812D;
enum uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS = 0x84E2;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
enum uint GL_MULTISAMPLE_BIT = 0x20000000;
enum uint GL_NORMAL_MAP = 0x8511;
enum uint GL_REFLECTION_MAP = 0x8512;
enum uint GL_COMPRESSED_ALPHA = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY = 0x84EC;
enum uint GL_COMBINE = 0x8570;
enum uint GL_COMBINE_RGB = 0x8571;
enum uint GL_COMBINE_ALPHA = 0x8572;
enum uint GL_SOURCE0_RGB = 0x8580;
enum uint GL_SOURCE1_RGB = 0x8581;
enum uint GL_SOURCE2_RGB = 0x8582;
enum uint GL_SOURCE0_ALPHA = 0x8588;
enum uint GL_SOURCE1_ALPHA = 0x8589;
enum uint GL_SOURCE2_ALPHA = 0x858A;
enum uint GL_OPERAND0_RGB = 0x8590;
enum uint GL_OPERAND1_RGB = 0x8591;
enum uint GL_OPERAND2_RGB = 0x8592;
enum uint GL_OPERAND0_ALPHA = 0x8598;
enum uint GL_OPERAND1_ALPHA = 0x8599;
enum uint GL_OPERAND2_ALPHA = 0x859A;
enum uint GL_RGB_SCALE = 0x8573;
enum uint GL_ADD_SIGNED = 0x8574;
enum uint GL_INTERPOLATE = 0x8575;
enum uint GL_SUBTRACT = 0x84E7;
enum uint GL_CONSTANT = 0x8576;
enum uint GL_PRIMARY_COLOR = 0x8577;
enum uint GL_PREVIOUS = 0x8578;
enum uint GL_DOT3_RGB = 0x86AE;
enum uint GL_DOT3_RGBA = 0x86AF;
enum uint GL_BLEND_DST_RGB = 0x80C8;
enum uint GL_BLEND_SRC_RGB = 0x80C9;
enum uint GL_BLEND_DST_ALPHA = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA = 0x80CB;
enum uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
enum uint GL_DEPTH_COMPONENT16 = 0x81A5;
enum uint GL_DEPTH_COMPONENT24 = 0x81A6;
enum uint GL_DEPTH_COMPONENT32 = 0x81A7;
enum uint GL_MIRRORED_REPEAT = 0x8370;
enum uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum uint GL_TEXTURE_LOD_BIAS = 0x8501;
enum uint GL_INCR_WRAP = 0x8507;
enum uint GL_DECR_WRAP = 0x8508;
enum uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum uint GL_TEXTURE_COMPARE_MODE = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
enum uint GL_POINT_SIZE_MIN = 0x8126;
enum uint GL_POINT_SIZE_MAX = 0x8127;
enum uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
enum uint GL_GENERATE_MIPMAP = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT = 0x8192;
enum uint GL_FOG_COORDINATE_SOURCE = 0x8450;
enum uint GL_FOG_COORDINATE = 0x8451;
enum uint GL_FRAGMENT_DEPTH = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY = 0x8457;
enum uint GL_COLOR_SUM = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY = 0x845E;
enum uint GL_TEXTURE_FILTER_CONTROL = 0x8500;
enum uint GL_DEPTH_TEXTURE_MODE = 0x884B;
enum uint GL_COMPARE_R_TO_TEXTURE = 0x884E;
enum uint GL_FUNC_ADD = 0x8006;
enum uint GL_FUNC_SUBTRACT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
enum uint GL_MIN = 0x8007;
enum uint GL_MAX = 0x8008;
enum uint GL_CONSTANT_COLOR = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum uint GL_CONSTANT_ALPHA = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
enum uint GL_BUFFER_SIZE = 0x8764;
enum uint GL_BUFFER_USAGE = 0x8765;
enum uint GL_QUERY_COUNTER_BITS = 0x8864;
enum uint GL_CURRENT_QUERY = 0x8865;
enum uint GL_QUERY_RESULT = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum uint GL_ARRAY_BUFFER = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum uint GL_READ_ONLY = 0x88B8;
enum uint GL_WRITE_ONLY = 0x88B9;
enum uint GL_READ_WRITE = 0x88BA;
enum uint GL_BUFFER_ACCESS = 0x88BB;
enum uint GL_BUFFER_MAPPED = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER = 0x88BD;
enum uint GL_STREAM_DRAW = 0x88E0;
enum uint GL_STREAM_READ = 0x88E1;
enum uint GL_STREAM_COPY = 0x88E2;
enum uint GL_STATIC_DRAW = 0x88E4;
enum uint GL_STATIC_READ = 0x88E5;
enum uint GL_STATIC_COPY = 0x88E6;
enum uint GL_DYNAMIC_DRAW = 0x88E8;
enum uint GL_DYNAMIC_READ = 0x88E9;
enum uint GL_DYNAMIC_COPY = 0x88EA;
enum uint GL_SAMPLES_PASSED = 0x8914;
enum uint GL_SRC1_ALPHA = 0x8589;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
enum uint GL_FOG_COORD_SRC = 0x8450;
enum uint GL_FOG_COORD = 0x8451;
enum uint GL_CURRENT_FOG_COORD = 0x8453;
enum uint GL_FOG_COORD_ARRAY_TYPE = 0x8454;
enum uint GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
enum uint GL_FOG_COORD_ARRAY_POINTER = 0x8456;
enum uint GL_FOG_COORD_ARRAY = 0x8457;
enum uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
enum uint GL_SRC0_RGB = 0x8580;
enum uint GL_SRC1_RGB = 0x8581;
enum uint GL_SRC2_RGB = 0x8582;
enum uint GL_SRC0_ALPHA = 0x8588;
enum uint GL_SRC2_ALPHA = 0x858A;
enum uint GL_BLEND_EQUATION_RGB = 0x8009;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum uint GL_STENCIL_BACK_FUNC = 0x8800;
enum uint GL_STENCIL_BACK_FAIL = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum uint GL_MAX_DRAW_BUFFERS = 0x8824;
enum uint GL_DRAW_BUFFER0 = 0x8825;
enum uint GL_DRAW_BUFFER1 = 0x8826;
enum uint GL_DRAW_BUFFER2 = 0x8827;
enum uint GL_DRAW_BUFFER3 = 0x8828;
enum uint GL_DRAW_BUFFER4 = 0x8829;
enum uint GL_DRAW_BUFFER5 = 0x882A;
enum uint GL_DRAW_BUFFER6 = 0x882B;
enum uint GL_DRAW_BUFFER7 = 0x882C;
enum uint GL_DRAW_BUFFER8 = 0x882D;
enum uint GL_DRAW_BUFFER9 = 0x882E;
enum uint GL_DRAW_BUFFER10 = 0x882F;
enum uint GL_DRAW_BUFFER11 = 0x8830;
enum uint GL_DRAW_BUFFER12 = 0x8831;
enum uint GL_DRAW_BUFFER13 = 0x8832;
enum uint GL_DRAW_BUFFER14 = 0x8833;
enum uint GL_DRAW_BUFFER15 = 0x8834;
enum uint GL_BLEND_EQUATION_ALPHA = 0x883D;
enum uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum uint GL_FRAGMENT_SHADER = 0x8B30;
enum uint GL_VERTEX_SHADER = 0x8B31;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum uint GL_SHADER_TYPE = 0x8B4F;
enum uint GL_FLOAT_VEC2 = 0x8B50;
enum uint GL_FLOAT_VEC3 = 0x8B51;
enum uint GL_FLOAT_VEC4 = 0x8B52;
enum uint GL_INT_VEC2 = 0x8B53;
enum uint GL_INT_VEC3 = 0x8B54;
enum uint GL_INT_VEC4 = 0x8B55;
enum uint GL_BOOL = 0x8B56;
enum uint GL_BOOL_VEC2 = 0x8B57;
enum uint GL_BOOL_VEC3 = 0x8B58;
enum uint GL_BOOL_VEC4 = 0x8B59;
enum uint GL_FLOAT_MAT2 = 0x8B5A;
enum uint GL_FLOAT_MAT3 = 0x8B5B;
enum uint GL_FLOAT_MAT4 = 0x8B5C;
enum uint GL_SAMPLER_1D = 0x8B5D;
enum uint GL_SAMPLER_2D = 0x8B5E;
enum uint GL_SAMPLER_3D = 0x8B5F;
enum uint GL_SAMPLER_CUBE = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW = 0x8B62;
enum uint GL_DELETE_STATUS = 0x8B80;
enum uint GL_COMPILE_STATUS = 0x8B81;
enum uint GL_LINK_STATUS = 0x8B82;
enum uint GL_VALIDATE_STATUS = 0x8B83;
enum uint GL_INFO_LOG_LENGTH = 0x8B84;
enum uint GL_ATTACHED_SHADERS = 0x8B85;
enum uint GL_ACTIVE_UNIFORMS = 0x8B86;
enum uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum uint GL_CURRENT_PROGRAM = 0x8B8D;
enum uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
enum uint GL_LOWER_LEFT = 0x8CA1;
enum uint GL_UPPER_LEFT = 0x8CA2;
enum uint GL_STENCIL_BACK_REF = 0x8CA3;
enum uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
enum uint GL_POINT_SPRITE = 0x8861;
enum uint GL_COORD_REPLACE = 0x8862;
enum uint GL_MAX_TEXTURE_COORDS = 0x8871;
enum uint GL_PIXEL_PACK_BUFFER = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum uint GL_FLOAT_MAT2x3 = 0x8B65;
enum uint GL_FLOAT_MAT2x4 = 0x8B66;
enum uint GL_FLOAT_MAT3x2 = 0x8B67;
enum uint GL_FLOAT_MAT3x4 = 0x8B68;
enum uint GL_FLOAT_MAT4x2 = 0x8B69;
enum uint GL_FLOAT_MAT4x3 = 0x8B6A;
enum uint GL_SRGB = 0x8C40;
enum uint GL_SRGB8 = 0x8C41;
enum uint GL_SRGB_ALPHA = 0x8C42;
enum uint GL_SRGB8_ALPHA8 = 0x8C43;
enum uint GL_COMPRESSED_SRGB = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
enum uint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
enum uint GL_SLUMINANCE_ALPHA = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
enum uint GL_SLUMINANCE = 0x8C46;
enum uint GL_SLUMINANCE8 = 0x8C47;
enum uint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
enum uint GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum uint GL_CLIP_DISTANCE0 = 0x3000;
enum uint GL_CLIP_DISTANCE1 = 0x3001;
enum uint GL_CLIP_DISTANCE2 = 0x3002;
enum uint GL_CLIP_DISTANCE3 = 0x3003;
enum uint GL_CLIP_DISTANCE4 = 0x3004;
enum uint GL_CLIP_DISTANCE5 = 0x3005;
enum uint GL_CLIP_DISTANCE6 = 0x3006;
enum uint GL_CLIP_DISTANCE7 = 0x3007;
enum uint GL_MAX_CLIP_DISTANCES = 0x0D32;
enum uint GL_MAJOR_VERSION = 0x821B;
enum uint GL_MINOR_VERSION = 0x821C;
enum uint GL_NUM_EXTENSIONS = 0x821D;
enum uint GL_CONTEXT_FLAGS = 0x821E;
enum uint GL_COMPRESSED_RED = 0x8225;
enum uint GL_COMPRESSED_RG = 0x8226;
enum uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
enum uint GL_RGBA32F = 0x8814;
enum uint GL_RGB32F = 0x8815;
enum uint GL_RGBA16F = 0x881A;
enum uint GL_RGB16F = 0x881B;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum uint GL_CLAMP_READ_COLOR = 0x891C;
enum uint GL_FIXED_ONLY = 0x891D;
enum uint GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum uint GL_TEXTURE_1D_ARRAY = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum uint GL_R11F_G11F_B10F = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum uint GL_RGB9_E5 = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum uint GL_PRIMITIVES_GENERATED = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum uint GL_RASTERIZER_DISCARD = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum uint GL_RGBA32UI = 0x8D70;
enum uint GL_RGB32UI = 0x8D71;
enum uint GL_RGBA16UI = 0x8D76;
enum uint GL_RGB16UI = 0x8D77;
enum uint GL_RGBA8UI = 0x8D7C;
enum uint GL_RGB8UI = 0x8D7D;
enum uint GL_RGBA32I = 0x8D82;
enum uint GL_RGB32I = 0x8D83;
enum uint GL_RGBA16I = 0x8D88;
enum uint GL_RGB16I = 0x8D89;
enum uint GL_RGBA8I = 0x8D8E;
enum uint GL_RGB8I = 0x8D8F;
enum uint GL_RED_INTEGER = 0x8D94;
enum uint GL_GREEN_INTEGER = 0x8D95;
enum uint GL_BLUE_INTEGER = 0x8D96;
enum uint GL_RGB_INTEGER = 0x8D98;
enum uint GL_RGBA_INTEGER = 0x8D99;
enum uint GL_BGR_INTEGER = 0x8D9A;
enum uint GL_BGRA_INTEGER = 0x8D9B;
enum uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum uint GL_INT_SAMPLER_1D = 0x8DC9;
enum uint GL_INT_SAMPLER_2D = 0x8DCA;
enum uint GL_INT_SAMPLER_3D = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE = 0x8DCC;
enum uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum uint GL_QUERY_WAIT = 0x8E13;
enum uint GL_QUERY_NO_WAIT = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
enum uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum uint GL_BUFFER_MAP_LENGTH = 0x9120;
enum uint GL_BUFFER_MAP_OFFSET = 0x9121;
enum uint GL_DEPTH_COMPONENT32F = 0x8CAC;
enum uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum uint GL_DEPTH_STENCIL = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8 = 0x84FA;
enum uint GL_DEPTH24_STENCIL8 = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum uint GL_TEXTURE_RED_TYPE = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED = 0x8C17;
enum uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING = 0x8CA7;
enum uint GL_READ_FRAMEBUFFER = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13 = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum uint GL_COLOR_ATTACHMENT16 = 0x8CF0;
enum uint GL_COLOR_ATTACHMENT17 = 0x8CF1;
enum uint GL_COLOR_ATTACHMENT18 = 0x8CF2;
enum uint GL_COLOR_ATTACHMENT19 = 0x8CF3;
enum uint GL_COLOR_ATTACHMENT20 = 0x8CF4;
enum uint GL_COLOR_ATTACHMENT21 = 0x8CF5;
enum uint GL_COLOR_ATTACHMENT22 = 0x8CF6;
enum uint GL_COLOR_ATTACHMENT23 = 0x8CF7;
enum uint GL_COLOR_ATTACHMENT24 = 0x8CF8;
enum uint GL_COLOR_ATTACHMENT25 = 0x8CF9;
enum uint GL_COLOR_ATTACHMENT26 = 0x8CFA;
enum uint GL_COLOR_ATTACHMENT27 = 0x8CFB;
enum uint GL_COLOR_ATTACHMENT28 = 0x8CFC;
enum uint GL_COLOR_ATTACHMENT29 = 0x8CFD;
enum uint GL_COLOR_ATTACHMENT30 = 0x8CFE;
enum uint GL_COLOR_ATTACHMENT31 = 0x8CFF;
enum uint GL_DEPTH_ATTACHMENT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT = 0x8D20;
enum uint GL_FRAMEBUFFER = 0x8D40;
enum uint GL_RENDERBUFFER = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum uint GL_STENCIL_INDEX1 = 0x8D46;
enum uint GL_STENCIL_INDEX4 = 0x8D47;
enum uint GL_STENCIL_INDEX8 = 0x8D48;
enum uint GL_STENCIL_INDEX16 = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum uint GL_MAX_SAMPLES = 0x8D57;
enum uint GL_INDEX = 0x8222;
enum uint GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
enum uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
enum uint GL_HALF_FLOAT = 0x140B;
enum uint GL_MAP_READ_BIT = 0x0001;
enum uint GL_MAP_WRITE_BIT = 0x0002;
enum uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
enum uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
enum uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
enum uint GL_RG = 0x8227;
enum uint GL_RG_INTEGER = 0x8228;
enum uint GL_R8 = 0x8229;
enum uint GL_R16 = 0x822A;
enum uint GL_RG8 = 0x822B;
enum uint GL_RG16 = 0x822C;
enum uint GL_R16F = 0x822D;
enum uint GL_R32F = 0x822E;
enum uint GL_RG16F = 0x822F;
enum uint GL_RG32F = 0x8230;
enum uint GL_R8I = 0x8231;
enum uint GL_R8UI = 0x8232;
enum uint GL_R16I = 0x8233;
enum uint GL_R16UI = 0x8234;
enum uint GL_R32I = 0x8235;
enum uint GL_R32UI = 0x8236;
enum uint GL_RG8I = 0x8237;
enum uint GL_RG8UI = 0x8238;
enum uint GL_RG16I = 0x8239;
enum uint GL_RG16UI = 0x823A;
enum uint GL_RG32I = 0x823B;
enum uint GL_RG32UI = 0x823C;
enum uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
enum uint GL_CLAMP_VERTEX_COLOR = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR = 0x891B;
enum uint GL_ALPHA_INTEGER = 0x8D97;
enum uint GL_SAMPLER_2D_RECT = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
enum uint GL_SAMPLER_BUFFER = 0x8DC2;
enum uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
enum uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
enum uint GL_TEXTURE_BUFFER = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
enum uint GL_TEXTURE_RECTANGLE = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
enum uint GL_R8_SNORM = 0x8F94;
enum uint GL_RG8_SNORM = 0x8F95;
enum uint GL_RGB8_SNORM = 0x8F96;
enum uint GL_RGBA8_SNORM = 0x8F97;
enum uint GL_R16_SNORM = 0x8F98;
enum uint GL_RG16_SNORM = 0x8F99;
enum uint GL_RGB16_SNORM = 0x8F9A;
enum uint GL_RGBA16_SNORM = 0x8F9B;
enum uint GL_SIGNED_NORMALIZED = 0x8F9C;
enum uint GL_PRIMITIVE_RESTART = 0x8F9D;
enum uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
enum uint GL_COPY_READ_BUFFER = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER = 0x8F37;
enum uint GL_UNIFORM_BUFFER = 0x8A11;
enum uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum uint GL_UNIFORM_BUFFER_START = 0x8A29;
enum uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
enum uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
enum uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum uint GL_UNIFORM_TYPE = 0x8A37;
enum uint GL_UNIFORM_SIZE = 0x8A38;
enum uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum uint GL_UNIFORM_OFFSET = 0x8A3B;
enum uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
enum uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
enum uint GL_LINES_ADJACENCY = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
enum uint GL_GEOMETRY_SHADER = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
enum uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
enum uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
enum uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
enum uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
enum uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum uint GL_CONTEXT_PROFILE_MASK = 0x9126;
enum uint GL_DEPTH_CLAMP = 0x864F;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
enum uint GL_PROVOKING_VERTEX = 0x8E4F;
enum uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
enum uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum uint GL_OBJECT_TYPE = 0x9112;
enum uint GL_SYNC_CONDITION = 0x9113;
enum uint GL_SYNC_STATUS = 0x9114;
enum uint GL_SYNC_FLAGS = 0x9115;
enum uint GL_SYNC_FENCE = 0x9116;
enum uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum uint GL_UNSIGNALED = 0x9118;
enum uint GL_SIGNALED = 0x9119;
enum uint GL_ALREADY_SIGNALED = 0x911A;
enum uint GL_TIMEOUT_EXPIRED = 0x911B;
enum uint GL_CONDITION_SATISFIED = 0x911C;
enum uint GL_WAIT_FAILED = 0x911D;
enum uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum uint GL_SAMPLE_POSITION = 0x8E50;
enum uint GL_SAMPLE_MASK = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE = 0x8E52;
enum uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
enum uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
enum uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
enum uint GL_TEXTURE_SAMPLES = 0x9106;
enum uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
enum uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
enum uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum uint GL_MAX_INTEGER_SAMPLES = 0x9110;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
enum uint GL_SRC1_COLOR = 0x88F9;
enum uint GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
enum uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
enum uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
enum uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
enum uint GL_SAMPLER_BINDING = 0x8919;
enum uint GL_RGB10_A2UI = 0x906F;
enum uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
enum uint GL_TIME_ELAPSED = 0x88BF;
enum uint GL_TIMESTAMP = 0x8E28;
enum uint GL_INT_2_10_10_10_REV = 0x8D9F;
enum uint GL_SAMPLE_SHADING = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
enum uint GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
enum uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
enum uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
enum uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
enum uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
enum uint GL_MAX_VERTEX_STREAMS = 0x8E71;
enum uint GL_DOUBLE_VEC2 = 0x8FFC;
enum uint GL_DOUBLE_VEC3 = 0x8FFD;
enum uint GL_DOUBLE_VEC4 = 0x8FFE;
enum uint GL_DOUBLE_MAT2 = 0x8F46;
enum uint GL_DOUBLE_MAT3 = 0x8F47;
enum uint GL_DOUBLE_MAT4 = 0x8F48;
enum uint GL_DOUBLE_MAT2x3 = 0x8F49;
enum uint GL_DOUBLE_MAT2x4 = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2 = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4 = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2 = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3 = 0x8F4E;
enum uint GL_ACTIVE_SUBROUTINES = 0x8DE5;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
enum uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
enum uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
enum uint GL_MAX_SUBROUTINES = 0x8DE7;
enum uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
enum uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
enum uint GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
enum uint GL_PATCHES = 0x000E;
enum uint GL_PATCH_VERTICES = 0x8E72;
enum uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
enum uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
enum uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
enum uint GL_TESS_GEN_MODE = 0x8E76;
enum uint GL_TESS_GEN_SPACING = 0x8E77;
enum uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
enum uint GL_TESS_GEN_POINT_MODE = 0x8E79;
enum uint GL_ISOLINES = 0x8E7A;
enum uint GL_FRACTIONAL_ODD = 0x8E7B;
enum uint GL_FRACTIONAL_EVEN = 0x8E7C;
enum uint GL_MAX_PATCH_VERTICES = 0x8E7D;
enum uint GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
enum uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
enum uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
enum uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
enum uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
enum uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
enum uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
enum uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
enum uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
enum uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
enum uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
enum uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
enum uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
enum uint GL_TESS_EVALUATION_SHADER = 0x8E87;
enum uint GL_TESS_CONTROL_SHADER = 0x8E88;
enum uint GL_TRANSFORM_FEEDBACK = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
enum uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
enum uint GL_FIXED = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
enum uint GL_LOW_FLOAT = 0x8DF0;
enum uint GL_MEDIUM_FLOAT = 0x8DF1;
enum uint GL_HIGH_FLOAT = 0x8DF2;
enum uint GL_LOW_INT = 0x8DF3;
enum uint GL_MEDIUM_INT = 0x8DF4;
enum uint GL_HIGH_INT = 0x8DF5;
enum uint GL_SHADER_COMPILER = 0x8DFA;
enum uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
enum uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
enum uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
enum uint GL_MAX_VARYING_VECTORS = 0x8DFC;
enum uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
enum uint GL_RGB565 = 0x8D62;
enum uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
enum uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
enum uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
enum uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
enum uint GL_VERTEX_SHADER_BIT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT = 0x00000002;
enum uint GL_GEOMETRY_SHADER_BIT = 0x00000004;
enum uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
enum uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
enum uint GL_ALL_SHADER_BITS = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE = 0x8258;
enum uint GL_ACTIVE_PROGRAM = 0x8259;
enum uint GL_PROGRAM_PIPELINE_BINDING = 0x825A;
enum uint GL_MAX_VIEWPORTS = 0x825B;
enum uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
enum uint GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
enum uint GL_LAYER_PROVOKING_VERTEX = 0x825E;
enum uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
enum uint GL_UNDEFINED_VERTEX = 0x8260;
enum uint GL_COPY_READ_BUFFER_BINDING = 0x8F36;
enum uint GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
enum uint GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
enum uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
enum uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
enum uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
enum uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
enum uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
enum uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
enum uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
enum uint GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
enum uint GL_NUM_SAMPLE_COUNTS = 0x9380;
enum uint GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
enum uint GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
enum uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
enum uint GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
enum uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
enum uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
enum uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
enum uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
enum uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
enum uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
enum uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
enum uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
enum uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
enum uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
enum uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
enum uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
enum uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
enum uint GL_MAX_IMAGE_UNITS = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS = 0x8F3E;
enum uint GL_IMAGE_1D = 0x904C;
enum uint GL_IMAGE_2D = 0x904D;
enum uint GL_IMAGE_3D = 0x904E;
enum uint GL_IMAGE_2D_RECT = 0x904F;
enum uint GL_IMAGE_CUBE = 0x9050;
enum uint GL_IMAGE_BUFFER = 0x9051;
enum uint GL_IMAGE_1D_ARRAY = 0x9052;
enum uint GL_IMAGE_2D_ARRAY = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
enum uint GL_INT_IMAGE_1D = 0x9057;
enum uint GL_INT_IMAGE_2D = 0x9058;
enum uint GL_INT_IMAGE_3D = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT = 0x905A;
enum uint GL_INT_IMAGE_CUBE = 0x905B;
enum uint GL_INT_IMAGE_BUFFER = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT = 0x906E;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
enum uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
enum uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
enum uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
enum uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
enum uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
enum uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
enum uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
enum uint GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
enum uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
enum uint GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
enum uint GL_COMPRESSED_RGB8_ETC2 = 0x9274;
enum uint GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
enum uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
enum uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
enum uint GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
enum uint GL_COMPRESSED_R11_EAC = 0x9270;
enum uint GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
enum uint GL_COMPRESSED_RG11_EAC = 0x9272;
enum uint GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
enum uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
enum uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
enum uint GL_MAX_ELEMENT_INDEX = 0x8D6B;
enum uint GL_COMPUTE_SHADER = 0x91B9;
enum uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
enum uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
enum uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
enum uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
enum uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
enum uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
enum uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
enum uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
enum uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
enum uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
enum uint GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
enum uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
enum uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
enum uint GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
enum uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
enum uint GL_COMPUTE_SHADER_BIT = 0x00000020;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
enum uint GL_DEBUG_SOURCE_API = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW = 0x9148;
enum uint GL_DEBUG_TYPE_MARKER = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
enum uint GL_BUFFER = 0x82E0;
enum uint GL_SHADER = 0x82E1;
enum uint GL_PROGRAM = 0x82E2;
enum uint GL_QUERY = 0x82E3;
enum uint GL_PROGRAM_PIPELINE = 0x82E4;
enum uint GL_SAMPLER = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH = 0x82E8;
enum uint GL_DEBUG_OUTPUT = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
enum uint GL_MAX_UNIFORM_LOCATIONS = 0x826E;
enum uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
enum uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
enum uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
enum uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
enum uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
enum uint GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
enum uint GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
enum uint GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
enum uint GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
enum uint GL_INTERNALFORMAT_SUPPORTED = 0x826F;
enum uint GL_INTERNALFORMAT_PREFERRED = 0x8270;
enum uint GL_INTERNALFORMAT_RED_SIZE = 0x8271;
enum uint GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
enum uint GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
enum uint GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
enum uint GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
enum uint GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
enum uint GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
enum uint GL_INTERNALFORMAT_RED_TYPE = 0x8278;
enum uint GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
enum uint GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
enum uint GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
enum uint GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
enum uint GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
enum uint GL_MAX_WIDTH = 0x827E;
enum uint GL_MAX_HEIGHT = 0x827F;
enum uint GL_MAX_DEPTH = 0x8280;
enum uint GL_MAX_LAYERS = 0x8281;
enum uint GL_MAX_COMBINED_DIMENSIONS = 0x8282;
enum uint GL_COLOR_COMPONENTS = 0x8283;
enum uint GL_DEPTH_COMPONENTS = 0x8284;
enum uint GL_STENCIL_COMPONENTS = 0x8285;
enum uint GL_COLOR_RENDERABLE = 0x8286;
enum uint GL_DEPTH_RENDERABLE = 0x8287;
enum uint GL_STENCIL_RENDERABLE = 0x8288;
enum uint GL_FRAMEBUFFER_RENDERABLE = 0x8289;
enum uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
enum uint GL_FRAMEBUFFER_BLEND = 0x828B;
enum uint GL_READ_PIXELS = 0x828C;
enum uint GL_READ_PIXELS_FORMAT = 0x828D;
enum uint GL_READ_PIXELS_TYPE = 0x828E;
enum uint GL_TEXTURE_IMAGE_FORMAT = 0x828F;
enum uint GL_TEXTURE_IMAGE_TYPE = 0x8290;
enum uint GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
enum uint GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
enum uint GL_MIPMAP = 0x8293;
enum uint GL_MANUAL_GENERATE_MIPMAP = 0x8294;
enum uint GL_AUTO_GENERATE_MIPMAP = 0x8295;
enum uint GL_COLOR_ENCODING = 0x8296;
enum uint GL_SRGB_READ = 0x8297;
enum uint GL_SRGB_WRITE = 0x8298;
enum uint GL_FILTER = 0x829A;
enum uint GL_VERTEX_TEXTURE = 0x829B;
enum uint GL_TESS_CONTROL_TEXTURE = 0x829C;
enum uint GL_TESS_EVALUATION_TEXTURE = 0x829D;
enum uint GL_GEOMETRY_TEXTURE = 0x829E;
enum uint GL_FRAGMENT_TEXTURE = 0x829F;
enum uint GL_COMPUTE_TEXTURE = 0x82A0;
enum uint GL_TEXTURE_SHADOW = 0x82A1;
enum uint GL_TEXTURE_GATHER = 0x82A2;
enum uint GL_TEXTURE_GATHER_SHADOW = 0x82A3;
enum uint GL_SHADER_IMAGE_LOAD = 0x82A4;
enum uint GL_SHADER_IMAGE_STORE = 0x82A5;
enum uint GL_SHADER_IMAGE_ATOMIC = 0x82A6;
enum uint GL_IMAGE_TEXEL_SIZE = 0x82A7;
enum uint GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
enum uint GL_IMAGE_PIXEL_FORMAT = 0x82A9;
enum uint GL_IMAGE_PIXEL_TYPE = 0x82AA;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
enum uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
enum uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
enum uint GL_CLEAR_BUFFER = 0x82B4;
enum uint GL_TEXTURE_VIEW = 0x82B5;
enum uint GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
enum uint GL_FULL_SUPPORT = 0x82B7;
enum uint GL_CAVEAT_SUPPORT = 0x82B8;
enum uint GL_IMAGE_CLASS_4_X_32 = 0x82B9;
enum uint GL_IMAGE_CLASS_2_X_32 = 0x82BA;
enum uint GL_IMAGE_CLASS_1_X_32 = 0x82BB;
enum uint GL_IMAGE_CLASS_4_X_16 = 0x82BC;
enum uint GL_IMAGE_CLASS_2_X_16 = 0x82BD;
enum uint GL_IMAGE_CLASS_1_X_16 = 0x82BE;
enum uint GL_IMAGE_CLASS_4_X_8 = 0x82BF;
enum uint GL_IMAGE_CLASS_2_X_8 = 0x82C0;
enum uint GL_IMAGE_CLASS_1_X_8 = 0x82C1;
enum uint GL_IMAGE_CLASS_11_11_10 = 0x82C2;
enum uint GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
enum uint GL_VIEW_CLASS_128_BITS = 0x82C4;
enum uint GL_VIEW_CLASS_96_BITS = 0x82C5;
enum uint GL_VIEW_CLASS_64_BITS = 0x82C6;
enum uint GL_VIEW_CLASS_48_BITS = 0x82C7;
enum uint GL_VIEW_CLASS_32_BITS = 0x82C8;
enum uint GL_VIEW_CLASS_24_BITS = 0x82C9;
enum uint GL_VIEW_CLASS_16_BITS = 0x82CA;
enum uint GL_VIEW_CLASS_8_BITS = 0x82CB;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
enum uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
enum uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
enum uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
enum uint GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
enum uint GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
enum uint GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
enum uint GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
enum uint GL_UNIFORM = 0x92E1;
enum uint GL_UNIFORM_BLOCK = 0x92E2;
enum uint GL_PROGRAM_INPUT = 0x92E3;
enum uint GL_PROGRAM_OUTPUT = 0x92E4;
enum uint GL_BUFFER_VARIABLE = 0x92E5;
enum uint GL_SHADER_STORAGE_BLOCK = 0x92E6;
enum uint GL_VERTEX_SUBROUTINE = 0x92E8;
enum uint GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
enum uint GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
enum uint GL_GEOMETRY_SUBROUTINE = 0x92EB;
enum uint GL_FRAGMENT_SUBROUTINE = 0x92EC;
enum uint GL_COMPUTE_SUBROUTINE = 0x92ED;
enum uint GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
enum uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
enum uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
enum uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
enum uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
enum uint GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
enum uint GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
enum uint GL_ACTIVE_RESOURCES = 0x92F5;
enum uint GL_MAX_NAME_LENGTH = 0x92F6;
enum uint GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
enum uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
enum uint GL_NAME_LENGTH = 0x92F9;
enum uint GL_TYPE = 0x92FA;
enum uint GL_ARRAY_SIZE = 0x92FB;
enum uint GL_OFFSET = 0x92FC;
enum uint GL_BLOCK_INDEX = 0x92FD;
enum uint GL_ARRAY_STRIDE = 0x92FE;
enum uint GL_MATRIX_STRIDE = 0x92FF;
enum uint GL_IS_ROW_MAJOR = 0x9300;
enum uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
enum uint GL_BUFFER_BINDING = 0x9302;
enum uint GL_BUFFER_DATA_SIZE = 0x9303;
enum uint GL_NUM_ACTIVE_VARIABLES = 0x9304;
enum uint GL_ACTIVE_VARIABLES = 0x9305;
enum uint GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
enum uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
enum uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
enum uint GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
enum uint GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
enum uint GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
enum uint GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
enum uint GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
enum uint GL_LOCATION = 0x930E;
enum uint GL_LOCATION_INDEX = 0x930F;
enum uint GL_IS_PER_PATCH = 0x92E7;
enum uint GL_SHADER_STORAGE_BUFFER = 0x90D2;
enum uint GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
enum uint GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
enum uint GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
enum uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
enum uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
enum uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
enum uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
enum uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
enum uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
enum uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
enum uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
enum uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
enum uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
enum uint GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
enum uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
enum uint GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
enum uint GL_TEXTURE_BUFFER_OFFSET = 0x919D;
enum uint GL_TEXTURE_BUFFER_SIZE = 0x919E;
enum uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
enum uint GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
enum uint GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
enum uint GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
enum uint GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
enum uint GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
enum uint GL_VERTEX_ATTRIB_BINDING = 0x82D4;
enum uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
enum uint GL_VERTEX_BINDING_DIVISOR = 0x82D6;
enum uint GL_VERTEX_BINDING_OFFSET = 0x82D7;
enum uint GL_VERTEX_BINDING_STRIDE = 0x82D8;
enum uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
enum uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
enum uint GL_VERTEX_BINDING_BUFFER = 0x8F4F;
enum uint GL_DISPLAY_LIST = 0x82E7;
enum uint GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
enum uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
enum uint GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
enum uint GL_MAP_PERSISTENT_BIT = 0x0040;
enum uint GL_MAP_COHERENT_BIT = 0x0080;
enum uint GL_DYNAMIC_STORAGE_BIT = 0x0100;
enum uint GL_CLIENT_STORAGE_BIT = 0x0200;
enum uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
enum uint GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
enum uint GL_BUFFER_STORAGE_FLAGS = 0x8220;
enum uint GL_CLEAR_TEXTURE = 0x9365;
enum uint GL_LOCATION_COMPONENT = 0x934A;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
enum uint GL_QUERY_BUFFER = 0x9192;
enum uint GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
enum uint GL_QUERY_BUFFER_BINDING = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT = 0x9194;
enum uint GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
enum uint GL_CONTEXT_LOST = 0x0507;
enum uint GL_NEGATIVE_ONE_TO_ONE = 0x935E;
enum uint GL_ZERO_TO_ONE = 0x935F;
enum uint GL_CLIP_ORIGIN = 0x935C;
enum uint GL_CLIP_DEPTH_MODE = 0x935D;
enum uint GL_QUERY_WAIT_INVERTED = 0x8E17;
enum uint GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
enum uint GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
enum uint GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
enum uint GL_MAX_CULL_DISTANCES = 0x82F9;
enum uint GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
enum uint GL_TEXTURE_TARGET = 0x1006;
enum uint GL_QUERY_TARGET = 0x82EA;
enum uint GL_GUILTY_CONTEXT_RESET = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
enum uint GL_LOSE_CONTEXT_ON_RESET = 0x8252;
enum uint GL_NO_RESET_NOTIFICATION = 0x8261;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
enum uint GL_MULTISAMPLE_3DFX = 0x86B2;
enum uint GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
enum uint GL_SAMPLES_3DFX = 0x86B4;
enum uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
enum uint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
enum uint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
enum uint GL_FACTOR_MIN_AMD = 0x901C;
enum uint GL_FACTOR_MAX_AMD = 0x901D;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
enum uint GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
enum uint GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
enum uint GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
enum uint GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
enum uint GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
enum uint GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
enum uint GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
enum uint GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
enum uint GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
enum uint GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
enum uint GL_INT64_NV = 0x140E;
enum uint GL_UNSIGNED_INT64_NV = 0x140F;
enum uint GL_INT8_NV = 0x8FE0;
enum uint GL_INT8_VEC2_NV = 0x8FE1;
enum uint GL_INT8_VEC3_NV = 0x8FE2;
enum uint GL_INT8_VEC4_NV = 0x8FE3;
enum uint GL_INT16_NV = 0x8FE4;
enum uint GL_INT16_VEC2_NV = 0x8FE5;
enum uint GL_INT16_VEC3_NV = 0x8FE6;
enum uint GL_INT16_VEC4_NV = 0x8FE7;
enum uint GL_INT64_VEC2_NV = 0x8FE9;
enum uint GL_INT64_VEC3_NV = 0x8FEA;
enum uint GL_INT64_VEC4_NV = 0x8FEB;
enum uint GL_UNSIGNED_INT8_NV = 0x8FEC;
enum uint GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
enum uint GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
enum uint GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
enum uint GL_UNSIGNED_INT16_NV = 0x8FF0;
enum uint GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
enum uint GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
enum uint GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
enum uint GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
enum uint GL_FLOAT16_NV = 0x8FF8;
enum uint GL_FLOAT16_VEC2_NV = 0x8FF9;
enum uint GL_FLOAT16_VEC3_NV = 0x8FFA;
enum uint GL_FLOAT16_VEC4_NV = 0x8FFB;
enum uint GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
enum uint GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
enum uint GL_DATA_BUFFER_AMD = 0x9151;
enum uint GL_PERFORMANCE_MONITOR_AMD = 0x9152;
enum uint GL_QUERY_OBJECT_AMD = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
enum uint GL_SAMPLER_OBJECT_AMD = 0x9155;
enum uint GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
enum uint GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
enum uint GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
enum uint GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
enum uint GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
enum uint GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
enum uint GL_COUNTER_TYPE_AMD = 0x8BC0;
enum uint GL_COUNTER_RANGE_AMD = 0x8BC1;
enum uint GL_UNSIGNED_INT64_AMD = 0x8BC2;
enum uint GL_PERCENTAGE_AMD = 0x8BC3;
enum uint GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
enum uint GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
enum uint GL_PERFMON_RESULT_AMD = 0x8BC6;
enum uint GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
enum uint GL_QUERY_BUFFER_AMD = 0x9192;
enum uint GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
enum uint GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
enum uint GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
enum uint GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
enum uint GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
enum uint GL_MIN_LOD_WARNING_AMD = 0x919C;
enum uint GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
enum uint GL_SET_AMD = 0x874A;
enum uint GL_REPLACE_VALUE_AMD = 0x874B;
enum uint GL_STENCIL_OP_VALUE_AMD = 0x874C;
enum uint GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
enum uint GL_STREAM_RASTERIZATION_AMD = 0x91A0;
enum uint GL_SAMPLER_BUFFER_AMD = 0x9001;
enum uint GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
enum uint GL_TESSELLATION_MODE_AMD = 0x9004;
enum uint GL_TESSELLATION_FACTOR_AMD = 0x9005;
enum uint GL_DISCRETE_AMD = 0x9006;
enum uint GL_CONTINUOUS_AMD = 0x9007;
enum uint GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
enum uint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
enum uint GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
enum uint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
enum uint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
enum uint GL_DRAW_PIXELS_APPLE = 0x8A0A;
enum uint GL_FENCE_APPLE = 0x8A0B;
enum uint GL_HALF_APPLE = 0x140B;
enum uint GL_RGBA_FLOAT32_APPLE = 0x8814;
enum uint GL_RGB_FLOAT32_APPLE = 0x8815;
enum uint GL_ALPHA_FLOAT32_APPLE = 0x8816;
enum uint GL_INTENSITY_FLOAT32_APPLE = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
enum uint GL_RGBA_FLOAT16_APPLE = 0x881A;
enum uint GL_RGB_FLOAT16_APPLE = 0x881B;
enum uint GL_ALPHA_FLOAT16_APPLE = 0x881C;
enum uint GL_INTENSITY_FLOAT16_APPLE = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
enum uint GL_COLOR_FLOAT_APPLE = 0x8A0F;
enum uint GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
enum uint GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
enum uint GL_BUFFER_OBJECT_APPLE = 0x85B3;
enum uint GL_RELEASED_APPLE = 0x8A19;
enum uint GL_VOLATILE_APPLE = 0x8A1A;
enum uint GL_RETAINED_APPLE = 0x8A1B;
enum uint GL_UNDEFINED_APPLE = 0x8A1C;
enum uint GL_PURGEABLE_APPLE = 0x8A1D;
enum uint GL_RGB_422_APPLE = 0x8A1F;
enum uint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
enum uint GL_RGB_RAW_422_APPLE = 0x8A51;
enum uint GL_PACK_ROW_BYTES_APPLE = 0x8A15;
enum uint GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
enum uint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
enum uint GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
enum uint GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
enum uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
enum uint GL_STORAGE_PRIVATE_APPLE = 0x85BD;
enum uint GL_STORAGE_CACHED_APPLE = 0x85BE;
enum uint GL_STORAGE_SHARED_APPLE = 0x85BF;
enum uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
enum uint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
enum uint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
enum uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
enum uint GL_STORAGE_CLIENT_APPLE = 0x85B4;
enum uint GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
enum uint GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
enum uint GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
enum uint GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
enum uint GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
enum uint GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
enum uint GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
enum uint GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
enum uint GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
enum uint GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
enum uint GL_YCBCR_422_APPLE = 0x85B9;
enum uint GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
enum uint GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
enum uint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
enum uint GL_UNSIGNED_INT64_ARB = 0x140F;
enum uint GL_SYNC_CL_EVENT_ARB = 0x8240;
enum uint GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
enum uint GL_RGBA_FLOAT_MODE_ARB = 0x8820;
enum uint GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
enum uint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
enum uint GL_CLAMP_READ_COLOR_ARB = 0x891C;
enum uint GL_FIXED_ONLY_ARB = 0x891D;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
enum uint GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
enum uint GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
enum uint GL_DEBUG_SOURCE_API_ARB = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
enum uint GL_DEPTH_COMPONENT16_ARB = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_ARB = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_ARB = 0x81A7;
enum uint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
enum uint GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
enum uint GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
enum uint GL_DRAW_BUFFER0_ARB = 0x8825;
enum uint GL_DRAW_BUFFER1_ARB = 0x8826;
enum uint GL_DRAW_BUFFER2_ARB = 0x8827;
enum uint GL_DRAW_BUFFER3_ARB = 0x8828;
enum uint GL_DRAW_BUFFER4_ARB = 0x8829;
enum uint GL_DRAW_BUFFER5_ARB = 0x882A;
enum uint GL_DRAW_BUFFER6_ARB = 0x882B;
enum uint GL_DRAW_BUFFER7_ARB = 0x882C;
enum uint GL_DRAW_BUFFER8_ARB = 0x882D;
enum uint GL_DRAW_BUFFER9_ARB = 0x882E;
enum uint GL_DRAW_BUFFER10_ARB = 0x882F;
enum uint GL_DRAW_BUFFER11_ARB = 0x8830;
enum uint GL_DRAW_BUFFER12_ARB = 0x8831;
enum uint GL_DRAW_BUFFER13_ARB = 0x8832;
enum uint GL_DRAW_BUFFER14_ARB = 0x8833;
enum uint GL_DRAW_BUFFER15_ARB = 0x8834;
enum uint GL_FRAGMENT_PROGRAM_ARB = 0x8804;
enum uint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
enum uint GL_PROGRAM_LENGTH_ARB = 0x8627;
enum uint GL_PROGRAM_FORMAT_ARB = 0x8876;
enum uint GL_PROGRAM_BINDING_ARB = 0x8677;
enum uint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
enum uint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
enum uint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
enum uint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
enum uint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
enum uint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
enum uint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
enum uint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
enum uint GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
enum uint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
enum uint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
enum uint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
enum uint GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
enum uint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
enum uint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
enum uint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
enum uint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
enum uint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
enum uint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
enum uint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
enum uint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
enum uint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
enum uint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
enum uint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
enum uint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
enum uint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
enum uint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
enum uint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
enum uint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
enum uint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
enum uint GL_PROGRAM_STRING_ARB = 0x8628;
enum uint GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
enum uint GL_CURRENT_MATRIX_ARB = 0x8641;
enum uint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
enum uint GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
enum uint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
enum uint GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
enum uint GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
enum uint GL_MATRIX0_ARB = 0x88C0;
enum uint GL_MATRIX1_ARB = 0x88C1;
enum uint GL_MATRIX2_ARB = 0x88C2;
enum uint GL_MATRIX3_ARB = 0x88C3;
enum uint GL_MATRIX4_ARB = 0x88C4;
enum uint GL_MATRIX5_ARB = 0x88C5;
enum uint GL_MATRIX6_ARB = 0x88C6;
enum uint GL_MATRIX7_ARB = 0x88C7;
enum uint GL_MATRIX8_ARB = 0x88C8;
enum uint GL_MATRIX9_ARB = 0x88C9;
enum uint GL_MATRIX10_ARB = 0x88CA;
enum uint GL_MATRIX11_ARB = 0x88CB;
enum uint GL_MATRIX12_ARB = 0x88CC;
enum uint GL_MATRIX13_ARB = 0x88CD;
enum uint GL_MATRIX14_ARB = 0x88CE;
enum uint GL_MATRIX15_ARB = 0x88CF;
enum uint GL_MATRIX16_ARB = 0x88D0;
enum uint GL_MATRIX17_ARB = 0x88D1;
enum uint GL_MATRIX18_ARB = 0x88D2;
enum uint GL_MATRIX19_ARB = 0x88D3;
enum uint GL_MATRIX20_ARB = 0x88D4;
enum uint GL_MATRIX21_ARB = 0x88D5;
enum uint GL_MATRIX22_ARB = 0x88D6;
enum uint GL_MATRIX23_ARB = 0x88D7;
enum uint GL_MATRIX24_ARB = 0x88D8;
enum uint GL_MATRIX25_ARB = 0x88D9;
enum uint GL_MATRIX26_ARB = 0x88DA;
enum uint GL_MATRIX27_ARB = 0x88DB;
enum uint GL_MATRIX28_ARB = 0x88DC;
enum uint GL_MATRIX29_ARB = 0x88DD;
enum uint GL_MATRIX30_ARB = 0x88DE;
enum uint GL_MATRIX31_ARB = 0x88DF;
enum uint GL_FRAGMENT_SHADER_ARB = 0x8B30;
enum uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
enum uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
enum uint GL_LINES_ADJACENCY_ARB = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
enum uint GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
enum uint GL_GEOMETRY_SHADER_ARB = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
enum uint GL_INT64_ARB = 0x140E;
enum uint GL_INT64_VEC2_ARB = 0x8FE9;
enum uint GL_INT64_VEC3_ARB = 0x8FEA;
enum uint GL_INT64_VEC4_ARB = 0x8FEB;
enum uint GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
enum uint GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
enum uint GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
enum uint GL_HALF_FLOAT_ARB = 0x140B;
enum uint GL_BLEND_COLOR = 0x8005;
enum uint GL_BLEND_EQUATION = 0x8009;
enum uint GL_CONVOLUTION_1D = 0x8010;
enum uint GL_CONVOLUTION_2D = 0x8011;
enum uint GL_SEPARABLE_2D = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS = 0x8015;
enum uint GL_REDUCE = 0x8016;
enum uint GL_CONVOLUTION_FORMAT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
enum uint GL_HISTOGRAM = 0x8024;
enum uint GL_PROXY_HISTOGRAM = 0x8025;
enum uint GL_HISTOGRAM_WIDTH = 0x8026;
enum uint GL_HISTOGRAM_FORMAT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
enum uint GL_HISTOGRAM_SINK = 0x802D;
enum uint GL_MINMAX = 0x802E;
enum uint GL_MINMAX_FORMAT = 0x802F;
enum uint GL_MINMAX_SINK = 0x8030;
enum uint GL_TABLE_TOO_LARGE = 0x8031;
enum uint GL_COLOR_MATRIX = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
enum uint GL_COLOR_TABLE = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
enum uint GL_CONSTANT_BORDER = 0x8151;
enum uint GL_REPLICATE_BORDER = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR = 0x8154;
enum uint GL_PARAMETER_BUFFER_ARB = 0x80EE;
enum uint GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
enum uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
enum uint GL_SRGB_DECODE_ARB = 0x8299;
enum uint GL_MATRIX_PALETTE_ARB = 0x8840;
enum uint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
enum uint GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
enum uint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
enum uint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
enum uint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
enum uint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
enum uint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
enum uint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
enum uint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
enum uint GL_MULTISAMPLE_ARB = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
enum uint GL_SAMPLE_COVERAGE_ARB = 0x80A0;
enum uint GL_SAMPLE_BUFFERS_ARB = 0x80A8;
enum uint GL_SAMPLES_ARB = 0x80A9;
enum uint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
enum uint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
enum uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
enum uint GL_TEXTURE0_ARB = 0x84C0;
enum uint GL_TEXTURE1_ARB = 0x84C1;
enum uint GL_TEXTURE2_ARB = 0x84C2;
enum uint GL_TEXTURE3_ARB = 0x84C3;
enum uint GL_TEXTURE4_ARB = 0x84C4;
enum uint GL_TEXTURE5_ARB = 0x84C5;
enum uint GL_TEXTURE6_ARB = 0x84C6;
enum uint GL_TEXTURE7_ARB = 0x84C7;
enum uint GL_TEXTURE8_ARB = 0x84C8;
enum uint GL_TEXTURE9_ARB = 0x84C9;
enum uint GL_TEXTURE10_ARB = 0x84CA;
enum uint GL_TEXTURE11_ARB = 0x84CB;
enum uint GL_TEXTURE12_ARB = 0x84CC;
enum uint GL_TEXTURE13_ARB = 0x84CD;
enum uint GL_TEXTURE14_ARB = 0x84CE;
enum uint GL_TEXTURE15_ARB = 0x84CF;
enum uint GL_TEXTURE16_ARB = 0x84D0;
enum uint GL_TEXTURE17_ARB = 0x84D1;
enum uint GL_TEXTURE18_ARB = 0x84D2;
enum uint GL_TEXTURE19_ARB = 0x84D3;
enum uint GL_TEXTURE20_ARB = 0x84D4;
enum uint GL_TEXTURE21_ARB = 0x84D5;
enum uint GL_TEXTURE22_ARB = 0x84D6;
enum uint GL_TEXTURE23_ARB = 0x84D7;
enum uint GL_TEXTURE24_ARB = 0x84D8;
enum uint GL_TEXTURE25_ARB = 0x84D9;
enum uint GL_TEXTURE26_ARB = 0x84DA;
enum uint GL_TEXTURE27_ARB = 0x84DB;
enum uint GL_TEXTURE28_ARB = 0x84DC;
enum uint GL_TEXTURE29_ARB = 0x84DD;
enum uint GL_TEXTURE30_ARB = 0x84DE;
enum uint GL_TEXTURE31_ARB = 0x84DF;
enum uint GL_ACTIVE_TEXTURE_ARB = 0x84E0;
enum uint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
enum uint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
enum uint GL_QUERY_COUNTER_BITS_ARB = 0x8864;
enum uint GL_CURRENT_QUERY_ARB = 0x8865;
enum uint GL_QUERY_RESULT_ARB = 0x8866;
enum uint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
enum uint GL_SAMPLES_PASSED_ARB = 0x8914;
enum uint GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
enum uint GL_COMPLETION_STATUS_ARB = 0x91B1;
enum uint GL_VERTICES_SUBMITTED_ARB = 0x82EE;
enum uint GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
enum uint GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
enum uint GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
enum uint GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
enum uint GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
enum uint GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
enum uint GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
enum uint GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
enum uint GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
enum uint GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
enum uint GL_POINT_SIZE_MIN_ARB = 0x8126;
enum uint GL_POINT_SIZE_MAX_ARB = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
enum uint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
enum uint GL_POINT_SPRITE_ARB = 0x8861;
enum uint GL_COORD_REPLACE_ARB = 0x8862;
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
enum uint GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
enum uint GL_SAMPLE_LOCATION_ARB = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
enum uint GL_SAMPLE_SHADING_ARB = 0x8C36;
enum uint GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
enum uint GL_PROGRAM_OBJECT_ARB = 0x8B40;
enum uint GL_SHADER_OBJECT_ARB = 0x8B48;
enum uint GL_OBJECT_TYPE_ARB = 0x8B4E;
enum uint GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
enum uint GL_FLOAT_VEC2_ARB = 0x8B50;
enum uint GL_FLOAT_VEC3_ARB = 0x8B51;
enum uint GL_FLOAT_VEC4_ARB = 0x8B52;
enum uint GL_INT_VEC2_ARB = 0x8B53;
enum uint GL_INT_VEC3_ARB = 0x8B54;
enum uint GL_INT_VEC4_ARB = 0x8B55;
enum uint GL_BOOL_ARB = 0x8B56;
enum uint GL_BOOL_VEC2_ARB = 0x8B57;
enum uint GL_BOOL_VEC3_ARB = 0x8B58;
enum uint GL_BOOL_VEC4_ARB = 0x8B59;
enum uint GL_FLOAT_MAT2_ARB = 0x8B5A;
enum uint GL_FLOAT_MAT3_ARB = 0x8B5B;
enum uint GL_FLOAT_MAT4_ARB = 0x8B5C;
enum uint GL_SAMPLER_1D_ARB = 0x8B5D;
enum uint GL_SAMPLER_2D_ARB = 0x8B5E;
enum uint GL_SAMPLER_3D_ARB = 0x8B5F;
enum uint GL_SAMPLER_CUBE_ARB = 0x8B60;
enum uint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
enum uint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
enum uint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
enum uint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
enum uint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
enum uint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
enum uint GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
enum uint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
enum uint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
enum uint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
enum uint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
enum uint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
enum uint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
enum uint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
enum uint GL_SHADER_INCLUDE_ARB = 0x8DAE;
enum uint GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
enum uint GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
enum uint GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
enum uint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
enum uint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
enum uint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
enum uint GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
enum uint GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
enum uint GL_TEXTURE_SPARSE_ARB = 0x91A6;
enum uint GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
enum uint GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
enum uint GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
enum uint GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
enum uint GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
enum uint GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
enum uint GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
enum uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
enum uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
enum uint GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
enum uint GL_CLAMP_TO_BORDER_ARB = 0x812D;
enum uint GL_TEXTURE_BUFFER_ARB = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
enum uint GL_COMPRESSED_ALPHA_ARB = 0x84E9;
enum uint GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
enum uint GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
enum uint GL_COMPRESSED_RGB_ARB = 0x84ED;
enum uint GL_COMPRESSED_RGBA_ARB = 0x84EE;
enum uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
enum uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
enum uint GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
enum uint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
enum uint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
enum uint GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
enum uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
enum uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
enum uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
enum uint GL_NORMAL_MAP_ARB = 0x8511;
enum uint GL_REFLECTION_MAP_ARB = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
enum uint GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
enum uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
enum uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
enum uint GL_COMBINE_ARB = 0x8570;
enum uint GL_COMBINE_RGB_ARB = 0x8571;
enum uint GL_COMBINE_ALPHA_ARB = 0x8572;
enum uint GL_SOURCE0_RGB_ARB = 0x8580;
enum uint GL_SOURCE1_RGB_ARB = 0x8581;
enum uint GL_SOURCE2_RGB_ARB = 0x8582;
enum uint GL_SOURCE0_ALPHA_ARB = 0x8588;
enum uint GL_SOURCE1_ALPHA_ARB = 0x8589;
enum uint GL_SOURCE2_ALPHA_ARB = 0x858A;
enum uint GL_OPERAND0_RGB_ARB = 0x8590;
enum uint GL_OPERAND1_RGB_ARB = 0x8591;
enum uint GL_OPERAND2_RGB_ARB = 0x8592;
enum uint GL_OPERAND0_ALPHA_ARB = 0x8598;
enum uint GL_OPERAND1_ALPHA_ARB = 0x8599;
enum uint GL_OPERAND2_ALPHA_ARB = 0x859A;
enum uint GL_RGB_SCALE_ARB = 0x8573;
enum uint GL_ADD_SIGNED_ARB = 0x8574;
enum uint GL_INTERPOLATE_ARB = 0x8575;
enum uint GL_SUBTRACT_ARB = 0x84E7;
enum uint GL_CONSTANT_ARB = 0x8576;
enum uint GL_PRIMARY_COLOR_ARB = 0x8577;
enum uint GL_PREVIOUS_ARB = 0x8578;
enum uint GL_DOT3_RGB_ARB = 0x86AE;
enum uint GL_DOT3_RGBA_ARB = 0x86AF;
enum uint GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
enum uint GL_WEIGHTED_AVERAGE_ARB = 0x9367;
enum uint GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
enum uint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
enum uint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
enum uint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
enum uint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
enum uint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
enum uint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
enum uint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
enum uint GL_RGBA32F_ARB = 0x8814;
enum uint GL_RGB32F_ARB = 0x8815;
enum uint GL_ALPHA32F_ARB = 0x8816;
enum uint GL_INTENSITY32F_ARB = 0x8817;
enum uint GL_LUMINANCE32F_ARB = 0x8818;
enum uint GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
enum uint GL_RGBA16F_ARB = 0x881A;
enum uint GL_RGB16F_ARB = 0x881B;
enum uint GL_ALPHA16F_ARB = 0x881C;
enum uint GL_INTENSITY16F_ARB = 0x881D;
enum uint GL_LUMINANCE16F_ARB = 0x881E;
enum uint GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
enum uint GL_MIRRORED_REPEAT_ARB = 0x8370;
enum uint GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
enum uint GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
enum uint GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
enum uint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
enum uint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
enum uint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
enum uint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
enum uint GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
enum uint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
enum uint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
enum uint GL_VERTEX_BLEND_ARB = 0x86A7;
enum uint GL_CURRENT_WEIGHT_ARB = 0x86A8;
enum uint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
enum uint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
enum uint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
enum uint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
enum uint GL_WEIGHT_ARRAY_ARB = 0x86AD;
enum uint GL_MODELVIEW0_ARB = 0x1700;
enum uint GL_MODELVIEW1_ARB = 0x850A;
enum uint GL_MODELVIEW2_ARB = 0x8722;
enum uint GL_MODELVIEW3_ARB = 0x8723;
enum uint GL_MODELVIEW4_ARB = 0x8724;
enum uint GL_MODELVIEW5_ARB = 0x8725;
enum uint GL_MODELVIEW6_ARB = 0x8726;
enum uint GL_MODELVIEW7_ARB = 0x8727;
enum uint GL_MODELVIEW8_ARB = 0x8728;
enum uint GL_MODELVIEW9_ARB = 0x8729;
enum uint GL_MODELVIEW10_ARB = 0x872A;
enum uint GL_MODELVIEW11_ARB = 0x872B;
enum uint GL_MODELVIEW12_ARB = 0x872C;
enum uint GL_MODELVIEW13_ARB = 0x872D;
enum uint GL_MODELVIEW14_ARB = 0x872E;
enum uint GL_MODELVIEW15_ARB = 0x872F;
enum uint GL_MODELVIEW16_ARB = 0x8730;
enum uint GL_MODELVIEW17_ARB = 0x8731;
enum uint GL_MODELVIEW18_ARB = 0x8732;
enum uint GL_MODELVIEW19_ARB = 0x8733;
enum uint GL_MODELVIEW20_ARB = 0x8734;
enum uint GL_MODELVIEW21_ARB = 0x8735;
enum uint GL_MODELVIEW22_ARB = 0x8736;
enum uint GL_MODELVIEW23_ARB = 0x8737;
enum uint GL_MODELVIEW24_ARB = 0x8738;
enum uint GL_MODELVIEW25_ARB = 0x8739;
enum uint GL_MODELVIEW26_ARB = 0x873A;
enum uint GL_MODELVIEW27_ARB = 0x873B;
enum uint GL_MODELVIEW28_ARB = 0x873C;
enum uint GL_MODELVIEW29_ARB = 0x873D;
enum uint GL_MODELVIEW30_ARB = 0x873E;
enum uint GL_MODELVIEW31_ARB = 0x873F;
enum uint GL_BUFFER_SIZE_ARB = 0x8764;
enum uint GL_BUFFER_USAGE_ARB = 0x8765;
enum uint GL_ARRAY_BUFFER_ARB = 0x8892;
enum uint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
enum uint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
enum uint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
enum uint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
enum uint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
enum uint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
enum uint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
enum uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
enum uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
enum uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
enum uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
enum uint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
enum uint GL_READ_ONLY_ARB = 0x88B8;
enum uint GL_WRITE_ONLY_ARB = 0x88B9;
enum uint GL_READ_WRITE_ARB = 0x88BA;
enum uint GL_BUFFER_ACCESS_ARB = 0x88BB;
enum uint GL_BUFFER_MAPPED_ARB = 0x88BC;
enum uint GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
enum uint GL_STREAM_DRAW_ARB = 0x88E0;
enum uint GL_STREAM_READ_ARB = 0x88E1;
enum uint GL_STREAM_COPY_ARB = 0x88E2;
enum uint GL_STATIC_DRAW_ARB = 0x88E4;
enum uint GL_STATIC_READ_ARB = 0x88E5;
enum uint GL_STATIC_COPY_ARB = 0x88E6;
enum uint GL_DYNAMIC_DRAW_ARB = 0x88E8;
enum uint GL_DYNAMIC_READ_ARB = 0x88E9;
enum uint GL_DYNAMIC_COPY_ARB = 0x88EA;
enum uint GL_COLOR_SUM_ARB = 0x8458;
enum uint GL_VERTEX_PROGRAM_ARB = 0x8620;
enum uint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
enum uint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
enum uint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
enum uint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
enum uint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
enum uint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
enum uint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
enum uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
enum uint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
enum uint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
enum uint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
enum uint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
enum uint GL_VERTEX_SHADER_ARB = 0x8B31;
enum uint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
enum uint GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
enum uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
enum uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
enum uint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
enum uint GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
enum uint GL_DRAW_BUFFER0_ATI = 0x8825;
enum uint GL_DRAW_BUFFER1_ATI = 0x8826;
enum uint GL_DRAW_BUFFER2_ATI = 0x8827;
enum uint GL_DRAW_BUFFER3_ATI = 0x8828;
enum uint GL_DRAW_BUFFER4_ATI = 0x8829;
enum uint GL_DRAW_BUFFER5_ATI = 0x882A;
enum uint GL_DRAW_BUFFER6_ATI = 0x882B;
enum uint GL_DRAW_BUFFER7_ATI = 0x882C;
enum uint GL_DRAW_BUFFER8_ATI = 0x882D;
enum uint GL_DRAW_BUFFER9_ATI = 0x882E;
enum uint GL_DRAW_BUFFER10_ATI = 0x882F;
enum uint GL_DRAW_BUFFER11_ATI = 0x8830;
enum uint GL_DRAW_BUFFER12_ATI = 0x8831;
enum uint GL_DRAW_BUFFER13_ATI = 0x8832;
enum uint GL_DRAW_BUFFER14_ATI = 0x8833;
enum uint GL_DRAW_BUFFER15_ATI = 0x8834;
enum uint GL_ELEMENT_ARRAY_ATI = 0x8768;
enum uint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
enum uint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
enum uint GL_BUMP_ROT_MATRIX_ATI = 0x8775;
enum uint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
enum uint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
enum uint GL_BUMP_TEX_UNITS_ATI = 0x8778;
enum uint GL_DUDV_ATI = 0x8779;
enum uint GL_DU8DV8_ATI = 0x877A;
enum uint GL_BUMP_ENVMAP_ATI = 0x877B;
enum uint GL_BUMP_TARGET_ATI = 0x877C;
enum uint GL_FRAGMENT_SHADER_ATI = 0x8920;
enum uint GL_REG_0_ATI = 0x8921;
enum uint GL_REG_1_ATI = 0x8922;
enum uint GL_REG_2_ATI = 0x8923;
enum uint GL_REG_3_ATI = 0x8924;
enum uint GL_REG_4_ATI = 0x8925;
enum uint GL_REG_5_ATI = 0x8926;
enum uint GL_REG_6_ATI = 0x8927;
enum uint GL_REG_7_ATI = 0x8928;
enum uint GL_REG_8_ATI = 0x8929;
enum uint GL_REG_9_ATI = 0x892A;
enum uint GL_REG_10_ATI = 0x892B;
enum uint GL_REG_11_ATI = 0x892C;
enum uint GL_REG_12_ATI = 0x892D;
enum uint GL_REG_13_ATI = 0x892E;
enum uint GL_REG_14_ATI = 0x892F;
enum uint GL_REG_15_ATI = 0x8930;
enum uint GL_REG_16_ATI = 0x8931;
enum uint GL_REG_17_ATI = 0x8932;
enum uint GL_REG_18_ATI = 0x8933;
enum uint GL_REG_19_ATI = 0x8934;
enum uint GL_REG_20_ATI = 0x8935;
enum uint GL_REG_21_ATI = 0x8936;
enum uint GL_REG_22_ATI = 0x8937;
enum uint GL_REG_23_ATI = 0x8938;
enum uint GL_REG_24_ATI = 0x8939;
enum uint GL_REG_25_ATI = 0x893A;
enum uint GL_REG_26_ATI = 0x893B;
enum uint GL_REG_27_ATI = 0x893C;
enum uint GL_REG_28_ATI = 0x893D;
enum uint GL_REG_29_ATI = 0x893E;
enum uint GL_REG_30_ATI = 0x893F;
enum uint GL_REG_31_ATI = 0x8940;
enum uint GL_CON_0_ATI = 0x8941;
enum uint GL_CON_1_ATI = 0x8942;
enum uint GL_CON_2_ATI = 0x8943;
enum uint GL_CON_3_ATI = 0x8944;
enum uint GL_CON_4_ATI = 0x8945;
enum uint GL_CON_5_ATI = 0x8946;
enum uint GL_CON_6_ATI = 0x8947;
enum uint GL_CON_7_ATI = 0x8948;
enum uint GL_CON_8_ATI = 0x8949;
enum uint GL_CON_9_ATI = 0x894A;
enum uint GL_CON_10_ATI = 0x894B;
enum uint GL_CON_11_ATI = 0x894C;
enum uint GL_CON_12_ATI = 0x894D;
enum uint GL_CON_13_ATI = 0x894E;
enum uint GL_CON_14_ATI = 0x894F;
enum uint GL_CON_15_ATI = 0x8950;
enum uint GL_CON_16_ATI = 0x8951;
enum uint GL_CON_17_ATI = 0x8952;
enum uint GL_CON_18_ATI = 0x8953;
enum uint GL_CON_19_ATI = 0x8954;
enum uint GL_CON_20_ATI = 0x8955;
enum uint GL_CON_21_ATI = 0x8956;
enum uint GL_CON_22_ATI = 0x8957;
enum uint GL_CON_23_ATI = 0x8958;
enum uint GL_CON_24_ATI = 0x8959;
enum uint GL_CON_25_ATI = 0x895A;
enum uint GL_CON_26_ATI = 0x895B;
enum uint GL_CON_27_ATI = 0x895C;
enum uint GL_CON_28_ATI = 0x895D;
enum uint GL_CON_29_ATI = 0x895E;
enum uint GL_CON_30_ATI = 0x895F;
enum uint GL_CON_31_ATI = 0x8960;
enum uint GL_MOV_ATI = 0x8961;
enum uint GL_ADD_ATI = 0x8963;
enum uint GL_MUL_ATI = 0x8964;
enum uint GL_SUB_ATI = 0x8965;
enum uint GL_DOT3_ATI = 0x8966;
enum uint GL_DOT4_ATI = 0x8967;
enum uint GL_MAD_ATI = 0x8968;
enum uint GL_LERP_ATI = 0x8969;
enum uint GL_CND_ATI = 0x896A;
enum uint GL_CND0_ATI = 0x896B;
enum uint GL_DOT2_ADD_ATI = 0x896C;
enum uint GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
enum uint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
enum uint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
enum uint GL_NUM_PASSES_ATI = 0x8970;
enum uint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
enum uint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
enum uint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
enum uint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
enum uint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
enum uint GL_SWIZZLE_STR_ATI = 0x8976;
enum uint GL_SWIZZLE_STQ_ATI = 0x8977;
enum uint GL_SWIZZLE_STR_DR_ATI = 0x8978;
enum uint GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
enum uint GL_SWIZZLE_STRQ_ATI = 0x897A;
enum uint GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
enum uint GL_RED_BIT_ATI = 0x00000001;
enum uint GL_GREEN_BIT_ATI = 0x00000002;
enum uint GL_BLUE_BIT_ATI = 0x00000004;
enum uint GL_2X_BIT_ATI = 0x00000001;
enum uint GL_4X_BIT_ATI = 0x00000002;
enum uint GL_8X_BIT_ATI = 0x00000004;
enum uint GL_HALF_BIT_ATI = 0x00000008;
enum uint GL_QUARTER_BIT_ATI = 0x00000010;
enum uint GL_EIGHTH_BIT_ATI = 0x00000020;
enum uint GL_SATURATE_BIT_ATI = 0x00000040;
enum uint GL_COMP_BIT_ATI = 0x00000002;
enum uint GL_NEGATE_BIT_ATI = 0x00000004;
enum uint GL_BIAS_BIT_ATI = 0x00000008;
enum uint GL_VBO_FREE_MEMORY_ATI = 0x87FB;
enum uint GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
enum uint GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
enum uint GL_RGBA_FLOAT_MODE_ATI = 0x8820;
enum uint GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
enum uint GL_PN_TRIANGLES_ATI = 0x87F0;
enum uint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
enum uint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
enum uint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
enum uint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
enum uint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
enum uint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
enum uint GL_STENCIL_BACK_FUNC_ATI = 0x8800;
enum uint GL_STENCIL_BACK_FAIL_ATI = 0x8801;
enum uint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
enum uint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
enum uint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
enum uint GL_MODULATE_ADD_ATI = 0x8744;
enum uint GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
enum uint GL_MODULATE_SUBTRACT_ATI = 0x8746;
enum uint GL_RGBA_FLOAT32_ATI = 0x8814;
enum uint GL_RGB_FLOAT32_ATI = 0x8815;
enum uint GL_ALPHA_FLOAT32_ATI = 0x8816;
enum uint GL_INTENSITY_FLOAT32_ATI = 0x8817;
enum uint GL_LUMINANCE_FLOAT32_ATI = 0x8818;
enum uint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
enum uint GL_RGBA_FLOAT16_ATI = 0x881A;
enum uint GL_RGB_FLOAT16_ATI = 0x881B;
enum uint GL_ALPHA_FLOAT16_ATI = 0x881C;
enum uint GL_INTENSITY_FLOAT16_ATI = 0x881D;
enum uint GL_LUMINANCE_FLOAT16_ATI = 0x881E;
enum uint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
enum uint GL_MIRROR_CLAMP_ATI = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
enum uint GL_STATIC_ATI = 0x8760;
enum uint GL_DYNAMIC_ATI = 0x8761;
enum uint GL_PRESERVE_ATI = 0x8762;
enum uint GL_DISCARD_ATI = 0x8763;
enum uint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
enum uint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
enum uint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
enum uint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
enum uint GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
enum uint GL_VERTEX_STREAM0_ATI = 0x876C;
enum uint GL_VERTEX_STREAM1_ATI = 0x876D;
enum uint GL_VERTEX_STREAM2_ATI = 0x876E;
enum uint GL_VERTEX_STREAM3_ATI = 0x876F;
enum uint GL_VERTEX_STREAM4_ATI = 0x8770;
enum uint GL_VERTEX_STREAM5_ATI = 0x8771;
enum uint GL_VERTEX_STREAM6_ATI = 0x8772;
enum uint GL_VERTEX_STREAM7_ATI = 0x8773;
enum uint GL_VERTEX_SOURCE_ATI = 0x8774;
enum uint GL_422_EXT = 0x80CC;
enum uint GL_422_REV_EXT = 0x80CD;
enum uint GL_422_AVERAGE_EXT = 0x80CE;
enum uint GL_422_REV_AVERAGE_EXT = 0x80CF;
enum uint GL_ABGR_EXT = 0x8000;
enum uint GL_BGR_EXT = 0x80E0;
enum uint GL_BGRA_EXT = 0x80E1;
enum uint GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
enum uint GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
enum uint GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
enum uint GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
enum uint GL_UNIFORM_BUFFER_EXT = 0x8DEE;
enum uint GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
enum uint GL_CONSTANT_COLOR_EXT = 0x8001;
enum uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
enum uint GL_CONSTANT_ALPHA_EXT = 0x8003;
enum uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
enum uint GL_BLEND_COLOR_EXT = 0x8005;
enum uint GL_BLEND_EQUATION_RGB_EXT = 0x8009;
enum uint GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
enum uint GL_BLEND_DST_RGB_EXT = 0x80C8;
enum uint GL_BLEND_SRC_RGB_EXT = 0x80C9;
enum uint GL_BLEND_DST_ALPHA_EXT = 0x80CA;
enum uint GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
enum uint GL_MIN_EXT = 0x8007;
enum uint GL_MAX_EXT = 0x8008;
enum uint GL_FUNC_ADD_EXT = 0x8006;
enum uint GL_BLEND_EQUATION_EXT = 0x8009;
enum uint GL_FUNC_SUBTRACT_EXT = 0x800A;
enum uint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
enum uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
enum uint GL_CMYK_EXT = 0x800C;
enum uint GL_CMYKA_EXT = 0x800D;
enum uint GL_PACK_CMYK_HINT_EXT = 0x800E;
enum uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
enum uint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
enum uint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
enum uint GL_CONVOLUTION_1D_EXT = 0x8010;
enum uint GL_CONVOLUTION_2D_EXT = 0x8011;
enum uint GL_SEPARABLE_2D_EXT = 0x8012;
enum uint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
enum uint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
enum uint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
enum uint GL_REDUCE_EXT = 0x8016;
enum uint GL_CONVOLUTION_FORMAT_EXT = 0x8017;
enum uint GL_CONVOLUTION_WIDTH_EXT = 0x8018;
enum uint GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
enum uint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
enum uint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
enum uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
enum uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
enum uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
enum uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
enum uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
enum uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
enum uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
enum uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
enum uint GL_TANGENT_ARRAY_EXT = 0x8439;
enum uint GL_BINORMAL_ARRAY_EXT = 0x843A;
enum uint GL_CURRENT_TANGENT_EXT = 0x843B;
enum uint GL_CURRENT_BINORMAL_EXT = 0x843C;
enum uint GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
enum uint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
enum uint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
enum uint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
enum uint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
enum uint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
enum uint GL_MAP1_TANGENT_EXT = 0x8444;
enum uint GL_MAP2_TANGENT_EXT = 0x8445;
enum uint GL_MAP1_BINORMAL_EXT = 0x8446;
enum uint GL_MAP2_BINORMAL_EXT = 0x8447;
enum uint GL_CULL_VERTEX_EXT = 0x81AA;
enum uint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
enum uint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
enum uint GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
enum uint GL_PROGRAM_OBJECT_EXT = 0x8B40;
enum uint GL_SHADER_OBJECT_EXT = 0x8B48;
enum uint GL_BUFFER_OBJECT_EXT = 0x9151;
enum uint GL_QUERY_OBJECT_EXT = 0x9153;
enum uint GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
enum uint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
enum uint GL_DEPTH_BOUNDS_EXT = 0x8891;
enum uint GL_PROGRAM_MATRIX_EXT = 0x8E2D;
enum uint GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
enum uint GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
enum uint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
enum uint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
enum uint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
enum uint GL_FOG_COORDINATE_EXT = 0x8451;
enum uint GL_FRAGMENT_DEPTH_EXT = 0x8452;
enum uint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
enum uint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
enum uint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
enum uint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
enum uint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
enum uint GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
enum uint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
enum uint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
enum uint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
enum uint GL_MAX_SAMPLES_EXT = 0x8D57;
enum uint GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
enum uint GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
enum uint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
enum uint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
enum uint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
enum uint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
enum uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
enum uint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
enum uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
enum uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
enum uint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
enum uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
enum uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
enum uint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
enum uint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
enum uint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
enum uint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
enum uint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
enum uint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
enum uint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
enum uint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
enum uint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
enum uint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
enum uint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
enum uint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
enum uint GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
enum uint GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
enum uint GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
enum uint GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
enum uint GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
enum uint GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
enum uint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
enum uint GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
enum uint GL_FRAMEBUFFER_EXT = 0x8D40;
enum uint GL_RENDERBUFFER_EXT = 0x8D41;
enum uint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
enum uint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
enum uint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
enum uint GL_STENCIL_INDEX1_EXT = 0x8D46;
enum uint GL_STENCIL_INDEX4_EXT = 0x8D47;
enum uint GL_STENCIL_INDEX8_EXT = 0x8D48;
enum uint GL_STENCIL_INDEX16_EXT = 0x8D49;
enum uint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
enum uint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
enum uint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
enum uint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
enum uint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
enum uint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
enum uint GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
enum uint GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
enum uint GL_GEOMETRY_SHADER_EXT = 0x8DD9;
enum uint GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
enum uint GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
enum uint GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
enum uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
enum uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
enum uint GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
enum uint GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
enum uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
enum uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
enum uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
enum uint GL_LINES_ADJACENCY_EXT = 0x000A;
enum uint GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
enum uint GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
enum uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
enum uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
enum uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
enum uint GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
enum uint GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
enum uint GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
enum uint GL_SAMPLER_BUFFER_EXT = 0x8DC2;
enum uint GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
enum uint GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
enum uint GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
enum uint GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
enum uint GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
enum uint GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
enum uint GL_INT_SAMPLER_1D_EXT = 0x8DC9;
enum uint GL_INT_SAMPLER_2D_EXT = 0x8DCA;
enum uint GL_INT_SAMPLER_3D_EXT = 0x8DCB;
enum uint GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
enum uint GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
enum uint GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
enum uint GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
enum uint GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
enum uint GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
enum uint GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
enum uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
enum uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
enum uint GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
enum uint GL_HISTOGRAM_EXT = 0x8024;
enum uint GL_PROXY_HISTOGRAM_EXT = 0x8025;
enum uint GL_HISTOGRAM_WIDTH_EXT = 0x8026;
enum uint GL_HISTOGRAM_FORMAT_EXT = 0x8027;
enum uint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
enum uint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
enum uint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
enum uint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
enum uint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
enum uint GL_HISTOGRAM_SINK_EXT = 0x802D;
enum uint GL_MINMAX_EXT = 0x802E;
enum uint GL_MINMAX_FORMAT_EXT = 0x802F;
enum uint GL_MINMAX_SINK_EXT = 0x8030;
enum uint GL_TABLE_TOO_LARGE_EXT = 0x8031;
enum uint GL_IUI_V2F_EXT = 0x81AD;
enum uint GL_IUI_V3F_EXT = 0x81AE;
enum uint GL_IUI_N3F_V2F_EXT = 0x81AF;
enum uint GL_IUI_N3F_V3F_EXT = 0x81B0;
enum uint GL_T2F_IUI_V2F_EXT = 0x81B1;
enum uint GL_T2F_IUI_V3F_EXT = 0x81B2;
enum uint GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
enum uint GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
enum uint GL_INDEX_TEST_EXT = 0x81B5;
enum uint GL_INDEX_TEST_FUNC_EXT = 0x81B6;
enum uint GL_INDEX_TEST_REF_EXT = 0x81B7;
enum uint GL_INDEX_MATERIAL_EXT = 0x81B8;
enum uint GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
enum uint GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
enum uint GL_FRAGMENT_MATERIAL_EXT = 0x8349;
enum uint GL_FRAGMENT_NORMAL_EXT = 0x834A;
enum uint GL_FRAGMENT_COLOR_EXT = 0x834C;
enum uint GL_ATTENUATION_EXT = 0x834D;
enum uint GL_SHADOW_ATTENUATION_EXT = 0x834E;
enum uint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
enum uint GL_TEXTURE_LIGHT_EXT = 0x8350;
enum uint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
enum uint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
enum uint GL_MULTISAMPLE_EXT = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
enum uint GL_SAMPLE_MASK_EXT = 0x80A0;
enum uint GL_1PASS_EXT = 0x80A1;
enum uint GL_2PASS_0_EXT = 0x80A2;
enum uint GL_2PASS_1_EXT = 0x80A3;
enum uint GL_4PASS_0_EXT = 0x80A4;
enum uint GL_4PASS_1_EXT = 0x80A5;
enum uint GL_4PASS_2_EXT = 0x80A6;
enum uint GL_4PASS_3_EXT = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_EXT = 0x80A8;
enum uint GL_SAMPLES_EXT = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
enum uint GL_SAMPLE_PATTERN_EXT = 0x80AC;
enum uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
enum uint GL_DEPTH_STENCIL_EXT = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
enum uint GL_DEPTH24_STENCIL8_EXT = 0x88F0;
enum uint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
enum uint GL_R11F_G11F_B10F_EXT = 0x8C3A;
enum uint GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
enum uint GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
enum uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
enum uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
enum uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
enum uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
enum uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
enum uint GL_COLOR_INDEX1_EXT = 0x80E2;
enum uint GL_COLOR_INDEX2_EXT = 0x80E3;
enum uint GL_COLOR_INDEX4_EXT = 0x80E4;
enum uint GL_COLOR_INDEX8_EXT = 0x80E5;
enum uint GL_COLOR_INDEX12_EXT = 0x80E6;
enum uint GL_COLOR_INDEX16_EXT = 0x80E7;
enum uint GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
enum uint GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
enum uint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
enum uint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
enum uint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
enum uint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
enum uint GL_PIXEL_MAG_FILTER_EXT = 0x8331;
enum uint GL_PIXEL_MIN_FILTER_EXT = 0x8332;
enum uint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
enum uint GL_CUBIC_EXT = 0x8334;
enum uint GL_AVERAGE_EXT = 0x8335;
enum uint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
enum uint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
enum uint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
enum uint GL_POINT_SIZE_MIN_EXT = 0x8126;
enum uint GL_POINT_SIZE_MAX_EXT = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_EXT = 0x8129;
enum uint GL_POLYGON_OFFSET_EXT = 0x8037;
enum uint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
enum uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
enum uint GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
enum uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
enum uint GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
enum uint GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
enum uint GL_PROVOKING_VERTEX_EXT = 0x8E4F;
enum uint GL_RASTER_MULTISAMPLE_EXT = 0x9327;
enum uint GL_RASTER_SAMPLES_EXT = 0x9328;
enum uint GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
enum uint GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
enum uint GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
enum uint GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
enum uint GL_RESCALE_NORMAL_EXT = 0x803A;
enum uint GL_COLOR_SUM_EXT = 0x8458;
enum uint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
enum uint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
enum uint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
enum uint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
enum uint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
enum uint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
enum uint GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
enum uint GL_VERTEX_SHADER_BIT_EXT = 0x00000001;
enum uint GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002;
enum uint GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_PROGRAM_SEPARABLE_EXT = 0x8258;
enum uint GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
enum uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
enum uint GL_SINGLE_COLOR_EXT = 0x81F9;
enum uint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
enum uint GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
enum uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
enum uint GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
enum uint GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
enum uint GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
enum uint GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
enum uint GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
enum uint GL_IMAGE_1D_EXT = 0x904C;
enum uint GL_IMAGE_2D_EXT = 0x904D;
enum uint GL_IMAGE_3D_EXT = 0x904E;
enum uint GL_IMAGE_2D_RECT_EXT = 0x904F;
enum uint GL_IMAGE_CUBE_EXT = 0x9050;
enum uint GL_IMAGE_BUFFER_EXT = 0x9051;
enum uint GL_IMAGE_1D_ARRAY_EXT = 0x9052;
enum uint GL_IMAGE_2D_ARRAY_EXT = 0x9053;
enum uint GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
enum uint GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
enum uint GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
enum uint GL_INT_IMAGE_1D_EXT = 0x9057;
enum uint GL_INT_IMAGE_2D_EXT = 0x9058;
enum uint GL_INT_IMAGE_3D_EXT = 0x9059;
enum uint GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
enum uint GL_INT_IMAGE_CUBE_EXT = 0x905B;
enum uint GL_INT_IMAGE_BUFFER_EXT = 0x905C;
enum uint GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
enum uint GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
enum uint GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
enum uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
enum uint GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
enum uint GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
enum uint GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
enum uint GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
enum uint GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
enum uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
enum uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
enum uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
enum uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
enum uint GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
enum uint GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
enum uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
enum uint GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
enum uint GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
enum uint GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
enum uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
enum uint GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
enum uint GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
enum uint GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
enum uint GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
enum uint GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
enum uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
enum uint GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
enum uint GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
enum uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
enum uint GL_STENCIL_TAG_BITS_EXT = 0x88F2;
enum uint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
enum uint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
enum uint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
enum uint GL_INCR_WRAP_EXT = 0x8507;
enum uint GL_DECR_WRAP_EXT = 0x8508;
enum uint GL_ALPHA4_EXT = 0x803B;
enum uint GL_ALPHA8_EXT = 0x803C;
enum uint GL_ALPHA12_EXT = 0x803D;
enum uint GL_ALPHA16_EXT = 0x803E;
enum uint GL_LUMINANCE4_EXT = 0x803F;
enum uint GL_LUMINANCE8_EXT = 0x8040;
enum uint GL_LUMINANCE12_EXT = 0x8041;
enum uint GL_LUMINANCE16_EXT = 0x8042;
enum uint GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
enum uint GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
enum uint GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
enum uint GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
enum uint GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
enum uint GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
enum uint GL_INTENSITY_EXT = 0x8049;
enum uint GL_INTENSITY4_EXT = 0x804A;
enum uint GL_INTENSITY8_EXT = 0x804B;
enum uint GL_INTENSITY12_EXT = 0x804C;
enum uint GL_INTENSITY16_EXT = 0x804D;
enum uint GL_RGB2_EXT = 0x804E;
enum uint GL_RGB4_EXT = 0x804F;
enum uint GL_RGB5_EXT = 0x8050;
enum uint GL_RGB8_EXT = 0x8051;
enum uint GL_RGB10_EXT = 0x8052;
enum uint GL_RGB12_EXT = 0x8053;
enum uint GL_RGB16_EXT = 0x8054;
enum uint GL_RGBA2_EXT = 0x8055;
enum uint GL_RGBA4_EXT = 0x8056;
enum uint GL_RGB5_A1_EXT = 0x8057;
enum uint GL_RGBA8_EXT = 0x8058;
enum uint GL_RGB10_A2_EXT = 0x8059;
enum uint GL_RGBA12_EXT = 0x805A;
enum uint GL_RGBA16_EXT = 0x805B;
enum uint GL_TEXTURE_RED_SIZE_EXT = 0x805C;
enum uint GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
enum uint GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
enum uint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
enum uint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
enum uint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
enum uint GL_REPLACE_EXT = 0x8062;
enum uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
enum uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
enum uint GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
enum uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
enum uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
enum uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
enum uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
enum uint GL_TEXTURE_3D_EXT = 0x806F;
enum uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
enum uint GL_TEXTURE_DEPTH_EXT = 0x8071;
enum uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
enum uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
enum uint GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
enum uint GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
enum uint GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
enum uint GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
enum uint GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
enum uint GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
enum uint GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
enum uint GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
enum uint GL_TEXTURE_BUFFER_EXT = 0x8C2A;
enum uint GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
enum uint GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
enum uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
enum uint GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
enum uint GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
enum uint GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
enum uint GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
enum uint GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
enum uint GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
enum uint GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
enum uint GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
enum uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
enum uint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
enum uint GL_NORMAL_MAP_EXT = 0x8511;
enum uint GL_REFLECTION_MAP_EXT = 0x8512;
enum uint GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
enum uint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
enum uint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
enum uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
enum uint GL_COMBINE_EXT = 0x8570;
enum uint GL_COMBINE_RGB_EXT = 0x8571;
enum uint GL_COMBINE_ALPHA_EXT = 0x8572;
enum uint GL_RGB_SCALE_EXT = 0x8573;
enum uint GL_ADD_SIGNED_EXT = 0x8574;
enum uint GL_INTERPOLATE_EXT = 0x8575;
enum uint GL_CONSTANT_EXT = 0x8576;
enum uint GL_PRIMARY_COLOR_EXT = 0x8577;
enum uint GL_PREVIOUS_EXT = 0x8578;
enum uint GL_SOURCE0_RGB_EXT = 0x8580;
enum uint GL_SOURCE1_RGB_EXT = 0x8581;
enum uint GL_SOURCE2_RGB_EXT = 0x8582;
enum uint GL_SOURCE0_ALPHA_EXT = 0x8588;
enum uint GL_SOURCE1_ALPHA_EXT = 0x8589;
enum uint GL_SOURCE2_ALPHA_EXT = 0x858A;
enum uint GL_OPERAND0_RGB_EXT = 0x8590;
enum uint GL_OPERAND1_RGB_EXT = 0x8591;
enum uint GL_OPERAND2_RGB_EXT = 0x8592;
enum uint GL_OPERAND0_ALPHA_EXT = 0x8598;
enum uint GL_OPERAND1_ALPHA_EXT = 0x8599;
enum uint GL_OPERAND2_ALPHA_EXT = 0x859A;
enum uint GL_DOT3_RGB_EXT = 0x8740;
enum uint GL_DOT3_RGBA_EXT = 0x8741;
enum uint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
enum uint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
enum uint GL_RGBA32UI_EXT = 0x8D70;
enum uint GL_RGB32UI_EXT = 0x8D71;
enum uint GL_ALPHA32UI_EXT = 0x8D72;
enum uint GL_INTENSITY32UI_EXT = 0x8D73;
enum uint GL_LUMINANCE32UI_EXT = 0x8D74;
enum uint GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
enum uint GL_RGBA16UI_EXT = 0x8D76;
enum uint GL_RGB16UI_EXT = 0x8D77;
enum uint GL_ALPHA16UI_EXT = 0x8D78;
enum uint GL_INTENSITY16UI_EXT = 0x8D79;
enum uint GL_LUMINANCE16UI_EXT = 0x8D7A;
enum uint GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
enum uint GL_RGBA8UI_EXT = 0x8D7C;
enum uint GL_RGB8UI_EXT = 0x8D7D;
enum uint GL_ALPHA8UI_EXT = 0x8D7E;
enum uint GL_INTENSITY8UI_EXT = 0x8D7F;
enum uint GL_LUMINANCE8UI_EXT = 0x8D80;
enum uint GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
enum uint GL_RGBA32I_EXT = 0x8D82;
enum uint GL_RGB32I_EXT = 0x8D83;
enum uint GL_ALPHA32I_EXT = 0x8D84;
enum uint GL_INTENSITY32I_EXT = 0x8D85;
enum uint GL_LUMINANCE32I_EXT = 0x8D86;
enum uint GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
enum uint GL_RGBA16I_EXT = 0x8D88;
enum uint GL_RGB16I_EXT = 0x8D89;
enum uint GL_ALPHA16I_EXT = 0x8D8A;
enum uint GL_INTENSITY16I_EXT = 0x8D8B;
enum uint GL_LUMINANCE16I_EXT = 0x8D8C;
enum uint GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
enum uint GL_RGBA8I_EXT = 0x8D8E;
enum uint GL_RGB8I_EXT = 0x8D8F;
enum uint GL_ALPHA8I_EXT = 0x8D90;
enum uint GL_INTENSITY8I_EXT = 0x8D91;
enum uint GL_LUMINANCE8I_EXT = 0x8D92;
enum uint GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
enum uint GL_RED_INTEGER_EXT = 0x8D94;
enum uint GL_GREEN_INTEGER_EXT = 0x8D95;
enum uint GL_BLUE_INTEGER_EXT = 0x8D96;
enum uint GL_ALPHA_INTEGER_EXT = 0x8D97;
enum uint GL_RGB_INTEGER_EXT = 0x8D98;
enum uint GL_RGBA_INTEGER_EXT = 0x8D99;
enum uint GL_BGR_INTEGER_EXT = 0x8D9A;
enum uint GL_BGRA_INTEGER_EXT = 0x8D9B;
enum uint GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
enum uint GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
enum uint GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
enum uint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
enum uint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
enum uint GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
enum uint GL_MIRROR_CLAMP_EXT = 0x8742;
enum uint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
enum uint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
enum uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
enum uint GL_TEXTURE_RESIDENT_EXT = 0x8067;
enum uint GL_TEXTURE_1D_BINDING_EXT = 0x8068;
enum uint GL_TEXTURE_2D_BINDING_EXT = 0x8069;
enum uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
enum uint GL_PERTURB_EXT = 0x85AE;
enum uint GL_TEXTURE_NORMAL_EXT = 0x85AF;
enum uint GL_SRGB_EXT = 0x8C40;
enum uint GL_SRGB8_EXT = 0x8C41;
enum uint GL_SRGB_ALPHA_EXT = 0x8C42;
enum uint GL_SRGB8_ALPHA8_EXT = 0x8C43;
enum uint GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
enum uint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
enum uint GL_SLUMINANCE_EXT = 0x8C46;
enum uint GL_SLUMINANCE8_EXT = 0x8C47;
enum uint GL_COMPRESSED_SRGB_EXT = 0x8C48;
enum uint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
enum uint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
enum uint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
enum uint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
enum uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
enum uint GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
enum uint GL_DECODE_EXT = 0x8A49;
enum uint GL_SKIP_DECODE_EXT = 0x8A4A;
enum uint GL_RGB9_E5_EXT = 0x8C3D;
enum uint GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
enum uint GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
enum uint GL_ALPHA_SNORM = 0x9010;
enum uint GL_LUMINANCE_SNORM = 0x9011;
enum uint GL_LUMINANCE_ALPHA_SNORM = 0x9012;
enum uint GL_INTENSITY_SNORM = 0x9013;
enum uint GL_ALPHA8_SNORM = 0x9014;
enum uint GL_LUMINANCE8_SNORM = 0x9015;
enum uint GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
enum uint GL_INTENSITY8_SNORM = 0x9017;
enum uint GL_ALPHA16_SNORM = 0x9018;
enum uint GL_LUMINANCE16_SNORM = 0x9019;
enum uint GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
enum uint GL_INTENSITY16_SNORM = 0x901B;
enum uint GL_RED_SNORM = 0x8F90;
enum uint GL_RG_SNORM = 0x8F91;
enum uint GL_RGB_SNORM = 0x8F92;
enum uint GL_RGBA_SNORM = 0x8F93;
enum uint GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
enum uint GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
enum uint GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
enum uint GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
enum uint GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
enum uint GL_TIME_ELAPSED_EXT = 0x88BF;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
enum uint GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
enum uint GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_EXT = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
enum uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
enum uint GL_VERTEX_ARRAY_EXT = 0x8074;
enum uint GL_NORMAL_ARRAY_EXT = 0x8075;
enum uint GL_COLOR_ARRAY_EXT = 0x8076;
enum uint GL_INDEX_ARRAY_EXT = 0x8077;
enum uint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
enum uint GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
enum uint GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
enum uint GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
enum uint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
enum uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
enum uint GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
enum uint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
enum uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
enum uint GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
enum uint GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
enum uint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
enum uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
enum uint GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
enum uint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
enum uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
enum uint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
enum uint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
enum uint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
enum uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
enum uint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
enum uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
enum uint GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
enum uint GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
enum uint GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
enum uint GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
enum uint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
enum uint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
enum uint GL_DOUBLE_VEC2_EXT = 0x8FFC;
enum uint GL_DOUBLE_VEC3_EXT = 0x8FFD;
enum uint GL_DOUBLE_VEC4_EXT = 0x8FFE;
enum uint GL_DOUBLE_MAT2_EXT = 0x8F46;
enum uint GL_DOUBLE_MAT3_EXT = 0x8F47;
enum uint GL_DOUBLE_MAT4_EXT = 0x8F48;
enum uint GL_DOUBLE_MAT2x3_EXT = 0x8F49;
enum uint GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
enum uint GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
enum uint GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
enum uint GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
enum uint GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
enum uint GL_VERTEX_SHADER_EXT = 0x8780;
enum uint GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
enum uint GL_OP_INDEX_EXT = 0x8782;
enum uint GL_OP_NEGATE_EXT = 0x8783;
enum uint GL_OP_DOT3_EXT = 0x8784;
enum uint GL_OP_DOT4_EXT = 0x8785;
enum uint GL_OP_MUL_EXT = 0x8786;
enum uint GL_OP_ADD_EXT = 0x8787;
enum uint GL_OP_MADD_EXT = 0x8788;
enum uint GL_OP_FRAC_EXT = 0x8789;
enum uint GL_OP_MAX_EXT = 0x878A;
enum uint GL_OP_MIN_EXT = 0x878B;
enum uint GL_OP_SET_GE_EXT = 0x878C;
enum uint GL_OP_SET_LT_EXT = 0x878D;
enum uint GL_OP_CLAMP_EXT = 0x878E;
enum uint GL_OP_FLOOR_EXT = 0x878F;
enum uint GL_OP_ROUND_EXT = 0x8790;
enum uint GL_OP_EXP_BASE_2_EXT = 0x8791;
enum uint GL_OP_LOG_BASE_2_EXT = 0x8792;
enum uint GL_OP_POWER_EXT = 0x8793;
enum uint GL_OP_RECIP_EXT = 0x8794;
enum uint GL_OP_RECIP_SQRT_EXT = 0x8795;
enum uint GL_OP_SUB_EXT = 0x8796;
enum uint GL_OP_CROSS_PRODUCT_EXT = 0x8797;
enum uint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
enum uint GL_OP_MOV_EXT = 0x8799;
enum uint GL_OUTPUT_VERTEX_EXT = 0x879A;
enum uint GL_OUTPUT_COLOR0_EXT = 0x879B;
enum uint GL_OUTPUT_COLOR1_EXT = 0x879C;
enum uint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
enum uint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
enum uint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
enum uint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
enum uint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
enum uint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
enum uint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
enum uint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
enum uint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
enum uint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
enum uint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
enum uint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
enum uint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
enum uint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
enum uint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
enum uint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
enum uint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
enum uint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
enum uint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
enum uint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
enum uint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
enum uint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
enum uint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
enum uint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
enum uint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
enum uint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
enum uint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
enum uint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
enum uint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
enum uint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
enum uint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
enum uint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
enum uint GL_OUTPUT_FOG_EXT = 0x87BD;
enum uint GL_SCALAR_EXT = 0x87BE;
enum uint GL_VECTOR_EXT = 0x87BF;
enum uint GL_MATRIX_EXT = 0x87C0;
enum uint GL_VARIANT_EXT = 0x87C1;
enum uint GL_INVARIANT_EXT = 0x87C2;
enum uint GL_LOCAL_CONSTANT_EXT = 0x87C3;
enum uint GL_LOCAL_EXT = 0x87C4;
enum uint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
enum uint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
enum uint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
enum uint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
enum uint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
enum uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
enum uint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
enum uint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
enum uint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
enum uint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
enum uint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
enum uint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
enum uint GL_X_EXT = 0x87D5;
enum uint GL_Y_EXT = 0x87D6;
enum uint GL_Z_EXT = 0x87D7;
enum uint GL_W_EXT = 0x87D8;
enum uint GL_NEGATIVE_X_EXT = 0x87D9;
enum uint GL_NEGATIVE_Y_EXT = 0x87DA;
enum uint GL_NEGATIVE_Z_EXT = 0x87DB;
enum uint GL_NEGATIVE_W_EXT = 0x87DC;
enum uint GL_ZERO_EXT = 0x87DD;
enum uint GL_ONE_EXT = 0x87DE;
enum uint GL_NEGATIVE_ONE_EXT = 0x87DF;
enum uint GL_NORMALIZED_RANGE_EXT = 0x87E0;
enum uint GL_FULL_RANGE_EXT = 0x87E1;
enum uint GL_CURRENT_VERTEX_EXT = 0x87E2;
enum uint GL_MVP_MATRIX_EXT = 0x87E3;
enum uint GL_VARIANT_VALUE_EXT = 0x87E4;
enum uint GL_VARIANT_DATATYPE_EXT = 0x87E5;
enum uint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
enum uint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
enum uint GL_VARIANT_ARRAY_EXT = 0x87E8;
enum uint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
enum uint GL_INVARIANT_VALUE_EXT = 0x87EA;
enum uint GL_INVARIANT_DATATYPE_EXT = 0x87EB;
enum uint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
enum uint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
enum uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
enum uint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
enum uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
enum uint GL_MODELVIEW1_MATRIX_EXT = 0x8506;
enum uint GL_VERTEX_WEIGHTING_EXT = 0x8509;
enum uint GL_MODELVIEW0_EXT = 0x1700;
enum uint GL_MODELVIEW1_EXT = 0x850A;
enum uint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
enum uint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
enum uint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
enum uint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
enum uint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
enum uint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
enum uint GL_SYNC_X11_FENCE_EXT = 0x90E1;
enum uint GL_IGNORE_BORDER_HP = 0x8150;
enum uint GL_CONSTANT_BORDER_HP = 0x8151;
enum uint GL_REPLICATE_BORDER_HP = 0x8153;
enum uint GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
enum uint GL_IMAGE_SCALE_X_HP = 0x8155;
enum uint GL_IMAGE_SCALE_Y_HP = 0x8156;
enum uint GL_IMAGE_TRANSLATE_X_HP = 0x8157;
enum uint GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
enum uint GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
enum uint GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
enum uint GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
enum uint GL_IMAGE_MAG_FILTER_HP = 0x815C;
enum uint GL_IMAGE_MIN_FILTER_HP = 0x815D;
enum uint GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
enum uint GL_CUBIC_HP = 0x815F;
enum uint GL_AVERAGE_HP = 0x8160;
enum uint GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
enum uint GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
enum uint GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
enum uint GL_OCCLUSION_TEST_HP = 0x8165;
enum uint GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
enum uint GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
enum uint GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
enum uint GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
enum uint GL_CULL_VERTEX_IBM = 103050;
enum uint GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
enum uint GL_ALL_STATIC_DATA_IBM = 103060;
enum uint GL_STATIC_VERTEX_ARRAY_IBM = 103061;
enum uint GL_MIRRORED_REPEAT_IBM = 0x8370;
enum uint GL_VERTEX_ARRAY_LIST_IBM = 103070;
enum uint GL_NORMAL_ARRAY_LIST_IBM = 103071;
enum uint GL_COLOR_ARRAY_LIST_IBM = 103072;
enum uint GL_INDEX_ARRAY_LIST_IBM = 103073;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
enum uint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
enum uint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
enum uint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
enum uint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
enum uint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
enum uint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
enum uint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
enum uint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
enum uint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
enum uint GL_RED_MIN_CLAMP_INGR = 0x8560;
enum uint GL_GREEN_MIN_CLAMP_INGR = 0x8561;
enum uint GL_BLUE_MIN_CLAMP_INGR = 0x8562;
enum uint GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
enum uint GL_RED_MAX_CLAMP_INGR = 0x8564;
enum uint GL_GREEN_MAX_CLAMP_INGR = 0x8565;
enum uint GL_BLUE_MAX_CLAMP_INGR = 0x8566;
enum uint GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
enum uint GL_INTERLACE_READ_INGR = 0x8568;
enum uint GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
enum uint GL_LAYOUT_DEFAULT_INTEL = 0;
enum uint GL_LAYOUT_LINEAR_INTEL = 1;
enum uint GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
enum uint GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
enum uint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
enum uint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
enum uint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
enum uint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
enum uint GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
enum uint GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
enum uint GL_PERFQUERY_WAIT_INTEL = 0x83FB;
enum uint GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
enum uint GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
enum uint GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
enum uint GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
enum uint GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
enum uint GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
enum uint GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
enum uint GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
enum uint GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
enum uint GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
enum uint GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
enum uint GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
enum uint GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
enum uint GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
enum uint GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
enum uint GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
enum uint GL_MULTIPLY_KHR = 0x9294;
enum uint GL_SCREEN_KHR = 0x9295;
enum uint GL_OVERLAY_KHR = 0x9296;
enum uint GL_DARKEN_KHR = 0x9297;
enum uint GL_LIGHTEN_KHR = 0x9298;
enum uint GL_COLORDODGE_KHR = 0x9299;
enum uint GL_COLORBURN_KHR = 0x929A;
enum uint GL_HARDLIGHT_KHR = 0x929B;
enum uint GL_SOFTLIGHT_KHR = 0x929C;
enum uint GL_DIFFERENCE_KHR = 0x929E;
enum uint GL_EXCLUSION_KHR = 0x92A0;
enum uint GL_HSL_HUE_KHR = 0x92AD;
enum uint GL_HSL_SATURATION_KHR = 0x92AE;
enum uint GL_HSL_COLOR_KHR = 0x92AF;
enum uint GL_HSL_LUMINOSITY_KHR = 0x92B0;
enum uint GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
enum uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
enum uint GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
enum uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
enum uint GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
enum uint GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
enum uint GL_DEBUG_SOURCE_API_KHR = 0x8246;
enum uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
enum uint GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
enum uint GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
enum uint GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
enum uint GL_DEBUG_SOURCE_OTHER_KHR = 0x824B;
enum uint GL_DEBUG_TYPE_ERROR_KHR = 0x824C;
enum uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
enum uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
enum uint GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
enum uint GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
enum uint GL_DEBUG_TYPE_OTHER_KHR = 0x8251;
enum uint GL_DEBUG_TYPE_MARKER_KHR = 0x8268;
enum uint GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
enum uint GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
enum uint GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
enum uint GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
enum uint GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
enum uint GL_BUFFER_KHR = 0x82E0;
enum uint GL_SHADER_KHR = 0x82E1;
enum uint GL_PROGRAM_KHR = 0x82E2;
enum uint GL_VERTEX_ARRAY_KHR = 0x8074;
enum uint GL_QUERY_KHR = 0x82E3;
enum uint GL_PROGRAM_PIPELINE_KHR = 0x82E4;
enum uint GL_SAMPLER_KHR = 0x82E6;
enum uint GL_MAX_LABEL_LENGTH_KHR = 0x82E8;
enum uint GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
enum uint GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
enum uint GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
enum uint GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146;
enum uint GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
enum uint GL_DEBUG_SEVERITY_LOW_KHR = 0x9148;
enum uint GL_DEBUG_OUTPUT_KHR = 0x92E0;
enum uint GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
enum uint GL_STACK_OVERFLOW_KHR = 0x0503;
enum uint GL_STACK_UNDERFLOW_KHR = 0x0504;
enum uint GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
enum uint GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
enum uint GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
enum uint GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
enum uint GL_GUILTY_CONTEXT_RESET_KHR = 0x8253;
enum uint GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254;
enum uint GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
enum uint GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
enum uint GL_NO_RESET_NOTIFICATION_KHR = 0x8261;
enum uint GL_CONTEXT_LOST_KHR = 0x0507;
enum uint GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
enum uint GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
enum uint GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
enum uint GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
enum uint GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
enum uint GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
enum uint GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
enum uint GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
enum uint GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
enum uint GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
enum uint GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
enum uint GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
enum uint GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
enum uint GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
enum uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
enum uint GL_TEXTURE_1D_STACK_MESAX = 0x8759;
enum uint GL_TEXTURE_2D_STACK_MESAX = 0x875A;
enum uint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
enum uint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
enum uint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
enum uint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
enum uint GL_PACK_INVERT_MESA = 0x8758;
enum uint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
enum uint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
enum uint GL_YCBCR_MESA = 0x8757;
enum uint GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
enum uint GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
enum uint GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
enum uint GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
enum uint GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
enum uint GL_BLEND_OVERLAP_NV = 0x9281;
enum uint GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
enum uint GL_BLUE_NV = 0x1905;
enum uint GL_COLORBURN_NV = 0x929A;
enum uint GL_COLORDODGE_NV = 0x9299;
enum uint GL_CONJOINT_NV = 0x9284;
enum uint GL_CONTRAST_NV = 0x92A1;
enum uint GL_DARKEN_NV = 0x9297;
enum uint GL_DIFFERENCE_NV = 0x929E;
enum uint GL_DISJOINT_NV = 0x9283;
enum uint GL_DST_ATOP_NV = 0x928F;
enum uint GL_DST_IN_NV = 0x928B;
enum uint GL_DST_NV = 0x9287;
enum uint GL_DST_OUT_NV = 0x928D;
enum uint GL_DST_OVER_NV = 0x9289;
enum uint GL_EXCLUSION_NV = 0x92A0;
enum uint GL_GREEN_NV = 0x1904;
enum uint GL_HARDLIGHT_NV = 0x929B;
enum uint GL_HARDMIX_NV = 0x92A9;
enum uint GL_HSL_COLOR_NV = 0x92AF;
enum uint GL_HSL_HUE_NV = 0x92AD;
enum uint GL_HSL_LUMINOSITY_NV = 0x92B0;
enum uint GL_HSL_SATURATION_NV = 0x92AE;
enum uint GL_INVERT_OVG_NV = 0x92B4;
enum uint GL_INVERT_RGB_NV = 0x92A3;
enum uint GL_LIGHTEN_NV = 0x9298;
enum uint GL_LINEARBURN_NV = 0x92A5;
enum uint GL_LINEARDODGE_NV = 0x92A4;
enum uint GL_LINEARLIGHT_NV = 0x92A7;
enum uint GL_MINUS_CLAMPED_NV = 0x92B3;
enum uint GL_MINUS_NV = 0x929F;
enum uint GL_MULTIPLY_NV = 0x9294;
enum uint GL_OVERLAY_NV = 0x9296;
enum uint GL_PINLIGHT_NV = 0x92A8;
enum uint GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
enum uint GL_PLUS_CLAMPED_NV = 0x92B1;
enum uint GL_PLUS_DARKER_NV = 0x9292;
enum uint GL_PLUS_NV = 0x9291;
enum uint GL_RED_NV = 0x1903;
enum uint GL_SCREEN_NV = 0x9295;
enum uint GL_SOFTLIGHT_NV = 0x929C;
enum uint GL_SRC_ATOP_NV = 0x928E;
enum uint GL_SRC_IN_NV = 0x928A;
enum uint GL_SRC_NV = 0x9286;
enum uint GL_SRC_OUT_NV = 0x928C;
enum uint GL_SRC_OVER_NV = 0x9288;
enum uint GL_UNCORRELATED_NV = 0x9282;
enum uint GL_VIVIDLIGHT_NV = 0x92A6;
enum uint GL_XOR_NV = 0x1506;
enum uint GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
enum uint GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
enum uint GL_NOP_COMMAND_NV = 0x0001;
enum uint GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
enum uint GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
enum uint GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
enum uint GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
enum uint GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
enum uint GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
enum uint GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
enum uint GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
enum uint GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
enum uint GL_BLEND_COLOR_COMMAND_NV = 0x000B;
enum uint GL_STENCIL_REF_COMMAND_NV = 0x000C;
enum uint GL_LINE_WIDTH_COMMAND_NV = 0x000D;
enum uint GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
enum uint GL_ALPHA_REF_COMMAND_NV = 0x000F;
enum uint GL_VIEWPORT_COMMAND_NV = 0x0010;
enum uint GL_SCISSOR_COMMAND_NV = 0x0011;
enum uint GL_FRONT_FACE_COMMAND_NV = 0x0012;
enum uint GL_COMPUTE_PROGRAM_NV = 0x90FB;
enum uint GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
enum uint GL_QUERY_WAIT_NV = 0x8E13;
enum uint GL_QUERY_NO_WAIT_NV = 0x8E14;
enum uint GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
enum uint GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
enum uint GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
enum uint GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
enum uint GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
enum uint GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
enum uint GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
enum uint GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
enum uint GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
enum uint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
enum uint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
enum uint GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
enum uint GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
enum uint GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
enum uint GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
enum uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
enum uint GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
enum uint GL_DEPTH_CLAMP_NV = 0x864F;
enum uint GL_EVAL_2D_NV = 0x86C0;
enum uint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
enum uint GL_MAP_TESSELLATION_NV = 0x86C2;
enum uint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
enum uint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
enum uint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
enum uint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
enum uint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
enum uint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
enum uint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
enum uint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
enum uint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
enum uint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
enum uint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
enum uint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
enum uint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
enum uint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
enum uint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
enum uint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
enum uint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
enum uint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
enum uint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
enum uint GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
enum uint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
enum uint GL_SAMPLE_POSITION_NV = 0x8E50;
enum uint GL_SAMPLE_MASK_NV = 0x8E51;
enum uint GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
enum uint GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
enum uint GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
enum uint GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
enum uint GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
enum uint GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
enum uint GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
enum uint GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
enum uint GL_ALL_COMPLETED_NV = 0x84F2;
enum uint GL_FENCE_STATUS_NV = 0x84F3;
enum uint GL_FENCE_CONDITION_NV = 0x84F4;
enum uint GL_FILL_RECTANGLE_NV = 0x933C;
enum uint GL_FLOAT_R_NV = 0x8880;
enum uint GL_FLOAT_RG_NV = 0x8881;
enum uint GL_FLOAT_RGB_NV = 0x8882;
enum uint GL_FLOAT_RGBA_NV = 0x8883;
enum uint GL_FLOAT_R16_NV = 0x8884;
enum uint GL_FLOAT_R32_NV = 0x8885;
enum uint GL_FLOAT_RG16_NV = 0x8886;
enum uint GL_FLOAT_RG32_NV = 0x8887;
enum uint GL_FLOAT_RGB16_NV = 0x8888;
enum uint GL_FLOAT_RGB32_NV = 0x8889;
enum uint GL_FLOAT_RGBA16_NV = 0x888A;
enum uint GL_FLOAT_RGBA32_NV = 0x888B;
enum uint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
enum uint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
enum uint GL_FLOAT_RGBA_MODE_NV = 0x888E;
enum uint GL_FOG_DISTANCE_MODE_NV = 0x855A;
enum uint GL_EYE_RADIAL_NV = 0x855B;
enum uint GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
enum uint GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
enum uint GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
enum uint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
enum uint GL_FRAGMENT_PROGRAM_NV = 0x8870;
enum uint GL_MAX_TEXTURE_COORDS_NV = 0x8871;
enum uint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
enum uint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
enum uint GL_PROGRAM_ERROR_STRING_NV = 0x8874;
enum uint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
enum uint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
enum uint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
enum uint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
enum uint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
enum uint GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
enum uint GL_COLOR_SAMPLES_NV = 0x8E20;
enum uint GL_DEPTH_SAMPLES_NV = 0x932D;
enum uint GL_STENCIL_SAMPLES_NV = 0x932E;
enum uint GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
enum uint GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
enum uint GL_COVERAGE_MODULATION_NV = 0x9332;
enum uint GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
enum uint GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
enum uint GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
enum uint GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
enum uint GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
enum uint GL_GEOMETRY_PROGRAM_NV = 0x8C26;
enum uint GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
enum uint GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
enum uint GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
enum uint GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
enum uint GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
enum uint GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
enum uint GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
enum uint GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
enum uint GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
enum uint GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
enum uint GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
enum uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
enum uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
enum uint GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
enum uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
enum uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
enum uint GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
enum uint GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
enum uint GL_HALF_FLOAT_NV = 0x140B;
enum uint GL_MULTISAMPLES_NV = 0x9371;
enum uint GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
enum uint GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
enum uint GL_CONFORMANT_NV = 0x9374;
enum uint GL_MAX_SHININESS_NV = 0x8504;
enum uint GL_MAX_SPOT_EXPONENT_NV = 0x8505;
enum uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
enum uint GL_PIXEL_COUNTER_BITS_NV = 0x8864;
enum uint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
enum uint GL_PIXEL_COUNT_NV = 0x8866;
enum uint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
enum uint GL_DEPTH_STENCIL_NV = 0x84F9;
enum uint GL_UNSIGNED_INT_24_8_NV = 0x84FA;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
enum uint GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
enum uint GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
enum uint GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
enum uint GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
enum uint GL_PATH_FORMAT_SVG_NV = 0x9070;
enum uint GL_PATH_FORMAT_PS_NV = 0x9071;
enum uint GL_STANDARD_FONT_NAME_NV = 0x9072;
enum uint GL_SYSTEM_FONT_NAME_NV = 0x9073;
enum uint GL_FILE_NAME_NV = 0x9074;
enum uint GL_PATH_STROKE_WIDTH_NV = 0x9075;
enum uint GL_PATH_END_CAPS_NV = 0x9076;
enum uint GL_PATH_INITIAL_END_CAP_NV = 0x9077;
enum uint GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
enum uint GL_PATH_JOIN_STYLE_NV = 0x9079;
enum uint GL_PATH_MITER_LIMIT_NV = 0x907A;
enum uint GL_PATH_DASH_CAPS_NV = 0x907B;
enum uint GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
enum uint GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
enum uint GL_PATH_DASH_OFFSET_NV = 0x907E;
enum uint GL_PATH_CLIENT_LENGTH_NV = 0x907F;
enum uint GL_PATH_FILL_MODE_NV = 0x9080;
enum uint GL_PATH_FILL_MASK_NV = 0x9081;
enum uint GL_PATH_FILL_COVER_MODE_NV = 0x9082;
enum uint GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
enum uint GL_PATH_STROKE_MASK_NV = 0x9084;
enum uint GL_COUNT_UP_NV = 0x9088;
enum uint GL_COUNT_DOWN_NV = 0x9089;
enum uint GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
enum uint GL_CONVEX_HULL_NV = 0x908B;
enum uint GL_BOUNDING_BOX_NV = 0x908D;
enum uint GL_TRANSLATE_X_NV = 0x908E;
enum uint GL_TRANSLATE_Y_NV = 0x908F;
enum uint GL_TRANSLATE_2D_NV = 0x9090;
enum uint GL_TRANSLATE_3D_NV = 0x9091;
enum uint GL_AFFINE_2D_NV = 0x9092;
enum uint GL_AFFINE_3D_NV = 0x9094;
enum uint GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
enum uint GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
enum uint GL_UTF8_NV = 0x909A;
enum uint GL_UTF16_NV = 0x909B;
enum uint GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
enum uint GL_PATH_COMMAND_COUNT_NV = 0x909D;
enum uint GL_PATH_COORD_COUNT_NV = 0x909E;
enum uint GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
enum uint GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
enum uint GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
enum uint GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
enum uint GL_SQUARE_NV = 0x90A3;
enum uint GL_ROUND_NV = 0x90A4;
enum uint GL_TRIANGULAR_NV = 0x90A5;
enum uint GL_BEVEL_NV = 0x90A6;
enum uint GL_MITER_REVERT_NV = 0x90A7;
enum uint GL_MITER_TRUNCATE_NV = 0x90A8;
enum uint GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
enum uint GL_USE_MISSING_GLYPH_NV = 0x90AA;
enum uint GL_PATH_ERROR_POSITION_NV = 0x90AB;
enum uint GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
enum uint GL_ADJACENT_PAIRS_NV = 0x90AE;
enum uint GL_FIRST_TO_REST_NV = 0x90AF;
enum uint GL_PATH_GEN_MODE_NV = 0x90B0;
enum uint GL_PATH_GEN_COEFF_NV = 0x90B1;
enum uint GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
enum uint GL_PATH_STENCIL_FUNC_NV = 0x90B7;
enum uint GL_PATH_STENCIL_REF_NV = 0x90B8;
enum uint GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
enum uint GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
enum uint GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
enum uint GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
enum uint GL_MOVE_TO_RESETS_NV = 0x90B5;
enum uint GL_MOVE_TO_CONTINUES_NV = 0x90B6;
enum uint GL_CLOSE_PATH_NV = 0x00;
enum uint GL_MOVE_TO_NV = 0x02;
enum uint GL_RELATIVE_MOVE_TO_NV = 0x03;
enum uint GL_LINE_TO_NV = 0x04;
enum uint GL_RELATIVE_LINE_TO_NV = 0x05;
enum uint GL_HORIZONTAL_LINE_TO_NV = 0x06;
enum uint GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
enum uint GL_VERTICAL_LINE_TO_NV = 0x08;
enum uint GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
enum uint GL_QUADRATIC_CURVE_TO_NV = 0x0A;
enum uint GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
enum uint GL_CUBIC_CURVE_TO_NV = 0x0C;
enum uint GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
enum uint GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
enum uint GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
enum uint GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
enum uint GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
enum uint GL_SMALL_CCW_ARC_TO_NV = 0x12;
enum uint GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
enum uint GL_SMALL_CW_ARC_TO_NV = 0x14;
enum uint GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
enum uint GL_LARGE_CCW_ARC_TO_NV = 0x16;
enum uint GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
enum uint GL_LARGE_CW_ARC_TO_NV = 0x18;
enum uint GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
enum uint GL_RESTART_PATH_NV = 0xF0;
enum uint GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
enum uint GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
enum uint GL_RECT_NV = 0xF6;
enum uint GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
enum uint GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
enum uint GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
enum uint GL_ARC_TO_NV = 0xFE;
enum uint GL_RELATIVE_ARC_TO_NV = 0xFF;
enum uint GL_BOLD_BIT_NV = 0x01;
enum uint GL_ITALIC_BIT_NV = 0x02;
enum uint GL_GLYPH_WIDTH_BIT_NV = 0x01;
enum uint GL_GLYPH_HEIGHT_BIT_NV = 0x02;
enum uint GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
enum uint GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
enum uint GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
enum uint GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
enum uint GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
enum uint GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
enum uint GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
enum uint GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
enum uint GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
enum uint GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
enum uint GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
enum uint GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
enum uint GL_FONT_ASCENDER_BIT_NV = 0x00200000;
enum uint GL_FONT_DESCENDER_BIT_NV = 0x00400000;
enum uint GL_FONT_HEIGHT_BIT_NV = 0x00800000;
enum uint GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
enum uint GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
enum uint GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
enum uint GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
enum uint GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
enum uint GL_ROUNDED_RECT_NV = 0xE8;
enum uint GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
enum uint GL_ROUNDED_RECT2_NV = 0xEA;
enum uint GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
enum uint GL_ROUNDED_RECT4_NV = 0xEC;
enum uint GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
enum uint GL_ROUNDED_RECT8_NV = 0xEE;
enum uint GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
enum uint GL_RELATIVE_RECT_NV = 0xF7;
enum uint GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
enum uint GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
enum uint GL_FONT_UNAVAILABLE_NV = 0x936A;
enum uint GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
enum uint GL_CONIC_CURVE_TO_NV = 0x1A;
enum uint GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
enum uint GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
enum uint GL_STANDARD_FONT_FORMAT_NV = 0x936C;
enum uint GL_2_BYTES_NV = 0x1407;
enum uint GL_3_BYTES_NV = 0x1408;
enum uint GL_4_BYTES_NV = 0x1409;
enum uint GL_EYE_LINEAR_NV = 0x2400;
enum uint GL_OBJECT_LINEAR_NV = 0x2401;
enum uint GL_CONSTANT_NV = 0x8576;
enum uint GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
enum uint GL_PRIMARY_COLOR_NV = 0x852C;
enum uint GL_SECONDARY_COLOR_NV = 0x852D;
enum uint GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
enum uint GL_PATH_PROJECTION_NV = 0x1701;
enum uint GL_PATH_MODELVIEW_NV = 0x1700;
enum uint GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
enum uint GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
enum uint GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
enum uint GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
enum uint GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
enum uint GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
enum uint GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
enum uint GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
enum uint GL_FRAGMENT_INPUT_NV = 0x936D;
enum uint GL_SHARED_EDGE_NV = 0xC0;
enum uint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
enum uint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
enum uint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
enum uint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
enum uint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
enum uint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
enum uint GL_POINT_SPRITE_NV = 0x8861;
enum uint GL_COORD_REPLACE_NV = 0x8862;
enum uint GL_POINT_SPRITE_R_MODE_NV = 0x8863;
enum uint GL_FRAME_NV = 0x8E26;
enum uint GL_FIELDS_NV = 0x8E27;
enum uint GL_CURRENT_TIME_NV = 0x8E28;
enum uint GL_NUM_FILL_STREAMS_NV = 0x8E29;
enum uint GL_PRESENT_TIME_NV = 0x8E2A;
enum uint GL_PRESENT_DURATION_NV = 0x8E2B;
enum uint GL_PRIMITIVE_RESTART_NV = 0x8558;
enum uint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
enum uint GL_REGISTER_COMBINERS_NV = 0x8522;
enum uint GL_VARIABLE_A_NV = 0x8523;
enum uint GL_VARIABLE_B_NV = 0x8524;
enum uint GL_VARIABLE_C_NV = 0x8525;
enum uint GL_VARIABLE_D_NV = 0x8526;
enum uint GL_VARIABLE_E_NV = 0x8527;
enum uint GL_VARIABLE_F_NV = 0x8528;
enum uint GL_VARIABLE_G_NV = 0x8529;
enum uint GL_CONSTANT_COLOR0_NV = 0x852A;
enum uint GL_CONSTANT_COLOR1_NV = 0x852B;
enum uint GL_SPARE0_NV = 0x852E;
enum uint GL_SPARE1_NV = 0x852F;
enum uint GL_DISCARD_NV = 0x8530;
enum uint GL_E_TIMES_F_NV = 0x8531;
enum uint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
enum uint GL_UNSIGNED_IDENTITY_NV = 0x8536;
enum uint GL_UNSIGNED_INVERT_NV = 0x8537;
enum uint GL_EXPAND_NORMAL_NV = 0x8538;
enum uint GL_EXPAND_NEGATE_NV = 0x8539;
enum uint GL_HALF_BIAS_NORMAL_NV = 0x853A;
enum uint GL_HALF_BIAS_NEGATE_NV = 0x853B;
enum uint GL_SIGNED_IDENTITY_NV = 0x853C;
enum uint GL_SIGNED_NEGATE_NV = 0x853D;
enum uint GL_SCALE_BY_TWO_NV = 0x853E;
enum uint GL_SCALE_BY_FOUR_NV = 0x853F;
enum uint GL_SCALE_BY_ONE_HALF_NV = 0x8540;
enum uint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
enum uint GL_COMBINER_INPUT_NV = 0x8542;
enum uint GL_COMBINER_MAPPING_NV = 0x8543;
enum uint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
enum uint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
enum uint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
enum uint GL_COMBINER_MUX_SUM_NV = 0x8547;
enum uint GL_COMBINER_SCALE_NV = 0x8548;
enum uint GL_COMBINER_BIAS_NV = 0x8549;
enum uint GL_COMBINER_AB_OUTPUT_NV = 0x854A;
enum uint GL_COMBINER_CD_OUTPUT_NV = 0x854B;
enum uint GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
enum uint GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
enum uint GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
enum uint GL_COLOR_SUM_CLAMP_NV = 0x854F;
enum uint GL_COMBINER0_NV = 0x8550;
enum uint GL_COMBINER1_NV = 0x8551;
enum uint GL_COMBINER2_NV = 0x8552;
enum uint GL_COMBINER3_NV = 0x8553;
enum uint GL_COMBINER4_NV = 0x8554;
enum uint GL_COMBINER5_NV = 0x8555;
enum uint GL_COMBINER6_NV = 0x8556;
enum uint GL_COMBINER7_NV = 0x8557;
enum uint GL_PER_STAGE_CONSTANTS_NV = 0x8535;
enum uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
enum uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
enum uint GL_SAMPLE_LOCATION_NV = 0x8E50;
enum uint GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
enum uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
enum uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
enum uint GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
enum uint GL_GPU_ADDRESS_NV = 0x8F34;
enum uint GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
enum uint GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
enum uint GL_WARP_SIZE_NV = 0x9339;
enum uint GL_WARPS_PER_SM_NV = 0x933A;
enum uint GL_SM_COUNT_NV = 0x933B;
enum uint GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
enum uint GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
enum uint GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
enum uint GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
enum uint GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
enum uint GL_EMBOSS_LIGHT_NV = 0x855D;
enum uint GL_EMBOSS_CONSTANT_NV = 0x855E;
enum uint GL_EMBOSS_MAP_NV = 0x855F;
enum uint GL_NORMAL_MAP_NV = 0x8511;
enum uint GL_REFLECTION_MAP_NV = 0x8512;
enum uint GL_COMBINE4_NV = 0x8503;
enum uint GL_SOURCE3_RGB_NV = 0x8583;
enum uint GL_SOURCE3_ALPHA_NV = 0x858B;
enum uint GL_OPERAND3_RGB_NV = 0x8593;
enum uint GL_OPERAND3_ALPHA_NV = 0x859B;
enum uint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
enum uint GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
enum uint GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
enum uint GL_TEXTURE_RECTANGLE_NV = 0x84F5;
enum uint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
enum uint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
enum uint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
enum uint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
enum uint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
enum uint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
enum uint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
enum uint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
enum uint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
enum uint GL_SHADER_CONSISTENT_NV = 0x86DD;
enum uint GL_TEXTURE_SHADER_NV = 0x86DE;
enum uint GL_SHADER_OPERATION_NV = 0x86DF;
enum uint GL_CULL_MODES_NV = 0x86E0;
enum uint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
enum uint GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
enum uint GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
enum uint GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
enum uint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
enum uint GL_CONST_EYE_NV = 0x86E5;
enum uint GL_PASS_THROUGH_NV = 0x86E6;
enum uint GL_CULL_FRAGMENT_NV = 0x86E7;
enum uint GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
enum uint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
enum uint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
enum uint GL_DOT_PRODUCT_NV = 0x86EC;
enum uint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
enum uint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
enum uint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
enum uint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
enum uint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
enum uint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
enum uint GL_HILO_NV = 0x86F4;
enum uint GL_DSDT_NV = 0x86F5;
enum uint GL_DSDT_MAG_NV = 0x86F6;
enum uint GL_DSDT_MAG_VIB_NV = 0x86F7;
enum uint GL_HILO16_NV = 0x86F8;
enum uint GL_SIGNED_HILO_NV = 0x86F9;
enum uint GL_SIGNED_HILO16_NV = 0x86FA;
enum uint GL_SIGNED_RGBA_NV = 0x86FB;
enum uint GL_SIGNED_RGBA8_NV = 0x86FC;
enum uint GL_SIGNED_RGB_NV = 0x86FE;
enum uint GL_SIGNED_RGB8_NV = 0x86FF;
enum uint GL_SIGNED_LUMINANCE_NV = 0x8701;
enum uint GL_SIGNED_LUMINANCE8_NV = 0x8702;
enum uint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
enum uint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
enum uint GL_SIGNED_ALPHA_NV = 0x8705;
enum uint GL_SIGNED_ALPHA8_NV = 0x8706;
enum uint GL_SIGNED_INTENSITY_NV = 0x8707;
enum uint GL_SIGNED_INTENSITY8_NV = 0x8708;
enum uint GL_DSDT8_NV = 0x8709;
enum uint GL_DSDT8_MAG8_NV = 0x870A;
enum uint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
enum uint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
enum uint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
enum uint GL_HI_SCALE_NV = 0x870E;
enum uint GL_LO_SCALE_NV = 0x870F;
enum uint GL_DS_SCALE_NV = 0x8710;
enum uint GL_DT_SCALE_NV = 0x8711;
enum uint GL_MAGNITUDE_SCALE_NV = 0x8712;
enum uint GL_VIBRANCE_SCALE_NV = 0x8713;
enum uint GL_HI_BIAS_NV = 0x8714;
enum uint GL_LO_BIAS_NV = 0x8715;
enum uint GL_DS_BIAS_NV = 0x8716;
enum uint GL_DT_BIAS_NV = 0x8717;
enum uint GL_MAGNITUDE_BIAS_NV = 0x8718;
enum uint GL_VIBRANCE_BIAS_NV = 0x8719;
enum uint GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
enum uint GL_TEXTURE_HI_SIZE_NV = 0x871B;
enum uint GL_TEXTURE_LO_SIZE_NV = 0x871C;
enum uint GL_TEXTURE_DS_SIZE_NV = 0x871D;
enum uint GL_TEXTURE_DT_SIZE_NV = 0x871E;
enum uint GL_TEXTURE_MAG_SIZE_NV = 0x871F;
enum uint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
enum uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
enum uint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
enum uint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
enum uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
enum uint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
enum uint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
enum uint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
enum uint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
enum uint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
enum uint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
enum uint GL_HILO8_NV = 0x885E;
enum uint GL_SIGNED_HILO8_NV = 0x885F;
enum uint GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
enum uint GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
enum uint GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
enum uint GL_TEXTURE_COORD_NV = 0x8C79;
enum uint GL_CLIP_DISTANCE_NV = 0x8C7A;
enum uint GL_VERTEX_ID_NV = 0x8C7B;
enum uint GL_PRIMITIVE_ID_NV = 0x8C7C;
enum uint GL_GENERIC_ATTRIB_NV = 0x8C7D;
enum uint GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
enum uint GL_ACTIVE_VARYINGS_NV = 0x8C81;
enum uint GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
enum uint GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
enum uint GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
enum uint GL_PRIMITIVES_GENERATED_NV = 0x8C87;
enum uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
enum uint GL_RASTERIZER_DISCARD_NV = 0x8C89;
enum uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
enum uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
enum uint GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
enum uint GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
enum uint GL_LAYER_NV = 0x8DAA;
enum uint GL_NEXT_BUFFER_NV = -2;
enum uint GL_SKIP_COMPONENTS4_NV = -3;
enum uint GL_SKIP_COMPONENTS3_NV = -4;
enum uint GL_SKIP_COMPONENTS2_NV = -5;
enum uint GL_SKIP_COMPONENTS1_NV = -6;
enum uint GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
enum uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
enum uint GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
enum uint GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
enum uint GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
enum uint GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
enum uint GL_SURFACE_STATE_NV = 0x86EB;
enum uint GL_SURFACE_REGISTERED_NV = 0x86FD;
enum uint GL_SURFACE_MAPPED_NV = 0x8700;
enum uint GL_WRITE_DISCARD_NV = 0x88BE;
enum uint GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
enum uint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
enum uint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
enum uint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
enum uint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
enum uint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
enum uint GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
enum uint GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
enum uint GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
enum uint GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
enum uint GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
enum uint GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
enum uint GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
enum uint GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
enum uint GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
enum uint GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
enum uint GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
enum uint GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
enum uint GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
enum uint GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
enum uint GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
enum uint GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
enum uint GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
enum uint GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
enum uint GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
enum uint GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
enum uint GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
enum uint GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
enum uint GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
enum uint GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
enum uint GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
enum uint GL_VERTEX_PROGRAM_NV = 0x8620;
enum uint GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
enum uint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
enum uint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
enum uint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
enum uint GL_CURRENT_ATTRIB_NV = 0x8626;
enum uint GL_PROGRAM_LENGTH_NV = 0x8627;
enum uint GL_PROGRAM_STRING_NV = 0x8628;
enum uint GL_MODELVIEW_PROJECTION_NV = 0x8629;
enum uint GL_IDENTITY_NV = 0x862A;
enum uint GL_INVERSE_NV = 0x862B;
enum uint GL_TRANSPOSE_NV = 0x862C;
enum uint GL_INVERSE_TRANSPOSE_NV = 0x862D;
enum uint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
enum uint GL_MAX_TRACK_MATRICES_NV = 0x862F;
enum uint GL_MATRIX0_NV = 0x8630;
enum uint GL_MATRIX1_NV = 0x8631;
enum uint GL_MATRIX2_NV = 0x8632;
enum uint GL_MATRIX3_NV = 0x8633;
enum uint GL_MATRIX4_NV = 0x8634;
enum uint GL_MATRIX5_NV = 0x8635;
enum uint GL_MATRIX6_NV = 0x8636;
enum uint GL_MATRIX7_NV = 0x8637;
enum uint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
enum uint GL_CURRENT_MATRIX_NV = 0x8641;
enum uint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
enum uint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
enum uint GL_PROGRAM_PARAMETER_NV = 0x8644;
enum uint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
enum uint GL_PROGRAM_TARGET_NV = 0x8646;
enum uint GL_PROGRAM_RESIDENT_NV = 0x8647;
enum uint GL_TRACK_MATRIX_NV = 0x8648;
enum uint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
enum uint GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
enum uint GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
enum uint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
enum uint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
enum uint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
enum uint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
enum uint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
enum uint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
enum uint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
enum uint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
enum uint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
enum uint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
enum uint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
enum uint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
enum uint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
enum uint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
enum uint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
enum uint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
enum uint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
enum uint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
enum uint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
enum uint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
enum uint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
enum uint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
enum uint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
enum uint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
enum uint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
enum uint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
enum uint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
enum uint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
enum uint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
enum uint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
enum uint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
enum uint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
enum uint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
enum uint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
enum uint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
enum uint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
enum uint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
enum uint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
enum uint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
enum uint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
enum uint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
enum uint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
enum uint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
enum uint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
enum uint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
enum uint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
enum uint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
enum uint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
enum uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
enum uint GL_VIDEO_BUFFER_NV = 0x9020;
enum uint GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
enum uint GL_FIELD_UPPER_NV = 0x9022;
enum uint GL_FIELD_LOWER_NV = 0x9023;
enum uint GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
enum uint GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
enum uint GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
enum uint GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
enum uint GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
enum uint GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
enum uint GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
enum uint GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
enum uint GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
enum uint GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
enum uint GL_PARTIAL_SUCCESS_NV = 0x902E;
enum uint GL_SUCCESS_NV = 0x902F;
enum uint GL_FAILURE_NV = 0x9030;
enum uint GL_YCBYCR8_422_NV = 0x9031;
enum uint GL_YCBAYCR8A_4224_NV = 0x9032;
enum uint GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
enum uint GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
enum uint GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
enum uint GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
enum uint GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
enum uint GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
enum uint GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
enum uint GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
enum uint GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
enum uint GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
enum uint GL_PALETTE4_RGB8_OES = 0x8B90;
enum uint GL_PALETTE4_RGBA8_OES = 0x8B91;
enum uint GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
enum uint GL_PALETTE4_RGBA4_OES = 0x8B93;
enum uint GL_PALETTE4_RGB5_A1_OES = 0x8B94;
enum uint GL_PALETTE8_RGB8_OES = 0x8B95;
enum uint GL_PALETTE8_RGBA8_OES = 0x8B96;
enum uint GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
enum uint GL_PALETTE8_RGBA4_OES = 0x8B98;
enum uint GL_PALETTE8_RGB5_A1_OES = 0x8B99;
enum uint GL_FIXED_OES = 0x140C;
enum uint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
enum uint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
enum uint GL_INTERLACE_OML = 0x8980;
enum uint GL_INTERLACE_READ_OML = 0x8981;
enum uint GL_PACK_RESAMPLE_OML = 0x8984;
enum uint GL_UNPACK_RESAMPLE_OML = 0x8985;
enum uint GL_RESAMPLE_REPLICATE_OML = 0x8986;
enum uint GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
enum uint GL_RESAMPLE_AVERAGE_OML = 0x8988;
enum uint GL_RESAMPLE_DECIMATE_OML = 0x8989;
enum uint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
enum uint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
enum uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
enum uint GL_MAX_VIEWS_OVR = 0x9631;
enum uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
enum uint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
enum uint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
enum uint GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
enum uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
enum uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
enum uint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
enum uint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
enum uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
enum uint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
enum uint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
enum uint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
enum uint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
enum uint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
enum uint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
enum uint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
enum uint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
enum uint GL_CLIP_FAR_HINT_PGI = 0x1A221;
enum uint GL_WIDE_LINE_HINT_PGI = 0x1A222;
enum uint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
enum uint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
enum uint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
enum uint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
enum uint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
enum uint GL_COLOR3_BIT_PGI = 0x00010000;
enum uint GL_COLOR4_BIT_PGI = 0x00020000;
enum uint GL_EDGEFLAG_BIT_PGI = 0x00040000;
enum uint GL_INDEX_BIT_PGI = 0x00080000;
enum uint GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
enum uint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
enum uint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
enum uint GL_MAT_EMISSION_BIT_PGI = 0x00800000;
enum uint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
enum uint GL_MAT_SHININESS_BIT_PGI = 0x02000000;
enum uint GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
enum uint GL_NORMAL_BIT_PGI = 0x08000000;
enum uint GL_TEXCOORD1_BIT_PGI = 0x10000000;
enum uint GL_TEXCOORD2_BIT_PGI = 0x20000000;
enum uint GL_TEXCOORD3_BIT_PGI = 0x40000000;
enum uint GL_TEXCOORD4_BIT_PGI = 0x80000000;
enum uint GL_VERTEX23_BIT_PGI = 0x00000004;
enum uint GL_VERTEX4_BIT_PGI = 0x00000008;
enum uint GL_SCREEN_COORDINATES_REND = 0x8490;
enum uint GL_INVERTED_SCREEN_W_REND = 0x8491;
enum uint GL_RGB_S3TC = 0x83A0;
enum uint GL_RGB4_S3TC = 0x83A1;
enum uint GL_RGBA_S3TC = 0x83A2;
enum uint GL_RGBA4_S3TC = 0x83A3;
enum uint GL_RGBA_DXT5_S3TC = 0x83A4;
enum uint GL_RGBA4_DXT5_S3TC = 0x83A5;
enum uint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
enum uint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
enum uint GL_LINEAR_DETAIL_SGIS = 0x8097;
enum uint GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
enum uint GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
enum uint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
enum uint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
enum uint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
enum uint GL_FOG_FUNC_SGIS = 0x812A;
enum uint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
enum uint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
enum uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
enum uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
enum uint GL_MULTISAMPLE_SGIS = 0x809D;
enum uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
enum uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
enum uint GL_SAMPLE_MASK_SGIS = 0x80A0;
enum uint GL_1PASS_SGIS = 0x80A1;
enum uint GL_2PASS_0_SGIS = 0x80A2;
enum uint GL_2PASS_1_SGIS = 0x80A3;
enum uint GL_4PASS_0_SGIS = 0x80A4;
enum uint GL_4PASS_1_SGIS = 0x80A5;
enum uint GL_4PASS_2_SGIS = 0x80A6;
enum uint GL_4PASS_3_SGIS = 0x80A7;
enum uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
enum uint GL_SAMPLES_SGIS = 0x80A9;
enum uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
enum uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
enum uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
enum uint GL_PIXEL_TEXTURE_SGIS = 0x8353;
enum uint GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
enum uint GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
enum uint GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
enum uint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
enum uint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
enum uint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
enum uint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
enum uint GL_EYE_POINT_SGIS = 0x81F4;
enum uint GL_OBJECT_POINT_SGIS = 0x81F5;
enum uint GL_EYE_LINE_SGIS = 0x81F6;
enum uint GL_OBJECT_LINE_SGIS = 0x81F7;
enum uint GL_POINT_SIZE_MIN_SGIS = 0x8126;
enum uint GL_POINT_SIZE_MAX_SGIS = 0x8127;
enum uint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
enum uint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
enum uint GL_LINEAR_SHARPEN_SGIS = 0x80AD;
enum uint GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
enum uint GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
enum uint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
enum uint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
enum uint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
enum uint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
enum uint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
enum uint GL_TEXTURE_4D_SGIS = 0x8134;
enum uint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
enum uint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
enum uint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
enum uint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
enum uint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
enum uint GL_CLAMP_TO_BORDER_SGIS = 0x812D;
enum uint GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
enum uint GL_CLAMP_TO_EDGE_SGIS = 0x812F;
enum uint GL_FILTER4_SGIS = 0x8146;
enum uint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
enum uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
enum uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
enum uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
enum uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
enum uint GL_DUAL_ALPHA4_SGIS = 0x8110;
enum uint GL_DUAL_ALPHA8_SGIS = 0x8111;
enum uint GL_DUAL_ALPHA12_SGIS = 0x8112;
enum uint GL_DUAL_ALPHA16_SGIS = 0x8113;
enum uint GL_DUAL_LUMINANCE4_SGIS = 0x8114;
enum uint GL_DUAL_LUMINANCE8_SGIS = 0x8115;
enum uint GL_DUAL_LUMINANCE12_SGIS = 0x8116;
enum uint GL_DUAL_LUMINANCE16_SGIS = 0x8117;
enum uint GL_DUAL_INTENSITY4_SGIS = 0x8118;
enum uint GL_DUAL_INTENSITY8_SGIS = 0x8119;
enum uint GL_DUAL_INTENSITY12_SGIS = 0x811A;
enum uint GL_DUAL_INTENSITY16_SGIS = 0x811B;
enum uint GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
enum uint GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
enum uint GL_QUAD_ALPHA4_SGIS = 0x811E;
enum uint GL_QUAD_ALPHA8_SGIS = 0x811F;
enum uint GL_QUAD_LUMINANCE4_SGIS = 0x8120;
enum uint GL_QUAD_LUMINANCE8_SGIS = 0x8121;
enum uint GL_QUAD_INTENSITY4_SGIS = 0x8122;
enum uint GL_QUAD_INTENSITY8_SGIS = 0x8123;
enum uint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
enum uint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
enum uint GL_ASYNC_MARKER_SGIX = 0x8329;
enum uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
enum uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
enum uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
enum uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
enum uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
enum uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
enum uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
enum uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
enum uint GL_ALPHA_MIN_SGIX = 0x8320;
enum uint GL_ALPHA_MAX_SGIX = 0x8321;
enum uint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
enum uint GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
enum uint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
enum uint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
enum uint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
enum uint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
enum uint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
enum uint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
enum uint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
enum uint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
enum uint GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
enum uint GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
enum uint GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
enum uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
enum uint GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
enum uint GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
enum uint GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
enum uint GL_FOG_OFFSET_SGIX = 0x8198;
enum uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
enum uint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
enum uint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
enum uint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
enum uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
enum uint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
enum uint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
enum uint GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
enum uint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
enum uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
enum uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
enum uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
enum uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
enum uint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
enum uint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
enum uint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
enum uint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
enum uint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
enum uint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
enum uint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
enum uint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
enum uint GL_FRAMEZOOM_SGIX = 0x818B;
enum uint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
enum uint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
enum uint GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
enum uint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
enum uint GL_INTERLACE_SGIX = 0x8094;
enum uint GL_IR_INSTRUMENT1_SGIX = 0x817F;
enum uint GL_LIST_PRIORITY_SGIX = 0x8182;
enum uint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
enum uint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
enum uint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
enum uint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
enum uint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
enum uint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
enum uint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
enum uint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
enum uint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
enum uint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
enum uint GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
enum uint GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
enum uint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
enum uint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
enum uint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
enum uint GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
enum uint GL_REFERENCE_PLANE_SGIX = 0x817D;
enum uint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
enum uint GL_PACK_RESAMPLE_SGIX = 0x842E;
enum uint GL_UNPACK_RESAMPLE_SGIX = 0x842F;
enum uint GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
enum uint GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
enum uint GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
enum uint GL_SCALEBIAS_HINT_SGIX = 0x8322;
enum uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
enum uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
enum uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
enum uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
enum uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
enum uint GL_SPRITE_SGIX = 0x8148;
enum uint GL_SPRITE_MODE_SGIX = 0x8149;
enum uint GL_SPRITE_AXIS_SGIX = 0x814A;
enum uint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
enum uint GL_SPRITE_AXIAL_SGIX = 0x814C;
enum uint GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
enum uint GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
enum uint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
enum uint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
enum uint GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
enum uint GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
enum uint GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
enum uint GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
enum uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
enum uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
enum uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
enum uint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
enum uint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
enum uint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
enum uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
enum uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
enum uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
enum uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
enum uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
enum uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
enum uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
enum uint GL_YCRCB_422_SGIX = 0x81BB;
enum uint GL_YCRCB_444_SGIX = 0x81BC;
enum uint GL_YCRCB_SGIX = 0x8318;
enum uint GL_YCRCBA_SGIX = 0x8319;
enum uint GL_COLOR_MATRIX_SGI = 0x80B1;
enum uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
enum uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
enum uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
enum uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
enum uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
enum uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
enum uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
enum uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
enum uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
enum uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
enum uint GL_COLOR_TABLE_SGI = 0x80D0;
enum uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
enum uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
enum uint GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
enum uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
enum uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
enum uint GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
enum uint GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
enum uint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
enum uint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
enum uint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
enum uint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
enum uint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
enum uint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
enum uint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
enum uint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
enum uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
enum uint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
enum uint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
enum uint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
enum uint GL_WRAP_BORDER_SUN = 0x81D4;
enum uint GL_GLOBAL_ALPHA_SUN = 0x81D9;
enum uint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
enum uint GL_QUAD_MESH_SUN = 0x8614;
enum uint GL_TRIANGLE_MESH_SUN = 0x8615;
enum uint GL_SLICE_ACCUM_SUN = 0x85CC;
enum uint GL_RESTART_SUN = 0x0001;
enum uint GL_REPLACE_MIDDLE_SUN = 0x0002;
enum uint GL_REPLACE_OLDEST_SUN = 0x0003;
enum uint GL_TRIANGLE_LIST_SUN = 0x81D7;
enum uint GL_REPLACEMENT_CODE_SUN = 0x81D8;
enum uint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
enum uint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
enum uint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
enum uint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
enum uint GL_R1UI_V3F_SUN = 0x85C4;
enum uint GL_R1UI_C4UB_V3F_SUN = 0x85C5;
enum uint GL_R1UI_C3F_V3F_SUN = 0x85C6;
enum uint GL_R1UI_N3F_V3F_SUN = 0x85C7;
enum uint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
enum uint GL_R1UI_T2F_V3F_SUN = 0x85C9;
enum uint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
enum uint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
enum uint GL_PHONG_WIN = 0x80EA;
enum uint GL_PHONG_HINT_WIN = 0x80EB;
enum uint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;

/*
enum uint GL_ONE = 1;
enum uint GL_RGBA8 = 0x8058;
enum uint GL_FRAGMENT_SHADER = 0x8B30;
enum uint GL_COMPILE_STATUS = 0x8B81;
enum uint GL_INFO_LOG_LENGTH = 0x8B84;
enum uint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
enum uint GL_FRAMEBUFFER_EXT = 0x8D40;
enum uint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
enum uint GL_RENDERBUFFER_EXT = 0x8D41;
enum uint GL_DEPTH_COMPONENT16 = 0x81A5;
enum uint GL_DEPTH_COMPONENT24 = 0x81A6;
enum uint GL_DEPTH_COMPONENT32 = 0x81A7;
enum uint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
enum uint GL_CLAMP_TO_BORDER = 0x812D;
enum uint GL_TEXTURE0 = 0x84C0;
enum uint GL_TEXTURE1 = 0x84C1;
enum uint GL_TEXTURE2 = 0x84C2;
enum uint GL_TEXTURE3 = 0x84C3;
enum uint GL_TEXTURE4 = 0x84C4;
enum uint GL_TEXTURE5 = 0x84C5;
enum uint GL_TEXTURE6 = 0x84C6;
enum uint GL_TEXTURE7 = 0x84C7;
enum uint GL_TEXTURE8 = 0x84C8;
enum uint GL_TEXTURE9 = 0x84C9;
enum uint GL_TEXTURE10 = 0x84CA;
enum uint GL_TEXTURE11 = 0x84CB;
enum uint GL_TEXTURE12 = 0x84CC;
enum uint GL_TEXTURE13 = 0x84CD;
enum uint GL_TEXTURE14 = 0x84CE;
enum uint GL_TEXTURE15 = 0x84CF;
enum uint GL_TEXTURE16 = 0x84D0;
enum uint GL_TEXTURE17 = 0x84D1;
enum uint GL_TEXTURE18 = 0x84D2;
enum uint GL_TEXTURE19 = 0x84D3;
enum uint GL_TEXTURE20 = 0x84D4;
enum uint GL_TEXTURE21 = 0x84D5;
enum uint GL_TEXTURE22 = 0x84D6;
enum uint GL_TEXTURE23 = 0x84D7;
enum uint GL_TEXTURE24 = 0x84D8;
enum uint GL_TEXTURE25 = 0x84D9;
enum uint GL_TEXTURE26 = 0x84DA;
enum uint GL_TEXTURE27 = 0x84DB;
enum uint GL_TEXTURE28 = 0x84DC;
enum uint GL_TEXTURE29 = 0x84DD;
enum uint GL_TEXTURE30 = 0x84DE;
enum uint GL_TEXTURE31 = 0x84DF;
enum uint GL_ACTIVE_TEXTURE = 0x84E0;
enum uint GL_COMPILE = 0x1300;
enum uint GL_COMPILE_AND_EXECUTE = 0x1301;
enum uint GL_TEXTURE_CUBE_MAP = 0x8513;
enum uint GL_TEXTURE_WRAP_R = 0x8072;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum uint GL_TEXTURE_BORDER_COLOR = 0x1004;
enum uint GL_RGBA16F = 0x881A;
enum uint GL_FLOAT = 0x1406;
enum uint GL_DOUBLE = 0x140A;

alias glbfn_glTexParameterf = void function (GLenum, GLenum, GLfloat);
alias glbfn_glTexParameterfv = void function (GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexParameteri = void function (GLenum, GLenum, GLint);
alias glbfn_glTexParameteriv = void function (GLenum, GLenum, const(GLint)*);

alias glbfn_glCreateShader = GLuint function (GLenum);
alias glbfn_glShaderSource = void function (GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glCompileShader = void function (GLuint);
alias glbfn_glCreateProgram = GLuint function ();
alias glbfn_glAttachShader = void function (GLuint, GLuint);
alias glbfn_glLinkProgram = void function (GLuint);
alias glbfn_glUseProgram = void function (GLuint);
alias glbfn_glGetShaderiv = void function (GLuint, GLenum, GLint*);
alias glbfn_glGetShaderInfoLog = void function (GLuint, GLsizei, GLsizei*, GLchar*);

alias glbfn_glGetUniformLocation = GLint function (GLuint, const(GLchar)*);

alias glbfn_glUniform1f = void function (GLint, GLfloat);
alias glbfn_glUniform2f = void function (GLint, GLfloat, GLfloat);
alias glbfn_glUniform3f = void function (GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4f = void function (GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1i = void function (GLint, GLint);
alias glbfn_glUniform2i = void function (GLint, GLint, GLint);
alias glbfn_glUniform3i = void function (GLint, GLint, GLint, GLint);
alias glbfn_glUniform4i = void function (GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fv = void function (GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fv = void function (GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fv = void function (GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fv = void function (GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1iv = void function (GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2iv = void function (GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3iv = void function (GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4iv = void function (GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fv = void function (GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fv = void function (GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fv = void function (GLint, GLsizei, GLboolean, const(GLfloat)*);

alias glbfn_glGenFramebuffersEXT = void function (GLsizei, GLuint*);
alias glbfn_glBindFramebufferEXT = void function (GLenum, GLuint);
alias glbfn_glFramebufferTexture2DEXT = void function (GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glGenRenderbuffersEXT = void function (GLsizei, GLuint*);
alias glbfn_glRenderbufferStorageEXT = void function (GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glFramebufferRenderbufferEXT = void function (GLenum, GLenum, GLenum, GLuint);
alias glbfn_glCheckFramebufferStatusEXT = GLenum function (GLenum);
alias glbfn_glBindRenderbufferEXT = void function (GLenum, GLuint);

alias glbfn_glActiveTexture = void function (GLenum);

alias glbfn_glGenLists = GLuint function (GLsizei);
alias glbfn_glNewList = void function (GLuint, GLenum);
alias glbfn_glEndList = void function ();
alias glbfn_glCallList = void function (GLuint);
alias glbfn_glCallLists = void function (GLsizei, GLenum, const(void)*);
alias glbfn_glDeleteLists = void function (GLuint, GLsizei);

enum uint GL_VERSION = 0x1F02;
enum uint GL_EXTENSIONS = 0x1F03;
enum uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;

alias glbfn_glGetString = const(char*) function (GLenum);
alias glbfn_glGetStringi = const(char)* function (GLenum, GLuint);

enum uint GL_MAJOR_VERSION = 0x821B;
enum uint GL_MINOR_VERSION = 0x821C;
enum uint GL_NUM_EXTENSIONS = 0x821D;
enum uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;

alias glbfn_glGetIntegerv = void function (GLenum, GLint*);
*/
alias glbfn_glCullFace = void function(GLenum);
alias glbfn_glFrontFace = void function(GLenum);
alias glbfn_glHint = void function(GLenum, GLenum);
alias glbfn_glLineWidth = void function(GLfloat);
alias glbfn_glPointSize = void function(GLfloat);
alias glbfn_glPolygonMode = void function(GLenum, GLenum);
alias glbfn_glScissor = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glTexParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexImage1D = void function(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage2D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glDrawBuffer = void function(GLenum);
alias glbfn_glClear = void function(GLbitfield);
alias glbfn_glClearColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearStencil = void function(GLint);
alias glbfn_glClearDepth = void function(GLdouble);
alias glbfn_glStencilMask = void function(GLuint);
alias glbfn_glColorMask = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDepthMask = void function(GLboolean);
alias glbfn_glDisable = void function(GLenum);
alias glbfn_glEnable = void function(GLenum);
alias glbfn_glFinish = void function();
alias glbfn_glFlush = void function();
alias glbfn_glBlendFunc = void function(GLenum, GLenum);
alias glbfn_glLogicOp = void function(GLenum);
alias glbfn_glStencilFunc = void function(GLenum, GLint, GLuint);
alias glbfn_glStencilOp = void function(GLenum, GLenum, GLenum);
alias glbfn_glDepthFunc = void function(GLenum);
alias glbfn_glPixelStoref = void function(GLenum, GLfloat);
alias glbfn_glPixelStorei = void function(GLenum, GLint);
alias glbfn_glReadBuffer = void function(GLenum);
alias glbfn_glReadPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*);
alias glbfn_glGetBooleanv = void function(GLenum, GLboolean*);
alias glbfn_glGetDoublev = void function(GLenum, GLdouble*);
alias glbfn_glGetError = GLenum function();
alias glbfn_glGetFloatv = void function(GLenum, GLfloat*);
alias glbfn_glGetIntegerv = void function(GLenum, GLint*);
alias glbfn_glGetString = const(char)* function(GLenum);
alias glbfn_glGetTexImage = void function(GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTexParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexLevelParameterfv = void function(GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTexLevelParameteriv = void function(GLenum, GLint, GLenum, GLint*);
alias glbfn_glIsEnabled = GLboolean function(GLenum);
alias glbfn_glDepthRange = void function(GLdouble, GLdouble);
alias glbfn_glViewport = void function(GLint, GLint, GLsizei, GLsizei);
alias glbfn_glNewList = void function(GLuint, GLenum);
alias glbfn_glEndList = void function();
alias glbfn_glCallList = void function(GLuint);
alias glbfn_glCallLists = void function(GLsizei, GLenum, const(void)*);
alias glbfn_glDeleteLists = void function(GLuint, GLsizei);
alias glbfn_glGenLists = GLuint function(GLsizei);
alias glbfn_glListBase = void function(GLuint);
alias glbfn_glBegin = void function(GLenum);
alias glbfn_glBitmap = void function(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const(GLubyte)*);
alias glbfn_glColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glColor3bv = void function(const(GLbyte)*);
alias glbfn_glColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glColor3dv = void function(const(GLdouble)*);
alias glbfn_glColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fv = void function(const(GLfloat)*);
alias glbfn_glColor3i = void function(GLint, GLint, GLint);
alias glbfn_glColor3iv = void function(const(GLint)*);
alias glbfn_glColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glColor3sv = void function(const(GLshort)*);
alias glbfn_glColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glColor3ubv = void function(const(GLubyte)*);
alias glbfn_glColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glColor3uiv = void function(const(GLuint)*);
alias glbfn_glColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glColor3usv = void function(const(GLushort)*);
alias glbfn_glColor4b = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glColor4bv = void function(const(GLbyte)*);
alias glbfn_glColor4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glColor4dv = void function(const(GLdouble)*);
alias glbfn_glColor4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fv = void function(const(GLfloat)*);
alias glbfn_glColor4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glColor4iv = void function(const(GLint)*);
alias glbfn_glColor4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glColor4sv = void function(const(GLshort)*);
alias glbfn_glColor4ub = void function(GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glColor4ubv = void function(const(GLubyte)*);
alias glbfn_glColor4ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColor4uiv = void function(const(GLuint)*);
alias glbfn_glColor4us = void function(GLushort, GLushort, GLushort, GLushort);
alias glbfn_glColor4usv = void function(const(GLushort)*);
alias glbfn_glEdgeFlag = void function(GLboolean);
alias glbfn_glEdgeFlagv = void function(const(GLboolean)*);
alias glbfn_glEnd = void function();
alias glbfn_glIndexd = void function(GLdouble);
alias glbfn_glIndexdv = void function(const(GLdouble)*);
alias glbfn_glIndexf = void function(GLfloat);
alias glbfn_glIndexfv = void function(const(GLfloat)*);
alias glbfn_glIndexi = void function(GLint);
alias glbfn_glIndexiv = void function(const(GLint)*);
alias glbfn_glIndexs = void function(GLshort);
alias glbfn_glIndexsv = void function(const(GLshort)*);
alias glbfn_glNormal3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glNormal3bv = void function(const(GLbyte)*);
alias glbfn_glNormal3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glNormal3dv = void function(const(GLdouble)*);
alias glbfn_glNormal3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fv = void function(const(GLfloat)*);
alias glbfn_glNormal3i = void function(GLint, GLint, GLint);
alias glbfn_glNormal3iv = void function(const(GLint)*);
alias glbfn_glNormal3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glNormal3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos2d = void function(GLdouble, GLdouble);
alias glbfn_glRasterPos2dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos2f = void function(GLfloat, GLfloat);
alias glbfn_glRasterPos2fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos2i = void function(GLint, GLint);
alias glbfn_glRasterPos2iv = void function(const(GLint)*);
alias glbfn_glRasterPos2s = void function(GLshort, GLshort);
alias glbfn_glRasterPos2sv = void function(const(GLshort)*);
alias glbfn_glRasterPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos3dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos3fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos3i = void function(GLint, GLint, GLint);
alias glbfn_glRasterPos3iv = void function(const(GLint)*);
alias glbfn_glRasterPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glRasterPos3sv = void function(const(GLshort)*);
alias glbfn_glRasterPos4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRasterPos4dv = void function(const(GLdouble)*);
alias glbfn_glRasterPos4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRasterPos4fv = void function(const(GLfloat)*);
alias glbfn_glRasterPos4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRasterPos4iv = void function(const(GLint)*);
alias glbfn_glRasterPos4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRasterPos4sv = void function(const(GLshort)*);
alias glbfn_glRectd = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRectdv = void function(const(GLdouble)*, const(GLdouble)*);
alias glbfn_glRectf = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glRectfv = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glRecti = void function(GLint, GLint, GLint, GLint);
alias glbfn_glRectiv = void function(const(GLint)*, const(GLint)*);
alias glbfn_glRects = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glRectsv = void function(const(GLshort)*, const(GLshort)*);
alias glbfn_glTexCoord1d = void function(GLdouble);
alias glbfn_glTexCoord1dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord1f = void function(GLfloat);
alias glbfn_glTexCoord1fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord1i = void function(GLint);
alias glbfn_glTexCoord1iv = void function(const(GLint)*);
alias glbfn_glTexCoord1s = void function(GLshort);
alias glbfn_glTexCoord1sv = void function(const(GLshort)*);
alias glbfn_glTexCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glTexCoord2dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glTexCoord2fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord2i = void function(GLint, GLint);
alias glbfn_glTexCoord2iv = void function(const(GLint)*);
alias glbfn_glTexCoord2s = void function(GLshort, GLshort);
alias glbfn_glTexCoord2sv = void function(const(GLshort)*);
alias glbfn_glTexCoord3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord3dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord3fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord3i = void function(GLint, GLint, GLint);
alias glbfn_glTexCoord3iv = void function(const(GLint)*);
alias glbfn_glTexCoord3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glTexCoord3sv = void function(const(GLshort)*);
alias glbfn_glTexCoord4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glTexCoord4dv = void function(const(GLdouble)*);
alias glbfn_glTexCoord4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fv = void function(const(GLfloat)*);
alias glbfn_glTexCoord4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glTexCoord4iv = void function(const(GLint)*);
alias glbfn_glTexCoord4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glTexCoord4sv = void function(const(GLshort)*);
alias glbfn_glVertex2d = void function(GLdouble, GLdouble);
alias glbfn_glVertex2dv = void function(const(GLdouble)*);
alias glbfn_glVertex2f = void function(GLfloat, GLfloat);
alias glbfn_glVertex2fv = void function(const(GLfloat)*);
alias glbfn_glVertex2i = void function(GLint, GLint);
alias glbfn_glVertex2iv = void function(const(GLint)*);
alias glbfn_glVertex2s = void function(GLshort, GLshort);
alias glbfn_glVertex2sv = void function(const(GLshort)*);
alias glbfn_glVertex3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex3dv = void function(const(GLdouble)*);
alias glbfn_glVertex3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex3fv = void function(const(GLfloat)*);
alias glbfn_glVertex3i = void function(GLint, GLint, GLint);
alias glbfn_glVertex3iv = void function(const(GLint)*);
alias glbfn_glVertex3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glVertex3sv = void function(const(GLshort)*);
alias glbfn_glVertex4d = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertex4dv = void function(const(GLdouble)*);
alias glbfn_glVertex4f = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertex4fv = void function(const(GLfloat)*);
alias glbfn_glVertex4i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glVertex4iv = void function(const(GLint)*);
alias glbfn_glVertex4s = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertex4sv = void function(const(GLshort)*);
alias glbfn_glClipPlane = void function(GLenum, const(GLdouble)*);
alias glbfn_glColorMaterial = void function(GLenum, GLenum);
alias glbfn_glFogf = void function(GLenum, GLfloat);
alias glbfn_glFogfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glFogi = void function(GLenum, GLint);
alias glbfn_glFogiv = void function(GLenum, const(GLint)*);
alias glbfn_glLightf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glLightfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glLighti = void function(GLenum, GLenum, GLint);
alias glbfn_glLightiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glLightModelf = void function(GLenum, GLfloat);
alias glbfn_glLightModelfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glLightModeli = void function(GLenum, GLint);
alias glbfn_glLightModeliv = void function(GLenum, const(GLint)*);
alias glbfn_glLineStipple = void function(GLint, GLushort);
alias glbfn_glMaterialf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glMaterialfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMateriali = void function(GLenum, GLenum, GLint);
alias glbfn_glMaterialiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPolygonStipple = void function(const(GLubyte)*);
alias glbfn_glShadeModel = void function(GLenum);
alias glbfn_glTexEnvf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexEnvfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexEnvi = void function(GLenum, GLenum, GLint);
alias glbfn_glTexEnviv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexGend = void function(GLenum, GLenum, GLdouble);
alias glbfn_glTexGendv = void function(GLenum, GLenum, const(GLdouble)*);
alias glbfn_glTexGenf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glTexGenfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTexGeni = void function(GLenum, GLenum, GLint);
alias glbfn_glTexGeniv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFeedbackBuffer = void function(GLsizei, GLenum, GLfloat*);
alias glbfn_glSelectBuffer = void function(GLsizei, GLuint*);
alias glbfn_glRenderMode = GLint function(GLenum);
alias glbfn_glInitNames = void function();
alias glbfn_glLoadName = void function(GLuint);
alias glbfn_glPassThrough = void function(GLfloat);
alias glbfn_glPopName = void function();
alias glbfn_glPushName = void function(GLuint);
alias glbfn_glClearAccum = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glClearIndex = void function(GLfloat);
alias glbfn_glIndexMask = void function(GLuint);
alias glbfn_glAccum = void function(GLenum, GLfloat);
alias glbfn_glPopAttrib = void function();
alias glbfn_glPushAttrib = void function(GLbitfield);
alias glbfn_glMap1d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap1f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMap2d = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMap2f = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapGrid1d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid1f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glMapGrid2d = void function(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
alias glbfn_glMapGrid2f = void function(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
alias glbfn_glEvalCoord1d = void function(GLdouble);
alias glbfn_glEvalCoord1dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord1f = void function(GLfloat);
alias glbfn_glEvalCoord1fv = void function(const(GLfloat)*);
alias glbfn_glEvalCoord2d = void function(GLdouble, GLdouble);
alias glbfn_glEvalCoord2dv = void function(const(GLdouble)*);
alias glbfn_glEvalCoord2f = void function(GLfloat, GLfloat);
alias glbfn_glEvalCoord2fv = void function(const(GLfloat)*);
alias glbfn_glEvalMesh1 = void function(GLenum, GLint, GLint);
alias glbfn_glEvalPoint1 = void function(GLint);
alias glbfn_glEvalMesh2 = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glEvalPoint2 = void function(GLint, GLint);
alias glbfn_glAlphaFunc = void function(GLenum, GLfloat);
alias glbfn_glPixelZoom = void function(GLfloat, GLfloat);
alias glbfn_glPixelTransferf = void function(GLenum, GLfloat);
alias glbfn_glPixelTransferi = void function(GLenum, GLint);
alias glbfn_glPixelMapfv = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glPixelMapuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glPixelMapusv = void function(GLenum, GLsizei, const(GLushort)*);
alias glbfn_glCopyPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum);
alias glbfn_glDrawPixels = void function(GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetClipPlane = void function(GLenum, GLdouble*);
alias glbfn_glGetLightfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetLightiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapdv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetMapfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMaterialfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMaterialiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelMapfv = void function(GLenum, GLfloat*);
alias glbfn_glGetPixelMapuiv = void function(GLenum, GLuint*);
alias glbfn_glGetPixelMapusv = void function(GLenum, GLushort*);
alias glbfn_glGetPolygonStipple = void function(GLubyte*);
alias glbfn_glGetTexEnvfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexEnviv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexGendv = void function(GLenum, GLenum, GLdouble*);
alias glbfn_glGetTexGenfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetTexGeniv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsList = GLboolean function(GLuint);
alias glbfn_glFrustum = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glLoadIdentity = void function();
alias glbfn_glLoadMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadMatrixd = void function(const(GLdouble)*);
alias glbfn_glMatrixMode = void function(GLenum);
alias glbfn_glMultMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultMatrixd = void function(const(GLdouble)*);
alias glbfn_glOrtho = void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glPopMatrix = void function();
alias glbfn_glPushMatrix = void function();
alias glbfn_glRotated = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glRotatef = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glScaled = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glScalef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTranslated = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTranslatef = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glDrawArrays = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawElements = void function(GLenum, GLsizei, GLenum, const(void)*);
alias glbfn_glGetPointerv = void function(GLenum, void**);
alias glbfn_glPolygonOffset = void function(GLfloat, GLfloat);
alias glbfn_glCopyTexImage1D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2D = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindTexture = void function(GLenum, GLuint);
alias glbfn_glDeleteTextures = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTextures = void function(GLsizei, GLuint*);
alias glbfn_glIsTexture = GLboolean function(GLuint);
alias glbfn_glArrayElement = void function(GLint);
alias glbfn_glColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glDisableClientState = void function(GLenum);
alias glbfn_glEdgeFlagPointer = void function(GLsizei, const(void)*);
alias glbfn_glEnableClientState = void function(GLenum);
alias glbfn_glIndexPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glInterleavedArrays = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glNormalPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glTexCoordPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glAreTexturesResident = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glPrioritizeTextures = void function(GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glIndexub = void function(GLubyte);
alias glbfn_glIndexubv = void function(const(GLubyte)*);
alias glbfn_glPopClientAttrib = void function();
alias glbfn_glPushClientAttrib = void function(GLbitfield);
alias glbfn_glDrawRangeElements = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glTexImage3D = void function(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glActiveTexture = void function(GLenum);
alias glbfn_glSampleCoverage = void function(GLfloat, GLboolean);
alias glbfn_glCompressedTexImage3D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2D = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1D = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3D = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2D = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1D = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImage = void function(GLenum, GLint, void*);
alias glbfn_glClientActiveTexture = void function(GLenum);
alias glbfn_glMultiTexCoord1d = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1f = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1i = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1s = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2d = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2f = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2i = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2s = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3d = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3f = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3i = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3s = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3sv = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4d = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dv = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4f = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fv = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4i = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4iv = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4s = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4sv = void function(GLenum, const(GLshort)*);
alias glbfn_glLoadTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixf = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixd = void function(const(GLdouble)*);
alias glbfn_glBlendFuncSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glMultiDrawArrays = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElements = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glPointParameterf = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glPointParameteri = void function(GLenum, GLint);
alias glbfn_glPointParameteriv = void function(GLenum, const(GLint)*);
alias glbfn_glFogCoordf = void function(GLfloat);
alias glbfn_glFogCoordfv = void function(const(GLfloat)*);
alias glbfn_glFogCoordd = void function(GLdouble);
alias glbfn_glFogCoorddv = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointer = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glSecondaryColor3b = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bv = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dv = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fv = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3i = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3iv = void function(const(GLint)*);
alias glbfn_glSecondaryColor3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3sv = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ub = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubv = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uiv = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3us = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usv = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointer = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glWindowPos2d = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos2f = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos2i = void function(GLint, GLint);
alias glbfn_glWindowPos2iv = void function(const(GLint)*);
alias glbfn_glWindowPos2s = void function(GLshort, GLshort);
alias glbfn_glWindowPos2sv = void function(const(GLshort)*);
alias glbfn_glWindowPos3d = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dv = void function(const(GLdouble)*);
alias glbfn_glWindowPos3f = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fv = void function(const(GLfloat)*);
alias glbfn_glWindowPos3i = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3iv = void function(const(GLint)*);
alias glbfn_glWindowPos3s = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3sv = void function(const(GLshort)*);
alias glbfn_glBlendColor = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquation = void function(GLenum);
alias glbfn_glGenQueries = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueries = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQuery = GLboolean function(GLuint);
alias glbfn_glBeginQuery = void function(GLenum, GLuint);
alias glbfn_glEndQuery = void function(GLenum);
alias glbfn_glGetQueryiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBindBuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffers = void function(GLsizei, GLuint*);
alias glbfn_glIsBuffer = GLboolean function(GLuint);
alias glbfn_glBufferData = void function(GLenum, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glGetBufferSubData = void function(GLenum, GLintptr, GLsizeiptr, void*);
alias glbfn_glMapBuffer = void* function(GLenum, GLenum);
alias glbfn_glUnmapBuffer = GLboolean function(GLenum);
alias glbfn_glGetBufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointerv = void function(GLenum, GLenum, void**);
alias glbfn_glBlendEquationSeparate = void function(GLenum, GLenum);
alias glbfn_glDrawBuffers = void function(GLsizei, const(GLenum)*);
alias glbfn_glStencilOpSeparate = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparate = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glStencilMaskSeparate = void function(GLenum, GLuint);
alias glbfn_glAttachShader = void function(GLuint, GLuint);
alias glbfn_glBindAttribLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glCompileShader = void function(GLuint);
alias glbfn_glCreateProgram = GLuint function();
alias glbfn_glCreateShader = GLuint function(GLenum);
alias glbfn_glDeleteProgram = void function(GLuint);
alias glbfn_glDeleteShader = void function(GLuint);
alias glbfn_glDetachShader = void function(GLuint, GLuint);
alias glbfn_glDisableVertexAttribArray = void function(GLuint);
alias glbfn_glEnableVertexAttribArray = void function(GLuint);
alias glbfn_glGetActiveAttrib = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetActiveUniform = void function(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
alias glbfn_glGetAttachedShaders = void function(GLuint, GLsizei, GLsizei*, GLuint*);
alias glbfn_glGetAttribLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetProgramiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetShaderInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetShaderSource = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetUniformfv = void function(GLuint, GLint, GLfloat*);
alias glbfn_glGetUniformiv = void function(GLuint, GLint, GLint*);
alias glbfn_glGetVertexAttribdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgram = GLboolean function(GLuint);
alias glbfn_glIsShader = GLboolean function(GLuint);
alias glbfn_glLinkProgram = void function(GLuint);
alias glbfn_glShaderSource = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glUseProgram = void function(GLuint);
alias glbfn_glUniform1f = void function(GLint, GLfloat);
alias glbfn_glUniform2f = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3f = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4f = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1i = void function(GLint, GLint);
alias glbfn_glUniform2i = void function(GLint, GLint, GLint);
alias glbfn_glUniform3i = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4i = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fv = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4iv = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glValidateProgram = void function(GLuint);
alias glbfn_glVertexAttrib1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1f = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1s = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2f = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2s = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3f = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3s = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nbv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4Niv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4Nsv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4Nub = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4Nubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4Nuiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4Nusv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4f = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fv = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4s = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointer = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glUniformMatrix2x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix2x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x2fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3x4fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4x3fv = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glColorMaski = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetBooleani_v = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glGetIntegeri_v = void function(GLenum, GLuint, GLint*);
alias glbfn_glEnablei = void function(GLenum, GLuint);
alias glbfn_glDisablei = void function(GLenum, GLuint);
alias glbfn_glIsEnabledi = GLboolean function(GLenum, GLuint);
alias glbfn_glBeginTransformFeedback = void function(GLenum);
alias glbfn_glEndTransformFeedback = void function();
alias glbfn_glBindBufferRange = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferBase = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryings = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVarying = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glClampColor = void function(GLenum, GLenum);
alias glbfn_glBeginConditionalRender = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRender = void function();
alias glbfn_glVertexAttribIPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glVertexAttribI1i = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2i = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1ui = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2ui = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3ui = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4ui = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4iv = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uiv = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bv = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4sv = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubv = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usv = void function(GLuint, const(GLushort)*);
alias glbfn_glGetUniformuiv = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocation = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocation = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1ui = void function(GLint, GLuint);
alias glbfn_glUniform2ui = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3ui = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4ui = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uiv = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glTexParameterIiv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIiv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuiv = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearBufferiv = void function(GLenum, GLint, const(GLint)*);
alias glbfn_glClearBufferuiv = void function(GLenum, GLint, const(GLuint)*);
alias glbfn_glClearBufferfv = void function(GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearBufferfi = void function(GLenum, GLint, GLfloat, GLint);
alias glbfn_glGetStringi = const(char)* function(GLenum, GLuint);
alias glbfn_glIsRenderbuffer = GLboolean function(GLuint);
alias glbfn_glBindRenderbuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorage = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebuffer = GLboolean function(GLuint);
alias glbfn_glBindFramebuffer = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffers = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatus = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2D = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3D = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbuffer = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameteriv = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmap = void function(GLenum);
alias glbfn_glBlitFramebuffer = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glFramebufferTextureLayer = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glMapBufferRange = void* function(GLenum, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedBufferRange = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glBindVertexArray = void function(GLuint);
alias glbfn_glDeleteVertexArrays = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArray = GLboolean function(GLuint);
alias glbfn_glDrawArraysInstanced = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstanced = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glTexBuffer = void function(GLenum, GLenum, GLuint);
alias glbfn_glPrimitiveRestartIndex = void function(GLuint);
alias glbfn_glCopyBufferSubData = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glGetUniformIndices = void function(GLuint, GLsizei, const(GLchar*)*, GLuint*);
alias glbfn_glGetActiveUniformsiv = void function(GLuint, GLsizei, const(GLuint)*, GLenum, GLint*);
alias glbfn_glGetActiveUniformName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetUniformBlockIndex = GLuint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveUniformBlockiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveUniformBlockName = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glDrawElementsBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawRangeElementsBaseVertex = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*, GLint);
alias glbfn_glDrawElementsInstancedBaseVertex = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint);
alias glbfn_glMultiDrawElementsBaseVertex = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei, const(GLint)*);
alias glbfn_glProvokingVertex = void function(GLenum);
//alias glbfn_glFenceSync = GLsync function(GLenum, GLbitfield);
//alias glbfn_glIsSync = GLboolean function(GLsync);
//alias glbfn_glDeleteSync = void function(GLsync);
//alias glbfn_glClientWaitSync = GLenum function(GLsync, GLbitfield, GLuint64);
//alias glbfn_glWaitSync = void function(GLsync, GLbitfield, GLuint64);
alias glbfn_glGetInteger64v = void function(GLenum, GLint64*);
//alias glbfn_glGetSynciv = void function(GLsync, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetInteger64i_v = void function(GLenum, GLuint, GLint64*);
alias glbfn_glGetBufferParameteri64v = void function(GLenum, GLenum, GLint64*);
alias glbfn_glFramebufferTexture = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glTexImage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glGetMultisamplefv = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaski = void function(GLuint, GLbitfield);
alias glbfn_glBindFragDataLocationIndexed = void function(GLuint, GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataIndex = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGenSamplers = void function(GLsizei, GLuint*);
alias glbfn_glDeleteSamplers = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsSampler = GLboolean function(GLuint);
alias glbfn_glBindSampler = void function(GLuint, GLuint);
alias glbfn_glSamplerParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glSamplerParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glSamplerParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glSamplerParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glSamplerParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glGetSamplerParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetSamplerParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetSamplerParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glQueryCounter = void function(GLuint, GLenum);
alias glbfn_glGetQueryObjecti64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64v = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glVertexAttribDivisor = void function(GLuint, GLuint);
alias glbfn_glVertexAttribP1ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP1uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP2ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP2uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP3ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP3uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexAttribP4ui = void function(GLuint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribP4uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
alias glbfn_glVertexP2ui = void function(GLenum, GLuint);
alias glbfn_glVertexP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP3ui = void function(GLenum, GLuint);
alias glbfn_glVertexP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glVertexP4ui = void function(GLenum, GLuint);
alias glbfn_glVertexP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP1ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP1uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP2ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP2uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP3ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glTexCoordP4ui = void function(GLenum, GLuint);
alias glbfn_glTexCoordP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP1ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP1uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP2ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP2uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP3ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP3uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glMultiTexCoordP4ui = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordP4uiv = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glNormalP3ui = void function(GLenum, GLuint);
alias glbfn_glNormalP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP3ui = void function(GLenum, GLuint);
alias glbfn_glColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glColorP4ui = void function(GLenum, GLuint);
alias glbfn_glColorP4uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glSecondaryColorP3ui = void function(GLenum, GLuint);
alias glbfn_glSecondaryColorP3uiv = void function(GLenum, const(GLuint)*);
alias glbfn_glMinSampleShading = void function(GLfloat);
alias glbfn_glBlendEquationi = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparatei = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunci = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparatei = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysIndirect = void function(GLenum, const(void)*);
alias glbfn_glDrawElementsIndirect = void function(GLenum, GLenum, const(void)*);
alias glbfn_glUniform1d = void function(GLint, GLdouble);
alias glbfn_glUniform2d = void function(GLint, GLdouble, GLdouble);
alias glbfn_glUniform3d = void function(GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform4d = void function(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glUniform1dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform2dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform3dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniform4dv = void function(GLint, GLsizei, const(GLdouble)*);
alias glbfn_glUniformMatrix2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix2x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix3x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glUniformMatrix4x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glGetUniformdv = void function(GLuint, GLint, GLdouble*);
alias glbfn_glGetSubroutineUniformLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetSubroutineIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetActiveSubroutineUniformiv = void function(GLuint, GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetActiveSubroutineUniformName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetActiveSubroutineName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glUniformSubroutinesuiv = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetUniformSubroutineuiv = void function(GLenum, GLint, GLuint*);
alias glbfn_glGetProgramStageiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glPatchParameteri = void function(GLenum, GLint);
alias glbfn_glPatchParameterfv = void function(GLenum, const(GLfloat)*);
alias glbfn_glBindTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacks = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedback = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedback = void function();
alias glbfn_glResumeTransformFeedback = void function();
alias glbfn_glDrawTransformFeedback = void function(GLenum, GLuint);
alias glbfn_glDrawTransformFeedbackStream = void function(GLenum, GLuint, GLuint);
alias glbfn_glBeginQueryIndexed = void function(GLenum, GLuint, GLuint);
alias glbfn_glEndQueryIndexed = void function(GLenum, GLuint);
alias glbfn_glGetQueryIndexediv = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glReleaseShaderCompiler = void function();
alias glbfn_glShaderBinary = void function(GLsizei, const(GLuint)*, GLenum, const(void)*, GLsizei);
alias glbfn_glGetShaderPrecisionFormat = void function(GLenum, GLenum, GLint*, GLint*);
alias glbfn_glDepthRangef = void function(GLfloat, GLfloat);
alias glbfn_glClearDepthf = void function(GLfloat);
alias glbfn_glGetProgramBinary = void function(GLuint, GLsizei, GLsizei*, GLenum*, void*);
alias glbfn_glProgramBinary = void function(GLuint, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glUseProgramStages = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glActiveShaderProgram = void function(GLuint, GLuint);
alias glbfn_glCreateShaderProgramv = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glBindProgramPipeline = void function(GLuint);
alias glbfn_glDeleteProgramPipelines = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glIsProgramPipeline = GLboolean function(GLuint);
alias glbfn_glGetProgramPipelineiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1i = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform1iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform1f = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform1fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1d = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform1dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform1ui = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform1uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2i = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform2iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2f = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform2fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2d = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform2dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2ui = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform2uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3i = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3ui = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4i = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4ui = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniformMatrix2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glValidateProgramPipeline = void function(GLuint);
alias glbfn_glGetProgramPipelineInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glVertexAttribL1d = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2d = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dv = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointer = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdv = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glViewportArrayv = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glViewportIndexedf = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glViewportIndexedfv = void function(GLuint, const(GLfloat)*);
alias glbfn_glScissorArrayv = void function(GLuint, GLsizei, const(GLint)*);
alias glbfn_glScissorIndexed = void function(GLuint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glScissorIndexedv = void function(GLuint, const(GLint)*);
alias glbfn_glDepthRangeArrayv = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glDepthRangeIndexed = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glGetFloati_v = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_v = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glDrawArraysInstancedBaseInstance = void function(GLenum, GLint, GLsizei, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLuint);
alias glbfn_glDrawElementsInstancedBaseVertexBaseInstance = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint, GLuint);
alias glbfn_glGetInternalformativ = void function(GLenum, GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetActiveAtomicCounterBufferiv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glBindImageTexture = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
alias glbfn_glMemoryBarrier = void function(GLbitfield);
alias glbfn_glTexStorage1D = void function(GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTexStorage2D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTexStorage3D = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glDrawTransformFeedbackInstanced = void function(GLenum, GLuint, GLsizei);
alias glbfn_glDrawTransformFeedbackStreamInstanced = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glClearBufferData = void function(GLenum, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearBufferSubData = void function(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glDispatchCompute = void function(GLuint, GLuint, GLuint);
alias glbfn_glDispatchComputeIndirect = void function(GLintptr);
alias glbfn_glCopyImageSubData = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glFramebufferParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glGetFramebufferParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetInternalformati64v = void function(GLenum, GLenum, GLenum, GLsizei, GLint64*);
alias glbfn_glInvalidateTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glInvalidateTexImage = void function(GLuint, GLint);
alias glbfn_glInvalidateBufferSubData = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glInvalidateBufferData = void function(GLuint);
alias glbfn_glInvalidateFramebuffer = void function(GLenum, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateSubFramebuffer = void function(GLenum, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glMultiDrawArraysIndirect = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirect = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGetProgramInterfaceiv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetProgramResourceIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramResourceiv = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLint*);
alias glbfn_glGetProgramResourceLocation = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glGetProgramResourceLocationIndex = GLint function(GLuint, GLenum, const(GLchar)*);
alias glbfn_glShaderStorageBlockBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glTexBufferRange = void function(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTexStorage2DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexStorage3DMultisample = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureView = void function(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glBindVertexBuffer = void function(GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexAttribFormat = void function(GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexAttribIFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribLFormat = void function(GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexAttribBinding = void function(GLuint, GLuint);
alias glbfn_glVertexBindingDivisor = void function(GLuint, GLuint);
alias glbfn_glDebugMessageControl = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsert = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallback = void function(GLDEBUGPROC, const(void)*);
alias glbfn_glGetDebugMessageLog = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroup = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroup = void function();
alias glbfn_glObjectLabel = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabel = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabel = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabel = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glBufferStorage = void function(GLenum, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearTexImage = void function(GLuint, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glClearTexSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glBindBuffersBase = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindBuffersRange = void function(GLenum, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizeiptr)*);
alias glbfn_glBindTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindSamplers = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindImageTextures = void function(GLuint, GLsizei, const(GLuint)*);
alias glbfn_glBindVertexBuffers = void function(GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glClipControl = void function(GLenum, GLenum);
alias glbfn_glCreateTransformFeedbacks = void function(GLsizei, GLuint*);
alias glbfn_glTransformFeedbackBufferBase = void function(GLuint, GLuint, GLuint);
alias glbfn_glTransformFeedbackBufferRange = void function(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetTransformFeedbackiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTransformFeedbacki_v = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetTransformFeedbacki64_v = void function(GLuint, GLenum, GLuint, GLint64*);
alias glbfn_glCreateBuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedBufferStorage = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glNamedBufferData = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glCopyNamedBufferSubData = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glClearNamedBufferData = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubData = void function(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glMapNamedBuffer = void* function(GLuint, GLenum);
alias glbfn_glMapNamedBufferRange = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glUnmapNamedBuffer = GLboolean function(GLuint);
alias glbfn_glFlushMappedNamedBufferRange = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glGetNamedBufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferParameteri64v = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetNamedBufferPointerv = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubData = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glCreateFramebuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedFramebufferRenderbuffer = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glNamedFramebufferParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glNamedFramebufferTexture = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayer = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferDrawBuffer = void function(GLuint, GLenum);
alias glbfn_glNamedFramebufferDrawBuffers = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glNamedFramebufferReadBuffer = void function(GLuint, GLenum);
alias glbfn_glInvalidateNamedFramebufferData = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glInvalidateNamedFramebufferSubData = void function(GLuint, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glClearNamedFramebufferiv = void function(GLuint, GLenum, GLint, const(GLint)*);
alias glbfn_glClearNamedFramebufferuiv = void function(GLuint, GLenum, GLint, const(GLuint)*);
alias glbfn_glClearNamedFramebufferfv = void function(GLuint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glClearNamedFramebufferfi = void function(GLuint, GLenum, GLint, GLfloat, GLint);
alias glbfn_glBlitNamedFramebuffer = void function(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glCheckNamedFramebufferStatus = GLenum function(GLuint, GLenum);
alias glbfn_glGetNamedFramebufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedFramebufferAttachmentParameteriv = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glCreateRenderbuffers = void function(GLsizei, GLuint*);
alias glbfn_glNamedRenderbufferStorage = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateTextures = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glTextureBuffer = void function(GLuint, GLenum, GLuint);
alias glbfn_glTextureBufferRange = void function(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1D = void function(GLuint, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3D = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisample = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCompressedTextureSubImage1D = void function(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTextureSubImage1D = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTextureSubImage3D = void function(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glTextureParameterf = void function(GLuint, GLenum, GLfloat);
alias glbfn_glTextureParameterfv = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteri = void function(GLuint, GLenum, GLint);
alias glbfn_glTextureParameterIiv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuiv = void function(GLuint, GLenum, const(GLuint)*);
alias glbfn_glTextureParameteriv = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glGenerateTextureMipmap = void function(GLuint);
alias glbfn_glBindTextureUnit = void function(GLuint, GLuint);
alias glbfn_glGetTextureImage = void function(GLuint, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureImage = void function(GLuint, GLint, GLsizei, void*);
alias glbfn_glGetTextureLevelParameterfv = void function(GLuint, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameteriv = void function(GLuint, GLint, GLenum, GLint*);
alias glbfn_glGetTextureParameterfv = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterIiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuiv = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetTextureParameteriv = void function(GLuint, GLenum, GLint*);
alias glbfn_glCreateVertexArrays = void function(GLsizei, GLuint*);
alias glbfn_glDisableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glEnableVertexArrayAttrib = void function(GLuint, GLuint);
alias glbfn_glVertexArrayElementBuffer = void function(GLuint, GLuint);
alias glbfn_glVertexArrayVertexBuffer = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexBuffers = void function(GLuint, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
alias glbfn_glVertexArrayAttribBinding = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayAttribFormat = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayAttribIFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayAttribLFormat = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayBindingDivisor = void function(GLuint, GLuint, GLuint);
alias glbfn_glGetVertexArrayiv = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexediv = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayIndexed64iv = void function(GLuint, GLuint, GLenum, GLint64*);
alias glbfn_glCreateSamplers = void function(GLsizei, GLuint*);
alias glbfn_glCreateProgramPipelines = void function(GLsizei, GLuint*);
alias glbfn_glCreateQueries = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetQueryBufferObjecti64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectui64v = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glGetQueryBufferObjectuiv = void function(GLuint, GLuint, GLenum, GLintptr);
alias glbfn_glMemoryBarrierByRegion = void function(GLbitfield);
alias glbfn_glGetTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetCompressedTextureSubImage = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void*);
alias glbfn_glGetGraphicsResetStatus = GLenum function();
alias glbfn_glGetnCompressedTexImage = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnTexImage = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformdv = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnUniformfv = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformiv = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuiv = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glReadnPixels = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMapdv = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfv = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapiv = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfv = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuiv = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusv = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStipple = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTable = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilter = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogram = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmax = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glTextureBarrier = void function();

// ////////////////////////////////////////////////////////////////////////// //
alias glbfn_glTbufferMask3DFX = void function(GLuint);
alias glbfn_glDebugMessageEnableAMD = void function(GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertAMD = void function(GLenum, GLenum, GLuint, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackAMD = void function(GLDEBUGPROCAMD, void*);
alias glbfn_glGetDebugMessageLogAMD = GLuint function(GLuint, GLsizei, GLenum*, GLuint*, GLuint*, GLsizei*, GLchar*);
alias glbfn_glBlendFuncIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateIndexedAMD = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationIndexedAMD = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateIndexedAMD = void function(GLuint, GLenum, GLenum);
alias glbfn_glUniform1i64NV = void function(GLint, GLint64EXT);
alias glbfn_glUniform2i64NV = void function(GLint, GLint64EXT, GLint64EXT);
alias glbfn_glUniform3i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform4i64NV = void function(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glUniform1i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform2i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform3i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform4i64vNV = void function(GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glUniform1ui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniform2ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform3ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform4ui64NV = void function(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glUniform1ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform2ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform3ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glUniform4ui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glGetUniformi64vNV = void function(GLuint, GLint, GLint64EXT*);
alias glbfn_glGetUniformui64vNV = void function(GLuint, GLint, GLuint64EXT*);
alias glbfn_glProgramUniform1i64NV = void function(GLuint, GLint, GLint64EXT);
alias glbfn_glProgramUniform2i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform3i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform4i64NV = void function(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glProgramUniform1i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform2i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform3i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform4i64vNV = void function(GLuint, GLint, GLsizei, const(GLint64EXT)*);
alias glbfn_glProgramUniform1ui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniform2ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform3ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform4ui64NV = void function(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glProgramUniform1ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform2ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform3ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniform4ui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glVertexAttribParameteriAMD = void function(GLuint, GLenum, GLint);
alias glbfn_glMultiDrawArraysIndirectAMD = void function(GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectAMD = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei);
alias glbfn_glGenNamesAMD = void function(GLenum, GLuint, GLuint*);
alias glbfn_glDeleteNamesAMD = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glIsNameAMD = GLboolean function(GLenum, GLuint);
alias glbfn_glQueryObjectParameteruiAMD = void function(GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetPerfMonitorGroupsAMD = void function(GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorCountersAMD = void function(GLuint, GLint*, GLint*, GLsizei, GLuint*);
alias glbfn_glGetPerfMonitorGroupStringAMD = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterStringAMD = void function(GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPerfMonitorCounterInfoAMD = void function(GLuint, GLuint, GLenum, void*);
alias glbfn_glGenPerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glDeletePerfMonitorsAMD = void function(GLsizei, GLuint*);
alias glbfn_glSelectPerfMonitorCountersAMD = void function(GLuint, GLboolean, GLuint, GLint, GLuint*);
alias glbfn_glBeginPerfMonitorAMD = void function(GLuint);
alias glbfn_glEndPerfMonitorAMD = void function(GLuint);
alias glbfn_glGetPerfMonitorCounterDataAMD = void function(GLuint, GLenum, GLsizei, GLuint*, GLint*);
alias glbfn_glSetMultisamplefvAMD = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glTexStorageSparseAMD = void function(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glTextureStorageSparseAMD = void function(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
alias glbfn_glStencilOpValueAMD = void function(GLenum, GLuint);
alias glbfn_glTessellationFactorAMD = void function(GLfloat);
alias glbfn_glTessellationModeAMD = void function(GLenum);
alias glbfn_glElementPointerAPPLE = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayAPPLE = void function(GLenum, GLint, GLsizei);
alias glbfn_glDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, GLint, GLsizei);
alias glbfn_glMultiDrawElementArrayAPPLE = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawRangeElementArrayAPPLE = void function(GLenum, GLuint, GLuint, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glGenFencesAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glDeleteFencesAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glSetFenceAPPLE = void function(GLuint);
alias glbfn_glIsFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glTestFenceAPPLE = GLboolean function(GLuint);
alias glbfn_glFinishFenceAPPLE = void function(GLuint);
alias glbfn_glTestObjectAPPLE = GLboolean function(GLenum, GLuint);
alias glbfn_glFinishObjectAPPLE = void function(GLenum, GLint);
alias glbfn_glBufferParameteriAPPLE = void function(GLenum, GLenum, GLint);
alias glbfn_glFlushMappedBufferRangeAPPLE = void function(GLenum, GLintptr, GLsizeiptr);
alias glbfn_glObjectPurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glObjectUnpurgeableAPPLE = GLenum function(GLenum, GLuint, GLenum);
alias glbfn_glGetObjectParameterivAPPLE = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glTextureRangeAPPLE = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glGetTexParameterPointervAPPLE = void function(GLenum, GLenum, void**);
alias glbfn_glBindVertexArrayAPPLE = void function(GLuint);
alias glbfn_glDeleteVertexArraysAPPLE = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenVertexArraysAPPLE = void function(GLsizei, GLuint*);
alias glbfn_glIsVertexArrayAPPLE = GLboolean function(GLuint);
alias glbfn_glVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glFlushVertexArrayRangeAPPLE = void function(GLsizei, void*);
alias glbfn_glVertexArrayParameteriAPPLE = void function(GLenum, GLint);
alias glbfn_glEnableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glDisableVertexAttribAPPLE = void function(GLuint, GLenum);
alias glbfn_glIsVertexAttribEnabledAPPLE = GLboolean function(GLuint, GLenum);
alias glbfn_glMapVertexAttrib1dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib1fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glMapVertexAttrib2dAPPLE = void function(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glMapVertexAttrib2fAPPLE = void function(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glPrimitiveBoundingBoxARB = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetTextureHandleARB = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleARB = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentARB = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentARB = void function(GLuint64);
alias glbfn_glGetImageHandleARB = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentARB = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentARB = void function(GLuint64);
alias glbfn_glUniformHandleui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentARB = GLboolean function(GLuint64);
alias glbfn_glVertexAttribL1ui64ARB = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vARB = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLui64vARB = void function(GLuint, GLenum, GLuint64EXT*);
//alias glbfn_glCreateSyncFromCLeventARB = GLsync function(_cl_context*, _cl_event*, GLbitfield);
alias glbfn_glClampColorARB = void function(GLenum, GLenum);
alias glbfn_glDispatchComputeGroupSizeARB = void function(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glDebugMessageControlARB = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertARB = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackARB = void function(GLDEBUGPROCARB, const(void)*);
alias glbfn_glGetDebugMessageLogARB = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glDrawBuffersARB = void function(GLsizei, const(GLenum)*);
alias glbfn_glBlendEquationiARB = void function(GLuint, GLenum);
alias glbfn_glBlendEquationSeparateiARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFunciARB = void function(GLuint, GLenum, GLenum);
alias glbfn_glBlendFuncSeparateiARB = void function(GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glDrawArraysInstancedARB = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedARB = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glProgramStringARB = void function(GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glBindProgramARB = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramsARB = void function(GLsizei, GLuint*);
alias glbfn_glProgramEnvParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramEnvParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramEnvParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramEnvParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramLocalParameter4dARB = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramLocalParameter4dvARB = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramLocalParameter4fARB = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramLocalParameter4fvARB = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetProgramEnvParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramEnvParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramLocalParameterdvARB = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetProgramLocalParameterfvARB = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetProgramivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetProgramStringARB = void function(GLenum, GLenum, void*);
alias glbfn_glIsProgramARB = GLboolean function(GLuint);
alias glbfn_glProgramParameteriARB = void function(GLuint, GLenum, GLint);
alias glbfn_glFramebufferTextureARB = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureLayerARB = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferTextureFaceARB = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glUniform1i64ARB = void function(GLint, GLint64);
alias glbfn_glUniform2i64ARB = void function(GLint, GLint64, GLint64);
alias glbfn_glUniform3i64ARB = void function(GLint, GLint64, GLint64, GLint64);
alias glbfn_glUniform4i64ARB = void function(GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glUniform1i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform2i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform3i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform4i64vARB = void function(GLint, GLsizei, const(GLint64)*);
alias glbfn_glUniform1ui64ARB = void function(GLint, GLuint64);
alias glbfn_glUniform2ui64ARB = void function(GLint, GLuint64, GLuint64);
alias glbfn_glUniform3ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform4ui64ARB = void function(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glUniform1ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform2ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform3ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glUniform4ui64vARB = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glGetUniformi64vARB = void function(GLuint, GLint, GLint64*);
alias glbfn_glGetUniformui64vARB = void function(GLuint, GLint, GLuint64*);
alias glbfn_glGetnUniformi64vARB = void function(GLuint, GLint, GLsizei, GLint64*);
alias glbfn_glGetnUniformui64vARB = void function(GLuint, GLint, GLsizei, GLuint64*);
alias glbfn_glProgramUniform1i64ARB = void function(GLuint, GLint, GLint64);
alias glbfn_glProgramUniform2i64ARB = void function(GLuint, GLint, GLint64, GLint64);
alias glbfn_glProgramUniform3i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform4i64ARB = void function(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
alias glbfn_glProgramUniform1i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform2i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform3i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform4i64vARB = void function(GLuint, GLint, GLsizei, const(GLint64)*);
alias glbfn_glProgramUniform1ui64ARB = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniform2ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64);
alias glbfn_glProgramUniform3ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform4ui64ARB = void function(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
alias glbfn_glProgramUniform1ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform2ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform3ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniform4ui64vARB = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glColorTable = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTable = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTable = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glColorSubTable = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTable = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glConvolutionFilter1D = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterf = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteri = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameteriv = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1D = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2D = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilter = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilter = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glGetHistogram = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmax = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfv = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameteriv = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogram = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmax = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogram = void function(GLenum);
alias glbfn_glResetMinmax = void function(GLenum);
alias glbfn_glMultiDrawArraysIndirectCountARB = void function(GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glMultiDrawElementsIndirectCountARB = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizei, GLsizei);
alias glbfn_glVertexAttribDivisorARB = void function(GLuint, GLuint);
alias glbfn_glCurrentPaletteMatrixARB = void function(GLint);
alias glbfn_glMatrixIndexubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glMatrixIndexusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glMatrixIndexuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glMatrixIndexPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glSampleCoverageARB = void function(GLfloat, GLboolean);
alias glbfn_glActiveTextureARB = void function(GLenum);
alias glbfn_glClientActiveTextureARB = void function(GLenum);
alias glbfn_glMultiTexCoord1dARB = void function(GLenum, GLdouble);
alias glbfn_glMultiTexCoord1dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1fARB = void function(GLenum, GLfloat);
alias glbfn_glMultiTexCoord1fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord1iARB = void function(GLenum, GLint);
alias glbfn_glMultiTexCoord1ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord1sARB = void function(GLenum, GLshort);
alias glbfn_glMultiTexCoord1svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord2dARB = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord2dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord2fARB = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord2fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord2iARB = void function(GLenum, GLint, GLint);
alias glbfn_glMultiTexCoord2ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord2sARB = void function(GLenum, GLshort, GLshort);
alias glbfn_glMultiTexCoord2svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord3dARB = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord3dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord3fARB = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord3fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord3iARB = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord3ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord3sARB = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord3svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glMultiTexCoord4dARB = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMultiTexCoord4dvARB = void function(GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord4fARB = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMultiTexCoord4fvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glMultiTexCoord4iARB = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glMultiTexCoord4ivARB = void function(GLenum, const(GLint)*);
alias glbfn_glMultiTexCoord4sARB = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glMultiTexCoord4svARB = void function(GLenum, const(GLshort)*);
alias glbfn_glGenQueriesARB = void function(GLsizei, GLuint*);
alias glbfn_glDeleteQueriesARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsQueryARB = GLboolean function(GLuint);
alias glbfn_glBeginQueryARB = void function(GLenum, GLuint);
alias glbfn_glEndQueryARB = void function(GLenum);
alias glbfn_glGetQueryivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetQueryObjectivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetQueryObjectuivARB = void function(GLuint, GLenum, GLuint*);
alias glbfn_glMaxShaderCompilerThreadsARB = void function(GLuint);
alias glbfn_glPointParameterfARB = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvARB = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetGraphicsResetStatusARB = GLenum function();
alias glbfn_glGetnTexImageARB = void function(GLenum, GLint, GLenum, GLenum, GLsizei, void*);
alias glbfn_glReadnPixelsARB = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnCompressedTexImageARB = void function(GLenum, GLint, GLsizei, void*);
alias glbfn_glGetnUniformfvARB = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivARB = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivARB = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glGetnUniformdvARB = void function(GLuint, GLint, GLsizei, GLdouble*);
alias glbfn_glGetnMapdvARB = void function(GLenum, GLenum, GLsizei, GLdouble*);
alias glbfn_glGetnMapfvARB = void function(GLenum, GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnMapivARB = void function(GLenum, GLenum, GLsizei, GLint*);
alias glbfn_glGetnPixelMapfvARB = void function(GLenum, GLsizei, GLfloat*);
alias glbfn_glGetnPixelMapuivARB = void function(GLenum, GLsizei, GLuint*);
alias glbfn_glGetnPixelMapusvARB = void function(GLenum, GLsizei, GLushort*);
alias glbfn_glGetnPolygonStippleARB = void function(GLsizei, GLubyte*);
alias glbfn_glGetnColorTableARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnConvolutionFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnSeparableFilterARB = void function(GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*);
alias glbfn_glGetnHistogramARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnMinmaxARB = void function(GLenum, GLboolean, GLenum, GLenum, GLsizei, void*);
alias glbfn_glFramebufferSampleLocationsfvARB = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvARB = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glEvaluateDepthValuesARB = void function();
alias glbfn_glMinSampleShadingARB = void function(GLfloat);
alias glbfn_glDeleteObjectARB = void function(GLhandleARB);
alias glbfn_glGetHandleARB = GLhandleARB function(GLenum);
alias glbfn_glDetachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glCreateShaderObjectARB = GLhandleARB function(GLenum);
alias glbfn_glShaderSourceARB = void function(GLhandleARB, GLsizei, const(GLcharARB*)*, const(GLint)*);
alias glbfn_glCompileShaderARB = void function(GLhandleARB);
alias glbfn_glCreateProgramObjectARB = GLhandleARB function();
alias glbfn_glAttachObjectARB = void function(GLhandleARB, GLhandleARB);
alias glbfn_glLinkProgramARB = void function(GLhandleARB);
alias glbfn_glUseProgramObjectARB = void function(GLhandleARB);
alias glbfn_glValidateProgramARB = void function(GLhandleARB);
alias glbfn_glUniform1fARB = void function(GLint, GLfloat);
alias glbfn_glUniform2fARB = void function(GLint, GLfloat, GLfloat);
alias glbfn_glUniform3fARB = void function(GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform4fARB = void function(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glUniform1iARB = void function(GLint, GLint);
alias glbfn_glUniform2iARB = void function(GLint, GLint, GLint);
alias glbfn_glUniform3iARB = void function(GLint, GLint, GLint, GLint);
alias glbfn_glUniform4iARB = void function(GLint, GLint, GLint, GLint, GLint);
alias glbfn_glUniform1fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform2fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform3fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform4fvARB = void function(GLint, GLsizei, const(GLfloat)*);
alias glbfn_glUniform1ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform2ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform3ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniform4ivARB = void function(GLint, GLsizei, const(GLint)*);
alias glbfn_glUniformMatrix2fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix3fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glUniformMatrix4fvARB = void function(GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glGetObjectParameterfvARB = void function(GLhandleARB, GLenum, GLfloat*);
alias glbfn_glGetObjectParameterivARB = void function(GLhandleARB, GLenum, GLint*);
alias glbfn_glGetInfoLogARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glGetAttachedObjectsARB = void function(GLhandleARB, GLsizei, GLsizei*, GLhandleARB*);
alias glbfn_glGetUniformLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glGetActiveUniformARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetUniformfvARB = void function(GLhandleARB, GLint, GLfloat*);
alias glbfn_glGetUniformivARB = void function(GLhandleARB, GLint, GLint*);
alias glbfn_glGetShaderSourceARB = void function(GLhandleARB, GLsizei, GLsizei*, GLcharARB*);
alias glbfn_glNamedStringARB = void function(GLenum, GLint, const(GLchar)*, GLint, const(GLchar)*);
alias glbfn_glDeleteNamedStringARB = void function(GLint, const(GLchar)*);
alias glbfn_glCompileShaderIncludeARB = void function(GLuint, GLsizei, const(GLchar*)*, const(GLint)*);
alias glbfn_glIsNamedStringARB = GLboolean function(GLint, const(GLchar)*);
alias glbfn_glGetNamedStringARB = void function(GLint, const(GLchar)*, GLsizei, GLint*, GLchar*);
alias glbfn_glGetNamedStringivARB = void function(GLint, const(GLchar)*, GLenum, GLint*);
alias glbfn_glBufferPageCommitmentARB = void function(GLenum, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentEXT = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glNamedBufferPageCommitmentARB = void function(GLuint, GLintptr, GLsizeiptr, GLboolean);
alias glbfn_glTexPageCommitmentARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexBufferARB = void function(GLenum, GLenum, GLuint);
alias glbfn_glCompressedTexImage3DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage2DARB = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexImage1DARB = void function(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage3DARB = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage2DARB = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTexSubImage1DARB = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTexImageARB = void function(GLenum, GLint, void*);
alias glbfn_glLoadTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glLoadTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glMultTransposeMatrixfARB = void function(const(GLfloat)*);
alias glbfn_glMultTransposeMatrixdARB = void function(const(GLdouble)*);
alias glbfn_glWeightbvARB = void function(GLint, const(GLbyte)*);
alias glbfn_glWeightsvARB = void function(GLint, const(GLshort)*);
alias glbfn_glWeightivARB = void function(GLint, const(GLint)*);
alias glbfn_glWeightfvARB = void function(GLint, const(GLfloat)*);
alias glbfn_glWeightdvARB = void function(GLint, const(GLdouble)*);
alias glbfn_glWeightubvARB = void function(GLint, const(GLubyte)*);
alias glbfn_glWeightusvARB = void function(GLint, const(GLushort)*);
alias glbfn_glWeightuivARB = void function(GLint, const(GLuint)*);
alias glbfn_glWeightPointerARB = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexBlendARB = void function(GLint);
alias glbfn_glBindBufferARB = void function(GLenum, GLuint);
alias glbfn_glDeleteBuffersARB = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenBuffersARB = void function(GLsizei, GLuint*);
alias glbfn_glIsBufferARB = GLboolean function(GLuint);
alias glbfn_glBufferDataARB = void function(GLenum, GLsizeiptrARB, const(void)*, GLenum);
alias glbfn_glBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, const(void)*);
alias glbfn_glGetBufferSubDataARB = void function(GLenum, GLintptrARB, GLsizeiptrARB, void*);
alias glbfn_glMapBufferARB = void* function(GLenum, GLenum);
alias glbfn_glUnmapBufferARB = GLboolean function(GLenum);
alias glbfn_glGetBufferParameterivARB = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetBufferPointervARB = void function(GLenum, GLenum, void**);
alias glbfn_glVertexAttrib1dARB = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fARB = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sARB = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dARB = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fARB = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sARB = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dARB = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fARB = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sARB = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NbvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4NivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4NsvARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4NubARB = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4NubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4NuivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4NusvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttrib4bvARB = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttrib4dARB = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvARB = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fARB = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvARB = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4ivARB = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttrib4sARB = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svARB = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubvARB = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttrib4uivARB = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttrib4usvARB = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribPointerARB = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, const(void)*);
alias glbfn_glEnableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glDisableVertexAttribArrayARB = void function(GLuint);
alias glbfn_glGetVertexAttribdvARB = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvARB = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivARB = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervARB = void function(GLuint, GLenum, void**);
alias glbfn_glBindAttribLocationARB = void function(GLhandleARB, GLuint, const(GLcharARB)*);
alias glbfn_glGetActiveAttribARB = void function(GLhandleARB, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLcharARB*);
alias glbfn_glGetAttribLocationARB = GLint function(GLhandleARB, const(GLcharARB)*);
alias glbfn_glWindowPos2dARB = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fARB = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iARB = void function(GLint, GLint);
alias glbfn_glWindowPos2ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos2sARB = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svARB = void function(const(GLshort)*);
alias glbfn_glWindowPos3dARB = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvARB = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fARB = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvARB = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iARB = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivARB = void function(const(GLint)*);
alias glbfn_glWindowPos3sARB = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svARB = void function(const(GLshort)*);
alias glbfn_glDrawBuffersATI = void function(GLsizei, const(GLenum)*);
alias glbfn_glElementPointerATI = void function(GLenum, const(void)*);
alias glbfn_glDrawElementArrayATI = void function(GLenum, GLsizei);
alias glbfn_glDrawRangeElementArrayATI = void function(GLenum, GLuint, GLuint, GLsizei);
alias glbfn_glTexBumpParameterivATI = void function(GLenum, const(GLint)*);
alias glbfn_glTexBumpParameterfvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetTexBumpParameterivATI = void function(GLenum, GLint*);
alias glbfn_glGetTexBumpParameterfvATI = void function(GLenum, GLfloat*);
alias glbfn_glGenFragmentShadersATI = GLuint function(GLuint);
alias glbfn_glBindFragmentShaderATI = void function(GLuint);
alias glbfn_glDeleteFragmentShaderATI = void function(GLuint);
alias glbfn_glBeginFragmentShaderATI = void function();
alias glbfn_glEndFragmentShaderATI = void function();
alias glbfn_glPassTexCoordATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glSampleMapATI = void function(GLuint, GLuint, GLenum);
alias glbfn_glColorFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glColorFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp1ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp2ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAlphaFragmentOp3ATI = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSetFragmentShaderConstantATI = void function(GLuint, const(GLfloat)*);
alias glbfn_glMapObjectBufferATI = void* function(GLuint);
alias glbfn_glUnmapObjectBufferATI = void function(GLuint);
alias glbfn_glPNTrianglesiATI = void function(GLenum, GLint);
alias glbfn_glPNTrianglesfATI = void function(GLenum, GLfloat);
alias glbfn_glStencilOpSeparateATI = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glStencilFuncSeparateATI = void function(GLenum, GLenum, GLint, GLuint);
alias glbfn_glNewObjectBufferATI = GLuint function(GLsizei, const(void)*, GLenum);
alias glbfn_glIsObjectBufferATI = GLboolean function(GLuint);
alias glbfn_glUpdateObjectBufferATI = void function(GLuint, GLuint, GLsizei, const(void)*, GLenum);
alias glbfn_glGetObjectBufferfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetObjectBufferivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glFreeObjectBufferATI = void function(GLuint);
alias glbfn_glArrayObjectATI = void function(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetArrayObjectfvATI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetArrayObjectivATI = void function(GLenum, GLenum, GLint*);
alias glbfn_glVariantArrayObjectATI = void function(GLuint, GLenum, GLsizei, GLuint, GLuint);
alias glbfn_glGetVariantArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexAttribArrayObjectATI = void function(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
alias glbfn_glGetVertexAttribArrayObjectfvATI = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribArrayObjectivATI = void function(GLuint, GLenum, GLint*);
alias glbfn_glVertexStream1sATI = void function(GLenum, GLshort);
alias glbfn_glVertexStream1svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream1iATI = void function(GLenum, GLint);
alias glbfn_glVertexStream1ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream1fATI = void function(GLenum, GLfloat);
alias glbfn_glVertexStream1fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream1dATI = void function(GLenum, GLdouble);
alias glbfn_glVertexStream1dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream2sATI = void function(GLenum, GLshort, GLshort);
alias glbfn_glVertexStream2svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream2iATI = void function(GLenum, GLint, GLint);
alias glbfn_glVertexStream2ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream2fATI = void function(GLenum, GLfloat, GLfloat);
alias glbfn_glVertexStream2fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream2dATI = void function(GLenum, GLdouble, GLdouble);
alias glbfn_glVertexStream2dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glVertexStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glVertexStream4sATI = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexStream4svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glVertexStream4iATI = void function(GLenum, GLint, GLint, GLint, GLint);
alias glbfn_glVertexStream4ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glVertexStream4fATI = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexStream4fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glVertexStream4dATI = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexStream4dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glNormalStream3bATI = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glNormalStream3bvATI = void function(GLenum, const(GLbyte)*);
alias glbfn_glNormalStream3sATI = void function(GLenum, GLshort, GLshort, GLshort);
alias glbfn_glNormalStream3svATI = void function(GLenum, const(GLshort)*);
alias glbfn_glNormalStream3iATI = void function(GLenum, GLint, GLint, GLint);
alias glbfn_glNormalStream3ivATI = void function(GLenum, const(GLint)*);
alias glbfn_glNormalStream3fATI = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormalStream3fvATI = void function(GLenum, const(GLfloat)*);
alias glbfn_glNormalStream3dATI = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glNormalStream3dvATI = void function(GLenum, const(GLdouble)*);
alias glbfn_glClientActiveVertexStreamATI = void function(GLenum);
alias glbfn_glVertexBlendEnviATI = void function(GLenum, GLint);
alias glbfn_glVertexBlendEnvfATI = void function(GLenum, GLfloat);
alias glbfn_glUniformBufferEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glGetUniformBufferSizeEXT = GLint function(GLuint, GLint);
alias glbfn_glGetUniformOffsetEXT = GLintptr function(GLuint, GLint);
alias glbfn_glBlendColorEXT = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glBlendEquationSeparateEXT = void function(GLenum, GLenum);
alias glbfn_glBlendFuncSeparateEXT = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glBlendEquationEXT = void function(GLenum);
alias glbfn_glColorSubTableEXT = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyColorSubTableEXT = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
alias glbfn_glLockArraysEXT = void function(GLint, GLsizei);
alias glbfn_glUnlockArraysEXT = void function();
alias glbfn_glConvolutionFilter1DEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glConvolutionParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glConvolutionParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glConvolutionParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glConvolutionParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyConvolutionFilter1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glCopyConvolutionFilter2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetConvolutionFilterEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetConvolutionParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetConvolutionParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetSeparableFilterEXT = void function(GLenum, GLenum, GLenum, void*, void*, void*);
alias glbfn_glSeparableFilter2DEXT = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
alias glbfn_glTangent3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTangent3bvEXT = void function(const(GLbyte)*);
alias glbfn_glTangent3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glTangent3dvEXT = void function(const(GLdouble)*);
alias glbfn_glTangent3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glTangent3fvEXT = void function(const(GLfloat)*);
alias glbfn_glTangent3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glTangent3ivEXT = void function(const(GLint)*);
alias glbfn_glTangent3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glTangent3svEXT = void function(const(GLshort)*);
alias glbfn_glBinormal3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glBinormal3bvEXT = void function(const(GLbyte)*);
alias glbfn_glBinormal3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glBinormal3dvEXT = void function(const(GLdouble)*);
alias glbfn_glBinormal3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glBinormal3fvEXT = void function(const(GLfloat)*);
alias glbfn_glBinormal3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glBinormal3ivEXT = void function(const(GLint)*);
alias glbfn_glBinormal3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glBinormal3svEXT = void function(const(GLshort)*);
alias glbfn_glTangentPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBinormalPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glCopyTexImage1DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTexImage2DEXT = void function(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCopyTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glCullParameterdvEXT = void function(GLenum, GLdouble*);
alias glbfn_glCullParameterfvEXT = void function(GLenum, GLfloat*);
alias glbfn_glLabelObjectEXT = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelEXT = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glInsertEventMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPushGroupMarkerEXT = void function(GLsizei, const(GLchar)*);
alias glbfn_glPopGroupMarkerEXT = void function();
alias glbfn_glDepthBoundsEXT = void function(GLclampd, GLclampd);
alias glbfn_glMatrixLoadfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoaddEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultfEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultdEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixLoadIdentityEXT = void function(GLenum);
alias glbfn_glMatrixRotatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixRotatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixScalefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixScaledEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixTranslatefEXT = void function(GLenum, GLfloat, GLfloat, GLfloat);
alias glbfn_glMatrixTranslatedEXT = void function(GLenum, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixFrustumEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixOrthoEXT = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glMatrixPopEXT = void function(GLenum);
alias glbfn_glMatrixPushEXT = void function(GLenum);
alias glbfn_glClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glPushClientAttribDefaultEXT = void function(GLbitfield);
alias glbfn_glTextureParameterfEXT = void function(GLuint, GLenum, GLenum, GLfloat);
alias glbfn_glTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glTextureParameteriEXT = void function(GLuint, GLenum, GLenum, GLint);
alias glbfn_glTextureParameterivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetTextureImageEXT = void function(GLuint, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetTextureParameterfvEXT = void function(GLuint, GLenum, GLenum, GLfloat*);
alias glbfn_glGetTextureParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureLevelParameterfvEXT = void function(GLuint, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetTextureLevelParameterivEXT = void function(GLuint, GLenum, GLint, GLenum, GLint*);
alias glbfn_glTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glBindMultiTextureEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glMultiTexCoordPointerEXT = void function(GLenum, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glMultiTexEnvfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexEnviEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexGendEXT = void function(GLenum, GLenum, GLenum, GLdouble);
alias glbfn_glMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexGenfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexGeniEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glGetMultiTexEnvfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexEnvivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexGendvEXT = void function(GLenum, GLenum, GLenum, GLdouble*);
alias glbfn_glGetMultiTexGenfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexGenivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glMultiTexParameteriEXT = void function(GLenum, GLenum, GLenum, GLint);
alias glbfn_glMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterfEXT = void function(GLenum, GLenum, GLenum, GLfloat);
alias glbfn_glMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
alias glbfn_glCopyMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
alias glbfn_glCopyMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
alias glbfn_glCopyMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glGetMultiTexImageEXT = void function(GLenum, GLenum, GLint, GLenum, GLenum, void*);
alias glbfn_glGetMultiTexParameterfvEXT = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetMultiTexParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexLevelParameterfvEXT = void function(GLenum, GLenum, GLint, GLenum, GLfloat*);
alias glbfn_glGetMultiTexLevelParameterivEXT = void function(GLenum, GLenum, GLint, GLenum, GLint*);
alias glbfn_glMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glCopyMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
alias glbfn_glEnableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloatIndexedvEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoubleIndexedvEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointerIndexedvEXT = void function(GLenum, GLuint, void**);
alias glbfn_glEnableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glDisableIndexedEXT = void function(GLenum, GLuint);
alias glbfn_glIsEnabledIndexedEXT = GLboolean function(GLenum, GLuint);
alias glbfn_glGetIntegerIndexedvEXT = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetBooleanIndexedvEXT = void function(GLenum, GLuint, GLboolean*);
alias glbfn_glCompressedTextureImage3DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage2DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureImage1DEXT = void function(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage3DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage2DEXT = void function(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedTextureSubImage1DEXT = void function(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedTextureImageEXT = void function(GLuint, GLenum, GLint, void*);
alias glbfn_glCompressedMultiTexImage3DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage2DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexImage1DEXT = void function(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage3DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage2DEXT = void function(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glCompressedMultiTexSubImage1DEXT = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
alias glbfn_glGetCompressedMultiTexImageEXT = void function(GLenum, GLenum, GLint, void*);
alias glbfn_glMatrixLoadTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glMatrixMultTransposefEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTransposedEXT = void function(GLenum, const(GLdouble)*);
alias glbfn_glNamedBufferDataEXT = void function(GLuint, GLsizeiptr, const(void)*, GLenum);
alias glbfn_glNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, const(void)*);
alias glbfn_glMapNamedBufferEXT = void* function(GLuint, GLenum);
alias glbfn_glUnmapNamedBufferEXT = GLboolean function(GLuint);
alias glbfn_glGetNamedBufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetNamedBufferPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetNamedBufferSubDataEXT = void function(GLuint, GLintptr, GLsizeiptr, void*);
alias glbfn_glProgramUniform1fEXT = void function(GLuint, GLint, GLfloat);
alias glbfn_glProgramUniform2fEXT = void function(GLuint, GLint, GLfloat, GLfloat);
alias glbfn_glProgramUniform3fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform4fEXT = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramUniform1iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glProgramUniform2iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glProgramUniform3iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform4iEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramUniform1fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform2fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform3fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform4fvEXT = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramUniform1ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform2ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform3ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniform4ivEXT = void function(GLuint, GLint, GLsizei, const(GLint)*);
alias glbfn_glProgramUniformMatrix2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix2x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x2fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix3x4fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glProgramUniformMatrix4x3fvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
alias glbfn_glTextureBufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glMultiTexBufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, const(GLint)*);
alias glbfn_glTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTextureParameterIivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetTextureParameterIuivEXT = void function(GLuint, GLenum, GLenum, GLuint*);
alias glbfn_glMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, const(GLint)*);
alias glbfn_glMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetMultiTexParameterIivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetMultiTexParameterIuivEXT = void function(GLenum, GLenum, GLenum, GLuint*);
alias glbfn_glProgramUniform1uiEXT = void function(GLuint, GLint, GLuint);
alias glbfn_glProgramUniform2uiEXT = void function(GLuint, GLint, GLuint, GLuint);
alias glbfn_glProgramUniform3uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform4uiEXT = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramUniform1uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform2uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform3uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glProgramUniform4uivEXT = void function(GLuint, GLint, GLsizei, const(GLuint)*);
alias glbfn_glNamedProgramLocalParameters4fvEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedProgramLocalParameterI4iEXT = void function(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glNamedProgramLocalParameterI4ivEXT = void function(GLuint, GLenum, GLuint, const(GLint)*);
alias glbfn_glNamedProgramLocalParametersI4ivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glNamedProgramLocalParameterI4uiEXT = void function(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glNamedProgramLocalParameterI4uivEXT = void function(GLuint, GLenum, GLuint, const(GLuint)*);
alias glbfn_glNamedProgramLocalParametersI4uivEXT = void function(GLuint, GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetNamedProgramLocalParameterIivEXT = void function(GLuint, GLenum, GLuint, GLint*);
alias glbfn_glGetNamedProgramLocalParameterIuivEXT = void function(GLuint, GLenum, GLuint, GLuint*);
alias glbfn_glEnableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glDisableClientStateiEXT = void function(GLenum, GLuint);
alias glbfn_glGetFloati_vEXT = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glGetDoublei_vEXT = void function(GLenum, GLuint, GLdouble*);
alias glbfn_glGetPointeri_vEXT = void function(GLenum, GLuint, void**);
alias glbfn_glNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, GLsizei, const(void)*);
alias glbfn_glNamedProgramLocalParameter4dEXT = void function(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glNamedProgramLocalParameter4dvEXT = void function(GLuint, GLenum, GLuint, const(GLdouble)*);
alias glbfn_glNamedProgramLocalParameter4fEXT = void function(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNamedProgramLocalParameter4fvEXT = void function(GLuint, GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGetNamedProgramLocalParameterdvEXT = void function(GLuint, GLenum, GLuint, GLdouble*);
alias glbfn_glGetNamedProgramLocalParameterfvEXT = void function(GLuint, GLenum, GLuint, GLfloat*);
alias glbfn_glGetNamedProgramivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGetNamedProgramStringEXT = void function(GLuint, GLenum, GLenum, void*);
alias glbfn_glNamedRenderbufferStorageEXT = void function(GLuint, GLenum, GLsizei, GLsizei);
alias glbfn_glGetNamedRenderbufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedRenderbufferStorageMultisampleEXT = void function(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glNamedRenderbufferStorageMultisampleCoverageEXT = void function(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glCheckNamedFramebufferStatusEXT = GLenum function(GLuint, GLenum);
alias glbfn_glNamedFramebufferTexture1DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture2DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTexture3DEXT = void function(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferRenderbufferEXT = void function(GLuint, GLenum, GLenum, GLuint);
alias glbfn_glGetNamedFramebufferAttachmentParameterivEXT = void function(GLuint, GLenum, GLenum, GLint*);
alias glbfn_glGenerateTextureMipmapEXT = void function(GLuint, GLenum);
alias glbfn_glGenerateMultiTexMipmapEXT = void function(GLenum, GLenum);
alias glbfn_glFramebufferDrawBufferEXT = void function(GLuint, GLenum);
alias glbfn_glFramebufferDrawBuffersEXT = void function(GLuint, GLsizei, const(GLenum)*);
alias glbfn_glFramebufferReadBufferEXT = void function(GLuint, GLenum);
alias glbfn_glGetFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glNamedCopyBufferSubDataEXT = void function(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
alias glbfn_glNamedFramebufferTextureEXT = void function(GLuint, GLenum, GLuint, GLint);
alias glbfn_glNamedFramebufferTextureLayerEXT = void function(GLuint, GLenum, GLuint, GLint, GLint);
alias glbfn_glNamedFramebufferTextureFaceEXT = void function(GLuint, GLenum, GLuint, GLint, GLenum);
alias glbfn_glTextureRenderbufferEXT = void function(GLuint, GLenum, GLuint);
alias glbfn_glMultiTexRenderbufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glVertexArrayVertexOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayEdgeFlagOffsetEXT = void function(GLuint, GLuint, GLsizei, GLintptr);
alias glbfn_glVertexArrayIndexOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayNormalOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayTexCoordOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayMultiTexCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayFogCoordOffsetEXT = void function(GLuint, GLuint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArraySecondaryColorOffsetEXT = void function(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
alias glbfn_glVertexArrayVertexAttribIOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glEnableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glDisableVertexArrayEXT = void function(GLuint, GLenum);
alias glbfn_glEnableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glDisableVertexArrayAttribEXT = void function(GLuint, GLuint);
alias glbfn_glGetVertexArrayIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetVertexArrayIntegeri_vEXT = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexArrayPointeri_vEXT = void function(GLuint, GLuint, GLenum, void**);
alias glbfn_glMapNamedBufferRangeEXT = void* function(GLuint, GLintptr, GLsizeiptr, GLbitfield);
alias glbfn_glFlushMappedNamedBufferRangeEXT = void function(GLuint, GLintptr, GLsizeiptr);
alias glbfn_glNamedBufferStorageEXT = void function(GLuint, GLsizeiptr, const(void)*, GLbitfield);
alias glbfn_glClearNamedBufferDataEXT = void function(GLuint, GLenum, GLenum, GLenum, const(void)*);
alias glbfn_glClearNamedBufferSubDataEXT = void function(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const(void)*);
alias glbfn_glNamedFramebufferParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glGetNamedFramebufferParameterivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glProgramUniform1dEXT = void function(GLuint, GLint, GLdouble);
alias glbfn_glProgramUniform2dEXT = void function(GLuint, GLint, GLdouble, GLdouble);
alias glbfn_glProgramUniform3dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform4dEXT = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramUniform1dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform2dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform3dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniform4dvEXT = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix2x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix3x4dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x2dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glProgramUniformMatrix4x3dvEXT = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
alias glbfn_glTextureBufferRangeEXT = void function(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glTextureStorage1DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei);
alias glbfn_glTextureStorage2DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glTextureStorage3DEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
alias glbfn_glTextureStorage2DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureStorage3DMultisampleEXT = void function(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayBindVertexBufferEXT = void function(GLuint, GLuint, GLuint, GLintptr, GLsizei);
alias glbfn_glVertexArrayVertexAttribFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
alias glbfn_glVertexArrayVertexAttribIFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribLFormatEXT = void function(GLuint, GLuint, GLint, GLenum, GLuint);
alias glbfn_glVertexArrayVertexAttribBindingEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexBindingDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexArrayVertexAttribLOffsetEXT = void function(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
alias glbfn_glTexturePageCommitmentEXT = void function(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glVertexArrayVertexAttribDivisorEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glColorMaskIndexedEXT = void function(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glDrawArraysInstancedEXT = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glDrawElementsInstancedEXT = void function(GLenum, GLsizei, GLenum, const(void)*, GLsizei);
alias glbfn_glDrawRangeElementsEXT = void function(GLenum, GLuint, GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glFogCoordfEXT = void function(GLfloat);
alias glbfn_glFogCoordfvEXT = void function(const(GLfloat)*);
alias glbfn_glFogCoorddEXT = void function(GLdouble);
alias glbfn_glFogCoorddvEXT = void function(const(GLdouble)*);
alias glbfn_glFogCoordPointerEXT = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glBlitFramebufferEXT = void function(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
alias glbfn_glRenderbufferStorageMultisampleEXT = void function(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glIsRenderbufferEXT = GLboolean function(GLuint);
alias glbfn_glBindRenderbufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteRenderbuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenRenderbuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glRenderbufferStorageEXT = void function(GLenum, GLenum, GLsizei, GLsizei);
alias glbfn_glGetRenderbufferParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glIsFramebufferEXT = GLboolean function(GLuint);
alias glbfn_glBindFramebufferEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteFramebuffersEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFramebuffersEXT = void function(GLsizei, GLuint*);
alias glbfn_glCheckFramebufferStatusEXT = GLenum function(GLenum);
alias glbfn_glFramebufferTexture1DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture2DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTexture3DEXT = void function(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glFramebufferRenderbufferEXT = void function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glGetFramebufferAttachmentParameterivEXT = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGenerateMipmapEXT = void function(GLenum);
alias glbfn_glProgramParameteriEXT = void function(GLuint, GLenum, GLint);
alias glbfn_glProgramEnvParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramLocalParameters4fvEXT = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glGetUniformuivEXT = void function(GLuint, GLint, GLuint*);
alias glbfn_glBindFragDataLocationEXT = void function(GLuint, GLuint, const(GLchar)*);
alias glbfn_glGetFragDataLocationEXT = GLint function(GLuint, const(GLchar)*);
alias glbfn_glUniform1uiEXT = void function(GLint, GLuint);
alias glbfn_glUniform2uiEXT = void function(GLint, GLuint, GLuint);
alias glbfn_glUniform3uiEXT = void function(GLint, GLuint, GLuint, GLuint);
alias glbfn_glUniform4uiEXT = void function(GLint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glUniform1uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform2uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform3uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glUniform4uivEXT = void function(GLint, GLsizei, const(GLuint)*);
alias glbfn_glGetHistogramEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetHistogramParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetHistogramParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMinmaxEXT = void function(GLenum, GLboolean, GLenum, GLenum, void*);
alias glbfn_glGetMinmaxParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMinmaxParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glHistogramEXT = void function(GLenum, GLsizei, GLenum, GLboolean);
alias glbfn_glMinmaxEXT = void function(GLenum, GLenum, GLboolean);
alias glbfn_glResetHistogramEXT = void function(GLenum);
alias glbfn_glResetMinmaxEXT = void function(GLenum);
alias glbfn_glIndexFuncEXT = void function(GLenum, GLclampf);
alias glbfn_glIndexMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glApplyTextureEXT = void function(GLenum);
alias glbfn_glTextureLightEXT = void function(GLenum);
alias glbfn_glTextureMaterialEXT = void function(GLenum, GLenum);
alias glbfn_glMultiDrawArraysEXT = void function(GLenum, const(GLint)*, const(GLsizei)*, GLsizei);
alias glbfn_glMultiDrawElementsEXT = void function(GLenum, const(GLsizei)*, GLenum, const(void*)*, GLsizei);
alias glbfn_glSampleMaskEXT = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternEXT = void function(GLenum);
alias glbfn_glColorTableEXT = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glGetColorTableEXT = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetColorTableParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelTransformParameteriEXT = void function(GLenum, GLenum, GLint);
alias glbfn_glPixelTransformParameterfEXT = void function(GLenum, GLenum, GLfloat);
alias glbfn_glPixelTransformParameterivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glPixelTransformParameterfvEXT = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTransformParameterivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPixelTransformParameterfvEXT = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPointParameterfEXT = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvEXT = void function(GLenum, const(GLfloat)*);
alias glbfn_glPolygonOffsetEXT = void function(GLfloat, GLfloat);
alias glbfn_glPolygonOffsetClampEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glProvokingVertexEXT = void function(GLenum);
alias glbfn_glRasterSamplesEXT = void function(GLuint, GLboolean);
alias glbfn_glSecondaryColor3bEXT = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glSecondaryColor3bvEXT = void function(const(GLbyte)*);
alias glbfn_glSecondaryColor3dEXT = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glSecondaryColor3dvEXT = void function(const(GLdouble)*);
alias glbfn_glSecondaryColor3fEXT = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glSecondaryColor3fvEXT = void function(const(GLfloat)*);
alias glbfn_glSecondaryColor3iEXT = void function(GLint, GLint, GLint);
alias glbfn_glSecondaryColor3ivEXT = void function(const(GLint)*);
alias glbfn_glSecondaryColor3sEXT = void function(GLshort, GLshort, GLshort);
alias glbfn_glSecondaryColor3svEXT = void function(const(GLshort)*);
alias glbfn_glSecondaryColor3ubEXT = void function(GLubyte, GLubyte, GLubyte);
alias glbfn_glSecondaryColor3ubvEXT = void function(const(GLubyte)*);
alias glbfn_glSecondaryColor3uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glSecondaryColor3uivEXT = void function(const(GLuint)*);
alias glbfn_glSecondaryColor3usEXT = void function(GLushort, GLushort, GLushort);
alias glbfn_glSecondaryColor3usvEXT = void function(const(GLushort)*);
alias glbfn_glSecondaryColorPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glUseShaderProgramEXT = void function(GLenum, GLuint);
alias glbfn_glActiveProgramEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramEXT = GLuint function(GLenum, const(GLchar)*);
alias glbfn_glActiveShaderProgramEXT = void function(GLuint, GLuint);
alias glbfn_glBindProgramPipelineEXT = void function(GLuint);
alias glbfn_glCreateShaderProgramvEXT = GLuint function(GLenum, GLsizei, const(GLchar*)*);
alias glbfn_glDeleteProgramPipelinesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenProgramPipelinesEXT = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramPipelineInfoLogEXT = void function(GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetProgramPipelineivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glIsProgramPipelineEXT = GLboolean function(GLuint);
alias glbfn_glUseProgramStagesEXT = void function(GLuint, GLbitfield, GLuint);
alias glbfn_glValidateProgramPipelineEXT = void function(GLuint);
alias glbfn_glBindImageTextureEXT = void function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
alias glbfn_glMemoryBarrierEXT = void function(GLbitfield);
alias glbfn_glStencilClearTagEXT = void function(GLsizei, GLuint);
alias glbfn_glActiveStencilFaceEXT = void function(GLenum);
alias glbfn_glTexSubImage1DEXT = void function(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage2DEXT = void function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTexImage3DEXT = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage3DEXT = void function(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glFramebufferTextureLayerEXT = void function(GLenum, GLenum, GLuint, GLint, GLint);
alias glbfn_glTexBufferEXT = void function(GLenum, GLenum, GLuint);
alias glbfn_glTexParameterIivEXT = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glTexParameterIuivEXT = void function(GLenum, GLenum, const(GLuint)*);
alias glbfn_glGetTexParameterIivEXT = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetTexParameterIuivEXT = void function(GLenum, GLenum, GLuint*);
alias glbfn_glClearColorIiEXT = void function(GLint, GLint, GLint, GLint);
alias glbfn_glClearColorIuiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glAreTexturesResidentEXT = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindTextureEXT = void function(GLenum, GLuint);
alias glbfn_glDeleteTexturesEXT = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTexturesEXT = void function(GLsizei, GLuint*);
alias glbfn_glIsTextureEXT = GLboolean function(GLuint);
alias glbfn_glPrioritizeTexturesEXT = void function(GLsizei, const(GLuint)*, const(GLclampf)*);
alias glbfn_glTextureNormalEXT = void function(GLenum);
alias glbfn_glGetQueryObjecti64vEXT = void function(GLuint, GLenum, GLint64*);
alias glbfn_glGetQueryObjectui64vEXT = void function(GLuint, GLenum, GLuint64*);
alias glbfn_glBeginTransformFeedbackEXT = void function(GLenum);
alias glbfn_glEndTransformFeedbackEXT = void function();
alias glbfn_glBindBufferRangeEXT = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetEXT = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseEXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsEXT = void function(GLuint, GLsizei, const(GLchar*)*, GLenum);
alias glbfn_glGetTransformFeedbackVaryingEXT = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glArrayElementEXT = void function(GLint);
alias glbfn_glColorPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glDrawArraysEXT = void function(GLenum, GLint, GLsizei);
alias glbfn_glEdgeFlagPointerEXT = void function(GLsizei, GLsizei, const(GLboolean)*);
alias glbfn_glGetPointervEXT = void function(GLenum, void**);
alias glbfn_glIndexPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glNormalPointerEXT = void function(GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glTexCoordPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexPointerEXT = void function(GLint, GLenum, GLsizei, GLsizei, const(void)*);
alias glbfn_glVertexAttribL1dEXT = void function(GLuint, GLdouble);
alias glbfn_glVertexAttribL2dEXT = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttribL3dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL4dEXT = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttribL1dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL2dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL3dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribL4dvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttribLPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribLdvEXT = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glBeginVertexShaderEXT = void function();
alias glbfn_glEndVertexShaderEXT = void function();
alias glbfn_glBindVertexShaderEXT = void function(GLuint);
alias glbfn_glGenVertexShadersEXT = GLuint function(GLuint);
alias glbfn_glDeleteVertexShaderEXT = void function(GLuint);
alias glbfn_glShaderOp1EXT = void function(GLenum, GLuint, GLuint);
alias glbfn_glShaderOp2EXT = void function(GLenum, GLuint, GLuint, GLuint);
alias glbfn_glShaderOp3EXT = void function(GLenum, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glSwizzleEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glWriteMaskEXT = void function(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glInsertComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glExtractComponentEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glGenSymbolsEXT = GLuint function(GLenum, GLenum, GLenum, GLuint);
alias glbfn_glSetInvariantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glSetLocalConstantEXT = void function(GLuint, GLenum, const(void)*);
alias glbfn_glVariantbvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVariantsvEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVariantivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVariantfvEXT = void function(GLuint, const(GLfloat)*);
alias glbfn_glVariantdvEXT = void function(GLuint, const(GLdouble)*);
alias glbfn_glVariantubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVariantusvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVariantuivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVariantPointerEXT = void function(GLuint, GLenum, GLuint, const(void)*);
alias glbfn_glEnableVariantClientStateEXT = void function(GLuint);
alias glbfn_glDisableVariantClientStateEXT = void function(GLuint);
alias glbfn_glBindLightParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindMaterialParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindTexGenParameterEXT = GLuint function(GLenum, GLenum, GLenum);
alias glbfn_glBindTextureUnitParameterEXT = GLuint function(GLenum, GLenum);
alias glbfn_glBindParameterEXT = GLuint function(GLenum);
alias glbfn_glIsVariantEnabledEXT = GLboolean function(GLuint, GLenum);
alias glbfn_glGetVariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetVariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVariantPointervEXT = void function(GLuint, GLenum, void**);
alias glbfn_glGetInvariantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetInvariantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetInvariantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetLocalConstantBooleanvEXT = void function(GLuint, GLenum, GLboolean*);
alias glbfn_glGetLocalConstantIntegervEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetLocalConstantFloatvEXT = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glVertexWeightfEXT = void function(GLfloat);
alias glbfn_glVertexWeightfvEXT = void function(const(GLfloat)*);
alias glbfn_glVertexWeightPointerEXT = void function(GLint, GLenum, GLsizei, const(void)*);
//alias glbfn_glImportSyncEXT = GLsync function(GLenum, GLintptr, GLbitfield);
alias glbfn_glFrameTerminatorGREMEDY = void function();
alias glbfn_glStringMarkerGREMEDY = void function(GLsizei, const(void)*);
alias glbfn_glImageTransformParameteriHP = void function(GLenum, GLenum, GLint);
alias glbfn_glImageTransformParameterfHP = void function(GLenum, GLenum, GLfloat);
alias glbfn_glImageTransformParameterivHP = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glImageTransformParameterfvHP = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetImageTransformParameterivHP = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetImageTransformParameterfvHP = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glMultiModeDrawArraysIBM = void function(const(GLenum)*, const(GLint)*, const(GLsizei)*, GLsizei, GLint);
alias glbfn_glMultiModeDrawElementsIBM = void function(const(GLenum)*, const(GLsizei)*, GLenum, const(void*)*, GLsizei, GLint);
alias glbfn_glFlushStaticDataIBM = void function(GLenum);
alias glbfn_glColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glSecondaryColorPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glEdgeFlagPointerListIBM = void function(GLint, const(GLboolean*)*, GLint);
alias glbfn_glFogCoordPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glIndexPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glNormalPointerListIBM = void function(GLenum, GLint, const(void*)*, GLint);
alias glbfn_glTexCoordPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glVertexPointerListIBM = void function(GLint, GLenum, GLint, const(void*)*, GLint);
alias glbfn_glBlendFuncSeparateINGR = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glApplyFramebufferAttachmentCMAAINTEL = void function();
alias glbfn_glSyncTextureINTEL = void function(GLuint);
alias glbfn_glUnmapTexture2DINTEL = void function(GLuint, GLint);
alias glbfn_glMapTexture2DINTEL = void* function(GLuint, GLint, GLbitfield, GLint*, GLenum*);
alias glbfn_glVertexPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glNormalPointervINTEL = void function(GLenum, const(void*)*);
alias glbfn_glColorPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glTexCoordPointervINTEL = void function(GLint, GLenum, const(void*)*);
alias glbfn_glBeginPerfQueryINTEL = void function(GLuint);
alias glbfn_glCreatePerfQueryINTEL = void function(GLuint, GLuint*);
alias glbfn_glDeletePerfQueryINTEL = void function(GLuint);
alias glbfn_glEndPerfQueryINTEL = void function(GLuint);
alias glbfn_glGetFirstPerfQueryIdINTEL = void function(GLuint*);
alias glbfn_glGetNextPerfQueryIdINTEL = void function(GLuint, GLuint*);
alias glbfn_glGetPerfCounterInfoINTEL = void function(GLuint, GLuint, GLuint, GLchar*, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*, GLuint64*);
alias glbfn_glGetPerfQueryDataINTEL = void function(GLuint, GLuint, GLsizei, GLvoid*, GLuint*);
alias glbfn_glGetPerfQueryIdByNameINTEL = void function(GLchar*, GLuint*);
alias glbfn_glGetPerfQueryInfoINTEL = void function(GLuint, GLuint, GLchar*, GLuint*, GLuint*, GLuint*, GLuint*);
alias glbfn_glBlendBarrierKHR = void function();
alias glbfn_glDebugMessageControlKHR = void function(GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
alias glbfn_glDebugMessageInsertKHR = void function(GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
//alias glbfn_glDebugMessageCallbackKHR = void function(GLDEBUGPROCKHR, const(void)*);
alias glbfn_glGetDebugMessageLogKHR = GLuint function(GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
alias glbfn_glPushDebugGroupKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glPopDebugGroupKHR = void function();
alias glbfn_glObjectLabelKHR = void function(GLenum, GLuint, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectLabelKHR = void function(GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
alias glbfn_glObjectPtrLabelKHR = void function(const(void)*, GLsizei, const(GLchar)*);
alias glbfn_glGetObjectPtrLabelKHR = void function(const(void)*, GLsizei, GLsizei*, GLchar*);
alias glbfn_glGetPointervKHR = void function(GLenum, void**);
alias glbfn_glGetGraphicsResetStatusKHR = GLenum function();
alias glbfn_glReadnPixelsKHR = void function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
alias glbfn_glGetnUniformfvKHR = void function(GLuint, GLint, GLsizei, GLfloat*);
alias glbfn_glGetnUniformivKHR = void function(GLuint, GLint, GLsizei, GLint*);
alias glbfn_glGetnUniformuivKHR = void function(GLuint, GLint, GLsizei, GLuint*);
alias glbfn_glResizeBuffersMESA = void function();
alias glbfn_glWindowPos2dMESA = void function(GLdouble, GLdouble);
alias glbfn_glWindowPos2dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos2fMESA = void function(GLfloat, GLfloat);
alias glbfn_glWindowPos2fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos2iMESA = void function(GLint, GLint);
alias glbfn_glWindowPos2ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos2sMESA = void function(GLshort, GLshort);
alias glbfn_glWindowPos2svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos3dMESA = void function(GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos3dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos3fMESA = void function(GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos3fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos3iMESA = void function(GLint, GLint, GLint);
alias glbfn_glWindowPos3ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos3sMESA = void function(GLshort, GLshort, GLshort);
alias glbfn_glWindowPos3svMESA = void function(const(GLshort)*);
alias glbfn_glWindowPos4dMESA = void function(GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glWindowPos4dvMESA = void function(const(GLdouble)*);
alias glbfn_glWindowPos4fMESA = void function(GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glWindowPos4fvMESA = void function(const(GLfloat)*);
alias glbfn_glWindowPos4iMESA = void function(GLint, GLint, GLint, GLint);
alias glbfn_glWindowPos4ivMESA = void function(const(GLint)*);
alias glbfn_glWindowPos4sMESA = void function(GLshort, GLshort, GLshort, GLshort);
alias glbfn_glWindowPos4svMESA = void function(const(GLshort)*);
alias glbfn_glBeginConditionalRenderNVX = void function(GLuint);
alias glbfn_glEndConditionalRenderNVX = void function();
alias glbfn_glMultiDrawArraysIndirectBindlessNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawArraysIndirectBindlessCountNV = void function(GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glMultiDrawElementsIndirectBindlessCountNV = void function(GLenum, GLenum, const(void)*, GLsizei, GLsizei, GLsizei, GLint);
alias glbfn_glGetTextureHandleNV = GLuint64 function(GLuint);
alias glbfn_glGetTextureSamplerHandleNV = GLuint64 function(GLuint, GLuint);
alias glbfn_glMakeTextureHandleResidentNV = void function(GLuint64);
alias glbfn_glMakeTextureHandleNonResidentNV = void function(GLuint64);
alias glbfn_glGetImageHandleNV = GLuint64 function(GLuint, GLint, GLboolean, GLint, GLenum);
alias glbfn_glMakeImageHandleResidentNV = void function(GLuint64, GLenum);
alias glbfn_glMakeImageHandleNonResidentNV = void function(GLuint64);
alias glbfn_glUniformHandleui64NV = void function(GLint, GLuint64);
alias glbfn_glUniformHandleui64vNV = void function(GLint, GLsizei, const(GLuint64)*);
alias glbfn_glProgramUniformHandleui64NV = void function(GLuint, GLint, GLuint64);
alias glbfn_glProgramUniformHandleui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64)*);
alias glbfn_glIsTextureHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glIsImageHandleResidentNV = GLboolean function(GLuint64);
alias glbfn_glBlendParameteriNV = void function(GLenum, GLint);
alias glbfn_glBlendBarrierNV = void function();
alias glbfn_glCreateStatesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteStatesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsStateNV = GLboolean function(GLuint);
alias glbfn_glStateCaptureNV = void function(GLuint, GLenum);
alias glbfn_glGetCommandHeaderNV = GLuint function(GLenum, GLuint);
alias glbfn_glGetStageIndexNV = GLushort function(GLenum);
alias glbfn_glDrawCommandsNV = void function(GLenum, GLuint, const(GLintptr)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsAddressNV = void function(GLenum, const(GLuint64)*, const(GLsizei)*, GLuint);
alias glbfn_glDrawCommandsStatesNV = void function(GLuint, const(GLintptr)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glDrawCommandsStatesAddressNV = void function(const(GLuint64)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCreateCommandListsNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteCommandListsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsCommandListNV = GLboolean function(GLuint);
alias glbfn_glListDrawCommandsStatesClientNV = void function(GLuint, GLuint, const(void*)*, const(GLsizei)*, const(GLuint)*, const(GLuint)*, GLuint);
alias glbfn_glCommandListSegmentsNV = void function(GLuint, GLuint);
alias glbfn_glCompileCommandListNV = void function(GLuint);
alias glbfn_glCallCommandListNV = void function(GLuint);
alias glbfn_glBeginConditionalRenderNV = void function(GLuint, GLenum);
alias glbfn_glEndConditionalRenderNV = void function();
alias glbfn_glSubpixelPrecisionBiasNV = void function(GLuint, GLuint);
alias glbfn_glConservativeRasterParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCopyImageSubDataNV = void function(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias glbfn_glDepthRangedNV = void function(GLdouble, GLdouble);
alias glbfn_glClearDepthdNV = void function(GLdouble);
alias glbfn_glDepthBoundsdNV = void function(GLdouble, GLdouble);
alias glbfn_glDrawTextureNV = void function(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const(void)*);
alias glbfn_glMapParameterivNV = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glMapParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetMapControlPointsNV = void function(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void*);
alias glbfn_glGetMapParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetMapParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetMapAttribParameterivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetMapAttribParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glEvalMapsNV = void function(GLenum, GLenum);
alias glbfn_glGetMultisamplefvNV = void function(GLenum, GLuint, GLfloat*);
alias glbfn_glSampleMaskIndexedNV = void function(GLuint, GLbitfield);
alias glbfn_glTexRenderbufferNV = void function(GLenum, GLuint);
alias glbfn_glDeleteFencesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenFencesNV = void function(GLsizei, GLuint*);
alias glbfn_glIsFenceNV = GLboolean function(GLuint);
alias glbfn_glTestFenceNV = GLboolean function(GLuint);
alias glbfn_glGetFenceivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glFinishFenceNV = void function(GLuint);
alias glbfn_glSetFenceNV = void function(GLuint, GLenum);
alias glbfn_glFragmentCoverageColorNV = void function(GLuint);
alias glbfn_glProgramNamedParameter4fNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramNamedParameter4fvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glProgramNamedParameter4dNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramNamedParameter4dvNV = void function(GLuint, GLsizei, const(GLubyte)*, const(GLdouble)*);
alias glbfn_glGetProgramNamedParameterfvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLfloat*);
alias glbfn_glGetProgramNamedParameterdvNV = void function(GLuint, GLsizei, const(GLubyte)*, GLdouble*);
alias glbfn_glCoverageModulationTableNV = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetCoverageModulationTableNV = void function(GLsizei, GLfloat*);
alias glbfn_glCoverageModulationNV = void function(GLenum);
alias glbfn_glRenderbufferStorageMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
alias glbfn_glProgramVertexLimitNV = void function(GLenum, GLint);
alias glbfn_glFramebufferTextureEXT = void function(GLenum, GLenum, GLuint, GLint);
alias glbfn_glFramebufferTextureFaceEXT = void function(GLenum, GLenum, GLuint, GLint, GLenum);
alias glbfn_glProgramLocalParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramLocalParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramLocalParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramLocalParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramLocalParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramLocalParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glProgramEnvParameterI4iNV = void function(GLenum, GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glProgramEnvParameterI4ivNV = void function(GLenum, GLuint, const(GLint)*);
alias glbfn_glProgramEnvParametersI4ivNV = void function(GLenum, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramEnvParameterI4uiNV = void function(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glProgramEnvParameterI4uivNV = void function(GLenum, GLuint, const(GLuint)*);
alias glbfn_glProgramEnvParametersI4uivNV = void function(GLenum, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramLocalParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramLocalParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glGetProgramEnvParameterIivNV = void function(GLenum, GLuint, GLint*);
alias glbfn_glGetProgramEnvParameterIuivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glProgramSubroutineParametersuivNV = void function(GLenum, GLsizei, const(GLuint)*);
alias glbfn_glGetProgramSubroutineParameteruivNV = void function(GLenum, GLuint, GLuint*);
alias glbfn_glVertex2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glVertex2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertex4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertex4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glNormal3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glNormal3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glColor4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glColor4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord1hNV = void function(GLhalfNV);
alias glbfn_glTexCoord1hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord2hNV = void function(GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord2hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glTexCoord4hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glTexCoord4hvNV = void function(const(GLhalfNV)*);
alias glbfn_glMultiTexCoord1hNV = void function(GLenum, GLhalfNV);
alias glbfn_glMultiTexCoord1hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord2hNV = void function(GLenum, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord2hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord3hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord3hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glMultiTexCoord4hNV = void function(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glMultiTexCoord4hvNV = void function(GLenum, const(GLhalfNV)*);
alias glbfn_glFogCoordhNV = void function(GLhalfNV);
alias glbfn_glFogCoordhvNV = void function(const(GLhalfNV)*);
alias glbfn_glSecondaryColor3hNV = void function(GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glSecondaryColor3hvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexWeighthNV = void function(GLhalfNV);
alias glbfn_glVertexWeighthvNV = void function(const(GLhalfNV)*);
alias glbfn_glVertexAttrib1hNV = void function(GLuint, GLhalfNV);
alias glbfn_glVertexAttrib1hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib2hNV = void function(GLuint, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib2hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib3hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib3hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttrib4hNV = void function(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
alias glbfn_glVertexAttrib4hvNV = void function(GLuint, const(GLhalfNV)*);
alias glbfn_glVertexAttribs1hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs2hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs3hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glVertexAttribs4hvNV = void function(GLuint, GLsizei, const(GLhalfNV)*);
alias glbfn_glGetInternalformatSampleivNV = void function(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint*);
alias glbfn_glGenOcclusionQueriesNV = void function(GLsizei, GLuint*);
alias glbfn_glDeleteOcclusionQueriesNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glIsOcclusionQueryNV = GLboolean function(GLuint);
alias glbfn_glBeginOcclusionQueryNV = void function(GLuint);
alias glbfn_glEndOcclusionQueryNV = void function();
alias glbfn_glGetOcclusionQueryivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetOcclusionQueryuivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glProgramBufferParametersfvNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glProgramBufferParametersIivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLint)*);
alias glbfn_glProgramBufferParametersIuivNV = void function(GLenum, GLuint, GLuint, GLsizei, const(GLuint)*);
alias glbfn_glGenPathsNV = GLuint function(GLsizei);
alias glbfn_glDeletePathsNV = void function(GLuint, GLsizei);
alias glbfn_glIsPathNV = GLboolean function(GLuint);
alias glbfn_glPathCommandsNV = void function(GLuint, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathCoordsNV = void function(GLuint, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCommandsNV = void function(GLuint, GLsizei, GLsizei, GLsizei, const(GLubyte)*, GLsizei, GLenum, const(void)*);
alias glbfn_glPathSubCoordsNV = void function(GLuint, GLsizei, GLsizei, GLenum, const(void)*);
alias glbfn_glPathStringNV = void function(GLuint, GLenum, GLsizei, const(void)*);
alias glbfn_glPathGlyphsNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLsizei, GLenum, const(void)*, GLenum, GLuint, GLfloat);
alias glbfn_glPathGlyphRangeNV = void function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
alias glbfn_glWeightPathsNV = void function(GLuint, GLsizei, const(GLuint)*, const(GLfloat)*);
alias glbfn_glCopyPathNV = void function(GLuint, GLuint);
alias glbfn_glInterpolatePathsNV = void function(GLuint, GLuint, GLuint, GLfloat);
alias glbfn_glTransformPathNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterivNV = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPathParameteriNV = void function(GLuint, GLenum, GLint);
alias glbfn_glPathParameterfvNV = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathParameterfNV = void function(GLuint, GLenum, GLfloat);
alias glbfn_glPathDashArrayNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glPathStencilFuncNV = void function(GLenum, GLint, GLuint);
alias glbfn_glPathStencilDepthOffsetNV = void function(GLfloat, GLfloat);
alias glbfn_glStencilFillPathNV = void function(GLuint, GLenum, GLuint);
alias glbfn_glStencilStrokePathNV = void function(GLuint, GLint, GLuint);
alias glbfn_glStencilFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glStencilStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glPathCoverDepthFuncNV = void function(GLenum);
alias glbfn_glCoverFillPathNV = void function(GLuint, GLenum);
alias glbfn_glCoverStrokePathNV = void function(GLuint, GLenum);
alias glbfn_glCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetPathParameterivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetPathParameterfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetPathCommandsNV = void function(GLuint, GLubyte*);
alias glbfn_glGetPathCoordsNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathDashArrayNV = void function(GLuint, GLfloat*);
alias glbfn_glGetPathMetricsNV = void function(GLbitfield, GLsizei, GLenum, const(void)*, GLuint, GLsizei, GLfloat*);
alias glbfn_glGetPathMetricRangeNV = void function(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat*);
alias glbfn_glGetPathSpacingNV = void function(GLenum, GLsizei, GLenum, const(void)*, GLuint, GLfloat, GLfloat, GLenum, GLfloat*);
alias glbfn_glIsPointInFillPathNV = GLboolean function(GLuint, GLuint, GLfloat, GLfloat);
alias glbfn_glIsPointInStrokePathNV = GLboolean function(GLuint, GLfloat, GLfloat);
alias glbfn_glGetPathLengthNV = GLfloat function(GLuint, GLsizei, GLsizei);
alias glbfn_glPointAlongPathNV = GLboolean function(GLuint, GLsizei, GLsizei, GLfloat, GLfloat*, GLfloat*, GLfloat*, GLfloat*);
alias glbfn_glMatrixLoad3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoad3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixLoadTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x2fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMult3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glMatrixMultTranspose3x3fNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverFillPathNV = void function(GLuint, GLenum, GLuint, GLenum);
alias glbfn_glStencilThenCoverStrokePathNV = void function(GLuint, GLint, GLuint, GLenum);
alias glbfn_glStencilThenCoverFillPathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLenum, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glStencilThenCoverStrokePathInstancedNV = void function(GLsizei, GLenum, const(void)*, GLuint, GLint, GLuint, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathGlyphIndexRangeNV = GLenum function(GLenum, const(void)*, GLbitfield, GLuint, GLfloat, GLuint*);
alias glbfn_glPathGlyphIndexArrayNV = GLenum function(GLuint, GLenum, const(void)*, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glPathMemoryGlyphIndexArrayNV = GLenum function(GLuint, GLenum, GLsizeiptr, const(void)*, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
alias glbfn_glProgramPathFragmentInputGenNV = void function(GLuint, GLint, GLenum, GLint, const(GLfloat)*);
alias glbfn_glGetProgramResourcefvNV = void function(GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLfloat*);
alias glbfn_glPathColorGenNV = void function(GLenum, GLenum, GLenum, const(GLfloat)*);
alias glbfn_glPathTexGenNV = void function(GLenum, GLenum, GLint, const(GLfloat)*);
alias glbfn_glPathFogGenNV = void function(GLenum);
alias glbfn_glGetPathColorGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathColorGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetPathTexGenivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetPathTexGenfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glPixelDataRangeNV = void function(GLenum, GLsizei, const(void)*);
alias glbfn_glFlushPixelDataRangeNV = void function(GLenum);
alias glbfn_glPointParameteriNV = void function(GLenum, GLint);
alias glbfn_glPointParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glPresentFrameKeyedNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
alias glbfn_glPresentFrameDualFillNV = void function(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
alias glbfn_glGetVideoivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideouivNV = void function(GLuint, GLenum, GLuint*);
alias glbfn_glGetVideoi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVideoui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glPrimitiveRestartNV = void function();
alias glbfn_glPrimitiveRestartIndexNV = void function(GLuint);
alias glbfn_glCombinerParameterfvNV = void function(GLenum, const(GLfloat)*);
alias glbfn_glCombinerParameterfNV = void function(GLenum, GLfloat);
alias glbfn_glCombinerParameterivNV = void function(GLenum, const(GLint)*);
alias glbfn_glCombinerParameteriNV = void function(GLenum, GLint);
alias glbfn_glCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
alias glbfn_glCombinerOutputNV = void function(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
alias glbfn_glFinalCombinerInputNV = void function(GLenum, GLenum, GLenum, GLenum);
alias glbfn_glGetCombinerInputParameterfvNV = void function(GLenum, GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerInputParameterivNV = void function(GLenum, GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetCombinerOutputParameterfvNV = void function(GLenum, GLenum, GLenum, GLfloat*);
alias glbfn_glGetCombinerOutputParameterivNV = void function(GLenum, GLenum, GLenum, GLint*);
alias glbfn_glGetFinalCombinerInputParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFinalCombinerInputParameterivNV = void function(GLenum, GLenum, GLint*);
alias glbfn_glCombinerStageParameterfvNV = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glGetCombinerStageParameterfvNV = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glFramebufferSampleLocationsfvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glNamedFramebufferSampleLocationsfvNV = void function(GLuint, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glResolveDepthValuesNV = void function();
alias glbfn_glMakeBufferResidentNV = void function(GLenum, GLenum);
alias glbfn_glMakeBufferNonResidentNV = void function(GLenum);
alias glbfn_glIsBufferResidentNV = GLboolean function(GLenum);
alias glbfn_glMakeNamedBufferResidentNV = void function(GLuint, GLenum);
alias glbfn_glMakeNamedBufferNonResidentNV = void function(GLuint);
alias glbfn_glIsNamedBufferResidentNV = GLboolean function(GLuint);
alias glbfn_glGetBufferParameterui64vNV = void function(GLenum, GLenum, GLuint64EXT*);
alias glbfn_glGetNamedBufferParameterui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glGetIntegerui64vNV = void function(GLenum, GLuint64EXT*);
alias glbfn_glUniformui64NV = void function(GLint, GLuint64EXT);
alias glbfn_glUniformui64vNV = void function(GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glProgramUniformui64NV = void function(GLuint, GLint, GLuint64EXT);
alias glbfn_glProgramUniformui64vNV = void function(GLuint, GLint, GLsizei, const(GLuint64EXT)*);
alias glbfn_glTextureBarrierNV = void function();
alias glbfn_glTexImage2DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTexImage3DMultisampleCoverageNV = void function(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleNV = void function(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage2DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
alias glbfn_glTextureImage3DMultisampleCoverageNV = void function(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
alias glbfn_glBeginTransformFeedbackNV = void function(GLenum);
alias glbfn_glEndTransformFeedbackNV = void function();
alias glbfn_glTransformFeedbackAttribsNV = void function(GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindBufferRangeNV = void function(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
alias glbfn_glBindBufferOffsetNV = void function(GLenum, GLuint, GLuint, GLintptr);
alias glbfn_glBindBufferBaseNV = void function(GLenum, GLuint, GLuint);
alias glbfn_glTransformFeedbackVaryingsNV = void function(GLuint, GLsizei, const(GLint)*, GLenum);
alias glbfn_glActiveVaryingNV = void function(GLuint, const(GLchar)*);
alias glbfn_glGetVaryingLocationNV = GLint function(GLuint, const(GLchar)*);
alias glbfn_glGetActiveVaryingNV = void function(GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*);
alias glbfn_glGetTransformFeedbackVaryingNV = void function(GLuint, GLuint, GLint*);
alias glbfn_glTransformFeedbackStreamAttribsNV = void function(GLsizei, const(GLint)*, GLsizei, const(GLint)*, GLenum);
alias glbfn_glBindTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glDeleteTransformFeedbacksNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glGenTransformFeedbacksNV = void function(GLsizei, GLuint*);
alias glbfn_glIsTransformFeedbackNV = GLboolean function(GLuint);
alias glbfn_glPauseTransformFeedbackNV = void function();
alias glbfn_glResumeTransformFeedbackNV = void function();
alias glbfn_glDrawTransformFeedbackNV = void function(GLenum, GLuint);
alias glbfn_glVDPAUInitNV = void function(const(void)*, const(void)*);
alias glbfn_glVDPAUFiniNV = void function();
alias glbfn_glVDPAURegisterVideoSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAURegisterOutputSurfaceNV = GLvdpauSurfaceNV function(const(void)*, GLenum, GLsizei, const(GLuint)*);
alias glbfn_glVDPAUIsSurfaceNV = GLboolean function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUUnregisterSurfaceNV = void function(GLvdpauSurfaceNV);
alias glbfn_glVDPAUGetSurfaceivNV = void function(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei*, GLint*);
alias glbfn_glVDPAUSurfaceAccessNV = void function(GLvdpauSurfaceNV, GLenum);
alias glbfn_glVDPAUMapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glVDPAUUnmapSurfacesNV = void function(GLsizei, const(GLvdpauSurfaceNV)*);
alias glbfn_glFlushVertexArrayRangeNV = void function();
alias glbfn_glVertexArrayRangeNV = void function(GLsizei, const(void)*);
alias glbfn_glVertexAttribL1i64NV = void function(GLuint, GLint64EXT);
alias glbfn_glVertexAttribL2i64NV = void function(GLuint, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL3i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL4i64NV = void function(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
alias glbfn_glVertexAttribL1i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL2i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL3i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL4i64vNV = void function(GLuint, const(GLint64EXT)*);
alias glbfn_glVertexAttribL1ui64NV = void function(GLuint, GLuint64EXT);
alias glbfn_glVertexAttribL2ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL3ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL4ui64NV = void function(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
alias glbfn_glVertexAttribL1ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL2ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL3ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glVertexAttribL4ui64vNV = void function(GLuint, const(GLuint64EXT)*);
alias glbfn_glGetVertexAttribLi64vNV = void function(GLuint, GLenum, GLint64EXT*);
alias glbfn_glGetVertexAttribLui64vNV = void function(GLuint, GLenum, GLuint64EXT*);
alias glbfn_glVertexAttribLFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glBufferAddressRangeNV = void function(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
alias glbfn_glVertexFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glNormalFormatNV = void function(GLenum, GLsizei);
alias glbfn_glColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glIndexFormatNV = void function(GLenum, GLsizei);
alias glbfn_glTexCoordFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glEdgeFlagFormatNV = void function(GLsizei);
alias glbfn_glSecondaryColorFormatNV = void function(GLint, GLenum, GLsizei);
alias glbfn_glFogCoordFormatNV = void function(GLenum, GLsizei);
alias glbfn_glVertexAttribFormatNV = void function(GLuint, GLint, GLenum, GLboolean, GLsizei);
alias glbfn_glVertexAttribIFormatNV = void function(GLuint, GLint, GLenum, GLsizei);
alias glbfn_glGetIntegerui64i_vNV = void function(GLenum, GLuint, GLuint64EXT*);
alias glbfn_glAreProgramsResidentNV = GLboolean function(GLsizei, const(GLuint)*, GLboolean*);
alias glbfn_glBindProgramNV = void function(GLenum, GLuint);
alias glbfn_glDeleteProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glExecuteProgramNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glGenProgramsNV = void function(GLsizei, GLuint*);
alias glbfn_glGetProgramParameterdvNV = void function(GLenum, GLuint, GLenum, GLdouble*);
alias glbfn_glGetProgramParameterfvNV = void function(GLenum, GLuint, GLenum, GLfloat*);
alias glbfn_glGetProgramivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetProgramStringNV = void function(GLuint, GLenum, GLubyte*);
alias glbfn_glGetTrackMatrixivNV = void function(GLenum, GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribdvNV = void function(GLuint, GLenum, GLdouble*);
alias glbfn_glGetVertexAttribfvNV = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetVertexAttribivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribPointervNV = void function(GLuint, GLenum, void**);
alias glbfn_glIsProgramNV = GLboolean function(GLuint);
alias glbfn_glLoadProgramNV = void function(GLenum, GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glProgramParameter4dNV = void function(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glProgramParameter4dvNV = void function(GLenum, GLuint, const(GLdouble)*);
alias glbfn_glProgramParameter4fNV = void function(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glProgramParameter4fvNV = void function(GLenum, GLuint, const(GLfloat)*);
alias glbfn_glProgramParameters4dvNV = void function(GLenum, GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glProgramParameters4fvNV = void function(GLenum, GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glRequestResidentProgramsNV = void function(GLsizei, const(GLuint)*);
alias glbfn_glTrackMatrixNV = void function(GLenum, GLuint, GLenum, GLenum);
alias glbfn_glVertexAttribPointerNV = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glVertexAttrib1dNV = void function(GLuint, GLdouble);
alias glbfn_glVertexAttrib1dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib1fNV = void function(GLuint, GLfloat);
alias glbfn_glVertexAttrib1fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib1sNV = void function(GLuint, GLshort);
alias glbfn_glVertexAttrib1svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib2dNV = void function(GLuint, GLdouble, GLdouble);
alias glbfn_glVertexAttrib2dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib2fNV = void function(GLuint, GLfloat, GLfloat);
alias glbfn_glVertexAttrib2fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib2sNV = void function(GLuint, GLshort, GLshort);
alias glbfn_glVertexAttrib2svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib3dNV = void function(GLuint, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib3dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib3fNV = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib3fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib3sNV = void function(GLuint, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib3svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4dNV = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
alias glbfn_glVertexAttrib4dvNV = void function(GLuint, const(GLdouble)*);
alias glbfn_glVertexAttrib4fNV = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glVertexAttrib4fvNV = void function(GLuint, const(GLfloat)*);
alias glbfn_glVertexAttrib4sNV = void function(GLuint, GLshort, GLshort, GLshort, GLshort);
alias glbfn_glVertexAttrib4svNV = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttrib4ubNV = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
alias glbfn_glVertexAttrib4ubvNV = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribs1dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs1fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs1svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs2dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs2fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs2svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs3dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs3fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs3svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4dvNV = void function(GLuint, GLsizei, const(GLdouble)*);
alias glbfn_glVertexAttribs4fvNV = void function(GLuint, GLsizei, const(GLfloat)*);
alias glbfn_glVertexAttribs4svNV = void function(GLuint, GLsizei, const(GLshort)*);
alias glbfn_glVertexAttribs4ubvNV = void function(GLuint, GLsizei, const(GLubyte)*);
alias glbfn_glVertexAttribI1iEXT = void function(GLuint, GLint);
alias glbfn_glVertexAttribI2iEXT = void function(GLuint, GLint, GLint);
alias glbfn_glVertexAttribI3iEXT = void function(GLuint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI4iEXT = void function(GLuint, GLint, GLint, GLint, GLint);
alias glbfn_glVertexAttribI1uiEXT = void function(GLuint, GLuint);
alias glbfn_glVertexAttribI2uiEXT = void function(GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI3uiEXT = void function(GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI4uiEXT = void function(GLuint, GLuint, GLuint, GLuint, GLuint);
alias glbfn_glVertexAttribI1ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI2ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI3ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI4ivEXT = void function(GLuint, const(GLint)*);
alias glbfn_glVertexAttribI1uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI2uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI3uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4uivEXT = void function(GLuint, const(GLuint)*);
alias glbfn_glVertexAttribI4bvEXT = void function(GLuint, const(GLbyte)*);
alias glbfn_glVertexAttribI4svEXT = void function(GLuint, const(GLshort)*);
alias glbfn_glVertexAttribI4ubvEXT = void function(GLuint, const(GLubyte)*);
alias glbfn_glVertexAttribI4usvEXT = void function(GLuint, const(GLushort)*);
alias glbfn_glVertexAttribIPointerEXT = void function(GLuint, GLint, GLenum, GLsizei, const(void)*);
alias glbfn_glGetVertexAttribIivEXT = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVertexAttribIuivEXT = void function(GLuint, GLenum, GLuint*);
alias glbfn_glBeginVideoCaptureNV = void function(GLuint);
alias glbfn_glBindVideoCaptureStreamBufferNV = void function(GLuint, GLuint, GLenum, GLintptrARB);
alias glbfn_glBindVideoCaptureStreamTextureNV = void function(GLuint, GLuint, GLenum, GLenum, GLuint);
alias glbfn_glEndVideoCaptureNV = void function(GLuint);
alias glbfn_glGetVideoCaptureivNV = void function(GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamivNV = void function(GLuint, GLuint, GLenum, GLint*);
alias glbfn_glGetVideoCaptureStreamfvNV = void function(GLuint, GLuint, GLenum, GLfloat*);
alias glbfn_glGetVideoCaptureStreamdvNV = void function(GLuint, GLuint, GLenum, GLdouble*);
alias glbfn_glVideoCaptureNV = GLenum function(GLuint, GLuint*, GLuint64EXT*);
alias glbfn_glVideoCaptureStreamParameterivNV = void function(GLuint, GLuint, GLenum, const(GLint)*);
alias glbfn_glVideoCaptureStreamParameterfvNV = void function(GLuint, GLuint, GLenum, const(GLfloat)*);
alias glbfn_glVideoCaptureStreamParameterdvNV = void function(GLuint, GLuint, GLenum, const(GLdouble)*);
alias glbfn_glMultiTexCoord1bOES = void function(GLenum, GLbyte);
alias glbfn_glMultiTexCoord1bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord2bOES = void function(GLenum, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord2bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord3bOES = void function(GLenum, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord3bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glMultiTexCoord4bOES = void function(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glMultiTexCoord4bvOES = void function(GLenum, const(GLbyte)*);
alias glbfn_glTexCoord1bOES = void function(GLbyte);
alias glbfn_glTexCoord1bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord2bOES = void function(GLbyte, GLbyte);
alias glbfn_glTexCoord2bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord3bvOES = void function(const(GLbyte)*);
alias glbfn_glTexCoord4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glTexCoord4bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex2bOES = void function(GLbyte, GLbyte);
alias glbfn_glVertex2bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex3bOES = void function(GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex3bvOES = void function(const(GLbyte)*);
alias glbfn_glVertex4bOES = void function(GLbyte, GLbyte, GLbyte, GLbyte);
alias glbfn_glVertex4bvOES = void function(const(GLbyte)*);
alias glbfn_glAlphaFuncxOES = void function(GLenum, GLfixed);
alias glbfn_glClearColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearDepthxOES = void function(GLfixed);
alias glbfn_glClipPlanexOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glColor4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glDepthRangexOES = void function(GLfixed, GLfixed);
alias glbfn_glFogxOES = void function(GLenum, GLfixed);
alias glbfn_glFogxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glFrustumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glGetClipPlanexOES = void function(GLenum, GLfixed*);
alias glbfn_glGetFixedvOES = void function(GLenum, GLfixed*);
alias glbfn_glGetTexEnvxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glLightModelxOES = void function(GLenum, GLfixed);
alias glbfn_glLightModelxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glLightxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glLightxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glLineWidthxOES = void function(GLfixed);
alias glbfn_glLoadMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glMaterialxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glMultMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord4xOES = void function(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glNormal3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glOrthoxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glPointParameterxvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glPointSizexOES = void function(GLfixed);
alias glbfn_glPolygonOffsetxOES = void function(GLfixed, GLfixed);
alias glbfn_glRotatexOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glScalexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexEnvxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexEnvxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTexParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glTranslatexOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glGetLightxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glPointParameterxOES = void function(GLenum, GLfixed);
alias glbfn_glSampleCoveragexOES = void function(GLclampx, GLboolean);
alias glbfn_glAccumxOES = void function(GLenum, GLfixed);
alias glbfn_glBitmapxOES = void function(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const(GLubyte)*);
alias glbfn_glBlendColorxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glClearAccumxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glColor3xvOES = void function(const(GLfixed)*);
alias glbfn_glColor4xvOES = void function(const(GLfixed)*);
alias glbfn_glConvolutionParameterxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glConvolutionParameterxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glEvalCoord1xOES = void function(GLfixed);
alias glbfn_glEvalCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glEvalCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glEvalCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glFeedbackBufferxOES = void function(GLsizei, GLenum, const(GLfixed)*);
alias glbfn_glGetConvolutionParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetHistogramParameterxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetLightxOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMapxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetMaterialxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glGetPixelMapxv = void function(GLenum, GLint, GLfixed*);
alias glbfn_glGetTexGenxvOES = void function(GLenum, GLenum, GLfixed*);
alias glbfn_glGetTexLevelParameterxvOES = void function(GLenum, GLint, GLenum, GLfixed*);
alias glbfn_glIndexxOES = void function(GLfixed);
alias glbfn_glIndexxvOES = void function(const(GLfixed)*);
alias glbfn_glLoadTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMap1xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMap2xOES = void function(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
alias glbfn_glMapGrid1xOES = void function(GLint, GLfixed, GLfixed);
alias glbfn_glMapGrid2xOES = void function(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultTransposeMatrixxOES = void function(const(GLfixed)*);
alias glbfn_glMultiTexCoord1xOES = void function(GLenum, GLfixed);
alias glbfn_glMultiTexCoord1xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord2xOES = void function(GLenum, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord2xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord3xOES = void function(GLenum, GLfixed, GLfixed, GLfixed);
alias glbfn_glMultiTexCoord3xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glMultiTexCoord4xvOES = void function(GLenum, const(GLfixed)*);
alias glbfn_glNormal3xvOES = void function(const(GLfixed)*);
alias glbfn_glPassThroughxOES = void function(GLfixed);
alias glbfn_glPixelMapx = void function(GLenum, GLint, const(GLfixed)*);
alias glbfn_glPixelStorex = void function(GLenum, GLfixed);
alias glbfn_glPixelTransferxOES = void function(GLenum, GLfixed);
alias glbfn_glPixelZoomxOES = void function(GLfixed, GLfixed);
alias glbfn_glPrioritizeTexturesxOES = void function(GLsizei, const(GLuint)*, const(GLfixed)*);
alias glbfn_glRasterPos2xOES = void function(GLfixed, GLfixed);
alias glbfn_glRasterPos2xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos3xvOES = void function(const(GLfixed)*);
alias glbfn_glRasterPos4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRasterPos4xvOES = void function(const(GLfixed)*);
alias glbfn_glRectxOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glRectxvOES = void function(const(GLfixed)*, const(GLfixed)*);
alias glbfn_glTexCoord1xOES = void function(GLfixed);
alias glbfn_glTexCoord1xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord2xOES = void function(GLfixed, GLfixed);
alias glbfn_glTexCoord2xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord3xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord3xvOES = void function(const(GLfixed)*);
alias glbfn_glTexCoord4xOES = void function(GLfixed, GLfixed, GLfixed, GLfixed);
alias glbfn_glTexCoord4xvOES = void function(const(GLfixed)*);
alias glbfn_glTexGenxOES = void function(GLenum, GLenum, GLfixed);
alias glbfn_glTexGenxvOES = void function(GLenum, GLenum, const(GLfixed)*);
alias glbfn_glVertex2xOES = void function(GLfixed);
alias glbfn_glVertex2xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex3xOES = void function(GLfixed, GLfixed);
alias glbfn_glVertex3xvOES = void function(const(GLfixed)*);
alias glbfn_glVertex4xOES = void function(GLfixed, GLfixed, GLfixed);
alias glbfn_glVertex4xvOES = void function(const(GLfixed)*);
alias glbfn_glQueryMatrixxOES = GLbitfield function(GLfixed*, GLint*);
alias glbfn_glClearDepthfOES = void function(GLclampf);
alias glbfn_glClipPlanefOES = void function(GLenum, const(GLfloat)*);
alias glbfn_glDepthRangefOES = void function(GLclampf, GLclampf);
alias glbfn_glFrustumfOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glGetClipPlanefOES = void function(GLenum, GLfloat*);
alias glbfn_glOrthofOES = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glFramebufferTextureMultiviewOVR = void function(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
alias glbfn_glHintPGI = void function(GLenum, GLint);
alias glbfn_glDetailTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetDetailTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glFogFuncSGIS = void function(GLsizei, const(GLfloat)*);
alias glbfn_glGetFogFuncSGIS = void function(GLfloat*);
alias glbfn_glSampleMaskSGIS = void function(GLclampf, GLboolean);
alias glbfn_glSamplePatternSGIS = void function(GLenum);
alias glbfn_glPixelTexGenParameteriSGIS = void function(GLenum, GLint);
alias glbfn_glPixelTexGenParameterivSGIS = void function(GLenum, const(GLint)*);
alias glbfn_glPixelTexGenParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPixelTexGenParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glGetPixelTexGenParameterivSGIS = void function(GLenum, GLint*);
alias glbfn_glGetPixelTexGenParameterfvSGIS = void function(GLenum, GLfloat*);
alias glbfn_glPointParameterfSGIS = void function(GLenum, GLfloat);
alias glbfn_glPointParameterfvSGIS = void function(GLenum, const(GLfloat)*);
alias glbfn_glSharpenTexFuncSGIS = void function(GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glGetSharpenTexFuncSGIS = void function(GLenum, GLfloat*);
alias glbfn_glTexImage4DSGIS = void function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const(void)*);
alias glbfn_glTexSubImage4DSGIS = void function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glTextureColorMaskSGIS = void function(GLboolean, GLboolean, GLboolean, GLboolean);
alias glbfn_glGetTexFilterFuncSGIS = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glTexFilterFuncSGIS = void function(GLenum, GLenum, GLsizei, const(GLfloat)*);
alias glbfn_glAsyncMarkerSGIX = void function(GLuint);
alias glbfn_glFinishAsyncSGIX = GLint function(GLuint*);
alias glbfn_glPollAsyncSGIX = GLint function(GLuint*);
alias glbfn_glGenAsyncMarkersSGIX = GLuint function(GLsizei);
alias glbfn_glDeleteAsyncMarkersSGIX = void function(GLuint, GLsizei);
alias glbfn_glIsAsyncMarkerSGIX = GLboolean function(GLuint);
alias glbfn_glFlushRasterSGIX = void function();
alias glbfn_glFragmentColorMaterialSGIX = void function(GLenum, GLenum);
alias glbfn_glFragmentLightfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentLightfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentLightivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glFragmentLightModelfSGIX = void function(GLenum, GLfloat);
alias glbfn_glFragmentLightModelfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glFragmentLightModeliSGIX = void function(GLenum, GLint);
alias glbfn_glFragmentLightModelivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glFragmentMaterialfSGIX = void function(GLenum, GLenum, GLfloat);
alias glbfn_glFragmentMaterialfvSGIX = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glFragmentMaterialiSGIX = void function(GLenum, GLenum, GLint);
alias glbfn_glFragmentMaterialivSGIX = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glGetFragmentLightfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentLightivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glGetFragmentMaterialfvSGIX = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetFragmentMaterialivSGIX = void function(GLenum, GLenum, GLint*);
alias glbfn_glLightEnviSGIX = void function(GLenum, GLint);
alias glbfn_glFrameZoomSGIX = void function(GLint);
alias glbfn_glIglooInterfaceSGIX = void function(GLenum, const(void)*);
alias glbfn_glGetInstrumentsSGIX = GLint function();
alias glbfn_glInstrumentsBufferSGIX = void function(GLsizei, GLint*);
alias glbfn_glPollInstrumentsSGIX = GLint function(GLint*);
alias glbfn_glReadInstrumentsSGIX = void function(GLint);
alias glbfn_glStartInstrumentsSGIX = void function();
alias glbfn_glStopInstrumentsSGIX = void function(GLint);
alias glbfn_glGetListParameterfvSGIX = void function(GLuint, GLenum, GLfloat*);
alias glbfn_glGetListParameterivSGIX = void function(GLuint, GLenum, GLint*);
alias glbfn_glListParameterfSGIX = void function(GLuint, GLenum, GLfloat);
alias glbfn_glListParameterfvSGIX = void function(GLuint, GLenum, const(GLfloat)*);
alias glbfn_glListParameteriSGIX = void function(GLuint, GLenum, GLint);
alias glbfn_glListParameterivSGIX = void function(GLuint, GLenum, const(GLint)*);
alias glbfn_glPixelTexGenSGIX = void function(GLenum);
alias glbfn_glDeformationMap3dSGIX = void function(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const(GLdouble)*);
alias glbfn_glDeformationMap3fSGIX = void function(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const(GLfloat)*);
alias glbfn_glDeformSGIX = void function(GLbitfield);
alias glbfn_glLoadIdentityDeformationMapSGIX = void function(GLbitfield);
alias glbfn_glReferencePlaneSGIX = void function(const(GLdouble)*);
alias glbfn_glSpriteParameterfSGIX = void function(GLenum, GLfloat);
alias glbfn_glSpriteParameterfvSGIX = void function(GLenum, const(GLfloat)*);
alias glbfn_glSpriteParameteriSGIX = void function(GLenum, GLint);
alias glbfn_glSpriteParameterivSGIX = void function(GLenum, const(GLint)*);
alias glbfn_glTagSampleBufferSGIX = void function();
alias glbfn_glColorTableSGI = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
alias glbfn_glColorTableParameterfvSGI = void function(GLenum, GLenum, const(GLfloat)*);
alias glbfn_glColorTableParameterivSGI = void function(GLenum, GLenum, const(GLint)*);
alias glbfn_glCopyColorTableSGI = void function(GLenum, GLenum, GLint, GLint, GLsizei);
alias glbfn_glGetColorTableSGI = void function(GLenum, GLenum, GLenum, void*);
alias glbfn_glGetColorTableParameterfvSGI = void function(GLenum, GLenum, GLfloat*);
alias glbfn_glGetColorTableParameterivSGI = void function(GLenum, GLenum, GLint*);
alias glbfn_glFinishTextureSUNX = void function();
alias glbfn_glGlobalAlphaFactorbSUN = void function(GLbyte);
alias glbfn_glGlobalAlphaFactorsSUN = void function(GLshort);
alias glbfn_glGlobalAlphaFactoriSUN = void function(GLint);
alias glbfn_glGlobalAlphaFactorfSUN = void function(GLfloat);
alias glbfn_glGlobalAlphaFactordSUN = void function(GLdouble);
alias glbfn_glGlobalAlphaFactorubSUN = void function(GLubyte);
alias glbfn_glGlobalAlphaFactorusSUN = void function(GLushort);
alias glbfn_glGlobalAlphaFactoruiSUN = void function(GLuint);
alias glbfn_glDrawMeshArraysSUN = void function(GLenum, GLint, GLsizei, GLsizei);
alias glbfn_glReplacementCodeuiSUN = void function(GLuint);
alias glbfn_glReplacementCodeusSUN = void function(GLushort);
alias glbfn_glReplacementCodeubSUN = void function(GLubyte);
alias glbfn_glReplacementCodeuivSUN = void function(const(GLuint)*);
alias glbfn_glReplacementCodeusvSUN = void function(const(GLushort)*);
alias glbfn_glReplacementCodeubvSUN = void function(const(GLubyte)*);
alias glbfn_glReplacementCodePointerSUN = void function(GLenum, GLsizei, const(void*)*);
alias glbfn_glColor4ubVertex2fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex2fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor4ubVertex3fSUN = void function(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4ubVertex3fvSUN = void function(const(GLubyte)*, const(GLfloat)*);
alias glbfn_glColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4ubVertex3fSUN = void function(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4ubVertex3fvSUN = void function(const(GLfloat)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fSUN = void function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glTexCoord4fColor4fNormal3fVertex4fvSUN = void function(const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4ubVertex3fSUN = void function(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4ubVertex3fvSUN = void function(const(GLuint)*, const(GLubyte)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
alias glbfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = void function(const(GLuint)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*, const(GLfloat)*);
}


// ////////////////////////////////////////////////////////////////////////// //
mixin(/*glbindCreateInternalVars*/ () {
  alias glID(T...) = T[0];
  char[] resbuf = new char[](1024*1024+1025*512);
  int respos = 0;
  void put (const(char)[] s...) {
    assert(resbuf.length-respos >= s.length);
    resbuf[respos..respos+s.length] = s[];
    respos += cast(int)s.length;
  }
  void putuint (uint n) {
    if (n > 99) assert(0, "oops");
    put(cast(char)('0'+(n/10)%10));
    put(cast(char)('0'+n%10));
  }
  put("extern(System) nothrow @nogc:\n\n");
  foreach (string name; __traits(allMembers, mixin(__MODULE__))) {
    pragma(msg, name);
    static if (name.length > 6 && name[0..6] == "glbfn_") {
      /*
      __gshared glbfn_glCullFace glCullFace = function void (uint a0) nothrow @nogc {
        glbfn_glCullFace_loader(a0,);
      };
      private auto glbfn_glCullFace_loader (uint a0) nothrow @nogc {
        glCullFace = cast(glbfn_glCullFace)glbindGetProcAddress(`glCullFace`);
        if (glCullFace is null) assert(0, `OpenGL function 'glCullFace' not found!`);
        glCullFace(a0,);
      }
      */

      //alias Pars = Parameters!(mixin(name));
      //alias RT = ReturnType!(mixin(name));

      static if (is(glID!(__traits(getMember, mixin(__MODULE__), name)) FP : FP*) && is(FP == function)) {
        static if (is(FP RT == return)) {
          alias RetType = RT;
          static if (is(FP P == function)) {
            alias Pars = P;
          } else {
            static assert(0, "wtf2?!");
          }
        } else {
          static assert(0, "wtf0?!");
        }
      } else {
        static assert(0, "wtf1?!");
      }

      put("__gshared ");
      put(name);
      put(" ");
      put(name[6..$]);
      put(" = function ");
      put(RT.stringof);
      put(" (");
      // params
      foreach (immutable idx, immutable ptype; Pars) {
        if (idx != 0) put(",");
        put(ptype.stringof);
        put(" a");
        putuint(cast(uint)idx);
      }
      put(") {\n"); //nothrow @nogc {\n");
      // build loader call
      put("  ");
      static if (!is(RT == void)) put("return ");
      put(name);
      put("_loader(");
      foreach (immutable idx, immutable ptype; Pars) {
        put("a");
        putuint(idx);
        put(",");
      }
      put(");\n};\n");
      // build loader
      put("private ");
      put(RT.stringof);
      put(" ");
      put(name);
      put("_loader (");
      // params
      foreach (immutable idx, immutable ptype; Pars) {
        if (idx != 0) put(",");
        put(ptype.stringof);
        put(" a");
        putuint(cast(uint)idx);
      }
      put(") {\n"); //nothrow @nogc {\n");
      put("  ");
      put(name[6..$]);
      put(" = cast(");
      put(name);
      put(")glbindGetProcAddress(`");
      put(name[6..$]);
      put("`);\n");
      put("  if (");
      put(name[6..$]);
      put(" is null) assert(0, `OpenGL function '");
      put(name[6..$]);
      put("' not found!`);\n");
      //put("  version(glbind_debug) { import core.stdc.stdio; fprintf(stderr, \"GLBIND: '"); put(name[6..$]); put("'\\n\"); }\n");
      put("  ");
      static if (!is(RT == void)) put("return ");
      put(name[6..$]);
      put("(");
      // call
      foreach (immutable idx, immutable ptype; Pars) {
        put("a");
        putuint(idx);
        put(",");
      }
      put(");\n");
      put("};\n");
    }
  }
  return cast(string)resbuf[0..respos];
}());

//mixin(glbindCreateInternalVars());
/*
pragma(msg, glbindCreateInternalVars());
extern(C) nothrow @nogc { mixin(glbindCreateInternalVars()); }
pragma(msg, glbindCreateInternalVars());
*/


//pragma(msg, "done...");
