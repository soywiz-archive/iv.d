/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
module iv.freetype is aliced;
pragma(lib, "freetype");
import core.stdc.config;

extern(C) nothrow:

// config/ftconfig.h
alias FT_Int16 = short;
alias FT_UInt16 = ushort;
alias FT_Int32 = int;
alias FT_UInt32 = uint;
alias FT_Fast = int;
alias FT_UFast = uint;
alias FT_Int64 = long;
alias FT_Uint64 = ulong;

// fttypes.h
alias FT_Bool = ubyte;
alias FT_FWord = short;
alias FT_UFWord = ushort;
alias FT_Char = char;
alias FT_Byte = ubyte;
alias FT_Bytes = FT_Byte*;
alias FT_Tag = FT_UInt32;
alias FT_String = char;
alias FT_Short = short;
alias FT_UShort = ushort;
alias FT_Int = int;
alias FT_UInt = uint;
alias FT_Long = c_long;
alias FT_ULong = c_ulong;
alias FT_F2Dot14 = short;
alias FT_F26Dot6 = c_long;
alias FT_Fixed = c_long;
alias FT_Error = int;
alias FT_Pointer = void*;
alias FT_Offset = usize;
alias FT_PtrDist = ptrdiff_t;

struct FT_UnitVector {
  FT_F2Dot14 x;
  FT_F2Dot14 y;
}

struct FT_Matrix {
  FT_Fixed xx, xy;
  FT_Fixed yx, yy;
}

struct FT_Data {
  const(FT_Byte)* pointer;
  FT_Int length;
}

extern(C) nothrow {
  alias FT_Generic_Finalizer = void function (void* object);
}

struct FT_Generic {
  void* data;
  FT_Generic_Finalizer finalizer;
}

FT_Tag FT_MAKE_TAG (char x1, char x2, char x3, char x4) pure nothrow @safe @nogc {
  pragma(inline, true);
  return cast(FT_UInt32)((x1<<24)|(x2<<16)|(x3<<8)|x4);
}


alias FT_ListNode = FT_ListNodeRec*;
alias FT_List = FT_ListRec*;

struct FT_ListNodeRec {
  FT_ListNode prev;
  FT_ListNode next;
  void* data;
}

struct FT_ListRec {
  FT_ListNode head;
  FT_ListNode tail;
}

// freetype.h
struct FT_Glyph_Metrics {
  FT_Pos width;
  FT_Pos height;
  FT_Pos horiBearingX;
  FT_Pos horiBearingY;
  FT_Pos horiAdvance;
  FT_Pos vertBearingX;
  FT_Pos vertBearingY;
  FT_Pos vertAdvance;
}

struct FT_Bitmap_Size {
  FT_Short height;
  FT_Short width;
  FT_Pos size;
  FT_Pos x_ppem;
  FT_Pos y_ppem;
}

struct FT_LibraryRec;
struct FT_ModuleRec;
struct FT_DriverRec;
struct FT_RendererRec;

alias FT_Library = FT_LibraryRec*;
alias FT_Module = FT_ModuleRec*;
alias FT_Driver = FT_DriverRec*;
alias FT_Renderer = FT_RendererRec*;
alias FT_Face = FT_FaceRec*;
alias FT_Size = FT_SizeRec*;
alias FT_GlyphSlot = FT_GlyphSlotRec*;
alias FT_CharMap = FT_CharMapRec*;

alias FT_ENC_TAG = FT_MAKE_TAG;

alias FT_Encoding = FT_Tag;
enum : FT_Tag {
  FT_ENCODING_NONE = 0,
  FT_ENCODING_MS_SYMBOL = FT_MAKE_TAG('s','y','m','b'),
  FT_ENCODING_UNICODE = FT_MAKE_TAG('u','n','i','c'),
  FT_ENCODING_SJIS = FT_MAKE_TAG('s','j','i','s'),
  FT_ENCODING_GB2312 = FT_MAKE_TAG('g','b',' ',' '),
  FT_ENCODING_BIG5 = FT_MAKE_TAG('b','i','g','5' ),
  FT_ENCODING_WANSUNG = FT_MAKE_TAG('w','a','n','s'),
  FT_ENCODING_JOHAB = FT_MAKE_TAG('j','o','h','a'),
  FT_ENCODING_MS_SJIS = FT_ENCODING_SJIS,
  FT_ENCODING_MS_GB2312 = FT_ENCODING_GB2312,
  FT_ENCODING_MS_BIG5 = FT_ENCODING_BIG5,
  FT_ENCODING_MS_WANSUNG = FT_ENCODING_WANSUNG,
  FT_ENCODING_MS_JOHAB = FT_ENCODING_JOHAB,
  FT_ENCODING_ADOBE_STANDARD = FT_MAKE_TAG('A','D','O','B'),
  FT_ENCODING_ADOBE_EXPERT = FT_MAKE_TAG('A','D','B','E'),
  FT_ENCODING_ADOBE_CUSTOM = FT_MAKE_TAG('A','D','B','C'),
  FT_ENCODING_ADOBE_LATIN_1 = FT_MAKE_TAG('l','a','t','1'),
  FT_ENCODING_OLD_LATIN_2 = FT_MAKE_TAG('l','a','t','2'),
  FT_ENCODING_APPLE_ROMAN = FT_MAKE_TAG('a','r','m','n'),
}

struct FT_CharMapRec {
  FT_Face face;
  FT_Encoding encoding;
  FT_UShort platform_id;
  FT_UShort encoding_id;
}

struct FT_Face_InternalRec;
alias FT_Face_Internal = FT_Face_InternalRec*;

struct FT_FaceRec {
  FT_Long num_faces;
  FT_Long face_index;
  FT_Long face_flags;
  FT_Long style_flags;
  FT_Long num_glyphs;
  FT_String* family_name;
  FT_String* style_name;
  FT_Int num_fixed_sizes;
  FT_Bitmap_Size* available_sizes;
  FT_Int num_charmaps;
  FT_CharMap* charmaps;
  FT_Generic generic;
  FT_BBox bbox;
  FT_UShort units_per_EM;
  FT_Short ascender;
  FT_Short descender;
  FT_Short height;
  FT_Short max_advance_width;
  FT_Short max_advance_height;
  FT_Short underline_position;
  FT_Short underline_thickness;
  FT_GlyphSlot glyph;
  FT_Size size;
  FT_CharMap charmap;
  FT_Driver driver;
  FT_Memory memory;
  FT_Stream stream;
  FT_ListRec sizes_list;
  FT_Generic autohint;
  void* extensions;
  FT_Face_Internal internal;
}

enum FT_FACE_FLAG_SCALABLE = 1U<<0;
enum FT_FACE_FLAG_FIXED_SIZES = 1U<<1;
enum FT_FACE_FLAG_FIXED_WIDTH = 1U<<2;
enum FT_FACE_FLAG_SFNT = 1U<<3;
enum FT_FACE_FLAG_HORIZONTAL = 1U<<4;
enum FT_FACE_FLAG_VERTICAL = 1U<<5;
enum FT_FACE_FLAG_KERNING = 1U<<6;
enum FT_FACE_FLAG_FAST_GLYPHS = 1U<<7;
enum FT_FACE_FLAG_MULTIPLE_MASTERS = 1U<<8;
enum FT_FACE_FLAG_GLYPH_NAMES = 1U<<9;
enum FT_FACE_FLAG_EXTERNAL_STREAM = 1U<<10;
enum FT_FACE_FLAG_HINTER = 1U<<11;
enum FT_FACE_FLAG_CID_KEYED = 1U<<12;
enum FT_FACE_FLAG_TRICKY = 1U<<13;
enum FT_FACE_FLAG_COLOR = 1U<<14;

pure nothrow @safe @nogc {
  bool FT_HAS_HORIZONTAL (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_HORIZONTAL) != 0; }
  bool FT_HAS_VERTICAL (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_VERTICAL) != 0; }
  bool FT_HAS_KERNING (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_KERNING) != 0; }
  bool FT_IS_SCALABLE (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_SCALABLE) != 0; }
  bool FT_IS_SFNT (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_SFNT) != 0; }
  bool FT_IS_FIXED_WIDTH (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_FIXED_WIDTH) != 0; }
  bool FT_HAS_FIXED_SIZES (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_FIXED_SIZES) != 0; }
  bool FT_HAS_FAST_GLYPHS (FT_FaceRec* face) { pragma(inline, true); return false; }
  bool FT_HAS_GLYPH_NAMES (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_GLYPH_NAMES) != 0; }
  bool FT_HAS_MULTIPLE_MASTERS (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_MULTIPLE_MASTERS) != 0; }
  bool FT_IS_CID_KEYED (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_CID_KEYED) != 0; }
  bool FT_IS_TRICKY (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_TRICKY) != 0; }
  bool FT_HAS_COLOR (FT_FaceRec* face) { pragma(inline, true); return (face.face_flags&FT_FACE_FLAG_COLOR) != 0; }
}

enum FT_STYLE_FLAG_ITALIC = 1<<0;
enum FT_STYLE_FLAG_BOLD = 1<<1;

struct FT_Size_InternalRec;
alias FT_Size_Internal = FT_Size_InternalRec*;

struct FT_Size_Metrics {
  FT_UShort x_ppem;
  FT_UShort y_ppem;

  FT_Fixed x_scale;
  FT_Fixed y_scale;

  FT_Pos ascender;
  FT_Pos descender;
  FT_Pos height;
  FT_Pos max_advance;
}

struct FT_SizeRec {
  FT_Face face;
  FT_Generic generic;
  FT_Size_Metrics metrics;
  FT_Size_Internal internal;
}

struct FT_SubGlyphRec;
struct FT_Slot_InternalRec;
alias FT_SubGlyph = FT_SubGlyphRec*;
alias FT_Slot_Internal = FT_Slot_InternalRec*;

struct FT_GlyphSlotRec {
  FT_Library library;
  FT_Face face;
  FT_GlyphSlot next;
  FT_UInt reserved;
  FT_Generic generic;
  FT_Glyph_Metrics metrics;
  FT_Fixed linearHoriAdvance;
  FT_Fixed linearVertAdvance;
  FT_Vector advance;
  FT_Glyph_Format format;
  FT_Bitmap bitmap;
  FT_Int bitmap_left;
  FT_Int bitmap_top;
  FT_Outline outline;
  FT_UInt num_subglyphs;
  FT_SubGlyph subglyphs;
  void* control_data;
  c_long control_len;
  FT_Pos lsb_delta;
  FT_Pos rsb_delta;
  void* other;
  FT_Slot_Internal internal;
}

enum FT_OPEN_MEMORY   = 0x1U;
enum FT_OPEN_STREAM   = 0x2U;
enum FT_OPEN_DRIVER   = 0x4U;
enum FT_OPEN_PATHNAME = 0x8U;
enum FT_OPEN_PARAMS   = 0x10U;

struct FT_Parameter {
  FT_ULong tag;
  FT_Pointer data;
}

struct FT_Open_Args {
  FT_UInt flags;
  const(FT_Byte)* memory_base;
  FT_Long memory_size;
  FT_String* pathname;
  FT_Stream stream;
  FT_Module driver;
  FT_Int num_params;
  FT_Parameter* params;
}

alias FT_Size_Request_Type = int;
enum  {
  FT_SIZE_REQUEST_TYPE_NOMINAL,
  FT_SIZE_REQUEST_TYPE_REAL_DIM,
  FT_SIZE_REQUEST_TYPE_BBOX,
  FT_SIZE_REQUEST_TYPE_CELL,
  FT_SIZE_REQUEST_TYPE_SCALES,
  FT_SIZE_REQUEST_TYPE_MAX
}

struct FT_Size_RequestRec {
  FT_Size_Request_Type type;
  FT_Long width;
  FT_Long height;
  FT_UInt horiResolution;
  FT_UInt vertResolution;
}

alias FT_Size_Request = FT_Size_RequestRec*;

enum FT_LOAD_DEFAULT = 0x0U;
enum FT_LOAD_NO_SCALE = 1U<<0;
enum FT_LOAD_NO_HINTING = 1U<<1;
enum FT_LOAD_RENDER = 1U<<2;
enum FT_LOAD_NO_BITMAP = 1U<<3;
enum FT_LOAD_VERTICAL_LAYOUT = 1U<<4;
enum FT_LOAD_FORCE_AUTOHINT = 1U<<5;
enum FT_LOAD_CROP_BITMAP = 1U<<6;
enum FT_LOAD_PEDANTIC = 1U<<7;
enum FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 1U<<9;
enum FT_LOAD_NO_RECURSE = 1U<<10;
enum FT_LOAD_IGNORE_TRANSFORM = 1U<<11;
enum FT_LOAD_MONOCHROME = 1U<<12;
enum FT_LOAD_LINEAR_DESIGN = 1U<<13;
enum FT_LOAD_NO_AUTOHINT = 1U<<15;
enum FT_LOAD_COLOR = 1U<<20;
enum FT_LOAD_COMPUTE_METRICS = 1U<<21;

enum FT_LOAD_TARGET_NORMAL = (FT_RENDER_MODE_NORMAL&15)<<16;
enum FT_LOAD_TARGET_LIGHT = (FT_RENDER_MODE_LIGHT&15)<<16;
enum FT_LOAD_TARGET_MONO = (FT_RENDER_MODE_MONO&15)<<16;
enum FT_LOAD_TARGET_LCD = (FT_RENDER_MODE_LCD&15)<<16;
enum FT_LOAD_TARGET_LCD_V = (FT_RENDER_MODE_LCD_V&15)<<16;

FT_Render_Mode FT_LOAD_TARGET_MODE (uint x) pure nothrow @safe @nogc { pragma(inline, true); return cast(FT_Render_Mode)((x>>16)&15); }

alias FT_Render_Mode = uint;
enum {
  FT_RENDER_MODE_NORMAL = 0,
  FT_RENDER_MODE_LIGHT,
  FT_RENDER_MODE_MONO,
  FT_RENDER_MODE_LCD,
  FT_RENDER_MODE_LCD_V,
  FT_RENDER_MODE_MAX
}

alias FT_Kerning_Mode = int;
enum /*FT_Kerning_Mode*/ {
  FT_KERNING_DEFAULT = 0,
  FT_KERNING_UNFITTED,
  FT_KERNING_UNSCALED
}

enum FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS = 1;
enum FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES = 2;
enum FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID = 4;
enum FT_SUBGLYPH_FLAG_SCALE = 8;
enum FT_SUBGLYPH_FLAG_XY_SCALE = 0x40;
enum FT_SUBGLYPH_FLAG_2X2 = 0x80;
enum FT_SUBGLYPH_FLAG_USE_MY_METRICS = 0x200;

enum FT_FSTYPE_INSTALLABLE_EMBEDDING = 0x0000;
enum FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING = 0x0002;
enum FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING = 0x0004;
enum FT_FSTYPE_EDITABLE_EMBEDDING = 0x0008;
enum FT_FSTYPE_NO_SUBSETTING = 0x0100;
enum FT_FSTYPE_BITMAP_EMBEDDING_ONLY = 0x0200;

enum {
  FREETYPE_MAJOR = 2,
  FREETYPE_MINOR = 6,
  FREETYPE_PATCH = 3,
}

// ftadvanc.h
enum FT_ADVANCE_FLAG_FAST_ONLY = 0x20000000;

// ftautoh.h
enum FT_AUTOHINTER_SCRIPT_NONE = 0;
enum FT_AUTOHINTER_SCRIPT_LATIN = 1;
enum FT_AUTOHINTER_SCRIPT_CJK = 2;
enum FT_AUTOHINTER_SCRIPT_INDIC = 3;

struct FT_Prop_GlyphToScriptMap {
  FT_Face face;
  FT_UShort* map;
}

struct FT_Prop_IncreaseXHeight {
  FT_Face face;
  FT_UInt32 limit;
}

// ftbdf.h
version(linux) {
  alias BDF_PropertyType = int;
  enum {
    BDF_PROPERTY_TYPE_NONE = 0,
    BDF_PROPERTY_TYPE_ATOM = 1,
    BDF_PROPERTY_TYPE_INTEGER = 2,
    BDF_PROPERTY_TYPE_CARDINAL = 3
  }

  alias BDF_Property = BDF_PropertyRec*;

  struct BDF_PropertyRec {
    BDF_PropertyType type;
    union u {
      char* atom;
      FT_Int32 integer;
      FT_UInt32 cardinal;
    }
  }
}

// ftcache.h
alias FTC_FaceID = FT_Pointer;
extern(C) nothrow {
  alias FTC_Face_Requester = FT_Error function (FTC_FaceID face_id, FT_Library library, FT_Pointer request_data, FT_Face* aface);
}

struct FTC_ManagerRec;
struct FTC_NodeRec;

alias FTC_Manager = FTC_ManagerRec*;
alias FTC_Node = FTC_NodeRec*;

struct FTC_ScalerRec {
  FTC_FaceID face_id;
  FT_UInt width;
  FT_UInt height;
  FT_Int pixel;
  FT_UInt x_res;
  FT_UInt y_res;
}

alias FTC_Scaler = FTC_ScalerRec*;

struct FTC_CMapCacheRec;
alias FTC_CMapCache = FTC_CMapCacheRec*;

struct FTC_ImageTypeRec {
  FTC_FaceID face_id;
  FT_UInt width;
  FT_UInt height;
  FT_Int32 flags;
}


alias FTC_ImageType = FTC_ImageTypeRec*;

struct FTC_ImageCacheRec;
alias FTC_ImageCache = FTC_ImageCacheRec*;

alias FTC_SBit = FTC_SBitRec*;

struct FTC_SBitRec {
  FT_Byte width;
  FT_Byte height;
  FT_Char left;
  FT_Char top;
  FT_Byte format;
  FT_Byte max_grays;
  FT_Short pitch;
  FT_Char xadvance;
  FT_Char yadvance;
  FT_Byte* buffer;
}

struct FTC_SBitCacheRec;
alias FTC_SBitCache = FTC_SBitCacheRec*;

// ftcffdrv.h
enum FT_CFF_HINTING_FREETYPE = 0;
enum FT_CFF_HINTING_ADOBE = 1;

// fterrdef.h
enum FT_Err_Ok = 0x00;
enum FT_Err_Cannot_Open_Resource = 0x01;
enum FT_Err_Unknown_File_Format = 0x02;
enum FT_Err_Invalid_File_Format = 0x03;
enum FT_Err_Invalid_Version = 0x04;
enum FT_Err_Lower_Module_Version = 0x05;
enum FT_Err_Invalid_Argument = 0x06;
enum FT_Err_Unimplemented_Feature = 0x07;
enum FT_Err_Invalid_Table = 0x08;
enum FT_Err_Invalid_Offset = 0x09;
enum FT_Err_Array_Too_Large = 0x0A;
enum FT_Err_Missing_Module = 0x0B;
enum FT_Err_Missing_Property = 0x0C;

enum FT_Err_Invalid_Glyph_Index = 0x10;
enum FT_Err_Invalid_Character_Code = 0x11;
enum FT_Err_Invalid_Glyph_Format = 0x12;
enum FT_Err_Cannot_Render_Glyph = 0x13;
enum FT_Err_Invalid_Outline = 0x14;
enum FT_Err_Invalid_Composite = 0x15;
enum FT_Err_Too_Many_Hints = 0x16;
enum FT_Err_Invalid_Pixel_Size = 0x17;

enum FT_Err_Invalid_Handle = 0x20;
enum FT_Err_Invalid_Library_Handle = 0x21;
enum FT_Err_Invalid_Driver_Handle = 0x22;
enum FT_Err_Invalid_Face_Handle = 0x23;
enum FT_Err_Invalid_Size_Handle = 0x24;
enum FT_Err_Invalid_Slot_Handle = 0x25;
enum FT_Err_Invalid_CharMap_Handle = 0x26;
enum FT_Err_Invalid_Cache_Handle = 0x27;
enum FT_Err_Invalid_Stream_Handle = 0x28;

enum FT_Err_Too_Many_Drivers = 0x30;
enum FT_Err_Too_Many_Extensions = 0x31;

enum FT_Err_Out_Of_Memory = 0x40;
enum FT_Err_Unlisted_Object = 0x41;

enum FT_Err_Cannot_Open_Stream = 0x51;
enum FT_Err_Invalid_Stream_Seek = 0x52;
enum FT_Err_Invalid_Stream_Skip = 0x53;
enum FT_Err_Invalid_Stream_Read = 0x54;
enum FT_Err_Invalid_Stream_Operation = 0x55;
enum FT_Err_Invalid_Frame_Operation = 0x56;
enum FT_Err_Nested_Frame_Access = 0x57;
enum FT_Err_Invalid_Frame_Read = 0x58;

enum FT_Err_Raster_Uninitialized = 0x60;
enum FT_Err_Raster_Corrupted = 0x61;
enum FT_Err_Raster_Overflow = 0x62;
enum FT_Err_Raster_Negative_Height = 0x63;

enum FT_Err_Too_Many_Caches = 0x70;

enum FT_Err_Invalid_Opcode = 0x80;
enum FT_Err_Too_Few_Arguments = 0x81;
enum FT_Err_Stack_Overflow = 0x82;
enum FT_Err_Code_Overflow = 0x83;
enum FT_Err_Bad_Argument = 0x84;
enum FT_Err_Divide_By_Zero = 0x85;
enum FT_Err_Invalid_Reference = 0x86;
enum FT_Err_Debug_OpCode = 0x87;
enum FT_Err_ENDF_In_Exec_Stream = 0x88;
enum FT_Err_Nested_DEFS = 0x89;
enum FT_Err_Invalid_CodeRange = 0x8A;
enum FT_Err_Execution_Too_Long = 0x8B;
enum FT_Err_Too_Many_Function_Defs = 0x8C;
enum FT_Err_Too_Many_Instruction_Defs = 0x8D;
enum FT_Err_Table_Missing = 0x8E;
enum FT_Err_Horiz_Header_Missing = 0x8F;
enum FT_Err_Locations_Missing = 0x90;
enum FT_Err_Name_Table_Missing = 0x91;
enum FT_Err_CMap_Table_Missing = 0x92;
enum FT_Err_Hmtx_Table_Missing = 0x93;
enum FT_Err_Post_Table_Missing = 0x94;
enum FT_Err_Invalid_Horiz_Metrics = 0x95;
enum FT_Err_Invalid_CharMap_Format = 0x96;
enum FT_Err_Invalid_PPem = 0x97;
enum FT_Err_Invalid_Vert_Metrics = 0x98;
enum FT_Err_Could_Not_Find_Context = 0x99;
enum FT_Err_Invalid_Post_Table_Format = 0x9A;
enum FT_Err_Invalid_Post_Table = 0x9B;

enum FT_Err_Syntax_Error = 0xA0;
enum FT_Err_Stack_Underflow = 0xA1;
enum FT_Err_Ignore = 0xA2;
enum FT_Err_No_Unicode_Glyph_Name = 0xA3;
enum FT_Err_Glyph_Too_Big = 0xA4;

enum FT_Err_Missing_Startfont_Field = 0xB0;
enum FT_Err_Missing_Font_Field = 0xB1;
enum FT_Err_Missing_Size_Field = 0xB2;
enum FT_Err_Missing_Fontboundingbox_Field = 0xB3;
enum FT_Err_Missing_Chars_Field = 0xB4;
enum FT_Err_Missing_Startchar_Field = 0xB5;
enum FT_Err_Missing_Encoding_Field = 0xB6;
enum FT_Err_Missing_Bbx_Field = 0xB7;
enum FT_Err_Bbx_Too_Big = 0xB8;
enum FT_Err_Corrupted_Font_Header = 0xB9;
enum FT_Err_Corrupted_Font_Glyphs = 0xBA;

//FT_Err_Max,

// ftgasp.h
enum FT_GASP_NO_TABLE = -1;
enum FT_GASP_DO_GRIDFIT = 0x01;
enum FT_GASP_DO_GRAY = 0x02;
enum FT_GASP_SYMMETRIC_SMOOTHING = 0x08;
enum FT_GASP_SYMMETRIC_GRIDFIT = 0x10;

// ftglyph.h
alias FT_Glyph = FT_GlyphRec*;

struct FT_GlyphRec {
  FT_Library library;
  FT_Glyph_Class* clazz;
  FT_Glyph_Format format;
  FT_Vector advance;
}

alias FT_BitmapGlyph = FT_BitmapGlyphRec*;

struct FT_BitmapGlyphRec {
  FT_GlyphRec root;
  FT_Int left;
  FT_Int top;
  FT_Bitmap bitmap;
}

alias FT_OutlineGlyph = FT_OutlineGlyphRec*;

struct FT_OutlineGlyphRec {
  FT_GlyphRec root;
  FT_Outline outline;
}

alias FT_Glyph_BBox_Mode = int;
enum FT_GLYPH_BBOX_UNSCALED = 0;
enum FT_GLYPH_BBOX_SUBPIXELS = 0;
enum FT_GLYPH_BBOX_GRIDFIT = 1;
enum FT_GLYPH_BBOX_TRUNCATE = 2;
enum FT_GLYPH_BBOX_PIXELS = 3;

// ftgxval.h
enum {
  FT_VALIDATE_feat_INDEX = 0,
  FT_VALIDATE_mort_INDEX = 1,
  FT_VALIDATE_morx_INDEX = 2,
  FT_VALIDATE_bsln_INDEX = 3,
  FT_VALIDATE_just_INDEX = 4,
  FT_VALIDATE_kern_INDEX = 5,
  FT_VALIDATE_opbd_INDEX = 6,
  FT_VALIDATE_trak_INDEX = 7,
  FT_VALIDATE_prop_INDEX = 8,
  FT_VALIDATE_lcar_INDEX = 9,
  FT_VALIDATE_GX_LAST_INDEX = FT_VALIDATE_lcar_INDEX,
  FT_VALIDATE_GX_LENGTH = FT_VALIDATE_GX_LAST_INDEX+1,

  FT_VALIDATE_GX_START = 0x4000,
  FT_VALIDATE_feat = FT_VALIDATE_GX_START<<FT_VALIDATE_feat_INDEX,
  FT_VALIDATE_mort = FT_VALIDATE_GX_START<<FT_VALIDATE_mort_INDEX,
  FT_VALIDATE_morx = FT_VALIDATE_GX_START<<FT_VALIDATE_morx_INDEX,
  FT_VALIDATE_bsln = FT_VALIDATE_GX_START<<FT_VALIDATE_bsln_INDEX,
  FT_VALIDATE_just = FT_VALIDATE_GX_START<<FT_VALIDATE_just_INDEX,
  FT_VALIDATE_kern = FT_VALIDATE_GX_START<<FT_VALIDATE_kern_INDEX,
  FT_VALIDATE_opbd = FT_VALIDATE_GX_START<<FT_VALIDATE_opbd_INDEX,
  FT_VALIDATE_trak = FT_VALIDATE_GX_START<<FT_VALIDATE_trak_INDEX,
  FT_VALIDATE_prop = FT_VALIDATE_GX_START<<FT_VALIDATE_prop_INDEX,
  FT_VALIDATE_lcar = FT_VALIDATE_GX_START<<FT_VALIDATE_lcar_INDEX,

  FT_VALIDATE_GX = FT_VALIDATE_feat|
                   FT_VALIDATE_mort|
                   FT_VALIDATE_morx|
                   FT_VALIDATE_bsln|
                   FT_VALIDATE_just|
                   FT_VALIDATE_kern|
                   FT_VALIDATE_opbd|
                   FT_VALIDATE_trak|
                   FT_VALIDATE_prop|
                   FT_VALIDATE_lcar,

  FT_VALIDATE_MS = FT_VALIDATE_GX_START<<0,
  FT_VALIDATE_APPLE = FT_VALIDATE_GX_START<<1,
  FT_VALIDATE_CKERN = FT_VALIDATE_MS|FT_VALIDATE_APPLE,
}

// ftimage.h
alias FT_Pos = c_long;

struct FT_Vector {
  FT_Pos x;
  FT_Pos y;
}

struct FT_BBox {
  FT_Pos xMin, yMin;
  FT_Pos xMax, yMax;
}

alias FT_Pixel_Mode = int;
enum {
  FT_PIXEL_MODE_NONE = 0,
  FT_PIXEL_MODE_MONO,
  FT_PIXEL_MODE_GRAY,
  FT_PIXEL_MODE_GRAY2,
  FT_PIXEL_MODE_GRAY4,
  FT_PIXEL_MODE_LCD,
  FT_PIXEL_MODE_LCD_V,
  FT_PIXEL_MODE_MAX
}

struct FT_Bitmap {
  uint rows;
  uint width;
  int pitch;
  ubyte* buffer;
  ushort num_grays;
  ubyte pixel_mode;
  ubyte palette_mode;
  void* palette;
}

struct FT_Outline {
  short n_contours;
  short n_points;
  FT_Vector* points;
  byte* tags;
  short* contours;
  int flags;
}

enum FT_OUTLINE_CONTOURS_MAX = short.max;
enum FT_OUTLINE_POINTS_MAX = short.max;

enum FT_OUTLINE_NONE            = 0x0U;
enum FT_OUTLINE_OWNER           = 0x1U;
enum FT_OUTLINE_EVEN_ODD_FILL   = 0x2U;
enum FT_OUTLINE_REVERSE_FILL    = 0x4U;
enum FT_OUTLINE_IGNORE_DROPOUTS = 0x8U;
enum FT_OUTLINE_HIGH_PRECISION  = 0x100U;
enum FT_OUTLINE_SINGLE_PASS     = 0x200U;

enum FT_CURVE_TAG_ON         = 1;
enum FT_CURVE_TAG_CONIC      = 0;
enum FT_CURVE_TAG_CUBIC      = 2;
enum FT_CURVE_TAG_TOUCH_X    = 8;
enum FT_CURVE_TAG_TOUCH_Y    = 16;
enum FT_CURVE_TAG_TOUCH_BOTH = FT_CURVE_TAG_TOUCH_X|FT_CURVE_TAG_TOUCH_Y;

extern(C) nothrow {
  alias FT_Outline_MoveToFunc = int function (const(FT_Vector)*, void*);
  alias FT_Outline_LineToFunc = int function (const(FT_Vector)*, void*);
  alias FT_Outline_ConicToFunc = int function (const(FT_Vector)*, const(FT_Vector)*, void*);
  alias FT_Outline_CubicToFunc = int function (const(FT_Vector)*, const(FT_Vector)*, const(FT_Vector)*, void*);
}

struct FT_Outline_Funcs {
  FT_Outline_MoveToFunc move_to;
  FT_Outline_LineToFunc line_to;
  FT_Outline_ConicToFunc conic_to;
  FT_Outline_CubicToFunc cubic_to;
  int shift;
  FT_Pos delta;
}

alias FT_Glyph_Format = FT_Tag;
enum : FT_Tag {
  FT_GLYPH_FORMAT_NONE = 0,
  FT_GLYPH_FORMAT_COMPOSITE = FT_MAKE_TAG('c','o','m','p'),
  FT_GLYPH_FORMAT_BITMAP = FT_MAKE_TAG('b','i','t','s'),
  FT_GLYPH_FORMAT_OUTLINE = FT_MAKE_TAG('o','u','t','l'),
  FT_GLYPH_FORMAT_PLOTTER = FT_MAKE_TAG('p','l','o','t'),
}

struct FT_RasterRec;
alias FT_Raster = FT_RasterRec*;

struct FT_Span {
  short x;
  ushort len;
  ubyte coverage;
}

extern(C) nothrow {
  alias FT_SpanFunc = void function (int, int, FT_Span*, void*);
}

enum FT_RASTER_FLAG_DEFAULT = 0x0;
enum FT_RASTER_FLAG_AA      = 0x1;
enum FT_RASTER_FLAG_DIRECT  = 0x2;
enum FT_RASTER_FLAG_CLIP    = 0x4;

struct FT_Raster_Params {
  const(FT_Bitmap)* target;
  const(void)* source;
  int flags;
  FT_SpanFunc gray_spans;
  void* black_spans;
  void* bit_test;
  void* bit_set;
  void* user;
  FT_BBox clip_box;
}

extern(C) nothrow {
  alias FT_Raster_NewFunc = int function (void*, FT_Raster*);
  alias FT_Raster_DoneFunc = void function (FT_Raster);
  alias FT_Raster_ResetFunc = void function (FT_Raster, ubyte*, uint);
  alias FT_Raster_SetModeFunc = int function (FT_Raster, uint, void*);
  alias FT_Raster_RenderFunc = int function (FT_Raster, FT_Raster_Params*);
}


struct FT_Raster_Funcs {
  FT_Glyph_Format glyph_format;
  FT_Raster_NewFunc raster_new;
  FT_Raster_ResetFunc raster_reset;
  FT_Raster_SetModeFunc raster_set_mode;
  FT_Raster_RenderFunc raster_render;
  FT_Raster_DoneFunc raster_done;
}

// ftincrem.h
struct FT_IncrementalRec;
alias FT_Incremental = FT_IncrementalRec*;

struct FT_Incremental_MetricsRec {
  FT_Long bearing_x;
  FT_Long bearing_y;
  FT_Long advance;
}

alias FT_Incremental_Metrics = FT_Incremental_MetricsRec*;

extern(C) nothrow {
  alias FT_Incremental_GetGlyphDataFunc = FT_Error function (FT_Incremental, FT_UInt, FT_Data*);
  alias FT_Incremental_FreeGlyphDataFunc = void function (FT_Incremental, FT_Data*);
  alias FT_Incremental_GetGlyphMetricsFunc = FT_Error function (FT_Incremental, FT_UInt, FT_Bool, FT_Incremental_MetricsRec*);
}

struct FT_Incremental_FuncsRec {
  FT_Incremental_GetGlyphDataFunc get_glyph_data;
  FT_Incremental_FreeGlyphDataFunc free_glyph_data;
  FT_Incremental_GetGlyphMetricsFunc get_glyph_metrics;
}

struct FT_Incremental_InterfaceRec {
  FT_Incremental_FuncsRec* funcs;
  FT_Incremental object;
}

enum FT_PARAM_TAG_INCREMENTAL = FT_MAKE_TAG('i','n','c','r');

alias FT_Incremental_Interface = FT_Incremental_InterfaceRec*;

// ftlcdfil.h
alias FT_LcdFilter = int;
enum {
  FT_LCD_FILTER_NONE    = 0,
  FT_LCD_FILTER_DEFAULT = 1,
  FT_LCD_FILTER_LIGHT   = 2,
  FT_LCD_FILTER_LEGACY1 = 3,
  FT_LCD_FILTER_LEGACY  = 16,
  FT_LCD_FILTER_MAX
}

// ftlist.h
extern(C) nothrow {
  alias FT_List_Iterator = FT_Error function (FT_ListNode, void*);
  alias FT_List_Destructor = void function (FT_Memory, void*, void*);
}

// ftmm.h
struct FT_MM_Axis {
  FT_String* name;
  FT_Long minimum;
  FT_Long maximum;
}

struct FT_Multi_Master {
  FT_UInt num_axis;
  FT_UInt num_designs;
  FT_MM_Axis[4] axis;
}

struct FT_Var_Axis {
  FT_String* name;
  FT_Fixed minimum;
  FT_Fixed def;
  FT_Fixed maximum;
  FT_ULong tag;
  FT_UInt strid;
}

struct FT_Var_Named_Style {
  FT_Fixed* coords;
  FT_UInt strid;
}

struct FT_MM_Var {
  FT_UInt num_axis;
  FT_UInt num_designs;
  FT_UInt num_namedstyles;
  FT_Var_Axis* axis;
  FT_Var_Named_Style* namedstyle;
}

// ftmodapi.h
enum FT_MODULE_FONT_DRIVER          = 1;
enum FT_MODULE_RENDERER             = 2;
enum FT_MODULE_HINTER               = 4;
enum FT_MODULE_STYLER               = 8;
enum FT_MODULE_DRIVER_SCALABLE      = 0x100;
enum FT_MODULE_DRIVER_NO_OUTLINES   = 0x200;
enum FT_MODULE_DRIVER_HAS_HINTER    = 0x400;
enum FT_MODULE_DRIVER_HINTS_LIGHTLY = 0x800;

alias FT_Module_Interface = FT_Pointer;

extern(C) nothrow {
  alias FT_Module_Constructor = FT_Error function (FT_Module);
  alias FT_Module_Destructor = void function (FT_Module);
  alias FT_Module_Requester = FT_Module_Interface function (FT_Module, const(char)*);
}

struct FT_Module_Class {
  FT_ULong module_flags;
  FT_Long module_size;
  FT_String* module_name;
  FT_Fixed module_version;
  FT_Fixed module_requires;
  void* module_interface;
  FT_Module_Constructor module_init;
  FT_Module_Destructor module_done;
  FT_Module_Requester get_interface;
}

extern(C) nothrow {
  alias FT_DebugHook_Func = void function (void*);
}

alias FT_TrueTypeEngineType = int;
enum {
  FT_TRUETYPE_ENGINE_TYPE_NONE = 0,
  FT_TRUETYPE_ENGINE_TYPE_UNPATENTED,
  FT_TRUETYPE_ENGINE_TYPE_PATENTED
}

// ftmoderr.h
enum FT_Mod_Err_Base = 0x000;
enum FT_Mod_Err_Autofit = 0x100;
enum FT_Mod_Err_BDF = 0x200;
enum FT_Mod_Err_Bzip2 = 0x300;
enum FT_Mod_Err_Cache = 0x400;
enum FT_Mod_Err_CFF = 0x500;
enum FT_Mod_Err_CID = 0x600;
enum FT_Mod_Err_Gzip = 0x700;
enum FT_Mod_Err_LZW = 0x800;
enum FT_Mod_Err_OTvalid = 0x900;
enum FT_Mod_Err_PCF = 0xA00;
enum FT_Mod_Err_PFR = 0xB00;
enum FT_Mod_Err_PSaux = 0xC00;
enum FT_Mod_Err_PShinter = 0xD00;
enum FT_Mod_Err_PSnames = 0xE00;
enum FT_Mod_Err_Raster = 0xF00;
enum FT_Mod_Err_SFNT = 0x1000;
enum FT_Mod_Err_Smooth = 0x1100;
enum FT_Mod_Err_TrueType = 0x1200;
enum FT_Mod_Err_Type1 = 0x1300;
enum FT_Mod_Err_Type42 = 0x1400;
enum FT_Mod_Err_Winfonts = 0x1500;
enum FT_Mod_Err_GXvalid = 0x1600;
//FT_Mod_Err_Max,

// ftotval.h
enum {
  FT_VALIDATE_BASE = 0x0100,
  FT_VALIDATE_GDEF = 0x0200,
  FT_VALIDATE_GPOS = 0x0400,
  FT_VALIDATE_GSUB = 0x0800,
  FT_VALIDATE_JSTF = 0x1000,
  FT_VALIDATE_MATH = 0x2000,
  FT_VALIDATE_OT   = FT_VALIDATE_BASE|
                     FT_VALIDATE_GDEF|
                     FT_VALIDATE_GPOS|
                     FT_VALIDATE_GSUB|
                     FT_VALIDATE_JSTF|
                     FT_VALIDATE_MATH,
}

// ftoutln
alias FT_Orientation = int;
enum {
  FT_ORIENTATION_TRUETYPE = 0,
  FT_ORIENTATION_POSTSCRIPT = 1,
  FT_ORIENTATION_FILL_RIGHT = FT_ORIENTATION_TRUETYPE,
  FT_ORIENTATION_FILL_LEFT = FT_ORIENTATION_POSTSCRIPT
}

// ftrender.h
extern(C) nothrow {
  alias FT_Glyph_InitFunc = FT_Error function (FT_Glyph, FT_GlyphSlot);
  alias FT_Glyph_DoneFunc = void function (FT_Glyph);
  alias FT_Glyph_TransformFunc = void function (FT_Glyph, const(FT_Matrix)* matrix, const(FT_Vector)*);
  alias FT_Glyph_GetBBoxFunc = void function (FT_Glyph, FT_BBox*);
  alias FT_Glyph_CopyFunc = FT_Error function (FT_Glyph, FT_Glyph);
  alias FT_Glyph_PrepareFunc = FT_Error function (FT_Glyph, FT_GlyphSlot);
}

struct FT_Glyph_Class {  // typedef'd in ftglyph.h
  FT_Long glyph_size;
  FT_Glyph_Format glyph_format;
  FT_Glyph_InitFunc glyph_init;
  FT_Glyph_DoneFunc glyph_done;
  FT_Glyph_CopyFunc glyph_copy;
  FT_Glyph_TransformFunc glyph_transform;
  FT_Glyph_GetBBoxFunc glyph_bbox;
  FT_Glyph_PrepareFunc glyph_prepare;
}

extern(C) nothrow {
  alias FT_Renderer_RenderFunc = FT_Error function (FT_Renderer, FT_GlyphSlot, FT_UInt, const(FT_Vector)*);
  alias FT_Renderer_TransformFunc = FT_Error function (FT_Renderer, FT_GlyphSlot, const(FT_Matrix)*, const(FT_Vector)*);
  alias FT_Renderer_GetCBoxFunc = void function (FT_Renderer, FT_GlyphSlot, FT_BBox*);
  alias FT_Renderer_SetModeFunc = FT_Error function (FT_Renderer, FT_ULong, FT_Pointer);
}

struct FT_Renderer_Class {
  FT_Module_Class root;
  FT_Glyph_Format glyph_format;
  FT_Renderer_RenderFunc render_glyph;
  FT_Renderer_TransformFunc transform_glyph;
  FT_Renderer_GetCBoxFunc get_glyph_cbox;
  FT_Renderer_SetModeFunc set_mode;
  FT_Raster_Funcs* raster_class;
}

// ftsnames.h
struct FT_SfntName {
  FT_UShort platform_id;
  FT_UShort encoding_id;
  FT_UShort language_id;
  FT_UShort name_id;
  FT_Byte* string;
  FT_UInt string_len;
}

enum FT_PARAM_TAG_IGNORE_PREFERRED_FAMILY = FT_MAKE_TAG('i','g','p','f');
enum FT_PARAM_TAG_IGNORE_PREFERRED_SUBFAMILY = FT_MAKE_TAG('i','g','p','s');

// ftstroke.h
struct FT_StrokerRec;
alias FT_Stroker = FT_StrokerRec*;

alias FT_Stroker_LineJoin = int;
enum {
  FT_STROKER_LINEJOIN_ROUND = 0,
  FT_STROKER_LINEJOIN_BEVEL,
  FT_STROKER_LINEJOIN_MITER
}

alias FT_Stroker_LineCap = int;
enum {
  FT_STROKER_LINECAP_BUTT = 0,
  FT_STROKER_LINECAP_ROUND,
  FT_STROKER_LINECAP_SQUARE
}

alias FT_StrokerBorder = int;
enum {
  FT_STROKER_BORDER_LEFT = 0,
  FT_STROKER_BORDER_RIGHT
}

// ftsystem.h
alias FT_Memory = FT_MemoryRec*;

extern(C) nothrow {
  alias FT_Alloc_Func = void* function (FT_Memory, c_long);
  alias FT_Free_Func = void  function (FT_Memory, void*);
  alias FT_Realloc_Func = void* function (FT_Memory, c_long, c_long, void*);
}

struct FT_MemoryRec {
  void* user;
  FT_Alloc_Func alloc;
  FT_Free_Func free;
  FT_Realloc_Func realloc;
}

alias FT_Stream = FT_StreamRec*;

union FT_StreamDesc {
  int value;
  void* pointer;
}

extern(C) nothrow {
  alias FT_Stream_IoFunc = c_ulong function (FT_Stream, c_ulong, ubyte*, c_ulong);
  alias FT_Stream_CloseFunc = void function (FT_Stream);
}

struct FT_StreamRec {
  ubyte* base;
  c_ulong size;
  c_ulong pos;
  FT_StreamDesc descriptor;
  FT_StreamDesc pathname;
  FT_Stream_IoFunc read;
  FT_Stream_CloseFunc close;
  FT_Memory memory;
  ubyte* cursor;
  ubyte* limit;
}

// fttrigon.h
alias FT_Angle = FT_Fixed;

enum {
  FT_ANGLE_PI  = 180<<16,
  FT_ANGLE_2PI = FT_ANGLE_PI*2,
  FT_ANGLE_PI2 = FT_ANGLE_PI/2,
  FT_ANGLE_PI4 = FT_ANGLE_PI/4
}

// ftttdrv.h
enum TT_INTERPRETER_VERSION_35 = 35;
enum TT_INTERPRETER_VERSION_38 = 38;

// ftwinfnt.h
enum FT_WinFNT_ID_CP1252 = 0;
enum FT_WinFNT_ID_DEFAULT = 1;
enum FT_WinFNT_ID_SYMBOL = 2;
enum FT_WinFNT_ID_MAC = 77;
enum FT_WinFNT_ID_CP932 = 128;
enum FT_WinFNT_ID_CP949 = 129;
enum FT_WinFNT_ID_CP1361 = 130;
enum FT_WinFNT_ID_CP936 = 134;
enum FT_WinFNT_ID_CP950 = 136;
enum FT_WinFNT_ID_CP1253 = 161;
enum FT_WinFNT_ID_CP1254 = 162;
enum FT_WinFNT_ID_CP1258 = 163;
enum FT_WinFNT_ID_CP1255 = 177;
enum FT_WinFNT_ID_CP1256 = 178;
enum FT_WinFNT_ID_CP1257 = 186;
enum FT_WinFNT_ID_CP1251 = 204;
enum FT_WinFNT_ID_CP874 = 222;
enum FT_WinFNT_ID_CP1250 = 238;
enum FT_WinFNT_ID_OEM = 255;


struct FT_WinFNT_HeaderRec {
  FT_UShort _version;
  FT_ULong file_size;
  FT_Byte[60] copyright;
  FT_UShort file_type;
  FT_UShort nominal_point_size;
  FT_UShort vertical_resolution;
  FT_UShort horizontal_resolution;
  FT_UShort ascent;
  FT_UShort internal_leading;
  FT_UShort external_leading;
  FT_Byte italic;
  FT_Byte underline;
  FT_Byte strike_out;
  FT_UShort weight;
  FT_Byte charset;
  FT_UShort pixel_width;
  FT_UShort pixel_height;
  FT_Byte pitch_and_family;
  FT_UShort avg_width;
  FT_UShort max_width;
  FT_Byte first_char;
  FT_Byte last_char;
  FT_Byte default_char;
  FT_Byte break_char;
  FT_UShort bytes_per_row;
  FT_ULong device_offset;
  FT_ULong face_name_offset;
  FT_ULong bits_pointer;
  FT_ULong bits_offset;
  FT_Byte reserved;
  FT_ULong flags;
  FT_UShort A_space;
  FT_UShort B_space;
  FT_UShort C_space;
  FT_UShort color_table_offset;
  FT_ULong[4] reserved1;
}

alias FT_WinFNT_Header = FT_WinFNT_HeaderRec*;

// t1tables.h
struct PS_FontInfoRec {
  FT_String* _version;
  FT_String* notice;
  FT_String* full_name;
  FT_String* family_name;
  FT_String* weight;
  FT_Long italic_angle;
  FT_Bool is_fixed_pitch;
  FT_Short underline_position;
  FT_UShort underline_thickness;
}

alias PS_FontInfo = PS_FontInfoRec*;

struct PS_PrivateRec {
  FT_Int unique_id;
  FT_Int lenIV;
  FT_Byte num_blue_values;
  FT_Byte num_other_blues;
  FT_Byte num_family_blues;
  FT_Byte num_family_other_blues;
  FT_Short[14] blue_values;
  FT_Short[10] other_blues;
  FT_Short[14] family_blues;
  FT_Short[10] family_other_blues;
  FT_Fixed blue_scale;
  FT_Int blue_shift;
  FT_Int blue_fuzz;
  FT_UShort[1] standard_width;
  FT_UShort[1] standard_height;
  FT_Byte num_snap_widths;
  FT_Byte num_snap_heights;
  FT_Bool force_bold;
  FT_Bool round_stem_up;
  FT_Short[13] snap_widths;
  FT_Short[13] snap_heights;
  FT_Fixed expansion_factor;
  FT_Long language_group;
  FT_Long password;
  FT_Short[2] min_feature;
}

alias PS_Private = PS_PrivateRec*;

alias T1_Blend_Flags = int;
enum {
  T1_BLEND_UNDERLINE_POSITION = 0,
  T1_BLEND_UNDERLINE_THICKNESS,
  T1_BLEND_ITALIC_ANGLE,
  T1_BLEND_BLUE_VALUES,
  T1_BLEND_OTHER_BLUES,
  T1_BLEND_STANDARD_WIDTH,
  T1_BLEND_STANDARD_HEIGHT,
  T1_BLEND_STEM_SNAP_WIDTHS,
  T1_BLEND_STEM_SNAP_HEIGHTS,
  T1_BLEND_BLUE_SCALE,
  T1_BLEND_BLUE_SHIFT,
  T1_BLEND_FAMILY_BLUES,
  T1_BLEND_FAMILY_OTHER_BLUES,
  T1_BLEND_FORCE_BOLD,
  T1_BLEND_MAX
}

enum T1_MAX_MM_DESIGNS = 16;
enum T1_MAX_MM_AXIS = 4;
enum T1_MAX_MM_MAP_POINTS = 20;

struct PS_DesignMapRec {
  FT_Byte num_points;
  FT_Long* design_points;
  FT_Fixed* blend_points;
}

alias PS_DesignMap = PS_DesignMapRec*;

struct PS_BlendRec {
  FT_UInt num_designs;
  FT_UInt num_axis;
  FT_String*[T1_MAX_MM_AXIS] axis_names;
  FT_Fixed*[T1_MAX_MM_DESIGNS] design_pos;
  PS_DesignMapRec[T1_MAX_MM_AXIS] design_map;
  FT_Fixed* weight_vector;
  FT_Fixed* default_weight_vector;
  PS_FontInfo[T1_MAX_MM_DESIGNS+1] font_infos;
  PS_Private[T1_MAX_MM_DESIGNS+1] privates;
  FT_ULong blend_bitflags;
  FT_BBox*[T1_MAX_MM_DESIGNS+1] bboxes;
  FT_UInt[T1_MAX_MM_DESIGNS] default_design_vector;
  FT_UInt num_default_design_vector;
}

alias PS_Blend = PS_BlendRec*;

struct CID_FaceDictRec {
  PS_PrivateRec private_dict;
  FT_UInt len_buildchar;
  FT_Fixed forcebold_threshold;
  FT_Pos stroke_width;
  FT_Fixed expansion_factor;
  FT_Byte paint_type;
  FT_Byte font_type;
  FT_Matrix font_matrix;
  FT_Vector font_offset;
  FT_UInt num_subrs;
  FT_ULong subrmap_offset;
  FT_Int sd_bytes;
}

alias CID_FaceDict = CID_FaceDictRec*;

struct CID_FaceInfoRec {
  FT_String* cid_font_name;
  FT_Fixed cid_version;
  FT_Int cid_font_type;
  FT_String* registry;
  FT_String* ordering;
  FT_Int supplement;
  PS_FontInfoRec font_info;
  FT_BBox font_bbox;
  FT_ULong uid_base;
  FT_Int num_xuid;
  FT_ULong[16] xuid;
  FT_ULong cidmap_offset;
  FT_Int fd_bytes;
  FT_Int gd_bytes;
  FT_ULong cid_count;
  FT_Int num_dicts;
  CID_FaceDict font_dicts;
  FT_ULong data_offset;
}

alias CID_FaceInfo = CID_FaceInfoRec*;

alias T1_EncodingType = int;
enum {
  T1_ENCODING_TYPE_NONE = 0,
  T1_ENCODING_TYPE_ARRAY,
  T1_ENCODING_TYPE_STANDARD,
  T1_ENCODING_TYPE_ISOLATIN1,
  T1_ENCODING_TYPE_EXPERT,
}

alias PS_Dict_Keys = int;
enum {
  PS_DICT_FONT_TYPE,
  PS_DICT_FONT_MATRIX,
  PS_DICT_FONT_BBOX,
  PS_DICT_PAINT_TYPE,
  PS_DICT_FONT_NAME,
  PS_DICT_UNIQUE_ID,
  PS_DICT_NUM_CHAR_STRINGS,
  PS_DICT_CHAR_STRING_KEY,
  PS_DICT_CHAR_STRING,
  PS_DICT_ENCODING_TYPE,
  PS_DICT_ENCODING_ENTRY,

  PS_DICT_NUM_SUBRS,
  PS_DICT_SUBR,
  PS_DICT_STD_HW,
  PS_DICT_STD_VW,
  PS_DICT_NUM_BLUE_VALUES,
  PS_DICT_BLUE_VALUE,
  PS_DICT_BLUE_FUZZ,
  PS_DICT_NUM_OTHER_BLUES,
  PS_DICT_OTHER_BLUE,
  PS_DICT_NUM_FAMILY_BLUES,
  PS_DICT_FAMILY_BLUE,
  PS_DICT_NUM_FAMILY_OTHER_BLUES,
  PS_DICT_FAMILY_OTHER_BLUE,
  PS_DICT_BLUE_SCALE,
  PS_DICT_BLUE_SHIFT,
  PS_DICT_NUM_STEM_SNAP_H,
  PS_DICT_STEM_SNAP_H,
  PS_DICT_NUM_STEM_SNAP_V,
  PS_DICT_STEM_SNAP_V,
  PS_DICT_FORCE_BOLD,
  PS_DICT_RND_STEM_UP,
  PS_DICT_MIN_FEATURE,
  PS_DICT_LEN_IV,
  PS_DICT_PASSWORD,
  PS_DICT_LANGUAGE_GROUP,

  PS_DICT_VERSION,
  PS_DICT_NOTICE,
  PS_DICT_FULL_NAME,
  PS_DICT_FAMILY_NAME,
  PS_DICT_WEIGHT,
  PS_DICT_IS_FIXED_PITCH,
  PS_DICT_UNDERLINE_POSITION,
  PS_DICT_UNDERLINE_THICKNESS,
  PS_DICT_FS_TYPE,
  PS_DICT_ITALIC_ANGLE,

  PS_DICT_MAX = PS_DICT_ITALIC_ANGLE
}

// ttnameid.h
enum TT_PLATFORM_APPLE_UNICODE = 0;
enum TT_PLATFORM_MACINTOSH = 1;
enum TT_PLATFORM_MICROSOFT = 3;
enum TT_PLATFORM_CUSTOM = 4;
enum TT_PLATFORM_ADOBE = 7;

enum TT_APPLE_ID_DEFAULT = 0;
enum TT_APPLE_ID_UNICODE_1_1 = 1;
enum TT_APPLE_ID_UNICODE_2_0 = 3;
enum TT_APPLE_ID_UNICODE_32 = 4;
enum TT_APPLE_ID_VARIANT_SELECTOR = 5;

enum TT_MAC_ID_ROMAN = 0;
enum TT_MAC_ID_JAPANESE = 1;
enum TT_MAC_ID_TRADITIONAL_CHINESE = 2;
enum TT_MAC_ID_KOREAN = 3;
enum TT_MAC_ID_ARABIC = 4;
enum TT_MAC_ID_HEBREW = 5;
enum TT_MAC_ID_GREEK = 6;
enum TT_MAC_ID_RUSSIAN = 7;
enum TT_MAC_ID_RSYMBOL = 8;
enum TT_MAC_ID_DEVANAGARI = 9;
enum TT_MAC_ID_GURMUKHI = 10;
enum TT_MAC_ID_GUJARATI = 11;
enum TT_MAC_ID_ORIYA = 12;
enum TT_MAC_ID_BENGALI = 13;
enum TT_MAC_ID_TAMIL = 14;
enum TT_MAC_ID_TELUGU = 15;
enum TT_MAC_ID_KANNADA = 16;
enum TT_MAC_ID_MALAYALAM = 17;
enum TT_MAC_ID_SINHALESE = 18;
enum TT_MAC_ID_BURMESE = 19;
enum TT_MAC_ID_KHMER = 20;
enum TT_MAC_ID_THAI = 21;
enum TT_MAC_ID_LAOTIAN = 22;
enum TT_MAC_ID_GEORGIAN = 23;
enum TT_MAC_ID_ARMENIAN = 24;
enum TT_MAC_ID_MALDIVIAN = 25;
enum TT_MAC_ID_SIMPLIFIED_CHINESE = 25;
enum TT_MAC_ID_TIBETAN = 26;
enum TT_MAC_ID_MONGOLIAN = 27;
enum TT_MAC_ID_GEEZ = 28;
enum TT_MAC_ID_SLAVIC = 29;
enum TT_MAC_ID_VIETNAMESE = 30;
enum TT_MAC_ID_SINDHI = 31;
enum TT_MAC_ID_UNINTERP = 32;

enum TT_ISO_ID_7BIT_ASCII = 0;
enum TT_ISO_ID_10646 = 1;
enum TT_ISO_ID_8859_1 = 2;

enum TT_MS_ID_SYMBOL_CS = 0;
enum TT_MS_ID_UNICODE_CS = 1;
enum TT_MS_ID_SJIS = 2;
enum TT_MS_ID_GB2312 = 3;
enum TT_MS_ID_BIG_5 = 4;
enum TT_MS_ID_WANSUNG = 5;
enum TT_MS_ID_JOHAB = 6;
enum TT_MS_ID_UCS_4 = 10;

enum TT_ADOBE_ID_STANDARD = 0;
enum TT_ADOBE_ID_EXPERT = 1;
enum TT_ADOBE_ID_CUSTOM = 2;
enum TT_ADOBE_ID_LATIN_1 = 3;

enum TT_MAC_LANGID_ENGLISH = 0;
enum TT_MAC_LANGID_FRENCH = 1;
enum TT_MAC_LANGID_GERMAN = 2;
enum TT_MAC_LANGID_ITALIAN = 3;
enum TT_MAC_LANGID_DUTCH = 4;
enum TT_MAC_LANGID_SWEDISH = 5;
enum TT_MAC_LANGID_SPANISH = 6;
enum TT_MAC_LANGID_DANISH = 7;
enum TT_MAC_LANGID_PORTUGUESE = 8;
enum TT_MAC_LANGID_NORWEGIAN = 9;
enum TT_MAC_LANGID_HEBREW = 10;
enum TT_MAC_LANGID_JAPANESE = 11;
enum TT_MAC_LANGID_ARABIC = 12;
enum TT_MAC_LANGID_FINNISH = 13;
enum TT_MAC_LANGID_GREEK = 14;
enum TT_MAC_LANGID_ICELANDIC = 15;
enum TT_MAC_LANGID_MALTESE = 16;
enum TT_MAC_LANGID_TURKISH = 17;
enum TT_MAC_LANGID_CROATIAN = 18;
enum TT_MAC_LANGID_CHINESE_TRADITIONAL = 19;
enum TT_MAC_LANGID_URDU = 20;
enum TT_MAC_LANGID_HINDI = 21;
enum TT_MAC_LANGID_THAI = 22;
enum TT_MAC_LANGID_KOREAN = 23;
enum TT_MAC_LANGID_LITHUANIAN = 24;
enum TT_MAC_LANGID_POLISH = 25;
enum TT_MAC_LANGID_HUNGARIAN = 26;
enum TT_MAC_LANGID_ESTONIAN = 27;
enum TT_MAC_LANGID_LETTISH = 28;
enum TT_MAC_LANGID_SAAMISK = 29;
enum TT_MAC_LANGID_FAEROESE = 30;
enum TT_MAC_LANGID_FARSI = 31;
enum TT_MAC_LANGID_RUSSIAN = 32;
enum TT_MAC_LANGID_CHINESE_SIMPLIFIED = 33;
enum TT_MAC_LANGID_FLEMISH = 34;
enum TT_MAC_LANGID_IRISH = 35;
enum TT_MAC_LANGID_ALBANIAN = 36;
enum TT_MAC_LANGID_ROMANIAN = 37;
enum TT_MAC_LANGID_CZECH = 38;
enum TT_MAC_LANGID_SLOVAK = 39;
enum TT_MAC_LANGID_SLOVENIAN = 40;
enum TT_MAC_LANGID_YIDDISH = 41;
enum TT_MAC_LANGID_SERBIAN = 42;
enum TT_MAC_LANGID_MACEDONIAN = 43;
enum TT_MAC_LANGID_BULGARIAN = 44;
enum TT_MAC_LANGID_UKRAINIAN = 45;
enum TT_MAC_LANGID_BYELORUSSIAN = 46;
enum TT_MAC_LANGID_UZBEK = 47;
enum TT_MAC_LANGID_KAZAKH = 48;
enum TT_MAC_LANGID_AZERBAIJANI = 49;
enum TT_MAC_LANGID_AZERBAIJANI_CYRILLIC_SCRIPT = 49;
enum TT_MAC_LANGID_AZERBAIJANI_ARABIC_SCRIPT = 50;
enum TT_MAC_LANGID_ARMENIAN = 51;
enum TT_MAC_LANGID_GEORGIAN = 52;
enum TT_MAC_LANGID_MOLDAVIAN = 53;
enum TT_MAC_LANGID_KIRGHIZ = 54;
enum TT_MAC_LANGID_TAJIKI = 55;
enum TT_MAC_LANGID_TURKMEN = 56;
enum TT_MAC_LANGID_MONGOLIAN = 57;
enum TT_MAC_LANGID_MONGOLIAN_MONGOLIAN_SCRIPT = 57;
enum TT_MAC_LANGID_MONGOLIAN_CYRILLIC_SCRIPT = 58;
enum TT_MAC_LANGID_PASHTO = 59;
enum TT_MAC_LANGID_KURDISH = 60;
enum TT_MAC_LANGID_KASHMIRI = 61;
enum TT_MAC_LANGID_SINDHI = 62;
enum TT_MAC_LANGID_TIBETAN = 63;
enum TT_MAC_LANGID_NEPALI = 64;
enum TT_MAC_LANGID_SANSKRIT = 65;
enum TT_MAC_LANGID_MARATHI = 66;
enum TT_MAC_LANGID_BENGALI = 67;
enum TT_MAC_LANGID_ASSAMESE = 68;
enum TT_MAC_LANGID_GUJARATI = 69;
enum TT_MAC_LANGID_PUNJABI = 70;
enum TT_MAC_LANGID_ORIYA = 71;
enum TT_MAC_LANGID_MALAYALAM = 72;
enum TT_MAC_LANGID_KANNADA = 73;
enum TT_MAC_LANGID_TAMIL = 74;
enum TT_MAC_LANGID_TELUGU = 75;
enum TT_MAC_LANGID_SINHALESE = 76;
enum TT_MAC_LANGID_BURMESE = 77;
enum TT_MAC_LANGID_KHMER = 78;
enum TT_MAC_LANGID_LAO = 79;
enum TT_MAC_LANGID_VIETNAMESE = 80;
enum TT_MAC_LANGID_INDONESIAN = 81;
enum TT_MAC_LANGID_TAGALOG = 82;
enum TT_MAC_LANGID_MALAY_ROMAN_SCRIPT = 83;
enum TT_MAC_LANGID_MALAY_ARABIC_SCRIPT = 84;
enum TT_MAC_LANGID_AMHARIC = 85;
enum TT_MAC_LANGID_TIGRINYA = 86;
enum TT_MAC_LANGID_GALLA = 87;
enum TT_MAC_LANGID_SOMALI = 88;
enum TT_MAC_LANGID_SWAHILI = 89;
enum TT_MAC_LANGID_RUANDA = 90;
enum TT_MAC_LANGID_RUNDI = 91;
enum TT_MAC_LANGID_CHEWA = 92;
enum TT_MAC_LANGID_MALAGASY = 93;
enum TT_MAC_LANGID_ESPERANTO = 94;
enum TT_MAC_LANGID_WELSH = 128;
enum TT_MAC_LANGID_BASQUE = 129;
enum TT_MAC_LANGID_CATALAN = 130;
enum TT_MAC_LANGID_LATIN = 131;
enum TT_MAC_LANGID_QUECHUA = 132;
enum TT_MAC_LANGID_GUARANI = 133;
enum TT_MAC_LANGID_AYMARA = 134;
enum TT_MAC_LANGID_TATAR = 135;
enum TT_MAC_LANGID_UIGHUR = 136;
enum TT_MAC_LANGID_DZONGKHA = 137;
enum TT_MAC_LANGID_JAVANESE = 138;
enum TT_MAC_LANGID_SUNDANESE = 139;
enum TT_MAC_LANGID_GALICIAN = 140;
enum TT_MAC_LANGID_AFRIKAANS = 141;
enum TT_MAC_LANGID_BRETON = 142;
enum TT_MAC_LANGID_INUKTITUT = 143;
enum TT_MAC_LANGID_SCOTTISH_GAELIC = 144;
enum TT_MAC_LANGID_MANX_GAELIC = 145;
enum TT_MAC_LANGID_IRISH_GAELIC = 146;
enum TT_MAC_LANGID_TONGAN = 147;
enum TT_MAC_LANGID_GREEK_POLYTONIC = 148;
enum TT_MAC_LANGID_GREELANDIC = 149;
enum TT_MAC_LANGID_AZERBAIJANI_ROMAN_SCRIPT = 150;

enum TT_MS_LANGID_ARABIC_GENERAL = 0x0001;
enum TT_MS_LANGID_ARABIC_SAUDI_ARABIA = 0x0401;
enum TT_MS_LANGID_ARABIC_IRAQ = 0x0801;
enum TT_MS_LANGID_ARABIC_EGYPT = 0x0c01;
enum TT_MS_LANGID_ARABIC_LIBYA = 0x1001;
enum TT_MS_LANGID_ARABIC_ALGERIA = 0x1401;
enum TT_MS_LANGID_ARABIC_MOROCCO = 0x1801;
enum TT_MS_LANGID_ARABIC_TUNISIA = 0x1c01;
enum TT_MS_LANGID_ARABIC_OMAN = 0x2001;
enum TT_MS_LANGID_ARABIC_YEMEN = 0x2401;
enum TT_MS_LANGID_ARABIC_SYRIA = 0x2801;
enum TT_MS_LANGID_ARABIC_JORDAN = 0x2c01;
enum TT_MS_LANGID_ARABIC_LEBANON = 0x3001;
enum TT_MS_LANGID_ARABIC_KUWAIT = 0x3401;
enum TT_MS_LANGID_ARABIC_UAE = 0x3801;
enum TT_MS_LANGID_ARABIC_BAHRAIN = 0x3c01;
enum TT_MS_LANGID_ARABIC_QATAR = 0x4001;
enum TT_MS_LANGID_BULGARIAN_BULGARIA = 0x0402;
enum TT_MS_LANGID_CATALAN_SPAIN = 0x0403;
enum TT_MS_LANGID_CHINESE_GENERAL = 0x0004;
enum TT_MS_LANGID_CHINESE_TAIWAN = 0x0404;
enum TT_MS_LANGID_CHINESE_PRC = 0x0804;
enum TT_MS_LANGID_CHINESE_HONG_KONG = 0x0c04;
enum TT_MS_LANGID_CHINESE_SINGAPORE = 0x1004;
enum TT_MS_LANGID_CHINESE_MACAU = 0x1404;
enum TT_MS_LANGID_CZECH_CZECH_REPUBLIC = 0x0405;
enum TT_MS_LANGID_DANISH_DENMARK = 0x0406;
enum TT_MS_LANGID_GERMAN_GERMANY = 0x0407;
enum TT_MS_LANGID_GERMAN_SWITZERLAND = 0x0807;
enum TT_MS_LANGID_GERMAN_AUSTRIA = 0x0c07;
enum TT_MS_LANGID_GERMAN_LUXEMBOURG = 0x1007;
enum TT_MS_LANGID_GERMAN_LIECHTENSTEI = 0x1407;
enum TT_MS_LANGID_GREEK_GREECE = 0x0408;
enum TT_MS_LANGID_ENGLISH_GENERAL = 0x0009;
enum TT_MS_LANGID_ENGLISH_UNITED_STATES = 0x0409;
enum TT_MS_LANGID_ENGLISH_UNITED_KINGDOM = 0x0809;
enum TT_MS_LANGID_ENGLISH_AUSTRALIA = 0x0c09;
enum TT_MS_LANGID_ENGLISH_CANADA = 0x1009;
enum TT_MS_LANGID_ENGLISH_NEW_ZEALAND = 0x1409;
enum TT_MS_LANGID_ENGLISH_IRELAND = 0x1809;
enum TT_MS_LANGID_ENGLISH_SOUTH_AFRICA = 0x1c09;
enum TT_MS_LANGID_ENGLISH_JAMAICA = 0x2009;
enum TT_MS_LANGID_ENGLISH_CARIBBEAN = 0x2409;
enum TT_MS_LANGID_ENGLISH_BELIZE = 0x2809;
enum TT_MS_LANGID_ENGLISH_TRINIDAD = 0x2c09;
enum TT_MS_LANGID_ENGLISH_ZIMBABWE = 0x3009;
enum TT_MS_LANGID_ENGLISH_PHILIPPINES = 0x3409;
enum TT_MS_LANGID_ENGLISH_INDONESIA = 0x3809;
enum TT_MS_LANGID_ENGLISH_HONG_KONG = 0x3c09;
enum TT_MS_LANGID_ENGLISH_INDIA = 0x4009;
enum TT_MS_LANGID_ENGLISH_MALAYSIA = 0x4409;
enum TT_MS_LANGID_ENGLISH_SINGAPORE = 0x4809;
enum TT_MS_LANGID_SPANISH_SPAIN_TRADITIONAL_SORT = 0x040a;
enum TT_MS_LANGID_SPANISH_MEXICO = 0x080a;
enum TT_MS_LANGID_SPANISH_SPAIN_INTERNATIONAL_SORT = 0x0c0a;
enum TT_MS_LANGID_SPANISH_GUATEMALA = 0x100a;
enum TT_MS_LANGID_SPANISH_COSTA_RICA = 0x140a;
enum TT_MS_LANGID_SPANISH_PANAMA = 0x180a;
enum TT_MS_LANGID_SPANISH_DOMINICAN_REPUBLIC = 0x1c0a;
enum TT_MS_LANGID_SPANISH_VENEZUELA = 0x200a;
enum TT_MS_LANGID_SPANISH_COLOMBIA = 0x240a;
enum TT_MS_LANGID_SPANISH_PERU = 0x280a;
enum TT_MS_LANGID_SPANISH_ARGENTINA = 0x2c0a;
enum TT_MS_LANGID_SPANISH_ECUADOR = 0x300a;
enum TT_MS_LANGID_SPANISH_CHILE = 0x340a;
enum TT_MS_LANGID_SPANISH_URUGUAY = 0x380a;
enum TT_MS_LANGID_SPANISH_PARAGUAY = 0x3c0a;
enum TT_MS_LANGID_SPANISH_BOLIVIA = 0x400a;
enum TT_MS_LANGID_SPANISH_EL_SALVADOR = 0x440a;
enum TT_MS_LANGID_SPANISH_HONDURAS = 0x480a;
enum TT_MS_LANGID_SPANISH_NICARAGUA = 0x4c0a;
enum TT_MS_LANGID_SPANISH_PUERTO_RICO = 0x500a;
enum TT_MS_LANGID_SPANISH_UNITED_STATES = 0x540a;
enum TT_MS_LANGID_SPANISH_LATIN_AMERICA = 0xE40aU;
enum TT_MS_LANGID_FINNISH_FINLAND = 0x040b;
enum TT_MS_LANGID_FRENCH_FRANCE = 0x040c;
enum TT_MS_LANGID_FRENCH_BELGIUM = 0x080c;
enum TT_MS_LANGID_FRENCH_CANADA = 0x0c0c;
enum TT_MS_LANGID_FRENCH_SWITZERLAND = 0x100c;
enum TT_MS_LANGID_FRENCH_LUXEMBOURG = 0x140c;
enum TT_MS_LANGID_FRENCH_MONACO = 0x180c;
enum TT_MS_LANGID_FRENCH_WEST_INDIES = 0x1c0c;
enum TT_MS_LANGID_FRENCH_REUNION = 0x200c;
enum TT_MS_LANGID_FRENCH_CONGO = 0x240c;
enum TT_MS_LANGID_FRENCH_ZAIRE = TT_MS_LANGID_FRENCH_CONGO;
enum TT_MS_LANGID_FRENCH_SENEGAL = 0x280c;
enum TT_MS_LANGID_FRENCH_CAMEROON = 0x2c0c;
enum TT_MS_LANGID_FRENCH_COTE_D_IVOIRE = 0x300c;
enum TT_MS_LANGID_FRENCH_MALI = 0x340c;
enum TT_MS_LANGID_FRENCH_MOROCCO = 0x380c;
enum TT_MS_LANGID_FRENCH_HAITI = 0x3c0c;
enum TT_MS_LANGID_FRENCH_NORTH_AFRICA = 0xE40cU;
enum TT_MS_LANGID_HEBREW_ISRAEL = 0x040d;
enum TT_MS_LANGID_HUNGARIAN_HUNGARY = 0x040e;
enum TT_MS_LANGID_ICELANDIC_ICELAND = 0x040f;
enum TT_MS_LANGID_ITALIAN_ITALY = 0x0410;
enum TT_MS_LANGID_ITALIAN_SWITZERLAND = 0x0810;
enum TT_MS_LANGID_JAPANESE_JAPAN = 0x0411;
enum TT_MS_LANGID_KOREAN_EXTENDED_WANSUNG_KOREA = 0x0412;
enum TT_MS_LANGID_KOREAN_JOHAB_KOREA = 0x0812;
enum TT_MS_LANGID_DUTCH_NETHERLANDS = 0x0413;
enum TT_MS_LANGID_DUTCH_BELGIUM = 0x0813;
enum TT_MS_LANGID_NORWEGIAN_NORWAY_BOKMAL = 0x0414;
enum TT_MS_LANGID_NORWEGIAN_NORWAY_NYNORSK = 0x0814;
enum TT_MS_LANGID_POLISH_POLAND = 0x0415;
enum TT_MS_LANGID_PORTUGUESE_BRAZIL = 0x0416;
enum TT_MS_LANGID_PORTUGUESE_PORTUGAL = 0x0816;
enum TT_MS_LANGID_RHAETO_ROMANIC_SWITZERLAND = 0x0417;
enum TT_MS_LANGID_ROMANIAN_ROMANIA = 0x0418;
enum TT_MS_LANGID_MOLDAVIAN_MOLDAVIA = 0x0818;
enum TT_MS_LANGID_RUSSIAN_RUSSIA = 0x0419;
enum TT_MS_LANGID_RUSSIAN_MOLDAVIA = 0x0819;
enum TT_MS_LANGID_CROATIAN_CROATIA = 0x041a;
enum TT_MS_LANGID_SERBIAN_SERBIA_LATIN = 0x081a;
enum TT_MS_LANGID_SERBIAN_SERBIA_CYRILLIC = 0x0c1a;
enum TT_MS_LANGID_CROATIAN_BOSNIA_HERZEGOVINA = 0x101a;
enum TT_MS_LANGID_BOSNIAN_BOSNIA_HERZEGOVINA = 0x141a;
enum TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_LATIN = 0x181a;
enum TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_CYRILLIC = 0x181a;
enum TT_MS_LANGID_SLOVAK_SLOVAKIA = 0x041b;
enum TT_MS_LANGID_ALBANIAN_ALBANIA = 0x041c;
enum TT_MS_LANGID_SWEDISH_SWEDEN = 0x041d;
enum TT_MS_LANGID_SWEDISH_FINLAND = 0x081d;
enum TT_MS_LANGID_THAI_THAILAND = 0x041e;
enum TT_MS_LANGID_TURKISH_TURKEY = 0x041f;
enum TT_MS_LANGID_URDU_PAKISTAN = 0x0420;
enum TT_MS_LANGID_URDU_INDIA = 0x0820;
enum TT_MS_LANGID_INDONESIAN_INDONESIA = 0x0421;
enum TT_MS_LANGID_UKRAINIAN_UKRAINE = 0x0422;
enum TT_MS_LANGID_BELARUSIAN_BELARUS = 0x0423;
enum TT_MS_LANGID_SLOVENE_SLOVENIA = 0x0424;
enum TT_MS_LANGID_ESTONIAN_ESTONIA = 0x0425;
enum TT_MS_LANGID_LATVIAN_LATVIA = 0x0426;
enum TT_MS_LANGID_LITHUANIAN_LITHUANIA = 0x0427;
enum TT_MS_LANGID_CLASSIC_LITHUANIAN_LITHUANIA = 0x0827;
enum TT_MS_LANGID_TAJIK_TAJIKISTAN = 0x0428;
enum TT_MS_LANGID_FARSI_IRAN = 0x0429;
enum TT_MS_LANGID_VIETNAMESE_VIET_NAM = 0x042a;
enum TT_MS_LANGID_ARMENIAN_ARMENIA = 0x042b;
enum TT_MS_LANGID_AZERI_AZERBAIJAN_LATIN = 0x042c;
enum TT_MS_LANGID_AZERI_AZERBAIJAN_CYRILLIC = 0x082c;
enum TT_MS_LANGID_BASQUE_SPAIN = 0x042d;
enum TT_MS_LANGID_SORBIAN_GERMANY = 0x042e;
enum TT_MS_LANGID_MACEDONIAN_MACEDONIA = 0x042f;
enum TT_MS_LANGID_SUTU_SOUTH_AFRICA = 0x0430;
enum TT_MS_LANGID_TSONGA_SOUTH_AFRICA = 0x0431;
enum TT_MS_LANGID_TSWANA_SOUTH_AFRICA = 0x0432;
enum TT_MS_LANGID_VENDA_SOUTH_AFRICA = 0x0433;
enum TT_MS_LANGID_XHOSA_SOUTH_AFRICA = 0x0434;
enum TT_MS_LANGID_ZULU_SOUTH_AFRICA = 0x0435;
enum TT_MS_LANGID_AFRIKAANS_SOUTH_AFRICA = 0x0436;
enum TT_MS_LANGID_GEORGIAN_GEORGIA = 0x0437;
enum TT_MS_LANGID_FAEROESE_FAEROE_ISLANDS = 0x0438;
enum TT_MS_LANGID_HINDI_INDIA = 0x0439;
enum TT_MS_LANGID_MALTESE_MALTA = 0x043a;
enum TT_MS_LANGID_SAMI_NORTHERN_NORWAY = 0x043b;
enum TT_MS_LANGID_SAMI_NORTHERN_SWEDEN = 0x083b;
enum TT_MS_LANGID_SAMI_NORTHERN_FINLAND = 0x0C3b;
enum TT_MS_LANGID_SAMI_LULE_NORWAY = 0x103b;
enum TT_MS_LANGID_SAMI_LULE_SWEDEN = 0x143b;
enum TT_MS_LANGID_SAMI_SOUTHERN_NORWAY = 0x183b;
enum TT_MS_LANGID_SAMI_SOUTHERN_SWEDEN = 0x1C3b;
enum TT_MS_LANGID_SAMI_SKOLT_FINLAND = 0x203b;
enum TT_MS_LANGID_SAMI_INARI_FINLAND = 0x243b;
enum TT_MS_LANGID_SAAMI_LAPONIA = 0x043b;
enum TT_MS_LANGID_SCOTTISH_GAELIC_UNITED_KINGDOM = 0x083c;
enum TT_MS_LANGID_IRISH_GAELIC_IRELAND = 0x043c;
enum TT_MS_LANGID_YIDDISH_GERMANY = 0x043d;
enum TT_MS_LANGID_MALAY_MALAYSIA = 0x043e;
enum TT_MS_LANGID_MALAY_BRUNEI_DARUSSALAM = 0x083e;
enum TT_MS_LANGID_KAZAK_KAZAKSTAN = 0x043f;
enum TT_MS_LANGID_KIRGHIZ_KIRGHIZSTAN = 0x0440;
enum TT_MS_LANGID_KIRGHIZ_KIRGHIZ_REPUBLIC = TT_MS_LANGID_KIRGHIZ_KIRGHIZSTAN;
enum TT_MS_LANGID_SWAHILI_KENYA = 0x0441;
enum TT_MS_LANGID_TURKMEN_TURKMENISTAN = 0x0442;
enum TT_MS_LANGID_UZBEK_UZBEKISTAN_LATIN = 0x0443;
enum TT_MS_LANGID_UZBEK_UZBEKISTAN_CYRILLIC = 0x0843;
enum TT_MS_LANGID_TATAR_TATARSTAN = 0x0444;
enum TT_MS_LANGID_BENGALI_INDIA = 0x0445;
enum TT_MS_LANGID_BENGALI_BANGLADESH = 0x0845;
enum TT_MS_LANGID_PUNJABI_INDIA = 0x0446;
enum TT_MS_LANGID_PUNJABI_ARABIC_PAKISTAN = 0x0846;
enum TT_MS_LANGID_GUJARATI_INDIA = 0x0447;
enum TT_MS_LANGID_ORIYA_INDIA = 0x0448;
enum TT_MS_LANGID_TAMIL_INDIA = 0x0449;
enum TT_MS_LANGID_TELUGU_INDIA = 0x044a;
enum TT_MS_LANGID_KANNADA_INDIA = 0x044b;
enum TT_MS_LANGID_MALAYALAM_INDIA = 0x044c;
enum TT_MS_LANGID_ASSAMESE_INDIA = 0x044d;
enum TT_MS_LANGID_MARATHI_INDIA = 0x044e;
enum TT_MS_LANGID_SANSKRIT_INDIA = 0x044f;
enum TT_MS_LANGID_MONGOLIAN_MONGOLIA = 0x0450;
enum TT_MS_LANGID_MONGOLIAN_MONGOLIA_MONGOLIAN = 0x0850;
enum TT_MS_LANGID_TIBETAN_CHINA = 0x0451;
enum TT_MS_LANGID_DZONGHKA_BHUTAN = 0x0851;
enum TT_MS_LANGID_TIBETAN_BHUTAN = TT_MS_LANGID_DZONGHKA_BHUTAN;
enum TT_MS_LANGID_WELSH_WALES = 0x0452;
enum TT_MS_LANGID_KHMER_CAMBODIA = 0x0453;
enum TT_MS_LANGID_LAO_LAOS = 0x0454;
enum TT_MS_LANGID_BURMESE_MYANMAR = 0x0455;
enum TT_MS_LANGID_GALICIAN_SPAIN = 0x0456;
enum TT_MS_LANGID_KONKANI_INDIA = 0x0457;
enum TT_MS_LANGID_MANIPURI_INDIA = 0x0458;
enum TT_MS_LANGID_SINDHI_INDIA = 0x0459;
enum TT_MS_LANGID_SINDHI_PAKISTAN = 0x0859;
enum TT_MS_LANGID_SYRIAC_SYRIA = 0x045a;
enum TT_MS_LANGID_SINHALESE_SRI_LANKA = 0x045b;
enum TT_MS_LANGID_CHEROKEE_UNITED_STATES = 0x045c;
enum TT_MS_LANGID_INUKTITUT_CANADA = 0x045d;
enum TT_MS_LANGID_AMHARIC_ETHIOPIA = 0x045e;
enum TT_MS_LANGID_TAMAZIGHT_MOROCCO = 0x045f;
enum TT_MS_LANGID_TAMAZIGHT_MOROCCO_LATIN = 0x085f;
enum TT_MS_LANGID_KASHMIRI_PAKISTAN = 0x0460;
enum TT_MS_LANGID_KASHMIRI_SASIA = 0x0860;
enum TT_MS_LANGID_KASHMIRI_INDIA = TT_MS_LANGID_KASHMIRI_SASIA;
enum TT_MS_LANGID_NEPALI_NEPAL = 0x0461;
enum TT_MS_LANGID_NEPALI_INDIA = 0x0861;
enum TT_MS_LANGID_FRISIAN_NETHERLANDS = 0x0462;
enum TT_MS_LANGID_PASHTO_AFGHANISTAN = 0x0463;
enum TT_MS_LANGID_FILIPINO_PHILIPPINES = 0x0464;
enum TT_MS_LANGID_DHIVEHI_MALDIVES = 0x0465;
enum TT_MS_LANGID_DIVEHI_MALDIVES = TT_MS_LANGID_DHIVEHI_MALDIVES;
enum TT_MS_LANGID_EDO_NIGERIA = 0x0466;
enum TT_MS_LANGID_FULFULDE_NIGERIA = 0x0467;
enum TT_MS_LANGID_HAUSA_NIGERIA = 0x0468;
enum TT_MS_LANGID_IBIBIO_NIGERIA = 0x0469;
enum TT_MS_LANGID_YORUBA_NIGERIA = 0x046a;
enum TT_MS_LANGID_QUECHUA_BOLIVIA = 0x046b;
enum TT_MS_LANGID_QUECHUA_ECUADOR = 0x086b;
enum TT_MS_LANGID_QUECHUA_PERU = 0x0c6b;
enum TT_MS_LANGID_SEPEDI_SOUTH_AFRICA = 0x046c;
enum TT_MS_LANGID_SOTHO_SOUTHERN_SOUTH_AFRICA = TT_MS_LANGID_SEPEDI_SOUTH_AFRICA;
enum TT_MS_LANGID_IGBO_NIGERIA = 0x0470;
enum TT_MS_LANGID_KANURI_NIGERIA = 0x0471;
enum TT_MS_LANGID_OROMO_ETHIOPIA = 0x0472;
enum TT_MS_LANGID_TIGRIGNA_ETHIOPIA = 0x0473;
enum TT_MS_LANGID_TIGRIGNA_ERYTHREA = 0x0873;
enum TT_MS_LANGID_TIGRIGNA_ERYTREA = TT_MS_LANGID_TIGRIGNA_ERYTHREA;
enum TT_MS_LANGID_GUARANI_PARAGUAY = 0x0474;
enum TT_MS_LANGID_HAWAIIAN_UNITED_STATES = 0x0475;
enum TT_MS_LANGID_LATIN = 0x0476;
enum TT_MS_LANGID_SOMALI_SOMALIA = 0x0477;
enum TT_MS_LANGID_YI_CHINA = 0x0478;
enum TT_MS_LANGID_PAPIAMENTU_NETHERLANDS_ANTILLES = 0x0479;
enum TT_MS_LANGID_UIGHUR_CHINA = 0x0480;
enum TT_MS_LANGID_MAORI_NEW_ZEALAND = 0x0481;

enum TT_NAME_ID_COPYRIGHT = 0;
enum TT_NAME_ID_FONT_FAMILY = 1;
enum TT_NAME_ID_FONT_SUBFAMILY = 2;
enum TT_NAME_ID_UNIQUE_ID = 3;
enum TT_NAME_ID_FULL_NAME = 4;
enum TT_NAME_ID_VERSION_STRING = 5;
enum TT_NAME_ID_PS_NAME = 6;
enum TT_NAME_ID_TRADEMARK = 7;
enum TT_NAME_ID_MANUFACTURER = 8;
enum TT_NAME_ID_DESIGNER = 9;
enum TT_NAME_ID_DESCRIPTION = 10;
enum TT_NAME_ID_VENDOR_URL = 11;
enum TT_NAME_ID_DESIGNER_URL = 12;
enum TT_NAME_ID_LICENSE = 13;
enum TT_NAME_ID_LICENSE_URL = 14;
enum TT_NAME_ID_PREFERRED_FAMILY = 16;
enum TT_NAME_ID_PREFERRED_SUBFAMILY = 17;
enum TT_NAME_ID_MAC_FULL_NAME = 18;
enum TT_NAME_ID_SAMPLE_TEXT = 19;
enum TT_NAME_ID_CID_FINDFONT_NAME = 20;
enum TT_NAME_ID_WWS_FAMILY = 21;
enum TT_NAME_ID_WWS_SUBFAMILY = 22;

enum TT_UCR_BASIC_LATIN = 1U<<0;
enum TT_UCR_LATIN1_SUPPLEMENT = 1U<<1;
enum TT_UCR_LATIN_EXTENDED_A = 1U<<2;
enum TT_UCR_LATIN_EXTENDED_B = 1U<<3;
enum TT_UCR_IPA_EXTENSIONS = 1U<<4;
enum TT_UCR_SPACING_MODIFIER = 1U<<5;
enum TT_UCR_COMBINING_DIACRITICS = 1U<<6;
enum TT_UCR_GREEK = 1U<<7;
enum TT_UCR_COPTIC = 1U<<8;
enum TT_UCR_CYRILLIC = 1U<<9;
enum TT_UCR_ARMENIAN = 1U<<10;
enum TT_UCR_HEBREW = 1U<<11;
enum TT_UCR_VAI = 1U<<12;
enum TT_UCR_ARABIC = 1U<<13;
enum TT_UCR_NKO = 1U<<14;
enum TT_UCR_DEVANAGARI = 1U<<15;
enum TT_UCR_BENGALI = 1U<<16;
enum TT_UCR_GURMUKHI = 1U<<17;
enum TT_UCR_GUJARATI = 1U<<18;
enum TT_UCR_ORIYA = 1U<<19;
enum TT_UCR_TAMIL = 1U<<20;
enum TT_UCR_TELUGU = 1U<<21;
enum TT_UCR_KANNADA = 1U<<22;
enum TT_UCR_MALAYALAM = 1U<<23;
enum TT_UCR_THAI = 1U<<24;
enum TT_UCR_LAO = 1U<<25;
enum TT_UCR_GEORGIAN = 1U<<26;
enum TT_UCR_BALINESE = 1U<<27;
enum TT_UCR_HANGUL_JAMO = 1U<<28;
enum TT_UCR_LATIN_EXTENDED_ADDITIONAL = 1U<<29;
enum TT_UCR_GREEK_EXTENDED = 1U<<30;
enum TT_UCR_SUPERSCRIPTS_SUBSCRIPTS = 1U<<0;
enum TT_UCR_CURRENCY_SYMBOLS = 1U<<1;
enum TT_UCR_COMBINING_DIACRITICS_SYMB = 1U<<2;
enum TT_UCR_LETTERLIKE_SYMBOLS = 1U<<3;
enum TT_UCR_NUMBER_FORMS = 1U<<4;
enum TT_UCR_ARROWS = 1U<<5;
enum TT_UCR_MATHEMATICAL_OPERATORS = 1U<<6;
enum TT_UCR_MISCELLANEOUS_TECHNICAL = 1U<<7;
enum TT_UCR_CONTROL_PICTURES = 1U<<8;
enum TT_UCR_OCR = 1U<<9;
enum TT_UCR_ENCLOSED_ALPHANUMERICS = 1U<<10;
enum TT_UCR_BOX_DRAWING = 1U<<11;
enum TT_UCR_BLOCK_ELEMENTS = 1U<<12;
enum TT_UCR_GEOMETRIC_SHAPES = 1U<<13;
enum TT_UCR_MISCELLANEOUS_SYMBOLS = 1U<<14;
enum TT_UCR_DINGBATS = 1U<<15;
enum TT_UCR_CJK_SYMBOLS = 1U<<16;
enum TT_UCR_HIRAGANA = 1U<<17;
enum TT_UCR_KATAKANA = 1U<<18;
enum TT_UCR_BOPOMOFO = 1U<<19;
enum TT_UCR_HANGUL_COMPATIBILITY_JAMO = 1U<<20;
enum TT_UCR_CJK_MISC = 1U<<21;
enum TT_UCR_ENCLOSED_CJK_LETTERS_MONTHS = 1U<<22;
enum TT_UCR_CJK_COMPATIBILITY = 1U<<23;
enum TT_UCR_HANGUL = 1U<<24;
enum TT_UCR_SURROGATES = 1U<<25;
enum TT_UCR_NON_PLANE_0 = TT_UCR_SURROGATES;
enum TT_UCR_PHOENICIAN = 1U<<26;
enum TT_UCR_CJK_UNIFIED_IDEOGRAPHS = 1U<<27;
enum TT_UCR_PRIVATE_USE = 1U<<28;
enum TT_UCR_CJK_COMPATIBILITY_IDEOGRAPHS = 1U<<29;
enum TT_UCR_ALPHABETIC_PRESENTATION_FORMS = 1U<<30;
enum TT_UCR_ARABIC_PRESENTATIONS_A = 1U<<31;
enum TT_UCR_COMBINING_HALF_MARKS = 1U<<0;
enum TT_UCR_CJK_COMPATIBILITY_FORMS = 1U<<1;
enum TT_UCR_SMALL_FORM_VARIANTS = 1U<<2;
enum TT_UCR_ARABIC_PRESENTATIONS_B = 1U<<3;
enum TT_UCR_HALFWIDTH_FULLWIDTH_FORMS = 1U<<4;
enum TT_UCR_SPECIALS = 1U<<5;
enum TT_UCR_TIBETAN = 1U<<6;
enum TT_UCR_SYRIAC = 1U<<7;
enum TT_UCR_THAANA = 1U<<8;
enum TT_UCR_SINHALA = 1U<<9;
enum TT_UCR_MYANMAR = 1U<<10;
enum TT_UCR_ETHIOPIC = 1U<<11;
enum TT_UCR_CHEROKEE = 1U<<12;
enum TT_UCR_CANADIAN_ABORIGINAL_SYLLABICS = 1U<<13;
enum TT_UCR_OGHAM = 1U<<14;
enum TT_UCR_RUNIC = 1U<<15;
enum TT_UCR_KHMER = 1U<<16;
enum TT_UCR_MONGOLIAN = 1U<<17;
enum TT_UCR_BRAILLE = 1U<<18;
enum TT_UCR_YI = 1U<<19;
enum TT_UCR_PHILIPPINE = 1U<<20;
enum TT_UCR_OLD_ITALIC = 1U<<21;
enum TT_UCR_GOTHIC = 1U<<22;
enum TT_UCR_DESERET = 1U<<23;
enum TT_UCR_MUSICAL_SYMBOLS = 1U<<24;
enum TT_UCR_MATH_ALPHANUMERIC_SYMBOLS = 1U<<25;
enum TT_UCR_PRIVATE_USE_SUPPLEMENTARY = 1U<<26;
enum TT_UCR_VARIATION_SELECTORS = 1U<<27;
enum TT_UCR_TAGS = 1U<<28;
enum TT_UCR_LIMBU = 1U<<29;
enum TT_UCR_TAI_LE = 1U<<30;
enum TT_UCR_NEW_TAI_LUE = 1U<<31;
enum TT_UCR_BUGINESE = 1U<<0;
enum TT_UCR_GLAGOLITIC = 1U<<1;
enum TT_UCR_TIFINAGH = 1U<<2;
enum TT_UCR_YIJING = 1U<<3;
enum TT_UCR_SYLOTI_NAGRI = 1U<<4;
enum TT_UCR_LINEAR_B = 1U<<5;
enum TT_UCR_ANCIENT_GREEK_NUMBERS = 1U<<6;
enum TT_UCR_UGARITIC = 1U<<7;
enum TT_UCR_OLD_PERSIAN = 1U<<8;
enum TT_UCR_SHAVIAN = 1U<<9;
enum TT_UCR_OSMANYA = 1U<<10;
enum TT_UCR_CYPRIOT_SYLLABARY = 1U<<11;
enum TT_UCR_KHAROSHTHI = 1U<<12;
enum TT_UCR_TAI_XUAN_JING = 1U<<13;
enum TT_UCR_CUNEIFORM = 1U<<14;
enum TT_UCR_COUNTING_ROD_NUMERALS = 1U<<15;
enum TT_UCR_SUNDANESE = 1U<<16;
enum TT_UCR_LEPCHA = 1U<<17;
enum TT_UCR_OL_CHIKI = 1U<<18;
enum TT_UCR_SAURASHTRA = 1U<<19;
enum TT_UCR_KAYAH_LI = 1U<<20;
enum TT_UCR_REJANG = 1U<<21;
enum TT_UCR_CHAM = 1U<<22;
enum TT_UCR_ANCIENT_SYMBOLS = 1U<<23;
enum TT_UCR_PHAISTOS_DISC = 1U<<24;
enum TT_UCR_OLD_ANATOLIAN = 1U<<25;
enum TT_UCR_GAME_TILES = 1U<<26;

// tttables.h
struct TT_Header {
  FT_Fixed Table_Version;
  FT_Fixed Font_Revision;
  FT_Long CheckSum_Adjust;
  FT_Long Magic_Number;
  FT_UShort Flags;
  FT_UShort Units_Per_EM;
  FT_Long[2] Created;
  FT_Long[2] Modified;
  FT_Short xMin;
  FT_Short yMin;
  FT_Short xMax;
  FT_Short yMax;
  FT_UShort Mac_Style;
  FT_UShort Lowest_Rec_PPEM;
  FT_Short Font_Direction;
  FT_Short Index_To_Loc_Format;
  FT_Short Glyph_Data_Format;
}

struct TT_HoriHeader {
  FT_Fixed Version;
  FT_Short Ascender;
  FT_Short Descender;
  FT_Short Line_Gap;
  FT_UShort advance_Width_Max;
  FT_Short min_Left_Side_Bearing;
  FT_Short min_Right_Side_Bearing;
  FT_Short xMax_Extent;
  FT_Short caret_Slope_Rise;
  FT_Short caret_Slope_Run;
  FT_Short caret_Offset;
  FT_Short[4] Reserved;
  FT_Short metric_Data_Format;
  FT_UShort number_Of_HMetrics;
  void* long_metrics;
  void* short_metrics;
}

struct TT_VertHeader {
  FT_Fixed Version;
  FT_Short Ascender;
  FT_Short Descender;
  FT_Short Line_Gap;
  FT_UShort advance_Height_Max;
  FT_Short min_Top_Side_Bearing;
  FT_Short min_Bottom_Side_Bearing;
  FT_Short yMax_Extent;
  FT_Short caret_Slope_Rise;
  FT_Short caret_Slope_Run;
  FT_Short caret_Offset;
  FT_Short[4] Reserved;
  FT_Short metric_Data_Format;
  FT_UShort number_Of_VMetrics;
  void* long_metrics;
  void* short_metrics;
}

struct TT_OS2 {
  FT_UShort _version;
  FT_Short xAvgCharWidth;
  FT_UShort usWeightClass;
  FT_UShort usWidthClass;
  FT_UShort fsType;
  FT_Short ySubscriptXSize;
  FT_Short ySubscriptYSize;
  FT_Short ySubscriptXOffset;
  FT_Short ySubscriptYOffset;
  FT_Short ySuperscriptXSize;
  FT_Short ySuperscriptYSize;
  FT_Short ySuperscriptXOffset;
  FT_Short ySuperscriptYOffset;
  FT_Short yStrikeoutSize;
  FT_Short yStrikeoutPosition;
  FT_Short sFamilyClass;
  FT_Byte[10] panose;
  FT_ULong ulUnicodeRange1;
  FT_ULong ulUnicodeRange2;
  FT_ULong ulUnicodeRange3;
  FT_ULong ulUnicodeRange4;
  FT_Char[4] achVendID;
  FT_UShort fsSelection;
  FT_UShort usFirstCharIndex;
  FT_UShort usLastCharIndex;
  FT_Short sTypoAscender;
  FT_Short sTypoDescender;
  FT_Short sTypoLineGap;
  FT_UShort usWinAscent;
  FT_UShort usWinDescent;
  FT_ULong ulCodePageRange1;
  FT_ULong ulCodePageRange2;
  FT_Short sxHeight;
  FT_Short sCapHeight;
  FT_UShort usDefaultChar;
  FT_UShort usBreakChar;
  FT_UShort usMaxContext;
  FT_UShort usLowerOpticalPointSize;
  FT_UShort usUpperOpticalPointSize;
}

struct TT_Postscript {
  FT_Fixed FormatType;
  FT_Fixed italicAngle;
  FT_Short underlinePosition;
  FT_Short underlineThickness;
  FT_ULong isFixedPitch;
  FT_ULong minMemType42;
  FT_ULong maxMemType42;
  FT_ULong minMemType1;
  FT_ULong maxMemType1;
}

struct TT_PCLT {
  FT_Fixed Version;
  FT_ULong FontNumber;
  FT_UShort Pitch;
  FT_UShort xHeight;
  FT_UShort Style;
  FT_UShort TypeFamily;
  FT_UShort CapHeight;
  FT_UShort SymbolSet;
  FT_Char[16] TypeFace;
  FT_Char[8] CharacterComplement;
  FT_Char[6] FileName;
  FT_Char StrokeWeight;
  FT_Char WidthType;
  FT_Byte SerifStyle;
  FT_Byte Reserved;
}

struct TT_MaxProfile {
  FT_Fixed _version;
  FT_UShort numGlyphs;
  FT_UShort maxPoints;
  FT_UShort maxContours;
  FT_UShort maxCompositePoints;
  FT_UShort maxCompositeContours;
  FT_UShort maxZones;
  FT_UShort maxTwilightPoints;
  FT_UShort maxStorage;
  FT_UShort maxFunctionDefs;
  FT_UShort maxInstructionDefs;
  FT_UShort maxStackElements;
  FT_UShort maxSizeOfInstructions;
  FT_UShort maxComponentElements;
  FT_UShort maxComponentDepth;
}

alias FT_Sfnt_Tag = int;
enum {
  FT_SFNT_HEAD,
  FT_SFNT_MAXP,
  FT_SFNT_OS2,
  FT_SFNT_HHEA,
  FT_SFNT_VHEA,
  FT_SFNT_POST,
  FT_SFNT_PCLT,
  FT_SFNT_MAX
}


FT_Error FT_Init_FreeType (FT_Library*);
FT_Error FT_Done_FreeType (FT_Library);
FT_Error FT_New_Face (FT_Library, const(char)*, FT_Long, FT_Face*);
FT_Error FT_New_Memory_Face (FT_Library, const(FT_Byte)*, FT_Long, FT_Long, FT_Face*);
FT_Error FT_Open_Face (FT_Library, const(FT_Open_Args)*, FT_Long, FT_Face*);
FT_Error FT_Attach_File (FT_Face, const(char)*);
FT_Error FT_Attach_Stream (FT_Face, FT_Open_Args*);
FT_Error FT_Reference_Face (FT_Face);
FT_Error FT_Done_Face (FT_Face);
FT_Error FT_Select_Size (FT_Face, FT_Int);
FT_Error FT_Request_Size (FT_Face, FT_Size_Request);
FT_Error FT_Set_Char_Size (FT_Face, FT_F26Dot6, FT_F26Dot6, FT_UInt, FT_UInt);
FT_Error FT_Set_Pixel_Sizes (FT_Face, FT_UInt, FT_UInt);
FT_Error FT_Load_Glyph (FT_Face, FT_UInt, FT_Int32);
FT_Error FT_Load_Char (FT_Face, FT_ULong, FT_Int32);
void FT_Set_Transform (FT_Face, FT_Matrix*, FT_Vector*);
FT_Error FT_Render_Glyph (FT_GlyphSlot, FT_Render_Mode);
FT_Error FT_Get_Kerning (FT_Face, FT_UInt, FT_UInt, FT_UInt, FT_Vector*);
FT_Error FT_Get_Track_Kerning (FT_Face, FT_Fixed, FT_Int, FT_Fixed*);
FT_Error FT_Get_Glyph_Name (FT_Face, FT_UInt, FT_Pointer, FT_UInt);
const(char)* FT_Get_Postscript_Name (FT_Face);
FT_Error FT_Select_Charmap (FT_Face, FT_Encoding);
FT_Error FT_Set_Charmap (FT_Face, FT_CharMap);
FT_Int FT_Get_Charmap_Index (FT_CharMap);
FT_UInt FT_Get_Char_Index (FT_Face, FT_ULong);
FT_ULong FT_Get_First_Char (FT_Face, FT_UInt*);
FT_ULong FT_Get_Next_Char (FT_Face, FT_ULong, FT_UInt*);
FT_UInt FT_Get_Name_Index (FT_Face, FT_String*);
FT_Error FT_Get_SubGlyph_Info (FT_GlyphSlot, FT_UInt, FT_Int*, FT_UInt*, FT_Int*, FT_Int*, FT_Matrix*);
FT_UShort FT_Get_FSType_Flags (FT_Face);
FT_UInt FT_Face_GetCharVariantIndex (FT_Face, FT_ULong, FT_ULong);
FT_Int FT_Face_GetCharVariantIsDefault (FT_Face, FT_ULong, FT_ULong);
FT_UInt32* FT_Face_GetVariantSelectors (FT_Face);
FT_UInt32* FT_Face_GetVariantsOfChar (FT_Face, FT_ULong);
FT_UInt32* FT_Face_GetCharsOfVariant (FT_Face, FT_ULong);
FT_Long FT_MulDiv (FT_Long, FT_Long, FT_Long);
FT_Long FT_MulFix (FT_Long, FT_Long);
FT_Long FT_DivFix (FT_Long, FT_Long);
FT_Fixed FT_RoundFix (FT_Fixed);
FT_Fixed FT_CeilFix (FT_Fixed);
FT_Fixed FT_FloorFix (FT_Fixed);
void FT_Vector_Transform (FT_Vector*, FT_Matrix*);
void FT_Library_Version (FT_Library, FT_Int*, FT_Int*, FT_Int*);
FT_Bool FT_Face_CheckTrueTypePatents (FT_Face);
FT_Bool FT_Face_SetUnpatentedHinting (FT_Face, FT_Bool);

// ftadvanc.h
FT_Error FT_Get_Advance (FT_Face, FT_UInt, FT_Int32, FT_Fixed*);
FT_Error FT_Get_Advances (FT_Face, FT_UInt, FT_UInt, FT_Int32, FT_Fixed*);

// ftbbox.h
FT_Error FT_Outline_Get_BBox (FT_Outline*, FT_BBox);

// ftbdf.h
version(linux) {
  FT_Error FT_Get_BDF_Charset_ID (FT_Face, const(char)** acharset_encoding, const(char)** acharset_registry);
  FT_Error FT_Get_BDF_Property (FT_Face, const(char)*, BDF_PropertyRec*);
}

// ftbitmap.h
void FT_Bitmap_Init (FT_Bitmap*);
FT_Error FT_Bitmap_Copy (FT_Library, const(FT_Bitmap)*, FT_Bitmap*);
FT_Error FT_Bitmap_Embolden (FT_Library, FT_Bitmap*, FT_Pos, FT_Pos);
FT_Error FT_Bitmap_Convert (FT_Library, const(FT_Bitmap)*, FT_Bitmap*, FT_Int);
FT_Error FT_GlyphSlot_Own_Bitmap (FT_GlyphSlot);
FT_Error FT_Bitmap_Done (FT_Library, FT_Bitmap*);

// ftbzip2.h
FT_Error FT_Stream_OpenBzip2 (FT_Stream, FT_Stream);

// ftcache.h
FT_Error FTC_Manager_New (FT_Library, FT_UInt, FT_UInt, FT_ULong, FTC_Face_Requester, FT_Pointer, FTC_Manager*);
void FTC_Manager_Reset (FTC_Manager);
void FTC_Manager_Done (FTC_Manager);
FT_Error FTC_Manager_LookupFace (FTC_Manager, FTC_FaceID, FT_Face*);
FT_Error FTC_Manager_LookupSize (FTC_Manager, FTC_Scaler, FT_Size*);
void FTC_Node_Unref (FTC_Node, FTC_Manager);
void FTC_Manager_RemoveFaceID (FTC_Manager, FTC_FaceID);
FT_Error FTC_CMapCache_New (FTC_Manager, FTC_CMapCache*);
FT_UInt FTC_CMapCache_Lookup (FTC_CMapCache, FTC_FaceID, FT_Int, FT_UInt32);
FT_Error FTC_ImageCache_New (FTC_Manager, FTC_ImageCache*);
FT_Error FTC_ImageCache_Lookup (FTC_ImageCache, FTC_ImageType, FT_UInt, FT_Glyph*, FTC_Node*);
FT_Error FTC_ImageCache_LookupScaler (FTC_ImageCache, FTC_Scaler, FT_ULong, FT_UInt, FT_Glyph*, FTC_Node*);
FT_Error FTC_SBitCache_New (FTC_Manager, FTC_SBitCache*);
FT_Error FTC_SBitCache_Lookup (FTC_SBitCache, FTC_ImageType, FT_UInt, FTC_SBit*, FTC_Node*);
FT_Error FTC_SBitCache_LookupScaler (FTC_SBitCache, FTC_Scaler, FT_ULong, FT_UInt, FTC_SBit*, FTC_Node*);

// ftcid.h
FT_Error FT_Get_CID_Registry_Ordering_Supplement (FT_Face, const(char*)*, const(char*)*, FT_Int*);
FT_Error FT_Get_CID_Is_Internally_CID_Keyed (FT_Face, FT_Bool*);
FT_Error FT_Get_CID_From_Glyph_Index (FT_Face, FT_UInt, FT_UInt*);

// ftgasp.h
FT_Int FT_Get_Gasp (FT_Face, FT_UInt);

// ftglyph.h
FT_Error FT_Get_Glyph (FT_GlyphSlot, FT_Glyph*);
FT_Error FT_Glyph_Copy (FT_Glyph, FT_Glyph*);
FT_Error FT_Glyph_Transform (FT_Glyph, FT_Matrix*, FT_Vector*);
void FT_Glyph_Get_CBox (FT_Glyph, FT_UInt, FT_BBox*);
FT_Error FT_Glyph_To_Bitmap (FT_Glyph*, FT_Render_Mode, FT_Vector*, FT_Bool);
void FT_Done_Glyph (FT_Glyph);
void FT_Matrix_Multiply (const(FT_Matrix)*, FT_Matrix*);
FT_Error FT_Matrix_Invert (FT_Matrix*);

// ftgxval.h
FT_Error FT_TrueTypeGX_Validate (FT_Face, FT_UInt, FT_Bytes, FT_UInt);
void FT_TrueTypeGX_Free (FT_Face, FT_Bytes);
FT_Error FT_ClassicKern_Validate (FT_Face, FT_UInt, FT_Bytes*);
void FT_ClassicKern_Free (FT_Face, FT_Bytes);

// ftgzip.h
FT_Error FT_Stream_OpenGzip (FT_Stream, FT_Stream);
FT_Error FT_Gzip_Uncompress (FT_Memory, FT_Byte*, FT_ULong*, const(FT_Byte)*, FT_ULong);

// ftlcdfil.h
FT_Error FT_Library_SetLcdFilter (FT_Library, FT_LcdFilter);
FT_Error FT_Library_SetLcdFilterWeights (FT_Library, ubyte*);

FT_ListNode FT_List_Find (FT_List, void*);
void FT_List_Add (FT_List, FT_ListNode);
void FT_List_Insert (FT_List, FT_ListNode);
void FT_List_Remove (FT_List, FT_ListNode);
void FT_List_Up (FT_List, FT_ListNode);
FT_Error FT_List_Iterate (FT_List, FT_List_Iterator, void*);
void FT_List_Finalize (FT_List, FT_List_Destructor, FT_Memory, void*);

// ftlzw.h
FT_Error FT_Stream_OpenLZW (FT_Stream, FT_Stream);

// ftmm.h
FT_Error FT_Get_Multi_Master (FT_Face, FT_Multi_Master*);
FT_Error FT_Get_MM_Var (FT_Face, FT_MM_Var**);
FT_Error FT_Set_MM_Design_Coordinates (FT_Face, FT_UInt, FT_Long*);
FT_Error FT_Set_Var_Design_Coordinates (FT_Face, FT_UInt, FT_Fixed*);
FT_Error FT_Set_MM_Blend_Coordinates (FT_Face, FT_UInt, FT_Fixed*);
FT_Error FT_Set_Var_Blend_Coordinates (FT_Face, FT_UInt, FT_Fixed*);

// ftmodapi.h
FT_Error FT_Add_Module (FT_Library, const(FT_Module_Class)*);
FT_Module FT_Get_Module (FT_Library, const(char)*);
FT_Error FT_Remove_Module (FT_Library, FT_Module);
FT_Error FT_Property_Set (FT_Library, const(FT_String)*, const(FT_String)*, const(void)*);
FT_Error FT_Property_Get (FT_Library, const(FT_String)*, const(FT_String)*, void*);
FT_Error FT_Reference_Library (FT_Library);
FT_Error FT_New_Library (FT_Memory, FT_Library*);
FT_Error FT_Done_Library (FT_Library);
void FT_Set_Debug_Hook (FT_Library, FT_UInt, FT_DebugHook_Func);
void FT_Add_Default_Modules (FT_Library);
FT_TrueTypeEngineType FT_Get_TrueType_Engine_Type (FT_Library);

// ftotval.h
FT_Error FT_OpenType_Validate (FT_Face, FT_UInt, FT_Bytes*, FT_Bytes*, FT_Bytes*, FT_Bytes*, FT_Bytes*);
void FT_OpenType_Free (FT_Face face, FT_Bytes table);

// ftoutln.h
FT_Error FT_Outline_Decompose (FT_Outline*, const(FT_Outline_Funcs)*, void*);
FT_Error FT_Outline_New (FT_Library, FT_UInt, FT_Int, FT_Outline*);
FT_Error FT_Outline_New_Internal (FT_Memory, FT_UInt, FT_Int, FT_Outline*);
FT_Error FT_Outline_Done (FT_Library, FT_Outline*);
FT_Error FT_Outline_Done_Internal (FT_Memory, FT_Outline*);
FT_Error FT_Outline_Check (FT_Outline*);
void FT_Outline_Get_CBox (const(FT_Outline)*, FT_BBox*);
void FT_Outline_Translate (const(FT_Outline)*, FT_Pos, FT_Pos);
FT_Error FT_Outline_Copy (const(FT_Outline)*, FT_Outline*);
void FT_Outline_Transform (const(FT_Outline)*, const(FT_Matrix)*);
FT_Error FT_Outline_Embolden (FT_Outline*, FT_Pos);
FT_Error FT_Outline_EmboldenXY (FT_Outline*, FT_Pos, FT_Pos);
void FT_Outline_Reverse (FT_Outline*);
FT_Error FT_Outline_Get_Bitmap (FT_Library, FT_Outline*, const(FT_Bitmap)*);
FT_Error FT_Outline_Render (FT_Library, FT_Outline*, FT_Raster_Params*);
FT_Orientation FT_Outline_Get_Orientation (FT_Outline*);

// ftpfr.h
FT_Error FT_Get_PFR_Metrics (FT_Face, FT_UInt*, FT_UInt*, FT_Fixed*, FT_Fixed*);
FT_Error FT_Get_PFR_Kerning (FT_Face, FT_UInt, FT_UInt, FT_Vector*);
FT_Error FT_Get_PFR_Advance (FT_Face, FT_UInt, FT_Pos*);

// ftrender.h
FT_Renderer FT_Get_Renderer (FT_Library, FT_Glyph_Format);
FT_Error FT_Set_Renderer (FT_Library, FT_Renderer, FT_UInt, FT_Parameter*);

// ftsizes.h
FT_Error FT_New_Size (FT_Face, FT_Size*);
FT_Error FT_Done_Size (FT_Size);
FT_Error FT_Activate_Size (FT_Size);

// ftsnames.h
FT_UInt FT_Get_Sfnt_Name_Count (FT_Face);

// ftstroke.h
FT_StrokerBorder FT_Outline_GetInsideBorder (FT_Outline*);
FT_StrokerBorder FT_Outline_GetOutsideBorder (FT_Outline*);
FT_Error FT_Stroker_New (FT_Memory, FT_Stroker*);
void FT_Stroker_Set (FT_Stroker, FT_Fixed, FT_Stroker_LineCap, FT_Stroker_LineJoin, FT_Fixed);
void FT_Stroker_Rewind (FT_Stroker);
FT_Error FT_Stroker_ParseOutline (FT_Stroker, FT_Outline*, FT_Bool);
FT_Error FT_Stroker_BeginSubPath (FT_Stroker, FT_Vector*, FT_Bool);
FT_Error FT_Stroker_EndSubPath (FT_Stroker);
FT_Error FT_Stroker_LineTo (FT_Stroker, FT_Vector*);
FT_Error FT_Stroker_ConicTo (FT_Stroker, FT_Vector*, FT_Vector*);
FT_Error FT_Stroker_CubicTo (FT_Stroker, FT_Vector*, FT_Vector*, FT_Vector*);
FT_Error FT_Stroker_GetBorderCounts (FT_Stroker, FT_StrokerBorder, FT_UInt*, FT_UInt*);
void FT_Stroker_ExportBorder (FT_Stroker, FT_StrokerBorder, FT_Outline*);
FT_Error FT_Stroker_GetCounts (FT_Stroker, FT_UInt*, FT_UInt*);
void FT_Stroker_Export (FT_Stroker, FT_Outline*);
void FT_Stroker_Done (FT_Stroker);
FT_Error FT_Glyph_Stroke (FT_Glyph*, FT_Stroker, FT_Bool);
FT_Error FT_Glyph_StrokeBorder (FT_Glyph*, FT_Stroker, FT_Bool, FT_Bool);

// ftsynth.h
void FT_GlyphSlot_Embolden (FT_GlyphSlot);
void FT_GlyphSlot_Oblique (FT_GlyphSlot);

// fttrigon.h
FT_Fixed FT_Sin (FT_Angle);
FT_Fixed FT_Cos (FT_Angle);
FT_Fixed FT_Tan (FT_Angle);
FT_Angle FT_Atan2 (FT_Fixed, FT_Fixed);
FT_Angle FT_Angle_Diff (FT_Angle, FT_Angle);
void FT_Vector_Unit (FT_Vector*, FT_Angle);
void FT_Vector_Rotate (FT_Vector*, FT_Angle);
FT_Fixed FT_Vector_Length (FT_Vector*);
void FT_Vector_Polarize (FT_Vector*, FT_Fixed*, FT_Angle*);
void FT_Vector_From_Polar (FT_Vector*, FT_Fixed, FT_Angle);

// ftwinfnt.h
FT_Error FT_Get_WinFNT_Header (FT_Face, FT_WinFNT_HeaderRec*);

// ftxf86.h
const(char)* FT_Get_X11_Font_Format (FT_Face);

// t1tables.h
FT_Int FT_Has_PS_Glyph_Names (FT_Face);
FT_Error FT_Get_PS_Font_Info (FT_Face, PS_FontInfoRec*);
FT_Error FT_Get_PS_Font_Private (FT_Face, PS_PrivateRec*);
FT_Long FT_Get_PS_Font_Value (FT_Face, PS_Dict_Keys*, FT_UInt, FT_Long);

// tttables.h
void* FT_Get_Sfnt_Table (FT_Face, FT_Sfnt_Tag);
FT_Error FT_Load_Sfnt_Table (FT_Face, FT_ULong, FT_Long, FT_Byte*, FT_ULong*);
FT_Error FT_Sfnt_Table_Info (FT_Face, FT_UInt, FT_ULong*, FT_ULong*);
FT_ULong FT_Get_CMap_Language_ID (FT_CharMap);
FT_ULong FT_Get_CMap_Format (FT_CharMap);
FT_Error FT_Get_Sfnt_Name (FT_Face, FT_UInt, FT_SfntName*);
