/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module iv.xyph.vorbisfile is aliced;
pragma(lib, "vorbisfile");

import core.stdc.config;
import core.stdc.stdio; // FILE
import iv.xyph.ogg;
import iv.xyph.vorbis;

struct ov_callbacks {
  extern(C) nothrow {
    usize function (void*, usize, usize, void*) read_func;
    int function (void*, ogg_int64_t, int) seek_func;
    int function (void*) close_func;
    c_long function (void*) tell_func;
  }
}

enum {
  NOTOPEN   = 0,
  PARTOPEN  = 1,
  OPENED    = 2,
  STREAMSET = 3,
  INITSET   = 4,
}

struct OggVorbis_File {
  void* datasource;
  int seekable;
  ogg_int64_t offset;
  ogg_int64_t end;
  ogg_sync_state oy;
  int links;
  ogg_int64_t* offsets;
  ogg_int64_t* dataoffsets;
  c_long* serialnos;
  ogg_int64_t* pcmlengths;
  vorbis_info* vi;
  vorbis_comment* vc;
  ogg_int64_t pcm_offset;
  int ready_state;
  c_long current_serialno;
  int current_link;
  double bittrack;
  double samptrack;
  ogg_stream_state os;
  vorbis_dsp_state vd;
  vorbis_block vb;
  ov_callbacks callbacks;
}

extern(C) @nogc nothrow {
  int ov_clear (OggVorbis_File*);
  int ov_fopen (const( char )*, OggVorbis_File*);
  int ov_open_callbacks (void* datasource, OggVorbis_File*, const( char )*, c_long, ov_callbacks);
  int ov_test_callbacks (void*, OggVorbis_File*, const( char )*, c_long, ov_callbacks);
  int ov_test_open (OggVorbis_File*);
  c_long ov_bitrate (OggVorbis_File*, int);
  c_long ov_bitrate_instant (OggVorbis_File*);
  c_long ov_streams (OggVorbis_File*);
  c_long ov_seekable (OggVorbis_File*);
  c_long ov_serialnumber (OggVorbis_File*, int);
  ogg_int64_t ov_raw_total (OggVorbis_File*, int);
  ogg_int64_t ov_pcm_total (OggVorbis_File*, int);
  double ov_time_total (OggVorbis_File*, int);
  int ov_raw_seek (OggVorbis_File*, ogg_int64_t);
  int ov_pcm_seek (OggVorbis_File*, ogg_int64_t);
  int ov_pcm_seek_page (OggVorbis_File*, ogg_int64_t);
  int ov_time_seek (OggVorbis_File*, double);
  int ov_time_seek_page (OggVorbis_File*, double);
  int ov_raw_seek_lap (OggVorbis_File*, ogg_int64_t);
  int ov_pcm_seek_lap (OggVorbis_File*, ogg_int64_t);
  int ov_pcm_seek_page_lap (OggVorbis_File*, ogg_int64_t);
  int ov_time_seek_lap (OggVorbis_File*, double);
  int ov_time_seek_page_lap (OggVorbis_File*, double);
  ogg_int64_t ov_raw_tell (OggVorbis_File*);
  ogg_int64_t ov_pcm_tell (OggVorbis_File*);
  double ov_time_tell (OggVorbis_File*);
  vorbis_info* ov_info (OggVorbis_File*, int);
  vorbis_comment* ov_comment (OggVorbis_File*, int);
  c_long ov_read_float (OggVorbis_File*, float***, int, int*);
  c_long ov_read_filter (OggVorbis_File*, char*, int, int, int, int, int*);
  c_long ov_read (OggVorbis_File*, byte*, int, int, int, int, int*);
  int ov_crosslap (OggVorbis_File*, OggVorbis_File*);
  int ov_halfrate (OggVorbis_File*, int);
  int ov_halfrate_p (OggVorbis_File*);
}

private extern (C) nothrow {
  usize libcfile_VorbisRead (void* ptr, usize byteSize, usize sizeToRead, void* datasource) {
    return fread(ptr, byteSize, sizeToRead, cast(FILE*)datasource);
  }

  int libcfile_VorbisSeek (void* datasource, ogg_int64_t offset, int whence) {
    return fseek(cast(FILE*)datasource, cast(int)offset, whence);
  }

  int libcfile_VorbisClose (void* datasource) {
    return fclose(cast(FILE*)datasource);
  }

  c_long libcfile_VorbisTell( void* datasource ) {
    return cast(c_long)ftell(cast(FILE*)datasource);
  }
}

// ov_open is rewritten below because of incompatibility between compilers with FILE struct
// Using this wrapper, it *should* work exactly as it would in c++. --JoeCoder
int ov_open (FILE* f, OggVorbis_File* vf, const(char)* initial, c_long ibytes) {
  // Fill the ov_callbacks structure
  ov_callbacks vorbisCallbacks; // Structure to hold pointers to callback functions
  vorbisCallbacks.read_func = &libcfile_VorbisRead;
  vorbisCallbacks.close_func = &libcfile_VorbisClose;
  vorbisCallbacks.seek_func = &libcfile_VorbisSeek;
  vorbisCallbacks.tell_func = &libcfile_VorbisTell;
  return ov_open_callbacks(cast(void*)f, vf, initial, cast(int)ibytes, vorbisCallbacks);
}

// ditto for ov_test
int ov_test (FILE* f, OggVorbis_File* vf, const(char)* initial, c_long ibytes) {
  // Fill the ov_callbacks structure
  ov_callbacks vorbisCallbacks; // Structure to hold pointers to callback functions
  vorbisCallbacks.read_func = &libcfile_VorbisRead;
  vorbisCallbacks.close_func = &libcfile_VorbisClose;
  vorbisCallbacks.seek_func = &libcfile_VorbisSeek;
  vorbisCallbacks.tell_func = &libcfile_VorbisTell;
  return ov_test_callbacks(cast(void*)f, vf, initial, cast(int)ibytes, vorbisCallbacks);
}
