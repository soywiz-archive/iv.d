/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module iv.xyph.vorbis is aliced;
pragma(lib, "vorbis");

import core.stdc.config;
import iv.xyph.ogg;

enum {
  OV_FALSE      = -1,
  OV_EOF        = -2,
  OV_HOLE       = -3,
  OV_EREAD      = -128,
  OV_EFAULT     = -129,
  OV_EIMPL      = -130,
  OV_EINVAL     = -131,
  OV_ENOTVORBIS = -132,
  OV_EBADHEADER = -133,
  OV_EVERSION   = -134,
  OV_ENOTAUDIO  = -135,
  OV_EBADPACKET = -136,
  OV_EBADLINK   = -137,
  OV_ENOSEEK    = -138,
}

struct vorbis_info {
  int version_; // Renamed from "version", since that's a keyword in D
  int channels;
  int rate;
  c_long bitrate_upper;
  c_long bitrate_nominal;
  c_long bitrate_lower;
  c_long bitrate_window;

  void *codec_setup;
}

struct vorbis_dsp_state {
  int analysisp;
  vorbis_info* vi;
  float** pcm;
  float** pcmret;
  int pcm_storage;
  int pcm_current;
  int pcm_returned;
  int preextrapolate;
  int eofflag;
  c_long lW;
  c_long W;
  c_long nW;
  c_long centerW;
  ogg_int64_t granulepos;
  ogg_int64_t sequence;
  ogg_int64_t glue_bits;
  ogg_int64_t time_bits;
  ogg_int64_t floor_bits;
  ogg_int64_t res_bits;
  void* backend_state;
}


struct vorbis_block {
  float** pcm;
  oggpack_buffer opb;
  c_long lW;
  c_long W;
  c_long nW;
  int pcmend;
  int mode;
  int eofflag;
  ogg_int64_t granulepos;
  ogg_int64_t sequence;
  vorbis_dsp_state* vd;
  void* localstore;
  c_long localtop;
  c_long localalloc;
  c_long totaluse;
  alloc_chain* reap;
  c_long glue_bits;
  c_long time_bits;
  c_long floor_bits;
  c_long res_bits;
  void* internal;
}

struct alloc_chain {
  void* ptr;
  alloc_chain* next;
}

struct vorbis_comment {
  char** user_comments;
  int* comment_lengths;
  int comments;
  char* vendor;
}

extern(C) @nogc nothrow {
  void vorbis_info_init (vorbis_info*);
  void vorbis_info_clear (vorbis_info*);
  int vorbis_info_blocksize (vorbis_info*,int);
  void vorbis_comment_init (vorbis_comment*);
  void vorbis_comment_add (vorbis_comment*, const(char)*t);
  void vorbis_comment_add_tag (vorbis_comment*, const(char)*, const(char)*);
  char* vorbis_comment_query (vorbis_comment*, const(char)*, int);
  int vorbis_comment_query_count (vorbis_comment*, byte*);
  void vorbis_comment_clear (vorbis_comment*);
  int vorbis_block_init (vorbis_dsp_state*, vorbis_block*);
  int vorbis_block_clear (vorbis_block*);
  void vorbis_dsp_clear (vorbis_dsp_state*);
  double vorbis_granule_time (vorbis_dsp_state*, ogg_int64_t);
  const(char)* vorbis_version_string ();
  int vorbis_analysis_init (vorbis_dsp_state*,vorbis_info*);
  int vorbis_commentheader_out (vorbis_comment*, ogg_packet*);
  int vorbis_analysis_headerout (vorbis_dsp_state*, vorbis_comment*, ogg_packet*, ogg_packet*, ogg_packet*);
  float** vorbis_analysis_buffer (vorbis_dsp_state*, int);
  int vorbis_analysis_wrote (vorbis_dsp_state*, int);
  int vorbis_analysis_blockout (vorbis_dsp_state*,vorbis_block*);
  int vorbis_analysis (vorbis_block*,ogg_packet*);
  int vorbis_bitrate_addblock (vorbis_block*);
  int vorbis_bitrate_flushpacket (vorbis_dsp_state*, ogg_packet*);
  int vorbis_synthesis_idheader (ogg_packet*);
  int vorbis_synthesis_headerin (vorbis_info*, vorbis_comment*, ogg_packet*);
  int vorbis_synthesis_init (vorbis_dsp_state*, vorbis_info*);
  int vorbis_synthesis_restart (vorbis_dsp_state*);
  int vorbis_synthesis (vorbis_block*, ogg_packet*);
  int vorbis_synthesis_trackonly (vorbis_block*, ogg_packet*);
  int vorbis_synthesis_blockin (vorbis_dsp_state*,vorbis_block*);
  int vorbis_synthesis_pcmout (vorbis_dsp_state*, float***);
  int vorbis_synthesis_lapout (vorbis_dsp_state*, float***);
  int vorbis_synthesis_read (vorbis_dsp_state*, int);
  c_long vorbis_packet_blocksize (vorbis_info*,ogg_packet*);
  int vorbis_synthesis_halfrate (vorbis_info*, int);
  int vorbis_synthesis_halfrate_p (vorbis_info*);
}
