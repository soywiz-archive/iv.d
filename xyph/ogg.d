/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module iv.xyph.ogg is aliced;
pragma(lib, "ogg");

import core.stdc.config;

alias ogg_int64_t = long;
alias ogg_uint64_t = ulong;
alias ogg_int32_t = int;
alias ogg_uint32_t = uint;
alias ogg_int16_t = short;
alias ogg_uint16_t = ushort;

struct ogg_iovec_t {
  void* iov_base;
  usize iov_len;
}

struct oggpack_buffer {
  c_long endbyte;
  int endbit;
  ubyte* buffer;
  ubyte* ptr;
  c_long storage;
}

struct ogg_page {
  ubyte* header;
  c_long header_len;
  ubyte* body;
  c_long body_len;
}

struct ogg_stream_state {
  ubyte* body_data;
  c_long body_storage;
  c_long body_fill;
  c_long body_returned;
  int* lacing_vals;
  ogg_int64_t* granule_vals;
  c_long lacing_storage;
  c_long lacing_fill;
  c_long lacing_packet;
  c_long lacing_returned;
  ubyte[282] header;
  int header_fill;
  int e_o_s;
  int b_o_s;
  c_long serialno;
  c_long pageno;
  ogg_int64_t packetno;
  ogg_int64_t granulepos;
}

struct ogg_packet {
  ubyte* packet;
  c_long bytes;
  c_long b_o_s;
  c_long e_o_s;
  ogg_int64_t granulepos;
  ogg_int64_t packetno;
}

struct ogg_sync_state {
  ubyte* data;
  int storage;
  int fill;
  int returned;

  int unsynced;
  int headerbytes;
  int bodybytes;
}

extern(C) nothrow @nogc {
  void oggpack_writeinit (oggpack_buffer*);
  void oggpack_writecheck (oggpack_buffer*);
  void oggpack_writetrunc (oggpack_buffer*, c_long);
  void oggpack_writealign (oggpack_buffer*);
  void oggpack_writecopy (oggpack_buffer*, void*, c_long);
  void oggpack_reset (oggpack_buffer*);
  void oggpack_writeclear (oggpack_buffer*);
  void oggpack_readinit (oggpack_buffer*, ubyte*, int);
  void oggpack_write (oggpack_buffer*, c_ulong, int);
  c_long oggpack_look (oggpack_buffer*, int);
  c_long oggpack_look1 (oggpack_buffer*);
  void oggpack_adv (oggpack_buffer*, int);
  void oggpack_adv1 (oggpack_buffer*);
  c_long oggpack_read (oggpack_buffer*, int);
  c_long oggpack_read1 (oggpack_buffer*);
  c_long oggpack_bytes (oggpack_buffer*);
  c_long oggpack_bits (oggpack_buffer*);
  ubyte oggpack_get_buffer (oggpack_buffer*);
  void oggpackB_writeinit (oggpack_buffer*);
  void oggpackB_writecheck (oggpack_buffer*);
  void oggpackB_writetrunc (oggpack_buffer*, c_long);
  void oggpackB_writealign (oggpack_buffer*);
  void oggpackB_writecopy (oggpack_buffer*, void*, c_long);
  void oggpackB_reset (oggpack_buffer*);
  void oggpackB_writeclear (oggpack_buffer*);
  void oggpackB_readinit (oggpack_buffer*, ubyte*, int);
  void oggpackB_write (oggpack_buffer*, uint, c_long);
  c_long oggpackB_look (oggpack_buffer*, int);
  c_long oggpackB_look1 (oggpack_buffer*);
  void oggpackB_adv (oggpack_buffer*, int);
  void oggpackB_adv1 (oggpack_buffer*);
  c_long oggpackB_read (oggpack_buffer*, int);
  c_long oggpackB_read1 (oggpack_buffer*);
  c_long oggpackB_bytes (oggpack_buffer*);
  c_long oggpackB_bits (oggpack_buffer*);
  ubyte oggpackB_get_buffer (oggpack_buffer*);
  int ogg_stream_packetin (ogg_stream_state*, ogg_packet*);
  int ogg_stream_iovecin (ogg_stream_state*, ogg_iovec_t*, int, c_long, ogg_int64_t);
  int ogg_stream_pageout (ogg_stream_state*, ogg_page*);
  int ogg_stream_pageout_fill (ogg_stream_state*, ogg_page*, int);
  int ogg_stream_flush (ogg_stream_state*, ogg_page*);
  int ogg_stream_flush_fill (ogg_stream_state*, ogg_page*);
  int ogg_sync_init (ogg_sync_state*);
  int ogg_sync_clear (ogg_sync_state*);
  int ogg_sync_reset (ogg_sync_state*);
  int ogg_sync_destroy (ogg_sync_state*);
  int ogg_sync_check (ogg_sync_state*);
  ubyte* ogg_sync_buffer (ogg_sync_state*, c_long); //??? byte?
  int ogg_sync_wrote (ogg_sync_state*, c_long);
  c_long ogg_sync_pageseek (ogg_sync_state*,ogg_page*);
  int ogg_sync_pageout (ogg_sync_state*, ogg_page*);
  int ogg_stream_pagein (ogg_stream_state*, ogg_page*);
  int ogg_stream_packetout (ogg_stream_state*,ogg_packet*);
  int ogg_stream_packetpeek (ogg_stream_state*,ogg_packet*);
  int ogg_stream_init (ogg_stream_state*,int serialno);
  int ogg_stream_clear (ogg_stream_state*);
  int ogg_stream_reset (ogg_stream_state*);
  int ogg_stream_reset_serialno (ogg_stream_state*,int serialno);
  int ogg_stream_destroy (ogg_stream_state*);
  int ogg_stream_check (ogg_stream_state*);
  int ogg_stream_eos (ogg_stream_state*);
  void ogg_page_checksum_set (ogg_page*);
  int ogg_page_version (ogg_page*);
  int ogg_page_continued (ogg_page*);
  int ogg_page_bos (ogg_page*);
  int ogg_page_eos (ogg_page*);
  ogg_int64_t ogg_page_granulepos (ogg_page*);
  int ogg_page_serialno (ogg_page*);
  c_long ogg_page_pageno (ogg_page*);
  int ogg_page_packets (ogg_page*);
  void ogg_packet_clear (ogg_packet*);
}
