module iv.x11.keysym is aliced;

import iv.x11.x11 : KeySym;

enum XK_VoidSymbol = cast(KeySym)0xffffff; /* Void symbol */

enum : KeySym {
  /*
   * TTY function keys, cleverly chosen to map to ASCII, for convenience of
   * programming, but could have been arbitrary (at the cost of lookup
   * tables in client code).
   */
  XK_BackSpace   = cast(KeySym)0xff08, /* Back space, back char */
  XK_Tab         = cast(KeySym)0xff09,
  XK_Linefeed    = cast(KeySym)0xff0a, /* Linefeed, LF */
  XK_Clear       = cast(KeySym)0xff0b,
  XK_Return      = cast(KeySym)0xff0d, /* Return, enter */
  XK_Pause       = cast(KeySym)0xff13, /* Pause, hold */
  XK_Scroll_Lock = cast(KeySym)0xff14,
  XK_Sys_Req     = cast(KeySym)0xff15,
  XK_Escape      = cast(KeySym)0xff1b,
  XK_Delete      = cast(KeySym)0xffff, /* Delete, rubout */

  /* International & multi-key character composition */
  XK_Multi_key         = cast(KeySym)0xff20, /* Multi-key character compose */
  XK_Codeinput         = cast(KeySym)0xff37,
  XK_SingleCandidate   = cast(KeySym)0xff3c,
  XK_MultipleCandidate = cast(KeySym)0xff3d,
  XK_PreviousCandidate = cast(KeySym)0xff3e,

  /* Japanese keyboard support */
  XK_Kanji             = cast(KeySym)0xff21, /* Kanji, Kanji convert */
  XK_Muhenkan          = cast(KeySym)0xff22, /* Cancel Conversion */
  XK_Henkan_Mode       = cast(KeySym)0xff23, /* Start/Stop Conversion */
  XK_Henkan            = cast(KeySym)0xff23, /* Alias for Henkan_Mode */
  XK_Romaji            = cast(KeySym)0xff24, /* to Romaji */
  XK_Hiragana          = cast(KeySym)0xff25, /* to Hiragana */
  XK_Katakana          = cast(KeySym)0xff26, /* to Katakana */
  XK_Hiragana_Katakana = cast(KeySym)0xff27, /* Hiragana/Katakana toggle */
  XK_Zenkaku           = cast(KeySym)0xff28, /* to Zenkaku */
  XK_Hankaku           = cast(KeySym)0xff29, /* to Hankaku */
  XK_Zenkaku_Hankaku   = cast(KeySym)0xff2a, /* Zenkaku/Hankaku toggle */
  XK_Touroku           = cast(KeySym)0xff2b, /* Add to Dictionary */
  XK_Massyo            = cast(KeySym)0xff2c, /* Delete from Dictionary */
  XK_Kana_Lock         = cast(KeySym)0xff2d, /* Kana Lock */
  XK_Kana_Shift        = cast(KeySym)0xff2e, /* Kana Shift */
  XK_Eisu_Shift        = cast(KeySym)0xff2f, /* Alphanumeric Shift */
  XK_Eisu_toggle       = cast(KeySym)0xff30, /* Alphanumeric toggle */
  XK_Kanji_Bangou      = cast(KeySym)0xff37, /* Codeinput */
  XK_Zen_Koho          = cast(KeySym)0xff3d, /* Multiple/All Candidate(s) */
  XK_Mae_Koho          = cast(KeySym)0xff3e, /* Previous Candidate */

  /* 0xff31 thru 0xff3f are under XK_KOREAN */

  /* Cursor control & motion */
  XK_Home      = cast(KeySym)0xff50,
  XK_Left      = cast(KeySym)0xff51, /* Move left, left arrow */
  XK_Up        = cast(KeySym)0xff52, /* Move up, up arrow */
  XK_Right     = cast(KeySym)0xff53, /* Move right, right arrow */
  XK_Down      = cast(KeySym)0xff54, /* Move down, down arrow */
  XK_Prior     = cast(KeySym)0xff55, /* Prior, previous */
  XK_Page_Up   = cast(KeySym)0xff55,
  XK_Next      = cast(KeySym)0xff56, /* Next */
  XK_Page_Down = cast(KeySym)0xff56,
  XK_End       = cast(KeySym)0xff57, /* EOL */
  XK_Begin     = cast(KeySym)0xff58, /* BOL */

  /* Misc functions */
  XK_Select        = cast(KeySym)0xff60, /* Select, mark */
  XK_Print         = cast(KeySym)0xff61,
  XK_Execute       = cast(KeySym)0xff62, /* Execute, run, do */
  XK_Insert        = cast(KeySym)0xff63, /* Insert, insert here */
  XK_Undo          = cast(KeySym)0xff65,
  XK_Redo          = cast(KeySym)0xff66, /* Redo, again */
  XK_Menu          = cast(KeySym)0xff67,
  XK_Find          = cast(KeySym)0xff68, /* Find, search */
  XK_Cancel        = cast(KeySym)0xff69, /* Cancel, stop, abort, exit */
  XK_Help          = cast(KeySym)0xff6a, /* Help */
  XK_break         = cast(KeySym)0xff6b,
  XK_Mode_switch   = cast(KeySym)0xff7e, /* Character set switch */
  XK_script_switch = cast(KeySym)0xff7e, /* Alias for mode_switch */
  XK_Num_Lock      = cast(KeySym)0xff7f,

  /* Keypad functions, keypad numbers cleverly chosen to map to ASCII */
  XK_KP_Space     = cast(KeySym)0xff80, /* Space */
  XK_KP_Tab       = cast(KeySym)0xff89,
  XK_KP_Enter     = cast(KeySym)0xff8d, /* Enter */
  XK_KP_F1        = cast(KeySym)0xff91, /* PF1, KP_A, ... */
  XK_KP_F2        = cast(KeySym)0xff92,
  XK_KP_F3        = cast(KeySym)0xff93,
  XK_KP_F4        = cast(KeySym)0xff94,
  XK_KP_Home      = cast(KeySym)0xff95,
  XK_KP_Left      = cast(KeySym)0xff96,
  XK_KP_Up        = cast(KeySym)0xff97,
  XK_KP_Right     = cast(KeySym)0xff98,
  XK_KP_Down      = cast(KeySym)0xff99,
  XK_KP_Prior     = cast(KeySym)0xff9a,
  XK_KP_Page_Up   = cast(KeySym)0xff9a,
  XK_KP_Next      = cast(KeySym)0xff9b,
  XK_KP_Page_Down = cast(KeySym)0xff9b,
  XK_KP_End       = cast(KeySym)0xff9c,
  XK_KP_Begin     = cast(KeySym)0xff9d,
  XK_KP_Insert    = cast(KeySym)0xff9e,
  XK_KP_Delete    = cast(KeySym)0xff9f,
  XK_KP_Equal     = cast(KeySym)0xffbd, /* Equals */
  XK_KP_Multiply  = cast(KeySym)0xffaa,
  XK_KP_Add       = cast(KeySym)0xffab,
  XK_KP_Separator = cast(KeySym)0xffac, /* Separator, often comma */
  XK_KP_Subtract  = cast(KeySym)0xffad,
  XK_KP_Decimal   = cast(KeySym)0xffae,
  XK_KP_Divide    = cast(KeySym)0xffaf,

  XK_KP_0 = cast(KeySym)0xffb0,
  XK_KP_1 = cast(KeySym)0xffb1,
  XK_KP_2 = cast(KeySym)0xffb2,
  XK_KP_3 = cast(KeySym)0xffb3,
  XK_KP_4 = cast(KeySym)0xffb4,
  XK_KP_5 = cast(KeySym)0xffb5,
  XK_KP_6 = cast(KeySym)0xffb6,
  XK_KP_7 = cast(KeySym)0xffb7,
  XK_KP_8 = cast(KeySym)0xffb8,
  XK_KP_9 = cast(KeySym)0xffb9,

  /*
   * Auxiliary functions, note the duplicate definitions for left and right
   * function keys,  Sun keyboards and a few other manufacturers have such
   * function key groups on the left and/or right sides of the keyboard.
   * We've not found a keyboard with more than 35 function keys total.
   */
  XK_F1  = cast(KeySym)0xffbe,
  XK_F2  = cast(KeySym)0xffbf,
  XK_F3  = cast(KeySym)0xffc0,
  XK_F4  = cast(KeySym)0xffc1,
  XK_F5  = cast(KeySym)0xffc2,
  XK_F6  = cast(KeySym)0xffc3,
  XK_F7  = cast(KeySym)0xffc4,
  XK_F8  = cast(KeySym)0xffc5,
  XK_F9  = cast(KeySym)0xffc6,
  XK_F10 = cast(KeySym)0xffc7,
  XK_F11 = cast(KeySym)0xffc8,
  XK_L1  = cast(KeySym)0xffc8,
  XK_F12 = cast(KeySym)0xffc9,
  XK_L2  = cast(KeySym)0xffc9,
  XK_F13 = cast(KeySym)0xffca,
  XK_L3  = cast(KeySym)0xffca,
  XK_F14 = cast(KeySym)0xffcb,
  XK_L4  = cast(KeySym)0xffcb,
  XK_F15 = cast(KeySym)0xffcc,
  XK_L5  = cast(KeySym)0xffcc,
  XK_F16 = cast(KeySym)0xffcd,
  XK_L6  = cast(KeySym)0xffcd,
  XK_F17 = cast(KeySym)0xffce,
  XK_L7  = cast(KeySym)0xffce,
  XK_F18 = cast(KeySym)0xffcf,
  XK_L8  = cast(KeySym)0xffcf,
  XK_F19 = cast(KeySym)0xffd0,
  XK_L9  = cast(KeySym)0xffd0,
  XK_F20 = cast(KeySym)0xffd1,
  XK_L10 = cast(KeySym)0xffd1,
  XK_F21 = cast(KeySym)0xffd2,
  XK_R1  = cast(KeySym)0xffd2,
  XK_F22 = cast(KeySym)0xffd3,
  XK_R2  = cast(KeySym)0xffd3,
  XK_F23 = cast(KeySym)0xffd4,
  XK_R3  = cast(KeySym)0xffd4,
  XK_F24 = cast(KeySym)0xffd5,
  XK_R4  = cast(KeySym)0xffd5,
  XK_F25 = cast(KeySym)0xffd6,
  XK_R5  = cast(KeySym)0xffd6,
  XK_F26 = cast(KeySym)0xffd7,
  XK_R6  = cast(KeySym)0xffd7,
  XK_F27 = cast(KeySym)0xffd8,
  XK_R7  = cast(KeySym)0xffd8,
  XK_F28 = cast(KeySym)0xffd9,
  XK_R8  = cast(KeySym)0xffd9,
  XK_F29 = cast(KeySym)0xffda,
  XK_R9  = cast(KeySym)0xffda,
  XK_F30 = cast(KeySym)0xffdb,
  XK_R10 = cast(KeySym)0xffdb,
  XK_F31 = cast(KeySym)0xffdc,
  XK_R11 = cast(KeySym)0xffdc,
  XK_F32 = cast(KeySym)0xffdd,
  XK_R12 = cast(KeySym)0xffdd,
  XK_F33 = cast(KeySym)0xffde,
  XK_R13 = cast(KeySym)0xffde,
  XK_F34 = cast(KeySym)0xffdf,
  XK_R14 = cast(KeySym)0xffdf,
  XK_F35 = cast(KeySym)0xffe0,
  XK_R15 = cast(KeySym)0xffe0,

  /* Modifiers */
  XK_Shift_L    = cast(KeySym)0xffe1, /* Left shift */
  XK_Shift_R    = cast(KeySym)0xffe2, /* Right shift */
  XK_Control_L  = cast(KeySym)0xffe3, /* Left control */
  XK_Control_R  = cast(KeySym)0xffe4, /* Right control */
  XK_Caps_Lock  = cast(KeySym)0xffe5, /* Caps lock */
  XK_Shift_Lock = cast(KeySym)0xffe6, /* Shift lock */

  XK_Meta_L     = cast(KeySym)0xffe7, /* Left meta */
  XK_Meta_R     = cast(KeySym)0xffe8, /* Right meta */
  XK_Alt_L      = cast(KeySym)0xffe9, /* Left alt */
  XK_Alt_R      = cast(KeySym)0xffea, /* Right alt */
  XK_Super_L    = cast(KeySym)0xffeb, /* Left super */
  XK_Super_R    = cast(KeySym)0xffec, /* Right super */
  XK_Hyper_L    = cast(KeySym)0xffed, /* Left hyper */
  XK_Hyper_R    = cast(KeySym)0xffee, /* Right hyper */

  /*
   * Keyboard (XKB) Extension function and modifier keys
   * (from Appendix C of "The X Keyboard Extension: Protocol Specification")
   * Byte 3 = cast(KeySym)0xfe
   */
  XK_ISO_Lock             = cast(KeySym)0xfe01,
  XK_ISO_Level2_Latch     = cast(KeySym)0xfe02,
  XK_ISO_Level3_Shift     = cast(KeySym)0xfe03,
  XK_ISO_Level3_Latch     = cast(KeySym)0xfe04,
  XK_ISO_Level3_Lock      = cast(KeySym)0xfe05,
  XK_ISO_Level5_Shift     = cast(KeySym)0xfe11,
  XK_ISO_Level5_Latch     = cast(KeySym)0xfe12,
  XK_ISO_Level5_Lock      = cast(KeySym)0xfe13,
  XK_ISO_Group_Shift      = cast(KeySym)0xff7e, /* Alias for mode_switch */
  XK_ISO_Group_Latch      = cast(KeySym)0xfe06,
  XK_ISO_Group_Lock       = cast(KeySym)0xfe07,
  XK_ISO_Next_Group       = cast(KeySym)0xfe08,
  XK_ISO_Next_Group_Lock  = cast(KeySym)0xfe09,
  XK_ISO_Prev_Group       = cast(KeySym)0xfe0a,
  XK_ISO_Prev_Group_Lock  = cast(KeySym)0xfe0b,
  XK_ISO_First_Group      = cast(KeySym)0xfe0c,
  XK_ISO_First_Group_Lock = cast(KeySym)0xfe0d,
  XK_ISO_Last_Group       = cast(KeySym)0xfe0e,
  XK_ISO_Last_Group_Lock  = cast(KeySym)0xfe0f,

  XK_ISO_Left_Tab                = cast(KeySym)0xfe20,
  XK_ISO_Move_Line_Up            = cast(KeySym)0xfe21,
  XK_ISO_Move_Line_Down          = cast(KeySym)0xfe22,
  XK_ISO_Partial_Line_Up         = cast(KeySym)0xfe23,
  XK_ISO_Partial_Line_Down       = cast(KeySym)0xfe24,
  XK_ISO_Partial_Space_Left      = cast(KeySym)0xfe25,
  XK_ISO_Partial_Space_Right     = cast(KeySym)0xfe26,
  XK_ISO_Set_Margin_Left         = cast(KeySym)0xfe27,
  XK_ISO_Set_Margin_Right        = cast(KeySym)0xfe28,
  XK_ISO_Release_Margin_Left     = cast(KeySym)0xfe29,
  XK_ISO_Release_Margin_Right    = cast(KeySym)0xfe2a,
  XK_ISO_Release_Both_Margins    = cast(KeySym)0xfe2b,
  XK_ISO_Fast_Cursor_Left        = cast(KeySym)0xfe2c,
  XK_ISO_Fast_Cursor_Right       = cast(KeySym)0xfe2d,
  XK_ISO_Fast_Cursor_Up          = cast(KeySym)0xfe2e,
  XK_ISO_Fast_Cursor_Down        = cast(KeySym)0xfe2f,
  XK_ISO_Continuous_Underline    = cast(KeySym)0xfe30,
  XK_ISO_Discontinuous_Underline = cast(KeySym)0xfe31,
  XK_ISO_Emphasize               = cast(KeySym)0xfe32,
  XK_ISO_Center_Object           = cast(KeySym)0xfe33,
  XK_ISO_Enter                   = cast(KeySym)0xfe34,

  XK_dead_grave              = cast(KeySym)0xfe50,
  XK_dead_acute              = cast(KeySym)0xfe51,
  XK_dead_circumflex         = cast(KeySym)0xfe52,
  XK_dead_tilde              = cast(KeySym)0xfe53,
  XK_dead_perispomeni        = cast(KeySym)0xfe53, /* alias for dead_tilde */
  XK_dead_macron             = cast(KeySym)0xfe54,
  XK_dead_breve              = cast(KeySym)0xfe55,
  XK_dead_abovedot           = cast(KeySym)0xfe56,
  XK_dead_diaeresis          = cast(KeySym)0xfe57,
  XK_dead_abovering          = cast(KeySym)0xfe58,
  XK_dead_doubleacute        = cast(KeySym)0xfe59,
  XK_dead_caron              = cast(KeySym)0xfe5a,
  XK_dead_cedilla            = cast(KeySym)0xfe5b,
  XK_dead_ogonek             = cast(KeySym)0xfe5c,
  XK_dead_iota               = cast(KeySym)0xfe5d,
  XK_dead_voiced_sound       = cast(KeySym)0xfe5e,
  XK_dead_semivoiced_sound   = cast(KeySym)0xfe5f,
  XK_dead_belowdot           = cast(KeySym)0xfe60,
  XK_dead_hook               = cast(KeySym)0xfe61,
  XK_dead_horn               = cast(KeySym)0xfe62,
  XK_dead_stroke             = cast(KeySym)0xfe63,
  XK_dead_abovecomma         = cast(KeySym)0xfe64,
  XK_dead_psili              = cast(KeySym)0xfe64, /* alias for dead_abovecomma */
  XK_dead_abovereversedcomma = cast(KeySym)0xfe65,
  XK_dead_dasia              = cast(KeySym)0xfe65, /* alias for dead_abovereversedcomma */
  XK_dead_doublegrave        = cast(KeySym)0xfe66,
  XK_dead_belowring          = cast(KeySym)0xfe67,
  XK_dead_belowmacron        = cast(KeySym)0xfe68,
  XK_dead_belowcircumflex    = cast(KeySym)0xfe69,
  XK_dead_belowtilde         = cast(KeySym)0xfe6a,
  XK_dead_belowbreve         = cast(KeySym)0xfe6b,
  XK_dead_belowdiaeresis     = cast(KeySym)0xfe6c,
  XK_dead_invertedbreve      = cast(KeySym)0xfe6d,
  XK_dead_belowcomma         = cast(KeySym)0xfe6e,
  XK_dead_currency           = cast(KeySym)0xfe6f,

  /* dead vowels for universal syllable entry */
  XK_dead_a             = cast(KeySym)0xfe80,
  XK_dead_A             = cast(KeySym)0xfe81,
  XK_dead_e             = cast(KeySym)0xfe82,
  XK_dead_E             = cast(KeySym)0xfe83,
  XK_dead_i             = cast(KeySym)0xfe84,
  XK_dead_I             = cast(KeySym)0xfe85,
  XK_dead_o             = cast(KeySym)0xfe86,
  XK_dead_O             = cast(KeySym)0xfe87,
  XK_dead_u             = cast(KeySym)0xfe88,
  XK_dead_U             = cast(KeySym)0xfe89,
  XK_dead_small_schwa   = cast(KeySym)0xfe8a,
  XK_dead_capital_schwa = cast(KeySym)0xfe8b,

  XK_First_Virtual_Screen = cast(KeySym)0xfed0,
  XK_Prev_Virtual_Screen  = cast(KeySym)0xfed1,
  XK_Next_Virtual_Screen  = cast(KeySym)0xfed2,
  XK_Last_Virtual_Screen  = cast(KeySym)0xfed4,
  XK_Terminate_Server     = cast(KeySym)0xfed5,

  XK_AccessX_Enable          = cast(KeySym)0xfe70,
  XK_AccessX_Feedback_Enable = cast(KeySym)0xfe71,
  XK_RepeatKeys_Enable       = cast(KeySym)0xfe72,
  XK_SlowKeys_Enable         = cast(KeySym)0xfe73,
  XK_BounceKeys_Enable       = cast(KeySym)0xfe74,
  XK_StickyKeys_Enable       = cast(KeySym)0xfe75,
  XK_MouseKeys_Enable        = cast(KeySym)0xfe76,
  XK_MouseKeys_Accel_Enable  = cast(KeySym)0xfe77,
  XK_Overlay1_Enable         = cast(KeySym)0xfe78,
  XK_Overlay2_Enable         = cast(KeySym)0xfe79,
  XK_AudibleBell_Enable      = cast(KeySym)0xfe7a,

  XK_Pointer_Left          = cast(KeySym)0xfee0,
  XK_Pointer_Right         = cast(KeySym)0xfee1,
  XK_Pointer_Up            = cast(KeySym)0xfee2,
  XK_Pointer_Down          = cast(KeySym)0xfee3,
  XK_Pointer_UpLeft        = cast(KeySym)0xfee4,
  XK_Pointer_UpRight       = cast(KeySym)0xfee5,
  XK_Pointer_DownLeft      = cast(KeySym)0xfee6,
  XK_Pointer_DownRight     = cast(KeySym)0xfee7,
  XK_Pointer_Button_Dflt   = cast(KeySym)0xfee8,
  XK_Pointer_Button1       = cast(KeySym)0xfee9,
  XK_Pointer_Button2       = cast(KeySym)0xfeea,
  XK_Pointer_Button3       = cast(KeySym)0xfeeb,
  XK_Pointer_Button4       = cast(KeySym)0xfeec,
  XK_Pointer_Button5       = cast(KeySym)0xfeed,
  XK_Pointer_DblClick_Dflt = cast(KeySym)0xfeee,
  XK_Pointer_DblClick1     = cast(KeySym)0xfeef,
  XK_Pointer_DblClick2     = cast(KeySym)0xfef0,
  XK_Pointer_DblClick3     = cast(KeySym)0xfef1,
  XK_Pointer_DblClick4     = cast(KeySym)0xfef2,
  XK_Pointer_DblClick5     = cast(KeySym)0xfef3,
  XK_Pointer_Drag_Dflt     = cast(KeySym)0xfef4,
  XK_Pointer_Drag1         = cast(KeySym)0xfef5,
  XK_Pointer_Drag2         = cast(KeySym)0xfef6,
  XK_Pointer_Drag3         = cast(KeySym)0xfef7,
  XK_Pointer_Drag4         = cast(KeySym)0xfef8,
  XK_Pointer_Drag5         = cast(KeySym)0xfefd,

  XK_Pointer_EnableKeys  = cast(KeySym)0xfef9,
  XK_Pointer_Accelerate  = cast(KeySym)0xfefa,
  XK_Pointer_DfltBtnNext = cast(KeySym)0xfefb,
  XK_Pointer_DfltBtnPrev = cast(KeySym)0xfefc,

  /*
   * Latin 1
   * (ISO/IEC 8859-1 = cast(KeySym)Unicode U+0020..U+00FF)
   * Byte 3 = cast(KeySym)0
   */
  XK_space        = cast(KeySym)0x0020, /* U+0020 SPACE */
  XK_exclam       = cast(KeySym)0x0021, /* U+0021 EXCLAMATION MARK */
  XK_quotedbl     = cast(KeySym)0x0022, /* U+0022 QUOTATION MARK */
  XK_numbersign   = cast(KeySym)0x0023, /* U+0023 NUMBER SIGN */
  XK_dollar       = cast(KeySym)0x0024, /* U+0024 DOLLAR SIGN */
  XK_percent      = cast(KeySym)0x0025, /* U+0025 PERCENT SIGN */
  XK_ampersand    = cast(KeySym)0x0026, /* U+0026 AMPERSAND */
  XK_apostrophe   = cast(KeySym)0x0027, /* U+0027 APOSTROPHE */
  XK_quoteright   = cast(KeySym)0x0027, /* deprecated */
  XK_parenleft    = cast(KeySym)0x0028, /* U+0028 LEFT PARENTHESIS */
  XK_parenright   = cast(KeySym)0x0029, /* U+0029 RIGHT PARENTHESIS */
  XK_asterisk     = cast(KeySym)0x002a, /* U+002A ASTERISK */
  XK_plus         = cast(KeySym)0x002b, /* U+002B PLUS SIGN */
  XK_comma        = cast(KeySym)0x002c, /* U+002C COMMA */
  XK_minus        = cast(KeySym)0x002d, /* U+002D HYPHEN-MINUS */
  XK_period       = cast(KeySym)0x002e, /* U+002E FULL STOP */
  XK_slash        = cast(KeySym)0x002f, /* U+002F SOLIDUS */
  XK_0            = cast(KeySym)0x0030, /* U+0030 DIGIT ZERO */
  XK_1            = cast(KeySym)0x0031, /* U+0031 DIGIT ONE */
  XK_2            = cast(KeySym)0x0032, /* U+0032 DIGIT TWO */
  XK_3            = cast(KeySym)0x0033, /* U+0033 DIGIT THREE */
  XK_4            = cast(KeySym)0x0034, /* U+0034 DIGIT FOUR */
  XK_5            = cast(KeySym)0x0035, /* U+0035 DIGIT FIVE */
  XK_6            = cast(KeySym)0x0036, /* U+0036 DIGIT SIX */
  XK_7            = cast(KeySym)0x0037, /* U+0037 DIGIT SEVEN */
  XK_8            = cast(KeySym)0x0038, /* U+0038 DIGIT EIGHT */
  XK_9            = cast(KeySym)0x0039, /* U+0039 DIGIT NINE */
  XK_colon        = cast(KeySym)0x003a, /* U+003A COLON */
  XK_semicolon    = cast(KeySym)0x003b, /* U+003B SEMICOLON */
  XK_less         = cast(KeySym)0x003c, /* U+003C LESS-THAN SIGN */
  XK_equal        = cast(KeySym)0x003d, /* U+003D EQUALS SIGN */
  XK_greater      = cast(KeySym)0x003e, /* U+003E GREATER-THAN SIGN */
  XK_question     = cast(KeySym)0x003f, /* U+003F QUESTION MARK */
  XK_at           = cast(KeySym)0x0040, /* U+0040 COMMERCIAL AT */
  XK_A            = cast(KeySym)0x0041, /* U+0041 LATIN CAPITAL LETTER A */
  XK_B            = cast(KeySym)0x0042, /* U+0042 LATIN CAPITAL LETTER B */
  XK_C            = cast(KeySym)0x0043, /* U+0043 LATIN CAPITAL LETTER C */
  XK_D            = cast(KeySym)0x0044, /* U+0044 LATIN CAPITAL LETTER D */
  XK_E            = cast(KeySym)0x0045, /* U+0045 LATIN CAPITAL LETTER E */
  XK_F            = cast(KeySym)0x0046, /* U+0046 LATIN CAPITAL LETTER F */
  XK_G            = cast(KeySym)0x0047, /* U+0047 LATIN CAPITAL LETTER G */
  XK_H            = cast(KeySym)0x0048, /* U+0048 LATIN CAPITAL LETTER H */
  XK_I            = cast(KeySym)0x0049, /* U+0049 LATIN CAPITAL LETTER I */
  XK_J            = cast(KeySym)0x004a, /* U+004A LATIN CAPITAL LETTER J */
  XK_K            = cast(KeySym)0x004b, /* U+004B LATIN CAPITAL LETTER K */
  XK_L            = cast(KeySym)0x004c, /* U+004C LATIN CAPITAL LETTER L */
  XK_M            = cast(KeySym)0x004d, /* U+004D LATIN CAPITAL LETTER M */
  XK_N            = cast(KeySym)0x004e, /* U+004E LATIN CAPITAL LETTER N */
  XK_O            = cast(KeySym)0x004f, /* U+004F LATIN CAPITAL LETTER O */
  XK_P            = cast(KeySym)0x0050, /* U+0050 LATIN CAPITAL LETTER P */
  XK_Q            = cast(KeySym)0x0051, /* U+0051 LATIN CAPITAL LETTER Q */
  XK_R            = cast(KeySym)0x0052, /* U+0052 LATIN CAPITAL LETTER R */
  XK_S            = cast(KeySym)0x0053, /* U+0053 LATIN CAPITAL LETTER S */
  XK_T            = cast(KeySym)0x0054, /* U+0054 LATIN CAPITAL LETTER T */
  XK_U            = cast(KeySym)0x0055, /* U+0055 LATIN CAPITAL LETTER U */
  XK_V            = cast(KeySym)0x0056, /* U+0056 LATIN CAPITAL LETTER V */
  XK_W            = cast(KeySym)0x0057, /* U+0057 LATIN CAPITAL LETTER W */
  XK_X            = cast(KeySym)0x0058, /* U+0058 LATIN CAPITAL LETTER X */
  XK_Y            = cast(KeySym)0x0059, /* U+0059 LATIN CAPITAL LETTER Y */
  XK_Z            = cast(KeySym)0x005a, /* U+005A LATIN CAPITAL LETTER Z */
  XK_bracketleft  = cast(KeySym)0x005b, /* U+005B LEFT SQUARE BRACKET */
  XK_backslash    = cast(KeySym)0x005c, /* U+005C REVERSE SOLIDUS */
  XK_bracketright = cast(KeySym)0x005d, /* U+005D RIGHT SQUARE BRACKET */
  XK_asciicircum  = cast(KeySym)0x005e, /* U+005E CIRCUMFLEX ACCENT */
  XK_underscore   = cast(KeySym)0x005f, /* U+005F LOW LINE */
  XK_grave        = cast(KeySym)0x0060, /* U+0060 GRAVE ACCENT */
  XK_quoteleft    = cast(KeySym)0x0060, /* deprecated */
  XK_a            = cast(KeySym)0x0061, /* U+0061 LATIN SMALL LETTER A */
  XK_b            = cast(KeySym)0x0062, /* U+0062 LATIN SMALL LETTER B */
  XK_c            = cast(KeySym)0x0063, /* U+0063 LATIN SMALL LETTER C */
  XK_d            = cast(KeySym)0x0064, /* U+0064 LATIN SMALL LETTER D */
  XK_e            = cast(KeySym)0x0065, /* U+0065 LATIN SMALL LETTER E */
  XK_f            = cast(KeySym)0x0066, /* U+0066 LATIN SMALL LETTER F */
  XK_g            = cast(KeySym)0x0067, /* U+0067 LATIN SMALL LETTER G */
  XK_h            = cast(KeySym)0x0068, /* U+0068 LATIN SMALL LETTER H */
  XK_i            = cast(KeySym)0x0069, /* U+0069 LATIN SMALL LETTER I */
  XK_j            = cast(KeySym)0x006a, /* U+006A LATIN SMALL LETTER J */
  XK_k            = cast(KeySym)0x006b, /* U+006B LATIN SMALL LETTER K */
  XK_l            = cast(KeySym)0x006c, /* U+006C LATIN SMALL LETTER L */
  XK_m            = cast(KeySym)0x006d, /* U+006D LATIN SMALL LETTER M */
  XK_n            = cast(KeySym)0x006e, /* U+006E LATIN SMALL LETTER N */
  XK_o            = cast(KeySym)0x006f, /* U+006F LATIN SMALL LETTER O */
  XK_p            = cast(KeySym)0x0070, /* U+0070 LATIN SMALL LETTER P */
  XK_q            = cast(KeySym)0x0071, /* U+0071 LATIN SMALL LETTER Q */
  XK_r            = cast(KeySym)0x0072, /* U+0072 LATIN SMALL LETTER R */
  XK_s            = cast(KeySym)0x0073, /* U+0073 LATIN SMALL LETTER S */
  XK_t            = cast(KeySym)0x0074, /* U+0074 LATIN SMALL LETTER T */
  XK_u            = cast(KeySym)0x0075, /* U+0075 LATIN SMALL LETTER U */
  XK_v            = cast(KeySym)0x0076, /* U+0076 LATIN SMALL LETTER V */
  XK_w            = cast(KeySym)0x0077, /* U+0077 LATIN SMALL LETTER W */
  XK_x            = cast(KeySym)0x0078, /* U+0078 LATIN SMALL LETTER X */
  XK_y            = cast(KeySym)0x0079, /* U+0079 LATIN SMALL LETTER Y */
  XK_z            = cast(KeySym)0x007a, /* U+007A LATIN SMALL LETTER Z */
  XK_braceleft    = cast(KeySym)0x007b, /* U+007B LEFT CURLY BRACKET */
  XK_bar          = cast(KeySym)0x007c, /* U+007C VERTICAL LINE */
  XK_braceright   = cast(KeySym)0x007d, /* U+007D RIGHT CURLY BRACKET */
  XK_asciitilde   = cast(KeySym)0x007e, /* U+007E TILDE */

  /*
   * Cyrillic
   * Byte 3 = cast(KeySym)6
   */
  XK_Cyrillic_GHE_bar        = cast(KeySym)0x1000492, /* U+0492 CYRILLIC CAPITAL LETTER GHE WITH STROKE */
  XK_Cyrillic_ghe_bar        = cast(KeySym)0x1000493, /* U+0493 CYRILLIC SMALL LETTER GHE WITH STROKE */
  XK_Cyrillic_ZHE_descender  = cast(KeySym)0x1000496, /* U+0496 CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER */
  XK_Cyrillic_zhe_descender  = cast(KeySym)0x1000497, /* U+0497 CYRILLIC SMALL LETTER ZHE WITH DESCENDER */
  XK_Cyrillic_KA_descender   = cast(KeySym)0x100049a, /* U+049A CYRILLIC CAPITAL LETTER KA WITH DESCENDER */
  XK_Cyrillic_ka_descender   = cast(KeySym)0x100049b, /* U+049B CYRILLIC SMALL LETTER KA WITH DESCENDER */
  XK_Cyrillic_KA_vertstroke  = cast(KeySym)0x100049c, /* U+049C CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE */
  XK_Cyrillic_ka_vertstroke  = cast(KeySym)0x100049d, /* U+049D CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE */
  XK_Cyrillic_EN_descender   = cast(KeySym)0x10004a2, /* U+04A2 CYRILLIC CAPITAL LETTER EN WITH DESCENDER */
  XK_Cyrillic_en_descender   = cast(KeySym)0x10004a3, /* U+04A3 CYRILLIC SMALL LETTER EN WITH DESCENDER */
  XK_Cyrillic_U_straight     = cast(KeySym)0x10004ae, /* U+04AE CYRILLIC CAPITAL LETTER STRAIGHT U */
  XK_Cyrillic_u_straight     = cast(KeySym)0x10004af, /* U+04AF CYRILLIC SMALL LETTER STRAIGHT U */
  XK_Cyrillic_U_straight_bar = cast(KeySym)0x10004b0, /* U+04B0 CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE */
  XK_Cyrillic_u_straight_bar = cast(KeySym)0x10004b1, /* U+04B1 CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE */
  XK_Cyrillic_HA_descender   = cast(KeySym)0x10004b2, /* U+04B2 CYRILLIC CAPITAL LETTER HA WITH DESCENDER */
  XK_Cyrillic_ha_descender   = cast(KeySym)0x10004b3, /* U+04B3 CYRILLIC SMALL LETTER HA WITH DESCENDER */
  XK_Cyrillic_CHE_descender  = cast(KeySym)0x10004b6, /* U+04B6 CYRILLIC CAPITAL LETTER CHE WITH DESCENDER */
  XK_Cyrillic_che_descender  = cast(KeySym)0x10004b7, /* U+04B7 CYRILLIC SMALL LETTER CHE WITH DESCENDER */
  XK_Cyrillic_CHE_vertstroke = cast(KeySym)0x10004b8, /* U+04B8 CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE */
  XK_Cyrillic_che_vertstroke = cast(KeySym)0x10004b9, /* U+04B9 CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE */
  XK_Cyrillic_SHHA           = cast(KeySym)0x10004ba, /* U+04BA CYRILLIC CAPITAL LETTER SHHA */
  XK_Cyrillic_shha           = cast(KeySym)0x10004bb, /* U+04BB CYRILLIC SMALL LETTER SHHA */

  XK_Cyrillic_SCHWA    = cast(KeySym)0x10004d8, /* U+04D8 CYRILLIC CAPITAL LETTER SCHWA */
  XK_Cyrillic_schwa    = cast(KeySym)0x10004d9, /* U+04D9 CYRILLIC SMALL LETTER SCHWA */
  XK_Cyrillic_I_macron = cast(KeySym)0x10004e2, /* U+04E2 CYRILLIC CAPITAL LETTER I WITH MACRON */
  XK_Cyrillic_i_macron = cast(KeySym)0x10004e3, /* U+04E3 CYRILLIC SMALL LETTER I WITH MACRON */
  XK_Cyrillic_O_bar    = cast(KeySym)0x10004e8, /* U+04E8 CYRILLIC CAPITAL LETTER BARRED O */
  XK_Cyrillic_o_bar    = cast(KeySym)0x10004e9, /* U+04E9 CYRILLIC SMALL LETTER BARRED O */
  XK_Cyrillic_U_macron = cast(KeySym)0x10004ee, /* U+04EE CYRILLIC CAPITAL LETTER U WITH MACRON */
  XK_Cyrillic_u_macron = cast(KeySym)0x10004ef, /* U+04EF CYRILLIC SMALL LETTER U WITH MACRON */

  XK_Serbian_dje               = cast(KeySym)0x06a1, /* U+0452 CYRILLIC SMALL LETTER DJE */
  XK_Macedonia_gje             = cast(KeySym)0x06a2, /* U+0453 CYRILLIC SMALL LETTER GJE */
  XK_Cyrillic_io               = cast(KeySym)0x06a3, /* U+0451 CYRILLIC SMALL LETTER IO */
  XK_Ukrainian_ie              = cast(KeySym)0x06a4, /* U+0454 CYRILLIC SMALL LETTER UKRAINIAN IE */
  XK_Ukranian_je               = cast(KeySym)0x06a4, /* deprecated */
  XK_Macedonia_dse             = cast(KeySym)0x06a5, /* U+0455 CYRILLIC SMALL LETTER DZE */
  XK_Ukrainian_i               = cast(KeySym)0x06a6, /* U+0456 CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I */
  XK_Ukranian_i                = cast(KeySym)0x06a6, /* deprecated */
  XK_Ukrainian_yi              = cast(KeySym)0x06a7, /* U+0457 CYRILLIC SMALL LETTER YI */
  XK_Ukranian_yi               = cast(KeySym)0x06a7, /* deprecated */
  XK_Cyrillic_je               = cast(KeySym)0x06a8, /* U+0458 CYRILLIC SMALL LETTER JE */
  XK_Serbian_je                = cast(KeySym)0x06a8, /* deprecated */
  XK_Cyrillic_lje              = cast(KeySym)0x06a9, /* U+0459 CYRILLIC SMALL LETTER LJE */
  XK_Serbian_lje               = cast(KeySym)0x06a9, /* deprecated */
  XK_Cyrillic_nje              = cast(KeySym)0x06aa, /* U+045A CYRILLIC SMALL LETTER NJE */
  XK_Serbian_nje               = cast(KeySym)0x06aa, /* deprecated */
  XK_Serbian_tshe              = cast(KeySym)0x06ab, /* U+045B CYRILLIC SMALL LETTER TSHE */
  XK_Macedonia_kje             = cast(KeySym)0x06ac, /* U+045C CYRILLIC SMALL LETTER KJE */
  XK_Ukrainian_ghe_with_upturn = cast(KeySym)0x06ad, /* U+0491 CYRILLIC SMALL LETTER GHE WITH UPTURN */
  XK_Byelorussian_shortu       = cast(KeySym)0x06ae, /* U+045E CYRILLIC SMALL LETTER SHORT U */
  XK_Cyrillic_dzhe             = cast(KeySym)0x06af, /* U+045F CYRILLIC SMALL LETTER DZHE */
  XK_Serbian_dze               = cast(KeySym)0x06af, /* deprecated */
  XK_numerosign                = cast(KeySym)0x06b0, /* U+2116 NUMERO SIGN */
  XK_Serbian_DJE               = cast(KeySym)0x06b1, /* U+0402 CYRILLIC CAPITAL LETTER DJE */
  XK_Macedonia_GJE             = cast(KeySym)0x06b2, /* U+0403 CYRILLIC CAPITAL LETTER GJE */
  XK_Cyrillic_IO               = cast(KeySym)0x06b3, /* U+0401 CYRILLIC CAPITAL LETTER IO */
  XK_Ukrainian_IE              = cast(KeySym)0x06b4, /* U+0404 CYRILLIC CAPITAL LETTER UKRAINIAN IE */
  XK_Ukranian_JE               = cast(KeySym)0x06b4, /* deprecated */
  XK_Macedonia_DSE             = cast(KeySym)0x06b5, /* U+0405 CYRILLIC CAPITAL LETTER DZE */
  XK_Ukrainian_I               = cast(KeySym)0x06b6, /* U+0406 CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I */
  XK_Ukranian_I                = cast(KeySym)0x06b6, /* deprecated */
  XK_Ukrainian_YI              = cast(KeySym)0x06b7, /* U+0407 CYRILLIC CAPITAL LETTER YI */
  XK_Ukranian_YI               = cast(KeySym)0x06b7, /* deprecated */
  XK_Cyrillic_JE               = cast(KeySym)0x06b8, /* U+0408 CYRILLIC CAPITAL LETTER JE */
  XK_Serbian_JE                = cast(KeySym)0x06b8, /* deprecated */
  XK_Cyrillic_LJE              = cast(KeySym)0x06b9, /* U+0409 CYRILLIC CAPITAL LETTER LJE */
  XK_Serbian_LJE               = cast(KeySym)0x06b9, /* deprecated */
  XK_Cyrillic_NJE              = cast(KeySym)0x06ba, /* U+040A CYRILLIC CAPITAL LETTER NJE */
  XK_Serbian_NJE               = cast(KeySym)0x06ba, /* deprecated */
  XK_Serbian_TSHE              = cast(KeySym)0x06bb, /* U+040B CYRILLIC CAPITAL LETTER TSHE */
  XK_Macedonia_KJE             = cast(KeySym)0x06bc, /* U+040C CYRILLIC CAPITAL LETTER KJE */
  XK_Ukrainian_GHE_WITH_UPTURN = cast(KeySym)0x06bd, /* U+0490 CYRILLIC CAPITAL LETTER GHE WITH UPTURN */
  XK_Byelorussian_SHORTU       = cast(KeySym)0x06be, /* U+040E CYRILLIC CAPITAL LETTER SHORT U */
  XK_Cyrillic_DZHE             = cast(KeySym)0x06bf, /* U+040F CYRILLIC CAPITAL LETTER DZHE */
  XK_Serbian_DZE               = cast(KeySym)0x06bf, /* deprecated */
  XK_Cyrillic_yu               = cast(KeySym)0x06c0, /* U+044E CYRILLIC SMALL LETTER YU */
  XK_Cyrillic_a                = cast(KeySym)0x06c1, /* U+0430 CYRILLIC SMALL LETTER A */
  XK_Cyrillic_be               = cast(KeySym)0x06c2, /* U+0431 CYRILLIC SMALL LETTER BE */
  XK_Cyrillic_tse              = cast(KeySym)0x06c3, /* U+0446 CYRILLIC SMALL LETTER TSE */
  XK_Cyrillic_de               = cast(KeySym)0x06c4, /* U+0434 CYRILLIC SMALL LETTER DE */
  XK_Cyrillic_ie               = cast(KeySym)0x06c5, /* U+0435 CYRILLIC SMALL LETTER IE */
  XK_Cyrillic_ef               = cast(KeySym)0x06c6, /* U+0444 CYRILLIC SMALL LETTER EF */
  XK_Cyrillic_ghe              = cast(KeySym)0x06c7, /* U+0433 CYRILLIC SMALL LETTER GHE */
  XK_Cyrillic_ha               = cast(KeySym)0x06c8, /* U+0445 CYRILLIC SMALL LETTER HA */
  XK_Cyrillic_i                = cast(KeySym)0x06c9, /* U+0438 CYRILLIC SMALL LETTER I */
  XK_Cyrillic_shorti           = cast(KeySym)0x06ca, /* U+0439 CYRILLIC SMALL LETTER SHORT I */
  XK_Cyrillic_ka               = cast(KeySym)0x06cb, /* U+043A CYRILLIC SMALL LETTER KA */
  XK_Cyrillic_el               = cast(KeySym)0x06cc, /* U+043B CYRILLIC SMALL LETTER EL */
  XK_Cyrillic_em               = cast(KeySym)0x06cd, /* U+043C CYRILLIC SMALL LETTER EM */
  XK_Cyrillic_en               = cast(KeySym)0x06ce, /* U+043D CYRILLIC SMALL LETTER EN */
  XK_Cyrillic_o                = cast(KeySym)0x06cf, /* U+043E CYRILLIC SMALL LETTER O */
  XK_Cyrillic_pe               = cast(KeySym)0x06d0, /* U+043F CYRILLIC SMALL LETTER PE */
  XK_Cyrillic_ya               = cast(KeySym)0x06d1, /* U+044F CYRILLIC SMALL LETTER YA */
  XK_Cyrillic_er               = cast(KeySym)0x06d2, /* U+0440 CYRILLIC SMALL LETTER ER */
  XK_Cyrillic_es               = cast(KeySym)0x06d3, /* U+0441 CYRILLIC SMALL LETTER ES */
  XK_Cyrillic_te               = cast(KeySym)0x06d4, /* U+0442 CYRILLIC SMALL LETTER TE */
  XK_Cyrillic_u                = cast(KeySym)0x06d5, /* U+0443 CYRILLIC SMALL LETTER U */
  XK_Cyrillic_zhe              = cast(KeySym)0x06d6, /* U+0436 CYRILLIC SMALL LETTER ZHE */
  XK_Cyrillic_ve               = cast(KeySym)0x06d7, /* U+0432 CYRILLIC SMALL LETTER VE */
  XK_Cyrillic_softsign         = cast(KeySym)0x06d8, /* U+044C CYRILLIC SMALL LETTER SOFT SIGN */
  XK_Cyrillic_yeru             = cast(KeySym)0x06d9, /* U+044B CYRILLIC SMALL LETTER YERU */
  XK_Cyrillic_ze               = cast(KeySym)0x06da, /* U+0437 CYRILLIC SMALL LETTER ZE */
  XK_Cyrillic_sha              = cast(KeySym)0x06db, /* U+0448 CYRILLIC SMALL LETTER SHA */
  XK_Cyrillic_e                = cast(KeySym)0x06dc, /* U+044D CYRILLIC SMALL LETTER E */
  XK_Cyrillic_shcha            = cast(KeySym)0x06dd, /* U+0449 CYRILLIC SMALL LETTER SHCHA */
  XK_Cyrillic_che              = cast(KeySym)0x06de, /* U+0447 CYRILLIC SMALL LETTER CHE */
  XK_Cyrillic_hardsign         = cast(KeySym)0x06df, /* U+044A CYRILLIC SMALL LETTER HARD SIGN */
  XK_Cyrillic_YU               = cast(KeySym)0x06e0, /* U+042E CYRILLIC CAPITAL LETTER YU */
  XK_Cyrillic_A                = cast(KeySym)0x06e1, /* U+0410 CYRILLIC CAPITAL LETTER A */
  XK_Cyrillic_BE               = cast(KeySym)0x06e2, /* U+0411 CYRILLIC CAPITAL LETTER BE */
  XK_Cyrillic_TSE              = cast(KeySym)0x06e3, /* U+0426 CYRILLIC CAPITAL LETTER TSE */
  XK_Cyrillic_DE               = cast(KeySym)0x06e4, /* U+0414 CYRILLIC CAPITAL LETTER DE */
  XK_Cyrillic_IE               = cast(KeySym)0x06e5, /* U+0415 CYRILLIC CAPITAL LETTER IE */
  XK_Cyrillic_EF               = cast(KeySym)0x06e6, /* U+0424 CYRILLIC CAPITAL LETTER EF */
  XK_Cyrillic_GHE              = cast(KeySym)0x06e7, /* U+0413 CYRILLIC CAPITAL LETTER GHE */
  XK_Cyrillic_HA               = cast(KeySym)0x06e8, /* U+0425 CYRILLIC CAPITAL LETTER HA */
  XK_Cyrillic_I                = cast(KeySym)0x06e9, /* U+0418 CYRILLIC CAPITAL LETTER I */
  XK_Cyrillic_SHORTI           = cast(KeySym)0x06ea, /* U+0419 CYRILLIC CAPITAL LETTER SHORT I */
  XK_Cyrillic_KA               = cast(KeySym)0x06eb, /* U+041A CYRILLIC CAPITAL LETTER KA */
  XK_Cyrillic_EL               = cast(KeySym)0x06ec, /* U+041B CYRILLIC CAPITAL LETTER EL */
  XK_Cyrillic_EM               = cast(KeySym)0x06ed, /* U+041C CYRILLIC CAPITAL LETTER EM */
  XK_Cyrillic_EN               = cast(KeySym)0x06ee, /* U+041D CYRILLIC CAPITAL LETTER EN */
  XK_Cyrillic_O                = cast(KeySym)0x06ef, /* U+041E CYRILLIC CAPITAL LETTER O */
  XK_Cyrillic_PE               = cast(KeySym)0x06f0, /* U+041F CYRILLIC CAPITAL LETTER PE */
  XK_Cyrillic_YA               = cast(KeySym)0x06f1, /* U+042F CYRILLIC CAPITAL LETTER YA */
  XK_Cyrillic_ER               = cast(KeySym)0x06f2, /* U+0420 CYRILLIC CAPITAL LETTER ER */
  XK_Cyrillic_ES               = cast(KeySym)0x06f3, /* U+0421 CYRILLIC CAPITAL LETTER ES */
  XK_Cyrillic_TE               = cast(KeySym)0x06f4, /* U+0422 CYRILLIC CAPITAL LETTER TE */
  XK_Cyrillic_U                = cast(KeySym)0x06f5, /* U+0423 CYRILLIC CAPITAL LETTER U */
  XK_Cyrillic_ZHE              = cast(KeySym)0x06f6, /* U+0416 CYRILLIC CAPITAL LETTER ZHE */
  XK_Cyrillic_VE               = cast(KeySym)0x06f7, /* U+0412 CYRILLIC CAPITAL LETTER VE */
  XK_Cyrillic_SOFTSIGN         = cast(KeySym)0x06f8, /* U+042C CYRILLIC CAPITAL LETTER SOFT SIGN */
  XK_Cyrillic_YERU             = cast(KeySym)0x06f9, /* U+042B CYRILLIC CAPITAL LETTER YERU */
  XK_Cyrillic_ZE               = cast(KeySym)0x06fa, /* U+0417 CYRILLIC CAPITAL LETTER ZE */
  XK_Cyrillic_SHA              = cast(KeySym)0x06fb, /* U+0428 CYRILLIC CAPITAL LETTER SHA */
  XK_Cyrillic_E                = cast(KeySym)0x06fc, /* U+042D CYRILLIC CAPITAL LETTER E */
  XK_Cyrillic_SHCHA            = cast(KeySym)0x06fd, /* U+0429 CYRILLIC CAPITAL LETTER SHCHA */
  XK_Cyrillic_CHE              = cast(KeySym)0x06fe, /* U+0427 CYRILLIC CAPITAL LETTER CHE */
  XK_Cyrillic_HARDSIGN         = cast(KeySym)0x06ff, /* U+042A CYRILLIC CAPITAL LETTER HARD SIGN */
}
