/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module iv.opengl.arb;

import iv.opengl.gl;

// Part of ARB_sync
enum ulong GL_TIMEOUT_IGNORED  = 0xFFFFFFFFFFFFFFFF;

enum : uint {
  // ARB_depth_buffer_float
  GL_DEPTH_COMPONENT32F             = 0x8CAC,
  GL_DEPTH32F_STENCIL8              = 0x8CAD,
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,

  // ARB_framebuffer_object
  GL_INVALID_FRAMEBUFFER_OPERATION  = 0x0506,
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,
  GL_FRAMEBUFFER_DEFAULT            = 0x8218,
  GL_FRAMEBUFFER_UNDEFINED          = 0x8219,
  GL_DEPTH_STENCIL_ATTACHMENT       = 0x821A,
  GL_MAX_RENDERBUFFER_SIZE          = 0x84E8,
  GL_DEPTH_STENCIL                  = 0x84F9,
  GL_UNSIGNED_INT_24_8              = 0x84FA,
  GL_DEPTH24_STENCIL8               = 0x88F0,
  GL_TEXTURE_STENCIL_SIZE           = 0x88F1,
  GL_TEXTURE_RED_TYPE               = 0x8C10,
  GL_TEXTURE_GREEN_TYPE             = 0x8C11,
  GL_TEXTURE_BLUE_TYPE              = 0x8C12,
  GL_TEXTURE_ALPHA_TYPE             = 0x8C13,
  GL_TEXTURE_DEPTH_TYPE             = 0x8C16,
  GL_UNSIGNED_NORMALIZED            = 0x8C17,
  GL_FRAMEBUFFER_BINDING            = 0x8CA6,
  GL_DRAW_FRAMEBUFFER_BINDING       = GL_FRAMEBUFFER_BINDING,
  GL_RENDERBUFFER_BINDING           = 0x8CA7,
  GL_READ_FRAMEBUFFER               = 0x8CA8,
  GL_DRAW_FRAMEBUFFER               = 0x8CA9,
  GL_READ_FRAMEBUFFER_BINDING       = 0x8CAA,
  GL_RENDERBUFFER_SAMPLES           = 0x8CAB,
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
  GL_FRAMEBUFFER_COMPLETE           = 0x8CD5,
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB,
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC,
  GL_FRAMEBUFFER_UNSUPPORTED        = 0x8CDD,
  GL_MAX_COLOR_ATTACHMENTS          = 0x8CDF,
  GL_COLOR_ATTACHMENT0              = 0x8CE0,
  GL_COLOR_ATTACHMENT1              = 0x8CE1,
  GL_COLOR_ATTACHMENT2              = 0x8CE2,
  GL_COLOR_ATTACHMENT3              = 0x8CE3,
  GL_COLOR_ATTACHMENT4              = 0x8CE4,
  GL_COLOR_ATTACHMENT5              = 0x8CE5,
  GL_COLOR_ATTACHMENT6              = 0x8CE6,
  GL_COLOR_ATTACHMENT7              = 0x8CE7,
  GL_COLOR_ATTACHMENT8              = 0x8CE8,
  GL_COLOR_ATTACHMENT9              = 0x8CE9,
  GL_COLOR_ATTACHMENT10             = 0x8CEA,
  GL_COLOR_ATTACHMENT11             = 0x8CEB,
  GL_COLOR_ATTACHMENT12             = 0x8CEC,
  GL_COLOR_ATTACHMENT13             = 0x8CED,
  GL_COLOR_ATTACHMENT14             = 0x8CEE,
  GL_COLOR_ATTACHMENT15             = 0x8CEF,
  GL_DEPTH_ATTACHMENT               = 0x8D00,
  GL_STENCIL_ATTACHMENT             = 0x8D20,
  GL_FRAMEBUFFER                    = 0x8D40,
  GL_RENDERBUFFER                   = 0x8D41,
  GL_RENDERBUFFER_WIDTH             = 0x8D42,
  GL_RENDERBUFFER_HEIGHT            = 0x8D43,
  GL_RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44,
  GL_STENCIL_INDEX1                 = 0x8D46,
  GL_STENCIL_INDEX4                 = 0x8D47,
  GL_STENCIL_INDEX8                 = 0x8D48,
  GL_STENCIL_INDEX16                = 0x8D49,
  GL_RENDERBUFFER_RED_SIZE          = 0x8D50,
  GL_RENDERBUFFER_GREEN_SIZE        = 0x8D51,
  GL_RENDERBUFFER_BLUE_SIZE         = 0x8D52,
  GL_RENDERBUFFER_ALPHA_SIZE        = 0x8D53,
  GL_RENDERBUFFER_DEPTH_SIZE        = 0x8D54,
  GL_RENDERBUFFER_STENCIL_SIZE      = 0x8D55,
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,
  GL_MAX_SAMPLES                    = 0x8D57,

  // ARB_framebuffer_sRGB
  GL_FRAMEBUFFER_SRGB               = 0x8DB9,

  // ARB_geometry_shader4
  GL_LINES_ADJACENCY_ARB            = 0x000A,
  GL_LINE_STRIP_ADJACENCY_ARB       = 0x000B,
  GL_TRIANGLES_ADJACENCY_ARB        = 0x000C,
  GL_TRIANGLE_STRIP_ADJACENCY_ARB   = 0x000D,
  GL_PROGRAM_POINT_SIZE_ARB         = 0x8642,
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29,
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7,
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8,
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9,
  GL_GEOMETRY_SHADER_ARB            = 0x8DD9,
  GL_GEOMETRY_VERTICES_OUT_ARB      = 0x8DDA,
  GL_GEOMETRY_INPUT_TYPE_ARB        = 0x8DDB,
  GL_GEOMETRY_OUTPUT_TYPE_ARB       = 0x8DDC,
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD,
  GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE,
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF,
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0,
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1,

  // ARB_half_float_vertex
  GL_HALF_FLOAT                     = 0x140B,

  // ARB_map_buffer_range
  GL_MAP_READ_BIT                   = 0x0001,
  GL_MAP_WRITE_BIT                  = 0x0002,
  GL_MAP_INVALIDATE_RANGE_BIT       = 0x0004,
  GL_MAP_INVALIDATE_BUFFER_BIT      = 0x0008,
  GL_MAP_FLUSH_EXPLICIT_BIT         = 0x0010,
  GL_MAP_UNSYNCHRONIZED_BIT         = 0x0020,

  // ARB_texture_compression_rgtc
  GL_COMPRESSED_RED_RGTC1           = 0x8DBB,
  GL_COMPRESSED_SIGNED_RED_RGTC1    = 0x8DBC,
  GL_COMPRESSED_RG_RGTC2            = 0x8DBD,
  GL_COMPRESSED_SIGNED_RG_RGTC2     = 0x8DBE,

  // ARB_texture_rg
  GL_RG                             = 0x8227,
  GL_RG_INTEGER                     = 0x8228,
  GL_R8                             = 0x8229,
  GL_R16                            = 0x822A,
  GL_RG8                            = 0x822B,
  GL_RG16                           = 0x822C,
  GL_R16F                           = 0x822D,
  GL_R32F                           = 0x822E,
  GL_RG16F                          = 0x822F,
  GL_RG32F                          = 0x8230,
  GL_R8I                            = 0x8231,
  GL_R8UI                           = 0x8232,
  GL_R16I                           = 0x8233,
  GL_R16UI                          = 0x8234,
  GL_R32I                           = 0x8235,
  GL_R32UI                          = 0x8236,
  GL_RG8I                           = 0x8237,
  GL_RG8UI                          = 0x8238,
  GL_RG16I                          = 0x8239,
  GL_RG16UI                         = 0x823A,
  GL_RG32I                          = 0x823B,
  GL_RG32UI                         = 0x823C,

  // ARB_vertex_array_object
  GL_VERTEX_ARRAY_BINDING           = 0x85B5,

  // ARB_uniform_buffer_object
  GL_UNIFORM_BUFFER                 = 0x8A11,
  GL_UNIFORM_BUFFER_BINDING         = 0x8A28,
  GL_UNIFORM_BUFFER_START           = 0x8A29,
  GL_UNIFORM_BUFFER_SIZE            = 0x8A2A,
  GL_MAX_VERTEX_UNIFORM_BLOCKS      = 0x8A2B,
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS    = 0x8A2C,
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS    = 0x8A2D,
  GL_MAX_COMBINED_UNIFORM_BLOCKS    = 0x8A2E,
  GL_MAX_UNIFORM_BUFFER_BINDINGS    = 0x8A2F,
  GL_MAX_UNIFORM_BLOCK_SIZE         = 0x8A30,
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35,
  GL_ACTIVE_UNIFORM_BLOCKS          = 0x8A36,
  GL_UNIFORM_TYPE                   = 0x8A37,
  GL_UNIFORM_SIZE                   = 0x8A38,
  GL_UNIFORM_NAME_LENGTH            = 0x8A39,
  GL_UNIFORM_BLOCK_INDEX            = 0x8A3A,
  GL_UNIFORM_OFFSET                 = 0x8A3B,
  GL_UNIFORM_ARRAY_STRIDE           = 0x8A3C,
  GL_UNIFORM_MATRIX_STRIDE          = 0x8A3D,
  GL_UNIFORM_IS_ROW_MAJOR           = 0x8A3E,
  GL_UNIFORM_BLOCK_BINDING          = 0x8A3F,
  GL_UNIFORM_BLOCK_DATA_SIZE        = 0x8A40,
  GL_UNIFORM_BLOCK_NAME_LENGTH      = 0x8A41,
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  = 0x8A42,
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43,
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44,
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45,
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,
  GL_INVALID_INDEX                  = 0xFFFFFFFFu,

  // ARB_copy_buffer
  GL_COPY_READ_BUFFER               = 0x8F36,
  GL_COPY_WRITE_BUFFER              = 0x8F37,

  // ARB_depth_clamp
  GL_DEPTH_CLAMP                    = 0x864F,

  // ARB_provoking_vertex
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C,
  GL_FIRST_VERTEX_CONVENTION        = 0x8E4D,
  GL_LAST_VERTEX_CONVENTION         = 0x8E4E,
  GL_PROVOKING_VERTEX               = 0x8E4F,

  // ARB_seamless_cube_map
  GL_TEXTURE_CUBE_MAP_SEAMLESS      = 0x884F,

  // ARB_sync
  GL_MAX_SERVER_WAIT_TIMEOUT        = 0x9111,
  GL_OBJECT_TYPE                    = 0x9112,
  GL_SYNC_CONDITION                 = 0x9113,
  GL_SYNC_STATUS                    = 0x9114,
  GL_SYNC_FLAGS                     = 0x9115,
  GL_SYNC_FENCE                     = 0x9116,
  GL_SYNC_GPU_COMMANDS_COMPLETE     = 0x9117,
  GL_UNSIGNALED                     = 0x9118,
  GL_SIGNALED                       = 0x9119,
  GL_ALREADY_SIGNALED               = 0x911A,
  GL_TIMEOUT_EXPIRED                = 0x911B,
  GL_CONDITION_SATISFIED            = 0x911C,
  GL_WAIT_FAILED                    = 0x911D,
  GL_SYNC_FLUSH_COMMANDS_BIT        = 0x00000001,

  // ARB_texture_multisample
  GL_SAMPLE_POSITION                = 0x8E50,
  GL_SAMPLE_MASK                    = 0x8E51,
  GL_SAMPLE_MASK_VALUE              = 0x8E52,
  GL_MAX_SAMPLE_MASK_WORDS          = 0x8E59,
  GL_TEXTURE_2D_MULTISAMPLE         = 0x9100,
  GL_PROXY_TEXTURE_2D_MULTISAMPLE   = 0x9101,
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY   = 0x9102,
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103,
  GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
  GL_TEXTURE_SAMPLES                = 0x9106,
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107,
  GL_SAMPLER_2D_MULTISAMPLE         = 0x9108,
  GL_INT_SAMPLER_2D_MULTISAMPLE     = 0x9109,
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY   = 0x910B,
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D,
  GL_MAX_COLOR_TEXTURE_SAMPLES      = 0x910E,
  GL_MAX_DEPTH_TEXTURE_SAMPLES      = 0x910F,
  GL_MAX_INTEGER_SAMPLES            = 0x9110,

  // ARB_sample_shading
  GL_SAMPLE_SHADING_ARB             = 0x8C36,
  GL_MIN_SAMPLE_SHADING_VALUE_ARB   = 0x8C37,

  // ARB_texture_cube_map_array
  GL_TEXTURE_CUBE_MAP_ARRAY_ARB     = 0x9009,
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A,
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B,
  GL_SAMPLER_CUBE_MAP_ARRAY_ARB     = 0x900C,
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D,
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E,
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F,

  // ARB_texture_gather
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E,
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F,

  // ARB_shading_language_include
  GL_SHADER_INCLUDE_ARB             = 0x8DAE,
  GL_NAMED_STRING_LENGTH_ARB        = 0x8DE9,
  GL_NAMED_STRING_TYPE_ARB          = 0x8DEA,

  // ARB_texture_compression_bptc
  GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C,
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D,
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E,
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F,

  // ARB_blend_func_extended
  GL_SRC1_COLOR                     = 0x88F9,
  GL_ONE_MINUS_SRC1_COLOR           = 0x88FA,
  GL_ONE_MINUS_SRC1_ALPHA           = 0x88FB,
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   = 0x88FC,

  // ARB_occlusion_query2
  GL_ANY_SAMPLES_PASSED             = 0x8C2F,

  // ARB_sampler_objects
  GL_SAMPLER_BINDING                = 0x8919,

  // ARB_texture_rgb10_a2ui
  GL_RGB10_A2UI                     = 0x906F,

  // ARB_texture_swizzle
  GL_TEXTURE_SWIZZLE_R              = 0x8E42,
  GL_TEXTURE_SWIZZLE_G              = 0x8E43,
  GL_TEXTURE_SWIZZLE_B              = 0x8E44,
  GL_TEXTURE_SWIZZLE_A              = 0x8E45,
  GL_TEXTURE_SWIZZLE_RGBA           = 0x8E46,

  // ARB_timer_query
  GL_TIME_ELAPSED                   = 0x88BF,
  GL_TIMESTAMP                      = 0x8E28,

  // ARB_vertex_type_2_10_10_10_rev
  GL_INT_2_10_10_10_REV             = 0x8D9F,

  // ARB_draw_indirect
  GL_DRAW_INDIRECT_BUFFER           = 0x8F3F,
  GL_DRAW_INDIRECT_BUFFER_BINDING   = 0x8F43,

  // ARB_gpu_shader5
  GL_GEOMETRY_SHADER_INVOCATIONS    = 0x887F,
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A,
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B,
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C,
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D,

  // ARB_gpu_shader_fp64
  GL_DOUBLE_VEC2                    = 0x8FFC,
  GL_DOUBLE_VEC3                    = 0x8FFD,
  GL_DOUBLE_VEC4                    = 0x8FFE,
  GL_DOUBLE_MAT2                    = 0x8F46,
  GL_DOUBLE_MAT3                    = 0x8F47,
  GL_DOUBLE_MAT4                    = 0x8F48,
  GL_DOUBLE_MAT2x3                  = 0x8F49,
  GL_DOUBLE_MAT2x4                  = 0x8F4A,
  GL_DOUBLE_MAT3x2                  = 0x8F4B,
  GL_DOUBLE_MAT3x4                  = 0x8F4C,
  GL_DOUBLE_MAT4x2                  = 0x8F4D,
  GL_DOUBLE_MAT4x3                  = 0x8F4E,

  // ARB_shader_subroutine
  GL_ACTIVE_SUBROUTINES             = 0x8DE5,
  GL_ACTIVE_SUBROUTINE_UNIFORMS     = 0x8DE6,
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47,
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH   = 0x8E48,
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49,
  GL_MAX_SUBROUTINES                = 0x8DE7,
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8,
  GL_NUM_COMPATIBLE_SUBROUTINES     = 0x8E4A,
  GL_COMPATIBLE_SUBROUTINES         = 0x8E4B,

  // ARB_tessellation_shader
  GL_PATCHES                        = 0x000E,
  GL_PATCH_VERTICES                 = 0x8E72,
  GL_PATCH_DEFAULT_INNER_LEVEL      = 0x8E73,
  GL_PATCH_DEFAULT_OUTER_LEVEL      = 0x8E74,
  GL_TESS_CONTROL_OUTPUT_VERTICES   = 0x8E75,
  GL_TESS_GEN_MODE                  = 0x8E76,
  GL_TESS_GEN_SPACING               = 0x8E77,
  GL_TESS_GEN_VERTEX_ORDER          = 0x8E78,
  GL_TESS_GEN_POINT_MODE            = 0x8E79,
  GL_ISOLINES                       = 0x8E7A,
  GL_FRACTIONAL_ODD                 = 0x8E7B,
  GL_FRACTIONAL_EVEN                = 0x8E7C,
  GL_MAX_PATCH_VERTICES             = 0x8E7D,
  GL_MAX_TESS_GEN_LEVEL             = 0x8E7E,
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F,
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80,
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81,
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82,
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83,
  GL_MAX_TESS_PATCH_COMPONENTS      = 0x8E84,
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85,
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86,
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C,
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D,
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E,
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F,
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0,
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1,
  GL_TESS_EVALUATION_SHADER         = 0x8E87,
  GL_TESS_CONTROL_SHADER            = 0x8E88,

  // ARB_transform_feedback2
  GL_TRANSFORM_FEEDBACK             = 0x8E22,
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23,
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24,
  GL_TRANSFORM_FEEDBACK_BINDING     = 0x8E25,

  // ARB_transform_feedback3
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70,
  GL_MAX_VERTEX_STREAMS             = 0x8E71,

  // ARB_ES2_compatibility
  GL_FIXED                          = 0x140C,
  GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
  GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
  GL_LOW_FLOAT                      = 0x8DF0,
  GL_MEDIUM_FLOAT                   = 0x8DF1,
  GL_HIGH_FLOAT                     = 0x8DF2,
  GL_LOW_INT                        = 0x8DF3,
  GL_MEDIUM_INT                     = 0x8DF4,
  GL_HIGH_INT                       = 0x8DF5,
  GL_SHADER_COMPILER                = 0x8DFA,
  GL_NUM_SHADER_BINARY_FORMATS      = 0x8DF9,
  GL_MAX_VERTEX_UNIFORM_VECTORS     = 0x8DFB,
  GL_MAX_VARYING_VECTORS            = 0x8DFC,
  GL_MAX_FRAGMENT_UNIFORM_VECTORS   = 0x8DFD,

  // ARB_get_program_binary
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
  GL_PROGRAM_BINARY_LENGTH          = 0x8741,
  GL_NUM_PROGRAM_BINARY_FORMATS     = 0x87FE,
  GL_PROGRAM_BINARY_FORMATS         = 0x87FF,

  // ARB_separate_shader_objects
  GL_VERTEX_SHADER_BIT              = 0x00000001,
  GL_FRAGMENT_SHADER_BIT            = 0x00000002,
  GL_GEOMETRY_SHADER_BIT            = 0x00000004,
  GL_TESS_CONTROL_SHADER_BIT        = 0x00000008,
  GL_TESS_EVALUATION_SHADER_BIT     = 0x00000010,
  GL_ALL_SHADER_BITS                = 0xFFFFFFFF,
  GL_PROGRAM_SEPARABLE              = 0x8258,
  GL_ACTIVE_PROGRAM                 = 0x8259,
  GL_PROGRAM_PIPELINE_BINDING       = 0x825A,

  // ARB_viewport_array
  GL_MAX_VIEWPORTS                  = 0x825B,
  GL_VIEWPORT_SUBPIXEL_BITS         = 0x825C,
  GL_VIEWPORT_BOUNDS_RANGE          = 0x825D,
  GL_LAYER_PROVOKING_VERTEX         = 0x825E,
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
  GL_UNDEFINED_VERTEX               = 0x8260,

  // ARB_cl_event
  GL_SYNC_CL_EVENT_ARB              = 0x8240,
  GL_SYNC_CL_EVENT_COMPLETE_ARB     = 0x8241,

  // ARB_debug_output
  GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB   = 0x8242,
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243,
  GL_DEBUG_CALLBACK_FUNCTION_ARB    = 0x8244,
  GL_DEBUG_CALLBACK_USER_PARAM_ARB  = 0x8245,
  GL_DEBUG_SOURCE_API_ARB           = 0x8246,
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247,
  GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248,
  GL_DEBUG_SOURCE_THIRD_PARTY_ARB   = 0x8249,
  GL_DEBUG_SOURCE_APPLICATION_ARB   = 0x824A,
  GL_DEBUG_SOURCE_OTHER_ARB         = 0x824B,
  GL_DEBUG_TYPE_ERROR_ARB           = 0x824C,
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D,
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E,
  GL_DEBUG_TYPE_PORTABILITY_ARB     = 0x824F,
  GL_DEBUG_TYPE_PERFORMANCE_ARB     = 0x8250,
  GL_DEBUG_TYPE_OTHER_ARB           = 0x8251,
  GL_MAX_DEBUG_MESSAGE_LENGTH_ARB   = 0x9143,
  GL_MAX_DEBUG_LOGGED_MESSAGES_ARB  = 0x9144,
  GL_DEBUG_LOGGED_MESSAGES_ARB      = 0x9145,
  GL_DEBUG_SEVERITY_HIGH_ARB        = 0x9146,
  GL_DEBUG_SEVERITY_MEDIUM_ARB      = 0x9147,
  GL_DEBUG_SEVERITY_LOW_ARB         = 0x9148,

  // ARB_robustness
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004,
  GL_LOSE_CONTEXT_ON_RESET_ARB      = 0x8252,
  GL_GUILTY_CONTEXT_RESET_ARB       = 0x8253,
  GL_INNOCENT_CONTEXT_RESET_ARB     = 0x8254,
  GL_UNKNOWN_CONTEXT_RESET_ARB      = 0x8255,
  GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256,
  GL_NO_RESET_NOTIFICATION_ARB      = 0x8261,

  // ARB_compressed_texture_pixel_storage
  GL_UNPACK_COMPRESSED_BLOCK_WIDTH  = 0x9127,
  GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128,
  GL_UNPACK_COMPRESSED_BLOCK_DEPTH  = 0x9129,
  GL_UNPACK_COMPRESSED_BLOCK_SIZE   = 0x912A,
  GL_PACK_COMPRESSED_BLOCK_WIDTH    = 0x912B,
  GL_PACK_COMPRESSED_BLOCK_HEIGHT   = 0x912C,
  GL_PACK_COMPRESSED_BLOCK_DEPTH    = 0x912D,
  GL_PACK_COMPRESSED_BLOCK_SIZE     = 0x912E,

  // ARB_internalformat_query
  GL_NUM_SAMPLE_COUNTS              = 0x9380,

  // ARB_map_buffer_alignment
  GL_MIN_MAP_BUFFER_ALIGNMENT       = 0x90BC,

  // ARB_shader_atomic_counters
  GL_ATOMIC_COUNTER_BUFFER          = 0x92C0,
  GL_ATOMIC_COUNTER_BUFFER_BINDING  = 0x92C1,
  GL_ATOMIC_COUNTER_BUFFER_START    = 0x92C2,
  GL_ATOMIC_COUNTER_BUFFER_SIZE     = 0x92C3,
  GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4,
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5,
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6,
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7,
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8,
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9,
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA,
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB,
  GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC,
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD,
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE,
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF,
  GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0,
  GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1,
  GL_MAX_VERTEX_ATOMIC_COUNTERS     = 0x92D2,
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4,
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS   = 0x92D5,
  GL_MAX_FRAGMENT_ATOMIC_COUNTERS   = 0x92D6,
  GL_MAX_COMBINED_ATOMIC_COUNTERS   = 0x92D7,
  GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8,
  GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC,
  GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  = 0x92D9,
  GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA,
  GL_UNSIGNED_INT_ATOMIC_COUNTER    = 0x92DB,

  // ARB_shader_image_load_store
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001,
  GL_ELEMENT_ARRAY_BARRIER_BIT      = 0x00000002,
  GL_UNIFORM_BARRIER_BIT            = 0x00000004,
  GL_TEXTURE_FETCH_BARRIER_BIT      = 0x00000008,
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020,
  GL_COMMAND_BARRIER_BIT            = 0x00000040,
  GL_PIXEL_BUFFER_BARRIER_BIT       = 0x00000080,
  GL_TEXTURE_UPDATE_BARRIER_BIT     = 0x00000100,
  GL_BUFFER_UPDATE_BARRIER_BIT      = 0x00000200,
  GL_FRAMEBUFFER_BARRIER_BIT        = 0x00000400,
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800,
  GL_ATOMIC_COUNTER_BARRIER_BIT     = 0x00001000,
  GL_ALL_BARRIER_BITS               = 0xFFFFFFFF,
  GL_MAX_IMAGE_UNITS                = 0x8F38,
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39,
  GL_IMAGE_BINDING_NAME             = 0x8F3A,
  GL_IMAGE_BINDING_LEVEL            = 0x8F3B,
  GL_IMAGE_BINDING_LAYERED          = 0x8F3C,
  GL_IMAGE_BINDING_LAYER            = 0x8F3D,
  GL_IMAGE_BINDING_ACCESS           = 0x8F3E,
  GL_IMAGE_1D                       = 0x904C,
  GL_IMAGE_2D                       = 0x904D,
  GL_IMAGE_3D                       = 0x904E,
  GL_IMAGE_2D_RECT                  = 0x904F,
  GL_IMAGE_CUBE                     = 0x9050,
  GL_IMAGE_BUFFER                   = 0x9051,
  GL_IMAGE_1D_ARRAY                 = 0x9052,
  GL_IMAGE_2D_ARRAY                 = 0x9053,
  GL_IMAGE_CUBE_MAP_ARRAY           = 0x9054,
  GL_IMAGE_2D_MULTISAMPLE           = 0x9055,
  GL_IMAGE_2D_MULTISAMPLE_ARRAY     = 0x9056,
  GL_INT_IMAGE_1D                   = 0x9057,
  GL_INT_IMAGE_2D                   = 0x9058,
  GL_INT_IMAGE_3D                   = 0x9059,
  GL_INT_IMAGE_2D_RECT              = 0x905A,
  GL_INT_IMAGE_CUBE                 = 0x905B,
  GL_INT_IMAGE_BUFFER               = 0x905C,
  GL_INT_IMAGE_1D_ARRAY             = 0x905D,
  GL_INT_IMAGE_2D_ARRAY             = 0x905E,
  GL_INT_IMAGE_CUBE_MAP_ARRAY       = 0x905F,
  GL_INT_IMAGE_2D_MULTISAMPLE       = 0x9060,
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061,
  GL_UNSIGNED_INT_IMAGE_1D          = 0x9062,
  GL_UNSIGNED_INT_IMAGE_2D          = 0x9063,
  GL_UNSIGNED_INT_IMAGE_3D          = 0x9064,
  GL_UNSIGNED_INT_IMAGE_2D_RECT     = 0x9065,
  GL_UNSIGNED_INT_IMAGE_CUBE        = 0x9066,
  GL_UNSIGNED_INT_IMAGE_BUFFER      = 0x9067,
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY    = 0x9068,
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY    = 0x9069,
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B,
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C,
  GL_MAX_IMAGE_SAMPLES              = 0x906D,
  GL_IMAGE_BINDING_FORMAT           = 0x906E,
  GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7,
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8,
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9,
  GL_MAX_VERTEX_IMAGE_UNIFORMS      = 0x90CA,
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB,
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC,
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS    = 0x90CD,
  GL_MAX_FRAGMENT_IMAGE_UNIFORMS    = 0x90CE,
  GL_MAX_COMBINED_IMAGE_UNIFORMS    = 0x90CF,

  // ARB_texture_storage
  GL_TEXTURE_IMMUTABLE_FORMAT       = 0x912F,

  // ARB_ES3_compatibility
  GL_COMPRESSED_RGB8_ETC2           = 0x9274,
  GL_COMPRESSED_SRGB8_ETC2          = 0x9275,
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
  GL_COMPRESSED_RGBA8_ETC2_EAC      = 0x9278,
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
  GL_COMPRESSED_R11_EAC             = 0x9270,
  GL_COMPRESSED_SIGNED_R11_EAC      = 0x9271,
  GL_COMPRESSED_RG11_EAC            = 0x9272,
  GL_COMPRESSED_SIGNED_RG11_EAC     = 0x9273,
  GL_PRIMITIVE_RESTART_FIXED_INDEX  = 0x8D69,
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A,
  GL_MAX_ELEMENT_INDEX              = 0x8D6B,

  // ARB_compute_shader
  GL_COMPUTE_SHADER                 = 0x91B9,
  GL_MAX_COMPUTE_UNIFORM_BLOCKS     = 0x91BB,
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
  GL_MAX_COMPUTE_IMAGE_UNIFORMS     = 0x91BD,
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262,
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
  GL_MAX_COMPUTE_ATOMIC_COUNTERS    = 0x8265,
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
  GL_MAX_COMPUTE_LOCAL_INVOCATIONS  = 0x90EB,
  GL_MAX_COMPUTE_WORK_GROUP_COUNT   = 0x91BE,
  GL_MAX_COMPUTE_WORK_GROUP_SIZE    = 0x91BF,
  GL_COMPUTE_LOCAL_WORK_SIZE        = 0x8267,
  GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC,
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED,
  GL_DISPATCH_INDIRECT_BUFFER       = 0x90EE,
  GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
  GL_COMPUTE_SHADER_BIT             = 0x00000020,

  // KHR_debug
  GL_DEBUG_OUTPUT_SYNCHRONOUS       = 0x8242,
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243,
  GL_DEBUG_CALLBACK_FUNCTION        = 0x8244,
  GL_DEBUG_CALLBACK_USER_PARAM      = 0x8245,
  GL_DEBUG_SOURCE_API               = 0x8246,
  GL_DEBUG_SOURCE_WINDOW_SYSTEM     = 0x8247,
  GL_DEBUG_SOURCE_SHADER_COMPILER   = 0x8248,
  GL_DEBUG_SOURCE_THIRD_PARTY       = 0x8249,
  GL_DEBUG_SOURCE_APPLICATION       = 0x824A,
  GL_DEBUG_SOURCE_OTHER             = 0x824B,
  GL_DEBUG_TYPE_ERROR               = 0x824C,
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D,
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR  = 0x824E,
  GL_DEBUG_TYPE_PORTABILITY         = 0x824F,
  GL_DEBUG_TYPE_PERFORMANCE         = 0x8250,
  GL_DEBUG_TYPE_OTHER               = 0x8251,
  GL_DEBUG_TYPE_MARKER              = 0x8268,
  GL_DEBUG_TYPE_PUSH_GROUP          = 0x8269,
  GL_DEBUG_TYPE_POP_GROUP           = 0x826A,
  GL_DEBUG_SEVERITY_NOTIFICATION    = 0x826B,
  GL_MAX_DEBUG_GROUP_STACK_DEPTH    = 0x826C,
  GL_DEBUG_GROUP_STACK_DEPTH        = 0x826D,
  GL_BUFFER                         = 0x82E0,
  GL_SHADER                         = 0x82E1,
  GL_PROGRAM                        = 0x82E2,
  GL_QUERY                          = 0x82E3,
  GL_PROGRAM_PIPELINE               = 0x82E4,
  GL_SAMPLER                        = 0x82E6,
  GL_DISPLAY_LIST                   = 0x82E7,
  GL_MAX_LABEL_LENGTH               = 0x82E8,
  GL_MAX_DEBUG_MESSAGE_LENGTH       = 0x9143,
  GL_MAX_DEBUG_LOGGED_MESSAGES      = 0x9144,
  GL_DEBUG_LOGGED_MESSAGES          = 0x9145,
  GL_DEBUG_SEVERITY_HIGH            = 0x9146,
  GL_DEBUG_SEVERITY_MEDIUM          = 0x9147,
  GL_DEBUG_SEVERITY_LOW             = 0x9148,
  GL_DEBUG_OUTPUT                   = 0x92E0,
  GL_CONTEXT_FLAG_DEBUG_BIT         = 0x00000002,

  // ARB_explicit_uniform_location
  GL_MAX_UNIFORM_LOCATIONS = 0x826E,

  // ARB_framebuffer_no_attachments
  GL_FRAMEBUFFER_DEFAULT_WIDTH      = 0x9310,
  GL_FRAMEBUFFER_DEFAULT_HEIGHT     = 0x9311,
  GL_FRAMEBUFFER_DEFAULT_LAYERS     = 0x9312,
  GL_FRAMEBUFFER_DEFAULT_SAMPLES    = 0x9313,
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314,
  GL_MAX_FRAMEBUFFER_WIDTH          = 0x9315,
  GL_MAX_FRAMEBUFFER_HEIGHT         = 0x9316,
  GL_MAX_FRAMEBUFFER_LAYERS         = 0x9317,
  GL_MAX_FRAMEBUFFER_SAMPLES        = 0x9318,

  // ARB_internalformat_query2
  GL_INTERNALFORMAT_SUPPORTED       = 0x826F,
  GL_INTERNALFORMAT_PREFERRED       = 0x8270,
  GL_INTERNALFORMAT_RED_SIZE        = 0x8271,
  GL_INTERNALFORMAT_GREEN_SIZE      = 0x8272,
  GL_INTERNALFORMAT_BLUE_SIZE       = 0x8273,
  GL_INTERNALFORMAT_ALPHA_SIZE      = 0x8274,
  GL_INTERNALFORMAT_DEPTH_SIZE      = 0x8275,
  GL_INTERNALFORMAT_STENCIL_SIZE    = 0x8276,
  GL_INTERNALFORMAT_SHARED_SIZE     = 0x8277,
  GL_INTERNALFORMAT_RED_TYPE        = 0x8278,
  GL_INTERNALFORMAT_GREEN_TYPE      = 0x8279,
  GL_INTERNALFORMAT_BLUE_TYPE       = 0x827A,
  GL_INTERNALFORMAT_ALPHA_TYPE      = 0x827B,
  GL_INTERNALFORMAT_DEPTH_TYPE      = 0x827C,
  GL_INTERNALFORMAT_STENCIL_TYPE    = 0x827D,
  GL_MAX_WIDTH                      = 0x827E,
  GL_MAX_HEIGHT                     = 0x827F,
  GL_MAX_DEPTH                      = 0x8280,
  GL_MAX_LAYERS                     = 0x8281,
  GL_MAX_COMBINED_DIMENSIONS        = 0x8282,
  GL_COLOR_COMPONENTS               = 0x8283,
  GL_DEPTH_COMPONENTS               = 0x8284,
  GL_STENCIL_COMPONENTS             = 0x8285,
  GL_COLOR_RENDERABLE               = 0x8286,
  GL_DEPTH_RENDERABLE               = 0x8287,
  GL_STENCIL_RENDERABLE             = 0x8288,
  GL_FRAMEBUFFER_RENDERABLE         = 0x8289,
  GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A,
  GL_FRAMEBUFFER_BLEND              = 0x828B,
  GL_READ_PIXELS                    = 0x828C,
  GL_READ_PIXELS_FORMAT             = 0x828D,
  GL_READ_PIXELS_TYPE               = 0x828E,
  GL_TEXTURE_IMAGE_FORMAT           = 0x828F,
  GL_TEXTURE_IMAGE_TYPE             = 0x8290,
  GL_GET_TEXTURE_IMAGE_FORMAT       = 0x8291,
  GL_GET_TEXTURE_IMAGE_TYPE         = 0x8292,
  GL_MIPMAP                         = 0x8293,
  GL_MANUAL_GENERATE_MIPMAP         = 0x8294,
  GL_AUTO_GENERATE_MIPMAP           = 0x8295,
  GL_COLOR_ENCODING                 = 0x8296,
  GL_SRGB_READ                      = 0x8297,
  GL_SRGB_WRITE                     = 0x8298,
  GL_SRGB_DECODE_ARB                = 0x8299,
  GL_FILTER                         = 0x829A,
  GL_VERTEX_TEXTURE                 = 0x829B,
  GL_TESS_CONTROL_TEXTURE           = 0x829C,
  GL_TESS_EVALUATION_TEXTURE        = 0x829D,
  GL_GEOMETRY_TEXTURE               = 0x829E,
  GL_FRAGMENT_TEXTURE               = 0x829F,
  GL_COMPUTE_TEXTURE                = 0x82A0,
  GL_TEXTURE_SHADOW                 = 0x82A1,
  GL_TEXTURE_GATHER                 = 0x82A2,
  GL_TEXTURE_GATHER_SHADOW          = 0x82A3,
  GL_SHADER_IMAGE_LOAD              = 0x82A4,
  GL_SHADER_IMAGE_STORE             = 0x82A5,
  GL_SHADER_IMAGE_ATOMIC            = 0x82A6,
  GL_IMAGE_TEXEL_SIZE               = 0x82A7,
  GL_IMAGE_COMPATIBILITY_CLASS      = 0x82A8,
  GL_IMAGE_PIXEL_FORMAT             = 0x82A9,
  GL_IMAGE_PIXEL_TYPE               = 0x82AA,
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC,
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD,
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE,
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF,
  GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1,
  GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2,
  GL_TEXTURE_COMPRESSED_BLOCK_SIZE  = 0x82B3,
  GL_CLEAR_BUFFER                   = 0x82B4,
  GL_TEXTURE_VIEW                   = 0x82B5,
  GL_VIEW_COMPATIBILITY_CLASS       = 0x82B6,
  GL_FULL_SUPPORT                   = 0x82B7,
  GL_CAVEAT_SUPPORT                 = 0x82B8,
  GL_IMAGE_CLASS_4_X_32             = 0x82B9,
  GL_IMAGE_CLASS_2_X_32             = 0x82BA,
  GL_IMAGE_CLASS_1_X_32             = 0x82BB,
  GL_IMAGE_CLASS_4_X_16             = 0x82BC,
  GL_IMAGE_CLASS_2_X_16             = 0x82BD,
  GL_IMAGE_CLASS_1_X_16             = 0x82BE,
  GL_IMAGE_CLASS_4_X_8              = 0x82BF,
  GL_IMAGE_CLASS_2_X_8              = 0x82C0,
  GL_IMAGE_CLASS_1_X_8              = 0x82C1,
  GL_IMAGE_CLASS_11_11_10           = 0x82C2,
  GL_IMAGE_CLASS_10_10_10_2         = 0x82C3,
  GL_VIEW_CLASS_128_BITS            = 0x82C4,
  GL_VIEW_CLASS_96_BITS             = 0x82C5,
  GL_VIEW_CLASS_64_BITS             = 0x82C6,
  GL_VIEW_CLASS_48_BITS             = 0x82C7,
  GL_VIEW_CLASS_32_BITS             = 0x82C8,
  GL_VIEW_CLASS_24_BITS             = 0x82C9,
  GL_VIEW_CLASS_16_BITS             = 0x82CA,
  GL_VIEW_CLASS_8_BITS              = 0x82CB,
  GL_VIEW_CLASS_S3TC_DXT1_RGB       = 0x82CC,
  GL_VIEW_CLASS_S3TC_DXT1_RGBA      = 0x82CD,
  GL_VIEW_CLASS_S3TC_DXT3_RGBA      = 0x82CE,
  GL_VIEW_CLASS_S3TC_DXT5_RGBA      = 0x82CF,
  GL_VIEW_CLASS_RGTC1_RED           = 0x82D0,
  GL_VIEW_CLASS_RGTC2_RG            = 0x82D1,
  GL_VIEW_CLASS_BPTC_UNORM          = 0x82D2,
  GL_VIEW_CLASS_BPTC_FLOAT          = 0x82D3,

  // ARB_program_interface_query
  GL_UNIFORM                        = 0x92E1,
  GL_UNIFORM_BLOCK                  = 0x92E2,
  GL_PROGRAM_INPUT                  = 0x92E3,
  GL_PROGRAM_OUTPUT                 = 0x92E4,
  GL_BUFFER_VARIABLE                = 0x92E5,
  GL_SHADER_STORAGE_BLOCK           = 0x92E6,
  GL_VERTEX_SUBROUTINE              = 0x92E8,
  GL_TESS_CONTROL_SUBROUTINE        = 0x92E9,
  GL_TESS_EVALUATION_SUBROUTINE     = 0x92EA,
  GL_GEOMETRY_SUBROUTINE            = 0x92EB,
  GL_FRAGMENT_SUBROUTINE            = 0x92EC,
  GL_COMPUTE_SUBROUTINE             = 0x92ED,
  GL_VERTEX_SUBROUTINE_UNIFORM      = 0x92EE,
  GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF,
  GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0,
  GL_GEOMETRY_SUBROUTINE_UNIFORM    = 0x92F1,
  GL_FRAGMENT_SUBROUTINE_UNIFORM    = 0x92F2,
  GL_COMPUTE_SUBROUTINE_UNIFORM     = 0x92F3,
  GL_TRANSFORM_FEEDBACK_VARYING     = 0x92F4,
  GL_ACTIVE_RESOURCES               = 0x92F5,
  GL_MAX_NAME_LENGTH                = 0x92F6,
  GL_MAX_NUM_ACTIVE_VARIABLES       = 0x92F7,
  GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8,
  GL_NAME_LENGTH                    = 0x92F9,
  GL_TYPE                           = 0x92FA,
  GL_ARRAY_SIZE                     = 0x92FB,
  GL_OFFSET                         = 0x92FC,
  GL_BLOCK_INDEX                    = 0x92FD,
  GL_ARRAY_STRIDE                   = 0x92FE,
  GL_MATRIX_STRIDE                  = 0x92FF,
  GL_IS_ROW_MAJOR                   = 0x9300,
  GL_ATOMIC_COUNTER_BUFFER_INDEX    = 0x9301,
  GL_BUFFER_BINDING                 = 0x9302,
  GL_BUFFER_DATA_SIZE               = 0x9303,
  GL_NUM_ACTIVE_VARIABLES           = 0x9304,
  GL_ACTIVE_VARIABLES               = 0x9305,
  GL_REFERENCED_BY_VERTEX_SHADER    = 0x9306,
  GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307,
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308,
  GL_REFERENCED_BY_GEOMETRY_SHADER  = 0x9309,
  GL_REFERENCED_BY_FRAGMENT_SHADER  = 0x930A,
  GL_REFERENCED_BY_COMPUTE_SHADER   = 0x930B,
  GL_TOP_LEVEL_ARRAY_SIZE           = 0x930C,
  GL_TOP_LEVEL_ARRAY_STRIDE         = 0x930D,
  GL_LOCATION                       = 0x930E,
  GL_LOCATION_INDEX                 = 0x930F,
  GL_IS_PER_PATCH                   = 0x92E7,

  // ARB_shader_storage_buffer_object
  GL_SHADER_STORAGE_BUFFER          = 0x90D2,
  GL_SHADER_STORAGE_BUFFER_BINDING  = 0x90D3,
  GL_SHADER_STORAGE_BUFFER_START    = 0x90D4,
  GL_SHADER_STORAGE_BUFFER_SIZE     = 0x90D5,
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6,
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9,
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB,
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC,
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD,
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE  = 0x90DE,
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF,
  GL_SHADER_STORAGE_BARRIER_BIT     = 0x2000,
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39,

  // ARB_stencil_texturing
  GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA,

  // ARB_texture_buffer_range
  GL_TEXTURE_BUFFER_OFFSET = 0x919D,
  GL_TEXTURE_BUFFER_SIZE = 0x919E,
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F,

  // ARB_texture_view
  GL_TEXTURE_VIEW_MIN_LEVEL         = 0x82DB,
  GL_TEXTURE_VIEW_NUM_LEVELS        = 0x82DC,
  GL_TEXTURE_VIEW_MIN_LAYER         = 0x82DD,
  GL_TEXTURE_VIEW_NUM_LAYERS        = 0x82DE,
  GL_TEXTURE_IMMUTABLE_LEVELS       = 0x82DF,

  // ARB_vertex_attrib_binding
  GL_VERTEX_ATTRIB_BINDING          = 0x82D4,
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET  = 0x82D5,
  GL_VERTEX_BINDING_DIVISOR         = 0x82D6,
  GL_VERTEX_BINDING_OFFSET          = 0x82D7,
  GL_VERTEX_BINDING_STRIDE          = 0x82D8,
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
  GL_MAX_VERTEX_ATTRIB_BINDINGS     = 0x82DA,

  // ARB_buffer_storage
  GL_MAP_PERSISTENT_BIT             = 0x0040,
  GL_MAP_COHERENT_BIT               = 0x0080,
  GL_DYNAMIC_STORAGE_BIT            = 0x0100,
  GL_CLIENT_STORAGE_BIT             = 0x0200,
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000,
  GL_BUFFER_IMMUTABLE_STORAGE       = 0x821F,
  GL_BUFFER_STORAGE_FLAGS           = 0x8220,

  // ARB_clear_texture
  GL_CLEAR_TEXTURE = 0x9365,

  // ARB_enhanced_layouts
  GL_LOCATION_COMPONENT             = 0x934A,
  GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B,
  GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C,

  // ARB_query_buffer_object
  GL_QUERY_BUFFER                   = 0x9192,
  GL_QUERY_BUFFER_BARRIER_BIT       = 0x00008000,
  GL_QUERY_BUFFER_BINDING           = 0x9193,
  GL_QUERY_RESULT_NO_WAIT           = 0x9194,

  // ARB_texture_mirror_clamp_to_edge
  GL_MIRROR_CLAMP_TO_EDGE           = 0x8743,

  // ARB_clip_control
  GL_NEGATIVE_ONE_TO_ONE            = 0x935E,
  GL_ZERO_TO_ONE                    = 0x935F,
  GL_CLIP_ORIGIN                    = 0x935C,
  GL_CLIP_DEPTH_MODE                = 0x935D,

  // ARB_cull_distance
  GL_MAX_CULL_DISTANCES             = 0x82F9,
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA,

  // ARB_conditional_render_inverted
  GL_QUERY_WAIT_INVERTED            = 0x8E17,
  GL_QUERY_NO_WAIT_INVERTED         = 0x8E18,
  GL_QUERY_BY_REGION_WAIT_INVERTED  = 0x8E19,
  GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A,

  // KHR_context_flush_control
  GL_CONTEXT_RELEASE_BEHAVIOR       = 0x82FB,
  GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC,

  // KHR_robustness
  GL_GUILTY_CONTEXT_RESET           = 0x8253,
  GL_INNOCENT_CONTEXT_RESET         = 0x8254,
  GL_UNKNOWN_CONTEXT_RESET          = 0x8255,
  GL_CONTEXT_ROBUST_ACCESS          = 0x90F3,
  GL_RESET_NOTIFICATION_STRATEGY    = 0x8256,
  GL_LOSE_CONTEXT_ON_RESET          = 0x8252,
  GL_NO_RESET_NOTIFICATION          = 0x8261,
  GL_CONTEXT_LOST                   = 0x0507,
}

// ARB_geometry_shader4
extern(System) @nogc nothrow {
  void glProgramParameteriARB (GLuint, GLenum, GLint);
  void glFramebufferTextureARB (GLuint, GLenum, GLuint, GLint);
  void glFramebufferTextureLayerARB (GLuint, GLenum, GLuint, GLint, GLint);
  void glFramebufferTextureFaceARB (GLuint, GLenum, GLuint, GLint, GLenum);
}

// ARB_framebuffer_object
extern(System) @nogc nothrow {
  GLboolean glIsRenderbuffer (GLuint);
  void glBindRenderbuffer (GLenum, GLuint);
  void glDeleteRenderbuffers (GLsizei, const(GLuint)*);
  void glGenRenderbuffers (GLsizei, GLuint*);
  void glRenderbufferStorage (GLenum, GLenum, GLsizei, GLsizei);
  void glGetRenderbufferParameteriv (GLenum, GLenum, GLint*);
  GLboolean glIsFramebuffer (GLuint);
  void glBindFramebuffer (GLenum, GLuint);
  void glDeleteFramebuffers (GLsizei, const(GLuint)*);
  void glGenFramebuffers (GLsizei, GLuint*);
  GLenum glCheckFramebufferStatus (GLenum);
  void glFramebufferTexture1D (GLenum, GLenum, GLenum, GLuint, GLint);
  void glFramebufferTexture2D (GLenum, GLenum, GLenum, GLuint, GLint);
  void glFramebufferTexture3D (GLenum, GLenum, GLenum, GLuint, GLint, GLint);
  void glFramebufferRenderbuffer (GLenum, GLenum, GLenum, GLuint);
  void glGetFramebufferAttachmentParameteriv (GLenum, GLenum, GLenum, GLint*);
  void glGenerateMipmap (GLenum);
  void glBlitFramebuffer (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
  void glRenderbufferStorageMultisample (GLenum, GLsizei, GLenum, GLsizei, GLsizei);
  void glFramebufferTextureLayer (GLenum, GLenum, GLuint, GLint, GLint);
}

// ARB_map_buffer_range
extern(System) @nogc nothrow {
  GLvoid* glMapBufferRange (GLenum, GLintptr, GLsizeiptr, GLbitfield);
  void glFlushMappedBufferRange (GLenum, GLintptr, GLsizeiptr);
}

// ARB_vertex_array_object
extern(System) @nogc nothrow {
  void glBindVertexArray (GLuint);
  void glDeleteVertexArrays (GLsizei, const(GLuint)*);
  void glGenVertexArrays (GLsizei, GLuint*);
  GLboolean glIsVertexArray (GLuint);
}

// ARB_uniform_buffer_object
extern(System) @nogc nothrow {
  void glGetUniformIndices (GLuint, GLsizei, const(GLchar*)*, GLuint*);
  void glGetActiveUniformsiv (GLuint, GLsizei, const(GLuint)*, GLenum, GLint*);
  void glGetActiveUniformName (GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
  GLuint glGetUniformBlockIndex (GLuint, const(GLchar)*);
  void glGetActiveUniformBlockiv (GLuint, GLuint, GLenum, GLint*);
  void glGetActiveUniformBlockName (GLuint, GLuint, GLsizei, GLsizei*, GLchar*);
  void glUniformBlockBinding (GLuint, GLuint, GLuint);
}

// ARB_copy_buffer
extern(System) @nogc nothrow {
  void glCopyBufferSubData (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
}

// ARB_draw_elements_base_vertex
extern(System) @nogc nothrow {
  void glDrawElementsBaseVertex (GLenum, GLsizei, GLenum, const(GLvoid)*, GLint);
  void glDrawRangeElementsBaseVertex (GLenum, GLuint, GLuint, GLsizei, GLenum, const(GLvoid)*, GLint);
  void glDrawElementsInstancedBaseVertex (GLenum, GLsizei, GLenum, const(GLvoid)*, GLsizei, GLint);
  void glMultiDrawElementsBaseVertex (GLenum, const(GLsizei)*, GLenum, const(GLvoid*)*, GLsizei, const(GLint)*);
}

// ARB_provoking_vertex
extern(System) @nogc nothrow {
  void glProvokingVertex (GLenum);
}

// ARB_sync
extern(System) @nogc nothrow {
  GLsync glFenceSync (GLenum, GLbitfield);
  GLboolean glIsSync (GLsync);
  void glDeleteSync (GLsync);
  GLenum glClientWaitSync (GLsync, GLbitfield, GLuint64);
  void glWaitSync (GLsync, GLbitfield, GLuint64);
  void glGetInteger64v (GLsync, GLint64*);
  void glGetSynciv (GLsync, GLenum, GLsizei, GLsizei*, GLint*);
}

// ARB_texture_multisample
extern(System) @nogc nothrow {
  void glTexImage2DMultisample (GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
  void glTexImage3DMultisample (GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
  void glGetMultisamplefv (GLenum, GLuint, GLfloat*);
  void glSampleMaski (GLuint, GLbitfield);
}

// ARB_draw_buffers_blend
extern(System) @nogc nothrow {
  void glBlendEquationiARB (GLuint, GLenum);
  void glBlendEquationSeparateiARB (GLuint, GLenum, GLenum);
  void glBlendFunciARB (GLuint, GLenum, GLenum);
  void glBlendFuncSeparateiARB (GLuint, GLenum, GLenum, GLenum, GLenum);
}

// ARB_sample_shading
extern(System) @nogc nothrow {
  void glMinSampleShadingARB (GLclampf);
}

// ARB_shading_language_include
extern(System) @nogc nothrow {
  void glNamedStringARB (GLenum, GLint, const(GLchar)*, GLint, const(GLchar)*);
  void glDeleteNamedStringARB (GLint, const(GLchar)*);
  void glCompileShaderIncludeARB (GLuint, GLsizei, const(GLchar)*, const(GLint)*);
  GLboolean glIsNamedStringARB (GLint, const(GLchar)*);
  void glGetNamedStringARB (GLint, const(GLchar)*, GLsizei, GLint*, GLchar*);
  void glGetNamedStringivARB (GLint, const(GLchar)*, GLenum, GLint*);
}

// ARB_blend_func_extended
extern(System) @nogc nothrow {
  void glBindFragDataLocationIndexed (GLuint, GLuint, GLuint, const(GLchar)*);
  GLint glGetFragDataIndex (GLuint, const(GLchar)*);
}

// ARB_sampler_objects
extern(System) @nogc nothrow {
  void glGenSamplers (GLsizei, GLuint*);
  void glDeleteSamplers (GLsizei, const(GLuint)*);
  GLboolean glIsSampler (GLuint);
  void glBindSampler (GLuint, GLuint);
  void glSamplerParameteri (GLuint, GLenum, GLint);
  void glSamplerParameteriv (GLuint, GLenum, const(GLint)*);
  void glSamplerParameterf (GLuint, GLenum, GLfloat);
  void glSamplerParameterfv (GLuint, GLenum, const(GLfloat)*);
  void glSamplerParameterIiv (GLuint, GLenum, const(GLint)*);
  void glSamplerParameterIuiv (GLuint, GLenum, const(GLuint)*);
  void glGetSamplerParameteriv (GLuint, GLenum, GLint*);
  void glGetSamplerParameterIiv (GLuint, GLenum, GLint*);
  void glGetSamplerParameterfv (GLuint, GLenum, GLfloat*);
  void glGetSamplerParameterIuiv (GLuint, GLenum, GLuint*);
}

// ARB_timer_query
extern(System) @nogc nothrow {
  void glQueryCounter (GLuint, GLenum);
  void glGetQueryObjecti64v (GLuint, GLenum, GLint64*);
  void glGetQueryObjectui64v (GLuint, GLenum, GLuint64*);
}

// ARB_vertex_type_2_10_10_10_rev
extern(System) @nogc nothrow {
  void glVertexP2ui (GLenum, GLuint);
  void glVertexP2uiv (GLenum, const(GLuint)*);
  void glVertexP3ui (GLenum, GLuint);
  void glVertexP3uiv (GLenum, const(GLuint)*);
  void glVertexP4ui (GLenum, GLuint);
  void glVertexP4uiv (GLenum, const(GLuint)*);
  void glTexCoordP1ui (GLenum, GLuint);
  void glTexCoordP1uiv (GLenum, const(GLuint)*);
  void glTexCoordP2ui (GLenum, GLuint);
  void glTexCoordP2uiv (GLenum, const(GLuint)*);
  void glTexCoordP3ui (GLenum, GLuint);
  void glTexCoordP3uiv (GLenum, const(GLuint)*);
  void glTexCoordP4ui (GLenum, GLuint);
  void glTexCoordP4uiv (GLenum, const(GLuint)*);
  void glMultiTexCoordP1ui (GLenum, GLenum, GLuint);
  void glMultiTexCoordP1uiv (GLenum, GLenum, const(GLuint)*);
  void glMultiTexCoordP2ui (GLenum, GLenum, GLuint);
  void glMultiTexCoordP2uiv (GLenum, GLenum, const(GLuint)*);
  void glMultiTexCoordP3ui (GLenum, GLenum, GLuint);
  void glMultiTexCoordP3uiv (GLenum, GLenum, const(GLuint)*);
  void glMultiTexCoordP4ui (GLenum, GLenum, GLuint);
  void glMultiTexCoordP4uiv (GLenum, GLenum, const(GLuint)*);
  void glNormalP3ui (GLenum, GLuint);
  void glNormalP3uiv (GLenum, const(GLuint)*);
  void glColorP3ui (GLenum, GLuint);
  void glColorP3uiv (GLenum, const(GLuint)*);
  void glColorP4ui (GLenum, GLuint);
  void glColorP4uiv (GLenum, const(GLuint)*);
  void glSecondaryColorP3ui (GLenum, GLuint);
  void glSecondaryColorP3uiv (GLenum, const(GLuint)*);
  void glVertexAttribP1ui (GLuint, GLenum, GLboolean, GLuint);
  void glVertexAttribP1uiv (GLuint, GLenum, GLboolean, const(GLuint)*);
  void glVertexAttribP2ui (GLuint, GLenum, GLboolean, GLuint);
  void glVertexAttribP2uiv (GLuint, GLenum, GLboolean, const(GLuint)*);
  void glVertexAttribP3ui (GLuint, GLenum, GLboolean, GLuint);
  void glVertexAttribP3uiv (GLuint, GLenum, GLboolean, const(GLuint)*);
  void glVertexAttribP4ui (GLuint, GLenum, GLboolean, GLuint);
  void glVertexAttribP4uiv (GLuint, GLenum, GLboolean, const(GLuint)*);
}

// ARB_draw_indirect
extern(System) @nogc nothrow {
  void glDrawArraysIndirect (GLenum, const(GLvoid)*);
  void glDrawElementsIndirect (GLenum, GLenum, const(GLvoid)*);
}

// ARB_gpu_shader_fp64
extern(System) @nogc nothrow {
  void glUniform1d (GLint, GLdouble);
  void glUniform2d (GLint, GLdouble, GLdouble);
  void glUniform3d (GLint, GLdouble, GLdouble, GLdouble);
  void glUniform4d (GLint, GLdouble, GLdouble, GLdouble, GLdouble);
  void glUniform1dv (GLint, GLsizei, const(GLdouble)*);
  void glUniform2dv (GLint, GLsizei, const(GLdouble)*);
  void glUniform3dv (GLint, GLsizei, const(GLdouble)*);
  void glUniform4dv (GLint, GLsizei, const(GLdouble)*);
  void glUniformMatrix2dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix3dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix4dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix2x3dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix2x4dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix3x2dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix3x4dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix4x2dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glUniformMatrix4x3dv (GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glGetUniformdv (GLuint, GLint, GLdouble*);
}

// ARB_shader_subroutine
extern(System) @nogc nothrow {
  GLint glGetSubroutineUniformLocation (GLuint, GLenum, const(GLchar)*);
  GLuint glGetSubroutineIndex (GLuint, GLenum, const(GLchar)*);
  void glGetActiveSubroutineUniformiv (GLuint, GLenum, GLuint, GLenum, GLint*);
  void glGetActiveSubroutineUniformName (GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
  void glGetActiveSubroutineName (GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
  void glUniformSubroutinesuiv (GLenum, GLsizei, const(GLuint)*);
  void glGetUniformSubroutineuiv (GLenum, GLint, GLuint*);
  void glGetProgramStageiv (GLuint, GLenum, GLenum, GLint*);
}

// ARB_tessellation_shader
extern(System) @nogc nothrow {
  void glPatchParameteri (GLenum, GLint);
  void glPatchParameterfv (GLenum, const(GLfloat)*);
}

// ARB_transform_feedback2
extern(System) @nogc nothrow {
  void glBindTransformFeedback (GLenum, GLuint);
  void glDeleteTransformFeedbacks (GLsizei, const(GLuint)*);
  void glGenTransformFeedbacks (GLsizei, GLuint*);
  GLboolean glIsTransformFeedback (GLuint);
  void glPauseTransformFeedback ();
  void glResumeTransformFeedback ();
  void glDrawTransformFeedback (GLenum, GLuint);
}

// ARB_transform_feedback3
extern(System) @nogc nothrow {
  void glDrawTransformFeedbackStream (GLenum, GLuint, GLuint);
  void glBeginQueryIndexed (GLenum, GLuint, GLuint);
  void glEndQueryIndexed (GLenum, GLuint);
  void glGetQueryIndexediv (GLenum, GLuint, GLenum, GLint*);
}

// ARB_ES2_compatibility
extern(System) @nogc nothrow {
  void glReleaseShaderCompiler ();
  void glShaderBinary (GLsizei, const(GLuint)*, GLenum, const(GLvoid)*, GLsizei);
  void glGetShaderPrecisionFormat (GLenum, GLenum, GLint*, GLint*);
  void glDepthRangef (GLclampf, GLclampf);
  void glClearDepthf (GLclampf);
}

// ARB_get_program_binary
extern(System) @nogc nothrow {
  void glGetProgramBinary (GLuint, GLsizei, GLsizei*, GLenum*, GLvoid*);
  void glProgramBinary (GLuint, GLenum, const(GLvoid)*, GLsizei);
  void glProgramParameteri (GLuint, GLenum, GLint);
}

// ARB_separate_shader_objects
extern(System) @nogc nothrow {
  void glUseProgramStages (GLuint, GLbitfield, GLuint);
  void glActiveShaderProgram (GLuint, GLuint);
  GLuint glCreateShaderProgramv (GLenum, GLsizei, const(GLchar*)*);
  void glBindProgramPipeline (GLuint);
  void glDeleteProgramPipelines (GLsizei, const(GLuint)*);
  void glGenProgramPipelines (GLsizei, GLuint*);
  GLboolean glIsProgramPipeline (GLuint);
  void glGetProgramPipelineiv (GLuint, GLenum, GLint*);
  void glProgramUniform1i (GLuint, GLint, GLint);
  void glProgramUniform1iv (GLuint, GLint, GLsizei, const(GLint)*);
  void glProgramUniform1f (GLuint, GLint, GLfloat);
  void glProgramUniform1fv (GLuint, GLint, GLsizei, const(GLfloat)*);
  void glProgramUniform1d (GLuint, GLint, GLdouble);
  void glProgramUniform1dv (GLuint, GLint, GLsizei, const(GLdouble)*);
  void glProgramUniform1ui (GLuint, GLint, GLuint);
  void glProgramUniform1uiv (GLuint, GLint, GLsizei, const(GLuint)*);
  void glProgramUniform2i (GLuint, GLint, GLint, GLint);
  void glProgramUniform2iv (GLuint, GLint, GLsizei, const(GLint)*);
  void glProgramUniform2f (GLuint, GLint, GLfloat, GLfloat);
  void glProgramUniform2fv (GLuint, GLint, GLsizei, const(GLfloat)*);
  void glProgramUniform2d (GLuint, GLint, GLdouble, GLdouble);
  void glProgramUniform2dv (GLuint, GLint, GLsizei, const(GLdouble)*);
  void glProgramUniform2ui (GLuint, GLint, GLuint, GLuint);
  void glProgramUniform2uiv (GLuint, GLint, GLsizei, const(GLuint)*);
  void glProgramUniform3i (GLuint, GLint, GLint, GLint, GLint);
  void glProgramUniform3iv (GLuint, GLint, GLsizei, const(GLint)*);
  void glProgramUniform3f (GLuint, GLint, GLfloat, GLfloat, GLfloat);
  void glProgramUniform3fv (GLuint, GLint, GLsizei, const(GLfloat)*);
  void glProgramUniform3d (GLuint, GLint, GLdouble, GLdouble, GLdouble);
  void glProgramUniform3dv (GLuint, GLint, GLsizei, const(GLdouble)*);
  void glProgramUniform3ui (GLuint, GLint, GLuint, GLuint, GLuint);
  void glProgramUniform3uiv (GLuint, GLint, GLsizei, const(GLuint)*);
  void glProgramUniform4i (GLuint, GLint, GLint, GLint, GLint, GLint);
  void glProgramUniform4iv (GLuint, GLint, GLsizei, const(GLint)*);
  void glProgramUniform4f (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
  void glProgramUniform4fv (GLuint, GLint, GLsizei, const(GLfloat)*);
  void glProgramUniform4d (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
  void glProgramUniform4dv (GLuint, GLint, GLsizei, const(GLdouble)*);
  void glProgramUniform4ui (GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
  void glProgramUniform4uiv (GLuint, GLint, GLsizei, const(GLuint)*);
  void glProgramUniformMatrix2fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix3fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix4fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix2dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix3dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix4dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix2x3fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix3x2fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix2x4fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix4x2fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix3x4fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix4x3fv (GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
  void glProgramUniformMatrix2x3dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix3x2dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix2x4dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix4x2dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix3x4dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glProgramUniformMatrix4x3dv (GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
  void glValidateProgramPipeline (GLuint);
  void glGetProgramPipelineInfoLog (GLuint, GLsizei, GLsizei*, GLchar*);
}

// ARB_vertex_attrib_64bit
extern(System) @nogc nothrow {
  void glVertexAttribL1d (GLuint, GLdouble);
  void glVertexAttribL2d (GLuint, GLdouble, GLdouble);
  void glVertexAttribL3d (GLuint, GLdouble, GLdouble, GLdouble);
  void glVertexAttribL4d (GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
  void glVertexAttribL1dv (GLuint, const(GLdouble)*);
  void glVertexAttribL2dv (GLuint, const(GLdouble)*);
  void glVertexAttribL3dv (GLuint, const(GLdouble)*);
  void glVertexAttribL4dv (GLuint, const(GLdouble)*);
  void glVertexAttribLPointer (GLuint, GLint, GLenum, GLsizei, const(GLvoid)*);
  void glGetVertexAttribLdv (GLuint, GLenum, GLdouble*);
}

// ARB_viewport_array
extern(System) @nogc nothrow {
  void glViewportArrayv (GLuint, GLsizei, const(GLfloat)*);
  void glViewportIndexedf (GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
  void glViewportIndexedfv (GLuint, const(GLfloat)*);
  void glScissorArrayv (GLuint, GLsizei, const(GLint)*);
  void glScissorIndexed (GLuint, GLint, GLint, GLsizei, GLsizei);
  void glScissorIndexedv (GLuint, const(GLint)*);
  void glDepthRangeArrayv (GLuint, GLsizei, const(GLclampd)*);
  void glDepthRangeIndexed (GLuint, GLclampd, GLclampd);
  void glGetFloati_v (GLenum, GLuint, GLfloat*);
  void glGetDoublei_v (GLenum, GLuint, GLdouble*);
}

// ARB_cl_event
extern(System) @nogc nothrow {
  GLsync glCreateSyncFromCLeventARB (_cl_context*, _cl_event*, GLbitfield);
}

// ARB_debug_output
extern(System) @nogc nothrow {
  void glDebugMessageControlARB (GLenum, GLenum, GLenum, GLsizei, const(GLuint)*, GLboolean);
  void glDebugMessageInsertARB (GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
  void glGetDebugMessageLogARB (GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
  void glDebugMessageCallbackARB (GLDEBUGPROCARB, const(GLvoid)*);
}

// ARB_robustness
extern(System) @nogc nothrow {
  GLenum glGetGraphicsResetStatusARB ();
  void glGetnMapdvARB (GLenum, GLenum, GLsizei, GLdouble*);
  void glGetnMapfvARB (GLenum, GLenum, GLsizei, GLfloat*);
  void glGetnMapivARB (GLenum, GLenum, GLsizei, GLint*);
  void glGetnPixelMapfvARB (GLenum, GLsizei, GLfloat*);
  void glGetnPixelMapuivARB (GLenum, GLsizei, GLuint*);
  void glGetnPixelMapusvARB (GLenum, GLsizei, GLushort*);
  void glGetnPolygonStippleARB (GLsizei, GLubyte*);
  void glGetnColorTableARB (GLenum, GLenum, GLenum, GLsizei, GLvoid*);
  void glGetnConvolutionFilterARB (GLenum, GLenum, GLenum, GLsizei, GLvoid*);
  void glGetnSeparableFilterARB (GLenum, GLenum, GLenum, GLsizei, GLvoid*, GLsizei, GLvoid*, GLvoid*);
  void glGetnHistogramARB (GLenum, GLboolean, GLenum, GLenum, GLsizei, GLvoid*);
  void glGetnMinmaxARB (GLenum, GLboolean, GLenum, GLenum, GLsizei, GLvoid*);
  void glGetnTexImageARB (GLenum, GLint, GLenum, GLenum, GLsizei, GLvoid*);
  void glReadnPixelsARB (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, GLvoid*);
  void glGetnCompressedTexImageARB (GLenum, GLint, GLsizei, GLvoid*);
  void glGetnUniformfvARB (GLuint, GLint, GLsizei, GLfloat*);
  void glGetnUniformivARB (GLuint, GLint, GLsizei, GLint*);
  void glGetnUniformuivARB (GLuint, GLint, GLsizei, GLuint*);
  void glGetnUniformdvARB (GLuint, GLint, GLsizei, GLdouble*);
}

// ARB_base_instance
extern(System) @nogc nothrow {
  void glDrawArraysInstancedBaseInstance (GLenum, GLint, GLsizei, GLsizei, GLuint);
  void glDrawElementsInstancedBaseInstance (GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLuint);
  void glDrawElementsInstancedBaseVertexBaseInstance (GLenum, GLsizei, GLenum, const(void)*, GLsizei, GLint, GLuint);
}

// ARB_transform_feedback_instanced
extern(System) @nogc nothrow {
  void glDrawTransformFeedbackInstanced (GLenum, GLuint, GLsizei);
  void glDrawTransformFeedbackStreamInstanced (GLenum, GLuint, GLuint, GLsizei);
}

// ARB_internalformat_query
extern(System) @nogc nothrow {
  void glGetInternalformativ (GLenum, GLenum, GLenum, GLsizei, GLint*);
}

// ARB_shader_atomic_counters
extern(System) @nogc nothrow {
  void glGetActiveAtomicCounterBufferiv (GLuint, GLuint, GLenum, GLint*);
}

// ARB_shader_image_load_store
extern(System) @nogc nothrow {
  void glBindImageTexture (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
  void glMemoryBarrier (GLbitfield);
}

// ARB_texture_storage
extern(System) @nogc nothrow {
  void glTexStorage1D (GLenum, GLsizei, GLenum, GLsizei);
  void glTexStorage2D (GLenum, GLsizei, GLenum, GLsizei, GLsizei);
  void glTexStorage3D (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
  void glTextureStorage1DEXT (GLuint, GLenum, GLsizei, GLenum, GLsizei);
  void glTextureStorage2DEXT (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
  void glTextureStorage3DEXT (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
}

// ARB_clear_buffer_object
extern(System) @nogc nothrow {
  void glClearBufferData (GLenum, GLenum, GLenum, GLenum, const(void)*);
  void glClearBufferSubData (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
  void glClearNamedBufferDataEXT (GLuint, GLenum, GLenum, GLenum, const(void)*);
  void glClearNamedBufferSubDataEXT (GLuint, GLenum, GLenum, GLenum, GLsizeiptr, GLsizeiptr, const(void)*);
}

// ARB_compute_shader
extern(System) @nogc nothrow {
  void glDispatchCompute (GLuint, GLuint, GLuint);
  void glDispatchComputeIndirect (GLintptr);
}

// ARB_copy_image
extern(System) @nogc nothrow {
  void glCopyImageSubData (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
}

// KHR_debug
extern(System) @nogc nothrow {
  void glDebugMessageControl (GLenum, GLenum, GLenum, GLsizei, const(GLuint*), GLboolean);
  void glDebugMessageInsert (GLenum, GLenum, GLuint, GLenum, GLsizei, const(GLchar)*);
  void glDebugMessageCallback (GLDEBUGPROC, const(void)*);
  GLuint glGetDebugMessageLog (GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*);
  void glPushDebugGroup (GLenum, GLuint, GLsizei, const(GLchar)*);
  void glPopDebugGroup ();
  void glObjectLabel (GLenum, GLuint, GLsizei, GLsizei, const(GLchar)*);
  void glGetObjectLabel (GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
  void glObjectPtrLabel (const(void)*, GLsizei, const(GLchar)*);
  void glGetObjectPtrLabel (const(void)*, GLsizei, GLsizei*, GLchar*);

}

// ARB_framebuffer_no_attachments
extern(System) @nogc nothrow {
  void glFramebufferParameteri (GLenum, GLenum, GLint);
  void glGetFramebufferParameteriv (GLenum, GLenum, GLint*);
  void glNamedFramebufferParameteriEXT (GLuint, GLenum, GLint);
  void glGetNamedFramebufferParameterivEXT (GLuint, GLenum, GLint*);
}

// ARB_internalformat_query2
extern(System) @nogc nothrow {
  void glGetInternalformati64v (GLenum, GLenum, GLenum, GLsizei, GLint64*);
}

// ARB_invalidate_subdata
extern(System) @nogc nothrow {
  void glInvalidateTexSubImage (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
  void glInvalidateTexImage (GLuint, GLint);
  void glInvalidateBufferSubData (GLuint, GLintptr, GLsizeiptr);
  void glInvalidateBufferData (GLuint);
  void glInvalidateFramebuffer (GLenum, GLsizei, const(GLenum)*);
  void glInvalidateSubFramebuffer (GLenum, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
}

// ARB_multi_draw_indirect
extern(System) @nogc nothrow {
  void glMultiDrawArraysIndirect (GLenum, const(void)*, GLsizei, GLsizei);
  void glMultiDrawElementsIndirect (GLenum, GLenum, const(void)*, GLsizei, GLsizei);
}

// ARB_program_interface_query
extern(System) @nogc nothrow {
  void glGetProgramInterfaceiv (GLuint, GLenum, GLenum, GLint*);
  GLuint glGetProgramResourceIndex (GLuint, GLenum, const(GLchar)*);
  void glGetProgramResourceName (GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
  void glGetProgramResourceiv (GLuint, GLenum, GLuint, GLsizei, const(GLenum)*, GLsizei, GLsizei*, GLint*);
  GLint glGetProgramResourceLocation (GLuint, GLenum, const(GLchar)*);
  GLint glGetProgramResourceLocationIndex (GLuint, GLenum, const(GLchar)*);
}

// ARB_shader_storage_buffer_object
extern(System) {
  void glShaderStorageBlockBinding (GLuint, GLuint, GLuint);
}

// ARB_texture_buffer_range
extern(System) @nogc nothrow {
  void glTexBufferRange (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
  void glTextureBufferRangeEXT (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
}

// ARB_texture_storage_multisample
extern(System) @nogc nothrow {
  void glTexStorage2DMultisample (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
  void glTexStorage3DMultisample (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
  void glTextureStorage2DMultisampleEXT (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
  void glTextureStorage3DMultisampleEXT (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
}

// ARB_texture_view
extern(System) @nogc nothrow {
  void glTextureView (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
}

// ARB_vertex_attrib_binding
extern(System) @nogc nothrow {
  void glBindVertexBuffer (GLuint, GLuint, GLintptr, GLsizei);
  void glVertexAttribFormat (GLuint, GLint, GLenum, GLboolean, GLuint);
  void glVertexAttribIFormat (GLuint, GLint, GLenum, GLuint);
  void glVertexAttribLFormat (GLuint, GLint, GLenum, GLuint);
  void glVertexAttribBinding (GLuint, GLuint);
  void glVertexBindingDivisor (GLuint, GLuint);
  void glVertexArrayBindVertexBufferEXT (GLuint, GLuint, GLuint, GLintptr, GLsizei);
  void glVertexArrayVertexAttribFormatEXT (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
  void glVertexArrayVertexAttribIFormatEXT (GLuint, GLuint, GLint, GLenum, GLuint);
  void glVertexArrayVertexAttribLFormatEXT (GLuint, GLuint, GLint, GLenum, GLuint);
  void glVertexArrayVertexAttribBindingEXT (GLuint, GLuint, GLuint);
  void glVertexArrayVertexBindingDivisorEXT (GLuint, GLuint, GLuint);
}

// ARB_buffer_storage
extern(System) @nogc nothrow {
  void glBufferStorage (GLenum, GLsizeiptr, const(void)*, GLbitfield);
  void glNamedBufferStorageEXT (GLuint, GLsizeiptr, const(void)*, GLbitfield);
}

// ARB_clear_texture
extern(System) @nogc nothrow {
  void glClearTexImage (GLuint, GLint, GLenum, GLenum, const(void)*);
  void glClearTexSubImage (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
}

// ARB_multi_bind
extern(System) @nogc nothrow {
  void glBindBuffersBase (GLenum, GLuint, GLsizei, const(GLuint)*);
  void glBindBuffersRange (GLenum, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizeiptr)*);
  void glBindTextures (GLuint, GLsizei, const(GLuint)*);
  void glBindSamplers (GLuint, GLsizei, const(GLuint)*);
  void glBindImageTextures (GLuint, GLsizei, const(GLuint)*);
  void glBindVertexBuffers (GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
}

// ARB_ES3_1_compatibility
extern(System) @nogc nothrow {
  void glMemoryBarrierByRegion (GLbitfield);
}

// ARB_direct_state_access
extern(System) @nogc nothrow {
  void glCreateTransformFeedbacks (GLsizei, GLuint*);
  void glTransformFeedbackBufferBase (GLsizei, GLuint, GLuint);
  void glTransformFeedbackBufferRange (GLuint, GLuint, GLuint, GLintptr, GLsizei);
  void glGetTransformFeedbackiv (GLuint, GLenum, GLint*);
  void glGetTransformFeedbacki_v (GLuint, GLenum, GLuint, GLint*);
  void glGetTransformFeedbacki64_v (GLuint, GLenum, GLuint, GLint64*);
  void glCreateBuffers (GLsizei, GLuint*);
  void glNamedBufferStorage (GLuint, GLsizeiptr, const(void)*, GLbitfield);
  void glNamedBufferData (GLuint, GLsizeiptr, const(void)*, GLenum);
  void glNamedBufferSubData (GLuint, GLintptr, GLsizeiptr, const(void)*);
  void glCopyNamedBufferSubData (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
  void glClearNamedBufferData (GLuint, GLenum, GLenum, GLenum, const(void)*);
  void glClearNamedBufferSubData (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const(void)*);
  void* glMapNamedBuffer (GLuint, GLenum);
  void* glMapNamedBufferRange (GLuint, GLintptr, GLsizeiptr, GLbitfield);
  GLboolean glUnmapNamedBuffer (GLuint);
  void glFlushMappedNamedBufferRange (GLuint, GLintptr, GLsizeiptr);
  void glGetNamedBufferParameteriv (GLuint, GLenum, GLint*);
  void glGetNamedBufferParameteri64v (GLuint, GLenum, GLint64*);
  void glGetNamedBufferPointerv (GLuint, GLenum, void**);
  void glGetNamedBufferSubData (GLuint, GLintptr, GLsizeiptr, void*);
  void glCreateFramebuffers (GLsizei, GLuint*);
  void glNamedFramebufferRenderbuffer (GLuint, GLenum, GLenum, GLuint);
  void glNamedFramebufferParameteri (GLuint, GLenum, GLint);
  void glNamedFramebufferTexture (GLuint, GLenum, GLuint, GLint);
  void glNamedFramebufferTextureLayer (GLuint, GLenum, GLuint, GLint, GLint);
  void glNamedFramebufferDrawBuffer (GLuint, GLenum);
  void glNamedFramebufferDrawBuffers (GLuint, GLsizei, const(GLenum)*);
  void glNamedFramebufferReadBuffer (GLuint, GLenum);
  void glInvalidateNamedFramebufferData (GLuint, GLsizei, const(GLenum)*);
  void glInvalidateNamedFramebufferSubData (GLuint, GLsizei, const(GLenum)*, GLint, GLint, GLsizei, GLsizei);
  void glClearNamedFramebufferiv (GLuint, GLenum, GLint, const(GLint)*);
  void glClearNamedFramebufferuiv (GLuint, GLenum, GLint, const(GLuint)*);
  void glClearNamedFramebufferfv (GLuint, GLenum, GLint, const(GLfloat)*);
  void glClearNamedFramebufferfi (GLuint, GLenum, GLfloat, GLint);
  void glBlitNamedFramebuffer (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
  GLenum glCheckNamedFramebufferStatus (GLuint, GLenum);
  void glGetNamedFramebufferParameteriv (GLuint, GLenum, GLint*);
  void glGetNamedFramebufferAttachmentParameteriv (GLuint, GLenum, GLenum, GLint*);
  void glCreateRenderbuffers (GLsizei, GLuint*);
  void glNamedRenderbufferStorage (GLuint, GLenum, GLsizei, GLsizei);
  void glNamedRenderbufferStorageMultisample (GLuint, GLsizei, GLenum, GLsizei, GLsizei);
  void glGetNamedRenderbufferParameteriv (GLuint, GLenum, GLint*);
  void glCreateTextures (GLenum, GLsizei, GLuint*);
  void glTextureBuffer (GLuint, GLenum, GLuint);
  void glTextureBufferRange (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
  void glTextureStorage1D (GLuint, GLsizei, GLenum, GLsizei);
  void glTextureStorage2D (GLuint, GLsizei, GLenum, GLsizei, GLsizei);
  void glTextureStorage3D (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
  void glTextureStorage2DMultisample (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
  void glTextureStorage3DMultisample (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
  void glTextureSubImage1D (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const(void)*);
  void glTextureSubImage2D (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
  void glTextureSubImage3D (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
  void glCompressedTextureSubImage1D (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const(void)*);
  void glCompressedTextureSubImage2D (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
  void glCompressedTextureSubImage3D (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const(void)*);
  void glCopyTextureSubImage1D (GLuint, GLint, GLint, GLint, GLint, GLsizei);
  void glCopyTextureSubImage2D (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
  void glCopyTextureSubImage3D (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
  void glTextureParameterf (GLuint, GLenum, GLfloat);
  void glTextureParameterfv (GLuint, GLenum, const(GLfloat)*);
  void glTextureParameteri (GLuint, GLenum, GLint);
  void glTextureParameterIiv (GLuint, GLenum, const(GLint)*);
  void glTextureParameterIuiv (GLuint, GLenum, const(GLuint)*);
  void glTextureParameteriv (GLuint, GLenum, const(GLint)*);
  void glGenerateTextureMipmap (GLuint);
  void glBindTextureUnit (GLuint, GLuint);
  void glGetTextureImage (GLuint, GLint, GLenum, GLenum, GLsizei, void*);
  void glGetCompressedTextureImage (GLuint, GLint, GLsizei, void*);
  void glGetTextureLevelParameterfv (GLuint, GLint, GLenum, GLfloat*);
  void glGetTextureLevelParameteriv (GLuint, GLint, GLenum, GLint*);
  void glGetTextureParameterfv (GLuint, GLenum, GLfloat*);
  void glGetTextureParameterIiv (GLuint, GLenum, GLint*);
  void glGetTextureParameterIuiv (GLuint, GLenum, GLuint*);
  void glGetTextureParameteriv (GLuint, GLenum, GLint*);
  void glCreateVertexArrays (GLsizei, GLuint*);
  void glDisableVertexArrayAttrib (GLuint, GLuint);
  void glEnableVertexArrayAttrib (GLuint, GLuint);
  void glVertexArrayElementBuffer (GLuint, GLuint);
  void glVertexArrayVertexBuffer (GLuint, GLuint, GLuint, GLintptr, GLsizei);
  void glVertexArrayVertexBuffers (GLuint, GLuint, GLsizei, const(GLuint)*, const(GLintptr)*, const(GLsizei)*);
  void glVertexArrayAttribFormat (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
  void glVertexArrayAttribIFormat (GLuint, GLuint, GLint, GLenum, GLuint);
  void glVertexArrayAttribLFormat (GLuint, GLuint, GLint, GLenum, GLuint);
  void glVertexArrayAttribBinding (GLuint, GLuint, GLuint);
  void glVertexArrayBindingDivisor (GLuint, GLuint, GLuint);
  void glGetVertexArrayiv (GLuint, GLenum, GLint*);
  void glGetVertexArrayIndexediv (GLuint, GLuint, GLenum, GLint*);
  void glGetVertexArrayIndexed64iv (GLuint, GLuint, GLenum, GLint64*);
  void glCreateSamplers (GLsizei, GLuint*);
  void glCreateProgramPipelines (GLsizei, GLuint*);
  void glCreateQueries (GLenum, GLsizei, GLuint*);
  void glGetQueryBufferObjectiv (GLuint, GLuint, GLenum, GLintptr);
  void glGetQueryBufferObjectuiv (GLuint, GLuint, GLenum, GLintptr);
  void glGetQueryBufferObjecti64v (GLuint, GLuint, GLenum, GLintptr);
  void glGetQueryBufferObjectui64v (GLuint, GLuint, GLenum, GLintptr);
}

// ARB_get_texture_sub_image
extern(System) @nogc nothrow {
  void glGetTextureSubImage (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
  void glGetCompressedTextureSubImage (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void*);
}

// KHR_robustness
extern(System) @nogc nothrow {
  GLenum glGetGraphicsResetStatus ();
  void glReadnPixels (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*);
  void glGetnUniformfv (GLuint, GLint, GLsizei, GLfloat*);
  void glGetnUniformiv (GLuint, GLint, GLsizei, GLint*);
  void glGetnUniformuiv (GLuint, GLint, GLsizei, GLuint*);
}

// ARB_texture_barrier
extern(System) @nogc nothrow {
  void glTextureBarrier ();
}
