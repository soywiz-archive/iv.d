/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module iv.sdl2.net is aliced;
pragma(lib, "SDL2_net");

import iv.sdl2.sdl;

alias SDLNet_Version = SDL_version;

enum : ubyte {
  SDL_NET_MAJOR_VERSION = 2,
  SDL_NET_MINOR_VERSION = 0,
  SDL_NET_PATCHLEVEL    = 0,
}

void SDL_NET_VERSION(SDL_version* X) {
  X.major = SDL_NET_MAJOR_VERSION;
  X.minor = SDL_NET_MINOR_VERSION;
  X.patch = SDL_NET_PATCHLEVEL;
}

struct IPaddress {
  uint host;
  ushort port;
}

enum {
  INADDR_ANY = 0x00000000,
  INADDR_NONE = 0xFFFFFFFF,
  INADDR_LOOPBACK = 0x7f000001,
  INADDR_BROADCAST = 0xFFFFFFFF,
}

alias TCPsocket = void*;

enum SDLNET_MAX_UDPCHANNELS = 32;
enum SDLNET_MAX_UDPADRESSES = 4;

alias UDPsocket = void*;

struct UDPpacket {
  int channel;
  ubyte* data;
  int len;
  int maxlen;
  int status;
  IPaddress address;
}

struct _SDLNet_SocketSet;
alias _SDLNet_SocketSet* SDLNet_SocketSet;

struct _SDLNet_GenericSocket {
  int ready;
}
alias SDLNet_GenericSocket = _SDLNet_GenericSocket*;

nothrow @nogc {
  int SDLNet_TCP_AddSocket (SDLNet_SocketSet set, void* sock) {
    return SDLNet_AddSocket(set, cast(SDLNet_GenericSocket)sock );
  }
  alias SDLNet_UDP_AddSocket = SDLNet_TCP_AddSocket;

  int SDLNet_TCP_DelSocket(SDLNet_SocketSet set, void* sock) {
    return SDLNet_DelSocket(set, cast(SDLNet_GenericSocket)sock );
  }
  alias SDLNet_UDP_DelSocket = SDLNet_TCP_DelSocket;

  bool SDLNet_SocketReady(void* sock) {
    return (sock && (cast(SDLNet_GenericSocket)sock).ready != 0);
  }
}

extern(C) @nogc nothrow {
  const(SDLNet_Version)* SDLNet_Linked_Version ();
  int SDLNet_Init ();
  void SDLNet_Quit ();
  int SDLNet_ResolveHost (IPaddress*, const(char)*, ushort);
  const(char)* SDLNet_ResolveIP (const(IPaddress)*);
  int SDLNet_GetLocalAddresses (IPaddress*, int);
  TCPsocket SDLNet_TCP_Open (IPaddress*);
  TCPsocket SDLNet_TCP_Accept (TCPsocket);
  IPaddress* SDLNet_TCP_GetPeerAddress (TCPsocket);
  int SDLNet_TCP_Send (TCPsocket, const(void)*, int);
  int SDLNet_TCP_Recv (TCPsocket, void*, int);
  void SDLNet_TCP_Close (TCPsocket);
  UDPpacket* SDLNet_AllocPacket (int);
  int SDLNet_ResizePacket (UDPpacket*, int);
  void SDLNet_FreePacket (UDPpacket*);
  UDPpacket** SDLNet_AllocPacketV (int, int);
  void SDLNet_FreePacketV (UDPpacket**);
  UDPsocket SDLNet_UDP_Open (ushort);
  void SDLNet_UDP_SetPacketLoss (UDPsocket, int);
  int SDLNet_UDP_Bind (UDPsocket, int, const(IPaddress)*);
  void SDLNet_UDP_Unbind (UDPsocket, int);
  IPaddress* SDLNet_UDP_GetPeerAddress (UDPsocket, int);
  int SDLNet_UDP_SendV (UDPsocket, UDPpacket**, int);
  int SDLNet_UDP_Send (UDPsocket, int, UDPpacket*);
  int SDLNet_UDP_RecvV (UDPsocket, UDPpacket**);
  int SDLNet_UDP_Recv (UDPsocket, UDPpacket*);
  void SDLNet_UDP_Close (UDPsocket);
  SDLNet_SocketSet SDLNet_AllocSocketSet (int);
  int SDLNet_AddSocket (SDLNet_SocketSet, SDLNet_GenericSocket);
  int SDLNet_DelSocket (SDLNet_SocketSet, SDLNet_GenericSocket);
  int SDLNet_CheckSockets (SDLNet_SocketSet, uint);
  void SDLNet_FreeSocketSet (SDLNet_SocketSet);
  void SDLNet_SetError (const(char)* fmt, ...);
  const(char)* SDLNet_GetError ();
}
